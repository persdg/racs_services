
scorbot_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c6b8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e20  0801c8b8  0801c8b8  0002c8b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e6d8  0801e6d8  00031fec  2**0
                  CONTENTS
  4 .ARM          00000008  0801e6d8  0801e6d8  0002e6d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e6e0  0801e6e0  00031fec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  0801e6e0  0801e6e0  0002e6e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0801e6f4  0801e6f4  0002e6f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001fec  20000000  0801e6fc  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ea54  20001ff0  080206e8  00031ff0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20010a44  080206e8  00040a44  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00031fec  2**0
                  CONTENTS, READONLY
 12 .comment      00000076  00000000  00000000  0003201a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003507d  00000000  00000000  00032090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000065d3  00000000  00000000  0006710d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001eb8  00000000  00000000  0006d6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000178e  00000000  00000000  0006f598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003585a  00000000  00000000  00070d26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002da99  00000000  00000000  000a6580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011ee02  00000000  00000000  000d4019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008da0  00000000  00000000  001f2e1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001fbbbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20001ff0 	.word	0x20001ff0
 800021c:	00000000 	.word	0x00000000
 8000220:	0801c8a0 	.word	0x0801c8a0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20001ff4 	.word	0x20001ff4
 800023c:	0801c8a0 	.word	0x0801c8a0

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr
	...

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800032e:	f000 b9bb 	b.w	80006a8 <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003c4:	f000 b970 	b.w	80006a8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9e08      	ldr	r6, [sp, #32]
 80003e6:	460d      	mov	r5, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	460f      	mov	r7, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4694      	mov	ip, r2
 80003f4:	d965      	bls.n	80004c2 <__udivmoddi4+0xe2>
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	b143      	cbz	r3, 800040e <__udivmoddi4+0x2e>
 80003fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000400:	f1c3 0220 	rsb	r2, r3, #32
 8000404:	409f      	lsls	r7, r3
 8000406:	fa20 f202 	lsr.w	r2, r0, r2
 800040a:	4317      	orrs	r7, r2
 800040c:	409c      	lsls	r4, r3
 800040e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000412:	fa1f f58c 	uxth.w	r5, ip
 8000416:	fbb7 f1fe 	udiv	r1, r7, lr
 800041a:	0c22      	lsrs	r2, r4, #16
 800041c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000420:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000424:	fb01 f005 	mul.w	r0, r1, r5
 8000428:	4290      	cmp	r0, r2
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x62>
 800042c:	eb1c 0202 	adds.w	r2, ip, r2
 8000430:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000434:	f080 811c 	bcs.w	8000670 <__udivmoddi4+0x290>
 8000438:	4290      	cmp	r0, r2
 800043a:	f240 8119 	bls.w	8000670 <__udivmoddi4+0x290>
 800043e:	3902      	subs	r1, #2
 8000440:	4462      	add	r2, ip
 8000442:	1a12      	subs	r2, r2, r0
 8000444:	b2a4      	uxth	r4, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000452:	fb00 f505 	mul.w	r5, r0, r5
 8000456:	42a5      	cmp	r5, r4
 8000458:	d90a      	bls.n	8000470 <__udivmoddi4+0x90>
 800045a:	eb1c 0404 	adds.w	r4, ip, r4
 800045e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000462:	f080 8107 	bcs.w	8000674 <__udivmoddi4+0x294>
 8000466:	42a5      	cmp	r5, r4
 8000468:	f240 8104 	bls.w	8000674 <__udivmoddi4+0x294>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000474:	1b64      	subs	r4, r4, r5
 8000476:	2100      	movs	r1, #0
 8000478:	b11e      	cbz	r6, 8000482 <__udivmoddi4+0xa2>
 800047a:	40dc      	lsrs	r4, r3
 800047c:	2300      	movs	r3, #0
 800047e:	e9c6 4300 	strd	r4, r3, [r6]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0xbc>
 800048a:	2e00      	cmp	r6, #0
 800048c:	f000 80ed 	beq.w	800066a <__udivmoddi4+0x28a>
 8000490:	2100      	movs	r1, #0
 8000492:	e9c6 0500 	strd	r0, r5, [r6]
 8000496:	4608      	mov	r0, r1
 8000498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049c:	fab3 f183 	clz	r1, r3
 80004a0:	2900      	cmp	r1, #0
 80004a2:	d149      	bne.n	8000538 <__udivmoddi4+0x158>
 80004a4:	42ab      	cmp	r3, r5
 80004a6:	d302      	bcc.n	80004ae <__udivmoddi4+0xce>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	f200 80f8 	bhi.w	800069e <__udivmoddi4+0x2be>
 80004ae:	1a84      	subs	r4, r0, r2
 80004b0:	eb65 0203 	sbc.w	r2, r5, r3
 80004b4:	2001      	movs	r0, #1
 80004b6:	4617      	mov	r7, r2
 80004b8:	2e00      	cmp	r6, #0
 80004ba:	d0e2      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	e9c6 4700 	strd	r4, r7, [r6]
 80004c0:	e7df      	b.n	8000482 <__udivmoddi4+0xa2>
 80004c2:	b902      	cbnz	r2, 80004c6 <__udivmoddi4+0xe6>
 80004c4:	deff      	udf	#255	; 0xff
 80004c6:	fab2 f382 	clz	r3, r2
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	f040 8090 	bne.w	80005f0 <__udivmoddi4+0x210>
 80004d0:	1a8a      	subs	r2, r1, r2
 80004d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d6:	fa1f fe8c 	uxth.w	lr, ip
 80004da:	2101      	movs	r1, #1
 80004dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004e0:	fb07 2015 	mls	r0, r7, r5, r2
 80004e4:	0c22      	lsrs	r2, r4, #16
 80004e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ea:	fb0e f005 	mul.w	r0, lr, r5
 80004ee:	4290      	cmp	r0, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x124>
 80004f2:	eb1c 0202 	adds.w	r2, ip, r2
 80004f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x122>
 80004fc:	4290      	cmp	r0, r2
 80004fe:	f200 80cb 	bhi.w	8000698 <__udivmoddi4+0x2b8>
 8000502:	4645      	mov	r5, r8
 8000504:	1a12      	subs	r2, r2, r0
 8000506:	b2a4      	uxth	r4, r4
 8000508:	fbb2 f0f7 	udiv	r0, r2, r7
 800050c:	fb07 2210 	mls	r2, r7, r0, r2
 8000510:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000514:	fb0e fe00 	mul.w	lr, lr, r0
 8000518:	45a6      	cmp	lr, r4
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x14e>
 800051c:	eb1c 0404 	adds.w	r4, ip, r4
 8000520:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x14c>
 8000526:	45a6      	cmp	lr, r4
 8000528:	f200 80bb 	bhi.w	80006a2 <__udivmoddi4+0x2c2>
 800052c:	4610      	mov	r0, r2
 800052e:	eba4 040e 	sub.w	r4, r4, lr
 8000532:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000536:	e79f      	b.n	8000478 <__udivmoddi4+0x98>
 8000538:	f1c1 0720 	rsb	r7, r1, #32
 800053c:	408b      	lsls	r3, r1
 800053e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000542:	ea4c 0c03 	orr.w	ip, ip, r3
 8000546:	fa05 f401 	lsl.w	r4, r5, r1
 800054a:	fa20 f307 	lsr.w	r3, r0, r7
 800054e:	40fd      	lsrs	r5, r7
 8000550:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000554:	4323      	orrs	r3, r4
 8000556:	fbb5 f8f9 	udiv	r8, r5, r9
 800055a:	fa1f fe8c 	uxth.w	lr, ip
 800055e:	fb09 5518 	mls	r5, r9, r8, r5
 8000562:	0c1c      	lsrs	r4, r3, #16
 8000564:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000568:	fb08 f50e 	mul.w	r5, r8, lr
 800056c:	42a5      	cmp	r5, r4
 800056e:	fa02 f201 	lsl.w	r2, r2, r1
 8000572:	fa00 f001 	lsl.w	r0, r0, r1
 8000576:	d90b      	bls.n	8000590 <__udivmoddi4+0x1b0>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000580:	f080 8088 	bcs.w	8000694 <__udivmoddi4+0x2b4>
 8000584:	42a5      	cmp	r5, r4
 8000586:	f240 8085 	bls.w	8000694 <__udivmoddi4+0x2b4>
 800058a:	f1a8 0802 	sub.w	r8, r8, #2
 800058e:	4464      	add	r4, ip
 8000590:	1b64      	subs	r4, r4, r5
 8000592:	b29d      	uxth	r5, r3
 8000594:	fbb4 f3f9 	udiv	r3, r4, r9
 8000598:	fb09 4413 	mls	r4, r9, r3, r4
 800059c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005a4:	45a6      	cmp	lr, r4
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x1da>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80005b0:	d26c      	bcs.n	800068c <__udivmoddi4+0x2ac>
 80005b2:	45a6      	cmp	lr, r4
 80005b4:	d96a      	bls.n	800068c <__udivmoddi4+0x2ac>
 80005b6:	3b02      	subs	r3, #2
 80005b8:	4464      	add	r4, ip
 80005ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005be:	fba3 9502 	umull	r9, r5, r3, r2
 80005c2:	eba4 040e 	sub.w	r4, r4, lr
 80005c6:	42ac      	cmp	r4, r5
 80005c8:	46c8      	mov	r8, r9
 80005ca:	46ae      	mov	lr, r5
 80005cc:	d356      	bcc.n	800067c <__udivmoddi4+0x29c>
 80005ce:	d053      	beq.n	8000678 <__udivmoddi4+0x298>
 80005d0:	b156      	cbz	r6, 80005e8 <__udivmoddi4+0x208>
 80005d2:	ebb0 0208 	subs.w	r2, r0, r8
 80005d6:	eb64 040e 	sbc.w	r4, r4, lr
 80005da:	fa04 f707 	lsl.w	r7, r4, r7
 80005de:	40ca      	lsrs	r2, r1
 80005e0:	40cc      	lsrs	r4, r1
 80005e2:	4317      	orrs	r7, r2
 80005e4:	e9c6 7400 	strd	r7, r4, [r6]
 80005e8:	4618      	mov	r0, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005f0:	f1c3 0120 	rsb	r1, r3, #32
 80005f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005f8:	fa20 f201 	lsr.w	r2, r0, r1
 80005fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000600:	409d      	lsls	r5, r3
 8000602:	432a      	orrs	r2, r5
 8000604:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000608:	fa1f fe8c 	uxth.w	lr, ip
 800060c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000610:	fb07 1510 	mls	r5, r7, r0, r1
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800061a:	fb00 f50e 	mul.w	r5, r0, lr
 800061e:	428d      	cmp	r5, r1
 8000620:	fa04 f403 	lsl.w	r4, r4, r3
 8000624:	d908      	bls.n	8000638 <__udivmoddi4+0x258>
 8000626:	eb1c 0101 	adds.w	r1, ip, r1
 800062a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800062e:	d22f      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000630:	428d      	cmp	r5, r1
 8000632:	d92d      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000634:	3802      	subs	r0, #2
 8000636:	4461      	add	r1, ip
 8000638:	1b49      	subs	r1, r1, r5
 800063a:	b292      	uxth	r2, r2
 800063c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000640:	fb07 1115 	mls	r1, r7, r5, r1
 8000644:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000648:	fb05 f10e 	mul.w	r1, r5, lr
 800064c:	4291      	cmp	r1, r2
 800064e:	d908      	bls.n	8000662 <__udivmoddi4+0x282>
 8000650:	eb1c 0202 	adds.w	r2, ip, r2
 8000654:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000658:	d216      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 800065a:	4291      	cmp	r1, r2
 800065c:	d914      	bls.n	8000688 <__udivmoddi4+0x2a8>
 800065e:	3d02      	subs	r5, #2
 8000660:	4462      	add	r2, ip
 8000662:	1a52      	subs	r2, r2, r1
 8000664:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000668:	e738      	b.n	80004dc <__udivmoddi4+0xfc>
 800066a:	4631      	mov	r1, r6
 800066c:	4630      	mov	r0, r6
 800066e:	e708      	b.n	8000482 <__udivmoddi4+0xa2>
 8000670:	4639      	mov	r1, r7
 8000672:	e6e6      	b.n	8000442 <__udivmoddi4+0x62>
 8000674:	4610      	mov	r0, r2
 8000676:	e6fb      	b.n	8000470 <__udivmoddi4+0x90>
 8000678:	4548      	cmp	r0, r9
 800067a:	d2a9      	bcs.n	80005d0 <__udivmoddi4+0x1f0>
 800067c:	ebb9 0802 	subs.w	r8, r9, r2
 8000680:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000684:	3b01      	subs	r3, #1
 8000686:	e7a3      	b.n	80005d0 <__udivmoddi4+0x1f0>
 8000688:	4645      	mov	r5, r8
 800068a:	e7ea      	b.n	8000662 <__udivmoddi4+0x282>
 800068c:	462b      	mov	r3, r5
 800068e:	e794      	b.n	80005ba <__udivmoddi4+0x1da>
 8000690:	4640      	mov	r0, r8
 8000692:	e7d1      	b.n	8000638 <__udivmoddi4+0x258>
 8000694:	46d0      	mov	r8, sl
 8000696:	e77b      	b.n	8000590 <__udivmoddi4+0x1b0>
 8000698:	3d02      	subs	r5, #2
 800069a:	4462      	add	r2, ip
 800069c:	e732      	b.n	8000504 <__udivmoddi4+0x124>
 800069e:	4608      	mov	r0, r1
 80006a0:	e70a      	b.n	80004b8 <__udivmoddi4+0xd8>
 80006a2:	4464      	add	r4, ip
 80006a4:	3802      	subs	r0, #2
 80006a6:	e742      	b.n	800052e <__udivmoddi4+0x14e>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <control_callback>:
#include <callbacks.hpp>

void control_callback(const void* request_msg, void* response_msg){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
		racs_services__srv__Control_Request* req_in =
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	60fb      	str	r3, [r7, #12]
				(racs_services__srv__Control_Request*) request_msg;
		racs_services__srv__Control_Response* res_in =
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	60bb      	str	r3, [r7, #8]
				(racs_services__srv__Control_Response*) response_msg;
		ScorBot.lastEvent = getCurrentTime();
 80006be:	f003 f813 	bl	80036e8 <_Z14getCurrentTimev>
 80006c2:	4603      	mov	r3, r0
 80006c4:	4a06      	ldr	r2, [pc, #24]	; (80006e0 <control_callback+0x34>)
 80006c6:	6013      	str	r3, [r2, #0]
		ScorBot.rcvCtrl(req_in);
 80006c8:	68f9      	ldr	r1, [r7, #12]
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <control_callback+0x34>)
 80006cc:	f000 fb24 	bl	8000d18 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request>
		ScorBot.sndCtrl(res_in);
 80006d0:	68b9      	ldr	r1, [r7, #8]
 80006d2:	4803      	ldr	r0, [pc, #12]	; (80006e0 <control_callback+0x34>)
 80006d4:	f000 fb81 	bl	8000dda <_ZN5Robot7sndCtrlEP36racs_services__srv__Control_Response>
	}
 80006d8:	bf00      	nop
 80006da:	3710      	adds	r7, #16
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	2000200c 	.word	0x2000200c

080006e4 <setup_callback>:

void setup_callback(const void* request_msg, void* response_msg){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	6039      	str	r1, [r7, #0]
		racs_services__srv__Setup_Request* req_in =
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	60fb      	str	r3, [r7, #12]
				(racs_services__srv__Setup_Request*) request_msg;
		racs_services__srv__Setup_Response* res_in =
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	60bb      	str	r3, [r7, #8]
				(racs_services__srv__Setup_Response*) response_msg;
		ScorBot.lastEvent = getCurrentTime();
 80006f6:	f002 fff7 	bl	80036e8 <_Z14getCurrentTimev>
 80006fa:	4603      	mov	r3, r0
 80006fc:	4a06      	ldr	r2, [pc, #24]	; (8000718 <setup_callback+0x34>)
 80006fe:	6013      	str	r3, [r2, #0]
		ScorBot.rcvSetup(req_in);
 8000700:	68f9      	ldr	r1, [r7, #12]
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <setup_callback+0x34>)
 8000704:	f000 fb78 	bl	8000df8 <_ZN5Robot8rcvSetupEP33racs_services__srv__Setup_Request>
		ScorBot.sndSetup(res_in);
 8000708:	68b9      	ldr	r1, [r7, #8]
 800070a:	4803      	ldr	r0, [pc, #12]	; (8000718 <setup_callback+0x34>)
 800070c:	f000 fbd4 	bl	8000eb8 <_ZN5Robot8sndSetupEP34racs_services__srv__Setup_Response>
	}
 8000710:	bf00      	nop
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	2000200c 	.word	0x2000200c

0800071c <timer_callback>:

void timer_callback(rcl_timer_t* timer, int64_t last_call_time)
{
 800071c:	b590      	push	{r4, r7, lr}
 800071e:	b08d      	sub	sp, #52	; 0x34
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	e9c7 2300 	strd	r2, r3, [r7]
	UNUSED(timer);
	UNUSED(last_call_time);

	if (timer != NULL) {
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d043      	beq.n	80007b6 <timer_callback+0x9a>
		racs_services__msg__Feedback feedback;
		rcl_ret_t rc;

		int size = ScorBot.getSize();
 800072e:	4823      	ldr	r0, [pc, #140]	; (80007bc <timer_callback+0xa0>)
 8000730:	f000 fa0d 	bl	8000b4e <_ZN5Robot7getSizeEv>
 8000734:	62b8      	str	r0, [r7, #40]	; 0x28
		feedback.num_motors = size;
 8000736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000738:	b2db      	uxtb	r3, r3
 800073a:	753b      	strb	r3, [r7, #20]
		for(uint8_t i = 0; i < size; i++) {
 800073c:	2300      	movs	r3, #0
 800073e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000742:	e013      	b.n	800076c <timer_callback+0x50>
			feedback.encoders[i] = ScorBot.getEncoder(i);
 8000744:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 8000748:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800074c:	4619      	mov	r1, r3
 800074e:	481b      	ldr	r0, [pc, #108]	; (80007bc <timer_callback+0xa0>)
 8000750:	f000 fab1 	bl	8000cb6 <_ZN5Robot10getEncoderEh>
 8000754:	4603      	mov	r3, r0
 8000756:	461a      	mov	r2, r3
 8000758:	0063      	lsls	r3, r4, #1
 800075a:	3330      	adds	r3, #48	; 0x30
 800075c:	443b      	add	r3, r7
 800075e:	f823 2c1a 	strh.w	r2, [r3, #-26]
		for(uint8_t i = 0; i < size; i++) {
 8000762:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000766:	3301      	adds	r3, #1
 8000768:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800076c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000770:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000772:	429a      	cmp	r2, r3
 8000774:	dce6      	bgt.n	8000744 <timer_callback+0x28>
		}

		for(uint8_t i = 6; i > size; i--) {
 8000776:	2306      	movs	r3, #6
 8000778:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800077c:	e00c      	b.n	8000798 <timer_callback+0x7c>
			feedback.encoders[i] = 0;
 800077e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	3330      	adds	r3, #48	; 0x30
 8000786:	443b      	add	r3, r7
 8000788:	2200      	movs	r2, #0
 800078a:	f823 2c1a 	strh.w	r2, [r3, #-26]
		for(uint8_t i = 6; i > size; i--) {
 800078e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000792:	3b01      	subs	r3, #1
 8000794:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000798:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800079c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800079e:	429a      	cmp	r2, r3
 80007a0:	dbed      	blt.n	800077e <timer_callback+0x62>
		}
		rc = rcl_publish(&feedback_publisher, &feedback, NULL);
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	2200      	movs	r2, #0
 80007a8:	4619      	mov	r1, r3
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <timer_callback+0xa4>)
 80007ac:	f00b fea2 	bl	800c4f4 <rcl_publish>
 80007b0:	6278      	str	r0, [r7, #36]	; 0x24
		if (rc != RCL_RET_OK) return;
 80007b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b4:	2b00      	cmp	r3, #0
	}
}
 80007b6:	3734      	adds	r7, #52	; 0x34
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd90      	pop	{r4, r7, pc}
 80007bc:	2000200c 	.word	0x2000200c
 80007c0:	2000645c 	.word	0x2000645c

080007c4 <_ZN10PinControlC1EP12GPIO_TypeDeft>:

PinControl::PinControl() {

}

PinControl::PinControl(GPIO_TypeDef* port, uint16_t pin){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	4613      	mov	r3, r2
 80007d0:	80fb      	strh	r3, [r7, #6]
  this->port = port;
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	68ba      	ldr	r2, [r7, #8]
 80007d6:	601a      	str	r2, [r3, #0]
  this->pin = pin;
 80007d8:	88fb      	ldrh	r3, [r7, #6]
 80007da:	b2da      	uxtb	r2, r3
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	711a      	strb	r2, [r3, #4]
  setLimits(0.0, 0.0);
 80007e0:	eddf 0a05 	vldr	s1, [pc, #20]	; 80007f8 <_ZN10PinControlC1EP12GPIO_TypeDeft+0x34>
 80007e4:	ed9f 0a04 	vldr	s0, [pc, #16]	; 80007f8 <_ZN10PinControlC1EP12GPIO_TypeDeft+0x34>
 80007e8:	68f8      	ldr	r0, [r7, #12]
 80007ea:	f000 f807 	bl	80007fc <_ZN10PinControl9setLimitsEff>
}
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	4618      	mov	r0, r3
 80007f2:	3710      	adds	r7, #16
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	00000000 	.word	0x00000000

080007fc <_ZN10PinControl9setLimitsEff>:
  this->port = port;
  this->pin = pin;
  setLimits(v1, v2);
}

void PinControl::setLimits(float v1, float v2){
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	ed87 0a02 	vstr	s0, [r7, #8]
 8000808:	edc7 0a01 	vstr	s1, [r7, #4]
  this->v1 = v1;
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	68ba      	ldr	r2, [r7, #8]
 8000810:	609a      	str	r2, [r3, #8]
  this->v2 = v2;
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	60da      	str	r2, [r3, #12]
}
 8000818:	bf00      	nop
 800081a:	3714      	adds	r7, #20
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <_ZN10PinMeasureC1EP12GPIO_TypeDeft>:

PinMeasure::PinMeasure() {

}

PinMeasure::PinMeasure(GPIO_TypeDef* port, uint16_t pin){
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	4613      	mov	r3, r2
 8000830:	80fb      	strh	r3, [r7, #6]
  this->port = port;
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	68ba      	ldr	r2, [r7, #8]
 8000836:	601a      	str	r2, [r3, #0]
  this->pin = pin;
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	88fa      	ldrh	r2, [r7, #6]
 800083c:	809a      	strh	r2, [r3, #4]
  setLimits(0.0, 0.0);
 800083e:	eddf 0a06 	vldr	s1, [pc, #24]	; 8000858 <_ZN10PinMeasureC1EP12GPIO_TypeDeft+0x34>
 8000842:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8000858 <_ZN10PinMeasureC1EP12GPIO_TypeDeft+0x34>
 8000846:	68f8      	ldr	r0, [r7, #12]
 8000848:	f000 f808 	bl	800085c <_ZN10PinMeasure9setLimitsEff>
}
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	4618      	mov	r0, r3
 8000850:	3710      	adds	r7, #16
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	00000000 	.word	0x00000000

0800085c <_ZN10PinMeasure9setLimitsEff>:
  this->port = port;
  this->pin = pin;
  setLimits(v1, v2);
}

void PinMeasure::setLimits(float v1, float v2){
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	ed87 0a02 	vstr	s0, [r7, #8]
 8000868:	edc7 0a01 	vstr	s1, [r7, #4]
  this->v1 = v1;
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	68ba      	ldr	r2, [r7, #8]
 8000870:	609a      	str	r2, [r3, #8]
  this->v2 = v2;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	60da      	str	r2, [r3, #12]
}
 8000878:	bf00      	nop
 800087a:	3714      	adds	r7, #20
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <_ZN10PinMeasure5stateEv>:

bool PinMeasure::state(){
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  return HAL_GPIO_ReadPin(port, pin);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	889b      	ldrh	r3, [r3, #4]
 8000894:	4619      	mov	r1, r3
 8000896:	4610      	mov	r0, r2
 8000898:	f003 fe4c 	bl	8004534 <HAL_GPIO_ReadPin>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	bf14      	ite	ne
 80008a2:	2301      	movne	r3, #1
 80008a4:	2300      	moveq	r3, #0
 80008a6:	b2db      	uxtb	r3, r3
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <_ZN5MotorC1ER10PinControlS1_P17TIM_HandleTypeDefhR10PinMeasure>:

// ==================================================
// Motor
// ==================================================

Motor::Motor(PinControl &INA, PinControl &INB,
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	607a      	str	r2, [r7, #4]
 80008bc:	603b      	str	r3, [r7, #0]
			 TIM_HandleTypeDef* htimPWM, uint8_t CCRx,
			 PinMeasure &END)
  : pin_INA(INA), pin_INB(INB), htimPWM(htimPWM), CCRx(CCRx), pin_END(END) {}
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	68ba      	ldr	r2, [r7, #8]
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	683a      	ldr	r2, [r7, #0]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	7e3a      	ldrb	r2, [r7, #24]
 80008d4:	731a      	strb	r2, [r3, #12]
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	69fa      	ldr	r2, [r7, #28]
 80008da:	615a      	str	r2, [r3, #20]
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	2200      	movs	r2, #0
 80008e0:	761a      	strb	r2, [r3, #24]
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	4618      	mov	r0, r3
 80008e6:	3714      	adds	r7, #20
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <_ZN5MotorC1ER10PinControlS1_P17TIM_HandleTypeDefhS3_R10PinMeasure>:

Motor::Motor(PinControl &INA, PinControl &INB,
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	607a      	str	r2, [r7, #4]
 80008fc:	603b      	str	r3, [r7, #0]
			 TIM_HandleTypeDef* htimPWM, uint8_t CCRx,
			 TIM_HandleTypeDef* htimENC, PinMeasure &END)
  : pin_INA(INA), pin_INB(INB), htimPWM(htimPWM), CCRx(CCRx), htimENC(htimENC), pin_END(END) {}
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	68ba      	ldr	r2, [r7, #8]
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	683a      	ldr	r2, [r7, #0]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	7e3a      	ldrb	r2, [r7, #24]
 8000914:	731a      	strb	r2, [r3, #12]
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	69fa      	ldr	r2, [r7, #28]
 800091a:	611a      	str	r2, [r3, #16]
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	6a3a      	ldr	r2, [r7, #32]
 8000920:	615a      	str	r2, [r3, #20]
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	2200      	movs	r2, #0
 8000926:	761a      	strb	r2, [r3, #24]
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	4618      	mov	r0, r3
 800092c:	3714      	adds	r7, #20
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <_ZN5MotorD1Ev>:

Motor::~Motor() {}
 8000936:	b480      	push	{r7}
 8000938:	b083      	sub	sp, #12
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4618      	mov	r0, r3
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <_ZN5Motor10getEncoderEv>:

/*void Motor::invertEncoder(bool invert){
  this->encoder_invert = invert;
}*/

long Motor::getEncoder(){
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  return htimENC->Instance->CNT;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	691b      	ldr	r3, [r3, #16]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800095c:	4618      	mov	r0, r3
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <_ZN5Motor11isInEndStopEv>:
      break;

  }
}

bool Motor::isInEndStop(){
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  return pin_END.state();
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	695b      	ldr	r3, [r3, #20]
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff ff85 	bl	8000884 <_ZN10PinMeasure5stateEv>
 800097a:	4603      	mov	r3, r0
}
 800097c:	4618      	mov	r0, r3
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <_ZN5RobotC1ER10PinControlS1_mhPP5MotorPf>:

// ==================================================
// Robot
// ==================================================

Robot::Robot(PinControl &enable, PinControl &toggle, unsigned long ts_ms, uint8_t size, Motor **motors, float *encs_div)
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
 8000990:	603b      	str	r3, [r7, #0]
  : pin_enable(enable), pin_toggle(toggle) {
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	68ba      	ldr	r2, [r7, #8]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	609a      	str	r2, [r3, #8]
  this->ts = ts_ms;
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	683a      	ldr	r2, [r7, #0]
 80009a2:	60da      	str	r2, [r3, #12]
  this->motors = 		(Motor**)	malloc(size * sizeof(Motor*));
 80009a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	4618      	mov	r0, r3
 80009ac:	f01a fbf2 	bl	801b194 <malloc>
 80009b0:	4603      	mov	r3, r0
 80009b2:	461a      	mov	r2, r3
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	615a      	str	r2, [r3, #20]
  this->pids = 			(PID*)		malloc(size * sizeof(PID));
 80009b8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80009bc:	4613      	mov	r3, r2
 80009be:	00db      	lsls	r3, r3, #3
 80009c0:	1a9b      	subs	r3, r3, r2
 80009c2:	00db      	lsls	r3, r3, #3
 80009c4:	4618      	mov	r0, r3
 80009c6:	f01a fbe5 	bl	801b194 <malloc>
 80009ca:	4603      	mov	r3, r0
 80009cc:	461a      	mov	r2, r3
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	619a      	str	r2, [r3, #24]
  this->switches = 		(bool*) 	malloc(size * sizeof(bool));
 80009d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f01a fbdc 	bl	801b194 <malloc>
 80009dc:	4603      	mov	r3, r0
 80009de:	461a      	mov	r2, r3
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	621a      	str	r2, [r3, #32]
  this->motors_pwm = 	(int16_t*) 	malloc(size * sizeof(int16_t));
 80009e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	4618      	mov	r0, r3
 80009ec:	f01a fbd2 	bl	801b194 <malloc>
 80009f0:	4603      	mov	r3, r0
 80009f2:	461a      	mov	r2, r3
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	625a      	str	r2, [r3, #36]	; 0x24
  this->encoders =		(int16_t*)	malloc(size * sizeof(int16_t));
 80009f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	4618      	mov	r0, r3
 8000a00:	f01a fbc8 	bl	801b194 <malloc>
 8000a04:	4603      	mov	r3, r0
 8000a06:	461a      	mov	r2, r3
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	629a      	str	r2, [r3, #40]	; 0x28
  this->error_div = 	(float*) 	malloc(size * sizeof(float));
 8000a0c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	4618      	mov	r0, r3
 8000a14:	f01a fbbe 	bl	801b194 <malloc>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	62da      	str	r2, [r3, #44]	; 0x2c

  this->size = size;
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000a26:	741a      	strb	r2, [r3, #16]
  this->status = Status::Idle;
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	771a      	strb	r2, [r3, #28]
  this->lastEvent = getCurrentTime();
 8000a2e:	f002 fe5b 	bl	80036e8 <_Z14getCurrentTimev>
 8000a32:	4602      	mov	r2, r0
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	601a      	str	r2, [r3, #0]

  for(int i = 0; i < size; i++){
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]
 8000a3c:	e01e      	b.n	8000a7c <_ZN5RobotC1ER10PinControlS1_mhPP5MotorPf+0xf8>
    this->switches[i] = false;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	6a1a      	ldr	r2, [r3, #32]
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	4413      	add	r3, r2
 8000a46:	2200      	movs	r2, #0
 8000a48:	701a      	strb	r2, [r3, #0]
    this->motors_pwm[i] = 0;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	4413      	add	r3, r2
 8000a54:	2200      	movs	r2, #0
 8000a56:	801a      	strh	r2, [r3, #0]
    this->encoders[i] = 0;
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	4413      	add	r3, r2
 8000a62:	2200      	movs	r2, #0
 8000a64:	801a      	strh	r2, [r3, #0]
    this->error_div[i] = 0.0;
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	4413      	add	r3, r2
 8000a70:	f04f 0200 	mov.w	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < size; i++){
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	617b      	str	r3, [r7, #20]
 8000a7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a80:	697a      	ldr	r2, [r7, #20]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	dbdb      	blt.n	8000a3e <_ZN5RobotC1ER10PinControlS1_mhPP5MotorPf+0xba>
  }

  if(motors != NULL){
 8000a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d02c      	beq.n	8000ae6 <_ZN5RobotC1ER10PinControlS1_mhPP5MotorPf+0x162>
    for(int i = 0; i < size; i++){
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	e024      	b.n	8000adc <_ZN5RobotC1ER10PinControlS1_mhPP5MotorPf+0x158>
      if(encs_div != NULL){
 8000a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d013      	beq.n	8000ac0 <_ZN5RobotC1ER10PinControlS1_mhPP5MotorPf+0x13c>
        setMotor(i, motors[i], encs_div[i]);
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	b2d9      	uxtb	r1, r3
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000aa2:	4413      	add	r3, r2
 8000aa4:	6818      	ldr	r0, [r3, #0]
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000aac:	4413      	add	r3, r2
 8000aae:	edd3 7a00 	vldr	s15, [r3]
 8000ab2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ab6:	4602      	mov	r2, r0
 8000ab8:	68f8      	ldr	r0, [r7, #12]
 8000aba:	f000 f897 	bl	8000bec <_ZN5Robot8setMotorEhP5Motorf>
 8000abe:	e00a      	b.n	8000ad6 <_ZN5RobotC1ER10PinControlS1_mhPP5MotorPf+0x152>
      } else {
        setMotor(i, motors[i]);
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	b2d9      	uxtb	r1, r3
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000aca:	4413      	add	r3, r2
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	461a      	mov	r2, r3
 8000ad0:	68f8      	ldr	r0, [r7, #12]
 8000ad2:	f000 f877 	bl	8000bc4 <_ZN5Robot8setMotorEhP5Motor>
    for(int i = 0; i < size; i++){
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	dbd5      	blt.n	8000a92 <_ZN5RobotC1ER10PinControlS1_mhPP5MotorPf+0x10e>
      }
    }
  }

  lastEvent = getCurrentTime();
 8000ae6:	f002 fdff 	bl	80036e8 <_Z14getCurrentTimev>
 8000aea:	4602      	mov	r2, r0
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	601a      	str	r2, [r3, #0]
  update();
 8000af0:	68f8      	ldr	r0, [r7, #12]
 8000af2:	f000 f9ef 	bl	8000ed4 <_ZN5Robot6updateEv>
}
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	4618      	mov	r0, r3
 8000afa:	3718      	adds	r7, #24
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <_ZN5RobotD1Ev>:
  : Robot(enable, toggle,ts_ms, size, motors, NULL) {}

Robot::Robot(PinControl &enable, PinControl &toggle, unsigned long ts_ms, uint8_t size)
  : Robot(enable, toggle,ts_ms, size, NULL, NULL) {}

Robot::~Robot() {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  free(this->motors);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	695b      	ldr	r3, [r3, #20]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f01a fb49 	bl	801b1a4 <free>
  free(this->pids);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	699b      	ldr	r3, [r3, #24]
 8000b16:	4618      	mov	r0, r3
 8000b18:	f01a fb44 	bl	801b1a4 <free>
  free(this->switches);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6a1b      	ldr	r3, [r3, #32]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f01a fb3f 	bl	801b1a4 <free>
  free(this->motors_pwm);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f01a fb3a 	bl	801b1a4 <free>
  free(this->encoders);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b34:	4618      	mov	r0, r3
 8000b36:	f01a fb35 	bl	801b1a4 <free>
  free(this->error_div);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f01a fb30 	bl	801b1a4 <free>
}
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4618      	mov	r0, r3
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <_ZN5Robot7getSizeEv>:

int Robot::getSize(){
 8000b4e:	b480      	push	{r7}
 8000b50:	b083      	sub	sp, #12
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
  return this->size;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	7c1b      	ldrb	r3, [r3, #16]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <_ZN5Robot9setStatusENS_6StatusEb>:

Robot::Status Robot::getStatus(){
  return this->status;
}

void Robot::setStatus(Status status, bool reset = false){
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b082      	sub	sp, #8
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
 8000b6e:	460b      	mov	r3, r1
 8000b70:	70fb      	strb	r3, [r7, #3]
 8000b72:	4613      	mov	r3, r2
 8000b74:	70bb      	strb	r3, [r7, #2]
  if(this->status != status || reset){
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	7f1b      	ldrb	r3, [r3, #28]
 8000b7a:	78fa      	ldrb	r2, [r7, #3]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d102      	bne.n	8000b86 <_ZN5Robot9setStatusENS_6StatusEb+0x20>
 8000b80:	78bb      	ldrb	r3, [r7, #2]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d008      	beq.n	8000b98 <_ZN5Robot9setStatusENS_6StatusEb+0x32>
    resetPWMs();
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f000 f8a8 	bl	8000cdc <_ZN5Robot9resetPWMsEv>
    resetPIDs();
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f000 f873 	bl	8000c78 <_ZN5Robot9resetPIDsEv>
    this->status = status;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	78fa      	ldrb	r2, [r7, #3]
 8000b96:	771a      	strb	r2, [r3, #28]
  }
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <_ZN5Robot8getMotorEh>:

Motor * Robot::getMotor(uint8_t index){
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	460b      	mov	r3, r1
 8000baa:	70fb      	strb	r3, [r7, #3]
  return this->motors[index];
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	695a      	ldr	r2, [r3, #20]
 8000bb0:	78fb      	ldrb	r3, [r7, #3]
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	4413      	add	r3, r2
 8000bb6:	681b      	ldr	r3, [r3, #0]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <_ZN5Robot8setMotorEhP5Motor>:

void Robot::setMotor(uint8_t index, Motor * motor){
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	460b      	mov	r3, r1
 8000bce:	607a      	str	r2, [r7, #4]
 8000bd0:	72fb      	strb	r3, [r7, #11]
  this->motors[index] = motor;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	695a      	ldr	r2, [r3, #20]
 8000bd6:	7afb      	ldrb	r3, [r7, #11]
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	4413      	add	r3, r2
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	601a      	str	r2, [r3, #0]
}
 8000be0:	bf00      	nop
 8000be2:	3714      	adds	r7, #20
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <_ZN5Robot8setMotorEhP5Motorf>:

void Robot::setMotor(uint8_t index, Motor * motor, float enc_div){
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	607a      	str	r2, [r7, #4]
 8000bf8:	ed87 0a00 	vstr	s0, [r7]
 8000bfc:	72fb      	strb	r3, [r7, #11]
  this->motors[index] = motor;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	695a      	ldr	r2, [r3, #20]
 8000c02:	7afb      	ldrb	r3, [r7, #11]
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	4413      	add	r3, r2
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	601a      	str	r2, [r3, #0]
  this->error_div[index] = enc_div;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c10:	7afb      	ldrb	r3, [r7, #11]
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	4413      	add	r3, r2
 8000c16:	683a      	ldr	r2, [r7, #0]
 8000c18:	601a      	str	r2, [r3, #0]
}
 8000c1a:	bf00      	nop
 8000c1c:	3714      	adds	r7, #20
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <_ZN5Robot17setEncoderDividerEhf>:

void Robot::setEncoderDivider(uint8_t index, float enc_div){
 8000c26:	b480      	push	{r7}
 8000c28:	b085      	sub	sp, #20
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	60f8      	str	r0, [r7, #12]
 8000c2e:	460b      	mov	r3, r1
 8000c30:	ed87 0a01 	vstr	s0, [r7, #4]
 8000c34:	72fb      	strb	r3, [r7, #11]
  this->error_div[index] = enc_div;
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c3a:	7afb      	ldrb	r3, [r7, #11]
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	4413      	add	r3, r2
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	601a      	str	r2, [r3, #0]
}
 8000c44:	bf00      	nop
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <_ZN5Robot6getPIDEh>:

PID * Robot::getPID(uint8_t index){
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	460b      	mov	r3, r1
 8000c5a:	70fb      	strb	r3, [r7, #3]
  return &(this->pids[index]);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6999      	ldr	r1, [r3, #24]
 8000c60:	78fa      	ldrb	r2, [r7, #3]
 8000c62:	4613      	mov	r3, r2
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	1a9b      	subs	r3, r3, r2
 8000c68:	00db      	lsls	r3, r3, #3
 8000c6a:	440b      	add	r3, r1
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <_ZN5Robot9resetPIDsEv>:
  for(int i = 0; i < size; i++){
    getPID(i)->setup(kp, ki, kd);
  }
}

void Robot::resetPIDs(){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < size; i++){
 8000c80:	2300      	movs	r3, #0
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	e00c      	b.n	8000ca0 <_ZN5Robot9resetPIDsEv+0x28>
    getPID(i)->reset();
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f7ff ffdf 	bl	8000c50 <_ZN5Robot6getPIDEh>
 8000c92:	4603      	mov	r3, r0
 8000c94:	4618      	mov	r0, r3
 8000c96:	f000 fc75 	bl	8001584 <_ZN3PID5resetEv>
  for(int i = 0; i < size; i++){
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	7c1b      	ldrb	r3, [r3, #16]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	dbec      	blt.n	8000c86 <_ZN5Robot9resetPIDsEv+0xe>
  }
}
 8000cac:	bf00      	nop
 8000cae:	bf00      	nop
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <_ZN5Robot10getEncoderEh>:
  for(int i = 0; i < size; i++){
    setEncoder(i, 0);
  }
}*/

int16_t Robot::getEncoder(uint8_t index) {
 8000cb6:	b480      	push	{r7}
 8000cb8:	b083      	sub	sp, #12
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	70fb      	strb	r3, [r7, #3]
	return this->encoders[index];
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000cc6:	78fb      	ldrb	r3, [r7, #3]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	4413      	add	r3, r2
 8000ccc:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <_ZN5Robot9resetPWMsEv>:
void Robot::setPWM(uint8_t index, int16_t pwm){
  motors_pwm[index] = pwm;

}

void Robot::resetPWMs(){
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < size; i++){
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	e009      	b.n	8000cfe <_ZN5Robot9resetPWMsEv+0x22>
    motors_pwm[i] = 0;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	4413      	add	r3, r2
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	801a      	strh	r2, [r3, #0]
  for(int i = 0; i < size; i++){
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	7c1b      	ldrb	r3, [r3, #16]
 8000d02:	461a      	mov	r2, r3
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4293      	cmp	r3, r2
 8000d08:	dbef      	blt.n	8000cea <_ZN5Robot9resetPWMsEv+0xe>
  }
}
 8000d0a:	bf00      	nop
 8000d0c:	bf00      	nop
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request>:
void Robot::disableMotors(){
  setStatus(Status::Idle, true);
  pin_enable.set(false);
}

void Robot::rcvCtrl(racs_services__srv__Control_Request* request){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]

  if(request->command > 2 || request->num_motors != size) {
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	785b      	ldrb	r3, [r3, #1]
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	d805      	bhi.n	8000d36 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x1e>
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	781a      	ldrb	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	7c1b      	ldrb	r3, [r3, #16]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d005      	beq.n	8000d42 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x2a>
    setStatus(Status::Idle, true);
 8000d36:	2201      	movs	r2, #1
 8000d38:	2100      	movs	r1, #0
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f7ff ff13 	bl	8000b66 <_ZN5Robot9setStatusENS_6StatusEb>
    return;
 8000d40:	e048      	b.n	8000dd4 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0xbc>
  }

  switch(request->command){
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	785b      	ldrb	r3, [r3, #1]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d002      	beq.n	8000d50 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x38>
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	d01b      	beq.n	8000d86 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x6e>
 8000d4e:	e03a      	b.n	8000dc6 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0xae>
    case (unsigned char) Command::Idle:
      for(int i = 0; i < size; i++) {
 8000d50:	2300      	movs	r3, #0
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	e010      	b.n	8000d78 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x60>
        motors_pwm[i] = 0;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	4413      	add	r3, r2
 8000d60:	2200      	movs	r2, #0
 8000d62:	801a      	strh	r2, [r3, #0]
        encoders[i] = 0;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	4413      	add	r3, r2
 8000d6e:	2200      	movs	r2, #0
 8000d70:	801a      	strh	r2, [r3, #0]
      for(int i = 0; i < size; i++) {
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	3301      	adds	r3, #1
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	7c1b      	ldrb	r3, [r3, #16]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	4293      	cmp	r3, r2
 8000d82:	dbe8      	blt.n	8000d56 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x3e>
      }
      break;
 8000d84:	e01f      	b.n	8000dc6 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0xae>
        motors_pwm[i] = request->encoders[i];
        encoders[i] = 0;
      }
      break;*/
    case (unsigned char) Command::PID:
      for(int i = 0; i < size; i++) {
 8000d86:	2300      	movs	r3, #0
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	e015      	b.n	8000db8 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0xa0>
        motors_pwm[i] = 0;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	4413      	add	r3, r2
 8000d96:	2200      	movs	r2, #0
 8000d98:	801a      	strh	r2, [r3, #0]
        encoders[i] = request->encoders[i];
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	441a      	add	r2, r3
 8000da4:	6839      	ldr	r1, [r7, #0]
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	440b      	add	r3, r1
 8000dac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000db0:	8013      	strh	r3, [r2, #0]
      for(int i = 0; i < size; i++) {
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	3301      	adds	r3, #1
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	7c1b      	ldrb	r3, [r3, #16]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	dbe3      	blt.n	8000d8c <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x74>
      }
      break;
 8000dc4:	bf00      	nop
  }

  setStatus((Status) request->command);
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	785b      	ldrb	r3, [r3, #1]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	4619      	mov	r1, r3
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff fec9 	bl	8000b66 <_ZN5Robot9setStatusENS_6StatusEb>
}
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <_ZN5Robot7sndCtrlEP36racs_services__srv__Control_Response>:

void Robot::sndCtrl(racs_services__srv__Control_Response* response){
 8000dda:	b480      	push	{r7}
 8000ddc:	b083      	sub	sp, #12
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
 8000de2:	6039      	str	r1, [r7, #0]
	response->response = (uint8_t) status;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	7f1a      	ldrb	r2, [r3, #28]
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	701a      	strb	r2, [r3, #0]
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <_ZN5Robot8rcvSetupEP33racs_services__srv__Setup_Request>:

void Robot::rcvSetup(racs_services__srv__Setup_Request* request){
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]

  setEncoderDivider(request->motor_index, request->eed);
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	781a      	ldrb	r2, [r3, #0]
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	edd3 7a01 	vldr	s15, [r3, #4]
 8000e0c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e10:	4611      	mov	r1, r2
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff ff07 	bl	8000c26 <_ZN5Robot17setEncoderDividerEhf>
  getPID(request->motor_index)->reset();
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f7ff ff16 	bl	8000c50 <_ZN5Robot6getPIDEh>
 8000e24:	4603      	mov	r3, r0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 fbac 	bl	8001584 <_ZN3PID5resetEv>
  getPID(request->motor_index)->init((float) ts/1000.0, request->tau, request->sat, true);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	4619      	mov	r1, r3
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff ff0c 	bl	8000c50 <_ZN5Robot6getPIDEh>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	68db      	ldr	r3, [r3, #12]
 8000e3e:	ee07 3a90 	vmov	s15, r3
 8000e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e46:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000eb4 <_ZN5Robot8rcvSetupEP33racs_services__srv__Setup_Request+0xbc>
 8000e4a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	edd3 7a05 	vldr	s15, [r3, #20]
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	edd3 6a06 	vldr	s13, [r3, #24]
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	eeb0 1a66 	vmov.f32	s2, s13
 8000e60:	eef0 0a67 	vmov.f32	s1, s15
 8000e64:	eeb0 0a47 	vmov.f32	s0, s14
 8000e68:	4610      	mov	r0, r2
 8000e6a:	f000 fb03 	bl	8001474 <_ZN3PID4initEfffb>
  getPID(request->motor_index)->setup(request->p, request->i, request->d);
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	4619      	mov	r1, r3
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f7ff feeb 	bl	8000c50 <_ZN5Robot6getPIDEh>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	ed93 7a03 	vldr	s14, [r3, #12]
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	edd3 6a04 	vldr	s13, [r3, #16]
 8000e8e:	eeb0 1a66 	vmov.f32	s2, s13
 8000e92:	eef0 0a47 	vmov.f32	s1, s14
 8000e96:	eeb0 0a67 	vmov.f32	s0, s15
 8000e9a:	4610      	mov	r0, r2
 8000e9c:	f000 fb58 	bl	8001550 <_ZN3PID5setupEfff>

  setStatus(Status::Idle, true);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff fe5e 	bl	8000b66 <_ZN5Robot9setStatusENS_6StatusEb>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	447a0000 	.word	0x447a0000

08000eb8 <_ZN5Robot8sndSetupEP34racs_services__srv__Setup_Response>:

void Robot::sndSetup(racs_services__srv__Setup_Response* response){
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
  response->response = (uint8_t) Status::Setup;
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	701a      	strb	r2, [r3, #0]
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <_ZN5Robot6updateEv>:

void Robot::update(){
 8000ed4:	b590      	push	{r4, r7, lr}
 8000ed6:	b089      	sub	sp, #36	; 0x24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  switch(status){
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	7f1b      	ldrb	r3, [r3, #28]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d002      	beq.n	8000eea <_ZN5Robot6updateEv+0x16>
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d004      	beq.n	8000ef2 <_ZN5Robot6updateEv+0x1e>
 8000ee8:	e07f      	b.n	8000fea <_ZN5Robot6updateEv+0x116>
    case Status::Idle:
      resetPWMs();
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff fef6 	bl	8000cdc <_ZN5Robot9resetPWMsEv>
      break;
 8000ef0:	e085      	b.n	8000ffe <_ZN5Robot6updateEv+0x12a>

    /*case Status::DAQ:
      break;*/

    case Status::PID:
      for(int i = 0; i < size; i++){
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
 8000ef6:	e071      	b.n	8000fdc <_ZN5Robot6updateEv+0x108>
        float err = (float) (getMotor(i)->getEncoder() - encoders[i]) / ((error_div[i] == 0) ? 1.0 : error_div[i]);
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	4619      	mov	r1, r3
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff fe4e 	bl	8000ba0 <_ZN5Robot8getMotorEh>
 8000f04:	4603      	mov	r3, r0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff fd20 	bl	800094c <_ZN5Motor10getEncoderEv>
 8000f0c:	4601      	mov	r1, r0
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	4413      	add	r3, r2
 8000f18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f1c:	1acb      	subs	r3, r1, r3
 8000f1e:	ee07 3a90 	vmov	s15, r3
 8000f22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f26:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4413      	add	r3, r2
 8000f34:	edd3 7a00 	vldr	s15, [r3]
 8000f38:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f40:	d009      	beq.n	8000f56 <_ZN5Robot6updateEv+0x82>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	4413      	add	r3, r2
 8000f4c:	edd3 7a00 	vldr	s15, [r3]
 8000f50:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f54:	e001      	b.n	8000f5a <_ZN5Robot6updateEv+0x86>
 8000f56:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8000f5a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000f5e:	eef7 7bc6 	vcvt.f32.f64	s15, d6
 8000f62:	edc7 7a05 	vstr	s15, [r7, #20]
    	motors_pwm[i] = (int16_t) std::min(std::max((float) 0, getPID(i)->evolve(err)), (float) MAX_PWM) - HALF_PWM;
 8000f66:	f04f 0300 	mov.w	r3, #0
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	4619      	mov	r1, r3
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff fe6c 	bl	8000c50 <_ZN5Robot6getPIDEh>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	ed97 0a05 	vldr	s0, [r7, #20]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 fbed 	bl	800175e <_ZN3PID6evolveEf>
 8000f84:	eef0 7a40 	vmov.f32	s15, s0
 8000f88:	edc7 7a03 	vstr	s15, [r7, #12]
 8000f8c:	f107 020c 	add.w	r2, r7, #12
 8000f90:	f107 0308 	add.w	r3, r7, #8
 8000f94:	4611      	mov	r1, r2
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 f9f8 	bl	800138c <_ZSt3maxIfERKT_S2_S2_>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	f04f 438f 	mov.w	r3, #1199570944	; 0x47800000
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	f107 0310 	add.w	r3, r7, #16
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4610      	mov	r0, r2
 8000fac:	f000 fa07 	bl	80013be <_ZSt3minIfERKT_S2_S2_>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	edd3 7a00 	vldr	s15, [r3]
 8000fb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fba:	ee17 3a90 	vmov	r3, s15
 8000fbe:	b21b      	sxth	r3, r3
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000fc6:	b299      	uxth	r1, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	4413      	add	r3, r2
 8000fd2:	b20a      	sxth	r2, r1
 8000fd4:	801a      	strh	r2, [r3, #0]
      for(int i = 0; i < size; i++){
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	61fb      	str	r3, [r7, #28]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	7c1b      	ldrb	r3, [r3, #16]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	db87      	blt.n	8000ef8 <_ZN5Robot6updateEv+0x24>
      }
      break;
 8000fe8:	e009      	b.n	8000ffe <_ZN5Robot6updateEv+0x12a>

    default:
      resetPWMs();
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff fe76 	bl	8000cdc <_ZN5Robot9resetPWMsEv>
      resetPIDs();
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f7ff fe41 	bl	8000c78 <_ZN5Robot9resetPIDsEv>
      status = Status::Idle;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	771a      	strb	r2, [r3, #28]
      break;
 8000ffc:	bf00      	nop
  }

  for(int i = 0; i < size; i++){
 8000ffe:	2300      	movs	r3, #0
 8001000:	61bb      	str	r3, [r7, #24]
 8001002:	e012      	b.n	800102a <_ZN5Robot6updateEv+0x156>
    switches[i] = getMotor(i)->isInEndStop();
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	4619      	mov	r1, r3
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff fdc8 	bl	8000ba0 <_ZN5Robot8getMotorEh>
 8001010:	4601      	mov	r1, r0
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6a1a      	ldr	r2, [r3, #32]
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	18d4      	adds	r4, r2, r3
 800101a:	4608      	mov	r0, r1
 800101c:	f7ff fca4 	bl	8000968 <_ZN5Motor11isInEndStopEv>
 8001020:	4603      	mov	r3, r0
 8001022:	7023      	strb	r3, [r4, #0]
  for(int i = 0; i < size; i++){
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	3301      	adds	r3, #1
 8001028:	61bb      	str	r3, [r7, #24]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	7c1b      	ldrb	r3, [r3, #16]
 800102e:	461a      	mov	r2, r3
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	4293      	cmp	r3, r2
 8001034:	dbe6      	blt.n	8001004 <_ZN5Robot6updateEv+0x130>
  }
}
 8001036:	bf00      	nop
 8001038:	bf00      	nop
 800103a:	3724      	adds	r7, #36	; 0x24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd90      	pop	{r4, r7, pc}

08001040 <_Z12create_robotv>:
        actuate();
        pin_toggle.set(false);
      }
}

Robot create_robot() {
 8001040:	b580      	push	{r7, lr}
 8001042:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 8001046:	af04      	add	r7, sp, #16
 8001048:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800104c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001050:	6018      	str	r0, [r3, #0]

	PinControl mot1_ina = PinControl(MOTOR1_INA_GPIO_Port, MOTOR1_INA_Pin);
 8001052:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8001056:	2201      	movs	r2, #1
 8001058:	49c3      	ldr	r1, [pc, #780]	; (8001368 <_Z12create_robotv+0x328>)
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fbb2 	bl	80007c4 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot1_inb = PinControl(MOTOR1_INB_GPIO_Port, MOTOR1_INB_Pin);
 8001060:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001064:	2202      	movs	r2, #2
 8001066:	49c0      	ldr	r1, [pc, #768]	; (8001368 <_Z12create_robotv+0x328>)
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fbab 	bl	80007c4 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot1_end = PinMeasure(MOTOR1_END_GPIO_Port, MOTOR1_END_Pin);
 800106e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001072:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001076:	49bd      	ldr	r1, [pc, #756]	; (800136c <_Z12create_robotv+0x32c>)
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fbd3 	bl	8000824 <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot2_ina = PinControl(MOTOR2_INA_GPIO_Port, MOTOR2_INA_Pin);
 800107e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001082:	2204      	movs	r2, #4
 8001084:	49b8      	ldr	r1, [pc, #736]	; (8001368 <_Z12create_robotv+0x328>)
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fb9c 	bl	80007c4 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot2_inb = PinControl(MOTOR2_INB_GPIO_Port, MOTOR2_INB_Pin);
 800108c:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001090:	2208      	movs	r2, #8
 8001092:	49b5      	ldr	r1, [pc, #724]	; (8001368 <_Z12create_robotv+0x328>)
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fb95 	bl	80007c4 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot2_end = PinMeasure(MOTOR2_END_GPIO_Port, MOTOR2_END_Pin);
 800109a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800109e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010a2:	49b2      	ldr	r1, [pc, #712]	; (800136c <_Z12create_robotv+0x32c>)
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fbbd 	bl	8000824 <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot3_ina = PinControl(MOTOR3_INA_GPIO_Port, MOTOR3_INA_Pin);
 80010aa:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80010ae:	2210      	movs	r2, #16
 80010b0:	49ad      	ldr	r1, [pc, #692]	; (8001368 <_Z12create_robotv+0x328>)
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fb86 	bl	80007c4 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot3_inb = PinControl(MOTOR3_INB_GPIO_Port, MOTOR3_INB_Pin);
 80010b8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80010bc:	2220      	movs	r2, #32
 80010be:	49aa      	ldr	r1, [pc, #680]	; (8001368 <_Z12create_robotv+0x328>)
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fb7f 	bl	80007c4 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot3_end = PinMeasure(MOTOR3_END_GPIO_Port, MOTOR3_END_Pin);
 80010c6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80010ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010ce:	49a7      	ldr	r1, [pc, #668]	; (800136c <_Z12create_robotv+0x32c>)
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff fba7 	bl	8000824 <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot4_ina = PinControl(MOTOR4_INA_GPIO_Port, MOTOR4_INA_Pin);
 80010d6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80010da:	2240      	movs	r2, #64	; 0x40
 80010dc:	49a2      	ldr	r1, [pc, #648]	; (8001368 <_Z12create_robotv+0x328>)
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fb70 	bl	80007c4 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot4_inb = PinControl(MOTOR4_INB_GPIO_Port, MOTOR4_INB_Pin);
 80010e4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80010e8:	2280      	movs	r2, #128	; 0x80
 80010ea:	499f      	ldr	r1, [pc, #636]	; (8001368 <_Z12create_robotv+0x328>)
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fb69 	bl	80007c4 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot4_end = PinMeasure(MOTOR4_END_GPIO_Port, MOTOR4_END_Pin);
 80010f2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80010f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010fa:	499c      	ldr	r1, [pc, #624]	; (800136c <_Z12create_robotv+0x32c>)
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fb91 	bl	8000824 <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot5_ina = PinControl(MOTOR5_INA_GPIO_Port, MOTOR5_INA_Pin);
 8001102:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001106:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800110a:	4997      	ldr	r1, [pc, #604]	; (8001368 <_Z12create_robotv+0x328>)
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fb59 	bl	80007c4 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot5_inb = PinControl(MOTOR5_INB_GPIO_Port, MOTOR5_INB_Pin);
 8001112:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001116:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800111a:	4993      	ldr	r1, [pc, #588]	; (8001368 <_Z12create_robotv+0x328>)
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fb51 	bl	80007c4 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot5_end = PinMeasure(MOTOR5_END_GPIO_Port, MOTOR5_END_Pin);
 8001122:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001126:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800112a:	4990      	ldr	r1, [pc, #576]	; (800136c <_Z12create_robotv+0x32c>)
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fb79 	bl	8000824 <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot6_ina = PinControl(MOTOR6_INA_GPIO_Port, MOTOR6_INA_Pin);
 8001132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001136:	2204      	movs	r2, #4
 8001138:	498c      	ldr	r1, [pc, #560]	; (800136c <_Z12create_robotv+0x32c>)
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fb42 	bl	80007c4 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot6_inb = PinControl(MOTOR6_INB_GPIO_Port, MOTOR6_INB_Pin);
 8001140:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001144:	2208      	movs	r2, #8
 8001146:	4989      	ldr	r1, [pc, #548]	; (800136c <_Z12create_robotv+0x32c>)
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fb3b 	bl	80007c4 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot6_end = PinMeasure(MOTOR6_END_GPIO_Port, MOTOR6_END_Pin);
 800114e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001152:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001156:	4985      	ldr	r1, [pc, #532]	; (800136c <_Z12create_robotv+0x32c>)
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fb63 	bl	8000824 <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl enable = PinControl(MOTORS_EN_GPIO_Port, MOTORS_EN_Pin);
 800115e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001162:	2240      	movs	r2, #64	; 0x40
 8001164:	4981      	ldr	r1, [pc, #516]	; (800136c <_Z12create_robotv+0x32c>)
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fb2c 	bl	80007c4 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl toggle = PinControl(PIN_TOGGLE_GPIO_Port, PIN_TOGGLE_Pin);
 800116c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001170:	2220      	movs	r2, #32
 8001172:	497e      	ldr	r1, [pc, #504]	; (800136c <_Z12create_robotv+0x32c>)
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff fb25 	bl	80007c4 <_ZN10PinControlC1EP12GPIO_TypeDeft>

	Motor motor1 = Motor(mot1_ina, mot1_inb, &htim1, 1, &htim2, mot1_end);
 800117a:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 800117e:	f507 71fc 	add.w	r1, r7, #504	; 0x1f8
 8001182:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8001186:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800118a:	9302      	str	r3, [sp, #8]
 800118c:	4b78      	ldr	r3, [pc, #480]	; (8001370 <_Z12create_robotv+0x330>)
 800118e:	9301      	str	r3, [sp, #4]
 8001190:	2301      	movs	r3, #1
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	4b77      	ldr	r3, [pc, #476]	; (8001374 <_Z12create_robotv+0x334>)
 8001196:	f7ff fbab 	bl	80008f0 <_ZN5MotorC1ER10PinControlS1_P17TIM_HandleTypeDefhS3_R10PinMeasure>
	Motor motor2 = Motor(mot2_ina, mot2_inb, &htim1, 2, &htim3, mot2_end);
 800119a:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 800119e:	f507 71e4 	add.w	r1, r7, #456	; 0x1c8
 80011a2:	f107 0088 	add.w	r0, r7, #136	; 0x88
 80011a6:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80011aa:	9302      	str	r3, [sp, #8]
 80011ac:	4b72      	ldr	r3, [pc, #456]	; (8001378 <_Z12create_robotv+0x338>)
 80011ae:	9301      	str	r3, [sp, #4]
 80011b0:	2302      	movs	r3, #2
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	4b6f      	ldr	r3, [pc, #444]	; (8001374 <_Z12create_robotv+0x334>)
 80011b6:	f7ff fb9b 	bl	80008f0 <_ZN5MotorC1ER10PinControlS1_P17TIM_HandleTypeDefhS3_R10PinMeasure>
	Motor motor3 = Motor(mot3_ina, mot3_inb, &htim1, 3, &htim4, mot3_end);
 80011ba:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 80011be:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 80011c2:	f107 0068 	add.w	r0, r7, #104	; 0x68
 80011c6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80011ca:	9302      	str	r3, [sp, #8]
 80011cc:	4b6b      	ldr	r3, [pc, #428]	; (800137c <_Z12create_robotv+0x33c>)
 80011ce:	9301      	str	r3, [sp, #4]
 80011d0:	2303      	movs	r3, #3
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	4b67      	ldr	r3, [pc, #412]	; (8001374 <_Z12create_robotv+0x334>)
 80011d6:	f7ff fb8b 	bl	80008f0 <_ZN5MotorC1ER10PinControlS1_P17TIM_HandleTypeDefhS3_R10PinMeasure>
	Motor motor4 = Motor(mot4_ina, mot4_inb, &htim1, 4, &htim5, mot4_end);
 80011da:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80011de:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 80011e2:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80011e6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80011ea:	9302      	str	r3, [sp, #8]
 80011ec:	4b64      	ldr	r3, [pc, #400]	; (8001380 <_Z12create_robotv+0x340>)
 80011ee:	9301      	str	r3, [sp, #4]
 80011f0:	2304      	movs	r3, #4
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	4b5f      	ldr	r3, [pc, #380]	; (8001374 <_Z12create_robotv+0x334>)
 80011f6:	f7ff fb7b 	bl	80008f0 <_ZN5MotorC1ER10PinControlS1_P17TIM_HandleTypeDefhS3_R10PinMeasure>
	Motor motor5 = Motor(mot5_ina, mot5_inb, &htim9, 1, &htim8, mot5_end);
 80011fa:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80011fe:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8001202:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001206:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800120a:	9302      	str	r3, [sp, #8]
 800120c:	4b5d      	ldr	r3, [pc, #372]	; (8001384 <_Z12create_robotv+0x344>)
 800120e:	9301      	str	r3, [sp, #4]
 8001210:	2301      	movs	r3, #1
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	4b5c      	ldr	r3, [pc, #368]	; (8001388 <_Z12create_robotv+0x348>)
 8001216:	f7ff fb6b 	bl	80008f0 <_ZN5MotorC1ER10PinControlS1_P17TIM_HandleTypeDefhS3_R10PinMeasure>
	Motor motor6 = Motor(mot6_ina, mot6_inb, &htim9, 2, 		mot6_end);
 800121a:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 800121e:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8001222:	f107 0008 	add.w	r0, r7, #8
 8001226:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800122a:	9301      	str	r3, [sp, #4]
 800122c:	2302      	movs	r3, #2
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	4b55      	ldr	r3, [pc, #340]	; (8001388 <_Z12create_robotv+0x348>)
 8001232:	f7ff fb3d 	bl	80008b0 <_ZN5MotorC1ER10PinControlS1_P17TIM_HandleTypeDefhR10PinMeasure>

	Motor** motors = (Motor**) malloc(sizeof(Motor*)*6);
 8001236:	2018      	movs	r0, #24
 8001238:	f019 ffac 	bl	801b194 <malloc>
 800123c:	4603      	mov	r3, r0
 800123e:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
	//Motor** motors = (Motor**) malloc(sizeof(Motor*)*1);
	float* encs_div = (float*) malloc(sizeof(float)*6);
 8001242:	2018      	movs	r0, #24
 8001244:	f019 ffa6 	bl	801b194 <malloc>
 8001248:	4603      	mov	r3, r0
 800124a:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
	//float* encs_div = (float*) malloc(sizeof(float)*1);

	motors[0] = &motor1; motors[1] = &motor2; motors[2] = &motor3; motors[3] = &motor4; motors[4] = &motor5; motors[5] = &motor6;
 800124e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001252:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800125c:	3304      	adds	r3, #4
 800125e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001268:	3308      	adds	r3, #8
 800126a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001274:	330c      	adds	r3, #12
 8001276:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001280:	3310      	adds	r3, #16
 8001282:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800128c:	3314      	adds	r3, #20
 800128e:	f107 0208 	add.w	r2, r7, #8
 8001292:	601a      	str	r2, [r3, #0]
	encs_div[0] = 1; encs_div[1] = 1; encs_div[2] = 1; encs_div[3] = 1; encs_div[4] = 1; encs_div[5] = 1;
 8001294:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8001298:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80012a2:	3304      	adds	r3, #4
 80012a4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80012ae:	3308      	adds	r3, #8
 80012b0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80012ba:	330c      	adds	r3, #12
 80012bc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80012c6:	3310      	adds	r3, #16
 80012c8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80012d2:	3314      	adds	r3, #20
 80012d4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80012d8:	601a      	str	r2, [r3, #0]
	Robot myRobot = Robot(enable, toggle, TS, 6, motors, encs_div);
 80012da:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80012de:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 80012e2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80012e6:	f5a3 7003 	sub.w	r0, r3, #524	; 0x20c
 80012ea:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80012ee:	9302      	str	r3, [sp, #8]
 80012f0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80012f4:	9301      	str	r3, [sp, #4]
 80012f6:	2306      	movs	r3, #6
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	230a      	movs	r3, #10
 80012fc:	6800      	ldr	r0, [r0, #0]
 80012fe:	f7ff fb41 	bl	8000984 <_ZN5RobotC1ER10PinControlS1_mhPP5MotorPf>
	//Robot myRobot = Robot(enable, toggle, TS, 1, motors, encs_div);

	return myRobot;
 8001302:	bf00      	nop
}
 8001304:	f107 0308 	add.w	r3, r7, #8
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fb14 	bl	8000936 <_ZN5MotorD1Ev>
 800130e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fb0f 	bl	8000936 <_ZN5MotorD1Ev>
 8001318:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fb0a 	bl	8000936 <_ZN5MotorD1Ev>
 8001322:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff fb05 	bl	8000936 <_ZN5MotorD1Ev>
 800132c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fb00 	bl	8000936 <_ZN5MotorD1Ev>
 8001336:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff fafb 	bl	8000936 <_ZN5MotorD1Ev>
	return myRobot;
 8001340:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001344:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001348:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800134c:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8001350:	6812      	ldr	r2, [r2, #0]
 8001352:	601a      	str	r2, [r3, #0]
}
 8001354:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001358:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800135c:	6818      	ldr	r0, [r3, #0]
 800135e:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40020c00 	.word	0x40020c00
 800136c:	40021800 	.word	0x40021800
 8001370:	20006510 	.word	0x20006510
 8001374:	200064c4 	.word	0x200064c4
 8001378:	2000655c 	.word	0x2000655c
 800137c:	200065a8 	.word	0x200065a8
 8001380:	200065f4 	.word	0x200065f4
 8001384:	20006640 	.word	0x20006640
 8001388:	2000668c 	.word	0x2000668c

0800138c <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	ed93 7a00 	vldr	s14, [r3]
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	edd3 7a00 	vldr	s15, [r3]
 80013a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013aa:	d501      	bpl.n	80013b0 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	e000      	b.n	80013b2 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 80013b0:	687b      	ldr	r3, [r7, #4]
    }
 80013b2:	4618      	mov	r0, r3
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80013be:	b480      	push	{r7}
 80013c0:	b083      	sub	sp, #12
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
 80013c6:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	ed93 7a00 	vldr	s14, [r3]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	edd3 7a00 	vldr	s15, [r3]
 80013d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013dc:	d501      	bpl.n	80013e2 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	e000      	b.n	80013e4 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 80013e2:	687b      	ldr	r3, [r7, #4]
    }
 80013e4:	4618      	mov	r0, r3
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <_Z41__static_initialization_and_destruction_0ii>:

Robot ScorBot = create_robot();
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d108      	bne.n	8001412 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001406:	4293      	cmp	r3, r2
 8001408:	d103      	bne.n	8001412 <_Z41__static_initialization_and_destruction_0ii+0x22>
 800140a:	4b09      	ldr	r3, [pc, #36]	; (8001430 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff fe17 	bl	8001040 <_Z12create_robotv>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d107      	bne.n	8001428 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800141e:	4293      	cmp	r3, r2
 8001420:	d102      	bne.n	8001428 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8001422:	4803      	ldr	r0, [pc, #12]	; (8001430 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001424:	f7ff fb6c 	bl	8000b00 <_ZN5RobotD1Ev>
 8001428:	bf00      	nop
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	2000200c 	.word	0x2000200c

08001434 <_GLOBAL__sub_I__ZN10PinControlC2Ev>:
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
 8001438:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800143c:	2001      	movs	r0, #1
 800143e:	f7ff ffd7 	bl	80013f0 <_Z41__static_initialization_and_destruction_0ii>
 8001442:	bd80      	pop	{r7, pc}

08001444 <_GLOBAL__sub_D__ZN10PinControlC2Ev>:
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
 8001448:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800144c:	2000      	movs	r0, #0
 800144e:	f7ff ffcf 	bl	80013f0 <_Z41__static_initialization_and_destruction_0ii>
 8001452:	bd80      	pop	{r7, pc}

08001454 <_ZSt3expf>:
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	ed87 0a01 	vstr	s0, [r7, #4]
 800145e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001462:	f019 fd95 	bl	801af90 <expf>
 8001466:	eef0 7a40 	vmov.f32	s15, s0
 800146a:	eeb0 0a67 	vmov.f32	s0, s15
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <_ZN3PID4initEfffb>:


// PID

void PID::init(float ts, float pole, float sat, bool bumpless)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6178      	str	r0, [r7, #20]
 800147c:	ed87 0a04 	vstr	s0, [r7, #16]
 8001480:	edc7 0a03 	vstr	s1, [r7, #12]
 8001484:	ed87 1a02 	vstr	s2, [r7, #8]
 8001488:	460b      	mov	r3, r1
 800148a:	71fb      	strb	r3, [r7, #7]
  this->ts = ts;
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	601a      	str	r2, [r3, #0]
  this->pole = pole;
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	68fa      	ldr	r2, [r7, #12]
 8001496:	605a      	str	r2, [r3, #4]
  this->sat = sat;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	609a      	str	r2, [r3, #8]
  this->bumpless = bumpless;
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	79fa      	ldrb	r2, [r7, #7]
 80014a2:	731a      	strb	r2, [r3, #12]

  if(pole > 0)
 80014a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80014a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b0:	dd2d      	ble.n	800150e <_ZN3PID4initEfffb+0x9a>
  {
    A = exp(-pole*ts);
 80014b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80014b6:	eeb1 7a67 	vneg.f32	s14, s15
 80014ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80014be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c2:	eeb0 0a67 	vmov.f32	s0, s15
 80014c6:	f7ff ffc5 	bl	8001454 <_ZSt3expf>
 80014ca:	eef0 7a40 	vmov.f32	s15, s0
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    B = (1-A)/pole;
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80014da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014de:	ee77 6a67 	vsub.f32	s13, s14, s15
 80014e2:	ed97 7a03 	vldr	s14, [r7, #12]
 80014e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    C = -pole*pole;
 80014f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80014f4:	eeb1 7a67 	vneg.f32	s14, s15
 80014f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80014fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    D = pole;
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	68fa      	ldr	r2, [r7, #12]
 800150a:	635a      	str	r2, [r3, #52]	; 0x34
 800150c:	e019      	b.n	8001542 <_ZN3PID4initEfffb+0xce>
  }
  else
  {
    A = 0;
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	629a      	str	r2, [r3, #40]	; 0x28
    B = 1;
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800151c:	62da      	str	r2, [r3, #44]	; 0x2c
    C = -1/ts;
 800151e:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8001522:	ed97 7a04 	vldr	s14, [r7, #16]
 8001526:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    D = 1/ts;
 8001530:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001534:	ed97 7a04 	vldr	s14, [r7, #16]
 8001538:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
  }

  apply_saturation();
 8001542:	6978      	ldr	r0, [r7, #20]
 8001544:	f000 f926 	bl	8001794 <_ZN3PID16apply_saturationEv>
}
 8001548:	bf00      	nop
 800154a:	3718      	adds	r7, #24
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <_ZN3PID5setupEfff>:

void PID::setup(float kp, float ki, float kd)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	ed87 0a02 	vstr	s0, [r7, #8]
 800155c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001560:	ed87 1a00 	vstr	s2, [r7]
  this->kp = kp;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	611a      	str	r2, [r3, #16]
  this->ki = ki;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	615a      	str	r2, [r3, #20]
  this->kd = kd;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	619a      	str	r2, [r3, #24]
}
 8001576:	bf00      	nop
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <_ZN3PID5resetEv>:

void PID::reset()
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  reset(0.0, 0.0);
 800158c:	eddf 0a05 	vldr	s1, [pc, #20]	; 80015a4 <_ZN3PID5resetEv+0x20>
 8001590:	ed9f 0a04 	vldr	s0, [pc, #16]	; 80015a4 <_ZN3PID5resetEv+0x20>
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 f807 	bl	80015a8 <_ZN3PID5resetEff>
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	00000000 	.word	0x00000000

080015a8 <_ZN3PID5resetEff>:

void PID::reset(float xi, float xd)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80015b4:	edc7 0a01 	vstr	s1, [r7, #4]
  this-> xi = xi;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	68ba      	ldr	r2, [r7, #8]
 80015bc:	621a      	str	r2, [r3, #32]
  this-> xd = xd;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	625a      	str	r2, [r3, #36]	; 0x24

  apply_saturation();
 80015c4:	68f8      	ldr	r0, [r7, #12]
 80015c6:	f000 f8e5 	bl	8001794 <_ZN3PID16apply_saturationEv>
}
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <_ZN3PID5inputEf>:

void PID::input(float e)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
 80015da:	ed87 0a00 	vstr	s0, [r7]
  this->e = e;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	61da      	str	r2, [r3, #28]
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <_ZN3PID4stepEv>:

void PID::step()
{  
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  xi = xi + (bumpless ? ki*ts*e : ts*e);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	ed93 7a08 	vldr	s14, [r3, #32]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	7b1b      	ldrb	r3, [r3, #12]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d00d      	beq.n	8001622 <_ZN3PID4stepEv+0x32>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	edd3 6a05 	vldr	s13, [r3, #20]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	edd3 7a00 	vldr	s15, [r3]
 8001612:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	edd3 7a07 	vldr	s15, [r3, #28]
 800161c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001620:	e007      	b.n	8001632 <_ZN3PID4stepEv+0x42>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	edd3 6a00 	vldr	s13, [r3]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	edd3 7a07 	vldr	s15, [r3, #28]
 800162e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001632:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	edc3 7a08 	vstr	s15, [r3, #32]
  xd = A*xd + (bumpless ? kd*B*e : B*e);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001648:	ee27 7a27 	vmul.f32	s14, s14, s15
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	7b1b      	ldrb	r3, [r3, #12]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d00d      	beq.n	8001670 <_ZN3PID4stepEv+0x80>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	edd3 6a06 	vldr	s13, [r3, #24]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001660:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	edd3 7a07 	vldr	s15, [r3, #28]
 800166a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800166e:	e007      	b.n	8001680 <_ZN3PID4stepEv+0x90>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	edd3 7a07 	vldr	s15, [r3, #28]
 800167c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001680:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

  apply_saturation();
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 f882 	bl	8001794 <_ZN3PID16apply_saturationEv>
}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <_ZN3PID6outputEv>:

float PID::output()
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  float u;

  if(bumpless) u = (kp + kd*D) * e + xi + C*xd;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	7b1b      	ldrb	r3, [r3, #12]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d023      	beq.n	80016f0 <_ZN3PID6outputEv+0x58>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	ed93 7a04 	vldr	s14, [r3, #16]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	edd3 6a06 	vldr	s13, [r3, #24]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80016ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	edd3 7a07 	vldr	s15, [r3, #28]
 80016c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	edd3 7a08 	vldr	s15, [r3, #32]
 80016d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80016e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ea:	edc7 7a03 	vstr	s15, [r7, #12]
 80016ee:	e02c      	b.n	800174a <_ZN3PID6outputEv+0xb2>
  else u = (kp + kd*D) * e + ki*xi + kd*C*xd;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	ed93 7a04 	vldr	s14, [r3, #16]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	edd3 6a06 	vldr	s13, [r3, #24]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001702:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001706:	ee37 7a27 	vadd.f32	s14, s14, s15
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001710:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	edd3 6a05 	vldr	s13, [r3, #20]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001720:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001724:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	edd3 6a06 	vldr	s13, [r3, #24]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001734:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800173e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001746:	edc7 7a03 	vstr	s15, [r7, #12]

  return u;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	ee07 3a90 	vmov	s15, r3
}
 8001750:	eeb0 0a67 	vmov.f32	s0, s15
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <_ZN3PID6evolveEf>:

float PID::evolve(float e)
{ 
 800175e:	b580      	push	{r7, lr}
 8001760:	b084      	sub	sp, #16
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
 8001766:	ed87 0a00 	vstr	s0, [r7]
  float u;
  
  input(e);
 800176a:	ed97 0a00 	vldr	s0, [r7]
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff ff2f 	bl	80015d2 <_ZN3PID5inputEf>
  u = output();
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff ff8f 	bl	8001698 <_ZN3PID6outputEv>
 800177a:	ed87 0a03 	vstr	s0, [r7, #12]
  step();
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff ff36 	bl	80015f0 <_ZN3PID4stepEv>

  return u;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	ee07 3a90 	vmov	s15, r3
}
 800178a:	eeb0 0a67 	vmov.f32	s0, s15
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <_ZN3PID16apply_saturationEv>:

void PID::apply_saturation()
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  if(sat > 0)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	edd3 7a02 	vldr	s15, [r3, #8]
 80017a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017aa:	dc00      	bgt.n	80017ae <_ZN3PID16apply_saturationEv+0x1a>
  {
    xi = xi > +sat ? +sat : xi;
    xi = xi < -sat ? -sat : xi;
  }
}
 80017ac:	e02a      	b.n	8001804 <_ZN3PID16apply_saturationEv+0x70>
    xi = xi > +sat ? +sat : xi;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	ed93 7a08 	vldr	s14, [r3, #32]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80017ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c2:	dd02      	ble.n	80017ca <_ZN3PID16apply_saturationEv+0x36>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	e001      	b.n	80017ce <_ZN3PID16apply_saturationEv+0x3a>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a1b      	ldr	r3, [r3, #32]
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	6213      	str	r3, [r2, #32]
    xi = xi < -sat ? -sat : xi;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	ed93 7a08 	vldr	s14, [r3, #32]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	edd3 7a02 	vldr	s15, [r3, #8]
 80017de:	eef1 7a67 	vneg.f32	s15, s15
 80017e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ea:	d505      	bpl.n	80017f8 <_ZN3PID16apply_saturationEv+0x64>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80017f2:	eef1 7a67 	vneg.f32	s15, s15
 80017f6:	e002      	b.n	80017fe <_ZN3PID16apply_saturationEv+0x6a>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	edd3 7a08 	vldr	s15, [r3, #32]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08a      	sub	sp, #40	; 0x28
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001818:	2300      	movs	r3, #0
 800181a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800181c:	f008 fa24 	bl	8009c68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001820:	4b5b      	ldr	r3, [pc, #364]	; (8001990 <pvPortMallocMicroROS+0x180>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d101      	bne.n	800182c <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001828:	f000 f98a 	bl	8001b40 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800182c:	4b59      	ldr	r3, [pc, #356]	; (8001994 <pvPortMallocMicroROS+0x184>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4013      	ands	r3, r2
 8001834:	2b00      	cmp	r3, #0
 8001836:	f040 8092 	bne.w	800195e <pvPortMallocMicroROS+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d01f      	beq.n	8001880 <pvPortMallocMicroROS+0x70>
			{
				xWantedSize += xHeapStructSize;
 8001840:	2208      	movs	r2, #8
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	2b00      	cmp	r3, #0
 8001850:	d016      	beq.n	8001880 <pvPortMallocMicroROS+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f023 0307 	bic.w	r3, r3, #7
 8001858:	3308      	adds	r3, #8
 800185a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00c      	beq.n	8001880 <pvPortMallocMicroROS+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800186a:	b672      	cpsid	i
 800186c:	f383 8811 	msr	BASEPRI, r3
 8001870:	f3bf 8f6f 	isb	sy
 8001874:	f3bf 8f4f 	dsb	sy
 8001878:	b662      	cpsie	i
 800187a:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800187c:	bf00      	nop
 800187e:	e7fe      	b.n	800187e <pvPortMallocMicroROS+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d06b      	beq.n	800195e <pvPortMallocMicroROS+0x14e>
 8001886:	4b44      	ldr	r3, [pc, #272]	; (8001998 <pvPortMallocMicroROS+0x188>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	429a      	cmp	r2, r3
 800188e:	d866      	bhi.n	800195e <pvPortMallocMicroROS+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001890:	4b42      	ldr	r3, [pc, #264]	; (800199c <pvPortMallocMicroROS+0x18c>)
 8001892:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001894:	4b41      	ldr	r3, [pc, #260]	; (800199c <pvPortMallocMicroROS+0x18c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800189a:	e004      	b.n	80018a6 <pvPortMallocMicroROS+0x96>
				{
					pxPreviousBlock = pxBlock;
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80018a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d903      	bls.n	80018b8 <pvPortMallocMicroROS+0xa8>
 80018b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1f1      	bne.n	800189c <pvPortMallocMicroROS+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80018b8:	4b35      	ldr	r3, [pc, #212]	; (8001990 <pvPortMallocMicroROS+0x180>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018be:	429a      	cmp	r2, r3
 80018c0:	d04d      	beq.n	800195e <pvPortMallocMicroROS+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80018c2:	6a3b      	ldr	r3, [r7, #32]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2208      	movs	r2, #8
 80018c8:	4413      	add	r3, r2
 80018ca:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80018cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	6a3b      	ldr	r3, [r7, #32]
 80018d2:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	1ad2      	subs	r2, r2, r3
 80018dc:	2308      	movs	r3, #8
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d921      	bls.n	8001928 <pvPortMallocMicroROS+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80018e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4413      	add	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d00c      	beq.n	8001910 <pvPortMallocMicroROS+0x100>
	__asm volatile
 80018f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018fa:	b672      	cpsid	i
 80018fc:	f383 8811 	msr	BASEPRI, r3
 8001900:	f3bf 8f6f 	isb	sy
 8001904:	f3bf 8f4f 	dsb	sy
 8001908:	b662      	cpsie	i
 800190a:	613b      	str	r3, [r7, #16]
}
 800190c:	bf00      	nop
 800190e:	e7fe      	b.n	800190e <pvPortMallocMicroROS+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	1ad2      	subs	r2, r2, r3
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800191c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001922:	69b8      	ldr	r0, [r7, #24]
 8001924:	f000 f96e 	bl	8001c04 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001928:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <pvPortMallocMicroROS+0x188>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	4a19      	ldr	r2, [pc, #100]	; (8001998 <pvPortMallocMicroROS+0x188>)
 8001934:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001936:	4b18      	ldr	r3, [pc, #96]	; (8001998 <pvPortMallocMicroROS+0x188>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	4b19      	ldr	r3, [pc, #100]	; (80019a0 <pvPortMallocMicroROS+0x190>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	429a      	cmp	r2, r3
 8001940:	d203      	bcs.n	800194a <pvPortMallocMicroROS+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001942:	4b15      	ldr	r3, [pc, #84]	; (8001998 <pvPortMallocMicroROS+0x188>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a16      	ldr	r2, [pc, #88]	; (80019a0 <pvPortMallocMicroROS+0x190>)
 8001948:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	685a      	ldr	r2, [r3, #4]
 800194e:	4b11      	ldr	r3, [pc, #68]	; (8001994 <pvPortMallocMicroROS+0x184>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	431a      	orrs	r2, r3
 8001954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001956:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800195e:	f008 f991 	bl	8009c84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	2b00      	cmp	r3, #0
 800196a:	d00c      	beq.n	8001986 <pvPortMallocMicroROS+0x176>
	__asm volatile
 800196c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001970:	b672      	cpsid	i
 8001972:	f383 8811 	msr	BASEPRI, r3
 8001976:	f3bf 8f6f 	isb	sy
 800197a:	f3bf 8f4f 	dsb	sy
 800197e:	b662      	cpsie	i
 8001980:	60fb      	str	r3, [r7, #12]
}
 8001982:	bf00      	nop
 8001984:	e7fe      	b.n	8001984 <pvPortMallocMicroROS+0x174>
	return pvReturn;
 8001986:	69fb      	ldr	r3, [r7, #28]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3728      	adds	r7, #40	; 0x28
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20005c44 	.word	0x20005c44
 8001994:	20005c50 	.word	0x20005c50
 8001998:	20005c48 	.word	0x20005c48
 800199c:	20005c3c 	.word	0x20005c3c
 80019a0:	20005c4c 	.word	0x20005c4c

080019a4 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d04c      	beq.n	8001a50 <vPortFreeMicroROS+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80019b6:	2308      	movs	r3, #8
 80019b8:	425b      	negs	r3, r3
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	4413      	add	r3, r2
 80019be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	685a      	ldr	r2, [r3, #4]
 80019c8:	4b23      	ldr	r3, [pc, #140]	; (8001a58 <vPortFreeMicroROS+0xb4>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4013      	ands	r3, r2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10c      	bne.n	80019ec <vPortFreeMicroROS+0x48>
	__asm volatile
 80019d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019d6:	b672      	cpsid	i
 80019d8:	f383 8811 	msr	BASEPRI, r3
 80019dc:	f3bf 8f6f 	isb	sy
 80019e0:	f3bf 8f4f 	dsb	sy
 80019e4:	b662      	cpsie	i
 80019e6:	60fb      	str	r3, [r7, #12]
}
 80019e8:	bf00      	nop
 80019ea:	e7fe      	b.n	80019ea <vPortFreeMicroROS+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d00c      	beq.n	8001a0e <vPortFreeMicroROS+0x6a>
	__asm volatile
 80019f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019f8:	b672      	cpsid	i
 80019fa:	f383 8811 	msr	BASEPRI, r3
 80019fe:	f3bf 8f6f 	isb	sy
 8001a02:	f3bf 8f4f 	dsb	sy
 8001a06:	b662      	cpsie	i
 8001a08:	60bb      	str	r3, [r7, #8]
}
 8001a0a:	bf00      	nop
 8001a0c:	e7fe      	b.n	8001a0c <vPortFreeMicroROS+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <vPortFreeMicroROS+0xb4>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4013      	ands	r3, r2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d019      	beq.n	8001a50 <vPortFreeMicroROS+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d115      	bne.n	8001a50 <vPortFreeMicroROS+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	685a      	ldr	r2, [r3, #4]
 8001a28:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <vPortFreeMicroROS+0xb4>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	401a      	ands	r2, r3
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001a34:	f008 f918 	bl	8009c68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	685a      	ldr	r2, [r3, #4]
 8001a3c:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <vPortFreeMicroROS+0xb8>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4413      	add	r3, r2
 8001a42:	4a06      	ldr	r2, [pc, #24]	; (8001a5c <vPortFreeMicroROS+0xb8>)
 8001a44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001a46:	6938      	ldr	r0, [r7, #16]
 8001a48:	f000 f8dc 	bl	8001c04 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001a4c:	f008 f91a 	bl	8009c84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001a50:	bf00      	nop
 8001a52:	3718      	adds	r7, #24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20005c50 	.word	0x20005c50
 8001a5c:	20005c48 	.word	0x20005c48

08001a60 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001a60:	b480      	push	{r7}
 8001a62:	b087      	sub	sp, #28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001a6c:	2308      	movs	r3, #8
 8001a6e:	425b      	negs	r3, r3
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	4413      	add	r3, r2
 8001a74:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	685a      	ldr	r2, [r3, #4]
 8001a7e:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <getBlockSize+0x38>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	43db      	mvns	r3, r3
 8001a84:	4013      	ands	r3, r2
 8001a86:	60fb      	str	r3, [r7, #12]

	return count;
 8001a88:	68fb      	ldr	r3, [r7, #12]
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	371c      	adds	r7, #28
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	20005c50 	.word	0x20005c50

08001a9c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001aa6:	f008 f8df 	bl	8009c68 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001aaa:	6838      	ldr	r0, [r7, #0]
 8001aac:	f7ff feb0 	bl	8001810 <pvPortMallocMicroROS>
 8001ab0:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d017      	beq.n	8001ae8 <pvPortReallocMicroROS+0x4c>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d014      	beq.n	8001ae8 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff ffce 	bl	8001a60 <getBlockSize>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2208      	movs	r2, #8
 8001ac8:	1a9b      	subs	r3, r3, r2
 8001aca:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d201      	bcs.n	8001ad8 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	68b8      	ldr	r0, [r7, #8]
 8001ade:	f01a f802 	bl	801bae6 <memcpy>

		vPortFreeMicroROS(pv);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff ff5e 	bl	80019a4 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8001ae8:	f008 f8cc 	bl	8009c84 <xTaskResumeAll>

	return newmem;
 8001aec:	68bb      	ldr	r3, [r7, #8]
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b086      	sub	sp, #24
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
 8001afe:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001b00:	f008 f8b2 	bl	8009c68 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	fb02 f303 	mul.w	r3, r2, r3
 8001b0c:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001b0e:	6978      	ldr	r0, [r7, #20]
 8001b10:	f7ff fe7e 	bl	8001810 <pvPortMallocMicroROS>
 8001b14:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001b1a:	e004      	b.n	8001b26 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1c5a      	adds	r2, r3, #1
 8001b20:	613a      	str	r2, [r7, #16]
 8001b22:	2200      	movs	r2, #0
 8001b24:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	1e5a      	subs	r2, r3, #1
 8001b2a:	617a      	str	r2, [r7, #20]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1f5      	bne.n	8001b1c <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001b30:	f008 f8a8 	bl	8009c84 <xTaskResumeAll>
  	return mem;
 8001b34:	68fb      	ldr	r3, [r7, #12]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001b46:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001b4a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001b4c:	4b27      	ldr	r3, [pc, #156]	; (8001bec <prvHeapInit+0xac>)
 8001b4e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00c      	beq.n	8001b74 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	3307      	adds	r3, #7
 8001b5e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f023 0307 	bic.w	r3, r3, #7
 8001b66:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001b68:	68ba      	ldr	r2, [r7, #8]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	4a1f      	ldr	r2, [pc, #124]	; (8001bec <prvHeapInit+0xac>)
 8001b70:	4413      	add	r3, r2
 8001b72:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001b78:	4a1d      	ldr	r2, [pc, #116]	; (8001bf0 <prvHeapInit+0xb0>)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001b7e:	4b1c      	ldr	r3, [pc, #112]	; (8001bf0 <prvHeapInit+0xb0>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	4413      	add	r3, r2
 8001b8a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001b8c:	2208      	movs	r2, #8
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	1a9b      	subs	r3, r3, r2
 8001b92:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f023 0307 	bic.w	r3, r3, #7
 8001b9a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	4a15      	ldr	r2, [pc, #84]	; (8001bf4 <prvHeapInit+0xb4>)
 8001ba0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001ba2:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <prvHeapInit+0xb4>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001baa:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <prvHeapInit+0xb4>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	1ad2      	subs	r2, r2, r3
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <prvHeapInit+0xb4>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <prvHeapInit+0xb8>)
 8001bce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	4a09      	ldr	r2, [pc, #36]	; (8001bfc <prvHeapInit+0xbc>)
 8001bd6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001bd8:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <prvHeapInit+0xc0>)
 8001bda:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001bde:	601a      	str	r2, [r3, #0]
}
 8001be0:	bf00      	nop
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	2000203c 	.word	0x2000203c
 8001bf0:	20005c3c 	.word	0x20005c3c
 8001bf4:	20005c44 	.word	0x20005c44
 8001bf8:	20005c4c 	.word	0x20005c4c
 8001bfc:	20005c48 	.word	0x20005c48
 8001c00:	20005c50 	.word	0x20005c50

08001c04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001c0c:	4b28      	ldr	r3, [pc, #160]	; (8001cb0 <prvInsertBlockIntoFreeList+0xac>)
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	e002      	b.n	8001c18 <prvInsertBlockIntoFreeList+0x14>
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d8f7      	bhi.n	8001c12 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d108      	bne.n	8001c46 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	441a      	add	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	441a      	add	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d118      	bne.n	8001c8c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <prvInsertBlockIntoFreeList+0xb0>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d00d      	beq.n	8001c82 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	441a      	add	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	e008      	b.n	8001c94 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001c82:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <prvInsertBlockIntoFreeList+0xb0>)
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	e003      	b.n	8001c94 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d002      	beq.n	8001ca2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001ca2:	bf00      	nop
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	20005c3c 	.word	0x20005c3c
 8001cb4:	20005c44 	.word	0x20005c44

08001cb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cbe:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <MX_DMA_Init+0x48>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	4a0f      	ldr	r2, [pc, #60]	; (8001d00 <MX_DMA_Init+0x48>)
 8001cc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cca:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <MX_DMA_Init+0x48>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cd2:	607b      	str	r3, [r7, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2105      	movs	r1, #5
 8001cda:	200c      	movs	r0, #12
 8001cdc:	f001 fe3e 	bl	800395c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001ce0:	200c      	movs	r0, #12
 8001ce2:	f001 fe57 	bl	8003994 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2105      	movs	r1, #5
 8001cea:	200e      	movs	r0, #14
 8001cec:	f001 fe36 	bl	800395c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001cf0:	200e      	movs	r0, #14
 8001cf2:	f001 fe4f 	bl	8003994 <HAL_NVIC_EnableIRQ>

}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40023800 	.word	0x40023800

08001d04 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001d12:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001d14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d18:	4904      	ldr	r1, [pc, #16]	; (8001d2c <cubemx_transport_open+0x28>)
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f005 f838 	bl	8006d90 <HAL_UART_Receive_DMA>
    return true;
 8001d20:	2301      	movs	r3, #1
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20005c54 	.word	0x20005c54

08001d30 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001d3e:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001d40:	68f8      	ldr	r0, [r7, #12]
 8001d42:	f005 f869 	bl	8006e18 <HAL_UART_DMAStop>
    return true;
 8001d46:	2301      	movs	r3, #1
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, const uint8_t * buf, size_t len, uint8_t * err){
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
 8001d5c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001d64:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d6a:	2b20      	cmp	r3, #32
 8001d6c:	d11a      	bne.n	8001da4 <cubemx_transport_write+0x54>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	461a      	mov	r2, r3
 8001d74:	68b9      	ldr	r1, [r7, #8]
 8001d76:	6978      	ldr	r0, [r7, #20]
 8001d78:	f004 ff8e 	bl	8006c98 <HAL_UART_Transmit_DMA>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001d80:	e002      	b.n	8001d88 <cubemx_transport_write+0x38>
            osDelay(1);
 8001d82:	2001      	movs	r0, #1
 8001d84:	f006 fee6 	bl	8008b54 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001d88:	7cfb      	ldrb	r3, [r7, #19]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d103      	bne.n	8001d96 <cubemx_transport_write+0x46>
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d92:	2b20      	cmp	r3, #32
 8001d94:	d1f5      	bne.n	8001d82 <cubemx_transport_write+0x32>
        }

        return (ret == HAL_OK) ? len : 0;
 8001d96:	7cfb      	ldrb	r3, [r7, #19]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <cubemx_transport_write+0x50>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	e002      	b.n	8001da6 <cubemx_transport_write+0x56>
 8001da0:	2300      	movs	r3, #0
 8001da2:	e000      	b.n	8001da6 <cubemx_transport_write+0x56>
    }else{
        return 0;
 8001da4:	2300      	movs	r3, #0
    }
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b088      	sub	sp, #32
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
 8001dbc:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001dc4:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dca:	b672      	cpsid	i
}
 8001dcc:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001dda:	4a1c      	ldr	r2, [pc, #112]	; (8001e4c <cubemx_transport_read+0x9c>)
 8001ddc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001dde:	b662      	cpsie	i
}
 8001de0:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	3301      	adds	r3, #1
 8001de6:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001de8:	2001      	movs	r0, #1
 8001dea:	f006 feb3 	bl	8008b54 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001dee:	4b18      	ldr	r3, [pc, #96]	; (8001e50 <cubemx_transport_read+0xa0>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	4b16      	ldr	r3, [pc, #88]	; (8001e4c <cubemx_transport_read+0x9c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d103      	bne.n	8001e02 <cubemx_transport_read+0x52>
 8001dfa:	69fa      	ldr	r2, [r7, #28]
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	dbe3      	blt.n	8001dca <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001e06:	e011      	b.n	8001e2c <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8001e08:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <cubemx_transport_read+0xa0>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	68b9      	ldr	r1, [r7, #8]
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	440b      	add	r3, r1
 8001e12:	4910      	ldr	r1, [pc, #64]	; (8001e54 <cubemx_transport_read+0xa4>)
 8001e14:	5c8a      	ldrb	r2, [r1, r2]
 8001e16:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001e18:	4b0d      	ldr	r3, [pc, #52]	; (8001e50 <cubemx_transport_read+0xa0>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e22:	4a0b      	ldr	r2, [pc, #44]	; (8001e50 <cubemx_transport_read+0xa0>)
 8001e24:	6013      	str	r3, [r2, #0]
        wrote++;
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001e2c:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <cubemx_transport_read+0xa0>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <cubemx_transport_read+0x9c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d003      	beq.n	8001e40 <cubemx_transport_read+0x90>
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d3e3      	bcc.n	8001e08 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001e40:	69bb      	ldr	r3, [r7, #24]
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3720      	adds	r7, #32
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20006458 	.word	0x20006458
 8001e50:	20006454 	.word	0x20006454
 8001e54:	20005c54 	.word	0x20005c54

08001e58 <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001e5c:	4a08      	ldr	r2, [pc, #32]	; (8001e80 <_Z16MX_FREERTOS_Initv+0x28>)
 8001e5e:	2100      	movs	r1, #0
 8001e60:	4808      	ldr	r0, [pc, #32]	; (8001e84 <_Z16MX_FREERTOS_Initv+0x2c>)
 8001e62:	f006 fdd1 	bl	8008a08 <osThreadNew>
 8001e66:	4603      	mov	r3, r0
 8001e68:	4a07      	ldr	r2, [pc, #28]	; (8001e88 <_Z16MX_FREERTOS_Initv+0x30>)
 8001e6a:	6013      	str	r3, [r2, #0]

  /* creation of cycleRobot */
  cycleRobotHandle = osThreadNew(cycleRobotTask, NULL, &cycleRobot_attributes);
 8001e6c:	4a07      	ldr	r2, [pc, #28]	; (8001e8c <_Z16MX_FREERTOS_Initv+0x34>)
 8001e6e:	2100      	movs	r1, #0
 8001e70:	4807      	ldr	r0, [pc, #28]	; (8001e90 <_Z16MX_FREERTOS_Initv+0x38>)
 8001e72:	f006 fdc9 	bl	8008a08 <osThreadNew>
 8001e76:	4603      	mov	r3, r0
 8001e78:	4a06      	ldr	r2, [pc, #24]	; (8001e94 <_Z16MX_FREERTOS_Initv+0x3c>)
 8001e7a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001e7c:	bf00      	nop
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	0801c938 	.word	0x0801c938
 8001e84:	08001e99 	.word	0x08001e99
 8001e88:	20006460 	.word	0x20006460
 8001e8c:	0801c95c 	.word	0x0801c95c
 8001e90:	08002145 	.word	0x08002145
 8001e94:	20006464 	.word	0x20006464

08001e98 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001e98:	b5b0      	push	{r4, r5, r7, lr}
 8001e9a:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8001e9e:	af02      	add	r7, sp, #8
 8001ea0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ea4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001ea8:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDefaultTask */
	rmw_uros_set_custom_transport(
 8001eaa:	4b93      	ldr	r3, [pc, #588]	; (80020f8 <_Z16StartDefaultTaskPv+0x260>)
 8001eac:	9301      	str	r3, [sp, #4]
 8001eae:	4b93      	ldr	r3, [pc, #588]	; (80020fc <_Z16StartDefaultTaskPv+0x264>)
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	4b93      	ldr	r3, [pc, #588]	; (8002100 <_Z16StartDefaultTaskPv+0x268>)
 8001eb4:	4a93      	ldr	r2, [pc, #588]	; (8002104 <_Z16StartDefaultTaskPv+0x26c>)
 8001eb6:	4994      	ldr	r1, [pc, #592]	; (8002108 <_Z16StartDefaultTaskPv+0x270>)
 8001eb8:	2001      	movs	r0, #1
 8001eba:	f00b fbd9 	bl	800d670 <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001ebe:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f00b fb04 	bl	800d4d0 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 8001ec8:	4b90      	ldr	r3, [pc, #576]	; (800210c <_Z16StartDefaultTaskPv+0x274>)
 8001eca:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	freeRTOS_allocator.deallocate = microros_deallocate;
 8001ece:	4b90      	ldr	r3, [pc, #576]	; (8002110 <_Z16StartDefaultTaskPv+0x278>)
 8001ed0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
	freeRTOS_allocator.reallocate = microros_reallocate;
 8001ed4:	4b8f      	ldr	r3, [pc, #572]	; (8002114 <_Z16StartDefaultTaskPv+0x27c>)
 8001ed6:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001eda:	4b8f      	ldr	r3, [pc, #572]	; (8002118 <_Z16StartDefaultTaskPv+0x280>)
 8001edc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) return;
 8001ee0:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f00b fb01 	bl	800d4ec <rcutils_set_default_allocator>
 8001eea:	4603      	mov	r3, r0
 8001eec:	f083 0301 	eor.w	r3, r3, #1
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f040 80e2 	bne.w	80020bc <_Z16StartDefaultTaskPv+0x224>

	rcl_ret_t rc;
	rcl_node_t node; // nodo;
	rcl_timer_t timer;
	const unsigned int timer_period = RCL_MS_TO_NS(1000);
 8001ef8:	4b88      	ldr	r3, [pc, #544]	; (800211c <_Z16StartDefaultTaskPv+0x284>)
 8001efa:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
	//rcl_publisher_t feedback_publisher; // publisher
	rcl_service_t setup_service, control_service; //servizi

	const char* feedback_publisher_name = "/feedback";
 8001efe:	4b88      	ldr	r3, [pc, #544]	; (8002120 <_Z16StartDefaultTaskPv+0x288>)
 8001f00:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	const char* setup_service_name = "/setup";
 8001f04:	4b87      	ldr	r3, [pc, #540]	; (8002124 <_Z16StartDefaultTaskPv+0x28c>)
 8001f06:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
	const char* control_service_name = "/control"; //nomi dei servizi
 8001f0a:	4b87      	ldr	r3, [pc, #540]	; (8002128 <_Z16StartDefaultTaskPv+0x290>)
 8001f0c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8

	const rosidl_message_type_support_t* feedback_type_support =
		ROSIDL_GET_MSG_TYPE_SUPPORT(racs_services, msg, Feedback);
 8001f10:	f009 fb52 	bl	800b5b8 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback>
 8001f14:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4
	const rosidl_service_type_support_t* setup_type_support =
		ROSIDL_GET_SRV_TYPE_SUPPORT(racs_services, srv, Setup);
 8001f18:	f009 fb66 	bl	800b5e8 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup>
 8001f1c:	f8c7 01f0 	str.w	r0, [r7, #496]	; 0x1f0
	const rosidl_service_type_support_t* control_type_support =
		ROSIDL_GET_SRV_TYPE_SUPPORT(racs_services, srv, Control);
 8001f20:	f009 fb24 	bl	800b56c <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control>
 8001f24:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
	racs_services__srv__Setup_Request req_setup;
	racs_services__srv__Setup_Response res_setup;
	racs_services__srv__Control_Request req_control;
	racs_services__srv__Control_Response res_control;

	allocator = rcl_get_default_allocator();
 8001f28:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f00b fafb 	bl	800d528 <rcutils_get_default_allocator>
 8001f32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f36:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001f3a:	f507 74ba 	add.w	r4, r7, #372	; 0x174
 8001f3e:	461d      	mov	r5, r3
 8001f40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f44:	682b      	ldr	r3, [r5, #0]
 8001f46:	6023      	str	r3, [r4, #0]

	rc = rclc_support_init(&support, 0, NULL, &allocator);
 8001f48:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8001f4c:	f507 70c4 	add.w	r0, r7, #392	; 0x188
 8001f50:	2200      	movs	r2, #0
 8001f52:	2100      	movs	r1, #0
 8001f54:	f00b f984 	bl	800d260 <rclc_support_init>
 8001f58:	f8c7 01e8 	str.w	r0, [r7, #488]	; 0x1e8
	if (rc != RCL_RET_OK) return;
 8001f5c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f040 80ad 	bne.w	80020c0 <_Z16StartDefaultTaskPv+0x228>

	rc = rclc_timer_init_default(&timer, &support, timer_period, timer_callback);
 8001f66:	f507 71c4 	add.w	r1, r7, #392	; 0x188
 8001f6a:	f507 70e2 	add.w	r0, r7, #452	; 0x1c4
 8001f6e:	4b6f      	ldr	r3, [pc, #444]	; (800212c <_Z16StartDefaultTaskPv+0x294>)
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	a35f      	add	r3, pc, #380	; (adr r3, 80020f0 <_Z16StartDefaultTaskPv+0x258>)
 8001f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f78:	f00b fa72 	bl	800d460 <rclc_timer_init_default>
 8001f7c:	f8c7 01e8 	str.w	r0, [r7, #488]	; 0x1e8
	if (rc != RCL_RET_OK) return;
 8001f80:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f040 809d 	bne.w	80020c4 <_Z16StartDefaultTaskPv+0x22c>

	rc = rclc_node_init_default(&node, "STM32_node", "", &support);
 8001f8a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001f8e:	f507 70e4 	add.w	r0, r7, #456	; 0x1c8
 8001f92:	4a67      	ldr	r2, [pc, #412]	; (8002130 <_Z16StartDefaultTaskPv+0x298>)
 8001f94:	4967      	ldr	r1, [pc, #412]	; (8002134 <_Z16StartDefaultTaskPv+0x29c>)
 8001f96:	f00b f9ad 	bl	800d2f4 <rclc_node_init_default>
 8001f9a:	f8c7 01e8 	str.w	r0, [r7, #488]	; 0x1e8
	if (rc != RCL_RET_OK) return;
 8001f9e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f040 8090 	bne.w	80020c8 <_Z16StartDefaultTaskPv+0x230>

	rc = rclc_publisher_init_best_effort(
 8001fa8:	f507 71e4 	add.w	r1, r7, #456	; 0x1c8
 8001fac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001fb0:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8001fb4:	4860      	ldr	r0, [pc, #384]	; (8002138 <_Z16StartDefaultTaskPv+0x2a0>)
 8001fb6:	f00b f9df 	bl	800d378 <rclc_publisher_init_best_effort>
 8001fba:	f8c7 01e8 	str.w	r0, [r7, #488]	; 0x1e8
	  &feedback_publisher, &node, feedback_type_support, feedback_publisher_name);
	if (rc != RCL_RET_OK) return;
 8001fbe:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f040 8082 	bne.w	80020cc <_Z16StartDefaultTaskPv+0x234>

	rc = rclc_service_init_default(
 8001fc8:	f507 71e4 	add.w	r1, r7, #456	; 0x1c8
 8001fcc:	f507 70e0 	add.w	r0, r7, #448	; 0x1c0
 8001fd0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001fd4:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8001fd8:	f00b fa08 	bl	800d3ec <rclc_service_init_default>
 8001fdc:	f8c7 01e8 	str.w	r0, [r7, #488]	; 0x1e8
		&setup_service, &node, setup_type_support, setup_service_name);
	if (rc != RCL_RET_OK) return;
 8001fe0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d173      	bne.n	80020d0 <_Z16StartDefaultTaskPv+0x238>

	rc = rclc_service_init_default(
 8001fe8:	f507 71e4 	add.w	r1, r7, #456	; 0x1c8
 8001fec:	f507 70de 	add.w	r0, r7, #444	; 0x1bc
 8001ff0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ff4:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8001ff8:	f00b f9f8 	bl	800d3ec <rclc_service_init_default>
 8001ffc:	f8c7 01e8 	str.w	r0, [r7, #488]	; 0x1e8
		&control_service, &node, control_type_support, control_service_name);
	if (rc != RCL_RET_OK) return;
 8002000:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002004:	2b00      	cmp	r3, #0
 8002006:	d165      	bne.n	80020d4 <_Z16StartDefaultTaskPv+0x23c>

	rclc_executor_t executor;
	executor = rclc_executor_get_zero_initialized_executor();
 8002008:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800200c:	f5a3 74ac 	sub.w	r4, r3, #344	; 0x158
 8002010:	463b      	mov	r3, r7
 8002012:	4618      	mov	r0, r3
 8002014:	f00a fdfc 	bl	800cc10 <rclc_executor_get_zero_initialized_executor>
 8002018:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800201c:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002020:	4620      	mov	r0, r4
 8002022:	4619      	mov	r1, r3
 8002024:	2390      	movs	r3, #144	; 0x90
 8002026:	461a      	mov	r2, r3
 8002028:	f019 fd5d 	bl	801bae6 <memcpy>
	unsigned int num_handles = 3; //2 servizi e 1 timer
 800202c:	2303      	movs	r3, #3
 800202e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
	rclc_executor_init(&executor, &support.context, num_handles, &allocator);
 8002032:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8002036:	f507 71c4 	add.w	r1, r7, #392	; 0x188
 800203a:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 800203e:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 8002042:	f00a fdf1 	bl	800cc28 <rclc_executor_init>

	rc = rclc_executor_add_timer(&executor, &timer);
 8002046:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
 800204a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800204e:	4611      	mov	r1, r2
 8002050:	4618      	mov	r0, r3
 8002052:	f00a fe65 	bl	800cd20 <rclc_executor_add_timer>
 8002056:	f8c7 01e8 	str.w	r0, [r7, #488]	; 0x1e8
	if (rc != RCL_RET_OK) return;
 800205a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800205e:	2b00      	cmp	r3, #0
 8002060:	d13a      	bne.n	80020d8 <_Z16StartDefaultTaskPv+0x240>

	rc = rclc_executor_add_service(
 8002062:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8002066:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800206a:	f507 71e0 	add.w	r1, r7, #448	; 0x1c0
 800206e:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8002072:	4c32      	ldr	r4, [pc, #200]	; (800213c <_Z16StartDefaultTaskPv+0x2a4>)
 8002074:	9400      	str	r4, [sp, #0]
 8002076:	f00a fe81 	bl	800cd7c <rclc_executor_add_service>
 800207a:	f8c7 01e8 	str.w	r0, [r7, #488]	; 0x1e8
		&executor, &setup_service, &req_setup,
		&res_setup, setup_callback);
	if (rc != RCL_RET_OK) return;
 800207e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002082:	2b00      	cmp	r3, #0
 8002084:	d12a      	bne.n	80020dc <_Z16StartDefaultTaskPv+0x244>

	rc = rclc_executor_add_service(
 8002086:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800208a:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 800208e:	f507 71de 	add.w	r1, r7, #444	; 0x1bc
 8002092:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8002096:	4c2a      	ldr	r4, [pc, #168]	; (8002140 <_Z16StartDefaultTaskPv+0x2a8>)
 8002098:	9400      	str	r4, [sp, #0]
 800209a:	f00a fe6f 	bl	800cd7c <rclc_executor_add_service>
 800209e:	f8c7 01e8 	str.w	r0, [r7, #488]	; 0x1e8
		&executor, &control_service, &req_control,
		&res_control, control_callback);
	if (rc != RCL_RET_OK) return;
 80020a2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d11a      	bne.n	80020e0 <_Z16StartDefaultTaskPv+0x248>

	rclc_executor_spin(&executor);
 80020aa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80020ae:	4618      	mov	r0, r3
 80020b0:	f00b f894 	bl	800d1dc <rclc_executor_spin>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80020b4:	2001      	movs	r0, #1
 80020b6:	f006 fd4d 	bl	8008b54 <osDelay>
 80020ba:	e7fb      	b.n	80020b4 <_Z16StartDefaultTaskPv+0x21c>
	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) return;
 80020bc:	bf00      	nop
 80020be:	e010      	b.n	80020e2 <_Z16StartDefaultTaskPv+0x24a>
	if (rc != RCL_RET_OK) return;
 80020c0:	bf00      	nop
 80020c2:	e00e      	b.n	80020e2 <_Z16StartDefaultTaskPv+0x24a>
	if (rc != RCL_RET_OK) return;
 80020c4:	bf00      	nop
 80020c6:	e00c      	b.n	80020e2 <_Z16StartDefaultTaskPv+0x24a>
	if (rc != RCL_RET_OK) return;
 80020c8:	bf00      	nop
 80020ca:	e00a      	b.n	80020e2 <_Z16StartDefaultTaskPv+0x24a>
	if (rc != RCL_RET_OK) return;
 80020cc:	bf00      	nop
 80020ce:	e008      	b.n	80020e2 <_Z16StartDefaultTaskPv+0x24a>
	if (rc != RCL_RET_OK) return;
 80020d0:	bf00      	nop
 80020d2:	e006      	b.n	80020e2 <_Z16StartDefaultTaskPv+0x24a>
	if (rc != RCL_RET_OK) return;
 80020d4:	bf00      	nop
 80020d6:	e004      	b.n	80020e2 <_Z16StartDefaultTaskPv+0x24a>
	if (rc != RCL_RET_OK) return;
 80020d8:	bf00      	nop
 80020da:	e002      	b.n	80020e2 <_Z16StartDefaultTaskPv+0x24a>
	if (rc != RCL_RET_OK) return;
 80020dc:	bf00      	nop
 80020de:	e000      	b.n	80020e2 <_Z16StartDefaultTaskPv+0x24a>
	if (rc != RCL_RET_OK) return;
 80020e0:	bf00      	nop
  }
  /* USER CODE END StartDefaultTask */
}
 80020e2:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bdb0      	pop	{r4, r5, r7, pc}
 80020ea:	bf00      	nop
 80020ec:	f3af 8000 	nop.w
 80020f0:	3b9aca00 	.word	0x3b9aca00
 80020f4:	00000000 	.word	0x00000000
 80020f8:	08001db1 	.word	0x08001db1
 80020fc:	08001d51 	.word	0x08001d51
 8002100:	08001d31 	.word	0x08001d31
 8002104:	08001d05 	.word	0x08001d05
 8002108:	200066d8 	.word	0x200066d8
 800210c:	08002459 	.word	0x08002459
 8002110:	0800249d 	.word	0x0800249d
 8002114:	080024d5 	.word	0x080024d5
 8002118:	08002541 	.word	0x08002541
 800211c:	3b9aca00 	.word	0x3b9aca00
 8002120:	0801c8d0 	.word	0x0801c8d0
 8002124:	0801c8dc 	.word	0x0801c8dc
 8002128:	0801c8e4 	.word	0x0801c8e4
 800212c:	0800071d 	.word	0x0800071d
 8002130:	0801c8f0 	.word	0x0801c8f0
 8002134:	0801c8f4 	.word	0x0801c8f4
 8002138:	2000645c 	.word	0x2000645c
 800213c:	080006e5 	.word	0x080006e5
 8002140:	080006ad 	.word	0x080006ad

08002144 <_Z14cycleRobotTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_cycleRobotTask */
void cycleRobotTask(void *argument)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN cycleRobotTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800214c:	2001      	movs	r0, #1
 800214e:	f006 fd01 	bl	8008b54 <osDelay>
 8002152:	e7fb      	b.n	800214c <_Z14cycleRobotTaskPv+0x8>

08002154 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b08c      	sub	sp, #48	; 0x30
 8002158:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215a:	f107 031c 	add.w	r3, r7, #28
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	605a      	str	r2, [r3, #4]
 8002164:	609a      	str	r2, [r3, #8]
 8002166:	60da      	str	r2, [r3, #12]
 8002168:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800216a:	4b58      	ldr	r3, [pc, #352]	; (80022cc <MX_GPIO_Init+0x178>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	4a57      	ldr	r2, [pc, #348]	; (80022cc <MX_GPIO_Init+0x178>)
 8002170:	f043 0310 	orr.w	r3, r3, #16
 8002174:	6313      	str	r3, [r2, #48]	; 0x30
 8002176:	4b55      	ldr	r3, [pc, #340]	; (80022cc <MX_GPIO_Init+0x178>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	f003 0310 	and.w	r3, r3, #16
 800217e:	61bb      	str	r3, [r7, #24]
 8002180:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002182:	4b52      	ldr	r3, [pc, #328]	; (80022cc <MX_GPIO_Init+0x178>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	4a51      	ldr	r2, [pc, #324]	; (80022cc <MX_GPIO_Init+0x178>)
 8002188:	f043 0304 	orr.w	r3, r3, #4
 800218c:	6313      	str	r3, [r2, #48]	; 0x30
 800218e:	4b4f      	ldr	r3, [pc, #316]	; (80022cc <MX_GPIO_Init+0x178>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	617b      	str	r3, [r7, #20]
 8002198:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800219a:	4b4c      	ldr	r3, [pc, #304]	; (80022cc <MX_GPIO_Init+0x178>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	4a4b      	ldr	r2, [pc, #300]	; (80022cc <MX_GPIO_Init+0x178>)
 80021a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021a4:	6313      	str	r3, [r2, #48]	; 0x30
 80021a6:	4b49      	ldr	r3, [pc, #292]	; (80022cc <MX_GPIO_Init+0x178>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b2:	4b46      	ldr	r3, [pc, #280]	; (80022cc <MX_GPIO_Init+0x178>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	4a45      	ldr	r2, [pc, #276]	; (80022cc <MX_GPIO_Init+0x178>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	6313      	str	r3, [r2, #48]	; 0x30
 80021be:	4b43      	ldr	r3, [pc, #268]	; (80022cc <MX_GPIO_Init+0x178>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ca:	4b40      	ldr	r3, [pc, #256]	; (80022cc <MX_GPIO_Init+0x178>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	4a3f      	ldr	r2, [pc, #252]	; (80022cc <MX_GPIO_Init+0x178>)
 80021d0:	f043 0302 	orr.w	r3, r3, #2
 80021d4:	6313      	str	r3, [r2, #48]	; 0x30
 80021d6:	4b3d      	ldr	r3, [pc, #244]	; (80022cc <MX_GPIO_Init+0x178>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021e2:	4b3a      	ldr	r3, [pc, #232]	; (80022cc <MX_GPIO_Init+0x178>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	4a39      	ldr	r2, [pc, #228]	; (80022cc <MX_GPIO_Init+0x178>)
 80021e8:	f043 0308 	orr.w	r3, r3, #8
 80021ec:	6313      	str	r3, [r2, #48]	; 0x30
 80021ee:	4b37      	ldr	r3, [pc, #220]	; (80022cc <MX_GPIO_Init+0x178>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	f003 0308 	and.w	r3, r3, #8
 80021f6:	607b      	str	r3, [r7, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80021fa:	4b34      	ldr	r3, [pc, #208]	; (80022cc <MX_GPIO_Init+0x178>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	4a33      	ldr	r2, [pc, #204]	; (80022cc <MX_GPIO_Init+0x178>)
 8002200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002204:	6313      	str	r3, [r2, #48]	; 0x30
 8002206:	4b31      	ldr	r3, [pc, #196]	; (80022cc <MX_GPIO_Init+0x178>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800220e:	603b      	str	r3, [r7, #0]
 8002210:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002212:	2200      	movs	r2, #0
 8002214:	f244 0181 	movw	r1, #16513	; 0x4081
 8002218:	482d      	ldr	r0, [pc, #180]	; (80022d0 <MX_GPIO_Init+0x17c>)
 800221a:	f002 f9a3 	bl	8004564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MOTOR5_INA_Pin|MOTOR5_INB_Pin|MOTOR1_INA_Pin|MOTOR1_INB_Pin
 800221e:	2200      	movs	r2, #0
 8002220:	f24c 01ff 	movw	r1, #49407	; 0xc0ff
 8002224:	482b      	ldr	r0, [pc, #172]	; (80022d4 <MX_GPIO_Init+0x180>)
 8002226:	f002 f99d 	bl	8004564 <HAL_GPIO_WritePin>
                          |MOTOR2_INA_Pin|MOTOR2_INB_Pin|MOTOR3_INA_Pin|MOTOR3_INB_Pin
                          |MOTOR4_INA_Pin|MOTOR4_INB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, MOTOR6_INA_Pin|MOTOR6_INB_Pin|PIN_TOGGLE_Pin|MOTORS_EN_Pin
 800222a:	2200      	movs	r2, #0
 800222c:	f647 616c 	movw	r1, #32364	; 0x7e6c
 8002230:	4829      	ldr	r0, [pc, #164]	; (80022d8 <MX_GPIO_Init+0x184>)
 8002232:	f002 f997 	bl	8004564 <HAL_GPIO_WritePin>
                          |MOTOR1_END_Pin|MOTOR2_END_Pin|MOTOR3_END_Pin|MOTOR4_END_Pin
                          |MOTOR5_END_Pin|MOTOR6_END_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002236:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800223a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800223c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002240:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002246:	f107 031c 	add.w	r3, r7, #28
 800224a:	4619      	mov	r1, r3
 800224c:	4823      	ldr	r0, [pc, #140]	; (80022dc <MX_GPIO_Init+0x188>)
 800224e:	f001 ffc5 	bl	80041dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002252:	f244 0381 	movw	r3, #16513	; 0x4081
 8002256:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002258:	2301      	movs	r3, #1
 800225a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002260:	2300      	movs	r3, #0
 8002262:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002264:	f107 031c 	add.w	r3, r7, #28
 8002268:	4619      	mov	r1, r3
 800226a:	4819      	ldr	r0, [pc, #100]	; (80022d0 <MX_GPIO_Init+0x17c>)
 800226c:	f001 ffb6 	bl	80041dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = MOTOR5_INA_Pin|MOTOR5_INB_Pin|MOTOR1_INA_Pin|MOTOR1_INB_Pin
 8002270:	f24c 03ff 	movw	r3, #49407	; 0xc0ff
 8002274:	61fb      	str	r3, [r7, #28]
                          |MOTOR2_INA_Pin|MOTOR2_INB_Pin|MOTOR3_INA_Pin|MOTOR3_INB_Pin
                          |MOTOR4_INA_Pin|MOTOR4_INB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002276:	2301      	movs	r3, #1
 8002278:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227a:	2300      	movs	r3, #0
 800227c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227e:	2300      	movs	r3, #0
 8002280:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002282:	f107 031c 	add.w	r3, r7, #28
 8002286:	4619      	mov	r1, r3
 8002288:	4812      	ldr	r0, [pc, #72]	; (80022d4 <MX_GPIO_Init+0x180>)
 800228a:	f001 ffa7 	bl	80041dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = MOTOR6_INA_Pin|MOTOR6_INB_Pin|PIN_TOGGLE_Pin|MOTORS_EN_Pin
 800228e:	f647 636c 	movw	r3, #32364	; 0x7e6c
 8002292:	61fb      	str	r3, [r7, #28]
                          |MOTOR1_END_Pin|MOTOR2_END_Pin|MOTOR3_END_Pin|MOTOR4_END_Pin
                          |MOTOR5_END_Pin|MOTOR6_END_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002294:	2301      	movs	r3, #1
 8002296:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229c:	2300      	movs	r3, #0
 800229e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022a0:	f107 031c 	add.w	r3, r7, #28
 80022a4:	4619      	mov	r1, r3
 80022a6:	480c      	ldr	r0, [pc, #48]	; (80022d8 <MX_GPIO_Init+0x184>)
 80022a8:	f001 ff98 	bl	80041dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80022ac:	2380      	movs	r3, #128	; 0x80
 80022ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022b0:	2300      	movs	r3, #0
 80022b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80022b8:	f107 031c 	add.w	r3, r7, #28
 80022bc:	4619      	mov	r1, r3
 80022be:	4806      	ldr	r0, [pc, #24]	; (80022d8 <MX_GPIO_Init+0x184>)
 80022c0:	f001 ff8c 	bl	80041dc <HAL_GPIO_Init>

}
 80022c4:	bf00      	nop
 80022c6:	3730      	adds	r7, #48	; 0x30
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40023800 	.word	0x40023800
 80022d0:	40020400 	.word	0x40020400
 80022d4:	40020c00 	.word	0x40020c00
 80022d8:	40021800 	.word	0x40021800
 80022dc:	40020800 	.word	0x40020800

080022e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022e4:	f001 fa31 	bl	800374a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022e8:	f000 f81e 	bl	8002328 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022ec:	f7ff ff32 	bl	8002154 <MX_GPIO_Init>
  MX_DMA_Init();
 80022f0:	f7ff fce2 	bl	8001cb8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80022f4:	f001 f850 	bl	8003398 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80022f8:	f001 f94e 	bl	8003598 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 80022fc:	f000 fbc8 	bl	8002a90 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002300:	f000 fc7a 	bl	8002bf8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002304:	f000 fccc 	bl	8002ca0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002308:	f000 fd20 	bl	8002d4c <MX_TIM4_Init>
  MX_TIM5_Init();
 800230c:	f000 fd74 	bl	8002df8 <MX_TIM5_Init>
  MX_TIM8_Init();
 8002310:	f000 fdc8 	bl	8002ea4 <MX_TIM8_Init>
  MX_TIM9_Init();
 8002314:	f000 fe20 	bl	8002f58 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002318:	f006 fb0c 	bl	8008934 <osKernelInitialize>
  MX_FREERTOS_Init();
 800231c:	f7ff fd9c 	bl	8001e58 <_Z16MX_FREERTOS_Initv>

  /* Start scheduler */
  osKernelStart();
 8002320:	f006 fb3c 	bl	800899c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002324:	e7fe      	b.n	8002324 <main+0x44>
	...

08002328 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b094      	sub	sp, #80	; 0x50
 800232c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800232e:	f107 031c 	add.w	r3, r7, #28
 8002332:	2234      	movs	r2, #52	; 0x34
 8002334:	2100      	movs	r1, #0
 8002336:	4618      	mov	r0, r3
 8002338:	f019 faa4 	bl	801b884 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800233c:	f107 0308 	add.w	r3, r7, #8
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800234c:	f002 fa6c 	bl	8004828 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002350:	4b33      	ldr	r3, [pc, #204]	; (8002420 <_Z18SystemClock_Configv+0xf8>)
 8002352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002354:	4a32      	ldr	r2, [pc, #200]	; (8002420 <_Z18SystemClock_Configv+0xf8>)
 8002356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800235a:	6413      	str	r3, [r2, #64]	; 0x40
 800235c:	4b30      	ldr	r3, [pc, #192]	; (8002420 <_Z18SystemClock_Configv+0xf8>)
 800235e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002364:	607b      	str	r3, [r7, #4]
 8002366:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002368:	4b2e      	ldr	r3, [pc, #184]	; (8002424 <_Z18SystemClock_Configv+0xfc>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002370:	4a2c      	ldr	r2, [pc, #176]	; (8002424 <_Z18SystemClock_Configv+0xfc>)
 8002372:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002376:	6013      	str	r3, [r2, #0]
 8002378:	4b2a      	ldr	r3, [pc, #168]	; (8002424 <_Z18SystemClock_Configv+0xfc>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002380:	603b      	str	r3, [r7, #0]
 8002382:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002384:	2301      	movs	r3, #1
 8002386:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002388:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800238c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800238e:	2302      	movs	r3, #2
 8002390:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002392:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002396:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002398:	2304      	movs	r3, #4
 800239a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 800239c:	2360      	movs	r3, #96	; 0x60
 800239e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023a0:	2302      	movs	r3, #2
 80023a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80023a4:	2304      	movs	r3, #4
 80023a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80023a8:	2302      	movs	r3, #2
 80023aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023ac:	f107 031c 	add.w	r3, r7, #28
 80023b0:	4618      	mov	r0, r3
 80023b2:	f002 fa99 	bl	80048e8 <HAL_RCC_OscConfig>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	bf14      	ite	ne
 80023bc:	2301      	movne	r3, #1
 80023be:	2300      	moveq	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 80023c6:	f000 f841 	bl	800244c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80023ca:	f002 fa3d 	bl	8004848 <HAL_PWREx_EnableOverDrive>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	bf14      	ite	ne
 80023d4:	2301      	movne	r3, #1
 80023d6:	2300      	moveq	r3, #0
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 80023de:	f000 f835 	bl	800244c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023e2:	230f      	movs	r3, #15
 80023e4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023e6:	2302      	movs	r3, #2
 80023e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023ea:	2300      	movs	r3, #0
 80023ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023f4:	2300      	movs	r3, #0
 80023f6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80023f8:	f107 0308 	add.w	r3, r7, #8
 80023fc:	2103      	movs	r1, #3
 80023fe:	4618      	mov	r0, r3
 8002400:	f002 fd20 	bl	8004e44 <HAL_RCC_ClockConfig>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	bf14      	ite	ne
 800240a:	2301      	movne	r3, #1
 800240c:	2300      	moveq	r3, #0
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <_Z18SystemClock_Configv+0xf0>
  {
    Error_Handler();
 8002414:	f000 f81a 	bl	800244c <Error_Handler>
  }
}
 8002418:	bf00      	nop
 800241a:	3750      	adds	r7, #80	; 0x50
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40023800 	.word	0x40023800
 8002424:	40007000 	.word	0x40007000

08002428 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a04      	ldr	r2, [pc, #16]	; (8002448 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d101      	bne.n	800243e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800243a:	f001 f993 	bl	8003764 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40001000 	.word	0x40001000

0800244c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002450:	b672      	cpsid	i
}
 8002452:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002454:	e7fe      	b.n	8002454 <Error_Handler+0x8>
	...

08002458 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002462:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <microros_allocate+0x3c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	461a      	mov	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4413      	add	r3, r2
 800246c:	461a      	mov	r2, r3
 800246e:	4b09      	ldr	r3, [pc, #36]	; (8002494 <microros_allocate+0x3c>)
 8002470:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002472:	4b09      	ldr	r3, [pc, #36]	; (8002498 <microros_allocate+0x40>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	461a      	mov	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4413      	add	r3, r2
 800247c:	461a      	mov	r2, r3
 800247e:	4b06      	ldr	r3, [pc, #24]	; (8002498 <microros_allocate+0x40>)
 8002480:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7ff f9c4 	bl	8001810 <pvPortMallocMicroROS>
 8002488:	4603      	mov	r3, r0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	20006468 	.word	0x20006468
 8002498:	2000646c 	.word	0x2000646c

0800249c <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00c      	beq.n	80024c6 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f7ff fad7 	bl	8001a60 <getBlockSize>
 80024b2:	4603      	mov	r3, r0
 80024b4:	4a06      	ldr	r2, [pc, #24]	; (80024d0 <microros_deallocate+0x34>)
 80024b6:	6812      	ldr	r2, [r2, #0]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	461a      	mov	r2, r3
 80024bc:	4b04      	ldr	r3, [pc, #16]	; (80024d0 <microros_deallocate+0x34>)
 80024be:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7ff fa6f 	bl	80019a4 <vPortFreeMicroROS>
  }
}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	2000646c 	.word	0x2000646c

080024d4 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80024e0:	4b15      	ldr	r3, [pc, #84]	; (8002538 <microros_reallocate+0x64>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	461a      	mov	r2, r3
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	4413      	add	r3, r2
 80024ea:	461a      	mov	r2, r3
 80024ec:	4b12      	ldr	r3, [pc, #72]	; (8002538 <microros_reallocate+0x64>)
 80024ee:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80024f0:	4b12      	ldr	r3, [pc, #72]	; (800253c <microros_reallocate+0x68>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	461a      	mov	r2, r3
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	4413      	add	r3, r2
 80024fa:	461a      	mov	r2, r3
 80024fc:	4b0f      	ldr	r3, [pc, #60]	; (800253c <microros_reallocate+0x68>)
 80024fe:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d104      	bne.n	8002510 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8002506:	68b8      	ldr	r0, [r7, #8]
 8002508:	f7ff f982 	bl	8001810 <pvPortMallocMicroROS>
 800250c:	4603      	mov	r3, r0
 800250e:	e00e      	b.n	800252e <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f7ff faa5 	bl	8001a60 <getBlockSize>
 8002516:	4603      	mov	r3, r0
 8002518:	4a08      	ldr	r2, [pc, #32]	; (800253c <microros_reallocate+0x68>)
 800251a:	6812      	ldr	r2, [r2, #0]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	461a      	mov	r2, r3
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <microros_reallocate+0x68>)
 8002522:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002524:	68b9      	ldr	r1, [r7, #8]
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f7ff fab8 	bl	8001a9c <pvPortReallocMicroROS>
 800252c:	4603      	mov	r3, r0
  }
}
 800252e:	4618      	mov	r0, r3
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20006468 	.word	0x20006468
 800253c:	2000646c 	.word	0x2000646c

08002540 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	fb02 f303 	mul.w	r3, r2, r3
 8002554:	4a0c      	ldr	r2, [pc, #48]	; (8002588 <microros_zero_allocate+0x48>)
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	4413      	add	r3, r2
 800255a:	461a      	mov	r2, r3
 800255c:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <microros_zero_allocate+0x48>)
 800255e:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	fb02 f303 	mul.w	r3, r2, r3
 8002568:	4a08      	ldr	r2, [pc, #32]	; (800258c <microros_zero_allocate+0x4c>)
 800256a:	6812      	ldr	r2, [r2, #0]
 800256c:	4413      	add	r3, r2
 800256e:	461a      	mov	r2, r3
 8002570:	4b06      	ldr	r3, [pc, #24]	; (800258c <microros_zero_allocate+0x4c>)
 8002572:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002574:	68b9      	ldr	r1, [r7, #8]
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f7ff fabd 	bl	8001af6 <pvPortCallocMicroROS>
 800257c:	4603      	mov	r3, r0
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20006468 	.word	0x20006468
 800258c:	2000646c 	.word	0x2000646c

08002590 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002590:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002594:	b086      	sub	sp, #24
 8002596:	af00      	add	r7, sp, #0
 8002598:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800259c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80025a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80025a6:	a320      	add	r3, pc, #128	; (adr r3, 8002628 <UTILS_NanosecondsToTimespec+0x98>)
 80025a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ac:	f7fd feb0 	bl	8000310 <__aeabi_ldivmod>
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80025ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80025be:	a31a      	add	r3, pc, #104	; (adr r3, 8002628 <UTILS_NanosecondsToTimespec+0x98>)
 80025c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c4:	f7fd fea4 	bl	8000310 <__aeabi_ldivmod>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	da20      	bge.n	8002616 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	4a11      	ldr	r2, [pc, #68]	; (8002620 <UTILS_NanosecondsToTimespec+0x90>)
 80025da:	fb82 1203 	smull	r1, r2, r2, r3
 80025de:	1712      	asrs	r2, r2, #28
 80025e0:	17db      	asrs	r3, r3, #31
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	3301      	adds	r3, #1
 80025e6:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ee:	6979      	ldr	r1, [r7, #20]
 80025f0:	17c8      	asrs	r0, r1, #31
 80025f2:	460c      	mov	r4, r1
 80025f4:	4605      	mov	r5, r0
 80025f6:	ebb2 0804 	subs.w	r8, r2, r4
 80025fa:	eb63 0905 	sbc.w	r9, r3, r5
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	4906      	ldr	r1, [pc, #24]	; (8002624 <UTILS_NanosecondsToTimespec+0x94>)
 800260c:	fb01 f303 	mul.w	r3, r1, r3
 8002610:	441a      	add	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	609a      	str	r2, [r3, #8]
    }
}
 8002616:	bf00      	nop
 8002618:	3718      	adds	r7, #24
 800261a:	46bd      	mov	sp, r7
 800261c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002620:	44b82fa1 	.word	0x44b82fa1
 8002624:	3b9aca00 	.word	0x3b9aca00
 8002628:	3b9aca00 	.word	0x3b9aca00
 800262c:	00000000 	.word	0x00000000

08002630 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002634:	b08e      	sub	sp, #56	; 0x38
 8002636:	af00      	add	r7, sp, #0
 8002638:	6278      	str	r0, [r7, #36]	; 0x24
 800263a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800263c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002640:	2300      	movs	r3, #0
 8002642:	6013      	str	r3, [r2, #0]
 8002644:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002646:	f04f 0200 	mov.w	r2, #0
 800264a:	f04f 0300 	mov.w	r3, #0
 800264e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002652:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002656:	4618      	mov	r0, r3
 8002658:	f007 fda0 	bl	800a19c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800265c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265e:	17da      	asrs	r2, r3, #31
 8002660:	61bb      	str	r3, [r7, #24]
 8002662:	61fa      	str	r2, [r7, #28]
 8002664:	f04f 0200 	mov.w	r2, #0
 8002668:	f04f 0300 	mov.w	r3, #0
 800266c:	69b9      	ldr	r1, [r7, #24]
 800266e:	000b      	movs	r3, r1
 8002670:	2200      	movs	r2, #0
 8002672:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002678:	2200      	movs	r2, #0
 800267a:	461c      	mov	r4, r3
 800267c:	4615      	mov	r5, r2
 800267e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002682:	1911      	adds	r1, r2, r4
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	416b      	adcs	r3, r5
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800268e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002692:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	f04f 0400 	mov.w	r4, #0
 800269e:	f04f 0500 	mov.w	r5, #0
 80026a2:	015d      	lsls	r5, r3, #5
 80026a4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80026a8:	0154      	lsls	r4, r2, #5
 80026aa:	4622      	mov	r2, r4
 80026ac:	462b      	mov	r3, r5
 80026ae:	ebb2 0800 	subs.w	r8, r2, r0
 80026b2:	eb63 0901 	sbc.w	r9, r3, r1
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	f04f 0300 	mov.w	r3, #0
 80026be:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80026c2:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80026c6:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80026ca:	4690      	mov	r8, r2
 80026cc:	4699      	mov	r9, r3
 80026ce:	eb18 0a00 	adds.w	sl, r8, r0
 80026d2:	eb49 0b01 	adc.w	fp, r9, r1
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	f04f 0300 	mov.w	r3, #0
 80026de:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026e2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026e6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026ea:	ebb2 040a 	subs.w	r4, r2, sl
 80026ee:	603c      	str	r4, [r7, #0]
 80026f0:	eb63 030b 	sbc.w	r3, r3, fp
 80026f4:	607b      	str	r3, [r7, #4]
 80026f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026fa:	4623      	mov	r3, r4
 80026fc:	181b      	adds	r3, r3, r0
 80026fe:	613b      	str	r3, [r7, #16]
 8002700:	462b      	mov	r3, r5
 8002702:	eb41 0303 	adc.w	r3, r1, r3
 8002706:	617b      	str	r3, [r7, #20]
 8002708:	6a3a      	ldr	r2, [r7, #32]
 800270a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800270e:	f7ff ff3f 	bl	8002590 <UTILS_NanosecondsToTimespec>

    return 0;
 8002712:	2300      	movs	r3, #0
 8002714:	4618      	mov	r0, r3
 8002716:	3738      	adds	r7, #56	; 0x38
 8002718:	46bd      	mov	sp, r7
 800271a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002726:	4b11      	ldr	r3, [pc, #68]	; (800276c <HAL_MspInit+0x4c>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	4a10      	ldr	r2, [pc, #64]	; (800276c <HAL_MspInit+0x4c>)
 800272c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002730:	6413      	str	r3, [r2, #64]	; 0x40
 8002732:	4b0e      	ldr	r3, [pc, #56]	; (800276c <HAL_MspInit+0x4c>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273a:	607b      	str	r3, [r7, #4]
 800273c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800273e:	4b0b      	ldr	r3, [pc, #44]	; (800276c <HAL_MspInit+0x4c>)
 8002740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002742:	4a0a      	ldr	r2, [pc, #40]	; (800276c <HAL_MspInit+0x4c>)
 8002744:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002748:	6453      	str	r3, [r2, #68]	; 0x44
 800274a:	4b08      	ldr	r3, [pc, #32]	; (800276c <HAL_MspInit+0x4c>)
 800274c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002752:	603b      	str	r3, [r7, #0]
 8002754:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002756:	2200      	movs	r2, #0
 8002758:	210f      	movs	r1, #15
 800275a:	f06f 0001 	mvn.w	r0, #1
 800275e:	f001 f8fd 	bl	800395c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002762:	bf00      	nop
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40023800 	.word	0x40023800

08002770 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08e      	sub	sp, #56	; 0x38
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002778:	2300      	movs	r3, #0
 800277a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002780:	4b33      	ldr	r3, [pc, #204]	; (8002850 <HAL_InitTick+0xe0>)
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	4a32      	ldr	r2, [pc, #200]	; (8002850 <HAL_InitTick+0xe0>)
 8002786:	f043 0310 	orr.w	r3, r3, #16
 800278a:	6413      	str	r3, [r2, #64]	; 0x40
 800278c:	4b30      	ldr	r3, [pc, #192]	; (8002850 <HAL_InitTick+0xe0>)
 800278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002790:	f003 0310 	and.w	r3, r3, #16
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002798:	f107 0210 	add.w	r2, r7, #16
 800279c:	f107 0314 	add.w	r3, r7, #20
 80027a0:	4611      	mov	r1, r2
 80027a2:	4618      	mov	r0, r3
 80027a4:	f002 fd74 	bl	8005290 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80027ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d103      	bne.n	80027ba <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80027b2:	f002 fd45 	bl	8005240 <HAL_RCC_GetPCLK1Freq>
 80027b6:	6378      	str	r0, [r7, #52]	; 0x34
 80027b8:	e004      	b.n	80027c4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80027ba:	f002 fd41 	bl	8005240 <HAL_RCC_GetPCLK1Freq>
 80027be:	4603      	mov	r3, r0
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80027c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027c6:	4a23      	ldr	r2, [pc, #140]	; (8002854 <HAL_InitTick+0xe4>)
 80027c8:	fba2 2303 	umull	r2, r3, r2, r3
 80027cc:	0c9b      	lsrs	r3, r3, #18
 80027ce:	3b01      	subs	r3, #1
 80027d0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80027d2:	4b21      	ldr	r3, [pc, #132]	; (8002858 <HAL_InitTick+0xe8>)
 80027d4:	4a21      	ldr	r2, [pc, #132]	; (800285c <HAL_InitTick+0xec>)
 80027d6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80027d8:	4b1f      	ldr	r3, [pc, #124]	; (8002858 <HAL_InitTick+0xe8>)
 80027da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80027de:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80027e0:	4a1d      	ldr	r2, [pc, #116]	; (8002858 <HAL_InitTick+0xe8>)
 80027e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80027e6:	4b1c      	ldr	r3, [pc, #112]	; (8002858 <HAL_InitTick+0xe8>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027ec:	4b1a      	ldr	r3, [pc, #104]	; (8002858 <HAL_InitTick+0xe8>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027f2:	4b19      	ldr	r3, [pc, #100]	; (8002858 <HAL_InitTick+0xe8>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80027f8:	4817      	ldr	r0, [pc, #92]	; (8002858 <HAL_InitTick+0xe8>)
 80027fa:	f003 f9a3 	bl	8005b44 <HAL_TIM_Base_Init>
 80027fe:	4603      	mov	r3, r0
 8002800:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002804:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002808:	2b00      	cmp	r3, #0
 800280a:	d11b      	bne.n	8002844 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800280c:	4812      	ldr	r0, [pc, #72]	; (8002858 <HAL_InitTick+0xe8>)
 800280e:	f003 f9fb 	bl	8005c08 <HAL_TIM_Base_Start_IT>
 8002812:	4603      	mov	r3, r0
 8002814:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002818:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800281c:	2b00      	cmp	r3, #0
 800281e:	d111      	bne.n	8002844 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002820:	2036      	movs	r0, #54	; 0x36
 8002822:	f001 f8b7 	bl	8003994 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b0f      	cmp	r3, #15
 800282a:	d808      	bhi.n	800283e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800282c:	2200      	movs	r2, #0
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	2036      	movs	r0, #54	; 0x36
 8002832:	f001 f893 	bl	800395c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002836:	4a0a      	ldr	r2, [pc, #40]	; (8002860 <HAL_InitTick+0xf0>)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6013      	str	r3, [r2, #0]
 800283c:	e002      	b.n	8002844 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002844:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002848:	4618      	mov	r0, r3
 800284a:	3738      	adds	r7, #56	; 0x38
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40023800 	.word	0x40023800
 8002854:	431bde83 	.word	0x431bde83
 8002858:	20006470 	.word	0x20006470
 800285c:	40001000 	.word	0x40001000
 8002860:	20000008 	.word	0x20000008

08002864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002868:	e7fe      	b.n	8002868 <NMI_Handler+0x4>

0800286a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800286a:	b480      	push	{r7}
 800286c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800286e:	e7fe      	b.n	800286e <HardFault_Handler+0x4>

08002870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002874:	e7fe      	b.n	8002874 <MemManage_Handler+0x4>

08002876 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002876:	b480      	push	{r7}
 8002878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800287a:	e7fe      	b.n	800287a <BusFault_Handler+0x4>

0800287c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002880:	e7fe      	b.n	8002880 <UsageFault_Handler+0x4>

08002882 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002882:	b480      	push	{r7}
 8002884:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002886:	bf00      	nop
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002894:	4802      	ldr	r0, [pc, #8]	; (80028a0 <DMA1_Stream1_IRQHandler+0x10>)
 8002896:	f001 fa2b 	bl	8003cf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800289a:	bf00      	nop
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	200067c0 	.word	0x200067c0

080028a4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80028a8:	4802      	ldr	r0, [pc, #8]	; (80028b4 <DMA1_Stream3_IRQHandler+0x10>)
 80028aa:	f001 fa21 	bl	8003cf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80028ae:	bf00      	nop
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20006760 	.word	0x20006760

080028b8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80028bc:	4802      	ldr	r0, [pc, #8]	; (80028c8 <USART3_IRQHandler+0x10>)
 80028be:	f004 fb3d 	bl	8006f3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80028c2:	bf00      	nop
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	200066d8 	.word	0x200066d8

080028cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80028d0:	4802      	ldr	r0, [pc, #8]	; (80028dc <TIM6_DAC_IRQHandler+0x10>)
 80028d2:	f003 fb0f 	bl	8005ef4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80028d6:	bf00      	nop
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	20006470 	.word	0x20006470

080028e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  return 1;
 80028e4:	2301      	movs	r3, #1
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <_kill>:

int _kill(int pid, int sig)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80028fa:	f019 f8bf 	bl	801ba7c <__errno>
 80028fe:	4603      	mov	r3, r0
 8002900:	2216      	movs	r2, #22
 8002902:	601a      	str	r2, [r3, #0]
  return -1;
 8002904:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002908:	4618      	mov	r0, r3
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <_exit>:

void _exit (int status)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002918:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7ff ffe7 	bl	80028f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002922:	e7fe      	b.n	8002922 <_exit+0x12>

08002924 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002930:	2300      	movs	r3, #0
 8002932:	617b      	str	r3, [r7, #20]
 8002934:	e00a      	b.n	800294c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002936:	f3af 8000 	nop.w
 800293a:	4601      	mov	r1, r0
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	1c5a      	adds	r2, r3, #1
 8002940:	60ba      	str	r2, [r7, #8]
 8002942:	b2ca      	uxtb	r2, r1
 8002944:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	3301      	adds	r3, #1
 800294a:	617b      	str	r3, [r7, #20]
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	429a      	cmp	r2, r3
 8002952:	dbf0      	blt.n	8002936 <_read+0x12>
  }

  return len;
 8002954:	687b      	ldr	r3, [r7, #4]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3718      	adds	r7, #24
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b086      	sub	sp, #24
 8002962:	af00      	add	r7, sp, #0
 8002964:	60f8      	str	r0, [r7, #12]
 8002966:	60b9      	str	r1, [r7, #8]
 8002968:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800296a:	2300      	movs	r3, #0
 800296c:	617b      	str	r3, [r7, #20]
 800296e:	e009      	b.n	8002984 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	1c5a      	adds	r2, r3, #1
 8002974:	60ba      	str	r2, [r7, #8]
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	3301      	adds	r3, #1
 8002982:	617b      	str	r3, [r7, #20]
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	429a      	cmp	r2, r3
 800298a:	dbf1      	blt.n	8002970 <_write+0x12>
  }
  return len;
 800298c:	687b      	ldr	r3, [r7, #4]
}
 800298e:	4618      	mov	r0, r3
 8002990:	3718      	adds	r7, #24
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <_close>:

int _close(int file)
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800299e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
 80029b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029be:	605a      	str	r2, [r3, #4]
  return 0;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <_isatty>:

int _isatty(int file)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029d6:	2301      	movs	r3, #1
}
 80029d8:	4618      	mov	r0, r3
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
	...

08002a00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a08:	4a14      	ldr	r2, [pc, #80]	; (8002a5c <_sbrk+0x5c>)
 8002a0a:	4b15      	ldr	r3, [pc, #84]	; (8002a60 <_sbrk+0x60>)
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a14:	4b13      	ldr	r3, [pc, #76]	; (8002a64 <_sbrk+0x64>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d102      	bne.n	8002a22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a1c:	4b11      	ldr	r3, [pc, #68]	; (8002a64 <_sbrk+0x64>)
 8002a1e:	4a12      	ldr	r2, [pc, #72]	; (8002a68 <_sbrk+0x68>)
 8002a20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a22:	4b10      	ldr	r3, [pc, #64]	; (8002a64 <_sbrk+0x64>)
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4413      	add	r3, r2
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d207      	bcs.n	8002a40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a30:	f019 f824 	bl	801ba7c <__errno>
 8002a34:	4603      	mov	r3, r0
 8002a36:	220c      	movs	r2, #12
 8002a38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a3e:	e009      	b.n	8002a54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a40:	4b08      	ldr	r3, [pc, #32]	; (8002a64 <_sbrk+0x64>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a46:	4b07      	ldr	r3, [pc, #28]	; (8002a64 <_sbrk+0x64>)
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	4a05      	ldr	r2, [pc, #20]	; (8002a64 <_sbrk+0x64>)
 8002a50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a52:	68fb      	ldr	r3, [r7, #12]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	20080000 	.word	0x20080000
 8002a60:	00000400 	.word	0x00000400
 8002a64:	200064c0 	.word	0x200064c0
 8002a68:	20010a48 	.word	0x20010a48

08002a6c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a70:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <SystemInit+0x20>)
 8002a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a76:	4a05      	ldr	r2, [pc, #20]	; (8002a8c <SystemInit+0x20>)
 8002a78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a80:	bf00      	nop
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	e000ed00 	.word	0xe000ed00

08002a90 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b096      	sub	sp, #88	; 0x58
 8002a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a96:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	605a      	str	r2, [r3, #4]
 8002aa0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002aa2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	605a      	str	r2, [r3, #4]
 8002aac:	609a      	str	r2, [r3, #8]
 8002aae:	60da      	str	r2, [r3, #12]
 8002ab0:	611a      	str	r2, [r3, #16]
 8002ab2:	615a      	str	r2, [r3, #20]
 8002ab4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ab6:	1d3b      	adds	r3, r7, #4
 8002ab8:	222c      	movs	r2, #44	; 0x2c
 8002aba:	2100      	movs	r1, #0
 8002abc:	4618      	mov	r0, r3
 8002abe:	f018 fee1 	bl	801b884 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ac2:	4b4b      	ldr	r3, [pc, #300]	; (8002bf0 <MX_TIM1_Init+0x160>)
 8002ac4:	4a4b      	ldr	r2, [pc, #300]	; (8002bf4 <MX_TIM1_Init+0x164>)
 8002ac6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002ac8:	4b49      	ldr	r3, [pc, #292]	; (8002bf0 <MX_TIM1_Init+0x160>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ace:	4b48      	ldr	r3, [pc, #288]	; (8002bf0 <MX_TIM1_Init+0x160>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002ad4:	4b46      	ldr	r3, [pc, #280]	; (8002bf0 <MX_TIM1_Init+0x160>)
 8002ad6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ada:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002adc:	4b44      	ldr	r3, [pc, #272]	; (8002bf0 <MX_TIM1_Init+0x160>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002ae2:	4b43      	ldr	r3, [pc, #268]	; (8002bf0 <MX_TIM1_Init+0x160>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ae8:	4b41      	ldr	r3, [pc, #260]	; (8002bf0 <MX_TIM1_Init+0x160>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002aee:	4840      	ldr	r0, [pc, #256]	; (8002bf0 <MX_TIM1_Init+0x160>)
 8002af0:	f003 f902 	bl	8005cf8 <HAL_TIM_PWM_Init>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002afa:	f7ff fca7 	bl	800244c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002afe:	2300      	movs	r3, #0
 8002b00:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002b02:	2300      	movs	r3, #0
 8002b04:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b06:	2300      	movs	r3, #0
 8002b08:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b0a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4837      	ldr	r0, [pc, #220]	; (8002bf0 <MX_TIM1_Init+0x160>)
 8002b12:	f003 ff49 	bl	80069a8 <HAL_TIMEx_MasterConfigSynchronization>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002b1c:	f7ff fc96 	bl	800244c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b20:	2360      	movs	r3, #96	; 0x60
 8002b22:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b30:	2300      	movs	r3, #0
 8002b32:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002b34:	2300      	movs	r3, #0
 8002b36:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b40:	2200      	movs	r2, #0
 8002b42:	4619      	mov	r1, r3
 8002b44:	482a      	ldr	r0, [pc, #168]	; (8002bf0 <MX_TIM1_Init+0x160>)
 8002b46:	f003 faf5 	bl	8006134 <HAL_TIM_PWM_ConfigChannel>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002b50:	f7ff fc7c 	bl	800244c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b58:	2204      	movs	r2, #4
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4824      	ldr	r0, [pc, #144]	; (8002bf0 <MX_TIM1_Init+0x160>)
 8002b5e:	f003 fae9 	bl	8006134 <HAL_TIM_PWM_ConfigChannel>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8002b68:	f7ff fc70 	bl	800244c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002b6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b70:	2208      	movs	r2, #8
 8002b72:	4619      	mov	r1, r3
 8002b74:	481e      	ldr	r0, [pc, #120]	; (8002bf0 <MX_TIM1_Init+0x160>)
 8002b76:	f003 fadd 	bl	8006134 <HAL_TIM_PWM_ConfigChannel>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8002b80:	f7ff fc64 	bl	800244c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002b84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b88:	220c      	movs	r2, #12
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4818      	ldr	r0, [pc, #96]	; (8002bf0 <MX_TIM1_Init+0x160>)
 8002b8e:	f003 fad1 	bl	8006134 <HAL_TIM_PWM_ConfigChannel>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8002b98:	f7ff fc58 	bl	800244c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002bac:	2300      	movs	r3, #0
 8002bae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002bb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bb4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002bbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002bcc:	1d3b      	adds	r3, r7, #4
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4807      	ldr	r0, [pc, #28]	; (8002bf0 <MX_TIM1_Init+0x160>)
 8002bd2:	f003 ff77 	bl	8006ac4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8002bdc:	f7ff fc36 	bl	800244c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002be0:	4803      	ldr	r0, [pc, #12]	; (8002bf0 <MX_TIM1_Init+0x160>)
 8002be2:	f000 fb7d 	bl	80032e0 <HAL_TIM_MspPostInit>

}
 8002be6:	bf00      	nop
 8002be8:	3758      	adds	r7, #88	; 0x58
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	200064c4 	.word	0x200064c4
 8002bf4:	40010000 	.word	0x40010000

08002bf8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08c      	sub	sp, #48	; 0x30
 8002bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002bfe:	f107 030c 	add.w	r3, r7, #12
 8002c02:	2224      	movs	r2, #36	; 0x24
 8002c04:	2100      	movs	r1, #0
 8002c06:	4618      	mov	r0, r3
 8002c08:	f018 fe3c 	bl	801b884 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c0c:	463b      	mov	r3, r7
 8002c0e:	2200      	movs	r2, #0
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	605a      	str	r2, [r3, #4]
 8002c14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c16:	4b21      	ldr	r3, [pc, #132]	; (8002c9c <MX_TIM2_Init+0xa4>)
 8002c18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c1c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002c1e:	4b1f      	ldr	r3, [pc, #124]	; (8002c9c <MX_TIM2_Init+0xa4>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c24:	4b1d      	ldr	r3, [pc, #116]	; (8002c9c <MX_TIM2_Init+0xa4>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002c2a:	4b1c      	ldr	r3, [pc, #112]	; (8002c9c <MX_TIM2_Init+0xa4>)
 8002c2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c30:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c32:	4b1a      	ldr	r3, [pc, #104]	; (8002c9c <MX_TIM2_Init+0xa4>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c38:	4b18      	ldr	r3, [pc, #96]	; (8002c9c <MX_TIM2_Init+0xa4>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002c42:	2300      	movs	r3, #0
 8002c44:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002c46:	2301      	movs	r3, #1
 8002c48:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002c52:	2300      	movs	r3, #0
 8002c54:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002c56:	2301      	movs	r3, #1
 8002c58:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002c62:	f107 030c 	add.w	r3, r7, #12
 8002c66:	4619      	mov	r1, r3
 8002c68:	480c      	ldr	r0, [pc, #48]	; (8002c9c <MX_TIM2_Init+0xa4>)
 8002c6a:	f003 f89d 	bl	8005da8 <HAL_TIM_Encoder_Init>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002c74:	f7ff fbea 	bl	800244c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c80:	463b      	mov	r3, r7
 8002c82:	4619      	mov	r1, r3
 8002c84:	4805      	ldr	r0, [pc, #20]	; (8002c9c <MX_TIM2_Init+0xa4>)
 8002c86:	f003 fe8f 	bl	80069a8 <HAL_TIMEx_MasterConfigSynchronization>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002c90:	f7ff fbdc 	bl	800244c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002c94:	bf00      	nop
 8002c96:	3730      	adds	r7, #48	; 0x30
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	20006510 	.word	0x20006510

08002ca0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08c      	sub	sp, #48	; 0x30
 8002ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002ca6:	f107 030c 	add.w	r3, r7, #12
 8002caa:	2224      	movs	r2, #36	; 0x24
 8002cac:	2100      	movs	r1, #0
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f018 fde8 	bl	801b884 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cb4:	463b      	mov	r3, r7
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	605a      	str	r2, [r3, #4]
 8002cbc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002cbe:	4b21      	ldr	r3, [pc, #132]	; (8002d44 <MX_TIM3_Init+0xa4>)
 8002cc0:	4a21      	ldr	r2, [pc, #132]	; (8002d48 <MX_TIM3_Init+0xa8>)
 8002cc2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002cc4:	4b1f      	ldr	r3, [pc, #124]	; (8002d44 <MX_TIM3_Init+0xa4>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cca:	4b1e      	ldr	r3, [pc, #120]	; (8002d44 <MX_TIM3_Init+0xa4>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002cd0:	4b1c      	ldr	r3, [pc, #112]	; (8002d44 <MX_TIM3_Init+0xa4>)
 8002cd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cd6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cd8:	4b1a      	ldr	r3, [pc, #104]	; (8002d44 <MX_TIM3_Init+0xa4>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cde:	4b19      	ldr	r3, [pc, #100]	; (8002d44 <MX_TIM3_Init+0xa4>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002cec:	2301      	movs	r3, #1
 8002cee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002d00:	2300      	movs	r3, #0
 8002d02:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002d04:	2300      	movs	r3, #0
 8002d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002d08:	f107 030c 	add.w	r3, r7, #12
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	480d      	ldr	r0, [pc, #52]	; (8002d44 <MX_TIM3_Init+0xa4>)
 8002d10:	f003 f84a 	bl	8005da8 <HAL_TIM_Encoder_Init>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002d1a:	f7ff fb97 	bl	800244c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d22:	2300      	movs	r3, #0
 8002d24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d26:	463b      	mov	r3, r7
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4806      	ldr	r0, [pc, #24]	; (8002d44 <MX_TIM3_Init+0xa4>)
 8002d2c:	f003 fe3c 	bl	80069a8 <HAL_TIMEx_MasterConfigSynchronization>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002d36:	f7ff fb89 	bl	800244c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002d3a:	bf00      	nop
 8002d3c:	3730      	adds	r7, #48	; 0x30
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	2000655c 	.word	0x2000655c
 8002d48:	40000400 	.word	0x40000400

08002d4c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b08c      	sub	sp, #48	; 0x30
 8002d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002d52:	f107 030c 	add.w	r3, r7, #12
 8002d56:	2224      	movs	r2, #36	; 0x24
 8002d58:	2100      	movs	r1, #0
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f018 fd92 	bl	801b884 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d60:	463b      	mov	r3, r7
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	605a      	str	r2, [r3, #4]
 8002d68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002d6a:	4b21      	ldr	r3, [pc, #132]	; (8002df0 <MX_TIM4_Init+0xa4>)
 8002d6c:	4a21      	ldr	r2, [pc, #132]	; (8002df4 <MX_TIM4_Init+0xa8>)
 8002d6e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002d70:	4b1f      	ldr	r3, [pc, #124]	; (8002df0 <MX_TIM4_Init+0xa4>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d76:	4b1e      	ldr	r3, [pc, #120]	; (8002df0 <MX_TIM4_Init+0xa4>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002d7c:	4b1c      	ldr	r3, [pc, #112]	; (8002df0 <MX_TIM4_Init+0xa4>)
 8002d7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d82:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d84:	4b1a      	ldr	r3, [pc, #104]	; (8002df0 <MX_TIM4_Init+0xa4>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d8a:	4b19      	ldr	r3, [pc, #100]	; (8002df0 <MX_TIM4_Init+0xa4>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002d90:	2301      	movs	r3, #1
 8002d92:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002d94:	2300      	movs	r3, #0
 8002d96:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002da0:	2300      	movs	r3, #0
 8002da2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002da4:	2300      	movs	r3, #0
 8002da6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002da8:	2301      	movs	r3, #1
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002dac:	2300      	movs	r3, #0
 8002dae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002db0:	2300      	movs	r3, #0
 8002db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002db4:	f107 030c 	add.w	r3, r7, #12
 8002db8:	4619      	mov	r1, r3
 8002dba:	480d      	ldr	r0, [pc, #52]	; (8002df0 <MX_TIM4_Init+0xa4>)
 8002dbc:	f002 fff4 	bl	8005da8 <HAL_TIM_Encoder_Init>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002dc6:	f7ff fb41 	bl	800244c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002dd2:	463b      	mov	r3, r7
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4806      	ldr	r0, [pc, #24]	; (8002df0 <MX_TIM4_Init+0xa4>)
 8002dd8:	f003 fde6 	bl	80069a8 <HAL_TIMEx_MasterConfigSynchronization>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002de2:	f7ff fb33 	bl	800244c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002de6:	bf00      	nop
 8002de8:	3730      	adds	r7, #48	; 0x30
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	200065a8 	.word	0x200065a8
 8002df4:	40000800 	.word	0x40000800

08002df8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b08c      	sub	sp, #48	; 0x30
 8002dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002dfe:	f107 030c 	add.w	r3, r7, #12
 8002e02:	2224      	movs	r2, #36	; 0x24
 8002e04:	2100      	movs	r1, #0
 8002e06:	4618      	mov	r0, r3
 8002e08:	f018 fd3c 	bl	801b884 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e0c:	463b      	mov	r3, r7
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	605a      	str	r2, [r3, #4]
 8002e14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002e16:	4b21      	ldr	r3, [pc, #132]	; (8002e9c <MX_TIM5_Init+0xa4>)
 8002e18:	4a21      	ldr	r2, [pc, #132]	; (8002ea0 <MX_TIM5_Init+0xa8>)
 8002e1a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002e1c:	4b1f      	ldr	r3, [pc, #124]	; (8002e9c <MX_TIM5_Init+0xa4>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e22:	4b1e      	ldr	r3, [pc, #120]	; (8002e9c <MX_TIM5_Init+0xa4>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002e28:	4b1c      	ldr	r3, [pc, #112]	; (8002e9c <MX_TIM5_Init+0xa4>)
 8002e2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e2e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e30:	4b1a      	ldr	r3, [pc, #104]	; (8002e9c <MX_TIM5_Init+0xa4>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e36:	4b19      	ldr	r3, [pc, #100]	; (8002e9c <MX_TIM5_Init+0xa4>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002e40:	2300      	movs	r3, #0
 8002e42:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002e44:	2301      	movs	r3, #1
 8002e46:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002e50:	2300      	movs	r3, #0
 8002e52:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002e54:	2301      	movs	r3, #1
 8002e56:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002e60:	f107 030c 	add.w	r3, r7, #12
 8002e64:	4619      	mov	r1, r3
 8002e66:	480d      	ldr	r0, [pc, #52]	; (8002e9c <MX_TIM5_Init+0xa4>)
 8002e68:	f002 ff9e 	bl	8005da8 <HAL_TIM_Encoder_Init>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8002e72:	f7ff faeb 	bl	800244c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e76:	2300      	movs	r3, #0
 8002e78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002e7e:	463b      	mov	r3, r7
 8002e80:	4619      	mov	r1, r3
 8002e82:	4806      	ldr	r0, [pc, #24]	; (8002e9c <MX_TIM5_Init+0xa4>)
 8002e84:	f003 fd90 	bl	80069a8 <HAL_TIMEx_MasterConfigSynchronization>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8002e8e:	f7ff fadd 	bl	800244c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002e92:	bf00      	nop
 8002e94:	3730      	adds	r7, #48	; 0x30
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	200065f4 	.word	0x200065f4
 8002ea0:	40000c00 	.word	0x40000c00

08002ea4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b08c      	sub	sp, #48	; 0x30
 8002ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002eaa:	f107 030c 	add.w	r3, r7, #12
 8002eae:	2224      	movs	r2, #36	; 0x24
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f018 fce6 	bl	801b884 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eb8:	463b      	mov	r3, r7
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	605a      	str	r2, [r3, #4]
 8002ec0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002ec2:	4b23      	ldr	r3, [pc, #140]	; (8002f50 <MX_TIM8_Init+0xac>)
 8002ec4:	4a23      	ldr	r2, [pc, #140]	; (8002f54 <MX_TIM8_Init+0xb0>)
 8002ec6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002ec8:	4b21      	ldr	r3, [pc, #132]	; (8002f50 <MX_TIM8_Init+0xac>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ece:	4b20      	ldr	r3, [pc, #128]	; (8002f50 <MX_TIM8_Init+0xac>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002ed4:	4b1e      	ldr	r3, [pc, #120]	; (8002f50 <MX_TIM8_Init+0xac>)
 8002ed6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002eda:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002edc:	4b1c      	ldr	r3, [pc, #112]	; (8002f50 <MX_TIM8_Init+0xac>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002ee2:	4b1b      	ldr	r3, [pc, #108]	; (8002f50 <MX_TIM8_Init+0xac>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ee8:	4b19      	ldr	r3, [pc, #100]	; (8002f50 <MX_TIM8_Init+0xac>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002efa:	2300      	movs	r3, #0
 8002efc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002efe:	2300      	movs	r3, #0
 8002f00:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002f02:	2300      	movs	r3, #0
 8002f04:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002f06:	2301      	movs	r3, #1
 8002f08:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8002f12:	f107 030c 	add.w	r3, r7, #12
 8002f16:	4619      	mov	r1, r3
 8002f18:	480d      	ldr	r0, [pc, #52]	; (8002f50 <MX_TIM8_Init+0xac>)
 8002f1a:	f002 ff45 	bl	8005da8 <HAL_TIM_Encoder_Init>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8002f24:	f7ff fa92 	bl	800244c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f30:	2300      	movs	r3, #0
 8002f32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002f34:	463b      	mov	r3, r7
 8002f36:	4619      	mov	r1, r3
 8002f38:	4805      	ldr	r0, [pc, #20]	; (8002f50 <MX_TIM8_Init+0xac>)
 8002f3a:	f003 fd35 	bl	80069a8 <HAL_TIMEx_MasterConfigSynchronization>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8002f44:	f7ff fa82 	bl	800244c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002f48:	bf00      	nop
 8002f4a:	3730      	adds	r7, #48	; 0x30
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	20006640 	.word	0x20006640
 8002f54:	40010400 	.word	0x40010400

08002f58 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b088      	sub	sp, #32
 8002f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f5e:	1d3b      	adds	r3, r7, #4
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	605a      	str	r2, [r3, #4]
 8002f66:	609a      	str	r2, [r3, #8]
 8002f68:	60da      	str	r2, [r3, #12]
 8002f6a:	611a      	str	r2, [r3, #16]
 8002f6c:	615a      	str	r2, [r3, #20]
 8002f6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002f70:	4b1f      	ldr	r3, [pc, #124]	; (8002ff0 <MX_TIM9_Init+0x98>)
 8002f72:	4a20      	ldr	r2, [pc, #128]	; (8002ff4 <MX_TIM9_Init+0x9c>)
 8002f74:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8002f76:	4b1e      	ldr	r3, [pc, #120]	; (8002ff0 <MX_TIM9_Init+0x98>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f7c:	4b1c      	ldr	r3, [pc, #112]	; (8002ff0 <MX_TIM9_Init+0x98>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8002f82:	4b1b      	ldr	r3, [pc, #108]	; (8002ff0 <MX_TIM9_Init+0x98>)
 8002f84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f88:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f8a:	4b19      	ldr	r3, [pc, #100]	; (8002ff0 <MX_TIM9_Init+0x98>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f90:	4b17      	ldr	r3, [pc, #92]	; (8002ff0 <MX_TIM9_Init+0x98>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8002f96:	4816      	ldr	r0, [pc, #88]	; (8002ff0 <MX_TIM9_Init+0x98>)
 8002f98:	f002 feae 	bl	8005cf8 <HAL_TIM_PWM_Init>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8002fa2:	f7ff fa53 	bl	800244c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fa6:	2360      	movs	r3, #96	; 0x60
 8002fa8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002faa:	2300      	movs	r3, #0
 8002fac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002fb6:	1d3b      	adds	r3, r7, #4
 8002fb8:	2200      	movs	r2, #0
 8002fba:	4619      	mov	r1, r3
 8002fbc:	480c      	ldr	r0, [pc, #48]	; (8002ff0 <MX_TIM9_Init+0x98>)
 8002fbe:	f003 f8b9 	bl	8006134 <HAL_TIM_PWM_ConfigChannel>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8002fc8:	f7ff fa40 	bl	800244c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002fcc:	1d3b      	adds	r3, r7, #4
 8002fce:	2204      	movs	r2, #4
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4807      	ldr	r0, [pc, #28]	; (8002ff0 <MX_TIM9_Init+0x98>)
 8002fd4:	f003 f8ae 	bl	8006134 <HAL_TIM_PWM_ConfigChannel>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8002fde:	f7ff fa35 	bl	800244c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8002fe2:	4803      	ldr	r0, [pc, #12]	; (8002ff0 <MX_TIM9_Init+0x98>)
 8002fe4:	f000 f97c 	bl	80032e0 <HAL_TIM_MspPostInit>

}
 8002fe8:	bf00      	nop
 8002fea:	3720      	adds	r7, #32
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	2000668c 	.word	0x2000668c
 8002ff4:	40014000 	.word	0x40014000

08002ff8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a13      	ldr	r2, [pc, #76]	; (8003054 <HAL_TIM_PWM_MspInit+0x5c>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d10c      	bne.n	8003024 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800300a:	4b13      	ldr	r3, [pc, #76]	; (8003058 <HAL_TIM_PWM_MspInit+0x60>)
 800300c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300e:	4a12      	ldr	r2, [pc, #72]	; (8003058 <HAL_TIM_PWM_MspInit+0x60>)
 8003010:	f043 0301 	orr.w	r3, r3, #1
 8003014:	6453      	str	r3, [r2, #68]	; 0x44
 8003016:	4b10      	ldr	r3, [pc, #64]	; (8003058 <HAL_TIM_PWM_MspInit+0x60>)
 8003018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8003022:	e010      	b.n	8003046 <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM9)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a0c      	ldr	r2, [pc, #48]	; (800305c <HAL_TIM_PWM_MspInit+0x64>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d10b      	bne.n	8003046 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800302e:	4b0a      	ldr	r3, [pc, #40]	; (8003058 <HAL_TIM_PWM_MspInit+0x60>)
 8003030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003032:	4a09      	ldr	r2, [pc, #36]	; (8003058 <HAL_TIM_PWM_MspInit+0x60>)
 8003034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003038:	6453      	str	r3, [r2, #68]	; 0x44
 800303a:	4b07      	ldr	r3, [pc, #28]	; (8003058 <HAL_TIM_PWM_MspInit+0x60>)
 800303c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003042:	60bb      	str	r3, [r7, #8]
 8003044:	68bb      	ldr	r3, [r7, #8]
}
 8003046:	bf00      	nop
 8003048:	3714      	adds	r7, #20
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	40010000 	.word	0x40010000
 8003058:	40023800 	.word	0x40023800
 800305c:	40014000 	.word	0x40014000

08003060 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b094      	sub	sp, #80	; 0x50
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003068:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	605a      	str	r2, [r3, #4]
 8003072:	609a      	str	r2, [r3, #8]
 8003074:	60da      	str	r2, [r3, #12]
 8003076:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003080:	d144      	bne.n	800310c <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003082:	4b8e      	ldr	r3, [pc, #568]	; (80032bc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	4a8d      	ldr	r2, [pc, #564]	; (80032bc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003088:	f043 0301 	orr.w	r3, r3, #1
 800308c:	6413      	str	r3, [r2, #64]	; 0x40
 800308e:	4b8b      	ldr	r3, [pc, #556]	; (80032bc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	63bb      	str	r3, [r7, #56]	; 0x38
 8003098:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800309a:	4b88      	ldr	r3, [pc, #544]	; (80032bc <HAL_TIM_Encoder_MspInit+0x25c>)
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	4a87      	ldr	r2, [pc, #540]	; (80032bc <HAL_TIM_Encoder_MspInit+0x25c>)
 80030a0:	f043 0301 	orr.w	r3, r3, #1
 80030a4:	6313      	str	r3, [r2, #48]	; 0x30
 80030a6:	4b85      	ldr	r3, [pc, #532]	; (80032bc <HAL_TIM_Encoder_MspInit+0x25c>)
 80030a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	637b      	str	r3, [r7, #52]	; 0x34
 80030b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030b2:	4b82      	ldr	r3, [pc, #520]	; (80032bc <HAL_TIM_Encoder_MspInit+0x25c>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	4a81      	ldr	r2, [pc, #516]	; (80032bc <HAL_TIM_Encoder_MspInit+0x25c>)
 80030b8:	f043 0302 	orr.w	r3, r3, #2
 80030bc:	6313      	str	r3, [r2, #48]	; 0x30
 80030be:	4b7f      	ldr	r3, [pc, #508]	; (80032bc <HAL_TIM_Encoder_MspInit+0x25c>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	633b      	str	r3, [r7, #48]	; 0x30
 80030c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTOR1_CHA_Pin;
 80030ca:	2320      	movs	r3, #32
 80030cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ce:	2302      	movs	r3, #2
 80030d0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d6:	2300      	movs	r3, #0
 80030d8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80030da:	2301      	movs	r3, #1
 80030dc:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MOTOR1_CHA_GPIO_Port, &GPIO_InitStruct);
 80030de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80030e2:	4619      	mov	r1, r3
 80030e4:	4876      	ldr	r0, [pc, #472]	; (80032c0 <HAL_TIM_Encoder_MspInit+0x260>)
 80030e6:	f001 f879 	bl	80041dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR1_CHB_Pin;
 80030ea:	2308      	movs	r3, #8
 80030ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ee:	2302      	movs	r3, #2
 80030f0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f2:	2300      	movs	r3, #0
 80030f4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f6:	2300      	movs	r3, #0
 80030f8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80030fa:	2301      	movs	r3, #1
 80030fc:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MOTOR1_CHB_GPIO_Port, &GPIO_InitStruct);
 80030fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003102:	4619      	mov	r1, r3
 8003104:	486f      	ldr	r0, [pc, #444]	; (80032c4 <HAL_TIM_Encoder_MspInit+0x264>)
 8003106:	f001 f869 	bl	80041dc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800310a:	e0d3      	b.n	80032b4 <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM3)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a6d      	ldr	r2, [pc, #436]	; (80032c8 <HAL_TIM_Encoder_MspInit+0x268>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d144      	bne.n	80031a0 <HAL_TIM_Encoder_MspInit+0x140>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003116:	4b69      	ldr	r3, [pc, #420]	; (80032bc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	4a68      	ldr	r2, [pc, #416]	; (80032bc <HAL_TIM_Encoder_MspInit+0x25c>)
 800311c:	f043 0302 	orr.w	r3, r3, #2
 8003120:	6413      	str	r3, [r2, #64]	; 0x40
 8003122:	4b66      	ldr	r3, [pc, #408]	; (80032bc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800312c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800312e:	4b63      	ldr	r3, [pc, #396]	; (80032bc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	4a62      	ldr	r2, [pc, #392]	; (80032bc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003134:	f043 0301 	orr.w	r3, r3, #1
 8003138:	6313      	str	r3, [r2, #48]	; 0x30
 800313a:	4b60      	ldr	r3, [pc, #384]	; (80032bc <HAL_TIM_Encoder_MspInit+0x25c>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	62bb      	str	r3, [r7, #40]	; 0x28
 8003144:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003146:	4b5d      	ldr	r3, [pc, #372]	; (80032bc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	4a5c      	ldr	r2, [pc, #368]	; (80032bc <HAL_TIM_Encoder_MspInit+0x25c>)
 800314c:	f043 0302 	orr.w	r3, r3, #2
 8003150:	6313      	str	r3, [r2, #48]	; 0x30
 8003152:	4b5a      	ldr	r3, [pc, #360]	; (80032bc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	627b      	str	r3, [r7, #36]	; 0x24
 800315c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = MOTOR2_CHA_Pin;
 800315e:	2340      	movs	r3, #64	; 0x40
 8003160:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003162:	2302      	movs	r3, #2
 8003164:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003166:	2300      	movs	r3, #0
 8003168:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800316a:	2300      	movs	r3, #0
 800316c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800316e:	2302      	movs	r3, #2
 8003170:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MOTOR2_CHA_GPIO_Port, &GPIO_InitStruct);
 8003172:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003176:	4619      	mov	r1, r3
 8003178:	4851      	ldr	r0, [pc, #324]	; (80032c0 <HAL_TIM_Encoder_MspInit+0x260>)
 800317a:	f001 f82f 	bl	80041dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MOTOR2_CHB_Pin;
 800317e:	2320      	movs	r3, #32
 8003180:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003182:	2302      	movs	r3, #2
 8003184:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003186:	2300      	movs	r3, #0
 8003188:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800318a:	2300      	movs	r3, #0
 800318c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800318e:	2302      	movs	r3, #2
 8003190:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MOTOR2_CHB_GPIO_Port, &GPIO_InitStruct);
 8003192:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003196:	4619      	mov	r1, r3
 8003198:	484a      	ldr	r0, [pc, #296]	; (80032c4 <HAL_TIM_Encoder_MspInit+0x264>)
 800319a:	f001 f81f 	bl	80041dc <HAL_GPIO_Init>
}
 800319e:	e089      	b.n	80032b4 <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM4)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a49      	ldr	r2, [pc, #292]	; (80032cc <HAL_TIM_Encoder_MspInit+0x26c>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d129      	bne.n	80031fe <HAL_TIM_Encoder_MspInit+0x19e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80031aa:	4b44      	ldr	r3, [pc, #272]	; (80032bc <HAL_TIM_Encoder_MspInit+0x25c>)
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	4a43      	ldr	r2, [pc, #268]	; (80032bc <HAL_TIM_Encoder_MspInit+0x25c>)
 80031b0:	f043 0304 	orr.w	r3, r3, #4
 80031b4:	6413      	str	r3, [r2, #64]	; 0x40
 80031b6:	4b41      	ldr	r3, [pc, #260]	; (80032bc <HAL_TIM_Encoder_MspInit+0x25c>)
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	f003 0304 	and.w	r3, r3, #4
 80031be:	623b      	str	r3, [r7, #32]
 80031c0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031c2:	4b3e      	ldr	r3, [pc, #248]	; (80032bc <HAL_TIM_Encoder_MspInit+0x25c>)
 80031c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c6:	4a3d      	ldr	r2, [pc, #244]	; (80032bc <HAL_TIM_Encoder_MspInit+0x25c>)
 80031c8:	f043 0308 	orr.w	r3, r3, #8
 80031cc:	6313      	str	r3, [r2, #48]	; 0x30
 80031ce:	4b3b      	ldr	r3, [pc, #236]	; (80032bc <HAL_TIM_Encoder_MspInit+0x25c>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	f003 0308 	and.w	r3, r3, #8
 80031d6:	61fb      	str	r3, [r7, #28]
 80031d8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = MOTOR3_CHA_Pin|MOTOR3_CHB_Pin;
 80031da:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80031de:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e0:	2302      	movs	r3, #2
 80031e2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e4:	2300      	movs	r3, #0
 80031e6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e8:	2300      	movs	r3, #0
 80031ea:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80031ec:	2302      	movs	r3, #2
 80031ee:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80031f4:	4619      	mov	r1, r3
 80031f6:	4836      	ldr	r0, [pc, #216]	; (80032d0 <HAL_TIM_Encoder_MspInit+0x270>)
 80031f8:	f000 fff0 	bl	80041dc <HAL_GPIO_Init>
}
 80031fc:	e05a      	b.n	80032b4 <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM5)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a34      	ldr	r2, [pc, #208]	; (80032d4 <HAL_TIM_Encoder_MspInit+0x274>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d128      	bne.n	800325a <HAL_TIM_Encoder_MspInit+0x1fa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003208:	4b2c      	ldr	r3, [pc, #176]	; (80032bc <HAL_TIM_Encoder_MspInit+0x25c>)
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320c:	4a2b      	ldr	r2, [pc, #172]	; (80032bc <HAL_TIM_Encoder_MspInit+0x25c>)
 800320e:	f043 0308 	orr.w	r3, r3, #8
 8003212:	6413      	str	r3, [r2, #64]	; 0x40
 8003214:	4b29      	ldr	r3, [pc, #164]	; (80032bc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003218:	f003 0308 	and.w	r3, r3, #8
 800321c:	61bb      	str	r3, [r7, #24]
 800321e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003220:	4b26      	ldr	r3, [pc, #152]	; (80032bc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003224:	4a25      	ldr	r2, [pc, #148]	; (80032bc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003226:	f043 0301 	orr.w	r3, r3, #1
 800322a:	6313      	str	r3, [r2, #48]	; 0x30
 800322c:	4b23      	ldr	r3, [pc, #140]	; (80032bc <HAL_TIM_Encoder_MspInit+0x25c>)
 800322e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	617b      	str	r3, [r7, #20]
 8003236:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MOTOR4_CHA_Pin|MOTOR4_CHB_Pin;
 8003238:	2303      	movs	r3, #3
 800323a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800323c:	2302      	movs	r3, #2
 800323e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003240:	2300      	movs	r3, #0
 8003242:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003244:	2300      	movs	r3, #0
 8003246:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003248:	2302      	movs	r3, #2
 800324a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800324c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003250:	4619      	mov	r1, r3
 8003252:	481b      	ldr	r0, [pc, #108]	; (80032c0 <HAL_TIM_Encoder_MspInit+0x260>)
 8003254:	f000 ffc2 	bl	80041dc <HAL_GPIO_Init>
}
 8003258:	e02c      	b.n	80032b4 <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM8)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a1e      	ldr	r2, [pc, #120]	; (80032d8 <HAL_TIM_Encoder_MspInit+0x278>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d127      	bne.n	80032b4 <HAL_TIM_Encoder_MspInit+0x254>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003264:	4b15      	ldr	r3, [pc, #84]	; (80032bc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003268:	4a14      	ldr	r2, [pc, #80]	; (80032bc <HAL_TIM_Encoder_MspInit+0x25c>)
 800326a:	f043 0302 	orr.w	r3, r3, #2
 800326e:	6453      	str	r3, [r2, #68]	; 0x44
 8003270:	4b12      	ldr	r3, [pc, #72]	; (80032bc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	613b      	str	r3, [r7, #16]
 800327a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800327c:	4b0f      	ldr	r3, [pc, #60]	; (80032bc <HAL_TIM_Encoder_MspInit+0x25c>)
 800327e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003280:	4a0e      	ldr	r2, [pc, #56]	; (80032bc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003282:	f043 0304 	orr.w	r3, r3, #4
 8003286:	6313      	str	r3, [r2, #48]	; 0x30
 8003288:	4b0c      	ldr	r3, [pc, #48]	; (80032bc <HAL_TIM_Encoder_MspInit+0x25c>)
 800328a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328c:	f003 0304 	and.w	r3, r3, #4
 8003290:	60fb      	str	r3, [r7, #12]
 8003292:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR5_CHA_Pin|MOTOR5_CHB_Pin;
 8003294:	23c0      	movs	r3, #192	; 0xc0
 8003296:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003298:	2302      	movs	r3, #2
 800329a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329c:	2300      	movs	r3, #0
 800329e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a0:	2300      	movs	r3, #0
 80032a2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80032a4:	2303      	movs	r3, #3
 80032a6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80032ac:	4619      	mov	r1, r3
 80032ae:	480b      	ldr	r0, [pc, #44]	; (80032dc <HAL_TIM_Encoder_MspInit+0x27c>)
 80032b0:	f000 ff94 	bl	80041dc <HAL_GPIO_Init>
}
 80032b4:	bf00      	nop
 80032b6:	3750      	adds	r7, #80	; 0x50
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40023800 	.word	0x40023800
 80032c0:	40020000 	.word	0x40020000
 80032c4:	40020400 	.word	0x40020400
 80032c8:	40000400 	.word	0x40000400
 80032cc:	40000800 	.word	0x40000800
 80032d0:	40020c00 	.word	0x40020c00
 80032d4:	40000c00 	.word	0x40000c00
 80032d8:	40010400 	.word	0x40010400
 80032dc:	40020800 	.word	0x40020800

080032e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b08a      	sub	sp, #40	; 0x28
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032e8:	f107 0314 	add.w	r3, r7, #20
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	605a      	str	r2, [r3, #4]
 80032f2:	609a      	str	r2, [r3, #8]
 80032f4:	60da      	str	r2, [r3, #12]
 80032f6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a22      	ldr	r2, [pc, #136]	; (8003388 <HAL_TIM_MspPostInit+0xa8>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d11d      	bne.n	800333e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003302:	4b22      	ldr	r3, [pc, #136]	; (800338c <HAL_TIM_MspPostInit+0xac>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	4a21      	ldr	r2, [pc, #132]	; (800338c <HAL_TIM_MspPostInit+0xac>)
 8003308:	f043 0310 	orr.w	r3, r3, #16
 800330c:	6313      	str	r3, [r2, #48]	; 0x30
 800330e:	4b1f      	ldr	r3, [pc, #124]	; (800338c <HAL_TIM_MspPostInit+0xac>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	f003 0310 	and.w	r3, r3, #16
 8003316:	613b      	str	r3, [r7, #16]
 8003318:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MOTOR1_PWM_Pin|MOTOR2_PWM_Pin|MOTOR3_PWM_Pin|MOTOR4_PWM_Pin;
 800331a:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800331e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003320:	2302      	movs	r3, #2
 8003322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003324:	2300      	movs	r3, #0
 8003326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003328:	2300      	movs	r3, #0
 800332a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800332c:	2301      	movs	r3, #1
 800332e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003330:	f107 0314 	add.w	r3, r7, #20
 8003334:	4619      	mov	r1, r3
 8003336:	4816      	ldr	r0, [pc, #88]	; (8003390 <HAL_TIM_MspPostInit+0xb0>)
 8003338:	f000 ff50 	bl	80041dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 800333c:	e020      	b.n	8003380 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM9)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a14      	ldr	r2, [pc, #80]	; (8003394 <HAL_TIM_MspPostInit+0xb4>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d11b      	bne.n	8003380 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003348:	4b10      	ldr	r3, [pc, #64]	; (800338c <HAL_TIM_MspPostInit+0xac>)
 800334a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334c:	4a0f      	ldr	r2, [pc, #60]	; (800338c <HAL_TIM_MspPostInit+0xac>)
 800334e:	f043 0310 	orr.w	r3, r3, #16
 8003352:	6313      	str	r3, [r2, #48]	; 0x30
 8003354:	4b0d      	ldr	r3, [pc, #52]	; (800338c <HAL_TIM_MspPostInit+0xac>)
 8003356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003358:	f003 0310 	and.w	r3, r3, #16
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR5_PWM_Pin|MOTOR6_PWM_Pin;
 8003360:	2360      	movs	r3, #96	; 0x60
 8003362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003364:	2302      	movs	r3, #2
 8003366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003368:	2300      	movs	r3, #0
 800336a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800336c:	2300      	movs	r3, #0
 800336e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8003370:	2303      	movs	r3, #3
 8003372:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003374:	f107 0314 	add.w	r3, r7, #20
 8003378:	4619      	mov	r1, r3
 800337a:	4805      	ldr	r0, [pc, #20]	; (8003390 <HAL_TIM_MspPostInit+0xb0>)
 800337c:	f000 ff2e 	bl	80041dc <HAL_GPIO_Init>
}
 8003380:	bf00      	nop
 8003382:	3728      	adds	r7, #40	; 0x28
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	40010000 	.word	0x40010000
 800338c:	40023800 	.word	0x40023800
 8003390:	40021000 	.word	0x40021000
 8003394:	40014000 	.word	0x40014000

08003398 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800339c:	4b14      	ldr	r3, [pc, #80]	; (80033f0 <MX_USART3_UART_Init+0x58>)
 800339e:	4a15      	ldr	r2, [pc, #84]	; (80033f4 <MX_USART3_UART_Init+0x5c>)
 80033a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80033a2:	4b13      	ldr	r3, [pc, #76]	; (80033f0 <MX_USART3_UART_Init+0x58>)
 80033a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80033a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80033aa:	4b11      	ldr	r3, [pc, #68]	; (80033f0 <MX_USART3_UART_Init+0x58>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80033b0:	4b0f      	ldr	r3, [pc, #60]	; (80033f0 <MX_USART3_UART_Init+0x58>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80033b6:	4b0e      	ldr	r3, [pc, #56]	; (80033f0 <MX_USART3_UART_Init+0x58>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80033bc:	4b0c      	ldr	r3, [pc, #48]	; (80033f0 <MX_USART3_UART_Init+0x58>)
 80033be:	220c      	movs	r2, #12
 80033c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033c2:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <MX_USART3_UART_Init+0x58>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80033c8:	4b09      	ldr	r3, [pc, #36]	; (80033f0 <MX_USART3_UART_Init+0x58>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033ce:	4b08      	ldr	r3, [pc, #32]	; (80033f0 <MX_USART3_UART_Init+0x58>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033d4:	4b06      	ldr	r3, [pc, #24]	; (80033f0 <MX_USART3_UART_Init+0x58>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80033da:	4805      	ldr	r0, [pc, #20]	; (80033f0 <MX_USART3_UART_Init+0x58>)
 80033dc:	f003 fc0e 	bl	8006bfc <HAL_UART_Init>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80033e6:	f7ff f831 	bl	800244c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80033ea:	bf00      	nop
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	200066d8 	.word	0x200066d8
 80033f4:	40004800 	.word	0x40004800

080033f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b0ae      	sub	sp, #184	; 0xb8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003400:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	605a      	str	r2, [r3, #4]
 800340a:	609a      	str	r2, [r3, #8]
 800340c:	60da      	str	r2, [r3, #12]
 800340e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003410:	f107 0314 	add.w	r3, r7, #20
 8003414:	2290      	movs	r2, #144	; 0x90
 8003416:	2100      	movs	r1, #0
 8003418:	4618      	mov	r0, r3
 800341a:	f018 fa33 	bl	801b884 <memset>
  if(uartHandle->Instance==USART3)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a56      	ldr	r2, [pc, #344]	; (800357c <HAL_UART_MspInit+0x184>)
 8003424:	4293      	cmp	r3, r2
 8003426:	f040 80a4 	bne.w	8003572 <HAL_UART_MspInit+0x17a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800342a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800342e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003430:	2300      	movs	r3, #0
 8003432:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003434:	f107 0314 	add.w	r3, r7, #20
 8003438:	4618      	mov	r0, r3
 800343a:	f001 ff5b 	bl	80052f4 <HAL_RCCEx_PeriphCLKConfig>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8003444:	f7ff f802 	bl	800244c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003448:	4b4d      	ldr	r3, [pc, #308]	; (8003580 <HAL_UART_MspInit+0x188>)
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	4a4c      	ldr	r2, [pc, #304]	; (8003580 <HAL_UART_MspInit+0x188>)
 800344e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003452:	6413      	str	r3, [r2, #64]	; 0x40
 8003454:	4b4a      	ldr	r3, [pc, #296]	; (8003580 <HAL_UART_MspInit+0x188>)
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003458:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800345c:	613b      	str	r3, [r7, #16]
 800345e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003460:	4b47      	ldr	r3, [pc, #284]	; (8003580 <HAL_UART_MspInit+0x188>)
 8003462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003464:	4a46      	ldr	r2, [pc, #280]	; (8003580 <HAL_UART_MspInit+0x188>)
 8003466:	f043 0308 	orr.w	r3, r3, #8
 800346a:	6313      	str	r3, [r2, #48]	; 0x30
 800346c:	4b44      	ldr	r3, [pc, #272]	; (8003580 <HAL_UART_MspInit+0x188>)
 800346e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003470:	f003 0308 	and.w	r3, r3, #8
 8003474:	60fb      	str	r3, [r7, #12]
 8003476:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003478:	f44f 7340 	mov.w	r3, #768	; 0x300
 800347c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003480:	2302      	movs	r3, #2
 8003482:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003486:	2300      	movs	r3, #0
 8003488:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800348c:	2303      	movs	r3, #3
 800348e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003492:	2307      	movs	r3, #7
 8003494:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003498:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800349c:	4619      	mov	r1, r3
 800349e:	4839      	ldr	r0, [pc, #228]	; (8003584 <HAL_UART_MspInit+0x18c>)
 80034a0:	f000 fe9c 	bl	80041dc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80034a4:	4b38      	ldr	r3, [pc, #224]	; (8003588 <HAL_UART_MspInit+0x190>)
 80034a6:	4a39      	ldr	r2, [pc, #228]	; (800358c <HAL_UART_MspInit+0x194>)
 80034a8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80034aa:	4b37      	ldr	r3, [pc, #220]	; (8003588 <HAL_UART_MspInit+0x190>)
 80034ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80034b0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034b2:	4b35      	ldr	r3, [pc, #212]	; (8003588 <HAL_UART_MspInit+0x190>)
 80034b4:	2240      	movs	r2, #64	; 0x40
 80034b6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034b8:	4b33      	ldr	r3, [pc, #204]	; (8003588 <HAL_UART_MspInit+0x190>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80034be:	4b32      	ldr	r3, [pc, #200]	; (8003588 <HAL_UART_MspInit+0x190>)
 80034c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034c4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034c6:	4b30      	ldr	r3, [pc, #192]	; (8003588 <HAL_UART_MspInit+0x190>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034cc:	4b2e      	ldr	r3, [pc, #184]	; (8003588 <HAL_UART_MspInit+0x190>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80034d2:	4b2d      	ldr	r3, [pc, #180]	; (8003588 <HAL_UART_MspInit+0x190>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80034d8:	4b2b      	ldr	r3, [pc, #172]	; (8003588 <HAL_UART_MspInit+0x190>)
 80034da:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80034de:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034e0:	4b29      	ldr	r3, [pc, #164]	; (8003588 <HAL_UART_MspInit+0x190>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80034e6:	4828      	ldr	r0, [pc, #160]	; (8003588 <HAL_UART_MspInit+0x190>)
 80034e8:	f000 fa62 	bl	80039b0 <HAL_DMA_Init>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 80034f2:	f7fe ffab 	bl	800244c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a23      	ldr	r2, [pc, #140]	; (8003588 <HAL_UART_MspInit+0x190>)
 80034fa:	671a      	str	r2, [r3, #112]	; 0x70
 80034fc:	4a22      	ldr	r2, [pc, #136]	; (8003588 <HAL_UART_MspInit+0x190>)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003502:	4b23      	ldr	r3, [pc, #140]	; (8003590 <HAL_UART_MspInit+0x198>)
 8003504:	4a23      	ldr	r2, [pc, #140]	; (8003594 <HAL_UART_MspInit+0x19c>)
 8003506:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003508:	4b21      	ldr	r3, [pc, #132]	; (8003590 <HAL_UART_MspInit+0x198>)
 800350a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800350e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003510:	4b1f      	ldr	r3, [pc, #124]	; (8003590 <HAL_UART_MspInit+0x198>)
 8003512:	2200      	movs	r2, #0
 8003514:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003516:	4b1e      	ldr	r3, [pc, #120]	; (8003590 <HAL_UART_MspInit+0x198>)
 8003518:	2200      	movs	r2, #0
 800351a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800351c:	4b1c      	ldr	r3, [pc, #112]	; (8003590 <HAL_UART_MspInit+0x198>)
 800351e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003522:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003524:	4b1a      	ldr	r3, [pc, #104]	; (8003590 <HAL_UART_MspInit+0x198>)
 8003526:	2200      	movs	r2, #0
 8003528:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800352a:	4b19      	ldr	r3, [pc, #100]	; (8003590 <HAL_UART_MspInit+0x198>)
 800352c:	2200      	movs	r2, #0
 800352e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003530:	4b17      	ldr	r3, [pc, #92]	; (8003590 <HAL_UART_MspInit+0x198>)
 8003532:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003536:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003538:	4b15      	ldr	r3, [pc, #84]	; (8003590 <HAL_UART_MspInit+0x198>)
 800353a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800353e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003540:	4b13      	ldr	r3, [pc, #76]	; (8003590 <HAL_UART_MspInit+0x198>)
 8003542:	2200      	movs	r2, #0
 8003544:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003546:	4812      	ldr	r0, [pc, #72]	; (8003590 <HAL_UART_MspInit+0x198>)
 8003548:	f000 fa32 	bl	80039b0 <HAL_DMA_Init>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_UART_MspInit+0x15e>
    {
      Error_Handler();
 8003552:	f7fe ff7b 	bl	800244c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a0d      	ldr	r2, [pc, #52]	; (8003590 <HAL_UART_MspInit+0x198>)
 800355a:	675a      	str	r2, [r3, #116]	; 0x74
 800355c:	4a0c      	ldr	r2, [pc, #48]	; (8003590 <HAL_UART_MspInit+0x198>)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003562:	2200      	movs	r2, #0
 8003564:	2105      	movs	r1, #5
 8003566:	2027      	movs	r0, #39	; 0x27
 8003568:	f000 f9f8 	bl	800395c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800356c:	2027      	movs	r0, #39	; 0x27
 800356e:	f000 fa11 	bl	8003994 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003572:	bf00      	nop
 8003574:	37b8      	adds	r7, #184	; 0xb8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40004800 	.word	0x40004800
 8003580:	40023800 	.word	0x40023800
 8003584:	40020c00 	.word	0x40020c00
 8003588:	20006760 	.word	0x20006760
 800358c:	40026058 	.word	0x40026058
 8003590:	200067c0 	.word	0x200067c0
 8003594:	40026028 	.word	0x40026028

08003598 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800359c:	4b14      	ldr	r3, [pc, #80]	; (80035f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800359e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80035a2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80035a4:	4b12      	ldr	r3, [pc, #72]	; (80035f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80035a6:	2206      	movs	r2, #6
 80035a8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80035aa:	4b11      	ldr	r3, [pc, #68]	; (80035f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80035ac:	2202      	movs	r2, #2
 80035ae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80035b0:	4b0f      	ldr	r3, [pc, #60]	; (80035f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80035b6:	4b0e      	ldr	r3, [pc, #56]	; (80035f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80035b8:	2202      	movs	r2, #2
 80035ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80035bc:	4b0c      	ldr	r3, [pc, #48]	; (80035f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80035be:	2201      	movs	r2, #1
 80035c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80035c2:	4b0b      	ldr	r3, [pc, #44]	; (80035f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80035c8:	4b09      	ldr	r3, [pc, #36]	; (80035f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80035ce:	4b08      	ldr	r3, [pc, #32]	; (80035f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80035d0:	2201      	movs	r2, #1
 80035d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80035d4:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80035da:	4805      	ldr	r0, [pc, #20]	; (80035f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80035dc:	f000 ffdb 	bl	8004596 <HAL_PCD_Init>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80035e6:	f7fe ff31 	bl	800244c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80035ea:	bf00      	nop
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	20006820 	.word	0x20006820

080035f4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b0ae      	sub	sp, #184	; 0xb8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035fc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	605a      	str	r2, [r3, #4]
 8003606:	609a      	str	r2, [r3, #8]
 8003608:	60da      	str	r2, [r3, #12]
 800360a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800360c:	f107 0314 	add.w	r3, r7, #20
 8003610:	2290      	movs	r2, #144	; 0x90
 8003612:	2100      	movs	r1, #0
 8003614:	4618      	mov	r0, r3
 8003616:	f018 f935 	bl	801b884 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003622:	d159      	bne.n	80036d8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8003624:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003628:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800362a:	2300      	movs	r3, #0
 800362c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003630:	f107 0314 	add.w	r3, r7, #20
 8003634:	4618      	mov	r0, r3
 8003636:	f001 fe5d 	bl	80052f4 <HAL_RCCEx_PeriphCLKConfig>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8003640:	f7fe ff04 	bl	800244c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003644:	4b26      	ldr	r3, [pc, #152]	; (80036e0 <HAL_PCD_MspInit+0xec>)
 8003646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003648:	4a25      	ldr	r2, [pc, #148]	; (80036e0 <HAL_PCD_MspInit+0xec>)
 800364a:	f043 0301 	orr.w	r3, r3, #1
 800364e:	6313      	str	r3, [r2, #48]	; 0x30
 8003650:	4b23      	ldr	r3, [pc, #140]	; (80036e0 <HAL_PCD_MspInit+0xec>)
 8003652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	613b      	str	r3, [r7, #16]
 800365a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800365c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8003660:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003664:	2302      	movs	r3, #2
 8003666:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366a:	2300      	movs	r3, #0
 800366c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003670:	2303      	movs	r3, #3
 8003672:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003676:	230a      	movs	r3, #10
 8003678:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800367c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003680:	4619      	mov	r1, r3
 8003682:	4818      	ldr	r0, [pc, #96]	; (80036e4 <HAL_PCD_MspInit+0xf0>)
 8003684:	f000 fdaa 	bl	80041dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003688:	f44f 7300 	mov.w	r3, #512	; 0x200
 800368c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003690:	2300      	movs	r3, #0
 8003692:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003696:	2300      	movs	r3, #0
 8003698:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800369c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80036a0:	4619      	mov	r1, r3
 80036a2:	4810      	ldr	r0, [pc, #64]	; (80036e4 <HAL_PCD_MspInit+0xf0>)
 80036a4:	f000 fd9a 	bl	80041dc <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80036a8:	4b0d      	ldr	r3, [pc, #52]	; (80036e0 <HAL_PCD_MspInit+0xec>)
 80036aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ac:	4a0c      	ldr	r2, [pc, #48]	; (80036e0 <HAL_PCD_MspInit+0xec>)
 80036ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036b2:	6353      	str	r3, [r2, #52]	; 0x34
 80036b4:	4b0a      	ldr	r3, [pc, #40]	; (80036e0 <HAL_PCD_MspInit+0xec>)
 80036b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036bc:	60fb      	str	r3, [r7, #12]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	4b07      	ldr	r3, [pc, #28]	; (80036e0 <HAL_PCD_MspInit+0xec>)
 80036c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c4:	4a06      	ldr	r2, [pc, #24]	; (80036e0 <HAL_PCD_MspInit+0xec>)
 80036c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036ca:	6453      	str	r3, [r2, #68]	; 0x44
 80036cc:	4b04      	ldr	r3, [pc, #16]	; (80036e0 <HAL_PCD_MspInit+0xec>)
 80036ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036d4:	60bb      	str	r3, [r7, #8]
 80036d6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80036d8:	bf00      	nop
 80036da:	37b8      	adds	r7, #184	; 0xb8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40023800 	.word	0x40023800
 80036e4:	40020000 	.word	0x40020000

080036e8 <_Z14getCurrentTimev>:
}
long remap( long v,  long a1,  long b1,  long a2,  long b2, bool clamp = false){
  return round(remap((float) v, (float) a1, (float) b1, (float) a2, (float) b2, clamp));
}

uint32_t getCurrentTime() {
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 80036ec:	f000 f84e 	bl	800378c <HAL_GetTick>
 80036f0:	4603      	mov	r3, r0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	bd80      	pop	{r7, pc}
	...

080036f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80036f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003730 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80036fc:	480d      	ldr	r0, [pc, #52]	; (8003734 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80036fe:	490e      	ldr	r1, [pc, #56]	; (8003738 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003700:	4a0e      	ldr	r2, [pc, #56]	; (800373c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003704:	e002      	b.n	800370c <LoopCopyDataInit>

08003706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800370a:	3304      	adds	r3, #4

0800370c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800370c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800370e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003710:	d3f9      	bcc.n	8003706 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003712:	4a0b      	ldr	r2, [pc, #44]	; (8003740 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003714:	4c0b      	ldr	r4, [pc, #44]	; (8003744 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003718:	e001      	b.n	800371e <LoopFillZerobss>

0800371a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800371a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800371c:	3204      	adds	r2, #4

0800371e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800371e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003720:	d3fb      	bcc.n	800371a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003722:	f7ff f9a3 	bl	8002a6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003726:	f018 f9af 	bl	801ba88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800372a:	f7fe fdd9 	bl	80022e0 <main>
  bx  lr    
 800372e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003730:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8003734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003738:	20001fec 	.word	0x20001fec
  ldr r2, =_sidata
 800373c:	0801e6fc 	.word	0x0801e6fc
  ldr r2, =_sbss
 8003740:	20001ff0 	.word	0x20001ff0
  ldr r4, =_ebss
 8003744:	20010a44 	.word	0x20010a44

08003748 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003748:	e7fe      	b.n	8003748 <ADC_IRQHandler>

0800374a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800374e:	2003      	movs	r0, #3
 8003750:	f000 f8f9 	bl	8003946 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003754:	200f      	movs	r0, #15
 8003756:	f7ff f80b 	bl	8002770 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800375a:	f7fe ffe1 	bl	8002720 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	bd80      	pop	{r7, pc}

08003764 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003768:	4b06      	ldr	r3, [pc, #24]	; (8003784 <HAL_IncTick+0x20>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	461a      	mov	r2, r3
 800376e:	4b06      	ldr	r3, [pc, #24]	; (8003788 <HAL_IncTick+0x24>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4413      	add	r3, r2
 8003774:	4a04      	ldr	r2, [pc, #16]	; (8003788 <HAL_IncTick+0x24>)
 8003776:	6013      	str	r3, [r2, #0]
}
 8003778:	bf00      	nop
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	2000000c 	.word	0x2000000c
 8003788:	20006d28 	.word	0x20006d28

0800378c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  return uwTick;
 8003790:	4b03      	ldr	r3, [pc, #12]	; (80037a0 <HAL_GetTick+0x14>)
 8003792:	681b      	ldr	r3, [r3, #0]
}
 8003794:	4618      	mov	r0, r3
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	20006d28 	.word	0x20006d28

080037a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037ac:	f7ff ffee 	bl	800378c <HAL_GetTick>
 80037b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037bc:	d005      	beq.n	80037ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037be:	4b0a      	ldr	r3, [pc, #40]	; (80037e8 <HAL_Delay+0x44>)
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	461a      	mov	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4413      	add	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037ca:	bf00      	nop
 80037cc:	f7ff ffde 	bl	800378c <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d8f7      	bhi.n	80037cc <HAL_Delay+0x28>
  {
  }
}
 80037dc:	bf00      	nop
 80037de:	bf00      	nop
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	2000000c 	.word	0x2000000c

080037ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037fc:	4b0b      	ldr	r3, [pc, #44]	; (800382c <__NVIC_SetPriorityGrouping+0x40>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003808:	4013      	ands	r3, r2
 800380a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003814:	4b06      	ldr	r3, [pc, #24]	; (8003830 <__NVIC_SetPriorityGrouping+0x44>)
 8003816:	4313      	orrs	r3, r2
 8003818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800381a:	4a04      	ldr	r2, [pc, #16]	; (800382c <__NVIC_SetPriorityGrouping+0x40>)
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	60d3      	str	r3, [r2, #12]
}
 8003820:	bf00      	nop
 8003822:	3714      	adds	r7, #20
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr
 800382c:	e000ed00 	.word	0xe000ed00
 8003830:	05fa0000 	.word	0x05fa0000

08003834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003838:	4b04      	ldr	r3, [pc, #16]	; (800384c <__NVIC_GetPriorityGrouping+0x18>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	0a1b      	lsrs	r3, r3, #8
 800383e:	f003 0307 	and.w	r3, r3, #7
}
 8003842:	4618      	mov	r0, r3
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	e000ed00 	.word	0xe000ed00

08003850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	4603      	mov	r3, r0
 8003858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800385a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385e:	2b00      	cmp	r3, #0
 8003860:	db0b      	blt.n	800387a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003862:	79fb      	ldrb	r3, [r7, #7]
 8003864:	f003 021f 	and.w	r2, r3, #31
 8003868:	4907      	ldr	r1, [pc, #28]	; (8003888 <__NVIC_EnableIRQ+0x38>)
 800386a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386e:	095b      	lsrs	r3, r3, #5
 8003870:	2001      	movs	r0, #1
 8003872:	fa00 f202 	lsl.w	r2, r0, r2
 8003876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800387a:	bf00      	nop
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	e000e100 	.word	0xe000e100

0800388c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	4603      	mov	r3, r0
 8003894:	6039      	str	r1, [r7, #0]
 8003896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389c:	2b00      	cmp	r3, #0
 800389e:	db0a      	blt.n	80038b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	490c      	ldr	r1, [pc, #48]	; (80038d8 <__NVIC_SetPriority+0x4c>)
 80038a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038aa:	0112      	lsls	r2, r2, #4
 80038ac:	b2d2      	uxtb	r2, r2
 80038ae:	440b      	add	r3, r1
 80038b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038b4:	e00a      	b.n	80038cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	4908      	ldr	r1, [pc, #32]	; (80038dc <__NVIC_SetPriority+0x50>)
 80038bc:	79fb      	ldrb	r3, [r7, #7]
 80038be:	f003 030f 	and.w	r3, r3, #15
 80038c2:	3b04      	subs	r3, #4
 80038c4:	0112      	lsls	r2, r2, #4
 80038c6:	b2d2      	uxtb	r2, r2
 80038c8:	440b      	add	r3, r1
 80038ca:	761a      	strb	r2, [r3, #24]
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr
 80038d8:	e000e100 	.word	0xe000e100
 80038dc:	e000ed00 	.word	0xe000ed00

080038e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b089      	sub	sp, #36	; 0x24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	f1c3 0307 	rsb	r3, r3, #7
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	bf28      	it	cs
 80038fe:	2304      	movcs	r3, #4
 8003900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	3304      	adds	r3, #4
 8003906:	2b06      	cmp	r3, #6
 8003908:	d902      	bls.n	8003910 <NVIC_EncodePriority+0x30>
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	3b03      	subs	r3, #3
 800390e:	e000      	b.n	8003912 <NVIC_EncodePriority+0x32>
 8003910:	2300      	movs	r3, #0
 8003912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003914:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	fa02 f303 	lsl.w	r3, r2, r3
 800391e:	43da      	mvns	r2, r3
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	401a      	ands	r2, r3
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003928:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	fa01 f303 	lsl.w	r3, r1, r3
 8003932:	43d9      	mvns	r1, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003938:	4313      	orrs	r3, r2
         );
}
 800393a:	4618      	mov	r0, r3
 800393c:	3724      	adds	r7, #36	; 0x24
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b082      	sub	sp, #8
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7ff ff4c 	bl	80037ec <__NVIC_SetPriorityGrouping>
}
 8003954:	bf00      	nop
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
 8003968:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800396a:	2300      	movs	r3, #0
 800396c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800396e:	f7ff ff61 	bl	8003834 <__NVIC_GetPriorityGrouping>
 8003972:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	68b9      	ldr	r1, [r7, #8]
 8003978:	6978      	ldr	r0, [r7, #20]
 800397a:	f7ff ffb1 	bl	80038e0 <NVIC_EncodePriority>
 800397e:	4602      	mov	r2, r0
 8003980:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003984:	4611      	mov	r1, r2
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff ff80 	bl	800388c <__NVIC_SetPriority>
}
 800398c:	bf00      	nop
 800398e:	3718      	adds	r7, #24
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	4603      	mov	r3, r0
 800399c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800399e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7ff ff54 	bl	8003850 <__NVIC_EnableIRQ>
}
 80039a8:	bf00      	nop
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039b8:	2300      	movs	r3, #0
 80039ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039bc:	f7ff fee6 	bl	800378c <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e099      	b.n	8003b00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2202      	movs	r2, #2
 80039d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 0201 	bic.w	r2, r2, #1
 80039ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039ec:	e00f      	b.n	8003a0e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039ee:	f7ff fecd 	bl	800378c <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b05      	cmp	r3, #5
 80039fa:	d908      	bls.n	8003a0e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2220      	movs	r2, #32
 8003a00:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2203      	movs	r2, #3
 8003a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e078      	b.n	8003b00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1e8      	bne.n	80039ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	4b38      	ldr	r3, [pc, #224]	; (8003b08 <HAL_DMA_Init+0x158>)
 8003a28:	4013      	ands	r3, r2
 8003a2a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	2b04      	cmp	r3, #4
 8003a66:	d107      	bne.n	8003a78 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a70:	4313      	orrs	r3, r2
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	f023 0307 	bic.w	r3, r3, #7
 8003a8e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	d117      	bne.n	8003ad2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00e      	beq.n	8003ad2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 fb15 	bl	80040e4 <DMA_CheckFifoParam>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d008      	beq.n	8003ad2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2240      	movs	r2, #64	; 0x40
 8003ac4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e016      	b.n	8003b00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 facc 	bl	8004078 <DMA_CalcBaseAndBitshift>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae8:	223f      	movs	r2, #63	; 0x3f
 8003aea:	409a      	lsls	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3718      	adds	r7, #24
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	e010803f 	.word	0xe010803f

08003b0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
 8003b18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b22:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d101      	bne.n	8003b32 <HAL_DMA_Start_IT+0x26>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	e048      	b.n	8003bc4 <HAL_DMA_Start_IT+0xb8>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d137      	bne.n	8003bb6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2202      	movs	r2, #2
 8003b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	68b9      	ldr	r1, [r7, #8]
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f000 fa5e 	bl	800401c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b64:	223f      	movs	r2, #63	; 0x3f
 8003b66:	409a      	lsls	r2, r3
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0216 	orr.w	r2, r2, #22
 8003b7a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	695a      	ldr	r2, [r3, #20]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b8a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d007      	beq.n	8003ba4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f042 0208 	orr.w	r2, r2, #8
 8003ba2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 0201 	orr.w	r2, r2, #1
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	e005      	b.n	8003bc2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3718      	adds	r7, #24
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003bda:	f7ff fdd7 	bl	800378c <HAL_GetTick>
 8003bde:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d008      	beq.n	8003bfe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2280      	movs	r2, #128	; 0x80
 8003bf0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e052      	b.n	8003ca4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 0216 	bic.w	r2, r2, #22
 8003c0c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	695a      	ldr	r2, [r3, #20]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c1c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d103      	bne.n	8003c2e <HAL_DMA_Abort+0x62>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d007      	beq.n	8003c3e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 0208 	bic.w	r2, r2, #8
 8003c3c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 0201 	bic.w	r2, r2, #1
 8003c4c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c4e:	e013      	b.n	8003c78 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c50:	f7ff fd9c 	bl	800378c <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b05      	cmp	r3, #5
 8003c5c:	d90c      	bls.n	8003c78 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2220      	movs	r2, #32
 8003c62:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2203      	movs	r2, #3
 8003c68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e015      	b.n	8003ca4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1e4      	bne.n	8003c50 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c8a:	223f      	movs	r2, #63	; 0x3f
 8003c8c:	409a      	lsls	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d004      	beq.n	8003cca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2280      	movs	r2, #128	; 0x80
 8003cc4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e00c      	b.n	8003ce4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2205      	movs	r2, #5
 8003cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 0201 	bic.w	r2, r2, #1
 8003ce0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003cfc:	4b8e      	ldr	r3, [pc, #568]	; (8003f38 <HAL_DMA_IRQHandler+0x248>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a8e      	ldr	r2, [pc, #568]	; (8003f3c <HAL_DMA_IRQHandler+0x24c>)
 8003d02:	fba2 2303 	umull	r2, r3, r2, r3
 8003d06:	0a9b      	lsrs	r3, r3, #10
 8003d08:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d1a:	2208      	movs	r2, #8
 8003d1c:	409a      	lsls	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	4013      	ands	r3, r2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d01a      	beq.n	8003d5c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0304 	and.w	r3, r3, #4
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d013      	beq.n	8003d5c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 0204 	bic.w	r2, r2, #4
 8003d42:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d48:	2208      	movs	r2, #8
 8003d4a:	409a      	lsls	r2, r3
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d54:	f043 0201 	orr.w	r2, r3, #1
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d60:	2201      	movs	r2, #1
 8003d62:	409a      	lsls	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	4013      	ands	r3, r2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d012      	beq.n	8003d92 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00b      	beq.n	8003d92 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d7e:	2201      	movs	r2, #1
 8003d80:	409a      	lsls	r2, r3
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8a:	f043 0202 	orr.w	r2, r3, #2
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d96:	2204      	movs	r2, #4
 8003d98:	409a      	lsls	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d012      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00b      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db4:	2204      	movs	r2, #4
 8003db6:	409a      	lsls	r2, r3
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc0:	f043 0204 	orr.w	r2, r3, #4
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dcc:	2210      	movs	r2, #16
 8003dce:	409a      	lsls	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d043      	beq.n	8003e60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0308 	and.w	r3, r3, #8
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d03c      	beq.n	8003e60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dea:	2210      	movs	r2, #16
 8003dec:	409a      	lsls	r2, r3
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d018      	beq.n	8003e32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d108      	bne.n	8003e20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d024      	beq.n	8003e60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	4798      	blx	r3
 8003e1e:	e01f      	b.n	8003e60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d01b      	beq.n	8003e60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	4798      	blx	r3
 8003e30:	e016      	b.n	8003e60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d107      	bne.n	8003e50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0208 	bic.w	r2, r2, #8
 8003e4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d003      	beq.n	8003e60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e64:	2220      	movs	r2, #32
 8003e66:	409a      	lsls	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 808f 	beq.w	8003f90 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0310 	and.w	r3, r3, #16
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f000 8087 	beq.w	8003f90 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e86:	2220      	movs	r2, #32
 8003e88:	409a      	lsls	r2, r3
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b05      	cmp	r3, #5
 8003e98:	d136      	bne.n	8003f08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 0216 	bic.w	r2, r2, #22
 8003ea8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	695a      	ldr	r2, [r3, #20]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003eb8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d103      	bne.n	8003eca <HAL_DMA_IRQHandler+0x1da>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d007      	beq.n	8003eda <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0208 	bic.w	r2, r2, #8
 8003ed8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ede:	223f      	movs	r2, #63	; 0x3f
 8003ee0:	409a      	lsls	r2, r3
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d07e      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	4798      	blx	r3
        }
        return;
 8003f06:	e079      	b.n	8003ffc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d01d      	beq.n	8003f52 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10d      	bne.n	8003f40 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d031      	beq.n	8003f90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	4798      	blx	r3
 8003f34:	e02c      	b.n	8003f90 <HAL_DMA_IRQHandler+0x2a0>
 8003f36:	bf00      	nop
 8003f38:	20000004 	.word	0x20000004
 8003f3c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d023      	beq.n	8003f90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	4798      	blx	r3
 8003f50:	e01e      	b.n	8003f90 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d10f      	bne.n	8003f80 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0210 	bic.w	r2, r2, #16
 8003f6e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d003      	beq.n	8003f90 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d032      	beq.n	8003ffe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d022      	beq.n	8003fea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2205      	movs	r2, #5
 8003fa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0201 	bic.w	r2, r2, #1
 8003fba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	60bb      	str	r3, [r7, #8]
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d307      	bcc.n	8003fd8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1f2      	bne.n	8003fbc <HAL_DMA_IRQHandler+0x2cc>
 8003fd6:	e000      	b.n	8003fda <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003fd8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d005      	beq.n	8003ffe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	4798      	blx	r3
 8003ffa:	e000      	b.n	8003ffe <HAL_DMA_IRQHandler+0x30e>
        return;
 8003ffc:	bf00      	nop
    }
  }
}
 8003ffe:	3718      	adds	r7, #24
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004010:	4618      	mov	r0, r3
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
 8004028:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004038:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	2b40      	cmp	r3, #64	; 0x40
 8004048:	d108      	bne.n	800405c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800405a:	e007      	b.n	800406c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	60da      	str	r2, [r3, #12]
}
 800406c:	bf00      	nop
 800406e:	3714      	adds	r7, #20
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	b2db      	uxtb	r3, r3
 8004086:	3b10      	subs	r3, #16
 8004088:	4a13      	ldr	r2, [pc, #76]	; (80040d8 <DMA_CalcBaseAndBitshift+0x60>)
 800408a:	fba2 2303 	umull	r2, r3, r2, r3
 800408e:	091b      	lsrs	r3, r3, #4
 8004090:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004092:	4a12      	ldr	r2, [pc, #72]	; (80040dc <DMA_CalcBaseAndBitshift+0x64>)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	4413      	add	r3, r2
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	461a      	mov	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2b03      	cmp	r3, #3
 80040a4:	d908      	bls.n	80040b8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	461a      	mov	r2, r3
 80040ac:	4b0c      	ldr	r3, [pc, #48]	; (80040e0 <DMA_CalcBaseAndBitshift+0x68>)
 80040ae:	4013      	ands	r3, r2
 80040b0:	1d1a      	adds	r2, r3, #4
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	659a      	str	r2, [r3, #88]	; 0x58
 80040b6:	e006      	b.n	80040c6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	461a      	mov	r2, r3
 80040be:	4b08      	ldr	r3, [pc, #32]	; (80040e0 <DMA_CalcBaseAndBitshift+0x68>)
 80040c0:	4013      	ands	r3, r2
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	aaaaaaab 	.word	0xaaaaaaab
 80040dc:	0801c998 	.word	0x0801c998
 80040e0:	fffffc00 	.word	0xfffffc00

080040e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040ec:	2300      	movs	r3, #0
 80040ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d11f      	bne.n	800413e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	2b03      	cmp	r3, #3
 8004102:	d856      	bhi.n	80041b2 <DMA_CheckFifoParam+0xce>
 8004104:	a201      	add	r2, pc, #4	; (adr r2, 800410c <DMA_CheckFifoParam+0x28>)
 8004106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410a:	bf00      	nop
 800410c:	0800411d 	.word	0x0800411d
 8004110:	0800412f 	.word	0x0800412f
 8004114:	0800411d 	.word	0x0800411d
 8004118:	080041b3 	.word	0x080041b3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004120:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d046      	beq.n	80041b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800412c:	e043      	b.n	80041b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004132:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004136:	d140      	bne.n	80041ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800413c:	e03d      	b.n	80041ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004146:	d121      	bne.n	800418c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	2b03      	cmp	r3, #3
 800414c:	d837      	bhi.n	80041be <DMA_CheckFifoParam+0xda>
 800414e:	a201      	add	r2, pc, #4	; (adr r2, 8004154 <DMA_CheckFifoParam+0x70>)
 8004150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004154:	08004165 	.word	0x08004165
 8004158:	0800416b 	.word	0x0800416b
 800415c:	08004165 	.word	0x08004165
 8004160:	0800417d 	.word	0x0800417d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	73fb      	strb	r3, [r7, #15]
      break;
 8004168:	e030      	b.n	80041cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d025      	beq.n	80041c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800417a:	e022      	b.n	80041c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004180:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004184:	d11f      	bne.n	80041c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800418a:	e01c      	b.n	80041c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	2b02      	cmp	r3, #2
 8004190:	d903      	bls.n	800419a <DMA_CheckFifoParam+0xb6>
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	2b03      	cmp	r3, #3
 8004196:	d003      	beq.n	80041a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004198:	e018      	b.n	80041cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	73fb      	strb	r3, [r7, #15]
      break;
 800419e:	e015      	b.n	80041cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00e      	beq.n	80041ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	73fb      	strb	r3, [r7, #15]
      break;
 80041b0:	e00b      	b.n	80041ca <DMA_CheckFifoParam+0xe6>
      break;
 80041b2:	bf00      	nop
 80041b4:	e00a      	b.n	80041cc <DMA_CheckFifoParam+0xe8>
      break;
 80041b6:	bf00      	nop
 80041b8:	e008      	b.n	80041cc <DMA_CheckFifoParam+0xe8>
      break;
 80041ba:	bf00      	nop
 80041bc:	e006      	b.n	80041cc <DMA_CheckFifoParam+0xe8>
      break;
 80041be:	bf00      	nop
 80041c0:	e004      	b.n	80041cc <DMA_CheckFifoParam+0xe8>
      break;
 80041c2:	bf00      	nop
 80041c4:	e002      	b.n	80041cc <DMA_CheckFifoParam+0xe8>
      break;   
 80041c6:	bf00      	nop
 80041c8:	e000      	b.n	80041cc <DMA_CheckFifoParam+0xe8>
      break;
 80041ca:	bf00      	nop
    }
  } 
  
  return status; 
 80041cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3714      	adds	r7, #20
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop

080041dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041dc:	b480      	push	{r7}
 80041de:	b089      	sub	sp, #36	; 0x24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80041e6:	2300      	movs	r3, #0
 80041e8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80041ea:	2300      	movs	r3, #0
 80041ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80041ee:	2300      	movs	r3, #0
 80041f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80041f2:	2300      	movs	r3, #0
 80041f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80041f6:	2300      	movs	r3, #0
 80041f8:	61fb      	str	r3, [r7, #28]
 80041fa:	e175      	b.n	80044e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80041fc:	2201      	movs	r2, #1
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	fa02 f303 	lsl.w	r3, r2, r3
 8004204:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	4013      	ands	r3, r2
 800420e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	429a      	cmp	r2, r3
 8004216:	f040 8164 	bne.w	80044e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f003 0303 	and.w	r3, r3, #3
 8004222:	2b01      	cmp	r3, #1
 8004224:	d005      	beq.n	8004232 <HAL_GPIO_Init+0x56>
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f003 0303 	and.w	r3, r3, #3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d130      	bne.n	8004294 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	2203      	movs	r2, #3
 800423e:	fa02 f303 	lsl.w	r3, r2, r3
 8004242:	43db      	mvns	r3, r3
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	4013      	ands	r3, r2
 8004248:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	68da      	ldr	r2, [r3, #12]
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	fa02 f303 	lsl.w	r3, r2, r3
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	4313      	orrs	r3, r2
 800425a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004268:	2201      	movs	r2, #1
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	fa02 f303 	lsl.w	r3, r2, r3
 8004270:	43db      	mvns	r3, r3
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	4013      	ands	r3, r2
 8004276:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	091b      	lsrs	r3, r3, #4
 800427e:	f003 0201 	and.w	r2, r3, #1
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	fa02 f303 	lsl.w	r3, r2, r3
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	4313      	orrs	r3, r2
 800428c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f003 0303 	and.w	r3, r3, #3
 800429c:	2b03      	cmp	r3, #3
 800429e:	d017      	beq.n	80042d0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	2203      	movs	r2, #3
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	43db      	mvns	r3, r3
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	4013      	ands	r3, r2
 80042b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	fa02 f303 	lsl.w	r3, r2, r3
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f003 0303 	and.w	r3, r3, #3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d123      	bne.n	8004324 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	08da      	lsrs	r2, r3, #3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	3208      	adds	r2, #8
 80042e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	f003 0307 	and.w	r3, r3, #7
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	220f      	movs	r2, #15
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	43db      	mvns	r3, r3
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	4013      	ands	r3, r2
 80042fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	691a      	ldr	r2, [r3, #16]
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	f003 0307 	and.w	r3, r3, #7
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	4313      	orrs	r3, r2
 8004314:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	08da      	lsrs	r2, r3, #3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	3208      	adds	r2, #8
 800431e:	69b9      	ldr	r1, [r7, #24]
 8004320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	2203      	movs	r2, #3
 8004330:	fa02 f303 	lsl.w	r3, r2, r3
 8004334:	43db      	mvns	r3, r3
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	4013      	ands	r3, r2
 800433a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f003 0203 	and.w	r2, r3, #3
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	fa02 f303 	lsl.w	r3, r2, r3
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	4313      	orrs	r3, r2
 8004350:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 80be 	beq.w	80044e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004366:	4b66      	ldr	r3, [pc, #408]	; (8004500 <HAL_GPIO_Init+0x324>)
 8004368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436a:	4a65      	ldr	r2, [pc, #404]	; (8004500 <HAL_GPIO_Init+0x324>)
 800436c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004370:	6453      	str	r3, [r2, #68]	; 0x44
 8004372:	4b63      	ldr	r3, [pc, #396]	; (8004500 <HAL_GPIO_Init+0x324>)
 8004374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800437a:	60fb      	str	r3, [r7, #12]
 800437c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800437e:	4a61      	ldr	r2, [pc, #388]	; (8004504 <HAL_GPIO_Init+0x328>)
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	089b      	lsrs	r3, r3, #2
 8004384:	3302      	adds	r3, #2
 8004386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800438a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	220f      	movs	r2, #15
 8004396:	fa02 f303 	lsl.w	r3, r2, r3
 800439a:	43db      	mvns	r3, r3
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	4013      	ands	r3, r2
 80043a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a58      	ldr	r2, [pc, #352]	; (8004508 <HAL_GPIO_Init+0x32c>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d037      	beq.n	800441a <HAL_GPIO_Init+0x23e>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a57      	ldr	r2, [pc, #348]	; (800450c <HAL_GPIO_Init+0x330>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d031      	beq.n	8004416 <HAL_GPIO_Init+0x23a>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a56      	ldr	r2, [pc, #344]	; (8004510 <HAL_GPIO_Init+0x334>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d02b      	beq.n	8004412 <HAL_GPIO_Init+0x236>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a55      	ldr	r2, [pc, #340]	; (8004514 <HAL_GPIO_Init+0x338>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d025      	beq.n	800440e <HAL_GPIO_Init+0x232>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a54      	ldr	r2, [pc, #336]	; (8004518 <HAL_GPIO_Init+0x33c>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d01f      	beq.n	800440a <HAL_GPIO_Init+0x22e>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a53      	ldr	r2, [pc, #332]	; (800451c <HAL_GPIO_Init+0x340>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d019      	beq.n	8004406 <HAL_GPIO_Init+0x22a>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a52      	ldr	r2, [pc, #328]	; (8004520 <HAL_GPIO_Init+0x344>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d013      	beq.n	8004402 <HAL_GPIO_Init+0x226>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a51      	ldr	r2, [pc, #324]	; (8004524 <HAL_GPIO_Init+0x348>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d00d      	beq.n	80043fe <HAL_GPIO_Init+0x222>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a50      	ldr	r2, [pc, #320]	; (8004528 <HAL_GPIO_Init+0x34c>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d007      	beq.n	80043fa <HAL_GPIO_Init+0x21e>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a4f      	ldr	r2, [pc, #316]	; (800452c <HAL_GPIO_Init+0x350>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d101      	bne.n	80043f6 <HAL_GPIO_Init+0x21a>
 80043f2:	2309      	movs	r3, #9
 80043f4:	e012      	b.n	800441c <HAL_GPIO_Init+0x240>
 80043f6:	230a      	movs	r3, #10
 80043f8:	e010      	b.n	800441c <HAL_GPIO_Init+0x240>
 80043fa:	2308      	movs	r3, #8
 80043fc:	e00e      	b.n	800441c <HAL_GPIO_Init+0x240>
 80043fe:	2307      	movs	r3, #7
 8004400:	e00c      	b.n	800441c <HAL_GPIO_Init+0x240>
 8004402:	2306      	movs	r3, #6
 8004404:	e00a      	b.n	800441c <HAL_GPIO_Init+0x240>
 8004406:	2305      	movs	r3, #5
 8004408:	e008      	b.n	800441c <HAL_GPIO_Init+0x240>
 800440a:	2304      	movs	r3, #4
 800440c:	e006      	b.n	800441c <HAL_GPIO_Init+0x240>
 800440e:	2303      	movs	r3, #3
 8004410:	e004      	b.n	800441c <HAL_GPIO_Init+0x240>
 8004412:	2302      	movs	r3, #2
 8004414:	e002      	b.n	800441c <HAL_GPIO_Init+0x240>
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <HAL_GPIO_Init+0x240>
 800441a:	2300      	movs	r3, #0
 800441c:	69fa      	ldr	r2, [r7, #28]
 800441e:	f002 0203 	and.w	r2, r2, #3
 8004422:	0092      	lsls	r2, r2, #2
 8004424:	4093      	lsls	r3, r2
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	4313      	orrs	r3, r2
 800442a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800442c:	4935      	ldr	r1, [pc, #212]	; (8004504 <HAL_GPIO_Init+0x328>)
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	089b      	lsrs	r3, r3, #2
 8004432:	3302      	adds	r3, #2
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800443a:	4b3d      	ldr	r3, [pc, #244]	; (8004530 <HAL_GPIO_Init+0x354>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	43db      	mvns	r3, r3
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	4013      	ands	r3, r2
 8004448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004456:	69ba      	ldr	r2, [r7, #24]
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	4313      	orrs	r3, r2
 800445c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800445e:	4a34      	ldr	r2, [pc, #208]	; (8004530 <HAL_GPIO_Init+0x354>)
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004464:	4b32      	ldr	r3, [pc, #200]	; (8004530 <HAL_GPIO_Init+0x354>)
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	43db      	mvns	r3, r3
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	4013      	ands	r3, r2
 8004472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d003      	beq.n	8004488 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	4313      	orrs	r3, r2
 8004486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004488:	4a29      	ldr	r2, [pc, #164]	; (8004530 <HAL_GPIO_Init+0x354>)
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800448e:	4b28      	ldr	r3, [pc, #160]	; (8004530 <HAL_GPIO_Init+0x354>)
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	43db      	mvns	r3, r3
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	4013      	ands	r3, r2
 800449c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80044aa:	69ba      	ldr	r2, [r7, #24]
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044b2:	4a1f      	ldr	r2, [pc, #124]	; (8004530 <HAL_GPIO_Init+0x354>)
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044b8:	4b1d      	ldr	r3, [pc, #116]	; (8004530 <HAL_GPIO_Init+0x354>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	43db      	mvns	r3, r3
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	4013      	ands	r3, r2
 80044c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d003      	beq.n	80044dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	4313      	orrs	r3, r2
 80044da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044dc:	4a14      	ldr	r2, [pc, #80]	; (8004530 <HAL_GPIO_Init+0x354>)
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	3301      	adds	r3, #1
 80044e6:	61fb      	str	r3, [r7, #28]
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	2b0f      	cmp	r3, #15
 80044ec:	f67f ae86 	bls.w	80041fc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80044f0:	bf00      	nop
 80044f2:	bf00      	nop
 80044f4:	3724      	adds	r7, #36	; 0x24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	40023800 	.word	0x40023800
 8004504:	40013800 	.word	0x40013800
 8004508:	40020000 	.word	0x40020000
 800450c:	40020400 	.word	0x40020400
 8004510:	40020800 	.word	0x40020800
 8004514:	40020c00 	.word	0x40020c00
 8004518:	40021000 	.word	0x40021000
 800451c:	40021400 	.word	0x40021400
 8004520:	40021800 	.word	0x40021800
 8004524:	40021c00 	.word	0x40021c00
 8004528:	40022000 	.word	0x40022000
 800452c:	40022400 	.word	0x40022400
 8004530:	40013c00 	.word	0x40013c00

08004534 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	460b      	mov	r3, r1
 800453e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	691a      	ldr	r2, [r3, #16]
 8004544:	887b      	ldrh	r3, [r7, #2]
 8004546:	4013      	ands	r3, r2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d002      	beq.n	8004552 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800454c:	2301      	movs	r3, #1
 800454e:	73fb      	strb	r3, [r7, #15]
 8004550:	e001      	b.n	8004556 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004552:	2300      	movs	r3, #0
 8004554:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004556:	7bfb      	ldrb	r3, [r7, #15]
}
 8004558:	4618      	mov	r0, r3
 800455a:	3714      	adds	r7, #20
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	460b      	mov	r3, r1
 800456e:	807b      	strh	r3, [r7, #2]
 8004570:	4613      	mov	r3, r2
 8004572:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004574:	787b      	ldrb	r3, [r7, #1]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800457a:	887a      	ldrh	r2, [r7, #2]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004580:	e003      	b.n	800458a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004582:	887b      	ldrh	r3, [r7, #2]
 8004584:	041a      	lsls	r2, r3, #16
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	619a      	str	r2, [r3, #24]
}
 800458a:	bf00      	nop
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr

08004596 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004596:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004598:	b08f      	sub	sp, #60	; 0x3c
 800459a:	af0a      	add	r7, sp, #40	; 0x28
 800459c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d101      	bne.n	80045a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e116      	b.n	80047d6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d106      	bne.n	80045c8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7ff f816 	bl	80035f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2203      	movs	r2, #3
 80045cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d102      	bne.n	80045e2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f003 ff00 	bl	80083ec <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	603b      	str	r3, [r7, #0]
 80045f2:	687e      	ldr	r6, [r7, #4]
 80045f4:	466d      	mov	r5, sp
 80045f6:	f106 0410 	add.w	r4, r6, #16
 80045fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004600:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004602:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004606:	e885 0003 	stmia.w	r5, {r0, r1}
 800460a:	1d33      	adds	r3, r6, #4
 800460c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800460e:	6838      	ldr	r0, [r7, #0]
 8004610:	f003 fe94 	bl	800833c <USB_CoreInit>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d005      	beq.n	8004626 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2202      	movs	r2, #2
 800461e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e0d7      	b.n	80047d6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2100      	movs	r1, #0
 800462c:	4618      	mov	r0, r3
 800462e:	f003 feee 	bl	800840e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004632:	2300      	movs	r3, #0
 8004634:	73fb      	strb	r3, [r7, #15]
 8004636:	e04a      	b.n	80046ce <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004638:	7bfa      	ldrb	r2, [r7, #15]
 800463a:	6879      	ldr	r1, [r7, #4]
 800463c:	4613      	mov	r3, r2
 800463e:	00db      	lsls	r3, r3, #3
 8004640:	4413      	add	r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	440b      	add	r3, r1
 8004646:	333d      	adds	r3, #61	; 0x3d
 8004648:	2201      	movs	r2, #1
 800464a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800464c:	7bfa      	ldrb	r2, [r7, #15]
 800464e:	6879      	ldr	r1, [r7, #4]
 8004650:	4613      	mov	r3, r2
 8004652:	00db      	lsls	r3, r3, #3
 8004654:	4413      	add	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	440b      	add	r3, r1
 800465a:	333c      	adds	r3, #60	; 0x3c
 800465c:	7bfa      	ldrb	r2, [r7, #15]
 800465e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004660:	7bfa      	ldrb	r2, [r7, #15]
 8004662:	7bfb      	ldrb	r3, [r7, #15]
 8004664:	b298      	uxth	r0, r3
 8004666:	6879      	ldr	r1, [r7, #4]
 8004668:	4613      	mov	r3, r2
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	4413      	add	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	440b      	add	r3, r1
 8004672:	3344      	adds	r3, #68	; 0x44
 8004674:	4602      	mov	r2, r0
 8004676:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004678:	7bfa      	ldrb	r2, [r7, #15]
 800467a:	6879      	ldr	r1, [r7, #4]
 800467c:	4613      	mov	r3, r2
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	4413      	add	r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	440b      	add	r3, r1
 8004686:	3340      	adds	r3, #64	; 0x40
 8004688:	2200      	movs	r2, #0
 800468a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800468c:	7bfa      	ldrb	r2, [r7, #15]
 800468e:	6879      	ldr	r1, [r7, #4]
 8004690:	4613      	mov	r3, r2
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	4413      	add	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	440b      	add	r3, r1
 800469a:	3348      	adds	r3, #72	; 0x48
 800469c:	2200      	movs	r2, #0
 800469e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80046a0:	7bfa      	ldrb	r2, [r7, #15]
 80046a2:	6879      	ldr	r1, [r7, #4]
 80046a4:	4613      	mov	r3, r2
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	4413      	add	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	440b      	add	r3, r1
 80046ae:	334c      	adds	r3, #76	; 0x4c
 80046b0:	2200      	movs	r2, #0
 80046b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80046b4:	7bfa      	ldrb	r2, [r7, #15]
 80046b6:	6879      	ldr	r1, [r7, #4]
 80046b8:	4613      	mov	r3, r2
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	4413      	add	r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	440b      	add	r3, r1
 80046c2:	3354      	adds	r3, #84	; 0x54
 80046c4:	2200      	movs	r2, #0
 80046c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
 80046ca:	3301      	adds	r3, #1
 80046cc:	73fb      	strb	r3, [r7, #15]
 80046ce:	7bfa      	ldrb	r2, [r7, #15]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d3af      	bcc.n	8004638 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046d8:	2300      	movs	r3, #0
 80046da:	73fb      	strb	r3, [r7, #15]
 80046dc:	e044      	b.n	8004768 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80046de:	7bfa      	ldrb	r2, [r7, #15]
 80046e0:	6879      	ldr	r1, [r7, #4]
 80046e2:	4613      	mov	r3, r2
 80046e4:	00db      	lsls	r3, r3, #3
 80046e6:	4413      	add	r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	440b      	add	r3, r1
 80046ec:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80046f0:	2200      	movs	r2, #0
 80046f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80046f4:	7bfa      	ldrb	r2, [r7, #15]
 80046f6:	6879      	ldr	r1, [r7, #4]
 80046f8:	4613      	mov	r3, r2
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	4413      	add	r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	440b      	add	r3, r1
 8004702:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004706:	7bfa      	ldrb	r2, [r7, #15]
 8004708:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800470a:	7bfa      	ldrb	r2, [r7, #15]
 800470c:	6879      	ldr	r1, [r7, #4]
 800470e:	4613      	mov	r3, r2
 8004710:	00db      	lsls	r3, r3, #3
 8004712:	4413      	add	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	440b      	add	r3, r1
 8004718:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800471c:	2200      	movs	r2, #0
 800471e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004720:	7bfa      	ldrb	r2, [r7, #15]
 8004722:	6879      	ldr	r1, [r7, #4]
 8004724:	4613      	mov	r3, r2
 8004726:	00db      	lsls	r3, r3, #3
 8004728:	4413      	add	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	440b      	add	r3, r1
 800472e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004732:	2200      	movs	r2, #0
 8004734:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004736:	7bfa      	ldrb	r2, [r7, #15]
 8004738:	6879      	ldr	r1, [r7, #4]
 800473a:	4613      	mov	r3, r2
 800473c:	00db      	lsls	r3, r3, #3
 800473e:	4413      	add	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	440b      	add	r3, r1
 8004744:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004748:	2200      	movs	r2, #0
 800474a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800474c:	7bfa      	ldrb	r2, [r7, #15]
 800474e:	6879      	ldr	r1, [r7, #4]
 8004750:	4613      	mov	r3, r2
 8004752:	00db      	lsls	r3, r3, #3
 8004754:	4413      	add	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	440b      	add	r3, r1
 800475a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800475e:	2200      	movs	r2, #0
 8004760:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004762:	7bfb      	ldrb	r3, [r7, #15]
 8004764:	3301      	adds	r3, #1
 8004766:	73fb      	strb	r3, [r7, #15]
 8004768:	7bfa      	ldrb	r2, [r7, #15]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	429a      	cmp	r2, r3
 8004770:	d3b5      	bcc.n	80046de <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	603b      	str	r3, [r7, #0]
 8004778:	687e      	ldr	r6, [r7, #4]
 800477a:	466d      	mov	r5, sp
 800477c:	f106 0410 	add.w	r4, r6, #16
 8004780:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004782:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004784:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004786:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004788:	e894 0003 	ldmia.w	r4, {r0, r1}
 800478c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004790:	1d33      	adds	r3, r6, #4
 8004792:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004794:	6838      	ldr	r0, [r7, #0]
 8004796:	f003 fe87 	bl	80084a8 <USB_DevInit>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d005      	beq.n	80047ac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2202      	movs	r2, #2
 80047a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e014      	b.n	80047d6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d102      	bne.n	80047ca <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 f80b 	bl	80047e0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f004 f845 	bl	800885e <USB_DevDisconnect>

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3714      	adds	r7, #20
 80047da:	46bd      	mov	sp, r7
 80047dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080047e0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800480e:	4b05      	ldr	r3, [pc, #20]	; (8004824 <HAL_PCDEx_ActivateLPM+0x44>)
 8004810:	4313      	orrs	r3, r2
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3714      	adds	r7, #20
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	10000003 	.word	0x10000003

08004828 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004828:	b480      	push	{r7}
 800482a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800482c:	4b05      	ldr	r3, [pc, #20]	; (8004844 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a04      	ldr	r2, [pc, #16]	; (8004844 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004836:	6013      	str	r3, [r2, #0]
}
 8004838:	bf00      	nop
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	40007000 	.word	0x40007000

08004848 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800484e:	2300      	movs	r3, #0
 8004850:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004852:	4b23      	ldr	r3, [pc, #140]	; (80048e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004856:	4a22      	ldr	r2, [pc, #136]	; (80048e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800485c:	6413      	str	r3, [r2, #64]	; 0x40
 800485e:	4b20      	ldr	r3, [pc, #128]	; (80048e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004866:	603b      	str	r3, [r7, #0]
 8004868:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800486a:	4b1e      	ldr	r3, [pc, #120]	; (80048e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a1d      	ldr	r2, [pc, #116]	; (80048e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004874:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004876:	f7fe ff89 	bl	800378c <HAL_GetTick>
 800487a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800487c:	e009      	b.n	8004892 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800487e:	f7fe ff85 	bl	800378c <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800488c:	d901      	bls.n	8004892 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e022      	b.n	80048d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004892:	4b14      	ldr	r3, [pc, #80]	; (80048e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800489a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800489e:	d1ee      	bne.n	800487e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80048a0:	4b10      	ldr	r3, [pc, #64]	; (80048e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a0f      	ldr	r2, [pc, #60]	; (80048e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80048a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048ac:	f7fe ff6e 	bl	800378c <HAL_GetTick>
 80048b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80048b2:	e009      	b.n	80048c8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80048b4:	f7fe ff6a 	bl	800378c <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048c2:	d901      	bls.n	80048c8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e007      	b.n	80048d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80048c8:	4b06      	ldr	r3, [pc, #24]	; (80048e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048d4:	d1ee      	bne.n	80048b4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3708      	adds	r7, #8
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	40023800 	.word	0x40023800
 80048e4:	40007000 	.word	0x40007000

080048e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80048f0:	2300      	movs	r3, #0
 80048f2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e29b      	b.n	8004e36 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	f000 8087 	beq.w	8004a1a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800490c:	4b96      	ldr	r3, [pc, #600]	; (8004b68 <HAL_RCC_OscConfig+0x280>)
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f003 030c 	and.w	r3, r3, #12
 8004914:	2b04      	cmp	r3, #4
 8004916:	d00c      	beq.n	8004932 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004918:	4b93      	ldr	r3, [pc, #588]	; (8004b68 <HAL_RCC_OscConfig+0x280>)
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f003 030c 	and.w	r3, r3, #12
 8004920:	2b08      	cmp	r3, #8
 8004922:	d112      	bne.n	800494a <HAL_RCC_OscConfig+0x62>
 8004924:	4b90      	ldr	r3, [pc, #576]	; (8004b68 <HAL_RCC_OscConfig+0x280>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800492c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004930:	d10b      	bne.n	800494a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004932:	4b8d      	ldr	r3, [pc, #564]	; (8004b68 <HAL_RCC_OscConfig+0x280>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d06c      	beq.n	8004a18 <HAL_RCC_OscConfig+0x130>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d168      	bne.n	8004a18 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e275      	b.n	8004e36 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004952:	d106      	bne.n	8004962 <HAL_RCC_OscConfig+0x7a>
 8004954:	4b84      	ldr	r3, [pc, #528]	; (8004b68 <HAL_RCC_OscConfig+0x280>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a83      	ldr	r2, [pc, #524]	; (8004b68 <HAL_RCC_OscConfig+0x280>)
 800495a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800495e:	6013      	str	r3, [r2, #0]
 8004960:	e02e      	b.n	80049c0 <HAL_RCC_OscConfig+0xd8>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10c      	bne.n	8004984 <HAL_RCC_OscConfig+0x9c>
 800496a:	4b7f      	ldr	r3, [pc, #508]	; (8004b68 <HAL_RCC_OscConfig+0x280>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a7e      	ldr	r2, [pc, #504]	; (8004b68 <HAL_RCC_OscConfig+0x280>)
 8004970:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004974:	6013      	str	r3, [r2, #0]
 8004976:	4b7c      	ldr	r3, [pc, #496]	; (8004b68 <HAL_RCC_OscConfig+0x280>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a7b      	ldr	r2, [pc, #492]	; (8004b68 <HAL_RCC_OscConfig+0x280>)
 800497c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004980:	6013      	str	r3, [r2, #0]
 8004982:	e01d      	b.n	80049c0 <HAL_RCC_OscConfig+0xd8>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800498c:	d10c      	bne.n	80049a8 <HAL_RCC_OscConfig+0xc0>
 800498e:	4b76      	ldr	r3, [pc, #472]	; (8004b68 <HAL_RCC_OscConfig+0x280>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a75      	ldr	r2, [pc, #468]	; (8004b68 <HAL_RCC_OscConfig+0x280>)
 8004994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004998:	6013      	str	r3, [r2, #0]
 800499a:	4b73      	ldr	r3, [pc, #460]	; (8004b68 <HAL_RCC_OscConfig+0x280>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a72      	ldr	r2, [pc, #456]	; (8004b68 <HAL_RCC_OscConfig+0x280>)
 80049a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049a4:	6013      	str	r3, [r2, #0]
 80049a6:	e00b      	b.n	80049c0 <HAL_RCC_OscConfig+0xd8>
 80049a8:	4b6f      	ldr	r3, [pc, #444]	; (8004b68 <HAL_RCC_OscConfig+0x280>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a6e      	ldr	r2, [pc, #440]	; (8004b68 <HAL_RCC_OscConfig+0x280>)
 80049ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049b2:	6013      	str	r3, [r2, #0]
 80049b4:	4b6c      	ldr	r3, [pc, #432]	; (8004b68 <HAL_RCC_OscConfig+0x280>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a6b      	ldr	r2, [pc, #428]	; (8004b68 <HAL_RCC_OscConfig+0x280>)
 80049ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d013      	beq.n	80049f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c8:	f7fe fee0 	bl	800378c <HAL_GetTick>
 80049cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049d0:	f7fe fedc 	bl	800378c <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b64      	cmp	r3, #100	; 0x64
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e229      	b.n	8004e36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049e2:	4b61      	ldr	r3, [pc, #388]	; (8004b68 <HAL_RCC_OscConfig+0x280>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d0f0      	beq.n	80049d0 <HAL_RCC_OscConfig+0xe8>
 80049ee:	e014      	b.n	8004a1a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f0:	f7fe fecc 	bl	800378c <HAL_GetTick>
 80049f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049f6:	e008      	b.n	8004a0a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049f8:	f7fe fec8 	bl	800378c <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b64      	cmp	r3, #100	; 0x64
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e215      	b.n	8004e36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a0a:	4b57      	ldr	r3, [pc, #348]	; (8004b68 <HAL_RCC_OscConfig+0x280>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1f0      	bne.n	80049f8 <HAL_RCC_OscConfig+0x110>
 8004a16:	e000      	b.n	8004a1a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d069      	beq.n	8004afa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a26:	4b50      	ldr	r3, [pc, #320]	; (8004b68 <HAL_RCC_OscConfig+0x280>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f003 030c 	and.w	r3, r3, #12
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00b      	beq.n	8004a4a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a32:	4b4d      	ldr	r3, [pc, #308]	; (8004b68 <HAL_RCC_OscConfig+0x280>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f003 030c 	and.w	r3, r3, #12
 8004a3a:	2b08      	cmp	r3, #8
 8004a3c:	d11c      	bne.n	8004a78 <HAL_RCC_OscConfig+0x190>
 8004a3e:	4b4a      	ldr	r3, [pc, #296]	; (8004b68 <HAL_RCC_OscConfig+0x280>)
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d116      	bne.n	8004a78 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a4a:	4b47      	ldr	r3, [pc, #284]	; (8004b68 <HAL_RCC_OscConfig+0x280>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d005      	beq.n	8004a62 <HAL_RCC_OscConfig+0x17a>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d001      	beq.n	8004a62 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e1e9      	b.n	8004e36 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a62:	4b41      	ldr	r3, [pc, #260]	; (8004b68 <HAL_RCC_OscConfig+0x280>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	493d      	ldr	r1, [pc, #244]	; (8004b68 <HAL_RCC_OscConfig+0x280>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a76:	e040      	b.n	8004afa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d023      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a80:	4b39      	ldr	r3, [pc, #228]	; (8004b68 <HAL_RCC_OscConfig+0x280>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a38      	ldr	r2, [pc, #224]	; (8004b68 <HAL_RCC_OscConfig+0x280>)
 8004a86:	f043 0301 	orr.w	r3, r3, #1
 8004a8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8c:	f7fe fe7e 	bl	800378c <HAL_GetTick>
 8004a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a94:	f7fe fe7a 	bl	800378c <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e1c7      	b.n	8004e36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aa6:	4b30      	ldr	r3, [pc, #192]	; (8004b68 <HAL_RCC_OscConfig+0x280>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d0f0      	beq.n	8004a94 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ab2:	4b2d      	ldr	r3, [pc, #180]	; (8004b68 <HAL_RCC_OscConfig+0x280>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	00db      	lsls	r3, r3, #3
 8004ac0:	4929      	ldr	r1, [pc, #164]	; (8004b68 <HAL_RCC_OscConfig+0x280>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	600b      	str	r3, [r1, #0]
 8004ac6:	e018      	b.n	8004afa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ac8:	4b27      	ldr	r3, [pc, #156]	; (8004b68 <HAL_RCC_OscConfig+0x280>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a26      	ldr	r2, [pc, #152]	; (8004b68 <HAL_RCC_OscConfig+0x280>)
 8004ace:	f023 0301 	bic.w	r3, r3, #1
 8004ad2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad4:	f7fe fe5a 	bl	800378c <HAL_GetTick>
 8004ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ada:	e008      	b.n	8004aee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004adc:	f7fe fe56 	bl	800378c <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e1a3      	b.n	8004e36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aee:	4b1e      	ldr	r3, [pc, #120]	; (8004b68 <HAL_RCC_OscConfig+0x280>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1f0      	bne.n	8004adc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0308 	and.w	r3, r3, #8
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d038      	beq.n	8004b78 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d019      	beq.n	8004b42 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b0e:	4b16      	ldr	r3, [pc, #88]	; (8004b68 <HAL_RCC_OscConfig+0x280>)
 8004b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b12:	4a15      	ldr	r2, [pc, #84]	; (8004b68 <HAL_RCC_OscConfig+0x280>)
 8004b14:	f043 0301 	orr.w	r3, r3, #1
 8004b18:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b1a:	f7fe fe37 	bl	800378c <HAL_GetTick>
 8004b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b20:	e008      	b.n	8004b34 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b22:	f7fe fe33 	bl	800378c <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d901      	bls.n	8004b34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e180      	b.n	8004e36 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b34:	4b0c      	ldr	r3, [pc, #48]	; (8004b68 <HAL_RCC_OscConfig+0x280>)
 8004b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b38:	f003 0302 	and.w	r3, r3, #2
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d0f0      	beq.n	8004b22 <HAL_RCC_OscConfig+0x23a>
 8004b40:	e01a      	b.n	8004b78 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b42:	4b09      	ldr	r3, [pc, #36]	; (8004b68 <HAL_RCC_OscConfig+0x280>)
 8004b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b46:	4a08      	ldr	r2, [pc, #32]	; (8004b68 <HAL_RCC_OscConfig+0x280>)
 8004b48:	f023 0301 	bic.w	r3, r3, #1
 8004b4c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b4e:	f7fe fe1d 	bl	800378c <HAL_GetTick>
 8004b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b54:	e00a      	b.n	8004b6c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b56:	f7fe fe19 	bl	800378c <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d903      	bls.n	8004b6c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e166      	b.n	8004e36 <HAL_RCC_OscConfig+0x54e>
 8004b68:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b6c:	4b92      	ldr	r3, [pc, #584]	; (8004db8 <HAL_RCC_OscConfig+0x4d0>)
 8004b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1ee      	bne.n	8004b56 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0304 	and.w	r3, r3, #4
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f000 80a4 	beq.w	8004cce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b86:	4b8c      	ldr	r3, [pc, #560]	; (8004db8 <HAL_RCC_OscConfig+0x4d0>)
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10d      	bne.n	8004bae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b92:	4b89      	ldr	r3, [pc, #548]	; (8004db8 <HAL_RCC_OscConfig+0x4d0>)
 8004b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b96:	4a88      	ldr	r2, [pc, #544]	; (8004db8 <HAL_RCC_OscConfig+0x4d0>)
 8004b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b9e:	4b86      	ldr	r3, [pc, #536]	; (8004db8 <HAL_RCC_OscConfig+0x4d0>)
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ba6:	60bb      	str	r3, [r7, #8]
 8004ba8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004baa:	2301      	movs	r3, #1
 8004bac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bae:	4b83      	ldr	r3, [pc, #524]	; (8004dbc <HAL_RCC_OscConfig+0x4d4>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d118      	bne.n	8004bec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004bba:	4b80      	ldr	r3, [pc, #512]	; (8004dbc <HAL_RCC_OscConfig+0x4d4>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a7f      	ldr	r2, [pc, #508]	; (8004dbc <HAL_RCC_OscConfig+0x4d4>)
 8004bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bc6:	f7fe fde1 	bl	800378c <HAL_GetTick>
 8004bca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bcc:	e008      	b.n	8004be0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bce:	f7fe fddd 	bl	800378c <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b64      	cmp	r3, #100	; 0x64
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e12a      	b.n	8004e36 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004be0:	4b76      	ldr	r3, [pc, #472]	; (8004dbc <HAL_RCC_OscConfig+0x4d4>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0f0      	beq.n	8004bce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d106      	bne.n	8004c02 <HAL_RCC_OscConfig+0x31a>
 8004bf4:	4b70      	ldr	r3, [pc, #448]	; (8004db8 <HAL_RCC_OscConfig+0x4d0>)
 8004bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf8:	4a6f      	ldr	r2, [pc, #444]	; (8004db8 <HAL_RCC_OscConfig+0x4d0>)
 8004bfa:	f043 0301 	orr.w	r3, r3, #1
 8004bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8004c00:	e02d      	b.n	8004c5e <HAL_RCC_OscConfig+0x376>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10c      	bne.n	8004c24 <HAL_RCC_OscConfig+0x33c>
 8004c0a:	4b6b      	ldr	r3, [pc, #428]	; (8004db8 <HAL_RCC_OscConfig+0x4d0>)
 8004c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0e:	4a6a      	ldr	r2, [pc, #424]	; (8004db8 <HAL_RCC_OscConfig+0x4d0>)
 8004c10:	f023 0301 	bic.w	r3, r3, #1
 8004c14:	6713      	str	r3, [r2, #112]	; 0x70
 8004c16:	4b68      	ldr	r3, [pc, #416]	; (8004db8 <HAL_RCC_OscConfig+0x4d0>)
 8004c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c1a:	4a67      	ldr	r2, [pc, #412]	; (8004db8 <HAL_RCC_OscConfig+0x4d0>)
 8004c1c:	f023 0304 	bic.w	r3, r3, #4
 8004c20:	6713      	str	r3, [r2, #112]	; 0x70
 8004c22:	e01c      	b.n	8004c5e <HAL_RCC_OscConfig+0x376>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	2b05      	cmp	r3, #5
 8004c2a:	d10c      	bne.n	8004c46 <HAL_RCC_OscConfig+0x35e>
 8004c2c:	4b62      	ldr	r3, [pc, #392]	; (8004db8 <HAL_RCC_OscConfig+0x4d0>)
 8004c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c30:	4a61      	ldr	r2, [pc, #388]	; (8004db8 <HAL_RCC_OscConfig+0x4d0>)
 8004c32:	f043 0304 	orr.w	r3, r3, #4
 8004c36:	6713      	str	r3, [r2, #112]	; 0x70
 8004c38:	4b5f      	ldr	r3, [pc, #380]	; (8004db8 <HAL_RCC_OscConfig+0x4d0>)
 8004c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3c:	4a5e      	ldr	r2, [pc, #376]	; (8004db8 <HAL_RCC_OscConfig+0x4d0>)
 8004c3e:	f043 0301 	orr.w	r3, r3, #1
 8004c42:	6713      	str	r3, [r2, #112]	; 0x70
 8004c44:	e00b      	b.n	8004c5e <HAL_RCC_OscConfig+0x376>
 8004c46:	4b5c      	ldr	r3, [pc, #368]	; (8004db8 <HAL_RCC_OscConfig+0x4d0>)
 8004c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4a:	4a5b      	ldr	r2, [pc, #364]	; (8004db8 <HAL_RCC_OscConfig+0x4d0>)
 8004c4c:	f023 0301 	bic.w	r3, r3, #1
 8004c50:	6713      	str	r3, [r2, #112]	; 0x70
 8004c52:	4b59      	ldr	r3, [pc, #356]	; (8004db8 <HAL_RCC_OscConfig+0x4d0>)
 8004c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c56:	4a58      	ldr	r2, [pc, #352]	; (8004db8 <HAL_RCC_OscConfig+0x4d0>)
 8004c58:	f023 0304 	bic.w	r3, r3, #4
 8004c5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d015      	beq.n	8004c92 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c66:	f7fe fd91 	bl	800378c <HAL_GetTick>
 8004c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c6c:	e00a      	b.n	8004c84 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c6e:	f7fe fd8d 	bl	800378c <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d901      	bls.n	8004c84 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e0d8      	b.n	8004e36 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c84:	4b4c      	ldr	r3, [pc, #304]	; (8004db8 <HAL_RCC_OscConfig+0x4d0>)
 8004c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d0ee      	beq.n	8004c6e <HAL_RCC_OscConfig+0x386>
 8004c90:	e014      	b.n	8004cbc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c92:	f7fe fd7b 	bl	800378c <HAL_GetTick>
 8004c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c98:	e00a      	b.n	8004cb0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c9a:	f7fe fd77 	bl	800378c <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d901      	bls.n	8004cb0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e0c2      	b.n	8004e36 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cb0:	4b41      	ldr	r3, [pc, #260]	; (8004db8 <HAL_RCC_OscConfig+0x4d0>)
 8004cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb4:	f003 0302 	and.w	r3, r3, #2
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1ee      	bne.n	8004c9a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004cbc:	7dfb      	ldrb	r3, [r7, #23]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d105      	bne.n	8004cce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cc2:	4b3d      	ldr	r3, [pc, #244]	; (8004db8 <HAL_RCC_OscConfig+0x4d0>)
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	4a3c      	ldr	r2, [pc, #240]	; (8004db8 <HAL_RCC_OscConfig+0x4d0>)
 8004cc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ccc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f000 80ae 	beq.w	8004e34 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cd8:	4b37      	ldr	r3, [pc, #220]	; (8004db8 <HAL_RCC_OscConfig+0x4d0>)
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f003 030c 	and.w	r3, r3, #12
 8004ce0:	2b08      	cmp	r3, #8
 8004ce2:	d06d      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d14b      	bne.n	8004d84 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cec:	4b32      	ldr	r3, [pc, #200]	; (8004db8 <HAL_RCC_OscConfig+0x4d0>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a31      	ldr	r2, [pc, #196]	; (8004db8 <HAL_RCC_OscConfig+0x4d0>)
 8004cf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf8:	f7fe fd48 	bl	800378c <HAL_GetTick>
 8004cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cfe:	e008      	b.n	8004d12 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d00:	f7fe fd44 	bl	800378c <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e091      	b.n	8004e36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d12:	4b29      	ldr	r3, [pc, #164]	; (8004db8 <HAL_RCC_OscConfig+0x4d0>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1f0      	bne.n	8004d00 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	69da      	ldr	r2, [r3, #28]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	431a      	orrs	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	019b      	lsls	r3, r3, #6
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d34:	085b      	lsrs	r3, r3, #1
 8004d36:	3b01      	subs	r3, #1
 8004d38:	041b      	lsls	r3, r3, #16
 8004d3a:	431a      	orrs	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d40:	061b      	lsls	r3, r3, #24
 8004d42:	431a      	orrs	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d48:	071b      	lsls	r3, r3, #28
 8004d4a:	491b      	ldr	r1, [pc, #108]	; (8004db8 <HAL_RCC_OscConfig+0x4d0>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d50:	4b19      	ldr	r3, [pc, #100]	; (8004db8 <HAL_RCC_OscConfig+0x4d0>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a18      	ldr	r2, [pc, #96]	; (8004db8 <HAL_RCC_OscConfig+0x4d0>)
 8004d56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d5c:	f7fe fd16 	bl	800378c <HAL_GetTick>
 8004d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d62:	e008      	b.n	8004d76 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d64:	f7fe fd12 	bl	800378c <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e05f      	b.n	8004e36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d76:	4b10      	ldr	r3, [pc, #64]	; (8004db8 <HAL_RCC_OscConfig+0x4d0>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d0f0      	beq.n	8004d64 <HAL_RCC_OscConfig+0x47c>
 8004d82:	e057      	b.n	8004e34 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d84:	4b0c      	ldr	r3, [pc, #48]	; (8004db8 <HAL_RCC_OscConfig+0x4d0>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a0b      	ldr	r2, [pc, #44]	; (8004db8 <HAL_RCC_OscConfig+0x4d0>)
 8004d8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d90:	f7fe fcfc 	bl	800378c <HAL_GetTick>
 8004d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d96:	e008      	b.n	8004daa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d98:	f7fe fcf8 	bl	800378c <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d901      	bls.n	8004daa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e045      	b.n	8004e36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004daa:	4b03      	ldr	r3, [pc, #12]	; (8004db8 <HAL_RCC_OscConfig+0x4d0>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1f0      	bne.n	8004d98 <HAL_RCC_OscConfig+0x4b0>
 8004db6:	e03d      	b.n	8004e34 <HAL_RCC_OscConfig+0x54c>
 8004db8:	40023800 	.word	0x40023800
 8004dbc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004dc0:	4b1f      	ldr	r3, [pc, #124]	; (8004e40 <HAL_RCC_OscConfig+0x558>)
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d030      	beq.n	8004e30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d129      	bne.n	8004e30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d122      	bne.n	8004e30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004df0:	4013      	ands	r3, r2
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004df6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d119      	bne.n	8004e30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e06:	085b      	lsrs	r3, r3, #1
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d10f      	bne.n	8004e30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d107      	bne.n	8004e30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d001      	beq.n	8004e34 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e000      	b.n	8004e36 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3718      	adds	r7, #24
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	40023800 	.word	0x40023800

08004e44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d101      	bne.n	8004e5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e0d0      	b.n	8004ffe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e5c:	4b6a      	ldr	r3, [pc, #424]	; (8005008 <HAL_RCC_ClockConfig+0x1c4>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 030f 	and.w	r3, r3, #15
 8004e64:	683a      	ldr	r2, [r7, #0]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d910      	bls.n	8004e8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e6a:	4b67      	ldr	r3, [pc, #412]	; (8005008 <HAL_RCC_ClockConfig+0x1c4>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f023 020f 	bic.w	r2, r3, #15
 8004e72:	4965      	ldr	r1, [pc, #404]	; (8005008 <HAL_RCC_ClockConfig+0x1c4>)
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e7a:	4b63      	ldr	r3, [pc, #396]	; (8005008 <HAL_RCC_ClockConfig+0x1c4>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 030f 	and.w	r3, r3, #15
 8004e82:	683a      	ldr	r2, [r7, #0]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d001      	beq.n	8004e8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e0b8      	b.n	8004ffe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0302 	and.w	r3, r3, #2
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d020      	beq.n	8004eda <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0304 	and.w	r3, r3, #4
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d005      	beq.n	8004eb0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ea4:	4b59      	ldr	r3, [pc, #356]	; (800500c <HAL_RCC_ClockConfig+0x1c8>)
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	4a58      	ldr	r2, [pc, #352]	; (800500c <HAL_RCC_ClockConfig+0x1c8>)
 8004eaa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004eae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0308 	and.w	r3, r3, #8
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d005      	beq.n	8004ec8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ebc:	4b53      	ldr	r3, [pc, #332]	; (800500c <HAL_RCC_ClockConfig+0x1c8>)
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	4a52      	ldr	r2, [pc, #328]	; (800500c <HAL_RCC_ClockConfig+0x1c8>)
 8004ec2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ec6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ec8:	4b50      	ldr	r3, [pc, #320]	; (800500c <HAL_RCC_ClockConfig+0x1c8>)
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	494d      	ldr	r1, [pc, #308]	; (800500c <HAL_RCC_ClockConfig+0x1c8>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d040      	beq.n	8004f68 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d107      	bne.n	8004efe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eee:	4b47      	ldr	r3, [pc, #284]	; (800500c <HAL_RCC_ClockConfig+0x1c8>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d115      	bne.n	8004f26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e07f      	b.n	8004ffe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d107      	bne.n	8004f16 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f06:	4b41      	ldr	r3, [pc, #260]	; (800500c <HAL_RCC_ClockConfig+0x1c8>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d109      	bne.n	8004f26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e073      	b.n	8004ffe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f16:	4b3d      	ldr	r3, [pc, #244]	; (800500c <HAL_RCC_ClockConfig+0x1c8>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e06b      	b.n	8004ffe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f26:	4b39      	ldr	r3, [pc, #228]	; (800500c <HAL_RCC_ClockConfig+0x1c8>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f023 0203 	bic.w	r2, r3, #3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	4936      	ldr	r1, [pc, #216]	; (800500c <HAL_RCC_ClockConfig+0x1c8>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f38:	f7fe fc28 	bl	800378c <HAL_GetTick>
 8004f3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f3e:	e00a      	b.n	8004f56 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f40:	f7fe fc24 	bl	800378c <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e053      	b.n	8004ffe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f56:	4b2d      	ldr	r3, [pc, #180]	; (800500c <HAL_RCC_ClockConfig+0x1c8>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f003 020c 	and.w	r2, r3, #12
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d1eb      	bne.n	8004f40 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f68:	4b27      	ldr	r3, [pc, #156]	; (8005008 <HAL_RCC_ClockConfig+0x1c4>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 030f 	and.w	r3, r3, #15
 8004f70:	683a      	ldr	r2, [r7, #0]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d210      	bcs.n	8004f98 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f76:	4b24      	ldr	r3, [pc, #144]	; (8005008 <HAL_RCC_ClockConfig+0x1c4>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f023 020f 	bic.w	r2, r3, #15
 8004f7e:	4922      	ldr	r1, [pc, #136]	; (8005008 <HAL_RCC_ClockConfig+0x1c4>)
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f86:	4b20      	ldr	r3, [pc, #128]	; (8005008 <HAL_RCC_ClockConfig+0x1c4>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 030f 	and.w	r3, r3, #15
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d001      	beq.n	8004f98 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e032      	b.n	8004ffe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0304 	and.w	r3, r3, #4
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d008      	beq.n	8004fb6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fa4:	4b19      	ldr	r3, [pc, #100]	; (800500c <HAL_RCC_ClockConfig+0x1c8>)
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	4916      	ldr	r1, [pc, #88]	; (800500c <HAL_RCC_ClockConfig+0x1c8>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0308 	and.w	r3, r3, #8
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d009      	beq.n	8004fd6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004fc2:	4b12      	ldr	r3, [pc, #72]	; (800500c <HAL_RCC_ClockConfig+0x1c8>)
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	00db      	lsls	r3, r3, #3
 8004fd0:	490e      	ldr	r1, [pc, #56]	; (800500c <HAL_RCC_ClockConfig+0x1c8>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004fd6:	f000 f821 	bl	800501c <HAL_RCC_GetSysClockFreq>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	4b0b      	ldr	r3, [pc, #44]	; (800500c <HAL_RCC_ClockConfig+0x1c8>)
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	091b      	lsrs	r3, r3, #4
 8004fe2:	f003 030f 	and.w	r3, r3, #15
 8004fe6:	490a      	ldr	r1, [pc, #40]	; (8005010 <HAL_RCC_ClockConfig+0x1cc>)
 8004fe8:	5ccb      	ldrb	r3, [r1, r3]
 8004fea:	fa22 f303 	lsr.w	r3, r2, r3
 8004fee:	4a09      	ldr	r2, [pc, #36]	; (8005014 <HAL_RCC_ClockConfig+0x1d0>)
 8004ff0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004ff2:	4b09      	ldr	r3, [pc, #36]	; (8005018 <HAL_RCC_ClockConfig+0x1d4>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7fd fbba 	bl	8002770 <HAL_InitTick>

  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	40023c00 	.word	0x40023c00
 800500c:	40023800 	.word	0x40023800
 8005010:	0801c980 	.word	0x0801c980
 8005014:	20000004 	.word	0x20000004
 8005018:	20000008 	.word	0x20000008

0800501c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800501c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005020:	b094      	sub	sp, #80	; 0x50
 8005022:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005024:	2300      	movs	r3, #0
 8005026:	647b      	str	r3, [r7, #68]	; 0x44
 8005028:	2300      	movs	r3, #0
 800502a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800502c:	2300      	movs	r3, #0
 800502e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005030:	2300      	movs	r3, #0
 8005032:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005034:	4b79      	ldr	r3, [pc, #484]	; (800521c <HAL_RCC_GetSysClockFreq+0x200>)
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f003 030c 	and.w	r3, r3, #12
 800503c:	2b08      	cmp	r3, #8
 800503e:	d00d      	beq.n	800505c <HAL_RCC_GetSysClockFreq+0x40>
 8005040:	2b08      	cmp	r3, #8
 8005042:	f200 80e1 	bhi.w	8005208 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005046:	2b00      	cmp	r3, #0
 8005048:	d002      	beq.n	8005050 <HAL_RCC_GetSysClockFreq+0x34>
 800504a:	2b04      	cmp	r3, #4
 800504c:	d003      	beq.n	8005056 <HAL_RCC_GetSysClockFreq+0x3a>
 800504e:	e0db      	b.n	8005208 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005050:	4b73      	ldr	r3, [pc, #460]	; (8005220 <HAL_RCC_GetSysClockFreq+0x204>)
 8005052:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005054:	e0db      	b.n	800520e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005056:	4b73      	ldr	r3, [pc, #460]	; (8005224 <HAL_RCC_GetSysClockFreq+0x208>)
 8005058:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800505a:	e0d8      	b.n	800520e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800505c:	4b6f      	ldr	r3, [pc, #444]	; (800521c <HAL_RCC_GetSysClockFreq+0x200>)
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005064:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005066:	4b6d      	ldr	r3, [pc, #436]	; (800521c <HAL_RCC_GetSysClockFreq+0x200>)
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d063      	beq.n	800513a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005072:	4b6a      	ldr	r3, [pc, #424]	; (800521c <HAL_RCC_GetSysClockFreq+0x200>)
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	099b      	lsrs	r3, r3, #6
 8005078:	2200      	movs	r2, #0
 800507a:	63bb      	str	r3, [r7, #56]	; 0x38
 800507c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800507e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005084:	633b      	str	r3, [r7, #48]	; 0x30
 8005086:	2300      	movs	r3, #0
 8005088:	637b      	str	r3, [r7, #52]	; 0x34
 800508a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800508e:	4622      	mov	r2, r4
 8005090:	462b      	mov	r3, r5
 8005092:	f04f 0000 	mov.w	r0, #0
 8005096:	f04f 0100 	mov.w	r1, #0
 800509a:	0159      	lsls	r1, r3, #5
 800509c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050a0:	0150      	lsls	r0, r2, #5
 80050a2:	4602      	mov	r2, r0
 80050a4:	460b      	mov	r3, r1
 80050a6:	4621      	mov	r1, r4
 80050a8:	1a51      	subs	r1, r2, r1
 80050aa:	6139      	str	r1, [r7, #16]
 80050ac:	4629      	mov	r1, r5
 80050ae:	eb63 0301 	sbc.w	r3, r3, r1
 80050b2:	617b      	str	r3, [r7, #20]
 80050b4:	f04f 0200 	mov.w	r2, #0
 80050b8:	f04f 0300 	mov.w	r3, #0
 80050bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050c0:	4659      	mov	r1, fp
 80050c2:	018b      	lsls	r3, r1, #6
 80050c4:	4651      	mov	r1, sl
 80050c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050ca:	4651      	mov	r1, sl
 80050cc:	018a      	lsls	r2, r1, #6
 80050ce:	4651      	mov	r1, sl
 80050d0:	ebb2 0801 	subs.w	r8, r2, r1
 80050d4:	4659      	mov	r1, fp
 80050d6:	eb63 0901 	sbc.w	r9, r3, r1
 80050da:	f04f 0200 	mov.w	r2, #0
 80050de:	f04f 0300 	mov.w	r3, #0
 80050e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050ee:	4690      	mov	r8, r2
 80050f0:	4699      	mov	r9, r3
 80050f2:	4623      	mov	r3, r4
 80050f4:	eb18 0303 	adds.w	r3, r8, r3
 80050f8:	60bb      	str	r3, [r7, #8]
 80050fa:	462b      	mov	r3, r5
 80050fc:	eb49 0303 	adc.w	r3, r9, r3
 8005100:	60fb      	str	r3, [r7, #12]
 8005102:	f04f 0200 	mov.w	r2, #0
 8005106:	f04f 0300 	mov.w	r3, #0
 800510a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800510e:	4629      	mov	r1, r5
 8005110:	024b      	lsls	r3, r1, #9
 8005112:	4621      	mov	r1, r4
 8005114:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005118:	4621      	mov	r1, r4
 800511a:	024a      	lsls	r2, r1, #9
 800511c:	4610      	mov	r0, r2
 800511e:	4619      	mov	r1, r3
 8005120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005122:	2200      	movs	r2, #0
 8005124:	62bb      	str	r3, [r7, #40]	; 0x28
 8005126:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005128:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800512c:	f7fb f940 	bl	80003b0 <__aeabi_uldivmod>
 8005130:	4602      	mov	r2, r0
 8005132:	460b      	mov	r3, r1
 8005134:	4613      	mov	r3, r2
 8005136:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005138:	e058      	b.n	80051ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800513a:	4b38      	ldr	r3, [pc, #224]	; (800521c <HAL_RCC_GetSysClockFreq+0x200>)
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	099b      	lsrs	r3, r3, #6
 8005140:	2200      	movs	r2, #0
 8005142:	4618      	mov	r0, r3
 8005144:	4611      	mov	r1, r2
 8005146:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800514a:	623b      	str	r3, [r7, #32]
 800514c:	2300      	movs	r3, #0
 800514e:	627b      	str	r3, [r7, #36]	; 0x24
 8005150:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005154:	4642      	mov	r2, r8
 8005156:	464b      	mov	r3, r9
 8005158:	f04f 0000 	mov.w	r0, #0
 800515c:	f04f 0100 	mov.w	r1, #0
 8005160:	0159      	lsls	r1, r3, #5
 8005162:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005166:	0150      	lsls	r0, r2, #5
 8005168:	4602      	mov	r2, r0
 800516a:	460b      	mov	r3, r1
 800516c:	4641      	mov	r1, r8
 800516e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005172:	4649      	mov	r1, r9
 8005174:	eb63 0b01 	sbc.w	fp, r3, r1
 8005178:	f04f 0200 	mov.w	r2, #0
 800517c:	f04f 0300 	mov.w	r3, #0
 8005180:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005184:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005188:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800518c:	ebb2 040a 	subs.w	r4, r2, sl
 8005190:	eb63 050b 	sbc.w	r5, r3, fp
 8005194:	f04f 0200 	mov.w	r2, #0
 8005198:	f04f 0300 	mov.w	r3, #0
 800519c:	00eb      	lsls	r3, r5, #3
 800519e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051a2:	00e2      	lsls	r2, r4, #3
 80051a4:	4614      	mov	r4, r2
 80051a6:	461d      	mov	r5, r3
 80051a8:	4643      	mov	r3, r8
 80051aa:	18e3      	adds	r3, r4, r3
 80051ac:	603b      	str	r3, [r7, #0]
 80051ae:	464b      	mov	r3, r9
 80051b0:	eb45 0303 	adc.w	r3, r5, r3
 80051b4:	607b      	str	r3, [r7, #4]
 80051b6:	f04f 0200 	mov.w	r2, #0
 80051ba:	f04f 0300 	mov.w	r3, #0
 80051be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051c2:	4629      	mov	r1, r5
 80051c4:	028b      	lsls	r3, r1, #10
 80051c6:	4621      	mov	r1, r4
 80051c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051cc:	4621      	mov	r1, r4
 80051ce:	028a      	lsls	r2, r1, #10
 80051d0:	4610      	mov	r0, r2
 80051d2:	4619      	mov	r1, r3
 80051d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051d6:	2200      	movs	r2, #0
 80051d8:	61bb      	str	r3, [r7, #24]
 80051da:	61fa      	str	r2, [r7, #28]
 80051dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051e0:	f7fb f8e6 	bl	80003b0 <__aeabi_uldivmod>
 80051e4:	4602      	mov	r2, r0
 80051e6:	460b      	mov	r3, r1
 80051e8:	4613      	mov	r3, r2
 80051ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80051ec:	4b0b      	ldr	r3, [pc, #44]	; (800521c <HAL_RCC_GetSysClockFreq+0x200>)
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	0c1b      	lsrs	r3, r3, #16
 80051f2:	f003 0303 	and.w	r3, r3, #3
 80051f6:	3301      	adds	r3, #1
 80051f8:	005b      	lsls	r3, r3, #1
 80051fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80051fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005200:	fbb2 f3f3 	udiv	r3, r2, r3
 8005204:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005206:	e002      	b.n	800520e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005208:	4b05      	ldr	r3, [pc, #20]	; (8005220 <HAL_RCC_GetSysClockFreq+0x204>)
 800520a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800520c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800520e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005210:	4618      	mov	r0, r3
 8005212:	3750      	adds	r7, #80	; 0x50
 8005214:	46bd      	mov	sp, r7
 8005216:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800521a:	bf00      	nop
 800521c:	40023800 	.word	0x40023800
 8005220:	00f42400 	.word	0x00f42400
 8005224:	007a1200 	.word	0x007a1200

08005228 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005228:	b480      	push	{r7}
 800522a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800522c:	4b03      	ldr	r3, [pc, #12]	; (800523c <HAL_RCC_GetHCLKFreq+0x14>)
 800522e:	681b      	ldr	r3, [r3, #0]
}
 8005230:	4618      	mov	r0, r3
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	20000004 	.word	0x20000004

08005240 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005244:	f7ff fff0 	bl	8005228 <HAL_RCC_GetHCLKFreq>
 8005248:	4602      	mov	r2, r0
 800524a:	4b05      	ldr	r3, [pc, #20]	; (8005260 <HAL_RCC_GetPCLK1Freq+0x20>)
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	0a9b      	lsrs	r3, r3, #10
 8005250:	f003 0307 	and.w	r3, r3, #7
 8005254:	4903      	ldr	r1, [pc, #12]	; (8005264 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005256:	5ccb      	ldrb	r3, [r1, r3]
 8005258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800525c:	4618      	mov	r0, r3
 800525e:	bd80      	pop	{r7, pc}
 8005260:	40023800 	.word	0x40023800
 8005264:	0801c990 	.word	0x0801c990

08005268 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800526c:	f7ff ffdc 	bl	8005228 <HAL_RCC_GetHCLKFreq>
 8005270:	4602      	mov	r2, r0
 8005272:	4b05      	ldr	r3, [pc, #20]	; (8005288 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	0b5b      	lsrs	r3, r3, #13
 8005278:	f003 0307 	and.w	r3, r3, #7
 800527c:	4903      	ldr	r1, [pc, #12]	; (800528c <HAL_RCC_GetPCLK2Freq+0x24>)
 800527e:	5ccb      	ldrb	r3, [r1, r3]
 8005280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005284:	4618      	mov	r0, r3
 8005286:	bd80      	pop	{r7, pc}
 8005288:	40023800 	.word	0x40023800
 800528c:	0801c990 	.word	0x0801c990

08005290 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	220f      	movs	r2, #15
 800529e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80052a0:	4b12      	ldr	r3, [pc, #72]	; (80052ec <HAL_RCC_GetClockConfig+0x5c>)
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f003 0203 	and.w	r2, r3, #3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80052ac:	4b0f      	ldr	r3, [pc, #60]	; (80052ec <HAL_RCC_GetClockConfig+0x5c>)
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80052b8:	4b0c      	ldr	r3, [pc, #48]	; (80052ec <HAL_RCC_GetClockConfig+0x5c>)
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80052c4:	4b09      	ldr	r3, [pc, #36]	; (80052ec <HAL_RCC_GetClockConfig+0x5c>)
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	08db      	lsrs	r3, r3, #3
 80052ca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80052d2:	4b07      	ldr	r3, [pc, #28]	; (80052f0 <HAL_RCC_GetClockConfig+0x60>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 020f 	and.w	r2, r3, #15
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	601a      	str	r2, [r3, #0]
}
 80052de:	bf00      	nop
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	40023800 	.word	0x40023800
 80052f0:	40023c00 	.word	0x40023c00

080052f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b088      	sub	sp, #32
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80052fc:	2300      	movs	r3, #0
 80052fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005300:	2300      	movs	r3, #0
 8005302:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005304:	2300      	movs	r3, #0
 8005306:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005308:	2300      	movs	r3, #0
 800530a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800530c:	2300      	movs	r3, #0
 800530e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b00      	cmp	r3, #0
 800531a:	d012      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800531c:	4b69      	ldr	r3, [pc, #420]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	4a68      	ldr	r2, [pc, #416]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005322:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005326:	6093      	str	r3, [r2, #8]
 8005328:	4b66      	ldr	r3, [pc, #408]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005330:	4964      	ldr	r1, [pc, #400]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005332:	4313      	orrs	r3, r2
 8005334:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800533e:	2301      	movs	r3, #1
 8005340:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d017      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800534e:	4b5d      	ldr	r3, [pc, #372]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005350:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005354:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800535c:	4959      	ldr	r1, [pc, #356]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800535e:	4313      	orrs	r3, r2
 8005360:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005368:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800536c:	d101      	bne.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800536e:	2301      	movs	r3, #1
 8005370:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005376:	2b00      	cmp	r3, #0
 8005378:	d101      	bne.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800537a:	2301      	movs	r3, #1
 800537c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d017      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800538a:	4b4e      	ldr	r3, [pc, #312]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800538c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005390:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005398:	494a      	ldr	r1, [pc, #296]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800539a:	4313      	orrs	r3, r2
 800539c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053a8:	d101      	bne.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80053aa:	2301      	movs	r3, #1
 80053ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80053b6:	2301      	movs	r3, #1
 80053b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d001      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80053c6:	2301      	movs	r3, #1
 80053c8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0320 	and.w	r3, r3, #32
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f000 808b 	beq.w	80054ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80053d8:	4b3a      	ldr	r3, [pc, #232]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053dc:	4a39      	ldr	r2, [pc, #228]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053e2:	6413      	str	r3, [r2, #64]	; 0x40
 80053e4:	4b37      	ldr	r3, [pc, #220]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ec:	60bb      	str	r3, [r7, #8]
 80053ee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80053f0:	4b35      	ldr	r3, [pc, #212]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a34      	ldr	r2, [pc, #208]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80053f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053fc:	f7fe f9c6 	bl	800378c <HAL_GetTick>
 8005400:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005402:	e008      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005404:	f7fe f9c2 	bl	800378c <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b64      	cmp	r3, #100	; 0x64
 8005410:	d901      	bls.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e38f      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005416:	4b2c      	ldr	r3, [pc, #176]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800541e:	2b00      	cmp	r3, #0
 8005420:	d0f0      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005422:	4b28      	ldr	r3, [pc, #160]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800542a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d035      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	429a      	cmp	r2, r3
 800543e:	d02e      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005440:	4b20      	ldr	r3, [pc, #128]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005444:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005448:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800544a:	4b1e      	ldr	r3, [pc, #120]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800544c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800544e:	4a1d      	ldr	r2, [pc, #116]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005454:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005456:	4b1b      	ldr	r3, [pc, #108]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800545a:	4a1a      	ldr	r2, [pc, #104]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800545c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005460:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005462:	4a18      	ldr	r2, [pc, #96]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005468:	4b16      	ldr	r3, [pc, #88]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800546a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800546c:	f003 0301 	and.w	r3, r3, #1
 8005470:	2b01      	cmp	r3, #1
 8005472:	d114      	bne.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005474:	f7fe f98a 	bl	800378c <HAL_GetTick>
 8005478:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800547a:	e00a      	b.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800547c:	f7fe f986 	bl	800378c <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	f241 3288 	movw	r2, #5000	; 0x1388
 800548a:	4293      	cmp	r3, r2
 800548c:	d901      	bls.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e351      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005492:	4b0c      	ldr	r3, [pc, #48]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005496:	f003 0302 	and.w	r3, r3, #2
 800549a:	2b00      	cmp	r3, #0
 800549c:	d0ee      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054aa:	d111      	bne.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80054ac:	4b05      	ldr	r3, [pc, #20]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80054b8:	4b04      	ldr	r3, [pc, #16]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80054ba:	400b      	ands	r3, r1
 80054bc:	4901      	ldr	r1, [pc, #4]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	608b      	str	r3, [r1, #8]
 80054c2:	e00b      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80054c4:	40023800 	.word	0x40023800
 80054c8:	40007000 	.word	0x40007000
 80054cc:	0ffffcff 	.word	0x0ffffcff
 80054d0:	4bac      	ldr	r3, [pc, #688]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	4aab      	ldr	r2, [pc, #684]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054d6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80054da:	6093      	str	r3, [r2, #8]
 80054dc:	4ba9      	ldr	r3, [pc, #676]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054e8:	49a6      	ldr	r1, [pc, #664]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0310 	and.w	r3, r3, #16
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d010      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80054fa:	4ba2      	ldr	r3, [pc, #648]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005500:	4aa0      	ldr	r2, [pc, #640]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005502:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005506:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800550a:	4b9e      	ldr	r3, [pc, #632]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800550c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005514:	499b      	ldr	r1, [pc, #620]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005516:	4313      	orrs	r3, r2
 8005518:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00a      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005528:	4b96      	ldr	r3, [pc, #600]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800552a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800552e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005536:	4993      	ldr	r1, [pc, #588]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005538:	4313      	orrs	r3, r2
 800553a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00a      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800554a:	4b8e      	ldr	r3, [pc, #568]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800554c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005550:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005558:	498a      	ldr	r1, [pc, #552]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800555a:	4313      	orrs	r3, r2
 800555c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00a      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800556c:	4b85      	ldr	r3, [pc, #532]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800556e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005572:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800557a:	4982      	ldr	r1, [pc, #520]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800557c:	4313      	orrs	r3, r2
 800557e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00a      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800558e:	4b7d      	ldr	r3, [pc, #500]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005594:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800559c:	4979      	ldr	r1, [pc, #484]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00a      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055b0:	4b74      	ldr	r3, [pc, #464]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b6:	f023 0203 	bic.w	r2, r3, #3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055be:	4971      	ldr	r1, [pc, #452]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00a      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055d2:	4b6c      	ldr	r3, [pc, #432]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d8:	f023 020c 	bic.w	r2, r3, #12
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055e0:	4968      	ldr	r1, [pc, #416]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00a      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80055f4:	4b63      	ldr	r3, [pc, #396]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055fa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005602:	4960      	ldr	r1, [pc, #384]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005604:	4313      	orrs	r3, r2
 8005606:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00a      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005616:	4b5b      	ldr	r3, [pc, #364]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800561c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005624:	4957      	ldr	r1, [pc, #348]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005626:	4313      	orrs	r3, r2
 8005628:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00a      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005638:	4b52      	ldr	r3, [pc, #328]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800563a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800563e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005646:	494f      	ldr	r1, [pc, #316]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005648:	4313      	orrs	r3, r2
 800564a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00a      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800565a:	4b4a      	ldr	r3, [pc, #296]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800565c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005660:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005668:	4946      	ldr	r1, [pc, #280]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800566a:	4313      	orrs	r3, r2
 800566c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00a      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800567c:	4b41      	ldr	r3, [pc, #260]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800567e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005682:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800568a:	493e      	ldr	r1, [pc, #248]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800568c:	4313      	orrs	r3, r2
 800568e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00a      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800569e:	4b39      	ldr	r3, [pc, #228]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ac:	4935      	ldr	r1, [pc, #212]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00a      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80056c0:	4b30      	ldr	r3, [pc, #192]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056ce:	492d      	ldr	r1, [pc, #180]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d011      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80056e2:	4b28      	ldr	r3, [pc, #160]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056e8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056f0:	4924      	ldr	r1, [pc, #144]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005700:	d101      	bne.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005702:	2301      	movs	r3, #1
 8005704:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0308 	and.w	r3, r3, #8
 800570e:	2b00      	cmp	r3, #0
 8005710:	d001      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005712:	2301      	movs	r3, #1
 8005714:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00a      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005722:	4b18      	ldr	r3, [pc, #96]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005728:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005730:	4914      	ldr	r1, [pc, #80]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005732:	4313      	orrs	r3, r2
 8005734:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00b      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005744:	4b0f      	ldr	r3, [pc, #60]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800574a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005754:	490b      	ldr	r1, [pc, #44]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005756:	4313      	orrs	r3, r2
 8005758:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00f      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005768:	4b06      	ldr	r3, [pc, #24]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800576a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800576e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005778:	4902      	ldr	r1, [pc, #8]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800577a:	4313      	orrs	r3, r2
 800577c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005780:	e002      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005782:	bf00      	nop
 8005784:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00b      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005794:	4b8a      	ldr	r3, [pc, #552]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005796:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800579a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a4:	4986      	ldr	r1, [pc, #536]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00b      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80057b8:	4b81      	ldr	r3, [pc, #516]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057be:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057c8:	497d      	ldr	r1, [pc, #500]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057ca:	4313      	orrs	r3, r2
 80057cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d006      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f000 80d6 	beq.w	8005990 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80057e4:	4b76      	ldr	r3, [pc, #472]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a75      	ldr	r2, [pc, #468]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80057ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057f0:	f7fd ffcc 	bl	800378c <HAL_GetTick>
 80057f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057f6:	e008      	b.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80057f8:	f7fd ffc8 	bl	800378c <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	2b64      	cmp	r3, #100	; 0x64
 8005804:	d901      	bls.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e195      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800580a:	4b6d      	ldr	r3, [pc, #436]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1f0      	bne.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 0301 	and.w	r3, r3, #1
 800581e:	2b00      	cmp	r3, #0
 8005820:	d021      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005826:	2b00      	cmp	r3, #0
 8005828:	d11d      	bne.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800582a:	4b65      	ldr	r3, [pc, #404]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800582c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005830:	0c1b      	lsrs	r3, r3, #16
 8005832:	f003 0303 	and.w	r3, r3, #3
 8005836:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005838:	4b61      	ldr	r3, [pc, #388]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800583a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800583e:	0e1b      	lsrs	r3, r3, #24
 8005840:	f003 030f 	and.w	r3, r3, #15
 8005844:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	019a      	lsls	r2, r3, #6
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	041b      	lsls	r3, r3, #16
 8005850:	431a      	orrs	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	061b      	lsls	r3, r3, #24
 8005856:	431a      	orrs	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	071b      	lsls	r3, r3, #28
 800585e:	4958      	ldr	r1, [pc, #352]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005860:	4313      	orrs	r3, r2
 8005862:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d004      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005876:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800587a:	d00a      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005884:	2b00      	cmp	r3, #0
 8005886:	d02e      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005890:	d129      	bne.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005892:	4b4b      	ldr	r3, [pc, #300]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005894:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005898:	0c1b      	lsrs	r3, r3, #16
 800589a:	f003 0303 	and.w	r3, r3, #3
 800589e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80058a0:	4b47      	ldr	r3, [pc, #284]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058a6:	0f1b      	lsrs	r3, r3, #28
 80058a8:	f003 0307 	and.w	r3, r3, #7
 80058ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	019a      	lsls	r2, r3, #6
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	041b      	lsls	r3, r3, #16
 80058b8:	431a      	orrs	r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	061b      	lsls	r3, r3, #24
 80058c0:	431a      	orrs	r2, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	071b      	lsls	r3, r3, #28
 80058c6:	493e      	ldr	r1, [pc, #248]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80058ce:	4b3c      	ldr	r3, [pc, #240]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058d4:	f023 021f 	bic.w	r2, r3, #31
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058dc:	3b01      	subs	r3, #1
 80058de:	4938      	ldr	r1, [pc, #224]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058e0:	4313      	orrs	r3, r2
 80058e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d01d      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80058f2:	4b33      	ldr	r3, [pc, #204]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058f8:	0e1b      	lsrs	r3, r3, #24
 80058fa:	f003 030f 	and.w	r3, r3, #15
 80058fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005900:	4b2f      	ldr	r3, [pc, #188]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005902:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005906:	0f1b      	lsrs	r3, r3, #28
 8005908:	f003 0307 	and.w	r3, r3, #7
 800590c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	019a      	lsls	r2, r3, #6
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	041b      	lsls	r3, r3, #16
 800591a:	431a      	orrs	r2, r3
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	061b      	lsls	r3, r3, #24
 8005920:	431a      	orrs	r2, r3
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	071b      	lsls	r3, r3, #28
 8005926:	4926      	ldr	r1, [pc, #152]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005928:	4313      	orrs	r3, r2
 800592a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d011      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	019a      	lsls	r2, r3, #6
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	041b      	lsls	r3, r3, #16
 8005946:	431a      	orrs	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	061b      	lsls	r3, r3, #24
 800594e:	431a      	orrs	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	071b      	lsls	r3, r3, #28
 8005956:	491a      	ldr	r1, [pc, #104]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005958:	4313      	orrs	r3, r2
 800595a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800595e:	4b18      	ldr	r3, [pc, #96]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a17      	ldr	r2, [pc, #92]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005964:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005968:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800596a:	f7fd ff0f 	bl	800378c <HAL_GetTick>
 800596e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005970:	e008      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005972:	f7fd ff0b 	bl	800378c <HAL_GetTick>
 8005976:	4602      	mov	r2, r0
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	2b64      	cmp	r3, #100	; 0x64
 800597e:	d901      	bls.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e0d8      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005984:	4b0e      	ldr	r3, [pc, #56]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d0f0      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	2b01      	cmp	r3, #1
 8005994:	f040 80ce 	bne.w	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005998:	4b09      	ldr	r3, [pc, #36]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a08      	ldr	r2, [pc, #32]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800599e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059a4:	f7fd fef2 	bl	800378c <HAL_GetTick>
 80059a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80059aa:	e00b      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80059ac:	f7fd feee 	bl	800378c <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	2b64      	cmp	r3, #100	; 0x64
 80059b8:	d904      	bls.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e0bb      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80059be:	bf00      	nop
 80059c0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80059c4:	4b5e      	ldr	r3, [pc, #376]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059d0:	d0ec      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d003      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d009      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d02e      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d12a      	bne.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80059fa:	4b51      	ldr	r3, [pc, #324]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a00:	0c1b      	lsrs	r3, r3, #16
 8005a02:	f003 0303 	and.w	r3, r3, #3
 8005a06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005a08:	4b4d      	ldr	r3, [pc, #308]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a0e:	0f1b      	lsrs	r3, r3, #28
 8005a10:	f003 0307 	and.w	r3, r3, #7
 8005a14:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	019a      	lsls	r2, r3, #6
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	041b      	lsls	r3, r3, #16
 8005a20:	431a      	orrs	r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	061b      	lsls	r3, r3, #24
 8005a28:	431a      	orrs	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	071b      	lsls	r3, r3, #28
 8005a2e:	4944      	ldr	r1, [pc, #272]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a30:	4313      	orrs	r3, r2
 8005a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005a36:	4b42      	ldr	r3, [pc, #264]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a3c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a44:	3b01      	subs	r3, #1
 8005a46:	021b      	lsls	r3, r3, #8
 8005a48:	493d      	ldr	r1, [pc, #244]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d022      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a64:	d11d      	bne.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005a66:	4b36      	ldr	r3, [pc, #216]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a6c:	0e1b      	lsrs	r3, r3, #24
 8005a6e:	f003 030f 	and.w	r3, r3, #15
 8005a72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005a74:	4b32      	ldr	r3, [pc, #200]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a7a:	0f1b      	lsrs	r3, r3, #28
 8005a7c:	f003 0307 	and.w	r3, r3, #7
 8005a80:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	019a      	lsls	r2, r3, #6
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a1b      	ldr	r3, [r3, #32]
 8005a8c:	041b      	lsls	r3, r3, #16
 8005a8e:	431a      	orrs	r2, r3
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	061b      	lsls	r3, r3, #24
 8005a94:	431a      	orrs	r2, r3
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	071b      	lsls	r3, r3, #28
 8005a9a:	4929      	ldr	r1, [pc, #164]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0308 	and.w	r3, r3, #8
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d028      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005aae:	4b24      	ldr	r3, [pc, #144]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab4:	0e1b      	lsrs	r3, r3, #24
 8005ab6:	f003 030f 	and.w	r3, r3, #15
 8005aba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005abc:	4b20      	ldr	r3, [pc, #128]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac2:	0c1b      	lsrs	r3, r3, #16
 8005ac4:	f003 0303 	and.w	r3, r3, #3
 8005ac8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	019a      	lsls	r2, r3, #6
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	041b      	lsls	r3, r3, #16
 8005ad4:	431a      	orrs	r2, r3
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	061b      	lsls	r3, r3, #24
 8005ada:	431a      	orrs	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	69db      	ldr	r3, [r3, #28]
 8005ae0:	071b      	lsls	r3, r3, #28
 8005ae2:	4917      	ldr	r1, [pc, #92]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005aea:	4b15      	ldr	r3, [pc, #84]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005aec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005af0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af8:	4911      	ldr	r1, [pc, #68]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005afa:	4313      	orrs	r3, r2
 8005afc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005b00:	4b0f      	ldr	r3, [pc, #60]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a0e      	ldr	r2, [pc, #56]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b0c:	f7fd fe3e 	bl	800378c <HAL_GetTick>
 8005b10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b12:	e008      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b14:	f7fd fe3a 	bl	800378c <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	2b64      	cmp	r3, #100	; 0x64
 8005b20:	d901      	bls.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e007      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b26:	4b06      	ldr	r3, [pc, #24]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b32:	d1ef      	bne.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3720      	adds	r7, #32
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	40023800 	.word	0x40023800

08005b44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d101      	bne.n	8005b56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e049      	b.n	8005bea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d106      	bne.n	8005b70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 f841 	bl	8005bf2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2202      	movs	r2, #2
 8005b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	3304      	adds	r3, #4
 8005b80:	4619      	mov	r1, r3
 8005b82:	4610      	mov	r0, r2
 8005b84:	f000 fc12 	bl	80063ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005bf2:	b480      	push	{r7}
 8005bf4:	b083      	sub	sp, #12
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005bfa:	bf00      	nop
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
	...

08005c08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d001      	beq.n	8005c20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e054      	b.n	8005cca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2202      	movs	r2, #2
 8005c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68da      	ldr	r2, [r3, #12]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f042 0201 	orr.w	r2, r2, #1
 8005c36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a26      	ldr	r2, [pc, #152]	; (8005cd8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d022      	beq.n	8005c88 <HAL_TIM_Base_Start_IT+0x80>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c4a:	d01d      	beq.n	8005c88 <HAL_TIM_Base_Start_IT+0x80>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a22      	ldr	r2, [pc, #136]	; (8005cdc <HAL_TIM_Base_Start_IT+0xd4>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d018      	beq.n	8005c88 <HAL_TIM_Base_Start_IT+0x80>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a21      	ldr	r2, [pc, #132]	; (8005ce0 <HAL_TIM_Base_Start_IT+0xd8>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d013      	beq.n	8005c88 <HAL_TIM_Base_Start_IT+0x80>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a1f      	ldr	r2, [pc, #124]	; (8005ce4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d00e      	beq.n	8005c88 <HAL_TIM_Base_Start_IT+0x80>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a1e      	ldr	r2, [pc, #120]	; (8005ce8 <HAL_TIM_Base_Start_IT+0xe0>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d009      	beq.n	8005c88 <HAL_TIM_Base_Start_IT+0x80>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a1c      	ldr	r2, [pc, #112]	; (8005cec <HAL_TIM_Base_Start_IT+0xe4>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d004      	beq.n	8005c88 <HAL_TIM_Base_Start_IT+0x80>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a1b      	ldr	r2, [pc, #108]	; (8005cf0 <HAL_TIM_Base_Start_IT+0xe8>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d115      	bne.n	8005cb4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	689a      	ldr	r2, [r3, #8]
 8005c8e:	4b19      	ldr	r3, [pc, #100]	; (8005cf4 <HAL_TIM_Base_Start_IT+0xec>)
 8005c90:	4013      	ands	r3, r2
 8005c92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2b06      	cmp	r3, #6
 8005c98:	d015      	beq.n	8005cc6 <HAL_TIM_Base_Start_IT+0xbe>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ca0:	d011      	beq.n	8005cc6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f042 0201 	orr.w	r2, r2, #1
 8005cb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cb2:	e008      	b.n	8005cc6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f042 0201 	orr.w	r2, r2, #1
 8005cc2:	601a      	str	r2, [r3, #0]
 8005cc4:	e000      	b.n	8005cc8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cc6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	40010000 	.word	0x40010000
 8005cdc:	40000400 	.word	0x40000400
 8005ce0:	40000800 	.word	0x40000800
 8005ce4:	40000c00 	.word	0x40000c00
 8005ce8:	40010400 	.word	0x40010400
 8005cec:	40014000 	.word	0x40014000
 8005cf0:	40001800 	.word	0x40001800
 8005cf4:	00010007 	.word	0x00010007

08005cf8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d101      	bne.n	8005d0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e049      	b.n	8005d9e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d106      	bne.n	8005d24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f7fd f96a 	bl	8002ff8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2202      	movs	r2, #2
 8005d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	3304      	adds	r3, #4
 8005d34:	4619      	mov	r1, r3
 8005d36:	4610      	mov	r0, r2
 8005d38:	f000 fb38 	bl	80063ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3708      	adds	r7, #8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
	...

08005da8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b086      	sub	sp, #24
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d101      	bne.n	8005dbc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e08f      	b.n	8005edc <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d106      	bne.n	8005dd6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f7fd f945 	bl	8003060 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2202      	movs	r2, #2
 8005dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	6899      	ldr	r1, [r3, #8]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	4b3e      	ldr	r3, [pc, #248]	; (8005ee4 <HAL_TIM_Encoder_Init+0x13c>)
 8005dea:	400b      	ands	r3, r1
 8005dec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	3304      	adds	r3, #4
 8005df6:	4619      	mov	r1, r3
 8005df8:	4610      	mov	r0, r2
 8005dfa:	f000 fad7 	bl	80063ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	6a1b      	ldr	r3, [r3, #32]
 8005e14:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	4b31      	ldr	r3, [pc, #196]	; (8005ee8 <HAL_TIM_Encoder_Init+0x140>)
 8005e24:	4013      	ands	r3, r2
 8005e26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	689a      	ldr	r2, [r3, #8]
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	021b      	lsls	r3, r3, #8
 8005e32:	4313      	orrs	r3, r2
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005e3a:	693a      	ldr	r2, [r7, #16]
 8005e3c:	4b2b      	ldr	r3, [pc, #172]	; (8005eec <HAL_TIM_Encoder_Init+0x144>)
 8005e3e:	4013      	ands	r3, r2
 8005e40:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005e42:	693a      	ldr	r2, [r7, #16]
 8005e44:	4b2a      	ldr	r3, [pc, #168]	; (8005ef0 <HAL_TIM_Encoder_Init+0x148>)
 8005e46:	4013      	ands	r3, r2
 8005e48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	68da      	ldr	r2, [r3, #12]
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	69db      	ldr	r3, [r3, #28]
 8005e52:	021b      	lsls	r3, r3, #8
 8005e54:	4313      	orrs	r3, r2
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	011a      	lsls	r2, r3, #4
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	6a1b      	ldr	r3, [r3, #32]
 8005e66:	031b      	lsls	r3, r3, #12
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	693a      	ldr	r2, [r7, #16]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005e76:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005e7e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	685a      	ldr	r2, [r3, #4]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	695b      	ldr	r3, [r3, #20]
 8005e88:	011b      	lsls	r3, r3, #4
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3718      	adds	r7, #24
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	fffebff8 	.word	0xfffebff8
 8005ee8:	fffffcfc 	.word	0xfffffcfc
 8005eec:	fffff3f3 	.word	0xfffff3f3
 8005ef0:	ffff0f0f 	.word	0xffff0f0f

08005ef4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	f003 0302 	and.w	r3, r3, #2
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d122      	bne.n	8005f50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	f003 0302 	and.w	r3, r3, #2
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d11b      	bne.n	8005f50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f06f 0202 	mvn.w	r2, #2
 8005f20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	f003 0303 	and.w	r3, r3, #3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d003      	beq.n	8005f3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 fa1a 	bl	8006370 <HAL_TIM_IC_CaptureCallback>
 8005f3c:	e005      	b.n	8005f4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 fa0c 	bl	800635c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 fa1d 	bl	8006384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	f003 0304 	and.w	r3, r3, #4
 8005f5a:	2b04      	cmp	r3, #4
 8005f5c:	d122      	bne.n	8005fa4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	f003 0304 	and.w	r3, r3, #4
 8005f68:	2b04      	cmp	r3, #4
 8005f6a:	d11b      	bne.n	8005fa4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f06f 0204 	mvn.w	r2, #4
 8005f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2202      	movs	r2, #2
 8005f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d003      	beq.n	8005f92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f9f0 	bl	8006370 <HAL_TIM_IC_CaptureCallback>
 8005f90:	e005      	b.n	8005f9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 f9e2 	bl	800635c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 f9f3 	bl	8006384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	f003 0308 	and.w	r3, r3, #8
 8005fae:	2b08      	cmp	r3, #8
 8005fb0:	d122      	bne.n	8005ff8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	f003 0308 	and.w	r3, r3, #8
 8005fbc:	2b08      	cmp	r3, #8
 8005fbe:	d11b      	bne.n	8005ff8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f06f 0208 	mvn.w	r2, #8
 8005fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2204      	movs	r2, #4
 8005fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	f003 0303 	and.w	r3, r3, #3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d003      	beq.n	8005fe6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f9c6 	bl	8006370 <HAL_TIM_IC_CaptureCallback>
 8005fe4:	e005      	b.n	8005ff2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f9b8 	bl	800635c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 f9c9 	bl	8006384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	f003 0310 	and.w	r3, r3, #16
 8006002:	2b10      	cmp	r3, #16
 8006004:	d122      	bne.n	800604c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	f003 0310 	and.w	r3, r3, #16
 8006010:	2b10      	cmp	r3, #16
 8006012:	d11b      	bne.n	800604c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f06f 0210 	mvn.w	r2, #16
 800601c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2208      	movs	r2, #8
 8006022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	69db      	ldr	r3, [r3, #28]
 800602a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800602e:	2b00      	cmp	r3, #0
 8006030:	d003      	beq.n	800603a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 f99c 	bl	8006370 <HAL_TIM_IC_CaptureCallback>
 8006038:	e005      	b.n	8006046 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f98e 	bl	800635c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 f99f 	bl	8006384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	f003 0301 	and.w	r3, r3, #1
 8006056:	2b01      	cmp	r3, #1
 8006058:	d10e      	bne.n	8006078 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	f003 0301 	and.w	r3, r3, #1
 8006064:	2b01      	cmp	r3, #1
 8006066:	d107      	bne.n	8006078 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f06f 0201 	mvn.w	r2, #1
 8006070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7fc f9d8 	bl	8002428 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006082:	2b80      	cmp	r3, #128	; 0x80
 8006084:	d10e      	bne.n	80060a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006090:	2b80      	cmp	r3, #128	; 0x80
 8006092:	d107      	bne.n	80060a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800609c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 fd98 	bl	8006bd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060b2:	d10e      	bne.n	80060d2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060be:	2b80      	cmp	r3, #128	; 0x80
 80060c0:	d107      	bne.n	80060d2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80060ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 fd8b 	bl	8006be8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060dc:	2b40      	cmp	r3, #64	; 0x40
 80060de:	d10e      	bne.n	80060fe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ea:	2b40      	cmp	r3, #64	; 0x40
 80060ec:	d107      	bne.n	80060fe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80060f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 f94d 	bl	8006398 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	f003 0320 	and.w	r3, r3, #32
 8006108:	2b20      	cmp	r3, #32
 800610a:	d10e      	bne.n	800612a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	f003 0320 	and.w	r3, r3, #32
 8006116:	2b20      	cmp	r3, #32
 8006118:	d107      	bne.n	800612a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f06f 0220 	mvn.w	r2, #32
 8006122:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 fd4b 	bl	8006bc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800612a:	bf00      	nop
 800612c:	3708      	adds	r7, #8
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
	...

08006134 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b086      	sub	sp, #24
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006140:	2300      	movs	r3, #0
 8006142:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800614a:	2b01      	cmp	r3, #1
 800614c:	d101      	bne.n	8006152 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800614e:	2302      	movs	r3, #2
 8006150:	e0ff      	b.n	8006352 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2b14      	cmp	r3, #20
 800615e:	f200 80f0 	bhi.w	8006342 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006162:	a201      	add	r2, pc, #4	; (adr r2, 8006168 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006168:	080061bd 	.word	0x080061bd
 800616c:	08006343 	.word	0x08006343
 8006170:	08006343 	.word	0x08006343
 8006174:	08006343 	.word	0x08006343
 8006178:	080061fd 	.word	0x080061fd
 800617c:	08006343 	.word	0x08006343
 8006180:	08006343 	.word	0x08006343
 8006184:	08006343 	.word	0x08006343
 8006188:	0800623f 	.word	0x0800623f
 800618c:	08006343 	.word	0x08006343
 8006190:	08006343 	.word	0x08006343
 8006194:	08006343 	.word	0x08006343
 8006198:	0800627f 	.word	0x0800627f
 800619c:	08006343 	.word	0x08006343
 80061a0:	08006343 	.word	0x08006343
 80061a4:	08006343 	.word	0x08006343
 80061a8:	080062c1 	.word	0x080062c1
 80061ac:	08006343 	.word	0x08006343
 80061b0:	08006343 	.word	0x08006343
 80061b4:	08006343 	.word	0x08006343
 80061b8:	08006301 	.word	0x08006301
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68b9      	ldr	r1, [r7, #8]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f000 f992 	bl	80064ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	699a      	ldr	r2, [r3, #24]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f042 0208 	orr.w	r2, r2, #8
 80061d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	699a      	ldr	r2, [r3, #24]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f022 0204 	bic.w	r2, r2, #4
 80061e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6999      	ldr	r1, [r3, #24]
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	691a      	ldr	r2, [r3, #16]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	430a      	orrs	r2, r1
 80061f8:	619a      	str	r2, [r3, #24]
      break;
 80061fa:	e0a5      	b.n	8006348 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68b9      	ldr	r1, [r7, #8]
 8006202:	4618      	mov	r0, r3
 8006204:	f000 f9e4 	bl	80065d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	699a      	ldr	r2, [r3, #24]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006216:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	699a      	ldr	r2, [r3, #24]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006226:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6999      	ldr	r1, [r3, #24]
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	021a      	lsls	r2, r3, #8
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	430a      	orrs	r2, r1
 800623a:	619a      	str	r2, [r3, #24]
      break;
 800623c:	e084      	b.n	8006348 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68b9      	ldr	r1, [r7, #8]
 8006244:	4618      	mov	r0, r3
 8006246:	f000 fa3b 	bl	80066c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	69da      	ldr	r2, [r3, #28]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f042 0208 	orr.w	r2, r2, #8
 8006258:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	69da      	ldr	r2, [r3, #28]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f022 0204 	bic.w	r2, r2, #4
 8006268:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	69d9      	ldr	r1, [r3, #28]
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	691a      	ldr	r2, [r3, #16]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	430a      	orrs	r2, r1
 800627a:	61da      	str	r2, [r3, #28]
      break;
 800627c:	e064      	b.n	8006348 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68b9      	ldr	r1, [r7, #8]
 8006284:	4618      	mov	r0, r3
 8006286:	f000 fa91 	bl	80067ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	69da      	ldr	r2, [r3, #28]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006298:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	69da      	ldr	r2, [r3, #28]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	69d9      	ldr	r1, [r3, #28]
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	021a      	lsls	r2, r3, #8
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	430a      	orrs	r2, r1
 80062bc:	61da      	str	r2, [r3, #28]
      break;
 80062be:	e043      	b.n	8006348 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68b9      	ldr	r1, [r7, #8]
 80062c6:	4618      	mov	r0, r3
 80062c8:	f000 fac8 	bl	800685c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f042 0208 	orr.w	r2, r2, #8
 80062da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f022 0204 	bic.w	r2, r2, #4
 80062ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	691a      	ldr	r2, [r3, #16]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	430a      	orrs	r2, r1
 80062fc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80062fe:	e023      	b.n	8006348 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68b9      	ldr	r1, [r7, #8]
 8006306:	4618      	mov	r0, r3
 8006308:	f000 fafa 	bl	8006900 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800631a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800632a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	021a      	lsls	r2, r3, #8
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	430a      	orrs	r2, r1
 800633e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006340:	e002      	b.n	8006348 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	75fb      	strb	r3, [r7, #23]
      break;
 8006346:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2200      	movs	r2, #0
 800634c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006350:	7dfb      	ldrb	r3, [r7, #23]
}
 8006352:	4618      	mov	r0, r3
 8006354:	3718      	adds	r7, #24
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop

0800635c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a40      	ldr	r2, [pc, #256]	; (80064c0 <TIM_Base_SetConfig+0x114>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d013      	beq.n	80063ec <TIM_Base_SetConfig+0x40>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063ca:	d00f      	beq.n	80063ec <TIM_Base_SetConfig+0x40>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a3d      	ldr	r2, [pc, #244]	; (80064c4 <TIM_Base_SetConfig+0x118>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d00b      	beq.n	80063ec <TIM_Base_SetConfig+0x40>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a3c      	ldr	r2, [pc, #240]	; (80064c8 <TIM_Base_SetConfig+0x11c>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d007      	beq.n	80063ec <TIM_Base_SetConfig+0x40>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a3b      	ldr	r2, [pc, #236]	; (80064cc <TIM_Base_SetConfig+0x120>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d003      	beq.n	80063ec <TIM_Base_SetConfig+0x40>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a3a      	ldr	r2, [pc, #232]	; (80064d0 <TIM_Base_SetConfig+0x124>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d108      	bne.n	80063fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a2f      	ldr	r2, [pc, #188]	; (80064c0 <TIM_Base_SetConfig+0x114>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d02b      	beq.n	800645e <TIM_Base_SetConfig+0xb2>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800640c:	d027      	beq.n	800645e <TIM_Base_SetConfig+0xb2>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a2c      	ldr	r2, [pc, #176]	; (80064c4 <TIM_Base_SetConfig+0x118>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d023      	beq.n	800645e <TIM_Base_SetConfig+0xb2>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a2b      	ldr	r2, [pc, #172]	; (80064c8 <TIM_Base_SetConfig+0x11c>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d01f      	beq.n	800645e <TIM_Base_SetConfig+0xb2>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a2a      	ldr	r2, [pc, #168]	; (80064cc <TIM_Base_SetConfig+0x120>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d01b      	beq.n	800645e <TIM_Base_SetConfig+0xb2>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a29      	ldr	r2, [pc, #164]	; (80064d0 <TIM_Base_SetConfig+0x124>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d017      	beq.n	800645e <TIM_Base_SetConfig+0xb2>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a28      	ldr	r2, [pc, #160]	; (80064d4 <TIM_Base_SetConfig+0x128>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d013      	beq.n	800645e <TIM_Base_SetConfig+0xb2>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a27      	ldr	r2, [pc, #156]	; (80064d8 <TIM_Base_SetConfig+0x12c>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d00f      	beq.n	800645e <TIM_Base_SetConfig+0xb2>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a26      	ldr	r2, [pc, #152]	; (80064dc <TIM_Base_SetConfig+0x130>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d00b      	beq.n	800645e <TIM_Base_SetConfig+0xb2>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a25      	ldr	r2, [pc, #148]	; (80064e0 <TIM_Base_SetConfig+0x134>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d007      	beq.n	800645e <TIM_Base_SetConfig+0xb2>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a24      	ldr	r2, [pc, #144]	; (80064e4 <TIM_Base_SetConfig+0x138>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d003      	beq.n	800645e <TIM_Base_SetConfig+0xb2>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a23      	ldr	r2, [pc, #140]	; (80064e8 <TIM_Base_SetConfig+0x13c>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d108      	bne.n	8006470 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006464:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	4313      	orrs	r3, r2
 800646e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	4313      	orrs	r3, r2
 800647c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	689a      	ldr	r2, [r3, #8]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a0a      	ldr	r2, [pc, #40]	; (80064c0 <TIM_Base_SetConfig+0x114>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d003      	beq.n	80064a4 <TIM_Base_SetConfig+0xf8>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a0c      	ldr	r2, [pc, #48]	; (80064d0 <TIM_Base_SetConfig+0x124>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d103      	bne.n	80064ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	691a      	ldr	r2, [r3, #16]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	615a      	str	r2, [r3, #20]
}
 80064b2:	bf00      	nop
 80064b4:	3714      	adds	r7, #20
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	40010000 	.word	0x40010000
 80064c4:	40000400 	.word	0x40000400
 80064c8:	40000800 	.word	0x40000800
 80064cc:	40000c00 	.word	0x40000c00
 80064d0:	40010400 	.word	0x40010400
 80064d4:	40014000 	.word	0x40014000
 80064d8:	40014400 	.word	0x40014400
 80064dc:	40014800 	.word	0x40014800
 80064e0:	40001800 	.word	0x40001800
 80064e4:	40001c00 	.word	0x40001c00
 80064e8:	40002000 	.word	0x40002000

080064ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b087      	sub	sp, #28
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a1b      	ldr	r3, [r3, #32]
 80064fa:	f023 0201 	bic.w	r2, r3, #1
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	4b2b      	ldr	r3, [pc, #172]	; (80065c4 <TIM_OC1_SetConfig+0xd8>)
 8006518:	4013      	ands	r3, r2
 800651a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f023 0303 	bic.w	r3, r3, #3
 8006522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	4313      	orrs	r3, r2
 800652c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	f023 0302 	bic.w	r3, r3, #2
 8006534:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	4313      	orrs	r3, r2
 800653e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a21      	ldr	r2, [pc, #132]	; (80065c8 <TIM_OC1_SetConfig+0xdc>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d003      	beq.n	8006550 <TIM_OC1_SetConfig+0x64>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a20      	ldr	r2, [pc, #128]	; (80065cc <TIM_OC1_SetConfig+0xe0>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d10c      	bne.n	800656a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	f023 0308 	bic.w	r3, r3, #8
 8006556:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	4313      	orrs	r3, r2
 8006560:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	f023 0304 	bic.w	r3, r3, #4
 8006568:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a16      	ldr	r2, [pc, #88]	; (80065c8 <TIM_OC1_SetConfig+0xdc>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d003      	beq.n	800657a <TIM_OC1_SetConfig+0x8e>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a15      	ldr	r2, [pc, #84]	; (80065cc <TIM_OC1_SetConfig+0xe0>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d111      	bne.n	800659e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006580:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006588:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	4313      	orrs	r3, r2
 8006592:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	4313      	orrs	r3, r2
 800659c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	685a      	ldr	r2, [r3, #4]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	621a      	str	r2, [r3, #32]
}
 80065b8:	bf00      	nop
 80065ba:	371c      	adds	r7, #28
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr
 80065c4:	fffeff8f 	.word	0xfffeff8f
 80065c8:	40010000 	.word	0x40010000
 80065cc:	40010400 	.word	0x40010400

080065d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b087      	sub	sp, #28
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	f023 0210 	bic.w	r2, r3, #16
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	4b2e      	ldr	r3, [pc, #184]	; (80066b4 <TIM_OC2_SetConfig+0xe4>)
 80065fc:	4013      	ands	r3, r2
 80065fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006606:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	021b      	lsls	r3, r3, #8
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	4313      	orrs	r3, r2
 8006612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	f023 0320 	bic.w	r3, r3, #32
 800661a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	011b      	lsls	r3, r3, #4
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	4313      	orrs	r3, r2
 8006626:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4a23      	ldr	r2, [pc, #140]	; (80066b8 <TIM_OC2_SetConfig+0xe8>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d003      	beq.n	8006638 <TIM_OC2_SetConfig+0x68>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a22      	ldr	r2, [pc, #136]	; (80066bc <TIM_OC2_SetConfig+0xec>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d10d      	bne.n	8006654 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800663e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	011b      	lsls	r3, r3, #4
 8006646:	697a      	ldr	r2, [r7, #20]
 8006648:	4313      	orrs	r3, r2
 800664a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006652:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a18      	ldr	r2, [pc, #96]	; (80066b8 <TIM_OC2_SetConfig+0xe8>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d003      	beq.n	8006664 <TIM_OC2_SetConfig+0x94>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a17      	ldr	r2, [pc, #92]	; (80066bc <TIM_OC2_SetConfig+0xec>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d113      	bne.n	800668c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800666a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006672:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	695b      	ldr	r3, [r3, #20]
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	693a      	ldr	r2, [r7, #16]
 800667c:	4313      	orrs	r3, r2
 800667e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	693a      	ldr	r2, [r7, #16]
 8006688:	4313      	orrs	r3, r2
 800668a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	693a      	ldr	r2, [r7, #16]
 8006690:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	685a      	ldr	r2, [r3, #4]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	697a      	ldr	r2, [r7, #20]
 80066a4:	621a      	str	r2, [r3, #32]
}
 80066a6:	bf00      	nop
 80066a8:	371c      	adds	r7, #28
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	feff8fff 	.word	0xfeff8fff
 80066b8:	40010000 	.word	0x40010000
 80066bc:	40010400 	.word	0x40010400

080066c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b087      	sub	sp, #28
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a1b      	ldr	r3, [r3, #32]
 80066da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	69db      	ldr	r3, [r3, #28]
 80066e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	4b2d      	ldr	r3, [pc, #180]	; (80067a0 <TIM_OC3_SetConfig+0xe0>)
 80066ec:	4013      	ands	r3, r2
 80066ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f023 0303 	bic.w	r3, r3, #3
 80066f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	4313      	orrs	r3, r2
 8006700:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006708:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	021b      	lsls	r3, r3, #8
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	4313      	orrs	r3, r2
 8006714:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a22      	ldr	r2, [pc, #136]	; (80067a4 <TIM_OC3_SetConfig+0xe4>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d003      	beq.n	8006726 <TIM_OC3_SetConfig+0x66>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a21      	ldr	r2, [pc, #132]	; (80067a8 <TIM_OC3_SetConfig+0xe8>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d10d      	bne.n	8006742 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800672c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	021b      	lsls	r3, r3, #8
 8006734:	697a      	ldr	r2, [r7, #20]
 8006736:	4313      	orrs	r3, r2
 8006738:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006740:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a17      	ldr	r2, [pc, #92]	; (80067a4 <TIM_OC3_SetConfig+0xe4>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d003      	beq.n	8006752 <TIM_OC3_SetConfig+0x92>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a16      	ldr	r2, [pc, #88]	; (80067a8 <TIM_OC3_SetConfig+0xe8>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d113      	bne.n	800677a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006758:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006760:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	011b      	lsls	r3, r3, #4
 8006768:	693a      	ldr	r2, [r7, #16]
 800676a:	4313      	orrs	r3, r2
 800676c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	011b      	lsls	r3, r3, #4
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	4313      	orrs	r3, r2
 8006778:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	693a      	ldr	r2, [r7, #16]
 800677e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	685a      	ldr	r2, [r3, #4]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	697a      	ldr	r2, [r7, #20]
 8006792:	621a      	str	r2, [r3, #32]
}
 8006794:	bf00      	nop
 8006796:	371c      	adds	r7, #28
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr
 80067a0:	fffeff8f 	.word	0xfffeff8f
 80067a4:	40010000 	.word	0x40010000
 80067a8:	40010400 	.word	0x40010400

080067ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b087      	sub	sp, #28
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	69db      	ldr	r3, [r3, #28]
 80067d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	4b1e      	ldr	r3, [pc, #120]	; (8006850 <TIM_OC4_SetConfig+0xa4>)
 80067d8:	4013      	ands	r3, r2
 80067da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	021b      	lsls	r3, r3, #8
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	031b      	lsls	r3, r3, #12
 80067fe:	693a      	ldr	r2, [r7, #16]
 8006800:	4313      	orrs	r3, r2
 8006802:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4a13      	ldr	r2, [pc, #76]	; (8006854 <TIM_OC4_SetConfig+0xa8>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d003      	beq.n	8006814 <TIM_OC4_SetConfig+0x68>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a12      	ldr	r2, [pc, #72]	; (8006858 <TIM_OC4_SetConfig+0xac>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d109      	bne.n	8006828 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800681a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	695b      	ldr	r3, [r3, #20]
 8006820:	019b      	lsls	r3, r3, #6
 8006822:	697a      	ldr	r2, [r7, #20]
 8006824:	4313      	orrs	r3, r2
 8006826:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	685a      	ldr	r2, [r3, #4]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	693a      	ldr	r2, [r7, #16]
 8006840:	621a      	str	r2, [r3, #32]
}
 8006842:	bf00      	nop
 8006844:	371c      	adds	r7, #28
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	feff8fff 	.word	0xfeff8fff
 8006854:	40010000 	.word	0x40010000
 8006858:	40010400 	.word	0x40010400

0800685c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800685c:	b480      	push	{r7}
 800685e:	b087      	sub	sp, #28
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a1b      	ldr	r3, [r3, #32]
 800686a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a1b      	ldr	r3, [r3, #32]
 8006876:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	4b1b      	ldr	r3, [pc, #108]	; (80068f4 <TIM_OC5_SetConfig+0x98>)
 8006888:	4013      	ands	r3, r2
 800688a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	4313      	orrs	r3, r2
 8006894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800689c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	041b      	lsls	r3, r3, #16
 80068a4:	693a      	ldr	r2, [r7, #16]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a12      	ldr	r2, [pc, #72]	; (80068f8 <TIM_OC5_SetConfig+0x9c>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d003      	beq.n	80068ba <TIM_OC5_SetConfig+0x5e>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a11      	ldr	r2, [pc, #68]	; (80068fc <TIM_OC5_SetConfig+0xa0>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d109      	bne.n	80068ce <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	021b      	lsls	r3, r3, #8
 80068c8:	697a      	ldr	r2, [r7, #20]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	697a      	ldr	r2, [r7, #20]
 80068d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	685a      	ldr	r2, [r3, #4]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	693a      	ldr	r2, [r7, #16]
 80068e6:	621a      	str	r2, [r3, #32]
}
 80068e8:	bf00      	nop
 80068ea:	371c      	adds	r7, #28
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr
 80068f4:	fffeff8f 	.word	0xfffeff8f
 80068f8:	40010000 	.word	0x40010000
 80068fc:	40010400 	.word	0x40010400

08006900 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006900:	b480      	push	{r7}
 8006902:	b087      	sub	sp, #28
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a1b      	ldr	r3, [r3, #32]
 800690e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a1b      	ldr	r3, [r3, #32]
 800691a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	4b1c      	ldr	r3, [pc, #112]	; (800699c <TIM_OC6_SetConfig+0x9c>)
 800692c:	4013      	ands	r3, r2
 800692e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	021b      	lsls	r3, r3, #8
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	4313      	orrs	r3, r2
 800693a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006942:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	051b      	lsls	r3, r3, #20
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	4313      	orrs	r3, r2
 800694e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a13      	ldr	r2, [pc, #76]	; (80069a0 <TIM_OC6_SetConfig+0xa0>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d003      	beq.n	8006960 <TIM_OC6_SetConfig+0x60>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a12      	ldr	r2, [pc, #72]	; (80069a4 <TIM_OC6_SetConfig+0xa4>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d109      	bne.n	8006974 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006966:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	695b      	ldr	r3, [r3, #20]
 800696c:	029b      	lsls	r3, r3, #10
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	4313      	orrs	r3, r2
 8006972:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	697a      	ldr	r2, [r7, #20]
 8006978:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	685a      	ldr	r2, [r3, #4]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	621a      	str	r2, [r3, #32]
}
 800698e:	bf00      	nop
 8006990:	371c      	adds	r7, #28
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	feff8fff 	.word	0xfeff8fff
 80069a0:	40010000 	.word	0x40010000
 80069a4:	40010400 	.word	0x40010400

080069a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d101      	bne.n	80069c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069bc:	2302      	movs	r3, #2
 80069be:	e06d      	b.n	8006a9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2202      	movs	r2, #2
 80069cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a30      	ldr	r2, [pc, #192]	; (8006aa8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d004      	beq.n	80069f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a2f      	ldr	r2, [pc, #188]	; (8006aac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d108      	bne.n	8006a06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80069fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a20      	ldr	r2, [pc, #128]	; (8006aa8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d022      	beq.n	8006a70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a32:	d01d      	beq.n	8006a70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a1d      	ldr	r2, [pc, #116]	; (8006ab0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d018      	beq.n	8006a70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a1c      	ldr	r2, [pc, #112]	; (8006ab4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d013      	beq.n	8006a70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a1a      	ldr	r2, [pc, #104]	; (8006ab8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d00e      	beq.n	8006a70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a15      	ldr	r2, [pc, #84]	; (8006aac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d009      	beq.n	8006a70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a16      	ldr	r2, [pc, #88]	; (8006abc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d004      	beq.n	8006a70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a15      	ldr	r2, [pc, #84]	; (8006ac0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d10c      	bne.n	8006a8a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	68ba      	ldr	r2, [r7, #8]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68ba      	ldr	r2, [r7, #8]
 8006a88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3714      	adds	r7, #20
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr
 8006aa8:	40010000 	.word	0x40010000
 8006aac:	40010400 	.word	0x40010400
 8006ab0:	40000400 	.word	0x40000400
 8006ab4:	40000800 	.word	0x40000800
 8006ab8:	40000c00 	.word	0x40000c00
 8006abc:	40014000 	.word	0x40014000
 8006ac0:	40001800 	.word	0x40001800

08006ac4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b085      	sub	sp, #20
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d101      	bne.n	8006ae0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006adc:	2302      	movs	r3, #2
 8006ade:	e065      	b.n	8006bac <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	695b      	ldr	r3, [r3, #20]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b46:	4313      	orrs	r3, r2
 8006b48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	699b      	ldr	r3, [r3, #24]
 8006b54:	041b      	lsls	r3, r3, #16
 8006b56:	4313      	orrs	r3, r2
 8006b58:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a16      	ldr	r2, [pc, #88]	; (8006bb8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d004      	beq.n	8006b6e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a14      	ldr	r2, [pc, #80]	; (8006bbc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d115      	bne.n	8006b9a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b78:	051b      	lsls	r3, r3, #20
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	69db      	ldr	r3, [r3, #28]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	6a1b      	ldr	r3, [r3, #32]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3714      	adds	r7, #20
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr
 8006bb8:	40010000 	.word	0x40010000
 8006bbc:	40010400 	.word	0x40010400

08006bc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bc8:	bf00      	nop
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006bdc:	bf00      	nop
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006bf0:	bf00      	nop
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b082      	sub	sp, #8
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d101      	bne.n	8006c0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e040      	b.n	8006c90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d106      	bne.n	8006c24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f7fc fbea 	bl	80033f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2224      	movs	r2, #36	; 0x24
 8006c28:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f022 0201 	bic.w	r2, r2, #1
 8006c38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 fcae 	bl	800759c <UART_SetConfig>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d101      	bne.n	8006c4a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e022      	b.n	8006c90 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d002      	beq.n	8006c58 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 ff06 	bl	8007a64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	685a      	ldr	r2, [r3, #4]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	689a      	ldr	r2, [r3, #8]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f042 0201 	orr.w	r2, r2, #1
 8006c86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 ff8d 	bl	8007ba8 <UART_CheckIdleState>
 8006c8e:	4603      	mov	r3, r0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3708      	adds	r7, #8
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b08a      	sub	sp, #40	; 0x28
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006caa:	2b20      	cmp	r3, #32
 8006cac:	d165      	bne.n	8006d7a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d002      	beq.n	8006cba <HAL_UART_Transmit_DMA+0x22>
 8006cb4:	88fb      	ldrh	r3, [r7, #6]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d101      	bne.n	8006cbe <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e05e      	b.n	8006d7c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	68ba      	ldr	r2, [r7, #8]
 8006cc2:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	88fa      	ldrh	r2, [r7, #6]
 8006cc8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	88fa      	ldrh	r2, [r7, #6]
 8006cd0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2221      	movs	r2, #33	; 0x21
 8006ce0:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d027      	beq.n	8006d3a <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cee:	4a25      	ldr	r2, [pc, #148]	; (8006d84 <HAL_UART_Transmit_DMA+0xec>)
 8006cf0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cf6:	4a24      	ldr	r2, [pc, #144]	; (8006d88 <HAL_UART_Transmit_DMA+0xf0>)
 8006cf8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cfe:	4a23      	ldr	r2, [pc, #140]	; (8006d8c <HAL_UART_Transmit_DMA+0xf4>)
 8006d00:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d06:	2200      	movs	r2, #0
 8006d08:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d12:	4619      	mov	r1, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	3328      	adds	r3, #40	; 0x28
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	88fb      	ldrh	r3, [r7, #6]
 8006d1e:	f7fc fef5 	bl	8003b0c <HAL_DMA_Start_IT>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d008      	beq.n	8006d3a <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2210      	movs	r2, #16
 8006d2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2220      	movs	r2, #32
 8006d34:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e020      	b.n	8006d7c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2240      	movs	r2, #64	; 0x40
 8006d40:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	3308      	adds	r3, #8
 8006d48:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	e853 3f00 	ldrex	r3, [r3]
 8006d50:	613b      	str	r3, [r7, #16]
   return(result);
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d58:	627b      	str	r3, [r7, #36]	; 0x24
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	3308      	adds	r3, #8
 8006d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d62:	623a      	str	r2, [r7, #32]
 8006d64:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d66:	69f9      	ldr	r1, [r7, #28]
 8006d68:	6a3a      	ldr	r2, [r7, #32]
 8006d6a:	e841 2300 	strex	r3, r2, [r1]
 8006d6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1e5      	bne.n	8006d42 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8006d76:	2300      	movs	r3, #0
 8006d78:	e000      	b.n	8006d7c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8006d7a:	2302      	movs	r3, #2
  }
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3728      	adds	r7, #40	; 0x28
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	08008025 	.word	0x08008025
 8006d88:	080080bb 	.word	0x080080bb
 8006d8c:	0800823d 	.word	0x0800823d

08006d90 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b08a      	sub	sp, #40	; 0x28
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006da4:	2b20      	cmp	r3, #32
 8006da6:	d132      	bne.n	8006e0e <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d002      	beq.n	8006db4 <HAL_UART_Receive_DMA+0x24>
 8006dae:	88fb      	ldrh	r3, [r7, #6]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d101      	bne.n	8006db8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	e02b      	b.n	8006e10 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d018      	beq.n	8006dfe <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	e853 3f00 	ldrex	r3, [r3]
 8006dd8:	613b      	str	r3, [r7, #16]
   return(result);
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006de0:	627b      	str	r3, [r7, #36]	; 0x24
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	461a      	mov	r2, r3
 8006de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dea:	623b      	str	r3, [r7, #32]
 8006dec:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dee:	69f9      	ldr	r1, [r7, #28]
 8006df0:	6a3a      	ldr	r2, [r7, #32]
 8006df2:	e841 2300 	strex	r3, r2, [r1]
 8006df6:	61bb      	str	r3, [r7, #24]
   return(result);
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1e6      	bne.n	8006dcc <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006dfe:	88fb      	ldrh	r3, [r7, #6]
 8006e00:	461a      	mov	r2, r3
 8006e02:	68b9      	ldr	r1, [r7, #8]
 8006e04:	68f8      	ldr	r0, [r7, #12]
 8006e06:	f000 ffe3 	bl	8007dd0 <UART_Start_Receive_DMA>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	e000      	b.n	8006e10 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006e0e:	2302      	movs	r3, #2
  }
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3728      	adds	r7, #40	; 0x28
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b090      	sub	sp, #64	; 0x40
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e24:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e2c:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e38:	2b80      	cmp	r3, #128	; 0x80
 8006e3a:	d139      	bne.n	8006eb0 <HAL_UART_DMAStop+0x98>
 8006e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e3e:	2b21      	cmp	r3, #33	; 0x21
 8006e40:	d136      	bne.n	8006eb0 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	3308      	adds	r3, #8
 8006e48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4a:	6a3b      	ldr	r3, [r7, #32]
 8006e4c:	e853 3f00 	ldrex	r3, [r3]
 8006e50:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e58:	637b      	str	r3, [r7, #52]	; 0x34
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	3308      	adds	r3, #8
 8006e60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e6a:	e841 2300 	strex	r3, r2, [r1]
 8006e6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1e5      	bne.n	8006e42 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d015      	beq.n	8006eaa <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7fc fea2 	bl	8003bcc <HAL_DMA_Abort>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00d      	beq.n	8006eaa <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e92:	4618      	mov	r0, r3
 8006e94:	f7fd f8b6 	bl	8004004 <HAL_DMA_GetError>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b20      	cmp	r3, #32
 8006e9c:	d105      	bne.n	8006eaa <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2210      	movs	r2, #16
 8006ea2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	e044      	b.n	8006f34 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f001 f830 	bl	8007f10 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eba:	2b40      	cmp	r3, #64	; 0x40
 8006ebc:	d139      	bne.n	8006f32 <HAL_UART_DMAStop+0x11a>
 8006ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec0:	2b22      	cmp	r3, #34	; 0x22
 8006ec2:	d136      	bne.n	8006f32 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	3308      	adds	r3, #8
 8006eca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	e853 3f00 	ldrex	r3, [r3]
 8006ed2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eda:	633b      	str	r3, [r7, #48]	; 0x30
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	3308      	adds	r3, #8
 8006ee2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ee4:	61ba      	str	r2, [r7, #24]
 8006ee6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee8:	6979      	ldr	r1, [r7, #20]
 8006eea:	69ba      	ldr	r2, [r7, #24]
 8006eec:	e841 2300 	strex	r3, r2, [r1]
 8006ef0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d1e5      	bne.n	8006ec4 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d015      	beq.n	8006f2c <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f04:	4618      	mov	r0, r3
 8006f06:	f7fc fe61 	bl	8003bcc <HAL_DMA_Abort>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00d      	beq.n	8006f2c <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7fd f875 	bl	8004004 <HAL_DMA_GetError>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b20      	cmp	r3, #32
 8006f1e:	d105      	bne.n	8006f2c <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2210      	movs	r2, #16
 8006f24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006f28:	2303      	movs	r3, #3
 8006f2a:	e003      	b.n	8006f34 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f001 f815 	bl	8007f5c <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3740      	adds	r7, #64	; 0x40
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b0ba      	sub	sp, #232	; 0xe8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	69db      	ldr	r3, [r3, #28]
 8006f4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006f62:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006f66:	f640 030f 	movw	r3, #2063	; 0x80f
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006f70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d115      	bne.n	8006fa4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f7c:	f003 0320 	and.w	r3, r3, #32
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d00f      	beq.n	8006fa4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f88:	f003 0320 	and.w	r3, r3, #32
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d009      	beq.n	8006fa4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f000 82ac 	beq.w	80074f2 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	4798      	blx	r3
      }
      return;
 8006fa2:	e2a6      	b.n	80074f2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006fa4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f000 8117 	beq.w	80071dc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006fae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fb2:	f003 0301 	and.w	r3, r3, #1
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d106      	bne.n	8006fc8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006fba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006fbe:	4b85      	ldr	r3, [pc, #532]	; (80071d4 <HAL_UART_IRQHandler+0x298>)
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f000 810a 	beq.w	80071dc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fcc:	f003 0301 	and.w	r3, r3, #1
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d011      	beq.n	8006ff8 <HAL_UART_IRQHandler+0xbc>
 8006fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00b      	beq.n	8006ff8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fee:	f043 0201 	orr.w	r2, r3, #1
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ffc:	f003 0302 	and.w	r3, r3, #2
 8007000:	2b00      	cmp	r3, #0
 8007002:	d011      	beq.n	8007028 <HAL_UART_IRQHandler+0xec>
 8007004:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007008:	f003 0301 	and.w	r3, r3, #1
 800700c:	2b00      	cmp	r3, #0
 800700e:	d00b      	beq.n	8007028 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2202      	movs	r2, #2
 8007016:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800701e:	f043 0204 	orr.w	r2, r3, #4
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800702c:	f003 0304 	and.w	r3, r3, #4
 8007030:	2b00      	cmp	r3, #0
 8007032:	d011      	beq.n	8007058 <HAL_UART_IRQHandler+0x11c>
 8007034:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007038:	f003 0301 	and.w	r3, r3, #1
 800703c:	2b00      	cmp	r3, #0
 800703e:	d00b      	beq.n	8007058 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2204      	movs	r2, #4
 8007046:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800704e:	f043 0202 	orr.w	r2, r3, #2
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800705c:	f003 0308 	and.w	r3, r3, #8
 8007060:	2b00      	cmp	r3, #0
 8007062:	d017      	beq.n	8007094 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007068:	f003 0320 	and.w	r3, r3, #32
 800706c:	2b00      	cmp	r3, #0
 800706e:	d105      	bne.n	800707c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007070:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007074:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00b      	beq.n	8007094 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2208      	movs	r2, #8
 8007082:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800708a:	f043 0208 	orr.w	r2, r3, #8
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007098:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800709c:	2b00      	cmp	r3, #0
 800709e:	d012      	beq.n	80070c6 <HAL_UART_IRQHandler+0x18a>
 80070a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d00c      	beq.n	80070c6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070bc:	f043 0220 	orr.w	r2, r3, #32
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f000 8212 	beq.w	80074f6 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80070d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070d6:	f003 0320 	and.w	r3, r3, #32
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00d      	beq.n	80070fa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80070de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070e2:	f003 0320 	and.w	r3, r3, #32
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d007      	beq.n	80070fa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d003      	beq.n	80070fa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007100:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800710e:	2b40      	cmp	r3, #64	; 0x40
 8007110:	d005      	beq.n	800711e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007112:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007116:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800711a:	2b00      	cmp	r3, #0
 800711c:	d04f      	beq.n	80071be <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 ff1c 	bl	8007f5c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800712e:	2b40      	cmp	r3, #64	; 0x40
 8007130:	d141      	bne.n	80071b6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	3308      	adds	r3, #8
 8007138:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007140:	e853 3f00 	ldrex	r3, [r3]
 8007144:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007148:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800714c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007150:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	3308      	adds	r3, #8
 800715a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800715e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007162:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007166:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800716a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800716e:	e841 2300 	strex	r3, r2, [r1]
 8007172:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007176:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1d9      	bne.n	8007132 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007182:	2b00      	cmp	r3, #0
 8007184:	d013      	beq.n	80071ae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800718a:	4a13      	ldr	r2, [pc, #76]	; (80071d8 <HAL_UART_IRQHandler+0x29c>)
 800718c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007192:	4618      	mov	r0, r3
 8007194:	f7fc fd8a 	bl	8003cac <HAL_DMA_Abort_IT>
 8007198:	4603      	mov	r3, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	d017      	beq.n	80071ce <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80071a8:	4610      	mov	r0, r2
 80071aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071ac:	e00f      	b.n	80071ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f9d4 	bl	800755c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071b4:	e00b      	b.n	80071ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f9d0 	bl	800755c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071bc:	e007      	b.n	80071ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 f9cc 	bl	800755c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80071cc:	e193      	b.n	80074f6 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071ce:	bf00      	nop
    return;
 80071d0:	e191      	b.n	80074f6 <HAL_UART_IRQHandler+0x5ba>
 80071d2:	bf00      	nop
 80071d4:	04000120 	.word	0x04000120
 80071d8:	080082bb 	.word	0x080082bb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	f040 814c 	bne.w	800747e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80071e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ea:	f003 0310 	and.w	r3, r3, #16
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	f000 8145 	beq.w	800747e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80071f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071f8:	f003 0310 	and.w	r3, r3, #16
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f000 813e 	beq.w	800747e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2210      	movs	r2, #16
 8007208:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007214:	2b40      	cmp	r3, #64	; 0x40
 8007216:	f040 80b6 	bne.w	8007386 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007226:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800722a:	2b00      	cmp	r3, #0
 800722c:	f000 8165 	beq.w	80074fa <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007236:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800723a:	429a      	cmp	r2, r3
 800723c:	f080 815d 	bcs.w	80074fa <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007246:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800724e:	69db      	ldr	r3, [r3, #28]
 8007250:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007254:	f000 8086 	beq.w	8007364 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007260:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007264:	e853 3f00 	ldrex	r3, [r3]
 8007268:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800726c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007274:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	461a      	mov	r2, r3
 800727e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007282:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007286:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800728e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007292:	e841 2300 	strex	r3, r2, [r1]
 8007296:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800729a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1da      	bne.n	8007258 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	3308      	adds	r3, #8
 80072a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072ac:	e853 3f00 	ldrex	r3, [r3]
 80072b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80072b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072b4:	f023 0301 	bic.w	r3, r3, #1
 80072b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	3308      	adds	r3, #8
 80072c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80072c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80072ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80072ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80072d2:	e841 2300 	strex	r3, r2, [r1]
 80072d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80072d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1e1      	bne.n	80072a2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	3308      	adds	r3, #8
 80072e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072e8:	e853 3f00 	ldrex	r3, [r3]
 80072ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80072ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	3308      	adds	r3, #8
 80072fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007302:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007304:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007306:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007308:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800730a:	e841 2300 	strex	r3, r2, [r1]
 800730e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007310:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1e3      	bne.n	80072de <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2220      	movs	r2, #32
 800731a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800732c:	e853 3f00 	ldrex	r3, [r3]
 8007330:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007332:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007334:	f023 0310 	bic.w	r3, r3, #16
 8007338:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	461a      	mov	r2, r3
 8007342:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007346:	65bb      	str	r3, [r7, #88]	; 0x58
 8007348:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800734a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800734c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800734e:	e841 2300 	strex	r3, r2, [r1]
 8007352:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007356:	2b00      	cmp	r3, #0
 8007358:	d1e4      	bne.n	8007324 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800735e:	4618      	mov	r0, r3
 8007360:	f7fc fc34 	bl	8003bcc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2202      	movs	r2, #2
 8007368:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007376:	b29b      	uxth	r3, r3
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	b29b      	uxth	r3, r3
 800737c:	4619      	mov	r1, r3
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 f8f6 	bl	8007570 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007384:	e0b9      	b.n	80074fa <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007392:	b29b      	uxth	r3, r3
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	f000 80ab 	beq.w	80074fe <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80073a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f000 80a6 	beq.w	80074fe <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ba:	e853 3f00 	ldrex	r3, [r3]
 80073be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80073c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	461a      	mov	r2, r3
 80073d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80073d4:	647b      	str	r3, [r7, #68]	; 0x44
 80073d6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80073da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073dc:	e841 2300 	strex	r3, r2, [r1]
 80073e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80073e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d1e4      	bne.n	80073b2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	3308      	adds	r3, #8
 80073ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f2:	e853 3f00 	ldrex	r3, [r3]
 80073f6:	623b      	str	r3, [r7, #32]
   return(result);
 80073f8:	6a3b      	ldr	r3, [r7, #32]
 80073fa:	f023 0301 	bic.w	r3, r3, #1
 80073fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	3308      	adds	r3, #8
 8007408:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800740c:	633a      	str	r2, [r7, #48]	; 0x30
 800740e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007410:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007412:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007414:	e841 2300 	strex	r3, r2, [r1]
 8007418:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800741a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741c:	2b00      	cmp	r3, #0
 800741e:	d1e3      	bne.n	80073e8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2220      	movs	r2, #32
 8007424:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	e853 3f00 	ldrex	r3, [r3]
 8007440:	60fb      	str	r3, [r7, #12]
   return(result);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f023 0310 	bic.w	r3, r3, #16
 8007448:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	461a      	mov	r2, r3
 8007452:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007456:	61fb      	str	r3, [r7, #28]
 8007458:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745a:	69b9      	ldr	r1, [r7, #24]
 800745c:	69fa      	ldr	r2, [r7, #28]
 800745e:	e841 2300 	strex	r3, r2, [r1]
 8007462:	617b      	str	r3, [r7, #20]
   return(result);
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1e4      	bne.n	8007434 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2202      	movs	r2, #2
 800746e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007470:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007474:	4619      	mov	r1, r3
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 f87a 	bl	8007570 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800747c:	e03f      	b.n	80074fe <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800747e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007482:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007486:	2b00      	cmp	r3, #0
 8007488:	d00e      	beq.n	80074a8 <HAL_UART_IRQHandler+0x56c>
 800748a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800748e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007492:	2b00      	cmp	r3, #0
 8007494:	d008      	beq.n	80074a8 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800749e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 f871 	bl	8007588 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80074a6:	e02d      	b.n	8007504 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80074a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00e      	beq.n	80074d2 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80074b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d008      	beq.n	80074d2 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d01c      	beq.n	8007502 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	4798      	blx	r3
    }
    return;
 80074d0:	e017      	b.n	8007502 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80074d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d012      	beq.n	8007504 <HAL_UART_IRQHandler+0x5c8>
 80074de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00c      	beq.n	8007504 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 fefb 	bl	80082e6 <UART_EndTransmit_IT>
    return;
 80074f0:	e008      	b.n	8007504 <HAL_UART_IRQHandler+0x5c8>
      return;
 80074f2:	bf00      	nop
 80074f4:	e006      	b.n	8007504 <HAL_UART_IRQHandler+0x5c8>
    return;
 80074f6:	bf00      	nop
 80074f8:	e004      	b.n	8007504 <HAL_UART_IRQHandler+0x5c8>
      return;
 80074fa:	bf00      	nop
 80074fc:	e002      	b.n	8007504 <HAL_UART_IRQHandler+0x5c8>
      return;
 80074fe:	bf00      	nop
 8007500:	e000      	b.n	8007504 <HAL_UART_IRQHandler+0x5c8>
    return;
 8007502:	bf00      	nop
  }

}
 8007504:	37e8      	adds	r7, #232	; 0xe8
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop

0800750c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007514:	bf00      	nop
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007528:	bf00      	nop
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800753c:	bf00      	nop
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007550:	bf00      	nop
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007564:	bf00      	nop
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	460b      	mov	r3, r1
 800757a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800757c:	bf00      	nop
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007590:	bf00      	nop
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b088      	sub	sp, #32
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80075a4:	2300      	movs	r3, #0
 80075a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	689a      	ldr	r2, [r3, #8]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	691b      	ldr	r3, [r3, #16]
 80075b0:	431a      	orrs	r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	695b      	ldr	r3, [r3, #20]
 80075b6:	431a      	orrs	r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	69db      	ldr	r3, [r3, #28]
 80075bc:	4313      	orrs	r3, r2
 80075be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	4ba6      	ldr	r3, [pc, #664]	; (8007860 <UART_SetConfig+0x2c4>)
 80075c8:	4013      	ands	r3, r2
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	6812      	ldr	r2, [r2, #0]
 80075ce:	6979      	ldr	r1, [r7, #20]
 80075d0:	430b      	orrs	r3, r1
 80075d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	68da      	ldr	r2, [r3, #12]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	430a      	orrs	r2, r1
 80075e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a1b      	ldr	r3, [r3, #32]
 80075f4:	697a      	ldr	r2, [r7, #20]
 80075f6:	4313      	orrs	r3, r2
 80075f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	697a      	ldr	r2, [r7, #20]
 800760a:	430a      	orrs	r2, r1
 800760c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a94      	ldr	r2, [pc, #592]	; (8007864 <UART_SetConfig+0x2c8>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d120      	bne.n	800765a <UART_SetConfig+0xbe>
 8007618:	4b93      	ldr	r3, [pc, #588]	; (8007868 <UART_SetConfig+0x2cc>)
 800761a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800761e:	f003 0303 	and.w	r3, r3, #3
 8007622:	2b03      	cmp	r3, #3
 8007624:	d816      	bhi.n	8007654 <UART_SetConfig+0xb8>
 8007626:	a201      	add	r2, pc, #4	; (adr r2, 800762c <UART_SetConfig+0x90>)
 8007628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800762c:	0800763d 	.word	0x0800763d
 8007630:	08007649 	.word	0x08007649
 8007634:	08007643 	.word	0x08007643
 8007638:	0800764f 	.word	0x0800764f
 800763c:	2301      	movs	r3, #1
 800763e:	77fb      	strb	r3, [r7, #31]
 8007640:	e150      	b.n	80078e4 <UART_SetConfig+0x348>
 8007642:	2302      	movs	r3, #2
 8007644:	77fb      	strb	r3, [r7, #31]
 8007646:	e14d      	b.n	80078e4 <UART_SetConfig+0x348>
 8007648:	2304      	movs	r3, #4
 800764a:	77fb      	strb	r3, [r7, #31]
 800764c:	e14a      	b.n	80078e4 <UART_SetConfig+0x348>
 800764e:	2308      	movs	r3, #8
 8007650:	77fb      	strb	r3, [r7, #31]
 8007652:	e147      	b.n	80078e4 <UART_SetConfig+0x348>
 8007654:	2310      	movs	r3, #16
 8007656:	77fb      	strb	r3, [r7, #31]
 8007658:	e144      	b.n	80078e4 <UART_SetConfig+0x348>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a83      	ldr	r2, [pc, #524]	; (800786c <UART_SetConfig+0x2d0>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d132      	bne.n	80076ca <UART_SetConfig+0x12e>
 8007664:	4b80      	ldr	r3, [pc, #512]	; (8007868 <UART_SetConfig+0x2cc>)
 8007666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800766a:	f003 030c 	and.w	r3, r3, #12
 800766e:	2b0c      	cmp	r3, #12
 8007670:	d828      	bhi.n	80076c4 <UART_SetConfig+0x128>
 8007672:	a201      	add	r2, pc, #4	; (adr r2, 8007678 <UART_SetConfig+0xdc>)
 8007674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007678:	080076ad 	.word	0x080076ad
 800767c:	080076c5 	.word	0x080076c5
 8007680:	080076c5 	.word	0x080076c5
 8007684:	080076c5 	.word	0x080076c5
 8007688:	080076b9 	.word	0x080076b9
 800768c:	080076c5 	.word	0x080076c5
 8007690:	080076c5 	.word	0x080076c5
 8007694:	080076c5 	.word	0x080076c5
 8007698:	080076b3 	.word	0x080076b3
 800769c:	080076c5 	.word	0x080076c5
 80076a0:	080076c5 	.word	0x080076c5
 80076a4:	080076c5 	.word	0x080076c5
 80076a8:	080076bf 	.word	0x080076bf
 80076ac:	2300      	movs	r3, #0
 80076ae:	77fb      	strb	r3, [r7, #31]
 80076b0:	e118      	b.n	80078e4 <UART_SetConfig+0x348>
 80076b2:	2302      	movs	r3, #2
 80076b4:	77fb      	strb	r3, [r7, #31]
 80076b6:	e115      	b.n	80078e4 <UART_SetConfig+0x348>
 80076b8:	2304      	movs	r3, #4
 80076ba:	77fb      	strb	r3, [r7, #31]
 80076bc:	e112      	b.n	80078e4 <UART_SetConfig+0x348>
 80076be:	2308      	movs	r3, #8
 80076c0:	77fb      	strb	r3, [r7, #31]
 80076c2:	e10f      	b.n	80078e4 <UART_SetConfig+0x348>
 80076c4:	2310      	movs	r3, #16
 80076c6:	77fb      	strb	r3, [r7, #31]
 80076c8:	e10c      	b.n	80078e4 <UART_SetConfig+0x348>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a68      	ldr	r2, [pc, #416]	; (8007870 <UART_SetConfig+0x2d4>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d120      	bne.n	8007716 <UART_SetConfig+0x17a>
 80076d4:	4b64      	ldr	r3, [pc, #400]	; (8007868 <UART_SetConfig+0x2cc>)
 80076d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076da:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80076de:	2b30      	cmp	r3, #48	; 0x30
 80076e0:	d013      	beq.n	800770a <UART_SetConfig+0x16e>
 80076e2:	2b30      	cmp	r3, #48	; 0x30
 80076e4:	d814      	bhi.n	8007710 <UART_SetConfig+0x174>
 80076e6:	2b20      	cmp	r3, #32
 80076e8:	d009      	beq.n	80076fe <UART_SetConfig+0x162>
 80076ea:	2b20      	cmp	r3, #32
 80076ec:	d810      	bhi.n	8007710 <UART_SetConfig+0x174>
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d002      	beq.n	80076f8 <UART_SetConfig+0x15c>
 80076f2:	2b10      	cmp	r3, #16
 80076f4:	d006      	beq.n	8007704 <UART_SetConfig+0x168>
 80076f6:	e00b      	b.n	8007710 <UART_SetConfig+0x174>
 80076f8:	2300      	movs	r3, #0
 80076fa:	77fb      	strb	r3, [r7, #31]
 80076fc:	e0f2      	b.n	80078e4 <UART_SetConfig+0x348>
 80076fe:	2302      	movs	r3, #2
 8007700:	77fb      	strb	r3, [r7, #31]
 8007702:	e0ef      	b.n	80078e4 <UART_SetConfig+0x348>
 8007704:	2304      	movs	r3, #4
 8007706:	77fb      	strb	r3, [r7, #31]
 8007708:	e0ec      	b.n	80078e4 <UART_SetConfig+0x348>
 800770a:	2308      	movs	r3, #8
 800770c:	77fb      	strb	r3, [r7, #31]
 800770e:	e0e9      	b.n	80078e4 <UART_SetConfig+0x348>
 8007710:	2310      	movs	r3, #16
 8007712:	77fb      	strb	r3, [r7, #31]
 8007714:	e0e6      	b.n	80078e4 <UART_SetConfig+0x348>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a56      	ldr	r2, [pc, #344]	; (8007874 <UART_SetConfig+0x2d8>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d120      	bne.n	8007762 <UART_SetConfig+0x1c6>
 8007720:	4b51      	ldr	r3, [pc, #324]	; (8007868 <UART_SetConfig+0x2cc>)
 8007722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007726:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800772a:	2bc0      	cmp	r3, #192	; 0xc0
 800772c:	d013      	beq.n	8007756 <UART_SetConfig+0x1ba>
 800772e:	2bc0      	cmp	r3, #192	; 0xc0
 8007730:	d814      	bhi.n	800775c <UART_SetConfig+0x1c0>
 8007732:	2b80      	cmp	r3, #128	; 0x80
 8007734:	d009      	beq.n	800774a <UART_SetConfig+0x1ae>
 8007736:	2b80      	cmp	r3, #128	; 0x80
 8007738:	d810      	bhi.n	800775c <UART_SetConfig+0x1c0>
 800773a:	2b00      	cmp	r3, #0
 800773c:	d002      	beq.n	8007744 <UART_SetConfig+0x1a8>
 800773e:	2b40      	cmp	r3, #64	; 0x40
 8007740:	d006      	beq.n	8007750 <UART_SetConfig+0x1b4>
 8007742:	e00b      	b.n	800775c <UART_SetConfig+0x1c0>
 8007744:	2300      	movs	r3, #0
 8007746:	77fb      	strb	r3, [r7, #31]
 8007748:	e0cc      	b.n	80078e4 <UART_SetConfig+0x348>
 800774a:	2302      	movs	r3, #2
 800774c:	77fb      	strb	r3, [r7, #31]
 800774e:	e0c9      	b.n	80078e4 <UART_SetConfig+0x348>
 8007750:	2304      	movs	r3, #4
 8007752:	77fb      	strb	r3, [r7, #31]
 8007754:	e0c6      	b.n	80078e4 <UART_SetConfig+0x348>
 8007756:	2308      	movs	r3, #8
 8007758:	77fb      	strb	r3, [r7, #31]
 800775a:	e0c3      	b.n	80078e4 <UART_SetConfig+0x348>
 800775c:	2310      	movs	r3, #16
 800775e:	77fb      	strb	r3, [r7, #31]
 8007760:	e0c0      	b.n	80078e4 <UART_SetConfig+0x348>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a44      	ldr	r2, [pc, #272]	; (8007878 <UART_SetConfig+0x2dc>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d125      	bne.n	80077b8 <UART_SetConfig+0x21c>
 800776c:	4b3e      	ldr	r3, [pc, #248]	; (8007868 <UART_SetConfig+0x2cc>)
 800776e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007776:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800777a:	d017      	beq.n	80077ac <UART_SetConfig+0x210>
 800777c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007780:	d817      	bhi.n	80077b2 <UART_SetConfig+0x216>
 8007782:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007786:	d00b      	beq.n	80077a0 <UART_SetConfig+0x204>
 8007788:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800778c:	d811      	bhi.n	80077b2 <UART_SetConfig+0x216>
 800778e:	2b00      	cmp	r3, #0
 8007790:	d003      	beq.n	800779a <UART_SetConfig+0x1fe>
 8007792:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007796:	d006      	beq.n	80077a6 <UART_SetConfig+0x20a>
 8007798:	e00b      	b.n	80077b2 <UART_SetConfig+0x216>
 800779a:	2300      	movs	r3, #0
 800779c:	77fb      	strb	r3, [r7, #31]
 800779e:	e0a1      	b.n	80078e4 <UART_SetConfig+0x348>
 80077a0:	2302      	movs	r3, #2
 80077a2:	77fb      	strb	r3, [r7, #31]
 80077a4:	e09e      	b.n	80078e4 <UART_SetConfig+0x348>
 80077a6:	2304      	movs	r3, #4
 80077a8:	77fb      	strb	r3, [r7, #31]
 80077aa:	e09b      	b.n	80078e4 <UART_SetConfig+0x348>
 80077ac:	2308      	movs	r3, #8
 80077ae:	77fb      	strb	r3, [r7, #31]
 80077b0:	e098      	b.n	80078e4 <UART_SetConfig+0x348>
 80077b2:	2310      	movs	r3, #16
 80077b4:	77fb      	strb	r3, [r7, #31]
 80077b6:	e095      	b.n	80078e4 <UART_SetConfig+0x348>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a2f      	ldr	r2, [pc, #188]	; (800787c <UART_SetConfig+0x2e0>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d125      	bne.n	800780e <UART_SetConfig+0x272>
 80077c2:	4b29      	ldr	r3, [pc, #164]	; (8007868 <UART_SetConfig+0x2cc>)
 80077c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80077cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80077d0:	d017      	beq.n	8007802 <UART_SetConfig+0x266>
 80077d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80077d6:	d817      	bhi.n	8007808 <UART_SetConfig+0x26c>
 80077d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077dc:	d00b      	beq.n	80077f6 <UART_SetConfig+0x25a>
 80077de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077e2:	d811      	bhi.n	8007808 <UART_SetConfig+0x26c>
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d003      	beq.n	80077f0 <UART_SetConfig+0x254>
 80077e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077ec:	d006      	beq.n	80077fc <UART_SetConfig+0x260>
 80077ee:	e00b      	b.n	8007808 <UART_SetConfig+0x26c>
 80077f0:	2301      	movs	r3, #1
 80077f2:	77fb      	strb	r3, [r7, #31]
 80077f4:	e076      	b.n	80078e4 <UART_SetConfig+0x348>
 80077f6:	2302      	movs	r3, #2
 80077f8:	77fb      	strb	r3, [r7, #31]
 80077fa:	e073      	b.n	80078e4 <UART_SetConfig+0x348>
 80077fc:	2304      	movs	r3, #4
 80077fe:	77fb      	strb	r3, [r7, #31]
 8007800:	e070      	b.n	80078e4 <UART_SetConfig+0x348>
 8007802:	2308      	movs	r3, #8
 8007804:	77fb      	strb	r3, [r7, #31]
 8007806:	e06d      	b.n	80078e4 <UART_SetConfig+0x348>
 8007808:	2310      	movs	r3, #16
 800780a:	77fb      	strb	r3, [r7, #31]
 800780c:	e06a      	b.n	80078e4 <UART_SetConfig+0x348>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a1b      	ldr	r2, [pc, #108]	; (8007880 <UART_SetConfig+0x2e4>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d138      	bne.n	800788a <UART_SetConfig+0x2ee>
 8007818:	4b13      	ldr	r3, [pc, #76]	; (8007868 <UART_SetConfig+0x2cc>)
 800781a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800781e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007822:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007826:	d017      	beq.n	8007858 <UART_SetConfig+0x2bc>
 8007828:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800782c:	d82a      	bhi.n	8007884 <UART_SetConfig+0x2e8>
 800782e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007832:	d00b      	beq.n	800784c <UART_SetConfig+0x2b0>
 8007834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007838:	d824      	bhi.n	8007884 <UART_SetConfig+0x2e8>
 800783a:	2b00      	cmp	r3, #0
 800783c:	d003      	beq.n	8007846 <UART_SetConfig+0x2aa>
 800783e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007842:	d006      	beq.n	8007852 <UART_SetConfig+0x2b6>
 8007844:	e01e      	b.n	8007884 <UART_SetConfig+0x2e8>
 8007846:	2300      	movs	r3, #0
 8007848:	77fb      	strb	r3, [r7, #31]
 800784a:	e04b      	b.n	80078e4 <UART_SetConfig+0x348>
 800784c:	2302      	movs	r3, #2
 800784e:	77fb      	strb	r3, [r7, #31]
 8007850:	e048      	b.n	80078e4 <UART_SetConfig+0x348>
 8007852:	2304      	movs	r3, #4
 8007854:	77fb      	strb	r3, [r7, #31]
 8007856:	e045      	b.n	80078e4 <UART_SetConfig+0x348>
 8007858:	2308      	movs	r3, #8
 800785a:	77fb      	strb	r3, [r7, #31]
 800785c:	e042      	b.n	80078e4 <UART_SetConfig+0x348>
 800785e:	bf00      	nop
 8007860:	efff69f3 	.word	0xefff69f3
 8007864:	40011000 	.word	0x40011000
 8007868:	40023800 	.word	0x40023800
 800786c:	40004400 	.word	0x40004400
 8007870:	40004800 	.word	0x40004800
 8007874:	40004c00 	.word	0x40004c00
 8007878:	40005000 	.word	0x40005000
 800787c:	40011400 	.word	0x40011400
 8007880:	40007800 	.word	0x40007800
 8007884:	2310      	movs	r3, #16
 8007886:	77fb      	strb	r3, [r7, #31]
 8007888:	e02c      	b.n	80078e4 <UART_SetConfig+0x348>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a72      	ldr	r2, [pc, #456]	; (8007a58 <UART_SetConfig+0x4bc>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d125      	bne.n	80078e0 <UART_SetConfig+0x344>
 8007894:	4b71      	ldr	r3, [pc, #452]	; (8007a5c <UART_SetConfig+0x4c0>)
 8007896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800789a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800789e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80078a2:	d017      	beq.n	80078d4 <UART_SetConfig+0x338>
 80078a4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80078a8:	d817      	bhi.n	80078da <UART_SetConfig+0x33e>
 80078aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078ae:	d00b      	beq.n	80078c8 <UART_SetConfig+0x32c>
 80078b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078b4:	d811      	bhi.n	80078da <UART_SetConfig+0x33e>
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d003      	beq.n	80078c2 <UART_SetConfig+0x326>
 80078ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078be:	d006      	beq.n	80078ce <UART_SetConfig+0x332>
 80078c0:	e00b      	b.n	80078da <UART_SetConfig+0x33e>
 80078c2:	2300      	movs	r3, #0
 80078c4:	77fb      	strb	r3, [r7, #31]
 80078c6:	e00d      	b.n	80078e4 <UART_SetConfig+0x348>
 80078c8:	2302      	movs	r3, #2
 80078ca:	77fb      	strb	r3, [r7, #31]
 80078cc:	e00a      	b.n	80078e4 <UART_SetConfig+0x348>
 80078ce:	2304      	movs	r3, #4
 80078d0:	77fb      	strb	r3, [r7, #31]
 80078d2:	e007      	b.n	80078e4 <UART_SetConfig+0x348>
 80078d4:	2308      	movs	r3, #8
 80078d6:	77fb      	strb	r3, [r7, #31]
 80078d8:	e004      	b.n	80078e4 <UART_SetConfig+0x348>
 80078da:	2310      	movs	r3, #16
 80078dc:	77fb      	strb	r3, [r7, #31]
 80078de:	e001      	b.n	80078e4 <UART_SetConfig+0x348>
 80078e0:	2310      	movs	r3, #16
 80078e2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	69db      	ldr	r3, [r3, #28]
 80078e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078ec:	d15b      	bne.n	80079a6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80078ee:	7ffb      	ldrb	r3, [r7, #31]
 80078f0:	2b08      	cmp	r3, #8
 80078f2:	d828      	bhi.n	8007946 <UART_SetConfig+0x3aa>
 80078f4:	a201      	add	r2, pc, #4	; (adr r2, 80078fc <UART_SetConfig+0x360>)
 80078f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078fa:	bf00      	nop
 80078fc:	08007921 	.word	0x08007921
 8007900:	08007929 	.word	0x08007929
 8007904:	08007931 	.word	0x08007931
 8007908:	08007947 	.word	0x08007947
 800790c:	08007937 	.word	0x08007937
 8007910:	08007947 	.word	0x08007947
 8007914:	08007947 	.word	0x08007947
 8007918:	08007947 	.word	0x08007947
 800791c:	0800793f 	.word	0x0800793f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007920:	f7fd fc8e 	bl	8005240 <HAL_RCC_GetPCLK1Freq>
 8007924:	61b8      	str	r0, [r7, #24]
        break;
 8007926:	e013      	b.n	8007950 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007928:	f7fd fc9e 	bl	8005268 <HAL_RCC_GetPCLK2Freq>
 800792c:	61b8      	str	r0, [r7, #24]
        break;
 800792e:	e00f      	b.n	8007950 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007930:	4b4b      	ldr	r3, [pc, #300]	; (8007a60 <UART_SetConfig+0x4c4>)
 8007932:	61bb      	str	r3, [r7, #24]
        break;
 8007934:	e00c      	b.n	8007950 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007936:	f7fd fb71 	bl	800501c <HAL_RCC_GetSysClockFreq>
 800793a:	61b8      	str	r0, [r7, #24]
        break;
 800793c:	e008      	b.n	8007950 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800793e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007942:	61bb      	str	r3, [r7, #24]
        break;
 8007944:	e004      	b.n	8007950 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007946:	2300      	movs	r3, #0
 8007948:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	77bb      	strb	r3, [r7, #30]
        break;
 800794e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007950:	69bb      	ldr	r3, [r7, #24]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d074      	beq.n	8007a40 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	005a      	lsls	r2, r3, #1
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	085b      	lsrs	r3, r3, #1
 8007960:	441a      	add	r2, r3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	fbb2 f3f3 	udiv	r3, r2, r3
 800796a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	2b0f      	cmp	r3, #15
 8007970:	d916      	bls.n	80079a0 <UART_SetConfig+0x404>
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007978:	d212      	bcs.n	80079a0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	b29b      	uxth	r3, r3
 800797e:	f023 030f 	bic.w	r3, r3, #15
 8007982:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	085b      	lsrs	r3, r3, #1
 8007988:	b29b      	uxth	r3, r3
 800798a:	f003 0307 	and.w	r3, r3, #7
 800798e:	b29a      	uxth	r2, r3
 8007990:	89fb      	ldrh	r3, [r7, #14]
 8007992:	4313      	orrs	r3, r2
 8007994:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	89fa      	ldrh	r2, [r7, #14]
 800799c:	60da      	str	r2, [r3, #12]
 800799e:	e04f      	b.n	8007a40 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	77bb      	strb	r3, [r7, #30]
 80079a4:	e04c      	b.n	8007a40 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80079a6:	7ffb      	ldrb	r3, [r7, #31]
 80079a8:	2b08      	cmp	r3, #8
 80079aa:	d828      	bhi.n	80079fe <UART_SetConfig+0x462>
 80079ac:	a201      	add	r2, pc, #4	; (adr r2, 80079b4 <UART_SetConfig+0x418>)
 80079ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b2:	bf00      	nop
 80079b4:	080079d9 	.word	0x080079d9
 80079b8:	080079e1 	.word	0x080079e1
 80079bc:	080079e9 	.word	0x080079e9
 80079c0:	080079ff 	.word	0x080079ff
 80079c4:	080079ef 	.word	0x080079ef
 80079c8:	080079ff 	.word	0x080079ff
 80079cc:	080079ff 	.word	0x080079ff
 80079d0:	080079ff 	.word	0x080079ff
 80079d4:	080079f7 	.word	0x080079f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079d8:	f7fd fc32 	bl	8005240 <HAL_RCC_GetPCLK1Freq>
 80079dc:	61b8      	str	r0, [r7, #24]
        break;
 80079de:	e013      	b.n	8007a08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079e0:	f7fd fc42 	bl	8005268 <HAL_RCC_GetPCLK2Freq>
 80079e4:	61b8      	str	r0, [r7, #24]
        break;
 80079e6:	e00f      	b.n	8007a08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079e8:	4b1d      	ldr	r3, [pc, #116]	; (8007a60 <UART_SetConfig+0x4c4>)
 80079ea:	61bb      	str	r3, [r7, #24]
        break;
 80079ec:	e00c      	b.n	8007a08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079ee:	f7fd fb15 	bl	800501c <HAL_RCC_GetSysClockFreq>
 80079f2:	61b8      	str	r0, [r7, #24]
        break;
 80079f4:	e008      	b.n	8007a08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079fa:	61bb      	str	r3, [r7, #24]
        break;
 80079fc:	e004      	b.n	8007a08 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80079fe:	2300      	movs	r3, #0
 8007a00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	77bb      	strb	r3, [r7, #30]
        break;
 8007a06:	bf00      	nop
    }

    if (pclk != 0U)
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d018      	beq.n	8007a40 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	085a      	lsrs	r2, r3, #1
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	441a      	add	r2, r3
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a20:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	2b0f      	cmp	r3, #15
 8007a26:	d909      	bls.n	8007a3c <UART_SetConfig+0x4a0>
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a2e:	d205      	bcs.n	8007a3c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	b29a      	uxth	r2, r3
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	60da      	str	r2, [r3, #12]
 8007a3a:	e001      	b.n	8007a40 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007a4c:	7fbb      	ldrb	r3, [r7, #30]
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3720      	adds	r7, #32
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	40007c00 	.word	0x40007c00
 8007a5c:	40023800 	.word	0x40023800
 8007a60:	00f42400 	.word	0x00f42400

08007a64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a70:	f003 0301 	and.w	r3, r3, #1
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00a      	beq.n	8007a8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	430a      	orrs	r2, r1
 8007a8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a92:	f003 0302 	and.w	r3, r3, #2
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00a      	beq.n	8007ab0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	430a      	orrs	r2, r1
 8007aae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab4:	f003 0304 	and.w	r3, r3, #4
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d00a      	beq.n	8007ad2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	430a      	orrs	r2, r1
 8007ad0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad6:	f003 0308 	and.w	r3, r3, #8
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00a      	beq.n	8007af4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	430a      	orrs	r2, r1
 8007af2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af8:	f003 0310 	and.w	r3, r3, #16
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00a      	beq.n	8007b16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	430a      	orrs	r2, r1
 8007b14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1a:	f003 0320 	and.w	r3, r3, #32
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d00a      	beq.n	8007b38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	430a      	orrs	r2, r1
 8007b36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d01a      	beq.n	8007b7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	430a      	orrs	r2, r1
 8007b58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b62:	d10a      	bne.n	8007b7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	430a      	orrs	r2, r1
 8007b78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d00a      	beq.n	8007b9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	430a      	orrs	r2, r1
 8007b9a:	605a      	str	r2, [r3, #4]
  }
}
 8007b9c:	bf00      	nop
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b086      	sub	sp, #24
 8007bac:	af02      	add	r7, sp, #8
 8007bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007bb8:	f7fb fde8 	bl	800378c <HAL_GetTick>
 8007bbc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f003 0308 	and.w	r3, r3, #8
 8007bc8:	2b08      	cmp	r3, #8
 8007bca:	d10e      	bne.n	8007bea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bcc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007bd0:	9300      	str	r3, [sp, #0]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 f831 	bl	8007c42 <UART_WaitOnFlagUntilTimeout>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d001      	beq.n	8007bea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007be6:	2303      	movs	r3, #3
 8007be8:	e027      	b.n	8007c3a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f003 0304 	and.w	r3, r3, #4
 8007bf4:	2b04      	cmp	r3, #4
 8007bf6:	d10e      	bne.n	8007c16 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bf8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007bfc:	9300      	str	r3, [sp, #0]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 f81b 	bl	8007c42 <UART_WaitOnFlagUntilTimeout>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d001      	beq.n	8007c16 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c12:	2303      	movs	r3, #3
 8007c14:	e011      	b.n	8007c3a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2220      	movs	r2, #32
 8007c1a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2220      	movs	r2, #32
 8007c20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3710      	adds	r7, #16
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b09c      	sub	sp, #112	; 0x70
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	60f8      	str	r0, [r7, #12]
 8007c4a:	60b9      	str	r1, [r7, #8]
 8007c4c:	603b      	str	r3, [r7, #0]
 8007c4e:	4613      	mov	r3, r2
 8007c50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c52:	e0a7      	b.n	8007da4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c5a:	f000 80a3 	beq.w	8007da4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c5e:	f7fb fd95 	bl	800378c <HAL_GetTick>
 8007c62:	4602      	mov	r2, r0
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	1ad3      	subs	r3, r2, r3
 8007c68:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d302      	bcc.n	8007c74 <UART_WaitOnFlagUntilTimeout+0x32>
 8007c6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d13f      	bne.n	8007cf4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c7c:	e853 3f00 	ldrex	r3, [r3]
 8007c80:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007c88:	667b      	str	r3, [r7, #100]	; 0x64
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	461a      	mov	r2, r3
 8007c90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c94:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007c98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007c9a:	e841 2300 	strex	r3, r2, [r1]
 8007c9e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007ca0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d1e6      	bne.n	8007c74 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	3308      	adds	r3, #8
 8007cac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cb0:	e853 3f00 	ldrex	r3, [r3]
 8007cb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb8:	f023 0301 	bic.w	r3, r3, #1
 8007cbc:	663b      	str	r3, [r7, #96]	; 0x60
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	3308      	adds	r3, #8
 8007cc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007cc6:	64ba      	str	r2, [r7, #72]	; 0x48
 8007cc8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ccc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cce:	e841 2300 	strex	r3, r2, [r1]
 8007cd2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007cd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d1e5      	bne.n	8007ca6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2220      	movs	r2, #32
 8007cde:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2220      	movs	r2, #32
 8007ce4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	e068      	b.n	8007dc6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f003 0304 	and.w	r3, r3, #4
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d050      	beq.n	8007da4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	69db      	ldr	r3, [r3, #28]
 8007d08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d10:	d148      	bne.n	8007da4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d1a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d24:	e853 3f00 	ldrex	r3, [r3]
 8007d28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	461a      	mov	r2, r3
 8007d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d3a:	637b      	str	r3, [r7, #52]	; 0x34
 8007d3c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d42:	e841 2300 	strex	r3, r2, [r1]
 8007d46:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d1e6      	bne.n	8007d1c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	3308      	adds	r3, #8
 8007d54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	e853 3f00 	ldrex	r3, [r3]
 8007d5c:	613b      	str	r3, [r7, #16]
   return(result);
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	f023 0301 	bic.w	r3, r3, #1
 8007d64:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	3308      	adds	r3, #8
 8007d6c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007d6e:	623a      	str	r2, [r7, #32]
 8007d70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d72:	69f9      	ldr	r1, [r7, #28]
 8007d74:	6a3a      	ldr	r2, [r7, #32]
 8007d76:	e841 2300 	strex	r3, r2, [r1]
 8007d7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d7c:	69bb      	ldr	r3, [r7, #24]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d1e5      	bne.n	8007d4e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2220      	movs	r2, #32
 8007d86:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2220      	movs	r2, #32
 8007d8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2220      	movs	r2, #32
 8007d94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007da0:	2303      	movs	r3, #3
 8007da2:	e010      	b.n	8007dc6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	69da      	ldr	r2, [r3, #28]
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	4013      	ands	r3, r2
 8007dae:	68ba      	ldr	r2, [r7, #8]
 8007db0:	429a      	cmp	r2, r3
 8007db2:	bf0c      	ite	eq
 8007db4:	2301      	moveq	r3, #1
 8007db6:	2300      	movne	r3, #0
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	461a      	mov	r2, r3
 8007dbc:	79fb      	ldrb	r3, [r7, #7]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	f43f af48 	beq.w	8007c54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3770      	adds	r7, #112	; 0x70
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
	...

08007dd0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b096      	sub	sp, #88	; 0x58
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	4613      	mov	r3, r2
 8007ddc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	68ba      	ldr	r2, [r7, #8]
 8007de2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	88fa      	ldrh	r2, [r7, #6]
 8007de8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2200      	movs	r2, #0
 8007df0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2222      	movs	r2, #34	; 0x22
 8007df8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d028      	beq.n	8007e56 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e08:	4a3e      	ldr	r2, [pc, #248]	; (8007f04 <UART_Start_Receive_DMA+0x134>)
 8007e0a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e10:	4a3d      	ldr	r2, [pc, #244]	; (8007f08 <UART_Start_Receive_DMA+0x138>)
 8007e12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e18:	4a3c      	ldr	r2, [pc, #240]	; (8007f0c <UART_Start_Receive_DMA+0x13c>)
 8007e1a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e20:	2200      	movs	r2, #0
 8007e22:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	3324      	adds	r3, #36	; 0x24
 8007e2e:	4619      	mov	r1, r3
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e34:	461a      	mov	r2, r3
 8007e36:	88fb      	ldrh	r3, [r7, #6]
 8007e38:	f7fb fe68 	bl	8003b0c <HAL_DMA_Start_IT>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d009      	beq.n	8007e56 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2210      	movs	r2, #16
 8007e46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2220      	movs	r2, #32
 8007e4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	e051      	b.n	8007efa <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d018      	beq.n	8007e90 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e66:	e853 3f00 	ldrex	r3, [r3]
 8007e6a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e72:	657b      	str	r3, [r7, #84]	; 0x54
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	461a      	mov	r2, r3
 8007e7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e7e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e80:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007e82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e84:	e841 2300 	strex	r3, r2, [r1]
 8007e88:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007e8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d1e6      	bne.n	8007e5e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	3308      	adds	r3, #8
 8007e96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9a:	e853 3f00 	ldrex	r3, [r3]
 8007e9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea2:	f043 0301 	orr.w	r3, r3, #1
 8007ea6:	653b      	str	r3, [r7, #80]	; 0x50
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	3308      	adds	r3, #8
 8007eae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007eb0:	637a      	str	r2, [r7, #52]	; 0x34
 8007eb2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007eb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007eb8:	e841 2300 	strex	r3, r2, [r1]
 8007ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d1e5      	bne.n	8007e90 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	3308      	adds	r3, #8
 8007eca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	e853 3f00 	ldrex	r3, [r3]
 8007ed2:	613b      	str	r3, [r7, #16]
   return(result);
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007eda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	3308      	adds	r3, #8
 8007ee2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ee4:	623a      	str	r2, [r7, #32]
 8007ee6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee8:	69f9      	ldr	r1, [r7, #28]
 8007eea:	6a3a      	ldr	r2, [r7, #32]
 8007eec:	e841 2300 	strex	r3, r2, [r1]
 8007ef0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d1e5      	bne.n	8007ec4 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3758      	adds	r7, #88	; 0x58
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	080080d7 	.word	0x080080d7
 8007f08:	080081ff 	.word	0x080081ff
 8007f0c:	0800823d 	.word	0x0800823d

08007f10 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b089      	sub	sp, #36	; 0x24
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	e853 3f00 	ldrex	r3, [r3]
 8007f24:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007f2c:	61fb      	str	r3, [r7, #28]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	461a      	mov	r2, r3
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	61bb      	str	r3, [r7, #24]
 8007f38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3a:	6979      	ldr	r1, [r7, #20]
 8007f3c:	69ba      	ldr	r2, [r7, #24]
 8007f3e:	e841 2300 	strex	r3, r2, [r1]
 8007f42:	613b      	str	r3, [r7, #16]
   return(result);
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1e6      	bne.n	8007f18 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2220      	movs	r2, #32
 8007f4e:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8007f50:	bf00      	nop
 8007f52:	3724      	adds	r7, #36	; 0x24
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b095      	sub	sp, #84	; 0x54
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f6c:	e853 3f00 	ldrex	r3, [r3]
 8007f70:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	461a      	mov	r2, r3
 8007f80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f82:	643b      	str	r3, [r7, #64]	; 0x40
 8007f84:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f86:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f8a:	e841 2300 	strex	r3, r2, [r1]
 8007f8e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d1e6      	bne.n	8007f64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	3308      	adds	r3, #8
 8007f9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f9e:	6a3b      	ldr	r3, [r7, #32]
 8007fa0:	e853 3f00 	ldrex	r3, [r3]
 8007fa4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	f023 0301 	bic.w	r3, r3, #1
 8007fac:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	3308      	adds	r3, #8
 8007fb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007fb8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fbe:	e841 2300 	strex	r3, r2, [r1]
 8007fc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d1e5      	bne.n	8007f96 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d118      	bne.n	8008004 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	e853 3f00 	ldrex	r3, [r3]
 8007fde:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	f023 0310 	bic.w	r3, r3, #16
 8007fe6:	647b      	str	r3, [r7, #68]	; 0x44
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	461a      	mov	r2, r3
 8007fee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ff0:	61bb      	str	r3, [r7, #24]
 8007ff2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff4:	6979      	ldr	r1, [r7, #20]
 8007ff6:	69ba      	ldr	r2, [r7, #24]
 8007ff8:	e841 2300 	strex	r3, r2, [r1]
 8007ffc:	613b      	str	r3, [r7, #16]
   return(result);
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d1e6      	bne.n	8007fd2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2220      	movs	r2, #32
 8008008:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008018:	bf00      	nop
 800801a:	3754      	adds	r7, #84	; 0x54
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b090      	sub	sp, #64	; 0x40
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008030:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	69db      	ldr	r3, [r3, #28]
 8008036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800803a:	d037      	beq.n	80080ac <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800803c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800803e:	2200      	movs	r2, #0
 8008040:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	3308      	adds	r3, #8
 800804a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804e:	e853 3f00 	ldrex	r3, [r3]
 8008052:	623b      	str	r3, [r7, #32]
   return(result);
 8008054:	6a3b      	ldr	r3, [r7, #32]
 8008056:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800805a:	63bb      	str	r3, [r7, #56]	; 0x38
 800805c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	3308      	adds	r3, #8
 8008062:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008064:	633a      	str	r2, [r7, #48]	; 0x30
 8008066:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008068:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800806a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800806c:	e841 2300 	strex	r3, r2, [r1]
 8008070:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008074:	2b00      	cmp	r3, #0
 8008076:	d1e5      	bne.n	8008044 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	e853 3f00 	ldrex	r3, [r3]
 8008084:	60fb      	str	r3, [r7, #12]
   return(result);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800808c:	637b      	str	r3, [r7, #52]	; 0x34
 800808e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	461a      	mov	r2, r3
 8008094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008096:	61fb      	str	r3, [r7, #28]
 8008098:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809a:	69b9      	ldr	r1, [r7, #24]
 800809c:	69fa      	ldr	r2, [r7, #28]
 800809e:	e841 2300 	strex	r3, r2, [r1]
 80080a2:	617b      	str	r3, [r7, #20]
   return(result);
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d1e6      	bne.n	8008078 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80080aa:	e002      	b.n	80080b2 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 80080ac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80080ae:	f7ff fa2d 	bl	800750c <HAL_UART_TxCpltCallback>
}
 80080b2:	bf00      	nop
 80080b4:	3740      	adds	r7, #64	; 0x40
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b084      	sub	sp, #16
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80080c8:	68f8      	ldr	r0, [r7, #12]
 80080ca:	f7ff fa29 	bl	8007520 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080ce:	bf00      	nop
 80080d0:	3710      	adds	r7, #16
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}

080080d6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80080d6:	b580      	push	{r7, lr}
 80080d8:	b09c      	sub	sp, #112	; 0x70
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	69db      	ldr	r3, [r3, #28]
 80080e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080ec:	d071      	beq.n	80081d2 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80080ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080f0:	2200      	movs	r2, #0
 80080f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080fe:	e853 3f00 	ldrex	r3, [r3]
 8008102:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008104:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008106:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800810a:	66bb      	str	r3, [r7, #104]	; 0x68
 800810c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	461a      	mov	r2, r3
 8008112:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008114:	65bb      	str	r3, [r7, #88]	; 0x58
 8008116:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008118:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800811a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800811c:	e841 2300 	strex	r3, r2, [r1]
 8008120:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008122:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008124:	2b00      	cmp	r3, #0
 8008126:	d1e6      	bne.n	80080f6 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	3308      	adds	r3, #8
 800812e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008132:	e853 3f00 	ldrex	r3, [r3]
 8008136:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800813a:	f023 0301 	bic.w	r3, r3, #1
 800813e:	667b      	str	r3, [r7, #100]	; 0x64
 8008140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	3308      	adds	r3, #8
 8008146:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008148:	647a      	str	r2, [r7, #68]	; 0x44
 800814a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800814c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800814e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008150:	e841 2300 	strex	r3, r2, [r1]
 8008154:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008158:	2b00      	cmp	r3, #0
 800815a:	d1e5      	bne.n	8008128 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800815c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	3308      	adds	r3, #8
 8008162:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008166:	e853 3f00 	ldrex	r3, [r3]
 800816a:	623b      	str	r3, [r7, #32]
   return(result);
 800816c:	6a3b      	ldr	r3, [r7, #32]
 800816e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008172:	663b      	str	r3, [r7, #96]	; 0x60
 8008174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	3308      	adds	r3, #8
 800817a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800817c:	633a      	str	r2, [r7, #48]	; 0x30
 800817e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008180:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008182:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008184:	e841 2300 	strex	r3, r2, [r1]
 8008188:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800818a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800818c:	2b00      	cmp	r3, #0
 800818e:	d1e5      	bne.n	800815c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008192:	2220      	movs	r2, #32
 8008194:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800819a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800819c:	2b01      	cmp	r3, #1
 800819e:	d118      	bne.n	80081d2 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	e853 3f00 	ldrex	r3, [r3]
 80081ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f023 0310 	bic.w	r3, r3, #16
 80081b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	461a      	mov	r2, r3
 80081bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081be:	61fb      	str	r3, [r7, #28]
 80081c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c2:	69b9      	ldr	r1, [r7, #24]
 80081c4:	69fa      	ldr	r2, [r7, #28]
 80081c6:	e841 2300 	strex	r3, r2, [r1]
 80081ca:	617b      	str	r3, [r7, #20]
   return(result);
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d1e6      	bne.n	80081a0 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081d4:	2200      	movs	r2, #0
 80081d6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d107      	bne.n	80081f0 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80081e6:	4619      	mov	r1, r3
 80081e8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80081ea:	f7ff f9c1 	bl	8007570 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80081ee:	e002      	b.n	80081f6 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80081f0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80081f2:	f7ff f99f 	bl	8007534 <HAL_UART_RxCpltCallback>
}
 80081f6:	bf00      	nop
 80081f8:	3770      	adds	r7, #112	; 0x70
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}

080081fe <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80081fe:	b580      	push	{r7, lr}
 8008200:	b084      	sub	sp, #16
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800820a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2201      	movs	r2, #1
 8008210:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008216:	2b01      	cmp	r3, #1
 8008218:	d109      	bne.n	800822e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008220:	085b      	lsrs	r3, r3, #1
 8008222:	b29b      	uxth	r3, r3
 8008224:	4619      	mov	r1, r3
 8008226:	68f8      	ldr	r0, [r7, #12]
 8008228:	f7ff f9a2 	bl	8007570 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800822c:	e002      	b.n	8008234 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800822e:	68f8      	ldr	r0, [r7, #12]
 8008230:	f7ff f98a 	bl	8007548 <HAL_UART_RxHalfCpltCallback>
}
 8008234:	bf00      	nop
 8008236:	3710      	adds	r7, #16
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b086      	sub	sp, #24
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008248:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800824e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008256:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008262:	2b80      	cmp	r3, #128	; 0x80
 8008264:	d109      	bne.n	800827a <UART_DMAError+0x3e>
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	2b21      	cmp	r3, #33	; 0x21
 800826a:	d106      	bne.n	800827a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	2200      	movs	r2, #0
 8008270:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8008274:	6978      	ldr	r0, [r7, #20]
 8008276:	f7ff fe4b 	bl	8007f10 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008284:	2b40      	cmp	r3, #64	; 0x40
 8008286:	d109      	bne.n	800829c <UART_DMAError+0x60>
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2b22      	cmp	r3, #34	; 0x22
 800828c:	d106      	bne.n	800829c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	2200      	movs	r2, #0
 8008292:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8008296:	6978      	ldr	r0, [r7, #20]
 8008298:	f7ff fe60 	bl	8007f5c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082a2:	f043 0210 	orr.w	r2, r3, #16
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082ac:	6978      	ldr	r0, [r7, #20]
 80082ae:	f7ff f955 	bl	800755c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082b2:	bf00      	nop
 80082b4:	3718      	adds	r7, #24
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b084      	sub	sp, #16
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2200      	movs	r2, #0
 80082cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2200      	movs	r2, #0
 80082d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f7ff f93f 	bl	800755c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082de:	bf00      	nop
 80082e0:	3710      	adds	r7, #16
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b088      	sub	sp, #32
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	e853 3f00 	ldrex	r3, [r3]
 80082fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008302:	61fb      	str	r3, [r7, #28]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	461a      	mov	r2, r3
 800830a:	69fb      	ldr	r3, [r7, #28]
 800830c:	61bb      	str	r3, [r7, #24]
 800830e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008310:	6979      	ldr	r1, [r7, #20]
 8008312:	69ba      	ldr	r2, [r7, #24]
 8008314:	e841 2300 	strex	r3, r2, [r1]
 8008318:	613b      	str	r3, [r7, #16]
   return(result);
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d1e6      	bne.n	80082ee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2220      	movs	r2, #32
 8008324:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f7ff f8ed 	bl	800750c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008332:	bf00      	nop
 8008334:	3720      	adds	r7, #32
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
	...

0800833c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800833c:	b084      	sub	sp, #16
 800833e:	b580      	push	{r7, lr}
 8008340:	b084      	sub	sp, #16
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
 8008346:	f107 001c 	add.w	r0, r7, #28
 800834a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800834e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008350:	2b01      	cmp	r3, #1
 8008352:	d120      	bne.n	8008396 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008358:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	68da      	ldr	r2, [r3, #12]
 8008364:	4b20      	ldr	r3, [pc, #128]	; (80083e8 <USB_CoreInit+0xac>)
 8008366:	4013      	ands	r3, r2
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800837a:	2b01      	cmp	r3, #1
 800837c:	d105      	bne.n	800838a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 fa96 	bl	80088bc <USB_CoreReset>
 8008390:	4603      	mov	r3, r0
 8008392:	73fb      	strb	r3, [r7, #15]
 8008394:	e010      	b.n	80083b8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	68db      	ldr	r3, [r3, #12]
 800839a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 fa8a 	bl	80088bc <USB_CoreReset>
 80083a8:	4603      	mov	r3, r0
 80083aa:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80083b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d10b      	bne.n	80083d6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	f043 0206 	orr.w	r2, r3, #6
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	689b      	ldr	r3, [r3, #8]
 80083ce:	f043 0220 	orr.w	r2, r3, #32
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80083d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3710      	adds	r7, #16
 80083dc:	46bd      	mov	sp, r7
 80083de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80083e2:	b004      	add	sp, #16
 80083e4:	4770      	bx	lr
 80083e6:	bf00      	nop
 80083e8:	ffbdffbf 	.word	0xffbdffbf

080083ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	f023 0201 	bic.w	r2, r3, #1
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	370c      	adds	r7, #12
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr

0800840e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800840e:	b580      	push	{r7, lr}
 8008410:	b084      	sub	sp, #16
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
 8008416:	460b      	mov	r3, r1
 8008418:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800841a:	2300      	movs	r3, #0
 800841c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	68db      	ldr	r3, [r3, #12]
 8008422:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800842a:	78fb      	ldrb	r3, [r7, #3]
 800842c:	2b01      	cmp	r3, #1
 800842e:	d115      	bne.n	800845c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800843c:	2001      	movs	r0, #1
 800843e:	f7fb f9b1 	bl	80037a4 <HAL_Delay>
      ms++;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	3301      	adds	r3, #1
 8008446:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 fa29 	bl	80088a0 <USB_GetMode>
 800844e:	4603      	mov	r3, r0
 8008450:	2b01      	cmp	r3, #1
 8008452:	d01e      	beq.n	8008492 <USB_SetCurrentMode+0x84>
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2b31      	cmp	r3, #49	; 0x31
 8008458:	d9f0      	bls.n	800843c <USB_SetCurrentMode+0x2e>
 800845a:	e01a      	b.n	8008492 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800845c:	78fb      	ldrb	r3, [r7, #3]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d115      	bne.n	800848e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800846e:	2001      	movs	r0, #1
 8008470:	f7fb f998 	bl	80037a4 <HAL_Delay>
      ms++;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	3301      	adds	r3, #1
 8008478:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 fa10 	bl	80088a0 <USB_GetMode>
 8008480:	4603      	mov	r3, r0
 8008482:	2b00      	cmp	r3, #0
 8008484:	d005      	beq.n	8008492 <USB_SetCurrentMode+0x84>
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2b31      	cmp	r3, #49	; 0x31
 800848a:	d9f0      	bls.n	800846e <USB_SetCurrentMode+0x60>
 800848c:	e001      	b.n	8008492 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	e005      	b.n	800849e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2b32      	cmp	r3, #50	; 0x32
 8008496:	d101      	bne.n	800849c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008498:	2301      	movs	r3, #1
 800849a:	e000      	b.n	800849e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
	...

080084a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80084a8:	b084      	sub	sp, #16
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b086      	sub	sp, #24
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
 80084b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80084b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80084ba:	2300      	movs	r3, #0
 80084bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80084c2:	2300      	movs	r3, #0
 80084c4:	613b      	str	r3, [r7, #16]
 80084c6:	e009      	b.n	80084dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	3340      	adds	r3, #64	; 0x40
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	4413      	add	r3, r2
 80084d2:	2200      	movs	r2, #0
 80084d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	3301      	adds	r3, #1
 80084da:	613b      	str	r3, [r7, #16]
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	2b0e      	cmp	r3, #14
 80084e0:	d9f2      	bls.n	80084c8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80084e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d11c      	bne.n	8008522 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	68fa      	ldr	r2, [r7, #12]
 80084f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084f6:	f043 0302 	orr.w	r3, r3, #2
 80084fa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008500:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	601a      	str	r2, [r3, #0]
 8008520:	e005      	b.n	800852e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008526:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008534:	461a      	mov	r2, r3
 8008536:	2300      	movs	r3, #0
 8008538:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008540:	4619      	mov	r1, r3
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008548:	461a      	mov	r2, r3
 800854a:	680b      	ldr	r3, [r1, #0]
 800854c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800854e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008550:	2b01      	cmp	r3, #1
 8008552:	d10c      	bne.n	800856e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008556:	2b00      	cmp	r3, #0
 8008558:	d104      	bne.n	8008564 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800855a:	2100      	movs	r1, #0
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 f965 	bl	800882c <USB_SetDevSpeed>
 8008562:	e008      	b.n	8008576 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008564:	2101      	movs	r1, #1
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 f960 	bl	800882c <USB_SetDevSpeed>
 800856c:	e003      	b.n	8008576 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800856e:	2103      	movs	r1, #3
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 f95b 	bl	800882c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008576:	2110      	movs	r1, #16
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 f8f3 	bl	8008764 <USB_FlushTxFifo>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d001      	beq.n	8008588 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008584:	2301      	movs	r3, #1
 8008586:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f000 f91f 	bl	80087cc <USB_FlushRxFifo>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d001      	beq.n	8008598 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008594:	2301      	movs	r3, #1
 8008596:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800859e:	461a      	mov	r2, r3
 80085a0:	2300      	movs	r3, #0
 80085a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085aa:	461a      	mov	r2, r3
 80085ac:	2300      	movs	r3, #0
 80085ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085b6:	461a      	mov	r2, r3
 80085b8:	2300      	movs	r3, #0
 80085ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80085bc:	2300      	movs	r3, #0
 80085be:	613b      	str	r3, [r7, #16]
 80085c0:	e043      	b.n	800864a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	015a      	lsls	r2, r3, #5
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	4413      	add	r3, r2
 80085ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085d8:	d118      	bne.n	800860c <USB_DevInit+0x164>
    {
      if (i == 0U)
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d10a      	bne.n	80085f6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	015a      	lsls	r2, r3, #5
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	4413      	add	r3, r2
 80085e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085ec:	461a      	mov	r2, r3
 80085ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80085f2:	6013      	str	r3, [r2, #0]
 80085f4:	e013      	b.n	800861e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	015a      	lsls	r2, r3, #5
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	4413      	add	r3, r2
 80085fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008602:	461a      	mov	r2, r3
 8008604:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008608:	6013      	str	r3, [r2, #0]
 800860a:	e008      	b.n	800861e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	015a      	lsls	r2, r3, #5
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	4413      	add	r3, r2
 8008614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008618:	461a      	mov	r2, r3
 800861a:	2300      	movs	r3, #0
 800861c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	015a      	lsls	r2, r3, #5
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	4413      	add	r3, r2
 8008626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800862a:	461a      	mov	r2, r3
 800862c:	2300      	movs	r3, #0
 800862e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	015a      	lsls	r2, r3, #5
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	4413      	add	r3, r2
 8008638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800863c:	461a      	mov	r2, r3
 800863e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008642:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	3301      	adds	r3, #1
 8008648:	613b      	str	r3, [r7, #16]
 800864a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864c:	693a      	ldr	r2, [r7, #16]
 800864e:	429a      	cmp	r2, r3
 8008650:	d3b7      	bcc.n	80085c2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008652:	2300      	movs	r3, #0
 8008654:	613b      	str	r3, [r7, #16]
 8008656:	e043      	b.n	80086e0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	015a      	lsls	r2, r3, #5
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	4413      	add	r3, r2
 8008660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800866a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800866e:	d118      	bne.n	80086a2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d10a      	bne.n	800868c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	015a      	lsls	r2, r3, #5
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	4413      	add	r3, r2
 800867e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008682:	461a      	mov	r2, r3
 8008684:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008688:	6013      	str	r3, [r2, #0]
 800868a:	e013      	b.n	80086b4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	015a      	lsls	r2, r3, #5
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	4413      	add	r3, r2
 8008694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008698:	461a      	mov	r2, r3
 800869a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800869e:	6013      	str	r3, [r2, #0]
 80086a0:	e008      	b.n	80086b4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	015a      	lsls	r2, r3, #5
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	4413      	add	r3, r2
 80086aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086ae:	461a      	mov	r2, r3
 80086b0:	2300      	movs	r3, #0
 80086b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	015a      	lsls	r2, r3, #5
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	4413      	add	r3, r2
 80086bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086c0:	461a      	mov	r2, r3
 80086c2:	2300      	movs	r3, #0
 80086c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	015a      	lsls	r2, r3, #5
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	4413      	add	r3, r2
 80086ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086d2:	461a      	mov	r2, r3
 80086d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80086d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	3301      	adds	r3, #1
 80086de:	613b      	str	r3, [r7, #16]
 80086e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e2:	693a      	ldr	r2, [r7, #16]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d3b7      	bcc.n	8008658 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008708:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800870a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870c:	2b00      	cmp	r3, #0
 800870e:	d105      	bne.n	800871c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	699b      	ldr	r3, [r3, #24]
 8008714:	f043 0210 	orr.w	r2, r3, #16
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	699a      	ldr	r2, [r3, #24]
 8008720:	4b0e      	ldr	r3, [pc, #56]	; (800875c <USB_DevInit+0x2b4>)
 8008722:	4313      	orrs	r3, r2
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800872a:	2b00      	cmp	r3, #0
 800872c:	d005      	beq.n	800873a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	699b      	ldr	r3, [r3, #24]
 8008732:	f043 0208 	orr.w	r2, r3, #8
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800873a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800873c:	2b01      	cmp	r3, #1
 800873e:	d105      	bne.n	800874c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	699a      	ldr	r2, [r3, #24]
 8008744:	4b06      	ldr	r3, [pc, #24]	; (8008760 <USB_DevInit+0x2b8>)
 8008746:	4313      	orrs	r3, r2
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800874c:	7dfb      	ldrb	r3, [r7, #23]
}
 800874e:	4618      	mov	r0, r3
 8008750:	3718      	adds	r7, #24
 8008752:	46bd      	mov	sp, r7
 8008754:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008758:	b004      	add	sp, #16
 800875a:	4770      	bx	lr
 800875c:	803c3800 	.word	0x803c3800
 8008760:	40000004 	.word	0x40000004

08008764 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008764:	b480      	push	{r7}
 8008766:	b085      	sub	sp, #20
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800876e:	2300      	movs	r3, #0
 8008770:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	3301      	adds	r3, #1
 8008776:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	4a13      	ldr	r2, [pc, #76]	; (80087c8 <USB_FlushTxFifo+0x64>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d901      	bls.n	8008784 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008780:	2303      	movs	r3, #3
 8008782:	e01b      	b.n	80087bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	691b      	ldr	r3, [r3, #16]
 8008788:	2b00      	cmp	r3, #0
 800878a:	daf2      	bge.n	8008772 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800878c:	2300      	movs	r3, #0
 800878e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	019b      	lsls	r3, r3, #6
 8008794:	f043 0220 	orr.w	r2, r3, #32
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	3301      	adds	r3, #1
 80087a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	4a08      	ldr	r2, [pc, #32]	; (80087c8 <USB_FlushTxFifo+0x64>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d901      	bls.n	80087ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80087aa:	2303      	movs	r3, #3
 80087ac:	e006      	b.n	80087bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	691b      	ldr	r3, [r3, #16]
 80087b2:	f003 0320 	and.w	r3, r3, #32
 80087b6:	2b20      	cmp	r3, #32
 80087b8:	d0f0      	beq.n	800879c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80087ba:	2300      	movs	r3, #0
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3714      	adds	r7, #20
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr
 80087c8:	00030d40 	.word	0x00030d40

080087cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b085      	sub	sp, #20
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80087d4:	2300      	movs	r3, #0
 80087d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	3301      	adds	r3, #1
 80087dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	4a11      	ldr	r2, [pc, #68]	; (8008828 <USB_FlushRxFifo+0x5c>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d901      	bls.n	80087ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80087e6:	2303      	movs	r3, #3
 80087e8:	e018      	b.n	800881c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	daf2      	bge.n	80087d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80087f2:	2300      	movs	r3, #0
 80087f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2210      	movs	r2, #16
 80087fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	3301      	adds	r3, #1
 8008800:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	4a08      	ldr	r2, [pc, #32]	; (8008828 <USB_FlushRxFifo+0x5c>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d901      	bls.n	800880e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800880a:	2303      	movs	r3, #3
 800880c:	e006      	b.n	800881c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	691b      	ldr	r3, [r3, #16]
 8008812:	f003 0310 	and.w	r3, r3, #16
 8008816:	2b10      	cmp	r3, #16
 8008818:	d0f0      	beq.n	80087fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800881a:	2300      	movs	r3, #0
}
 800881c:	4618      	mov	r0, r3
 800881e:	3714      	adds	r7, #20
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr
 8008828:	00030d40 	.word	0x00030d40

0800882c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800882c:	b480      	push	{r7}
 800882e:	b085      	sub	sp, #20
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	460b      	mov	r3, r1
 8008836:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	78fb      	ldrb	r3, [r7, #3]
 8008846:	68f9      	ldr	r1, [r7, #12]
 8008848:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800884c:	4313      	orrs	r3, r2
 800884e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008850:	2300      	movs	r3, #0
}
 8008852:	4618      	mov	r0, r3
 8008854:	3714      	adds	r7, #20
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr

0800885e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800885e:	b480      	push	{r7}
 8008860:	b085      	sub	sp, #20
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008878:	f023 0303 	bic.w	r3, r3, #3
 800887c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	68fa      	ldr	r2, [r7, #12]
 8008888:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800888c:	f043 0302 	orr.w	r3, r3, #2
 8008890:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008892:	2300      	movs	r3, #0
}
 8008894:	4618      	mov	r0, r3
 8008896:	3714      	adds	r7, #20
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	695b      	ldr	r3, [r3, #20]
 80088ac:	f003 0301 	and.w	r3, r3, #1
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	370c      	adds	r7, #12
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80088bc:	b480      	push	{r7}
 80088be:	b085      	sub	sp, #20
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80088c4:	2300      	movs	r3, #0
 80088c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	3301      	adds	r3, #1
 80088cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	4a13      	ldr	r2, [pc, #76]	; (8008920 <USB_CoreReset+0x64>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d901      	bls.n	80088da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80088d6:	2303      	movs	r3, #3
 80088d8:	e01b      	b.n	8008912 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	daf2      	bge.n	80088c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80088e2:	2300      	movs	r3, #0
 80088e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	691b      	ldr	r3, [r3, #16]
 80088ea:	f043 0201 	orr.w	r2, r3, #1
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	3301      	adds	r3, #1
 80088f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	4a09      	ldr	r2, [pc, #36]	; (8008920 <USB_CoreReset+0x64>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d901      	bls.n	8008904 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008900:	2303      	movs	r3, #3
 8008902:	e006      	b.n	8008912 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	691b      	ldr	r3, [r3, #16]
 8008908:	f003 0301 	and.w	r3, r3, #1
 800890c:	2b01      	cmp	r3, #1
 800890e:	d0f0      	beq.n	80088f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	3714      	adds	r7, #20
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop
 8008920:	00030d40 	.word	0x00030d40

08008924 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008924:	b480      	push	{r7}
 8008926:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8008928:	bf00      	nop
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr
	...

08008934 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008934:	b480      	push	{r7}
 8008936:	b085      	sub	sp, #20
 8008938:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800893a:	f3ef 8305 	mrs	r3, IPSR
 800893e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008940:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008942:	2b00      	cmp	r3, #0
 8008944:	d10f      	bne.n	8008966 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008946:	f3ef 8310 	mrs	r3, PRIMASK
 800894a:	607b      	str	r3, [r7, #4]
  return(result);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d105      	bne.n	800895e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008952:	f3ef 8311 	mrs	r3, BASEPRI
 8008956:	603b      	str	r3, [r7, #0]
  return(result);
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d007      	beq.n	800896e <osKernelInitialize+0x3a>
 800895e:	4b0e      	ldr	r3, [pc, #56]	; (8008998 <osKernelInitialize+0x64>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	2b02      	cmp	r3, #2
 8008964:	d103      	bne.n	800896e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8008966:	f06f 0305 	mvn.w	r3, #5
 800896a:	60fb      	str	r3, [r7, #12]
 800896c:	e00c      	b.n	8008988 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800896e:	4b0a      	ldr	r3, [pc, #40]	; (8008998 <osKernelInitialize+0x64>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d105      	bne.n	8008982 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008976:	4b08      	ldr	r3, [pc, #32]	; (8008998 <osKernelInitialize+0x64>)
 8008978:	2201      	movs	r2, #1
 800897a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800897c:	2300      	movs	r3, #0
 800897e:	60fb      	str	r3, [r7, #12]
 8008980:	e002      	b.n	8008988 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008982:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008986:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008988:	68fb      	ldr	r3, [r7, #12]
}
 800898a:	4618      	mov	r0, r3
 800898c:	3714      	adds	r7, #20
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr
 8008996:	bf00      	nop
 8008998:	20006d2c 	.word	0x20006d2c

0800899c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089a2:	f3ef 8305 	mrs	r3, IPSR
 80089a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80089a8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d10f      	bne.n	80089ce <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089ae:	f3ef 8310 	mrs	r3, PRIMASK
 80089b2:	607b      	str	r3, [r7, #4]
  return(result);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d105      	bne.n	80089c6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80089ba:	f3ef 8311 	mrs	r3, BASEPRI
 80089be:	603b      	str	r3, [r7, #0]
  return(result);
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d007      	beq.n	80089d6 <osKernelStart+0x3a>
 80089c6:	4b0f      	ldr	r3, [pc, #60]	; (8008a04 <osKernelStart+0x68>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	2b02      	cmp	r3, #2
 80089cc:	d103      	bne.n	80089d6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80089ce:	f06f 0305 	mvn.w	r3, #5
 80089d2:	60fb      	str	r3, [r7, #12]
 80089d4:	e010      	b.n	80089f8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80089d6:	4b0b      	ldr	r3, [pc, #44]	; (8008a04 <osKernelStart+0x68>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	2b01      	cmp	r3, #1
 80089dc:	d109      	bne.n	80089f2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80089de:	f7ff ffa1 	bl	8008924 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80089e2:	4b08      	ldr	r3, [pc, #32]	; (8008a04 <osKernelStart+0x68>)
 80089e4:	2202      	movs	r2, #2
 80089e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80089e8:	f001 f8ca 	bl	8009b80 <vTaskStartScheduler>
      stat = osOK;
 80089ec:	2300      	movs	r3, #0
 80089ee:	60fb      	str	r3, [r7, #12]
 80089f0:	e002      	b.n	80089f8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80089f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80089f6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80089f8:	68fb      	ldr	r3, [r7, #12]
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3710      	adds	r7, #16
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	20006d2c 	.word	0x20006d2c

08008a08 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b090      	sub	sp, #64	; 0x40
 8008a0c:	af04      	add	r7, sp, #16
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	60b9      	str	r1, [r7, #8]
 8008a12:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008a14:	2300      	movs	r3, #0
 8008a16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a18:	f3ef 8305 	mrs	r3, IPSR
 8008a1c:	61fb      	str	r3, [r7, #28]
  return(result);
 8008a1e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	f040 808f 	bne.w	8008b44 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a26:	f3ef 8310 	mrs	r3, PRIMASK
 8008a2a:	61bb      	str	r3, [r7, #24]
  return(result);
 8008a2c:	69bb      	ldr	r3, [r7, #24]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d105      	bne.n	8008a3e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008a32:	f3ef 8311 	mrs	r3, BASEPRI
 8008a36:	617b      	str	r3, [r7, #20]
  return(result);
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d003      	beq.n	8008a46 <osThreadNew+0x3e>
 8008a3e:	4b44      	ldr	r3, [pc, #272]	; (8008b50 <osThreadNew+0x148>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	2b02      	cmp	r3, #2
 8008a44:	d07e      	beq.n	8008b44 <osThreadNew+0x13c>
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d07b      	beq.n	8008b44 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008a4c:	2380      	movs	r3, #128	; 0x80
 8008a4e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008a50:	2318      	movs	r3, #24
 8008a52:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8008a54:	2300      	movs	r3, #0
 8008a56:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8008a58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a5c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d045      	beq.n	8008af0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d002      	beq.n	8008a72 <osThreadNew+0x6a>
        name = attr->name;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	699b      	ldr	r3, [r3, #24]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d002      	beq.n	8008a80 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	699b      	ldr	r3, [r3, #24]
 8008a7e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d008      	beq.n	8008a98 <osThreadNew+0x90>
 8008a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a88:	2b38      	cmp	r3, #56	; 0x38
 8008a8a:	d805      	bhi.n	8008a98 <osThreadNew+0x90>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	f003 0301 	and.w	r3, r3, #1
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d001      	beq.n	8008a9c <osThreadNew+0x94>
        return (NULL);
 8008a98:	2300      	movs	r3, #0
 8008a9a:	e054      	b.n	8008b46 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	695b      	ldr	r3, [r3, #20]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d003      	beq.n	8008aac <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	695b      	ldr	r3, [r3, #20]
 8008aa8:	089b      	lsrs	r3, r3, #2
 8008aaa:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d00e      	beq.n	8008ad2 <osThreadNew+0xca>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	2ba7      	cmp	r3, #167	; 0xa7
 8008aba:	d90a      	bls.n	8008ad2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d006      	beq.n	8008ad2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	695b      	ldr	r3, [r3, #20]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d002      	beq.n	8008ad2 <osThreadNew+0xca>
        mem = 1;
 8008acc:	2301      	movs	r3, #1
 8008ace:	623b      	str	r3, [r7, #32]
 8008ad0:	e010      	b.n	8008af4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d10c      	bne.n	8008af4 <osThreadNew+0xec>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d108      	bne.n	8008af4 <osThreadNew+0xec>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	691b      	ldr	r3, [r3, #16]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d104      	bne.n	8008af4 <osThreadNew+0xec>
          mem = 0;
 8008aea:	2300      	movs	r3, #0
 8008aec:	623b      	str	r3, [r7, #32]
 8008aee:	e001      	b.n	8008af4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008af0:	2300      	movs	r3, #0
 8008af2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008af4:	6a3b      	ldr	r3, [r7, #32]
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d110      	bne.n	8008b1c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008b02:	9202      	str	r2, [sp, #8]
 8008b04:	9301      	str	r3, [sp, #4]
 8008b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b08:	9300      	str	r3, [sp, #0]
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b10:	68f8      	ldr	r0, [r7, #12]
 8008b12:	f000 fe3f 	bl	8009794 <xTaskCreateStatic>
 8008b16:	4603      	mov	r3, r0
 8008b18:	613b      	str	r3, [r7, #16]
 8008b1a:	e013      	b.n	8008b44 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008b1c:	6a3b      	ldr	r3, [r7, #32]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d110      	bne.n	8008b44 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b24:	b29a      	uxth	r2, r3
 8008b26:	f107 0310 	add.w	r3, r7, #16
 8008b2a:	9301      	str	r3, [sp, #4]
 8008b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2e:	9300      	str	r3, [sp, #0]
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b34:	68f8      	ldr	r0, [r7, #12]
 8008b36:	f000 fe90 	bl	800985a <xTaskCreate>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d001      	beq.n	8008b44 <osThreadNew+0x13c>
          hTask = NULL;
 8008b40:	2300      	movs	r3, #0
 8008b42:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008b44:	693b      	ldr	r3, [r7, #16]
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3730      	adds	r7, #48	; 0x30
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
 8008b4e:	bf00      	nop
 8008b50:	20006d2c 	.word	0x20006d2c

08008b54 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b086      	sub	sp, #24
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b5c:	f3ef 8305 	mrs	r3, IPSR
 8008b60:	613b      	str	r3, [r7, #16]
  return(result);
 8008b62:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d10f      	bne.n	8008b88 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b68:	f3ef 8310 	mrs	r3, PRIMASK
 8008b6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d105      	bne.n	8008b80 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008b74:	f3ef 8311 	mrs	r3, BASEPRI
 8008b78:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d007      	beq.n	8008b90 <osDelay+0x3c>
 8008b80:	4b0a      	ldr	r3, [pc, #40]	; (8008bac <osDelay+0x58>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	2b02      	cmp	r3, #2
 8008b86:	d103      	bne.n	8008b90 <osDelay+0x3c>
    stat = osErrorISR;
 8008b88:	f06f 0305 	mvn.w	r3, #5
 8008b8c:	617b      	str	r3, [r7, #20]
 8008b8e:	e007      	b.n	8008ba0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008b90:	2300      	movs	r3, #0
 8008b92:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d002      	beq.n	8008ba0 <osDelay+0x4c>
      vTaskDelay(ticks);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 ffba 	bl	8009b14 <vTaskDelay>
    }
  }

  return (stat);
 8008ba0:	697b      	ldr	r3, [r7, #20]
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3718      	adds	r7, #24
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	20006d2c 	.word	0x20006d2c

08008bb0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008bb0:	b480      	push	{r7}
 8008bb2:	b085      	sub	sp, #20
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	60b9      	str	r1, [r7, #8]
 8008bba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	4a07      	ldr	r2, [pc, #28]	; (8008bdc <vApplicationGetIdleTaskMemory+0x2c>)
 8008bc0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	4a06      	ldr	r2, [pc, #24]	; (8008be0 <vApplicationGetIdleTaskMemory+0x30>)
 8008bc6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2280      	movs	r2, #128	; 0x80
 8008bcc:	601a      	str	r2, [r3, #0]
}
 8008bce:	bf00      	nop
 8008bd0:	3714      	adds	r7, #20
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr
 8008bda:	bf00      	nop
 8008bdc:	20006d30 	.word	0x20006d30
 8008be0:	20006dd8 	.word	0x20006dd8

08008be4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008be4:	b480      	push	{r7}
 8008be6:	b085      	sub	sp, #20
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	4a07      	ldr	r2, [pc, #28]	; (8008c10 <vApplicationGetTimerTaskMemory+0x2c>)
 8008bf4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	4a06      	ldr	r2, [pc, #24]	; (8008c14 <vApplicationGetTimerTaskMemory+0x30>)
 8008bfa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c02:	601a      	str	r2, [r3, #0]
}
 8008c04:	bf00      	nop
 8008c06:	3714      	adds	r7, #20
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr
 8008c10:	20006fd8 	.word	0x20006fd8
 8008c14:	20007080 	.word	0x20007080

08008c18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f103 0208 	add.w	r2, r3, #8
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f103 0208 	add.w	r2, r3, #8
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f103 0208 	add.w	r2, r3, #8
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008c4c:	bf00      	nop
 8008c4e:	370c      	adds	r7, #12
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr

08008c58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008c66:	bf00      	nop
 8008c68:	370c      	adds	r7, #12
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr

08008c72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c72:	b480      	push	{r7}
 8008c74:	b085      	sub	sp, #20
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
 8008c7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	68fa      	ldr	r2, [r7, #12]
 8008c86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	689a      	ldr	r2, [r3, #8]
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	683a      	ldr	r2, [r7, #0]
 8008c96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	683a      	ldr	r2, [r7, #0]
 8008c9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	1c5a      	adds	r2, r3, #1
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	601a      	str	r2, [r3, #0]
}
 8008cae:	bf00      	nop
 8008cb0:	3714      	adds	r7, #20
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr

08008cba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008cba:	b480      	push	{r7}
 8008cbc:	b085      	sub	sp, #20
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
 8008cc2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cd0:	d103      	bne.n	8008cda <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	691b      	ldr	r3, [r3, #16]
 8008cd6:	60fb      	str	r3, [r7, #12]
 8008cd8:	e00c      	b.n	8008cf4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	3308      	adds	r3, #8
 8008cde:	60fb      	str	r3, [r7, #12]
 8008ce0:	e002      	b.n	8008ce8 <vListInsert+0x2e>
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	60fb      	str	r3, [r7, #12]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	68ba      	ldr	r2, [r7, #8]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d2f6      	bcs.n	8008ce2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	685a      	ldr	r2, [r3, #4]
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	683a      	ldr	r2, [r7, #0]
 8008d02:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	68fa      	ldr	r2, [r7, #12]
 8008d08:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	683a      	ldr	r2, [r7, #0]
 8008d0e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	1c5a      	adds	r2, r3, #1
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	601a      	str	r2, [r3, #0]
}
 8008d20:	bf00      	nop
 8008d22:	3714      	adds	r7, #20
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	691b      	ldr	r3, [r3, #16]
 8008d38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	6892      	ldr	r2, [r2, #8]
 8008d42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	6852      	ldr	r2, [r2, #4]
 8008d4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d103      	bne.n	8008d60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	689a      	ldr	r2, [r3, #8]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2200      	movs	r2, #0
 8008d64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	1e5a      	subs	r2, r3, #1
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3714      	adds	r7, #20
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d10c      	bne.n	8008dae <xQueueGenericReset+0x2e>
	__asm volatile
 8008d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d98:	b672      	cpsid	i
 8008d9a:	f383 8811 	msr	BASEPRI, r3
 8008d9e:	f3bf 8f6f 	isb	sy
 8008da2:	f3bf 8f4f 	dsb	sy
 8008da6:	b662      	cpsie	i
 8008da8:	60bb      	str	r3, [r7, #8]
}
 8008daa:	bf00      	nop
 8008dac:	e7fe      	b.n	8008dac <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8008dae:	f002 f8cd 	bl	800af4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dba:	68f9      	ldr	r1, [r7, #12]
 8008dbc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008dbe:	fb01 f303 	mul.w	r3, r1, r3
 8008dc2:	441a      	add	r2, r3
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dde:	3b01      	subs	r3, #1
 8008de0:	68f9      	ldr	r1, [r7, #12]
 8008de2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008de4:	fb01 f303 	mul.w	r3, r1, r3
 8008de8:	441a      	add	r2, r3
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	22ff      	movs	r2, #255	; 0xff
 8008df2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	22ff      	movs	r2, #255	; 0xff
 8008dfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d114      	bne.n	8008e2e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	691b      	ldr	r3, [r3, #16]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d01a      	beq.n	8008e42 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	3310      	adds	r3, #16
 8008e10:	4618      	mov	r0, r3
 8008e12:	f001 f95d 	bl	800a0d0 <xTaskRemoveFromEventList>
 8008e16:	4603      	mov	r3, r0
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d012      	beq.n	8008e42 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008e1c:	4b0c      	ldr	r3, [pc, #48]	; (8008e50 <xQueueGenericReset+0xd0>)
 8008e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e22:	601a      	str	r2, [r3, #0]
 8008e24:	f3bf 8f4f 	dsb	sy
 8008e28:	f3bf 8f6f 	isb	sy
 8008e2c:	e009      	b.n	8008e42 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	3310      	adds	r3, #16
 8008e32:	4618      	mov	r0, r3
 8008e34:	f7ff fef0 	bl	8008c18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	3324      	adds	r3, #36	; 0x24
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f7ff feeb 	bl	8008c18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008e42:	f002 f8b7 	bl	800afb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008e46:	2301      	movs	r3, #1
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3710      	adds	r7, #16
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	e000ed04 	.word	0xe000ed04

08008e54 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b08e      	sub	sp, #56	; 0x38
 8008e58:	af02      	add	r7, sp, #8
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	60b9      	str	r1, [r7, #8]
 8008e5e:	607a      	str	r2, [r7, #4]
 8008e60:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d10c      	bne.n	8008e82 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8008e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6c:	b672      	cpsid	i
 8008e6e:	f383 8811 	msr	BASEPRI, r3
 8008e72:	f3bf 8f6f 	isb	sy
 8008e76:	f3bf 8f4f 	dsb	sy
 8008e7a:	b662      	cpsie	i
 8008e7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008e7e:	bf00      	nop
 8008e80:	e7fe      	b.n	8008e80 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d10c      	bne.n	8008ea2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8008e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e8c:	b672      	cpsid	i
 8008e8e:	f383 8811 	msr	BASEPRI, r3
 8008e92:	f3bf 8f6f 	isb	sy
 8008e96:	f3bf 8f4f 	dsb	sy
 8008e9a:	b662      	cpsie	i
 8008e9c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008e9e:	bf00      	nop
 8008ea0:	e7fe      	b.n	8008ea0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d002      	beq.n	8008eae <xQueueGenericCreateStatic+0x5a>
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d001      	beq.n	8008eb2 <xQueueGenericCreateStatic+0x5e>
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e000      	b.n	8008eb4 <xQueueGenericCreateStatic+0x60>
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d10c      	bne.n	8008ed2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8008eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ebc:	b672      	cpsid	i
 8008ebe:	f383 8811 	msr	BASEPRI, r3
 8008ec2:	f3bf 8f6f 	isb	sy
 8008ec6:	f3bf 8f4f 	dsb	sy
 8008eca:	b662      	cpsie	i
 8008ecc:	623b      	str	r3, [r7, #32]
}
 8008ece:	bf00      	nop
 8008ed0:	e7fe      	b.n	8008ed0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d102      	bne.n	8008ede <xQueueGenericCreateStatic+0x8a>
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d101      	bne.n	8008ee2 <xQueueGenericCreateStatic+0x8e>
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e000      	b.n	8008ee4 <xQueueGenericCreateStatic+0x90>
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d10c      	bne.n	8008f02 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8008ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eec:	b672      	cpsid	i
 8008eee:	f383 8811 	msr	BASEPRI, r3
 8008ef2:	f3bf 8f6f 	isb	sy
 8008ef6:	f3bf 8f4f 	dsb	sy
 8008efa:	b662      	cpsie	i
 8008efc:	61fb      	str	r3, [r7, #28]
}
 8008efe:	bf00      	nop
 8008f00:	e7fe      	b.n	8008f00 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008f02:	2350      	movs	r3, #80	; 0x50
 8008f04:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	2b50      	cmp	r3, #80	; 0x50
 8008f0a:	d00c      	beq.n	8008f26 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8008f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f10:	b672      	cpsid	i
 8008f12:	f383 8811 	msr	BASEPRI, r3
 8008f16:	f3bf 8f6f 	isb	sy
 8008f1a:	f3bf 8f4f 	dsb	sy
 8008f1e:	b662      	cpsie	i
 8008f20:	61bb      	str	r3, [r7, #24]
}
 8008f22:	bf00      	nop
 8008f24:	e7fe      	b.n	8008f24 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008f26:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d00d      	beq.n	8008f4e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f34:	2201      	movs	r2, #1
 8008f36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008f3a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f40:	9300      	str	r3, [sp, #0]
 8008f42:	4613      	mov	r3, r2
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	68b9      	ldr	r1, [r7, #8]
 8008f48:	68f8      	ldr	r0, [r7, #12]
 8008f4a:	f000 f805 	bl	8008f58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3730      	adds	r7, #48	; 0x30
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	607a      	str	r2, [r7, #4]
 8008f64:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d103      	bne.n	8008f74 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008f6c:	69bb      	ldr	r3, [r7, #24]
 8008f6e:	69ba      	ldr	r2, [r7, #24]
 8008f70:	601a      	str	r2, [r3, #0]
 8008f72:	e002      	b.n	8008f7a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008f74:	69bb      	ldr	r3, [r7, #24]
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008f7a:	69bb      	ldr	r3, [r7, #24]
 8008f7c:	68fa      	ldr	r2, [r7, #12]
 8008f7e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008f80:	69bb      	ldr	r3, [r7, #24]
 8008f82:	68ba      	ldr	r2, [r7, #8]
 8008f84:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008f86:	2101      	movs	r1, #1
 8008f88:	69b8      	ldr	r0, [r7, #24]
 8008f8a:	f7ff fef9 	bl	8008d80 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008f8e:	69bb      	ldr	r3, [r7, #24]
 8008f90:	78fa      	ldrb	r2, [r7, #3]
 8008f92:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008f96:	bf00      	nop
 8008f98:	3710      	adds	r7, #16
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
	...

08008fa0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b08e      	sub	sp, #56	; 0x38
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	60f8      	str	r0, [r7, #12]
 8008fa8:	60b9      	str	r1, [r7, #8]
 8008faa:	607a      	str	r2, [r7, #4]
 8008fac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d10c      	bne.n	8008fd6 <xQueueGenericSend+0x36>
	__asm volatile
 8008fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc0:	b672      	cpsid	i
 8008fc2:	f383 8811 	msr	BASEPRI, r3
 8008fc6:	f3bf 8f6f 	isb	sy
 8008fca:	f3bf 8f4f 	dsb	sy
 8008fce:	b662      	cpsie	i
 8008fd0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008fd2:	bf00      	nop
 8008fd4:	e7fe      	b.n	8008fd4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d103      	bne.n	8008fe4 <xQueueGenericSend+0x44>
 8008fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d101      	bne.n	8008fe8 <xQueueGenericSend+0x48>
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	e000      	b.n	8008fea <xQueueGenericSend+0x4a>
 8008fe8:	2300      	movs	r3, #0
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d10c      	bne.n	8009008 <xQueueGenericSend+0x68>
	__asm volatile
 8008fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff2:	b672      	cpsid	i
 8008ff4:	f383 8811 	msr	BASEPRI, r3
 8008ff8:	f3bf 8f6f 	isb	sy
 8008ffc:	f3bf 8f4f 	dsb	sy
 8009000:	b662      	cpsie	i
 8009002:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009004:	bf00      	nop
 8009006:	e7fe      	b.n	8009006 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	2b02      	cmp	r3, #2
 800900c:	d103      	bne.n	8009016 <xQueueGenericSend+0x76>
 800900e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009012:	2b01      	cmp	r3, #1
 8009014:	d101      	bne.n	800901a <xQueueGenericSend+0x7a>
 8009016:	2301      	movs	r3, #1
 8009018:	e000      	b.n	800901c <xQueueGenericSend+0x7c>
 800901a:	2300      	movs	r3, #0
 800901c:	2b00      	cmp	r3, #0
 800901e:	d10c      	bne.n	800903a <xQueueGenericSend+0x9a>
	__asm volatile
 8009020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009024:	b672      	cpsid	i
 8009026:	f383 8811 	msr	BASEPRI, r3
 800902a:	f3bf 8f6f 	isb	sy
 800902e:	f3bf 8f4f 	dsb	sy
 8009032:	b662      	cpsie	i
 8009034:	623b      	str	r3, [r7, #32]
}
 8009036:	bf00      	nop
 8009038:	e7fe      	b.n	8009038 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800903a:	f001 fa3b 	bl	800a4b4 <xTaskGetSchedulerState>
 800903e:	4603      	mov	r3, r0
 8009040:	2b00      	cmp	r3, #0
 8009042:	d102      	bne.n	800904a <xQueueGenericSend+0xaa>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d101      	bne.n	800904e <xQueueGenericSend+0xae>
 800904a:	2301      	movs	r3, #1
 800904c:	e000      	b.n	8009050 <xQueueGenericSend+0xb0>
 800904e:	2300      	movs	r3, #0
 8009050:	2b00      	cmp	r3, #0
 8009052:	d10c      	bne.n	800906e <xQueueGenericSend+0xce>
	__asm volatile
 8009054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009058:	b672      	cpsid	i
 800905a:	f383 8811 	msr	BASEPRI, r3
 800905e:	f3bf 8f6f 	isb	sy
 8009062:	f3bf 8f4f 	dsb	sy
 8009066:	b662      	cpsie	i
 8009068:	61fb      	str	r3, [r7, #28]
}
 800906a:	bf00      	nop
 800906c:	e7fe      	b.n	800906c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800906e:	f001 ff6d 	bl	800af4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009074:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800907a:	429a      	cmp	r2, r3
 800907c:	d302      	bcc.n	8009084 <xQueueGenericSend+0xe4>
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	2b02      	cmp	r3, #2
 8009082:	d129      	bne.n	80090d8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009084:	683a      	ldr	r2, [r7, #0]
 8009086:	68b9      	ldr	r1, [r7, #8]
 8009088:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800908a:	f000 fa15 	bl	80094b8 <prvCopyDataToQueue>
 800908e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009094:	2b00      	cmp	r3, #0
 8009096:	d010      	beq.n	80090ba <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909a:	3324      	adds	r3, #36	; 0x24
 800909c:	4618      	mov	r0, r3
 800909e:	f001 f817 	bl	800a0d0 <xTaskRemoveFromEventList>
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d013      	beq.n	80090d0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80090a8:	4b3f      	ldr	r3, [pc, #252]	; (80091a8 <xQueueGenericSend+0x208>)
 80090aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090ae:	601a      	str	r2, [r3, #0]
 80090b0:	f3bf 8f4f 	dsb	sy
 80090b4:	f3bf 8f6f 	isb	sy
 80090b8:	e00a      	b.n	80090d0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80090ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d007      	beq.n	80090d0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80090c0:	4b39      	ldr	r3, [pc, #228]	; (80091a8 <xQueueGenericSend+0x208>)
 80090c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090c6:	601a      	str	r2, [r3, #0]
 80090c8:	f3bf 8f4f 	dsb	sy
 80090cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80090d0:	f001 ff70 	bl	800afb4 <vPortExitCritical>
				return pdPASS;
 80090d4:	2301      	movs	r3, #1
 80090d6:	e063      	b.n	80091a0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d103      	bne.n	80090e6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80090de:	f001 ff69 	bl	800afb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80090e2:	2300      	movs	r3, #0
 80090e4:	e05c      	b.n	80091a0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80090e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d106      	bne.n	80090fa <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80090ec:	f107 0314 	add.w	r3, r7, #20
 80090f0:	4618      	mov	r0, r3
 80090f2:	f001 f87b 	bl	800a1ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80090f6:	2301      	movs	r3, #1
 80090f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80090fa:	f001 ff5b 	bl	800afb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80090fe:	f000 fdb3 	bl	8009c68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009102:	f001 ff23 	bl	800af4c <vPortEnterCritical>
 8009106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009108:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800910c:	b25b      	sxtb	r3, r3
 800910e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009112:	d103      	bne.n	800911c <xQueueGenericSend+0x17c>
 8009114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009116:	2200      	movs	r2, #0
 8009118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800911c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800911e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009122:	b25b      	sxtb	r3, r3
 8009124:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009128:	d103      	bne.n	8009132 <xQueueGenericSend+0x192>
 800912a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912c:	2200      	movs	r2, #0
 800912e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009132:	f001 ff3f 	bl	800afb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009136:	1d3a      	adds	r2, r7, #4
 8009138:	f107 0314 	add.w	r3, r7, #20
 800913c:	4611      	mov	r1, r2
 800913e:	4618      	mov	r0, r3
 8009140:	f001 f86a 	bl	800a218 <xTaskCheckForTimeOut>
 8009144:	4603      	mov	r3, r0
 8009146:	2b00      	cmp	r3, #0
 8009148:	d124      	bne.n	8009194 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800914a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800914c:	f000 faac 	bl	80096a8 <prvIsQueueFull>
 8009150:	4603      	mov	r3, r0
 8009152:	2b00      	cmp	r3, #0
 8009154:	d018      	beq.n	8009188 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009158:	3310      	adds	r3, #16
 800915a:	687a      	ldr	r2, [r7, #4]
 800915c:	4611      	mov	r1, r2
 800915e:	4618      	mov	r0, r3
 8009160:	f000 ff62 	bl	800a028 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009164:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009166:	f000 fa37 	bl	80095d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800916a:	f000 fd8b 	bl	8009c84 <xTaskResumeAll>
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	f47f af7c 	bne.w	800906e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8009176:	4b0c      	ldr	r3, [pc, #48]	; (80091a8 <xQueueGenericSend+0x208>)
 8009178:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800917c:	601a      	str	r2, [r3, #0]
 800917e:	f3bf 8f4f 	dsb	sy
 8009182:	f3bf 8f6f 	isb	sy
 8009186:	e772      	b.n	800906e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009188:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800918a:	f000 fa25 	bl	80095d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800918e:	f000 fd79 	bl	8009c84 <xTaskResumeAll>
 8009192:	e76c      	b.n	800906e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009194:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009196:	f000 fa1f 	bl	80095d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800919a:	f000 fd73 	bl	8009c84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800919e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3738      	adds	r7, #56	; 0x38
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	e000ed04 	.word	0xe000ed04

080091ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b08e      	sub	sp, #56	; 0x38
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	60f8      	str	r0, [r7, #12]
 80091b4:	60b9      	str	r1, [r7, #8]
 80091b6:	607a      	str	r2, [r7, #4]
 80091b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80091be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d10c      	bne.n	80091de <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80091c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c8:	b672      	cpsid	i
 80091ca:	f383 8811 	msr	BASEPRI, r3
 80091ce:	f3bf 8f6f 	isb	sy
 80091d2:	f3bf 8f4f 	dsb	sy
 80091d6:	b662      	cpsie	i
 80091d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80091da:	bf00      	nop
 80091dc:	e7fe      	b.n	80091dc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d103      	bne.n	80091ec <xQueueGenericSendFromISR+0x40>
 80091e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d101      	bne.n	80091f0 <xQueueGenericSendFromISR+0x44>
 80091ec:	2301      	movs	r3, #1
 80091ee:	e000      	b.n	80091f2 <xQueueGenericSendFromISR+0x46>
 80091f0:	2300      	movs	r3, #0
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d10c      	bne.n	8009210 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80091f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091fa:	b672      	cpsid	i
 80091fc:	f383 8811 	msr	BASEPRI, r3
 8009200:	f3bf 8f6f 	isb	sy
 8009204:	f3bf 8f4f 	dsb	sy
 8009208:	b662      	cpsie	i
 800920a:	623b      	str	r3, [r7, #32]
}
 800920c:	bf00      	nop
 800920e:	e7fe      	b.n	800920e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	2b02      	cmp	r3, #2
 8009214:	d103      	bne.n	800921e <xQueueGenericSendFromISR+0x72>
 8009216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800921a:	2b01      	cmp	r3, #1
 800921c:	d101      	bne.n	8009222 <xQueueGenericSendFromISR+0x76>
 800921e:	2301      	movs	r3, #1
 8009220:	e000      	b.n	8009224 <xQueueGenericSendFromISR+0x78>
 8009222:	2300      	movs	r3, #0
 8009224:	2b00      	cmp	r3, #0
 8009226:	d10c      	bne.n	8009242 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8009228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922c:	b672      	cpsid	i
 800922e:	f383 8811 	msr	BASEPRI, r3
 8009232:	f3bf 8f6f 	isb	sy
 8009236:	f3bf 8f4f 	dsb	sy
 800923a:	b662      	cpsie	i
 800923c:	61fb      	str	r3, [r7, #28]
}
 800923e:	bf00      	nop
 8009240:	e7fe      	b.n	8009240 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009242:	f001 ff6b 	bl	800b11c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009246:	f3ef 8211 	mrs	r2, BASEPRI
 800924a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924e:	b672      	cpsid	i
 8009250:	f383 8811 	msr	BASEPRI, r3
 8009254:	f3bf 8f6f 	isb	sy
 8009258:	f3bf 8f4f 	dsb	sy
 800925c:	b662      	cpsie	i
 800925e:	61ba      	str	r2, [r7, #24]
 8009260:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009262:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009264:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009268:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800926a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800926c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800926e:	429a      	cmp	r2, r3
 8009270:	d302      	bcc.n	8009278 <xQueueGenericSendFromISR+0xcc>
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	2b02      	cmp	r3, #2
 8009276:	d12c      	bne.n	80092d2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800927e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009282:	683a      	ldr	r2, [r7, #0]
 8009284:	68b9      	ldr	r1, [r7, #8]
 8009286:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009288:	f000 f916 	bl	80094b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800928c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009290:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009294:	d112      	bne.n	80092bc <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800929a:	2b00      	cmp	r3, #0
 800929c:	d016      	beq.n	80092cc <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800929e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a0:	3324      	adds	r3, #36	; 0x24
 80092a2:	4618      	mov	r0, r3
 80092a4:	f000 ff14 	bl	800a0d0 <xTaskRemoveFromEventList>
 80092a8:	4603      	mov	r3, r0
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d00e      	beq.n	80092cc <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d00b      	beq.n	80092cc <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2201      	movs	r2, #1
 80092b8:	601a      	str	r2, [r3, #0]
 80092ba:	e007      	b.n	80092cc <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80092bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80092c0:	3301      	adds	r3, #1
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	b25a      	sxtb	r2, r3
 80092c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80092cc:	2301      	movs	r3, #1
 80092ce:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80092d0:	e001      	b.n	80092d6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80092d2:	2300      	movs	r3, #0
 80092d4:	637b      	str	r3, [r7, #52]	; 0x34
 80092d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80092e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80092e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3738      	adds	r7, #56	; 0x38
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b08c      	sub	sp, #48	; 0x30
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	60f8      	str	r0, [r7, #12]
 80092f4:	60b9      	str	r1, [r7, #8]
 80092f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80092f8:	2300      	movs	r3, #0
 80092fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009302:	2b00      	cmp	r3, #0
 8009304:	d10c      	bne.n	8009320 <xQueueReceive+0x34>
	__asm volatile
 8009306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930a:	b672      	cpsid	i
 800930c:	f383 8811 	msr	BASEPRI, r3
 8009310:	f3bf 8f6f 	isb	sy
 8009314:	f3bf 8f4f 	dsb	sy
 8009318:	b662      	cpsie	i
 800931a:	623b      	str	r3, [r7, #32]
}
 800931c:	bf00      	nop
 800931e:	e7fe      	b.n	800931e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d103      	bne.n	800932e <xQueueReceive+0x42>
 8009326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800932a:	2b00      	cmp	r3, #0
 800932c:	d101      	bne.n	8009332 <xQueueReceive+0x46>
 800932e:	2301      	movs	r3, #1
 8009330:	e000      	b.n	8009334 <xQueueReceive+0x48>
 8009332:	2300      	movs	r3, #0
 8009334:	2b00      	cmp	r3, #0
 8009336:	d10c      	bne.n	8009352 <xQueueReceive+0x66>
	__asm volatile
 8009338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800933c:	b672      	cpsid	i
 800933e:	f383 8811 	msr	BASEPRI, r3
 8009342:	f3bf 8f6f 	isb	sy
 8009346:	f3bf 8f4f 	dsb	sy
 800934a:	b662      	cpsie	i
 800934c:	61fb      	str	r3, [r7, #28]
}
 800934e:	bf00      	nop
 8009350:	e7fe      	b.n	8009350 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009352:	f001 f8af 	bl	800a4b4 <xTaskGetSchedulerState>
 8009356:	4603      	mov	r3, r0
 8009358:	2b00      	cmp	r3, #0
 800935a:	d102      	bne.n	8009362 <xQueueReceive+0x76>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d101      	bne.n	8009366 <xQueueReceive+0x7a>
 8009362:	2301      	movs	r3, #1
 8009364:	e000      	b.n	8009368 <xQueueReceive+0x7c>
 8009366:	2300      	movs	r3, #0
 8009368:	2b00      	cmp	r3, #0
 800936a:	d10c      	bne.n	8009386 <xQueueReceive+0x9a>
	__asm volatile
 800936c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009370:	b672      	cpsid	i
 8009372:	f383 8811 	msr	BASEPRI, r3
 8009376:	f3bf 8f6f 	isb	sy
 800937a:	f3bf 8f4f 	dsb	sy
 800937e:	b662      	cpsie	i
 8009380:	61bb      	str	r3, [r7, #24]
}
 8009382:	bf00      	nop
 8009384:	e7fe      	b.n	8009384 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009386:	f001 fde1 	bl	800af4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800938a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800938c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800938e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009392:	2b00      	cmp	r3, #0
 8009394:	d01f      	beq.n	80093d6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009396:	68b9      	ldr	r1, [r7, #8]
 8009398:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800939a:	f000 f8f7 	bl	800958c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800939e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a0:	1e5a      	subs	r2, r3, #1
 80093a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a8:	691b      	ldr	r3, [r3, #16]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d00f      	beq.n	80093ce <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b0:	3310      	adds	r3, #16
 80093b2:	4618      	mov	r0, r3
 80093b4:	f000 fe8c 	bl	800a0d0 <xTaskRemoveFromEventList>
 80093b8:	4603      	mov	r3, r0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d007      	beq.n	80093ce <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80093be:	4b3d      	ldr	r3, [pc, #244]	; (80094b4 <xQueueReceive+0x1c8>)
 80093c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093c4:	601a      	str	r2, [r3, #0]
 80093c6:	f3bf 8f4f 	dsb	sy
 80093ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80093ce:	f001 fdf1 	bl	800afb4 <vPortExitCritical>
				return pdPASS;
 80093d2:	2301      	movs	r3, #1
 80093d4:	e069      	b.n	80094aa <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d103      	bne.n	80093e4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80093dc:	f001 fdea 	bl	800afb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80093e0:	2300      	movs	r3, #0
 80093e2:	e062      	b.n	80094aa <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80093e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d106      	bne.n	80093f8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80093ea:	f107 0310 	add.w	r3, r7, #16
 80093ee:	4618      	mov	r0, r3
 80093f0:	f000 fefc 	bl	800a1ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80093f4:	2301      	movs	r3, #1
 80093f6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80093f8:	f001 fddc 	bl	800afb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80093fc:	f000 fc34 	bl	8009c68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009400:	f001 fda4 	bl	800af4c <vPortEnterCritical>
 8009404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009406:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800940a:	b25b      	sxtb	r3, r3
 800940c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009410:	d103      	bne.n	800941a <xQueueReceive+0x12e>
 8009412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009414:	2200      	movs	r2, #0
 8009416:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800941a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800941c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009420:	b25b      	sxtb	r3, r3
 8009422:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009426:	d103      	bne.n	8009430 <xQueueReceive+0x144>
 8009428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942a:	2200      	movs	r2, #0
 800942c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009430:	f001 fdc0 	bl	800afb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009434:	1d3a      	adds	r2, r7, #4
 8009436:	f107 0310 	add.w	r3, r7, #16
 800943a:	4611      	mov	r1, r2
 800943c:	4618      	mov	r0, r3
 800943e:	f000 feeb 	bl	800a218 <xTaskCheckForTimeOut>
 8009442:	4603      	mov	r3, r0
 8009444:	2b00      	cmp	r3, #0
 8009446:	d123      	bne.n	8009490 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009448:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800944a:	f000 f917 	bl	800967c <prvIsQueueEmpty>
 800944e:	4603      	mov	r3, r0
 8009450:	2b00      	cmp	r3, #0
 8009452:	d017      	beq.n	8009484 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009456:	3324      	adds	r3, #36	; 0x24
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	4611      	mov	r1, r2
 800945c:	4618      	mov	r0, r3
 800945e:	f000 fde3 	bl	800a028 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009462:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009464:	f000 f8b8 	bl	80095d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009468:	f000 fc0c 	bl	8009c84 <xTaskResumeAll>
 800946c:	4603      	mov	r3, r0
 800946e:	2b00      	cmp	r3, #0
 8009470:	d189      	bne.n	8009386 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8009472:	4b10      	ldr	r3, [pc, #64]	; (80094b4 <xQueueReceive+0x1c8>)
 8009474:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009478:	601a      	str	r2, [r3, #0]
 800947a:	f3bf 8f4f 	dsb	sy
 800947e:	f3bf 8f6f 	isb	sy
 8009482:	e780      	b.n	8009386 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009484:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009486:	f000 f8a7 	bl	80095d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800948a:	f000 fbfb 	bl	8009c84 <xTaskResumeAll>
 800948e:	e77a      	b.n	8009386 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009490:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009492:	f000 f8a1 	bl	80095d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009496:	f000 fbf5 	bl	8009c84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800949a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800949c:	f000 f8ee 	bl	800967c <prvIsQueueEmpty>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	f43f af6f 	beq.w	8009386 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80094a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3730      	adds	r7, #48	; 0x30
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	bf00      	nop
 80094b4:	e000ed04 	.word	0xe000ed04

080094b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b086      	sub	sp, #24
 80094bc:	af00      	add	r7, sp, #0
 80094be:	60f8      	str	r0, [r7, #12]
 80094c0:	60b9      	str	r1, [r7, #8]
 80094c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80094c4:	2300      	movs	r3, #0
 80094c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d10d      	bne.n	80094f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d14d      	bne.n	800957a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	4618      	mov	r0, r3
 80094e4:	f001 f804 	bl	800a4f0 <xTaskPriorityDisinherit>
 80094e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2200      	movs	r2, #0
 80094ee:	609a      	str	r2, [r3, #8]
 80094f0:	e043      	b.n	800957a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d119      	bne.n	800952c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	6858      	ldr	r0, [r3, #4]
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009500:	461a      	mov	r2, r3
 8009502:	68b9      	ldr	r1, [r7, #8]
 8009504:	f012 faef 	bl	801bae6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	685a      	ldr	r2, [r3, #4]
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009510:	441a      	add	r2, r3
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	685a      	ldr	r2, [r3, #4]
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	689b      	ldr	r3, [r3, #8]
 800951e:	429a      	cmp	r2, r3
 8009520:	d32b      	bcc.n	800957a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681a      	ldr	r2, [r3, #0]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	605a      	str	r2, [r3, #4]
 800952a:	e026      	b.n	800957a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	68d8      	ldr	r0, [r3, #12]
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009534:	461a      	mov	r2, r3
 8009536:	68b9      	ldr	r1, [r7, #8]
 8009538:	f012 fad5 	bl	801bae6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	68da      	ldr	r2, [r3, #12]
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009544:	425b      	negs	r3, r3
 8009546:	441a      	add	r2, r3
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	68da      	ldr	r2, [r3, #12]
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	429a      	cmp	r2, r3
 8009556:	d207      	bcs.n	8009568 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	689a      	ldr	r2, [r3, #8]
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009560:	425b      	negs	r3, r3
 8009562:	441a      	add	r2, r3
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2b02      	cmp	r3, #2
 800956c:	d105      	bne.n	800957a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d002      	beq.n	800957a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	3b01      	subs	r3, #1
 8009578:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	1c5a      	adds	r2, r3, #1
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009582:	697b      	ldr	r3, [r7, #20]
}
 8009584:	4618      	mov	r0, r3
 8009586:	3718      	adds	r7, #24
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800959a:	2b00      	cmp	r3, #0
 800959c:	d018      	beq.n	80095d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	68da      	ldr	r2, [r3, #12]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a6:	441a      	add	r2, r3
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	68da      	ldr	r2, [r3, #12]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	689b      	ldr	r3, [r3, #8]
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d303      	bcc.n	80095c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	68d9      	ldr	r1, [r3, #12]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c8:	461a      	mov	r2, r3
 80095ca:	6838      	ldr	r0, [r7, #0]
 80095cc:	f012 fa8b 	bl	801bae6 <memcpy>
	}
}
 80095d0:	bf00      	nop
 80095d2:	3708      	adds	r7, #8
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80095e0:	f001 fcb4 	bl	800af4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80095ec:	e011      	b.n	8009612 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d012      	beq.n	800961c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	3324      	adds	r3, #36	; 0x24
 80095fa:	4618      	mov	r0, r3
 80095fc:	f000 fd68 	bl	800a0d0 <xTaskRemoveFromEventList>
 8009600:	4603      	mov	r3, r0
 8009602:	2b00      	cmp	r3, #0
 8009604:	d001      	beq.n	800960a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009606:	f000 fe6d 	bl	800a2e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800960a:	7bfb      	ldrb	r3, [r7, #15]
 800960c:	3b01      	subs	r3, #1
 800960e:	b2db      	uxtb	r3, r3
 8009610:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009616:	2b00      	cmp	r3, #0
 8009618:	dce9      	bgt.n	80095ee <prvUnlockQueue+0x16>
 800961a:	e000      	b.n	800961e <prvUnlockQueue+0x46>
					break;
 800961c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	22ff      	movs	r2, #255	; 0xff
 8009622:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009626:	f001 fcc5 	bl	800afb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800962a:	f001 fc8f 	bl	800af4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009634:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009636:	e011      	b.n	800965c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	691b      	ldr	r3, [r3, #16]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d012      	beq.n	8009666 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	3310      	adds	r3, #16
 8009644:	4618      	mov	r0, r3
 8009646:	f000 fd43 	bl	800a0d0 <xTaskRemoveFromEventList>
 800964a:	4603      	mov	r3, r0
 800964c:	2b00      	cmp	r3, #0
 800964e:	d001      	beq.n	8009654 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009650:	f000 fe48 	bl	800a2e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009654:	7bbb      	ldrb	r3, [r7, #14]
 8009656:	3b01      	subs	r3, #1
 8009658:	b2db      	uxtb	r3, r3
 800965a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800965c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009660:	2b00      	cmp	r3, #0
 8009662:	dce9      	bgt.n	8009638 <prvUnlockQueue+0x60>
 8009664:	e000      	b.n	8009668 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009666:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	22ff      	movs	r2, #255	; 0xff
 800966c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009670:	f001 fca0 	bl	800afb4 <vPortExitCritical>
}
 8009674:	bf00      	nop
 8009676:	3710      	adds	r7, #16
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009684:	f001 fc62 	bl	800af4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800968c:	2b00      	cmp	r3, #0
 800968e:	d102      	bne.n	8009696 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009690:	2301      	movs	r3, #1
 8009692:	60fb      	str	r3, [r7, #12]
 8009694:	e001      	b.n	800969a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009696:	2300      	movs	r3, #0
 8009698:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800969a:	f001 fc8b 	bl	800afb4 <vPortExitCritical>

	return xReturn;
 800969e:	68fb      	ldr	r3, [r7, #12]
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3710      	adds	r7, #16
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}

080096a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b084      	sub	sp, #16
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80096b0:	f001 fc4c 	bl	800af4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096bc:	429a      	cmp	r2, r3
 80096be:	d102      	bne.n	80096c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80096c0:	2301      	movs	r3, #1
 80096c2:	60fb      	str	r3, [r7, #12]
 80096c4:	e001      	b.n	80096ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80096c6:	2300      	movs	r3, #0
 80096c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80096ca:	f001 fc73 	bl	800afb4 <vPortExitCritical>

	return xReturn;
 80096ce:	68fb      	ldr	r3, [r7, #12]
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3710      	adds	r7, #16
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80096d8:	b480      	push	{r7}
 80096da:	b085      	sub	sp, #20
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80096e2:	2300      	movs	r3, #0
 80096e4:	60fb      	str	r3, [r7, #12]
 80096e6:	e014      	b.n	8009712 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80096e8:	4a0f      	ldr	r2, [pc, #60]	; (8009728 <vQueueAddToRegistry+0x50>)
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d10b      	bne.n	800970c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80096f4:	490c      	ldr	r1, [pc, #48]	; (8009728 <vQueueAddToRegistry+0x50>)
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	683a      	ldr	r2, [r7, #0]
 80096fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80096fe:	4a0a      	ldr	r2, [pc, #40]	; (8009728 <vQueueAddToRegistry+0x50>)
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	00db      	lsls	r3, r3, #3
 8009704:	4413      	add	r3, r2
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800970a:	e006      	b.n	800971a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	3301      	adds	r3, #1
 8009710:	60fb      	str	r3, [r7, #12]
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2b07      	cmp	r3, #7
 8009716:	d9e7      	bls.n	80096e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009718:	bf00      	nop
 800971a:	bf00      	nop
 800971c:	3714      	adds	r7, #20
 800971e:	46bd      	mov	sp, r7
 8009720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009724:	4770      	bx	lr
 8009726:	bf00      	nop
 8009728:	20007480 	.word	0x20007480

0800972c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800972c:	b580      	push	{r7, lr}
 800972e:	b086      	sub	sp, #24
 8009730:	af00      	add	r7, sp, #0
 8009732:	60f8      	str	r0, [r7, #12]
 8009734:	60b9      	str	r1, [r7, #8]
 8009736:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800973c:	f001 fc06 	bl	800af4c <vPortEnterCritical>
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009746:	b25b      	sxtb	r3, r3
 8009748:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800974c:	d103      	bne.n	8009756 <vQueueWaitForMessageRestricted+0x2a>
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	2200      	movs	r2, #0
 8009752:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800975c:	b25b      	sxtb	r3, r3
 800975e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009762:	d103      	bne.n	800976c <vQueueWaitForMessageRestricted+0x40>
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	2200      	movs	r2, #0
 8009768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800976c:	f001 fc22 	bl	800afb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009774:	2b00      	cmp	r3, #0
 8009776:	d106      	bne.n	8009786 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	3324      	adds	r3, #36	; 0x24
 800977c:	687a      	ldr	r2, [r7, #4]
 800977e:	68b9      	ldr	r1, [r7, #8]
 8009780:	4618      	mov	r0, r3
 8009782:	f000 fc77 	bl	800a074 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009786:	6978      	ldr	r0, [r7, #20]
 8009788:	f7ff ff26 	bl	80095d8 <prvUnlockQueue>
	}
 800978c:	bf00      	nop
 800978e:	3718      	adds	r7, #24
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009794:	b580      	push	{r7, lr}
 8009796:	b08e      	sub	sp, #56	; 0x38
 8009798:	af04      	add	r7, sp, #16
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	60b9      	str	r1, [r7, #8]
 800979e:	607a      	str	r2, [r7, #4]
 80097a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80097a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d10c      	bne.n	80097c2 <xTaskCreateStatic+0x2e>
	__asm volatile
 80097a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ac:	b672      	cpsid	i
 80097ae:	f383 8811 	msr	BASEPRI, r3
 80097b2:	f3bf 8f6f 	isb	sy
 80097b6:	f3bf 8f4f 	dsb	sy
 80097ba:	b662      	cpsie	i
 80097bc:	623b      	str	r3, [r7, #32]
}
 80097be:	bf00      	nop
 80097c0:	e7fe      	b.n	80097c0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80097c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d10c      	bne.n	80097e2 <xTaskCreateStatic+0x4e>
	__asm volatile
 80097c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097cc:	b672      	cpsid	i
 80097ce:	f383 8811 	msr	BASEPRI, r3
 80097d2:	f3bf 8f6f 	isb	sy
 80097d6:	f3bf 8f4f 	dsb	sy
 80097da:	b662      	cpsie	i
 80097dc:	61fb      	str	r3, [r7, #28]
}
 80097de:	bf00      	nop
 80097e0:	e7fe      	b.n	80097e0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80097e2:	23a8      	movs	r3, #168	; 0xa8
 80097e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	2ba8      	cmp	r3, #168	; 0xa8
 80097ea:	d00c      	beq.n	8009806 <xTaskCreateStatic+0x72>
	__asm volatile
 80097ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f0:	b672      	cpsid	i
 80097f2:	f383 8811 	msr	BASEPRI, r3
 80097f6:	f3bf 8f6f 	isb	sy
 80097fa:	f3bf 8f4f 	dsb	sy
 80097fe:	b662      	cpsie	i
 8009800:	61bb      	str	r3, [r7, #24]
}
 8009802:	bf00      	nop
 8009804:	e7fe      	b.n	8009804 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009806:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800980a:	2b00      	cmp	r3, #0
 800980c:	d01e      	beq.n	800984c <xTaskCreateStatic+0xb8>
 800980e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009810:	2b00      	cmp	r3, #0
 8009812:	d01b      	beq.n	800984c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009816:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800981c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800981e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009820:	2202      	movs	r2, #2
 8009822:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009826:	2300      	movs	r3, #0
 8009828:	9303      	str	r3, [sp, #12]
 800982a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982c:	9302      	str	r3, [sp, #8]
 800982e:	f107 0314 	add.w	r3, r7, #20
 8009832:	9301      	str	r3, [sp, #4]
 8009834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009836:	9300      	str	r3, [sp, #0]
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	687a      	ldr	r2, [r7, #4]
 800983c:	68b9      	ldr	r1, [r7, #8]
 800983e:	68f8      	ldr	r0, [r7, #12]
 8009840:	f000 f850 	bl	80098e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009844:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009846:	f000 f8f5 	bl	8009a34 <prvAddNewTaskToReadyList>
 800984a:	e001      	b.n	8009850 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800984c:	2300      	movs	r3, #0
 800984e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009850:	697b      	ldr	r3, [r7, #20]
	}
 8009852:	4618      	mov	r0, r3
 8009854:	3728      	adds	r7, #40	; 0x28
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}

0800985a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800985a:	b580      	push	{r7, lr}
 800985c:	b08c      	sub	sp, #48	; 0x30
 800985e:	af04      	add	r7, sp, #16
 8009860:	60f8      	str	r0, [r7, #12]
 8009862:	60b9      	str	r1, [r7, #8]
 8009864:	603b      	str	r3, [r7, #0]
 8009866:	4613      	mov	r3, r2
 8009868:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800986a:	88fb      	ldrh	r3, [r7, #6]
 800986c:	009b      	lsls	r3, r3, #2
 800986e:	4618      	mov	r0, r3
 8009870:	f001 fc98 	bl	800b1a4 <pvPortMalloc>
 8009874:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d00e      	beq.n	800989a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800987c:	20a8      	movs	r0, #168	; 0xa8
 800987e:	f001 fc91 	bl	800b1a4 <pvPortMalloc>
 8009882:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d003      	beq.n	8009892 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800988a:	69fb      	ldr	r3, [r7, #28]
 800988c:	697a      	ldr	r2, [r7, #20]
 800988e:	631a      	str	r2, [r3, #48]	; 0x30
 8009890:	e005      	b.n	800989e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009892:	6978      	ldr	r0, [r7, #20]
 8009894:	f001 fd50 	bl	800b338 <vPortFree>
 8009898:	e001      	b.n	800989e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800989a:	2300      	movs	r3, #0
 800989c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800989e:	69fb      	ldr	r3, [r7, #28]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d017      	beq.n	80098d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80098a4:	69fb      	ldr	r3, [r7, #28]
 80098a6:	2200      	movs	r2, #0
 80098a8:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80098ac:	88fa      	ldrh	r2, [r7, #6]
 80098ae:	2300      	movs	r3, #0
 80098b0:	9303      	str	r3, [sp, #12]
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	9302      	str	r3, [sp, #8]
 80098b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b8:	9301      	str	r3, [sp, #4]
 80098ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098bc:	9300      	str	r3, [sp, #0]
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	68b9      	ldr	r1, [r7, #8]
 80098c2:	68f8      	ldr	r0, [r7, #12]
 80098c4:	f000 f80e 	bl	80098e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80098c8:	69f8      	ldr	r0, [r7, #28]
 80098ca:	f000 f8b3 	bl	8009a34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80098ce:	2301      	movs	r3, #1
 80098d0:	61bb      	str	r3, [r7, #24]
 80098d2:	e002      	b.n	80098da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80098d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80098d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80098da:	69bb      	ldr	r3, [r7, #24]
	}
 80098dc:	4618      	mov	r0, r3
 80098de:	3720      	adds	r7, #32
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b088      	sub	sp, #32
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	607a      	str	r2, [r7, #4]
 80098f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80098f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	009b      	lsls	r3, r3, #2
 80098fa:	461a      	mov	r2, r3
 80098fc:	21a5      	movs	r1, #165	; 0xa5
 80098fe:	f011 ffc1 	bl	801b884 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009906:	6879      	ldr	r1, [r7, #4]
 8009908:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800990c:	440b      	add	r3, r1
 800990e:	009b      	lsls	r3, r3, #2
 8009910:	4413      	add	r3, r2
 8009912:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009914:	69bb      	ldr	r3, [r7, #24]
 8009916:	f023 0307 	bic.w	r3, r3, #7
 800991a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800991c:	69bb      	ldr	r3, [r7, #24]
 800991e:	f003 0307 	and.w	r3, r3, #7
 8009922:	2b00      	cmp	r3, #0
 8009924:	d00c      	beq.n	8009940 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8009926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800992a:	b672      	cpsid	i
 800992c:	f383 8811 	msr	BASEPRI, r3
 8009930:	f3bf 8f6f 	isb	sy
 8009934:	f3bf 8f4f 	dsb	sy
 8009938:	b662      	cpsie	i
 800993a:	617b      	str	r3, [r7, #20]
}
 800993c:	bf00      	nop
 800993e:	e7fe      	b.n	800993e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d01f      	beq.n	8009986 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009946:	2300      	movs	r3, #0
 8009948:	61fb      	str	r3, [r7, #28]
 800994a:	e012      	b.n	8009972 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800994c:	68ba      	ldr	r2, [r7, #8]
 800994e:	69fb      	ldr	r3, [r7, #28]
 8009950:	4413      	add	r3, r2
 8009952:	7819      	ldrb	r1, [r3, #0]
 8009954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009956:	69fb      	ldr	r3, [r7, #28]
 8009958:	4413      	add	r3, r2
 800995a:	3334      	adds	r3, #52	; 0x34
 800995c:	460a      	mov	r2, r1
 800995e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009960:	68ba      	ldr	r2, [r7, #8]
 8009962:	69fb      	ldr	r3, [r7, #28]
 8009964:	4413      	add	r3, r2
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d006      	beq.n	800997a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800996c:	69fb      	ldr	r3, [r7, #28]
 800996e:	3301      	adds	r3, #1
 8009970:	61fb      	str	r3, [r7, #28]
 8009972:	69fb      	ldr	r3, [r7, #28]
 8009974:	2b0f      	cmp	r3, #15
 8009976:	d9e9      	bls.n	800994c <prvInitialiseNewTask+0x68>
 8009978:	e000      	b.n	800997c <prvInitialiseNewTask+0x98>
			{
				break;
 800997a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800997c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800997e:	2200      	movs	r2, #0
 8009980:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009984:	e003      	b.n	800998e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009988:	2200      	movs	r2, #0
 800998a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800998e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009990:	2b37      	cmp	r3, #55	; 0x37
 8009992:	d901      	bls.n	8009998 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009994:	2337      	movs	r3, #55	; 0x37
 8009996:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800999a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800999c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800999e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099a2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80099a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a6:	2200      	movs	r2, #0
 80099a8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80099aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ac:	3304      	adds	r3, #4
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7ff f952 	bl	8008c58 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80099b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b6:	3318      	adds	r3, #24
 80099b8:	4618      	mov	r0, r3
 80099ba:	f7ff f94d 	bl	8008c58 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80099be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80099ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80099ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80099d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d6:	2200      	movs	r2, #0
 80099d8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80099dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099de:	2200      	movs	r2, #0
 80099e0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80099e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e6:	3354      	adds	r3, #84	; 0x54
 80099e8:	224c      	movs	r2, #76	; 0x4c
 80099ea:	2100      	movs	r1, #0
 80099ec:	4618      	mov	r0, r3
 80099ee:	f011 ff49 	bl	801b884 <memset>
 80099f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f4:	4a0c      	ldr	r2, [pc, #48]	; (8009a28 <prvInitialiseNewTask+0x144>)
 80099f6:	659a      	str	r2, [r3, #88]	; 0x58
 80099f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fa:	4a0c      	ldr	r2, [pc, #48]	; (8009a2c <prvInitialiseNewTask+0x148>)
 80099fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80099fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a00:	4a0b      	ldr	r2, [pc, #44]	; (8009a30 <prvInitialiseNewTask+0x14c>)
 8009a02:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009a04:	683a      	ldr	r2, [r7, #0]
 8009a06:	68f9      	ldr	r1, [r7, #12]
 8009a08:	69b8      	ldr	r0, [r7, #24]
 8009a0a:	f001 f993 	bl	800ad34 <pxPortInitialiseStack>
 8009a0e:	4602      	mov	r2, r0
 8009a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a12:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d002      	beq.n	8009a20 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a1e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a20:	bf00      	nop
 8009a22:	3720      	adds	r7, #32
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}
 8009a28:	20010900 	.word	0x20010900
 8009a2c:	20010968 	.word	0x20010968
 8009a30:	200109d0 	.word	0x200109d0

08009a34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b082      	sub	sp, #8
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009a3c:	f001 fa86 	bl	800af4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009a40:	4b2d      	ldr	r3, [pc, #180]	; (8009af8 <prvAddNewTaskToReadyList+0xc4>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	3301      	adds	r3, #1
 8009a46:	4a2c      	ldr	r2, [pc, #176]	; (8009af8 <prvAddNewTaskToReadyList+0xc4>)
 8009a48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009a4a:	4b2c      	ldr	r3, [pc, #176]	; (8009afc <prvAddNewTaskToReadyList+0xc8>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d109      	bne.n	8009a66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009a52:	4a2a      	ldr	r2, [pc, #168]	; (8009afc <prvAddNewTaskToReadyList+0xc8>)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009a58:	4b27      	ldr	r3, [pc, #156]	; (8009af8 <prvAddNewTaskToReadyList+0xc4>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d110      	bne.n	8009a82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009a60:	f000 fc64 	bl	800a32c <prvInitialiseTaskLists>
 8009a64:	e00d      	b.n	8009a82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009a66:	4b26      	ldr	r3, [pc, #152]	; (8009b00 <prvAddNewTaskToReadyList+0xcc>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d109      	bne.n	8009a82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009a6e:	4b23      	ldr	r3, [pc, #140]	; (8009afc <prvAddNewTaskToReadyList+0xc8>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d802      	bhi.n	8009a82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009a7c:	4a1f      	ldr	r2, [pc, #124]	; (8009afc <prvAddNewTaskToReadyList+0xc8>)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009a82:	4b20      	ldr	r3, [pc, #128]	; (8009b04 <prvAddNewTaskToReadyList+0xd0>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	3301      	adds	r3, #1
 8009a88:	4a1e      	ldr	r2, [pc, #120]	; (8009b04 <prvAddNewTaskToReadyList+0xd0>)
 8009a8a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009a8c:	4b1d      	ldr	r3, [pc, #116]	; (8009b04 <prvAddNewTaskToReadyList+0xd0>)
 8009a8e:	681a      	ldr	r2, [r3, #0]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a98:	4b1b      	ldr	r3, [pc, #108]	; (8009b08 <prvAddNewTaskToReadyList+0xd4>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d903      	bls.n	8009aa8 <prvAddNewTaskToReadyList+0x74>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa4:	4a18      	ldr	r2, [pc, #96]	; (8009b08 <prvAddNewTaskToReadyList+0xd4>)
 8009aa6:	6013      	str	r3, [r2, #0]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aac:	4613      	mov	r3, r2
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	4413      	add	r3, r2
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	4a15      	ldr	r2, [pc, #84]	; (8009b0c <prvAddNewTaskToReadyList+0xd8>)
 8009ab6:	441a      	add	r2, r3
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	3304      	adds	r3, #4
 8009abc:	4619      	mov	r1, r3
 8009abe:	4610      	mov	r0, r2
 8009ac0:	f7ff f8d7 	bl	8008c72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009ac4:	f001 fa76 	bl	800afb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009ac8:	4b0d      	ldr	r3, [pc, #52]	; (8009b00 <prvAddNewTaskToReadyList+0xcc>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d00e      	beq.n	8009aee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009ad0:	4b0a      	ldr	r3, [pc, #40]	; (8009afc <prvAddNewTaskToReadyList+0xc8>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d207      	bcs.n	8009aee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009ade:	4b0c      	ldr	r3, [pc, #48]	; (8009b10 <prvAddNewTaskToReadyList+0xdc>)
 8009ae0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ae4:	601a      	str	r2, [r3, #0]
 8009ae6:	f3bf 8f4f 	dsb	sy
 8009aea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009aee:	bf00      	nop
 8009af0:	3708      	adds	r7, #8
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop
 8009af8:	20007994 	.word	0x20007994
 8009afc:	200074c0 	.word	0x200074c0
 8009b00:	200079a0 	.word	0x200079a0
 8009b04:	200079b0 	.word	0x200079b0
 8009b08:	2000799c 	.word	0x2000799c
 8009b0c:	200074c4 	.word	0x200074c4
 8009b10:	e000ed04 	.word	0xe000ed04

08009b14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d019      	beq.n	8009b5a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009b26:	4b14      	ldr	r3, [pc, #80]	; (8009b78 <vTaskDelay+0x64>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d00c      	beq.n	8009b48 <vTaskDelay+0x34>
	__asm volatile
 8009b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b32:	b672      	cpsid	i
 8009b34:	f383 8811 	msr	BASEPRI, r3
 8009b38:	f3bf 8f6f 	isb	sy
 8009b3c:	f3bf 8f4f 	dsb	sy
 8009b40:	b662      	cpsie	i
 8009b42:	60bb      	str	r3, [r7, #8]
}
 8009b44:	bf00      	nop
 8009b46:	e7fe      	b.n	8009b46 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8009b48:	f000 f88e 	bl	8009c68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009b4c:	2100      	movs	r1, #0
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 fd40 	bl	800a5d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009b54:	f000 f896 	bl	8009c84 <xTaskResumeAll>
 8009b58:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d107      	bne.n	8009b70 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8009b60:	4b06      	ldr	r3, [pc, #24]	; (8009b7c <vTaskDelay+0x68>)
 8009b62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b66:	601a      	str	r2, [r3, #0]
 8009b68:	f3bf 8f4f 	dsb	sy
 8009b6c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b70:	bf00      	nop
 8009b72:	3710      	adds	r7, #16
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}
 8009b78:	200079bc 	.word	0x200079bc
 8009b7c:	e000ed04 	.word	0xe000ed04

08009b80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b08a      	sub	sp, #40	; 0x28
 8009b84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009b86:	2300      	movs	r3, #0
 8009b88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009b8e:	463a      	mov	r2, r7
 8009b90:	1d39      	adds	r1, r7, #4
 8009b92:	f107 0308 	add.w	r3, r7, #8
 8009b96:	4618      	mov	r0, r3
 8009b98:	f7ff f80a 	bl	8008bb0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009b9c:	6839      	ldr	r1, [r7, #0]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	68ba      	ldr	r2, [r7, #8]
 8009ba2:	9202      	str	r2, [sp, #8]
 8009ba4:	9301      	str	r3, [sp, #4]
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	9300      	str	r3, [sp, #0]
 8009baa:	2300      	movs	r3, #0
 8009bac:	460a      	mov	r2, r1
 8009bae:	4926      	ldr	r1, [pc, #152]	; (8009c48 <vTaskStartScheduler+0xc8>)
 8009bb0:	4826      	ldr	r0, [pc, #152]	; (8009c4c <vTaskStartScheduler+0xcc>)
 8009bb2:	f7ff fdef 	bl	8009794 <xTaskCreateStatic>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	4a25      	ldr	r2, [pc, #148]	; (8009c50 <vTaskStartScheduler+0xd0>)
 8009bba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009bbc:	4b24      	ldr	r3, [pc, #144]	; (8009c50 <vTaskStartScheduler+0xd0>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d002      	beq.n	8009bca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	617b      	str	r3, [r7, #20]
 8009bc8:	e001      	b.n	8009bce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	d102      	bne.n	8009bda <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009bd4:	f000 fd52 	bl	800a67c <xTimerCreateTimerTask>
 8009bd8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d11d      	bne.n	8009c1c <vTaskStartScheduler+0x9c>
	__asm volatile
 8009be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be4:	b672      	cpsid	i
 8009be6:	f383 8811 	msr	BASEPRI, r3
 8009bea:	f3bf 8f6f 	isb	sy
 8009bee:	f3bf 8f4f 	dsb	sy
 8009bf2:	b662      	cpsie	i
 8009bf4:	613b      	str	r3, [r7, #16]
}
 8009bf6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009bf8:	4b16      	ldr	r3, [pc, #88]	; (8009c54 <vTaskStartScheduler+0xd4>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	3354      	adds	r3, #84	; 0x54
 8009bfe:	4a16      	ldr	r2, [pc, #88]	; (8009c58 <vTaskStartScheduler+0xd8>)
 8009c00:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009c02:	4b16      	ldr	r3, [pc, #88]	; (8009c5c <vTaskStartScheduler+0xdc>)
 8009c04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c08:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009c0a:	4b15      	ldr	r3, [pc, #84]	; (8009c60 <vTaskStartScheduler+0xe0>)
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009c10:	4b14      	ldr	r3, [pc, #80]	; (8009c64 <vTaskStartScheduler+0xe4>)
 8009c12:	2200      	movs	r2, #0
 8009c14:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009c16:	f001 f91b 	bl	800ae50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009c1a:	e010      	b.n	8009c3e <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c22:	d10c      	bne.n	8009c3e <vTaskStartScheduler+0xbe>
	__asm volatile
 8009c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c28:	b672      	cpsid	i
 8009c2a:	f383 8811 	msr	BASEPRI, r3
 8009c2e:	f3bf 8f6f 	isb	sy
 8009c32:	f3bf 8f4f 	dsb	sy
 8009c36:	b662      	cpsie	i
 8009c38:	60fb      	str	r3, [r7, #12]
}
 8009c3a:	bf00      	nop
 8009c3c:	e7fe      	b.n	8009c3c <vTaskStartScheduler+0xbc>
}
 8009c3e:	bf00      	nop
 8009c40:	3718      	adds	r7, #24
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	0801c900 	.word	0x0801c900
 8009c4c:	0800a2fd 	.word	0x0800a2fd
 8009c50:	200079b8 	.word	0x200079b8
 8009c54:	200074c0 	.word	0x200074c0
 8009c58:	20001fe8 	.word	0x20001fe8
 8009c5c:	200079b4 	.word	0x200079b4
 8009c60:	200079a0 	.word	0x200079a0
 8009c64:	20007998 	.word	0x20007998

08009c68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009c68:	b480      	push	{r7}
 8009c6a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009c6c:	4b04      	ldr	r3, [pc, #16]	; (8009c80 <vTaskSuspendAll+0x18>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	3301      	adds	r3, #1
 8009c72:	4a03      	ldr	r2, [pc, #12]	; (8009c80 <vTaskSuspendAll+0x18>)
 8009c74:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009c76:	bf00      	nop
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr
 8009c80:	200079bc 	.word	0x200079bc

08009c84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b084      	sub	sp, #16
 8009c88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009c92:	4b43      	ldr	r3, [pc, #268]	; (8009da0 <xTaskResumeAll+0x11c>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d10c      	bne.n	8009cb4 <xTaskResumeAll+0x30>
	__asm volatile
 8009c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c9e:	b672      	cpsid	i
 8009ca0:	f383 8811 	msr	BASEPRI, r3
 8009ca4:	f3bf 8f6f 	isb	sy
 8009ca8:	f3bf 8f4f 	dsb	sy
 8009cac:	b662      	cpsie	i
 8009cae:	603b      	str	r3, [r7, #0]
}
 8009cb0:	bf00      	nop
 8009cb2:	e7fe      	b.n	8009cb2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009cb4:	f001 f94a 	bl	800af4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009cb8:	4b39      	ldr	r3, [pc, #228]	; (8009da0 <xTaskResumeAll+0x11c>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	3b01      	subs	r3, #1
 8009cbe:	4a38      	ldr	r2, [pc, #224]	; (8009da0 <xTaskResumeAll+0x11c>)
 8009cc0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cc2:	4b37      	ldr	r3, [pc, #220]	; (8009da0 <xTaskResumeAll+0x11c>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d162      	bne.n	8009d90 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009cca:	4b36      	ldr	r3, [pc, #216]	; (8009da4 <xTaskResumeAll+0x120>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d05e      	beq.n	8009d90 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009cd2:	e02f      	b.n	8009d34 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cd4:	4b34      	ldr	r3, [pc, #208]	; (8009da8 <xTaskResumeAll+0x124>)
 8009cd6:	68db      	ldr	r3, [r3, #12]
 8009cd8:	68db      	ldr	r3, [r3, #12]
 8009cda:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	3318      	adds	r3, #24
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f7ff f823 	bl	8008d2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	3304      	adds	r3, #4
 8009cea:	4618      	mov	r0, r3
 8009cec:	f7ff f81e 	bl	8008d2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cf4:	4b2d      	ldr	r3, [pc, #180]	; (8009dac <xTaskResumeAll+0x128>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d903      	bls.n	8009d04 <xTaskResumeAll+0x80>
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d00:	4a2a      	ldr	r2, [pc, #168]	; (8009dac <xTaskResumeAll+0x128>)
 8009d02:	6013      	str	r3, [r2, #0]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d08:	4613      	mov	r3, r2
 8009d0a:	009b      	lsls	r3, r3, #2
 8009d0c:	4413      	add	r3, r2
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	4a27      	ldr	r2, [pc, #156]	; (8009db0 <xTaskResumeAll+0x12c>)
 8009d12:	441a      	add	r2, r3
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	3304      	adds	r3, #4
 8009d18:	4619      	mov	r1, r3
 8009d1a:	4610      	mov	r0, r2
 8009d1c:	f7fe ffa9 	bl	8008c72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d24:	4b23      	ldr	r3, [pc, #140]	; (8009db4 <xTaskResumeAll+0x130>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d302      	bcc.n	8009d34 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8009d2e:	4b22      	ldr	r3, [pc, #136]	; (8009db8 <xTaskResumeAll+0x134>)
 8009d30:	2201      	movs	r2, #1
 8009d32:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d34:	4b1c      	ldr	r3, [pc, #112]	; (8009da8 <xTaskResumeAll+0x124>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d1cb      	bne.n	8009cd4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d001      	beq.n	8009d46 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009d42:	f000 fb97 	bl	800a474 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009d46:	4b1d      	ldr	r3, [pc, #116]	; (8009dbc <xTaskResumeAll+0x138>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d010      	beq.n	8009d74 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009d52:	f000 f847 	bl	8009de4 <xTaskIncrementTick>
 8009d56:	4603      	mov	r3, r0
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d002      	beq.n	8009d62 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8009d5c:	4b16      	ldr	r3, [pc, #88]	; (8009db8 <xTaskResumeAll+0x134>)
 8009d5e:	2201      	movs	r2, #1
 8009d60:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	3b01      	subs	r3, #1
 8009d66:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d1f1      	bne.n	8009d52 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8009d6e:	4b13      	ldr	r3, [pc, #76]	; (8009dbc <xTaskResumeAll+0x138>)
 8009d70:	2200      	movs	r2, #0
 8009d72:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009d74:	4b10      	ldr	r3, [pc, #64]	; (8009db8 <xTaskResumeAll+0x134>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d009      	beq.n	8009d90 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009d80:	4b0f      	ldr	r3, [pc, #60]	; (8009dc0 <xTaskResumeAll+0x13c>)
 8009d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d86:	601a      	str	r2, [r3, #0]
 8009d88:	f3bf 8f4f 	dsb	sy
 8009d8c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d90:	f001 f910 	bl	800afb4 <vPortExitCritical>

	return xAlreadyYielded;
 8009d94:	68bb      	ldr	r3, [r7, #8]
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3710      	adds	r7, #16
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	200079bc 	.word	0x200079bc
 8009da4:	20007994 	.word	0x20007994
 8009da8:	20007954 	.word	0x20007954
 8009dac:	2000799c 	.word	0x2000799c
 8009db0:	200074c4 	.word	0x200074c4
 8009db4:	200074c0 	.word	0x200074c0
 8009db8:	200079a8 	.word	0x200079a8
 8009dbc:	200079a4 	.word	0x200079a4
 8009dc0:	e000ed04 	.word	0xe000ed04

08009dc4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b083      	sub	sp, #12
 8009dc8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009dca:	4b05      	ldr	r3, [pc, #20]	; (8009de0 <xTaskGetTickCount+0x1c>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009dd0:	687b      	ldr	r3, [r7, #4]
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	370c      	adds	r7, #12
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr
 8009dde:	bf00      	nop
 8009de0:	20007998 	.word	0x20007998

08009de4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b086      	sub	sp, #24
 8009de8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009dea:	2300      	movs	r3, #0
 8009dec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009dee:	4b50      	ldr	r3, [pc, #320]	; (8009f30 <xTaskIncrementTick+0x14c>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	f040 808b 	bne.w	8009f0e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009df8:	4b4e      	ldr	r3, [pc, #312]	; (8009f34 <xTaskIncrementTick+0x150>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009e00:	4a4c      	ldr	r2, [pc, #304]	; (8009f34 <xTaskIncrementTick+0x150>)
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d122      	bne.n	8009e52 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8009e0c:	4b4a      	ldr	r3, [pc, #296]	; (8009f38 <xTaskIncrementTick+0x154>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d00c      	beq.n	8009e30 <xTaskIncrementTick+0x4c>
	__asm volatile
 8009e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e1a:	b672      	cpsid	i
 8009e1c:	f383 8811 	msr	BASEPRI, r3
 8009e20:	f3bf 8f6f 	isb	sy
 8009e24:	f3bf 8f4f 	dsb	sy
 8009e28:	b662      	cpsie	i
 8009e2a:	603b      	str	r3, [r7, #0]
}
 8009e2c:	bf00      	nop
 8009e2e:	e7fe      	b.n	8009e2e <xTaskIncrementTick+0x4a>
 8009e30:	4b41      	ldr	r3, [pc, #260]	; (8009f38 <xTaskIncrementTick+0x154>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	60fb      	str	r3, [r7, #12]
 8009e36:	4b41      	ldr	r3, [pc, #260]	; (8009f3c <xTaskIncrementTick+0x158>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a3f      	ldr	r2, [pc, #252]	; (8009f38 <xTaskIncrementTick+0x154>)
 8009e3c:	6013      	str	r3, [r2, #0]
 8009e3e:	4a3f      	ldr	r2, [pc, #252]	; (8009f3c <xTaskIncrementTick+0x158>)
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	6013      	str	r3, [r2, #0]
 8009e44:	4b3e      	ldr	r3, [pc, #248]	; (8009f40 <xTaskIncrementTick+0x15c>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	3301      	adds	r3, #1
 8009e4a:	4a3d      	ldr	r2, [pc, #244]	; (8009f40 <xTaskIncrementTick+0x15c>)
 8009e4c:	6013      	str	r3, [r2, #0]
 8009e4e:	f000 fb11 	bl	800a474 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009e52:	4b3c      	ldr	r3, [pc, #240]	; (8009f44 <xTaskIncrementTick+0x160>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	693a      	ldr	r2, [r7, #16]
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d349      	bcc.n	8009ef0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e5c:	4b36      	ldr	r3, [pc, #216]	; (8009f38 <xTaskIncrementTick+0x154>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d104      	bne.n	8009e70 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e66:	4b37      	ldr	r3, [pc, #220]	; (8009f44 <xTaskIncrementTick+0x160>)
 8009e68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e6c:	601a      	str	r2, [r3, #0]
					break;
 8009e6e:	e03f      	b.n	8009ef0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e70:	4b31      	ldr	r3, [pc, #196]	; (8009f38 <xTaskIncrementTick+0x154>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	68db      	ldr	r3, [r3, #12]
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009e80:	693a      	ldr	r2, [r7, #16]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d203      	bcs.n	8009e90 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009e88:	4a2e      	ldr	r2, [pc, #184]	; (8009f44 <xTaskIncrementTick+0x160>)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009e8e:	e02f      	b.n	8009ef0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	3304      	adds	r3, #4
 8009e94:	4618      	mov	r0, r3
 8009e96:	f7fe ff49 	bl	8008d2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d004      	beq.n	8009eac <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	3318      	adds	r3, #24
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7fe ff40 	bl	8008d2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eb0:	4b25      	ldr	r3, [pc, #148]	; (8009f48 <xTaskIncrementTick+0x164>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d903      	bls.n	8009ec0 <xTaskIncrementTick+0xdc>
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ebc:	4a22      	ldr	r2, [pc, #136]	; (8009f48 <xTaskIncrementTick+0x164>)
 8009ebe:	6013      	str	r3, [r2, #0]
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ec4:	4613      	mov	r3, r2
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	4413      	add	r3, r2
 8009eca:	009b      	lsls	r3, r3, #2
 8009ecc:	4a1f      	ldr	r2, [pc, #124]	; (8009f4c <xTaskIncrementTick+0x168>)
 8009ece:	441a      	add	r2, r3
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	3304      	adds	r3, #4
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	4610      	mov	r0, r2
 8009ed8:	f7fe fecb 	bl	8008c72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ee0:	4b1b      	ldr	r3, [pc, #108]	; (8009f50 <xTaskIncrementTick+0x16c>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d3b8      	bcc.n	8009e5c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8009eea:	2301      	movs	r3, #1
 8009eec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009eee:	e7b5      	b.n	8009e5c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009ef0:	4b17      	ldr	r3, [pc, #92]	; (8009f50 <xTaskIncrementTick+0x16c>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ef6:	4915      	ldr	r1, [pc, #84]	; (8009f4c <xTaskIncrementTick+0x168>)
 8009ef8:	4613      	mov	r3, r2
 8009efa:	009b      	lsls	r3, r3, #2
 8009efc:	4413      	add	r3, r2
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	440b      	add	r3, r1
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d907      	bls.n	8009f18 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	617b      	str	r3, [r7, #20]
 8009f0c:	e004      	b.n	8009f18 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009f0e:	4b11      	ldr	r3, [pc, #68]	; (8009f54 <xTaskIncrementTick+0x170>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	3301      	adds	r3, #1
 8009f14:	4a0f      	ldr	r2, [pc, #60]	; (8009f54 <xTaskIncrementTick+0x170>)
 8009f16:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009f18:	4b0f      	ldr	r3, [pc, #60]	; (8009f58 <xTaskIncrementTick+0x174>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d001      	beq.n	8009f24 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8009f20:	2301      	movs	r3, #1
 8009f22:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009f24:	697b      	ldr	r3, [r7, #20]
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3718      	adds	r7, #24
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	200079bc 	.word	0x200079bc
 8009f34:	20007998 	.word	0x20007998
 8009f38:	2000794c 	.word	0x2000794c
 8009f3c:	20007950 	.word	0x20007950
 8009f40:	200079ac 	.word	0x200079ac
 8009f44:	200079b4 	.word	0x200079b4
 8009f48:	2000799c 	.word	0x2000799c
 8009f4c:	200074c4 	.word	0x200074c4
 8009f50:	200074c0 	.word	0x200074c0
 8009f54:	200079a4 	.word	0x200079a4
 8009f58:	200079a8 	.word	0x200079a8

08009f5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b085      	sub	sp, #20
 8009f60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009f62:	4b2b      	ldr	r3, [pc, #172]	; (800a010 <vTaskSwitchContext+0xb4>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d003      	beq.n	8009f72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009f6a:	4b2a      	ldr	r3, [pc, #168]	; (800a014 <vTaskSwitchContext+0xb8>)
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009f70:	e048      	b.n	800a004 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8009f72:	4b28      	ldr	r3, [pc, #160]	; (800a014 <vTaskSwitchContext+0xb8>)
 8009f74:	2200      	movs	r2, #0
 8009f76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f78:	4b27      	ldr	r3, [pc, #156]	; (800a018 <vTaskSwitchContext+0xbc>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	60fb      	str	r3, [r7, #12]
 8009f7e:	e012      	b.n	8009fa6 <vTaskSwitchContext+0x4a>
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d10c      	bne.n	8009fa0 <vTaskSwitchContext+0x44>
	__asm volatile
 8009f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f8a:	b672      	cpsid	i
 8009f8c:	f383 8811 	msr	BASEPRI, r3
 8009f90:	f3bf 8f6f 	isb	sy
 8009f94:	f3bf 8f4f 	dsb	sy
 8009f98:	b662      	cpsie	i
 8009f9a:	607b      	str	r3, [r7, #4]
}
 8009f9c:	bf00      	nop
 8009f9e:	e7fe      	b.n	8009f9e <vTaskSwitchContext+0x42>
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	3b01      	subs	r3, #1
 8009fa4:	60fb      	str	r3, [r7, #12]
 8009fa6:	491d      	ldr	r1, [pc, #116]	; (800a01c <vTaskSwitchContext+0xc0>)
 8009fa8:	68fa      	ldr	r2, [r7, #12]
 8009faa:	4613      	mov	r3, r2
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	4413      	add	r3, r2
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	440b      	add	r3, r1
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d0e2      	beq.n	8009f80 <vTaskSwitchContext+0x24>
 8009fba:	68fa      	ldr	r2, [r7, #12]
 8009fbc:	4613      	mov	r3, r2
 8009fbe:	009b      	lsls	r3, r3, #2
 8009fc0:	4413      	add	r3, r2
 8009fc2:	009b      	lsls	r3, r3, #2
 8009fc4:	4a15      	ldr	r2, [pc, #84]	; (800a01c <vTaskSwitchContext+0xc0>)
 8009fc6:	4413      	add	r3, r2
 8009fc8:	60bb      	str	r3, [r7, #8]
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	685a      	ldr	r2, [r3, #4]
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	605a      	str	r2, [r3, #4]
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	685a      	ldr	r2, [r3, #4]
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	3308      	adds	r3, #8
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d104      	bne.n	8009fea <vTaskSwitchContext+0x8e>
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	685a      	ldr	r2, [r3, #4]
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	605a      	str	r2, [r3, #4]
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	68db      	ldr	r3, [r3, #12]
 8009ff0:	4a0b      	ldr	r2, [pc, #44]	; (800a020 <vTaskSwitchContext+0xc4>)
 8009ff2:	6013      	str	r3, [r2, #0]
 8009ff4:	4a08      	ldr	r2, [pc, #32]	; (800a018 <vTaskSwitchContext+0xbc>)
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009ffa:	4b09      	ldr	r3, [pc, #36]	; (800a020 <vTaskSwitchContext+0xc4>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	3354      	adds	r3, #84	; 0x54
 800a000:	4a08      	ldr	r2, [pc, #32]	; (800a024 <vTaskSwitchContext+0xc8>)
 800a002:	6013      	str	r3, [r2, #0]
}
 800a004:	bf00      	nop
 800a006:	3714      	adds	r7, #20
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr
 800a010:	200079bc 	.word	0x200079bc
 800a014:	200079a8 	.word	0x200079a8
 800a018:	2000799c 	.word	0x2000799c
 800a01c:	200074c4 	.word	0x200074c4
 800a020:	200074c0 	.word	0x200074c0
 800a024:	20001fe8 	.word	0x20001fe8

0800a028 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b084      	sub	sp, #16
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
 800a030:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d10c      	bne.n	800a052 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800a038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a03c:	b672      	cpsid	i
 800a03e:	f383 8811 	msr	BASEPRI, r3
 800a042:	f3bf 8f6f 	isb	sy
 800a046:	f3bf 8f4f 	dsb	sy
 800a04a:	b662      	cpsie	i
 800a04c:	60fb      	str	r3, [r7, #12]
}
 800a04e:	bf00      	nop
 800a050:	e7fe      	b.n	800a050 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a052:	4b07      	ldr	r3, [pc, #28]	; (800a070 <vTaskPlaceOnEventList+0x48>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	3318      	adds	r3, #24
 800a058:	4619      	mov	r1, r3
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f7fe fe2d 	bl	8008cba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a060:	2101      	movs	r1, #1
 800a062:	6838      	ldr	r0, [r7, #0]
 800a064:	f000 fab6 	bl	800a5d4 <prvAddCurrentTaskToDelayedList>
}
 800a068:	bf00      	nop
 800a06a:	3710      	adds	r7, #16
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}
 800a070:	200074c0 	.word	0x200074c0

0800a074 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a074:	b580      	push	{r7, lr}
 800a076:	b086      	sub	sp, #24
 800a078:	af00      	add	r7, sp, #0
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	60b9      	str	r1, [r7, #8]
 800a07e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d10c      	bne.n	800a0a0 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800a086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a08a:	b672      	cpsid	i
 800a08c:	f383 8811 	msr	BASEPRI, r3
 800a090:	f3bf 8f6f 	isb	sy
 800a094:	f3bf 8f4f 	dsb	sy
 800a098:	b662      	cpsie	i
 800a09a:	617b      	str	r3, [r7, #20]
}
 800a09c:	bf00      	nop
 800a09e:	e7fe      	b.n	800a09e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a0a0:	4b0a      	ldr	r3, [pc, #40]	; (800a0cc <vTaskPlaceOnEventListRestricted+0x58>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	3318      	adds	r3, #24
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	68f8      	ldr	r0, [r7, #12]
 800a0aa:	f7fe fde2 	bl	8008c72 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d002      	beq.n	800a0ba <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800a0b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a0b8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a0ba:	6879      	ldr	r1, [r7, #4]
 800a0bc:	68b8      	ldr	r0, [r7, #8]
 800a0be:	f000 fa89 	bl	800a5d4 <prvAddCurrentTaskToDelayedList>
	}
 800a0c2:	bf00      	nop
 800a0c4:	3718      	adds	r7, #24
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
 800a0ca:	bf00      	nop
 800a0cc:	200074c0 	.word	0x200074c0

0800a0d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b086      	sub	sp, #24
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	68db      	ldr	r3, [r3, #12]
 800a0dc:	68db      	ldr	r3, [r3, #12]
 800a0de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d10c      	bne.n	800a100 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800a0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ea:	b672      	cpsid	i
 800a0ec:	f383 8811 	msr	BASEPRI, r3
 800a0f0:	f3bf 8f6f 	isb	sy
 800a0f4:	f3bf 8f4f 	dsb	sy
 800a0f8:	b662      	cpsie	i
 800a0fa:	60fb      	str	r3, [r7, #12]
}
 800a0fc:	bf00      	nop
 800a0fe:	e7fe      	b.n	800a0fe <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	3318      	adds	r3, #24
 800a104:	4618      	mov	r0, r3
 800a106:	f7fe fe11 	bl	8008d2c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a10a:	4b1e      	ldr	r3, [pc, #120]	; (800a184 <xTaskRemoveFromEventList+0xb4>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d11d      	bne.n	800a14e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	3304      	adds	r3, #4
 800a116:	4618      	mov	r0, r3
 800a118:	f7fe fe08 	bl	8008d2c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a120:	4b19      	ldr	r3, [pc, #100]	; (800a188 <xTaskRemoveFromEventList+0xb8>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	429a      	cmp	r2, r3
 800a126:	d903      	bls.n	800a130 <xTaskRemoveFromEventList+0x60>
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a12c:	4a16      	ldr	r2, [pc, #88]	; (800a188 <xTaskRemoveFromEventList+0xb8>)
 800a12e:	6013      	str	r3, [r2, #0]
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a134:	4613      	mov	r3, r2
 800a136:	009b      	lsls	r3, r3, #2
 800a138:	4413      	add	r3, r2
 800a13a:	009b      	lsls	r3, r3, #2
 800a13c:	4a13      	ldr	r2, [pc, #76]	; (800a18c <xTaskRemoveFromEventList+0xbc>)
 800a13e:	441a      	add	r2, r3
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	3304      	adds	r3, #4
 800a144:	4619      	mov	r1, r3
 800a146:	4610      	mov	r0, r2
 800a148:	f7fe fd93 	bl	8008c72 <vListInsertEnd>
 800a14c:	e005      	b.n	800a15a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	3318      	adds	r3, #24
 800a152:	4619      	mov	r1, r3
 800a154:	480e      	ldr	r0, [pc, #56]	; (800a190 <xTaskRemoveFromEventList+0xc0>)
 800a156:	f7fe fd8c 	bl	8008c72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a15e:	4b0d      	ldr	r3, [pc, #52]	; (800a194 <xTaskRemoveFromEventList+0xc4>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a164:	429a      	cmp	r2, r3
 800a166:	d905      	bls.n	800a174 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a168:	2301      	movs	r3, #1
 800a16a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a16c:	4b0a      	ldr	r3, [pc, #40]	; (800a198 <xTaskRemoveFromEventList+0xc8>)
 800a16e:	2201      	movs	r2, #1
 800a170:	601a      	str	r2, [r3, #0]
 800a172:	e001      	b.n	800a178 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800a174:	2300      	movs	r3, #0
 800a176:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a178:	697b      	ldr	r3, [r7, #20]
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3718      	adds	r7, #24
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
 800a182:	bf00      	nop
 800a184:	200079bc 	.word	0x200079bc
 800a188:	2000799c 	.word	0x2000799c
 800a18c:	200074c4 	.word	0x200074c4
 800a190:	20007954 	.word	0x20007954
 800a194:	200074c0 	.word	0x200074c0
 800a198:	200079a8 	.word	0x200079a8

0800a19c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b084      	sub	sp, #16
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d10c      	bne.n	800a1c4 <vTaskSetTimeOutState+0x28>
	__asm volatile
 800a1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ae:	b672      	cpsid	i
 800a1b0:	f383 8811 	msr	BASEPRI, r3
 800a1b4:	f3bf 8f6f 	isb	sy
 800a1b8:	f3bf 8f4f 	dsb	sy
 800a1bc:	b662      	cpsie	i
 800a1be:	60fb      	str	r3, [r7, #12]
}
 800a1c0:	bf00      	nop
 800a1c2:	e7fe      	b.n	800a1c2 <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 800a1c4:	f000 fec2 	bl	800af4c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a1c8:	4b06      	ldr	r3, [pc, #24]	; (800a1e4 <vTaskSetTimeOutState+0x48>)
 800a1ca:	681a      	ldr	r2, [r3, #0]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800a1d0:	4b05      	ldr	r3, [pc, #20]	; (800a1e8 <vTaskSetTimeOutState+0x4c>)
 800a1d2:	681a      	ldr	r2, [r3, #0]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800a1d8:	f000 feec 	bl	800afb4 <vPortExitCritical>
}
 800a1dc:	bf00      	nop
 800a1de:	3710      	adds	r7, #16
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	200079ac 	.word	0x200079ac
 800a1e8:	20007998 	.word	0x20007998

0800a1ec <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b083      	sub	sp, #12
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a1f4:	4b06      	ldr	r3, [pc, #24]	; (800a210 <vTaskInternalSetTimeOutState+0x24>)
 800a1f6:	681a      	ldr	r2, [r3, #0]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a1fc:	4b05      	ldr	r3, [pc, #20]	; (800a214 <vTaskInternalSetTimeOutState+0x28>)
 800a1fe:	681a      	ldr	r2, [r3, #0]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	605a      	str	r2, [r3, #4]
}
 800a204:	bf00      	nop
 800a206:	370c      	adds	r7, #12
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr
 800a210:	200079ac 	.word	0x200079ac
 800a214:	20007998 	.word	0x20007998

0800a218 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b088      	sub	sp, #32
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d10c      	bne.n	800a242 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800a228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a22c:	b672      	cpsid	i
 800a22e:	f383 8811 	msr	BASEPRI, r3
 800a232:	f3bf 8f6f 	isb	sy
 800a236:	f3bf 8f4f 	dsb	sy
 800a23a:	b662      	cpsie	i
 800a23c:	613b      	str	r3, [r7, #16]
}
 800a23e:	bf00      	nop
 800a240:	e7fe      	b.n	800a240 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d10c      	bne.n	800a262 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800a248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24c:	b672      	cpsid	i
 800a24e:	f383 8811 	msr	BASEPRI, r3
 800a252:	f3bf 8f6f 	isb	sy
 800a256:	f3bf 8f4f 	dsb	sy
 800a25a:	b662      	cpsie	i
 800a25c:	60fb      	str	r3, [r7, #12]
}
 800a25e:	bf00      	nop
 800a260:	e7fe      	b.n	800a260 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800a262:	f000 fe73 	bl	800af4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a266:	4b1d      	ldr	r3, [pc, #116]	; (800a2dc <xTaskCheckForTimeOut+0xc4>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	69ba      	ldr	r2, [r7, #24]
 800a272:	1ad3      	subs	r3, r2, r3
 800a274:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a27e:	d102      	bne.n	800a286 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a280:	2300      	movs	r3, #0
 800a282:	61fb      	str	r3, [r7, #28]
 800a284:	e023      	b.n	800a2ce <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681a      	ldr	r2, [r3, #0]
 800a28a:	4b15      	ldr	r3, [pc, #84]	; (800a2e0 <xTaskCheckForTimeOut+0xc8>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	429a      	cmp	r2, r3
 800a290:	d007      	beq.n	800a2a2 <xTaskCheckForTimeOut+0x8a>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	69ba      	ldr	r2, [r7, #24]
 800a298:	429a      	cmp	r2, r3
 800a29a:	d302      	bcc.n	800a2a2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a29c:	2301      	movs	r3, #1
 800a29e:	61fb      	str	r3, [r7, #28]
 800a2a0:	e015      	b.n	800a2ce <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	697a      	ldr	r2, [r7, #20]
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d20b      	bcs.n	800a2c4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	681a      	ldr	r2, [r3, #0]
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	1ad2      	subs	r2, r2, r3
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f7ff ff97 	bl	800a1ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	61fb      	str	r3, [r7, #28]
 800a2c2:	e004      	b.n	800a2ce <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a2ce:	f000 fe71 	bl	800afb4 <vPortExitCritical>

	return xReturn;
 800a2d2:	69fb      	ldr	r3, [r7, #28]
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3720      	adds	r7, #32
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}
 800a2dc:	20007998 	.word	0x20007998
 800a2e0:	200079ac 	.word	0x200079ac

0800a2e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a2e8:	4b03      	ldr	r3, [pc, #12]	; (800a2f8 <vTaskMissedYield+0x14>)
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	601a      	str	r2, [r3, #0]
}
 800a2ee:	bf00      	nop
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr
 800a2f8:	200079a8 	.word	0x200079a8

0800a2fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b082      	sub	sp, #8
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a304:	f000 f852 	bl	800a3ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a308:	4b06      	ldr	r3, [pc, #24]	; (800a324 <prvIdleTask+0x28>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d9f9      	bls.n	800a304 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a310:	4b05      	ldr	r3, [pc, #20]	; (800a328 <prvIdleTask+0x2c>)
 800a312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a316:	601a      	str	r2, [r3, #0]
 800a318:	f3bf 8f4f 	dsb	sy
 800a31c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a320:	e7f0      	b.n	800a304 <prvIdleTask+0x8>
 800a322:	bf00      	nop
 800a324:	200074c4 	.word	0x200074c4
 800a328:	e000ed04 	.word	0xe000ed04

0800a32c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b082      	sub	sp, #8
 800a330:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a332:	2300      	movs	r3, #0
 800a334:	607b      	str	r3, [r7, #4]
 800a336:	e00c      	b.n	800a352 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a338:	687a      	ldr	r2, [r7, #4]
 800a33a:	4613      	mov	r3, r2
 800a33c:	009b      	lsls	r3, r3, #2
 800a33e:	4413      	add	r3, r2
 800a340:	009b      	lsls	r3, r3, #2
 800a342:	4a12      	ldr	r2, [pc, #72]	; (800a38c <prvInitialiseTaskLists+0x60>)
 800a344:	4413      	add	r3, r2
 800a346:	4618      	mov	r0, r3
 800a348:	f7fe fc66 	bl	8008c18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	3301      	adds	r3, #1
 800a350:	607b      	str	r3, [r7, #4]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2b37      	cmp	r3, #55	; 0x37
 800a356:	d9ef      	bls.n	800a338 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a358:	480d      	ldr	r0, [pc, #52]	; (800a390 <prvInitialiseTaskLists+0x64>)
 800a35a:	f7fe fc5d 	bl	8008c18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a35e:	480d      	ldr	r0, [pc, #52]	; (800a394 <prvInitialiseTaskLists+0x68>)
 800a360:	f7fe fc5a 	bl	8008c18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a364:	480c      	ldr	r0, [pc, #48]	; (800a398 <prvInitialiseTaskLists+0x6c>)
 800a366:	f7fe fc57 	bl	8008c18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a36a:	480c      	ldr	r0, [pc, #48]	; (800a39c <prvInitialiseTaskLists+0x70>)
 800a36c:	f7fe fc54 	bl	8008c18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a370:	480b      	ldr	r0, [pc, #44]	; (800a3a0 <prvInitialiseTaskLists+0x74>)
 800a372:	f7fe fc51 	bl	8008c18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a376:	4b0b      	ldr	r3, [pc, #44]	; (800a3a4 <prvInitialiseTaskLists+0x78>)
 800a378:	4a05      	ldr	r2, [pc, #20]	; (800a390 <prvInitialiseTaskLists+0x64>)
 800a37a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a37c:	4b0a      	ldr	r3, [pc, #40]	; (800a3a8 <prvInitialiseTaskLists+0x7c>)
 800a37e:	4a05      	ldr	r2, [pc, #20]	; (800a394 <prvInitialiseTaskLists+0x68>)
 800a380:	601a      	str	r2, [r3, #0]
}
 800a382:	bf00      	nop
 800a384:	3708      	adds	r7, #8
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}
 800a38a:	bf00      	nop
 800a38c:	200074c4 	.word	0x200074c4
 800a390:	20007924 	.word	0x20007924
 800a394:	20007938 	.word	0x20007938
 800a398:	20007954 	.word	0x20007954
 800a39c:	20007968 	.word	0x20007968
 800a3a0:	20007980 	.word	0x20007980
 800a3a4:	2000794c 	.word	0x2000794c
 800a3a8:	20007950 	.word	0x20007950

0800a3ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b082      	sub	sp, #8
 800a3b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a3b2:	e019      	b.n	800a3e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a3b4:	f000 fdca 	bl	800af4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3b8:	4b10      	ldr	r3, [pc, #64]	; (800a3fc <prvCheckTasksWaitingTermination+0x50>)
 800a3ba:	68db      	ldr	r3, [r3, #12]
 800a3bc:	68db      	ldr	r3, [r3, #12]
 800a3be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	3304      	adds	r3, #4
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7fe fcb1 	bl	8008d2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a3ca:	4b0d      	ldr	r3, [pc, #52]	; (800a400 <prvCheckTasksWaitingTermination+0x54>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	3b01      	subs	r3, #1
 800a3d0:	4a0b      	ldr	r2, [pc, #44]	; (800a400 <prvCheckTasksWaitingTermination+0x54>)
 800a3d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a3d4:	4b0b      	ldr	r3, [pc, #44]	; (800a404 <prvCheckTasksWaitingTermination+0x58>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	3b01      	subs	r3, #1
 800a3da:	4a0a      	ldr	r2, [pc, #40]	; (800a404 <prvCheckTasksWaitingTermination+0x58>)
 800a3dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a3de:	f000 fde9 	bl	800afb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f000 f810 	bl	800a408 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a3e8:	4b06      	ldr	r3, [pc, #24]	; (800a404 <prvCheckTasksWaitingTermination+0x58>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d1e1      	bne.n	800a3b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a3f0:	bf00      	nop
 800a3f2:	bf00      	nop
 800a3f4:	3708      	adds	r7, #8
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}
 800a3fa:	bf00      	nop
 800a3fc:	20007968 	.word	0x20007968
 800a400:	20007994 	.word	0x20007994
 800a404:	2000797c 	.word	0x2000797c

0800a408 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b084      	sub	sp, #16
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	3354      	adds	r3, #84	; 0x54
 800a414:	4618      	mov	r0, r3
 800a416:	f011 fa95 	bl	801b944 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a420:	2b00      	cmp	r3, #0
 800a422:	d108      	bne.n	800a436 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a428:	4618      	mov	r0, r3
 800a42a:	f000 ff85 	bl	800b338 <vPortFree>
				vPortFree( pxTCB );
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f000 ff82 	bl	800b338 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a434:	e01a      	b.n	800a46c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	d103      	bne.n	800a448 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f000 ff79 	bl	800b338 <vPortFree>
	}
 800a446:	e011      	b.n	800a46c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a44e:	2b02      	cmp	r3, #2
 800a450:	d00c      	beq.n	800a46c <prvDeleteTCB+0x64>
	__asm volatile
 800a452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a456:	b672      	cpsid	i
 800a458:	f383 8811 	msr	BASEPRI, r3
 800a45c:	f3bf 8f6f 	isb	sy
 800a460:	f3bf 8f4f 	dsb	sy
 800a464:	b662      	cpsie	i
 800a466:	60fb      	str	r3, [r7, #12]
}
 800a468:	bf00      	nop
 800a46a:	e7fe      	b.n	800a46a <prvDeleteTCB+0x62>
	}
 800a46c:	bf00      	nop
 800a46e:	3710      	adds	r7, #16
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a47a:	4b0c      	ldr	r3, [pc, #48]	; (800a4ac <prvResetNextTaskUnblockTime+0x38>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d104      	bne.n	800a48e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a484:	4b0a      	ldr	r3, [pc, #40]	; (800a4b0 <prvResetNextTaskUnblockTime+0x3c>)
 800a486:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a48a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a48c:	e008      	b.n	800a4a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a48e:	4b07      	ldr	r3, [pc, #28]	; (800a4ac <prvResetNextTaskUnblockTime+0x38>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	68db      	ldr	r3, [r3, #12]
 800a494:	68db      	ldr	r3, [r3, #12]
 800a496:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	685b      	ldr	r3, [r3, #4]
 800a49c:	4a04      	ldr	r2, [pc, #16]	; (800a4b0 <prvResetNextTaskUnblockTime+0x3c>)
 800a49e:	6013      	str	r3, [r2, #0]
}
 800a4a0:	bf00      	nop
 800a4a2:	370c      	adds	r7, #12
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr
 800a4ac:	2000794c 	.word	0x2000794c
 800a4b0:	200079b4 	.word	0x200079b4

0800a4b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b083      	sub	sp, #12
 800a4b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a4ba:	4b0b      	ldr	r3, [pc, #44]	; (800a4e8 <xTaskGetSchedulerState+0x34>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d102      	bne.n	800a4c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	607b      	str	r3, [r7, #4]
 800a4c6:	e008      	b.n	800a4da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4c8:	4b08      	ldr	r3, [pc, #32]	; (800a4ec <xTaskGetSchedulerState+0x38>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d102      	bne.n	800a4d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a4d0:	2302      	movs	r3, #2
 800a4d2:	607b      	str	r3, [r7, #4]
 800a4d4:	e001      	b.n	800a4da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a4da:	687b      	ldr	r3, [r7, #4]
	}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	370c      	adds	r7, #12
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr
 800a4e8:	200079a0 	.word	0x200079a0
 800a4ec:	200079bc 	.word	0x200079bc

0800a4f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b086      	sub	sp, #24
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d05a      	beq.n	800a5bc <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a506:	4b30      	ldr	r3, [pc, #192]	; (800a5c8 <xTaskPriorityDisinherit+0xd8>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	693a      	ldr	r2, [r7, #16]
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d00c      	beq.n	800a52a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800a510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a514:	b672      	cpsid	i
 800a516:	f383 8811 	msr	BASEPRI, r3
 800a51a:	f3bf 8f6f 	isb	sy
 800a51e:	f3bf 8f4f 	dsb	sy
 800a522:	b662      	cpsie	i
 800a524:	60fb      	str	r3, [r7, #12]
}
 800a526:	bf00      	nop
 800a528:	e7fe      	b.n	800a528 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d10c      	bne.n	800a54c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800a532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a536:	b672      	cpsid	i
 800a538:	f383 8811 	msr	BASEPRI, r3
 800a53c:	f3bf 8f6f 	isb	sy
 800a540:	f3bf 8f4f 	dsb	sy
 800a544:	b662      	cpsie	i
 800a546:	60bb      	str	r3, [r7, #8]
}
 800a548:	bf00      	nop
 800a54a:	e7fe      	b.n	800a54a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a550:	1e5a      	subs	r2, r3, #1
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a55e:	429a      	cmp	r2, r3
 800a560:	d02c      	beq.n	800a5bc <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a566:	2b00      	cmp	r3, #0
 800a568:	d128      	bne.n	800a5bc <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	3304      	adds	r3, #4
 800a56e:	4618      	mov	r0, r3
 800a570:	f7fe fbdc 	bl	8008d2c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a580:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a58c:	4b0f      	ldr	r3, [pc, #60]	; (800a5cc <xTaskPriorityDisinherit+0xdc>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	429a      	cmp	r2, r3
 800a592:	d903      	bls.n	800a59c <xTaskPriorityDisinherit+0xac>
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a598:	4a0c      	ldr	r2, [pc, #48]	; (800a5cc <xTaskPriorityDisinherit+0xdc>)
 800a59a:	6013      	str	r3, [r2, #0]
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5a0:	4613      	mov	r3, r2
 800a5a2:	009b      	lsls	r3, r3, #2
 800a5a4:	4413      	add	r3, r2
 800a5a6:	009b      	lsls	r3, r3, #2
 800a5a8:	4a09      	ldr	r2, [pc, #36]	; (800a5d0 <xTaskPriorityDisinherit+0xe0>)
 800a5aa:	441a      	add	r2, r3
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	3304      	adds	r3, #4
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	4610      	mov	r0, r2
 800a5b4:	f7fe fb5d 	bl	8008c72 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a5bc:	697b      	ldr	r3, [r7, #20]
	}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3718      	adds	r7, #24
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}
 800a5c6:	bf00      	nop
 800a5c8:	200074c0 	.word	0x200074c0
 800a5cc:	2000799c 	.word	0x2000799c
 800a5d0:	200074c4 	.word	0x200074c4

0800a5d4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a5de:	4b21      	ldr	r3, [pc, #132]	; (800a664 <prvAddCurrentTaskToDelayedList+0x90>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a5e4:	4b20      	ldr	r3, [pc, #128]	; (800a668 <prvAddCurrentTaskToDelayedList+0x94>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	3304      	adds	r3, #4
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f7fe fb9e 	bl	8008d2c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5f6:	d10a      	bne.n	800a60e <prvAddCurrentTaskToDelayedList+0x3a>
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d007      	beq.n	800a60e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a5fe:	4b1a      	ldr	r3, [pc, #104]	; (800a668 <prvAddCurrentTaskToDelayedList+0x94>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	3304      	adds	r3, #4
 800a604:	4619      	mov	r1, r3
 800a606:	4819      	ldr	r0, [pc, #100]	; (800a66c <prvAddCurrentTaskToDelayedList+0x98>)
 800a608:	f7fe fb33 	bl	8008c72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a60c:	e026      	b.n	800a65c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a60e:	68fa      	ldr	r2, [r7, #12]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	4413      	add	r3, r2
 800a614:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a616:	4b14      	ldr	r3, [pc, #80]	; (800a668 <prvAddCurrentTaskToDelayedList+0x94>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	68ba      	ldr	r2, [r7, #8]
 800a61c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a61e:	68ba      	ldr	r2, [r7, #8]
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	429a      	cmp	r2, r3
 800a624:	d209      	bcs.n	800a63a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a626:	4b12      	ldr	r3, [pc, #72]	; (800a670 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a628:	681a      	ldr	r2, [r3, #0]
 800a62a:	4b0f      	ldr	r3, [pc, #60]	; (800a668 <prvAddCurrentTaskToDelayedList+0x94>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	3304      	adds	r3, #4
 800a630:	4619      	mov	r1, r3
 800a632:	4610      	mov	r0, r2
 800a634:	f7fe fb41 	bl	8008cba <vListInsert>
}
 800a638:	e010      	b.n	800a65c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a63a:	4b0e      	ldr	r3, [pc, #56]	; (800a674 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	4b0a      	ldr	r3, [pc, #40]	; (800a668 <prvAddCurrentTaskToDelayedList+0x94>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	3304      	adds	r3, #4
 800a644:	4619      	mov	r1, r3
 800a646:	4610      	mov	r0, r2
 800a648:	f7fe fb37 	bl	8008cba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a64c:	4b0a      	ldr	r3, [pc, #40]	; (800a678 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	68ba      	ldr	r2, [r7, #8]
 800a652:	429a      	cmp	r2, r3
 800a654:	d202      	bcs.n	800a65c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a656:	4a08      	ldr	r2, [pc, #32]	; (800a678 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	6013      	str	r3, [r2, #0]
}
 800a65c:	bf00      	nop
 800a65e:	3710      	adds	r7, #16
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}
 800a664:	20007998 	.word	0x20007998
 800a668:	200074c0 	.word	0x200074c0
 800a66c:	20007980 	.word	0x20007980
 800a670:	20007950 	.word	0x20007950
 800a674:	2000794c 	.word	0x2000794c
 800a678:	200079b4 	.word	0x200079b4

0800a67c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b08a      	sub	sp, #40	; 0x28
 800a680:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a682:	2300      	movs	r3, #0
 800a684:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a686:	f000 fb15 	bl	800acb4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a68a:	4b1d      	ldr	r3, [pc, #116]	; (800a700 <xTimerCreateTimerTask+0x84>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d021      	beq.n	800a6d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a692:	2300      	movs	r3, #0
 800a694:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a696:	2300      	movs	r3, #0
 800a698:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a69a:	1d3a      	adds	r2, r7, #4
 800a69c:	f107 0108 	add.w	r1, r7, #8
 800a6a0:	f107 030c 	add.w	r3, r7, #12
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f7fe fa9d 	bl	8008be4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a6aa:	6879      	ldr	r1, [r7, #4]
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	68fa      	ldr	r2, [r7, #12]
 800a6b0:	9202      	str	r2, [sp, #8]
 800a6b2:	9301      	str	r3, [sp, #4]
 800a6b4:	2302      	movs	r3, #2
 800a6b6:	9300      	str	r3, [sp, #0]
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	460a      	mov	r2, r1
 800a6bc:	4911      	ldr	r1, [pc, #68]	; (800a704 <xTimerCreateTimerTask+0x88>)
 800a6be:	4812      	ldr	r0, [pc, #72]	; (800a708 <xTimerCreateTimerTask+0x8c>)
 800a6c0:	f7ff f868 	bl	8009794 <xTaskCreateStatic>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	4a11      	ldr	r2, [pc, #68]	; (800a70c <xTimerCreateTimerTask+0x90>)
 800a6c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a6ca:	4b10      	ldr	r3, [pc, #64]	; (800a70c <xTimerCreateTimerTask+0x90>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d001      	beq.n	800a6d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d10c      	bne.n	800a6f6 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800a6dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e0:	b672      	cpsid	i
 800a6e2:	f383 8811 	msr	BASEPRI, r3
 800a6e6:	f3bf 8f6f 	isb	sy
 800a6ea:	f3bf 8f4f 	dsb	sy
 800a6ee:	b662      	cpsie	i
 800a6f0:	613b      	str	r3, [r7, #16]
}
 800a6f2:	bf00      	nop
 800a6f4:	e7fe      	b.n	800a6f4 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800a6f6:	697b      	ldr	r3, [r7, #20]
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3718      	adds	r7, #24
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}
 800a700:	200079f0 	.word	0x200079f0
 800a704:	0801c908 	.word	0x0801c908
 800a708:	0800a84d 	.word	0x0800a84d
 800a70c:	200079f4 	.word	0x200079f4

0800a710 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b08a      	sub	sp, #40	; 0x28
 800a714:	af00      	add	r7, sp, #0
 800a716:	60f8      	str	r0, [r7, #12]
 800a718:	60b9      	str	r1, [r7, #8]
 800a71a:	607a      	str	r2, [r7, #4]
 800a71c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a71e:	2300      	movs	r3, #0
 800a720:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d10c      	bne.n	800a742 <xTimerGenericCommand+0x32>
	__asm volatile
 800a728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a72c:	b672      	cpsid	i
 800a72e:	f383 8811 	msr	BASEPRI, r3
 800a732:	f3bf 8f6f 	isb	sy
 800a736:	f3bf 8f4f 	dsb	sy
 800a73a:	b662      	cpsie	i
 800a73c:	623b      	str	r3, [r7, #32]
}
 800a73e:	bf00      	nop
 800a740:	e7fe      	b.n	800a740 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a742:	4b1a      	ldr	r3, [pc, #104]	; (800a7ac <xTimerGenericCommand+0x9c>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d02a      	beq.n	800a7a0 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	2b05      	cmp	r3, #5
 800a75a:	dc18      	bgt.n	800a78e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a75c:	f7ff feaa 	bl	800a4b4 <xTaskGetSchedulerState>
 800a760:	4603      	mov	r3, r0
 800a762:	2b02      	cmp	r3, #2
 800a764:	d109      	bne.n	800a77a <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a766:	4b11      	ldr	r3, [pc, #68]	; (800a7ac <xTimerGenericCommand+0x9c>)
 800a768:	6818      	ldr	r0, [r3, #0]
 800a76a:	f107 0110 	add.w	r1, r7, #16
 800a76e:	2300      	movs	r3, #0
 800a770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a772:	f7fe fc15 	bl	8008fa0 <xQueueGenericSend>
 800a776:	6278      	str	r0, [r7, #36]	; 0x24
 800a778:	e012      	b.n	800a7a0 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a77a:	4b0c      	ldr	r3, [pc, #48]	; (800a7ac <xTimerGenericCommand+0x9c>)
 800a77c:	6818      	ldr	r0, [r3, #0]
 800a77e:	f107 0110 	add.w	r1, r7, #16
 800a782:	2300      	movs	r3, #0
 800a784:	2200      	movs	r2, #0
 800a786:	f7fe fc0b 	bl	8008fa0 <xQueueGenericSend>
 800a78a:	6278      	str	r0, [r7, #36]	; 0x24
 800a78c:	e008      	b.n	800a7a0 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a78e:	4b07      	ldr	r3, [pc, #28]	; (800a7ac <xTimerGenericCommand+0x9c>)
 800a790:	6818      	ldr	r0, [r3, #0]
 800a792:	f107 0110 	add.w	r1, r7, #16
 800a796:	2300      	movs	r3, #0
 800a798:	683a      	ldr	r2, [r7, #0]
 800a79a:	f7fe fd07 	bl	80091ac <xQueueGenericSendFromISR>
 800a79e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3728      	adds	r7, #40	; 0x28
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}
 800a7aa:	bf00      	nop
 800a7ac:	200079f0 	.word	0x200079f0

0800a7b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b088      	sub	sp, #32
 800a7b4:	af02      	add	r7, sp, #8
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7ba:	4b23      	ldr	r3, [pc, #140]	; (800a848 <prvProcessExpiredTimer+0x98>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	68db      	ldr	r3, [r3, #12]
 800a7c0:	68db      	ldr	r3, [r3, #12]
 800a7c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	3304      	adds	r3, #4
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f7fe faaf 	bl	8008d2c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7d4:	f003 0304 	and.w	r3, r3, #4
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d024      	beq.n	800a826 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	699a      	ldr	r2, [r3, #24]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	18d1      	adds	r1, r2, r3
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	683a      	ldr	r2, [r7, #0]
 800a7e8:	6978      	ldr	r0, [r7, #20]
 800a7ea:	f000 f8d3 	bl	800a994 <prvInsertTimerInActiveList>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d021      	beq.n	800a838 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	9300      	str	r3, [sp, #0]
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	2100      	movs	r1, #0
 800a7fe:	6978      	ldr	r0, [r7, #20]
 800a800:	f7ff ff86 	bl	800a710 <xTimerGenericCommand>
 800a804:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d115      	bne.n	800a838 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800a80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a810:	b672      	cpsid	i
 800a812:	f383 8811 	msr	BASEPRI, r3
 800a816:	f3bf 8f6f 	isb	sy
 800a81a:	f3bf 8f4f 	dsb	sy
 800a81e:	b662      	cpsie	i
 800a820:	60fb      	str	r3, [r7, #12]
}
 800a822:	bf00      	nop
 800a824:	e7fe      	b.n	800a824 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a82c:	f023 0301 	bic.w	r3, r3, #1
 800a830:	b2da      	uxtb	r2, r3
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	6a1b      	ldr	r3, [r3, #32]
 800a83c:	6978      	ldr	r0, [r7, #20]
 800a83e:	4798      	blx	r3
}
 800a840:	bf00      	nop
 800a842:	3718      	adds	r7, #24
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}
 800a848:	200079e8 	.word	0x200079e8

0800a84c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b084      	sub	sp, #16
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a854:	f107 0308 	add.w	r3, r7, #8
 800a858:	4618      	mov	r0, r3
 800a85a:	f000 f857 	bl	800a90c <prvGetNextExpireTime>
 800a85e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	4619      	mov	r1, r3
 800a864:	68f8      	ldr	r0, [r7, #12]
 800a866:	f000 f803 	bl	800a870 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a86a:	f000 f8d5 	bl	800aa18 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a86e:	e7f1      	b.n	800a854 <prvTimerTask+0x8>

0800a870 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a87a:	f7ff f9f5 	bl	8009c68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a87e:	f107 0308 	add.w	r3, r7, #8
 800a882:	4618      	mov	r0, r3
 800a884:	f000 f866 	bl	800a954 <prvSampleTimeNow>
 800a888:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d130      	bne.n	800a8f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d10a      	bne.n	800a8ac <prvProcessTimerOrBlockTask+0x3c>
 800a896:	687a      	ldr	r2, [r7, #4]
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	429a      	cmp	r2, r3
 800a89c:	d806      	bhi.n	800a8ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a89e:	f7ff f9f1 	bl	8009c84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a8a2:	68f9      	ldr	r1, [r7, #12]
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f7ff ff83 	bl	800a7b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a8aa:	e024      	b.n	800a8f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d008      	beq.n	800a8c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a8b2:	4b13      	ldr	r3, [pc, #76]	; (800a900 <prvProcessTimerOrBlockTask+0x90>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d101      	bne.n	800a8c0 <prvProcessTimerOrBlockTask+0x50>
 800a8bc:	2301      	movs	r3, #1
 800a8be:	e000      	b.n	800a8c2 <prvProcessTimerOrBlockTask+0x52>
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a8c4:	4b0f      	ldr	r3, [pc, #60]	; (800a904 <prvProcessTimerOrBlockTask+0x94>)
 800a8c6:	6818      	ldr	r0, [r3, #0]
 800a8c8:	687a      	ldr	r2, [r7, #4]
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	1ad3      	subs	r3, r2, r3
 800a8ce:	683a      	ldr	r2, [r7, #0]
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	f7fe ff2b 	bl	800972c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a8d6:	f7ff f9d5 	bl	8009c84 <xTaskResumeAll>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d10a      	bne.n	800a8f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a8e0:	4b09      	ldr	r3, [pc, #36]	; (800a908 <prvProcessTimerOrBlockTask+0x98>)
 800a8e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8e6:	601a      	str	r2, [r3, #0]
 800a8e8:	f3bf 8f4f 	dsb	sy
 800a8ec:	f3bf 8f6f 	isb	sy
}
 800a8f0:	e001      	b.n	800a8f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a8f2:	f7ff f9c7 	bl	8009c84 <xTaskResumeAll>
}
 800a8f6:	bf00      	nop
 800a8f8:	3710      	adds	r7, #16
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}
 800a8fe:	bf00      	nop
 800a900:	200079ec 	.word	0x200079ec
 800a904:	200079f0 	.word	0x200079f0
 800a908:	e000ed04 	.word	0xe000ed04

0800a90c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a90c:	b480      	push	{r7}
 800a90e:	b085      	sub	sp, #20
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a914:	4b0e      	ldr	r3, [pc, #56]	; (800a950 <prvGetNextExpireTime+0x44>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d101      	bne.n	800a922 <prvGetNextExpireTime+0x16>
 800a91e:	2201      	movs	r2, #1
 800a920:	e000      	b.n	800a924 <prvGetNextExpireTime+0x18>
 800a922:	2200      	movs	r2, #0
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d105      	bne.n	800a93c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a930:	4b07      	ldr	r3, [pc, #28]	; (800a950 <prvGetNextExpireTime+0x44>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	68db      	ldr	r3, [r3, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	60fb      	str	r3, [r7, #12]
 800a93a:	e001      	b.n	800a940 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a93c:	2300      	movs	r3, #0
 800a93e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a940:	68fb      	ldr	r3, [r7, #12]
}
 800a942:	4618      	mov	r0, r3
 800a944:	3714      	adds	r7, #20
 800a946:	46bd      	mov	sp, r7
 800a948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94c:	4770      	bx	lr
 800a94e:	bf00      	nop
 800a950:	200079e8 	.word	0x200079e8

0800a954 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b084      	sub	sp, #16
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a95c:	f7ff fa32 	bl	8009dc4 <xTaskGetTickCount>
 800a960:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a962:	4b0b      	ldr	r3, [pc, #44]	; (800a990 <prvSampleTimeNow+0x3c>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	68fa      	ldr	r2, [r7, #12]
 800a968:	429a      	cmp	r2, r3
 800a96a:	d205      	bcs.n	800a978 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a96c:	f000 f93c 	bl	800abe8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2201      	movs	r2, #1
 800a974:	601a      	str	r2, [r3, #0]
 800a976:	e002      	b.n	800a97e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2200      	movs	r2, #0
 800a97c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a97e:	4a04      	ldr	r2, [pc, #16]	; (800a990 <prvSampleTimeNow+0x3c>)
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a984:	68fb      	ldr	r3, [r7, #12]
}
 800a986:	4618      	mov	r0, r3
 800a988:	3710      	adds	r7, #16
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	200079f8 	.word	0x200079f8

0800a994 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b086      	sub	sp, #24
 800a998:	af00      	add	r7, sp, #0
 800a99a:	60f8      	str	r0, [r7, #12]
 800a99c:	60b9      	str	r1, [r7, #8]
 800a99e:	607a      	str	r2, [r7, #4]
 800a9a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	68ba      	ldr	r2, [r7, #8]
 800a9aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	68fa      	ldr	r2, [r7, #12]
 800a9b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a9b2:	68ba      	ldr	r2, [r7, #8]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d812      	bhi.n	800a9e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9ba:	687a      	ldr	r2, [r7, #4]
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	1ad2      	subs	r2, r2, r3
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	699b      	ldr	r3, [r3, #24]
 800a9c4:	429a      	cmp	r2, r3
 800a9c6:	d302      	bcc.n	800a9ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	617b      	str	r3, [r7, #20]
 800a9cc:	e01b      	b.n	800aa06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a9ce:	4b10      	ldr	r3, [pc, #64]	; (800aa10 <prvInsertTimerInActiveList+0x7c>)
 800a9d0:	681a      	ldr	r2, [r3, #0]
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	3304      	adds	r3, #4
 800a9d6:	4619      	mov	r1, r3
 800a9d8:	4610      	mov	r0, r2
 800a9da:	f7fe f96e 	bl	8008cba <vListInsert>
 800a9de:	e012      	b.n	800aa06 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d206      	bcs.n	800a9f6 <prvInsertTimerInActiveList+0x62>
 800a9e8:	68ba      	ldr	r2, [r7, #8]
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	429a      	cmp	r2, r3
 800a9ee:	d302      	bcc.n	800a9f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	617b      	str	r3, [r7, #20]
 800a9f4:	e007      	b.n	800aa06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a9f6:	4b07      	ldr	r3, [pc, #28]	; (800aa14 <prvInsertTimerInActiveList+0x80>)
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	3304      	adds	r3, #4
 800a9fe:	4619      	mov	r1, r3
 800aa00:	4610      	mov	r0, r2
 800aa02:	f7fe f95a 	bl	8008cba <vListInsert>
		}
	}

	return xProcessTimerNow;
 800aa06:	697b      	ldr	r3, [r7, #20]
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3718      	adds	r7, #24
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}
 800aa10:	200079ec 	.word	0x200079ec
 800aa14:	200079e8 	.word	0x200079e8

0800aa18 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b08e      	sub	sp, #56	; 0x38
 800aa1c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aa1e:	e0d0      	b.n	800abc2 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	da1a      	bge.n	800aa5c <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800aa26:	1d3b      	adds	r3, r7, #4
 800aa28:	3304      	adds	r3, #4
 800aa2a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800aa2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d10c      	bne.n	800aa4c <prvProcessReceivedCommands+0x34>
	__asm volatile
 800aa32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa36:	b672      	cpsid	i
 800aa38:	f383 8811 	msr	BASEPRI, r3
 800aa3c:	f3bf 8f6f 	isb	sy
 800aa40:	f3bf 8f4f 	dsb	sy
 800aa44:	b662      	cpsie	i
 800aa46:	61fb      	str	r3, [r7, #28]
}
 800aa48:	bf00      	nop
 800aa4a:	e7fe      	b.n	800aa4a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800aa4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa52:	6850      	ldr	r0, [r2, #4]
 800aa54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa56:	6892      	ldr	r2, [r2, #8]
 800aa58:	4611      	mov	r1, r2
 800aa5a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	f2c0 80af 	blt.w	800abc2 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800aa68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa6a:	695b      	ldr	r3, [r3, #20]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d004      	beq.n	800aa7a <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa72:	3304      	adds	r3, #4
 800aa74:	4618      	mov	r0, r3
 800aa76:	f7fe f959 	bl	8008d2c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aa7a:	463b      	mov	r3, r7
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f7ff ff69 	bl	800a954 <prvSampleTimeNow>
 800aa82:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2b09      	cmp	r3, #9
 800aa88:	f200 809a 	bhi.w	800abc0 <prvProcessReceivedCommands+0x1a8>
 800aa8c:	a201      	add	r2, pc, #4	; (adr r2, 800aa94 <prvProcessReceivedCommands+0x7c>)
 800aa8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa92:	bf00      	nop
 800aa94:	0800aabd 	.word	0x0800aabd
 800aa98:	0800aabd 	.word	0x0800aabd
 800aa9c:	0800aabd 	.word	0x0800aabd
 800aaa0:	0800ab35 	.word	0x0800ab35
 800aaa4:	0800ab49 	.word	0x0800ab49
 800aaa8:	0800ab97 	.word	0x0800ab97
 800aaac:	0800aabd 	.word	0x0800aabd
 800aab0:	0800aabd 	.word	0x0800aabd
 800aab4:	0800ab35 	.word	0x0800ab35
 800aab8:	0800ab49 	.word	0x0800ab49
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aabe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aac2:	f043 0301 	orr.w	r3, r3, #1
 800aac6:	b2da      	uxtb	r2, r3
 800aac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aace:	68ba      	ldr	r2, [r7, #8]
 800aad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad2:	699b      	ldr	r3, [r3, #24]
 800aad4:	18d1      	adds	r1, r2, r3
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aada:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aadc:	f7ff ff5a 	bl	800a994 <prvInsertTimerInActiveList>
 800aae0:	4603      	mov	r3, r0
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d06d      	beq.n	800abc2 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae8:	6a1b      	ldr	r3, [r3, #32]
 800aaea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aaec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aaee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aaf4:	f003 0304 	and.w	r3, r3, #4
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d062      	beq.n	800abc2 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aafc:	68ba      	ldr	r2, [r7, #8]
 800aafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab00:	699b      	ldr	r3, [r3, #24]
 800ab02:	441a      	add	r2, r3
 800ab04:	2300      	movs	r3, #0
 800ab06:	9300      	str	r3, [sp, #0]
 800ab08:	2300      	movs	r3, #0
 800ab0a:	2100      	movs	r1, #0
 800ab0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab0e:	f7ff fdff 	bl	800a710 <xTimerGenericCommand>
 800ab12:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ab14:	6a3b      	ldr	r3, [r7, #32]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d153      	bne.n	800abc2 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800ab1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab1e:	b672      	cpsid	i
 800ab20:	f383 8811 	msr	BASEPRI, r3
 800ab24:	f3bf 8f6f 	isb	sy
 800ab28:	f3bf 8f4f 	dsb	sy
 800ab2c:	b662      	cpsie	i
 800ab2e:	61bb      	str	r3, [r7, #24]
}
 800ab30:	bf00      	nop
 800ab32:	e7fe      	b.n	800ab32 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab3a:	f023 0301 	bic.w	r3, r3, #1
 800ab3e:	b2da      	uxtb	r2, r3
 800ab40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ab46:	e03c      	b.n	800abc2 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ab48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab4e:	f043 0301 	orr.w	r3, r3, #1
 800ab52:	b2da      	uxtb	r2, r3
 800ab54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ab5a:	68ba      	ldr	r2, [r7, #8]
 800ab5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab5e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ab60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab62:	699b      	ldr	r3, [r3, #24]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d10c      	bne.n	800ab82 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800ab68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab6c:	b672      	cpsid	i
 800ab6e:	f383 8811 	msr	BASEPRI, r3
 800ab72:	f3bf 8f6f 	isb	sy
 800ab76:	f3bf 8f4f 	dsb	sy
 800ab7a:	b662      	cpsie	i
 800ab7c:	617b      	str	r3, [r7, #20]
}
 800ab7e:	bf00      	nop
 800ab80:	e7fe      	b.n	800ab80 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ab82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab84:	699a      	ldr	r2, [r3, #24]
 800ab86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab88:	18d1      	adds	r1, r2, r3
 800ab8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab90:	f7ff ff00 	bl	800a994 <prvInsertTimerInActiveList>
					break;
 800ab94:	e015      	b.n	800abc2 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ab96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab9c:	f003 0302 	and.w	r3, r3, #2
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d103      	bne.n	800abac <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800aba4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aba6:	f000 fbc7 	bl	800b338 <vPortFree>
 800abaa:	e00a      	b.n	800abc2 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800abac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800abb2:	f023 0301 	bic.w	r3, r3, #1
 800abb6:	b2da      	uxtb	r2, r3
 800abb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800abbe:	e000      	b.n	800abc2 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800abc0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800abc2:	4b08      	ldr	r3, [pc, #32]	; (800abe4 <prvProcessReceivedCommands+0x1cc>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	1d39      	adds	r1, r7, #4
 800abc8:	2200      	movs	r2, #0
 800abca:	4618      	mov	r0, r3
 800abcc:	f7fe fb8e 	bl	80092ec <xQueueReceive>
 800abd0:	4603      	mov	r3, r0
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	f47f af24 	bne.w	800aa20 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800abd8:	bf00      	nop
 800abda:	bf00      	nop
 800abdc:	3730      	adds	r7, #48	; 0x30
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}
 800abe2:	bf00      	nop
 800abe4:	200079f0 	.word	0x200079f0

0800abe8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b088      	sub	sp, #32
 800abec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800abee:	e04a      	b.n	800ac86 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800abf0:	4b2e      	ldr	r3, [pc, #184]	; (800acac <prvSwitchTimerLists+0xc4>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	68db      	ldr	r3, [r3, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abfa:	4b2c      	ldr	r3, [pc, #176]	; (800acac <prvSwitchTimerLists+0xc4>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	68db      	ldr	r3, [r3, #12]
 800ac00:	68db      	ldr	r3, [r3, #12]
 800ac02:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	3304      	adds	r3, #4
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f7fe f88f 	bl	8008d2c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	6a1b      	ldr	r3, [r3, #32]
 800ac12:	68f8      	ldr	r0, [r7, #12]
 800ac14:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac1c:	f003 0304 	and.w	r3, r3, #4
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d030      	beq.n	800ac86 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	699b      	ldr	r3, [r3, #24]
 800ac28:	693a      	ldr	r2, [r7, #16]
 800ac2a:	4413      	add	r3, r2
 800ac2c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ac2e:	68ba      	ldr	r2, [r7, #8]
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	429a      	cmp	r2, r3
 800ac34:	d90e      	bls.n	800ac54 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	68ba      	ldr	r2, [r7, #8]
 800ac3a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	68fa      	ldr	r2, [r7, #12]
 800ac40:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ac42:	4b1a      	ldr	r3, [pc, #104]	; (800acac <prvSwitchTimerLists+0xc4>)
 800ac44:	681a      	ldr	r2, [r3, #0]
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	3304      	adds	r3, #4
 800ac4a:	4619      	mov	r1, r3
 800ac4c:	4610      	mov	r0, r2
 800ac4e:	f7fe f834 	bl	8008cba <vListInsert>
 800ac52:	e018      	b.n	800ac86 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ac54:	2300      	movs	r3, #0
 800ac56:	9300      	str	r3, [sp, #0]
 800ac58:	2300      	movs	r3, #0
 800ac5a:	693a      	ldr	r2, [r7, #16]
 800ac5c:	2100      	movs	r1, #0
 800ac5e:	68f8      	ldr	r0, [r7, #12]
 800ac60:	f7ff fd56 	bl	800a710 <xTimerGenericCommand>
 800ac64:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d10c      	bne.n	800ac86 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800ac6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac70:	b672      	cpsid	i
 800ac72:	f383 8811 	msr	BASEPRI, r3
 800ac76:	f3bf 8f6f 	isb	sy
 800ac7a:	f3bf 8f4f 	dsb	sy
 800ac7e:	b662      	cpsie	i
 800ac80:	603b      	str	r3, [r7, #0]
}
 800ac82:	bf00      	nop
 800ac84:	e7fe      	b.n	800ac84 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ac86:	4b09      	ldr	r3, [pc, #36]	; (800acac <prvSwitchTimerLists+0xc4>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d1af      	bne.n	800abf0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ac90:	4b06      	ldr	r3, [pc, #24]	; (800acac <prvSwitchTimerLists+0xc4>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ac96:	4b06      	ldr	r3, [pc, #24]	; (800acb0 <prvSwitchTimerLists+0xc8>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4a04      	ldr	r2, [pc, #16]	; (800acac <prvSwitchTimerLists+0xc4>)
 800ac9c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ac9e:	4a04      	ldr	r2, [pc, #16]	; (800acb0 <prvSwitchTimerLists+0xc8>)
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	6013      	str	r3, [r2, #0]
}
 800aca4:	bf00      	nop
 800aca6:	3718      	adds	r7, #24
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}
 800acac:	200079e8 	.word	0x200079e8
 800acb0:	200079ec 	.word	0x200079ec

0800acb4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b082      	sub	sp, #8
 800acb8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800acba:	f000 f947 	bl	800af4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800acbe:	4b15      	ldr	r3, [pc, #84]	; (800ad14 <prvCheckForValidListAndQueue+0x60>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d120      	bne.n	800ad08 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800acc6:	4814      	ldr	r0, [pc, #80]	; (800ad18 <prvCheckForValidListAndQueue+0x64>)
 800acc8:	f7fd ffa6 	bl	8008c18 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800accc:	4813      	ldr	r0, [pc, #76]	; (800ad1c <prvCheckForValidListAndQueue+0x68>)
 800acce:	f7fd ffa3 	bl	8008c18 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800acd2:	4b13      	ldr	r3, [pc, #76]	; (800ad20 <prvCheckForValidListAndQueue+0x6c>)
 800acd4:	4a10      	ldr	r2, [pc, #64]	; (800ad18 <prvCheckForValidListAndQueue+0x64>)
 800acd6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800acd8:	4b12      	ldr	r3, [pc, #72]	; (800ad24 <prvCheckForValidListAndQueue+0x70>)
 800acda:	4a10      	ldr	r2, [pc, #64]	; (800ad1c <prvCheckForValidListAndQueue+0x68>)
 800acdc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800acde:	2300      	movs	r3, #0
 800ace0:	9300      	str	r3, [sp, #0]
 800ace2:	4b11      	ldr	r3, [pc, #68]	; (800ad28 <prvCheckForValidListAndQueue+0x74>)
 800ace4:	4a11      	ldr	r2, [pc, #68]	; (800ad2c <prvCheckForValidListAndQueue+0x78>)
 800ace6:	2110      	movs	r1, #16
 800ace8:	200a      	movs	r0, #10
 800acea:	f7fe f8b3 	bl	8008e54 <xQueueGenericCreateStatic>
 800acee:	4603      	mov	r3, r0
 800acf0:	4a08      	ldr	r2, [pc, #32]	; (800ad14 <prvCheckForValidListAndQueue+0x60>)
 800acf2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800acf4:	4b07      	ldr	r3, [pc, #28]	; (800ad14 <prvCheckForValidListAndQueue+0x60>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d005      	beq.n	800ad08 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800acfc:	4b05      	ldr	r3, [pc, #20]	; (800ad14 <prvCheckForValidListAndQueue+0x60>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	490b      	ldr	r1, [pc, #44]	; (800ad30 <prvCheckForValidListAndQueue+0x7c>)
 800ad02:	4618      	mov	r0, r3
 800ad04:	f7fe fce8 	bl	80096d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ad08:	f000 f954 	bl	800afb4 <vPortExitCritical>
}
 800ad0c:	bf00      	nop
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}
 800ad12:	bf00      	nop
 800ad14:	200079f0 	.word	0x200079f0
 800ad18:	200079c0 	.word	0x200079c0
 800ad1c:	200079d4 	.word	0x200079d4
 800ad20:	200079e8 	.word	0x200079e8
 800ad24:	200079ec 	.word	0x200079ec
 800ad28:	20007a9c 	.word	0x20007a9c
 800ad2c:	200079fc 	.word	0x200079fc
 800ad30:	0801c910 	.word	0x0801c910

0800ad34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ad34:	b480      	push	{r7}
 800ad36:	b085      	sub	sp, #20
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	60f8      	str	r0, [r7, #12]
 800ad3c:	60b9      	str	r1, [r7, #8]
 800ad3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	3b04      	subs	r3, #4
 800ad44:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ad4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	3b04      	subs	r3, #4
 800ad52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	f023 0201 	bic.w	r2, r3, #1
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	3b04      	subs	r3, #4
 800ad62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ad64:	4a0c      	ldr	r2, [pc, #48]	; (800ad98 <pxPortInitialiseStack+0x64>)
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	3b14      	subs	r3, #20
 800ad6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ad70:	687a      	ldr	r2, [r7, #4]
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	3b04      	subs	r3, #4
 800ad7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	f06f 0202 	mvn.w	r2, #2
 800ad82:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	3b20      	subs	r3, #32
 800ad88:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3714      	adds	r7, #20
 800ad90:	46bd      	mov	sp, r7
 800ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad96:	4770      	bx	lr
 800ad98:	0800ad9d 	.word	0x0800ad9d

0800ad9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b085      	sub	sp, #20
 800ada0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ada2:	2300      	movs	r3, #0
 800ada4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ada6:	4b14      	ldr	r3, [pc, #80]	; (800adf8 <prvTaskExitError+0x5c>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800adae:	d00c      	beq.n	800adca <prvTaskExitError+0x2e>
	__asm volatile
 800adb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb4:	b672      	cpsid	i
 800adb6:	f383 8811 	msr	BASEPRI, r3
 800adba:	f3bf 8f6f 	isb	sy
 800adbe:	f3bf 8f4f 	dsb	sy
 800adc2:	b662      	cpsie	i
 800adc4:	60fb      	str	r3, [r7, #12]
}
 800adc6:	bf00      	nop
 800adc8:	e7fe      	b.n	800adc8 <prvTaskExitError+0x2c>
	__asm volatile
 800adca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adce:	b672      	cpsid	i
 800add0:	f383 8811 	msr	BASEPRI, r3
 800add4:	f3bf 8f6f 	isb	sy
 800add8:	f3bf 8f4f 	dsb	sy
 800addc:	b662      	cpsie	i
 800adde:	60bb      	str	r3, [r7, #8]
}
 800ade0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ade2:	bf00      	nop
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d0fc      	beq.n	800ade4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800adea:	bf00      	nop
 800adec:	bf00      	nop
 800adee:	3714      	adds	r7, #20
 800adf0:	46bd      	mov	sp, r7
 800adf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf6:	4770      	bx	lr
 800adf8:	20000010 	.word	0x20000010
 800adfc:	00000000 	.word	0x00000000

0800ae00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ae00:	4b07      	ldr	r3, [pc, #28]	; (800ae20 <pxCurrentTCBConst2>)
 800ae02:	6819      	ldr	r1, [r3, #0]
 800ae04:	6808      	ldr	r0, [r1, #0]
 800ae06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae0a:	f380 8809 	msr	PSP, r0
 800ae0e:	f3bf 8f6f 	isb	sy
 800ae12:	f04f 0000 	mov.w	r0, #0
 800ae16:	f380 8811 	msr	BASEPRI, r0
 800ae1a:	4770      	bx	lr
 800ae1c:	f3af 8000 	nop.w

0800ae20 <pxCurrentTCBConst2>:
 800ae20:	200074c0 	.word	0x200074c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ae24:	bf00      	nop
 800ae26:	bf00      	nop

0800ae28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ae28:	4808      	ldr	r0, [pc, #32]	; (800ae4c <prvPortStartFirstTask+0x24>)
 800ae2a:	6800      	ldr	r0, [r0, #0]
 800ae2c:	6800      	ldr	r0, [r0, #0]
 800ae2e:	f380 8808 	msr	MSP, r0
 800ae32:	f04f 0000 	mov.w	r0, #0
 800ae36:	f380 8814 	msr	CONTROL, r0
 800ae3a:	b662      	cpsie	i
 800ae3c:	b661      	cpsie	f
 800ae3e:	f3bf 8f4f 	dsb	sy
 800ae42:	f3bf 8f6f 	isb	sy
 800ae46:	df00      	svc	0
 800ae48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ae4a:	bf00      	nop
 800ae4c:	e000ed08 	.word	0xe000ed08

0800ae50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b084      	sub	sp, #16
 800ae54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ae56:	4b37      	ldr	r3, [pc, #220]	; (800af34 <xPortStartScheduler+0xe4>)
 800ae58:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	781b      	ldrb	r3, [r3, #0]
 800ae5e:	b2db      	uxtb	r3, r3
 800ae60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	22ff      	movs	r2, #255	; 0xff
 800ae66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	b2db      	uxtb	r3, r3
 800ae6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ae70:	78fb      	ldrb	r3, [r7, #3]
 800ae72:	b2db      	uxtb	r3, r3
 800ae74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ae78:	b2da      	uxtb	r2, r3
 800ae7a:	4b2f      	ldr	r3, [pc, #188]	; (800af38 <xPortStartScheduler+0xe8>)
 800ae7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ae7e:	4b2f      	ldr	r3, [pc, #188]	; (800af3c <xPortStartScheduler+0xec>)
 800ae80:	2207      	movs	r2, #7
 800ae82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ae84:	e009      	b.n	800ae9a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800ae86:	4b2d      	ldr	r3, [pc, #180]	; (800af3c <xPortStartScheduler+0xec>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	3b01      	subs	r3, #1
 800ae8c:	4a2b      	ldr	r2, [pc, #172]	; (800af3c <xPortStartScheduler+0xec>)
 800ae8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ae90:	78fb      	ldrb	r3, [r7, #3]
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	005b      	lsls	r3, r3, #1
 800ae96:	b2db      	uxtb	r3, r3
 800ae98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ae9a:	78fb      	ldrb	r3, [r7, #3]
 800ae9c:	b2db      	uxtb	r3, r3
 800ae9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aea2:	2b80      	cmp	r3, #128	; 0x80
 800aea4:	d0ef      	beq.n	800ae86 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aea6:	4b25      	ldr	r3, [pc, #148]	; (800af3c <xPortStartScheduler+0xec>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f1c3 0307 	rsb	r3, r3, #7
 800aeae:	2b04      	cmp	r3, #4
 800aeb0:	d00c      	beq.n	800aecc <xPortStartScheduler+0x7c>
	__asm volatile
 800aeb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb6:	b672      	cpsid	i
 800aeb8:	f383 8811 	msr	BASEPRI, r3
 800aebc:	f3bf 8f6f 	isb	sy
 800aec0:	f3bf 8f4f 	dsb	sy
 800aec4:	b662      	cpsie	i
 800aec6:	60bb      	str	r3, [r7, #8]
}
 800aec8:	bf00      	nop
 800aeca:	e7fe      	b.n	800aeca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aecc:	4b1b      	ldr	r3, [pc, #108]	; (800af3c <xPortStartScheduler+0xec>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	021b      	lsls	r3, r3, #8
 800aed2:	4a1a      	ldr	r2, [pc, #104]	; (800af3c <xPortStartScheduler+0xec>)
 800aed4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aed6:	4b19      	ldr	r3, [pc, #100]	; (800af3c <xPortStartScheduler+0xec>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aede:	4a17      	ldr	r2, [pc, #92]	; (800af3c <xPortStartScheduler+0xec>)
 800aee0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	b2da      	uxtb	r2, r3
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aeea:	4b15      	ldr	r3, [pc, #84]	; (800af40 <xPortStartScheduler+0xf0>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	4a14      	ldr	r2, [pc, #80]	; (800af40 <xPortStartScheduler+0xf0>)
 800aef0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800aef4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aef6:	4b12      	ldr	r3, [pc, #72]	; (800af40 <xPortStartScheduler+0xf0>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	4a11      	ldr	r2, [pc, #68]	; (800af40 <xPortStartScheduler+0xf0>)
 800aefc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800af00:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800af02:	f000 f8dd 	bl	800b0c0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800af06:	4b0f      	ldr	r3, [pc, #60]	; (800af44 <xPortStartScheduler+0xf4>)
 800af08:	2200      	movs	r2, #0
 800af0a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800af0c:	f000 f8fc 	bl	800b108 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800af10:	4b0d      	ldr	r3, [pc, #52]	; (800af48 <xPortStartScheduler+0xf8>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4a0c      	ldr	r2, [pc, #48]	; (800af48 <xPortStartScheduler+0xf8>)
 800af16:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800af1a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800af1c:	f7ff ff84 	bl	800ae28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800af20:	f7ff f81c 	bl	8009f5c <vTaskSwitchContext>
	prvTaskExitError();
 800af24:	f7ff ff3a 	bl	800ad9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800af28:	2300      	movs	r3, #0
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3710      	adds	r7, #16
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}
 800af32:	bf00      	nop
 800af34:	e000e400 	.word	0xe000e400
 800af38:	20007aec 	.word	0x20007aec
 800af3c:	20007af0 	.word	0x20007af0
 800af40:	e000ed20 	.word	0xe000ed20
 800af44:	20000010 	.word	0x20000010
 800af48:	e000ef34 	.word	0xe000ef34

0800af4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800af4c:	b480      	push	{r7}
 800af4e:	b083      	sub	sp, #12
 800af50:	af00      	add	r7, sp, #0
	__asm volatile
 800af52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af56:	b672      	cpsid	i
 800af58:	f383 8811 	msr	BASEPRI, r3
 800af5c:	f3bf 8f6f 	isb	sy
 800af60:	f3bf 8f4f 	dsb	sy
 800af64:	b662      	cpsie	i
 800af66:	607b      	str	r3, [r7, #4]
}
 800af68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800af6a:	4b10      	ldr	r3, [pc, #64]	; (800afac <vPortEnterCritical+0x60>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	3301      	adds	r3, #1
 800af70:	4a0e      	ldr	r2, [pc, #56]	; (800afac <vPortEnterCritical+0x60>)
 800af72:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800af74:	4b0d      	ldr	r3, [pc, #52]	; (800afac <vPortEnterCritical+0x60>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	2b01      	cmp	r3, #1
 800af7a:	d111      	bne.n	800afa0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800af7c:	4b0c      	ldr	r3, [pc, #48]	; (800afb0 <vPortEnterCritical+0x64>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	b2db      	uxtb	r3, r3
 800af82:	2b00      	cmp	r3, #0
 800af84:	d00c      	beq.n	800afa0 <vPortEnterCritical+0x54>
	__asm volatile
 800af86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af8a:	b672      	cpsid	i
 800af8c:	f383 8811 	msr	BASEPRI, r3
 800af90:	f3bf 8f6f 	isb	sy
 800af94:	f3bf 8f4f 	dsb	sy
 800af98:	b662      	cpsie	i
 800af9a:	603b      	str	r3, [r7, #0]
}
 800af9c:	bf00      	nop
 800af9e:	e7fe      	b.n	800af9e <vPortEnterCritical+0x52>
	}
}
 800afa0:	bf00      	nop
 800afa2:	370c      	adds	r7, #12
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr
 800afac:	20000010 	.word	0x20000010
 800afb0:	e000ed04 	.word	0xe000ed04

0800afb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800afb4:	b480      	push	{r7}
 800afb6:	b083      	sub	sp, #12
 800afb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800afba:	4b13      	ldr	r3, [pc, #76]	; (800b008 <vPortExitCritical+0x54>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d10c      	bne.n	800afdc <vPortExitCritical+0x28>
	__asm volatile
 800afc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc6:	b672      	cpsid	i
 800afc8:	f383 8811 	msr	BASEPRI, r3
 800afcc:	f3bf 8f6f 	isb	sy
 800afd0:	f3bf 8f4f 	dsb	sy
 800afd4:	b662      	cpsie	i
 800afd6:	607b      	str	r3, [r7, #4]
}
 800afd8:	bf00      	nop
 800afda:	e7fe      	b.n	800afda <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800afdc:	4b0a      	ldr	r3, [pc, #40]	; (800b008 <vPortExitCritical+0x54>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	3b01      	subs	r3, #1
 800afe2:	4a09      	ldr	r2, [pc, #36]	; (800b008 <vPortExitCritical+0x54>)
 800afe4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800afe6:	4b08      	ldr	r3, [pc, #32]	; (800b008 <vPortExitCritical+0x54>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d105      	bne.n	800affa <vPortExitCritical+0x46>
 800afee:	2300      	movs	r3, #0
 800aff0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	f383 8811 	msr	BASEPRI, r3
}
 800aff8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800affa:	bf00      	nop
 800affc:	370c      	adds	r7, #12
 800affe:	46bd      	mov	sp, r7
 800b000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b004:	4770      	bx	lr
 800b006:	bf00      	nop
 800b008:	20000010 	.word	0x20000010
 800b00c:	00000000 	.word	0x00000000

0800b010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b010:	f3ef 8009 	mrs	r0, PSP
 800b014:	f3bf 8f6f 	isb	sy
 800b018:	4b15      	ldr	r3, [pc, #84]	; (800b070 <pxCurrentTCBConst>)
 800b01a:	681a      	ldr	r2, [r3, #0]
 800b01c:	f01e 0f10 	tst.w	lr, #16
 800b020:	bf08      	it	eq
 800b022:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b026:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b02a:	6010      	str	r0, [r2, #0]
 800b02c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b030:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b034:	b672      	cpsid	i
 800b036:	f380 8811 	msr	BASEPRI, r0
 800b03a:	f3bf 8f4f 	dsb	sy
 800b03e:	f3bf 8f6f 	isb	sy
 800b042:	b662      	cpsie	i
 800b044:	f7fe ff8a 	bl	8009f5c <vTaskSwitchContext>
 800b048:	f04f 0000 	mov.w	r0, #0
 800b04c:	f380 8811 	msr	BASEPRI, r0
 800b050:	bc09      	pop	{r0, r3}
 800b052:	6819      	ldr	r1, [r3, #0]
 800b054:	6808      	ldr	r0, [r1, #0]
 800b056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b05a:	f01e 0f10 	tst.w	lr, #16
 800b05e:	bf08      	it	eq
 800b060:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b064:	f380 8809 	msr	PSP, r0
 800b068:	f3bf 8f6f 	isb	sy
 800b06c:	4770      	bx	lr
 800b06e:	bf00      	nop

0800b070 <pxCurrentTCBConst>:
 800b070:	200074c0 	.word	0x200074c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b074:	bf00      	nop
 800b076:	bf00      	nop

0800b078 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b082      	sub	sp, #8
 800b07c:	af00      	add	r7, sp, #0
	__asm volatile
 800b07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b082:	b672      	cpsid	i
 800b084:	f383 8811 	msr	BASEPRI, r3
 800b088:	f3bf 8f6f 	isb	sy
 800b08c:	f3bf 8f4f 	dsb	sy
 800b090:	b662      	cpsie	i
 800b092:	607b      	str	r3, [r7, #4]
}
 800b094:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b096:	f7fe fea5 	bl	8009de4 <xTaskIncrementTick>
 800b09a:	4603      	mov	r3, r0
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d003      	beq.n	800b0a8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b0a0:	4b06      	ldr	r3, [pc, #24]	; (800b0bc <SysTick_Handler+0x44>)
 800b0a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0a6:	601a      	str	r2, [r3, #0]
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	f383 8811 	msr	BASEPRI, r3
}
 800b0b2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b0b4:	bf00      	nop
 800b0b6:	3708      	adds	r7, #8
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd80      	pop	{r7, pc}
 800b0bc:	e000ed04 	.word	0xe000ed04

0800b0c0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b0c4:	4b0b      	ldr	r3, [pc, #44]	; (800b0f4 <vPortSetupTimerInterrupt+0x34>)
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b0ca:	4b0b      	ldr	r3, [pc, #44]	; (800b0f8 <vPortSetupTimerInterrupt+0x38>)
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b0d0:	4b0a      	ldr	r3, [pc, #40]	; (800b0fc <vPortSetupTimerInterrupt+0x3c>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	4a0a      	ldr	r2, [pc, #40]	; (800b100 <vPortSetupTimerInterrupt+0x40>)
 800b0d6:	fba2 2303 	umull	r2, r3, r2, r3
 800b0da:	099b      	lsrs	r3, r3, #6
 800b0dc:	4a09      	ldr	r2, [pc, #36]	; (800b104 <vPortSetupTimerInterrupt+0x44>)
 800b0de:	3b01      	subs	r3, #1
 800b0e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b0e2:	4b04      	ldr	r3, [pc, #16]	; (800b0f4 <vPortSetupTimerInterrupt+0x34>)
 800b0e4:	2207      	movs	r2, #7
 800b0e6:	601a      	str	r2, [r3, #0]
}
 800b0e8:	bf00      	nop
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f0:	4770      	bx	lr
 800b0f2:	bf00      	nop
 800b0f4:	e000e010 	.word	0xe000e010
 800b0f8:	e000e018 	.word	0xe000e018
 800b0fc:	20000004 	.word	0x20000004
 800b100:	10624dd3 	.word	0x10624dd3
 800b104:	e000e014 	.word	0xe000e014

0800b108 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b108:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b118 <vPortEnableVFP+0x10>
 800b10c:	6801      	ldr	r1, [r0, #0]
 800b10e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b112:	6001      	str	r1, [r0, #0]
 800b114:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b116:	bf00      	nop
 800b118:	e000ed88 	.word	0xe000ed88

0800b11c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b11c:	b480      	push	{r7}
 800b11e:	b085      	sub	sp, #20
 800b120:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b122:	f3ef 8305 	mrs	r3, IPSR
 800b126:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	2b0f      	cmp	r3, #15
 800b12c:	d916      	bls.n	800b15c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b12e:	4a19      	ldr	r2, [pc, #100]	; (800b194 <vPortValidateInterruptPriority+0x78>)
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	4413      	add	r3, r2
 800b134:	781b      	ldrb	r3, [r3, #0]
 800b136:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b138:	4b17      	ldr	r3, [pc, #92]	; (800b198 <vPortValidateInterruptPriority+0x7c>)
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	7afa      	ldrb	r2, [r7, #11]
 800b13e:	429a      	cmp	r2, r3
 800b140:	d20c      	bcs.n	800b15c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800b142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b146:	b672      	cpsid	i
 800b148:	f383 8811 	msr	BASEPRI, r3
 800b14c:	f3bf 8f6f 	isb	sy
 800b150:	f3bf 8f4f 	dsb	sy
 800b154:	b662      	cpsie	i
 800b156:	607b      	str	r3, [r7, #4]
}
 800b158:	bf00      	nop
 800b15a:	e7fe      	b.n	800b15a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b15c:	4b0f      	ldr	r3, [pc, #60]	; (800b19c <vPortValidateInterruptPriority+0x80>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b164:	4b0e      	ldr	r3, [pc, #56]	; (800b1a0 <vPortValidateInterruptPriority+0x84>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	429a      	cmp	r2, r3
 800b16a:	d90c      	bls.n	800b186 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800b16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b170:	b672      	cpsid	i
 800b172:	f383 8811 	msr	BASEPRI, r3
 800b176:	f3bf 8f6f 	isb	sy
 800b17a:	f3bf 8f4f 	dsb	sy
 800b17e:	b662      	cpsie	i
 800b180:	603b      	str	r3, [r7, #0]
}
 800b182:	bf00      	nop
 800b184:	e7fe      	b.n	800b184 <vPortValidateInterruptPriority+0x68>
	}
 800b186:	bf00      	nop
 800b188:	3714      	adds	r7, #20
 800b18a:	46bd      	mov	sp, r7
 800b18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b190:	4770      	bx	lr
 800b192:	bf00      	nop
 800b194:	e000e3f0 	.word	0xe000e3f0
 800b198:	20007aec 	.word	0x20007aec
 800b19c:	e000ed0c 	.word	0xe000ed0c
 800b1a0:	20007af0 	.word	0x20007af0

0800b1a4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b08a      	sub	sp, #40	; 0x28
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b1b0:	f7fe fd5a 	bl	8009c68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b1b4:	4b5b      	ldr	r3, [pc, #364]	; (800b324 <pvPortMalloc+0x180>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d101      	bne.n	800b1c0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b1bc:	f000 f91a 	bl	800b3f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b1c0:	4b59      	ldr	r3, [pc, #356]	; (800b328 <pvPortMalloc+0x184>)
 800b1c2:	681a      	ldr	r2, [r3, #0]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	4013      	ands	r3, r2
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	f040 8092 	bne.w	800b2f2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d01f      	beq.n	800b214 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800b1d4:	2208      	movs	r2, #8
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	4413      	add	r3, r2
 800b1da:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f003 0307 	and.w	r3, r3, #7
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d016      	beq.n	800b214 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f023 0307 	bic.w	r3, r3, #7
 800b1ec:	3308      	adds	r3, #8
 800b1ee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f003 0307 	and.w	r3, r3, #7
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d00c      	beq.n	800b214 <pvPortMalloc+0x70>
	__asm volatile
 800b1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1fe:	b672      	cpsid	i
 800b200:	f383 8811 	msr	BASEPRI, r3
 800b204:	f3bf 8f6f 	isb	sy
 800b208:	f3bf 8f4f 	dsb	sy
 800b20c:	b662      	cpsie	i
 800b20e:	617b      	str	r3, [r7, #20]
}
 800b210:	bf00      	nop
 800b212:	e7fe      	b.n	800b212 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d06b      	beq.n	800b2f2 <pvPortMalloc+0x14e>
 800b21a:	4b44      	ldr	r3, [pc, #272]	; (800b32c <pvPortMalloc+0x188>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	687a      	ldr	r2, [r7, #4]
 800b220:	429a      	cmp	r2, r3
 800b222:	d866      	bhi.n	800b2f2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b224:	4b42      	ldr	r3, [pc, #264]	; (800b330 <pvPortMalloc+0x18c>)
 800b226:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b228:	4b41      	ldr	r3, [pc, #260]	; (800b330 <pvPortMalloc+0x18c>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b22e:	e004      	b.n	800b23a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800b230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b232:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b23c:	685b      	ldr	r3, [r3, #4]
 800b23e:	687a      	ldr	r2, [r7, #4]
 800b240:	429a      	cmp	r2, r3
 800b242:	d903      	bls.n	800b24c <pvPortMalloc+0xa8>
 800b244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d1f1      	bne.n	800b230 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b24c:	4b35      	ldr	r3, [pc, #212]	; (800b324 <pvPortMalloc+0x180>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b252:	429a      	cmp	r2, r3
 800b254:	d04d      	beq.n	800b2f2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b256:	6a3b      	ldr	r3, [r7, #32]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	2208      	movs	r2, #8
 800b25c:	4413      	add	r3, r2
 800b25e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b262:	681a      	ldr	r2, [r3, #0]
 800b264:	6a3b      	ldr	r3, [r7, #32]
 800b266:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b26a:	685a      	ldr	r2, [r3, #4]
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	1ad2      	subs	r2, r2, r3
 800b270:	2308      	movs	r3, #8
 800b272:	005b      	lsls	r3, r3, #1
 800b274:	429a      	cmp	r2, r3
 800b276:	d921      	bls.n	800b2bc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	4413      	add	r3, r2
 800b27e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b280:	69bb      	ldr	r3, [r7, #24]
 800b282:	f003 0307 	and.w	r3, r3, #7
 800b286:	2b00      	cmp	r3, #0
 800b288:	d00c      	beq.n	800b2a4 <pvPortMalloc+0x100>
	__asm volatile
 800b28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b28e:	b672      	cpsid	i
 800b290:	f383 8811 	msr	BASEPRI, r3
 800b294:	f3bf 8f6f 	isb	sy
 800b298:	f3bf 8f4f 	dsb	sy
 800b29c:	b662      	cpsie	i
 800b29e:	613b      	str	r3, [r7, #16]
}
 800b2a0:	bf00      	nop
 800b2a2:	e7fe      	b.n	800b2a2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a6:	685a      	ldr	r2, [r3, #4]
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	1ad2      	subs	r2, r2, r3
 800b2ac:	69bb      	ldr	r3, [r7, #24]
 800b2ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b2:	687a      	ldr	r2, [r7, #4]
 800b2b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b2b6:	69b8      	ldr	r0, [r7, #24]
 800b2b8:	f000 f8fe 	bl	800b4b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b2bc:	4b1b      	ldr	r3, [pc, #108]	; (800b32c <pvPortMalloc+0x188>)
 800b2be:	681a      	ldr	r2, [r3, #0]
 800b2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c2:	685b      	ldr	r3, [r3, #4]
 800b2c4:	1ad3      	subs	r3, r2, r3
 800b2c6:	4a19      	ldr	r2, [pc, #100]	; (800b32c <pvPortMalloc+0x188>)
 800b2c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b2ca:	4b18      	ldr	r3, [pc, #96]	; (800b32c <pvPortMalloc+0x188>)
 800b2cc:	681a      	ldr	r2, [r3, #0]
 800b2ce:	4b19      	ldr	r3, [pc, #100]	; (800b334 <pvPortMalloc+0x190>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	429a      	cmp	r2, r3
 800b2d4:	d203      	bcs.n	800b2de <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b2d6:	4b15      	ldr	r3, [pc, #84]	; (800b32c <pvPortMalloc+0x188>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	4a16      	ldr	r2, [pc, #88]	; (800b334 <pvPortMalloc+0x190>)
 800b2dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e0:	685a      	ldr	r2, [r3, #4]
 800b2e2:	4b11      	ldr	r3, [pc, #68]	; (800b328 <pvPortMalloc+0x184>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	431a      	orrs	r2, r3
 800b2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b2f2:	f7fe fcc7 	bl	8009c84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b2f6:	69fb      	ldr	r3, [r7, #28]
 800b2f8:	f003 0307 	and.w	r3, r3, #7
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d00c      	beq.n	800b31a <pvPortMalloc+0x176>
	__asm volatile
 800b300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b304:	b672      	cpsid	i
 800b306:	f383 8811 	msr	BASEPRI, r3
 800b30a:	f3bf 8f6f 	isb	sy
 800b30e:	f3bf 8f4f 	dsb	sy
 800b312:	b662      	cpsie	i
 800b314:	60fb      	str	r3, [r7, #12]
}
 800b316:	bf00      	nop
 800b318:	e7fe      	b.n	800b318 <pvPortMalloc+0x174>
	return pvReturn;
 800b31a:	69fb      	ldr	r3, [r7, #28]
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3728      	adds	r7, #40	; 0x28
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}
 800b324:	2000b6fc 	.word	0x2000b6fc
 800b328:	2000b708 	.word	0x2000b708
 800b32c:	2000b700 	.word	0x2000b700
 800b330:	2000b6f4 	.word	0x2000b6f4
 800b334:	2000b704 	.word	0x2000b704

0800b338 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b086      	sub	sp, #24
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d04c      	beq.n	800b3e4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b34a:	2308      	movs	r3, #8
 800b34c:	425b      	negs	r3, r3
 800b34e:	697a      	ldr	r2, [r7, #20]
 800b350:	4413      	add	r3, r2
 800b352:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	685a      	ldr	r2, [r3, #4]
 800b35c:	4b23      	ldr	r3, [pc, #140]	; (800b3ec <vPortFree+0xb4>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	4013      	ands	r3, r2
 800b362:	2b00      	cmp	r3, #0
 800b364:	d10c      	bne.n	800b380 <vPortFree+0x48>
	__asm volatile
 800b366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b36a:	b672      	cpsid	i
 800b36c:	f383 8811 	msr	BASEPRI, r3
 800b370:	f3bf 8f6f 	isb	sy
 800b374:	f3bf 8f4f 	dsb	sy
 800b378:	b662      	cpsie	i
 800b37a:	60fb      	str	r3, [r7, #12]
}
 800b37c:	bf00      	nop
 800b37e:	e7fe      	b.n	800b37e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d00c      	beq.n	800b3a2 <vPortFree+0x6a>
	__asm volatile
 800b388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b38c:	b672      	cpsid	i
 800b38e:	f383 8811 	msr	BASEPRI, r3
 800b392:	f3bf 8f6f 	isb	sy
 800b396:	f3bf 8f4f 	dsb	sy
 800b39a:	b662      	cpsie	i
 800b39c:	60bb      	str	r3, [r7, #8]
}
 800b39e:	bf00      	nop
 800b3a0:	e7fe      	b.n	800b3a0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	685a      	ldr	r2, [r3, #4]
 800b3a6:	4b11      	ldr	r3, [pc, #68]	; (800b3ec <vPortFree+0xb4>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	4013      	ands	r3, r2
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d019      	beq.n	800b3e4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d115      	bne.n	800b3e4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	685a      	ldr	r2, [r3, #4]
 800b3bc:	4b0b      	ldr	r3, [pc, #44]	; (800b3ec <vPortFree+0xb4>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	43db      	mvns	r3, r3
 800b3c2:	401a      	ands	r2, r3
 800b3c4:	693b      	ldr	r3, [r7, #16]
 800b3c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b3c8:	f7fe fc4e 	bl	8009c68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b3cc:	693b      	ldr	r3, [r7, #16]
 800b3ce:	685a      	ldr	r2, [r3, #4]
 800b3d0:	4b07      	ldr	r3, [pc, #28]	; (800b3f0 <vPortFree+0xb8>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	4413      	add	r3, r2
 800b3d6:	4a06      	ldr	r2, [pc, #24]	; (800b3f0 <vPortFree+0xb8>)
 800b3d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b3da:	6938      	ldr	r0, [r7, #16]
 800b3dc:	f000 f86c 	bl	800b4b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b3e0:	f7fe fc50 	bl	8009c84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b3e4:	bf00      	nop
 800b3e6:	3718      	adds	r7, #24
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}
 800b3ec:	2000b708 	.word	0x2000b708
 800b3f0:	2000b700 	.word	0x2000b700

0800b3f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b085      	sub	sp, #20
 800b3f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b3fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b3fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b400:	4b27      	ldr	r3, [pc, #156]	; (800b4a0 <prvHeapInit+0xac>)
 800b402:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	f003 0307 	and.w	r3, r3, #7
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d00c      	beq.n	800b428 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	3307      	adds	r3, #7
 800b412:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	f023 0307 	bic.w	r3, r3, #7
 800b41a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b41c:	68ba      	ldr	r2, [r7, #8]
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	1ad3      	subs	r3, r2, r3
 800b422:	4a1f      	ldr	r2, [pc, #124]	; (800b4a0 <prvHeapInit+0xac>)
 800b424:	4413      	add	r3, r2
 800b426:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b42c:	4a1d      	ldr	r2, [pc, #116]	; (800b4a4 <prvHeapInit+0xb0>)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b432:	4b1c      	ldr	r3, [pc, #112]	; (800b4a4 <prvHeapInit+0xb0>)
 800b434:	2200      	movs	r2, #0
 800b436:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	68ba      	ldr	r2, [r7, #8]
 800b43c:	4413      	add	r3, r2
 800b43e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b440:	2208      	movs	r2, #8
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	1a9b      	subs	r3, r3, r2
 800b446:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f023 0307 	bic.w	r3, r3, #7
 800b44e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	4a15      	ldr	r2, [pc, #84]	; (800b4a8 <prvHeapInit+0xb4>)
 800b454:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b456:	4b14      	ldr	r3, [pc, #80]	; (800b4a8 <prvHeapInit+0xb4>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	2200      	movs	r2, #0
 800b45c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b45e:	4b12      	ldr	r3, [pc, #72]	; (800b4a8 <prvHeapInit+0xb4>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	2200      	movs	r2, #0
 800b464:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	68fa      	ldr	r2, [r7, #12]
 800b46e:	1ad2      	subs	r2, r2, r3
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b474:	4b0c      	ldr	r3, [pc, #48]	; (800b4a8 <prvHeapInit+0xb4>)
 800b476:	681a      	ldr	r2, [r3, #0]
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	4a0a      	ldr	r2, [pc, #40]	; (800b4ac <prvHeapInit+0xb8>)
 800b482:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	685b      	ldr	r3, [r3, #4]
 800b488:	4a09      	ldr	r2, [pc, #36]	; (800b4b0 <prvHeapInit+0xbc>)
 800b48a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b48c:	4b09      	ldr	r3, [pc, #36]	; (800b4b4 <prvHeapInit+0xc0>)
 800b48e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b492:	601a      	str	r2, [r3, #0]
}
 800b494:	bf00      	nop
 800b496:	3714      	adds	r7, #20
 800b498:	46bd      	mov	sp, r7
 800b49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49e:	4770      	bx	lr
 800b4a0:	20007af4 	.word	0x20007af4
 800b4a4:	2000b6f4 	.word	0x2000b6f4
 800b4a8:	2000b6fc 	.word	0x2000b6fc
 800b4ac:	2000b704 	.word	0x2000b704
 800b4b0:	2000b700 	.word	0x2000b700
 800b4b4:	2000b708 	.word	0x2000b708

0800b4b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b085      	sub	sp, #20
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b4c0:	4b28      	ldr	r3, [pc, #160]	; (800b564 <prvInsertBlockIntoFreeList+0xac>)
 800b4c2:	60fb      	str	r3, [r7, #12]
 800b4c4:	e002      	b.n	800b4cc <prvInsertBlockIntoFreeList+0x14>
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	60fb      	str	r3, [r7, #12]
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	687a      	ldr	r2, [r7, #4]
 800b4d2:	429a      	cmp	r2, r3
 800b4d4:	d8f7      	bhi.n	800b4c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	68ba      	ldr	r2, [r7, #8]
 800b4e0:	4413      	add	r3, r2
 800b4e2:	687a      	ldr	r2, [r7, #4]
 800b4e4:	429a      	cmp	r2, r3
 800b4e6:	d108      	bne.n	800b4fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	685a      	ldr	r2, [r3, #4]
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	685b      	ldr	r3, [r3, #4]
 800b4f0:	441a      	add	r2, r3
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	685b      	ldr	r3, [r3, #4]
 800b502:	68ba      	ldr	r2, [r7, #8]
 800b504:	441a      	add	r2, r3
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d118      	bne.n	800b540 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	681a      	ldr	r2, [r3, #0]
 800b512:	4b15      	ldr	r3, [pc, #84]	; (800b568 <prvInsertBlockIntoFreeList+0xb0>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	429a      	cmp	r2, r3
 800b518:	d00d      	beq.n	800b536 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	685a      	ldr	r2, [r3, #4]
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	685b      	ldr	r3, [r3, #4]
 800b524:	441a      	add	r2, r3
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	681a      	ldr	r2, [r3, #0]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	601a      	str	r2, [r3, #0]
 800b534:	e008      	b.n	800b548 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b536:	4b0c      	ldr	r3, [pc, #48]	; (800b568 <prvInsertBlockIntoFreeList+0xb0>)
 800b538:	681a      	ldr	r2, [r3, #0]
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	601a      	str	r2, [r3, #0]
 800b53e:	e003      	b.n	800b548 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	681a      	ldr	r2, [r3, #0]
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b548:	68fa      	ldr	r2, [r7, #12]
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	429a      	cmp	r2, r3
 800b54e:	d002      	beq.n	800b556 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	687a      	ldr	r2, [r7, #4]
 800b554:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b556:	bf00      	nop
 800b558:	3714      	adds	r7, #20
 800b55a:	46bd      	mov	sp, r7
 800b55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b560:	4770      	bx	lr
 800b562:	bf00      	nop
 800b564:	2000b6f4 	.word	0x2000b6f4
 800b568:	2000b6fc 	.word	0x2000b6fc

0800b56c <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control>:
 800b56c:	4b04      	ldr	r3, [pc, #16]	; (800b580 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x14>)
 800b56e:	681a      	ldr	r2, [r3, #0]
 800b570:	b10a      	cbz	r2, 800b576 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0xa>
 800b572:	4803      	ldr	r0, [pc, #12]	; (800b580 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x14>)
 800b574:	4770      	bx	lr
 800b576:	4a03      	ldr	r2, [pc, #12]	; (800b584 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x18>)
 800b578:	4801      	ldr	r0, [pc, #4]	; (800b580 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x14>)
 800b57a:	6812      	ldr	r2, [r2, #0]
 800b57c:	601a      	str	r2, [r3, #0]
 800b57e:	4770      	bx	lr
 800b580:	2000001c 	.word	0x2000001c
 800b584:	2000092c 	.word	0x2000092c

0800b588 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request>:
 800b588:	4b06      	ldr	r3, [pc, #24]	; (800b5a4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x1c>)
 800b58a:	4807      	ldr	r0, [pc, #28]	; (800b5a8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x20>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	4907      	ldr	r1, [pc, #28]	; (800b5ac <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x24>)
 800b590:	4a07      	ldr	r2, [pc, #28]	; (800b5b0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x28>)
 800b592:	b410      	push	{r4}
 800b594:	4c07      	ldr	r4, [pc, #28]	; (800b5b4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x2c>)
 800b596:	6003      	str	r3, [r0, #0]
 800b598:	6023      	str	r3, [r4, #0]
 800b59a:	600b      	str	r3, [r1, #0]
 800b59c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5a0:	6013      	str	r3, [r2, #0]
 800b5a2:	4770      	bx	lr
 800b5a4:	2000092c 	.word	0x2000092c
 800b5a8:	20000090 	.word	0x20000090
 800b5ac:	20000050 	.word	0x20000050
 800b5b0:	2000001c 	.word	0x2000001c
 800b5b4:	20000078 	.word	0x20000078

0800b5b8 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback>:
 800b5b8:	4b04      	ldr	r3, [pc, #16]	; (800b5cc <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800b5ba:	681a      	ldr	r2, [r3, #0]
 800b5bc:	b10a      	cbz	r2, 800b5c2 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0xa>
 800b5be:	4803      	ldr	r0, [pc, #12]	; (800b5cc <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800b5c0:	4770      	bx	lr
 800b5c2:	4a03      	ldr	r2, [pc, #12]	; (800b5d0 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0x18>)
 800b5c4:	4801      	ldr	r0, [pc, #4]	; (800b5cc <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800b5c6:	6812      	ldr	r2, [r2, #0]
 800b5c8:	601a      	str	r2, [r3, #0]
 800b5ca:	4770      	bx	lr
 800b5cc:	200000b0 	.word	0x200000b0
 800b5d0:	2000092c 	.word	0x2000092c

0800b5d4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback>:
 800b5d4:	4a02      	ldr	r2, [pc, #8]	; (800b5e0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0xc>)
 800b5d6:	4b03      	ldr	r3, [pc, #12]	; (800b5e4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0x10>)
 800b5d8:	6812      	ldr	r2, [r2, #0]
 800b5da:	601a      	str	r2, [r3, #0]
 800b5dc:	4770      	bx	lr
 800b5de:	bf00      	nop
 800b5e0:	2000092c 	.word	0x2000092c
 800b5e4:	200000b0 	.word	0x200000b0

0800b5e8 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup>:
 800b5e8:	4b04      	ldr	r3, [pc, #16]	; (800b5fc <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x14>)
 800b5ea:	681a      	ldr	r2, [r3, #0]
 800b5ec:	b10a      	cbz	r2, 800b5f2 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0xa>
 800b5ee:	4803      	ldr	r0, [pc, #12]	; (800b5fc <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x14>)
 800b5f0:	4770      	bx	lr
 800b5f2:	4a03      	ldr	r2, [pc, #12]	; (800b600 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x18>)
 800b5f4:	4801      	ldr	r0, [pc, #4]	; (800b5fc <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x14>)
 800b5f6:	6812      	ldr	r2, [r2, #0]
 800b5f8:	601a      	str	r2, [r3, #0]
 800b5fa:	4770      	bx	lr
 800b5fc:	200000d0 	.word	0x200000d0
 800b600:	2000092c 	.word	0x2000092c

0800b604 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request>:
 800b604:	4b06      	ldr	r3, [pc, #24]	; (800b620 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x1c>)
 800b606:	4807      	ldr	r0, [pc, #28]	; (800b624 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x20>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	4907      	ldr	r1, [pc, #28]	; (800b628 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x24>)
 800b60c:	4a07      	ldr	r2, [pc, #28]	; (800b62c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x28>)
 800b60e:	b410      	push	{r4}
 800b610:	4c07      	ldr	r4, [pc, #28]	; (800b630 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x2c>)
 800b612:	6003      	str	r3, [r0, #0]
 800b614:	6023      	str	r3, [r4, #0]
 800b616:	600b      	str	r3, [r1, #0]
 800b618:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b61c:	6013      	str	r3, [r2, #0]
 800b61e:	4770      	bx	lr
 800b620:	2000092c 	.word	0x2000092c
 800b624:	20000144 	.word	0x20000144
 800b628:	20000104 	.word	0x20000104
 800b62c:	200000d0 	.word	0x200000d0
 800b630:	2000012c 	.word	0x2000012c

0800b634 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__size_function__Control_Request__encoders>:
 800b634:	2006      	movs	r0, #6
 800b636:	4770      	bx	lr

0800b638 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__get_const_function__Control_Request__encoders>:
 800b638:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800b63c:	4770      	bx	lr
 800b63e:	bf00      	nop

0800b640 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__fetch_function__Control_Request__encoders>:
 800b640:	f930 3011 	ldrsh.w	r3, [r0, r1, lsl #1]
 800b644:	8013      	strh	r3, [r2, #0]
 800b646:	4770      	bx	lr

0800b648 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__assign_function__Control_Request__encoders>:
 800b648:	f9b2 3000 	ldrsh.w	r3, [r2]
 800b64c:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800b650:	4770      	bx	lr
 800b652:	bf00      	nop

0800b654 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__size_function__Control_Event__request>:
 800b654:	6840      	ldr	r0, [r0, #4]
 800b656:	4770      	bx	lr

0800b658 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_const_function__Control_Event__request>:
 800b658:	6800      	ldr	r0, [r0, #0]
 800b65a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800b65e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800b662:	4770      	bx	lr

0800b664 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__fetch_function__Control_Event__request>:
 800b664:	6800      	ldr	r0, [r0, #0]
 800b666:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800b66a:	eb00 0341 	add.w	r3, r0, r1, lsl #1
 800b66e:	f850 c011 	ldr.w	ip, [r0, r1, lsl #1]
 800b672:	6858      	ldr	r0, [r3, #4]
 800b674:	6899      	ldr	r1, [r3, #8]
 800b676:	f8c2 c000 	str.w	ip, [r2]
 800b67a:	6050      	str	r0, [r2, #4]
 800b67c:	6091      	str	r1, [r2, #8]
 800b67e:	899b      	ldrh	r3, [r3, #12]
 800b680:	8193      	strh	r3, [r2, #12]
 800b682:	4770      	bx	lr

0800b684 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__assign_function__Control_Event__request>:
 800b684:	6800      	ldr	r0, [r0, #0]
 800b686:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800b68a:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800b68e:	eb00 0341 	add.w	r3, r0, r1, lsl #1
 800b692:	b510      	push	{r4, lr}
 800b694:	6814      	ldr	r4, [r2, #0]
 800b696:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800b69a:	f840 4011 	str.w	r4, [r0, r1, lsl #1]
 800b69e:	f8c3 e004 	str.w	lr, [r3, #4]
 800b6a2:	f8c3 c008 	str.w	ip, [r3, #8]
 800b6a6:	8992      	ldrh	r2, [r2, #12]
 800b6a8:	819a      	strh	r2, [r3, #12]
 800b6aa:	bd10      	pop	{r4, pc}

0800b6ac <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__size_function__Control_Event__response>:
 800b6ac:	6840      	ldr	r0, [r0, #4]
 800b6ae:	4770      	bx	lr

0800b6b0 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_const_function__Control_Event__response>:
 800b6b0:	6800      	ldr	r0, [r0, #0]
 800b6b2:	4408      	add	r0, r1
 800b6b4:	4770      	bx	lr
 800b6b6:	bf00      	nop

0800b6b8 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__fetch_function__Control_Event__response>:
 800b6b8:	6803      	ldr	r3, [r0, #0]
 800b6ba:	5c5b      	ldrb	r3, [r3, r1]
 800b6bc:	7013      	strb	r3, [r2, #0]
 800b6be:	4770      	bx	lr

0800b6c0 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__assign_function__Control_Event__response>:
 800b6c0:	6803      	ldr	r3, [r0, #0]
 800b6c2:	7812      	ldrb	r2, [r2, #0]
 800b6c4:	545a      	strb	r2, [r3, r1]
 800b6c6:	4770      	bx	lr

0800b6c8 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__Control_Request_init_function>:
 800b6c8:	f007 bca2 	b.w	8013010 <racs_services__srv__Control_Request__init>

0800b6cc <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__Control_Request_fini_function>:
 800b6cc:	f007 bca4 	b.w	8013018 <racs_services__srv__Control_Request__fini>

0800b6d0 <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__Control_Response_init_function>:
 800b6d0:	f007 bce4 	b.w	801309c <racs_services__srv__Control_Response__init>

0800b6d4 <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__Control_Response_fini_function>:
 800b6d4:	f007 bce6 	b.w	80130a4 <racs_services__srv__Control_Response__fini>

0800b6d8 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__Control_Event_init_function>:
 800b6d8:	f007 bd1c 	b.w	8013114 <racs_services__srv__Control_Event__init>

0800b6dc <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__Control_Event_fini_function>:
 800b6dc:	f007 bd3c 	b.w	8013158 <racs_services__srv__Control_Event__fini>

0800b6e0 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__resize_function__Control_Event__request>:
 800b6e0:	b510      	push	{r4, lr}
 800b6e2:	4604      	mov	r4, r0
 800b6e4:	b082      	sub	sp, #8
 800b6e6:	9101      	str	r1, [sp, #4]
 800b6e8:	f007 fcc4 	bl	8013074 <racs_services__srv__Control_Request__Sequence__fini>
 800b6ec:	9901      	ldr	r1, [sp, #4]
 800b6ee:	4620      	mov	r0, r4
 800b6f0:	b002      	add	sp, #8
 800b6f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6f6:	f007 bca3 	b.w	8013040 <racs_services__srv__Control_Request__Sequence__init>
 800b6fa:	bf00      	nop

0800b6fc <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__resize_function__Control_Event__response>:
 800b6fc:	b510      	push	{r4, lr}
 800b6fe:	4604      	mov	r4, r0
 800b700:	b082      	sub	sp, #8
 800b702:	9101      	str	r1, [sp, #4]
 800b704:	f007 fcf2 	bl	80130ec <racs_services__srv__Control_Response__Sequence__fini>
 800b708:	9901      	ldr	r1, [sp, #4]
 800b70a:	4620      	mov	r0, r4
 800b70c:	b002      	add	sp, #8
 800b70e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b712:	f007 bcd1 	b.w	80130b8 <racs_services__srv__Control_Response__Sequence__init>
 800b716:	bf00      	nop

0800b718 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_function__Control_Event__response>:
 800b718:	6800      	ldr	r0, [r0, #0]
 800b71a:	4408      	add	r0, r1
 800b71c:	4770      	bx	lr
 800b71e:	bf00      	nop

0800b720 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__get_function__Control_Request__encoders>:
 800b720:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800b724:	4770      	bx	lr
 800b726:	bf00      	nop

0800b728 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_function__Control_Event__request>:
 800b728:	6800      	ldr	r0, [r0, #0]
 800b72a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800b72e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800b732:	4770      	bx	lr

0800b734 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request>:
 800b734:	4b04      	ldr	r3, [pc, #16]	; (800b748 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x14>)
 800b736:	681a      	ldr	r2, [r3, #0]
 800b738:	b10a      	cbz	r2, 800b73e <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0xa>
 800b73a:	4803      	ldr	r0, [pc, #12]	; (800b748 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x14>)
 800b73c:	4770      	bx	lr
 800b73e:	4a03      	ldr	r2, [pc, #12]	; (800b74c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x18>)
 800b740:	4801      	ldr	r0, [pc, #4]	; (800b748 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x14>)
 800b742:	6812      	ldr	r2, [r2, #0]
 800b744:	601a      	str	r2, [r3, #0]
 800b746:	4770      	bx	lr
 800b748:	200002dc 	.word	0x200002dc
 800b74c:	20000930 	.word	0x20000930

0800b750 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response>:
 800b750:	4b04      	ldr	r3, [pc, #16]	; (800b764 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x14>)
 800b752:	681a      	ldr	r2, [r3, #0]
 800b754:	b10a      	cbz	r2, 800b75a <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0xa>
 800b756:	4803      	ldr	r0, [pc, #12]	; (800b764 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x14>)
 800b758:	4770      	bx	lr
 800b75a:	4a03      	ldr	r2, [pc, #12]	; (800b768 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x18>)
 800b75c:	4801      	ldr	r0, [pc, #4]	; (800b764 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x14>)
 800b75e:	6812      	ldr	r2, [r2, #0]
 800b760:	601a      	str	r2, [r3, #0]
 800b762:	4770      	bx	lr
 800b764:	20000330 	.word	0x20000330
 800b768:	20000930 	.word	0x20000930

0800b76c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event>:
 800b76c:	b508      	push	{r3, lr}
 800b76e:	f002 fdcf 	bl	800e310 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800b772:	4913      	ldr	r1, [pc, #76]	; (800b7c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x54>)
 800b774:	4b13      	ldr	r3, [pc, #76]	; (800b7c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x58>)
 800b776:	680a      	ldr	r2, [r1, #0]
 800b778:	60d8      	str	r0, [r3, #12]
 800b77a:	b152      	cbz	r2, 800b792 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x26>
 800b77c:	4a12      	ldr	r2, [pc, #72]	; (800b7c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x5c>)
 800b77e:	6499      	str	r1, [r3, #72]	; 0x48
 800b780:	6811      	ldr	r1, [r2, #0]
 800b782:	b171      	cbz	r1, 800b7a2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x36>
 800b784:	4911      	ldr	r1, [pc, #68]	; (800b7cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800b786:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b78a:	680b      	ldr	r3, [r1, #0]
 800b78c:	b193      	cbz	r3, 800b7b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x48>
 800b78e:	480f      	ldr	r0, [pc, #60]	; (800b7cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800b790:	bd08      	pop	{r3, pc}
 800b792:	4a0f      	ldr	r2, [pc, #60]	; (800b7d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x64>)
 800b794:	6499      	str	r1, [r3, #72]	; 0x48
 800b796:	6812      	ldr	r2, [r2, #0]
 800b798:	600a      	str	r2, [r1, #0]
 800b79a:	4a0b      	ldr	r2, [pc, #44]	; (800b7c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x5c>)
 800b79c:	6811      	ldr	r1, [r2, #0]
 800b79e:	2900      	cmp	r1, #0
 800b7a0:	d1f0      	bne.n	800b784 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x18>
 800b7a2:	490b      	ldr	r1, [pc, #44]	; (800b7d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x64>)
 800b7a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b7a8:	6809      	ldr	r1, [r1, #0]
 800b7aa:	6011      	str	r1, [r2, #0]
 800b7ac:	4907      	ldr	r1, [pc, #28]	; (800b7cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800b7ae:	680b      	ldr	r3, [r1, #0]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d1ec      	bne.n	800b78e <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x22>
 800b7b4:	4b06      	ldr	r3, [pc, #24]	; (800b7d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x64>)
 800b7b6:	4805      	ldr	r0, [pc, #20]	; (800b7cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	600b      	str	r3, [r1, #0]
 800b7bc:	bd08      	pop	{r3, pc}
 800b7be:	bf00      	nop
 800b7c0:	200002dc 	.word	0x200002dc
 800b7c4:	2000015c 	.word	0x2000015c
 800b7c8:	20000330 	.word	0x20000330
 800b7cc:	20000210 	.word	0x20000210
 800b7d0:	20000930 	.word	0x20000930

0800b7d4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control>:
 800b7d4:	4b25      	ldr	r3, [pc, #148]	; (800b86c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x98>)
 800b7d6:	681a      	ldr	r2, [r3, #0]
 800b7d8:	b510      	push	{r4, lr}
 800b7da:	b142      	cbz	r2, 800b7ee <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x1a>
 800b7dc:	685c      	ldr	r4, [r3, #4]
 800b7de:	68a3      	ldr	r3, [r4, #8]
 800b7e0:	b163      	cbz	r3, 800b7fc <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x28>
 800b7e2:	68e3      	ldr	r3, [r4, #12]
 800b7e4:	b193      	cbz	r3, 800b80c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x38>
 800b7e6:	6923      	ldr	r3, [r4, #16]
 800b7e8:	b1c3      	cbz	r3, 800b81c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x48>
 800b7ea:	4820      	ldr	r0, [pc, #128]	; (800b86c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x98>)
 800b7ec:	bd10      	pop	{r4, pc}
 800b7ee:	4a20      	ldr	r2, [pc, #128]	; (800b870 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800b7f0:	685c      	ldr	r4, [r3, #4]
 800b7f2:	6812      	ldr	r2, [r2, #0]
 800b7f4:	601a      	str	r2, [r3, #0]
 800b7f6:	68a3      	ldr	r3, [r4, #8]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d1f2      	bne.n	800b7e2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xe>
 800b7fc:	4a1d      	ldr	r2, [pc, #116]	; (800b874 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa0>)
 800b7fe:	6813      	ldr	r3, [r2, #0]
 800b800:	b303      	cbz	r3, 800b844 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x70>
 800b802:	6853      	ldr	r3, [r2, #4]
 800b804:	60a3      	str	r3, [r4, #8]
 800b806:	68e3      	ldr	r3, [r4, #12]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d1ec      	bne.n	800b7e6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x12>
 800b80c:	4b1a      	ldr	r3, [pc, #104]	; (800b878 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa4>)
 800b80e:	681a      	ldr	r2, [r3, #0]
 800b810:	b1e2      	cbz	r2, 800b84c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x78>
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	60e3      	str	r3, [r4, #12]
 800b816:	6923      	ldr	r3, [r4, #16]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d1e6      	bne.n	800b7ea <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x16>
 800b81c:	f002 fd78 	bl	800e310 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800b820:	4a14      	ldr	r2, [pc, #80]	; (800b874 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa0>)
 800b822:	4916      	ldr	r1, [pc, #88]	; (800b87c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa8>)
 800b824:	6813      	ldr	r3, [r2, #0]
 800b826:	60c8      	str	r0, [r1, #12]
 800b828:	b1e3      	cbz	r3, 800b864 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x90>
 800b82a:	4b13      	ldr	r3, [pc, #76]	; (800b878 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa4>)
 800b82c:	648a      	str	r2, [r1, #72]	; 0x48
 800b82e:	681a      	ldr	r2, [r3, #0]
 800b830:	b1a2      	cbz	r2, 800b85c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x88>
 800b832:	4a13      	ldr	r2, [pc, #76]	; (800b880 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xac>)
 800b834:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 800b838:	6813      	ldr	r3, [r2, #0]
 800b83a:	b15b      	cbz	r3, 800b854 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x80>
 800b83c:	6853      	ldr	r3, [r2, #4]
 800b83e:	480b      	ldr	r0, [pc, #44]	; (800b86c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x98>)
 800b840:	6123      	str	r3, [r4, #16]
 800b842:	bd10      	pop	{r4, pc}
 800b844:	4b0a      	ldr	r3, [pc, #40]	; (800b870 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	6013      	str	r3, [r2, #0]
 800b84a:	e7da      	b.n	800b802 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x2e>
 800b84c:	4a08      	ldr	r2, [pc, #32]	; (800b870 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800b84e:	6812      	ldr	r2, [r2, #0]
 800b850:	601a      	str	r2, [r3, #0]
 800b852:	e7de      	b.n	800b812 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x3e>
 800b854:	4b06      	ldr	r3, [pc, #24]	; (800b870 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	6013      	str	r3, [r2, #0]
 800b85a:	e7ef      	b.n	800b83c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x68>
 800b85c:	4a04      	ldr	r2, [pc, #16]	; (800b870 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800b85e:	6812      	ldr	r2, [r2, #0]
 800b860:	601a      	str	r2, [r3, #0]
 800b862:	e7e6      	b.n	800b832 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x5e>
 800b864:	4b02      	ldr	r3, [pc, #8]	; (800b870 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	6013      	str	r3, [r2, #0]
 800b86a:	e7de      	b.n	800b82a <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x56>
 800b86c:	2000035c 	.word	0x2000035c
 800b870:	20000930 	.word	0x20000930
 800b874:	200002dc 	.word	0x200002dc
 800b878:	20000330 	.word	0x20000330
 800b87c:	2000015c 	.word	0x2000015c
 800b880:	20000210 	.word	0x20000210

0800b884 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__size_function__Feedback__encoders>:
 800b884:	2006      	movs	r0, #6
 800b886:	4770      	bx	lr

0800b888 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__get_const_function__Feedback__encoders>:
 800b888:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800b88c:	4770      	bx	lr
 800b88e:	bf00      	nop

0800b890 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__fetch_function__Feedback__encoders>:
 800b890:	f930 3011 	ldrsh.w	r3, [r0, r1, lsl #1]
 800b894:	8013      	strh	r3, [r2, #0]
 800b896:	4770      	bx	lr

0800b898 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__assign_function__Feedback__encoders>:
 800b898:	f9b2 3000 	ldrsh.w	r3, [r2]
 800b89c:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800b8a0:	4770      	bx	lr
 800b8a2:	bf00      	nop

0800b8a4 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__Feedback_init_function>:
 800b8a4:	f007 bd18 	b.w	80132d8 <racs_services__msg__Feedback__init>

0800b8a8 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__Feedback_fini_function>:
 800b8a8:	f007 bd1a 	b.w	80132e0 <racs_services__msg__Feedback__fini>

0800b8ac <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__get_function__Feedback__encoders>:
 800b8ac:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800b8b0:	4770      	bx	lr
 800b8b2:	bf00      	nop

0800b8b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback>:
 800b8b4:	4b04      	ldr	r3, [pc, #16]	; (800b8c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800b8b6:	681a      	ldr	r2, [r3, #0]
 800b8b8:	b10a      	cbz	r2, 800b8be <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback+0xa>
 800b8ba:	4803      	ldr	r0, [pc, #12]	; (800b8c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800b8bc:	4770      	bx	lr
 800b8be:	4a03      	ldr	r2, [pc, #12]	; (800b8cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback+0x18>)
 800b8c0:	4801      	ldr	r0, [pc, #4]	; (800b8c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800b8c2:	6812      	ldr	r2, [r2, #0]
 800b8c4:	601a      	str	r2, [r3, #0]
 800b8c6:	4770      	bx	lr
 800b8c8:	20000400 	.word	0x20000400
 800b8cc:	20000930 	.word	0x20000930

0800b8d0 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__size_function__Setup_Event__request>:
 800b8d0:	6840      	ldr	r0, [r0, #4]
 800b8d2:	4770      	bx	lr

0800b8d4 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_const_function__Setup_Event__request>:
 800b8d4:	6800      	ldr	r0, [r0, #0]
 800b8d6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800b8da:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800b8de:	4770      	bx	lr

0800b8e0 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__fetch_function__Setup_Event__request>:
 800b8e0:	6803      	ldr	r3, [r0, #0]
 800b8e2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800b8e6:	4694      	mov	ip, r2
 800b8e8:	b500      	push	{lr}
 800b8ea:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 800b8ee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b8f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b8f6:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800b8fa:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800b8fe:	f85d fb04 	ldr.w	pc, [sp], #4
 800b902:	bf00      	nop

0800b904 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__assign_function__Setup_Event__request>:
 800b904:	6803      	ldr	r3, [r0, #0]
 800b906:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800b90a:	b500      	push	{lr}
 800b90c:	4696      	mov	lr, r2
 800b90e:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 800b912:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b916:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b91a:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800b91e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800b922:	f85d fb04 	ldr.w	pc, [sp], #4
 800b926:	bf00      	nop

0800b928 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__size_function__Setup_Event__response>:
 800b928:	6840      	ldr	r0, [r0, #4]
 800b92a:	4770      	bx	lr

0800b92c <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_const_function__Setup_Event__response>:
 800b92c:	6800      	ldr	r0, [r0, #0]
 800b92e:	4408      	add	r0, r1
 800b930:	4770      	bx	lr
 800b932:	bf00      	nop

0800b934 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__fetch_function__Setup_Event__response>:
 800b934:	6803      	ldr	r3, [r0, #0]
 800b936:	5c5b      	ldrb	r3, [r3, r1]
 800b938:	7013      	strb	r3, [r2, #0]
 800b93a:	4770      	bx	lr

0800b93c <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__assign_function__Setup_Event__response>:
 800b93c:	6803      	ldr	r3, [r0, #0]
 800b93e:	7812      	ldrb	r2, [r2, #0]
 800b940:	545a      	strb	r2, [r3, r1]
 800b942:	4770      	bx	lr

0800b944 <racs_services__srv__Setup_Request__rosidl_typesupport_introspection_c__Setup_Request_init_function>:
 800b944:	f007 beb0 	b.w	80136a8 <racs_services__srv__Setup_Request__init>

0800b948 <racs_services__srv__Setup_Request__rosidl_typesupport_introspection_c__Setup_Request_fini_function>:
 800b948:	f007 beb2 	b.w	80136b0 <racs_services__srv__Setup_Request__fini>

0800b94c <racs_services__srv__Setup_Response__rosidl_typesupport_introspection_c__Setup_Response_init_function>:
 800b94c:	f007 befa 	b.w	8013744 <racs_services__srv__Setup_Response__init>

0800b950 <racs_services__srv__Setup_Response__rosidl_typesupport_introspection_c__Setup_Response_fini_function>:
 800b950:	f007 befc 	b.w	801374c <racs_services__srv__Setup_Response__fini>

0800b954 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__Setup_Event_init_function>:
 800b954:	f007 bf32 	b.w	80137bc <racs_services__srv__Setup_Event__init>

0800b958 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__Setup_Event_fini_function>:
 800b958:	f007 bf52 	b.w	8013800 <racs_services__srv__Setup_Event__fini>

0800b95c <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__resize_function__Setup_Event__request>:
 800b95c:	b510      	push	{r4, lr}
 800b95e:	4604      	mov	r4, r0
 800b960:	b082      	sub	sp, #8
 800b962:	9101      	str	r1, [sp, #4]
 800b964:	f007 feda 	bl	801371c <racs_services__srv__Setup_Request__Sequence__fini>
 800b968:	9901      	ldr	r1, [sp, #4]
 800b96a:	4620      	mov	r0, r4
 800b96c:	b002      	add	sp, #8
 800b96e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b972:	f007 beb9 	b.w	80136e8 <racs_services__srv__Setup_Request__Sequence__init>
 800b976:	bf00      	nop

0800b978 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__resize_function__Setup_Event__response>:
 800b978:	b510      	push	{r4, lr}
 800b97a:	4604      	mov	r4, r0
 800b97c:	b082      	sub	sp, #8
 800b97e:	9101      	str	r1, [sp, #4]
 800b980:	f007 ff08 	bl	8013794 <racs_services__srv__Setup_Response__Sequence__fini>
 800b984:	9901      	ldr	r1, [sp, #4]
 800b986:	4620      	mov	r0, r4
 800b988:	b002      	add	sp, #8
 800b98a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b98e:	f007 bee7 	b.w	8013760 <racs_services__srv__Setup_Response__Sequence__init>
 800b992:	bf00      	nop

0800b994 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_function__Setup_Event__response>:
 800b994:	6800      	ldr	r0, [r0, #0]
 800b996:	4408      	add	r0, r1
 800b998:	4770      	bx	lr
 800b99a:	bf00      	nop

0800b99c <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_function__Setup_Event__request>:
 800b99c:	6800      	ldr	r0, [r0, #0]
 800b99e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800b9a2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800b9a6:	4770      	bx	lr

0800b9a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request>:
 800b9a8:	4b04      	ldr	r3, [pc, #16]	; (800b9bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x14>)
 800b9aa:	681a      	ldr	r2, [r3, #0]
 800b9ac:	b10a      	cbz	r2, 800b9b2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0xa>
 800b9ae:	4803      	ldr	r0, [pc, #12]	; (800b9bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x14>)
 800b9b0:	4770      	bx	lr
 800b9b2:	4a03      	ldr	r2, [pc, #12]	; (800b9c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x18>)
 800b9b4:	4801      	ldr	r0, [pc, #4]	; (800b9bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x14>)
 800b9b6:	6812      	ldr	r2, [r2, #0]
 800b9b8:	601a      	str	r2, [r3, #0]
 800b9ba:	4770      	bx	lr
 800b9bc:	20000688 	.word	0x20000688
 800b9c0:	20000930 	.word	0x20000930

0800b9c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response>:
 800b9c4:	4b04      	ldr	r3, [pc, #16]	; (800b9d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x14>)
 800b9c6:	681a      	ldr	r2, [r3, #0]
 800b9c8:	b10a      	cbz	r2, 800b9ce <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0xa>
 800b9ca:	4803      	ldr	r0, [pc, #12]	; (800b9d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x14>)
 800b9cc:	4770      	bx	lr
 800b9ce:	4a03      	ldr	r2, [pc, #12]	; (800b9dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x18>)
 800b9d0:	4801      	ldr	r0, [pc, #4]	; (800b9d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x14>)
 800b9d2:	6812      	ldr	r2, [r2, #0]
 800b9d4:	601a      	str	r2, [r3, #0]
 800b9d6:	4770      	bx	lr
 800b9d8:	200006dc 	.word	0x200006dc
 800b9dc:	20000930 	.word	0x20000930

0800b9e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event>:
 800b9e0:	b508      	push	{r3, lr}
 800b9e2:	f002 fc95 	bl	800e310 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800b9e6:	4913      	ldr	r1, [pc, #76]	; (800ba34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x54>)
 800b9e8:	4b13      	ldr	r3, [pc, #76]	; (800ba38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x58>)
 800b9ea:	680a      	ldr	r2, [r1, #0]
 800b9ec:	60d8      	str	r0, [r3, #12]
 800b9ee:	b152      	cbz	r2, 800ba06 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x26>
 800b9f0:	4a12      	ldr	r2, [pc, #72]	; (800ba3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x5c>)
 800b9f2:	6499      	str	r1, [r3, #72]	; 0x48
 800b9f4:	6811      	ldr	r1, [r2, #0]
 800b9f6:	b171      	cbz	r1, 800ba16 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x36>
 800b9f8:	4911      	ldr	r1, [pc, #68]	; (800ba40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800b9fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b9fe:	680b      	ldr	r3, [r1, #0]
 800ba00:	b193      	cbz	r3, 800ba28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x48>
 800ba02:	480f      	ldr	r0, [pc, #60]	; (800ba40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800ba04:	bd08      	pop	{r3, pc}
 800ba06:	4a0f      	ldr	r2, [pc, #60]	; (800ba44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x64>)
 800ba08:	6499      	str	r1, [r3, #72]	; 0x48
 800ba0a:	6812      	ldr	r2, [r2, #0]
 800ba0c:	600a      	str	r2, [r1, #0]
 800ba0e:	4a0b      	ldr	r2, [pc, #44]	; (800ba3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x5c>)
 800ba10:	6811      	ldr	r1, [r2, #0]
 800ba12:	2900      	cmp	r1, #0
 800ba14:	d1f0      	bne.n	800b9f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x18>
 800ba16:	490b      	ldr	r1, [pc, #44]	; (800ba44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x64>)
 800ba18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800ba1c:	6809      	ldr	r1, [r1, #0]
 800ba1e:	6011      	str	r1, [r2, #0]
 800ba20:	4907      	ldr	r1, [pc, #28]	; (800ba40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800ba22:	680b      	ldr	r3, [r1, #0]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d1ec      	bne.n	800ba02 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x22>
 800ba28:	4b06      	ldr	r3, [pc, #24]	; (800ba44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x64>)
 800ba2a:	4805      	ldr	r0, [pc, #20]	; (800ba40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	600b      	str	r3, [r1, #0]
 800ba30:	bd08      	pop	{r3, pc}
 800ba32:	bf00      	nop
 800ba34:	20000688 	.word	0x20000688
 800ba38:	20000418 	.word	0x20000418
 800ba3c:	200006dc 	.word	0x200006dc
 800ba40:	200004cc 	.word	0x200004cc
 800ba44:	20000930 	.word	0x20000930

0800ba48 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup>:
 800ba48:	4b25      	ldr	r3, [pc, #148]	; (800bae0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x98>)
 800ba4a:	681a      	ldr	r2, [r3, #0]
 800ba4c:	b510      	push	{r4, lr}
 800ba4e:	b142      	cbz	r2, 800ba62 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x1a>
 800ba50:	685c      	ldr	r4, [r3, #4]
 800ba52:	68a3      	ldr	r3, [r4, #8]
 800ba54:	b163      	cbz	r3, 800ba70 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x28>
 800ba56:	68e3      	ldr	r3, [r4, #12]
 800ba58:	b193      	cbz	r3, 800ba80 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x38>
 800ba5a:	6923      	ldr	r3, [r4, #16]
 800ba5c:	b1c3      	cbz	r3, 800ba90 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x48>
 800ba5e:	4820      	ldr	r0, [pc, #128]	; (800bae0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x98>)
 800ba60:	bd10      	pop	{r4, pc}
 800ba62:	4a20      	ldr	r2, [pc, #128]	; (800bae4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800ba64:	685c      	ldr	r4, [r3, #4]
 800ba66:	6812      	ldr	r2, [r2, #0]
 800ba68:	601a      	str	r2, [r3, #0]
 800ba6a:	68a3      	ldr	r3, [r4, #8]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d1f2      	bne.n	800ba56 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xe>
 800ba70:	4a1d      	ldr	r2, [pc, #116]	; (800bae8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa0>)
 800ba72:	6813      	ldr	r3, [r2, #0]
 800ba74:	b303      	cbz	r3, 800bab8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x70>
 800ba76:	6853      	ldr	r3, [r2, #4]
 800ba78:	60a3      	str	r3, [r4, #8]
 800ba7a:	68e3      	ldr	r3, [r4, #12]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d1ec      	bne.n	800ba5a <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x12>
 800ba80:	4b1a      	ldr	r3, [pc, #104]	; (800baec <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa4>)
 800ba82:	681a      	ldr	r2, [r3, #0]
 800ba84:	b1e2      	cbz	r2, 800bac0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x78>
 800ba86:	685b      	ldr	r3, [r3, #4]
 800ba88:	60e3      	str	r3, [r4, #12]
 800ba8a:	6923      	ldr	r3, [r4, #16]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d1e6      	bne.n	800ba5e <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x16>
 800ba90:	f002 fc3e 	bl	800e310 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800ba94:	4a14      	ldr	r2, [pc, #80]	; (800bae8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa0>)
 800ba96:	4916      	ldr	r1, [pc, #88]	; (800baf0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa8>)
 800ba98:	6813      	ldr	r3, [r2, #0]
 800ba9a:	60c8      	str	r0, [r1, #12]
 800ba9c:	b1e3      	cbz	r3, 800bad8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x90>
 800ba9e:	4b13      	ldr	r3, [pc, #76]	; (800baec <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa4>)
 800baa0:	648a      	str	r2, [r1, #72]	; 0x48
 800baa2:	681a      	ldr	r2, [r3, #0]
 800baa4:	b1a2      	cbz	r2, 800bad0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x88>
 800baa6:	4a13      	ldr	r2, [pc, #76]	; (800baf4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xac>)
 800baa8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 800baac:	6813      	ldr	r3, [r2, #0]
 800baae:	b15b      	cbz	r3, 800bac8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x80>
 800bab0:	6853      	ldr	r3, [r2, #4]
 800bab2:	480b      	ldr	r0, [pc, #44]	; (800bae0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x98>)
 800bab4:	6123      	str	r3, [r4, #16]
 800bab6:	bd10      	pop	{r4, pc}
 800bab8:	4b0a      	ldr	r3, [pc, #40]	; (800bae4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	6013      	str	r3, [r2, #0]
 800babe:	e7da      	b.n	800ba76 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x2e>
 800bac0:	4a08      	ldr	r2, [pc, #32]	; (800bae4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800bac2:	6812      	ldr	r2, [r2, #0]
 800bac4:	601a      	str	r2, [r3, #0]
 800bac6:	e7de      	b.n	800ba86 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x3e>
 800bac8:	4b06      	ldr	r3, [pc, #24]	; (800bae4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	6013      	str	r3, [r2, #0]
 800bace:	e7ef      	b.n	800bab0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x68>
 800bad0:	4a04      	ldr	r2, [pc, #16]	; (800bae4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800bad2:	6812      	ldr	r2, [r2, #0]
 800bad4:	601a      	str	r2, [r3, #0]
 800bad6:	e7e6      	b.n	800baa6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x5e>
 800bad8:	4b02      	ldr	r3, [pc, #8]	; (800bae4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	6013      	str	r3, [r2, #0]
 800bade:	e7de      	b.n	800ba9e <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x56>
 800bae0:	20000708 	.word	0x20000708
 800bae4:	20000930 	.word	0x20000930
 800bae8:	20000688 	.word	0x20000688
 800baec:	200006dc 	.word	0x200006dc
 800baf0:	20000418 	.word	0x20000418
 800baf4:	200004cc 	.word	0x200004cc

0800baf8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Request>:
 800baf8:	4800      	ldr	r0, [pc, #0]	; (800bafc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x4>)
 800bafa:	4770      	bx	lr
 800bafc:	20000788 	.word	0x20000788

0800bb00 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Response>:
 800bb00:	4800      	ldr	r0, [pc, #0]	; (800bb04 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x4>)
 800bb02:	4770      	bx	lr
 800bb04:	200007a0 	.word	0x200007a0

0800bb08 <_Control_Response__max_serialized_size>:
 800bb08:	2101      	movs	r1, #1
 800bb0a:	2000      	movs	r0, #0
 800bb0c:	b508      	push	{r3, lr}
 800bb0e:	f004 fac1 	bl	8010094 <ucdr_alignment>
 800bb12:	3001      	adds	r0, #1
 800bb14:	bd08      	pop	{r3, pc}
 800bb16:	bf00      	nop

0800bb18 <_Control_Response__cdr_deserialize>:
 800bb18:	b109      	cbz	r1, 800bb1e <_Control_Response__cdr_deserialize+0x6>
 800bb1a:	f002 bf6d 	b.w	800e9f8 <ucdr_deserialize_uint8_t>
 800bb1e:	4608      	mov	r0, r1
 800bb20:	4770      	bx	lr
 800bb22:	bf00      	nop

0800bb24 <_Control_Event__max_serialized_size>:
 800bb24:	b500      	push	{lr}
 800bb26:	b083      	sub	sp, #12
 800bb28:	2301      	movs	r3, #1
 800bb2a:	2100      	movs	r1, #0
 800bb2c:	f10d 0007 	add.w	r0, sp, #7
 800bb30:	f88d 3007 	strb.w	r3, [sp, #7]
 800bb34:	f002 fc9c 	bl	800e470 <max_serialized_size_service_msgs__msg__ServiceEventInfo>
 800bb38:	b003      	add	sp, #12
 800bb3a:	f85d fb04 	ldr.w	pc, [sp], #4
 800bb3e:	bf00      	nop

0800bb40 <get_serialized_size_racs_services__srv__Control_Request>:
 800bb40:	b1b0      	cbz	r0, 800bb70 <get_serialized_size_racs_services__srv__Control_Request+0x30>
 800bb42:	b538      	push	{r3, r4, r5, lr}
 800bb44:	460d      	mov	r5, r1
 800bb46:	2101      	movs	r1, #1
 800bb48:	4628      	mov	r0, r5
 800bb4a:	f004 faa3 	bl	8010094 <ucdr_alignment>
 800bb4e:	1c6b      	adds	r3, r5, #1
 800bb50:	2101      	movs	r1, #1
 800bb52:	f1c5 050c 	rsb	r5, r5, #12
 800bb56:	181c      	adds	r4, r3, r0
 800bb58:	4620      	mov	r0, r4
 800bb5a:	f004 fa9b 	bl	8010094 <ucdr_alignment>
 800bb5e:	3001      	adds	r0, #1
 800bb60:	2102      	movs	r1, #2
 800bb62:	4404      	add	r4, r0
 800bb64:	4620      	mov	r0, r4
 800bb66:	f004 fa95 	bl	8010094 <ucdr_alignment>
 800bb6a:	4428      	add	r0, r5
 800bb6c:	4420      	add	r0, r4
 800bb6e:	bd38      	pop	{r3, r4, r5, pc}
 800bb70:	4770      	bx	lr
 800bb72:	bf00      	nop

0800bb74 <get_serialized_size_racs_services__srv__Control_Response>:
 800bb74:	b138      	cbz	r0, 800bb86 <get_serialized_size_racs_services__srv__Control_Response+0x12>
 800bb76:	b508      	push	{r3, lr}
 800bb78:	460b      	mov	r3, r1
 800bb7a:	2101      	movs	r1, #1
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f004 fa89 	bl	8010094 <ucdr_alignment>
 800bb82:	3001      	adds	r0, #1
 800bb84:	bd08      	pop	{r3, pc}
 800bb86:	4770      	bx	lr

0800bb88 <_Control_Request__cdr_deserialize>:
 800bb88:	b538      	push	{r3, r4, r5, lr}
 800bb8a:	460c      	mov	r4, r1
 800bb8c:	b169      	cbz	r1, 800bbaa <_Control_Request__cdr_deserialize+0x22>
 800bb8e:	4605      	mov	r5, r0
 800bb90:	f002 ff32 	bl	800e9f8 <ucdr_deserialize_uint8_t>
 800bb94:	1c61      	adds	r1, r4, #1
 800bb96:	4628      	mov	r0, r5
 800bb98:	f002 ff2e 	bl	800e9f8 <ucdr_deserialize_uint8_t>
 800bb9c:	1ca1      	adds	r1, r4, #2
 800bb9e:	4628      	mov	r0, r5
 800bba0:	2206      	movs	r2, #6
 800bba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bba6:	f002 be8f 	b.w	800e8c8 <ucdr_deserialize_array_int16_t>
 800bbaa:	4608      	mov	r0, r1
 800bbac:	bd38      	pop	{r3, r4, r5, pc}
 800bbae:	bf00      	nop

0800bbb0 <_Control_Response__cdr_serialize>:
 800bbb0:	460a      	mov	r2, r1
 800bbb2:	b118      	cbz	r0, 800bbbc <_Control_Response__cdr_serialize+0xc>
 800bbb4:	7801      	ldrb	r1, [r0, #0]
 800bbb6:	4610      	mov	r0, r2
 800bbb8:	f002 bf08 	b.w	800e9cc <ucdr_serialize_uint8_t>
 800bbbc:	4770      	bx	lr
 800bbbe:	bf00      	nop

0800bbc0 <_Control_Request__cdr_serialize>:
 800bbc0:	b188      	cbz	r0, 800bbe6 <_Control_Request__cdr_serialize+0x26>
 800bbc2:	b538      	push	{r3, r4, r5, lr}
 800bbc4:	460d      	mov	r5, r1
 800bbc6:	4604      	mov	r4, r0
 800bbc8:	7801      	ldrb	r1, [r0, #0]
 800bbca:	4628      	mov	r0, r5
 800bbcc:	f002 fefe 	bl	800e9cc <ucdr_serialize_uint8_t>
 800bbd0:	7861      	ldrb	r1, [r4, #1]
 800bbd2:	4628      	mov	r0, r5
 800bbd4:	f002 fefa 	bl	800e9cc <ucdr_serialize_uint8_t>
 800bbd8:	1ca1      	adds	r1, r4, #2
 800bbda:	4628      	mov	r0, r5
 800bbdc:	2206      	movs	r2, #6
 800bbde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbe2:	f002 be1b 	b.w	800e81c <ucdr_serialize_array_int16_t>
 800bbe6:	4770      	bx	lr

0800bbe8 <get_serialized_size_racs_services__srv__Control_Event.part.0>:
 800bbe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbec:	460e      	mov	r6, r1
 800bbee:	4605      	mov	r5, r0
 800bbf0:	f002 fba4 	bl	800e33c <get_serialized_size_service_msgs__msg__ServiceEventInfo>
 800bbf4:	2104      	movs	r1, #4
 800bbf6:	eb06 0800 	add.w	r8, r6, r0
 800bbfa:	f8d5 902c 	ldr.w	r9, [r5, #44]	; 0x2c
 800bbfe:	4640      	mov	r0, r8
 800bc00:	f004 fa48 	bl	8010094 <ucdr_alignment>
 800bc04:	3004      	adds	r0, #4
 800bc06:	4480      	add	r8, r0
 800bc08:	f1b9 0f00 	cmp.w	r9, #0
 800bc0c:	d019      	beq.n	800bc42 <get_serialized_size_racs_services__srv__Control_Event.part.0+0x5a>
 800bc0e:	2700      	movs	r7, #0
 800bc10:	f8df a07c 	ldr.w	sl, [pc, #124]	; 800bc90 <get_serialized_size_racs_services__srv__Control_Event.part.0+0xa8>
 800bc14:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800bc16:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
 800bc1a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800bc1e:	4641      	mov	r1, r8
 800bc20:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800bc24:	3701      	adds	r7, #1
 800bc26:	695b      	ldr	r3, [r3, #20]
 800bc28:	4798      	blx	r3
 800bc2a:	4604      	mov	r4, r0
 800bc2c:	4640      	mov	r0, r8
 800bc2e:	2c04      	cmp	r4, #4
 800bc30:	4621      	mov	r1, r4
 800bc32:	bf28      	it	cs
 800bc34:	2104      	movcs	r1, #4
 800bc36:	f004 fa2d 	bl	8010094 <ucdr_alignment>
 800bc3a:	45b9      	cmp	r9, r7
 800bc3c:	4420      	add	r0, r4
 800bc3e:	4480      	add	r8, r0
 800bc40:	d1e8      	bne.n	800bc14 <get_serialized_size_racs_services__srv__Control_Event.part.0+0x2c>
 800bc42:	4640      	mov	r0, r8
 800bc44:	2104      	movs	r1, #4
 800bc46:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800bc48:	f004 fa24 	bl	8010094 <ucdr_alignment>
 800bc4c:	4480      	add	r8, r0
 800bc4e:	f108 0804 	add.w	r8, r8, #4
 800bc52:	b1c7      	cbz	r7, 800bc86 <get_serialized_size_racs_services__srv__Control_Event.part.0+0x9e>
 800bc54:	f04f 0900 	mov.w	r9, #0
 800bc58:	f8df a038 	ldr.w	sl, [pc, #56]	; 800bc94 <get_serialized_size_racs_services__srv__Control_Event.part.0+0xac>
 800bc5c:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800bc5e:	4641      	mov	r1, r8
 800bc60:	f8da 3004 	ldr.w	r3, [sl, #4]
 800bc64:	4448      	add	r0, r9
 800bc66:	f109 0901 	add.w	r9, r9, #1
 800bc6a:	695b      	ldr	r3, [r3, #20]
 800bc6c:	4798      	blx	r3
 800bc6e:	4604      	mov	r4, r0
 800bc70:	4640      	mov	r0, r8
 800bc72:	2c04      	cmp	r4, #4
 800bc74:	4621      	mov	r1, r4
 800bc76:	bf28      	it	cs
 800bc78:	2104      	movcs	r1, #4
 800bc7a:	f004 fa0b 	bl	8010094 <ucdr_alignment>
 800bc7e:	454f      	cmp	r7, r9
 800bc80:	4420      	add	r0, r4
 800bc82:	4480      	add	r8, r0
 800bc84:	d1ea      	bne.n	800bc5c <get_serialized_size_racs_services__srv__Control_Event.part.0+0x74>
 800bc86:	eba8 0006 	sub.w	r0, r8, r6
 800bc8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc8e:	bf00      	nop
 800bc90:	20000788 	.word	0x20000788
 800bc94:	200007a0 	.word	0x200007a0

0800bc98 <get_serialized_size_racs_services__srv__Control_Event>:
 800bc98:	b108      	cbz	r0, 800bc9e <get_serialized_size_racs_services__srv__Control_Event+0x6>
 800bc9a:	f7ff bfa5 	b.w	800bbe8 <get_serialized_size_racs_services__srv__Control_Event.part.0>
 800bc9e:	4770      	bx	lr

0800bca0 <_Control_Event__get_serialized_size>:
 800bca0:	b110      	cbz	r0, 800bca8 <_Control_Event__get_serialized_size+0x8>
 800bca2:	2100      	movs	r1, #0
 800bca4:	f7ff bfa0 	b.w	800bbe8 <get_serialized_size_racs_services__srv__Control_Event.part.0>
 800bca8:	4770      	bx	lr
 800bcaa:	bf00      	nop

0800bcac <_Control_Event__cdr_deserialize>:
 800bcac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcb0:	460c      	mov	r4, r1
 800bcb2:	b082      	sub	sp, #8
 800bcb4:	2900      	cmp	r1, #0
 800bcb6:	d045      	beq.n	800bd44 <_Control_Event__cdr_deserialize+0x98>
 800bcb8:	4607      	mov	r7, r0
 800bcba:	f002 fbff 	bl	800e4bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	4621      	mov	r1, r4
 800bcc2:	4638      	mov	r0, r7
 800bcc4:	685b      	ldr	r3, [r3, #4]
 800bcc6:	68db      	ldr	r3, [r3, #12]
 800bcc8:	4798      	blx	r3
 800bcca:	4638      	mov	r0, r7
 800bccc:	a901      	add	r1, sp, #4
 800bcce:	f003 f9c3 	bl	800f058 <ucdr_deserialize_uint32_t>
 800bcd2:	9b01      	ldr	r3, [sp, #4]
 800bcd4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d330      	bcc.n	800bd3c <_Control_Event__cdr_deserialize+0x90>
 800bcda:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bcdc:	b193      	cbz	r3, 800bd04 <_Control_Event__cdr_deserialize+0x58>
 800bcde:	2500      	movs	r5, #0
 800bce0:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800bd50 <_Control_Event__cdr_deserialize+0xa4>
 800bce4:	462e      	mov	r6, r5
 800bce6:	e002      	b.n	800bcee <_Control_Event__cdr_deserialize+0x42>
 800bce8:	9b01      	ldr	r3, [sp, #4]
 800bcea:	429e      	cmp	r6, r3
 800bcec:	d20a      	bcs.n	800bd04 <_Control_Event__cdr_deserialize+0x58>
 800bcee:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800bcf0:	4638      	mov	r0, r7
 800bcf2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bcf6:	3601      	adds	r6, #1
 800bcf8:	4429      	add	r1, r5
 800bcfa:	350e      	adds	r5, #14
 800bcfc:	68db      	ldr	r3, [r3, #12]
 800bcfe:	4798      	blx	r3
 800bd00:	2800      	cmp	r0, #0
 800bd02:	d1f1      	bne.n	800bce8 <_Control_Event__cdr_deserialize+0x3c>
 800bd04:	a901      	add	r1, sp, #4
 800bd06:	4638      	mov	r0, r7
 800bd08:	f003 f9a6 	bl	800f058 <ucdr_deserialize_uint32_t>
 800bd0c:	9b01      	ldr	r3, [sp, #4]
 800bd0e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800bd10:	429a      	cmp	r2, r3
 800bd12:	d313      	bcc.n	800bd3c <_Control_Event__cdr_deserialize+0x90>
 800bd14:	63a3      	str	r3, [r4, #56]	; 0x38
 800bd16:	b193      	cbz	r3, 800bd3e <_Control_Event__cdr_deserialize+0x92>
 800bd18:	2500      	movs	r5, #0
 800bd1a:	4e0c      	ldr	r6, [pc, #48]	; (800bd4c <_Control_Event__cdr_deserialize+0xa0>)
 800bd1c:	e002      	b.n	800bd24 <_Control_Event__cdr_deserialize+0x78>
 800bd1e:	9b01      	ldr	r3, [sp, #4]
 800bd20:	429d      	cmp	r5, r3
 800bd22:	d20c      	bcs.n	800bd3e <_Control_Event__cdr_deserialize+0x92>
 800bd24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd26:	4638      	mov	r0, r7
 800bd28:	6873      	ldr	r3, [r6, #4]
 800bd2a:	4429      	add	r1, r5
 800bd2c:	3501      	adds	r5, #1
 800bd2e:	68db      	ldr	r3, [r3, #12]
 800bd30:	4798      	blx	r3
 800bd32:	2800      	cmp	r0, #0
 800bd34:	d1f3      	bne.n	800bd1e <_Control_Event__cdr_deserialize+0x72>
 800bd36:	b002      	add	sp, #8
 800bd38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd3c:	2000      	movs	r0, #0
 800bd3e:	b002      	add	sp, #8
 800bd40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd44:	4608      	mov	r0, r1
 800bd46:	b002      	add	sp, #8
 800bd48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd4c:	200007a0 	.word	0x200007a0
 800bd50:	20000788 	.word	0x20000788

0800bd54 <_Control_Event__cdr_serialize>:
 800bd54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd58:	2800      	cmp	r0, #0
 800bd5a:	d03b      	beq.n	800bdd4 <_Control_Event__cdr_serialize+0x80>
 800bd5c:	4605      	mov	r5, r0
 800bd5e:	460e      	mov	r6, r1
 800bd60:	f002 fbac 	bl	800e4bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800bd64:	4603      	mov	r3, r0
 800bd66:	4631      	mov	r1, r6
 800bd68:	4628      	mov	r0, r5
 800bd6a:	685b      	ldr	r3, [r3, #4]
 800bd6c:	689b      	ldr	r3, [r3, #8]
 800bd6e:	4798      	blx	r3
 800bd70:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 800bd72:	4630      	mov	r0, r6
 800bd74:	4639      	mov	r1, r7
 800bd76:	f003 f83f 	bl	800edf8 <ucdr_serialize_uint32_t>
 800bd7a:	b198      	cbz	r0, 800bda4 <_Control_Event__cdr_serialize+0x50>
 800bd7c:	b197      	cbz	r7, 800bda4 <_Control_Event__cdr_serialize+0x50>
 800bd7e:	2400      	movs	r4, #0
 800bd80:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800bde0 <_Control_Event__cdr_serialize+0x8c>
 800bd84:	e001      	b.n	800bd8a <_Control_Event__cdr_serialize+0x36>
 800bd86:	42a7      	cmp	r7, r4
 800bd88:	d00c      	beq.n	800bda4 <_Control_Event__cdr_serialize+0x50>
 800bd8a:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 800bd8e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800bd90:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bd94:	4631      	mov	r1, r6
 800bd96:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800bd9a:	3401      	adds	r4, #1
 800bd9c:	689b      	ldr	r3, [r3, #8]
 800bd9e:	4798      	blx	r3
 800bda0:	2800      	cmp	r0, #0
 800bda2:	d1f0      	bne.n	800bd86 <_Control_Event__cdr_serialize+0x32>
 800bda4:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800bda6:	4630      	mov	r0, r6
 800bda8:	4639      	mov	r1, r7
 800bdaa:	f003 f825 	bl	800edf8 <ucdr_serialize_uint32_t>
 800bdae:	4680      	mov	r8, r0
 800bdb0:	b180      	cbz	r0, 800bdd4 <_Control_Event__cdr_serialize+0x80>
 800bdb2:	b18f      	cbz	r7, 800bdd8 <_Control_Event__cdr_serialize+0x84>
 800bdb4:	2400      	movs	r4, #0
 800bdb6:	f8df 902c 	ldr.w	r9, [pc, #44]	; 800bde4 <_Control_Event__cdr_serialize+0x90>
 800bdba:	e001      	b.n	800bdc0 <_Control_Event__cdr_serialize+0x6c>
 800bdbc:	42a7      	cmp	r7, r4
 800bdbe:	d00b      	beq.n	800bdd8 <_Control_Event__cdr_serialize+0x84>
 800bdc0:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800bdc2:	4631      	mov	r1, r6
 800bdc4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800bdc8:	4420      	add	r0, r4
 800bdca:	3401      	adds	r4, #1
 800bdcc:	689b      	ldr	r3, [r3, #8]
 800bdce:	4798      	blx	r3
 800bdd0:	2800      	cmp	r0, #0
 800bdd2:	d1f3      	bne.n	800bdbc <_Control_Event__cdr_serialize+0x68>
 800bdd4:	f04f 0800 	mov.w	r8, #0
 800bdd8:	4640      	mov	r0, r8
 800bdda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdde:	bf00      	nop
 800bde0:	20000788 	.word	0x20000788
 800bde4:	200007a0 	.word	0x200007a0

0800bde8 <_Control_Response__get_serialized_size>:
 800bde8:	b130      	cbz	r0, 800bdf8 <_Control_Response__get_serialized_size+0x10>
 800bdea:	2101      	movs	r1, #1
 800bdec:	2000      	movs	r0, #0
 800bdee:	b508      	push	{r3, lr}
 800bdf0:	f004 f950 	bl	8010094 <ucdr_alignment>
 800bdf4:	3001      	adds	r0, #1
 800bdf6:	bd08      	pop	{r3, pc}
 800bdf8:	4770      	bx	lr
 800bdfa:	bf00      	nop

0800bdfc <_Control_Request__get_serialized_size>:
 800bdfc:	b190      	cbz	r0, 800be24 <_Control_Request__get_serialized_size+0x28>
 800bdfe:	2101      	movs	r1, #1
 800be00:	2000      	movs	r0, #0
 800be02:	b510      	push	{r4, lr}
 800be04:	f004 f946 	bl	8010094 <ucdr_alignment>
 800be08:	2101      	movs	r1, #1
 800be0a:	1844      	adds	r4, r0, r1
 800be0c:	4620      	mov	r0, r4
 800be0e:	f004 f941 	bl	8010094 <ucdr_alignment>
 800be12:	3001      	adds	r0, #1
 800be14:	2102      	movs	r1, #2
 800be16:	4404      	add	r4, r0
 800be18:	4620      	mov	r0, r4
 800be1a:	f004 f93b 	bl	8010094 <ucdr_alignment>
 800be1e:	300c      	adds	r0, #12
 800be20:	4420      	add	r0, r4
 800be22:	bd10      	pop	{r4, pc}
 800be24:	4770      	bx	lr
 800be26:	bf00      	nop

0800be28 <_Control_Request__max_serialized_size>:
 800be28:	b538      	push	{r3, r4, r5, lr}
 800be2a:	2101      	movs	r1, #1
 800be2c:	2000      	movs	r0, #0
 800be2e:	f004 f931 	bl	8010094 <ucdr_alignment>
 800be32:	2101      	movs	r1, #1
 800be34:	1845      	adds	r5, r0, r1
 800be36:	4628      	mov	r0, r5
 800be38:	f004 f92c 	bl	8010094 <ucdr_alignment>
 800be3c:	1c44      	adds	r4, r0, #1
 800be3e:	2102      	movs	r1, #2
 800be40:	442c      	add	r4, r5
 800be42:	4620      	mov	r0, r4
 800be44:	f004 f926 	bl	8010094 <ucdr_alignment>
 800be48:	300c      	adds	r0, #12
 800be4a:	4420      	add	r0, r4
 800be4c:	bd38      	pop	{r3, r4, r5, pc}
 800be4e:	bf00      	nop

0800be50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Event>:
 800be50:	4800      	ldr	r0, [pc, #0]	; (800be54 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x4>)
 800be52:	4770      	bx	lr
 800be54:	20000770 	.word	0x20000770

0800be58 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Control>:
 800be58:	4800      	ldr	r0, [pc, #0]	; (800be5c <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Control+0x4>)
 800be5a:	4770      	bx	lr
 800be5c:	20000744 	.word	0x20000744

0800be60 <get_serialized_size_racs_services__msg__Feedback>:
 800be60:	b180      	cbz	r0, 800be84 <get_serialized_size_racs_services__msg__Feedback+0x24>
 800be62:	b538      	push	{r3, r4, r5, lr}
 800be64:	460d      	mov	r5, r1
 800be66:	2101      	movs	r1, #1
 800be68:	4628      	mov	r0, r5
 800be6a:	f004 f913 	bl	8010094 <ucdr_alignment>
 800be6e:	1c6b      	adds	r3, r5, #1
 800be70:	f1c5 050c 	rsb	r5, r5, #12
 800be74:	2102      	movs	r1, #2
 800be76:	181c      	adds	r4, r3, r0
 800be78:	4620      	mov	r0, r4
 800be7a:	f004 f90b 	bl	8010094 <ucdr_alignment>
 800be7e:	4428      	add	r0, r5
 800be80:	4420      	add	r0, r4
 800be82:	bd38      	pop	{r3, r4, r5, pc}
 800be84:	4770      	bx	lr
 800be86:	bf00      	nop

0800be88 <_Feedback__cdr_deserialize>:
 800be88:	b538      	push	{r3, r4, r5, lr}
 800be8a:	460c      	mov	r4, r1
 800be8c:	b149      	cbz	r1, 800bea2 <_Feedback__cdr_deserialize+0x1a>
 800be8e:	4605      	mov	r5, r0
 800be90:	f002 fdb2 	bl	800e9f8 <ucdr_deserialize_uint8_t>
 800be94:	1ca1      	adds	r1, r4, #2
 800be96:	2206      	movs	r2, #6
 800be98:	4628      	mov	r0, r5
 800be9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be9e:	f002 bd13 	b.w	800e8c8 <ucdr_deserialize_array_int16_t>
 800bea2:	4608      	mov	r0, r1
 800bea4:	bd38      	pop	{r3, r4, r5, pc}
 800bea6:	bf00      	nop

0800bea8 <_Feedback__cdr_serialize>:
 800bea8:	b170      	cbz	r0, 800bec8 <_Feedback__cdr_serialize+0x20>
 800beaa:	b538      	push	{r3, r4, r5, lr}
 800beac:	4604      	mov	r4, r0
 800beae:	460d      	mov	r5, r1
 800beb0:	4608      	mov	r0, r1
 800beb2:	f814 1b02 	ldrb.w	r1, [r4], #2
 800beb6:	f002 fd89 	bl	800e9cc <ucdr_serialize_uint8_t>
 800beba:	4628      	mov	r0, r5
 800bebc:	4621      	mov	r1, r4
 800bebe:	2206      	movs	r2, #6
 800bec0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bec4:	f002 bcaa 	b.w	800e81c <ucdr_serialize_array_int16_t>
 800bec8:	4770      	bx	lr
 800beca:	bf00      	nop

0800becc <_Feedback__get_serialized_size>:
 800becc:	b160      	cbz	r0, 800bee8 <_Feedback__get_serialized_size+0x1c>
 800bece:	2101      	movs	r1, #1
 800bed0:	2000      	movs	r0, #0
 800bed2:	b510      	push	{r4, lr}
 800bed4:	f004 f8de 	bl	8010094 <ucdr_alignment>
 800bed8:	1c44      	adds	r4, r0, #1
 800beda:	2102      	movs	r1, #2
 800bedc:	4620      	mov	r0, r4
 800bede:	f004 f8d9 	bl	8010094 <ucdr_alignment>
 800bee2:	300c      	adds	r0, #12
 800bee4:	4420      	add	r0, r4
 800bee6:	bd10      	pop	{r4, pc}
 800bee8:	4770      	bx	lr
 800beea:	bf00      	nop

0800beec <_Feedback__max_serialized_size>:
 800beec:	b510      	push	{r4, lr}
 800beee:	2101      	movs	r1, #1
 800bef0:	2000      	movs	r0, #0
 800bef2:	f004 f8cf 	bl	8010094 <ucdr_alignment>
 800bef6:	1c44      	adds	r4, r0, #1
 800bef8:	2102      	movs	r1, #2
 800befa:	4620      	mov	r0, r4
 800befc:	f004 f8ca 	bl	8010094 <ucdr_alignment>
 800bf00:	300c      	adds	r0, #12
 800bf02:	4420      	add	r0, r4
 800bf04:	bd10      	pop	{r4, pc}
 800bf06:	bf00      	nop

0800bf08 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__Feedback>:
 800bf08:	4800      	ldr	r0, [pc, #0]	; (800bf0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__Feedback+0x4>)
 800bf0a:	4770      	bx	lr
 800bf0c:	2000080c 	.word	0x2000080c

0800bf10 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Request>:
 800bf10:	4800      	ldr	r0, [pc, #0]	; (800bf14 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x4>)
 800bf12:	4770      	bx	lr
 800bf14:	20000894 	.word	0x20000894

0800bf18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Response>:
 800bf18:	4800      	ldr	r0, [pc, #0]	; (800bf1c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x4>)
 800bf1a:	4770      	bx	lr
 800bf1c:	200008ac 	.word	0x200008ac

0800bf20 <_Setup_Response__max_serialized_size>:
 800bf20:	2101      	movs	r1, #1
 800bf22:	2000      	movs	r0, #0
 800bf24:	b508      	push	{r3, lr}
 800bf26:	f004 f8b5 	bl	8010094 <ucdr_alignment>
 800bf2a:	3001      	adds	r0, #1
 800bf2c:	bd08      	pop	{r3, pc}
 800bf2e:	bf00      	nop

0800bf30 <_Setup_Response__cdr_deserialize>:
 800bf30:	b109      	cbz	r1, 800bf36 <_Setup_Response__cdr_deserialize+0x6>
 800bf32:	f002 bd61 	b.w	800e9f8 <ucdr_deserialize_uint8_t>
 800bf36:	4608      	mov	r0, r1
 800bf38:	4770      	bx	lr
 800bf3a:	bf00      	nop

0800bf3c <_Setup_Event__max_serialized_size>:
 800bf3c:	b500      	push	{lr}
 800bf3e:	b083      	sub	sp, #12
 800bf40:	2301      	movs	r3, #1
 800bf42:	2100      	movs	r1, #0
 800bf44:	f10d 0007 	add.w	r0, sp, #7
 800bf48:	f88d 3007 	strb.w	r3, [sp, #7]
 800bf4c:	f002 fa90 	bl	800e470 <max_serialized_size_service_msgs__msg__ServiceEventInfo>
 800bf50:	b003      	add	sp, #12
 800bf52:	f85d fb04 	ldr.w	pc, [sp], #4
 800bf56:	bf00      	nop

0800bf58 <get_serialized_size_racs_services__srv__Setup_Request.part.0>:
 800bf58:	b570      	push	{r4, r5, r6, lr}
 800bf5a:	4604      	mov	r4, r0
 800bf5c:	2101      	movs	r1, #1
 800bf5e:	f004 f899 	bl	8010094 <ucdr_alignment>
 800bf62:	2104      	movs	r1, #4
 800bf64:	1c65      	adds	r5, r4, #1
 800bf66:	f1c4 0404 	rsb	r4, r4, #4
 800bf6a:	4405      	add	r5, r0
 800bf6c:	4628      	mov	r0, r5
 800bf6e:	f004 f891 	bl	8010094 <ucdr_alignment>
 800bf72:	2104      	movs	r1, #4
 800bf74:	1846      	adds	r6, r0, r1
 800bf76:	442e      	add	r6, r5
 800bf78:	4630      	mov	r0, r6
 800bf7a:	f004 f88b 	bl	8010094 <ucdr_alignment>
 800bf7e:	2104      	movs	r1, #4
 800bf80:	1845      	adds	r5, r0, r1
 800bf82:	442e      	add	r6, r5
 800bf84:	4630      	mov	r0, r6
 800bf86:	f004 f885 	bl	8010094 <ucdr_alignment>
 800bf8a:	2104      	movs	r1, #4
 800bf8c:	4408      	add	r0, r1
 800bf8e:	4406      	add	r6, r0
 800bf90:	4630      	mov	r0, r6
 800bf92:	f004 f87f 	bl	8010094 <ucdr_alignment>
 800bf96:	2104      	movs	r1, #4
 800bf98:	1845      	adds	r5, r0, r1
 800bf9a:	4435      	add	r5, r6
 800bf9c:	4628      	mov	r0, r5
 800bf9e:	f004 f879 	bl	8010094 <ucdr_alignment>
 800bfa2:	2104      	movs	r1, #4
 800bfa4:	4408      	add	r0, r1
 800bfa6:	4405      	add	r5, r0
 800bfa8:	4628      	mov	r0, r5
 800bfaa:	f004 f873 	bl	8010094 <ucdr_alignment>
 800bfae:	4420      	add	r0, r4
 800bfb0:	4428      	add	r0, r5
 800bfb2:	bd70      	pop	{r4, r5, r6, pc}

0800bfb4 <get_serialized_size_racs_services__srv__Setup_Request>:
 800bfb4:	b110      	cbz	r0, 800bfbc <get_serialized_size_racs_services__srv__Setup_Request+0x8>
 800bfb6:	4608      	mov	r0, r1
 800bfb8:	f7ff bfce 	b.w	800bf58 <get_serialized_size_racs_services__srv__Setup_Request.part.0>
 800bfbc:	4770      	bx	lr
 800bfbe:	bf00      	nop

0800bfc0 <_Setup_Request__get_serialized_size>:
 800bfc0:	b110      	cbz	r0, 800bfc8 <_Setup_Request__get_serialized_size+0x8>
 800bfc2:	2000      	movs	r0, #0
 800bfc4:	f7ff bfc8 	b.w	800bf58 <get_serialized_size_racs_services__srv__Setup_Request.part.0>
 800bfc8:	4770      	bx	lr
 800bfca:	bf00      	nop

0800bfcc <get_serialized_size_racs_services__srv__Setup_Response>:
 800bfcc:	b138      	cbz	r0, 800bfde <get_serialized_size_racs_services__srv__Setup_Response+0x12>
 800bfce:	b508      	push	{r3, lr}
 800bfd0:	460b      	mov	r3, r1
 800bfd2:	2101      	movs	r1, #1
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f004 f85d 	bl	8010094 <ucdr_alignment>
 800bfda:	3001      	adds	r0, #1
 800bfdc:	bd08      	pop	{r3, pc}
 800bfde:	4770      	bx	lr

0800bfe0 <_Setup_Request__cdr_deserialize>:
 800bfe0:	b538      	push	{r3, r4, r5, lr}
 800bfe2:	460c      	mov	r4, r1
 800bfe4:	b309      	cbz	r1, 800c02a <_Setup_Request__cdr_deserialize+0x4a>
 800bfe6:	4605      	mov	r5, r0
 800bfe8:	f002 fd06 	bl	800e9f8 <ucdr_deserialize_uint8_t>
 800bfec:	1d21      	adds	r1, r4, #4
 800bfee:	4628      	mov	r0, r5
 800bff0:	f003 ff68 	bl	800fec4 <ucdr_deserialize_float>
 800bff4:	f104 0108 	add.w	r1, r4, #8
 800bff8:	4628      	mov	r0, r5
 800bffa:	f003 ff63 	bl	800fec4 <ucdr_deserialize_float>
 800bffe:	f104 010c 	add.w	r1, r4, #12
 800c002:	4628      	mov	r0, r5
 800c004:	f003 ff5e 	bl	800fec4 <ucdr_deserialize_float>
 800c008:	f104 0110 	add.w	r1, r4, #16
 800c00c:	4628      	mov	r0, r5
 800c00e:	f003 ff59 	bl	800fec4 <ucdr_deserialize_float>
 800c012:	f104 0114 	add.w	r1, r4, #20
 800c016:	4628      	mov	r0, r5
 800c018:	f003 ff54 	bl	800fec4 <ucdr_deserialize_float>
 800c01c:	f104 0118 	add.w	r1, r4, #24
 800c020:	4628      	mov	r0, r5
 800c022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c026:	f003 bf4d 	b.w	800fec4 <ucdr_deserialize_float>
 800c02a:	4608      	mov	r0, r1
 800c02c:	bd38      	pop	{r3, r4, r5, pc}
 800c02e:	bf00      	nop

0800c030 <_Setup_Response__cdr_serialize>:
 800c030:	460a      	mov	r2, r1
 800c032:	b118      	cbz	r0, 800c03c <_Setup_Response__cdr_serialize+0xc>
 800c034:	7801      	ldrb	r1, [r0, #0]
 800c036:	4610      	mov	r0, r2
 800c038:	f002 bcc8 	b.w	800e9cc <ucdr_serialize_uint8_t>
 800c03c:	4770      	bx	lr
 800c03e:	bf00      	nop

0800c040 <_Setup_Request__cdr_serialize>:
 800c040:	b330      	cbz	r0, 800c090 <_Setup_Request__cdr_serialize+0x50>
 800c042:	b538      	push	{r3, r4, r5, lr}
 800c044:	460d      	mov	r5, r1
 800c046:	4604      	mov	r4, r0
 800c048:	7801      	ldrb	r1, [r0, #0]
 800c04a:	4628      	mov	r0, r5
 800c04c:	f002 fcbe 	bl	800e9cc <ucdr_serialize_uint8_t>
 800c050:	ed94 0a01 	vldr	s0, [r4, #4]
 800c054:	4628      	mov	r0, r5
 800c056:	f003 fe9d 	bl	800fd94 <ucdr_serialize_float>
 800c05a:	ed94 0a02 	vldr	s0, [r4, #8]
 800c05e:	4628      	mov	r0, r5
 800c060:	f003 fe98 	bl	800fd94 <ucdr_serialize_float>
 800c064:	ed94 0a03 	vldr	s0, [r4, #12]
 800c068:	4628      	mov	r0, r5
 800c06a:	f003 fe93 	bl	800fd94 <ucdr_serialize_float>
 800c06e:	ed94 0a04 	vldr	s0, [r4, #16]
 800c072:	4628      	mov	r0, r5
 800c074:	f003 fe8e 	bl	800fd94 <ucdr_serialize_float>
 800c078:	ed94 0a05 	vldr	s0, [r4, #20]
 800c07c:	4628      	mov	r0, r5
 800c07e:	f003 fe89 	bl	800fd94 <ucdr_serialize_float>
 800c082:	ed94 0a06 	vldr	s0, [r4, #24]
 800c086:	4628      	mov	r0, r5
 800c088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c08c:	f003 be82 	b.w	800fd94 <ucdr_serialize_float>
 800c090:	4770      	bx	lr
 800c092:	bf00      	nop

0800c094 <get_serialized_size_racs_services__srv__Setup_Event.part.0>:
 800c094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c098:	460e      	mov	r6, r1
 800c09a:	4605      	mov	r5, r0
 800c09c:	f002 f94e 	bl	800e33c <get_serialized_size_service_msgs__msg__ServiceEventInfo>
 800c0a0:	2104      	movs	r1, #4
 800c0a2:	eb06 0800 	add.w	r8, r6, r0
 800c0a6:	f8d5 902c 	ldr.w	r9, [r5, #44]	; 0x2c
 800c0aa:	4640      	mov	r0, r8
 800c0ac:	f003 fff2 	bl	8010094 <ucdr_alignment>
 800c0b0:	3004      	adds	r0, #4
 800c0b2:	4480      	add	r8, r0
 800c0b4:	f1b9 0f00 	cmp.w	r9, #0
 800c0b8:	d019      	beq.n	800c0ee <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x5a>
 800c0ba:	2700      	movs	r7, #0
 800c0bc:	f8df a07c 	ldr.w	sl, [pc, #124]	; 800c13c <get_serialized_size_racs_services__srv__Setup_Event.part.0+0xa8>
 800c0c0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800c0c2:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
 800c0c6:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c0ca:	4641      	mov	r1, r8
 800c0cc:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800c0d0:	3701      	adds	r7, #1
 800c0d2:	695b      	ldr	r3, [r3, #20]
 800c0d4:	4798      	blx	r3
 800c0d6:	4604      	mov	r4, r0
 800c0d8:	4640      	mov	r0, r8
 800c0da:	2c04      	cmp	r4, #4
 800c0dc:	4621      	mov	r1, r4
 800c0de:	bf28      	it	cs
 800c0e0:	2104      	movcs	r1, #4
 800c0e2:	f003 ffd7 	bl	8010094 <ucdr_alignment>
 800c0e6:	45b9      	cmp	r9, r7
 800c0e8:	4420      	add	r0, r4
 800c0ea:	4480      	add	r8, r0
 800c0ec:	d1e8      	bne.n	800c0c0 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x2c>
 800c0ee:	4640      	mov	r0, r8
 800c0f0:	2104      	movs	r1, #4
 800c0f2:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800c0f4:	f003 ffce 	bl	8010094 <ucdr_alignment>
 800c0f8:	4480      	add	r8, r0
 800c0fa:	f108 0804 	add.w	r8, r8, #4
 800c0fe:	b1c7      	cbz	r7, 800c132 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x9e>
 800c100:	f04f 0900 	mov.w	r9, #0
 800c104:	f8df a038 	ldr.w	sl, [pc, #56]	; 800c140 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0xac>
 800c108:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800c10a:	4641      	mov	r1, r8
 800c10c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c110:	4448      	add	r0, r9
 800c112:	f109 0901 	add.w	r9, r9, #1
 800c116:	695b      	ldr	r3, [r3, #20]
 800c118:	4798      	blx	r3
 800c11a:	4604      	mov	r4, r0
 800c11c:	4640      	mov	r0, r8
 800c11e:	2c04      	cmp	r4, #4
 800c120:	4621      	mov	r1, r4
 800c122:	bf28      	it	cs
 800c124:	2104      	movcs	r1, #4
 800c126:	f003 ffb5 	bl	8010094 <ucdr_alignment>
 800c12a:	454f      	cmp	r7, r9
 800c12c:	4420      	add	r0, r4
 800c12e:	4480      	add	r8, r0
 800c130:	d1ea      	bne.n	800c108 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x74>
 800c132:	eba8 0006 	sub.w	r0, r8, r6
 800c136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c13a:	bf00      	nop
 800c13c:	20000894 	.word	0x20000894
 800c140:	200008ac 	.word	0x200008ac

0800c144 <get_serialized_size_racs_services__srv__Setup_Event>:
 800c144:	b108      	cbz	r0, 800c14a <get_serialized_size_racs_services__srv__Setup_Event+0x6>
 800c146:	f7ff bfa5 	b.w	800c094 <get_serialized_size_racs_services__srv__Setup_Event.part.0>
 800c14a:	4770      	bx	lr

0800c14c <_Setup_Event__get_serialized_size>:
 800c14c:	b110      	cbz	r0, 800c154 <_Setup_Event__get_serialized_size+0x8>
 800c14e:	2100      	movs	r1, #0
 800c150:	f7ff bfa0 	b.w	800c094 <get_serialized_size_racs_services__srv__Setup_Event.part.0>
 800c154:	4770      	bx	lr
 800c156:	bf00      	nop

0800c158 <_Setup_Event__cdr_deserialize>:
 800c158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c15c:	460c      	mov	r4, r1
 800c15e:	b082      	sub	sp, #8
 800c160:	2900      	cmp	r1, #0
 800c162:	d045      	beq.n	800c1f0 <_Setup_Event__cdr_deserialize+0x98>
 800c164:	4607      	mov	r7, r0
 800c166:	f002 f9a9 	bl	800e4bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800c16a:	4603      	mov	r3, r0
 800c16c:	4621      	mov	r1, r4
 800c16e:	4638      	mov	r0, r7
 800c170:	685b      	ldr	r3, [r3, #4]
 800c172:	68db      	ldr	r3, [r3, #12]
 800c174:	4798      	blx	r3
 800c176:	4638      	mov	r0, r7
 800c178:	a901      	add	r1, sp, #4
 800c17a:	f002 ff6d 	bl	800f058 <ucdr_deserialize_uint32_t>
 800c17e:	9b01      	ldr	r3, [sp, #4]
 800c180:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800c182:	429a      	cmp	r2, r3
 800c184:	d330      	bcc.n	800c1e8 <_Setup_Event__cdr_deserialize+0x90>
 800c186:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c188:	b193      	cbz	r3, 800c1b0 <_Setup_Event__cdr_deserialize+0x58>
 800c18a:	2500      	movs	r5, #0
 800c18c:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800c1fc <_Setup_Event__cdr_deserialize+0xa4>
 800c190:	462e      	mov	r6, r5
 800c192:	e002      	b.n	800c19a <_Setup_Event__cdr_deserialize+0x42>
 800c194:	9b01      	ldr	r3, [sp, #4]
 800c196:	429e      	cmp	r6, r3
 800c198:	d20a      	bcs.n	800c1b0 <_Setup_Event__cdr_deserialize+0x58>
 800c19a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800c19c:	4638      	mov	r0, r7
 800c19e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c1a2:	3601      	adds	r6, #1
 800c1a4:	4429      	add	r1, r5
 800c1a6:	351c      	adds	r5, #28
 800c1a8:	68db      	ldr	r3, [r3, #12]
 800c1aa:	4798      	blx	r3
 800c1ac:	2800      	cmp	r0, #0
 800c1ae:	d1f1      	bne.n	800c194 <_Setup_Event__cdr_deserialize+0x3c>
 800c1b0:	a901      	add	r1, sp, #4
 800c1b2:	4638      	mov	r0, r7
 800c1b4:	f002 ff50 	bl	800f058 <ucdr_deserialize_uint32_t>
 800c1b8:	9b01      	ldr	r3, [sp, #4]
 800c1ba:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	d313      	bcc.n	800c1e8 <_Setup_Event__cdr_deserialize+0x90>
 800c1c0:	63a3      	str	r3, [r4, #56]	; 0x38
 800c1c2:	b193      	cbz	r3, 800c1ea <_Setup_Event__cdr_deserialize+0x92>
 800c1c4:	2500      	movs	r5, #0
 800c1c6:	4e0c      	ldr	r6, [pc, #48]	; (800c1f8 <_Setup_Event__cdr_deserialize+0xa0>)
 800c1c8:	e002      	b.n	800c1d0 <_Setup_Event__cdr_deserialize+0x78>
 800c1ca:	9b01      	ldr	r3, [sp, #4]
 800c1cc:	429d      	cmp	r5, r3
 800c1ce:	d20c      	bcs.n	800c1ea <_Setup_Event__cdr_deserialize+0x92>
 800c1d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c1d2:	4638      	mov	r0, r7
 800c1d4:	6873      	ldr	r3, [r6, #4]
 800c1d6:	4429      	add	r1, r5
 800c1d8:	3501      	adds	r5, #1
 800c1da:	68db      	ldr	r3, [r3, #12]
 800c1dc:	4798      	blx	r3
 800c1de:	2800      	cmp	r0, #0
 800c1e0:	d1f3      	bne.n	800c1ca <_Setup_Event__cdr_deserialize+0x72>
 800c1e2:	b002      	add	sp, #8
 800c1e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1e8:	2000      	movs	r0, #0
 800c1ea:	b002      	add	sp, #8
 800c1ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1f0:	4608      	mov	r0, r1
 800c1f2:	b002      	add	sp, #8
 800c1f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1f8:	200008ac 	.word	0x200008ac
 800c1fc:	20000894 	.word	0x20000894

0800c200 <_Setup_Event__cdr_serialize>:
 800c200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c204:	2800      	cmp	r0, #0
 800c206:	d03b      	beq.n	800c280 <_Setup_Event__cdr_serialize+0x80>
 800c208:	4605      	mov	r5, r0
 800c20a:	460e      	mov	r6, r1
 800c20c:	f002 f956 	bl	800e4bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800c210:	4603      	mov	r3, r0
 800c212:	4631      	mov	r1, r6
 800c214:	4628      	mov	r0, r5
 800c216:	685b      	ldr	r3, [r3, #4]
 800c218:	689b      	ldr	r3, [r3, #8]
 800c21a:	4798      	blx	r3
 800c21c:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 800c21e:	4630      	mov	r0, r6
 800c220:	4639      	mov	r1, r7
 800c222:	f002 fde9 	bl	800edf8 <ucdr_serialize_uint32_t>
 800c226:	b198      	cbz	r0, 800c250 <_Setup_Event__cdr_serialize+0x50>
 800c228:	b197      	cbz	r7, 800c250 <_Setup_Event__cdr_serialize+0x50>
 800c22a:	2400      	movs	r4, #0
 800c22c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800c28c <_Setup_Event__cdr_serialize+0x8c>
 800c230:	e001      	b.n	800c236 <_Setup_Event__cdr_serialize+0x36>
 800c232:	42a7      	cmp	r7, r4
 800c234:	d00c      	beq.n	800c250 <_Setup_Event__cdr_serialize+0x50>
 800c236:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 800c23a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800c23c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c240:	4631      	mov	r1, r6
 800c242:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800c246:	3401      	adds	r4, #1
 800c248:	689b      	ldr	r3, [r3, #8]
 800c24a:	4798      	blx	r3
 800c24c:	2800      	cmp	r0, #0
 800c24e:	d1f0      	bne.n	800c232 <_Setup_Event__cdr_serialize+0x32>
 800c250:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800c252:	4630      	mov	r0, r6
 800c254:	4639      	mov	r1, r7
 800c256:	f002 fdcf 	bl	800edf8 <ucdr_serialize_uint32_t>
 800c25a:	4680      	mov	r8, r0
 800c25c:	b180      	cbz	r0, 800c280 <_Setup_Event__cdr_serialize+0x80>
 800c25e:	b18f      	cbz	r7, 800c284 <_Setup_Event__cdr_serialize+0x84>
 800c260:	2400      	movs	r4, #0
 800c262:	f8df 902c 	ldr.w	r9, [pc, #44]	; 800c290 <_Setup_Event__cdr_serialize+0x90>
 800c266:	e001      	b.n	800c26c <_Setup_Event__cdr_serialize+0x6c>
 800c268:	42a7      	cmp	r7, r4
 800c26a:	d00b      	beq.n	800c284 <_Setup_Event__cdr_serialize+0x84>
 800c26c:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800c26e:	4631      	mov	r1, r6
 800c270:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c274:	4420      	add	r0, r4
 800c276:	3401      	adds	r4, #1
 800c278:	689b      	ldr	r3, [r3, #8]
 800c27a:	4798      	blx	r3
 800c27c:	2800      	cmp	r0, #0
 800c27e:	d1f3      	bne.n	800c268 <_Setup_Event__cdr_serialize+0x68>
 800c280:	f04f 0800 	mov.w	r8, #0
 800c284:	4640      	mov	r0, r8
 800c286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c28a:	bf00      	nop
 800c28c:	20000894 	.word	0x20000894
 800c290:	200008ac 	.word	0x200008ac

0800c294 <_Setup_Response__get_serialized_size>:
 800c294:	b130      	cbz	r0, 800c2a4 <_Setup_Response__get_serialized_size+0x10>
 800c296:	2101      	movs	r1, #1
 800c298:	2000      	movs	r0, #0
 800c29a:	b508      	push	{r3, lr}
 800c29c:	f003 fefa 	bl	8010094 <ucdr_alignment>
 800c2a0:	3001      	adds	r0, #1
 800c2a2:	bd08      	pop	{r3, pc}
 800c2a4:	4770      	bx	lr
 800c2a6:	bf00      	nop

0800c2a8 <max_serialized_size_racs_services__srv__Setup_Request>:
 800c2a8:	b570      	push	{r4, r5, r6, lr}
 800c2aa:	460c      	mov	r4, r1
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	1c65      	adds	r5, r4, #1
 800c2b0:	4619      	mov	r1, r3
 800c2b2:	7003      	strb	r3, [r0, #0]
 800c2b4:	4620      	mov	r0, r4
 800c2b6:	f003 feed 	bl	8010094 <ucdr_alignment>
 800c2ba:	4405      	add	r5, r0
 800c2bc:	2104      	movs	r1, #4
 800c2be:	f1c4 0404 	rsb	r4, r4, #4
 800c2c2:	4628      	mov	r0, r5
 800c2c4:	f003 fee6 	bl	8010094 <ucdr_alignment>
 800c2c8:	2104      	movs	r1, #4
 800c2ca:	1846      	adds	r6, r0, r1
 800c2cc:	442e      	add	r6, r5
 800c2ce:	4630      	mov	r0, r6
 800c2d0:	f003 fee0 	bl	8010094 <ucdr_alignment>
 800c2d4:	2104      	movs	r1, #4
 800c2d6:	1845      	adds	r5, r0, r1
 800c2d8:	442e      	add	r6, r5
 800c2da:	4630      	mov	r0, r6
 800c2dc:	f003 feda 	bl	8010094 <ucdr_alignment>
 800c2e0:	2104      	movs	r1, #4
 800c2e2:	4408      	add	r0, r1
 800c2e4:	4406      	add	r6, r0
 800c2e6:	4630      	mov	r0, r6
 800c2e8:	f003 fed4 	bl	8010094 <ucdr_alignment>
 800c2ec:	2104      	movs	r1, #4
 800c2ee:	1845      	adds	r5, r0, r1
 800c2f0:	4435      	add	r5, r6
 800c2f2:	4628      	mov	r0, r5
 800c2f4:	f003 fece 	bl	8010094 <ucdr_alignment>
 800c2f8:	2104      	movs	r1, #4
 800c2fa:	4408      	add	r0, r1
 800c2fc:	4405      	add	r5, r0
 800c2fe:	4628      	mov	r0, r5
 800c300:	f003 fec8 	bl	8010094 <ucdr_alignment>
 800c304:	4420      	add	r0, r4
 800c306:	4428      	add	r0, r5
 800c308:	bd70      	pop	{r4, r5, r6, pc}
 800c30a:	bf00      	nop

0800c30c <_Setup_Request__max_serialized_size>:
 800c30c:	b500      	push	{lr}
 800c30e:	b083      	sub	sp, #12
 800c310:	2100      	movs	r1, #0
 800c312:	f10d 0007 	add.w	r0, sp, #7
 800c316:	f7ff ffc7 	bl	800c2a8 <max_serialized_size_racs_services__srv__Setup_Request>
 800c31a:	b003      	add	sp, #12
 800c31c:	f85d fb04 	ldr.w	pc, [sp], #4

0800c320 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Event>:
 800c320:	4800      	ldr	r0, [pc, #0]	; (800c324 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x4>)
 800c322:	4770      	bx	lr
 800c324:	2000087c 	.word	0x2000087c

0800c328 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Setup>:
 800c328:	4800      	ldr	r0, [pc, #0]	; (800c32c <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Setup+0x4>)
 800c32a:	4770      	bx	lr
 800c32c:	20000850 	.word	0x20000850

0800c330 <rcl_get_zero_initialized_publisher>:
 800c330:	4b01      	ldr	r3, [pc, #4]	; (800c338 <rcl_get_zero_initialized_publisher+0x8>)
 800c332:	6818      	ldr	r0, [r3, #0]
 800c334:	4770      	bx	lr
 800c336:	bf00      	nop
 800c338:	0801d3e0 	.word	0x0801d3e0

0800c33c <rcl_publisher_init>:
 800c33c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c340:	b088      	sub	sp, #32
 800c342:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800c344:	2e00      	cmp	r6, #0
 800c346:	d06c      	beq.n	800c422 <rcl_publisher_init+0xe6>
 800c348:	f106 0a50 	add.w	sl, r6, #80	; 0x50
 800c34c:	4605      	mov	r5, r0
 800c34e:	460f      	mov	r7, r1
 800c350:	4690      	mov	r8, r2
 800c352:	4650      	mov	r0, sl
 800c354:	4699      	mov	r9, r3
 800c356:	f001 f8f5 	bl	800d544 <rcutils_allocator_is_valid>
 800c35a:	f080 0401 	eor.w	r4, r0, #1
 800c35e:	b2e4      	uxtb	r4, r4
 800c360:	2c00      	cmp	r4, #0
 800c362:	d15e      	bne.n	800c422 <rcl_publisher_init+0xe6>
 800c364:	2d00      	cmp	r5, #0
 800c366:	d05c      	beq.n	800c422 <rcl_publisher_init+0xe6>
 800c368:	682b      	ldr	r3, [r5, #0]
 800c36a:	b123      	cbz	r3, 800c376 <rcl_publisher_init+0x3a>
 800c36c:	2464      	movs	r4, #100	; 0x64
 800c36e:	4620      	mov	r0, r4
 800c370:	b008      	add	sp, #32
 800c372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c376:	4638      	mov	r0, r7
 800c378:	f007 ffba 	bl	80142f0 <rcl_node_is_valid>
 800c37c:	2800      	cmp	r0, #0
 800c37e:	d055      	beq.n	800c42c <rcl_publisher_init+0xf0>
 800c380:	f1b8 0f00 	cmp.w	r8, #0
 800c384:	d04d      	beq.n	800c422 <rcl_publisher_init+0xe6>
 800c386:	fab9 f389 	clz	r3, r9
 800c38a:	095b      	lsrs	r3, r3, #5
 800c38c:	f1b9 0f00 	cmp.w	r9, #0
 800c390:	d047      	beq.n	800c422 <rcl_publisher_init+0xe6>
 800c392:	aa07      	add	r2, sp, #28
 800c394:	9307      	str	r3, [sp, #28]
 800c396:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800c39a:	f106 0358 	add.w	r3, r6, #88	; 0x58
 800c39e:	9205      	str	r2, [sp, #20]
 800c3a0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c3a4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c3a8:	4649      	mov	r1, r9
 800c3aa:	4638      	mov	r0, r7
 800c3ac:	e89a 000c 	ldmia.w	sl, {r2, r3}
 800c3b0:	f008 f816 	bl	80143e0 <rcl_node_resolve_name>
 800c3b4:	2800      	cmp	r0, #0
 800c3b6:	d150      	bne.n	800c45a <rcl_publisher_init+0x11e>
 800c3b8:	21c8      	movs	r1, #200	; 0xc8
 800c3ba:	2001      	movs	r0, #1
 800c3bc:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	; 0x5c
 800c3c0:	4798      	blx	r3
 800c3c2:	6028      	str	r0, [r5, #0]
 800c3c4:	2800      	cmp	r0, #0
 800c3c6:	d050      	beq.n	800c46a <rcl_publisher_init+0x12e>
 800c3c8:	4638      	mov	r0, r7
 800c3ca:	f007 ffb3 	bl	8014334 <rcl_node_get_rmw_handle>
 800c3ce:	f106 0364 	add.w	r3, r6, #100	; 0x64
 800c3d2:	4641      	mov	r1, r8
 800c3d4:	9a07      	ldr	r2, [sp, #28]
 800c3d6:	9300      	str	r3, [sp, #0]
 800c3d8:	4633      	mov	r3, r6
 800c3da:	682c      	ldr	r4, [r5, #0]
 800c3dc:	f001 f9c2 	bl	800d764 <rmw_create_publisher>
 800c3e0:	682b      	ldr	r3, [r5, #0]
 800c3e2:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 800c3e6:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800c3ea:	b370      	cbz	r0, 800c44a <rcl_publisher_init+0x10e>
 800c3ec:	f103 0170 	add.w	r1, r3, #112	; 0x70
 800c3f0:	f001 fa9c 	bl	800d92c <rmw_publisher_get_actual_qos>
 800c3f4:	682b      	ldr	r3, [r5, #0]
 800c3f6:	4604      	mov	r4, r0
 800c3f8:	b9d0      	cbnz	r0, 800c430 <rcl_publisher_init+0xf4>
 800c3fa:	f896 2048 	ldrb.w	r2, [r6, #72]	; 0x48
 800c3fe:	4631      	mov	r1, r6
 800c400:	4618      	mov	r0, r3
 800c402:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 800c406:	2270      	movs	r2, #112	; 0x70
 800c408:	f00f fb6d 	bl	801bae6 <memcpy>
 800c40c:	683a      	ldr	r2, [r7, #0]
 800c40e:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 800c412:	9807      	ldr	r0, [sp, #28]
 800c414:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800c416:	6e31      	ldr	r1, [r6, #96]	; 0x60
 800c418:	4798      	blx	r3
 800c41a:	4620      	mov	r0, r4
 800c41c:	b008      	add	sp, #32
 800c41e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c422:	240b      	movs	r4, #11
 800c424:	4620      	mov	r0, r4
 800c426:	b008      	add	sp, #32
 800c428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c42c:	24c8      	movs	r4, #200	; 0xc8
 800c42e:	e79e      	b.n	800c36e <rcl_publisher_init+0x32>
 800c430:	b1cb      	cbz	r3, 800c466 <rcl_publisher_init+0x12a>
 800c432:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800c436:	b142      	cbz	r2, 800c44a <rcl_publisher_init+0x10e>
 800c438:	4638      	mov	r0, r7
 800c43a:	f007 ff7b 	bl	8014334 <rcl_node_get_rmw_handle>
 800c43e:	682b      	ldr	r3, [r5, #0]
 800c440:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800c444:	f001 fa86 	bl	800d954 <rmw_destroy_publisher>
 800c448:	682b      	ldr	r3, [r5, #0]
 800c44a:	4618      	mov	r0, r3
 800c44c:	6d72      	ldr	r2, [r6, #84]	; 0x54
 800c44e:	6e31      	ldr	r1, [r6, #96]	; 0x60
 800c450:	2401      	movs	r4, #1
 800c452:	4790      	blx	r2
 800c454:	2300      	movs	r3, #0
 800c456:	602b      	str	r3, [r5, #0]
 800c458:	e7db      	b.n	800c412 <rcl_publisher_init+0xd6>
 800c45a:	2867      	cmp	r0, #103	; 0x67
 800c45c:	d007      	beq.n	800c46e <rcl_publisher_init+0x132>
 800c45e:	2869      	cmp	r0, #105	; 0x69
 800c460:	d005      	beq.n	800c46e <rcl_publisher_init+0x132>
 800c462:	280a      	cmp	r0, #10
 800c464:	d001      	beq.n	800c46a <rcl_publisher_init+0x12e>
 800c466:	2401      	movs	r4, #1
 800c468:	e7d3      	b.n	800c412 <rcl_publisher_init+0xd6>
 800c46a:	240a      	movs	r4, #10
 800c46c:	e7d1      	b.n	800c412 <rcl_publisher_init+0xd6>
 800c46e:	2467      	movs	r4, #103	; 0x67
 800c470:	e7cf      	b.n	800c412 <rcl_publisher_init+0xd6>
 800c472:	bf00      	nop

0800c474 <rcl_publisher_get_default_options>:
 800c474:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c476:	4d1d      	ldr	r5, [pc, #116]	; (800c4ec <rcl_publisher_get_default_options+0x78>)
 800c478:	b08b      	sub	sp, #44	; 0x2c
 800c47a:	2250      	movs	r2, #80	; 0x50
 800c47c:	491c      	ldr	r1, [pc, #112]	; (800c4f0 <rcl_publisher_get_default_options+0x7c>)
 800c47e:	4604      	mov	r4, r0
 800c480:	4628      	mov	r0, r5
 800c482:	f00f fb30 	bl	801bae6 <memcpy>
 800c486:	a802      	add	r0, sp, #8
 800c488:	f001 f84e 	bl	800d528 <rcutils_get_default_allocator>
 800c48c:	f10d 0c08 	add.w	ip, sp, #8
 800c490:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 800c494:	466e      	mov	r6, sp
 800c496:	2700      	movs	r7, #0
 800c498:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c49c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c4a0:	f8dc 3000 	ldr.w	r3, [ip]
 800c4a4:	4630      	mov	r0, r6
 800c4a6:	f8ce 3000 	str.w	r3, [lr]
 800c4aa:	f001 f8dd 	bl	800d668 <rmw_get_default_publisher_options>
 800c4ae:	f105 0364 	add.w	r3, r5, #100	; 0x64
 800c4b2:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
 800c4b6:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c4ba:	e883 0003 	stmia.w	r3, {r0, r1}
 800c4be:	f10d 0027 	add.w	r0, sp, #39	; 0x27
 800c4c2:	f007 ff3d 	bl	8014340 <rcl_get_disable_loaned_message>
 800c4c6:	b958      	cbnz	r0, 800c4e0 <rcl_publisher_get_default_options+0x6c>
 800c4c8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800c4cc:	f885 306c 	strb.w	r3, [r5, #108]	; 0x6c
 800c4d0:	2270      	movs	r2, #112	; 0x70
 800c4d2:	4906      	ldr	r1, [pc, #24]	; (800c4ec <rcl_publisher_get_default_options+0x78>)
 800c4d4:	4620      	mov	r0, r4
 800c4d6:	f00f fb06 	bl	801bae6 <memcpy>
 800c4da:	4620      	mov	r0, r4
 800c4dc:	b00b      	add	sp, #44	; 0x2c
 800c4de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4e0:	f001 f856 	bl	800d590 <rcutils_reset_error>
 800c4e4:	f885 706c 	strb.w	r7, [r5, #108]	; 0x6c
 800c4e8:	e7f2      	b.n	800c4d0 <rcl_publisher_get_default_options+0x5c>
 800c4ea:	bf00      	nop
 800c4ec:	2000b710 	.word	0x2000b710
 800c4f0:	0801d3e8 	.word	0x0801d3e8

0800c4f4 <rcl_publish>:
 800c4f4:	b1f8      	cbz	r0, 800c536 <rcl_publish+0x42>
 800c4f6:	6803      	ldr	r3, [r0, #0]
 800c4f8:	b570      	push	{r4, r5, r6, lr}
 800c4fa:	4604      	mov	r4, r0
 800c4fc:	b1b3      	cbz	r3, 800c52c <rcl_publish+0x38>
 800c4fe:	4616      	mov	r6, r2
 800c500:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800c504:	b192      	cbz	r2, 800c52c <rcl_publish+0x38>
 800c506:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800c50a:	460d      	mov	r5, r1
 800c50c:	f007 faf4 	bl	8013af8 <rcl_context_is_valid>
 800c510:	b160      	cbz	r0, 800c52c <rcl_publish+0x38>
 800c512:	6823      	ldr	r3, [r4, #0]
 800c514:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800c518:	b140      	cbz	r0, 800c52c <rcl_publish+0x38>
 800c51a:	b155      	cbz	r5, 800c532 <rcl_publish+0x3e>
 800c51c:	4632      	mov	r2, r6
 800c51e:	4629      	mov	r1, r5
 800c520:	f001 f8c0 	bl	800d6a4 <rmw_publish>
 800c524:	3800      	subs	r0, #0
 800c526:	bf18      	it	ne
 800c528:	2001      	movne	r0, #1
 800c52a:	bd70      	pop	{r4, r5, r6, pc}
 800c52c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800c530:	bd70      	pop	{r4, r5, r6, pc}
 800c532:	200b      	movs	r0, #11
 800c534:	bd70      	pop	{r4, r5, r6, pc}
 800c536:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800c53a:	4770      	bx	lr

0800c53c <rcl_publisher_is_valid>:
 800c53c:	b1a0      	cbz	r0, 800c568 <rcl_publisher_is_valid+0x2c>
 800c53e:	6803      	ldr	r3, [r0, #0]
 800c540:	b510      	push	{r4, lr}
 800c542:	4604      	mov	r4, r0
 800c544:	b173      	cbz	r3, 800c564 <rcl_publisher_is_valid+0x28>
 800c546:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800c54a:	b15a      	cbz	r2, 800c564 <rcl_publisher_is_valid+0x28>
 800c54c:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800c550:	f007 fad2 	bl	8013af8 <rcl_context_is_valid>
 800c554:	b130      	cbz	r0, 800c564 <rcl_publisher_is_valid+0x28>
 800c556:	6823      	ldr	r3, [r4, #0]
 800c558:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800c55c:	3800      	subs	r0, #0
 800c55e:	bf18      	it	ne
 800c560:	2001      	movne	r0, #1
 800c562:	bd10      	pop	{r4, pc}
 800c564:	2000      	movs	r0, #0
 800c566:	bd10      	pop	{r4, pc}
 800c568:	2000      	movs	r0, #0
 800c56a:	4770      	bx	lr

0800c56c <rcl_publisher_is_valid_except_context>:
 800c56c:	b130      	cbz	r0, 800c57c <rcl_publisher_is_valid_except_context+0x10>
 800c56e:	6800      	ldr	r0, [r0, #0]
 800c570:	b120      	cbz	r0, 800c57c <rcl_publisher_is_valid_except_context+0x10>
 800c572:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 800c576:	3800      	subs	r0, #0
 800c578:	bf18      	it	ne
 800c57a:	2001      	movne	r0, #1
 800c57c:	4770      	bx	lr
 800c57e:	bf00      	nop

0800c580 <_rclc_check_for_new_data>:
 800c580:	2800      	cmp	r0, #0
 800c582:	d046      	beq.n	800c612 <_rclc_check_for_new_data+0x92>
 800c584:	4603      	mov	r3, r0
 800c586:	b530      	push	{r4, r5, lr}
 800c588:	7802      	ldrb	r2, [r0, #0]
 800c58a:	b085      	sub	sp, #20
 800c58c:	2a0a      	cmp	r2, #10
 800c58e:	d842      	bhi.n	800c616 <_rclc_check_for_new_data+0x96>
 800c590:	e8df f002 	tbb	[pc, r2]
 800c594:	14181212 	.word	0x14181212
 800c598:	06060614 	.word	0x06060614
 800c59c:	2e1a      	.short	0x2e1a
 800c59e:	16          	.byte	0x16
 800c59f:	00          	.byte	0x00
 800c5a0:	6a0a      	ldr	r2, [r1, #32]
 800c5a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c5a4:	2000      	movs	r0, #0
 800c5a6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c5aa:	1a12      	subs	r2, r2, r0
 800c5ac:	bf18      	it	ne
 800c5ae:	2201      	movne	r2, #1
 800c5b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800c5b4:	b005      	add	sp, #20
 800c5b6:	bd30      	pop	{r4, r5, pc}
 800c5b8:	680a      	ldr	r2, [r1, #0]
 800c5ba:	e7f2      	b.n	800c5a2 <_rclc_check_for_new_data+0x22>
 800c5bc:	698a      	ldr	r2, [r1, #24]
 800c5be:	e7f0      	b.n	800c5a2 <_rclc_check_for_new_data+0x22>
 800c5c0:	688a      	ldr	r2, [r1, #8]
 800c5c2:	e7ee      	b.n	800c5a2 <_rclc_check_for_new_data+0x22>
 800c5c4:	690a      	ldr	r2, [r1, #16]
 800c5c6:	e7ec      	b.n	800c5a2 <_rclc_check_for_new_data+0x22>
 800c5c8:	685c      	ldr	r4, [r3, #4]
 800c5ca:	4608      	mov	r0, r1
 800c5cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c5d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c5d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c5d8:	f104 0110 	add.w	r1, r4, #16
 800c5dc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c5e0:	9500      	str	r5, [sp, #0]
 800c5e2:	f104 0341 	add.w	r3, r4, #65	; 0x41
 800c5e6:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800c5ea:	f009 fef1 	bl	80163d0 <rcl_action_client_wait_set_get_entities_ready>
 800c5ee:	e7e1      	b.n	800c5b4 <_rclc_check_for_new_data+0x34>
 800c5f0:	685c      	ldr	r4, [r3, #4]
 800c5f2:	4608      	mov	r0, r1
 800c5f4:	f104 0222 	add.w	r2, r4, #34	; 0x22
 800c5f8:	f104 0123 	add.w	r1, r4, #35	; 0x23
 800c5fc:	f104 0321 	add.w	r3, r4, #33	; 0x21
 800c600:	e9cd 2100 	strd	r2, r1, [sp]
 800c604:	f104 0220 	add.w	r2, r4, #32
 800c608:	f104 0110 	add.w	r1, r4, #16
 800c60c:	f00a f8f8 	bl	8016800 <rcl_action_server_wait_set_get_entities_ready>
 800c610:	e7d0      	b.n	800c5b4 <_rclc_check_for_new_data+0x34>
 800c612:	200b      	movs	r0, #11
 800c614:	4770      	bx	lr
 800c616:	2001      	movs	r0, #1
 800c618:	e7cc      	b.n	800c5b4 <_rclc_check_for_new_data+0x34>
 800c61a:	bf00      	nop

0800c61c <_rclc_take_new_data>:
 800c61c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c61e:	b099      	sub	sp, #100	; 0x64
 800c620:	2800      	cmp	r0, #0
 800c622:	f000 8088 	beq.w	800c736 <_rclc_take_new_data+0x11a>
 800c626:	7803      	ldrb	r3, [r0, #0]
 800c628:	4604      	mov	r4, r0
 800c62a:	2b0a      	cmp	r3, #10
 800c62c:	f200 8167 	bhi.w	800c8fe <_rclc_take_new_data+0x2e2>
 800c630:	e8df f003 	tbb	[pc, r3]
 800c634:	44152d2d 	.word	0x44152d2d
 800c638:	19191944 	.word	0x19191944
 800c63c:	065a      	.short	0x065a
 800c63e:	15          	.byte	0x15
 800c63f:	00          	.byte	0x00
 800c640:	6840      	ldr	r0, [r0, #4]
 800c642:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c646:	2b00      	cmp	r3, #0
 800c648:	f040 80b2 	bne.w	800c7b0 <_rclc_take_new_data+0x194>
 800c64c:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800c650:	2b00      	cmp	r3, #0
 800c652:	f040 80e4 	bne.w	800c81e <_rclc_take_new_data+0x202>
 800c656:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d16f      	bne.n	800c73e <_rclc_take_new_data+0x122>
 800c65e:	2500      	movs	r5, #0
 800c660:	4628      	mov	r0, r5
 800c662:	b019      	add	sp, #100	; 0x64
 800c664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c666:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800c668:	6a0b      	ldr	r3, [r1, #32]
 800c66a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d0f5      	beq.n	800c65e <_rclc_take_new_data+0x42>
 800c672:	6882      	ldr	r2, [r0, #8]
 800c674:	f100 0110 	add.w	r1, r0, #16
 800c678:	6840      	ldr	r0, [r0, #4]
 800c67a:	f008 f95d 	bl	8014938 <rcl_take_request>
 800c67e:	4605      	mov	r5, r0
 800c680:	2800      	cmp	r0, #0
 800c682:	d0ec      	beq.n	800c65e <_rclc_take_new_data+0x42>
 800c684:	f240 2359 	movw	r3, #601	; 0x259
 800c688:	4298      	cmp	r0, r3
 800c68a:	d013      	beq.n	800c6b4 <_rclc_take_new_data+0x98>
 800c68c:	e029      	b.n	800c6e2 <_rclc_take_new_data+0xc6>
 800c68e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800c690:	680b      	ldr	r3, [r1, #0]
 800c692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d0e1      	beq.n	800c65e <_rclc_take_new_data+0x42>
 800c69a:	2300      	movs	r3, #0
 800c69c:	aa0a      	add	r2, sp, #40	; 0x28
 800c69e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800c6a2:	f008 fa71 	bl	8014b88 <rcl_take>
 800c6a6:	4605      	mov	r5, r0
 800c6a8:	2800      	cmp	r0, #0
 800c6aa:	d0d9      	beq.n	800c660 <_rclc_take_new_data+0x44>
 800c6ac:	f240 1391 	movw	r3, #401	; 0x191
 800c6b0:	4298      	cmp	r0, r3
 800c6b2:	d116      	bne.n	800c6e2 <_rclc_take_new_data+0xc6>
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800c6ba:	e7d1      	b.n	800c660 <_rclc_take_new_data+0x44>
 800c6bc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800c6be:	698b      	ldr	r3, [r1, #24]
 800c6c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d0ca      	beq.n	800c65e <_rclc_take_new_data+0x42>
 800c6c8:	6882      	ldr	r2, [r0, #8]
 800c6ca:	f100 0110 	add.w	r1, r0, #16
 800c6ce:	6840      	ldr	r0, [r0, #4]
 800c6d0:	f007 f982 	bl	80139d8 <rcl_take_response>
 800c6d4:	4605      	mov	r5, r0
 800c6d6:	2800      	cmp	r0, #0
 800c6d8:	d0c1      	beq.n	800c65e <_rclc_take_new_data+0x42>
 800c6da:	f240 13f5 	movw	r3, #501	; 0x1f5
 800c6de:	4298      	cmp	r0, r3
 800c6e0:	d0be      	beq.n	800c660 <_rclc_take_new_data+0x44>
 800c6e2:	f000 ff55 	bl	800d590 <rcutils_reset_error>
 800c6e6:	e7bb      	b.n	800c660 <_rclc_take_new_data+0x44>
 800c6e8:	6840      	ldr	r0, [r0, #4]
 800c6ea:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d17d      	bne.n	800c7ee <_rclc_take_new_data+0x1d2>
 800c6f2:	69c3      	ldr	r3, [r0, #28]
 800c6f4:	b11b      	cbz	r3, 800c6fe <_rclc_take_new_data+0xe2>
 800c6f6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d144      	bne.n	800c788 <_rclc_take_new_data+0x16c>
 800c6fe:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800c702:	2b00      	cmp	r3, #0
 800c704:	f040 80ac 	bne.w	800c860 <_rclc_take_new_data+0x244>
 800c708:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d0a6      	beq.n	800c65e <_rclc_take_new_data+0x42>
 800c710:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800c712:	a90a      	add	r1, sp, #40	; 0x28
 800c714:	3010      	adds	r0, #16
 800c716:	f009 fd33 	bl	8016180 <rcl_action_take_result_response>
 800c71a:	4605      	mov	r5, r0
 800c71c:	2800      	cmp	r0, #0
 800c71e:	d1e0      	bne.n	800c6e2 <_rclc_take_new_data+0xc6>
 800c720:	6860      	ldr	r0, [r4, #4]
 800c722:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c726:	f00a f99b 	bl	8016a60 <rclc_action_find_handle_by_result_request_sequence_number>
 800c72a:	2800      	cmp	r0, #0
 800c72c:	d098      	beq.n	800c660 <_rclc_take_new_data+0x44>
 800c72e:	2301      	movs	r3, #1
 800c730:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 800c734:	e794      	b.n	800c660 <_rclc_take_new_data+0x44>
 800c736:	250b      	movs	r5, #11
 800c738:	4628      	mov	r0, r5
 800c73a:	b019      	add	sp, #100	; 0x64
 800c73c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c73e:	ae04      	add	r6, sp, #16
 800c740:	3010      	adds	r0, #16
 800c742:	aa0a      	add	r2, sp, #40	; 0x28
 800c744:	4631      	mov	r1, r6
 800c746:	f009 ff8f 	bl	8016668 <rcl_action_take_cancel_request>
 800c74a:	4605      	mov	r5, r0
 800c74c:	2800      	cmp	r0, #0
 800c74e:	d1c8      	bne.n	800c6e2 <_rclc_take_new_data+0xc6>
 800c750:	a90a      	add	r1, sp, #40	; 0x28
 800c752:	6860      	ldr	r0, [r4, #4]
 800c754:	f00a f944 	bl	80169e0 <rclc_action_find_goal_handle_by_uuid>
 800c758:	4607      	mov	r7, r0
 800c75a:	2800      	cmp	r0, #0
 800c75c:	f000 80bb 	beq.w	800c8d6 <_rclc_take_new_data+0x2ba>
 800c760:	2101      	movs	r1, #1
 800c762:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800c766:	f00a f8c5 	bl	80168f4 <rcl_action_transition_goal_state>
 800c76a:	2803      	cmp	r0, #3
 800c76c:	4684      	mov	ip, r0
 800c76e:	f040 80a7 	bne.w	800c8c0 <_rclc_take_new_data+0x2a4>
 800c772:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800c776:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c778:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c77a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c77e:	e884 0003 	stmia.w	r4, {r0, r1}
 800c782:	f887 c008 	strb.w	ip, [r7, #8]
 800c786:	e76b      	b.n	800c660 <_rclc_take_new_data+0x44>
 800c788:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800c78a:	3010      	adds	r0, #16
 800c78c:	f009 fd78 	bl	8016280 <rcl_action_take_feedback>
 800c790:	4605      	mov	r5, r0
 800c792:	2800      	cmp	r0, #0
 800c794:	d1a5      	bne.n	800c6e2 <_rclc_take_new_data+0xc6>
 800c796:	6860      	ldr	r0, [r4, #4]
 800c798:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800c79a:	f00a f921 	bl	80169e0 <rclc_action_find_goal_handle_by_uuid>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	2800      	cmp	r0, #0
 800c7a2:	f000 80a3 	beq.w	800c8ec <_rclc_take_new_data+0x2d0>
 800c7a6:	2201      	movs	r2, #1
 800c7a8:	6860      	ldr	r0, [r4, #4]
 800c7aa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800c7ae:	e7a6      	b.n	800c6fe <_rclc_take_new_data+0xe2>
 800c7b0:	f00a f8f0 	bl	8016994 <rclc_action_take_goal_handle>
 800c7b4:	4606      	mov	r6, r0
 800c7b6:	6860      	ldr	r0, [r4, #4]
 800c7b8:	2e00      	cmp	r6, #0
 800c7ba:	f43f af47 	beq.w	800c64c <_rclc_take_new_data+0x30>
 800c7be:	6070      	str	r0, [r6, #4]
 800c7c0:	f106 0128 	add.w	r1, r6, #40	; 0x28
 800c7c4:	69f2      	ldr	r2, [r6, #28]
 800c7c6:	3010      	adds	r0, #16
 800c7c8:	f009 fe98 	bl	80164fc <rcl_action_take_goal_request>
 800c7cc:	4605      	mov	r5, r0
 800c7ce:	2800      	cmp	r0, #0
 800c7d0:	f040 808e 	bne.w	800c8f0 <_rclc_take_new_data+0x2d4>
 800c7d4:	69f7      	ldr	r7, [r6, #28]
 800c7d6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c7d8:	7235      	strb	r5, [r6, #8]
 800c7da:	f8c6 0009 	str.w	r0, [r6, #9]
 800c7de:	f8c6 100d 	str.w	r1, [r6, #13]
 800c7e2:	6860      	ldr	r0, [r4, #4]
 800c7e4:	f8c6 2011 	str.w	r2, [r6, #17]
 800c7e8:	f8c6 3015 	str.w	r3, [r6, #21]
 800c7ec:	e72e      	b.n	800c64c <_rclc_take_new_data+0x30>
 800c7ee:	aa04      	add	r2, sp, #16
 800c7f0:	a90a      	add	r1, sp, #40	; 0x28
 800c7f2:	3010      	adds	r0, #16
 800c7f4:	f009 fc4c 	bl	8016090 <rcl_action_take_goal_response>
 800c7f8:	4605      	mov	r5, r0
 800c7fa:	2800      	cmp	r0, #0
 800c7fc:	f47f af71 	bne.w	800c6e2 <_rclc_take_new_data+0xc6>
 800c800:	6860      	ldr	r0, [r4, #4]
 800c802:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c806:	f00a f919 	bl	8016a3c <rclc_action_find_handle_by_goal_request_sequence_number>
 800c80a:	b130      	cbz	r0, 800c81a <_rclc_take_new_data+0x1fe>
 800c80c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800c810:	2201      	movs	r2, #1
 800c812:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 800c816:	f880 2020 	strb.w	r2, [r0, #32]
 800c81a:	6860      	ldr	r0, [r4, #4]
 800c81c:	e769      	b.n	800c6f2 <_rclc_take_new_data+0xd6>
 800c81e:	3010      	adds	r0, #16
 800c820:	aa04      	add	r2, sp, #16
 800c822:	a90a      	add	r1, sp, #40	; 0x28
 800c824:	f009 fee0 	bl	80165e8 <rcl_action_take_result_request>
 800c828:	4605      	mov	r5, r0
 800c82a:	2800      	cmp	r0, #0
 800c82c:	f47f af59 	bne.w	800c6e2 <_rclc_take_new_data+0xc6>
 800c830:	a904      	add	r1, sp, #16
 800c832:	6860      	ldr	r0, [r4, #4]
 800c834:	f00a f8d4 	bl	80169e0 <rclc_action_find_goal_handle_by_uuid>
 800c838:	4607      	mov	r7, r0
 800c83a:	b160      	cbz	r0, 800c856 <_rclc_take_new_data+0x23a>
 800c83c:	ad0a      	add	r5, sp, #40	; 0x28
 800c83e:	f100 0640 	add.w	r6, r0, #64	; 0x40
 800c842:	f04f 0c02 	mov.w	ip, #2
 800c846:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c848:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c84a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c84e:	e886 0003 	stmia.w	r6, {r0, r1}
 800c852:	f887 c008 	strb.w	ip, [r7, #8]
 800c856:	6860      	ldr	r0, [r4, #4]
 800c858:	2300      	movs	r3, #0
 800c85a:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 800c85e:	e6fa      	b.n	800c656 <_rclc_take_new_data+0x3a>
 800c860:	f100 0230 	add.w	r2, r0, #48	; 0x30
 800c864:	a90a      	add	r1, sp, #40	; 0x28
 800c866:	3010      	adds	r0, #16
 800c868:	f009 fcca 	bl	8016200 <rcl_action_take_cancel_response>
 800c86c:	4605      	mov	r5, r0
 800c86e:	2800      	cmp	r0, #0
 800c870:	f47f af37 	bne.w	800c6e2 <_rclc_take_new_data+0xc6>
 800c874:	6860      	ldr	r0, [r4, #4]
 800c876:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c87a:	f00a f903 	bl	8016a84 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800c87e:	4606      	mov	r6, r0
 800c880:	6860      	ldr	r0, [r4, #4]
 800c882:	2e00      	cmp	r6, #0
 800c884:	f43f af40 	beq.w	800c708 <_rclc_take_new_data+0xec>
 800c888:	2701      	movs	r7, #1
 800c88a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c88c:	84b7      	strh	r7, [r6, #36]	; 0x24
 800c88e:	2b00      	cmp	r3, #0
 800c890:	f43f af3a 	beq.w	800c708 <_rclc_take_new_data+0xec>
 800c894:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c896:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800c89a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c89e:	f00a f89f 	bl	80169e0 <rclc_action_find_goal_handle_by_uuid>
 800c8a2:	b138      	cbz	r0, 800c8b4 <_rclc_take_new_data+0x298>
 800c8a4:	6860      	ldr	r0, [r4, #4]
 800c8a6:	3501      	adds	r5, #1
 800c8a8:	f886 7025 	strb.w	r7, [r6, #37]	; 0x25
 800c8ac:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c8ae:	42ab      	cmp	r3, r5
 800c8b0:	d8f0      	bhi.n	800c894 <_rclc_take_new_data+0x278>
 800c8b2:	e729      	b.n	800c708 <_rclc_take_new_data+0xec>
 800c8b4:	6860      	ldr	r0, [r4, #4]
 800c8b6:	3501      	adds	r5, #1
 800c8b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c8ba:	42ab      	cmp	r3, r5
 800c8bc:	d8ea      	bhi.n	800c894 <_rclc_take_new_data+0x278>
 800c8be:	e723      	b.n	800c708 <_rclc_take_new_data+0xec>
 800c8c0:	ab06      	add	r3, sp, #24
 800c8c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c8c4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c8c8:	2103      	movs	r1, #3
 800c8ca:	6860      	ldr	r0, [r4, #4]
 800c8cc:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c8d0:	f00a f94e 	bl	8016b70 <rclc_action_server_goal_cancel_reject>
 800c8d4:	e6c4      	b.n	800c660 <_rclc_take_new_data+0x44>
 800c8d6:	ab06      	add	r3, sp, #24
 800c8d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c8da:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c8de:	2102      	movs	r1, #2
 800c8e0:	6860      	ldr	r0, [r4, #4]
 800c8e2:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c8e6:	f00a f943 	bl	8016b70 <rclc_action_server_goal_cancel_reject>
 800c8ea:	e6b9      	b.n	800c660 <_rclc_take_new_data+0x44>
 800c8ec:	6860      	ldr	r0, [r4, #4]
 800c8ee:	e706      	b.n	800c6fe <_rclc_take_new_data+0xe2>
 800c8f0:	4631      	mov	r1, r6
 800c8f2:	6860      	ldr	r0, [r4, #4]
 800c8f4:	f00a f85e 	bl	80169b4 <rclc_action_remove_used_goal_handle>
 800c8f8:	f000 fe4a 	bl	800d590 <rcutils_reset_error>
 800c8fc:	e6b0      	b.n	800c660 <_rclc_take_new_data+0x44>
 800c8fe:	2501      	movs	r5, #1
 800c900:	e6ae      	b.n	800c660 <_rclc_take_new_data+0x44>
 800c902:	bf00      	nop

0800c904 <_rclc_execute.part.0>:
 800c904:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c906:	7803      	ldrb	r3, [r0, #0]
 800c908:	b085      	sub	sp, #20
 800c90a:	4604      	mov	r4, r0
 800c90c:	2b0a      	cmp	r3, #10
 800c90e:	f200 8139 	bhi.w	800cb84 <_rclc_execute.part.0+0x280>
 800c912:	e8df f003 	tbb	[pc, r3]
 800c916:	4268      	.short	0x4268
 800c918:	06a75b4d 	.word	0x06a75b4d
 800c91c:	721d0606 	.word	0x721d0606
 800c920:	62          	.byte	0x62
 800c921:	00          	.byte	0x00
 800c922:	2b06      	cmp	r3, #6
 800c924:	f000 8126 	beq.w	800cb74 <_rclc_execute.part.0+0x270>
 800c928:	2b07      	cmp	r3, #7
 800c92a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800c92c:	f040 811c 	bne.w	800cb68 <_rclc_execute.part.0+0x264>
 800c930:	f104 0510 	add.w	r5, r4, #16
 800c934:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 800c938:	6880      	ldr	r0, [r0, #8]
 800c93a:	4798      	blx	r3
 800c93c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800c93e:	4629      	mov	r1, r5
 800c940:	6860      	ldr	r0, [r4, #4]
 800c942:	f008 f849 	bl	80149d8 <rcl_send_response>
 800c946:	4604      	mov	r4, r0
 800c948:	b378      	cbz	r0, 800c9aa <_rclc_execute.part.0+0xa6>
 800c94a:	f000 fe21 	bl	800d590 <rcutils_reset_error>
 800c94e:	e02c      	b.n	800c9aa <_rclc_execute.part.0+0xa6>
 800c950:	6840      	ldr	r0, [r0, #4]
 800c952:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800c956:	2b00      	cmp	r3, #0
 800c958:	f000 808e 	beq.w	800ca78 <_rclc_execute.part.0+0x174>
 800c95c:	2600      	movs	r6, #0
 800c95e:	2701      	movs	r7, #1
 800c960:	e004      	b.n	800c96c <_rclc_execute.part.0+0x68>
 800c962:	f009 fff1 	bl	8016948 <rclc_action_send_result_request>
 800c966:	b998      	cbnz	r0, 800c990 <_rclc_execute.part.0+0x8c>
 800c968:	722f      	strb	r7, [r5, #8]
 800c96a:	6860      	ldr	r0, [r4, #4]
 800c96c:	f00a f89c 	bl	8016aa8 <rclc_action_find_first_handle_with_goal_response>
 800c970:	4605      	mov	r5, r0
 800c972:	2800      	cmp	r0, #0
 800c974:	d07f      	beq.n	800ca76 <_rclc_execute.part.0+0x172>
 800c976:	6863      	ldr	r3, [r4, #4]
 800c978:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c97a:	699b      	ldr	r3, [r3, #24]
 800c97c:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 800c980:	f885 6020 	strb.w	r6, [r5, #32]
 800c984:	4798      	blx	r3
 800c986:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 800c98a:	4628      	mov	r0, r5
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d1e8      	bne.n	800c962 <_rclc_execute.part.0+0x5e>
 800c990:	6860      	ldr	r0, [r4, #4]
 800c992:	4629      	mov	r1, r5
 800c994:	f00a f80e 	bl	80169b4 <rclc_action_remove_used_goal_handle>
 800c998:	e7e7      	b.n	800c96a <_rclc_execute.part.0+0x66>
 800c99a:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 800c99e:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
 800c9a2:	b100      	cbz	r0, 800c9a6 <_rclc_execute.part.0+0xa2>
 800c9a4:	68a0      	ldr	r0, [r4, #8]
 800c9a6:	2400      	movs	r4, #0
 800c9a8:	4798      	blx	r3
 800c9aa:	4620      	mov	r0, r4
 800c9ac:	b005      	add	sp, #20
 800c9ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9b0:	6840      	ldr	r0, [r0, #4]
 800c9b2:	f008 fc23 	bl	80151fc <rcl_timer_call>
 800c9b6:	f240 3321 	movw	r3, #801	; 0x321
 800c9ba:	4604      	mov	r4, r0
 800c9bc:	4298      	cmp	r0, r3
 800c9be:	d001      	beq.n	800c9c4 <_rclc_execute.part.0+0xc0>
 800c9c0:	2800      	cmp	r0, #0
 800c9c2:	d1c2      	bne.n	800c94a <_rclc_execute.part.0+0x46>
 800c9c4:	2400      	movs	r4, #0
 800c9c6:	4620      	mov	r0, r4
 800c9c8:	b005      	add	sp, #20
 800c9ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9cc:	2400      	movs	r4, #0
 800c9ce:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800c9d0:	6880      	ldr	r0, [r0, #8]
 800c9d2:	4798      	blx	r3
 800c9d4:	4620      	mov	r0, r4
 800c9d6:	b005      	add	sp, #20
 800c9d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9da:	2400      	movs	r4, #0
 800c9dc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800c9de:	4798      	blx	r3
 800c9e0:	4620      	mov	r0, r4
 800c9e2:	b005      	add	sp, #20
 800c9e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9e6:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 800c9ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c9ec:	b100      	cbz	r0, 800c9f0 <_rclc_execute.part.0+0xec>
 800c9ee:	68a0      	ldr	r0, [r4, #8]
 800c9f0:	2400      	movs	r4, #0
 800c9f2:	4798      	blx	r3
 800c9f4:	4620      	mov	r0, r4
 800c9f6:	b005      	add	sp, #20
 800c9f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9fa:	6840      	ldr	r0, [r0, #4]
 800c9fc:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800ca00:	bb3b      	cbnz	r3, 800ca52 <_rclc_execute.part.0+0x14e>
 800ca02:	f890 3020 	ldrb.w	r3, [r0, #32]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d07d      	beq.n	800cb06 <_rclc_execute.part.0+0x202>
 800ca0a:	f640 0634 	movw	r6, #2100	; 0x834
 800ca0e:	2701      	movs	r7, #1
 800ca10:	e007      	b.n	800ca22 <_rclc_execute.part.0+0x11e>
 800ca12:	4628      	mov	r0, r5
 800ca14:	f00a f860 	bl	8016ad8 <rclc_action_server_response_goal_request>
 800ca18:	4629      	mov	r1, r5
 800ca1a:	6860      	ldr	r0, [r4, #4]
 800ca1c:	f009 ffca 	bl	80169b4 <rclc_action_remove_used_goal_handle>
 800ca20:	6860      	ldr	r0, [r4, #4]
 800ca22:	2100      	movs	r1, #0
 800ca24:	f009 fff2 	bl	8016a0c <rclc_action_find_first_handle_by_status>
 800ca28:	4605      	mov	r5, r0
 800ca2a:	2800      	cmp	r0, #0
 800ca2c:	d068      	beq.n	800cb00 <_rclc_execute.part.0+0x1fc>
 800ca2e:	6863      	ldr	r3, [r4, #4]
 800ca30:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ca32:	699b      	ldr	r3, [r3, #24]
 800ca34:	4798      	blx	r3
 800ca36:	42b0      	cmp	r0, r6
 800ca38:	f04f 0100 	mov.w	r1, #0
 800ca3c:	d1e9      	bne.n	800ca12 <_rclc_execute.part.0+0x10e>
 800ca3e:	2101      	movs	r1, #1
 800ca40:	4628      	mov	r0, r5
 800ca42:	f00a f849 	bl	8016ad8 <rclc_action_server_response_goal_request>
 800ca46:	722f      	strb	r7, [r5, #8]
 800ca48:	e7ea      	b.n	800ca20 <_rclc_execute.part.0+0x11c>
 800ca4a:	6848      	ldr	r0, [r1, #4]
 800ca4c:	f009 ffb2 	bl	80169b4 <rclc_action_remove_used_goal_handle>
 800ca50:	6860      	ldr	r0, [r4, #4]
 800ca52:	f009 ffe7 	bl	8016a24 <rclc_action_find_first_terminated_handle>
 800ca56:	4601      	mov	r1, r0
 800ca58:	2800      	cmp	r0, #0
 800ca5a:	d1f6      	bne.n	800ca4a <_rclc_execute.part.0+0x146>
 800ca5c:	6860      	ldr	r0, [r4, #4]
 800ca5e:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 800ca62:	e7ce      	b.n	800ca02 <_rclc_execute.part.0+0xfe>
 800ca64:	2400      	movs	r4, #0
 800ca66:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ca68:	f100 0110 	add.w	r1, r0, #16
 800ca6c:	6880      	ldr	r0, [r0, #8]
 800ca6e:	4798      	blx	r3
 800ca70:	4620      	mov	r0, r4
 800ca72:	b005      	add	sp, #20
 800ca74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca76:	6860      	ldr	r0, [r4, #4]
 800ca78:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800ca7c:	b18b      	cbz	r3, 800caa2 <_rclc_execute.part.0+0x19e>
 800ca7e:	68c5      	ldr	r5, [r0, #12]
 800ca80:	b32d      	cbz	r5, 800cace <_rclc_execute.part.0+0x1ca>
 800ca82:	2600      	movs	r6, #0
 800ca84:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800ca88:	b143      	cbz	r3, 800ca9c <_rclc_execute.part.0+0x198>
 800ca8a:	69c3      	ldr	r3, [r0, #28]
 800ca8c:	f885 6022 	strb.w	r6, [r5, #34]	; 0x22
 800ca90:	b123      	cbz	r3, 800ca9c <_rclc_execute.part.0+0x198>
 800ca92:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800ca94:	4628      	mov	r0, r5
 800ca96:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ca98:	4798      	blx	r3
 800ca9a:	6860      	ldr	r0, [r4, #4]
 800ca9c:	682d      	ldr	r5, [r5, #0]
 800ca9e:	2d00      	cmp	r5, #0
 800caa0:	d1f0      	bne.n	800ca84 <_rclc_execute.part.0+0x180>
 800caa2:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800caa6:	b193      	cbz	r3, 800cace <_rclc_execute.part.0+0x1ca>
 800caa8:	68c5      	ldr	r5, [r0, #12]
 800caaa:	b185      	cbz	r5, 800cace <_rclc_execute.part.0+0x1ca>
 800caac:	2600      	movs	r6, #0
 800caae:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800cab2:	b14b      	cbz	r3, 800cac8 <_rclc_execute.part.0+0x1c4>
 800cab4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800cab6:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 800caba:	b12b      	cbz	r3, 800cac8 <_rclc_execute.part.0+0x1c4>
 800cabc:	4628      	mov	r0, r5
 800cabe:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 800cac2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800cac4:	4798      	blx	r3
 800cac6:	6860      	ldr	r0, [r4, #4]
 800cac8:	682d      	ldr	r5, [r5, #0]
 800caca:	2d00      	cmp	r5, #0
 800cacc:	d1ef      	bne.n	800caae <_rclc_execute.part.0+0x1aa>
 800cace:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	f43f af76 	beq.w	800c9c4 <_rclc_execute.part.0+0xc0>
 800cad8:	2700      	movs	r7, #0
 800cada:	e00b      	b.n	800caf4 <_rclc_execute.part.0+0x1f0>
 800cadc:	6863      	ldr	r3, [r4, #4]
 800cade:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800cae0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800cae2:	6a1e      	ldr	r6, [r3, #32]
 800cae4:	f885 7023 	strb.w	r7, [r5, #35]	; 0x23
 800cae8:	47b0      	blx	r6
 800caea:	6860      	ldr	r0, [r4, #4]
 800caec:	4629      	mov	r1, r5
 800caee:	f009 ff61 	bl	80169b4 <rclc_action_remove_used_goal_handle>
 800caf2:	6860      	ldr	r0, [r4, #4]
 800caf4:	f009 ffe4 	bl	8016ac0 <rclc_action_find_first_handle_with_result_response>
 800caf8:	4605      	mov	r5, r0
 800cafa:	2800      	cmp	r0, #0
 800cafc:	d1ee      	bne.n	800cadc <_rclc_execute.part.0+0x1d8>
 800cafe:	e761      	b.n	800c9c4 <_rclc_execute.part.0+0xc0>
 800cb00:	6860      	ldr	r0, [r4, #4]
 800cb02:	f880 5020 	strb.w	r5, [r0, #32]
 800cb06:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	f43f af5a 	beq.w	800c9c4 <_rclc_execute.part.0+0xc0>
 800cb10:	68c5      	ldr	r5, [r0, #12]
 800cb12:	b1b5      	cbz	r5, 800cb42 <_rclc_execute.part.0+0x23e>
 800cb14:	2602      	movs	r6, #2
 800cb16:	e001      	b.n	800cb1c <_rclc_execute.part.0+0x218>
 800cb18:	682d      	ldr	r5, [r5, #0]
 800cb1a:	b195      	cbz	r5, 800cb42 <_rclc_execute.part.0+0x23e>
 800cb1c:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800cb20:	2b03      	cmp	r3, #3
 800cb22:	d1f9      	bne.n	800cb18 <_rclc_execute.part.0+0x214>
 800cb24:	69c3      	ldr	r3, [r0, #28]
 800cb26:	4628      	mov	r0, r5
 800cb28:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800cb2a:	4798      	blx	r3
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	f105 0260 	add.w	r2, r5, #96	; 0x60
 800cb32:	4628      	mov	r0, r5
 800cb34:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800cb38:	b143      	cbz	r3, 800cb4c <_rclc_execute.part.0+0x248>
 800cb3a:	f009 ffed 	bl	8016b18 <rclc_action_server_goal_cancel_accept>
 800cb3e:	6860      	ldr	r0, [r4, #4]
 800cb40:	e7ea      	b.n	800cb18 <_rclc_execute.part.0+0x214>
 800cb42:	2300      	movs	r3, #0
 800cb44:	461c      	mov	r4, r3
 800cb46:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 800cb4a:	e72e      	b.n	800c9aa <_rclc_execute.part.0+0xa6>
 800cb4c:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800cb4e:	f105 0758 	add.w	r7, r5, #88	; 0x58
 800cb52:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800cb56:	2101      	movs	r1, #1
 800cb58:	6860      	ldr	r0, [r4, #4]
 800cb5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb5e:	f00a f807 	bl	8016b70 <rclc_action_server_goal_cancel_reject>
 800cb62:	722e      	strb	r6, [r5, #8]
 800cb64:	6860      	ldr	r0, [r4, #4]
 800cb66:	e7d7      	b.n	800cb18 <_rclc_execute.part.0+0x214>
 800cb68:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800cb6a:	f104 0510 	add.w	r5, r4, #16
 800cb6e:	6880      	ldr	r0, [r0, #8]
 800cb70:	4798      	blx	r3
 800cb72:	e6e3      	b.n	800c93c <_rclc_execute.part.0+0x38>
 800cb74:	f100 0510 	add.w	r5, r0, #16
 800cb78:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800cb7a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800cb7c:	4629      	mov	r1, r5
 800cb7e:	6880      	ldr	r0, [r0, #8]
 800cb80:	4798      	blx	r3
 800cb82:	e6db      	b.n	800c93c <_rclc_execute.part.0+0x38>
 800cb84:	2401      	movs	r4, #1
 800cb86:	e710      	b.n	800c9aa <_rclc_execute.part.0+0xa6>

0800cb88 <rclc_executor_trigger_any>:
 800cb88:	2800      	cmp	r0, #0
 800cb8a:	d03d      	beq.n	800cc08 <rclc_executor_trigger_any+0x80>
 800cb8c:	2900      	cmp	r1, #0
 800cb8e:	d03c      	beq.n	800cc0a <rclc_executor_trigger_any+0x82>
 800cb90:	4603      	mov	r3, r0
 800cb92:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 800cb96:	2200      	movs	r2, #0
 800cb98:	2800      	cmp	r0, #0
 800cb9a:	d035      	beq.n	800cc08 <rclc_executor_trigger_any+0x80>
 800cb9c:	b430      	push	{r4, r5}
 800cb9e:	f893 c000 	ldrb.w	ip, [r3]
 800cba2:	f1bc 0f08 	cmp.w	ip, #8
 800cba6:	d11d      	bne.n	800cbe4 <rclc_executor_trigger_any+0x5c>
 800cba8:	685c      	ldr	r4, [r3, #4]
 800cbaa:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800cbac:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800cbb0:	d105      	bne.n	800cbbe <rclc_executor_trigger_any+0x36>
 800cbb2:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800cbb6:	b910      	cbnz	r0, 800cbbe <rclc_executor_trigger_any+0x36>
 800cbb8:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 800cbbc:	b128      	cbz	r0, 800cbca <rclc_executor_trigger_any+0x42>
 800cbbe:	bc30      	pop	{r4, r5}
 800cbc0:	4770      	bx	lr
 800cbc2:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800cbc6:	2800      	cmp	r0, #0
 800cbc8:	d1f9      	bne.n	800cbbe <rclc_executor_trigger_any+0x36>
 800cbca:	3201      	adds	r2, #1
 800cbcc:	3340      	adds	r3, #64	; 0x40
 800cbce:	4291      	cmp	r1, r2
 800cbd0:	d017      	beq.n	800cc02 <rclc_executor_trigger_any+0x7a>
 800cbd2:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800cbd6:	2800      	cmp	r0, #0
 800cbd8:	d0f1      	beq.n	800cbbe <rclc_executor_trigger_any+0x36>
 800cbda:	f893 c000 	ldrb.w	ip, [r3]
 800cbde:	f1bc 0f08 	cmp.w	ip, #8
 800cbe2:	d0e1      	beq.n	800cba8 <rclc_executor_trigger_any+0x20>
 800cbe4:	f1bc 0f09 	cmp.w	ip, #9
 800cbe8:	d1eb      	bne.n	800cbc2 <rclc_executor_trigger_any+0x3a>
 800cbea:	685c      	ldr	r4, [r3, #4]
 800cbec:	6a25      	ldr	r5, [r4, #32]
 800cbee:	2d00      	cmp	r5, #0
 800cbf0:	d1e5      	bne.n	800cbbe <rclc_executor_trigger_any+0x36>
 800cbf2:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800cbf6:	2800      	cmp	r0, #0
 800cbf8:	d1e1      	bne.n	800cbbe <rclc_executor_trigger_any+0x36>
 800cbfa:	3201      	adds	r2, #1
 800cbfc:	3340      	adds	r3, #64	; 0x40
 800cbfe:	4291      	cmp	r1, r2
 800cc00:	d1e7      	bne.n	800cbd2 <rclc_executor_trigger_any+0x4a>
 800cc02:	2000      	movs	r0, #0
 800cc04:	bc30      	pop	{r4, r5}
 800cc06:	4770      	bx	lr
 800cc08:	4770      	bx	lr
 800cc0a:	4608      	mov	r0, r1
 800cc0c:	4770      	bx	lr
 800cc0e:	bf00      	nop

0800cc10 <rclc_executor_get_zero_initialized_executor>:
 800cc10:	b510      	push	{r4, lr}
 800cc12:	4604      	mov	r4, r0
 800cc14:	2290      	movs	r2, #144	; 0x90
 800cc16:	4902      	ldr	r1, [pc, #8]	; (800cc20 <rclc_executor_get_zero_initialized_executor+0x10>)
 800cc18:	f00e ff65 	bl	801bae6 <memcpy>
 800cc1c:	4620      	mov	r0, r4
 800cc1e:	bd10      	pop	{r4, pc}
 800cc20:	0801d438 	.word	0x0801d438
 800cc24:	00000000 	.word	0x00000000

0800cc28 <rclc_executor_init>:
 800cc28:	2900      	cmp	r1, #0
 800cc2a:	d06a      	beq.n	800cd02 <rclc_executor_init+0xda>
 800cc2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc30:	4605      	mov	r5, r0
 800cc32:	b0b2      	sub	sp, #200	; 0xc8
 800cc34:	2800      	cmp	r0, #0
 800cc36:	d05c      	beq.n	800ccf2 <rclc_executor_init+0xca>
 800cc38:	4616      	mov	r6, r2
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	4688      	mov	r8, r1
 800cc3e:	461f      	mov	r7, r3
 800cc40:	f000 fc80 	bl	800d544 <rcutils_allocator_is_valid>
 800cc44:	2e00      	cmp	r6, #0
 800cc46:	d054      	beq.n	800ccf2 <rclc_executor_init+0xca>
 800cc48:	f080 0401 	eor.w	r4, r0, #1
 800cc4c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800cc50:	d14f      	bne.n	800ccf2 <rclc_executor_init+0xca>
 800cc52:	2290      	movs	r2, #144	; 0x90
 800cc54:	4930      	ldr	r1, [pc, #192]	; (800cd18 <rclc_executor_init+0xf0>)
 800cc56:	a80e      	add	r0, sp, #56	; 0x38
 800cc58:	f00e ff45 	bl	801bae6 <memcpy>
 800cc5c:	a90e      	add	r1, sp, #56	; 0x38
 800cc5e:	2290      	movs	r2, #144	; 0x90
 800cc60:	4628      	mov	r0, r5
 800cc62:	f00e ff40 	bl	801bae6 <memcpy>
 800cc66:	4668      	mov	r0, sp
 800cc68:	f8c5 8004 	str.w	r8, [r5, #4]
 800cc6c:	60ee      	str	r6, [r5, #12]
 800cc6e:	f008 fc3b 	bl	80154e8 <rcl_get_zero_initialized_wait_set>
 800cc72:	46ec      	mov	ip, sp
 800cc74:	f105 0e18 	add.w	lr, r5, #24
 800cc78:	f8d7 8000 	ldr.w	r8, [r7]
 800cc7c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cc80:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cc84:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cc88:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cc8c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cc90:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800cd10 <rclc_executor_init+0xe8>
 800cc94:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cc98:	f8dc 3000 	ldr.w	r3, [ip]
 800cc9c:	01b0      	lsls	r0, r6, #6
 800cc9e:	6939      	ldr	r1, [r7, #16]
 800cca0:	f8ce 3000 	str.w	r3, [lr]
 800cca4:	616f      	str	r7, [r5, #20]
 800cca6:	ed85 7b1c 	vstr	d7, [r5, #112]	; 0x70
 800ccaa:	47c0      	blx	r8
 800ccac:	60a8      	str	r0, [r5, #8]
 800ccae:	b908      	cbnz	r0, 800ccb4 <rclc_executor_init+0x8c>
 800ccb0:	e029      	b.n	800cd06 <rclc_executor_init+0xde>
 800ccb2:	68a8      	ldr	r0, [r5, #8]
 800ccb4:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800ccb8:	3401      	adds	r4, #1
 800ccba:	4631      	mov	r1, r6
 800ccbc:	f000 fab8 	bl	800d230 <rclc_executor_handle_init>
 800ccc0:	42a6      	cmp	r6, r4
 800ccc2:	d8f6      	bhi.n	800ccb2 <rclc_executor_init+0x8a>
 800ccc4:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 800ccc8:	f000 faa6 	bl	800d218 <rclc_executor_handle_counters_zero_init>
 800cccc:	4a13      	ldr	r2, [pc, #76]	; (800cd1c <rclc_executor_init+0xf4>)
 800ccce:	2300      	movs	r3, #0
 800ccd0:	68a8      	ldr	r0, [r5, #8]
 800ccd2:	e9c5 2320 	strd	r2, r3, [r5, #128]	; 0x80
 800ccd6:	b168      	cbz	r0, 800ccf4 <rclc_executor_init+0xcc>
 800ccd8:	68eb      	ldr	r3, [r5, #12]
 800ccda:	b173      	cbz	r3, 800ccfa <rclc_executor_init+0xd2>
 800ccdc:	696a      	ldr	r2, [r5, #20]
 800ccde:	fab2 f382 	clz	r3, r2
 800cce2:	095b      	lsrs	r3, r3, #5
 800cce4:	b14a      	cbz	r2, 800ccfa <rclc_executor_init+0xd2>
 800cce6:	4618      	mov	r0, r3
 800cce8:	f885 3088 	strb.w	r3, [r5, #136]	; 0x88
 800ccec:	b032      	add	sp, #200	; 0xc8
 800ccee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccf2:	200b      	movs	r0, #11
 800ccf4:	b032      	add	sp, #200	; 0xc8
 800ccf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccfa:	2000      	movs	r0, #0
 800ccfc:	b032      	add	sp, #200	; 0xc8
 800ccfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd02:	200b      	movs	r0, #11
 800cd04:	4770      	bx	lr
 800cd06:	200a      	movs	r0, #10
 800cd08:	e7f4      	b.n	800ccf4 <rclc_executor_init+0xcc>
 800cd0a:	bf00      	nop
 800cd0c:	f3af 8000 	nop.w
 800cd10:	3b9aca00 	.word	0x3b9aca00
 800cd14:	00000000 	.word	0x00000000
 800cd18:	0801d438 	.word	0x0801d438
 800cd1c:	0800cb89 	.word	0x0800cb89

0800cd20 <rclc_executor_add_timer>:
 800cd20:	b351      	cbz	r1, 800cd78 <rclc_executor_add_timer+0x58>
 800cd22:	fab0 f280 	clz	r2, r0
 800cd26:	b570      	push	{r4, r5, r6, lr}
 800cd28:	0952      	lsrs	r2, r2, #5
 800cd2a:	4604      	mov	r4, r0
 800cd2c:	b1e0      	cbz	r0, 800cd68 <rclc_executor_add_timer+0x48>
 800cd2e:	e9d0 0303 	ldrd	r0, r3, [r0, #12]
 800cd32:	4283      	cmp	r3, r0
 800cd34:	d301      	bcc.n	800cd3a <rclc_executor_add_timer+0x1a>
 800cd36:	2001      	movs	r0, #1
 800cd38:	bd70      	pop	{r4, r5, r6, pc}
 800cd3a:	68a0      	ldr	r0, [r4, #8]
 800cd3c:	019d      	lsls	r5, r3, #6
 800cd3e:	1c5e      	adds	r6, r3, #1
 800cd40:	eb00 1383 	add.w	r3, r0, r3, lsl #6
 800cd44:	6059      	str	r1, [r3, #4]
 800cd46:	2102      	movs	r1, #2
 800cd48:	5341      	strh	r1, [r0, r5]
 800cd4a:	2101      	movs	r1, #1
 800cd4c:	f104 0518 	add.w	r5, r4, #24
 800cd50:	62da      	str	r2, [r3, #44]	; 0x2c
 800cd52:	8719      	strh	r1, [r3, #56]	; 0x38
 800cd54:	4628      	mov	r0, r5
 800cd56:	6126      	str	r6, [r4, #16]
 800cd58:	f008 fbda 	bl	8015510 <rcl_wait_set_is_valid>
 800cd5c:	b930      	cbnz	r0, 800cd6c <rclc_executor_add_timer+0x4c>
 800cd5e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800cd60:	2000      	movs	r0, #0
 800cd62:	3301      	adds	r3, #1
 800cd64:	6523      	str	r3, [r4, #80]	; 0x50
 800cd66:	bd70      	pop	{r4, r5, r6, pc}
 800cd68:	200b      	movs	r0, #11
 800cd6a:	bd70      	pop	{r4, r5, r6, pc}
 800cd6c:	4628      	mov	r0, r5
 800cd6e:	f008 fbd5 	bl	801551c <rcl_wait_set_fini>
 800cd72:	2800      	cmp	r0, #0
 800cd74:	d0f3      	beq.n	800cd5e <rclc_executor_add_timer+0x3e>
 800cd76:	bd70      	pop	{r4, r5, r6, pc}
 800cd78:	200b      	movs	r0, #11
 800cd7a:	4770      	bx	lr

0800cd7c <rclc_executor_add_service>:
 800cd7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd7e:	9d06      	ldr	r5, [sp, #24]
 800cd80:	4604      	mov	r4, r0
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	bf18      	it	ne
 800cd86:	2d00      	cmpne	r5, #0
 800cd88:	bf0c      	ite	eq
 800cd8a:	2001      	moveq	r0, #1
 800cd8c:	2000      	movne	r0, #0
 800cd8e:	2a00      	cmp	r2, #0
 800cd90:	bf08      	it	eq
 800cd92:	f040 0001 	orreq.w	r0, r0, #1
 800cd96:	2900      	cmp	r1, #0
 800cd98:	bf08      	it	eq
 800cd9a:	f040 0001 	orreq.w	r0, r0, #1
 800cd9e:	bb40      	cbnz	r0, 800cdf2 <rclc_executor_add_service+0x76>
 800cda0:	fab4 f684 	clz	r6, r4
 800cda4:	0976      	lsrs	r6, r6, #5
 800cda6:	b324      	cbz	r4, 800cdf2 <rclc_executor_add_service+0x76>
 800cda8:	e9d4 7003 	ldrd	r7, r0, [r4, #12]
 800cdac:	42b8      	cmp	r0, r7
 800cdae:	d301      	bcc.n	800cdb4 <rclc_executor_add_service+0x38>
 800cdb0:	2001      	movs	r0, #1
 800cdb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdb4:	68a7      	ldr	r7, [r4, #8]
 800cdb6:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800cdba:	f100 0c01 	add.w	ip, r0, #1
 800cdbe:	eb07 1080 	add.w	r0, r7, r0, lsl #6
 800cdc2:	6283      	str	r3, [r0, #40]	; 0x28
 800cdc4:	2305      	movs	r3, #5
 800cdc6:	6305      	str	r5, [r0, #48]	; 0x30
 800cdc8:	f104 0518 	add.w	r5, r4, #24
 800cdcc:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800cdd0:	f827 300e 	strh.w	r3, [r7, lr]
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	62c6      	str	r6, [r0, #44]	; 0x2c
 800cdd8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 800cddc:	4628      	mov	r0, r5
 800cdde:	f8c4 c010 	str.w	ip, [r4, #16]
 800cde2:	f008 fb95 	bl	8015510 <rcl_wait_set_is_valid>
 800cde6:	b930      	cbnz	r0, 800cdf6 <rclc_executor_add_service+0x7a>
 800cde8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cdea:	2000      	movs	r0, #0
 800cdec:	3301      	adds	r3, #1
 800cdee:	65a3      	str	r3, [r4, #88]	; 0x58
 800cdf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdf2:	200b      	movs	r0, #11
 800cdf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdf6:	4628      	mov	r0, r5
 800cdf8:	f008 fb90 	bl	801551c <rcl_wait_set_fini>
 800cdfc:	2800      	cmp	r0, #0
 800cdfe:	d0f3      	beq.n	800cde8 <rclc_executor_add_service+0x6c>
 800ce00:	e7d7      	b.n	800cdb2 <rclc_executor_add_service+0x36>
 800ce02:	bf00      	nop

0800ce04 <rclc_executor_prepare>:
 800ce04:	2800      	cmp	r0, #0
 800ce06:	d044      	beq.n	800ce92 <rclc_executor_prepare+0x8e>
 800ce08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce0a:	f100 0518 	add.w	r5, r0, #24
 800ce0e:	b09b      	sub	sp, #108	; 0x6c
 800ce10:	4604      	mov	r4, r0
 800ce12:	4628      	mov	r0, r5
 800ce14:	f008 fb7c 	bl	8015510 <rcl_wait_set_is_valid>
 800ce18:	b110      	cbz	r0, 800ce20 <rclc_executor_prepare+0x1c>
 800ce1a:	2000      	movs	r0, #0
 800ce1c:	b01b      	add	sp, #108	; 0x6c
 800ce1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce20:	4628      	mov	r0, r5
 800ce22:	f008 fb7b 	bl	801551c <rcl_wait_set_fini>
 800ce26:	2800      	cmp	r0, #0
 800ce28:	d130      	bne.n	800ce8c <rclc_executor_prepare+0x88>
 800ce2a:	a80c      	add	r0, sp, #48	; 0x30
 800ce2c:	ae04      	add	r6, sp, #16
 800ce2e:	f008 fb5b 	bl	80154e8 <rcl_get_zero_initialized_wait_set>
 800ce32:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800ce36:	46ae      	mov	lr, r5
 800ce38:	6967      	ldr	r7, [r4, #20]
 800ce3a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ce3e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ce42:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ce46:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ce4a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ce4e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ce52:	f8dc 3000 	ldr.w	r3, [ip]
 800ce56:	f8ce 3000 	str.w	r3, [lr]
 800ce5a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ce5c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	4628      	mov	r0, r5
 800ce62:	6862      	ldr	r2, [r4, #4]
 800ce64:	6033      	str	r3, [r6, #0]
 800ce66:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800ce68:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ce6a:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800ce6e:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	; 0x50
 800ce72:	e9cd 2100 	strd	r2, r1, [sp]
 800ce76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ce78:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800ce7a:	f008 fe4f 	bl	8015b1c <rcl_wait_set_init>
 800ce7e:	2800      	cmp	r0, #0
 800ce80:	d0cc      	beq.n	800ce1c <rclc_executor_prepare+0x18>
 800ce82:	900b      	str	r0, [sp, #44]	; 0x2c
 800ce84:	f000 fb84 	bl	800d590 <rcutils_reset_error>
 800ce88:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ce8a:	e7c7      	b.n	800ce1c <rclc_executor_prepare+0x18>
 800ce8c:	f000 fb80 	bl	800d590 <rcutils_reset_error>
 800ce90:	e7cb      	b.n	800ce2a <rclc_executor_prepare+0x26>
 800ce92:	200b      	movs	r0, #11
 800ce94:	4770      	bx	lr
 800ce96:	bf00      	nop

0800ce98 <rclc_executor_spin_some.part.0>:
 800ce98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce9c:	4605      	mov	r5, r0
 800ce9e:	4691      	mov	r9, r2
 800cea0:	4698      	mov	r8, r3
 800cea2:	f7ff ffaf 	bl	800ce04 <rclc_executor_prepare>
 800cea6:	f105 0618 	add.w	r6, r5, #24
 800ceaa:	4630      	mov	r0, r6
 800ceac:	f008 fc02 	bl	80156b4 <rcl_wait_set_clear>
 800ceb0:	4607      	mov	r7, r0
 800ceb2:	2800      	cmp	r0, #0
 800ceb4:	f040 80a8 	bne.w	800d008 <rclc_executor_spin_some.part.0+0x170>
 800ceb8:	68eb      	ldr	r3, [r5, #12]
 800ceba:	b30b      	cbz	r3, 800cf00 <rclc_executor_spin_some.part.0+0x68>
 800cebc:	4604      	mov	r4, r0
 800cebe:	68a9      	ldr	r1, [r5, #8]
 800cec0:	01a2      	lsls	r2, r4, #6
 800cec2:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800cec6:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 800ceca:	b1cb      	cbz	r3, 800cf00 <rclc_executor_spin_some.part.0+0x68>
 800cecc:	5c8b      	ldrb	r3, [r1, r2]
 800cece:	2b0a      	cmp	r3, #10
 800ced0:	f200 80de 	bhi.w	800d090 <rclc_executor_spin_some.part.0+0x1f8>
 800ced4:	e8df f003 	tbb	[pc, r3]
 800ced8:	8da99d9d 	.word	0x8da99d9d
 800cedc:	0606068d 	.word	0x0606068d
 800cee0:	c1ce      	.short	0xc1ce
 800cee2:	b5          	.byte	0xb5
 800cee3:	00          	.byte	0x00
 800cee4:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800cee8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ceec:	4630      	mov	r0, r6
 800ceee:	f008 ff31 	bl	8015d54 <rcl_wait_set_add_service>
 800cef2:	2800      	cmp	r0, #0
 800cef4:	f040 8087 	bne.w	800d006 <rclc_executor_spin_some.part.0+0x16e>
 800cef8:	3401      	adds	r4, #1
 800cefa:	68eb      	ldr	r3, [r5, #12]
 800cefc:	429c      	cmp	r4, r3
 800cefe:	d3de      	bcc.n	800cebe <rclc_executor_spin_some.part.0+0x26>
 800cf00:	4643      	mov	r3, r8
 800cf02:	464a      	mov	r2, r9
 800cf04:	4630      	mov	r0, r6
 800cf06:	f008 ff53 	bl	8015db0 <rcl_wait>
 800cf0a:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	f000 80c6 	beq.w	800d0a0 <rclc_executor_spin_some.part.0+0x208>
 800cf14:	2b01      	cmp	r3, #1
 800cf16:	f040 80bb 	bne.w	800d090 <rclc_executor_spin_some.part.0+0x1f8>
 800cf1a:	68eb      	ldr	r3, [r5, #12]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	f000 8159 	beq.w	800d1d4 <rclc_executor_spin_some.part.0+0x33c>
 800cf22:	2400      	movs	r4, #0
 800cf24:	f240 1991 	movw	r9, #401	; 0x191
 800cf28:	46a0      	mov	r8, r4
 800cf2a:	e00a      	b.n	800cf42 <rclc_executor_spin_some.part.0+0xaa>
 800cf2c:	f7ff fb28 	bl	800c580 <_rclc_check_for_new_data>
 800cf30:	4604      	mov	r4, r0
 800cf32:	b110      	cbz	r0, 800cf3a <rclc_executor_spin_some.part.0+0xa2>
 800cf34:	4548      	cmp	r0, r9
 800cf36:	f040 80b1 	bne.w	800d09c <rclc_executor_spin_some.part.0+0x204>
 800cf3a:	68eb      	ldr	r3, [r5, #12]
 800cf3c:	4598      	cmp	r8, r3
 800cf3e:	f080 8126 	bcs.w	800d18e <rclc_executor_spin_some.part.0+0x2f6>
 800cf42:	68aa      	ldr	r2, [r5, #8]
 800cf44:	4631      	mov	r1, r6
 800cf46:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800cf4a:	f108 0801 	add.w	r8, r8, #1
 800cf4e:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800cf52:	f1bc 0f00 	cmp.w	ip, #0
 800cf56:	d1e9      	bne.n	800cf2c <rclc_executor_spin_some.part.0+0x94>
 800cf58:	4619      	mov	r1, r3
 800cf5a:	4610      	mov	r0, r2
 800cf5c:	e9d5 3220 	ldrd	r3, r2, [r5, #128]	; 0x80
 800cf60:	4798      	blx	r3
 800cf62:	2800      	cmp	r0, #0
 800cf64:	f000 809a 	beq.w	800d09c <rclc_executor_spin_some.part.0+0x204>
 800cf68:	68eb      	ldr	r3, [r5, #12]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	f000 8096 	beq.w	800d09c <rclc_executor_spin_some.part.0+0x204>
 800cf70:	f04f 0800 	mov.w	r8, #0
 800cf74:	f240 1991 	movw	r9, #401	; 0x191
 800cf78:	e009      	b.n	800cf8e <rclc_executor_spin_some.part.0+0xf6>
 800cf7a:	f7ff fb4f 	bl	800c61c <_rclc_take_new_data>
 800cf7e:	4604      	mov	r4, r0
 800cf80:	b110      	cbz	r0, 800cf88 <rclc_executor_spin_some.part.0+0xf0>
 800cf82:	4548      	cmp	r0, r9
 800cf84:	f040 808a 	bne.w	800d09c <rclc_executor_spin_some.part.0+0x204>
 800cf88:	68eb      	ldr	r3, [r5, #12]
 800cf8a:	4598      	cmp	r8, r3
 800cf8c:	d209      	bcs.n	800cfa2 <rclc_executor_spin_some.part.0+0x10a>
 800cf8e:	68a8      	ldr	r0, [r5, #8]
 800cf90:	4631      	mov	r1, r6
 800cf92:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800cf96:	f108 0801 	add.w	r8, r8, #1
 800cf9a:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800cf9e:	2a00      	cmp	r2, #0
 800cfa0:	d1eb      	bne.n	800cf7a <rclc_executor_spin_some.part.0+0xe2>
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d07a      	beq.n	800d09c <rclc_executor_spin_some.part.0+0x204>
 800cfa6:	2600      	movs	r6, #0
 800cfa8:	e00e      	b.n	800cfc8 <rclc_executor_spin_some.part.0+0x130>
 800cfaa:	f812 200c 	ldrb.w	r2, [r2, ip]
 800cfae:	2a08      	cmp	r2, #8
 800cfb0:	f000 80fc 	beq.w	800d1ac <rclc_executor_spin_some.part.0+0x314>
 800cfb4:	2a09      	cmp	r2, #9
 800cfb6:	f000 80ee 	beq.w	800d196 <rclc_executor_spin_some.part.0+0x2fe>
 800cfba:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 800cfbe:	b98a      	cbnz	r2, 800cfe4 <rclc_executor_spin_some.part.0+0x14c>
 800cfc0:	3601      	adds	r6, #1
 800cfc2:	429e      	cmp	r6, r3
 800cfc4:	d267      	bcs.n	800d096 <rclc_executor_spin_some.part.0+0x1fe>
 800cfc6:	2400      	movs	r4, #0
 800cfc8:	68aa      	ldr	r2, [r5, #8]
 800cfca:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800cfce:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800cfd2:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
 800cfd6:	2900      	cmp	r1, #0
 800cfd8:	d060      	beq.n	800d09c <rclc_executor_spin_some.part.0+0x204>
 800cfda:	7841      	ldrb	r1, [r0, #1]
 800cfdc:	2900      	cmp	r1, #0
 800cfde:	d0e4      	beq.n	800cfaa <rclc_executor_spin_some.part.0+0x112>
 800cfe0:	2901      	cmp	r1, #1
 800cfe2:	d1ed      	bne.n	800cfc0 <rclc_executor_spin_some.part.0+0x128>
 800cfe4:	f7ff fc8e 	bl	800c904 <_rclc_execute.part.0>
 800cfe8:	2800      	cmp	r0, #0
 800cfea:	f040 80b5 	bne.w	800d158 <rclc_executor_spin_some.part.0+0x2c0>
 800cfee:	68eb      	ldr	r3, [r5, #12]
 800cff0:	e7e6      	b.n	800cfc0 <rclc_executor_spin_some.part.0+0x128>
 800cff2:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800cff6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cffa:	4630      	mov	r0, r6
 800cffc:	f008 fe7e 	bl	8015cfc <rcl_wait_set_add_client>
 800d000:	2800      	cmp	r0, #0
 800d002:	f43f af79 	beq.w	800cef8 <rclc_executor_spin_some.part.0+0x60>
 800d006:	4607      	mov	r7, r0
 800d008:	f000 fac2 	bl	800d590 <rcutils_reset_error>
 800d00c:	4638      	mov	r0, r7
 800d00e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d012:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800d016:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d01a:	4630      	mov	r0, r6
 800d01c:	f008 fb1e 	bl	801565c <rcl_wait_set_add_subscription>
 800d020:	2800      	cmp	r0, #0
 800d022:	f43f af69 	beq.w	800cef8 <rclc_executor_spin_some.part.0+0x60>
 800d026:	4607      	mov	r7, r0
 800d028:	e7ee      	b.n	800d008 <rclc_executor_spin_some.part.0+0x170>
 800d02a:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800d02e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d032:	4630      	mov	r0, r6
 800d034:	f008 fe32 	bl	8015c9c <rcl_wait_set_add_timer>
 800d038:	2800      	cmp	r0, #0
 800d03a:	f43f af5d 	beq.w	800cef8 <rclc_executor_spin_some.part.0+0x60>
 800d03e:	4607      	mov	r7, r0
 800d040:	e7e2      	b.n	800d008 <rclc_executor_spin_some.part.0+0x170>
 800d042:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800d046:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d04a:	4630      	mov	r0, r6
 800d04c:	f008 fdfa 	bl	8015c44 <rcl_wait_set_add_guard_condition>
 800d050:	2800      	cmp	r0, #0
 800d052:	f43f af51 	beq.w	800cef8 <rclc_executor_spin_some.part.0+0x60>
 800d056:	4607      	mov	r7, r0
 800d058:	e7d6      	b.n	800d008 <rclc_executor_spin_some.part.0+0x170>
 800d05a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d05e:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800d062:	4630      	mov	r0, r6
 800d064:	3110      	adds	r1, #16
 800d066:	f009 fb77 	bl	8016758 <rcl_action_wait_set_add_action_server>
 800d06a:	2800      	cmp	r0, #0
 800d06c:	f43f af44 	beq.w	800cef8 <rclc_executor_spin_some.part.0+0x60>
 800d070:	4607      	mov	r7, r0
 800d072:	e7c9      	b.n	800d008 <rclc_executor_spin_some.part.0+0x170>
 800d074:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d078:	2300      	movs	r3, #0
 800d07a:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800d07e:	4630      	mov	r0, r6
 800d080:	3110      	adds	r1, #16
 800d082:	f009 f941 	bl	8016308 <rcl_action_wait_set_add_action_client>
 800d086:	2800      	cmp	r0, #0
 800d088:	f43f af36 	beq.w	800cef8 <rclc_executor_spin_some.part.0+0x60>
 800d08c:	4607      	mov	r7, r0
 800d08e:	e7bb      	b.n	800d008 <rclc_executor_spin_some.part.0+0x170>
 800d090:	2701      	movs	r7, #1
 800d092:	f000 fa7d 	bl	800d590 <rcutils_reset_error>
 800d096:	4638      	mov	r0, r7
 800d098:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d09c:	4627      	mov	r7, r4
 800d09e:	e7fa      	b.n	800d096 <rclc_executor_spin_some.part.0+0x1fe>
 800d0a0:	68eb      	ldr	r3, [r5, #12]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	f000 8093 	beq.w	800d1ce <rclc_executor_spin_some.part.0+0x336>
 800d0a8:	2400      	movs	r4, #0
 800d0aa:	f240 1991 	movw	r9, #401	; 0x191
 800d0ae:	46a0      	mov	r8, r4
 800d0b0:	e008      	b.n	800d0c4 <rclc_executor_spin_some.part.0+0x22c>
 800d0b2:	f7ff fa65 	bl	800c580 <_rclc_check_for_new_data>
 800d0b6:	4604      	mov	r4, r0
 800d0b8:	b108      	cbz	r0, 800d0be <rclc_executor_spin_some.part.0+0x226>
 800d0ba:	4548      	cmp	r0, r9
 800d0bc:	d1ee      	bne.n	800d09c <rclc_executor_spin_some.part.0+0x204>
 800d0be:	68eb      	ldr	r3, [r5, #12]
 800d0c0:	4598      	cmp	r8, r3
 800d0c2:	d266      	bcs.n	800d192 <rclc_executor_spin_some.part.0+0x2fa>
 800d0c4:	68aa      	ldr	r2, [r5, #8]
 800d0c6:	4631      	mov	r1, r6
 800d0c8:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800d0cc:	f108 0801 	add.w	r8, r8, #1
 800d0d0:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800d0d4:	f1bc 0f00 	cmp.w	ip, #0
 800d0d8:	d1eb      	bne.n	800d0b2 <rclc_executor_spin_some.part.0+0x21a>
 800d0da:	4619      	mov	r1, r3
 800d0dc:	4610      	mov	r0, r2
 800d0de:	e9d5 3220 	ldrd	r3, r2, [r5, #128]	; 0x80
 800d0e2:	4798      	blx	r3
 800d0e4:	2800      	cmp	r0, #0
 800d0e6:	d0d9      	beq.n	800d09c <rclc_executor_spin_some.part.0+0x204>
 800d0e8:	68eb      	ldr	r3, [r5, #12]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d0d6      	beq.n	800d09c <rclc_executor_spin_some.part.0+0x204>
 800d0ee:	f04f 0a00 	mov.w	sl, #0
 800d0f2:	f240 1891 	movw	r8, #401	; 0x191
 800d0f6:	f240 2959 	movw	r9, #601	; 0x259
 800d0fa:	e00e      	b.n	800d11a <rclc_executor_spin_some.part.0+0x282>
 800d0fc:	f813 300b 	ldrb.w	r3, [r3, fp]
 800d100:	2b08      	cmp	r3, #8
 800d102:	d034      	beq.n	800d16e <rclc_executor_spin_some.part.0+0x2d6>
 800d104:	2b09      	cmp	r3, #9
 800d106:	d029      	beq.n	800d15c <rclc_executor_spin_some.part.0+0x2c4>
 800d108:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800d10c:	bb03      	cbnz	r3, 800d150 <rclc_executor_spin_some.part.0+0x2b8>
 800d10e:	f10a 0a01 	add.w	sl, sl, #1
 800d112:	68eb      	ldr	r3, [r5, #12]
 800d114:	459a      	cmp	sl, r3
 800d116:	d2be      	bcs.n	800d096 <rclc_executor_spin_some.part.0+0x1fe>
 800d118:	2400      	movs	r4, #0
 800d11a:	68a8      	ldr	r0, [r5, #8]
 800d11c:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800d120:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800d124:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d0b7      	beq.n	800d09c <rclc_executor_spin_some.part.0+0x204>
 800d12c:	4631      	mov	r1, r6
 800d12e:	f7ff fa75 	bl	800c61c <_rclc_take_new_data>
 800d132:	2800      	cmp	r0, #0
 800d134:	bf18      	it	ne
 800d136:	4540      	cmpne	r0, r8
 800d138:	d001      	beq.n	800d13e <rclc_executor_spin_some.part.0+0x2a6>
 800d13a:	4548      	cmp	r0, r9
 800d13c:	d10c      	bne.n	800d158 <rclc_executor_spin_some.part.0+0x2c0>
 800d13e:	68ab      	ldr	r3, [r5, #8]
 800d140:	eb13 000b 	adds.w	r0, r3, fp
 800d144:	d021      	beq.n	800d18a <rclc_executor_spin_some.part.0+0x2f2>
 800d146:	7842      	ldrb	r2, [r0, #1]
 800d148:	2a00      	cmp	r2, #0
 800d14a:	d0d7      	beq.n	800d0fc <rclc_executor_spin_some.part.0+0x264>
 800d14c:	2a01      	cmp	r2, #1
 800d14e:	d1de      	bne.n	800d10e <rclc_executor_spin_some.part.0+0x276>
 800d150:	f7ff fbd8 	bl	800c904 <_rclc_execute.part.0>
 800d154:	2800      	cmp	r0, #0
 800d156:	d0da      	beq.n	800d10e <rclc_executor_spin_some.part.0+0x276>
 800d158:	4607      	mov	r7, r0
 800d15a:	e79c      	b.n	800d096 <rclc_executor_spin_some.part.0+0x1fe>
 800d15c:	6843      	ldr	r3, [r0, #4]
 800d15e:	6a1a      	ldr	r2, [r3, #32]
 800d160:	2a00      	cmp	r2, #0
 800d162:	d1f5      	bne.n	800d150 <rclc_executor_spin_some.part.0+0x2b8>
 800d164:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d0d0      	beq.n	800d10e <rclc_executor_spin_some.part.0+0x276>
 800d16c:	e7f0      	b.n	800d150 <rclc_executor_spin_some.part.0+0x2b8>
 800d16e:	6843      	ldr	r3, [r0, #4]
 800d170:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d172:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800d176:	d1eb      	bne.n	800d150 <rclc_executor_spin_some.part.0+0x2b8>
 800d178:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800d17c:	2a00      	cmp	r2, #0
 800d17e:	d1e7      	bne.n	800d150 <rclc_executor_spin_some.part.0+0x2b8>
 800d180:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d184:	2b00      	cmp	r3, #0
 800d186:	d0c2      	beq.n	800d10e <rclc_executor_spin_some.part.0+0x276>
 800d188:	e7e2      	b.n	800d150 <rclc_executor_spin_some.part.0+0x2b8>
 800d18a:	270b      	movs	r7, #11
 800d18c:	e783      	b.n	800d096 <rclc_executor_spin_some.part.0+0x1fe>
 800d18e:	68aa      	ldr	r2, [r5, #8]
 800d190:	e6e2      	b.n	800cf58 <rclc_executor_spin_some.part.0+0xc0>
 800d192:	68aa      	ldr	r2, [r5, #8]
 800d194:	e7a1      	b.n	800d0da <rclc_executor_spin_some.part.0+0x242>
 800d196:	6842      	ldr	r2, [r0, #4]
 800d198:	6a11      	ldr	r1, [r2, #32]
 800d19a:	2900      	cmp	r1, #0
 800d19c:	f47f af22 	bne.w	800cfe4 <rclc_executor_spin_some.part.0+0x14c>
 800d1a0:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800d1a4:	2a00      	cmp	r2, #0
 800d1a6:	f43f af0b 	beq.w	800cfc0 <rclc_executor_spin_some.part.0+0x128>
 800d1aa:	e71b      	b.n	800cfe4 <rclc_executor_spin_some.part.0+0x14c>
 800d1ac:	6842      	ldr	r2, [r0, #4]
 800d1ae:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800d1b0:	f031 417f 	bics.w	r1, r1, #4278190080	; 0xff000000
 800d1b4:	f47f af16 	bne.w	800cfe4 <rclc_executor_spin_some.part.0+0x14c>
 800d1b8:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
 800d1bc:	2900      	cmp	r1, #0
 800d1be:	f47f af11 	bne.w	800cfe4 <rclc_executor_spin_some.part.0+0x14c>
 800d1c2:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 800d1c6:	2a00      	cmp	r2, #0
 800d1c8:	f43f aefa 	beq.w	800cfc0 <rclc_executor_spin_some.part.0+0x128>
 800d1cc:	e70a      	b.n	800cfe4 <rclc_executor_spin_some.part.0+0x14c>
 800d1ce:	68aa      	ldr	r2, [r5, #8]
 800d1d0:	461c      	mov	r4, r3
 800d1d2:	e782      	b.n	800d0da <rclc_executor_spin_some.part.0+0x242>
 800d1d4:	68aa      	ldr	r2, [r5, #8]
 800d1d6:	461c      	mov	r4, r3
 800d1d8:	e6be      	b.n	800cf58 <rclc_executor_spin_some.part.0+0xc0>
 800d1da:	bf00      	nop

0800d1dc <rclc_executor_spin>:
 800d1dc:	b1d0      	cbz	r0, 800d214 <rclc_executor_spin+0x38>
 800d1de:	b510      	push	{r4, lr}
 800d1e0:	4604      	mov	r4, r0
 800d1e2:	b082      	sub	sp, #8
 800d1e4:	e004      	b.n	800d1f0 <rclc_executor_spin+0x14>
 800d1e6:	f7ff fe57 	bl	800ce98 <rclc_executor_spin_some.part.0>
 800d1ea:	f030 0302 	bics.w	r3, r0, #2
 800d1ee:	d10f      	bne.n	800d210 <rclc_executor_spin+0x34>
 800d1f0:	6860      	ldr	r0, [r4, #4]
 800d1f2:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
 800d1f6:	e9cd 2300 	strd	r2, r3, [sp]
 800d1fa:	f006 fc7d 	bl	8013af8 <rcl_context_is_valid>
 800d1fe:	4601      	mov	r1, r0
 800d200:	4620      	mov	r0, r4
 800d202:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d206:	2900      	cmp	r1, #0
 800d208:	d1ed      	bne.n	800d1e6 <rclc_executor_spin+0xa>
 800d20a:	f000 f9c1 	bl	800d590 <rcutils_reset_error>
 800d20e:	2001      	movs	r0, #1
 800d210:	b002      	add	sp, #8
 800d212:	bd10      	pop	{r4, pc}
 800d214:	200b      	movs	r0, #11
 800d216:	4770      	bx	lr

0800d218 <rclc_executor_handle_counters_zero_init>:
 800d218:	b130      	cbz	r0, 800d228 <rclc_executor_handle_counters_zero_init+0x10>
 800d21a:	2220      	movs	r2, #32
 800d21c:	2100      	movs	r1, #0
 800d21e:	b508      	push	{r3, lr}
 800d220:	f00e fb30 	bl	801b884 <memset>
 800d224:	2000      	movs	r0, #0
 800d226:	bd08      	pop	{r3, pc}
 800d228:	200b      	movs	r0, #11
 800d22a:	4770      	bx	lr
 800d22c:	0000      	movs	r0, r0
	...

0800d230 <rclc_executor_handle_init>:
 800d230:	4603      	mov	r3, r0
 800d232:	b178      	cbz	r0, 800d254 <rclc_executor_handle_init+0x24>
 800d234:	2200      	movs	r2, #0
 800d236:	f04f 0c0b 	mov.w	ip, #11
 800d23a:	6341      	str	r1, [r0, #52]	; 0x34
 800d23c:	4610      	mov	r0, r2
 800d23e:	f8a3 c000 	strh.w	ip, [r3]
 800d242:	631a      	str	r2, [r3, #48]	; 0x30
 800d244:	871a      	strh	r2, [r3, #56]	; 0x38
 800d246:	ed9f 7b04 	vldr	d7, [pc, #16]	; 800d258 <rclc_executor_handle_init+0x28>
 800d24a:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800d24e:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
 800d252:	4770      	bx	lr
 800d254:	200b      	movs	r0, #11
 800d256:	4770      	bx	lr
	...

0800d260 <rclc_support_init>:
 800d260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d264:	b086      	sub	sp, #24
 800d266:	b3bb      	cbz	r3, 800d2d8 <rclc_support_init+0x78>
 800d268:	4606      	mov	r6, r0
 800d26a:	b3a8      	cbz	r0, 800d2d8 <rclc_support_init+0x78>
 800d26c:	461c      	mov	r4, r3
 800d26e:	460f      	mov	r7, r1
 800d270:	4690      	mov	r8, r2
 800d272:	f006 fde1 	bl	8013e38 <rcl_get_zero_initialized_init_options>
 800d276:	f104 050c 	add.w	r5, r4, #12
 800d27a:	9005      	str	r0, [sp, #20]
 800d27c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d280:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d284:	a805      	add	r0, sp, #20
 800d286:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800d28a:	f006 fdd7 	bl	8013e3c <rcl_init_options_init>
 800d28e:	4605      	mov	r5, r0
 800d290:	b9e0      	cbnz	r0, 800d2cc <rclc_support_init+0x6c>
 800d292:	ad02      	add	r5, sp, #8
 800d294:	4628      	mov	r0, r5
 800d296:	f006 fc25 	bl	8013ae4 <rcl_get_zero_initialized_context>
 800d29a:	4633      	mov	r3, r6
 800d29c:	aa05      	add	r2, sp, #20
 800d29e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d2a2:	e886 0003 	stmia.w	r6, {r0, r1}
 800d2a6:	4641      	mov	r1, r8
 800d2a8:	4638      	mov	r0, r7
 800d2aa:	f006 fc8b 	bl	8013bc4 <rcl_init>
 800d2ae:	4605      	mov	r5, r0
 800d2b0:	b9b8      	cbnz	r0, 800d2e2 <rclc_support_init+0x82>
 800d2b2:	4622      	mov	r2, r4
 800d2b4:	f106 010c 	add.w	r1, r6, #12
 800d2b8:	2003      	movs	r0, #3
 800d2ba:	60b4      	str	r4, [r6, #8]
 800d2bc:	f007 fcee 	bl	8014c9c <rcl_clock_init>
 800d2c0:	4605      	mov	r5, r0
 800d2c2:	b970      	cbnz	r0, 800d2e2 <rclc_support_init+0x82>
 800d2c4:	a805      	add	r0, sp, #20
 800d2c6:	f006 fe15 	bl	8013ef4 <rcl_init_options_fini>
 800d2ca:	b108      	cbz	r0, 800d2d0 <rclc_support_init+0x70>
 800d2cc:	f000 f960 	bl	800d590 <rcutils_reset_error>
 800d2d0:	4628      	mov	r0, r5
 800d2d2:	b006      	add	sp, #24
 800d2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2d8:	250b      	movs	r5, #11
 800d2da:	4628      	mov	r0, r5
 800d2dc:	b006      	add	sp, #24
 800d2de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2e2:	f000 f955 	bl	800d590 <rcutils_reset_error>
 800d2e6:	a805      	add	r0, sp, #20
 800d2e8:	f006 fe04 	bl	8013ef4 <rcl_init_options_fini>
 800d2ec:	2800      	cmp	r0, #0
 800d2ee:	d0ef      	beq.n	800d2d0 <rclc_support_init+0x70>
 800d2f0:	e7ec      	b.n	800d2cc <rclc_support_init+0x6c>
 800d2f2:	bf00      	nop

0800d2f4 <rclc_node_init_default>:
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	bf18      	it	ne
 800d2f8:	2a00      	cmpne	r2, #0
 800d2fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d2fe:	4616      	mov	r6, r2
 800d300:	bf0c      	ite	eq
 800d302:	2201      	moveq	r2, #1
 800d304:	2200      	movne	r2, #0
 800d306:	b0a3      	sub	sp, #140	; 0x8c
 800d308:	2900      	cmp	r1, #0
 800d30a:	bf08      	it	eq
 800d30c:	f042 0201 	orreq.w	r2, r2, #1
 800d310:	bb22      	cbnz	r2, 800d35c <rclc_node_init_default+0x68>
 800d312:	4604      	mov	r4, r0
 800d314:	b310      	cbz	r0, 800d35c <rclc_node_init_default+0x68>
 800d316:	f10d 0810 	add.w	r8, sp, #16
 800d31a:	461f      	mov	r7, r3
 800d31c:	460d      	mov	r5, r1
 800d31e:	f10d 0918 	add.w	r9, sp, #24
 800d322:	4640      	mov	r0, r8
 800d324:	f006 fe92 	bl	801404c <rcl_get_zero_initialized_node>
 800d328:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d32c:	e884 0003 	stmia.w	r4, {r0, r1}
 800d330:	4648      	mov	r0, r9
 800d332:	f007 f825 	bl	8014380 <rcl_node_get_default_options>
 800d336:	4640      	mov	r0, r8
 800d338:	f006 fe88 	bl	801404c <rcl_get_zero_initialized_node>
 800d33c:	f8cd 9000 	str.w	r9, [sp]
 800d340:	463b      	mov	r3, r7
 800d342:	4632      	mov	r2, r6
 800d344:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d348:	e884 0003 	stmia.w	r4, {r0, r1}
 800d34c:	4629      	mov	r1, r5
 800d34e:	4620      	mov	r0, r4
 800d350:	f006 fe86 	bl	8014060 <rcl_node_init>
 800d354:	b930      	cbnz	r0, 800d364 <rclc_node_init_default+0x70>
 800d356:	b023      	add	sp, #140	; 0x8c
 800d358:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d35c:	200b      	movs	r0, #11
 800d35e:	b023      	add	sp, #140	; 0x8c
 800d360:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d364:	9003      	str	r0, [sp, #12]
 800d366:	f000 f913 	bl	800d590 <rcutils_reset_error>
 800d36a:	f000 f911 	bl	800d590 <rcutils_reset_error>
 800d36e:	9803      	ldr	r0, [sp, #12]
 800d370:	b023      	add	sp, #140	; 0x8c
 800d372:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d376:	bf00      	nop

0800d378 <rclc_publisher_init_best_effort>:
 800d378:	2b00      	cmp	r3, #0
 800d37a:	bf18      	it	ne
 800d37c:	2a00      	cmpne	r2, #0
 800d37e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d382:	4616      	mov	r6, r2
 800d384:	bf0c      	ite	eq
 800d386:	2201      	moveq	r2, #1
 800d388:	2200      	movne	r2, #0
 800d38a:	b0a0      	sub	sp, #128	; 0x80
 800d38c:	2900      	cmp	r1, #0
 800d38e:	bf08      	it	eq
 800d390:	f042 0201 	orreq.w	r2, r2, #1
 800d394:	bb1a      	cbnz	r2, 800d3de <rclc_publisher_init_best_effort+0x66>
 800d396:	4604      	mov	r4, r0
 800d398:	b308      	cbz	r0, 800d3de <rclc_publisher_init_best_effort+0x66>
 800d39a:	f10d 0810 	add.w	r8, sp, #16
 800d39e:	461f      	mov	r7, r3
 800d3a0:	460d      	mov	r5, r1
 800d3a2:	f7fe ffc5 	bl	800c330 <rcl_get_zero_initialized_publisher>
 800d3a6:	6020      	str	r0, [r4, #0]
 800d3a8:	4640      	mov	r0, r8
 800d3aa:	f7ff f863 	bl	800c474 <rcl_publisher_get_default_options>
 800d3ae:	2250      	movs	r2, #80	; 0x50
 800d3b0:	490d      	ldr	r1, [pc, #52]	; (800d3e8 <rclc_publisher_init_best_effort+0x70>)
 800d3b2:	4640      	mov	r0, r8
 800d3b4:	f00e fb97 	bl	801bae6 <memcpy>
 800d3b8:	463b      	mov	r3, r7
 800d3ba:	4632      	mov	r2, r6
 800d3bc:	4629      	mov	r1, r5
 800d3be:	4620      	mov	r0, r4
 800d3c0:	f8cd 8000 	str.w	r8, [sp]
 800d3c4:	f7fe ffba 	bl	800c33c <rcl_publisher_init>
 800d3c8:	b910      	cbnz	r0, 800d3d0 <rclc_publisher_init_best_effort+0x58>
 800d3ca:	b020      	add	sp, #128	; 0x80
 800d3cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3d0:	9003      	str	r0, [sp, #12]
 800d3d2:	f000 f8dd 	bl	800d590 <rcutils_reset_error>
 800d3d6:	9803      	ldr	r0, [sp, #12]
 800d3d8:	b020      	add	sp, #128	; 0x80
 800d3da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3de:	200b      	movs	r0, #11
 800d3e0:	b020      	add	sp, #128	; 0x80
 800d3e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3e6:	bf00      	nop
 800d3e8:	0801d4c8 	.word	0x0801d4c8

0800d3ec <rclc_service_init_default>:
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	bf18      	it	ne
 800d3f0:	2a00      	cmpne	r2, #0
 800d3f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3f6:	4616      	mov	r6, r2
 800d3f8:	bf0c      	ite	eq
 800d3fa:	2201      	moveq	r2, #1
 800d3fc:	2200      	movne	r2, #0
 800d3fe:	b09e      	sub	sp, #120	; 0x78
 800d400:	2900      	cmp	r1, #0
 800d402:	bf08      	it	eq
 800d404:	f042 0201 	orreq.w	r2, r2, #1
 800d408:	bb1a      	cbnz	r2, 800d452 <rclc_service_init_default+0x66>
 800d40a:	4604      	mov	r4, r0
 800d40c:	b308      	cbz	r0, 800d452 <rclc_service_init_default+0x66>
 800d40e:	f10d 0810 	add.w	r8, sp, #16
 800d412:	461f      	mov	r7, r3
 800d414:	460d      	mov	r5, r1
 800d416:	f007 f9b7 	bl	8014788 <rcl_get_zero_initialized_service>
 800d41a:	6020      	str	r0, [r4, #0]
 800d41c:	4640      	mov	r0, r8
 800d41e:	f007 fa61 	bl	80148e4 <rcl_service_get_default_options>
 800d422:	2250      	movs	r2, #80	; 0x50
 800d424:	490d      	ldr	r1, [pc, #52]	; (800d45c <rclc_service_init_default+0x70>)
 800d426:	4640      	mov	r0, r8
 800d428:	f00e fb5d 	bl	801bae6 <memcpy>
 800d42c:	463b      	mov	r3, r7
 800d42e:	4632      	mov	r2, r6
 800d430:	4629      	mov	r1, r5
 800d432:	4620      	mov	r0, r4
 800d434:	f8cd 8000 	str.w	r8, [sp]
 800d438:	f007 f9ac 	bl	8014794 <rcl_service_init>
 800d43c:	b910      	cbnz	r0, 800d444 <rclc_service_init_default+0x58>
 800d43e:	b01e      	add	sp, #120	; 0x78
 800d440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d444:	9003      	str	r0, [sp, #12]
 800d446:	f000 f8a3 	bl	800d590 <rcutils_reset_error>
 800d44a:	9803      	ldr	r0, [sp, #12]
 800d44c:	b01e      	add	sp, #120	; 0x78
 800d44e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d452:	200b      	movs	r0, #11
 800d454:	b01e      	add	sp, #120	; 0x78
 800d456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d45a:	bf00      	nop
 800d45c:	0801d518 	.word	0x0801d518

0800d460 <rclc_timer_init_default>:
 800d460:	b361      	cbz	r1, 800d4bc <rclc_timer_init_default+0x5c>
 800d462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d466:	4606      	mov	r6, r0
 800d468:	b08a      	sub	sp, #40	; 0x28
 800d46a:	b318      	cbz	r0, 800d4b4 <rclc_timer_init_default+0x54>
 800d46c:	460d      	mov	r5, r1
 800d46e:	4690      	mov	r8, r2
 800d470:	461f      	mov	r7, r3
 800d472:	f007 fe0b 	bl	801508c <rcl_get_zero_initialized_timer>
 800d476:	68ac      	ldr	r4, [r5, #8]
 800d478:	f10d 0c0c 	add.w	ip, sp, #12
 800d47c:	6030      	str	r0, [r6, #0]
 800d47e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d480:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d484:	6823      	ldr	r3, [r4, #0]
 800d486:	462a      	mov	r2, r5
 800d488:	f105 010c 	add.w	r1, r5, #12
 800d48c:	4630      	mov	r0, r6
 800d48e:	f8cc 3000 	str.w	r3, [ip]
 800d492:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d494:	e9cd 8700 	strd	r8, r7, [sp]
 800d498:	9302      	str	r3, [sp, #8]
 800d49a:	f007 fdfd 	bl	8015098 <rcl_timer_init>
 800d49e:	b910      	cbnz	r0, 800d4a6 <rclc_timer_init_default+0x46>
 800d4a0:	b00a      	add	sp, #40	; 0x28
 800d4a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4a6:	9009      	str	r0, [sp, #36]	; 0x24
 800d4a8:	f000 f872 	bl	800d590 <rcutils_reset_error>
 800d4ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d4ae:	b00a      	add	sp, #40	; 0x28
 800d4b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4b4:	200b      	movs	r0, #11
 800d4b6:	b00a      	add	sp, #40	; 0x28
 800d4b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4bc:	200b      	movs	r0, #11
 800d4be:	4770      	bx	lr

0800d4c0 <__default_zero_allocate>:
 800d4c0:	f00d be02 	b.w	801b0c8 <calloc>

0800d4c4 <__default_reallocate>:
 800d4c4:	f00d bf8e 	b.w	801b3e4 <realloc>

0800d4c8 <__default_deallocate>:
 800d4c8:	f00d be6c 	b.w	801b1a4 <free>

0800d4cc <__default_allocate>:
 800d4cc:	f00d be62 	b.w	801b194 <malloc>

0800d4d0 <rcutils_get_zero_initialized_allocator>:
 800d4d0:	b510      	push	{r4, lr}
 800d4d2:	4c05      	ldr	r4, [pc, #20]	; (800d4e8 <rcutils_get_zero_initialized_allocator+0x18>)
 800d4d4:	4686      	mov	lr, r0
 800d4d6:	4684      	mov	ip, r0
 800d4d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d4da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d4de:	6823      	ldr	r3, [r4, #0]
 800d4e0:	4670      	mov	r0, lr
 800d4e2:	f8cc 3000 	str.w	r3, [ip]
 800d4e6:	bd10      	pop	{r4, pc}
 800d4e8:	0801d568 	.word	0x0801d568

0800d4ec <rcutils_set_default_allocator>:
 800d4ec:	b1a8      	cbz	r0, 800d51a <rcutils_set_default_allocator+0x2e>
 800d4ee:	6802      	ldr	r2, [r0, #0]
 800d4f0:	b1a2      	cbz	r2, 800d51c <rcutils_set_default_allocator+0x30>
 800d4f2:	6841      	ldr	r1, [r0, #4]
 800d4f4:	b1a1      	cbz	r1, 800d520 <rcutils_set_default_allocator+0x34>
 800d4f6:	b410      	push	{r4}
 800d4f8:	68c4      	ldr	r4, [r0, #12]
 800d4fa:	b164      	cbz	r4, 800d516 <rcutils_set_default_allocator+0x2a>
 800d4fc:	6880      	ldr	r0, [r0, #8]
 800d4fe:	b138      	cbz	r0, 800d510 <rcutils_set_default_allocator+0x24>
 800d500:	4b08      	ldr	r3, [pc, #32]	; (800d524 <rcutils_set_default_allocator+0x38>)
 800d502:	601a      	str	r2, [r3, #0]
 800d504:	2200      	movs	r2, #0
 800d506:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800d50a:	2001      	movs	r0, #1
 800d50c:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800d510:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d514:	4770      	bx	lr
 800d516:	4620      	mov	r0, r4
 800d518:	e7fa      	b.n	800d510 <rcutils_set_default_allocator+0x24>
 800d51a:	4770      	bx	lr
 800d51c:	4610      	mov	r0, r2
 800d51e:	4770      	bx	lr
 800d520:	4608      	mov	r0, r1
 800d522:	4770      	bx	lr
 800d524:	20000918 	.word	0x20000918

0800d528 <rcutils_get_default_allocator>:
 800d528:	b510      	push	{r4, lr}
 800d52a:	4c05      	ldr	r4, [pc, #20]	; (800d540 <rcutils_get_default_allocator+0x18>)
 800d52c:	4686      	mov	lr, r0
 800d52e:	4684      	mov	ip, r0
 800d530:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d532:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d536:	6823      	ldr	r3, [r4, #0]
 800d538:	4670      	mov	r0, lr
 800d53a:	f8cc 3000 	str.w	r3, [ip]
 800d53e:	bd10      	pop	{r4, pc}
 800d540:	20000918 	.word	0x20000918

0800d544 <rcutils_allocator_is_valid>:
 800d544:	b158      	cbz	r0, 800d55e <rcutils_allocator_is_valid+0x1a>
 800d546:	6803      	ldr	r3, [r0, #0]
 800d548:	b143      	cbz	r3, 800d55c <rcutils_allocator_is_valid+0x18>
 800d54a:	6843      	ldr	r3, [r0, #4]
 800d54c:	b133      	cbz	r3, 800d55c <rcutils_allocator_is_valid+0x18>
 800d54e:	68c3      	ldr	r3, [r0, #12]
 800d550:	b123      	cbz	r3, 800d55c <rcutils_allocator_is_valid+0x18>
 800d552:	6880      	ldr	r0, [r0, #8]
 800d554:	3800      	subs	r0, #0
 800d556:	bf18      	it	ne
 800d558:	2001      	movne	r0, #1
 800d55a:	4770      	bx	lr
 800d55c:	4618      	mov	r0, r3
 800d55e:	4770      	bx	lr

0800d560 <rcutils_get_error_string>:
 800d560:	4b06      	ldr	r3, [pc, #24]	; (800d57c <rcutils_get_error_string+0x1c>)
 800d562:	781b      	ldrb	r3, [r3, #0]
 800d564:	b13b      	cbz	r3, 800d576 <rcutils_get_error_string+0x16>
 800d566:	4b06      	ldr	r3, [pc, #24]	; (800d580 <rcutils_get_error_string+0x20>)
 800d568:	781a      	ldrb	r2, [r3, #0]
 800d56a:	b90a      	cbnz	r2, 800d570 <rcutils_get_error_string+0x10>
 800d56c:	2201      	movs	r2, #1
 800d56e:	701a      	strb	r2, [r3, #0]
 800d570:	4b04      	ldr	r3, [pc, #16]	; (800d584 <rcutils_get_error_string+0x24>)
 800d572:	7818      	ldrb	r0, [r3, #0]
 800d574:	4770      	bx	lr
 800d576:	4b04      	ldr	r3, [pc, #16]	; (800d588 <rcutils_get_error_string+0x28>)
 800d578:	7818      	ldrb	r0, [r3, #0]
 800d57a:	4770      	bx	lr
 800d57c:	2000b780 	.word	0x2000b780
 800d580:	2000b799 	.word	0x2000b799
 800d584:	2000b798 	.word	0x2000b798
 800d588:	0801cbf4 	.word	0x0801cbf4
 800d58c:	00000000 	.word	0x00000000

0800d590 <rcutils_reset_error>:
 800d590:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800d5b0 <rcutils_reset_error+0x20>
 800d594:	2300      	movs	r3, #0
 800d596:	4a08      	ldr	r2, [pc, #32]	; (800d5b8 <rcutils_reset_error+0x28>)
 800d598:	4808      	ldr	r0, [pc, #32]	; (800d5bc <rcutils_reset_error+0x2c>)
 800d59a:	8013      	strh	r3, [r2, #0]
 800d59c:	4908      	ldr	r1, [pc, #32]	; (800d5c0 <rcutils_reset_error+0x30>)
 800d59e:	7003      	strb	r3, [r0, #0]
 800d5a0:	700b      	strb	r3, [r1, #0]
 800d5a2:	ed82 7b02 	vstr	d7, [r2, #8]
 800d5a6:	4a07      	ldr	r2, [pc, #28]	; (800d5c4 <rcutils_reset_error+0x34>)
 800d5a8:	7013      	strb	r3, [r2, #0]
 800d5aa:	4770      	bx	lr
 800d5ac:	f3af 8000 	nop.w
	...
 800d5b8:	2000b788 	.word	0x2000b788
 800d5bc:	2000b799 	.word	0x2000b799
 800d5c0:	2000b798 	.word	0x2000b798
 800d5c4:	2000b780 	.word	0x2000b780

0800d5c8 <rcutils_system_time_now>:
 800d5c8:	b310      	cbz	r0, 800d610 <rcutils_system_time_now+0x48>
 800d5ca:	b570      	push	{r4, r5, r6, lr}
 800d5cc:	b084      	sub	sp, #16
 800d5ce:	4604      	mov	r4, r0
 800d5d0:	2001      	movs	r0, #1
 800d5d2:	4669      	mov	r1, sp
 800d5d4:	f7f5 f82c 	bl	8002630 <clock_gettime>
 800d5d8:	2800      	cmp	r0, #0
 800d5da:	db16      	blt.n	800d60a <rcutils_system_time_now+0x42>
 800d5dc:	e9dd 3100 	ldrd	r3, r1, [sp]
 800d5e0:	2900      	cmp	r1, #0
 800d5e2:	db12      	blt.n	800d60a <rcutils_system_time_now+0x42>
 800d5e4:	ea53 0201 	orrs.w	r2, r3, r1
 800d5e8:	9d02      	ldr	r5, [sp, #8]
 800d5ea:	d101      	bne.n	800d5f0 <rcutils_system_time_now+0x28>
 800d5ec:	2d00      	cmp	r5, #0
 800d5ee:	db0c      	blt.n	800d60a <rcutils_system_time_now+0x42>
 800d5f0:	4e08      	ldr	r6, [pc, #32]	; (800d614 <rcutils_system_time_now+0x4c>)
 800d5f2:	2000      	movs	r0, #0
 800d5f4:	fba3 3206 	umull	r3, r2, r3, r6
 800d5f8:	195b      	adds	r3, r3, r5
 800d5fa:	fb06 2201 	mla	r2, r6, r1, r2
 800d5fe:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800d602:	e9c4 3200 	strd	r3, r2, [r4]
 800d606:	b004      	add	sp, #16
 800d608:	bd70      	pop	{r4, r5, r6, pc}
 800d60a:	2002      	movs	r0, #2
 800d60c:	b004      	add	sp, #16
 800d60e:	bd70      	pop	{r4, r5, r6, pc}
 800d610:	200b      	movs	r0, #11
 800d612:	4770      	bx	lr
 800d614:	3b9aca00 	.word	0x3b9aca00

0800d618 <rcutils_steady_time_now>:
 800d618:	b310      	cbz	r0, 800d660 <rcutils_steady_time_now+0x48>
 800d61a:	b570      	push	{r4, r5, r6, lr}
 800d61c:	b084      	sub	sp, #16
 800d61e:	4604      	mov	r4, r0
 800d620:	2000      	movs	r0, #0
 800d622:	4669      	mov	r1, sp
 800d624:	f7f5 f804 	bl	8002630 <clock_gettime>
 800d628:	2800      	cmp	r0, #0
 800d62a:	db16      	blt.n	800d65a <rcutils_steady_time_now+0x42>
 800d62c:	e9dd 3100 	ldrd	r3, r1, [sp]
 800d630:	2900      	cmp	r1, #0
 800d632:	db12      	blt.n	800d65a <rcutils_steady_time_now+0x42>
 800d634:	ea53 0201 	orrs.w	r2, r3, r1
 800d638:	9d02      	ldr	r5, [sp, #8]
 800d63a:	d101      	bne.n	800d640 <rcutils_steady_time_now+0x28>
 800d63c:	2d00      	cmp	r5, #0
 800d63e:	db0c      	blt.n	800d65a <rcutils_steady_time_now+0x42>
 800d640:	4e08      	ldr	r6, [pc, #32]	; (800d664 <rcutils_steady_time_now+0x4c>)
 800d642:	2000      	movs	r0, #0
 800d644:	fba3 3206 	umull	r3, r2, r3, r6
 800d648:	195b      	adds	r3, r3, r5
 800d64a:	fb06 2201 	mla	r2, r6, r1, r2
 800d64e:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800d652:	e9c4 3200 	strd	r3, r2, [r4]
 800d656:	b004      	add	sp, #16
 800d658:	bd70      	pop	{r4, r5, r6, pc}
 800d65a:	2002      	movs	r0, #2
 800d65c:	b004      	add	sp, #16
 800d65e:	bd70      	pop	{r4, r5, r6, pc}
 800d660:	200b      	movs	r0, #11
 800d662:	4770      	bx	lr
 800d664:	3b9aca00 	.word	0x3b9aca00

0800d668 <rmw_get_default_publisher_options>:
 800d668:	2200      	movs	r2, #0
 800d66a:	6002      	str	r2, [r0, #0]
 800d66c:	7102      	strb	r2, [r0, #4]
 800d66e:	4770      	bx	lr

0800d670 <rmw_uros_set_custom_transport>:
 800d670:	b470      	push	{r4, r5, r6}
 800d672:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800d676:	b162      	cbz	r2, 800d692 <rmw_uros_set_custom_transport+0x22>
 800d678:	b15b      	cbz	r3, 800d692 <rmw_uros_set_custom_transport+0x22>
 800d67a:	b155      	cbz	r5, 800d692 <rmw_uros_set_custom_transport+0x22>
 800d67c:	b14e      	cbz	r6, 800d692 <rmw_uros_set_custom_transport+0x22>
 800d67e:	4c06      	ldr	r4, [pc, #24]	; (800d698 <rmw_uros_set_custom_transport+0x28>)
 800d680:	7020      	strb	r0, [r4, #0]
 800d682:	2000      	movs	r0, #0
 800d684:	6166      	str	r6, [r4, #20]
 800d686:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800d68a:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d68e:	bc70      	pop	{r4, r5, r6}
 800d690:	4770      	bx	lr
 800d692:	200b      	movs	r0, #11
 800d694:	bc70      	pop	{r4, r5, r6}
 800d696:	4770      	bx	lr
 800d698:	2000b79c 	.word	0x2000b79c

0800d69c <flush_session>:
 800d69c:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800d69e:	f003 bc07 	b.w	8010eb0 <uxr_run_session_until_confirm_delivery>
 800d6a2:	bf00      	nop

0800d6a4 <rmw_publish>:
 800d6a4:	2800      	cmp	r0, #0
 800d6a6:	d053      	beq.n	800d750 <rmw_publish+0xac>
 800d6a8:	b570      	push	{r4, r5, r6, lr}
 800d6aa:	460d      	mov	r5, r1
 800d6ac:	b08e      	sub	sp, #56	; 0x38
 800d6ae:	2900      	cmp	r1, #0
 800d6b0:	d04b      	beq.n	800d74a <rmw_publish+0xa6>
 800d6b2:	4604      	mov	r4, r0
 800d6b4:	6800      	ldr	r0, [r0, #0]
 800d6b6:	f000 fd97 	bl	800e1e8 <is_uxrce_rmw_identifier_valid>
 800d6ba:	2800      	cmp	r0, #0
 800d6bc:	d045      	beq.n	800d74a <rmw_publish+0xa6>
 800d6be:	6866      	ldr	r6, [r4, #4]
 800d6c0:	2e00      	cmp	r6, #0
 800d6c2:	d042      	beq.n	800d74a <rmw_publish+0xa6>
 800d6c4:	69b4      	ldr	r4, [r6, #24]
 800d6c6:	4628      	mov	r0, r5
 800d6c8:	6923      	ldr	r3, [r4, #16]
 800d6ca:	4798      	blx	r3
 800d6cc:	69f3      	ldr	r3, [r6, #28]
 800d6ce:	9005      	str	r0, [sp, #20]
 800d6d0:	b113      	cbz	r3, 800d6d8 <rmw_publish+0x34>
 800d6d2:	a805      	add	r0, sp, #20
 800d6d4:	4798      	blx	r3
 800d6d6:	9805      	ldr	r0, [sp, #20]
 800d6d8:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800d6dc:	691b      	ldr	r3, [r3, #16]
 800d6de:	9000      	str	r0, [sp, #0]
 800d6e0:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800d6e4:	6972      	ldr	r2, [r6, #20]
 800d6e6:	ab06      	add	r3, sp, #24
 800d6e8:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800d6ea:	f004 f9df 	bl	8011aac <uxr_prepare_output_stream>
 800d6ee:	b1d8      	cbz	r0, 800d728 <rmw_publish+0x84>
 800d6f0:	68a3      	ldr	r3, [r4, #8]
 800d6f2:	a906      	add	r1, sp, #24
 800d6f4:	4628      	mov	r0, r5
 800d6f6:	4798      	blx	r3
 800d6f8:	6a33      	ldr	r3, [r6, #32]
 800d6fa:	4604      	mov	r4, r0
 800d6fc:	b10b      	cbz	r3, 800d702 <rmw_publish+0x5e>
 800d6fe:	a806      	add	r0, sp, #24
 800d700:	4798      	blx	r3
 800d702:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800d706:	2b01      	cmp	r3, #1
 800d708:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800d70c:	d022      	beq.n	800d754 <rmw_publish+0xb0>
 800d70e:	6918      	ldr	r0, [r3, #16]
 800d710:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800d712:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800d716:	f003 fbcb 	bl	8010eb0 <uxr_run_session_until_confirm_delivery>
 800d71a:	4020      	ands	r0, r4
 800d71c:	b2c4      	uxtb	r4, r0
 800d71e:	f084 0001 	eor.w	r0, r4, #1
 800d722:	b2c0      	uxtb	r0, r0
 800d724:	b00e      	add	sp, #56	; 0x38
 800d726:	bd70      	pop	{r4, r5, r6, pc}
 800d728:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800d72c:	6918      	ldr	r0, [r3, #16]
 800d72e:	9b05      	ldr	r3, [sp, #20]
 800d730:	9602      	str	r6, [sp, #8]
 800d732:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800d736:	9300      	str	r3, [sp, #0]
 800d738:	4b09      	ldr	r3, [pc, #36]	; (800d760 <rmw_publish+0xbc>)
 800d73a:	9301      	str	r3, [sp, #4]
 800d73c:	ab06      	add	r3, sp, #24
 800d73e:	6972      	ldr	r2, [r6, #20]
 800d740:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800d742:	f004 f9e3 	bl	8011b0c <uxr_prepare_output_stream_fragmented>
 800d746:	2800      	cmp	r0, #0
 800d748:	d1d2      	bne.n	800d6f0 <rmw_publish+0x4c>
 800d74a:	2001      	movs	r0, #1
 800d74c:	b00e      	add	sp, #56	; 0x38
 800d74e:	bd70      	pop	{r4, r5, r6, pc}
 800d750:	2001      	movs	r0, #1
 800d752:	4770      	bx	lr
 800d754:	6918      	ldr	r0, [r3, #16]
 800d756:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800d75a:	f002 ffef 	bl	801073c <uxr_flash_output_streams>
 800d75e:	e7de      	b.n	800d71e <rmw_publish+0x7a>
 800d760:	0800d69d 	.word	0x0800d69d

0800d764 <rmw_create_publisher>:
 800d764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d768:	b087      	sub	sp, #28
 800d76a:	2800      	cmp	r0, #0
 800d76c:	f000 80d2 	beq.w	800d914 <rmw_create_publisher+0x1b0>
 800d770:	460e      	mov	r6, r1
 800d772:	2900      	cmp	r1, #0
 800d774:	f000 80ce 	beq.w	800d914 <rmw_create_publisher+0x1b0>
 800d778:	4604      	mov	r4, r0
 800d77a:	6800      	ldr	r0, [r0, #0]
 800d77c:	4615      	mov	r5, r2
 800d77e:	461f      	mov	r7, r3
 800d780:	f000 fd32 	bl	800e1e8 <is_uxrce_rmw_identifier_valid>
 800d784:	f080 0001 	eor.w	r0, r0, #1
 800d788:	b2c0      	uxtb	r0, r0
 800d78a:	2800      	cmp	r0, #0
 800d78c:	f040 80c2 	bne.w	800d914 <rmw_create_publisher+0x1b0>
 800d790:	2d00      	cmp	r5, #0
 800d792:	f000 80bf 	beq.w	800d914 <rmw_create_publisher+0x1b0>
 800d796:	782b      	ldrb	r3, [r5, #0]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	f000 80bb 	beq.w	800d914 <rmw_create_publisher+0x1b0>
 800d79e:	2f00      	cmp	r7, #0
 800d7a0:	f000 80b8 	beq.w	800d914 <rmw_create_publisher+0x1b0>
 800d7a4:	485e      	ldr	r0, [pc, #376]	; (800d920 <rmw_create_publisher+0x1bc>)
 800d7a6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800d7aa:	f009 ff5f 	bl	801766c <get_memory>
 800d7ae:	2800      	cmp	r0, #0
 800d7b0:	f000 80b0 	beq.w	800d914 <rmw_create_publisher+0x1b0>
 800d7b4:	6884      	ldr	r4, [r0, #8]
 800d7b6:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 800d7ba:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800d7be:	f009 ffdb 	bl	8017778 <rmw_get_implementation_identifier>
 800d7c2:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800d7c6:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800d7ca:	4628      	mov	r0, r5
 800d7cc:	f7f2 fd98 	bl	8000300 <strlen>
 800d7d0:	3001      	adds	r0, #1
 800d7d2:	f104 0884 	add.w	r8, r4, #132	; 0x84
 800d7d6:	283c      	cmp	r0, #60	; 0x3c
 800d7d8:	f200 808f 	bhi.w	800d8fa <rmw_create_publisher+0x196>
 800d7dc:	462b      	mov	r3, r5
 800d7de:	4a51      	ldr	r2, [pc, #324]	; (800d924 <rmw_create_publisher+0x1c0>)
 800d7e0:	213c      	movs	r1, #60	; 0x3c
 800d7e2:	4650      	mov	r0, sl
 800d7e4:	f00d ff74 	bl	801b6d0 <sniprintf>
 800d7e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d7ec:	4639      	mov	r1, r7
 800d7ee:	2250      	movs	r2, #80	; 0x50
 800d7f0:	67e3      	str	r3, [r4, #124]	; 0x7c
 800d7f2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800d7f6:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 800d7fa:	f00e f974 	bl	801bae6 <memcpy>
 800d7fe:	7a3b      	ldrb	r3, [r7, #8]
 800d800:	4630      	mov	r0, r6
 800d802:	4949      	ldr	r1, [pc, #292]	; (800d928 <rmw_create_publisher+0x1c4>)
 800d804:	2b02      	cmp	r3, #2
 800d806:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d80a:	bf0c      	ite	eq
 800d80c:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800d810:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800d814:	67a3      	str	r3, [r4, #120]	; 0x78
 800d816:	2300      	movs	r3, #0
 800d818:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800d81c:	f000 fcf2 	bl	800e204 <get_message_typesupport_handle>
 800d820:	2800      	cmp	r0, #0
 800d822:	d06a      	beq.n	800d8fa <rmw_create_publisher+0x196>
 800d824:	6842      	ldr	r2, [r0, #4]
 800d826:	61a2      	str	r2, [r4, #24]
 800d828:	2a00      	cmp	r2, #0
 800d82a:	d066      	beq.n	800d8fa <rmw_create_publisher+0x196>
 800d82c:	4629      	mov	r1, r5
 800d82e:	463b      	mov	r3, r7
 800d830:	4648      	mov	r0, r9
 800d832:	f00a f9df 	bl	8017bf4 <create_topic>
 800d836:	6260      	str	r0, [r4, #36]	; 0x24
 800d838:	2800      	cmp	r0, #0
 800d83a:	d062      	beq.n	800d902 <rmw_create_publisher+0x19e>
 800d83c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d840:	2103      	movs	r1, #3
 800d842:	2506      	movs	r5, #6
 800d844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d848:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 800d84c:	1c42      	adds	r2, r0, #1
 800d84e:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 800d852:	f002 fe23 	bl	801049c <uxr_object_id>
 800d856:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800d85a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d85e:	6120      	str	r0, [r4, #16]
 800d860:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800d864:	6910      	ldr	r0, [r2, #16]
 800d866:	9500      	str	r5, [sp, #0]
 800d868:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800d86c:	6819      	ldr	r1, [r3, #0]
 800d86e:	6922      	ldr	r2, [r4, #16]
 800d870:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800d874:	f002 fd32 	bl	80102dc <uxr_buffer_create_publisher_bin>
 800d878:	4602      	mov	r2, r0
 800d87a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800d87e:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800d882:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800d886:	f000 fb9d 	bl	800dfc4 <run_xrce_session>
 800d88a:	b3b0      	cbz	r0, 800d8fa <rmw_create_publisher+0x196>
 800d88c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d890:	2105      	movs	r1, #5
 800d892:	f10d 0a10 	add.w	sl, sp, #16
 800d896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d89a:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 800d89e:	1c42      	adds	r2, r0, #1
 800d8a0:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 800d8a4:	f002 fdfa 	bl	801049c <uxr_object_id>
 800d8a8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d8ac:	4639      	mov	r1, r7
 800d8ae:	6160      	str	r0, [r4, #20]
 800d8b0:	691e      	ldr	r6, [r3, #16]
 800d8b2:	4650      	mov	r0, sl
 800d8b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d8b8:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800d8bc:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 800d8c0:	f8d3 7384 	ldr.w	r7, [r3, #900]	; 0x384
 800d8c4:	f000 fb9a 	bl	800dffc <convert_qos_profile>
 800d8c8:	9503      	str	r5, [sp, #12]
 800d8ca:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800d8ce:	9001      	str	r0, [sp, #4]
 800d8d0:	4630      	mov	r0, r6
 800d8d2:	f8ad 1008 	strh.w	r1, [sp, #8]
 800d8d6:	f8db 3010 	ldr.w	r3, [fp, #16]
 800d8da:	9300      	str	r3, [sp, #0]
 800d8dc:	6839      	ldr	r1, [r7, #0]
 800d8de:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800d8e2:	f002 fd2b 	bl	801033c <uxr_buffer_create_datawriter_bin>
 800d8e6:	4602      	mov	r2, r0
 800d8e8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800d8ec:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800d8f0:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800d8f4:	f000 fb66 	bl	800dfc4 <run_xrce_session>
 800d8f8:	b970      	cbnz	r0, 800d918 <rmw_create_publisher+0x1b4>
 800d8fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d8fc:	b108      	cbz	r0, 800d902 <rmw_create_publisher+0x19e>
 800d8fe:	f000 fa53 	bl	800dda8 <rmw_uxrce_fini_topic_memory>
 800d902:	4640      	mov	r0, r8
 800d904:	f04f 0800 	mov.w	r8, #0
 800d908:	f000 f9f6 	bl	800dcf8 <rmw_uxrce_fini_publisher_memory>
 800d90c:	4640      	mov	r0, r8
 800d90e:	b007      	add	sp, #28
 800d910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d914:	f04f 0800 	mov.w	r8, #0
 800d918:	4640      	mov	r0, r8
 800d91a:	b007      	add	sp, #28
 800d91c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d920:	2001015c 	.word	0x2001015c
 800d924:	0801d58c 	.word	0x0801d58c
 800d928:	0801ca98 	.word	0x0801ca98

0800d92c <rmw_publisher_get_actual_qos>:
 800d92c:	b178      	cbz	r0, 800d94e <rmw_publisher_get_actual_qos+0x22>
 800d92e:	b510      	push	{r4, lr}
 800d930:	fab1 f481 	clz	r4, r1
 800d934:	0964      	lsrs	r4, r4, #5
 800d936:	b141      	cbz	r1, 800d94a <rmw_publisher_get_actual_qos+0x1e>
 800d938:	6843      	ldr	r3, [r0, #4]
 800d93a:	2250      	movs	r2, #80	; 0x50
 800d93c:	4608      	mov	r0, r1
 800d93e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800d942:	f00e f8d0 	bl	801bae6 <memcpy>
 800d946:	4620      	mov	r0, r4
 800d948:	bd10      	pop	{r4, pc}
 800d94a:	200b      	movs	r0, #11
 800d94c:	bd10      	pop	{r4, pc}
 800d94e:	200b      	movs	r0, #11
 800d950:	4770      	bx	lr
 800d952:	bf00      	nop

0800d954 <rmw_destroy_publisher>:
 800d954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d958:	b128      	cbz	r0, 800d966 <rmw_destroy_publisher+0x12>
 800d95a:	4604      	mov	r4, r0
 800d95c:	6800      	ldr	r0, [r0, #0]
 800d95e:	460d      	mov	r5, r1
 800d960:	f000 fc42 	bl	800e1e8 <is_uxrce_rmw_identifier_valid>
 800d964:	b918      	cbnz	r0, 800d96e <rmw_destroy_publisher+0x1a>
 800d966:	2401      	movs	r4, #1
 800d968:	4620      	mov	r0, r4
 800d96a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d96e:	6863      	ldr	r3, [r4, #4]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d0f8      	beq.n	800d966 <rmw_destroy_publisher+0x12>
 800d974:	fab5 f485 	clz	r4, r5
 800d978:	0964      	lsrs	r4, r4, #5
 800d97a:	2d00      	cmp	r5, #0
 800d97c:	d0f3      	beq.n	800d966 <rmw_destroy_publisher+0x12>
 800d97e:	6828      	ldr	r0, [r5, #0]
 800d980:	f000 fc32 	bl	800e1e8 <is_uxrce_rmw_identifier_valid>
 800d984:	2800      	cmp	r0, #0
 800d986:	d0ee      	beq.n	800d966 <rmw_destroy_publisher+0x12>
 800d988:	686e      	ldr	r6, [r5, #4]
 800d98a:	2e00      	cmp	r6, #0
 800d98c:	d0eb      	beq.n	800d966 <rmw_destroy_publisher+0x12>
 800d98e:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800d990:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 800d994:	f00a f97e 	bl	8017c94 <destroy_topic>
 800d998:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800d99c:	6972      	ldr	r2, [r6, #20]
 800d99e:	6918      	ldr	r0, [r3, #16]
 800d9a0:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800d9a4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800d9a8:	6819      	ldr	r1, [r3, #0]
 800d9aa:	f002 fbe3 	bl	8010174 <uxr_buffer_delete_entity>
 800d9ae:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800d9b2:	4680      	mov	r8, r0
 800d9b4:	6932      	ldr	r2, [r6, #16]
 800d9b6:	6918      	ldr	r0, [r3, #16]
 800d9b8:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800d9bc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800d9c0:	6819      	ldr	r1, [r3, #0]
 800d9c2:	f002 fbd7 	bl	8010174 <uxr_buffer_delete_entity>
 800d9c6:	4606      	mov	r6, r0
 800d9c8:	6938      	ldr	r0, [r7, #16]
 800d9ca:	4642      	mov	r2, r8
 800d9cc:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800d9d0:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800d9d4:	f000 faf6 	bl	800dfc4 <run_xrce_session>
 800d9d8:	693f      	ldr	r7, [r7, #16]
 800d9da:	4632      	mov	r2, r6
 800d9dc:	4606      	mov	r6, r0
 800d9de:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 800d9e2:	4638      	mov	r0, r7
 800d9e4:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 800d9e8:	f000 faec 	bl	800dfc4 <run_xrce_session>
 800d9ec:	b126      	cbz	r6, 800d9f8 <rmw_destroy_publisher+0xa4>
 800d9ee:	b118      	cbz	r0, 800d9f8 <rmw_destroy_publisher+0xa4>
 800d9f0:	4628      	mov	r0, r5
 800d9f2:	f000 f981 	bl	800dcf8 <rmw_uxrce_fini_publisher_memory>
 800d9f6:	e7b7      	b.n	800d968 <rmw_destroy_publisher+0x14>
 800d9f8:	2402      	movs	r4, #2
 800d9fa:	e7f9      	b.n	800d9f0 <rmw_destroy_publisher+0x9c>

0800d9fc <rmw_uxrce_init_service_memory>:
 800d9fc:	b1e2      	cbz	r2, 800da38 <rmw_uxrce_init_service_memory+0x3c>
 800d9fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da02:	7b05      	ldrb	r5, [r0, #12]
 800da04:	4606      	mov	r6, r0
 800da06:	b9ad      	cbnz	r5, 800da34 <rmw_uxrce_init_service_memory+0x38>
 800da08:	23c8      	movs	r3, #200	; 0xc8
 800da0a:	4617      	mov	r7, r2
 800da0c:	460c      	mov	r4, r1
 800da0e:	46a8      	mov	r8, r5
 800da10:	6083      	str	r3, [r0, #8]
 800da12:	f240 1301 	movw	r3, #257	; 0x101
 800da16:	e9c0 5500 	strd	r5, r5, [r0]
 800da1a:	8183      	strh	r3, [r0, #12]
 800da1c:	3501      	adds	r5, #1
 800da1e:	4621      	mov	r1, r4
 800da20:	4630      	mov	r0, r6
 800da22:	f009 fe33 	bl	801768c <put_memory>
 800da26:	42af      	cmp	r7, r5
 800da28:	60a4      	str	r4, [r4, #8]
 800da2a:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800da2e:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800da32:	d1f3      	bne.n	800da1c <rmw_uxrce_init_service_memory+0x20>
 800da34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da38:	4770      	bx	lr
 800da3a:	bf00      	nop

0800da3c <rmw_uxrce_init_client_memory>:
 800da3c:	b1e2      	cbz	r2, 800da78 <rmw_uxrce_init_client_memory+0x3c>
 800da3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da42:	7b05      	ldrb	r5, [r0, #12]
 800da44:	4606      	mov	r6, r0
 800da46:	b9ad      	cbnz	r5, 800da74 <rmw_uxrce_init_client_memory+0x38>
 800da48:	23c8      	movs	r3, #200	; 0xc8
 800da4a:	4617      	mov	r7, r2
 800da4c:	460c      	mov	r4, r1
 800da4e:	46a8      	mov	r8, r5
 800da50:	6083      	str	r3, [r0, #8]
 800da52:	f240 1301 	movw	r3, #257	; 0x101
 800da56:	e9c0 5500 	strd	r5, r5, [r0]
 800da5a:	8183      	strh	r3, [r0, #12]
 800da5c:	3501      	adds	r5, #1
 800da5e:	4621      	mov	r1, r4
 800da60:	4630      	mov	r0, r6
 800da62:	f009 fe13 	bl	801768c <put_memory>
 800da66:	42af      	cmp	r7, r5
 800da68:	60a4      	str	r4, [r4, #8]
 800da6a:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800da6e:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800da72:	d1f3      	bne.n	800da5c <rmw_uxrce_init_client_memory+0x20>
 800da74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da78:	4770      	bx	lr
 800da7a:	bf00      	nop

0800da7c <rmw_uxrce_init_publisher_memory>:
 800da7c:	b1e2      	cbz	r2, 800dab8 <rmw_uxrce_init_publisher_memory+0x3c>
 800da7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da82:	7b05      	ldrb	r5, [r0, #12]
 800da84:	4606      	mov	r6, r0
 800da86:	b9ad      	cbnz	r5, 800dab4 <rmw_uxrce_init_publisher_memory+0x38>
 800da88:	23d8      	movs	r3, #216	; 0xd8
 800da8a:	4617      	mov	r7, r2
 800da8c:	460c      	mov	r4, r1
 800da8e:	46a8      	mov	r8, r5
 800da90:	6083      	str	r3, [r0, #8]
 800da92:	f240 1301 	movw	r3, #257	; 0x101
 800da96:	e9c0 5500 	strd	r5, r5, [r0]
 800da9a:	8183      	strh	r3, [r0, #12]
 800da9c:	3501      	adds	r5, #1
 800da9e:	4621      	mov	r1, r4
 800daa0:	4630      	mov	r0, r6
 800daa2:	f009 fdf3 	bl	801768c <put_memory>
 800daa6:	42af      	cmp	r7, r5
 800daa8:	60a4      	str	r4, [r4, #8]
 800daaa:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800daae:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800dab2:	d1f3      	bne.n	800da9c <rmw_uxrce_init_publisher_memory+0x20>
 800dab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dab8:	4770      	bx	lr
 800daba:	bf00      	nop

0800dabc <rmw_uxrce_init_subscription_memory>:
 800dabc:	b1e2      	cbz	r2, 800daf8 <rmw_uxrce_init_subscription_memory+0x3c>
 800dabe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dac2:	7b05      	ldrb	r5, [r0, #12]
 800dac4:	4606      	mov	r6, r0
 800dac6:	b9ad      	cbnz	r5, 800daf4 <rmw_uxrce_init_subscription_memory+0x38>
 800dac8:	23d8      	movs	r3, #216	; 0xd8
 800daca:	4617      	mov	r7, r2
 800dacc:	460c      	mov	r4, r1
 800dace:	46a8      	mov	r8, r5
 800dad0:	6083      	str	r3, [r0, #8]
 800dad2:	f240 1301 	movw	r3, #257	; 0x101
 800dad6:	e9c0 5500 	strd	r5, r5, [r0]
 800dada:	8183      	strh	r3, [r0, #12]
 800dadc:	3501      	adds	r5, #1
 800dade:	4621      	mov	r1, r4
 800dae0:	4630      	mov	r0, r6
 800dae2:	f009 fdd3 	bl	801768c <put_memory>
 800dae6:	42af      	cmp	r7, r5
 800dae8:	60a4      	str	r4, [r4, #8]
 800daea:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800daee:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800daf2:	d1f3      	bne.n	800dadc <rmw_uxrce_init_subscription_memory+0x20>
 800daf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daf8:	4770      	bx	lr
 800dafa:	bf00      	nop

0800dafc <rmw_uxrce_init_node_memory>:
 800dafc:	b1e2      	cbz	r2, 800db38 <rmw_uxrce_init_node_memory+0x3c>
 800dafe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db02:	7b05      	ldrb	r5, [r0, #12]
 800db04:	4606      	mov	r6, r0
 800db06:	b9ad      	cbnz	r5, 800db34 <rmw_uxrce_init_node_memory+0x38>
 800db08:	23a4      	movs	r3, #164	; 0xa4
 800db0a:	4617      	mov	r7, r2
 800db0c:	460c      	mov	r4, r1
 800db0e:	46a8      	mov	r8, r5
 800db10:	6083      	str	r3, [r0, #8]
 800db12:	f240 1301 	movw	r3, #257	; 0x101
 800db16:	e9c0 5500 	strd	r5, r5, [r0]
 800db1a:	8183      	strh	r3, [r0, #12]
 800db1c:	3501      	adds	r5, #1
 800db1e:	4621      	mov	r1, r4
 800db20:	4630      	mov	r0, r6
 800db22:	f009 fdb3 	bl	801768c <put_memory>
 800db26:	42af      	cmp	r7, r5
 800db28:	60a4      	str	r4, [r4, #8]
 800db2a:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 800db2e:	f804 8c98 	strb.w	r8, [r4, #-152]
 800db32:	d1f3      	bne.n	800db1c <rmw_uxrce_init_node_memory+0x20>
 800db34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db38:	4770      	bx	lr
 800db3a:	bf00      	nop

0800db3c <rmw_uxrce_init_session_memory>:
 800db3c:	b1ea      	cbz	r2, 800db7a <rmw_uxrce_init_session_memory+0x3e>
 800db3e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db42:	7b05      	ldrb	r5, [r0, #12]
 800db44:	4606      	mov	r6, r0
 800db46:	b9b5      	cbnz	r5, 800db76 <rmw_uxrce_init_session_memory+0x3a>
 800db48:	f241 58a8 	movw	r8, #5544	; 0x15a8
 800db4c:	f240 1301 	movw	r3, #257	; 0x101
 800db50:	4617      	mov	r7, r2
 800db52:	460c      	mov	r4, r1
 800db54:	46a9      	mov	r9, r5
 800db56:	f8c0 8008 	str.w	r8, [r0, #8]
 800db5a:	8183      	strh	r3, [r0, #12]
 800db5c:	e9c0 5500 	strd	r5, r5, [r0]
 800db60:	3501      	adds	r5, #1
 800db62:	4621      	mov	r1, r4
 800db64:	4630      	mov	r0, r6
 800db66:	f009 fd91 	bl	801768c <put_memory>
 800db6a:	42af      	cmp	r7, r5
 800db6c:	60a4      	str	r4, [r4, #8]
 800db6e:	f884 900c 	strb.w	r9, [r4, #12]
 800db72:	4444      	add	r4, r8
 800db74:	d1f4      	bne.n	800db60 <rmw_uxrce_init_session_memory+0x24>
 800db76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db7a:	4770      	bx	lr

0800db7c <rmw_uxrce_init_topic_memory>:
 800db7c:	b1e2      	cbz	r2, 800dbb8 <rmw_uxrce_init_topic_memory+0x3c>
 800db7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db82:	7b05      	ldrb	r5, [r0, #12]
 800db84:	4606      	mov	r6, r0
 800db86:	b9ad      	cbnz	r5, 800dbb4 <rmw_uxrce_init_topic_memory+0x38>
 800db88:	231c      	movs	r3, #28
 800db8a:	4617      	mov	r7, r2
 800db8c:	460c      	mov	r4, r1
 800db8e:	46a8      	mov	r8, r5
 800db90:	6083      	str	r3, [r0, #8]
 800db92:	f240 1301 	movw	r3, #257	; 0x101
 800db96:	e9c0 5500 	strd	r5, r5, [r0]
 800db9a:	8183      	strh	r3, [r0, #12]
 800db9c:	3501      	adds	r5, #1
 800db9e:	4621      	mov	r1, r4
 800dba0:	4630      	mov	r0, r6
 800dba2:	f009 fd73 	bl	801768c <put_memory>
 800dba6:	42af      	cmp	r7, r5
 800dba8:	60a4      	str	r4, [r4, #8]
 800dbaa:	f104 041c 	add.w	r4, r4, #28
 800dbae:	f804 8c10 	strb.w	r8, [r4, #-16]
 800dbb2:	d1f3      	bne.n	800db9c <rmw_uxrce_init_topic_memory+0x20>
 800dbb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbb8:	4770      	bx	lr
 800dbba:	bf00      	nop

0800dbbc <rmw_uxrce_init_static_input_buffer_memory>:
 800dbbc:	b1ea      	cbz	r2, 800dbfa <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800dbbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbc2:	7b05      	ldrb	r5, [r0, #12]
 800dbc4:	4606      	mov	r6, r0
 800dbc6:	b9b5      	cbnz	r5, 800dbf6 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800dbc8:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800dbcc:	4617      	mov	r7, r2
 800dbce:	460c      	mov	r4, r1
 800dbd0:	46a8      	mov	r8, r5
 800dbd2:	6083      	str	r3, [r0, #8]
 800dbd4:	f240 1301 	movw	r3, #257	; 0x101
 800dbd8:	e9c0 5500 	strd	r5, r5, [r0]
 800dbdc:	8183      	strh	r3, [r0, #12]
 800dbde:	3501      	adds	r5, #1
 800dbe0:	4621      	mov	r1, r4
 800dbe2:	4630      	mov	r0, r6
 800dbe4:	f009 fd52 	bl	801768c <put_memory>
 800dbe8:	42af      	cmp	r7, r5
 800dbea:	60a4      	str	r4, [r4, #8]
 800dbec:	f884 800c 	strb.w	r8, [r4, #12]
 800dbf0:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800dbf4:	d1f3      	bne.n	800dbde <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800dbf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbfa:	4770      	bx	lr

0800dbfc <rmw_uxrce_init_init_options_impl_memory>:
 800dbfc:	b1e2      	cbz	r2, 800dc38 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800dbfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc02:	7b05      	ldrb	r5, [r0, #12]
 800dc04:	4606      	mov	r6, r0
 800dc06:	b9ad      	cbnz	r5, 800dc34 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800dc08:	232c      	movs	r3, #44	; 0x2c
 800dc0a:	4617      	mov	r7, r2
 800dc0c:	460c      	mov	r4, r1
 800dc0e:	46a8      	mov	r8, r5
 800dc10:	6083      	str	r3, [r0, #8]
 800dc12:	f240 1301 	movw	r3, #257	; 0x101
 800dc16:	e9c0 5500 	strd	r5, r5, [r0]
 800dc1a:	8183      	strh	r3, [r0, #12]
 800dc1c:	3501      	adds	r5, #1
 800dc1e:	4621      	mov	r1, r4
 800dc20:	4630      	mov	r0, r6
 800dc22:	f009 fd33 	bl	801768c <put_memory>
 800dc26:	42af      	cmp	r7, r5
 800dc28:	60a4      	str	r4, [r4, #8]
 800dc2a:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 800dc2e:	f804 8c20 	strb.w	r8, [r4, #-32]
 800dc32:	d1f3      	bne.n	800dc1c <rmw_uxrce_init_init_options_impl_memory+0x20>
 800dc34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc38:	4770      	bx	lr
 800dc3a:	bf00      	nop

0800dc3c <rmw_uxrce_init_wait_set_memory>:
 800dc3c:	b1e2      	cbz	r2, 800dc78 <rmw_uxrce_init_wait_set_memory+0x3c>
 800dc3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc42:	7b05      	ldrb	r5, [r0, #12]
 800dc44:	4606      	mov	r6, r0
 800dc46:	b9ad      	cbnz	r5, 800dc74 <rmw_uxrce_init_wait_set_memory+0x38>
 800dc48:	231c      	movs	r3, #28
 800dc4a:	4617      	mov	r7, r2
 800dc4c:	460c      	mov	r4, r1
 800dc4e:	46a8      	mov	r8, r5
 800dc50:	6083      	str	r3, [r0, #8]
 800dc52:	f240 1301 	movw	r3, #257	; 0x101
 800dc56:	e9c0 5500 	strd	r5, r5, [r0]
 800dc5a:	8183      	strh	r3, [r0, #12]
 800dc5c:	3501      	adds	r5, #1
 800dc5e:	4621      	mov	r1, r4
 800dc60:	4630      	mov	r0, r6
 800dc62:	f009 fd13 	bl	801768c <put_memory>
 800dc66:	42af      	cmp	r7, r5
 800dc68:	60a4      	str	r4, [r4, #8]
 800dc6a:	f104 041c 	add.w	r4, r4, #28
 800dc6e:	f804 8c10 	strb.w	r8, [r4, #-16]
 800dc72:	d1f3      	bne.n	800dc5c <rmw_uxrce_init_wait_set_memory+0x20>
 800dc74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc78:	4770      	bx	lr
 800dc7a:	bf00      	nop

0800dc7c <rmw_uxrce_init_guard_condition_memory>:
 800dc7c:	b1e2      	cbz	r2, 800dcb8 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800dc7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc82:	7b05      	ldrb	r5, [r0, #12]
 800dc84:	4606      	mov	r6, r0
 800dc86:	b9ad      	cbnz	r5, 800dcb4 <rmw_uxrce_init_guard_condition_memory+0x38>
 800dc88:	2320      	movs	r3, #32
 800dc8a:	4617      	mov	r7, r2
 800dc8c:	460c      	mov	r4, r1
 800dc8e:	46a8      	mov	r8, r5
 800dc90:	6083      	str	r3, [r0, #8]
 800dc92:	f240 1301 	movw	r3, #257	; 0x101
 800dc96:	e9c0 5500 	strd	r5, r5, [r0]
 800dc9a:	8183      	strh	r3, [r0, #12]
 800dc9c:	3501      	adds	r5, #1
 800dc9e:	4621      	mov	r1, r4
 800dca0:	4630      	mov	r0, r6
 800dca2:	f009 fcf3 	bl	801768c <put_memory>
 800dca6:	42af      	cmp	r7, r5
 800dca8:	60a4      	str	r4, [r4, #8]
 800dcaa:	f104 0420 	add.w	r4, r4, #32
 800dcae:	f804 8c14 	strb.w	r8, [r4, #-20]
 800dcb2:	d1f3      	bne.n	800dc9c <rmw_uxrce_init_guard_condition_memory+0x20>
 800dcb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcb8:	4770      	bx	lr
 800dcba:	bf00      	nop

0800dcbc <rmw_uxrce_fini_session_memory>:
 800dcbc:	4601      	mov	r1, r0
 800dcbe:	4801      	ldr	r0, [pc, #4]	; (800dcc4 <rmw_uxrce_fini_session_memory+0x8>)
 800dcc0:	f009 bce4 	b.w	801768c <put_memory>
 800dcc4:	2001017c 	.word	0x2001017c

0800dcc8 <rmw_uxrce_fini_node_memory>:
 800dcc8:	b538      	push	{r3, r4, r5, lr}
 800dcca:	4604      	mov	r4, r0
 800dccc:	6800      	ldr	r0, [r0, #0]
 800dcce:	b128      	cbz	r0, 800dcdc <rmw_uxrce_fini_node_memory+0x14>
 800dcd0:	4b07      	ldr	r3, [pc, #28]	; (800dcf0 <rmw_uxrce_fini_node_memory+0x28>)
 800dcd2:	6819      	ldr	r1, [r3, #0]
 800dcd4:	f7f2 fab4 	bl	8000240 <strcmp>
 800dcd8:	b940      	cbnz	r0, 800dcec <rmw_uxrce_fini_node_memory+0x24>
 800dcda:	6020      	str	r0, [r4, #0]
 800dcdc:	6861      	ldr	r1, [r4, #4]
 800dcde:	b129      	cbz	r1, 800dcec <rmw_uxrce_fini_node_memory+0x24>
 800dce0:	2500      	movs	r5, #0
 800dce2:	4804      	ldr	r0, [pc, #16]	; (800dcf4 <rmw_uxrce_fini_node_memory+0x2c>)
 800dce4:	610d      	str	r5, [r1, #16]
 800dce6:	f009 fcd1 	bl	801768c <put_memory>
 800dcea:	6065      	str	r5, [r4, #4]
 800dcec:	bd38      	pop	{r3, r4, r5, pc}
 800dcee:	bf00      	nop
 800dcf0:	0801df88 	.word	0x0801df88
 800dcf4:	2001014c 	.word	0x2001014c

0800dcf8 <rmw_uxrce_fini_publisher_memory>:
 800dcf8:	b510      	push	{r4, lr}
 800dcfa:	4604      	mov	r4, r0
 800dcfc:	6800      	ldr	r0, [r0, #0]
 800dcfe:	b128      	cbz	r0, 800dd0c <rmw_uxrce_fini_publisher_memory+0x14>
 800dd00:	4b06      	ldr	r3, [pc, #24]	; (800dd1c <rmw_uxrce_fini_publisher_memory+0x24>)
 800dd02:	6819      	ldr	r1, [r3, #0]
 800dd04:	f7f2 fa9c 	bl	8000240 <strcmp>
 800dd08:	b938      	cbnz	r0, 800dd1a <rmw_uxrce_fini_publisher_memory+0x22>
 800dd0a:	6020      	str	r0, [r4, #0]
 800dd0c:	6861      	ldr	r1, [r4, #4]
 800dd0e:	b121      	cbz	r1, 800dd1a <rmw_uxrce_fini_publisher_memory+0x22>
 800dd10:	4803      	ldr	r0, [pc, #12]	; (800dd20 <rmw_uxrce_fini_publisher_memory+0x28>)
 800dd12:	f009 fcbb 	bl	801768c <put_memory>
 800dd16:	2300      	movs	r3, #0
 800dd18:	6063      	str	r3, [r4, #4]
 800dd1a:	bd10      	pop	{r4, pc}
 800dd1c:	0801df88 	.word	0x0801df88
 800dd20:	2001015c 	.word	0x2001015c

0800dd24 <rmw_uxrce_fini_subscription_memory>:
 800dd24:	b510      	push	{r4, lr}
 800dd26:	4604      	mov	r4, r0
 800dd28:	6800      	ldr	r0, [r0, #0]
 800dd2a:	b128      	cbz	r0, 800dd38 <rmw_uxrce_fini_subscription_memory+0x14>
 800dd2c:	4b06      	ldr	r3, [pc, #24]	; (800dd48 <rmw_uxrce_fini_subscription_memory+0x24>)
 800dd2e:	6819      	ldr	r1, [r3, #0]
 800dd30:	f7f2 fa86 	bl	8000240 <strcmp>
 800dd34:	b938      	cbnz	r0, 800dd46 <rmw_uxrce_fini_subscription_memory+0x22>
 800dd36:	6020      	str	r0, [r4, #0]
 800dd38:	6861      	ldr	r1, [r4, #4]
 800dd3a:	b121      	cbz	r1, 800dd46 <rmw_uxrce_fini_subscription_memory+0x22>
 800dd3c:	4803      	ldr	r0, [pc, #12]	; (800dd4c <rmw_uxrce_fini_subscription_memory+0x28>)
 800dd3e:	f009 fca5 	bl	801768c <put_memory>
 800dd42:	2300      	movs	r3, #0
 800dd44:	6063      	str	r3, [r4, #4]
 800dd46:	bd10      	pop	{r4, pc}
 800dd48:	0801df88 	.word	0x0801df88
 800dd4c:	2001019c 	.word	0x2001019c

0800dd50 <rmw_uxrce_fini_service_memory>:
 800dd50:	b510      	push	{r4, lr}
 800dd52:	4604      	mov	r4, r0
 800dd54:	6800      	ldr	r0, [r0, #0]
 800dd56:	b128      	cbz	r0, 800dd64 <rmw_uxrce_fini_service_memory+0x14>
 800dd58:	4b06      	ldr	r3, [pc, #24]	; (800dd74 <rmw_uxrce_fini_service_memory+0x24>)
 800dd5a:	6819      	ldr	r1, [r3, #0]
 800dd5c:	f7f2 fa70 	bl	8000240 <strcmp>
 800dd60:	b938      	cbnz	r0, 800dd72 <rmw_uxrce_fini_service_memory+0x22>
 800dd62:	6020      	str	r0, [r4, #0]
 800dd64:	6861      	ldr	r1, [r4, #4]
 800dd66:	b121      	cbz	r1, 800dd72 <rmw_uxrce_fini_service_memory+0x22>
 800dd68:	4803      	ldr	r0, [pc, #12]	; (800dd78 <rmw_uxrce_fini_service_memory+0x28>)
 800dd6a:	f009 fc8f 	bl	801768c <put_memory>
 800dd6e:	2300      	movs	r3, #0
 800dd70:	6063      	str	r3, [r4, #4]
 800dd72:	bd10      	pop	{r4, pc}
 800dd74:	0801df88 	.word	0x0801df88
 800dd78:	2001016c 	.word	0x2001016c

0800dd7c <rmw_uxrce_fini_client_memory>:
 800dd7c:	b510      	push	{r4, lr}
 800dd7e:	4604      	mov	r4, r0
 800dd80:	6800      	ldr	r0, [r0, #0]
 800dd82:	b128      	cbz	r0, 800dd90 <rmw_uxrce_fini_client_memory+0x14>
 800dd84:	4b06      	ldr	r3, [pc, #24]	; (800dda0 <rmw_uxrce_fini_client_memory+0x24>)
 800dd86:	6819      	ldr	r1, [r3, #0]
 800dd88:	f7f2 fa5a 	bl	8000240 <strcmp>
 800dd8c:	b938      	cbnz	r0, 800dd9e <rmw_uxrce_fini_client_memory+0x22>
 800dd8e:	6020      	str	r0, [r4, #0]
 800dd90:	6861      	ldr	r1, [r4, #4]
 800dd92:	b121      	cbz	r1, 800dd9e <rmw_uxrce_fini_client_memory+0x22>
 800dd94:	4803      	ldr	r0, [pc, #12]	; (800dda4 <rmw_uxrce_fini_client_memory+0x28>)
 800dd96:	f009 fc79 	bl	801768c <put_memory>
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	6063      	str	r3, [r4, #4]
 800dd9e:	bd10      	pop	{r4, pc}
 800dda0:	0801df88 	.word	0x0801df88
 800dda4:	2000b7b8 	.word	0x2000b7b8

0800dda8 <rmw_uxrce_fini_topic_memory>:
 800dda8:	b510      	push	{r4, lr}
 800ddaa:	4604      	mov	r4, r0
 800ddac:	4803      	ldr	r0, [pc, #12]	; (800ddbc <rmw_uxrce_fini_topic_memory+0x14>)
 800ddae:	4621      	mov	r1, r4
 800ddb0:	f009 fc6c 	bl	801768c <put_memory>
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	61a3      	str	r3, [r4, #24]
 800ddb8:	bd10      	pop	{r4, pc}
 800ddba:	bf00      	nop
 800ddbc:	200101ac 	.word	0x200101ac

0800ddc0 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800ddc0:	b082      	sub	sp, #8
 800ddc2:	492b      	ldr	r1, [pc, #172]	; (800de70 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800ddc4:	b530      	push	{r4, r5, lr}
 800ddc6:	680d      	ldr	r5, [r1, #0]
 800ddc8:	ac03      	add	r4, sp, #12
 800ddca:	e884 000c 	stmia.w	r4, {r2, r3}
 800ddce:	461c      	mov	r4, r3
 800ddd0:	2d00      	cmp	r5, #0
 800ddd2:	d04b      	beq.n	800de6c <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 800ddd4:	462b      	mov	r3, r5
 800ddd6:	2100      	movs	r1, #0
 800ddd8:	689a      	ldr	r2, [r3, #8]
 800ddda:	685b      	ldr	r3, [r3, #4]
 800dddc:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800dde0:	4290      	cmp	r0, r2
 800dde2:	bf08      	it	eq
 800dde4:	3101      	addeq	r1, #1
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d1f6      	bne.n	800ddd8 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800ddea:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800ddee:	2b02      	cmp	r3, #2
 800ddf0:	d029      	beq.n	800de46 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800ddf2:	d820      	bhi.n	800de36 <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 800ddf4:	428c      	cmp	r4, r1
 800ddf6:	d828      	bhi.n	800de4a <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800ddf8:	fab4 f284 	clz	r2, r4
 800ddfc:	0952      	lsrs	r2, r2, #5
 800ddfe:	b324      	cbz	r4, 800de4a <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800de00:	b1dd      	cbz	r5, 800de3a <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 800de02:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800de06:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800de0a:	e001      	b.n	800de10 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 800de0c:	686d      	ldr	r5, [r5, #4]
 800de0e:	b1ad      	cbz	r5, 800de3c <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800de10:	68ab      	ldr	r3, [r5, #8]
 800de12:	f8d3 1814 	ldr.w	r1, [r3, #2068]	; 0x814
 800de16:	4288      	cmp	r0, r1
 800de18:	d1f8      	bne.n	800de0c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800de1a:	f8d3 1818 	ldr.w	r1, [r3, #2072]	; 0x818
 800de1e:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800de22:	4561      	cmp	r1, ip
 800de24:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800de28:	eb73 0e04 	sbcs.w	lr, r3, r4
 800de2c:	daee      	bge.n	800de0c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800de2e:	468c      	mov	ip, r1
 800de30:	461c      	mov	r4, r3
 800de32:	462a      	mov	r2, r5
 800de34:	e7ea      	b.n	800de0c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800de36:	2b03      	cmp	r3, #3
 800de38:	d0dc      	beq.n	800ddf4 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 800de3a:	2200      	movs	r2, #0
 800de3c:	4610      	mov	r0, r2
 800de3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800de42:	b002      	add	sp, #8
 800de44:	4770      	bx	lr
 800de46:	428c      	cmp	r4, r1
 800de48:	d905      	bls.n	800de56 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 800de4a:	4809      	ldr	r0, [pc, #36]	; (800de70 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800de4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800de50:	b002      	add	sp, #8
 800de52:	f009 bc0b 	b.w	801766c <get_memory>
 800de56:	fab4 f284 	clz	r2, r4
 800de5a:	0952      	lsrs	r2, r2, #5
 800de5c:	2c00      	cmp	r4, #0
 800de5e:	d1ed      	bne.n	800de3c <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800de60:	4803      	ldr	r0, [pc, #12]	; (800de70 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800de62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800de66:	b002      	add	sp, #8
 800de68:	f009 bc00 	b.w	801766c <get_memory>
 800de6c:	4629      	mov	r1, r5
 800de6e:	e7bc      	b.n	800ddea <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800de70:	2001018c 	.word	0x2001018c

0800de74 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800de74:	4b12      	ldr	r3, [pc, #72]	; (800dec0 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	b530      	push	{r4, r5, lr}
 800de7a:	b1f3      	cbz	r3, 800deba <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 800de7c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800de80:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 800de84:	2400      	movs	r4, #0
 800de86:	e001      	b.n	800de8c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800de88:	685b      	ldr	r3, [r3, #4]
 800de8a:	b1a3      	cbz	r3, 800deb6 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800de8c:	689a      	ldr	r2, [r3, #8]
 800de8e:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 800de92:	4288      	cmp	r0, r1
 800de94:	d1f8      	bne.n	800de88 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800de96:	f8d2 1818 	ldr.w	r1, [r2, #2072]	; 0x818
 800de9a:	f502 6202 	add.w	r2, r2, #2080	; 0x820
 800de9e:	4571      	cmp	r1, lr
 800dea0:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800dea4:	eb72 050c 	sbcs.w	r5, r2, ip
 800dea8:	daee      	bge.n	800de88 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800deaa:	461c      	mov	r4, r3
 800deac:	685b      	ldr	r3, [r3, #4]
 800deae:	468e      	mov	lr, r1
 800deb0:	4694      	mov	ip, r2
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d1ea      	bne.n	800de8c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800deb6:	4620      	mov	r0, r4
 800deb8:	bd30      	pop	{r4, r5, pc}
 800deba:	461c      	mov	r4, r3
 800debc:	4620      	mov	r0, r4
 800debe:	bd30      	pop	{r4, r5, pc}
 800dec0:	2001018c 	.word	0x2001018c
 800dec4:	00000000 	.word	0x00000000

0800dec8 <rmw_uxrce_clean_expired_static_input_buffer>:
 800dec8:	4b3d      	ldr	r3, [pc, #244]	; (800dfc0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800deca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dece:	681f      	ldr	r7, [r3, #0]
 800ded0:	ed2d 8b06 	vpush	{d8-d10}
 800ded4:	b08d      	sub	sp, #52	; 0x34
 800ded6:	f00a fcfb 	bl	80188d0 <rmw_uros_epoch_nanos>
 800deda:	2f00      	cmp	r7, #0
 800dedc:	d05d      	beq.n	800df9a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800dede:	46b8      	mov	r8, r7
 800dee0:	4681      	mov	r9, r0
 800dee2:	468a      	mov	sl, r1
 800dee4:	ac04      	add	r4, sp, #16
 800dee6:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800deea:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 800deee:	2b04      	cmp	r3, #4
 800def0:	ed9f 8b2d 	vldr	d8, [pc, #180]	; 800dfa8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800def4:	ed9f ab2e 	vldr	d10, [pc, #184]	; 800dfb0 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800def8:	ed9f 9b2f 	vldr	d9, [pc, #188]	; 800dfb8 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800defc:	d03f      	beq.n	800df7e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800defe:	2b05      	cmp	r3, #5
 800df00:	d044      	beq.n	800df8c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800df02:	2b03      	cmp	r3, #3
 800df04:	d03b      	beq.n	800df7e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800df06:	ed8d 8b04 	vstr	d8, [sp, #16]
 800df0a:	ed8d ab06 	vstr	d10, [sp, #24]
 800df0e:	ab08      	add	r3, sp, #32
 800df10:	ed8d 8b08 	vstr	d8, [sp, #32]
 800df14:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 800df18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800df1a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800df1e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800df22:	f009 f9c5 	bl	80172b0 <rmw_time_equal>
 800df26:	b118      	cbz	r0, 800df30 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800df28:	ed8d 9b04 	vstr	d9, [sp, #16]
 800df2c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800df30:	f8d5 6818 	ldr.w	r6, [r5, #2072]	; 0x818
 800df34:	f505 6502 	add.w	r5, r5, #2080	; 0x820
 800df38:	f855 7c04 	ldr.w	r7, [r5, #-4]
 800df3c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800df40:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800df44:	f009 fa0a 	bl	801735c <rmw_time_total_nsec>
 800df48:	1830      	adds	r0, r6, r0
 800df4a:	eb47 0101 	adc.w	r1, r7, r1
 800df4e:	4548      	cmp	r0, r9
 800df50:	eb71 030a 	sbcs.w	r3, r1, sl
 800df54:	db05      	blt.n	800df62 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800df56:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800df5a:	4591      	cmp	r9, r2
 800df5c:	eb7a 0303 	sbcs.w	r3, sl, r3
 800df60:	da03      	bge.n	800df6a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800df62:	4641      	mov	r1, r8
 800df64:	4816      	ldr	r0, [pc, #88]	; (800dfc0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800df66:	f009 fb91 	bl	801768c <put_memory>
 800df6a:	f1bb 0f00 	cmp.w	fp, #0
 800df6e:	d014      	beq.n	800df9a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800df70:	46d8      	mov	r8, fp
 800df72:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800df76:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 800df7a:	2b04      	cmp	r3, #4
 800df7c:	d1bf      	bne.n	800defe <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800df7e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 800df82:	3340      	adds	r3, #64	; 0x40
 800df84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800df86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800df8a:	e7c0      	b.n	800df0e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800df8c:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 800df90:	3348      	adds	r3, #72	; 0x48
 800df92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800df94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800df98:	e7b9      	b.n	800df0e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800df9a:	b00d      	add	sp, #52	; 0x34
 800df9c:	ecbd 8b06 	vpop	{d8-d10}
 800dfa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfa4:	f3af 8000 	nop.w
	...
 800dfb0:	00000001 	.word	0x00000001
 800dfb4:	00000000 	.word	0x00000000
 800dfb8:	0000001e 	.word	0x0000001e
 800dfbc:	00000000 	.word	0x00000000
 800dfc0:	2001018c 	.word	0x2001018c

0800dfc4 <run_xrce_session>:
 800dfc4:	b510      	push	{r4, lr}
 800dfc6:	788c      	ldrb	r4, [r1, #2]
 800dfc8:	b086      	sub	sp, #24
 800dfca:	2c01      	cmp	r4, #1
 800dfcc:	f8ad 200e 	strh.w	r2, [sp, #14]
 800dfd0:	d00c      	beq.n	800dfec <run_xrce_session+0x28>
 800dfd2:	2401      	movs	r4, #1
 800dfd4:	4619      	mov	r1, r3
 800dfd6:	f10d 020e 	add.w	r2, sp, #14
 800dfda:	f10d 0317 	add.w	r3, sp, #23
 800dfde:	9400      	str	r4, [sp, #0]
 800dfe0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800dfe4:	f002 ff88 	bl	8010ef8 <uxr_run_session_until_all_status>
 800dfe8:	b006      	add	sp, #24
 800dfea:	bd10      	pop	{r4, pc}
 800dfec:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800dff0:	f002 fba4 	bl	801073c <uxr_flash_output_streams>
 800dff4:	4620      	mov	r0, r4
 800dff6:	b006      	add	sp, #24
 800dff8:	bd10      	pop	{r4, pc}
 800dffa:	bf00      	nop

0800dffc <convert_qos_profile>:
 800dffc:	7a4a      	ldrb	r2, [r1, #9]
 800dffe:	f891 c008 	ldrb.w	ip, [r1, #8]
 800e002:	2a02      	cmp	r2, #2
 800e004:	bf18      	it	ne
 800e006:	2200      	movne	r2, #0
 800e008:	7002      	strb	r2, [r0, #0]
 800e00a:	f1ac 0202 	sub.w	r2, ip, #2
 800e00e:	fab2 f282 	clz	r2, r2
 800e012:	0952      	lsrs	r2, r2, #5
 800e014:	7042      	strb	r2, [r0, #1]
 800e016:	780a      	ldrb	r2, [r1, #0]
 800e018:	8889      	ldrh	r1, [r1, #4]
 800e01a:	f1a2 0202 	sub.w	r2, r2, #2
 800e01e:	8081      	strh	r1, [r0, #4]
 800e020:	fab2 f282 	clz	r2, r2
 800e024:	0952      	lsrs	r2, r2, #5
 800e026:	7082      	strb	r2, [r0, #2]
 800e028:	4770      	bx	lr
 800e02a:	bf00      	nop

0800e02c <generate_service_topics>:
 800e02c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e02e:	461d      	mov	r5, r3
 800e030:	b083      	sub	sp, #12
 800e032:	4606      	mov	r6, r0
 800e034:	4c11      	ldr	r4, [pc, #68]	; (800e07c <generate_service_topics+0x50>)
 800e036:	4608      	mov	r0, r1
 800e038:	4b11      	ldr	r3, [pc, #68]	; (800e080 <generate_service_topics+0x54>)
 800e03a:	4617      	mov	r7, r2
 800e03c:	4629      	mov	r1, r5
 800e03e:	4a11      	ldr	r2, [pc, #68]	; (800e084 <generate_service_topics+0x58>)
 800e040:	9401      	str	r4, [sp, #4]
 800e042:	9600      	str	r6, [sp, #0]
 800e044:	f00d fb44 	bl	801b6d0 <sniprintf>
 800e048:	4a0f      	ldr	r2, [pc, #60]	; (800e088 <generate_service_topics+0x5c>)
 800e04a:	4604      	mov	r4, r0
 800e04c:	4b0f      	ldr	r3, [pc, #60]	; (800e08c <generate_service_topics+0x60>)
 800e04e:	9201      	str	r2, [sp, #4]
 800e050:	4638      	mov	r0, r7
 800e052:	4a0c      	ldr	r2, [pc, #48]	; (800e084 <generate_service_topics+0x58>)
 800e054:	4629      	mov	r1, r5
 800e056:	9600      	str	r6, [sp, #0]
 800e058:	f00d fb3a 	bl	801b6d0 <sniprintf>
 800e05c:	2c00      	cmp	r4, #0
 800e05e:	bfa8      	it	ge
 800e060:	42a5      	cmpge	r5, r4
 800e062:	bfcc      	ite	gt
 800e064:	2401      	movgt	r4, #1
 800e066:	2400      	movle	r4, #0
 800e068:	dd05      	ble.n	800e076 <generate_service_topics+0x4a>
 800e06a:	2800      	cmp	r0, #0
 800e06c:	bfa8      	it	ge
 800e06e:	4285      	cmpge	r5, r0
 800e070:	bfcc      	ite	gt
 800e072:	2401      	movgt	r4, #1
 800e074:	2400      	movle	r4, #0
 800e076:	4620      	mov	r0, r4
 800e078:	b003      	add	sp, #12
 800e07a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e07c:	0801d5b0 	.word	0x0801d5b0
 800e080:	0801d5ac 	.word	0x0801d5ac
 800e084:	0801d588 	.word	0x0801d588
 800e088:	0801d5a4 	.word	0x0801d5a4
 800e08c:	0801d5a0 	.word	0x0801d5a0

0800e090 <generate_service_types>:
 800e090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e094:	4606      	mov	r6, r0
 800e096:	b087      	sub	sp, #28
 800e098:	461c      	mov	r4, r3
 800e09a:	6883      	ldr	r3, [r0, #8]
 800e09c:	460d      	mov	r5, r1
 800e09e:	4617      	mov	r7, r2
 800e0a0:	4798      	blx	r3
 800e0a2:	68f3      	ldr	r3, [r6, #12]
 800e0a4:	4606      	mov	r6, r0
 800e0a6:	4798      	blx	r3
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	f8d0 b004 	ldr.w	fp, [r0, #4]
 800e0ae:	6872      	ldr	r2, [r6, #4]
 800e0b0:	702b      	strb	r3, [r5, #0]
 800e0b2:	6813      	ldr	r3, [r2, #0]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d03f      	beq.n	800e138 <generate_service_types+0xa8>
 800e0b8:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800e14c <generate_service_types+0xbc>
 800e0bc:	4649      	mov	r1, r9
 800e0be:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800e154 <generate_service_types+0xc4>
 800e0c2:	4628      	mov	r0, r5
 800e0c4:	f8df a090 	ldr.w	sl, [pc, #144]	; 800e158 <generate_service_types+0xc8>
 800e0c8:	f8cd 8014 	str.w	r8, [sp, #20]
 800e0cc:	6852      	ldr	r2, [r2, #4]
 800e0ce:	9100      	str	r1, [sp, #0]
 800e0d0:	4621      	mov	r1, r4
 800e0d2:	f8cd 8008 	str.w	r8, [sp, #8]
 800e0d6:	f8cd a004 	str.w	sl, [sp, #4]
 800e0da:	e9cd 9203 	strd	r9, r2, [sp, #12]
 800e0de:	4a1a      	ldr	r2, [pc, #104]	; (800e148 <generate_service_types+0xb8>)
 800e0e0:	f00d faf6 	bl	801b6d0 <sniprintf>
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	42a0      	cmp	r0, r4
 800e0e8:	ea6f 0600 	mvn.w	r6, r0
 800e0ec:	703b      	strb	r3, [r7, #0]
 800e0ee:	f8db 3000 	ldr.w	r3, [fp]
 800e0f2:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 800e0f6:	bfac      	ite	ge
 800e0f8:	2500      	movge	r5, #0
 800e0fa:	2501      	movlt	r5, #1
 800e0fc:	b30b      	cbz	r3, 800e142 <generate_service_types+0xb2>
 800e0fe:	4a13      	ldr	r2, [pc, #76]	; (800e14c <generate_service_types+0xbc>)
 800e100:	f8cd 8014 	str.w	r8, [sp, #20]
 800e104:	402e      	ands	r6, r5
 800e106:	f8db 1004 	ldr.w	r1, [fp, #4]
 800e10a:	4638      	mov	r0, r7
 800e10c:	9104      	str	r1, [sp, #16]
 800e10e:	4621      	mov	r1, r4
 800e110:	e9cd 2a00 	strd	r2, sl, [sp]
 800e114:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800e118:	4a0b      	ldr	r2, [pc, #44]	; (800e148 <generate_service_types+0xb8>)
 800e11a:	f00d fad9 	bl	801b6d0 <sniprintf>
 800e11e:	2800      	cmp	r0, #0
 800e120:	bfb4      	ite	lt
 800e122:	2600      	movlt	r6, #0
 800e124:	f006 0601 	andge.w	r6, r6, #1
 800e128:	42a0      	cmp	r0, r4
 800e12a:	bfac      	ite	ge
 800e12c:	2000      	movge	r0, #0
 800e12e:	f006 0001 	andlt.w	r0, r6, #1
 800e132:	b007      	add	sp, #28
 800e134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e138:	4b05      	ldr	r3, [pc, #20]	; (800e150 <generate_service_types+0xc0>)
 800e13a:	f8df 9010 	ldr.w	r9, [pc, #16]	; 800e14c <generate_service_types+0xbc>
 800e13e:	4619      	mov	r1, r3
 800e140:	e7bd      	b.n	800e0be <generate_service_types+0x2e>
 800e142:	4b03      	ldr	r3, [pc, #12]	; (800e150 <generate_service_types+0xc0>)
 800e144:	461a      	mov	r2, r3
 800e146:	e7db      	b.n	800e100 <generate_service_types+0x70>
 800e148:	0801d580 	.word	0x0801d580
 800e14c:	0801d57c 	.word	0x0801d57c
 800e150:	0801dd60 	.word	0x0801dd60
 800e154:	0801d590 	.word	0x0801d590
 800e158:	0801d594 	.word	0x0801d594

0800e15c <generate_type_name>:
 800e15c:	2300      	movs	r3, #0
 800e15e:	b530      	push	{r4, r5, lr}
 800e160:	700b      	strb	r3, [r1, #0]
 800e162:	b087      	sub	sp, #28
 800e164:	6803      	ldr	r3, [r0, #0]
 800e166:	4614      	mov	r4, r2
 800e168:	b1bb      	cbz	r3, 800e19a <generate_type_name+0x3e>
 800e16a:	4a0e      	ldr	r2, [pc, #56]	; (800e1a4 <generate_type_name+0x48>)
 800e16c:	4615      	mov	r5, r2
 800e16e:	9500      	str	r5, [sp, #0]
 800e170:	9203      	str	r2, [sp, #12]
 800e172:	4d0d      	ldr	r5, [pc, #52]	; (800e1a8 <generate_type_name+0x4c>)
 800e174:	6842      	ldr	r2, [r0, #4]
 800e176:	4608      	mov	r0, r1
 800e178:	490c      	ldr	r1, [pc, #48]	; (800e1ac <generate_type_name+0x50>)
 800e17a:	9204      	str	r2, [sp, #16]
 800e17c:	9105      	str	r1, [sp, #20]
 800e17e:	9102      	str	r1, [sp, #8]
 800e180:	4621      	mov	r1, r4
 800e182:	4a0b      	ldr	r2, [pc, #44]	; (800e1b0 <generate_type_name+0x54>)
 800e184:	9501      	str	r5, [sp, #4]
 800e186:	f00d faa3 	bl	801b6d0 <sniprintf>
 800e18a:	2800      	cmp	r0, #0
 800e18c:	bfa8      	it	ge
 800e18e:	4284      	cmpge	r4, r0
 800e190:	bfcc      	ite	gt
 800e192:	2001      	movgt	r0, #1
 800e194:	2000      	movle	r0, #0
 800e196:	b007      	add	sp, #28
 800e198:	bd30      	pop	{r4, r5, pc}
 800e19a:	4b06      	ldr	r3, [pc, #24]	; (800e1b4 <generate_type_name+0x58>)
 800e19c:	4a01      	ldr	r2, [pc, #4]	; (800e1a4 <generate_type_name+0x48>)
 800e19e:	461d      	mov	r5, r3
 800e1a0:	e7e5      	b.n	800e16e <generate_type_name+0x12>
 800e1a2:	bf00      	nop
 800e1a4:	0801d57c 	.word	0x0801d57c
 800e1a8:	0801d594 	.word	0x0801d594
 800e1ac:	0801d590 	.word	0x0801d590
 800e1b0:	0801d580 	.word	0x0801d580
 800e1b4:	0801dd60 	.word	0x0801dd60

0800e1b8 <generate_topic_name>:
 800e1b8:	b530      	push	{r4, r5, lr}
 800e1ba:	4614      	mov	r4, r2
 800e1bc:	b083      	sub	sp, #12
 800e1be:	4605      	mov	r5, r0
 800e1c0:	4b07      	ldr	r3, [pc, #28]	; (800e1e0 <generate_topic_name+0x28>)
 800e1c2:	4a08      	ldr	r2, [pc, #32]	; (800e1e4 <generate_topic_name+0x2c>)
 800e1c4:	4608      	mov	r0, r1
 800e1c6:	9500      	str	r5, [sp, #0]
 800e1c8:	4621      	mov	r1, r4
 800e1ca:	f00d fa81 	bl	801b6d0 <sniprintf>
 800e1ce:	2800      	cmp	r0, #0
 800e1d0:	bfa8      	it	ge
 800e1d2:	4284      	cmpge	r4, r0
 800e1d4:	bfcc      	ite	gt
 800e1d6:	2001      	movgt	r0, #1
 800e1d8:	2000      	movle	r0, #0
 800e1da:	b003      	add	sp, #12
 800e1dc:	bd30      	pop	{r4, r5, pc}
 800e1de:	bf00      	nop
 800e1e0:	0801d5b8 	.word	0x0801d5b8
 800e1e4:	0801d598 	.word	0x0801d598

0800e1e8 <is_uxrce_rmw_identifier_valid>:
 800e1e8:	b510      	push	{r4, lr}
 800e1ea:	4604      	mov	r4, r0
 800e1ec:	b140      	cbz	r0, 800e200 <is_uxrce_rmw_identifier_valid+0x18>
 800e1ee:	f009 fac3 	bl	8017778 <rmw_get_implementation_identifier>
 800e1f2:	4601      	mov	r1, r0
 800e1f4:	4620      	mov	r0, r4
 800e1f6:	f7f2 f823 	bl	8000240 <strcmp>
 800e1fa:	fab0 f080 	clz	r0, r0
 800e1fe:	0940      	lsrs	r0, r0, #5
 800e200:	bd10      	pop	{r4, pc}
 800e202:	bf00      	nop

0800e204 <get_message_typesupport_handle>:
 800e204:	6883      	ldr	r3, [r0, #8]
 800e206:	4718      	bx	r3

0800e208 <get_message_typesupport_handle_function>:
 800e208:	b510      	push	{r4, lr}
 800e20a:	4604      	mov	r4, r0
 800e20c:	6800      	ldr	r0, [r0, #0]
 800e20e:	f7f2 f817 	bl	8000240 <strcmp>
 800e212:	2800      	cmp	r0, #0
 800e214:	bf0c      	ite	eq
 800e216:	4620      	moveq	r0, r4
 800e218:	2000      	movne	r0, #0
 800e21a:	bd10      	pop	{r4, pc}

0800e21c <get_service_typesupport_handle>:
 800e21c:	6883      	ldr	r3, [r0, #8]
 800e21e:	4718      	bx	r3

0800e220 <get_service_typesupport_handle_function>:
 800e220:	b510      	push	{r4, lr}
 800e222:	4604      	mov	r4, r0
 800e224:	6800      	ldr	r0, [r0, #0]
 800e226:	f7f2 f80b 	bl	8000240 <strcmp>
 800e22a:	2800      	cmp	r0, #0
 800e22c:	bf0c      	ite	eq
 800e22e:	4620      	moveq	r0, r4
 800e230:	2000      	movne	r0, #0
 800e232:	bd10      	pop	{r4, pc}

0800e234 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800e234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e238:	6805      	ldr	r5, [r0, #0]
 800e23a:	4604      	mov	r4, r0
 800e23c:	460e      	mov	r6, r1
 800e23e:	4628      	mov	r0, r5
 800e240:	f7f1 fffe 	bl	8000240 <strcmp>
 800e244:	b1c8      	cbz	r0, 800e27a <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800e246:	4b11      	ldr	r3, [pc, #68]	; (800e28c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	429d      	cmp	r5, r3
 800e24c:	d112      	bne.n	800e274 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800e24e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800e252:	f8d8 4000 	ldr.w	r4, [r8]
 800e256:	b16c      	cbz	r4, 800e274 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800e258:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e25c:	2700      	movs	r7, #0
 800e25e:	3d04      	subs	r5, #4
 800e260:	4631      	mov	r1, r6
 800e262:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800e266:	f7f1 ffeb 	bl	8000240 <strcmp>
 800e26a:	00bb      	lsls	r3, r7, #2
 800e26c:	b140      	cbz	r0, 800e280 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800e26e:	3701      	adds	r7, #1
 800e270:	42bc      	cmp	r4, r7
 800e272:	d1f5      	bne.n	800e260 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800e274:	2000      	movs	r0, #0
 800e276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e27a:	4620      	mov	r0, r4
 800e27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e280:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e284:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e288:	58d3      	ldr	r3, [r2, r3]
 800e28a:	4718      	bx	r3
 800e28c:	2000092c 	.word	0x2000092c

0800e290 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 800e290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e294:	6805      	ldr	r5, [r0, #0]
 800e296:	4604      	mov	r4, r0
 800e298:	460e      	mov	r6, r1
 800e29a:	4628      	mov	r0, r5
 800e29c:	f7f1 ffd0 	bl	8000240 <strcmp>
 800e2a0:	b1c8      	cbz	r0, 800e2d6 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 800e2a2:	4b11      	ldr	r3, [pc, #68]	; (800e2e8 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	429d      	cmp	r5, r3
 800e2a8:	d112      	bne.n	800e2d0 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800e2aa:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800e2ae:	f8d8 4000 	ldr.w	r4, [r8]
 800e2b2:	b16c      	cbz	r4, 800e2d0 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800e2b4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e2b8:	2700      	movs	r7, #0
 800e2ba:	3d04      	subs	r5, #4
 800e2bc:	4631      	mov	r1, r6
 800e2be:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800e2c2:	f7f1 ffbd 	bl	8000240 <strcmp>
 800e2c6:	00bb      	lsls	r3, r7, #2
 800e2c8:	b140      	cbz	r0, 800e2dc <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 800e2ca:	3701      	adds	r7, #1
 800e2cc:	42bc      	cmp	r4, r7
 800e2ce:	d1f5      	bne.n	800e2bc <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 800e2d0:	2000      	movs	r0, #0
 800e2d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2d6:	4620      	mov	r0, r4
 800e2d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2dc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e2e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2e4:	58d3      	ldr	r3, [r2, r3]
 800e2e6:	4718      	bx	r3
 800e2e8:	2000092c 	.word	0x2000092c

0800e2ec <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__size_function__ServiceEventInfo__client_gid>:
 800e2ec:	2010      	movs	r0, #16
 800e2ee:	4770      	bx	lr

0800e2f0 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__get_const_function__ServiceEventInfo__client_gid>:
 800e2f0:	4408      	add	r0, r1
 800e2f2:	4770      	bx	lr

0800e2f4 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__fetch_function__ServiceEventInfo__client_gid>:
 800e2f4:	5c43      	ldrb	r3, [r0, r1]
 800e2f6:	7013      	strb	r3, [r2, #0]
 800e2f8:	4770      	bx	lr
 800e2fa:	bf00      	nop

0800e2fc <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__assign_function__ServiceEventInfo__client_gid>:
 800e2fc:	7813      	ldrb	r3, [r2, #0]
 800e2fe:	5443      	strb	r3, [r0, r1]
 800e300:	4770      	bx	lr
 800e302:	bf00      	nop

0800e304 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__ServiceEventInfo_init_function>:
 800e304:	f00a bb3a 	b.w	801897c <service_msgs__msg__ServiceEventInfo__init>

0800e308 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__ServiceEventInfo_fini_function>:
 800e308:	f00a bb4a 	b.w	80189a0 <service_msgs__msg__ServiceEventInfo__fini>

0800e30c <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__get_function__ServiceEventInfo__client_gid>:
 800e30c:	4408      	add	r0, r1
 800e30e:	4770      	bx	lr

0800e310 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>:
 800e310:	b508      	push	{r3, lr}
 800e312:	f000 f8db 	bl	800e4cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e316:	4b06      	ldr	r3, [pc, #24]	; (800e330 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 800e318:	4906      	ldr	r1, [pc, #24]	; (800e334 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x24>)
 800e31a:	681a      	ldr	r2, [r3, #0]
 800e31c:	6488      	str	r0, [r1, #72]	; 0x48
 800e31e:	b10a      	cbz	r2, 800e324 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x14>
 800e320:	4803      	ldr	r0, [pc, #12]	; (800e330 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 800e322:	bd08      	pop	{r3, pc}
 800e324:	4a04      	ldr	r2, [pc, #16]	; (800e338 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x28>)
 800e326:	4802      	ldr	r0, [pc, #8]	; (800e330 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 800e328:	6812      	ldr	r2, [r2, #0]
 800e32a:	601a      	str	r2, [r3, #0]
 800e32c:	bd08      	pop	{r3, pc}
 800e32e:	bf00      	nop
 800e330:	20000a24 	.word	0x20000a24
 800e334:	20000934 	.word	0x20000934
 800e338:	20000930 	.word	0x20000930

0800e33c <get_serialized_size_service_msgs__msg__ServiceEventInfo>:
 800e33c:	b5b0      	push	{r4, r5, r7, lr}
 800e33e:	4604      	mov	r4, r0
 800e340:	b1d8      	cbz	r0, 800e37a <get_serialized_size_service_msgs__msg__ServiceEventInfo+0x3e>
 800e342:	460d      	mov	r5, r1
 800e344:	2101      	movs	r1, #1
 800e346:	4628      	mov	r0, r5
 800e348:	f001 fea4 	bl	8010094 <ucdr_alignment>
 800e34c:	1c6b      	adds	r3, r5, #1
 800e34e:	4607      	mov	r7, r0
 800e350:	1d20      	adds	r0, r4, #4
 800e352:	f1c5 0508 	rsb	r5, r5, #8
 800e356:	441f      	add	r7, r3
 800e358:	4639      	mov	r1, r7
 800e35a:	f000 f8c5 	bl	800e4e8 <get_serialized_size_builtin_interfaces__msg__Time>
 800e35e:	4407      	add	r7, r0
 800e360:	2101      	movs	r1, #1
 800e362:	4638      	mov	r0, r7
 800e364:	f001 fe96 	bl	8010094 <ucdr_alignment>
 800e368:	f100 0410 	add.w	r4, r0, #16
 800e36c:	2108      	movs	r1, #8
 800e36e:	443c      	add	r4, r7
 800e370:	4620      	mov	r0, r4
 800e372:	f001 fe8f 	bl	8010094 <ucdr_alignment>
 800e376:	4428      	add	r0, r5
 800e378:	4420      	add	r0, r4
 800e37a:	bdb0      	pop	{r4, r5, r7, pc}

0800e37c <_ServiceEventInfo__cdr_deserialize>:
 800e37c:	b538      	push	{r3, r4, r5, lr}
 800e37e:	460c      	mov	r4, r1
 800e380:	b1b9      	cbz	r1, 800e3b2 <_ServiceEventInfo__cdr_deserialize+0x36>
 800e382:	4605      	mov	r5, r0
 800e384:	f000 fb38 	bl	800e9f8 <ucdr_deserialize_uint8_t>
 800e388:	f000 f912 	bl	800e5b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e38c:	4603      	mov	r3, r0
 800e38e:	1d21      	adds	r1, r4, #4
 800e390:	4628      	mov	r0, r5
 800e392:	685b      	ldr	r3, [r3, #4]
 800e394:	68db      	ldr	r3, [r3, #12]
 800e396:	4798      	blx	r3
 800e398:	f104 010c 	add.w	r1, r4, #12
 800e39c:	4628      	mov	r0, r5
 800e39e:	2210      	movs	r2, #16
 800e3a0:	f000 f9d4 	bl	800e74c <ucdr_deserialize_array_uint8_t>
 800e3a4:	f104 0120 	add.w	r1, r4, #32
 800e3a8:	4628      	mov	r0, r5
 800e3aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e3ae:	f001 bc2b 	b.w	800fc08 <ucdr_deserialize_int64_t>
 800e3b2:	4608      	mov	r0, r1
 800e3b4:	bd38      	pop	{r3, r4, r5, pc}
 800e3b6:	bf00      	nop

0800e3b8 <_ServiceEventInfo__cdr_serialize>:
 800e3b8:	b1e8      	cbz	r0, 800e3f6 <_ServiceEventInfo__cdr_serialize+0x3e>
 800e3ba:	b570      	push	{r4, r5, r6, lr}
 800e3bc:	4606      	mov	r6, r0
 800e3be:	460d      	mov	r5, r1
 800e3c0:	4604      	mov	r4, r0
 800e3c2:	4608      	mov	r0, r1
 800e3c4:	f816 1b04 	ldrb.w	r1, [r6], #4
 800e3c8:	f000 fb00 	bl	800e9cc <ucdr_serialize_uint8_t>
 800e3cc:	f000 f8f0 	bl	800e5b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	4629      	mov	r1, r5
 800e3d4:	4630      	mov	r0, r6
 800e3d6:	685b      	ldr	r3, [r3, #4]
 800e3d8:	689b      	ldr	r3, [r3, #8]
 800e3da:	4798      	blx	r3
 800e3dc:	2210      	movs	r2, #16
 800e3de:	f104 010c 	add.w	r1, r4, #12
 800e3e2:	4628      	mov	r0, r5
 800e3e4:	f000 f94e 	bl	800e684 <ucdr_serialize_array_uint8_t>
 800e3e8:	4628      	mov	r0, r5
 800e3ea:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 800e3ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e3f2:	f001 bb39 	b.w	800fa68 <ucdr_serialize_int64_t>
 800e3f6:	4770      	bx	lr

0800e3f8 <_ServiceEventInfo__get_serialized_size>:
 800e3f8:	b538      	push	{r3, r4, r5, lr}
 800e3fa:	4604      	mov	r4, r0
 800e3fc:	b1b0      	cbz	r0, 800e42c <_ServiceEventInfo__get_serialized_size+0x34>
 800e3fe:	2101      	movs	r1, #1
 800e400:	2000      	movs	r0, #0
 800e402:	f001 fe47 	bl	8010094 <ucdr_alignment>
 800e406:	4605      	mov	r5, r0
 800e408:	1d20      	adds	r0, r4, #4
 800e40a:	3501      	adds	r5, #1
 800e40c:	4629      	mov	r1, r5
 800e40e:	f000 f86b 	bl	800e4e8 <get_serialized_size_builtin_interfaces__msg__Time>
 800e412:	4405      	add	r5, r0
 800e414:	2101      	movs	r1, #1
 800e416:	4628      	mov	r0, r5
 800e418:	f001 fe3c 	bl	8010094 <ucdr_alignment>
 800e41c:	3010      	adds	r0, #16
 800e41e:	2108      	movs	r1, #8
 800e420:	4405      	add	r5, r0
 800e422:	4628      	mov	r0, r5
 800e424:	f001 fe36 	bl	8010094 <ucdr_alignment>
 800e428:	3008      	adds	r0, #8
 800e42a:	4428      	add	r0, r5
 800e42c:	bd38      	pop	{r3, r4, r5, pc}
 800e42e:	bf00      	nop

0800e430 <_ServiceEventInfo__max_serialized_size>:
 800e430:	b550      	push	{r4, r6, lr}
 800e432:	2601      	movs	r6, #1
 800e434:	b083      	sub	sp, #12
 800e436:	2000      	movs	r0, #0
 800e438:	4631      	mov	r1, r6
 800e43a:	f88d 6007 	strb.w	r6, [sp, #7]
 800e43e:	f001 fe29 	bl	8010094 <ucdr_alignment>
 800e442:	4604      	mov	r4, r0
 800e444:	f10d 0007 	add.w	r0, sp, #7
 800e448:	4434      	add	r4, r6
 800e44a:	4621      	mov	r1, r4
 800e44c:	f000 f89c 	bl	800e588 <max_serialized_size_builtin_interfaces__msg__Time>
 800e450:	4404      	add	r4, r0
 800e452:	4631      	mov	r1, r6
 800e454:	4620      	mov	r0, r4
 800e456:	f001 fe1d 	bl	8010094 <ucdr_alignment>
 800e45a:	3010      	adds	r0, #16
 800e45c:	2108      	movs	r1, #8
 800e45e:	4404      	add	r4, r0
 800e460:	4620      	mov	r0, r4
 800e462:	f001 fe17 	bl	8010094 <ucdr_alignment>
 800e466:	3008      	adds	r0, #8
 800e468:	4420      	add	r0, r4
 800e46a:	b003      	add	sp, #12
 800e46c:	bd50      	pop	{r4, r6, pc}
 800e46e:	bf00      	nop

0800e470 <max_serialized_size_service_msgs__msg__ServiceEventInfo>:
 800e470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e474:	f04f 0801 	mov.w	r8, #1
 800e478:	460c      	mov	r4, r1
 800e47a:	4607      	mov	r7, r0
 800e47c:	4641      	mov	r1, r8
 800e47e:	4620      	mov	r0, r4
 800e480:	f887 8000 	strb.w	r8, [r7]
 800e484:	eb04 0608 	add.w	r6, r4, r8
 800e488:	f001 fe04 	bl	8010094 <ucdr_alignment>
 800e48c:	4605      	mov	r5, r0
 800e48e:	4638      	mov	r0, r7
 800e490:	f1c4 0408 	rsb	r4, r4, #8
 800e494:	4435      	add	r5, r6
 800e496:	4629      	mov	r1, r5
 800e498:	f000 f876 	bl	800e588 <max_serialized_size_builtin_interfaces__msg__Time>
 800e49c:	4405      	add	r5, r0
 800e49e:	4641      	mov	r1, r8
 800e4a0:	4628      	mov	r0, r5
 800e4a2:	f001 fdf7 	bl	8010094 <ucdr_alignment>
 800e4a6:	3010      	adds	r0, #16
 800e4a8:	2108      	movs	r1, #8
 800e4aa:	4405      	add	r5, r0
 800e4ac:	4628      	mov	r0, r5
 800e4ae:	f001 fdf1 	bl	8010094 <ucdr_alignment>
 800e4b2:	4420      	add	r0, r4
 800e4b4:	4428      	add	r0, r5
 800e4b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4ba:	bf00      	nop

0800e4bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>:
 800e4bc:	4800      	ldr	r0, [pc, #0]	; (800e4c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x4>)
 800e4be:	4770      	bx	lr
 800e4c0:	20000a3c 	.word	0x20000a3c

0800e4c4 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800e4c4:	f00a baa2 	b.w	8018a0c <builtin_interfaces__msg__Time__init>

0800e4c8 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800e4c8:	f00a baa4 	b.w	8018a14 <builtin_interfaces__msg__Time__fini>

0800e4cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800e4cc:	4b04      	ldr	r3, [pc, #16]	; (800e4e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800e4ce:	681a      	ldr	r2, [r3, #0]
 800e4d0:	b10a      	cbz	r2, 800e4d6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800e4d2:	4803      	ldr	r0, [pc, #12]	; (800e4e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800e4d4:	4770      	bx	lr
 800e4d6:	4a03      	ldr	r2, [pc, #12]	; (800e4e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800e4d8:	4801      	ldr	r0, [pc, #4]	; (800e4e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800e4da:	6812      	ldr	r2, [r2, #0]
 800e4dc:	601a      	str	r2, [r3, #0]
 800e4de:	4770      	bx	lr
 800e4e0:	20000ae8 	.word	0x20000ae8
 800e4e4:	20000930 	.word	0x20000930

0800e4e8 <get_serialized_size_builtin_interfaces__msg__Time>:
 800e4e8:	b180      	cbz	r0, 800e50c <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800e4ea:	b538      	push	{r3, r4, r5, lr}
 800e4ec:	460d      	mov	r5, r1
 800e4ee:	2104      	movs	r1, #4
 800e4f0:	4628      	mov	r0, r5
 800e4f2:	f001 fdcf 	bl	8010094 <ucdr_alignment>
 800e4f6:	1d2b      	adds	r3, r5, #4
 800e4f8:	f1c5 0504 	rsb	r5, r5, #4
 800e4fc:	2104      	movs	r1, #4
 800e4fe:	181c      	adds	r4, r3, r0
 800e500:	4620      	mov	r0, r4
 800e502:	f001 fdc7 	bl	8010094 <ucdr_alignment>
 800e506:	4428      	add	r0, r5
 800e508:	4420      	add	r0, r4
 800e50a:	bd38      	pop	{r3, r4, r5, pc}
 800e50c:	4770      	bx	lr
 800e50e:	bf00      	nop

0800e510 <_Time__cdr_deserialize>:
 800e510:	b538      	push	{r3, r4, r5, lr}
 800e512:	460c      	mov	r4, r1
 800e514:	b141      	cbz	r1, 800e528 <_Time__cdr_deserialize+0x18>
 800e516:	4605      	mov	r5, r0
 800e518:	f001 fa16 	bl	800f948 <ucdr_deserialize_int32_t>
 800e51c:	1d21      	adds	r1, r4, #4
 800e51e:	4628      	mov	r0, r5
 800e520:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e524:	f000 bd98 	b.w	800f058 <ucdr_deserialize_uint32_t>
 800e528:	4608      	mov	r0, r1
 800e52a:	bd38      	pop	{r3, r4, r5, pc}

0800e52c <_Time__cdr_serialize>:
 800e52c:	b160      	cbz	r0, 800e548 <_Time__cdr_serialize+0x1c>
 800e52e:	b538      	push	{r3, r4, r5, lr}
 800e530:	460d      	mov	r5, r1
 800e532:	4604      	mov	r4, r0
 800e534:	6801      	ldr	r1, [r0, #0]
 800e536:	4628      	mov	r0, r5
 800e538:	f001 f96e 	bl	800f818 <ucdr_serialize_int32_t>
 800e53c:	6861      	ldr	r1, [r4, #4]
 800e53e:	4628      	mov	r0, r5
 800e540:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e544:	f000 bc58 	b.w	800edf8 <ucdr_serialize_uint32_t>
 800e548:	4770      	bx	lr
 800e54a:	bf00      	nop

0800e54c <_Time__get_serialized_size>:
 800e54c:	b160      	cbz	r0, 800e568 <_Time__get_serialized_size+0x1c>
 800e54e:	2104      	movs	r1, #4
 800e550:	2000      	movs	r0, #0
 800e552:	b510      	push	{r4, lr}
 800e554:	f001 fd9e 	bl	8010094 <ucdr_alignment>
 800e558:	2104      	movs	r1, #4
 800e55a:	1844      	adds	r4, r0, r1
 800e55c:	4620      	mov	r0, r4
 800e55e:	f001 fd99 	bl	8010094 <ucdr_alignment>
 800e562:	3004      	adds	r0, #4
 800e564:	4420      	add	r0, r4
 800e566:	bd10      	pop	{r4, pc}
 800e568:	4770      	bx	lr
 800e56a:	bf00      	nop

0800e56c <_Time__max_serialized_size>:
 800e56c:	b510      	push	{r4, lr}
 800e56e:	2104      	movs	r1, #4
 800e570:	2000      	movs	r0, #0
 800e572:	f001 fd8f 	bl	8010094 <ucdr_alignment>
 800e576:	2104      	movs	r1, #4
 800e578:	1844      	adds	r4, r0, r1
 800e57a:	4620      	mov	r0, r4
 800e57c:	f001 fd8a 	bl	8010094 <ucdr_alignment>
 800e580:	3004      	adds	r0, #4
 800e582:	4420      	add	r0, r4
 800e584:	bd10      	pop	{r4, pc}
 800e586:	bf00      	nop

0800e588 <max_serialized_size_builtin_interfaces__msg__Time>:
 800e588:	b538      	push	{r3, r4, r5, lr}
 800e58a:	460c      	mov	r4, r1
 800e58c:	2301      	movs	r3, #1
 800e58e:	2104      	movs	r1, #4
 800e590:	1d25      	adds	r5, r4, #4
 800e592:	7003      	strb	r3, [r0, #0]
 800e594:	4620      	mov	r0, r4
 800e596:	f1c4 0404 	rsb	r4, r4, #4
 800e59a:	f001 fd7b 	bl	8010094 <ucdr_alignment>
 800e59e:	4405      	add	r5, r0
 800e5a0:	2104      	movs	r1, #4
 800e5a2:	4628      	mov	r0, r5
 800e5a4:	f001 fd76 	bl	8010094 <ucdr_alignment>
 800e5a8:	4420      	add	r0, r4
 800e5aa:	4428      	add	r0, r5
 800e5ac:	bd38      	pop	{r3, r4, r5, pc}
 800e5ae:	bf00      	nop

0800e5b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800e5b0:	4800      	ldr	r0, [pc, #0]	; (800e5b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800e5b2:	4770      	bx	lr
 800e5b4:	20000b00 	.word	0x20000b00

0800e5b8 <ucdr_serialize_endian_array_char>:
 800e5b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5bc:	4619      	mov	r1, r3
 800e5be:	461f      	mov	r7, r3
 800e5c0:	4605      	mov	r5, r0
 800e5c2:	4690      	mov	r8, r2
 800e5c4:	f001 fd0e 	bl	800ffe4 <ucdr_check_buffer_available_for>
 800e5c8:	b9e0      	cbnz	r0, 800e604 <ucdr_serialize_endian_array_char+0x4c>
 800e5ca:	463e      	mov	r6, r7
 800e5cc:	e00b      	b.n	800e5e6 <ucdr_serialize_endian_array_char+0x2e>
 800e5ce:	4441      	add	r1, r8
 800e5d0:	68a8      	ldr	r0, [r5, #8]
 800e5d2:	4622      	mov	r2, r4
 800e5d4:	1b36      	subs	r6, r6, r4
 800e5d6:	f00d fa86 	bl	801bae6 <memcpy>
 800e5da:	68ab      	ldr	r3, [r5, #8]
 800e5dc:	6928      	ldr	r0, [r5, #16]
 800e5de:	4423      	add	r3, r4
 800e5e0:	4420      	add	r0, r4
 800e5e2:	60ab      	str	r3, [r5, #8]
 800e5e4:	6128      	str	r0, [r5, #16]
 800e5e6:	4631      	mov	r1, r6
 800e5e8:	2201      	movs	r2, #1
 800e5ea:	4628      	mov	r0, r5
 800e5ec:	f001 fd84 	bl	80100f8 <ucdr_check_final_buffer_behavior_array>
 800e5f0:	1bb9      	subs	r1, r7, r6
 800e5f2:	4604      	mov	r4, r0
 800e5f4:	2800      	cmp	r0, #0
 800e5f6:	d1ea      	bne.n	800e5ce <ucdr_serialize_endian_array_char+0x16>
 800e5f8:	2301      	movs	r3, #1
 800e5fa:	7da8      	ldrb	r0, [r5, #22]
 800e5fc:	756b      	strb	r3, [r5, #21]
 800e5fe:	4058      	eors	r0, r3
 800e600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e604:	463a      	mov	r2, r7
 800e606:	4641      	mov	r1, r8
 800e608:	68a8      	ldr	r0, [r5, #8]
 800e60a:	f00d fa6c 	bl	801bae6 <memcpy>
 800e60e:	68aa      	ldr	r2, [r5, #8]
 800e610:	692b      	ldr	r3, [r5, #16]
 800e612:	443a      	add	r2, r7
 800e614:	443b      	add	r3, r7
 800e616:	60aa      	str	r2, [r5, #8]
 800e618:	612b      	str	r3, [r5, #16]
 800e61a:	e7ed      	b.n	800e5f8 <ucdr_serialize_endian_array_char+0x40>

0800e61c <ucdr_deserialize_endian_array_char>:
 800e61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e620:	4619      	mov	r1, r3
 800e622:	461f      	mov	r7, r3
 800e624:	4605      	mov	r5, r0
 800e626:	4690      	mov	r8, r2
 800e628:	f001 fcdc 	bl	800ffe4 <ucdr_check_buffer_available_for>
 800e62c:	b9e8      	cbnz	r0, 800e66a <ucdr_deserialize_endian_array_char+0x4e>
 800e62e:	463e      	mov	r6, r7
 800e630:	e00c      	b.n	800e64c <ucdr_deserialize_endian_array_char+0x30>
 800e632:	eb08 0003 	add.w	r0, r8, r3
 800e636:	68a9      	ldr	r1, [r5, #8]
 800e638:	4622      	mov	r2, r4
 800e63a:	1b36      	subs	r6, r6, r4
 800e63c:	f00d fa53 	bl	801bae6 <memcpy>
 800e640:	68ab      	ldr	r3, [r5, #8]
 800e642:	6928      	ldr	r0, [r5, #16]
 800e644:	4423      	add	r3, r4
 800e646:	4420      	add	r0, r4
 800e648:	60ab      	str	r3, [r5, #8]
 800e64a:	6128      	str	r0, [r5, #16]
 800e64c:	4631      	mov	r1, r6
 800e64e:	2201      	movs	r2, #1
 800e650:	4628      	mov	r0, r5
 800e652:	f001 fd51 	bl	80100f8 <ucdr_check_final_buffer_behavior_array>
 800e656:	1bbb      	subs	r3, r7, r6
 800e658:	4604      	mov	r4, r0
 800e65a:	2800      	cmp	r0, #0
 800e65c:	d1e9      	bne.n	800e632 <ucdr_deserialize_endian_array_char+0x16>
 800e65e:	2301      	movs	r3, #1
 800e660:	7da8      	ldrb	r0, [r5, #22]
 800e662:	756b      	strb	r3, [r5, #21]
 800e664:	4058      	eors	r0, r3
 800e666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e66a:	463a      	mov	r2, r7
 800e66c:	68a9      	ldr	r1, [r5, #8]
 800e66e:	4640      	mov	r0, r8
 800e670:	f00d fa39 	bl	801bae6 <memcpy>
 800e674:	68aa      	ldr	r2, [r5, #8]
 800e676:	692b      	ldr	r3, [r5, #16]
 800e678:	443a      	add	r2, r7
 800e67a:	443b      	add	r3, r7
 800e67c:	60aa      	str	r2, [r5, #8]
 800e67e:	612b      	str	r3, [r5, #16]
 800e680:	e7ed      	b.n	800e65e <ucdr_deserialize_endian_array_char+0x42>
 800e682:	bf00      	nop

0800e684 <ucdr_serialize_array_uint8_t>:
 800e684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e688:	4688      	mov	r8, r1
 800e68a:	4611      	mov	r1, r2
 800e68c:	4617      	mov	r7, r2
 800e68e:	4605      	mov	r5, r0
 800e690:	f001 fca8 	bl	800ffe4 <ucdr_check_buffer_available_for>
 800e694:	b9e0      	cbnz	r0, 800e6d0 <ucdr_serialize_array_uint8_t+0x4c>
 800e696:	463e      	mov	r6, r7
 800e698:	e00b      	b.n	800e6b2 <ucdr_serialize_array_uint8_t+0x2e>
 800e69a:	4441      	add	r1, r8
 800e69c:	68a8      	ldr	r0, [r5, #8]
 800e69e:	4622      	mov	r2, r4
 800e6a0:	1b36      	subs	r6, r6, r4
 800e6a2:	f00d fa20 	bl	801bae6 <memcpy>
 800e6a6:	68ab      	ldr	r3, [r5, #8]
 800e6a8:	6928      	ldr	r0, [r5, #16]
 800e6aa:	4423      	add	r3, r4
 800e6ac:	4420      	add	r0, r4
 800e6ae:	60ab      	str	r3, [r5, #8]
 800e6b0:	6128      	str	r0, [r5, #16]
 800e6b2:	4631      	mov	r1, r6
 800e6b4:	2201      	movs	r2, #1
 800e6b6:	4628      	mov	r0, r5
 800e6b8:	f001 fd1e 	bl	80100f8 <ucdr_check_final_buffer_behavior_array>
 800e6bc:	1bb9      	subs	r1, r7, r6
 800e6be:	4604      	mov	r4, r0
 800e6c0:	2800      	cmp	r0, #0
 800e6c2:	d1ea      	bne.n	800e69a <ucdr_serialize_array_uint8_t+0x16>
 800e6c4:	2301      	movs	r3, #1
 800e6c6:	7da8      	ldrb	r0, [r5, #22]
 800e6c8:	756b      	strb	r3, [r5, #21]
 800e6ca:	4058      	eors	r0, r3
 800e6cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6d0:	463a      	mov	r2, r7
 800e6d2:	4641      	mov	r1, r8
 800e6d4:	68a8      	ldr	r0, [r5, #8]
 800e6d6:	f00d fa06 	bl	801bae6 <memcpy>
 800e6da:	68aa      	ldr	r2, [r5, #8]
 800e6dc:	692b      	ldr	r3, [r5, #16]
 800e6de:	443a      	add	r2, r7
 800e6e0:	443b      	add	r3, r7
 800e6e2:	60aa      	str	r2, [r5, #8]
 800e6e4:	612b      	str	r3, [r5, #16]
 800e6e6:	e7ed      	b.n	800e6c4 <ucdr_serialize_array_uint8_t+0x40>

0800e6e8 <ucdr_serialize_endian_array_uint8_t>:
 800e6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6ec:	4619      	mov	r1, r3
 800e6ee:	461f      	mov	r7, r3
 800e6f0:	4605      	mov	r5, r0
 800e6f2:	4690      	mov	r8, r2
 800e6f4:	f001 fc76 	bl	800ffe4 <ucdr_check_buffer_available_for>
 800e6f8:	b9e0      	cbnz	r0, 800e734 <ucdr_serialize_endian_array_uint8_t+0x4c>
 800e6fa:	463e      	mov	r6, r7
 800e6fc:	e00b      	b.n	800e716 <ucdr_serialize_endian_array_uint8_t+0x2e>
 800e6fe:	4441      	add	r1, r8
 800e700:	68a8      	ldr	r0, [r5, #8]
 800e702:	4622      	mov	r2, r4
 800e704:	1b36      	subs	r6, r6, r4
 800e706:	f00d f9ee 	bl	801bae6 <memcpy>
 800e70a:	68ab      	ldr	r3, [r5, #8]
 800e70c:	6928      	ldr	r0, [r5, #16]
 800e70e:	4423      	add	r3, r4
 800e710:	4420      	add	r0, r4
 800e712:	60ab      	str	r3, [r5, #8]
 800e714:	6128      	str	r0, [r5, #16]
 800e716:	4631      	mov	r1, r6
 800e718:	2201      	movs	r2, #1
 800e71a:	4628      	mov	r0, r5
 800e71c:	f001 fcec 	bl	80100f8 <ucdr_check_final_buffer_behavior_array>
 800e720:	1bb9      	subs	r1, r7, r6
 800e722:	4604      	mov	r4, r0
 800e724:	2800      	cmp	r0, #0
 800e726:	d1ea      	bne.n	800e6fe <ucdr_serialize_endian_array_uint8_t+0x16>
 800e728:	2301      	movs	r3, #1
 800e72a:	7da8      	ldrb	r0, [r5, #22]
 800e72c:	756b      	strb	r3, [r5, #21]
 800e72e:	4058      	eors	r0, r3
 800e730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e734:	463a      	mov	r2, r7
 800e736:	4641      	mov	r1, r8
 800e738:	68a8      	ldr	r0, [r5, #8]
 800e73a:	f00d f9d4 	bl	801bae6 <memcpy>
 800e73e:	68aa      	ldr	r2, [r5, #8]
 800e740:	692b      	ldr	r3, [r5, #16]
 800e742:	443a      	add	r2, r7
 800e744:	443b      	add	r3, r7
 800e746:	60aa      	str	r2, [r5, #8]
 800e748:	612b      	str	r3, [r5, #16]
 800e74a:	e7ed      	b.n	800e728 <ucdr_serialize_endian_array_uint8_t+0x40>

0800e74c <ucdr_deserialize_array_uint8_t>:
 800e74c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e750:	4688      	mov	r8, r1
 800e752:	4611      	mov	r1, r2
 800e754:	4617      	mov	r7, r2
 800e756:	4605      	mov	r5, r0
 800e758:	f001 fc44 	bl	800ffe4 <ucdr_check_buffer_available_for>
 800e75c:	b9e8      	cbnz	r0, 800e79a <ucdr_deserialize_array_uint8_t+0x4e>
 800e75e:	463e      	mov	r6, r7
 800e760:	e00c      	b.n	800e77c <ucdr_deserialize_array_uint8_t+0x30>
 800e762:	eb08 0003 	add.w	r0, r8, r3
 800e766:	68a9      	ldr	r1, [r5, #8]
 800e768:	4622      	mov	r2, r4
 800e76a:	1b36      	subs	r6, r6, r4
 800e76c:	f00d f9bb 	bl	801bae6 <memcpy>
 800e770:	68ab      	ldr	r3, [r5, #8]
 800e772:	6928      	ldr	r0, [r5, #16]
 800e774:	4423      	add	r3, r4
 800e776:	4420      	add	r0, r4
 800e778:	60ab      	str	r3, [r5, #8]
 800e77a:	6128      	str	r0, [r5, #16]
 800e77c:	4631      	mov	r1, r6
 800e77e:	2201      	movs	r2, #1
 800e780:	4628      	mov	r0, r5
 800e782:	f001 fcb9 	bl	80100f8 <ucdr_check_final_buffer_behavior_array>
 800e786:	1bbb      	subs	r3, r7, r6
 800e788:	4604      	mov	r4, r0
 800e78a:	2800      	cmp	r0, #0
 800e78c:	d1e9      	bne.n	800e762 <ucdr_deserialize_array_uint8_t+0x16>
 800e78e:	2301      	movs	r3, #1
 800e790:	7da8      	ldrb	r0, [r5, #22]
 800e792:	756b      	strb	r3, [r5, #21]
 800e794:	4058      	eors	r0, r3
 800e796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e79a:	463a      	mov	r2, r7
 800e79c:	68a9      	ldr	r1, [r5, #8]
 800e79e:	4640      	mov	r0, r8
 800e7a0:	f00d f9a1 	bl	801bae6 <memcpy>
 800e7a4:	68aa      	ldr	r2, [r5, #8]
 800e7a6:	692b      	ldr	r3, [r5, #16]
 800e7a8:	443a      	add	r2, r7
 800e7aa:	443b      	add	r3, r7
 800e7ac:	60aa      	str	r2, [r5, #8]
 800e7ae:	612b      	str	r3, [r5, #16]
 800e7b0:	e7ed      	b.n	800e78e <ucdr_deserialize_array_uint8_t+0x42>
 800e7b2:	bf00      	nop

0800e7b4 <ucdr_deserialize_endian_array_uint8_t>:
 800e7b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7b8:	4619      	mov	r1, r3
 800e7ba:	461f      	mov	r7, r3
 800e7bc:	4605      	mov	r5, r0
 800e7be:	4690      	mov	r8, r2
 800e7c0:	f001 fc10 	bl	800ffe4 <ucdr_check_buffer_available_for>
 800e7c4:	b9e8      	cbnz	r0, 800e802 <ucdr_deserialize_endian_array_uint8_t+0x4e>
 800e7c6:	463e      	mov	r6, r7
 800e7c8:	e00c      	b.n	800e7e4 <ucdr_deserialize_endian_array_uint8_t+0x30>
 800e7ca:	eb08 0003 	add.w	r0, r8, r3
 800e7ce:	68a9      	ldr	r1, [r5, #8]
 800e7d0:	4622      	mov	r2, r4
 800e7d2:	1b36      	subs	r6, r6, r4
 800e7d4:	f00d f987 	bl	801bae6 <memcpy>
 800e7d8:	68ab      	ldr	r3, [r5, #8]
 800e7da:	6928      	ldr	r0, [r5, #16]
 800e7dc:	4423      	add	r3, r4
 800e7de:	4420      	add	r0, r4
 800e7e0:	60ab      	str	r3, [r5, #8]
 800e7e2:	6128      	str	r0, [r5, #16]
 800e7e4:	4631      	mov	r1, r6
 800e7e6:	2201      	movs	r2, #1
 800e7e8:	4628      	mov	r0, r5
 800e7ea:	f001 fc85 	bl	80100f8 <ucdr_check_final_buffer_behavior_array>
 800e7ee:	1bbb      	subs	r3, r7, r6
 800e7f0:	4604      	mov	r4, r0
 800e7f2:	2800      	cmp	r0, #0
 800e7f4:	d1e9      	bne.n	800e7ca <ucdr_deserialize_endian_array_uint8_t+0x16>
 800e7f6:	2301      	movs	r3, #1
 800e7f8:	7da8      	ldrb	r0, [r5, #22]
 800e7fa:	756b      	strb	r3, [r5, #21]
 800e7fc:	4058      	eors	r0, r3
 800e7fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e802:	463a      	mov	r2, r7
 800e804:	68a9      	ldr	r1, [r5, #8]
 800e806:	4640      	mov	r0, r8
 800e808:	f00d f96d 	bl	801bae6 <memcpy>
 800e80c:	68aa      	ldr	r2, [r5, #8]
 800e80e:	692b      	ldr	r3, [r5, #16]
 800e810:	443a      	add	r2, r7
 800e812:	443b      	add	r3, r7
 800e814:	60aa      	str	r2, [r5, #8]
 800e816:	612b      	str	r3, [r5, #16]
 800e818:	e7ed      	b.n	800e7f6 <ucdr_deserialize_endian_array_uint8_t+0x42>
 800e81a:	bf00      	nop

0800e81c <ucdr_serialize_array_int16_t>:
 800e81c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e820:	4604      	mov	r4, r0
 800e822:	460e      	mov	r6, r1
 800e824:	2102      	movs	r1, #2
 800e826:	4617      	mov	r7, r2
 800e828:	f001 fc3c 	bl	80100a4 <ucdr_buffer_alignment>
 800e82c:	4601      	mov	r1, r0
 800e82e:	4620      	mov	r0, r4
 800e830:	7d65      	ldrb	r5, [r4, #21]
 800e832:	f001 fc7f 	bl	8010134 <ucdr_advance_buffer>
 800e836:	7d21      	ldrb	r1, [r4, #20]
 800e838:	7565      	strb	r5, [r4, #21]
 800e83a:	2901      	cmp	r1, #1
 800e83c:	d011      	beq.n	800e862 <ucdr_serialize_array_int16_t+0x46>
 800e83e:	b15f      	cbz	r7, 800e858 <ucdr_serialize_array_int16_t+0x3c>
 800e840:	3e02      	subs	r6, #2
 800e842:	2500      	movs	r5, #0
 800e844:	e000      	b.n	800e848 <ucdr_serialize_array_int16_t+0x2c>
 800e846:	7d21      	ldrb	r1, [r4, #20]
 800e848:	3501      	adds	r5, #1
 800e84a:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
 800e84e:	4620      	mov	r0, r4
 800e850:	f000 fe78 	bl	800f544 <ucdr_serialize_endian_int16_t>
 800e854:	42af      	cmp	r7, r5
 800e856:	d1f6      	bne.n	800e846 <ucdr_serialize_array_int16_t+0x2a>
 800e858:	7da0      	ldrb	r0, [r4, #22]
 800e85a:	f080 0001 	eor.w	r0, r0, #1
 800e85e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e862:	007f      	lsls	r7, r7, #1
 800e864:	4620      	mov	r0, r4
 800e866:	4639      	mov	r1, r7
 800e868:	f001 fbbc 	bl	800ffe4 <ucdr_check_buffer_available_for>
 800e86c:	b9f8      	cbnz	r0, 800e8ae <ucdr_serialize_array_int16_t+0x92>
 800e86e:	46b8      	mov	r8, r7
 800e870:	e00c      	b.n	800e88c <ucdr_serialize_array_int16_t+0x70>
 800e872:	462a      	mov	r2, r5
 800e874:	4431      	add	r1, r6
 800e876:	68a0      	ldr	r0, [r4, #8]
 800e878:	eba8 0805 	sub.w	r8, r8, r5
 800e87c:	f00d f933 	bl	801bae6 <memcpy>
 800e880:	68a2      	ldr	r2, [r4, #8]
 800e882:	6923      	ldr	r3, [r4, #16]
 800e884:	442a      	add	r2, r5
 800e886:	442b      	add	r3, r5
 800e888:	60a2      	str	r2, [r4, #8]
 800e88a:	6123      	str	r3, [r4, #16]
 800e88c:	4641      	mov	r1, r8
 800e88e:	2202      	movs	r2, #2
 800e890:	4620      	mov	r0, r4
 800e892:	f001 fc31 	bl	80100f8 <ucdr_check_final_buffer_behavior_array>
 800e896:	eba7 0108 	sub.w	r1, r7, r8
 800e89a:	4605      	mov	r5, r0
 800e89c:	2800      	cmp	r0, #0
 800e89e:	d1e8      	bne.n	800e872 <ucdr_serialize_array_int16_t+0x56>
 800e8a0:	2302      	movs	r3, #2
 800e8a2:	7da0      	ldrb	r0, [r4, #22]
 800e8a4:	7563      	strb	r3, [r4, #21]
 800e8a6:	f080 0001 	eor.w	r0, r0, #1
 800e8aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8ae:	463a      	mov	r2, r7
 800e8b0:	4631      	mov	r1, r6
 800e8b2:	68a0      	ldr	r0, [r4, #8]
 800e8b4:	f00d f917 	bl	801bae6 <memcpy>
 800e8b8:	68a2      	ldr	r2, [r4, #8]
 800e8ba:	6923      	ldr	r3, [r4, #16]
 800e8bc:	443a      	add	r2, r7
 800e8be:	441f      	add	r7, r3
 800e8c0:	60a2      	str	r2, [r4, #8]
 800e8c2:	6127      	str	r7, [r4, #16]
 800e8c4:	e7ec      	b.n	800e8a0 <ucdr_serialize_array_int16_t+0x84>
 800e8c6:	bf00      	nop

0800e8c8 <ucdr_deserialize_array_int16_t>:
 800e8c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8cc:	4604      	mov	r4, r0
 800e8ce:	460e      	mov	r6, r1
 800e8d0:	2102      	movs	r1, #2
 800e8d2:	4617      	mov	r7, r2
 800e8d4:	f001 fbe6 	bl	80100a4 <ucdr_buffer_alignment>
 800e8d8:	4601      	mov	r1, r0
 800e8da:	4620      	mov	r0, r4
 800e8dc:	7d65      	ldrb	r5, [r4, #21]
 800e8de:	f001 fc29 	bl	8010134 <ucdr_advance_buffer>
 800e8e2:	7d21      	ldrb	r1, [r4, #20]
 800e8e4:	7565      	strb	r5, [r4, #21]
 800e8e6:	2901      	cmp	r1, #1
 800e8e8:	d010      	beq.n	800e90c <ucdr_deserialize_array_int16_t+0x44>
 800e8ea:	b157      	cbz	r7, 800e902 <ucdr_deserialize_array_int16_t+0x3a>
 800e8ec:	2500      	movs	r5, #0
 800e8ee:	e000      	b.n	800e8f2 <ucdr_deserialize_array_int16_t+0x2a>
 800e8f0:	7d21      	ldrb	r1, [r4, #20]
 800e8f2:	3501      	adds	r5, #1
 800e8f4:	4632      	mov	r2, r6
 800e8f6:	4620      	mov	r0, r4
 800e8f8:	3602      	adds	r6, #2
 800e8fa:	f000 ff17 	bl	800f72c <ucdr_deserialize_endian_int16_t>
 800e8fe:	42af      	cmp	r7, r5
 800e900:	d1f6      	bne.n	800e8f0 <ucdr_deserialize_array_int16_t+0x28>
 800e902:	7da0      	ldrb	r0, [r4, #22]
 800e904:	f080 0001 	eor.w	r0, r0, #1
 800e908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e90c:	007f      	lsls	r7, r7, #1
 800e90e:	4620      	mov	r0, r4
 800e910:	4639      	mov	r1, r7
 800e912:	f001 fb67 	bl	800ffe4 <ucdr_check_buffer_available_for>
 800e916:	b9f8      	cbnz	r0, 800e958 <ucdr_deserialize_array_int16_t+0x90>
 800e918:	46b8      	mov	r8, r7
 800e91a:	e00c      	b.n	800e936 <ucdr_deserialize_array_int16_t+0x6e>
 800e91c:	18f0      	adds	r0, r6, r3
 800e91e:	462a      	mov	r2, r5
 800e920:	68a1      	ldr	r1, [r4, #8]
 800e922:	eba8 0805 	sub.w	r8, r8, r5
 800e926:	f00d f8de 	bl	801bae6 <memcpy>
 800e92a:	68a2      	ldr	r2, [r4, #8]
 800e92c:	6923      	ldr	r3, [r4, #16]
 800e92e:	442a      	add	r2, r5
 800e930:	442b      	add	r3, r5
 800e932:	60a2      	str	r2, [r4, #8]
 800e934:	6123      	str	r3, [r4, #16]
 800e936:	4641      	mov	r1, r8
 800e938:	2202      	movs	r2, #2
 800e93a:	4620      	mov	r0, r4
 800e93c:	f001 fbdc 	bl	80100f8 <ucdr_check_final_buffer_behavior_array>
 800e940:	eba7 0308 	sub.w	r3, r7, r8
 800e944:	4605      	mov	r5, r0
 800e946:	2800      	cmp	r0, #0
 800e948:	d1e8      	bne.n	800e91c <ucdr_deserialize_array_int16_t+0x54>
 800e94a:	2302      	movs	r3, #2
 800e94c:	7da0      	ldrb	r0, [r4, #22]
 800e94e:	7563      	strb	r3, [r4, #21]
 800e950:	f080 0001 	eor.w	r0, r0, #1
 800e954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e958:	463a      	mov	r2, r7
 800e95a:	68a1      	ldr	r1, [r4, #8]
 800e95c:	4630      	mov	r0, r6
 800e95e:	f00d f8c2 	bl	801bae6 <memcpy>
 800e962:	68a2      	ldr	r2, [r4, #8]
 800e964:	6923      	ldr	r3, [r4, #16]
 800e966:	443a      	add	r2, r7
 800e968:	441f      	add	r7, r3
 800e96a:	60a2      	str	r2, [r4, #8]
 800e96c:	6127      	str	r7, [r4, #16]
 800e96e:	e7ec      	b.n	800e94a <ucdr_deserialize_array_int16_t+0x82>

0800e970 <ucdr_serialize_bool>:
 800e970:	b538      	push	{r3, r4, r5, lr}
 800e972:	460d      	mov	r5, r1
 800e974:	2101      	movs	r1, #1
 800e976:	4604      	mov	r4, r0
 800e978:	f001 fb40 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800e97c:	b148      	cbz	r0, 800e992 <ucdr_serialize_bool+0x22>
 800e97e:	68a3      	ldr	r3, [r4, #8]
 800e980:	2101      	movs	r1, #1
 800e982:	701d      	strb	r5, [r3, #0]
 800e984:	68a2      	ldr	r2, [r4, #8]
 800e986:	6923      	ldr	r3, [r4, #16]
 800e988:	440a      	add	r2, r1
 800e98a:	7561      	strb	r1, [r4, #21]
 800e98c:	440b      	add	r3, r1
 800e98e:	60a2      	str	r2, [r4, #8]
 800e990:	6123      	str	r3, [r4, #16]
 800e992:	7da0      	ldrb	r0, [r4, #22]
 800e994:	f080 0001 	eor.w	r0, r0, #1
 800e998:	bd38      	pop	{r3, r4, r5, pc}
 800e99a:	bf00      	nop

0800e99c <ucdr_deserialize_bool>:
 800e99c:	b538      	push	{r3, r4, r5, lr}
 800e99e:	460d      	mov	r5, r1
 800e9a0:	2101      	movs	r1, #1
 800e9a2:	4604      	mov	r4, r0
 800e9a4:	f001 fb2a 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800e9a8:	b160      	cbz	r0, 800e9c4 <ucdr_deserialize_bool+0x28>
 800e9aa:	68a2      	ldr	r2, [r4, #8]
 800e9ac:	2101      	movs	r1, #1
 800e9ae:	6923      	ldr	r3, [r4, #16]
 800e9b0:	f812 0b01 	ldrb.w	r0, [r2], #1
 800e9b4:	440b      	add	r3, r1
 800e9b6:	3800      	subs	r0, #0
 800e9b8:	bf18      	it	ne
 800e9ba:	2001      	movne	r0, #1
 800e9bc:	7028      	strb	r0, [r5, #0]
 800e9be:	60a2      	str	r2, [r4, #8]
 800e9c0:	6123      	str	r3, [r4, #16]
 800e9c2:	7561      	strb	r1, [r4, #21]
 800e9c4:	7da0      	ldrb	r0, [r4, #22]
 800e9c6:	f080 0001 	eor.w	r0, r0, #1
 800e9ca:	bd38      	pop	{r3, r4, r5, pc}

0800e9cc <ucdr_serialize_uint8_t>:
 800e9cc:	b538      	push	{r3, r4, r5, lr}
 800e9ce:	460d      	mov	r5, r1
 800e9d0:	2101      	movs	r1, #1
 800e9d2:	4604      	mov	r4, r0
 800e9d4:	f001 fb12 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800e9d8:	b148      	cbz	r0, 800e9ee <ucdr_serialize_uint8_t+0x22>
 800e9da:	68a3      	ldr	r3, [r4, #8]
 800e9dc:	2101      	movs	r1, #1
 800e9de:	701d      	strb	r5, [r3, #0]
 800e9e0:	68a2      	ldr	r2, [r4, #8]
 800e9e2:	6923      	ldr	r3, [r4, #16]
 800e9e4:	440a      	add	r2, r1
 800e9e6:	7561      	strb	r1, [r4, #21]
 800e9e8:	440b      	add	r3, r1
 800e9ea:	60a2      	str	r2, [r4, #8]
 800e9ec:	6123      	str	r3, [r4, #16]
 800e9ee:	7da0      	ldrb	r0, [r4, #22]
 800e9f0:	f080 0001 	eor.w	r0, r0, #1
 800e9f4:	bd38      	pop	{r3, r4, r5, pc}
 800e9f6:	bf00      	nop

0800e9f8 <ucdr_deserialize_uint8_t>:
 800e9f8:	b538      	push	{r3, r4, r5, lr}
 800e9fa:	460d      	mov	r5, r1
 800e9fc:	2101      	movs	r1, #1
 800e9fe:	4604      	mov	r4, r0
 800ea00:	f001 fafc 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800ea04:	b150      	cbz	r0, 800ea1c <ucdr_deserialize_uint8_t+0x24>
 800ea06:	68a3      	ldr	r3, [r4, #8]
 800ea08:	2101      	movs	r1, #1
 800ea0a:	781b      	ldrb	r3, [r3, #0]
 800ea0c:	702b      	strb	r3, [r5, #0]
 800ea0e:	68a2      	ldr	r2, [r4, #8]
 800ea10:	6923      	ldr	r3, [r4, #16]
 800ea12:	440a      	add	r2, r1
 800ea14:	7561      	strb	r1, [r4, #21]
 800ea16:	440b      	add	r3, r1
 800ea18:	60a2      	str	r2, [r4, #8]
 800ea1a:	6123      	str	r3, [r4, #16]
 800ea1c:	7da0      	ldrb	r0, [r4, #22]
 800ea1e:	f080 0001 	eor.w	r0, r0, #1
 800ea22:	bd38      	pop	{r3, r4, r5, pc}

0800ea24 <ucdr_serialize_uint16_t>:
 800ea24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea28:	460b      	mov	r3, r1
 800ea2a:	b082      	sub	sp, #8
 800ea2c:	4604      	mov	r4, r0
 800ea2e:	2102      	movs	r1, #2
 800ea30:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ea34:	f001 fb36 	bl	80100a4 <ucdr_buffer_alignment>
 800ea38:	4601      	mov	r1, r0
 800ea3a:	4620      	mov	r0, r4
 800ea3c:	7d67      	ldrb	r7, [r4, #21]
 800ea3e:	f001 fb79 	bl	8010134 <ucdr_advance_buffer>
 800ea42:	2102      	movs	r1, #2
 800ea44:	4620      	mov	r0, r4
 800ea46:	f001 facd 	bl	800ffe4 <ucdr_check_buffer_available_for>
 800ea4a:	bb78      	cbnz	r0, 800eaac <ucdr_serialize_uint16_t+0x88>
 800ea4c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ea50:	42ab      	cmp	r3, r5
 800ea52:	d926      	bls.n	800eaa2 <ucdr_serialize_uint16_t+0x7e>
 800ea54:	1b5e      	subs	r6, r3, r5
 800ea56:	60a3      	str	r3, [r4, #8]
 800ea58:	6923      	ldr	r3, [r4, #16]
 800ea5a:	4620      	mov	r0, r4
 800ea5c:	f1c6 0802 	rsb	r8, r6, #2
 800ea60:	4433      	add	r3, r6
 800ea62:	4641      	mov	r1, r8
 800ea64:	6123      	str	r3, [r4, #16]
 800ea66:	f001 fac9 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800ea6a:	2800      	cmp	r0, #0
 800ea6c:	d03b      	beq.n	800eae6 <ucdr_serialize_uint16_t+0xc2>
 800ea6e:	7d23      	ldrb	r3, [r4, #20]
 800ea70:	2b01      	cmp	r3, #1
 800ea72:	d04a      	beq.n	800eb0a <ucdr_serialize_uint16_t+0xe6>
 800ea74:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ea78:	702b      	strb	r3, [r5, #0]
 800ea7a:	2e00      	cmp	r6, #0
 800ea7c:	d040      	beq.n	800eb00 <ucdr_serialize_uint16_t+0xdc>
 800ea7e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ea82:	706b      	strb	r3, [r5, #1]
 800ea84:	6923      	ldr	r3, [r4, #16]
 800ea86:	2102      	movs	r1, #2
 800ea88:	68a2      	ldr	r2, [r4, #8]
 800ea8a:	3302      	adds	r3, #2
 800ea8c:	7da0      	ldrb	r0, [r4, #22]
 800ea8e:	4442      	add	r2, r8
 800ea90:	7561      	strb	r1, [r4, #21]
 800ea92:	1b9e      	subs	r6, r3, r6
 800ea94:	f080 0001 	eor.w	r0, r0, #1
 800ea98:	60a2      	str	r2, [r4, #8]
 800ea9a:	6126      	str	r6, [r4, #16]
 800ea9c:	b002      	add	sp, #8
 800ea9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eaa2:	2102      	movs	r1, #2
 800eaa4:	4620      	mov	r0, r4
 800eaa6:	f001 faa9 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800eaaa:	b190      	cbz	r0, 800ead2 <ucdr_serialize_uint16_t+0xae>
 800eaac:	7d23      	ldrb	r3, [r4, #20]
 800eaae:	2b01      	cmp	r3, #1
 800eab0:	68a3      	ldr	r3, [r4, #8]
 800eab2:	d014      	beq.n	800eade <ucdr_serialize_uint16_t+0xba>
 800eab4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800eab8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800eabc:	7019      	strb	r1, [r3, #0]
 800eabe:	68a3      	ldr	r3, [r4, #8]
 800eac0:	705a      	strb	r2, [r3, #1]
 800eac2:	2102      	movs	r1, #2
 800eac4:	68a2      	ldr	r2, [r4, #8]
 800eac6:	6923      	ldr	r3, [r4, #16]
 800eac8:	440a      	add	r2, r1
 800eaca:	7561      	strb	r1, [r4, #21]
 800eacc:	440b      	add	r3, r1
 800eace:	60a2      	str	r2, [r4, #8]
 800ead0:	6123      	str	r3, [r4, #16]
 800ead2:	7da0      	ldrb	r0, [r4, #22]
 800ead4:	f080 0001 	eor.w	r0, r0, #1
 800ead8:	b002      	add	sp, #8
 800eada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eade:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800eae2:	801a      	strh	r2, [r3, #0]
 800eae4:	e7ed      	b.n	800eac2 <ucdr_serialize_uint16_t+0x9e>
 800eae6:	68a2      	ldr	r2, [r4, #8]
 800eae8:	6923      	ldr	r3, [r4, #16]
 800eaea:	7da0      	ldrb	r0, [r4, #22]
 800eaec:	1b92      	subs	r2, r2, r6
 800eaee:	1b9b      	subs	r3, r3, r6
 800eaf0:	7567      	strb	r7, [r4, #21]
 800eaf2:	f080 0001 	eor.w	r0, r0, #1
 800eaf6:	60a2      	str	r2, [r4, #8]
 800eaf8:	6123      	str	r3, [r4, #16]
 800eafa:	b002      	add	sp, #8
 800eafc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb00:	68a3      	ldr	r3, [r4, #8]
 800eb02:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800eb06:	701a      	strb	r2, [r3, #0]
 800eb08:	e7bc      	b.n	800ea84 <ucdr_serialize_uint16_t+0x60>
 800eb0a:	4628      	mov	r0, r5
 800eb0c:	f10d 0506 	add.w	r5, sp, #6
 800eb10:	4632      	mov	r2, r6
 800eb12:	4629      	mov	r1, r5
 800eb14:	f00c ffe7 	bl	801bae6 <memcpy>
 800eb18:	4642      	mov	r2, r8
 800eb1a:	19a9      	adds	r1, r5, r6
 800eb1c:	68a0      	ldr	r0, [r4, #8]
 800eb1e:	f00c ffe2 	bl	801bae6 <memcpy>
 800eb22:	e7af      	b.n	800ea84 <ucdr_serialize_uint16_t+0x60>

0800eb24 <ucdr_serialize_endian_uint16_t>:
 800eb24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eb28:	4604      	mov	r4, r0
 800eb2a:	b083      	sub	sp, #12
 800eb2c:	460d      	mov	r5, r1
 800eb2e:	2102      	movs	r1, #2
 800eb30:	f8ad 2006 	strh.w	r2, [sp, #6]
 800eb34:	f001 fab6 	bl	80100a4 <ucdr_buffer_alignment>
 800eb38:	4601      	mov	r1, r0
 800eb3a:	4620      	mov	r0, r4
 800eb3c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800eb40:	f001 faf8 	bl	8010134 <ucdr_advance_buffer>
 800eb44:	2102      	movs	r1, #2
 800eb46:	4620      	mov	r0, r4
 800eb48:	f001 fa4c 	bl	800ffe4 <ucdr_check_buffer_available_for>
 800eb4c:	bb70      	cbnz	r0, 800ebac <ucdr_serialize_endian_uint16_t+0x88>
 800eb4e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800eb52:	42be      	cmp	r6, r7
 800eb54:	d925      	bls.n	800eba2 <ucdr_serialize_endian_uint16_t+0x7e>
 800eb56:	6923      	ldr	r3, [r4, #16]
 800eb58:	4620      	mov	r0, r4
 800eb5a:	60a6      	str	r6, [r4, #8]
 800eb5c:	1bf6      	subs	r6, r6, r7
 800eb5e:	4433      	add	r3, r6
 800eb60:	f1c6 0902 	rsb	r9, r6, #2
 800eb64:	6123      	str	r3, [r4, #16]
 800eb66:	4649      	mov	r1, r9
 800eb68:	f001 fa48 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800eb6c:	2800      	cmp	r0, #0
 800eb6e:	d039      	beq.n	800ebe4 <ucdr_serialize_endian_uint16_t+0xc0>
 800eb70:	2d01      	cmp	r5, #1
 800eb72:	d04a      	beq.n	800ec0a <ucdr_serialize_endian_uint16_t+0xe6>
 800eb74:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800eb78:	703b      	strb	r3, [r7, #0]
 800eb7a:	2e00      	cmp	r6, #0
 800eb7c:	d040      	beq.n	800ec00 <ucdr_serialize_endian_uint16_t+0xdc>
 800eb7e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800eb82:	707b      	strb	r3, [r7, #1]
 800eb84:	6923      	ldr	r3, [r4, #16]
 800eb86:	2102      	movs	r1, #2
 800eb88:	68a2      	ldr	r2, [r4, #8]
 800eb8a:	7da0      	ldrb	r0, [r4, #22]
 800eb8c:	3302      	adds	r3, #2
 800eb8e:	444a      	add	r2, r9
 800eb90:	7561      	strb	r1, [r4, #21]
 800eb92:	1b9b      	subs	r3, r3, r6
 800eb94:	f080 0001 	eor.w	r0, r0, #1
 800eb98:	60a2      	str	r2, [r4, #8]
 800eb9a:	6123      	str	r3, [r4, #16]
 800eb9c:	b003      	add	sp, #12
 800eb9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eba2:	2102      	movs	r1, #2
 800eba4:	4620      	mov	r0, r4
 800eba6:	f001 fa29 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800ebaa:	b188      	cbz	r0, 800ebd0 <ucdr_serialize_endian_uint16_t+0xac>
 800ebac:	2d01      	cmp	r5, #1
 800ebae:	68a3      	ldr	r3, [r4, #8]
 800ebb0:	d014      	beq.n	800ebdc <ucdr_serialize_endian_uint16_t+0xb8>
 800ebb2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800ebb6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ebba:	7019      	strb	r1, [r3, #0]
 800ebbc:	68a3      	ldr	r3, [r4, #8]
 800ebbe:	705a      	strb	r2, [r3, #1]
 800ebc0:	2102      	movs	r1, #2
 800ebc2:	68a2      	ldr	r2, [r4, #8]
 800ebc4:	6923      	ldr	r3, [r4, #16]
 800ebc6:	440a      	add	r2, r1
 800ebc8:	7561      	strb	r1, [r4, #21]
 800ebca:	440b      	add	r3, r1
 800ebcc:	60a2      	str	r2, [r4, #8]
 800ebce:	6123      	str	r3, [r4, #16]
 800ebd0:	7da0      	ldrb	r0, [r4, #22]
 800ebd2:	f080 0001 	eor.w	r0, r0, #1
 800ebd6:	b003      	add	sp, #12
 800ebd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebdc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ebe0:	801a      	strh	r2, [r3, #0]
 800ebe2:	e7ed      	b.n	800ebc0 <ucdr_serialize_endian_uint16_t+0x9c>
 800ebe4:	68a2      	ldr	r2, [r4, #8]
 800ebe6:	6923      	ldr	r3, [r4, #16]
 800ebe8:	7da0      	ldrb	r0, [r4, #22]
 800ebea:	1b92      	subs	r2, r2, r6
 800ebec:	1b9b      	subs	r3, r3, r6
 800ebee:	f884 8015 	strb.w	r8, [r4, #21]
 800ebf2:	f080 0001 	eor.w	r0, r0, #1
 800ebf6:	60a2      	str	r2, [r4, #8]
 800ebf8:	6123      	str	r3, [r4, #16]
 800ebfa:	b003      	add	sp, #12
 800ebfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec00:	68a3      	ldr	r3, [r4, #8]
 800ec02:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ec06:	701a      	strb	r2, [r3, #0]
 800ec08:	e7bc      	b.n	800eb84 <ucdr_serialize_endian_uint16_t+0x60>
 800ec0a:	f10d 0506 	add.w	r5, sp, #6
 800ec0e:	4632      	mov	r2, r6
 800ec10:	4638      	mov	r0, r7
 800ec12:	4629      	mov	r1, r5
 800ec14:	f00c ff67 	bl	801bae6 <memcpy>
 800ec18:	464a      	mov	r2, r9
 800ec1a:	19a9      	adds	r1, r5, r6
 800ec1c:	68a0      	ldr	r0, [r4, #8]
 800ec1e:	f00c ff62 	bl	801bae6 <memcpy>
 800ec22:	e7af      	b.n	800eb84 <ucdr_serialize_endian_uint16_t+0x60>

0800ec24 <ucdr_deserialize_uint16_t>:
 800ec24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec28:	4604      	mov	r4, r0
 800ec2a:	460d      	mov	r5, r1
 800ec2c:	2102      	movs	r1, #2
 800ec2e:	f001 fa39 	bl	80100a4 <ucdr_buffer_alignment>
 800ec32:	4601      	mov	r1, r0
 800ec34:	4620      	mov	r0, r4
 800ec36:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ec3a:	f001 fa7b 	bl	8010134 <ucdr_advance_buffer>
 800ec3e:	2102      	movs	r1, #2
 800ec40:	4620      	mov	r0, r4
 800ec42:	f001 f9cf 	bl	800ffe4 <ucdr_check_buffer_available_for>
 800ec46:	bb60      	cbnz	r0, 800eca2 <ucdr_deserialize_uint16_t+0x7e>
 800ec48:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ec4c:	42be      	cmp	r6, r7
 800ec4e:	d923      	bls.n	800ec98 <ucdr_deserialize_uint16_t+0x74>
 800ec50:	6923      	ldr	r3, [r4, #16]
 800ec52:	4620      	mov	r0, r4
 800ec54:	60a6      	str	r6, [r4, #8]
 800ec56:	1bf6      	subs	r6, r6, r7
 800ec58:	4433      	add	r3, r6
 800ec5a:	f1c6 0902 	rsb	r9, r6, #2
 800ec5e:	6123      	str	r3, [r4, #16]
 800ec60:	4649      	mov	r1, r9
 800ec62:	f001 f9cb 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800ec66:	2800      	cmp	r0, #0
 800ec68:	d034      	beq.n	800ecd4 <ucdr_deserialize_uint16_t+0xb0>
 800ec6a:	7d23      	ldrb	r3, [r4, #20]
 800ec6c:	2b01      	cmp	r3, #1
 800ec6e:	d042      	beq.n	800ecf6 <ucdr_deserialize_uint16_t+0xd2>
 800ec70:	787b      	ldrb	r3, [r7, #1]
 800ec72:	702b      	strb	r3, [r5, #0]
 800ec74:	2e00      	cmp	r6, #0
 800ec76:	d03a      	beq.n	800ecee <ucdr_deserialize_uint16_t+0xca>
 800ec78:	783b      	ldrb	r3, [r7, #0]
 800ec7a:	706b      	strb	r3, [r5, #1]
 800ec7c:	6923      	ldr	r3, [r4, #16]
 800ec7e:	2102      	movs	r1, #2
 800ec80:	68a2      	ldr	r2, [r4, #8]
 800ec82:	3302      	adds	r3, #2
 800ec84:	7da0      	ldrb	r0, [r4, #22]
 800ec86:	444a      	add	r2, r9
 800ec88:	7561      	strb	r1, [r4, #21]
 800ec8a:	1b9b      	subs	r3, r3, r6
 800ec8c:	f080 0001 	eor.w	r0, r0, #1
 800ec90:	60a2      	str	r2, [r4, #8]
 800ec92:	6123      	str	r3, [r4, #16]
 800ec94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec98:	2102      	movs	r1, #2
 800ec9a:	4620      	mov	r0, r4
 800ec9c:	f001 f9ae 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800eca0:	b180      	cbz	r0, 800ecc4 <ucdr_deserialize_uint16_t+0xa0>
 800eca2:	7d23      	ldrb	r3, [r4, #20]
 800eca4:	2b01      	cmp	r3, #1
 800eca6:	68a3      	ldr	r3, [r4, #8]
 800eca8:	d011      	beq.n	800ecce <ucdr_deserialize_uint16_t+0xaa>
 800ecaa:	785b      	ldrb	r3, [r3, #1]
 800ecac:	702b      	strb	r3, [r5, #0]
 800ecae:	68a3      	ldr	r3, [r4, #8]
 800ecb0:	781b      	ldrb	r3, [r3, #0]
 800ecb2:	706b      	strb	r3, [r5, #1]
 800ecb4:	2102      	movs	r1, #2
 800ecb6:	68a2      	ldr	r2, [r4, #8]
 800ecb8:	6923      	ldr	r3, [r4, #16]
 800ecba:	440a      	add	r2, r1
 800ecbc:	7561      	strb	r1, [r4, #21]
 800ecbe:	440b      	add	r3, r1
 800ecc0:	60a2      	str	r2, [r4, #8]
 800ecc2:	6123      	str	r3, [r4, #16]
 800ecc4:	7da0      	ldrb	r0, [r4, #22]
 800ecc6:	f080 0001 	eor.w	r0, r0, #1
 800ecca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecce:	881b      	ldrh	r3, [r3, #0]
 800ecd0:	802b      	strh	r3, [r5, #0]
 800ecd2:	e7ef      	b.n	800ecb4 <ucdr_deserialize_uint16_t+0x90>
 800ecd4:	68a2      	ldr	r2, [r4, #8]
 800ecd6:	6923      	ldr	r3, [r4, #16]
 800ecd8:	1b92      	subs	r2, r2, r6
 800ecda:	7da0      	ldrb	r0, [r4, #22]
 800ecdc:	1b9b      	subs	r3, r3, r6
 800ecde:	f884 8015 	strb.w	r8, [r4, #21]
 800ece2:	f080 0001 	eor.w	r0, r0, #1
 800ece6:	60a2      	str	r2, [r4, #8]
 800ece8:	6123      	str	r3, [r4, #16]
 800ecea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecee:	68a3      	ldr	r3, [r4, #8]
 800ecf0:	781b      	ldrb	r3, [r3, #0]
 800ecf2:	706b      	strb	r3, [r5, #1]
 800ecf4:	e7c2      	b.n	800ec7c <ucdr_deserialize_uint16_t+0x58>
 800ecf6:	4639      	mov	r1, r7
 800ecf8:	4632      	mov	r2, r6
 800ecfa:	4628      	mov	r0, r5
 800ecfc:	f00c fef3 	bl	801bae6 <memcpy>
 800ed00:	464a      	mov	r2, r9
 800ed02:	19a8      	adds	r0, r5, r6
 800ed04:	68a1      	ldr	r1, [r4, #8]
 800ed06:	f00c feee 	bl	801bae6 <memcpy>
 800ed0a:	e7b7      	b.n	800ec7c <ucdr_deserialize_uint16_t+0x58>

0800ed0c <ucdr_deserialize_endian_uint16_t>:
 800ed0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed10:	4604      	mov	r4, r0
 800ed12:	460e      	mov	r6, r1
 800ed14:	2102      	movs	r1, #2
 800ed16:	4615      	mov	r5, r2
 800ed18:	f001 f9c4 	bl	80100a4 <ucdr_buffer_alignment>
 800ed1c:	4601      	mov	r1, r0
 800ed1e:	4620      	mov	r0, r4
 800ed20:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ed24:	f001 fa06 	bl	8010134 <ucdr_advance_buffer>
 800ed28:	2102      	movs	r1, #2
 800ed2a:	4620      	mov	r0, r4
 800ed2c:	f001 f95a 	bl	800ffe4 <ucdr_check_buffer_available_for>
 800ed30:	bb70      	cbnz	r0, 800ed90 <ucdr_deserialize_endian_uint16_t+0x84>
 800ed32:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 800ed36:	454f      	cmp	r7, r9
 800ed38:	d925      	bls.n	800ed86 <ucdr_deserialize_endian_uint16_t+0x7a>
 800ed3a:	6923      	ldr	r3, [r4, #16]
 800ed3c:	4620      	mov	r0, r4
 800ed3e:	60a7      	str	r7, [r4, #8]
 800ed40:	eba7 0709 	sub.w	r7, r7, r9
 800ed44:	443b      	add	r3, r7
 800ed46:	f1c7 0a02 	rsb	sl, r7, #2
 800ed4a:	6123      	str	r3, [r4, #16]
 800ed4c:	4651      	mov	r1, sl
 800ed4e:	f001 f955 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800ed52:	2800      	cmp	r0, #0
 800ed54:	d034      	beq.n	800edc0 <ucdr_deserialize_endian_uint16_t+0xb4>
 800ed56:	2e01      	cmp	r6, #1
 800ed58:	d043      	beq.n	800ede2 <ucdr_deserialize_endian_uint16_t+0xd6>
 800ed5a:	f899 3001 	ldrb.w	r3, [r9, #1]
 800ed5e:	702b      	strb	r3, [r5, #0]
 800ed60:	2f00      	cmp	r7, #0
 800ed62:	d03a      	beq.n	800edda <ucdr_deserialize_endian_uint16_t+0xce>
 800ed64:	f899 3000 	ldrb.w	r3, [r9]
 800ed68:	706b      	strb	r3, [r5, #1]
 800ed6a:	6923      	ldr	r3, [r4, #16]
 800ed6c:	2102      	movs	r1, #2
 800ed6e:	68a2      	ldr	r2, [r4, #8]
 800ed70:	3302      	adds	r3, #2
 800ed72:	7da0      	ldrb	r0, [r4, #22]
 800ed74:	4452      	add	r2, sl
 800ed76:	7561      	strb	r1, [r4, #21]
 800ed78:	1bdb      	subs	r3, r3, r7
 800ed7a:	f080 0001 	eor.w	r0, r0, #1
 800ed7e:	60a2      	str	r2, [r4, #8]
 800ed80:	6123      	str	r3, [r4, #16]
 800ed82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed86:	2102      	movs	r1, #2
 800ed88:	4620      	mov	r0, r4
 800ed8a:	f001 f937 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800ed8e:	b178      	cbz	r0, 800edb0 <ucdr_deserialize_endian_uint16_t+0xa4>
 800ed90:	2e01      	cmp	r6, #1
 800ed92:	68a3      	ldr	r3, [r4, #8]
 800ed94:	d011      	beq.n	800edba <ucdr_deserialize_endian_uint16_t+0xae>
 800ed96:	785b      	ldrb	r3, [r3, #1]
 800ed98:	702b      	strb	r3, [r5, #0]
 800ed9a:	68a3      	ldr	r3, [r4, #8]
 800ed9c:	781b      	ldrb	r3, [r3, #0]
 800ed9e:	706b      	strb	r3, [r5, #1]
 800eda0:	2102      	movs	r1, #2
 800eda2:	68a2      	ldr	r2, [r4, #8]
 800eda4:	6923      	ldr	r3, [r4, #16]
 800eda6:	440a      	add	r2, r1
 800eda8:	7561      	strb	r1, [r4, #21]
 800edaa:	440b      	add	r3, r1
 800edac:	60a2      	str	r2, [r4, #8]
 800edae:	6123      	str	r3, [r4, #16]
 800edb0:	7da0      	ldrb	r0, [r4, #22]
 800edb2:	f080 0001 	eor.w	r0, r0, #1
 800edb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edba:	881b      	ldrh	r3, [r3, #0]
 800edbc:	802b      	strh	r3, [r5, #0]
 800edbe:	e7ef      	b.n	800eda0 <ucdr_deserialize_endian_uint16_t+0x94>
 800edc0:	68a2      	ldr	r2, [r4, #8]
 800edc2:	6923      	ldr	r3, [r4, #16]
 800edc4:	1bd2      	subs	r2, r2, r7
 800edc6:	7da0      	ldrb	r0, [r4, #22]
 800edc8:	1bdb      	subs	r3, r3, r7
 800edca:	f884 8015 	strb.w	r8, [r4, #21]
 800edce:	f080 0001 	eor.w	r0, r0, #1
 800edd2:	60a2      	str	r2, [r4, #8]
 800edd4:	6123      	str	r3, [r4, #16]
 800edd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edda:	68a3      	ldr	r3, [r4, #8]
 800eddc:	781b      	ldrb	r3, [r3, #0]
 800edde:	706b      	strb	r3, [r5, #1]
 800ede0:	e7c3      	b.n	800ed6a <ucdr_deserialize_endian_uint16_t+0x5e>
 800ede2:	4649      	mov	r1, r9
 800ede4:	463a      	mov	r2, r7
 800ede6:	4628      	mov	r0, r5
 800ede8:	f00c fe7d 	bl	801bae6 <memcpy>
 800edec:	4652      	mov	r2, sl
 800edee:	19e8      	adds	r0, r5, r7
 800edf0:	68a1      	ldr	r1, [r4, #8]
 800edf2:	f00c fe78 	bl	801bae6 <memcpy>
 800edf6:	e7b8      	b.n	800ed6a <ucdr_deserialize_endian_uint16_t+0x5e>

0800edf8 <ucdr_serialize_uint32_t>:
 800edf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edfc:	b082      	sub	sp, #8
 800edfe:	4604      	mov	r4, r0
 800ee00:	9101      	str	r1, [sp, #4]
 800ee02:	2104      	movs	r1, #4
 800ee04:	f001 f94e 	bl	80100a4 <ucdr_buffer_alignment>
 800ee08:	4601      	mov	r1, r0
 800ee0a:	4620      	mov	r0, r4
 800ee0c:	7d67      	ldrb	r7, [r4, #21]
 800ee0e:	f001 f991 	bl	8010134 <ucdr_advance_buffer>
 800ee12:	2104      	movs	r1, #4
 800ee14:	4620      	mov	r0, r4
 800ee16:	f001 f8e5 	bl	800ffe4 <ucdr_check_buffer_available_for>
 800ee1a:	2800      	cmp	r0, #0
 800ee1c:	d139      	bne.n	800ee92 <ucdr_serialize_uint32_t+0x9a>
 800ee1e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ee22:	42ab      	cmp	r3, r5
 800ee24:	d930      	bls.n	800ee88 <ucdr_serialize_uint32_t+0x90>
 800ee26:	1b5e      	subs	r6, r3, r5
 800ee28:	60a3      	str	r3, [r4, #8]
 800ee2a:	6923      	ldr	r3, [r4, #16]
 800ee2c:	4620      	mov	r0, r4
 800ee2e:	f1c6 0804 	rsb	r8, r6, #4
 800ee32:	4433      	add	r3, r6
 800ee34:	4641      	mov	r1, r8
 800ee36:	6123      	str	r3, [r4, #16]
 800ee38:	f001 f8e0 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800ee3c:	2800      	cmp	r0, #0
 800ee3e:	d04c      	beq.n	800eeda <ucdr_serialize_uint32_t+0xe2>
 800ee40:	7d23      	ldrb	r3, [r4, #20]
 800ee42:	2b01      	cmp	r3, #1
 800ee44:	d063      	beq.n	800ef0e <ucdr_serialize_uint32_t+0x116>
 800ee46:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ee4a:	702b      	strb	r3, [r5, #0]
 800ee4c:	2e00      	cmp	r6, #0
 800ee4e:	d051      	beq.n	800eef4 <ucdr_serialize_uint32_t+0xfc>
 800ee50:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ee54:	2e01      	cmp	r6, #1
 800ee56:	706b      	strb	r3, [r5, #1]
 800ee58:	d050      	beq.n	800eefc <ucdr_serialize_uint32_t+0x104>
 800ee5a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ee5e:	2e02      	cmp	r6, #2
 800ee60:	70ab      	strb	r3, [r5, #2]
 800ee62:	d04f      	beq.n	800ef04 <ucdr_serialize_uint32_t+0x10c>
 800ee64:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ee68:	70eb      	strb	r3, [r5, #3]
 800ee6a:	6923      	ldr	r3, [r4, #16]
 800ee6c:	2104      	movs	r1, #4
 800ee6e:	68a2      	ldr	r2, [r4, #8]
 800ee70:	3304      	adds	r3, #4
 800ee72:	7da0      	ldrb	r0, [r4, #22]
 800ee74:	4442      	add	r2, r8
 800ee76:	7561      	strb	r1, [r4, #21]
 800ee78:	1b9e      	subs	r6, r3, r6
 800ee7a:	f080 0001 	eor.w	r0, r0, #1
 800ee7e:	60a2      	str	r2, [r4, #8]
 800ee80:	6126      	str	r6, [r4, #16]
 800ee82:	b002      	add	sp, #8
 800ee84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee88:	2104      	movs	r1, #4
 800ee8a:	4620      	mov	r0, r4
 800ee8c:	f001 f8b6 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800ee90:	b1d0      	cbz	r0, 800eec8 <ucdr_serialize_uint32_t+0xd0>
 800ee92:	7d23      	ldrb	r3, [r4, #20]
 800ee94:	2b01      	cmp	r3, #1
 800ee96:	68a3      	ldr	r3, [r4, #8]
 800ee98:	d01c      	beq.n	800eed4 <ucdr_serialize_uint32_t+0xdc>
 800ee9a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800ee9e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800eea2:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800eea6:	7018      	strb	r0, [r3, #0]
 800eea8:	68a3      	ldr	r3, [r4, #8]
 800eeaa:	705a      	strb	r2, [r3, #1]
 800eeac:	68a3      	ldr	r3, [r4, #8]
 800eeae:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800eeb2:	7099      	strb	r1, [r3, #2]
 800eeb4:	68a3      	ldr	r3, [r4, #8]
 800eeb6:	70da      	strb	r2, [r3, #3]
 800eeb8:	2104      	movs	r1, #4
 800eeba:	68a2      	ldr	r2, [r4, #8]
 800eebc:	6923      	ldr	r3, [r4, #16]
 800eebe:	440a      	add	r2, r1
 800eec0:	7561      	strb	r1, [r4, #21]
 800eec2:	440b      	add	r3, r1
 800eec4:	60a2      	str	r2, [r4, #8]
 800eec6:	6123      	str	r3, [r4, #16]
 800eec8:	7da0      	ldrb	r0, [r4, #22]
 800eeca:	f080 0001 	eor.w	r0, r0, #1
 800eece:	b002      	add	sp, #8
 800eed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eed4:	9a01      	ldr	r2, [sp, #4]
 800eed6:	601a      	str	r2, [r3, #0]
 800eed8:	e7ee      	b.n	800eeb8 <ucdr_serialize_uint32_t+0xc0>
 800eeda:	68a2      	ldr	r2, [r4, #8]
 800eedc:	6923      	ldr	r3, [r4, #16]
 800eede:	7da0      	ldrb	r0, [r4, #22]
 800eee0:	1b92      	subs	r2, r2, r6
 800eee2:	1b9b      	subs	r3, r3, r6
 800eee4:	7567      	strb	r7, [r4, #21]
 800eee6:	f080 0001 	eor.w	r0, r0, #1
 800eeea:	60a2      	str	r2, [r4, #8]
 800eeec:	6123      	str	r3, [r4, #16]
 800eeee:	b002      	add	sp, #8
 800eef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eef4:	68a3      	ldr	r3, [r4, #8]
 800eef6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800eefa:	701a      	strb	r2, [r3, #0]
 800eefc:	68a3      	ldr	r3, [r4, #8]
 800eefe:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ef02:	701a      	strb	r2, [r3, #0]
 800ef04:	68a3      	ldr	r3, [r4, #8]
 800ef06:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ef0a:	701a      	strb	r2, [r3, #0]
 800ef0c:	e7ad      	b.n	800ee6a <ucdr_serialize_uint32_t+0x72>
 800ef0e:	4628      	mov	r0, r5
 800ef10:	ad01      	add	r5, sp, #4
 800ef12:	4632      	mov	r2, r6
 800ef14:	4629      	mov	r1, r5
 800ef16:	f00c fde6 	bl	801bae6 <memcpy>
 800ef1a:	4642      	mov	r2, r8
 800ef1c:	19a9      	adds	r1, r5, r6
 800ef1e:	68a0      	ldr	r0, [r4, #8]
 800ef20:	f00c fde1 	bl	801bae6 <memcpy>
 800ef24:	e7a1      	b.n	800ee6a <ucdr_serialize_uint32_t+0x72>
 800ef26:	bf00      	nop

0800ef28 <ucdr_serialize_endian_uint32_t>:
 800ef28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ef2c:	4604      	mov	r4, r0
 800ef2e:	b083      	sub	sp, #12
 800ef30:	460d      	mov	r5, r1
 800ef32:	2104      	movs	r1, #4
 800ef34:	9201      	str	r2, [sp, #4]
 800ef36:	f001 f8b5 	bl	80100a4 <ucdr_buffer_alignment>
 800ef3a:	4601      	mov	r1, r0
 800ef3c:	4620      	mov	r0, r4
 800ef3e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ef42:	f001 f8f7 	bl	8010134 <ucdr_advance_buffer>
 800ef46:	2104      	movs	r1, #4
 800ef48:	4620      	mov	r0, r4
 800ef4a:	f001 f84b 	bl	800ffe4 <ucdr_check_buffer_available_for>
 800ef4e:	2800      	cmp	r0, #0
 800ef50:	d138      	bne.n	800efc4 <ucdr_serialize_endian_uint32_t+0x9c>
 800ef52:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ef56:	42b7      	cmp	r7, r6
 800ef58:	d92f      	bls.n	800efba <ucdr_serialize_endian_uint32_t+0x92>
 800ef5a:	6923      	ldr	r3, [r4, #16]
 800ef5c:	4620      	mov	r0, r4
 800ef5e:	60a7      	str	r7, [r4, #8]
 800ef60:	1bbf      	subs	r7, r7, r6
 800ef62:	443b      	add	r3, r7
 800ef64:	f1c7 0904 	rsb	r9, r7, #4
 800ef68:	6123      	str	r3, [r4, #16]
 800ef6a:	4649      	mov	r1, r9
 800ef6c:	f001 f846 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800ef70:	2800      	cmp	r0, #0
 800ef72:	d04a      	beq.n	800f00a <ucdr_serialize_endian_uint32_t+0xe2>
 800ef74:	2d01      	cmp	r5, #1
 800ef76:	d063      	beq.n	800f040 <ucdr_serialize_endian_uint32_t+0x118>
 800ef78:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ef7c:	7033      	strb	r3, [r6, #0]
 800ef7e:	2f00      	cmp	r7, #0
 800ef80:	d051      	beq.n	800f026 <ucdr_serialize_endian_uint32_t+0xfe>
 800ef82:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ef86:	2f01      	cmp	r7, #1
 800ef88:	7073      	strb	r3, [r6, #1]
 800ef8a:	d050      	beq.n	800f02e <ucdr_serialize_endian_uint32_t+0x106>
 800ef8c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ef90:	2f02      	cmp	r7, #2
 800ef92:	70b3      	strb	r3, [r6, #2]
 800ef94:	d04f      	beq.n	800f036 <ucdr_serialize_endian_uint32_t+0x10e>
 800ef96:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ef9a:	70f3      	strb	r3, [r6, #3]
 800ef9c:	6923      	ldr	r3, [r4, #16]
 800ef9e:	2104      	movs	r1, #4
 800efa0:	68a2      	ldr	r2, [r4, #8]
 800efa2:	7da0      	ldrb	r0, [r4, #22]
 800efa4:	3304      	adds	r3, #4
 800efa6:	444a      	add	r2, r9
 800efa8:	7561      	strb	r1, [r4, #21]
 800efaa:	1bdb      	subs	r3, r3, r7
 800efac:	f080 0001 	eor.w	r0, r0, #1
 800efb0:	60a2      	str	r2, [r4, #8]
 800efb2:	6123      	str	r3, [r4, #16]
 800efb4:	b003      	add	sp, #12
 800efb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800efba:	2104      	movs	r1, #4
 800efbc:	4620      	mov	r0, r4
 800efbe:	f001 f81d 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800efc2:	b1c8      	cbz	r0, 800eff8 <ucdr_serialize_endian_uint32_t+0xd0>
 800efc4:	2d01      	cmp	r5, #1
 800efc6:	68a3      	ldr	r3, [r4, #8]
 800efc8:	d01c      	beq.n	800f004 <ucdr_serialize_endian_uint32_t+0xdc>
 800efca:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800efce:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800efd2:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800efd6:	7018      	strb	r0, [r3, #0]
 800efd8:	68a3      	ldr	r3, [r4, #8]
 800efda:	705a      	strb	r2, [r3, #1]
 800efdc:	68a3      	ldr	r3, [r4, #8]
 800efde:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800efe2:	7099      	strb	r1, [r3, #2]
 800efe4:	68a3      	ldr	r3, [r4, #8]
 800efe6:	70da      	strb	r2, [r3, #3]
 800efe8:	2104      	movs	r1, #4
 800efea:	68a2      	ldr	r2, [r4, #8]
 800efec:	6923      	ldr	r3, [r4, #16]
 800efee:	440a      	add	r2, r1
 800eff0:	7561      	strb	r1, [r4, #21]
 800eff2:	440b      	add	r3, r1
 800eff4:	60a2      	str	r2, [r4, #8]
 800eff6:	6123      	str	r3, [r4, #16]
 800eff8:	7da0      	ldrb	r0, [r4, #22]
 800effa:	f080 0001 	eor.w	r0, r0, #1
 800effe:	b003      	add	sp, #12
 800f000:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f004:	9a01      	ldr	r2, [sp, #4]
 800f006:	601a      	str	r2, [r3, #0]
 800f008:	e7ee      	b.n	800efe8 <ucdr_serialize_endian_uint32_t+0xc0>
 800f00a:	68a2      	ldr	r2, [r4, #8]
 800f00c:	6923      	ldr	r3, [r4, #16]
 800f00e:	7da0      	ldrb	r0, [r4, #22]
 800f010:	1bd2      	subs	r2, r2, r7
 800f012:	1bdb      	subs	r3, r3, r7
 800f014:	f884 8015 	strb.w	r8, [r4, #21]
 800f018:	f080 0001 	eor.w	r0, r0, #1
 800f01c:	60a2      	str	r2, [r4, #8]
 800f01e:	6123      	str	r3, [r4, #16]
 800f020:	b003      	add	sp, #12
 800f022:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f026:	68a3      	ldr	r3, [r4, #8]
 800f028:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f02c:	701a      	strb	r2, [r3, #0]
 800f02e:	68a3      	ldr	r3, [r4, #8]
 800f030:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f034:	701a      	strb	r2, [r3, #0]
 800f036:	68a3      	ldr	r3, [r4, #8]
 800f038:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f03c:	701a      	strb	r2, [r3, #0]
 800f03e:	e7ad      	b.n	800ef9c <ucdr_serialize_endian_uint32_t+0x74>
 800f040:	ad01      	add	r5, sp, #4
 800f042:	463a      	mov	r2, r7
 800f044:	4630      	mov	r0, r6
 800f046:	4629      	mov	r1, r5
 800f048:	f00c fd4d 	bl	801bae6 <memcpy>
 800f04c:	464a      	mov	r2, r9
 800f04e:	19e9      	adds	r1, r5, r7
 800f050:	68a0      	ldr	r0, [r4, #8]
 800f052:	f00c fd48 	bl	801bae6 <memcpy>
 800f056:	e7a1      	b.n	800ef9c <ucdr_serialize_endian_uint32_t+0x74>

0800f058 <ucdr_deserialize_uint32_t>:
 800f058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f05c:	4604      	mov	r4, r0
 800f05e:	460d      	mov	r5, r1
 800f060:	2104      	movs	r1, #4
 800f062:	f001 f81f 	bl	80100a4 <ucdr_buffer_alignment>
 800f066:	4601      	mov	r1, r0
 800f068:	4620      	mov	r0, r4
 800f06a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f06e:	f001 f861 	bl	8010134 <ucdr_advance_buffer>
 800f072:	2104      	movs	r1, #4
 800f074:	4620      	mov	r0, r4
 800f076:	f000 ffb5 	bl	800ffe4 <ucdr_check_buffer_available_for>
 800f07a:	2800      	cmp	r0, #0
 800f07c:	d138      	bne.n	800f0f0 <ucdr_deserialize_uint32_t+0x98>
 800f07e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f082:	42b7      	cmp	r7, r6
 800f084:	d92f      	bls.n	800f0e6 <ucdr_deserialize_uint32_t+0x8e>
 800f086:	6923      	ldr	r3, [r4, #16]
 800f088:	4620      	mov	r0, r4
 800f08a:	60a7      	str	r7, [r4, #8]
 800f08c:	1bbf      	subs	r7, r7, r6
 800f08e:	443b      	add	r3, r7
 800f090:	f1c7 0904 	rsb	r9, r7, #4
 800f094:	6123      	str	r3, [r4, #16]
 800f096:	4649      	mov	r1, r9
 800f098:	f000 ffb0 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800f09c:	2800      	cmp	r0, #0
 800f09e:	d046      	beq.n	800f12e <ucdr_deserialize_uint32_t+0xd6>
 800f0a0:	7d23      	ldrb	r3, [r4, #20]
 800f0a2:	2b01      	cmp	r3, #1
 800f0a4:	d05c      	beq.n	800f160 <ucdr_deserialize_uint32_t+0x108>
 800f0a6:	78f3      	ldrb	r3, [r6, #3]
 800f0a8:	702b      	strb	r3, [r5, #0]
 800f0aa:	2f00      	cmp	r7, #0
 800f0ac:	d04c      	beq.n	800f148 <ucdr_deserialize_uint32_t+0xf0>
 800f0ae:	78b3      	ldrb	r3, [r6, #2]
 800f0b0:	2f01      	cmp	r7, #1
 800f0b2:	706b      	strb	r3, [r5, #1]
 800f0b4:	f105 0302 	add.w	r3, r5, #2
 800f0b8:	d04a      	beq.n	800f150 <ucdr_deserialize_uint32_t+0xf8>
 800f0ba:	7873      	ldrb	r3, [r6, #1]
 800f0bc:	2f02      	cmp	r7, #2
 800f0be:	70ab      	strb	r3, [r5, #2]
 800f0c0:	f105 0303 	add.w	r3, r5, #3
 800f0c4:	d048      	beq.n	800f158 <ucdr_deserialize_uint32_t+0x100>
 800f0c6:	7833      	ldrb	r3, [r6, #0]
 800f0c8:	70eb      	strb	r3, [r5, #3]
 800f0ca:	6923      	ldr	r3, [r4, #16]
 800f0cc:	2104      	movs	r1, #4
 800f0ce:	68a2      	ldr	r2, [r4, #8]
 800f0d0:	3304      	adds	r3, #4
 800f0d2:	7da0      	ldrb	r0, [r4, #22]
 800f0d4:	444a      	add	r2, r9
 800f0d6:	7561      	strb	r1, [r4, #21]
 800f0d8:	1bdb      	subs	r3, r3, r7
 800f0da:	f080 0001 	eor.w	r0, r0, #1
 800f0de:	60a2      	str	r2, [r4, #8]
 800f0e0:	6123      	str	r3, [r4, #16]
 800f0e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0e6:	2104      	movs	r1, #4
 800f0e8:	4620      	mov	r0, r4
 800f0ea:	f000 ff87 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800f0ee:	b1b0      	cbz	r0, 800f11e <ucdr_deserialize_uint32_t+0xc6>
 800f0f0:	7d23      	ldrb	r3, [r4, #20]
 800f0f2:	2b01      	cmp	r3, #1
 800f0f4:	68a3      	ldr	r3, [r4, #8]
 800f0f6:	d017      	beq.n	800f128 <ucdr_deserialize_uint32_t+0xd0>
 800f0f8:	78db      	ldrb	r3, [r3, #3]
 800f0fa:	702b      	strb	r3, [r5, #0]
 800f0fc:	68a3      	ldr	r3, [r4, #8]
 800f0fe:	789b      	ldrb	r3, [r3, #2]
 800f100:	706b      	strb	r3, [r5, #1]
 800f102:	68a3      	ldr	r3, [r4, #8]
 800f104:	785b      	ldrb	r3, [r3, #1]
 800f106:	70ab      	strb	r3, [r5, #2]
 800f108:	68a3      	ldr	r3, [r4, #8]
 800f10a:	781b      	ldrb	r3, [r3, #0]
 800f10c:	70eb      	strb	r3, [r5, #3]
 800f10e:	2104      	movs	r1, #4
 800f110:	68a2      	ldr	r2, [r4, #8]
 800f112:	6923      	ldr	r3, [r4, #16]
 800f114:	440a      	add	r2, r1
 800f116:	7561      	strb	r1, [r4, #21]
 800f118:	440b      	add	r3, r1
 800f11a:	60a2      	str	r2, [r4, #8]
 800f11c:	6123      	str	r3, [r4, #16]
 800f11e:	7da0      	ldrb	r0, [r4, #22]
 800f120:	f080 0001 	eor.w	r0, r0, #1
 800f124:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	602b      	str	r3, [r5, #0]
 800f12c:	e7ef      	b.n	800f10e <ucdr_deserialize_uint32_t+0xb6>
 800f12e:	68a2      	ldr	r2, [r4, #8]
 800f130:	6923      	ldr	r3, [r4, #16]
 800f132:	1bd2      	subs	r2, r2, r7
 800f134:	7da0      	ldrb	r0, [r4, #22]
 800f136:	1bdb      	subs	r3, r3, r7
 800f138:	f884 8015 	strb.w	r8, [r4, #21]
 800f13c:	f080 0001 	eor.w	r0, r0, #1
 800f140:	60a2      	str	r2, [r4, #8]
 800f142:	6123      	str	r3, [r4, #16]
 800f144:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f148:	68a3      	ldr	r3, [r4, #8]
 800f14a:	789b      	ldrb	r3, [r3, #2]
 800f14c:	706b      	strb	r3, [r5, #1]
 800f14e:	1cab      	adds	r3, r5, #2
 800f150:	68a2      	ldr	r2, [r4, #8]
 800f152:	7852      	ldrb	r2, [r2, #1]
 800f154:	f803 2b01 	strb.w	r2, [r3], #1
 800f158:	68a2      	ldr	r2, [r4, #8]
 800f15a:	7812      	ldrb	r2, [r2, #0]
 800f15c:	701a      	strb	r2, [r3, #0]
 800f15e:	e7b4      	b.n	800f0ca <ucdr_deserialize_uint32_t+0x72>
 800f160:	4631      	mov	r1, r6
 800f162:	463a      	mov	r2, r7
 800f164:	4628      	mov	r0, r5
 800f166:	f00c fcbe 	bl	801bae6 <memcpy>
 800f16a:	464a      	mov	r2, r9
 800f16c:	19e8      	adds	r0, r5, r7
 800f16e:	68a1      	ldr	r1, [r4, #8]
 800f170:	f00c fcb9 	bl	801bae6 <memcpy>
 800f174:	e7a9      	b.n	800f0ca <ucdr_deserialize_uint32_t+0x72>
 800f176:	bf00      	nop

0800f178 <ucdr_deserialize_endian_uint32_t>:
 800f178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f17c:	4604      	mov	r4, r0
 800f17e:	460e      	mov	r6, r1
 800f180:	2104      	movs	r1, #4
 800f182:	4615      	mov	r5, r2
 800f184:	f000 ff8e 	bl	80100a4 <ucdr_buffer_alignment>
 800f188:	4601      	mov	r1, r0
 800f18a:	4620      	mov	r0, r4
 800f18c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f190:	f000 ffd0 	bl	8010134 <ucdr_advance_buffer>
 800f194:	2104      	movs	r1, #4
 800f196:	4620      	mov	r0, r4
 800f198:	f000 ff24 	bl	800ffe4 <ucdr_check_buffer_available_for>
 800f19c:	2800      	cmp	r0, #0
 800f19e:	d13c      	bne.n	800f21a <ucdr_deserialize_endian_uint32_t+0xa2>
 800f1a0:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800f1a4:	42bb      	cmp	r3, r7
 800f1a6:	d933      	bls.n	800f210 <ucdr_deserialize_endian_uint32_t+0x98>
 800f1a8:	eba3 0907 	sub.w	r9, r3, r7
 800f1ac:	60a3      	str	r3, [r4, #8]
 800f1ae:	6923      	ldr	r3, [r4, #16]
 800f1b0:	4620      	mov	r0, r4
 800f1b2:	f1c9 0a04 	rsb	sl, r9, #4
 800f1b6:	444b      	add	r3, r9
 800f1b8:	4651      	mov	r1, sl
 800f1ba:	6123      	str	r3, [r4, #16]
 800f1bc:	f000 ff1e 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800f1c0:	2800      	cmp	r0, #0
 800f1c2:	d048      	beq.n	800f256 <ucdr_deserialize_endian_uint32_t+0xde>
 800f1c4:	2e01      	cmp	r6, #1
 800f1c6:	d061      	beq.n	800f28c <ucdr_deserialize_endian_uint32_t+0x114>
 800f1c8:	78fb      	ldrb	r3, [r7, #3]
 800f1ca:	702b      	strb	r3, [r5, #0]
 800f1cc:	f1b9 0f00 	cmp.w	r9, #0
 800f1d0:	d050      	beq.n	800f274 <ucdr_deserialize_endian_uint32_t+0xfc>
 800f1d2:	78bb      	ldrb	r3, [r7, #2]
 800f1d4:	f1b9 0f01 	cmp.w	r9, #1
 800f1d8:	706b      	strb	r3, [r5, #1]
 800f1da:	f105 0302 	add.w	r3, r5, #2
 800f1de:	d04d      	beq.n	800f27c <ucdr_deserialize_endian_uint32_t+0x104>
 800f1e0:	787b      	ldrb	r3, [r7, #1]
 800f1e2:	f1b9 0f02 	cmp.w	r9, #2
 800f1e6:	70ab      	strb	r3, [r5, #2]
 800f1e8:	f105 0303 	add.w	r3, r5, #3
 800f1ec:	d04a      	beq.n	800f284 <ucdr_deserialize_endian_uint32_t+0x10c>
 800f1ee:	783b      	ldrb	r3, [r7, #0]
 800f1f0:	70eb      	strb	r3, [r5, #3]
 800f1f2:	6923      	ldr	r3, [r4, #16]
 800f1f4:	2104      	movs	r1, #4
 800f1f6:	68a2      	ldr	r2, [r4, #8]
 800f1f8:	3304      	adds	r3, #4
 800f1fa:	7da0      	ldrb	r0, [r4, #22]
 800f1fc:	4452      	add	r2, sl
 800f1fe:	7561      	strb	r1, [r4, #21]
 800f200:	eba3 0309 	sub.w	r3, r3, r9
 800f204:	f080 0001 	eor.w	r0, r0, #1
 800f208:	60a2      	str	r2, [r4, #8]
 800f20a:	6123      	str	r3, [r4, #16]
 800f20c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f210:	2104      	movs	r1, #4
 800f212:	4620      	mov	r0, r4
 800f214:	f000 fef2 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800f218:	b1a8      	cbz	r0, 800f246 <ucdr_deserialize_endian_uint32_t+0xce>
 800f21a:	2e01      	cmp	r6, #1
 800f21c:	68a3      	ldr	r3, [r4, #8]
 800f21e:	d017      	beq.n	800f250 <ucdr_deserialize_endian_uint32_t+0xd8>
 800f220:	78db      	ldrb	r3, [r3, #3]
 800f222:	702b      	strb	r3, [r5, #0]
 800f224:	68a3      	ldr	r3, [r4, #8]
 800f226:	789b      	ldrb	r3, [r3, #2]
 800f228:	706b      	strb	r3, [r5, #1]
 800f22a:	68a3      	ldr	r3, [r4, #8]
 800f22c:	785b      	ldrb	r3, [r3, #1]
 800f22e:	70ab      	strb	r3, [r5, #2]
 800f230:	68a3      	ldr	r3, [r4, #8]
 800f232:	781b      	ldrb	r3, [r3, #0]
 800f234:	70eb      	strb	r3, [r5, #3]
 800f236:	2104      	movs	r1, #4
 800f238:	68a2      	ldr	r2, [r4, #8]
 800f23a:	6923      	ldr	r3, [r4, #16]
 800f23c:	440a      	add	r2, r1
 800f23e:	7561      	strb	r1, [r4, #21]
 800f240:	440b      	add	r3, r1
 800f242:	60a2      	str	r2, [r4, #8]
 800f244:	6123      	str	r3, [r4, #16]
 800f246:	7da0      	ldrb	r0, [r4, #22]
 800f248:	f080 0001 	eor.w	r0, r0, #1
 800f24c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	602b      	str	r3, [r5, #0]
 800f254:	e7ef      	b.n	800f236 <ucdr_deserialize_endian_uint32_t+0xbe>
 800f256:	68a2      	ldr	r2, [r4, #8]
 800f258:	6923      	ldr	r3, [r4, #16]
 800f25a:	eba2 0209 	sub.w	r2, r2, r9
 800f25e:	7da0      	ldrb	r0, [r4, #22]
 800f260:	eba3 0309 	sub.w	r3, r3, r9
 800f264:	f884 8015 	strb.w	r8, [r4, #21]
 800f268:	f080 0001 	eor.w	r0, r0, #1
 800f26c:	60a2      	str	r2, [r4, #8]
 800f26e:	6123      	str	r3, [r4, #16]
 800f270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f274:	68a3      	ldr	r3, [r4, #8]
 800f276:	789b      	ldrb	r3, [r3, #2]
 800f278:	706b      	strb	r3, [r5, #1]
 800f27a:	1cab      	adds	r3, r5, #2
 800f27c:	68a2      	ldr	r2, [r4, #8]
 800f27e:	7852      	ldrb	r2, [r2, #1]
 800f280:	f803 2b01 	strb.w	r2, [r3], #1
 800f284:	68a2      	ldr	r2, [r4, #8]
 800f286:	7812      	ldrb	r2, [r2, #0]
 800f288:	701a      	strb	r2, [r3, #0]
 800f28a:	e7b2      	b.n	800f1f2 <ucdr_deserialize_endian_uint32_t+0x7a>
 800f28c:	4639      	mov	r1, r7
 800f28e:	464a      	mov	r2, r9
 800f290:	4628      	mov	r0, r5
 800f292:	f00c fc28 	bl	801bae6 <memcpy>
 800f296:	4652      	mov	r2, sl
 800f298:	eb05 0009 	add.w	r0, r5, r9
 800f29c:	68a1      	ldr	r1, [r4, #8]
 800f29e:	f00c fc22 	bl	801bae6 <memcpy>
 800f2a2:	e7a6      	b.n	800f1f2 <ucdr_deserialize_endian_uint32_t+0x7a>

0800f2a4 <ucdr_serialize_uint64_t>:
 800f2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2a8:	4604      	mov	r4, r0
 800f2aa:	b082      	sub	sp, #8
 800f2ac:	2108      	movs	r1, #8
 800f2ae:	e9cd 2300 	strd	r2, r3, [sp]
 800f2b2:	f000 fef7 	bl	80100a4 <ucdr_buffer_alignment>
 800f2b6:	4601      	mov	r1, r0
 800f2b8:	4620      	mov	r0, r4
 800f2ba:	7d67      	ldrb	r7, [r4, #21]
 800f2bc:	f000 ff3a 	bl	8010134 <ucdr_advance_buffer>
 800f2c0:	2108      	movs	r1, #8
 800f2c2:	4620      	mov	r0, r4
 800f2c4:	f000 fe8e 	bl	800ffe4 <ucdr_check_buffer_available_for>
 800f2c8:	2800      	cmp	r0, #0
 800f2ca:	d14e      	bne.n	800f36a <ucdr_serialize_uint64_t+0xc6>
 800f2cc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f2d0:	42ab      	cmp	r3, r5
 800f2d2:	d945      	bls.n	800f360 <ucdr_serialize_uint64_t+0xbc>
 800f2d4:	1b5e      	subs	r6, r3, r5
 800f2d6:	60a3      	str	r3, [r4, #8]
 800f2d8:	6923      	ldr	r3, [r4, #16]
 800f2da:	4620      	mov	r0, r4
 800f2dc:	f1c6 0808 	rsb	r8, r6, #8
 800f2e0:	4433      	add	r3, r6
 800f2e2:	4641      	mov	r1, r8
 800f2e4:	6123      	str	r3, [r4, #16]
 800f2e6:	f000 fe89 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800f2ea:	2800      	cmp	r0, #0
 800f2ec:	d074      	beq.n	800f3d8 <ucdr_serialize_uint64_t+0x134>
 800f2ee:	7d23      	ldrb	r3, [r4, #20]
 800f2f0:	2b01      	cmp	r3, #1
 800f2f2:	f000 809b 	beq.w	800f42c <ucdr_serialize_uint64_t+0x188>
 800f2f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f2fa:	702b      	strb	r3, [r5, #0]
 800f2fc:	2e00      	cmp	r6, #0
 800f2fe:	d078      	beq.n	800f3f2 <ucdr_serialize_uint64_t+0x14e>
 800f300:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f304:	2e01      	cmp	r6, #1
 800f306:	706b      	strb	r3, [r5, #1]
 800f308:	d077      	beq.n	800f3fa <ucdr_serialize_uint64_t+0x156>
 800f30a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f30e:	2e02      	cmp	r6, #2
 800f310:	70ab      	strb	r3, [r5, #2]
 800f312:	d076      	beq.n	800f402 <ucdr_serialize_uint64_t+0x15e>
 800f314:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f318:	2e03      	cmp	r6, #3
 800f31a:	70eb      	strb	r3, [r5, #3]
 800f31c:	d075      	beq.n	800f40a <ucdr_serialize_uint64_t+0x166>
 800f31e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f322:	2e04      	cmp	r6, #4
 800f324:	712b      	strb	r3, [r5, #4]
 800f326:	d074      	beq.n	800f412 <ucdr_serialize_uint64_t+0x16e>
 800f328:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800f32c:	2e05      	cmp	r6, #5
 800f32e:	716b      	strb	r3, [r5, #5]
 800f330:	d073      	beq.n	800f41a <ucdr_serialize_uint64_t+0x176>
 800f332:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800f336:	2e06      	cmp	r6, #6
 800f338:	71ab      	strb	r3, [r5, #6]
 800f33a:	d072      	beq.n	800f422 <ucdr_serialize_uint64_t+0x17e>
 800f33c:	f89d 3000 	ldrb.w	r3, [sp]
 800f340:	71eb      	strb	r3, [r5, #7]
 800f342:	6923      	ldr	r3, [r4, #16]
 800f344:	2108      	movs	r1, #8
 800f346:	68a2      	ldr	r2, [r4, #8]
 800f348:	3308      	adds	r3, #8
 800f34a:	7da0      	ldrb	r0, [r4, #22]
 800f34c:	4442      	add	r2, r8
 800f34e:	7561      	strb	r1, [r4, #21]
 800f350:	1b9e      	subs	r6, r3, r6
 800f352:	f080 0001 	eor.w	r0, r0, #1
 800f356:	60a2      	str	r2, [r4, #8]
 800f358:	6126      	str	r6, [r4, #16]
 800f35a:	b002      	add	sp, #8
 800f35c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f360:	2108      	movs	r1, #8
 800f362:	4620      	mov	r0, r4
 800f364:	f000 fe4a 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800f368:	b350      	cbz	r0, 800f3c0 <ucdr_serialize_uint64_t+0x11c>
 800f36a:	7d23      	ldrb	r3, [r4, #20]
 800f36c:	2b01      	cmp	r3, #1
 800f36e:	d02d      	beq.n	800f3cc <ucdr_serialize_uint64_t+0x128>
 800f370:	68a3      	ldr	r3, [r4, #8]
 800f372:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800f376:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f37a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800f37e:	7018      	strb	r0, [r3, #0]
 800f380:	68a3      	ldr	r3, [r4, #8]
 800f382:	705a      	strb	r2, [r3, #1]
 800f384:	68a3      	ldr	r3, [r4, #8]
 800f386:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f38a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800f38e:	7099      	strb	r1, [r3, #2]
 800f390:	68a3      	ldr	r3, [r4, #8]
 800f392:	70da      	strb	r2, [r3, #3]
 800f394:	68a3      	ldr	r3, [r4, #8]
 800f396:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f39a:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800f39e:	7118      	strb	r0, [r3, #4]
 800f3a0:	68a3      	ldr	r3, [r4, #8]
 800f3a2:	715a      	strb	r2, [r3, #5]
 800f3a4:	68a3      	ldr	r3, [r4, #8]
 800f3a6:	f89d 2000 	ldrb.w	r2, [sp]
 800f3aa:	7199      	strb	r1, [r3, #6]
 800f3ac:	68a3      	ldr	r3, [r4, #8]
 800f3ae:	71da      	strb	r2, [r3, #7]
 800f3b0:	2108      	movs	r1, #8
 800f3b2:	68a2      	ldr	r2, [r4, #8]
 800f3b4:	6923      	ldr	r3, [r4, #16]
 800f3b6:	440a      	add	r2, r1
 800f3b8:	7561      	strb	r1, [r4, #21]
 800f3ba:	440b      	add	r3, r1
 800f3bc:	60a2      	str	r2, [r4, #8]
 800f3be:	6123      	str	r3, [r4, #16]
 800f3c0:	7da0      	ldrb	r0, [r4, #22]
 800f3c2:	f080 0001 	eor.w	r0, r0, #1
 800f3c6:	b002      	add	sp, #8
 800f3c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3cc:	466b      	mov	r3, sp
 800f3ce:	68a2      	ldr	r2, [r4, #8]
 800f3d0:	cb03      	ldmia	r3!, {r0, r1}
 800f3d2:	6010      	str	r0, [r2, #0]
 800f3d4:	6051      	str	r1, [r2, #4]
 800f3d6:	e7eb      	b.n	800f3b0 <ucdr_serialize_uint64_t+0x10c>
 800f3d8:	68a2      	ldr	r2, [r4, #8]
 800f3da:	6923      	ldr	r3, [r4, #16]
 800f3dc:	7da0      	ldrb	r0, [r4, #22]
 800f3de:	1b92      	subs	r2, r2, r6
 800f3e0:	1b9b      	subs	r3, r3, r6
 800f3e2:	7567      	strb	r7, [r4, #21]
 800f3e4:	f080 0001 	eor.w	r0, r0, #1
 800f3e8:	60a2      	str	r2, [r4, #8]
 800f3ea:	6123      	str	r3, [r4, #16]
 800f3ec:	b002      	add	sp, #8
 800f3ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3f2:	68a3      	ldr	r3, [r4, #8]
 800f3f4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f3f8:	701a      	strb	r2, [r3, #0]
 800f3fa:	68a3      	ldr	r3, [r4, #8]
 800f3fc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f400:	701a      	strb	r2, [r3, #0]
 800f402:	68a3      	ldr	r3, [r4, #8]
 800f404:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f408:	701a      	strb	r2, [r3, #0]
 800f40a:	68a3      	ldr	r3, [r4, #8]
 800f40c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f410:	701a      	strb	r2, [r3, #0]
 800f412:	68a3      	ldr	r3, [r4, #8]
 800f414:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f418:	701a      	strb	r2, [r3, #0]
 800f41a:	68a3      	ldr	r3, [r4, #8]
 800f41c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f420:	701a      	strb	r2, [r3, #0]
 800f422:	68a3      	ldr	r3, [r4, #8]
 800f424:	f89d 2000 	ldrb.w	r2, [sp]
 800f428:	701a      	strb	r2, [r3, #0]
 800f42a:	e78a      	b.n	800f342 <ucdr_serialize_uint64_t+0x9e>
 800f42c:	4628      	mov	r0, r5
 800f42e:	466d      	mov	r5, sp
 800f430:	4632      	mov	r2, r6
 800f432:	4629      	mov	r1, r5
 800f434:	f00c fb57 	bl	801bae6 <memcpy>
 800f438:	4642      	mov	r2, r8
 800f43a:	19a9      	adds	r1, r5, r6
 800f43c:	68a0      	ldr	r0, [r4, #8]
 800f43e:	f00c fb52 	bl	801bae6 <memcpy>
 800f442:	e77e      	b.n	800f342 <ucdr_serialize_uint64_t+0x9e>

0800f444 <ucdr_serialize_int16_t>:
 800f444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f448:	460b      	mov	r3, r1
 800f44a:	b082      	sub	sp, #8
 800f44c:	4604      	mov	r4, r0
 800f44e:	2102      	movs	r1, #2
 800f450:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f454:	f000 fe26 	bl	80100a4 <ucdr_buffer_alignment>
 800f458:	4601      	mov	r1, r0
 800f45a:	4620      	mov	r0, r4
 800f45c:	7d67      	ldrb	r7, [r4, #21]
 800f45e:	f000 fe69 	bl	8010134 <ucdr_advance_buffer>
 800f462:	2102      	movs	r1, #2
 800f464:	4620      	mov	r0, r4
 800f466:	f000 fdbd 	bl	800ffe4 <ucdr_check_buffer_available_for>
 800f46a:	bb78      	cbnz	r0, 800f4cc <ucdr_serialize_int16_t+0x88>
 800f46c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f470:	42ab      	cmp	r3, r5
 800f472:	d926      	bls.n	800f4c2 <ucdr_serialize_int16_t+0x7e>
 800f474:	1b5e      	subs	r6, r3, r5
 800f476:	60a3      	str	r3, [r4, #8]
 800f478:	6923      	ldr	r3, [r4, #16]
 800f47a:	4620      	mov	r0, r4
 800f47c:	f1c6 0802 	rsb	r8, r6, #2
 800f480:	4433      	add	r3, r6
 800f482:	4641      	mov	r1, r8
 800f484:	6123      	str	r3, [r4, #16]
 800f486:	f000 fdb9 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800f48a:	2800      	cmp	r0, #0
 800f48c:	d03b      	beq.n	800f506 <ucdr_serialize_int16_t+0xc2>
 800f48e:	7d23      	ldrb	r3, [r4, #20]
 800f490:	2b01      	cmp	r3, #1
 800f492:	d04a      	beq.n	800f52a <ucdr_serialize_int16_t+0xe6>
 800f494:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f498:	702b      	strb	r3, [r5, #0]
 800f49a:	2e00      	cmp	r6, #0
 800f49c:	d040      	beq.n	800f520 <ucdr_serialize_int16_t+0xdc>
 800f49e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f4a2:	706b      	strb	r3, [r5, #1]
 800f4a4:	6923      	ldr	r3, [r4, #16]
 800f4a6:	2102      	movs	r1, #2
 800f4a8:	68a2      	ldr	r2, [r4, #8]
 800f4aa:	3302      	adds	r3, #2
 800f4ac:	7da0      	ldrb	r0, [r4, #22]
 800f4ae:	4442      	add	r2, r8
 800f4b0:	7561      	strb	r1, [r4, #21]
 800f4b2:	1b9e      	subs	r6, r3, r6
 800f4b4:	f080 0001 	eor.w	r0, r0, #1
 800f4b8:	60a2      	str	r2, [r4, #8]
 800f4ba:	6126      	str	r6, [r4, #16]
 800f4bc:	b002      	add	sp, #8
 800f4be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4c2:	2102      	movs	r1, #2
 800f4c4:	4620      	mov	r0, r4
 800f4c6:	f000 fd99 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800f4ca:	b190      	cbz	r0, 800f4f2 <ucdr_serialize_int16_t+0xae>
 800f4cc:	7d23      	ldrb	r3, [r4, #20]
 800f4ce:	2b01      	cmp	r3, #1
 800f4d0:	68a3      	ldr	r3, [r4, #8]
 800f4d2:	d014      	beq.n	800f4fe <ucdr_serialize_int16_t+0xba>
 800f4d4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f4d8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f4dc:	7019      	strb	r1, [r3, #0]
 800f4de:	68a3      	ldr	r3, [r4, #8]
 800f4e0:	705a      	strb	r2, [r3, #1]
 800f4e2:	2102      	movs	r1, #2
 800f4e4:	68a2      	ldr	r2, [r4, #8]
 800f4e6:	6923      	ldr	r3, [r4, #16]
 800f4e8:	440a      	add	r2, r1
 800f4ea:	7561      	strb	r1, [r4, #21]
 800f4ec:	440b      	add	r3, r1
 800f4ee:	60a2      	str	r2, [r4, #8]
 800f4f0:	6123      	str	r3, [r4, #16]
 800f4f2:	7da0      	ldrb	r0, [r4, #22]
 800f4f4:	f080 0001 	eor.w	r0, r0, #1
 800f4f8:	b002      	add	sp, #8
 800f4fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4fe:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f502:	801a      	strh	r2, [r3, #0]
 800f504:	e7ed      	b.n	800f4e2 <ucdr_serialize_int16_t+0x9e>
 800f506:	68a2      	ldr	r2, [r4, #8]
 800f508:	6923      	ldr	r3, [r4, #16]
 800f50a:	7da0      	ldrb	r0, [r4, #22]
 800f50c:	1b92      	subs	r2, r2, r6
 800f50e:	1b9b      	subs	r3, r3, r6
 800f510:	7567      	strb	r7, [r4, #21]
 800f512:	f080 0001 	eor.w	r0, r0, #1
 800f516:	60a2      	str	r2, [r4, #8]
 800f518:	6123      	str	r3, [r4, #16]
 800f51a:	b002      	add	sp, #8
 800f51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f520:	68a3      	ldr	r3, [r4, #8]
 800f522:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f526:	701a      	strb	r2, [r3, #0]
 800f528:	e7bc      	b.n	800f4a4 <ucdr_serialize_int16_t+0x60>
 800f52a:	4628      	mov	r0, r5
 800f52c:	f10d 0506 	add.w	r5, sp, #6
 800f530:	4632      	mov	r2, r6
 800f532:	4629      	mov	r1, r5
 800f534:	f00c fad7 	bl	801bae6 <memcpy>
 800f538:	4642      	mov	r2, r8
 800f53a:	19a9      	adds	r1, r5, r6
 800f53c:	68a0      	ldr	r0, [r4, #8]
 800f53e:	f00c fad2 	bl	801bae6 <memcpy>
 800f542:	e7af      	b.n	800f4a4 <ucdr_serialize_int16_t+0x60>

0800f544 <ucdr_serialize_endian_int16_t>:
 800f544:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f548:	4604      	mov	r4, r0
 800f54a:	b083      	sub	sp, #12
 800f54c:	460d      	mov	r5, r1
 800f54e:	2102      	movs	r1, #2
 800f550:	f8ad 2006 	strh.w	r2, [sp, #6]
 800f554:	f000 fda6 	bl	80100a4 <ucdr_buffer_alignment>
 800f558:	4601      	mov	r1, r0
 800f55a:	4620      	mov	r0, r4
 800f55c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f560:	f000 fde8 	bl	8010134 <ucdr_advance_buffer>
 800f564:	2102      	movs	r1, #2
 800f566:	4620      	mov	r0, r4
 800f568:	f000 fd3c 	bl	800ffe4 <ucdr_check_buffer_available_for>
 800f56c:	bb70      	cbnz	r0, 800f5cc <ucdr_serialize_endian_int16_t+0x88>
 800f56e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f572:	42be      	cmp	r6, r7
 800f574:	d925      	bls.n	800f5c2 <ucdr_serialize_endian_int16_t+0x7e>
 800f576:	6923      	ldr	r3, [r4, #16]
 800f578:	4620      	mov	r0, r4
 800f57a:	60a6      	str	r6, [r4, #8]
 800f57c:	1bf6      	subs	r6, r6, r7
 800f57e:	4433      	add	r3, r6
 800f580:	f1c6 0902 	rsb	r9, r6, #2
 800f584:	6123      	str	r3, [r4, #16]
 800f586:	4649      	mov	r1, r9
 800f588:	f000 fd38 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800f58c:	2800      	cmp	r0, #0
 800f58e:	d039      	beq.n	800f604 <ucdr_serialize_endian_int16_t+0xc0>
 800f590:	2d01      	cmp	r5, #1
 800f592:	d04a      	beq.n	800f62a <ucdr_serialize_endian_int16_t+0xe6>
 800f594:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f598:	703b      	strb	r3, [r7, #0]
 800f59a:	2e00      	cmp	r6, #0
 800f59c:	d040      	beq.n	800f620 <ucdr_serialize_endian_int16_t+0xdc>
 800f59e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f5a2:	707b      	strb	r3, [r7, #1]
 800f5a4:	6923      	ldr	r3, [r4, #16]
 800f5a6:	2102      	movs	r1, #2
 800f5a8:	68a2      	ldr	r2, [r4, #8]
 800f5aa:	7da0      	ldrb	r0, [r4, #22]
 800f5ac:	3302      	adds	r3, #2
 800f5ae:	444a      	add	r2, r9
 800f5b0:	7561      	strb	r1, [r4, #21]
 800f5b2:	1b9b      	subs	r3, r3, r6
 800f5b4:	f080 0001 	eor.w	r0, r0, #1
 800f5b8:	60a2      	str	r2, [r4, #8]
 800f5ba:	6123      	str	r3, [r4, #16]
 800f5bc:	b003      	add	sp, #12
 800f5be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f5c2:	2102      	movs	r1, #2
 800f5c4:	4620      	mov	r0, r4
 800f5c6:	f000 fd19 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800f5ca:	b188      	cbz	r0, 800f5f0 <ucdr_serialize_endian_int16_t+0xac>
 800f5cc:	2d01      	cmp	r5, #1
 800f5ce:	68a3      	ldr	r3, [r4, #8]
 800f5d0:	d014      	beq.n	800f5fc <ucdr_serialize_endian_int16_t+0xb8>
 800f5d2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f5d6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f5da:	7019      	strb	r1, [r3, #0]
 800f5dc:	68a3      	ldr	r3, [r4, #8]
 800f5de:	705a      	strb	r2, [r3, #1]
 800f5e0:	2102      	movs	r1, #2
 800f5e2:	68a2      	ldr	r2, [r4, #8]
 800f5e4:	6923      	ldr	r3, [r4, #16]
 800f5e6:	440a      	add	r2, r1
 800f5e8:	7561      	strb	r1, [r4, #21]
 800f5ea:	440b      	add	r3, r1
 800f5ec:	60a2      	str	r2, [r4, #8]
 800f5ee:	6123      	str	r3, [r4, #16]
 800f5f0:	7da0      	ldrb	r0, [r4, #22]
 800f5f2:	f080 0001 	eor.w	r0, r0, #1
 800f5f6:	b003      	add	sp, #12
 800f5f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f5fc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f600:	801a      	strh	r2, [r3, #0]
 800f602:	e7ed      	b.n	800f5e0 <ucdr_serialize_endian_int16_t+0x9c>
 800f604:	68a2      	ldr	r2, [r4, #8]
 800f606:	6923      	ldr	r3, [r4, #16]
 800f608:	7da0      	ldrb	r0, [r4, #22]
 800f60a:	1b92      	subs	r2, r2, r6
 800f60c:	1b9b      	subs	r3, r3, r6
 800f60e:	f884 8015 	strb.w	r8, [r4, #21]
 800f612:	f080 0001 	eor.w	r0, r0, #1
 800f616:	60a2      	str	r2, [r4, #8]
 800f618:	6123      	str	r3, [r4, #16]
 800f61a:	b003      	add	sp, #12
 800f61c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f620:	68a3      	ldr	r3, [r4, #8]
 800f622:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f626:	701a      	strb	r2, [r3, #0]
 800f628:	e7bc      	b.n	800f5a4 <ucdr_serialize_endian_int16_t+0x60>
 800f62a:	f10d 0506 	add.w	r5, sp, #6
 800f62e:	4632      	mov	r2, r6
 800f630:	4638      	mov	r0, r7
 800f632:	4629      	mov	r1, r5
 800f634:	f00c fa57 	bl	801bae6 <memcpy>
 800f638:	464a      	mov	r2, r9
 800f63a:	19a9      	adds	r1, r5, r6
 800f63c:	68a0      	ldr	r0, [r4, #8]
 800f63e:	f00c fa52 	bl	801bae6 <memcpy>
 800f642:	e7af      	b.n	800f5a4 <ucdr_serialize_endian_int16_t+0x60>

0800f644 <ucdr_deserialize_int16_t>:
 800f644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f648:	4604      	mov	r4, r0
 800f64a:	460d      	mov	r5, r1
 800f64c:	2102      	movs	r1, #2
 800f64e:	f000 fd29 	bl	80100a4 <ucdr_buffer_alignment>
 800f652:	4601      	mov	r1, r0
 800f654:	4620      	mov	r0, r4
 800f656:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f65a:	f000 fd6b 	bl	8010134 <ucdr_advance_buffer>
 800f65e:	2102      	movs	r1, #2
 800f660:	4620      	mov	r0, r4
 800f662:	f000 fcbf 	bl	800ffe4 <ucdr_check_buffer_available_for>
 800f666:	bb60      	cbnz	r0, 800f6c2 <ucdr_deserialize_int16_t+0x7e>
 800f668:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f66c:	42be      	cmp	r6, r7
 800f66e:	d923      	bls.n	800f6b8 <ucdr_deserialize_int16_t+0x74>
 800f670:	6923      	ldr	r3, [r4, #16]
 800f672:	4620      	mov	r0, r4
 800f674:	60a6      	str	r6, [r4, #8]
 800f676:	1bf6      	subs	r6, r6, r7
 800f678:	4433      	add	r3, r6
 800f67a:	f1c6 0902 	rsb	r9, r6, #2
 800f67e:	6123      	str	r3, [r4, #16]
 800f680:	4649      	mov	r1, r9
 800f682:	f000 fcbb 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800f686:	2800      	cmp	r0, #0
 800f688:	d034      	beq.n	800f6f4 <ucdr_deserialize_int16_t+0xb0>
 800f68a:	7d23      	ldrb	r3, [r4, #20]
 800f68c:	2b01      	cmp	r3, #1
 800f68e:	d042      	beq.n	800f716 <ucdr_deserialize_int16_t+0xd2>
 800f690:	787b      	ldrb	r3, [r7, #1]
 800f692:	702b      	strb	r3, [r5, #0]
 800f694:	2e00      	cmp	r6, #0
 800f696:	d03a      	beq.n	800f70e <ucdr_deserialize_int16_t+0xca>
 800f698:	783b      	ldrb	r3, [r7, #0]
 800f69a:	706b      	strb	r3, [r5, #1]
 800f69c:	6923      	ldr	r3, [r4, #16]
 800f69e:	2102      	movs	r1, #2
 800f6a0:	68a2      	ldr	r2, [r4, #8]
 800f6a2:	3302      	adds	r3, #2
 800f6a4:	7da0      	ldrb	r0, [r4, #22]
 800f6a6:	444a      	add	r2, r9
 800f6a8:	7561      	strb	r1, [r4, #21]
 800f6aa:	1b9b      	subs	r3, r3, r6
 800f6ac:	f080 0001 	eor.w	r0, r0, #1
 800f6b0:	60a2      	str	r2, [r4, #8]
 800f6b2:	6123      	str	r3, [r4, #16]
 800f6b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6b8:	2102      	movs	r1, #2
 800f6ba:	4620      	mov	r0, r4
 800f6bc:	f000 fc9e 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800f6c0:	b180      	cbz	r0, 800f6e4 <ucdr_deserialize_int16_t+0xa0>
 800f6c2:	7d23      	ldrb	r3, [r4, #20]
 800f6c4:	2b01      	cmp	r3, #1
 800f6c6:	68a3      	ldr	r3, [r4, #8]
 800f6c8:	d011      	beq.n	800f6ee <ucdr_deserialize_int16_t+0xaa>
 800f6ca:	785b      	ldrb	r3, [r3, #1]
 800f6cc:	702b      	strb	r3, [r5, #0]
 800f6ce:	68a3      	ldr	r3, [r4, #8]
 800f6d0:	781b      	ldrb	r3, [r3, #0]
 800f6d2:	706b      	strb	r3, [r5, #1]
 800f6d4:	2102      	movs	r1, #2
 800f6d6:	68a2      	ldr	r2, [r4, #8]
 800f6d8:	6923      	ldr	r3, [r4, #16]
 800f6da:	440a      	add	r2, r1
 800f6dc:	7561      	strb	r1, [r4, #21]
 800f6de:	440b      	add	r3, r1
 800f6e0:	60a2      	str	r2, [r4, #8]
 800f6e2:	6123      	str	r3, [r4, #16]
 800f6e4:	7da0      	ldrb	r0, [r4, #22]
 800f6e6:	f080 0001 	eor.w	r0, r0, #1
 800f6ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6ee:	881b      	ldrh	r3, [r3, #0]
 800f6f0:	802b      	strh	r3, [r5, #0]
 800f6f2:	e7ef      	b.n	800f6d4 <ucdr_deserialize_int16_t+0x90>
 800f6f4:	68a2      	ldr	r2, [r4, #8]
 800f6f6:	6923      	ldr	r3, [r4, #16]
 800f6f8:	1b92      	subs	r2, r2, r6
 800f6fa:	7da0      	ldrb	r0, [r4, #22]
 800f6fc:	1b9b      	subs	r3, r3, r6
 800f6fe:	f884 8015 	strb.w	r8, [r4, #21]
 800f702:	f080 0001 	eor.w	r0, r0, #1
 800f706:	60a2      	str	r2, [r4, #8]
 800f708:	6123      	str	r3, [r4, #16]
 800f70a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f70e:	68a3      	ldr	r3, [r4, #8]
 800f710:	781b      	ldrb	r3, [r3, #0]
 800f712:	706b      	strb	r3, [r5, #1]
 800f714:	e7c2      	b.n	800f69c <ucdr_deserialize_int16_t+0x58>
 800f716:	4639      	mov	r1, r7
 800f718:	4632      	mov	r2, r6
 800f71a:	4628      	mov	r0, r5
 800f71c:	f00c f9e3 	bl	801bae6 <memcpy>
 800f720:	464a      	mov	r2, r9
 800f722:	19a8      	adds	r0, r5, r6
 800f724:	68a1      	ldr	r1, [r4, #8]
 800f726:	f00c f9de 	bl	801bae6 <memcpy>
 800f72a:	e7b7      	b.n	800f69c <ucdr_deserialize_int16_t+0x58>

0800f72c <ucdr_deserialize_endian_int16_t>:
 800f72c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f730:	4604      	mov	r4, r0
 800f732:	460e      	mov	r6, r1
 800f734:	2102      	movs	r1, #2
 800f736:	4615      	mov	r5, r2
 800f738:	f000 fcb4 	bl	80100a4 <ucdr_buffer_alignment>
 800f73c:	4601      	mov	r1, r0
 800f73e:	4620      	mov	r0, r4
 800f740:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f744:	f000 fcf6 	bl	8010134 <ucdr_advance_buffer>
 800f748:	2102      	movs	r1, #2
 800f74a:	4620      	mov	r0, r4
 800f74c:	f000 fc4a 	bl	800ffe4 <ucdr_check_buffer_available_for>
 800f750:	bb70      	cbnz	r0, 800f7b0 <ucdr_deserialize_endian_int16_t+0x84>
 800f752:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 800f756:	454f      	cmp	r7, r9
 800f758:	d925      	bls.n	800f7a6 <ucdr_deserialize_endian_int16_t+0x7a>
 800f75a:	6923      	ldr	r3, [r4, #16]
 800f75c:	4620      	mov	r0, r4
 800f75e:	60a7      	str	r7, [r4, #8]
 800f760:	eba7 0709 	sub.w	r7, r7, r9
 800f764:	443b      	add	r3, r7
 800f766:	f1c7 0a02 	rsb	sl, r7, #2
 800f76a:	6123      	str	r3, [r4, #16]
 800f76c:	4651      	mov	r1, sl
 800f76e:	f000 fc45 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800f772:	2800      	cmp	r0, #0
 800f774:	d034      	beq.n	800f7e0 <ucdr_deserialize_endian_int16_t+0xb4>
 800f776:	2e01      	cmp	r6, #1
 800f778:	d043      	beq.n	800f802 <ucdr_deserialize_endian_int16_t+0xd6>
 800f77a:	f899 3001 	ldrb.w	r3, [r9, #1]
 800f77e:	702b      	strb	r3, [r5, #0]
 800f780:	2f00      	cmp	r7, #0
 800f782:	d03a      	beq.n	800f7fa <ucdr_deserialize_endian_int16_t+0xce>
 800f784:	f899 3000 	ldrb.w	r3, [r9]
 800f788:	706b      	strb	r3, [r5, #1]
 800f78a:	6923      	ldr	r3, [r4, #16]
 800f78c:	2102      	movs	r1, #2
 800f78e:	68a2      	ldr	r2, [r4, #8]
 800f790:	3302      	adds	r3, #2
 800f792:	7da0      	ldrb	r0, [r4, #22]
 800f794:	4452      	add	r2, sl
 800f796:	7561      	strb	r1, [r4, #21]
 800f798:	1bdb      	subs	r3, r3, r7
 800f79a:	f080 0001 	eor.w	r0, r0, #1
 800f79e:	60a2      	str	r2, [r4, #8]
 800f7a0:	6123      	str	r3, [r4, #16]
 800f7a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7a6:	2102      	movs	r1, #2
 800f7a8:	4620      	mov	r0, r4
 800f7aa:	f000 fc27 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800f7ae:	b178      	cbz	r0, 800f7d0 <ucdr_deserialize_endian_int16_t+0xa4>
 800f7b0:	2e01      	cmp	r6, #1
 800f7b2:	68a3      	ldr	r3, [r4, #8]
 800f7b4:	d011      	beq.n	800f7da <ucdr_deserialize_endian_int16_t+0xae>
 800f7b6:	785b      	ldrb	r3, [r3, #1]
 800f7b8:	702b      	strb	r3, [r5, #0]
 800f7ba:	68a3      	ldr	r3, [r4, #8]
 800f7bc:	781b      	ldrb	r3, [r3, #0]
 800f7be:	706b      	strb	r3, [r5, #1]
 800f7c0:	2102      	movs	r1, #2
 800f7c2:	68a2      	ldr	r2, [r4, #8]
 800f7c4:	6923      	ldr	r3, [r4, #16]
 800f7c6:	440a      	add	r2, r1
 800f7c8:	7561      	strb	r1, [r4, #21]
 800f7ca:	440b      	add	r3, r1
 800f7cc:	60a2      	str	r2, [r4, #8]
 800f7ce:	6123      	str	r3, [r4, #16]
 800f7d0:	7da0      	ldrb	r0, [r4, #22]
 800f7d2:	f080 0001 	eor.w	r0, r0, #1
 800f7d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7da:	881b      	ldrh	r3, [r3, #0]
 800f7dc:	802b      	strh	r3, [r5, #0]
 800f7de:	e7ef      	b.n	800f7c0 <ucdr_deserialize_endian_int16_t+0x94>
 800f7e0:	68a2      	ldr	r2, [r4, #8]
 800f7e2:	6923      	ldr	r3, [r4, #16]
 800f7e4:	1bd2      	subs	r2, r2, r7
 800f7e6:	7da0      	ldrb	r0, [r4, #22]
 800f7e8:	1bdb      	subs	r3, r3, r7
 800f7ea:	f884 8015 	strb.w	r8, [r4, #21]
 800f7ee:	f080 0001 	eor.w	r0, r0, #1
 800f7f2:	60a2      	str	r2, [r4, #8]
 800f7f4:	6123      	str	r3, [r4, #16]
 800f7f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7fa:	68a3      	ldr	r3, [r4, #8]
 800f7fc:	781b      	ldrb	r3, [r3, #0]
 800f7fe:	706b      	strb	r3, [r5, #1]
 800f800:	e7c3      	b.n	800f78a <ucdr_deserialize_endian_int16_t+0x5e>
 800f802:	4649      	mov	r1, r9
 800f804:	463a      	mov	r2, r7
 800f806:	4628      	mov	r0, r5
 800f808:	f00c f96d 	bl	801bae6 <memcpy>
 800f80c:	4652      	mov	r2, sl
 800f80e:	19e8      	adds	r0, r5, r7
 800f810:	68a1      	ldr	r1, [r4, #8]
 800f812:	f00c f968 	bl	801bae6 <memcpy>
 800f816:	e7b8      	b.n	800f78a <ucdr_deserialize_endian_int16_t+0x5e>

0800f818 <ucdr_serialize_int32_t>:
 800f818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f81c:	b082      	sub	sp, #8
 800f81e:	4604      	mov	r4, r0
 800f820:	9101      	str	r1, [sp, #4]
 800f822:	2104      	movs	r1, #4
 800f824:	f000 fc3e 	bl	80100a4 <ucdr_buffer_alignment>
 800f828:	4601      	mov	r1, r0
 800f82a:	4620      	mov	r0, r4
 800f82c:	7d67      	ldrb	r7, [r4, #21]
 800f82e:	f000 fc81 	bl	8010134 <ucdr_advance_buffer>
 800f832:	2104      	movs	r1, #4
 800f834:	4620      	mov	r0, r4
 800f836:	f000 fbd5 	bl	800ffe4 <ucdr_check_buffer_available_for>
 800f83a:	2800      	cmp	r0, #0
 800f83c:	d139      	bne.n	800f8b2 <ucdr_serialize_int32_t+0x9a>
 800f83e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f842:	42ab      	cmp	r3, r5
 800f844:	d930      	bls.n	800f8a8 <ucdr_serialize_int32_t+0x90>
 800f846:	1b5e      	subs	r6, r3, r5
 800f848:	60a3      	str	r3, [r4, #8]
 800f84a:	6923      	ldr	r3, [r4, #16]
 800f84c:	4620      	mov	r0, r4
 800f84e:	f1c6 0804 	rsb	r8, r6, #4
 800f852:	4433      	add	r3, r6
 800f854:	4641      	mov	r1, r8
 800f856:	6123      	str	r3, [r4, #16]
 800f858:	f000 fbd0 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800f85c:	2800      	cmp	r0, #0
 800f85e:	d04c      	beq.n	800f8fa <ucdr_serialize_int32_t+0xe2>
 800f860:	7d23      	ldrb	r3, [r4, #20]
 800f862:	2b01      	cmp	r3, #1
 800f864:	d063      	beq.n	800f92e <ucdr_serialize_int32_t+0x116>
 800f866:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f86a:	702b      	strb	r3, [r5, #0]
 800f86c:	2e00      	cmp	r6, #0
 800f86e:	d051      	beq.n	800f914 <ucdr_serialize_int32_t+0xfc>
 800f870:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f874:	2e01      	cmp	r6, #1
 800f876:	706b      	strb	r3, [r5, #1]
 800f878:	d050      	beq.n	800f91c <ucdr_serialize_int32_t+0x104>
 800f87a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f87e:	2e02      	cmp	r6, #2
 800f880:	70ab      	strb	r3, [r5, #2]
 800f882:	d04f      	beq.n	800f924 <ucdr_serialize_int32_t+0x10c>
 800f884:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f888:	70eb      	strb	r3, [r5, #3]
 800f88a:	6923      	ldr	r3, [r4, #16]
 800f88c:	2104      	movs	r1, #4
 800f88e:	68a2      	ldr	r2, [r4, #8]
 800f890:	3304      	adds	r3, #4
 800f892:	7da0      	ldrb	r0, [r4, #22]
 800f894:	4442      	add	r2, r8
 800f896:	7561      	strb	r1, [r4, #21]
 800f898:	1b9e      	subs	r6, r3, r6
 800f89a:	f080 0001 	eor.w	r0, r0, #1
 800f89e:	60a2      	str	r2, [r4, #8]
 800f8a0:	6126      	str	r6, [r4, #16]
 800f8a2:	b002      	add	sp, #8
 800f8a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8a8:	2104      	movs	r1, #4
 800f8aa:	4620      	mov	r0, r4
 800f8ac:	f000 fba6 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800f8b0:	b1d0      	cbz	r0, 800f8e8 <ucdr_serialize_int32_t+0xd0>
 800f8b2:	7d23      	ldrb	r3, [r4, #20]
 800f8b4:	2b01      	cmp	r3, #1
 800f8b6:	68a3      	ldr	r3, [r4, #8]
 800f8b8:	d01c      	beq.n	800f8f4 <ucdr_serialize_int32_t+0xdc>
 800f8ba:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800f8be:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f8c2:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800f8c6:	7018      	strb	r0, [r3, #0]
 800f8c8:	68a3      	ldr	r3, [r4, #8]
 800f8ca:	705a      	strb	r2, [r3, #1]
 800f8cc:	68a3      	ldr	r3, [r4, #8]
 800f8ce:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f8d2:	7099      	strb	r1, [r3, #2]
 800f8d4:	68a3      	ldr	r3, [r4, #8]
 800f8d6:	70da      	strb	r2, [r3, #3]
 800f8d8:	2104      	movs	r1, #4
 800f8da:	68a2      	ldr	r2, [r4, #8]
 800f8dc:	6923      	ldr	r3, [r4, #16]
 800f8de:	440a      	add	r2, r1
 800f8e0:	7561      	strb	r1, [r4, #21]
 800f8e2:	440b      	add	r3, r1
 800f8e4:	60a2      	str	r2, [r4, #8]
 800f8e6:	6123      	str	r3, [r4, #16]
 800f8e8:	7da0      	ldrb	r0, [r4, #22]
 800f8ea:	f080 0001 	eor.w	r0, r0, #1
 800f8ee:	b002      	add	sp, #8
 800f8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8f4:	9a01      	ldr	r2, [sp, #4]
 800f8f6:	601a      	str	r2, [r3, #0]
 800f8f8:	e7ee      	b.n	800f8d8 <ucdr_serialize_int32_t+0xc0>
 800f8fa:	68a2      	ldr	r2, [r4, #8]
 800f8fc:	6923      	ldr	r3, [r4, #16]
 800f8fe:	7da0      	ldrb	r0, [r4, #22]
 800f900:	1b92      	subs	r2, r2, r6
 800f902:	1b9b      	subs	r3, r3, r6
 800f904:	7567      	strb	r7, [r4, #21]
 800f906:	f080 0001 	eor.w	r0, r0, #1
 800f90a:	60a2      	str	r2, [r4, #8]
 800f90c:	6123      	str	r3, [r4, #16]
 800f90e:	b002      	add	sp, #8
 800f910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f914:	68a3      	ldr	r3, [r4, #8]
 800f916:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f91a:	701a      	strb	r2, [r3, #0]
 800f91c:	68a3      	ldr	r3, [r4, #8]
 800f91e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f922:	701a      	strb	r2, [r3, #0]
 800f924:	68a3      	ldr	r3, [r4, #8]
 800f926:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f92a:	701a      	strb	r2, [r3, #0]
 800f92c:	e7ad      	b.n	800f88a <ucdr_serialize_int32_t+0x72>
 800f92e:	4628      	mov	r0, r5
 800f930:	ad01      	add	r5, sp, #4
 800f932:	4632      	mov	r2, r6
 800f934:	4629      	mov	r1, r5
 800f936:	f00c f8d6 	bl	801bae6 <memcpy>
 800f93a:	4642      	mov	r2, r8
 800f93c:	19a9      	adds	r1, r5, r6
 800f93e:	68a0      	ldr	r0, [r4, #8]
 800f940:	f00c f8d1 	bl	801bae6 <memcpy>
 800f944:	e7a1      	b.n	800f88a <ucdr_serialize_int32_t+0x72>
 800f946:	bf00      	nop

0800f948 <ucdr_deserialize_int32_t>:
 800f948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f94c:	4604      	mov	r4, r0
 800f94e:	460d      	mov	r5, r1
 800f950:	2104      	movs	r1, #4
 800f952:	f000 fba7 	bl	80100a4 <ucdr_buffer_alignment>
 800f956:	4601      	mov	r1, r0
 800f958:	4620      	mov	r0, r4
 800f95a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f95e:	f000 fbe9 	bl	8010134 <ucdr_advance_buffer>
 800f962:	2104      	movs	r1, #4
 800f964:	4620      	mov	r0, r4
 800f966:	f000 fb3d 	bl	800ffe4 <ucdr_check_buffer_available_for>
 800f96a:	2800      	cmp	r0, #0
 800f96c:	d138      	bne.n	800f9e0 <ucdr_deserialize_int32_t+0x98>
 800f96e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f972:	42b7      	cmp	r7, r6
 800f974:	d92f      	bls.n	800f9d6 <ucdr_deserialize_int32_t+0x8e>
 800f976:	6923      	ldr	r3, [r4, #16]
 800f978:	4620      	mov	r0, r4
 800f97a:	60a7      	str	r7, [r4, #8]
 800f97c:	1bbf      	subs	r7, r7, r6
 800f97e:	443b      	add	r3, r7
 800f980:	f1c7 0904 	rsb	r9, r7, #4
 800f984:	6123      	str	r3, [r4, #16]
 800f986:	4649      	mov	r1, r9
 800f988:	f000 fb38 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800f98c:	2800      	cmp	r0, #0
 800f98e:	d046      	beq.n	800fa1e <ucdr_deserialize_int32_t+0xd6>
 800f990:	7d23      	ldrb	r3, [r4, #20]
 800f992:	2b01      	cmp	r3, #1
 800f994:	d05c      	beq.n	800fa50 <ucdr_deserialize_int32_t+0x108>
 800f996:	78f3      	ldrb	r3, [r6, #3]
 800f998:	702b      	strb	r3, [r5, #0]
 800f99a:	2f00      	cmp	r7, #0
 800f99c:	d04c      	beq.n	800fa38 <ucdr_deserialize_int32_t+0xf0>
 800f99e:	78b3      	ldrb	r3, [r6, #2]
 800f9a0:	2f01      	cmp	r7, #1
 800f9a2:	706b      	strb	r3, [r5, #1]
 800f9a4:	f105 0302 	add.w	r3, r5, #2
 800f9a8:	d04a      	beq.n	800fa40 <ucdr_deserialize_int32_t+0xf8>
 800f9aa:	7873      	ldrb	r3, [r6, #1]
 800f9ac:	2f02      	cmp	r7, #2
 800f9ae:	70ab      	strb	r3, [r5, #2]
 800f9b0:	f105 0303 	add.w	r3, r5, #3
 800f9b4:	d048      	beq.n	800fa48 <ucdr_deserialize_int32_t+0x100>
 800f9b6:	7833      	ldrb	r3, [r6, #0]
 800f9b8:	70eb      	strb	r3, [r5, #3]
 800f9ba:	6923      	ldr	r3, [r4, #16]
 800f9bc:	2104      	movs	r1, #4
 800f9be:	68a2      	ldr	r2, [r4, #8]
 800f9c0:	3304      	adds	r3, #4
 800f9c2:	7da0      	ldrb	r0, [r4, #22]
 800f9c4:	444a      	add	r2, r9
 800f9c6:	7561      	strb	r1, [r4, #21]
 800f9c8:	1bdb      	subs	r3, r3, r7
 800f9ca:	f080 0001 	eor.w	r0, r0, #1
 800f9ce:	60a2      	str	r2, [r4, #8]
 800f9d0:	6123      	str	r3, [r4, #16]
 800f9d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9d6:	2104      	movs	r1, #4
 800f9d8:	4620      	mov	r0, r4
 800f9da:	f000 fb0f 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800f9de:	b1b0      	cbz	r0, 800fa0e <ucdr_deserialize_int32_t+0xc6>
 800f9e0:	7d23      	ldrb	r3, [r4, #20]
 800f9e2:	2b01      	cmp	r3, #1
 800f9e4:	68a3      	ldr	r3, [r4, #8]
 800f9e6:	d017      	beq.n	800fa18 <ucdr_deserialize_int32_t+0xd0>
 800f9e8:	78db      	ldrb	r3, [r3, #3]
 800f9ea:	702b      	strb	r3, [r5, #0]
 800f9ec:	68a3      	ldr	r3, [r4, #8]
 800f9ee:	789b      	ldrb	r3, [r3, #2]
 800f9f0:	706b      	strb	r3, [r5, #1]
 800f9f2:	68a3      	ldr	r3, [r4, #8]
 800f9f4:	785b      	ldrb	r3, [r3, #1]
 800f9f6:	70ab      	strb	r3, [r5, #2]
 800f9f8:	68a3      	ldr	r3, [r4, #8]
 800f9fa:	781b      	ldrb	r3, [r3, #0]
 800f9fc:	70eb      	strb	r3, [r5, #3]
 800f9fe:	2104      	movs	r1, #4
 800fa00:	68a2      	ldr	r2, [r4, #8]
 800fa02:	6923      	ldr	r3, [r4, #16]
 800fa04:	440a      	add	r2, r1
 800fa06:	7561      	strb	r1, [r4, #21]
 800fa08:	440b      	add	r3, r1
 800fa0a:	60a2      	str	r2, [r4, #8]
 800fa0c:	6123      	str	r3, [r4, #16]
 800fa0e:	7da0      	ldrb	r0, [r4, #22]
 800fa10:	f080 0001 	eor.w	r0, r0, #1
 800fa14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	602b      	str	r3, [r5, #0]
 800fa1c:	e7ef      	b.n	800f9fe <ucdr_deserialize_int32_t+0xb6>
 800fa1e:	68a2      	ldr	r2, [r4, #8]
 800fa20:	6923      	ldr	r3, [r4, #16]
 800fa22:	1bd2      	subs	r2, r2, r7
 800fa24:	7da0      	ldrb	r0, [r4, #22]
 800fa26:	1bdb      	subs	r3, r3, r7
 800fa28:	f884 8015 	strb.w	r8, [r4, #21]
 800fa2c:	f080 0001 	eor.w	r0, r0, #1
 800fa30:	60a2      	str	r2, [r4, #8]
 800fa32:	6123      	str	r3, [r4, #16]
 800fa34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa38:	68a3      	ldr	r3, [r4, #8]
 800fa3a:	789b      	ldrb	r3, [r3, #2]
 800fa3c:	706b      	strb	r3, [r5, #1]
 800fa3e:	1cab      	adds	r3, r5, #2
 800fa40:	68a2      	ldr	r2, [r4, #8]
 800fa42:	7852      	ldrb	r2, [r2, #1]
 800fa44:	f803 2b01 	strb.w	r2, [r3], #1
 800fa48:	68a2      	ldr	r2, [r4, #8]
 800fa4a:	7812      	ldrb	r2, [r2, #0]
 800fa4c:	701a      	strb	r2, [r3, #0]
 800fa4e:	e7b4      	b.n	800f9ba <ucdr_deserialize_int32_t+0x72>
 800fa50:	4631      	mov	r1, r6
 800fa52:	463a      	mov	r2, r7
 800fa54:	4628      	mov	r0, r5
 800fa56:	f00c f846 	bl	801bae6 <memcpy>
 800fa5a:	464a      	mov	r2, r9
 800fa5c:	19e8      	adds	r0, r5, r7
 800fa5e:	68a1      	ldr	r1, [r4, #8]
 800fa60:	f00c f841 	bl	801bae6 <memcpy>
 800fa64:	e7a9      	b.n	800f9ba <ucdr_deserialize_int32_t+0x72>
 800fa66:	bf00      	nop

0800fa68 <ucdr_serialize_int64_t>:
 800fa68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa6c:	4604      	mov	r4, r0
 800fa6e:	b082      	sub	sp, #8
 800fa70:	2108      	movs	r1, #8
 800fa72:	e9cd 2300 	strd	r2, r3, [sp]
 800fa76:	f000 fb15 	bl	80100a4 <ucdr_buffer_alignment>
 800fa7a:	4601      	mov	r1, r0
 800fa7c:	4620      	mov	r0, r4
 800fa7e:	7d67      	ldrb	r7, [r4, #21]
 800fa80:	f000 fb58 	bl	8010134 <ucdr_advance_buffer>
 800fa84:	2108      	movs	r1, #8
 800fa86:	4620      	mov	r0, r4
 800fa88:	f000 faac 	bl	800ffe4 <ucdr_check_buffer_available_for>
 800fa8c:	2800      	cmp	r0, #0
 800fa8e:	d14e      	bne.n	800fb2e <ucdr_serialize_int64_t+0xc6>
 800fa90:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800fa94:	42ab      	cmp	r3, r5
 800fa96:	d945      	bls.n	800fb24 <ucdr_serialize_int64_t+0xbc>
 800fa98:	1b5e      	subs	r6, r3, r5
 800fa9a:	60a3      	str	r3, [r4, #8]
 800fa9c:	6923      	ldr	r3, [r4, #16]
 800fa9e:	4620      	mov	r0, r4
 800faa0:	f1c6 0808 	rsb	r8, r6, #8
 800faa4:	4433      	add	r3, r6
 800faa6:	4641      	mov	r1, r8
 800faa8:	6123      	str	r3, [r4, #16]
 800faaa:	f000 faa7 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800faae:	2800      	cmp	r0, #0
 800fab0:	d074      	beq.n	800fb9c <ucdr_serialize_int64_t+0x134>
 800fab2:	7d23      	ldrb	r3, [r4, #20]
 800fab4:	2b01      	cmp	r3, #1
 800fab6:	f000 809b 	beq.w	800fbf0 <ucdr_serialize_int64_t+0x188>
 800faba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fabe:	702b      	strb	r3, [r5, #0]
 800fac0:	2e00      	cmp	r6, #0
 800fac2:	d078      	beq.n	800fbb6 <ucdr_serialize_int64_t+0x14e>
 800fac4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fac8:	2e01      	cmp	r6, #1
 800faca:	706b      	strb	r3, [r5, #1]
 800facc:	d077      	beq.n	800fbbe <ucdr_serialize_int64_t+0x156>
 800face:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fad2:	2e02      	cmp	r6, #2
 800fad4:	70ab      	strb	r3, [r5, #2]
 800fad6:	d076      	beq.n	800fbc6 <ucdr_serialize_int64_t+0x15e>
 800fad8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fadc:	2e03      	cmp	r6, #3
 800fade:	70eb      	strb	r3, [r5, #3]
 800fae0:	d075      	beq.n	800fbce <ucdr_serialize_int64_t+0x166>
 800fae2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800fae6:	2e04      	cmp	r6, #4
 800fae8:	712b      	strb	r3, [r5, #4]
 800faea:	d074      	beq.n	800fbd6 <ucdr_serialize_int64_t+0x16e>
 800faec:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800faf0:	2e05      	cmp	r6, #5
 800faf2:	716b      	strb	r3, [r5, #5]
 800faf4:	d073      	beq.n	800fbde <ucdr_serialize_int64_t+0x176>
 800faf6:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800fafa:	2e06      	cmp	r6, #6
 800fafc:	71ab      	strb	r3, [r5, #6]
 800fafe:	d072      	beq.n	800fbe6 <ucdr_serialize_int64_t+0x17e>
 800fb00:	f89d 3000 	ldrb.w	r3, [sp]
 800fb04:	71eb      	strb	r3, [r5, #7]
 800fb06:	6923      	ldr	r3, [r4, #16]
 800fb08:	2108      	movs	r1, #8
 800fb0a:	68a2      	ldr	r2, [r4, #8]
 800fb0c:	3308      	adds	r3, #8
 800fb0e:	7da0      	ldrb	r0, [r4, #22]
 800fb10:	4442      	add	r2, r8
 800fb12:	7561      	strb	r1, [r4, #21]
 800fb14:	1b9e      	subs	r6, r3, r6
 800fb16:	f080 0001 	eor.w	r0, r0, #1
 800fb1a:	60a2      	str	r2, [r4, #8]
 800fb1c:	6126      	str	r6, [r4, #16]
 800fb1e:	b002      	add	sp, #8
 800fb20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb24:	2108      	movs	r1, #8
 800fb26:	4620      	mov	r0, r4
 800fb28:	f000 fa68 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800fb2c:	b350      	cbz	r0, 800fb84 <ucdr_serialize_int64_t+0x11c>
 800fb2e:	7d23      	ldrb	r3, [r4, #20]
 800fb30:	2b01      	cmp	r3, #1
 800fb32:	d02d      	beq.n	800fb90 <ucdr_serialize_int64_t+0x128>
 800fb34:	68a3      	ldr	r3, [r4, #8]
 800fb36:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800fb3a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fb3e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800fb42:	7018      	strb	r0, [r3, #0]
 800fb44:	68a3      	ldr	r3, [r4, #8]
 800fb46:	705a      	strb	r2, [r3, #1]
 800fb48:	68a3      	ldr	r3, [r4, #8]
 800fb4a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fb4e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800fb52:	7099      	strb	r1, [r3, #2]
 800fb54:	68a3      	ldr	r3, [r4, #8]
 800fb56:	70da      	strb	r2, [r3, #3]
 800fb58:	68a3      	ldr	r3, [r4, #8]
 800fb5a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800fb5e:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800fb62:	7118      	strb	r0, [r3, #4]
 800fb64:	68a3      	ldr	r3, [r4, #8]
 800fb66:	715a      	strb	r2, [r3, #5]
 800fb68:	68a3      	ldr	r3, [r4, #8]
 800fb6a:	f89d 2000 	ldrb.w	r2, [sp]
 800fb6e:	7199      	strb	r1, [r3, #6]
 800fb70:	68a3      	ldr	r3, [r4, #8]
 800fb72:	71da      	strb	r2, [r3, #7]
 800fb74:	2108      	movs	r1, #8
 800fb76:	68a2      	ldr	r2, [r4, #8]
 800fb78:	6923      	ldr	r3, [r4, #16]
 800fb7a:	440a      	add	r2, r1
 800fb7c:	7561      	strb	r1, [r4, #21]
 800fb7e:	440b      	add	r3, r1
 800fb80:	60a2      	str	r2, [r4, #8]
 800fb82:	6123      	str	r3, [r4, #16]
 800fb84:	7da0      	ldrb	r0, [r4, #22]
 800fb86:	f080 0001 	eor.w	r0, r0, #1
 800fb8a:	b002      	add	sp, #8
 800fb8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb90:	466b      	mov	r3, sp
 800fb92:	68a2      	ldr	r2, [r4, #8]
 800fb94:	cb03      	ldmia	r3!, {r0, r1}
 800fb96:	6010      	str	r0, [r2, #0]
 800fb98:	6051      	str	r1, [r2, #4]
 800fb9a:	e7eb      	b.n	800fb74 <ucdr_serialize_int64_t+0x10c>
 800fb9c:	68a2      	ldr	r2, [r4, #8]
 800fb9e:	6923      	ldr	r3, [r4, #16]
 800fba0:	7da0      	ldrb	r0, [r4, #22]
 800fba2:	1b92      	subs	r2, r2, r6
 800fba4:	1b9b      	subs	r3, r3, r6
 800fba6:	7567      	strb	r7, [r4, #21]
 800fba8:	f080 0001 	eor.w	r0, r0, #1
 800fbac:	60a2      	str	r2, [r4, #8]
 800fbae:	6123      	str	r3, [r4, #16]
 800fbb0:	b002      	add	sp, #8
 800fbb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbb6:	68a3      	ldr	r3, [r4, #8]
 800fbb8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fbbc:	701a      	strb	r2, [r3, #0]
 800fbbe:	68a3      	ldr	r3, [r4, #8]
 800fbc0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fbc4:	701a      	strb	r2, [r3, #0]
 800fbc6:	68a3      	ldr	r3, [r4, #8]
 800fbc8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fbcc:	701a      	strb	r2, [r3, #0]
 800fbce:	68a3      	ldr	r3, [r4, #8]
 800fbd0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800fbd4:	701a      	strb	r2, [r3, #0]
 800fbd6:	68a3      	ldr	r3, [r4, #8]
 800fbd8:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800fbdc:	701a      	strb	r2, [r3, #0]
 800fbde:	68a3      	ldr	r3, [r4, #8]
 800fbe0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800fbe4:	701a      	strb	r2, [r3, #0]
 800fbe6:	68a3      	ldr	r3, [r4, #8]
 800fbe8:	f89d 2000 	ldrb.w	r2, [sp]
 800fbec:	701a      	strb	r2, [r3, #0]
 800fbee:	e78a      	b.n	800fb06 <ucdr_serialize_int64_t+0x9e>
 800fbf0:	4628      	mov	r0, r5
 800fbf2:	466d      	mov	r5, sp
 800fbf4:	4632      	mov	r2, r6
 800fbf6:	4629      	mov	r1, r5
 800fbf8:	f00b ff75 	bl	801bae6 <memcpy>
 800fbfc:	4642      	mov	r2, r8
 800fbfe:	19a9      	adds	r1, r5, r6
 800fc00:	68a0      	ldr	r0, [r4, #8]
 800fc02:	f00b ff70 	bl	801bae6 <memcpy>
 800fc06:	e77e      	b.n	800fb06 <ucdr_serialize_int64_t+0x9e>

0800fc08 <ucdr_deserialize_int64_t>:
 800fc08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc0c:	4604      	mov	r4, r0
 800fc0e:	460d      	mov	r5, r1
 800fc10:	2108      	movs	r1, #8
 800fc12:	f000 fa47 	bl	80100a4 <ucdr_buffer_alignment>
 800fc16:	4601      	mov	r1, r0
 800fc18:	4620      	mov	r0, r4
 800fc1a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fc1e:	f000 fa89 	bl	8010134 <ucdr_advance_buffer>
 800fc22:	2108      	movs	r1, #8
 800fc24:	4620      	mov	r0, r4
 800fc26:	f000 f9dd 	bl	800ffe4 <ucdr_check_buffer_available_for>
 800fc2a:	2800      	cmp	r0, #0
 800fc2c:	d151      	bne.n	800fcd2 <ucdr_deserialize_int64_t+0xca>
 800fc2e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800fc32:	42be      	cmp	r6, r7
 800fc34:	d948      	bls.n	800fcc8 <ucdr_deserialize_int64_t+0xc0>
 800fc36:	6923      	ldr	r3, [r4, #16]
 800fc38:	4620      	mov	r0, r4
 800fc3a:	60a6      	str	r6, [r4, #8]
 800fc3c:	1bf6      	subs	r6, r6, r7
 800fc3e:	4433      	add	r3, r6
 800fc40:	f1c6 0908 	rsb	r9, r6, #8
 800fc44:	6123      	str	r3, [r4, #16]
 800fc46:	4649      	mov	r1, r9
 800fc48:	f000 f9d8 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800fc4c:	2800      	cmp	r0, #0
 800fc4e:	d06d      	beq.n	800fd2c <ucdr_deserialize_int64_t+0x124>
 800fc50:	7d23      	ldrb	r3, [r4, #20]
 800fc52:	2b01      	cmp	r3, #1
 800fc54:	f000 8093 	beq.w	800fd7e <ucdr_deserialize_int64_t+0x176>
 800fc58:	79fb      	ldrb	r3, [r7, #7]
 800fc5a:	702b      	strb	r3, [r5, #0]
 800fc5c:	2e00      	cmp	r6, #0
 800fc5e:	d072      	beq.n	800fd46 <ucdr_deserialize_int64_t+0x13e>
 800fc60:	79bb      	ldrb	r3, [r7, #6]
 800fc62:	2e01      	cmp	r6, #1
 800fc64:	706b      	strb	r3, [r5, #1]
 800fc66:	f105 0302 	add.w	r3, r5, #2
 800fc6a:	d070      	beq.n	800fd4e <ucdr_deserialize_int64_t+0x146>
 800fc6c:	797b      	ldrb	r3, [r7, #5]
 800fc6e:	2e02      	cmp	r6, #2
 800fc70:	70ab      	strb	r3, [r5, #2]
 800fc72:	f105 0303 	add.w	r3, r5, #3
 800fc76:	d06e      	beq.n	800fd56 <ucdr_deserialize_int64_t+0x14e>
 800fc78:	793b      	ldrb	r3, [r7, #4]
 800fc7a:	2e03      	cmp	r6, #3
 800fc7c:	70eb      	strb	r3, [r5, #3]
 800fc7e:	f105 0304 	add.w	r3, r5, #4
 800fc82:	d06c      	beq.n	800fd5e <ucdr_deserialize_int64_t+0x156>
 800fc84:	78fb      	ldrb	r3, [r7, #3]
 800fc86:	2e04      	cmp	r6, #4
 800fc88:	712b      	strb	r3, [r5, #4]
 800fc8a:	f105 0305 	add.w	r3, r5, #5
 800fc8e:	d06a      	beq.n	800fd66 <ucdr_deserialize_int64_t+0x15e>
 800fc90:	78bb      	ldrb	r3, [r7, #2]
 800fc92:	2e05      	cmp	r6, #5
 800fc94:	716b      	strb	r3, [r5, #5]
 800fc96:	f105 0306 	add.w	r3, r5, #6
 800fc9a:	d068      	beq.n	800fd6e <ucdr_deserialize_int64_t+0x166>
 800fc9c:	787b      	ldrb	r3, [r7, #1]
 800fc9e:	2e06      	cmp	r6, #6
 800fca0:	71ab      	strb	r3, [r5, #6]
 800fca2:	f105 0307 	add.w	r3, r5, #7
 800fca6:	d066      	beq.n	800fd76 <ucdr_deserialize_int64_t+0x16e>
 800fca8:	783b      	ldrb	r3, [r7, #0]
 800fcaa:	71eb      	strb	r3, [r5, #7]
 800fcac:	6923      	ldr	r3, [r4, #16]
 800fcae:	2108      	movs	r1, #8
 800fcb0:	68a2      	ldr	r2, [r4, #8]
 800fcb2:	3308      	adds	r3, #8
 800fcb4:	7da0      	ldrb	r0, [r4, #22]
 800fcb6:	444a      	add	r2, r9
 800fcb8:	7561      	strb	r1, [r4, #21]
 800fcba:	1b9e      	subs	r6, r3, r6
 800fcbc:	f080 0001 	eor.w	r0, r0, #1
 800fcc0:	60a2      	str	r2, [r4, #8]
 800fcc2:	6126      	str	r6, [r4, #16]
 800fcc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fcc8:	2108      	movs	r1, #8
 800fcca:	4620      	mov	r0, r4
 800fccc:	f000 f996 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800fcd0:	b310      	cbz	r0, 800fd18 <ucdr_deserialize_int64_t+0x110>
 800fcd2:	7d23      	ldrb	r3, [r4, #20]
 800fcd4:	2b01      	cmp	r3, #1
 800fcd6:	68a3      	ldr	r3, [r4, #8]
 800fcd8:	d023      	beq.n	800fd22 <ucdr_deserialize_int64_t+0x11a>
 800fcda:	79db      	ldrb	r3, [r3, #7]
 800fcdc:	702b      	strb	r3, [r5, #0]
 800fcde:	68a3      	ldr	r3, [r4, #8]
 800fce0:	799b      	ldrb	r3, [r3, #6]
 800fce2:	706b      	strb	r3, [r5, #1]
 800fce4:	68a3      	ldr	r3, [r4, #8]
 800fce6:	795b      	ldrb	r3, [r3, #5]
 800fce8:	70ab      	strb	r3, [r5, #2]
 800fcea:	68a3      	ldr	r3, [r4, #8]
 800fcec:	791b      	ldrb	r3, [r3, #4]
 800fcee:	70eb      	strb	r3, [r5, #3]
 800fcf0:	68a3      	ldr	r3, [r4, #8]
 800fcf2:	78db      	ldrb	r3, [r3, #3]
 800fcf4:	712b      	strb	r3, [r5, #4]
 800fcf6:	68a3      	ldr	r3, [r4, #8]
 800fcf8:	789b      	ldrb	r3, [r3, #2]
 800fcfa:	716b      	strb	r3, [r5, #5]
 800fcfc:	68a3      	ldr	r3, [r4, #8]
 800fcfe:	785b      	ldrb	r3, [r3, #1]
 800fd00:	71ab      	strb	r3, [r5, #6]
 800fd02:	68a3      	ldr	r3, [r4, #8]
 800fd04:	781b      	ldrb	r3, [r3, #0]
 800fd06:	71eb      	strb	r3, [r5, #7]
 800fd08:	2108      	movs	r1, #8
 800fd0a:	68a2      	ldr	r2, [r4, #8]
 800fd0c:	6923      	ldr	r3, [r4, #16]
 800fd0e:	440a      	add	r2, r1
 800fd10:	7561      	strb	r1, [r4, #21]
 800fd12:	440b      	add	r3, r1
 800fd14:	60a2      	str	r2, [r4, #8]
 800fd16:	6123      	str	r3, [r4, #16]
 800fd18:	7da0      	ldrb	r0, [r4, #22]
 800fd1a:	f080 0001 	eor.w	r0, r0, #1
 800fd1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd22:	681a      	ldr	r2, [r3, #0]
 800fd24:	685b      	ldr	r3, [r3, #4]
 800fd26:	602a      	str	r2, [r5, #0]
 800fd28:	606b      	str	r3, [r5, #4]
 800fd2a:	e7ed      	b.n	800fd08 <ucdr_deserialize_int64_t+0x100>
 800fd2c:	68a2      	ldr	r2, [r4, #8]
 800fd2e:	6923      	ldr	r3, [r4, #16]
 800fd30:	1b92      	subs	r2, r2, r6
 800fd32:	7da0      	ldrb	r0, [r4, #22]
 800fd34:	1b9b      	subs	r3, r3, r6
 800fd36:	f884 8015 	strb.w	r8, [r4, #21]
 800fd3a:	f080 0001 	eor.w	r0, r0, #1
 800fd3e:	60a2      	str	r2, [r4, #8]
 800fd40:	6123      	str	r3, [r4, #16]
 800fd42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd46:	68a3      	ldr	r3, [r4, #8]
 800fd48:	799b      	ldrb	r3, [r3, #6]
 800fd4a:	706b      	strb	r3, [r5, #1]
 800fd4c:	1cab      	adds	r3, r5, #2
 800fd4e:	68a2      	ldr	r2, [r4, #8]
 800fd50:	7952      	ldrb	r2, [r2, #5]
 800fd52:	f803 2b01 	strb.w	r2, [r3], #1
 800fd56:	68a2      	ldr	r2, [r4, #8]
 800fd58:	7912      	ldrb	r2, [r2, #4]
 800fd5a:	f803 2b01 	strb.w	r2, [r3], #1
 800fd5e:	68a2      	ldr	r2, [r4, #8]
 800fd60:	78d2      	ldrb	r2, [r2, #3]
 800fd62:	f803 2b01 	strb.w	r2, [r3], #1
 800fd66:	68a2      	ldr	r2, [r4, #8]
 800fd68:	7892      	ldrb	r2, [r2, #2]
 800fd6a:	f803 2b01 	strb.w	r2, [r3], #1
 800fd6e:	68a2      	ldr	r2, [r4, #8]
 800fd70:	7852      	ldrb	r2, [r2, #1]
 800fd72:	f803 2b01 	strb.w	r2, [r3], #1
 800fd76:	68a2      	ldr	r2, [r4, #8]
 800fd78:	7812      	ldrb	r2, [r2, #0]
 800fd7a:	701a      	strb	r2, [r3, #0]
 800fd7c:	e796      	b.n	800fcac <ucdr_deserialize_int64_t+0xa4>
 800fd7e:	4639      	mov	r1, r7
 800fd80:	4632      	mov	r2, r6
 800fd82:	4628      	mov	r0, r5
 800fd84:	f00b feaf 	bl	801bae6 <memcpy>
 800fd88:	464a      	mov	r2, r9
 800fd8a:	19a8      	adds	r0, r5, r6
 800fd8c:	68a1      	ldr	r1, [r4, #8]
 800fd8e:	f00b feaa 	bl	801bae6 <memcpy>
 800fd92:	e78b      	b.n	800fcac <ucdr_deserialize_int64_t+0xa4>

0800fd94 <ucdr_serialize_float>:
 800fd94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd98:	4604      	mov	r4, r0
 800fd9a:	b082      	sub	sp, #8
 800fd9c:	2104      	movs	r1, #4
 800fd9e:	ed8d 0a01 	vstr	s0, [sp, #4]
 800fda2:	f000 f97f 	bl	80100a4 <ucdr_buffer_alignment>
 800fda6:	4601      	mov	r1, r0
 800fda8:	4620      	mov	r0, r4
 800fdaa:	7d67      	ldrb	r7, [r4, #21]
 800fdac:	f000 f9c2 	bl	8010134 <ucdr_advance_buffer>
 800fdb0:	2104      	movs	r1, #4
 800fdb2:	4620      	mov	r0, r4
 800fdb4:	f000 f916 	bl	800ffe4 <ucdr_check_buffer_available_for>
 800fdb8:	2800      	cmp	r0, #0
 800fdba:	d139      	bne.n	800fe30 <ucdr_serialize_float+0x9c>
 800fdbc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800fdc0:	42ab      	cmp	r3, r5
 800fdc2:	d930      	bls.n	800fe26 <ucdr_serialize_float+0x92>
 800fdc4:	1b5e      	subs	r6, r3, r5
 800fdc6:	60a3      	str	r3, [r4, #8]
 800fdc8:	6923      	ldr	r3, [r4, #16]
 800fdca:	4620      	mov	r0, r4
 800fdcc:	f1c6 0804 	rsb	r8, r6, #4
 800fdd0:	4433      	add	r3, r6
 800fdd2:	4641      	mov	r1, r8
 800fdd4:	6123      	str	r3, [r4, #16]
 800fdd6:	f000 f911 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800fdda:	2800      	cmp	r0, #0
 800fddc:	d04c      	beq.n	800fe78 <ucdr_serialize_float+0xe4>
 800fdde:	7d23      	ldrb	r3, [r4, #20]
 800fde0:	2b01      	cmp	r3, #1
 800fde2:	d063      	beq.n	800feac <ucdr_serialize_float+0x118>
 800fde4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fde8:	702b      	strb	r3, [r5, #0]
 800fdea:	2e00      	cmp	r6, #0
 800fdec:	d051      	beq.n	800fe92 <ucdr_serialize_float+0xfe>
 800fdee:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fdf2:	2e01      	cmp	r6, #1
 800fdf4:	706b      	strb	r3, [r5, #1]
 800fdf6:	d050      	beq.n	800fe9a <ucdr_serialize_float+0x106>
 800fdf8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fdfc:	2e02      	cmp	r6, #2
 800fdfe:	70ab      	strb	r3, [r5, #2]
 800fe00:	d04f      	beq.n	800fea2 <ucdr_serialize_float+0x10e>
 800fe02:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fe06:	70eb      	strb	r3, [r5, #3]
 800fe08:	6923      	ldr	r3, [r4, #16]
 800fe0a:	2104      	movs	r1, #4
 800fe0c:	68a2      	ldr	r2, [r4, #8]
 800fe0e:	3304      	adds	r3, #4
 800fe10:	7da0      	ldrb	r0, [r4, #22]
 800fe12:	4442      	add	r2, r8
 800fe14:	7561      	strb	r1, [r4, #21]
 800fe16:	1b9e      	subs	r6, r3, r6
 800fe18:	f080 0001 	eor.w	r0, r0, #1
 800fe1c:	60a2      	str	r2, [r4, #8]
 800fe1e:	6126      	str	r6, [r4, #16]
 800fe20:	b002      	add	sp, #8
 800fe22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe26:	2104      	movs	r1, #4
 800fe28:	4620      	mov	r0, r4
 800fe2a:	f000 f8e7 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800fe2e:	b1d0      	cbz	r0, 800fe66 <ucdr_serialize_float+0xd2>
 800fe30:	7d23      	ldrb	r3, [r4, #20]
 800fe32:	2b01      	cmp	r3, #1
 800fe34:	68a3      	ldr	r3, [r4, #8]
 800fe36:	d01c      	beq.n	800fe72 <ucdr_serialize_float+0xde>
 800fe38:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800fe3c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fe40:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800fe44:	7018      	strb	r0, [r3, #0]
 800fe46:	68a3      	ldr	r3, [r4, #8]
 800fe48:	705a      	strb	r2, [r3, #1]
 800fe4a:	68a3      	ldr	r3, [r4, #8]
 800fe4c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fe50:	7099      	strb	r1, [r3, #2]
 800fe52:	68a3      	ldr	r3, [r4, #8]
 800fe54:	70da      	strb	r2, [r3, #3]
 800fe56:	2104      	movs	r1, #4
 800fe58:	68a2      	ldr	r2, [r4, #8]
 800fe5a:	6923      	ldr	r3, [r4, #16]
 800fe5c:	440a      	add	r2, r1
 800fe5e:	7561      	strb	r1, [r4, #21]
 800fe60:	440b      	add	r3, r1
 800fe62:	60a2      	str	r2, [r4, #8]
 800fe64:	6123      	str	r3, [r4, #16]
 800fe66:	7da0      	ldrb	r0, [r4, #22]
 800fe68:	f080 0001 	eor.w	r0, r0, #1
 800fe6c:	b002      	add	sp, #8
 800fe6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe72:	9a01      	ldr	r2, [sp, #4]
 800fe74:	601a      	str	r2, [r3, #0]
 800fe76:	e7ee      	b.n	800fe56 <ucdr_serialize_float+0xc2>
 800fe78:	68a2      	ldr	r2, [r4, #8]
 800fe7a:	6923      	ldr	r3, [r4, #16]
 800fe7c:	7da0      	ldrb	r0, [r4, #22]
 800fe7e:	1b92      	subs	r2, r2, r6
 800fe80:	1b9b      	subs	r3, r3, r6
 800fe82:	7567      	strb	r7, [r4, #21]
 800fe84:	f080 0001 	eor.w	r0, r0, #1
 800fe88:	60a2      	str	r2, [r4, #8]
 800fe8a:	6123      	str	r3, [r4, #16]
 800fe8c:	b002      	add	sp, #8
 800fe8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe92:	68a3      	ldr	r3, [r4, #8]
 800fe94:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fe98:	701a      	strb	r2, [r3, #0]
 800fe9a:	68a3      	ldr	r3, [r4, #8]
 800fe9c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fea0:	701a      	strb	r2, [r3, #0]
 800fea2:	68a3      	ldr	r3, [r4, #8]
 800fea4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fea8:	701a      	strb	r2, [r3, #0]
 800feaa:	e7ad      	b.n	800fe08 <ucdr_serialize_float+0x74>
 800feac:	4628      	mov	r0, r5
 800feae:	ad01      	add	r5, sp, #4
 800feb0:	4632      	mov	r2, r6
 800feb2:	4629      	mov	r1, r5
 800feb4:	f00b fe17 	bl	801bae6 <memcpy>
 800feb8:	4642      	mov	r2, r8
 800feba:	19a9      	adds	r1, r5, r6
 800febc:	68a0      	ldr	r0, [r4, #8]
 800febe:	f00b fe12 	bl	801bae6 <memcpy>
 800fec2:	e7a1      	b.n	800fe08 <ucdr_serialize_float+0x74>

0800fec4 <ucdr_deserialize_float>:
 800fec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fec8:	4604      	mov	r4, r0
 800feca:	460d      	mov	r5, r1
 800fecc:	2104      	movs	r1, #4
 800fece:	f000 f8e9 	bl	80100a4 <ucdr_buffer_alignment>
 800fed2:	4601      	mov	r1, r0
 800fed4:	4620      	mov	r0, r4
 800fed6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800feda:	f000 f92b 	bl	8010134 <ucdr_advance_buffer>
 800fede:	2104      	movs	r1, #4
 800fee0:	4620      	mov	r0, r4
 800fee2:	f000 f87f 	bl	800ffe4 <ucdr_check_buffer_available_for>
 800fee6:	2800      	cmp	r0, #0
 800fee8:	d138      	bne.n	800ff5c <ucdr_deserialize_float+0x98>
 800feea:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800feee:	42b7      	cmp	r7, r6
 800fef0:	d92f      	bls.n	800ff52 <ucdr_deserialize_float+0x8e>
 800fef2:	6923      	ldr	r3, [r4, #16]
 800fef4:	4620      	mov	r0, r4
 800fef6:	60a7      	str	r7, [r4, #8]
 800fef8:	1bbf      	subs	r7, r7, r6
 800fefa:	443b      	add	r3, r7
 800fefc:	f1c7 0904 	rsb	r9, r7, #4
 800ff00:	6123      	str	r3, [r4, #16]
 800ff02:	4649      	mov	r1, r9
 800ff04:	f000 f87a 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800ff08:	2800      	cmp	r0, #0
 800ff0a:	d046      	beq.n	800ff9a <ucdr_deserialize_float+0xd6>
 800ff0c:	7d23      	ldrb	r3, [r4, #20]
 800ff0e:	2b01      	cmp	r3, #1
 800ff10:	d05c      	beq.n	800ffcc <ucdr_deserialize_float+0x108>
 800ff12:	78f3      	ldrb	r3, [r6, #3]
 800ff14:	702b      	strb	r3, [r5, #0]
 800ff16:	2f00      	cmp	r7, #0
 800ff18:	d04c      	beq.n	800ffb4 <ucdr_deserialize_float+0xf0>
 800ff1a:	78b3      	ldrb	r3, [r6, #2]
 800ff1c:	2f01      	cmp	r7, #1
 800ff1e:	706b      	strb	r3, [r5, #1]
 800ff20:	f105 0302 	add.w	r3, r5, #2
 800ff24:	d04a      	beq.n	800ffbc <ucdr_deserialize_float+0xf8>
 800ff26:	7873      	ldrb	r3, [r6, #1]
 800ff28:	2f02      	cmp	r7, #2
 800ff2a:	70ab      	strb	r3, [r5, #2]
 800ff2c:	f105 0303 	add.w	r3, r5, #3
 800ff30:	d048      	beq.n	800ffc4 <ucdr_deserialize_float+0x100>
 800ff32:	7833      	ldrb	r3, [r6, #0]
 800ff34:	70eb      	strb	r3, [r5, #3]
 800ff36:	6923      	ldr	r3, [r4, #16]
 800ff38:	2104      	movs	r1, #4
 800ff3a:	68a2      	ldr	r2, [r4, #8]
 800ff3c:	3304      	adds	r3, #4
 800ff3e:	7da0      	ldrb	r0, [r4, #22]
 800ff40:	444a      	add	r2, r9
 800ff42:	7561      	strb	r1, [r4, #21]
 800ff44:	1bdb      	subs	r3, r3, r7
 800ff46:	f080 0001 	eor.w	r0, r0, #1
 800ff4a:	60a2      	str	r2, [r4, #8]
 800ff4c:	6123      	str	r3, [r4, #16]
 800ff4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff52:	2104      	movs	r1, #4
 800ff54:	4620      	mov	r0, r4
 800ff56:	f000 f851 	bl	800fffc <ucdr_check_final_buffer_behavior>
 800ff5a:	b1b0      	cbz	r0, 800ff8a <ucdr_deserialize_float+0xc6>
 800ff5c:	7d23      	ldrb	r3, [r4, #20]
 800ff5e:	2b01      	cmp	r3, #1
 800ff60:	68a3      	ldr	r3, [r4, #8]
 800ff62:	d017      	beq.n	800ff94 <ucdr_deserialize_float+0xd0>
 800ff64:	78db      	ldrb	r3, [r3, #3]
 800ff66:	702b      	strb	r3, [r5, #0]
 800ff68:	68a3      	ldr	r3, [r4, #8]
 800ff6a:	789b      	ldrb	r3, [r3, #2]
 800ff6c:	706b      	strb	r3, [r5, #1]
 800ff6e:	68a3      	ldr	r3, [r4, #8]
 800ff70:	785b      	ldrb	r3, [r3, #1]
 800ff72:	70ab      	strb	r3, [r5, #2]
 800ff74:	68a3      	ldr	r3, [r4, #8]
 800ff76:	781b      	ldrb	r3, [r3, #0]
 800ff78:	70eb      	strb	r3, [r5, #3]
 800ff7a:	2104      	movs	r1, #4
 800ff7c:	68a2      	ldr	r2, [r4, #8]
 800ff7e:	6923      	ldr	r3, [r4, #16]
 800ff80:	440a      	add	r2, r1
 800ff82:	7561      	strb	r1, [r4, #21]
 800ff84:	440b      	add	r3, r1
 800ff86:	60a2      	str	r2, [r4, #8]
 800ff88:	6123      	str	r3, [r4, #16]
 800ff8a:	7da0      	ldrb	r0, [r4, #22]
 800ff8c:	f080 0001 	eor.w	r0, r0, #1
 800ff90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	602b      	str	r3, [r5, #0]
 800ff98:	e7ef      	b.n	800ff7a <ucdr_deserialize_float+0xb6>
 800ff9a:	68a2      	ldr	r2, [r4, #8]
 800ff9c:	6923      	ldr	r3, [r4, #16]
 800ff9e:	1bd2      	subs	r2, r2, r7
 800ffa0:	7da0      	ldrb	r0, [r4, #22]
 800ffa2:	1bdb      	subs	r3, r3, r7
 800ffa4:	f884 8015 	strb.w	r8, [r4, #21]
 800ffa8:	f080 0001 	eor.w	r0, r0, #1
 800ffac:	60a2      	str	r2, [r4, #8]
 800ffae:	6123      	str	r3, [r4, #16]
 800ffb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffb4:	68a3      	ldr	r3, [r4, #8]
 800ffb6:	789b      	ldrb	r3, [r3, #2]
 800ffb8:	706b      	strb	r3, [r5, #1]
 800ffba:	1cab      	adds	r3, r5, #2
 800ffbc:	68a2      	ldr	r2, [r4, #8]
 800ffbe:	7852      	ldrb	r2, [r2, #1]
 800ffc0:	f803 2b01 	strb.w	r2, [r3], #1
 800ffc4:	68a2      	ldr	r2, [r4, #8]
 800ffc6:	7812      	ldrb	r2, [r2, #0]
 800ffc8:	701a      	strb	r2, [r3, #0]
 800ffca:	e7b4      	b.n	800ff36 <ucdr_deserialize_float+0x72>
 800ffcc:	4631      	mov	r1, r6
 800ffce:	463a      	mov	r2, r7
 800ffd0:	4628      	mov	r0, r5
 800ffd2:	f00b fd88 	bl	801bae6 <memcpy>
 800ffd6:	464a      	mov	r2, r9
 800ffd8:	19e8      	adds	r0, r5, r7
 800ffda:	68a1      	ldr	r1, [r4, #8]
 800ffdc:	f00b fd83 	bl	801bae6 <memcpy>
 800ffe0:	e7a9      	b.n	800ff36 <ucdr_deserialize_float+0x72>
 800ffe2:	bf00      	nop

0800ffe4 <ucdr_check_buffer_available_for>:
 800ffe4:	7d83      	ldrb	r3, [r0, #22]
 800ffe6:	b93b      	cbnz	r3, 800fff8 <ucdr_check_buffer_available_for+0x14>
 800ffe8:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800ffec:	4419      	add	r1, r3
 800ffee:	4288      	cmp	r0, r1
 800fff0:	bf34      	ite	cc
 800fff2:	2000      	movcc	r0, #0
 800fff4:	2001      	movcs	r0, #1
 800fff6:	4770      	bx	lr
 800fff8:	2000      	movs	r0, #0
 800fffa:	4770      	bx	lr

0800fffc <ucdr_check_final_buffer_behavior>:
 800fffc:	7d83      	ldrb	r3, [r0, #22]
 800fffe:	b943      	cbnz	r3, 8010012 <ucdr_check_final_buffer_behavior+0x16>
 8010000:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8010004:	b510      	push	{r4, lr}
 8010006:	4291      	cmp	r1, r2
 8010008:	4604      	mov	r4, r0
 801000a:	d205      	bcs.n	8010018 <ucdr_check_final_buffer_behavior+0x1c>
 801000c:	2301      	movs	r3, #1
 801000e:	4618      	mov	r0, r3
 8010010:	bd10      	pop	{r4, pc}
 8010012:	2300      	movs	r3, #0
 8010014:	4618      	mov	r0, r3
 8010016:	4770      	bx	lr
 8010018:	6982      	ldr	r2, [r0, #24]
 801001a:	b13a      	cbz	r2, 801002c <ucdr_check_final_buffer_behavior+0x30>
 801001c:	69c1      	ldr	r1, [r0, #28]
 801001e:	4790      	blx	r2
 8010020:	f080 0301 	eor.w	r3, r0, #1
 8010024:	75a0      	strb	r0, [r4, #22]
 8010026:	b2db      	uxtb	r3, r3
 8010028:	4618      	mov	r0, r3
 801002a:	bd10      	pop	{r4, pc}
 801002c:	2001      	movs	r0, #1
 801002e:	75a0      	strb	r0, [r4, #22]
 8010030:	e7fa      	b.n	8010028 <ucdr_check_final_buffer_behavior+0x2c>
 8010032:	bf00      	nop

08010034 <ucdr_set_on_full_buffer_callback>:
 8010034:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8010038:	4770      	bx	lr
 801003a:	bf00      	nop

0801003c <ucdr_init_buffer_origin_offset_endian>:
 801003c:	b410      	push	{r4}
 801003e:	9c01      	ldr	r4, [sp, #4]
 8010040:	440a      	add	r2, r1
 8010042:	6001      	str	r1, [r0, #0]
 8010044:	6042      	str	r2, [r0, #4]
 8010046:	190a      	adds	r2, r1, r4
 8010048:	441c      	add	r4, r3
 801004a:	6082      	str	r2, [r0, #8]
 801004c:	2200      	movs	r2, #0
 801004e:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8010052:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8010056:	7542      	strb	r2, [r0, #21]
 8010058:	f85d 4b04 	ldr.w	r4, [sp], #4
 801005c:	7582      	strb	r2, [r0, #22]
 801005e:	7503      	strb	r3, [r0, #20]
 8010060:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8010064:	4770      	bx	lr
 8010066:	bf00      	nop

08010068 <ucdr_init_buffer_origin_offset>:
 8010068:	b510      	push	{r4, lr}
 801006a:	b082      	sub	sp, #8
 801006c:	9c04      	ldr	r4, [sp, #16]
 801006e:	9400      	str	r4, [sp, #0]
 8010070:	2401      	movs	r4, #1
 8010072:	9401      	str	r4, [sp, #4]
 8010074:	f7ff ffe2 	bl	801003c <ucdr_init_buffer_origin_offset_endian>
 8010078:	b002      	add	sp, #8
 801007a:	bd10      	pop	{r4, pc}

0801007c <ucdr_init_buffer_origin>:
 801007c:	b510      	push	{r4, lr}
 801007e:	2400      	movs	r4, #0
 8010080:	b082      	sub	sp, #8
 8010082:	9400      	str	r4, [sp, #0]
 8010084:	f7ff fff0 	bl	8010068 <ucdr_init_buffer_origin_offset>
 8010088:	b002      	add	sp, #8
 801008a:	bd10      	pop	{r4, pc}

0801008c <ucdr_init_buffer>:
 801008c:	2300      	movs	r3, #0
 801008e:	f7ff bff5 	b.w	801007c <ucdr_init_buffer_origin>
 8010092:	bf00      	nop

08010094 <ucdr_alignment>:
 8010094:	fbb0 f2f1 	udiv	r2, r0, r1
 8010098:	fb02 0011 	mls	r0, r2, r1, r0
 801009c:	1e4b      	subs	r3, r1, #1
 801009e:	1a08      	subs	r0, r1, r0
 80100a0:	4018      	ands	r0, r3
 80100a2:	4770      	bx	lr

080100a4 <ucdr_buffer_alignment>:
 80100a4:	7d43      	ldrb	r3, [r0, #21]
 80100a6:	428b      	cmp	r3, r1
 80100a8:	d209      	bcs.n	80100be <ucdr_buffer_alignment+0x1a>
 80100aa:	6903      	ldr	r3, [r0, #16]
 80100ac:	1e4a      	subs	r2, r1, #1
 80100ae:	fbb3 f0f1 	udiv	r0, r3, r1
 80100b2:	fb01 3010 	mls	r0, r1, r0, r3
 80100b6:	1a09      	subs	r1, r1, r0
 80100b8:	ea01 0002 	and.w	r0, r1, r2
 80100bc:	4770      	bx	lr
 80100be:	2000      	movs	r0, #0
 80100c0:	4770      	bx	lr
 80100c2:	bf00      	nop

080100c4 <ucdr_align_to>:
 80100c4:	b538      	push	{r3, r4, r5, lr}
 80100c6:	4604      	mov	r4, r0
 80100c8:	460d      	mov	r5, r1
 80100ca:	f7ff ffeb 	bl	80100a4 <ucdr_buffer_alignment>
 80100ce:	68a3      	ldr	r3, [r4, #8]
 80100d0:	7565      	strb	r5, [r4, #21]
 80100d2:	181a      	adds	r2, r3, r0
 80100d4:	6923      	ldr	r3, [r4, #16]
 80100d6:	4418      	add	r0, r3
 80100d8:	6863      	ldr	r3, [r4, #4]
 80100da:	4293      	cmp	r3, r2
 80100dc:	6120      	str	r0, [r4, #16]
 80100de:	bf28      	it	cs
 80100e0:	4613      	movcs	r3, r2
 80100e2:	60a3      	str	r3, [r4, #8]
 80100e4:	bd38      	pop	{r3, r4, r5, pc}
 80100e6:	bf00      	nop

080100e8 <ucdr_buffer_length>:
 80100e8:	6882      	ldr	r2, [r0, #8]
 80100ea:	6800      	ldr	r0, [r0, #0]
 80100ec:	1a10      	subs	r0, r2, r0
 80100ee:	4770      	bx	lr

080100f0 <ucdr_buffer_remaining>:
 80100f0:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 80100f4:	1a10      	subs	r0, r2, r0
 80100f6:	4770      	bx	lr

080100f8 <ucdr_check_final_buffer_behavior_array>:
 80100f8:	b538      	push	{r3, r4, r5, lr}
 80100fa:	7d83      	ldrb	r3, [r0, #22]
 80100fc:	b9a3      	cbnz	r3, 8010128 <ucdr_check_final_buffer_behavior_array+0x30>
 80100fe:	4604      	mov	r4, r0
 8010100:	460d      	mov	r5, r1
 8010102:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8010106:	429a      	cmp	r2, r3
 8010108:	d300      	bcc.n	801010c <ucdr_check_final_buffer_behavior_array+0x14>
 801010a:	b931      	cbnz	r1, 801011a <ucdr_check_final_buffer_behavior_array+0x22>
 801010c:	4620      	mov	r0, r4
 801010e:	f7ff ffef 	bl	80100f0 <ucdr_buffer_remaining>
 8010112:	42a8      	cmp	r0, r5
 8010114:	bf28      	it	cs
 8010116:	4628      	movcs	r0, r5
 8010118:	bd38      	pop	{r3, r4, r5, pc}
 801011a:	6983      	ldr	r3, [r0, #24]
 801011c:	b133      	cbz	r3, 801012c <ucdr_check_final_buffer_behavior_array+0x34>
 801011e:	69c1      	ldr	r1, [r0, #28]
 8010120:	4798      	blx	r3
 8010122:	75a0      	strb	r0, [r4, #22]
 8010124:	2800      	cmp	r0, #0
 8010126:	d0f1      	beq.n	801010c <ucdr_check_final_buffer_behavior_array+0x14>
 8010128:	2000      	movs	r0, #0
 801012a:	bd38      	pop	{r3, r4, r5, pc}
 801012c:	2301      	movs	r3, #1
 801012e:	7583      	strb	r3, [r0, #22]
 8010130:	e7fa      	b.n	8010128 <ucdr_check_final_buffer_behavior_array+0x30>
 8010132:	bf00      	nop

08010134 <ucdr_advance_buffer>:
 8010134:	b538      	push	{r3, r4, r5, lr}
 8010136:	4604      	mov	r4, r0
 8010138:	460d      	mov	r5, r1
 801013a:	f7ff ff53 	bl	800ffe4 <ucdr_check_buffer_available_for>
 801013e:	b178      	cbz	r0, 8010160 <ucdr_advance_buffer+0x2c>
 8010140:	6923      	ldr	r3, [r4, #16]
 8010142:	68a2      	ldr	r2, [r4, #8]
 8010144:	442b      	add	r3, r5
 8010146:	442a      	add	r2, r5
 8010148:	6123      	str	r3, [r4, #16]
 801014a:	2301      	movs	r3, #1
 801014c:	60a2      	str	r2, [r4, #8]
 801014e:	7563      	strb	r3, [r4, #21]
 8010150:	bd38      	pop	{r3, r4, r5, pc}
 8010152:	68a2      	ldr	r2, [r4, #8]
 8010154:	1a2d      	subs	r5, r5, r0
 8010156:	6923      	ldr	r3, [r4, #16]
 8010158:	4402      	add	r2, r0
 801015a:	4418      	add	r0, r3
 801015c:	60a2      	str	r2, [r4, #8]
 801015e:	6120      	str	r0, [r4, #16]
 8010160:	4629      	mov	r1, r5
 8010162:	2201      	movs	r2, #1
 8010164:	4620      	mov	r0, r4
 8010166:	f7ff ffc7 	bl	80100f8 <ucdr_check_final_buffer_behavior_array>
 801016a:	2800      	cmp	r0, #0
 801016c:	d1f1      	bne.n	8010152 <ucdr_advance_buffer+0x1e>
 801016e:	2301      	movs	r3, #1
 8010170:	7563      	strb	r3, [r4, #21]
 8010172:	bd38      	pop	{r3, r4, r5, pc}

08010174 <uxr_buffer_delete_entity>:
 8010174:	b510      	push	{r4, lr}
 8010176:	2300      	movs	r3, #0
 8010178:	b08e      	sub	sp, #56	; 0x38
 801017a:	4604      	mov	r4, r0
 801017c:	9103      	str	r1, [sp, #12]
 801017e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8010182:	2303      	movs	r3, #3
 8010184:	2204      	movs	r2, #4
 8010186:	9300      	str	r3, [sp, #0]
 8010188:	ab06      	add	r3, sp, #24
 801018a:	f001 f8e1 	bl	8011350 <uxr_prepare_stream_to_write_submessage>
 801018e:	b918      	cbnz	r0, 8010198 <uxr_buffer_delete_entity+0x24>
 8010190:	4604      	mov	r4, r0
 8010192:	4620      	mov	r0, r4
 8010194:	b00e      	add	sp, #56	; 0x38
 8010196:	bd10      	pop	{r4, pc}
 8010198:	9902      	ldr	r1, [sp, #8]
 801019a:	aa05      	add	r2, sp, #20
 801019c:	4620      	mov	r0, r4
 801019e:	f001 fa13 	bl	80115c8 <uxr_init_base_object_request>
 80101a2:	4604      	mov	r4, r0
 80101a4:	a905      	add	r1, sp, #20
 80101a6:	a806      	add	r0, sp, #24
 80101a8:	f002 fbb0 	bl	801290c <uxr_serialize_DELETE_Payload>
 80101ac:	4620      	mov	r0, r4
 80101ae:	b00e      	add	sp, #56	; 0x38
 80101b0:	bd10      	pop	{r4, pc}
 80101b2:	bf00      	nop

080101b4 <uxr_common_create_entity>:
 80101b4:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80101b8:	b510      	push	{r4, lr}
 80101ba:	f1bc 0f01 	cmp.w	ip, #1
 80101be:	b08c      	sub	sp, #48	; 0x30
 80101c0:	4604      	mov	r4, r0
 80101c2:	9202      	str	r2, [sp, #8]
 80101c4:	bf0c      	ite	eq
 80101c6:	f003 0201 	andeq.w	r2, r3, #1
 80101ca:	2200      	movne	r2, #0
 80101cc:	330e      	adds	r3, #14
 80101ce:	9103      	str	r1, [sp, #12]
 80101d0:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 80101d4:	441a      	add	r2, r3
 80101d6:	ab04      	add	r3, sp, #16
 80101d8:	9101      	str	r1, [sp, #4]
 80101da:	2101      	movs	r1, #1
 80101dc:	b292      	uxth	r2, r2
 80101de:	9100      	str	r1, [sp, #0]
 80101e0:	9903      	ldr	r1, [sp, #12]
 80101e2:	f001 f8b5 	bl	8011350 <uxr_prepare_stream_to_write_submessage>
 80101e6:	b918      	cbnz	r0, 80101f0 <uxr_common_create_entity+0x3c>
 80101e8:	4604      	mov	r4, r0
 80101ea:	4620      	mov	r0, r4
 80101ec:	b00c      	add	sp, #48	; 0x30
 80101ee:	bd10      	pop	{r4, pc}
 80101f0:	9902      	ldr	r1, [sp, #8]
 80101f2:	4620      	mov	r0, r4
 80101f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80101f6:	f001 f9e7 	bl	80115c8 <uxr_init_base_object_request>
 80101fa:	4604      	mov	r4, r0
 80101fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80101fe:	a804      	add	r0, sp, #16
 8010200:	f002 fade 	bl	80127c0 <uxr_serialize_CREATE_Payload>
 8010204:	4620      	mov	r0, r4
 8010206:	b00c      	add	sp, #48	; 0x30
 8010208:	bd10      	pop	{r4, pc}
 801020a:	bf00      	nop

0801020c <uxr_buffer_create_participant_bin>:
 801020c:	b570      	push	{r4, r5, r6, lr}
 801020e:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8010212:	4605      	mov	r5, r0
 8010214:	ac11      	add	r4, sp, #68	; 0x44
 8010216:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 801021a:	2303      	movs	r3, #3
 801021c:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 8010220:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8010224:	7223      	strb	r3, [r4, #8]
 8010226:	2300      	movs	r3, #0
 8010228:	2201      	movs	r2, #1
 801022a:	f88d 3014 	strb.w	r3, [sp, #20]
 801022e:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 8010230:	7122      	strb	r2, [r4, #4]
 8010232:	b1cb      	cbz	r3, 8010268 <uxr_buffer_create_participant_bin+0x5c>
 8010234:	f88d 201c 	strb.w	r2, [sp, #28]
 8010238:	9308      	str	r3, [sp, #32]
 801023a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801023e:	a915      	add	r1, sp, #84	; 0x54
 8010240:	a809      	add	r0, sp, #36	; 0x24
 8010242:	f7ff ff23 	bl	801008c <ucdr_init_buffer>
 8010246:	a905      	add	r1, sp, #20
 8010248:	a809      	add	r0, sp, #36	; 0x24
 801024a:	f001 ff5b 	bl	8012104 <uxr_serialize_OBJK_DomainParticipant_Binary>
 801024e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010250:	9600      	str	r6, [sp, #0]
 8010252:	4628      	mov	r0, r5
 8010254:	9401      	str	r4, [sp, #4]
 8010256:	60e3      	str	r3, [r4, #12]
 8010258:	b29b      	uxth	r3, r3
 801025a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801025e:	f7ff ffa9 	bl	80101b4 <uxr_common_create_entity>
 8010262:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 8010266:	bd70      	pop	{r4, r5, r6, pc}
 8010268:	f88d 301c 	strb.w	r3, [sp, #28]
 801026c:	e7e5      	b.n	801023a <uxr_buffer_create_participant_bin+0x2e>
 801026e:	bf00      	nop

08010270 <uxr_buffer_create_topic_bin>:
 8010270:	b570      	push	{r4, r5, r6, lr}
 8010272:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 8010276:	4605      	mov	r5, r0
 8010278:	4618      	mov	r0, r3
 801027a:	9105      	str	r1, [sp, #20]
 801027c:	a997      	add	r1, sp, #604	; 0x25c
 801027e:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 8010282:	ac13      	add	r4, sp, #76	; 0x4c
 8010284:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010288:	2302      	movs	r3, #2
 801028a:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 801028e:	f000 f927 	bl	80104e0 <uxr_object_id_to_raw>
 8010292:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 8010294:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010298:	a917      	add	r1, sp, #92	; 0x5c
 801029a:	a80b      	add	r0, sp, #44	; 0x2c
 801029c:	9306      	str	r3, [sp, #24]
 801029e:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 80102a0:	930a      	str	r3, [sp, #40]	; 0x28
 80102a2:	2303      	movs	r3, #3
 80102a4:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 80102a8:	2301      	movs	r3, #1
 80102aa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80102ae:	2300      	movs	r3, #0
 80102b0:	f88d 301c 	strb.w	r3, [sp, #28]
 80102b4:	f7ff feea 	bl	801008c <ucdr_init_buffer>
 80102b8:	a906      	add	r1, sp, #24
 80102ba:	a80b      	add	r0, sp, #44	; 0x2c
 80102bc:	f001 ff44 	bl	8012148 <uxr_serialize_OBJK_Topic_Binary>
 80102c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80102c2:	4628      	mov	r0, r5
 80102c4:	9600      	str	r6, [sp, #0]
 80102c6:	9316      	str	r3, [sp, #88]	; 0x58
 80102c8:	b29b      	uxth	r3, r3
 80102ca:	9401      	str	r4, [sp, #4]
 80102cc:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80102d0:	f7ff ff70 	bl	80101b4 <uxr_common_create_entity>
 80102d4:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 80102d8:	bd70      	pop	{r4, r5, r6, pc}
 80102da:	bf00      	nop

080102dc <uxr_buffer_create_publisher_bin>:
 80102dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102de:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 80102e2:	2603      	movs	r6, #3
 80102e4:	4605      	mov	r5, r0
 80102e6:	4618      	mov	r0, r3
 80102e8:	9105      	str	r1, [sp, #20]
 80102ea:	a992      	add	r1, sp, #584	; 0x248
 80102ec:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 80102f0:	ac0e      	add	r4, sp, #56	; 0x38
 80102f2:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 80102f6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80102fa:	f000 f8f1 	bl	80104e0 <uxr_object_id_to_raw>
 80102fe:	2300      	movs	r3, #0
 8010300:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010304:	a912      	add	r1, sp, #72	; 0x48
 8010306:	a806      	add	r0, sp, #24
 8010308:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 801030c:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8010310:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 8010314:	f7ff feba 	bl	801008c <ucdr_init_buffer>
 8010318:	a993      	add	r1, sp, #588	; 0x24c
 801031a:	a806      	add	r0, sp, #24
 801031c:	f001 ffc8 	bl	80122b0 <uxr_serialize_OBJK_Publisher_Binary>
 8010320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010322:	4628      	mov	r0, r5
 8010324:	9700      	str	r7, [sp, #0]
 8010326:	9311      	str	r3, [sp, #68]	; 0x44
 8010328:	b29b      	uxth	r3, r3
 801032a:	9401      	str	r4, [sp, #4]
 801032c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010330:	f7ff ff40 	bl	80101b4 <uxr_common_create_entity>
 8010334:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 8010338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801033a:	bf00      	nop

0801033c <uxr_buffer_create_datawriter_bin>:
 801033c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010340:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8010344:	4606      	mov	r6, r0
 8010346:	4618      	mov	r0, r3
 8010348:	2703      	movs	r7, #3
 801034a:	ac1d      	add	r4, sp, #116	; 0x74
 801034c:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 8010350:	9105      	str	r1, [sp, #20]
 8010352:	a9a1      	add	r1, sp, #644	; 0x284
 8010354:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 8010358:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801035c:	2305      	movs	r3, #5
 801035e:	7123      	strb	r3, [r4, #4]
 8010360:	f000 f8be 	bl	80104e0 <uxr_object_id_to_raw>
 8010364:	a90e      	add	r1, sp, #56	; 0x38
 8010366:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 8010368:	7227      	strb	r7, [r4, #8]
 801036a:	f000 f8b9 	bl	80104e0 <uxr_object_id_to_raw>
 801036e:	2300      	movs	r3, #0
 8010370:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8010374:	3d00      	subs	r5, #0
 8010376:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 801037a:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 801037e:	bf18      	it	ne
 8010380:	2501      	movne	r5, #1
 8010382:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8010386:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 801038a:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 801038e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8010392:	2301      	movs	r3, #1
 8010394:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8010398:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 801039c:	bb8a      	cbnz	r2, 8010402 <uxr_buffer_create_datawriter_bin+0xc6>
 801039e:	f04f 0e23 	mov.w	lr, #35	; 0x23
 80103a2:	f04f 0c13 	mov.w	ip, #19
 80103a6:	250b      	movs	r5, #11
 80103a8:	2221      	movs	r2, #33	; 0x21
 80103aa:	2111      	movs	r1, #17
 80103ac:	2009      	movs	r0, #9
 80103ae:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80103b2:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 80103b6:	b923      	cbnz	r3, 80103c2 <uxr_buffer_create_datawriter_bin+0x86>
 80103b8:	4672      	mov	r2, lr
 80103ba:	4661      	mov	r1, ip
 80103bc:	4628      	mov	r0, r5
 80103be:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 80103c2:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 80103c6:	2b01      	cmp	r3, #1
 80103c8:	d025      	beq.n	8010416 <uxr_buffer_create_datawriter_bin+0xda>
 80103ca:	2b03      	cmp	r3, #3
 80103cc:	d029      	beq.n	8010422 <uxr_buffer_create_datawriter_bin+0xe6>
 80103ce:	b32b      	cbz	r3, 801041c <uxr_buffer_create_datawriter_bin+0xe0>
 80103d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80103d4:	a921      	add	r1, sp, #132	; 0x84
 80103d6:	a806      	add	r0, sp, #24
 80103d8:	f7ff fe58 	bl	801008c <ucdr_init_buffer>
 80103dc:	a90e      	add	r1, sp, #56	; 0x38
 80103de:	a806      	add	r0, sp, #24
 80103e0:	f001 ffdc 	bl	801239c <uxr_serialize_OBJK_DataWriter_Binary>
 80103e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103e6:	f8cd 8000 	str.w	r8, [sp]
 80103ea:	4630      	mov	r0, r6
 80103ec:	9401      	str	r4, [sp, #4]
 80103ee:	60e3      	str	r3, [r4, #12]
 80103f0:	b29b      	uxth	r3, r3
 80103f2:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80103f6:	f7ff fedd 	bl	80101b4 <uxr_common_create_entity>
 80103fa:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80103fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010402:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8010406:	f04f 0c12 	mov.w	ip, #18
 801040a:	250a      	movs	r5, #10
 801040c:	2220      	movs	r2, #32
 801040e:	2110      	movs	r1, #16
 8010410:	2008      	movs	r0, #8
 8010412:	2702      	movs	r7, #2
 8010414:	e7cd      	b.n	80103b2 <uxr_buffer_create_datawriter_bin+0x76>
 8010416:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 801041a:	e7d9      	b.n	80103d0 <uxr_buffer_create_datawriter_bin+0x94>
 801041c:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8010420:	e7d6      	b.n	80103d0 <uxr_buffer_create_datawriter_bin+0x94>
 8010422:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8010426:	e7d3      	b.n	80103d0 <uxr_buffer_create_datawriter_bin+0x94>

08010428 <uxr_buffer_create_replier_bin>:
 8010428:	b570      	push	{r4, r5, r6, lr}
 801042a:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 801042e:	4605      	mov	r5, r0
 8010430:	4618      	mov	r0, r3
 8010432:	9105      	str	r1, [sp, #20]
 8010434:	a999      	add	r1, sp, #612	; 0x264
 8010436:	f89d 6294 	ldrb.w	r6, [sp, #660]	; 0x294
 801043a:	ac15      	add	r4, sp, #84	; 0x54
 801043c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010440:	2308      	movs	r3, #8
 8010442:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 8010446:	f000 f84b 	bl	80104e0 <uxr_object_id_to_raw>
 801044a:	9b9e      	ldr	r3, [sp, #632]	; 0x278
 801044c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010450:	a919      	add	r1, sp, #100	; 0x64
 8010452:	a80d      	add	r0, sp, #52	; 0x34
 8010454:	9306      	str	r3, [sp, #24]
 8010456:	9b9f      	ldr	r3, [sp, #636]	; 0x27c
 8010458:	9307      	str	r3, [sp, #28]
 801045a:	9ba0      	ldr	r3, [sp, #640]	; 0x280
 801045c:	9308      	str	r3, [sp, #32]
 801045e:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8010460:	930c      	str	r3, [sp, #48]	; 0x30
 8010462:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010464:	930a      	str	r3, [sp, #40]	; 0x28
 8010466:	2301      	movs	r3, #1
 8010468:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801046c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8010470:	2303      	movs	r3, #3
 8010472:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8010476:	f7ff fe09 	bl	801008c <ucdr_init_buffer>
 801047a:	a906      	add	r1, sp, #24
 801047c:	a80d      	add	r0, sp, #52	; 0x34
 801047e:	f001 ffb9 	bl	80123f4 <uxr_serialize_OBJK_Replier_Binary>
 8010482:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010484:	4628      	mov	r0, r5
 8010486:	9600      	str	r6, [sp, #0]
 8010488:	9318      	str	r3, [sp, #96]	; 0x60
 801048a:	b29b      	uxth	r3, r3
 801048c:	9401      	str	r4, [sp, #4]
 801048e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010492:	f7ff fe8f 	bl	80101b4 <uxr_common_create_entity>
 8010496:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
 801049a:	bd70      	pop	{r4, r5, r6, pc}

0801049c <uxr_object_id>:
 801049c:	b082      	sub	sp, #8
 801049e:	2300      	movs	r3, #0
 80104a0:	f88d 1006 	strb.w	r1, [sp, #6]
 80104a4:	f360 030f 	bfi	r3, r0, #0, #16
 80104a8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80104ac:	f362 431f 	bfi	r3, r2, #16, #16
 80104b0:	4618      	mov	r0, r3
 80104b2:	b002      	add	sp, #8
 80104b4:	4770      	bx	lr
 80104b6:	bf00      	nop

080104b8 <uxr_object_id_from_raw>:
 80104b8:	7843      	ldrb	r3, [r0, #1]
 80104ba:	b082      	sub	sp, #8
 80104bc:	7801      	ldrb	r1, [r0, #0]
 80104be:	2000      	movs	r0, #0
 80104c0:	091a      	lsrs	r2, r3, #4
 80104c2:	f003 030f 	and.w	r3, r3, #15
 80104c6:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80104ca:	f88d 3006 	strb.w	r3, [sp, #6]
 80104ce:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80104d2:	f362 000f 	bfi	r0, r2, #0, #16
 80104d6:	f363 401f 	bfi	r0, r3, #16, #16
 80104da:	b002      	add	sp, #8
 80104dc:	4770      	bx	lr
 80104de:	bf00      	nop

080104e0 <uxr_object_id_to_raw>:
 80104e0:	4602      	mov	r2, r0
 80104e2:	f3c0 4303 	ubfx	r3, r0, #16, #4
 80104e6:	b082      	sub	sp, #8
 80104e8:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 80104ec:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 80104f0:	f881 c000 	strb.w	ip, [r1]
 80104f4:	7048      	strb	r0, [r1, #1]
 80104f6:	b002      	add	sp, #8
 80104f8:	4770      	bx	lr
 80104fa:	bf00      	nop

080104fc <on_get_fragmentation_info>:
 80104fc:	b500      	push	{lr}
 80104fe:	b08b      	sub	sp, #44	; 0x2c
 8010500:	4601      	mov	r1, r0
 8010502:	2204      	movs	r2, #4
 8010504:	a802      	add	r0, sp, #8
 8010506:	f7ff fdc1 	bl	801008c <ucdr_init_buffer>
 801050a:	f10d 0305 	add.w	r3, sp, #5
 801050e:	f10d 0206 	add.w	r2, sp, #6
 8010512:	a901      	add	r1, sp, #4
 8010514:	a802      	add	r0, sp, #8
 8010516:	f001 f9e1 	bl	80118dc <uxr_read_submessage_header>
 801051a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801051e:	2b0d      	cmp	r3, #13
 8010520:	d003      	beq.n	801052a <on_get_fragmentation_info+0x2e>
 8010522:	2000      	movs	r0, #0
 8010524:	b00b      	add	sp, #44	; 0x2c
 8010526:	f85d fb04 	ldr.w	pc, [sp], #4
 801052a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801052e:	f013 0f02 	tst.w	r3, #2
 8010532:	bf14      	ite	ne
 8010534:	2002      	movne	r0, #2
 8010536:	2001      	moveq	r0, #1
 8010538:	b00b      	add	sp, #44	; 0x2c
 801053a:	f85d fb04 	ldr.w	pc, [sp], #4
 801053e:	bf00      	nop

08010540 <read_submessage_get_info>:
 8010540:	b570      	push	{r4, r5, r6, lr}
 8010542:	2500      	movs	r5, #0
 8010544:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 8010548:	460e      	mov	r6, r1
 801054a:	4604      	mov	r4, r0
 801054c:	f44f 7224 	mov.w	r2, #656	; 0x290
 8010550:	4629      	mov	r1, r5
 8010552:	a810      	add	r0, sp, #64	; 0x40
 8010554:	9503      	str	r5, [sp, #12]
 8010556:	9504      	str	r5, [sp, #16]
 8010558:	f00b f994 	bl	801b884 <memset>
 801055c:	a903      	add	r1, sp, #12
 801055e:	4630      	mov	r0, r6
 8010560:	f002 f9be 	bl	80128e0 <uxr_deserialize_GET_INFO_Payload>
 8010564:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8010568:	4620      	mov	r0, r4
 801056a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801056e:	f001 f823 	bl	80115b8 <uxr_session_header_offset>
 8010572:	462b      	mov	r3, r5
 8010574:	220c      	movs	r2, #12
 8010576:	a905      	add	r1, sp, #20
 8010578:	9000      	str	r0, [sp, #0]
 801057a:	a808      	add	r0, sp, #32
 801057c:	f7ff fd74 	bl	8010068 <ucdr_init_buffer_origin_offset>
 8010580:	a910      	add	r1, sp, #64	; 0x40
 8010582:	a808      	add	r0, sp, #32
 8010584:	f002 fa20 	bl	80129c8 <uxr_serialize_INFO_Payload>
 8010588:	9b08      	ldr	r3, [sp, #32]
 801058a:	462a      	mov	r2, r5
 801058c:	4629      	mov	r1, r5
 801058e:	4620      	mov	r0, r4
 8010590:	f000 ffbe 	bl	8011510 <uxr_stamp_session_header>
 8010594:	a808      	add	r0, sp, #32
 8010596:	f7ff fda7 	bl	80100e8 <ucdr_buffer_length>
 801059a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801059c:	4602      	mov	r2, r0
 801059e:	a905      	add	r1, sp, #20
 80105a0:	e9d3 0400 	ldrd	r0, r4, [r3]
 80105a4:	47a0      	blx	r4
 80105a6:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 80105aa:	bd70      	pop	{r4, r5, r6, pc}

080105ac <write_submessage_acknack.isra.0>:
 80105ac:	b570      	push	{r4, r5, r6, lr}
 80105ae:	b092      	sub	sp, #72	; 0x48
 80105b0:	4605      	mov	r5, r0
 80105b2:	460e      	mov	r6, r1
 80105b4:	4614      	mov	r4, r2
 80105b6:	f000 ffff 	bl	80115b8 <uxr_session_header_offset>
 80105ba:	a905      	add	r1, sp, #20
 80105bc:	9000      	str	r0, [sp, #0]
 80105be:	2300      	movs	r3, #0
 80105c0:	a80a      	add	r0, sp, #40	; 0x28
 80105c2:	2211      	movs	r2, #17
 80105c4:	f7ff fd50 	bl	8010068 <ucdr_init_buffer_origin_offset>
 80105c8:	2218      	movs	r2, #24
 80105ca:	2300      	movs	r3, #0
 80105cc:	210a      	movs	r1, #10
 80105ce:	fb02 5404 	mla	r4, r2, r4, r5
 80105d2:	a80a      	add	r0, sp, #40	; 0x28
 80105d4:	2205      	movs	r2, #5
 80105d6:	3450      	adds	r4, #80	; 0x50
 80105d8:	f001 f966 	bl	80118a8 <uxr_buffer_submessage_header>
 80105dc:	a903      	add	r1, sp, #12
 80105de:	4620      	mov	r0, r4
 80105e0:	f008 fce2 	bl	8018fa8 <uxr_compute_acknack>
 80105e4:	ba40      	rev16	r0, r0
 80105e6:	a903      	add	r1, sp, #12
 80105e8:	f88d 6010 	strb.w	r6, [sp, #16]
 80105ec:	f8ad 000e 	strh.w	r0, [sp, #14]
 80105f0:	a80a      	add	r0, sp, #40	; 0x28
 80105f2:	f002 fa5b 	bl	8012aac <uxr_serialize_ACKNACK_Payload>
 80105f6:	2200      	movs	r2, #0
 80105f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105fa:	4628      	mov	r0, r5
 80105fc:	4611      	mov	r1, r2
 80105fe:	f000 ff87 	bl	8011510 <uxr_stamp_session_header>
 8010602:	a80a      	add	r0, sp, #40	; 0x28
 8010604:	f7ff fd70 	bl	80100e8 <ucdr_buffer_length>
 8010608:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 801060a:	4602      	mov	r2, r0
 801060c:	a905      	add	r1, sp, #20
 801060e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010612:	47a0      	blx	r4
 8010614:	b012      	add	sp, #72	; 0x48
 8010616:	bd70      	pop	{r4, r5, r6, pc}

08010618 <uxr_init_session>:
 8010618:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8010650 <uxr_init_session+0x38>
 801061c:	2300      	movs	r3, #0
 801061e:	b510      	push	{r4, lr}
 8010620:	4604      	mov	r4, r0
 8010622:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 8010626:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 801062a:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 801062e:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 8010632:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 8010636:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 801063a:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 801063e:	2181      	movs	r1, #129	; 0x81
 8010640:	f000 feca 	bl	80113d8 <uxr_init_session_info>
 8010644:	f104 0008 	add.w	r0, r4, #8
 8010648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801064c:	f001 b848 	b.w	80116e0 <uxr_init_stream_storage>
	...

08010658 <uxr_set_status_callback>:
 8010658:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 801065c:	4770      	bx	lr
 801065e:	bf00      	nop

08010660 <uxr_set_topic_callback>:
 8010660:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 8010664:	4770      	bx	lr
 8010666:	bf00      	nop

08010668 <uxr_set_request_callback>:
 8010668:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 801066c:	4770      	bx	lr
 801066e:	bf00      	nop

08010670 <uxr_set_reply_callback>:
 8010670:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 8010674:	4770      	bx	lr
 8010676:	bf00      	nop

08010678 <uxr_create_output_best_effort_stream>:
 8010678:	b510      	push	{r4, lr}
 801067a:	4604      	mov	r4, r0
 801067c:	b084      	sub	sp, #16
 801067e:	e9cd 2100 	strd	r2, r1, [sp]
 8010682:	f000 ff99 	bl	80115b8 <uxr_session_header_offset>
 8010686:	4603      	mov	r3, r0
 8010688:	f104 0008 	add.w	r0, r4, #8
 801068c:	e9dd 2100 	ldrd	r2, r1, [sp]
 8010690:	b004      	add	sp, #16
 8010692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010696:	f001 b869 	b.w	801176c <uxr_add_output_best_effort_buffer>
 801069a:	bf00      	nop

0801069c <uxr_create_output_reliable_stream>:
 801069c:	b530      	push	{r4, r5, lr}
 801069e:	b089      	sub	sp, #36	; 0x24
 80106a0:	4604      	mov	r4, r0
 80106a2:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80106a6:	9303      	str	r3, [sp, #12]
 80106a8:	f000 ff86 	bl	80115b8 <uxr_session_header_offset>
 80106ac:	4605      	mov	r5, r0
 80106ae:	9905      	ldr	r1, [sp, #20]
 80106b0:	f104 0008 	add.w	r0, r4, #8
 80106b4:	9500      	str	r5, [sp, #0]
 80106b6:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80106ba:	f001 f86b 	bl	8011794 <uxr_add_output_reliable_buffer>
 80106be:	2200      	movs	r2, #0
 80106c0:	fa5f fc80 	uxtb.w	ip, r0
 80106c4:	f3c0 2407 	ubfx	r4, r0, #8, #8
 80106c8:	f3c0 4107 	ubfx	r1, r0, #16, #8
 80106cc:	0e03      	lsrs	r3, r0, #24
 80106ce:	f36c 0207 	bfi	r2, ip, #0, #8
 80106d2:	f364 220f 	bfi	r2, r4, #8, #8
 80106d6:	f361 4217 	bfi	r2, r1, #16, #8
 80106da:	f363 621f 	bfi	r2, r3, #24, #8
 80106de:	4610      	mov	r0, r2
 80106e0:	b009      	add	sp, #36	; 0x24
 80106e2:	bd30      	pop	{r4, r5, pc}

080106e4 <uxr_create_input_best_effort_stream>:
 80106e4:	b082      	sub	sp, #8
 80106e6:	3008      	adds	r0, #8
 80106e8:	b002      	add	sp, #8
 80106ea:	f001 b86d 	b.w	80117c8 <uxr_add_input_best_effort_buffer>
 80106ee:	bf00      	nop

080106f0 <uxr_create_input_reliable_stream>:
 80106f0:	b510      	push	{r4, lr}
 80106f2:	4c0c      	ldr	r4, [pc, #48]	; (8010724 <uxr_create_input_reliable_stream+0x34>)
 80106f4:	b084      	sub	sp, #16
 80106f6:	3008      	adds	r0, #8
 80106f8:	9400      	str	r4, [sp, #0]
 80106fa:	f001 f87b 	bl	80117f4 <uxr_add_input_reliable_buffer>
 80106fe:	2200      	movs	r2, #0
 8010700:	fa5f fe80 	uxtb.w	lr, r0
 8010704:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8010708:	f3c0 4107 	ubfx	r1, r0, #16, #8
 801070c:	0e03      	lsrs	r3, r0, #24
 801070e:	f36e 0207 	bfi	r2, lr, #0, #8
 8010712:	f36c 220f 	bfi	r2, ip, #8, #8
 8010716:	f361 4217 	bfi	r2, r1, #16, #8
 801071a:	f363 621f 	bfi	r2, r3, #24, #8
 801071e:	4610      	mov	r0, r2
 8010720:	b004      	add	sp, #16
 8010722:	bd10      	pop	{r4, pc}
 8010724:	080104fd 	.word	0x080104fd

08010728 <uxr_epoch_nanos>:
 8010728:	b510      	push	{r4, lr}
 801072a:	4604      	mov	r4, r0
 801072c:	f001 f91e 	bl	801196c <uxr_nanos>
 8010730:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 8010734:	1ac0      	subs	r0, r0, r3
 8010736:	eb61 0102 	sbc.w	r1, r1, r2
 801073a:	bd10      	pop	{r4, pc}

0801073c <uxr_flash_output_streams>:
 801073c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010740:	7e03      	ldrb	r3, [r0, #24]
 8010742:	b084      	sub	sp, #16
 8010744:	4604      	mov	r4, r0
 8010746:	b1fb      	cbz	r3, 8010788 <uxr_flash_output_streams+0x4c>
 8010748:	f04f 0900 	mov.w	r9, #0
 801074c:	f10d 0802 	add.w	r8, sp, #2
 8010750:	af03      	add	r7, sp, #12
 8010752:	ae02      	add	r6, sp, #8
 8010754:	4648      	mov	r0, r9
 8010756:	2201      	movs	r2, #1
 8010758:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 801075c:	4611      	mov	r1, r2
 801075e:	3508      	adds	r5, #8
 8010760:	f000 ff64 	bl	801162c <uxr_stream_id>
 8010764:	4684      	mov	ip, r0
 8010766:	4643      	mov	r3, r8
 8010768:	463a      	mov	r2, r7
 801076a:	4631      	mov	r1, r6
 801076c:	4628      	mov	r0, r5
 801076e:	f8cd c004 	str.w	ip, [sp, #4]
 8010772:	f008 fca3 	bl	80190bc <uxr_prepare_best_effort_buffer_to_send>
 8010776:	2800      	cmp	r0, #0
 8010778:	d13d      	bne.n	80107f6 <uxr_flash_output_streams+0xba>
 801077a:	f109 0901 	add.w	r9, r9, #1
 801077e:	7e23      	ldrb	r3, [r4, #24]
 8010780:	fa5f f089 	uxtb.w	r0, r9
 8010784:	4283      	cmp	r3, r0
 8010786:	d8e6      	bhi.n	8010756 <uxr_flash_output_streams+0x1a>
 8010788:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801078c:	b383      	cbz	r3, 80107f0 <uxr_flash_output_streams+0xb4>
 801078e:	f04f 0900 	mov.w	r9, #0
 8010792:	f10d 0802 	add.w	r8, sp, #2
 8010796:	af03      	add	r7, sp, #12
 8010798:	ae02      	add	r6, sp, #8
 801079a:	4648      	mov	r0, r9
 801079c:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 80107a0:	2201      	movs	r2, #1
 80107a2:	2102      	movs	r1, #2
 80107a4:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80107a8:	f000 ff40 	bl	801162c <uxr_stream_id>
 80107ac:	9001      	str	r0, [sp, #4]
 80107ae:	3520      	adds	r5, #32
 80107b0:	e00c      	b.n	80107cc <uxr_flash_output_streams+0x90>
 80107b2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80107b6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80107ba:	9b02      	ldr	r3, [sp, #8]
 80107bc:	f000 fea8 	bl	8011510 <uxr_stamp_session_header>
 80107c0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80107c2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80107c6:	e9d3 0a00 	ldrd	r0, sl, [r3]
 80107ca:	47d0      	blx	sl
 80107cc:	4643      	mov	r3, r8
 80107ce:	463a      	mov	r2, r7
 80107d0:	4631      	mov	r1, r6
 80107d2:	4628      	mov	r0, r5
 80107d4:	f008 fe94 	bl	8019500 <uxr_prepare_next_reliable_buffer_to_send>
 80107d8:	4603      	mov	r3, r0
 80107da:	4620      	mov	r0, r4
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d1e8      	bne.n	80107b2 <uxr_flash_output_streams+0x76>
 80107e0:	f109 0901 	add.w	r9, r9, #1
 80107e4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80107e8:	fa5f f089 	uxtb.w	r0, r9
 80107ec:	4283      	cmp	r3, r0
 80107ee:	d8d5      	bhi.n	801079c <uxr_flash_output_streams+0x60>
 80107f0:	b004      	add	sp, #16
 80107f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107f6:	9b02      	ldr	r3, [sp, #8]
 80107f8:	4620      	mov	r0, r4
 80107fa:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80107fe:	f109 0901 	add.w	r9, r9, #1
 8010802:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010806:	f000 fe83 	bl	8011510 <uxr_stamp_session_header>
 801080a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801080c:	9a03      	ldr	r2, [sp, #12]
 801080e:	685d      	ldr	r5, [r3, #4]
 8010810:	6818      	ldr	r0, [r3, #0]
 8010812:	9902      	ldr	r1, [sp, #8]
 8010814:	47a8      	blx	r5
 8010816:	7e23      	ldrb	r3, [r4, #24]
 8010818:	fa5f f089 	uxtb.w	r0, r9
 801081c:	4283      	cmp	r3, r0
 801081e:	d89a      	bhi.n	8010756 <uxr_flash_output_streams+0x1a>
 8010820:	e7b2      	b.n	8010788 <uxr_flash_output_streams+0x4c>
 8010822:	bf00      	nop

08010824 <read_submessage_info>:
 8010824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010828:	460d      	mov	r5, r1
 801082a:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 801082e:	4606      	mov	r6, r0
 8010830:	4669      	mov	r1, sp
 8010832:	4628      	mov	r0, r5
 8010834:	f001 ff66 	bl	8012704 <uxr_deserialize_BaseObjectReply>
 8010838:	4604      	mov	r4, r0
 801083a:	a902      	add	r1, sp, #8
 801083c:	4628      	mov	r0, r5
 801083e:	f89d 7005 	ldrb.w	r7, [sp, #5]
 8010842:	f7fe f8ab 	bl	800e99c <ucdr_deserialize_bool>
 8010846:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801084a:	4004      	ands	r4, r0
 801084c:	b2e4      	uxtb	r4, r4
 801084e:	b95b      	cbnz	r3, 8010868 <read_submessage_info+0x44>
 8010850:	a987      	add	r1, sp, #540	; 0x21c
 8010852:	4628      	mov	r0, r5
 8010854:	f7fe f8a2 	bl	800e99c <ucdr_deserialize_bool>
 8010858:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 801085c:	4680      	mov	r8, r0
 801085e:	b94b      	cbnz	r3, 8010874 <read_submessage_info+0x50>
 8010860:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8010864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010868:	a903      	add	r1, sp, #12
 801086a:	4628      	mov	r0, r5
 801086c:	f001 fdf6 	bl	801245c <uxr_deserialize_ObjectVariant>
 8010870:	4004      	ands	r4, r0
 8010872:	e7ed      	b.n	8010850 <read_submessage_info+0x2c>
 8010874:	a988      	add	r1, sp, #544	; 0x220
 8010876:	4628      	mov	r0, r5
 8010878:	f7fe f8be 	bl	800e9f8 <ucdr_deserialize_uint8_t>
 801087c:	ea14 0f08 	tst.w	r4, r8
 8010880:	d0ee      	beq.n	8010860 <read_submessage_info+0x3c>
 8010882:	2800      	cmp	r0, #0
 8010884:	d0ec      	beq.n	8010860 <read_submessage_info+0x3c>
 8010886:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 801088a:	2b0d      	cmp	r3, #13
 801088c:	d1e8      	bne.n	8010860 <read_submessage_info+0x3c>
 801088e:	a98a      	add	r1, sp, #552	; 0x228
 8010890:	4628      	mov	r0, r5
 8010892:	f7fe fed7 	bl	800f644 <ucdr_deserialize_int16_t>
 8010896:	b138      	cbz	r0, 80108a8 <read_submessage_info+0x84>
 8010898:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 801089c:	2b00      	cmp	r3, #0
 801089e:	dd06      	ble.n	80108ae <read_submessage_info+0x8a>
 80108a0:	2f00      	cmp	r7, #0
 80108a2:	bf14      	ite	ne
 80108a4:	2001      	movne	r0, #1
 80108a6:	2002      	moveq	r0, #2
 80108a8:	f886 00b5 	strb.w	r0, [r6, #181]	; 0xb5
 80108ac:	e7d8      	b.n	8010860 <read_submessage_info+0x3c>
 80108ae:	2000      	movs	r0, #0
 80108b0:	e7fa      	b.n	80108a8 <read_submessage_info+0x84>
 80108b2:	bf00      	nop

080108b4 <read_submessage_list>:
 80108b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108b8:	4604      	mov	r4, r0
 80108ba:	b097      	sub	sp, #92	; 0x5c
 80108bc:	460d      	mov	r5, r1
 80108be:	4ec1      	ldr	r6, [pc, #772]	; (8010bc4 <read_submessage_list+0x310>)
 80108c0:	9209      	str	r2, [sp, #36]	; 0x24
 80108c2:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 80108c6:	aa0c      	add	r2, sp, #48	; 0x30
 80108c8:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 80108cc:	4628      	mov	r0, r5
 80108ce:	f001 f805 	bl	80118dc <uxr_read_submessage_header>
 80108d2:	2800      	cmp	r0, #0
 80108d4:	f000 8142 	beq.w	8010b5c <read_submessage_list+0x2a8>
 80108d8:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 80108dc:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 80108e0:	3b02      	subs	r3, #2
 80108e2:	2b0d      	cmp	r3, #13
 80108e4:	d8ed      	bhi.n	80108c2 <read_submessage_list+0xe>
 80108e6:	a101      	add	r1, pc, #4	; (adr r1, 80108ec <read_submessage_list+0x38>)
 80108e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80108ec:	08010b53 	.word	0x08010b53
 80108f0:	080108c3 	.word	0x080108c3
 80108f4:	08010b43 	.word	0x08010b43
 80108f8:	08010ae1 	.word	0x08010ae1
 80108fc:	08010ad7 	.word	0x08010ad7
 8010900:	080108c3 	.word	0x080108c3
 8010904:	080108c3 	.word	0x080108c3
 8010908:	08010a2d 	.word	0x08010a2d
 801090c:	080109bf 	.word	0x080109bf
 8010910:	0801097f 	.word	0x0801097f
 8010914:	080108c3 	.word	0x080108c3
 8010918:	080108c3 	.word	0x080108c3
 801091c:	080108c3 	.word	0x080108c3
 8010920:	08010925 	.word	0x08010925
 8010924:	a910      	add	r1, sp, #64	; 0x40
 8010926:	4628      	mov	r0, r5
 8010928:	f002 f914 	bl	8012b54 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 801092c:	f8d4 8090 	ldr.w	r8, [r4, #144]	; 0x90
 8010930:	f1b8 0f00 	cmp.w	r8, #0
 8010934:	f000 811a 	beq.w	8010b6c <read_submessage_list+0x2b8>
 8010938:	f001 f818 	bl	801196c <uxr_nanos>
 801093c:	4602      	mov	r2, r0
 801093e:	460b      	mov	r3, r1
 8010940:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8010944:	2100      	movs	r1, #0
 8010946:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8010948:	9006      	str	r0, [sp, #24]
 801094a:	468c      	mov	ip, r1
 801094c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801094e:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8010952:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8010954:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 8010958:	468c      	mov	ip, r1
 801095a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801095c:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8010960:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 8010964:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	; 0x48
 8010968:	fbc7 0106 	smlal	r0, r1, r7, r6
 801096c:	e9cd 0100 	strd	r0, r1, [sp]
 8010970:	4620      	mov	r0, r4
 8010972:	47c0      	blx	r8
 8010974:	f04f 0301 	mov.w	r3, #1
 8010978:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 801097c:	e7a1      	b.n	80108c2 <read_submessage_list+0xe>
 801097e:	a910      	add	r1, sp, #64	; 0x40
 8010980:	4628      	mov	r0, r5
 8010982:	f002 f8d3 	bl	8012b2c <uxr_deserialize_HEARTBEAT_Payload>
 8010986:	2100      	movs	r1, #0
 8010988:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801098c:	f000 fe7c 	bl	8011688 <uxr_stream_id_from_raw>
 8010990:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8010994:	900f      	str	r0, [sp, #60]	; 0x3c
 8010996:	f104 0008 	add.w	r0, r4, #8
 801099a:	4641      	mov	r1, r8
 801099c:	f000 ff62 	bl	8011864 <uxr_get_input_reliable_stream>
 80109a0:	2800      	cmp	r0, #0
 80109a2:	d08e      	beq.n	80108c2 <read_submessage_list+0xe>
 80109a4:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 80109a8:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 80109ac:	f008 faf0 	bl	8018f90 <uxr_process_heartbeat>
 80109b0:	4642      	mov	r2, r8
 80109b2:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 80109b6:	4620      	mov	r0, r4
 80109b8:	f7ff fdf8 	bl	80105ac <write_submessage_acknack.isra.0>
 80109bc:	e781      	b.n	80108c2 <read_submessage_list+0xe>
 80109be:	a910      	add	r1, sp, #64	; 0x40
 80109c0:	4628      	mov	r0, r5
 80109c2:	f002 f88b 	bl	8012adc <uxr_deserialize_ACKNACK_Payload>
 80109c6:	2100      	movs	r1, #0
 80109c8:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80109cc:	f000 fe5c 	bl	8011688 <uxr_stream_id_from_raw>
 80109d0:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80109d4:	900d      	str	r0, [sp, #52]	; 0x34
 80109d6:	f104 0008 	add.w	r0, r4, #8
 80109da:	f000 ff2d 	bl	8011838 <uxr_get_output_reliable_stream>
 80109de:	4680      	mov	r8, r0
 80109e0:	2800      	cmp	r0, #0
 80109e2:	f43f af6e 	beq.w	80108c2 <read_submessage_list+0xe>
 80109e6:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 80109ea:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 80109ee:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 80109f2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80109f6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80109fa:	b289      	uxth	r1, r1
 80109fc:	f008 fe28 	bl	8019650 <uxr_process_acknack>
 8010a00:	4640      	mov	r0, r8
 8010a02:	f008 fde9 	bl	80195d8 <uxr_begin_output_nack_buffer_it>
 8010a06:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 8010a0a:	e005      	b.n	8010a18 <read_submessage_list+0x164>
 8010a0c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010a0e:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 8010a12:	e9d3 0900 	ldrd	r0, r9, [r3]
 8010a16:	47c8      	blx	r9
 8010a18:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 8010a1c:	aa0f      	add	r2, sp, #60	; 0x3c
 8010a1e:	4651      	mov	r1, sl
 8010a20:	4640      	mov	r0, r8
 8010a22:	f008 fddb 	bl	80195dc <uxr_next_reliable_nack_buffer_to_send>
 8010a26:	2800      	cmp	r0, #0
 8010a28:	d1f0      	bne.n	8010a0c <read_submessage_list+0x158>
 8010a2a:	e74a      	b.n	80108c2 <read_submessage_list+0xe>
 8010a2c:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8010a30:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8010a34:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 8010a38:	4628      	mov	r0, r5
 8010a3a:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 8010a3e:	4651      	mov	r1, sl
 8010a40:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8010a44:	f1a8 0804 	sub.w	r8, r8, #4
 8010a48:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 8010a4c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 8010a50:	fa1f f888 	uxth.w	r8, r8
 8010a54:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8010a58:	f009 090e 	and.w	r9, r9, #14
 8010a5c:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 8010a60:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8010a64:	f001 fd9c 	bl	80125a0 <uxr_deserialize_BaseObjectRequest>
 8010a68:	4650      	mov	r0, sl
 8010a6a:	a90f      	add	r1, sp, #60	; 0x3c
 8010a6c:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8010a70:	f000 fdca 	bl	8011608 <uxr_parse_base_object_request>
 8010a74:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010a76:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 8010a7a:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 8010a7e:	9110      	str	r1, [sp, #64]	; 0x40
 8010a80:	f1bb 0f00 	cmp.w	fp, #0
 8010a84:	d006      	beq.n	8010a94 <read_submessage_list+0x1e0>
 8010a86:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8010a8a:	4652      	mov	r2, sl
 8010a8c:	4620      	mov	r0, r4
 8010a8e:	9300      	str	r3, [sp, #0]
 8010a90:	2300      	movs	r3, #0
 8010a92:	47d8      	blx	fp
 8010a94:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8010a96:	b182      	cbz	r2, 8010aba <read_submessage_list+0x206>
 8010a98:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8010a9a:	f04f 0c00 	mov.w	ip, #0
 8010a9e:	3902      	subs	r1, #2
 8010aa0:	e003      	b.n	8010aaa <read_submessage_list+0x1f6>
 8010aa2:	f10c 0c01 	add.w	ip, ip, #1
 8010aa6:	4594      	cmp	ip, r2
 8010aa8:	d007      	beq.n	8010aba <read_submessage_list+0x206>
 8010aaa:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8010aae:	4553      	cmp	r3, sl
 8010ab0:	d1f7      	bne.n	8010aa2 <read_submessage_list+0x1ee>
 8010ab2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8010ab4:	2200      	movs	r2, #0
 8010ab6:	f803 200c 	strb.w	r2, [r3, ip]
 8010aba:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8010abe:	464b      	mov	r3, r9
 8010ac0:	4642      	mov	r2, r8
 8010ac2:	4620      	mov	r0, r4
 8010ac4:	9102      	str	r1, [sp, #8]
 8010ac6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010ac8:	9101      	str	r1, [sp, #4]
 8010aca:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010acc:	9100      	str	r1, [sp, #0]
 8010ace:	4629      	mov	r1, r5
 8010ad0:	f008 fe80 	bl	80197d4 <read_submessage_format>
 8010ad4:	e6f5      	b.n	80108c2 <read_submessage_list+0xe>
 8010ad6:	4629      	mov	r1, r5
 8010ad8:	4620      	mov	r0, r4
 8010ada:	f7ff fea3 	bl	8010824 <read_submessage_info>
 8010ade:	e6f0      	b.n	80108c2 <read_submessage_list+0xe>
 8010ae0:	2a00      	cmp	r2, #0
 8010ae2:	d03e      	beq.n	8010b62 <read_submessage_list+0x2ae>
 8010ae4:	a910      	add	r1, sp, #64	; 0x40
 8010ae6:	4628      	mov	r0, r5
 8010ae8:	f001 ff50 	bl	801298c <uxr_deserialize_STATUS_Payload>
 8010aec:	a90e      	add	r1, sp, #56	; 0x38
 8010aee:	aa0d      	add	r2, sp, #52	; 0x34
 8010af0:	a810      	add	r0, sp, #64	; 0x40
 8010af2:	f000 fd89 	bl	8011608 <uxr_parse_base_object_request>
 8010af6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8010af8:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 8010afc:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 8010b00:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
 8010b04:	910f      	str	r1, [sp, #60]	; 0x3c
 8010b06:	f1ba 0f00 	cmp.w	sl, #0
 8010b0a:	d006      	beq.n	8010b1a <read_submessage_list+0x266>
 8010b0c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8010b10:	4642      	mov	r2, r8
 8010b12:	4620      	mov	r0, r4
 8010b14:	9300      	str	r3, [sp, #0]
 8010b16:	464b      	mov	r3, r9
 8010b18:	47d0      	blx	sl
 8010b1a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8010b1c:	2a00      	cmp	r2, #0
 8010b1e:	f43f aed0 	beq.w	80108c2 <read_submessage_list+0xe>
 8010b22:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8010b24:	2100      	movs	r1, #0
 8010b26:	3802      	subs	r0, #2
 8010b28:	e003      	b.n	8010b32 <read_submessage_list+0x27e>
 8010b2a:	3101      	adds	r1, #1
 8010b2c:	4291      	cmp	r1, r2
 8010b2e:	f43f aec8 	beq.w	80108c2 <read_submessage_list+0xe>
 8010b32:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8010b36:	4543      	cmp	r3, r8
 8010b38:	d1f7      	bne.n	8010b2a <read_submessage_list+0x276>
 8010b3a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8010b3c:	f803 9001 	strb.w	r9, [r3, r1]
 8010b40:	e6bf      	b.n	80108c2 <read_submessage_list+0xe>
 8010b42:	2a00      	cmp	r2, #0
 8010b44:	f47f aebd 	bne.w	80108c2 <read_submessage_list+0xe>
 8010b48:	4629      	mov	r1, r5
 8010b4a:	4620      	mov	r0, r4
 8010b4c:	f000 fca0 	bl	8011490 <uxr_read_create_session_status>
 8010b50:	e6b7      	b.n	80108c2 <read_submessage_list+0xe>
 8010b52:	4629      	mov	r1, r5
 8010b54:	4620      	mov	r0, r4
 8010b56:	f7ff fcf3 	bl	8010540 <read_submessage_get_info>
 8010b5a:	e6b2      	b.n	80108c2 <read_submessage_list+0xe>
 8010b5c:	b017      	add	sp, #92	; 0x5c
 8010b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b62:	4629      	mov	r1, r5
 8010b64:	4620      	mov	r0, r4
 8010b66:	f000 fca1 	bl	80114ac <uxr_read_delete_session_status>
 8010b6a:	e6aa      	b.n	80108c2 <read_submessage_list+0xe>
 8010b6c:	f000 fefe 	bl	801196c <uxr_nanos>
 8010b70:	4642      	mov	r2, r8
 8010b72:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8010b74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010b76:	fbc7 3206 	smlal	r3, r2, r7, r6
 8010b7a:	1818      	adds	r0, r3, r0
 8010b7c:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8010b7e:	eb42 0101 	adc.w	r1, r2, r1
 8010b82:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010b84:	4642      	mov	r2, r8
 8010b86:	fbc7 3206 	smlal	r3, r2, r7, r6
 8010b8a:	469c      	mov	ip, r3
 8010b8c:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	; 0x40
 8010b90:	fbc3 7806 	smlal	r7, r8, r3, r6
 8010b94:	4643      	mov	r3, r8
 8010b96:	eb1c 0c07 	adds.w	ip, ip, r7
 8010b9a:	eb42 0203 	adc.w	r2, r2, r3
 8010b9e:	ebb0 030c 	subs.w	r3, r0, ip
 8010ba2:	eb61 0202 	sbc.w	r2, r1, r2
 8010ba6:	2a00      	cmp	r2, #0
 8010ba8:	db08      	blt.n	8010bbc <read_submessage_list+0x308>
 8010baa:	085b      	lsrs	r3, r3, #1
 8010bac:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8010bb0:	1052      	asrs	r2, r2, #1
 8010bb2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 8010bb6:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
 8010bba:	e6db      	b.n	8010974 <read_submessage_list+0xc0>
 8010bbc:	3301      	adds	r3, #1
 8010bbe:	f142 0200 	adc.w	r2, r2, #0
 8010bc2:	e7f2      	b.n	8010baa <read_submessage_list+0x2f6>
 8010bc4:	3b9aca00 	.word	0x3b9aca00

08010bc8 <listen_message_reliably>:
 8010bc8:	1e0b      	subs	r3, r1, #0
 8010bca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bce:	bfb8      	it	lt
 8010bd0:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8010bd4:	b09d      	sub	sp, #116	; 0x74
 8010bd6:	4680      	mov	r8, r0
 8010bd8:	9305      	str	r3, [sp, #20]
 8010bda:	f000 feab 	bl	8011934 <uxr_millis>
 8010bde:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 8010be2:	4681      	mov	r9, r0
 8010be4:	2a00      	cmp	r2, #0
 8010be6:	f000 809a 	beq.w	8010d1e <listen_message_reliably+0x156>
 8010bea:	2600      	movs	r6, #0
 8010bec:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010bf0:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8010bf4:	460f      	mov	r7, r1
 8010bf6:	4630      	mov	r0, r6
 8010bf8:	9303      	str	r3, [sp, #12]
 8010bfa:	e00e      	b.n	8010c1a <listen_message_reliably+0x52>
 8010bfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010bfe:	3601      	adds	r6, #1
 8010c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c02:	455a      	cmp	r2, fp
 8010c04:	9903      	ldr	r1, [sp, #12]
 8010c06:	b2f0      	uxtb	r0, r6
 8010c08:	eb73 0101 	sbcs.w	r1, r3, r1
 8010c0c:	da01      	bge.n	8010c12 <listen_message_reliably+0x4a>
 8010c0e:	4693      	mov	fp, r2
 8010c10:	9303      	str	r3, [sp, #12]
 8010c12:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 8010c16:	4283      	cmp	r3, r0
 8010c18:	d95f      	bls.n	8010cda <listen_message_reliably+0x112>
 8010c1a:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8010c1e:	2102      	movs	r1, #2
 8010c20:	2201      	movs	r2, #1
 8010c22:	00e4      	lsls	r4, r4, #3
 8010c24:	f000 fd02 	bl	801162c <uxr_stream_id>
 8010c28:	4601      	mov	r1, r0
 8010c2a:	f104 0520 	add.w	r5, r4, #32
 8010c2e:	463b      	mov	r3, r7
 8010c30:	464a      	mov	r2, r9
 8010c32:	9109      	str	r1, [sp, #36]	; 0x24
 8010c34:	4445      	add	r5, r8
 8010c36:	4628      	mov	r0, r5
 8010c38:	f008 fca2 	bl	8019580 <uxr_update_output_stream_heartbeat_timestamp>
 8010c3c:	eb08 0304 	add.w	r3, r8, r4
 8010c40:	2800      	cmp	r0, #0
 8010c42:	d0db      	beq.n	8010bfc <listen_message_reliably+0x34>
 8010c44:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 8010c48:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 8010c4c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8010c50:	4640      	mov	r0, r8
 8010c52:	3501      	adds	r5, #1
 8010c54:	4444      	add	r4, r8
 8010c56:	9304      	str	r3, [sp, #16]
 8010c58:	f000 fcae 	bl	80115b8 <uxr_session_header_offset>
 8010c5c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8010c60:	2300      	movs	r3, #0
 8010c62:	2211      	movs	r2, #17
 8010c64:	a90c      	add	r1, sp, #48	; 0x30
 8010c66:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8010c6a:	9000      	str	r0, [sp, #0]
 8010c6c:	4650      	mov	r0, sl
 8010c6e:	3601      	adds	r6, #1
 8010c70:	f7ff f9fa 	bl	8010068 <ucdr_init_buffer_origin_offset>
 8010c74:	2300      	movs	r3, #0
 8010c76:	2205      	movs	r2, #5
 8010c78:	210b      	movs	r1, #11
 8010c7a:	4650      	mov	r0, sl
 8010c7c:	f000 fe14 	bl	80118a8 <uxr_buffer_submessage_header>
 8010c80:	2101      	movs	r1, #1
 8010c82:	8968      	ldrh	r0, [r5, #10]
 8010c84:	f008 fe70 	bl	8019968 <uxr_seq_num_add>
 8010c88:	892b      	ldrh	r3, [r5, #8]
 8010c8a:	4602      	mov	r2, r0
 8010c8c:	a90a      	add	r1, sp, #40	; 0x28
 8010c8e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8010c92:	4650      	mov	r0, sl
 8010c94:	9b04      	ldr	r3, [sp, #16]
 8010c96:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8010c9a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8010c9e:	f001 ff31 	bl	8012b04 <uxr_serialize_HEARTBEAT_Payload>
 8010ca2:	2200      	movs	r2, #0
 8010ca4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010ca6:	4640      	mov	r0, r8
 8010ca8:	4611      	mov	r1, r2
 8010caa:	f000 fc31 	bl	8011510 <uxr_stamp_session_header>
 8010cae:	4650      	mov	r0, sl
 8010cb0:	f7ff fa1a 	bl	80100e8 <ucdr_buffer_length>
 8010cb4:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8010cb8:	4602      	mov	r2, r0
 8010cba:	a90c      	add	r1, sp, #48	; 0x30
 8010cbc:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010cc0:	47a8      	blx	r5
 8010cc2:	9903      	ldr	r1, [sp, #12]
 8010cc4:	b2f0      	uxtb	r0, r6
 8010cc6:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8010cca:	455a      	cmp	r2, fp
 8010ccc:	eb73 0101 	sbcs.w	r1, r3, r1
 8010cd0:	db9d      	blt.n	8010c0e <listen_message_reliably+0x46>
 8010cd2:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 8010cd6:	4283      	cmp	r3, r0
 8010cd8:	d89f      	bhi.n	8010c1a <listen_message_reliably+0x52>
 8010cda:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010cde:	9a03      	ldr	r2, [sp, #12]
 8010ce0:	429a      	cmp	r2, r3
 8010ce2:	bf08      	it	eq
 8010ce4:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 8010ce8:	d019      	beq.n	8010d1e <listen_message_reliably+0x156>
 8010cea:	ebab 0309 	sub.w	r3, fp, r9
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	9d05      	ldr	r5, [sp, #20]
 8010cf2:	f8d8 0070 	ldr.w	r0, [r8, #112]	; 0x70
 8010cf6:	aa08      	add	r2, sp, #32
 8010cf8:	bf08      	it	eq
 8010cfa:	2301      	moveq	r3, #1
 8010cfc:	a907      	add	r1, sp, #28
 8010cfe:	6884      	ldr	r4, [r0, #8]
 8010d00:	429d      	cmp	r5, r3
 8010d02:	6800      	ldr	r0, [r0, #0]
 8010d04:	bfa8      	it	ge
 8010d06:	461d      	movge	r5, r3
 8010d08:	462b      	mov	r3, r5
 8010d0a:	47a0      	blx	r4
 8010d0c:	b948      	cbnz	r0, 8010d22 <listen_message_reliably+0x15a>
 8010d0e:	9b05      	ldr	r3, [sp, #20]
 8010d10:	1b5b      	subs	r3, r3, r5
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	9305      	str	r3, [sp, #20]
 8010d16:	f73f af60 	bgt.w	8010bda <listen_message_reliably+0x12>
 8010d1a:	4604      	mov	r4, r0
 8010d1c:	e012      	b.n	8010d44 <listen_message_reliably+0x17c>
 8010d1e:	9b05      	ldr	r3, [sp, #20]
 8010d20:	e7e5      	b.n	8010cee <listen_message_reliably+0x126>
 8010d22:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8010d26:	4604      	mov	r4, r0
 8010d28:	2500      	movs	r5, #0
 8010d2a:	a80c      	add	r0, sp, #48	; 0x30
 8010d2c:	f7ff f9ae 	bl	801008c <ucdr_init_buffer>
 8010d30:	f10d 031a 	add.w	r3, sp, #26
 8010d34:	aa06      	add	r2, sp, #24
 8010d36:	a90c      	add	r1, sp, #48	; 0x30
 8010d38:	4640      	mov	r0, r8
 8010d3a:	f88d 5018 	strb.w	r5, [sp, #24]
 8010d3e:	f000 fbfb 	bl	8011538 <uxr_read_session_header>
 8010d42:	b918      	cbnz	r0, 8010d4c <listen_message_reliably+0x184>
 8010d44:	4620      	mov	r0, r4
 8010d46:	b01d      	add	sp, #116	; 0x74
 8010d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d4c:	4629      	mov	r1, r5
 8010d4e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8010d52:	f000 fc99 	bl	8011688 <uxr_stream_id_from_raw>
 8010d56:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8010d5a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8010d5e:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8010d62:	2e01      	cmp	r6, #1
 8010d64:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8010d68:	d04b      	beq.n	8010e02 <listen_message_reliably+0x23a>
 8010d6a:	2e02      	cmp	r6, #2
 8010d6c:	d00f      	beq.n	8010d8e <listen_message_reliably+0x1c6>
 8010d6e:	2e00      	cmp	r6, #0
 8010d70:	d1e8      	bne.n	8010d44 <listen_message_reliably+0x17c>
 8010d72:	4631      	mov	r1, r6
 8010d74:	4630      	mov	r0, r6
 8010d76:	f000 fc87 	bl	8011688 <uxr_stream_id_from_raw>
 8010d7a:	4602      	mov	r2, r0
 8010d7c:	a90c      	add	r1, sp, #48	; 0x30
 8010d7e:	4640      	mov	r0, r8
 8010d80:	920a      	str	r2, [sp, #40]	; 0x28
 8010d82:	f7ff fd97 	bl	80108b4 <read_submessage_list>
 8010d86:	4620      	mov	r0, r4
 8010d88:	b01d      	add	sp, #116	; 0x74
 8010d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d8e:	4629      	mov	r1, r5
 8010d90:	f108 0008 	add.w	r0, r8, #8
 8010d94:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 8010d98:	f000 fd64 	bl	8011864 <uxr_get_input_reliable_stream>
 8010d9c:	4607      	mov	r7, r0
 8010d9e:	b338      	cbz	r0, 8010df0 <listen_message_reliably+0x228>
 8010da0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010da2:	a80c      	add	r0, sp, #48	; 0x30
 8010da4:	9203      	str	r2, [sp, #12]
 8010da6:	f7ff f9a3 	bl	80100f0 <ucdr_buffer_remaining>
 8010daa:	4603      	mov	r3, r0
 8010dac:	f10d 0019 	add.w	r0, sp, #25
 8010db0:	9a03      	ldr	r2, [sp, #12]
 8010db2:	4651      	mov	r1, sl
 8010db4:	9000      	str	r0, [sp, #0]
 8010db6:	4638      	mov	r0, r7
 8010db8:	f007 ffee 	bl	8018d98 <uxr_receive_reliable_message>
 8010dbc:	b1c0      	cbz	r0, 8010df0 <listen_message_reliably+0x228>
 8010dbe:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8010dc2:	b393      	cbz	r3, 8010e2a <listen_message_reliably+0x262>
 8010dc4:	ae14      	add	r6, sp, #80	; 0x50
 8010dc6:	f04f 0a02 	mov.w	sl, #2
 8010dca:	e00a      	b.n	8010de2 <listen_message_reliably+0x21a>
 8010dcc:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 8010dd0:	4631      	mov	r1, r6
 8010dd2:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 8010dd6:	4640      	mov	r0, r8
 8010dd8:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 8010ddc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010dde:	f7ff fd69 	bl	80108b4 <read_submessage_list>
 8010de2:	2204      	movs	r2, #4
 8010de4:	4631      	mov	r1, r6
 8010de6:	4638      	mov	r0, r7
 8010de8:	f008 f858 	bl	8018e9c <uxr_next_input_reliable_buffer_available>
 8010dec:	2800      	cmp	r0, #0
 8010dee:	d1ed      	bne.n	8010dcc <listen_message_reliably+0x204>
 8010df0:	4640      	mov	r0, r8
 8010df2:	462a      	mov	r2, r5
 8010df4:	4649      	mov	r1, r9
 8010df6:	f7ff fbd9 	bl	80105ac <write_submessage_acknack.isra.0>
 8010dfa:	4620      	mov	r0, r4
 8010dfc:	b01d      	add	sp, #116	; 0x74
 8010dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e02:	4629      	mov	r1, r5
 8010e04:	f108 0008 	add.w	r0, r8, #8
 8010e08:	f000 fd22 	bl	8011850 <uxr_get_input_best_effort_stream>
 8010e0c:	2800      	cmp	r0, #0
 8010e0e:	d099      	beq.n	8010d44 <listen_message_reliably+0x17c>
 8010e10:	4651      	mov	r1, sl
 8010e12:	f007 ff37 	bl	8018c84 <uxr_receive_best_effort_message>
 8010e16:	2800      	cmp	r0, #0
 8010e18:	d094      	beq.n	8010d44 <listen_message_reliably+0x17c>
 8010e1a:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8010e1e:	a90c      	add	r1, sp, #48	; 0x30
 8010e20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010e22:	4640      	mov	r0, r8
 8010e24:	f7ff fd46 	bl	80108b4 <read_submessage_list>
 8010e28:	e78c      	b.n	8010d44 <listen_message_reliably+0x17c>
 8010e2a:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8010e2e:	a90c      	add	r1, sp, #48	; 0x30
 8010e30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010e32:	4640      	mov	r0, r8
 8010e34:	f7ff fd3e 	bl	80108b4 <read_submessage_list>
 8010e38:	e7c4      	b.n	8010dc4 <listen_message_reliably+0x1fc>
 8010e3a:	bf00      	nop

08010e3c <uxr_run_session_timeout>:
 8010e3c:	b570      	push	{r4, r5, r6, lr}
 8010e3e:	4604      	mov	r4, r0
 8010e40:	460d      	mov	r5, r1
 8010e42:	f000 fd77 	bl	8011934 <uxr_millis>
 8010e46:	4606      	mov	r6, r0
 8010e48:	4620      	mov	r0, r4
 8010e4a:	f7ff fc77 	bl	801073c <uxr_flash_output_streams>
 8010e4e:	4629      	mov	r1, r5
 8010e50:	4620      	mov	r0, r4
 8010e52:	f7ff feb9 	bl	8010bc8 <listen_message_reliably>
 8010e56:	f000 fd6d 	bl	8011934 <uxr_millis>
 8010e5a:	1b83      	subs	r3, r0, r6
 8010e5c:	1ae9      	subs	r1, r5, r3
 8010e5e:	2900      	cmp	r1, #0
 8010e60:	dcf6      	bgt.n	8010e50 <uxr_run_session_timeout+0x14>
 8010e62:	f104 0008 	add.w	r0, r4, #8
 8010e66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010e6a:	f000 bd07 	b.w	801187c <uxr_output_streams_confirmed>
 8010e6e:	bf00      	nop

08010e70 <uxr_run_session_until_data>:
 8010e70:	b570      	push	{r4, r5, r6, lr}
 8010e72:	4604      	mov	r4, r0
 8010e74:	460d      	mov	r5, r1
 8010e76:	f000 fd5d 	bl	8011934 <uxr_millis>
 8010e7a:	4606      	mov	r6, r0
 8010e7c:	4620      	mov	r0, r4
 8010e7e:	f7ff fc5d 	bl	801073c <uxr_flash_output_streams>
 8010e82:	2300      	movs	r3, #0
 8010e84:	4629      	mov	r1, r5
 8010e86:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8010e8a:	e005      	b.n	8010e98 <uxr_run_session_until_data+0x28>
 8010e8c:	f000 fd52 	bl	8011934 <uxr_millis>
 8010e90:	1b83      	subs	r3, r0, r6
 8010e92:	1ae9      	subs	r1, r5, r3
 8010e94:	2900      	cmp	r1, #0
 8010e96:	dd07      	ble.n	8010ea8 <uxr_run_session_until_data+0x38>
 8010e98:	4620      	mov	r0, r4
 8010e9a:	f7ff fe95 	bl	8010bc8 <listen_message_reliably>
 8010e9e:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8010ea2:	2800      	cmp	r0, #0
 8010ea4:	d0f2      	beq.n	8010e8c <uxr_run_session_until_data+0x1c>
 8010ea6:	bd70      	pop	{r4, r5, r6, pc}
 8010ea8:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8010eac:	bd70      	pop	{r4, r5, r6, pc}
 8010eae:	bf00      	nop

08010eb0 <uxr_run_session_until_confirm_delivery>:
 8010eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010eb4:	4606      	mov	r6, r0
 8010eb6:	460d      	mov	r5, r1
 8010eb8:	f000 fd3c 	bl	8011934 <uxr_millis>
 8010ebc:	4607      	mov	r7, r0
 8010ebe:	4630      	mov	r0, r6
 8010ec0:	f106 0808 	add.w	r8, r6, #8
 8010ec4:	f7ff fc3a 	bl	801073c <uxr_flash_output_streams>
 8010ec8:	2d00      	cmp	r5, #0
 8010eca:	db10      	blt.n	8010eee <uxr_run_session_until_confirm_delivery+0x3e>
 8010ecc:	462c      	mov	r4, r5
 8010ece:	e006      	b.n	8010ede <uxr_run_session_until_confirm_delivery+0x2e>
 8010ed0:	f7ff fe7a 	bl	8010bc8 <listen_message_reliably>
 8010ed4:	f000 fd2e 	bl	8011934 <uxr_millis>
 8010ed8:	1bc3      	subs	r3, r0, r7
 8010eda:	1aec      	subs	r4, r5, r3
 8010edc:	d407      	bmi.n	8010eee <uxr_run_session_until_confirm_delivery+0x3e>
 8010ede:	4640      	mov	r0, r8
 8010ee0:	f000 fccc 	bl	801187c <uxr_output_streams_confirmed>
 8010ee4:	4603      	mov	r3, r0
 8010ee6:	4621      	mov	r1, r4
 8010ee8:	4630      	mov	r0, r6
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d0f0      	beq.n	8010ed0 <uxr_run_session_until_confirm_delivery+0x20>
 8010eee:	4640      	mov	r0, r8
 8010ef0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010ef4:	f000 bcc2 	b.w	801187c <uxr_output_streams_confirmed>

08010ef8 <uxr_run_session_until_all_status>:
 8010ef8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010efc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8010f00:	4606      	mov	r6, r0
 8010f02:	4688      	mov	r8, r1
 8010f04:	4692      	mov	sl, r2
 8010f06:	461f      	mov	r7, r3
 8010f08:	f7ff fc18 	bl	801073c <uxr_flash_output_streams>
 8010f0c:	f1bb 0f00 	cmp.w	fp, #0
 8010f10:	d004      	beq.n	8010f1c <uxr_run_session_until_all_status+0x24>
 8010f12:	465a      	mov	r2, fp
 8010f14:	21ff      	movs	r1, #255	; 0xff
 8010f16:	4638      	mov	r0, r7
 8010f18:	f00a fcb4 	bl	801b884 <memset>
 8010f1c:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 8010f20:	1e7d      	subs	r5, r7, #1
 8010f22:	e9c6 a71d 	strd	sl, r7, [r6, #116]	; 0x74
 8010f26:	f000 fd05 	bl	8011934 <uxr_millis>
 8010f2a:	4641      	mov	r1, r8
 8010f2c:	4681      	mov	r9, r0
 8010f2e:	4630      	mov	r0, r6
 8010f30:	f7ff fe4a 	bl	8010bc8 <listen_message_reliably>
 8010f34:	f000 fcfe 	bl	8011934 <uxr_millis>
 8010f38:	eba0 0009 	sub.w	r0, r0, r9
 8010f3c:	eba8 0100 	sub.w	r1, r8, r0
 8010f40:	f1bb 0f00 	cmp.w	fp, #0
 8010f44:	d029      	beq.n	8010f9a <uxr_run_session_until_all_status+0xa2>
 8010f46:	46ae      	mov	lr, r5
 8010f48:	f04f 0c00 	mov.w	ip, #0
 8010f4c:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8010f50:	2cff      	cmp	r4, #255	; 0xff
 8010f52:	d015      	beq.n	8010f80 <uxr_run_session_until_all_status+0x88>
 8010f54:	f10c 0c01 	add.w	ip, ip, #1
 8010f58:	45e3      	cmp	fp, ip
 8010f5a:	d8f7      	bhi.n	8010f4c <uxr_run_session_until_all_status+0x54>
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	67f3      	str	r3, [r6, #124]	; 0x7c
 8010f60:	e000      	b.n	8010f64 <uxr_run_session_until_all_status+0x6c>
 8010f62:	b158      	cbz	r0, 8010f7c <uxr_run_session_until_all_status+0x84>
 8010f64:	462b      	mov	r3, r5
 8010f66:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8010f6a:	3302      	adds	r3, #2
 8010f6c:	2801      	cmp	r0, #1
 8010f6e:	eba3 0307 	sub.w	r3, r3, r7
 8010f72:	bf8c      	ite	hi
 8010f74:	2000      	movhi	r0, #0
 8010f76:	2001      	movls	r0, #1
 8010f78:	459b      	cmp	fp, r3
 8010f7a:	d8f2      	bhi.n	8010f62 <uxr_run_session_until_all_status+0x6a>
 8010f7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f80:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 8010f84:	f10c 0c01 	add.w	ip, ip, #1
 8010f88:	45dc      	cmp	ip, fp
 8010f8a:	d201      	bcs.n	8010f90 <uxr_run_session_until_all_status+0x98>
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d0dd      	beq.n	8010f4c <uxr_run_session_until_all_status+0x54>
 8010f90:	2900      	cmp	r1, #0
 8010f92:	dde3      	ble.n	8010f5c <uxr_run_session_until_all_status+0x64>
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d1ca      	bne.n	8010f2e <uxr_run_session_until_all_status+0x36>
 8010f98:	e7e0      	b.n	8010f5c <uxr_run_session_until_all_status+0x64>
 8010f9a:	2001      	movs	r0, #1
 8010f9c:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 8010fa0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010fa4 <wait_session_status>:
 8010fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fa8:	4604      	mov	r4, r0
 8010faa:	b09d      	sub	sp, #116	; 0x74
 8010fac:	20ff      	movs	r0, #255	; 0xff
 8010fae:	9303      	str	r3, [sp, #12]
 8010fb0:	7160      	strb	r0, [r4, #5]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	f000 80b6 	beq.w	8011124 <wait_session_status+0x180>
 8010fb8:	4689      	mov	r9, r1
 8010fba:	4692      	mov	sl, r2
 8010fbc:	f04f 0b00 	mov.w	fp, #0
 8010fc0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010fc2:	4652      	mov	r2, sl
 8010fc4:	4649      	mov	r1, r9
 8010fc6:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010fca:	47a8      	blx	r5
 8010fcc:	f000 fcb2 	bl	8011934 <uxr_millis>
 8010fd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010fd4:	4605      	mov	r5, r0
 8010fd6:	e009      	b.n	8010fec <wait_session_status+0x48>
 8010fd8:	f000 fcac 	bl	8011934 <uxr_millis>
 8010fdc:	1b40      	subs	r0, r0, r5
 8010fde:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	dd40      	ble.n	8011068 <wait_session_status+0xc4>
 8010fe6:	7960      	ldrb	r0, [r4, #5]
 8010fe8:	28ff      	cmp	r0, #255	; 0xff
 8010fea:	d145      	bne.n	8011078 <wait_session_status+0xd4>
 8010fec:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8010fee:	a908      	add	r1, sp, #32
 8010ff0:	6896      	ldr	r6, [r2, #8]
 8010ff2:	6810      	ldr	r0, [r2, #0]
 8010ff4:	aa09      	add	r2, sp, #36	; 0x24
 8010ff6:	47b0      	blx	r6
 8010ff8:	2800      	cmp	r0, #0
 8010ffa:	d0ed      	beq.n	8010fd8 <wait_session_status+0x34>
 8010ffc:	a80c      	add	r0, sp, #48	; 0x30
 8010ffe:	2600      	movs	r6, #0
 8011000:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8011004:	f7ff f842 	bl	801008c <ucdr_init_buffer>
 8011008:	f10d 031e 	add.w	r3, sp, #30
 801100c:	aa07      	add	r2, sp, #28
 801100e:	a90c      	add	r1, sp, #48	; 0x30
 8011010:	4620      	mov	r0, r4
 8011012:	f88d 601c 	strb.w	r6, [sp, #28]
 8011016:	f000 fa8f 	bl	8011538 <uxr_read_session_header>
 801101a:	2800      	cmp	r0, #0
 801101c:	d0dc      	beq.n	8010fd8 <wait_session_status+0x34>
 801101e:	4631      	mov	r1, r6
 8011020:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8011024:	f000 fb30 	bl	8011688 <uxr_stream_id_from_raw>
 8011028:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801102c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8011030:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8011034:	2f01      	cmp	r7, #1
 8011036:	9302      	str	r3, [sp, #8]
 8011038:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 801103c:	d05c      	beq.n	80110f8 <wait_session_status+0x154>
 801103e:	2f02      	cmp	r7, #2
 8011040:	d020      	beq.n	8011084 <wait_session_status+0xe0>
 8011042:	2f00      	cmp	r7, #0
 8011044:	d1c8      	bne.n	8010fd8 <wait_session_status+0x34>
 8011046:	4639      	mov	r1, r7
 8011048:	4638      	mov	r0, r7
 801104a:	f000 fb1d 	bl	8011688 <uxr_stream_id_from_raw>
 801104e:	a90c      	add	r1, sp, #48	; 0x30
 8011050:	4602      	mov	r2, r0
 8011052:	900b      	str	r0, [sp, #44]	; 0x2c
 8011054:	4620      	mov	r0, r4
 8011056:	f7ff fc2d 	bl	80108b4 <read_submessage_list>
 801105a:	f000 fc6b 	bl	8011934 <uxr_millis>
 801105e:	1b40      	subs	r0, r0, r5
 8011060:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8011064:	2b00      	cmp	r3, #0
 8011066:	dcbe      	bgt.n	8010fe6 <wait_session_status+0x42>
 8011068:	f10b 0b01 	add.w	fp, fp, #1
 801106c:	9b03      	ldr	r3, [sp, #12]
 801106e:	7960      	ldrb	r0, [r4, #5]
 8011070:	455b      	cmp	r3, fp
 8011072:	d001      	beq.n	8011078 <wait_session_status+0xd4>
 8011074:	28ff      	cmp	r0, #255	; 0xff
 8011076:	d0a3      	beq.n	8010fc0 <wait_session_status+0x1c>
 8011078:	38ff      	subs	r0, #255	; 0xff
 801107a:	bf18      	it	ne
 801107c:	2001      	movne	r0, #1
 801107e:	b01d      	add	sp, #116	; 0x74
 8011080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011084:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8011088:	4631      	mov	r1, r6
 801108a:	f104 0008 	add.w	r0, r4, #8
 801108e:	9304      	str	r3, [sp, #16]
 8011090:	f000 fbe8 	bl	8011864 <uxr_get_input_reliable_stream>
 8011094:	4680      	mov	r8, r0
 8011096:	b348      	cbz	r0, 80110ec <wait_session_status+0x148>
 8011098:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801109a:	a80c      	add	r0, sp, #48	; 0x30
 801109c:	9205      	str	r2, [sp, #20]
 801109e:	f7ff f827 	bl	80100f0 <ucdr_buffer_remaining>
 80110a2:	4603      	mov	r3, r0
 80110a4:	f10d 001d 	add.w	r0, sp, #29
 80110a8:	9a05      	ldr	r2, [sp, #20]
 80110aa:	9000      	str	r0, [sp, #0]
 80110ac:	4640      	mov	r0, r8
 80110ae:	9902      	ldr	r1, [sp, #8]
 80110b0:	f007 fe72 	bl	8018d98 <uxr_receive_reliable_message>
 80110b4:	b1d0      	cbz	r0, 80110ec <wait_session_status+0x148>
 80110b6:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d03a      	beq.n	8011134 <wait_session_status+0x190>
 80110be:	9f04      	ldr	r7, [sp, #16]
 80110c0:	e00a      	b.n	80110d8 <wait_session_status+0x134>
 80110c2:	f04f 0302 	mov.w	r3, #2
 80110c6:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 80110ca:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 80110ce:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 80110d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80110d4:	f7ff fbee 	bl	80108b4 <read_submessage_list>
 80110d8:	a914      	add	r1, sp, #80	; 0x50
 80110da:	2204      	movs	r2, #4
 80110dc:	4640      	mov	r0, r8
 80110de:	f007 fedd 	bl	8018e9c <uxr_next_input_reliable_buffer_available>
 80110e2:	4603      	mov	r3, r0
 80110e4:	a914      	add	r1, sp, #80	; 0x50
 80110e6:	4620      	mov	r0, r4
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d1ea      	bne.n	80110c2 <wait_session_status+0x11e>
 80110ec:	4632      	mov	r2, r6
 80110ee:	9904      	ldr	r1, [sp, #16]
 80110f0:	4620      	mov	r0, r4
 80110f2:	f7ff fa5b 	bl	80105ac <write_submessage_acknack.isra.0>
 80110f6:	e76f      	b.n	8010fd8 <wait_session_status+0x34>
 80110f8:	4631      	mov	r1, r6
 80110fa:	f104 0008 	add.w	r0, r4, #8
 80110fe:	f000 fba7 	bl	8011850 <uxr_get_input_best_effort_stream>
 8011102:	2800      	cmp	r0, #0
 8011104:	f43f af68 	beq.w	8010fd8 <wait_session_status+0x34>
 8011108:	9902      	ldr	r1, [sp, #8]
 801110a:	f007 fdbb 	bl	8018c84 <uxr_receive_best_effort_message>
 801110e:	2800      	cmp	r0, #0
 8011110:	f43f af62 	beq.w	8010fd8 <wait_session_status+0x34>
 8011114:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8011118:	a90c      	add	r1, sp, #48	; 0x30
 801111a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801111c:	4620      	mov	r0, r4
 801111e:	f7ff fbc9 	bl	80108b4 <read_submessage_list>
 8011122:	e759      	b.n	8010fd8 <wait_session_status+0x34>
 8011124:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011126:	e9d3 0400 	ldrd	r0, r4, [r3]
 801112a:	47a0      	blx	r4
 801112c:	2001      	movs	r0, #1
 801112e:	b01d      	add	sp, #116	; 0x74
 8011130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011134:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8011138:	a90c      	add	r1, sp, #48	; 0x30
 801113a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801113c:	4620      	mov	r0, r4
 801113e:	f7ff fbb9 	bl	80108b4 <read_submessage_list>
 8011142:	e7bc      	b.n	80110be <wait_session_status+0x11a>

08011144 <uxr_delete_session_retries>:
 8011144:	b530      	push	{r4, r5, lr}
 8011146:	b08f      	sub	sp, #60	; 0x3c
 8011148:	4604      	mov	r4, r0
 801114a:	460d      	mov	r5, r1
 801114c:	f000 fa34 	bl	80115b8 <uxr_session_header_offset>
 8011150:	2300      	movs	r3, #0
 8011152:	2210      	movs	r2, #16
 8011154:	a902      	add	r1, sp, #8
 8011156:	9000      	str	r0, [sp, #0]
 8011158:	a806      	add	r0, sp, #24
 801115a:	f7fe ff85 	bl	8010068 <ucdr_init_buffer_origin_offset>
 801115e:	a906      	add	r1, sp, #24
 8011160:	4620      	mov	r0, r4
 8011162:	f000 f979 	bl	8011458 <uxr_buffer_delete_session>
 8011166:	2200      	movs	r2, #0
 8011168:	9b06      	ldr	r3, [sp, #24]
 801116a:	4620      	mov	r0, r4
 801116c:	4611      	mov	r1, r2
 801116e:	f000 f9cf 	bl	8011510 <uxr_stamp_session_header>
 8011172:	a806      	add	r0, sp, #24
 8011174:	f7fe ffb8 	bl	80100e8 <ucdr_buffer_length>
 8011178:	462b      	mov	r3, r5
 801117a:	4602      	mov	r2, r0
 801117c:	a902      	add	r1, sp, #8
 801117e:	4620      	mov	r0, r4
 8011180:	f7ff ff10 	bl	8010fa4 <wait_session_status>
 8011184:	b118      	cbz	r0, 801118e <uxr_delete_session_retries+0x4a>
 8011186:	7960      	ldrb	r0, [r4, #5]
 8011188:	fab0 f080 	clz	r0, r0
 801118c:	0940      	lsrs	r0, r0, #5
 801118e:	b00f      	add	sp, #60	; 0x3c
 8011190:	bd30      	pop	{r4, r5, pc}
 8011192:	bf00      	nop

08011194 <uxr_create_session>:
 8011194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011198:	f100 0b08 	add.w	fp, r0, #8
 801119c:	4604      	mov	r4, r0
 801119e:	b0ab      	sub	sp, #172	; 0xac
 80111a0:	4658      	mov	r0, fp
 80111a2:	465e      	mov	r6, fp
 80111a4:	f000 faa6 	bl	80116f4 <uxr_reset_stream_storage>
 80111a8:	4620      	mov	r0, r4
 80111aa:	f000 fa05 	bl	80115b8 <uxr_session_header_offset>
 80111ae:	2300      	movs	r3, #0
 80111b0:	221c      	movs	r2, #28
 80111b2:	a90b      	add	r1, sp, #44	; 0x2c
 80111b4:	9000      	str	r0, [sp, #0]
 80111b6:	a812      	add	r0, sp, #72	; 0x48
 80111b8:	f7fe ff56 	bl	8010068 <ucdr_init_buffer_origin_offset>
 80111bc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80111be:	a912      	add	r1, sp, #72	; 0x48
 80111c0:	4620      	mov	r0, r4
 80111c2:	8a1a      	ldrh	r2, [r3, #16]
 80111c4:	3a04      	subs	r2, #4
 80111c6:	b292      	uxth	r2, r2
 80111c8:	f000 f91c 	bl	8011404 <uxr_buffer_create_session>
 80111cc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80111ce:	4620      	mov	r0, r4
 80111d0:	f000 f98a 	bl	80114e8 <uxr_stamp_create_session_header>
 80111d4:	a812      	add	r0, sp, #72	; 0x48
 80111d6:	f7fe ff87 	bl	80100e8 <ucdr_buffer_length>
 80111da:	23ff      	movs	r3, #255	; 0xff
 80111dc:	4681      	mov	r9, r0
 80111de:	7163      	strb	r3, [r4, #5]
 80111e0:	230a      	movs	r3, #10
 80111e2:	9303      	str	r3, [sp, #12]
 80111e4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80111e6:	464a      	mov	r2, r9
 80111e8:	a90b      	add	r1, sp, #44	; 0x2c
 80111ea:	e9d3 0500 	ldrd	r0, r5, [r3]
 80111ee:	47a8      	blx	r5
 80111f0:	f000 fba0 	bl	8011934 <uxr_millis>
 80111f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80111f8:	4605      	mov	r5, r0
 80111fa:	e009      	b.n	8011210 <uxr_create_session+0x7c>
 80111fc:	f000 fb9a 	bl	8011934 <uxr_millis>
 8011200:	1b40      	subs	r0, r0, r5
 8011202:	7962      	ldrb	r2, [r4, #5]
 8011204:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8011208:	2b00      	cmp	r3, #0
 801120a:	dd38      	ble.n	801127e <uxr_create_session+0xea>
 801120c:	2aff      	cmp	r2, #255	; 0xff
 801120e:	d13c      	bne.n	801128a <uxr_create_session+0xf6>
 8011210:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8011212:	a907      	add	r1, sp, #28
 8011214:	6897      	ldr	r7, [r2, #8]
 8011216:	6810      	ldr	r0, [r2, #0]
 8011218:	aa08      	add	r2, sp, #32
 801121a:	47b8      	blx	r7
 801121c:	2800      	cmp	r0, #0
 801121e:	d0ed      	beq.n	80111fc <uxr_create_session+0x68>
 8011220:	a81a      	add	r0, sp, #104	; 0x68
 8011222:	2700      	movs	r7, #0
 8011224:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8011228:	f7fe ff30 	bl	801008c <ucdr_init_buffer>
 801122c:	f10d 031a 	add.w	r3, sp, #26
 8011230:	aa06      	add	r2, sp, #24
 8011232:	a91a      	add	r1, sp, #104	; 0x68
 8011234:	4620      	mov	r0, r4
 8011236:	f88d 7018 	strb.w	r7, [sp, #24]
 801123a:	f000 f97d 	bl	8011538 <uxr_read_session_header>
 801123e:	2800      	cmp	r0, #0
 8011240:	d0dc      	beq.n	80111fc <uxr_create_session+0x68>
 8011242:	4639      	mov	r1, r7
 8011244:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011248:	f000 fa1e 	bl	8011688 <uxr_stream_id_from_raw>
 801124c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8011250:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 8011254:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8011258:	2f01      	cmp	r7, #1
 801125a:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 801125e:	d053      	beq.n	8011308 <uxr_create_session+0x174>
 8011260:	2f02      	cmp	r7, #2
 8011262:	d018      	beq.n	8011296 <uxr_create_session+0x102>
 8011264:	2f00      	cmp	r7, #0
 8011266:	d1c9      	bne.n	80111fc <uxr_create_session+0x68>
 8011268:	4639      	mov	r1, r7
 801126a:	4638      	mov	r0, r7
 801126c:	f000 fa0c 	bl	8011688 <uxr_stream_id_from_raw>
 8011270:	a91a      	add	r1, sp, #104	; 0x68
 8011272:	4602      	mov	r2, r0
 8011274:	900a      	str	r0, [sp, #40]	; 0x28
 8011276:	4620      	mov	r0, r4
 8011278:	f7ff fb1c 	bl	80108b4 <read_submessage_list>
 801127c:	e7be      	b.n	80111fc <uxr_create_session+0x68>
 801127e:	9b03      	ldr	r3, [sp, #12]
 8011280:	3b01      	subs	r3, #1
 8011282:	9303      	str	r3, [sp, #12]
 8011284:	d001      	beq.n	801128a <uxr_create_session+0xf6>
 8011286:	2aff      	cmp	r2, #255	; 0xff
 8011288:	d0ac      	beq.n	80111e4 <uxr_create_session+0x50>
 801128a:	2a00      	cmp	r2, #0
 801128c:	d051      	beq.n	8011332 <uxr_create_session+0x19e>
 801128e:	2000      	movs	r0, #0
 8011290:	b02b      	add	sp, #172	; 0xac
 8011292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011296:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 801129a:	4641      	mov	r1, r8
 801129c:	4630      	mov	r0, r6
 801129e:	9304      	str	r3, [sp, #16]
 80112a0:	f000 fae0 	bl	8011864 <uxr_get_input_reliable_stream>
 80112a4:	4682      	mov	sl, r0
 80112a6:	b348      	cbz	r0, 80112fc <uxr_create_session+0x168>
 80112a8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80112aa:	a81a      	add	r0, sp, #104	; 0x68
 80112ac:	9205      	str	r2, [sp, #20]
 80112ae:	f7fe ff1f 	bl	80100f0 <ucdr_buffer_remaining>
 80112b2:	4603      	mov	r3, r0
 80112b4:	f10d 0019 	add.w	r0, sp, #25
 80112b8:	9a05      	ldr	r2, [sp, #20]
 80112ba:	4659      	mov	r1, fp
 80112bc:	9000      	str	r0, [sp, #0]
 80112be:	4650      	mov	r0, sl
 80112c0:	f007 fd6a 	bl	8018d98 <uxr_receive_reliable_message>
 80112c4:	b1d0      	cbz	r0, 80112fc <uxr_create_session+0x168>
 80112c6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d038      	beq.n	8011340 <uxr_create_session+0x1ac>
 80112ce:	9f04      	ldr	r7, [sp, #16]
 80112d0:	e00a      	b.n	80112e8 <uxr_create_session+0x154>
 80112d2:	f04f 0302 	mov.w	r3, #2
 80112d6:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 80112da:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
 80112de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80112e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80112e4:	f7ff fae6 	bl	80108b4 <read_submessage_list>
 80112e8:	a922      	add	r1, sp, #136	; 0x88
 80112ea:	2204      	movs	r2, #4
 80112ec:	4650      	mov	r0, sl
 80112ee:	f007 fdd5 	bl	8018e9c <uxr_next_input_reliable_buffer_available>
 80112f2:	4603      	mov	r3, r0
 80112f4:	a922      	add	r1, sp, #136	; 0x88
 80112f6:	4620      	mov	r0, r4
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d1ea      	bne.n	80112d2 <uxr_create_session+0x13e>
 80112fc:	4642      	mov	r2, r8
 80112fe:	9904      	ldr	r1, [sp, #16]
 8011300:	4620      	mov	r0, r4
 8011302:	f7ff f953 	bl	80105ac <write_submessage_acknack.isra.0>
 8011306:	e779      	b.n	80111fc <uxr_create_session+0x68>
 8011308:	4641      	mov	r1, r8
 801130a:	4630      	mov	r0, r6
 801130c:	f000 faa0 	bl	8011850 <uxr_get_input_best_effort_stream>
 8011310:	2800      	cmp	r0, #0
 8011312:	f43f af73 	beq.w	80111fc <uxr_create_session+0x68>
 8011316:	4659      	mov	r1, fp
 8011318:	f007 fcb4 	bl	8018c84 <uxr_receive_best_effort_message>
 801131c:	2800      	cmp	r0, #0
 801131e:	f43f af6d 	beq.w	80111fc <uxr_create_session+0x68>
 8011322:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 8011326:	a91a      	add	r1, sp, #104	; 0x68
 8011328:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801132a:	4620      	mov	r0, r4
 801132c:	f7ff fac2 	bl	80108b4 <read_submessage_list>
 8011330:	e764      	b.n	80111fc <uxr_create_session+0x68>
 8011332:	4630      	mov	r0, r6
 8011334:	f000 f9de 	bl	80116f4 <uxr_reset_stream_storage>
 8011338:	2001      	movs	r0, #1
 801133a:	b02b      	add	sp, #172	; 0xac
 801133c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011340:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 8011344:	a91a      	add	r1, sp, #104	; 0x68
 8011346:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011348:	4620      	mov	r0, r4
 801134a:	f7ff fab3 	bl	80108b4 <read_submessage_list>
 801134e:	e7be      	b.n	80112ce <uxr_create_session+0x13a>

08011350 <uxr_prepare_stream_to_write_submessage>:
 8011350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011354:	b082      	sub	sp, #8
 8011356:	4604      	mov	r4, r0
 8011358:	4610      	mov	r0, r2
 801135a:	4615      	mov	r5, r2
 801135c:	461e      	mov	r6, r3
 801135e:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 8011362:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8011366:	f105 0904 	add.w	r9, r5, #4
 801136a:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 801136e:	9101      	str	r1, [sp, #4]
 8011370:	f000 fada 	bl	8011928 <uxr_submessage_padding>
 8011374:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011378:	4481      	add	r9, r0
 801137a:	2b01      	cmp	r3, #1
 801137c:	d01d      	beq.n	80113ba <uxr_prepare_stream_to_write_submessage+0x6a>
 801137e:	2b02      	cmp	r3, #2
 8011380:	d116      	bne.n	80113b0 <uxr_prepare_stream_to_write_submessage+0x60>
 8011382:	f104 0008 	add.w	r0, r4, #8
 8011386:	4651      	mov	r1, sl
 8011388:	f000 fa56 	bl	8011838 <uxr_get_output_reliable_stream>
 801138c:	4604      	mov	r4, r0
 801138e:	b158      	cbz	r0, 80113a8 <uxr_prepare_stream_to_write_submessage+0x58>
 8011390:	4649      	mov	r1, r9
 8011392:	4632      	mov	r2, r6
 8011394:	f007 ff46 	bl	8019224 <uxr_prepare_reliable_buffer_to_write>
 8011398:	4604      	mov	r4, r0
 801139a:	b12c      	cbz	r4, 80113a8 <uxr_prepare_stream_to_write_submessage+0x58>
 801139c:	4643      	mov	r3, r8
 801139e:	b2aa      	uxth	r2, r5
 80113a0:	4639      	mov	r1, r7
 80113a2:	4630      	mov	r0, r6
 80113a4:	f000 fa80 	bl	80118a8 <uxr_buffer_submessage_header>
 80113a8:	4620      	mov	r0, r4
 80113aa:	b002      	add	sp, #8
 80113ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113b0:	2400      	movs	r4, #0
 80113b2:	4620      	mov	r0, r4
 80113b4:	b002      	add	sp, #8
 80113b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113ba:	f104 0008 	add.w	r0, r4, #8
 80113be:	4651      	mov	r1, sl
 80113c0:	f000 fa32 	bl	8011828 <uxr_get_output_best_effort_stream>
 80113c4:	4604      	mov	r4, r0
 80113c6:	2800      	cmp	r0, #0
 80113c8:	d0ee      	beq.n	80113a8 <uxr_prepare_stream_to_write_submessage+0x58>
 80113ca:	4649      	mov	r1, r9
 80113cc:	4632      	mov	r2, r6
 80113ce:	f007 fe55 	bl	801907c <uxr_prepare_best_effort_buffer_to_write>
 80113d2:	4604      	mov	r4, r0
 80113d4:	e7e1      	b.n	801139a <uxr_prepare_stream_to_write_submessage+0x4a>
 80113d6:	bf00      	nop

080113d8 <uxr_init_session_info>:
 80113d8:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 80113dc:	23ff      	movs	r3, #255	; 0xff
 80113de:	7102      	strb	r2, [r0, #4]
 80113e0:	f880 c001 	strb.w	ip, [r0, #1]
 80113e4:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80113e8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80113ec:	7001      	strb	r1, [r0, #0]
 80113ee:	f880 c002 	strb.w	ip, [r0, #2]
 80113f2:	7143      	strb	r3, [r0, #5]
 80113f4:	70c2      	strb	r2, [r0, #3]
 80113f6:	b500      	push	{lr}
 80113f8:	f04f 0e09 	mov.w	lr, #9
 80113fc:	f8a0 e006 	strh.w	lr, [r0, #6]
 8011400:	f85d fb04 	ldr.w	pc, [sp], #4

08011404 <uxr_buffer_create_session>:
 8011404:	b530      	push	{r4, r5, lr}
 8011406:	2300      	movs	r3, #0
 8011408:	b089      	sub	sp, #36	; 0x24
 801140a:	4d12      	ldr	r5, [pc, #72]	; (8011454 <uxr_buffer_create_session+0x50>)
 801140c:	460c      	mov	r4, r1
 801140e:	9307      	str	r3, [sp, #28]
 8011410:	4619      	mov	r1, r3
 8011412:	f8ad 201c 	strh.w	r2, [sp, #28]
 8011416:	2201      	movs	r2, #1
 8011418:	9301      	str	r3, [sp, #4]
 801141a:	80c2      	strh	r2, [r0, #6]
 801141c:	f88d 2004 	strb.w	r2, [sp, #4]
 8011420:	682a      	ldr	r2, [r5, #0]
 8011422:	9303      	str	r3, [sp, #12]
 8011424:	9200      	str	r2, [sp, #0]
 8011426:	88aa      	ldrh	r2, [r5, #4]
 8011428:	9306      	str	r3, [sp, #24]
 801142a:	f8ad 2006 	strh.w	r2, [sp, #6]
 801142e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8011432:	9202      	str	r2, [sp, #8]
 8011434:	7802      	ldrb	r2, [r0, #0]
 8011436:	4620      	mov	r0, r4
 8011438:	f88d 200c 	strb.w	r2, [sp, #12]
 801143c:	2210      	movs	r2, #16
 801143e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8011442:	f000 fa31 	bl	80118a8 <uxr_buffer_submessage_header>
 8011446:	4669      	mov	r1, sp
 8011448:	4620      	mov	r0, r4
 801144a:	f001 f9b7 	bl	80127bc <uxr_serialize_CREATE_CLIENT_Payload>
 801144e:	b009      	add	sp, #36	; 0x24
 8011450:	bd30      	pop	{r4, r5, pc}
 8011452:	bf00      	nop
 8011454:	0801c918 	.word	0x0801c918

08011458 <uxr_buffer_delete_session>:
 8011458:	4a0c      	ldr	r2, [pc, #48]	; (801148c <uxr_buffer_delete_session+0x34>)
 801145a:	2302      	movs	r3, #2
 801145c:	f44f 7c00 	mov.w	ip, #512	; 0x200
 8011460:	b510      	push	{r4, lr}
 8011462:	460c      	mov	r4, r1
 8011464:	b082      	sub	sp, #8
 8011466:	8911      	ldrh	r1, [r2, #8]
 8011468:	2204      	movs	r2, #4
 801146a:	80c3      	strh	r3, [r0, #6]
 801146c:	2300      	movs	r3, #0
 801146e:	f8ad 1006 	strh.w	r1, [sp, #6]
 8011472:	4620      	mov	r0, r4
 8011474:	2103      	movs	r1, #3
 8011476:	f8ad c004 	strh.w	ip, [sp, #4]
 801147a:	f000 fa15 	bl	80118a8 <uxr_buffer_submessage_header>
 801147e:	a901      	add	r1, sp, #4
 8011480:	4620      	mov	r0, r4
 8011482:	f001 fa43 	bl	801290c <uxr_serialize_DELETE_Payload>
 8011486:	b002      	add	sp, #8
 8011488:	bd10      	pop	{r4, pc}
 801148a:	bf00      	nop
 801148c:	0801c918 	.word	0x0801c918

08011490 <uxr_read_create_session_status>:
 8011490:	b510      	push	{r4, lr}
 8011492:	460b      	mov	r3, r1
 8011494:	b088      	sub	sp, #32
 8011496:	4604      	mov	r4, r0
 8011498:	a901      	add	r1, sp, #4
 801149a:	4618      	mov	r0, r3
 801149c:	f001 fa46 	bl	801292c <uxr_deserialize_STATUS_AGENT_Payload>
 80114a0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80114a4:	7163      	strb	r3, [r4, #5]
 80114a6:	b008      	add	sp, #32
 80114a8:	bd10      	pop	{r4, pc}
 80114aa:	bf00      	nop

080114ac <uxr_read_delete_session_status>:
 80114ac:	b510      	push	{r4, lr}
 80114ae:	b084      	sub	sp, #16
 80114b0:	4604      	mov	r4, r0
 80114b2:	4608      	mov	r0, r1
 80114b4:	a902      	add	r1, sp, #8
 80114b6:	f001 fa69 	bl	801298c <uxr_deserialize_STATUS_Payload>
 80114ba:	88e3      	ldrh	r3, [r4, #6]
 80114bc:	2b02      	cmp	r3, #2
 80114be:	d001      	beq.n	80114c4 <uxr_read_delete_session_status+0x18>
 80114c0:	b004      	add	sp, #16
 80114c2:	bd10      	pop	{r4, pc}
 80114c4:	f10d 000a 	add.w	r0, sp, #10
 80114c8:	f7fe fff6 	bl	80104b8 <uxr_object_id_from_raw>
 80114cc:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80114d0:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80114d4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80114d8:	b29b      	uxth	r3, r3
 80114da:	2b02      	cmp	r3, #2
 80114dc:	d1f0      	bne.n	80114c0 <uxr_read_delete_session_status+0x14>
 80114de:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80114e2:	7163      	strb	r3, [r4, #5]
 80114e4:	e7ec      	b.n	80114c0 <uxr_read_delete_session_status+0x14>
 80114e6:	bf00      	nop

080114e8 <uxr_stamp_create_session_header>:
 80114e8:	b510      	push	{r4, lr}
 80114ea:	2208      	movs	r2, #8
 80114ec:	b08a      	sub	sp, #40	; 0x28
 80114ee:	4604      	mov	r4, r0
 80114f0:	eb0d 0002 	add.w	r0, sp, r2
 80114f4:	f7fe fdca 	bl	801008c <ucdr_init_buffer>
 80114f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114fc:	2300      	movs	r3, #0
 80114fe:	a802      	add	r0, sp, #8
 8011500:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8011504:	9400      	str	r4, [sp, #0]
 8011506:	461a      	mov	r2, r3
 8011508:	f000 fbca 	bl	8011ca0 <uxr_serialize_message_header>
 801150c:	b00a      	add	sp, #40	; 0x28
 801150e:	bd10      	pop	{r4, pc}

08011510 <uxr_stamp_session_header>:
 8011510:	b530      	push	{r4, r5, lr}
 8011512:	b08d      	sub	sp, #52	; 0x34
 8011514:	4604      	mov	r4, r0
 8011516:	460d      	mov	r5, r1
 8011518:	4619      	mov	r1, r3
 801151a:	a804      	add	r0, sp, #16
 801151c:	9203      	str	r2, [sp, #12]
 801151e:	2208      	movs	r2, #8
 8011520:	f7fe fdb4 	bl	801008c <ucdr_init_buffer>
 8011524:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011528:	9b03      	ldr	r3, [sp, #12]
 801152a:	462a      	mov	r2, r5
 801152c:	a804      	add	r0, sp, #16
 801152e:	9400      	str	r4, [sp, #0]
 8011530:	f000 fbb6 	bl	8011ca0 <uxr_serialize_message_header>
 8011534:	b00d      	add	sp, #52	; 0x34
 8011536:	bd30      	pop	{r4, r5, pc}

08011538 <uxr_read_session_header>:
 8011538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801153c:	4607      	mov	r7, r0
 801153e:	b084      	sub	sp, #16
 8011540:	4608      	mov	r0, r1
 8011542:	460c      	mov	r4, r1
 8011544:	4615      	mov	r5, r2
 8011546:	461e      	mov	r6, r3
 8011548:	f7fe fdd2 	bl	80100f0 <ucdr_buffer_remaining>
 801154c:	2808      	cmp	r0, #8
 801154e:	d803      	bhi.n	8011558 <uxr_read_session_header+0x20>
 8011550:	2000      	movs	r0, #0
 8011552:	b004      	add	sp, #16
 8011554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011558:	f10d 080c 	add.w	r8, sp, #12
 801155c:	4633      	mov	r3, r6
 801155e:	462a      	mov	r2, r5
 8011560:	4620      	mov	r0, r4
 8011562:	f10d 010b 	add.w	r1, sp, #11
 8011566:	f8cd 8000 	str.w	r8, [sp]
 801156a:	f000 fbb7 	bl	8011cdc <uxr_deserialize_message_header>
 801156e:	783a      	ldrb	r2, [r7, #0]
 8011570:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8011574:	4293      	cmp	r3, r2
 8011576:	d1eb      	bne.n	8011550 <uxr_read_session_header+0x18>
 8011578:	061b      	lsls	r3, r3, #24
 801157a:	d41b      	bmi.n	80115b4 <uxr_read_session_header+0x7c>
 801157c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8011580:	787b      	ldrb	r3, [r7, #1]
 8011582:	429a      	cmp	r2, r3
 8011584:	d003      	beq.n	801158e <uxr_read_session_header+0x56>
 8011586:	2001      	movs	r0, #1
 8011588:	f080 0001 	eor.w	r0, r0, #1
 801158c:	e7e1      	b.n	8011552 <uxr_read_session_header+0x1a>
 801158e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8011592:	1cb8      	adds	r0, r7, #2
 8011594:	78bb      	ldrb	r3, [r7, #2]
 8011596:	429a      	cmp	r2, r3
 8011598:	d1f5      	bne.n	8011586 <uxr_read_session_header+0x4e>
 801159a:	f89d 200e 	ldrb.w	r2, [sp, #14]
 801159e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80115a2:	429a      	cmp	r2, r3
 80115a4:	d1ef      	bne.n	8011586 <uxr_read_session_header+0x4e>
 80115a6:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80115aa:	7843      	ldrb	r3, [r0, #1]
 80115ac:	429a      	cmp	r2, r3
 80115ae:	d1ea      	bne.n	8011586 <uxr_read_session_header+0x4e>
 80115b0:	2000      	movs	r0, #0
 80115b2:	e7e9      	b.n	8011588 <uxr_read_session_header+0x50>
 80115b4:	2001      	movs	r0, #1
 80115b6:	e7cc      	b.n	8011552 <uxr_read_session_header+0x1a>

080115b8 <uxr_session_header_offset>:
 80115b8:	f990 3000 	ldrsb.w	r3, [r0]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	bfac      	ite	ge
 80115c0:	2008      	movge	r0, #8
 80115c2:	2004      	movlt	r0, #4
 80115c4:	4770      	bx	lr
 80115c6:	bf00      	nop

080115c8 <uxr_init_base_object_request>:
 80115c8:	b510      	push	{r4, lr}
 80115ca:	b082      	sub	sp, #8
 80115cc:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 80115d0:	9101      	str	r1, [sp, #4]
 80115d2:	88c3      	ldrh	r3, [r0, #6]
 80115d4:	f1a3 010a 	sub.w	r1, r3, #10
 80115d8:	b289      	uxth	r1, r1
 80115da:	42a1      	cmp	r1, r4
 80115dc:	d80f      	bhi.n	80115fe <uxr_init_base_object_request+0x36>
 80115de:	3301      	adds	r3, #1
 80115e0:	b29c      	uxth	r4, r3
 80115e2:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 80115e6:	b2db      	uxtb	r3, r3
 80115e8:	80c4      	strh	r4, [r0, #6]
 80115ea:	1c91      	adds	r1, r2, #2
 80115ec:	9801      	ldr	r0, [sp, #4]
 80115ee:	f882 c000 	strb.w	ip, [r2]
 80115f2:	7053      	strb	r3, [r2, #1]
 80115f4:	f7fe ff74 	bl	80104e0 <uxr_object_id_to_raw>
 80115f8:	4620      	mov	r0, r4
 80115fa:	b002      	add	sp, #8
 80115fc:	bd10      	pop	{r4, pc}
 80115fe:	230a      	movs	r3, #10
 8011600:	f04f 0c00 	mov.w	ip, #0
 8011604:	461c      	mov	r4, r3
 8011606:	e7ef      	b.n	80115e8 <uxr_init_base_object_request+0x20>

08011608 <uxr_parse_base_object_request>:
 8011608:	b570      	push	{r4, r5, r6, lr}
 801160a:	4604      	mov	r4, r0
 801160c:	3002      	adds	r0, #2
 801160e:	460d      	mov	r5, r1
 8011610:	4616      	mov	r6, r2
 8011612:	f7fe ff51 	bl	80104b8 <uxr_object_id_from_raw>
 8011616:	f3c0 430f 	ubfx	r3, r0, #16, #16
 801161a:	8028      	strh	r0, [r5, #0]
 801161c:	806b      	strh	r3, [r5, #2]
 801161e:	7822      	ldrb	r2, [r4, #0]
 8011620:	7863      	ldrb	r3, [r4, #1]
 8011622:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011626:	8033      	strh	r3, [r6, #0]
 8011628:	bd70      	pop	{r4, r5, r6, pc}
 801162a:	bf00      	nop

0801162c <uxr_stream_id>:
 801162c:	2901      	cmp	r1, #1
 801162e:	4684      	mov	ip, r0
 8011630:	b500      	push	{lr}
 8011632:	b083      	sub	sp, #12
 8011634:	d01f      	beq.n	8011676 <uxr_stream_id+0x4a>
 8011636:	2902      	cmp	r1, #2
 8011638:	f04f 0e00 	mov.w	lr, #0
 801163c:	d020      	beq.n	8011680 <uxr_stream_id+0x54>
 801163e:	2300      	movs	r3, #0
 8011640:	2000      	movs	r0, #0
 8011642:	f36e 0307 	bfi	r3, lr, #0, #8
 8011646:	f36c 230f 	bfi	r3, ip, #8, #8
 801164a:	f361 4317 	bfi	r3, r1, #16, #8
 801164e:	f362 631f 	bfi	r3, r2, #24, #8
 8011652:	fa5f fc83 	uxtb.w	ip, r3
 8011656:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801165a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801165e:	0e1b      	lsrs	r3, r3, #24
 8011660:	f36c 0007 	bfi	r0, ip, #0, #8
 8011664:	f361 200f 	bfi	r0, r1, #8, #8
 8011668:	f362 4017 	bfi	r0, r2, #16, #8
 801166c:	f363 601f 	bfi	r0, r3, #24, #8
 8011670:	b003      	add	sp, #12
 8011672:	f85d fb04 	ldr.w	pc, [sp], #4
 8011676:	f100 0e01 	add.w	lr, r0, #1
 801167a:	fa5f fe8e 	uxtb.w	lr, lr
 801167e:	e7de      	b.n	801163e <uxr_stream_id+0x12>
 8011680:	f080 0e80 	eor.w	lr, r0, #128	; 0x80
 8011684:	e7db      	b.n	801163e <uxr_stream_id+0x12>
 8011686:	bf00      	nop

08011688 <uxr_stream_id_from_raw>:
 8011688:	b082      	sub	sp, #8
 801168a:	b130      	cbz	r0, 801169a <uxr_stream_id_from_raw+0x12>
 801168c:	0603      	lsls	r3, r0, #24
 801168e:	d421      	bmi.n	80116d4 <uxr_stream_id_from_raw+0x4c>
 8011690:	1e42      	subs	r2, r0, #1
 8011692:	f04f 0c01 	mov.w	ip, #1
 8011696:	b2d2      	uxtb	r2, r2
 8011698:	e001      	b.n	801169e <uxr_stream_id_from_raw+0x16>
 801169a:	4684      	mov	ip, r0
 801169c:	4602      	mov	r2, r0
 801169e:	2300      	movs	r3, #0
 80116a0:	f360 0307 	bfi	r3, r0, #0, #8
 80116a4:	2000      	movs	r0, #0
 80116a6:	f362 230f 	bfi	r3, r2, #8, #8
 80116aa:	f36c 4317 	bfi	r3, ip, #16, #8
 80116ae:	f361 631f 	bfi	r3, r1, #24, #8
 80116b2:	fa5f fc83 	uxtb.w	ip, r3
 80116b6:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80116ba:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80116be:	0e1b      	lsrs	r3, r3, #24
 80116c0:	f36c 0007 	bfi	r0, ip, #0, #8
 80116c4:	f361 200f 	bfi	r0, r1, #8, #8
 80116c8:	f362 4017 	bfi	r0, r2, #16, #8
 80116cc:	f363 601f 	bfi	r0, r3, #24, #8
 80116d0:	b002      	add	sp, #8
 80116d2:	4770      	bx	lr
 80116d4:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 80116d8:	f04f 0c02 	mov.w	ip, #2
 80116dc:	e7df      	b.n	801169e <uxr_stream_id_from_raw+0x16>
 80116de:	bf00      	nop

080116e0 <uxr_init_stream_storage>:
 80116e0:	2300      	movs	r3, #0
 80116e2:	7403      	strb	r3, [r0, #16]
 80116e4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80116e8:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 80116ec:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 80116f0:	4770      	bx	lr
 80116f2:	bf00      	nop

080116f4 <uxr_reset_stream_storage>:
 80116f4:	b570      	push	{r4, r5, r6, lr}
 80116f6:	7c03      	ldrb	r3, [r0, #16]
 80116f8:	4604      	mov	r4, r0
 80116fa:	b14b      	cbz	r3, 8011710 <uxr_reset_stream_storage+0x1c>
 80116fc:	4606      	mov	r6, r0
 80116fe:	2500      	movs	r5, #0
 8011700:	4630      	mov	r0, r6
 8011702:	3501      	adds	r5, #1
 8011704:	f007 fcb4 	bl	8019070 <uxr_reset_output_best_effort_stream>
 8011708:	7c23      	ldrb	r3, [r4, #16]
 801170a:	3610      	adds	r6, #16
 801170c:	42ab      	cmp	r3, r5
 801170e:	d8f7      	bhi.n	8011700 <uxr_reset_stream_storage+0xc>
 8011710:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011714:	b15b      	cbz	r3, 801172e <uxr_reset_stream_storage+0x3a>
 8011716:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801171a:	2500      	movs	r5, #0
 801171c:	4630      	mov	r0, r6
 801171e:	3501      	adds	r5, #1
 8011720:	f007 faac 	bl	8018c7c <uxr_reset_input_best_effort_stream>
 8011724:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011728:	3602      	adds	r6, #2
 801172a:	42ab      	cmp	r3, r5
 801172c:	d8f6      	bhi.n	801171c <uxr_reset_stream_storage+0x28>
 801172e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8011732:	b15b      	cbz	r3, 801174c <uxr_reset_stream_storage+0x58>
 8011734:	f104 0618 	add.w	r6, r4, #24
 8011738:	2500      	movs	r5, #0
 801173a:	4630      	mov	r0, r6
 801173c:	3501      	adds	r5, #1
 801173e:	f007 fd43 	bl	80191c8 <uxr_reset_output_reliable_stream>
 8011742:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8011746:	3628      	adds	r6, #40	; 0x28
 8011748:	42ab      	cmp	r3, r5
 801174a:	d8f6      	bhi.n	801173a <uxr_reset_stream_storage+0x46>
 801174c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8011750:	b15b      	cbz	r3, 801176a <uxr_reset_stream_storage+0x76>
 8011752:	f104 0648 	add.w	r6, r4, #72	; 0x48
 8011756:	2500      	movs	r5, #0
 8011758:	4630      	mov	r0, r6
 801175a:	3501      	adds	r5, #1
 801175c:	f007 fafa 	bl	8018d54 <uxr_reset_input_reliable_stream>
 8011760:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8011764:	3618      	adds	r6, #24
 8011766:	42ab      	cmp	r3, r5
 8011768:	d8f6      	bhi.n	8011758 <uxr_reset_stream_storage+0x64>
 801176a:	bd70      	pop	{r4, r5, r6, pc}

0801176c <uxr_add_output_best_effort_buffer>:
 801176c:	b510      	push	{r4, lr}
 801176e:	7c04      	ldrb	r4, [r0, #16]
 8011770:	b082      	sub	sp, #8
 8011772:	f104 0c01 	add.w	ip, r4, #1
 8011776:	f880 c010 	strb.w	ip, [r0, #16]
 801177a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 801177e:	f007 fc6d 	bl	801905c <uxr_init_output_best_effort_stream>
 8011782:	2201      	movs	r2, #1
 8011784:	4620      	mov	r0, r4
 8011786:	4611      	mov	r1, r2
 8011788:	b002      	add	sp, #8
 801178a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801178e:	f7ff bf4d 	b.w	801162c <uxr_stream_id>
 8011792:	bf00      	nop

08011794 <uxr_add_output_reliable_buffer>:
 8011794:	b510      	push	{r4, lr}
 8011796:	b084      	sub	sp, #16
 8011798:	4684      	mov	ip, r0
 801179a:	2028      	movs	r0, #40	; 0x28
 801179c:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80117a0:	9400      	str	r4, [sp, #0]
 80117a2:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 80117a6:	fb00 c004 	mla	r0, r0, r4, ip
 80117aa:	f104 0e01 	add.w	lr, r4, #1
 80117ae:	3018      	adds	r0, #24
 80117b0:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 80117b4:	f007 fcd2 	bl	801915c <uxr_init_output_reliable_stream>
 80117b8:	2201      	movs	r2, #1
 80117ba:	2102      	movs	r1, #2
 80117bc:	4620      	mov	r0, r4
 80117be:	b004      	add	sp, #16
 80117c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80117c4:	f7ff bf32 	b.w	801162c <uxr_stream_id>

080117c8 <uxr_add_input_best_effort_buffer>:
 80117c8:	b510      	push	{r4, lr}
 80117ca:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 80117ce:	b082      	sub	sp, #8
 80117d0:	1c62      	adds	r2, r4, #1
 80117d2:	f104 0321 	add.w	r3, r4, #33	; 0x21
 80117d6:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 80117da:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80117de:	f007 fa49 	bl	8018c74 <uxr_init_input_best_effort_stream>
 80117e2:	2200      	movs	r2, #0
 80117e4:	2101      	movs	r1, #1
 80117e6:	4620      	mov	r0, r4
 80117e8:	b002      	add	sp, #8
 80117ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80117ee:	f7ff bf1d 	b.w	801162c <uxr_stream_id>
 80117f2:	bf00      	nop

080117f4 <uxr_add_input_reliable_buffer>:
 80117f4:	b510      	push	{r4, lr}
 80117f6:	b084      	sub	sp, #16
 80117f8:	4684      	mov	ip, r0
 80117fa:	2018      	movs	r0, #24
 80117fc:	9c06      	ldr	r4, [sp, #24]
 80117fe:	9400      	str	r4, [sp, #0]
 8011800:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 8011804:	fb00 c004 	mla	r0, r0, r4, ip
 8011808:	f104 0e01 	add.w	lr, r4, #1
 801180c:	3048      	adds	r0, #72	; 0x48
 801180e:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 8011812:	f007 fa79 	bl	8018d08 <uxr_init_input_reliable_stream>
 8011816:	2200      	movs	r2, #0
 8011818:	2102      	movs	r1, #2
 801181a:	4620      	mov	r0, r4
 801181c:	b004      	add	sp, #16
 801181e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011822:	f7ff bf03 	b.w	801162c <uxr_stream_id>
 8011826:	bf00      	nop

08011828 <uxr_get_output_best_effort_stream>:
 8011828:	7c03      	ldrb	r3, [r0, #16]
 801182a:	428b      	cmp	r3, r1
 801182c:	bf8c      	ite	hi
 801182e:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8011832:	2000      	movls	r0, #0
 8011834:	4770      	bx	lr
 8011836:	bf00      	nop

08011838 <uxr_get_output_reliable_stream>:
 8011838:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 801183c:	428b      	cmp	r3, r1
 801183e:	d904      	bls.n	801184a <uxr_get_output_reliable_stream+0x12>
 8011840:	2328      	movs	r3, #40	; 0x28
 8011842:	fb03 0001 	mla	r0, r3, r1, r0
 8011846:	3018      	adds	r0, #24
 8011848:	4770      	bx	lr
 801184a:	2000      	movs	r0, #0
 801184c:	4770      	bx	lr
 801184e:	bf00      	nop

08011850 <uxr_get_input_best_effort_stream>:
 8011850:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8011854:	428b      	cmp	r3, r1
 8011856:	d903      	bls.n	8011860 <uxr_get_input_best_effort_stream+0x10>
 8011858:	3121      	adds	r1, #33	; 0x21
 801185a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801185e:	4770      	bx	lr
 8011860:	2000      	movs	r0, #0
 8011862:	4770      	bx	lr

08011864 <uxr_get_input_reliable_stream>:
 8011864:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8011868:	428b      	cmp	r3, r1
 801186a:	d904      	bls.n	8011876 <uxr_get_input_reliable_stream+0x12>
 801186c:	2318      	movs	r3, #24
 801186e:	fb03 0001 	mla	r0, r3, r1, r0
 8011872:	3048      	adds	r0, #72	; 0x48
 8011874:	4770      	bx	lr
 8011876:	2000      	movs	r0, #0
 8011878:	4770      	bx	lr
 801187a:	bf00      	nop

0801187c <uxr_output_streams_confirmed>:
 801187c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8011880:	b183      	cbz	r3, 80118a4 <uxr_output_streams_confirmed+0x28>
 8011882:	b570      	push	{r4, r5, r6, lr}
 8011884:	4606      	mov	r6, r0
 8011886:	f100 0518 	add.w	r5, r0, #24
 801188a:	2400      	movs	r4, #0
 801188c:	e000      	b.n	8011890 <uxr_output_streams_confirmed+0x14>
 801188e:	b140      	cbz	r0, 80118a2 <uxr_output_streams_confirmed+0x26>
 8011890:	4628      	mov	r0, r5
 8011892:	3401      	adds	r4, #1
 8011894:	f007 ff0c 	bl	80196b0 <uxr_is_output_up_to_date>
 8011898:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 801189c:	3528      	adds	r5, #40	; 0x28
 801189e:	42a3      	cmp	r3, r4
 80118a0:	d8f5      	bhi.n	801188e <uxr_output_streams_confirmed+0x12>
 80118a2:	bd70      	pop	{r4, r5, r6, pc}
 80118a4:	2001      	movs	r0, #1
 80118a6:	4770      	bx	lr

080118a8 <uxr_buffer_submessage_header>:
 80118a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118aa:	460e      	mov	r6, r1
 80118ac:	2104      	movs	r1, #4
 80118ae:	4604      	mov	r4, r0
 80118b0:	4615      	mov	r5, r2
 80118b2:	461f      	mov	r7, r3
 80118b4:	f7fe fc06 	bl	80100c4 <ucdr_align_to>
 80118b8:	2301      	movs	r3, #1
 80118ba:	4631      	mov	r1, r6
 80118bc:	4620      	mov	r0, r4
 80118be:	ea47 0203 	orr.w	r2, r7, r3
 80118c2:	7523      	strb	r3, [r4, #20]
 80118c4:	462b      	mov	r3, r5
 80118c6:	f000 fa29 	bl	8011d1c <uxr_serialize_submessage_header>
 80118ca:	4620      	mov	r0, r4
 80118cc:	f7fe fc10 	bl	80100f0 <ucdr_buffer_remaining>
 80118d0:	42a8      	cmp	r0, r5
 80118d2:	bf34      	ite	cc
 80118d4:	2000      	movcc	r0, #0
 80118d6:	2001      	movcs	r0, #1
 80118d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118da:	bf00      	nop

080118dc <uxr_read_submessage_header>:
 80118dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118e0:	4604      	mov	r4, r0
 80118e2:	460d      	mov	r5, r1
 80118e4:	2104      	movs	r1, #4
 80118e6:	4616      	mov	r6, r2
 80118e8:	4698      	mov	r8, r3
 80118ea:	f7fe fbeb 	bl	80100c4 <ucdr_align_to>
 80118ee:	4620      	mov	r0, r4
 80118f0:	f7fe fbfe 	bl	80100f0 <ucdr_buffer_remaining>
 80118f4:	2803      	cmp	r0, #3
 80118f6:	bf8c      	ite	hi
 80118f8:	2701      	movhi	r7, #1
 80118fa:	2700      	movls	r7, #0
 80118fc:	d802      	bhi.n	8011904 <uxr_read_submessage_header+0x28>
 80118fe:	4638      	mov	r0, r7
 8011900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011904:	4633      	mov	r3, r6
 8011906:	4642      	mov	r2, r8
 8011908:	4620      	mov	r0, r4
 801190a:	4629      	mov	r1, r5
 801190c:	f000 fa1a 	bl	8011d44 <uxr_deserialize_submessage_header>
 8011910:	f898 3000 	ldrb.w	r3, [r8]
 8011914:	4638      	mov	r0, r7
 8011916:	f003 0201 	and.w	r2, r3, #1
 801191a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 801191e:	f888 3000 	strb.w	r3, [r8]
 8011922:	7522      	strb	r2, [r4, #20]
 8011924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011928 <uxr_submessage_padding>:
 8011928:	f010 0003 	ands.w	r0, r0, #3
 801192c:	bf18      	it	ne
 801192e:	f1c0 0004 	rsbne	r0, r0, #4
 8011932:	4770      	bx	lr

08011934 <uxr_millis>:
 8011934:	b510      	push	{r4, lr}
 8011936:	b084      	sub	sp, #16
 8011938:	2001      	movs	r0, #1
 801193a:	4669      	mov	r1, sp
 801193c:	f7f0 fe78 	bl	8002630 <clock_gettime>
 8011940:	4908      	ldr	r1, [pc, #32]	; (8011964 <uxr_millis+0x30>)
 8011942:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8011946:	fba0 0301 	umull	r0, r3, r0, r1
 801194a:	1900      	adds	r0, r0, r4
 801194c:	fb01 3102 	mla	r1, r1, r2, r3
 8011950:	4a05      	ldr	r2, [pc, #20]	; (8011968 <uxr_millis+0x34>)
 8011952:	f04f 0300 	mov.w	r3, #0
 8011956:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 801195a:	f7ee fcd9 	bl	8000310 <__aeabi_ldivmod>
 801195e:	b004      	add	sp, #16
 8011960:	bd10      	pop	{r4, pc}
 8011962:	bf00      	nop
 8011964:	3b9aca00 	.word	0x3b9aca00
 8011968:	000f4240 	.word	0x000f4240

0801196c <uxr_nanos>:
 801196c:	b510      	push	{r4, lr}
 801196e:	b084      	sub	sp, #16
 8011970:	2001      	movs	r0, #1
 8011972:	4669      	mov	r1, sp
 8011974:	f7f0 fe5c 	bl	8002630 <clock_gettime>
 8011978:	4a06      	ldr	r2, [pc, #24]	; (8011994 <uxr_nanos+0x28>)
 801197a:	9800      	ldr	r0, [sp, #0]
 801197c:	9902      	ldr	r1, [sp, #8]
 801197e:	fba0 0302 	umull	r0, r3, r0, r2
 8011982:	9c01      	ldr	r4, [sp, #4]
 8011984:	1840      	adds	r0, r0, r1
 8011986:	fb02 3304 	mla	r3, r2, r4, r3
 801198a:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 801198e:	b004      	add	sp, #16
 8011990:	bd10      	pop	{r4, pc}
 8011992:	bf00      	nop
 8011994:	3b9aca00 	.word	0x3b9aca00

08011998 <on_full_output_buffer_fragmented>:
 8011998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801199c:	460c      	mov	r4, r1
 801199e:	b08a      	sub	sp, #40	; 0x28
 80119a0:	4606      	mov	r6, r0
 80119a2:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 80119a6:	f104 0008 	add.w	r0, r4, #8
 80119aa:	f7ff ff45 	bl	8011838 <uxr_get_output_reliable_stream>
 80119ae:	4605      	mov	r5, r0
 80119b0:	f007 fe88 	bl	80196c4 <get_available_free_slots>
 80119b4:	b968      	cbnz	r0, 80119d2 <on_full_output_buffer_fragmented+0x3a>
 80119b6:	4620      	mov	r0, r4
 80119b8:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 80119bc:	4798      	blx	r3
 80119be:	b918      	cbnz	r0, 80119c8 <on_full_output_buffer_fragmented+0x30>
 80119c0:	2001      	movs	r0, #1
 80119c2:	b00a      	add	sp, #40	; 0x28
 80119c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119c8:	4628      	mov	r0, r5
 80119ca:	f007 fe7b 	bl	80196c4 <get_available_free_slots>
 80119ce:	2800      	cmp	r0, #0
 80119d0:	d0f6      	beq.n	80119c0 <on_full_output_buffer_fragmented+0x28>
 80119d2:	8929      	ldrh	r1, [r5, #8]
 80119d4:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80119d8:	89eb      	ldrh	r3, [r5, #14]
 80119da:	7b28      	ldrb	r0, [r5, #12]
 80119dc:	686f      	ldr	r7, [r5, #4]
 80119de:	1a12      	subs	r2, r2, r0
 80119e0:	fbb3 f0f1 	udiv	r0, r3, r1
 80119e4:	fbb7 f7f1 	udiv	r7, r7, r1
 80119e8:	fb01 3110 	mls	r1, r1, r0, r3
 80119ec:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 80119f0:	b289      	uxth	r1, r1
 80119f2:	fb07 f101 	mul.w	r1, r7, r1
 80119f6:	3f04      	subs	r7, #4
 80119f8:	443a      	add	r2, r7
 80119fa:	3104      	adds	r1, #4
 80119fc:	fa1f f882 	uxth.w	r8, r2
 8011a00:	463a      	mov	r2, r7
 8011a02:	eba3 0308 	sub.w	r3, r3, r8
 8011a06:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 8011a0a:	682b      	ldr	r3, [r5, #0]
 8011a0c:	4419      	add	r1, r3
 8011a0e:	2300      	movs	r3, #0
 8011a10:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8011a14:	9000      	str	r0, [sp, #0]
 8011a16:	a802      	add	r0, sp, #8
 8011a18:	f7fe fb26 	bl	8010068 <ucdr_init_buffer_origin_offset>
 8011a1c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8011a20:	f102 0308 	add.w	r3, r2, #8
 8011a24:	42bb      	cmp	r3, r7
 8011a26:	d927      	bls.n	8011a78 <on_full_output_buffer_fragmented+0xe0>
 8011a28:	4642      	mov	r2, r8
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	210d      	movs	r1, #13
 8011a2e:	a802      	add	r0, sp, #8
 8011a30:	f7ff ff3a 	bl	80118a8 <uxr_buffer_submessage_header>
 8011a34:	8929      	ldrh	r1, [r5, #8]
 8011a36:	89eb      	ldrh	r3, [r5, #14]
 8011a38:	686a      	ldr	r2, [r5, #4]
 8011a3a:	fbb3 f0f1 	udiv	r0, r3, r1
 8011a3e:	fbb2 f2f1 	udiv	r2, r2, r1
 8011a42:	fb01 3310 	mls	r3, r1, r0, r3
 8011a46:	b29b      	uxth	r3, r3
 8011a48:	fb02 f303 	mul.w	r3, r2, r3
 8011a4c:	682a      	ldr	r2, [r5, #0]
 8011a4e:	50d7      	str	r7, [r2, r3]
 8011a50:	2101      	movs	r1, #1
 8011a52:	89e8      	ldrh	r0, [r5, #14]
 8011a54:	f007 ff88 	bl	8019968 <uxr_seq_num_add>
 8011a58:	9904      	ldr	r1, [sp, #16]
 8011a5a:	9a03      	ldr	r2, [sp, #12]
 8011a5c:	81e8      	strh	r0, [r5, #14]
 8011a5e:	4630      	mov	r0, r6
 8011a60:	1a52      	subs	r2, r2, r1
 8011a62:	f7fe fb13 	bl	801008c <ucdr_init_buffer>
 8011a66:	4630      	mov	r0, r6
 8011a68:	4622      	mov	r2, r4
 8011a6a:	490f      	ldr	r1, [pc, #60]	; (8011aa8 <on_full_output_buffer_fragmented+0x110>)
 8011a6c:	f7fe fae2 	bl	8010034 <ucdr_set_on_full_buffer_callback>
 8011a70:	2000      	movs	r0, #0
 8011a72:	b00a      	add	sp, #40	; 0x28
 8011a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a78:	b292      	uxth	r2, r2
 8011a7a:	2302      	movs	r3, #2
 8011a7c:	210d      	movs	r1, #13
 8011a7e:	a802      	add	r0, sp, #8
 8011a80:	f7ff ff12 	bl	80118a8 <uxr_buffer_submessage_header>
 8011a84:	8928      	ldrh	r0, [r5, #8]
 8011a86:	89eb      	ldrh	r3, [r5, #14]
 8011a88:	6869      	ldr	r1, [r5, #4]
 8011a8a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8011a8e:	fbb3 f7f0 	udiv	r7, r3, r0
 8011a92:	fbb1 f1f0 	udiv	r1, r1, r0
 8011a96:	fb00 3317 	mls	r3, r0, r7, r3
 8011a9a:	3208      	adds	r2, #8
 8011a9c:	b29b      	uxth	r3, r3
 8011a9e:	fb01 f303 	mul.w	r3, r1, r3
 8011aa2:	6829      	ldr	r1, [r5, #0]
 8011aa4:	50ca      	str	r2, [r1, r3]
 8011aa6:	e7d3      	b.n	8011a50 <on_full_output_buffer_fragmented+0xb8>
 8011aa8:	08011999 	.word	0x08011999

08011aac <uxr_prepare_output_stream>:
 8011aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011aae:	b087      	sub	sp, #28
 8011ab0:	2707      	movs	r7, #7
 8011ab2:	2500      	movs	r5, #0
 8011ab4:	461c      	mov	r4, r3
 8011ab6:	4606      	mov	r6, r0
 8011ab8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8011abc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011abe:	e9cd 7500 	strd	r7, r5, [sp]
 8011ac2:	3204      	adds	r2, #4
 8011ac4:	f7ff fc44 	bl	8011350 <uxr_prepare_stream_to_write_submessage>
 8011ac8:	f080 0201 	eor.w	r2, r0, #1
 8011acc:	b2d2      	uxtb	r2, r2
 8011ace:	75a2      	strb	r2, [r4, #22]
 8011ad0:	b112      	cbz	r2, 8011ad8 <uxr_prepare_output_stream+0x2c>
 8011ad2:	4628      	mov	r0, r5
 8011ad4:	b007      	add	sp, #28
 8011ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ad8:	aa05      	add	r2, sp, #20
 8011ada:	9902      	ldr	r1, [sp, #8]
 8011adc:	4630      	mov	r0, r6
 8011ade:	f7ff fd73 	bl	80115c8 <uxr_init_base_object_request>
 8011ae2:	a905      	add	r1, sp, #20
 8011ae4:	4605      	mov	r5, r0
 8011ae6:	4620      	mov	r0, r4
 8011ae8:	f000 ffd0 	bl	8012a8c <uxr_serialize_WRITE_DATA_Payload_Data>
 8011aec:	69a6      	ldr	r6, [r4, #24]
 8011aee:	69e7      	ldr	r7, [r4, #28]
 8011af0:	4620      	mov	r0, r4
 8011af2:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8011af6:	1a52      	subs	r2, r2, r1
 8011af8:	f7fe fac8 	bl	801008c <ucdr_init_buffer>
 8011afc:	4620      	mov	r0, r4
 8011afe:	463a      	mov	r2, r7
 8011b00:	4631      	mov	r1, r6
 8011b02:	f7fe fa97 	bl	8010034 <ucdr_set_on_full_buffer_callback>
 8011b06:	4628      	mov	r0, r5
 8011b08:	b007      	add	sp, #28
 8011b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011b0c <uxr_prepare_output_stream_fragmented>:
 8011b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b10:	b091      	sub	sp, #68	; 0x44
 8011b12:	4605      	mov	r5, r0
 8011b14:	3008      	adds	r0, #8
 8011b16:	461e      	mov	r6, r3
 8011b18:	9105      	str	r1, [sp, #20]
 8011b1a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8011b1e:	9204      	str	r2, [sp, #16]
 8011b20:	f7ff fe8a 	bl	8011838 <uxr_get_output_reliable_stream>
 8011b24:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8011b28:	2b01      	cmp	r3, #1
 8011b2a:	f000 8093 	beq.w	8011c54 <uxr_prepare_output_stream_fragmented+0x148>
 8011b2e:	4604      	mov	r4, r0
 8011b30:	2800      	cmp	r0, #0
 8011b32:	f000 808f 	beq.w	8011c54 <uxr_prepare_output_stream_fragmented+0x148>
 8011b36:	f007 fdc5 	bl	80196c4 <get_available_free_slots>
 8011b3a:	2800      	cmp	r0, #0
 8011b3c:	f000 8085 	beq.w	8011c4a <uxr_prepare_output_stream_fragmented+0x13e>
 8011b40:	8923      	ldrh	r3, [r4, #8]
 8011b42:	89e7      	ldrh	r7, [r4, #14]
 8011b44:	6862      	ldr	r2, [r4, #4]
 8011b46:	fbb7 f9f3 	udiv	r9, r7, r3
 8011b4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8011b4e:	fb03 7919 	mls	r9, r3, r9, r7
 8011b52:	6823      	ldr	r3, [r4, #0]
 8011b54:	f1a2 0b04 	sub.w	fp, r2, #4
 8011b58:	9203      	str	r2, [sp, #12]
 8011b5a:	fa1f f989 	uxth.w	r9, r9
 8011b5e:	fb02 f909 	mul.w	r9, r2, r9
 8011b62:	f109 0904 	add.w	r9, r9, #4
 8011b66:	4499      	add	r9, r3
 8011b68:	7b23      	ldrb	r3, [r4, #12]
 8011b6a:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8011b6e:	4543      	cmp	r3, r8
 8011b70:	d37c      	bcc.n	8011c6c <uxr_prepare_output_stream_fragmented+0x160>
 8011b72:	f1ab 0a04 	sub.w	sl, fp, #4
 8011b76:	465a      	mov	r2, fp
 8011b78:	4649      	mov	r1, r9
 8011b7a:	a808      	add	r0, sp, #32
 8011b7c:	ebaa 0a03 	sub.w	sl, sl, r3
 8011b80:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8011b82:	f8cd 8000 	str.w	r8, [sp]
 8011b86:	3308      	adds	r3, #8
 8011b88:	fa1f fa8a 	uxth.w	sl, sl
 8011b8c:	9302      	str	r3, [sp, #8]
 8011b8e:	2300      	movs	r3, #0
 8011b90:	f7fe fa6a 	bl	8010068 <ucdr_init_buffer_origin_offset>
 8011b94:	9b02      	ldr	r3, [sp, #8]
 8011b96:	4652      	mov	r2, sl
 8011b98:	210d      	movs	r1, #13
 8011b9a:	455b      	cmp	r3, fp
 8011b9c:	bf34      	ite	cc
 8011b9e:	2302      	movcc	r3, #2
 8011ba0:	2300      	movcs	r3, #0
 8011ba2:	a808      	add	r0, sp, #32
 8011ba4:	f7ff fe80 	bl	80118a8 <uxr_buffer_submessage_header>
 8011ba8:	8921      	ldrh	r1, [r4, #8]
 8011baa:	6863      	ldr	r3, [r4, #4]
 8011bac:	4638      	mov	r0, r7
 8011bae:	fbb7 f2f1 	udiv	r2, r7, r1
 8011bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8011bb6:	fb01 7212 	mls	r2, r1, r2, r7
 8011bba:	2101      	movs	r1, #1
 8011bbc:	b292      	uxth	r2, r2
 8011bbe:	fb02 f303 	mul.w	r3, r2, r3
 8011bc2:	6822      	ldr	r2, [r4, #0]
 8011bc4:	f842 b003 	str.w	fp, [r2, r3]
 8011bc8:	f007 fece 	bl	8019968 <uxr_seq_num_add>
 8011bcc:	9b03      	ldr	r3, [sp, #12]
 8011bce:	f108 0104 	add.w	r1, r8, #4
 8011bd2:	4607      	mov	r7, r0
 8011bd4:	f1a3 0208 	sub.w	r2, r3, #8
 8011bd8:	4630      	mov	r0, r6
 8011bda:	4449      	add	r1, r9
 8011bdc:	eba2 0208 	sub.w	r2, r2, r8
 8011be0:	f7fe fa54 	bl	801008c <ucdr_init_buffer>
 8011be4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8011be6:	2107      	movs	r1, #7
 8011be8:	81e7      	strh	r7, [r4, #14]
 8011bea:	1d1a      	adds	r2, r3, #4
 8011bec:	2300      	movs	r3, #0
 8011bee:	4630      	mov	r0, r6
 8011bf0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8011bf4:	bf28      	it	cs
 8011bf6:	461a      	movcs	r2, r3
 8011bf8:	b292      	uxth	r2, r2
 8011bfa:	f7ff fe55 	bl	80118a8 <uxr_buffer_submessage_header>
 8011bfe:	aa07      	add	r2, sp, #28
 8011c00:	9904      	ldr	r1, [sp, #16]
 8011c02:	4628      	mov	r0, r5
 8011c04:	f7ff fce0 	bl	80115c8 <uxr_init_base_object_request>
 8011c08:	4604      	mov	r4, r0
 8011c0a:	b320      	cbz	r0, 8011c56 <uxr_prepare_output_stream_fragmented+0x14a>
 8011c0c:	a907      	add	r1, sp, #28
 8011c0e:	4630      	mov	r0, r6
 8011c10:	f000 ff3c 	bl	8012a8c <uxr_serialize_WRITE_DATA_Payload_Data>
 8011c14:	4630      	mov	r0, r6
 8011c16:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8011c1a:	1a52      	subs	r2, r2, r1
 8011c1c:	f7fe fa36 	bl	801008c <ucdr_init_buffer>
 8011c20:	9b05      	ldr	r3, [sp, #20]
 8011c22:	9a02      	ldr	r2, [sp, #8]
 8011c24:	4630      	mov	r0, r6
 8011c26:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 8011c2a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011c2c:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 8011c30:	462a      	mov	r2, r5
 8011c32:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 8011c36:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8011c38:	4918      	ldr	r1, [pc, #96]	; (8011c9c <uxr_prepare_output_stream_fragmented+0x190>)
 8011c3a:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 8011c3e:	f7fe f9f9 	bl	8010034 <ucdr_set_on_full_buffer_callback>
 8011c42:	4620      	mov	r0, r4
 8011c44:	b011      	add	sp, #68	; 0x44
 8011c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c4a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011c4c:	4628      	mov	r0, r5
 8011c4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011c50:	4798      	blx	r3
 8011c52:	b920      	cbnz	r0, 8011c5e <uxr_prepare_output_stream_fragmented+0x152>
 8011c54:	2400      	movs	r4, #0
 8011c56:	4620      	mov	r0, r4
 8011c58:	b011      	add	sp, #68	; 0x44
 8011c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c5e:	4620      	mov	r0, r4
 8011c60:	f007 fd30 	bl	80196c4 <get_available_free_slots>
 8011c64:	2800      	cmp	r0, #0
 8011c66:	f47f af6b 	bne.w	8011b40 <uxr_prepare_output_stream_fragmented+0x34>
 8011c6a:	e7f3      	b.n	8011c54 <uxr_prepare_output_stream_fragmented+0x148>
 8011c6c:	4638      	mov	r0, r7
 8011c6e:	2101      	movs	r1, #1
 8011c70:	f007 fe7a 	bl	8019968 <uxr_seq_num_add>
 8011c74:	8922      	ldrh	r2, [r4, #8]
 8011c76:	6863      	ldr	r3, [r4, #4]
 8011c78:	4607      	mov	r7, r0
 8011c7a:	fbb3 f9f2 	udiv	r9, r3, r2
 8011c7e:	fbb0 f3f2 	udiv	r3, r0, r2
 8011c82:	fb02 0313 	mls	r3, r2, r3, r0
 8011c86:	b29b      	uxth	r3, r3
 8011c88:	fb03 f909 	mul.w	r9, r3, r9
 8011c8c:	6823      	ldr	r3, [r4, #0]
 8011c8e:	f109 0904 	add.w	r9, r9, #4
 8011c92:	4499      	add	r9, r3
 8011c94:	7b23      	ldrb	r3, [r4, #12]
 8011c96:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8011c9a:	e76a      	b.n	8011b72 <uxr_prepare_output_stream_fragmented+0x66>
 8011c9c:	08011999 	.word	0x08011999

08011ca0 <uxr_serialize_message_header>:
 8011ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ca2:	4616      	mov	r6, r2
 8011ca4:	b083      	sub	sp, #12
 8011ca6:	4604      	mov	r4, r0
 8011ca8:	460d      	mov	r5, r1
 8011caa:	9301      	str	r3, [sp, #4]
 8011cac:	9f08      	ldr	r7, [sp, #32]
 8011cae:	f7fc fe8d 	bl	800e9cc <ucdr_serialize_uint8_t>
 8011cb2:	4631      	mov	r1, r6
 8011cb4:	4620      	mov	r0, r4
 8011cb6:	f7fc fe89 	bl	800e9cc <ucdr_serialize_uint8_t>
 8011cba:	9a01      	ldr	r2, [sp, #4]
 8011cbc:	2101      	movs	r1, #1
 8011cbe:	4620      	mov	r0, r4
 8011cc0:	f7fc ff30 	bl	800eb24 <ucdr_serialize_endian_uint16_t>
 8011cc4:	062b      	lsls	r3, r5, #24
 8011cc6:	d501      	bpl.n	8011ccc <uxr_serialize_message_header+0x2c>
 8011cc8:	b003      	add	sp, #12
 8011cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ccc:	2204      	movs	r2, #4
 8011cce:	4639      	mov	r1, r7
 8011cd0:	4620      	mov	r0, r4
 8011cd2:	b003      	add	sp, #12
 8011cd4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011cd8:	f7fc bcd4 	b.w	800e684 <ucdr_serialize_array_uint8_t>

08011cdc <uxr_deserialize_message_header>:
 8011cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011cde:	4616      	mov	r6, r2
 8011ce0:	b083      	sub	sp, #12
 8011ce2:	4604      	mov	r4, r0
 8011ce4:	460d      	mov	r5, r1
 8011ce6:	9301      	str	r3, [sp, #4]
 8011ce8:	9f08      	ldr	r7, [sp, #32]
 8011cea:	f7fc fe85 	bl	800e9f8 <ucdr_deserialize_uint8_t>
 8011cee:	4631      	mov	r1, r6
 8011cf0:	4620      	mov	r0, r4
 8011cf2:	f7fc fe81 	bl	800e9f8 <ucdr_deserialize_uint8_t>
 8011cf6:	9a01      	ldr	r2, [sp, #4]
 8011cf8:	2101      	movs	r1, #1
 8011cfa:	4620      	mov	r0, r4
 8011cfc:	f7fd f806 	bl	800ed0c <ucdr_deserialize_endian_uint16_t>
 8011d00:	f995 3000 	ldrsb.w	r3, [r5]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	da01      	bge.n	8011d0c <uxr_deserialize_message_header+0x30>
 8011d08:	b003      	add	sp, #12
 8011d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d0c:	2204      	movs	r2, #4
 8011d0e:	4639      	mov	r1, r7
 8011d10:	4620      	mov	r0, r4
 8011d12:	b003      	add	sp, #12
 8011d14:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011d18:	f7fc bd18 	b.w	800e74c <ucdr_deserialize_array_uint8_t>

08011d1c <uxr_serialize_submessage_header>:
 8011d1c:	b530      	push	{r4, r5, lr}
 8011d1e:	4615      	mov	r5, r2
 8011d20:	b083      	sub	sp, #12
 8011d22:	4604      	mov	r4, r0
 8011d24:	9301      	str	r3, [sp, #4]
 8011d26:	f7fc fe51 	bl	800e9cc <ucdr_serialize_uint8_t>
 8011d2a:	4629      	mov	r1, r5
 8011d2c:	4620      	mov	r0, r4
 8011d2e:	f7fc fe4d 	bl	800e9cc <ucdr_serialize_uint8_t>
 8011d32:	9a01      	ldr	r2, [sp, #4]
 8011d34:	2101      	movs	r1, #1
 8011d36:	4620      	mov	r0, r4
 8011d38:	b003      	add	sp, #12
 8011d3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011d3e:	f7fc bef1 	b.w	800eb24 <ucdr_serialize_endian_uint16_t>
 8011d42:	bf00      	nop

08011d44 <uxr_deserialize_submessage_header>:
 8011d44:	b530      	push	{r4, r5, lr}
 8011d46:	4615      	mov	r5, r2
 8011d48:	b083      	sub	sp, #12
 8011d4a:	4604      	mov	r4, r0
 8011d4c:	9301      	str	r3, [sp, #4]
 8011d4e:	f7fc fe53 	bl	800e9f8 <ucdr_deserialize_uint8_t>
 8011d52:	4629      	mov	r1, r5
 8011d54:	4620      	mov	r0, r4
 8011d56:	f7fc fe4f 	bl	800e9f8 <ucdr_deserialize_uint8_t>
 8011d5a:	9a01      	ldr	r2, [sp, #4]
 8011d5c:	2101      	movs	r1, #1
 8011d5e:	4620      	mov	r0, r4
 8011d60:	b003      	add	sp, #12
 8011d62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011d66:	f7fc bfd1 	b.w	800ed0c <ucdr_deserialize_endian_uint16_t>
 8011d6a:	bf00      	nop

08011d6c <uxr_serialize_CLIENT_Representation>:
 8011d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d70:	2204      	movs	r2, #4
 8011d72:	460e      	mov	r6, r1
 8011d74:	4605      	mov	r5, r0
 8011d76:	f7fc fc85 	bl	800e684 <ucdr_serialize_array_uint8_t>
 8011d7a:	4607      	mov	r7, r0
 8011d7c:	2202      	movs	r2, #2
 8011d7e:	1d31      	adds	r1, r6, #4
 8011d80:	4628      	mov	r0, r5
 8011d82:	f7fc fc7f 	bl	800e684 <ucdr_serialize_array_uint8_t>
 8011d86:	4038      	ands	r0, r7
 8011d88:	2202      	movs	r2, #2
 8011d8a:	1db1      	adds	r1, r6, #6
 8011d8c:	b2c7      	uxtb	r7, r0
 8011d8e:	4628      	mov	r0, r5
 8011d90:	f7fc fc78 	bl	800e684 <ucdr_serialize_array_uint8_t>
 8011d94:	2204      	movs	r2, #4
 8011d96:	4007      	ands	r7, r0
 8011d98:	f106 0108 	add.w	r1, r6, #8
 8011d9c:	4628      	mov	r0, r5
 8011d9e:	f7fc fc71 	bl	800e684 <ucdr_serialize_array_uint8_t>
 8011da2:	4007      	ands	r7, r0
 8011da4:	7b31      	ldrb	r1, [r6, #12]
 8011da6:	4628      	mov	r0, r5
 8011da8:	f7fc fe10 	bl	800e9cc <ucdr_serialize_uint8_t>
 8011dac:	7b71      	ldrb	r1, [r6, #13]
 8011dae:	4007      	ands	r7, r0
 8011db0:	4628      	mov	r0, r5
 8011db2:	f7fc fddd 	bl	800e970 <ucdr_serialize_bool>
 8011db6:	7b73      	ldrb	r3, [r6, #13]
 8011db8:	ea07 0800 	and.w	r8, r7, r0
 8011dbc:	b93b      	cbnz	r3, 8011dce <uxr_serialize_CLIENT_Representation+0x62>
 8011dbe:	8bb1      	ldrh	r1, [r6, #28]
 8011dc0:	4628      	mov	r0, r5
 8011dc2:	f7fc fe2f 	bl	800ea24 <ucdr_serialize_uint16_t>
 8011dc6:	ea08 0000 	and.w	r0, r8, r0
 8011dca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011dce:	6931      	ldr	r1, [r6, #16]
 8011dd0:	4628      	mov	r0, r5
 8011dd2:	f7fd f811 	bl	800edf8 <ucdr_serialize_uint32_t>
 8011dd6:	6933      	ldr	r3, [r6, #16]
 8011dd8:	b1e3      	cbz	r3, 8011e14 <uxr_serialize_CLIENT_Representation+0xa8>
 8011dda:	b1c0      	cbz	r0, 8011e0e <uxr_serialize_CLIENT_Representation+0xa2>
 8011ddc:	4637      	mov	r7, r6
 8011dde:	f04f 0900 	mov.w	r9, #0
 8011de2:	e000      	b.n	8011de6 <uxr_serialize_CLIENT_Representation+0x7a>
 8011de4:	b19c      	cbz	r4, 8011e0e <uxr_serialize_CLIENT_Representation+0xa2>
 8011de6:	6979      	ldr	r1, [r7, #20]
 8011de8:	4628      	mov	r0, r5
 8011dea:	f006 fe6d 	bl	8018ac8 <ucdr_serialize_string>
 8011dee:	69b9      	ldr	r1, [r7, #24]
 8011df0:	4604      	mov	r4, r0
 8011df2:	4628      	mov	r0, r5
 8011df4:	f006 fe68 	bl	8018ac8 <ucdr_serialize_string>
 8011df8:	f109 0901 	add.w	r9, r9, #1
 8011dfc:	6933      	ldr	r3, [r6, #16]
 8011dfe:	4004      	ands	r4, r0
 8011e00:	3708      	adds	r7, #8
 8011e02:	4599      	cmp	r9, r3
 8011e04:	b2e4      	uxtb	r4, r4
 8011e06:	d3ed      	bcc.n	8011de4 <uxr_serialize_CLIENT_Representation+0x78>
 8011e08:	ea08 0804 	and.w	r8, r8, r4
 8011e0c:	e7d7      	b.n	8011dbe <uxr_serialize_CLIENT_Representation+0x52>
 8011e0e:	f04f 0800 	mov.w	r8, #0
 8011e12:	e7d4      	b.n	8011dbe <uxr_serialize_CLIENT_Representation+0x52>
 8011e14:	ea08 0800 	and.w	r8, r8, r0
 8011e18:	e7d1      	b.n	8011dbe <uxr_serialize_CLIENT_Representation+0x52>
 8011e1a:	bf00      	nop

08011e1c <uxr_deserialize_CLIENT_Representation>:
 8011e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e20:	2204      	movs	r2, #4
 8011e22:	460c      	mov	r4, r1
 8011e24:	4605      	mov	r5, r0
 8011e26:	f7fc fc91 	bl	800e74c <ucdr_deserialize_array_uint8_t>
 8011e2a:	4607      	mov	r7, r0
 8011e2c:	2202      	movs	r2, #2
 8011e2e:	1d21      	adds	r1, r4, #4
 8011e30:	4628      	mov	r0, r5
 8011e32:	f7fc fc8b 	bl	800e74c <ucdr_deserialize_array_uint8_t>
 8011e36:	4038      	ands	r0, r7
 8011e38:	2202      	movs	r2, #2
 8011e3a:	1da1      	adds	r1, r4, #6
 8011e3c:	b2c6      	uxtb	r6, r0
 8011e3e:	4628      	mov	r0, r5
 8011e40:	f7fc fc84 	bl	800e74c <ucdr_deserialize_array_uint8_t>
 8011e44:	2204      	movs	r2, #4
 8011e46:	4006      	ands	r6, r0
 8011e48:	f104 0108 	add.w	r1, r4, #8
 8011e4c:	4628      	mov	r0, r5
 8011e4e:	f7fc fc7d 	bl	800e74c <ucdr_deserialize_array_uint8_t>
 8011e52:	4006      	ands	r6, r0
 8011e54:	f104 010c 	add.w	r1, r4, #12
 8011e58:	4628      	mov	r0, r5
 8011e5a:	f7fc fdcd 	bl	800e9f8 <ucdr_deserialize_uint8_t>
 8011e5e:	f104 010d 	add.w	r1, r4, #13
 8011e62:	ea06 0700 	and.w	r7, r6, r0
 8011e66:	4628      	mov	r0, r5
 8011e68:	f7fc fd98 	bl	800e99c <ucdr_deserialize_bool>
 8011e6c:	7b63      	ldrb	r3, [r4, #13]
 8011e6e:	4007      	ands	r7, r0
 8011e70:	b93b      	cbnz	r3, 8011e82 <uxr_deserialize_CLIENT_Representation+0x66>
 8011e72:	f104 011c 	add.w	r1, r4, #28
 8011e76:	4628      	mov	r0, r5
 8011e78:	f7fc fed4 	bl	800ec24 <ucdr_deserialize_uint16_t>
 8011e7c:	4038      	ands	r0, r7
 8011e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e82:	f104 0110 	add.w	r1, r4, #16
 8011e86:	4628      	mov	r0, r5
 8011e88:	f7fd f8e6 	bl	800f058 <ucdr_deserialize_uint32_t>
 8011e8c:	6923      	ldr	r3, [r4, #16]
 8011e8e:	2b01      	cmp	r3, #1
 8011e90:	d903      	bls.n	8011e9a <uxr_deserialize_CLIENT_Representation+0x7e>
 8011e92:	2301      	movs	r3, #1
 8011e94:	2700      	movs	r7, #0
 8011e96:	75ab      	strb	r3, [r5, #22]
 8011e98:	e7eb      	b.n	8011e72 <uxr_deserialize_CLIENT_Representation+0x56>
 8011e9a:	b30b      	cbz	r3, 8011ee0 <uxr_deserialize_CLIENT_Representation+0xc4>
 8011e9c:	b1f0      	cbz	r0, 8011edc <uxr_deserialize_CLIENT_Representation+0xc0>
 8011e9e:	46a0      	mov	r8, r4
 8011ea0:	f04f 0900 	mov.w	r9, #0
 8011ea4:	e000      	b.n	8011ea8 <uxr_deserialize_CLIENT_Representation+0x8c>
 8011ea6:	b1ce      	cbz	r6, 8011edc <uxr_deserialize_CLIENT_Representation+0xc0>
 8011ea8:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8011eac:	f108 0808 	add.w	r8, r8, #8
 8011eb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011eb4:	4628      	mov	r0, r5
 8011eb6:	f006 fe17 	bl	8018ae8 <ucdr_deserialize_string>
 8011eba:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011ebe:	4606      	mov	r6, r0
 8011ec0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011ec4:	4628      	mov	r0, r5
 8011ec6:	f109 0901 	add.w	r9, r9, #1
 8011eca:	f006 fe0d 	bl	8018ae8 <ucdr_deserialize_string>
 8011ece:	6923      	ldr	r3, [r4, #16]
 8011ed0:	4006      	ands	r6, r0
 8011ed2:	4599      	cmp	r9, r3
 8011ed4:	b2f6      	uxtb	r6, r6
 8011ed6:	d3e6      	bcc.n	8011ea6 <uxr_deserialize_CLIENT_Representation+0x8a>
 8011ed8:	4037      	ands	r7, r6
 8011eda:	e7ca      	b.n	8011e72 <uxr_deserialize_CLIENT_Representation+0x56>
 8011edc:	2700      	movs	r7, #0
 8011ede:	e7c8      	b.n	8011e72 <uxr_deserialize_CLIENT_Representation+0x56>
 8011ee0:	4007      	ands	r7, r0
 8011ee2:	e7c6      	b.n	8011e72 <uxr_deserialize_CLIENT_Representation+0x56>

08011ee4 <uxr_serialize_AGENT_Representation>:
 8011ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ee8:	2204      	movs	r2, #4
 8011eea:	460f      	mov	r7, r1
 8011eec:	4605      	mov	r5, r0
 8011eee:	f7fc fbc9 	bl	800e684 <ucdr_serialize_array_uint8_t>
 8011ef2:	4604      	mov	r4, r0
 8011ef4:	2202      	movs	r2, #2
 8011ef6:	1d39      	adds	r1, r7, #4
 8011ef8:	4628      	mov	r0, r5
 8011efa:	f7fc fbc3 	bl	800e684 <ucdr_serialize_array_uint8_t>
 8011efe:	4020      	ands	r0, r4
 8011f00:	2202      	movs	r2, #2
 8011f02:	1db9      	adds	r1, r7, #6
 8011f04:	b2c4      	uxtb	r4, r0
 8011f06:	4628      	mov	r0, r5
 8011f08:	f7fc fbbc 	bl	800e684 <ucdr_serialize_array_uint8_t>
 8011f0c:	7a39      	ldrb	r1, [r7, #8]
 8011f0e:	4004      	ands	r4, r0
 8011f10:	4628      	mov	r0, r5
 8011f12:	f7fc fd2d 	bl	800e970 <ucdr_serialize_bool>
 8011f16:	7a3b      	ldrb	r3, [r7, #8]
 8011f18:	ea00 0804 	and.w	r8, r0, r4
 8011f1c:	b913      	cbnz	r3, 8011f24 <uxr_serialize_AGENT_Representation+0x40>
 8011f1e:	4640      	mov	r0, r8
 8011f20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f24:	68f9      	ldr	r1, [r7, #12]
 8011f26:	4628      	mov	r0, r5
 8011f28:	f7fc ff66 	bl	800edf8 <ucdr_serialize_uint32_t>
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	b303      	cbz	r3, 8011f72 <uxr_serialize_AGENT_Representation+0x8e>
 8011f30:	b1d0      	cbz	r0, 8011f68 <uxr_serialize_AGENT_Representation+0x84>
 8011f32:	463e      	mov	r6, r7
 8011f34:	f04f 0900 	mov.w	r9, #0
 8011f38:	e000      	b.n	8011f3c <uxr_serialize_AGENT_Representation+0x58>
 8011f3a:	b1ac      	cbz	r4, 8011f68 <uxr_serialize_AGENT_Representation+0x84>
 8011f3c:	6931      	ldr	r1, [r6, #16]
 8011f3e:	4628      	mov	r0, r5
 8011f40:	f006 fdc2 	bl	8018ac8 <ucdr_serialize_string>
 8011f44:	6971      	ldr	r1, [r6, #20]
 8011f46:	4604      	mov	r4, r0
 8011f48:	4628      	mov	r0, r5
 8011f4a:	f006 fdbd 	bl	8018ac8 <ucdr_serialize_string>
 8011f4e:	f109 0901 	add.w	r9, r9, #1
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	4004      	ands	r4, r0
 8011f56:	3608      	adds	r6, #8
 8011f58:	4599      	cmp	r9, r3
 8011f5a:	b2e4      	uxtb	r4, r4
 8011f5c:	d3ed      	bcc.n	8011f3a <uxr_serialize_AGENT_Representation+0x56>
 8011f5e:	ea08 0804 	and.w	r8, r8, r4
 8011f62:	4640      	mov	r0, r8
 8011f64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f68:	f04f 0800 	mov.w	r8, #0
 8011f6c:	4640      	mov	r0, r8
 8011f6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f72:	ea08 0800 	and.w	r8, r8, r0
 8011f76:	e7d2      	b.n	8011f1e <uxr_serialize_AGENT_Representation+0x3a>

08011f78 <uxr_serialize_DATAWRITER_Representation>:
 8011f78:	b570      	push	{r4, r5, r6, lr}
 8011f7a:	460d      	mov	r5, r1
 8011f7c:	7809      	ldrb	r1, [r1, #0]
 8011f7e:	4606      	mov	r6, r0
 8011f80:	f7fc fd24 	bl	800e9cc <ucdr_serialize_uint8_t>
 8011f84:	4604      	mov	r4, r0
 8011f86:	b130      	cbz	r0, 8011f96 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8011f88:	782b      	ldrb	r3, [r5, #0]
 8011f8a:	2b02      	cmp	r3, #2
 8011f8c:	d00c      	beq.n	8011fa8 <uxr_serialize_DATAWRITER_Representation+0x30>
 8011f8e:	2b03      	cmp	r3, #3
 8011f90:	d010      	beq.n	8011fb4 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8011f92:	2b01      	cmp	r3, #1
 8011f94:	d008      	beq.n	8011fa8 <uxr_serialize_DATAWRITER_Representation+0x30>
 8011f96:	2202      	movs	r2, #2
 8011f98:	f505 7102 	add.w	r1, r5, #520	; 0x208
 8011f9c:	4630      	mov	r0, r6
 8011f9e:	f7fc fb71 	bl	800e684 <ucdr_serialize_array_uint8_t>
 8011fa2:	4020      	ands	r0, r4
 8011fa4:	b2c0      	uxtb	r0, r0
 8011fa6:	bd70      	pop	{r4, r5, r6, pc}
 8011fa8:	6869      	ldr	r1, [r5, #4]
 8011faa:	4630      	mov	r0, r6
 8011fac:	f006 fd8c 	bl	8018ac8 <ucdr_serialize_string>
 8011fb0:	4604      	mov	r4, r0
 8011fb2:	e7f0      	b.n	8011f96 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8011fb4:	4629      	mov	r1, r5
 8011fb6:	4630      	mov	r0, r6
 8011fb8:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8011fbc:	3104      	adds	r1, #4
 8011fbe:	f006 fd57 	bl	8018a70 <ucdr_serialize_sequence_uint8_t>
 8011fc2:	4604      	mov	r4, r0
 8011fc4:	e7e7      	b.n	8011f96 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8011fc6:	bf00      	nop

08011fc8 <uxr_serialize_ObjectVariant.part.0>:
 8011fc8:	b570      	push	{r4, r5, r6, lr}
 8011fca:	780b      	ldrb	r3, [r1, #0]
 8011fcc:	460c      	mov	r4, r1
 8011fce:	4605      	mov	r5, r0
 8011fd0:	3b01      	subs	r3, #1
 8011fd2:	2b0d      	cmp	r3, #13
 8011fd4:	d854      	bhi.n	8012080 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8011fd6:	e8df f003 	tbb	[pc, r3]
 8011fda:	0730      	.short	0x0730
 8011fdc:	07071b1b 	.word	0x07071b1b
 8011fe0:	0c530707 	.word	0x0c530707
 8011fe4:	494e0c0c 	.word	0x494e0c0c
 8011fe8:	3104      	adds	r1, #4
 8011fea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011fee:	f7ff bfc3 	b.w	8011f78 <uxr_serialize_DATAWRITER_Representation>
 8011ff2:	7909      	ldrb	r1, [r1, #4]
 8011ff4:	f7fc fcea 	bl	800e9cc <ucdr_serialize_uint8_t>
 8011ff8:	b1e8      	cbz	r0, 8012036 <uxr_serialize_ObjectVariant.part.0+0x6e>
 8011ffa:	7923      	ldrb	r3, [r4, #4]
 8011ffc:	2b01      	cmp	r3, #1
 8011ffe:	d001      	beq.n	8012004 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8012000:	2b02      	cmp	r3, #2
 8012002:	d13d      	bne.n	8012080 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8012004:	68a1      	ldr	r1, [r4, #8]
 8012006:	4628      	mov	r0, r5
 8012008:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801200c:	f006 bd5c 	b.w	8018ac8 <ucdr_serialize_string>
 8012010:	7909      	ldrb	r1, [r1, #4]
 8012012:	f7fc fcdb 	bl	800e9cc <ucdr_serialize_uint8_t>
 8012016:	4606      	mov	r6, r0
 8012018:	b120      	cbz	r0, 8012024 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801201a:	7923      	ldrb	r3, [r4, #4]
 801201c:	2b02      	cmp	r3, #2
 801201e:	d039      	beq.n	8012094 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8012020:	2b03      	cmp	r3, #3
 8012022:	d02f      	beq.n	8012084 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8012024:	2202      	movs	r2, #2
 8012026:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 801202a:	4628      	mov	r0, r5
 801202c:	f7fc fb2a 	bl	800e684 <ucdr_serialize_array_uint8_t>
 8012030:	4030      	ands	r0, r6
 8012032:	b2c0      	uxtb	r0, r0
 8012034:	bd70      	pop	{r4, r5, r6, pc}
 8012036:	2000      	movs	r0, #0
 8012038:	bd70      	pop	{r4, r5, r6, pc}
 801203a:	7909      	ldrb	r1, [r1, #4]
 801203c:	f7fc fcc6 	bl	800e9cc <ucdr_serialize_uint8_t>
 8012040:	4606      	mov	r6, r0
 8012042:	b158      	cbz	r0, 801205c <uxr_serialize_ObjectVariant.part.0+0x94>
 8012044:	7923      	ldrb	r3, [r4, #4]
 8012046:	2b02      	cmp	r3, #2
 8012048:	d003      	beq.n	8012052 <uxr_serialize_ObjectVariant.part.0+0x8a>
 801204a:	2b03      	cmp	r3, #3
 801204c:	d028      	beq.n	80120a0 <uxr_serialize_ObjectVariant.part.0+0xd8>
 801204e:	2b01      	cmp	r3, #1
 8012050:	d104      	bne.n	801205c <uxr_serialize_ObjectVariant.part.0+0x94>
 8012052:	68a1      	ldr	r1, [r4, #8]
 8012054:	4628      	mov	r0, r5
 8012056:	f006 fd37 	bl	8018ac8 <ucdr_serialize_string>
 801205a:	4606      	mov	r6, r0
 801205c:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 8012060:	4628      	mov	r0, r5
 8012062:	f7fd f9ef 	bl	800f444 <ucdr_serialize_int16_t>
 8012066:	4030      	ands	r0, r6
 8012068:	b2c0      	uxtb	r0, r0
 801206a:	bd70      	pop	{r4, r5, r6, pc}
 801206c:	3104      	adds	r1, #4
 801206e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012072:	f7ff be7b 	b.w	8011d6c <uxr_serialize_CLIENT_Representation>
 8012076:	3104      	adds	r1, #4
 8012078:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801207c:	f7ff bf32 	b.w	8011ee4 <uxr_serialize_AGENT_Representation>
 8012080:	2001      	movs	r0, #1
 8012082:	bd70      	pop	{r4, r5, r6, pc}
 8012084:	68a2      	ldr	r2, [r4, #8]
 8012086:	f104 010c 	add.w	r1, r4, #12
 801208a:	4628      	mov	r0, r5
 801208c:	f006 fcf0 	bl	8018a70 <ucdr_serialize_sequence_uint8_t>
 8012090:	4606      	mov	r6, r0
 8012092:	e7c7      	b.n	8012024 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012094:	68a1      	ldr	r1, [r4, #8]
 8012096:	4628      	mov	r0, r5
 8012098:	f006 fd16 	bl	8018ac8 <ucdr_serialize_string>
 801209c:	4606      	mov	r6, r0
 801209e:	e7c1      	b.n	8012024 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80120a0:	68a2      	ldr	r2, [r4, #8]
 80120a2:	f104 010c 	add.w	r1, r4, #12
 80120a6:	4628      	mov	r0, r5
 80120a8:	f006 fce2 	bl	8018a70 <ucdr_serialize_sequence_uint8_t>
 80120ac:	4606      	mov	r6, r0
 80120ae:	e7d5      	b.n	801205c <uxr_serialize_ObjectVariant.part.0+0x94>

080120b0 <uxr_deserialize_DATAWRITER_Representation>:
 80120b0:	b570      	push	{r4, r5, r6, lr}
 80120b2:	4606      	mov	r6, r0
 80120b4:	460d      	mov	r5, r1
 80120b6:	f7fc fc9f 	bl	800e9f8 <ucdr_deserialize_uint8_t>
 80120ba:	4604      	mov	r4, r0
 80120bc:	b130      	cbz	r0, 80120cc <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80120be:	782b      	ldrb	r3, [r5, #0]
 80120c0:	2b02      	cmp	r3, #2
 80120c2:	d00c      	beq.n	80120de <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80120c4:	2b03      	cmp	r3, #3
 80120c6:	d012      	beq.n	80120ee <uxr_deserialize_DATAWRITER_Representation+0x3e>
 80120c8:	2b01      	cmp	r3, #1
 80120ca:	d008      	beq.n	80120de <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80120cc:	2202      	movs	r2, #2
 80120ce:	f505 7102 	add.w	r1, r5, #520	; 0x208
 80120d2:	4630      	mov	r0, r6
 80120d4:	f7fc fb3a 	bl	800e74c <ucdr_deserialize_array_uint8_t>
 80120d8:	4020      	ands	r0, r4
 80120da:	b2c0      	uxtb	r0, r0
 80120dc:	bd70      	pop	{r4, r5, r6, pc}
 80120de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80120e2:	6869      	ldr	r1, [r5, #4]
 80120e4:	4630      	mov	r0, r6
 80120e6:	f006 fcff 	bl	8018ae8 <ucdr_deserialize_string>
 80120ea:	4604      	mov	r4, r0
 80120ec:	e7ee      	b.n	80120cc <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80120ee:	1d2b      	adds	r3, r5, #4
 80120f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80120f4:	f105 0108 	add.w	r1, r5, #8
 80120f8:	4630      	mov	r0, r6
 80120fa:	f006 fccb 	bl	8018a94 <ucdr_deserialize_sequence_uint8_t>
 80120fe:	4604      	mov	r4, r0
 8012100:	e7e4      	b.n	80120cc <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8012102:	bf00      	nop

08012104 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8012104:	b570      	push	{r4, r5, r6, lr}
 8012106:	460d      	mov	r5, r1
 8012108:	7809      	ldrb	r1, [r1, #0]
 801210a:	4606      	mov	r6, r0
 801210c:	f7fc fc30 	bl	800e970 <ucdr_serialize_bool>
 8012110:	782b      	ldrb	r3, [r5, #0]
 8012112:	4604      	mov	r4, r0
 8012114:	b94b      	cbnz	r3, 801212a <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8012116:	7a29      	ldrb	r1, [r5, #8]
 8012118:	4630      	mov	r0, r6
 801211a:	f7fc fc29 	bl	800e970 <ucdr_serialize_bool>
 801211e:	7a2b      	ldrb	r3, [r5, #8]
 8012120:	4004      	ands	r4, r0
 8012122:	b2e4      	uxtb	r4, r4
 8012124:	b943      	cbnz	r3, 8012138 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8012126:	4620      	mov	r0, r4
 8012128:	bd70      	pop	{r4, r5, r6, pc}
 801212a:	6869      	ldr	r1, [r5, #4]
 801212c:	4630      	mov	r0, r6
 801212e:	f006 fccb 	bl	8018ac8 <ucdr_serialize_string>
 8012132:	4004      	ands	r4, r0
 8012134:	b2e4      	uxtb	r4, r4
 8012136:	e7ee      	b.n	8012116 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8012138:	68e9      	ldr	r1, [r5, #12]
 801213a:	4630      	mov	r0, r6
 801213c:	f006 fcc4 	bl	8018ac8 <ucdr_serialize_string>
 8012140:	4004      	ands	r4, r0
 8012142:	4620      	mov	r0, r4
 8012144:	bd70      	pop	{r4, r5, r6, pc}
 8012146:	bf00      	nop

08012148 <uxr_serialize_OBJK_Topic_Binary>:
 8012148:	b570      	push	{r4, r5, r6, lr}
 801214a:	460d      	mov	r5, r1
 801214c:	4606      	mov	r6, r0
 801214e:	6809      	ldr	r1, [r1, #0]
 8012150:	f006 fcba 	bl	8018ac8 <ucdr_serialize_string>
 8012154:	4604      	mov	r4, r0
 8012156:	7929      	ldrb	r1, [r5, #4]
 8012158:	4630      	mov	r0, r6
 801215a:	f7fc fc09 	bl	800e970 <ucdr_serialize_bool>
 801215e:	792b      	ldrb	r3, [r5, #4]
 8012160:	4004      	ands	r4, r0
 8012162:	b2e4      	uxtb	r4, r4
 8012164:	b943      	cbnz	r3, 8012178 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8012166:	7b29      	ldrb	r1, [r5, #12]
 8012168:	4630      	mov	r0, r6
 801216a:	f7fc fc01 	bl	800e970 <ucdr_serialize_bool>
 801216e:	7b2b      	ldrb	r3, [r5, #12]
 8012170:	4004      	ands	r4, r0
 8012172:	b93b      	cbnz	r3, 8012184 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8012174:	4620      	mov	r0, r4
 8012176:	bd70      	pop	{r4, r5, r6, pc}
 8012178:	68a9      	ldr	r1, [r5, #8]
 801217a:	4630      	mov	r0, r6
 801217c:	f006 fca4 	bl	8018ac8 <ucdr_serialize_string>
 8012180:	4004      	ands	r4, r0
 8012182:	e7f0      	b.n	8012166 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8012184:	6929      	ldr	r1, [r5, #16]
 8012186:	4630      	mov	r0, r6
 8012188:	f006 fc9e 	bl	8018ac8 <ucdr_serialize_string>
 801218c:	4004      	ands	r4, r0
 801218e:	b2e4      	uxtb	r4, r4
 8012190:	4620      	mov	r0, r4
 8012192:	bd70      	pop	{r4, r5, r6, pc}

08012194 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8012194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012198:	460c      	mov	r4, r1
 801219a:	7809      	ldrb	r1, [r1, #0]
 801219c:	4606      	mov	r6, r0
 801219e:	f7fc fbe7 	bl	800e970 <ucdr_serialize_bool>
 80121a2:	7823      	ldrb	r3, [r4, #0]
 80121a4:	4605      	mov	r5, r0
 80121a6:	b96b      	cbnz	r3, 80121c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 80121a8:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 80121ac:	4630      	mov	r0, r6
 80121ae:	f7fc fbdf 	bl	800e970 <ucdr_serialize_bool>
 80121b2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80121b6:	4005      	ands	r5, r0
 80121b8:	b2ed      	uxtb	r5, r5
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d169      	bne.n	8012292 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 80121be:	4628      	mov	r0, r5
 80121c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121c4:	6861      	ldr	r1, [r4, #4]
 80121c6:	4630      	mov	r0, r6
 80121c8:	f7fc fe16 	bl	800edf8 <ucdr_serialize_uint32_t>
 80121cc:	6863      	ldr	r3, [r4, #4]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d06b      	beq.n	80122aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 80121d2:	2800      	cmp	r0, #0
 80121d4:	d067      	beq.n	80122a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80121d6:	68a1      	ldr	r1, [r4, #8]
 80121d8:	4630      	mov	r0, r6
 80121da:	f006 fc75 	bl	8018ac8 <ucdr_serialize_string>
 80121de:	6863      	ldr	r3, [r4, #4]
 80121e0:	2b01      	cmp	r3, #1
 80121e2:	d953      	bls.n	801228c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80121e4:	2800      	cmp	r0, #0
 80121e6:	d05e      	beq.n	80122a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80121e8:	68e1      	ldr	r1, [r4, #12]
 80121ea:	4630      	mov	r0, r6
 80121ec:	f006 fc6c 	bl	8018ac8 <ucdr_serialize_string>
 80121f0:	6863      	ldr	r3, [r4, #4]
 80121f2:	2b02      	cmp	r3, #2
 80121f4:	d94a      	bls.n	801228c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80121f6:	2800      	cmp	r0, #0
 80121f8:	d055      	beq.n	80122a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80121fa:	6921      	ldr	r1, [r4, #16]
 80121fc:	4630      	mov	r0, r6
 80121fe:	f006 fc63 	bl	8018ac8 <ucdr_serialize_string>
 8012202:	6863      	ldr	r3, [r4, #4]
 8012204:	2b03      	cmp	r3, #3
 8012206:	d941      	bls.n	801228c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012208:	2800      	cmp	r0, #0
 801220a:	d04c      	beq.n	80122a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801220c:	6961      	ldr	r1, [r4, #20]
 801220e:	4630      	mov	r0, r6
 8012210:	f006 fc5a 	bl	8018ac8 <ucdr_serialize_string>
 8012214:	6863      	ldr	r3, [r4, #4]
 8012216:	2b04      	cmp	r3, #4
 8012218:	d938      	bls.n	801228c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801221a:	2800      	cmp	r0, #0
 801221c:	d043      	beq.n	80122a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801221e:	69a1      	ldr	r1, [r4, #24]
 8012220:	4630      	mov	r0, r6
 8012222:	f006 fc51 	bl	8018ac8 <ucdr_serialize_string>
 8012226:	6863      	ldr	r3, [r4, #4]
 8012228:	2b05      	cmp	r3, #5
 801222a:	d92f      	bls.n	801228c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801222c:	2800      	cmp	r0, #0
 801222e:	d03a      	beq.n	80122a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012230:	69e1      	ldr	r1, [r4, #28]
 8012232:	4630      	mov	r0, r6
 8012234:	f006 fc48 	bl	8018ac8 <ucdr_serialize_string>
 8012238:	6863      	ldr	r3, [r4, #4]
 801223a:	2b06      	cmp	r3, #6
 801223c:	d926      	bls.n	801228c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801223e:	b390      	cbz	r0, 80122a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012240:	6a21      	ldr	r1, [r4, #32]
 8012242:	4630      	mov	r0, r6
 8012244:	f006 fc40 	bl	8018ac8 <ucdr_serialize_string>
 8012248:	6863      	ldr	r3, [r4, #4]
 801224a:	2b07      	cmp	r3, #7
 801224c:	d91e      	bls.n	801228c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801224e:	b350      	cbz	r0, 80122a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012250:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012252:	4630      	mov	r0, r6
 8012254:	f006 fc38 	bl	8018ac8 <ucdr_serialize_string>
 8012258:	6863      	ldr	r3, [r4, #4]
 801225a:	2b08      	cmp	r3, #8
 801225c:	d916      	bls.n	801228c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801225e:	b310      	cbz	r0, 80122a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012260:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8012262:	4630      	mov	r0, r6
 8012264:	f006 fc30 	bl	8018ac8 <ucdr_serialize_string>
 8012268:	6863      	ldr	r3, [r4, #4]
 801226a:	2b09      	cmp	r3, #9
 801226c:	d90e      	bls.n	801228c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801226e:	b1d0      	cbz	r0, 80122a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012270:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8012274:	2709      	movs	r7, #9
 8012276:	e000      	b.n	801227a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8012278:	b1a8      	cbz	r0, 80122a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801227a:	f858 1b04 	ldr.w	r1, [r8], #4
 801227e:	4630      	mov	r0, r6
 8012280:	f006 fc22 	bl	8018ac8 <ucdr_serialize_string>
 8012284:	3701      	adds	r7, #1
 8012286:	6862      	ldr	r2, [r4, #4]
 8012288:	4297      	cmp	r7, r2
 801228a:	d3f5      	bcc.n	8012278 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 801228c:	4005      	ands	r5, r0
 801228e:	b2ed      	uxtb	r5, r5
 8012290:	e78a      	b.n	80121a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8012292:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012294:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8012298:	4630      	mov	r0, r6
 801229a:	f006 fbe9 	bl	8018a70 <ucdr_serialize_sequence_uint8_t>
 801229e:	4005      	ands	r5, r0
 80122a0:	4628      	mov	r0, r5
 80122a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122a6:	2500      	movs	r5, #0
 80122a8:	e77e      	b.n	80121a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80122aa:	4028      	ands	r0, r5
 80122ac:	b2c5      	uxtb	r5, r0
 80122ae:	e77b      	b.n	80121a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

080122b0 <uxr_serialize_OBJK_Publisher_Binary>:
 80122b0:	b570      	push	{r4, r5, r6, lr}
 80122b2:	460d      	mov	r5, r1
 80122b4:	7809      	ldrb	r1, [r1, #0]
 80122b6:	4606      	mov	r6, r0
 80122b8:	f7fc fb5a 	bl	800e970 <ucdr_serialize_bool>
 80122bc:	782b      	ldrb	r3, [r5, #0]
 80122be:	4604      	mov	r4, r0
 80122c0:	b94b      	cbnz	r3, 80122d6 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 80122c2:	7a29      	ldrb	r1, [r5, #8]
 80122c4:	4630      	mov	r0, r6
 80122c6:	f7fc fb53 	bl	800e970 <ucdr_serialize_bool>
 80122ca:	7a2b      	ldrb	r3, [r5, #8]
 80122cc:	4004      	ands	r4, r0
 80122ce:	b2e4      	uxtb	r4, r4
 80122d0:	b943      	cbnz	r3, 80122e4 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 80122d2:	4620      	mov	r0, r4
 80122d4:	bd70      	pop	{r4, r5, r6, pc}
 80122d6:	6869      	ldr	r1, [r5, #4]
 80122d8:	4630      	mov	r0, r6
 80122da:	f006 fbf5 	bl	8018ac8 <ucdr_serialize_string>
 80122de:	4004      	ands	r4, r0
 80122e0:	b2e4      	uxtb	r4, r4
 80122e2:	e7ee      	b.n	80122c2 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 80122e4:	f105 010c 	add.w	r1, r5, #12
 80122e8:	4630      	mov	r0, r6
 80122ea:	f7ff ff53 	bl	8012194 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 80122ee:	4004      	ands	r4, r0
 80122f0:	4620      	mov	r0, r4
 80122f2:	bd70      	pop	{r4, r5, r6, pc}

080122f4 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 80122f4:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 80122f8:	4688      	mov	r8, r1
 80122fa:	4681      	mov	r9, r0
 80122fc:	8809      	ldrh	r1, [r1, #0]
 80122fe:	f7fc fb91 	bl	800ea24 <ucdr_serialize_uint16_t>
 8012302:	4606      	mov	r6, r0
 8012304:	f898 1002 	ldrb.w	r1, [r8, #2]
 8012308:	4648      	mov	r0, r9
 801230a:	f7fc fb31 	bl	800e970 <ucdr_serialize_bool>
 801230e:	f898 3002 	ldrb.w	r3, [r8, #2]
 8012312:	4006      	ands	r6, r0
 8012314:	b2f5      	uxtb	r5, r6
 8012316:	b9eb      	cbnz	r3, 8012354 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8012318:	f898 1006 	ldrb.w	r1, [r8, #6]
 801231c:	4648      	mov	r0, r9
 801231e:	f7fc fb27 	bl	800e970 <ucdr_serialize_bool>
 8012322:	f898 3006 	ldrb.w	r3, [r8, #6]
 8012326:	4005      	ands	r5, r0
 8012328:	bb7b      	cbnz	r3, 801238a <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801232a:	f898 100c 	ldrb.w	r1, [r8, #12]
 801232e:	4648      	mov	r0, r9
 8012330:	f7fc fb1e 	bl	800e970 <ucdr_serialize_bool>
 8012334:	f898 300c 	ldrb.w	r3, [r8, #12]
 8012338:	4005      	ands	r5, r0
 801233a:	b9f3      	cbnz	r3, 801237a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 801233c:	f898 1014 	ldrb.w	r1, [r8, #20]
 8012340:	4648      	mov	r0, r9
 8012342:	f7fc fb15 	bl	800e970 <ucdr_serialize_bool>
 8012346:	f898 3014 	ldrb.w	r3, [r8, #20]
 801234a:	4005      	ands	r5, r0
 801234c:	b94b      	cbnz	r3, 8012362 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801234e:	4628      	mov	r0, r5
 8012350:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8012354:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8012358:	4648      	mov	r0, r9
 801235a:	f7fc fb63 	bl	800ea24 <ucdr_serialize_uint16_t>
 801235e:	4005      	ands	r5, r0
 8012360:	e7da      	b.n	8012318 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8012362:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8012366:	f108 011c 	add.w	r1, r8, #28
 801236a:	4648      	mov	r0, r9
 801236c:	f006 fb80 	bl	8018a70 <ucdr_serialize_sequence_uint8_t>
 8012370:	4028      	ands	r0, r5
 8012372:	b2c5      	uxtb	r5, r0
 8012374:	4628      	mov	r0, r5
 8012376:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801237a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801237e:	4648      	mov	r0, r9
 8012380:	f7fc fd3a 	bl	800edf8 <ucdr_serialize_uint32_t>
 8012384:	4028      	ands	r0, r5
 8012386:	b2c5      	uxtb	r5, r0
 8012388:	e7d8      	b.n	801233c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801238a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801238e:	4648      	mov	r0, r9
 8012390:	f7fc fd32 	bl	800edf8 <ucdr_serialize_uint32_t>
 8012394:	4028      	ands	r0, r5
 8012396:	b2c5      	uxtb	r5, r0
 8012398:	e7c7      	b.n	801232a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801239a:	bf00      	nop

0801239c <uxr_serialize_OBJK_DataWriter_Binary>:
 801239c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801239e:	2202      	movs	r2, #2
 80123a0:	460d      	mov	r5, r1
 80123a2:	4606      	mov	r6, r0
 80123a4:	f7fc f96e 	bl	800e684 <ucdr_serialize_array_uint8_t>
 80123a8:	4604      	mov	r4, r0
 80123aa:	78a9      	ldrb	r1, [r5, #2]
 80123ac:	4630      	mov	r0, r6
 80123ae:	f7fc fadf 	bl	800e970 <ucdr_serialize_bool>
 80123b2:	78ab      	ldrb	r3, [r5, #2]
 80123b4:	4004      	ands	r4, r0
 80123b6:	b2e4      	uxtb	r4, r4
 80123b8:	b90b      	cbnz	r3, 80123be <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 80123ba:	4620      	mov	r0, r4
 80123bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80123be:	f105 0108 	add.w	r1, r5, #8
 80123c2:	4630      	mov	r0, r6
 80123c4:	f7ff ff96 	bl	80122f4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 80123c8:	4607      	mov	r7, r0
 80123ca:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 80123ce:	4630      	mov	r0, r6
 80123d0:	f7fc face 	bl	800e970 <ucdr_serialize_bool>
 80123d4:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 80123d8:	4038      	ands	r0, r7
 80123da:	b2c7      	uxtb	r7, r0
 80123dc:	b913      	cbnz	r3, 80123e4 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 80123de:	403c      	ands	r4, r7
 80123e0:	4620      	mov	r0, r4
 80123e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80123e4:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 80123e8:	4630      	mov	r0, r6
 80123ea:	f7fc ff5b 	bl	800f2a4 <ucdr_serialize_uint64_t>
 80123ee:	4007      	ands	r7, r0
 80123f0:	e7f5      	b.n	80123de <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 80123f2:	bf00      	nop

080123f4 <uxr_serialize_OBJK_Replier_Binary>:
 80123f4:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 80123f8:	460f      	mov	r7, r1
 80123fa:	4680      	mov	r8, r0
 80123fc:	6809      	ldr	r1, [r1, #0]
 80123fe:	f006 fb63 	bl	8018ac8 <ucdr_serialize_string>
 8012402:	4605      	mov	r5, r0
 8012404:	6879      	ldr	r1, [r7, #4]
 8012406:	4640      	mov	r0, r8
 8012408:	f006 fb5e 	bl	8018ac8 <ucdr_serialize_string>
 801240c:	4005      	ands	r5, r0
 801240e:	68b9      	ldr	r1, [r7, #8]
 8012410:	4640      	mov	r0, r8
 8012412:	b2ec      	uxtb	r4, r5
 8012414:	f006 fb58 	bl	8018ac8 <ucdr_serialize_string>
 8012418:	7b39      	ldrb	r1, [r7, #12]
 801241a:	4004      	ands	r4, r0
 801241c:	4640      	mov	r0, r8
 801241e:	f7fc faa7 	bl	800e970 <ucdr_serialize_bool>
 8012422:	7b3b      	ldrb	r3, [r7, #12]
 8012424:	4004      	ands	r4, r0
 8012426:	b94b      	cbnz	r3, 801243c <uxr_serialize_OBJK_Replier_Binary+0x48>
 8012428:	7d39      	ldrb	r1, [r7, #20]
 801242a:	4640      	mov	r0, r8
 801242c:	f7fc faa0 	bl	800e970 <ucdr_serialize_bool>
 8012430:	7d3b      	ldrb	r3, [r7, #20]
 8012432:	4004      	ands	r4, r0
 8012434:	b943      	cbnz	r3, 8012448 <uxr_serialize_OBJK_Replier_Binary+0x54>
 8012436:	4620      	mov	r0, r4
 8012438:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801243c:	6939      	ldr	r1, [r7, #16]
 801243e:	4640      	mov	r0, r8
 8012440:	f006 fb42 	bl	8018ac8 <ucdr_serialize_string>
 8012444:	4004      	ands	r4, r0
 8012446:	e7ef      	b.n	8012428 <uxr_serialize_OBJK_Replier_Binary+0x34>
 8012448:	69b9      	ldr	r1, [r7, #24]
 801244a:	4640      	mov	r0, r8
 801244c:	f006 fb3c 	bl	8018ac8 <ucdr_serialize_string>
 8012450:	4004      	ands	r4, r0
 8012452:	b2e4      	uxtb	r4, r4
 8012454:	4620      	mov	r0, r4
 8012456:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801245a:	bf00      	nop

0801245c <uxr_deserialize_ObjectVariant>:
 801245c:	b570      	push	{r4, r5, r6, lr}
 801245e:	4605      	mov	r5, r0
 8012460:	460e      	mov	r6, r1
 8012462:	f7fc fac9 	bl	800e9f8 <ucdr_deserialize_uint8_t>
 8012466:	b168      	cbz	r0, 8012484 <uxr_deserialize_ObjectVariant+0x28>
 8012468:	7833      	ldrb	r3, [r6, #0]
 801246a:	4604      	mov	r4, r0
 801246c:	3b01      	subs	r3, #1
 801246e:	2b0d      	cmp	r3, #13
 8012470:	d809      	bhi.n	8012486 <uxr_deserialize_ObjectVariant+0x2a>
 8012472:	e8df f003 	tbb	[pc, r3]
 8012476:	0a41      	.short	0x0a41
 8012478:	0a0a2323 	.word	0x0a0a2323
 801247c:	10080a0a 	.word	0x10080a0a
 8012480:	565c1010 	.word	0x565c1010
 8012484:	2400      	movs	r4, #0
 8012486:	4620      	mov	r0, r4
 8012488:	bd70      	pop	{r4, r5, r6, pc}
 801248a:	1d31      	adds	r1, r6, #4
 801248c:	4628      	mov	r0, r5
 801248e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012492:	f7ff be0d 	b.w	80120b0 <uxr_deserialize_DATAWRITER_Representation>
 8012496:	1d31      	adds	r1, r6, #4
 8012498:	4628      	mov	r0, r5
 801249a:	f7fc faad 	bl	800e9f8 <ucdr_deserialize_uint8_t>
 801249e:	2800      	cmp	r0, #0
 80124a0:	d0f0      	beq.n	8012484 <uxr_deserialize_ObjectVariant+0x28>
 80124a2:	7933      	ldrb	r3, [r6, #4]
 80124a4:	2b01      	cmp	r3, #1
 80124a6:	d001      	beq.n	80124ac <uxr_deserialize_ObjectVariant+0x50>
 80124a8:	2b02      	cmp	r3, #2
 80124aa:	d1ec      	bne.n	8012486 <uxr_deserialize_ObjectVariant+0x2a>
 80124ac:	68b1      	ldr	r1, [r6, #8]
 80124ae:	4628      	mov	r0, r5
 80124b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80124b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80124b8:	f006 bb16 	b.w	8018ae8 <ucdr_deserialize_string>
 80124bc:	1d31      	adds	r1, r6, #4
 80124be:	4628      	mov	r0, r5
 80124c0:	f7fc fa9a 	bl	800e9f8 <ucdr_deserialize_uint8_t>
 80124c4:	4604      	mov	r4, r0
 80124c6:	b170      	cbz	r0, 80124e6 <uxr_deserialize_ObjectVariant+0x8a>
 80124c8:	7933      	ldrb	r3, [r6, #4]
 80124ca:	2b02      	cmp	r3, #2
 80124cc:	d04c      	beq.n	8012568 <uxr_deserialize_ObjectVariant+0x10c>
 80124ce:	2b03      	cmp	r3, #3
 80124d0:	d109      	bne.n	80124e6 <uxr_deserialize_ObjectVariant+0x8a>
 80124d2:	f106 0308 	add.w	r3, r6, #8
 80124d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80124da:	f106 010c 	add.w	r1, r6, #12
 80124de:	4628      	mov	r0, r5
 80124e0:	f006 fad8 	bl	8018a94 <ucdr_deserialize_sequence_uint8_t>
 80124e4:	4604      	mov	r4, r0
 80124e6:	2202      	movs	r2, #2
 80124e8:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 80124ec:	4628      	mov	r0, r5
 80124ee:	f7fc f92d 	bl	800e74c <ucdr_deserialize_array_uint8_t>
 80124f2:	4020      	ands	r0, r4
 80124f4:	b2c4      	uxtb	r4, r0
 80124f6:	e7c6      	b.n	8012486 <uxr_deserialize_ObjectVariant+0x2a>
 80124f8:	1d31      	adds	r1, r6, #4
 80124fa:	4628      	mov	r0, r5
 80124fc:	f7fc fa7c 	bl	800e9f8 <ucdr_deserialize_uint8_t>
 8012500:	4604      	mov	r4, r0
 8012502:	b130      	cbz	r0, 8012512 <uxr_deserialize_ObjectVariant+0xb6>
 8012504:	7933      	ldrb	r3, [r6, #4]
 8012506:	2b02      	cmp	r3, #2
 8012508:	d036      	beq.n	8012578 <uxr_deserialize_ObjectVariant+0x11c>
 801250a:	2b03      	cmp	r3, #3
 801250c:	d03c      	beq.n	8012588 <uxr_deserialize_ObjectVariant+0x12c>
 801250e:	2b01      	cmp	r3, #1
 8012510:	d032      	beq.n	8012578 <uxr_deserialize_ObjectVariant+0x11c>
 8012512:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8012516:	4628      	mov	r0, r5
 8012518:	f7fd f894 	bl	800f644 <ucdr_deserialize_int16_t>
 801251c:	4020      	ands	r0, r4
 801251e:	b2c4      	uxtb	r4, r0
 8012520:	e7b1      	b.n	8012486 <uxr_deserialize_ObjectVariant+0x2a>
 8012522:	1d31      	adds	r1, r6, #4
 8012524:	4628      	mov	r0, r5
 8012526:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801252a:	f7ff bc77 	b.w	8011e1c <uxr_deserialize_CLIENT_Representation>
 801252e:	2204      	movs	r2, #4
 8012530:	4628      	mov	r0, r5
 8012532:	18b1      	adds	r1, r6, r2
 8012534:	f7fc f90a 	bl	800e74c <ucdr_deserialize_array_uint8_t>
 8012538:	4604      	mov	r4, r0
 801253a:	2202      	movs	r2, #2
 801253c:	f106 0108 	add.w	r1, r6, #8
 8012540:	4628      	mov	r0, r5
 8012542:	f7fc f903 	bl	800e74c <ucdr_deserialize_array_uint8_t>
 8012546:	4004      	ands	r4, r0
 8012548:	2202      	movs	r2, #2
 801254a:	f106 010a 	add.w	r1, r6, #10
 801254e:	4628      	mov	r0, r5
 8012550:	b2e4      	uxtb	r4, r4
 8012552:	f7fc f8fb 	bl	800e74c <ucdr_deserialize_array_uint8_t>
 8012556:	4603      	mov	r3, r0
 8012558:	f106 010c 	add.w	r1, r6, #12
 801255c:	4628      	mov	r0, r5
 801255e:	401c      	ands	r4, r3
 8012560:	f7fc fa1c 	bl	800e99c <ucdr_deserialize_bool>
 8012564:	4004      	ands	r4, r0
 8012566:	e78e      	b.n	8012486 <uxr_deserialize_ObjectVariant+0x2a>
 8012568:	f44f 7200 	mov.w	r2, #512	; 0x200
 801256c:	68b1      	ldr	r1, [r6, #8]
 801256e:	4628      	mov	r0, r5
 8012570:	f006 faba 	bl	8018ae8 <ucdr_deserialize_string>
 8012574:	4604      	mov	r4, r0
 8012576:	e7b6      	b.n	80124e6 <uxr_deserialize_ObjectVariant+0x8a>
 8012578:	f44f 7200 	mov.w	r2, #512	; 0x200
 801257c:	68b1      	ldr	r1, [r6, #8]
 801257e:	4628      	mov	r0, r5
 8012580:	f006 fab2 	bl	8018ae8 <ucdr_deserialize_string>
 8012584:	4604      	mov	r4, r0
 8012586:	e7c4      	b.n	8012512 <uxr_deserialize_ObjectVariant+0xb6>
 8012588:	f106 0308 	add.w	r3, r6, #8
 801258c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012590:	f106 010c 	add.w	r1, r6, #12
 8012594:	4628      	mov	r0, r5
 8012596:	f006 fa7d 	bl	8018a94 <ucdr_deserialize_sequence_uint8_t>
 801259a:	4604      	mov	r4, r0
 801259c:	e7b9      	b.n	8012512 <uxr_deserialize_ObjectVariant+0xb6>
 801259e:	bf00      	nop

080125a0 <uxr_deserialize_BaseObjectRequest>:
 80125a0:	b570      	push	{r4, r5, r6, lr}
 80125a2:	2202      	movs	r2, #2
 80125a4:	4605      	mov	r5, r0
 80125a6:	460e      	mov	r6, r1
 80125a8:	f7fc f8d0 	bl	800e74c <ucdr_deserialize_array_uint8_t>
 80125ac:	2202      	movs	r2, #2
 80125ae:	4604      	mov	r4, r0
 80125b0:	4628      	mov	r0, r5
 80125b2:	18b1      	adds	r1, r6, r2
 80125b4:	f7fc f8ca 	bl	800e74c <ucdr_deserialize_array_uint8_t>
 80125b8:	4020      	ands	r0, r4
 80125ba:	b2c0      	uxtb	r0, r0
 80125bc:	bd70      	pop	{r4, r5, r6, pc}
 80125be:	bf00      	nop

080125c0 <uxr_serialize_ActivityInfoVariant>:
 80125c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80125c4:	460e      	mov	r6, r1
 80125c6:	7809      	ldrb	r1, [r1, #0]
 80125c8:	4680      	mov	r8, r0
 80125ca:	f7fc f9ff 	bl	800e9cc <ucdr_serialize_uint8_t>
 80125ce:	4607      	mov	r7, r0
 80125d0:	b138      	cbz	r0, 80125e2 <uxr_serialize_ActivityInfoVariant+0x22>
 80125d2:	7833      	ldrb	r3, [r6, #0]
 80125d4:	2b06      	cmp	r3, #6
 80125d6:	f000 8081 	beq.w	80126dc <uxr_serialize_ActivityInfoVariant+0x11c>
 80125da:	2b0d      	cmp	r3, #13
 80125dc:	d014      	beq.n	8012608 <uxr_serialize_ActivityInfoVariant+0x48>
 80125de:	2b05      	cmp	r3, #5
 80125e0:	d002      	beq.n	80125e8 <uxr_serialize_ActivityInfoVariant+0x28>
 80125e2:	4638      	mov	r0, r7
 80125e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125e8:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 80125ec:	4640      	mov	r0, r8
 80125ee:	f7fc ff29 	bl	800f444 <ucdr_serialize_int16_t>
 80125f2:	4607      	mov	r7, r0
 80125f4:	4640      	mov	r0, r8
 80125f6:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 80125fa:	f7fc fe53 	bl	800f2a4 <ucdr_serialize_uint64_t>
 80125fe:	4038      	ands	r0, r7
 8012600:	b2c7      	uxtb	r7, r0
 8012602:	4638      	mov	r0, r7
 8012604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012608:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801260c:	4640      	mov	r0, r8
 801260e:	f7fc ff19 	bl	800f444 <ucdr_serialize_int16_t>
 8012612:	68f1      	ldr	r1, [r6, #12]
 8012614:	4607      	mov	r7, r0
 8012616:	4640      	mov	r0, r8
 8012618:	f7fc fbee 	bl	800edf8 <ucdr_serialize_uint32_t>
 801261c:	68f3      	ldr	r3, [r6, #12]
 801261e:	2b00      	cmp	r3, #0
 8012620:	d0ed      	beq.n	80125fe <uxr_serialize_ActivityInfoVariant+0x3e>
 8012622:	b318      	cbz	r0, 801266c <uxr_serialize_ActivityInfoVariant+0xac>
 8012624:	f106 090c 	add.w	r9, r6, #12
 8012628:	2400      	movs	r4, #0
 801262a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801262e:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 8012632:	7c29      	ldrb	r1, [r5, #16]
 8012634:	4640      	mov	r0, r8
 8012636:	f7fc f9c9 	bl	800e9cc <ucdr_serialize_uint8_t>
 801263a:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 801263e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8012642:	2800      	cmp	r0, #0
 8012644:	d051      	beq.n	80126ea <uxr_serialize_ActivityInfoVariant+0x12a>
 8012646:	7c2b      	ldrb	r3, [r5, #16]
 8012648:	00c9      	lsls	r1, r1, #3
 801264a:	2b03      	cmp	r3, #3
 801264c:	d854      	bhi.n	80126f8 <uxr_serialize_ActivityInfoVariant+0x138>
 801264e:	e8df f003 	tbb	[pc, r3]
 8012652:	2133      	.short	0x2133
 8012654:	020f      	.short	0x020f
 8012656:	4449      	add	r1, r9
 8012658:	4640      	mov	r0, r8
 801265a:	6889      	ldr	r1, [r1, #8]
 801265c:	f006 fa34 	bl	8018ac8 <ucdr_serialize_string>
 8012660:	3401      	adds	r4, #1
 8012662:	68f2      	ldr	r2, [r6, #12]
 8012664:	4294      	cmp	r4, r2
 8012666:	d244      	bcs.n	80126f2 <uxr_serialize_ActivityInfoVariant+0x132>
 8012668:	2800      	cmp	r0, #0
 801266a:	d1de      	bne.n	801262a <uxr_serialize_ActivityInfoVariant+0x6a>
 801266c:	2700      	movs	r7, #0
 801266e:	e7b8      	b.n	80125e2 <uxr_serialize_ActivityInfoVariant+0x22>
 8012670:	3108      	adds	r1, #8
 8012672:	44a2      	add	sl, r4
 8012674:	2210      	movs	r2, #16
 8012676:	4640      	mov	r0, r8
 8012678:	4449      	add	r1, r9
 801267a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801267e:	f7fc f801 	bl	800e684 <ucdr_serialize_array_uint8_t>
 8012682:	4605      	mov	r5, r0
 8012684:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
 8012688:	4640      	mov	r0, r8
 801268a:	f7fc fbb5 	bl	800edf8 <ucdr_serialize_uint32_t>
 801268e:	4028      	ands	r0, r5
 8012690:	b2c0      	uxtb	r0, r0
 8012692:	e7e5      	b.n	8012660 <uxr_serialize_ActivityInfoVariant+0xa0>
 8012694:	3108      	adds	r1, #8
 8012696:	44a2      	add	sl, r4
 8012698:	2204      	movs	r2, #4
 801269a:	4640      	mov	r0, r8
 801269c:	4449      	add	r1, r9
 801269e:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80126a2:	f7fb ffef 	bl	800e684 <ucdr_serialize_array_uint8_t>
 80126a6:	4605      	mov	r5, r0
 80126a8:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 80126ac:	4640      	mov	r0, r8
 80126ae:	f7fc f9b9 	bl	800ea24 <ucdr_serialize_uint16_t>
 80126b2:	4028      	ands	r0, r5
 80126b4:	b2c0      	uxtb	r0, r0
 80126b6:	e7d3      	b.n	8012660 <uxr_serialize_ActivityInfoVariant+0xa0>
 80126b8:	3108      	adds	r1, #8
 80126ba:	44a2      	add	sl, r4
 80126bc:	2202      	movs	r2, #2
 80126be:	4640      	mov	r0, r8
 80126c0:	4449      	add	r1, r9
 80126c2:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80126c6:	f7fb ffdd 	bl	800e684 <ucdr_serialize_array_uint8_t>
 80126ca:	4605      	mov	r5, r0
 80126cc:	f89a 1016 	ldrb.w	r1, [sl, #22]
 80126d0:	4640      	mov	r0, r8
 80126d2:	f7fc f97b 	bl	800e9cc <ucdr_serialize_uint8_t>
 80126d6:	4028      	ands	r0, r5
 80126d8:	b2c0      	uxtb	r0, r0
 80126da:	e7c1      	b.n	8012660 <uxr_serialize_ActivityInfoVariant+0xa0>
 80126dc:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 80126e0:	4640      	mov	r0, r8
 80126e2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80126e6:	f7fc bead 	b.w	800f444 <ucdr_serialize_int16_t>
 80126ea:	3401      	adds	r4, #1
 80126ec:	68f2      	ldr	r2, [r6, #12]
 80126ee:	42a2      	cmp	r2, r4
 80126f0:	d8bc      	bhi.n	801266c <uxr_serialize_ActivityInfoVariant+0xac>
 80126f2:	4007      	ands	r7, r0
 80126f4:	b2ff      	uxtb	r7, r7
 80126f6:	e774      	b.n	80125e2 <uxr_serialize_ActivityInfoVariant+0x22>
 80126f8:	3401      	adds	r4, #1
 80126fa:	68f3      	ldr	r3, [r6, #12]
 80126fc:	3518      	adds	r5, #24
 80126fe:	429c      	cmp	r4, r3
 8012700:	d397      	bcc.n	8012632 <uxr_serialize_ActivityInfoVariant+0x72>
 8012702:	e76e      	b.n	80125e2 <uxr_serialize_ActivityInfoVariant+0x22>

08012704 <uxr_deserialize_BaseObjectReply>:
 8012704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012708:	2202      	movs	r2, #2
 801270a:	4606      	mov	r6, r0
 801270c:	460f      	mov	r7, r1
 801270e:	f7fc f81d 	bl	800e74c <ucdr_deserialize_array_uint8_t>
 8012712:	2202      	movs	r2, #2
 8012714:	4605      	mov	r5, r0
 8012716:	4630      	mov	r0, r6
 8012718:	18b9      	adds	r1, r7, r2
 801271a:	f7fc f817 	bl	800e74c <ucdr_deserialize_array_uint8_t>
 801271e:	4680      	mov	r8, r0
 8012720:	1d39      	adds	r1, r7, #4
 8012722:	4630      	mov	r0, r6
 8012724:	f7fc f968 	bl	800e9f8 <ucdr_deserialize_uint8_t>
 8012728:	ea05 0508 	and.w	r5, r5, r8
 801272c:	4604      	mov	r4, r0
 801272e:	1d79      	adds	r1, r7, #5
 8012730:	4630      	mov	r0, r6
 8012732:	402c      	ands	r4, r5
 8012734:	f7fc f960 	bl	800e9f8 <ucdr_deserialize_uint8_t>
 8012738:	4020      	ands	r0, r4
 801273a:	b2c0      	uxtb	r0, r0
 801273c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012740 <uxr_serialize_ReadSpecification>:
 8012740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012742:	460e      	mov	r6, r1
 8012744:	4607      	mov	r7, r0
 8012746:	7809      	ldrb	r1, [r1, #0]
 8012748:	f7fc f940 	bl	800e9cc <ucdr_serialize_uint8_t>
 801274c:	4604      	mov	r4, r0
 801274e:	7871      	ldrb	r1, [r6, #1]
 8012750:	4638      	mov	r0, r7
 8012752:	f7fc f93b 	bl	800e9cc <ucdr_serialize_uint8_t>
 8012756:	4004      	ands	r4, r0
 8012758:	78b1      	ldrb	r1, [r6, #2]
 801275a:	4638      	mov	r0, r7
 801275c:	f7fc f908 	bl	800e970 <ucdr_serialize_bool>
 8012760:	78b3      	ldrb	r3, [r6, #2]
 8012762:	b2e4      	uxtb	r4, r4
 8012764:	4004      	ands	r4, r0
 8012766:	b943      	cbnz	r3, 801277a <uxr_serialize_ReadSpecification+0x3a>
 8012768:	7a31      	ldrb	r1, [r6, #8]
 801276a:	4638      	mov	r0, r7
 801276c:	f7fc f900 	bl	800e970 <ucdr_serialize_bool>
 8012770:	7a33      	ldrb	r3, [r6, #8]
 8012772:	4004      	ands	r4, r0
 8012774:	b93b      	cbnz	r3, 8012786 <uxr_serialize_ReadSpecification+0x46>
 8012776:	4620      	mov	r0, r4
 8012778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801277a:	6871      	ldr	r1, [r6, #4]
 801277c:	4638      	mov	r0, r7
 801277e:	f006 f9a3 	bl	8018ac8 <ucdr_serialize_string>
 8012782:	4004      	ands	r4, r0
 8012784:	e7f0      	b.n	8012768 <uxr_serialize_ReadSpecification+0x28>
 8012786:	8971      	ldrh	r1, [r6, #10]
 8012788:	4638      	mov	r0, r7
 801278a:	f7fc f94b 	bl	800ea24 <ucdr_serialize_uint16_t>
 801278e:	4605      	mov	r5, r0
 8012790:	89b1      	ldrh	r1, [r6, #12]
 8012792:	4638      	mov	r0, r7
 8012794:	f7fc f946 	bl	800ea24 <ucdr_serialize_uint16_t>
 8012798:	4005      	ands	r5, r0
 801279a:	89f1      	ldrh	r1, [r6, #14]
 801279c:	4638      	mov	r0, r7
 801279e:	b2ed      	uxtb	r5, r5
 80127a0:	f7fc f940 	bl	800ea24 <ucdr_serialize_uint16_t>
 80127a4:	8a31      	ldrh	r1, [r6, #16]
 80127a6:	4025      	ands	r5, r4
 80127a8:	4604      	mov	r4, r0
 80127aa:	4638      	mov	r0, r7
 80127ac:	4025      	ands	r5, r4
 80127ae:	f7fc f939 	bl	800ea24 <ucdr_serialize_uint16_t>
 80127b2:	ea00 0405 	and.w	r4, r0, r5
 80127b6:	4620      	mov	r0, r4
 80127b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80127ba:	bf00      	nop

080127bc <uxr_serialize_CREATE_CLIENT_Payload>:
 80127bc:	f7ff bad6 	b.w	8011d6c <uxr_serialize_CLIENT_Representation>

080127c0 <uxr_serialize_CREATE_Payload>:
 80127c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127c2:	2202      	movs	r2, #2
 80127c4:	4607      	mov	r7, r0
 80127c6:	460e      	mov	r6, r1
 80127c8:	f7fb ff5c 	bl	800e684 <ucdr_serialize_array_uint8_t>
 80127cc:	2202      	movs	r2, #2
 80127ce:	4605      	mov	r5, r0
 80127d0:	4638      	mov	r0, r7
 80127d2:	18b1      	adds	r1, r6, r2
 80127d4:	f7fb ff56 	bl	800e684 <ucdr_serialize_array_uint8_t>
 80127d8:	7931      	ldrb	r1, [r6, #4]
 80127da:	4604      	mov	r4, r0
 80127dc:	4638      	mov	r0, r7
 80127de:	f7fc f8f5 	bl	800e9cc <ucdr_serialize_uint8_t>
 80127e2:	b170      	cbz	r0, 8012802 <uxr_serialize_CREATE_Payload+0x42>
 80127e4:	7933      	ldrb	r3, [r6, #4]
 80127e6:	402c      	ands	r4, r5
 80127e8:	3b01      	subs	r3, #1
 80127ea:	b2e4      	uxtb	r4, r4
 80127ec:	2b0d      	cmp	r3, #13
 80127ee:	d809      	bhi.n	8012804 <uxr_serialize_CREATE_Payload+0x44>
 80127f0:	e8df f003 	tbb	[pc, r3]
 80127f4:	23230a4c 	.word	0x23230a4c
 80127f8:	0a0a0a0a 	.word	0x0a0a0a0a
 80127fc:	12121208 	.word	0x12121208
 8012800:	3e45      	.short	0x3e45
 8012802:	2400      	movs	r4, #0
 8012804:	4620      	mov	r0, r4
 8012806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012808:	f106 0108 	add.w	r1, r6, #8
 801280c:	4638      	mov	r0, r7
 801280e:	f7ff fbb3 	bl	8011f78 <uxr_serialize_DATAWRITER_Representation>
 8012812:	4004      	ands	r4, r0
 8012814:	4620      	mov	r0, r4
 8012816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012818:	7a31      	ldrb	r1, [r6, #8]
 801281a:	4638      	mov	r0, r7
 801281c:	f7fc f8d6 	bl	800e9cc <ucdr_serialize_uint8_t>
 8012820:	2800      	cmp	r0, #0
 8012822:	d0ee      	beq.n	8012802 <uxr_serialize_CREATE_Payload+0x42>
 8012824:	7a33      	ldrb	r3, [r6, #8]
 8012826:	2b01      	cmp	r3, #1
 8012828:	d001      	beq.n	801282e <uxr_serialize_CREATE_Payload+0x6e>
 801282a:	2b02      	cmp	r3, #2
 801282c:	d1ea      	bne.n	8012804 <uxr_serialize_CREATE_Payload+0x44>
 801282e:	68f1      	ldr	r1, [r6, #12]
 8012830:	4638      	mov	r0, r7
 8012832:	f006 f949 	bl	8018ac8 <ucdr_serialize_string>
 8012836:	4004      	ands	r4, r0
 8012838:	e7e4      	b.n	8012804 <uxr_serialize_CREATE_Payload+0x44>
 801283a:	7a31      	ldrb	r1, [r6, #8]
 801283c:	4638      	mov	r0, r7
 801283e:	f7fc f8c5 	bl	800e9cc <ucdr_serialize_uint8_t>
 8012842:	4605      	mov	r5, r0
 8012844:	b158      	cbz	r0, 801285e <uxr_serialize_CREATE_Payload+0x9e>
 8012846:	7a33      	ldrb	r3, [r6, #8]
 8012848:	2b02      	cmp	r3, #2
 801284a:	d034      	beq.n	80128b6 <uxr_serialize_CREATE_Payload+0xf6>
 801284c:	2b03      	cmp	r3, #3
 801284e:	d106      	bne.n	801285e <uxr_serialize_CREATE_Payload+0x9e>
 8012850:	68f2      	ldr	r2, [r6, #12]
 8012852:	f106 0110 	add.w	r1, r6, #16
 8012856:	4638      	mov	r0, r7
 8012858:	f006 f90a 	bl	8018a70 <ucdr_serialize_sequence_uint8_t>
 801285c:	4605      	mov	r5, r0
 801285e:	2202      	movs	r2, #2
 8012860:	f506 7104 	add.w	r1, r6, #528	; 0x210
 8012864:	4638      	mov	r0, r7
 8012866:	f7fb ff0d 	bl	800e684 <ucdr_serialize_array_uint8_t>
 801286a:	4028      	ands	r0, r5
 801286c:	4004      	ands	r4, r0
 801286e:	e7c9      	b.n	8012804 <uxr_serialize_CREATE_Payload+0x44>
 8012870:	f106 0108 	add.w	r1, r6, #8
 8012874:	4638      	mov	r0, r7
 8012876:	f7ff fa79 	bl	8011d6c <uxr_serialize_CLIENT_Representation>
 801287a:	4004      	ands	r4, r0
 801287c:	e7c2      	b.n	8012804 <uxr_serialize_CREATE_Payload+0x44>
 801287e:	f106 0108 	add.w	r1, r6, #8
 8012882:	4638      	mov	r0, r7
 8012884:	f7ff fb2e 	bl	8011ee4 <uxr_serialize_AGENT_Representation>
 8012888:	4004      	ands	r4, r0
 801288a:	e7bb      	b.n	8012804 <uxr_serialize_CREATE_Payload+0x44>
 801288c:	7a31      	ldrb	r1, [r6, #8]
 801288e:	4638      	mov	r0, r7
 8012890:	f7fc f89c 	bl	800e9cc <ucdr_serialize_uint8_t>
 8012894:	4605      	mov	r5, r0
 8012896:	b130      	cbz	r0, 80128a6 <uxr_serialize_CREATE_Payload+0xe6>
 8012898:	7a33      	ldrb	r3, [r6, #8]
 801289a:	2b02      	cmp	r3, #2
 801289c:	d011      	beq.n	80128c2 <uxr_serialize_CREATE_Payload+0x102>
 801289e:	2b03      	cmp	r3, #3
 80128a0:	d015      	beq.n	80128ce <uxr_serialize_CREATE_Payload+0x10e>
 80128a2:	2b01      	cmp	r3, #1
 80128a4:	d00d      	beq.n	80128c2 <uxr_serialize_CREATE_Payload+0x102>
 80128a6:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 80128aa:	4638      	mov	r0, r7
 80128ac:	f7fc fdca 	bl	800f444 <ucdr_serialize_int16_t>
 80128b0:	4028      	ands	r0, r5
 80128b2:	4004      	ands	r4, r0
 80128b4:	e7a6      	b.n	8012804 <uxr_serialize_CREATE_Payload+0x44>
 80128b6:	68f1      	ldr	r1, [r6, #12]
 80128b8:	4638      	mov	r0, r7
 80128ba:	f006 f905 	bl	8018ac8 <ucdr_serialize_string>
 80128be:	4605      	mov	r5, r0
 80128c0:	e7cd      	b.n	801285e <uxr_serialize_CREATE_Payload+0x9e>
 80128c2:	68f1      	ldr	r1, [r6, #12]
 80128c4:	4638      	mov	r0, r7
 80128c6:	f006 f8ff 	bl	8018ac8 <ucdr_serialize_string>
 80128ca:	4605      	mov	r5, r0
 80128cc:	e7eb      	b.n	80128a6 <uxr_serialize_CREATE_Payload+0xe6>
 80128ce:	68f2      	ldr	r2, [r6, #12]
 80128d0:	f106 0110 	add.w	r1, r6, #16
 80128d4:	4638      	mov	r0, r7
 80128d6:	f006 f8cb 	bl	8018a70 <ucdr_serialize_sequence_uint8_t>
 80128da:	4605      	mov	r5, r0
 80128dc:	e7e3      	b.n	80128a6 <uxr_serialize_CREATE_Payload+0xe6>
 80128de:	bf00      	nop

080128e0 <uxr_deserialize_GET_INFO_Payload>:
 80128e0:	b570      	push	{r4, r5, r6, lr}
 80128e2:	2202      	movs	r2, #2
 80128e4:	4605      	mov	r5, r0
 80128e6:	460e      	mov	r6, r1
 80128e8:	f7fb ff30 	bl	800e74c <ucdr_deserialize_array_uint8_t>
 80128ec:	2202      	movs	r2, #2
 80128ee:	4604      	mov	r4, r0
 80128f0:	4628      	mov	r0, r5
 80128f2:	18b1      	adds	r1, r6, r2
 80128f4:	f7fb ff2a 	bl	800e74c <ucdr_deserialize_array_uint8_t>
 80128f8:	4603      	mov	r3, r0
 80128fa:	1d31      	adds	r1, r6, #4
 80128fc:	4628      	mov	r0, r5
 80128fe:	401c      	ands	r4, r3
 8012900:	f7fc fbaa 	bl	800f058 <ucdr_deserialize_uint32_t>
 8012904:	b2e4      	uxtb	r4, r4
 8012906:	4020      	ands	r0, r4
 8012908:	bd70      	pop	{r4, r5, r6, pc}
 801290a:	bf00      	nop

0801290c <uxr_serialize_DELETE_Payload>:
 801290c:	b570      	push	{r4, r5, r6, lr}
 801290e:	2202      	movs	r2, #2
 8012910:	4605      	mov	r5, r0
 8012912:	460e      	mov	r6, r1
 8012914:	f7fb feb6 	bl	800e684 <ucdr_serialize_array_uint8_t>
 8012918:	2202      	movs	r2, #2
 801291a:	4604      	mov	r4, r0
 801291c:	4628      	mov	r0, r5
 801291e:	18b1      	adds	r1, r6, r2
 8012920:	f7fb feb0 	bl	800e684 <ucdr_serialize_array_uint8_t>
 8012924:	4020      	ands	r0, r4
 8012926:	b2c0      	uxtb	r0, r0
 8012928:	bd70      	pop	{r4, r5, r6, pc}
 801292a:	bf00      	nop

0801292c <uxr_deserialize_STATUS_AGENT_Payload>:
 801292c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012930:	460e      	mov	r6, r1
 8012932:	4605      	mov	r5, r0
 8012934:	f7fc f860 	bl	800e9f8 <ucdr_deserialize_uint8_t>
 8012938:	4604      	mov	r4, r0
 801293a:	1c71      	adds	r1, r6, #1
 801293c:	4628      	mov	r0, r5
 801293e:	f7fc f85b 	bl	800e9f8 <ucdr_deserialize_uint8_t>
 8012942:	2204      	movs	r2, #4
 8012944:	4681      	mov	r9, r0
 8012946:	4628      	mov	r0, r5
 8012948:	18b1      	adds	r1, r6, r2
 801294a:	f7fb feff 	bl	800e74c <ucdr_deserialize_array_uint8_t>
 801294e:	f106 0108 	add.w	r1, r6, #8
 8012952:	4680      	mov	r8, r0
 8012954:	2202      	movs	r2, #2
 8012956:	4628      	mov	r0, r5
 8012958:	f7fb fef8 	bl	800e74c <ucdr_deserialize_array_uint8_t>
 801295c:	ea04 0309 	and.w	r3, r4, r9
 8012960:	4607      	mov	r7, r0
 8012962:	2202      	movs	r2, #2
 8012964:	b2db      	uxtb	r3, r3
 8012966:	f106 010a 	add.w	r1, r6, #10
 801296a:	4628      	mov	r0, r5
 801296c:	ea03 0408 	and.w	r4, r3, r8
 8012970:	f7fb feec 	bl	800e74c <ucdr_deserialize_array_uint8_t>
 8012974:	4603      	mov	r3, r0
 8012976:	4628      	mov	r0, r5
 8012978:	403c      	ands	r4, r7
 801297a:	f106 010c 	add.w	r1, r6, #12
 801297e:	461d      	mov	r5, r3
 8012980:	f7fc f80c 	bl	800e99c <ucdr_deserialize_bool>
 8012984:	4025      	ands	r5, r4
 8012986:	4028      	ands	r0, r5
 8012988:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801298c <uxr_deserialize_STATUS_Payload>:
 801298c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012990:	2202      	movs	r2, #2
 8012992:	4606      	mov	r6, r0
 8012994:	460f      	mov	r7, r1
 8012996:	f7fb fed9 	bl	800e74c <ucdr_deserialize_array_uint8_t>
 801299a:	2202      	movs	r2, #2
 801299c:	4605      	mov	r5, r0
 801299e:	4630      	mov	r0, r6
 80129a0:	18b9      	adds	r1, r7, r2
 80129a2:	f7fb fed3 	bl	800e74c <ucdr_deserialize_array_uint8_t>
 80129a6:	4680      	mov	r8, r0
 80129a8:	1d39      	adds	r1, r7, #4
 80129aa:	4630      	mov	r0, r6
 80129ac:	f7fc f824 	bl	800e9f8 <ucdr_deserialize_uint8_t>
 80129b0:	ea05 0508 	and.w	r5, r5, r8
 80129b4:	4604      	mov	r4, r0
 80129b6:	1d79      	adds	r1, r7, #5
 80129b8:	4630      	mov	r0, r6
 80129ba:	402c      	ands	r4, r5
 80129bc:	f7fc f81c 	bl	800e9f8 <ucdr_deserialize_uint8_t>
 80129c0:	4020      	ands	r0, r4
 80129c2:	b2c0      	uxtb	r0, r0
 80129c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080129c8 <uxr_serialize_INFO_Payload>:
 80129c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129cc:	2202      	movs	r2, #2
 80129ce:	460c      	mov	r4, r1
 80129d0:	4605      	mov	r5, r0
 80129d2:	f7fb fe57 	bl	800e684 <ucdr_serialize_array_uint8_t>
 80129d6:	2202      	movs	r2, #2
 80129d8:	4680      	mov	r8, r0
 80129da:	4628      	mov	r0, r5
 80129dc:	18a1      	adds	r1, r4, r2
 80129de:	f7fb fe51 	bl	800e684 <ucdr_serialize_array_uint8_t>
 80129e2:	4607      	mov	r7, r0
 80129e4:	7921      	ldrb	r1, [r4, #4]
 80129e6:	4628      	mov	r0, r5
 80129e8:	f7fb fff0 	bl	800e9cc <ucdr_serialize_uint8_t>
 80129ec:	ea08 0807 	and.w	r8, r8, r7
 80129f0:	4606      	mov	r6, r0
 80129f2:	7961      	ldrb	r1, [r4, #5]
 80129f4:	4628      	mov	r0, r5
 80129f6:	ea06 0608 	and.w	r6, r6, r8
 80129fa:	f7fb ffe7 	bl	800e9cc <ucdr_serialize_uint8_t>
 80129fe:	7a21      	ldrb	r1, [r4, #8]
 8012a00:	4030      	ands	r0, r6
 8012a02:	b2c7      	uxtb	r7, r0
 8012a04:	4628      	mov	r0, r5
 8012a06:	f7fb ffb3 	bl	800e970 <ucdr_serialize_bool>
 8012a0a:	7a23      	ldrb	r3, [r4, #8]
 8012a0c:	4606      	mov	r6, r0
 8012a0e:	b96b      	cbnz	r3, 8012a2c <uxr_serialize_INFO_Payload+0x64>
 8012a10:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 8012a14:	4628      	mov	r0, r5
 8012a16:	f7fb ffab 	bl	800e970 <ucdr_serialize_bool>
 8012a1a:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 8012a1e:	4030      	ands	r0, r6
 8012a20:	b2c6      	uxtb	r6, r0
 8012a22:	b983      	cbnz	r3, 8012a46 <uxr_serialize_INFO_Payload+0x7e>
 8012a24:	ea06 0007 	and.w	r0, r6, r7
 8012a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a2c:	7b21      	ldrb	r1, [r4, #12]
 8012a2e:	4628      	mov	r0, r5
 8012a30:	f7fb ffcc 	bl	800e9cc <ucdr_serialize_uint8_t>
 8012a34:	b188      	cbz	r0, 8012a5a <uxr_serialize_INFO_Payload+0x92>
 8012a36:	f104 010c 	add.w	r1, r4, #12
 8012a3a:	4628      	mov	r0, r5
 8012a3c:	f7ff fac4 	bl	8011fc8 <uxr_serialize_ObjectVariant.part.0>
 8012a40:	4030      	ands	r0, r6
 8012a42:	b2c6      	uxtb	r6, r0
 8012a44:	e7e4      	b.n	8012a10 <uxr_serialize_INFO_Payload+0x48>
 8012a46:	f504 7108 	add.w	r1, r4, #544	; 0x220
 8012a4a:	4628      	mov	r0, r5
 8012a4c:	f7ff fdb8 	bl	80125c0 <uxr_serialize_ActivityInfoVariant>
 8012a50:	4006      	ands	r6, r0
 8012a52:	ea06 0007 	and.w	r0, r6, r7
 8012a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a5a:	4606      	mov	r6, r0
 8012a5c:	e7d8      	b.n	8012a10 <uxr_serialize_INFO_Payload+0x48>
 8012a5e:	bf00      	nop

08012a60 <uxr_serialize_READ_DATA_Payload>:
 8012a60:	b570      	push	{r4, r5, r6, lr}
 8012a62:	2202      	movs	r2, #2
 8012a64:	4605      	mov	r5, r0
 8012a66:	460e      	mov	r6, r1
 8012a68:	f7fb fe0c 	bl	800e684 <ucdr_serialize_array_uint8_t>
 8012a6c:	2202      	movs	r2, #2
 8012a6e:	4604      	mov	r4, r0
 8012a70:	4628      	mov	r0, r5
 8012a72:	18b1      	adds	r1, r6, r2
 8012a74:	f7fb fe06 	bl	800e684 <ucdr_serialize_array_uint8_t>
 8012a78:	4603      	mov	r3, r0
 8012a7a:	1d31      	adds	r1, r6, #4
 8012a7c:	4628      	mov	r0, r5
 8012a7e:	401c      	ands	r4, r3
 8012a80:	f7ff fe5e 	bl	8012740 <uxr_serialize_ReadSpecification>
 8012a84:	b2e4      	uxtb	r4, r4
 8012a86:	4020      	ands	r0, r4
 8012a88:	bd70      	pop	{r4, r5, r6, pc}
 8012a8a:	bf00      	nop

08012a8c <uxr_serialize_WRITE_DATA_Payload_Data>:
 8012a8c:	b570      	push	{r4, r5, r6, lr}
 8012a8e:	2202      	movs	r2, #2
 8012a90:	4605      	mov	r5, r0
 8012a92:	460e      	mov	r6, r1
 8012a94:	f7fb fdf6 	bl	800e684 <ucdr_serialize_array_uint8_t>
 8012a98:	2202      	movs	r2, #2
 8012a9a:	4604      	mov	r4, r0
 8012a9c:	4628      	mov	r0, r5
 8012a9e:	18b1      	adds	r1, r6, r2
 8012aa0:	f7fb fdf0 	bl	800e684 <ucdr_serialize_array_uint8_t>
 8012aa4:	4020      	ands	r0, r4
 8012aa6:	b2c0      	uxtb	r0, r0
 8012aa8:	bd70      	pop	{r4, r5, r6, pc}
 8012aaa:	bf00      	nop

08012aac <uxr_serialize_ACKNACK_Payload>:
 8012aac:	b570      	push	{r4, r5, r6, lr}
 8012aae:	460c      	mov	r4, r1
 8012ab0:	4605      	mov	r5, r0
 8012ab2:	460e      	mov	r6, r1
 8012ab4:	f834 1b02 	ldrh.w	r1, [r4], #2
 8012ab8:	f7fb ffb4 	bl	800ea24 <ucdr_serialize_uint16_t>
 8012abc:	2202      	movs	r2, #2
 8012abe:	4621      	mov	r1, r4
 8012ac0:	4604      	mov	r4, r0
 8012ac2:	4628      	mov	r0, r5
 8012ac4:	f7fb fdde 	bl	800e684 <ucdr_serialize_array_uint8_t>
 8012ac8:	4603      	mov	r3, r0
 8012aca:	7931      	ldrb	r1, [r6, #4]
 8012acc:	4628      	mov	r0, r5
 8012ace:	401c      	ands	r4, r3
 8012ad0:	f7fb ff7c 	bl	800e9cc <ucdr_serialize_uint8_t>
 8012ad4:	b2e4      	uxtb	r4, r4
 8012ad6:	4020      	ands	r0, r4
 8012ad8:	bd70      	pop	{r4, r5, r6, pc}
 8012ada:	bf00      	nop

08012adc <uxr_deserialize_ACKNACK_Payload>:
 8012adc:	b570      	push	{r4, r5, r6, lr}
 8012ade:	460e      	mov	r6, r1
 8012ae0:	4605      	mov	r5, r0
 8012ae2:	f7fc f89f 	bl	800ec24 <ucdr_deserialize_uint16_t>
 8012ae6:	2202      	movs	r2, #2
 8012ae8:	4604      	mov	r4, r0
 8012aea:	4628      	mov	r0, r5
 8012aec:	18b1      	adds	r1, r6, r2
 8012aee:	f7fb fe2d 	bl	800e74c <ucdr_deserialize_array_uint8_t>
 8012af2:	4603      	mov	r3, r0
 8012af4:	1d31      	adds	r1, r6, #4
 8012af6:	4628      	mov	r0, r5
 8012af8:	401c      	ands	r4, r3
 8012afa:	f7fb ff7d 	bl	800e9f8 <ucdr_deserialize_uint8_t>
 8012afe:	b2e4      	uxtb	r4, r4
 8012b00:	4020      	ands	r0, r4
 8012b02:	bd70      	pop	{r4, r5, r6, pc}

08012b04 <uxr_serialize_HEARTBEAT_Payload>:
 8012b04:	b570      	push	{r4, r5, r6, lr}
 8012b06:	460d      	mov	r5, r1
 8012b08:	4606      	mov	r6, r0
 8012b0a:	8809      	ldrh	r1, [r1, #0]
 8012b0c:	f7fb ff8a 	bl	800ea24 <ucdr_serialize_uint16_t>
 8012b10:	8869      	ldrh	r1, [r5, #2]
 8012b12:	4604      	mov	r4, r0
 8012b14:	4630      	mov	r0, r6
 8012b16:	f7fb ff85 	bl	800ea24 <ucdr_serialize_uint16_t>
 8012b1a:	4603      	mov	r3, r0
 8012b1c:	7929      	ldrb	r1, [r5, #4]
 8012b1e:	4630      	mov	r0, r6
 8012b20:	401c      	ands	r4, r3
 8012b22:	f7fb ff53 	bl	800e9cc <ucdr_serialize_uint8_t>
 8012b26:	b2e4      	uxtb	r4, r4
 8012b28:	4020      	ands	r0, r4
 8012b2a:	bd70      	pop	{r4, r5, r6, pc}

08012b2c <uxr_deserialize_HEARTBEAT_Payload>:
 8012b2c:	b570      	push	{r4, r5, r6, lr}
 8012b2e:	460e      	mov	r6, r1
 8012b30:	4605      	mov	r5, r0
 8012b32:	f7fc f877 	bl	800ec24 <ucdr_deserialize_uint16_t>
 8012b36:	4604      	mov	r4, r0
 8012b38:	1cb1      	adds	r1, r6, #2
 8012b3a:	4628      	mov	r0, r5
 8012b3c:	f7fc f872 	bl	800ec24 <ucdr_deserialize_uint16_t>
 8012b40:	4603      	mov	r3, r0
 8012b42:	1d31      	adds	r1, r6, #4
 8012b44:	4628      	mov	r0, r5
 8012b46:	401c      	ands	r4, r3
 8012b48:	f7fb ff56 	bl	800e9f8 <ucdr_deserialize_uint8_t>
 8012b4c:	b2e4      	uxtb	r4, r4
 8012b4e:	4020      	ands	r0, r4
 8012b50:	bd70      	pop	{r4, r5, r6, pc}
 8012b52:	bf00      	nop

08012b54 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8012b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b58:	460e      	mov	r6, r1
 8012b5a:	4605      	mov	r5, r0
 8012b5c:	f7fc fef4 	bl	800f948 <ucdr_deserialize_int32_t>
 8012b60:	4607      	mov	r7, r0
 8012b62:	1d31      	adds	r1, r6, #4
 8012b64:	4628      	mov	r0, r5
 8012b66:	f7fc fa77 	bl	800f058 <ucdr_deserialize_uint32_t>
 8012b6a:	4680      	mov	r8, r0
 8012b6c:	f106 0108 	add.w	r1, r6, #8
 8012b70:	4628      	mov	r0, r5
 8012b72:	f7fc fee9 	bl	800f948 <ucdr_deserialize_int32_t>
 8012b76:	ea07 0708 	and.w	r7, r7, r8
 8012b7a:	4604      	mov	r4, r0
 8012b7c:	f106 010c 	add.w	r1, r6, #12
 8012b80:	4628      	mov	r0, r5
 8012b82:	403c      	ands	r4, r7
 8012b84:	f7fc fa68 	bl	800f058 <ucdr_deserialize_uint32_t>
 8012b88:	f106 0110 	add.w	r1, r6, #16
 8012b8c:	4004      	ands	r4, r0
 8012b8e:	4628      	mov	r0, r5
 8012b90:	f7fc feda 	bl	800f948 <ucdr_deserialize_int32_t>
 8012b94:	4603      	mov	r3, r0
 8012b96:	b2e4      	uxtb	r4, r4
 8012b98:	4628      	mov	r0, r5
 8012b9a:	461d      	mov	r5, r3
 8012b9c:	f106 0114 	add.w	r1, r6, #20
 8012ba0:	f7fc fa5a 	bl	800f058 <ucdr_deserialize_uint32_t>
 8012ba4:	402c      	ands	r4, r5
 8012ba6:	4020      	ands	r0, r4
 8012ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012bac <uxr_serialize_SampleIdentity>:
 8012bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bb0:	4604      	mov	r4, r0
 8012bb2:	460d      	mov	r5, r1
 8012bb4:	220c      	movs	r2, #12
 8012bb6:	f7fb fd65 	bl	800e684 <ucdr_serialize_array_uint8_t>
 8012bba:	2203      	movs	r2, #3
 8012bbc:	f105 010c 	add.w	r1, r5, #12
 8012bc0:	4607      	mov	r7, r0
 8012bc2:	4620      	mov	r0, r4
 8012bc4:	f7fb fd5e 	bl	800e684 <ucdr_serialize_array_uint8_t>
 8012bc8:	7be9      	ldrb	r1, [r5, #15]
 8012bca:	4680      	mov	r8, r0
 8012bcc:	4620      	mov	r0, r4
 8012bce:	f7fb fefd 	bl	800e9cc <ucdr_serialize_uint8_t>
 8012bd2:	6929      	ldr	r1, [r5, #16]
 8012bd4:	4606      	mov	r6, r0
 8012bd6:	4620      	mov	r0, r4
 8012bd8:	f7fc fe1e 	bl	800f818 <ucdr_serialize_int32_t>
 8012bdc:	ea07 0708 	and.w	r7, r7, r8
 8012be0:	4603      	mov	r3, r0
 8012be2:	4620      	mov	r0, r4
 8012be4:	403e      	ands	r6, r7
 8012be6:	6969      	ldr	r1, [r5, #20]
 8012be8:	461c      	mov	r4, r3
 8012bea:	f7fc f905 	bl	800edf8 <ucdr_serialize_uint32_t>
 8012bee:	4034      	ands	r4, r6
 8012bf0:	4020      	ands	r0, r4
 8012bf2:	b2c0      	uxtb	r0, r0
 8012bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012bf8 <uxr_deserialize_SampleIdentity>:
 8012bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bfc:	4604      	mov	r4, r0
 8012bfe:	460d      	mov	r5, r1
 8012c00:	220c      	movs	r2, #12
 8012c02:	f7fb fda3 	bl	800e74c <ucdr_deserialize_array_uint8_t>
 8012c06:	2203      	movs	r2, #3
 8012c08:	f105 010c 	add.w	r1, r5, #12
 8012c0c:	4607      	mov	r7, r0
 8012c0e:	4620      	mov	r0, r4
 8012c10:	f7fb fd9c 	bl	800e74c <ucdr_deserialize_array_uint8_t>
 8012c14:	f105 010f 	add.w	r1, r5, #15
 8012c18:	4680      	mov	r8, r0
 8012c1a:	4620      	mov	r0, r4
 8012c1c:	f7fb feec 	bl	800e9f8 <ucdr_deserialize_uint8_t>
 8012c20:	f105 0110 	add.w	r1, r5, #16
 8012c24:	4606      	mov	r6, r0
 8012c26:	4620      	mov	r0, r4
 8012c28:	f7fc fe8e 	bl	800f948 <ucdr_deserialize_int32_t>
 8012c2c:	ea07 0708 	and.w	r7, r7, r8
 8012c30:	4603      	mov	r3, r0
 8012c32:	4620      	mov	r0, r4
 8012c34:	403e      	ands	r6, r7
 8012c36:	f105 0114 	add.w	r1, r5, #20
 8012c3a:	461c      	mov	r4, r3
 8012c3c:	f7fc fa0c 	bl	800f058 <ucdr_deserialize_uint32_t>
 8012c40:	4034      	ands	r4, r6
 8012c42:	4020      	ands	r0, r4
 8012c44:	b2c0      	uxtb	r0, r0
 8012c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c4a:	bf00      	nop

08012c4c <racs_services__srv__Control_Event__get_type_description.part.0>:
 8012c4c:	b510      	push	{r4, lr}
 8012c4e:	2000      	movs	r0, #0
 8012c50:	4c13      	ldr	r4, [pc, #76]	; (8012ca0 <racs_services__srv__Control_Event__get_type_description.part.0+0x54>)
 8012c52:	f005 feaf 	bl	80189b4 <builtin_interfaces__msg__Time__get_type_description>
 8012c56:	300c      	adds	r0, #12
 8012c58:	4b12      	ldr	r3, [pc, #72]	; (8012ca4 <racs_services__srv__Control_Event__get_type_description.part.0+0x58>)
 8012c5a:	c807      	ldmia	r0, {r0, r1, r2}
 8012c5c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012c60:	7823      	ldrb	r3, [r4, #0]
 8012c62:	b90b      	cbnz	r3, 8012c68 <racs_services__srv__Control_Event__get_type_description.part.0+0x1c>
 8012c64:	2301      	movs	r3, #1
 8012c66:	7023      	strb	r3, [r4, #0]
 8012c68:	4a0f      	ldr	r2, [pc, #60]	; (8012ca8 <racs_services__srv__Control_Event__get_type_description.part.0+0x5c>)
 8012c6a:	4b10      	ldr	r3, [pc, #64]	; (8012cac <racs_services__srv__Control_Event__get_type_description.part.0+0x60>)
 8012c6c:	4c10      	ldr	r4, [pc, #64]	; (8012cb0 <racs_services__srv__Control_Event__get_type_description.part.0+0x64>)
 8012c6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8012c70:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012c74:	7823      	ldrb	r3, [r4, #0]
 8012c76:	b90b      	cbnz	r3, 8012c7c <racs_services__srv__Control_Event__get_type_description.part.0+0x30>
 8012c78:	2301      	movs	r3, #1
 8012c7a:	7023      	strb	r3, [r4, #0]
 8012c7c:	4b0d      	ldr	r3, [pc, #52]	; (8012cb4 <racs_services__srv__Control_Event__get_type_description.part.0+0x68>)
 8012c7e:	4c0e      	ldr	r4, [pc, #56]	; (8012cb8 <racs_services__srv__Control_Event__get_type_description.part.0+0x6c>)
 8012c80:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012c84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012c88:	2000      	movs	r0, #0
 8012c8a:	3418      	adds	r4, #24
 8012c8c:	f005 fe32 	bl	80188f4 <service_msgs__msg__ServiceEventInfo__get_type_description>
 8012c90:	300c      	adds	r0, #12
 8012c92:	4b0a      	ldr	r3, [pc, #40]	; (8012cbc <racs_services__srv__Control_Event__get_type_description.part.0+0x70>)
 8012c94:	c807      	ldmia	r0, {r0, r1, r2}
 8012c96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012c9a:	2201      	movs	r2, #1
 8012c9c:	701a      	strb	r2, [r3, #0]
 8012c9e:	bd10      	pop	{r4, pc}
 8012ca0:	200101d0 	.word	0x200101d0
 8012ca4:	20000cf0 	.word	0x20000cf0
 8012ca8:	0801d70c 	.word	0x0801d70c
 8012cac:	20000d08 	.word	0x20000d08
 8012cb0:	200101ce 	.word	0x200101ce
 8012cb4:	0801d6e8 	.word	0x0801d6e8
 8012cb8:	20000d20 	.word	0x20000d20
 8012cbc:	200101cd 	.word	0x200101cd

08012cc0 <racs_services__srv__Control__get_type_hash>:
 8012cc0:	4800      	ldr	r0, [pc, #0]	; (8012cc4 <racs_services__srv__Control__get_type_hash+0x4>)
 8012cc2:	4770      	bx	lr
 8012cc4:	20000bbc 	.word	0x20000bbc

08012cc8 <racs_services__srv__Control_Request__get_type_hash>:
 8012cc8:	4800      	ldr	r0, [pc, #0]	; (8012ccc <racs_services__srv__Control_Request__get_type_hash+0x4>)
 8012cca:	4770      	bx	lr
 8012ccc:	20000b98 	.word	0x20000b98

08012cd0 <racs_services__srv__Control_Response__get_type_hash>:
 8012cd0:	4800      	ldr	r0, [pc, #0]	; (8012cd4 <racs_services__srv__Control_Response__get_type_hash+0x4>)
 8012cd2:	4770      	bx	lr
 8012cd4:	20000b74 	.word	0x20000b74

08012cd8 <racs_services__srv__Control_Event__get_type_hash>:
 8012cd8:	4800      	ldr	r0, [pc, #0]	; (8012cdc <racs_services__srv__Control_Event__get_type_hash+0x4>)
 8012cda:	4770      	bx	lr
 8012cdc:	20000b50 	.word	0x20000b50

08012ce0 <racs_services__srv__Control__get_type_description>:
 8012ce0:	b538      	push	{r3, r4, r5, lr}
 8012ce2:	4d1c      	ldr	r5, [pc, #112]	; (8012d54 <racs_services__srv__Control__get_type_description+0x74>)
 8012ce4:	7828      	ldrb	r0, [r5, #0]
 8012ce6:	b108      	cbz	r0, 8012cec <racs_services__srv__Control__get_type_description+0xc>
 8012ce8:	481b      	ldr	r0, [pc, #108]	; (8012d58 <racs_services__srv__Control__get_type_description+0x78>)
 8012cea:	bd38      	pop	{r3, r4, r5, pc}
 8012cec:	f005 fe62 	bl	80189b4 <builtin_interfaces__msg__Time__get_type_description>
 8012cf0:	300c      	adds	r0, #12
 8012cf2:	4b1a      	ldr	r3, [pc, #104]	; (8012d5c <racs_services__srv__Control__get_type_description+0x7c>)
 8012cf4:	c807      	ldmia	r0, {r0, r1, r2}
 8012cf6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012cfa:	4b19      	ldr	r3, [pc, #100]	; (8012d60 <racs_services__srv__Control__get_type_description+0x80>)
 8012cfc:	781b      	ldrb	r3, [r3, #0]
 8012cfe:	b32b      	cbz	r3, 8012d4c <racs_services__srv__Control__get_type_description+0x6c>
 8012d00:	4a18      	ldr	r2, [pc, #96]	; (8012d64 <racs_services__srv__Control__get_type_description+0x84>)
 8012d02:	4b19      	ldr	r3, [pc, #100]	; (8012d68 <racs_services__srv__Control__get_type_description+0x88>)
 8012d04:	4c19      	ldr	r4, [pc, #100]	; (8012d6c <racs_services__srv__Control__get_type_description+0x8c>)
 8012d06:	ca07      	ldmia	r2, {r0, r1, r2}
 8012d08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012d0c:	7823      	ldrb	r3, [r4, #0]
 8012d0e:	b90b      	cbnz	r3, 8012d14 <racs_services__srv__Control__get_type_description+0x34>
 8012d10:	2301      	movs	r3, #1
 8012d12:	7023      	strb	r3, [r4, #0]
 8012d14:	4a16      	ldr	r2, [pc, #88]	; (8012d70 <racs_services__srv__Control__get_type_description+0x90>)
 8012d16:	4b17      	ldr	r3, [pc, #92]	; (8012d74 <racs_services__srv__Control__get_type_description+0x94>)
 8012d18:	4c17      	ldr	r4, [pc, #92]	; (8012d78 <racs_services__srv__Control__get_type_description+0x98>)
 8012d1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8012d1c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012d20:	7823      	ldrb	r3, [r4, #0]
 8012d22:	b90b      	cbnz	r3, 8012d28 <racs_services__srv__Control__get_type_description+0x48>
 8012d24:	2301      	movs	r3, #1
 8012d26:	7023      	strb	r3, [r4, #0]
 8012d28:	4b14      	ldr	r3, [pc, #80]	; (8012d7c <racs_services__srv__Control__get_type_description+0x9c>)
 8012d2a:	4c15      	ldr	r4, [pc, #84]	; (8012d80 <racs_services__srv__Control__get_type_description+0xa0>)
 8012d2c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012d30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012d34:	2000      	movs	r0, #0
 8012d36:	3418      	adds	r4, #24
 8012d38:	f005 fddc 	bl	80188f4 <service_msgs__msg__ServiceEventInfo__get_type_description>
 8012d3c:	300c      	adds	r0, #12
 8012d3e:	2301      	movs	r3, #1
 8012d40:	c807      	ldmia	r0, {r0, r1, r2}
 8012d42:	702b      	strb	r3, [r5, #0]
 8012d44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012d48:	4803      	ldr	r0, [pc, #12]	; (8012d58 <racs_services__srv__Control__get_type_description+0x78>)
 8012d4a:	bd38      	pop	{r3, r4, r5, pc}
 8012d4c:	f7ff ff7e 	bl	8012c4c <racs_services__srv__Control_Event__get_type_description.part.0>
 8012d50:	e7d6      	b.n	8012d00 <racs_services__srv__Control__get_type_description+0x20>
 8012d52:	bf00      	nop
 8012d54:	200101d1 	.word	0x200101d1
 8012d58:	0801d724 	.word	0x0801d724
 8012d5c:	20001018 	.word	0x20001018
 8012d60:	200101cd 	.word	0x200101cd
 8012d64:	0801d6c4 	.word	0x0801d6c4
 8012d68:	20001030 	.word	0x20001030
 8012d6c:	200101d0 	.word	0x200101d0
 8012d70:	0801d70c 	.word	0x0801d70c
 8012d74:	20001048 	.word	0x20001048
 8012d78:	200101ce 	.word	0x200101ce
 8012d7c:	0801d6e8 	.word	0x0801d6e8
 8012d80:	20001060 	.word	0x20001060

08012d84 <racs_services__srv__Control_Request__get_type_description>:
 8012d84:	4b03      	ldr	r3, [pc, #12]	; (8012d94 <racs_services__srv__Control_Request__get_type_description+0x10>)
 8012d86:	781a      	ldrb	r2, [r3, #0]
 8012d88:	b90a      	cbnz	r2, 8012d8e <racs_services__srv__Control_Request__get_type_description+0xa>
 8012d8a:	2201      	movs	r2, #1
 8012d8c:	701a      	strb	r2, [r3, #0]
 8012d8e:	4802      	ldr	r0, [pc, #8]	; (8012d98 <racs_services__srv__Control_Request__get_type_description+0x14>)
 8012d90:	4770      	bx	lr
 8012d92:	bf00      	nop
 8012d94:	200101d0 	.word	0x200101d0
 8012d98:	0801d700 	.word	0x0801d700

08012d9c <racs_services__srv__Control_Response__get_type_description>:
 8012d9c:	4b03      	ldr	r3, [pc, #12]	; (8012dac <racs_services__srv__Control_Response__get_type_description+0x10>)
 8012d9e:	781a      	ldrb	r2, [r3, #0]
 8012da0:	b90a      	cbnz	r2, 8012da6 <racs_services__srv__Control_Response__get_type_description+0xa>
 8012da2:	2201      	movs	r2, #1
 8012da4:	701a      	strb	r2, [r3, #0]
 8012da6:	4802      	ldr	r0, [pc, #8]	; (8012db0 <racs_services__srv__Control_Response__get_type_description+0x14>)
 8012da8:	4770      	bx	lr
 8012daa:	bf00      	nop
 8012dac:	200101ce 	.word	0x200101ce
 8012db0:	0801d6dc 	.word	0x0801d6dc

08012db4 <racs_services__srv__Control_Event__get_type_description>:
 8012db4:	b508      	push	{r3, lr}
 8012db6:	4b04      	ldr	r3, [pc, #16]	; (8012dc8 <racs_services__srv__Control_Event__get_type_description+0x14>)
 8012db8:	781b      	ldrb	r3, [r3, #0]
 8012dba:	b10b      	cbz	r3, 8012dc0 <racs_services__srv__Control_Event__get_type_description+0xc>
 8012dbc:	4803      	ldr	r0, [pc, #12]	; (8012dcc <racs_services__srv__Control_Event__get_type_description+0x18>)
 8012dbe:	bd08      	pop	{r3, pc}
 8012dc0:	f7ff ff44 	bl	8012c4c <racs_services__srv__Control_Event__get_type_description.part.0>
 8012dc4:	4801      	ldr	r0, [pc, #4]	; (8012dcc <racs_services__srv__Control_Event__get_type_description+0x18>)
 8012dc6:	bd08      	pop	{r3, pc}
 8012dc8:	200101cd 	.word	0x200101cd
 8012dcc:	0801d6b8 	.word	0x0801d6b8

08012dd0 <racs_services__srv__Control__get_type_description_sources>:
 8012dd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dd4:	4b2c      	ldr	r3, [pc, #176]	; (8012e88 <racs_services__srv__Control__get_type_description_sources+0xb8>)
 8012dd6:	f893 9000 	ldrb.w	r9, [r3]
 8012dda:	f1b9 0f00 	cmp.w	r9, #0
 8012dde:	d002      	beq.n	8012de6 <racs_services__srv__Control__get_type_description_sources+0x16>
 8012de0:	482a      	ldr	r0, [pc, #168]	; (8012e8c <racs_services__srv__Control__get_type_description_sources+0xbc>)
 8012de2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012de6:	4d2a      	ldr	r5, [pc, #168]	; (8012e90 <racs_services__srv__Control__get_type_description_sources+0xc0>)
 8012de8:	4c2a      	ldr	r4, [pc, #168]	; (8012e94 <racs_services__srv__Control__get_type_description_sources+0xc4>)
 8012dea:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8012e9c <racs_services__srv__Control__get_type_description_sources+0xcc>
 8012dee:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8012ea0 <racs_services__srv__Control__get_type_description_sources+0xd0>
 8012df2:	4e29      	ldr	r6, [pc, #164]	; (8012e98 <racs_services__srv__Control__get_type_description_sources+0xc8>)
 8012df4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012df6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012df8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012dfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012dfc:	682b      	ldr	r3, [r5, #0]
 8012dfe:	4625      	mov	r5, r4
 8012e00:	4648      	mov	r0, r9
 8012e02:	f104 0a28 	add.w	sl, r4, #40	; 0x28
 8012e06:	f845 3b04 	str.w	r3, [r5], #4
 8012e0a:	f104 074c 	add.w	r7, r4, #76	; 0x4c
 8012e0e:	f005 fddd 	bl	80189cc <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8012e12:	4684      	mov	ip, r0
 8012e14:	f104 0e70 	add.w	lr, r4, #112	; 0x70
 8012e18:	3494      	adds	r4, #148	; 0x94
 8012e1a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012e1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012e20:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012e24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012e26:	f8dc 3000 	ldr.w	r3, [ip]
 8012e2a:	602b      	str	r3, [r5, #0]
 8012e2c:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8012e30:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 8012e34:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8012e38:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 8012e3c:	f8db 3000 	ldr.w	r3, [fp]
 8012e40:	f8ca 3000 	str.w	r3, [sl]
 8012e44:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8012e48:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8012e4a:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8012e4e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8012e50:	f8d8 3000 	ldr.w	r3, [r8]
 8012e54:	603b      	str	r3, [r7, #0]
 8012e56:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8012e58:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012e5c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8012e5e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012e62:	6833      	ldr	r3, [r6, #0]
 8012e64:	4648      	mov	r0, r9
 8012e66:	f8ce 3000 	str.w	r3, [lr]
 8012e6a:	f005 fd5b 	bl	8018924 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 8012e6e:	2301      	movs	r3, #1
 8012e70:	4a05      	ldr	r2, [pc, #20]	; (8012e88 <racs_services__srv__Control__get_type_description_sources+0xb8>)
 8012e72:	4605      	mov	r5, r0
 8012e74:	7013      	strb	r3, [r2, #0]
 8012e76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012e78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012e7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012e7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012e7e:	682b      	ldr	r3, [r5, #0]
 8012e80:	4802      	ldr	r0, [pc, #8]	; (8012e8c <racs_services__srv__Control__get_type_description_sources+0xbc>)
 8012e82:	6023      	str	r3, [r4, #0]
 8012e84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e88:	200101cc 	.word	0x200101cc
 8012e8c:	0801d7fc 	.word	0x0801d7fc
 8012e90:	0801d7b4 	.word	0x0801d7b4
 8012e94:	20010288 	.word	0x20010288
 8012e98:	0801d76c 	.word	0x0801d76c
 8012e9c:	0801d748 	.word	0x0801d748
 8012ea0:	0801d790 	.word	0x0801d790

08012ea4 <racs_services__srv__Control_Request__get_type_description_sources>:
 8012ea4:	4b09      	ldr	r3, [pc, #36]	; (8012ecc <racs_services__srv__Control_Request__get_type_description_sources+0x28>)
 8012ea6:	781a      	ldrb	r2, [r3, #0]
 8012ea8:	b96a      	cbnz	r2, 8012ec6 <racs_services__srv__Control_Request__get_type_description_sources+0x22>
 8012eaa:	2201      	movs	r2, #1
 8012eac:	b430      	push	{r4, r5}
 8012eae:	4d08      	ldr	r5, [pc, #32]	; (8012ed0 <racs_services__srv__Control_Request__get_type_description_sources+0x2c>)
 8012eb0:	4c08      	ldr	r4, [pc, #32]	; (8012ed4 <racs_services__srv__Control_Request__get_type_description_sources+0x30>)
 8012eb2:	701a      	strb	r2, [r3, #0]
 8012eb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012eb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012eb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012eba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012ebc:	682b      	ldr	r3, [r5, #0]
 8012ebe:	4806      	ldr	r0, [pc, #24]	; (8012ed8 <racs_services__srv__Control_Request__get_type_description_sources+0x34>)
 8012ec0:	6023      	str	r3, [r4, #0]
 8012ec2:	bc30      	pop	{r4, r5}
 8012ec4:	4770      	bx	lr
 8012ec6:	4804      	ldr	r0, [pc, #16]	; (8012ed8 <racs_services__srv__Control_Request__get_type_description_sources+0x34>)
 8012ec8:	4770      	bx	lr
 8012eca:	bf00      	nop
 8012ecc:	200101d3 	.word	0x200101d3
 8012ed0:	0801d790 	.word	0x0801d790
 8012ed4:	20010384 	.word	0x20010384
 8012ed8:	0801d7f0 	.word	0x0801d7f0

08012edc <racs_services__srv__Control_Response__get_type_description_sources>:
 8012edc:	4b09      	ldr	r3, [pc, #36]	; (8012f04 <racs_services__srv__Control_Response__get_type_description_sources+0x28>)
 8012ede:	781a      	ldrb	r2, [r3, #0]
 8012ee0:	b96a      	cbnz	r2, 8012efe <racs_services__srv__Control_Response__get_type_description_sources+0x22>
 8012ee2:	2201      	movs	r2, #1
 8012ee4:	b430      	push	{r4, r5}
 8012ee6:	4d08      	ldr	r5, [pc, #32]	; (8012f08 <racs_services__srv__Control_Response__get_type_description_sources+0x2c>)
 8012ee8:	4c08      	ldr	r4, [pc, #32]	; (8012f0c <racs_services__srv__Control_Response__get_type_description_sources+0x30>)
 8012eea:	701a      	strb	r2, [r3, #0]
 8012eec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012eee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012ef0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012ef2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012ef4:	682b      	ldr	r3, [r5, #0]
 8012ef6:	4806      	ldr	r0, [pc, #24]	; (8012f10 <racs_services__srv__Control_Response__get_type_description_sources+0x34>)
 8012ef8:	6023      	str	r3, [r4, #0]
 8012efa:	bc30      	pop	{r4, r5}
 8012efc:	4770      	bx	lr
 8012efe:	4804      	ldr	r0, [pc, #16]	; (8012f10 <racs_services__srv__Control_Response__get_type_description_sources+0x34>)
 8012f00:	4770      	bx	lr
 8012f02:	bf00      	nop
 8012f04:	200101d2 	.word	0x200101d2
 8012f08:	0801d76c 	.word	0x0801d76c
 8012f0c:	20010360 	.word	0x20010360
 8012f10:	0801d7e4 	.word	0x0801d7e4

08012f14 <racs_services__srv__Control_Event__get_type_description_sources>:
 8012f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f18:	4e27      	ldr	r6, [pc, #156]	; (8012fb8 <racs_services__srv__Control_Event__get_type_description_sources+0xa4>)
 8012f1a:	f896 8000 	ldrb.w	r8, [r6]
 8012f1e:	f1b8 0f00 	cmp.w	r8, #0
 8012f22:	d002      	beq.n	8012f2a <racs_services__srv__Control_Event__get_type_description_sources+0x16>
 8012f24:	4825      	ldr	r0, [pc, #148]	; (8012fbc <racs_services__srv__Control_Event__get_type_description_sources+0xa8>)
 8012f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f2a:	4d25      	ldr	r5, [pc, #148]	; (8012fc0 <racs_services__srv__Control_Event__get_type_description_sources+0xac>)
 8012f2c:	4c25      	ldr	r4, [pc, #148]	; (8012fc4 <racs_services__srv__Control_Event__get_type_description_sources+0xb0>)
 8012f2e:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8012fcc <racs_services__srv__Control_Event__get_type_description_sources+0xb8>
 8012f32:	4f25      	ldr	r7, [pc, #148]	; (8012fc8 <racs_services__srv__Control_Event__get_type_description_sources+0xb4>)
 8012f34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012f36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012f38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012f3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012f3c:	682b      	ldr	r3, [r5, #0]
 8012f3e:	4625      	mov	r5, r4
 8012f40:	4640      	mov	r0, r8
 8012f42:	f104 0928 	add.w	r9, r4, #40	; 0x28
 8012f46:	f845 3b04 	str.w	r3, [r5], #4
 8012f4a:	f005 fd3f 	bl	80189cc <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8012f4e:	4684      	mov	ip, r0
 8012f50:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 8012f54:	3470      	adds	r4, #112	; 0x70
 8012f56:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012f5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012f5c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012f60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012f62:	f8dc 3000 	ldr.w	r3, [ip]
 8012f66:	602b      	str	r3, [r5, #0]
 8012f68:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 8012f6c:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8012f70:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 8012f74:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8012f78:	f8da 3000 	ldr.w	r3, [sl]
 8012f7c:	f8c9 3000 	str.w	r3, [r9]
 8012f80:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012f82:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012f86:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012f88:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012f8c:	683b      	ldr	r3, [r7, #0]
 8012f8e:	4640      	mov	r0, r8
 8012f90:	f8ce 3000 	str.w	r3, [lr]
 8012f94:	f005 fcc6 	bl	8018924 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 8012f98:	2301      	movs	r3, #1
 8012f9a:	4684      	mov	ip, r0
 8012f9c:	7033      	strb	r3, [r6, #0]
 8012f9e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012fa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012fa4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012fa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012faa:	f8dc 3000 	ldr.w	r3, [ip]
 8012fae:	4803      	ldr	r0, [pc, #12]	; (8012fbc <racs_services__srv__Control_Event__get_type_description_sources+0xa8>)
 8012fb0:	6023      	str	r3, [r4, #0]
 8012fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fb6:	bf00      	nop
 8012fb8:	200101cf 	.word	0x200101cf
 8012fbc:	0801d7d8 	.word	0x0801d7d8
 8012fc0:	0801d748 	.word	0x0801d748
 8012fc4:	200101d4 	.word	0x200101d4
 8012fc8:	0801d76c 	.word	0x0801d76c
 8012fcc:	0801d790 	.word	0x0801d790

08012fd0 <racs_services__srv__Control_Event__fini.part.0>:
 8012fd0:	b510      	push	{r4, lr}
 8012fd2:	b086      	sub	sp, #24
 8012fd4:	4604      	mov	r4, r0
 8012fd6:	f005 fce3 	bl	80189a0 <service_msgs__msg__ServiceEventInfo__fini>
 8012fda:	a801      	add	r0, sp, #4
 8012fdc:	f7fa faa4 	bl	800d528 <rcutils_get_default_allocator>
 8012fe0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8012fe2:	b130      	cbz	r0, 8012ff2 <racs_services__srv__Control_Event__fini.part.0+0x22>
 8012fe4:	9b02      	ldr	r3, [sp, #8]
 8012fe6:	9905      	ldr	r1, [sp, #20]
 8012fe8:	4798      	blx	r3
 8012fea:	2300      	movs	r3, #0
 8012fec:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8012ff0:	6323      	str	r3, [r4, #48]	; 0x30
 8012ff2:	a801      	add	r0, sp, #4
 8012ff4:	f7fa fa98 	bl	800d528 <rcutils_get_default_allocator>
 8012ff8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8012ffa:	b130      	cbz	r0, 801300a <racs_services__srv__Control_Event__fini.part.0+0x3a>
 8012ffc:	9b02      	ldr	r3, [sp, #8]
 8012ffe:	9905      	ldr	r1, [sp, #20]
 8013000:	4798      	blx	r3
 8013002:	2300      	movs	r3, #0
 8013004:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8013008:	63e3      	str	r3, [r4, #60]	; 0x3c
 801300a:	b006      	add	sp, #24
 801300c:	bd10      	pop	{r4, pc}
 801300e:	bf00      	nop

08013010 <racs_services__srv__Control_Request__init>:
 8013010:	3800      	subs	r0, #0
 8013012:	bf18      	it	ne
 8013014:	2001      	movne	r0, #1
 8013016:	4770      	bx	lr

08013018 <racs_services__srv__Control_Request__fini>:
 8013018:	4770      	bx	lr
 801301a:	bf00      	nop

0801301c <racs_services__srv__Control_Request__copy>:
 801301c:	b168      	cbz	r0, 801303a <racs_services__srv__Control_Request__copy+0x1e>
 801301e:	b161      	cbz	r1, 801303a <racs_services__srv__Control_Request__copy+0x1e>
 8013020:	220c      	movs	r2, #12
 8013022:	b508      	push	{r3, lr}
 8013024:	4603      	mov	r3, r0
 8013026:	4608      	mov	r0, r1
 8013028:	f833 1b02 	ldrh.w	r1, [r3], #2
 801302c:	f820 1b02 	strh.w	r1, [r0], #2
 8013030:	4619      	mov	r1, r3
 8013032:	f008 fc0d 	bl	801b850 <memmove>
 8013036:	2001      	movs	r0, #1
 8013038:	bd08      	pop	{r3, pc}
 801303a:	2000      	movs	r0, #0
 801303c:	4770      	bx	lr
 801303e:	bf00      	nop

08013040 <racs_services__srv__Control_Request__Sequence__init>:
 8013040:	b530      	push	{r4, r5, lr}
 8013042:	4604      	mov	r4, r0
 8013044:	b087      	sub	sp, #28
 8013046:	b148      	cbz	r0, 801305c <racs_services__srv__Control_Request__Sequence__init+0x1c>
 8013048:	460d      	mov	r5, r1
 801304a:	a801      	add	r0, sp, #4
 801304c:	f7fa fa6c 	bl	800d528 <rcutils_get_default_allocator>
 8013050:	b935      	cbnz	r5, 8013060 <racs_services__srv__Control_Request__Sequence__init+0x20>
 8013052:	462b      	mov	r3, r5
 8013054:	2001      	movs	r0, #1
 8013056:	60a5      	str	r5, [r4, #8]
 8013058:	e9c4 3500 	strd	r3, r5, [r4]
 801305c:	b007      	add	sp, #28
 801305e:	bd30      	pop	{r4, r5, pc}
 8013060:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8013064:	210e      	movs	r1, #14
 8013066:	4628      	mov	r0, r5
 8013068:	4798      	blx	r3
 801306a:	4603      	mov	r3, r0
 801306c:	2800      	cmp	r0, #0
 801306e:	d1f1      	bne.n	8013054 <racs_services__srv__Control_Request__Sequence__init+0x14>
 8013070:	e7f4      	b.n	801305c <racs_services__srv__Control_Request__Sequence__init+0x1c>
 8013072:	bf00      	nop

08013074 <racs_services__srv__Control_Request__Sequence__fini>:
 8013074:	b180      	cbz	r0, 8013098 <racs_services__srv__Control_Request__Sequence__fini+0x24>
 8013076:	b510      	push	{r4, lr}
 8013078:	b086      	sub	sp, #24
 801307a:	4604      	mov	r4, r0
 801307c:	a801      	add	r0, sp, #4
 801307e:	f7fa fa53 	bl	800d528 <rcutils_get_default_allocator>
 8013082:	6820      	ldr	r0, [r4, #0]
 8013084:	b130      	cbz	r0, 8013094 <racs_services__srv__Control_Request__Sequence__fini+0x20>
 8013086:	9b02      	ldr	r3, [sp, #8]
 8013088:	9905      	ldr	r1, [sp, #20]
 801308a:	4798      	blx	r3
 801308c:	2300      	movs	r3, #0
 801308e:	e9c4 3300 	strd	r3, r3, [r4]
 8013092:	60a3      	str	r3, [r4, #8]
 8013094:	b006      	add	sp, #24
 8013096:	bd10      	pop	{r4, pc}
 8013098:	4770      	bx	lr
 801309a:	bf00      	nop

0801309c <racs_services__srv__Control_Response__init>:
 801309c:	3800      	subs	r0, #0
 801309e:	bf18      	it	ne
 80130a0:	2001      	movne	r0, #1
 80130a2:	4770      	bx	lr

080130a4 <racs_services__srv__Control_Response__fini>:
 80130a4:	4770      	bx	lr
 80130a6:	bf00      	nop

080130a8 <racs_services__srv__Control_Response__copy>:
 80130a8:	b120      	cbz	r0, 80130b4 <racs_services__srv__Control_Response__copy+0xc>
 80130aa:	b119      	cbz	r1, 80130b4 <racs_services__srv__Control_Response__copy+0xc>
 80130ac:	7803      	ldrb	r3, [r0, #0]
 80130ae:	2001      	movs	r0, #1
 80130b0:	700b      	strb	r3, [r1, #0]
 80130b2:	4770      	bx	lr
 80130b4:	2000      	movs	r0, #0
 80130b6:	4770      	bx	lr

080130b8 <racs_services__srv__Control_Response__Sequence__init>:
 80130b8:	b530      	push	{r4, r5, lr}
 80130ba:	4604      	mov	r4, r0
 80130bc:	b087      	sub	sp, #28
 80130be:	b148      	cbz	r0, 80130d4 <racs_services__srv__Control_Response__Sequence__init+0x1c>
 80130c0:	460d      	mov	r5, r1
 80130c2:	a801      	add	r0, sp, #4
 80130c4:	f7fa fa30 	bl	800d528 <rcutils_get_default_allocator>
 80130c8:	b935      	cbnz	r5, 80130d8 <racs_services__srv__Control_Response__Sequence__init+0x20>
 80130ca:	462b      	mov	r3, r5
 80130cc:	2001      	movs	r0, #1
 80130ce:	60a5      	str	r5, [r4, #8]
 80130d0:	e9c4 3500 	strd	r3, r5, [r4]
 80130d4:	b007      	add	sp, #28
 80130d6:	bd30      	pop	{r4, r5, pc}
 80130d8:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80130dc:	2101      	movs	r1, #1
 80130de:	4628      	mov	r0, r5
 80130e0:	4798      	blx	r3
 80130e2:	4603      	mov	r3, r0
 80130e4:	2800      	cmp	r0, #0
 80130e6:	d1f1      	bne.n	80130cc <racs_services__srv__Control_Response__Sequence__init+0x14>
 80130e8:	e7f4      	b.n	80130d4 <racs_services__srv__Control_Response__Sequence__init+0x1c>
 80130ea:	bf00      	nop

080130ec <racs_services__srv__Control_Response__Sequence__fini>:
 80130ec:	b180      	cbz	r0, 8013110 <racs_services__srv__Control_Response__Sequence__fini+0x24>
 80130ee:	b510      	push	{r4, lr}
 80130f0:	b086      	sub	sp, #24
 80130f2:	4604      	mov	r4, r0
 80130f4:	a801      	add	r0, sp, #4
 80130f6:	f7fa fa17 	bl	800d528 <rcutils_get_default_allocator>
 80130fa:	6820      	ldr	r0, [r4, #0]
 80130fc:	b130      	cbz	r0, 801310c <racs_services__srv__Control_Response__Sequence__fini+0x20>
 80130fe:	9b02      	ldr	r3, [sp, #8]
 8013100:	9905      	ldr	r1, [sp, #20]
 8013102:	4798      	blx	r3
 8013104:	2300      	movs	r3, #0
 8013106:	e9c4 3300 	strd	r3, r3, [r4]
 801310a:	60a3      	str	r3, [r4, #8]
 801310c:	b006      	add	sp, #24
 801310e:	bd10      	pop	{r4, pc}
 8013110:	4770      	bx	lr
 8013112:	bf00      	nop

08013114 <racs_services__srv__Control_Event__init>:
 8013114:	b570      	push	{r4, r5, r6, lr}
 8013116:	4604      	mov	r4, r0
 8013118:	b086      	sub	sp, #24
 801311a:	b1c8      	cbz	r0, 8013150 <racs_services__srv__Control_Event__init+0x3c>
 801311c:	f005 fc2e 	bl	801897c <service_msgs__msg__ServiceEventInfo__init>
 8013120:	4605      	mov	r5, r0
 8013122:	b178      	cbz	r0, 8013144 <racs_services__srv__Control_Event__init+0x30>
 8013124:	2600      	movs	r6, #0
 8013126:	a801      	add	r0, sp, #4
 8013128:	f7fa f9fe 	bl	800d528 <rcutils_get_default_allocator>
 801312c:	a801      	add	r0, sp, #4
 801312e:	6326      	str	r6, [r4, #48]	; 0x30
 8013130:	e9c4 660a 	strd	r6, r6, [r4, #40]	; 0x28
 8013134:	f7fa f9f8 	bl	800d528 <rcutils_get_default_allocator>
 8013138:	4628      	mov	r0, r5
 801313a:	63e6      	str	r6, [r4, #60]	; 0x3c
 801313c:	e9c4 660d 	strd	r6, r6, [r4, #52]	; 0x34
 8013140:	b006      	add	sp, #24
 8013142:	bd70      	pop	{r4, r5, r6, pc}
 8013144:	4620      	mov	r0, r4
 8013146:	f7ff ff43 	bl	8012fd0 <racs_services__srv__Control_Event__fini.part.0>
 801314a:	4628      	mov	r0, r5
 801314c:	b006      	add	sp, #24
 801314e:	bd70      	pop	{r4, r5, r6, pc}
 8013150:	4605      	mov	r5, r0
 8013152:	4628      	mov	r0, r5
 8013154:	b006      	add	sp, #24
 8013156:	bd70      	pop	{r4, r5, r6, pc}

08013158 <racs_services__srv__Control_Event__fini>:
 8013158:	b1f0      	cbz	r0, 8013198 <racs_services__srv__Control_Event__fini+0x40>
 801315a:	b510      	push	{r4, lr}
 801315c:	b086      	sub	sp, #24
 801315e:	4604      	mov	r4, r0
 8013160:	f005 fc1e 	bl	80189a0 <service_msgs__msg__ServiceEventInfo__fini>
 8013164:	a801      	add	r0, sp, #4
 8013166:	f7fa f9df 	bl	800d528 <rcutils_get_default_allocator>
 801316a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801316c:	b130      	cbz	r0, 801317c <racs_services__srv__Control_Event__fini+0x24>
 801316e:	9b02      	ldr	r3, [sp, #8]
 8013170:	9905      	ldr	r1, [sp, #20]
 8013172:	4798      	blx	r3
 8013174:	2300      	movs	r3, #0
 8013176:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 801317a:	6323      	str	r3, [r4, #48]	; 0x30
 801317c:	a801      	add	r0, sp, #4
 801317e:	f7fa f9d3 	bl	800d528 <rcutils_get_default_allocator>
 8013182:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8013184:	b130      	cbz	r0, 8013194 <racs_services__srv__Control_Event__fini+0x3c>
 8013186:	9b02      	ldr	r3, [sp, #8]
 8013188:	9905      	ldr	r1, [sp, #20]
 801318a:	4798      	blx	r3
 801318c:	2300      	movs	r3, #0
 801318e:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8013192:	63e3      	str	r3, [r4, #60]	; 0x3c
 8013194:	b006      	add	sp, #24
 8013196:	bd10      	pop	{r4, pc}
 8013198:	4770      	bx	lr
 801319a:	bf00      	nop

0801319c <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control>:
 801319c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131a0:	2900      	cmp	r1, #0
 80131a2:	d04d      	beq.n	8013240 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0xa4>
 80131a4:	4605      	mov	r5, r0
 80131a6:	2800      	cmp	r0, #0
 80131a8:	d04a      	beq.n	8013240 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0xa4>
 80131aa:	460e      	mov	r6, r1
 80131ac:	4698      	mov	r8, r3
 80131ae:	2040      	movs	r0, #64	; 0x40
 80131b0:	680b      	ldr	r3, [r1, #0]
 80131b2:	6909      	ldr	r1, [r1, #16]
 80131b4:	4617      	mov	r7, r2
 80131b6:	4798      	blx	r3
 80131b8:	4604      	mov	r4, r0
 80131ba:	f7ff ffab 	bl	8013114 <racs_services__srv__Control_Event__init>
 80131be:	4684      	mov	ip, r0
 80131c0:	b370      	cbz	r0, 8013220 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x84>
 80131c2:	782b      	ldrb	r3, [r5, #0]
 80131c4:	7023      	strb	r3, [r4, #0]
 80131c6:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 80131ca:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 80131ce:	e9c4 2301 	strd	r2, r3, [r4, #4]
 80131d2:	e9c4 0108 	strd	r0, r1, [r4, #32]
 80131d6:	68e8      	ldr	r0, [r5, #12]
 80131d8:	6929      	ldr	r1, [r5, #16]
 80131da:	696a      	ldr	r2, [r5, #20]
 80131dc:	69ab      	ldr	r3, [r5, #24]
 80131de:	60e0      	str	r0, [r4, #12]
 80131e0:	6121      	str	r1, [r4, #16]
 80131e2:	6162      	str	r2, [r4, #20]
 80131e4:	61a3      	str	r3, [r4, #24]
 80131e6:	b157      	cbz	r7, 80131fe <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x62>
 80131e8:	2101      	movs	r1, #1
 80131ea:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80131ee:	f7ff ff27 	bl	8013040 <racs_services__srv__Control_Request__Sequence__init>
 80131f2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80131f4:	4638      	mov	r0, r7
 80131f6:	f7ff ff11 	bl	801301c <racs_services__srv__Control_Request__copy>
 80131fa:	4603      	mov	r3, r0
 80131fc:	b1c0      	cbz	r0, 8013230 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x94>
 80131fe:	f1b8 0f00 	cmp.w	r8, #0
 8013202:	d00a      	beq.n	801321a <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x7e>
 8013204:	2101      	movs	r1, #1
 8013206:	f104 0034 	add.w	r0, r4, #52	; 0x34
 801320a:	f7ff ff55 	bl	80130b8 <racs_services__srv__Control_Response__Sequence__init>
 801320e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013210:	4640      	mov	r0, r8
 8013212:	f7ff ff49 	bl	80130a8 <racs_services__srv__Control_Response__copy>
 8013216:	4603      	mov	r3, r0
 8013218:	b150      	cbz	r0, 8013230 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x94>
 801321a:	4620      	mov	r0, r4
 801321c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013220:	4620      	mov	r0, r4
 8013222:	4664      	mov	r4, ip
 8013224:	6873      	ldr	r3, [r6, #4]
 8013226:	6931      	ldr	r1, [r6, #16]
 8013228:	4798      	blx	r3
 801322a:	4620      	mov	r0, r4
 801322c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013230:	4620      	mov	r0, r4
 8013232:	461c      	mov	r4, r3
 8013234:	6872      	ldr	r2, [r6, #4]
 8013236:	6931      	ldr	r1, [r6, #16]
 8013238:	4790      	blx	r2
 801323a:	4620      	mov	r0, r4
 801323c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013240:	2400      	movs	r4, #0
 8013242:	4620      	mov	r0, r4
 8013244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013248 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control>:
 8013248:	b1b9      	cbz	r1, 801327a <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x32>
 801324a:	b538      	push	{r3, r4, r5, lr}
 801324c:	4605      	mov	r5, r0
 801324e:	b190      	cbz	r0, 8013276 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x2e>
 8013250:	460c      	mov	r4, r1
 8013252:	f7ff ff81 	bl	8013158 <racs_services__srv__Control_Event__fini>
 8013256:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8013258:	b110      	cbz	r0, 8013260 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x18>
 801325a:	6863      	ldr	r3, [r4, #4]
 801325c:	6921      	ldr	r1, [r4, #16]
 801325e:	4798      	blx	r3
 8013260:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8013262:	b110      	cbz	r0, 801326a <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x22>
 8013264:	6863      	ldr	r3, [r4, #4]
 8013266:	6921      	ldr	r1, [r4, #16]
 8013268:	4798      	blx	r3
 801326a:	4628      	mov	r0, r5
 801326c:	6863      	ldr	r3, [r4, #4]
 801326e:	6921      	ldr	r1, [r4, #16]
 8013270:	4798      	blx	r3
 8013272:	2001      	movs	r0, #1
 8013274:	bd38      	pop	{r3, r4, r5, pc}
 8013276:	2000      	movs	r0, #0
 8013278:	bd38      	pop	{r3, r4, r5, pc}
 801327a:	2000      	movs	r0, #0
 801327c:	4770      	bx	lr
 801327e:	bf00      	nop

08013280 <racs_services__msg__Feedback__get_type_hash>:
 8013280:	4800      	ldr	r0, [pc, #0]	; (8013284 <racs_services__msg__Feedback__get_type_hash+0x4>)
 8013282:	4770      	bx	lr
 8013284:	2000110c 	.word	0x2000110c

08013288 <racs_services__msg__Feedback__get_type_description>:
 8013288:	4b03      	ldr	r3, [pc, #12]	; (8013298 <racs_services__msg__Feedback__get_type_description+0x10>)
 801328a:	781a      	ldrb	r2, [r3, #0]
 801328c:	b90a      	cbnz	r2, 8013292 <racs_services__msg__Feedback__get_type_description+0xa>
 801328e:	2201      	movs	r2, #1
 8013290:	701a      	strb	r2, [r3, #0]
 8013292:	4802      	ldr	r0, [pc, #8]	; (801329c <racs_services__msg__Feedback__get_type_description+0x14>)
 8013294:	4770      	bx	lr
 8013296:	bf00      	nop
 8013298:	200103a9 	.word	0x200103a9
 801329c:	0801d808 	.word	0x0801d808

080132a0 <racs_services__msg__Feedback__get_type_description_sources>:
 80132a0:	4b09      	ldr	r3, [pc, #36]	; (80132c8 <racs_services__msg__Feedback__get_type_description_sources+0x28>)
 80132a2:	781a      	ldrb	r2, [r3, #0]
 80132a4:	b96a      	cbnz	r2, 80132c2 <racs_services__msg__Feedback__get_type_description_sources+0x22>
 80132a6:	2201      	movs	r2, #1
 80132a8:	b430      	push	{r4, r5}
 80132aa:	4d08      	ldr	r5, [pc, #32]	; (80132cc <racs_services__msg__Feedback__get_type_description_sources+0x2c>)
 80132ac:	4c08      	ldr	r4, [pc, #32]	; (80132d0 <racs_services__msg__Feedback__get_type_description_sources+0x30>)
 80132ae:	701a      	strb	r2, [r3, #0]
 80132b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80132b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80132b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80132b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80132b8:	682b      	ldr	r3, [r5, #0]
 80132ba:	4806      	ldr	r0, [pc, #24]	; (80132d4 <racs_services__msg__Feedback__get_type_description_sources+0x34>)
 80132bc:	6023      	str	r3, [r4, #0]
 80132be:	bc30      	pop	{r4, r5}
 80132c0:	4770      	bx	lr
 80132c2:	4804      	ldr	r0, [pc, #16]	; (80132d4 <racs_services__msg__Feedback__get_type_description_sources+0x34>)
 80132c4:	4770      	bx	lr
 80132c6:	bf00      	nop
 80132c8:	200103a8 	.word	0x200103a8
 80132cc:	0801d82c 	.word	0x0801d82c
 80132d0:	200103ac 	.word	0x200103ac
 80132d4:	0801d850 	.word	0x0801d850

080132d8 <racs_services__msg__Feedback__init>:
 80132d8:	3800      	subs	r0, #0
 80132da:	bf18      	it	ne
 80132dc:	2001      	movne	r0, #1
 80132de:	4770      	bx	lr

080132e0 <racs_services__msg__Feedback__fini>:
 80132e0:	4770      	bx	lr
 80132e2:	bf00      	nop

080132e4 <racs_services__srv__Setup_Event__get_type_description.part.0>:
 80132e4:	b510      	push	{r4, lr}
 80132e6:	2000      	movs	r0, #0
 80132e8:	4c13      	ldr	r4, [pc, #76]	; (8013338 <racs_services__srv__Setup_Event__get_type_description.part.0+0x54>)
 80132ea:	f005 fb63 	bl	80189b4 <builtin_interfaces__msg__Time__get_type_description>
 80132ee:	300c      	adds	r0, #12
 80132f0:	4b12      	ldr	r3, [pc, #72]	; (801333c <racs_services__srv__Setup_Event__get_type_description.part.0+0x58>)
 80132f2:	c807      	ldmia	r0, {r0, r1, r2}
 80132f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80132f8:	7823      	ldrb	r3, [r4, #0]
 80132fa:	b90b      	cbnz	r3, 8013300 <racs_services__srv__Setup_Event__get_type_description.part.0+0x1c>
 80132fc:	2301      	movs	r3, #1
 80132fe:	7023      	strb	r3, [r4, #0]
 8013300:	4a0f      	ldr	r2, [pc, #60]	; (8013340 <racs_services__srv__Setup_Event__get_type_description.part.0+0x5c>)
 8013302:	4b10      	ldr	r3, [pc, #64]	; (8013344 <racs_services__srv__Setup_Event__get_type_description.part.0+0x60>)
 8013304:	4c10      	ldr	r4, [pc, #64]	; (8013348 <racs_services__srv__Setup_Event__get_type_description.part.0+0x64>)
 8013306:	ca07      	ldmia	r2, {r0, r1, r2}
 8013308:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801330c:	7823      	ldrb	r3, [r4, #0]
 801330e:	b90b      	cbnz	r3, 8013314 <racs_services__srv__Setup_Event__get_type_description.part.0+0x30>
 8013310:	2301      	movs	r3, #1
 8013312:	7023      	strb	r3, [r4, #0]
 8013314:	4b0d      	ldr	r3, [pc, #52]	; (801334c <racs_services__srv__Setup_Event__get_type_description.part.0+0x68>)
 8013316:	4c0e      	ldr	r4, [pc, #56]	; (8013350 <racs_services__srv__Setup_Event__get_type_description.part.0+0x6c>)
 8013318:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801331c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013320:	2000      	movs	r0, #0
 8013322:	3418      	adds	r4, #24
 8013324:	f005 fae6 	bl	80188f4 <service_msgs__msg__ServiceEventInfo__get_type_description>
 8013328:	300c      	adds	r0, #12
 801332a:	4b0a      	ldr	r3, [pc, #40]	; (8013354 <racs_services__srv__Setup_Event__get_type_description.part.0+0x70>)
 801332c:	c807      	ldmia	r0, {r0, r1, r2}
 801332e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013332:	2201      	movs	r2, #1
 8013334:	701a      	strb	r2, [r3, #0]
 8013336:	bd10      	pop	{r4, pc}
 8013338:	200103d4 	.word	0x200103d4
 801333c:	200013d8 	.word	0x200013d8
 8013340:	0801d8b0 	.word	0x0801d8b0
 8013344:	200013f0 	.word	0x200013f0
 8013348:	200103d2 	.word	0x200103d2
 801334c:	0801d88c 	.word	0x0801d88c
 8013350:	20001408 	.word	0x20001408
 8013354:	200103d1 	.word	0x200103d1

08013358 <racs_services__srv__Setup__get_type_hash>:
 8013358:	4800      	ldr	r0, [pc, #0]	; (801335c <racs_services__srv__Setup__get_type_hash+0x4>)
 801335a:	4770      	bx	lr
 801335c:	200012a8 	.word	0x200012a8

08013360 <racs_services__srv__Setup_Request__get_type_hash>:
 8013360:	4800      	ldr	r0, [pc, #0]	; (8013364 <racs_services__srv__Setup_Request__get_type_hash+0x4>)
 8013362:	4770      	bx	lr
 8013364:	20001284 	.word	0x20001284

08013368 <racs_services__srv__Setup_Response__get_type_hash>:
 8013368:	4800      	ldr	r0, [pc, #0]	; (801336c <racs_services__srv__Setup_Response__get_type_hash+0x4>)
 801336a:	4770      	bx	lr
 801336c:	20001260 	.word	0x20001260

08013370 <racs_services__srv__Setup_Event__get_type_hash>:
 8013370:	4800      	ldr	r0, [pc, #0]	; (8013374 <racs_services__srv__Setup_Event__get_type_hash+0x4>)
 8013372:	4770      	bx	lr
 8013374:	2000123c 	.word	0x2000123c

08013378 <racs_services__srv__Setup__get_type_description>:
 8013378:	b538      	push	{r3, r4, r5, lr}
 801337a:	4d1c      	ldr	r5, [pc, #112]	; (80133ec <racs_services__srv__Setup__get_type_description+0x74>)
 801337c:	7828      	ldrb	r0, [r5, #0]
 801337e:	b108      	cbz	r0, 8013384 <racs_services__srv__Setup__get_type_description+0xc>
 8013380:	481b      	ldr	r0, [pc, #108]	; (80133f0 <racs_services__srv__Setup__get_type_description+0x78>)
 8013382:	bd38      	pop	{r3, r4, r5, pc}
 8013384:	f005 fb16 	bl	80189b4 <builtin_interfaces__msg__Time__get_type_description>
 8013388:	300c      	adds	r0, #12
 801338a:	4b1a      	ldr	r3, [pc, #104]	; (80133f4 <racs_services__srv__Setup__get_type_description+0x7c>)
 801338c:	c807      	ldmia	r0, {r0, r1, r2}
 801338e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013392:	4b19      	ldr	r3, [pc, #100]	; (80133f8 <racs_services__srv__Setup__get_type_description+0x80>)
 8013394:	781b      	ldrb	r3, [r3, #0]
 8013396:	b32b      	cbz	r3, 80133e4 <racs_services__srv__Setup__get_type_description+0x6c>
 8013398:	4a18      	ldr	r2, [pc, #96]	; (80133fc <racs_services__srv__Setup__get_type_description+0x84>)
 801339a:	4b19      	ldr	r3, [pc, #100]	; (8013400 <racs_services__srv__Setup__get_type_description+0x88>)
 801339c:	4c19      	ldr	r4, [pc, #100]	; (8013404 <racs_services__srv__Setup__get_type_description+0x8c>)
 801339e:	ca07      	ldmia	r2, {r0, r1, r2}
 80133a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80133a4:	7823      	ldrb	r3, [r4, #0]
 80133a6:	b90b      	cbnz	r3, 80133ac <racs_services__srv__Setup__get_type_description+0x34>
 80133a8:	2301      	movs	r3, #1
 80133aa:	7023      	strb	r3, [r4, #0]
 80133ac:	4a16      	ldr	r2, [pc, #88]	; (8013408 <racs_services__srv__Setup__get_type_description+0x90>)
 80133ae:	4b17      	ldr	r3, [pc, #92]	; (801340c <racs_services__srv__Setup__get_type_description+0x94>)
 80133b0:	4c17      	ldr	r4, [pc, #92]	; (8013410 <racs_services__srv__Setup__get_type_description+0x98>)
 80133b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80133b4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80133b8:	7823      	ldrb	r3, [r4, #0]
 80133ba:	b90b      	cbnz	r3, 80133c0 <racs_services__srv__Setup__get_type_description+0x48>
 80133bc:	2301      	movs	r3, #1
 80133be:	7023      	strb	r3, [r4, #0]
 80133c0:	4b14      	ldr	r3, [pc, #80]	; (8013414 <racs_services__srv__Setup__get_type_description+0x9c>)
 80133c2:	4c15      	ldr	r4, [pc, #84]	; (8013418 <racs_services__srv__Setup__get_type_description+0xa0>)
 80133c4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80133c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80133cc:	2000      	movs	r0, #0
 80133ce:	3418      	adds	r4, #24
 80133d0:	f005 fa90 	bl	80188f4 <service_msgs__msg__ServiceEventInfo__get_type_description>
 80133d4:	300c      	adds	r0, #12
 80133d6:	2301      	movs	r3, #1
 80133d8:	c807      	ldmia	r0, {r0, r1, r2}
 80133da:	702b      	strb	r3, [r5, #0]
 80133dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80133e0:	4803      	ldr	r0, [pc, #12]	; (80133f0 <racs_services__srv__Setup__get_type_description+0x78>)
 80133e2:	bd38      	pop	{r3, r4, r5, pc}
 80133e4:	f7ff ff7e 	bl	80132e4 <racs_services__srv__Setup_Event__get_type_description.part.0>
 80133e8:	e7d6      	b.n	8013398 <racs_services__srv__Setup__get_type_description+0x20>
 80133ea:	bf00      	nop
 80133ec:	200103d5 	.word	0x200103d5
 80133f0:	0801d8c8 	.word	0x0801d8c8
 80133f4:	20001820 	.word	0x20001820
 80133f8:	200103d1 	.word	0x200103d1
 80133fc:	0801d868 	.word	0x0801d868
 8013400:	20001838 	.word	0x20001838
 8013404:	200103d4 	.word	0x200103d4
 8013408:	0801d8b0 	.word	0x0801d8b0
 801340c:	20001850 	.word	0x20001850
 8013410:	200103d2 	.word	0x200103d2
 8013414:	0801d88c 	.word	0x0801d88c
 8013418:	20001868 	.word	0x20001868

0801341c <racs_services__srv__Setup_Request__get_type_description>:
 801341c:	4b03      	ldr	r3, [pc, #12]	; (801342c <racs_services__srv__Setup_Request__get_type_description+0x10>)
 801341e:	781a      	ldrb	r2, [r3, #0]
 8013420:	b90a      	cbnz	r2, 8013426 <racs_services__srv__Setup_Request__get_type_description+0xa>
 8013422:	2201      	movs	r2, #1
 8013424:	701a      	strb	r2, [r3, #0]
 8013426:	4802      	ldr	r0, [pc, #8]	; (8013430 <racs_services__srv__Setup_Request__get_type_description+0x14>)
 8013428:	4770      	bx	lr
 801342a:	bf00      	nop
 801342c:	200103d4 	.word	0x200103d4
 8013430:	0801d8a4 	.word	0x0801d8a4

08013434 <racs_services__srv__Setup_Response__get_type_description>:
 8013434:	4b03      	ldr	r3, [pc, #12]	; (8013444 <racs_services__srv__Setup_Response__get_type_description+0x10>)
 8013436:	781a      	ldrb	r2, [r3, #0]
 8013438:	b90a      	cbnz	r2, 801343e <racs_services__srv__Setup_Response__get_type_description+0xa>
 801343a:	2201      	movs	r2, #1
 801343c:	701a      	strb	r2, [r3, #0]
 801343e:	4802      	ldr	r0, [pc, #8]	; (8013448 <racs_services__srv__Setup_Response__get_type_description+0x14>)
 8013440:	4770      	bx	lr
 8013442:	bf00      	nop
 8013444:	200103d2 	.word	0x200103d2
 8013448:	0801d880 	.word	0x0801d880

0801344c <racs_services__srv__Setup_Event__get_type_description>:
 801344c:	b508      	push	{r3, lr}
 801344e:	4b04      	ldr	r3, [pc, #16]	; (8013460 <racs_services__srv__Setup_Event__get_type_description+0x14>)
 8013450:	781b      	ldrb	r3, [r3, #0]
 8013452:	b10b      	cbz	r3, 8013458 <racs_services__srv__Setup_Event__get_type_description+0xc>
 8013454:	4803      	ldr	r0, [pc, #12]	; (8013464 <racs_services__srv__Setup_Event__get_type_description+0x18>)
 8013456:	bd08      	pop	{r3, pc}
 8013458:	f7ff ff44 	bl	80132e4 <racs_services__srv__Setup_Event__get_type_description.part.0>
 801345c:	4801      	ldr	r0, [pc, #4]	; (8013464 <racs_services__srv__Setup_Event__get_type_description+0x18>)
 801345e:	bd08      	pop	{r3, pc}
 8013460:	200103d1 	.word	0x200103d1
 8013464:	0801d85c 	.word	0x0801d85c

08013468 <racs_services__srv__Setup__get_type_description_sources>:
 8013468:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801346c:	4b2c      	ldr	r3, [pc, #176]	; (8013520 <racs_services__srv__Setup__get_type_description_sources+0xb8>)
 801346e:	f893 9000 	ldrb.w	r9, [r3]
 8013472:	f1b9 0f00 	cmp.w	r9, #0
 8013476:	d002      	beq.n	801347e <racs_services__srv__Setup__get_type_description_sources+0x16>
 8013478:	482a      	ldr	r0, [pc, #168]	; (8013524 <racs_services__srv__Setup__get_type_description_sources+0xbc>)
 801347a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801347e:	4d2a      	ldr	r5, [pc, #168]	; (8013528 <racs_services__srv__Setup__get_type_description_sources+0xc0>)
 8013480:	4c2a      	ldr	r4, [pc, #168]	; (801352c <racs_services__srv__Setup__get_type_description_sources+0xc4>)
 8013482:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8013534 <racs_services__srv__Setup__get_type_description_sources+0xcc>
 8013486:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8013538 <racs_services__srv__Setup__get_type_description_sources+0xd0>
 801348a:	4e29      	ldr	r6, [pc, #164]	; (8013530 <racs_services__srv__Setup__get_type_description_sources+0xc8>)
 801348c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801348e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013490:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013492:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013494:	682b      	ldr	r3, [r5, #0]
 8013496:	4625      	mov	r5, r4
 8013498:	4648      	mov	r0, r9
 801349a:	f104 0a28 	add.w	sl, r4, #40	; 0x28
 801349e:	f845 3b04 	str.w	r3, [r5], #4
 80134a2:	f104 074c 	add.w	r7, r4, #76	; 0x4c
 80134a6:	f005 fa91 	bl	80189cc <builtin_interfaces__msg__Time__get_individual_type_description_source>
 80134aa:	4684      	mov	ip, r0
 80134ac:	f104 0e70 	add.w	lr, r4, #112	; 0x70
 80134b0:	3494      	adds	r4, #148	; 0x94
 80134b2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80134b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80134b8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80134bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80134be:	f8dc 3000 	ldr.w	r3, [ip]
 80134c2:	602b      	str	r3, [r5, #0]
 80134c4:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 80134c8:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 80134cc:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 80134d0:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 80134d4:	f8db 3000 	ldr.w	r3, [fp]
 80134d8:	f8ca 3000 	str.w	r3, [sl]
 80134dc:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 80134e0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80134e2:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 80134e6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80134e8:	f8d8 3000 	ldr.w	r3, [r8]
 80134ec:	603b      	str	r3, [r7, #0]
 80134ee:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80134f0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80134f4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80134f6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80134fa:	6833      	ldr	r3, [r6, #0]
 80134fc:	4648      	mov	r0, r9
 80134fe:	f8ce 3000 	str.w	r3, [lr]
 8013502:	f005 fa0f 	bl	8018924 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 8013506:	2301      	movs	r3, #1
 8013508:	4a05      	ldr	r2, [pc, #20]	; (8013520 <racs_services__srv__Setup__get_type_description_sources+0xb8>)
 801350a:	4605      	mov	r5, r0
 801350c:	7013      	strb	r3, [r2, #0]
 801350e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013510:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013512:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013514:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013516:	682b      	ldr	r3, [r5, #0]
 8013518:	4802      	ldr	r0, [pc, #8]	; (8013524 <racs_services__srv__Setup__get_type_description_sources+0xbc>)
 801351a:	6023      	str	r3, [r4, #0]
 801351c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013520:	200103d0 	.word	0x200103d0
 8013524:	0801d9a0 	.word	0x0801d9a0
 8013528:	0801d958 	.word	0x0801d958
 801352c:	2001048c 	.word	0x2001048c
 8013530:	0801d910 	.word	0x0801d910
 8013534:	0801d8ec 	.word	0x0801d8ec
 8013538:	0801d934 	.word	0x0801d934

0801353c <racs_services__srv__Setup_Request__get_type_description_sources>:
 801353c:	4b09      	ldr	r3, [pc, #36]	; (8013564 <racs_services__srv__Setup_Request__get_type_description_sources+0x28>)
 801353e:	781a      	ldrb	r2, [r3, #0]
 8013540:	b96a      	cbnz	r2, 801355e <racs_services__srv__Setup_Request__get_type_description_sources+0x22>
 8013542:	2201      	movs	r2, #1
 8013544:	b430      	push	{r4, r5}
 8013546:	4d08      	ldr	r5, [pc, #32]	; (8013568 <racs_services__srv__Setup_Request__get_type_description_sources+0x2c>)
 8013548:	4c08      	ldr	r4, [pc, #32]	; (801356c <racs_services__srv__Setup_Request__get_type_description_sources+0x30>)
 801354a:	701a      	strb	r2, [r3, #0]
 801354c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801354e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013554:	682b      	ldr	r3, [r5, #0]
 8013556:	4806      	ldr	r0, [pc, #24]	; (8013570 <racs_services__srv__Setup_Request__get_type_description_sources+0x34>)
 8013558:	6023      	str	r3, [r4, #0]
 801355a:	bc30      	pop	{r4, r5}
 801355c:	4770      	bx	lr
 801355e:	4804      	ldr	r0, [pc, #16]	; (8013570 <racs_services__srv__Setup_Request__get_type_description_sources+0x34>)
 8013560:	4770      	bx	lr
 8013562:	bf00      	nop
 8013564:	200103d7 	.word	0x200103d7
 8013568:	0801d934 	.word	0x0801d934
 801356c:	20010588 	.word	0x20010588
 8013570:	0801d994 	.word	0x0801d994

08013574 <racs_services__srv__Setup_Response__get_type_description_sources>:
 8013574:	4b09      	ldr	r3, [pc, #36]	; (801359c <racs_services__srv__Setup_Response__get_type_description_sources+0x28>)
 8013576:	781a      	ldrb	r2, [r3, #0]
 8013578:	b96a      	cbnz	r2, 8013596 <racs_services__srv__Setup_Response__get_type_description_sources+0x22>
 801357a:	2201      	movs	r2, #1
 801357c:	b430      	push	{r4, r5}
 801357e:	4d08      	ldr	r5, [pc, #32]	; (80135a0 <racs_services__srv__Setup_Response__get_type_description_sources+0x2c>)
 8013580:	4c08      	ldr	r4, [pc, #32]	; (80135a4 <racs_services__srv__Setup_Response__get_type_description_sources+0x30>)
 8013582:	701a      	strb	r2, [r3, #0]
 8013584:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013586:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013588:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801358a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801358c:	682b      	ldr	r3, [r5, #0]
 801358e:	4806      	ldr	r0, [pc, #24]	; (80135a8 <racs_services__srv__Setup_Response__get_type_description_sources+0x34>)
 8013590:	6023      	str	r3, [r4, #0]
 8013592:	bc30      	pop	{r4, r5}
 8013594:	4770      	bx	lr
 8013596:	4804      	ldr	r0, [pc, #16]	; (80135a8 <racs_services__srv__Setup_Response__get_type_description_sources+0x34>)
 8013598:	4770      	bx	lr
 801359a:	bf00      	nop
 801359c:	200103d6 	.word	0x200103d6
 80135a0:	0801d910 	.word	0x0801d910
 80135a4:	20010564 	.word	0x20010564
 80135a8:	0801d988 	.word	0x0801d988

080135ac <racs_services__srv__Setup_Event__get_type_description_sources>:
 80135ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80135b0:	4e27      	ldr	r6, [pc, #156]	; (8013650 <racs_services__srv__Setup_Event__get_type_description_sources+0xa4>)
 80135b2:	f896 8000 	ldrb.w	r8, [r6]
 80135b6:	f1b8 0f00 	cmp.w	r8, #0
 80135ba:	d002      	beq.n	80135c2 <racs_services__srv__Setup_Event__get_type_description_sources+0x16>
 80135bc:	4825      	ldr	r0, [pc, #148]	; (8013654 <racs_services__srv__Setup_Event__get_type_description_sources+0xa8>)
 80135be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135c2:	4d25      	ldr	r5, [pc, #148]	; (8013658 <racs_services__srv__Setup_Event__get_type_description_sources+0xac>)
 80135c4:	4c25      	ldr	r4, [pc, #148]	; (801365c <racs_services__srv__Setup_Event__get_type_description_sources+0xb0>)
 80135c6:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8013664 <racs_services__srv__Setup_Event__get_type_description_sources+0xb8>
 80135ca:	4f25      	ldr	r7, [pc, #148]	; (8013660 <racs_services__srv__Setup_Event__get_type_description_sources+0xb4>)
 80135cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80135ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80135d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80135d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80135d4:	682b      	ldr	r3, [r5, #0]
 80135d6:	4625      	mov	r5, r4
 80135d8:	4640      	mov	r0, r8
 80135da:	f104 0928 	add.w	r9, r4, #40	; 0x28
 80135de:	f845 3b04 	str.w	r3, [r5], #4
 80135e2:	f005 f9f3 	bl	80189cc <builtin_interfaces__msg__Time__get_individual_type_description_source>
 80135e6:	4684      	mov	ip, r0
 80135e8:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 80135ec:	3470      	adds	r4, #112	; 0x70
 80135ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80135f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80135f4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80135f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80135fa:	f8dc 3000 	ldr.w	r3, [ip]
 80135fe:	602b      	str	r3, [r5, #0]
 8013600:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 8013604:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8013608:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 801360c:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8013610:	f8da 3000 	ldr.w	r3, [sl]
 8013614:	f8c9 3000 	str.w	r3, [r9]
 8013618:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801361a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801361e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013620:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013624:	683b      	ldr	r3, [r7, #0]
 8013626:	4640      	mov	r0, r8
 8013628:	f8ce 3000 	str.w	r3, [lr]
 801362c:	f005 f97a 	bl	8018924 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 8013630:	2301      	movs	r3, #1
 8013632:	4684      	mov	ip, r0
 8013634:	7033      	strb	r3, [r6, #0]
 8013636:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801363a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801363c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013640:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013642:	f8dc 3000 	ldr.w	r3, [ip]
 8013646:	4803      	ldr	r0, [pc, #12]	; (8013654 <racs_services__srv__Setup_Event__get_type_description_sources+0xa8>)
 8013648:	6023      	str	r3, [r4, #0]
 801364a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801364e:	bf00      	nop
 8013650:	200103d3 	.word	0x200103d3
 8013654:	0801d97c 	.word	0x0801d97c
 8013658:	0801d8ec 	.word	0x0801d8ec
 801365c:	200103d8 	.word	0x200103d8
 8013660:	0801d910 	.word	0x0801d910
 8013664:	0801d934 	.word	0x0801d934

08013668 <racs_services__srv__Setup_Event__fini.part.0>:
 8013668:	b510      	push	{r4, lr}
 801366a:	b086      	sub	sp, #24
 801366c:	4604      	mov	r4, r0
 801366e:	f005 f997 	bl	80189a0 <service_msgs__msg__ServiceEventInfo__fini>
 8013672:	a801      	add	r0, sp, #4
 8013674:	f7f9 ff58 	bl	800d528 <rcutils_get_default_allocator>
 8013678:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801367a:	b130      	cbz	r0, 801368a <racs_services__srv__Setup_Event__fini.part.0+0x22>
 801367c:	9b02      	ldr	r3, [sp, #8]
 801367e:	9905      	ldr	r1, [sp, #20]
 8013680:	4798      	blx	r3
 8013682:	2300      	movs	r3, #0
 8013684:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8013688:	6323      	str	r3, [r4, #48]	; 0x30
 801368a:	a801      	add	r0, sp, #4
 801368c:	f7f9 ff4c 	bl	800d528 <rcutils_get_default_allocator>
 8013690:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8013692:	b130      	cbz	r0, 80136a2 <racs_services__srv__Setup_Event__fini.part.0+0x3a>
 8013694:	9b02      	ldr	r3, [sp, #8]
 8013696:	9905      	ldr	r1, [sp, #20]
 8013698:	4798      	blx	r3
 801369a:	2300      	movs	r3, #0
 801369c:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 80136a0:	63e3      	str	r3, [r4, #60]	; 0x3c
 80136a2:	b006      	add	sp, #24
 80136a4:	bd10      	pop	{r4, pc}
 80136a6:	bf00      	nop

080136a8 <racs_services__srv__Setup_Request__init>:
 80136a8:	3800      	subs	r0, #0
 80136aa:	bf18      	it	ne
 80136ac:	2001      	movne	r0, #1
 80136ae:	4770      	bx	lr

080136b0 <racs_services__srv__Setup_Request__fini>:
 80136b0:	4770      	bx	lr
 80136b2:	bf00      	nop

080136b4 <racs_services__srv__Setup_Request__copy>:
 80136b4:	4603      	mov	r3, r0
 80136b6:	b1a0      	cbz	r0, 80136e2 <racs_services__srv__Setup_Request__copy+0x2e>
 80136b8:	b199      	cbz	r1, 80136e2 <racs_services__srv__Setup_Request__copy+0x2e>
 80136ba:	7802      	ldrb	r2, [r0, #0]
 80136bc:	2001      	movs	r0, #1
 80136be:	700a      	strb	r2, [r1, #0]
 80136c0:	689a      	ldr	r2, [r3, #8]
 80136c2:	f8d3 c004 	ldr.w	ip, [r3, #4]
 80136c6:	608a      	str	r2, [r1, #8]
 80136c8:	691a      	ldr	r2, [r3, #16]
 80136ca:	f8c1 c004 	str.w	ip, [r1, #4]
 80136ce:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 80136d2:	610a      	str	r2, [r1, #16]
 80136d4:	695a      	ldr	r2, [r3, #20]
 80136d6:	699b      	ldr	r3, [r3, #24]
 80136d8:	f8c1 c00c 	str.w	ip, [r1, #12]
 80136dc:	614a      	str	r2, [r1, #20]
 80136de:	618b      	str	r3, [r1, #24]
 80136e0:	4770      	bx	lr
 80136e2:	2000      	movs	r0, #0
 80136e4:	4770      	bx	lr
 80136e6:	bf00      	nop

080136e8 <racs_services__srv__Setup_Request__Sequence__init>:
 80136e8:	b530      	push	{r4, r5, lr}
 80136ea:	4604      	mov	r4, r0
 80136ec:	b087      	sub	sp, #28
 80136ee:	b148      	cbz	r0, 8013704 <racs_services__srv__Setup_Request__Sequence__init+0x1c>
 80136f0:	460d      	mov	r5, r1
 80136f2:	a801      	add	r0, sp, #4
 80136f4:	f7f9 ff18 	bl	800d528 <rcutils_get_default_allocator>
 80136f8:	b935      	cbnz	r5, 8013708 <racs_services__srv__Setup_Request__Sequence__init+0x20>
 80136fa:	462b      	mov	r3, r5
 80136fc:	2001      	movs	r0, #1
 80136fe:	60a5      	str	r5, [r4, #8]
 8013700:	e9c4 3500 	strd	r3, r5, [r4]
 8013704:	b007      	add	sp, #28
 8013706:	bd30      	pop	{r4, r5, pc}
 8013708:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801370c:	211c      	movs	r1, #28
 801370e:	4628      	mov	r0, r5
 8013710:	4798      	blx	r3
 8013712:	4603      	mov	r3, r0
 8013714:	2800      	cmp	r0, #0
 8013716:	d1f1      	bne.n	80136fc <racs_services__srv__Setup_Request__Sequence__init+0x14>
 8013718:	e7f4      	b.n	8013704 <racs_services__srv__Setup_Request__Sequence__init+0x1c>
 801371a:	bf00      	nop

0801371c <racs_services__srv__Setup_Request__Sequence__fini>:
 801371c:	b180      	cbz	r0, 8013740 <racs_services__srv__Setup_Request__Sequence__fini+0x24>
 801371e:	b510      	push	{r4, lr}
 8013720:	b086      	sub	sp, #24
 8013722:	4604      	mov	r4, r0
 8013724:	a801      	add	r0, sp, #4
 8013726:	f7f9 feff 	bl	800d528 <rcutils_get_default_allocator>
 801372a:	6820      	ldr	r0, [r4, #0]
 801372c:	b130      	cbz	r0, 801373c <racs_services__srv__Setup_Request__Sequence__fini+0x20>
 801372e:	9b02      	ldr	r3, [sp, #8]
 8013730:	9905      	ldr	r1, [sp, #20]
 8013732:	4798      	blx	r3
 8013734:	2300      	movs	r3, #0
 8013736:	e9c4 3300 	strd	r3, r3, [r4]
 801373a:	60a3      	str	r3, [r4, #8]
 801373c:	b006      	add	sp, #24
 801373e:	bd10      	pop	{r4, pc}
 8013740:	4770      	bx	lr
 8013742:	bf00      	nop

08013744 <racs_services__srv__Setup_Response__init>:
 8013744:	3800      	subs	r0, #0
 8013746:	bf18      	it	ne
 8013748:	2001      	movne	r0, #1
 801374a:	4770      	bx	lr

0801374c <racs_services__srv__Setup_Response__fini>:
 801374c:	4770      	bx	lr
 801374e:	bf00      	nop

08013750 <racs_services__srv__Setup_Response__copy>:
 8013750:	b120      	cbz	r0, 801375c <racs_services__srv__Setup_Response__copy+0xc>
 8013752:	b119      	cbz	r1, 801375c <racs_services__srv__Setup_Response__copy+0xc>
 8013754:	7803      	ldrb	r3, [r0, #0]
 8013756:	2001      	movs	r0, #1
 8013758:	700b      	strb	r3, [r1, #0]
 801375a:	4770      	bx	lr
 801375c:	2000      	movs	r0, #0
 801375e:	4770      	bx	lr

08013760 <racs_services__srv__Setup_Response__Sequence__init>:
 8013760:	b530      	push	{r4, r5, lr}
 8013762:	4604      	mov	r4, r0
 8013764:	b087      	sub	sp, #28
 8013766:	b148      	cbz	r0, 801377c <racs_services__srv__Setup_Response__Sequence__init+0x1c>
 8013768:	460d      	mov	r5, r1
 801376a:	a801      	add	r0, sp, #4
 801376c:	f7f9 fedc 	bl	800d528 <rcutils_get_default_allocator>
 8013770:	b935      	cbnz	r5, 8013780 <racs_services__srv__Setup_Response__Sequence__init+0x20>
 8013772:	462b      	mov	r3, r5
 8013774:	2001      	movs	r0, #1
 8013776:	60a5      	str	r5, [r4, #8]
 8013778:	e9c4 3500 	strd	r3, r5, [r4]
 801377c:	b007      	add	sp, #28
 801377e:	bd30      	pop	{r4, r5, pc}
 8013780:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8013784:	2101      	movs	r1, #1
 8013786:	4628      	mov	r0, r5
 8013788:	4798      	blx	r3
 801378a:	4603      	mov	r3, r0
 801378c:	2800      	cmp	r0, #0
 801378e:	d1f1      	bne.n	8013774 <racs_services__srv__Setup_Response__Sequence__init+0x14>
 8013790:	e7f4      	b.n	801377c <racs_services__srv__Setup_Response__Sequence__init+0x1c>
 8013792:	bf00      	nop

08013794 <racs_services__srv__Setup_Response__Sequence__fini>:
 8013794:	b180      	cbz	r0, 80137b8 <racs_services__srv__Setup_Response__Sequence__fini+0x24>
 8013796:	b510      	push	{r4, lr}
 8013798:	b086      	sub	sp, #24
 801379a:	4604      	mov	r4, r0
 801379c:	a801      	add	r0, sp, #4
 801379e:	f7f9 fec3 	bl	800d528 <rcutils_get_default_allocator>
 80137a2:	6820      	ldr	r0, [r4, #0]
 80137a4:	b130      	cbz	r0, 80137b4 <racs_services__srv__Setup_Response__Sequence__fini+0x20>
 80137a6:	9b02      	ldr	r3, [sp, #8]
 80137a8:	9905      	ldr	r1, [sp, #20]
 80137aa:	4798      	blx	r3
 80137ac:	2300      	movs	r3, #0
 80137ae:	e9c4 3300 	strd	r3, r3, [r4]
 80137b2:	60a3      	str	r3, [r4, #8]
 80137b4:	b006      	add	sp, #24
 80137b6:	bd10      	pop	{r4, pc}
 80137b8:	4770      	bx	lr
 80137ba:	bf00      	nop

080137bc <racs_services__srv__Setup_Event__init>:
 80137bc:	b570      	push	{r4, r5, r6, lr}
 80137be:	4604      	mov	r4, r0
 80137c0:	b086      	sub	sp, #24
 80137c2:	b1c8      	cbz	r0, 80137f8 <racs_services__srv__Setup_Event__init+0x3c>
 80137c4:	f005 f8da 	bl	801897c <service_msgs__msg__ServiceEventInfo__init>
 80137c8:	4605      	mov	r5, r0
 80137ca:	b178      	cbz	r0, 80137ec <racs_services__srv__Setup_Event__init+0x30>
 80137cc:	2600      	movs	r6, #0
 80137ce:	a801      	add	r0, sp, #4
 80137d0:	f7f9 feaa 	bl	800d528 <rcutils_get_default_allocator>
 80137d4:	a801      	add	r0, sp, #4
 80137d6:	6326      	str	r6, [r4, #48]	; 0x30
 80137d8:	e9c4 660a 	strd	r6, r6, [r4, #40]	; 0x28
 80137dc:	f7f9 fea4 	bl	800d528 <rcutils_get_default_allocator>
 80137e0:	4628      	mov	r0, r5
 80137e2:	63e6      	str	r6, [r4, #60]	; 0x3c
 80137e4:	e9c4 660d 	strd	r6, r6, [r4, #52]	; 0x34
 80137e8:	b006      	add	sp, #24
 80137ea:	bd70      	pop	{r4, r5, r6, pc}
 80137ec:	4620      	mov	r0, r4
 80137ee:	f7ff ff3b 	bl	8013668 <racs_services__srv__Setup_Event__fini.part.0>
 80137f2:	4628      	mov	r0, r5
 80137f4:	b006      	add	sp, #24
 80137f6:	bd70      	pop	{r4, r5, r6, pc}
 80137f8:	4605      	mov	r5, r0
 80137fa:	4628      	mov	r0, r5
 80137fc:	b006      	add	sp, #24
 80137fe:	bd70      	pop	{r4, r5, r6, pc}

08013800 <racs_services__srv__Setup_Event__fini>:
 8013800:	b1f0      	cbz	r0, 8013840 <racs_services__srv__Setup_Event__fini+0x40>
 8013802:	b510      	push	{r4, lr}
 8013804:	b086      	sub	sp, #24
 8013806:	4604      	mov	r4, r0
 8013808:	f005 f8ca 	bl	80189a0 <service_msgs__msg__ServiceEventInfo__fini>
 801380c:	a801      	add	r0, sp, #4
 801380e:	f7f9 fe8b 	bl	800d528 <rcutils_get_default_allocator>
 8013812:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8013814:	b130      	cbz	r0, 8013824 <racs_services__srv__Setup_Event__fini+0x24>
 8013816:	9b02      	ldr	r3, [sp, #8]
 8013818:	9905      	ldr	r1, [sp, #20]
 801381a:	4798      	blx	r3
 801381c:	2300      	movs	r3, #0
 801381e:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8013822:	6323      	str	r3, [r4, #48]	; 0x30
 8013824:	a801      	add	r0, sp, #4
 8013826:	f7f9 fe7f 	bl	800d528 <rcutils_get_default_allocator>
 801382a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801382c:	b130      	cbz	r0, 801383c <racs_services__srv__Setup_Event__fini+0x3c>
 801382e:	9b02      	ldr	r3, [sp, #8]
 8013830:	9905      	ldr	r1, [sp, #20]
 8013832:	4798      	blx	r3
 8013834:	2300      	movs	r3, #0
 8013836:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 801383a:	63e3      	str	r3, [r4, #60]	; 0x3c
 801383c:	b006      	add	sp, #24
 801383e:	bd10      	pop	{r4, pc}
 8013840:	4770      	bx	lr
 8013842:	bf00      	nop

08013844 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup>:
 8013844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013848:	2900      	cmp	r1, #0
 801384a:	d04d      	beq.n	80138e8 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0xa4>
 801384c:	4605      	mov	r5, r0
 801384e:	2800      	cmp	r0, #0
 8013850:	d04a      	beq.n	80138e8 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0xa4>
 8013852:	460e      	mov	r6, r1
 8013854:	4698      	mov	r8, r3
 8013856:	2040      	movs	r0, #64	; 0x40
 8013858:	680b      	ldr	r3, [r1, #0]
 801385a:	6909      	ldr	r1, [r1, #16]
 801385c:	4617      	mov	r7, r2
 801385e:	4798      	blx	r3
 8013860:	4604      	mov	r4, r0
 8013862:	f7ff ffab 	bl	80137bc <racs_services__srv__Setup_Event__init>
 8013866:	4684      	mov	ip, r0
 8013868:	b370      	cbz	r0, 80138c8 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x84>
 801386a:	782b      	ldrb	r3, [r5, #0]
 801386c:	7023      	strb	r3, [r4, #0]
 801386e:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 8013872:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8013876:	e9c4 2301 	strd	r2, r3, [r4, #4]
 801387a:	e9c4 0108 	strd	r0, r1, [r4, #32]
 801387e:	68e8      	ldr	r0, [r5, #12]
 8013880:	6929      	ldr	r1, [r5, #16]
 8013882:	696a      	ldr	r2, [r5, #20]
 8013884:	69ab      	ldr	r3, [r5, #24]
 8013886:	60e0      	str	r0, [r4, #12]
 8013888:	6121      	str	r1, [r4, #16]
 801388a:	6162      	str	r2, [r4, #20]
 801388c:	61a3      	str	r3, [r4, #24]
 801388e:	b157      	cbz	r7, 80138a6 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x62>
 8013890:	2101      	movs	r1, #1
 8013892:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8013896:	f7ff ff27 	bl	80136e8 <racs_services__srv__Setup_Request__Sequence__init>
 801389a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801389c:	4638      	mov	r0, r7
 801389e:	f7ff ff09 	bl	80136b4 <racs_services__srv__Setup_Request__copy>
 80138a2:	4603      	mov	r3, r0
 80138a4:	b1c0      	cbz	r0, 80138d8 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x94>
 80138a6:	f1b8 0f00 	cmp.w	r8, #0
 80138aa:	d00a      	beq.n	80138c2 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x7e>
 80138ac:	2101      	movs	r1, #1
 80138ae:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80138b2:	f7ff ff55 	bl	8013760 <racs_services__srv__Setup_Response__Sequence__init>
 80138b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80138b8:	4640      	mov	r0, r8
 80138ba:	f7ff ff49 	bl	8013750 <racs_services__srv__Setup_Response__copy>
 80138be:	4603      	mov	r3, r0
 80138c0:	b150      	cbz	r0, 80138d8 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x94>
 80138c2:	4620      	mov	r0, r4
 80138c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138c8:	4620      	mov	r0, r4
 80138ca:	4664      	mov	r4, ip
 80138cc:	6873      	ldr	r3, [r6, #4]
 80138ce:	6931      	ldr	r1, [r6, #16]
 80138d0:	4798      	blx	r3
 80138d2:	4620      	mov	r0, r4
 80138d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138d8:	4620      	mov	r0, r4
 80138da:	461c      	mov	r4, r3
 80138dc:	6872      	ldr	r2, [r6, #4]
 80138de:	6931      	ldr	r1, [r6, #16]
 80138e0:	4790      	blx	r2
 80138e2:	4620      	mov	r0, r4
 80138e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138e8:	2400      	movs	r4, #0
 80138ea:	4620      	mov	r0, r4
 80138ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080138f0 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup>:
 80138f0:	b1b9      	cbz	r1, 8013922 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x32>
 80138f2:	b538      	push	{r3, r4, r5, lr}
 80138f4:	4605      	mov	r5, r0
 80138f6:	b190      	cbz	r0, 801391e <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x2e>
 80138f8:	460c      	mov	r4, r1
 80138fa:	f7ff ff81 	bl	8013800 <racs_services__srv__Setup_Event__fini>
 80138fe:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8013900:	b110      	cbz	r0, 8013908 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x18>
 8013902:	6863      	ldr	r3, [r4, #4]
 8013904:	6921      	ldr	r1, [r4, #16]
 8013906:	4798      	blx	r3
 8013908:	6b68      	ldr	r0, [r5, #52]	; 0x34
 801390a:	b110      	cbz	r0, 8013912 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x22>
 801390c:	6863      	ldr	r3, [r4, #4]
 801390e:	6921      	ldr	r1, [r4, #16]
 8013910:	4798      	blx	r3
 8013912:	4628      	mov	r0, r5
 8013914:	6863      	ldr	r3, [r4, #4]
 8013916:	6921      	ldr	r1, [r4, #16]
 8013918:	4798      	blx	r3
 801391a:	2001      	movs	r0, #1
 801391c:	bd38      	pop	{r3, r4, r5, pc}
 801391e:	2000      	movs	r0, #0
 8013920:	bd38      	pop	{r3, r4, r5, pc}
 8013922:	2000      	movs	r0, #0
 8013924:	4770      	bx	lr
 8013926:	bf00      	nop

08013928 <rcl_client_get_rmw_handle>:
 8013928:	b118      	cbz	r0, 8013932 <rcl_client_get_rmw_handle+0xa>
 801392a:	6800      	ldr	r0, [r0, #0]
 801392c:	b108      	cbz	r0, 8013932 <rcl_client_get_rmw_handle+0xa>
 801392e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8013932:	4770      	bx	lr

08013934 <rcl_send_request>:
 8013934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013936:	b08b      	sub	sp, #44	; 0x2c
 8013938:	b1e8      	cbz	r0, 8013976 <rcl_send_request+0x42>
 801393a:	4604      	mov	r4, r0
 801393c:	6800      	ldr	r0, [r0, #0]
 801393e:	b1d0      	cbz	r0, 8013976 <rcl_send_request+0x42>
 8013940:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8013944:	b1bb      	cbz	r3, 8013976 <rcl_send_request+0x42>
 8013946:	460f      	mov	r7, r1
 8013948:	b1d1      	cbz	r1, 8013980 <rcl_send_request+0x4c>
 801394a:	4615      	mov	r5, r2
 801394c:	b1c2      	cbz	r2, 8013980 <rcl_send_request+0x4c>
 801394e:	2105      	movs	r1, #5
 8013950:	f500 7088 	add.w	r0, r0, #272	; 0x110
 8013954:	f003 f92c 	bl	8016bb0 <__atomic_load_8>
 8013958:	6823      	ldr	r3, [r4, #0]
 801395a:	462a      	mov	r2, r5
 801395c:	e9c5 0100 	strd	r0, r1, [r5]
 8013960:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8013964:	4639      	mov	r1, r7
 8013966:	f004 facd 	bl	8017f04 <rmw_send_request>
 801396a:	4606      	mov	r6, r0
 801396c:	b160      	cbz	r0, 8013988 <rcl_send_request+0x54>
 801396e:	2601      	movs	r6, #1
 8013970:	4630      	mov	r0, r6
 8013972:	b00b      	add	sp, #44	; 0x2c
 8013974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013976:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 801397a:	4630      	mov	r0, r6
 801397c:	b00b      	add	sp, #44	; 0x2c
 801397e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013980:	260b      	movs	r6, #11
 8013982:	4630      	mov	r0, r6
 8013984:	b00b      	add	sp, #44	; 0x2c
 8013986:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013988:	6820      	ldr	r0, [r4, #0]
 801398a:	2305      	movs	r3, #5
 801398c:	f500 7088 	add.w	r0, r0, #272	; 0x110
 8013990:	9300      	str	r3, [sp, #0]
 8013992:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013996:	f003 f977 	bl	8016c88 <__atomic_exchange_8>
 801399a:	6823      	ldr	r3, [r4, #0]
 801399c:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 80139a0:	2a00      	cmp	r2, #0
 80139a2:	d0e5      	beq.n	8013970 <rcl_send_request+0x3c>
 80139a4:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 80139a8:	a905      	add	r1, sp, #20
 80139aa:	f003 fec7 	bl	801773c <rmw_get_gid_for_client>
 80139ae:	b970      	cbnz	r0, 80139ce <rcl_send_request+0x9a>
 80139b0:	6820      	ldr	r0, [r4, #0]
 80139b2:	ab06      	add	r3, sp, #24
 80139b4:	4631      	mov	r1, r6
 80139b6:	463a      	mov	r2, r7
 80139b8:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
 80139bc:	9302      	str	r3, [sp, #8]
 80139be:	e9d5 4500 	ldrd	r4, r5, [r5]
 80139c2:	e9cd 4500 	strd	r4, r5, [sp]
 80139c6:	f001 f843 	bl	8014a50 <rcl_send_service_event_message>
 80139ca:	4606      	mov	r6, r0
 80139cc:	e7d0      	b.n	8013970 <rcl_send_request+0x3c>
 80139ce:	f000 f875 	bl	8013abc <rcl_convert_rmw_ret_to_rcl_ret>
 80139d2:	4606      	mov	r6, r0
 80139d4:	e7cc      	b.n	8013970 <rcl_send_request+0x3c>
 80139d6:	bf00      	nop

080139d8 <rcl_take_response>:
 80139d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80139da:	468e      	mov	lr, r1
 80139dc:	b095      	sub	sp, #84	; 0x54
 80139de:	460c      	mov	r4, r1
 80139e0:	4616      	mov	r6, r2
 80139e2:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 80139e6:	4605      	mov	r5, r0
 80139e8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80139ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80139f0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80139f4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80139f8:	2d00      	cmp	r5, #0
 80139fa:	d042      	beq.n	8013a82 <rcl_take_response+0xaa>
 80139fc:	682b      	ldr	r3, [r5, #0]
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d03f      	beq.n	8013a82 <rcl_take_response+0xaa>
 8013a02:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8013a06:	2800      	cmp	r0, #0
 8013a08:	d03b      	beq.n	8013a82 <rcl_take_response+0xaa>
 8013a0a:	2e00      	cmp	r6, #0
 8013a0c:	d03c      	beq.n	8013a88 <rcl_take_response+0xb0>
 8013a0e:	2300      	movs	r3, #0
 8013a10:	4632      	mov	r2, r6
 8013a12:	a90a      	add	r1, sp, #40	; 0x28
 8013a14:	f88d 3013 	strb.w	r3, [sp, #19]
 8013a18:	f10d 0313 	add.w	r3, sp, #19
 8013a1c:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8013aa0 <rcl_take_response+0xc8>
 8013a20:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8013a24:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8013a28:	f004 fb74 	bl	8018114 <rmw_take_response>
 8013a2c:	4607      	mov	r7, r0
 8013a2e:	bb68      	cbnz	r0, 8013a8c <rcl_take_response+0xb4>
 8013a30:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8013a34:	b363      	cbz	r3, 8013a90 <rcl_take_response+0xb8>
 8013a36:	682b      	ldr	r3, [r5, #0]
 8013a38:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8013a3c:	b19a      	cbz	r2, 8013a66 <rcl_take_response+0x8e>
 8013a3e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8013a42:	a905      	add	r1, sp, #20
 8013a44:	f003 fe7a 	bl	801773c <rmw_get_gid_for_client>
 8013a48:	bb28      	cbnz	r0, 8013a96 <rcl_take_response+0xbe>
 8013a4a:	6829      	ldr	r1, [r5, #0]
 8013a4c:	ab06      	add	r3, sp, #24
 8013a4e:	4632      	mov	r2, r6
 8013a50:	f8d1 0118 	ldr.w	r0, [r1, #280]	; 0x118
 8013a54:	2103      	movs	r1, #3
 8013a56:	9302      	str	r3, [sp, #8]
 8013a58:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8013a5c:	e9cd 6700 	strd	r6, r7, [sp]
 8013a60:	f000 fff6 	bl	8014a50 <rcl_send_service_event_message>
 8013a64:	4607      	mov	r7, r0
 8013a66:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
 8013a6a:	46a4      	mov	ip, r4
 8013a6c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013a70:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013a74:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013a78:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013a7c:	4638      	mov	r0, r7
 8013a7e:	b015      	add	sp, #84	; 0x54
 8013a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a82:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
 8013a86:	e7ee      	b.n	8013a66 <rcl_take_response+0x8e>
 8013a88:	270b      	movs	r7, #11
 8013a8a:	e7ec      	b.n	8013a66 <rcl_take_response+0x8e>
 8013a8c:	2701      	movs	r7, #1
 8013a8e:	e7ea      	b.n	8013a66 <rcl_take_response+0x8e>
 8013a90:	f240 17f5 	movw	r7, #501	; 0x1f5
 8013a94:	e7e7      	b.n	8013a66 <rcl_take_response+0x8e>
 8013a96:	f000 f811 	bl	8013abc <rcl_convert_rmw_ret_to_rcl_ret>
 8013a9a:	4607      	mov	r7, r0
 8013a9c:	e7e3      	b.n	8013a66 <rcl_take_response+0x8e>
 8013a9e:	bf00      	nop
	...

08013aa8 <rcl_client_is_valid>:
 8013aa8:	b130      	cbz	r0, 8013ab8 <rcl_client_is_valid+0x10>
 8013aaa:	6800      	ldr	r0, [r0, #0]
 8013aac:	b120      	cbz	r0, 8013ab8 <rcl_client_is_valid+0x10>
 8013aae:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8013ab2:	3800      	subs	r0, #0
 8013ab4:	bf18      	it	ne
 8013ab6:	2001      	movne	r0, #1
 8013ab8:	4770      	bx	lr
 8013aba:	bf00      	nop

08013abc <rcl_convert_rmw_ret_to_rcl_ret>:
 8013abc:	280b      	cmp	r0, #11
 8013abe:	dc0d      	bgt.n	8013adc <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8013ac0:	2800      	cmp	r0, #0
 8013ac2:	db09      	blt.n	8013ad8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8013ac4:	280b      	cmp	r0, #11
 8013ac6:	d807      	bhi.n	8013ad8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8013ac8:	e8df f000 	tbb	[pc, r0]
 8013acc:	07060607 	.word	0x07060607
 8013ad0:	06060606 	.word	0x06060606
 8013ad4:	07070606 	.word	0x07070606
 8013ad8:	2001      	movs	r0, #1
 8013ada:	4770      	bx	lr
 8013adc:	28cb      	cmp	r0, #203	; 0xcb
 8013ade:	bf18      	it	ne
 8013ae0:	2001      	movne	r0, #1
 8013ae2:	4770      	bx	lr

08013ae4 <rcl_get_zero_initialized_context>:
 8013ae4:	4a03      	ldr	r2, [pc, #12]	; (8013af4 <rcl_get_zero_initialized_context+0x10>)
 8013ae6:	4603      	mov	r3, r0
 8013ae8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013aec:	e883 0003 	stmia.w	r3, {r0, r1}
 8013af0:	4618      	mov	r0, r3
 8013af2:	4770      	bx	lr
 8013af4:	0801d9ac 	.word	0x0801d9ac

08013af8 <rcl_context_is_valid>:
 8013af8:	b118      	cbz	r0, 8013b02 <rcl_context_is_valid+0xa>
 8013afa:	6840      	ldr	r0, [r0, #4]
 8013afc:	3800      	subs	r0, #0
 8013afe:	bf18      	it	ne
 8013b00:	2001      	movne	r0, #1
 8013b02:	4770      	bx	lr

08013b04 <__cleanup_context>:
 8013b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b08:	4606      	mov	r6, r0
 8013b0a:	2300      	movs	r3, #0
 8013b0c:	6800      	ldr	r0, [r0, #0]
 8013b0e:	6073      	str	r3, [r6, #4]
 8013b10:	2800      	cmp	r0, #0
 8013b12:	d049      	beq.n	8013ba8 <__cleanup_context+0xa4>
 8013b14:	6947      	ldr	r7, [r0, #20]
 8013b16:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8013b1a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8013b1e:	b137      	cbz	r7, 8013b2e <__cleanup_context+0x2a>
 8013b20:	3014      	adds	r0, #20
 8013b22:	f000 f9e7 	bl	8013ef4 <rcl_init_options_fini>
 8013b26:	4607      	mov	r7, r0
 8013b28:	2800      	cmp	r0, #0
 8013b2a:	d144      	bne.n	8013bb6 <__cleanup_context+0xb2>
 8013b2c:	6830      	ldr	r0, [r6, #0]
 8013b2e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8013b30:	b143      	cbz	r3, 8013b44 <__cleanup_context+0x40>
 8013b32:	3028      	adds	r0, #40	; 0x28
 8013b34:	f004 f82c 	bl	8017b90 <rmw_context_fini>
 8013b38:	b118      	cbz	r0, 8013b42 <__cleanup_context+0x3e>
 8013b3a:	2f00      	cmp	r7, #0
 8013b3c:	d03e      	beq.n	8013bbc <__cleanup_context+0xb8>
 8013b3e:	f7f9 fd27 	bl	800d590 <rcutils_reset_error>
 8013b42:	6830      	ldr	r0, [r6, #0]
 8013b44:	6a03      	ldr	r3, [r0, #32]
 8013b46:	b1db      	cbz	r3, 8013b80 <__cleanup_context+0x7c>
 8013b48:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8013b4c:	2a01      	cmp	r2, #1
 8013b4e:	f17c 0100 	sbcs.w	r1, ip, #0
 8013b52:	db11      	blt.n	8013b78 <__cleanup_context+0x74>
 8013b54:	2400      	movs	r4, #0
 8013b56:	4625      	mov	r5, r4
 8013b58:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013b5c:	4649      	mov	r1, r9
 8013b5e:	b1b8      	cbz	r0, 8013b90 <__cleanup_context+0x8c>
 8013b60:	47c0      	blx	r8
 8013b62:	6833      	ldr	r3, [r6, #0]
 8013b64:	3401      	adds	r4, #1
 8013b66:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8013b6a:	f145 0500 	adc.w	r5, r5, #0
 8013b6e:	6a1b      	ldr	r3, [r3, #32]
 8013b70:	4294      	cmp	r4, r2
 8013b72:	eb75 010c 	sbcs.w	r1, r5, ip
 8013b76:	dbef      	blt.n	8013b58 <__cleanup_context+0x54>
 8013b78:	4618      	mov	r0, r3
 8013b7a:	4649      	mov	r1, r9
 8013b7c:	47c0      	blx	r8
 8013b7e:	6830      	ldr	r0, [r6, #0]
 8013b80:	4649      	mov	r1, r9
 8013b82:	47c0      	blx	r8
 8013b84:	2300      	movs	r3, #0
 8013b86:	4638      	mov	r0, r7
 8013b88:	e9c6 3300 	strd	r3, r3, [r6]
 8013b8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b90:	3401      	adds	r4, #1
 8013b92:	f145 0500 	adc.w	r5, r5, #0
 8013b96:	4294      	cmp	r4, r2
 8013b98:	eb75 010c 	sbcs.w	r1, r5, ip
 8013b9c:	dbdc      	blt.n	8013b58 <__cleanup_context+0x54>
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	4649      	mov	r1, r9
 8013ba2:	47c0      	blx	r8
 8013ba4:	6830      	ldr	r0, [r6, #0]
 8013ba6:	e7eb      	b.n	8013b80 <__cleanup_context+0x7c>
 8013ba8:	4607      	mov	r7, r0
 8013baa:	2300      	movs	r3, #0
 8013bac:	4638      	mov	r0, r7
 8013bae:	e9c6 3300 	strd	r3, r3, [r6]
 8013bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013bb6:	f7f9 fceb 	bl	800d590 <rcutils_reset_error>
 8013bba:	e7b7      	b.n	8013b2c <__cleanup_context+0x28>
 8013bbc:	f7ff ff7e 	bl	8013abc <rcl_convert_rmw_ret_to_rcl_ret>
 8013bc0:	4607      	mov	r7, r0
 8013bc2:	e7bc      	b.n	8013b3e <__cleanup_context+0x3a>

08013bc4 <rcl_init>:
 8013bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bc8:	1e05      	subs	r5, r0, #0
 8013bca:	b0a7      	sub	sp, #156	; 0x9c
 8013bcc:	460e      	mov	r6, r1
 8013bce:	4690      	mov	r8, r2
 8013bd0:	461f      	mov	r7, r3
 8013bd2:	f340 80a0 	ble.w	8013d16 <rcl_init+0x152>
 8013bd6:	2900      	cmp	r1, #0
 8013bd8:	f000 80a0 	beq.w	8013d1c <rcl_init+0x158>
 8013bdc:	f1a1 0e04 	sub.w	lr, r1, #4
 8013be0:	f04f 0c00 	mov.w	ip, #0
 8013be4:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8013be8:	f10c 0c01 	add.w	ip, ip, #1
 8013bec:	2c00      	cmp	r4, #0
 8013bee:	f000 8095 	beq.w	8013d1c <rcl_init+0x158>
 8013bf2:	4565      	cmp	r5, ip
 8013bf4:	d1f6      	bne.n	8013be4 <rcl_init+0x20>
 8013bf6:	f1b8 0f00 	cmp.w	r8, #0
 8013bfa:	f000 808f 	beq.w	8013d1c <rcl_init+0x158>
 8013bfe:	f8d8 4000 	ldr.w	r4, [r8]
 8013c02:	2c00      	cmp	r4, #0
 8013c04:	f000 808a 	beq.w	8013d1c <rcl_init+0x158>
 8013c08:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
 8013c0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013c0e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013c12:	6823      	ldr	r3, [r4, #0]
 8013c14:	a821      	add	r0, sp, #132	; 0x84
 8013c16:	f8cc 3000 	str.w	r3, [ip]
 8013c1a:	f7f9 fc93 	bl	800d544 <rcutils_allocator_is_valid>
 8013c1e:	f080 0001 	eor.w	r0, r0, #1
 8013c22:	b2c0      	uxtb	r0, r0
 8013c24:	2800      	cmp	r0, #0
 8013c26:	d179      	bne.n	8013d1c <rcl_init+0x158>
 8013c28:	2f00      	cmp	r7, #0
 8013c2a:	d077      	beq.n	8013d1c <rcl_init+0x158>
 8013c2c:	683b      	ldr	r3, [r7, #0]
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d179      	bne.n	8013d26 <rcl_init+0x162>
 8013c32:	2198      	movs	r1, #152	; 0x98
 8013c34:	2001      	movs	r0, #1
 8013c36:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	; 0x90
 8013c3a:	4798      	blx	r3
 8013c3c:	4604      	mov	r4, r0
 8013c3e:	6038      	str	r0, [r7, #0]
 8013c40:	2800      	cmp	r0, #0
 8013c42:	f000 80cd 	beq.w	8013de0 <rcl_init+0x21c>
 8013c46:	a802      	add	r0, sp, #8
 8013c48:	f003 fb06 	bl	8017258 <rmw_get_zero_initialized_context>
 8013c4c:	a902      	add	r1, sp, #8
 8013c4e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8013c52:	2270      	movs	r2, #112	; 0x70
 8013c54:	f007 ff47 	bl	801bae6 <memcpy>
 8013c58:	f8d7 e000 	ldr.w	lr, [r7]
 8013c5c:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
 8013c60:	4674      	mov	r4, lr
 8013c62:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013c66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013c68:	f8dc 3000 	ldr.w	r3, [ip]
 8013c6c:	f10e 0114 	add.w	r1, lr, #20
 8013c70:	4640      	mov	r0, r8
 8013c72:	6023      	str	r3, [r4, #0]
 8013c74:	f000 f968 	bl	8013f48 <rcl_init_options_copy>
 8013c78:	4604      	mov	r4, r0
 8013c7a:	2800      	cmp	r0, #0
 8013c7c:	d144      	bne.n	8013d08 <rcl_init+0x144>
 8013c7e:	f8d7 9000 	ldr.w	r9, [r7]
 8013c82:	ea4f 7ae5 	mov.w	sl, r5, asr #31
 8013c86:	f8c9 0020 	str.w	r0, [r9, #32]
 8013c8a:	f8c9 5018 	str.w	r5, [r9, #24]
 8013c8e:	f8c9 a01c 	str.w	sl, [r9, #28]
 8013c92:	2d00      	cmp	r5, #0
 8013c94:	d04e      	beq.n	8013d34 <rcl_init+0x170>
 8013c96:	2e00      	cmp	r6, #0
 8013c98:	d04c      	beq.n	8013d34 <rcl_init+0x170>
 8013c9a:	2104      	movs	r1, #4
 8013c9c:	4628      	mov	r0, r5
 8013c9e:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	; 0x90
 8013ca2:	4798      	blx	r3
 8013ca4:	f8c9 0020 	str.w	r0, [r9, #32]
 8013ca8:	f8d7 9000 	ldr.w	r9, [r7]
 8013cac:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8013cb0:	46cb      	mov	fp, r9
 8013cb2:	b343      	cbz	r3, 8013d06 <rcl_init+0x142>
 8013cb4:	2d01      	cmp	r5, #1
 8013cb6:	f17a 0300 	sbcs.w	r3, sl, #0
 8013cba:	db3b      	blt.n	8013d34 <rcl_init+0x170>
 8013cbc:	2400      	movs	r4, #0
 8013cbe:	3e04      	subs	r6, #4
 8013cc0:	46a1      	mov	r9, r4
 8013cc2:	e00b      	b.n	8013cdc <rcl_init+0x118>
 8013cc4:	6831      	ldr	r1, [r6, #0]
 8013cc6:	f007 ff0e 	bl	801bae6 <memcpy>
 8013cca:	3401      	adds	r4, #1
 8013ccc:	f149 0900 	adc.w	r9, r9, #0
 8013cd0:	45ca      	cmp	sl, r9
 8013cd2:	bf08      	it	eq
 8013cd4:	42a5      	cmpeq	r5, r4
 8013cd6:	d02b      	beq.n	8013d30 <rcl_init+0x16c>
 8013cd8:	f8d7 b000 	ldr.w	fp, [r7]
 8013cdc:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8013ce0:	f7ec fb0e 	bl	8000300 <strlen>
 8013ce4:	1c42      	adds	r2, r0, #1
 8013ce6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013ce8:	4610      	mov	r0, r2
 8013cea:	9925      	ldr	r1, [sp, #148]	; 0x94
 8013cec:	f8db b020 	ldr.w	fp, [fp, #32]
 8013cf0:	9201      	str	r2, [sp, #4]
 8013cf2:	4798      	blx	r3
 8013cf4:	683b      	ldr	r3, [r7, #0]
 8013cf6:	f84b 0024 	str.w	r0, [fp, r4, lsl #2]
 8013cfa:	6a1b      	ldr	r3, [r3, #32]
 8013cfc:	9a01      	ldr	r2, [sp, #4]
 8013cfe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013d02:	2800      	cmp	r0, #0
 8013d04:	d1de      	bne.n	8013cc4 <rcl_init+0x100>
 8013d06:	240a      	movs	r4, #10
 8013d08:	4638      	mov	r0, r7
 8013d0a:	f7ff fefb 	bl	8013b04 <__cleanup_context>
 8013d0e:	4620      	mov	r0, r4
 8013d10:	b027      	add	sp, #156	; 0x9c
 8013d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d16:	2900      	cmp	r1, #0
 8013d18:	f43f af6d 	beq.w	8013bf6 <rcl_init+0x32>
 8013d1c:	240b      	movs	r4, #11
 8013d1e:	4620      	mov	r0, r4
 8013d20:	b027      	add	sp, #156	; 0x9c
 8013d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d26:	2464      	movs	r4, #100	; 0x64
 8013d28:	4620      	mov	r0, r4
 8013d2a:	b027      	add	sp, #156	; 0x9c
 8013d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d30:	f8d7 9000 	ldr.w	r9, [r7]
 8013d34:	493f      	ldr	r1, [pc, #252]	; (8013e34 <rcl_init+0x270>)
 8013d36:	680b      	ldr	r3, [r1, #0]
 8013d38:	3301      	adds	r3, #1
 8013d3a:	d04c      	beq.n	8013dd6 <rcl_init+0x212>
 8013d3c:	461a      	mov	r2, r3
 8013d3e:	2000      	movs	r0, #0
 8013d40:	600b      	str	r3, [r1, #0]
 8013d42:	f8d9 5014 	ldr.w	r5, [r9, #20]
 8013d46:	607b      	str	r3, [r7, #4]
 8013d48:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013d4a:	3301      	adds	r3, #1
 8013d4c:	e9c5 2006 	strd	r2, r0, [r5, #24]
 8013d50:	d05d      	beq.n	8013e0e <rcl_init+0x24a>
 8013d52:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d044      	beq.n	8013de4 <rcl_init+0x220>
 8013d5a:	2b01      	cmp	r3, #1
 8013d5c:	d04e      	beq.n	8013dfc <rcl_init+0x238>
 8013d5e:	f8d8 3000 	ldr.w	r3, [r8]
 8013d62:	f105 0634 	add.w	r6, r5, #52	; 0x34
 8013d66:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d05a      	beq.n	8013e24 <rcl_init+0x260>
 8013d6e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8013d70:	b953      	cbnz	r3, 8013d88 <rcl_init+0x1c4>
 8013d72:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 8013d76:	2801      	cmp	r0, #1
 8013d78:	d008      	beq.n	8013d8c <rcl_init+0x1c8>
 8013d7a:	a921      	add	r1, sp, #132	; 0x84
 8013d7c:	4630      	mov	r0, r6
 8013d7e:	f006 fadb 	bl	801a338 <rcl_get_discovery_static_peers>
 8013d82:	4604      	mov	r4, r0
 8013d84:	2800      	cmp	r0, #0
 8013d86:	d1bf      	bne.n	8013d08 <rcl_init+0x144>
 8013d88:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 8013d8c:	f006 faca 	bl	801a324 <rcl_automatic_discovery_range_to_string>
 8013d90:	683b      	ldr	r3, [r7, #0]
 8013d92:	aa20      	add	r2, sp, #128	; 0x80
 8013d94:	a91f      	add	r1, sp, #124	; 0x7c
 8013d96:	695b      	ldr	r3, [r3, #20]
 8013d98:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8013d9a:	f001 fb93 	bl	80154c4 <rcl_validate_enclave_name>
 8013d9e:	4604      	mov	r4, r0
 8013da0:	2800      	cmp	r0, #0
 8013da2:	d1b1      	bne.n	8013d08 <rcl_init+0x144>
 8013da4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013da6:	bb83      	cbnz	r3, 8013e0a <rcl_init+0x246>
 8013da8:	6839      	ldr	r1, [r7, #0]
 8013daa:	694b      	ldr	r3, [r1, #20]
 8013dac:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8013db0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8013db2:	f000 fc97 	bl	80146e4 <rcl_get_security_options_from_environment>
 8013db6:	4604      	mov	r4, r0
 8013db8:	2800      	cmp	r0, #0
 8013dba:	d1a5      	bne.n	8013d08 <rcl_init+0x144>
 8013dbc:	6839      	ldr	r1, [r7, #0]
 8013dbe:	6948      	ldr	r0, [r1, #20]
 8013dc0:	3128      	adds	r1, #40	; 0x28
 8013dc2:	3018      	adds	r0, #24
 8013dc4:	f003 fdae 	bl	8017924 <rmw_init>
 8013dc8:	4604      	mov	r4, r0
 8013dca:	2800      	cmp	r0, #0
 8013dcc:	d0a7      	beq.n	8013d1e <rcl_init+0x15a>
 8013dce:	f7ff fe75 	bl	8013abc <rcl_convert_rmw_ret_to_rcl_ret>
 8013dd2:	4604      	mov	r4, r0
 8013dd4:	e798      	b.n	8013d08 <rcl_init+0x144>
 8013dd6:	2201      	movs	r2, #1
 8013dd8:	4618      	mov	r0, r3
 8013dda:	600a      	str	r2, [r1, #0]
 8013ddc:	4613      	mov	r3, r2
 8013dde:	e7b0      	b.n	8013d42 <rcl_init+0x17e>
 8013de0:	240a      	movs	r4, #10
 8013de2:	e79c      	b.n	8013d1e <rcl_init+0x15a>
 8013de4:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8013de8:	f000 f90c 	bl	8014004 <rcl_get_localhost_only>
 8013dec:	4604      	mov	r4, r0
 8013dee:	2800      	cmp	r0, #0
 8013df0:	d18a      	bne.n	8013d08 <rcl_init+0x144>
 8013df2:	683a      	ldr	r2, [r7, #0]
 8013df4:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8013df8:	6955      	ldr	r5, [r2, #20]
 8013dfa:	e7ae      	b.n	8013d5a <rcl_init+0x196>
 8013dfc:	2302      	movs	r3, #2
 8013dfe:	2200      	movs	r2, #0
 8013e00:	4618      	mov	r0, r3
 8013e02:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
 8013e06:	63ea      	str	r2, [r5, #60]	; 0x3c
 8013e08:	e7c0      	b.n	8013d8c <rcl_init+0x1c8>
 8013e0a:	2401      	movs	r4, #1
 8013e0c:	e77c      	b.n	8013d08 <rcl_init+0x144>
 8013e0e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8013e12:	f006 faf7 	bl	801a404 <rcl_get_default_domain_id>
 8013e16:	4604      	mov	r4, r0
 8013e18:	2800      	cmp	r0, #0
 8013e1a:	f47f af75 	bne.w	8013d08 <rcl_init+0x144>
 8013e1e:	683b      	ldr	r3, [r7, #0]
 8013e20:	695d      	ldr	r5, [r3, #20]
 8013e22:	e796      	b.n	8013d52 <rcl_init+0x18e>
 8013e24:	4630      	mov	r0, r6
 8013e26:	f006 fa3b 	bl	801a2a0 <rcl_get_automatic_discovery_range>
 8013e2a:	4604      	mov	r4, r0
 8013e2c:	2800      	cmp	r0, #0
 8013e2e:	d09e      	beq.n	8013d6e <rcl_init+0x1aa>
 8013e30:	e76a      	b.n	8013d08 <rcl_init+0x144>
 8013e32:	bf00      	nop
 8013e34:	200105ac 	.word	0x200105ac

08013e38 <rcl_get_zero_initialized_init_options>:
 8013e38:	2000      	movs	r0, #0
 8013e3a:	4770      	bx	lr

08013e3c <rcl_init_options_init>:
 8013e3c:	b084      	sub	sp, #16
 8013e3e:	b570      	push	{r4, r5, r6, lr}
 8013e40:	b09e      	sub	sp, #120	; 0x78
 8013e42:	ad23      	add	r5, sp, #140	; 0x8c
 8013e44:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8013e48:	2800      	cmp	r0, #0
 8013e4a:	d046      	beq.n	8013eda <rcl_init_options_init+0x9e>
 8013e4c:	6803      	ldr	r3, [r0, #0]
 8013e4e:	4604      	mov	r4, r0
 8013e50:	b133      	cbz	r3, 8013e60 <rcl_init_options_init+0x24>
 8013e52:	2564      	movs	r5, #100	; 0x64
 8013e54:	4628      	mov	r0, r5
 8013e56:	b01e      	add	sp, #120	; 0x78
 8013e58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013e5c:	b004      	add	sp, #16
 8013e5e:	4770      	bx	lr
 8013e60:	4628      	mov	r0, r5
 8013e62:	f7f9 fb6f 	bl	800d544 <rcutils_allocator_is_valid>
 8013e66:	2800      	cmp	r0, #0
 8013e68:	d037      	beq.n	8013eda <rcl_init_options_init+0x9e>
 8013e6a:	46ae      	mov	lr, r5
 8013e6c:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 8013e70:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013e74:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013e78:	f8de 3000 	ldr.w	r3, [lr]
 8013e7c:	2070      	movs	r0, #112	; 0x70
 8013e7e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8013e80:	f8cc 3000 	str.w	r3, [ip]
 8013e84:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013e86:	4798      	blx	r3
 8013e88:	4606      	mov	r6, r0
 8013e8a:	6020      	str	r0, [r4, #0]
 8013e8c:	b338      	cbz	r0, 8013ede <rcl_init_options_init+0xa2>
 8013e8e:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 8013e92:	4686      	mov	lr, r0
 8013e94:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013e98:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013e9c:	f8dc 3000 	ldr.w	r3, [ip]
 8013ea0:	a802      	add	r0, sp, #8
 8013ea2:	f8ce 3000 	str.w	r3, [lr]
 8013ea6:	f003 f9eb 	bl	8017280 <rmw_get_zero_initialized_init_options>
 8013eaa:	2258      	movs	r2, #88	; 0x58
 8013eac:	a902      	add	r1, sp, #8
 8013eae:	f106 0018 	add.w	r0, r6, #24
 8013eb2:	f007 fe18 	bl	801bae6 <memcpy>
 8013eb6:	ab26      	add	r3, sp, #152	; 0x98
 8013eb8:	6826      	ldr	r6, [r4, #0]
 8013eba:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013ebe:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013ec2:	f106 0018 	add.w	r0, r6, #24
 8013ec6:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8013eca:	f003 fc5b 	bl	8017784 <rmw_init_options_init>
 8013ece:	4605      	mov	r5, r0
 8013ed0:	b938      	cbnz	r0, 8013ee2 <rcl_init_options_init+0xa6>
 8013ed2:	6823      	ldr	r3, [r4, #0]
 8013ed4:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34
 8013ed8:	e7bc      	b.n	8013e54 <rcl_init_options_init+0x18>
 8013eda:	250b      	movs	r5, #11
 8013edc:	e7ba      	b.n	8013e54 <rcl_init_options_init+0x18>
 8013ede:	250a      	movs	r5, #10
 8013ee0:	e7b8      	b.n	8013e54 <rcl_init_options_init+0x18>
 8013ee2:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8013ee4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8013ee6:	6820      	ldr	r0, [r4, #0]
 8013ee8:	4798      	blx	r3
 8013eea:	4628      	mov	r0, r5
 8013eec:	f7ff fde6 	bl	8013abc <rcl_convert_rmw_ret_to_rcl_ret>
 8013ef0:	4605      	mov	r5, r0
 8013ef2:	e7af      	b.n	8013e54 <rcl_init_options_init+0x18>

08013ef4 <rcl_init_options_fini>:
 8013ef4:	b530      	push	{r4, r5, lr}
 8013ef6:	b087      	sub	sp, #28
 8013ef8:	b1f0      	cbz	r0, 8013f38 <rcl_init_options_fini+0x44>
 8013efa:	6803      	ldr	r3, [r0, #0]
 8013efc:	4604      	mov	r4, r0
 8013efe:	b1db      	cbz	r3, 8013f38 <rcl_init_options_fini+0x44>
 8013f00:	469c      	mov	ip, r3
 8013f02:	f10d 0e04 	add.w	lr, sp, #4
 8013f06:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013f0a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013f0e:	f8dc 3000 	ldr.w	r3, [ip]
 8013f12:	a801      	add	r0, sp, #4
 8013f14:	f8ce 3000 	str.w	r3, [lr]
 8013f18:	f7f9 fb14 	bl	800d544 <rcutils_allocator_is_valid>
 8013f1c:	b160      	cbz	r0, 8013f38 <rcl_init_options_fini+0x44>
 8013f1e:	6820      	ldr	r0, [r4, #0]
 8013f20:	3018      	adds	r0, #24
 8013f22:	f003 fcc9 	bl	80178b8 <rmw_init_options_fini>
 8013f26:	4605      	mov	r5, r0
 8013f28:	b950      	cbnz	r0, 8013f40 <rcl_init_options_fini+0x4c>
 8013f2a:	6820      	ldr	r0, [r4, #0]
 8013f2c:	9b02      	ldr	r3, [sp, #8]
 8013f2e:	9905      	ldr	r1, [sp, #20]
 8013f30:	4798      	blx	r3
 8013f32:	4628      	mov	r0, r5
 8013f34:	b007      	add	sp, #28
 8013f36:	bd30      	pop	{r4, r5, pc}
 8013f38:	250b      	movs	r5, #11
 8013f3a:	4628      	mov	r0, r5
 8013f3c:	b007      	add	sp, #28
 8013f3e:	bd30      	pop	{r4, r5, pc}
 8013f40:	f7ff fdbc 	bl	8013abc <rcl_convert_rmw_ret_to_rcl_ret>
 8013f44:	4605      	mov	r5, r0
 8013f46:	e7f8      	b.n	8013f3a <rcl_init_options_fini+0x46>

08013f48 <rcl_init_options_copy>:
 8013f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f4a:	b09d      	sub	sp, #116	; 0x74
 8013f4c:	2800      	cmp	r0, #0
 8013f4e:	d04d      	beq.n	8013fec <rcl_init_options_copy+0xa4>
 8013f50:	4604      	mov	r4, r0
 8013f52:	6800      	ldr	r0, [r0, #0]
 8013f54:	2800      	cmp	r0, #0
 8013f56:	d049      	beq.n	8013fec <rcl_init_options_copy+0xa4>
 8013f58:	460d      	mov	r5, r1
 8013f5a:	f7f9 faf3 	bl	800d544 <rcutils_allocator_is_valid>
 8013f5e:	2d00      	cmp	r5, #0
 8013f60:	d044      	beq.n	8013fec <rcl_init_options_copy+0xa4>
 8013f62:	f080 0001 	eor.w	r0, r0, #1
 8013f66:	b2c0      	uxtb	r0, r0
 8013f68:	2800      	cmp	r0, #0
 8013f6a:	d13f      	bne.n	8013fec <rcl_init_options_copy+0xa4>
 8013f6c:	682b      	ldr	r3, [r5, #0]
 8013f6e:	b11b      	cbz	r3, 8013f78 <rcl_init_options_copy+0x30>
 8013f70:	2464      	movs	r4, #100	; 0x64
 8013f72:	4620      	mov	r0, r4
 8013f74:	b01d      	add	sp, #116	; 0x74
 8013f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f78:	6826      	ldr	r6, [r4, #0]
 8013f7a:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
 8013f7e:	46b6      	mov	lr, r6
 8013f80:	6837      	ldr	r7, [r6, #0]
 8013f82:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013f86:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013f8a:	f8de 3000 	ldr.w	r3, [lr]
 8013f8e:	2070      	movs	r0, #112	; 0x70
 8013f90:	4619      	mov	r1, r3
 8013f92:	f8cc 3000 	str.w	r3, [ip]
 8013f96:	47b8      	blx	r7
 8013f98:	4606      	mov	r6, r0
 8013f9a:	6028      	str	r0, [r5, #0]
 8013f9c:	b350      	cbz	r0, 8013ff4 <rcl_init_options_copy+0xac>
 8013f9e:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
 8013fa2:	4686      	mov	lr, r0
 8013fa4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013fa8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013fac:	f8dc 3000 	ldr.w	r3, [ip]
 8013fb0:	4668      	mov	r0, sp
 8013fb2:	f8ce 3000 	str.w	r3, [lr]
 8013fb6:	f003 f963 	bl	8017280 <rmw_get_zero_initialized_init_options>
 8013fba:	2258      	movs	r2, #88	; 0x58
 8013fbc:	4669      	mov	r1, sp
 8013fbe:	f106 0018 	add.w	r0, r6, #24
 8013fc2:	f007 fd90 	bl	801bae6 <memcpy>
 8013fc6:	6820      	ldr	r0, [r4, #0]
 8013fc8:	6829      	ldr	r1, [r5, #0]
 8013fca:	3018      	adds	r0, #24
 8013fcc:	3118      	adds	r1, #24
 8013fce:	f003 fc41 	bl	8017854 <rmw_init_options_copy>
 8013fd2:	4604      	mov	r4, r0
 8013fd4:	2800      	cmp	r0, #0
 8013fd6:	d0cc      	beq.n	8013f72 <rcl_init_options_copy+0x2a>
 8013fd8:	f7f9 fac2 	bl	800d560 <rcutils_get_error_string>
 8013fdc:	f7f9 fad8 	bl	800d590 <rcutils_reset_error>
 8013fe0:	4628      	mov	r0, r5
 8013fe2:	f7ff ff87 	bl	8013ef4 <rcl_init_options_fini>
 8013fe6:	b138      	cbz	r0, 8013ff8 <rcl_init_options_copy+0xb0>
 8013fe8:	4604      	mov	r4, r0
 8013fea:	e7c2      	b.n	8013f72 <rcl_init_options_copy+0x2a>
 8013fec:	240b      	movs	r4, #11
 8013fee:	4620      	mov	r0, r4
 8013ff0:	b01d      	add	sp, #116	; 0x74
 8013ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ff4:	240a      	movs	r4, #10
 8013ff6:	e7bc      	b.n	8013f72 <rcl_init_options_copy+0x2a>
 8013ff8:	4620      	mov	r0, r4
 8013ffa:	b01d      	add	sp, #116	; 0x74
 8013ffc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014000:	f7ff bd5c 	b.w	8013abc <rcl_convert_rmw_ret_to_rcl_ret>

08014004 <rcl_get_localhost_only>:
 8014004:	b510      	push	{r4, lr}
 8014006:	2300      	movs	r3, #0
 8014008:	b082      	sub	sp, #8
 801400a:	9301      	str	r3, [sp, #4]
 801400c:	b1c0      	cbz	r0, 8014040 <rcl_get_localhost_only+0x3c>
 801400e:	4604      	mov	r4, r0
 8014010:	a901      	add	r1, sp, #4
 8014012:	480d      	ldr	r0, [pc, #52]	; (8014048 <rcl_get_localhost_only+0x44>)
 8014014:	f002 fe70 	bl	8016cf8 <rcutils_get_env>
 8014018:	b110      	cbz	r0, 8014020 <rcl_get_localhost_only+0x1c>
 801401a:	2001      	movs	r0, #1
 801401c:	b002      	add	sp, #8
 801401e:	bd10      	pop	{r4, pc}
 8014020:	9b01      	ldr	r3, [sp, #4]
 8014022:	b10b      	cbz	r3, 8014028 <rcl_get_localhost_only+0x24>
 8014024:	781b      	ldrb	r3, [r3, #0]
 8014026:	b923      	cbnz	r3, 8014032 <rcl_get_localhost_only+0x2e>
 8014028:	2300      	movs	r3, #0
 801402a:	4618      	mov	r0, r3
 801402c:	7023      	strb	r3, [r4, #0]
 801402e:	b002      	add	sp, #8
 8014030:	bd10      	pop	{r4, pc}
 8014032:	2b31      	cmp	r3, #49	; 0x31
 8014034:	bf0c      	ite	eq
 8014036:	2301      	moveq	r3, #1
 8014038:	2302      	movne	r3, #2
 801403a:	7023      	strb	r3, [r4, #0]
 801403c:	b002      	add	sp, #8
 801403e:	bd10      	pop	{r4, pc}
 8014040:	200b      	movs	r0, #11
 8014042:	b002      	add	sp, #8
 8014044:	bd10      	pop	{r4, pc}
 8014046:	bf00      	nop
 8014048:	0801d9b4 	.word	0x0801d9b4

0801404c <rcl_get_zero_initialized_node>:
 801404c:	4a03      	ldr	r2, [pc, #12]	; (801405c <rcl_get_zero_initialized_node+0x10>)
 801404e:	4603      	mov	r3, r0
 8014050:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014054:	e883 0003 	stmia.w	r3, {r0, r1}
 8014058:	4618      	mov	r0, r3
 801405a:	4770      	bx	lr
 801405c:	0801d9f8 	.word	0x0801d9f8

08014060 <rcl_node_init>:
 8014060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014064:	b0ab      	sub	sp, #172	; 0xac
 8014066:	4604      	mov	r4, r0
 8014068:	460e      	mov	r6, r1
 801406a:	4615      	mov	r5, r2
 801406c:	f8dd 80d0 	ldr.w	r8, [sp, #208]	; 0xd0
 8014070:	a825      	add	r0, sp, #148	; 0x94
 8014072:	461f      	mov	r7, r3
 8014074:	f006 fc3a 	bl	801a8ec <rcl_guard_condition_get_default_options>
 8014078:	f1b8 0f00 	cmp.w	r8, #0
 801407c:	f000 80f3 	beq.w	8014266 <rcl_node_init+0x206>
 8014080:	4640      	mov	r0, r8
 8014082:	f7f9 fa5f 	bl	800d544 <rcutils_allocator_is_valid>
 8014086:	2d00      	cmp	r5, #0
 8014088:	bf18      	it	ne
 801408a:	2c00      	cmpne	r4, #0
 801408c:	f080 0001 	eor.w	r0, r0, #1
 8014090:	bf0c      	ite	eq
 8014092:	f04f 0c01 	moveq.w	ip, #1
 8014096:	f04f 0c00 	movne.w	ip, #0
 801409a:	2e00      	cmp	r6, #0
 801409c:	bf08      	it	eq
 801409e:	f04c 0c01 	orreq.w	ip, ip, #1
 80140a2:	ea4c 0c00 	orr.w	ip, ip, r0
 80140a6:	f01c 09ff 	ands.w	r9, ip, #255	; 0xff
 80140aa:	f040 80dc 	bne.w	8014266 <rcl_node_init+0x206>
 80140ae:	f8d4 a004 	ldr.w	sl, [r4, #4]
 80140b2:	f1ba 0f00 	cmp.w	sl, #0
 80140b6:	f040 80fc 	bne.w	80142b2 <rcl_node_init+0x252>
 80140ba:	2f00      	cmp	r7, #0
 80140bc:	f000 80d3 	beq.w	8014266 <rcl_node_init+0x206>
 80140c0:	4638      	mov	r0, r7
 80140c2:	f7ff fd19 	bl	8013af8 <rcl_context_is_valid>
 80140c6:	4683      	mov	fp, r0
 80140c8:	2800      	cmp	r0, #0
 80140ca:	f000 80d2 	beq.w	8014272 <rcl_node_init+0x212>
 80140ce:	4652      	mov	r2, sl
 80140d0:	4630      	mov	r0, r6
 80140d2:	a924      	add	r1, sp, #144	; 0x90
 80140d4:	f8cd a090 	str.w	sl, [sp, #144]	; 0x90
 80140d8:	f003 fa68 	bl	80175ac <rmw_validate_node_name>
 80140dc:	4682      	mov	sl, r0
 80140de:	2800      	cmp	r0, #0
 80140e0:	f040 80c3 	bne.w	801426a <rcl_node_init+0x20a>
 80140e4:	9824      	ldr	r0, [sp, #144]	; 0x90
 80140e6:	2800      	cmp	r0, #0
 80140e8:	f040 80f1 	bne.w	80142ce <rcl_node_init+0x26e>
 80140ec:	4628      	mov	r0, r5
 80140ee:	f7ec f907 	bl	8000300 <strlen>
 80140f2:	2800      	cmp	r0, #0
 80140f4:	f040 80c0 	bne.w	8014278 <rcl_node_init+0x218>
 80140f8:	4d79      	ldr	r5, [pc, #484]	; (80142e0 <rcl_node_init+0x280>)
 80140fa:	a924      	add	r1, sp, #144	; 0x90
 80140fc:	2200      	movs	r2, #0
 80140fe:	4628      	mov	r0, r5
 8014100:	f003 fa36 	bl	8017570 <rmw_validate_namespace>
 8014104:	4682      	mov	sl, r0
 8014106:	2800      	cmp	r0, #0
 8014108:	f040 80af 	bne.w	801426a <rcl_node_init+0x20a>
 801410c:	9824      	ldr	r0, [sp, #144]	; 0x90
 801410e:	2800      	cmp	r0, #0
 8014110:	f040 80d5 	bne.w	80142be <rcl_node_init+0x25e>
 8014114:	f8d8 3000 	ldr.w	r3, [r8]
 8014118:	2080      	movs	r0, #128	; 0x80
 801411a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801411e:	4798      	blx	r3
 8014120:	4682      	mov	sl, r0
 8014122:	6060      	str	r0, [r4, #4]
 8014124:	2800      	cmp	r0, #0
 8014126:	f000 80cf 	beq.w	80142c8 <rcl_node_init+0x268>
 801412a:	2200      	movs	r2, #0
 801412c:	2300      	movs	r3, #0
 801412e:	a808      	add	r0, sp, #32
 8014130:	e9ca 231c 	strd	r2, r3, [sl, #112]	; 0x70
 8014134:	e9ca 231e 	strd	r2, r3, [sl, #120]	; 0x78
 8014138:	f000 f922 	bl	8014380 <rcl_node_get_default_options>
 801413c:	a908      	add	r1, sp, #32
 801413e:	4650      	mov	r0, sl
 8014140:	2270      	movs	r2, #112	; 0x70
 8014142:	f007 fcd0 	bl	801bae6 <memcpy>
 8014146:	6861      	ldr	r1, [r4, #4]
 8014148:	4640      	mov	r0, r8
 801414a:	6027      	str	r7, [r4, #0]
 801414c:	f000 f926 	bl	801439c <rcl_node_options_copy>
 8014150:	2800      	cmp	r0, #0
 8014152:	d158      	bne.n	8014206 <rcl_node_init+0x1a6>
 8014154:	4628      	mov	r0, r5
 8014156:	f7ec f8d3 	bl	8000300 <strlen>
 801415a:	4428      	add	r0, r5
 801415c:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8014160:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8014164:	2b2f      	cmp	r3, #47	; 0x2f
 8014166:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801416a:	9300      	str	r3, [sp, #0]
 801416c:	bf0c      	ite	eq
 801416e:	4b5d      	ldreq	r3, [pc, #372]	; (80142e4 <rcl_node_init+0x284>)
 8014170:	4b5d      	ldrne	r3, [pc, #372]	; (80142e8 <rcl_node_init+0x288>)
 8014172:	9302      	str	r3, [sp, #8]
 8014174:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014178:	9301      	str	r3, [sp, #4]
 801417a:	f8d4 a004 	ldr.w	sl, [r4, #4]
 801417e:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8014182:	f002 fde1 	bl	8016d48 <rcutils_format_string_limit>
 8014186:	6823      	ldr	r3, [r4, #0]
 8014188:	f8ca 007c 	str.w	r0, [sl, #124]	; 0x7c
 801418c:	4631      	mov	r1, r6
 801418e:	6818      	ldr	r0, [r3, #0]
 8014190:	462a      	mov	r2, r5
 8014192:	6866      	ldr	r6, [r4, #4]
 8014194:	3028      	adds	r0, #40	; 0x28
 8014196:	f003 fe1f 	bl	8017dd8 <rmw_create_node>
 801419a:	6863      	ldr	r3, [r4, #4]
 801419c:	6730      	str	r0, [r6, #112]	; 0x70
 801419e:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80141a0:	2800      	cmp	r0, #0
 80141a2:	d032      	beq.n	801420a <rcl_node_init+0x1aa>
 80141a4:	f003 fea8 	bl	8017ef8 <rmw_node_get_graph_guard_condition>
 80141a8:	4682      	mov	sl, r0
 80141aa:	b360      	cbz	r0, 8014206 <rcl_node_init+0x1a6>
 80141ac:	f8d8 3000 	ldr.w	r3, [r8]
 80141b0:	2008      	movs	r0, #8
 80141b2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80141b6:	6866      	ldr	r6, [r4, #4]
 80141b8:	4798      	blx	r3
 80141ba:	6863      	ldr	r3, [r4, #4]
 80141bc:	6770      	str	r0, [r6, #116]	; 0x74
 80141be:	f8d3 b074 	ldr.w	fp, [r3, #116]	; 0x74
 80141c2:	f1bb 0f00 	cmp.w	fp, #0
 80141c6:	d020      	beq.n	801420a <rcl_node_init+0x1aa>
 80141c8:	a806      	add	r0, sp, #24
 80141ca:	ae25      	add	r6, sp, #148	; 0x94
 80141cc:	f006 fab4 	bl	801a738 <rcl_get_zero_initialized_guard_condition>
 80141d0:	a806      	add	r0, sp, #24
 80141d2:	6863      	ldr	r3, [r4, #4]
 80141d4:	46c4      	mov	ip, r8
 80141d6:	c803      	ldmia	r0, {r0, r1}
 80141d8:	f8d3 e074 	ldr.w	lr, [r3, #116]	; 0x74
 80141dc:	e88b 0003 	stmia.w	fp, {r0, r1}
 80141e0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80141e4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80141e6:	f8dc 3000 	ldr.w	r3, [ip]
 80141ea:	6033      	str	r3, [r6, #0]
 80141ec:	ab2a      	add	r3, sp, #168	; 0xa8
 80141ee:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80141f2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80141f6:	4651      	mov	r1, sl
 80141f8:	463a      	mov	r2, r7
 80141fa:	4670      	mov	r0, lr
 80141fc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80141fe:	f006 faf3 	bl	801a7e8 <rcl_guard_condition_init_from_rmw>
 8014202:	4682      	mov	sl, r0
 8014204:	b328      	cbz	r0, 8014252 <rcl_node_init+0x1f2>
 8014206:	6863      	ldr	r3, [r4, #4]
 8014208:	b1f3      	cbz	r3, 8014248 <rcl_node_init+0x1e8>
 801420a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 801420c:	b128      	cbz	r0, 801421a <rcl_node_init+0x1ba>
 801420e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014212:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014216:	4798      	blx	r3
 8014218:	6863      	ldr	r3, [r4, #4]
 801421a:	6f18      	ldr	r0, [r3, #112]	; 0x70
 801421c:	b110      	cbz	r0, 8014224 <rcl_node_init+0x1c4>
 801421e:	f003 fded 	bl	8017dfc <rmw_destroy_node>
 8014222:	6863      	ldr	r3, [r4, #4]
 8014224:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8014226:	b148      	cbz	r0, 801423c <rcl_node_init+0x1dc>
 8014228:	f006 fb3a 	bl	801a8a0 <rcl_guard_condition_fini>
 801422c:	6863      	ldr	r3, [r4, #4]
 801422e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014232:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8014234:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014238:	4798      	blx	r3
 801423a:	6863      	ldr	r3, [r4, #4]
 801423c:	4618      	mov	r0, r3
 801423e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014242:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014246:	4798      	blx	r3
 8014248:	2300      	movs	r3, #0
 801424a:	f04f 0a01 	mov.w	sl, #1
 801424e:	e9c4 3300 	strd	r3, r3, [r4]
 8014252:	f1b9 0f00 	cmp.w	r9, #0
 8014256:	d008      	beq.n	801426a <rcl_node_init+0x20a>
 8014258:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801425c:	4628      	mov	r0, r5
 801425e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014262:	4798      	blx	r3
 8014264:	e001      	b.n	801426a <rcl_node_init+0x20a>
 8014266:	f04f 0a0b 	mov.w	sl, #11
 801426a:	4650      	mov	r0, sl
 801426c:	b02b      	add	sp, #172	; 0xac
 801426e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014272:	f04f 0a65 	mov.w	sl, #101	; 0x65
 8014276:	e7f8      	b.n	801426a <rcl_node_init+0x20a>
 8014278:	782b      	ldrb	r3, [r5, #0]
 801427a:	2b2f      	cmp	r3, #47	; 0x2f
 801427c:	f43f af3d 	beq.w	80140fa <rcl_node_init+0x9a>
 8014280:	9503      	str	r5, [sp, #12]
 8014282:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014286:	9300      	str	r3, [sp, #0]
 8014288:	4b18      	ldr	r3, [pc, #96]	; (80142ec <rcl_node_init+0x28c>)
 801428a:	9302      	str	r3, [sp, #8]
 801428c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014290:	9301      	str	r3, [sp, #4]
 8014292:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8014296:	f002 fd57 	bl	8016d48 <rcutils_format_string_limit>
 801429a:	4605      	mov	r5, r0
 801429c:	b1e0      	cbz	r0, 80142d8 <rcl_node_init+0x278>
 801429e:	2200      	movs	r2, #0
 80142a0:	a924      	add	r1, sp, #144	; 0x90
 80142a2:	9224      	str	r2, [sp, #144]	; 0x90
 80142a4:	f003 f964 	bl	8017570 <rmw_validate_namespace>
 80142a8:	4682      	mov	sl, r0
 80142aa:	2800      	cmp	r0, #0
 80142ac:	d1d4      	bne.n	8014258 <rcl_node_init+0x1f8>
 80142ae:	46d9      	mov	r9, fp
 80142b0:	e72c      	b.n	801410c <rcl_node_init+0xac>
 80142b2:	f04f 0a64 	mov.w	sl, #100	; 0x64
 80142b6:	4650      	mov	r0, sl
 80142b8:	b02b      	add	sp, #172	; 0xac
 80142ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142be:	f04f 0aca 	mov.w	sl, #202	; 0xca
 80142c2:	f003 f967 	bl	8017594 <rmw_namespace_validation_result_string>
 80142c6:	e7c4      	b.n	8014252 <rcl_node_init+0x1f2>
 80142c8:	f04f 0a0a 	mov.w	sl, #10
 80142cc:	e7c1      	b.n	8014252 <rcl_node_init+0x1f2>
 80142ce:	f04f 0ac9 	mov.w	sl, #201	; 0xc9
 80142d2:	f003 f9bf 	bl	8017654 <rmw_node_name_validation_result_string>
 80142d6:	e7c8      	b.n	801426a <rcl_node_init+0x20a>
 80142d8:	f04f 0a0a 	mov.w	sl, #10
 80142dc:	e7c5      	b.n	801426a <rcl_node_init+0x20a>
 80142de:	bf00      	nop
 80142e0:	0801d9cc 	.word	0x0801d9cc
 80142e4:	0801d598 	.word	0x0801d598
 80142e8:	0801d9d4 	.word	0x0801d9d4
 80142ec:	0801d9d0 	.word	0x0801d9d0

080142f0 <rcl_node_is_valid>:
 80142f0:	b130      	cbz	r0, 8014300 <rcl_node_is_valid+0x10>
 80142f2:	6843      	ldr	r3, [r0, #4]
 80142f4:	b123      	cbz	r3, 8014300 <rcl_node_is_valid+0x10>
 80142f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80142f8:	b113      	cbz	r3, 8014300 <rcl_node_is_valid+0x10>
 80142fa:	6800      	ldr	r0, [r0, #0]
 80142fc:	f7ff bbfc 	b.w	8013af8 <rcl_context_is_valid>
 8014300:	2000      	movs	r0, #0
 8014302:	4770      	bx	lr

08014304 <rcl_node_get_name>:
 8014304:	b120      	cbz	r0, 8014310 <rcl_node_get_name+0xc>
 8014306:	6840      	ldr	r0, [r0, #4]
 8014308:	b110      	cbz	r0, 8014310 <rcl_node_get_name+0xc>
 801430a:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801430c:	b100      	cbz	r0, 8014310 <rcl_node_get_name+0xc>
 801430e:	6880      	ldr	r0, [r0, #8]
 8014310:	4770      	bx	lr
 8014312:	bf00      	nop

08014314 <rcl_node_get_namespace>:
 8014314:	b120      	cbz	r0, 8014320 <rcl_node_get_namespace+0xc>
 8014316:	6840      	ldr	r0, [r0, #4]
 8014318:	b110      	cbz	r0, 8014320 <rcl_node_get_namespace+0xc>
 801431a:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801431c:	b100      	cbz	r0, 8014320 <rcl_node_get_namespace+0xc>
 801431e:	68c0      	ldr	r0, [r0, #12]
 8014320:	4770      	bx	lr
 8014322:	bf00      	nop

08014324 <rcl_node_get_options>:
 8014324:	b128      	cbz	r0, 8014332 <rcl_node_get_options+0xe>
 8014326:	6840      	ldr	r0, [r0, #4]
 8014328:	b118      	cbz	r0, 8014332 <rcl_node_get_options+0xe>
 801432a:	6f03      	ldr	r3, [r0, #112]	; 0x70
 801432c:	2b00      	cmp	r3, #0
 801432e:	bf08      	it	eq
 8014330:	2000      	moveq	r0, #0
 8014332:	4770      	bx	lr

08014334 <rcl_node_get_rmw_handle>:
 8014334:	b110      	cbz	r0, 801433c <rcl_node_get_rmw_handle+0x8>
 8014336:	6840      	ldr	r0, [r0, #4]
 8014338:	b100      	cbz	r0, 801433c <rcl_node_get_rmw_handle+0x8>
 801433a:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801433c:	4770      	bx	lr
 801433e:	bf00      	nop

08014340 <rcl_get_disable_loaned_message>:
 8014340:	b510      	push	{r4, lr}
 8014342:	2300      	movs	r3, #0
 8014344:	b082      	sub	sp, #8
 8014346:	9301      	str	r3, [sp, #4]
 8014348:	b1a0      	cbz	r0, 8014374 <rcl_get_disable_loaned_message+0x34>
 801434a:	4604      	mov	r4, r0
 801434c:	a901      	add	r1, sp, #4
 801434e:	480b      	ldr	r0, [pc, #44]	; (801437c <rcl_get_disable_loaned_message+0x3c>)
 8014350:	f002 fcd2 	bl	8016cf8 <rcutils_get_env>
 8014354:	b110      	cbz	r0, 801435c <rcl_get_disable_loaned_message+0x1c>
 8014356:	2001      	movs	r0, #1
 8014358:	b002      	add	sp, #8
 801435a:	bd10      	pop	{r4, pc}
 801435c:	9a01      	ldr	r2, [sp, #4]
 801435e:	2000      	movs	r0, #0
 8014360:	7813      	ldrb	r3, [r2, #0]
 8014362:	3b31      	subs	r3, #49	; 0x31
 8014364:	bf08      	it	eq
 8014366:	7853      	ldrbeq	r3, [r2, #1]
 8014368:	fab3 f383 	clz	r3, r3
 801436c:	095b      	lsrs	r3, r3, #5
 801436e:	7023      	strb	r3, [r4, #0]
 8014370:	b002      	add	sp, #8
 8014372:	bd10      	pop	{r4, pc}
 8014374:	200b      	movs	r0, #11
 8014376:	b002      	add	sp, #8
 8014378:	bd10      	pop	{r4, pc}
 801437a:	bf00      	nop
 801437c:	0801d9dc 	.word	0x0801d9dc

08014380 <rcl_node_get_default_options>:
 8014380:	b510      	push	{r4, lr}
 8014382:	4604      	mov	r4, r0
 8014384:	2270      	movs	r2, #112	; 0x70
 8014386:	2100      	movs	r1, #0
 8014388:	f007 fa7c 	bl	801b884 <memset>
 801438c:	4620      	mov	r0, r4
 801438e:	f7f9 f8cb 	bl	800d528 <rcutils_get_default_allocator>
 8014392:	2301      	movs	r3, #1
 8014394:	4620      	mov	r0, r4
 8014396:	7523      	strb	r3, [r4, #20]
 8014398:	bd10      	pop	{r4, pc}
 801439a:	bf00      	nop

0801439c <rcl_node_options_copy>:
 801439c:	2800      	cmp	r0, #0
 801439e:	bf18      	it	ne
 80143a0:	4288      	cmpne	r0, r1
 80143a2:	d01b      	beq.n	80143dc <rcl_node_options_copy+0x40>
 80143a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143a6:	fab1 f681 	clz	r6, r1
 80143aa:	460c      	mov	r4, r1
 80143ac:	0976      	lsrs	r6, r6, #5
 80143ae:	b199      	cbz	r1, 80143d8 <rcl_node_options_copy+0x3c>
 80143b0:	4605      	mov	r5, r0
 80143b2:	8a87      	ldrh	r7, [r0, #20]
 80143b4:	4684      	mov	ip, r0
 80143b6:	468e      	mov	lr, r1
 80143b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80143ba:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80143be:	682b      	ldr	r3, [r5, #0]
 80143c0:	2250      	movs	r2, #80	; 0x50
 80143c2:	f10c 0118 	add.w	r1, ip, #24
 80143c6:	f104 0018 	add.w	r0, r4, #24
 80143ca:	f8ce 3000 	str.w	r3, [lr]
 80143ce:	82a7      	strh	r7, [r4, #20]
 80143d0:	f007 fb89 	bl	801bae6 <memcpy>
 80143d4:	4630      	mov	r0, r6
 80143d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80143d8:	200b      	movs	r0, #11
 80143da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80143dc:	200b      	movs	r0, #11
 80143de:	4770      	bx	lr

080143e0 <rcl_node_resolve_name>:
 80143e0:	b082      	sub	sp, #8
 80143e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143e6:	b091      	sub	sp, #68	; 0x44
 80143e8:	ac1a      	add	r4, sp, #104	; 0x68
 80143ea:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 80143ee:	e884 000c 	stmia.w	r4, {r2, r3}
 80143f2:	2800      	cmp	r0, #0
 80143f4:	d03d      	beq.n	8014472 <rcl_node_resolve_name+0x92>
 80143f6:	460c      	mov	r4, r1
 80143f8:	4605      	mov	r5, r0
 80143fa:	f7ff ff93 	bl	8014324 <rcl_node_get_options>
 80143fe:	2800      	cmp	r0, #0
 8014400:	d03a      	beq.n	8014478 <rcl_node_resolve_name+0x98>
 8014402:	4628      	mov	r0, r5
 8014404:	f7ff ff7e 	bl	8014304 <rcl_node_get_name>
 8014408:	4606      	mov	r6, r0
 801440a:	4628      	mov	r0, r5
 801440c:	ad0b      	add	r5, sp, #44	; 0x2c
 801440e:	f7ff ff81 	bl	8014314 <rcl_node_get_namespace>
 8014412:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 8014416:	4607      	mov	r7, r0
 8014418:	46ac      	mov	ip, r5
 801441a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801441e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014422:	f8de 3000 	ldr.w	r3, [lr]
 8014426:	f8cc 3000 	str.w	r3, [ip]
 801442a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801442c:	b30b      	cbz	r3, 8014472 <rcl_node_resolve_name+0x92>
 801442e:	4689      	mov	r9, r1
 8014430:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8014434:	f002 fe0a 	bl	801704c <rcutils_get_zero_initialized_string_map>
 8014438:	ab10      	add	r3, sp, #64	; 0x40
 801443a:	9008      	str	r0, [sp, #32]
 801443c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8014440:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014444:	2100      	movs	r1, #0
 8014446:	a808      	add	r0, sp, #32
 8014448:	e895 000c 	ldmia.w	r5, {r2, r3}
 801444c:	f002 fe50 	bl	80170f0 <rcutils_string_map_init>
 8014450:	4683      	mov	fp, r0
 8014452:	b1a0      	cbz	r0, 801447e <rcl_node_resolve_name+0x9e>
 8014454:	f7f9 f884 	bl	800d560 <rcutils_get_error_string>
 8014458:	f7f9 f89a 	bl	800d590 <rcutils_reset_error>
 801445c:	f1bb 0f0a 	cmp.w	fp, #10
 8014460:	bf18      	it	ne
 8014462:	f04f 0b01 	movne.w	fp, #1
 8014466:	4658      	mov	r0, fp
 8014468:	b011      	add	sp, #68	; 0x44
 801446a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801446e:	b002      	add	sp, #8
 8014470:	4770      	bx	lr
 8014472:	f04f 0b0b 	mov.w	fp, #11
 8014476:	e7f6      	b.n	8014466 <rcl_node_resolve_name+0x86>
 8014478:	f04f 0b01 	mov.w	fp, #1
 801447c:	e7f3      	b.n	8014466 <rcl_node_resolve_name+0x86>
 801447e:	9009      	str	r0, [sp, #36]	; 0x24
 8014480:	9007      	str	r0, [sp, #28]
 8014482:	a808      	add	r0, sp, #32
 8014484:	f006 f952 	bl	801a72c <rcl_get_default_topic_name_substitutions>
 8014488:	4683      	mov	fp, r0
 801448a:	b180      	cbz	r0, 80144ae <rcl_node_resolve_name+0xce>
 801448c:	280a      	cmp	r0, #10
 801448e:	a808      	add	r0, sp, #32
 8014490:	bf18      	it	ne
 8014492:	f04f 0b01 	movne.w	fp, #1
 8014496:	f002 fe69 	bl	801716c <rcutils_string_map_fini>
 801449a:	4604      	mov	r4, r0
 801449c:	2800      	cmp	r0, #0
 801449e:	d15b      	bne.n	8014558 <rcl_node_resolve_name+0x178>
 80144a0:	4651      	mov	r1, sl
 80144a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80144a4:	47c8      	blx	r9
 80144a6:	4651      	mov	r1, sl
 80144a8:	4620      	mov	r0, r4
 80144aa:	47c8      	blx	r9
 80144ac:	e7db      	b.n	8014466 <rcl_node_resolve_name+0x86>
 80144ae:	ab09      	add	r3, sp, #36	; 0x24
 80144b0:	46ec      	mov	ip, sp
 80144b2:	9305      	str	r3, [sp, #20]
 80144b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80144b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80144ba:	682b      	ldr	r3, [r5, #0]
 80144bc:	463a      	mov	r2, r7
 80144be:	4631      	mov	r1, r6
 80144c0:	4620      	mov	r0, r4
 80144c2:	f8cc 3000 	str.w	r3, [ip]
 80144c6:	ab08      	add	r3, sp, #32
 80144c8:	f005 ffd0 	bl	801a46c <rcl_expand_topic_name>
 80144cc:	4683      	mov	fp, r0
 80144ce:	b9d8      	cbnz	r0, 8014508 <rcl_node_resolve_name+0x128>
 80144d0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80144d2:	4602      	mov	r2, r0
 80144d4:	9009      	str	r0, [sp, #36]	; 0x24
 80144d6:	a90a      	add	r1, sp, #40	; 0x28
 80144d8:	4620      	mov	r0, r4
 80144da:	f002 ff79 	bl	80173d0 <rmw_validate_full_topic_name>
 80144de:	bb50      	cbnz	r0, 8014536 <rcl_node_resolve_name+0x156>
 80144e0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80144e2:	2d00      	cmp	r5, #0
 80144e4:	d140      	bne.n	8014568 <rcl_node_resolve_name+0x188>
 80144e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80144e8:	a808      	add	r0, sp, #32
 80144ea:	601c      	str	r4, [r3, #0]
 80144ec:	f002 fe3e 	bl	801716c <rcutils_string_map_fini>
 80144f0:	4683      	mov	fp, r0
 80144f2:	2800      	cmp	r0, #0
 80144f4:	d043      	beq.n	801457e <rcl_node_resolve_name+0x19e>
 80144f6:	f7f9 f833 	bl	800d560 <rcutils_get_error_string>
 80144fa:	46a8      	mov	r8, r5
 80144fc:	f04f 0b01 	mov.w	fp, #1
 8014500:	462c      	mov	r4, r5
 8014502:	f7f9 f845 	bl	800d590 <rcutils_reset_error>
 8014506:	e00a      	b.n	801451e <rcl_node_resolve_name+0x13e>
 8014508:	2867      	cmp	r0, #103	; 0x67
 801450a:	bf14      	ite	ne
 801450c:	f04f 0800 	movne.w	r8, #0
 8014510:	f008 0801 	andeq.w	r8, r8, #1
 8014514:	9c07      	ldr	r4, [sp, #28]
 8014516:	a808      	add	r0, sp, #32
 8014518:	f002 fe28 	bl	801716c <rcutils_string_map_fini>
 801451c:	bb50      	cbnz	r0, 8014574 <rcl_node_resolve_name+0x194>
 801451e:	4651      	mov	r1, sl
 8014520:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014522:	47c8      	blx	r9
 8014524:	4651      	mov	r1, sl
 8014526:	4620      	mov	r0, r4
 8014528:	47c8      	blx	r9
 801452a:	f1b8 0f00 	cmp.w	r8, #0
 801452e:	bf18      	it	ne
 8014530:	f04f 0b68 	movne.w	fp, #104	; 0x68
 8014534:	e797      	b.n	8014466 <rcl_node_resolve_name+0x86>
 8014536:	f7f9 f813 	bl	800d560 <rcutils_get_error_string>
 801453a:	f7f9 f829 	bl	800d590 <rcutils_reset_error>
 801453e:	a808      	add	r0, sp, #32
 8014540:	f002 fe14 	bl	801716c <rcutils_string_map_fini>
 8014544:	b998      	cbnz	r0, 801456e <rcl_node_resolve_name+0x18e>
 8014546:	4651      	mov	r1, sl
 8014548:	9809      	ldr	r0, [sp, #36]	; 0x24
 801454a:	47c8      	blx	r9
 801454c:	4651      	mov	r1, sl
 801454e:	4620      	mov	r0, r4
 8014550:	f04f 0b01 	mov.w	fp, #1
 8014554:	47c8      	blx	r9
 8014556:	e786      	b.n	8014466 <rcl_node_resolve_name+0x86>
 8014558:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801455c:	f7f9 f800 	bl	800d560 <rcutils_get_error_string>
 8014560:	f7f9 f816 	bl	800d590 <rcutils_reset_error>
 8014564:	4644      	mov	r4, r8
 8014566:	e7da      	b.n	801451e <rcl_node_resolve_name+0x13e>
 8014568:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801456c:	e7d3      	b.n	8014516 <rcl_node_resolve_name+0x136>
 801456e:	46d8      	mov	r8, fp
 8014570:	f04f 0b01 	mov.w	fp, #1
 8014574:	f7f8 fff4 	bl	800d560 <rcutils_get_error_string>
 8014578:	f7f9 f80a 	bl	800d590 <rcutils_reset_error>
 801457c:	e7cf      	b.n	801451e <rcl_node_resolve_name+0x13e>
 801457e:	4651      	mov	r1, sl
 8014580:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014582:	47c8      	blx	r9
 8014584:	4651      	mov	r1, sl
 8014586:	4658      	mov	r0, fp
 8014588:	47c8      	blx	r9
 801458a:	e76c      	b.n	8014466 <rcl_node_resolve_name+0x86>

0801458c <exact_match_lookup>:
 801458c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801458e:	f102 0708 	add.w	r7, r2, #8
 8014592:	460b      	mov	r3, r1
 8014594:	b085      	sub	sp, #20
 8014596:	4614      	mov	r4, r2
 8014598:	4606      	mov	r6, r0
 801459a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801459e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80145a2:	4618      	mov	r0, r3
 80145a4:	4919      	ldr	r1, [pc, #100]	; (801460c <exact_match_lookup+0x80>)
 80145a6:	e894 000c 	ldmia.w	r4, {r2, r3}
 80145aa:	f002 fbbf 	bl	8016d2c <rcutils_join_path>
 80145ae:	7833      	ldrb	r3, [r6, #0]
 80145b0:	4605      	mov	r5, r0
 80145b2:	2b2f      	cmp	r3, #47	; 0x2f
 80145b4:	d023      	beq.n	80145fe <exact_match_lookup+0x72>
 80145b6:	f104 030c 	add.w	r3, r4, #12
 80145ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80145be:	e88d 0003 	stmia.w	sp, {r0, r1}
 80145c2:	1c70      	adds	r0, r6, #1
 80145c4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80145c8:	f002 fbb6 	bl	8016d38 <rcutils_to_native_path>
 80145cc:	4606      	mov	r6, r0
 80145ce:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80145d2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80145d6:	4631      	mov	r1, r6
 80145d8:	4628      	mov	r0, r5
 80145da:	e894 000c 	ldmia.w	r4, {r2, r3}
 80145de:	f002 fba5 	bl	8016d2c <rcutils_join_path>
 80145e2:	4603      	mov	r3, r0
 80145e4:	4630      	mov	r0, r6
 80145e6:	6862      	ldr	r2, [r4, #4]
 80145e8:	461e      	mov	r6, r3
 80145ea:	6921      	ldr	r1, [r4, #16]
 80145ec:	4790      	blx	r2
 80145ee:	4628      	mov	r0, r5
 80145f0:	4635      	mov	r5, r6
 80145f2:	6863      	ldr	r3, [r4, #4]
 80145f4:	6921      	ldr	r1, [r4, #16]
 80145f6:	4798      	blx	r3
 80145f8:	4628      	mov	r0, r5
 80145fa:	b005      	add	sp, #20
 80145fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80145fe:	7873      	ldrb	r3, [r6, #1]
 8014600:	2b00      	cmp	r3, #0
 8014602:	d1d8      	bne.n	80145b6 <exact_match_lookup+0x2a>
 8014604:	4628      	mov	r0, r5
 8014606:	b005      	add	sp, #20
 8014608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801460a:	bf00      	nop
 801460c:	0801da3c 	.word	0x0801da3c

08014610 <rcl_get_secure_root>:
 8014610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014614:	b085      	sub	sp, #20
 8014616:	b168      	cbz	r0, 8014634 <rcl_get_secure_root+0x24>
 8014618:	4607      	mov	r7, r0
 801461a:	4608      	mov	r0, r1
 801461c:	460c      	mov	r4, r1
 801461e:	f7f8 ff91 	bl	800d544 <rcutils_allocator_is_valid>
 8014622:	b138      	cbz	r0, 8014634 <rcl_get_secure_root+0x24>
 8014624:	2300      	movs	r3, #0
 8014626:	482d      	ldr	r0, [pc, #180]	; (80146dc <rcl_get_secure_root+0xcc>)
 8014628:	a903      	add	r1, sp, #12
 801462a:	9303      	str	r3, [sp, #12]
 801462c:	f002 fb64 	bl	8016cf8 <rcutils_get_env>
 8014630:	4605      	mov	r5, r0
 8014632:	b120      	cbz	r0, 801463e <rcl_get_secure_root+0x2e>
 8014634:	2500      	movs	r5, #0
 8014636:	4628      	mov	r0, r5
 8014638:	b005      	add	sp, #20
 801463a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801463e:	9b03      	ldr	r3, [sp, #12]
 8014640:	781a      	ldrb	r2, [r3, #0]
 8014642:	2a00      	cmp	r2, #0
 8014644:	d0f6      	beq.n	8014634 <rcl_get_secure_root+0x24>
 8014646:	f104 090c 	add.w	r9, r4, #12
 801464a:	e899 0003 	ldmia.w	r9, {r0, r1}
 801464e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014652:	4618      	mov	r0, r3
 8014654:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8014658:	f002 fcb0 	bl	8016fbc <rcutils_strdup>
 801465c:	4680      	mov	r8, r0
 801465e:	2800      	cmp	r0, #0
 8014660:	d0e8      	beq.n	8014634 <rcl_get_secure_root+0x24>
 8014662:	a903      	add	r1, sp, #12
 8014664:	481e      	ldr	r0, [pc, #120]	; (80146e0 <rcl_get_secure_root+0xd0>)
 8014666:	9503      	str	r5, [sp, #12]
 8014668:	f002 fb46 	bl	8016cf8 <rcutils_get_env>
 801466c:	b160      	cbz	r0, 8014688 <rcl_get_secure_root+0x78>
 801466e:	2600      	movs	r6, #0
 8014670:	4630      	mov	r0, r6
 8014672:	6863      	ldr	r3, [r4, #4]
 8014674:	6921      	ldr	r1, [r4, #16]
 8014676:	4798      	blx	r3
 8014678:	4640      	mov	r0, r8
 801467a:	6863      	ldr	r3, [r4, #4]
 801467c:	6921      	ldr	r1, [r4, #16]
 801467e:	4798      	blx	r3
 8014680:	4628      	mov	r0, r5
 8014682:	b005      	add	sp, #20
 8014684:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014688:	9b03      	ldr	r3, [sp, #12]
 801468a:	781e      	ldrb	r6, [r3, #0]
 801468c:	b1f6      	cbz	r6, 80146cc <rcl_get_secure_root+0xbc>
 801468e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8014692:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014696:	4618      	mov	r0, r3
 8014698:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801469c:	f002 fc8e 	bl	8016fbc <rcutils_strdup>
 80146a0:	4606      	mov	r6, r0
 80146a2:	2800      	cmp	r0, #0
 80146a4:	d0e3      	beq.n	801466e <rcl_get_secure_root+0x5e>
 80146a6:	4622      	mov	r2, r4
 80146a8:	4641      	mov	r1, r8
 80146aa:	f7ff ff6f 	bl	801458c <exact_match_lookup>
 80146ae:	4605      	mov	r5, r0
 80146b0:	2d00      	cmp	r5, #0
 80146b2:	d0dd      	beq.n	8014670 <rcl_get_secure_root+0x60>
 80146b4:	4628      	mov	r0, r5
 80146b6:	f002 fb37 	bl	8016d28 <rcutils_is_directory>
 80146ba:	4603      	mov	r3, r0
 80146bc:	2800      	cmp	r0, #0
 80146be:	d1d7      	bne.n	8014670 <rcl_get_secure_root+0x60>
 80146c0:	4628      	mov	r0, r5
 80146c2:	6921      	ldr	r1, [r4, #16]
 80146c4:	461d      	mov	r5, r3
 80146c6:	6863      	ldr	r3, [r4, #4]
 80146c8:	4798      	blx	r3
 80146ca:	e7d1      	b.n	8014670 <rcl_get_secure_root+0x60>
 80146cc:	4622      	mov	r2, r4
 80146ce:	4638      	mov	r0, r7
 80146d0:	4641      	mov	r1, r8
 80146d2:	f7ff ff5b 	bl	801458c <exact_match_lookup>
 80146d6:	4605      	mov	r5, r0
 80146d8:	e7ea      	b.n	80146b0 <rcl_get_secure_root+0xa0>
 80146da:	bf00      	nop
 80146dc:	0801da48 	.word	0x0801da48
 80146e0:	0801da60 	.word	0x0801da60

080146e4 <rcl_get_security_options_from_environment>:
 80146e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146e8:	b082      	sub	sp, #8
 80146ea:	2300      	movs	r3, #0
 80146ec:	4606      	mov	r6, r0
 80146ee:	460f      	mov	r7, r1
 80146f0:	4821      	ldr	r0, [pc, #132]	; (8014778 <rcl_get_security_options_from_environment+0x94>)
 80146f2:	a901      	add	r1, sp, #4
 80146f4:	4690      	mov	r8, r2
 80146f6:	9301      	str	r3, [sp, #4]
 80146f8:	f002 fafe 	bl	8016cf8 <rcutils_get_env>
 80146fc:	b120      	cbz	r0, 8014708 <rcl_get_security_options_from_environment+0x24>
 80146fe:	2501      	movs	r5, #1
 8014700:	4628      	mov	r0, r5
 8014702:	b002      	add	sp, #8
 8014704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014708:	4604      	mov	r4, r0
 801470a:	491c      	ldr	r1, [pc, #112]	; (801477c <rcl_get_security_options_from_environment+0x98>)
 801470c:	9801      	ldr	r0, [sp, #4]
 801470e:	f7eb fd97 	bl	8000240 <strcmp>
 8014712:	4605      	mov	r5, r0
 8014714:	b9f0      	cbnz	r0, 8014754 <rcl_get_security_options_from_environment+0x70>
 8014716:	9001      	str	r0, [sp, #4]
 8014718:	f1b8 0f00 	cmp.w	r8, #0
 801471c:	d021      	beq.n	8014762 <rcl_get_security_options_from_environment+0x7e>
 801471e:	a901      	add	r1, sp, #4
 8014720:	4817      	ldr	r0, [pc, #92]	; (8014780 <rcl_get_security_options_from_environment+0x9c>)
 8014722:	f002 fae9 	bl	8016cf8 <rcutils_get_env>
 8014726:	2800      	cmp	r0, #0
 8014728:	d1e9      	bne.n	80146fe <rcl_get_security_options_from_environment+0x1a>
 801472a:	4916      	ldr	r1, [pc, #88]	; (8014784 <rcl_get_security_options_from_environment+0xa0>)
 801472c:	9801      	ldr	r0, [sp, #4]
 801472e:	f7eb fd87 	bl	8000240 <strcmp>
 8014732:	4603      	mov	r3, r0
 8014734:	4639      	mov	r1, r7
 8014736:	4630      	mov	r0, r6
 8014738:	fab3 f383 	clz	r3, r3
 801473c:	095b      	lsrs	r3, r3, #5
 801473e:	f888 3000 	strb.w	r3, [r8]
 8014742:	f7ff ff65 	bl	8014610 <rcl_get_secure_root>
 8014746:	b170      	cbz	r0, 8014766 <rcl_get_security_options_from_environment+0x82>
 8014748:	f8c8 0004 	str.w	r0, [r8, #4]
 801474c:	4628      	mov	r0, r5
 801474e:	b002      	add	sp, #8
 8014750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014754:	4625      	mov	r5, r4
 8014756:	f888 4000 	strb.w	r4, [r8]
 801475a:	4628      	mov	r0, r5
 801475c:	b002      	add	sp, #8
 801475e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014762:	250b      	movs	r5, #11
 8014764:	e7cc      	b.n	8014700 <rcl_get_security_options_from_environment+0x1c>
 8014766:	f898 5000 	ldrb.w	r5, [r8]
 801476a:	f1a5 0501 	sub.w	r5, r5, #1
 801476e:	fab5 f585 	clz	r5, r5
 8014772:	096d      	lsrs	r5, r5, #5
 8014774:	e7c4      	b.n	8014700 <rcl_get_security_options_from_environment+0x1c>
 8014776:	bf00      	nop
 8014778:	0801da00 	.word	0x0801da00
 801477c:	0801da14 	.word	0x0801da14
 8014780:	0801da1c 	.word	0x0801da1c
 8014784:	0801da34 	.word	0x0801da34

08014788 <rcl_get_zero_initialized_service>:
 8014788:	4b01      	ldr	r3, [pc, #4]	; (8014790 <rcl_get_zero_initialized_service+0x8>)
 801478a:	6818      	ldr	r0, [r3, #0]
 801478c:	4770      	bx	lr
 801478e:	bf00      	nop
 8014790:	0801da80 	.word	0x0801da80

08014794 <rcl_service_init>:
 8014794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014798:	b086      	sub	sp, #24
 801479a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801479c:	2d00      	cmp	r5, #0
 801479e:	d04d      	beq.n	801483c <rcl_service_init+0xa8>
 80147a0:	f105 0950 	add.w	r9, r5, #80	; 0x50
 80147a4:	4604      	mov	r4, r0
 80147a6:	460e      	mov	r6, r1
 80147a8:	4690      	mov	r8, r2
 80147aa:	4648      	mov	r0, r9
 80147ac:	461f      	mov	r7, r3
 80147ae:	f7f8 fec9 	bl	800d544 <rcutils_allocator_is_valid>
 80147b2:	2c00      	cmp	r4, #0
 80147b4:	d042      	beq.n	801483c <rcl_service_init+0xa8>
 80147b6:	f080 0001 	eor.w	r0, r0, #1
 80147ba:	b2c0      	uxtb	r0, r0
 80147bc:	2800      	cmp	r0, #0
 80147be:	d13d      	bne.n	801483c <rcl_service_init+0xa8>
 80147c0:	4630      	mov	r0, r6
 80147c2:	f7ff fd95 	bl	80142f0 <rcl_node_is_valid>
 80147c6:	2800      	cmp	r0, #0
 80147c8:	d042      	beq.n	8014850 <rcl_service_init+0xbc>
 80147ca:	2f00      	cmp	r7, #0
 80147cc:	d036      	beq.n	801483c <rcl_service_init+0xa8>
 80147ce:	f1b8 0f00 	cmp.w	r8, #0
 80147d2:	d033      	beq.n	801483c <rcl_service_init+0xa8>
 80147d4:	f8d4 a000 	ldr.w	sl, [r4]
 80147d8:	f1ba 0f00 	cmp.w	sl, #0
 80147dc:	d133      	bne.n	8014846 <rcl_service_init+0xb2>
 80147de:	f44f 718c 	mov.w	r1, #280	; 0x118
 80147e2:	2001      	movs	r0, #1
 80147e4:	e9d5 3217 	ldrd	r3, r2, [r5, #92]	; 0x5c
 80147e8:	4798      	blx	r3
 80147ea:	6020      	str	r0, [r4, #0]
 80147ec:	2800      	cmp	r0, #0
 80147ee:	d075      	beq.n	80148dc <rcl_service_init+0x148>
 80147f0:	f500 7088 	add.w	r0, r0, #272	; 0x110
 80147f4:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80147f8:	2201      	movs	r2, #1
 80147fa:	f8cd a010 	str.w	sl, [sp, #16]
 80147fe:	9005      	str	r0, [sp, #20]
 8014800:	9203      	str	r2, [sp, #12]
 8014802:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014806:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801480a:	4639      	mov	r1, r7
 801480c:	4630      	mov	r0, r6
 801480e:	e899 000c 	ldmia.w	r9, {r2, r3}
 8014812:	f7ff fde5 	bl	80143e0 <rcl_node_resolve_name>
 8014816:	4607      	mov	r7, r0
 8014818:	b1f8      	cbz	r0, 801485a <rcl_service_init+0xc6>
 801481a:	f1a0 0368 	sub.w	r3, r0, #104	; 0x68
 801481e:	6820      	ldr	r0, [r4, #0]
 8014820:	2b01      	cmp	r3, #1
 8014822:	d943      	bls.n	80148ac <rcl_service_init+0x118>
 8014824:	2f0a      	cmp	r7, #10
 8014826:	d000      	beq.n	801482a <rcl_service_init+0x96>
 8014828:	2701      	movs	r7, #1
 801482a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 801482c:	6e29      	ldr	r1, [r5, #96]	; 0x60
 801482e:	4798      	blx	r3
 8014830:	2300      	movs	r3, #0
 8014832:	4638      	mov	r0, r7
 8014834:	6023      	str	r3, [r4, #0]
 8014836:	b006      	add	sp, #24
 8014838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801483c:	270b      	movs	r7, #11
 801483e:	4638      	mov	r0, r7
 8014840:	b006      	add	sp, #24
 8014842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014846:	2764      	movs	r7, #100	; 0x64
 8014848:	4638      	mov	r0, r7
 801484a:	b006      	add	sp, #24
 801484c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014850:	27c8      	movs	r7, #200	; 0xc8
 8014852:	4638      	mov	r0, r7
 8014854:	b006      	add	sp, #24
 8014856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801485a:	4630      	mov	r0, r6
 801485c:	f7ff fd6a 	bl	8014334 <rcl_node_get_rmw_handle>
 8014860:	6827      	ldr	r7, [r4, #0]
 8014862:	4641      	mov	r1, r8
 8014864:	462b      	mov	r3, r5
 8014866:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801486a:	f003 fc9b 	bl	80181a4 <rmw_create_service>
 801486e:	6821      	ldr	r1, [r4, #0]
 8014870:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 8014874:	f8d1 0108 	ldr.w	r0, [r1, #264]	; 0x108
 8014878:	b390      	cbz	r0, 80148e0 <rcl_service_init+0x14c>
 801487a:	3168      	adds	r1, #104	; 0x68
 801487c:	f003 fdc4 	bl	8018408 <rmw_service_request_subscription_get_actual_qos>
 8014880:	b9b0      	cbnz	r0, 80148b0 <rcl_service_init+0x11c>
 8014882:	6823      	ldr	r3, [r4, #0]
 8014884:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 8014888:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 801488c:	f003 fda8 	bl	80183e0 <rmw_service_response_publisher_get_actual_qos>
 8014890:	4607      	mov	r7, r0
 8014892:	b968      	cbnz	r0, 80148b0 <rcl_service_init+0x11c>
 8014894:	6820      	ldr	r0, [r4, #0]
 8014896:	2268      	movs	r2, #104	; 0x68
 8014898:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 801489c:	4629      	mov	r1, r5
 801489e:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
 80148a2:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
 80148a6:	f007 f91e 	bl	801bae6 <memcpy>
 80148aa:	e7c8      	b.n	801483e <rcl_service_init+0xaa>
 80148ac:	2768      	movs	r7, #104	; 0x68
 80148ae:	e7bc      	b.n	801482a <rcl_service_init+0x96>
 80148b0:	f7ff f904 	bl	8013abc <rcl_convert_rmw_ret_to_rcl_ret>
 80148b4:	4607      	mov	r7, r0
 80148b6:	4630      	mov	r0, r6
 80148b8:	f7ff fd3c 	bl	8014334 <rcl_node_get_rmw_handle>
 80148bc:	6823      	ldr	r3, [r4, #0]
 80148be:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 80148c2:	f003 fd49 	bl	8018358 <rmw_destroy_service>
 80148c6:	6821      	ldr	r1, [r4, #0]
 80148c8:	f8d1 0110 	ldr.w	r0, [r1, #272]	; 0x110
 80148cc:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80148ce:	6e29      	ldr	r1, [r5, #96]	; 0x60
 80148d0:	4798      	blx	r3
 80148d2:	6820      	ldr	r0, [r4, #0]
 80148d4:	2300      	movs	r3, #0
 80148d6:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
 80148da:	e7a6      	b.n	801482a <rcl_service_init+0x96>
 80148dc:	270a      	movs	r7, #10
 80148de:	e7ae      	b.n	801483e <rcl_service_init+0xaa>
 80148e0:	2701      	movs	r7, #1
 80148e2:	e7f1      	b.n	80148c8 <rcl_service_init+0x134>

080148e4 <rcl_service_get_default_options>:
 80148e4:	b530      	push	{r4, r5, lr}
 80148e6:	4d0f      	ldr	r5, [pc, #60]	; (8014924 <rcl_service_get_default_options+0x40>)
 80148e8:	b087      	sub	sp, #28
 80148ea:	4604      	mov	r4, r0
 80148ec:	2250      	movs	r2, #80	; 0x50
 80148ee:	490e      	ldr	r1, [pc, #56]	; (8014928 <rcl_service_get_default_options+0x44>)
 80148f0:	4628      	mov	r0, r5
 80148f2:	f007 f8f8 	bl	801bae6 <memcpy>
 80148f6:	4668      	mov	r0, sp
 80148f8:	f7f8 fe16 	bl	800d528 <rcutils_get_default_allocator>
 80148fc:	46ec      	mov	ip, sp
 80148fe:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8014902:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014906:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801490a:	f8dc 3000 	ldr.w	r3, [ip]
 801490e:	2268      	movs	r2, #104	; 0x68
 8014910:	4629      	mov	r1, r5
 8014912:	4620      	mov	r0, r4
 8014914:	f8ce 3000 	str.w	r3, [lr]
 8014918:	f007 f8e5 	bl	801bae6 <memcpy>
 801491c:	4620      	mov	r0, r4
 801491e:	b007      	add	sp, #28
 8014920:	bd30      	pop	{r4, r5, pc}
 8014922:	bf00      	nop
 8014924:	200105b0 	.word	0x200105b0
 8014928:	0801da88 	.word	0x0801da88

0801492c <rcl_service_get_rmw_handle>:
 801492c:	b118      	cbz	r0, 8014936 <rcl_service_get_rmw_handle+0xa>
 801492e:	6800      	ldr	r0, [r0, #0]
 8014930:	b108      	cbz	r0, 8014936 <rcl_service_get_rmw_handle+0xa>
 8014932:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8014936:	4770      	bx	lr

08014938 <rcl_take_request>:
 8014938:	b5f0      	push	{r4, r5, r6, r7, lr}
 801493a:	468e      	mov	lr, r1
 801493c:	b091      	sub	sp, #68	; 0x44
 801493e:	460c      	mov	r4, r1
 8014940:	4617      	mov	r7, r2
 8014942:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8014946:	4605      	mov	r5, r0
 8014948:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801494c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014950:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014954:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014958:	b30d      	cbz	r5, 801499e <rcl_take_request+0x66>
 801495a:	682b      	ldr	r3, [r5, #0]
 801495c:	b1fb      	cbz	r3, 801499e <rcl_take_request+0x66>
 801495e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8014962:	b1e0      	cbz	r0, 801499e <rcl_take_request+0x66>
 8014964:	b397      	cbz	r7, 80149cc <rcl_take_request+0x94>
 8014966:	2300      	movs	r3, #0
 8014968:	463a      	mov	r2, r7
 801496a:	a906      	add	r1, sp, #24
 801496c:	f88d 3017 	strb.w	r3, [sp, #23]
 8014970:	f10d 0317 	add.w	r3, sp, #23
 8014974:	f003 fb14 	bl	8017fa0 <rmw_take_request>
 8014978:	4606      	mov	r6, r0
 801497a:	b198      	cbz	r0, 80149a4 <rcl_take_request+0x6c>
 801497c:	280a      	cmp	r0, #10
 801497e:	bf18      	it	ne
 8014980:	2601      	movne	r6, #1
 8014982:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8014986:	46a6      	mov	lr, r4
 8014988:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801498c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014990:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8014994:	e88e 0003 	stmia.w	lr, {r0, r1}
 8014998:	4630      	mov	r0, r6
 801499a:	b011      	add	sp, #68	; 0x44
 801499c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801499e:	f44f 7616 	mov.w	r6, #600	; 0x258
 80149a2:	e7ee      	b.n	8014982 <rcl_take_request+0x4a>
 80149a4:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80149a8:	b193      	cbz	r3, 80149d0 <rcl_take_request+0x98>
 80149aa:	682b      	ldr	r3, [r5, #0]
 80149ac:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
 80149b0:	2800      	cmp	r0, #0
 80149b2:	d0e6      	beq.n	8014982 <rcl_take_request+0x4a>
 80149b4:	463a      	mov	r2, r7
 80149b6:	ab0a      	add	r3, sp, #40	; 0x28
 80149b8:	2101      	movs	r1, #1
 80149ba:	9302      	str	r3, [sp, #8]
 80149bc:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 80149c0:	e9cd 6700 	strd	r6, r7, [sp]
 80149c4:	f000 f844 	bl	8014a50 <rcl_send_service_event_message>
 80149c8:	4606      	mov	r6, r0
 80149ca:	e7da      	b.n	8014982 <rcl_take_request+0x4a>
 80149cc:	260b      	movs	r6, #11
 80149ce:	e7d8      	b.n	8014982 <rcl_take_request+0x4a>
 80149d0:	f240 2659 	movw	r6, #601	; 0x259
 80149d4:	e7d5      	b.n	8014982 <rcl_take_request+0x4a>
 80149d6:	bf00      	nop

080149d8 <rcl_send_response>:
 80149d8:	b350      	cbz	r0, 8014a30 <rcl_send_response+0x58>
 80149da:	6803      	ldr	r3, [r0, #0]
 80149dc:	b570      	push	{r4, r5, r6, lr}
 80149de:	4604      	mov	r4, r0
 80149e0:	b084      	sub	sp, #16
 80149e2:	b1cb      	cbz	r3, 8014a18 <rcl_send_response+0x40>
 80149e4:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 80149e8:	b1b0      	cbz	r0, 8014a18 <rcl_send_response+0x40>
 80149ea:	4615      	mov	r5, r2
 80149ec:	b1ea      	cbz	r2, 8014a2a <rcl_send_response+0x52>
 80149ee:	460e      	mov	r6, r1
 80149f0:	b1d9      	cbz	r1, 8014a2a <rcl_send_response+0x52>
 80149f2:	f003 fb33 	bl	801805c <rmw_send_response>
 80149f6:	b998      	cbnz	r0, 8014a20 <rcl_send_response+0x48>
 80149f8:	6823      	ldr	r3, [r4, #0]
 80149fa:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80149fe:	b16b      	cbz	r3, 8014a1c <rcl_send_response+0x44>
 8014a00:	462a      	mov	r2, r5
 8014a02:	2102      	movs	r1, #2
 8014a04:	4618      	mov	r0, r3
 8014a06:	ed96 7b04 	vldr	d7, [r6, #16]
 8014a0a:	9602      	str	r6, [sp, #8]
 8014a0c:	ed8d 7b00 	vstr	d7, [sp]
 8014a10:	f000 f81e 	bl	8014a50 <rcl_send_service_event_message>
 8014a14:	b004      	add	sp, #16
 8014a16:	bd70      	pop	{r4, r5, r6, pc}
 8014a18:	f44f 7016 	mov.w	r0, #600	; 0x258
 8014a1c:	b004      	add	sp, #16
 8014a1e:	bd70      	pop	{r4, r5, r6, pc}
 8014a20:	2802      	cmp	r0, #2
 8014a22:	bf18      	it	ne
 8014a24:	2001      	movne	r0, #1
 8014a26:	b004      	add	sp, #16
 8014a28:	bd70      	pop	{r4, r5, r6, pc}
 8014a2a:	200b      	movs	r0, #11
 8014a2c:	b004      	add	sp, #16
 8014a2e:	bd70      	pop	{r4, r5, r6, pc}
 8014a30:	f44f 7016 	mov.w	r0, #600	; 0x258
 8014a34:	4770      	bx	lr
 8014a36:	bf00      	nop

08014a38 <rcl_service_is_valid>:
 8014a38:	b130      	cbz	r0, 8014a48 <rcl_service_is_valid+0x10>
 8014a3a:	6800      	ldr	r0, [r0, #0]
 8014a3c:	b120      	cbz	r0, 8014a48 <rcl_service_is_valid+0x10>
 8014a3e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8014a42:	3800      	subs	r0, #0
 8014a44:	bf18      	it	ne
 8014a46:	2001      	movne	r0, #1
 8014a48:	4770      	bx	lr
 8014a4a:	bf00      	nop
 8014a4c:	0000      	movs	r0, r0
	...

08014a50 <rcl_send_service_event_message>:
 8014a50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014a54:	b093      	sub	sp, #76	; 0x4c
 8014a56:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8014a58:	b196      	cbz	r6, 8014a80 <rcl_send_service_event_message+0x30>
 8014a5a:	4615      	mov	r5, r2
 8014a5c:	b182      	cbz	r2, 8014a80 <rcl_send_service_event_message+0x30>
 8014a5e:	4604      	mov	r4, r0
 8014a60:	b148      	cbz	r0, 8014a76 <rcl_send_service_event_message+0x26>
 8014a62:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8014a66:	b133      	cbz	r3, 8014a76 <rcl_send_service_event_message+0x26>
 8014a68:	68c0      	ldr	r0, [r0, #12]
 8014a6a:	460f      	mov	r7, r1
 8014a6c:	f000 f90c 	bl	8014c88 <rcl_clock_valid>
 8014a70:	b108      	cbz	r0, 8014a76 <rcl_send_service_event_message+0x26>
 8014a72:	7a23      	ldrb	r3, [r4, #8]
 8014a74:	b94b      	cbnz	r3, 8014a8a <rcl_send_service_event_message+0x3a>
 8014a76:	2401      	movs	r4, #1
 8014a78:	4620      	mov	r0, r4
 8014a7a:	b013      	add	sp, #76	; 0x4c
 8014a7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a80:	240b      	movs	r4, #11
 8014a82:	4620      	mov	r0, r4
 8014a84:	b013      	add	sp, #76	; 0x4c
 8014a86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a8a:	f104 0e60 	add.w	lr, r4, #96	; 0x60
 8014a8e:	f10d 0c0c 	add.w	ip, sp, #12
 8014a92:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014a96:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014a9a:	f8de 3000 	ldr.w	r3, [lr]
 8014a9e:	a803      	add	r0, sp, #12
 8014aa0:	f8cc 3000 	str.w	r3, [ip]
 8014aa4:	f7f8 fd4e 	bl	800d544 <rcutils_allocator_is_valid>
 8014aa8:	2800      	cmp	r0, #0
 8014aaa:	d0e9      	beq.n	8014a80 <rcl_send_service_event_message+0x30>
 8014aac:	6820      	ldr	r0, [r4, #0]
 8014aae:	f7f7 fd45 	bl	800c53c <rcl_publisher_is_valid>
 8014ab2:	2800      	cmp	r0, #0
 8014ab4:	d05e      	beq.n	8014b74 <rcl_send_service_event_message+0x124>
 8014ab6:	4669      	mov	r1, sp
 8014ab8:	68e0      	ldr	r0, [r4, #12]
 8014aba:	f000 f977 	bl	8014dac <rcl_clock_get_now>
 8014abe:	4601      	mov	r1, r0
 8014ac0:	2800      	cmp	r0, #0
 8014ac2:	d146      	bne.n	8014b52 <rcl_send_service_event_message+0x102>
 8014ac4:	2220      	movs	r2, #32
 8014ac6:	eb0d 0002 	add.w	r0, sp, r2
 8014aca:	f006 fedb 	bl	801b884 <memset>
 8014ace:	f88d 7020 	strb.w	r7, [sp, #32]
 8014ad2:	e9dd 8900 	ldrd	r8, r9, [sp]
 8014ad6:	a32a      	add	r3, pc, #168	; (adr r3, 8014b80 <rcl_send_service_event_message+0x130>)
 8014ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014adc:	4640      	mov	r0, r8
 8014ade:	4649      	mov	r1, r9
 8014ae0:	f7eb fc16 	bl	8000310 <__aeabi_ldivmod>
 8014ae4:	4649      	mov	r1, r9
 8014ae6:	9009      	str	r0, [sp, #36]	; 0x24
 8014ae8:	4640      	mov	r0, r8
 8014aea:	a325      	add	r3, pc, #148	; (adr r3, 8014b80 <rcl_send_service_event_message+0x130>)
 8014aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014af0:	f7eb fc0e 	bl	8000310 <__aeabi_ldivmod>
 8014af4:	920a      	str	r2, [sp, #40]	; 0x28
 8014af6:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 8014afa:	6830      	ldr	r0, [r6, #0]
 8014afc:	6871      	ldr	r1, [r6, #4]
 8014afe:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8014b02:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8014b06:	7a23      	ldrb	r3, [r4, #8]
 8014b08:	68b2      	ldr	r2, [r6, #8]
 8014b0a:	2b01      	cmp	r3, #1
 8014b0c:	68f3      	ldr	r3, [r6, #12]
 8014b0e:	bf08      	it	eq
 8014b10:	2500      	moveq	r5, #0
 8014b12:	2f01      	cmp	r7, #1
 8014b14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014b18:	d81f      	bhi.n	8014b5a <rcl_send_service_event_message+0x10a>
 8014b1a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8014b1e:	462a      	mov	r2, r5
 8014b20:	a808      	add	r0, sp, #32
 8014b22:	a903      	add	r1, sp, #12
 8014b24:	699d      	ldr	r5, [r3, #24]
 8014b26:	2300      	movs	r3, #0
 8014b28:	47a8      	blx	r5
 8014b2a:	4605      	mov	r5, r0
 8014b2c:	2d00      	cmp	r5, #0
 8014b2e:	d0a2      	beq.n	8014a76 <rcl_send_service_event_message+0x26>
 8014b30:	4629      	mov	r1, r5
 8014b32:	6820      	ldr	r0, [r4, #0]
 8014b34:	2200      	movs	r2, #0
 8014b36:	f7f7 fcdd 	bl	800c4f4 <rcl_publish>
 8014b3a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8014b3e:	4604      	mov	r4, r0
 8014b40:	a903      	add	r1, sp, #12
 8014b42:	4628      	mov	r0, r5
 8014b44:	69db      	ldr	r3, [r3, #28]
 8014b46:	4798      	blx	r3
 8014b48:	2c00      	cmp	r4, #0
 8014b4a:	d095      	beq.n	8014a78 <rcl_send_service_event_message+0x28>
 8014b4c:	f7f8 fd20 	bl	800d590 <rcutils_reset_error>
 8014b50:	e792      	b.n	8014a78 <rcl_send_service_event_message+0x28>
 8014b52:	2401      	movs	r4, #1
 8014b54:	f7f8 fd1c 	bl	800d590 <rcutils_reset_error>
 8014b58:	e78e      	b.n	8014a78 <rcl_send_service_event_message+0x28>
 8014b5a:	1eb9      	subs	r1, r7, #2
 8014b5c:	2901      	cmp	r1, #1
 8014b5e:	d8f8      	bhi.n	8014b52 <rcl_send_service_event_message+0x102>
 8014b60:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8014b64:	462b      	mov	r3, r5
 8014b66:	a808      	add	r0, sp, #32
 8014b68:	a903      	add	r1, sp, #12
 8014b6a:	6995      	ldr	r5, [r2, #24]
 8014b6c:	2200      	movs	r2, #0
 8014b6e:	47a8      	blx	r5
 8014b70:	4605      	mov	r5, r0
 8014b72:	e7db      	b.n	8014b2c <rcl_send_service_event_message+0xdc>
 8014b74:	f44f 7496 	mov.w	r4, #300	; 0x12c
 8014b78:	e77e      	b.n	8014a78 <rcl_send_service_event_message+0x28>
 8014b7a:	bf00      	nop
 8014b7c:	f3af 8000 	nop.w
 8014b80:	3b9aca00 	.word	0x3b9aca00
 8014b84:	00000000 	.word	0x00000000

08014b88 <rcl_take>:
 8014b88:	2800      	cmp	r0, #0
 8014b8a:	d049      	beq.n	8014c20 <rcl_take+0x98>
 8014b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b90:	4615      	mov	r5, r2
 8014b92:	6802      	ldr	r2, [r0, #0]
 8014b94:	b0a0      	sub	sp, #128	; 0x80
 8014b96:	4604      	mov	r4, r0
 8014b98:	2a00      	cmp	r2, #0
 8014b9a:	d039      	beq.n	8014c10 <rcl_take+0x88>
 8014b9c:	461f      	mov	r7, r3
 8014b9e:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 8014ba2:	b3ab      	cbz	r3, 8014c10 <rcl_take+0x88>
 8014ba4:	460e      	mov	r6, r1
 8014ba6:	2900      	cmp	r1, #0
 8014ba8:	d038      	beq.n	8014c1c <rcl_take+0x94>
 8014baa:	2d00      	cmp	r5, #0
 8014bac:	d03c      	beq.n	8014c28 <rcl_take+0xa0>
 8014bae:	a802      	add	r0, sp, #8
 8014bb0:	f002 fc06 	bl	80173c0 <rmw_get_zero_initialized_message_info>
 8014bb4:	6823      	ldr	r3, [r4, #0]
 8014bb6:	f10d 0c08 	add.w	ip, sp, #8
 8014bba:	46ae      	mov	lr, r5
 8014bbc:	f8d3 80c8 	ldr.w	r8, [r3, #200]	; 0xc8
 8014bc0:	2400      	movs	r4, #0
 8014bc2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014bc6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014bca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014bce:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014bd2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014bd6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014bda:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8014bde:	462b      	mov	r3, r5
 8014be0:	f10d 0247 	add.w	r2, sp, #71	; 0x47
 8014be4:	f88d 4047 	strb.w	r4, [sp, #71]	; 0x47
 8014be8:	e88e 0003 	stmia.w	lr, {r0, r1}
 8014bec:	4631      	mov	r1, r6
 8014bee:	4640      	mov	r0, r8
 8014bf0:	9700      	str	r7, [sp, #0]
 8014bf2:	f003 fc7f 	bl	80184f4 <rmw_take_with_info>
 8014bf6:	4603      	mov	r3, r0
 8014bf8:	b9c0      	cbnz	r0, 8014c2c <rcl_take+0xa4>
 8014bfa:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
 8014bfe:	f240 1291 	movw	r2, #401	; 0x191
 8014c02:	2900      	cmp	r1, #0
 8014c04:	bf08      	it	eq
 8014c06:	4613      	moveq	r3, r2
 8014c08:	4618      	mov	r0, r3
 8014c0a:	b020      	add	sp, #128	; 0x80
 8014c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c10:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8014c14:	4618      	mov	r0, r3
 8014c16:	b020      	add	sp, #128	; 0x80
 8014c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c1c:	230b      	movs	r3, #11
 8014c1e:	e7f3      	b.n	8014c08 <rcl_take+0x80>
 8014c20:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8014c24:	4618      	mov	r0, r3
 8014c26:	4770      	bx	lr
 8014c28:	ad12      	add	r5, sp, #72	; 0x48
 8014c2a:	e7c0      	b.n	8014bae <rcl_take+0x26>
 8014c2c:	f7fe ff46 	bl	8013abc <rcl_convert_rmw_ret_to_rcl_ret>
 8014c30:	4603      	mov	r3, r0
 8014c32:	e7e9      	b.n	8014c08 <rcl_take+0x80>

08014c34 <rcl_subscription_get_rmw_handle>:
 8014c34:	b118      	cbz	r0, 8014c3e <rcl_subscription_get_rmw_handle+0xa>
 8014c36:	6800      	ldr	r0, [r0, #0]
 8014c38:	b108      	cbz	r0, 8014c3e <rcl_subscription_get_rmw_handle+0xa>
 8014c3a:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 8014c3e:	4770      	bx	lr

08014c40 <rcl_subscription_is_valid>:
 8014c40:	b130      	cbz	r0, 8014c50 <rcl_subscription_is_valid+0x10>
 8014c42:	6800      	ldr	r0, [r0, #0]
 8014c44:	b120      	cbz	r0, 8014c50 <rcl_subscription_is_valid+0x10>
 8014c46:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 8014c4a:	3800      	subs	r0, #0
 8014c4c:	bf18      	it	ne
 8014c4e:	2001      	movne	r0, #1
 8014c50:	4770      	bx	lr
 8014c52:	bf00      	nop

08014c54 <rcl_get_system_time>:
 8014c54:	4608      	mov	r0, r1
 8014c56:	f7f8 bcb7 	b.w	800d5c8 <rcutils_system_time_now>
 8014c5a:	bf00      	nop

08014c5c <rcl_get_steady_time>:
 8014c5c:	4608      	mov	r0, r1
 8014c5e:	f7f8 bcdb 	b.w	800d618 <rcutils_steady_time_now>
 8014c62:	bf00      	nop

08014c64 <rcl_get_ros_time>:
 8014c64:	7a03      	ldrb	r3, [r0, #8]
 8014c66:	b510      	push	{r4, lr}
 8014c68:	460c      	mov	r4, r1
 8014c6a:	b143      	cbz	r3, 8014c7e <rcl_get_ros_time+0x1a>
 8014c6c:	2105      	movs	r1, #5
 8014c6e:	f001 ff9f 	bl	8016bb0 <__atomic_load_8>
 8014c72:	4602      	mov	r2, r0
 8014c74:	460b      	mov	r3, r1
 8014c76:	2000      	movs	r0, #0
 8014c78:	e9c4 2300 	strd	r2, r3, [r4]
 8014c7c:	bd10      	pop	{r4, pc}
 8014c7e:	4608      	mov	r0, r1
 8014c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014c84:	f7f8 bca0 	b.w	800d5c8 <rcutils_system_time_now>

08014c88 <rcl_clock_valid>:
 8014c88:	b138      	cbz	r0, 8014c9a <rcl_clock_valid+0x12>
 8014c8a:	7803      	ldrb	r3, [r0, #0]
 8014c8c:	b123      	cbz	r3, 8014c98 <rcl_clock_valid+0x10>
 8014c8e:	68c0      	ldr	r0, [r0, #12]
 8014c90:	3800      	subs	r0, #0
 8014c92:	bf18      	it	ne
 8014c94:	2001      	movne	r0, #1
 8014c96:	4770      	bx	lr
 8014c98:	4618      	mov	r0, r3
 8014c9a:	4770      	bx	lr

08014c9c <rcl_clock_init>:
 8014c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c9e:	4605      	mov	r5, r0
 8014ca0:	4610      	mov	r0, r2
 8014ca2:	4614      	mov	r4, r2
 8014ca4:	460e      	mov	r6, r1
 8014ca6:	f7f8 fc4d 	bl	800d544 <rcutils_allocator_is_valid>
 8014caa:	b128      	cbz	r0, 8014cb8 <rcl_clock_init+0x1c>
 8014cac:	2d03      	cmp	r5, #3
 8014cae:	d803      	bhi.n	8014cb8 <rcl_clock_init+0x1c>
 8014cb0:	e8df f005 	tbb	[pc, r5]
 8014cb4:	0659301f 	.word	0x0659301f
 8014cb8:	f04f 0c0b 	mov.w	ip, #11
 8014cbc:	4660      	mov	r0, ip
 8014cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014cc0:	2c00      	cmp	r4, #0
 8014cc2:	d0f9      	beq.n	8014cb8 <rcl_clock_init+0x1c>
 8014cc4:	fab6 f386 	clz	r3, r6
 8014cc8:	095b      	lsrs	r3, r3, #5
 8014cca:	2e00      	cmp	r6, #0
 8014ccc:	d0f4      	beq.n	8014cb8 <rcl_clock_init+0x1c>
 8014cce:	6133      	str	r3, [r6, #16]
 8014cd0:	469c      	mov	ip, r3
 8014cd2:	f106 0514 	add.w	r5, r6, #20
 8014cd6:	4f32      	ldr	r7, [pc, #200]	; (8014da0 <rcl_clock_init+0x104>)
 8014cd8:	f04f 0e03 	mov.w	lr, #3
 8014cdc:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8014ce0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014ce2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014ce4:	6823      	ldr	r3, [r4, #0]
 8014ce6:	4660      	mov	r0, ip
 8014ce8:	602b      	str	r3, [r5, #0]
 8014cea:	60f7      	str	r7, [r6, #12]
 8014cec:	f886 e000 	strb.w	lr, [r6]
 8014cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014cf2:	2e00      	cmp	r6, #0
 8014cf4:	d0e0      	beq.n	8014cb8 <rcl_clock_init+0x1c>
 8014cf6:	2300      	movs	r3, #0
 8014cf8:	f106 0514 	add.w	r5, r6, #20
 8014cfc:	7033      	strb	r3, [r6, #0]
 8014cfe:	469c      	mov	ip, r3
 8014d00:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8014d04:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8014d08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014d0c:	6823      	ldr	r3, [r4, #0]
 8014d0e:	4660      	mov	r0, ip
 8014d10:	602b      	str	r3, [r5, #0]
 8014d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d14:	2c00      	cmp	r4, #0
 8014d16:	d0cf      	beq.n	8014cb8 <rcl_clock_init+0x1c>
 8014d18:	fab6 f586 	clz	r5, r6
 8014d1c:	096d      	lsrs	r5, r5, #5
 8014d1e:	2e00      	cmp	r6, #0
 8014d20:	d0ca      	beq.n	8014cb8 <rcl_clock_init+0x1c>
 8014d22:	46a6      	mov	lr, r4
 8014d24:	7035      	strb	r5, [r6, #0]
 8014d26:	f106 0c14 	add.w	ip, r6, #20
 8014d2a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014d2e:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8014d32:	e9c6 5503 	strd	r5, r5, [r6, #12]
 8014d36:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014d3a:	f8de 3000 	ldr.w	r3, [lr]
 8014d3e:	2010      	movs	r0, #16
 8014d40:	f8cc 3000 	str.w	r3, [ip]
 8014d44:	6823      	ldr	r3, [r4, #0]
 8014d46:	6921      	ldr	r1, [r4, #16]
 8014d48:	4798      	blx	r3
 8014d4a:	6130      	str	r0, [r6, #16]
 8014d4c:	b320      	cbz	r0, 8014d98 <rcl_clock_init+0xfc>
 8014d4e:	2200      	movs	r2, #0
 8014d50:	2300      	movs	r3, #0
 8014d52:	46ac      	mov	ip, r5
 8014d54:	7205      	strb	r5, [r0, #8]
 8014d56:	e9c0 2300 	strd	r2, r3, [r0]
 8014d5a:	4a12      	ldr	r2, [pc, #72]	; (8014da4 <rcl_clock_init+0x108>)
 8014d5c:	2301      	movs	r3, #1
 8014d5e:	4660      	mov	r0, ip
 8014d60:	60f2      	str	r2, [r6, #12]
 8014d62:	7033      	strb	r3, [r6, #0]
 8014d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d66:	2c00      	cmp	r4, #0
 8014d68:	d0a6      	beq.n	8014cb8 <rcl_clock_init+0x1c>
 8014d6a:	fab6 f386 	clz	r3, r6
 8014d6e:	095b      	lsrs	r3, r3, #5
 8014d70:	2e00      	cmp	r6, #0
 8014d72:	d0a1      	beq.n	8014cb8 <rcl_clock_init+0x1c>
 8014d74:	6133      	str	r3, [r6, #16]
 8014d76:	469c      	mov	ip, r3
 8014d78:	f106 0514 	add.w	r5, r6, #20
 8014d7c:	f8df e028 	ldr.w	lr, [pc, #40]	; 8014da8 <rcl_clock_init+0x10c>
 8014d80:	2702      	movs	r7, #2
 8014d82:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8014d86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014d8a:	6823      	ldr	r3, [r4, #0]
 8014d8c:	4660      	mov	r0, ip
 8014d8e:	602b      	str	r3, [r5, #0]
 8014d90:	f8c6 e00c 	str.w	lr, [r6, #12]
 8014d94:	7037      	strb	r7, [r6, #0]
 8014d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d98:	f04f 0c0a 	mov.w	ip, #10
 8014d9c:	e78e      	b.n	8014cbc <rcl_clock_init+0x20>
 8014d9e:	bf00      	nop
 8014da0:	08014c5d 	.word	0x08014c5d
 8014da4:	08014c65 	.word	0x08014c65
 8014da8:	08014c55 	.word	0x08014c55

08014dac <rcl_clock_get_now>:
 8014dac:	b140      	cbz	r0, 8014dc0 <rcl_clock_get_now+0x14>
 8014dae:	b139      	cbz	r1, 8014dc0 <rcl_clock_get_now+0x14>
 8014db0:	7803      	ldrb	r3, [r0, #0]
 8014db2:	b11b      	cbz	r3, 8014dbc <rcl_clock_get_now+0x10>
 8014db4:	68c3      	ldr	r3, [r0, #12]
 8014db6:	b10b      	cbz	r3, 8014dbc <rcl_clock_get_now+0x10>
 8014db8:	6900      	ldr	r0, [r0, #16]
 8014dba:	4718      	bx	r3
 8014dbc:	2001      	movs	r0, #1
 8014dbe:	4770      	bx	lr
 8014dc0:	200b      	movs	r0, #11
 8014dc2:	4770      	bx	lr

08014dc4 <rcl_clock_add_jump_callback>:
 8014dc4:	b082      	sub	sp, #8
 8014dc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014dca:	a906      	add	r1, sp, #24
 8014dcc:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 8014dd0:	e881 000c 	stmia.w	r1, {r2, r3}
 8014dd4:	b330      	cbz	r0, 8014e24 <rcl_clock_add_jump_callback+0x60>
 8014dd6:	4604      	mov	r4, r0
 8014dd8:	3014      	adds	r0, #20
 8014dda:	f7f8 fbb3 	bl	800d544 <rcutils_allocator_is_valid>
 8014dde:	b30d      	cbz	r5, 8014e24 <rcl_clock_add_jump_callback+0x60>
 8014de0:	f080 0301 	eor.w	r3, r0, #1
 8014de4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8014de8:	d11c      	bne.n	8014e24 <rcl_clock_add_jump_callback+0x60>
 8014dea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014dec:	2a00      	cmp	r2, #0
 8014dee:	db19      	blt.n	8014e24 <rcl_clock_add_jump_callback+0x60>
 8014df0:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8014df4:	2901      	cmp	r1, #1
 8014df6:	f172 0200 	sbcs.w	r2, r2, #0
 8014dfa:	da13      	bge.n	8014e24 <rcl_clock_add_jump_callback+0x60>
 8014dfc:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8014e00:	2f00      	cmp	r7, #0
 8014e02:	d040      	beq.n	8014e86 <rcl_clock_add_jump_callback+0xc2>
 8014e04:	4602      	mov	r2, r0
 8014e06:	e003      	b.n	8014e10 <rcl_clock_add_jump_callback+0x4c>
 8014e08:	42bb      	cmp	r3, r7
 8014e0a:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8014e0e:	d010      	beq.n	8014e32 <rcl_clock_add_jump_callback+0x6e>
 8014e10:	6811      	ldr	r1, [r2, #0]
 8014e12:	3301      	adds	r3, #1
 8014e14:	42a9      	cmp	r1, r5
 8014e16:	d1f7      	bne.n	8014e08 <rcl_clock_add_jump_callback+0x44>
 8014e18:	6a11      	ldr	r1, [r2, #32]
 8014e1a:	42b1      	cmp	r1, r6
 8014e1c:	d1f4      	bne.n	8014e08 <rcl_clock_add_jump_callback+0x44>
 8014e1e:	f04f 0e01 	mov.w	lr, #1
 8014e22:	e001      	b.n	8014e28 <rcl_clock_add_jump_callback+0x64>
 8014e24:	f04f 0e0b 	mov.w	lr, #11
 8014e28:	4670      	mov	r0, lr
 8014e2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014e2e:	b002      	add	sp, #8
 8014e30:	4770      	bx	lr
 8014e32:	3301      	adds	r3, #1
 8014e34:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014e38:	00d9      	lsls	r1, r3, #3
 8014e3a:	69e3      	ldr	r3, [r4, #28]
 8014e3c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8014e3e:	4798      	blx	r3
 8014e40:	b1f0      	cbz	r0, 8014e80 <rcl_clock_add_jump_callback+0xbc>
 8014e42:	68a3      	ldr	r3, [r4, #8]
 8014e44:	f10d 0c18 	add.w	ip, sp, #24
 8014e48:	6060      	str	r0, [r4, #4]
 8014e4a:	f04f 0e00 	mov.w	lr, #0
 8014e4e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8014e52:	f103 0801 	add.w	r8, r3, #1
 8014e56:	f840 5032 	str.w	r5, [r0, r2, lsl #3]
 8014e5a:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8014e5e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014e62:	f105 0708 	add.w	r7, r5, #8
 8014e66:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8014e68:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8014e6c:	e887 0003 	stmia.w	r7, {r0, r1}
 8014e70:	4670      	mov	r0, lr
 8014e72:	622e      	str	r6, [r5, #32]
 8014e74:	f8c4 8008 	str.w	r8, [r4, #8]
 8014e78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014e7c:	b002      	add	sp, #8
 8014e7e:	4770      	bx	lr
 8014e80:	f04f 0e0a 	mov.w	lr, #10
 8014e84:	e7d0      	b.n	8014e28 <rcl_clock_add_jump_callback+0x64>
 8014e86:	2128      	movs	r1, #40	; 0x28
 8014e88:	e7d7      	b.n	8014e3a <rcl_clock_add_jump_callback+0x76>
 8014e8a:	bf00      	nop

08014e8c <rcl_clock_remove_jump_callback>:
 8014e8c:	2800      	cmp	r0, #0
 8014e8e:	d05f      	beq.n	8014f50 <rcl_clock_remove_jump_callback+0xc4>
 8014e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e94:	4605      	mov	r5, r0
 8014e96:	3014      	adds	r0, #20
 8014e98:	460f      	mov	r7, r1
 8014e9a:	4692      	mov	sl, r2
 8014e9c:	f7f8 fb52 	bl	800d544 <rcutils_allocator_is_valid>
 8014ea0:	f080 0001 	eor.w	r0, r0, #1
 8014ea4:	b2c0      	uxtb	r0, r0
 8014ea6:	2800      	cmp	r0, #0
 8014ea8:	d13f      	bne.n	8014f2a <rcl_clock_remove_jump_callback+0x9e>
 8014eaa:	2f00      	cmp	r7, #0
 8014eac:	d03d      	beq.n	8014f2a <rcl_clock_remove_jump_callback+0x9e>
 8014eae:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8014eb2:	f1b8 0f00 	cmp.w	r8, #0
 8014eb6:	d00c      	beq.n	8014ed2 <rcl_clock_remove_jump_callback+0x46>
 8014eb8:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8014ebc:	eb08 0688 	add.w	r6, r8, r8, lsl #2
 8014ec0:	464c      	mov	r4, r9
 8014ec2:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
 8014ec6:	6823      	ldr	r3, [r4, #0]
 8014ec8:	42bb      	cmp	r3, r7
 8014eca:	d005      	beq.n	8014ed8 <rcl_clock_remove_jump_callback+0x4c>
 8014ecc:	3428      	adds	r4, #40	; 0x28
 8014ece:	42a6      	cmp	r6, r4
 8014ed0:	d1f9      	bne.n	8014ec6 <rcl_clock_remove_jump_callback+0x3a>
 8014ed2:	2001      	movs	r0, #1
 8014ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ed8:	6a23      	ldr	r3, [r4, #32]
 8014eda:	3428      	adds	r4, #40	; 0x28
 8014edc:	42a6      	cmp	r6, r4
 8014ede:	d02f      	beq.n	8014f40 <rcl_clock_remove_jump_callback+0xb4>
 8014ee0:	4553      	cmp	r3, sl
 8014ee2:	d1f0      	bne.n	8014ec6 <rcl_clock_remove_jump_callback+0x3a>
 8014ee4:	46a6      	mov	lr, r4
 8014ee6:	f1a4 0c28 	sub.w	ip, r4, #40	; 0x28
 8014eea:	3428      	adds	r4, #40	; 0x28
 8014eec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014ef0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014ef4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014ef8:	42a6      	cmp	r6, r4
 8014efa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014efe:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014f02:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014f06:	d1ed      	bne.n	8014ee4 <rcl_clock_remove_jump_callback+0x58>
 8014f08:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 8014f0c:	60ac      	str	r4, [r5, #8]
 8014f0e:	b17c      	cbz	r4, 8014f30 <rcl_clock_remove_jump_callback+0xa4>
 8014f10:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8014f14:	69eb      	ldr	r3, [r5, #28]
 8014f16:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8014f18:	4648      	mov	r0, r9
 8014f1a:	00e1      	lsls	r1, r4, #3
 8014f1c:	4798      	blx	r3
 8014f1e:	4603      	mov	r3, r0
 8014f20:	b1c0      	cbz	r0, 8014f54 <rcl_clock_remove_jump_callback+0xc8>
 8014f22:	2000      	movs	r0, #0
 8014f24:	606b      	str	r3, [r5, #4]
 8014f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f2a:	200b      	movs	r0, #11
 8014f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f30:	4648      	mov	r0, r9
 8014f32:	69ab      	ldr	r3, [r5, #24]
 8014f34:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8014f36:	4798      	blx	r3
 8014f38:	4620      	mov	r0, r4
 8014f3a:	606c      	str	r4, [r5, #4]
 8014f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f40:	4553      	cmp	r3, sl
 8014f42:	d1c6      	bne.n	8014ed2 <rcl_clock_remove_jump_callback+0x46>
 8014f44:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 8014f48:	60ac      	str	r4, [r5, #8]
 8014f4a:	2c00      	cmp	r4, #0
 8014f4c:	d1e0      	bne.n	8014f10 <rcl_clock_remove_jump_callback+0x84>
 8014f4e:	e7ef      	b.n	8014f30 <rcl_clock_remove_jump_callback+0xa4>
 8014f50:	200b      	movs	r0, #11
 8014f52:	4770      	bx	lr
 8014f54:	200a      	movs	r0, #10
 8014f56:	e7e9      	b.n	8014f2c <rcl_clock_remove_jump_callback+0xa0>

08014f58 <_rcl_timer_time_jump>:
 8014f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f5c:	4605      	mov	r5, r0
 8014f5e:	b084      	sub	sp, #16
 8014f60:	4614      	mov	r4, r2
 8014f62:	b131      	cbz	r1, 8014f72 <_rcl_timer_time_jump+0x1a>
 8014f64:	7803      	ldrb	r3, [r0, #0]
 8014f66:	3b02      	subs	r3, #2
 8014f68:	2b01      	cmp	r3, #1
 8014f6a:	d93f      	bls.n	8014fec <_rcl_timer_time_jump+0x94>
 8014f6c:	b004      	add	sp, #16
 8014f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f72:	6813      	ldr	r3, [r2, #0]
 8014f74:	a902      	add	r1, sp, #8
 8014f76:	6818      	ldr	r0, [r3, #0]
 8014f78:	f7ff ff18 	bl	8014dac <rcl_clock_get_now>
 8014f7c:	2800      	cmp	r0, #0
 8014f7e:	d1f5      	bne.n	8014f6c <_rcl_timer_time_jump+0x14>
 8014f80:	6820      	ldr	r0, [r4, #0]
 8014f82:	2105      	movs	r1, #5
 8014f84:	3020      	adds	r0, #32
 8014f86:	f001 fe13 	bl	8016bb0 <__atomic_load_8>
 8014f8a:	6823      	ldr	r3, [r4, #0]
 8014f8c:	4681      	mov	r9, r0
 8014f8e:	4688      	mov	r8, r1
 8014f90:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8014f94:	2105      	movs	r1, #5
 8014f96:	f001 fe0b 	bl	8016bb0 <__atomic_load_8>
 8014f9a:	4607      	mov	r7, r0
 8014f9c:	6820      	ldr	r0, [r4, #0]
 8014f9e:	460e      	mov	r6, r1
 8014fa0:	2105      	movs	r1, #5
 8014fa2:	3018      	adds	r0, #24
 8014fa4:	f001 fe04 	bl	8016bb0 <__atomic_load_8>
 8014fa8:	782b      	ldrb	r3, [r5, #0]
 8014faa:	4682      	mov	sl, r0
 8014fac:	460d      	mov	r5, r1
 8014fae:	3b02      	subs	r3, #2
 8014fb0:	9a02      	ldr	r2, [sp, #8]
 8014fb2:	2b01      	cmp	r3, #1
 8014fb4:	9b03      	ldr	r3, [sp, #12]
 8014fb6:	d937      	bls.n	8015028 <_rcl_timer_time_jump+0xd0>
 8014fb8:	42ba      	cmp	r2, r7
 8014fba:	eb73 0106 	sbcs.w	r1, r3, r6
 8014fbe:	da60      	bge.n	8015082 <_rcl_timer_time_jump+0x12a>
 8014fc0:	454a      	cmp	r2, r9
 8014fc2:	eb73 0108 	sbcs.w	r1, r3, r8
 8014fc6:	dad1      	bge.n	8014f6c <_rcl_timer_time_jump+0x14>
 8014fc8:	eb1a 0202 	adds.w	r2, sl, r2
 8014fcc:	6820      	ldr	r0, [r4, #0]
 8014fce:	eb43 0305 	adc.w	r3, r3, r5
 8014fd2:	2505      	movs	r5, #5
 8014fd4:	3028      	adds	r0, #40	; 0x28
 8014fd6:	9500      	str	r5, [sp, #0]
 8014fd8:	f001 fe20 	bl	8016c1c <__atomic_store_8>
 8014fdc:	6820      	ldr	r0, [r4, #0]
 8014fde:	9500      	str	r5, [sp, #0]
 8014fe0:	3020      	adds	r0, #32
 8014fe2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014fe6:	f001 fe19 	bl	8016c1c <__atomic_store_8>
 8014fea:	e7bf      	b.n	8014f6c <_rcl_timer_time_jump+0x14>
 8014fec:	6813      	ldr	r3, [r2, #0]
 8014fee:	a902      	add	r1, sp, #8
 8014ff0:	6818      	ldr	r0, [r3, #0]
 8014ff2:	f7ff fedb 	bl	8014dac <rcl_clock_get_now>
 8014ff6:	2800      	cmp	r0, #0
 8014ff8:	d1b8      	bne.n	8014f6c <_rcl_timer_time_jump+0x14>
 8014ffa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014ffe:	4313      	orrs	r3, r2
 8015000:	d0b4      	beq.n	8014f6c <_rcl_timer_time_jump+0x14>
 8015002:	6820      	ldr	r0, [r4, #0]
 8015004:	2105      	movs	r1, #5
 8015006:	3028      	adds	r0, #40	; 0x28
 8015008:	f001 fdd2 	bl	8016bb0 <__atomic_load_8>
 801500c:	9d02      	ldr	r5, [sp, #8]
 801500e:	4602      	mov	r2, r0
 8015010:	9b03      	ldr	r3, [sp, #12]
 8015012:	6820      	ldr	r0, [r4, #0]
 8015014:	1b52      	subs	r2, r2, r5
 8015016:	f100 0030 	add.w	r0, r0, #48	; 0x30
 801501a:	eb61 0303 	sbc.w	r3, r1, r3
 801501e:	2105      	movs	r1, #5
 8015020:	9100      	str	r1, [sp, #0]
 8015022:	f001 fdfb 	bl	8016c1c <__atomic_store_8>
 8015026:	e7a1      	b.n	8014f6c <_rcl_timer_time_jump+0x14>
 8015028:	4313      	orrs	r3, r2
 801502a:	d09f      	beq.n	8014f6c <_rcl_timer_time_jump+0x14>
 801502c:	6820      	ldr	r0, [r4, #0]
 801502e:	f04f 0805 	mov.w	r8, #5
 8015032:	2300      	movs	r3, #0
 8015034:	2200      	movs	r2, #0
 8015036:	3030      	adds	r0, #48	; 0x30
 8015038:	f8cd 8000 	str.w	r8, [sp]
 801503c:	f001 fe24 	bl	8016c88 <__atomic_exchange_8>
 8015040:	ea51 0300 	orrs.w	r3, r1, r0
 8015044:	4606      	mov	r6, r0
 8015046:	460f      	mov	r7, r1
 8015048:	d090      	beq.n	8014f6c <_rcl_timer_time_jump+0x14>
 801504a:	9a02      	ldr	r2, [sp, #8]
 801504c:	9b03      	ldr	r3, [sp, #12]
 801504e:	1a12      	subs	r2, r2, r0
 8015050:	f8cd 8000 	str.w	r8, [sp]
 8015054:	6820      	ldr	r0, [r4, #0]
 8015056:	eb63 0301 	sbc.w	r3, r3, r1
 801505a:	eb12 020a 	adds.w	r2, r2, sl
 801505e:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8015062:	eb43 0305 	adc.w	r3, r3, r5
 8015066:	f001 fdd9 	bl	8016c1c <__atomic_store_8>
 801506a:	f8cd 8000 	str.w	r8, [sp]
 801506e:	6820      	ldr	r0, [r4, #0]
 8015070:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015074:	3020      	adds	r0, #32
 8015076:	1b92      	subs	r2, r2, r6
 8015078:	eb63 0307 	sbc.w	r3, r3, r7
 801507c:	f001 fdce 	bl	8016c1c <__atomic_store_8>
 8015080:	e774      	b.n	8014f6c <_rcl_timer_time_jump+0x14>
 8015082:	6820      	ldr	r0, [r4, #0]
 8015084:	3008      	adds	r0, #8
 8015086:	f005 fc4d 	bl	801a924 <rcl_trigger_guard_condition>
 801508a:	e76f      	b.n	8014f6c <_rcl_timer_time_jump+0x14>

0801508c <rcl_get_zero_initialized_timer>:
 801508c:	4b01      	ldr	r3, [pc, #4]	; (8015094 <rcl_get_zero_initialized_timer+0x8>)
 801508e:	6818      	ldr	r0, [r3, #0]
 8015090:	4770      	bx	lr
 8015092:	bf00      	nop
 8015094:	0801dad8 	.word	0x0801dad8

08015098 <rcl_timer_init>:
 8015098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801509c:	b0af      	sub	sp, #188	; 0xbc
 801509e:	460d      	mov	r5, r1
 80150a0:	4604      	mov	r4, r0
 80150a2:	4692      	mov	sl, r2
 80150a4:	a83b      	add	r0, sp, #236	; 0xec
 80150a6:	e9dd 8938 	ldrd	r8, r9, [sp, #224]	; 0xe0
 80150aa:	f7f8 fa4b 	bl	800d544 <rcutils_allocator_is_valid>
 80150ae:	fab5 f385 	clz	r3, r5
 80150b2:	095b      	lsrs	r3, r3, #5
 80150b4:	ea43 73d9 	orr.w	r3, r3, r9, lsr #31
 80150b8:	2c00      	cmp	r4, #0
 80150ba:	bf08      	it	eq
 80150bc:	f043 0301 	orreq.w	r3, r3, #1
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d167      	bne.n	8015194 <rcl_timer_init+0xfc>
 80150c4:	f080 0001 	eor.w	r0, r0, #1
 80150c8:	b2c0      	uxtb	r0, r0
 80150ca:	2800      	cmp	r0, #0
 80150cc:	d162      	bne.n	8015194 <rcl_timer_init+0xfc>
 80150ce:	6823      	ldr	r3, [r4, #0]
 80150d0:	b123      	cbz	r3, 80150dc <rcl_timer_init+0x44>
 80150d2:	2664      	movs	r6, #100	; 0x64
 80150d4:	4630      	mov	r0, r6
 80150d6:	b02f      	add	sp, #188	; 0xbc
 80150d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150dc:	a908      	add	r1, sp, #32
 80150de:	4628      	mov	r0, r5
 80150e0:	f7ff fe64 	bl	8014dac <rcl_clock_get_now>
 80150e4:	4606      	mov	r6, r0
 80150e6:	2800      	cmp	r0, #0
 80150e8:	d1f4      	bne.n	80150d4 <rcl_timer_init+0x3c>
 80150ea:	f10d 0b18 	add.w	fp, sp, #24
 80150ee:	ae0b      	add	r6, sp, #44	; 0x2c
 80150f0:	af18      	add	r7, sp, #96	; 0x60
 80150f2:	4658      	mov	r0, fp
 80150f4:	e9cd 5a16 	strd	r5, sl, [sp, #88]	; 0x58
 80150f8:	f005 fb1e 	bl	801a738 <rcl_get_zero_initialized_guard_condition>
 80150fc:	e89b 0003 	ldmia.w	fp, {r0, r1}
 8015100:	e887 0003 	stmia.w	r7, {r0, r1}
 8015104:	4630      	mov	r0, r6
 8015106:	f005 fbf1 	bl	801a8ec <rcl_guard_condition_get_default_options>
 801510a:	ab0d      	add	r3, sp, #52	; 0x34
 801510c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015110:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015114:	4651      	mov	r1, sl
 8015116:	4638      	mov	r0, r7
 8015118:	e896 000c 	ldmia.w	r6, {r2, r3}
 801511c:	f005 fb16 	bl	801a74c <rcl_guard_condition_init>
 8015120:	4606      	mov	r6, r0
 8015122:	2800      	cmp	r0, #0
 8015124:	d1d6      	bne.n	80150d4 <rcl_timer_init+0x3c>
 8015126:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015128:	781b      	ldrb	r3, [r3, #0]
 801512a:	2b01      	cmp	r3, #1
 801512c:	d037      	beq.n	801519e <rcl_timer_init+0x106>
 801512e:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8015130:	f10d 0cec 	add.w	ip, sp, #236	; 0xec
 8015134:	f10d 0e94 	add.w	lr, sp, #148	; 0x94
 8015138:	f04f 0a00 	mov.w	sl, #0
 801513c:	931a      	str	r3, [sp, #104]	; 0x68
 801513e:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
 8015142:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015146:	e9cd 891c 	strd	r8, r9, [sp, #112]	; 0x70
 801514a:	eb12 0008 	adds.w	r0, r2, r8
 801514e:	f04f 0800 	mov.w	r8, #0
 8015152:	eb43 0109 	adc.w	r1, r3, r9
 8015156:	f04f 0900 	mov.w	r9, #0
 801515a:	e9cd 8922 	strd	r8, r9, [sp, #136]	; 0x88
 801515e:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 8015162:	e9cd 0120 	strd	r0, r1, [sp, #128]	; 0x80
 8015166:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801516a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801516e:	f8dc 3000 	ldr.w	r3, [ip]
 8015172:	2060      	movs	r0, #96	; 0x60
 8015174:	f88d a090 	strb.w	sl, [sp, #144]	; 0x90
 8015178:	4619      	mov	r1, r3
 801517a:	f8ce 3000 	str.w	r3, [lr]
 801517e:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8015180:	e9cd aa2a 	strd	sl, sl, [sp, #168]	; 0xa8
 8015184:	4798      	blx	r3
 8015186:	6020      	str	r0, [r4, #0]
 8015188:	b358      	cbz	r0, 80151e2 <rcl_timer_init+0x14a>
 801518a:	2260      	movs	r2, #96	; 0x60
 801518c:	a916      	add	r1, sp, #88	; 0x58
 801518e:	f006 fcaa 	bl	801bae6 <memcpy>
 8015192:	e79f      	b.n	80150d4 <rcl_timer_init+0x3c>
 8015194:	260b      	movs	r6, #11
 8015196:	4630      	mov	r0, r6
 8015198:	b02f      	add	sp, #188	; 0xbc
 801519a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801519e:	2001      	movs	r0, #1
 80151a0:	2100      	movs	r1, #0
 80151a2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 80151a6:	ab12      	add	r3, sp, #72	; 0x48
 80151a8:	4a13      	ldr	r2, [pc, #76]	; (80151f8 <rcl_timer_init+0x160>)
 80151aa:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 80151ae:	9405      	str	r4, [sp, #20]
 80151b0:	9204      	str	r2, [sp, #16]
 80151b2:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80151b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80151ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80151be:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 80151c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80151c4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80151c8:	4628      	mov	r0, r5
 80151ca:	e89c 000c 	ldmia.w	ip, {r2, r3}
 80151ce:	f7ff fdf9 	bl	8014dc4 <rcl_clock_add_jump_callback>
 80151d2:	4603      	mov	r3, r0
 80151d4:	2800      	cmp	r0, #0
 80151d6:	d0aa      	beq.n	801512e <rcl_timer_init+0x96>
 80151d8:	4638      	mov	r0, r7
 80151da:	461e      	mov	r6, r3
 80151dc:	f005 fb60 	bl	801a8a0 <rcl_guard_condition_fini>
 80151e0:	e778      	b.n	80150d4 <rcl_timer_init+0x3c>
 80151e2:	4638      	mov	r0, r7
 80151e4:	260a      	movs	r6, #10
 80151e6:	f005 fb5b 	bl	801a8a0 <rcl_guard_condition_fini>
 80151ea:	4622      	mov	r2, r4
 80151ec:	4902      	ldr	r1, [pc, #8]	; (80151f8 <rcl_timer_init+0x160>)
 80151ee:	4628      	mov	r0, r5
 80151f0:	f7ff fe4c 	bl	8014e8c <rcl_clock_remove_jump_callback>
 80151f4:	e76e      	b.n	80150d4 <rcl_timer_init+0x3c>
 80151f6:	bf00      	nop
 80151f8:	08014f59 	.word	0x08014f59

080151fc <rcl_timer_call>:
 80151fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015200:	b087      	sub	sp, #28
 8015202:	2800      	cmp	r0, #0
 8015204:	d06c      	beq.n	80152e0 <rcl_timer_call+0xe4>
 8015206:	6803      	ldr	r3, [r0, #0]
 8015208:	4604      	mov	r4, r0
 801520a:	2b00      	cmp	r3, #0
 801520c:	d062      	beq.n	80152d4 <rcl_timer_call+0xd8>
 801520e:	f3bf 8f5b 	dmb	ish
 8015212:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015216:	f3bf 8f5b 	dmb	ish
 801521a:	2b00      	cmp	r3, #0
 801521c:	d14f      	bne.n	80152be <rcl_timer_call+0xc2>
 801521e:	6803      	ldr	r3, [r0, #0]
 8015220:	a904      	add	r1, sp, #16
 8015222:	6818      	ldr	r0, [r3, #0]
 8015224:	f7ff fdc2 	bl	8014dac <rcl_clock_get_now>
 8015228:	4605      	mov	r5, r0
 801522a:	2800      	cmp	r0, #0
 801522c:	d149      	bne.n	80152c2 <rcl_timer_call+0xc6>
 801522e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015232:	2b00      	cmp	r3, #0
 8015234:	db49      	blt.n	80152ca <rcl_timer_call+0xce>
 8015236:	2605      	movs	r6, #5
 8015238:	6820      	ldr	r0, [r4, #0]
 801523a:	9600      	str	r6, [sp, #0]
 801523c:	3020      	adds	r0, #32
 801523e:	f001 fd23 	bl	8016c88 <__atomic_exchange_8>
 8015242:	6823      	ldr	r3, [r4, #0]
 8015244:	4680      	mov	r8, r0
 8015246:	f3bf 8f5b 	dmb	ish
 801524a:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801524e:	f3bf 8f5b 	dmb	ish
 8015252:	6820      	ldr	r0, [r4, #0]
 8015254:	4689      	mov	r9, r1
 8015256:	4631      	mov	r1, r6
 8015258:	3028      	adds	r0, #40	; 0x28
 801525a:	f001 fca9 	bl	8016bb0 <__atomic_load_8>
 801525e:	460f      	mov	r7, r1
 8015260:	4631      	mov	r1, r6
 8015262:	4606      	mov	r6, r0
 8015264:	6820      	ldr	r0, [r4, #0]
 8015266:	3018      	adds	r0, #24
 8015268:	f001 fca2 	bl	8016bb0 <__atomic_load_8>
 801526c:	4602      	mov	r2, r0
 801526e:	9804      	ldr	r0, [sp, #16]
 8015270:	460b      	mov	r3, r1
 8015272:	18b6      	adds	r6, r6, r2
 8015274:	f8dd c014 	ldr.w	ip, [sp, #20]
 8015278:	4692      	mov	sl, r2
 801527a:	eb47 0701 	adc.w	r7, r7, r1
 801527e:	4286      	cmp	r6, r0
 8015280:	eb77 010c 	sbcs.w	r1, r7, ip
 8015284:	da04      	bge.n	8015290 <rcl_timer_call+0x94>
 8015286:	ea53 0102 	orrs.w	r1, r3, r2
 801528a:	d12e      	bne.n	80152ea <rcl_timer_call+0xee>
 801528c:	4606      	mov	r6, r0
 801528e:	4667      	mov	r7, ip
 8015290:	6820      	ldr	r0, [r4, #0]
 8015292:	2105      	movs	r1, #5
 8015294:	4632      	mov	r2, r6
 8015296:	463b      	mov	r3, r7
 8015298:	3028      	adds	r0, #40	; 0x28
 801529a:	9100      	str	r1, [sp, #0]
 801529c:	f001 fcbe 	bl	8016c1c <__atomic_store_8>
 80152a0:	f1bb 0f00 	cmp.w	fp, #0
 80152a4:	d00d      	beq.n	80152c2 <rcl_timer_call+0xc6>
 80152a6:	9a04      	ldr	r2, [sp, #16]
 80152a8:	4620      	mov	r0, r4
 80152aa:	9b05      	ldr	r3, [sp, #20]
 80152ac:	ebb2 0208 	subs.w	r2, r2, r8
 80152b0:	eb63 0309 	sbc.w	r3, r3, r9
 80152b4:	47d8      	blx	fp
 80152b6:	4628      	mov	r0, r5
 80152b8:	b007      	add	sp, #28
 80152ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152be:	f240 3521 	movw	r5, #801	; 0x321
 80152c2:	4628      	mov	r0, r5
 80152c4:	b007      	add	sp, #28
 80152c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152ca:	2501      	movs	r5, #1
 80152cc:	4628      	mov	r0, r5
 80152ce:	b007      	add	sp, #28
 80152d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152d4:	f44f 7548 	mov.w	r5, #800	; 0x320
 80152d8:	4628      	mov	r0, r5
 80152da:	b007      	add	sp, #28
 80152dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152e0:	250b      	movs	r5, #11
 80152e2:	4628      	mov	r0, r5
 80152e4:	b007      	add	sp, #28
 80152e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152ea:	1b80      	subs	r0, r0, r6
 80152ec:	eb6c 0107 	sbc.w	r1, ip, r7
 80152f0:	3801      	subs	r0, #1
 80152f2:	f161 0100 	sbc.w	r1, r1, #0
 80152f6:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80152fa:	f7eb f809 	bl	8000310 <__aeabi_ldivmod>
 80152fe:	9b02      	ldr	r3, [sp, #8]
 8015300:	3001      	adds	r0, #1
 8015302:	f141 0100 	adc.w	r1, r1, #0
 8015306:	fb00 f303 	mul.w	r3, r0, r3
 801530a:	fb01 330a 	mla	r3, r1, sl, r3
 801530e:	fba0 0a0a 	umull	r0, sl, r0, sl
 8015312:	1986      	adds	r6, r0, r6
 8015314:	4453      	add	r3, sl
 8015316:	eb43 0707 	adc.w	r7, r3, r7
 801531a:	e7b9      	b.n	8015290 <rcl_timer_call+0x94>

0801531c <rcl_timer_is_ready>:
 801531c:	b570      	push	{r4, r5, r6, lr}
 801531e:	b082      	sub	sp, #8
 8015320:	b380      	cbz	r0, 8015384 <rcl_timer_is_ready+0x68>
 8015322:	6803      	ldr	r3, [r0, #0]
 8015324:	4604      	mov	r4, r0
 8015326:	b38b      	cbz	r3, 801538c <rcl_timer_is_ready+0x70>
 8015328:	460d      	mov	r5, r1
 801532a:	b359      	cbz	r1, 8015384 <rcl_timer_is_ready+0x68>
 801532c:	f3bf 8f5b 	dmb	ish
 8015330:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015334:	f3bf 8f5b 	dmb	ish
 8015338:	b953      	cbnz	r3, 8015350 <rcl_timer_is_ready+0x34>
 801533a:	6803      	ldr	r3, [r0, #0]
 801533c:	4669      	mov	r1, sp
 801533e:	6818      	ldr	r0, [r3, #0]
 8015340:	f7ff fd34 	bl	8014dac <rcl_clock_get_now>
 8015344:	4606      	mov	r6, r0
 8015346:	b148      	cbz	r0, 801535c <rcl_timer_is_ready+0x40>
 8015348:	f240 3321 	movw	r3, #801	; 0x321
 801534c:	4298      	cmp	r0, r3
 801534e:	d102      	bne.n	8015356 <rcl_timer_is_ready+0x3a>
 8015350:	2300      	movs	r3, #0
 8015352:	461e      	mov	r6, r3
 8015354:	702b      	strb	r3, [r5, #0]
 8015356:	4630      	mov	r0, r6
 8015358:	b002      	add	sp, #8
 801535a:	bd70      	pop	{r4, r5, r6, pc}
 801535c:	6820      	ldr	r0, [r4, #0]
 801535e:	2105      	movs	r1, #5
 8015360:	3028      	adds	r0, #40	; 0x28
 8015362:	f001 fc25 	bl	8016bb0 <__atomic_load_8>
 8015366:	9b00      	ldr	r3, [sp, #0]
 8015368:	1ac0      	subs	r0, r0, r3
 801536a:	9b01      	ldr	r3, [sp, #4]
 801536c:	eb61 0103 	sbc.w	r1, r1, r3
 8015370:	2801      	cmp	r0, #1
 8015372:	4630      	mov	r0, r6
 8015374:	f171 0300 	sbcs.w	r3, r1, #0
 8015378:	bfb4      	ite	lt
 801537a:	2301      	movlt	r3, #1
 801537c:	2300      	movge	r3, #0
 801537e:	702b      	strb	r3, [r5, #0]
 8015380:	b002      	add	sp, #8
 8015382:	bd70      	pop	{r4, r5, r6, pc}
 8015384:	260b      	movs	r6, #11
 8015386:	4630      	mov	r0, r6
 8015388:	b002      	add	sp, #8
 801538a:	bd70      	pop	{r4, r5, r6, pc}
 801538c:	f44f 7648 	mov.w	r6, #800	; 0x320
 8015390:	e7e1      	b.n	8015356 <rcl_timer_is_ready+0x3a>
 8015392:	bf00      	nop

08015394 <rcl_timer_get_time_until_next_call>:
 8015394:	b570      	push	{r4, r5, r6, lr}
 8015396:	b082      	sub	sp, #8
 8015398:	b330      	cbz	r0, 80153e8 <rcl_timer_get_time_until_next_call+0x54>
 801539a:	6803      	ldr	r3, [r0, #0]
 801539c:	4604      	mov	r4, r0
 801539e:	b33b      	cbz	r3, 80153f0 <rcl_timer_get_time_until_next_call+0x5c>
 80153a0:	460d      	mov	r5, r1
 80153a2:	b309      	cbz	r1, 80153e8 <rcl_timer_get_time_until_next_call+0x54>
 80153a4:	f3bf 8f5b 	dmb	ish
 80153a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80153ac:	f3bf 8f5b 	dmb	ish
 80153b0:	b9ab      	cbnz	r3, 80153de <rcl_timer_get_time_until_next_call+0x4a>
 80153b2:	6803      	ldr	r3, [r0, #0]
 80153b4:	4669      	mov	r1, sp
 80153b6:	6818      	ldr	r0, [r3, #0]
 80153b8:	f7ff fcf8 	bl	8014dac <rcl_clock_get_now>
 80153bc:	4606      	mov	r6, r0
 80153be:	b958      	cbnz	r0, 80153d8 <rcl_timer_get_time_until_next_call+0x44>
 80153c0:	6820      	ldr	r0, [r4, #0]
 80153c2:	2105      	movs	r1, #5
 80153c4:	3028      	adds	r0, #40	; 0x28
 80153c6:	f001 fbf3 	bl	8016bb0 <__atomic_load_8>
 80153ca:	9b00      	ldr	r3, [sp, #0]
 80153cc:	1ac0      	subs	r0, r0, r3
 80153ce:	9b01      	ldr	r3, [sp, #4]
 80153d0:	eb61 0103 	sbc.w	r1, r1, r3
 80153d4:	6028      	str	r0, [r5, #0]
 80153d6:	6069      	str	r1, [r5, #4]
 80153d8:	4630      	mov	r0, r6
 80153da:	b002      	add	sp, #8
 80153dc:	bd70      	pop	{r4, r5, r6, pc}
 80153de:	f240 3621 	movw	r6, #801	; 0x321
 80153e2:	4630      	mov	r0, r6
 80153e4:	b002      	add	sp, #8
 80153e6:	bd70      	pop	{r4, r5, r6, pc}
 80153e8:	260b      	movs	r6, #11
 80153ea:	4630      	mov	r0, r6
 80153ec:	b002      	add	sp, #8
 80153ee:	bd70      	pop	{r4, r5, r6, pc}
 80153f0:	f44f 7648 	mov.w	r6, #800	; 0x320
 80153f4:	e7f0      	b.n	80153d8 <rcl_timer_get_time_until_next_call+0x44>
 80153f6:	bf00      	nop

080153f8 <rcl_timer_get_guard_condition>:
 80153f8:	b130      	cbz	r0, 8015408 <rcl_timer_get_guard_condition+0x10>
 80153fa:	6800      	ldr	r0, [r0, #0]
 80153fc:	b120      	cbz	r0, 8015408 <rcl_timer_get_guard_condition+0x10>
 80153fe:	68c3      	ldr	r3, [r0, #12]
 8015400:	b10b      	cbz	r3, 8015406 <rcl_timer_get_guard_condition+0xe>
 8015402:	3008      	adds	r0, #8
 8015404:	4770      	bx	lr
 8015406:	4618      	mov	r0, r3
 8015408:	4770      	bx	lr
 801540a:	bf00      	nop

0801540c <rcl_validate_enclave_name_with_size>:
 801540c:	2800      	cmp	r0, #0
 801540e:	d049      	beq.n	80154a4 <rcl_validate_enclave_name_with_size+0x98>
 8015410:	b570      	push	{r4, r5, r6, lr}
 8015412:	4615      	mov	r5, r2
 8015414:	b0c2      	sub	sp, #264	; 0x108
 8015416:	b19a      	cbz	r2, 8015440 <rcl_validate_enclave_name_with_size+0x34>
 8015418:	461e      	mov	r6, r3
 801541a:	466a      	mov	r2, sp
 801541c:	ab01      	add	r3, sp, #4
 801541e:	460c      	mov	r4, r1
 8015420:	f002 f852 	bl	80174c8 <rmw_validate_namespace_with_size>
 8015424:	4684      	mov	ip, r0
 8015426:	b9b8      	cbnz	r0, 8015458 <rcl_validate_enclave_name_with_size+0x4c>
 8015428:	9900      	ldr	r1, [sp, #0]
 801542a:	b171      	cbz	r1, 801544a <rcl_validate_enclave_name_with_size+0x3e>
 801542c:	2907      	cmp	r1, #7
 801542e:	d019      	beq.n	8015464 <rcl_validate_enclave_name_with_size+0x58>
 8015430:	1e4b      	subs	r3, r1, #1
 8015432:	2b05      	cmp	r3, #5
 8015434:	d83a      	bhi.n	80154ac <rcl_validate_enclave_name_with_size+0xa0>
 8015436:	e8df f003 	tbb	[pc, r3]
 801543a:	2926      	.short	0x2926
 801543c:	1d322f2c 	.word	0x1d322f2c
 8015440:	f04f 0c0b 	mov.w	ip, #11
 8015444:	4660      	mov	r0, ip
 8015446:	b042      	add	sp, #264	; 0x108
 8015448:	bd70      	pop	{r4, r5, r6, pc}
 801544a:	2907      	cmp	r1, #7
 801544c:	d00a      	beq.n	8015464 <rcl_validate_enclave_name_with_size+0x58>
 801544e:	2300      	movs	r3, #0
 8015450:	4660      	mov	r0, ip
 8015452:	602b      	str	r3, [r5, #0]
 8015454:	b042      	add	sp, #264	; 0x108
 8015456:	bd70      	pop	{r4, r5, r6, pc}
 8015458:	f7fe fb30 	bl	8013abc <rcl_convert_rmw_ret_to_rcl_ret>
 801545c:	4684      	mov	ip, r0
 801545e:	4660      	mov	r0, ip
 8015460:	b042      	add	sp, #264	; 0x108
 8015462:	bd70      	pop	{r4, r5, r6, pc}
 8015464:	2cff      	cmp	r4, #255	; 0xff
 8015466:	d9f2      	bls.n	801544e <rcl_validate_enclave_name_with_size+0x42>
 8015468:	6029      	str	r1, [r5, #0]
 801546a:	2e00      	cmp	r6, #0
 801546c:	d0ea      	beq.n	8015444 <rcl_validate_enclave_name_with_size+0x38>
 801546e:	23fe      	movs	r3, #254	; 0xfe
 8015470:	6033      	str	r3, [r6, #0]
 8015472:	e7e7      	b.n	8015444 <rcl_validate_enclave_name_with_size+0x38>
 8015474:	2306      	movs	r3, #6
 8015476:	602b      	str	r3, [r5, #0]
 8015478:	2e00      	cmp	r6, #0
 801547a:	d0e3      	beq.n	8015444 <rcl_validate_enclave_name_with_size+0x38>
 801547c:	9b01      	ldr	r3, [sp, #4]
 801547e:	4660      	mov	r0, ip
 8015480:	6033      	str	r3, [r6, #0]
 8015482:	b042      	add	sp, #264	; 0x108
 8015484:	bd70      	pop	{r4, r5, r6, pc}
 8015486:	2301      	movs	r3, #1
 8015488:	602b      	str	r3, [r5, #0]
 801548a:	e7f5      	b.n	8015478 <rcl_validate_enclave_name_with_size+0x6c>
 801548c:	2302      	movs	r3, #2
 801548e:	602b      	str	r3, [r5, #0]
 8015490:	e7f2      	b.n	8015478 <rcl_validate_enclave_name_with_size+0x6c>
 8015492:	2303      	movs	r3, #3
 8015494:	602b      	str	r3, [r5, #0]
 8015496:	e7ef      	b.n	8015478 <rcl_validate_enclave_name_with_size+0x6c>
 8015498:	2304      	movs	r3, #4
 801549a:	602b      	str	r3, [r5, #0]
 801549c:	e7ec      	b.n	8015478 <rcl_validate_enclave_name_with_size+0x6c>
 801549e:	2305      	movs	r3, #5
 80154a0:	602b      	str	r3, [r5, #0]
 80154a2:	e7e9      	b.n	8015478 <rcl_validate_enclave_name_with_size+0x6c>
 80154a4:	f04f 0c0b 	mov.w	ip, #11
 80154a8:	4660      	mov	r0, ip
 80154aa:	4770      	bx	lr
 80154ac:	460b      	mov	r3, r1
 80154ae:	4a04      	ldr	r2, [pc, #16]	; (80154c0 <rcl_validate_enclave_name_with_size+0xb4>)
 80154b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80154b4:	a802      	add	r0, sp, #8
 80154b6:	f001 fd33 	bl	8016f20 <rcutils_snprintf>
 80154ba:	f04f 0c01 	mov.w	ip, #1
 80154be:	e7c1      	b.n	8015444 <rcl_validate_enclave_name_with_size+0x38>
 80154c0:	0801dadc 	.word	0x0801dadc

080154c4 <rcl_validate_enclave_name>:
 80154c4:	b168      	cbz	r0, 80154e2 <rcl_validate_enclave_name+0x1e>
 80154c6:	b570      	push	{r4, r5, r6, lr}
 80154c8:	460d      	mov	r5, r1
 80154ca:	4616      	mov	r6, r2
 80154cc:	4604      	mov	r4, r0
 80154ce:	f7ea ff17 	bl	8000300 <strlen>
 80154d2:	4633      	mov	r3, r6
 80154d4:	4601      	mov	r1, r0
 80154d6:	462a      	mov	r2, r5
 80154d8:	4620      	mov	r0, r4
 80154da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80154de:	f7ff bf95 	b.w	801540c <rcl_validate_enclave_name_with_size>
 80154e2:	200b      	movs	r0, #11
 80154e4:	4770      	bx	lr
 80154e6:	bf00      	nop

080154e8 <rcl_get_zero_initialized_wait_set>:
 80154e8:	b510      	push	{r4, lr}
 80154ea:	4c08      	ldr	r4, [pc, #32]	; (801550c <rcl_get_zero_initialized_wait_set+0x24>)
 80154ec:	4686      	mov	lr, r0
 80154ee:	4684      	mov	ip, r0
 80154f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80154f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80154f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80154f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80154fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80154fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015502:	6823      	ldr	r3, [r4, #0]
 8015504:	4670      	mov	r0, lr
 8015506:	f8cc 3000 	str.w	r3, [ip]
 801550a:	bd10      	pop	{r4, pc}
 801550c:	0801db3c 	.word	0x0801db3c

08015510 <rcl_wait_set_is_valid>:
 8015510:	b118      	cbz	r0, 801551a <rcl_wait_set_is_valid+0xa>
 8015512:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8015514:	3800      	subs	r0, #0
 8015516:	bf18      	it	ne
 8015518:	2001      	movne	r0, #1
 801551a:	4770      	bx	lr

0801551c <rcl_wait_set_fini>:
 801551c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015520:	b082      	sub	sp, #8
 8015522:	2800      	cmp	r0, #0
 8015524:	f000 8095 	beq.w	8015652 <rcl_wait_set_fini+0x136>
 8015528:	6b06      	ldr	r6, [r0, #48]	; 0x30
 801552a:	4604      	mov	r4, r0
 801552c:	2e00      	cmp	r6, #0
 801552e:	f000 808c 	beq.w	801564a <rcl_wait_set_fini+0x12e>
 8015532:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8015534:	f003 f9b8 	bl	80188a8 <rmw_destroy_wait_set>
 8015538:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801553a:	1e06      	subs	r6, r0, #0
 801553c:	bf18      	it	ne
 801553e:	f44f 7661 	movne.w	r6, #900	; 0x384
 8015542:	2d00      	cmp	r5, #0
 8015544:	f000 8081 	beq.w	801564a <rcl_wait_set_fini+0x12e>
 8015548:	2700      	movs	r7, #0
 801554a:	6820      	ldr	r0, [r4, #0]
 801554c:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8015550:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015552:	6067      	str	r7, [r4, #4]
 8015554:	602f      	str	r7, [r5, #0]
 8015556:	b120      	cbz	r0, 8015562 <rcl_wait_set_fini+0x46>
 8015558:	9101      	str	r1, [sp, #4]
 801555a:	47c0      	blx	r8
 801555c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801555e:	9901      	ldr	r1, [sp, #4]
 8015560:	6027      	str	r7, [r4, #0]
 8015562:	68a8      	ldr	r0, [r5, #8]
 8015564:	b120      	cbz	r0, 8015570 <rcl_wait_set_fini+0x54>
 8015566:	47c0      	blx	r8
 8015568:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801556a:	2300      	movs	r3, #0
 801556c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8015570:	f04f 0800 	mov.w	r8, #0
 8015574:	68a0      	ldr	r0, [r4, #8]
 8015576:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8015578:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801557a:	f8c4 800c 	str.w	r8, [r4, #12]
 801557e:	f8c5 800c 	str.w	r8, [r5, #12]
 8015582:	b128      	cbz	r0, 8015590 <rcl_wait_set_fini+0x74>
 8015584:	47b8      	blx	r7
 8015586:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015588:	f8c4 8008 	str.w	r8, [r4, #8]
 801558c:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801558e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015590:	f04f 0800 	mov.w	r8, #0
 8015594:	6968      	ldr	r0, [r5, #20]
 8015596:	f8c5 8010 	str.w	r8, [r5, #16]
 801559a:	b128      	cbz	r0, 80155a8 <rcl_wait_set_fini+0x8c>
 801559c:	47b8      	blx	r7
 801559e:	f8c5 8014 	str.w	r8, [r5, #20]
 80155a2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80155a4:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 80155a6:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80155a8:	f04f 0800 	mov.w	r8, #0
 80155ac:	6920      	ldr	r0, [r4, #16]
 80155ae:	f8c4 8014 	str.w	r8, [r4, #20]
 80155b2:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 80155b6:	b128      	cbz	r0, 80155c4 <rcl_wait_set_fini+0xa8>
 80155b8:	47b8      	blx	r7
 80155ba:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80155bc:	f8c4 8010 	str.w	r8, [r4, #16]
 80155c0:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 80155c2:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80155c4:	f04f 0800 	mov.w	r8, #0
 80155c8:	69a0      	ldr	r0, [r4, #24]
 80155ca:	f8c4 801c 	str.w	r8, [r4, #28]
 80155ce:	f8c5 8018 	str.w	r8, [r5, #24]
 80155d2:	b128      	cbz	r0, 80155e0 <rcl_wait_set_fini+0xc4>
 80155d4:	9101      	str	r1, [sp, #4]
 80155d6:	47b8      	blx	r7
 80155d8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80155da:	9901      	ldr	r1, [sp, #4]
 80155dc:	f8c4 8018 	str.w	r8, [r4, #24]
 80155e0:	6a28      	ldr	r0, [r5, #32]
 80155e2:	b120      	cbz	r0, 80155ee <rcl_wait_set_fini+0xd2>
 80155e4:	47b8      	blx	r7
 80155e6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80155e8:	2300      	movs	r3, #0
 80155ea:	e9c5 3307 	strd	r3, r3, [r5, #28]
 80155ee:	2700      	movs	r7, #0
 80155f0:	6a20      	ldr	r0, [r4, #32]
 80155f2:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 80155f6:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80155f8:	6267      	str	r7, [r4, #36]	; 0x24
 80155fa:	626f      	str	r7, [r5, #36]	; 0x24
 80155fc:	b120      	cbz	r0, 8015608 <rcl_wait_set_fini+0xec>
 80155fe:	9101      	str	r1, [sp, #4]
 8015600:	47c0      	blx	r8
 8015602:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015604:	9901      	ldr	r1, [sp, #4]
 8015606:	6227      	str	r7, [r4, #32]
 8015608:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 801560a:	b120      	cbz	r0, 8015616 <rcl_wait_set_fini+0xfa>
 801560c:	47c0      	blx	r8
 801560e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015610:	2300      	movs	r3, #0
 8015612:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8015616:	2700      	movs	r7, #0
 8015618:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801561a:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801561e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015620:	62e7      	str	r7, [r4, #44]	; 0x2c
 8015622:	632f      	str	r7, [r5, #48]	; 0x30
 8015624:	b120      	cbz	r0, 8015630 <rcl_wait_set_fini+0x114>
 8015626:	9101      	str	r1, [sp, #4]
 8015628:	47c0      	blx	r8
 801562a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801562c:	9901      	ldr	r1, [sp, #4]
 801562e:	62a7      	str	r7, [r4, #40]	; 0x28
 8015630:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8015632:	b120      	cbz	r0, 801563e <rcl_wait_set_fini+0x122>
 8015634:	47c0      	blx	r8
 8015636:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015638:	2300      	movs	r3, #0
 801563a:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 801563e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8015640:	4628      	mov	r0, r5
 8015642:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015644:	4798      	blx	r3
 8015646:	2300      	movs	r3, #0
 8015648:	6323      	str	r3, [r4, #48]	; 0x30
 801564a:	4630      	mov	r0, r6
 801564c:	b002      	add	sp, #8
 801564e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015652:	260b      	movs	r6, #11
 8015654:	4630      	mov	r0, r6
 8015656:	b002      	add	sp, #8
 8015658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801565c <rcl_wait_set_add_subscription>:
 801565c:	b318      	cbz	r0, 80156a6 <rcl_wait_set_add_subscription+0x4a>
 801565e:	b538      	push	{r3, r4, r5, lr}
 8015660:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8015662:	4604      	mov	r4, r0
 8015664:	b30b      	cbz	r3, 80156aa <rcl_wait_set_add_subscription+0x4e>
 8015666:	b319      	cbz	r1, 80156b0 <rcl_wait_set_add_subscription+0x54>
 8015668:	681d      	ldr	r5, [r3, #0]
 801566a:	6840      	ldr	r0, [r0, #4]
 801566c:	4285      	cmp	r5, r0
 801566e:	d217      	bcs.n	80156a0 <rcl_wait_set_add_subscription+0x44>
 8015670:	1c68      	adds	r0, r5, #1
 8015672:	6018      	str	r0, [r3, #0]
 8015674:	6823      	ldr	r3, [r4, #0]
 8015676:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801567a:	b102      	cbz	r2, 801567e <rcl_wait_set_add_subscription+0x22>
 801567c:	6015      	str	r5, [r2, #0]
 801567e:	4608      	mov	r0, r1
 8015680:	f7ff fad8 	bl	8014c34 <rcl_subscription_get_rmw_handle>
 8015684:	b150      	cbz	r0, 801569c <rcl_wait_set_add_subscription+0x40>
 8015686:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015688:	6842      	ldr	r2, [r0, #4]
 801568a:	2000      	movs	r0, #0
 801568c:	689b      	ldr	r3, [r3, #8]
 801568e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015692:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8015694:	6853      	ldr	r3, [r2, #4]
 8015696:	3301      	adds	r3, #1
 8015698:	6053      	str	r3, [r2, #4]
 801569a:	bd38      	pop	{r3, r4, r5, pc}
 801569c:	2001      	movs	r0, #1
 801569e:	bd38      	pop	{r3, r4, r5, pc}
 80156a0:	f240 3086 	movw	r0, #902	; 0x386
 80156a4:	bd38      	pop	{r3, r4, r5, pc}
 80156a6:	200b      	movs	r0, #11
 80156a8:	4770      	bx	lr
 80156aa:	f44f 7061 	mov.w	r0, #900	; 0x384
 80156ae:	bd38      	pop	{r3, r4, r5, pc}
 80156b0:	200b      	movs	r0, #11
 80156b2:	bd38      	pop	{r3, r4, r5, pc}

080156b4 <rcl_wait_set_clear>:
 80156b4:	2800      	cmp	r0, #0
 80156b6:	d074      	beq.n	80157a2 <rcl_wait_set_clear+0xee>
 80156b8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80156ba:	b510      	push	{r4, lr}
 80156bc:	4604      	mov	r4, r0
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d071      	beq.n	80157a6 <rcl_wait_set_clear+0xf2>
 80156c2:	6800      	ldr	r0, [r0, #0]
 80156c4:	b138      	cbz	r0, 80156d6 <rcl_wait_set_clear+0x22>
 80156c6:	6862      	ldr	r2, [r4, #4]
 80156c8:	2100      	movs	r1, #0
 80156ca:	0092      	lsls	r2, r2, #2
 80156cc:	f006 f8da 	bl	801b884 <memset>
 80156d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80156d2:	2200      	movs	r2, #0
 80156d4:	601a      	str	r2, [r3, #0]
 80156d6:	68a0      	ldr	r0, [r4, #8]
 80156d8:	b138      	cbz	r0, 80156ea <rcl_wait_set_clear+0x36>
 80156da:	68e2      	ldr	r2, [r4, #12]
 80156dc:	2100      	movs	r1, #0
 80156de:	0092      	lsls	r2, r2, #2
 80156e0:	f006 f8d0 	bl	801b884 <memset>
 80156e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80156e6:	2200      	movs	r2, #0
 80156e8:	60da      	str	r2, [r3, #12]
 80156ea:	69a0      	ldr	r0, [r4, #24]
 80156ec:	b138      	cbz	r0, 80156fe <rcl_wait_set_clear+0x4a>
 80156ee:	69e2      	ldr	r2, [r4, #28]
 80156f0:	2100      	movs	r1, #0
 80156f2:	0092      	lsls	r2, r2, #2
 80156f4:	f006 f8c6 	bl	801b884 <memset>
 80156f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80156fa:	2200      	movs	r2, #0
 80156fc:	619a      	str	r2, [r3, #24]
 80156fe:	6a20      	ldr	r0, [r4, #32]
 8015700:	b138      	cbz	r0, 8015712 <rcl_wait_set_clear+0x5e>
 8015702:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8015704:	2100      	movs	r1, #0
 8015706:	0092      	lsls	r2, r2, #2
 8015708:	f006 f8bc 	bl	801b884 <memset>
 801570c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801570e:	2200      	movs	r2, #0
 8015710:	625a      	str	r2, [r3, #36]	; 0x24
 8015712:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8015714:	b138      	cbz	r0, 8015726 <rcl_wait_set_clear+0x72>
 8015716:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8015718:	2100      	movs	r1, #0
 801571a:	0092      	lsls	r2, r2, #2
 801571c:	f006 f8b2 	bl	801b884 <memset>
 8015720:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015722:	2200      	movs	r2, #0
 8015724:	631a      	str	r2, [r3, #48]	; 0x30
 8015726:	6920      	ldr	r0, [r4, #16]
 8015728:	b138      	cbz	r0, 801573a <rcl_wait_set_clear+0x86>
 801572a:	6962      	ldr	r2, [r4, #20]
 801572c:	2100      	movs	r1, #0
 801572e:	0092      	lsls	r2, r2, #2
 8015730:	f006 f8a8 	bl	801b884 <memset>
 8015734:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015736:	2200      	movs	r2, #0
 8015738:	641a      	str	r2, [r3, #64]	; 0x40
 801573a:	6898      	ldr	r0, [r3, #8]
 801573c:	b138      	cbz	r0, 801574e <rcl_wait_set_clear+0x9a>
 801573e:	685a      	ldr	r2, [r3, #4]
 8015740:	2100      	movs	r1, #0
 8015742:	0092      	lsls	r2, r2, #2
 8015744:	f006 f89e 	bl	801b884 <memset>
 8015748:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801574a:	2200      	movs	r2, #0
 801574c:	605a      	str	r2, [r3, #4]
 801574e:	6958      	ldr	r0, [r3, #20]
 8015750:	b138      	cbz	r0, 8015762 <rcl_wait_set_clear+0xae>
 8015752:	691a      	ldr	r2, [r3, #16]
 8015754:	2100      	movs	r1, #0
 8015756:	0092      	lsls	r2, r2, #2
 8015758:	f006 f894 	bl	801b884 <memset>
 801575c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801575e:	2200      	movs	r2, #0
 8015760:	611a      	str	r2, [r3, #16]
 8015762:	6a18      	ldr	r0, [r3, #32]
 8015764:	b138      	cbz	r0, 8015776 <rcl_wait_set_clear+0xc2>
 8015766:	69da      	ldr	r2, [r3, #28]
 8015768:	2100      	movs	r1, #0
 801576a:	0092      	lsls	r2, r2, #2
 801576c:	f006 f88a 	bl	801b884 <memset>
 8015770:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015772:	2200      	movs	r2, #0
 8015774:	61da      	str	r2, [r3, #28]
 8015776:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8015778:	b138      	cbz	r0, 801578a <rcl_wait_set_clear+0xd6>
 801577a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801577c:	2100      	movs	r1, #0
 801577e:	0092      	lsls	r2, r2, #2
 8015780:	f006 f880 	bl	801b884 <memset>
 8015784:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015786:	2200      	movs	r2, #0
 8015788:	629a      	str	r2, [r3, #40]	; 0x28
 801578a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801578c:	b140      	cbz	r0, 80157a0 <rcl_wait_set_clear+0xec>
 801578e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015790:	2100      	movs	r1, #0
 8015792:	0092      	lsls	r2, r2, #2
 8015794:	f006 f876 	bl	801b884 <memset>
 8015798:	2300      	movs	r3, #0
 801579a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801579c:	4618      	mov	r0, r3
 801579e:	6353      	str	r3, [r2, #52]	; 0x34
 80157a0:	bd10      	pop	{r4, pc}
 80157a2:	200b      	movs	r0, #11
 80157a4:	4770      	bx	lr
 80157a6:	f44f 7061 	mov.w	r0, #900	; 0x384
 80157aa:	bd10      	pop	{r4, pc}

080157ac <rcl_wait_set_resize>:
 80157ac:	2800      	cmp	r0, #0
 80157ae:	f000 8180 	beq.w	8015ab2 <rcl_wait_set_resize+0x306>
 80157b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157b6:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80157b8:	b083      	sub	sp, #12
 80157ba:	4605      	mov	r5, r0
 80157bc:	2c00      	cmp	r4, #0
 80157be:	f000 817a 	beq.w	8015ab6 <rcl_wait_set_resize+0x30a>
 80157c2:	f04f 0900 	mov.w	r9, #0
 80157c6:	461f      	mov	r7, r3
 80157c8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80157cc:	4688      	mov	r8, r1
 80157ce:	4616      	mov	r6, r2
 80157d0:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	; 0x4c
 80157d4:	f8c0 9004 	str.w	r9, [r0, #4]
 80157d8:	f8c4 9000 	str.w	r9, [r4]
 80157dc:	2900      	cmp	r1, #0
 80157de:	f000 80bf 	beq.w	8015960 <rcl_wait_set_resize+0x1b4>
 80157e2:	008c      	lsls	r4, r1, #2
 80157e4:	4652      	mov	r2, sl
 80157e6:	6800      	ldr	r0, [r0, #0]
 80157e8:	4621      	mov	r1, r4
 80157ea:	9301      	str	r3, [sp, #4]
 80157ec:	4798      	blx	r3
 80157ee:	9b01      	ldr	r3, [sp, #4]
 80157f0:	6028      	str	r0, [r5, #0]
 80157f2:	2800      	cmp	r0, #0
 80157f4:	f000 80f6 	beq.w	80159e4 <rcl_wait_set_resize+0x238>
 80157f8:	4622      	mov	r2, r4
 80157fa:	4649      	mov	r1, r9
 80157fc:	9301      	str	r3, [sp, #4]
 80157fe:	f006 f841 	bl	801b884 <memset>
 8015802:	f8c5 8004 	str.w	r8, [r5, #4]
 8015806:	4652      	mov	r2, sl
 8015808:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 801580c:	4621      	mov	r1, r4
 801580e:	9b01      	ldr	r3, [sp, #4]
 8015810:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8015814:	f8c8 9004 	str.w	r9, [r8, #4]
 8015818:	4798      	blx	r3
 801581a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801581c:	f8c8 0008 	str.w	r0, [r8, #8]
 8015820:	689b      	ldr	r3, [r3, #8]
 8015822:	2b00      	cmp	r3, #0
 8015824:	f000 814a 	beq.w	8015abc <rcl_wait_set_resize+0x310>
 8015828:	4622      	mov	r2, r4
 801582a:	4649      	mov	r1, r9
 801582c:	4618      	mov	r0, r3
 801582e:	f006 f829 	bl	801b884 <memset>
 8015832:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8015834:	f04f 0800 	mov.w	r8, #0
 8015838:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801583c:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
 8015840:	f8c5 800c 	str.w	r8, [r5, #12]
 8015844:	f8c4 800c 	str.w	r8, [r4, #12]
 8015848:	2e00      	cmp	r6, #0
 801584a:	f040 809b 	bne.w	8015984 <rcl_wait_set_resize+0x1d8>
 801584e:	68a8      	ldr	r0, [r5, #8]
 8015850:	b128      	cbz	r0, 801585e <rcl_wait_set_resize+0xb2>
 8015852:	4649      	mov	r1, r9
 8015854:	4790      	blx	r2
 8015856:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8015858:	60ae      	str	r6, [r5, #8]
 801585a:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801585e:	f04f 0800 	mov.w	r8, #0
 8015862:	19f6      	adds	r6, r6, r7
 8015864:	f8c4 8010 	str.w	r8, [r4, #16]
 8015868:	f040 80a2 	bne.w	80159b0 <rcl_wait_set_resize+0x204>
 801586c:	6960      	ldr	r0, [r4, #20]
 801586e:	b130      	cbz	r0, 801587e <rcl_wait_set_resize+0xd2>
 8015870:	4649      	mov	r1, r9
 8015872:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8015874:	4798      	blx	r3
 8015876:	6166      	str	r6, [r4, #20]
 8015878:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801587a:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801587e:	2600      	movs	r6, #0
 8015880:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8015884:	616e      	str	r6, [r5, #20]
 8015886:	6426      	str	r6, [r4, #64]	; 0x40
 8015888:	2f00      	cmp	r7, #0
 801588a:	f040 80af 	bne.w	80159ec <rcl_wait_set_resize+0x240>
 801588e:	6928      	ldr	r0, [r5, #16]
 8015890:	b138      	cbz	r0, 80158a2 <rcl_wait_set_resize+0xf6>
 8015892:	4649      	mov	r1, r9
 8015894:	47d0      	blx	sl
 8015896:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8015898:	612f      	str	r7, [r5, #16]
 801589a:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801589e:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 80158a2:	2600      	movs	r6, #0
 80158a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80158a6:	61ee      	str	r6, [r5, #28]
 80158a8:	61a6      	str	r6, [r4, #24]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	f040 8093 	bne.w	80159d6 <rcl_wait_set_resize+0x22a>
 80158b0:	69a8      	ldr	r0, [r5, #24]
 80158b2:	b120      	cbz	r0, 80158be <rcl_wait_set_resize+0x112>
 80158b4:	4649      	mov	r1, r9
 80158b6:	47d0      	blx	sl
 80158b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80158ba:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80158bc:	61ab      	str	r3, [r5, #24]
 80158be:	6a20      	ldr	r0, [r4, #32]
 80158c0:	b128      	cbz	r0, 80158ce <rcl_wait_set_resize+0x122>
 80158c2:	4649      	mov	r1, r9
 80158c4:	47d0      	blx	sl
 80158c6:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80158c8:	2300      	movs	r3, #0
 80158ca:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80158ce:	2600      	movs	r6, #0
 80158d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80158d2:	6da7      	ldr	r7, [r4, #88]	; 0x58
 80158d4:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 80158d8:	626e      	str	r6, [r5, #36]	; 0x24
 80158da:	6266      	str	r6, [r4, #36]	; 0x24
 80158dc:	2b00      	cmp	r3, #0
 80158de:	f000 8098 	beq.w	8015a12 <rcl_wait_set_resize+0x266>
 80158e2:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80158e6:	463a      	mov	r2, r7
 80158e8:	6a28      	ldr	r0, [r5, #32]
 80158ea:	4651      	mov	r1, sl
 80158ec:	47c8      	blx	r9
 80158ee:	6228      	str	r0, [r5, #32]
 80158f0:	2800      	cmp	r0, #0
 80158f2:	d077      	beq.n	80159e4 <rcl_wait_set_resize+0x238>
 80158f4:	4652      	mov	r2, sl
 80158f6:	4631      	mov	r1, r6
 80158f8:	f005 ffc4 	bl	801b884 <memset>
 80158fc:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80158fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015900:	463a      	mov	r2, r7
 8015902:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8015904:	4651      	mov	r1, sl
 8015906:	626b      	str	r3, [r5, #36]	; 0x24
 8015908:	62a6      	str	r6, [r4, #40]	; 0x28
 801590a:	47c8      	blx	r9
 801590c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801590e:	62e0      	str	r0, [r4, #44]	; 0x2c
 8015910:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8015912:	2c00      	cmp	r4, #0
 8015914:	f000 80f2 	beq.w	8015afc <rcl_wait_set_resize+0x350>
 8015918:	4620      	mov	r0, r4
 801591a:	4652      	mov	r2, sl
 801591c:	4631      	mov	r1, r6
 801591e:	f005 ffb1 	bl	801b884 <memset>
 8015922:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8015924:	2600      	movs	r6, #0
 8015926:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015928:	6da7      	ldr	r7, [r4, #88]	; 0x58
 801592a:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 801592e:	62ee      	str	r6, [r5, #44]	; 0x2c
 8015930:	6326      	str	r6, [r4, #48]	; 0x30
 8015932:	2b00      	cmp	r3, #0
 8015934:	f040 8097 	bne.w	8015a66 <rcl_wait_set_resize+0x2ba>
 8015938:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801593a:	b120      	cbz	r0, 8015946 <rcl_wait_set_resize+0x19a>
 801593c:	4639      	mov	r1, r7
 801593e:	47c0      	blx	r8
 8015940:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015942:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8015944:	62ab      	str	r3, [r5, #40]	; 0x28
 8015946:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8015948:	2800      	cmp	r0, #0
 801594a:	d04c      	beq.n	80159e6 <rcl_wait_set_resize+0x23a>
 801594c:	4639      	mov	r1, r7
 801594e:	47c0      	blx	r8
 8015950:	2300      	movs	r3, #0
 8015952:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8015954:	4618      	mov	r0, r3
 8015956:	e9c2 330d 	strd	r3, r3, [r2, #52]	; 0x34
 801595a:	b003      	add	sp, #12
 801595c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015960:	6800      	ldr	r0, [r0, #0]
 8015962:	b120      	cbz	r0, 801596e <rcl_wait_set_resize+0x1c2>
 8015964:	4651      	mov	r1, sl
 8015966:	47d8      	blx	fp
 8015968:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801596a:	f8c5 8000 	str.w	r8, [r5]
 801596e:	68a0      	ldr	r0, [r4, #8]
 8015970:	2800      	cmp	r0, #0
 8015972:	f43f af5f 	beq.w	8015834 <rcl_wait_set_resize+0x88>
 8015976:	4651      	mov	r1, sl
 8015978:	47d8      	blx	fp
 801597a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801597c:	2300      	movs	r3, #0
 801597e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8015982:	e757      	b.n	8015834 <rcl_wait_set_resize+0x88>
 8015984:	00b4      	lsls	r4, r6, #2
 8015986:	464a      	mov	r2, r9
 8015988:	68a8      	ldr	r0, [r5, #8]
 801598a:	4621      	mov	r1, r4
 801598c:	4798      	blx	r3
 801598e:	60a8      	str	r0, [r5, #8]
 8015990:	b340      	cbz	r0, 80159e4 <rcl_wait_set_resize+0x238>
 8015992:	4622      	mov	r2, r4
 8015994:	4641      	mov	r1, r8
 8015996:	f005 ff75 	bl	801b884 <memset>
 801599a:	f04f 0800 	mov.w	r8, #0
 801599e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80159a0:	60ee      	str	r6, [r5, #12]
 80159a2:	19f6      	adds	r6, r6, r7
 80159a4:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80159a8:	f8c4 8010 	str.w	r8, [r4, #16]
 80159ac:	f43f af5e 	beq.w	801586c <rcl_wait_set_resize+0xc0>
 80159b0:	00b6      	lsls	r6, r6, #2
 80159b2:	464a      	mov	r2, r9
 80159b4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80159b6:	6960      	ldr	r0, [r4, #20]
 80159b8:	4631      	mov	r1, r6
 80159ba:	4798      	blx	r3
 80159bc:	4681      	mov	r9, r0
 80159be:	6160      	str	r0, [r4, #20]
 80159c0:	2800      	cmp	r0, #0
 80159c2:	f000 8084 	beq.w	8015ace <rcl_wait_set_resize+0x322>
 80159c6:	4632      	mov	r2, r6
 80159c8:	4641      	mov	r1, r8
 80159ca:	f005 ff5b 	bl	801b884 <memset>
 80159ce:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80159d0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80159d4:	e753      	b.n	801587e <rcl_wait_set_resize+0xd2>
 80159d6:	009c      	lsls	r4, r3, #2
 80159d8:	464a      	mov	r2, r9
 80159da:	69a8      	ldr	r0, [r5, #24]
 80159dc:	4621      	mov	r1, r4
 80159de:	47c0      	blx	r8
 80159e0:	61a8      	str	r0, [r5, #24]
 80159e2:	bb40      	cbnz	r0, 8015a36 <rcl_wait_set_resize+0x28a>
 80159e4:	200a      	movs	r0, #10
 80159e6:	b003      	add	sp, #12
 80159e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159ec:	00bc      	lsls	r4, r7, #2
 80159ee:	464a      	mov	r2, r9
 80159f0:	6928      	ldr	r0, [r5, #16]
 80159f2:	4621      	mov	r1, r4
 80159f4:	47c0      	blx	r8
 80159f6:	6128      	str	r0, [r5, #16]
 80159f8:	2800      	cmp	r0, #0
 80159fa:	d0f3      	beq.n	80159e4 <rcl_wait_set_resize+0x238>
 80159fc:	4622      	mov	r2, r4
 80159fe:	4631      	mov	r1, r6
 8015a00:	f005 ff40 	bl	801b884 <memset>
 8015a04:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8015a06:	616f      	str	r7, [r5, #20]
 8015a08:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8015a0c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8015a10:	e747      	b.n	80158a2 <rcl_wait_set_resize+0xf6>
 8015a12:	6a28      	ldr	r0, [r5, #32]
 8015a14:	b120      	cbz	r0, 8015a20 <rcl_wait_set_resize+0x274>
 8015a16:	4639      	mov	r1, r7
 8015a18:	47c0      	blx	r8
 8015a1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015a1c:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8015a1e:	622b      	str	r3, [r5, #32]
 8015a20:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8015a22:	2800      	cmp	r0, #0
 8015a24:	f43f af7e 	beq.w	8015924 <rcl_wait_set_resize+0x178>
 8015a28:	4639      	mov	r1, r7
 8015a2a:	47c0      	blx	r8
 8015a2c:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8015a2e:	2300      	movs	r3, #0
 8015a30:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8015a34:	e776      	b.n	8015924 <rcl_wait_set_resize+0x178>
 8015a36:	4622      	mov	r2, r4
 8015a38:	4631      	mov	r1, r6
 8015a3a:	f005 ff23 	bl	801b884 <memset>
 8015a3e:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 8015a40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015a42:	464a      	mov	r2, r9
 8015a44:	6a38      	ldr	r0, [r7, #32]
 8015a46:	4621      	mov	r1, r4
 8015a48:	61eb      	str	r3, [r5, #28]
 8015a4a:	61fe      	str	r6, [r7, #28]
 8015a4c:	47c0      	blx	r8
 8015a4e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8015a50:	6238      	str	r0, [r7, #32]
 8015a52:	6a1f      	ldr	r7, [r3, #32]
 8015a54:	2f00      	cmp	r7, #0
 8015a56:	d04a      	beq.n	8015aee <rcl_wait_set_resize+0x342>
 8015a58:	4622      	mov	r2, r4
 8015a5a:	4631      	mov	r1, r6
 8015a5c:	4638      	mov	r0, r7
 8015a5e:	f005 ff11 	bl	801b884 <memset>
 8015a62:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8015a64:	e733      	b.n	80158ce <rcl_wait_set_resize+0x122>
 8015a66:	009c      	lsls	r4, r3, #2
 8015a68:	463a      	mov	r2, r7
 8015a6a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8015a6c:	4621      	mov	r1, r4
 8015a6e:	47c8      	blx	r9
 8015a70:	62a8      	str	r0, [r5, #40]	; 0x28
 8015a72:	2800      	cmp	r0, #0
 8015a74:	d0b6      	beq.n	80159e4 <rcl_wait_set_resize+0x238>
 8015a76:	4622      	mov	r2, r4
 8015a78:	4631      	mov	r1, r6
 8015a7a:	f005 ff03 	bl	801b884 <memset>
 8015a7e:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8015a82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015a84:	463a      	mov	r2, r7
 8015a86:	4621      	mov	r1, r4
 8015a88:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 8015a8c:	62eb      	str	r3, [r5, #44]	; 0x2c
 8015a8e:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
 8015a92:	47c8      	blx	r9
 8015a94:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8015a96:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 8015a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d034      	beq.n	8015b0a <rcl_wait_set_resize+0x35e>
 8015aa0:	4622      	mov	r2, r4
 8015aa2:	4631      	mov	r1, r6
 8015aa4:	4618      	mov	r0, r3
 8015aa6:	f005 feed 	bl	801b884 <memset>
 8015aaa:	4630      	mov	r0, r6
 8015aac:	b003      	add	sp, #12
 8015aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ab2:	200b      	movs	r0, #11
 8015ab4:	4770      	bx	lr
 8015ab6:	f44f 7061 	mov.w	r0, #900	; 0x384
 8015aba:	e794      	b.n	80159e6 <rcl_wait_set_resize+0x23a>
 8015abc:	6828      	ldr	r0, [r5, #0]
 8015abe:	4651      	mov	r1, sl
 8015ac0:	9301      	str	r3, [sp, #4]
 8015ac2:	47d8      	blx	fp
 8015ac4:	9b01      	ldr	r3, [sp, #4]
 8015ac6:	200a      	movs	r0, #10
 8015ac8:	e9c5 3300 	strd	r3, r3, [r5]
 8015acc:	e78b      	b.n	80159e6 <rcl_wait_set_resize+0x23a>
 8015ace:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8015ad0:	68a8      	ldr	r0, [r5, #8]
 8015ad2:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8015ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015ad6:	4798      	blx	r3
 8015ad8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8015ada:	6928      	ldr	r0, [r5, #16]
 8015adc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015ade:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8015ae0:	e9c5 9902 	strd	r9, r9, [r5, #8]
 8015ae4:	4790      	blx	r2
 8015ae6:	200a      	movs	r0, #10
 8015ae8:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8015aec:	e77b      	b.n	80159e6 <rcl_wait_set_resize+0x23a>
 8015aee:	69a8      	ldr	r0, [r5, #24]
 8015af0:	4649      	mov	r1, r9
 8015af2:	47d0      	blx	sl
 8015af4:	200a      	movs	r0, #10
 8015af6:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8015afa:	e774      	b.n	80159e6 <rcl_wait_set_resize+0x23a>
 8015afc:	6a28      	ldr	r0, [r5, #32]
 8015afe:	4639      	mov	r1, r7
 8015b00:	47c0      	blx	r8
 8015b02:	200a      	movs	r0, #10
 8015b04:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8015b08:	e76d      	b.n	80159e6 <rcl_wait_set_resize+0x23a>
 8015b0a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8015b0c:	4639      	mov	r1, r7
 8015b0e:	9301      	str	r3, [sp, #4]
 8015b10:	47c0      	blx	r8
 8015b12:	9b01      	ldr	r3, [sp, #4]
 8015b14:	200a      	movs	r0, #10
 8015b16:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8015b1a:	e764      	b.n	80159e6 <rcl_wait_set_resize+0x23a>

08015b1c <rcl_wait_set_init>:
 8015b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b20:	b085      	sub	sp, #20
 8015b22:	4605      	mov	r5, r0
 8015b24:	460e      	mov	r6, r1
 8015b26:	4617      	mov	r7, r2
 8015b28:	a812      	add	r0, sp, #72	; 0x48
 8015b2a:	4698      	mov	r8, r3
 8015b2c:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 8015b30:	f7f7 fd08 	bl	800d544 <rcutils_allocator_is_valid>
 8015b34:	2d00      	cmp	r5, #0
 8015b36:	d072      	beq.n	8015c1e <rcl_wait_set_init+0x102>
 8015b38:	f080 0001 	eor.w	r0, r0, #1
 8015b3c:	b2c0      	uxtb	r0, r0
 8015b3e:	2800      	cmp	r0, #0
 8015b40:	d16d      	bne.n	8015c1e <rcl_wait_set_init+0x102>
 8015b42:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8015b46:	f1ba 0f00 	cmp.w	sl, #0
 8015b4a:	d004      	beq.n	8015b56 <rcl_wait_set_init+0x3a>
 8015b4c:	2464      	movs	r4, #100	; 0x64
 8015b4e:	4620      	mov	r0, r4
 8015b50:	b005      	add	sp, #20
 8015b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b56:	f1b9 0f00 	cmp.w	r9, #0
 8015b5a:	d060      	beq.n	8015c1e <rcl_wait_set_init+0x102>
 8015b5c:	4648      	mov	r0, r9
 8015b5e:	f7fd ffcb 	bl	8013af8 <rcl_context_is_valid>
 8015b62:	2800      	cmp	r0, #0
 8015b64:	d068      	beq.n	8015c38 <rcl_wait_set_init+0x11c>
 8015b66:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015b68:	205c      	movs	r0, #92	; 0x5c
 8015b6a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015b6c:	4798      	blx	r3
 8015b6e:	6328      	str	r0, [r5, #48]	; 0x30
 8015b70:	2800      	cmp	r0, #0
 8015b72:	d063      	beq.n	8015c3c <rcl_wait_set_init+0x120>
 8015b74:	225c      	movs	r2, #92	; 0x5c
 8015b76:	4651      	mov	r1, sl
 8015b78:	f005 fe84 	bl	801b884 <memset>
 8015b7c:	ac12      	add	r4, sp, #72	; 0x48
 8015b7e:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
 8015b82:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8015b86:	f10b 0c48 	add.w	ip, fp, #72	; 0x48
 8015b8a:	f8cb 9044 	str.w	r9, [fp, #68]	; 0x44
 8015b8e:	eb03 0e02 	add.w	lr, r3, r2
 8015b92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015b94:	f8d9 9000 	ldr.w	r9, [r9]
 8015b98:	449e      	add	lr, r3
 8015b9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015b9c:	e9cb aa01 	strd	sl, sl, [fp, #4]
 8015ba0:	e9cb aa04 	strd	sl, sl, [fp, #16]
 8015ba4:	e9cb aa07 	strd	sl, sl, [fp, #28]
 8015ba8:	e9cb aa0a 	strd	sl, sl, [fp, #40]	; 0x28
 8015bac:	e9cb aa0d 	strd	sl, sl, [fp, #52]	; 0x34
 8015bb0:	44be      	add	lr, r7
 8015bb2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015bb6:	6823      	ldr	r3, [r4, #0]
 8015bb8:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 8015bbc:	f109 0028 	add.w	r0, r9, #40	; 0x28
 8015bc0:	f8cc 3000 	str.w	r3, [ip]
 8015bc4:	f002 fe66 	bl	8018894 <rmw_create_wait_set>
 8015bc8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8015bca:	f8cb 003c 	str.w	r0, [fp, #60]	; 0x3c
 8015bce:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8015bd0:	b350      	cbz	r0, 8015c28 <rcl_wait_set_init+0x10c>
 8015bd2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8015bd4:	4643      	mov	r3, r8
 8015bd6:	463a      	mov	r2, r7
 8015bd8:	4631      	mov	r1, r6
 8015bda:	9402      	str	r4, [sp, #8]
 8015bdc:	4628      	mov	r0, r5
 8015bde:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8015be0:	9401      	str	r4, [sp, #4]
 8015be2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8015be4:	9400      	str	r4, [sp, #0]
 8015be6:	f7ff fde1 	bl	80157ac <rcl_wait_set_resize>
 8015bea:	4604      	mov	r4, r0
 8015bec:	2800      	cmp	r0, #0
 8015bee:	d0ae      	beq.n	8015b4e <rcl_wait_set_init+0x32>
 8015bf0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8015bf2:	bb2b      	cbnz	r3, 8015c40 <rcl_wait_set_init+0x124>
 8015bf4:	2600      	movs	r6, #0
 8015bf6:	4628      	mov	r0, r5
 8015bf8:	4633      	mov	r3, r6
 8015bfa:	4632      	mov	r2, r6
 8015bfc:	4631      	mov	r1, r6
 8015bfe:	9600      	str	r6, [sp, #0]
 8015c00:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8015c04:	f7ff fdd2 	bl	80157ac <rcl_wait_set_resize>
 8015c08:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8015c0a:	2800      	cmp	r0, #0
 8015c0c:	d09f      	beq.n	8015b4e <rcl_wait_set_init+0x32>
 8015c0e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8015c10:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8015c12:	4798      	blx	r3
 8015c14:	4620      	mov	r0, r4
 8015c16:	632e      	str	r6, [r5, #48]	; 0x30
 8015c18:	b005      	add	sp, #20
 8015c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c1e:	240b      	movs	r4, #11
 8015c20:	4620      	mov	r0, r4
 8015c22:	b005      	add	sp, #20
 8015c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c28:	2401      	movs	r4, #1
 8015c2a:	f002 fe3d 	bl	80188a8 <rmw_destroy_wait_set>
 8015c2e:	2800      	cmp	r0, #0
 8015c30:	bf18      	it	ne
 8015c32:	f44f 7461 	movne.w	r4, #900	; 0x384
 8015c36:	e7dd      	b.n	8015bf4 <rcl_wait_set_init+0xd8>
 8015c38:	2465      	movs	r4, #101	; 0x65
 8015c3a:	e788      	b.n	8015b4e <rcl_wait_set_init+0x32>
 8015c3c:	240a      	movs	r4, #10
 8015c3e:	e786      	b.n	8015b4e <rcl_wait_set_init+0x32>
 8015c40:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8015c42:	e7f2      	b.n	8015c2a <rcl_wait_set_init+0x10e>

08015c44 <rcl_wait_set_add_guard_condition>:
 8015c44:	b318      	cbz	r0, 8015c8e <rcl_wait_set_add_guard_condition+0x4a>
 8015c46:	b538      	push	{r3, r4, r5, lr}
 8015c48:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8015c4a:	4604      	mov	r4, r0
 8015c4c:	b30b      	cbz	r3, 8015c92 <rcl_wait_set_add_guard_condition+0x4e>
 8015c4e:	b319      	cbz	r1, 8015c98 <rcl_wait_set_add_guard_condition+0x54>
 8015c50:	68dd      	ldr	r5, [r3, #12]
 8015c52:	68c0      	ldr	r0, [r0, #12]
 8015c54:	4285      	cmp	r5, r0
 8015c56:	d217      	bcs.n	8015c88 <rcl_wait_set_add_guard_condition+0x44>
 8015c58:	1c68      	adds	r0, r5, #1
 8015c5a:	60d8      	str	r0, [r3, #12]
 8015c5c:	68a3      	ldr	r3, [r4, #8]
 8015c5e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8015c62:	b102      	cbz	r2, 8015c66 <rcl_wait_set_add_guard_condition+0x22>
 8015c64:	6015      	str	r5, [r2, #0]
 8015c66:	4608      	mov	r0, r1
 8015c68:	f004 fe6c 	bl	801a944 <rcl_guard_condition_get_rmw_handle>
 8015c6c:	b150      	cbz	r0, 8015c84 <rcl_wait_set_add_guard_condition+0x40>
 8015c6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015c70:	6842      	ldr	r2, [r0, #4]
 8015c72:	2000      	movs	r0, #0
 8015c74:	695b      	ldr	r3, [r3, #20]
 8015c76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015c7a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8015c7c:	6913      	ldr	r3, [r2, #16]
 8015c7e:	3301      	adds	r3, #1
 8015c80:	6113      	str	r3, [r2, #16]
 8015c82:	bd38      	pop	{r3, r4, r5, pc}
 8015c84:	2001      	movs	r0, #1
 8015c86:	bd38      	pop	{r3, r4, r5, pc}
 8015c88:	f240 3086 	movw	r0, #902	; 0x386
 8015c8c:	bd38      	pop	{r3, r4, r5, pc}
 8015c8e:	200b      	movs	r0, #11
 8015c90:	4770      	bx	lr
 8015c92:	f44f 7061 	mov.w	r0, #900	; 0x384
 8015c96:	bd38      	pop	{r3, r4, r5, pc}
 8015c98:	200b      	movs	r0, #11
 8015c9a:	bd38      	pop	{r3, r4, r5, pc}

08015c9c <rcl_wait_set_add_timer>:
 8015c9c:	b328      	cbz	r0, 8015cea <rcl_wait_set_add_timer+0x4e>
 8015c9e:	b538      	push	{r3, r4, r5, lr}
 8015ca0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8015ca2:	4604      	mov	r4, r0
 8015ca4:	b31b      	cbz	r3, 8015cee <rcl_wait_set_add_timer+0x52>
 8015ca6:	b329      	cbz	r1, 8015cf4 <rcl_wait_set_add_timer+0x58>
 8015ca8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8015caa:	6965      	ldr	r5, [r4, #20]
 8015cac:	42a8      	cmp	r0, r5
 8015cae:	d219      	bcs.n	8015ce4 <rcl_wait_set_add_timer+0x48>
 8015cb0:	1c45      	adds	r5, r0, #1
 8015cb2:	641d      	str	r5, [r3, #64]	; 0x40
 8015cb4:	6923      	ldr	r3, [r4, #16]
 8015cb6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8015cba:	b102      	cbz	r2, 8015cbe <rcl_wait_set_add_timer+0x22>
 8015cbc:	6010      	str	r0, [r2, #0]
 8015cbe:	4608      	mov	r0, r1
 8015cc0:	f7ff fb9a 	bl	80153f8 <rcl_timer_get_guard_condition>
 8015cc4:	b168      	cbz	r0, 8015ce2 <rcl_wait_set_add_timer+0x46>
 8015cc6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8015cc8:	68e3      	ldr	r3, [r4, #12]
 8015cca:	6c15      	ldr	r5, [r2, #64]	; 0x40
 8015ccc:	3b01      	subs	r3, #1
 8015cce:	441d      	add	r5, r3
 8015cd0:	f004 fe38 	bl	801a944 <rcl_guard_condition_get_rmw_handle>
 8015cd4:	b180      	cbz	r0, 8015cf8 <rcl_wait_set_add_timer+0x5c>
 8015cd6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015cd8:	6842      	ldr	r2, [r0, #4]
 8015cda:	2000      	movs	r0, #0
 8015cdc:	695b      	ldr	r3, [r3, #20]
 8015cde:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015ce2:	bd38      	pop	{r3, r4, r5, pc}
 8015ce4:	f240 3086 	movw	r0, #902	; 0x386
 8015ce8:	bd38      	pop	{r3, r4, r5, pc}
 8015cea:	200b      	movs	r0, #11
 8015cec:	4770      	bx	lr
 8015cee:	f44f 7061 	mov.w	r0, #900	; 0x384
 8015cf2:	bd38      	pop	{r3, r4, r5, pc}
 8015cf4:	200b      	movs	r0, #11
 8015cf6:	bd38      	pop	{r3, r4, r5, pc}
 8015cf8:	2001      	movs	r0, #1
 8015cfa:	bd38      	pop	{r3, r4, r5, pc}

08015cfc <rcl_wait_set_add_client>:
 8015cfc:	b318      	cbz	r0, 8015d46 <rcl_wait_set_add_client+0x4a>
 8015cfe:	b538      	push	{r3, r4, r5, lr}
 8015d00:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8015d02:	4604      	mov	r4, r0
 8015d04:	b30b      	cbz	r3, 8015d4a <rcl_wait_set_add_client+0x4e>
 8015d06:	b319      	cbz	r1, 8015d50 <rcl_wait_set_add_client+0x54>
 8015d08:	699d      	ldr	r5, [r3, #24]
 8015d0a:	69c0      	ldr	r0, [r0, #28]
 8015d0c:	4285      	cmp	r5, r0
 8015d0e:	d217      	bcs.n	8015d40 <rcl_wait_set_add_client+0x44>
 8015d10:	1c68      	adds	r0, r5, #1
 8015d12:	6198      	str	r0, [r3, #24]
 8015d14:	69a3      	ldr	r3, [r4, #24]
 8015d16:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8015d1a:	b102      	cbz	r2, 8015d1e <rcl_wait_set_add_client+0x22>
 8015d1c:	6015      	str	r5, [r2, #0]
 8015d1e:	4608      	mov	r0, r1
 8015d20:	f7fd fe02 	bl	8013928 <rcl_client_get_rmw_handle>
 8015d24:	b150      	cbz	r0, 8015d3c <rcl_wait_set_add_client+0x40>
 8015d26:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015d28:	6842      	ldr	r2, [r0, #4]
 8015d2a:	2000      	movs	r0, #0
 8015d2c:	6a1b      	ldr	r3, [r3, #32]
 8015d2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015d32:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8015d34:	69d3      	ldr	r3, [r2, #28]
 8015d36:	3301      	adds	r3, #1
 8015d38:	61d3      	str	r3, [r2, #28]
 8015d3a:	bd38      	pop	{r3, r4, r5, pc}
 8015d3c:	2001      	movs	r0, #1
 8015d3e:	bd38      	pop	{r3, r4, r5, pc}
 8015d40:	f240 3086 	movw	r0, #902	; 0x386
 8015d44:	bd38      	pop	{r3, r4, r5, pc}
 8015d46:	200b      	movs	r0, #11
 8015d48:	4770      	bx	lr
 8015d4a:	f44f 7061 	mov.w	r0, #900	; 0x384
 8015d4e:	bd38      	pop	{r3, r4, r5, pc}
 8015d50:	200b      	movs	r0, #11
 8015d52:	bd38      	pop	{r3, r4, r5, pc}

08015d54 <rcl_wait_set_add_service>:
 8015d54:	b318      	cbz	r0, 8015d9e <rcl_wait_set_add_service+0x4a>
 8015d56:	b538      	push	{r3, r4, r5, lr}
 8015d58:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8015d5a:	4604      	mov	r4, r0
 8015d5c:	b30b      	cbz	r3, 8015da2 <rcl_wait_set_add_service+0x4e>
 8015d5e:	b319      	cbz	r1, 8015da8 <rcl_wait_set_add_service+0x54>
 8015d60:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8015d62:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8015d64:	4285      	cmp	r5, r0
 8015d66:	d217      	bcs.n	8015d98 <rcl_wait_set_add_service+0x44>
 8015d68:	1c68      	adds	r0, r5, #1
 8015d6a:	6258      	str	r0, [r3, #36]	; 0x24
 8015d6c:	6a23      	ldr	r3, [r4, #32]
 8015d6e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8015d72:	b102      	cbz	r2, 8015d76 <rcl_wait_set_add_service+0x22>
 8015d74:	6015      	str	r5, [r2, #0]
 8015d76:	4608      	mov	r0, r1
 8015d78:	f7fe fdd8 	bl	801492c <rcl_service_get_rmw_handle>
 8015d7c:	b150      	cbz	r0, 8015d94 <rcl_wait_set_add_service+0x40>
 8015d7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015d80:	6842      	ldr	r2, [r0, #4]
 8015d82:	2000      	movs	r0, #0
 8015d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015d8a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8015d8c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8015d8e:	3301      	adds	r3, #1
 8015d90:	6293      	str	r3, [r2, #40]	; 0x28
 8015d92:	bd38      	pop	{r3, r4, r5, pc}
 8015d94:	2001      	movs	r0, #1
 8015d96:	bd38      	pop	{r3, r4, r5, pc}
 8015d98:	f240 3086 	movw	r0, #902	; 0x386
 8015d9c:	bd38      	pop	{r3, r4, r5, pc}
 8015d9e:	200b      	movs	r0, #11
 8015da0:	4770      	bx	lr
 8015da2:	f44f 7061 	mov.w	r0, #900	; 0x384
 8015da6:	bd38      	pop	{r3, r4, r5, pc}
 8015da8:	200b      	movs	r0, #11
 8015daa:	bd38      	pop	{r3, r4, r5, pc}
 8015dac:	0000      	movs	r0, r0
	...

08015db0 <rcl_wait>:
 8015db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015db4:	ed2d 8b02 	vpush	{d8}
 8015db8:	b08d      	sub	sp, #52	; 0x34
 8015dba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015dbe:	2800      	cmp	r0, #0
 8015dc0:	f000 814f 	beq.w	8016062 <rcl_wait+0x2b2>
 8015dc4:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8015dc6:	4605      	mov	r5, r0
 8015dc8:	2e00      	cmp	r6, #0
 8015dca:	f000 811a 	beq.w	8016002 <rcl_wait+0x252>
 8015dce:	6843      	ldr	r3, [r0, #4]
 8015dd0:	b983      	cbnz	r3, 8015df4 <rcl_wait+0x44>
 8015dd2:	68eb      	ldr	r3, [r5, #12]
 8015dd4:	b973      	cbnz	r3, 8015df4 <rcl_wait+0x44>
 8015dd6:	696b      	ldr	r3, [r5, #20]
 8015dd8:	b963      	cbnz	r3, 8015df4 <rcl_wait+0x44>
 8015dda:	69eb      	ldr	r3, [r5, #28]
 8015ddc:	b953      	cbnz	r3, 8015df4 <rcl_wait+0x44>
 8015dde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015de0:	b943      	cbnz	r3, 8015df4 <rcl_wait+0x44>
 8015de2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8015de4:	b933      	cbnz	r3, 8015df4 <rcl_wait+0x44>
 8015de6:	f240 3085 	movw	r0, #901	; 0x385
 8015dea:	b00d      	add	sp, #52	; 0x34
 8015dec:	ecbd 8b02 	vpop	{d8}
 8015df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015df4:	9b04      	ldr	r3, [sp, #16]
 8015df6:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8015df8:	2b01      	cmp	r3, #1
 8015dfa:	9b05      	ldr	r3, [sp, #20]
 8015dfc:	f173 0300 	sbcs.w	r3, r3, #0
 8015e00:	f2c0 80f8 	blt.w	8015ff4 <rcl_wait+0x244>
 8015e04:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8015e08:	2a00      	cmp	r2, #0
 8015e0a:	f000 810f 	beq.w	801602c <rcl_wait+0x27c>
 8015e0e:	2400      	movs	r4, #0
 8015e10:	4613      	mov	r3, r2
 8015e12:	f240 3921 	movw	r9, #801	; 0x321
 8015e16:	4632      	mov	r2, r6
 8015e18:	46a2      	mov	sl, r4
 8015e1a:	46a3      	mov	fp, r4
 8015e1c:	ed9f 8b98 	vldr	d8, [pc, #608]	; 8016080 <rcl_wait+0x2d0>
 8015e20:	e014      	b.n	8015e4c <rcl_wait+0x9c>
 8015e22:	2800      	cmp	r0, #0
 8015e24:	d1e1      	bne.n	8015dea <rcl_wait+0x3a>
 8015e26:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015e2a:	4542      	cmp	r2, r8
 8015e2c:	eb73 0107 	sbcs.w	r1, r3, r7
 8015e30:	da03      	bge.n	8015e3a <rcl_wait+0x8a>
 8015e32:	4690      	mov	r8, r2
 8015e34:	461f      	mov	r7, r3
 8015e36:	f04f 0b01 	mov.w	fp, #1
 8015e3a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8015e3c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8015e3e:	3401      	adds	r4, #1
 8015e40:	f14a 0a00 	adc.w	sl, sl, #0
 8015e44:	429c      	cmp	r4, r3
 8015e46:	f17a 0100 	sbcs.w	r1, sl, #0
 8015e4a:	d228      	bcs.n	8015e9e <rcl_wait+0xee>
 8015e4c:	6928      	ldr	r0, [r5, #16]
 8015e4e:	a908      	add	r1, sp, #32
 8015e50:	00a6      	lsls	r6, r4, #2
 8015e52:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8015e56:	2800      	cmp	r0, #0
 8015e58:	d0f1      	beq.n	8015e3e <rcl_wait+0x8e>
 8015e5a:	68eb      	ldr	r3, [r5, #12]
 8015e5c:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8015e60:	4423      	add	r3, r4
 8015e62:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8015e66:	f1be 0f00 	cmp.w	lr, #0
 8015e6a:	d006      	beq.n	8015e7a <rcl_wait+0xca>
 8015e6c:	6913      	ldr	r3, [r2, #16]
 8015e6e:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8015e72:	3301      	adds	r3, #1
 8015e74:	6113      	str	r3, [r2, #16]
 8015e76:	692b      	ldr	r3, [r5, #16]
 8015e78:	5998      	ldr	r0, [r3, r6]
 8015e7a:	ed8d 8b08 	vstr	d8, [sp, #32]
 8015e7e:	f7ff fa89 	bl	8015394 <rcl_timer_get_time_until_next_call>
 8015e82:	4548      	cmp	r0, r9
 8015e84:	d1cd      	bne.n	8015e22 <rcl_wait+0x72>
 8015e86:	692b      	ldr	r3, [r5, #16]
 8015e88:	2200      	movs	r2, #0
 8015e8a:	3401      	adds	r4, #1
 8015e8c:	519a      	str	r2, [r3, r6]
 8015e8e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8015e90:	f14a 0a00 	adc.w	sl, sl, #0
 8015e94:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8015e96:	429c      	cmp	r4, r3
 8015e98:	f17a 0100 	sbcs.w	r1, sl, #0
 8015e9c:	d3d6      	bcc.n	8015e4c <rcl_wait+0x9c>
 8015e9e:	4659      	mov	r1, fp
 8015ea0:	4616      	mov	r6, r2
 8015ea2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8015ea6:	4313      	orrs	r3, r2
 8015ea8:	f040 80b4 	bne.w	8016014 <rcl_wait+0x264>
 8015eac:	2300      	movs	r3, #0
 8015eae:	2200      	movs	r2, #0
 8015eb0:	460c      	mov	r4, r1
 8015eb2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015eb6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015eba:	ab08      	add	r3, sp, #32
 8015ebc:	9302      	str	r3, [sp, #8]
 8015ebe:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8015ec2:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8015ec4:	f106 0110 	add.w	r1, r6, #16
 8015ec8:	9300      	str	r3, [sp, #0]
 8015eca:	1d30      	adds	r0, r6, #4
 8015ecc:	f106 031c 	add.w	r3, r6, #28
 8015ed0:	9201      	str	r2, [sp, #4]
 8015ed2:	f106 0228 	add.w	r2, r6, #40	; 0x28
 8015ed6:	f002 fb79 	bl	80185cc <rmw_wait>
 8015eda:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8015edc:	4680      	mov	r8, r0
 8015ede:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015ee0:	b1e2      	cbz	r2, 8015f1c <rcl_wait+0x16c>
 8015ee2:	f04f 0900 	mov.w	r9, #0
 8015ee6:	464f      	mov	r7, r9
 8015ee8:	692a      	ldr	r2, [r5, #16]
 8015eea:	f10d 011f 	add.w	r1, sp, #31
 8015eee:	ea4f 0689 	mov.w	r6, r9, lsl #2
 8015ef2:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 8015ef6:	b160      	cbz	r0, 8015f12 <rcl_wait+0x162>
 8015ef8:	f88d 701f 	strb.w	r7, [sp, #31]
 8015efc:	f7ff fa0e 	bl	801531c <rcl_timer_is_ready>
 8015f00:	2800      	cmp	r0, #0
 8015f02:	f47f af72 	bne.w	8015dea <rcl_wait+0x3a>
 8015f06:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8015f0a:	b90b      	cbnz	r3, 8015f10 <rcl_wait+0x160>
 8015f0c:	692a      	ldr	r2, [r5, #16]
 8015f0e:	5193      	str	r3, [r2, r6]
 8015f10:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8015f12:	f109 0901 	add.w	r9, r9, #1
 8015f16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015f18:	454a      	cmp	r2, r9
 8015f1a:	d8e5      	bhi.n	8015ee8 <rcl_wait+0x138>
 8015f1c:	f038 0002 	bics.w	r0, r8, #2
 8015f20:	d176      	bne.n	8016010 <rcl_wait+0x260>
 8015f22:	686f      	ldr	r7, [r5, #4]
 8015f24:	b17f      	cbz	r7, 8015f46 <rcl_wait+0x196>
 8015f26:	4602      	mov	r2, r0
 8015f28:	e002      	b.n	8015f30 <rcl_wait+0x180>
 8015f2a:	3201      	adds	r2, #1
 8015f2c:	42ba      	cmp	r2, r7
 8015f2e:	d00a      	beq.n	8015f46 <rcl_wait+0x196>
 8015f30:	6899      	ldr	r1, [r3, #8]
 8015f32:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015f36:	2900      	cmp	r1, #0
 8015f38:	d1f7      	bne.n	8015f2a <rcl_wait+0x17a>
 8015f3a:	682e      	ldr	r6, [r5, #0]
 8015f3c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8015f40:	3201      	adds	r2, #1
 8015f42:	42ba      	cmp	r2, r7
 8015f44:	d1f4      	bne.n	8015f30 <rcl_wait+0x180>
 8015f46:	68ef      	ldr	r7, [r5, #12]
 8015f48:	b17f      	cbz	r7, 8015f6a <rcl_wait+0x1ba>
 8015f4a:	2200      	movs	r2, #0
 8015f4c:	e002      	b.n	8015f54 <rcl_wait+0x1a4>
 8015f4e:	3201      	adds	r2, #1
 8015f50:	42ba      	cmp	r2, r7
 8015f52:	d00a      	beq.n	8015f6a <rcl_wait+0x1ba>
 8015f54:	6959      	ldr	r1, [r3, #20]
 8015f56:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015f5a:	2900      	cmp	r1, #0
 8015f5c:	d1f7      	bne.n	8015f4e <rcl_wait+0x19e>
 8015f5e:	68ae      	ldr	r6, [r5, #8]
 8015f60:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8015f64:	3201      	adds	r2, #1
 8015f66:	42ba      	cmp	r2, r7
 8015f68:	d1f4      	bne.n	8015f54 <rcl_wait+0x1a4>
 8015f6a:	69ef      	ldr	r7, [r5, #28]
 8015f6c:	b17f      	cbz	r7, 8015f8e <rcl_wait+0x1de>
 8015f6e:	2200      	movs	r2, #0
 8015f70:	e002      	b.n	8015f78 <rcl_wait+0x1c8>
 8015f72:	3201      	adds	r2, #1
 8015f74:	42ba      	cmp	r2, r7
 8015f76:	d00a      	beq.n	8015f8e <rcl_wait+0x1de>
 8015f78:	6a19      	ldr	r1, [r3, #32]
 8015f7a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015f7e:	2900      	cmp	r1, #0
 8015f80:	d1f7      	bne.n	8015f72 <rcl_wait+0x1c2>
 8015f82:	69ae      	ldr	r6, [r5, #24]
 8015f84:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8015f88:	3201      	adds	r2, #1
 8015f8a:	42ba      	cmp	r2, r7
 8015f8c:	d1f4      	bne.n	8015f78 <rcl_wait+0x1c8>
 8015f8e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8015f90:	b17f      	cbz	r7, 8015fb2 <rcl_wait+0x202>
 8015f92:	2200      	movs	r2, #0
 8015f94:	e002      	b.n	8015f9c <rcl_wait+0x1ec>
 8015f96:	3201      	adds	r2, #1
 8015f98:	42ba      	cmp	r2, r7
 8015f9a:	d00a      	beq.n	8015fb2 <rcl_wait+0x202>
 8015f9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8015f9e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015fa2:	2900      	cmp	r1, #0
 8015fa4:	d1f7      	bne.n	8015f96 <rcl_wait+0x1e6>
 8015fa6:	6a2e      	ldr	r6, [r5, #32]
 8015fa8:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8015fac:	3201      	adds	r2, #1
 8015fae:	42ba      	cmp	r2, r7
 8015fb0:	d1f4      	bne.n	8015f9c <rcl_wait+0x1ec>
 8015fb2:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 8015fb4:	b17f      	cbz	r7, 8015fd6 <rcl_wait+0x226>
 8015fb6:	2200      	movs	r2, #0
 8015fb8:	e002      	b.n	8015fc0 <rcl_wait+0x210>
 8015fba:	3201      	adds	r2, #1
 8015fbc:	42ba      	cmp	r2, r7
 8015fbe:	d00a      	beq.n	8015fd6 <rcl_wait+0x226>
 8015fc0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8015fc2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015fc6:	2900      	cmp	r1, #0
 8015fc8:	d1f7      	bne.n	8015fba <rcl_wait+0x20a>
 8015fca:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8015fcc:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8015fd0:	3201      	adds	r2, #1
 8015fd2:	42ba      	cmp	r2, r7
 8015fd4:	d1f4      	bne.n	8015fc0 <rcl_wait+0x210>
 8015fd6:	f1b8 0f02 	cmp.w	r8, #2
 8015fda:	f47f af06 	bne.w	8015dea <rcl_wait+0x3a>
 8015fde:	f084 0301 	eor.w	r3, r4, #1
 8015fe2:	b2db      	uxtb	r3, r3
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	bf18      	it	ne
 8015fe8:	2002      	movne	r0, #2
 8015fea:	b00d      	add	sp, #52	; 0x34
 8015fec:	ecbd 8b02 	vpop	{d8}
 8015ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ff4:	2a00      	cmp	r2, #0
 8015ff6:	d03a      	beq.n	801606e <rcl_wait+0x2be>
 8015ff8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8015ffc:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8016000:	e705      	b.n	8015e0e <rcl_wait+0x5e>
 8016002:	f44f 7061 	mov.w	r0, #900	; 0x384
 8016006:	b00d      	add	sp, #52	; 0x34
 8016008:	ecbd 8b02 	vpop	{d8}
 801600c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016010:	2001      	movs	r0, #1
 8016012:	e6ea      	b.n	8015dea <rcl_wait+0x3a>
 8016014:	9b04      	ldr	r3, [sp, #16]
 8016016:	460c      	mov	r4, r1
 8016018:	2b01      	cmp	r3, #1
 801601a:	9b05      	ldr	r3, [sp, #20]
 801601c:	f173 0300 	sbcs.w	r3, r3, #0
 8016020:	bfa8      	it	ge
 8016022:	f044 0401 	orrge.w	r4, r4, #1
 8016026:	b914      	cbnz	r4, 801602e <rcl_wait+0x27e>
 8016028:	4623      	mov	r3, r4
 801602a:	e747      	b.n	8015ebc <rcl_wait+0x10c>
 801602c:	4611      	mov	r1, r2
 801602e:	2f00      	cmp	r7, #0
 8016030:	da02      	bge.n	8016038 <rcl_wait+0x288>
 8016032:	f04f 0800 	mov.w	r8, #0
 8016036:	4647      	mov	r7, r8
 8016038:	460c      	mov	r4, r1
 801603a:	4640      	mov	r0, r8
 801603c:	4639      	mov	r1, r7
 801603e:	a312      	add	r3, pc, #72	; (adr r3, 8016088 <rcl_wait+0x2d8>)
 8016040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016044:	f7ea f964 	bl	8000310 <__aeabi_ldivmod>
 8016048:	a30f      	add	r3, pc, #60	; (adr r3, 8016088 <rcl_wait+0x2d8>)
 801604a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801604e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016052:	4640      	mov	r0, r8
 8016054:	4639      	mov	r1, r7
 8016056:	f7ea f95b 	bl	8000310 <__aeabi_ldivmod>
 801605a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801605e:	ab08      	add	r3, sp, #32
 8016060:	e72c      	b.n	8015ebc <rcl_wait+0x10c>
 8016062:	200b      	movs	r0, #11
 8016064:	b00d      	add	sp, #52	; 0x34
 8016066:	ecbd 8b02 	vpop	{d8}
 801606a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801606e:	4611      	mov	r1, r2
 8016070:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8016074:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8016078:	e713      	b.n	8015ea2 <rcl_wait+0xf2>
 801607a:	bf00      	nop
 801607c:	f3af 8000 	nop.w
 8016080:	ffffffff 	.word	0xffffffff
 8016084:	7fffffff 	.word	0x7fffffff
 8016088:	3b9aca00 	.word	0x3b9aca00
 801608c:	00000000 	.word	0x00000000

08016090 <rcl_action_take_goal_response>:
 8016090:	2800      	cmp	r0, #0
 8016092:	d039      	beq.n	8016108 <rcl_action_take_goal_response+0x78>
 8016094:	b570      	push	{r4, r5, r6, lr}
 8016096:	4604      	mov	r4, r0
 8016098:	6800      	ldr	r0, [r0, #0]
 801609a:	b380      	cbz	r0, 80160fe <rcl_action_take_goal_response+0x6e>
 801609c:	460e      	mov	r6, r1
 801609e:	4615      	mov	r5, r2
 80160a0:	f7fd fd02 	bl	8013aa8 <rcl_client_is_valid>
 80160a4:	b330      	cbz	r0, 80160f4 <rcl_action_take_goal_response+0x64>
 80160a6:	6820      	ldr	r0, [r4, #0]
 80160a8:	3004      	adds	r0, #4
 80160aa:	f7fd fcfd 	bl	8013aa8 <rcl_client_is_valid>
 80160ae:	b308      	cbz	r0, 80160f4 <rcl_action_take_goal_response+0x64>
 80160b0:	6820      	ldr	r0, [r4, #0]
 80160b2:	3008      	adds	r0, #8
 80160b4:	f7fd fcf8 	bl	8013aa8 <rcl_client_is_valid>
 80160b8:	b1e0      	cbz	r0, 80160f4 <rcl_action_take_goal_response+0x64>
 80160ba:	6820      	ldr	r0, [r4, #0]
 80160bc:	300c      	adds	r0, #12
 80160be:	f7fe fdbf 	bl	8014c40 <rcl_subscription_is_valid>
 80160c2:	b1b8      	cbz	r0, 80160f4 <rcl_action_take_goal_response+0x64>
 80160c4:	6820      	ldr	r0, [r4, #0]
 80160c6:	3010      	adds	r0, #16
 80160c8:	f7fe fdba 	bl	8014c40 <rcl_subscription_is_valid>
 80160cc:	b190      	cbz	r0, 80160f4 <rcl_action_take_goal_response+0x64>
 80160ce:	b1cd      	cbz	r5, 8016104 <rcl_action_take_goal_response+0x74>
 80160d0:	b1c6      	cbz	r6, 8016104 <rcl_action_take_goal_response+0x74>
 80160d2:	462a      	mov	r2, r5
 80160d4:	4631      	mov	r1, r6
 80160d6:	6820      	ldr	r0, [r4, #0]
 80160d8:	f7fd fc7e 	bl	80139d8 <rcl_take_response>
 80160dc:	b148      	cbz	r0, 80160f2 <rcl_action_take_goal_response+0x62>
 80160de:	280a      	cmp	r0, #10
 80160e0:	d007      	beq.n	80160f2 <rcl_action_take_goal_response+0x62>
 80160e2:	f240 12f5 	movw	r2, #501	; 0x1f5
 80160e6:	f640 0337 	movw	r3, #2103	; 0x837
 80160ea:	4290      	cmp	r0, r2
 80160ec:	bf0c      	ite	eq
 80160ee:	4618      	moveq	r0, r3
 80160f0:	2001      	movne	r0, #1
 80160f2:	bd70      	pop	{r4, r5, r6, pc}
 80160f4:	f7f7 fa4c 	bl	800d590 <rcutils_reset_error>
 80160f8:	f640 0036 	movw	r0, #2102	; 0x836
 80160fc:	bd70      	pop	{r4, r5, r6, pc}
 80160fe:	f640 0036 	movw	r0, #2102	; 0x836
 8016102:	bd70      	pop	{r4, r5, r6, pc}
 8016104:	200b      	movs	r0, #11
 8016106:	bd70      	pop	{r4, r5, r6, pc}
 8016108:	f640 0036 	movw	r0, #2102	; 0x836
 801610c:	4770      	bx	lr
 801610e:	bf00      	nop

08016110 <rcl_action_send_result_request>:
 8016110:	b390      	cbz	r0, 8016178 <rcl_action_send_result_request+0x68>
 8016112:	b570      	push	{r4, r5, r6, lr}
 8016114:	4604      	mov	r4, r0
 8016116:	6800      	ldr	r0, [r0, #0]
 8016118:	b348      	cbz	r0, 801616e <rcl_action_send_result_request+0x5e>
 801611a:	460e      	mov	r6, r1
 801611c:	4615      	mov	r5, r2
 801611e:	f7fd fcc3 	bl	8013aa8 <rcl_client_is_valid>
 8016122:	b1f8      	cbz	r0, 8016164 <rcl_action_send_result_request+0x54>
 8016124:	6820      	ldr	r0, [r4, #0]
 8016126:	3004      	adds	r0, #4
 8016128:	f7fd fcbe 	bl	8013aa8 <rcl_client_is_valid>
 801612c:	b1d0      	cbz	r0, 8016164 <rcl_action_send_result_request+0x54>
 801612e:	6820      	ldr	r0, [r4, #0]
 8016130:	3008      	adds	r0, #8
 8016132:	f7fd fcb9 	bl	8013aa8 <rcl_client_is_valid>
 8016136:	b1a8      	cbz	r0, 8016164 <rcl_action_send_result_request+0x54>
 8016138:	6820      	ldr	r0, [r4, #0]
 801613a:	300c      	adds	r0, #12
 801613c:	f7fe fd80 	bl	8014c40 <rcl_subscription_is_valid>
 8016140:	b180      	cbz	r0, 8016164 <rcl_action_send_result_request+0x54>
 8016142:	6820      	ldr	r0, [r4, #0]
 8016144:	3010      	adds	r0, #16
 8016146:	f7fe fd7b 	bl	8014c40 <rcl_subscription_is_valid>
 801614a:	b158      	cbz	r0, 8016164 <rcl_action_send_result_request+0x54>
 801614c:	b195      	cbz	r5, 8016174 <rcl_action_send_result_request+0x64>
 801614e:	b18e      	cbz	r6, 8016174 <rcl_action_send_result_request+0x64>
 8016150:	6820      	ldr	r0, [r4, #0]
 8016152:	462a      	mov	r2, r5
 8016154:	4631      	mov	r1, r6
 8016156:	3008      	adds	r0, #8
 8016158:	f7fd fbec 	bl	8013934 <rcl_send_request>
 801615c:	3800      	subs	r0, #0
 801615e:	bf18      	it	ne
 8016160:	2001      	movne	r0, #1
 8016162:	bd70      	pop	{r4, r5, r6, pc}
 8016164:	f7f7 fa14 	bl	800d590 <rcutils_reset_error>
 8016168:	f640 0036 	movw	r0, #2102	; 0x836
 801616c:	bd70      	pop	{r4, r5, r6, pc}
 801616e:	f640 0036 	movw	r0, #2102	; 0x836
 8016172:	bd70      	pop	{r4, r5, r6, pc}
 8016174:	200b      	movs	r0, #11
 8016176:	bd70      	pop	{r4, r5, r6, pc}
 8016178:	f640 0036 	movw	r0, #2102	; 0x836
 801617c:	4770      	bx	lr
 801617e:	bf00      	nop

08016180 <rcl_action_take_result_response>:
 8016180:	2800      	cmp	r0, #0
 8016182:	d03a      	beq.n	80161fa <rcl_action_take_result_response+0x7a>
 8016184:	b570      	push	{r4, r5, r6, lr}
 8016186:	4604      	mov	r4, r0
 8016188:	6800      	ldr	r0, [r0, #0]
 801618a:	b388      	cbz	r0, 80161f0 <rcl_action_take_result_response+0x70>
 801618c:	460e      	mov	r6, r1
 801618e:	4615      	mov	r5, r2
 8016190:	f7fd fc8a 	bl	8013aa8 <rcl_client_is_valid>
 8016194:	b338      	cbz	r0, 80161e6 <rcl_action_take_result_response+0x66>
 8016196:	6820      	ldr	r0, [r4, #0]
 8016198:	3004      	adds	r0, #4
 801619a:	f7fd fc85 	bl	8013aa8 <rcl_client_is_valid>
 801619e:	b310      	cbz	r0, 80161e6 <rcl_action_take_result_response+0x66>
 80161a0:	6820      	ldr	r0, [r4, #0]
 80161a2:	3008      	adds	r0, #8
 80161a4:	f7fd fc80 	bl	8013aa8 <rcl_client_is_valid>
 80161a8:	b1e8      	cbz	r0, 80161e6 <rcl_action_take_result_response+0x66>
 80161aa:	6820      	ldr	r0, [r4, #0]
 80161ac:	300c      	adds	r0, #12
 80161ae:	f7fe fd47 	bl	8014c40 <rcl_subscription_is_valid>
 80161b2:	b1c0      	cbz	r0, 80161e6 <rcl_action_take_result_response+0x66>
 80161b4:	6820      	ldr	r0, [r4, #0]
 80161b6:	3010      	adds	r0, #16
 80161b8:	f7fe fd42 	bl	8014c40 <rcl_subscription_is_valid>
 80161bc:	b198      	cbz	r0, 80161e6 <rcl_action_take_result_response+0x66>
 80161be:	b1d5      	cbz	r5, 80161f6 <rcl_action_take_result_response+0x76>
 80161c0:	b1ce      	cbz	r6, 80161f6 <rcl_action_take_result_response+0x76>
 80161c2:	6820      	ldr	r0, [r4, #0]
 80161c4:	462a      	mov	r2, r5
 80161c6:	4631      	mov	r1, r6
 80161c8:	3008      	adds	r0, #8
 80161ca:	f7fd fc05 	bl	80139d8 <rcl_take_response>
 80161ce:	b148      	cbz	r0, 80161e4 <rcl_action_take_result_response+0x64>
 80161d0:	280a      	cmp	r0, #10
 80161d2:	d007      	beq.n	80161e4 <rcl_action_take_result_response+0x64>
 80161d4:	f240 12f5 	movw	r2, #501	; 0x1f5
 80161d8:	f640 0337 	movw	r3, #2103	; 0x837
 80161dc:	4290      	cmp	r0, r2
 80161de:	bf0c      	ite	eq
 80161e0:	4618      	moveq	r0, r3
 80161e2:	2001      	movne	r0, #1
 80161e4:	bd70      	pop	{r4, r5, r6, pc}
 80161e6:	f7f7 f9d3 	bl	800d590 <rcutils_reset_error>
 80161ea:	f640 0036 	movw	r0, #2102	; 0x836
 80161ee:	bd70      	pop	{r4, r5, r6, pc}
 80161f0:	f640 0036 	movw	r0, #2102	; 0x836
 80161f4:	bd70      	pop	{r4, r5, r6, pc}
 80161f6:	200b      	movs	r0, #11
 80161f8:	bd70      	pop	{r4, r5, r6, pc}
 80161fa:	f640 0036 	movw	r0, #2102	; 0x836
 80161fe:	4770      	bx	lr

08016200 <rcl_action_take_cancel_response>:
 8016200:	2800      	cmp	r0, #0
 8016202:	d03a      	beq.n	801627a <rcl_action_take_cancel_response+0x7a>
 8016204:	b570      	push	{r4, r5, r6, lr}
 8016206:	4604      	mov	r4, r0
 8016208:	6800      	ldr	r0, [r0, #0]
 801620a:	b388      	cbz	r0, 8016270 <rcl_action_take_cancel_response+0x70>
 801620c:	460e      	mov	r6, r1
 801620e:	4615      	mov	r5, r2
 8016210:	f7fd fc4a 	bl	8013aa8 <rcl_client_is_valid>
 8016214:	b338      	cbz	r0, 8016266 <rcl_action_take_cancel_response+0x66>
 8016216:	6820      	ldr	r0, [r4, #0]
 8016218:	3004      	adds	r0, #4
 801621a:	f7fd fc45 	bl	8013aa8 <rcl_client_is_valid>
 801621e:	b310      	cbz	r0, 8016266 <rcl_action_take_cancel_response+0x66>
 8016220:	6820      	ldr	r0, [r4, #0]
 8016222:	3008      	adds	r0, #8
 8016224:	f7fd fc40 	bl	8013aa8 <rcl_client_is_valid>
 8016228:	b1e8      	cbz	r0, 8016266 <rcl_action_take_cancel_response+0x66>
 801622a:	6820      	ldr	r0, [r4, #0]
 801622c:	300c      	adds	r0, #12
 801622e:	f7fe fd07 	bl	8014c40 <rcl_subscription_is_valid>
 8016232:	b1c0      	cbz	r0, 8016266 <rcl_action_take_cancel_response+0x66>
 8016234:	6820      	ldr	r0, [r4, #0]
 8016236:	3010      	adds	r0, #16
 8016238:	f7fe fd02 	bl	8014c40 <rcl_subscription_is_valid>
 801623c:	b198      	cbz	r0, 8016266 <rcl_action_take_cancel_response+0x66>
 801623e:	b1d5      	cbz	r5, 8016276 <rcl_action_take_cancel_response+0x76>
 8016240:	b1ce      	cbz	r6, 8016276 <rcl_action_take_cancel_response+0x76>
 8016242:	6820      	ldr	r0, [r4, #0]
 8016244:	462a      	mov	r2, r5
 8016246:	4631      	mov	r1, r6
 8016248:	3004      	adds	r0, #4
 801624a:	f7fd fbc5 	bl	80139d8 <rcl_take_response>
 801624e:	b148      	cbz	r0, 8016264 <rcl_action_take_cancel_response+0x64>
 8016250:	280a      	cmp	r0, #10
 8016252:	d007      	beq.n	8016264 <rcl_action_take_cancel_response+0x64>
 8016254:	f240 12f5 	movw	r2, #501	; 0x1f5
 8016258:	f640 0337 	movw	r3, #2103	; 0x837
 801625c:	4290      	cmp	r0, r2
 801625e:	bf0c      	ite	eq
 8016260:	4618      	moveq	r0, r3
 8016262:	2001      	movne	r0, #1
 8016264:	bd70      	pop	{r4, r5, r6, pc}
 8016266:	f7f7 f993 	bl	800d590 <rcutils_reset_error>
 801626a:	f640 0036 	movw	r0, #2102	; 0x836
 801626e:	bd70      	pop	{r4, r5, r6, pc}
 8016270:	f640 0036 	movw	r0, #2102	; 0x836
 8016274:	bd70      	pop	{r4, r5, r6, pc}
 8016276:	200b      	movs	r0, #11
 8016278:	bd70      	pop	{r4, r5, r6, pc}
 801627a:	f640 0036 	movw	r0, #2102	; 0x836
 801627e:	4770      	bx	lr

08016280 <rcl_action_take_feedback>:
 8016280:	2800      	cmp	r0, #0
 8016282:	d038      	beq.n	80162f6 <rcl_action_take_feedback+0x76>
 8016284:	b530      	push	{r4, r5, lr}
 8016286:	4604      	mov	r4, r0
 8016288:	6800      	ldr	r0, [r0, #0]
 801628a:	b08f      	sub	sp, #60	; 0x3c
 801628c:	b378      	cbz	r0, 80162ee <rcl_action_take_feedback+0x6e>
 801628e:	460d      	mov	r5, r1
 8016290:	f7fd fc0a 	bl	8013aa8 <rcl_client_is_valid>
 8016294:	b328      	cbz	r0, 80162e2 <rcl_action_take_feedback+0x62>
 8016296:	6820      	ldr	r0, [r4, #0]
 8016298:	3004      	adds	r0, #4
 801629a:	f7fd fc05 	bl	8013aa8 <rcl_client_is_valid>
 801629e:	b300      	cbz	r0, 80162e2 <rcl_action_take_feedback+0x62>
 80162a0:	6820      	ldr	r0, [r4, #0]
 80162a2:	3008      	adds	r0, #8
 80162a4:	f7fd fc00 	bl	8013aa8 <rcl_client_is_valid>
 80162a8:	b1d8      	cbz	r0, 80162e2 <rcl_action_take_feedback+0x62>
 80162aa:	6820      	ldr	r0, [r4, #0]
 80162ac:	300c      	adds	r0, #12
 80162ae:	f7fe fcc7 	bl	8014c40 <rcl_subscription_is_valid>
 80162b2:	b1b0      	cbz	r0, 80162e2 <rcl_action_take_feedback+0x62>
 80162b4:	6820      	ldr	r0, [r4, #0]
 80162b6:	3010      	adds	r0, #16
 80162b8:	f7fe fcc2 	bl	8014c40 <rcl_subscription_is_valid>
 80162bc:	b188      	cbz	r0, 80162e2 <rcl_action_take_feedback+0x62>
 80162be:	b1ed      	cbz	r5, 80162fc <rcl_action_take_feedback+0x7c>
 80162c0:	6820      	ldr	r0, [r4, #0]
 80162c2:	2300      	movs	r3, #0
 80162c4:	466a      	mov	r2, sp
 80162c6:	4629      	mov	r1, r5
 80162c8:	300c      	adds	r0, #12
 80162ca:	f7fe fc5d 	bl	8014b88 <rcl_take>
 80162ce:	b160      	cbz	r0, 80162ea <rcl_action_take_feedback+0x6a>
 80162d0:	f240 1391 	movw	r3, #401	; 0x191
 80162d4:	4298      	cmp	r0, r3
 80162d6:	d014      	beq.n	8016302 <rcl_action_take_feedback+0x82>
 80162d8:	280a      	cmp	r0, #10
 80162da:	bf18      	it	ne
 80162dc:	2001      	movne	r0, #1
 80162de:	b00f      	add	sp, #60	; 0x3c
 80162e0:	bd30      	pop	{r4, r5, pc}
 80162e2:	f7f7 f955 	bl	800d590 <rcutils_reset_error>
 80162e6:	f640 0036 	movw	r0, #2102	; 0x836
 80162ea:	b00f      	add	sp, #60	; 0x3c
 80162ec:	bd30      	pop	{r4, r5, pc}
 80162ee:	f640 0036 	movw	r0, #2102	; 0x836
 80162f2:	b00f      	add	sp, #60	; 0x3c
 80162f4:	bd30      	pop	{r4, r5, pc}
 80162f6:	f640 0036 	movw	r0, #2102	; 0x836
 80162fa:	4770      	bx	lr
 80162fc:	200b      	movs	r0, #11
 80162fe:	b00f      	add	sp, #60	; 0x3c
 8016300:	bd30      	pop	{r4, r5, pc}
 8016302:	f640 0037 	movw	r0, #2103	; 0x837
 8016306:	e7f0      	b.n	80162ea <rcl_action_take_feedback+0x6a>

08016308 <rcl_action_wait_set_add_action_client>:
 8016308:	2800      	cmp	r0, #0
 801630a:	d048      	beq.n	801639e <rcl_action_wait_set_add_action_client+0x96>
 801630c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801630e:	460c      	mov	r4, r1
 8016310:	2900      	cmp	r1, #0
 8016312:	d03c      	beq.n	801638e <rcl_action_wait_set_add_action_client+0x86>
 8016314:	4605      	mov	r5, r0
 8016316:	6808      	ldr	r0, [r1, #0]
 8016318:	2800      	cmp	r0, #0
 801631a:	d038      	beq.n	801638e <rcl_action_wait_set_add_action_client+0x86>
 801631c:	4617      	mov	r7, r2
 801631e:	461e      	mov	r6, r3
 8016320:	f7fd fbc2 	bl	8013aa8 <rcl_client_is_valid>
 8016324:	b3b0      	cbz	r0, 8016394 <rcl_action_wait_set_add_action_client+0x8c>
 8016326:	6820      	ldr	r0, [r4, #0]
 8016328:	3004      	adds	r0, #4
 801632a:	f7fd fbbd 	bl	8013aa8 <rcl_client_is_valid>
 801632e:	b388      	cbz	r0, 8016394 <rcl_action_wait_set_add_action_client+0x8c>
 8016330:	6820      	ldr	r0, [r4, #0]
 8016332:	3008      	adds	r0, #8
 8016334:	f7fd fbb8 	bl	8013aa8 <rcl_client_is_valid>
 8016338:	b360      	cbz	r0, 8016394 <rcl_action_wait_set_add_action_client+0x8c>
 801633a:	6820      	ldr	r0, [r4, #0]
 801633c:	300c      	adds	r0, #12
 801633e:	f7fe fc7f 	bl	8014c40 <rcl_subscription_is_valid>
 8016342:	b338      	cbz	r0, 8016394 <rcl_action_wait_set_add_action_client+0x8c>
 8016344:	6820      	ldr	r0, [r4, #0]
 8016346:	3010      	adds	r0, #16
 8016348:	f7fe fc7a 	bl	8014c40 <rcl_subscription_is_valid>
 801634c:	b310      	cbz	r0, 8016394 <rcl_action_wait_set_add_action_client+0x8c>
 801634e:	6821      	ldr	r1, [r4, #0]
 8016350:	4628      	mov	r0, r5
 8016352:	f501 72e2 	add.w	r2, r1, #452	; 0x1c4
 8016356:	f7ff fcd1 	bl	8015cfc <rcl_wait_set_add_client>
 801635a:	b9b8      	cbnz	r0, 801638c <rcl_action_wait_set_add_action_client+0x84>
 801635c:	6821      	ldr	r1, [r4, #0]
 801635e:	4628      	mov	r0, r5
 8016360:	f501 72e4 	add.w	r2, r1, #456	; 0x1c8
 8016364:	3104      	adds	r1, #4
 8016366:	f7ff fcc9 	bl	8015cfc <rcl_wait_set_add_client>
 801636a:	b978      	cbnz	r0, 801638c <rcl_action_wait_set_add_action_client+0x84>
 801636c:	6821      	ldr	r1, [r4, #0]
 801636e:	4628      	mov	r0, r5
 8016370:	f501 72e6 	add.w	r2, r1, #460	; 0x1cc
 8016374:	3108      	adds	r1, #8
 8016376:	f7ff fcc1 	bl	8015cfc <rcl_wait_set_add_client>
 801637a:	b938      	cbnz	r0, 801638c <rcl_action_wait_set_add_action_client+0x84>
 801637c:	6821      	ldr	r1, [r4, #0]
 801637e:	4628      	mov	r0, r5
 8016380:	f501 72e8 	add.w	r2, r1, #464	; 0x1d0
 8016384:	310c      	adds	r1, #12
 8016386:	f7ff f969 	bl	801565c <rcl_wait_set_add_subscription>
 801638a:	b158      	cbz	r0, 80163a4 <rcl_action_wait_set_add_action_client+0x9c>
 801638c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801638e:	f640 0036 	movw	r0, #2102	; 0x836
 8016392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016394:	f7f7 f8fc 	bl	800d590 <rcutils_reset_error>
 8016398:	f640 0036 	movw	r0, #2102	; 0x836
 801639c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801639e:	f44f 7061 	mov.w	r0, #900	; 0x384
 80163a2:	4770      	bx	lr
 80163a4:	6821      	ldr	r1, [r4, #0]
 80163a6:	4628      	mov	r0, r5
 80163a8:	f501 72ea 	add.w	r2, r1, #468	; 0x1d4
 80163ac:	3110      	adds	r1, #16
 80163ae:	f7ff f955 	bl	801565c <rcl_wait_set_add_subscription>
 80163b2:	2800      	cmp	r0, #0
 80163b4:	d1ea      	bne.n	801638c <rcl_action_wait_set_add_action_client+0x84>
 80163b6:	b11f      	cbz	r7, 80163c0 <rcl_action_wait_set_add_action_client+0xb8>
 80163b8:	6823      	ldr	r3, [r4, #0]
 80163ba:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 80163be:	603b      	str	r3, [r7, #0]
 80163c0:	2e00      	cmp	r6, #0
 80163c2:	d0e3      	beq.n	801638c <rcl_action_wait_set_add_action_client+0x84>
 80163c4:	6823      	ldr	r3, [r4, #0]
 80163c6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 80163ca:	6033      	str	r3, [r6, #0]
 80163cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80163ce:	bf00      	nop

080163d0 <rcl_action_client_wait_set_get_entities_ready>:
 80163d0:	2800      	cmp	r0, #0
 80163d2:	d050      	beq.n	8016476 <rcl_action_client_wait_set_get_entities_ready+0xa6>
 80163d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80163d8:	460c      	mov	r4, r1
 80163da:	2900      	cmp	r1, #0
 80163dc:	d03e      	beq.n	801645c <rcl_action_client_wait_set_get_entities_ready+0x8c>
 80163de:	4605      	mov	r5, r0
 80163e0:	6808      	ldr	r0, [r1, #0]
 80163e2:	2800      	cmp	r0, #0
 80163e4:	d03a      	beq.n	801645c <rcl_action_client_wait_set_get_entities_ready+0x8c>
 80163e6:	4616      	mov	r6, r2
 80163e8:	461f      	mov	r7, r3
 80163ea:	f7fd fb5d 	bl	8013aa8 <rcl_client_is_valid>
 80163ee:	2800      	cmp	r0, #0
 80163f0:	d038      	beq.n	8016464 <rcl_action_client_wait_set_get_entities_ready+0x94>
 80163f2:	6820      	ldr	r0, [r4, #0]
 80163f4:	3004      	adds	r0, #4
 80163f6:	f7fd fb57 	bl	8013aa8 <rcl_client_is_valid>
 80163fa:	2800      	cmp	r0, #0
 80163fc:	d032      	beq.n	8016464 <rcl_action_client_wait_set_get_entities_ready+0x94>
 80163fe:	6820      	ldr	r0, [r4, #0]
 8016400:	3008      	adds	r0, #8
 8016402:	f7fd fb51 	bl	8013aa8 <rcl_client_is_valid>
 8016406:	b368      	cbz	r0, 8016464 <rcl_action_client_wait_set_get_entities_ready+0x94>
 8016408:	6820      	ldr	r0, [r4, #0]
 801640a:	300c      	adds	r0, #12
 801640c:	f7fe fc18 	bl	8014c40 <rcl_subscription_is_valid>
 8016410:	b340      	cbz	r0, 8016464 <rcl_action_client_wait_set_get_entities_ready+0x94>
 8016412:	6820      	ldr	r0, [r4, #0]
 8016414:	3010      	adds	r0, #16
 8016416:	f7fe fc13 	bl	8014c40 <rcl_subscription_is_valid>
 801641a:	b318      	cbz	r0, 8016464 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801641c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8016420:	2a00      	cmp	r2, #0
 8016422:	bf18      	it	ne
 8016424:	2b00      	cmpne	r3, #0
 8016426:	9b08      	ldr	r3, [sp, #32]
 8016428:	bf0c      	ite	eq
 801642a:	2101      	moveq	r1, #1
 801642c:	2100      	movne	r1, #0
 801642e:	2b00      	cmp	r3, #0
 8016430:	bf08      	it	eq
 8016432:	f041 0101 	orreq.w	r1, r1, #1
 8016436:	2f00      	cmp	r7, #0
 8016438:	bf08      	it	eq
 801643a:	f041 0101 	orreq.w	r1, r1, #1
 801643e:	b9b9      	cbnz	r1, 8016470 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8016440:	b1b6      	cbz	r6, 8016470 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8016442:	6823      	ldr	r3, [r4, #0]
 8016444:	686c      	ldr	r4, [r5, #4]
 8016446:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	; 0x1d0
 801644a:	428a      	cmp	r2, r1
 801644c:	4610      	mov	r0, r2
 801644e:	bf38      	it	cc
 8016450:	4608      	movcc	r0, r1
 8016452:	4284      	cmp	r4, r0
 8016454:	d812      	bhi.n	801647c <rcl_action_client_wait_set_get_entities_ready+0xac>
 8016456:	2001      	movs	r0, #1
 8016458:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801645c:	f640 0036 	movw	r0, #2102	; 0x836
 8016460:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016464:	f7f7 f894 	bl	800d590 <rcutils_reset_error>
 8016468:	f640 0036 	movw	r0, #2102	; 0x836
 801646c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016470:	200b      	movs	r0, #11
 8016472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016476:	f44f 7061 	mov.w	r0, #900	; 0x384
 801647a:	4770      	bx	lr
 801647c:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	; 0x1c4
 8016480:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	; 0x1cc
 8016484:	45f0      	cmp	r8, lr
 8016486:	4640      	mov	r0, r8
 8016488:	69ec      	ldr	r4, [r5, #28]
 801648a:	bf38      	it	cc
 801648c:	4670      	movcc	r0, lr
 801648e:	4560      	cmp	r0, ip
 8016490:	bf38      	it	cc
 8016492:	4660      	movcc	r0, ip
 8016494:	4284      	cmp	r4, r0
 8016496:	d9de      	bls.n	8016456 <rcl_action_client_wait_set_get_entities_ready+0x86>
 8016498:	f8d5 9018 	ldr.w	r9, [r5, #24]
 801649c:	682d      	ldr	r5, [r5, #0]
 801649e:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 80164a2:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 80164a6:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80164aa:	1a18      	subs	r0, r3, r0
 80164ac:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 80164b0:	f103 0c0c 	add.w	ip, r3, #12
 80164b4:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 80164b8:	fab0 f080 	clz	r0, r0
 80164bc:	eba5 050c 	sub.w	r5, r5, ip
 80164c0:	0940      	lsrs	r0, r0, #5
 80164c2:	fab5 f585 	clz	r5, r5
 80164c6:	096d      	lsrs	r5, r5, #5
 80164c8:	7035      	strb	r5, [r6, #0]
 80164ca:	f103 0510 	add.w	r5, r3, #16
 80164ce:	1b64      	subs	r4, r4, r5
 80164d0:	9d08      	ldr	r5, [sp, #32]
 80164d2:	fab4 f484 	clz	r4, r4
 80164d6:	0964      	lsrs	r4, r4, #5
 80164d8:	703c      	strb	r4, [r7, #0]
 80164da:	1d1c      	adds	r4, r3, #4
 80164dc:	3308      	adds	r3, #8
 80164de:	7028      	strb	r0, [r5, #0]
 80164e0:	1b09      	subs	r1, r1, r4
 80164e2:	2000      	movs	r0, #0
 80164e4:	1ad3      	subs	r3, r2, r3
 80164e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80164e8:	fab1 f181 	clz	r1, r1
 80164ec:	fab3 f383 	clz	r3, r3
 80164f0:	0949      	lsrs	r1, r1, #5
 80164f2:	095b      	lsrs	r3, r3, #5
 80164f4:	7011      	strb	r1, [r2, #0]
 80164f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80164f8:	7013      	strb	r3, [r2, #0]
 80164fa:	e7b1      	b.n	8016460 <rcl_action_client_wait_set_get_entities_ready+0x90>

080164fc <rcl_action_take_goal_request>:
 80164fc:	2800      	cmp	r0, #0
 80164fe:	d039      	beq.n	8016574 <rcl_action_take_goal_request+0x78>
 8016500:	b570      	push	{r4, r5, r6, lr}
 8016502:	4604      	mov	r4, r0
 8016504:	6800      	ldr	r0, [r0, #0]
 8016506:	b380      	cbz	r0, 801656a <rcl_action_take_goal_request+0x6e>
 8016508:	460e      	mov	r6, r1
 801650a:	4615      	mov	r5, r2
 801650c:	f7fe fa94 	bl	8014a38 <rcl_service_is_valid>
 8016510:	b330      	cbz	r0, 8016560 <rcl_action_take_goal_request+0x64>
 8016512:	6820      	ldr	r0, [r4, #0]
 8016514:	3004      	adds	r0, #4
 8016516:	f7fe fa8f 	bl	8014a38 <rcl_service_is_valid>
 801651a:	b308      	cbz	r0, 8016560 <rcl_action_take_goal_request+0x64>
 801651c:	6820      	ldr	r0, [r4, #0]
 801651e:	3008      	adds	r0, #8
 8016520:	f7fe fa8a 	bl	8014a38 <rcl_service_is_valid>
 8016524:	b1e0      	cbz	r0, 8016560 <rcl_action_take_goal_request+0x64>
 8016526:	6820      	ldr	r0, [r4, #0]
 8016528:	300c      	adds	r0, #12
 801652a:	f7f6 f807 	bl	800c53c <rcl_publisher_is_valid>
 801652e:	b1b8      	cbz	r0, 8016560 <rcl_action_take_goal_request+0x64>
 8016530:	6820      	ldr	r0, [r4, #0]
 8016532:	3010      	adds	r0, #16
 8016534:	f7f6 f802 	bl	800c53c <rcl_publisher_is_valid>
 8016538:	b190      	cbz	r0, 8016560 <rcl_action_take_goal_request+0x64>
 801653a:	b1cd      	cbz	r5, 8016570 <rcl_action_take_goal_request+0x74>
 801653c:	b1c6      	cbz	r6, 8016570 <rcl_action_take_goal_request+0x74>
 801653e:	462a      	mov	r2, r5
 8016540:	4631      	mov	r1, r6
 8016542:	6820      	ldr	r0, [r4, #0]
 8016544:	f7fe f9f8 	bl	8014938 <rcl_take_request>
 8016548:	b148      	cbz	r0, 801655e <rcl_action_take_goal_request+0x62>
 801654a:	280a      	cmp	r0, #10
 801654c:	d007      	beq.n	801655e <rcl_action_take_goal_request+0x62>
 801654e:	f240 2259 	movw	r2, #601	; 0x259
 8016552:	f640 0399 	movw	r3, #2201	; 0x899
 8016556:	4290      	cmp	r0, r2
 8016558:	bf0c      	ite	eq
 801655a:	4618      	moveq	r0, r3
 801655c:	2001      	movne	r0, #1
 801655e:	bd70      	pop	{r4, r5, r6, pc}
 8016560:	f7f7 f816 	bl	800d590 <rcutils_reset_error>
 8016564:	f640 0098 	movw	r0, #2200	; 0x898
 8016568:	bd70      	pop	{r4, r5, r6, pc}
 801656a:	f640 0098 	movw	r0, #2200	; 0x898
 801656e:	bd70      	pop	{r4, r5, r6, pc}
 8016570:	200b      	movs	r0, #11
 8016572:	bd70      	pop	{r4, r5, r6, pc}
 8016574:	f640 0098 	movw	r0, #2200	; 0x898
 8016578:	4770      	bx	lr
 801657a:	bf00      	nop

0801657c <rcl_action_send_goal_response>:
 801657c:	b388      	cbz	r0, 80165e2 <rcl_action_send_goal_response+0x66>
 801657e:	b570      	push	{r4, r5, r6, lr}
 8016580:	4604      	mov	r4, r0
 8016582:	6800      	ldr	r0, [r0, #0]
 8016584:	b340      	cbz	r0, 80165d8 <rcl_action_send_goal_response+0x5c>
 8016586:	460e      	mov	r6, r1
 8016588:	4615      	mov	r5, r2
 801658a:	f7fe fa55 	bl	8014a38 <rcl_service_is_valid>
 801658e:	b1f0      	cbz	r0, 80165ce <rcl_action_send_goal_response+0x52>
 8016590:	6820      	ldr	r0, [r4, #0]
 8016592:	3004      	adds	r0, #4
 8016594:	f7fe fa50 	bl	8014a38 <rcl_service_is_valid>
 8016598:	b1c8      	cbz	r0, 80165ce <rcl_action_send_goal_response+0x52>
 801659a:	6820      	ldr	r0, [r4, #0]
 801659c:	3008      	adds	r0, #8
 801659e:	f7fe fa4b 	bl	8014a38 <rcl_service_is_valid>
 80165a2:	b1a0      	cbz	r0, 80165ce <rcl_action_send_goal_response+0x52>
 80165a4:	6820      	ldr	r0, [r4, #0]
 80165a6:	300c      	adds	r0, #12
 80165a8:	f7f5 ffc8 	bl	800c53c <rcl_publisher_is_valid>
 80165ac:	b178      	cbz	r0, 80165ce <rcl_action_send_goal_response+0x52>
 80165ae:	6820      	ldr	r0, [r4, #0]
 80165b0:	3010      	adds	r0, #16
 80165b2:	f7f5 ffc3 	bl	800c53c <rcl_publisher_is_valid>
 80165b6:	b150      	cbz	r0, 80165ce <rcl_action_send_goal_response+0x52>
 80165b8:	b18d      	cbz	r5, 80165de <rcl_action_send_goal_response+0x62>
 80165ba:	b186      	cbz	r6, 80165de <rcl_action_send_goal_response+0x62>
 80165bc:	462a      	mov	r2, r5
 80165be:	4631      	mov	r1, r6
 80165c0:	6820      	ldr	r0, [r4, #0]
 80165c2:	f7fe fa09 	bl	80149d8 <rcl_send_response>
 80165c6:	3800      	subs	r0, #0
 80165c8:	bf18      	it	ne
 80165ca:	2001      	movne	r0, #1
 80165cc:	bd70      	pop	{r4, r5, r6, pc}
 80165ce:	f7f6 ffdf 	bl	800d590 <rcutils_reset_error>
 80165d2:	f640 0098 	movw	r0, #2200	; 0x898
 80165d6:	bd70      	pop	{r4, r5, r6, pc}
 80165d8:	f640 0098 	movw	r0, #2200	; 0x898
 80165dc:	bd70      	pop	{r4, r5, r6, pc}
 80165de:	200b      	movs	r0, #11
 80165e0:	bd70      	pop	{r4, r5, r6, pc}
 80165e2:	f640 0098 	movw	r0, #2200	; 0x898
 80165e6:	4770      	bx	lr

080165e8 <rcl_action_take_result_request>:
 80165e8:	2800      	cmp	r0, #0
 80165ea:	d03a      	beq.n	8016662 <rcl_action_take_result_request+0x7a>
 80165ec:	b570      	push	{r4, r5, r6, lr}
 80165ee:	4604      	mov	r4, r0
 80165f0:	6800      	ldr	r0, [r0, #0]
 80165f2:	b388      	cbz	r0, 8016658 <rcl_action_take_result_request+0x70>
 80165f4:	460e      	mov	r6, r1
 80165f6:	4615      	mov	r5, r2
 80165f8:	f7fe fa1e 	bl	8014a38 <rcl_service_is_valid>
 80165fc:	b338      	cbz	r0, 801664e <rcl_action_take_result_request+0x66>
 80165fe:	6820      	ldr	r0, [r4, #0]
 8016600:	3004      	adds	r0, #4
 8016602:	f7fe fa19 	bl	8014a38 <rcl_service_is_valid>
 8016606:	b310      	cbz	r0, 801664e <rcl_action_take_result_request+0x66>
 8016608:	6820      	ldr	r0, [r4, #0]
 801660a:	3008      	adds	r0, #8
 801660c:	f7fe fa14 	bl	8014a38 <rcl_service_is_valid>
 8016610:	b1e8      	cbz	r0, 801664e <rcl_action_take_result_request+0x66>
 8016612:	6820      	ldr	r0, [r4, #0]
 8016614:	300c      	adds	r0, #12
 8016616:	f7f5 ff91 	bl	800c53c <rcl_publisher_is_valid>
 801661a:	b1c0      	cbz	r0, 801664e <rcl_action_take_result_request+0x66>
 801661c:	6820      	ldr	r0, [r4, #0]
 801661e:	3010      	adds	r0, #16
 8016620:	f7f5 ff8c 	bl	800c53c <rcl_publisher_is_valid>
 8016624:	b198      	cbz	r0, 801664e <rcl_action_take_result_request+0x66>
 8016626:	b1d5      	cbz	r5, 801665e <rcl_action_take_result_request+0x76>
 8016628:	b1ce      	cbz	r6, 801665e <rcl_action_take_result_request+0x76>
 801662a:	6820      	ldr	r0, [r4, #0]
 801662c:	462a      	mov	r2, r5
 801662e:	4631      	mov	r1, r6
 8016630:	3008      	adds	r0, #8
 8016632:	f7fe f981 	bl	8014938 <rcl_take_request>
 8016636:	b148      	cbz	r0, 801664c <rcl_action_take_result_request+0x64>
 8016638:	280a      	cmp	r0, #10
 801663a:	d007      	beq.n	801664c <rcl_action_take_result_request+0x64>
 801663c:	f240 2259 	movw	r2, #601	; 0x259
 8016640:	f640 0399 	movw	r3, #2201	; 0x899
 8016644:	4290      	cmp	r0, r2
 8016646:	bf0c      	ite	eq
 8016648:	4618      	moveq	r0, r3
 801664a:	2001      	movne	r0, #1
 801664c:	bd70      	pop	{r4, r5, r6, pc}
 801664e:	f7f6 ff9f 	bl	800d590 <rcutils_reset_error>
 8016652:	f640 0098 	movw	r0, #2200	; 0x898
 8016656:	bd70      	pop	{r4, r5, r6, pc}
 8016658:	f640 0098 	movw	r0, #2200	; 0x898
 801665c:	bd70      	pop	{r4, r5, r6, pc}
 801665e:	200b      	movs	r0, #11
 8016660:	bd70      	pop	{r4, r5, r6, pc}
 8016662:	f640 0098 	movw	r0, #2200	; 0x898
 8016666:	4770      	bx	lr

08016668 <rcl_action_take_cancel_request>:
 8016668:	2800      	cmp	r0, #0
 801666a:	d03a      	beq.n	80166e2 <rcl_action_take_cancel_request+0x7a>
 801666c:	b570      	push	{r4, r5, r6, lr}
 801666e:	4604      	mov	r4, r0
 8016670:	6800      	ldr	r0, [r0, #0]
 8016672:	b388      	cbz	r0, 80166d8 <rcl_action_take_cancel_request+0x70>
 8016674:	460e      	mov	r6, r1
 8016676:	4615      	mov	r5, r2
 8016678:	f7fe f9de 	bl	8014a38 <rcl_service_is_valid>
 801667c:	b338      	cbz	r0, 80166ce <rcl_action_take_cancel_request+0x66>
 801667e:	6820      	ldr	r0, [r4, #0]
 8016680:	3004      	adds	r0, #4
 8016682:	f7fe f9d9 	bl	8014a38 <rcl_service_is_valid>
 8016686:	b310      	cbz	r0, 80166ce <rcl_action_take_cancel_request+0x66>
 8016688:	6820      	ldr	r0, [r4, #0]
 801668a:	3008      	adds	r0, #8
 801668c:	f7fe f9d4 	bl	8014a38 <rcl_service_is_valid>
 8016690:	b1e8      	cbz	r0, 80166ce <rcl_action_take_cancel_request+0x66>
 8016692:	6820      	ldr	r0, [r4, #0]
 8016694:	300c      	adds	r0, #12
 8016696:	f7f5 ff51 	bl	800c53c <rcl_publisher_is_valid>
 801669a:	b1c0      	cbz	r0, 80166ce <rcl_action_take_cancel_request+0x66>
 801669c:	6820      	ldr	r0, [r4, #0]
 801669e:	3010      	adds	r0, #16
 80166a0:	f7f5 ff4c 	bl	800c53c <rcl_publisher_is_valid>
 80166a4:	b198      	cbz	r0, 80166ce <rcl_action_take_cancel_request+0x66>
 80166a6:	b1d5      	cbz	r5, 80166de <rcl_action_take_cancel_request+0x76>
 80166a8:	b1ce      	cbz	r6, 80166de <rcl_action_take_cancel_request+0x76>
 80166aa:	6820      	ldr	r0, [r4, #0]
 80166ac:	462a      	mov	r2, r5
 80166ae:	4631      	mov	r1, r6
 80166b0:	3004      	adds	r0, #4
 80166b2:	f7fe f941 	bl	8014938 <rcl_take_request>
 80166b6:	b148      	cbz	r0, 80166cc <rcl_action_take_cancel_request+0x64>
 80166b8:	280a      	cmp	r0, #10
 80166ba:	d007      	beq.n	80166cc <rcl_action_take_cancel_request+0x64>
 80166bc:	f240 2259 	movw	r2, #601	; 0x259
 80166c0:	f640 0399 	movw	r3, #2201	; 0x899
 80166c4:	4290      	cmp	r0, r2
 80166c6:	bf0c      	ite	eq
 80166c8:	4618      	moveq	r0, r3
 80166ca:	2001      	movne	r0, #1
 80166cc:	bd70      	pop	{r4, r5, r6, pc}
 80166ce:	f7f6 ff5f 	bl	800d590 <rcutils_reset_error>
 80166d2:	f640 0098 	movw	r0, #2200	; 0x898
 80166d6:	bd70      	pop	{r4, r5, r6, pc}
 80166d8:	f640 0098 	movw	r0, #2200	; 0x898
 80166dc:	bd70      	pop	{r4, r5, r6, pc}
 80166de:	200b      	movs	r0, #11
 80166e0:	bd70      	pop	{r4, r5, r6, pc}
 80166e2:	f640 0098 	movw	r0, #2200	; 0x898
 80166e6:	4770      	bx	lr

080166e8 <rcl_action_send_cancel_response>:
 80166e8:	b390      	cbz	r0, 8016750 <rcl_action_send_cancel_response+0x68>
 80166ea:	b570      	push	{r4, r5, r6, lr}
 80166ec:	4604      	mov	r4, r0
 80166ee:	6800      	ldr	r0, [r0, #0]
 80166f0:	b348      	cbz	r0, 8016746 <rcl_action_send_cancel_response+0x5e>
 80166f2:	460e      	mov	r6, r1
 80166f4:	4615      	mov	r5, r2
 80166f6:	f7fe f99f 	bl	8014a38 <rcl_service_is_valid>
 80166fa:	b1f8      	cbz	r0, 801673c <rcl_action_send_cancel_response+0x54>
 80166fc:	6820      	ldr	r0, [r4, #0]
 80166fe:	3004      	adds	r0, #4
 8016700:	f7fe f99a 	bl	8014a38 <rcl_service_is_valid>
 8016704:	b1d0      	cbz	r0, 801673c <rcl_action_send_cancel_response+0x54>
 8016706:	6820      	ldr	r0, [r4, #0]
 8016708:	3008      	adds	r0, #8
 801670a:	f7fe f995 	bl	8014a38 <rcl_service_is_valid>
 801670e:	b1a8      	cbz	r0, 801673c <rcl_action_send_cancel_response+0x54>
 8016710:	6820      	ldr	r0, [r4, #0]
 8016712:	300c      	adds	r0, #12
 8016714:	f7f5 ff12 	bl	800c53c <rcl_publisher_is_valid>
 8016718:	b180      	cbz	r0, 801673c <rcl_action_send_cancel_response+0x54>
 801671a:	6820      	ldr	r0, [r4, #0]
 801671c:	3010      	adds	r0, #16
 801671e:	f7f5 ff0d 	bl	800c53c <rcl_publisher_is_valid>
 8016722:	b158      	cbz	r0, 801673c <rcl_action_send_cancel_response+0x54>
 8016724:	b195      	cbz	r5, 801674c <rcl_action_send_cancel_response+0x64>
 8016726:	b18e      	cbz	r6, 801674c <rcl_action_send_cancel_response+0x64>
 8016728:	6820      	ldr	r0, [r4, #0]
 801672a:	462a      	mov	r2, r5
 801672c:	4631      	mov	r1, r6
 801672e:	3004      	adds	r0, #4
 8016730:	f7fe f952 	bl	80149d8 <rcl_send_response>
 8016734:	3800      	subs	r0, #0
 8016736:	bf18      	it	ne
 8016738:	2001      	movne	r0, #1
 801673a:	bd70      	pop	{r4, r5, r6, pc}
 801673c:	f7f6 ff28 	bl	800d590 <rcutils_reset_error>
 8016740:	f640 0098 	movw	r0, #2200	; 0x898
 8016744:	bd70      	pop	{r4, r5, r6, pc}
 8016746:	f640 0098 	movw	r0, #2200	; 0x898
 801674a:	bd70      	pop	{r4, r5, r6, pc}
 801674c:	200b      	movs	r0, #11
 801674e:	bd70      	pop	{r4, r5, r6, pc}
 8016750:	f640 0098 	movw	r0, #2200	; 0x898
 8016754:	4770      	bx	lr
 8016756:	bf00      	nop

08016758 <rcl_action_wait_set_add_action_server>:
 8016758:	2800      	cmp	r0, #0
 801675a:	d04d      	beq.n	80167f8 <rcl_action_wait_set_add_action_server+0xa0>
 801675c:	b570      	push	{r4, r5, r6, lr}
 801675e:	460c      	mov	r4, r1
 8016760:	b159      	cbz	r1, 801677a <rcl_action_wait_set_add_action_server+0x22>
 8016762:	4605      	mov	r5, r0
 8016764:	6808      	ldr	r0, [r1, #0]
 8016766:	b140      	cbz	r0, 801677a <rcl_action_wait_set_add_action_server+0x22>
 8016768:	4616      	mov	r6, r2
 801676a:	f7fe f965 	bl	8014a38 <rcl_service_is_valid>
 801676e:	b120      	cbz	r0, 801677a <rcl_action_wait_set_add_action_server+0x22>
 8016770:	6820      	ldr	r0, [r4, #0]
 8016772:	3004      	adds	r0, #4
 8016774:	f7fe f960 	bl	8014a38 <rcl_service_is_valid>
 8016778:	b910      	cbnz	r0, 8016780 <rcl_action_wait_set_add_action_server+0x28>
 801677a:	f640 0098 	movw	r0, #2200	; 0x898
 801677e:	bd70      	pop	{r4, r5, r6, pc}
 8016780:	6820      	ldr	r0, [r4, #0]
 8016782:	3008      	adds	r0, #8
 8016784:	f7fe f958 	bl	8014a38 <rcl_service_is_valid>
 8016788:	2800      	cmp	r0, #0
 801678a:	d0f6      	beq.n	801677a <rcl_action_wait_set_add_action_server+0x22>
 801678c:	6820      	ldr	r0, [r4, #0]
 801678e:	300c      	adds	r0, #12
 8016790:	f7f5 feec 	bl	800c56c <rcl_publisher_is_valid_except_context>
 8016794:	2800      	cmp	r0, #0
 8016796:	d0f0      	beq.n	801677a <rcl_action_wait_set_add_action_server+0x22>
 8016798:	6820      	ldr	r0, [r4, #0]
 801679a:	3010      	adds	r0, #16
 801679c:	f7f5 fee6 	bl	800c56c <rcl_publisher_is_valid_except_context>
 80167a0:	2800      	cmp	r0, #0
 80167a2:	d0ea      	beq.n	801677a <rcl_action_wait_set_add_action_server+0x22>
 80167a4:	6821      	ldr	r1, [r4, #0]
 80167a6:	4628      	mov	r0, r5
 80167a8:	f501 72ee 	add.w	r2, r1, #476	; 0x1dc
 80167ac:	f7ff fad2 	bl	8015d54 <rcl_wait_set_add_service>
 80167b0:	2800      	cmp	r0, #0
 80167b2:	d1e4      	bne.n	801677e <rcl_action_wait_set_add_action_server+0x26>
 80167b4:	6821      	ldr	r1, [r4, #0]
 80167b6:	4628      	mov	r0, r5
 80167b8:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
 80167bc:	3104      	adds	r1, #4
 80167be:	f7ff fac9 	bl	8015d54 <rcl_wait_set_add_service>
 80167c2:	2800      	cmp	r0, #0
 80167c4:	d1db      	bne.n	801677e <rcl_action_wait_set_add_action_server+0x26>
 80167c6:	6821      	ldr	r1, [r4, #0]
 80167c8:	4628      	mov	r0, r5
 80167ca:	f501 72f2 	add.w	r2, r1, #484	; 0x1e4
 80167ce:	3108      	adds	r1, #8
 80167d0:	f7ff fac0 	bl	8015d54 <rcl_wait_set_add_service>
 80167d4:	2800      	cmp	r0, #0
 80167d6:	d1d2      	bne.n	801677e <rcl_action_wait_set_add_action_server+0x26>
 80167d8:	6821      	ldr	r1, [r4, #0]
 80167da:	4628      	mov	r0, r5
 80167dc:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
 80167e0:	3114      	adds	r1, #20
 80167e2:	f7ff fa5b 	bl	8015c9c <rcl_wait_set_add_timer>
 80167e6:	2800      	cmp	r0, #0
 80167e8:	d1c9      	bne.n	801677e <rcl_action_wait_set_add_action_server+0x26>
 80167ea:	2e00      	cmp	r6, #0
 80167ec:	d0c7      	beq.n	801677e <rcl_action_wait_set_add_action_server+0x26>
 80167ee:	6823      	ldr	r3, [r4, #0]
 80167f0:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 80167f4:	6033      	str	r3, [r6, #0]
 80167f6:	bd70      	pop	{r4, r5, r6, pc}
 80167f8:	f44f 7061 	mov.w	r0, #900	; 0x384
 80167fc:	4770      	bx	lr
 80167fe:	bf00      	nop

08016800 <rcl_action_server_wait_set_get_entities_ready>:
 8016800:	2800      	cmp	r0, #0
 8016802:	d067      	beq.n	80168d4 <rcl_action_server_wait_set_get_entities_ready+0xd4>
 8016804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016808:	460c      	mov	r4, r1
 801680a:	b161      	cbz	r1, 8016826 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801680c:	4605      	mov	r5, r0
 801680e:	6808      	ldr	r0, [r1, #0]
 8016810:	b148      	cbz	r0, 8016826 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8016812:	4616      	mov	r6, r2
 8016814:	4698      	mov	r8, r3
 8016816:	f7fe f90f 	bl	8014a38 <rcl_service_is_valid>
 801681a:	b120      	cbz	r0, 8016826 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801681c:	6820      	ldr	r0, [r4, #0]
 801681e:	3004      	adds	r0, #4
 8016820:	f7fe f90a 	bl	8014a38 <rcl_service_is_valid>
 8016824:	b918      	cbnz	r0, 801682e <rcl_action_server_wait_set_get_entities_ready+0x2e>
 8016826:	f640 0098 	movw	r0, #2200	; 0x898
 801682a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801682e:	6820      	ldr	r0, [r4, #0]
 8016830:	3008      	adds	r0, #8
 8016832:	f7fe f901 	bl	8014a38 <rcl_service_is_valid>
 8016836:	2800      	cmp	r0, #0
 8016838:	d0f5      	beq.n	8016826 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801683a:	6820      	ldr	r0, [r4, #0]
 801683c:	300c      	adds	r0, #12
 801683e:	f7f5 fe95 	bl	800c56c <rcl_publisher_is_valid_except_context>
 8016842:	2800      	cmp	r0, #0
 8016844:	d0ef      	beq.n	8016826 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8016846:	6820      	ldr	r0, [r4, #0]
 8016848:	3010      	adds	r0, #16
 801684a:	f7f5 fe8f 	bl	800c56c <rcl_publisher_is_valid_except_context>
 801684e:	2800      	cmp	r0, #0
 8016850:	d0e9      	beq.n	8016826 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8016852:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016856:	2a00      	cmp	r2, #0
 8016858:	bf18      	it	ne
 801685a:	2b00      	cmpne	r3, #0
 801685c:	bf0c      	ite	eq
 801685e:	2101      	moveq	r1, #1
 8016860:	2100      	movne	r1, #0
 8016862:	f1b8 0f00 	cmp.w	r8, #0
 8016866:	bf08      	it	eq
 8016868:	f041 0101 	orreq.w	r1, r1, #1
 801686c:	bba9      	cbnz	r1, 80168da <rcl_action_server_wait_set_get_entities_ready+0xda>
 801686e:	b3a6      	cbz	r6, 80168da <rcl_action_server_wait_set_get_entities_ready+0xda>
 8016870:	6821      	ldr	r1, [r4, #0]
 8016872:	2000      	movs	r0, #0
 8016874:	692c      	ldr	r4, [r5, #16]
 8016876:	f8d1 21e8 	ldr.w	r2, [r1, #488]	; 0x1e8
 801687a:	6a2f      	ldr	r7, [r5, #32]
 801687c:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016880:	f8d1 41dc 	ldr.w	r4, [r1, #476]	; 0x1dc
 8016884:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
 8016888:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 801688c:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 8016890:	1a64      	subs	r4, r4, r1
 8016892:	f8d1 31e4 	ldr.w	r3, [r1, #484]	; 0x1e4
 8016896:	fab4 f484 	clz	r4, r4
 801689a:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801689e:	0964      	lsrs	r4, r4, #5
 80168a0:	7034      	strb	r4, [r6, #0]
 80168a2:	1d0c      	adds	r4, r1, #4
 80168a4:	1b2c      	subs	r4, r5, r4
 80168a6:	fab4 f484 	clz	r4, r4
 80168aa:	0964      	lsrs	r4, r4, #5
 80168ac:	f888 4000 	strb.w	r4, [r8]
 80168b0:	f101 0408 	add.w	r4, r1, #8
 80168b4:	1b1b      	subs	r3, r3, r4
 80168b6:	9c06      	ldr	r4, [sp, #24]
 80168b8:	fab3 f383 	clz	r3, r3
 80168bc:	095b      	lsrs	r3, r3, #5
 80168be:	7023      	strb	r3, [r4, #0]
 80168c0:	f101 0314 	add.w	r3, r1, #20
 80168c4:	1ad3      	subs	r3, r2, r3
 80168c6:	9a07      	ldr	r2, [sp, #28]
 80168c8:	fab3 f383 	clz	r3, r3
 80168cc:	095b      	lsrs	r3, r3, #5
 80168ce:	7013      	strb	r3, [r2, #0]
 80168d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168d4:	f44f 7061 	mov.w	r0, #900	; 0x384
 80168d8:	4770      	bx	lr
 80168da:	200b      	movs	r0, #11
 80168dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080168e0 <_execute_event_handler>:
 80168e0:	2002      	movs	r0, #2
 80168e2:	4770      	bx	lr

080168e4 <_cancel_goal_event_handler>:
 80168e4:	2003      	movs	r0, #3
 80168e6:	4770      	bx	lr

080168e8 <_succeed_event_handler>:
 80168e8:	2004      	movs	r0, #4
 80168ea:	4770      	bx	lr

080168ec <_abort_event_handler>:
 80168ec:	2006      	movs	r0, #6
 80168ee:	4770      	bx	lr

080168f0 <_canceled_event_handler>:
 80168f0:	2005      	movs	r0, #5
 80168f2:	4770      	bx	lr

080168f4 <rcl_action_transition_goal_state>:
 80168f4:	b2c2      	uxtb	r2, r0
 80168f6:	2a06      	cmp	r2, #6
 80168f8:	d810      	bhi.n	801691c <rcl_action_transition_goal_state+0x28>
 80168fa:	2904      	cmp	r1, #4
 80168fc:	d80e      	bhi.n	801691c <rcl_action_transition_goal_state+0x28>
 80168fe:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8016902:	b410      	push	{r4}
 8016904:	1853      	adds	r3, r2, r1
 8016906:	4c06      	ldr	r4, [pc, #24]	; (8016920 <rcl_action_transition_goal_state+0x2c>)
 8016908:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801690c:	b113      	cbz	r3, 8016914 <rcl_action_transition_goal_state+0x20>
 801690e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016912:	4718      	bx	r3
 8016914:	2000      	movs	r0, #0
 8016916:	f85d 4b04 	ldr.w	r4, [sp], #4
 801691a:	4770      	bx	lr
 801691c:	2000      	movs	r0, #0
 801691e:	4770      	bx	lr
 8016920:	0801db70 	.word	0x0801db70

08016924 <rcl_action_get_zero_initialized_cancel_response>:
 8016924:	b510      	push	{r4, lr}
 8016926:	4c07      	ldr	r4, [pc, #28]	; (8016944 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8016928:	4686      	mov	lr, r0
 801692a:	4684      	mov	ip, r0
 801692c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801692e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016932:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016934:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016938:	6823      	ldr	r3, [r4, #0]
 801693a:	4670      	mov	r0, lr
 801693c:	f8cc 3000 	str.w	r3, [ip]
 8016940:	bd10      	pop	{r4, pc}
 8016942:	bf00      	nop
 8016944:	0801dbfc 	.word	0x0801dbfc

08016948 <rclc_action_send_result_request>:
 8016948:	b1d0      	cbz	r0, 8016980 <rclc_action_send_result_request+0x38>
 801694a:	4684      	mov	ip, r0
 801694c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8016950:	b500      	push	{lr}
 8016952:	b087      	sub	sp, #28
 8016954:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8016958:	f8dc 2011 	ldr.w	r2, [ip, #17]
 801695c:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8016960:	f10d 0e08 	add.w	lr, sp, #8
 8016964:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016968:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801696c:	f10c 0240 	add.w	r2, ip, #64	; 0x40
 8016970:	a902      	add	r1, sp, #8
 8016972:	3010      	adds	r0, #16
 8016974:	f7ff fbcc 	bl	8016110 <rcl_action_send_result_request>
 8016978:	b920      	cbnz	r0, 8016984 <rclc_action_send_result_request+0x3c>
 801697a:	b007      	add	sp, #28
 801697c:	f85d fb04 	ldr.w	pc, [sp], #4
 8016980:	200b      	movs	r0, #11
 8016982:	4770      	bx	lr
 8016984:	9001      	str	r0, [sp, #4]
 8016986:	f7f6 fe03 	bl	800d590 <rcutils_reset_error>
 801698a:	9801      	ldr	r0, [sp, #4]
 801698c:	b007      	add	sp, #28
 801698e:	f85d fb04 	ldr.w	pc, [sp], #4
 8016992:	bf00      	nop

08016994 <rclc_action_take_goal_handle>:
 8016994:	b160      	cbz	r0, 80169b0 <rclc_action_take_goal_handle+0x1c>
 8016996:	6883      	ldr	r3, [r0, #8]
 8016998:	b143      	cbz	r3, 80169ac <rclc_action_take_goal_handle+0x18>
 801699a:	6819      	ldr	r1, [r3, #0]
 801699c:	2200      	movs	r2, #0
 801699e:	6081      	str	r1, [r0, #8]
 80169a0:	721a      	strb	r2, [r3, #8]
 80169a2:	68c1      	ldr	r1, [r0, #12]
 80169a4:	621a      	str	r2, [r3, #32]
 80169a6:	849a      	strh	r2, [r3, #36]	; 0x24
 80169a8:	6019      	str	r1, [r3, #0]
 80169aa:	60c3      	str	r3, [r0, #12]
 80169ac:	4618      	mov	r0, r3
 80169ae:	4770      	bx	lr
 80169b0:	4603      	mov	r3, r0
 80169b2:	e7fb      	b.n	80169ac <rclc_action_take_goal_handle+0x18>

080169b4 <rclc_action_remove_used_goal_handle>:
 80169b4:	b180      	cbz	r0, 80169d8 <rclc_action_remove_used_goal_handle+0x24>
 80169b6:	b179      	cbz	r1, 80169d8 <rclc_action_remove_used_goal_handle+0x24>
 80169b8:	68c3      	ldr	r3, [r0, #12]
 80169ba:	4299      	cmp	r1, r3
 80169bc:	d00d      	beq.n	80169da <rclc_action_remove_used_goal_handle+0x26>
 80169be:	b12b      	cbz	r3, 80169cc <rclc_action_remove_used_goal_handle+0x18>
 80169c0:	681a      	ldr	r2, [r3, #0]
 80169c2:	4291      	cmp	r1, r2
 80169c4:	d003      	beq.n	80169ce <rclc_action_remove_used_goal_handle+0x1a>
 80169c6:	4613      	mov	r3, r2
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	d1f9      	bne.n	80169c0 <rclc_action_remove_used_goal_handle+0xc>
 80169cc:	4770      	bx	lr
 80169ce:	680a      	ldr	r2, [r1, #0]
 80169d0:	601a      	str	r2, [r3, #0]
 80169d2:	6883      	ldr	r3, [r0, #8]
 80169d4:	600b      	str	r3, [r1, #0]
 80169d6:	6081      	str	r1, [r0, #8]
 80169d8:	4770      	bx	lr
 80169da:	680b      	ldr	r3, [r1, #0]
 80169dc:	60c3      	str	r3, [r0, #12]
 80169de:	e7f8      	b.n	80169d2 <rclc_action_remove_used_goal_handle+0x1e>

080169e0 <rclc_action_find_goal_handle_by_uuid>:
 80169e0:	b538      	push	{r3, r4, r5, lr}
 80169e2:	b181      	cbz	r1, 8016a06 <rclc_action_find_goal_handle_by_uuid+0x26>
 80169e4:	b178      	cbz	r0, 8016a06 <rclc_action_find_goal_handle_by_uuid+0x26>
 80169e6:	68c4      	ldr	r4, [r0, #12]
 80169e8:	460d      	mov	r5, r1
 80169ea:	b914      	cbnz	r4, 80169f2 <rclc_action_find_goal_handle_by_uuid+0x12>
 80169ec:	e009      	b.n	8016a02 <rclc_action_find_goal_handle_by_uuid+0x22>
 80169ee:	6824      	ldr	r4, [r4, #0]
 80169f0:	b13c      	cbz	r4, 8016a02 <rclc_action_find_goal_handle_by_uuid+0x22>
 80169f2:	f104 0009 	add.w	r0, r4, #9
 80169f6:	2210      	movs	r2, #16
 80169f8:	4629      	mov	r1, r5
 80169fa:	f004 ff19 	bl	801b830 <memcmp>
 80169fe:	2800      	cmp	r0, #0
 8016a00:	d1f5      	bne.n	80169ee <rclc_action_find_goal_handle_by_uuid+0xe>
 8016a02:	4620      	mov	r0, r4
 8016a04:	bd38      	pop	{r3, r4, r5, pc}
 8016a06:	2400      	movs	r4, #0
 8016a08:	4620      	mov	r0, r4
 8016a0a:	bd38      	pop	{r3, r4, r5, pc}

08016a0c <rclc_action_find_first_handle_by_status>:
 8016a0c:	b140      	cbz	r0, 8016a20 <rclc_action_find_first_handle_by_status+0x14>
 8016a0e:	68c0      	ldr	r0, [r0, #12]
 8016a10:	b910      	cbnz	r0, 8016a18 <rclc_action_find_first_handle_by_status+0xc>
 8016a12:	e005      	b.n	8016a20 <rclc_action_find_first_handle_by_status+0x14>
 8016a14:	6800      	ldr	r0, [r0, #0]
 8016a16:	b118      	cbz	r0, 8016a20 <rclc_action_find_first_handle_by_status+0x14>
 8016a18:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8016a1c:	428b      	cmp	r3, r1
 8016a1e:	d1f9      	bne.n	8016a14 <rclc_action_find_first_handle_by_status+0x8>
 8016a20:	4770      	bx	lr
 8016a22:	bf00      	nop

08016a24 <rclc_action_find_first_terminated_handle>:
 8016a24:	b140      	cbz	r0, 8016a38 <rclc_action_find_first_terminated_handle+0x14>
 8016a26:	68c0      	ldr	r0, [r0, #12]
 8016a28:	b910      	cbnz	r0, 8016a30 <rclc_action_find_first_terminated_handle+0xc>
 8016a2a:	e005      	b.n	8016a38 <rclc_action_find_first_terminated_handle+0x14>
 8016a2c:	6800      	ldr	r0, [r0, #0]
 8016a2e:	b118      	cbz	r0, 8016a38 <rclc_action_find_first_terminated_handle+0x14>
 8016a30:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8016a34:	2b03      	cmp	r3, #3
 8016a36:	ddf9      	ble.n	8016a2c <rclc_action_find_first_terminated_handle+0x8>
 8016a38:	4770      	bx	lr
 8016a3a:	bf00      	nop

08016a3c <rclc_action_find_handle_by_goal_request_sequence_number>:
 8016a3c:	b170      	cbz	r0, 8016a5c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8016a3e:	68c0      	ldr	r0, [r0, #12]
 8016a40:	b160      	cbz	r0, 8016a5c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8016a42:	b410      	push	{r4}
 8016a44:	e001      	b.n	8016a4a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8016a46:	6800      	ldr	r0, [r0, #0]
 8016a48:	b128      	cbz	r0, 8016a56 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8016a4a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	; 0x28
 8016a4e:	4299      	cmp	r1, r3
 8016a50:	bf08      	it	eq
 8016a52:	4294      	cmpeq	r4, r2
 8016a54:	d1f7      	bne.n	8016a46 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8016a56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016a5a:	4770      	bx	lr
 8016a5c:	4770      	bx	lr
 8016a5e:	bf00      	nop

08016a60 <rclc_action_find_handle_by_result_request_sequence_number>:
 8016a60:	b170      	cbz	r0, 8016a80 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8016a62:	68c0      	ldr	r0, [r0, #12]
 8016a64:	b160      	cbz	r0, 8016a80 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8016a66:	b410      	push	{r4}
 8016a68:	e001      	b.n	8016a6e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8016a6a:	6800      	ldr	r0, [r0, #0]
 8016a6c:	b128      	cbz	r0, 8016a7a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8016a6e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	; 0x40
 8016a72:	4299      	cmp	r1, r3
 8016a74:	bf08      	it	eq
 8016a76:	4294      	cmpeq	r4, r2
 8016a78:	d1f7      	bne.n	8016a6a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8016a7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016a7e:	4770      	bx	lr
 8016a80:	4770      	bx	lr
 8016a82:	bf00      	nop

08016a84 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8016a84:	b170      	cbz	r0, 8016aa4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8016a86:	68c0      	ldr	r0, [r0, #12]
 8016a88:	b160      	cbz	r0, 8016aa4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8016a8a:	b410      	push	{r4}
 8016a8c:	e001      	b.n	8016a92 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8016a8e:	6800      	ldr	r0, [r0, #0]
 8016a90:	b128      	cbz	r0, 8016a9e <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8016a92:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	; 0x58
 8016a96:	4299      	cmp	r1, r3
 8016a98:	bf08      	it	eq
 8016a9a:	4294      	cmpeq	r4, r2
 8016a9c:	d1f7      	bne.n	8016a8e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8016a9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016aa2:	4770      	bx	lr
 8016aa4:	4770      	bx	lr
 8016aa6:	bf00      	nop

08016aa8 <rclc_action_find_first_handle_with_goal_response>:
 8016aa8:	b140      	cbz	r0, 8016abc <rclc_action_find_first_handle_with_goal_response+0x14>
 8016aaa:	68c0      	ldr	r0, [r0, #12]
 8016aac:	b910      	cbnz	r0, 8016ab4 <rclc_action_find_first_handle_with_goal_response+0xc>
 8016aae:	e005      	b.n	8016abc <rclc_action_find_first_handle_with_goal_response+0x14>
 8016ab0:	6800      	ldr	r0, [r0, #0]
 8016ab2:	b118      	cbz	r0, 8016abc <rclc_action_find_first_handle_with_goal_response+0x14>
 8016ab4:	f890 3020 	ldrb.w	r3, [r0, #32]
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d0f9      	beq.n	8016ab0 <rclc_action_find_first_handle_with_goal_response+0x8>
 8016abc:	4770      	bx	lr
 8016abe:	bf00      	nop

08016ac0 <rclc_action_find_first_handle_with_result_response>:
 8016ac0:	b140      	cbz	r0, 8016ad4 <rclc_action_find_first_handle_with_result_response+0x14>
 8016ac2:	68c0      	ldr	r0, [r0, #12]
 8016ac4:	b910      	cbnz	r0, 8016acc <rclc_action_find_first_handle_with_result_response+0xc>
 8016ac6:	e005      	b.n	8016ad4 <rclc_action_find_first_handle_with_result_response+0x14>
 8016ac8:	6800      	ldr	r0, [r0, #0]
 8016aca:	b118      	cbz	r0, 8016ad4 <rclc_action_find_first_handle_with_result_response+0x14>
 8016acc:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	d0f9      	beq.n	8016ac8 <rclc_action_find_first_handle_with_result_response+0x8>
 8016ad4:	4770      	bx	lr
 8016ad6:	bf00      	nop

08016ad8 <rclc_action_server_response_goal_request>:
 8016ad8:	b198      	cbz	r0, 8016b02 <rclc_action_server_response_goal_request+0x2a>
 8016ada:	2200      	movs	r2, #0
 8016adc:	460b      	mov	r3, r1
 8016ade:	f100 0128 	add.w	r1, r0, #40	; 0x28
 8016ae2:	b510      	push	{r4, lr}
 8016ae4:	6844      	ldr	r4, [r0, #4]
 8016ae6:	b086      	sub	sp, #24
 8016ae8:	f104 0010 	add.w	r0, r4, #16
 8016aec:	9205      	str	r2, [sp, #20]
 8016aee:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8016af2:	aa03      	add	r2, sp, #12
 8016af4:	f88d 300c 	strb.w	r3, [sp, #12]
 8016af8:	f7ff fd40 	bl	801657c <rcl_action_send_goal_response>
 8016afc:	b918      	cbnz	r0, 8016b06 <rclc_action_server_response_goal_request+0x2e>
 8016afe:	b006      	add	sp, #24
 8016b00:	bd10      	pop	{r4, pc}
 8016b02:	200b      	movs	r0, #11
 8016b04:	4770      	bx	lr
 8016b06:	9001      	str	r0, [sp, #4]
 8016b08:	f7f6 fd42 	bl	800d590 <rcutils_reset_error>
 8016b0c:	9801      	ldr	r0, [sp, #4]
 8016b0e:	b006      	add	sp, #24
 8016b10:	bd10      	pop	{r4, pc}
 8016b12:	bf00      	nop
 8016b14:	0000      	movs	r0, r0
	...

08016b18 <rclc_action_server_goal_cancel_accept>:
 8016b18:	b310      	cbz	r0, 8016b60 <rclc_action_server_goal_cancel_accept+0x48>
 8016b1a:	b510      	push	{r4, lr}
 8016b1c:	b090      	sub	sp, #64	; 0x40
 8016b1e:	4604      	mov	r4, r0
 8016b20:	a806      	add	r0, sp, #24
 8016b22:	f7ff feff 	bl	8016924 <rcl_action_get_zero_initialized_cancel_response>
 8016b26:	2300      	movs	r3, #0
 8016b28:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8016b2c:	46ec      	mov	ip, sp
 8016b2e:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8016b32:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8016b36:	f88d 3018 	strb.w	r3, [sp, #24]
 8016b3a:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8016b3e:	f8cd d01c 	str.w	sp, [sp, #28]
 8016b42:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016b46:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8016b68 <rclc_action_server_goal_cancel_accept+0x50>
 8016b4a:	6860      	ldr	r0, [r4, #4]
 8016b4c:	aa06      	add	r2, sp, #24
 8016b4e:	f104 0158 	add.w	r1, r4, #88	; 0x58
 8016b52:	3010      	adds	r0, #16
 8016b54:	ed8d 7b08 	vstr	d7, [sp, #32]
 8016b58:	f7ff fdc6 	bl	80166e8 <rcl_action_send_cancel_response>
 8016b5c:	b010      	add	sp, #64	; 0x40
 8016b5e:	bd10      	pop	{r4, pc}
 8016b60:	200b      	movs	r0, #11
 8016b62:	4770      	bx	lr
 8016b64:	f3af 8000 	nop.w
 8016b68:	00000001 	.word	0x00000001
 8016b6c:	00000001 	.word	0x00000001

08016b70 <rclc_action_server_goal_cancel_reject>:
 8016b70:	b082      	sub	sp, #8
 8016b72:	b530      	push	{r4, r5, lr}
 8016b74:	b08b      	sub	sp, #44	; 0x2c
 8016b76:	ac0e      	add	r4, sp, #56	; 0x38
 8016b78:	e884 000c 	stmia.w	r4, {r2, r3}
 8016b7c:	b188      	cbz	r0, 8016ba2 <rclc_action_server_goal_cancel_reject+0x32>
 8016b7e:	4604      	mov	r4, r0
 8016b80:	a801      	add	r0, sp, #4
 8016b82:	460d      	mov	r5, r1
 8016b84:	f7ff fece 	bl	8016924 <rcl_action_get_zero_initialized_cancel_response>
 8016b88:	aa01      	add	r2, sp, #4
 8016b8a:	a90e      	add	r1, sp, #56	; 0x38
 8016b8c:	f104 0010 	add.w	r0, r4, #16
 8016b90:	f88d 5004 	strb.w	r5, [sp, #4]
 8016b94:	f7ff fda8 	bl	80166e8 <rcl_action_send_cancel_response>
 8016b98:	b00b      	add	sp, #44	; 0x2c
 8016b9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016b9e:	b002      	add	sp, #8
 8016ba0:	4770      	bx	lr
 8016ba2:	200b      	movs	r0, #11
 8016ba4:	b00b      	add	sp, #44	; 0x2c
 8016ba6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016baa:	b002      	add	sp, #8
 8016bac:	4770      	bx	lr
 8016bae:	bf00      	nop

08016bb0 <__atomic_load_8>:
 8016bb0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8016bb4:	4a16      	ldr	r2, [pc, #88]	; (8016c10 <__atomic_load_8+0x60>)
 8016bb6:	4b17      	ldr	r3, [pc, #92]	; (8016c14 <__atomic_load_8+0x64>)
 8016bb8:	f04f 0c01 	mov.w	ip, #1
 8016bbc:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8016bc0:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8016bc4:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8016bc8:	fb02 f101 	mul.w	r1, r2, r1
 8016bcc:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8016bd0:	fba3 2301 	umull	r2, r3, r3, r1
 8016bd4:	091b      	lsrs	r3, r3, #4
 8016bd6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8016bda:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8016bde:	b4d0      	push	{r4, r6, r7}
 8016be0:	1ac9      	subs	r1, r1, r3
 8016be2:	4c0d      	ldr	r4, [pc, #52]	; (8016c18 <__atomic_load_8+0x68>)
 8016be4:	1862      	adds	r2, r4, r1
 8016be6:	e8d2 3f4f 	ldrexb	r3, [r2]
 8016bea:	e8c2 cf46 	strexb	r6, ip, [r2]
 8016bee:	2e00      	cmp	r6, #0
 8016bf0:	d1f9      	bne.n	8016be6 <__atomic_load_8+0x36>
 8016bf2:	b2db      	uxtb	r3, r3
 8016bf4:	f3bf 8f5b 	dmb	ish
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d1f4      	bne.n	8016be6 <__atomic_load_8+0x36>
 8016bfc:	e9d0 6700 	ldrd	r6, r7, [r0]
 8016c00:	f3bf 8f5b 	dmb	ish
 8016c04:	5463      	strb	r3, [r4, r1]
 8016c06:	4630      	mov	r0, r6
 8016c08:	4639      	mov	r1, r7
 8016c0a:	bcd0      	pop	{r4, r6, r7}
 8016c0c:	4770      	bx	lr
 8016c0e:	bf00      	nop
 8016c10:	27d4eb2d 	.word	0x27d4eb2d
 8016c14:	b21642c9 	.word	0xb21642c9
 8016c18:	20010618 	.word	0x20010618

08016c1c <__atomic_store_8>:
 8016c1c:	b570      	push	{r4, r5, r6, lr}
 8016c1e:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 8016c22:	4916      	ldr	r1, [pc, #88]	; (8016c7c <__atomic_store_8+0x60>)
 8016c24:	4c16      	ldr	r4, [pc, #88]	; (8016c80 <__atomic_store_8+0x64>)
 8016c26:	f08e 0e3d 	eor.w	lr, lr, #61	; 0x3d
 8016c2a:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8016c2e:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 8016c32:	fb01 fe0e 	mul.w	lr, r1, lr
 8016c36:	4913      	ldr	r1, [pc, #76]	; (8016c84 <__atomic_store_8+0x68>)
 8016c38:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 8016c3c:	fba1 510e 	umull	r5, r1, r1, lr
 8016c40:	f04f 0501 	mov.w	r5, #1
 8016c44:	0909      	lsrs	r1, r1, #4
 8016c46:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 8016c4a:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 8016c4e:	ebae 0e01 	sub.w	lr, lr, r1
 8016c52:	eb04 0c0e 	add.w	ip, r4, lr
 8016c56:	e8dc 1f4f 	ldrexb	r1, [ip]
 8016c5a:	e8cc 5f46 	strexb	r6, r5, [ip]
 8016c5e:	2e00      	cmp	r6, #0
 8016c60:	d1f9      	bne.n	8016c56 <__atomic_store_8+0x3a>
 8016c62:	b2c9      	uxtb	r1, r1
 8016c64:	f3bf 8f5b 	dmb	ish
 8016c68:	2900      	cmp	r1, #0
 8016c6a:	d1f4      	bne.n	8016c56 <__atomic_store_8+0x3a>
 8016c6c:	e9c0 2300 	strd	r2, r3, [r0]
 8016c70:	f3bf 8f5b 	dmb	ish
 8016c74:	f804 100e 	strb.w	r1, [r4, lr]
 8016c78:	bd70      	pop	{r4, r5, r6, pc}
 8016c7a:	bf00      	nop
 8016c7c:	27d4eb2d 	.word	0x27d4eb2d
 8016c80:	20010618 	.word	0x20010618
 8016c84:	b21642c9 	.word	0xb21642c9

08016c88 <__atomic_exchange_8>:
 8016c88:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8016c8c:	4917      	ldr	r1, [pc, #92]	; (8016cec <__atomic_exchange_8+0x64>)
 8016c8e:	f08c 0c3d 	eor.w	ip, ip, #61	; 0x3d
 8016c92:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8016c96:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8016c9a:	fb01 fc0c 	mul.w	ip, r1, ip
 8016c9e:	4914      	ldr	r1, [pc, #80]	; (8016cf0 <__atomic_exchange_8+0x68>)
 8016ca0:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8016ca4:	b570      	push	{r4, r5, r6, lr}
 8016ca6:	4686      	mov	lr, r0
 8016ca8:	fba1 010c 	umull	r0, r1, r1, ip
 8016cac:	4d11      	ldr	r5, [pc, #68]	; (8016cf4 <__atomic_exchange_8+0x6c>)
 8016cae:	f04f 0001 	mov.w	r0, #1
 8016cb2:	0909      	lsrs	r1, r1, #4
 8016cb4:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8016cb8:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8016cbc:	ebac 0c01 	sub.w	ip, ip, r1
 8016cc0:	eb05 010c 	add.w	r1, r5, ip
 8016cc4:	e8d1 4f4f 	ldrexb	r4, [r1]
 8016cc8:	e8c1 0f46 	strexb	r6, r0, [r1]
 8016ccc:	2e00      	cmp	r6, #0
 8016cce:	d1f9      	bne.n	8016cc4 <__atomic_exchange_8+0x3c>
 8016cd0:	b2e4      	uxtb	r4, r4
 8016cd2:	f3bf 8f5b 	dmb	ish
 8016cd6:	2c00      	cmp	r4, #0
 8016cd8:	d1f4      	bne.n	8016cc4 <__atomic_exchange_8+0x3c>
 8016cda:	e9de 0100 	ldrd	r0, r1, [lr]
 8016cde:	e9ce 2300 	strd	r2, r3, [lr]
 8016ce2:	f3bf 8f5b 	dmb	ish
 8016ce6:	f805 400c 	strb.w	r4, [r5, ip]
 8016cea:	bd70      	pop	{r4, r5, r6, pc}
 8016cec:	27d4eb2d 	.word	0x27d4eb2d
 8016cf0:	b21642c9 	.word	0xb21642c9
 8016cf4:	20010618 	.word	0x20010618

08016cf8 <rcutils_get_env>:
 8016cf8:	b168      	cbz	r0, 8016d16 <rcutils_get_env+0x1e>
 8016cfa:	b510      	push	{r4, lr}
 8016cfc:	460c      	mov	r4, r1
 8016cfe:	b129      	cbz	r1, 8016d0c <rcutils_get_env+0x14>
 8016d00:	f004 fa00 	bl	801b104 <getenv>
 8016d04:	b120      	cbz	r0, 8016d10 <rcutils_get_env+0x18>
 8016d06:	6020      	str	r0, [r4, #0]
 8016d08:	2000      	movs	r0, #0
 8016d0a:	bd10      	pop	{r4, pc}
 8016d0c:	4803      	ldr	r0, [pc, #12]	; (8016d1c <rcutils_get_env+0x24>)
 8016d0e:	bd10      	pop	{r4, pc}
 8016d10:	4b03      	ldr	r3, [pc, #12]	; (8016d20 <rcutils_get_env+0x28>)
 8016d12:	6023      	str	r3, [r4, #0]
 8016d14:	bd10      	pop	{r4, pc}
 8016d16:	4803      	ldr	r0, [pc, #12]	; (8016d24 <rcutils_get_env+0x2c>)
 8016d18:	4770      	bx	lr
 8016d1a:	bf00      	nop
 8016d1c:	0801dc3c 	.word	0x0801dc3c
 8016d20:	0801dd60 	.word	0x0801dd60
 8016d24:	0801dc20 	.word	0x0801dc20

08016d28 <rcutils_is_directory>:
 8016d28:	2000      	movs	r0, #0
 8016d2a:	4770      	bx	lr

08016d2c <rcutils_join_path>:
 8016d2c:	b082      	sub	sp, #8
 8016d2e:	2000      	movs	r0, #0
 8016d30:	e88d 000c 	stmia.w	sp, {r2, r3}
 8016d34:	b002      	add	sp, #8
 8016d36:	4770      	bx	lr

08016d38 <rcutils_to_native_path>:
 8016d38:	b084      	sub	sp, #16
 8016d3a:	2000      	movs	r0, #0
 8016d3c:	f10d 0c04 	add.w	ip, sp, #4
 8016d40:	b004      	add	sp, #16
 8016d42:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8016d46:	4770      	bx	lr

08016d48 <rcutils_format_string_limit>:
 8016d48:	b40f      	push	{r0, r1, r2, r3}
 8016d4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016d4c:	b083      	sub	sp, #12
 8016d4e:	ac08      	add	r4, sp, #32
 8016d50:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8016d52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016d56:	b326      	cbz	r6, 8016da2 <rcutils_format_string_limit+0x5a>
 8016d58:	a808      	add	r0, sp, #32
 8016d5a:	f7f6 fbf3 	bl	800d544 <rcutils_allocator_is_valid>
 8016d5e:	b300      	cbz	r0, 8016da2 <rcutils_format_string_limit+0x5a>
 8016d60:	2100      	movs	r1, #0
 8016d62:	ab0f      	add	r3, sp, #60	; 0x3c
 8016d64:	4632      	mov	r2, r6
 8016d66:	4608      	mov	r0, r1
 8016d68:	e9cd 3300 	strd	r3, r3, [sp]
 8016d6c:	f000 f906 	bl	8016f7c <rcutils_vsnprintf>
 8016d70:	1c43      	adds	r3, r0, #1
 8016d72:	4605      	mov	r5, r0
 8016d74:	d015      	beq.n	8016da2 <rcutils_format_string_limit+0x5a>
 8016d76:	1c47      	adds	r7, r0, #1
 8016d78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016d7a:	429f      	cmp	r7, r3
 8016d7c:	d901      	bls.n	8016d82 <rcutils_format_string_limit+0x3a>
 8016d7e:	1e5d      	subs	r5, r3, #1
 8016d80:	461f      	mov	r7, r3
 8016d82:	9b08      	ldr	r3, [sp, #32]
 8016d84:	4638      	mov	r0, r7
 8016d86:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016d88:	4798      	blx	r3
 8016d8a:	4604      	mov	r4, r0
 8016d8c:	b148      	cbz	r0, 8016da2 <rcutils_format_string_limit+0x5a>
 8016d8e:	4632      	mov	r2, r6
 8016d90:	4639      	mov	r1, r7
 8016d92:	9b01      	ldr	r3, [sp, #4]
 8016d94:	f000 f8f2 	bl	8016f7c <rcutils_vsnprintf>
 8016d98:	2800      	cmp	r0, #0
 8016d9a:	db09      	blt.n	8016db0 <rcutils_format_string_limit+0x68>
 8016d9c:	2300      	movs	r3, #0
 8016d9e:	5563      	strb	r3, [r4, r5]
 8016da0:	e000      	b.n	8016da4 <rcutils_format_string_limit+0x5c>
 8016da2:	2400      	movs	r4, #0
 8016da4:	4620      	mov	r0, r4
 8016da6:	b003      	add	sp, #12
 8016da8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016dac:	b004      	add	sp, #16
 8016dae:	4770      	bx	lr
 8016db0:	4620      	mov	r0, r4
 8016db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016db4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016db6:	2400      	movs	r4, #0
 8016db8:	4798      	blx	r3
 8016dba:	e7f3      	b.n	8016da4 <rcutils_format_string_limit+0x5c>

08016dbc <rcutils_repl_str>:
 8016dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016dc0:	ed2d 8b02 	vpush	{d8}
 8016dc4:	b087      	sub	sp, #28
 8016dc6:	2600      	movs	r6, #0
 8016dc8:	4680      	mov	r8, r0
 8016dca:	468a      	mov	sl, r1
 8016dcc:	9000      	str	r0, [sp, #0]
 8016dce:	4608      	mov	r0, r1
 8016dd0:	ee08 2a10 	vmov	s16, r2
 8016dd4:	4699      	mov	r9, r3
 8016dd6:	2510      	movs	r5, #16
 8016dd8:	f7e9 fa92 	bl	8000300 <strlen>
 8016ddc:	4637      	mov	r7, r6
 8016dde:	46b3      	mov	fp, r6
 8016de0:	9001      	str	r0, [sp, #4]
 8016de2:	e01e      	b.n	8016e22 <rcutils_repl_str+0x66>
 8016de4:	f10b 0b01 	add.w	fp, fp, #1
 8016de8:	9b01      	ldr	r3, [sp, #4]
 8016dea:	455e      	cmp	r6, fp
 8016dec:	eb04 0803 	add.w	r8, r4, r3
 8016df0:	d211      	bcs.n	8016e16 <rcutils_repl_str+0x5a>
 8016df2:	442e      	add	r6, r5
 8016df4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016df8:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8016dfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016e00:	00b1      	lsls	r1, r6, #2
 8016e02:	4798      	blx	r3
 8016e04:	2800      	cmp	r0, #0
 8016e06:	f000 8088 	beq.w	8016f1a <rcutils_repl_str+0x15e>
 8016e0a:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8016e0e:	4607      	mov	r7, r0
 8016e10:	bf28      	it	cs
 8016e12:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8016e16:	9a00      	ldr	r2, [sp, #0]
 8016e18:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 8016e1c:	1aa4      	subs	r4, r4, r2
 8016e1e:	f843 4c04 	str.w	r4, [r3, #-4]
 8016e22:	4651      	mov	r1, sl
 8016e24:	4640      	mov	r0, r8
 8016e26:	f004 fd67 	bl	801b8f8 <strstr>
 8016e2a:	4604      	mov	r4, r0
 8016e2c:	4638      	mov	r0, r7
 8016e2e:	2c00      	cmp	r4, #0
 8016e30:	d1d8      	bne.n	8016de4 <rcutils_repl_str+0x28>
 8016e32:	4640      	mov	r0, r8
 8016e34:	f7e9 fa64 	bl	8000300 <strlen>
 8016e38:	9b00      	ldr	r3, [sp, #0]
 8016e3a:	eba8 0803 	sub.w	r8, r8, r3
 8016e3e:	eb08 0400 	add.w	r4, r8, r0
 8016e42:	9402      	str	r4, [sp, #8]
 8016e44:	f1bb 0f00 	cmp.w	fp, #0
 8016e48:	d045      	beq.n	8016ed6 <rcutils_repl_str+0x11a>
 8016e4a:	ee18 0a10 	vmov	r0, s16
 8016e4e:	f7e9 fa57 	bl	8000300 <strlen>
 8016e52:	9a01      	ldr	r2, [sp, #4]
 8016e54:	4606      	mov	r6, r0
 8016e56:	f8d9 3000 	ldr.w	r3, [r9]
 8016e5a:	1a82      	subs	r2, r0, r2
 8016e5c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016e60:	fb0b 4202 	mla	r2, fp, r2, r4
 8016e64:	1c50      	adds	r0, r2, #1
 8016e66:	9205      	str	r2, [sp, #20]
 8016e68:	4798      	blx	r3
 8016e6a:	4682      	mov	sl, r0
 8016e6c:	2800      	cmp	r0, #0
 8016e6e:	d054      	beq.n	8016f1a <rcutils_repl_str+0x15e>
 8016e70:	683a      	ldr	r2, [r7, #0]
 8016e72:	463d      	mov	r5, r7
 8016e74:	9900      	ldr	r1, [sp, #0]
 8016e76:	2401      	movs	r4, #1
 8016e78:	f004 fe35 	bl	801bae6 <memcpy>
 8016e7c:	683b      	ldr	r3, [r7, #0]
 8016e7e:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 8016e82:	eb0a 0803 	add.w	r8, sl, r3
 8016e86:	ee18 7a10 	vmov	r7, s16
 8016e8a:	f8dd a000 	ldr.w	sl, [sp]
 8016e8e:	f8cd 9000 	str.w	r9, [sp]
 8016e92:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8016e96:	4632      	mov	r2, r6
 8016e98:	4639      	mov	r1, r7
 8016e9a:	4640      	mov	r0, r8
 8016e9c:	44b0      	add	r8, r6
 8016e9e:	f004 fe22 	bl	801bae6 <memcpy>
 8016ea2:	f855 2b04 	ldr.w	r2, [r5], #4
 8016ea6:	45a3      	cmp	fp, r4
 8016ea8:	444a      	add	r2, r9
 8016eaa:	eb0a 0102 	add.w	r1, sl, r2
 8016eae:	d02a      	beq.n	8016f06 <rcutils_repl_str+0x14a>
 8016eb0:	6828      	ldr	r0, [r5, #0]
 8016eb2:	1a82      	subs	r2, r0, r2
 8016eb4:	4640      	mov	r0, r8
 8016eb6:	4490      	add	r8, r2
 8016eb8:	f004 fe15 	bl	801bae6 <memcpy>
 8016ebc:	1c62      	adds	r2, r4, #1
 8016ebe:	45a3      	cmp	fp, r4
 8016ec0:	4614      	mov	r4, r2
 8016ec2:	d8e8      	bhi.n	8016e96 <rcutils_repl_str+0xda>
 8016ec4:	f8dd 9000 	ldr.w	r9, [sp]
 8016ec8:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8016ecc:	2300      	movs	r3, #0
 8016ece:	9a05      	ldr	r2, [sp, #20]
 8016ed0:	f80a 3002 	strb.w	r3, [sl, r2]
 8016ed4:	e00b      	b.n	8016eee <rcutils_repl_str+0x132>
 8016ed6:	4620      	mov	r0, r4
 8016ed8:	f8d9 3000 	ldr.w	r3, [r9]
 8016edc:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016ee0:	3001      	adds	r0, #1
 8016ee2:	4798      	blx	r3
 8016ee4:	4682      	mov	sl, r0
 8016ee6:	b110      	cbz	r0, 8016eee <rcutils_repl_str+0x132>
 8016ee8:	9900      	ldr	r1, [sp, #0]
 8016eea:	f004 fdf4 	bl	801bad6 <strcpy>
 8016eee:	4638      	mov	r0, r7
 8016ef0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8016ef4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016ef8:	4798      	blx	r3
 8016efa:	4650      	mov	r0, sl
 8016efc:	b007      	add	sp, #28
 8016efe:	ecbd 8b02 	vpop	{d8}
 8016f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f06:	9b02      	ldr	r3, [sp, #8]
 8016f08:	4640      	mov	r0, r8
 8016f0a:	f8dd 9000 	ldr.w	r9, [sp]
 8016f0e:	1a9a      	subs	r2, r3, r2
 8016f10:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8016f14:	f004 fde7 	bl	801bae6 <memcpy>
 8016f18:	e7d8      	b.n	8016ecc <rcutils_repl_str+0x110>
 8016f1a:	f04f 0a00 	mov.w	sl, #0
 8016f1e:	e7e6      	b.n	8016eee <rcutils_repl_str+0x132>

08016f20 <rcutils_snprintf>:
 8016f20:	b40c      	push	{r2, r3}
 8016f22:	b530      	push	{r4, r5, lr}
 8016f24:	b083      	sub	sp, #12
 8016f26:	ab06      	add	r3, sp, #24
 8016f28:	f853 2b04 	ldr.w	r2, [r3], #4
 8016f2c:	9301      	str	r3, [sp, #4]
 8016f2e:	b1e2      	cbz	r2, 8016f6a <rcutils_snprintf+0x4a>
 8016f30:	fab0 f480 	clz	r4, r0
 8016f34:	fab1 f581 	clz	r5, r1
 8016f38:	ea50 0c01 	orrs.w	ip, r0, r1
 8016f3c:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8016f40:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8016f44:	d008      	beq.n	8016f58 <rcutils_snprintf+0x38>
 8016f46:	b984      	cbnz	r4, 8016f6a <rcutils_snprintf+0x4a>
 8016f48:	b97d      	cbnz	r5, 8016f6a <rcutils_snprintf+0x4a>
 8016f4a:	f004 fc63 	bl	801b814 <vsniprintf>
 8016f4e:	b003      	add	sp, #12
 8016f50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016f54:	b002      	add	sp, #8
 8016f56:	4770      	bx	lr
 8016f58:	4661      	mov	r1, ip
 8016f5a:	4660      	mov	r0, ip
 8016f5c:	f004 fc5a 	bl	801b814 <vsniprintf>
 8016f60:	b003      	add	sp, #12
 8016f62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016f66:	b002      	add	sp, #8
 8016f68:	4770      	bx	lr
 8016f6a:	f004 fd87 	bl	801ba7c <__errno>
 8016f6e:	2216      	movs	r2, #22
 8016f70:	4603      	mov	r3, r0
 8016f72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016f76:	601a      	str	r2, [r3, #0]
 8016f78:	e7e9      	b.n	8016f4e <rcutils_snprintf+0x2e>
 8016f7a:	bf00      	nop

08016f7c <rcutils_vsnprintf>:
 8016f7c:	b570      	push	{r4, r5, r6, lr}
 8016f7e:	b1b2      	cbz	r2, 8016fae <rcutils_vsnprintf+0x32>
 8016f80:	fab0 f480 	clz	r4, r0
 8016f84:	fab1 f581 	clz	r5, r1
 8016f88:	ea50 0c01 	orrs.w	ip, r0, r1
 8016f8c:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8016f90:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8016f94:	d005      	beq.n	8016fa2 <rcutils_vsnprintf+0x26>
 8016f96:	b954      	cbnz	r4, 8016fae <rcutils_vsnprintf+0x32>
 8016f98:	b94d      	cbnz	r5, 8016fae <rcutils_vsnprintf+0x32>
 8016f9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016f9e:	f004 bc39 	b.w	801b814 <vsniprintf>
 8016fa2:	4661      	mov	r1, ip
 8016fa4:	4660      	mov	r0, ip
 8016fa6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016faa:	f004 bc33 	b.w	801b814 <vsniprintf>
 8016fae:	f004 fd65 	bl	801ba7c <__errno>
 8016fb2:	2316      	movs	r3, #22
 8016fb4:	6003      	str	r3, [r0, #0]
 8016fb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016fba:	bd70      	pop	{r4, r5, r6, pc}

08016fbc <rcutils_strdup>:
 8016fbc:	b084      	sub	sp, #16
 8016fbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016fc0:	ac07      	add	r4, sp, #28
 8016fc2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8016fc4:	4605      	mov	r5, r0
 8016fc6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8016fca:	b1d0      	cbz	r0, 8017002 <rcutils_strdup+0x46>
 8016fcc:	460c      	mov	r4, r1
 8016fce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016fd2:	2100      	movs	r1, #0
 8016fd4:	f7e9 f944 	bl	8000260 <memchr>
 8016fd8:	b180      	cbz	r0, 8016ffc <rcutils_strdup+0x40>
 8016fda:	1b46      	subs	r6, r0, r5
 8016fdc:	1c70      	adds	r0, r6, #1
 8016fde:	4639      	mov	r1, r7
 8016fe0:	47a0      	blx	r4
 8016fe2:	4604      	mov	r4, r0
 8016fe4:	b128      	cbz	r0, 8016ff2 <rcutils_strdup+0x36>
 8016fe6:	4632      	mov	r2, r6
 8016fe8:	4629      	mov	r1, r5
 8016fea:	f004 fd7c 	bl	801bae6 <memcpy>
 8016fee:	2300      	movs	r3, #0
 8016ff0:	55a3      	strb	r3, [r4, r6]
 8016ff2:	4620      	mov	r0, r4
 8016ff4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016ff8:	b004      	add	sp, #16
 8016ffa:	4770      	bx	lr
 8016ffc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8017000:	e7ed      	b.n	8016fde <rcutils_strdup+0x22>
 8017002:	4604      	mov	r4, r0
 8017004:	e7f5      	b.n	8016ff2 <rcutils_strdup+0x36>
 8017006:	bf00      	nop

08017008 <rcutils_strndup>:
 8017008:	b082      	sub	sp, #8
 801700a:	b570      	push	{r4, r5, r6, lr}
 801700c:	ac04      	add	r4, sp, #16
 801700e:	4606      	mov	r6, r0
 8017010:	e884 000c 	stmia.w	r4, {r2, r3}
 8017014:	b1b8      	cbz	r0, 8017046 <rcutils_strndup+0x3e>
 8017016:	460c      	mov	r4, r1
 8017018:	460a      	mov	r2, r1
 801701a:	2100      	movs	r1, #0
 801701c:	f7e9 f920 	bl	8000260 <memchr>
 8017020:	b100      	cbz	r0, 8017024 <rcutils_strndup+0x1c>
 8017022:	1b84      	subs	r4, r0, r6
 8017024:	9b04      	ldr	r3, [sp, #16]
 8017026:	1c60      	adds	r0, r4, #1
 8017028:	9908      	ldr	r1, [sp, #32]
 801702a:	4798      	blx	r3
 801702c:	4605      	mov	r5, r0
 801702e:	b128      	cbz	r0, 801703c <rcutils_strndup+0x34>
 8017030:	4622      	mov	r2, r4
 8017032:	4631      	mov	r1, r6
 8017034:	f004 fd57 	bl	801bae6 <memcpy>
 8017038:	2300      	movs	r3, #0
 801703a:	552b      	strb	r3, [r5, r4]
 801703c:	4628      	mov	r0, r5
 801703e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017042:	b002      	add	sp, #8
 8017044:	4770      	bx	lr
 8017046:	4605      	mov	r5, r0
 8017048:	e7f8      	b.n	801703c <rcutils_strndup+0x34>
 801704a:	bf00      	nop

0801704c <rcutils_get_zero_initialized_string_map>:
 801704c:	2000      	movs	r0, #0
 801704e:	4b01      	ldr	r3, [pc, #4]	; (8017054 <rcutils_get_zero_initialized_string_map+0x8>)
 8017050:	6018      	str	r0, [r3, #0]
 8017052:	4770      	bx	lr
 8017054:	20010630 	.word	0x20010630

08017058 <rcutils_string_map_reserve>:
 8017058:	2800      	cmp	r0, #0
 801705a:	d03e      	beq.n	80170da <rcutils_string_map_reserve+0x82>
 801705c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801705e:	6805      	ldr	r5, [r0, #0]
 8017060:	4606      	mov	r6, r0
 8017062:	460c      	mov	r4, r1
 8017064:	b12d      	cbz	r5, 8017072 <rcutils_string_map_reserve+0x1a>
 8017066:	68ab      	ldr	r3, [r5, #8]
 8017068:	42a3      	cmp	r3, r4
 801706a:	d904      	bls.n	8017076 <rcutils_string_map_reserve+0x1e>
 801706c:	461c      	mov	r4, r3
 801706e:	2d00      	cmp	r5, #0
 8017070:	d1f9      	bne.n	8017066 <rcutils_string_map_reserve+0xe>
 8017072:	201f      	movs	r0, #31
 8017074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017076:	686b      	ldr	r3, [r5, #4]
 8017078:	42a3      	cmp	r3, r4
 801707a:	d02a      	beq.n	80170d2 <rcutils_string_map_reserve+0x7a>
 801707c:	69e9      	ldr	r1, [r5, #28]
 801707e:	b304      	cbz	r4, 80170c2 <rcutils_string_map_reserve+0x6a>
 8017080:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
 8017084:	d227      	bcs.n	80170d6 <rcutils_string_map_reserve+0x7e>
 8017086:	00e7      	lsls	r7, r4, #3
 8017088:	460a      	mov	r2, r1
 801708a:	696b      	ldr	r3, [r5, #20]
 801708c:	6828      	ldr	r0, [r5, #0]
 801708e:	4639      	mov	r1, r7
 8017090:	4798      	blx	r3
 8017092:	b300      	cbz	r0, 80170d6 <rcutils_string_map_reserve+0x7e>
 8017094:	6835      	ldr	r5, [r6, #0]
 8017096:	686a      	ldr	r2, [r5, #4]
 8017098:	6028      	str	r0, [r5, #0]
 801709a:	42a2      	cmp	r2, r4
 801709c:	d216      	bcs.n	80170cc <rcutils_string_map_reserve+0x74>
 801709e:	43d1      	mvns	r1, r2
 80170a0:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
 80170a4:	4421      	add	r1, r4
 80170a6:	2909      	cmp	r1, #9
 80170a8:	d919      	bls.n	80170de <rcutils_string_map_reserve+0x86>
 80170aa:	0759      	lsls	r1, r3, #29
 80170ac:	d117      	bne.n	80170de <rcutils_string_map_reserve+0x86>
 80170ae:	1aa1      	subs	r1, r4, r2
 80170b0:	2600      	movs	r6, #0
 80170b2:	2200      	movs	r2, #0
 80170b4:	2700      	movs	r7, #0
 80170b6:	3201      	adds	r2, #1
 80170b8:	4291      	cmp	r1, r2
 80170ba:	e8e3 6702 	strd	r6, r7, [r3], #8
 80170be:	d8fa      	bhi.n	80170b6 <rcutils_string_map_reserve+0x5e>
 80170c0:	e004      	b.n	80170cc <rcutils_string_map_reserve+0x74>
 80170c2:	692b      	ldr	r3, [r5, #16]
 80170c4:	6828      	ldr	r0, [r5, #0]
 80170c6:	4798      	blx	r3
 80170c8:	6835      	ldr	r5, [r6, #0]
 80170ca:	602c      	str	r4, [r5, #0]
 80170cc:	2000      	movs	r0, #0
 80170ce:	606c      	str	r4, [r5, #4]
 80170d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80170d2:	2000      	movs	r0, #0
 80170d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80170d6:	200a      	movs	r0, #10
 80170d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80170da:	200b      	movs	r0, #11
 80170dc:	4770      	bx	lr
 80170de:	4438      	add	r0, r7
 80170e0:	2200      	movs	r2, #0
 80170e2:	e9c3 2200 	strd	r2, r2, [r3]
 80170e6:	3308      	adds	r3, #8
 80170e8:	4283      	cmp	r3, r0
 80170ea:	d1fa      	bne.n	80170e2 <rcutils_string_map_reserve+0x8a>
 80170ec:	e7ee      	b.n	80170cc <rcutils_string_map_reserve+0x74>
 80170ee:	bf00      	nop

080170f0 <rcutils_string_map_init>:
 80170f0:	b082      	sub	sp, #8
 80170f2:	b570      	push	{r4, r5, r6, lr}
 80170f4:	ac04      	add	r4, sp, #16
 80170f6:	e884 000c 	stmia.w	r4, {r2, r3}
 80170fa:	b378      	cbz	r0, 801715c <rcutils_string_map_init+0x6c>
 80170fc:	6806      	ldr	r6, [r0, #0]
 80170fe:	4604      	mov	r4, r0
 8017100:	b12e      	cbz	r6, 801710e <rcutils_string_map_init+0x1e>
 8017102:	251e      	movs	r5, #30
 8017104:	4628      	mov	r0, r5
 8017106:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801710a:	b002      	add	sp, #8
 801710c:	4770      	bx	lr
 801710e:	a804      	add	r0, sp, #16
 8017110:	460d      	mov	r5, r1
 8017112:	f7f6 fa17 	bl	800d544 <rcutils_allocator_is_valid>
 8017116:	b308      	cbz	r0, 801715c <rcutils_string_map_init+0x6c>
 8017118:	9b04      	ldr	r3, [sp, #16]
 801711a:	2020      	movs	r0, #32
 801711c:	9908      	ldr	r1, [sp, #32]
 801711e:	4798      	blx	r3
 8017120:	6020      	str	r0, [r4, #0]
 8017122:	b308      	cbz	r0, 8017168 <rcutils_string_map_init+0x78>
 8017124:	f10d 0e10 	add.w	lr, sp, #16
 8017128:	6086      	str	r6, [r0, #8]
 801712a:	f100 0c0c 	add.w	ip, r0, #12
 801712e:	e9c0 6600 	strd	r6, r6, [r0]
 8017132:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017136:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801713a:	f8de 3000 	ldr.w	r3, [lr]
 801713e:	4629      	mov	r1, r5
 8017140:	4620      	mov	r0, r4
 8017142:	f8cc 3000 	str.w	r3, [ip]
 8017146:	f7ff ff87 	bl	8017058 <rcutils_string_map_reserve>
 801714a:	4605      	mov	r5, r0
 801714c:	2800      	cmp	r0, #0
 801714e:	d0d9      	beq.n	8017104 <rcutils_string_map_init+0x14>
 8017150:	9b05      	ldr	r3, [sp, #20]
 8017152:	9908      	ldr	r1, [sp, #32]
 8017154:	6820      	ldr	r0, [r4, #0]
 8017156:	4798      	blx	r3
 8017158:	6026      	str	r6, [r4, #0]
 801715a:	e7d3      	b.n	8017104 <rcutils_string_map_init+0x14>
 801715c:	250b      	movs	r5, #11
 801715e:	4628      	mov	r0, r5
 8017160:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017164:	b002      	add	sp, #8
 8017166:	4770      	bx	lr
 8017168:	250a      	movs	r5, #10
 801716a:	e7cb      	b.n	8017104 <rcutils_string_map_init+0x14>

0801716c <rcutils_string_map_fini>:
 801716c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017170:	b083      	sub	sp, #12
 8017172:	2800      	cmp	r0, #0
 8017174:	d03e      	beq.n	80171f4 <rcutils_string_map_fini+0x88>
 8017176:	6804      	ldr	r4, [r0, #0]
 8017178:	4606      	mov	r6, r0
 801717a:	2c00      	cmp	r4, #0
 801717c:	d036      	beq.n	80171ec <rcutils_string_map_fini+0x80>
 801717e:	6863      	ldr	r3, [r4, #4]
 8017180:	b34b      	cbz	r3, 80171d6 <rcutils_string_map_fini+0x6a>
 8017182:	2500      	movs	r5, #0
 8017184:	6822      	ldr	r2, [r4, #0]
 8017186:	462f      	mov	r7, r5
 8017188:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
 801718c:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 8017190:	b1f0      	cbz	r0, 80171d0 <rcutils_string_map_fini+0x64>
 8017192:	69e1      	ldr	r1, [r4, #28]
 8017194:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8017198:	9101      	str	r1, [sp, #4]
 801719a:	47c8      	blx	r9
 801719c:	6823      	ldr	r3, [r4, #0]
 801719e:	9901      	ldr	r1, [sp, #4]
 80171a0:	eb03 0208 	add.w	r2, r3, r8
 80171a4:	f843 7035 	str.w	r7, [r3, r5, lsl #3]
 80171a8:	3501      	adds	r5, #1
 80171aa:	6850      	ldr	r0, [r2, #4]
 80171ac:	47c8      	blx	r9
 80171ae:	68a3      	ldr	r3, [r4, #8]
 80171b0:	6822      	ldr	r2, [r4, #0]
 80171b2:	3b01      	subs	r3, #1
 80171b4:	4442      	add	r2, r8
 80171b6:	6057      	str	r7, [r2, #4]
 80171b8:	60a3      	str	r3, [r4, #8]
 80171ba:	6834      	ldr	r4, [r6, #0]
 80171bc:	6863      	ldr	r3, [r4, #4]
 80171be:	429d      	cmp	r5, r3
 80171c0:	d209      	bcs.n	80171d6 <rcutils_string_map_fini+0x6a>
 80171c2:	6822      	ldr	r2, [r4, #0]
 80171c4:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 80171c8:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
 80171cc:	2800      	cmp	r0, #0
 80171ce:	d1e0      	bne.n	8017192 <rcutils_string_map_fini+0x26>
 80171d0:	3501      	adds	r5, #1
 80171d2:	429d      	cmp	r5, r3
 80171d4:	d3d8      	bcc.n	8017188 <rcutils_string_map_fini+0x1c>
 80171d6:	2100      	movs	r1, #0
 80171d8:	4630      	mov	r0, r6
 80171da:	f7ff ff3d 	bl	8017058 <rcutils_string_map_reserve>
 80171de:	4604      	mov	r4, r0
 80171e0:	b920      	cbnz	r0, 80171ec <rcutils_string_map_fini+0x80>
 80171e2:	6830      	ldr	r0, [r6, #0]
 80171e4:	6903      	ldr	r3, [r0, #16]
 80171e6:	69c1      	ldr	r1, [r0, #28]
 80171e8:	4798      	blx	r3
 80171ea:	6034      	str	r4, [r6, #0]
 80171ec:	4620      	mov	r0, r4
 80171ee:	b003      	add	sp, #12
 80171f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80171f4:	240b      	movs	r4, #11
 80171f6:	4620      	mov	r0, r4
 80171f8:	b003      	add	sp, #12
 80171fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80171fe:	bf00      	nop

08017200 <rcutils_string_map_getn>:
 8017200:	b338      	cbz	r0, 8017252 <rcutils_string_map_getn+0x52>
 8017202:	6803      	ldr	r3, [r0, #0]
 8017204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017208:	4688      	mov	r8, r1
 801720a:	b1d9      	cbz	r1, 8017244 <rcutils_string_map_getn+0x44>
 801720c:	fab3 f483 	clz	r4, r3
 8017210:	0964      	lsrs	r4, r4, #5
 8017212:	b1bb      	cbz	r3, 8017244 <rcutils_string_map_getn+0x44>
 8017214:	4691      	mov	r9, r2
 8017216:	e9d3 7600 	ldrd	r7, r6, [r3]
 801721a:	b19e      	cbz	r6, 8017244 <rcutils_string_map_getn+0x44>
 801721c:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
 8017220:	eb07 0ac4 	add.w	sl, r7, r4, lsl #3
 8017224:	3401      	adds	r4, #1
 8017226:	4628      	mov	r0, r5
 8017228:	b155      	cbz	r5, 8017240 <rcutils_string_map_getn+0x40>
 801722a:	f7e9 f869 	bl	8000300 <strlen>
 801722e:	4602      	mov	r2, r0
 8017230:	4629      	mov	r1, r5
 8017232:	4640      	mov	r0, r8
 8017234:	454a      	cmp	r2, r9
 8017236:	bf38      	it	cc
 8017238:	464a      	movcc	r2, r9
 801723a:	f004 fb38 	bl	801b8ae <strncmp>
 801723e:	b120      	cbz	r0, 801724a <rcutils_string_map_getn+0x4a>
 8017240:	42a6      	cmp	r6, r4
 8017242:	d1eb      	bne.n	801721c <rcutils_string_map_getn+0x1c>
 8017244:	2000      	movs	r0, #0
 8017246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801724a:	f8da 0004 	ldr.w	r0, [sl, #4]
 801724e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017252:	4770      	bx	lr
 8017254:	0000      	movs	r0, r0
	...

08017258 <rmw_get_zero_initialized_context>:
 8017258:	b510      	push	{r4, lr}
 801725a:	4604      	mov	r4, r0
 801725c:	3010      	adds	r0, #16
 801725e:	f000 f80f 	bl	8017280 <rmw_get_zero_initialized_init_options>
 8017262:	2300      	movs	r3, #0
 8017264:	4620      	mov	r0, r4
 8017266:	60a3      	str	r3, [r4, #8]
 8017268:	66a3      	str	r3, [r4, #104]	; 0x68
 801726a:	66e3      	str	r3, [r4, #108]	; 0x6c
 801726c:	ed9f 7b02 	vldr	d7, [pc, #8]	; 8017278 <rmw_get_zero_initialized_context+0x20>
 8017270:	ed84 7b00 	vstr	d7, [r4]
 8017274:	bd10      	pop	{r4, pc}
 8017276:	bf00      	nop
	...

08017280 <rmw_get_zero_initialized_init_options>:
 8017280:	b510      	push	{r4, lr}
 8017282:	4604      	mov	r4, r0
 8017284:	2258      	movs	r2, #88	; 0x58
 8017286:	2100      	movs	r1, #0
 8017288:	f004 fafc 	bl	801b884 <memset>
 801728c:	f104 0010 	add.w	r0, r4, #16
 8017290:	f000 f80a 	bl	80172a8 <rmw_get_default_security_options>
 8017294:	f104 001c 	add.w	r0, r4, #28
 8017298:	f003 fd24 	bl	801ace4 <rmw_get_zero_initialized_discovery_options>
 801729c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80172a0:	4620      	mov	r0, r4
 80172a2:	60e3      	str	r3, [r4, #12]
 80172a4:	bd10      	pop	{r4, pc}
 80172a6:	bf00      	nop

080172a8 <rmw_get_default_security_options>:
 80172a8:	2200      	movs	r2, #0
 80172aa:	7002      	strb	r2, [r0, #0]
 80172ac:	6042      	str	r2, [r0, #4]
 80172ae:	4770      	bx	lr

080172b0 <rmw_time_equal>:
 80172b0:	b4f0      	push	{r4, r5, r6, r7}
 80172b2:	b084      	sub	sp, #16
 80172b4:	ac04      	add	r4, sp, #16
 80172b6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80172ba:	4603      	mov	r3, r0
 80172bc:	4925      	ldr	r1, [pc, #148]	; (8017354 <rmw_time_equal+0xa4>)
 80172be:	9d01      	ldr	r5, [sp, #4]
 80172c0:	4610      	mov	r0, r2
 80172c2:	4299      	cmp	r1, r3
 80172c4:	f04f 0202 	mov.w	r2, #2
 80172c8:	9e03      	ldr	r6, [sp, #12]
 80172ca:	41aa      	sbcs	r2, r5
 80172cc:	d330      	bcc.n	8017330 <rmw_time_equal+0x80>
 80172ce:	4c22      	ldr	r4, [pc, #136]	; (8017358 <rmw_time_equal+0xa8>)
 80172d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80172d4:	fba3 3204 	umull	r3, r2, r3, r4
 80172d8:	fb04 2205 	mla	r2, r4, r5, r2
 80172dc:	43dd      	mvns	r5, r3
 80172de:	1a8c      	subs	r4, r1, r2
 80172e0:	4285      	cmp	r5, r0
 80172e2:	41b4      	sbcs	r4, r6
 80172e4:	d332      	bcc.n	801734c <rmw_time_equal+0x9c>
 80172e6:	eb10 0c03 	adds.w	ip, r0, r3
 80172ea:	eb42 0106 	adc.w	r1, r2, r6
 80172ee:	4819      	ldr	r0, [pc, #100]	; (8017354 <rmw_time_equal+0xa4>)
 80172f0:	2202      	movs	r2, #2
 80172f2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80172f4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80172f6:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 80172fa:	4298      	cmp	r0, r3
 80172fc:	41b2      	sbcs	r2, r6
 80172fe:	d31c      	bcc.n	801733a <rmw_time_equal+0x8a>
 8017300:	4c15      	ldr	r4, [pc, #84]	; (8017358 <rmw_time_equal+0xa8>)
 8017302:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8017306:	fba3 3204 	umull	r3, r2, r3, r4
 801730a:	fb04 2206 	mla	r2, r4, r6, r2
 801730e:	43de      	mvns	r6, r3
 8017310:	1a84      	subs	r4, r0, r2
 8017312:	42ae      	cmp	r6, r5
 8017314:	41bc      	sbcs	r4, r7
 8017316:	d315      	bcc.n	8017344 <rmw_time_equal+0x94>
 8017318:	195b      	adds	r3, r3, r5
 801731a:	eb42 0207 	adc.w	r2, r2, r7
 801731e:	428a      	cmp	r2, r1
 8017320:	bf08      	it	eq
 8017322:	4563      	cmpeq	r3, ip
 8017324:	bf0c      	ite	eq
 8017326:	2001      	moveq	r0, #1
 8017328:	2000      	movne	r0, #0
 801732a:	b004      	add	sp, #16
 801732c:	bcf0      	pop	{r4, r5, r6, r7}
 801732e:	4770      	bx	lr
 8017330:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8017334:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017338:	e7d9      	b.n	80172ee <rmw_time_equal+0x3e>
 801733a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801733e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8017342:	e7ec      	b.n	801731e <rmw_time_equal+0x6e>
 8017344:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017348:	4602      	mov	r2, r0
 801734a:	e7e8      	b.n	801731e <rmw_time_equal+0x6e>
 801734c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8017350:	e7cd      	b.n	80172ee <rmw_time_equal+0x3e>
 8017352:	bf00      	nop
 8017354:	25c17d04 	.word	0x25c17d04
 8017358:	3b9aca00 	.word	0x3b9aca00

0801735c <rmw_time_total_nsec>:
 801735c:	b470      	push	{r4, r5, r6}
 801735e:	b085      	sub	sp, #20
 8017360:	ac04      	add	r4, sp, #16
 8017362:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8017366:	4603      	mov	r3, r0
 8017368:	4913      	ldr	r1, [pc, #76]	; (80173b8 <rmw_time_total_nsec+0x5c>)
 801736a:	9d01      	ldr	r5, [sp, #4]
 801736c:	4610      	mov	r0, r2
 801736e:	4299      	cmp	r1, r3
 8017370:	f04f 0202 	mov.w	r2, #2
 8017374:	9e03      	ldr	r6, [sp, #12]
 8017376:	41aa      	sbcs	r2, r5
 8017378:	d311      	bcc.n	801739e <rmw_time_total_nsec+0x42>
 801737a:	4c10      	ldr	r4, [pc, #64]	; (80173bc <rmw_time_total_nsec+0x60>)
 801737c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017380:	fba3 3204 	umull	r3, r2, r3, r4
 8017384:	fb04 2205 	mla	r2, r4, r5, r2
 8017388:	43dd      	mvns	r5, r3
 801738a:	1a8c      	subs	r4, r1, r2
 801738c:	4285      	cmp	r5, r0
 801738e:	41b4      	sbcs	r4, r6
 8017390:	d30c      	bcc.n	80173ac <rmw_time_total_nsec+0x50>
 8017392:	1818      	adds	r0, r3, r0
 8017394:	eb42 0106 	adc.w	r1, r2, r6
 8017398:	b005      	add	sp, #20
 801739a:	bc70      	pop	{r4, r5, r6}
 801739c:	4770      	bx	lr
 801739e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80173a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80173a6:	b005      	add	sp, #20
 80173a8:	bc70      	pop	{r4, r5, r6}
 80173aa:	4770      	bx	lr
 80173ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80173b0:	b005      	add	sp, #20
 80173b2:	bc70      	pop	{r4, r5, r6}
 80173b4:	4770      	bx	lr
 80173b6:	bf00      	nop
 80173b8:	25c17d04 	.word	0x25c17d04
 80173bc:	3b9aca00 	.word	0x3b9aca00

080173c0 <rmw_get_zero_initialized_message_info>:
 80173c0:	b510      	push	{r4, lr}
 80173c2:	4604      	mov	r4, r0
 80173c4:	2238      	movs	r2, #56	; 0x38
 80173c6:	2100      	movs	r1, #0
 80173c8:	f004 fa5c 	bl	801b884 <memset>
 80173cc:	4620      	mov	r0, r4
 80173ce:	bd10      	pop	{r4, pc}

080173d0 <rmw_validate_full_topic_name>:
 80173d0:	2800      	cmp	r0, #0
 80173d2:	d05d      	beq.n	8017490 <rmw_validate_full_topic_name+0xc0>
 80173d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173d8:	460d      	mov	r5, r1
 80173da:	2900      	cmp	r1, #0
 80173dc:	d05a      	beq.n	8017494 <rmw_validate_full_topic_name+0xc4>
 80173de:	4604      	mov	r4, r0
 80173e0:	4616      	mov	r6, r2
 80173e2:	f7e8 ff8d 	bl	8000300 <strlen>
 80173e6:	b150      	cbz	r0, 80173fe <rmw_validate_full_topic_name+0x2e>
 80173e8:	7823      	ldrb	r3, [r4, #0]
 80173ea:	2b2f      	cmp	r3, #47	; 0x2f
 80173ec:	d00e      	beq.n	801740c <rmw_validate_full_topic_name+0x3c>
 80173ee:	2302      	movs	r3, #2
 80173f0:	602b      	str	r3, [r5, #0]
 80173f2:	b146      	cbz	r6, 8017406 <rmw_validate_full_topic_name+0x36>
 80173f4:	2300      	movs	r3, #0
 80173f6:	4618      	mov	r0, r3
 80173f8:	6033      	str	r3, [r6, #0]
 80173fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173fe:	2301      	movs	r3, #1
 8017400:	602b      	str	r3, [r5, #0]
 8017402:	2e00      	cmp	r6, #0
 8017404:	d1f6      	bne.n	80173f4 <rmw_validate_full_topic_name+0x24>
 8017406:	2000      	movs	r0, #0
 8017408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801740c:	1e43      	subs	r3, r0, #1
 801740e:	5ce2      	ldrb	r2, [r4, r3]
 8017410:	2a2f      	cmp	r2, #47	; 0x2f
 8017412:	d041      	beq.n	8017498 <rmw_validate_full_topic_name+0xc8>
 8017414:	1e62      	subs	r2, r4, #1
 8017416:	f1c4 0e01 	rsb	lr, r4, #1
 801741a:	eb02 0800 	add.w	r8, r2, r0
 801741e:	eb0e 0702 	add.w	r7, lr, r2
 8017422:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8017426:	f023 0120 	bic.w	r1, r3, #32
 801742a:	f1a3 0c2f 	sub.w	ip, r3, #47	; 0x2f
 801742e:	3941      	subs	r1, #65	; 0x41
 8017430:	2919      	cmp	r1, #25
 8017432:	d90f      	bls.n	8017454 <rmw_validate_full_topic_name+0x84>
 8017434:	f1bc 0f0a 	cmp.w	ip, #10
 8017438:	d90c      	bls.n	8017454 <rmw_validate_full_topic_name+0x84>
 801743a:	f1a3 035f 	sub.w	r3, r3, #95	; 0x5f
 801743e:	fab3 f383 	clz	r3, r3
 8017442:	095b      	lsrs	r3, r3, #5
 8017444:	b933      	cbnz	r3, 8017454 <rmw_validate_full_topic_name+0x84>
 8017446:	2204      	movs	r2, #4
 8017448:	602a      	str	r2, [r5, #0]
 801744a:	2e00      	cmp	r6, #0
 801744c:	d0db      	beq.n	8017406 <rmw_validate_full_topic_name+0x36>
 801744e:	4618      	mov	r0, r3
 8017450:	6037      	str	r7, [r6, #0]
 8017452:	e7d2      	b.n	80173fa <rmw_validate_full_topic_name+0x2a>
 8017454:	4542      	cmp	r2, r8
 8017456:	d1e2      	bne.n	801741e <rmw_validate_full_topic_name+0x4e>
 8017458:	2301      	movs	r3, #1
 801745a:	4f1a      	ldr	r7, [pc, #104]	; (80174c4 <rmw_validate_full_topic_name+0xf4>)
 801745c:	e004      	b.n	8017468 <rmw_validate_full_topic_name+0x98>
 801745e:	4298      	cmp	r0, r3
 8017460:	f104 0401 	add.w	r4, r4, #1
 8017464:	4613      	mov	r3, r2
 8017466:	d91c      	bls.n	80174a2 <rmw_validate_full_topic_name+0xd2>
 8017468:	4298      	cmp	r0, r3
 801746a:	f103 0201 	add.w	r2, r3, #1
 801746e:	d0f6      	beq.n	801745e <rmw_validate_full_topic_name+0x8e>
 8017470:	7821      	ldrb	r1, [r4, #0]
 8017472:	292f      	cmp	r1, #47	; 0x2f
 8017474:	d1f3      	bne.n	801745e <rmw_validate_full_topic_name+0x8e>
 8017476:	7861      	ldrb	r1, [r4, #1]
 8017478:	292f      	cmp	r1, #47	; 0x2f
 801747a:	d01e      	beq.n	80174ba <rmw_validate_full_topic_name+0xea>
 801747c:	5dc9      	ldrb	r1, [r1, r7]
 801747e:	0749      	lsls	r1, r1, #29
 8017480:	d5ed      	bpl.n	801745e <rmw_validate_full_topic_name+0x8e>
 8017482:	2206      	movs	r2, #6
 8017484:	602a      	str	r2, [r5, #0]
 8017486:	2e00      	cmp	r6, #0
 8017488:	d0bd      	beq.n	8017406 <rmw_validate_full_topic_name+0x36>
 801748a:	2000      	movs	r0, #0
 801748c:	6033      	str	r3, [r6, #0]
 801748e:	e7b4      	b.n	80173fa <rmw_validate_full_topic_name+0x2a>
 8017490:	200b      	movs	r0, #11
 8017492:	4770      	bx	lr
 8017494:	200b      	movs	r0, #11
 8017496:	e7b0      	b.n	80173fa <rmw_validate_full_topic_name+0x2a>
 8017498:	2203      	movs	r2, #3
 801749a:	602a      	str	r2, [r5, #0]
 801749c:	2e00      	cmp	r6, #0
 801749e:	d1f4      	bne.n	801748a <rmw_validate_full_topic_name+0xba>
 80174a0:	e7b1      	b.n	8017406 <rmw_validate_full_topic_name+0x36>
 80174a2:	28f7      	cmp	r0, #247	; 0xf7
 80174a4:	d803      	bhi.n	80174ae <rmw_validate_full_topic_name+0xde>
 80174a6:	2300      	movs	r3, #0
 80174a8:	4618      	mov	r0, r3
 80174aa:	602b      	str	r3, [r5, #0]
 80174ac:	e7a5      	b.n	80173fa <rmw_validate_full_topic_name+0x2a>
 80174ae:	2307      	movs	r3, #7
 80174b0:	602b      	str	r3, [r5, #0]
 80174b2:	2e00      	cmp	r6, #0
 80174b4:	d0a7      	beq.n	8017406 <rmw_validate_full_topic_name+0x36>
 80174b6:	23f6      	movs	r3, #246	; 0xf6
 80174b8:	e7e7      	b.n	801748a <rmw_validate_full_topic_name+0xba>
 80174ba:	2205      	movs	r2, #5
 80174bc:	602a      	str	r2, [r5, #0]
 80174be:	2e00      	cmp	r6, #0
 80174c0:	d1e3      	bne.n	801748a <rmw_validate_full_topic_name+0xba>
 80174c2:	e7a0      	b.n	8017406 <rmw_validate_full_topic_name+0x36>
 80174c4:	0801e568 	.word	0x0801e568

080174c8 <rmw_validate_namespace_with_size>:
 80174c8:	2800      	cmp	r0, #0
 80174ca:	d043      	beq.n	8017554 <rmw_validate_namespace_with_size+0x8c>
 80174cc:	b570      	push	{r4, r5, r6, lr}
 80174ce:	4614      	mov	r4, r2
 80174d0:	b0c2      	sub	sp, #264	; 0x108
 80174d2:	b32a      	cbz	r2, 8017520 <rmw_validate_namespace_with_size+0x58>
 80174d4:	2901      	cmp	r1, #1
 80174d6:	460d      	mov	r5, r1
 80174d8:	461e      	mov	r6, r3
 80174da:	d102      	bne.n	80174e2 <rmw_validate_namespace_with_size+0x1a>
 80174dc:	7803      	ldrb	r3, [r0, #0]
 80174de:	2b2f      	cmp	r3, #47	; 0x2f
 80174e0:	d012      	beq.n	8017508 <rmw_validate_namespace_with_size+0x40>
 80174e2:	aa01      	add	r2, sp, #4
 80174e4:	4669      	mov	r1, sp
 80174e6:	f7ff ff73 	bl	80173d0 <rmw_validate_full_topic_name>
 80174ea:	b980      	cbnz	r0, 801750e <rmw_validate_namespace_with_size+0x46>
 80174ec:	9a00      	ldr	r2, [sp, #0]
 80174ee:	b14a      	cbz	r2, 8017504 <rmw_validate_namespace_with_size+0x3c>
 80174f0:	2a07      	cmp	r2, #7
 80174f2:	d007      	beq.n	8017504 <rmw_validate_namespace_with_size+0x3c>
 80174f4:	1e53      	subs	r3, r2, #1
 80174f6:	2b05      	cmp	r3, #5
 80174f8:	d82e      	bhi.n	8017558 <rmw_validate_namespace_with_size+0x90>
 80174fa:	e8df f003 	tbb	[pc, r3]
 80174fe:	1f1c      	.short	0x1f1c
 8017500:	14282522 	.word	0x14282522
 8017504:	2df5      	cmp	r5, #245	; 0xf5
 8017506:	d804      	bhi.n	8017512 <rmw_validate_namespace_with_size+0x4a>
 8017508:	2300      	movs	r3, #0
 801750a:	4618      	mov	r0, r3
 801750c:	6023      	str	r3, [r4, #0]
 801750e:	b042      	add	sp, #264	; 0x108
 8017510:	bd70      	pop	{r4, r5, r6, pc}
 8017512:	2307      	movs	r3, #7
 8017514:	6023      	str	r3, [r4, #0]
 8017516:	2e00      	cmp	r6, #0
 8017518:	d0f9      	beq.n	801750e <rmw_validate_namespace_with_size+0x46>
 801751a:	23f4      	movs	r3, #244	; 0xf4
 801751c:	6033      	str	r3, [r6, #0]
 801751e:	e7f6      	b.n	801750e <rmw_validate_namespace_with_size+0x46>
 8017520:	200b      	movs	r0, #11
 8017522:	b042      	add	sp, #264	; 0x108
 8017524:	bd70      	pop	{r4, r5, r6, pc}
 8017526:	2306      	movs	r3, #6
 8017528:	6023      	str	r3, [r4, #0]
 801752a:	2e00      	cmp	r6, #0
 801752c:	d0ef      	beq.n	801750e <rmw_validate_namespace_with_size+0x46>
 801752e:	9b01      	ldr	r3, [sp, #4]
 8017530:	6033      	str	r3, [r6, #0]
 8017532:	b042      	add	sp, #264	; 0x108
 8017534:	bd70      	pop	{r4, r5, r6, pc}
 8017536:	2301      	movs	r3, #1
 8017538:	6023      	str	r3, [r4, #0]
 801753a:	e7f6      	b.n	801752a <rmw_validate_namespace_with_size+0x62>
 801753c:	2302      	movs	r3, #2
 801753e:	6023      	str	r3, [r4, #0]
 8017540:	e7f3      	b.n	801752a <rmw_validate_namespace_with_size+0x62>
 8017542:	2303      	movs	r3, #3
 8017544:	6023      	str	r3, [r4, #0]
 8017546:	e7f0      	b.n	801752a <rmw_validate_namespace_with_size+0x62>
 8017548:	2304      	movs	r3, #4
 801754a:	6023      	str	r3, [r4, #0]
 801754c:	e7ed      	b.n	801752a <rmw_validate_namespace_with_size+0x62>
 801754e:	2305      	movs	r3, #5
 8017550:	6023      	str	r3, [r4, #0]
 8017552:	e7ea      	b.n	801752a <rmw_validate_namespace_with_size+0x62>
 8017554:	200b      	movs	r0, #11
 8017556:	4770      	bx	lr
 8017558:	4613      	mov	r3, r2
 801755a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801755e:	4a03      	ldr	r2, [pc, #12]	; (801756c <rmw_validate_namespace_with_size+0xa4>)
 8017560:	a802      	add	r0, sp, #8
 8017562:	f7ff fcdd 	bl	8016f20 <rcutils_snprintf>
 8017566:	2001      	movs	r0, #1
 8017568:	e7d1      	b.n	801750e <rmw_validate_namespace_with_size+0x46>
 801756a:	bf00      	nop
 801756c:	0801dc58 	.word	0x0801dc58

08017570 <rmw_validate_namespace>:
 8017570:	b168      	cbz	r0, 801758e <rmw_validate_namespace+0x1e>
 8017572:	b570      	push	{r4, r5, r6, lr}
 8017574:	460d      	mov	r5, r1
 8017576:	4616      	mov	r6, r2
 8017578:	4604      	mov	r4, r0
 801757a:	f7e8 fec1 	bl	8000300 <strlen>
 801757e:	4633      	mov	r3, r6
 8017580:	4601      	mov	r1, r0
 8017582:	462a      	mov	r2, r5
 8017584:	4620      	mov	r0, r4
 8017586:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801758a:	f7ff bf9d 	b.w	80174c8 <rmw_validate_namespace_with_size>
 801758e:	200b      	movs	r0, #11
 8017590:	4770      	bx	lr
 8017592:	bf00      	nop

08017594 <rmw_namespace_validation_result_string>:
 8017594:	2807      	cmp	r0, #7
 8017596:	d803      	bhi.n	80175a0 <rmw_namespace_validation_result_string+0xc>
 8017598:	4b02      	ldr	r3, [pc, #8]	; (80175a4 <rmw_namespace_validation_result_string+0x10>)
 801759a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801759e:	4770      	bx	lr
 80175a0:	4801      	ldr	r0, [pc, #4]	; (80175a8 <rmw_namespace_validation_result_string+0x14>)
 80175a2:	4770      	bx	lr
 80175a4:	0801de50 	.word	0x0801de50
 80175a8:	0801dca8 	.word	0x0801dca8

080175ac <rmw_validate_node_name>:
 80175ac:	2800      	cmp	r0, #0
 80175ae:	d042      	beq.n	8017636 <rmw_validate_node_name+0x8a>
 80175b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175b4:	460d      	mov	r5, r1
 80175b6:	2900      	cmp	r1, #0
 80175b8:	d03f      	beq.n	801763a <rmw_validate_node_name+0x8e>
 80175ba:	4604      	mov	r4, r0
 80175bc:	4616      	mov	r6, r2
 80175be:	f7e8 fe9f 	bl	8000300 <strlen>
 80175c2:	b310      	cbz	r0, 801760a <rmw_validate_node_name+0x5e>
 80175c4:	1e63      	subs	r3, r4, #1
 80175c6:	f1c4 0101 	rsb	r1, r4, #1
 80175ca:	eb03 0800 	add.w	r8, r3, r0
 80175ce:	18cf      	adds	r7, r1, r3
 80175d0:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 80175d4:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 80175d8:	f02e 0c20 	bic.w	ip, lr, #32
 80175dc:	2a09      	cmp	r2, #9
 80175de:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 80175e2:	d905      	bls.n	80175f0 <rmw_validate_node_name+0x44>
 80175e4:	f1bc 0f19 	cmp.w	ip, #25
 80175e8:	d902      	bls.n	80175f0 <rmw_validate_node_name+0x44>
 80175ea:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 80175ee:	d114      	bne.n	801761a <rmw_validate_node_name+0x6e>
 80175f0:	4598      	cmp	r8, r3
 80175f2:	d1ec      	bne.n	80175ce <rmw_validate_node_name+0x22>
 80175f4:	7822      	ldrb	r2, [r4, #0]
 80175f6:	4b16      	ldr	r3, [pc, #88]	; (8017650 <rmw_validate_node_name+0xa4>)
 80175f8:	5cd3      	ldrb	r3, [r2, r3]
 80175fa:	f013 0304 	ands.w	r3, r3, #4
 80175fe:	d113      	bne.n	8017628 <rmw_validate_node_name+0x7c>
 8017600:	28ff      	cmp	r0, #255	; 0xff
 8017602:	d81c      	bhi.n	801763e <rmw_validate_node_name+0x92>
 8017604:	4618      	mov	r0, r3
 8017606:	602b      	str	r3, [r5, #0]
 8017608:	e00c      	b.n	8017624 <rmw_validate_node_name+0x78>
 801760a:	2301      	movs	r3, #1
 801760c:	602b      	str	r3, [r5, #0]
 801760e:	b17e      	cbz	r6, 8017630 <rmw_validate_node_name+0x84>
 8017610:	2300      	movs	r3, #0
 8017612:	4618      	mov	r0, r3
 8017614:	6033      	str	r3, [r6, #0]
 8017616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801761a:	2302      	movs	r3, #2
 801761c:	602b      	str	r3, [r5, #0]
 801761e:	b13e      	cbz	r6, 8017630 <rmw_validate_node_name+0x84>
 8017620:	2000      	movs	r0, #0
 8017622:	6037      	str	r7, [r6, #0]
 8017624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017628:	2303      	movs	r3, #3
 801762a:	602b      	str	r3, [r5, #0]
 801762c:	2e00      	cmp	r6, #0
 801762e:	d1ef      	bne.n	8017610 <rmw_validate_node_name+0x64>
 8017630:	2000      	movs	r0, #0
 8017632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017636:	200b      	movs	r0, #11
 8017638:	4770      	bx	lr
 801763a:	200b      	movs	r0, #11
 801763c:	e7f2      	b.n	8017624 <rmw_validate_node_name+0x78>
 801763e:	2204      	movs	r2, #4
 8017640:	602a      	str	r2, [r5, #0]
 8017642:	2e00      	cmp	r6, #0
 8017644:	d0f4      	beq.n	8017630 <rmw_validate_node_name+0x84>
 8017646:	22fe      	movs	r2, #254	; 0xfe
 8017648:	4618      	mov	r0, r3
 801764a:	6032      	str	r2, [r6, #0]
 801764c:	e7ea      	b.n	8017624 <rmw_validate_node_name+0x78>
 801764e:	bf00      	nop
 8017650:	0801e568 	.word	0x0801e568

08017654 <rmw_node_name_validation_result_string>:
 8017654:	2804      	cmp	r0, #4
 8017656:	d803      	bhi.n	8017660 <rmw_node_name_validation_result_string+0xc>
 8017658:	4b02      	ldr	r3, [pc, #8]	; (8017664 <rmw_node_name_validation_result_string+0x10>)
 801765a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801765e:	4770      	bx	lr
 8017660:	4801      	ldr	r0, [pc, #4]	; (8017668 <rmw_node_name_validation_result_string+0x14>)
 8017662:	4770      	bx	lr
 8017664:	0801df5c 	.word	0x0801df5c
 8017668:	0801de70 	.word	0x0801de70

0801766c <get_memory>:
 801766c:	4603      	mov	r3, r0
 801766e:	6840      	ldr	r0, [r0, #4]
 8017670:	b158      	cbz	r0, 801768a <get_memory+0x1e>
 8017672:	6842      	ldr	r2, [r0, #4]
 8017674:	605a      	str	r2, [r3, #4]
 8017676:	b10a      	cbz	r2, 801767c <get_memory+0x10>
 8017678:	2100      	movs	r1, #0
 801767a:	6011      	str	r1, [r2, #0]
 801767c:	681a      	ldr	r2, [r3, #0]
 801767e:	6042      	str	r2, [r0, #4]
 8017680:	b102      	cbz	r2, 8017684 <get_memory+0x18>
 8017682:	6010      	str	r0, [r2, #0]
 8017684:	2200      	movs	r2, #0
 8017686:	6002      	str	r2, [r0, #0]
 8017688:	6018      	str	r0, [r3, #0]
 801768a:	4770      	bx	lr

0801768c <put_memory>:
 801768c:	680b      	ldr	r3, [r1, #0]
 801768e:	b10b      	cbz	r3, 8017694 <put_memory+0x8>
 8017690:	684a      	ldr	r2, [r1, #4]
 8017692:	605a      	str	r2, [r3, #4]
 8017694:	684a      	ldr	r2, [r1, #4]
 8017696:	b102      	cbz	r2, 801769a <put_memory+0xe>
 8017698:	6013      	str	r3, [r2, #0]
 801769a:	6803      	ldr	r3, [r0, #0]
 801769c:	428b      	cmp	r3, r1
 801769e:	6843      	ldr	r3, [r0, #4]
 80176a0:	bf08      	it	eq
 80176a2:	6002      	streq	r2, [r0, #0]
 80176a4:	604b      	str	r3, [r1, #4]
 80176a6:	b103      	cbz	r3, 80176aa <put_memory+0x1e>
 80176a8:	6019      	str	r1, [r3, #0]
 80176aa:	2300      	movs	r3, #0
 80176ac:	600b      	str	r3, [r1, #0]
 80176ae:	6041      	str	r1, [r0, #4]
 80176b0:	4770      	bx	lr
 80176b2:	bf00      	nop

080176b4 <rmw_destroy_client>:
 80176b4:	b570      	push	{r4, r5, r6, lr}
 80176b6:	b128      	cbz	r0, 80176c4 <rmw_destroy_client+0x10>
 80176b8:	4604      	mov	r4, r0
 80176ba:	6800      	ldr	r0, [r0, #0]
 80176bc:	460d      	mov	r5, r1
 80176be:	f7f6 fd93 	bl	800e1e8 <is_uxrce_rmw_identifier_valid>
 80176c2:	b910      	cbnz	r0, 80176ca <rmw_destroy_client+0x16>
 80176c4:	2401      	movs	r4, #1
 80176c6:	4620      	mov	r0, r4
 80176c8:	bd70      	pop	{r4, r5, r6, pc}
 80176ca:	6863      	ldr	r3, [r4, #4]
 80176cc:	2b00      	cmp	r3, #0
 80176ce:	d0f9      	beq.n	80176c4 <rmw_destroy_client+0x10>
 80176d0:	2d00      	cmp	r5, #0
 80176d2:	d0f7      	beq.n	80176c4 <rmw_destroy_client+0x10>
 80176d4:	6828      	ldr	r0, [r5, #0]
 80176d6:	f7f6 fd87 	bl	800e1e8 <is_uxrce_rmw_identifier_valid>
 80176da:	2800      	cmp	r0, #0
 80176dc:	d0f2      	beq.n	80176c4 <rmw_destroy_client+0x10>
 80176de:	686e      	ldr	r6, [r5, #4]
 80176e0:	2e00      	cmp	r6, #0
 80176e2:	d0ef      	beq.n	80176c4 <rmw_destroy_client+0x10>
 80176e4:	6864      	ldr	r4, [r4, #4]
 80176e6:	6932      	ldr	r2, [r6, #16]
 80176e8:	6920      	ldr	r0, [r4, #16]
 80176ea:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80176ee:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80176f2:	6819      	ldr	r1, [r3, #0]
 80176f4:	f002 f842 	bl	801977c <uxr_buffer_cancel_data>
 80176f8:	4602      	mov	r2, r0
 80176fa:	6920      	ldr	r0, [r4, #16]
 80176fc:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8017700:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8017704:	f7f6 fc5e 	bl	800dfc4 <run_xrce_session>
 8017708:	6920      	ldr	r0, [r4, #16]
 801770a:	6932      	ldr	r2, [r6, #16]
 801770c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8017710:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017714:	6819      	ldr	r1, [r3, #0]
 8017716:	f7f8 fd2d 	bl	8010174 <uxr_buffer_delete_entity>
 801771a:	4602      	mov	r2, r0
 801771c:	6920      	ldr	r0, [r4, #16]
 801771e:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8017722:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8017726:	f7f6 fc4d 	bl	800dfc4 <run_xrce_session>
 801772a:	4603      	mov	r3, r0
 801772c:	4628      	mov	r0, r5
 801772e:	2b00      	cmp	r3, #0
 8017730:	bf14      	ite	ne
 8017732:	2400      	movne	r4, #0
 8017734:	2402      	moveq	r4, #2
 8017736:	f7f6 fb21 	bl	800dd7c <rmw_uxrce_fini_client_memory>
 801773a:	e7c4      	b.n	80176c6 <rmw_destroy_client+0x12>

0801773c <rmw_get_gid_for_client>:
 801773c:	b1b9      	cbz	r1, 801776e <rmw_get_gid_for_client+0x32>
 801773e:	b538      	push	{r3, r4, r5, lr}
 8017740:	4605      	mov	r5, r0
 8017742:	b180      	cbz	r0, 8017766 <rmw_get_gid_for_client+0x2a>
 8017744:	6800      	ldr	r0, [r0, #0]
 8017746:	460c      	mov	r4, r1
 8017748:	b120      	cbz	r0, 8017754 <rmw_get_gid_for_client+0x18>
 801774a:	4b0a      	ldr	r3, [pc, #40]	; (8017774 <rmw_get_gid_for_client+0x38>)
 801774c:	6819      	ldr	r1, [r3, #0]
 801774e:	f7e8 fd77 	bl	8000240 <strcmp>
 8017752:	b950      	cbnz	r0, 801776a <rmw_get_gid_for_client+0x2e>
 8017754:	686b      	ldr	r3, [r5, #4]
 8017756:	2000      	movs	r0, #0
 8017758:	6060      	str	r0, [r4, #4]
 801775a:	60a0      	str	r0, [r4, #8]
 801775c:	60e0      	str	r0, [r4, #12]
 801775e:	6120      	str	r0, [r4, #16]
 8017760:	691b      	ldr	r3, [r3, #16]
 8017762:	6063      	str	r3, [r4, #4]
 8017764:	bd38      	pop	{r3, r4, r5, pc}
 8017766:	200b      	movs	r0, #11
 8017768:	bd38      	pop	{r3, r4, r5, pc}
 801776a:	200c      	movs	r0, #12
 801776c:	bd38      	pop	{r3, r4, r5, pc}
 801776e:	200b      	movs	r0, #11
 8017770:	4770      	bx	lr
 8017772:	bf00      	nop
 8017774:	0801df88 	.word	0x0801df88

08017778 <rmw_get_implementation_identifier>:
 8017778:	4b01      	ldr	r3, [pc, #4]	; (8017780 <rmw_get_implementation_identifier+0x8>)
 801777a:	6818      	ldr	r0, [r3, #0]
 801777c:	4770      	bx	lr
 801777e:	bf00      	nop
 8017780:	0801df88 	.word	0x0801df88

08017784 <rmw_init_options_init>:
 8017784:	b084      	sub	sp, #16
 8017786:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017788:	b083      	sub	sp, #12
 801778a:	ad09      	add	r5, sp, #36	; 0x24
 801778c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8017790:	b130      	cbz	r0, 80177a0 <rmw_init_options_init+0x1c>
 8017792:	4604      	mov	r4, r0
 8017794:	4628      	mov	r0, r5
 8017796:	f7f5 fed5 	bl	800d544 <rcutils_allocator_is_valid>
 801779a:	b108      	cbz	r0, 80177a0 <rmw_init_options_init+0x1c>
 801779c:	68a6      	ldr	r6, [r4, #8]
 801779e:	b12e      	cbz	r6, 80177ac <rmw_init_options_init+0x28>
 80177a0:	200b      	movs	r0, #11
 80177a2:	b003      	add	sp, #12
 80177a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80177a8:	b004      	add	sp, #16
 80177aa:	4770      	bx	lr
 80177ac:	2200      	movs	r2, #0
 80177ae:	2300      	movs	r3, #0
 80177b0:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 80177b4:	f8df e098 	ldr.w	lr, [pc, #152]	; 8017850 <rmw_init_options_init+0xcc>
 80177b8:	466f      	mov	r7, sp
 80177ba:	e9c4 2300 	strd	r2, r3, [r4]
 80177be:	4b20      	ldr	r3, [pc, #128]	; (8017840 <rmw_init_options_init+0xbc>)
 80177c0:	681b      	ldr	r3, [r3, #0]
 80177c2:	60a3      	str	r3, [r4, #8]
 80177c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80177c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80177ca:	682b      	ldr	r3, [r5, #0]
 80177cc:	4638      	mov	r0, r7
 80177ce:	f8cc 3000 	str.w	r3, [ip]
 80177d2:	f8c4 e03c 	str.w	lr, [r4, #60]	; 0x3c
 80177d6:	60e6      	str	r6, [r4, #12]
 80177d8:	f7ff fd66 	bl	80172a8 <rmw_get_default_security_options>
 80177dc:	f104 0310 	add.w	r3, r4, #16
 80177e0:	2203      	movs	r2, #3
 80177e2:	e897 0003 	ldmia.w	r7, {r0, r1}
 80177e6:	e883 0003 	stmia.w	r3, {r0, r1}
 80177ea:	4816      	ldr	r0, [pc, #88]	; (8017844 <rmw_init_options_init+0xc0>)
 80177ec:	4916      	ldr	r1, [pc, #88]	; (8017848 <rmw_init_options_init+0xc4>)
 80177ee:	7626      	strb	r6, [r4, #24]
 80177f0:	f7f6 fa04 	bl	800dbfc <rmw_uxrce_init_init_options_impl_memory>
 80177f4:	4813      	ldr	r0, [pc, #76]	; (8017844 <rmw_init_options_init+0xc0>)
 80177f6:	f7ff ff39 	bl	801766c <get_memory>
 80177fa:	b1f0      	cbz	r0, 801783a <rmw_init_options_init+0xb6>
 80177fc:	4a13      	ldr	r2, [pc, #76]	; (801784c <rmw_init_options_init+0xc8>)
 80177fe:	6883      	ldr	r3, [r0, #8]
 8017800:	6851      	ldr	r1, [r2, #4]
 8017802:	6563      	str	r3, [r4, #84]	; 0x54
 8017804:	7810      	ldrb	r0, [r2, #0]
 8017806:	6159      	str	r1, [r3, #20]
 8017808:	68d1      	ldr	r1, [r2, #12]
 801780a:	7418      	strb	r0, [r3, #16]
 801780c:	61d9      	str	r1, [r3, #28]
 801780e:	6911      	ldr	r1, [r2, #16]
 8017810:	6219      	str	r1, [r3, #32]
 8017812:	6951      	ldr	r1, [r2, #20]
 8017814:	6892      	ldr	r2, [r2, #8]
 8017816:	6259      	str	r1, [r3, #36]	; 0x24
 8017818:	619a      	str	r2, [r3, #24]
 801781a:	f7fa f8a7 	bl	801196c <uxr_nanos>
 801781e:	f003 fd75 	bl	801b30c <srand>
 8017822:	f003 fda1 	bl	801b368 <rand>
 8017826:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8017828:	6298      	str	r0, [r3, #40]	; 0x28
 801782a:	2800      	cmp	r0, #0
 801782c:	d0f9      	beq.n	8017822 <rmw_init_options_init+0x9e>
 801782e:	2000      	movs	r0, #0
 8017830:	b003      	add	sp, #12
 8017832:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017836:	b004      	add	sp, #16
 8017838:	4770      	bx	lr
 801783a:	2001      	movs	r0, #1
 801783c:	e7b1      	b.n	80177a2 <rmw_init_options_init+0x1e>
 801783e:	bf00      	nop
 8017840:	0801df88 	.word	0x0801df88
 8017844:	2001013c 	.word	0x2001013c
 8017848:	2000b910 	.word	0x2000b910
 801784c:	2000b79c 	.word	0x2000b79c
 8017850:	0801d9cc 	.word	0x0801d9cc

08017854 <rmw_init_options_copy>:
 8017854:	b570      	push	{r4, r5, r6, lr}
 8017856:	b158      	cbz	r0, 8017870 <rmw_init_options_copy+0x1c>
 8017858:	460d      	mov	r5, r1
 801785a:	b149      	cbz	r1, 8017870 <rmw_init_options_copy+0x1c>
 801785c:	4604      	mov	r4, r0
 801785e:	6880      	ldr	r0, [r0, #8]
 8017860:	b120      	cbz	r0, 801786c <rmw_init_options_copy+0x18>
 8017862:	4b13      	ldr	r3, [pc, #76]	; (80178b0 <rmw_init_options_copy+0x5c>)
 8017864:	6819      	ldr	r1, [r3, #0]
 8017866:	f7e8 fceb 	bl	8000240 <strcmp>
 801786a:	b9d8      	cbnz	r0, 80178a4 <rmw_init_options_copy+0x50>
 801786c:	68ae      	ldr	r6, [r5, #8]
 801786e:	b116      	cbz	r6, 8017876 <rmw_init_options_copy+0x22>
 8017870:	260b      	movs	r6, #11
 8017872:	4630      	mov	r0, r6
 8017874:	bd70      	pop	{r4, r5, r6, pc}
 8017876:	2258      	movs	r2, #88	; 0x58
 8017878:	4621      	mov	r1, r4
 801787a:	4628      	mov	r0, r5
 801787c:	f004 f933 	bl	801bae6 <memcpy>
 8017880:	480c      	ldr	r0, [pc, #48]	; (80178b4 <rmw_init_options_copy+0x60>)
 8017882:	f7ff fef3 	bl	801766c <get_memory>
 8017886:	b180      	cbz	r0, 80178aa <rmw_init_options_copy+0x56>
 8017888:	6883      	ldr	r3, [r0, #8]
 801788a:	656b      	str	r3, [r5, #84]	; 0x54
 801788c:	6d65      	ldr	r5, [r4, #84]	; 0x54
 801788e:	f103 0410 	add.w	r4, r3, #16
 8017892:	3510      	adds	r5, #16
 8017894:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017896:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017898:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801789c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80178a0:	4630      	mov	r0, r6
 80178a2:	bd70      	pop	{r4, r5, r6, pc}
 80178a4:	260c      	movs	r6, #12
 80178a6:	4630      	mov	r0, r6
 80178a8:	bd70      	pop	{r4, r5, r6, pc}
 80178aa:	2601      	movs	r6, #1
 80178ac:	e7e1      	b.n	8017872 <rmw_init_options_copy+0x1e>
 80178ae:	bf00      	nop
 80178b0:	0801df88 	.word	0x0801df88
 80178b4:	2001013c 	.word	0x2001013c

080178b8 <rmw_init_options_fini>:
 80178b8:	b368      	cbz	r0, 8017916 <rmw_init_options_fini+0x5e>
 80178ba:	b510      	push	{r4, lr}
 80178bc:	4604      	mov	r4, r0
 80178be:	b096      	sub	sp, #88	; 0x58
 80178c0:	3040      	adds	r0, #64	; 0x40
 80178c2:	f7f5 fe3f 	bl	800d544 <rcutils_allocator_is_valid>
 80178c6:	b1f0      	cbz	r0, 8017906 <rmw_init_options_fini+0x4e>
 80178c8:	68a0      	ldr	r0, [r4, #8]
 80178ca:	b120      	cbz	r0, 80178d6 <rmw_init_options_fini+0x1e>
 80178cc:	4b13      	ldr	r3, [pc, #76]	; (801791c <rmw_init_options_fini+0x64>)
 80178ce:	6819      	ldr	r1, [r3, #0]
 80178d0:	f7e8 fcb6 	bl	8000240 <strcmp>
 80178d4:	b9e8      	cbnz	r0, 8017912 <rmw_init_options_fini+0x5a>
 80178d6:	4b12      	ldr	r3, [pc, #72]	; (8017920 <rmw_init_options_fini+0x68>)
 80178d8:	6819      	ldr	r1, [r3, #0]
 80178da:	b1b9      	cbz	r1, 801790c <rmw_init_options_fini+0x54>
 80178dc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80178de:	e001      	b.n	80178e4 <rmw_init_options_fini+0x2c>
 80178e0:	6849      	ldr	r1, [r1, #4]
 80178e2:	b199      	cbz	r1, 801790c <rmw_init_options_fini+0x54>
 80178e4:	688b      	ldr	r3, [r1, #8]
 80178e6:	429a      	cmp	r2, r3
 80178e8:	d1fa      	bne.n	80178e0 <rmw_init_options_fini+0x28>
 80178ea:	480d      	ldr	r0, [pc, #52]	; (8017920 <rmw_init_options_fini+0x68>)
 80178ec:	f7ff fece 	bl	801768c <put_memory>
 80178f0:	4668      	mov	r0, sp
 80178f2:	f7ff fcc5 	bl	8017280 <rmw_get_zero_initialized_init_options>
 80178f6:	2258      	movs	r2, #88	; 0x58
 80178f8:	4669      	mov	r1, sp
 80178fa:	4620      	mov	r0, r4
 80178fc:	f004 f8f3 	bl	801bae6 <memcpy>
 8017900:	2000      	movs	r0, #0
 8017902:	b016      	add	sp, #88	; 0x58
 8017904:	bd10      	pop	{r4, pc}
 8017906:	200b      	movs	r0, #11
 8017908:	b016      	add	sp, #88	; 0x58
 801790a:	bd10      	pop	{r4, pc}
 801790c:	2001      	movs	r0, #1
 801790e:	b016      	add	sp, #88	; 0x58
 8017910:	bd10      	pop	{r4, pc}
 8017912:	200c      	movs	r0, #12
 8017914:	e7f5      	b.n	8017902 <rmw_init_options_fini+0x4a>
 8017916:	200b      	movs	r0, #11
 8017918:	4770      	bx	lr
 801791a:	bf00      	nop
 801791c:	0801df88 	.word	0x0801df88
 8017920:	2001013c 	.word	0x2001013c

08017924 <rmw_init>:
 8017924:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017928:	b083      	sub	sp, #12
 801792a:	2800      	cmp	r0, #0
 801792c:	f000 80d3 	beq.w	8017ad6 <rmw_init+0x1b2>
 8017930:	460e      	mov	r6, r1
 8017932:	2900      	cmp	r1, #0
 8017934:	f000 80cf 	beq.w	8017ad6 <rmw_init+0x1b2>
 8017938:	6d43      	ldr	r3, [r0, #84]	; 0x54
 801793a:	4605      	mov	r5, r0
 801793c:	2b00      	cmp	r3, #0
 801793e:	f000 80ca 	beq.w	8017ad6 <rmw_init+0x1b2>
 8017942:	4b78      	ldr	r3, [pc, #480]	; (8017b24 <rmw_init+0x200>)
 8017944:	6880      	ldr	r0, [r0, #8]
 8017946:	681f      	ldr	r7, [r3, #0]
 8017948:	b128      	cbz	r0, 8017956 <rmw_init+0x32>
 801794a:	4639      	mov	r1, r7
 801794c:	f7e8 fc78 	bl	8000240 <strcmp>
 8017950:	2800      	cmp	r0, #0
 8017952:	f040 80ca 	bne.w	8017aea <rmw_init+0x1c6>
 8017956:	4c74      	ldr	r4, [pc, #464]	; (8017b28 <rmw_init+0x204>)
 8017958:	f04f 0800 	mov.w	r8, #0
 801795c:	4973      	ldr	r1, [pc, #460]	; (8017b2c <rmw_init+0x208>)
 801795e:	4874      	ldr	r0, [pc, #464]	; (8017b30 <rmw_init+0x20c>)
 8017960:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017964:	60b7      	str	r7, [r6, #8]
 8017966:	e9c6 2300 	strd	r2, r3, [r6]
 801796a:	68eb      	ldr	r3, [r5, #12]
 801796c:	2201      	movs	r2, #1
 801796e:	66b3      	str	r3, [r6, #104]	; 0x68
 8017970:	f7f6 f8e4 	bl	800db3c <rmw_uxrce_init_session_memory>
 8017974:	4620      	mov	r0, r4
 8017976:	2204      	movs	r2, #4
 8017978:	496e      	ldr	r1, [pc, #440]	; (8017b34 <rmw_init+0x210>)
 801797a:	f7f6 f91f 	bl	800dbbc <rmw_uxrce_init_static_input_buffer_memory>
 801797e:	486c      	ldr	r0, [pc, #432]	; (8017b30 <rmw_init+0x20c>)
 8017980:	f884 800d 	strb.w	r8, [r4, #13]
 8017984:	f7ff fe72 	bl	801766c <get_memory>
 8017988:	2800      	cmp	r0, #0
 801798a:	f000 80a9 	beq.w	8017ae0 <rmw_init+0x1bc>
 801798e:	6884      	ldr	r4, [r0, #8]
 8017990:	6d68      	ldr	r0, [r5, #84]	; 0x54
 8017992:	f104 0910 	add.w	r9, r4, #16
 8017996:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8017998:	f890 c010 	ldrb.w	ip, [r0, #16]
 801799c:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 80179a0:	9101      	str	r1, [sp, #4]
 80179a2:	4661      	mov	r1, ip
 80179a4:	6a00      	ldr	r0, [r0, #32]
 80179a6:	9000      	str	r0, [sp, #0]
 80179a8:	4648      	mov	r0, r9
 80179aa:	f001 f921 	bl	8018bf0 <uxr_set_custom_transport_callbacks>
 80179ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80179b2:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 80179b6:	4960      	ldr	r1, [pc, #384]	; (8017b38 <rmw_init+0x214>)
 80179b8:	4860      	ldr	r0, [pc, #384]	; (8017b3c <rmw_init+0x218>)
 80179ba:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 80179be:	f504 725e 	add.w	r2, r4, #888	; 0x378
 80179c2:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 80179c6:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 80179ca:	2201      	movs	r2, #1
 80179cc:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 80179d0:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 80179d4:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 80179d8:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 80179dc:	66f4      	str	r4, [r6, #108]	; 0x6c
 80179de:	f7f6 f88d 	bl	800dafc <rmw_uxrce_init_node_memory>
 80179e2:	2205      	movs	r2, #5
 80179e4:	4956      	ldr	r1, [pc, #344]	; (8017b40 <rmw_init+0x21c>)
 80179e6:	4857      	ldr	r0, [pc, #348]	; (8017b44 <rmw_init+0x220>)
 80179e8:	f7f6 f868 	bl	800dabc <rmw_uxrce_init_subscription_memory>
 80179ec:	220a      	movs	r2, #10
 80179ee:	4956      	ldr	r1, [pc, #344]	; (8017b48 <rmw_init+0x224>)
 80179f0:	4856      	ldr	r0, [pc, #344]	; (8017b4c <rmw_init+0x228>)
 80179f2:	f7f6 f843 	bl	800da7c <rmw_uxrce_init_publisher_memory>
 80179f6:	2202      	movs	r2, #2
 80179f8:	4955      	ldr	r1, [pc, #340]	; (8017b50 <rmw_init+0x22c>)
 80179fa:	4856      	ldr	r0, [pc, #344]	; (8017b54 <rmw_init+0x230>)
 80179fc:	f7f5 fffe 	bl	800d9fc <rmw_uxrce_init_service_memory>
 8017a00:	2201      	movs	r2, #1
 8017a02:	4955      	ldr	r1, [pc, #340]	; (8017b58 <rmw_init+0x234>)
 8017a04:	4855      	ldr	r0, [pc, #340]	; (8017b5c <rmw_init+0x238>)
 8017a06:	f7f6 f819 	bl	800da3c <rmw_uxrce_init_client_memory>
 8017a0a:	220f      	movs	r2, #15
 8017a0c:	4954      	ldr	r1, [pc, #336]	; (8017b60 <rmw_init+0x23c>)
 8017a0e:	4855      	ldr	r0, [pc, #340]	; (8017b64 <rmw_init+0x240>)
 8017a10:	f7f6 f8b4 	bl	800db7c <rmw_uxrce_init_topic_memory>
 8017a14:	2203      	movs	r2, #3
 8017a16:	4954      	ldr	r1, [pc, #336]	; (8017b68 <rmw_init+0x244>)
 8017a18:	4854      	ldr	r0, [pc, #336]	; (8017b6c <rmw_init+0x248>)
 8017a1a:	f7f6 f8ef 	bl	800dbfc <rmw_uxrce_init_init_options_impl_memory>
 8017a1e:	2204      	movs	r2, #4
 8017a20:	4953      	ldr	r1, [pc, #332]	; (8017b70 <rmw_init+0x24c>)
 8017a22:	4854      	ldr	r0, [pc, #336]	; (8017b74 <rmw_init+0x250>)
 8017a24:	f7f6 f90a 	bl	800dc3c <rmw_uxrce_init_wait_set_memory>
 8017a28:	4953      	ldr	r1, [pc, #332]	; (8017b78 <rmw_init+0x254>)
 8017a2a:	4854      	ldr	r0, [pc, #336]	; (8017b7c <rmw_init+0x258>)
 8017a2c:	2204      	movs	r2, #4
 8017a2e:	f7f6 f925 	bl	800dc7c <rmw_uxrce_init_guard_condition_memory>
 8017a32:	4642      	mov	r2, r8
 8017a34:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8017a36:	6ef0      	ldr	r0, [r6, #108]	; 0x6c
 8017a38:	f000 fdb0 	bl	801859c <rmw_uxrce_transport_init>
 8017a3c:	4607      	mov	r7, r0
 8017a3e:	2800      	cmp	r0, #0
 8017a40:	d158      	bne.n	8017af4 <rmw_init+0x1d0>
 8017a42:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8017a44:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 8017a48:	f504 7122 	add.w	r1, r4, #648	; 0x288
 8017a4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017a4e:	4628      	mov	r0, r5
 8017a50:	f7f8 fde2 	bl	8010618 <uxr_init_session>
 8017a54:	4622      	mov	r2, r4
 8017a56:	494a      	ldr	r1, [pc, #296]	; (8017b80 <rmw_init+0x25c>)
 8017a58:	4628      	mov	r0, r5
 8017a5a:	f7f8 fe01 	bl	8010660 <uxr_set_topic_callback>
 8017a5e:	463a      	mov	r2, r7
 8017a60:	4948      	ldr	r1, [pc, #288]	; (8017b84 <rmw_init+0x260>)
 8017a62:	4628      	mov	r0, r5
 8017a64:	f7f8 fdf8 	bl	8010658 <uxr_set_status_callback>
 8017a68:	463a      	mov	r2, r7
 8017a6a:	4947      	ldr	r1, [pc, #284]	; (8017b88 <rmw_init+0x264>)
 8017a6c:	4628      	mov	r0, r5
 8017a6e:	f7f8 fdfb 	bl	8010668 <uxr_set_request_callback>
 8017a72:	463a      	mov	r2, r7
 8017a74:	4945      	ldr	r1, [pc, #276]	; (8017b8c <rmw_init+0x268>)
 8017a76:	4628      	mov	r0, r5
 8017a78:	f7f8 fdfa 	bl	8010670 <uxr_set_reply_callback>
 8017a7c:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8017a80:	2304      	movs	r3, #4
 8017a82:	f504 7165 	add.w	r1, r4, #916	; 0x394
 8017a86:	0092      	lsls	r2, r2, #2
 8017a88:	4628      	mov	r0, r5
 8017a8a:	f7f8 fe31 	bl	80106f0 <uxr_create_input_reliable_stream>
 8017a8e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8017a92:	2304      	movs	r3, #4
 8017a94:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8017a98:	0092      	lsls	r2, r2, #2
 8017a9a:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8017a9e:	4628      	mov	r0, r5
 8017aa0:	f7f8 fdfc 	bl	801069c <uxr_create_output_reliable_stream>
 8017aa4:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8017aa8:	4628      	mov	r0, r5
 8017aaa:	f7f8 fe1b 	bl	80106e4 <uxr_create_input_best_effort_stream>
 8017aae:	f241 3194 	movw	r1, #5012	; 0x1394
 8017ab2:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8017ab6:	4628      	mov	r0, r5
 8017ab8:	4421      	add	r1, r4
 8017aba:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8017abe:	f7f8 fddb 	bl	8010678 <uxr_create_output_best_effort_stream>
 8017ac2:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 8017ac6:	4628      	mov	r0, r5
 8017ac8:	f7f9 fb64 	bl	8011194 <uxr_create_session>
 8017acc:	b1f8      	cbz	r0, 8017b0e <rmw_init+0x1ea>
 8017ace:	4638      	mov	r0, r7
 8017ad0:	b003      	add	sp, #12
 8017ad2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017ad6:	270b      	movs	r7, #11
 8017ad8:	4638      	mov	r0, r7
 8017ada:	b003      	add	sp, #12
 8017adc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017ae0:	2701      	movs	r7, #1
 8017ae2:	4638      	mov	r0, r7
 8017ae4:	b003      	add	sp, #12
 8017ae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017aea:	270c      	movs	r7, #12
 8017aec:	4638      	mov	r0, r7
 8017aee:	b003      	add	sp, #12
 8017af0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017af4:	4648      	mov	r0, r9
 8017af6:	f001 f8b9 	bl	8018c6c <uxr_close_custom_transport>
 8017afa:	4621      	mov	r1, r4
 8017afc:	480c      	ldr	r0, [pc, #48]	; (8017b30 <rmw_init+0x20c>)
 8017afe:	f7ff fdc5 	bl	801768c <put_memory>
 8017b02:	4638      	mov	r0, r7
 8017b04:	f8c6 806c 	str.w	r8, [r6, #108]	; 0x6c
 8017b08:	b003      	add	sp, #12
 8017b0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017b0e:	4648      	mov	r0, r9
 8017b10:	f001 f8ac 	bl	8018c6c <uxr_close_custom_transport>
 8017b14:	4621      	mov	r1, r4
 8017b16:	4806      	ldr	r0, [pc, #24]	; (8017b30 <rmw_init+0x20c>)
 8017b18:	f7ff fdb8 	bl	801768c <put_memory>
 8017b1c:	66f7      	str	r7, [r6, #108]	; 0x6c
 8017b1e:	2701      	movs	r7, #1
 8017b20:	e7d5      	b.n	8017ace <rmw_init+0x1aa>
 8017b22:	bf00      	nop
 8017b24:	0801df88 	.word	0x0801df88
 8017b28:	2001018c 	.word	0x2001018c
 8017b2c:	2000c438 	.word	0x2000c438
 8017b30:	2001017c 	.word	0x2001017c
 8017b34:	2000d9e0 	.word	0x2000d9e0
 8017b38:	2000b994 	.word	0x2000b994
 8017b3c:	2001014c 	.word	0x2001014c
 8017b40:	2000fae0 	.word	0x2000fae0
 8017b44:	2001019c 	.word	0x2001019c
 8017b48:	2000ba38 	.word	0x2000ba38
 8017b4c:	2001015c 	.word	0x2001015c
 8017b50:	2000c2a8 	.word	0x2000c2a8
 8017b54:	2001016c 	.word	0x2001016c
 8017b58:	2000b7c8 	.word	0x2000b7c8
 8017b5c:	2000b7b8 	.word	0x2000b7b8
 8017b60:	2000ff18 	.word	0x2000ff18
 8017b64:	200101ac 	.word	0x200101ac
 8017b68:	2000b910 	.word	0x2000b910
 8017b6c:	2001013c 	.word	0x2001013c
 8017b70:	200100bc 	.word	0x200100bc
 8017b74:	200101bc 	.word	0x200101bc
 8017b78:	2000b890 	.word	0x2000b890
 8017b7c:	2001012c 	.word	0x2001012c
 8017b80:	0801ad55 	.word	0x0801ad55
 8017b84:	0801ad4d 	.word	0x0801ad4d
 8017b88:	0801aded 	.word	0x0801aded
 8017b8c:	0801ae89 	.word	0x0801ae89

08017b90 <rmw_context_fini>:
 8017b90:	4b17      	ldr	r3, [pc, #92]	; (8017bf0 <rmw_context_fini+0x60>)
 8017b92:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8017b94:	b570      	push	{r4, r5, r6, lr}
 8017b96:	681c      	ldr	r4, [r3, #0]
 8017b98:	4605      	mov	r5, r0
 8017b9a:	b334      	cbz	r4, 8017bea <rmw_context_fini+0x5a>
 8017b9c:	2600      	movs	r6, #0
 8017b9e:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8017ba2:	6902      	ldr	r2, [r0, #16]
 8017ba4:	428a      	cmp	r2, r1
 8017ba6:	d018      	beq.n	8017bda <rmw_context_fini+0x4a>
 8017ba8:	2c00      	cmp	r4, #0
 8017baa:	d1f8      	bne.n	8017b9e <rmw_context_fini+0xe>
 8017bac:	b189      	cbz	r1, 8017bd2 <rmw_context_fini+0x42>
 8017bae:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 8017bb2:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 8017bb6:	789b      	ldrb	r3, [r3, #2]
 8017bb8:	2b01      	cmp	r3, #1
 8017bba:	bf14      	ite	ne
 8017bbc:	210a      	movne	r1, #10
 8017bbe:	2100      	moveq	r1, #0
 8017bc0:	f7f9 fac0 	bl	8011144 <uxr_delete_session_retries>
 8017bc4:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8017bc6:	f7f6 f879 	bl	800dcbc <rmw_uxrce_fini_session_memory>
 8017bca:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8017bcc:	3010      	adds	r0, #16
 8017bce:	f001 f84d 	bl	8018c6c <uxr_close_custom_transport>
 8017bd2:	2300      	movs	r3, #0
 8017bd4:	4630      	mov	r0, r6
 8017bd6:	66eb      	str	r3, [r5, #108]	; 0x6c
 8017bd8:	bd70      	pop	{r4, r5, r6, pc}
 8017bda:	3018      	adds	r0, #24
 8017bdc:	f000 f90e 	bl	8017dfc <rmw_destroy_node>
 8017be0:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 8017be2:	4606      	mov	r6, r0
 8017be4:	2c00      	cmp	r4, #0
 8017be6:	d1da      	bne.n	8017b9e <rmw_context_fini+0xe>
 8017be8:	e7e0      	b.n	8017bac <rmw_context_fini+0x1c>
 8017bea:	4626      	mov	r6, r4
 8017bec:	e7de      	b.n	8017bac <rmw_context_fini+0x1c>
 8017bee:	bf00      	nop
 8017bf0:	2001014c 	.word	0x2001014c

08017bf4 <create_topic>:
 8017bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017bf8:	4605      	mov	r5, r0
 8017bfa:	b084      	sub	sp, #16
 8017bfc:	4822      	ldr	r0, [pc, #136]	; (8017c88 <create_topic+0x94>)
 8017bfe:	460f      	mov	r7, r1
 8017c00:	4616      	mov	r6, r2
 8017c02:	f7ff fd33 	bl	801766c <get_memory>
 8017c06:	4604      	mov	r4, r0
 8017c08:	2800      	cmp	r0, #0
 8017c0a:	d039      	beq.n	8017c80 <create_topic+0x8c>
 8017c0c:	692b      	ldr	r3, [r5, #16]
 8017c0e:	2102      	movs	r1, #2
 8017c10:	6884      	ldr	r4, [r0, #8]
 8017c12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017c16:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8017c90 <create_topic+0x9c>
 8017c1a:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 8017c1e:	1c42      	adds	r2, r0, #1
 8017c20:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8017c24:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 8017c28:	f7f8 fc38 	bl	801049c <uxr_object_id>
 8017c2c:	223c      	movs	r2, #60	; 0x3c
 8017c2e:	6120      	str	r0, [r4, #16]
 8017c30:	4641      	mov	r1, r8
 8017c32:	4638      	mov	r0, r7
 8017c34:	f7f6 fac0 	bl	800e1b8 <generate_topic_name>
 8017c38:	b1f0      	cbz	r0, 8017c78 <create_topic+0x84>
 8017c3a:	4f14      	ldr	r7, [pc, #80]	; (8017c8c <create_topic+0x98>)
 8017c3c:	4630      	mov	r0, r6
 8017c3e:	2264      	movs	r2, #100	; 0x64
 8017c40:	4639      	mov	r1, r7
 8017c42:	f7f6 fa8b 	bl	800e15c <generate_type_name>
 8017c46:	b1b8      	cbz	r0, 8017c78 <create_topic+0x84>
 8017c48:	6928      	ldr	r0, [r5, #16]
 8017c4a:	2106      	movs	r1, #6
 8017c4c:	696b      	ldr	r3, [r5, #20]
 8017c4e:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8017c52:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017c56:	f8cd 8000 	str.w	r8, [sp]
 8017c5a:	e9cd 7101 	strd	r7, r1, [sp, #4]
 8017c5e:	6811      	ldr	r1, [r2, #0]
 8017c60:	6922      	ldr	r2, [r4, #16]
 8017c62:	f7f8 fb05 	bl	8010270 <uxr_buffer_create_topic_bin>
 8017c66:	4602      	mov	r2, r0
 8017c68:	6928      	ldr	r0, [r5, #16]
 8017c6a:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8017c6e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8017c72:	f7f6 f9a7 	bl	800dfc4 <run_xrce_session>
 8017c76:	b918      	cbnz	r0, 8017c80 <create_topic+0x8c>
 8017c78:	4620      	mov	r0, r4
 8017c7a:	2400      	movs	r4, #0
 8017c7c:	f7f6 f894 	bl	800dda8 <rmw_uxrce_fini_topic_memory>
 8017c80:	4620      	mov	r0, r4
 8017c82:	b004      	add	sp, #16
 8017c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c88:	200101ac 	.word	0x200101ac
 8017c8c:	20010670 	.word	0x20010670
 8017c90:	20010634 	.word	0x20010634

08017c94 <destroy_topic>:
 8017c94:	b538      	push	{r3, r4, r5, lr}
 8017c96:	6985      	ldr	r5, [r0, #24]
 8017c98:	b1dd      	cbz	r5, 8017cd2 <destroy_topic+0x3e>
 8017c9a:	4604      	mov	r4, r0
 8017c9c:	6928      	ldr	r0, [r5, #16]
 8017c9e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8017ca2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017ca6:	6922      	ldr	r2, [r4, #16]
 8017ca8:	6819      	ldr	r1, [r3, #0]
 8017caa:	f7f8 fa63 	bl	8010174 <uxr_buffer_delete_entity>
 8017cae:	4602      	mov	r2, r0
 8017cb0:	6928      	ldr	r0, [r5, #16]
 8017cb2:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8017cb6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8017cba:	f7f6 f983 	bl	800dfc4 <run_xrce_session>
 8017cbe:	4603      	mov	r3, r0
 8017cc0:	4620      	mov	r0, r4
 8017cc2:	2b00      	cmp	r3, #0
 8017cc4:	bf14      	ite	ne
 8017cc6:	2400      	movne	r4, #0
 8017cc8:	2402      	moveq	r4, #2
 8017cca:	f7f6 f86d 	bl	800dda8 <rmw_uxrce_fini_topic_memory>
 8017cce:	4620      	mov	r0, r4
 8017cd0:	bd38      	pop	{r3, r4, r5, pc}
 8017cd2:	2401      	movs	r4, #1
 8017cd4:	4620      	mov	r0, r4
 8017cd6:	bd38      	pop	{r3, r4, r5, pc}

08017cd8 <create_node>:
 8017cd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017cdc:	b083      	sub	sp, #12
 8017cde:	2b00      	cmp	r3, #0
 8017ce0:	d064      	beq.n	8017dac <create_node+0xd4>
 8017ce2:	4606      	mov	r6, r0
 8017ce4:	4838      	ldr	r0, [pc, #224]	; (8017dc8 <create_node+0xf0>)
 8017ce6:	460f      	mov	r7, r1
 8017ce8:	4690      	mov	r8, r2
 8017cea:	461d      	mov	r5, r3
 8017cec:	f7ff fcbe 	bl	801766c <get_memory>
 8017cf0:	2800      	cmp	r0, #0
 8017cf2:	d05b      	beq.n	8017dac <create_node+0xd4>
 8017cf4:	6884      	ldr	r4, [r0, #8]
 8017cf6:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8017cf8:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 8017cfc:	f104 0518 	add.w	r5, r4, #24
 8017d00:	6123      	str	r3, [r4, #16]
 8017d02:	f7ff fd39 	bl	8017778 <rmw_get_implementation_identifier>
 8017d06:	f8c4 9020 	str.w	r9, [r4, #32]
 8017d0a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8017d0e:	4630      	mov	r0, r6
 8017d10:	f7e8 faf6 	bl	8000300 <strlen>
 8017d14:	1c42      	adds	r2, r0, #1
 8017d16:	2a3c      	cmp	r2, #60	; 0x3c
 8017d18:	d840      	bhi.n	8017d9c <create_node+0xc4>
 8017d1a:	4648      	mov	r0, r9
 8017d1c:	f104 0968 	add.w	r9, r4, #104	; 0x68
 8017d20:	4631      	mov	r1, r6
 8017d22:	f003 fee0 	bl	801bae6 <memcpy>
 8017d26:	4638      	mov	r0, r7
 8017d28:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8017d2c:	f7e8 fae8 	bl	8000300 <strlen>
 8017d30:	1c42      	adds	r2, r0, #1
 8017d32:	2a3c      	cmp	r2, #60	; 0x3c
 8017d34:	d832      	bhi.n	8017d9c <create_node+0xc4>
 8017d36:	4639      	mov	r1, r7
 8017d38:	4648      	mov	r0, r9
 8017d3a:	f003 fed4 	bl	801bae6 <memcpy>
 8017d3e:	6923      	ldr	r3, [r4, #16]
 8017d40:	2101      	movs	r1, #1
 8017d42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017d46:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 8017d4a:	1842      	adds	r2, r0, r1
 8017d4c:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 8017d50:	f7f8 fba4 	bl	801049c <uxr_object_id>
 8017d54:	6160      	str	r0, [r4, #20]
 8017d56:	783b      	ldrb	r3, [r7, #0]
 8017d58:	2b2f      	cmp	r3, #47	; 0x2f
 8017d5a:	d12c      	bne.n	8017db6 <create_node+0xde>
 8017d5c:	787b      	ldrb	r3, [r7, #1]
 8017d5e:	bb53      	cbnz	r3, 8017db6 <create_node+0xde>
 8017d60:	4633      	mov	r3, r6
 8017d62:	4a1a      	ldr	r2, [pc, #104]	; (8017dcc <create_node+0xf4>)
 8017d64:	213c      	movs	r1, #60	; 0x3c
 8017d66:	481a      	ldr	r0, [pc, #104]	; (8017dd0 <create_node+0xf8>)
 8017d68:	f003 fcb2 	bl	801b6d0 <sniprintf>
 8017d6c:	6920      	ldr	r0, [r4, #16]
 8017d6e:	2106      	movs	r1, #6
 8017d70:	fa1f f388 	uxth.w	r3, r8
 8017d74:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8017d78:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017d7c:	9101      	str	r1, [sp, #4]
 8017d7e:	4914      	ldr	r1, [pc, #80]	; (8017dd0 <create_node+0xf8>)
 8017d80:	9100      	str	r1, [sp, #0]
 8017d82:	6811      	ldr	r1, [r2, #0]
 8017d84:	6962      	ldr	r2, [r4, #20]
 8017d86:	f7f8 fa41 	bl	801020c <uxr_buffer_create_participant_bin>
 8017d8a:	4602      	mov	r2, r0
 8017d8c:	6920      	ldr	r0, [r4, #16]
 8017d8e:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8017d92:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8017d96:	f7f6 f915 	bl	800dfc4 <run_xrce_session>
 8017d9a:	b918      	cbnz	r0, 8017da4 <create_node+0xcc>
 8017d9c:	4628      	mov	r0, r5
 8017d9e:	2500      	movs	r5, #0
 8017da0:	f7f5 ff92 	bl	800dcc8 <rmw_uxrce_fini_node_memory>
 8017da4:	4628      	mov	r0, r5
 8017da6:	b003      	add	sp, #12
 8017da8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017dac:	2500      	movs	r5, #0
 8017dae:	4628      	mov	r0, r5
 8017db0:	b003      	add	sp, #12
 8017db2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017db6:	463b      	mov	r3, r7
 8017db8:	4a06      	ldr	r2, [pc, #24]	; (8017dd4 <create_node+0xfc>)
 8017dba:	213c      	movs	r1, #60	; 0x3c
 8017dbc:	9600      	str	r6, [sp, #0]
 8017dbe:	4804      	ldr	r0, [pc, #16]	; (8017dd0 <create_node+0xf8>)
 8017dc0:	f003 fc86 	bl	801b6d0 <sniprintf>
 8017dc4:	e7d2      	b.n	8017d6c <create_node+0x94>
 8017dc6:	bf00      	nop
 8017dc8:	2001014c 	.word	0x2001014c
 8017dcc:	0801d58c 	.word	0x0801d58c
 8017dd0:	200106d4 	.word	0x200106d4
 8017dd4:	0801d9d4 	.word	0x0801d9d4

08017dd8 <rmw_create_node>:
 8017dd8:	468c      	mov	ip, r1
 8017dda:	4611      	mov	r1, r2
 8017ddc:	f1bc 0f00 	cmp.w	ip, #0
 8017de0:	d00a      	beq.n	8017df8 <rmw_create_node+0x20>
 8017de2:	f89c 3000 	ldrb.w	r3, [ip]
 8017de6:	b13b      	cbz	r3, 8017df8 <rmw_create_node+0x20>
 8017de8:	b132      	cbz	r2, 8017df8 <rmw_create_node+0x20>
 8017dea:	7813      	ldrb	r3, [r2, #0]
 8017dec:	b123      	cbz	r3, 8017df8 <rmw_create_node+0x20>
 8017dee:	4603      	mov	r3, r0
 8017df0:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8017df2:	4660      	mov	r0, ip
 8017df4:	f7ff bf70 	b.w	8017cd8 <create_node>
 8017df8:	2000      	movs	r0, #0
 8017dfa:	4770      	bx	lr

08017dfc <rmw_destroy_node>:
 8017dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017dfe:	b328      	cbz	r0, 8017e4c <rmw_destroy_node+0x50>
 8017e00:	4607      	mov	r7, r0
 8017e02:	6800      	ldr	r0, [r0, #0]
 8017e04:	b120      	cbz	r0, 8017e10 <rmw_destroy_node+0x14>
 8017e06:	4b37      	ldr	r3, [pc, #220]	; (8017ee4 <rmw_destroy_node+0xe8>)
 8017e08:	6819      	ldr	r1, [r3, #0]
 8017e0a:	f7e8 fa19 	bl	8000240 <strcmp>
 8017e0e:	b9e8      	cbnz	r0, 8017e4c <rmw_destroy_node+0x50>
 8017e10:	687d      	ldr	r5, [r7, #4]
 8017e12:	b1dd      	cbz	r5, 8017e4c <rmw_destroy_node+0x50>
 8017e14:	4b34      	ldr	r3, [pc, #208]	; (8017ee8 <rmw_destroy_node+0xec>)
 8017e16:	681c      	ldr	r4, [r3, #0]
 8017e18:	2c00      	cmp	r4, #0
 8017e1a:	d060      	beq.n	8017ede <rmw_destroy_node+0xe2>
 8017e1c:	2600      	movs	r6, #0
 8017e1e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8017e22:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8017e26:	429d      	cmp	r5, r3
 8017e28:	d013      	beq.n	8017e52 <rmw_destroy_node+0x56>
 8017e2a:	2c00      	cmp	r4, #0
 8017e2c:	d1f7      	bne.n	8017e1e <rmw_destroy_node+0x22>
 8017e2e:	4b2f      	ldr	r3, [pc, #188]	; (8017eec <rmw_destroy_node+0xf0>)
 8017e30:	681c      	ldr	r4, [r3, #0]
 8017e32:	b1c4      	cbz	r4, 8017e66 <rmw_destroy_node+0x6a>
 8017e34:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8017e38:	6a0b      	ldr	r3, [r1, #32]
 8017e3a:	429d      	cmp	r5, r3
 8017e3c:	d1f9      	bne.n	8017e32 <rmw_destroy_node+0x36>
 8017e3e:	317c      	adds	r1, #124	; 0x7c
 8017e40:	4638      	mov	r0, r7
 8017e42:	f000 faf5 	bl	8018430 <rmw_destroy_subscription>
 8017e46:	2801      	cmp	r0, #1
 8017e48:	4606      	mov	r6, r0
 8017e4a:	d1f2      	bne.n	8017e32 <rmw_destroy_node+0x36>
 8017e4c:	2601      	movs	r6, #1
 8017e4e:	4630      	mov	r0, r6
 8017e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e52:	3184      	adds	r1, #132	; 0x84
 8017e54:	4638      	mov	r0, r7
 8017e56:	f7f5 fd7d 	bl	800d954 <rmw_destroy_publisher>
 8017e5a:	2801      	cmp	r0, #1
 8017e5c:	4606      	mov	r6, r0
 8017e5e:	d0f5      	beq.n	8017e4c <rmw_destroy_node+0x50>
 8017e60:	2c00      	cmp	r4, #0
 8017e62:	d1dc      	bne.n	8017e1e <rmw_destroy_node+0x22>
 8017e64:	e7e3      	b.n	8017e2e <rmw_destroy_node+0x32>
 8017e66:	4b22      	ldr	r3, [pc, #136]	; (8017ef0 <rmw_destroy_node+0xf4>)
 8017e68:	681c      	ldr	r4, [r3, #0]
 8017e6a:	b16c      	cbz	r4, 8017e88 <rmw_destroy_node+0x8c>
 8017e6c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8017e70:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8017e72:	429d      	cmp	r5, r3
 8017e74:	d1f9      	bne.n	8017e6a <rmw_destroy_node+0x6e>
 8017e76:	317c      	adds	r1, #124	; 0x7c
 8017e78:	4638      	mov	r0, r7
 8017e7a:	f000 fa6d 	bl	8018358 <rmw_destroy_service>
 8017e7e:	2801      	cmp	r0, #1
 8017e80:	4606      	mov	r6, r0
 8017e82:	d0e3      	beq.n	8017e4c <rmw_destroy_node+0x50>
 8017e84:	2c00      	cmp	r4, #0
 8017e86:	d1f1      	bne.n	8017e6c <rmw_destroy_node+0x70>
 8017e88:	4b1a      	ldr	r3, [pc, #104]	; (8017ef4 <rmw_destroy_node+0xf8>)
 8017e8a:	681c      	ldr	r4, [r3, #0]
 8017e8c:	b16c      	cbz	r4, 8017eaa <rmw_destroy_node+0xae>
 8017e8e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8017e92:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8017e94:	429d      	cmp	r5, r3
 8017e96:	d1f9      	bne.n	8017e8c <rmw_destroy_node+0x90>
 8017e98:	317c      	adds	r1, #124	; 0x7c
 8017e9a:	4638      	mov	r0, r7
 8017e9c:	f7ff fc0a 	bl	80176b4 <rmw_destroy_client>
 8017ea0:	2801      	cmp	r0, #1
 8017ea2:	4606      	mov	r6, r0
 8017ea4:	d0d2      	beq.n	8017e4c <rmw_destroy_node+0x50>
 8017ea6:	2c00      	cmp	r4, #0
 8017ea8:	d1f1      	bne.n	8017e8e <rmw_destroy_node+0x92>
 8017eaa:	6928      	ldr	r0, [r5, #16]
 8017eac:	696a      	ldr	r2, [r5, #20]
 8017eae:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8017eb2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017eb6:	6819      	ldr	r1, [r3, #0]
 8017eb8:	f7f8 f95c 	bl	8010174 <uxr_buffer_delete_entity>
 8017ebc:	4602      	mov	r2, r0
 8017ebe:	6928      	ldr	r0, [r5, #16]
 8017ec0:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8017ec4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8017ec8:	f7f6 f87c 	bl	800dfc4 <run_xrce_session>
 8017ecc:	4603      	mov	r3, r0
 8017ece:	4638      	mov	r0, r7
 8017ed0:	2b00      	cmp	r3, #0
 8017ed2:	bf08      	it	eq
 8017ed4:	2602      	moveq	r6, #2
 8017ed6:	f7f5 fef7 	bl	800dcc8 <rmw_uxrce_fini_node_memory>
 8017eda:	4630      	mov	r0, r6
 8017edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017ede:	4626      	mov	r6, r4
 8017ee0:	e7a5      	b.n	8017e2e <rmw_destroy_node+0x32>
 8017ee2:	bf00      	nop
 8017ee4:	0801df88 	.word	0x0801df88
 8017ee8:	2001015c 	.word	0x2001015c
 8017eec:	2001019c 	.word	0x2001019c
 8017ef0:	2001016c 	.word	0x2001016c
 8017ef4:	2000b7b8 	.word	0x2000b7b8

08017ef8 <rmw_node_get_graph_guard_condition>:
 8017ef8:	6843      	ldr	r3, [r0, #4]
 8017efa:	6918      	ldr	r0, [r3, #16]
 8017efc:	f500 705a 	add.w	r0, r0, #872	; 0x368
 8017f00:	4770      	bx	lr
 8017f02:	bf00      	nop

08017f04 <rmw_send_request>:
 8017f04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017f08:	4604      	mov	r4, r0
 8017f0a:	6800      	ldr	r0, [r0, #0]
 8017f0c:	b08b      	sub	sp, #44	; 0x2c
 8017f0e:	460e      	mov	r6, r1
 8017f10:	4615      	mov	r5, r2
 8017f12:	b128      	cbz	r0, 8017f20 <rmw_send_request+0x1c>
 8017f14:	4b21      	ldr	r3, [pc, #132]	; (8017f9c <rmw_send_request+0x98>)
 8017f16:	6819      	ldr	r1, [r3, #0]
 8017f18:	f7e8 f992 	bl	8000240 <strcmp>
 8017f1c:	2800      	cmp	r0, #0
 8017f1e:	d139      	bne.n	8017f94 <rmw_send_request+0x90>
 8017f20:	6864      	ldr	r4, [r4, #4]
 8017f22:	2700      	movs	r7, #0
 8017f24:	6963      	ldr	r3, [r4, #20]
 8017f26:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
 8017f2a:	689b      	ldr	r3, [r3, #8]
 8017f2c:	4798      	blx	r3
 8017f2e:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8017f32:	4630      	mov	r0, r6
 8017f34:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017f38:	4798      	blx	r3
 8017f3a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8017f3e:	9000      	str	r0, [sp, #0]
 8017f40:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8017f44:	6922      	ldr	r2, [r4, #16]
 8017f46:	ab02      	add	r3, sp, #8
 8017f48:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8017f4a:	f7f9 fdaf 	bl	8011aac <uxr_prepare_output_stream>
 8017f4e:	e9c5 0700 	strd	r0, r7, [r5]
 8017f52:	b198      	cbz	r0, 8017f7c <rmw_send_request+0x78>
 8017f54:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8017f58:	a902      	add	r1, sp, #8
 8017f5a:	4630      	mov	r0, r6
 8017f5c:	4798      	blx	r3
 8017f5e:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 8017f62:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8017f66:	2b01      	cmp	r3, #1
 8017f68:	d00c      	beq.n	8017f84 <rmw_send_request+0x80>
 8017f6a:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8017f6c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017f70:	f7f8 ff9e 	bl	8010eb0 <uxr_run_session_until_confirm_delivery>
 8017f74:	4638      	mov	r0, r7
 8017f76:	b00b      	add	sp, #44	; 0x2c
 8017f78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017f7c:	2001      	movs	r0, #1
 8017f7e:	b00b      	add	sp, #44	; 0x2c
 8017f80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017f84:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017f88:	f7f8 fbd8 	bl	801073c <uxr_flash_output_streams>
 8017f8c:	4638      	mov	r0, r7
 8017f8e:	b00b      	add	sp, #44	; 0x2c
 8017f90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017f94:	200c      	movs	r0, #12
 8017f96:	b00b      	add	sp, #44	; 0x2c
 8017f98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017f9c:	0801df88 	.word	0x0801df88

08017fa0 <rmw_take_request>:
 8017fa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017fa4:	4605      	mov	r5, r0
 8017fa6:	6800      	ldr	r0, [r0, #0]
 8017fa8:	b089      	sub	sp, #36	; 0x24
 8017faa:	460c      	mov	r4, r1
 8017fac:	4690      	mov	r8, r2
 8017fae:	461e      	mov	r6, r3
 8017fb0:	b128      	cbz	r0, 8017fbe <rmw_take_request+0x1e>
 8017fb2:	4b28      	ldr	r3, [pc, #160]	; (8018054 <rmw_take_request+0xb4>)
 8017fb4:	6819      	ldr	r1, [r3, #0]
 8017fb6:	f7e8 f943 	bl	8000240 <strcmp>
 8017fba:	2800      	cmp	r0, #0
 8017fbc:	d146      	bne.n	801804c <rmw_take_request+0xac>
 8017fbe:	b10e      	cbz	r6, 8017fc4 <rmw_take_request+0x24>
 8017fc0:	2300      	movs	r3, #0
 8017fc2:	7033      	strb	r3, [r6, #0]
 8017fc4:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8017fc8:	f7f5 ff7e 	bl	800dec8 <rmw_uxrce_clean_expired_static_input_buffer>
 8017fcc:	4648      	mov	r0, r9
 8017fce:	f7f5 ff51 	bl	800de74 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017fd2:	4607      	mov	r7, r0
 8017fd4:	b3b0      	cbz	r0, 8018044 <rmw_take_request+0xa4>
 8017fd6:	6885      	ldr	r5, [r0, #8]
 8017fd8:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 8017fdc:	f8d5 383c 	ldr.w	r3, [r5, #2108]	; 0x83c
 8017fe0:	e9c4 3208 	strd	r3, r2, [r4, #32]
 8017fe4:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 8017fe8:	7423      	strb	r3, [r4, #16]
 8017fea:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	; 0x834
 8017fee:	f895 3836 	ldrb.w	r3, [r5, #2102]	; 0x836
 8017ff2:	f8a4 2011 	strh.w	r2, [r4, #17]
 8017ff6:	74e3      	strb	r3, [r4, #19]
 8017ff8:	f8d5 1828 	ldr.w	r1, [r5, #2088]	; 0x828
 8017ffc:	f8d5 282c 	ldr.w	r2, [r5, #2092]	; 0x82c
 8018000:	f8d5 3830 	ldr.w	r3, [r5, #2096]	; 0x830
 8018004:	6161      	str	r1, [r4, #20]
 8018006:	61a2      	str	r2, [r4, #24]
 8018008:	61e3      	str	r3, [r4, #28]
 801800a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801800e:	689b      	ldr	r3, [r3, #8]
 8018010:	4798      	blx	r3
 8018012:	6844      	ldr	r4, [r0, #4]
 8018014:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 8018018:	f105 0110 	add.w	r1, r5, #16
 801801c:	4668      	mov	r0, sp
 801801e:	f7f8 f835 	bl	801008c <ucdr_init_buffer>
 8018022:	4641      	mov	r1, r8
 8018024:	68e3      	ldr	r3, [r4, #12]
 8018026:	4668      	mov	r0, sp
 8018028:	4798      	blx	r3
 801802a:	4639      	mov	r1, r7
 801802c:	4604      	mov	r4, r0
 801802e:	480a      	ldr	r0, [pc, #40]	; (8018058 <rmw_take_request+0xb8>)
 8018030:	f7ff fb2c 	bl	801768c <put_memory>
 8018034:	b106      	cbz	r6, 8018038 <rmw_take_request+0x98>
 8018036:	7034      	strb	r4, [r6, #0]
 8018038:	f084 0001 	eor.w	r0, r4, #1
 801803c:	b2c0      	uxtb	r0, r0
 801803e:	b009      	add	sp, #36	; 0x24
 8018040:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018044:	2001      	movs	r0, #1
 8018046:	b009      	add	sp, #36	; 0x24
 8018048:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801804c:	200c      	movs	r0, #12
 801804e:	b009      	add	sp, #36	; 0x24
 8018050:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018054:	0801df88 	.word	0x0801df88
 8018058:	2001018c 	.word	0x2001018c

0801805c <rmw_send_response>:
 801805c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801805e:	4605      	mov	r5, r0
 8018060:	6800      	ldr	r0, [r0, #0]
 8018062:	b091      	sub	sp, #68	; 0x44
 8018064:	460c      	mov	r4, r1
 8018066:	4616      	mov	r6, r2
 8018068:	b128      	cbz	r0, 8018076 <rmw_send_response+0x1a>
 801806a:	4b29      	ldr	r3, [pc, #164]	; (8018110 <rmw_send_response+0xb4>)
 801806c:	6819      	ldr	r1, [r3, #0]
 801806e:	f7e8 f8e7 	bl	8000240 <strcmp>
 8018072:	2800      	cmp	r0, #0
 8018074:	d141      	bne.n	80180fa <rmw_send_response+0x9e>
 8018076:	686d      	ldr	r5, [r5, #4]
 8018078:	68a1      	ldr	r1, [r4, #8]
 801807a:	6860      	ldr	r0, [r4, #4]
 801807c:	6faf      	ldr	r7, [r5, #120]	; 0x78
 801807e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8018082:	9307      	str	r3, [sp, #28]
 8018084:	4623      	mov	r3, r4
 8018086:	9206      	str	r2, [sp, #24]
 8018088:	f813 2b01 	ldrb.w	r2, [r3], #1
 801808c:	789b      	ldrb	r3, [r3, #2]
 801808e:	f88d 2017 	strb.w	r2, [sp, #23]
 8018092:	f88d 3016 	strb.w	r3, [sp, #22]
 8018096:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801809a:	68e2      	ldr	r2, [r4, #12]
 801809c:	f8ad 3014 	strh.w	r3, [sp, #20]
 80180a0:	ab02      	add	r3, sp, #8
 80180a2:	696c      	ldr	r4, [r5, #20]
 80180a4:	c307      	stmia	r3!, {r0, r1, r2}
 80180a6:	68e3      	ldr	r3, [r4, #12]
 80180a8:	4798      	blx	r3
 80180aa:	6844      	ldr	r4, [r0, #4]
 80180ac:	4630      	mov	r0, r6
 80180ae:	6923      	ldr	r3, [r4, #16]
 80180b0:	4798      	blx	r3
 80180b2:	f100 0318 	add.w	r3, r0, #24
 80180b6:	6938      	ldr	r0, [r7, #16]
 80180b8:	9300      	str	r3, [sp, #0]
 80180ba:	ab08      	add	r3, sp, #32
 80180bc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80180c0:	692a      	ldr	r2, [r5, #16]
 80180c2:	6f29      	ldr	r1, [r5, #112]	; 0x70
 80180c4:	f7f9 fcf2 	bl	8011aac <uxr_prepare_output_stream>
 80180c8:	b910      	cbnz	r0, 80180d0 <rmw_send_response+0x74>
 80180ca:	2001      	movs	r0, #1
 80180cc:	b011      	add	sp, #68	; 0x44
 80180ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80180d0:	a902      	add	r1, sp, #8
 80180d2:	a808      	add	r0, sp, #32
 80180d4:	f7fa fd6a 	bl	8012bac <uxr_serialize_SampleIdentity>
 80180d8:	68a3      	ldr	r3, [r4, #8]
 80180da:	a908      	add	r1, sp, #32
 80180dc:	4630      	mov	r0, r6
 80180de:	4798      	blx	r3
 80180e0:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 80180e4:	6938      	ldr	r0, [r7, #16]
 80180e6:	2b01      	cmp	r3, #1
 80180e8:	d00a      	beq.n	8018100 <rmw_send_response+0xa4>
 80180ea:	6f69      	ldr	r1, [r5, #116]	; 0x74
 80180ec:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80180f0:	f7f8 fede 	bl	8010eb0 <uxr_run_session_until_confirm_delivery>
 80180f4:	2000      	movs	r0, #0
 80180f6:	b011      	add	sp, #68	; 0x44
 80180f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80180fa:	200c      	movs	r0, #12
 80180fc:	b011      	add	sp, #68	; 0x44
 80180fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018100:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018104:	f7f8 fb1a 	bl	801073c <uxr_flash_output_streams>
 8018108:	2000      	movs	r0, #0
 801810a:	b011      	add	sp, #68	; 0x44
 801810c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801810e:	bf00      	nop
 8018110:	0801df88 	.word	0x0801df88

08018114 <rmw_take_response>:
 8018114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018118:	4604      	mov	r4, r0
 801811a:	6800      	ldr	r0, [r0, #0]
 801811c:	b088      	sub	sp, #32
 801811e:	460f      	mov	r7, r1
 8018120:	4690      	mov	r8, r2
 8018122:	461d      	mov	r5, r3
 8018124:	b120      	cbz	r0, 8018130 <rmw_take_response+0x1c>
 8018126:	4b1d      	ldr	r3, [pc, #116]	; (801819c <rmw_take_response+0x88>)
 8018128:	6819      	ldr	r1, [r3, #0]
 801812a:	f7e8 f889 	bl	8000240 <strcmp>
 801812e:	bb68      	cbnz	r0, 801818c <rmw_take_response+0x78>
 8018130:	b10d      	cbz	r5, 8018136 <rmw_take_response+0x22>
 8018132:	2300      	movs	r3, #0
 8018134:	702b      	strb	r3, [r5, #0]
 8018136:	6864      	ldr	r4, [r4, #4]
 8018138:	f7f5 fec6 	bl	800dec8 <rmw_uxrce_clean_expired_static_input_buffer>
 801813c:	4620      	mov	r0, r4
 801813e:	f7f5 fe99 	bl	800de74 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018142:	4606      	mov	r6, r0
 8018144:	b330      	cbz	r0, 8018194 <rmw_take_response+0x80>
 8018146:	6963      	ldr	r3, [r4, #20]
 8018148:	6884      	ldr	r4, [r0, #8]
 801814a:	68db      	ldr	r3, [r3, #12]
 801814c:	f504 6203 	add.w	r2, r4, #2096	; 0x830
 8018150:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8018154:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8018158:	4798      	blx	r3
 801815a:	6847      	ldr	r7, [r0, #4]
 801815c:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 8018160:	f104 0110 	add.w	r1, r4, #16
 8018164:	4668      	mov	r0, sp
 8018166:	f7f7 ff91 	bl	801008c <ucdr_init_buffer>
 801816a:	4641      	mov	r1, r8
 801816c:	68fb      	ldr	r3, [r7, #12]
 801816e:	4668      	mov	r0, sp
 8018170:	4798      	blx	r3
 8018172:	4631      	mov	r1, r6
 8018174:	4604      	mov	r4, r0
 8018176:	480a      	ldr	r0, [pc, #40]	; (80181a0 <rmw_take_response+0x8c>)
 8018178:	f7ff fa88 	bl	801768c <put_memory>
 801817c:	b105      	cbz	r5, 8018180 <rmw_take_response+0x6c>
 801817e:	702c      	strb	r4, [r5, #0]
 8018180:	f084 0001 	eor.w	r0, r4, #1
 8018184:	b2c0      	uxtb	r0, r0
 8018186:	b008      	add	sp, #32
 8018188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801818c:	200c      	movs	r0, #12
 801818e:	b008      	add	sp, #32
 8018190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018194:	2001      	movs	r0, #1
 8018196:	b008      	add	sp, #32
 8018198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801819c:	0801df88 	.word	0x0801df88
 80181a0:	2001018c 	.word	0x2001018c

080181a4 <rmw_create_service>:
 80181a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181a8:	b091      	sub	sp, #68	; 0x44
 80181aa:	2900      	cmp	r1, #0
 80181ac:	f000 80bb 	beq.w	8018326 <rmw_create_service+0x182>
 80181b0:	4606      	mov	r6, r0
 80181b2:	2800      	cmp	r0, #0
 80181b4:	f000 80b7 	beq.w	8018326 <rmw_create_service+0x182>
 80181b8:	4614      	mov	r4, r2
 80181ba:	6800      	ldr	r0, [r0, #0]
 80181bc:	4689      	mov	r9, r1
 80181be:	461d      	mov	r5, r3
 80181c0:	f7f6 f812 	bl	800e1e8 <is_uxrce_rmw_identifier_valid>
 80181c4:	2c00      	cmp	r4, #0
 80181c6:	f000 80ae 	beq.w	8018326 <rmw_create_service+0x182>
 80181ca:	f080 0001 	eor.w	r0, r0, #1
 80181ce:	b2c0      	uxtb	r0, r0
 80181d0:	2800      	cmp	r0, #0
 80181d2:	f040 80a8 	bne.w	8018326 <rmw_create_service+0x182>
 80181d6:	7823      	ldrb	r3, [r4, #0]
 80181d8:	2b00      	cmp	r3, #0
 80181da:	f000 80a4 	beq.w	8018326 <rmw_create_service+0x182>
 80181de:	2d00      	cmp	r5, #0
 80181e0:	f000 80a1 	beq.w	8018326 <rmw_create_service+0x182>
 80181e4:	4856      	ldr	r0, [pc, #344]	; (8018340 <rmw_create_service+0x19c>)
 80181e6:	f8d6 8004 	ldr.w	r8, [r6, #4]
 80181ea:	f7ff fa3f 	bl	801766c <get_memory>
 80181ee:	4606      	mov	r6, r0
 80181f0:	2800      	cmp	r0, #0
 80181f2:	f000 8099 	beq.w	8018328 <rmw_create_service+0x184>
 80181f6:	6887      	ldr	r7, [r0, #8]
 80181f8:	f107 0a88 	add.w	sl, r7, #136	; 0x88
 80181fc:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 8018200:	f7ff faba 	bl	8017778 <rmw_get_implementation_identifier>
 8018204:	67f8      	str	r0, [r7, #124]	; 0x7c
 8018206:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 801820a:	4620      	mov	r0, r4
 801820c:	f7e8 f878 	bl	8000300 <strlen>
 8018210:	1c42      	adds	r2, r0, #1
 8018212:	f107 067c 	add.w	r6, r7, #124	; 0x7c
 8018216:	2a3c      	cmp	r2, #60	; 0x3c
 8018218:	f200 808a 	bhi.w	8018330 <rmw_create_service+0x18c>
 801821c:	4621      	mov	r1, r4
 801821e:	4650      	mov	r0, sl
 8018220:	f003 fc61 	bl	801bae6 <memcpy>
 8018224:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018228:	4629      	mov	r1, r5
 801822a:	2250      	movs	r2, #80	; 0x50
 801822c:	f107 0020 	add.w	r0, r7, #32
 8018230:	f8c7 8078 	str.w	r8, [r7, #120]	; 0x78
 8018234:	677b      	str	r3, [r7, #116]	; 0x74
 8018236:	f003 fc56 	bl	801bae6 <memcpy>
 801823a:	4648      	mov	r0, r9
 801823c:	4941      	ldr	r1, [pc, #260]	; (8018344 <rmw_create_service+0x1a0>)
 801823e:	f7f5 ffed 	bl	800e21c <get_service_typesupport_handle>
 8018242:	2800      	cmp	r0, #0
 8018244:	d074      	beq.n	8018330 <rmw_create_service+0x18c>
 8018246:	6843      	ldr	r3, [r0, #4]
 8018248:	617b      	str	r3, [r7, #20]
 801824a:	2b00      	cmp	r3, #0
 801824c:	d070      	beq.n	8018330 <rmw_create_service+0x18c>
 801824e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8018252:	2108      	movs	r1, #8
 8018254:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 801834c <rmw_create_service+0x1a8>
 8018258:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801825c:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 8018350 <rmw_create_service+0x1ac>
 8018260:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	; 0x5a2
 8018264:	1c42      	adds	r2, r0, #1
 8018266:	f8a3 25a2 	strh.w	r2, [r3, #1442]	; 0x5a2
 801826a:	f7f8 f917 	bl	801049c <uxr_object_id>
 801826e:	2364      	movs	r3, #100	; 0x64
 8018270:	6138      	str	r0, [r7, #16]
 8018272:	4652      	mov	r2, sl
 8018274:	4649      	mov	r1, r9
 8018276:	6978      	ldr	r0, [r7, #20]
 8018278:	f7f5 ff0a 	bl	800e090 <generate_service_types>
 801827c:	2800      	cmp	r0, #0
 801827e:	d057      	beq.n	8018330 <rmw_create_service+0x18c>
 8018280:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 8018354 <rmw_create_service+0x1b0>
 8018284:	233c      	movs	r3, #60	; 0x3c
 8018286:	4a30      	ldr	r2, [pc, #192]	; (8018348 <rmw_create_service+0x1a4>)
 8018288:	4620      	mov	r0, r4
 801828a:	4659      	mov	r1, fp
 801828c:	f7f5 fece 	bl	800e02c <generate_service_topics>
 8018290:	2800      	cmp	r0, #0
 8018292:	d04d      	beq.n	8018330 <rmw_create_service+0x18c>
 8018294:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8018298:	a80c      	add	r0, sp, #48	; 0x30
 801829a:	4629      	mov	r1, r5
 801829c:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80182a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80182a4:	f7f5 feaa 	bl	800dffc <convert_qos_profile>
 80182a8:	4a27      	ldr	r2, [pc, #156]	; (8018348 <rmw_create_service+0x1a4>)
 80182aa:	a80c      	add	r0, sp, #48	; 0x30
 80182ac:	9400      	str	r4, [sp, #0]
 80182ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80182b0:	e9cd b203 	strd	fp, r2, [sp, #12]
 80182b4:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 80182b8:	c803      	ldmia	r0, {r0, r1}
 80182ba:	9a08      	ldr	r2, [sp, #32]
 80182bc:	9005      	str	r0, [sp, #20]
 80182be:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 80182c2:	2306      	movs	r3, #6
 80182c4:	f8ad 1018 	strh.w	r1, [sp, #24]
 80182c8:	9307      	str	r3, [sp, #28]
 80182ca:	6811      	ldr	r1, [r2, #0]
 80182cc:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80182d0:	693a      	ldr	r2, [r7, #16]
 80182d2:	f7f8 f8a9 	bl	8010428 <uxr_buffer_create_replier_bin>
 80182d6:	4602      	mov	r2, r0
 80182d8:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80182dc:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80182e0:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80182e4:	f7f5 fe6e 	bl	800dfc4 <run_xrce_session>
 80182e8:	b310      	cbz	r0, 8018330 <rmw_create_service+0x18c>
 80182ea:	7a2b      	ldrb	r3, [r5, #8]
 80182ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80182f0:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80182f4:	2b02      	cmp	r3, #2
 80182f6:	920e      	str	r2, [sp, #56]	; 0x38
 80182f8:	f04f 0200 	mov.w	r2, #0
 80182fc:	920f      	str	r2, [sp, #60]	; 0x3c
 80182fe:	bf0c      	ite	eq
 8018300:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	; 0x37c
 8018304:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	; 0x374
 8018308:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801830c:	930b      	str	r3, [sp, #44]	; 0x2c
 801830e:	ab0e      	add	r3, sp, #56	; 0x38
 8018310:	673a      	str	r2, [r7, #112]	; 0x70
 8018312:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4
 8018316:	9300      	str	r3, [sp, #0]
 8018318:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801831a:	6811      	ldr	r1, [r2, #0]
 801831c:	693a      	ldr	r2, [r7, #16]
 801831e:	f001 f9f3 	bl	8019708 <uxr_buffer_request_data>
 8018322:	8338      	strh	r0, [r7, #24]
 8018324:	e000      	b.n	8018328 <rmw_create_service+0x184>
 8018326:	2600      	movs	r6, #0
 8018328:	4630      	mov	r0, r6
 801832a:	b011      	add	sp, #68	; 0x44
 801832c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018330:	4630      	mov	r0, r6
 8018332:	2600      	movs	r6, #0
 8018334:	f7f5 fd0c 	bl	800dd50 <rmw_uxrce_fini_service_memory>
 8018338:	4630      	mov	r0, r6
 801833a:	b011      	add	sp, #68	; 0x44
 801833c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018340:	2001016c 	.word	0x2001016c
 8018344:	0801ca98 	.word	0x0801ca98
 8018348:	200107b0 	.word	0x200107b0
 801834c:	200107ec 	.word	0x200107ec
 8018350:	2001074c 	.word	0x2001074c
 8018354:	20010710 	.word	0x20010710

08018358 <rmw_destroy_service>:
 8018358:	b570      	push	{r4, r5, r6, lr}
 801835a:	b128      	cbz	r0, 8018368 <rmw_destroy_service+0x10>
 801835c:	4604      	mov	r4, r0
 801835e:	6800      	ldr	r0, [r0, #0]
 8018360:	460d      	mov	r5, r1
 8018362:	f7f5 ff41 	bl	800e1e8 <is_uxrce_rmw_identifier_valid>
 8018366:	b910      	cbnz	r0, 801836e <rmw_destroy_service+0x16>
 8018368:	2401      	movs	r4, #1
 801836a:	4620      	mov	r0, r4
 801836c:	bd70      	pop	{r4, r5, r6, pc}
 801836e:	6863      	ldr	r3, [r4, #4]
 8018370:	2b00      	cmp	r3, #0
 8018372:	d0f9      	beq.n	8018368 <rmw_destroy_service+0x10>
 8018374:	2d00      	cmp	r5, #0
 8018376:	d0f7      	beq.n	8018368 <rmw_destroy_service+0x10>
 8018378:	6828      	ldr	r0, [r5, #0]
 801837a:	f7f5 ff35 	bl	800e1e8 <is_uxrce_rmw_identifier_valid>
 801837e:	2800      	cmp	r0, #0
 8018380:	d0f2      	beq.n	8018368 <rmw_destroy_service+0x10>
 8018382:	686e      	ldr	r6, [r5, #4]
 8018384:	2e00      	cmp	r6, #0
 8018386:	d0ef      	beq.n	8018368 <rmw_destroy_service+0x10>
 8018388:	6864      	ldr	r4, [r4, #4]
 801838a:	6932      	ldr	r2, [r6, #16]
 801838c:	6920      	ldr	r0, [r4, #16]
 801838e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8018392:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018396:	6819      	ldr	r1, [r3, #0]
 8018398:	f001 f9f0 	bl	801977c <uxr_buffer_cancel_data>
 801839c:	4602      	mov	r2, r0
 801839e:	6920      	ldr	r0, [r4, #16]
 80183a0:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80183a4:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80183a8:	f7f5 fe0c 	bl	800dfc4 <run_xrce_session>
 80183ac:	6920      	ldr	r0, [r4, #16]
 80183ae:	6932      	ldr	r2, [r6, #16]
 80183b0:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80183b4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80183b8:	6819      	ldr	r1, [r3, #0]
 80183ba:	f7f7 fedb 	bl	8010174 <uxr_buffer_delete_entity>
 80183be:	4602      	mov	r2, r0
 80183c0:	6920      	ldr	r0, [r4, #16]
 80183c2:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80183c6:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80183ca:	f7f5 fdfb 	bl	800dfc4 <run_xrce_session>
 80183ce:	4603      	mov	r3, r0
 80183d0:	4628      	mov	r0, r5
 80183d2:	2b00      	cmp	r3, #0
 80183d4:	bf14      	ite	ne
 80183d6:	2400      	movne	r4, #0
 80183d8:	2402      	moveq	r4, #2
 80183da:	f7f5 fcb9 	bl	800dd50 <rmw_uxrce_fini_service_memory>
 80183de:	e7c4      	b.n	801836a <rmw_destroy_service+0x12>

080183e0 <rmw_service_response_publisher_get_actual_qos>:
 80183e0:	b181      	cbz	r1, 8018404 <rmw_service_response_publisher_get_actual_qos+0x24>
 80183e2:	4603      	mov	r3, r0
 80183e4:	b510      	push	{r4, lr}
 80183e6:	fab0 f480 	clz	r4, r0
 80183ea:	0964      	lsrs	r4, r4, #5
 80183ec:	b140      	cbz	r0, 8018400 <rmw_service_response_publisher_get_actual_qos+0x20>
 80183ee:	685b      	ldr	r3, [r3, #4]
 80183f0:	4608      	mov	r0, r1
 80183f2:	2250      	movs	r2, #80	; 0x50
 80183f4:	f103 0120 	add.w	r1, r3, #32
 80183f8:	f003 fb75 	bl	801bae6 <memcpy>
 80183fc:	4620      	mov	r0, r4
 80183fe:	bd10      	pop	{r4, pc}
 8018400:	200b      	movs	r0, #11
 8018402:	bd10      	pop	{r4, pc}
 8018404:	200b      	movs	r0, #11
 8018406:	4770      	bx	lr

08018408 <rmw_service_request_subscription_get_actual_qos>:
 8018408:	b178      	cbz	r0, 801842a <rmw_service_request_subscription_get_actual_qos+0x22>
 801840a:	b510      	push	{r4, lr}
 801840c:	fab1 f481 	clz	r4, r1
 8018410:	0964      	lsrs	r4, r4, #5
 8018412:	b141      	cbz	r1, 8018426 <rmw_service_request_subscription_get_actual_qos+0x1e>
 8018414:	6843      	ldr	r3, [r0, #4]
 8018416:	2250      	movs	r2, #80	; 0x50
 8018418:	4608      	mov	r0, r1
 801841a:	f103 0120 	add.w	r1, r3, #32
 801841e:	f003 fb62 	bl	801bae6 <memcpy>
 8018422:	4620      	mov	r0, r4
 8018424:	bd10      	pop	{r4, pc}
 8018426:	200b      	movs	r0, #11
 8018428:	bd10      	pop	{r4, pc}
 801842a:	200b      	movs	r0, #11
 801842c:	4770      	bx	lr
 801842e:	bf00      	nop

08018430 <rmw_destroy_subscription>:
 8018430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018434:	b128      	cbz	r0, 8018442 <rmw_destroy_subscription+0x12>
 8018436:	4604      	mov	r4, r0
 8018438:	6800      	ldr	r0, [r0, #0]
 801843a:	460d      	mov	r5, r1
 801843c:	f7f5 fed4 	bl	800e1e8 <is_uxrce_rmw_identifier_valid>
 8018440:	b918      	cbnz	r0, 801844a <rmw_destroy_subscription+0x1a>
 8018442:	2401      	movs	r4, #1
 8018444:	4620      	mov	r0, r4
 8018446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801844a:	6863      	ldr	r3, [r4, #4]
 801844c:	2b00      	cmp	r3, #0
 801844e:	d0f8      	beq.n	8018442 <rmw_destroy_subscription+0x12>
 8018450:	fab5 f485 	clz	r4, r5
 8018454:	0964      	lsrs	r4, r4, #5
 8018456:	2d00      	cmp	r5, #0
 8018458:	d0f3      	beq.n	8018442 <rmw_destroy_subscription+0x12>
 801845a:	6828      	ldr	r0, [r5, #0]
 801845c:	f7f5 fec4 	bl	800e1e8 <is_uxrce_rmw_identifier_valid>
 8018460:	2800      	cmp	r0, #0
 8018462:	d0ee      	beq.n	8018442 <rmw_destroy_subscription+0x12>
 8018464:	686e      	ldr	r6, [r5, #4]
 8018466:	2e00      	cmp	r6, #0
 8018468:	d0eb      	beq.n	8018442 <rmw_destroy_subscription+0x12>
 801846a:	6a37      	ldr	r7, [r6, #32]
 801846c:	6972      	ldr	r2, [r6, #20]
 801846e:	6938      	ldr	r0, [r7, #16]
 8018470:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8018474:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018478:	6819      	ldr	r1, [r3, #0]
 801847a:	f001 f97f 	bl	801977c <uxr_buffer_cancel_data>
 801847e:	4602      	mov	r2, r0
 8018480:	6938      	ldr	r0, [r7, #16]
 8018482:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8018486:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801848a:	f7f5 fd9b 	bl	800dfc4 <run_xrce_session>
 801848e:	69f0      	ldr	r0, [r6, #28]
 8018490:	f7ff fc00 	bl	8017c94 <destroy_topic>
 8018494:	6a33      	ldr	r3, [r6, #32]
 8018496:	6972      	ldr	r2, [r6, #20]
 8018498:	6918      	ldr	r0, [r3, #16]
 801849a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801849e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80184a2:	6819      	ldr	r1, [r3, #0]
 80184a4:	f7f7 fe66 	bl	8010174 <uxr_buffer_delete_entity>
 80184a8:	6a33      	ldr	r3, [r6, #32]
 80184aa:	4680      	mov	r8, r0
 80184ac:	6932      	ldr	r2, [r6, #16]
 80184ae:	6918      	ldr	r0, [r3, #16]
 80184b0:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80184b4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80184b8:	6819      	ldr	r1, [r3, #0]
 80184ba:	f7f7 fe5b 	bl	8010174 <uxr_buffer_delete_entity>
 80184be:	4606      	mov	r6, r0
 80184c0:	6938      	ldr	r0, [r7, #16]
 80184c2:	4642      	mov	r2, r8
 80184c4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80184c8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80184cc:	f7f5 fd7a 	bl	800dfc4 <run_xrce_session>
 80184d0:	693f      	ldr	r7, [r7, #16]
 80184d2:	4632      	mov	r2, r6
 80184d4:	4606      	mov	r6, r0
 80184d6:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 80184da:	4638      	mov	r0, r7
 80184dc:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 80184e0:	f7f5 fd70 	bl	800dfc4 <run_xrce_session>
 80184e4:	b126      	cbz	r6, 80184f0 <rmw_destroy_subscription+0xc0>
 80184e6:	b118      	cbz	r0, 80184f0 <rmw_destroy_subscription+0xc0>
 80184e8:	4628      	mov	r0, r5
 80184ea:	f7f5 fc1b 	bl	800dd24 <rmw_uxrce_fini_subscription_memory>
 80184ee:	e7a9      	b.n	8018444 <rmw_destroy_subscription+0x14>
 80184f0:	2402      	movs	r4, #2
 80184f2:	e7f9      	b.n	80184e8 <rmw_destroy_subscription+0xb8>

080184f4 <rmw_take_with_info>:
 80184f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80184f6:	4604      	mov	r4, r0
 80184f8:	6800      	ldr	r0, [r0, #0]
 80184fa:	b089      	sub	sp, #36	; 0x24
 80184fc:	460f      	mov	r7, r1
 80184fe:	4615      	mov	r5, r2
 8018500:	b128      	cbz	r0, 801850e <rmw_take_with_info+0x1a>
 8018502:	4b24      	ldr	r3, [pc, #144]	; (8018594 <rmw_take_with_info+0xa0>)
 8018504:	6819      	ldr	r1, [r3, #0]
 8018506:	f7e7 fe9b 	bl	8000240 <strcmp>
 801850a:	2800      	cmp	r0, #0
 801850c:	d13e      	bne.n	801858c <rmw_take_with_info+0x98>
 801850e:	b305      	cbz	r5, 8018552 <rmw_take_with_info+0x5e>
 8018510:	2300      	movs	r3, #0
 8018512:	6864      	ldr	r4, [r4, #4]
 8018514:	702b      	strb	r3, [r5, #0]
 8018516:	f7f5 fcd7 	bl	800dec8 <rmw_uxrce_clean_expired_static_input_buffer>
 801851a:	4620      	mov	r0, r4
 801851c:	f7f5 fcaa 	bl	800de74 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018520:	4606      	mov	r6, r0
 8018522:	b1f0      	cbz	r0, 8018562 <rmw_take_with_info+0x6e>
 8018524:	6881      	ldr	r1, [r0, #8]
 8018526:	4668      	mov	r0, sp
 8018528:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 801852c:	3110      	adds	r1, #16
 801852e:	f7f7 fdad 	bl	801008c <ucdr_init_buffer>
 8018532:	69a3      	ldr	r3, [r4, #24]
 8018534:	4639      	mov	r1, r7
 8018536:	4668      	mov	r0, sp
 8018538:	68db      	ldr	r3, [r3, #12]
 801853a:	4798      	blx	r3
 801853c:	4604      	mov	r4, r0
 801853e:	4631      	mov	r1, r6
 8018540:	4815      	ldr	r0, [pc, #84]	; (8018598 <rmw_take_with_info+0xa4>)
 8018542:	f7ff f8a3 	bl	801768c <put_memory>
 8018546:	702c      	strb	r4, [r5, #0]
 8018548:	f084 0001 	eor.w	r0, r4, #1
 801854c:	b2c0      	uxtb	r0, r0
 801854e:	b009      	add	sp, #36	; 0x24
 8018550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018552:	6864      	ldr	r4, [r4, #4]
 8018554:	f7f5 fcb8 	bl	800dec8 <rmw_uxrce_clean_expired_static_input_buffer>
 8018558:	4620      	mov	r0, r4
 801855a:	f7f5 fc8b 	bl	800de74 <rmw_uxrce_find_static_input_buffer_by_owner>
 801855e:	4605      	mov	r5, r0
 8018560:	b910      	cbnz	r0, 8018568 <rmw_take_with_info+0x74>
 8018562:	2001      	movs	r0, #1
 8018564:	b009      	add	sp, #36	; 0x24
 8018566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018568:	68a9      	ldr	r1, [r5, #8]
 801856a:	4668      	mov	r0, sp
 801856c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8018570:	3110      	adds	r1, #16
 8018572:	f7f7 fd8b 	bl	801008c <ucdr_init_buffer>
 8018576:	69a3      	ldr	r3, [r4, #24]
 8018578:	4639      	mov	r1, r7
 801857a:	4668      	mov	r0, sp
 801857c:	68db      	ldr	r3, [r3, #12]
 801857e:	4798      	blx	r3
 8018580:	4629      	mov	r1, r5
 8018582:	4604      	mov	r4, r0
 8018584:	4804      	ldr	r0, [pc, #16]	; (8018598 <rmw_take_with_info+0xa4>)
 8018586:	f7ff f881 	bl	801768c <put_memory>
 801858a:	e7dd      	b.n	8018548 <rmw_take_with_info+0x54>
 801858c:	200c      	movs	r0, #12
 801858e:	b009      	add	sp, #36	; 0x24
 8018590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018592:	bf00      	nop
 8018594:	0801df88 	.word	0x0801df88
 8018598:	2001018c 	.word	0x2001018c

0801859c <rmw_uxrce_transport_init>:
 801859c:	b508      	push	{r3, lr}
 801859e:	b108      	cbz	r0, 80185a4 <rmw_uxrce_transport_init+0x8>
 80185a0:	f100 0210 	add.w	r2, r0, #16
 80185a4:	b139      	cbz	r1, 80185b6 <rmw_uxrce_transport_init+0x1a>
 80185a6:	6949      	ldr	r1, [r1, #20]
 80185a8:	4610      	mov	r0, r2
 80185aa:	f000 fb2b 	bl	8018c04 <uxr_init_custom_transport>
 80185ae:	f080 0001 	eor.w	r0, r0, #1
 80185b2:	b2c0      	uxtb	r0, r0
 80185b4:	bd08      	pop	{r3, pc}
 80185b6:	4b04      	ldr	r3, [pc, #16]	; (80185c8 <rmw_uxrce_transport_init+0x2c>)
 80185b8:	4610      	mov	r0, r2
 80185ba:	6859      	ldr	r1, [r3, #4]
 80185bc:	f000 fb22 	bl	8018c04 <uxr_init_custom_transport>
 80185c0:	f080 0001 	eor.w	r0, r0, #1
 80185c4:	b2c0      	uxtb	r0, r0
 80185c6:	bd08      	pop	{r3, pc}
 80185c8:	2000b79c 	.word	0x2000b79c

080185cc <rmw_wait>:
 80185cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80185d0:	4698      	mov	r8, r3
 80185d2:	ea40 0301 	orr.w	r3, r0, r1
 80185d6:	b089      	sub	sp, #36	; 0x24
 80185d8:	ea48 0303 	orr.w	r3, r8, r3
 80185dc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80185de:	4313      	orrs	r3, r2
 80185e0:	f000 8106 	beq.w	80187f0 <rmw_wait+0x224>
 80185e4:	4605      	mov	r5, r0
 80185e6:	460e      	mov	r6, r1
 80185e8:	4691      	mov	r9, r2
 80185ea:	b16c      	cbz	r4, 8018608 <rmw_wait+0x3c>
 80185ec:	4ba6      	ldr	r3, [pc, #664]	; (8018888 <rmw_wait+0x2bc>)
 80185ee:	af04      	add	r7, sp, #16
 80185f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80185f2:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80185f6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80185fa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80185fe:	f7fe fe57 	bl	80172b0 <rmw_time_equal>
 8018602:	2800      	cmp	r0, #0
 8018604:	f000 810b 	beq.w	801881e <rmw_wait+0x252>
 8018608:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801860c:	f7f5 fc5c 	bl	800dec8 <rmw_uxrce_clean_expired_static_input_buffer>
 8018610:	4b9e      	ldr	r3, [pc, #632]	; (801888c <rmw_wait+0x2c0>)
 8018612:	681c      	ldr	r4, [r3, #0]
 8018614:	b14c      	cbz	r4, 801862a <rmw_wait+0x5e>
 8018616:	4623      	mov	r3, r4
 8018618:	2100      	movs	r1, #0
 801861a:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801861e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8018622:	f882 15a4 	strb.w	r1, [r2, #1444]	; 0x5a4
 8018626:	2b00      	cmp	r3, #0
 8018628:	d1f7      	bne.n	801861a <rmw_wait+0x4e>
 801862a:	f1b9 0f00 	cmp.w	r9, #0
 801862e:	d011      	beq.n	8018654 <rmw_wait+0x88>
 8018630:	f8d9 1000 	ldr.w	r1, [r9]
 8018634:	b171      	cbz	r1, 8018654 <rmw_wait+0x88>
 8018636:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801863a:	2300      	movs	r3, #0
 801863c:	2001      	movs	r0, #1
 801863e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8018642:	3301      	adds	r3, #1
 8018644:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8018646:	4299      	cmp	r1, r3
 8018648:	6912      	ldr	r2, [r2, #16]
 801864a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801864e:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 8018652:	d1f4      	bne.n	801863e <rmw_wait+0x72>
 8018654:	f1b8 0f00 	cmp.w	r8, #0
 8018658:	d011      	beq.n	801867e <rmw_wait+0xb2>
 801865a:	f8d8 1000 	ldr.w	r1, [r8]
 801865e:	b171      	cbz	r1, 801867e <rmw_wait+0xb2>
 8018660:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8018664:	2300      	movs	r3, #0
 8018666:	2001      	movs	r0, #1
 8018668:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801866c:	3301      	adds	r3, #1
 801866e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8018670:	4299      	cmp	r1, r3
 8018672:	6912      	ldr	r2, [r2, #16]
 8018674:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8018678:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801867c:	d1f4      	bne.n	8018668 <rmw_wait+0x9c>
 801867e:	b185      	cbz	r5, 80186a2 <rmw_wait+0xd6>
 8018680:	6829      	ldr	r1, [r5, #0]
 8018682:	b171      	cbz	r1, 80186a2 <rmw_wait+0xd6>
 8018684:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8018688:	2300      	movs	r3, #0
 801868a:	2001      	movs	r0, #1
 801868c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8018690:	3301      	adds	r3, #1
 8018692:	6a12      	ldr	r2, [r2, #32]
 8018694:	4299      	cmp	r1, r3
 8018696:	6912      	ldr	r2, [r2, #16]
 8018698:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801869c:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 80186a0:	d1f4      	bne.n	801868c <rmw_wait+0xc0>
 80186a2:	b344      	cbz	r4, 80186f6 <rmw_wait+0x12a>
 80186a4:	4622      	mov	r2, r4
 80186a6:	2300      	movs	r3, #0
 80186a8:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 80186ac:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80186b0:	f891 15a4 	ldrb.w	r1, [r1, #1444]	; 0x5a4
 80186b4:	440b      	add	r3, r1
 80186b6:	b2db      	uxtb	r3, r3
 80186b8:	2a00      	cmp	r2, #0
 80186ba:	d1f5      	bne.n	80186a8 <rmw_wait+0xdc>
 80186bc:	2b00      	cmp	r3, #0
 80186be:	d05f      	beq.n	8018780 <rmw_wait+0x1b4>
 80186c0:	1c7a      	adds	r2, r7, #1
 80186c2:	d00d      	beq.n	80186e0 <rmw_wait+0x114>
 80186c4:	ee07 7a90 	vmov	s15, r7
 80186c8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80186cc:	ee07 3a90 	vmov	s15, r3
 80186d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80186d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80186d8:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80186dc:	ee17 7a90 	vmov	r7, s15
 80186e0:	68a0      	ldr	r0, [r4, #8]
 80186e2:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 80186e6:	f893 35a4 	ldrb.w	r3, [r3, #1444]	; 0x5a4
 80186ea:	2b00      	cmp	r3, #0
 80186ec:	f040 808d 	bne.w	801880a <rmw_wait+0x23e>
 80186f0:	6864      	ldr	r4, [r4, #4]
 80186f2:	2c00      	cmp	r4, #0
 80186f4:	d1f4      	bne.n	80186e0 <rmw_wait+0x114>
 80186f6:	f1b9 0f00 	cmp.w	r9, #0
 80186fa:	f000 80a1 	beq.w	8018840 <rmw_wait+0x274>
 80186fe:	f8d9 7000 	ldr.w	r7, [r9]
 8018702:	2f00      	cmp	r7, #0
 8018704:	f000 80a4 	beq.w	8018850 <rmw_wait+0x284>
 8018708:	2400      	movs	r4, #0
 801870a:	4627      	mov	r7, r4
 801870c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8018710:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018714:	f7f5 fbae 	bl	800de74 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018718:	2800      	cmp	r0, #0
 801871a:	d03b      	beq.n	8018794 <rmw_wait+0x1c8>
 801871c:	3401      	adds	r4, #1
 801871e:	f8d9 3000 	ldr.w	r3, [r9]
 8018722:	2701      	movs	r7, #1
 8018724:	42a3      	cmp	r3, r4
 8018726:	d8f1      	bhi.n	801870c <rmw_wait+0x140>
 8018728:	2701      	movs	r7, #1
 801872a:	f1b8 0f00 	cmp.w	r8, #0
 801872e:	d010      	beq.n	8018752 <rmw_wait+0x186>
 8018730:	f8d8 3000 	ldr.w	r3, [r8]
 8018734:	b16b      	cbz	r3, 8018752 <rmw_wait+0x186>
 8018736:	2400      	movs	r4, #0
 8018738:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801873c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018740:	f7f5 fb98 	bl	800de74 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018744:	b370      	cbz	r0, 80187a4 <rmw_wait+0x1d8>
 8018746:	3401      	adds	r4, #1
 8018748:	f8d8 3000 	ldr.w	r3, [r8]
 801874c:	2701      	movs	r7, #1
 801874e:	42a3      	cmp	r3, r4
 8018750:	d8f2      	bhi.n	8018738 <rmw_wait+0x16c>
 8018752:	2d00      	cmp	r5, #0
 8018754:	d035      	beq.n	80187c2 <rmw_wait+0x1f6>
 8018756:	682b      	ldr	r3, [r5, #0]
 8018758:	b39b      	cbz	r3, 80187c2 <rmw_wait+0x1f6>
 801875a:	2400      	movs	r4, #0
 801875c:	686b      	ldr	r3, [r5, #4]
 801875e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018762:	f7f5 fb87 	bl	800de74 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018766:	b328      	cbz	r0, 80187b4 <rmw_wait+0x1e8>
 8018768:	3401      	adds	r4, #1
 801876a:	682b      	ldr	r3, [r5, #0]
 801876c:	2701      	movs	r7, #1
 801876e:	42a3      	cmp	r3, r4
 8018770:	d8f4      	bhi.n	801875c <rmw_wait+0x190>
 8018772:	2e00      	cmp	r6, #0
 8018774:	d03c      	beq.n	80187f0 <rmw_wait+0x224>
 8018776:	6834      	ldr	r4, [r6, #0]
 8018778:	2c00      	cmp	r4, #0
 801877a:	d039      	beq.n	80187f0 <rmw_wait+0x224>
 801877c:	2701      	movs	r7, #1
 801877e:	e023      	b.n	80187c8 <rmw_wait+0x1fc>
 8018780:	68a0      	ldr	r0, [r4, #8]
 8018782:	2100      	movs	r1, #0
 8018784:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018788:	f7f8 fb58 	bl	8010e3c <uxr_run_session_timeout>
 801878c:	6864      	ldr	r4, [r4, #4]
 801878e:	2c00      	cmp	r4, #0
 8018790:	d1f6      	bne.n	8018780 <rmw_wait+0x1b4>
 8018792:	e7b0      	b.n	80186f6 <rmw_wait+0x12a>
 8018794:	e9d9 3200 	ldrd	r3, r2, [r9]
 8018798:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801879c:	3401      	adds	r4, #1
 801879e:	42a3      	cmp	r3, r4
 80187a0:	d8b4      	bhi.n	801870c <rmw_wait+0x140>
 80187a2:	e7c2      	b.n	801872a <rmw_wait+0x15e>
 80187a4:	e9d8 3200 	ldrd	r3, r2, [r8]
 80187a8:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80187ac:	3401      	adds	r4, #1
 80187ae:	429c      	cmp	r4, r3
 80187b0:	d3c2      	bcc.n	8018738 <rmw_wait+0x16c>
 80187b2:	e7ce      	b.n	8018752 <rmw_wait+0x186>
 80187b4:	e9d5 3200 	ldrd	r3, r2, [r5]
 80187b8:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80187bc:	3401      	adds	r4, #1
 80187be:	42a3      	cmp	r3, r4
 80187c0:	d8cc      	bhi.n	801875c <rmw_wait+0x190>
 80187c2:	b1a6      	cbz	r6, 80187ee <rmw_wait+0x222>
 80187c4:	6834      	ldr	r4, [r6, #0]
 80187c6:	b194      	cbz	r4, 80187ee <rmw_wait+0x222>
 80187c8:	2300      	movs	r3, #0
 80187ca:	461d      	mov	r5, r3
 80187cc:	e004      	b.n	80187d8 <rmw_wait+0x20c>
 80187ce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80187d2:	3301      	adds	r3, #1
 80187d4:	42a3      	cmp	r3, r4
 80187d6:	d00a      	beq.n	80187ee <rmw_wait+0x222>
 80187d8:	6870      	ldr	r0, [r6, #4]
 80187da:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80187de:	7c0a      	ldrb	r2, [r1, #16]
 80187e0:	2a00      	cmp	r2, #0
 80187e2:	d0f4      	beq.n	80187ce <rmw_wait+0x202>
 80187e4:	3301      	adds	r3, #1
 80187e6:	4617      	mov	r7, r2
 80187e8:	740d      	strb	r5, [r1, #16]
 80187ea:	42a3      	cmp	r3, r4
 80187ec:	d1f4      	bne.n	80187d8 <rmw_wait+0x20c>
 80187ee:	b147      	cbz	r7, 8018802 <rmw_wait+0x236>
 80187f0:	2000      	movs	r0, #0
 80187f2:	b009      	add	sp, #36	; 0x24
 80187f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80187f8:	b11e      	cbz	r6, 8018802 <rmw_wait+0x236>
 80187fa:	6834      	ldr	r4, [r6, #0]
 80187fc:	462f      	mov	r7, r5
 80187fe:	2c00      	cmp	r4, #0
 8018800:	d1e2      	bne.n	80187c8 <rmw_wait+0x1fc>
 8018802:	2002      	movs	r0, #2
 8018804:	b009      	add	sp, #36	; 0x24
 8018806:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801880a:	4639      	mov	r1, r7
 801880c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018810:	f7f8 fb2e 	bl	8010e70 <uxr_run_session_until_data>
 8018814:	6864      	ldr	r4, [r4, #4]
 8018816:	2c00      	cmp	r4, #0
 8018818:	f47f af62 	bne.w	80186e0 <rmw_wait+0x114>
 801881c:	e76b      	b.n	80186f6 <rmw_wait+0x12a>
 801881e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8018822:	f7fe fd9b 	bl	801735c <rmw_time_total_nsec>
 8018826:	2300      	movs	r3, #0
 8018828:	4a19      	ldr	r2, [pc, #100]	; (8018890 <rmw_wait+0x2c4>)
 801882a:	f7e7 fdc1 	bl	80003b0 <__aeabi_uldivmod>
 801882e:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8018832:	4607      	mov	r7, r0
 8018834:	f171 0300 	sbcs.w	r3, r1, #0
 8018838:	bfa8      	it	ge
 801883a:	f06f 4700 	mvnge.w	r7, #2147483648	; 0x80000000
 801883e:	e6e5      	b.n	801860c <rmw_wait+0x40>
 8018840:	f1b8 0f00 	cmp.w	r8, #0
 8018844:	d00f      	beq.n	8018866 <rmw_wait+0x29a>
 8018846:	f8d8 3000 	ldr.w	r3, [r8]
 801884a:	b193      	cbz	r3, 8018872 <rmw_wait+0x2a6>
 801884c:	464f      	mov	r7, r9
 801884e:	e772      	b.n	8018736 <rmw_wait+0x16a>
 8018850:	f1b8 0f00 	cmp.w	r8, #0
 8018854:	d007      	beq.n	8018866 <rmw_wait+0x29a>
 8018856:	f8d8 3000 	ldr.w	r3, [r8]
 801885a:	2b00      	cmp	r3, #0
 801885c:	f47f af6b 	bne.w	8018736 <rmw_wait+0x16a>
 8018860:	b155      	cbz	r5, 8018878 <rmw_wait+0x2ac>
 8018862:	461f      	mov	r7, r3
 8018864:	e777      	b.n	8018756 <rmw_wait+0x18a>
 8018866:	2d00      	cmp	r5, #0
 8018868:	d0c6      	beq.n	80187f8 <rmw_wait+0x22c>
 801886a:	682b      	ldr	r3, [r5, #0]
 801886c:	b143      	cbz	r3, 8018880 <rmw_wait+0x2b4>
 801886e:	4647      	mov	r7, r8
 8018870:	e773      	b.n	801875a <rmw_wait+0x18e>
 8018872:	b10d      	cbz	r5, 8018878 <rmw_wait+0x2ac>
 8018874:	464f      	mov	r7, r9
 8018876:	e76e      	b.n	8018756 <rmw_wait+0x18a>
 8018878:	462f      	mov	r7, r5
 801887a:	2e00      	cmp	r6, #0
 801887c:	d1a2      	bne.n	80187c4 <rmw_wait+0x1f8>
 801887e:	e7c0      	b.n	8018802 <rmw_wait+0x236>
 8018880:	4647      	mov	r7, r8
 8018882:	2e00      	cmp	r6, #0
 8018884:	d19e      	bne.n	80187c4 <rmw_wait+0x1f8>
 8018886:	e7bc      	b.n	8018802 <rmw_wait+0x236>
 8018888:	0801c928 	.word	0x0801c928
 801888c:	2001017c 	.word	0x2001017c
 8018890:	000f4240 	.word	0x000f4240

08018894 <rmw_create_wait_set>:
 8018894:	b508      	push	{r3, lr}
 8018896:	4803      	ldr	r0, [pc, #12]	; (80188a4 <rmw_create_wait_set+0x10>)
 8018898:	f7fe fee8 	bl	801766c <get_memory>
 801889c:	b108      	cbz	r0, 80188a2 <rmw_create_wait_set+0xe>
 801889e:	6880      	ldr	r0, [r0, #8]
 80188a0:	3010      	adds	r0, #16
 80188a2:	bd08      	pop	{r3, pc}
 80188a4:	200101bc 	.word	0x200101bc

080188a8 <rmw_destroy_wait_set>:
 80188a8:	b508      	push	{r3, lr}
 80188aa:	4b08      	ldr	r3, [pc, #32]	; (80188cc <rmw_destroy_wait_set+0x24>)
 80188ac:	6819      	ldr	r1, [r3, #0]
 80188ae:	b911      	cbnz	r1, 80188b6 <rmw_destroy_wait_set+0xe>
 80188b0:	e00a      	b.n	80188c8 <rmw_destroy_wait_set+0x20>
 80188b2:	6849      	ldr	r1, [r1, #4]
 80188b4:	b141      	cbz	r1, 80188c8 <rmw_destroy_wait_set+0x20>
 80188b6:	688b      	ldr	r3, [r1, #8]
 80188b8:	3310      	adds	r3, #16
 80188ba:	4298      	cmp	r0, r3
 80188bc:	d1f9      	bne.n	80188b2 <rmw_destroy_wait_set+0xa>
 80188be:	4803      	ldr	r0, [pc, #12]	; (80188cc <rmw_destroy_wait_set+0x24>)
 80188c0:	f7fe fee4 	bl	801768c <put_memory>
 80188c4:	2000      	movs	r0, #0
 80188c6:	bd08      	pop	{r3, pc}
 80188c8:	2001      	movs	r0, #1
 80188ca:	bd08      	pop	{r3, pc}
 80188cc:	200101bc 	.word	0x200101bc

080188d0 <rmw_uros_epoch_nanos>:
 80188d0:	4b05      	ldr	r3, [pc, #20]	; (80188e8 <rmw_uros_epoch_nanos+0x18>)
 80188d2:	681b      	ldr	r3, [r3, #0]
 80188d4:	b123      	cbz	r3, 80188e0 <rmw_uros_epoch_nanos+0x10>
 80188d6:	6898      	ldr	r0, [r3, #8]
 80188d8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80188dc:	f7f7 bf24 	b.w	8010728 <uxr_epoch_nanos>
 80188e0:	2000      	movs	r0, #0
 80188e2:	2100      	movs	r1, #0
 80188e4:	4770      	bx	lr
 80188e6:	bf00      	nop
 80188e8:	2001017c 	.word	0x2001017c

080188ec <service_msgs__msg__ServiceEventInfo__get_type_hash>:
 80188ec:	4800      	ldr	r0, [pc, #0]	; (80188f0 <service_msgs__msg__ServiceEventInfo__get_type_hash+0x4>)
 80188ee:	4770      	bx	lr
 80188f0:	20001950 	.word	0x20001950

080188f4 <service_msgs__msg__ServiceEventInfo__get_type_description>:
 80188f4:	b510      	push	{r4, lr}
 80188f6:	4c08      	ldr	r4, [pc, #32]	; (8018918 <service_msgs__msg__ServiceEventInfo__get_type_description+0x24>)
 80188f8:	7820      	ldrb	r0, [r4, #0]
 80188fa:	b108      	cbz	r0, 8018900 <service_msgs__msg__ServiceEventInfo__get_type_description+0xc>
 80188fc:	4807      	ldr	r0, [pc, #28]	; (801891c <service_msgs__msg__ServiceEventInfo__get_type_description+0x28>)
 80188fe:	bd10      	pop	{r4, pc}
 8018900:	f000 f858 	bl	80189b4 <builtin_interfaces__msg__Time__get_type_description>
 8018904:	300c      	adds	r0, #12
 8018906:	4b06      	ldr	r3, [pc, #24]	; (8018920 <service_msgs__msg__ServiceEventInfo__get_type_description+0x2c>)
 8018908:	c807      	ldmia	r0, {r0, r1, r2}
 801890a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801890e:	2301      	movs	r3, #1
 8018910:	4802      	ldr	r0, [pc, #8]	; (801891c <service_msgs__msg__ServiceEventInfo__get_type_description+0x28>)
 8018912:	7023      	strb	r3, [r4, #0]
 8018914:	bd10      	pop	{r4, pc}
 8018916:	bf00      	nop
 8018918:	20010851 	.word	0x20010851
 801891c:	0801df8c 	.word	0x0801df8c
 8018920:	20001ad4 	.word	0x20001ad4

08018924 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>:
 8018924:	4800      	ldr	r0, [pc, #0]	; (8018928 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source+0x4>)
 8018926:	4770      	bx	lr
 8018928:	0801dfb0 	.word	0x0801dfb0

0801892c <service_msgs__msg__ServiceEventInfo__get_type_description_sources>:
 801892c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801892e:	4e0f      	ldr	r6, [pc, #60]	; (801896c <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x40>)
 8018930:	7837      	ldrb	r7, [r6, #0]
 8018932:	b10f      	cbz	r7, 8018938 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0xc>
 8018934:	480e      	ldr	r0, [pc, #56]	; (8018970 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x44>)
 8018936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018938:	4d0e      	ldr	r5, [pc, #56]	; (8018974 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x48>)
 801893a:	4c0f      	ldr	r4, [pc, #60]	; (8018978 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x4c>)
 801893c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801893e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018940:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018942:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018944:	682b      	ldr	r3, [r5, #0]
 8018946:	4638      	mov	r0, r7
 8018948:	f844 3b04 	str.w	r3, [r4], #4
 801894c:	f000 f83e 	bl	80189cc <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8018950:	2301      	movs	r3, #1
 8018952:	4684      	mov	ip, r0
 8018954:	7033      	strb	r3, [r6, #0]
 8018956:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801895a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801895c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018960:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018962:	f8dc 3000 	ldr.w	r3, [ip]
 8018966:	4802      	ldr	r0, [pc, #8]	; (8018970 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x44>)
 8018968:	6023      	str	r3, [r4, #0]
 801896a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801896c:	20010850 	.word	0x20010850
 8018970:	0801dfd4 	.word	0x0801dfd4
 8018974:	0801dfb0 	.word	0x0801dfb0
 8018978:	20010854 	.word	0x20010854

0801897c <service_msgs__msg__ServiceEventInfo__init>:
 801897c:	b538      	push	{r3, r4, r5, lr}
 801897e:	b138      	cbz	r0, 8018990 <service_msgs__msg__ServiceEventInfo__init+0x14>
 8018980:	1d05      	adds	r5, r0, #4
 8018982:	4628      	mov	r0, r5
 8018984:	f000 f842 	bl	8018a0c <builtin_interfaces__msg__Time__init>
 8018988:	4604      	mov	r4, r0
 801898a:	b120      	cbz	r0, 8018996 <service_msgs__msg__ServiceEventInfo__init+0x1a>
 801898c:	4620      	mov	r0, r4
 801898e:	bd38      	pop	{r3, r4, r5, pc}
 8018990:	4604      	mov	r4, r0
 8018992:	4620      	mov	r0, r4
 8018994:	bd38      	pop	{r3, r4, r5, pc}
 8018996:	4628      	mov	r0, r5
 8018998:	f000 f83c 	bl	8018a14 <builtin_interfaces__msg__Time__fini>
 801899c:	4620      	mov	r0, r4
 801899e:	bd38      	pop	{r3, r4, r5, pc}

080189a0 <service_msgs__msg__ServiceEventInfo__fini>:
 80189a0:	b110      	cbz	r0, 80189a8 <service_msgs__msg__ServiceEventInfo__fini+0x8>
 80189a2:	3004      	adds	r0, #4
 80189a4:	f000 b836 	b.w	8018a14 <builtin_interfaces__msg__Time__fini>
 80189a8:	4770      	bx	lr
 80189aa:	bf00      	nop

080189ac <builtin_interfaces__msg__Time__get_type_hash>:
 80189ac:	4800      	ldr	r0, [pc, #0]	; (80189b0 <builtin_interfaces__msg__Time__get_type_hash+0x4>)
 80189ae:	4770      	bx	lr
 80189b0:	20001e70 	.word	0x20001e70

080189b4 <builtin_interfaces__msg__Time__get_type_description>:
 80189b4:	4b03      	ldr	r3, [pc, #12]	; (80189c4 <builtin_interfaces__msg__Time__get_type_description+0x10>)
 80189b6:	781a      	ldrb	r2, [r3, #0]
 80189b8:	b90a      	cbnz	r2, 80189be <builtin_interfaces__msg__Time__get_type_description+0xa>
 80189ba:	2201      	movs	r2, #1
 80189bc:	701a      	strb	r2, [r3, #0]
 80189be:	4802      	ldr	r0, [pc, #8]	; (80189c8 <builtin_interfaces__msg__Time__get_type_description+0x14>)
 80189c0:	4770      	bx	lr
 80189c2:	bf00      	nop
 80189c4:	2001089d 	.word	0x2001089d
 80189c8:	0801dfe0 	.word	0x0801dfe0

080189cc <builtin_interfaces__msg__Time__get_individual_type_description_source>:
 80189cc:	4800      	ldr	r0, [pc, #0]	; (80189d0 <builtin_interfaces__msg__Time__get_individual_type_description_source+0x4>)
 80189ce:	4770      	bx	lr
 80189d0:	0801e004 	.word	0x0801e004

080189d4 <builtin_interfaces__msg__Time__get_type_description_sources>:
 80189d4:	4b09      	ldr	r3, [pc, #36]	; (80189fc <builtin_interfaces__msg__Time__get_type_description_sources+0x28>)
 80189d6:	781a      	ldrb	r2, [r3, #0]
 80189d8:	b96a      	cbnz	r2, 80189f6 <builtin_interfaces__msg__Time__get_type_description_sources+0x22>
 80189da:	2201      	movs	r2, #1
 80189dc:	b430      	push	{r4, r5}
 80189de:	4d08      	ldr	r5, [pc, #32]	; (8018a00 <builtin_interfaces__msg__Time__get_type_description_sources+0x2c>)
 80189e0:	4c08      	ldr	r4, [pc, #32]	; (8018a04 <builtin_interfaces__msg__Time__get_type_description_sources+0x30>)
 80189e2:	701a      	strb	r2, [r3, #0]
 80189e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80189e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80189e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80189ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80189ec:	682b      	ldr	r3, [r5, #0]
 80189ee:	4806      	ldr	r0, [pc, #24]	; (8018a08 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 80189f0:	6023      	str	r3, [r4, #0]
 80189f2:	bc30      	pop	{r4, r5}
 80189f4:	4770      	bx	lr
 80189f6:	4804      	ldr	r0, [pc, #16]	; (8018a08 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 80189f8:	4770      	bx	lr
 80189fa:	bf00      	nop
 80189fc:	2001089c 	.word	0x2001089c
 8018a00:	0801e004 	.word	0x0801e004
 8018a04:	200108a0 	.word	0x200108a0
 8018a08:	0801e028 	.word	0x0801e028

08018a0c <builtin_interfaces__msg__Time__init>:
 8018a0c:	3800      	subs	r0, #0
 8018a0e:	bf18      	it	ne
 8018a10:	2001      	movne	r0, #1
 8018a12:	4770      	bx	lr

08018a14 <builtin_interfaces__msg__Time__fini>:
 8018a14:	4770      	bx	lr
 8018a16:	bf00      	nop

08018a18 <ucdr_serialize_sequence_char>:
 8018a18:	b570      	push	{r4, r5, r6, lr}
 8018a1a:	4615      	mov	r5, r2
 8018a1c:	460e      	mov	r6, r1
 8018a1e:	7d01      	ldrb	r1, [r0, #20]
 8018a20:	4604      	mov	r4, r0
 8018a22:	f7f6 fa81 	bl	800ef28 <ucdr_serialize_endian_uint32_t>
 8018a26:	b90d      	cbnz	r5, 8018a2c <ucdr_serialize_sequence_char+0x14>
 8018a28:	2001      	movs	r0, #1
 8018a2a:	bd70      	pop	{r4, r5, r6, pc}
 8018a2c:	462b      	mov	r3, r5
 8018a2e:	4632      	mov	r2, r6
 8018a30:	7d21      	ldrb	r1, [r4, #20]
 8018a32:	4620      	mov	r0, r4
 8018a34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018a38:	f7f5 bdbe 	b.w	800e5b8 <ucdr_serialize_endian_array_char>

08018a3c <ucdr_deserialize_sequence_char>:
 8018a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a40:	461d      	mov	r5, r3
 8018a42:	4616      	mov	r6, r2
 8018a44:	460f      	mov	r7, r1
 8018a46:	461a      	mov	r2, r3
 8018a48:	7d01      	ldrb	r1, [r0, #20]
 8018a4a:	4604      	mov	r4, r0
 8018a4c:	f7f6 fb94 	bl	800f178 <ucdr_deserialize_endian_uint32_t>
 8018a50:	682b      	ldr	r3, [r5, #0]
 8018a52:	429e      	cmp	r6, r3
 8018a54:	d201      	bcs.n	8018a5a <ucdr_deserialize_sequence_char+0x1e>
 8018a56:	2201      	movs	r2, #1
 8018a58:	75a2      	strb	r2, [r4, #22]
 8018a5a:	b913      	cbnz	r3, 8018a62 <ucdr_deserialize_sequence_char+0x26>
 8018a5c:	2001      	movs	r0, #1
 8018a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a62:	463a      	mov	r2, r7
 8018a64:	7d21      	ldrb	r1, [r4, #20]
 8018a66:	4620      	mov	r0, r4
 8018a68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018a6c:	f7f5 bdd6 	b.w	800e61c <ucdr_deserialize_endian_array_char>

08018a70 <ucdr_serialize_sequence_uint8_t>:
 8018a70:	b570      	push	{r4, r5, r6, lr}
 8018a72:	4615      	mov	r5, r2
 8018a74:	460e      	mov	r6, r1
 8018a76:	7d01      	ldrb	r1, [r0, #20]
 8018a78:	4604      	mov	r4, r0
 8018a7a:	f7f6 fa55 	bl	800ef28 <ucdr_serialize_endian_uint32_t>
 8018a7e:	b90d      	cbnz	r5, 8018a84 <ucdr_serialize_sequence_uint8_t+0x14>
 8018a80:	2001      	movs	r0, #1
 8018a82:	bd70      	pop	{r4, r5, r6, pc}
 8018a84:	462b      	mov	r3, r5
 8018a86:	4632      	mov	r2, r6
 8018a88:	7d21      	ldrb	r1, [r4, #20]
 8018a8a:	4620      	mov	r0, r4
 8018a8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018a90:	f7f5 be2a 	b.w	800e6e8 <ucdr_serialize_endian_array_uint8_t>

08018a94 <ucdr_deserialize_sequence_uint8_t>:
 8018a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a98:	461d      	mov	r5, r3
 8018a9a:	4616      	mov	r6, r2
 8018a9c:	460f      	mov	r7, r1
 8018a9e:	461a      	mov	r2, r3
 8018aa0:	7d01      	ldrb	r1, [r0, #20]
 8018aa2:	4604      	mov	r4, r0
 8018aa4:	f7f6 fb68 	bl	800f178 <ucdr_deserialize_endian_uint32_t>
 8018aa8:	682b      	ldr	r3, [r5, #0]
 8018aaa:	429e      	cmp	r6, r3
 8018aac:	d201      	bcs.n	8018ab2 <ucdr_deserialize_sequence_uint8_t+0x1e>
 8018aae:	2201      	movs	r2, #1
 8018ab0:	75a2      	strb	r2, [r4, #22]
 8018ab2:	b913      	cbnz	r3, 8018aba <ucdr_deserialize_sequence_uint8_t+0x26>
 8018ab4:	2001      	movs	r0, #1
 8018ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018aba:	463a      	mov	r2, r7
 8018abc:	7d21      	ldrb	r1, [r4, #20]
 8018abe:	4620      	mov	r0, r4
 8018ac0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018ac4:	f7f5 be76 	b.w	800e7b4 <ucdr_deserialize_endian_array_uint8_t>

08018ac8 <ucdr_serialize_string>:
 8018ac8:	b510      	push	{r4, lr}
 8018aca:	b082      	sub	sp, #8
 8018acc:	4604      	mov	r4, r0
 8018ace:	4608      	mov	r0, r1
 8018ad0:	9101      	str	r1, [sp, #4]
 8018ad2:	f7e7 fc15 	bl	8000300 <strlen>
 8018ad6:	4602      	mov	r2, r0
 8018ad8:	9901      	ldr	r1, [sp, #4]
 8018ada:	4620      	mov	r0, r4
 8018adc:	3201      	adds	r2, #1
 8018ade:	b002      	add	sp, #8
 8018ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018ae4:	f7ff bf98 	b.w	8018a18 <ucdr_serialize_sequence_char>

08018ae8 <ucdr_deserialize_string>:
 8018ae8:	b500      	push	{lr}
 8018aea:	b083      	sub	sp, #12
 8018aec:	ab01      	add	r3, sp, #4
 8018aee:	f7ff ffa5 	bl	8018a3c <ucdr_deserialize_sequence_char>
 8018af2:	b003      	add	sp, #12
 8018af4:	f85d fb04 	ldr.w	pc, [sp], #4

08018af8 <get_custom_error>:
 8018af8:	4b01      	ldr	r3, [pc, #4]	; (8018b00 <get_custom_error+0x8>)
 8018afa:	7818      	ldrb	r0, [r3, #0]
 8018afc:	4770      	bx	lr
 8018afe:	bf00      	nop
 8018b00:	200108c4 	.word	0x200108c4

08018b04 <recv_custom_msg>:
 8018b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b08:	4693      	mov	fp, r2
 8018b0a:	b089      	sub	sp, #36	; 0x24
 8018b0c:	2200      	movs	r2, #0
 8018b0e:	4604      	mov	r4, r0
 8018b10:	468a      	mov	sl, r1
 8018b12:	9305      	str	r3, [sp, #20]
 8018b14:	f88d 201e 	strb.w	r2, [sp, #30]
 8018b18:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 8018b1c:	b322      	cbz	r2, 8018b68 <recv_custom_msg+0x64>
 8018b1e:	f200 2902 	addw	r9, r0, #514	; 0x202
 8018b22:	f10d 081f 	add.w	r8, sp, #31
 8018b26:	af05      	add	r7, sp, #20
 8018b28:	f10d 061e 	add.w	r6, sp, #30
 8018b2c:	f44f 7500 	mov.w	r5, #512	; 0x200
 8018b30:	e002      	b.n	8018b38 <recv_custom_msg+0x34>
 8018b32:	9b05      	ldr	r3, [sp, #20]
 8018b34:	2b00      	cmp	r3, #0
 8018b36:	dd0f      	ble.n	8018b58 <recv_custom_msg+0x54>
 8018b38:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8018b3c:	4623      	mov	r3, r4
 8018b3e:	4622      	mov	r2, r4
 8018b40:	4648      	mov	r0, r9
 8018b42:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8018b46:	e9cd 5600 	strd	r5, r6, [sp]
 8018b4a:	f001 f911 	bl	8019d70 <uxr_read_framed_msg>
 8018b4e:	2800      	cmp	r0, #0
 8018b50:	d0ef      	beq.n	8018b32 <recv_custom_msg+0x2e>
 8018b52:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8018b56:	b1b3      	cbz	r3, 8018b86 <recv_custom_msg+0x82>
 8018b58:	4b0f      	ldr	r3, [pc, #60]	; (8018b98 <recv_custom_msg+0x94>)
 8018b5a:	2000      	movs	r0, #0
 8018b5c:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8018b60:	701a      	strb	r2, [r3, #0]
 8018b62:	b009      	add	sp, #36	; 0x24
 8018b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b68:	f10d 021f 	add.w	r2, sp, #31
 8018b6c:	4601      	mov	r1, r0
 8018b6e:	9200      	str	r2, [sp, #0]
 8018b70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018b74:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8018b78:	47a8      	blx	r5
 8018b7a:	2800      	cmp	r0, #0
 8018b7c:	d0ec      	beq.n	8018b58 <recv_custom_msg+0x54>
 8018b7e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	d1e8      	bne.n	8018b58 <recv_custom_msg+0x54>
 8018b86:	f8cb 0000 	str.w	r0, [fp]
 8018b8a:	2001      	movs	r0, #1
 8018b8c:	f8ca 4000 	str.w	r4, [sl]
 8018b90:	b009      	add	sp, #36	; 0x24
 8018b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b96:	bf00      	nop
 8018b98:	200108c4 	.word	0x200108c4

08018b9c <send_custom_msg>:
 8018b9c:	b530      	push	{r4, r5, lr}
 8018b9e:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 8018ba2:	b087      	sub	sp, #28
 8018ba4:	4614      	mov	r4, r2
 8018ba6:	b995      	cbnz	r5, 8018bce <send_custom_msg+0x32>
 8018ba8:	f8d0 5270 	ldr.w	r5, [r0, #624]	; 0x270
 8018bac:	f10d 0317 	add.w	r3, sp, #23
 8018bb0:	47a8      	blx	r5
 8018bb2:	1e03      	subs	r3, r0, #0
 8018bb4:	bf18      	it	ne
 8018bb6:	2301      	movne	r3, #1
 8018bb8:	42a0      	cmp	r0, r4
 8018bba:	bf18      	it	ne
 8018bbc:	2300      	movne	r3, #0
 8018bbe:	b91b      	cbnz	r3, 8018bc8 <send_custom_msg+0x2c>
 8018bc0:	4a0a      	ldr	r2, [pc, #40]	; (8018bec <send_custom_msg+0x50>)
 8018bc2:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8018bc6:	7011      	strb	r1, [r2, #0]
 8018bc8:	4618      	mov	r0, r3
 8018bca:	b007      	add	sp, #28
 8018bcc:	bd30      	pop	{r4, r5, pc}
 8018bce:	460b      	mov	r3, r1
 8018bd0:	2200      	movs	r2, #0
 8018bd2:	f10d 0117 	add.w	r1, sp, #23
 8018bd6:	9400      	str	r4, [sp, #0]
 8018bd8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8018bdc:	4602      	mov	r2, r0
 8018bde:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8018be2:	f200 2002 	addw	r0, r0, #514	; 0x202
 8018be6:	f000 fee5 	bl	80199b4 <uxr_write_framed_msg>
 8018bea:	e7e2      	b.n	8018bb2 <send_custom_msg+0x16>
 8018bec:	200108c4 	.word	0x200108c4

08018bf0 <uxr_set_custom_transport_callbacks>:
 8018bf0:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 8018bf4:	9901      	ldr	r1, [sp, #4]
 8018bf6:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 8018bfa:	9b00      	ldr	r3, [sp, #0]
 8018bfc:	e9c0 319c 	strd	r3, r1, [r0, #624]	; 0x270
 8018c00:	4770      	bx	lr
 8018c02:	bf00      	nop

08018c04 <uxr_init_custom_transport>:
 8018c04:	b538      	push	{r3, r4, r5, lr}
 8018c06:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 8018c0a:	b303      	cbz	r3, 8018c4e <uxr_init_custom_transport+0x4a>
 8018c0c:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8018c10:	4604      	mov	r4, r0
 8018c12:	b1e2      	cbz	r2, 8018c4e <uxr_init_custom_transport+0x4a>
 8018c14:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8018c18:	b1ca      	cbz	r2, 8018c4e <uxr_init_custom_transport+0x4a>
 8018c1a:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 8018c1e:	b1b2      	cbz	r2, 8018c4e <uxr_init_custom_transport+0x4a>
 8018c20:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8018c24:	4798      	blx	r3
 8018c26:	4605      	mov	r5, r0
 8018c28:	b188      	cbz	r0, 8018c4e <uxr_init_custom_transport+0x4a>
 8018c2a:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8018c2e:	b98b      	cbnz	r3, 8018c54 <uxr_init_custom_transport+0x50>
 8018c30:	4b0b      	ldr	r3, [pc, #44]	; (8018c60 <uxr_init_custom_transport+0x5c>)
 8018c32:	4628      	mov	r0, r5
 8018c34:	490b      	ldr	r1, [pc, #44]	; (8018c64 <uxr_init_custom_transport+0x60>)
 8018c36:	4a0c      	ldr	r2, [pc, #48]	; (8018c68 <uxr_init_custom_transport+0x64>)
 8018c38:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 8018c3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018c40:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 8018c44:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 8018c48:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 8018c4c:	bd38      	pop	{r3, r4, r5, pc}
 8018c4e:	2500      	movs	r5, #0
 8018c50:	4628      	mov	r0, r5
 8018c52:	bd38      	pop	{r3, r4, r5, pc}
 8018c54:	2100      	movs	r1, #0
 8018c56:	f204 2002 	addw	r0, r4, #514	; 0x202
 8018c5a:	f000 fea5 	bl	80199a8 <uxr_init_framing_io>
 8018c5e:	e7e7      	b.n	8018c30 <uxr_init_custom_transport+0x2c>
 8018c60:	08018b05 	.word	0x08018b05
 8018c64:	08018b9d 	.word	0x08018b9d
 8018c68:	08018af9 	.word	0x08018af9

08018c6c <uxr_close_custom_transport>:
 8018c6c:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8018c70:	4718      	bx	r3
 8018c72:	bf00      	nop

08018c74 <uxr_init_input_best_effort_stream>:
 8018c74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018c78:	8003      	strh	r3, [r0, #0]
 8018c7a:	4770      	bx	lr

08018c7c <uxr_reset_input_best_effort_stream>:
 8018c7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018c80:	8003      	strh	r3, [r0, #0]
 8018c82:	4770      	bx	lr

08018c84 <uxr_receive_best_effort_message>:
 8018c84:	b538      	push	{r3, r4, r5, lr}
 8018c86:	4604      	mov	r4, r0
 8018c88:	8800      	ldrh	r0, [r0, #0]
 8018c8a:	460d      	mov	r5, r1
 8018c8c:	f000 fe74 	bl	8019978 <uxr_seq_num_cmp>
 8018c90:	4603      	mov	r3, r0
 8018c92:	0fc0      	lsrs	r0, r0, #31
 8018c94:	2b00      	cmp	r3, #0
 8018c96:	bfb8      	it	lt
 8018c98:	8025      	strhlt	r5, [r4, #0]
 8018c9a:	bd38      	pop	{r3, r4, r5, pc}

08018c9c <on_full_input_buffer>:
 8018c9c:	b570      	push	{r4, r5, r6, lr}
 8018c9e:	460c      	mov	r4, r1
 8018ca0:	4605      	mov	r5, r0
 8018ca2:	8908      	ldrh	r0, [r1, #8]
 8018ca4:	682b      	ldr	r3, [r5, #0]
 8018ca6:	7d26      	ldrb	r6, [r4, #20]
 8018ca8:	e9d1 1200 	ldrd	r1, r2, [r1]
 8018cac:	fbb2 f2f0 	udiv	r2, r2, r0
 8018cb0:	eba3 0c01 	sub.w	ip, r3, r1
 8018cb4:	fbbc fcf2 	udiv	ip, ip, r2
 8018cb8:	f10c 0c01 	add.w	ip, ip, #1
 8018cbc:	fa1f f38c 	uxth.w	r3, ip
 8018cc0:	fbb3 fcf0 	udiv	ip, r3, r0
 8018cc4:	fb00 331c 	mls	r3, r0, ip, r3
 8018cc8:	b29b      	uxth	r3, r3
 8018cca:	fb02 f303 	mul.w	r3, r2, r3
 8018cce:	1d18      	adds	r0, r3, #4
 8018cd0:	4408      	add	r0, r1
 8018cd2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8018cd6:	b116      	cbz	r6, 8018cde <on_full_input_buffer+0x42>
 8018cd8:	2600      	movs	r6, #0
 8018cda:	f840 6c04 	str.w	r6, [r0, #-4]
 8018cde:	2a03      	cmp	r2, #3
 8018ce0:	d801      	bhi.n	8018ce6 <on_full_input_buffer+0x4a>
 8018ce2:	2001      	movs	r0, #1
 8018ce4:	bd70      	pop	{r4, r5, r6, pc}
 8018ce6:	3308      	adds	r3, #8
 8018ce8:	4628      	mov	r0, r5
 8018cea:	3a04      	subs	r2, #4
 8018cec:	4419      	add	r1, r3
 8018cee:	692b      	ldr	r3, [r5, #16]
 8018cf0:	f7f7 f9c4 	bl	801007c <ucdr_init_buffer_origin>
 8018cf4:	4628      	mov	r0, r5
 8018cf6:	4622      	mov	r2, r4
 8018cf8:	4902      	ldr	r1, [pc, #8]	; (8018d04 <on_full_input_buffer+0x68>)
 8018cfa:	f7f7 f99b 	bl	8010034 <ucdr_set_on_full_buffer_callback>
 8018cfe:	2000      	movs	r0, #0
 8018d00:	bd70      	pop	{r4, r5, r6, pc}
 8018d02:	bf00      	nop
 8018d04:	08018c9d 	.word	0x08018c9d

08018d08 <uxr_init_input_reliable_stream>:
 8018d08:	b510      	push	{r4, lr}
 8018d0a:	e9c0 1200 	strd	r1, r2, [r0]
 8018d0e:	2400      	movs	r4, #0
 8018d10:	9a02      	ldr	r2, [sp, #8]
 8018d12:	8103      	strh	r3, [r0, #8]
 8018d14:	6102      	str	r2, [r0, #16]
 8018d16:	7504      	strb	r4, [r0, #20]
 8018d18:	b1c3      	cbz	r3, 8018d4c <uxr_init_input_reliable_stream+0x44>
 8018d1a:	600c      	str	r4, [r1, #0]
 8018d1c:	8901      	ldrh	r1, [r0, #8]
 8018d1e:	2901      	cmp	r1, #1
 8018d20:	d914      	bls.n	8018d4c <uxr_init_input_reliable_stream+0x44>
 8018d22:	f04f 0c01 	mov.w	ip, #1
 8018d26:	6843      	ldr	r3, [r0, #4]
 8018d28:	f10c 0e01 	add.w	lr, ip, #1
 8018d2c:	fbbc f2f1 	udiv	r2, ip, r1
 8018d30:	fbb3 f3f1 	udiv	r3, r3, r1
 8018d34:	fb01 c212 	mls	r2, r1, r2, ip
 8018d38:	fa1f fc8e 	uxth.w	ip, lr
 8018d3c:	b292      	uxth	r2, r2
 8018d3e:	fb02 f303 	mul.w	r3, r2, r3
 8018d42:	6802      	ldr	r2, [r0, #0]
 8018d44:	50d4      	str	r4, [r2, r3]
 8018d46:	8901      	ldrh	r1, [r0, #8]
 8018d48:	4561      	cmp	r1, ip
 8018d4a:	d8ec      	bhi.n	8018d26 <uxr_init_input_reliable_stream+0x1e>
 8018d4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018d50:	60c3      	str	r3, [r0, #12]
 8018d52:	bd10      	pop	{r4, pc}

08018d54 <uxr_reset_input_reliable_stream>:
 8018d54:	8901      	ldrh	r1, [r0, #8]
 8018d56:	b1d9      	cbz	r1, 8018d90 <uxr_reset_input_reliable_stream+0x3c>
 8018d58:	b510      	push	{r4, lr}
 8018d5a:	f04f 0e00 	mov.w	lr, #0
 8018d5e:	46f4      	mov	ip, lr
 8018d60:	4674      	mov	r4, lr
 8018d62:	6843      	ldr	r3, [r0, #4]
 8018d64:	f10e 0e01 	add.w	lr, lr, #1
 8018d68:	fbbc f2f1 	udiv	r2, ip, r1
 8018d6c:	fbb3 f3f1 	udiv	r3, r3, r1
 8018d70:	fb01 c212 	mls	r2, r1, r2, ip
 8018d74:	fa1f fc8e 	uxth.w	ip, lr
 8018d78:	b292      	uxth	r2, r2
 8018d7a:	fb02 f303 	mul.w	r3, r2, r3
 8018d7e:	6802      	ldr	r2, [r0, #0]
 8018d80:	50d4      	str	r4, [r2, r3]
 8018d82:	8901      	ldrh	r1, [r0, #8]
 8018d84:	4561      	cmp	r1, ip
 8018d86:	d8ec      	bhi.n	8018d62 <uxr_reset_input_reliable_stream+0xe>
 8018d88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018d8c:	60c3      	str	r3, [r0, #12]
 8018d8e:	bd10      	pop	{r4, pc}
 8018d90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018d94:	60c3      	str	r3, [r0, #12]
 8018d96:	4770      	bx	lr

08018d98 <uxr_receive_reliable_message>:
 8018d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018d9c:	4604      	mov	r4, r0
 8018d9e:	460d      	mov	r5, r1
 8018da0:	8901      	ldrh	r1, [r0, #8]
 8018da2:	4617      	mov	r7, r2
 8018da4:	8980      	ldrh	r0, [r0, #12]
 8018da6:	4698      	mov	r8, r3
 8018da8:	f000 fdde 	bl	8019968 <uxr_seq_num_add>
 8018dac:	4629      	mov	r1, r5
 8018dae:	4606      	mov	r6, r0
 8018db0:	89a0      	ldrh	r0, [r4, #12]
 8018db2:	f000 fde1 	bl	8019978 <uxr_seq_num_cmp>
 8018db6:	2800      	cmp	r0, #0
 8018db8:	db0a      	blt.n	8018dd0 <uxr_receive_reliable_message+0x38>
 8018dba:	2600      	movs	r6, #0
 8018dbc:	4629      	mov	r1, r5
 8018dbe:	89e0      	ldrh	r0, [r4, #14]
 8018dc0:	f000 fdda 	bl	8019978 <uxr_seq_num_cmp>
 8018dc4:	2800      	cmp	r0, #0
 8018dc6:	da00      	bge.n	8018dca <uxr_receive_reliable_message+0x32>
 8018dc8:	81e5      	strh	r5, [r4, #14]
 8018dca:	4630      	mov	r0, r6
 8018dcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018dd0:	4630      	mov	r0, r6
 8018dd2:	4629      	mov	r1, r5
 8018dd4:	f000 fdd0 	bl	8019978 <uxr_seq_num_cmp>
 8018dd8:	2800      	cmp	r0, #0
 8018dda:	dbee      	blt.n	8018dba <uxr_receive_reliable_message+0x22>
 8018ddc:	6923      	ldr	r3, [r4, #16]
 8018dde:	4638      	mov	r0, r7
 8018de0:	4798      	blx	r3
 8018de2:	4681      	mov	r9, r0
 8018de4:	2101      	movs	r1, #1
 8018de6:	89a0      	ldrh	r0, [r4, #12]
 8018de8:	f000 fdbe 	bl	8019968 <uxr_seq_num_add>
 8018dec:	f1b9 0f00 	cmp.w	r9, #0
 8018df0:	bf08      	it	eq
 8018df2:	4285      	cmpeq	r5, r0
 8018df4:	bf0c      	ite	eq
 8018df6:	2601      	moveq	r6, #1
 8018df8:	2600      	movne	r6, #0
 8018dfa:	d104      	bne.n	8018e06 <uxr_receive_reliable_message+0x6e>
 8018dfc:	2300      	movs	r3, #0
 8018dfe:	9a08      	ldr	r2, [sp, #32]
 8018e00:	81a0      	strh	r0, [r4, #12]
 8018e02:	7013      	strb	r3, [r2, #0]
 8018e04:	e7da      	b.n	8018dbc <uxr_receive_reliable_message+0x24>
 8018e06:	8922      	ldrh	r2, [r4, #8]
 8018e08:	6863      	ldr	r3, [r4, #4]
 8018e0a:	fbb5 f0f2 	udiv	r0, r5, r2
 8018e0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8018e12:	fb02 5010 	mls	r0, r2, r0, r5
 8018e16:	b280      	uxth	r0, r0
 8018e18:	fb03 f000 	mul.w	r0, r3, r0
 8018e1c:	6823      	ldr	r3, [r4, #0]
 8018e1e:	3004      	adds	r0, #4
 8018e20:	4418      	add	r0, r3
 8018e22:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018e26:	2b00      	cmp	r3, #0
 8018e28:	d1c7      	bne.n	8018dba <uxr_receive_reliable_message+0x22>
 8018e2a:	4639      	mov	r1, r7
 8018e2c:	4642      	mov	r2, r8
 8018e2e:	f002 fe5a 	bl	801bae6 <memcpy>
 8018e32:	8921      	ldrh	r1, [r4, #8]
 8018e34:	6863      	ldr	r3, [r4, #4]
 8018e36:	fbb5 f2f1 	udiv	r2, r5, r1
 8018e3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8018e3e:	fb01 5212 	mls	r2, r1, r2, r5
 8018e42:	b292      	uxth	r2, r2
 8018e44:	fb02 f303 	mul.w	r3, r2, r3
 8018e48:	6822      	ldr	r2, [r4, #0]
 8018e4a:	f842 8003 	str.w	r8, [r2, r3]
 8018e4e:	2301      	movs	r3, #1
 8018e50:	9a08      	ldr	r2, [sp, #32]
 8018e52:	7013      	strb	r3, [r2, #0]
 8018e54:	f1b9 0f00 	cmp.w	r9, #0
 8018e58:	d0af      	beq.n	8018dba <uxr_receive_reliable_message+0x22>
 8018e5a:	89a6      	ldrh	r6, [r4, #12]
 8018e5c:	2101      	movs	r1, #1
 8018e5e:	4630      	mov	r0, r6
 8018e60:	f000 fd82 	bl	8019968 <uxr_seq_num_add>
 8018e64:	8921      	ldrh	r1, [r4, #8]
 8018e66:	6863      	ldr	r3, [r4, #4]
 8018e68:	4606      	mov	r6, r0
 8018e6a:	fbb0 f2f1 	udiv	r2, r0, r1
 8018e6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8018e72:	fb01 0212 	mls	r2, r1, r2, r0
 8018e76:	6820      	ldr	r0, [r4, #0]
 8018e78:	b292      	uxth	r2, r2
 8018e7a:	fb02 f303 	mul.w	r3, r2, r3
 8018e7e:	3304      	adds	r3, #4
 8018e80:	4418      	add	r0, r3
 8018e82:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018e86:	2b00      	cmp	r3, #0
 8018e88:	d097      	beq.n	8018dba <uxr_receive_reliable_message+0x22>
 8018e8a:	6923      	ldr	r3, [r4, #16]
 8018e8c:	4798      	blx	r3
 8018e8e:	2802      	cmp	r0, #2
 8018e90:	d002      	beq.n	8018e98 <uxr_receive_reliable_message+0x100>
 8018e92:	2801      	cmp	r0, #1
 8018e94:	d0e2      	beq.n	8018e5c <uxr_receive_reliable_message+0xc4>
 8018e96:	e790      	b.n	8018dba <uxr_receive_reliable_message+0x22>
 8018e98:	2601      	movs	r6, #1
 8018e9a:	e78f      	b.n	8018dbc <uxr_receive_reliable_message+0x24>

08018e9c <uxr_next_input_reliable_buffer_available>:
 8018e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018ea0:	4604      	mov	r4, r0
 8018ea2:	460f      	mov	r7, r1
 8018ea4:	8980      	ldrh	r0, [r0, #12]
 8018ea6:	2101      	movs	r1, #1
 8018ea8:	4690      	mov	r8, r2
 8018eaa:	f000 fd5d 	bl	8019968 <uxr_seq_num_add>
 8018eae:	8922      	ldrh	r2, [r4, #8]
 8018eb0:	6866      	ldr	r6, [r4, #4]
 8018eb2:	fbb0 f3f2 	udiv	r3, r0, r2
 8018eb6:	fbb6 f6f2 	udiv	r6, r6, r2
 8018eba:	fb02 0313 	mls	r3, r2, r3, r0
 8018ebe:	b29b      	uxth	r3, r3
 8018ec0:	fb03 f606 	mul.w	r6, r3, r6
 8018ec4:	6823      	ldr	r3, [r4, #0]
 8018ec6:	3604      	adds	r6, #4
 8018ec8:	441e      	add	r6, r3
 8018eca:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8018ece:	f1b9 0f00 	cmp.w	r9, #0
 8018ed2:	d023      	beq.n	8018f1c <uxr_next_input_reliable_buffer_available+0x80>
 8018ed4:	4605      	mov	r5, r0
 8018ed6:	6923      	ldr	r3, [r4, #16]
 8018ed8:	4630      	mov	r0, r6
 8018eda:	4798      	blx	r3
 8018edc:	4682      	mov	sl, r0
 8018ede:	b300      	cbz	r0, 8018f22 <uxr_next_input_reliable_buffer_available+0x86>
 8018ee0:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8018ee4:	2101      	movs	r1, #1
 8018ee6:	4650      	mov	r0, sl
 8018ee8:	f000 fd3e 	bl	8019968 <uxr_seq_num_add>
 8018eec:	8921      	ldrh	r1, [r4, #8]
 8018eee:	4682      	mov	sl, r0
 8018ef0:	6863      	ldr	r3, [r4, #4]
 8018ef2:	6820      	ldr	r0, [r4, #0]
 8018ef4:	fbba f2f1 	udiv	r2, sl, r1
 8018ef8:	fbb3 f3f1 	udiv	r3, r3, r1
 8018efc:	fb01 a212 	mls	r2, r1, r2, sl
 8018f00:	b292      	uxth	r2, r2
 8018f02:	fb02 f303 	mul.w	r3, r2, r3
 8018f06:	3304      	adds	r3, #4
 8018f08:	4418      	add	r0, r3
 8018f0a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018f0e:	b12b      	cbz	r3, 8018f1c <uxr_next_input_reliable_buffer_available+0x80>
 8018f10:	6923      	ldr	r3, [r4, #16]
 8018f12:	4798      	blx	r3
 8018f14:	2802      	cmp	r0, #2
 8018f16:	d01b      	beq.n	8018f50 <uxr_next_input_reliable_buffer_available+0xb4>
 8018f18:	2801      	cmp	r0, #1
 8018f1a:	d0e3      	beq.n	8018ee4 <uxr_next_input_reliable_buffer_available+0x48>
 8018f1c:	2000      	movs	r0, #0
 8018f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018f22:	464a      	mov	r2, r9
 8018f24:	4631      	mov	r1, r6
 8018f26:	4638      	mov	r0, r7
 8018f28:	f7f7 f8b0 	bl	801008c <ucdr_init_buffer>
 8018f2c:	8921      	ldrh	r1, [r4, #8]
 8018f2e:	6863      	ldr	r3, [r4, #4]
 8018f30:	2001      	movs	r0, #1
 8018f32:	fbb5 f2f1 	udiv	r2, r5, r1
 8018f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8018f3a:	fb01 5212 	mls	r2, r1, r2, r5
 8018f3e:	b292      	uxth	r2, r2
 8018f40:	fb02 f303 	mul.w	r3, r2, r3
 8018f44:	6822      	ldr	r2, [r4, #0]
 8018f46:	f842 a003 	str.w	sl, [r2, r3]
 8018f4a:	81a5      	strh	r5, [r4, #12]
 8018f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018f50:	8920      	ldrh	r0, [r4, #8]
 8018f52:	eb06 0108 	add.w	r1, r6, r8
 8018f56:	6863      	ldr	r3, [r4, #4]
 8018f58:	eba9 0208 	sub.w	r2, r9, r8
 8018f5c:	fbb5 f6f0 	udiv	r6, r5, r0
 8018f60:	fbb3 f3f0 	udiv	r3, r3, r0
 8018f64:	fb00 5516 	mls	r5, r0, r6, r5
 8018f68:	2000      	movs	r0, #0
 8018f6a:	b2ad      	uxth	r5, r5
 8018f6c:	fb03 f505 	mul.w	r5, r3, r5
 8018f70:	6823      	ldr	r3, [r4, #0]
 8018f72:	5158      	str	r0, [r3, r5]
 8018f74:	4638      	mov	r0, r7
 8018f76:	f7f7 f889 	bl	801008c <ucdr_init_buffer>
 8018f7a:	4638      	mov	r0, r7
 8018f7c:	4622      	mov	r2, r4
 8018f7e:	4903      	ldr	r1, [pc, #12]	; (8018f8c <uxr_next_input_reliable_buffer_available+0xf0>)
 8018f80:	f7f7 f858 	bl	8010034 <ucdr_set_on_full_buffer_callback>
 8018f84:	2001      	movs	r0, #1
 8018f86:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8018f8a:	e7c8      	b.n	8018f1e <uxr_next_input_reliable_buffer_available+0x82>
 8018f8c:	08018c9d 	.word	0x08018c9d

08018f90 <uxr_process_heartbeat>:
 8018f90:	b538      	push	{r3, r4, r5, lr}
 8018f92:	4611      	mov	r1, r2
 8018f94:	4604      	mov	r4, r0
 8018f96:	89c0      	ldrh	r0, [r0, #14]
 8018f98:	4615      	mov	r5, r2
 8018f9a:	f000 fced 	bl	8019978 <uxr_seq_num_cmp>
 8018f9e:	2800      	cmp	r0, #0
 8018fa0:	bfb8      	it	lt
 8018fa2:	81e5      	strhlt	r5, [r4, #14]
 8018fa4:	bd38      	pop	{r3, r4, r5, pc}
 8018fa6:	bf00      	nop

08018fa8 <uxr_compute_acknack>:
 8018fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018fac:	8903      	ldrh	r3, [r0, #8]
 8018fae:	4604      	mov	r4, r0
 8018fb0:	460f      	mov	r7, r1
 8018fb2:	8985      	ldrh	r5, [r0, #12]
 8018fb4:	b1db      	cbz	r3, 8018fee <uxr_compute_acknack+0x46>
 8018fb6:	4628      	mov	r0, r5
 8018fb8:	2601      	movs	r6, #1
 8018fba:	e004      	b.n	8018fc6 <uxr_compute_acknack+0x1e>
 8018fbc:	4566      	cmp	r6, ip
 8018fbe:	f106 0601 	add.w	r6, r6, #1
 8018fc2:	d214      	bcs.n	8018fee <uxr_compute_acknack+0x46>
 8018fc4:	89a0      	ldrh	r0, [r4, #12]
 8018fc6:	b2b1      	uxth	r1, r6
 8018fc8:	f000 fcce 	bl	8019968 <uxr_seq_num_add>
 8018fcc:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018fd0:	fbb0 f2fc 	udiv	r2, r0, ip
 8018fd4:	e9d4 1300 	ldrd	r1, r3, [r4]
 8018fd8:	fb0c 0212 	mls	r2, ip, r2, r0
 8018fdc:	fbb3 f3fc 	udiv	r3, r3, ip
 8018fe0:	b292      	uxth	r2, r2
 8018fe2:	fb02 f303 	mul.w	r3, r2, r3
 8018fe6:	58cb      	ldr	r3, [r1, r3]
 8018fe8:	2b00      	cmp	r3, #0
 8018fea:	d1e7      	bne.n	8018fbc <uxr_compute_acknack+0x14>
 8018fec:	4605      	mov	r5, r0
 8018fee:	803d      	strh	r5, [r7, #0]
 8018ff0:	2101      	movs	r1, #1
 8018ff2:	89e6      	ldrh	r6, [r4, #14]
 8018ff4:	4628      	mov	r0, r5
 8018ff6:	f000 fcbb 	bl	8019970 <uxr_seq_num_sub>
 8018ffa:	4601      	mov	r1, r0
 8018ffc:	4630      	mov	r0, r6
 8018ffe:	f000 fcb7 	bl	8019970 <uxr_seq_num_sub>
 8019002:	4606      	mov	r6, r0
 8019004:	b328      	cbz	r0, 8019052 <uxr_compute_acknack+0xaa>
 8019006:	f04f 0900 	mov.w	r9, #0
 801900a:	f04f 0801 	mov.w	r8, #1
 801900e:	464d      	mov	r5, r9
 8019010:	fa1f f189 	uxth.w	r1, r9
 8019014:	8838      	ldrh	r0, [r7, #0]
 8019016:	f000 fca7 	bl	8019968 <uxr_seq_num_add>
 801901a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801901e:	6861      	ldr	r1, [r4, #4]
 8019020:	fa08 fe09 	lsl.w	lr, r8, r9
 8019024:	6822      	ldr	r2, [r4, #0]
 8019026:	f109 0901 	add.w	r9, r9, #1
 801902a:	ea4e 0e05 	orr.w	lr, lr, r5
 801902e:	fbb0 f3fc 	udiv	r3, r0, ip
 8019032:	fbb1 f1fc 	udiv	r1, r1, ip
 8019036:	fb03 001c 	mls	r0, r3, ip, r0
 801903a:	b283      	uxth	r3, r0
 801903c:	fb01 f303 	mul.w	r3, r1, r3
 8019040:	58d3      	ldr	r3, [r2, r3]
 8019042:	b90b      	cbnz	r3, 8019048 <uxr_compute_acknack+0xa0>
 8019044:	fa1f f58e 	uxth.w	r5, lr
 8019048:	454e      	cmp	r6, r9
 801904a:	d1e1      	bne.n	8019010 <uxr_compute_acknack+0x68>
 801904c:	4628      	mov	r0, r5
 801904e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019052:	4605      	mov	r5, r0
 8019054:	4628      	mov	r0, r5
 8019056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801905a:	bf00      	nop

0801905c <uxr_init_output_best_effort_stream>:
 801905c:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8019060:	6001      	str	r1, [r0, #0]
 8019062:	7303      	strb	r3, [r0, #12]
 8019064:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8019068:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801906c:	4770      	bx	lr
 801906e:	bf00      	nop

08019070 <uxr_reset_output_best_effort_stream>:
 8019070:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019074:	7b03      	ldrb	r3, [r0, #12]
 8019076:	81c2      	strh	r2, [r0, #14]
 8019078:	6043      	str	r3, [r0, #4]
 801907a:	4770      	bx	lr

0801907c <uxr_prepare_best_effort_buffer_to_write>:
 801907c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801907e:	4604      	mov	r4, r0
 8019080:	b083      	sub	sp, #12
 8019082:	6840      	ldr	r0, [r0, #4]
 8019084:	460d      	mov	r5, r1
 8019086:	4616      	mov	r6, r2
 8019088:	f7f8 fc4e 	bl	8011928 <uxr_submessage_padding>
 801908c:	6863      	ldr	r3, [r4, #4]
 801908e:	4418      	add	r0, r3
 8019090:	68a3      	ldr	r3, [r4, #8]
 8019092:	1942      	adds	r2, r0, r5
 8019094:	4293      	cmp	r3, r2
 8019096:	bf2c      	ite	cs
 8019098:	2701      	movcs	r7, #1
 801909a:	2700      	movcc	r7, #0
 801909c:	d202      	bcs.n	80190a4 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801909e:	4638      	mov	r0, r7
 80190a0:	b003      	add	sp, #12
 80190a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80190a4:	9000      	str	r0, [sp, #0]
 80190a6:	2300      	movs	r3, #0
 80190a8:	4630      	mov	r0, r6
 80190aa:	6821      	ldr	r1, [r4, #0]
 80190ac:	f7f6 ffdc 	bl	8010068 <ucdr_init_buffer_origin_offset>
 80190b0:	6861      	ldr	r1, [r4, #4]
 80190b2:	4638      	mov	r0, r7
 80190b4:	4429      	add	r1, r5
 80190b6:	6061      	str	r1, [r4, #4]
 80190b8:	b003      	add	sp, #12
 80190ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080190bc <uxr_prepare_best_effort_buffer_to_send>:
 80190bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190c0:	4604      	mov	r4, r0
 80190c2:	461d      	mov	r5, r3
 80190c4:	6840      	ldr	r0, [r0, #4]
 80190c6:	7b23      	ldrb	r3, [r4, #12]
 80190c8:	4298      	cmp	r0, r3
 80190ca:	bf8c      	ite	hi
 80190cc:	2601      	movhi	r6, #1
 80190ce:	2600      	movls	r6, #0
 80190d0:	d802      	bhi.n	80190d8 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 80190d2:	4630      	mov	r0, r6
 80190d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80190d8:	4688      	mov	r8, r1
 80190da:	89e0      	ldrh	r0, [r4, #14]
 80190dc:	2101      	movs	r1, #1
 80190de:	4617      	mov	r7, r2
 80190e0:	f000 fc42 	bl	8019968 <uxr_seq_num_add>
 80190e4:	6823      	ldr	r3, [r4, #0]
 80190e6:	81e0      	strh	r0, [r4, #14]
 80190e8:	8028      	strh	r0, [r5, #0]
 80190ea:	4630      	mov	r0, r6
 80190ec:	f8c8 3000 	str.w	r3, [r8]
 80190f0:	6863      	ldr	r3, [r4, #4]
 80190f2:	603b      	str	r3, [r7, #0]
 80190f4:	7b23      	ldrb	r3, [r4, #12]
 80190f6:	6063      	str	r3, [r4, #4]
 80190f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080190fc <on_full_output_buffer>:
 80190fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80190fe:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8019102:	460c      	mov	r4, r1
 8019104:	6803      	ldr	r3, [r0, #0]
 8019106:	4605      	mov	r5, r0
 8019108:	7b26      	ldrb	r6, [r4, #12]
 801910a:	e9d1 1200 	ldrd	r1, r2, [r1]
 801910e:	fbb2 f2fc 	udiv	r2, r2, ip
 8019112:	eba3 0e01 	sub.w	lr, r3, r1
 8019116:	6903      	ldr	r3, [r0, #16]
 8019118:	fbbe fef2 	udiv	lr, lr, r2
 801911c:	f10e 0e01 	add.w	lr, lr, #1
 8019120:	fa1f fe8e 	uxth.w	lr, lr
 8019124:	fbbe f7fc 	udiv	r7, lr, ip
 8019128:	fb0c ec17 	mls	ip, ip, r7, lr
 801912c:	fa1f fc8c 	uxth.w	ip, ip
 8019130:	fb02 fc0c 	mul.w	ip, r2, ip
 8019134:	f851 200c 	ldr.w	r2, [r1, ip]
 8019138:	44b4      	add	ip, r6
 801913a:	1b92      	subs	r2, r2, r6
 801913c:	f10c 0c08 	add.w	ip, ip, #8
 8019140:	3a04      	subs	r2, #4
 8019142:	4461      	add	r1, ip
 8019144:	f7f6 ff9a 	bl	801007c <ucdr_init_buffer_origin>
 8019148:	4628      	mov	r0, r5
 801914a:	4622      	mov	r2, r4
 801914c:	4902      	ldr	r1, [pc, #8]	; (8019158 <on_full_output_buffer+0x5c>)
 801914e:	f7f6 ff71 	bl	8010034 <ucdr_set_on_full_buffer_callback>
 8019152:	2000      	movs	r0, #0
 8019154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019156:	bf00      	nop
 8019158:	080190fd 	.word	0x080190fd

0801915c <uxr_init_output_reliable_stream>:
 801915c:	b530      	push	{r4, r5, lr}
 801915e:	f89d 400c 	ldrb.w	r4, [sp, #12]
 8019162:	8103      	strh	r3, [r0, #8]
 8019164:	7304      	strb	r4, [r0, #12]
 8019166:	e9c0 1200 	strd	r1, r2, [r0]
 801916a:	b1e3      	cbz	r3, 80191a6 <uxr_init_output_reliable_stream+0x4a>
 801916c:	600c      	str	r4, [r1, #0]
 801916e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8019172:	f1bc 0f01 	cmp.w	ip, #1
 8019176:	d916      	bls.n	80191a6 <uxr_init_output_reliable_stream+0x4a>
 8019178:	f04f 0e01 	mov.w	lr, #1
 801917c:	6843      	ldr	r3, [r0, #4]
 801917e:	f10e 0501 	add.w	r5, lr, #1
 8019182:	7b04      	ldrb	r4, [r0, #12]
 8019184:	6801      	ldr	r1, [r0, #0]
 8019186:	fbbe f2fc 	udiv	r2, lr, ip
 801918a:	fbb3 f3fc 	udiv	r3, r3, ip
 801918e:	fb0c e212 	mls	r2, ip, r2, lr
 8019192:	fa1f fe85 	uxth.w	lr, r5
 8019196:	b292      	uxth	r2, r2
 8019198:	fb02 f303 	mul.w	r3, r2, r3
 801919c:	50cc      	str	r4, [r1, r3]
 801919e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80191a2:	45f4      	cmp	ip, lr
 80191a4:	d8ea      	bhi.n	801917c <uxr_init_output_reliable_stream+0x20>
 80191a6:	4b07      	ldr	r3, [pc, #28]	; (80191c4 <uxr_init_output_reliable_stream+0x68>)
 80191a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80191ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80191b0:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 80191b4:	f8c0 300e 	str.w	r3, [r0, #14]
 80191b8:	2300      	movs	r3, #0
 80191ba:	8242      	strh	r2, [r0, #18]
 80191bc:	8403      	strh	r3, [r0, #32]
 80191be:	e9c0 4506 	strd	r4, r5, [r0, #24]
 80191c2:	bd30      	pop	{r4, r5, pc}
 80191c4:	ffff0000 	.word	0xffff0000

080191c8 <uxr_reset_output_reliable_stream>:
 80191c8:	8901      	ldrh	r1, [r0, #8]
 80191ca:	b510      	push	{r4, lr}
 80191cc:	b1b1      	cbz	r1, 80191fc <uxr_reset_output_reliable_stream+0x34>
 80191ce:	f04f 0e00 	mov.w	lr, #0
 80191d2:	46f4      	mov	ip, lr
 80191d4:	6843      	ldr	r3, [r0, #4]
 80191d6:	f10e 0e01 	add.w	lr, lr, #1
 80191da:	7b04      	ldrb	r4, [r0, #12]
 80191dc:	fbbc f2f1 	udiv	r2, ip, r1
 80191e0:	fbb3 f3f1 	udiv	r3, r3, r1
 80191e4:	fb01 c212 	mls	r2, r1, r2, ip
 80191e8:	fa1f fc8e 	uxth.w	ip, lr
 80191ec:	b292      	uxth	r2, r2
 80191ee:	fb02 f303 	mul.w	r3, r2, r3
 80191f2:	6802      	ldr	r2, [r0, #0]
 80191f4:	50d4      	str	r4, [r2, r3]
 80191f6:	8901      	ldrh	r1, [r0, #8]
 80191f8:	4561      	cmp	r1, ip
 80191fa:	d8eb      	bhi.n	80191d4 <uxr_reset_output_reliable_stream+0xc>
 80191fc:	4b08      	ldr	r3, [pc, #32]	; (8019220 <uxr_reset_output_reliable_stream+0x58>)
 80191fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019202:	ed9f 7b05 	vldr	d7, [pc, #20]	; 8019218 <uxr_reset_output_reliable_stream+0x50>
 8019206:	f8c0 300e 	str.w	r3, [r0, #14]
 801920a:	2300      	movs	r3, #0
 801920c:	8242      	strh	r2, [r0, #18]
 801920e:	8403      	strh	r3, [r0, #32]
 8019210:	ed80 7b06 	vstr	d7, [r0, #24]
 8019214:	bd10      	pop	{r4, pc}
 8019216:	bf00      	nop
 8019218:	ffffffff 	.word	0xffffffff
 801921c:	7fffffff 	.word	0x7fffffff
 8019220:	ffff0000 	.word	0xffff0000

08019224 <uxr_prepare_reliable_buffer_to_write>:
 8019224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019228:	4604      	mov	r4, r0
 801922a:	b091      	sub	sp, #68	; 0x44
 801922c:	8900      	ldrh	r0, [r0, #8]
 801922e:	468b      	mov	fp, r1
 8019230:	89e6      	ldrh	r6, [r4, #14]
 8019232:	9204      	str	r2, [sp, #16]
 8019234:	6865      	ldr	r5, [r4, #4]
 8019236:	6823      	ldr	r3, [r4, #0]
 8019238:	f894 900c 	ldrb.w	r9, [r4, #12]
 801923c:	fbb6 f2f0 	udiv	r2, r6, r0
 8019240:	fbb5 f5f0 	udiv	r5, r5, r0
 8019244:	fb00 6212 	mls	r2, r0, r2, r6
 8019248:	1f2f      	subs	r7, r5, #4
 801924a:	b292      	uxth	r2, r2
 801924c:	fb05 3202 	mla	r2, r5, r2, r3
 8019250:	1d11      	adds	r1, r2, #4
 8019252:	f8d2 8000 	ldr.w	r8, [r2]
 8019256:	9103      	str	r1, [sp, #12]
 8019258:	2800      	cmp	r0, #0
 801925a:	f000 814a 	beq.w	80194f2 <uxr_prepare_reliable_buffer_to_write+0x2ce>
 801925e:	f04f 0c00 	mov.w	ip, #0
 8019262:	46e2      	mov	sl, ip
 8019264:	4661      	mov	r1, ip
 8019266:	f10c 0c01 	add.w	ip, ip, #1
 801926a:	fbb1 f2f0 	udiv	r2, r1, r0
 801926e:	fb00 1212 	mls	r2, r0, r2, r1
 8019272:	fa1f f18c 	uxth.w	r1, ip
 8019276:	b292      	uxth	r2, r2
 8019278:	fb05 f202 	mul.w	r2, r5, r2
 801927c:	589a      	ldr	r2, [r3, r2]
 801927e:	454a      	cmp	r2, r9
 8019280:	d103      	bne.n	801928a <uxr_prepare_reliable_buffer_to_write+0x66>
 8019282:	f10a 0a01 	add.w	sl, sl, #1
 8019286:	fa1f fa8a 	uxth.w	sl, sl
 801928a:	4281      	cmp	r1, r0
 801928c:	d3eb      	bcc.n	8019266 <uxr_prepare_reliable_buffer_to_write+0x42>
 801928e:	4640      	mov	r0, r8
 8019290:	2104      	movs	r1, #4
 8019292:	f8cd a014 	str.w	sl, [sp, #20]
 8019296:	f7f6 fefd 	bl	8010094 <ucdr_alignment>
 801929a:	4480      	add	r8, r0
 801929c:	eb08 020b 	add.w	r2, r8, fp
 80192a0:	42ba      	cmp	r2, r7
 80192a2:	f240 80ca 	bls.w	801943a <uxr_prepare_reliable_buffer_to_write+0x216>
 80192a6:	7b22      	ldrb	r2, [r4, #12]
 80192a8:	445a      	add	r2, fp
 80192aa:	42ba      	cmp	r2, r7
 80192ac:	f240 80b2 	bls.w	8019414 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 80192b0:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80192b4:	b2bb      	uxth	r3, r7
 80192b6:	eba2 0209 	sub.w	r2, r2, r9
 80192ba:	441a      	add	r2, r3
 80192bc:	b292      	uxth	r2, r2
 80192be:	fb0a f902 	mul.w	r9, sl, r2
 80192c2:	9205      	str	r2, [sp, #20]
 80192c4:	45d9      	cmp	r9, fp
 80192c6:	9206      	str	r2, [sp, #24]
 80192c8:	f0c0 80b3 	bcc.w	8019432 <uxr_prepare_reliable_buffer_to_write+0x20e>
 80192cc:	f108 0204 	add.w	r2, r8, #4
 80192d0:	42ba      	cmp	r2, r7
 80192d2:	f080 80da 	bcs.w	801948a <uxr_prepare_reliable_buffer_to_write+0x266>
 80192d6:	f1a3 0904 	sub.w	r9, r3, #4
 80192da:	9b05      	ldr	r3, [sp, #20]
 80192dc:	eba9 0908 	sub.w	r9, r9, r8
 80192e0:	fa1f f989 	uxth.w	r9, r9
 80192e4:	ebab 0b09 	sub.w	fp, fp, r9
 80192e8:	fbbb f2f3 	udiv	r2, fp, r3
 80192ec:	fb03 b312 	mls	r3, r3, r2, fp
 80192f0:	2b00      	cmp	r3, #0
 80192f2:	f040 80c4 	bne.w	801947e <uxr_prepare_reliable_buffer_to_write+0x25a>
 80192f6:	b293      	uxth	r3, r2
 80192f8:	4553      	cmp	r3, sl
 80192fa:	f200 809a 	bhi.w	8019432 <uxr_prepare_reliable_buffer_to_write+0x20e>
 80192fe:	2b00      	cmp	r3, #0
 8019300:	f000 80f9 	beq.w	80194f6 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8019304:	f8cd 801c 	str.w	r8, [sp, #28]
 8019308:	f04f 0a00 	mov.w	sl, #0
 801930c:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8019310:	f10d 0b20 	add.w	fp, sp, #32
 8019314:	9505      	str	r5, [sp, #20]
 8019316:	461d      	mov	r5, r3
 8019318:	e000      	b.n	801931c <uxr_prepare_reliable_buffer_to_write+0xf8>
 801931a:	46c1      	mov	r9, r8
 801931c:	8922      	ldrh	r2, [r4, #8]
 801931e:	4658      	mov	r0, fp
 8019320:	6863      	ldr	r3, [r4, #4]
 8019322:	f10a 0a01 	add.w	sl, sl, #1
 8019326:	fbb6 f1f2 	udiv	r1, r6, r2
 801932a:	fbb3 f3f2 	udiv	r3, r3, r2
 801932e:	fb02 6111 	mls	r1, r2, r1, r6
 8019332:	463a      	mov	r2, r7
 8019334:	b289      	uxth	r1, r1
 8019336:	fb03 f101 	mul.w	r1, r3, r1
 801933a:	6823      	ldr	r3, [r4, #0]
 801933c:	3104      	adds	r1, #4
 801933e:	4419      	add	r1, r3
 8019340:	2300      	movs	r3, #0
 8019342:	f851 cc04 	ldr.w	ip, [r1, #-4]
 8019346:	f8cd c000 	str.w	ip, [sp]
 801934a:	f7f6 fe8d 	bl	8010068 <ucdr_init_buffer_origin_offset>
 801934e:	464a      	mov	r2, r9
 8019350:	2300      	movs	r3, #0
 8019352:	210d      	movs	r1, #13
 8019354:	4658      	mov	r0, fp
 8019356:	f7f8 faa7 	bl	80118a8 <uxr_buffer_submessage_header>
 801935a:	8921      	ldrh	r1, [r4, #8]
 801935c:	6863      	ldr	r3, [r4, #4]
 801935e:	4630      	mov	r0, r6
 8019360:	fbb6 f2f1 	udiv	r2, r6, r1
 8019364:	fbb3 f3f1 	udiv	r3, r3, r1
 8019368:	fb01 6212 	mls	r2, r1, r2, r6
 801936c:	2101      	movs	r1, #1
 801936e:	b292      	uxth	r2, r2
 8019370:	fb02 f303 	mul.w	r3, r2, r3
 8019374:	6822      	ldr	r2, [r4, #0]
 8019376:	50d7      	str	r7, [r2, r3]
 8019378:	f000 faf6 	bl	8019968 <uxr_seq_num_add>
 801937c:	4606      	mov	r6, r0
 801937e:	fa1f f38a 	uxth.w	r3, sl
 8019382:	429d      	cmp	r5, r3
 8019384:	d8c9      	bhi.n	801931a <uxr_prepare_reliable_buffer_to_write+0xf6>
 8019386:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801938a:	9d05      	ldr	r5, [sp, #20]
 801938c:	8920      	ldrh	r0, [r4, #8]
 801938e:	463a      	mov	r2, r7
 8019390:	6863      	ldr	r3, [r4, #4]
 8019392:	fbb6 f1f0 	udiv	r1, r6, r0
 8019396:	fbb3 f3f0 	udiv	r3, r3, r0
 801939a:	fb00 6111 	mls	r1, r0, r1, r6
 801939e:	4658      	mov	r0, fp
 80193a0:	b289      	uxth	r1, r1
 80193a2:	fb01 f303 	mul.w	r3, r1, r3
 80193a6:	6821      	ldr	r1, [r4, #0]
 80193a8:	3304      	adds	r3, #4
 80193aa:	4419      	add	r1, r3
 80193ac:	2300      	movs	r3, #0
 80193ae:	f851 7c04 	ldr.w	r7, [r1, #-4]
 80193b2:	9700      	str	r7, [sp, #0]
 80193b4:	f7f6 fe58 	bl	8010068 <ucdr_init_buffer_origin_offset>
 80193b8:	9f06      	ldr	r7, [sp, #24]
 80193ba:	4658      	mov	r0, fp
 80193bc:	2302      	movs	r3, #2
 80193be:	b2ba      	uxth	r2, r7
 80193c0:	210d      	movs	r1, #13
 80193c2:	f7f8 fa71 	bl	80118a8 <uxr_buffer_submessage_header>
 80193c6:	f108 0104 	add.w	r1, r8, #4
 80193ca:	9b03      	ldr	r3, [sp, #12]
 80193cc:	f1a5 0208 	sub.w	r2, r5, #8
 80193d0:	8925      	ldrh	r5, [r4, #8]
 80193d2:	440b      	add	r3, r1
 80193d4:	eba2 0208 	sub.w	r2, r2, r8
 80193d8:	fbb6 f0f5 	udiv	r0, r6, r5
 80193dc:	4619      	mov	r1, r3
 80193de:	6863      	ldr	r3, [r4, #4]
 80193e0:	fb05 6010 	mls	r0, r5, r0, r6
 80193e4:	fbb3 f3f5 	udiv	r3, r3, r5
 80193e8:	b280      	uxth	r0, r0
 80193ea:	6825      	ldr	r5, [r4, #0]
 80193ec:	fb00 f303 	mul.w	r3, r0, r3
 80193f0:	7b20      	ldrb	r0, [r4, #12]
 80193f2:	3004      	adds	r0, #4
 80193f4:	4438      	add	r0, r7
 80193f6:	50e8      	str	r0, [r5, r3]
 80193f8:	9d04      	ldr	r5, [sp, #16]
 80193fa:	4628      	mov	r0, r5
 80193fc:	f7f6 fe46 	bl	801008c <ucdr_init_buffer>
 8019400:	4628      	mov	r0, r5
 8019402:	4622      	mov	r2, r4
 8019404:	493d      	ldr	r1, [pc, #244]	; (80194fc <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8019406:	f7f6 fe15 	bl	8010034 <ucdr_set_on_full_buffer_callback>
 801940a:	2001      	movs	r0, #1
 801940c:	81e6      	strh	r6, [r4, #14]
 801940e:	b011      	add	sp, #68	; 0x44
 8019410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019414:	2101      	movs	r1, #1
 8019416:	89e0      	ldrh	r0, [r4, #14]
 8019418:	f000 faa6 	bl	8019968 <uxr_seq_num_add>
 801941c:	4605      	mov	r5, r0
 801941e:	8921      	ldrh	r1, [r4, #8]
 8019420:	8a60      	ldrh	r0, [r4, #18]
 8019422:	f000 faa1 	bl	8019968 <uxr_seq_num_add>
 8019426:	4601      	mov	r1, r0
 8019428:	4628      	mov	r0, r5
 801942a:	f000 faa5 	bl	8019978 <uxr_seq_num_cmp>
 801942e:	2800      	cmp	r0, #0
 8019430:	dd44      	ble.n	80194bc <uxr_prepare_reliable_buffer_to_write+0x298>
 8019432:	2000      	movs	r0, #0
 8019434:	b011      	add	sp, #68	; 0x44
 8019436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801943a:	8921      	ldrh	r1, [r4, #8]
 801943c:	8a60      	ldrh	r0, [r4, #18]
 801943e:	9205      	str	r2, [sp, #20]
 8019440:	f000 fa92 	bl	8019968 <uxr_seq_num_add>
 8019444:	4601      	mov	r1, r0
 8019446:	4630      	mov	r0, r6
 8019448:	f000 fa96 	bl	8019978 <uxr_seq_num_cmp>
 801944c:	2800      	cmp	r0, #0
 801944e:	9a05      	ldr	r2, [sp, #20]
 8019450:	dcef      	bgt.n	8019432 <uxr_prepare_reliable_buffer_to_write+0x20e>
 8019452:	8925      	ldrh	r5, [r4, #8]
 8019454:	e9d4 7300 	ldrd	r7, r3, [r4]
 8019458:	fbb6 f4f5 	udiv	r4, r6, r5
 801945c:	fbb3 f3f5 	udiv	r3, r3, r5
 8019460:	fb05 6414 	mls	r4, r5, r4, r6
 8019464:	b2a4      	uxth	r4, r4
 8019466:	fb04 f303 	mul.w	r3, r4, r3
 801946a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801946e:	50fa      	str	r2, [r7, r3]
 8019470:	2300      	movs	r3, #0
 8019472:	f8cd 8000 	str.w	r8, [sp]
 8019476:	f7f6 fdf7 	bl	8010068 <ucdr_init_buffer_origin_offset>
 801947a:	2001      	movs	r0, #1
 801947c:	e7da      	b.n	8019434 <uxr_prepare_reliable_buffer_to_write+0x210>
 801947e:	3201      	adds	r2, #1
 8019480:	9306      	str	r3, [sp, #24]
 8019482:	b293      	uxth	r3, r2
 8019484:	4553      	cmp	r3, sl
 8019486:	d8d4      	bhi.n	8019432 <uxr_prepare_reliable_buffer_to_write+0x20e>
 8019488:	e739      	b.n	80192fe <uxr_prepare_reliable_buffer_to_write+0xda>
 801948a:	4630      	mov	r0, r6
 801948c:	2101      	movs	r1, #1
 801948e:	9307      	str	r3, [sp, #28]
 8019490:	f000 fa6a 	bl	8019968 <uxr_seq_num_add>
 8019494:	4606      	mov	r6, r0
 8019496:	8920      	ldrh	r0, [r4, #8]
 8019498:	6862      	ldr	r2, [r4, #4]
 801949a:	fbb6 f1f0 	udiv	r1, r6, r0
 801949e:	fbb2 f2f0 	udiv	r2, r2, r0
 80194a2:	fb00 6111 	mls	r1, r0, r1, r6
 80194a6:	b289      	uxth	r1, r1
 80194a8:	fb01 f202 	mul.w	r2, r1, r2
 80194ac:	6821      	ldr	r1, [r4, #0]
 80194ae:	3204      	adds	r2, #4
 80194b0:	188b      	adds	r3, r1, r2
 80194b2:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80194b6:	9303      	str	r3, [sp, #12]
 80194b8:	9b07      	ldr	r3, [sp, #28]
 80194ba:	e70c      	b.n	80192d6 <uxr_prepare_reliable_buffer_to_write+0xb2>
 80194bc:	8921      	ldrh	r1, [r4, #8]
 80194be:	6863      	ldr	r3, [r4, #4]
 80194c0:	9804      	ldr	r0, [sp, #16]
 80194c2:	fbb5 f2f1 	udiv	r2, r5, r1
 80194c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80194ca:	fb01 5212 	mls	r2, r1, r2, r5
 80194ce:	6821      	ldr	r1, [r4, #0]
 80194d0:	b292      	uxth	r2, r2
 80194d2:	fb02 f303 	mul.w	r3, r2, r3
 80194d6:	7b22      	ldrb	r2, [r4, #12]
 80194d8:	3304      	adds	r3, #4
 80194da:	445a      	add	r2, fp
 80194dc:	4419      	add	r1, r3
 80194de:	f841 2c04 	str.w	r2, [r1, #-4]
 80194e2:	7b23      	ldrb	r3, [r4, #12]
 80194e4:	9300      	str	r3, [sp, #0]
 80194e6:	2300      	movs	r3, #0
 80194e8:	f7f6 fdbe 	bl	8010068 <ucdr_init_buffer_origin_offset>
 80194ec:	2001      	movs	r0, #1
 80194ee:	81e5      	strh	r5, [r4, #14]
 80194f0:	e7a0      	b.n	8019434 <uxr_prepare_reliable_buffer_to_write+0x210>
 80194f2:	4682      	mov	sl, r0
 80194f4:	e6cb      	b.n	801928e <uxr_prepare_reliable_buffer_to_write+0x6a>
 80194f6:	f10d 0b20 	add.w	fp, sp, #32
 80194fa:	e747      	b.n	801938c <uxr_prepare_reliable_buffer_to_write+0x168>
 80194fc:	080190fd 	.word	0x080190fd

08019500 <uxr_prepare_next_reliable_buffer_to_send>:
 8019500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019502:	4604      	mov	r4, r0
 8019504:	461d      	mov	r5, r3
 8019506:	460f      	mov	r7, r1
 8019508:	8a00      	ldrh	r0, [r0, #16]
 801950a:	2101      	movs	r1, #1
 801950c:	4616      	mov	r6, r2
 801950e:	f000 fa2b 	bl	8019968 <uxr_seq_num_add>
 8019512:	8028      	strh	r0, [r5, #0]
 8019514:	8922      	ldrh	r2, [r4, #8]
 8019516:	6863      	ldr	r3, [r4, #4]
 8019518:	fbb0 f1f2 	udiv	r1, r0, r2
 801951c:	fbb3 f3f2 	udiv	r3, r3, r2
 8019520:	fb02 0c11 	mls	ip, r2, r1, r0
 8019524:	89e1      	ldrh	r1, [r4, #14]
 8019526:	fa1f fc8c 	uxth.w	ip, ip
 801952a:	fb0c fc03 	mul.w	ip, ip, r3
 801952e:	6823      	ldr	r3, [r4, #0]
 8019530:	f10c 0c04 	add.w	ip, ip, #4
 8019534:	4463      	add	r3, ip
 8019536:	603b      	str	r3, [r7, #0]
 8019538:	6823      	ldr	r3, [r4, #0]
 801953a:	449c      	add	ip, r3
 801953c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8019540:	6033      	str	r3, [r6, #0]
 8019542:	f000 fa19 	bl	8019978 <uxr_seq_num_cmp>
 8019546:	2800      	cmp	r0, #0
 8019548:	dd01      	ble.n	801954e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801954a:	2000      	movs	r0, #0
 801954c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801954e:	7b23      	ldrb	r3, [r4, #12]
 8019550:	6832      	ldr	r2, [r6, #0]
 8019552:	429a      	cmp	r2, r3
 8019554:	d9f9      	bls.n	801954a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8019556:	8a61      	ldrh	r1, [r4, #18]
 8019558:	8a20      	ldrh	r0, [r4, #16]
 801955a:	f000 fa09 	bl	8019970 <uxr_seq_num_sub>
 801955e:	8923      	ldrh	r3, [r4, #8]
 8019560:	4283      	cmp	r3, r0
 8019562:	d0f2      	beq.n	801954a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8019564:	8828      	ldrh	r0, [r5, #0]
 8019566:	89e3      	ldrh	r3, [r4, #14]
 8019568:	8220      	strh	r0, [r4, #16]
 801956a:	4298      	cmp	r0, r3
 801956c:	d001      	beq.n	8019572 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801956e:	2001      	movs	r0, #1
 8019570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019572:	2101      	movs	r1, #1
 8019574:	f000 f9f8 	bl	8019968 <uxr_seq_num_add>
 8019578:	4603      	mov	r3, r0
 801957a:	2001      	movs	r0, #1
 801957c:	81e3      	strh	r3, [r4, #14]
 801957e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019580 <uxr_update_output_stream_heartbeat_timestamp>:
 8019580:	b570      	push	{r4, r5, r6, lr}
 8019582:	8a01      	ldrh	r1, [r0, #16]
 8019584:	4604      	mov	r4, r0
 8019586:	8a40      	ldrh	r0, [r0, #18]
 8019588:	4615      	mov	r5, r2
 801958a:	461e      	mov	r6, r3
 801958c:	f000 f9f4 	bl	8019978 <uxr_seq_num_cmp>
 8019590:	2800      	cmp	r0, #0
 8019592:	db07      	blt.n	80195a4 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8019594:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019598:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801959c:	2000      	movs	r0, #0
 801959e:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80195a2:	bd70      	pop	{r4, r5, r6, pc}
 80195a4:	f894 0020 	ldrb.w	r0, [r4, #32]
 80195a8:	b940      	cbnz	r0, 80195bc <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 80195aa:	2301      	movs	r3, #1
 80195ac:	f884 3020 	strb.w	r3, [r4, #32]
 80195b0:	3564      	adds	r5, #100	; 0x64
 80195b2:	f146 0600 	adc.w	r6, r6, #0
 80195b6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80195ba:	bd70      	pop	{r4, r5, r6, pc}
 80195bc:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80195c0:	4295      	cmp	r5, r2
 80195c2:	eb76 0303 	sbcs.w	r3, r6, r3
 80195c6:	db04      	blt.n	80195d2 <uxr_update_output_stream_heartbeat_timestamp+0x52>
 80195c8:	1c43      	adds	r3, r0, #1
 80195ca:	2001      	movs	r0, #1
 80195cc:	f884 3020 	strb.w	r3, [r4, #32]
 80195d0:	e7ee      	b.n	80195b0 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 80195d2:	2000      	movs	r0, #0
 80195d4:	e7ec      	b.n	80195b0 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 80195d6:	bf00      	nop

080195d8 <uxr_begin_output_nack_buffer_it>:
 80195d8:	8a40      	ldrh	r0, [r0, #18]
 80195da:	4770      	bx	lr

080195dc <uxr_next_reliable_nack_buffer_to_send>:
 80195dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80195e0:	f890 7021 	ldrb.w	r7, [r0, #33]	; 0x21
 80195e4:	b197      	cbz	r7, 801960c <uxr_next_reliable_nack_buffer_to_send+0x30>
 80195e6:	4680      	mov	r8, r0
 80195e8:	460d      	mov	r5, r1
 80195ea:	4616      	mov	r6, r2
 80195ec:	461c      	mov	r4, r3
 80195ee:	8818      	ldrh	r0, [r3, #0]
 80195f0:	2101      	movs	r1, #1
 80195f2:	f000 f9b9 	bl	8019968 <uxr_seq_num_add>
 80195f6:	8020      	strh	r0, [r4, #0]
 80195f8:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 80195fc:	f000 f9bc 	bl	8019978 <uxr_seq_num_cmp>
 8019600:	2800      	cmp	r0, #0
 8019602:	dd06      	ble.n	8019612 <uxr_next_reliable_nack_buffer_to_send+0x36>
 8019604:	2300      	movs	r3, #0
 8019606:	461f      	mov	r7, r3
 8019608:	f888 3021 	strb.w	r3, [r8, #33]	; 0x21
 801960c:	4638      	mov	r0, r7
 801960e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019612:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 8019616:	8820      	ldrh	r0, [r4, #0]
 8019618:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801961c:	fbb0 f3f2 	udiv	r3, r0, r2
 8019620:	fbb1 fcf2 	udiv	ip, r1, r2
 8019624:	fb02 0313 	mls	r3, r2, r3, r0
 8019628:	b29b      	uxth	r3, r3
 801962a:	fb03 fc0c 	mul.w	ip, r3, ip
 801962e:	f8d8 3000 	ldr.w	r3, [r8]
 8019632:	f10c 0c04 	add.w	ip, ip, #4
 8019636:	4463      	add	r3, ip
 8019638:	602b      	str	r3, [r5, #0]
 801963a:	f8d8 3000 	ldr.w	r3, [r8]
 801963e:	4463      	add	r3, ip
 8019640:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8019644:	6033      	str	r3, [r6, #0]
 8019646:	f898 200c 	ldrb.w	r2, [r8, #12]
 801964a:	429a      	cmp	r2, r3
 801964c:	d0d0      	beq.n	80195f0 <uxr_next_reliable_nack_buffer_to_send+0x14>
 801964e:	e7dd      	b.n	801960c <uxr_next_reliable_nack_buffer_to_send+0x30>

08019650 <uxr_process_acknack>:
 8019650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019652:	4604      	mov	r4, r0
 8019654:	460e      	mov	r6, r1
 8019656:	4610      	mov	r0, r2
 8019658:	2101      	movs	r1, #1
 801965a:	f000 f989 	bl	8019970 <uxr_seq_num_sub>
 801965e:	8a61      	ldrh	r1, [r4, #18]
 8019660:	f000 f986 	bl	8019970 <uxr_seq_num_sub>
 8019664:	b1c8      	cbz	r0, 801969a <uxr_process_acknack+0x4a>
 8019666:	4605      	mov	r5, r0
 8019668:	2700      	movs	r7, #0
 801966a:	2101      	movs	r1, #1
 801966c:	8a60      	ldrh	r0, [r4, #18]
 801966e:	f000 f97b 	bl	8019968 <uxr_seq_num_add>
 8019672:	8923      	ldrh	r3, [r4, #8]
 8019674:	6862      	ldr	r2, [r4, #4]
 8019676:	3701      	adds	r7, #1
 8019678:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801967c:	6821      	ldr	r1, [r4, #0]
 801967e:	42bd      	cmp	r5, r7
 8019680:	8260      	strh	r0, [r4, #18]
 8019682:	fbb0 fef3 	udiv	lr, r0, r3
 8019686:	fbb2 f2f3 	udiv	r2, r2, r3
 801968a:	fb03 031e 	mls	r3, r3, lr, r0
 801968e:	b29b      	uxth	r3, r3
 8019690:	fb02 f303 	mul.w	r3, r2, r3
 8019694:	f841 c003 	str.w	ip, [r1, r3]
 8019698:	d1e7      	bne.n	801966a <uxr_process_acknack+0x1a>
 801969a:	3e00      	subs	r6, #0
 801969c:	f04f 0300 	mov.w	r3, #0
 80196a0:	bf18      	it	ne
 80196a2:	2601      	movne	r6, #1
 80196a4:	f884 3020 	strb.w	r3, [r4, #32]
 80196a8:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 80196ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80196ae:	bf00      	nop

080196b0 <uxr_is_output_up_to_date>:
 80196b0:	8a01      	ldrh	r1, [r0, #16]
 80196b2:	8a40      	ldrh	r0, [r0, #18]
 80196b4:	b508      	push	{r3, lr}
 80196b6:	f000 f95f 	bl	8019978 <uxr_seq_num_cmp>
 80196ba:	fab0 f080 	clz	r0, r0
 80196be:	0940      	lsrs	r0, r0, #5
 80196c0:	bd08      	pop	{r3, pc}
 80196c2:	bf00      	nop

080196c4 <get_available_free_slots>:
 80196c4:	8901      	ldrh	r1, [r0, #8]
 80196c6:	b1e1      	cbz	r1, 8019702 <get_available_free_slots+0x3e>
 80196c8:	6843      	ldr	r3, [r0, #4]
 80196ca:	f04f 0c00 	mov.w	ip, #0
 80196ce:	b530      	push	{r4, r5, lr}
 80196d0:	fbb3 fef1 	udiv	lr, r3, r1
 80196d4:	6805      	ldr	r5, [r0, #0]
 80196d6:	4662      	mov	r2, ip
 80196d8:	7b04      	ldrb	r4, [r0, #12]
 80196da:	4660      	mov	r0, ip
 80196dc:	f10c 0c01 	add.w	ip, ip, #1
 80196e0:	fbb2 f3f1 	udiv	r3, r2, r1
 80196e4:	fb01 2313 	mls	r3, r1, r3, r2
 80196e8:	fa1f f28c 	uxth.w	r2, ip
 80196ec:	b29b      	uxth	r3, r3
 80196ee:	fb0e f303 	mul.w	r3, lr, r3
 80196f2:	58eb      	ldr	r3, [r5, r3]
 80196f4:	429c      	cmp	r4, r3
 80196f6:	d101      	bne.n	80196fc <get_available_free_slots+0x38>
 80196f8:	3001      	adds	r0, #1
 80196fa:	b280      	uxth	r0, r0
 80196fc:	428a      	cmp	r2, r1
 80196fe:	d3ed      	bcc.n	80196dc <get_available_free_slots+0x18>
 8019700:	bd30      	pop	{r4, r5, pc}
 8019702:	4608      	mov	r0, r1
 8019704:	4770      	bx	lr
 8019706:	bf00      	nop

08019708 <uxr_buffer_request_data>:
 8019708:	b530      	push	{r4, r5, lr}
 801970a:	b095      	sub	sp, #84	; 0x54
 801970c:	4604      	mov	r4, r0
 801970e:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8019710:	9303      	str	r3, [sp, #12]
 8019712:	2d00      	cmp	r5, #0
 8019714:	f88d 301c 	strb.w	r3, [sp, #28]
 8019718:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801971c:	f04f 0200 	mov.w	r2, #0
 8019720:	bf14      	ite	ne
 8019722:	2101      	movne	r1, #1
 8019724:	4611      	moveq	r1, r2
 8019726:	f88d 201d 	strb.w	r2, [sp, #29]
 801972a:	f88d 201e 	strb.w	r2, [sp, #30]
 801972e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8019732:	d021      	beq.n	8019778 <uxr_buffer_request_data+0x70>
 8019734:	686b      	ldr	r3, [r5, #4]
 8019736:	2210      	movs	r2, #16
 8019738:	6829      	ldr	r1, [r5, #0]
 801973a:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 801973e:	f8cd 1026 	str.w	r1, [sp, #38]	; 0x26
 8019742:	2308      	movs	r3, #8
 8019744:	2100      	movs	r1, #0
 8019746:	4620      	mov	r0, r4
 8019748:	e9cd 3100 	strd	r3, r1, [sp]
 801974c:	ab0c      	add	r3, sp, #48	; 0x30
 801974e:	9905      	ldr	r1, [sp, #20]
 8019750:	f7f7 fdfe 	bl	8011350 <uxr_prepare_stream_to_write_submessage>
 8019754:	b918      	cbnz	r0, 801975e <uxr_buffer_request_data+0x56>
 8019756:	4604      	mov	r4, r0
 8019758:	4620      	mov	r0, r4
 801975a:	b015      	add	sp, #84	; 0x54
 801975c:	bd30      	pop	{r4, r5, pc}
 801975e:	9904      	ldr	r1, [sp, #16]
 8019760:	aa06      	add	r2, sp, #24
 8019762:	4620      	mov	r0, r4
 8019764:	f7f7 ff30 	bl	80115c8 <uxr_init_base_object_request>
 8019768:	4604      	mov	r4, r0
 801976a:	a906      	add	r1, sp, #24
 801976c:	a80c      	add	r0, sp, #48	; 0x30
 801976e:	f7f9 f977 	bl	8012a60 <uxr_serialize_READ_DATA_Payload>
 8019772:	4620      	mov	r0, r4
 8019774:	b015      	add	sp, #84	; 0x54
 8019776:	bd30      	pop	{r4, r5, pc}
 8019778:	2208      	movs	r2, #8
 801977a:	e7e2      	b.n	8019742 <uxr_buffer_request_data+0x3a>

0801977c <uxr_buffer_cancel_data>:
 801977c:	b510      	push	{r4, lr}
 801977e:	2300      	movs	r3, #0
 8019780:	b094      	sub	sp, #80	; 0x50
 8019782:	4604      	mov	r4, r0
 8019784:	9205      	str	r2, [sp, #20]
 8019786:	9301      	str	r3, [sp, #4]
 8019788:	f8ad 301c 	strh.w	r3, [sp, #28]
 801978c:	f88d 301e 	strb.w	r3, [sp, #30]
 8019790:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 8019794:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 8019798:	2308      	movs	r3, #8
 801979a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801979e:	2201      	movs	r2, #1
 80197a0:	9300      	str	r3, [sp, #0]
 80197a2:	ab0c      	add	r3, sp, #48	; 0x30
 80197a4:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 80197a8:	2210      	movs	r2, #16
 80197aa:	f7f7 fdd1 	bl	8011350 <uxr_prepare_stream_to_write_submessage>
 80197ae:	b918      	cbnz	r0, 80197b8 <uxr_buffer_cancel_data+0x3c>
 80197b0:	4604      	mov	r4, r0
 80197b2:	4620      	mov	r0, r4
 80197b4:	b014      	add	sp, #80	; 0x50
 80197b6:	bd10      	pop	{r4, pc}
 80197b8:	9905      	ldr	r1, [sp, #20]
 80197ba:	aa06      	add	r2, sp, #24
 80197bc:	4620      	mov	r0, r4
 80197be:	f7f7 ff03 	bl	80115c8 <uxr_init_base_object_request>
 80197c2:	4604      	mov	r4, r0
 80197c4:	a906      	add	r1, sp, #24
 80197c6:	a80c      	add	r0, sp, #48	; 0x30
 80197c8:	f7f9 f94a 	bl	8012a60 <uxr_serialize_READ_DATA_Payload>
 80197cc:	4620      	mov	r0, r4
 80197ce:	b014      	add	sp, #80	; 0x50
 80197d0:	bd10      	pop	{r4, pc}
 80197d2:	bf00      	nop

080197d4 <read_submessage_format>:
 80197d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80197d8:	b095      	sub	sp, #84	; 0x54
 80197da:	f8bd 7078 	ldrh.w	r7, [sp, #120]	; 0x78
 80197de:	b113      	cbz	r3, 80197e6 <read_submessage_format+0x12>
 80197e0:	b015      	add	sp, #84	; 0x54
 80197e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80197e6:	4606      	mov	r6, r0
 80197e8:	981c      	ldr	r0, [sp, #112]	; 0x70
 80197ea:	460c      	mov	r4, r1
 80197ec:	4615      	mov	r5, r2
 80197ee:	9004      	str	r0, [sp, #16]
 80197f0:	4699      	mov	r9, r3
 80197f2:	981d      	ldr	r0, [sp, #116]	; 0x74
 80197f4:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 80197f8:	9005      	str	r0, [sp, #20]
 80197fa:	a80c      	add	r0, sp, #48	; 0x30
 80197fc:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8019800:	1a52      	subs	r2, r2, r1
 8019802:	f7f6 fc43 	bl	801008c <ucdr_init_buffer>
 8019806:	a80c      	add	r0, sp, #48	; 0x30
 8019808:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801980c:	f7f6 fc12 	bl	8010034 <ucdr_set_on_full_buffer_callback>
 8019810:	69e2      	ldr	r2, [r4, #28]
 8019812:	b19a      	cbz	r2, 801983c <read_submessage_format+0x68>
 8019814:	f1b8 0f07 	cmp.w	r8, #7
 8019818:	f882 9014 	strb.w	r9, [r2, #20]
 801981c:	d040      	beq.n	80198a0 <read_submessage_format+0xcc>
 801981e:	f1b8 0f08 	cmp.w	r8, #8
 8019822:	d02e      	beq.n	8019882 <read_submessage_format+0xae>
 8019824:	f1b8 0f06 	cmp.w	r8, #6
 8019828:	d011      	beq.n	801984e <read_submessage_format+0x7a>
 801982a:	2301      	movs	r3, #1
 801982c:	7513      	strb	r3, [r2, #20]
 801982e:	4629      	mov	r1, r5
 8019830:	4620      	mov	r0, r4
 8019832:	f7f6 fc7f 	bl	8010134 <ucdr_advance_buffer>
 8019836:	b015      	add	sp, #84	; 0x54
 8019838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801983c:	f1b8 0f07 	cmp.w	r8, #7
 8019840:	d02e      	beq.n	80198a0 <read_submessage_format+0xcc>
 8019842:	f1b8 0f08 	cmp.w	r8, #8
 8019846:	d01c      	beq.n	8019882 <read_submessage_format+0xae>
 8019848:	f1b8 0f06 	cmp.w	r8, #6
 801984c:	d1ef      	bne.n	801982e <read_submessage_format+0x5a>
 801984e:	f8d6 8088 	ldr.w	r8, [r6, #136]	; 0x88
 8019852:	f1b8 0f00 	cmp.w	r8, #0
 8019856:	d011      	beq.n	801987c <read_submessage_format+0xa8>
 8019858:	ab0c      	add	r3, sp, #48	; 0x30
 801985a:	9501      	str	r5, [sp, #4]
 801985c:	463a      	mov	r2, r7
 801985e:	4630      	mov	r0, r6
 8019860:	9300      	str	r3, [sp, #0]
 8019862:	2306      	movs	r3, #6
 8019864:	f88d 3016 	strb.w	r3, [sp, #22]
 8019868:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 801986c:	9302      	str	r3, [sp, #8]
 801986e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8019872:	47c0      	blx	r8
 8019874:	2301      	movs	r3, #1
 8019876:	69e2      	ldr	r2, [r4, #28]
 8019878:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 801987c:	2a00      	cmp	r2, #0
 801987e:	d1d4      	bne.n	801982a <read_submessage_format+0x56>
 8019880:	e7d5      	b.n	801982e <read_submessage_format+0x5a>
 8019882:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 8019886:	2b00      	cmp	r3, #0
 8019888:	d0f8      	beq.n	801987c <read_submessage_format+0xa8>
 801988a:	a80c      	add	r0, sp, #48	; 0x30
 801988c:	a906      	add	r1, sp, #24
 801988e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8019892:	f7f9 f9b1 	bl	8012bf8 <uxr_deserialize_SampleIdentity>
 8019896:	b9a0      	cbnz	r0, 80198c2 <read_submessage_format+0xee>
 8019898:	69e2      	ldr	r2, [r4, #28]
 801989a:	2a00      	cmp	r2, #0
 801989c:	d1c5      	bne.n	801982a <read_submessage_format+0x56>
 801989e:	e7c6      	b.n	801982e <read_submessage_format+0x5a>
 80198a0:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 80198a4:	b13b      	cbz	r3, 80198b6 <read_submessage_format+0xe2>
 80198a6:	a906      	add	r1, sp, #24
 80198a8:	a80c      	add	r0, sp, #48	; 0x30
 80198aa:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80198ae:	f7f8 fe77 	bl	80125a0 <uxr_deserialize_BaseObjectRequest>
 80198b2:	bb60      	cbnz	r0, 801990e <read_submessage_format+0x13a>
 80198b4:	69e2      	ldr	r2, [r4, #28]
 80198b6:	68a3      	ldr	r3, [r4, #8]
 80198b8:	442b      	add	r3, r5
 80198ba:	60a3      	str	r3, [r4, #8]
 80198bc:	2a00      	cmp	r2, #0
 80198be:	d1b4      	bne.n	801982a <read_submessage_format+0x56>
 80198c0:	e7b5      	b.n	801982e <read_submessage_format+0x5a>
 80198c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80198c4:	a80c      	add	r0, sp, #48	; 0x30
 80198c6:	eba8 0803 	sub.w	r8, r8, r3
 80198ca:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 80198ce:	44a8      	add	r8, r5
 80198d0:	1a52      	subs	r2, r2, r1
 80198d2:	f7f6 fbdb 	bl	801008c <ucdr_init_buffer>
 80198d6:	a80c      	add	r0, sp, #48	; 0x30
 80198d8:	fa1f f888 	uxth.w	r8, r8
 80198dc:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80198e0:	f7f6 fba8 	bl	8010034 <ucdr_set_on_full_buffer_callback>
 80198e4:	ab0c      	add	r3, sp, #48	; 0x30
 80198e6:	2108      	movs	r1, #8
 80198e8:	f8cd 8004 	str.w	r8, [sp, #4]
 80198ec:	9300      	str	r3, [sp, #0]
 80198ee:	463a      	mov	r2, r7
 80198f0:	f88d 1016 	strb.w	r1, [sp, #22]
 80198f4:	ab06      	add	r3, sp, #24
 80198f6:	f8d6 10a8 	ldr.w	r1, [r6, #168]	; 0xa8
 80198fa:	4630      	mov	r0, r6
 80198fc:	9102      	str	r1, [sp, #8]
 80198fe:	9905      	ldr	r1, [sp, #20]
 8019900:	f8d6 70a4 	ldr.w	r7, [r6, #164]	; 0xa4
 8019904:	47b8      	blx	r7
 8019906:	2301      	movs	r3, #1
 8019908:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 801990c:	e7c4      	b.n	8019898 <read_submessage_format+0xc4>
 801990e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8019912:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019914:	a80c      	add	r0, sp, #48	; 0x30
 8019916:	1a52      	subs	r2, r2, r1
 8019918:	eba8 0803 	sub.w	r8, r8, r3
 801991c:	f7f6 fbb6 	bl	801008c <ucdr_init_buffer>
 8019920:	a80c      	add	r0, sp, #48	; 0x30
 8019922:	44a8      	add	r8, r5
 8019924:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8019928:	f7f6 fb84 	bl	8010034 <ucdr_set_on_full_buffer_callback>
 801992c:	ab0c      	add	r3, sp, #48	; 0x30
 801992e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8019932:	fa1f f888 	uxth.w	r8, r8
 8019936:	9300      	str	r3, [sp, #0]
 8019938:	463a      	mov	r2, r7
 801993a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801993e:	4630      	mov	r0, r6
 8019940:	f8cd 8004 	str.w	r8, [sp, #4]
 8019944:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8019948:	2107      	movs	r1, #7
 801994a:	f88d 1016 	strb.w	r1, [sp, #22]
 801994e:	b29b      	uxth	r3, r3
 8019950:	f8d6 10b0 	ldr.w	r1, [r6, #176]	; 0xb0
 8019954:	9102      	str	r1, [sp, #8]
 8019956:	9905      	ldr	r1, [sp, #20]
 8019958:	f8d6 70ac 	ldr.w	r7, [r6, #172]	; 0xac
 801995c:	47b8      	blx	r7
 801995e:	2301      	movs	r3, #1
 8019960:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8019964:	e7a6      	b.n	80198b4 <read_submessage_format+0xe0>
 8019966:	bf00      	nop

08019968 <uxr_seq_num_add>:
 8019968:	4408      	add	r0, r1
 801996a:	b280      	uxth	r0, r0
 801996c:	4770      	bx	lr
 801996e:	bf00      	nop

08019970 <uxr_seq_num_sub>:
 8019970:	1a40      	subs	r0, r0, r1
 8019972:	b280      	uxth	r0, r0
 8019974:	4770      	bx	lr
 8019976:	bf00      	nop

08019978 <uxr_seq_num_cmp>:
 8019978:	4288      	cmp	r0, r1
 801997a:	d011      	beq.n	80199a0 <uxr_seq_num_cmp+0x28>
 801997c:	d309      	bcc.n	8019992 <uxr_seq_num_cmp+0x1a>
 801997e:	4288      	cmp	r0, r1
 8019980:	d910      	bls.n	80199a4 <uxr_seq_num_cmp+0x2c>
 8019982:	1a40      	subs	r0, r0, r1
 8019984:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8019988:	bfd4      	ite	le
 801998a:	2001      	movle	r0, #1
 801998c:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8019990:	4770      	bx	lr
 8019992:	1a0b      	subs	r3, r1, r0
 8019994:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8019998:	daf1      	bge.n	801997e <uxr_seq_num_cmp+0x6>
 801999a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801999e:	4770      	bx	lr
 80199a0:	2000      	movs	r0, #0
 80199a2:	4770      	bx	lr
 80199a4:	2001      	movs	r0, #1
 80199a6:	4770      	bx	lr

080199a8 <uxr_init_framing_io>:
 80199a8:	2300      	movs	r3, #0
 80199aa:	7041      	strb	r1, [r0, #1]
 80199ac:	7003      	strb	r3, [r0, #0]
 80199ae:	8583      	strh	r3, [r0, #44]	; 0x2c
 80199b0:	4770      	bx	lr
 80199b2:	bf00      	nop

080199b4 <uxr_write_framed_msg>:
 80199b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199b8:	4617      	mov	r7, r2
 80199ba:	7842      	ldrb	r2, [r0, #1]
 80199bc:	460e      	mov	r6, r1
 80199be:	b083      	sub	sp, #12
 80199c0:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 80199c4:	469b      	mov	fp, r3
 80199c6:	237e      	movs	r3, #126	; 0x7e
 80199c8:	4604      	mov	r4, r0
 80199ca:	2901      	cmp	r1, #1
 80199cc:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 80199d0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 80199d4:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 80199d8:	f240 8115 	bls.w	8019c06 <uxr_write_framed_msg+0x252>
 80199dc:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 80199e0:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 80199e4:	2202      	movs	r2, #2
 80199e6:	2901      	cmp	r1, #1
 80199e8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80199ec:	d952      	bls.n	8019a94 <uxr_write_framed_msg+0xe0>
 80199ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80199f0:	2103      	movs	r1, #3
 80199f2:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 80199f6:	b2dd      	uxtb	r5, r3
 80199f8:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 80199fc:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 8019a00:	2a01      	cmp	r2, #1
 8019a02:	d95c      	bls.n	8019abe <uxr_write_framed_msg+0x10a>
 8019a04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019a06:	1862      	adds	r2, r4, r1
 8019a08:	3101      	adds	r1, #1
 8019a0a:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8019a0e:	f882 5038 	strb.w	r5, [r2, #56]	; 0x38
 8019a12:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8019a16:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8019a1a:	2a01      	cmp	r2, #1
 8019a1c:	d961      	bls.n	8019ae2 <uxr_write_framed_msg+0x12e>
 8019a1e:	1c4a      	adds	r2, r1, #1
 8019a20:	4421      	add	r1, r4
 8019a22:	b2d2      	uxtb	r2, r2
 8019a24:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 8019a28:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019a2c:	2b00      	cmp	r3, #0
 8019a2e:	d06a      	beq.n	8019b06 <uxr_write_framed_msg+0x152>
 8019a30:	f04f 0800 	mov.w	r8, #0
 8019a34:	46c1      	mov	r9, r8
 8019a36:	e016      	b.n	8019a66 <uxr_write_framed_msg+0xb2>
 8019a38:	2a29      	cmp	r2, #41	; 0x29
 8019a3a:	d868      	bhi.n	8019b0e <uxr_write_framed_msg+0x15a>
 8019a3c:	18a0      	adds	r0, r4, r2
 8019a3e:	3201      	adds	r2, #1
 8019a40:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8019a44:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019a48:	ea88 0101 	eor.w	r1, r8, r1
 8019a4c:	4b7d      	ldr	r3, [pc, #500]	; (8019c44 <uxr_write_framed_msg+0x290>)
 8019a4e:	f109 0901 	add.w	r9, r9, #1
 8019a52:	b2c9      	uxtb	r1, r1
 8019a54:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8019a58:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 8019a5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019a5e:	454b      	cmp	r3, r9
 8019a60:	d969      	bls.n	8019b36 <uxr_write_framed_msg+0x182>
 8019a62:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8019a66:	f81b 1009 	ldrb.w	r1, [fp, r9]
 8019a6a:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 8019a6e:	2801      	cmp	r0, #1
 8019a70:	d8e2      	bhi.n	8019a38 <uxr_write_framed_msg+0x84>
 8019a72:	1c50      	adds	r0, r2, #1
 8019a74:	b2c0      	uxtb	r0, r0
 8019a76:	2829      	cmp	r0, #41	; 0x29
 8019a78:	d849      	bhi.n	8019b0e <uxr_write_framed_msg+0x15a>
 8019a7a:	18a0      	adds	r0, r4, r2
 8019a7c:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8019a80:	3202      	adds	r2, #2
 8019a82:	f081 0520 	eor.w	r5, r1, #32
 8019a86:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8019a8a:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 8019a8e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019a92:	e7d9      	b.n	8019a48 <uxr_write_framed_msg+0x94>
 8019a94:	2104      	movs	r1, #4
 8019a96:	f04f 0c03 	mov.w	ip, #3
 8019a9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019a9c:	4422      	add	r2, r4
 8019a9e:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 8019aa2:	44a4      	add	ip, r4
 8019aa4:	b2dd      	uxtb	r5, r3
 8019aa6:	f080 0020 	eor.w	r0, r0, #32
 8019aaa:	f882 e038 	strb.w	lr, [r2, #56]	; 0x38
 8019aae:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 8019ab2:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 8019ab6:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8019aba:	2a01      	cmp	r2, #1
 8019abc:	d8a2      	bhi.n	8019a04 <uxr_write_framed_msg+0x50>
 8019abe:	1862      	adds	r2, r4, r1
 8019ac0:	207d      	movs	r0, #125	; 0x7d
 8019ac2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019ac4:	f085 0520 	eor.w	r5, r5, #32
 8019ac8:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
 8019acc:	3102      	adds	r1, #2
 8019ace:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8019ad2:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
 8019ad6:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8019ada:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8019ade:	2a01      	cmp	r2, #1
 8019ae0:	d89d      	bhi.n	8019a1e <uxr_write_framed_msg+0x6a>
 8019ae2:	1c4d      	adds	r5, r1, #1
 8019ae4:	1c8a      	adds	r2, r1, #2
 8019ae6:	f080 0020 	eor.w	r0, r0, #32
 8019aea:	4421      	add	r1, r4
 8019aec:	fa54 f585 	uxtab	r5, r4, r5
 8019af0:	b2d2      	uxtb	r2, r2
 8019af2:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8019af6:	f881 c038 	strb.w	ip, [r1, #56]	; 0x38
 8019afa:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 8019afe:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019b02:	2b00      	cmp	r3, #0
 8019b04:	d194      	bne.n	8019a30 <uxr_write_framed_msg+0x7c>
 8019b06:	4619      	mov	r1, r3
 8019b08:	f8ad 3004 	strh.w	r3, [sp, #4]
 8019b0c:	e019      	b.n	8019b42 <uxr_write_framed_msg+0x18e>
 8019b0e:	2500      	movs	r5, #0
 8019b10:	e000      	b.n	8019b14 <uxr_write_framed_msg+0x160>
 8019b12:	b160      	cbz	r0, 8019b2e <uxr_write_framed_msg+0x17a>
 8019b14:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8019b18:	1b52      	subs	r2, r2, r5
 8019b1a:	4653      	mov	r3, sl
 8019b1c:	4638      	mov	r0, r7
 8019b1e:	4421      	add	r1, r4
 8019b20:	47b0      	blx	r6
 8019b22:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8019b26:	4405      	add	r5, r0
 8019b28:	4295      	cmp	r5, r2
 8019b2a:	d3f2      	bcc.n	8019b12 <uxr_write_framed_msg+0x15e>
 8019b2c:	d066      	beq.n	8019bfc <uxr_write_framed_msg+0x248>
 8019b2e:	2000      	movs	r0, #0
 8019b30:	b003      	add	sp, #12
 8019b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b36:	fa5f f188 	uxtb.w	r1, r8
 8019b3a:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8019b3e:	f8ad 8004 	strh.w	r8, [sp, #4]
 8019b42:	f04f 0900 	mov.w	r9, #0
 8019b46:	f04f 0b7d 	mov.w	fp, #125	; 0x7d
 8019b4a:	46c8      	mov	r8, r9
 8019b4c:	e013      	b.n	8019b76 <uxr_write_framed_msg+0x1c2>
 8019b4e:	2a29      	cmp	r2, #41	; 0x29
 8019b50:	d824      	bhi.n	8019b9c <uxr_write_framed_msg+0x1e8>
 8019b52:	18a3      	adds	r3, r4, r2
 8019b54:	3201      	adds	r2, #1
 8019b56:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 8019b5a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019b5e:	f109 0901 	add.w	r9, r9, #1
 8019b62:	f1b9 0f02 	cmp.w	r9, #2
 8019b66:	d02d      	beq.n	8019bc4 <uxr_write_framed_msg+0x210>
 8019b68:	f109 0308 	add.w	r3, r9, #8
 8019b6c:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8019b70:	446b      	add	r3, sp
 8019b72:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 8019b76:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8019b7a:	2b01      	cmp	r3, #1
 8019b7c:	d8e7      	bhi.n	8019b4e <uxr_write_framed_msg+0x19a>
 8019b7e:	1c53      	adds	r3, r2, #1
 8019b80:	b2db      	uxtb	r3, r3
 8019b82:	2b29      	cmp	r3, #41	; 0x29
 8019b84:	d80a      	bhi.n	8019b9c <uxr_write_framed_msg+0x1e8>
 8019b86:	18a3      	adds	r3, r4, r2
 8019b88:	f081 0120 	eor.w	r1, r1, #32
 8019b8c:	3202      	adds	r2, #2
 8019b8e:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 8019b92:	f883 b038 	strb.w	fp, [r3, #56]	; 0x38
 8019b96:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019b9a:	e7e0      	b.n	8019b5e <uxr_write_framed_msg+0x1aa>
 8019b9c:	2500      	movs	r5, #0
 8019b9e:	e001      	b.n	8019ba4 <uxr_write_framed_msg+0x1f0>
 8019ba0:	2800      	cmp	r0, #0
 8019ba2:	d0c4      	beq.n	8019b2e <uxr_write_framed_msg+0x17a>
 8019ba4:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8019ba8:	1b52      	subs	r2, r2, r5
 8019baa:	4653      	mov	r3, sl
 8019bac:	4638      	mov	r0, r7
 8019bae:	4421      	add	r1, r4
 8019bb0:	47b0      	blx	r6
 8019bb2:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8019bb6:	4405      	add	r5, r0
 8019bb8:	4295      	cmp	r5, r2
 8019bba:	d3f1      	bcc.n	8019ba0 <uxr_write_framed_msg+0x1ec>
 8019bbc:	d1b7      	bne.n	8019b2e <uxr_write_framed_msg+0x17a>
 8019bbe:	f884 8062 	strb.w	r8, [r4, #98]	; 0x62
 8019bc2:	e7d1      	b.n	8019b68 <uxr_write_framed_msg+0x1b4>
 8019bc4:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8019bc8:	b19a      	cbz	r2, 8019bf2 <uxr_write_framed_msg+0x23e>
 8019bca:	2500      	movs	r5, #0
 8019bcc:	e001      	b.n	8019bd2 <uxr_write_framed_msg+0x21e>
 8019bce:	2800      	cmp	r0, #0
 8019bd0:	d0ad      	beq.n	8019b2e <uxr_write_framed_msg+0x17a>
 8019bd2:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8019bd6:	1b52      	subs	r2, r2, r5
 8019bd8:	4653      	mov	r3, sl
 8019bda:	4638      	mov	r0, r7
 8019bdc:	4421      	add	r1, r4
 8019bde:	47b0      	blx	r6
 8019be0:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8019be4:	4405      	add	r5, r0
 8019be6:	4295      	cmp	r5, r2
 8019be8:	d3f1      	bcc.n	8019bce <uxr_write_framed_msg+0x21a>
 8019bea:	d1a0      	bne.n	8019b2e <uxr_write_framed_msg+0x17a>
 8019bec:	2300      	movs	r3, #0
 8019bee:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8019bf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019bf4:	b298      	uxth	r0, r3
 8019bf6:	b003      	add	sp, #12
 8019bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bfc:	f04f 0300 	mov.w	r3, #0
 8019c00:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8019c04:	e72a      	b.n	8019a5c <uxr_write_framed_msg+0xa8>
 8019c06:	217d      	movs	r1, #125	; 0x7d
 8019c08:	f082 0220 	eor.w	r2, r2, #32
 8019c0c:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 8019c10:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8019c14:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 8019c18:	2203      	movs	r2, #3
 8019c1a:	2901      	cmp	r1, #1
 8019c1c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019c20:	d803      	bhi.n	8019c2a <uxr_write_framed_msg+0x276>
 8019c22:	2105      	movs	r1, #5
 8019c24:	f04f 0c04 	mov.w	ip, #4
 8019c28:	e737      	b.n	8019a9a <uxr_write_framed_msg+0xe6>
 8019c2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019c2c:	2104      	movs	r1, #4
 8019c2e:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 8019c32:	b2dd      	uxtb	r5, r3
 8019c34:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8019c38:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 8019c3c:	2a01      	cmp	r2, #1
 8019c3e:	f63f aee1 	bhi.w	8019a04 <uxr_write_framed_msg+0x50>
 8019c42:	e73c      	b.n	8019abe <uxr_write_framed_msg+0x10a>
 8019c44:	0801e034 	.word	0x0801e034

08019c48 <uxr_framing_read_transport>:
 8019c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c4c:	4604      	mov	r4, r0
 8019c4e:	b085      	sub	sp, #20
 8019c50:	4692      	mov	sl, r2
 8019c52:	4689      	mov	r9, r1
 8019c54:	461d      	mov	r5, r3
 8019c56:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8019c58:	f7f7 fe6c 	bl	8011934 <uxr_millis>
 8019c5c:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8019c60:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 8019c64:	4680      	mov	r8, r0
 8019c66:	42ba      	cmp	r2, r7
 8019c68:	d05f      	beq.n	8019d2a <uxr_framing_read_transport+0xe2>
 8019c6a:	d817      	bhi.n	8019c9c <uxr_framing_read_transport+0x54>
 8019c6c:	3f01      	subs	r7, #1
 8019c6e:	1aba      	subs	r2, r7, r2
 8019c70:	2700      	movs	r7, #0
 8019c72:	b2d2      	uxtb	r2, r2
 8019c74:	42b2      	cmp	r2, r6
 8019c76:	d81a      	bhi.n	8019cae <uxr_framing_read_transport+0x66>
 8019c78:	19d3      	adds	r3, r2, r7
 8019c7a:	42b3      	cmp	r3, r6
 8019c7c:	d852      	bhi.n	8019d24 <uxr_framing_read_transport+0xdc>
 8019c7e:	b9d2      	cbnz	r2, 8019cb6 <uxr_framing_read_transport+0x6e>
 8019c80:	2600      	movs	r6, #0
 8019c82:	f7f7 fe57 	bl	8011934 <uxr_millis>
 8019c86:	682b      	ldr	r3, [r5, #0]
 8019c88:	eba0 0008 	sub.w	r0, r0, r8
 8019c8c:	1a1b      	subs	r3, r3, r0
 8019c8e:	4630      	mov	r0, r6
 8019c90:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019c94:	602b      	str	r3, [r5, #0]
 8019c96:	b005      	add	sp, #20
 8019c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c9c:	2f00      	cmp	r7, #0
 8019c9e:	d060      	beq.n	8019d62 <uxr_framing_read_transport+0x11a>
 8019ca0:	f1c2 022a 	rsb	r2, r2, #42	; 0x2a
 8019ca4:	3f01      	subs	r7, #1
 8019ca6:	b2d2      	uxtb	r2, r2
 8019ca8:	b2ff      	uxtb	r7, r7
 8019caa:	42b2      	cmp	r2, r6
 8019cac:	d9e4      	bls.n	8019c78 <uxr_framing_read_transport+0x30>
 8019cae:	b2f2      	uxtb	r2, r6
 8019cb0:	2700      	movs	r7, #0
 8019cb2:	2a00      	cmp	r2, #0
 8019cb4:	d0e4      	beq.n	8019c80 <uxr_framing_read_transport+0x38>
 8019cb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019cb8:	4650      	mov	r0, sl
 8019cba:	9203      	str	r2, [sp, #12]
 8019cbc:	9300      	str	r3, [sp, #0]
 8019cbe:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8019cc2:	682b      	ldr	r3, [r5, #0]
 8019cc4:	3102      	adds	r1, #2
 8019cc6:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 8019d6c <uxr_framing_read_transport+0x124>
 8019cca:	4421      	add	r1, r4
 8019ccc:	47c8      	blx	r9
 8019cce:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8019cd2:	4606      	mov	r6, r0
 8019cd4:	4403      	add	r3, r0
 8019cd6:	0859      	lsrs	r1, r3, #1
 8019cd8:	fbab 2101 	umull	r2, r1, fp, r1
 8019cdc:	222a      	movs	r2, #42	; 0x2a
 8019cde:	0889      	lsrs	r1, r1, #2
 8019ce0:	fb02 3111 	mls	r1, r2, r1, r3
 8019ce4:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8019ce8:	2800      	cmp	r0, #0
 8019cea:	d0c9      	beq.n	8019c80 <uxr_framing_read_transport+0x38>
 8019cec:	9a03      	ldr	r2, [sp, #12]
 8019cee:	4290      	cmp	r0, r2
 8019cf0:	d1c7      	bne.n	8019c82 <uxr_framing_read_transport+0x3a>
 8019cf2:	2f00      	cmp	r7, #0
 8019cf4:	d0c5      	beq.n	8019c82 <uxr_framing_read_transport+0x3a>
 8019cf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019cf8:	3102      	adds	r1, #2
 8019cfa:	463a      	mov	r2, r7
 8019cfc:	4650      	mov	r0, sl
 8019cfe:	4421      	add	r1, r4
 8019d00:	9300      	str	r3, [sp, #0]
 8019d02:	2300      	movs	r3, #0
 8019d04:	47c8      	blx	r9
 8019d06:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8019d0a:	4406      	add	r6, r0
 8019d0c:	1813      	adds	r3, r2, r0
 8019d0e:	085a      	lsrs	r2, r3, #1
 8019d10:	fbab 1b02 	umull	r1, fp, fp, r2
 8019d14:	222a      	movs	r2, #42	; 0x2a
 8019d16:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 8019d1a:	fb02 331b 	mls	r3, r2, fp, r3
 8019d1e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8019d22:	e7ae      	b.n	8019c82 <uxr_framing_read_transport+0x3a>
 8019d24:	1ab6      	subs	r6, r6, r2
 8019d26:	b2f7      	uxtb	r7, r6
 8019d28:	e7a9      	b.n	8019c7e <uxr_framing_read_transport+0x36>
 8019d2a:	2300      	movs	r3, #0
 8019d2c:	2e28      	cmp	r6, #40	; 0x28
 8019d2e:	85a3      	strh	r3, [r4, #44]	; 0x2c
 8019d30:	d9bd      	bls.n	8019cae <uxr_framing_read_transport+0x66>
 8019d32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019d34:	2229      	movs	r2, #41	; 0x29
 8019d36:	1ca1      	adds	r1, r4, #2
 8019d38:	4650      	mov	r0, sl
 8019d3a:	9300      	str	r3, [sp, #0]
 8019d3c:	682b      	ldr	r3, [r5, #0]
 8019d3e:	47c8      	blx	r9
 8019d40:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8019d44:	4606      	mov	r6, r0
 8019d46:	212a      	movs	r1, #42	; 0x2a
 8019d48:	4403      	add	r3, r0
 8019d4a:	4808      	ldr	r0, [pc, #32]	; (8019d6c <uxr_framing_read_transport+0x124>)
 8019d4c:	085a      	lsrs	r2, r3, #1
 8019d4e:	fba0 0202 	umull	r0, r2, r0, r2
 8019d52:	0892      	lsrs	r2, r2, #2
 8019d54:	fb01 3312 	mls	r3, r1, r2, r3
 8019d58:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8019d5c:	2e00      	cmp	r6, #0
 8019d5e:	d08f      	beq.n	8019c80 <uxr_framing_read_transport+0x38>
 8019d60:	e78f      	b.n	8019c82 <uxr_framing_read_transport+0x3a>
 8019d62:	f1c2 0229 	rsb	r2, r2, #41	; 0x29
 8019d66:	b2d2      	uxtb	r2, r2
 8019d68:	e784      	b.n	8019c74 <uxr_framing_read_transport+0x2c>
 8019d6a:	bf00      	nop
 8019d6c:	30c30c31 	.word	0x30c30c31

08019d70 <uxr_read_framed_msg>:
 8019d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d74:	461e      	mov	r6, r3
 8019d76:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8019d7a:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8019d7e:	b083      	sub	sp, #12
 8019d80:	4604      	mov	r4, r0
 8019d82:	4688      	mov	r8, r1
 8019d84:	429d      	cmp	r5, r3
 8019d86:	4691      	mov	r9, r2
 8019d88:	f000 818c 	beq.w	801a0a4 <uxr_read_framed_msg+0x334>
 8019d8c:	7823      	ldrb	r3, [r4, #0]
 8019d8e:	4dc3      	ldr	r5, [pc, #780]	; (801a09c <uxr_read_framed_msg+0x32c>)
 8019d90:	4fc3      	ldr	r7, [pc, #780]	; (801a0a0 <uxr_read_framed_msg+0x330>)
 8019d92:	2b07      	cmp	r3, #7
 8019d94:	d8fd      	bhi.n	8019d92 <uxr_read_framed_msg+0x22>
 8019d96:	e8df f013 	tbh	[pc, r3, lsl #1]
 8019d9a:	011c      	.short	0x011c
 8019d9c:	00d900fb 	.word	0x00d900fb
 8019da0:	008f00ba 	.word	0x008f00ba
 8019da4:	00320051 	.word	0x00320051
 8019da8:	0008      	.short	0x0008
 8019daa:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8019dae:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8019db2:	4299      	cmp	r1, r3
 8019db4:	f000 814d 	beq.w	801a052 <uxr_read_framed_msg+0x2e2>
 8019db8:	18e2      	adds	r2, r4, r3
 8019dba:	7892      	ldrb	r2, [r2, #2]
 8019dbc:	2a7d      	cmp	r2, #125	; 0x7d
 8019dbe:	f000 81b8 	beq.w	801a132 <uxr_read_framed_msg+0x3c2>
 8019dc2:	3301      	adds	r3, #1
 8019dc4:	212a      	movs	r1, #42	; 0x2a
 8019dc6:	2a7e      	cmp	r2, #126	; 0x7e
 8019dc8:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8019dcc:	fba5 c000 	umull	ip, r0, r5, r0
 8019dd0:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8019dd4:	fb01 3310 	mls	r3, r1, r0, r3
 8019dd8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019ddc:	f000 8257 	beq.w	801a28e <uxr_read_framed_msg+0x51e>
 8019de0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8019de2:	2000      	movs	r0, #0
 8019de4:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8019de6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8019dea:	7020      	strb	r0, [r4, #0]
 8019dec:	b29b      	uxth	r3, r3
 8019dee:	4299      	cmp	r1, r3
 8019df0:	86a3      	strh	r3, [r4, #52]	; 0x34
 8019df2:	f000 8178 	beq.w	801a0e6 <uxr_read_framed_msg+0x376>
 8019df6:	2000      	movs	r0, #0
 8019df8:	b003      	add	sp, #12
 8019dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019dfe:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8019e02:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8019e06:	4298      	cmp	r0, r3
 8019e08:	f000 8132 	beq.w	801a070 <uxr_read_framed_msg+0x300>
 8019e0c:	18e2      	adds	r2, r4, r3
 8019e0e:	7891      	ldrb	r1, [r2, #2]
 8019e10:	297d      	cmp	r1, #125	; 0x7d
 8019e12:	f000 8170 	beq.w	801a0f6 <uxr_read_framed_msg+0x386>
 8019e16:	3301      	adds	r3, #1
 8019e18:	202a      	movs	r0, #42	; 0x2a
 8019e1a:	297e      	cmp	r1, #126	; 0x7e
 8019e1c:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8019e20:	fba5 c202 	umull	ip, r2, r5, r2
 8019e24:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019e28:	fb00 3312 	mls	r3, r0, r2, r3
 8019e2c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019e30:	f000 821d 	beq.w	801a26e <uxr_read_framed_msg+0x4fe>
 8019e34:	2307      	movs	r3, #7
 8019e36:	86a1      	strh	r1, [r4, #52]	; 0x34
 8019e38:	7023      	strb	r3, [r4, #0]
 8019e3a:	e7aa      	b.n	8019d92 <uxr_read_framed_msg+0x22>
 8019e3c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8019e3e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8019e42:	459e      	cmp	lr, r3
 8019e44:	d827      	bhi.n	8019e96 <uxr_read_framed_msg+0x126>
 8019e46:	e032      	b.n	8019eae <uxr_read_framed_msg+0x13e>
 8019e48:	fba5 b101 	umull	fp, r1, r5, r1
 8019e4c:	f89c c002 	ldrb.w	ip, [ip, #2]
 8019e50:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 8019e54:	0889      	lsrs	r1, r1, #2
 8019e56:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 8019e5a:	fb0b 0111 	mls	r1, fp, r1, r0
 8019e5e:	f000 80d4 	beq.w	801a00a <uxr_read_framed_msg+0x29a>
 8019e62:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8019e66:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 8019e6a:	f000 80cb 	beq.w	801a004 <uxr_read_framed_msg+0x294>
 8019e6e:	f806 c003 	strb.w	ip, [r6, r3]
 8019e72:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8019e74:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8019e76:	ea80 010c 	eor.w	r1, r0, ip
 8019e7a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8019e7e:	3301      	adds	r3, #1
 8019e80:	b2c9      	uxtb	r1, r1
 8019e82:	b29b      	uxth	r3, r3
 8019e84:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 8019e88:	4573      	cmp	r3, lr
 8019e8a:	8663      	strh	r3, [r4, #50]	; 0x32
 8019e8c:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8019e90:	86e2      	strh	r2, [r4, #54]	; 0x36
 8019e92:	f080 811d 	bcs.w	801a0d0 <uxr_read_framed_msg+0x360>
 8019e96:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8019e9a:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8019e9e:	1c50      	adds	r0, r2, #1
 8019ea0:	eb04 0c02 	add.w	ip, r4, r2
 8019ea4:	4592      	cmp	sl, r2
 8019ea6:	ea4f 0150 	mov.w	r1, r0, lsr #1
 8019eaa:	d1cd      	bne.n	8019e48 <uxr_read_framed_msg+0xd8>
 8019eac:	459e      	cmp	lr, r3
 8019eae:	f040 8114 	bne.w	801a0da <uxr_read_framed_msg+0x36a>
 8019eb2:	2306      	movs	r3, #6
 8019eb4:	7023      	strb	r3, [r4, #0]
 8019eb6:	e76c      	b.n	8019d92 <uxr_read_framed_msg+0x22>
 8019eb8:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8019ebc:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8019ec0:	4298      	cmp	r0, r3
 8019ec2:	f000 80c6 	beq.w	801a052 <uxr_read_framed_msg+0x2e2>
 8019ec6:	18e2      	adds	r2, r4, r3
 8019ec8:	7891      	ldrb	r1, [r2, #2]
 8019eca:	297d      	cmp	r1, #125	; 0x7d
 8019ecc:	f000 8193 	beq.w	801a1f6 <uxr_read_framed_msg+0x486>
 8019ed0:	3301      	adds	r3, #1
 8019ed2:	202a      	movs	r0, #42	; 0x2a
 8019ed4:	297e      	cmp	r1, #126	; 0x7e
 8019ed6:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8019eda:	fba5 c202 	umull	ip, r2, r5, r2
 8019ede:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019ee2:	fb00 3312 	mls	r3, r0, r2, r3
 8019ee6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019eea:	f000 81d0 	beq.w	801a28e <uxr_read_framed_msg+0x51e>
 8019eee:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8019ef0:	2000      	movs	r0, #0
 8019ef2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8019ef6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019ef8:	8660      	strh	r0, [r4, #50]	; 0x32
 8019efa:	b29b      	uxth	r3, r3
 8019efc:	86e0      	strh	r0, [r4, #54]	; 0x36
 8019efe:	428b      	cmp	r3, r1
 8019f00:	8623      	strh	r3, [r4, #48]	; 0x30
 8019f02:	f240 80e2 	bls.w	801a0ca <uxr_read_framed_msg+0x35a>
 8019f06:	7020      	strb	r0, [r4, #0]
 8019f08:	b003      	add	sp, #12
 8019f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f0e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8019f12:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8019f16:	4298      	cmp	r0, r3
 8019f18:	f000 80aa 	beq.w	801a070 <uxr_read_framed_msg+0x300>
 8019f1c:	18e2      	adds	r2, r4, r3
 8019f1e:	7891      	ldrb	r1, [r2, #2]
 8019f20:	297d      	cmp	r1, #125	; 0x7d
 8019f22:	f000 8186 	beq.w	801a232 <uxr_read_framed_msg+0x4c2>
 8019f26:	3301      	adds	r3, #1
 8019f28:	202a      	movs	r0, #42	; 0x2a
 8019f2a:	297e      	cmp	r1, #126	; 0x7e
 8019f2c:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8019f30:	fba5 c202 	umull	ip, r2, r5, r2
 8019f34:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019f38:	fb00 3312 	mls	r3, r0, r2, r3
 8019f3c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019f40:	f000 8195 	beq.w	801a26e <uxr_read_framed_msg+0x4fe>
 8019f44:	2304      	movs	r3, #4
 8019f46:	8621      	strh	r1, [r4, #48]	; 0x30
 8019f48:	7023      	strb	r3, [r4, #0]
 8019f4a:	e722      	b.n	8019d92 <uxr_read_framed_msg+0x22>
 8019f4c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8019f50:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8019f54:	4290      	cmp	r0, r2
 8019f56:	f000 80b4 	beq.w	801a0c2 <uxr_read_framed_msg+0x352>
 8019f5a:	18a3      	adds	r3, r4, r2
 8019f5c:	7899      	ldrb	r1, [r3, #2]
 8019f5e:	297d      	cmp	r1, #125	; 0x7d
 8019f60:	f000 8107 	beq.w	801a172 <uxr_read_framed_msg+0x402>
 8019f64:	3201      	adds	r2, #1
 8019f66:	232a      	movs	r3, #42	; 0x2a
 8019f68:	297e      	cmp	r1, #126	; 0x7e
 8019f6a:	ea4f 0052 	mov.w	r0, r2, lsr #1
 8019f6e:	fba5 c000 	umull	ip, r0, r5, r0
 8019f72:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8019f76:	fb03 2210 	mls	r2, r3, r0, r2
 8019f7a:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8019f7e:	f000 818a 	beq.w	801a296 <uxr_read_framed_msg+0x526>
 8019f82:	7863      	ldrb	r3, [r4, #1]
 8019f84:	428b      	cmp	r3, r1
 8019f86:	bf0c      	ite	eq
 8019f88:	2303      	moveq	r3, #3
 8019f8a:	2300      	movne	r3, #0
 8019f8c:	7023      	strb	r3, [r4, #0]
 8019f8e:	e700      	b.n	8019d92 <uxr_read_framed_msg+0x22>
 8019f90:	2300      	movs	r3, #0
 8019f92:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8019f96:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8019f9a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8019f9e:	4299      	cmp	r1, r3
 8019fa0:	d06a      	beq.n	801a078 <uxr_read_framed_msg+0x308>
 8019fa2:	18e2      	adds	r2, r4, r3
 8019fa4:	7890      	ldrb	r0, [r2, #2]
 8019fa6:	287d      	cmp	r0, #125	; 0x7d
 8019fa8:	f000 8100 	beq.w	801a1ac <uxr_read_framed_msg+0x43c>
 8019fac:	3301      	adds	r3, #1
 8019fae:	212a      	movs	r1, #42	; 0x2a
 8019fb0:	287e      	cmp	r0, #126	; 0x7e
 8019fb2:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 8019fb6:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8019fba:	fba5 c202 	umull	ip, r2, r5, r2
 8019fbe:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019fc2:	fb01 3312 	mls	r3, r1, r2, r3
 8019fc6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019fca:	d055      	beq.n	801a078 <uxr_read_framed_msg+0x308>
 8019fcc:	2302      	movs	r3, #2
 8019fce:	7023      	strb	r3, [r4, #0]
 8019fd0:	e6df      	b.n	8019d92 <uxr_read_framed_msg+0x22>
 8019fd2:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
 8019fd6:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 8019fda:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8019fde:	1c5a      	adds	r2, r3, #1
 8019fe0:	459c      	cmp	ip, r3
 8019fe2:	eb04 0103 	add.w	r1, r4, r3
 8019fe6:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8019fea:	f43f af04 	beq.w	8019df6 <uxr_read_framed_msg+0x86>
 8019fee:	fba5 0303 	umull	r0, r3, r5, r3
 8019ff2:	7889      	ldrb	r1, [r1, #2]
 8019ff4:	089b      	lsrs	r3, r3, #2
 8019ff6:	297e      	cmp	r1, #126	; 0x7e
 8019ff8:	fb0e 2313 	mls	r3, lr, r3, r2
 8019ffc:	b2db      	uxtb	r3, r3
 8019ffe:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801a002:	d1ec      	bne.n	8019fde <uxr_read_framed_msg+0x26e>
 801a004:	2301      	movs	r3, #1
 801a006:	7023      	strb	r3, [r4, #0]
 801a008:	e6c3      	b.n	8019d92 <uxr_read_framed_msg+0x22>
 801a00a:	1c50      	adds	r0, r2, #1
 801a00c:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 801a010:	3202      	adds	r2, #2
 801a012:	0841      	lsrs	r1, r0, #1
 801a014:	fba5 c101 	umull	ip, r1, r5, r1
 801a018:	0889      	lsrs	r1, r1, #2
 801a01a:	fb0b 0111 	mls	r1, fp, r1, r0
 801a01e:	1860      	adds	r0, r4, r1
 801a020:	b2c9      	uxtb	r1, r1
 801a022:	458a      	cmp	sl, r1
 801a024:	f43f af42 	beq.w	8019eac <uxr_read_framed_msg+0x13c>
 801a028:	0851      	lsrs	r1, r2, #1
 801a02a:	7880      	ldrb	r0, [r0, #2]
 801a02c:	fba5 a101 	umull	sl, r1, r5, r1
 801a030:	287e      	cmp	r0, #126	; 0x7e
 801a032:	f080 0c20 	eor.w	ip, r0, #32
 801a036:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801a03a:	fb0b 2211 	mls	r2, fp, r1, r2
 801a03e:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801a042:	f47f af14 	bne.w	8019e6e <uxr_read_framed_msg+0xfe>
 801a046:	459e      	cmp	lr, r3
 801a048:	f43f af33 	beq.w	8019eb2 <uxr_read_framed_msg+0x142>
 801a04c:	2301      	movs	r3, #1
 801a04e:	7023      	strb	r3, [r4, #0]
 801a050:	e69f      	b.n	8019d92 <uxr_read_framed_msg+0x22>
 801a052:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a054:	9300      	str	r3, [sp, #0]
 801a056:	2301      	movs	r3, #1
 801a058:	9301      	str	r3, [sp, #4]
 801a05a:	464a      	mov	r2, r9
 801a05c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a05e:	4641      	mov	r1, r8
 801a060:	4620      	mov	r0, r4
 801a062:	f7ff fdf1 	bl	8019c48 <uxr_framing_read_transport>
 801a066:	2800      	cmp	r0, #0
 801a068:	f43f aec5 	beq.w	8019df6 <uxr_read_framed_msg+0x86>
 801a06c:	7823      	ldrb	r3, [r4, #0]
 801a06e:	e690      	b.n	8019d92 <uxr_read_framed_msg+0x22>
 801a070:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a072:	9300      	str	r3, [sp, #0]
 801a074:	2302      	movs	r3, #2
 801a076:	e7ef      	b.n	801a058 <uxr_read_framed_msg+0x2e8>
 801a078:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a07a:	464a      	mov	r2, r9
 801a07c:	4641      	mov	r1, r8
 801a07e:	4620      	mov	r0, r4
 801a080:	9300      	str	r3, [sp, #0]
 801a082:	2304      	movs	r3, #4
 801a084:	9301      	str	r3, [sp, #4]
 801a086:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a088:	f7ff fdde 	bl	8019c48 <uxr_framing_read_transport>
 801a08c:	2800      	cmp	r0, #0
 801a08e:	d1ed      	bne.n	801a06c <uxr_read_framed_msg+0x2fc>
 801a090:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801a094:	2b7e      	cmp	r3, #126	; 0x7e
 801a096:	d0e9      	beq.n	801a06c <uxr_read_framed_msg+0x2fc>
 801a098:	e6ad      	b.n	8019df6 <uxr_read_framed_msg+0x86>
 801a09a:	bf00      	nop
 801a09c:	30c30c31 	.word	0x30c30c31
 801a0a0:	0801e034 	.word	0x0801e034
 801a0a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a0a6:	9300      	str	r3, [sp, #0]
 801a0a8:	2305      	movs	r3, #5
 801a0aa:	9301      	str	r3, [sp, #4]
 801a0ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a0ae:	f7ff fdcb 	bl	8019c48 <uxr_framing_read_transport>
 801a0b2:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801a0b6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801a0ba:	429a      	cmp	r2, r3
 801a0bc:	f43f ae9b 	beq.w	8019df6 <uxr_read_framed_msg+0x86>
 801a0c0:	e664      	b.n	8019d8c <uxr_read_framed_msg+0x1c>
 801a0c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a0c4:	9300      	str	r3, [sp, #0]
 801a0c6:	2303      	movs	r3, #3
 801a0c8:	e7c6      	b.n	801a058 <uxr_read_framed_msg+0x2e8>
 801a0ca:	2305      	movs	r3, #5
 801a0cc:	7023      	strb	r3, [r4, #0]
 801a0ce:	e660      	b.n	8019d92 <uxr_read_framed_msg+0x22>
 801a0d0:	f43f aeef 	beq.w	8019eb2 <uxr_read_framed_msg+0x142>
 801a0d4:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 801a0d8:	d094      	beq.n	801a004 <uxr_read_framed_msg+0x294>
 801a0da:	ebae 0303 	sub.w	r3, lr, r3
 801a0de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a0e0:	3302      	adds	r3, #2
 801a0e2:	9200      	str	r2, [sp, #0]
 801a0e4:	e7b8      	b.n	801a058 <uxr_read_framed_msg+0x2e8>
 801a0e6:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801a0ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a0ec:	7013      	strb	r3, [r2, #0]
 801a0ee:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 801a0f0:	b003      	add	sp, #12
 801a0f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0f6:	1c59      	adds	r1, r3, #1
 801a0f8:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801a0fc:	084a      	lsrs	r2, r1, #1
 801a0fe:	fba5 e202 	umull	lr, r2, r5, r2
 801a102:	0892      	lsrs	r2, r2, #2
 801a104:	fb0c 1212 	mls	r2, ip, r2, r1
 801a108:	b2d1      	uxtb	r1, r2
 801a10a:	4288      	cmp	r0, r1
 801a10c:	d0b0      	beq.n	801a070 <uxr_read_framed_msg+0x300>
 801a10e:	3302      	adds	r3, #2
 801a110:	4422      	add	r2, r4
 801a112:	7891      	ldrb	r1, [r2, #2]
 801a114:	085a      	lsrs	r2, r3, #1
 801a116:	fba5 0202 	umull	r0, r2, r5, r2
 801a11a:	297e      	cmp	r1, #126	; 0x7e
 801a11c:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801a120:	fb0c 3312 	mls	r3, ip, r2, r3
 801a124:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801a128:	f000 80a1 	beq.w	801a26e <uxr_read_framed_msg+0x4fe>
 801a12c:	f081 0120 	eor.w	r1, r1, #32
 801a130:	e680      	b.n	8019e34 <uxr_read_framed_msg+0xc4>
 801a132:	f103 0c01 	add.w	ip, r3, #1
 801a136:	202a      	movs	r0, #42	; 0x2a
 801a138:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801a13c:	fba5 e202 	umull	lr, r2, r5, r2
 801a140:	0892      	lsrs	r2, r2, #2
 801a142:	fb00 c212 	mls	r2, r0, r2, ip
 801a146:	fa5f fc82 	uxtb.w	ip, r2
 801a14a:	4561      	cmp	r1, ip
 801a14c:	d081      	beq.n	801a052 <uxr_read_framed_msg+0x2e2>
 801a14e:	3302      	adds	r3, #2
 801a150:	4422      	add	r2, r4
 801a152:	0859      	lsrs	r1, r3, #1
 801a154:	7892      	ldrb	r2, [r2, #2]
 801a156:	fba5 c101 	umull	ip, r1, r5, r1
 801a15a:	2a7e      	cmp	r2, #126	; 0x7e
 801a15c:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801a160:	fb00 3311 	mls	r3, r0, r1, r3
 801a164:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801a168:	f000 8091 	beq.w	801a28e <uxr_read_framed_msg+0x51e>
 801a16c:	f082 0220 	eor.w	r2, r2, #32
 801a170:	e636      	b.n	8019de0 <uxr_read_framed_msg+0x70>
 801a172:	1c51      	adds	r1, r2, #1
 801a174:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801a178:	084b      	lsrs	r3, r1, #1
 801a17a:	fba5 e303 	umull	lr, r3, r5, r3
 801a17e:	089b      	lsrs	r3, r3, #2
 801a180:	fb0c 1313 	mls	r3, ip, r3, r1
 801a184:	b2d9      	uxtb	r1, r3
 801a186:	4288      	cmp	r0, r1
 801a188:	d09b      	beq.n	801a0c2 <uxr_read_framed_msg+0x352>
 801a18a:	3202      	adds	r2, #2
 801a18c:	4423      	add	r3, r4
 801a18e:	0850      	lsrs	r0, r2, #1
 801a190:	789b      	ldrb	r3, [r3, #2]
 801a192:	fba5 1000 	umull	r1, r0, r5, r0
 801a196:	2b7e      	cmp	r3, #126	; 0x7e
 801a198:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801a19c:	fb0c 2210 	mls	r2, ip, r0, r2
 801a1a0:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801a1a4:	d077      	beq.n	801a296 <uxr_read_framed_msg+0x526>
 801a1a6:	f083 0120 	eor.w	r1, r3, #32
 801a1aa:	e6ea      	b.n	8019f82 <uxr_read_framed_msg+0x212>
 801a1ac:	f103 0c01 	add.w	ip, r3, #1
 801a1b0:	202a      	movs	r0, #42	; 0x2a
 801a1b2:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801a1b6:	fba5 e202 	umull	lr, r2, r5, r2
 801a1ba:	0892      	lsrs	r2, r2, #2
 801a1bc:	fb00 c212 	mls	r2, r0, r2, ip
 801a1c0:	fa5f fc82 	uxtb.w	ip, r2
 801a1c4:	4561      	cmp	r1, ip
 801a1c6:	f43f af57 	beq.w	801a078 <uxr_read_framed_msg+0x308>
 801a1ca:	3302      	adds	r3, #2
 801a1cc:	4422      	add	r2, r4
 801a1ce:	7891      	ldrb	r1, [r2, #2]
 801a1d0:	085a      	lsrs	r2, r3, #1
 801a1d2:	fba5 c202 	umull	ip, r2, r5, r2
 801a1d6:	297e      	cmp	r1, #126	; 0x7e
 801a1d8:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 801a1dc:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801a1e0:	fb00 3312 	mls	r3, r0, r2, r3
 801a1e4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801a1e8:	f43f af46 	beq.w	801a078 <uxr_read_framed_msg+0x308>
 801a1ec:	f081 0120 	eor.w	r1, r1, #32
 801a1f0:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 801a1f4:	e6ea      	b.n	8019fcc <uxr_read_framed_msg+0x25c>
 801a1f6:	1c59      	adds	r1, r3, #1
 801a1f8:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801a1fc:	084a      	lsrs	r2, r1, #1
 801a1fe:	fba5 e202 	umull	lr, r2, r5, r2
 801a202:	0892      	lsrs	r2, r2, #2
 801a204:	fb0c 1212 	mls	r2, ip, r2, r1
 801a208:	b2d1      	uxtb	r1, r2
 801a20a:	4288      	cmp	r0, r1
 801a20c:	f43f af21 	beq.w	801a052 <uxr_read_framed_msg+0x2e2>
 801a210:	3302      	adds	r3, #2
 801a212:	4422      	add	r2, r4
 801a214:	7891      	ldrb	r1, [r2, #2]
 801a216:	085a      	lsrs	r2, r3, #1
 801a218:	fba5 0202 	umull	r0, r2, r5, r2
 801a21c:	297e      	cmp	r1, #126	; 0x7e
 801a21e:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801a222:	fb0c 3312 	mls	r3, ip, r2, r3
 801a226:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801a22a:	d030      	beq.n	801a28e <uxr_read_framed_msg+0x51e>
 801a22c:	f081 0120 	eor.w	r1, r1, #32
 801a230:	e65d      	b.n	8019eee <uxr_read_framed_msg+0x17e>
 801a232:	1c59      	adds	r1, r3, #1
 801a234:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801a238:	084a      	lsrs	r2, r1, #1
 801a23a:	fba5 e202 	umull	lr, r2, r5, r2
 801a23e:	0892      	lsrs	r2, r2, #2
 801a240:	fb0c 1212 	mls	r2, ip, r2, r1
 801a244:	b2d1      	uxtb	r1, r2
 801a246:	4288      	cmp	r0, r1
 801a248:	f43f af12 	beq.w	801a070 <uxr_read_framed_msg+0x300>
 801a24c:	3302      	adds	r3, #2
 801a24e:	4422      	add	r2, r4
 801a250:	7891      	ldrb	r1, [r2, #2]
 801a252:	085a      	lsrs	r2, r3, #1
 801a254:	fba5 0202 	umull	r0, r2, r5, r2
 801a258:	297e      	cmp	r1, #126	; 0x7e
 801a25a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801a25e:	fb0c 3312 	mls	r3, ip, r2, r3
 801a262:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801a266:	d002      	beq.n	801a26e <uxr_read_framed_msg+0x4fe>
 801a268:	f081 0120 	eor.w	r1, r1, #32
 801a26c:	e66a      	b.n	8019f44 <uxr_read_framed_msg+0x1d4>
 801a26e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a270:	9300      	str	r3, [sp, #0]
 801a272:	2302      	movs	r3, #2
 801a274:	9301      	str	r3, [sp, #4]
 801a276:	464a      	mov	r2, r9
 801a278:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a27a:	4641      	mov	r1, r8
 801a27c:	4620      	mov	r0, r4
 801a27e:	f7ff fce3 	bl	8019c48 <uxr_framing_read_transport>
 801a282:	2800      	cmp	r0, #0
 801a284:	f47f aef2 	bne.w	801a06c <uxr_read_framed_msg+0x2fc>
 801a288:	2301      	movs	r3, #1
 801a28a:	7023      	strb	r3, [r4, #0]
 801a28c:	e581      	b.n	8019d92 <uxr_read_framed_msg+0x22>
 801a28e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a290:	9300      	str	r3, [sp, #0]
 801a292:	2301      	movs	r3, #1
 801a294:	e7ee      	b.n	801a274 <uxr_read_framed_msg+0x504>
 801a296:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a298:	9300      	str	r3, [sp, #0]
 801a29a:	2303      	movs	r3, #3
 801a29c:	e7ea      	b.n	801a274 <uxr_read_framed_msg+0x504>
 801a29e:	bf00      	nop

0801a2a0 <rcl_get_automatic_discovery_range>:
 801a2a0:	b530      	push	{r4, r5, lr}
 801a2a2:	2300      	movs	r3, #0
 801a2a4:	b083      	sub	sp, #12
 801a2a6:	9301      	str	r3, [sp, #4]
 801a2a8:	b1c0      	cbz	r0, 801a2dc <rcl_get_automatic_discovery_range+0x3c>
 801a2aa:	4604      	mov	r4, r0
 801a2ac:	a901      	add	r1, sp, #4
 801a2ae:	4818      	ldr	r0, [pc, #96]	; (801a310 <rcl_get_automatic_discovery_range+0x70>)
 801a2b0:	f7fc fd22 	bl	8016cf8 <rcutils_get_env>
 801a2b4:	b110      	cbz	r0, 801a2bc <rcl_get_automatic_discovery_range+0x1c>
 801a2b6:	2001      	movs	r0, #1
 801a2b8:	b003      	add	sp, #12
 801a2ba:	bd30      	pop	{r4, r5, pc}
 801a2bc:	9d01      	ldr	r5, [sp, #4]
 801a2be:	782b      	ldrb	r3, [r5, #0]
 801a2c0:	b13b      	cbz	r3, 801a2d2 <rcl_get_automatic_discovery_range+0x32>
 801a2c2:	4914      	ldr	r1, [pc, #80]	; (801a314 <rcl_get_automatic_discovery_range+0x74>)
 801a2c4:	4628      	mov	r0, r5
 801a2c6:	f7e5 ffbb 	bl	8000240 <strcmp>
 801a2ca:	b950      	cbnz	r0, 801a2e2 <rcl_get_automatic_discovery_range+0x42>
 801a2cc:	2301      	movs	r3, #1
 801a2ce:	7023      	strb	r3, [r4, #0]
 801a2d0:	e7f2      	b.n	801a2b8 <rcl_get_automatic_discovery_range+0x18>
 801a2d2:	2303      	movs	r3, #3
 801a2d4:	2000      	movs	r0, #0
 801a2d6:	7023      	strb	r3, [r4, #0]
 801a2d8:	b003      	add	sp, #12
 801a2da:	bd30      	pop	{r4, r5, pc}
 801a2dc:	200b      	movs	r0, #11
 801a2de:	b003      	add	sp, #12
 801a2e0:	bd30      	pop	{r4, r5, pc}
 801a2e2:	490d      	ldr	r1, [pc, #52]	; (801a318 <rcl_get_automatic_discovery_range+0x78>)
 801a2e4:	4628      	mov	r0, r5
 801a2e6:	f7e5 ffab 	bl	8000240 <strcmp>
 801a2ea:	b168      	cbz	r0, 801a308 <rcl_get_automatic_discovery_range+0x68>
 801a2ec:	490b      	ldr	r1, [pc, #44]	; (801a31c <rcl_get_automatic_discovery_range+0x7c>)
 801a2ee:	4628      	mov	r0, r5
 801a2f0:	f7e5 ffa6 	bl	8000240 <strcmp>
 801a2f4:	2800      	cmp	r0, #0
 801a2f6:	d0ec      	beq.n	801a2d2 <rcl_get_automatic_discovery_range+0x32>
 801a2f8:	4909      	ldr	r1, [pc, #36]	; (801a320 <rcl_get_automatic_discovery_range+0x80>)
 801a2fa:	4628      	mov	r0, r5
 801a2fc:	f7e5 ffa0 	bl	8000240 <strcmp>
 801a300:	b910      	cbnz	r0, 801a308 <rcl_get_automatic_discovery_range+0x68>
 801a302:	2304      	movs	r3, #4
 801a304:	7023      	strb	r3, [r4, #0]
 801a306:	e7d7      	b.n	801a2b8 <rcl_get_automatic_discovery_range+0x18>
 801a308:	2302      	movs	r3, #2
 801a30a:	2000      	movs	r0, #0
 801a30c:	7023      	strb	r3, [r4, #0]
 801a30e:	e7d3      	b.n	801a2b8 <rcl_get_automatic_discovery_range+0x18>
 801a310:	0801e234 	.word	0x0801e234
 801a314:	0801e254 	.word	0x0801e254
 801a318:	0801e258 	.word	0x0801e258
 801a31c:	0801e264 	.word	0x0801e264
 801a320:	0801e26c 	.word	0x0801e26c

0801a324 <rcl_automatic_discovery_range_to_string>:
 801a324:	2804      	cmp	r0, #4
 801a326:	d803      	bhi.n	801a330 <rcl_automatic_discovery_range_to_string+0xc>
 801a328:	4b02      	ldr	r3, [pc, #8]	; (801a334 <rcl_automatic_discovery_range_to_string+0x10>)
 801a32a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801a32e:	4770      	bx	lr
 801a330:	2000      	movs	r0, #0
 801a332:	4770      	bx	lr
 801a334:	0801e35c 	.word	0x0801e35c

0801a338 <rcl_get_discovery_static_peers>:
 801a338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a33c:	2300      	movs	r3, #0
 801a33e:	b08e      	sub	sp, #56	; 0x38
 801a340:	9306      	str	r3, [sp, #24]
 801a342:	2900      	cmp	r1, #0
 801a344:	d04b      	beq.n	801a3de <rcl_get_discovery_static_peers+0xa6>
 801a346:	4605      	mov	r5, r0
 801a348:	2800      	cmp	r0, #0
 801a34a:	d048      	beq.n	801a3de <rcl_get_discovery_static_peers+0xa6>
 801a34c:	460c      	mov	r4, r1
 801a34e:	482c      	ldr	r0, [pc, #176]	; (801a400 <rcl_get_discovery_static_peers+0xc8>)
 801a350:	a906      	add	r1, sp, #24
 801a352:	f7fc fcd1 	bl	8016cf8 <rcutils_get_env>
 801a356:	b118      	cbz	r0, 801a360 <rcl_get_discovery_static_peers+0x28>
 801a358:	2001      	movs	r0, #1
 801a35a:	b00e      	add	sp, #56	; 0x38
 801a35c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a360:	9b06      	ldr	r3, [sp, #24]
 801a362:	2b00      	cmp	r3, #0
 801a364:	d0f8      	beq.n	801a358 <rcl_get_discovery_static_peers+0x20>
 801a366:	af07      	add	r7, sp, #28
 801a368:	4638      	mov	r0, r7
 801a36a:	f000 fc73 	bl	801ac54 <rcutils_get_zero_initialized_string_array>
 801a36e:	f104 0308 	add.w	r3, r4, #8
 801a372:	9703      	str	r7, [sp, #12]
 801a374:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801a378:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801a37c:	213b      	movs	r1, #59	; 0x3b
 801a37e:	9806      	ldr	r0, [sp, #24]
 801a380:	e894 000c 	ldmia.w	r4, {r2, r3}
 801a384:	f000 fba8 	bl	801aad8 <rcutils_split>
 801a388:	2800      	cmp	r0, #0
 801a38a:	d1e5      	bne.n	801a358 <rcl_get_discovery_static_peers+0x20>
 801a38c:	4622      	mov	r2, r4
 801a38e:	9907      	ldr	r1, [sp, #28]
 801a390:	4628      	mov	r0, r5
 801a392:	f000 fcaf 	bl	801acf4 <rmw_discovery_options_init>
 801a396:	4604      	mov	r4, r0
 801a398:	bb78      	cbnz	r0, 801a3fa <rcl_get_discovery_static_peers+0xc2>
 801a39a:	9e07      	ldr	r6, [sp, #28]
 801a39c:	b336      	cbz	r6, 801a3ec <rcl_get_discovery_static_peers+0xb4>
 801a39e:	f8dd a020 	ldr.w	sl, [sp, #32]
 801a3a2:	4680      	mov	r8, r0
 801a3a4:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 801a3a8:	ea4f 2904 	mov.w	r9, r4, lsl #8
 801a3ac:	4608      	mov	r0, r1
 801a3ae:	9105      	str	r1, [sp, #20]
 801a3b0:	f7e5 ffa6 	bl	8000300 <strlen>
 801a3b4:	28ff      	cmp	r0, #255	; 0xff
 801a3b6:	9905      	ldr	r1, [sp, #20]
 801a3b8:	d815      	bhi.n	801a3e6 <rcl_get_discovery_static_peers+0xae>
 801a3ba:	6868      	ldr	r0, [r5, #4]
 801a3bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 801a3c0:	eb00 2004 	add.w	r0, r0, r4, lsl #8
 801a3c4:	3401      	adds	r4, #1
 801a3c6:	f001 fa84 	bl	801b8d2 <strncpy>
 801a3ca:	686b      	ldr	r3, [r5, #4]
 801a3cc:	9e07      	ldr	r6, [sp, #28]
 801a3ce:	444b      	add	r3, r9
 801a3d0:	42b4      	cmp	r4, r6
 801a3d2:	f883 80ff 	strb.w	r8, [r3, #255]	; 0xff
 801a3d6:	d209      	bcs.n	801a3ec <rcl_get_discovery_static_peers+0xb4>
 801a3d8:	f8dd a020 	ldr.w	sl, [sp, #32]
 801a3dc:	e7e2      	b.n	801a3a4 <rcl_get_discovery_static_peers+0x6c>
 801a3de:	200b      	movs	r0, #11
 801a3e0:	b00e      	add	sp, #56	; 0x38
 801a3e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a3e6:	3401      	adds	r4, #1
 801a3e8:	42b4      	cmp	r4, r6
 801a3ea:	d3db      	bcc.n	801a3a4 <rcl_get_discovery_static_peers+0x6c>
 801a3ec:	4638      	mov	r0, r7
 801a3ee:	f000 fc4f 	bl	801ac90 <rcutils_string_array_fini>
 801a3f2:	3800      	subs	r0, #0
 801a3f4:	bf18      	it	ne
 801a3f6:	2001      	movne	r0, #1
 801a3f8:	e7af      	b.n	801a35a <rcl_get_discovery_static_peers+0x22>
 801a3fa:	f7f9 fb5f 	bl	8013abc <rcl_convert_rmw_ret_to_rcl_ret>
 801a3fe:	e7ac      	b.n	801a35a <rcl_get_discovery_static_peers+0x22>
 801a400:	0801e27c 	.word	0x0801e27c

0801a404 <rcl_get_default_domain_id>:
 801a404:	b530      	push	{r4, r5, lr}
 801a406:	2300      	movs	r3, #0
 801a408:	b083      	sub	sp, #12
 801a40a:	9300      	str	r3, [sp, #0]
 801a40c:	b1d0      	cbz	r0, 801a444 <rcl_get_default_domain_id+0x40>
 801a40e:	4604      	mov	r4, r0
 801a410:	4669      	mov	r1, sp
 801a412:	4815      	ldr	r0, [pc, #84]	; (801a468 <rcl_get_default_domain_id+0x64>)
 801a414:	f7fc fc70 	bl	8016cf8 <rcutils_get_env>
 801a418:	4602      	mov	r2, r0
 801a41a:	b110      	cbz	r0, 801a422 <rcl_get_default_domain_id+0x1e>
 801a41c:	2001      	movs	r0, #1
 801a41e:	b003      	add	sp, #12
 801a420:	bd30      	pop	{r4, r5, pc}
 801a422:	9b00      	ldr	r3, [sp, #0]
 801a424:	b18b      	cbz	r3, 801a44a <rcl_get_default_domain_id+0x46>
 801a426:	7818      	ldrb	r0, [r3, #0]
 801a428:	2800      	cmp	r0, #0
 801a42a:	d0f8      	beq.n	801a41e <rcl_get_default_domain_id+0x1a>
 801a42c:	a901      	add	r1, sp, #4
 801a42e:	4618      	mov	r0, r3
 801a430:	9201      	str	r2, [sp, #4]
 801a432:	f001 f881 	bl	801b538 <strtoul>
 801a436:	4605      	mov	r5, r0
 801a438:	b150      	cbz	r0, 801a450 <rcl_get_default_domain_id+0x4c>
 801a43a:	1c43      	adds	r3, r0, #1
 801a43c:	d00d      	beq.n	801a45a <rcl_get_default_domain_id+0x56>
 801a43e:	2000      	movs	r0, #0
 801a440:	6025      	str	r5, [r4, #0]
 801a442:	e7ec      	b.n	801a41e <rcl_get_default_domain_id+0x1a>
 801a444:	200b      	movs	r0, #11
 801a446:	b003      	add	sp, #12
 801a448:	bd30      	pop	{r4, r5, pc}
 801a44a:	4618      	mov	r0, r3
 801a44c:	b003      	add	sp, #12
 801a44e:	bd30      	pop	{r4, r5, pc}
 801a450:	9b01      	ldr	r3, [sp, #4]
 801a452:	781b      	ldrb	r3, [r3, #0]
 801a454:	2b00      	cmp	r3, #0
 801a456:	d0f2      	beq.n	801a43e <rcl_get_default_domain_id+0x3a>
 801a458:	e7e0      	b.n	801a41c <rcl_get_default_domain_id+0x18>
 801a45a:	f001 fb0f 	bl	801ba7c <__errno>
 801a45e:	6803      	ldr	r3, [r0, #0]
 801a460:	2b22      	cmp	r3, #34	; 0x22
 801a462:	d1ec      	bne.n	801a43e <rcl_get_default_domain_id+0x3a>
 801a464:	e7da      	b.n	801a41c <rcl_get_default_domain_id+0x18>
 801a466:	bf00      	nop
 801a468:	0801e370 	.word	0x0801e370

0801a46c <rcl_expand_topic_name>:
 801a46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a470:	b08d      	sub	sp, #52	; 0x34
 801a472:	4698      	mov	r8, r3
 801a474:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a476:	9207      	str	r2, [sp, #28]
 801a478:	2b00      	cmp	r3, #0
 801a47a:	bf18      	it	ne
 801a47c:	f1b8 0f00 	cmpne.w	r8, #0
 801a480:	bf0c      	ite	eq
 801a482:	2301      	moveq	r3, #1
 801a484:	2300      	movne	r3, #0
 801a486:	2a00      	cmp	r2, #0
 801a488:	bf08      	it	eq
 801a48a:	f043 0301 	orreq.w	r3, r3, #1
 801a48e:	2900      	cmp	r1, #0
 801a490:	bf08      	it	eq
 801a492:	f043 0301 	orreq.w	r3, r3, #1
 801a496:	2b00      	cmp	r3, #0
 801a498:	d13d      	bne.n	801a516 <rcl_expand_topic_name+0xaa>
 801a49a:	fab0 f280 	clz	r2, r0
 801a49e:	4604      	mov	r4, r0
 801a4a0:	0952      	lsrs	r2, r2, #5
 801a4a2:	2800      	cmp	r0, #0
 801a4a4:	d037      	beq.n	801a516 <rcl_expand_topic_name+0xaa>
 801a4a6:	460f      	mov	r7, r1
 801a4a8:	a90b      	add	r1, sp, #44	; 0x2c
 801a4aa:	f000 fa51 	bl	801a950 <rcl_validate_topic_name>
 801a4ae:	4605      	mov	r5, r0
 801a4b0:	bb68      	cbnz	r0, 801a50e <rcl_expand_topic_name+0xa2>
 801a4b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a4b4:	2b00      	cmp	r3, #0
 801a4b6:	d137      	bne.n	801a528 <rcl_expand_topic_name+0xbc>
 801a4b8:	4602      	mov	r2, r0
 801a4ba:	a90b      	add	r1, sp, #44	; 0x2c
 801a4bc:	4638      	mov	r0, r7
 801a4be:	f7fd f875 	bl	80175ac <rmw_validate_node_name>
 801a4c2:	bb68      	cbnz	r0, 801a520 <rcl_expand_topic_name+0xb4>
 801a4c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a4c6:	2b00      	cmp	r3, #0
 801a4c8:	d133      	bne.n	801a532 <rcl_expand_topic_name+0xc6>
 801a4ca:	462a      	mov	r2, r5
 801a4cc:	a90b      	add	r1, sp, #44	; 0x2c
 801a4ce:	9807      	ldr	r0, [sp, #28]
 801a4d0:	f7fd f84e 	bl	8017570 <rmw_validate_namespace>
 801a4d4:	bb20      	cbnz	r0, 801a520 <rcl_expand_topic_name+0xb4>
 801a4d6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801a4d8:	2d00      	cmp	r5, #0
 801a4da:	f040 80a2 	bne.w	801a622 <rcl_expand_topic_name+0x1b6>
 801a4de:	217b      	movs	r1, #123	; 0x7b
 801a4e0:	4620      	mov	r0, r4
 801a4e2:	f001 f9d7 	bl	801b894 <strchr>
 801a4e6:	7823      	ldrb	r3, [r4, #0]
 801a4e8:	4681      	mov	r9, r0
 801a4ea:	bb20      	cbnz	r0, 801a536 <rcl_expand_topic_name+0xca>
 801a4ec:	2b2f      	cmp	r3, #47	; 0x2f
 801a4ee:	d122      	bne.n	801a536 <rcl_expand_topic_name+0xca>
 801a4f0:	ab19      	add	r3, sp, #100	; 0x64
 801a4f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a4f6:	ab16      	add	r3, sp, #88	; 0x58
 801a4f8:	e88d 0003 	stmia.w	sp, {r0, r1}
 801a4fc:	4620      	mov	r0, r4
 801a4fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 801a500:	f7fc fd5c 	bl	8016fbc <rcutils_strdup>
 801a504:	2800      	cmp	r0, #0
 801a506:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a508:	bf08      	it	eq
 801a50a:	250a      	moveq	r5, #10
 801a50c:	6018      	str	r0, [r3, #0]
 801a50e:	4628      	mov	r0, r5
 801a510:	b00d      	add	sp, #52	; 0x34
 801a512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a516:	250b      	movs	r5, #11
 801a518:	4628      	mov	r0, r5
 801a51a:	b00d      	add	sp, #52	; 0x34
 801a51c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a520:	f7f9 facc 	bl	8013abc <rcl_convert_rmw_ret_to_rcl_ret>
 801a524:	4605      	mov	r5, r0
 801a526:	e7f2      	b.n	801a50e <rcl_expand_topic_name+0xa2>
 801a528:	2567      	movs	r5, #103	; 0x67
 801a52a:	4628      	mov	r0, r5
 801a52c:	b00d      	add	sp, #52	; 0x34
 801a52e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a532:	25c9      	movs	r5, #201	; 0xc9
 801a534:	e7eb      	b.n	801a50e <rcl_expand_topic_name+0xa2>
 801a536:	2b7e      	cmp	r3, #126	; 0x7e
 801a538:	d075      	beq.n	801a626 <rcl_expand_topic_name+0x1ba>
 801a53a:	f1b9 0f00 	cmp.w	r9, #0
 801a53e:	f000 80c2 	beq.w	801a6c6 <rcl_expand_topic_name+0x25a>
 801a542:	2300      	movs	r3, #0
 801a544:	46a2      	mov	sl, r4
 801a546:	461e      	mov	r6, r3
 801a548:	9508      	str	r5, [sp, #32]
 801a54a:	4655      	mov	r5, sl
 801a54c:	9409      	str	r4, [sp, #36]	; 0x24
 801a54e:	46b2      	mov	sl, r6
 801a550:	464c      	mov	r4, r9
 801a552:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801a556:	2c00      	cmp	r4, #0
 801a558:	f000 80ae 	beq.w	801a6b8 <rcl_expand_topic_name+0x24c>
 801a55c:	217d      	movs	r1, #125	; 0x7d
 801a55e:	4628      	mov	r0, r5
 801a560:	f001 f998 	bl	801b894 <strchr>
 801a564:	eba0 0904 	sub.w	r9, r0, r4
 801a568:	4621      	mov	r1, r4
 801a56a:	4869      	ldr	r0, [pc, #420]	; (801a710 <rcl_expand_topic_name+0x2a4>)
 801a56c:	f109 0601 	add.w	r6, r9, #1
 801a570:	4632      	mov	r2, r6
 801a572:	f001 f99c 	bl	801b8ae <strncmp>
 801a576:	2800      	cmp	r0, #0
 801a578:	d051      	beq.n	801a61e <rcl_expand_topic_name+0x1b2>
 801a57a:	4632      	mov	r2, r6
 801a57c:	4621      	mov	r1, r4
 801a57e:	4865      	ldr	r0, [pc, #404]	; (801a714 <rcl_expand_topic_name+0x2a8>)
 801a580:	f001 f995 	bl	801b8ae <strncmp>
 801a584:	b128      	cbz	r0, 801a592 <rcl_expand_topic_name+0x126>
 801a586:	4632      	mov	r2, r6
 801a588:	4621      	mov	r1, r4
 801a58a:	4863      	ldr	r0, [pc, #396]	; (801a718 <rcl_expand_topic_name+0x2ac>)
 801a58c:	f001 f98f 	bl	801b8ae <strncmp>
 801a590:	bb38      	cbnz	r0, 801a5e2 <rcl_expand_topic_name+0x176>
 801a592:	46d9      	mov	r9, fp
 801a594:	ab18      	add	r3, sp, #96	; 0x60
 801a596:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801a59a:	ab16      	add	r3, sp, #88	; 0x58
 801a59c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801a5a0:	4620      	mov	r0, r4
 801a5a2:	4631      	mov	r1, r6
 801a5a4:	cb0c      	ldmia	r3, {r2, r3}
 801a5a6:	f7fc fd2f 	bl	8017008 <rcutils_strndup>
 801a5aa:	4604      	mov	r4, r0
 801a5ac:	2800      	cmp	r0, #0
 801a5ae:	f000 80a3 	beq.w	801a6f8 <rcl_expand_topic_name+0x28c>
 801a5b2:	464a      	mov	r2, r9
 801a5b4:	4628      	mov	r0, r5
 801a5b6:	ab16      	add	r3, sp, #88	; 0x58
 801a5b8:	4621      	mov	r1, r4
 801a5ba:	f7fc fbff 	bl	8016dbc <rcutils_repl_str>
 801a5be:	991a      	ldr	r1, [sp, #104]	; 0x68
 801a5c0:	4605      	mov	r5, r0
 801a5c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a5c4:	4620      	mov	r0, r4
 801a5c6:	4798      	blx	r3
 801a5c8:	4650      	mov	r0, sl
 801a5ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a5cc:	991a      	ldr	r1, [sp, #104]	; 0x68
 801a5ce:	4798      	blx	r3
 801a5d0:	2d00      	cmp	r5, #0
 801a5d2:	d06c      	beq.n	801a6ae <rcl_expand_topic_name+0x242>
 801a5d4:	217b      	movs	r1, #123	; 0x7b
 801a5d6:	4628      	mov	r0, r5
 801a5d8:	f001 f95c 	bl	801b894 <strchr>
 801a5dc:	46aa      	mov	sl, r5
 801a5de:	4604      	mov	r4, r0
 801a5e0:	e7b9      	b.n	801a556 <rcl_expand_topic_name+0xea>
 801a5e2:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 801a5e6:	1c61      	adds	r1, r4, #1
 801a5e8:	4640      	mov	r0, r8
 801a5ea:	f7fc fe09 	bl	8017200 <rcutils_string_map_getn>
 801a5ee:	4681      	mov	r9, r0
 801a5f0:	2800      	cmp	r0, #0
 801a5f2:	d1cf      	bne.n	801a594 <rcl_expand_topic_name+0x128>
 801a5f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a5f6:	aa18      	add	r2, sp, #96	; 0x60
 801a5f8:	2569      	movs	r5, #105	; 0x69
 801a5fa:	6018      	str	r0, [r3, #0]
 801a5fc:	ab16      	add	r3, sp, #88	; 0x58
 801a5fe:	ca07      	ldmia	r2, {r0, r1, r2}
 801a600:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801a604:	4631      	mov	r1, r6
 801a606:	4620      	mov	r0, r4
 801a608:	cb0c      	ldmia	r3, {r2, r3}
 801a60a:	f7fc fcfd 	bl	8017008 <rcutils_strndup>
 801a60e:	991a      	ldr	r1, [sp, #104]	; 0x68
 801a610:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a612:	4798      	blx	r3
 801a614:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a616:	991a      	ldr	r1, [sp, #104]	; 0x68
 801a618:	4650      	mov	r0, sl
 801a61a:	4798      	blx	r3
 801a61c:	e777      	b.n	801a50e <rcl_expand_topic_name+0xa2>
 801a61e:	46b9      	mov	r9, r7
 801a620:	e7b8      	b.n	801a594 <rcl_expand_topic_name+0x128>
 801a622:	25ca      	movs	r5, #202	; 0xca
 801a624:	e773      	b.n	801a50e <rcl_expand_topic_name+0xa2>
 801a626:	9e07      	ldr	r6, [sp, #28]
 801a628:	4630      	mov	r0, r6
 801a62a:	f7e5 fe69 	bl	8000300 <strlen>
 801a62e:	4a3b      	ldr	r2, [pc, #236]	; (801a71c <rcl_expand_topic_name+0x2b0>)
 801a630:	4b3b      	ldr	r3, [pc, #236]	; (801a720 <rcl_expand_topic_name+0x2b4>)
 801a632:	9603      	str	r6, [sp, #12]
 801a634:	2801      	cmp	r0, #1
 801a636:	bf18      	it	ne
 801a638:	4613      	movne	r3, r2
 801a63a:	9704      	str	r7, [sp, #16]
 801a63c:	9302      	str	r3, [sp, #8]
 801a63e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801a640:	9300      	str	r3, [sp, #0]
 801a642:	1c63      	adds	r3, r4, #1
 801a644:	9305      	str	r3, [sp, #20]
 801a646:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a64a:	9301      	str	r3, [sp, #4]
 801a64c:	ab16      	add	r3, sp, #88	; 0x58
 801a64e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a650:	f7fc fb7a 	bl	8016d48 <rcutils_format_string_limit>
 801a654:	4606      	mov	r6, r0
 801a656:	b350      	cbz	r0, 801a6ae <rcl_expand_topic_name+0x242>
 801a658:	f1b9 0f00 	cmp.w	r9, #0
 801a65c:	d005      	beq.n	801a66a <rcl_expand_topic_name+0x1fe>
 801a65e:	217b      	movs	r1, #123	; 0x7b
 801a660:	46b2      	mov	sl, r6
 801a662:	f001 f917 	bl	801b894 <strchr>
 801a666:	4681      	mov	r9, r0
 801a668:	e76e      	b.n	801a548 <rcl_expand_topic_name+0xdc>
 801a66a:	7833      	ldrb	r3, [r6, #0]
 801a66c:	2b2f      	cmp	r3, #47	; 0x2f
 801a66e:	d01b      	beq.n	801a6a8 <rcl_expand_topic_name+0x23c>
 801a670:	9c07      	ldr	r4, [sp, #28]
 801a672:	4620      	mov	r0, r4
 801a674:	f7e5 fe44 	bl	8000300 <strlen>
 801a678:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a67c:	4a29      	ldr	r2, [pc, #164]	; (801a724 <rcl_expand_topic_name+0x2b8>)
 801a67e:	9301      	str	r3, [sp, #4]
 801a680:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801a682:	9604      	str	r6, [sp, #16]
 801a684:	9300      	str	r3, [sp, #0]
 801a686:	4b28      	ldr	r3, [pc, #160]	; (801a728 <rcl_expand_topic_name+0x2bc>)
 801a688:	9403      	str	r4, [sp, #12]
 801a68a:	2801      	cmp	r0, #1
 801a68c:	bf18      	it	ne
 801a68e:	4613      	movne	r3, r2
 801a690:	9302      	str	r3, [sp, #8]
 801a692:	ab16      	add	r3, sp, #88	; 0x58
 801a694:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a696:	f7fc fb57 	bl	8016d48 <rcutils_format_string_limit>
 801a69a:	4603      	mov	r3, r0
 801a69c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a69e:	4630      	mov	r0, r6
 801a6a0:	991a      	ldr	r1, [sp, #104]	; 0x68
 801a6a2:	461e      	mov	r6, r3
 801a6a4:	4790      	blx	r2
 801a6a6:	b116      	cbz	r6, 801a6ae <rcl_expand_topic_name+0x242>
 801a6a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a6aa:	601e      	str	r6, [r3, #0]
 801a6ac:	e72f      	b.n	801a50e <rcl_expand_topic_name+0xa2>
 801a6ae:	2300      	movs	r3, #0
 801a6b0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801a6b2:	250a      	movs	r5, #10
 801a6b4:	6013      	str	r3, [r2, #0]
 801a6b6:	e72a      	b.n	801a50e <rcl_expand_topic_name+0xa2>
 801a6b8:	4653      	mov	r3, sl
 801a6ba:	4656      	mov	r6, sl
 801a6bc:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 801a6c0:	2b00      	cmp	r3, #0
 801a6c2:	d1d2      	bne.n	801a66a <rcl_expand_topic_name+0x1fe>
 801a6c4:	7823      	ldrb	r3, [r4, #0]
 801a6c6:	2b2f      	cmp	r3, #47	; 0x2f
 801a6c8:	d01e      	beq.n	801a708 <rcl_expand_topic_name+0x29c>
 801a6ca:	9e07      	ldr	r6, [sp, #28]
 801a6cc:	4630      	mov	r0, r6
 801a6ce:	f7e5 fe17 	bl	8000300 <strlen>
 801a6d2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801a6d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a6d8:	9603      	str	r6, [sp, #12]
 801a6da:	9404      	str	r4, [sp, #16]
 801a6dc:	e9cd 2300 	strd	r2, r3, [sp]
 801a6e0:	4a10      	ldr	r2, [pc, #64]	; (801a724 <rcl_expand_topic_name+0x2b8>)
 801a6e2:	4b11      	ldr	r3, [pc, #68]	; (801a728 <rcl_expand_topic_name+0x2bc>)
 801a6e4:	2801      	cmp	r0, #1
 801a6e6:	bf18      	it	ne
 801a6e8:	4613      	movne	r3, r2
 801a6ea:	9302      	str	r3, [sp, #8]
 801a6ec:	ab16      	add	r3, sp, #88	; 0x58
 801a6ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a6f0:	f7fc fb2a 	bl	8016d48 <rcutils_format_string_limit>
 801a6f4:	4606      	mov	r6, r0
 801a6f6:	e7d6      	b.n	801a6a6 <rcl_expand_topic_name+0x23a>
 801a6f8:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
 801a6fc:	4650      	mov	r0, sl
 801a6fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a700:	6014      	str	r4, [r2, #0]
 801a702:	250a      	movs	r5, #10
 801a704:	4798      	blx	r3
 801a706:	e702      	b.n	801a50e <rcl_expand_topic_name+0xa2>
 801a708:	2300      	movs	r3, #0
 801a70a:	461e      	mov	r6, r3
 801a70c:	e7cc      	b.n	801a6a8 <rcl_expand_topic_name+0x23c>
 801a70e:	bf00      	nop
 801a710:	0801e388 	.word	0x0801e388
 801a714:	0801e390 	.word	0x0801e390
 801a718:	0801e398 	.word	0x0801e398
 801a71c:	0801e380 	.word	0x0801e380
 801a720:	0801d588 	.word	0x0801d588
 801a724:	0801d9d4 	.word	0x0801d9d4
 801a728:	0801d598 	.word	0x0801d598

0801a72c <rcl_get_default_topic_name_substitutions>:
 801a72c:	2800      	cmp	r0, #0
 801a72e:	bf0c      	ite	eq
 801a730:	200b      	moveq	r0, #11
 801a732:	2000      	movne	r0, #0
 801a734:	4770      	bx	lr
 801a736:	bf00      	nop

0801a738 <rcl_get_zero_initialized_guard_condition>:
 801a738:	4a03      	ldr	r2, [pc, #12]	; (801a748 <rcl_get_zero_initialized_guard_condition+0x10>)
 801a73a:	4603      	mov	r3, r0
 801a73c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a740:	e883 0003 	stmia.w	r3, {r0, r1}
 801a744:	4618      	mov	r0, r3
 801a746:	4770      	bx	lr
 801a748:	0801e3a4 	.word	0x0801e3a4

0801a74c <rcl_guard_condition_init>:
 801a74c:	b082      	sub	sp, #8
 801a74e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a750:	b087      	sub	sp, #28
 801a752:	4604      	mov	r4, r0
 801a754:	460d      	mov	r5, r1
 801a756:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 801a75a:	f10d 0c04 	add.w	ip, sp, #4
 801a75e:	e9ce 2300 	strd	r2, r3, [lr]
 801a762:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a766:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a76a:	f8de 3000 	ldr.w	r3, [lr]
 801a76e:	a801      	add	r0, sp, #4
 801a770:	f8cc 3000 	str.w	r3, [ip]
 801a774:	f7f2 fee6 	bl	800d544 <rcutils_allocator_is_valid>
 801a778:	b354      	cbz	r4, 801a7d0 <rcl_guard_condition_init+0x84>
 801a77a:	f080 0301 	eor.w	r3, r0, #1
 801a77e:	b2db      	uxtb	r3, r3
 801a780:	bb33      	cbnz	r3, 801a7d0 <rcl_guard_condition_init+0x84>
 801a782:	6866      	ldr	r6, [r4, #4]
 801a784:	b9ee      	cbnz	r6, 801a7c2 <rcl_guard_condition_init+0x76>
 801a786:	b31d      	cbz	r5, 801a7d0 <rcl_guard_condition_init+0x84>
 801a788:	4628      	mov	r0, r5
 801a78a:	f7f9 f9b5 	bl	8013af8 <rcl_context_is_valid>
 801a78e:	b308      	cbz	r0, 801a7d4 <rcl_guard_condition_init+0x88>
 801a790:	9b01      	ldr	r3, [sp, #4]
 801a792:	201c      	movs	r0, #28
 801a794:	9905      	ldr	r1, [sp, #20]
 801a796:	4798      	blx	r3
 801a798:	4607      	mov	r7, r0
 801a79a:	6060      	str	r0, [r4, #4]
 801a79c:	b310      	cbz	r0, 801a7e4 <rcl_guard_condition_init+0x98>
 801a79e:	6828      	ldr	r0, [r5, #0]
 801a7a0:	3028      	adds	r0, #40	; 0x28
 801a7a2:	f000 fbbb 	bl	801af1c <rmw_create_guard_condition>
 801a7a6:	6038      	str	r0, [r7, #0]
 801a7a8:	6860      	ldr	r0, [r4, #4]
 801a7aa:	6807      	ldr	r7, [r0, #0]
 801a7ac:	b1a7      	cbz	r7, 801a7d8 <rcl_guard_condition_init+0x8c>
 801a7ae:	2301      	movs	r3, #1
 801a7b0:	ac01      	add	r4, sp, #4
 801a7b2:	f100 0708 	add.w	r7, r0, #8
 801a7b6:	7103      	strb	r3, [r0, #4]
 801a7b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a7ba:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801a7bc:	6823      	ldr	r3, [r4, #0]
 801a7be:	603b      	str	r3, [r7, #0]
 801a7c0:	e000      	b.n	801a7c4 <rcl_guard_condition_init+0x78>
 801a7c2:	2664      	movs	r6, #100	; 0x64
 801a7c4:	4630      	mov	r0, r6
 801a7c6:	b007      	add	sp, #28
 801a7c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a7cc:	b002      	add	sp, #8
 801a7ce:	4770      	bx	lr
 801a7d0:	260b      	movs	r6, #11
 801a7d2:	e7f7      	b.n	801a7c4 <rcl_guard_condition_init+0x78>
 801a7d4:	2665      	movs	r6, #101	; 0x65
 801a7d6:	e7f5      	b.n	801a7c4 <rcl_guard_condition_init+0x78>
 801a7d8:	9b02      	ldr	r3, [sp, #8]
 801a7da:	2601      	movs	r6, #1
 801a7dc:	9905      	ldr	r1, [sp, #20]
 801a7de:	4798      	blx	r3
 801a7e0:	6067      	str	r7, [r4, #4]
 801a7e2:	e7ef      	b.n	801a7c4 <rcl_guard_condition_init+0x78>
 801a7e4:	260a      	movs	r6, #10
 801a7e6:	e7ed      	b.n	801a7c4 <rcl_guard_condition_init+0x78>

0801a7e8 <rcl_guard_condition_init_from_rmw>:
 801a7e8:	b082      	sub	sp, #8
 801a7ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a7ee:	b086      	sub	sp, #24
 801a7f0:	4604      	mov	r4, r0
 801a7f2:	460e      	mov	r6, r1
 801a7f4:	4615      	mov	r5, r2
 801a7f6:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801a7fa:	f10d 0e04 	add.w	lr, sp, #4
 801a7fe:	f84c 3f04 	str.w	r3, [ip, #4]!
 801a802:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801a806:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801a80a:	f8dc 3000 	ldr.w	r3, [ip]
 801a80e:	a801      	add	r0, sp, #4
 801a810:	f8ce 3000 	str.w	r3, [lr]
 801a814:	f7f2 fe96 	bl	800d544 <rcutils_allocator_is_valid>
 801a818:	f080 0301 	eor.w	r3, r0, #1
 801a81c:	b2db      	uxtb	r3, r3
 801a81e:	bb3b      	cbnz	r3, 801a870 <rcl_guard_condition_init_from_rmw+0x88>
 801a820:	b334      	cbz	r4, 801a870 <rcl_guard_condition_init_from_rmw+0x88>
 801a822:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801a826:	f1b8 0f00 	cmp.w	r8, #0
 801a82a:	d11a      	bne.n	801a862 <rcl_guard_condition_init_from_rmw+0x7a>
 801a82c:	b305      	cbz	r5, 801a870 <rcl_guard_condition_init_from_rmw+0x88>
 801a82e:	4628      	mov	r0, r5
 801a830:	f7f9 f962 	bl	8013af8 <rcl_context_is_valid>
 801a834:	b1f0      	cbz	r0, 801a874 <rcl_guard_condition_init_from_rmw+0x8c>
 801a836:	9b01      	ldr	r3, [sp, #4]
 801a838:	201c      	movs	r0, #28
 801a83a:	9905      	ldr	r1, [sp, #20]
 801a83c:	4798      	blx	r3
 801a83e:	4607      	mov	r7, r0
 801a840:	6060      	str	r0, [r4, #4]
 801a842:	b320      	cbz	r0, 801a88e <rcl_guard_condition_init_from_rmw+0xa6>
 801a844:	b1c6      	cbz	r6, 801a878 <rcl_guard_condition_init_from_rmw+0x90>
 801a846:	6006      	str	r6, [r0, #0]
 801a848:	f880 8004 	strb.w	r8, [r0, #4]
 801a84c:	ac01      	add	r4, sp, #4
 801a84e:	f107 0c08 	add.w	ip, r7, #8
 801a852:	2500      	movs	r5, #0
 801a854:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a856:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a85a:	6823      	ldr	r3, [r4, #0]
 801a85c:	f8cc 3000 	str.w	r3, [ip]
 801a860:	e000      	b.n	801a864 <rcl_guard_condition_init_from_rmw+0x7c>
 801a862:	2564      	movs	r5, #100	; 0x64
 801a864:	4628      	mov	r0, r5
 801a866:	b006      	add	sp, #24
 801a868:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a86c:	b002      	add	sp, #8
 801a86e:	4770      	bx	lr
 801a870:	250b      	movs	r5, #11
 801a872:	e7f7      	b.n	801a864 <rcl_guard_condition_init_from_rmw+0x7c>
 801a874:	2565      	movs	r5, #101	; 0x65
 801a876:	e7f5      	b.n	801a864 <rcl_guard_condition_init_from_rmw+0x7c>
 801a878:	6828      	ldr	r0, [r5, #0]
 801a87a:	3028      	adds	r0, #40	; 0x28
 801a87c:	f000 fb4e 	bl	801af1c <rmw_create_guard_condition>
 801a880:	6038      	str	r0, [r7, #0]
 801a882:	6867      	ldr	r7, [r4, #4]
 801a884:	683e      	ldr	r6, [r7, #0]
 801a886:	b126      	cbz	r6, 801a892 <rcl_guard_condition_init_from_rmw+0xaa>
 801a888:	2301      	movs	r3, #1
 801a88a:	713b      	strb	r3, [r7, #4]
 801a88c:	e7de      	b.n	801a84c <rcl_guard_condition_init_from_rmw+0x64>
 801a88e:	250a      	movs	r5, #10
 801a890:	e7e8      	b.n	801a864 <rcl_guard_condition_init_from_rmw+0x7c>
 801a892:	9b02      	ldr	r3, [sp, #8]
 801a894:	4638      	mov	r0, r7
 801a896:	9905      	ldr	r1, [sp, #20]
 801a898:	2501      	movs	r5, #1
 801a89a:	4798      	blx	r3
 801a89c:	6066      	str	r6, [r4, #4]
 801a89e:	e7e1      	b.n	801a864 <rcl_guard_condition_init_from_rmw+0x7c>

0801a8a0 <rcl_guard_condition_fini>:
 801a8a0:	b570      	push	{r4, r5, r6, lr}
 801a8a2:	b082      	sub	sp, #8
 801a8a4:	b1f0      	cbz	r0, 801a8e4 <rcl_guard_condition_fini+0x44>
 801a8a6:	6843      	ldr	r3, [r0, #4]
 801a8a8:	4604      	mov	r4, r0
 801a8aa:	b163      	cbz	r3, 801a8c6 <rcl_guard_condition_fini+0x26>
 801a8ac:	6818      	ldr	r0, [r3, #0]
 801a8ae:	68de      	ldr	r6, [r3, #12]
 801a8b0:	6999      	ldr	r1, [r3, #24]
 801a8b2:	b160      	cbz	r0, 801a8ce <rcl_guard_condition_fini+0x2e>
 801a8b4:	791d      	ldrb	r5, [r3, #4]
 801a8b6:	b965      	cbnz	r5, 801a8d2 <rcl_guard_condition_fini+0x32>
 801a8b8:	4618      	mov	r0, r3
 801a8ba:	47b0      	blx	r6
 801a8bc:	2300      	movs	r3, #0
 801a8be:	4628      	mov	r0, r5
 801a8c0:	6063      	str	r3, [r4, #4]
 801a8c2:	b002      	add	sp, #8
 801a8c4:	bd70      	pop	{r4, r5, r6, pc}
 801a8c6:	461d      	mov	r5, r3
 801a8c8:	4628      	mov	r0, r5
 801a8ca:	b002      	add	sp, #8
 801a8cc:	bd70      	pop	{r4, r5, r6, pc}
 801a8ce:	4605      	mov	r5, r0
 801a8d0:	e7f2      	b.n	801a8b8 <rcl_guard_condition_fini+0x18>
 801a8d2:	9101      	str	r1, [sp, #4]
 801a8d4:	f000 fb38 	bl	801af48 <rmw_destroy_guard_condition>
 801a8d8:	1e05      	subs	r5, r0, #0
 801a8da:	6863      	ldr	r3, [r4, #4]
 801a8dc:	9901      	ldr	r1, [sp, #4]
 801a8de:	bf18      	it	ne
 801a8e0:	2501      	movne	r5, #1
 801a8e2:	e7e9      	b.n	801a8b8 <rcl_guard_condition_fini+0x18>
 801a8e4:	250b      	movs	r5, #11
 801a8e6:	4628      	mov	r0, r5
 801a8e8:	b002      	add	sp, #8
 801a8ea:	bd70      	pop	{r4, r5, r6, pc}

0801a8ec <rcl_guard_condition_get_default_options>:
 801a8ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a8ee:	b087      	sub	sp, #28
 801a8f0:	4606      	mov	r6, r0
 801a8f2:	4c0b      	ldr	r4, [pc, #44]	; (801a920 <rcl_guard_condition_get_default_options+0x34>)
 801a8f4:	4668      	mov	r0, sp
 801a8f6:	f7f2 fe17 	bl	800d528 <rcutils_get_default_allocator>
 801a8fa:	46ee      	mov	lr, sp
 801a8fc:	46a4      	mov	ip, r4
 801a8fe:	4625      	mov	r5, r4
 801a900:	4634      	mov	r4, r6
 801a902:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a906:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a90a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a90c:	f8de 7000 	ldr.w	r7, [lr]
 801a910:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a912:	4630      	mov	r0, r6
 801a914:	f8cc 7000 	str.w	r7, [ip]
 801a918:	6027      	str	r7, [r4, #0]
 801a91a:	b007      	add	sp, #28
 801a91c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a91e:	bf00      	nop
 801a920:	200108c8 	.word	0x200108c8

0801a924 <rcl_trigger_guard_condition>:
 801a924:	b148      	cbz	r0, 801a93a <rcl_trigger_guard_condition+0x16>
 801a926:	b508      	push	{r3, lr}
 801a928:	6843      	ldr	r3, [r0, #4]
 801a92a:	b143      	cbz	r3, 801a93e <rcl_trigger_guard_condition+0x1a>
 801a92c:	6818      	ldr	r0, [r3, #0]
 801a92e:	f000 fb1f 	bl	801af70 <rmw_trigger_guard_condition>
 801a932:	3800      	subs	r0, #0
 801a934:	bf18      	it	ne
 801a936:	2001      	movne	r0, #1
 801a938:	bd08      	pop	{r3, pc}
 801a93a:	200b      	movs	r0, #11
 801a93c:	4770      	bx	lr
 801a93e:	200b      	movs	r0, #11
 801a940:	bd08      	pop	{r3, pc}
 801a942:	bf00      	nop

0801a944 <rcl_guard_condition_get_rmw_handle>:
 801a944:	b110      	cbz	r0, 801a94c <rcl_guard_condition_get_rmw_handle+0x8>
 801a946:	6840      	ldr	r0, [r0, #4]
 801a948:	b100      	cbz	r0, 801a94c <rcl_guard_condition_get_rmw_handle+0x8>
 801a94a:	6800      	ldr	r0, [r0, #0]
 801a94c:	4770      	bx	lr
 801a94e:	bf00      	nop

0801a950 <rcl_validate_topic_name>:
 801a950:	2800      	cmp	r0, #0
 801a952:	f000 8089 	beq.w	801aa68 <rcl_validate_topic_name+0x118>
 801a956:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a95a:	460e      	mov	r6, r1
 801a95c:	2900      	cmp	r1, #0
 801a95e:	f000 8085 	beq.w	801aa6c <rcl_validate_topic_name+0x11c>
 801a962:	4604      	mov	r4, r0
 801a964:	4617      	mov	r7, r2
 801a966:	f7e5 fccb 	bl	8000300 <strlen>
 801a96a:	b1b0      	cbz	r0, 801a99a <rcl_validate_topic_name+0x4a>
 801a96c:	f894 e000 	ldrb.w	lr, [r4]
 801a970:	f8df c160 	ldr.w	ip, [pc, #352]	; 801aad4 <rcl_validate_topic_name+0x184>
 801a974:	f81c 300e 	ldrb.w	r3, [ip, lr]
 801a978:	f013 0304 	ands.w	r3, r3, #4
 801a97c:	d139      	bne.n	801a9f2 <rcl_validate_topic_name+0xa2>
 801a97e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 801a982:	f814 2008 	ldrb.w	r2, [r4, r8]
 801a986:	2a2f      	cmp	r2, #47	; 0x2f
 801a988:	d10f      	bne.n	801a9aa <rcl_validate_topic_name+0x5a>
 801a98a:	2202      	movs	r2, #2
 801a98c:	6032      	str	r2, [r6, #0]
 801a98e:	b3a7      	cbz	r7, 801a9fa <rcl_validate_topic_name+0xaa>
 801a990:	4618      	mov	r0, r3
 801a992:	f8c7 8000 	str.w	r8, [r7]
 801a996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a99a:	2301      	movs	r3, #1
 801a99c:	6033      	str	r3, [r6, #0]
 801a99e:	b367      	cbz	r7, 801a9fa <rcl_validate_topic_name+0xaa>
 801a9a0:	2300      	movs	r3, #0
 801a9a2:	4618      	mov	r0, r3
 801a9a4:	603b      	str	r3, [r7, #0]
 801a9a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a9aa:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 801a9ae:	461d      	mov	r5, r3
 801a9b0:	4619      	mov	r1, r3
 801a9b2:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801a9b6:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 801a9ba:	f1b9 0f09 	cmp.w	r9, #9
 801a9be:	d91f      	bls.n	801aa00 <rcl_validate_topic_name+0xb0>
 801a9c0:	f022 0920 	bic.w	r9, r2, #32
 801a9c4:	f1a9 0941 	sub.w	r9, r9, #65	; 0x41
 801a9c8:	f1b9 0f19 	cmp.w	r9, #25
 801a9cc:	d918      	bls.n	801aa00 <rcl_validate_topic_name+0xb0>
 801a9ce:	2a5f      	cmp	r2, #95	; 0x5f
 801a9d0:	d024      	beq.n	801aa1c <rcl_validate_topic_name+0xcc>
 801a9d2:	2a2f      	cmp	r2, #47	; 0x2f
 801a9d4:	d058      	beq.n	801aa88 <rcl_validate_topic_name+0x138>
 801a9d6:	2a7e      	cmp	r2, #126	; 0x7e
 801a9d8:	d04a      	beq.n	801aa70 <rcl_validate_topic_name+0x120>
 801a9da:	2a7b      	cmp	r2, #123	; 0x7b
 801a9dc:	d05b      	beq.n	801aa96 <rcl_validate_topic_name+0x146>
 801a9de:	2a7d      	cmp	r2, #125	; 0x7d
 801a9e0:	d169      	bne.n	801aab6 <rcl_validate_topic_name+0x166>
 801a9e2:	2d00      	cmp	r5, #0
 801a9e4:	d15c      	bne.n	801aaa0 <rcl_validate_topic_name+0x150>
 801a9e6:	2305      	movs	r3, #5
 801a9e8:	6033      	str	r3, [r6, #0]
 801a9ea:	b137      	cbz	r7, 801a9fa <rcl_validate_topic_name+0xaa>
 801a9ec:	2000      	movs	r0, #0
 801a9ee:	6039      	str	r1, [r7, #0]
 801a9f0:	e7d9      	b.n	801a9a6 <rcl_validate_topic_name+0x56>
 801a9f2:	2304      	movs	r3, #4
 801a9f4:	6033      	str	r3, [r6, #0]
 801a9f6:	2f00      	cmp	r7, #0
 801a9f8:	d1d2      	bne.n	801a9a0 <rcl_validate_topic_name+0x50>
 801a9fa:	2000      	movs	r0, #0
 801a9fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aa00:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801aa04:	0752      	lsls	r2, r2, #29
 801aa06:	d509      	bpl.n	801aa1c <rcl_validate_topic_name+0xcc>
 801aa08:	2900      	cmp	r1, #0
 801aa0a:	bf0c      	ite	eq
 801aa0c:	2200      	moveq	r2, #0
 801aa0e:	f005 0201 	andne.w	r2, r5, #1
 801aa12:	b11a      	cbz	r2, 801aa1c <rcl_validate_topic_name+0xcc>
 801aa14:	1e4d      	subs	r5, r1, #1
 801aa16:	429d      	cmp	r5, r3
 801aa18:	d031      	beq.n	801aa7e <rcl_validate_topic_name+0x12e>
 801aa1a:	4615      	mov	r5, r2
 801aa1c:	3101      	adds	r1, #1
 801aa1e:	4288      	cmp	r0, r1
 801aa20:	d1c7      	bne.n	801a9b2 <rcl_validate_topic_name+0x62>
 801aa22:	2d00      	cmp	r5, #0
 801aa24:	d142      	bne.n	801aaac <rcl_validate_topic_name+0x15c>
 801aa26:	4628      	mov	r0, r5
 801aa28:	2301      	movs	r3, #1
 801aa2a:	e00c      	b.n	801aa46 <rcl_validate_topic_name+0xf6>
 801aa2c:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 801aa30:	d101      	bne.n	801aa36 <rcl_validate_topic_name+0xe6>
 801aa32:	2801      	cmp	r0, #1
 801aa34:	d047      	beq.n	801aac6 <rcl_validate_topic_name+0x176>
 801aa36:	1c5a      	adds	r2, r3, #1
 801aa38:	428b      	cmp	r3, r1
 801aa3a:	f100 0001 	add.w	r0, r0, #1
 801aa3e:	f104 0401 	add.w	r4, r4, #1
 801aa42:	4613      	mov	r3, r2
 801aa44:	d22e      	bcs.n	801aaa4 <rcl_validate_topic_name+0x154>
 801aa46:	4580      	cmp	r8, r0
 801aa48:	d0f5      	beq.n	801aa36 <rcl_validate_topic_name+0xe6>
 801aa4a:	7822      	ldrb	r2, [r4, #0]
 801aa4c:	2a2f      	cmp	r2, #47	; 0x2f
 801aa4e:	d1ed      	bne.n	801aa2c <rcl_validate_topic_name+0xdc>
 801aa50:	7862      	ldrb	r2, [r4, #1]
 801aa52:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801aa56:	0752      	lsls	r2, r2, #29
 801aa58:	d5ed      	bpl.n	801aa36 <rcl_validate_topic_name+0xe6>
 801aa5a:	2204      	movs	r2, #4
 801aa5c:	6032      	str	r2, [r6, #0]
 801aa5e:	2f00      	cmp	r7, #0
 801aa60:	d0cb      	beq.n	801a9fa <rcl_validate_topic_name+0xaa>
 801aa62:	2000      	movs	r0, #0
 801aa64:	603b      	str	r3, [r7, #0]
 801aa66:	e79e      	b.n	801a9a6 <rcl_validate_topic_name+0x56>
 801aa68:	200b      	movs	r0, #11
 801aa6a:	4770      	bx	lr
 801aa6c:	200b      	movs	r0, #11
 801aa6e:	e79a      	b.n	801a9a6 <rcl_validate_topic_name+0x56>
 801aa70:	2900      	cmp	r1, #0
 801aa72:	d0d3      	beq.n	801aa1c <rcl_validate_topic_name+0xcc>
 801aa74:	2306      	movs	r3, #6
 801aa76:	6033      	str	r3, [r6, #0]
 801aa78:	2f00      	cmp	r7, #0
 801aa7a:	d1b7      	bne.n	801a9ec <rcl_validate_topic_name+0x9c>
 801aa7c:	e7bd      	b.n	801a9fa <rcl_validate_topic_name+0xaa>
 801aa7e:	2309      	movs	r3, #9
 801aa80:	6033      	str	r3, [r6, #0]
 801aa82:	2f00      	cmp	r7, #0
 801aa84:	d1b2      	bne.n	801a9ec <rcl_validate_topic_name+0x9c>
 801aa86:	e7b8      	b.n	801a9fa <rcl_validate_topic_name+0xaa>
 801aa88:	2d00      	cmp	r5, #0
 801aa8a:	d0c7      	beq.n	801aa1c <rcl_validate_topic_name+0xcc>
 801aa8c:	2308      	movs	r3, #8
 801aa8e:	6033      	str	r3, [r6, #0]
 801aa90:	2f00      	cmp	r7, #0
 801aa92:	d1ab      	bne.n	801a9ec <rcl_validate_topic_name+0x9c>
 801aa94:	e7b1      	b.n	801a9fa <rcl_validate_topic_name+0xaa>
 801aa96:	2d00      	cmp	r5, #0
 801aa98:	d1f8      	bne.n	801aa8c <rcl_validate_topic_name+0x13c>
 801aa9a:	460b      	mov	r3, r1
 801aa9c:	2501      	movs	r5, #1
 801aa9e:	e7bd      	b.n	801aa1c <rcl_validate_topic_name+0xcc>
 801aaa0:	2500      	movs	r5, #0
 801aaa2:	e7bb      	b.n	801aa1c <rcl_validate_topic_name+0xcc>
 801aaa4:	2300      	movs	r3, #0
 801aaa6:	4618      	mov	r0, r3
 801aaa8:	6033      	str	r3, [r6, #0]
 801aaaa:	e77c      	b.n	801a9a6 <rcl_validate_topic_name+0x56>
 801aaac:	2205      	movs	r2, #5
 801aaae:	6032      	str	r2, [r6, #0]
 801aab0:	2f00      	cmp	r7, #0
 801aab2:	d1d6      	bne.n	801aa62 <rcl_validate_topic_name+0x112>
 801aab4:	e7a1      	b.n	801a9fa <rcl_validate_topic_name+0xaa>
 801aab6:	2d00      	cmp	r5, #0
 801aab8:	bf14      	ite	ne
 801aaba:	2308      	movne	r3, #8
 801aabc:	2303      	moveq	r3, #3
 801aabe:	6033      	str	r3, [r6, #0]
 801aac0:	2f00      	cmp	r7, #0
 801aac2:	d193      	bne.n	801a9ec <rcl_validate_topic_name+0x9c>
 801aac4:	e799      	b.n	801a9fa <rcl_validate_topic_name+0xaa>
 801aac6:	2307      	movs	r3, #7
 801aac8:	6033      	str	r3, [r6, #0]
 801aaca:	2f00      	cmp	r7, #0
 801aacc:	d095      	beq.n	801a9fa <rcl_validate_topic_name+0xaa>
 801aace:	2301      	movs	r3, #1
 801aad0:	e7c7      	b.n	801aa62 <rcl_validate_topic_name+0x112>
 801aad2:	bf00      	nop
 801aad4:	0801e568 	.word	0x0801e568

0801aad8 <rcutils_split>:
 801aad8:	b082      	sub	sp, #8
 801aada:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aade:	b08d      	sub	sp, #52	; 0x34
 801aae0:	ac16      	add	r4, sp, #88	; 0x58
 801aae2:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 801aae4:	e884 000c 	stmia.w	r4, {r2, r3}
 801aae8:	2f00      	cmp	r7, #0
 801aaea:	f000 80a8 	beq.w	801ac3e <rcutils_split+0x166>
 801aaee:	4605      	mov	r5, r0
 801aaf0:	2800      	cmp	r0, #0
 801aaf2:	d07e      	beq.n	801abf2 <rcutils_split+0x11a>
 801aaf4:	7803      	ldrb	r3, [r0, #0]
 801aaf6:	2b00      	cmp	r3, #0
 801aaf8:	d07b      	beq.n	801abf2 <rcutils_split+0x11a>
 801aafa:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
 801aafe:	460e      	mov	r6, r1
 801ab00:	9203      	str	r2, [sp, #12]
 801ab02:	f107 0408 	add.w	r4, r7, #8
 801ab06:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
 801ab0a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ab0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ab10:	4628      	mov	r0, r5
 801ab12:	f8c4 b000 	str.w	fp, [r4]
 801ab16:	f7e5 fbf3 	bl	8000300 <strlen>
 801ab1a:	782c      	ldrb	r4, [r5, #0]
 801ab1c:	182b      	adds	r3, r5, r0
 801ab1e:	1ba4      	subs	r4, r4, r6
 801ab20:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801ab24:	fab4 f484 	clz	r4, r4
 801ab28:	42b3      	cmp	r3, r6
 801ab2a:	bf14      	ite	ne
 801ab2c:	4680      	movne	r8, r0
 801ab2e:	f1a0 0801 	subeq.w	r8, r0, #1
 801ab32:	2001      	movs	r0, #1
 801ab34:	0964      	lsrs	r4, r4, #5
 801ab36:	6038      	str	r0, [r7, #0]
 801ab38:	4544      	cmp	r4, r8
 801ab3a:	d26b      	bcs.n	801ac14 <rcutils_split+0x13c>
 801ab3c:	192b      	adds	r3, r5, r4
 801ab3e:	eb05 0108 	add.w	r1, r5, r8
 801ab42:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ab46:	42b2      	cmp	r2, r6
 801ab48:	d101      	bne.n	801ab4e <rcutils_split+0x76>
 801ab4a:	3001      	adds	r0, #1
 801ab4c:	6038      	str	r0, [r7, #0]
 801ab4e:	4299      	cmp	r1, r3
 801ab50:	d1f7      	bne.n	801ab42 <rcutils_split+0x6a>
 801ab52:	9b03      	ldr	r3, [sp, #12]
 801ab54:	0080      	lsls	r0, r0, #2
 801ab56:	4659      	mov	r1, fp
 801ab58:	4798      	blx	r3
 801ab5a:	4603      	mov	r3, r0
 801ab5c:	6078      	str	r0, [r7, #4]
 801ab5e:	2800      	cmp	r0, #0
 801ab60:	d05f      	beq.n	801ac22 <rcutils_split+0x14a>
 801ab62:	f04f 0a00 	mov.w	sl, #0
 801ab66:	46a1      	mov	r9, r4
 801ab68:	e002      	b.n	801ab70 <rcutils_split+0x98>
 801ab6a:	3401      	adds	r4, #1
 801ab6c:	45a0      	cmp	r8, r4
 801ab6e:	d922      	bls.n	801abb6 <rcutils_split+0xde>
 801ab70:	5d2a      	ldrb	r2, [r5, r4]
 801ab72:	42b2      	cmp	r2, r6
 801ab74:	d1f9      	bne.n	801ab6a <rcutils_split+0x92>
 801ab76:	45a1      	cmp	r9, r4
 801ab78:	eba4 0209 	sub.w	r2, r4, r9
 801ab7c:	d032      	beq.n	801abe4 <rcutils_split+0x10c>
 801ab7e:	4659      	mov	r1, fp
 801ab80:	1c90      	adds	r0, r2, #2
 801ab82:	9302      	str	r3, [sp, #8]
 801ab84:	9b03      	ldr	r3, [sp, #12]
 801ab86:	9201      	str	r2, [sp, #4]
 801ab88:	4798      	blx	r3
 801ab8a:	9a01      	ldr	r2, [sp, #4]
 801ab8c:	9b02      	ldr	r3, [sp, #8]
 801ab8e:	1c51      	adds	r1, r2, #1
 801ab90:	687a      	ldr	r2, [r7, #4]
 801ab92:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 801ab96:	eb05 0309 	add.w	r3, r5, r9
 801ab9a:	f852 002a 	ldr.w	r0, [r2, sl, lsl #2]
 801ab9e:	2800      	cmp	r0, #0
 801aba0:	d04f      	beq.n	801ac42 <rcutils_split+0x16a>
 801aba2:	4a2b      	ldr	r2, [pc, #172]	; (801ac50 <rcutils_split+0x178>)
 801aba4:	f10a 0a01 	add.w	sl, sl, #1
 801aba8:	f000 fd92 	bl	801b6d0 <sniprintf>
 801abac:	687b      	ldr	r3, [r7, #4]
 801abae:	3401      	adds	r4, #1
 801abb0:	45a0      	cmp	r8, r4
 801abb2:	46a1      	mov	r9, r4
 801abb4:	d8dc      	bhi.n	801ab70 <rcutils_split+0x98>
 801abb6:	45a1      	cmp	r9, r4
 801abb8:	d039      	beq.n	801ac2e <rcutils_split+0x156>
 801abba:	eba4 0409 	sub.w	r4, r4, r9
 801abbe:	4659      	mov	r1, fp
 801abc0:	9301      	str	r3, [sp, #4]
 801abc2:	1ca0      	adds	r0, r4, #2
 801abc4:	9b03      	ldr	r3, [sp, #12]
 801abc6:	4798      	blx	r3
 801abc8:	9b01      	ldr	r3, [sp, #4]
 801abca:	4a21      	ldr	r2, [pc, #132]	; (801ac50 <rcutils_split+0x178>)
 801abcc:	1c61      	adds	r1, r4, #1
 801abce:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 801abd2:	eb05 0309 	add.w	r3, r5, r9
 801abd6:	6878      	ldr	r0, [r7, #4]
 801abd8:	2500      	movs	r5, #0
 801abda:	f850 002a 	ldr.w	r0, [r0, sl, lsl #2]
 801abde:	f000 fd77 	bl	801b6d0 <sniprintf>
 801abe2:	e011      	b.n	801ac08 <rcutils_split+0x130>
 801abe4:	683a      	ldr	r2, [r7, #0]
 801abe6:	2100      	movs	r1, #0
 801abe8:	3a01      	subs	r2, #1
 801abea:	603a      	str	r2, [r7, #0]
 801abec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801abf0:	e7dd      	b.n	801abae <rcutils_split+0xd6>
 801abf2:	ac04      	add	r4, sp, #16
 801abf4:	a804      	add	r0, sp, #16
 801abf6:	f000 f82d 	bl	801ac54 <rcutils_get_zero_initialized_string_array>
 801abfa:	2500      	movs	r5, #0
 801abfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801abfe:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801ac00:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801ac04:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 801ac08:	4628      	mov	r0, r5
 801ac0a:	b00d      	add	sp, #52	; 0x34
 801ac0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac10:	b002      	add	sp, #8
 801ac12:	4770      	bx	lr
 801ac14:	9b03      	ldr	r3, [sp, #12]
 801ac16:	4659      	mov	r1, fp
 801ac18:	2004      	movs	r0, #4
 801ac1a:	4798      	blx	r3
 801ac1c:	4603      	mov	r3, r0
 801ac1e:	6078      	str	r0, [r7, #4]
 801ac20:	b928      	cbnz	r0, 801ac2e <rcutils_split+0x156>
 801ac22:	4638      	mov	r0, r7
 801ac24:	f000 f834 	bl	801ac90 <rcutils_string_array_fini>
 801ac28:	b970      	cbnz	r0, 801ac48 <rcutils_split+0x170>
 801ac2a:	2502      	movs	r5, #2
 801ac2c:	e7ec      	b.n	801ac08 <rcutils_split+0x130>
 801ac2e:	683a      	ldr	r2, [r7, #0]
 801ac30:	2100      	movs	r1, #0
 801ac32:	3a01      	subs	r2, #1
 801ac34:	460d      	mov	r5, r1
 801ac36:	603a      	str	r2, [r7, #0]
 801ac38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801ac3c:	e7e4      	b.n	801ac08 <rcutils_split+0x130>
 801ac3e:	250b      	movs	r5, #11
 801ac40:	e7e2      	b.n	801ac08 <rcutils_split+0x130>
 801ac42:	f8c7 a000 	str.w	sl, [r7]
 801ac46:	e7ec      	b.n	801ac22 <rcutils_split+0x14a>
 801ac48:	2502      	movs	r5, #2
 801ac4a:	f7f2 fca1 	bl	800d590 <rcutils_reset_error>
 801ac4e:	e7db      	b.n	801ac08 <rcutils_split+0x130>
 801ac50:	0801d58c 	.word	0x0801d58c

0801ac54 <rcutils_get_zero_initialized_string_array>:
 801ac54:	b570      	push	{r4, r5, r6, lr}
 801ac56:	b086      	sub	sp, #24
 801ac58:	4606      	mov	r6, r0
 801ac5a:	4c0c      	ldr	r4, [pc, #48]	; (801ac8c <rcutils_get_zero_initialized_string_array+0x38>)
 801ac5c:	4668      	mov	r0, sp
 801ac5e:	f7f2 fc37 	bl	800d4d0 <rcutils_get_zero_initialized_allocator>
 801ac62:	46ee      	mov	lr, sp
 801ac64:	f104 0508 	add.w	r5, r4, #8
 801ac68:	46a4      	mov	ip, r4
 801ac6a:	4634      	mov	r4, r6
 801ac6c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ac70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ac72:	f8de 3000 	ldr.w	r3, [lr]
 801ac76:	602b      	str	r3, [r5, #0]
 801ac78:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ac7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ac7e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 801ac82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801ac86:	4630      	mov	r0, r6
 801ac88:	b006      	add	sp, #24
 801ac8a:	bd70      	pop	{r4, r5, r6, pc}
 801ac8c:	200108dc 	.word	0x200108dc

0801ac90 <rcutils_string_array_fini>:
 801ac90:	b328      	cbz	r0, 801acde <rcutils_string_array_fini+0x4e>
 801ac92:	b570      	push	{r4, r5, r6, lr}
 801ac94:	4604      	mov	r4, r0
 801ac96:	6840      	ldr	r0, [r0, #4]
 801ac98:	b1e0      	cbz	r0, 801acd4 <rcutils_string_array_fini+0x44>
 801ac9a:	f104 0008 	add.w	r0, r4, #8
 801ac9e:	f7f2 fc51 	bl	800d544 <rcutils_allocator_is_valid>
 801aca2:	b1c0      	cbz	r0, 801acd6 <rcutils_string_array_fini+0x46>
 801aca4:	6823      	ldr	r3, [r4, #0]
 801aca6:	b1c3      	cbz	r3, 801acda <rcutils_string_array_fini+0x4a>
 801aca8:	2500      	movs	r5, #0
 801acaa:	6860      	ldr	r0, [r4, #4]
 801acac:	462e      	mov	r6, r5
 801acae:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801acb2:	68e3      	ldr	r3, [r4, #12]
 801acb4:	69a1      	ldr	r1, [r4, #24]
 801acb6:	4798      	blx	r3
 801acb8:	e9d4 3000 	ldrd	r3, r0, [r4]
 801acbc:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801acc0:	3501      	adds	r5, #1
 801acc2:	429d      	cmp	r5, r3
 801acc4:	d3f3      	bcc.n	801acae <rcutils_string_array_fini+0x1e>
 801acc6:	68e3      	ldr	r3, [r4, #12]
 801acc8:	69a1      	ldr	r1, [r4, #24]
 801acca:	4798      	blx	r3
 801accc:	2300      	movs	r3, #0
 801acce:	4618      	mov	r0, r3
 801acd0:	e9c4 3300 	strd	r3, r3, [r4]
 801acd4:	bd70      	pop	{r4, r5, r6, pc}
 801acd6:	200b      	movs	r0, #11
 801acd8:	bd70      	pop	{r4, r5, r6, pc}
 801acda:	6860      	ldr	r0, [r4, #4]
 801acdc:	e7f3      	b.n	801acc6 <rcutils_string_array_fini+0x36>
 801acde:	200b      	movs	r0, #11
 801ace0:	4770      	bx	lr
 801ace2:	bf00      	nop

0801ace4 <rmw_get_zero_initialized_discovery_options>:
 801ace4:	b510      	push	{r4, lr}
 801ace6:	4604      	mov	r4, r0
 801ace8:	2220      	movs	r2, #32
 801acea:	2100      	movs	r1, #0
 801acec:	f000 fdca 	bl	801b884 <memset>
 801acf0:	4620      	mov	r0, r4
 801acf2:	bd10      	pop	{r4, pc}

0801acf4 <rmw_discovery_options_init>:
 801acf4:	b570      	push	{r4, r5, r6, lr}
 801acf6:	b318      	cbz	r0, 801ad40 <rmw_discovery_options_init+0x4c>
 801acf8:	4604      	mov	r4, r0
 801acfa:	4610      	mov	r0, r2
 801acfc:	460e      	mov	r6, r1
 801acfe:	4615      	mov	r5, r2
 801ad00:	f7f2 fc20 	bl	800d544 <rcutils_allocator_is_valid>
 801ad04:	b1e0      	cbz	r0, 801ad40 <rmw_discovery_options_init+0x4c>
 801ad06:	68a3      	ldr	r3, [r4, #8]
 801ad08:	b9d3      	cbnz	r3, 801ad40 <rmw_discovery_options_init+0x4c>
 801ad0a:	6863      	ldr	r3, [r4, #4]
 801ad0c:	b9c3      	cbnz	r3, 801ad40 <rmw_discovery_options_init+0x4c>
 801ad0e:	7823      	ldrb	r3, [r4, #0]
 801ad10:	b90b      	cbnz	r3, 801ad16 <rmw_discovery_options_init+0x22>
 801ad12:	2302      	movs	r3, #2
 801ad14:	7023      	strb	r3, [r4, #0]
 801ad16:	b1a6      	cbz	r6, 801ad42 <rmw_discovery_options_init+0x4e>
 801ad18:	f44f 7180 	mov.w	r1, #256	; 0x100
 801ad1c:	4630      	mov	r0, r6
 801ad1e:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 801ad22:	4798      	blx	r3
 801ad24:	6060      	str	r0, [r4, #4]
 801ad26:	b170      	cbz	r0, 801ad46 <rmw_discovery_options_init+0x52>
 801ad28:	f104 0c0c 	add.w	ip, r4, #12
 801ad2c:	60a6      	str	r6, [r4, #8]
 801ad2e:	2600      	movs	r6, #0
 801ad30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ad32:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ad36:	682b      	ldr	r3, [r5, #0]
 801ad38:	4630      	mov	r0, r6
 801ad3a:	f8cc 3000 	str.w	r3, [ip]
 801ad3e:	bd70      	pop	{r4, r5, r6, pc}
 801ad40:	260b      	movs	r6, #11
 801ad42:	4630      	mov	r0, r6
 801ad44:	bd70      	pop	{r4, r5, r6, pc}
 801ad46:	260a      	movs	r6, #10
 801ad48:	e7fb      	b.n	801ad42 <rmw_discovery_options_init+0x4e>
 801ad4a:	bf00      	nop

0801ad4c <on_status>:
 801ad4c:	b082      	sub	sp, #8
 801ad4e:	b002      	add	sp, #8
 801ad50:	4770      	bx	lr
 801ad52:	bf00      	nop

0801ad54 <on_topic>:
 801ad54:	4a23      	ldr	r2, [pc, #140]	; (801ade4 <on_topic+0x90>)
 801ad56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad5a:	6812      	ldr	r2, [r2, #0]
 801ad5c:	b094      	sub	sp, #80	; 0x50
 801ad5e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801ad60:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 801ad64:	9113      	str	r1, [sp, #76]	; 0x4c
 801ad66:	9312      	str	r3, [sp, #72]	; 0x48
 801ad68:	b3c2      	cbz	r2, 801addc <on_topic+0x88>
 801ad6a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 801ad6e:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 801ad72:	e001      	b.n	801ad78 <on_topic+0x24>
 801ad74:	6852      	ldr	r2, [r2, #4]
 801ad76:	b38a      	cbz	r2, 801addc <on_topic+0x88>
 801ad78:	6894      	ldr	r4, [r2, #8]
 801ad7a:	8aa3      	ldrh	r3, [r4, #20]
 801ad7c:	428b      	cmp	r3, r1
 801ad7e:	d1f9      	bne.n	801ad74 <on_topic+0x20>
 801ad80:	7da3      	ldrb	r3, [r4, #22]
 801ad82:	4283      	cmp	r3, r0
 801ad84:	d1f6      	bne.n	801ad74 <on_topic+0x20>
 801ad86:	2248      	movs	r2, #72	; 0x48
 801ad88:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801ad8c:	4668      	mov	r0, sp
 801ad8e:	f000 feaa 	bl	801bae6 <memcpy>
 801ad92:	f104 0328 	add.w	r3, r4, #40	; 0x28
 801ad96:	4620      	mov	r0, r4
 801ad98:	cb0c      	ldmia	r3, {r2, r3}
 801ad9a:	f7f3 f811 	bl	800ddc0 <rmw_uxrce_get_static_input_buffer_for_entity>
 801ad9e:	4607      	mov	r7, r0
 801ada0:	b1e0      	cbz	r0, 801addc <on_topic+0x88>
 801ada2:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801ada6:	462a      	mov	r2, r5
 801ada8:	4630      	mov	r0, r6
 801adaa:	f108 0110 	add.w	r1, r8, #16
 801adae:	f7f3 fccd 	bl	800e74c <ucdr_deserialize_array_uint8_t>
 801adb2:	b930      	cbnz	r0, 801adc2 <on_topic+0x6e>
 801adb4:	4639      	mov	r1, r7
 801adb6:	480c      	ldr	r0, [pc, #48]	; (801ade8 <on_topic+0x94>)
 801adb8:	b014      	add	sp, #80	; 0x50
 801adba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801adbe:	f7fc bc65 	b.w	801768c <put_memory>
 801adc2:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 801adc6:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 801adca:	f7fd fd81 	bl	80188d0 <rmw_uros_epoch_nanos>
 801adce:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 801add2:	2305      	movs	r3, #5
 801add4:	e942 0102 	strd	r0, r1, [r2, #-8]
 801add8:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 801addc:	b014      	add	sp, #80	; 0x50
 801adde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ade2:	bf00      	nop
 801ade4:	2001019c 	.word	0x2001019c
 801ade8:	2001018c 	.word	0x2001018c

0801adec <on_request>:
 801adec:	4824      	ldr	r0, [pc, #144]	; (801ae80 <on_request+0x94>)
 801adee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801adf2:	6800      	ldr	r0, [r0, #0]
 801adf4:	b094      	sub	sp, #80	; 0x50
 801adf6:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801adf8:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801adfc:	9113      	str	r1, [sp, #76]	; 0x4c
 801adfe:	2800      	cmp	r0, #0
 801ae00:	d03b      	beq.n	801ae7a <on_request+0x8e>
 801ae02:	461d      	mov	r5, r3
 801ae04:	e001      	b.n	801ae0a <on_request+0x1e>
 801ae06:	6840      	ldr	r0, [r0, #4]
 801ae08:	b3b8      	cbz	r0, 801ae7a <on_request+0x8e>
 801ae0a:	6884      	ldr	r4, [r0, #8]
 801ae0c:	8b21      	ldrh	r1, [r4, #24]
 801ae0e:	4291      	cmp	r1, r2
 801ae10:	d1f9      	bne.n	801ae06 <on_request+0x1a>
 801ae12:	2248      	movs	r2, #72	; 0x48
 801ae14:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801ae18:	4668      	mov	r0, sp
 801ae1a:	f000 fe64 	bl	801bae6 <memcpy>
 801ae1e:	f104 0320 	add.w	r3, r4, #32
 801ae22:	4620      	mov	r0, r4
 801ae24:	cb0c      	ldmia	r3, {r2, r3}
 801ae26:	f7f2 ffcb 	bl	800ddc0 <rmw_uxrce_get_static_input_buffer_for_entity>
 801ae2a:	4680      	mov	r8, r0
 801ae2c:	b328      	cbz	r0, 801ae7a <on_request+0x8e>
 801ae2e:	4630      	mov	r0, r6
 801ae30:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801ae34:	463a      	mov	r2, r7
 801ae36:	f106 0110 	add.w	r1, r6, #16
 801ae3a:	f7f3 fc87 	bl	800e74c <ucdr_deserialize_array_uint8_t>
 801ae3e:	b930      	cbnz	r0, 801ae4e <on_request+0x62>
 801ae40:	4641      	mov	r1, r8
 801ae42:	4810      	ldr	r0, [pc, #64]	; (801ae84 <on_request+0x98>)
 801ae44:	b014      	add	sp, #80	; 0x50
 801ae46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ae4a:	f7fc bc1f 	b.w	801768c <put_memory>
 801ae4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ae50:	f606 0c28 	addw	ip, r6, #2088	; 0x828
 801ae54:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801ae58:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 801ae5c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ae60:	e895 0003 	ldmia.w	r5, {r0, r1}
 801ae64:	e88c 0003 	stmia.w	ip, {r0, r1}
 801ae68:	f7fd fd32 	bl	80188d0 <rmw_uros_epoch_nanos>
 801ae6c:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 801ae70:	2303      	movs	r3, #3
 801ae72:	e942 0102 	strd	r0, r1, [r2, #-8]
 801ae76:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801ae7a:	b014      	add	sp, #80	; 0x50
 801ae7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ae80:	2001016c 	.word	0x2001016c
 801ae84:	2001018c 	.word	0x2001018c

0801ae88 <on_reply>:
 801ae88:	4822      	ldr	r0, [pc, #136]	; (801af14 <on_reply+0x8c>)
 801ae8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae8e:	6800      	ldr	r0, [r0, #0]
 801ae90:	b094      	sub	sp, #80	; 0x50
 801ae92:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801ae94:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801ae98:	9113      	str	r1, [sp, #76]	; 0x4c
 801ae9a:	b3b8      	cbz	r0, 801af0c <on_reply+0x84>
 801ae9c:	461d      	mov	r5, r3
 801ae9e:	e001      	b.n	801aea4 <on_reply+0x1c>
 801aea0:	6840      	ldr	r0, [r0, #4]
 801aea2:	b398      	cbz	r0, 801af0c <on_reply+0x84>
 801aea4:	6884      	ldr	r4, [r0, #8]
 801aea6:	8b21      	ldrh	r1, [r4, #24]
 801aea8:	4291      	cmp	r1, r2
 801aeaa:	d1f9      	bne.n	801aea0 <on_reply+0x18>
 801aeac:	2248      	movs	r2, #72	; 0x48
 801aeae:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801aeb2:	4668      	mov	r0, sp
 801aeb4:	f000 fe17 	bl	801bae6 <memcpy>
 801aeb8:	f104 0320 	add.w	r3, r4, #32
 801aebc:	4620      	mov	r0, r4
 801aebe:	cb0c      	ldmia	r3, {r2, r3}
 801aec0:	f7f2 ff7e 	bl	800ddc0 <rmw_uxrce_get_static_input_buffer_for_entity>
 801aec4:	4680      	mov	r8, r0
 801aec6:	b308      	cbz	r0, 801af0c <on_reply+0x84>
 801aec8:	4630      	mov	r0, r6
 801aeca:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801aece:	463a      	mov	r2, r7
 801aed0:	f106 0110 	add.w	r1, r6, #16
 801aed4:	f7f3 fc3a 	bl	800e74c <ucdr_deserialize_array_uint8_t>
 801aed8:	b930      	cbnz	r0, 801aee8 <on_reply+0x60>
 801aeda:	4641      	mov	r1, r8
 801aedc:	480e      	ldr	r0, [pc, #56]	; (801af18 <on_reply+0x90>)
 801aede:	b014      	add	sp, #80	; 0x50
 801aee0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801aee4:	f7fc bbd2 	b.w	801768c <put_memory>
 801aee8:	2200      	movs	r2, #0
 801aeea:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801aeee:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 801aef2:	f8c6 282c 	str.w	r2, [r6, #2092]	; 0x82c
 801aef6:	f8c6 5828 	str.w	r5, [r6, #2088]	; 0x828
 801aefa:	f7fd fce9 	bl	80188d0 <rmw_uros_epoch_nanos>
 801aefe:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 801af02:	2304      	movs	r3, #4
 801af04:	e942 0102 	strd	r0, r1, [r2, #-8]
 801af08:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801af0c:	b014      	add	sp, #80	; 0x50
 801af0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af12:	bf00      	nop
 801af14:	2000b7b8 	.word	0x2000b7b8
 801af18:	2001018c 	.word	0x2001018c

0801af1c <rmw_create_guard_condition>:
 801af1c:	b538      	push	{r3, r4, r5, lr}
 801af1e:	4605      	mov	r5, r0
 801af20:	4808      	ldr	r0, [pc, #32]	; (801af44 <rmw_create_guard_condition+0x28>)
 801af22:	f7fc fba3 	bl	801766c <get_memory>
 801af26:	4603      	mov	r3, r0
 801af28:	b148      	cbz	r0, 801af3e <rmw_create_guard_condition+0x22>
 801af2a:	6884      	ldr	r4, [r0, #8]
 801af2c:	2300      	movs	r3, #0
 801af2e:	61e5      	str	r5, [r4, #28]
 801af30:	7423      	strb	r3, [r4, #16]
 801af32:	f7fc fc21 	bl	8017778 <rmw_get_implementation_identifier>
 801af36:	f104 0314 	add.w	r3, r4, #20
 801af3a:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801af3e:	4618      	mov	r0, r3
 801af40:	bd38      	pop	{r3, r4, r5, pc}
 801af42:	bf00      	nop
 801af44:	2001012c 	.word	0x2001012c

0801af48 <rmw_destroy_guard_condition>:
 801af48:	b508      	push	{r3, lr}
 801af4a:	4b08      	ldr	r3, [pc, #32]	; (801af6c <rmw_destroy_guard_condition+0x24>)
 801af4c:	6819      	ldr	r1, [r3, #0]
 801af4e:	b911      	cbnz	r1, 801af56 <rmw_destroy_guard_condition+0xe>
 801af50:	e00a      	b.n	801af68 <rmw_destroy_guard_condition+0x20>
 801af52:	6849      	ldr	r1, [r1, #4]
 801af54:	b141      	cbz	r1, 801af68 <rmw_destroy_guard_condition+0x20>
 801af56:	688b      	ldr	r3, [r1, #8]
 801af58:	3314      	adds	r3, #20
 801af5a:	4298      	cmp	r0, r3
 801af5c:	d1f9      	bne.n	801af52 <rmw_destroy_guard_condition+0xa>
 801af5e:	4803      	ldr	r0, [pc, #12]	; (801af6c <rmw_destroy_guard_condition+0x24>)
 801af60:	f7fc fb94 	bl	801768c <put_memory>
 801af64:	2000      	movs	r0, #0
 801af66:	bd08      	pop	{r3, pc}
 801af68:	2001      	movs	r0, #1
 801af6a:	bd08      	pop	{r3, pc}
 801af6c:	2001012c 	.word	0x2001012c

0801af70 <rmw_trigger_guard_condition>:
 801af70:	b160      	cbz	r0, 801af8c <rmw_trigger_guard_condition+0x1c>
 801af72:	b510      	push	{r4, lr}
 801af74:	4604      	mov	r4, r0
 801af76:	6800      	ldr	r0, [r0, #0]
 801af78:	f7f3 f936 	bl	800e1e8 <is_uxrce_rmw_identifier_valid>
 801af7c:	b908      	cbnz	r0, 801af82 <rmw_trigger_guard_condition+0x12>
 801af7e:	2001      	movs	r0, #1
 801af80:	bd10      	pop	{r4, pc}
 801af82:	6863      	ldr	r3, [r4, #4]
 801af84:	2201      	movs	r2, #1
 801af86:	2000      	movs	r0, #0
 801af88:	741a      	strb	r2, [r3, #16]
 801af8a:	bd10      	pop	{r4, pc}
 801af8c:	2001      	movs	r0, #1
 801af8e:	4770      	bx	lr

0801af90 <expf>:
 801af90:	ee10 2a10 	vmov	r2, s0
 801af94:	f240 412a 	movw	r1, #1066	; 0x42a
 801af98:	f3c2 530a 	ubfx	r3, r2, #20, #11
 801af9c:	428b      	cmp	r3, r1
 801af9e:	b430      	push	{r4, r5}
 801afa0:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801afa4:	d92a      	bls.n	801affc <expf+0x6c>
 801afa6:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 801afaa:	d058      	beq.n	801b05e <expf+0xce>
 801afac:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 801afb0:	d303      	bcc.n	801afba <expf+0x2a>
 801afb2:	ee30 0a00 	vadd.f32	s0, s0, s0
 801afb6:	bc30      	pop	{r4, r5}
 801afb8:	4770      	bx	lr
 801afba:	eddf 7a2a 	vldr	s15, [pc, #168]	; 801b064 <expf+0xd4>
 801afbe:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801afc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afc6:	dd03      	ble.n	801afd0 <expf+0x40>
 801afc8:	bc30      	pop	{r4, r5}
 801afca:	2000      	movs	r0, #0
 801afcc:	f000 b876 	b.w	801b0bc <__math_oflowf>
 801afd0:	eddf 7a25 	vldr	s15, [pc, #148]	; 801b068 <expf+0xd8>
 801afd4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801afd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afdc:	d503      	bpl.n	801afe6 <expf+0x56>
 801afde:	bc30      	pop	{r4, r5}
 801afe0:	2000      	movs	r0, #0
 801afe2:	f000 b85f 	b.w	801b0a4 <__math_uflowf>
 801afe6:	eddf 7a21 	vldr	s15, [pc, #132]	; 801b06c <expf+0xdc>
 801afea:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801afee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aff2:	d503      	bpl.n	801affc <expf+0x6c>
 801aff4:	bc30      	pop	{r4, r5}
 801aff6:	2000      	movs	r0, #0
 801aff8:	f000 b85a 	b.w	801b0b0 <__math_may_uflowf>
 801affc:	4b1c      	ldr	r3, [pc, #112]	; (801b070 <expf+0xe0>)
 801affe:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801b002:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 801b006:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 801b00a:	eeb0 7b44 	vmov.f64	d7, d4
 801b00e:	eea5 7b06 	vfma.f64	d7, d5, d6
 801b012:	ee17 0a10 	vmov	r0, s14
 801b016:	ee37 7b44 	vsub.f64	d7, d7, d4
 801b01a:	f000 021f 	and.w	r2, r0, #31
 801b01e:	ee95 7b06 	vfnms.f64	d7, d5, d6
 801b022:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 801b026:	ee27 4b07 	vmul.f64	d4, d7, d7
 801b02a:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 801b02e:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 801b032:	eea5 6b07 	vfma.f64	d6, d5, d7
 801b036:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 801b03a:	684d      	ldr	r5, [r1, #4]
 801b03c:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 801b040:	2100      	movs	r1, #0
 801b042:	190a      	adds	r2, r1, r4
 801b044:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 801b048:	eea5 0b07 	vfma.f64	d0, d5, d7
 801b04c:	ec43 2b17 	vmov	d7, r2, r3
 801b050:	eea6 0b04 	vfma.f64	d0, d6, d4
 801b054:	ee20 0b07 	vmul.f64	d0, d0, d7
 801b058:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801b05c:	e7ab      	b.n	801afb6 <expf+0x26>
 801b05e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 801b074 <expf+0xe4>
 801b062:	e7a8      	b.n	801afb6 <expf+0x26>
 801b064:	42b17217 	.word	0x42b17217
 801b068:	c2cff1b4 	.word	0xc2cff1b4
 801b06c:	c2ce8ecf 	.word	0xc2ce8ecf
 801b070:	0801e3b0 	.word	0x0801e3b0
 801b074:	00000000 	.word	0x00000000

0801b078 <with_errnof>:
 801b078:	b513      	push	{r0, r1, r4, lr}
 801b07a:	4604      	mov	r4, r0
 801b07c:	ed8d 0a01 	vstr	s0, [sp, #4]
 801b080:	f000 fcfc 	bl	801ba7c <__errno>
 801b084:	ed9d 0a01 	vldr	s0, [sp, #4]
 801b088:	6004      	str	r4, [r0, #0]
 801b08a:	b002      	add	sp, #8
 801b08c:	bd10      	pop	{r4, pc}

0801b08e <xflowf>:
 801b08e:	b130      	cbz	r0, 801b09e <xflowf+0x10>
 801b090:	eef1 7a40 	vneg.f32	s15, s0
 801b094:	ee27 0a80 	vmul.f32	s0, s15, s0
 801b098:	2022      	movs	r0, #34	; 0x22
 801b09a:	f7ff bfed 	b.w	801b078 <with_errnof>
 801b09e:	eef0 7a40 	vmov.f32	s15, s0
 801b0a2:	e7f7      	b.n	801b094 <xflowf+0x6>

0801b0a4 <__math_uflowf>:
 801b0a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801b0ac <__math_uflowf+0x8>
 801b0a8:	f7ff bff1 	b.w	801b08e <xflowf>
 801b0ac:	10000000 	.word	0x10000000

0801b0b0 <__math_may_uflowf>:
 801b0b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801b0b8 <__math_may_uflowf+0x8>
 801b0b4:	f7ff bfeb 	b.w	801b08e <xflowf>
 801b0b8:	1a200000 	.word	0x1a200000

0801b0bc <__math_oflowf>:
 801b0bc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801b0c4 <__math_oflowf+0x8>
 801b0c0:	f7ff bfe5 	b.w	801b08e <xflowf>
 801b0c4:	70000000 	.word	0x70000000

0801b0c8 <calloc>:
 801b0c8:	4b02      	ldr	r3, [pc, #8]	; (801b0d4 <calloc+0xc>)
 801b0ca:	460a      	mov	r2, r1
 801b0cc:	4601      	mov	r1, r0
 801b0ce:	6818      	ldr	r0, [r3, #0]
 801b0d0:	f000 b802 	b.w	801b0d8 <_calloc_r>
 801b0d4:	20001fe8 	.word	0x20001fe8

0801b0d8 <_calloc_r>:
 801b0d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b0da:	fba1 2402 	umull	r2, r4, r1, r2
 801b0de:	b94c      	cbnz	r4, 801b0f4 <_calloc_r+0x1c>
 801b0e0:	4611      	mov	r1, r2
 801b0e2:	9201      	str	r2, [sp, #4]
 801b0e4:	f000 f886 	bl	801b1f4 <_malloc_r>
 801b0e8:	9a01      	ldr	r2, [sp, #4]
 801b0ea:	4605      	mov	r5, r0
 801b0ec:	b930      	cbnz	r0, 801b0fc <_calloc_r+0x24>
 801b0ee:	4628      	mov	r0, r5
 801b0f0:	b003      	add	sp, #12
 801b0f2:	bd30      	pop	{r4, r5, pc}
 801b0f4:	220c      	movs	r2, #12
 801b0f6:	6002      	str	r2, [r0, #0]
 801b0f8:	2500      	movs	r5, #0
 801b0fa:	e7f8      	b.n	801b0ee <_calloc_r+0x16>
 801b0fc:	4621      	mov	r1, r4
 801b0fe:	f000 fbc1 	bl	801b884 <memset>
 801b102:	e7f4      	b.n	801b0ee <_calloc_r+0x16>

0801b104 <getenv>:
 801b104:	b507      	push	{r0, r1, r2, lr}
 801b106:	4b04      	ldr	r3, [pc, #16]	; (801b118 <getenv+0x14>)
 801b108:	4601      	mov	r1, r0
 801b10a:	aa01      	add	r2, sp, #4
 801b10c:	6818      	ldr	r0, [r3, #0]
 801b10e:	f000 f805 	bl	801b11c <_findenv_r>
 801b112:	b003      	add	sp, #12
 801b114:	f85d fb04 	ldr.w	pc, [sp], #4
 801b118:	20001fe8 	.word	0x20001fe8

0801b11c <_findenv_r>:
 801b11c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b120:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801b190 <_findenv_r+0x74>
 801b124:	4607      	mov	r7, r0
 801b126:	4689      	mov	r9, r1
 801b128:	4616      	mov	r6, r2
 801b12a:	f000 fd09 	bl	801bb40 <__env_lock>
 801b12e:	f8da 4000 	ldr.w	r4, [sl]
 801b132:	b134      	cbz	r4, 801b142 <_findenv_r+0x26>
 801b134:	464b      	mov	r3, r9
 801b136:	4698      	mov	r8, r3
 801b138:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b13c:	b13a      	cbz	r2, 801b14e <_findenv_r+0x32>
 801b13e:	2a3d      	cmp	r2, #61	; 0x3d
 801b140:	d1f9      	bne.n	801b136 <_findenv_r+0x1a>
 801b142:	4638      	mov	r0, r7
 801b144:	f000 fd02 	bl	801bb4c <__env_unlock>
 801b148:	2000      	movs	r0, #0
 801b14a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b14e:	eba8 0809 	sub.w	r8, r8, r9
 801b152:	46a3      	mov	fp, r4
 801b154:	f854 0b04 	ldr.w	r0, [r4], #4
 801b158:	2800      	cmp	r0, #0
 801b15a:	d0f2      	beq.n	801b142 <_findenv_r+0x26>
 801b15c:	4642      	mov	r2, r8
 801b15e:	4649      	mov	r1, r9
 801b160:	f000 fba5 	bl	801b8ae <strncmp>
 801b164:	2800      	cmp	r0, #0
 801b166:	d1f4      	bne.n	801b152 <_findenv_r+0x36>
 801b168:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801b16c:	eb03 0508 	add.w	r5, r3, r8
 801b170:	f813 3008 	ldrb.w	r3, [r3, r8]
 801b174:	2b3d      	cmp	r3, #61	; 0x3d
 801b176:	d1ec      	bne.n	801b152 <_findenv_r+0x36>
 801b178:	f8da 3000 	ldr.w	r3, [sl]
 801b17c:	ebab 0303 	sub.w	r3, fp, r3
 801b180:	109b      	asrs	r3, r3, #2
 801b182:	4638      	mov	r0, r7
 801b184:	6033      	str	r3, [r6, #0]
 801b186:	f000 fce1 	bl	801bb4c <__env_unlock>
 801b18a:	1c68      	adds	r0, r5, #1
 801b18c:	e7dd      	b.n	801b14a <_findenv_r+0x2e>
 801b18e:	bf00      	nop
 801b190:	20000000 	.word	0x20000000

0801b194 <malloc>:
 801b194:	4b02      	ldr	r3, [pc, #8]	; (801b1a0 <malloc+0xc>)
 801b196:	4601      	mov	r1, r0
 801b198:	6818      	ldr	r0, [r3, #0]
 801b19a:	f000 b82b 	b.w	801b1f4 <_malloc_r>
 801b19e:	bf00      	nop
 801b1a0:	20001fe8 	.word	0x20001fe8

0801b1a4 <free>:
 801b1a4:	4b02      	ldr	r3, [pc, #8]	; (801b1b0 <free+0xc>)
 801b1a6:	4601      	mov	r1, r0
 801b1a8:	6818      	ldr	r0, [r3, #0]
 801b1aa:	f000 bcd5 	b.w	801bb58 <_free_r>
 801b1ae:	bf00      	nop
 801b1b0:	20001fe8 	.word	0x20001fe8

0801b1b4 <sbrk_aligned>:
 801b1b4:	b570      	push	{r4, r5, r6, lr}
 801b1b6:	4e0e      	ldr	r6, [pc, #56]	; (801b1f0 <sbrk_aligned+0x3c>)
 801b1b8:	460c      	mov	r4, r1
 801b1ba:	6831      	ldr	r1, [r6, #0]
 801b1bc:	4605      	mov	r5, r0
 801b1be:	b911      	cbnz	r1, 801b1c6 <sbrk_aligned+0x12>
 801b1c0:	f000 fc3a 	bl	801ba38 <_sbrk_r>
 801b1c4:	6030      	str	r0, [r6, #0]
 801b1c6:	4621      	mov	r1, r4
 801b1c8:	4628      	mov	r0, r5
 801b1ca:	f000 fc35 	bl	801ba38 <_sbrk_r>
 801b1ce:	1c43      	adds	r3, r0, #1
 801b1d0:	d00a      	beq.n	801b1e8 <sbrk_aligned+0x34>
 801b1d2:	1cc4      	adds	r4, r0, #3
 801b1d4:	f024 0403 	bic.w	r4, r4, #3
 801b1d8:	42a0      	cmp	r0, r4
 801b1da:	d007      	beq.n	801b1ec <sbrk_aligned+0x38>
 801b1dc:	1a21      	subs	r1, r4, r0
 801b1de:	4628      	mov	r0, r5
 801b1e0:	f000 fc2a 	bl	801ba38 <_sbrk_r>
 801b1e4:	3001      	adds	r0, #1
 801b1e6:	d101      	bne.n	801b1ec <sbrk_aligned+0x38>
 801b1e8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801b1ec:	4620      	mov	r0, r4
 801b1ee:	bd70      	pop	{r4, r5, r6, pc}
 801b1f0:	200108fc 	.word	0x200108fc

0801b1f4 <_malloc_r>:
 801b1f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b1f8:	1ccd      	adds	r5, r1, #3
 801b1fa:	f025 0503 	bic.w	r5, r5, #3
 801b1fe:	3508      	adds	r5, #8
 801b200:	2d0c      	cmp	r5, #12
 801b202:	bf38      	it	cc
 801b204:	250c      	movcc	r5, #12
 801b206:	2d00      	cmp	r5, #0
 801b208:	4607      	mov	r7, r0
 801b20a:	db01      	blt.n	801b210 <_malloc_r+0x1c>
 801b20c:	42a9      	cmp	r1, r5
 801b20e:	d905      	bls.n	801b21c <_malloc_r+0x28>
 801b210:	230c      	movs	r3, #12
 801b212:	603b      	str	r3, [r7, #0]
 801b214:	2600      	movs	r6, #0
 801b216:	4630      	mov	r0, r6
 801b218:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b21c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801b2f0 <_malloc_r+0xfc>
 801b220:	f000 f868 	bl	801b2f4 <__malloc_lock>
 801b224:	f8d8 3000 	ldr.w	r3, [r8]
 801b228:	461c      	mov	r4, r3
 801b22a:	bb5c      	cbnz	r4, 801b284 <_malloc_r+0x90>
 801b22c:	4629      	mov	r1, r5
 801b22e:	4638      	mov	r0, r7
 801b230:	f7ff ffc0 	bl	801b1b4 <sbrk_aligned>
 801b234:	1c43      	adds	r3, r0, #1
 801b236:	4604      	mov	r4, r0
 801b238:	d155      	bne.n	801b2e6 <_malloc_r+0xf2>
 801b23a:	f8d8 4000 	ldr.w	r4, [r8]
 801b23e:	4626      	mov	r6, r4
 801b240:	2e00      	cmp	r6, #0
 801b242:	d145      	bne.n	801b2d0 <_malloc_r+0xdc>
 801b244:	2c00      	cmp	r4, #0
 801b246:	d048      	beq.n	801b2da <_malloc_r+0xe6>
 801b248:	6823      	ldr	r3, [r4, #0]
 801b24a:	4631      	mov	r1, r6
 801b24c:	4638      	mov	r0, r7
 801b24e:	eb04 0903 	add.w	r9, r4, r3
 801b252:	f000 fbf1 	bl	801ba38 <_sbrk_r>
 801b256:	4581      	cmp	r9, r0
 801b258:	d13f      	bne.n	801b2da <_malloc_r+0xe6>
 801b25a:	6821      	ldr	r1, [r4, #0]
 801b25c:	1a6d      	subs	r5, r5, r1
 801b25e:	4629      	mov	r1, r5
 801b260:	4638      	mov	r0, r7
 801b262:	f7ff ffa7 	bl	801b1b4 <sbrk_aligned>
 801b266:	3001      	adds	r0, #1
 801b268:	d037      	beq.n	801b2da <_malloc_r+0xe6>
 801b26a:	6823      	ldr	r3, [r4, #0]
 801b26c:	442b      	add	r3, r5
 801b26e:	6023      	str	r3, [r4, #0]
 801b270:	f8d8 3000 	ldr.w	r3, [r8]
 801b274:	2b00      	cmp	r3, #0
 801b276:	d038      	beq.n	801b2ea <_malloc_r+0xf6>
 801b278:	685a      	ldr	r2, [r3, #4]
 801b27a:	42a2      	cmp	r2, r4
 801b27c:	d12b      	bne.n	801b2d6 <_malloc_r+0xe2>
 801b27e:	2200      	movs	r2, #0
 801b280:	605a      	str	r2, [r3, #4]
 801b282:	e00f      	b.n	801b2a4 <_malloc_r+0xb0>
 801b284:	6822      	ldr	r2, [r4, #0]
 801b286:	1b52      	subs	r2, r2, r5
 801b288:	d41f      	bmi.n	801b2ca <_malloc_r+0xd6>
 801b28a:	2a0b      	cmp	r2, #11
 801b28c:	d917      	bls.n	801b2be <_malloc_r+0xca>
 801b28e:	1961      	adds	r1, r4, r5
 801b290:	42a3      	cmp	r3, r4
 801b292:	6025      	str	r5, [r4, #0]
 801b294:	bf18      	it	ne
 801b296:	6059      	strne	r1, [r3, #4]
 801b298:	6863      	ldr	r3, [r4, #4]
 801b29a:	bf08      	it	eq
 801b29c:	f8c8 1000 	streq.w	r1, [r8]
 801b2a0:	5162      	str	r2, [r4, r5]
 801b2a2:	604b      	str	r3, [r1, #4]
 801b2a4:	4638      	mov	r0, r7
 801b2a6:	f104 060b 	add.w	r6, r4, #11
 801b2aa:	f000 f829 	bl	801b300 <__malloc_unlock>
 801b2ae:	f026 0607 	bic.w	r6, r6, #7
 801b2b2:	1d23      	adds	r3, r4, #4
 801b2b4:	1af2      	subs	r2, r6, r3
 801b2b6:	d0ae      	beq.n	801b216 <_malloc_r+0x22>
 801b2b8:	1b9b      	subs	r3, r3, r6
 801b2ba:	50a3      	str	r3, [r4, r2]
 801b2bc:	e7ab      	b.n	801b216 <_malloc_r+0x22>
 801b2be:	42a3      	cmp	r3, r4
 801b2c0:	6862      	ldr	r2, [r4, #4]
 801b2c2:	d1dd      	bne.n	801b280 <_malloc_r+0x8c>
 801b2c4:	f8c8 2000 	str.w	r2, [r8]
 801b2c8:	e7ec      	b.n	801b2a4 <_malloc_r+0xb0>
 801b2ca:	4623      	mov	r3, r4
 801b2cc:	6864      	ldr	r4, [r4, #4]
 801b2ce:	e7ac      	b.n	801b22a <_malloc_r+0x36>
 801b2d0:	4634      	mov	r4, r6
 801b2d2:	6876      	ldr	r6, [r6, #4]
 801b2d4:	e7b4      	b.n	801b240 <_malloc_r+0x4c>
 801b2d6:	4613      	mov	r3, r2
 801b2d8:	e7cc      	b.n	801b274 <_malloc_r+0x80>
 801b2da:	230c      	movs	r3, #12
 801b2dc:	603b      	str	r3, [r7, #0]
 801b2de:	4638      	mov	r0, r7
 801b2e0:	f000 f80e 	bl	801b300 <__malloc_unlock>
 801b2e4:	e797      	b.n	801b216 <_malloc_r+0x22>
 801b2e6:	6025      	str	r5, [r4, #0]
 801b2e8:	e7dc      	b.n	801b2a4 <_malloc_r+0xb0>
 801b2ea:	605b      	str	r3, [r3, #4]
 801b2ec:	deff      	udf	#255	; 0xff
 801b2ee:	bf00      	nop
 801b2f0:	200108f8 	.word	0x200108f8

0801b2f4 <__malloc_lock>:
 801b2f4:	4801      	ldr	r0, [pc, #4]	; (801b2fc <__malloc_lock+0x8>)
 801b2f6:	f000 bbec 	b.w	801bad2 <__retarget_lock_acquire_recursive>
 801b2fa:	bf00      	nop
 801b2fc:	20010a41 	.word	0x20010a41

0801b300 <__malloc_unlock>:
 801b300:	4801      	ldr	r0, [pc, #4]	; (801b308 <__malloc_unlock+0x8>)
 801b302:	f000 bbe7 	b.w	801bad4 <__retarget_lock_release_recursive>
 801b306:	bf00      	nop
 801b308:	20010a41 	.word	0x20010a41

0801b30c <srand>:
 801b30c:	b538      	push	{r3, r4, r5, lr}
 801b30e:	4b10      	ldr	r3, [pc, #64]	; (801b350 <srand+0x44>)
 801b310:	681d      	ldr	r5, [r3, #0]
 801b312:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801b314:	4604      	mov	r4, r0
 801b316:	b9b3      	cbnz	r3, 801b346 <srand+0x3a>
 801b318:	2018      	movs	r0, #24
 801b31a:	f7ff ff3b 	bl	801b194 <malloc>
 801b31e:	4602      	mov	r2, r0
 801b320:	6328      	str	r0, [r5, #48]	; 0x30
 801b322:	b920      	cbnz	r0, 801b32e <srand+0x22>
 801b324:	4b0b      	ldr	r3, [pc, #44]	; (801b354 <srand+0x48>)
 801b326:	480c      	ldr	r0, [pc, #48]	; (801b358 <srand+0x4c>)
 801b328:	2146      	movs	r1, #70	; 0x46
 801b32a:	f000 fbeb 	bl	801bb04 <__assert_func>
 801b32e:	490b      	ldr	r1, [pc, #44]	; (801b35c <srand+0x50>)
 801b330:	4b0b      	ldr	r3, [pc, #44]	; (801b360 <srand+0x54>)
 801b332:	e9c0 1300 	strd	r1, r3, [r0]
 801b336:	4b0b      	ldr	r3, [pc, #44]	; (801b364 <srand+0x58>)
 801b338:	6083      	str	r3, [r0, #8]
 801b33a:	230b      	movs	r3, #11
 801b33c:	8183      	strh	r3, [r0, #12]
 801b33e:	2100      	movs	r1, #0
 801b340:	2001      	movs	r0, #1
 801b342:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801b346:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801b348:	2200      	movs	r2, #0
 801b34a:	611c      	str	r4, [r3, #16]
 801b34c:	615a      	str	r2, [r3, #20]
 801b34e:	bd38      	pop	{r3, r4, r5, pc}
 801b350:	20001fe8 	.word	0x20001fe8
 801b354:	0801e4f8 	.word	0x0801e4f8
 801b358:	0801e50f 	.word	0x0801e50f
 801b35c:	abcd330e 	.word	0xabcd330e
 801b360:	e66d1234 	.word	0xe66d1234
 801b364:	0005deec 	.word	0x0005deec

0801b368 <rand>:
 801b368:	4b16      	ldr	r3, [pc, #88]	; (801b3c4 <rand+0x5c>)
 801b36a:	b510      	push	{r4, lr}
 801b36c:	681c      	ldr	r4, [r3, #0]
 801b36e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b370:	b9b3      	cbnz	r3, 801b3a0 <rand+0x38>
 801b372:	2018      	movs	r0, #24
 801b374:	f7ff ff0e 	bl	801b194 <malloc>
 801b378:	4602      	mov	r2, r0
 801b37a:	6320      	str	r0, [r4, #48]	; 0x30
 801b37c:	b920      	cbnz	r0, 801b388 <rand+0x20>
 801b37e:	4b12      	ldr	r3, [pc, #72]	; (801b3c8 <rand+0x60>)
 801b380:	4812      	ldr	r0, [pc, #72]	; (801b3cc <rand+0x64>)
 801b382:	2152      	movs	r1, #82	; 0x52
 801b384:	f000 fbbe 	bl	801bb04 <__assert_func>
 801b388:	4911      	ldr	r1, [pc, #68]	; (801b3d0 <rand+0x68>)
 801b38a:	4b12      	ldr	r3, [pc, #72]	; (801b3d4 <rand+0x6c>)
 801b38c:	e9c0 1300 	strd	r1, r3, [r0]
 801b390:	4b11      	ldr	r3, [pc, #68]	; (801b3d8 <rand+0x70>)
 801b392:	6083      	str	r3, [r0, #8]
 801b394:	230b      	movs	r3, #11
 801b396:	8183      	strh	r3, [r0, #12]
 801b398:	2100      	movs	r1, #0
 801b39a:	2001      	movs	r0, #1
 801b39c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801b3a0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801b3a2:	480e      	ldr	r0, [pc, #56]	; (801b3dc <rand+0x74>)
 801b3a4:	690b      	ldr	r3, [r1, #16]
 801b3a6:	694c      	ldr	r4, [r1, #20]
 801b3a8:	4a0d      	ldr	r2, [pc, #52]	; (801b3e0 <rand+0x78>)
 801b3aa:	4358      	muls	r0, r3
 801b3ac:	fb02 0004 	mla	r0, r2, r4, r0
 801b3b0:	fba3 3202 	umull	r3, r2, r3, r2
 801b3b4:	3301      	adds	r3, #1
 801b3b6:	eb40 0002 	adc.w	r0, r0, r2
 801b3ba:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801b3be:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801b3c2:	bd10      	pop	{r4, pc}
 801b3c4:	20001fe8 	.word	0x20001fe8
 801b3c8:	0801e4f8 	.word	0x0801e4f8
 801b3cc:	0801e50f 	.word	0x0801e50f
 801b3d0:	abcd330e 	.word	0xabcd330e
 801b3d4:	e66d1234 	.word	0xe66d1234
 801b3d8:	0005deec 	.word	0x0005deec
 801b3dc:	5851f42d 	.word	0x5851f42d
 801b3e0:	4c957f2d 	.word	0x4c957f2d

0801b3e4 <realloc>:
 801b3e4:	4b02      	ldr	r3, [pc, #8]	; (801b3f0 <realloc+0xc>)
 801b3e6:	460a      	mov	r2, r1
 801b3e8:	4601      	mov	r1, r0
 801b3ea:	6818      	ldr	r0, [r3, #0]
 801b3ec:	f000 b802 	b.w	801b3f4 <_realloc_r>
 801b3f0:	20001fe8 	.word	0x20001fe8

0801b3f4 <_realloc_r>:
 801b3f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b3f8:	4680      	mov	r8, r0
 801b3fa:	4614      	mov	r4, r2
 801b3fc:	460e      	mov	r6, r1
 801b3fe:	b921      	cbnz	r1, 801b40a <_realloc_r+0x16>
 801b400:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b404:	4611      	mov	r1, r2
 801b406:	f7ff bef5 	b.w	801b1f4 <_malloc_r>
 801b40a:	b92a      	cbnz	r2, 801b418 <_realloc_r+0x24>
 801b40c:	f000 fba4 	bl	801bb58 <_free_r>
 801b410:	4625      	mov	r5, r4
 801b412:	4628      	mov	r0, r5
 801b414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b418:	f000 fbea 	bl	801bbf0 <_malloc_usable_size_r>
 801b41c:	4284      	cmp	r4, r0
 801b41e:	4607      	mov	r7, r0
 801b420:	d802      	bhi.n	801b428 <_realloc_r+0x34>
 801b422:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801b426:	d812      	bhi.n	801b44e <_realloc_r+0x5a>
 801b428:	4621      	mov	r1, r4
 801b42a:	4640      	mov	r0, r8
 801b42c:	f7ff fee2 	bl	801b1f4 <_malloc_r>
 801b430:	4605      	mov	r5, r0
 801b432:	2800      	cmp	r0, #0
 801b434:	d0ed      	beq.n	801b412 <_realloc_r+0x1e>
 801b436:	42bc      	cmp	r4, r7
 801b438:	4622      	mov	r2, r4
 801b43a:	4631      	mov	r1, r6
 801b43c:	bf28      	it	cs
 801b43e:	463a      	movcs	r2, r7
 801b440:	f000 fb51 	bl	801bae6 <memcpy>
 801b444:	4631      	mov	r1, r6
 801b446:	4640      	mov	r0, r8
 801b448:	f000 fb86 	bl	801bb58 <_free_r>
 801b44c:	e7e1      	b.n	801b412 <_realloc_r+0x1e>
 801b44e:	4635      	mov	r5, r6
 801b450:	e7df      	b.n	801b412 <_realloc_r+0x1e>
	...

0801b454 <_strtoul_l.constprop.0>:
 801b454:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b458:	4f36      	ldr	r7, [pc, #216]	; (801b534 <_strtoul_l.constprop.0+0xe0>)
 801b45a:	4686      	mov	lr, r0
 801b45c:	460d      	mov	r5, r1
 801b45e:	4628      	mov	r0, r5
 801b460:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b464:	5d3e      	ldrb	r6, [r7, r4]
 801b466:	f016 0608 	ands.w	r6, r6, #8
 801b46a:	d1f8      	bne.n	801b45e <_strtoul_l.constprop.0+0xa>
 801b46c:	2c2d      	cmp	r4, #45	; 0x2d
 801b46e:	d130      	bne.n	801b4d2 <_strtoul_l.constprop.0+0x7e>
 801b470:	782c      	ldrb	r4, [r5, #0]
 801b472:	2601      	movs	r6, #1
 801b474:	1c85      	adds	r5, r0, #2
 801b476:	2b00      	cmp	r3, #0
 801b478:	d057      	beq.n	801b52a <_strtoul_l.constprop.0+0xd6>
 801b47a:	2b10      	cmp	r3, #16
 801b47c:	d109      	bne.n	801b492 <_strtoul_l.constprop.0+0x3e>
 801b47e:	2c30      	cmp	r4, #48	; 0x30
 801b480:	d107      	bne.n	801b492 <_strtoul_l.constprop.0+0x3e>
 801b482:	7828      	ldrb	r0, [r5, #0]
 801b484:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801b488:	2858      	cmp	r0, #88	; 0x58
 801b48a:	d149      	bne.n	801b520 <_strtoul_l.constprop.0+0xcc>
 801b48c:	786c      	ldrb	r4, [r5, #1]
 801b48e:	2310      	movs	r3, #16
 801b490:	3502      	adds	r5, #2
 801b492:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801b496:	2700      	movs	r7, #0
 801b498:	fbb8 f8f3 	udiv	r8, r8, r3
 801b49c:	fb03 f908 	mul.w	r9, r3, r8
 801b4a0:	ea6f 0909 	mvn.w	r9, r9
 801b4a4:	4638      	mov	r0, r7
 801b4a6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801b4aa:	f1bc 0f09 	cmp.w	ip, #9
 801b4ae:	d815      	bhi.n	801b4dc <_strtoul_l.constprop.0+0x88>
 801b4b0:	4664      	mov	r4, ip
 801b4b2:	42a3      	cmp	r3, r4
 801b4b4:	dd23      	ble.n	801b4fe <_strtoul_l.constprop.0+0xaa>
 801b4b6:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 801b4ba:	d007      	beq.n	801b4cc <_strtoul_l.constprop.0+0x78>
 801b4bc:	4580      	cmp	r8, r0
 801b4be:	d31b      	bcc.n	801b4f8 <_strtoul_l.constprop.0+0xa4>
 801b4c0:	d101      	bne.n	801b4c6 <_strtoul_l.constprop.0+0x72>
 801b4c2:	45a1      	cmp	r9, r4
 801b4c4:	db18      	blt.n	801b4f8 <_strtoul_l.constprop.0+0xa4>
 801b4c6:	fb00 4003 	mla	r0, r0, r3, r4
 801b4ca:	2701      	movs	r7, #1
 801b4cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b4d0:	e7e9      	b.n	801b4a6 <_strtoul_l.constprop.0+0x52>
 801b4d2:	2c2b      	cmp	r4, #43	; 0x2b
 801b4d4:	bf04      	itt	eq
 801b4d6:	782c      	ldrbeq	r4, [r5, #0]
 801b4d8:	1c85      	addeq	r5, r0, #2
 801b4da:	e7cc      	b.n	801b476 <_strtoul_l.constprop.0+0x22>
 801b4dc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801b4e0:	f1bc 0f19 	cmp.w	ip, #25
 801b4e4:	d801      	bhi.n	801b4ea <_strtoul_l.constprop.0+0x96>
 801b4e6:	3c37      	subs	r4, #55	; 0x37
 801b4e8:	e7e3      	b.n	801b4b2 <_strtoul_l.constprop.0+0x5e>
 801b4ea:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801b4ee:	f1bc 0f19 	cmp.w	ip, #25
 801b4f2:	d804      	bhi.n	801b4fe <_strtoul_l.constprop.0+0xaa>
 801b4f4:	3c57      	subs	r4, #87	; 0x57
 801b4f6:	e7dc      	b.n	801b4b2 <_strtoul_l.constprop.0+0x5e>
 801b4f8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801b4fc:	e7e6      	b.n	801b4cc <_strtoul_l.constprop.0+0x78>
 801b4fe:	1c7b      	adds	r3, r7, #1
 801b500:	d106      	bne.n	801b510 <_strtoul_l.constprop.0+0xbc>
 801b502:	2322      	movs	r3, #34	; 0x22
 801b504:	f8ce 3000 	str.w	r3, [lr]
 801b508:	4638      	mov	r0, r7
 801b50a:	b932      	cbnz	r2, 801b51a <_strtoul_l.constprop.0+0xc6>
 801b50c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b510:	b106      	cbz	r6, 801b514 <_strtoul_l.constprop.0+0xc0>
 801b512:	4240      	negs	r0, r0
 801b514:	2a00      	cmp	r2, #0
 801b516:	d0f9      	beq.n	801b50c <_strtoul_l.constprop.0+0xb8>
 801b518:	b107      	cbz	r7, 801b51c <_strtoul_l.constprop.0+0xc8>
 801b51a:	1e69      	subs	r1, r5, #1
 801b51c:	6011      	str	r1, [r2, #0]
 801b51e:	e7f5      	b.n	801b50c <_strtoul_l.constprop.0+0xb8>
 801b520:	2430      	movs	r4, #48	; 0x30
 801b522:	2b00      	cmp	r3, #0
 801b524:	d1b5      	bne.n	801b492 <_strtoul_l.constprop.0+0x3e>
 801b526:	2308      	movs	r3, #8
 801b528:	e7b3      	b.n	801b492 <_strtoul_l.constprop.0+0x3e>
 801b52a:	2c30      	cmp	r4, #48	; 0x30
 801b52c:	d0a9      	beq.n	801b482 <_strtoul_l.constprop.0+0x2e>
 801b52e:	230a      	movs	r3, #10
 801b530:	e7af      	b.n	801b492 <_strtoul_l.constprop.0+0x3e>
 801b532:	bf00      	nop
 801b534:	0801e568 	.word	0x0801e568

0801b538 <strtoul>:
 801b538:	4613      	mov	r3, r2
 801b53a:	460a      	mov	r2, r1
 801b53c:	4601      	mov	r1, r0
 801b53e:	4802      	ldr	r0, [pc, #8]	; (801b548 <strtoul+0x10>)
 801b540:	6800      	ldr	r0, [r0, #0]
 801b542:	f7ff bf87 	b.w	801b454 <_strtoul_l.constprop.0>
 801b546:	bf00      	nop
 801b548:	20001fe8 	.word	0x20001fe8

0801b54c <std>:
 801b54c:	2300      	movs	r3, #0
 801b54e:	b510      	push	{r4, lr}
 801b550:	4604      	mov	r4, r0
 801b552:	e9c0 3300 	strd	r3, r3, [r0]
 801b556:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b55a:	6083      	str	r3, [r0, #8]
 801b55c:	8181      	strh	r1, [r0, #12]
 801b55e:	6643      	str	r3, [r0, #100]	; 0x64
 801b560:	81c2      	strh	r2, [r0, #14]
 801b562:	6183      	str	r3, [r0, #24]
 801b564:	4619      	mov	r1, r3
 801b566:	2208      	movs	r2, #8
 801b568:	305c      	adds	r0, #92	; 0x5c
 801b56a:	f000 f98b 	bl	801b884 <memset>
 801b56e:	4b0d      	ldr	r3, [pc, #52]	; (801b5a4 <std+0x58>)
 801b570:	6263      	str	r3, [r4, #36]	; 0x24
 801b572:	4b0d      	ldr	r3, [pc, #52]	; (801b5a8 <std+0x5c>)
 801b574:	62a3      	str	r3, [r4, #40]	; 0x28
 801b576:	4b0d      	ldr	r3, [pc, #52]	; (801b5ac <std+0x60>)
 801b578:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b57a:	4b0d      	ldr	r3, [pc, #52]	; (801b5b0 <std+0x64>)
 801b57c:	6323      	str	r3, [r4, #48]	; 0x30
 801b57e:	4b0d      	ldr	r3, [pc, #52]	; (801b5b4 <std+0x68>)
 801b580:	6224      	str	r4, [r4, #32]
 801b582:	429c      	cmp	r4, r3
 801b584:	d006      	beq.n	801b594 <std+0x48>
 801b586:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801b58a:	4294      	cmp	r4, r2
 801b58c:	d002      	beq.n	801b594 <std+0x48>
 801b58e:	33d0      	adds	r3, #208	; 0xd0
 801b590:	429c      	cmp	r4, r3
 801b592:	d105      	bne.n	801b5a0 <std+0x54>
 801b594:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b59c:	f000 ba98 	b.w	801bad0 <__retarget_lock_init_recursive>
 801b5a0:	bd10      	pop	{r4, pc}
 801b5a2:	bf00      	nop
 801b5a4:	0801b739 	.word	0x0801b739
 801b5a8:	0801b75b 	.word	0x0801b75b
 801b5ac:	0801b793 	.word	0x0801b793
 801b5b0:	0801b7b7 	.word	0x0801b7b7
 801b5b4:	20010900 	.word	0x20010900

0801b5b8 <stdio_exit_handler>:
 801b5b8:	4a02      	ldr	r2, [pc, #8]	; (801b5c4 <stdio_exit_handler+0xc>)
 801b5ba:	4903      	ldr	r1, [pc, #12]	; (801b5c8 <stdio_exit_handler+0x10>)
 801b5bc:	4803      	ldr	r0, [pc, #12]	; (801b5cc <stdio_exit_handler+0x14>)
 801b5be:	f000 b869 	b.w	801b694 <_fwalk_sglue>
 801b5c2:	bf00      	nop
 801b5c4:	20001f90 	.word	0x20001f90
 801b5c8:	0801c2dd 	.word	0x0801c2dd
 801b5cc:	20001f9c 	.word	0x20001f9c

0801b5d0 <cleanup_stdio>:
 801b5d0:	6841      	ldr	r1, [r0, #4]
 801b5d2:	4b0c      	ldr	r3, [pc, #48]	; (801b604 <cleanup_stdio+0x34>)
 801b5d4:	4299      	cmp	r1, r3
 801b5d6:	b510      	push	{r4, lr}
 801b5d8:	4604      	mov	r4, r0
 801b5da:	d001      	beq.n	801b5e0 <cleanup_stdio+0x10>
 801b5dc:	f000 fe7e 	bl	801c2dc <_fflush_r>
 801b5e0:	68a1      	ldr	r1, [r4, #8]
 801b5e2:	4b09      	ldr	r3, [pc, #36]	; (801b608 <cleanup_stdio+0x38>)
 801b5e4:	4299      	cmp	r1, r3
 801b5e6:	d002      	beq.n	801b5ee <cleanup_stdio+0x1e>
 801b5e8:	4620      	mov	r0, r4
 801b5ea:	f000 fe77 	bl	801c2dc <_fflush_r>
 801b5ee:	68e1      	ldr	r1, [r4, #12]
 801b5f0:	4b06      	ldr	r3, [pc, #24]	; (801b60c <cleanup_stdio+0x3c>)
 801b5f2:	4299      	cmp	r1, r3
 801b5f4:	d004      	beq.n	801b600 <cleanup_stdio+0x30>
 801b5f6:	4620      	mov	r0, r4
 801b5f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b5fc:	f000 be6e 	b.w	801c2dc <_fflush_r>
 801b600:	bd10      	pop	{r4, pc}
 801b602:	bf00      	nop
 801b604:	20010900 	.word	0x20010900
 801b608:	20010968 	.word	0x20010968
 801b60c:	200109d0 	.word	0x200109d0

0801b610 <global_stdio_init.part.0>:
 801b610:	b510      	push	{r4, lr}
 801b612:	4b0b      	ldr	r3, [pc, #44]	; (801b640 <global_stdio_init.part.0+0x30>)
 801b614:	4c0b      	ldr	r4, [pc, #44]	; (801b644 <global_stdio_init.part.0+0x34>)
 801b616:	4a0c      	ldr	r2, [pc, #48]	; (801b648 <global_stdio_init.part.0+0x38>)
 801b618:	601a      	str	r2, [r3, #0]
 801b61a:	4620      	mov	r0, r4
 801b61c:	2200      	movs	r2, #0
 801b61e:	2104      	movs	r1, #4
 801b620:	f7ff ff94 	bl	801b54c <std>
 801b624:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801b628:	2201      	movs	r2, #1
 801b62a:	2109      	movs	r1, #9
 801b62c:	f7ff ff8e 	bl	801b54c <std>
 801b630:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801b634:	2202      	movs	r2, #2
 801b636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b63a:	2112      	movs	r1, #18
 801b63c:	f7ff bf86 	b.w	801b54c <std>
 801b640:	20010a38 	.word	0x20010a38
 801b644:	20010900 	.word	0x20010900
 801b648:	0801b5b9 	.word	0x0801b5b9

0801b64c <__sfp_lock_acquire>:
 801b64c:	4801      	ldr	r0, [pc, #4]	; (801b654 <__sfp_lock_acquire+0x8>)
 801b64e:	f000 ba40 	b.w	801bad2 <__retarget_lock_acquire_recursive>
 801b652:	bf00      	nop
 801b654:	20010a42 	.word	0x20010a42

0801b658 <__sfp_lock_release>:
 801b658:	4801      	ldr	r0, [pc, #4]	; (801b660 <__sfp_lock_release+0x8>)
 801b65a:	f000 ba3b 	b.w	801bad4 <__retarget_lock_release_recursive>
 801b65e:	bf00      	nop
 801b660:	20010a42 	.word	0x20010a42

0801b664 <__sinit>:
 801b664:	b510      	push	{r4, lr}
 801b666:	4604      	mov	r4, r0
 801b668:	f7ff fff0 	bl	801b64c <__sfp_lock_acquire>
 801b66c:	6a23      	ldr	r3, [r4, #32]
 801b66e:	b11b      	cbz	r3, 801b678 <__sinit+0x14>
 801b670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b674:	f7ff bff0 	b.w	801b658 <__sfp_lock_release>
 801b678:	4b04      	ldr	r3, [pc, #16]	; (801b68c <__sinit+0x28>)
 801b67a:	6223      	str	r3, [r4, #32]
 801b67c:	4b04      	ldr	r3, [pc, #16]	; (801b690 <__sinit+0x2c>)
 801b67e:	681b      	ldr	r3, [r3, #0]
 801b680:	2b00      	cmp	r3, #0
 801b682:	d1f5      	bne.n	801b670 <__sinit+0xc>
 801b684:	f7ff ffc4 	bl	801b610 <global_stdio_init.part.0>
 801b688:	e7f2      	b.n	801b670 <__sinit+0xc>
 801b68a:	bf00      	nop
 801b68c:	0801b5d1 	.word	0x0801b5d1
 801b690:	20010a38 	.word	0x20010a38

0801b694 <_fwalk_sglue>:
 801b694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b698:	4607      	mov	r7, r0
 801b69a:	4688      	mov	r8, r1
 801b69c:	4614      	mov	r4, r2
 801b69e:	2600      	movs	r6, #0
 801b6a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b6a4:	f1b9 0901 	subs.w	r9, r9, #1
 801b6a8:	d505      	bpl.n	801b6b6 <_fwalk_sglue+0x22>
 801b6aa:	6824      	ldr	r4, [r4, #0]
 801b6ac:	2c00      	cmp	r4, #0
 801b6ae:	d1f7      	bne.n	801b6a0 <_fwalk_sglue+0xc>
 801b6b0:	4630      	mov	r0, r6
 801b6b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b6b6:	89ab      	ldrh	r3, [r5, #12]
 801b6b8:	2b01      	cmp	r3, #1
 801b6ba:	d907      	bls.n	801b6cc <_fwalk_sglue+0x38>
 801b6bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b6c0:	3301      	adds	r3, #1
 801b6c2:	d003      	beq.n	801b6cc <_fwalk_sglue+0x38>
 801b6c4:	4629      	mov	r1, r5
 801b6c6:	4638      	mov	r0, r7
 801b6c8:	47c0      	blx	r8
 801b6ca:	4306      	orrs	r6, r0
 801b6cc:	3568      	adds	r5, #104	; 0x68
 801b6ce:	e7e9      	b.n	801b6a4 <_fwalk_sglue+0x10>

0801b6d0 <sniprintf>:
 801b6d0:	b40c      	push	{r2, r3}
 801b6d2:	b530      	push	{r4, r5, lr}
 801b6d4:	4b17      	ldr	r3, [pc, #92]	; (801b734 <sniprintf+0x64>)
 801b6d6:	1e0c      	subs	r4, r1, #0
 801b6d8:	681d      	ldr	r5, [r3, #0]
 801b6da:	b09d      	sub	sp, #116	; 0x74
 801b6dc:	da08      	bge.n	801b6f0 <sniprintf+0x20>
 801b6de:	238b      	movs	r3, #139	; 0x8b
 801b6e0:	602b      	str	r3, [r5, #0]
 801b6e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b6e6:	b01d      	add	sp, #116	; 0x74
 801b6e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b6ec:	b002      	add	sp, #8
 801b6ee:	4770      	bx	lr
 801b6f0:	f44f 7302 	mov.w	r3, #520	; 0x208
 801b6f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b6f8:	bf14      	ite	ne
 801b6fa:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801b6fe:	4623      	moveq	r3, r4
 801b700:	9304      	str	r3, [sp, #16]
 801b702:	9307      	str	r3, [sp, #28]
 801b704:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b708:	9002      	str	r0, [sp, #8]
 801b70a:	9006      	str	r0, [sp, #24]
 801b70c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b710:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801b712:	ab21      	add	r3, sp, #132	; 0x84
 801b714:	a902      	add	r1, sp, #8
 801b716:	4628      	mov	r0, r5
 801b718:	9301      	str	r3, [sp, #4]
 801b71a:	f000 facb 	bl	801bcb4 <_svfiprintf_r>
 801b71e:	1c43      	adds	r3, r0, #1
 801b720:	bfbc      	itt	lt
 801b722:	238b      	movlt	r3, #139	; 0x8b
 801b724:	602b      	strlt	r3, [r5, #0]
 801b726:	2c00      	cmp	r4, #0
 801b728:	d0dd      	beq.n	801b6e6 <sniprintf+0x16>
 801b72a:	9b02      	ldr	r3, [sp, #8]
 801b72c:	2200      	movs	r2, #0
 801b72e:	701a      	strb	r2, [r3, #0]
 801b730:	e7d9      	b.n	801b6e6 <sniprintf+0x16>
 801b732:	bf00      	nop
 801b734:	20001fe8 	.word	0x20001fe8

0801b738 <__sread>:
 801b738:	b510      	push	{r4, lr}
 801b73a:	460c      	mov	r4, r1
 801b73c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b740:	f000 f968 	bl	801ba14 <_read_r>
 801b744:	2800      	cmp	r0, #0
 801b746:	bfab      	itete	ge
 801b748:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b74a:	89a3      	ldrhlt	r3, [r4, #12]
 801b74c:	181b      	addge	r3, r3, r0
 801b74e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b752:	bfac      	ite	ge
 801b754:	6563      	strge	r3, [r4, #84]	; 0x54
 801b756:	81a3      	strhlt	r3, [r4, #12]
 801b758:	bd10      	pop	{r4, pc}

0801b75a <__swrite>:
 801b75a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b75e:	461f      	mov	r7, r3
 801b760:	898b      	ldrh	r3, [r1, #12]
 801b762:	05db      	lsls	r3, r3, #23
 801b764:	4605      	mov	r5, r0
 801b766:	460c      	mov	r4, r1
 801b768:	4616      	mov	r6, r2
 801b76a:	d505      	bpl.n	801b778 <__swrite+0x1e>
 801b76c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b770:	2302      	movs	r3, #2
 801b772:	2200      	movs	r2, #0
 801b774:	f000 f93c 	bl	801b9f0 <_lseek_r>
 801b778:	89a3      	ldrh	r3, [r4, #12]
 801b77a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b77e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b782:	81a3      	strh	r3, [r4, #12]
 801b784:	4632      	mov	r2, r6
 801b786:	463b      	mov	r3, r7
 801b788:	4628      	mov	r0, r5
 801b78a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b78e:	f000 b963 	b.w	801ba58 <_write_r>

0801b792 <__sseek>:
 801b792:	b510      	push	{r4, lr}
 801b794:	460c      	mov	r4, r1
 801b796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b79a:	f000 f929 	bl	801b9f0 <_lseek_r>
 801b79e:	1c43      	adds	r3, r0, #1
 801b7a0:	89a3      	ldrh	r3, [r4, #12]
 801b7a2:	bf15      	itete	ne
 801b7a4:	6560      	strne	r0, [r4, #84]	; 0x54
 801b7a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b7aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b7ae:	81a3      	strheq	r3, [r4, #12]
 801b7b0:	bf18      	it	ne
 801b7b2:	81a3      	strhne	r3, [r4, #12]
 801b7b4:	bd10      	pop	{r4, pc}

0801b7b6 <__sclose>:
 801b7b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b7ba:	f000 b8b3 	b.w	801b924 <_close_r>

0801b7be <_vsniprintf_r>:
 801b7be:	b530      	push	{r4, r5, lr}
 801b7c0:	4614      	mov	r4, r2
 801b7c2:	2c00      	cmp	r4, #0
 801b7c4:	b09b      	sub	sp, #108	; 0x6c
 801b7c6:	4605      	mov	r5, r0
 801b7c8:	461a      	mov	r2, r3
 801b7ca:	da05      	bge.n	801b7d8 <_vsniprintf_r+0x1a>
 801b7cc:	238b      	movs	r3, #139	; 0x8b
 801b7ce:	6003      	str	r3, [r0, #0]
 801b7d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b7d4:	b01b      	add	sp, #108	; 0x6c
 801b7d6:	bd30      	pop	{r4, r5, pc}
 801b7d8:	f44f 7302 	mov.w	r3, #520	; 0x208
 801b7dc:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b7e0:	bf14      	ite	ne
 801b7e2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801b7e6:	4623      	moveq	r3, r4
 801b7e8:	9302      	str	r3, [sp, #8]
 801b7ea:	9305      	str	r3, [sp, #20]
 801b7ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b7f0:	9100      	str	r1, [sp, #0]
 801b7f2:	9104      	str	r1, [sp, #16]
 801b7f4:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b7f8:	4669      	mov	r1, sp
 801b7fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801b7fc:	f000 fa5a 	bl	801bcb4 <_svfiprintf_r>
 801b800:	1c43      	adds	r3, r0, #1
 801b802:	bfbc      	itt	lt
 801b804:	238b      	movlt	r3, #139	; 0x8b
 801b806:	602b      	strlt	r3, [r5, #0]
 801b808:	2c00      	cmp	r4, #0
 801b80a:	d0e3      	beq.n	801b7d4 <_vsniprintf_r+0x16>
 801b80c:	9b00      	ldr	r3, [sp, #0]
 801b80e:	2200      	movs	r2, #0
 801b810:	701a      	strb	r2, [r3, #0]
 801b812:	e7df      	b.n	801b7d4 <_vsniprintf_r+0x16>

0801b814 <vsniprintf>:
 801b814:	b507      	push	{r0, r1, r2, lr}
 801b816:	9300      	str	r3, [sp, #0]
 801b818:	4613      	mov	r3, r2
 801b81a:	460a      	mov	r2, r1
 801b81c:	4601      	mov	r1, r0
 801b81e:	4803      	ldr	r0, [pc, #12]	; (801b82c <vsniprintf+0x18>)
 801b820:	6800      	ldr	r0, [r0, #0]
 801b822:	f7ff ffcc 	bl	801b7be <_vsniprintf_r>
 801b826:	b003      	add	sp, #12
 801b828:	f85d fb04 	ldr.w	pc, [sp], #4
 801b82c:	20001fe8 	.word	0x20001fe8

0801b830 <memcmp>:
 801b830:	b510      	push	{r4, lr}
 801b832:	3901      	subs	r1, #1
 801b834:	4402      	add	r2, r0
 801b836:	4290      	cmp	r0, r2
 801b838:	d101      	bne.n	801b83e <memcmp+0xe>
 801b83a:	2000      	movs	r0, #0
 801b83c:	e005      	b.n	801b84a <memcmp+0x1a>
 801b83e:	7803      	ldrb	r3, [r0, #0]
 801b840:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b844:	42a3      	cmp	r3, r4
 801b846:	d001      	beq.n	801b84c <memcmp+0x1c>
 801b848:	1b18      	subs	r0, r3, r4
 801b84a:	bd10      	pop	{r4, pc}
 801b84c:	3001      	adds	r0, #1
 801b84e:	e7f2      	b.n	801b836 <memcmp+0x6>

0801b850 <memmove>:
 801b850:	4288      	cmp	r0, r1
 801b852:	b510      	push	{r4, lr}
 801b854:	eb01 0402 	add.w	r4, r1, r2
 801b858:	d902      	bls.n	801b860 <memmove+0x10>
 801b85a:	4284      	cmp	r4, r0
 801b85c:	4623      	mov	r3, r4
 801b85e:	d807      	bhi.n	801b870 <memmove+0x20>
 801b860:	1e43      	subs	r3, r0, #1
 801b862:	42a1      	cmp	r1, r4
 801b864:	d008      	beq.n	801b878 <memmove+0x28>
 801b866:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b86a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b86e:	e7f8      	b.n	801b862 <memmove+0x12>
 801b870:	4402      	add	r2, r0
 801b872:	4601      	mov	r1, r0
 801b874:	428a      	cmp	r2, r1
 801b876:	d100      	bne.n	801b87a <memmove+0x2a>
 801b878:	bd10      	pop	{r4, pc}
 801b87a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b87e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b882:	e7f7      	b.n	801b874 <memmove+0x24>

0801b884 <memset>:
 801b884:	4402      	add	r2, r0
 801b886:	4603      	mov	r3, r0
 801b888:	4293      	cmp	r3, r2
 801b88a:	d100      	bne.n	801b88e <memset+0xa>
 801b88c:	4770      	bx	lr
 801b88e:	f803 1b01 	strb.w	r1, [r3], #1
 801b892:	e7f9      	b.n	801b888 <memset+0x4>

0801b894 <strchr>:
 801b894:	b2c9      	uxtb	r1, r1
 801b896:	4603      	mov	r3, r0
 801b898:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b89c:	b11a      	cbz	r2, 801b8a6 <strchr+0x12>
 801b89e:	428a      	cmp	r2, r1
 801b8a0:	d1f9      	bne.n	801b896 <strchr+0x2>
 801b8a2:	4618      	mov	r0, r3
 801b8a4:	4770      	bx	lr
 801b8a6:	2900      	cmp	r1, #0
 801b8a8:	bf18      	it	ne
 801b8aa:	2300      	movne	r3, #0
 801b8ac:	e7f9      	b.n	801b8a2 <strchr+0xe>

0801b8ae <strncmp>:
 801b8ae:	b510      	push	{r4, lr}
 801b8b0:	b16a      	cbz	r2, 801b8ce <strncmp+0x20>
 801b8b2:	3901      	subs	r1, #1
 801b8b4:	1884      	adds	r4, r0, r2
 801b8b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b8ba:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801b8be:	429a      	cmp	r2, r3
 801b8c0:	d103      	bne.n	801b8ca <strncmp+0x1c>
 801b8c2:	42a0      	cmp	r0, r4
 801b8c4:	d001      	beq.n	801b8ca <strncmp+0x1c>
 801b8c6:	2a00      	cmp	r2, #0
 801b8c8:	d1f5      	bne.n	801b8b6 <strncmp+0x8>
 801b8ca:	1ad0      	subs	r0, r2, r3
 801b8cc:	bd10      	pop	{r4, pc}
 801b8ce:	4610      	mov	r0, r2
 801b8d0:	e7fc      	b.n	801b8cc <strncmp+0x1e>

0801b8d2 <strncpy>:
 801b8d2:	b510      	push	{r4, lr}
 801b8d4:	3901      	subs	r1, #1
 801b8d6:	4603      	mov	r3, r0
 801b8d8:	b132      	cbz	r2, 801b8e8 <strncpy+0x16>
 801b8da:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b8de:	f803 4b01 	strb.w	r4, [r3], #1
 801b8e2:	3a01      	subs	r2, #1
 801b8e4:	2c00      	cmp	r4, #0
 801b8e6:	d1f7      	bne.n	801b8d8 <strncpy+0x6>
 801b8e8:	441a      	add	r2, r3
 801b8ea:	2100      	movs	r1, #0
 801b8ec:	4293      	cmp	r3, r2
 801b8ee:	d100      	bne.n	801b8f2 <strncpy+0x20>
 801b8f0:	bd10      	pop	{r4, pc}
 801b8f2:	f803 1b01 	strb.w	r1, [r3], #1
 801b8f6:	e7f9      	b.n	801b8ec <strncpy+0x1a>

0801b8f8 <strstr>:
 801b8f8:	780a      	ldrb	r2, [r1, #0]
 801b8fa:	b570      	push	{r4, r5, r6, lr}
 801b8fc:	b96a      	cbnz	r2, 801b91a <strstr+0x22>
 801b8fe:	bd70      	pop	{r4, r5, r6, pc}
 801b900:	429a      	cmp	r2, r3
 801b902:	d109      	bne.n	801b918 <strstr+0x20>
 801b904:	460c      	mov	r4, r1
 801b906:	4605      	mov	r5, r0
 801b908:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801b90c:	2b00      	cmp	r3, #0
 801b90e:	d0f6      	beq.n	801b8fe <strstr+0x6>
 801b910:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801b914:	429e      	cmp	r6, r3
 801b916:	d0f7      	beq.n	801b908 <strstr+0x10>
 801b918:	3001      	adds	r0, #1
 801b91a:	7803      	ldrb	r3, [r0, #0]
 801b91c:	2b00      	cmp	r3, #0
 801b91e:	d1ef      	bne.n	801b900 <strstr+0x8>
 801b920:	4618      	mov	r0, r3
 801b922:	e7ec      	b.n	801b8fe <strstr+0x6>

0801b924 <_close_r>:
 801b924:	b538      	push	{r3, r4, r5, lr}
 801b926:	4d06      	ldr	r5, [pc, #24]	; (801b940 <_close_r+0x1c>)
 801b928:	2300      	movs	r3, #0
 801b92a:	4604      	mov	r4, r0
 801b92c:	4608      	mov	r0, r1
 801b92e:	602b      	str	r3, [r5, #0]
 801b930:	f7e7 f831 	bl	8002996 <_close>
 801b934:	1c43      	adds	r3, r0, #1
 801b936:	d102      	bne.n	801b93e <_close_r+0x1a>
 801b938:	682b      	ldr	r3, [r5, #0]
 801b93a:	b103      	cbz	r3, 801b93e <_close_r+0x1a>
 801b93c:	6023      	str	r3, [r4, #0]
 801b93e:	bd38      	pop	{r3, r4, r5, pc}
 801b940:	20010a3c 	.word	0x20010a3c

0801b944 <_reclaim_reent>:
 801b944:	4b29      	ldr	r3, [pc, #164]	; (801b9ec <_reclaim_reent+0xa8>)
 801b946:	681b      	ldr	r3, [r3, #0]
 801b948:	4283      	cmp	r3, r0
 801b94a:	b570      	push	{r4, r5, r6, lr}
 801b94c:	4604      	mov	r4, r0
 801b94e:	d04b      	beq.n	801b9e8 <_reclaim_reent+0xa4>
 801b950:	69c3      	ldr	r3, [r0, #28]
 801b952:	b143      	cbz	r3, 801b966 <_reclaim_reent+0x22>
 801b954:	68db      	ldr	r3, [r3, #12]
 801b956:	2b00      	cmp	r3, #0
 801b958:	d144      	bne.n	801b9e4 <_reclaim_reent+0xa0>
 801b95a:	69e3      	ldr	r3, [r4, #28]
 801b95c:	6819      	ldr	r1, [r3, #0]
 801b95e:	b111      	cbz	r1, 801b966 <_reclaim_reent+0x22>
 801b960:	4620      	mov	r0, r4
 801b962:	f000 f8f9 	bl	801bb58 <_free_r>
 801b966:	6961      	ldr	r1, [r4, #20]
 801b968:	b111      	cbz	r1, 801b970 <_reclaim_reent+0x2c>
 801b96a:	4620      	mov	r0, r4
 801b96c:	f000 f8f4 	bl	801bb58 <_free_r>
 801b970:	69e1      	ldr	r1, [r4, #28]
 801b972:	b111      	cbz	r1, 801b97a <_reclaim_reent+0x36>
 801b974:	4620      	mov	r0, r4
 801b976:	f000 f8ef 	bl	801bb58 <_free_r>
 801b97a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801b97c:	b111      	cbz	r1, 801b984 <_reclaim_reent+0x40>
 801b97e:	4620      	mov	r0, r4
 801b980:	f000 f8ea 	bl	801bb58 <_free_r>
 801b984:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b986:	b111      	cbz	r1, 801b98e <_reclaim_reent+0x4a>
 801b988:	4620      	mov	r0, r4
 801b98a:	f000 f8e5 	bl	801bb58 <_free_r>
 801b98e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801b990:	b111      	cbz	r1, 801b998 <_reclaim_reent+0x54>
 801b992:	4620      	mov	r0, r4
 801b994:	f000 f8e0 	bl	801bb58 <_free_r>
 801b998:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801b99a:	b111      	cbz	r1, 801b9a2 <_reclaim_reent+0x5e>
 801b99c:	4620      	mov	r0, r4
 801b99e:	f000 f8db 	bl	801bb58 <_free_r>
 801b9a2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801b9a4:	b111      	cbz	r1, 801b9ac <_reclaim_reent+0x68>
 801b9a6:	4620      	mov	r0, r4
 801b9a8:	f000 f8d6 	bl	801bb58 <_free_r>
 801b9ac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801b9ae:	b111      	cbz	r1, 801b9b6 <_reclaim_reent+0x72>
 801b9b0:	4620      	mov	r0, r4
 801b9b2:	f000 f8d1 	bl	801bb58 <_free_r>
 801b9b6:	6a23      	ldr	r3, [r4, #32]
 801b9b8:	b1b3      	cbz	r3, 801b9e8 <_reclaim_reent+0xa4>
 801b9ba:	4620      	mov	r0, r4
 801b9bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b9c0:	4718      	bx	r3
 801b9c2:	5949      	ldr	r1, [r1, r5]
 801b9c4:	b941      	cbnz	r1, 801b9d8 <_reclaim_reent+0x94>
 801b9c6:	3504      	adds	r5, #4
 801b9c8:	69e3      	ldr	r3, [r4, #28]
 801b9ca:	2d80      	cmp	r5, #128	; 0x80
 801b9cc:	68d9      	ldr	r1, [r3, #12]
 801b9ce:	d1f8      	bne.n	801b9c2 <_reclaim_reent+0x7e>
 801b9d0:	4620      	mov	r0, r4
 801b9d2:	f000 f8c1 	bl	801bb58 <_free_r>
 801b9d6:	e7c0      	b.n	801b95a <_reclaim_reent+0x16>
 801b9d8:	680e      	ldr	r6, [r1, #0]
 801b9da:	4620      	mov	r0, r4
 801b9dc:	f000 f8bc 	bl	801bb58 <_free_r>
 801b9e0:	4631      	mov	r1, r6
 801b9e2:	e7ef      	b.n	801b9c4 <_reclaim_reent+0x80>
 801b9e4:	2500      	movs	r5, #0
 801b9e6:	e7ef      	b.n	801b9c8 <_reclaim_reent+0x84>
 801b9e8:	bd70      	pop	{r4, r5, r6, pc}
 801b9ea:	bf00      	nop
 801b9ec:	20001fe8 	.word	0x20001fe8

0801b9f0 <_lseek_r>:
 801b9f0:	b538      	push	{r3, r4, r5, lr}
 801b9f2:	4d07      	ldr	r5, [pc, #28]	; (801ba10 <_lseek_r+0x20>)
 801b9f4:	4604      	mov	r4, r0
 801b9f6:	4608      	mov	r0, r1
 801b9f8:	4611      	mov	r1, r2
 801b9fa:	2200      	movs	r2, #0
 801b9fc:	602a      	str	r2, [r5, #0]
 801b9fe:	461a      	mov	r2, r3
 801ba00:	f7e6 fff0 	bl	80029e4 <_lseek>
 801ba04:	1c43      	adds	r3, r0, #1
 801ba06:	d102      	bne.n	801ba0e <_lseek_r+0x1e>
 801ba08:	682b      	ldr	r3, [r5, #0]
 801ba0a:	b103      	cbz	r3, 801ba0e <_lseek_r+0x1e>
 801ba0c:	6023      	str	r3, [r4, #0]
 801ba0e:	bd38      	pop	{r3, r4, r5, pc}
 801ba10:	20010a3c 	.word	0x20010a3c

0801ba14 <_read_r>:
 801ba14:	b538      	push	{r3, r4, r5, lr}
 801ba16:	4d07      	ldr	r5, [pc, #28]	; (801ba34 <_read_r+0x20>)
 801ba18:	4604      	mov	r4, r0
 801ba1a:	4608      	mov	r0, r1
 801ba1c:	4611      	mov	r1, r2
 801ba1e:	2200      	movs	r2, #0
 801ba20:	602a      	str	r2, [r5, #0]
 801ba22:	461a      	mov	r2, r3
 801ba24:	f7e6 ff7e 	bl	8002924 <_read>
 801ba28:	1c43      	adds	r3, r0, #1
 801ba2a:	d102      	bne.n	801ba32 <_read_r+0x1e>
 801ba2c:	682b      	ldr	r3, [r5, #0]
 801ba2e:	b103      	cbz	r3, 801ba32 <_read_r+0x1e>
 801ba30:	6023      	str	r3, [r4, #0]
 801ba32:	bd38      	pop	{r3, r4, r5, pc}
 801ba34:	20010a3c 	.word	0x20010a3c

0801ba38 <_sbrk_r>:
 801ba38:	b538      	push	{r3, r4, r5, lr}
 801ba3a:	4d06      	ldr	r5, [pc, #24]	; (801ba54 <_sbrk_r+0x1c>)
 801ba3c:	2300      	movs	r3, #0
 801ba3e:	4604      	mov	r4, r0
 801ba40:	4608      	mov	r0, r1
 801ba42:	602b      	str	r3, [r5, #0]
 801ba44:	f7e6 ffdc 	bl	8002a00 <_sbrk>
 801ba48:	1c43      	adds	r3, r0, #1
 801ba4a:	d102      	bne.n	801ba52 <_sbrk_r+0x1a>
 801ba4c:	682b      	ldr	r3, [r5, #0]
 801ba4e:	b103      	cbz	r3, 801ba52 <_sbrk_r+0x1a>
 801ba50:	6023      	str	r3, [r4, #0]
 801ba52:	bd38      	pop	{r3, r4, r5, pc}
 801ba54:	20010a3c 	.word	0x20010a3c

0801ba58 <_write_r>:
 801ba58:	b538      	push	{r3, r4, r5, lr}
 801ba5a:	4d07      	ldr	r5, [pc, #28]	; (801ba78 <_write_r+0x20>)
 801ba5c:	4604      	mov	r4, r0
 801ba5e:	4608      	mov	r0, r1
 801ba60:	4611      	mov	r1, r2
 801ba62:	2200      	movs	r2, #0
 801ba64:	602a      	str	r2, [r5, #0]
 801ba66:	461a      	mov	r2, r3
 801ba68:	f7e6 ff79 	bl	800295e <_write>
 801ba6c:	1c43      	adds	r3, r0, #1
 801ba6e:	d102      	bne.n	801ba76 <_write_r+0x1e>
 801ba70:	682b      	ldr	r3, [r5, #0]
 801ba72:	b103      	cbz	r3, 801ba76 <_write_r+0x1e>
 801ba74:	6023      	str	r3, [r4, #0]
 801ba76:	bd38      	pop	{r3, r4, r5, pc}
 801ba78:	20010a3c 	.word	0x20010a3c

0801ba7c <__errno>:
 801ba7c:	4b01      	ldr	r3, [pc, #4]	; (801ba84 <__errno+0x8>)
 801ba7e:	6818      	ldr	r0, [r3, #0]
 801ba80:	4770      	bx	lr
 801ba82:	bf00      	nop
 801ba84:	20001fe8 	.word	0x20001fe8

0801ba88 <__libc_init_array>:
 801ba88:	b570      	push	{r4, r5, r6, lr}
 801ba8a:	4d0d      	ldr	r5, [pc, #52]	; (801bac0 <__libc_init_array+0x38>)
 801ba8c:	4c0d      	ldr	r4, [pc, #52]	; (801bac4 <__libc_init_array+0x3c>)
 801ba8e:	1b64      	subs	r4, r4, r5
 801ba90:	10a4      	asrs	r4, r4, #2
 801ba92:	2600      	movs	r6, #0
 801ba94:	42a6      	cmp	r6, r4
 801ba96:	d109      	bne.n	801baac <__libc_init_array+0x24>
 801ba98:	4d0b      	ldr	r5, [pc, #44]	; (801bac8 <__libc_init_array+0x40>)
 801ba9a:	4c0c      	ldr	r4, [pc, #48]	; (801bacc <__libc_init_array+0x44>)
 801ba9c:	f000 ff00 	bl	801c8a0 <_init>
 801baa0:	1b64      	subs	r4, r4, r5
 801baa2:	10a4      	asrs	r4, r4, #2
 801baa4:	2600      	movs	r6, #0
 801baa6:	42a6      	cmp	r6, r4
 801baa8:	d105      	bne.n	801bab6 <__libc_init_array+0x2e>
 801baaa:	bd70      	pop	{r4, r5, r6, pc}
 801baac:	f855 3b04 	ldr.w	r3, [r5], #4
 801bab0:	4798      	blx	r3
 801bab2:	3601      	adds	r6, #1
 801bab4:	e7ee      	b.n	801ba94 <__libc_init_array+0xc>
 801bab6:	f855 3b04 	ldr.w	r3, [r5], #4
 801baba:	4798      	blx	r3
 801babc:	3601      	adds	r6, #1
 801babe:	e7f2      	b.n	801baa6 <__libc_init_array+0x1e>
 801bac0:	0801e6e0 	.word	0x0801e6e0
 801bac4:	0801e6e0 	.word	0x0801e6e0
 801bac8:	0801e6e0 	.word	0x0801e6e0
 801bacc:	0801e6f4 	.word	0x0801e6f4

0801bad0 <__retarget_lock_init_recursive>:
 801bad0:	4770      	bx	lr

0801bad2 <__retarget_lock_acquire_recursive>:
 801bad2:	4770      	bx	lr

0801bad4 <__retarget_lock_release_recursive>:
 801bad4:	4770      	bx	lr

0801bad6 <strcpy>:
 801bad6:	4603      	mov	r3, r0
 801bad8:	f811 2b01 	ldrb.w	r2, [r1], #1
 801badc:	f803 2b01 	strb.w	r2, [r3], #1
 801bae0:	2a00      	cmp	r2, #0
 801bae2:	d1f9      	bne.n	801bad8 <strcpy+0x2>
 801bae4:	4770      	bx	lr

0801bae6 <memcpy>:
 801bae6:	440a      	add	r2, r1
 801bae8:	4291      	cmp	r1, r2
 801baea:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801baee:	d100      	bne.n	801baf2 <memcpy+0xc>
 801baf0:	4770      	bx	lr
 801baf2:	b510      	push	{r4, lr}
 801baf4:	f811 4b01 	ldrb.w	r4, [r1], #1
 801baf8:	f803 4f01 	strb.w	r4, [r3, #1]!
 801bafc:	4291      	cmp	r1, r2
 801bafe:	d1f9      	bne.n	801baf4 <memcpy+0xe>
 801bb00:	bd10      	pop	{r4, pc}
	...

0801bb04 <__assert_func>:
 801bb04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801bb06:	4614      	mov	r4, r2
 801bb08:	461a      	mov	r2, r3
 801bb0a:	4b09      	ldr	r3, [pc, #36]	; (801bb30 <__assert_func+0x2c>)
 801bb0c:	681b      	ldr	r3, [r3, #0]
 801bb0e:	4605      	mov	r5, r0
 801bb10:	68d8      	ldr	r0, [r3, #12]
 801bb12:	b14c      	cbz	r4, 801bb28 <__assert_func+0x24>
 801bb14:	4b07      	ldr	r3, [pc, #28]	; (801bb34 <__assert_func+0x30>)
 801bb16:	9100      	str	r1, [sp, #0]
 801bb18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801bb1c:	4906      	ldr	r1, [pc, #24]	; (801bb38 <__assert_func+0x34>)
 801bb1e:	462b      	mov	r3, r5
 801bb20:	f000 fc04 	bl	801c32c <fiprintf>
 801bb24:	f000 fc14 	bl	801c350 <abort>
 801bb28:	4b04      	ldr	r3, [pc, #16]	; (801bb3c <__assert_func+0x38>)
 801bb2a:	461c      	mov	r4, r3
 801bb2c:	e7f3      	b.n	801bb16 <__assert_func+0x12>
 801bb2e:	bf00      	nop
 801bb30:	20001fe8 	.word	0x20001fe8
 801bb34:	0801e668 	.word	0x0801e668
 801bb38:	0801e675 	.word	0x0801e675
 801bb3c:	0801e6a3 	.word	0x0801e6a3

0801bb40 <__env_lock>:
 801bb40:	4801      	ldr	r0, [pc, #4]	; (801bb48 <__env_lock+0x8>)
 801bb42:	f7ff bfc6 	b.w	801bad2 <__retarget_lock_acquire_recursive>
 801bb46:	bf00      	nop
 801bb48:	20010a40 	.word	0x20010a40

0801bb4c <__env_unlock>:
 801bb4c:	4801      	ldr	r0, [pc, #4]	; (801bb54 <__env_unlock+0x8>)
 801bb4e:	f7ff bfc1 	b.w	801bad4 <__retarget_lock_release_recursive>
 801bb52:	bf00      	nop
 801bb54:	20010a40 	.word	0x20010a40

0801bb58 <_free_r>:
 801bb58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bb5a:	2900      	cmp	r1, #0
 801bb5c:	d044      	beq.n	801bbe8 <_free_r+0x90>
 801bb5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bb62:	9001      	str	r0, [sp, #4]
 801bb64:	2b00      	cmp	r3, #0
 801bb66:	f1a1 0404 	sub.w	r4, r1, #4
 801bb6a:	bfb8      	it	lt
 801bb6c:	18e4      	addlt	r4, r4, r3
 801bb6e:	f7ff fbc1 	bl	801b2f4 <__malloc_lock>
 801bb72:	4a1e      	ldr	r2, [pc, #120]	; (801bbec <_free_r+0x94>)
 801bb74:	9801      	ldr	r0, [sp, #4]
 801bb76:	6813      	ldr	r3, [r2, #0]
 801bb78:	b933      	cbnz	r3, 801bb88 <_free_r+0x30>
 801bb7a:	6063      	str	r3, [r4, #4]
 801bb7c:	6014      	str	r4, [r2, #0]
 801bb7e:	b003      	add	sp, #12
 801bb80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801bb84:	f7ff bbbc 	b.w	801b300 <__malloc_unlock>
 801bb88:	42a3      	cmp	r3, r4
 801bb8a:	d908      	bls.n	801bb9e <_free_r+0x46>
 801bb8c:	6825      	ldr	r5, [r4, #0]
 801bb8e:	1961      	adds	r1, r4, r5
 801bb90:	428b      	cmp	r3, r1
 801bb92:	bf01      	itttt	eq
 801bb94:	6819      	ldreq	r1, [r3, #0]
 801bb96:	685b      	ldreq	r3, [r3, #4]
 801bb98:	1949      	addeq	r1, r1, r5
 801bb9a:	6021      	streq	r1, [r4, #0]
 801bb9c:	e7ed      	b.n	801bb7a <_free_r+0x22>
 801bb9e:	461a      	mov	r2, r3
 801bba0:	685b      	ldr	r3, [r3, #4]
 801bba2:	b10b      	cbz	r3, 801bba8 <_free_r+0x50>
 801bba4:	42a3      	cmp	r3, r4
 801bba6:	d9fa      	bls.n	801bb9e <_free_r+0x46>
 801bba8:	6811      	ldr	r1, [r2, #0]
 801bbaa:	1855      	adds	r5, r2, r1
 801bbac:	42a5      	cmp	r5, r4
 801bbae:	d10b      	bne.n	801bbc8 <_free_r+0x70>
 801bbb0:	6824      	ldr	r4, [r4, #0]
 801bbb2:	4421      	add	r1, r4
 801bbb4:	1854      	adds	r4, r2, r1
 801bbb6:	42a3      	cmp	r3, r4
 801bbb8:	6011      	str	r1, [r2, #0]
 801bbba:	d1e0      	bne.n	801bb7e <_free_r+0x26>
 801bbbc:	681c      	ldr	r4, [r3, #0]
 801bbbe:	685b      	ldr	r3, [r3, #4]
 801bbc0:	6053      	str	r3, [r2, #4]
 801bbc2:	440c      	add	r4, r1
 801bbc4:	6014      	str	r4, [r2, #0]
 801bbc6:	e7da      	b.n	801bb7e <_free_r+0x26>
 801bbc8:	d902      	bls.n	801bbd0 <_free_r+0x78>
 801bbca:	230c      	movs	r3, #12
 801bbcc:	6003      	str	r3, [r0, #0]
 801bbce:	e7d6      	b.n	801bb7e <_free_r+0x26>
 801bbd0:	6825      	ldr	r5, [r4, #0]
 801bbd2:	1961      	adds	r1, r4, r5
 801bbd4:	428b      	cmp	r3, r1
 801bbd6:	bf04      	itt	eq
 801bbd8:	6819      	ldreq	r1, [r3, #0]
 801bbda:	685b      	ldreq	r3, [r3, #4]
 801bbdc:	6063      	str	r3, [r4, #4]
 801bbde:	bf04      	itt	eq
 801bbe0:	1949      	addeq	r1, r1, r5
 801bbe2:	6021      	streq	r1, [r4, #0]
 801bbe4:	6054      	str	r4, [r2, #4]
 801bbe6:	e7ca      	b.n	801bb7e <_free_r+0x26>
 801bbe8:	b003      	add	sp, #12
 801bbea:	bd30      	pop	{r4, r5, pc}
 801bbec:	200108f8 	.word	0x200108f8

0801bbf0 <_malloc_usable_size_r>:
 801bbf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bbf4:	1f18      	subs	r0, r3, #4
 801bbf6:	2b00      	cmp	r3, #0
 801bbf8:	bfbc      	itt	lt
 801bbfa:	580b      	ldrlt	r3, [r1, r0]
 801bbfc:	18c0      	addlt	r0, r0, r3
 801bbfe:	4770      	bx	lr

0801bc00 <__ssputs_r>:
 801bc00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bc04:	688e      	ldr	r6, [r1, #8]
 801bc06:	461f      	mov	r7, r3
 801bc08:	42be      	cmp	r6, r7
 801bc0a:	680b      	ldr	r3, [r1, #0]
 801bc0c:	4682      	mov	sl, r0
 801bc0e:	460c      	mov	r4, r1
 801bc10:	4690      	mov	r8, r2
 801bc12:	d82c      	bhi.n	801bc6e <__ssputs_r+0x6e>
 801bc14:	898a      	ldrh	r2, [r1, #12]
 801bc16:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801bc1a:	d026      	beq.n	801bc6a <__ssputs_r+0x6a>
 801bc1c:	6965      	ldr	r5, [r4, #20]
 801bc1e:	6909      	ldr	r1, [r1, #16]
 801bc20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bc24:	eba3 0901 	sub.w	r9, r3, r1
 801bc28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801bc2c:	1c7b      	adds	r3, r7, #1
 801bc2e:	444b      	add	r3, r9
 801bc30:	106d      	asrs	r5, r5, #1
 801bc32:	429d      	cmp	r5, r3
 801bc34:	bf38      	it	cc
 801bc36:	461d      	movcc	r5, r3
 801bc38:	0553      	lsls	r3, r2, #21
 801bc3a:	d527      	bpl.n	801bc8c <__ssputs_r+0x8c>
 801bc3c:	4629      	mov	r1, r5
 801bc3e:	f7ff fad9 	bl	801b1f4 <_malloc_r>
 801bc42:	4606      	mov	r6, r0
 801bc44:	b360      	cbz	r0, 801bca0 <__ssputs_r+0xa0>
 801bc46:	6921      	ldr	r1, [r4, #16]
 801bc48:	464a      	mov	r2, r9
 801bc4a:	f7ff ff4c 	bl	801bae6 <memcpy>
 801bc4e:	89a3      	ldrh	r3, [r4, #12]
 801bc50:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801bc54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bc58:	81a3      	strh	r3, [r4, #12]
 801bc5a:	6126      	str	r6, [r4, #16]
 801bc5c:	6165      	str	r5, [r4, #20]
 801bc5e:	444e      	add	r6, r9
 801bc60:	eba5 0509 	sub.w	r5, r5, r9
 801bc64:	6026      	str	r6, [r4, #0]
 801bc66:	60a5      	str	r5, [r4, #8]
 801bc68:	463e      	mov	r6, r7
 801bc6a:	42be      	cmp	r6, r7
 801bc6c:	d900      	bls.n	801bc70 <__ssputs_r+0x70>
 801bc6e:	463e      	mov	r6, r7
 801bc70:	6820      	ldr	r0, [r4, #0]
 801bc72:	4632      	mov	r2, r6
 801bc74:	4641      	mov	r1, r8
 801bc76:	f7ff fdeb 	bl	801b850 <memmove>
 801bc7a:	68a3      	ldr	r3, [r4, #8]
 801bc7c:	1b9b      	subs	r3, r3, r6
 801bc7e:	60a3      	str	r3, [r4, #8]
 801bc80:	6823      	ldr	r3, [r4, #0]
 801bc82:	4433      	add	r3, r6
 801bc84:	6023      	str	r3, [r4, #0]
 801bc86:	2000      	movs	r0, #0
 801bc88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bc8c:	462a      	mov	r2, r5
 801bc8e:	f7ff fbb1 	bl	801b3f4 <_realloc_r>
 801bc92:	4606      	mov	r6, r0
 801bc94:	2800      	cmp	r0, #0
 801bc96:	d1e0      	bne.n	801bc5a <__ssputs_r+0x5a>
 801bc98:	6921      	ldr	r1, [r4, #16]
 801bc9a:	4650      	mov	r0, sl
 801bc9c:	f7ff ff5c 	bl	801bb58 <_free_r>
 801bca0:	230c      	movs	r3, #12
 801bca2:	f8ca 3000 	str.w	r3, [sl]
 801bca6:	89a3      	ldrh	r3, [r4, #12]
 801bca8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bcac:	81a3      	strh	r3, [r4, #12]
 801bcae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bcb2:	e7e9      	b.n	801bc88 <__ssputs_r+0x88>

0801bcb4 <_svfiprintf_r>:
 801bcb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bcb8:	4698      	mov	r8, r3
 801bcba:	898b      	ldrh	r3, [r1, #12]
 801bcbc:	061b      	lsls	r3, r3, #24
 801bcbe:	b09d      	sub	sp, #116	; 0x74
 801bcc0:	4607      	mov	r7, r0
 801bcc2:	460d      	mov	r5, r1
 801bcc4:	4614      	mov	r4, r2
 801bcc6:	d50e      	bpl.n	801bce6 <_svfiprintf_r+0x32>
 801bcc8:	690b      	ldr	r3, [r1, #16]
 801bcca:	b963      	cbnz	r3, 801bce6 <_svfiprintf_r+0x32>
 801bccc:	2140      	movs	r1, #64	; 0x40
 801bcce:	f7ff fa91 	bl	801b1f4 <_malloc_r>
 801bcd2:	6028      	str	r0, [r5, #0]
 801bcd4:	6128      	str	r0, [r5, #16]
 801bcd6:	b920      	cbnz	r0, 801bce2 <_svfiprintf_r+0x2e>
 801bcd8:	230c      	movs	r3, #12
 801bcda:	603b      	str	r3, [r7, #0]
 801bcdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bce0:	e0d0      	b.n	801be84 <_svfiprintf_r+0x1d0>
 801bce2:	2340      	movs	r3, #64	; 0x40
 801bce4:	616b      	str	r3, [r5, #20]
 801bce6:	2300      	movs	r3, #0
 801bce8:	9309      	str	r3, [sp, #36]	; 0x24
 801bcea:	2320      	movs	r3, #32
 801bcec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801bcf0:	f8cd 800c 	str.w	r8, [sp, #12]
 801bcf4:	2330      	movs	r3, #48	; 0x30
 801bcf6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801be9c <_svfiprintf_r+0x1e8>
 801bcfa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801bcfe:	f04f 0901 	mov.w	r9, #1
 801bd02:	4623      	mov	r3, r4
 801bd04:	469a      	mov	sl, r3
 801bd06:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bd0a:	b10a      	cbz	r2, 801bd10 <_svfiprintf_r+0x5c>
 801bd0c:	2a25      	cmp	r2, #37	; 0x25
 801bd0e:	d1f9      	bne.n	801bd04 <_svfiprintf_r+0x50>
 801bd10:	ebba 0b04 	subs.w	fp, sl, r4
 801bd14:	d00b      	beq.n	801bd2e <_svfiprintf_r+0x7a>
 801bd16:	465b      	mov	r3, fp
 801bd18:	4622      	mov	r2, r4
 801bd1a:	4629      	mov	r1, r5
 801bd1c:	4638      	mov	r0, r7
 801bd1e:	f7ff ff6f 	bl	801bc00 <__ssputs_r>
 801bd22:	3001      	adds	r0, #1
 801bd24:	f000 80a9 	beq.w	801be7a <_svfiprintf_r+0x1c6>
 801bd28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bd2a:	445a      	add	r2, fp
 801bd2c:	9209      	str	r2, [sp, #36]	; 0x24
 801bd2e:	f89a 3000 	ldrb.w	r3, [sl]
 801bd32:	2b00      	cmp	r3, #0
 801bd34:	f000 80a1 	beq.w	801be7a <_svfiprintf_r+0x1c6>
 801bd38:	2300      	movs	r3, #0
 801bd3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801bd3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bd42:	f10a 0a01 	add.w	sl, sl, #1
 801bd46:	9304      	str	r3, [sp, #16]
 801bd48:	9307      	str	r3, [sp, #28]
 801bd4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801bd4e:	931a      	str	r3, [sp, #104]	; 0x68
 801bd50:	4654      	mov	r4, sl
 801bd52:	2205      	movs	r2, #5
 801bd54:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bd58:	4850      	ldr	r0, [pc, #320]	; (801be9c <_svfiprintf_r+0x1e8>)
 801bd5a:	f7e4 fa81 	bl	8000260 <memchr>
 801bd5e:	9a04      	ldr	r2, [sp, #16]
 801bd60:	b9d8      	cbnz	r0, 801bd9a <_svfiprintf_r+0xe6>
 801bd62:	06d0      	lsls	r0, r2, #27
 801bd64:	bf44      	itt	mi
 801bd66:	2320      	movmi	r3, #32
 801bd68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bd6c:	0711      	lsls	r1, r2, #28
 801bd6e:	bf44      	itt	mi
 801bd70:	232b      	movmi	r3, #43	; 0x2b
 801bd72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bd76:	f89a 3000 	ldrb.w	r3, [sl]
 801bd7a:	2b2a      	cmp	r3, #42	; 0x2a
 801bd7c:	d015      	beq.n	801bdaa <_svfiprintf_r+0xf6>
 801bd7e:	9a07      	ldr	r2, [sp, #28]
 801bd80:	4654      	mov	r4, sl
 801bd82:	2000      	movs	r0, #0
 801bd84:	f04f 0c0a 	mov.w	ip, #10
 801bd88:	4621      	mov	r1, r4
 801bd8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bd8e:	3b30      	subs	r3, #48	; 0x30
 801bd90:	2b09      	cmp	r3, #9
 801bd92:	d94d      	bls.n	801be30 <_svfiprintf_r+0x17c>
 801bd94:	b1b0      	cbz	r0, 801bdc4 <_svfiprintf_r+0x110>
 801bd96:	9207      	str	r2, [sp, #28]
 801bd98:	e014      	b.n	801bdc4 <_svfiprintf_r+0x110>
 801bd9a:	eba0 0308 	sub.w	r3, r0, r8
 801bd9e:	fa09 f303 	lsl.w	r3, r9, r3
 801bda2:	4313      	orrs	r3, r2
 801bda4:	9304      	str	r3, [sp, #16]
 801bda6:	46a2      	mov	sl, r4
 801bda8:	e7d2      	b.n	801bd50 <_svfiprintf_r+0x9c>
 801bdaa:	9b03      	ldr	r3, [sp, #12]
 801bdac:	1d19      	adds	r1, r3, #4
 801bdae:	681b      	ldr	r3, [r3, #0]
 801bdb0:	9103      	str	r1, [sp, #12]
 801bdb2:	2b00      	cmp	r3, #0
 801bdb4:	bfbb      	ittet	lt
 801bdb6:	425b      	neglt	r3, r3
 801bdb8:	f042 0202 	orrlt.w	r2, r2, #2
 801bdbc:	9307      	strge	r3, [sp, #28]
 801bdbe:	9307      	strlt	r3, [sp, #28]
 801bdc0:	bfb8      	it	lt
 801bdc2:	9204      	strlt	r2, [sp, #16]
 801bdc4:	7823      	ldrb	r3, [r4, #0]
 801bdc6:	2b2e      	cmp	r3, #46	; 0x2e
 801bdc8:	d10c      	bne.n	801bde4 <_svfiprintf_r+0x130>
 801bdca:	7863      	ldrb	r3, [r4, #1]
 801bdcc:	2b2a      	cmp	r3, #42	; 0x2a
 801bdce:	d134      	bne.n	801be3a <_svfiprintf_r+0x186>
 801bdd0:	9b03      	ldr	r3, [sp, #12]
 801bdd2:	1d1a      	adds	r2, r3, #4
 801bdd4:	681b      	ldr	r3, [r3, #0]
 801bdd6:	9203      	str	r2, [sp, #12]
 801bdd8:	2b00      	cmp	r3, #0
 801bdda:	bfb8      	it	lt
 801bddc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801bde0:	3402      	adds	r4, #2
 801bde2:	9305      	str	r3, [sp, #20]
 801bde4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801beac <_svfiprintf_r+0x1f8>
 801bde8:	7821      	ldrb	r1, [r4, #0]
 801bdea:	2203      	movs	r2, #3
 801bdec:	4650      	mov	r0, sl
 801bdee:	f7e4 fa37 	bl	8000260 <memchr>
 801bdf2:	b138      	cbz	r0, 801be04 <_svfiprintf_r+0x150>
 801bdf4:	9b04      	ldr	r3, [sp, #16]
 801bdf6:	eba0 000a 	sub.w	r0, r0, sl
 801bdfa:	2240      	movs	r2, #64	; 0x40
 801bdfc:	4082      	lsls	r2, r0
 801bdfe:	4313      	orrs	r3, r2
 801be00:	3401      	adds	r4, #1
 801be02:	9304      	str	r3, [sp, #16]
 801be04:	f814 1b01 	ldrb.w	r1, [r4], #1
 801be08:	4825      	ldr	r0, [pc, #148]	; (801bea0 <_svfiprintf_r+0x1ec>)
 801be0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801be0e:	2206      	movs	r2, #6
 801be10:	f7e4 fa26 	bl	8000260 <memchr>
 801be14:	2800      	cmp	r0, #0
 801be16:	d038      	beq.n	801be8a <_svfiprintf_r+0x1d6>
 801be18:	4b22      	ldr	r3, [pc, #136]	; (801bea4 <_svfiprintf_r+0x1f0>)
 801be1a:	bb1b      	cbnz	r3, 801be64 <_svfiprintf_r+0x1b0>
 801be1c:	9b03      	ldr	r3, [sp, #12]
 801be1e:	3307      	adds	r3, #7
 801be20:	f023 0307 	bic.w	r3, r3, #7
 801be24:	3308      	adds	r3, #8
 801be26:	9303      	str	r3, [sp, #12]
 801be28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801be2a:	4433      	add	r3, r6
 801be2c:	9309      	str	r3, [sp, #36]	; 0x24
 801be2e:	e768      	b.n	801bd02 <_svfiprintf_r+0x4e>
 801be30:	fb0c 3202 	mla	r2, ip, r2, r3
 801be34:	460c      	mov	r4, r1
 801be36:	2001      	movs	r0, #1
 801be38:	e7a6      	b.n	801bd88 <_svfiprintf_r+0xd4>
 801be3a:	2300      	movs	r3, #0
 801be3c:	3401      	adds	r4, #1
 801be3e:	9305      	str	r3, [sp, #20]
 801be40:	4619      	mov	r1, r3
 801be42:	f04f 0c0a 	mov.w	ip, #10
 801be46:	4620      	mov	r0, r4
 801be48:	f810 2b01 	ldrb.w	r2, [r0], #1
 801be4c:	3a30      	subs	r2, #48	; 0x30
 801be4e:	2a09      	cmp	r2, #9
 801be50:	d903      	bls.n	801be5a <_svfiprintf_r+0x1a6>
 801be52:	2b00      	cmp	r3, #0
 801be54:	d0c6      	beq.n	801bde4 <_svfiprintf_r+0x130>
 801be56:	9105      	str	r1, [sp, #20]
 801be58:	e7c4      	b.n	801bde4 <_svfiprintf_r+0x130>
 801be5a:	fb0c 2101 	mla	r1, ip, r1, r2
 801be5e:	4604      	mov	r4, r0
 801be60:	2301      	movs	r3, #1
 801be62:	e7f0      	b.n	801be46 <_svfiprintf_r+0x192>
 801be64:	ab03      	add	r3, sp, #12
 801be66:	9300      	str	r3, [sp, #0]
 801be68:	462a      	mov	r2, r5
 801be6a:	4b0f      	ldr	r3, [pc, #60]	; (801bea8 <_svfiprintf_r+0x1f4>)
 801be6c:	a904      	add	r1, sp, #16
 801be6e:	4638      	mov	r0, r7
 801be70:	f3af 8000 	nop.w
 801be74:	1c42      	adds	r2, r0, #1
 801be76:	4606      	mov	r6, r0
 801be78:	d1d6      	bne.n	801be28 <_svfiprintf_r+0x174>
 801be7a:	89ab      	ldrh	r3, [r5, #12]
 801be7c:	065b      	lsls	r3, r3, #25
 801be7e:	f53f af2d 	bmi.w	801bcdc <_svfiprintf_r+0x28>
 801be82:	9809      	ldr	r0, [sp, #36]	; 0x24
 801be84:	b01d      	add	sp, #116	; 0x74
 801be86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be8a:	ab03      	add	r3, sp, #12
 801be8c:	9300      	str	r3, [sp, #0]
 801be8e:	462a      	mov	r2, r5
 801be90:	4b05      	ldr	r3, [pc, #20]	; (801bea8 <_svfiprintf_r+0x1f4>)
 801be92:	a904      	add	r1, sp, #16
 801be94:	4638      	mov	r0, r7
 801be96:	f000 f879 	bl	801bf8c <_printf_i>
 801be9a:	e7eb      	b.n	801be74 <_svfiprintf_r+0x1c0>
 801be9c:	0801e6a4 	.word	0x0801e6a4
 801bea0:	0801e6ae 	.word	0x0801e6ae
 801bea4:	00000000 	.word	0x00000000
 801bea8:	0801bc01 	.word	0x0801bc01
 801beac:	0801e6aa 	.word	0x0801e6aa

0801beb0 <_printf_common>:
 801beb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801beb4:	4616      	mov	r6, r2
 801beb6:	4699      	mov	r9, r3
 801beb8:	688a      	ldr	r2, [r1, #8]
 801beba:	690b      	ldr	r3, [r1, #16]
 801bebc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801bec0:	4293      	cmp	r3, r2
 801bec2:	bfb8      	it	lt
 801bec4:	4613      	movlt	r3, r2
 801bec6:	6033      	str	r3, [r6, #0]
 801bec8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801becc:	4607      	mov	r7, r0
 801bece:	460c      	mov	r4, r1
 801bed0:	b10a      	cbz	r2, 801bed6 <_printf_common+0x26>
 801bed2:	3301      	adds	r3, #1
 801bed4:	6033      	str	r3, [r6, #0]
 801bed6:	6823      	ldr	r3, [r4, #0]
 801bed8:	0699      	lsls	r1, r3, #26
 801beda:	bf42      	ittt	mi
 801bedc:	6833      	ldrmi	r3, [r6, #0]
 801bede:	3302      	addmi	r3, #2
 801bee0:	6033      	strmi	r3, [r6, #0]
 801bee2:	6825      	ldr	r5, [r4, #0]
 801bee4:	f015 0506 	ands.w	r5, r5, #6
 801bee8:	d106      	bne.n	801bef8 <_printf_common+0x48>
 801beea:	f104 0a19 	add.w	sl, r4, #25
 801beee:	68e3      	ldr	r3, [r4, #12]
 801bef0:	6832      	ldr	r2, [r6, #0]
 801bef2:	1a9b      	subs	r3, r3, r2
 801bef4:	42ab      	cmp	r3, r5
 801bef6:	dc26      	bgt.n	801bf46 <_printf_common+0x96>
 801bef8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801befc:	1e13      	subs	r3, r2, #0
 801befe:	6822      	ldr	r2, [r4, #0]
 801bf00:	bf18      	it	ne
 801bf02:	2301      	movne	r3, #1
 801bf04:	0692      	lsls	r2, r2, #26
 801bf06:	d42b      	bmi.n	801bf60 <_printf_common+0xb0>
 801bf08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801bf0c:	4649      	mov	r1, r9
 801bf0e:	4638      	mov	r0, r7
 801bf10:	47c0      	blx	r8
 801bf12:	3001      	adds	r0, #1
 801bf14:	d01e      	beq.n	801bf54 <_printf_common+0xa4>
 801bf16:	6823      	ldr	r3, [r4, #0]
 801bf18:	6922      	ldr	r2, [r4, #16]
 801bf1a:	f003 0306 	and.w	r3, r3, #6
 801bf1e:	2b04      	cmp	r3, #4
 801bf20:	bf02      	ittt	eq
 801bf22:	68e5      	ldreq	r5, [r4, #12]
 801bf24:	6833      	ldreq	r3, [r6, #0]
 801bf26:	1aed      	subeq	r5, r5, r3
 801bf28:	68a3      	ldr	r3, [r4, #8]
 801bf2a:	bf0c      	ite	eq
 801bf2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801bf30:	2500      	movne	r5, #0
 801bf32:	4293      	cmp	r3, r2
 801bf34:	bfc4      	itt	gt
 801bf36:	1a9b      	subgt	r3, r3, r2
 801bf38:	18ed      	addgt	r5, r5, r3
 801bf3a:	2600      	movs	r6, #0
 801bf3c:	341a      	adds	r4, #26
 801bf3e:	42b5      	cmp	r5, r6
 801bf40:	d11a      	bne.n	801bf78 <_printf_common+0xc8>
 801bf42:	2000      	movs	r0, #0
 801bf44:	e008      	b.n	801bf58 <_printf_common+0xa8>
 801bf46:	2301      	movs	r3, #1
 801bf48:	4652      	mov	r2, sl
 801bf4a:	4649      	mov	r1, r9
 801bf4c:	4638      	mov	r0, r7
 801bf4e:	47c0      	blx	r8
 801bf50:	3001      	adds	r0, #1
 801bf52:	d103      	bne.n	801bf5c <_printf_common+0xac>
 801bf54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bf58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bf5c:	3501      	adds	r5, #1
 801bf5e:	e7c6      	b.n	801beee <_printf_common+0x3e>
 801bf60:	18e1      	adds	r1, r4, r3
 801bf62:	1c5a      	adds	r2, r3, #1
 801bf64:	2030      	movs	r0, #48	; 0x30
 801bf66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801bf6a:	4422      	add	r2, r4
 801bf6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801bf70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801bf74:	3302      	adds	r3, #2
 801bf76:	e7c7      	b.n	801bf08 <_printf_common+0x58>
 801bf78:	2301      	movs	r3, #1
 801bf7a:	4622      	mov	r2, r4
 801bf7c:	4649      	mov	r1, r9
 801bf7e:	4638      	mov	r0, r7
 801bf80:	47c0      	blx	r8
 801bf82:	3001      	adds	r0, #1
 801bf84:	d0e6      	beq.n	801bf54 <_printf_common+0xa4>
 801bf86:	3601      	adds	r6, #1
 801bf88:	e7d9      	b.n	801bf3e <_printf_common+0x8e>
	...

0801bf8c <_printf_i>:
 801bf8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801bf90:	7e0f      	ldrb	r7, [r1, #24]
 801bf92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801bf94:	2f78      	cmp	r7, #120	; 0x78
 801bf96:	4691      	mov	r9, r2
 801bf98:	4680      	mov	r8, r0
 801bf9a:	460c      	mov	r4, r1
 801bf9c:	469a      	mov	sl, r3
 801bf9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801bfa2:	d807      	bhi.n	801bfb4 <_printf_i+0x28>
 801bfa4:	2f62      	cmp	r7, #98	; 0x62
 801bfa6:	d80a      	bhi.n	801bfbe <_printf_i+0x32>
 801bfa8:	2f00      	cmp	r7, #0
 801bfaa:	f000 80d4 	beq.w	801c156 <_printf_i+0x1ca>
 801bfae:	2f58      	cmp	r7, #88	; 0x58
 801bfb0:	f000 80c0 	beq.w	801c134 <_printf_i+0x1a8>
 801bfb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801bfb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801bfbc:	e03a      	b.n	801c034 <_printf_i+0xa8>
 801bfbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801bfc2:	2b15      	cmp	r3, #21
 801bfc4:	d8f6      	bhi.n	801bfb4 <_printf_i+0x28>
 801bfc6:	a101      	add	r1, pc, #4	; (adr r1, 801bfcc <_printf_i+0x40>)
 801bfc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801bfcc:	0801c025 	.word	0x0801c025
 801bfd0:	0801c039 	.word	0x0801c039
 801bfd4:	0801bfb5 	.word	0x0801bfb5
 801bfd8:	0801bfb5 	.word	0x0801bfb5
 801bfdc:	0801bfb5 	.word	0x0801bfb5
 801bfe0:	0801bfb5 	.word	0x0801bfb5
 801bfe4:	0801c039 	.word	0x0801c039
 801bfe8:	0801bfb5 	.word	0x0801bfb5
 801bfec:	0801bfb5 	.word	0x0801bfb5
 801bff0:	0801bfb5 	.word	0x0801bfb5
 801bff4:	0801bfb5 	.word	0x0801bfb5
 801bff8:	0801c13d 	.word	0x0801c13d
 801bffc:	0801c065 	.word	0x0801c065
 801c000:	0801c0f7 	.word	0x0801c0f7
 801c004:	0801bfb5 	.word	0x0801bfb5
 801c008:	0801bfb5 	.word	0x0801bfb5
 801c00c:	0801c15f 	.word	0x0801c15f
 801c010:	0801bfb5 	.word	0x0801bfb5
 801c014:	0801c065 	.word	0x0801c065
 801c018:	0801bfb5 	.word	0x0801bfb5
 801c01c:	0801bfb5 	.word	0x0801bfb5
 801c020:	0801c0ff 	.word	0x0801c0ff
 801c024:	682b      	ldr	r3, [r5, #0]
 801c026:	1d1a      	adds	r2, r3, #4
 801c028:	681b      	ldr	r3, [r3, #0]
 801c02a:	602a      	str	r2, [r5, #0]
 801c02c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c030:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c034:	2301      	movs	r3, #1
 801c036:	e09f      	b.n	801c178 <_printf_i+0x1ec>
 801c038:	6820      	ldr	r0, [r4, #0]
 801c03a:	682b      	ldr	r3, [r5, #0]
 801c03c:	0607      	lsls	r7, r0, #24
 801c03e:	f103 0104 	add.w	r1, r3, #4
 801c042:	6029      	str	r1, [r5, #0]
 801c044:	d501      	bpl.n	801c04a <_printf_i+0xbe>
 801c046:	681e      	ldr	r6, [r3, #0]
 801c048:	e003      	b.n	801c052 <_printf_i+0xc6>
 801c04a:	0646      	lsls	r6, r0, #25
 801c04c:	d5fb      	bpl.n	801c046 <_printf_i+0xba>
 801c04e:	f9b3 6000 	ldrsh.w	r6, [r3]
 801c052:	2e00      	cmp	r6, #0
 801c054:	da03      	bge.n	801c05e <_printf_i+0xd2>
 801c056:	232d      	movs	r3, #45	; 0x2d
 801c058:	4276      	negs	r6, r6
 801c05a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c05e:	485a      	ldr	r0, [pc, #360]	; (801c1c8 <_printf_i+0x23c>)
 801c060:	230a      	movs	r3, #10
 801c062:	e012      	b.n	801c08a <_printf_i+0xfe>
 801c064:	682b      	ldr	r3, [r5, #0]
 801c066:	6820      	ldr	r0, [r4, #0]
 801c068:	1d19      	adds	r1, r3, #4
 801c06a:	6029      	str	r1, [r5, #0]
 801c06c:	0605      	lsls	r5, r0, #24
 801c06e:	d501      	bpl.n	801c074 <_printf_i+0xe8>
 801c070:	681e      	ldr	r6, [r3, #0]
 801c072:	e002      	b.n	801c07a <_printf_i+0xee>
 801c074:	0641      	lsls	r1, r0, #25
 801c076:	d5fb      	bpl.n	801c070 <_printf_i+0xe4>
 801c078:	881e      	ldrh	r6, [r3, #0]
 801c07a:	4853      	ldr	r0, [pc, #332]	; (801c1c8 <_printf_i+0x23c>)
 801c07c:	2f6f      	cmp	r7, #111	; 0x6f
 801c07e:	bf0c      	ite	eq
 801c080:	2308      	moveq	r3, #8
 801c082:	230a      	movne	r3, #10
 801c084:	2100      	movs	r1, #0
 801c086:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c08a:	6865      	ldr	r5, [r4, #4]
 801c08c:	60a5      	str	r5, [r4, #8]
 801c08e:	2d00      	cmp	r5, #0
 801c090:	bfa2      	ittt	ge
 801c092:	6821      	ldrge	r1, [r4, #0]
 801c094:	f021 0104 	bicge.w	r1, r1, #4
 801c098:	6021      	strge	r1, [r4, #0]
 801c09a:	b90e      	cbnz	r6, 801c0a0 <_printf_i+0x114>
 801c09c:	2d00      	cmp	r5, #0
 801c09e:	d04b      	beq.n	801c138 <_printf_i+0x1ac>
 801c0a0:	4615      	mov	r5, r2
 801c0a2:	fbb6 f1f3 	udiv	r1, r6, r3
 801c0a6:	fb03 6711 	mls	r7, r3, r1, r6
 801c0aa:	5dc7      	ldrb	r7, [r0, r7]
 801c0ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801c0b0:	4637      	mov	r7, r6
 801c0b2:	42bb      	cmp	r3, r7
 801c0b4:	460e      	mov	r6, r1
 801c0b6:	d9f4      	bls.n	801c0a2 <_printf_i+0x116>
 801c0b8:	2b08      	cmp	r3, #8
 801c0ba:	d10b      	bne.n	801c0d4 <_printf_i+0x148>
 801c0bc:	6823      	ldr	r3, [r4, #0]
 801c0be:	07de      	lsls	r6, r3, #31
 801c0c0:	d508      	bpl.n	801c0d4 <_printf_i+0x148>
 801c0c2:	6923      	ldr	r3, [r4, #16]
 801c0c4:	6861      	ldr	r1, [r4, #4]
 801c0c6:	4299      	cmp	r1, r3
 801c0c8:	bfde      	ittt	le
 801c0ca:	2330      	movle	r3, #48	; 0x30
 801c0cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 801c0d0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801c0d4:	1b52      	subs	r2, r2, r5
 801c0d6:	6122      	str	r2, [r4, #16]
 801c0d8:	f8cd a000 	str.w	sl, [sp]
 801c0dc:	464b      	mov	r3, r9
 801c0de:	aa03      	add	r2, sp, #12
 801c0e0:	4621      	mov	r1, r4
 801c0e2:	4640      	mov	r0, r8
 801c0e4:	f7ff fee4 	bl	801beb0 <_printf_common>
 801c0e8:	3001      	adds	r0, #1
 801c0ea:	d14a      	bne.n	801c182 <_printf_i+0x1f6>
 801c0ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c0f0:	b004      	add	sp, #16
 801c0f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c0f6:	6823      	ldr	r3, [r4, #0]
 801c0f8:	f043 0320 	orr.w	r3, r3, #32
 801c0fc:	6023      	str	r3, [r4, #0]
 801c0fe:	4833      	ldr	r0, [pc, #204]	; (801c1cc <_printf_i+0x240>)
 801c100:	2778      	movs	r7, #120	; 0x78
 801c102:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801c106:	6823      	ldr	r3, [r4, #0]
 801c108:	6829      	ldr	r1, [r5, #0]
 801c10a:	061f      	lsls	r7, r3, #24
 801c10c:	f851 6b04 	ldr.w	r6, [r1], #4
 801c110:	d402      	bmi.n	801c118 <_printf_i+0x18c>
 801c112:	065f      	lsls	r7, r3, #25
 801c114:	bf48      	it	mi
 801c116:	b2b6      	uxthmi	r6, r6
 801c118:	07df      	lsls	r7, r3, #31
 801c11a:	bf48      	it	mi
 801c11c:	f043 0320 	orrmi.w	r3, r3, #32
 801c120:	6029      	str	r1, [r5, #0]
 801c122:	bf48      	it	mi
 801c124:	6023      	strmi	r3, [r4, #0]
 801c126:	b91e      	cbnz	r6, 801c130 <_printf_i+0x1a4>
 801c128:	6823      	ldr	r3, [r4, #0]
 801c12a:	f023 0320 	bic.w	r3, r3, #32
 801c12e:	6023      	str	r3, [r4, #0]
 801c130:	2310      	movs	r3, #16
 801c132:	e7a7      	b.n	801c084 <_printf_i+0xf8>
 801c134:	4824      	ldr	r0, [pc, #144]	; (801c1c8 <_printf_i+0x23c>)
 801c136:	e7e4      	b.n	801c102 <_printf_i+0x176>
 801c138:	4615      	mov	r5, r2
 801c13a:	e7bd      	b.n	801c0b8 <_printf_i+0x12c>
 801c13c:	682b      	ldr	r3, [r5, #0]
 801c13e:	6826      	ldr	r6, [r4, #0]
 801c140:	6961      	ldr	r1, [r4, #20]
 801c142:	1d18      	adds	r0, r3, #4
 801c144:	6028      	str	r0, [r5, #0]
 801c146:	0635      	lsls	r5, r6, #24
 801c148:	681b      	ldr	r3, [r3, #0]
 801c14a:	d501      	bpl.n	801c150 <_printf_i+0x1c4>
 801c14c:	6019      	str	r1, [r3, #0]
 801c14e:	e002      	b.n	801c156 <_printf_i+0x1ca>
 801c150:	0670      	lsls	r0, r6, #25
 801c152:	d5fb      	bpl.n	801c14c <_printf_i+0x1c0>
 801c154:	8019      	strh	r1, [r3, #0]
 801c156:	2300      	movs	r3, #0
 801c158:	6123      	str	r3, [r4, #16]
 801c15a:	4615      	mov	r5, r2
 801c15c:	e7bc      	b.n	801c0d8 <_printf_i+0x14c>
 801c15e:	682b      	ldr	r3, [r5, #0]
 801c160:	1d1a      	adds	r2, r3, #4
 801c162:	602a      	str	r2, [r5, #0]
 801c164:	681d      	ldr	r5, [r3, #0]
 801c166:	6862      	ldr	r2, [r4, #4]
 801c168:	2100      	movs	r1, #0
 801c16a:	4628      	mov	r0, r5
 801c16c:	f7e4 f878 	bl	8000260 <memchr>
 801c170:	b108      	cbz	r0, 801c176 <_printf_i+0x1ea>
 801c172:	1b40      	subs	r0, r0, r5
 801c174:	6060      	str	r0, [r4, #4]
 801c176:	6863      	ldr	r3, [r4, #4]
 801c178:	6123      	str	r3, [r4, #16]
 801c17a:	2300      	movs	r3, #0
 801c17c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c180:	e7aa      	b.n	801c0d8 <_printf_i+0x14c>
 801c182:	6923      	ldr	r3, [r4, #16]
 801c184:	462a      	mov	r2, r5
 801c186:	4649      	mov	r1, r9
 801c188:	4640      	mov	r0, r8
 801c18a:	47d0      	blx	sl
 801c18c:	3001      	adds	r0, #1
 801c18e:	d0ad      	beq.n	801c0ec <_printf_i+0x160>
 801c190:	6823      	ldr	r3, [r4, #0]
 801c192:	079b      	lsls	r3, r3, #30
 801c194:	d413      	bmi.n	801c1be <_printf_i+0x232>
 801c196:	68e0      	ldr	r0, [r4, #12]
 801c198:	9b03      	ldr	r3, [sp, #12]
 801c19a:	4298      	cmp	r0, r3
 801c19c:	bfb8      	it	lt
 801c19e:	4618      	movlt	r0, r3
 801c1a0:	e7a6      	b.n	801c0f0 <_printf_i+0x164>
 801c1a2:	2301      	movs	r3, #1
 801c1a4:	4632      	mov	r2, r6
 801c1a6:	4649      	mov	r1, r9
 801c1a8:	4640      	mov	r0, r8
 801c1aa:	47d0      	blx	sl
 801c1ac:	3001      	adds	r0, #1
 801c1ae:	d09d      	beq.n	801c0ec <_printf_i+0x160>
 801c1b0:	3501      	adds	r5, #1
 801c1b2:	68e3      	ldr	r3, [r4, #12]
 801c1b4:	9903      	ldr	r1, [sp, #12]
 801c1b6:	1a5b      	subs	r3, r3, r1
 801c1b8:	42ab      	cmp	r3, r5
 801c1ba:	dcf2      	bgt.n	801c1a2 <_printf_i+0x216>
 801c1bc:	e7eb      	b.n	801c196 <_printf_i+0x20a>
 801c1be:	2500      	movs	r5, #0
 801c1c0:	f104 0619 	add.w	r6, r4, #25
 801c1c4:	e7f5      	b.n	801c1b2 <_printf_i+0x226>
 801c1c6:	bf00      	nop
 801c1c8:	0801e6b5 	.word	0x0801e6b5
 801c1cc:	0801e6c6 	.word	0x0801e6c6

0801c1d0 <__sflush_r>:
 801c1d0:	898a      	ldrh	r2, [r1, #12]
 801c1d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c1d6:	4605      	mov	r5, r0
 801c1d8:	0710      	lsls	r0, r2, #28
 801c1da:	460c      	mov	r4, r1
 801c1dc:	d458      	bmi.n	801c290 <__sflush_r+0xc0>
 801c1de:	684b      	ldr	r3, [r1, #4]
 801c1e0:	2b00      	cmp	r3, #0
 801c1e2:	dc05      	bgt.n	801c1f0 <__sflush_r+0x20>
 801c1e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801c1e6:	2b00      	cmp	r3, #0
 801c1e8:	dc02      	bgt.n	801c1f0 <__sflush_r+0x20>
 801c1ea:	2000      	movs	r0, #0
 801c1ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c1f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c1f2:	2e00      	cmp	r6, #0
 801c1f4:	d0f9      	beq.n	801c1ea <__sflush_r+0x1a>
 801c1f6:	2300      	movs	r3, #0
 801c1f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c1fc:	682f      	ldr	r7, [r5, #0]
 801c1fe:	6a21      	ldr	r1, [r4, #32]
 801c200:	602b      	str	r3, [r5, #0]
 801c202:	d032      	beq.n	801c26a <__sflush_r+0x9a>
 801c204:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c206:	89a3      	ldrh	r3, [r4, #12]
 801c208:	075a      	lsls	r2, r3, #29
 801c20a:	d505      	bpl.n	801c218 <__sflush_r+0x48>
 801c20c:	6863      	ldr	r3, [r4, #4]
 801c20e:	1ac0      	subs	r0, r0, r3
 801c210:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c212:	b10b      	cbz	r3, 801c218 <__sflush_r+0x48>
 801c214:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c216:	1ac0      	subs	r0, r0, r3
 801c218:	2300      	movs	r3, #0
 801c21a:	4602      	mov	r2, r0
 801c21c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c21e:	6a21      	ldr	r1, [r4, #32]
 801c220:	4628      	mov	r0, r5
 801c222:	47b0      	blx	r6
 801c224:	1c43      	adds	r3, r0, #1
 801c226:	89a3      	ldrh	r3, [r4, #12]
 801c228:	d106      	bne.n	801c238 <__sflush_r+0x68>
 801c22a:	6829      	ldr	r1, [r5, #0]
 801c22c:	291d      	cmp	r1, #29
 801c22e:	d82b      	bhi.n	801c288 <__sflush_r+0xb8>
 801c230:	4a29      	ldr	r2, [pc, #164]	; (801c2d8 <__sflush_r+0x108>)
 801c232:	410a      	asrs	r2, r1
 801c234:	07d6      	lsls	r6, r2, #31
 801c236:	d427      	bmi.n	801c288 <__sflush_r+0xb8>
 801c238:	2200      	movs	r2, #0
 801c23a:	6062      	str	r2, [r4, #4]
 801c23c:	04d9      	lsls	r1, r3, #19
 801c23e:	6922      	ldr	r2, [r4, #16]
 801c240:	6022      	str	r2, [r4, #0]
 801c242:	d504      	bpl.n	801c24e <__sflush_r+0x7e>
 801c244:	1c42      	adds	r2, r0, #1
 801c246:	d101      	bne.n	801c24c <__sflush_r+0x7c>
 801c248:	682b      	ldr	r3, [r5, #0]
 801c24a:	b903      	cbnz	r3, 801c24e <__sflush_r+0x7e>
 801c24c:	6560      	str	r0, [r4, #84]	; 0x54
 801c24e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c250:	602f      	str	r7, [r5, #0]
 801c252:	2900      	cmp	r1, #0
 801c254:	d0c9      	beq.n	801c1ea <__sflush_r+0x1a>
 801c256:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c25a:	4299      	cmp	r1, r3
 801c25c:	d002      	beq.n	801c264 <__sflush_r+0x94>
 801c25e:	4628      	mov	r0, r5
 801c260:	f7ff fc7a 	bl	801bb58 <_free_r>
 801c264:	2000      	movs	r0, #0
 801c266:	6360      	str	r0, [r4, #52]	; 0x34
 801c268:	e7c0      	b.n	801c1ec <__sflush_r+0x1c>
 801c26a:	2301      	movs	r3, #1
 801c26c:	4628      	mov	r0, r5
 801c26e:	47b0      	blx	r6
 801c270:	1c41      	adds	r1, r0, #1
 801c272:	d1c8      	bne.n	801c206 <__sflush_r+0x36>
 801c274:	682b      	ldr	r3, [r5, #0]
 801c276:	2b00      	cmp	r3, #0
 801c278:	d0c5      	beq.n	801c206 <__sflush_r+0x36>
 801c27a:	2b1d      	cmp	r3, #29
 801c27c:	d001      	beq.n	801c282 <__sflush_r+0xb2>
 801c27e:	2b16      	cmp	r3, #22
 801c280:	d101      	bne.n	801c286 <__sflush_r+0xb6>
 801c282:	602f      	str	r7, [r5, #0]
 801c284:	e7b1      	b.n	801c1ea <__sflush_r+0x1a>
 801c286:	89a3      	ldrh	r3, [r4, #12]
 801c288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c28c:	81a3      	strh	r3, [r4, #12]
 801c28e:	e7ad      	b.n	801c1ec <__sflush_r+0x1c>
 801c290:	690f      	ldr	r7, [r1, #16]
 801c292:	2f00      	cmp	r7, #0
 801c294:	d0a9      	beq.n	801c1ea <__sflush_r+0x1a>
 801c296:	0793      	lsls	r3, r2, #30
 801c298:	680e      	ldr	r6, [r1, #0]
 801c29a:	bf08      	it	eq
 801c29c:	694b      	ldreq	r3, [r1, #20]
 801c29e:	600f      	str	r7, [r1, #0]
 801c2a0:	bf18      	it	ne
 801c2a2:	2300      	movne	r3, #0
 801c2a4:	eba6 0807 	sub.w	r8, r6, r7
 801c2a8:	608b      	str	r3, [r1, #8]
 801c2aa:	f1b8 0f00 	cmp.w	r8, #0
 801c2ae:	dd9c      	ble.n	801c1ea <__sflush_r+0x1a>
 801c2b0:	6a21      	ldr	r1, [r4, #32]
 801c2b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c2b4:	4643      	mov	r3, r8
 801c2b6:	463a      	mov	r2, r7
 801c2b8:	4628      	mov	r0, r5
 801c2ba:	47b0      	blx	r6
 801c2bc:	2800      	cmp	r0, #0
 801c2be:	dc06      	bgt.n	801c2ce <__sflush_r+0xfe>
 801c2c0:	89a3      	ldrh	r3, [r4, #12]
 801c2c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c2c6:	81a3      	strh	r3, [r4, #12]
 801c2c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c2cc:	e78e      	b.n	801c1ec <__sflush_r+0x1c>
 801c2ce:	4407      	add	r7, r0
 801c2d0:	eba8 0800 	sub.w	r8, r8, r0
 801c2d4:	e7e9      	b.n	801c2aa <__sflush_r+0xda>
 801c2d6:	bf00      	nop
 801c2d8:	dfbffffe 	.word	0xdfbffffe

0801c2dc <_fflush_r>:
 801c2dc:	b538      	push	{r3, r4, r5, lr}
 801c2de:	690b      	ldr	r3, [r1, #16]
 801c2e0:	4605      	mov	r5, r0
 801c2e2:	460c      	mov	r4, r1
 801c2e4:	b913      	cbnz	r3, 801c2ec <_fflush_r+0x10>
 801c2e6:	2500      	movs	r5, #0
 801c2e8:	4628      	mov	r0, r5
 801c2ea:	bd38      	pop	{r3, r4, r5, pc}
 801c2ec:	b118      	cbz	r0, 801c2f6 <_fflush_r+0x1a>
 801c2ee:	6a03      	ldr	r3, [r0, #32]
 801c2f0:	b90b      	cbnz	r3, 801c2f6 <_fflush_r+0x1a>
 801c2f2:	f7ff f9b7 	bl	801b664 <__sinit>
 801c2f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c2fa:	2b00      	cmp	r3, #0
 801c2fc:	d0f3      	beq.n	801c2e6 <_fflush_r+0xa>
 801c2fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801c300:	07d0      	lsls	r0, r2, #31
 801c302:	d404      	bmi.n	801c30e <_fflush_r+0x32>
 801c304:	0599      	lsls	r1, r3, #22
 801c306:	d402      	bmi.n	801c30e <_fflush_r+0x32>
 801c308:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c30a:	f7ff fbe2 	bl	801bad2 <__retarget_lock_acquire_recursive>
 801c30e:	4628      	mov	r0, r5
 801c310:	4621      	mov	r1, r4
 801c312:	f7ff ff5d 	bl	801c1d0 <__sflush_r>
 801c316:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c318:	07da      	lsls	r2, r3, #31
 801c31a:	4605      	mov	r5, r0
 801c31c:	d4e4      	bmi.n	801c2e8 <_fflush_r+0xc>
 801c31e:	89a3      	ldrh	r3, [r4, #12]
 801c320:	059b      	lsls	r3, r3, #22
 801c322:	d4e1      	bmi.n	801c2e8 <_fflush_r+0xc>
 801c324:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c326:	f7ff fbd5 	bl	801bad4 <__retarget_lock_release_recursive>
 801c32a:	e7dd      	b.n	801c2e8 <_fflush_r+0xc>

0801c32c <fiprintf>:
 801c32c:	b40e      	push	{r1, r2, r3}
 801c32e:	b503      	push	{r0, r1, lr}
 801c330:	4601      	mov	r1, r0
 801c332:	ab03      	add	r3, sp, #12
 801c334:	4805      	ldr	r0, [pc, #20]	; (801c34c <fiprintf+0x20>)
 801c336:	f853 2b04 	ldr.w	r2, [r3], #4
 801c33a:	6800      	ldr	r0, [r0, #0]
 801c33c:	9301      	str	r3, [sp, #4]
 801c33e:	f000 f837 	bl	801c3b0 <_vfiprintf_r>
 801c342:	b002      	add	sp, #8
 801c344:	f85d eb04 	ldr.w	lr, [sp], #4
 801c348:	b003      	add	sp, #12
 801c34a:	4770      	bx	lr
 801c34c:	20001fe8 	.word	0x20001fe8

0801c350 <abort>:
 801c350:	b508      	push	{r3, lr}
 801c352:	2006      	movs	r0, #6
 801c354:	f000 fa04 	bl	801c760 <raise>
 801c358:	2001      	movs	r0, #1
 801c35a:	f7e6 fad9 	bl	8002910 <_exit>

0801c35e <__sfputc_r>:
 801c35e:	6893      	ldr	r3, [r2, #8]
 801c360:	3b01      	subs	r3, #1
 801c362:	2b00      	cmp	r3, #0
 801c364:	b410      	push	{r4}
 801c366:	6093      	str	r3, [r2, #8]
 801c368:	da08      	bge.n	801c37c <__sfputc_r+0x1e>
 801c36a:	6994      	ldr	r4, [r2, #24]
 801c36c:	42a3      	cmp	r3, r4
 801c36e:	db01      	blt.n	801c374 <__sfputc_r+0x16>
 801c370:	290a      	cmp	r1, #10
 801c372:	d103      	bne.n	801c37c <__sfputc_r+0x1e>
 801c374:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c378:	f000 b934 	b.w	801c5e4 <__swbuf_r>
 801c37c:	6813      	ldr	r3, [r2, #0]
 801c37e:	1c58      	adds	r0, r3, #1
 801c380:	6010      	str	r0, [r2, #0]
 801c382:	7019      	strb	r1, [r3, #0]
 801c384:	4608      	mov	r0, r1
 801c386:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c38a:	4770      	bx	lr

0801c38c <__sfputs_r>:
 801c38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c38e:	4606      	mov	r6, r0
 801c390:	460f      	mov	r7, r1
 801c392:	4614      	mov	r4, r2
 801c394:	18d5      	adds	r5, r2, r3
 801c396:	42ac      	cmp	r4, r5
 801c398:	d101      	bne.n	801c39e <__sfputs_r+0x12>
 801c39a:	2000      	movs	r0, #0
 801c39c:	e007      	b.n	801c3ae <__sfputs_r+0x22>
 801c39e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c3a2:	463a      	mov	r2, r7
 801c3a4:	4630      	mov	r0, r6
 801c3a6:	f7ff ffda 	bl	801c35e <__sfputc_r>
 801c3aa:	1c43      	adds	r3, r0, #1
 801c3ac:	d1f3      	bne.n	801c396 <__sfputs_r+0xa>
 801c3ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801c3b0 <_vfiprintf_r>:
 801c3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3b4:	460d      	mov	r5, r1
 801c3b6:	b09d      	sub	sp, #116	; 0x74
 801c3b8:	4614      	mov	r4, r2
 801c3ba:	4698      	mov	r8, r3
 801c3bc:	4606      	mov	r6, r0
 801c3be:	b118      	cbz	r0, 801c3c8 <_vfiprintf_r+0x18>
 801c3c0:	6a03      	ldr	r3, [r0, #32]
 801c3c2:	b90b      	cbnz	r3, 801c3c8 <_vfiprintf_r+0x18>
 801c3c4:	f7ff f94e 	bl	801b664 <__sinit>
 801c3c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c3ca:	07d9      	lsls	r1, r3, #31
 801c3cc:	d405      	bmi.n	801c3da <_vfiprintf_r+0x2a>
 801c3ce:	89ab      	ldrh	r3, [r5, #12]
 801c3d0:	059a      	lsls	r2, r3, #22
 801c3d2:	d402      	bmi.n	801c3da <_vfiprintf_r+0x2a>
 801c3d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c3d6:	f7ff fb7c 	bl	801bad2 <__retarget_lock_acquire_recursive>
 801c3da:	89ab      	ldrh	r3, [r5, #12]
 801c3dc:	071b      	lsls	r3, r3, #28
 801c3de:	d501      	bpl.n	801c3e4 <_vfiprintf_r+0x34>
 801c3e0:	692b      	ldr	r3, [r5, #16]
 801c3e2:	b99b      	cbnz	r3, 801c40c <_vfiprintf_r+0x5c>
 801c3e4:	4629      	mov	r1, r5
 801c3e6:	4630      	mov	r0, r6
 801c3e8:	f000 f93a 	bl	801c660 <__swsetup_r>
 801c3ec:	b170      	cbz	r0, 801c40c <_vfiprintf_r+0x5c>
 801c3ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c3f0:	07dc      	lsls	r4, r3, #31
 801c3f2:	d504      	bpl.n	801c3fe <_vfiprintf_r+0x4e>
 801c3f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c3f8:	b01d      	add	sp, #116	; 0x74
 801c3fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3fe:	89ab      	ldrh	r3, [r5, #12]
 801c400:	0598      	lsls	r0, r3, #22
 801c402:	d4f7      	bmi.n	801c3f4 <_vfiprintf_r+0x44>
 801c404:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c406:	f7ff fb65 	bl	801bad4 <__retarget_lock_release_recursive>
 801c40a:	e7f3      	b.n	801c3f4 <_vfiprintf_r+0x44>
 801c40c:	2300      	movs	r3, #0
 801c40e:	9309      	str	r3, [sp, #36]	; 0x24
 801c410:	2320      	movs	r3, #32
 801c412:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c416:	f8cd 800c 	str.w	r8, [sp, #12]
 801c41a:	2330      	movs	r3, #48	; 0x30
 801c41c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801c5d0 <_vfiprintf_r+0x220>
 801c420:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c424:	f04f 0901 	mov.w	r9, #1
 801c428:	4623      	mov	r3, r4
 801c42a:	469a      	mov	sl, r3
 801c42c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c430:	b10a      	cbz	r2, 801c436 <_vfiprintf_r+0x86>
 801c432:	2a25      	cmp	r2, #37	; 0x25
 801c434:	d1f9      	bne.n	801c42a <_vfiprintf_r+0x7a>
 801c436:	ebba 0b04 	subs.w	fp, sl, r4
 801c43a:	d00b      	beq.n	801c454 <_vfiprintf_r+0xa4>
 801c43c:	465b      	mov	r3, fp
 801c43e:	4622      	mov	r2, r4
 801c440:	4629      	mov	r1, r5
 801c442:	4630      	mov	r0, r6
 801c444:	f7ff ffa2 	bl	801c38c <__sfputs_r>
 801c448:	3001      	adds	r0, #1
 801c44a:	f000 80a9 	beq.w	801c5a0 <_vfiprintf_r+0x1f0>
 801c44e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c450:	445a      	add	r2, fp
 801c452:	9209      	str	r2, [sp, #36]	; 0x24
 801c454:	f89a 3000 	ldrb.w	r3, [sl]
 801c458:	2b00      	cmp	r3, #0
 801c45a:	f000 80a1 	beq.w	801c5a0 <_vfiprintf_r+0x1f0>
 801c45e:	2300      	movs	r3, #0
 801c460:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c464:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c468:	f10a 0a01 	add.w	sl, sl, #1
 801c46c:	9304      	str	r3, [sp, #16]
 801c46e:	9307      	str	r3, [sp, #28]
 801c470:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c474:	931a      	str	r3, [sp, #104]	; 0x68
 801c476:	4654      	mov	r4, sl
 801c478:	2205      	movs	r2, #5
 801c47a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c47e:	4854      	ldr	r0, [pc, #336]	; (801c5d0 <_vfiprintf_r+0x220>)
 801c480:	f7e3 feee 	bl	8000260 <memchr>
 801c484:	9a04      	ldr	r2, [sp, #16]
 801c486:	b9d8      	cbnz	r0, 801c4c0 <_vfiprintf_r+0x110>
 801c488:	06d1      	lsls	r1, r2, #27
 801c48a:	bf44      	itt	mi
 801c48c:	2320      	movmi	r3, #32
 801c48e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c492:	0713      	lsls	r3, r2, #28
 801c494:	bf44      	itt	mi
 801c496:	232b      	movmi	r3, #43	; 0x2b
 801c498:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c49c:	f89a 3000 	ldrb.w	r3, [sl]
 801c4a0:	2b2a      	cmp	r3, #42	; 0x2a
 801c4a2:	d015      	beq.n	801c4d0 <_vfiprintf_r+0x120>
 801c4a4:	9a07      	ldr	r2, [sp, #28]
 801c4a6:	4654      	mov	r4, sl
 801c4a8:	2000      	movs	r0, #0
 801c4aa:	f04f 0c0a 	mov.w	ip, #10
 801c4ae:	4621      	mov	r1, r4
 801c4b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c4b4:	3b30      	subs	r3, #48	; 0x30
 801c4b6:	2b09      	cmp	r3, #9
 801c4b8:	d94d      	bls.n	801c556 <_vfiprintf_r+0x1a6>
 801c4ba:	b1b0      	cbz	r0, 801c4ea <_vfiprintf_r+0x13a>
 801c4bc:	9207      	str	r2, [sp, #28]
 801c4be:	e014      	b.n	801c4ea <_vfiprintf_r+0x13a>
 801c4c0:	eba0 0308 	sub.w	r3, r0, r8
 801c4c4:	fa09 f303 	lsl.w	r3, r9, r3
 801c4c8:	4313      	orrs	r3, r2
 801c4ca:	9304      	str	r3, [sp, #16]
 801c4cc:	46a2      	mov	sl, r4
 801c4ce:	e7d2      	b.n	801c476 <_vfiprintf_r+0xc6>
 801c4d0:	9b03      	ldr	r3, [sp, #12]
 801c4d2:	1d19      	adds	r1, r3, #4
 801c4d4:	681b      	ldr	r3, [r3, #0]
 801c4d6:	9103      	str	r1, [sp, #12]
 801c4d8:	2b00      	cmp	r3, #0
 801c4da:	bfbb      	ittet	lt
 801c4dc:	425b      	neglt	r3, r3
 801c4de:	f042 0202 	orrlt.w	r2, r2, #2
 801c4e2:	9307      	strge	r3, [sp, #28]
 801c4e4:	9307      	strlt	r3, [sp, #28]
 801c4e6:	bfb8      	it	lt
 801c4e8:	9204      	strlt	r2, [sp, #16]
 801c4ea:	7823      	ldrb	r3, [r4, #0]
 801c4ec:	2b2e      	cmp	r3, #46	; 0x2e
 801c4ee:	d10c      	bne.n	801c50a <_vfiprintf_r+0x15a>
 801c4f0:	7863      	ldrb	r3, [r4, #1]
 801c4f2:	2b2a      	cmp	r3, #42	; 0x2a
 801c4f4:	d134      	bne.n	801c560 <_vfiprintf_r+0x1b0>
 801c4f6:	9b03      	ldr	r3, [sp, #12]
 801c4f8:	1d1a      	adds	r2, r3, #4
 801c4fa:	681b      	ldr	r3, [r3, #0]
 801c4fc:	9203      	str	r2, [sp, #12]
 801c4fe:	2b00      	cmp	r3, #0
 801c500:	bfb8      	it	lt
 801c502:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801c506:	3402      	adds	r4, #2
 801c508:	9305      	str	r3, [sp, #20]
 801c50a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801c5e0 <_vfiprintf_r+0x230>
 801c50e:	7821      	ldrb	r1, [r4, #0]
 801c510:	2203      	movs	r2, #3
 801c512:	4650      	mov	r0, sl
 801c514:	f7e3 fea4 	bl	8000260 <memchr>
 801c518:	b138      	cbz	r0, 801c52a <_vfiprintf_r+0x17a>
 801c51a:	9b04      	ldr	r3, [sp, #16]
 801c51c:	eba0 000a 	sub.w	r0, r0, sl
 801c520:	2240      	movs	r2, #64	; 0x40
 801c522:	4082      	lsls	r2, r0
 801c524:	4313      	orrs	r3, r2
 801c526:	3401      	adds	r4, #1
 801c528:	9304      	str	r3, [sp, #16]
 801c52a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c52e:	4829      	ldr	r0, [pc, #164]	; (801c5d4 <_vfiprintf_r+0x224>)
 801c530:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c534:	2206      	movs	r2, #6
 801c536:	f7e3 fe93 	bl	8000260 <memchr>
 801c53a:	2800      	cmp	r0, #0
 801c53c:	d03f      	beq.n	801c5be <_vfiprintf_r+0x20e>
 801c53e:	4b26      	ldr	r3, [pc, #152]	; (801c5d8 <_vfiprintf_r+0x228>)
 801c540:	bb1b      	cbnz	r3, 801c58a <_vfiprintf_r+0x1da>
 801c542:	9b03      	ldr	r3, [sp, #12]
 801c544:	3307      	adds	r3, #7
 801c546:	f023 0307 	bic.w	r3, r3, #7
 801c54a:	3308      	adds	r3, #8
 801c54c:	9303      	str	r3, [sp, #12]
 801c54e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c550:	443b      	add	r3, r7
 801c552:	9309      	str	r3, [sp, #36]	; 0x24
 801c554:	e768      	b.n	801c428 <_vfiprintf_r+0x78>
 801c556:	fb0c 3202 	mla	r2, ip, r2, r3
 801c55a:	460c      	mov	r4, r1
 801c55c:	2001      	movs	r0, #1
 801c55e:	e7a6      	b.n	801c4ae <_vfiprintf_r+0xfe>
 801c560:	2300      	movs	r3, #0
 801c562:	3401      	adds	r4, #1
 801c564:	9305      	str	r3, [sp, #20]
 801c566:	4619      	mov	r1, r3
 801c568:	f04f 0c0a 	mov.w	ip, #10
 801c56c:	4620      	mov	r0, r4
 801c56e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c572:	3a30      	subs	r2, #48	; 0x30
 801c574:	2a09      	cmp	r2, #9
 801c576:	d903      	bls.n	801c580 <_vfiprintf_r+0x1d0>
 801c578:	2b00      	cmp	r3, #0
 801c57a:	d0c6      	beq.n	801c50a <_vfiprintf_r+0x15a>
 801c57c:	9105      	str	r1, [sp, #20]
 801c57e:	e7c4      	b.n	801c50a <_vfiprintf_r+0x15a>
 801c580:	fb0c 2101 	mla	r1, ip, r1, r2
 801c584:	4604      	mov	r4, r0
 801c586:	2301      	movs	r3, #1
 801c588:	e7f0      	b.n	801c56c <_vfiprintf_r+0x1bc>
 801c58a:	ab03      	add	r3, sp, #12
 801c58c:	9300      	str	r3, [sp, #0]
 801c58e:	462a      	mov	r2, r5
 801c590:	4b12      	ldr	r3, [pc, #72]	; (801c5dc <_vfiprintf_r+0x22c>)
 801c592:	a904      	add	r1, sp, #16
 801c594:	4630      	mov	r0, r6
 801c596:	f3af 8000 	nop.w
 801c59a:	4607      	mov	r7, r0
 801c59c:	1c78      	adds	r0, r7, #1
 801c59e:	d1d6      	bne.n	801c54e <_vfiprintf_r+0x19e>
 801c5a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c5a2:	07d9      	lsls	r1, r3, #31
 801c5a4:	d405      	bmi.n	801c5b2 <_vfiprintf_r+0x202>
 801c5a6:	89ab      	ldrh	r3, [r5, #12]
 801c5a8:	059a      	lsls	r2, r3, #22
 801c5aa:	d402      	bmi.n	801c5b2 <_vfiprintf_r+0x202>
 801c5ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c5ae:	f7ff fa91 	bl	801bad4 <__retarget_lock_release_recursive>
 801c5b2:	89ab      	ldrh	r3, [r5, #12]
 801c5b4:	065b      	lsls	r3, r3, #25
 801c5b6:	f53f af1d 	bmi.w	801c3f4 <_vfiprintf_r+0x44>
 801c5ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c5bc:	e71c      	b.n	801c3f8 <_vfiprintf_r+0x48>
 801c5be:	ab03      	add	r3, sp, #12
 801c5c0:	9300      	str	r3, [sp, #0]
 801c5c2:	462a      	mov	r2, r5
 801c5c4:	4b05      	ldr	r3, [pc, #20]	; (801c5dc <_vfiprintf_r+0x22c>)
 801c5c6:	a904      	add	r1, sp, #16
 801c5c8:	4630      	mov	r0, r6
 801c5ca:	f7ff fcdf 	bl	801bf8c <_printf_i>
 801c5ce:	e7e4      	b.n	801c59a <_vfiprintf_r+0x1ea>
 801c5d0:	0801e6a4 	.word	0x0801e6a4
 801c5d4:	0801e6ae 	.word	0x0801e6ae
 801c5d8:	00000000 	.word	0x00000000
 801c5dc:	0801c38d 	.word	0x0801c38d
 801c5e0:	0801e6aa 	.word	0x0801e6aa

0801c5e4 <__swbuf_r>:
 801c5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c5e6:	460e      	mov	r6, r1
 801c5e8:	4614      	mov	r4, r2
 801c5ea:	4605      	mov	r5, r0
 801c5ec:	b118      	cbz	r0, 801c5f6 <__swbuf_r+0x12>
 801c5ee:	6a03      	ldr	r3, [r0, #32]
 801c5f0:	b90b      	cbnz	r3, 801c5f6 <__swbuf_r+0x12>
 801c5f2:	f7ff f837 	bl	801b664 <__sinit>
 801c5f6:	69a3      	ldr	r3, [r4, #24]
 801c5f8:	60a3      	str	r3, [r4, #8]
 801c5fa:	89a3      	ldrh	r3, [r4, #12]
 801c5fc:	071a      	lsls	r2, r3, #28
 801c5fe:	d525      	bpl.n	801c64c <__swbuf_r+0x68>
 801c600:	6923      	ldr	r3, [r4, #16]
 801c602:	b31b      	cbz	r3, 801c64c <__swbuf_r+0x68>
 801c604:	6823      	ldr	r3, [r4, #0]
 801c606:	6922      	ldr	r2, [r4, #16]
 801c608:	1a98      	subs	r0, r3, r2
 801c60a:	6963      	ldr	r3, [r4, #20]
 801c60c:	b2f6      	uxtb	r6, r6
 801c60e:	4283      	cmp	r3, r0
 801c610:	4637      	mov	r7, r6
 801c612:	dc04      	bgt.n	801c61e <__swbuf_r+0x3a>
 801c614:	4621      	mov	r1, r4
 801c616:	4628      	mov	r0, r5
 801c618:	f7ff fe60 	bl	801c2dc <_fflush_r>
 801c61c:	b9e0      	cbnz	r0, 801c658 <__swbuf_r+0x74>
 801c61e:	68a3      	ldr	r3, [r4, #8]
 801c620:	3b01      	subs	r3, #1
 801c622:	60a3      	str	r3, [r4, #8]
 801c624:	6823      	ldr	r3, [r4, #0]
 801c626:	1c5a      	adds	r2, r3, #1
 801c628:	6022      	str	r2, [r4, #0]
 801c62a:	701e      	strb	r6, [r3, #0]
 801c62c:	6962      	ldr	r2, [r4, #20]
 801c62e:	1c43      	adds	r3, r0, #1
 801c630:	429a      	cmp	r2, r3
 801c632:	d004      	beq.n	801c63e <__swbuf_r+0x5a>
 801c634:	89a3      	ldrh	r3, [r4, #12]
 801c636:	07db      	lsls	r3, r3, #31
 801c638:	d506      	bpl.n	801c648 <__swbuf_r+0x64>
 801c63a:	2e0a      	cmp	r6, #10
 801c63c:	d104      	bne.n	801c648 <__swbuf_r+0x64>
 801c63e:	4621      	mov	r1, r4
 801c640:	4628      	mov	r0, r5
 801c642:	f7ff fe4b 	bl	801c2dc <_fflush_r>
 801c646:	b938      	cbnz	r0, 801c658 <__swbuf_r+0x74>
 801c648:	4638      	mov	r0, r7
 801c64a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c64c:	4621      	mov	r1, r4
 801c64e:	4628      	mov	r0, r5
 801c650:	f000 f806 	bl	801c660 <__swsetup_r>
 801c654:	2800      	cmp	r0, #0
 801c656:	d0d5      	beq.n	801c604 <__swbuf_r+0x20>
 801c658:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801c65c:	e7f4      	b.n	801c648 <__swbuf_r+0x64>
	...

0801c660 <__swsetup_r>:
 801c660:	b538      	push	{r3, r4, r5, lr}
 801c662:	4b2a      	ldr	r3, [pc, #168]	; (801c70c <__swsetup_r+0xac>)
 801c664:	4605      	mov	r5, r0
 801c666:	6818      	ldr	r0, [r3, #0]
 801c668:	460c      	mov	r4, r1
 801c66a:	b118      	cbz	r0, 801c674 <__swsetup_r+0x14>
 801c66c:	6a03      	ldr	r3, [r0, #32]
 801c66e:	b90b      	cbnz	r3, 801c674 <__swsetup_r+0x14>
 801c670:	f7fe fff8 	bl	801b664 <__sinit>
 801c674:	89a3      	ldrh	r3, [r4, #12]
 801c676:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c67a:	0718      	lsls	r0, r3, #28
 801c67c:	d422      	bmi.n	801c6c4 <__swsetup_r+0x64>
 801c67e:	06d9      	lsls	r1, r3, #27
 801c680:	d407      	bmi.n	801c692 <__swsetup_r+0x32>
 801c682:	2309      	movs	r3, #9
 801c684:	602b      	str	r3, [r5, #0]
 801c686:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c68a:	81a3      	strh	r3, [r4, #12]
 801c68c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c690:	e034      	b.n	801c6fc <__swsetup_r+0x9c>
 801c692:	0758      	lsls	r0, r3, #29
 801c694:	d512      	bpl.n	801c6bc <__swsetup_r+0x5c>
 801c696:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c698:	b141      	cbz	r1, 801c6ac <__swsetup_r+0x4c>
 801c69a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c69e:	4299      	cmp	r1, r3
 801c6a0:	d002      	beq.n	801c6a8 <__swsetup_r+0x48>
 801c6a2:	4628      	mov	r0, r5
 801c6a4:	f7ff fa58 	bl	801bb58 <_free_r>
 801c6a8:	2300      	movs	r3, #0
 801c6aa:	6363      	str	r3, [r4, #52]	; 0x34
 801c6ac:	89a3      	ldrh	r3, [r4, #12]
 801c6ae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c6b2:	81a3      	strh	r3, [r4, #12]
 801c6b4:	2300      	movs	r3, #0
 801c6b6:	6063      	str	r3, [r4, #4]
 801c6b8:	6923      	ldr	r3, [r4, #16]
 801c6ba:	6023      	str	r3, [r4, #0]
 801c6bc:	89a3      	ldrh	r3, [r4, #12]
 801c6be:	f043 0308 	orr.w	r3, r3, #8
 801c6c2:	81a3      	strh	r3, [r4, #12]
 801c6c4:	6923      	ldr	r3, [r4, #16]
 801c6c6:	b94b      	cbnz	r3, 801c6dc <__swsetup_r+0x7c>
 801c6c8:	89a3      	ldrh	r3, [r4, #12]
 801c6ca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c6ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c6d2:	d003      	beq.n	801c6dc <__swsetup_r+0x7c>
 801c6d4:	4621      	mov	r1, r4
 801c6d6:	4628      	mov	r0, r5
 801c6d8:	f000 f884 	bl	801c7e4 <__smakebuf_r>
 801c6dc:	89a0      	ldrh	r0, [r4, #12]
 801c6de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c6e2:	f010 0301 	ands.w	r3, r0, #1
 801c6e6:	d00a      	beq.n	801c6fe <__swsetup_r+0x9e>
 801c6e8:	2300      	movs	r3, #0
 801c6ea:	60a3      	str	r3, [r4, #8]
 801c6ec:	6963      	ldr	r3, [r4, #20]
 801c6ee:	425b      	negs	r3, r3
 801c6f0:	61a3      	str	r3, [r4, #24]
 801c6f2:	6923      	ldr	r3, [r4, #16]
 801c6f4:	b943      	cbnz	r3, 801c708 <__swsetup_r+0xa8>
 801c6f6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c6fa:	d1c4      	bne.n	801c686 <__swsetup_r+0x26>
 801c6fc:	bd38      	pop	{r3, r4, r5, pc}
 801c6fe:	0781      	lsls	r1, r0, #30
 801c700:	bf58      	it	pl
 801c702:	6963      	ldrpl	r3, [r4, #20]
 801c704:	60a3      	str	r3, [r4, #8]
 801c706:	e7f4      	b.n	801c6f2 <__swsetup_r+0x92>
 801c708:	2000      	movs	r0, #0
 801c70a:	e7f7      	b.n	801c6fc <__swsetup_r+0x9c>
 801c70c:	20001fe8 	.word	0x20001fe8

0801c710 <_raise_r>:
 801c710:	291f      	cmp	r1, #31
 801c712:	b538      	push	{r3, r4, r5, lr}
 801c714:	4604      	mov	r4, r0
 801c716:	460d      	mov	r5, r1
 801c718:	d904      	bls.n	801c724 <_raise_r+0x14>
 801c71a:	2316      	movs	r3, #22
 801c71c:	6003      	str	r3, [r0, #0]
 801c71e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c722:	bd38      	pop	{r3, r4, r5, pc}
 801c724:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801c726:	b112      	cbz	r2, 801c72e <_raise_r+0x1e>
 801c728:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c72c:	b94b      	cbnz	r3, 801c742 <_raise_r+0x32>
 801c72e:	4620      	mov	r0, r4
 801c730:	f000 f830 	bl	801c794 <_getpid_r>
 801c734:	462a      	mov	r2, r5
 801c736:	4601      	mov	r1, r0
 801c738:	4620      	mov	r0, r4
 801c73a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c73e:	f000 b817 	b.w	801c770 <_kill_r>
 801c742:	2b01      	cmp	r3, #1
 801c744:	d00a      	beq.n	801c75c <_raise_r+0x4c>
 801c746:	1c59      	adds	r1, r3, #1
 801c748:	d103      	bne.n	801c752 <_raise_r+0x42>
 801c74a:	2316      	movs	r3, #22
 801c74c:	6003      	str	r3, [r0, #0]
 801c74e:	2001      	movs	r0, #1
 801c750:	e7e7      	b.n	801c722 <_raise_r+0x12>
 801c752:	2400      	movs	r4, #0
 801c754:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801c758:	4628      	mov	r0, r5
 801c75a:	4798      	blx	r3
 801c75c:	2000      	movs	r0, #0
 801c75e:	e7e0      	b.n	801c722 <_raise_r+0x12>

0801c760 <raise>:
 801c760:	4b02      	ldr	r3, [pc, #8]	; (801c76c <raise+0xc>)
 801c762:	4601      	mov	r1, r0
 801c764:	6818      	ldr	r0, [r3, #0]
 801c766:	f7ff bfd3 	b.w	801c710 <_raise_r>
 801c76a:	bf00      	nop
 801c76c:	20001fe8 	.word	0x20001fe8

0801c770 <_kill_r>:
 801c770:	b538      	push	{r3, r4, r5, lr}
 801c772:	4d07      	ldr	r5, [pc, #28]	; (801c790 <_kill_r+0x20>)
 801c774:	2300      	movs	r3, #0
 801c776:	4604      	mov	r4, r0
 801c778:	4608      	mov	r0, r1
 801c77a:	4611      	mov	r1, r2
 801c77c:	602b      	str	r3, [r5, #0]
 801c77e:	f7e6 f8b7 	bl	80028f0 <_kill>
 801c782:	1c43      	adds	r3, r0, #1
 801c784:	d102      	bne.n	801c78c <_kill_r+0x1c>
 801c786:	682b      	ldr	r3, [r5, #0]
 801c788:	b103      	cbz	r3, 801c78c <_kill_r+0x1c>
 801c78a:	6023      	str	r3, [r4, #0]
 801c78c:	bd38      	pop	{r3, r4, r5, pc}
 801c78e:	bf00      	nop
 801c790:	20010a3c 	.word	0x20010a3c

0801c794 <_getpid_r>:
 801c794:	f7e6 b8a4 	b.w	80028e0 <_getpid>

0801c798 <__swhatbuf_r>:
 801c798:	b570      	push	{r4, r5, r6, lr}
 801c79a:	460c      	mov	r4, r1
 801c79c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c7a0:	2900      	cmp	r1, #0
 801c7a2:	b096      	sub	sp, #88	; 0x58
 801c7a4:	4615      	mov	r5, r2
 801c7a6:	461e      	mov	r6, r3
 801c7a8:	da0d      	bge.n	801c7c6 <__swhatbuf_r+0x2e>
 801c7aa:	89a3      	ldrh	r3, [r4, #12]
 801c7ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 801c7b0:	f04f 0100 	mov.w	r1, #0
 801c7b4:	bf0c      	ite	eq
 801c7b6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801c7ba:	2340      	movne	r3, #64	; 0x40
 801c7bc:	2000      	movs	r0, #0
 801c7be:	6031      	str	r1, [r6, #0]
 801c7c0:	602b      	str	r3, [r5, #0]
 801c7c2:	b016      	add	sp, #88	; 0x58
 801c7c4:	bd70      	pop	{r4, r5, r6, pc}
 801c7c6:	466a      	mov	r2, sp
 801c7c8:	f000 f848 	bl	801c85c <_fstat_r>
 801c7cc:	2800      	cmp	r0, #0
 801c7ce:	dbec      	blt.n	801c7aa <__swhatbuf_r+0x12>
 801c7d0:	9901      	ldr	r1, [sp, #4]
 801c7d2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801c7d6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801c7da:	4259      	negs	r1, r3
 801c7dc:	4159      	adcs	r1, r3
 801c7de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c7e2:	e7eb      	b.n	801c7bc <__swhatbuf_r+0x24>

0801c7e4 <__smakebuf_r>:
 801c7e4:	898b      	ldrh	r3, [r1, #12]
 801c7e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c7e8:	079d      	lsls	r5, r3, #30
 801c7ea:	4606      	mov	r6, r0
 801c7ec:	460c      	mov	r4, r1
 801c7ee:	d507      	bpl.n	801c800 <__smakebuf_r+0x1c>
 801c7f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c7f4:	6023      	str	r3, [r4, #0]
 801c7f6:	6123      	str	r3, [r4, #16]
 801c7f8:	2301      	movs	r3, #1
 801c7fa:	6163      	str	r3, [r4, #20]
 801c7fc:	b002      	add	sp, #8
 801c7fe:	bd70      	pop	{r4, r5, r6, pc}
 801c800:	ab01      	add	r3, sp, #4
 801c802:	466a      	mov	r2, sp
 801c804:	f7ff ffc8 	bl	801c798 <__swhatbuf_r>
 801c808:	9900      	ldr	r1, [sp, #0]
 801c80a:	4605      	mov	r5, r0
 801c80c:	4630      	mov	r0, r6
 801c80e:	f7fe fcf1 	bl	801b1f4 <_malloc_r>
 801c812:	b948      	cbnz	r0, 801c828 <__smakebuf_r+0x44>
 801c814:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c818:	059a      	lsls	r2, r3, #22
 801c81a:	d4ef      	bmi.n	801c7fc <__smakebuf_r+0x18>
 801c81c:	f023 0303 	bic.w	r3, r3, #3
 801c820:	f043 0302 	orr.w	r3, r3, #2
 801c824:	81a3      	strh	r3, [r4, #12]
 801c826:	e7e3      	b.n	801c7f0 <__smakebuf_r+0xc>
 801c828:	89a3      	ldrh	r3, [r4, #12]
 801c82a:	6020      	str	r0, [r4, #0]
 801c82c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c830:	81a3      	strh	r3, [r4, #12]
 801c832:	9b00      	ldr	r3, [sp, #0]
 801c834:	6163      	str	r3, [r4, #20]
 801c836:	9b01      	ldr	r3, [sp, #4]
 801c838:	6120      	str	r0, [r4, #16]
 801c83a:	b15b      	cbz	r3, 801c854 <__smakebuf_r+0x70>
 801c83c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c840:	4630      	mov	r0, r6
 801c842:	f000 f81d 	bl	801c880 <_isatty_r>
 801c846:	b128      	cbz	r0, 801c854 <__smakebuf_r+0x70>
 801c848:	89a3      	ldrh	r3, [r4, #12]
 801c84a:	f023 0303 	bic.w	r3, r3, #3
 801c84e:	f043 0301 	orr.w	r3, r3, #1
 801c852:	81a3      	strh	r3, [r4, #12]
 801c854:	89a3      	ldrh	r3, [r4, #12]
 801c856:	431d      	orrs	r5, r3
 801c858:	81a5      	strh	r5, [r4, #12]
 801c85a:	e7cf      	b.n	801c7fc <__smakebuf_r+0x18>

0801c85c <_fstat_r>:
 801c85c:	b538      	push	{r3, r4, r5, lr}
 801c85e:	4d07      	ldr	r5, [pc, #28]	; (801c87c <_fstat_r+0x20>)
 801c860:	2300      	movs	r3, #0
 801c862:	4604      	mov	r4, r0
 801c864:	4608      	mov	r0, r1
 801c866:	4611      	mov	r1, r2
 801c868:	602b      	str	r3, [r5, #0]
 801c86a:	f7e6 f8a0 	bl	80029ae <_fstat>
 801c86e:	1c43      	adds	r3, r0, #1
 801c870:	d102      	bne.n	801c878 <_fstat_r+0x1c>
 801c872:	682b      	ldr	r3, [r5, #0]
 801c874:	b103      	cbz	r3, 801c878 <_fstat_r+0x1c>
 801c876:	6023      	str	r3, [r4, #0]
 801c878:	bd38      	pop	{r3, r4, r5, pc}
 801c87a:	bf00      	nop
 801c87c:	20010a3c 	.word	0x20010a3c

0801c880 <_isatty_r>:
 801c880:	b538      	push	{r3, r4, r5, lr}
 801c882:	4d06      	ldr	r5, [pc, #24]	; (801c89c <_isatty_r+0x1c>)
 801c884:	2300      	movs	r3, #0
 801c886:	4604      	mov	r4, r0
 801c888:	4608      	mov	r0, r1
 801c88a:	602b      	str	r3, [r5, #0]
 801c88c:	f7e6 f89f 	bl	80029ce <_isatty>
 801c890:	1c43      	adds	r3, r0, #1
 801c892:	d102      	bne.n	801c89a <_isatty_r+0x1a>
 801c894:	682b      	ldr	r3, [r5, #0]
 801c896:	b103      	cbz	r3, 801c89a <_isatty_r+0x1a>
 801c898:	6023      	str	r3, [r4, #0]
 801c89a:	bd38      	pop	{r3, r4, r5, pc}
 801c89c:	20010a3c 	.word	0x20010a3c

0801c8a0 <_init>:
 801c8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c8a2:	bf00      	nop
 801c8a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c8a6:	bc08      	pop	{r3}
 801c8a8:	469e      	mov	lr, r3
 801c8aa:	4770      	bx	lr

0801c8ac <_fini>:
 801c8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c8ae:	bf00      	nop
 801c8b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c8b2:	bc08      	pop	{r3}
 801c8b4:	469e      	mov	lr, r3
 801c8b6:	4770      	bx	lr
