
scorbot_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f6c0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000024a8  0801f8c0  0801f8c0  0002f8c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021d68  08021d68  0004233c  2**0
                  CONTENTS
  4 .ARM          00000008  08021d68  08021d68  00031d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021d70  08021d70  0004233c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000020  08021d70  08021d70  00031d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08021d90  08021d90  00031d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000233c  20000000  08021d98  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000fba4  20002340  080240d4  00042340  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20011ee4  080240d4  00051ee4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0004233c  2**0
                  CONTENTS, READONLY
 12 .comment      00000076  00000000  00000000  0004236a  2**0
                  CONTENTS, READONLY
 13 .debug_info   000356f0  00000000  00000000  000423e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000649f  00000000  00000000  00077ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e48  00000000  00000000  0007df70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001746  00000000  00000000  0007fdb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00035804  00000000  00000000  000814fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002cf7d  00000000  00000000  000b6d02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011f2ad  00000000  00000000  000e3c7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008e9c  00000000  00000000  00202f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0020bdc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20002340 	.word	0x20002340
 800021c:	00000000 	.word	0x00000000
 8000220:	0801f8a8 	.word	0x0801f8a8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20002344 	.word	0x20002344
 800023c:	0801f8a8 	.word	0x0801f8a8

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr
	...

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800032e:	f000 b9bb 	b.w	80006a8 <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003c4:	f000 b970 	b.w	80006a8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9e08      	ldr	r6, [sp, #32]
 80003e6:	460d      	mov	r5, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	460f      	mov	r7, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4694      	mov	ip, r2
 80003f4:	d965      	bls.n	80004c2 <__udivmoddi4+0xe2>
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	b143      	cbz	r3, 800040e <__udivmoddi4+0x2e>
 80003fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000400:	f1c3 0220 	rsb	r2, r3, #32
 8000404:	409f      	lsls	r7, r3
 8000406:	fa20 f202 	lsr.w	r2, r0, r2
 800040a:	4317      	orrs	r7, r2
 800040c:	409c      	lsls	r4, r3
 800040e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000412:	fa1f f58c 	uxth.w	r5, ip
 8000416:	fbb7 f1fe 	udiv	r1, r7, lr
 800041a:	0c22      	lsrs	r2, r4, #16
 800041c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000420:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000424:	fb01 f005 	mul.w	r0, r1, r5
 8000428:	4290      	cmp	r0, r2
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x62>
 800042c:	eb1c 0202 	adds.w	r2, ip, r2
 8000430:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000434:	f080 811c 	bcs.w	8000670 <__udivmoddi4+0x290>
 8000438:	4290      	cmp	r0, r2
 800043a:	f240 8119 	bls.w	8000670 <__udivmoddi4+0x290>
 800043e:	3902      	subs	r1, #2
 8000440:	4462      	add	r2, ip
 8000442:	1a12      	subs	r2, r2, r0
 8000444:	b2a4      	uxth	r4, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000452:	fb00 f505 	mul.w	r5, r0, r5
 8000456:	42a5      	cmp	r5, r4
 8000458:	d90a      	bls.n	8000470 <__udivmoddi4+0x90>
 800045a:	eb1c 0404 	adds.w	r4, ip, r4
 800045e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000462:	f080 8107 	bcs.w	8000674 <__udivmoddi4+0x294>
 8000466:	42a5      	cmp	r5, r4
 8000468:	f240 8104 	bls.w	8000674 <__udivmoddi4+0x294>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000474:	1b64      	subs	r4, r4, r5
 8000476:	2100      	movs	r1, #0
 8000478:	b11e      	cbz	r6, 8000482 <__udivmoddi4+0xa2>
 800047a:	40dc      	lsrs	r4, r3
 800047c:	2300      	movs	r3, #0
 800047e:	e9c6 4300 	strd	r4, r3, [r6]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0xbc>
 800048a:	2e00      	cmp	r6, #0
 800048c:	f000 80ed 	beq.w	800066a <__udivmoddi4+0x28a>
 8000490:	2100      	movs	r1, #0
 8000492:	e9c6 0500 	strd	r0, r5, [r6]
 8000496:	4608      	mov	r0, r1
 8000498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049c:	fab3 f183 	clz	r1, r3
 80004a0:	2900      	cmp	r1, #0
 80004a2:	d149      	bne.n	8000538 <__udivmoddi4+0x158>
 80004a4:	42ab      	cmp	r3, r5
 80004a6:	d302      	bcc.n	80004ae <__udivmoddi4+0xce>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	f200 80f8 	bhi.w	800069e <__udivmoddi4+0x2be>
 80004ae:	1a84      	subs	r4, r0, r2
 80004b0:	eb65 0203 	sbc.w	r2, r5, r3
 80004b4:	2001      	movs	r0, #1
 80004b6:	4617      	mov	r7, r2
 80004b8:	2e00      	cmp	r6, #0
 80004ba:	d0e2      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	e9c6 4700 	strd	r4, r7, [r6]
 80004c0:	e7df      	b.n	8000482 <__udivmoddi4+0xa2>
 80004c2:	b902      	cbnz	r2, 80004c6 <__udivmoddi4+0xe6>
 80004c4:	deff      	udf	#255	; 0xff
 80004c6:	fab2 f382 	clz	r3, r2
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	f040 8090 	bne.w	80005f0 <__udivmoddi4+0x210>
 80004d0:	1a8a      	subs	r2, r1, r2
 80004d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d6:	fa1f fe8c 	uxth.w	lr, ip
 80004da:	2101      	movs	r1, #1
 80004dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004e0:	fb07 2015 	mls	r0, r7, r5, r2
 80004e4:	0c22      	lsrs	r2, r4, #16
 80004e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ea:	fb0e f005 	mul.w	r0, lr, r5
 80004ee:	4290      	cmp	r0, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x124>
 80004f2:	eb1c 0202 	adds.w	r2, ip, r2
 80004f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x122>
 80004fc:	4290      	cmp	r0, r2
 80004fe:	f200 80cb 	bhi.w	8000698 <__udivmoddi4+0x2b8>
 8000502:	4645      	mov	r5, r8
 8000504:	1a12      	subs	r2, r2, r0
 8000506:	b2a4      	uxth	r4, r4
 8000508:	fbb2 f0f7 	udiv	r0, r2, r7
 800050c:	fb07 2210 	mls	r2, r7, r0, r2
 8000510:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000514:	fb0e fe00 	mul.w	lr, lr, r0
 8000518:	45a6      	cmp	lr, r4
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x14e>
 800051c:	eb1c 0404 	adds.w	r4, ip, r4
 8000520:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x14c>
 8000526:	45a6      	cmp	lr, r4
 8000528:	f200 80bb 	bhi.w	80006a2 <__udivmoddi4+0x2c2>
 800052c:	4610      	mov	r0, r2
 800052e:	eba4 040e 	sub.w	r4, r4, lr
 8000532:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000536:	e79f      	b.n	8000478 <__udivmoddi4+0x98>
 8000538:	f1c1 0720 	rsb	r7, r1, #32
 800053c:	408b      	lsls	r3, r1
 800053e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000542:	ea4c 0c03 	orr.w	ip, ip, r3
 8000546:	fa05 f401 	lsl.w	r4, r5, r1
 800054a:	fa20 f307 	lsr.w	r3, r0, r7
 800054e:	40fd      	lsrs	r5, r7
 8000550:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000554:	4323      	orrs	r3, r4
 8000556:	fbb5 f8f9 	udiv	r8, r5, r9
 800055a:	fa1f fe8c 	uxth.w	lr, ip
 800055e:	fb09 5518 	mls	r5, r9, r8, r5
 8000562:	0c1c      	lsrs	r4, r3, #16
 8000564:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000568:	fb08 f50e 	mul.w	r5, r8, lr
 800056c:	42a5      	cmp	r5, r4
 800056e:	fa02 f201 	lsl.w	r2, r2, r1
 8000572:	fa00 f001 	lsl.w	r0, r0, r1
 8000576:	d90b      	bls.n	8000590 <__udivmoddi4+0x1b0>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000580:	f080 8088 	bcs.w	8000694 <__udivmoddi4+0x2b4>
 8000584:	42a5      	cmp	r5, r4
 8000586:	f240 8085 	bls.w	8000694 <__udivmoddi4+0x2b4>
 800058a:	f1a8 0802 	sub.w	r8, r8, #2
 800058e:	4464      	add	r4, ip
 8000590:	1b64      	subs	r4, r4, r5
 8000592:	b29d      	uxth	r5, r3
 8000594:	fbb4 f3f9 	udiv	r3, r4, r9
 8000598:	fb09 4413 	mls	r4, r9, r3, r4
 800059c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005a4:	45a6      	cmp	lr, r4
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x1da>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80005b0:	d26c      	bcs.n	800068c <__udivmoddi4+0x2ac>
 80005b2:	45a6      	cmp	lr, r4
 80005b4:	d96a      	bls.n	800068c <__udivmoddi4+0x2ac>
 80005b6:	3b02      	subs	r3, #2
 80005b8:	4464      	add	r4, ip
 80005ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005be:	fba3 9502 	umull	r9, r5, r3, r2
 80005c2:	eba4 040e 	sub.w	r4, r4, lr
 80005c6:	42ac      	cmp	r4, r5
 80005c8:	46c8      	mov	r8, r9
 80005ca:	46ae      	mov	lr, r5
 80005cc:	d356      	bcc.n	800067c <__udivmoddi4+0x29c>
 80005ce:	d053      	beq.n	8000678 <__udivmoddi4+0x298>
 80005d0:	b156      	cbz	r6, 80005e8 <__udivmoddi4+0x208>
 80005d2:	ebb0 0208 	subs.w	r2, r0, r8
 80005d6:	eb64 040e 	sbc.w	r4, r4, lr
 80005da:	fa04 f707 	lsl.w	r7, r4, r7
 80005de:	40ca      	lsrs	r2, r1
 80005e0:	40cc      	lsrs	r4, r1
 80005e2:	4317      	orrs	r7, r2
 80005e4:	e9c6 7400 	strd	r7, r4, [r6]
 80005e8:	4618      	mov	r0, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005f0:	f1c3 0120 	rsb	r1, r3, #32
 80005f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005f8:	fa20 f201 	lsr.w	r2, r0, r1
 80005fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000600:	409d      	lsls	r5, r3
 8000602:	432a      	orrs	r2, r5
 8000604:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000608:	fa1f fe8c 	uxth.w	lr, ip
 800060c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000610:	fb07 1510 	mls	r5, r7, r0, r1
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800061a:	fb00 f50e 	mul.w	r5, r0, lr
 800061e:	428d      	cmp	r5, r1
 8000620:	fa04 f403 	lsl.w	r4, r4, r3
 8000624:	d908      	bls.n	8000638 <__udivmoddi4+0x258>
 8000626:	eb1c 0101 	adds.w	r1, ip, r1
 800062a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800062e:	d22f      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000630:	428d      	cmp	r5, r1
 8000632:	d92d      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000634:	3802      	subs	r0, #2
 8000636:	4461      	add	r1, ip
 8000638:	1b49      	subs	r1, r1, r5
 800063a:	b292      	uxth	r2, r2
 800063c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000640:	fb07 1115 	mls	r1, r7, r5, r1
 8000644:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000648:	fb05 f10e 	mul.w	r1, r5, lr
 800064c:	4291      	cmp	r1, r2
 800064e:	d908      	bls.n	8000662 <__udivmoddi4+0x282>
 8000650:	eb1c 0202 	adds.w	r2, ip, r2
 8000654:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000658:	d216      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 800065a:	4291      	cmp	r1, r2
 800065c:	d914      	bls.n	8000688 <__udivmoddi4+0x2a8>
 800065e:	3d02      	subs	r5, #2
 8000660:	4462      	add	r2, ip
 8000662:	1a52      	subs	r2, r2, r1
 8000664:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000668:	e738      	b.n	80004dc <__udivmoddi4+0xfc>
 800066a:	4631      	mov	r1, r6
 800066c:	4630      	mov	r0, r6
 800066e:	e708      	b.n	8000482 <__udivmoddi4+0xa2>
 8000670:	4639      	mov	r1, r7
 8000672:	e6e6      	b.n	8000442 <__udivmoddi4+0x62>
 8000674:	4610      	mov	r0, r2
 8000676:	e6fb      	b.n	8000470 <__udivmoddi4+0x90>
 8000678:	4548      	cmp	r0, r9
 800067a:	d2a9      	bcs.n	80005d0 <__udivmoddi4+0x1f0>
 800067c:	ebb9 0802 	subs.w	r8, r9, r2
 8000680:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000684:	3b01      	subs	r3, #1
 8000686:	e7a3      	b.n	80005d0 <__udivmoddi4+0x1f0>
 8000688:	4645      	mov	r5, r8
 800068a:	e7ea      	b.n	8000662 <__udivmoddi4+0x282>
 800068c:	462b      	mov	r3, r5
 800068e:	e794      	b.n	80005ba <__udivmoddi4+0x1da>
 8000690:	4640      	mov	r0, r8
 8000692:	e7d1      	b.n	8000638 <__udivmoddi4+0x258>
 8000694:	46d0      	mov	r8, sl
 8000696:	e77b      	b.n	8000590 <__udivmoddi4+0x1b0>
 8000698:	3d02      	subs	r5, #2
 800069a:	4462      	add	r2, ip
 800069c:	e732      	b.n	8000504 <__udivmoddi4+0x124>
 800069e:	4608      	mov	r0, r1
 80006a0:	e70a      	b.n	80004b8 <__udivmoddi4+0xd8>
 80006a2:	4464      	add	r4, ip
 80006a4:	3802      	subs	r0, #2
 80006a6:	e742      	b.n	800052e <__udivmoddi4+0x14e>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <encoder_callback>:
#include <callbacks.hpp>

void encoder_callback(const void* msgin) { //5 ms di ricezione
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	const racs_services__msg__Encoder* enc_msg =
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	60fb      	str	r3, [r7, #12]
			(const racs_services__msg__Encoder*) msgin;

	ScorBot.toggle(true);
 80006b8:	2101      	movs	r1, #1
 80006ba:	480a      	ldr	r0, [pc, #40]	; (80006e4 <encoder_callback+0x38>)
 80006bc:	f000 fd64 	bl	8001188 <_ZN5Robot6toggleEb>
	ScorBot.setEncoders(enc_msg->encoders);
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	4619      	mov	r1, r3
 80006c4:	4807      	ldr	r0, [pc, #28]	; (80006e4 <encoder_callback+0x38>)
 80006c6:	f000 fce9 	bl	800109c <_ZN5Robot11setEncodersEPKs>
	ScorBot.setStatus(Robot::Status::PID, false);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2102      	movs	r1, #2
 80006ce:	4805      	ldr	r0, [pc, #20]	; (80006e4 <encoder_callback+0x38>)
 80006d0:	f000 fc45 	bl	8000f5e <_ZN5Robot9setStatusENS_6StatusEb>
	ScorBot.toggle(false);
 80006d4:	2100      	movs	r1, #0
 80006d6:	4803      	ldr	r0, [pc, #12]	; (80006e4 <encoder_callback+0x38>)
 80006d8:	f000 fd56 	bl	8001188 <_ZN5Robot6toggleEb>
}
 80006dc:	bf00      	nop
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20002360 	.word	0x20002360

080006e8 <pwm_callback>:

void pwm_callback(const void* msgin) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	const racs_services__msg__DirectAccess* pwm_msg =
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	60fb      	str	r3, [r7, #12]
		(const racs_services__msg__DirectAccess*) msgin;

	ScorBot.setPWMs(pwm_msg->pwms);
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	4619      	mov	r1, r3
 80006f8:	4805      	ldr	r0, [pc, #20]	; (8000710 <pwm_callback+0x28>)
 80006fa:	f000 fcee 	bl	80010da <_ZN5Robot7setPWMsEPKs>
	ScorBot.setStatus(Robot::Status::DAQ, false);
 80006fe:	2200      	movs	r2, #0
 8000700:	2101      	movs	r1, #1
 8000702:	4803      	ldr	r0, [pc, #12]	; (8000710 <pwm_callback+0x28>)
 8000704:	f000 fc2b 	bl	8000f5e <_ZN5Robot9setStatusENS_6StatusEb>
}
 8000708:	bf00      	nop
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20002360 	.word	0x20002360

08000714 <control_callback>:

void control_callback(const void* request_msg, void* response_msg){
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	6039      	str	r1, [r7, #0]
		racs_services__srv__Control_Request* req_in =
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	60fb      	str	r3, [r7, #12]
				(racs_services__srv__Control_Request*) request_msg;
		racs_services__srv__Control_Response* res_in =
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	60bb      	str	r3, [r7, #8]
				(racs_services__srv__Control_Response*) response_msg;
		ScorBot.rcvCtrl(req_in);
 8000726:	68f9      	ldr	r1, [r7, #12]
 8000728:	4805      	ldr	r0, [pc, #20]	; (8000740 <control_callback+0x2c>)
 800072a:	f000 fd3e 	bl	80011aa <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request>
		ScorBot.sndCtrl(res_in);
 800072e:	68b9      	ldr	r1, [r7, #8]
 8000730:	4803      	ldr	r0, [pc, #12]	; (8000740 <control_callback+0x2c>)
 8000732:	f000 fd97 	bl	8001264 <_ZN5Robot7sndCtrlEP36racs_services__srv__Control_Response>
	}
 8000736:	bf00      	nop
 8000738:	3710      	adds	r7, #16
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20002360 	.word	0x20002360

08000744 <setup_callback>:

void setup_callback(const void* request_msg, void* response_msg){
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	6039      	str	r1, [r7, #0]
		racs_services__srv__Setup_Request* req_in =
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	60fb      	str	r3, [r7, #12]
				(racs_services__srv__Setup_Request*) request_msg;
		racs_services__srv__Setup_Response* res_in =
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	60bb      	str	r3, [r7, #8]
				(racs_services__srv__Setup_Response*) response_msg;
		ScorBot.rcvSetup(req_in);
 8000756:	68f9      	ldr	r1, [r7, #12]
 8000758:	4805      	ldr	r0, [pc, #20]	; (8000770 <setup_callback+0x2c>)
 800075a:	f000 fd93 	bl	8001284 <_ZN5Robot8rcvSetupEP33racs_services__srv__Setup_Request>
		ScorBot.sndSetup(res_in);
 800075e:	68b9      	ldr	r1, [r7, #8]
 8000760:	4803      	ldr	r0, [pc, #12]	; (8000770 <setup_callback+0x2c>)
 8000762:	f000 fdef 	bl	8001344 <_ZN5Robot8sndSetupEP34racs_services__srv__Setup_Response>
	}
 8000766:	bf00      	nop
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20002360 	.word	0x20002360

08000774 <feedback_timer_callback>:

void feedback_timer_callback(rcl_timer_t* timer, int64_t last_call_time)
{
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	b091      	sub	sp, #68	; 0x44
 8000778:	af00      	add	r7, sp, #0
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	e9c7 2300 	strd	r2, r3, [r7]
	//UNUSED(timer);
	UNUSED(last_call_time);

	if (timer != NULL) {
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d04a      	beq.n	800081c <feedback_timer_callback+0xa8>
		racs_services__msg__Feedback feedback;
		racs_services__msg__Debug debug;
		rcl_ret_t rc;

		for(uint8_t i = 0; i < 5; i++) {
 8000786:	2300      	movs	r3, #0
 8000788:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800078c:	e013      	b.n	80007b6 <feedback_timer_callback+0x42>
			feedback.encoders[i] = ScorBot.getEncoder(i);
 800078e:	f897 403f 	ldrb.w	r4, [r7, #63]	; 0x3f
 8000792:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000796:	4619      	mov	r1, r3
 8000798:	4822      	ldr	r0, [pc, #136]	; (8000824 <feedback_timer_callback+0xb0>)
 800079a:	f000 fc56 	bl	800104a <_ZN5Robot10getEncoderEh>
 800079e:	4603      	mov	r3, r0
 80007a0:	461a      	mov	r2, r3
 80007a2:	0063      	lsls	r3, r4, #1
 80007a4:	3340      	adds	r3, #64	; 0x40
 80007a6:	443b      	add	r3, r7
 80007a8:	f823 2c14 	strh.w	r2, [r3, #-20]
		for(uint8_t i = 0; i < 5; i++) {
 80007ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80007b0:	3301      	adds	r3, #1
 80007b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80007b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80007ba:	2b04      	cmp	r3, #4
 80007bc:	d9e7      	bls.n	800078e <feedback_timer_callback+0x1a>
		}

		rc = rcl_publish(&feedback_publisher, &feedback, NULL);
 80007be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007c2:	2200      	movs	r2, #0
 80007c4:	4619      	mov	r1, r3
 80007c6:	4818      	ldr	r0, [pc, #96]	; (8000828 <feedback_timer_callback+0xb4>)
 80007c8:	f00d fa24 	bl	800dc14 <rcl_publish>
 80007cc:	63b8      	str	r0, [r7, #56]	; 0x38
		if (rc != RCL_RET_OK) return;
 80007ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d122      	bne.n	800081a <feedback_timer_callback+0xa6>

		for(uint8_t i = 0; i < 1; i++) {
 80007d4:	2300      	movs	r3, #0
 80007d6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80007da:	e00f      	b.n	80007fc <feedback_timer_callback+0x88>
			ScorBot.getPID(0)->show(i, debug);
 80007dc:	2100      	movs	r1, #0
 80007de:	4811      	ldr	r0, [pc, #68]	; (8000824 <feedback_timer_callback+0xb0>)
 80007e0:	f000 fc00 	bl	8000fe4 <_ZN5Robot6getPIDEh>
 80007e4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80007e8:	f107 0214 	add.w	r2, r7, #20
 80007ec:	4619      	mov	r1, r3
 80007ee:	f001 fc97 	bl	8002120 <_ZN3PID4showEiR25racs_services__msg__Debug>
		for(uint8_t i = 0; i < 1; i++) {
 80007f2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80007f6:	3301      	adds	r3, #1
 80007f8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80007fc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000800:	2b00      	cmp	r3, #0
 8000802:	d0eb      	beq.n	80007dc <feedback_timer_callback+0x68>
		}
		rc = rcl_publish(&debug_publisher, &debug, NULL);
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	2200      	movs	r2, #0
 800080a:	4619      	mov	r1, r3
 800080c:	4807      	ldr	r0, [pc, #28]	; (800082c <feedback_timer_callback+0xb8>)
 800080e:	f00d fa01 	bl	800dc14 <rcl_publish>
 8000812:	63b8      	str	r0, [r7, #56]	; 0x38
		if (rc != RCL_RET_OK) return;
 8000814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000816:	2b00      	cmp	r3, #0
 8000818:	e000      	b.n	800081c <feedback_timer_callback+0xa8>
		if (rc != RCL_RET_OK) return;
 800081a:	bf00      	nop
	}
}
 800081c:	3744      	adds	r7, #68	; 0x44
 800081e:	46bd      	mov	sp, r7
 8000820:	bd90      	pop	{r4, r7, pc}
 8000822:	bf00      	nop
 8000824:	20002360 	.word	0x20002360
 8000828:	200067c4 	.word	0x200067c4
 800082c:	200067c8 	.word	0x200067c8

08000830 <robot_timer_callback>:

void robot_timer_callback(rcl_timer_t* timer, int64_t last_call_time)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	e9c7 2300 	strd	r2, r3, [r7]
	UNUSED(last_call_time);
	if (timer != NULL) {
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d002      	beq.n	8000848 <robot_timer_callback+0x18>
		ScorBot.cycle();
 8000842:	4803      	ldr	r0, [pc, #12]	; (8000850 <robot_timer_callback+0x20>)
 8000844:	f000 fe8e 	bl	8001564 <_ZN5Robot5cycleEv>
	}
} // 70 us
 8000848:	bf00      	nop
 800084a:	3710      	adds	r7, #16
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20002360 	.word	0x20002360

08000854 <encoder_timer_callback>:

void encoder_timer_callback(rcl_timer_t* timer, int64_t last_call_time)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08a      	sub	sp, #40	; 0x28
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	e9c7 2300 	strd	r2, r3, [r7]
	UNUSED(last_call_time);
	racs_services__msg__Encoder enc_msg;
	rcl_ret_t rc;
	static uint16_t i = 0;
	enc_msg.encoders[0] = encs[i];
 8000860:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <encoder_timer_callback+0x78>)
 8000862:	881b      	ldrh	r3, [r3, #0]
 8000864:	461a      	mov	r2, r3
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <encoder_timer_callback+0x7c>)
 8000868:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800086c:	82bb      	strh	r3, [r7, #20]
	i = (i >= 1999) ? 0 : i+1;
 800086e:	4b17      	ldr	r3, [pc, #92]	; (80008cc <encoder_timer_callback+0x78>)
 8000870:	881b      	ldrh	r3, [r3, #0]
 8000872:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8000876:	4293      	cmp	r3, r2
 8000878:	d804      	bhi.n	8000884 <encoder_timer_callback+0x30>
 800087a:	4b14      	ldr	r3, [pc, #80]	; (80008cc <encoder_timer_callback+0x78>)
 800087c:	881b      	ldrh	r3, [r3, #0]
 800087e:	3301      	adds	r3, #1
 8000880:	b29b      	uxth	r3, r3
 8000882:	e000      	b.n	8000886 <encoder_timer_callback+0x32>
 8000884:	2300      	movs	r3, #0
 8000886:	4a11      	ldr	r2, [pc, #68]	; (80008cc <encoder_timer_callback+0x78>)
 8000888:	8013      	strh	r3, [r2, #0]
	for (int i = 1; i < 5; i++) {
 800088a:	2301      	movs	r3, #1
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
 800088e:	e009      	b.n	80008a4 <encoder_timer_callback+0x50>
		enc_msg.encoders[i] = 0;
 8000890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	3328      	adds	r3, #40	; 0x28
 8000896:	443b      	add	r3, r7
 8000898:	2200      	movs	r2, #0
 800089a:	f823 2c14 	strh.w	r2, [r3, #-20]
	for (int i = 1; i < 5; i++) {
 800089e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a0:	3301      	adds	r3, #1
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
 80008a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a6:	2b04      	cmp	r3, #4
 80008a8:	ddf2      	ble.n	8000890 <encoder_timer_callback+0x3c>
	}
	if (timer != NULL) {
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d009      	beq.n	80008c4 <encoder_timer_callback+0x70>
		rc = rcl_publish(&encoder_publisher, &enc_msg, NULL);
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	2200      	movs	r2, #0
 80008b6:	4619      	mov	r1, r3
 80008b8:	4806      	ldr	r0, [pc, #24]	; (80008d4 <encoder_timer_callback+0x80>)
 80008ba:	f00d f9ab 	bl	800dc14 <rcl_publish>
 80008be:	6238      	str	r0, [r7, #32]
		if (rc != RCL_RET_OK) return;
 80008c0:	6a3b      	ldr	r3, [r7, #32]
 80008c2:	2b00      	cmp	r3, #0
	}
} // 3 ms
 80008c4:	3728      	adds	r7, #40	; 0x28
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	2000235c 	.word	0x2000235c
 80008d0:	200067d0 	.word	0x200067d0
 80008d4:	200067cc 	.word	0x200067cc

080008d8 <_ZN10IntegratorC1Ev>:


class Integrator //final
{
public:
  Integrator() {}
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4618      	mov	r0, r3
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <_ZN10IntegratorD1Ev>:
  ~Integrator() {}
 80008ee:	b480      	push	{r7}
 80008f0:	b083      	sub	sp, #12
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4618      	mov	r0, r3
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <_ZN6FilterC1Ev>:


class Filter //final
{
public:
  Filter(){}
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	f04f 0200 	mov.w	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	f04f 0200 	mov.w	r2, #0
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	f04f 0200 	mov.w	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	f04f 0200 	mov.w	r2, #0
 800092a:	60da      	str	r2, [r3, #12]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	f04f 0200 	mov.w	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f04f 0200 	mov.w	r2, #0
 800093a:	615a      	str	r2, [r3, #20]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	f04f 0200 	mov.w	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	f04f 0200 	mov.w	r2, #0
 800094a:	61da      	str	r2, [r3, #28]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f04f 0200 	mov.w	r2, #0
 8000952:	621a      	str	r2, [r3, #32]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f04f 0200 	mov.w	r2, #0
 800095a:	625a      	str	r2, [r3, #36]	; 0x24
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4618      	mov	r0, r3
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <_ZN3PIDC1Ev>:


class PID final
{
public:
  PID(){}
 800096a:	b580      	push	{r7, lr}
 800096c:	b082      	sub	sp, #8
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	f04f 0200 	mov.w	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	f04f 0200 	mov.w	r2, #0
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	f04f 0200 	mov.w	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2200      	movs	r2, #0
 800098e:	731a      	strb	r2, [r3, #12]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f04f 0200 	mov.w	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f04f 0200 	mov.w	r2, #0
 800099e:	615a      	str	r2, [r3, #20]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f04f 0200 	mov.w	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	f04f 0200 	mov.w	r2, #0
 80009ae:	61da      	str	r2, [r3, #28]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f04f 0200 	mov.w	r2, #0
 80009b6:	621a      	str	r2, [r3, #32]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f04f 0200 	mov.w	r2, #0
 80009be:	625a      	str	r2, [r3, #36]	; 0x24
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	f04f 0200 	mov.w	r2, #0
 80009c6:	629a      	str	r2, [r3, #40]	; 0x28
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	f04f 0200 	mov.w	r2, #0
 80009ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f04f 0200 	mov.w	r2, #0
 80009d6:	631a      	str	r2, [r3, #48]	; 0x30
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	f04f 0200 	mov.w	r2, #0
 80009de:	635a      	str	r2, [r3, #52]	; 0x34
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	3338      	adds	r3, #56	; 0x38
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff ff77 	bl	80008d8 <_ZN10IntegratorC1Ev>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	3348      	adds	r3, #72	; 0x48
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff ff88 	bl	8000904 <_ZN6FilterC1Ev>
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3370      	adds	r3, #112	; 0x70
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff ff83 	bl	8000904 <_ZN6FilterC1Ev>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4618      	mov	r0, r3
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <_ZN10PinControlC1EP12GPIO_TypeDeft>:

PinControl::PinControl() {

}

PinControl::PinControl(GPIO_TypeDef* port, uint16_t pin){
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	4613      	mov	r3, r2
 8000a14:	80fb      	strh	r3, [r7, #6]
  this->port = port;
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	68ba      	ldr	r2, [r7, #8]
 8000a1a:	601a      	str	r2, [r3, #0]
  this->pin = pin;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	88fa      	ldrh	r2, [r7, #6]
 8000a20:	809a      	strh	r2, [r3, #4]
  setLimits(0.0, 0.0);
 8000a22:	eddf 0a06 	vldr	s1, [pc, #24]	; 8000a3c <_ZN10PinControlC1EP12GPIO_TypeDeft+0x34>
 8000a26:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8000a3c <_ZN10PinControlC1EP12GPIO_TypeDeft+0x34>
 8000a2a:	68f8      	ldr	r0, [r7, #12]
 8000a2c:	f000 f808 	bl	8000a40 <_ZN10PinControl9setLimitsEff>
}
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	4618      	mov	r0, r3
 8000a34:	3710      	adds	r7, #16
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	00000000 	.word	0x00000000

08000a40 <_ZN10PinControl9setLimitsEff>:
  this->port = port;
  this->pin = pin;
  setLimits(v1, v2);
}

void PinControl::setLimits(float v1, float v2){
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	ed87 0a02 	vstr	s0, [r7, #8]
 8000a4c:	edc7 0a01 	vstr	s1, [r7, #4]
  this->v1 = v1;
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	609a      	str	r2, [r3, #8]
  this->v2 = v2;
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	687a      	ldr	r2, [r7, #4]
 8000a5a:	60da      	str	r2, [r3, #12]
}
 8000a5c:	bf00      	nop
 8000a5e:	3714      	adds	r7, #20
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <_ZN10PinControl3setEb>:

void PinControl::set(bool state){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	460b      	mov	r3, r1
 8000a72:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(port, pin, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6818      	ldr	r0, [r3, #0]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	8899      	ldrh	r1, [r3, #4]
 8000a7c:	78fb      	ldrb	r3, [r7, #3]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <_ZN10PinControl3setEb+0x1e>
 8000a82:	2301      	movs	r3, #1
 8000a84:	e000      	b.n	8000a88 <_ZN10PinControl3setEb+0x20>
 8000a86:	2300      	movs	r3, #0
 8000a88:	461a      	mov	r2, r3
 8000a8a:	f004 fce7 	bl	800545c <HAL_GPIO_WritePin>
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
	...

08000a98 <_ZN10PinMeasureC1EP12GPIO_TypeDeft>:

PinMeasure::PinMeasure() {

}

PinMeasure::PinMeasure(GPIO_TypeDef* port, uint16_t pin){
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	80fb      	strh	r3, [r7, #6]
  this->port = port;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	68ba      	ldr	r2, [r7, #8]
 8000aaa:	601a      	str	r2, [r3, #0]
  this->pin = pin;
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	88fa      	ldrh	r2, [r7, #6]
 8000ab0:	809a      	strh	r2, [r3, #4]
  setLimits(0.0, 0.0);
 8000ab2:	eddf 0a06 	vldr	s1, [pc, #24]	; 8000acc <_ZN10PinMeasureC1EP12GPIO_TypeDeft+0x34>
 8000ab6:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8000acc <_ZN10PinMeasureC1EP12GPIO_TypeDeft+0x34>
 8000aba:	68f8      	ldr	r0, [r7, #12]
 8000abc:	f000 f808 	bl	8000ad0 <_ZN10PinMeasure9setLimitsEff>
}
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	00000000 	.word	0x00000000

08000ad0 <_ZN10PinMeasure9setLimitsEff>:
  this->port = port;
  this->pin = pin;
  setLimits(v1, v2);
}

void PinMeasure::setLimits(float v1, float v2){
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	ed87 0a02 	vstr	s0, [r7, #8]
 8000adc:	edc7 0a01 	vstr	s1, [r7, #4]
  this->v1 = v1;
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	68ba      	ldr	r2, [r7, #8]
 8000ae4:	609a      	str	r2, [r3, #8]
  this->v2 = v2;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	60da      	str	r2, [r3, #12]
}
 8000aec:	bf00      	nop
 8000aee:	3714      	adds	r7, #20
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <_ZN10PinMeasure5stateEv>:

bool PinMeasure::state(){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  return HAL_GPIO_ReadPin(port, pin);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	889b      	ldrh	r3, [r3, #4]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	f004 fc8e 	bl	800542c <HAL_GPIO_ReadPin>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	bf14      	ite	ne
 8000b16:	2301      	movne	r3, #1
 8000b18:	2300      	moveq	r3, #0
 8000b1a:	b2db      	uxtb	r3, r3
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefh10PinMeasure>:
Motor::Motor(PinControl &INA, PinControl &INB,
			 TIM_HandleTypeDef* htimPWM, uint8_t CCRx,
			 TIM_HandleTypeDef* htimENC, PinMeasure &END)
  : pin_INA(INA), pin_INB(INB), htimPWM(htimPWM), CCRx(CCRx), htimENC(htimENC), pin_END(END) {}
*/
Motor::Motor(PinControl INA, PinControl INB,
 8000b24:	b084      	sub	sp, #16
 8000b26:	b490      	push	{r4, r7}
 8000b28:	b082      	sub	sp, #8
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
 8000b2e:	f107 0014 	add.w	r0, r7, #20
 8000b32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
			 TIM_HandleTypeDef* htimPWM, uint8_t CCRx,
			 PinMeasure END)
  : pin_INA(INA), pin_INB(INB), htimPWM(htimPWM), CCRx(CCRx), htimENC(NULL), pin_END(END){}
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	461c      	mov	r4, r3
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f103 0410 	add.w	r4, r3, #16
 8000b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b58:	621a      	str	r2, [r3, #32]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000b60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2200      	movs	r2, #0
 8000b68:	629a      	str	r2, [r3, #40]	; 0x28
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8000b70:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bc90      	pop	{r4, r7}
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefhS2_10PinMeasure>:

Motor::Motor(PinControl INA, PinControl INB,
 8000b88:	b084      	sub	sp, #16
 8000b8a:	b490      	push	{r4, r7}
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
 8000b92:	f107 0014 	add.w	r0, r7, #20
 8000b96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
			 TIM_HandleTypeDef* htimPWM, uint8_t CCRx,
			 TIM_HandleTypeDef* htimENC, PinMeasure END)
  : pin_INA(INA), pin_INB(INB), htimPWM(htimPWM), CCRx(CCRx), htimENC(htimENC), pin_END(END){}
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	461c      	mov	r4, r3
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ba4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f103 0410 	add.w	r4, r3, #16
 8000bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000bbc:	621a      	str	r2, [r3, #32]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000bc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000bcc:	629a      	str	r2, [r3, #40]	; 0x28
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8000bd4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bd8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4618      	mov	r0, r3
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc90      	pop	{r4, r7}
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <_ZN5MotorD1Ev>:


Motor::~Motor() {}
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <_ZN5Motor10getEncoderEv>:

/*void Motor::invertEncoder(bool invert){
  this->encoder_invert = invert;
}*/

int16_t Motor::getEncoder(){
 8000c02:	b480      	push	{r7}
 8000c04:	b083      	sub	sp, #12
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
  if (htimENC != NULL) {
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d009      	beq.n	8000c26 <_ZN5Motor10getEncoderEv+0x24>
	  return htimENC->Instance->CNT - (HALF_ENC+1);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	b21b      	sxth	r3, r3
 8000c24:	e000      	b.n	8000c28 <_ZN5Motor10getEncoderEv+0x26>
  } else {
	  return 0;
 8000c26:	2300      	movs	r3, #0
  }
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <_ZN5Motor10driveMotorEs>:

void Motor::driveMotor(int16_t spwm){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	807b      	strh	r3, [r7, #2]
  OperatingMode mode = OperatingMode::BRAKE_GND;
 8000c40:	2300      	movs	r3, #0
 8000c42:	60fb      	str	r3, [r7, #12]
  spwm = spwm > -(HALF_PWM+1) ? spwm : -(HALF_PWM+1);
  spwm = spwm < HALF_PWM ? spwm : HALF_PWM;
  //spwm = (int16_t) std::min(std::max(spwm, (int16_t) -(HALF_PWM+1)), (int16_t) HALF_PWM);

  if(spwm > 0) {
 8000c44:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	dd02      	ble.n	8000c52 <_ZN5Motor10driveMotorEs+0x1e>
    mode = OperatingMode::SPIN_CW;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	e008      	b.n	8000c64 <_ZN5Motor10driveMotorEs+0x30>
  } else if (spwm < 0) {
 8000c52:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	da02      	bge.n	8000c60 <_ZN5Motor10driveMotorEs+0x2c>
    mode = OperatingMode::SPIN_CCW;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	e001      	b.n	8000c64 <_ZN5Motor10driveMotorEs+0x30>
  } else {
    mode = OperatingMode::BRAKE_GND;
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]
  }

  switch(mode){
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	2b03      	cmp	r3, #3
 8000c68:	d83a      	bhi.n	8000ce0 <_ZN5Motor10driveMotorEs+0xac>
 8000c6a:	a201      	add	r2, pc, #4	; (adr r2, 8000c70 <_ZN5Motor10driveMotorEs+0x3c>)
 8000c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c70:	08000c81 	.word	0x08000c81
 8000c74:	08000c99 	.word	0x08000c99
 8000c78:	08000cb1 	.word	0x08000cb1
 8000c7c:	08000cc9 	.word	0x08000cc9
    case OperatingMode::BRAKE_GND:
      pin_INA.set(false);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2100      	movs	r1, #0
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff feef 	bl	8000a68 <_ZN10PinControl3setEb>
      pin_INB.set(false);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	3310      	adds	r3, #16
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff fee9 	bl	8000a68 <_ZN10PinControl3setEb>
      break;
 8000c96:	e023      	b.n	8000ce0 <_ZN5Motor10driveMotorEs+0xac>
    case OperatingMode::SPIN_CCW:
      pin_INA.set(false);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fee3 	bl	8000a68 <_ZN10PinControl3setEb>
      pin_INB.set(true);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	3310      	adds	r3, #16
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff fedd 	bl	8000a68 <_ZN10PinControl3setEb>
      break;
 8000cae:	e017      	b.n	8000ce0 <_ZN5Motor10driveMotorEs+0xac>
    case OperatingMode::SPIN_CW:
      pin_INA.set(true);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fed7 	bl	8000a68 <_ZN10PinControl3setEb>
      pin_INB.set(false);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	3310      	adds	r3, #16
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fed1 	bl	8000a68 <_ZN10PinControl3setEb>
      break;
 8000cc6:	e00b      	b.n	8000ce0 <_ZN5Motor10driveMotorEs+0xac>
    case OperatingMode::BRAKE_VCC:
      pin_INA.set(true);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2101      	movs	r1, #1
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff fecb 	bl	8000a68 <_ZN10PinControl3setEb>
      pin_INB.set(true);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	3310      	adds	r3, #16
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fec5 	bl	8000a68 <_ZN10PinControl3setEb>
      break;
 8000cde:	bf00      	nop
  }
  switch(CCRx) {
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	2b05      	cmp	r3, #5
 8000cea:	d851      	bhi.n	8000d90 <_ZN5Motor10driveMotorEs+0x15c>
 8000cec:	a201      	add	r2, pc, #4	; (adr r2, 8000cf4 <_ZN5Motor10driveMotorEs+0xc0>)
 8000cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cf2:	bf00      	nop
 8000cf4:	08000d0d 	.word	0x08000d0d
 8000cf8:	08000d23 	.word	0x08000d23
 8000cfc:	08000d39 	.word	0x08000d39
 8000d00:	08000d4f 	.word	0x08000d4f
 8000d04:	08000d65 	.word	0x08000d65
 8000d08:	08000d7b 	.word	0x08000d7b
    case 1:
      htimPWM->Instance->CCR1 = (uint16_t) abs(spwm);
 8000d0c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	bfb8      	it	lt
 8000d14:	425b      	neglt	r3, r3
 8000d16:	b29a      	uxth	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6a1b      	ldr	r3, [r3, #32]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	635a      	str	r2, [r3, #52]	; 0x34
      break;
 8000d20:	e036      	b.n	8000d90 <_ZN5Motor10driveMotorEs+0x15c>
    case 2:
      htimPWM->Instance->CCR2 = (uint16_t) abs(spwm);
 8000d22:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	bfb8      	it	lt
 8000d2a:	425b      	neglt	r3, r3
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6a1b      	ldr	r3, [r3, #32]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	639a      	str	r2, [r3, #56]	; 0x38
      break;
 8000d36:	e02b      	b.n	8000d90 <_ZN5Motor10driveMotorEs+0x15c>
    case 3:
      htimPWM->Instance->CCR3 = (uint16_t) abs(spwm);
 8000d38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	bfb8      	it	lt
 8000d40:	425b      	neglt	r3, r3
 8000d42:	b29a      	uxth	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6a1b      	ldr	r3, [r3, #32]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8000d4c:	e020      	b.n	8000d90 <_ZN5Motor10driveMotorEs+0x15c>
    case 4:
      htimPWM->Instance->CCR4 = (uint16_t) abs(spwm);
 8000d4e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	bfb8      	it	lt
 8000d56:	425b      	neglt	r3, r3
 8000d58:	b29a      	uxth	r2, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6a1b      	ldr	r3, [r3, #32]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8000d62:	e015      	b.n	8000d90 <_ZN5Motor10driveMotorEs+0x15c>
    case 5:
      htimPWM->Instance->CCR5 = (uint16_t) abs(spwm);
 8000d64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	bfb8      	it	lt
 8000d6c:	425b      	neglt	r3, r3
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6a1b      	ldr	r3, [r3, #32]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8000d78:	e00a      	b.n	8000d90 <_ZN5Motor10driveMotorEs+0x15c>
    case 6:
      htimPWM->Instance->CCR6 = (uint16_t) abs(spwm);
 8000d7a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	bfb8      	it	lt
 8000d82:	425b      	neglt	r3, r3
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6a1b      	ldr	r3, [r3, #32]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8000d8e:	bf00      	nop

  }
}
 8000d90:	bf00      	nop
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <_ZN5Motor11isInEndStopEv>:

bool Motor::isInEndStop(){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  return pin_END.state();
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	332c      	adds	r3, #44	; 0x2c
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fea7 	bl	8000af8 <_ZN10PinMeasure5stateEv>
 8000daa:	4603      	mov	r3, r0
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <_ZN3PIDD1Ev>:
class PID final
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3338      	adds	r3, #56	; 0x38
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fd94 	bl	80008ee <_ZN10IntegratorD1Ev>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <_ZN5RobotC1E10PinControlS0_mhPP5MotorPf>:

Robot::Robot() {}

/*Robot::Robot(PinControl &enable, PinControl &toggle, unsigned long ts_ms, uint8_t size, Motor **motors, float *encs_div)
  : motors(motors), error_div(encs_div), pin_enable(enable), pin_toggle(toggle) {*/
Robot::Robot(PinControl enable, PinControl toggle, unsigned long ts_ms, uint8_t size, Motor **motors, float *encs_div)
 8000dd0:	b084      	sub	sp, #16
 8000dd2:	b590      	push	{r4, r7, lr}
 8000dd4:	b0ab      	sub	sp, #172	; 0xac
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
 8000dda:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
 8000dde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  : pin_enable(enable), pin_toggle(toggle), motors(motors), error_div(encs_div) {
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	461c      	mov	r4, r3
 8000de6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000dea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f103 0410 	add.w	r4, r3, #16
 8000df6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000dfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8000e06:	629a      	str	r2, [r3, #40]	; 0x28
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000e0e:	641a      	str	r2, [r3, #64]	; 0x40

  this->ts = ts_ms;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000e16:	621a      	str	r2, [r3, #32]
  //this->motors = 		(Motor**)	malloc(size * sizeof(Motor*));
  this->pids = 			(PID*)		malloc(size * sizeof(PID));
 8000e18:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 8000e1c:	2298      	movs	r2, #152	; 0x98
 8000e1e:	fb02 f303 	mul.w	r3, r2, r3
 8000e22:	4618      	mov	r0, r3
 8000e24:	f01d f9ba 	bl	801e19c <malloc>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	62da      	str	r2, [r3, #44]	; 0x2c
  this->switches = 		(bool*) 	malloc(size * sizeof(bool));
 8000e30:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f01d f9b1 	bl	801e19c <malloc>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	635a      	str	r2, [r3, #52]	; 0x34
  this->motors_pwm = 	(int16_t*) 	malloc(size * sizeof(int16_t));
 8000e42:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f01d f9a7 	bl	801e19c <malloc>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	461a      	mov	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	639a      	str	r2, [r3, #56]	; 0x38
  this->encoders =		(int16_t*)	malloc(size * sizeof(int16_t));
 8000e56:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f01d f99d 	bl	801e19c <malloc>
 8000e62:	4603      	mov	r3, r0
 8000e64:	461a      	mov	r2, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	63da      	str	r2, [r3, #60]	; 0x3c
  //this->error_div = 	(float*) 	malloc(size * sizeof(float));

  this->size = size;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f897 20e0 	ldrb.w	r2, [r7, #224]	; 0xe0
 8000e70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  this->status = Status::Idle;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2200      	movs	r2, #0
 8000e78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  for(int i = 0; i < size; i++){
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000e82:	e034      	b.n	8000eee <_ZN5RobotC1E10PinControlS0_mhPP5MotorPf+0x11e>
    this->switches[i] = false;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e88:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000e8c:	4413      	add	r3, r2
 8000e8e:	2200      	movs	r2, #0
 8000e90:	701a      	strb	r2, [r3, #0]
    this->motors_pwm[i] = 0;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	4413      	add	r3, r2
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	801a      	strh	r2, [r3, #0]
    this->encoders[i] = 0;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ea6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	4413      	add	r3, r2
 8000eae:	2200      	movs	r2, #0
 8000eb0:	801a      	strh	r2, [r3, #0]
    this->pids[i] = PID();
 8000eb2:	f107 030c 	add.w	r3, r7, #12
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff fd57 	bl	800096a <_ZN3PIDC1Ev>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ec0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000ec4:	2198      	movs	r1, #152	; 0x98
 8000ec6:	fb01 f303 	mul.w	r3, r1, r3
 8000eca:	4413      	add	r3, r2
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f107 030c 	add.w	r3, r7, #12
 8000ed2:	2298      	movs	r2, #152	; 0x98
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f01d fe0a 	bl	801eaee <memcpy>
 8000eda:	f107 030c 	add.w	r3, r7, #12
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff ff68 	bl	8000db4 <_ZN3PIDD1Ev>
  for(int i = 0; i < size; i++){
 8000ee4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000ee8:	3301      	adds	r3, #1
 8000eea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000eee:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 8000ef2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	dbc4      	blt.n	8000e84 <_ZN5RobotC1E10PinControlS0_mhPP5MotorPf+0xb4>
  }

  update();
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f000 fa30 	bl	8001360 <_ZN5Robot6updateEv>
}
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4618      	mov	r0, r3
 8000f04:	37ac      	adds	r7, #172	; 0xac
 8000f06:	46bd      	mov	sp, r7
 8000f08:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000f0c:	b004      	add	sp, #16
 8000f0e:	4770      	bx	lr

08000f10 <_ZN5RobotD1Ev>:
  : Robot(enable, toggle,ts_ms, size, motors, NULL) {}

Robot::Robot(PinControl enable, PinControl toggle, unsigned long ts_ms, uint8_t size)
  : Robot(enable, toggle,ts_ms, size, NULL, NULL) {}

Robot::~Robot() {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  free(this->motors);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f01d f945 	bl	801e1ac <free>
  free(this->pids);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f26:	4618      	mov	r0, r3
 8000f28:	f01d f940 	bl	801e1ac <free>
  free(this->switches);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f30:	4618      	mov	r0, r3
 8000f32:	f01d f93b 	bl	801e1ac <free>
  free(this->motors_pwm);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f01d f936 	bl	801e1ac <free>
  free(this->encoders);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f44:	4618      	mov	r0, r3
 8000f46:	f01d f931 	bl	801e1ac <free>
  free(this->error_div);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f01d f92c 	bl	801e1ac <free>
}
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <_ZN5Robot9setStatusENS_6StatusEb>:

Robot::Status Robot::getStatus(){
  return this->status;
}

void Robot::setStatus(Status status, bool reset = false){
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
 8000f66:	460b      	mov	r3, r1
 8000f68:	70fb      	strb	r3, [r7, #3]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	70bb      	strb	r3, [r7, #2]
  if(this->status != status || reset){
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000f74:	78fa      	ldrb	r2, [r7, #3]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d102      	bne.n	8000f80 <_ZN5Robot9setStatusENS_6StatusEb+0x22>
 8000f7a:	78bb      	ldrb	r3, [r7, #2]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d006      	beq.n	8000f8e <_ZN5Robot9setStatusENS_6StatusEb+0x30>
    resetPIDs();
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f000 f842 	bl	800100a <_ZN5Robot9resetPIDsEv>
    this->status = status;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	78fa      	ldrb	r2, [r7, #3]
 8000f8a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  }
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <_ZN5Robot8getMotorEh>:

Motor * Robot::getMotor(uint8_t index){
 8000f96:	b480      	push	{r7}
 8000f98:	b083      	sub	sp, #12
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	70fb      	strb	r3, [r7, #3]
  return this->motors[index];
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fa6:	78fb      	ldrb	r3, [r7, #3]
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	4413      	add	r3, r2
 8000fac:	681b      	ldr	r3, [r3, #0]
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <_ZN5Robot17setEncoderDividerEhf>:
void Robot::setMotor(uint8_t index, Motor * motor, float enc_div){
  this->motors[index] = motor;
  this->error_div[index] = enc_div;
}

void Robot::setEncoderDivider(uint8_t index, float enc_div){
 8000fba:	b480      	push	{r7}
 8000fbc:	b085      	sub	sp, #20
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	60f8      	str	r0, [r7, #12]
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fc8:	72fb      	strb	r3, [r7, #11]
  this->error_div[index] = enc_div;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fce:	7afb      	ldrb	r3, [r7, #11]
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	4413      	add	r3, r2
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	601a      	str	r2, [r3, #0]
}
 8000fd8:	bf00      	nop
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <_ZN5Robot6getPIDEh>:

PID * Robot::getPID(uint8_t index){
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	460b      	mov	r3, r1
 8000fee:	70fb      	strb	r3, [r7, #3]
  return &(this->pids[index]);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ff4:	78fb      	ldrb	r3, [r7, #3]
 8000ff6:	2198      	movs	r1, #152	; 0x98
 8000ff8:	fb01 f303 	mul.w	r3, r1, r3
 8000ffc:	4413      	add	r3, r2
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <_ZN5Robot9resetPIDsEv>:
  for(int i = 0; i < size; i++){
    getPID(i)->setup(kp, ki, kd);
  }
}

void Robot::resetPIDs(){
 800100a:	b580      	push	{r7, lr}
 800100c:	b084      	sub	sp, #16
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < size; i++){
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	e00c      	b.n	8001032 <_ZN5Robot9resetPIDsEv+0x28>
    getPID(i)->reset();
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	b2db      	uxtb	r3, r3
 800101c:	4619      	mov	r1, r3
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff ffe0 	bl	8000fe4 <_ZN5Robot6getPIDEh>
 8001024:	4603      	mov	r3, r0
 8001026:	4618      	mov	r0, r3
 8001028:	f000 ff84 	bl	8001f34 <_ZN3PID5resetEv>
  for(int i = 0; i < size; i++){
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	3301      	adds	r3, #1
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001038:	461a      	mov	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4293      	cmp	r3, r2
 800103e:	dbeb      	blt.n	8001018 <_ZN5Robot9resetPIDsEv+0xe>
  }
}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <_ZN5Robot10getEncoderEh>:

int16_t Robot::getEncoder(uint8_t index) {
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
 8001052:	460b      	mov	r3, r1
 8001054:	70fb      	strb	r3, [r7, #3]
	return getMotor(index)->getEncoder();
 8001056:	78fb      	ldrb	r3, [r7, #3]
 8001058:	4619      	mov	r1, r3
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff ff9b 	bl	8000f96 <_ZN5Robot8getMotorEh>
 8001060:	4603      	mov	r3, r0
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fdcd 	bl	8000c02 <_ZN5Motor10getEncoderEv>
 8001068:	4603      	mov	r3, r0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <_ZN5Robot10setEncoderEhs>:

void Robot::setEncoder(uint8_t i, const int16_t enc) {
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	460b      	mov	r3, r1
 800107c:	70fb      	strb	r3, [r7, #3]
 800107e:	4613      	mov	r3, r2
 8001080:	803b      	strh	r3, [r7, #0]
	encoders[i] = enc;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001086:	78fb      	ldrb	r3, [r7, #3]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	4413      	add	r3, r2
 800108c:	883a      	ldrh	r2, [r7, #0]
 800108e:	801a      	strh	r2, [r3, #0]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <_ZN5Robot11setEncodersEPKs>:

void Robot::setEncoders(const int16_t *encs) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  for(int i = 0; i < 5; i++) {
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	e00e      	b.n	80010ca <_ZN5Robot11setEncodersEPKs+0x2e>
    setEncoder(i, encs[i]);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	b2d9      	uxtb	r1, r3
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	4413      	add	r3, r2
 80010b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010bc:	461a      	mov	r2, r3
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff ffd7 	bl	8001072 <_ZN5Robot10setEncoderEhs>
  for(int i = 0; i < 5; i++) {
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	3301      	adds	r3, #1
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2b04      	cmp	r3, #4
 80010ce:	dded      	ble.n	80010ac <_ZN5Robot11setEncodersEPKs+0x10>
  }
}
 80010d0:	bf00      	nop
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <_ZN5Robot7setPWMsEPKs>:

void Robot::setPWMs(const int16_t *pwms){
 80010da:	b580      	push	{r7, lr}
 80010dc:	b084      	sub	sp, #16
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
 80010e2:	6039      	str	r1, [r7, #0]
  for(int i = 0; i < size; i++){
 80010e4:	2300      	movs	r3, #0
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	e00e      	b.n	8001108 <_ZN5Robot7setPWMsEPKs+0x2e>
    setPWM(i, pwms[i]);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	b2d9      	uxtb	r1, r3
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	683a      	ldr	r2, [r7, #0]
 80010f4:	4413      	add	r3, r2
 80010f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010fa:	461a      	mov	r2, r3
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f000 f80f 	bl	8001120 <_ZN5Robot6setPWMEhs>
  for(int i = 0; i < size; i++){
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	3301      	adds	r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800110e:	461a      	mov	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4293      	cmp	r3, r2
 8001114:	dbe9      	blt.n	80010ea <_ZN5Robot7setPWMsEPKs+0x10>
  }
}
 8001116:	bf00      	nop
 8001118:	bf00      	nop
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <_ZN5Robot6setPWMEhs>:

void Robot::setPWM(uint8_t index, const int16_t pwm){
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	460b      	mov	r3, r1
 800112a:	70fb      	strb	r3, [r7, #3]
 800112c:	4613      	mov	r3, r2
 800112e:	803b      	strh	r3, [r7, #0]
  motors_pwm[index] = pwm;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001134:	78fb      	ldrb	r3, [r7, #3]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	4413      	add	r3, r2
 800113a:	883a      	ldrh	r2, [r7, #0]
 800113c:	801a      	strh	r2, [r3, #0]

}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <_ZN5Robot9resetPWMsEv>:

void Robot::resetPWMs(){
 800114a:	b480      	push	{r7}
 800114c:	b085      	sub	sp, #20
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < size; i++){
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	e009      	b.n	800116c <_ZN5Robot9resetPWMsEv+0x22>
    motors_pwm[i] = 0;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	4413      	add	r3, r2
 8001162:	2200      	movs	r2, #0
 8001164:	801a      	strh	r2, [r3, #0]
  for(int i = 0; i < size; i++){
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	3301      	adds	r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001172:	461a      	mov	r2, r3
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	4293      	cmp	r3, r2
 8001178:	dbee      	blt.n	8001158 <_ZN5Robot9resetPWMsEv+0xe>
  }
}
 800117a:	bf00      	nop
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <_ZN5Robot6toggleEb>:
void Robot::disableMotors(){
  setStatus(Status::Idle, true);
  pin_enable.set(false);
}

void Robot::toggle(bool in) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	70fb      	strb	r3, [r7, #3]
	pin_toggle.set(in);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3310      	adds	r3, #16
 8001198:	78fa      	ldrb	r2, [r7, #3]
 800119a:	4611      	mov	r1, r2
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff fc63 	bl	8000a68 <_ZN10PinControl3setEb>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request>:

void Robot::rcvCtrl(racs_services__srv__Control_Request* request){
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b084      	sub	sp, #16
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
 80011b2:	6039      	str	r1, [r7, #0]

  if(request->command > 2) {
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	785b      	ldrb	r3, [r3, #1]
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d905      	bls.n	80011c8 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x1e>
    setStatus(Status::Idle, true);
 80011bc:	2201      	movs	r2, #1
 80011be:	2100      	movs	r1, #0
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff fecc 	bl	8000f5e <_ZN5Robot9setStatusENS_6StatusEb>
    return;
 80011c6:	e04a      	b.n	800125e <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0xb4>
  }

  switch(request->command){
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	785b      	ldrb	r3, [r3, #1]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d002      	beq.n	80011d6 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x2c>
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d01c      	beq.n	800120e <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x64>
 80011d4:	e03c      	b.n	8001250 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0xa6>
    case (unsigned char) Command::Idle:
      for(int i = 0; i < size; i++) {
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	e010      	b.n	80011fe <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x54>
        motors_pwm[i] = 0;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	4413      	add	r3, r2
 80011e6:	2200      	movs	r2, #0
 80011e8:	801a      	strh	r2, [r3, #0]
        encoders[i] = 0;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	4413      	add	r3, r2
 80011f4:	2200      	movs	r2, #0
 80011f6:	801a      	strh	r2, [r3, #0]
      for(int i = 0; i < size; i++) {
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	3301      	adds	r3, #1
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001204:	461a      	mov	r2, r3
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	4293      	cmp	r3, r2
 800120a:	dbe7      	blt.n	80011dc <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x32>
      }
      break;
 800120c:	e020      	b.n	8001250 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0xa6>

    case (unsigned char) Command::PID:
      for(int i = 0; i < size; i++) {
 800120e:	2300      	movs	r3, #0
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	e015      	b.n	8001240 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x96>
        motors_pwm[i] = 0;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	4413      	add	r3, r2
 800121e:	2200      	movs	r2, #0
 8001220:	801a      	strh	r2, [r3, #0]
        encoders[i] = request->encoders[i];
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	441a      	add	r2, r3
 800122c:	6839      	ldr	r1, [r7, #0]
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	440b      	add	r3, r1
 8001234:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001238:	8013      	strh	r3, [r2, #0]
      for(int i = 0; i < size; i++) {
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	3301      	adds	r3, #1
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001246:	461a      	mov	r2, r3
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	4293      	cmp	r3, r2
 800124c:	dbe2      	blt.n	8001214 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x6a>
      }
      break;
 800124e:	bf00      	nop
  }

  setStatus((Status) request->command);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	785b      	ldrb	r3, [r3, #1]
 8001254:	2200      	movs	r2, #0
 8001256:	4619      	mov	r1, r3
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff fe80 	bl	8000f5e <_ZN5Robot9setStatusENS_6StatusEb>
}
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <_ZN5Robot7sndCtrlEP36racs_services__srv__Control_Response>:

void Robot::sndCtrl(racs_services__srv__Control_Response* response){
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
	response->response = (uint8_t) status;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	701a      	strb	r2, [r3, #0]
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <_ZN5Robot8rcvSetupEP33racs_services__srv__Setup_Request>:

void Robot::rcvSetup(racs_services__srv__Setup_Request* request){
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]

  setEncoderDivider(request->motor_index, request->eed);
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	781a      	ldrb	r2, [r3, #0]
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	edd3 7a01 	vldr	s15, [r3, #4]
 8001298:	eeb0 0a67 	vmov.f32	s0, s15
 800129c:	4611      	mov	r1, r2
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff fe8b 	bl	8000fba <_ZN5Robot17setEncoderDividerEhf>
  getPID(request->motor_index)->reset();
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	4619      	mov	r1, r3
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff fe9a 	bl	8000fe4 <_ZN5Robot6getPIDEh>
 80012b0:	4603      	mov	r3, r0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 fe3e 	bl	8001f34 <_ZN3PID5resetEv>
  getPID(request->motor_index)->init((float) ts/1000.0, request->tau, request->sat, true);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	4619      	mov	r1, r3
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff fe90 	bl	8000fe4 <_ZN5Robot6getPIDEh>
 80012c4:	4602      	mov	r2, r0
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a1b      	ldr	r3, [r3, #32]
 80012ca:	ee07 3a90 	vmov	s15, r3
 80012ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012d2:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001340 <_ZN5Robot8rcvSetupEP33racs_services__srv__Setup_Request+0xbc>
 80012d6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	edd3 7a05 	vldr	s15, [r3, #20]
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	edd3 6a06 	vldr	s13, [r3, #24]
 80012e6:	2101      	movs	r1, #1
 80012e8:	eeb0 1a66 	vmov.f32	s2, s13
 80012ec:	eef0 0a67 	vmov.f32	s1, s15
 80012f0:	eeb0 0a47 	vmov.f32	s0, s14
 80012f4:	4610      	mov	r0, r2
 80012f6:	f000 fd83 	bl	8001e00 <_ZN3PID4initEfffb>
  getPID(request->motor_index)->setup(request->p, request->i, request->d);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	4619      	mov	r1, r3
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff fe6f 	bl	8000fe4 <_ZN5Robot6getPIDEh>
 8001306:	4602      	mov	r2, r0
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	edd3 7a02 	vldr	s15, [r3, #8]
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	ed93 7a03 	vldr	s14, [r3, #12]
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	edd3 6a04 	vldr	s13, [r3, #16]
 800131a:	eeb0 1a66 	vmov.f32	s2, s13
 800131e:	eef0 0a47 	vmov.f32	s1, s14
 8001322:	eeb0 0a67 	vmov.f32	s0, s15
 8001326:	4610      	mov	r0, r2
 8001328:	f000 fdea 	bl	8001f00 <_ZN3PID5setupEfff>

  setStatus(Status::Idle, true);
 800132c:	2201      	movs	r2, #1
 800132e:	2100      	movs	r1, #0
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff fe14 	bl	8000f5e <_ZN5Robot9setStatusENS_6StatusEb>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	447a0000 	.word	0x447a0000

08001344 <_ZN5Robot8sndSetupEP34racs_services__srv__Setup_Response>:

void Robot::sndSetup(racs_services__srv__Setup_Response* response){
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  response->response = (uint8_t) Status::Setup;
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	2203      	movs	r2, #3
 8001352:	701a      	strb	r2, [r3, #0]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <_ZN5Robot6updateEv>:

void Robot::update(){
 8001360:	b590      	push	{r4, r7, lr}
 8001362:	ed2d 8b02 	vpush	{d8}
 8001366:	b089      	sub	sp, #36	; 0x24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  switch(status){
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001372:	2b02      	cmp	r3, #2
 8001374:	d00c      	beq.n	8001390 <_ZN5Robot6updateEv+0x30>
 8001376:	2b02      	cmp	r3, #2
 8001378:	f200 809b 	bhi.w	80014b2 <_ZN5Robot6updateEv+0x152>
 800137c:	2b00      	cmp	r3, #0
 800137e:	d003      	beq.n	8001388 <_ZN5Robot6updateEv+0x28>
 8001380:	2b01      	cmp	r3, #1
 8001382:	f000 80a1 	beq.w	80014c8 <_ZN5Robot6updateEv+0x168>
 8001386:	e094      	b.n	80014b2 <_ZN5Robot6updateEv+0x152>
    case Status::Idle:
      resetPWMs();
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff fede 	bl	800114a <_ZN5Robot9resetPWMsEv>
      break;
 800138e:	e09c      	b.n	80014ca <_ZN5Robot6updateEv+0x16a>

    case Status::DAQ:
      break;

    case Status::PID:
      for(int i = 0; i < 1; i++){
 8001390:	2300      	movs	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]
 8001394:	e088      	b.n	80014a8 <_ZN5Robot6updateEv+0x148>
        float getpid = getPID(i)->evolve(
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	b2db      	uxtb	r3, r3
 800139a:	4619      	mov	r1, r3
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7ff fe21 	bl	8000fe4 <_ZN5Robot6getPIDEh>
 80013a2:	4604      	mov	r4, r0
        		encoders[i] / 				((error_div[i] == 0) ? 1.0 : error_div[i]),
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	4413      	add	r3, r2
 80013ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b2:	ee07 3a90 	vmov	s15, r3
 80013b6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4413      	add	r3, r2
 80013c4:	edd3 7a00 	vldr	s15, [r3]
 80013c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d0:	d009      	beq.n	80013e6 <_ZN5Robot6updateEv+0x86>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4413      	add	r3, r2
 80013dc:	edd3 7a00 	vldr	s15, [r3]
 80013e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013e4:	e001      	b.n	80013ea <_ZN5Robot6updateEv+0x8a>
 80013e6:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80013ea:	ee85 6b07 	vdiv.f64	d6, d5, d7
        float getpid = getPID(i)->evolve(
 80013ee:	eeb7 8bc6 	vcvt.f32.f64	s16, d6
				getMotor(i)->getEncoder() / ((error_div[i] == 0) ? 1.0 : error_div[i])
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	4619      	mov	r1, r3
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff fdcc 	bl	8000f96 <_ZN5Robot8getMotorEh>
 80013fe:	4603      	mov	r3, r0
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff fbfe 	bl	8000c02 <_ZN5Motor10getEncoderEv>
 8001406:	4603      	mov	r3, r0
 8001408:	ee07 3a90 	vmov	s15, r3
 800140c:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4413      	add	r3, r2
 800141a:	edd3 7a00 	vldr	s15, [r3]
 800141e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001426:	d009      	beq.n	800143c <_ZN5Robot6updateEv+0xdc>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4413      	add	r3, r2
 8001432:	edd3 7a00 	vldr	s15, [r3]
 8001436:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800143a:	e001      	b.n	8001440 <_ZN5Robot6updateEv+0xe0>
 800143c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8001440:	ee85 6b07 	vdiv.f64	d6, d5, d7
        float getpid = getPID(i)->evolve(
 8001444:	eef7 7bc6 	vcvt.f32.f64	s15, d6
 8001448:	eef0 0a67 	vmov.f32	s1, s15
 800144c:	eeb0 0a48 	vmov.f32	s0, s16
 8001450:	4620      	mov	r0, r4
 8001452:	f000 fe49 	bl	80020e8 <_ZN3PID6evolveEff>
 8001456:	eef0 7a40 	vmov.f32	s15, s0
				);
 800145a:	edc7 7a03 	vstr	s15, [r7, #12]
    	motors_pwm[i] = (int16_t) std::min(std::max((float) -(HALF_PWM+1), getpid), (float) HALF_PWM);
 800145e:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	f107 020c 	add.w	r2, r7, #12
 8001468:	f107 0310 	add.w	r3, r7, #16
 800146c:	4611      	mov	r1, r2
 800146e:	4618      	mov	r0, r3
 8001470:	f000 fbd0 	bl	8001c14 <_ZSt3maxIfERKT_S2_S2_>
 8001474:	4602      	mov	r2, r0
 8001476:	4b27      	ldr	r3, [pc, #156]	; (8001514 <_ZN5Robot6updateEv+0x1b4>)
 8001478:	617b      	str	r3, [r7, #20]
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	4619      	mov	r1, r3
 8001480:	4610      	mov	r0, r2
 8001482:	f000 fbe0 	bl	8001c46 <_ZSt3minIfERKT_S2_S2_>
 8001486:	4603      	mov	r3, r0
 8001488:	edd3 7a00 	vldr	s15, [r3]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	4413      	add	r3, r2
 8001496:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800149a:	ee17 2a90 	vmov	r2, s15
 800149e:	b212      	sxth	r2, r2
 80014a0:	801a      	strh	r2, [r3, #0]
      for(int i = 0; i < 1; i++){
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3301      	adds	r3, #1
 80014a6:	61fb      	str	r3, [r7, #28]
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f77f af73 	ble.w	8001396 <_ZN5Robot6updateEv+0x36>
      }
      break;
 80014b0:	e00b      	b.n	80014ca <_ZN5Robot6updateEv+0x16a>

    default:
      resetPWMs();
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff fe49 	bl	800114a <_ZN5Robot9resetPWMsEv>
      resetPIDs();
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f7ff fda6 	bl	800100a <_ZN5Robot9resetPIDsEv>
      status = Status::Idle;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      break;
 80014c6:	e000      	b.n	80014ca <_ZN5Robot6updateEv+0x16a>
      break;
 80014c8:	bf00      	nop
  }

  for(int i = 0; i < size; i++){
 80014ca:	2300      	movs	r3, #0
 80014cc:	61bb      	str	r3, [r7, #24]
 80014ce:	e012      	b.n	80014f6 <_ZN5Robot6updateEv+0x196>
    switches[i] = getMotor(i)->isInEndStop();
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	4619      	mov	r1, r3
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff fd5d 	bl	8000f96 <_ZN5Robot8getMotorEh>
 80014dc:	4601      	mov	r1, r0
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	18d4      	adds	r4, r2, r3
 80014e6:	4608      	mov	r0, r1
 80014e8:	f7ff fc56 	bl	8000d98 <_ZN5Motor11isInEndStopEv>
 80014ec:	4603      	mov	r3, r0
 80014ee:	7023      	strb	r3, [r4, #0]
  for(int i = 0; i < size; i++){
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	3301      	adds	r3, #1
 80014f4:	61bb      	str	r3, [r7, #24]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014fc:	461a      	mov	r2, r3
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	4293      	cmp	r3, r2
 8001502:	dbe5      	blt.n	80014d0 <_ZN5Robot6updateEv+0x170>
  }
}
 8001504:	bf00      	nop
 8001506:	bf00      	nop
 8001508:	3724      	adds	r7, #36	; 0x24
 800150a:	46bd      	mov	sp, r7
 800150c:	ecbd 8b02 	vpop	{d8}
 8001510:	bd90      	pop	{r4, r7, pc}
 8001512:	bf00      	nop
 8001514:	46ffff00 	.word	0x46ffff00

08001518 <_ZN5Robot7actuateEv>:

void Robot::actuate(){
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < size; i++){
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	e012      	b.n	800154c <_ZN5Robot7actuateEv+0x34>
    getMotor(i)->driveMotor(motors_pwm[i]);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	b2db      	uxtb	r3, r3
 800152a:	4619      	mov	r1, r3
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff fd32 	bl	8000f96 <_ZN5Robot8getMotorEh>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	4413      	add	r3, r2
 800153c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001540:	4619      	mov	r1, r3
 8001542:	f7ff fb77 	bl	8000c34 <_ZN5Motor10driveMotorEs>
  for(int i = 0; i < size; i++){
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	3301      	adds	r3, #1
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001552:	461a      	mov	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4293      	cmp	r3, r2
 8001558:	dbe5      	blt.n	8001526 <_ZN5Robot7actuateEv+0xe>
  }
}
 800155a:	bf00      	nop
 800155c:	bf00      	nop
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <_ZN5Robot5cycleEv>:

void Robot::cycle(){
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
        update();
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff fef7 	bl	8001360 <_ZN5Robot6updateEv>
        actuate();
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7ff ffd0 	bl	8001518 <_ZN5Robot7actuateEv>
}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <_Z12create_robotv>:

Robot create_robot() {
 8001580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001582:	f5ad 7d3b 	sub.w	sp, sp, #748	; 0x2ec
 8001586:	af0c      	add	r7, sp, #48	; 0x30
 8001588:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800158c:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001590:	6018      	str	r0, [r3, #0]

	PinControl mot1_ina = PinControl(MOTOR1_INA_GPIO_Port, MOTOR1_INA_Pin);
 8001592:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8001596:	2201      	movs	r2, #1
 8001598:	49cd      	ldr	r1, [pc, #820]	; (80018d0 <_Z12create_robotv+0x350>)
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff fa34 	bl	8000a08 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot1_inb = PinControl(MOTOR1_INB_GPIO_Port, MOTOR1_INB_Pin);
 80015a0:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80015a4:	2202      	movs	r2, #2
 80015a6:	49ca      	ldr	r1, [pc, #808]	; (80018d0 <_Z12create_robotv+0x350>)
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff fa2d 	bl	8000a08 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot1_end = PinMeasure(MOTOR1_END_GPIO_Port, MOTOR1_END_Pin);
 80015ae:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80015b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015b6:	49c7      	ldr	r1, [pc, #796]	; (80018d4 <_Z12create_robotv+0x354>)
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff fa6d 	bl	8000a98 <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot2_ina = PinControl(MOTOR2_INA_GPIO_Port, MOTOR2_INA_Pin);
 80015be:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80015c2:	2204      	movs	r2, #4
 80015c4:	49c2      	ldr	r1, [pc, #776]	; (80018d0 <_Z12create_robotv+0x350>)
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fa1e 	bl	8000a08 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot2_inb = PinControl(MOTOR2_INB_GPIO_Port, MOTOR2_INB_Pin);
 80015cc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80015d0:	2208      	movs	r2, #8
 80015d2:	49bf      	ldr	r1, [pc, #764]	; (80018d0 <_Z12create_robotv+0x350>)
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fa17 	bl	8000a08 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot2_end = PinMeasure(MOTOR2_END_GPIO_Port, MOTOR2_END_Pin);
 80015da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80015de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015e2:	49bc      	ldr	r1, [pc, #752]	; (80018d4 <_Z12create_robotv+0x354>)
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff fa57 	bl	8000a98 <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot3_ina = PinControl(MOTOR3_INA_GPIO_Port, MOTOR3_INA_Pin);
 80015ea:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80015ee:	2210      	movs	r2, #16
 80015f0:	49b7      	ldr	r1, [pc, #732]	; (80018d0 <_Z12create_robotv+0x350>)
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fa08 	bl	8000a08 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot3_inb = PinControl(MOTOR3_INB_GPIO_Port, MOTOR3_INB_Pin);
 80015f8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80015fc:	2220      	movs	r2, #32
 80015fe:	49b4      	ldr	r1, [pc, #720]	; (80018d0 <_Z12create_robotv+0x350>)
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff fa01 	bl	8000a08 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot3_end = PinMeasure(MOTOR3_END_GPIO_Port, MOTOR3_END_Pin);
 8001606:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800160a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800160e:	49b1      	ldr	r1, [pc, #708]	; (80018d4 <_Z12create_robotv+0x354>)
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fa41 	bl	8000a98 <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot4_ina = PinControl(MOTOR4_INA_GPIO_Port, MOTOR4_INA_Pin);
 8001616:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800161a:	2240      	movs	r2, #64	; 0x40
 800161c:	49ac      	ldr	r1, [pc, #688]	; (80018d0 <_Z12create_robotv+0x350>)
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff f9f2 	bl	8000a08 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot4_inb = PinControl(MOTOR4_INB_GPIO_Port, MOTOR4_INB_Pin);
 8001624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001628:	2280      	movs	r2, #128	; 0x80
 800162a:	49a9      	ldr	r1, [pc, #676]	; (80018d0 <_Z12create_robotv+0x350>)
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff f9eb 	bl	8000a08 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot4_end = PinMeasure(MOTOR4_END_GPIO_Port, MOTOR4_END_Pin);
 8001632:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8001636:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800163a:	49a6      	ldr	r1, [pc, #664]	; (80018d4 <_Z12create_robotv+0x354>)
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fa2b 	bl	8000a98 <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot5_ina = PinControl(MOTOR5_INA_GPIO_Port, MOTOR5_INA_Pin);
 8001642:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001646:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800164a:	49a1      	ldr	r1, [pc, #644]	; (80018d0 <_Z12create_robotv+0x350>)
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff f9db 	bl	8000a08 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot5_inb = PinControl(MOTOR5_INB_GPIO_Port, MOTOR5_INB_Pin);
 8001652:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8001656:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800165a:	499d      	ldr	r1, [pc, #628]	; (80018d0 <_Z12create_robotv+0x350>)
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff f9d3 	bl	8000a08 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot5_end = PinMeasure(MOTOR5_END_GPIO_Port, MOTOR5_END_Pin);
 8001662:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001666:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800166a:	499a      	ldr	r1, [pc, #616]	; (80018d4 <_Z12create_robotv+0x354>)
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fa13 	bl	8000a98 <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot6_ina = PinControl(MOTOR6_INA_GPIO_Port, MOTOR6_INA_Pin);
 8001672:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001676:	2204      	movs	r2, #4
 8001678:	4996      	ldr	r1, [pc, #600]	; (80018d4 <_Z12create_robotv+0x354>)
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff f9c4 	bl	8000a08 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot6_inb = PinControl(MOTOR6_INB_GPIO_Port, MOTOR6_INB_Pin);
 8001680:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001684:	2208      	movs	r2, #8
 8001686:	4993      	ldr	r1, [pc, #588]	; (80018d4 <_Z12create_robotv+0x354>)
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff f9bd 	bl	8000a08 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot6_end = PinMeasure(MOTOR6_END_GPIO_Port, MOTOR6_END_Pin);
 800168e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001692:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001696:	498f      	ldr	r1, [pc, #572]	; (80018d4 <_Z12create_robotv+0x354>)
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff f9fd 	bl	8000a98 <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl enable = PinControl(MOTORS_EN_GPIO_Port, MOTORS_EN_Pin);
 800169e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80016a2:	2240      	movs	r2, #64	; 0x40
 80016a4:	498b      	ldr	r1, [pc, #556]	; (80018d4 <_Z12create_robotv+0x354>)
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff f9ae 	bl	8000a08 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl toggle = PinControl(PIN_TOGGLE_GPIO_Port, PIN_TOGGLE_Pin);
 80016ac:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80016b0:	2220      	movs	r2, #32
 80016b2:	4988      	ldr	r1, [pc, #544]	; (80018d4 <_Z12create_robotv+0x354>)
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff f9a7 	bl	8000a08 <_ZN10PinControlC1EP12GPIO_TypeDeft>

	Motor motor1 = Motor(mot1_ina, mot1_inb, &htim1, 1, &htim2, mot1_end);
 80016ba:	f507 759a 	add.w	r5, r7, #308	; 0x134
 80016be:	ac08      	add	r4, sp, #32
 80016c0:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80016c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80016ca:	4b83      	ldr	r3, [pc, #524]	; (80018d8 <_Z12create_robotv+0x358>)
 80016cc:	9307      	str	r3, [sp, #28]
 80016ce:	2301      	movs	r3, #1
 80016d0:	9306      	str	r3, [sp, #24]
 80016d2:	4b82      	ldr	r3, [pc, #520]	; (80018dc <_Z12create_robotv+0x35c>)
 80016d4:	9305      	str	r3, [sp, #20]
 80016d6:	ac01      	add	r4, sp, #4
 80016d8:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80016dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80016e2:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80016ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016ee:	4628      	mov	r0, r5
 80016f0:	f7ff fa4a 	bl	8000b88 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefhS2_10PinMeasure>
	Motor motor2 = Motor(mot2_ina, mot2_inb, &htim1, 2, &htim3, mot2_end);
 80016f4:	f107 05f8 	add.w	r5, r7, #248	; 0xf8
 80016f8:	ac08      	add	r4, sp, #32
 80016fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80016fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001700:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001704:	4b76      	ldr	r3, [pc, #472]	; (80018e0 <_Z12create_robotv+0x360>)
 8001706:	9307      	str	r3, [sp, #28]
 8001708:	2302      	movs	r3, #2
 800170a:	9306      	str	r3, [sp, #24]
 800170c:	4b73      	ldr	r3, [pc, #460]	; (80018dc <_Z12create_robotv+0x35c>)
 800170e:	9305      	str	r3, [sp, #20]
 8001710:	ac01      	add	r4, sp, #4
 8001712:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001716:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001718:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800171c:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8001726:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001728:	4628      	mov	r0, r5
 800172a:	f7ff fa2d 	bl	8000b88 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefhS2_10PinMeasure>
	Motor motor3 = Motor(mot3_ina, mot3_inb, &htim1, 3, &htim4, mot3_end);
 800172e:	f107 05bc 	add.w	r5, r7, #188	; 0xbc
 8001732:	ac08      	add	r4, sp, #32
 8001734:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001738:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800173a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800173e:	4b69      	ldr	r3, [pc, #420]	; (80018e4 <_Z12create_robotv+0x364>)
 8001740:	9307      	str	r3, [sp, #28]
 8001742:	2303      	movs	r3, #3
 8001744:	9306      	str	r3, [sp, #24]
 8001746:	4b65      	ldr	r3, [pc, #404]	; (80018dc <_Z12create_robotv+0x35c>)
 8001748:	9305      	str	r3, [sp, #20]
 800174a:	ac01      	add	r4, sp, #4
 800174c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001750:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001752:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001756:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001760:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001762:	4628      	mov	r0, r5
 8001764:	f7ff fa10 	bl	8000b88 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefhS2_10PinMeasure>
	Motor motor4 = Motor(mot4_ina, mot4_inb, &htim1, 4, &htim5, mot4_end);
 8001768:	f107 0580 	add.w	r5, r7, #128	; 0x80
 800176c:	ac08      	add	r4, sp, #32
 800176e:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8001772:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001774:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001778:	4b5b      	ldr	r3, [pc, #364]	; (80018e8 <_Z12create_robotv+0x368>)
 800177a:	9307      	str	r3, [sp, #28]
 800177c:	2304      	movs	r3, #4
 800177e:	9306      	str	r3, [sp, #24]
 8001780:	4b56      	ldr	r3, [pc, #344]	; (80018dc <_Z12create_robotv+0x35c>)
 8001782:	9305      	str	r3, [sp, #20]
 8001784:	ac01      	add	r4, sp, #4
 8001786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800178a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800178c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001790:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800179a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800179c:	4628      	mov	r0, r5
 800179e:	f7ff f9f3 	bl	8000b88 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefhS2_10PinMeasure>
	Motor motor5 = Motor(mot5_ina, mot5_inb, &htim9, 1, &htim8, mot5_end);
 80017a2:	f107 0544 	add.w	r5, r7, #68	; 0x44
 80017a6:	ac08      	add	r4, sp, #32
 80017a8:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80017ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80017b2:	4b4e      	ldr	r3, [pc, #312]	; (80018ec <_Z12create_robotv+0x36c>)
 80017b4:	9307      	str	r3, [sp, #28]
 80017b6:	2301      	movs	r3, #1
 80017b8:	9306      	str	r3, [sp, #24]
 80017ba:	4b4d      	ldr	r3, [pc, #308]	; (80018f0 <_Z12create_robotv+0x370>)
 80017bc:	9305      	str	r3, [sp, #20]
 80017be:	ac01      	add	r4, sp, #4
 80017c0:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80017c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80017ca:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80017d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017d6:	4628      	mov	r0, r5
 80017d8:	f7ff f9d6 	bl	8000b88 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefhS2_10PinMeasure>
	Motor motor6 = Motor(mot6_ina, mot6_inb, &htim9, 2, 		mot6_end);
 80017dc:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80017e0:	f5a3 7484 	sub.w	r4, r3, #264	; 0x108
 80017e4:	f107 0608 	add.w	r6, r7, #8
 80017e8:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80017ec:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80017f0:	ad07      	add	r5, sp, #28
 80017f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017f4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80017f8:	2302      	movs	r3, #2
 80017fa:	9306      	str	r3, [sp, #24]
 80017fc:	4b3c      	ldr	r3, [pc, #240]	; (80018f0 <_Z12create_robotv+0x370>)
 80017fe:	9305      	str	r3, [sp, #20]
 8001800:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001804:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001808:	ad01      	add	r5, sp, #4
 800180a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800180c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001810:	68e3      	ldr	r3, [r4, #12]
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001818:	4630      	mov	r0, r6
 800181a:	f7ff f983 	bl	8000b24 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefh10PinMeasure>

	Motor** motors = (Motor**) malloc(sizeof(Motor*)*6);
 800181e:	2018      	movs	r0, #24
 8001820:	f01c fcbc 	bl	801e19c <malloc>
 8001824:	4603      	mov	r3, r0
 8001826:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
	float* encs_div = (float*) malloc(sizeof(float)*6);
 800182a:	2018      	movs	r0, #24
 800182c:	f01c fcb6 	bl	801e19c <malloc>
 8001830:	4603      	mov	r3, r0
 8001832:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0

	motors[0] = &motor1; motors[1] = &motor2; motors[2] = &motor3; motors[3] = &motor4; motors[4] = &motor5; motors[5] = &motor6;
 8001836:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 800183a:	f507 729a 	add.w	r2, r7, #308	; 0x134
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8001844:	3304      	adds	r3, #4
 8001846:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8001850:	3308      	adds	r3, #8
 8001852:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 800185c:	330c      	adds	r3, #12
 800185e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8001868:	3310      	adds	r3, #16
 800186a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8001874:	3314      	adds	r3, #20
 8001876:	f107 0208 	add.w	r2, r7, #8
 800187a:	601a      	str	r2, [r3, #0]
	encs_div[0] = 1; encs_div[1] = 1; encs_div[2] = 1; encs_div[3] = 1; encs_div[4] = 1; encs_div[5] = 1;
 800187c:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8001880:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 800188a:	3304      	adds	r3, #4
 800188c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8001896:	3308      	adds	r3, #8
 8001898:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 80018a2:	330c      	adds	r3, #12
 80018a4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 80018ae:	3310      	adds	r3, #16
 80018b0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 80018ba:	3314      	adds	r3, #20
 80018bc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80018c0:	601a      	str	r2, [r3, #0]
	Robot myRobot = Robot(enable, toggle, TS, 6, motors, encs_div);
 80018c2:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80018c6:	f5a3 749c 	sub.w	r4, r3, #312	; 0x138
 80018ca:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80018ce:	e023      	b.n	8001918 <_Z12create_robotv+0x398>
 80018d0:	40020c00 	.word	0x40020c00
 80018d4:	40021800 	.word	0x40021800
 80018d8:	2000781c 	.word	0x2000781c
 80018dc:	200077d0 	.word	0x200077d0
 80018e0:	20007868 	.word	0x20007868
 80018e4:	200078b4 	.word	0x200078b4
 80018e8:	20007900 	.word	0x20007900
 80018ec:	2000794c 	.word	0x2000794c
 80018f0:	20007998 	.word	0x20007998
 80018f4:	00000000 	.word	0x00000000
 80018f8:	437a0000 	.word	0x437a0000
 80018fc:	469c4000 	.word	0x469c4000
 8001900:	43480000 	.word	0x43480000
 8001904:	42c80000 	.word	0x42c80000
 8001908:	43960000 	.word	0x43960000
 800190c:	461c4000 	.word	0x461c4000
 8001910:	3dcccccd 	.word	0x3dcccccd
 8001914:	3a83126f 	.word	0x3a83126f
 8001918:	f5a3 762d 	sub.w	r6, r3, #692	; 0x2b4
 800191c:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8001920:	9308      	str	r3, [sp, #32]
 8001922:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8001926:	9307      	str	r3, [sp, #28]
 8001928:	2306      	movs	r3, #6
 800192a:	9306      	str	r3, [sp, #24]
 800192c:	2301      	movs	r3, #1
 800192e:	9305      	str	r3, [sp, #20]
 8001930:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001934:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001938:	ad01      	add	r5, sp, #4
 800193a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800193c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001940:	68e3      	ldr	r3, [r4, #12]
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001948:	6830      	ldr	r0, [r6, #0]
 800194a:	f7ff fa41 	bl	8000dd0 <_ZN5RobotC1E10PinControlS0_mhPP5MotorPf>

	myRobot.setStatus(Robot::Status::Idle, true);
 800194e:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001952:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001956:	2201      	movs	r2, #1
 8001958:	2100      	movs	r1, #0
 800195a:	6818      	ldr	r0, [r3, #0]
 800195c:	f7ff faff 	bl	8000f5e <_ZN5Robot9setStatusENS_6StatusEb>

	myRobot.setEncoderDivider(0, ENC_1_DIV);
 8001960:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001964:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001968:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800196c:	2100      	movs	r1, #0
 800196e:	6818      	ldr	r0, [r3, #0]
 8001970:	f7ff fb23 	bl	8000fba <_ZN5Robot17setEncoderDividerEhf>
	myRobot.getPID(0)->reset();
 8001974:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001978:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800197c:	2100      	movs	r1, #0
 800197e:	6818      	ldr	r0, [r3, #0]
 8001980:	f7ff fb30 	bl	8000fe4 <_ZN5Robot6getPIDEh>
 8001984:	4603      	mov	r3, r0
 8001986:	4618      	mov	r0, r3
 8001988:	f000 fad4 	bl	8001f34 <_ZN3PID5resetEv>
	myRobot.getPID(0)->setup(PID_1_KP, PID_1_KI, PID_1_KD);
 800198c:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001990:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001994:	2100      	movs	r1, #0
 8001996:	6818      	ldr	r0, [r3, #0]
 8001998:	f7ff fb24 	bl	8000fe4 <_ZN5Robot6getPIDEh>
 800199c:	4603      	mov	r3, r0
 800199e:	eeb2 1a0e 	vmov.f32	s2, #46	; 0x41700000  15.0
 80019a2:	ed5f 0a2c 	vldr	s1, [pc, #-176]	; 80018f4 <_Z12create_robotv+0x374>
 80019a6:	ed1f 0a2c 	vldr	s0, [pc, #-176]	; 80018f8 <_Z12create_robotv+0x378>
 80019aa:	4618      	mov	r0, r3
 80019ac:	f000 faa8 	bl	8001f00 <_ZN3PID5setupEfff>
	myRobot.getPID(0)->init((float) TS/1000.0, PID_1_POLE, PID_1_SAT, true);
 80019b0:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80019b4:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 80019b8:	2100      	movs	r1, #0
 80019ba:	6818      	ldr	r0, [r3, #0]
 80019bc:	f7ff fb12 	bl	8000fe4 <_ZN5Robot6getPIDEh>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2101      	movs	r1, #1
 80019c4:	ed1f 1a33 	vldr	s2, [pc, #-204]	; 80018fc <_Z12create_robotv+0x37c>
 80019c8:	eef5 0a00 	vmov.f32	s1, #80	; 0x3e800000  0.250
 80019cc:	ed1f 0a2f 	vldr	s0, [pc, #-188]	; 8001914 <_Z12create_robotv+0x394>
 80019d0:	4618      	mov	r0, r3
 80019d2:	f000 fa15 	bl	8001e00 <_ZN3PID4initEfffb>

	myRobot.setEncoderDivider(1, ENC_2_DIV);
 80019d6:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80019da:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 80019de:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80019e2:	2101      	movs	r1, #1
 80019e4:	6818      	ldr	r0, [r3, #0]
 80019e6:	f7ff fae8 	bl	8000fba <_ZN5Robot17setEncoderDividerEhf>
	myRobot.getPID(1)->reset();
 80019ea:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80019ee:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 80019f2:	2101      	movs	r1, #1
 80019f4:	6818      	ldr	r0, [r3, #0]
 80019f6:	f7ff faf5 	bl	8000fe4 <_ZN5Robot6getPIDEh>
 80019fa:	4603      	mov	r3, r0
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 fa99 	bl	8001f34 <_ZN3PID5resetEv>
	myRobot.getPID(1)->setup(PID_2_KP, PID_2_KI, PID_2_KD);
 8001a02:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001a06:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	6818      	ldr	r0, [r3, #0]
 8001a0e:	f7ff fae9 	bl	8000fe4 <_ZN5Robot6getPIDEh>
 8001a12:	4603      	mov	r3, r0
 8001a14:	ed1f 1a46 	vldr	s2, [pc, #-280]	; 8001900 <_Z12create_robotv+0x380>
 8001a18:	ed5f 0a46 	vldr	s1, [pc, #-280]	; 8001904 <_Z12create_robotv+0x384>
 8001a1c:	ed1f 0a46 	vldr	s0, [pc, #-280]	; 8001908 <_Z12create_robotv+0x388>
 8001a20:	4618      	mov	r0, r3
 8001a22:	f000 fa6d 	bl	8001f00 <_ZN3PID5setupEfff>
	myRobot.getPID(1)->init((float) TS/1000.0, PID_2_POLE, PID_2_SAT, true);
 8001a26:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001a2a:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001a2e:	2101      	movs	r1, #1
 8001a30:	6818      	ldr	r0, [r3, #0]
 8001a32:	f7ff fad7 	bl	8000fe4 <_ZN5Robot6getPIDEh>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2101      	movs	r1, #1
 8001a3a:	ed1f 1a4c 	vldr	s2, [pc, #-304]	; 800190c <_Z12create_robotv+0x38c>
 8001a3e:	ed5f 0a4c 	vldr	s1, [pc, #-304]	; 8001910 <_Z12create_robotv+0x390>
 8001a42:	ed1f 0a4c 	vldr	s0, [pc, #-304]	; 8001914 <_Z12create_robotv+0x394>
 8001a46:	4618      	mov	r0, r3
 8001a48:	f000 f9da 	bl	8001e00 <_ZN3PID4initEfffb>

	myRobot.setEncoderDivider(2, ENC_3_DIV);
 8001a4c:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001a50:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001a54:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001a58:	2102      	movs	r1, #2
 8001a5a:	6818      	ldr	r0, [r3, #0]
 8001a5c:	f7ff faad 	bl	8000fba <_ZN5Robot17setEncoderDividerEhf>
	myRobot.getPID(2)->reset();
 8001a60:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001a64:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001a68:	2102      	movs	r1, #2
 8001a6a:	6818      	ldr	r0, [r3, #0]
 8001a6c:	f7ff faba 	bl	8000fe4 <_ZN5Robot6getPIDEh>
 8001a70:	4603      	mov	r3, r0
 8001a72:	4618      	mov	r0, r3
 8001a74:	f000 fa5e 	bl	8001f34 <_ZN3PID5resetEv>
	myRobot.getPID(2)->setup(PID_3_KP, PID_3_KI, PID_3_KD);
 8001a78:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001a7c:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001a80:	2102      	movs	r1, #2
 8001a82:	6818      	ldr	r0, [r3, #0]
 8001a84:	f7ff faae 	bl	8000fe4 <_ZN5Robot6getPIDEh>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	ed1f 1a63 	vldr	s2, [pc, #-396]	; 8001900 <_Z12create_robotv+0x380>
 8001a8e:	ed5f 0a63 	vldr	s1, [pc, #-396]	; 8001904 <_Z12create_robotv+0x384>
 8001a92:	ed1f 0a63 	vldr	s0, [pc, #-396]	; 8001908 <_Z12create_robotv+0x388>
 8001a96:	4618      	mov	r0, r3
 8001a98:	f000 fa32 	bl	8001f00 <_ZN3PID5setupEfff>
	myRobot.getPID(2)->init((float) TS/1000.0, PID_3_POLE, PID_3_SAT, true);
 8001a9c:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001aa0:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001aa4:	2102      	movs	r1, #2
 8001aa6:	6818      	ldr	r0, [r3, #0]
 8001aa8:	f7ff fa9c 	bl	8000fe4 <_ZN5Robot6getPIDEh>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2101      	movs	r1, #1
 8001ab0:	ed1f 1a6a 	vldr	s2, [pc, #-424]	; 800190c <_Z12create_robotv+0x38c>
 8001ab4:	ed5f 0a6a 	vldr	s1, [pc, #-424]	; 8001910 <_Z12create_robotv+0x390>
 8001ab8:	ed1f 0a6a 	vldr	s0, [pc, #-424]	; 8001914 <_Z12create_robotv+0x394>
 8001abc:	4618      	mov	r0, r3
 8001abe:	f000 f99f 	bl	8001e00 <_ZN3PID4initEfffb>

	myRobot.setEncoderDivider(3, ENC_4_DIV);
 8001ac2:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001ac6:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001aca:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001ace:	2103      	movs	r1, #3
 8001ad0:	6818      	ldr	r0, [r3, #0]
 8001ad2:	f7ff fa72 	bl	8000fba <_ZN5Robot17setEncoderDividerEhf>
	myRobot.getPID(3)->reset();
 8001ad6:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001ada:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001ade:	2103      	movs	r1, #3
 8001ae0:	6818      	ldr	r0, [r3, #0]
 8001ae2:	f7ff fa7f 	bl	8000fe4 <_ZN5Robot6getPIDEh>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f000 fa23 	bl	8001f34 <_ZN3PID5resetEv>
	myRobot.getPID(3)->setup(PID_4_KP, PID_4_KI, PID_4_KD);
 8001aee:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001af2:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001af6:	2103      	movs	r1, #3
 8001af8:	6818      	ldr	r0, [r3, #0]
 8001afa:	f7ff fa73 	bl	8000fe4 <_ZN5Robot6getPIDEh>
 8001afe:	4603      	mov	r3, r0
 8001b00:	ed1f 1a81 	vldr	s2, [pc, #-516]	; 8001900 <_Z12create_robotv+0x380>
 8001b04:	ed5f 0a81 	vldr	s1, [pc, #-516]	; 8001904 <_Z12create_robotv+0x384>
 8001b08:	ed1f 0a81 	vldr	s0, [pc, #-516]	; 8001908 <_Z12create_robotv+0x388>
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f000 f9f7 	bl	8001f00 <_ZN3PID5setupEfff>
	myRobot.getPID(3)->init((float) TS/1000.0, PID_4_POLE, PID_4_SAT, true);
 8001b12:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001b16:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001b1a:	2103      	movs	r1, #3
 8001b1c:	6818      	ldr	r0, [r3, #0]
 8001b1e:	f7ff fa61 	bl	8000fe4 <_ZN5Robot6getPIDEh>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2101      	movs	r1, #1
 8001b26:	ed1f 1a87 	vldr	s2, [pc, #-540]	; 800190c <_Z12create_robotv+0x38c>
 8001b2a:	ed5f 0a87 	vldr	s1, [pc, #-540]	; 8001910 <_Z12create_robotv+0x390>
 8001b2e:	ed1f 0a87 	vldr	s0, [pc, #-540]	; 8001914 <_Z12create_robotv+0x394>
 8001b32:	4618      	mov	r0, r3
 8001b34:	f000 f964 	bl	8001e00 <_ZN3PID4initEfffb>

	myRobot.setEncoderDivider(4, ENC_5_DIV);
 8001b38:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001b3c:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001b40:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001b44:	2104      	movs	r1, #4
 8001b46:	6818      	ldr	r0, [r3, #0]
 8001b48:	f7ff fa37 	bl	8000fba <_ZN5Robot17setEncoderDividerEhf>
	myRobot.getPID(4)->reset();
 8001b4c:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001b50:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001b54:	2104      	movs	r1, #4
 8001b56:	6818      	ldr	r0, [r3, #0]
 8001b58:	f7ff fa44 	bl	8000fe4 <_ZN5Robot6getPIDEh>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f000 f9e8 	bl	8001f34 <_ZN3PID5resetEv>
	myRobot.getPID(4)->setup(PID_5_KP, PID_5_KI, PID_5_KD);
 8001b64:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001b68:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001b6c:	2104      	movs	r1, #4
 8001b6e:	6818      	ldr	r0, [r3, #0]
 8001b70:	f7ff fa38 	bl	8000fe4 <_ZN5Robot6getPIDEh>
 8001b74:	4603      	mov	r3, r0
 8001b76:	ed1f 1a9e 	vldr	s2, [pc, #-632]	; 8001900 <_Z12create_robotv+0x380>
 8001b7a:	ed5f 0a9e 	vldr	s1, [pc, #-632]	; 8001904 <_Z12create_robotv+0x384>
 8001b7e:	ed1f 0a9e 	vldr	s0, [pc, #-632]	; 8001908 <_Z12create_robotv+0x388>
 8001b82:	4618      	mov	r0, r3
 8001b84:	f000 f9bc 	bl	8001f00 <_ZN3PID5setupEfff>
	myRobot.getPID(4)->init((float) TS/1000.0, PID_5_POLE, PID_5_SAT, true);
 8001b88:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001b8c:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001b90:	2104      	movs	r1, #4
 8001b92:	6818      	ldr	r0, [r3, #0]
 8001b94:	f7ff fa26 	bl	8000fe4 <_ZN5Robot6getPIDEh>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	ed1f 1aa5 	vldr	s2, [pc, #-660]	; 800190c <_Z12create_robotv+0x38c>
 8001ba0:	ed5f 0aa5 	vldr	s1, [pc, #-660]	; 8001910 <_Z12create_robotv+0x390>
 8001ba4:	ed1f 0aa5 	vldr	s0, [pc, #-660]	; 8001914 <_Z12create_robotv+0x394>
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f000 f929 	bl	8001e00 <_ZN3PID4initEfffb>

	return myRobot;
 8001bae:	bf00      	nop
}
 8001bb0:	f107 0308 	add.w	r3, r7, #8
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff f819 	bl	8000bec <_ZN5MotorD1Ev>
 8001bba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff f814 	bl	8000bec <_ZN5MotorD1Ev>
 8001bc4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff f80f 	bl	8000bec <_ZN5MotorD1Ev>
 8001bce:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff f80a 	bl	8000bec <_ZN5MotorD1Ev>
 8001bd8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff f805 	bl	8000bec <_ZN5MotorD1Ev>
 8001be2:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff f800 	bl	8000bec <_ZN5MotorD1Ev>
	return myRobot;
 8001bec:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001bf0:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001bf4:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8001bf8:	f5a2 722d 	sub.w	r2, r2, #692	; 0x2b4
 8001bfc:	6812      	ldr	r2, [r2, #0]
 8001bfe:	601a      	str	r2, [r3, #0]
}
 8001c00:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001c04:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001c08:	6818      	ldr	r0, [r3, #0]
 8001c0a:	f507 772f 	add.w	r7, r7, #700	; 0x2bc
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c12:	bf00      	nop

08001c14 <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	ed93 7a00 	vldr	s14, [r3]
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	edd3 7a00 	vldr	s15, [r3]
 8001c2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c32:	d501      	bpl.n	8001c38 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	e000      	b.n	8001c3a <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8001c38:	687b      	ldr	r3, [r7, #4]
    }
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
 8001c4e:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	ed93 7a00 	vldr	s14, [r3]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	edd3 7a00 	vldr	s15, [r3]
 8001c5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c64:	d501      	bpl.n	8001c6a <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	e000      	b.n	8001c6c <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8001c6a:	687b      	ldr	r3, [r7, #4]
    }
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <_Z41__static_initialization_and_destruction_0ii>:

Robot ScorBot = create_robot();
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d108      	bne.n	8001c9a <_Z41__static_initialization_and_destruction_0ii+0x22>
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d103      	bne.n	8001c9a <_Z41__static_initialization_and_destruction_0ii+0x22>
 8001c92:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff fc73 	bl	8001580 <_Z12create_robotv>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d107      	bne.n	8001cb0 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d102      	bne.n	8001cb0 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8001caa:	4803      	ldr	r0, [pc, #12]	; (8001cb8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001cac:	f7ff f930 	bl	8000f10 <_ZN5RobotD1Ev>
 8001cb0:	bf00      	nop
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20002360 	.word	0x20002360

08001cbc <_GLOBAL__sub_I__ZN10PinControlC2Ev>:
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	f7ff ffd7 	bl	8001c78 <_Z41__static_initialization_and_destruction_0ii>
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <_GLOBAL__sub_D__ZN10PinControlC2Ev>:
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	f7ff ffcf 	bl	8001c78 <_Z41__static_initialization_and_destruction_0ii>
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	ed87 0a01 	vstr	s0, [r7, #4]
 8001ce6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cea:	eef0 7ae7 	vabs.f32	s15, s15
 8001cee:	eeb0 0a67 	vmov.f32	s0, s15
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <_ZSt3expf>:
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	ed87 0a01 	vstr	s0, [r7, #4]
 8001d06:	ed97 0a01 	vldr	s0, [r7, #4]
 8001d0a:	f01b fba5 	bl	801d458 <expf>
 8001d0e:	eef0 7a40 	vmov.f32	s15, s0
 8001d12:	eeb0 0a67 	vmov.f32	s0, s15
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <_ZN10Integrator4initEff>:
#include <cmath>

// Integrator

void Integrator::init(float ts, float sat)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d28:	edc7 0a01 	vstr	s1, [r7, #4]
  this->ts = ts;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	601a      	str	r2, [r3, #0]
  this->sat = sat;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	605a      	str	r2, [r3, #4]
}
 8001d38:	bf00      	nop
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <_ZN10Integrator5inputEf>:
{
  this->x = x;
}

void Integrator::input(float u)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	ed87 0a00 	vstr	s0, [r7]
  this->u = u;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	60da      	str	r2, [r3, #12]
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <_ZN10Integrator4stepEv>:

void Integrator::step()
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  x = x + ts*u;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	edd3 6a00 	vldr	s13, [r3]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	edc3 7a02 	vstr	s15, [r3, #8]
  apply_saturation();
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f82e 	bl	8001dec <_ZN10Integrator16apply_saturationEv>
}
 8001d90:	bf00      	nop
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <_ZN10Integrator6outputEv>:

float Integrator::output()
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  return x;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	ee07 3a90 	vmov	s15, r3
}
 8001da8:	eeb0 0a67 	vmov.f32	s0, s15
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <_ZN10Integrator6evolveEf>:

float Integrator::evolve(float u)
{ 
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b084      	sub	sp, #16
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
 8001dbe:	ed87 0a00 	vstr	s0, [r7]
  float y;

  input(u);
 8001dc2:	ed97 0a00 	vldr	s0, [r7]
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff ffbc 	bl	8001d44 <_ZN10Integrator5inputEf>
  y = output();
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7ff ffe3 	bl	8001d98 <_ZN10Integrator6outputEv>
 8001dd2:	ed87 0a03 	vstr	s0, [r7, #12]
  step();
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7ff ffc3 	bl	8001d62 <_ZN10Integrator4stepEv>

  return y;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	ee07 3a90 	vmov	s15, r3
}
 8001de2:	eeb0 0a67 	vmov.f32	s0, s15
 8001de6:	3710      	adds	r7, #16
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <_ZN10Integrator16apply_saturationEv>:

void Integrator::apply_saturation()
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
	//x = x > +sat ? +sat : x;
	//x = x < -sat ? -sat : x;
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <_ZN3PID4initEfffb>:


// PID

void PID::init(float ts, float tau, float sat, bool bumpless)
{
 8001e00:	b5b0      	push	{r4, r5, r7, lr}
 8001e02:	b09e      	sub	sp, #120	; 0x78
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6178      	str	r0, [r7, #20]
 8001e08:	ed87 0a04 	vstr	s0, [r7, #16]
 8001e0c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001e10:	ed87 1a02 	vstr	s2, [r7, #8]
 8001e14:	460b      	mov	r3, r1
 8001e16:	71fb      	strb	r3, [r7, #7]
  this->ts = ts;
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	601a      	str	r2, [r3, #0]
  this->N = N;
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	685a      	ldr	r2, [r3, #4]
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	605a      	str	r2, [r3, #4]
  this->sat = sat;
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	609a      	str	r2, [r3, #8]
  this->bumpless = bumpless;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	79fa      	ldrb	r2, [r7, #7]
 8001e30:	731a      	strb	r2, [r3, #12]
  this->integrator = Integrator();
 8001e32:	f107 0318 	add.w	r3, r7, #24
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe fd4e 	bl	80008d8 <_ZN10IntegratorC1Ev>
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8001e42:	f107 0318 	add.w	r3, r7, #24
 8001e46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001e4c:	f107 0318 	add.w	r3, r7, #24
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe fd4c 	bl	80008ee <_ZN10IntegratorD1Ev>
  this->derivator = Filter();
 8001e56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7fe fd52 	bl	8000904 <_ZN6FilterC1Ev>
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8001e66:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8001e6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e72:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e76:	e884 0003 	stmia.w	r4, {r0, r1}
  this->lowPassFilter = Filter();
 8001e7a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7fe fd40 	bl	8000904 <_ZN6FilterC1Ev>
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8001e8a:	f107 0550 	add.w	r5, r7, #80	; 0x50
 8001e8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e96:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e9a:	e884 0003 	stmia.w	r4, {r0, r1}

  integrator.init(ts, 20000.0);
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	3338      	adds	r3, #56	; 0x38
 8001ea2:	eddf 0a14 	vldr	s1, [pc, #80]	; 8001ef4 <_ZN3PID4initEfffb+0xf4>
 8001ea6:	ed97 0a04 	vldr	s0, [r7, #16]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff ff36 	bl	8001d1c <_ZN10Integrator4initEff>
  derivator.init(tau, 1, 1, 0, ts);			// Td*s/(1+s*Td/N)
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	3348      	adds	r3, #72	; 0x48
 8001eb4:	ed97 2a04 	vldr	s4, [r7, #16]
 8001eb8:	eddf 1a0f 	vldr	s3, [pc, #60]	; 8001ef8 <_ZN3PID4initEfffb+0xf8>
 8001ebc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001ec0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001ec4:	ed97 0a03 	vldr	s0, [r7, #12]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f000 f9ce 	bl	800226a <_ZN6Filter4initEfffff>
  lowPassFilter.init(0.1, 1, 0, 1, ts);
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	3370      	adds	r3, #112	; 0x70
 8001ed2:	ed97 2a04 	vldr	s4, [r7, #16]
 8001ed6:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8001eda:	ed9f 1a07 	vldr	s2, [pc, #28]	; 8001ef8 <_ZN3PID4initEfffb+0xf8>
 8001ede:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001ee2:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8001efc <_ZN3PID4initEfffb+0xfc>
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 f9bf 	bl	800226a <_ZN6Filter4initEfffff>
}
 8001eec:	bf00      	nop
 8001eee:	3778      	adds	r7, #120	; 0x78
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ef4:	469c4000 	.word	0x469c4000
 8001ef8:	00000000 	.word	0x00000000
 8001efc:	3dcccccd 	.word	0x3dcccccd

08001f00 <_ZN3PID5setupEfff>:

void PID::setup(float kp, float ki, float kd)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	ed87 0a02 	vstr	s0, [r7, #8]
 8001f0c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001f10:	ed87 1a00 	vstr	s2, [r7]
  this->kp = kp;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	611a      	str	r2, [r3, #16]
  this->ki = ki;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	615a      	str	r2, [r3, #20]
  this->kd = kd;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	619a      	str	r2, [r3, #24]
}
 8001f26:	bf00      	nop
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
	...

08001f34 <_ZN3PID5resetEv>:

void PID::reset()
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  reset(0.0, 0.0);
 8001f3c:	eddf 0a05 	vldr	s1, [pc, #20]	; 8001f54 <_ZN3PID5resetEv+0x20>
 8001f40:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8001f54 <_ZN3PID5resetEv+0x20>
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 f807 	bl	8001f58 <_ZN3PID5resetEff>
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	00000000 	.word	0x00000000

08001f58 <_ZN3PID5resetEff>:

void PID::reset(float u2, float u3)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	ed87 0a02 	vstr	s0, [r7, #8]
 8001f64:	edc7 0a01 	vstr	s1, [r7, #4]
  this-> u2 = u2; //xi
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	68ba      	ldr	r2, [r7, #8]
 8001f6c:	62da      	str	r2, [r3, #44]	; 0x2c
  this-> u3 = u3; //xd
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001f74:	bf00      	nop
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <_ZN3PID5inputEff>:

void PID::input(float r, float y)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	ed87 0a02 	vstr	s0, [r7, #8]
 8001f8c:	edc7 0a01 	vstr	s1, [r7, #4]
  this->r = r;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	625a      	str	r2, [r3, #36]	; 0x24
  this->y = y;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	621a      	str	r2, [r3, #32]
  this->e = r-y;
 8001f9c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001fa0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8001fae:	bf00      	nop
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <_ZN3PID4stepEv>:

void PID::step()
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	ed2d 8b02 	vpush	{d8}
 8001fc0:	b084      	sub	sp, #16
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  bool sgn;

  if (abs(r-y) >= 0) {
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	edd3 7a08 	vldr	s15, [r3, #32]
 8001fd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fd6:	eeb0 0a67 	vmov.f32	s0, s15
 8001fda:	f7ff fe7f 	bl	8001cdc <_ZSt3absf>
 8001fde:	eef0 7a40 	vmov.f32	s15, s0
 8001fe2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fea:	bfac      	ite	ge
 8001fec:	2301      	movge	r3, #1
 8001fee:	2300      	movlt	r3, #0
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d06e      	beq.n	80020d4 <_ZN3PID4stepEv+0x11a>
	  u1 = kp*e;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	ed93 7a04 	vldr	s14, [r3, #16]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	edd3 7a07 	vldr	s15, [r3, #28]
 8002002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  	  u2 = ki*integrator.evolve(e);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	ed93 8a05 	vldr	s16, [r3, #20]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	edd3 7a07 	vldr	s15, [r3, #28]
 800201e:	eeb0 0a67 	vmov.f32	s0, s15
 8002022:	4610      	mov	r0, r2
 8002024:	f7ff fec7 	bl	8001db6 <_ZN10Integrator6evolveEf>
 8002028:	eef0 7a40 	vmov.f32	s15, s0
 800202c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
  	  u3 = kd*derivator.evolve(e);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	ed93 8a06 	vldr	s16, [r3, #24]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	edd3 7a07 	vldr	s15, [r3, #28]
 8002048:	eeb0 0a67 	vmov.f32	s0, s15
 800204c:	4610      	mov	r0, r2
 800204e:	f000 f9e8 	bl	8002422 <_ZN6Filter6evolveEf>
 8002052:	eef0 7a40 	vmov.f32	s15, s0
 8002056:	ee68 7a27 	vmul.f32	s15, s16, s15
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
  	  sgn = (u1+u2+u3) >= 0;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800206c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002076:	ee77 7a27 	vadd.f32	s15, s14, s15
 800207a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800207e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002082:	bfac      	ite	ge
 8002084:	2301      	movge	r3, #1
 8002086:	2300      	movlt	r3, #0
 8002088:	73fb      	strb	r3, [r7, #15]
  	  u = apply_saturation(u1 + u2 + u3 + (2*sgn-1)*10000);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002096:	ee37 7a27 	vadd.f32	s14, s14, s15
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80020a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020a4:	7bfb      	ldrb	r3, [r7, #15]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	3b01      	subs	r3, #1
 80020aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80020ae:	fb02 f303 	mul.w	r3, r2, r3
 80020b2:	ee07 3a90 	vmov	s15, r3
 80020b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020be:	eeb0 0a67 	vmov.f32	s0, s15
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f894 	bl	80021f0 <_ZN3PID16apply_saturationEf>
 80020c8:	eef0 7a40 	vmov.f32	s15, s0
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
  } else
	  u = 0;
}
 80020d2:	e003      	b.n	80020dc <_ZN3PID4stepEv+0x122>
	  u = 0;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	635a      	str	r2, [r3, #52]	; 0x34
}
 80020dc:	bf00      	nop
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	ecbd 8b02 	vpop	{d8}
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <_ZN3PID6evolveEff>:
{
  return u;
}

float PID::evolve(float r, float y)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	ed87 0a02 	vstr	s0, [r7, #8]
 80020f4:	edc7 0a01 	vstr	s1, [r7, #4]
  input(r,y);
 80020f8:	edd7 0a01 	vldr	s1, [r7, #4]
 80020fc:	ed97 0a02 	vldr	s0, [r7, #8]
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f7ff ff3d 	bl	8001f80 <_ZN3PID5inputEff>
  step();
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f7ff ff57 	bl	8001fba <_ZN3PID4stepEv>
  //u = output();

  return u;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002110:	ee07 3a90 	vmov	s15, r3
}
 8002114:	eeb0 0a67 	vmov.f32	s0, s15
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
	...

08002120 <_ZN3PID4showEiR25racs_services__msg__Debug>:

void PID::show(int i, racs_services__msg__Debug &debug_msg)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
	debug_msg.data[0] = integrator.output();
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	3338      	adds	r3, #56	; 0x38
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff fe31 	bl	8001d98 <_ZN10Integrator6outputEv>
 8002136:	eef0 7a40 	vmov.f32	s15, s0
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	edc3 7a00 	vstr	s15, [r3]
	debug_msg.data[1] = u1  *100.0/32767.0;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002146:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800214a:	ed9f 6b25 	vldr	d6, [pc, #148]	; 80021e0 <_ZN3PID4showEiR25racs_services__msg__Debug+0xc0>
 800214e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002152:	ed9f 5b25 	vldr	d5, [pc, #148]	; 80021e8 <_ZN3PID4showEiR25racs_services__msg__Debug+0xc8>
 8002156:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800215a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	edc3 7a01 	vstr	s15, [r3, #4]
	debug_msg.data[2] = u2  *100.0/32767.0;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800216a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800216e:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 80021e0 <_ZN3PID4showEiR25racs_services__msg__Debug+0xc0>
 8002172:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002176:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 80021e8 <_ZN3PID4showEiR25racs_services__msg__Debug+0xc8>
 800217a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800217e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	edc3 7a02 	vstr	s15, [r3, #8]
	debug_msg.data[3] = u3  *100.0/32767.0;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800218e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002192:	ed9f 6b13 	vldr	d6, [pc, #76]	; 80021e0 <_ZN3PID4showEiR25racs_services__msg__Debug+0xc0>
 8002196:	ee27 6b06 	vmul.f64	d6, d7, d6
 800219a:	ed9f 5b13 	vldr	d5, [pc, #76]	; 80021e8 <_ZN3PID4showEiR25racs_services__msg__Debug+0xc8>
 800219e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80021a2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	edc3 7a03 	vstr	s15, [r3, #12]
	debug_msg.data[4] = u   *100.0/32767.0;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80021b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021b6:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 80021e0 <_ZN3PID4showEiR25racs_services__msg__Debug+0xc0>
 80021ba:	ee27 6b06 	vmul.f64	d6, d7, d6
 80021be:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 80021e8 <_ZN3PID4showEiR25racs_services__msg__Debug+0xc8>
 80021c2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80021c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	edc3 7a04 	vstr	s15, [r3, #16]
	debug_msg.data[5] = e;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	69da      	ldr	r2, [r3, #28]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	615a      	str	r2, [r3, #20]
}
 80021d8:	bf00      	nop
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	00000000 	.word	0x00000000
 80021e4:	40590000 	.word	0x40590000
 80021e8:	00000000 	.word	0x00000000
 80021ec:	40dfffc0 	.word	0x40dfffc0

080021f0 <_ZN3PID16apply_saturationEf>:

float PID::apply_saturation(float x)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	ed87 0a00 	vstr	s0, [r7]
  if(sat > 0)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8002202:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800220a:	dd24      	ble.n	8002256 <_ZN3PID16apply_saturationEf+0x66>
  {
    x = x > +sat ? +sat : x;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002212:	ed97 7a00 	vldr	s14, [r7]
 8002216:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800221a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800221e:	dd02      	ble.n	8002226 <_ZN3PID16apply_saturationEf+0x36>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	e000      	b.n	8002228 <_ZN3PID16apply_saturationEf+0x38>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	603b      	str	r3, [r7, #0]
    x = x < -sat ? -sat : x;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002230:	eef1 7a67 	vneg.f32	s15, s15
 8002234:	ed97 7a00 	vldr	s14, [r7]
 8002238:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800223c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002240:	d505      	bpl.n	800224e <_ZN3PID16apply_saturationEf+0x5e>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	edd3 7a02 	vldr	s15, [r3, #8]
 8002248:	eef1 7a67 	vneg.f32	s15, s15
 800224c:	e001      	b.n	8002252 <_ZN3PID16apply_saturationEf+0x62>
 800224e:	edd7 7a00 	vldr	s15, [r7]
 8002252:	edc7 7a00 	vstr	s15, [r7]
  }
  return x;
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	ee07 3a90 	vmov	s15, r3
}
 800225c:	eeb0 0a67 	vmov.f32	s0, s15
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <_ZN6Filter4initEfffff>:


// Filter

void Filter::init(float a1, float a0, float b1, float b0, float ts)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	ed2d 8b02 	vpush	{d8}
 8002270:	b086      	sub	sp, #24
 8002272:	af00      	add	r7, sp, #0
 8002274:	6178      	str	r0, [r7, #20]
 8002276:	ed87 0a04 	vstr	s0, [r7, #16]
 800227a:	edc7 0a03 	vstr	s1, [r7, #12]
 800227e:	ed87 1a02 	vstr	s2, [r7, #8]
 8002282:	edc7 1a01 	vstr	s3, [r7, #4]
 8002286:	ed87 2a00 	vstr	s4, [r7]
  this->a1 = a1;
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	601a      	str	r2, [r3, #0]
  this->a0 = a0;
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	605a      	str	r2, [r3, #4]
  this->b1 = b1;
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	68ba      	ldr	r2, [r7, #8]
 800229a:	609a      	str	r2, [r3, #8]
  this->b0 = b0;
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	60da      	str	r2, [r3, #12]

  A = exp(-(a0/a1)*ts);
 80022a2:	edd7 6a03 	vldr	s13, [r7, #12]
 80022a6:	ed97 7a04 	vldr	s14, [r7, #16]
 80022aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022ae:	eeb1 7a67 	vneg.f32	s14, s15
 80022b2:	edd7 7a00 	vldr	s15, [r7]
 80022b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ba:	eeb0 0a67 	vmov.f32	s0, s15
 80022be:	f7ff fd1d 	bl	8001cfc <_ZSt3expf>
 80022c2:	eef0 7a40 	vmov.f32	s15, s0
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	edc3 7a04 	vstr	s15, [r3, #16]
  B = 1;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80022d2:	615a      	str	r2, [r3, #20]
  if (a0*a1 != 0) {
 80022d4:	ed97 7a03 	vldr	s14, [r7, #12]
 80022d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80022dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022e0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80022e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e8:	d031      	beq.n	800234e <_ZN6Filter4initEfffff+0xe4>
	  C = ((a0*b1-a1*b0)/(a0*a1))*(exp((-a0/a1)*ts)-1);
 80022ea:	ed97 7a03 	vldr	s14, [r7, #12]
 80022ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80022f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022f6:	edd7 6a04 	vldr	s13, [r7, #16]
 80022fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80022fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002302:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002306:	edd7 6a03 	vldr	s13, [r7, #12]
 800230a:	edd7 7a04 	vldr	s15, [r7, #16]
 800230e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002312:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8002316:	edd7 7a03 	vldr	s15, [r7, #12]
 800231a:	eef1 6a67 	vneg.f32	s13, s15
 800231e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002326:	edd7 7a00 	vldr	s15, [r7]
 800232a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800232e:	eeb0 0a67 	vmov.f32	s0, s15
 8002332:	f7ff fce3 	bl	8001cfc <_ZSt3expf>
 8002336:	eef0 7a40 	vmov.f32	s15, s0
 800233a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800233e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002342:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	edc3 7a06 	vstr	s15, [r3, #24]
 800234c:	e003      	b.n	8002356 <_ZN6Filter4initEfffff+0xec>
  }
  else
  {
	  C = 0;
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	f04f 0200 	mov.w	r2, #0
 8002354:	619a      	str	r2, [r3, #24]
  }

  if (a1 != 0) {
 8002356:	edd7 7a04 	vldr	s15, [r7, #16]
 800235a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800235e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002362:	d009      	beq.n	8002378 <_ZN6Filter4initEfffff+0x10e>
	  D = b1/a1;
 8002364:	edd7 6a02 	vldr	s13, [r7, #8]
 8002368:	ed97 7a04 	vldr	s14, [r7, #16]
 800236c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	edc3 7a07 	vstr	s15, [r3, #28]
  } else
  {
	  D = 0;
  }
}
 8002376:	e003      	b.n	8002380 <_ZN6Filter4initEfffff+0x116>
	  D = 0;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	f04f 0200 	mov.w	r2, #0
 800237e:	61da      	str	r2, [r3, #28]
}
 8002380:	bf00      	nop
 8002382:	3718      	adds	r7, #24
 8002384:	46bd      	mov	sp, r7
 8002386:	ecbd 8b02 	vpop	{d8}
 800238a:	bd80      	pop	{r7, pc}

0800238c <_ZN6Filter5inputEf>:
{
  this->x = x;
}

void Filter::input(float u)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	ed87 0a00 	vstr	s0, [r7]
  this->u = u;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	621a      	str	r2, [r3, #32]
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <_ZN6Filter4stepEv>:

void Filter::step()
{
 80023aa:	b480      	push	{r7}
 80023ac:	b083      	sub	sp, #12
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
  x = A*x + B*u;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	ed93 7a04 	vldr	s14, [r3, #16]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80023be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	edd3 6a05 	vldr	s13, [r3, #20]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	edd3 7a08 	vldr	s15, [r3, #32]
 80023ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <_ZN6Filter6outputEv>:

float Filter::output()
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  return C*x + D*u;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	ed93 7a06 	vldr	s14, [r3, #24]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80023fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	edd3 6a07 	vldr	s13, [r3, #28]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	edd3 7a08 	vldr	s15, [r3, #32]
 800240c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002410:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8002414:	eeb0 0a67 	vmov.f32	s0, s15
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <_ZN6Filter6evolveEf>:

float Filter::evolve(float u)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b084      	sub	sp, #16
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
 800242a:	ed87 0a00 	vstr	s0, [r7]
  float y;
  
  input(u);
 800242e:	ed97 0a00 	vldr	s0, [r7]
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7ff ffaa 	bl	800238c <_ZN6Filter5inputEf>
  y = output();
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f7ff ffd5 	bl	80023e8 <_ZN6Filter6outputEv>
 800243e:	ed87 0a03 	vstr	s0, [r7, #12]
  step();
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7ff ffb1 	bl	80023aa <_ZN6Filter4stepEv>

  return y;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	ee07 3a90 	vmov	s15, r3
}
 800244e:	eeb0 0a67 	vmov.f32	s0, s15
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08a      	sub	sp, #40	; 0x28
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002460:	2300      	movs	r3, #0
 8002462:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002464:	f008 fe74 	bl	800b150 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002468:	4b5b      	ldr	r3, [pc, #364]	; (80025d8 <pvPortMallocMicroROS+0x180>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8002470:	f000 f98a 	bl	8002788 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002474:	4b59      	ldr	r3, [pc, #356]	; (80025dc <pvPortMallocMicroROS+0x184>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4013      	ands	r3, r2
 800247c:	2b00      	cmp	r3, #0
 800247e:	f040 8092 	bne.w	80025a6 <pvPortMallocMicroROS+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d01f      	beq.n	80024c8 <pvPortMallocMicroROS+0x70>
			{
				xWantedSize += xHeapStructSize;
 8002488:	2208      	movs	r2, #8
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4413      	add	r3, r2
 800248e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	2b00      	cmp	r3, #0
 8002498:	d016      	beq.n	80024c8 <pvPortMallocMicroROS+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f023 0307 	bic.w	r3, r3, #7
 80024a0:	3308      	adds	r3, #8
 80024a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00c      	beq.n	80024c8 <pvPortMallocMicroROS+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80024ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b2:	b672      	cpsid	i
 80024b4:	f383 8811 	msr	BASEPRI, r3
 80024b8:	f3bf 8f6f 	isb	sy
 80024bc:	f3bf 8f4f 	dsb	sy
 80024c0:	b662      	cpsie	i
 80024c2:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80024c4:	bf00      	nop
 80024c6:	e7fe      	b.n	80024c6 <pvPortMallocMicroROS+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d06b      	beq.n	80025a6 <pvPortMallocMicroROS+0x14e>
 80024ce:	4b44      	ldr	r3, [pc, #272]	; (80025e0 <pvPortMallocMicroROS+0x188>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d866      	bhi.n	80025a6 <pvPortMallocMicroROS+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80024d8:	4b42      	ldr	r3, [pc, #264]	; (80025e4 <pvPortMallocMicroROS+0x18c>)
 80024da:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80024dc:	4b41      	ldr	r3, [pc, #260]	; (80025e4 <pvPortMallocMicroROS+0x18c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80024e2:	e004      	b.n	80024ee <pvPortMallocMicroROS+0x96>
				{
					pxPreviousBlock = pxBlock;
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d903      	bls.n	8002500 <pvPortMallocMicroROS+0xa8>
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1f1      	bne.n	80024e4 <pvPortMallocMicroROS+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002500:	4b35      	ldr	r3, [pc, #212]	; (80025d8 <pvPortMallocMicroROS+0x180>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002506:	429a      	cmp	r2, r3
 8002508:	d04d      	beq.n	80025a6 <pvPortMallocMicroROS+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800250a:	6a3b      	ldr	r3, [r7, #32]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2208      	movs	r2, #8
 8002510:	4413      	add	r3, r2
 8002512:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	6a3b      	ldr	r3, [r7, #32]
 800251a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	1ad2      	subs	r2, r2, r3
 8002524:	2308      	movs	r3, #8
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	429a      	cmp	r2, r3
 800252a:	d921      	bls.n	8002570 <pvPortMallocMicroROS+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800252c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4413      	add	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00c      	beq.n	8002558 <pvPortMallocMicroROS+0x100>
	__asm volatile
 800253e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002542:	b672      	cpsid	i
 8002544:	f383 8811 	msr	BASEPRI, r3
 8002548:	f3bf 8f6f 	isb	sy
 800254c:	f3bf 8f4f 	dsb	sy
 8002550:	b662      	cpsie	i
 8002552:	613b      	str	r3, [r7, #16]
}
 8002554:	bf00      	nop
 8002556:	e7fe      	b.n	8002556 <pvPortMallocMicroROS+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	1ad2      	subs	r2, r2, r3
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800256a:	69b8      	ldr	r0, [r7, #24]
 800256c:	f000 f96e 	bl	800284c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002570:	4b1b      	ldr	r3, [pc, #108]	; (80025e0 <pvPortMallocMicroROS+0x188>)
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	4a19      	ldr	r2, [pc, #100]	; (80025e0 <pvPortMallocMicroROS+0x188>)
 800257c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800257e:	4b18      	ldr	r3, [pc, #96]	; (80025e0 <pvPortMallocMicroROS+0x188>)
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	4b19      	ldr	r3, [pc, #100]	; (80025e8 <pvPortMallocMicroROS+0x190>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	429a      	cmp	r2, r3
 8002588:	d203      	bcs.n	8002592 <pvPortMallocMicroROS+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800258a:	4b15      	ldr	r3, [pc, #84]	; (80025e0 <pvPortMallocMicroROS+0x188>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a16      	ldr	r2, [pc, #88]	; (80025e8 <pvPortMallocMicroROS+0x190>)
 8002590:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	4b11      	ldr	r3, [pc, #68]	; (80025dc <pvPortMallocMicroROS+0x184>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	431a      	orrs	r2, r3
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80025a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80025a6:	f008 fde1 	bl	800b16c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00c      	beq.n	80025ce <pvPortMallocMicroROS+0x176>
	__asm volatile
 80025b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b8:	b672      	cpsid	i
 80025ba:	f383 8811 	msr	BASEPRI, r3
 80025be:	f3bf 8f6f 	isb	sy
 80025c2:	f3bf 8f4f 	dsb	sy
 80025c6:	b662      	cpsie	i
 80025c8:	60fb      	str	r3, [r7, #12]
}
 80025ca:	bf00      	nop
 80025cc:	e7fe      	b.n	80025cc <pvPortMallocMicroROS+0x174>
	return pvReturn;
 80025ce:	69fb      	ldr	r3, [r7, #28]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3728      	adds	r7, #40	; 0x28
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20005fac 	.word	0x20005fac
 80025dc:	20005fb8 	.word	0x20005fb8
 80025e0:	20005fb0 	.word	0x20005fb0
 80025e4:	20005fa4 	.word	0x20005fa4
 80025e8:	20005fb4 	.word	0x20005fb4

080025ec <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d04c      	beq.n	8002698 <vPortFreeMicroROS+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80025fe:	2308      	movs	r3, #8
 8002600:	425b      	negs	r3, r3
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	4413      	add	r3, r2
 8002606:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	4b23      	ldr	r3, [pc, #140]	; (80026a0 <vPortFreeMicroROS+0xb4>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4013      	ands	r3, r2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10c      	bne.n	8002634 <vPortFreeMicroROS+0x48>
	__asm volatile
 800261a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800261e:	b672      	cpsid	i
 8002620:	f383 8811 	msr	BASEPRI, r3
 8002624:	f3bf 8f6f 	isb	sy
 8002628:	f3bf 8f4f 	dsb	sy
 800262c:	b662      	cpsie	i
 800262e:	60fb      	str	r3, [r7, #12]
}
 8002630:	bf00      	nop
 8002632:	e7fe      	b.n	8002632 <vPortFreeMicroROS+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00c      	beq.n	8002656 <vPortFreeMicroROS+0x6a>
	__asm volatile
 800263c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002640:	b672      	cpsid	i
 8002642:	f383 8811 	msr	BASEPRI, r3
 8002646:	f3bf 8f6f 	isb	sy
 800264a:	f3bf 8f4f 	dsb	sy
 800264e:	b662      	cpsie	i
 8002650:	60bb      	str	r3, [r7, #8]
}
 8002652:	bf00      	nop
 8002654:	e7fe      	b.n	8002654 <vPortFreeMicroROS+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <vPortFreeMicroROS+0xb4>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4013      	ands	r3, r2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d019      	beq.n	8002698 <vPortFreeMicroROS+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d115      	bne.n	8002698 <vPortFreeMicroROS+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <vPortFreeMicroROS+0xb4>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	43db      	mvns	r3, r3
 8002676:	401a      	ands	r2, r3
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800267c:	f008 fd68 	bl	800b150 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	4b07      	ldr	r3, [pc, #28]	; (80026a4 <vPortFreeMicroROS+0xb8>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4413      	add	r3, r2
 800268a:	4a06      	ldr	r2, [pc, #24]	; (80026a4 <vPortFreeMicroROS+0xb8>)
 800268c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800268e:	6938      	ldr	r0, [r7, #16]
 8002690:	f000 f8dc 	bl	800284c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002694:	f008 fd6a 	bl	800b16c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002698:	bf00      	nop
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	20005fb8 	.word	0x20005fb8
 80026a4:	20005fb0 	.word	0x20005fb0

080026a8 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80026a8:	b480      	push	{r7}
 80026aa:	b087      	sub	sp, #28
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80026b4:	2308      	movs	r3, #8
 80026b6:	425b      	negs	r3, r3
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	4413      	add	r3, r2
 80026bc:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <getBlockSize+0x38>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	43db      	mvns	r3, r3
 80026cc:	4013      	ands	r3, r2
 80026ce:	60fb      	str	r3, [r7, #12]

	return count;
 80026d0:	68fb      	ldr	r3, [r7, #12]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	371c      	adds	r7, #28
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	20005fb8 	.word	0x20005fb8

080026e4 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80026ee:	f008 fd2f 	bl	800b150 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80026f2:	6838      	ldr	r0, [r7, #0]
 80026f4:	f7ff feb0 	bl	8002458 <pvPortMallocMicroROS>
 80026f8:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d017      	beq.n	8002730 <pvPortReallocMicroROS+0x4c>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d014      	beq.n	8002730 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7ff ffce 	bl	80026a8 <getBlockSize>
 800270c:	4603      	mov	r3, r0
 800270e:	2208      	movs	r2, #8
 8002710:	1a9b      	subs	r3, r3, r2
 8002712:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	429a      	cmp	r2, r3
 800271a:	d201      	bcs.n	8002720 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	68b8      	ldr	r0, [r7, #8]
 8002726:	f01c f9e2 	bl	801eaee <memcpy>

		vPortFreeMicroROS(pv);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7ff ff5e 	bl	80025ec <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8002730:	f008 fd1c 	bl	800b16c <xTaskResumeAll>

	return newmem;
 8002734:	68bb      	ldr	r3, [r7, #8]
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b086      	sub	sp, #24
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
 8002746:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8002748:	f008 fd02 	bl	800b150 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	fb02 f303 	mul.w	r3, r2, r3
 8002754:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8002756:	6978      	ldr	r0, [r7, #20]
 8002758:	f7ff fe7e 	bl	8002458 <pvPortMallocMicroROS>
 800275c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	613b      	str	r3, [r7, #16]

  	while(count--)
 8002762:	e004      	b.n	800276e <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1c5a      	adds	r2, r3, #1
 8002768:	613a      	str	r2, [r7, #16]
 800276a:	2200      	movs	r2, #0
 800276c:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	1e5a      	subs	r2, r3, #1
 8002772:	617a      	str	r2, [r7, #20]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1f5      	bne.n	8002764 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8002778:	f008 fcf8 	bl	800b16c <xTaskResumeAll>
  	return mem;
 800277c:	68fb      	ldr	r3, [r7, #12]
}
 800277e:	4618      	mov	r0, r3
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
	...

08002788 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800278e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002792:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002794:	4b27      	ldr	r3, [pc, #156]	; (8002834 <prvHeapInit+0xac>)
 8002796:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00c      	beq.n	80027bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	3307      	adds	r3, #7
 80027a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f023 0307 	bic.w	r3, r3, #7
 80027ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80027b0:	68ba      	ldr	r2, [r7, #8]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	4a1f      	ldr	r2, [pc, #124]	; (8002834 <prvHeapInit+0xac>)
 80027b8:	4413      	add	r3, r2
 80027ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80027c0:	4a1d      	ldr	r2, [pc, #116]	; (8002838 <prvHeapInit+0xb0>)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80027c6:	4b1c      	ldr	r3, [pc, #112]	; (8002838 <prvHeapInit+0xb0>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68ba      	ldr	r2, [r7, #8]
 80027d0:	4413      	add	r3, r2
 80027d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80027d4:	2208      	movs	r2, #8
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	1a9b      	subs	r3, r3, r2
 80027da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f023 0307 	bic.w	r3, r3, #7
 80027e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4a15      	ldr	r2, [pc, #84]	; (800283c <prvHeapInit+0xb4>)
 80027e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80027ea:	4b14      	ldr	r3, [pc, #80]	; (800283c <prvHeapInit+0xb4>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2200      	movs	r2, #0
 80027f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80027f2:	4b12      	ldr	r3, [pc, #72]	; (800283c <prvHeapInit+0xb4>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2200      	movs	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	1ad2      	subs	r2, r2, r3
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002808:	4b0c      	ldr	r3, [pc, #48]	; (800283c <prvHeapInit+0xb4>)
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	4a0a      	ldr	r2, [pc, #40]	; (8002840 <prvHeapInit+0xb8>)
 8002816:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	4a09      	ldr	r2, [pc, #36]	; (8002844 <prvHeapInit+0xbc>)
 800281e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002820:	4b09      	ldr	r3, [pc, #36]	; (8002848 <prvHeapInit+0xc0>)
 8002822:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002826:	601a      	str	r2, [r3, #0]
}
 8002828:	bf00      	nop
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	200023a4 	.word	0x200023a4
 8002838:	20005fa4 	.word	0x20005fa4
 800283c:	20005fac 	.word	0x20005fac
 8002840:	20005fb4 	.word	0x20005fb4
 8002844:	20005fb0 	.word	0x20005fb0
 8002848:	20005fb8 	.word	0x20005fb8

0800284c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002854:	4b28      	ldr	r3, [pc, #160]	; (80028f8 <prvInsertBlockIntoFreeList+0xac>)
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	e002      	b.n	8002860 <prvInsertBlockIntoFreeList+0x14>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	429a      	cmp	r2, r3
 8002868:	d8f7      	bhi.n	800285a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	4413      	add	r3, r2
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	429a      	cmp	r2, r3
 800287a:	d108      	bne.n	800288e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	441a      	add	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	441a      	add	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d118      	bne.n	80028d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	4b15      	ldr	r3, [pc, #84]	; (80028fc <prvInsertBlockIntoFreeList+0xb0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d00d      	beq.n	80028ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	441a      	add	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	e008      	b.n	80028dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80028ca:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <prvInsertBlockIntoFreeList+0xb0>)
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	e003      	b.n	80028dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d002      	beq.n	80028ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80028ea:	bf00      	nop
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	20005fa4 	.word	0x20005fa4
 80028fc:	20005fac 	.word	0x20005fac

08002900 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002906:	4b10      	ldr	r3, [pc, #64]	; (8002948 <MX_DMA_Init+0x48>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	4a0f      	ldr	r2, [pc, #60]	; (8002948 <MX_DMA_Init+0x48>)
 800290c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002910:	6313      	str	r3, [r2, #48]	; 0x30
 8002912:	4b0d      	ldr	r3, [pc, #52]	; (8002948 <MX_DMA_Init+0x48>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800291a:	607b      	str	r3, [r7, #4]
 800291c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800291e:	2200      	movs	r2, #0
 8002920:	2105      	movs	r1, #5
 8002922:	200c      	movs	r0, #12
 8002924:	f001 ff96 	bl	8004854 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002928:	200c      	movs	r0, #12
 800292a:	f001 ffaf 	bl	800488c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800292e:	2200      	movs	r2, #0
 8002930:	2105      	movs	r1, #5
 8002932:	200e      	movs	r0, #14
 8002934:	f001 ff8e 	bl	8004854 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002938:	200e      	movs	r0, #14
 800293a:	f001 ffa7 	bl	800488c <HAL_NVIC_EnableIRQ>

}
 800293e:	bf00      	nop
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40023800 	.word	0x40023800

0800294c <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800295a:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 800295c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002960:	4904      	ldr	r1, [pc, #16]	; (8002974 <cubemx_transport_open+0x28>)
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f005 fc88 	bl	8008278 <HAL_UART_Receive_DMA>
    return true;
 8002968:	2301      	movs	r3, #1
}
 800296a:	4618      	mov	r0, r3
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	20005fbc 	.word	0x20005fbc

08002978 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8002986:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f005 fcb9 	bl	8008300 <HAL_UART_DMAStop>
    return true;
 800298e:	2301      	movs	r3, #1
}
 8002990:	4618      	mov	r0, r3
 8002992:	3710      	adds	r7, #16
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, const uint8_t * buf, size_t len, uint8_t * err){
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
 80029a4:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80029ac:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029b2:	2b20      	cmp	r3, #32
 80029b4:	d11a      	bne.n	80029ec <cubemx_transport_write+0x54>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	461a      	mov	r2, r3
 80029bc:	68b9      	ldr	r1, [r7, #8]
 80029be:	6978      	ldr	r0, [r7, #20]
 80029c0:	f005 fbde 	bl	8008180 <HAL_UART_Transmit_DMA>
 80029c4:	4603      	mov	r3, r0
 80029c6:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80029c8:	e002      	b.n	80029d0 <cubemx_transport_write+0x38>
            osDelay(1);
 80029ca:	2001      	movs	r0, #1
 80029cc:	f007 fb36 	bl	800a03c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80029d0:	7cfb      	ldrb	r3, [r7, #19]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d103      	bne.n	80029de <cubemx_transport_write+0x46>
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029da:	2b20      	cmp	r3, #32
 80029dc:	d1f5      	bne.n	80029ca <cubemx_transport_write+0x32>
        }

        return (ret == HAL_OK) ? len : 0;
 80029de:	7cfb      	ldrb	r3, [r7, #19]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <cubemx_transport_write+0x50>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	e002      	b.n	80029ee <cubemx_transport_write+0x56>
 80029e8:	2300      	movs	r3, #0
 80029ea:	e000      	b.n	80029ee <cubemx_transport_write+0x56>
    }else{
        return 0;
 80029ec:	2300      	movs	r3, #0
    }
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3718      	adds	r7, #24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b088      	sub	sp, #32
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
 8002a04:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8002a0c:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a12:	b672      	cpsid	i
}
 8002a14:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002a22:	4a1c      	ldr	r2, [pc, #112]	; (8002a94 <cubemx_transport_read+0x9c>)
 8002a24:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002a26:	b662      	cpsie	i
}
 8002a28:	bf00      	nop
        __enable_irq();
        ms_used++;
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8002a30:	2001      	movs	r0, #1
 8002a32:	f007 fb03 	bl	800a03c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8002a36:	4b18      	ldr	r3, [pc, #96]	; (8002a98 <cubemx_transport_read+0xa0>)
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	4b16      	ldr	r3, [pc, #88]	; (8002a94 <cubemx_transport_read+0x9c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d103      	bne.n	8002a4a <cubemx_transport_read+0x52>
 8002a42:	69fa      	ldr	r2, [r7, #28]
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	dbe3      	blt.n	8002a12 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002a4e:	e011      	b.n	8002a74 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8002a50:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <cubemx_transport_read+0xa0>)
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	68b9      	ldr	r1, [r7, #8]
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	440b      	add	r3, r1
 8002a5a:	4910      	ldr	r1, [pc, #64]	; (8002a9c <cubemx_transport_read+0xa4>)
 8002a5c:	5c8a      	ldrb	r2, [r1, r2]
 8002a5e:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8002a60:	4b0d      	ldr	r3, [pc, #52]	; (8002a98 <cubemx_transport_read+0xa0>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	3301      	adds	r3, #1
 8002a66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a6a:	4a0b      	ldr	r2, [pc, #44]	; (8002a98 <cubemx_transport_read+0xa0>)
 8002a6c:	6013      	str	r3, [r2, #0]
        wrote++;
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	3301      	adds	r3, #1
 8002a72:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002a74:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <cubemx_transport_read+0xa0>)
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <cubemx_transport_read+0x9c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d003      	beq.n	8002a88 <cubemx_transport_read+0x90>
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d3e3      	bcc.n	8002a50 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8002a88:	69bb      	ldr	r3, [r7, #24]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3720      	adds	r7, #32
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	200067c0 	.word	0x200067c0
 8002a98:	200067bc 	.word	0x200067bc
 8002a9c:	20005fbc 	.word	0x20005fbc

08002aa0 <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002aa4:	4a04      	ldr	r2, [pc, #16]	; (8002ab8 <_Z16MX_FREERTOS_Initv+0x18>)
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	4804      	ldr	r0, [pc, #16]	; (8002abc <_Z16MX_FREERTOS_Initv+0x1c>)
 8002aaa:	f007 fa21 	bl	8009ef0 <osThreadNew>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	4a03      	ldr	r2, [pc, #12]	; (8002ac0 <_Z16MX_FREERTOS_Initv+0x20>)
 8002ab2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002ab4:	bf00      	nop
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	0801f950 	.word	0x0801f950
 8002abc:	08002ac9 	.word	0x08002ac9
 8002ac0:	20007770 	.word	0x20007770
 8002ac4:	00000000 	.word	0x00000000

08002ac8 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002ac8:	b5b0      	push	{r4, r5, r7, lr}
 8002aca:	f5ad 7d2a 	sub.w	sp, sp, #680	; 0x2a8
 8002ace:	af02      	add	r7, sp, #8
 8002ad0:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002ad4:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8002ad8:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDefaultTask */
	rmw_uros_set_custom_transport(
 8002ada:	4bdd      	ldr	r3, [pc, #884]	; (8002e50 <_Z16StartDefaultTaskPv+0x388>)
 8002adc:	9301      	str	r3, [sp, #4]
 8002ade:	4bdd      	ldr	r3, [pc, #884]	; (8002e54 <_Z16StartDefaultTaskPv+0x38c>)
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	4bdd      	ldr	r3, [pc, #884]	; (8002e58 <_Z16StartDefaultTaskPv+0x390>)
 8002ae4:	4add      	ldr	r2, [pc, #884]	; (8002e5c <_Z16StartDefaultTaskPv+0x394>)
 8002ae6:	49de      	ldr	r1, [pc, #888]	; (8002e60 <_Z16StartDefaultTaskPv+0x398>)
 8002ae8:	2001      	movs	r0, #1
 8002aea:	f00c f9c5 	bl	800ee78 <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8002aee:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8002af2:	4618      	mov	r0, r3
 8002af4:	f00c f8f2 	bl	800ecdc <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 8002af8:	4bda      	ldr	r3, [pc, #872]	; (8002e64 <_Z16StartDefaultTaskPv+0x39c>)
 8002afa:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
	freeRTOS_allocator.deallocate = microros_deallocate;
 8002afe:	4bda      	ldr	r3, [pc, #872]	; (8002e68 <_Z16StartDefaultTaskPv+0x3a0>)
 8002b00:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
	freeRTOS_allocator.reallocate = microros_reallocate;
 8002b04:	4bd9      	ldr	r3, [pc, #868]	; (8002e6c <_Z16StartDefaultTaskPv+0x3a4>)
 8002b06:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8002b0a:	4bd9      	ldr	r3, [pc, #868]	; (8002e70 <_Z16StartDefaultTaskPv+0x3a8>)
 8002b0c:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) return;
 8002b10:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8002b14:	4618      	mov	r0, r3
 8002b16:	f00c f8ef 	bl	800ecf8 <rcutils_set_default_allocator>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	f083 0301 	eor.w	r3, r3, #1
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f040 81f5 	bne.w	8002f12 <_Z16StartDefaultTaskPv+0x44a>

	rcl_ret_t rc;
	rcl_node_t node, node2; // nodo;
	rcl_timer_t feedback_timer, robot_timer, encoder_timer;
	const unsigned int feedback_timer_period = RCL_MS_TO_NS(20);
 8002b28:	4bd2      	ldr	r3, [pc, #840]	; (8002e74 <_Z16StartDefaultTaskPv+0x3ac>)
 8002b2a:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
	const unsigned int robot_timer_period = RCL_MS_TO_NS(TS);
 8002b2e:	4bd2      	ldr	r3, [pc, #840]	; (8002e78 <_Z16StartDefaultTaskPv+0x3b0>)
 8002b30:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
	const unsigned int encoder_timer_period = RCL_MS_TO_NS(20);
 8002b34:	4bcf      	ldr	r3, [pc, #828]	; (8002e74 <_Z16StartDefaultTaskPv+0x3ac>)
 8002b36:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
	//rcl_publisher_t feedback_publisher; // publishers
	//rcl_publisher_t encoder_publisher;
	rcl_subscription_t pwm_subscriber, encoder_subscriber;
	rcl_service_t setup_service, control_service; //servizi

	const char* feedback_publisher_name = "/feedback";	//publishers
 8002b3a:	4bd0      	ldr	r3, [pc, #832]	; (8002e7c <_Z16StartDefaultTaskPv+0x3b4>)
 8002b3c:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
	const char* debug_publisher_name = "/debug";
 8002b40:	4bcf      	ldr	r3, [pc, #828]	; (8002e80 <_Z16StartDefaultTaskPv+0x3b8>)
 8002b42:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
	const char* encoder_publisher_name = "/encoder";
 8002b46:	4bcf      	ldr	r3, [pc, #828]	; (8002e84 <_Z16StartDefaultTaskPv+0x3bc>)
 8002b48:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
	const char* pwm_subscriber_name = "/pwm";			//subscribers
 8002b4c:	4bce      	ldr	r3, [pc, #824]	; (8002e88 <_Z16StartDefaultTaskPv+0x3c0>)
 8002b4e:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
	const char* encoder_subscriber_name = "/encoder";
 8002b52:	4bcc      	ldr	r3, [pc, #816]	; (8002e84 <_Z16StartDefaultTaskPv+0x3bc>)
 8002b54:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
	const char* setup_service_name = "/setup";			//servizi
 8002b58:	4bcc      	ldr	r3, [pc, #816]	; (8002e8c <_Z16StartDefaultTaskPv+0x3c4>)
 8002b5a:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
	const char* control_service_name = "/control";
 8002b5e:	4bcc      	ldr	r3, [pc, #816]	; (8002e90 <_Z16StartDefaultTaskPv+0x3c8>)
 8002b60:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278

	const rosidl_message_type_support_t* feedback_type_support =
		ROSIDL_GET_MSG_TYPE_SUPPORT(racs_services, msg, Feedback);
 8002b64:	f009 ffe8 	bl	800cb38 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback>
 8002b68:	f8c7 0274 	str.w	r0, [r7, #628]	; 0x274
	const rosidl_message_type_support_t * pwm_type_support =
		ROSIDL_GET_MSG_TYPE_SUPPORT(racs_services, msg, DirectAccess);
 8002b6c:	f009 ffb4 	bl	800cad8 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess>
 8002b70:	f8c7 0270 	str.w	r0, [r7, #624]	; 0x270
	const rosidl_message_type_support_t * encoder_type_support =
		ROSIDL_GET_MSG_TYPE_SUPPORT(racs_services, msg, Encoder);
 8002b74:	f009 ffc8 	bl	800cb08 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Encoder>
 8002b78:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
	const rosidl_message_type_support_t * debug_type_support =
		ROSIDL_GET_MSG_TYPE_SUPPORT(racs_services, msg, Debug);
 8002b7c:	f009 ff94 	bl	800caa8 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Debug>
 8002b80:	f8c7 0268 	str.w	r0, [r7, #616]	; 0x268
	const rosidl_service_type_support_t * setup_type_support =
		ROSIDL_GET_SRV_TYPE_SUPPORT(racs_services, srv, Setup);
 8002b84:	f009 fff0 	bl	800cb68 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup>
 8002b88:	f8c7 0264 	str.w	r0, [r7, #612]	; 0x264
	const rosidl_service_type_support_t * control_type_support =
		ROSIDL_GET_SRV_TYPE_SUPPORT(racs_services, srv, Control);
 8002b8c:	f009 ff66 	bl	800ca5c <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control>
 8002b90:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
	racs_services__srv__Setup_Request req_setup;
	racs_services__srv__Setup_Response res_setup;
	racs_services__srv__Control_Request req_control;
	racs_services__srv__Control_Response res_control;

	allocator = rcl_get_default_allocator();
 8002b94:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f00c f8cb 	bl	800ed34 <rcutils_get_default_allocator>
 8002b9e:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002ba2:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8002ba6:	f507 74e8 	add.w	r4, r7, #464	; 0x1d0
 8002baa:	461d      	mov	r5, r3
 8002bac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bb0:	682b      	ldr	r3, [r5, #0]
 8002bb2:	6023      	str	r3, [r4, #0]

	rc = rclc_support_init(&support, 0, NULL, &allocator);
 8002bb4:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8002bb8:	f507 70f2 	add.w	r0, r7, #484	; 0x1e4
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	f00b ff1a 	bl	800e9f8 <rclc_support_init>
 8002bc4:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
	if (rc != RCL_RET_OK) return;
 8002bc8:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f040 81a2 	bne.w	8002f16 <_Z16StartDefaultTaskPv+0x44e>

	rc = rclc_timer_init_default(&feedback_timer, &support, feedback_timer_period, feedback_timer_callback);
 8002bd2:	f507 71f2 	add.w	r1, r7, #484	; 0x1e4
 8002bd6:	f507 700c 	add.w	r0, r7, #560	; 0x230
 8002bda:	4bae      	ldr	r3, [pc, #696]	; (8002e94 <_Z16StartDefaultTaskPv+0x3cc>)
 8002bdc:	9300      	str	r3, [sp, #0]
 8002bde:	a39a      	add	r3, pc, #616	; (adr r3, 8002e48 <_Z16StartDefaultTaskPv+0x380>)
 8002be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be4:	f00c f842 	bl	800ec6c <rclc_timer_init_default>
 8002be8:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
	if (rc != RCL_RET_OK) return;
 8002bec:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f040 8192 	bne.w	8002f1a <_Z16StartDefaultTaskPv+0x452>

	rc = rclc_timer_init_default(&robot_timer, &support, robot_timer_period, robot_timer_callback);
 8002bf6:	f507 71f2 	add.w	r1, r7, #484	; 0x1e4
 8002bfa:	f507 700b 	add.w	r0, r7, #556	; 0x22c
 8002bfe:	4ba6      	ldr	r3, [pc, #664]	; (8002e98 <_Z16StartDefaultTaskPv+0x3d0>)
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	4a9d      	ldr	r2, [pc, #628]	; (8002e78 <_Z16StartDefaultTaskPv+0x3b0>)
 8002c04:	f04f 0300 	mov.w	r3, #0
 8002c08:	f00c f830 	bl	800ec6c <rclc_timer_init_default>
 8002c0c:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
	if (rc != RCL_RET_OK) return;
 8002c10:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f040 8182 	bne.w	8002f1e <_Z16StartDefaultTaskPv+0x456>

	rc = rclc_timer_init_default(&encoder_timer, &support, encoder_timer_period, encoder_timer_callback);
 8002c1a:	f507 71f2 	add.w	r1, r7, #484	; 0x1e4
 8002c1e:	f507 700a 	add.w	r0, r7, #552	; 0x228
 8002c22:	4b9e      	ldr	r3, [pc, #632]	; (8002e9c <_Z16StartDefaultTaskPv+0x3d4>)
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	a388      	add	r3, pc, #544	; (adr r3, 8002e48 <_Z16StartDefaultTaskPv+0x380>)
 8002c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c2c:	f00c f81e 	bl	800ec6c <rclc_timer_init_default>
 8002c30:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
	if (rc != RCL_RET_OK) return;
 8002c34:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f040 8172 	bne.w	8002f22 <_Z16StartDefaultTaskPv+0x45a>

	rc = rclc_node_init_default(&node, "STM32_node", "", &support);
 8002c3e:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8002c42:	f507 700f 	add.w	r0, r7, #572	; 0x23c
 8002c46:	4a96      	ldr	r2, [pc, #600]	; (8002ea0 <_Z16StartDefaultTaskPv+0x3d8>)
 8002c48:	4996      	ldr	r1, [pc, #600]	; (8002ea4 <_Z16StartDefaultTaskPv+0x3dc>)
 8002c4a:	f00b ff1f 	bl	800ea8c <rclc_node_init_default>
 8002c4e:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
	if (rc != RCL_RET_OK) return;
 8002c52:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f040 8165 	bne.w	8002f26 <_Z16StartDefaultTaskPv+0x45e>

	rc = rclc_node_init_default(&node2, "STM32_node", "", &support);
 8002c5c:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8002c60:	f507 700d 	add.w	r0, r7, #564	; 0x234
 8002c64:	4a8e      	ldr	r2, [pc, #568]	; (8002ea0 <_Z16StartDefaultTaskPv+0x3d8>)
 8002c66:	498f      	ldr	r1, [pc, #572]	; (8002ea4 <_Z16StartDefaultTaskPv+0x3dc>)
 8002c68:	f00b ff10 	bl	800ea8c <rclc_node_init_default>
 8002c6c:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
	if (rc != RCL_RET_OK) return;
 8002c70:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f040 8158 	bne.w	8002f2a <_Z16StartDefaultTaskPv+0x462>

	rc = rclc_publisher_init_best_effort(
 8002c7a:	f507 710f 	add.w	r1, r7, #572	; 0x23c
 8002c7e:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8002c82:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8002c86:	4888      	ldr	r0, [pc, #544]	; (8002ea8 <_Z16StartDefaultTaskPv+0x3e0>)
 8002c88:	f00b ff42 	bl	800eb10 <rclc_publisher_init_best_effort>
 8002c8c:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
	  &feedback_publisher, &node, feedback_type_support, feedback_publisher_name);
	if (rc != RCL_RET_OK) return;
 8002c90:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f040 814a 	bne.w	8002f2e <_Z16StartDefaultTaskPv+0x466>

	rc = rclc_publisher_init_best_effort(
 8002c9a:	f507 710f 	add.w	r1, r7, #572	; 0x23c
 8002c9e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8002ca2:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 8002ca6:	4881      	ldr	r0, [pc, #516]	; (8002eac <_Z16StartDefaultTaskPv+0x3e4>)
 8002ca8:	f00b ff32 	bl	800eb10 <rclc_publisher_init_best_effort>
 8002cac:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
	  &debug_publisher, &node, debug_type_support, debug_publisher_name);
	if (rc != RCL_RET_OK) return;
 8002cb0:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f040 813c 	bne.w	8002f32 <_Z16StartDefaultTaskPv+0x46a>

	rc = rclc_publisher_init_best_effort(
 8002cba:	f507 710d 	add.w	r1, r7, #564	; 0x234
 8002cbe:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8002cc2:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 8002cc6:	487a      	ldr	r0, [pc, #488]	; (8002eb0 <_Z16StartDefaultTaskPv+0x3e8>)
 8002cc8:	f00b ff22 	bl	800eb10 <rclc_publisher_init_best_effort>
 8002ccc:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
	  &encoder_publisher, &node2, encoder_type_support, encoder_publisher_name);
	if (rc != RCL_RET_OK) return;
 8002cd0:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f040 812e 	bne.w	8002f36 <_Z16StartDefaultTaskPv+0x46e>

	rc = rclc_subscription_init_best_effort(
 8002cda:	f507 710f 	add.w	r1, r7, #572	; 0x23c
 8002cde:	f507 7009 	add.w	r0, r7, #548	; 0x224
 8002ce2:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8002ce6:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
 8002cea:	f00b ff85 	bl	800ebf8 <rclc_subscription_init_best_effort>
 8002cee:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
	  &pwm_subscriber, &node, pwm_type_support, pwm_subscriber_name);
	if (rc != RCL_RET_OK) return;
 8002cf2:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f040 811f 	bne.w	8002f3a <_Z16StartDefaultTaskPv+0x472>

	rc = rclc_subscription_init_best_effort(
 8002cfc:	f507 710f 	add.w	r1, r7, #572	; 0x23c
 8002d00:	f507 7008 	add.w	r0, r7, #544	; 0x220
 8002d04:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8002d08:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 8002d0c:	f00b ff74 	bl	800ebf8 <rclc_subscription_init_best_effort>
 8002d10:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
	  &encoder_subscriber, &node, encoder_type_support, encoder_subscriber_name);
	if (rc != RCL_RET_OK) return;
 8002d14:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f040 8110 	bne.w	8002f3e <_Z16StartDefaultTaskPv+0x476>

	rc = rclc_service_init_default(
 8002d1e:	f507 710f 	add.w	r1, r7, #572	; 0x23c
 8002d22:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 8002d26:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8002d2a:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8002d2e:	f00b ff29 	bl	800eb84 <rclc_service_init_default>
 8002d32:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
		&setup_service, &node, setup_type_support, setup_service_name);
	if (rc != RCL_RET_OK) return;
 8002d36:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f040 8101 	bne.w	8002f42 <_Z16StartDefaultTaskPv+0x47a>

	rc = rclc_service_init_default(
 8002d40:	f507 710f 	add.w	r1, r7, #572	; 0x23c
 8002d44:	f507 7006 	add.w	r0, r7, #536	; 0x218
 8002d48:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8002d4c:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8002d50:	f00b ff18 	bl	800eb84 <rclc_service_init_default>
 8002d54:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
		&control_service, &node, control_type_support, control_service_name);
	if (rc != RCL_RET_OK) return;
 8002d58:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f040 80f2 	bne.w	8002f46 <_Z16StartDefaultTaskPv+0x47e>

	rclc_executor_t executor;
	executor = rclc_executor_get_zero_initialized_executor();
 8002d62:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002d66:	f5a3 74d4 	sub.w	r4, r3, #424	; 0x1a8
 8002d6a:	463b      	mov	r3, r7
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f00b fadf 	bl	800e330 <rclc_executor_get_zero_initialized_executor>
 8002d72:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002d76:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002d7a:	4620      	mov	r0, r4
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	2390      	movs	r3, #144	; 0x90
 8002d80:	461a      	mov	r2, r3
 8002d82:	f01b feb4 	bl	801eaee <memcpy>
	unsigned int num_handles = 7; //2 servizi, 3 timer e 2 subs
 8002d86:	2307      	movs	r3, #7
 8002d88:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
	rclc_executor_init(&executor, &support.context, num_handles, &allocator);
 8002d8c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8002d90:	f507 71f2 	add.w	r1, r7, #484	; 0x1e4
 8002d94:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8002d98:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 8002d9c:	f00b fad4 	bl	800e348 <rclc_executor_init>

	rc = rclc_executor_add_timer(&executor, &feedback_timer);
 8002da0:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8002da4:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002da8:	4611      	mov	r1, r2
 8002daa:	4618      	mov	r0, r3
 8002dac:	f00b fb86 	bl	800e4bc <rclc_executor_add_timer>
 8002db0:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
	if (rc != RCL_RET_OK) return;
 8002db4:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f040 80c6 	bne.w	8002f4a <_Z16StartDefaultTaskPv+0x482>

	rc = rclc_executor_add_timer(&executor, &robot_timer);
 8002dbe:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 8002dc2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002dc6:	4611      	mov	r1, r2
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f00b fb77 	bl	800e4bc <rclc_executor_add_timer>
 8002dce:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
	if (rc != RCL_RET_OK) return;
 8002dd2:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f040 80b9 	bne.w	8002f4e <_Z16StartDefaultTaskPv+0x486>

//	rc = rclc_executor_add_timer(&executor, &encoder_timer);
//	if (rc != RCL_RET_OK) return;

	rc = rclc_executor_add_subscription(
 8002ddc:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
 8002de0:	f507 7109 	add.w	r1, r7, #548	; 0x224
 8002de4:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8002de8:	2300      	movs	r3, #0
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	4b31      	ldr	r3, [pc, #196]	; (8002eb4 <_Z16StartDefaultTaskPv+0x3ec>)
 8002dee:	f00b fb27 	bl	800e440 <rclc_executor_add_subscription>
 8002df2:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
	  &executor, &pwm_subscriber, &pwm_msg,
	  &pwm_callback, ON_NEW_DATA);
	if (rc != RCL_RET_OK) return;
 8002df6:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f040 80a9 	bne.w	8002f52 <_Z16StartDefaultTaskPv+0x48a>

	rc = rclc_executor_add_subscription(
 8002e00:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 8002e04:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8002e08:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	4b29      	ldr	r3, [pc, #164]	; (8002eb8 <_Z16StartDefaultTaskPv+0x3f0>)
 8002e12:	f00b fb15 	bl	800e440 <rclc_executor_add_subscription>
 8002e16:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
	  &executor, &encoder_subscriber, &encoder_msg,
	  &encoder_callback, ON_NEW_DATA);
	if (rc != RCL_RET_OK) return;
 8002e1a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f040 8099 	bne.w	8002f56 <_Z16StartDefaultTaskPv+0x48e>

	rc = rclc_executor_add_service(
 8002e24:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8002e28:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 8002e2c:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8002e30:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8002e34:	4c21      	ldr	r4, [pc, #132]	; (8002ebc <_Z16StartDefaultTaskPv+0x3f4>)
 8002e36:	9400      	str	r4, [sp, #0]
 8002e38:	f00b fb6e 	bl	800e518 <rclc_executor_add_service>
 8002e3c:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
 8002e40:	e03e      	b.n	8002ec0 <_Z16StartDefaultTaskPv+0x3f8>
 8002e42:	bf00      	nop
 8002e44:	f3af 8000 	nop.w
 8002e48:	01312d00 	.word	0x01312d00
 8002e4c:	00000000 	.word	0x00000000
 8002e50:	080029f9 	.word	0x080029f9
 8002e54:	08002999 	.word	0x08002999
 8002e58:	08002979 	.word	0x08002979
 8002e5c:	0800294d 	.word	0x0800294d
 8002e60:	200079e4 	.word	0x200079e4
 8002e64:	08003311 	.word	0x08003311
 8002e68:	08003355 	.word	0x08003355
 8002e6c:	0800338d 	.word	0x0800338d
 8002e70:	080033f9 	.word	0x080033f9
 8002e74:	01312d00 	.word	0x01312d00
 8002e78:	000f4240 	.word	0x000f4240
 8002e7c:	0801f8cc 	.word	0x0801f8cc
 8002e80:	0801f8d8 	.word	0x0801f8d8
 8002e84:	0801f8e0 	.word	0x0801f8e0
 8002e88:	0801f8ec 	.word	0x0801f8ec
 8002e8c:	0801f8f4 	.word	0x0801f8f4
 8002e90:	0801f8fc 	.word	0x0801f8fc
 8002e94:	08000775 	.word	0x08000775
 8002e98:	08000831 	.word	0x08000831
 8002e9c:	08000855 	.word	0x08000855
 8002ea0:	0801f908 	.word	0x0801f908
 8002ea4:	0801f90c 	.word	0x0801f90c
 8002ea8:	200067c4 	.word	0x200067c4
 8002eac:	200067c8 	.word	0x200067c8
 8002eb0:	200067cc 	.word	0x200067cc
 8002eb4:	080006e9 	.word	0x080006e9
 8002eb8:	080006ad 	.word	0x080006ad
 8002ebc:	08000745 	.word	0x08000745
		&executor, &setup_service, &req_setup,
		&res_setup, setup_callback);
	if (rc != RCL_RET_OK) return;
 8002ec0:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d148      	bne.n	8002f5a <_Z16StartDefaultTaskPv+0x492>

	rc = rclc_executor_add_service(
 8002ec8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002ecc:	f507 72c6 	add.w	r2, r7, #396	; 0x18c
 8002ed0:	f507 7106 	add.w	r1, r7, #536	; 0x218
 8002ed4:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8002ed8:	4c23      	ldr	r4, [pc, #140]	; (8002f68 <_Z16StartDefaultTaskPv+0x4a0>)
 8002eda:	9400      	str	r4, [sp, #0]
 8002edc:	f00b fb1c 	bl	800e518 <rclc_executor_add_service>
 8002ee0:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
		&executor, &control_service, &req_control,
		&res_control, control_callback);
	if (rc != RCL_RET_OK) return;
 8002ee4:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d138      	bne.n	8002f5e <_Z16StartDefaultTaskPv+0x496>

	Robot ScorBot = create_robot();
 8002eec:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002ef0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7fe fb43 	bl	8001580 <_Z12create_robotv>
	load_encoders(encs);
 8002efa:	481c      	ldr	r0, [pc, #112]	; (8002f6c <_Z16StartDefaultTaskPv+0x4a4>)
 8002efc:	f000 f838 	bl	8002f70 <_Z13load_encodersPs>

	rclc_executor_spin(&executor);
 8002f00:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002f04:	4618      	mov	r0, r3
 8002f06:	f00b fd37 	bl	800e978 <rclc_executor_spin>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002f0a:	2001      	movs	r0, #1
 8002f0c:	f007 f896 	bl	800a03c <osDelay>
 8002f10:	e7fb      	b.n	8002f0a <_Z16StartDefaultTaskPv+0x442>
	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) return;
 8002f12:	bf00      	nop
 8002f14:	e024      	b.n	8002f60 <_Z16StartDefaultTaskPv+0x498>
	if (rc != RCL_RET_OK) return;
 8002f16:	bf00      	nop
 8002f18:	e022      	b.n	8002f60 <_Z16StartDefaultTaskPv+0x498>
	if (rc != RCL_RET_OK) return;
 8002f1a:	bf00      	nop
 8002f1c:	e020      	b.n	8002f60 <_Z16StartDefaultTaskPv+0x498>
	if (rc != RCL_RET_OK) return;
 8002f1e:	bf00      	nop
 8002f20:	e01e      	b.n	8002f60 <_Z16StartDefaultTaskPv+0x498>
	if (rc != RCL_RET_OK) return;
 8002f22:	bf00      	nop
 8002f24:	e01c      	b.n	8002f60 <_Z16StartDefaultTaskPv+0x498>
	if (rc != RCL_RET_OK) return;
 8002f26:	bf00      	nop
 8002f28:	e01a      	b.n	8002f60 <_Z16StartDefaultTaskPv+0x498>
	if (rc != RCL_RET_OK) return;
 8002f2a:	bf00      	nop
 8002f2c:	e018      	b.n	8002f60 <_Z16StartDefaultTaskPv+0x498>
	if (rc != RCL_RET_OK) return;
 8002f2e:	bf00      	nop
 8002f30:	e016      	b.n	8002f60 <_Z16StartDefaultTaskPv+0x498>
	if (rc != RCL_RET_OK) return;
 8002f32:	bf00      	nop
 8002f34:	e014      	b.n	8002f60 <_Z16StartDefaultTaskPv+0x498>
	if (rc != RCL_RET_OK) return;
 8002f36:	bf00      	nop
 8002f38:	e012      	b.n	8002f60 <_Z16StartDefaultTaskPv+0x498>
	if (rc != RCL_RET_OK) return;
 8002f3a:	bf00      	nop
 8002f3c:	e010      	b.n	8002f60 <_Z16StartDefaultTaskPv+0x498>
	if (rc != RCL_RET_OK) return;
 8002f3e:	bf00      	nop
 8002f40:	e00e      	b.n	8002f60 <_Z16StartDefaultTaskPv+0x498>
	if (rc != RCL_RET_OK) return;
 8002f42:	bf00      	nop
 8002f44:	e00c      	b.n	8002f60 <_Z16StartDefaultTaskPv+0x498>
	if (rc != RCL_RET_OK) return;
 8002f46:	bf00      	nop
 8002f48:	e00a      	b.n	8002f60 <_Z16StartDefaultTaskPv+0x498>
	if (rc != RCL_RET_OK) return;
 8002f4a:	bf00      	nop
 8002f4c:	e008      	b.n	8002f60 <_Z16StartDefaultTaskPv+0x498>
	if (rc != RCL_RET_OK) return;
 8002f4e:	bf00      	nop
 8002f50:	e006      	b.n	8002f60 <_Z16StartDefaultTaskPv+0x498>
	if (rc != RCL_RET_OK) return;
 8002f52:	bf00      	nop
 8002f54:	e004      	b.n	8002f60 <_Z16StartDefaultTaskPv+0x498>
	if (rc != RCL_RET_OK) return;
 8002f56:	bf00      	nop
 8002f58:	e002      	b.n	8002f60 <_Z16StartDefaultTaskPv+0x498>
	if (rc != RCL_RET_OK) return;
 8002f5a:	bf00      	nop
 8002f5c:	e000      	b.n	8002f60 <_Z16StartDefaultTaskPv+0x498>
	if (rc != RCL_RET_OK) return;
 8002f5e:	bf00      	nop
  }
  /* USER CODE END StartDefaultTask */
}
 8002f60:	f507 7728 	add.w	r7, r7, #672	; 0x2a0
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bdb0      	pop	{r4, r5, r7, pc}
 8002f68:	08000715 	.word	0x08000715
 8002f6c:	200067d0 	.word	0x200067d0

08002f70 <_Z13load_encodersPs>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void load_encoders(int16_t encs[]) {
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 2000; i++) {
 8002f78:	2300      	movs	r3, #0
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	e023      	b.n	8002fc6 <_Z13load_encodersPs+0x56>
		encs[i] = 300*sin(2*M_PI*i/2000.0);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	ee07 3a90 	vmov	s15, r3
 8002f84:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002f88:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8002fd8 <_Z13load_encodersPs+0x68>
 8002f8c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002f90:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8002fe0 <_Z13load_encodersPs+0x70>
 8002f94:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002f98:	eeb0 0b46 	vmov.f64	d0, d6
 8002f9c:	f01a fa10 	bl	801d3c0 <sin>
 8002fa0:	eeb0 7b40 	vmov.f64	d7, d0
 8002fa4:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8002fe8 <_Z13load_encodersPs+0x78>
 8002fa8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002fb8:	ee17 2a90 	vmov	r2, s15
 8002fbc:	b212      	sxth	r2, r2
 8002fbe:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < 2000; i++) {
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002fcc:	dbd7      	blt.n	8002f7e <_Z13load_encodersPs+0xe>
	}
}
 8002fce:	bf00      	nop
 8002fd0:	bf00      	nop
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	54442d18 	.word	0x54442d18
 8002fdc:	401921fb 	.word	0x401921fb
 8002fe0:	00000000 	.word	0x00000000
 8002fe4:	409f4000 	.word	0x409f4000
 8002fe8:	00000000 	.word	0x00000000
 8002fec:	4072c000 	.word	0x4072c000

08002ff0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b08c      	sub	sp, #48	; 0x30
 8002ff4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff6:	f107 031c 	add.w	r3, r7, #28
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	605a      	str	r2, [r3, #4]
 8003000:	609a      	str	r2, [r3, #8]
 8003002:	60da      	str	r2, [r3, #12]
 8003004:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003006:	4b58      	ldr	r3, [pc, #352]	; (8003168 <MX_GPIO_Init+0x178>)
 8003008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300a:	4a57      	ldr	r2, [pc, #348]	; (8003168 <MX_GPIO_Init+0x178>)
 800300c:	f043 0310 	orr.w	r3, r3, #16
 8003010:	6313      	str	r3, [r2, #48]	; 0x30
 8003012:	4b55      	ldr	r3, [pc, #340]	; (8003168 <MX_GPIO_Init+0x178>)
 8003014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003016:	f003 0310 	and.w	r3, r3, #16
 800301a:	61bb      	str	r3, [r7, #24]
 800301c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800301e:	4b52      	ldr	r3, [pc, #328]	; (8003168 <MX_GPIO_Init+0x178>)
 8003020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003022:	4a51      	ldr	r2, [pc, #324]	; (8003168 <MX_GPIO_Init+0x178>)
 8003024:	f043 0304 	orr.w	r3, r3, #4
 8003028:	6313      	str	r3, [r2, #48]	; 0x30
 800302a:	4b4f      	ldr	r3, [pc, #316]	; (8003168 <MX_GPIO_Init+0x178>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	f003 0304 	and.w	r3, r3, #4
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003036:	4b4c      	ldr	r3, [pc, #304]	; (8003168 <MX_GPIO_Init+0x178>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303a:	4a4b      	ldr	r2, [pc, #300]	; (8003168 <MX_GPIO_Init+0x178>)
 800303c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003040:	6313      	str	r3, [r2, #48]	; 0x30
 8003042:	4b49      	ldr	r3, [pc, #292]	; (8003168 <MX_GPIO_Init+0x178>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800304a:	613b      	str	r3, [r7, #16]
 800304c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800304e:	4b46      	ldr	r3, [pc, #280]	; (8003168 <MX_GPIO_Init+0x178>)
 8003050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003052:	4a45      	ldr	r2, [pc, #276]	; (8003168 <MX_GPIO_Init+0x178>)
 8003054:	f043 0301 	orr.w	r3, r3, #1
 8003058:	6313      	str	r3, [r2, #48]	; 0x30
 800305a:	4b43      	ldr	r3, [pc, #268]	; (8003168 <MX_GPIO_Init+0x178>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003066:	4b40      	ldr	r3, [pc, #256]	; (8003168 <MX_GPIO_Init+0x178>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	4a3f      	ldr	r2, [pc, #252]	; (8003168 <MX_GPIO_Init+0x178>)
 800306c:	f043 0302 	orr.w	r3, r3, #2
 8003070:	6313      	str	r3, [r2, #48]	; 0x30
 8003072:	4b3d      	ldr	r3, [pc, #244]	; (8003168 <MX_GPIO_Init+0x178>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	60bb      	str	r3, [r7, #8]
 800307c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800307e:	4b3a      	ldr	r3, [pc, #232]	; (8003168 <MX_GPIO_Init+0x178>)
 8003080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003082:	4a39      	ldr	r2, [pc, #228]	; (8003168 <MX_GPIO_Init+0x178>)
 8003084:	f043 0308 	orr.w	r3, r3, #8
 8003088:	6313      	str	r3, [r2, #48]	; 0x30
 800308a:	4b37      	ldr	r3, [pc, #220]	; (8003168 <MX_GPIO_Init+0x178>)
 800308c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308e:	f003 0308 	and.w	r3, r3, #8
 8003092:	607b      	str	r3, [r7, #4]
 8003094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003096:	4b34      	ldr	r3, [pc, #208]	; (8003168 <MX_GPIO_Init+0x178>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309a:	4a33      	ldr	r2, [pc, #204]	; (8003168 <MX_GPIO_Init+0x178>)
 800309c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030a0:	6313      	str	r3, [r2, #48]	; 0x30
 80030a2:	4b31      	ldr	r3, [pc, #196]	; (8003168 <MX_GPIO_Init+0x178>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030aa:	603b      	str	r3, [r7, #0]
 80030ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80030ae:	2200      	movs	r2, #0
 80030b0:	f244 0181 	movw	r1, #16513	; 0x4081
 80030b4:	482d      	ldr	r0, [pc, #180]	; (800316c <MX_GPIO_Init+0x17c>)
 80030b6:	f002 f9d1 	bl	800545c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MOTOR5_INA_Pin|MOTOR5_INB_Pin|MOTOR1_INA_Pin|MOTOR1_INB_Pin
 80030ba:	2200      	movs	r2, #0
 80030bc:	f24c 01ff 	movw	r1, #49407	; 0xc0ff
 80030c0:	482b      	ldr	r0, [pc, #172]	; (8003170 <MX_GPIO_Init+0x180>)
 80030c2:	f002 f9cb 	bl	800545c <HAL_GPIO_WritePin>
                          |MOTOR2_INA_Pin|MOTOR2_INB_Pin|MOTOR3_INA_Pin|MOTOR3_INB_Pin
                          |MOTOR4_INA_Pin|MOTOR4_INB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, MOTOR6_INA_Pin|MOTOR6_INB_Pin|PIN_TOGGLE_Pin|MOTORS_EN_Pin
 80030c6:	2200      	movs	r2, #0
 80030c8:	f647 616c 	movw	r1, #32364	; 0x7e6c
 80030cc:	4829      	ldr	r0, [pc, #164]	; (8003174 <MX_GPIO_Init+0x184>)
 80030ce:	f002 f9c5 	bl	800545c <HAL_GPIO_WritePin>
                          |MOTOR1_END_Pin|MOTOR2_END_Pin|MOTOR3_END_Pin|MOTOR4_END_Pin
                          |MOTOR5_END_Pin|MOTOR6_END_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80030d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80030d8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80030dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030de:	2300      	movs	r3, #0
 80030e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80030e2:	f107 031c 	add.w	r3, r7, #28
 80030e6:	4619      	mov	r1, r3
 80030e8:	4823      	ldr	r0, [pc, #140]	; (8003178 <MX_GPIO_Init+0x188>)
 80030ea:	f001 fff3 	bl	80050d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80030ee:	f244 0381 	movw	r3, #16513	; 0x4081
 80030f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030f4:	2301      	movs	r3, #1
 80030f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f8:	2300      	movs	r3, #0
 80030fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030fc:	2300      	movs	r3, #0
 80030fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003100:	f107 031c 	add.w	r3, r7, #28
 8003104:	4619      	mov	r1, r3
 8003106:	4819      	ldr	r0, [pc, #100]	; (800316c <MX_GPIO_Init+0x17c>)
 8003108:	f001 ffe4 	bl	80050d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = MOTOR5_INA_Pin|MOTOR5_INB_Pin|MOTOR1_INA_Pin|MOTOR1_INB_Pin
 800310c:	f24c 03ff 	movw	r3, #49407	; 0xc0ff
 8003110:	61fb      	str	r3, [r7, #28]
                          |MOTOR2_INA_Pin|MOTOR2_INB_Pin|MOTOR3_INA_Pin|MOTOR3_INB_Pin
                          |MOTOR4_INA_Pin|MOTOR4_INB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003112:	2301      	movs	r3, #1
 8003114:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003116:	2300      	movs	r3, #0
 8003118:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800311a:	2300      	movs	r3, #0
 800311c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800311e:	f107 031c 	add.w	r3, r7, #28
 8003122:	4619      	mov	r1, r3
 8003124:	4812      	ldr	r0, [pc, #72]	; (8003170 <MX_GPIO_Init+0x180>)
 8003126:	f001 ffd5 	bl	80050d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = MOTOR6_INA_Pin|MOTOR6_INB_Pin|PIN_TOGGLE_Pin|MOTORS_EN_Pin
 800312a:	f647 636c 	movw	r3, #32364	; 0x7e6c
 800312e:	61fb      	str	r3, [r7, #28]
                          |MOTOR1_END_Pin|MOTOR2_END_Pin|MOTOR3_END_Pin|MOTOR4_END_Pin
                          |MOTOR5_END_Pin|MOTOR6_END_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003130:	2301      	movs	r3, #1
 8003132:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003134:	2300      	movs	r3, #0
 8003136:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003138:	2300      	movs	r3, #0
 800313a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800313c:	f107 031c 	add.w	r3, r7, #28
 8003140:	4619      	mov	r1, r3
 8003142:	480c      	ldr	r0, [pc, #48]	; (8003174 <MX_GPIO_Init+0x184>)
 8003144:	f001 ffc6 	bl	80050d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003148:	2380      	movs	r3, #128	; 0x80
 800314a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800314c:	2300      	movs	r3, #0
 800314e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003150:	2300      	movs	r3, #0
 8003152:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003154:	f107 031c 	add.w	r3, r7, #28
 8003158:	4619      	mov	r1, r3
 800315a:	4806      	ldr	r0, [pc, #24]	; (8003174 <MX_GPIO_Init+0x184>)
 800315c:	f001 ffba 	bl	80050d4 <HAL_GPIO_Init>

}
 8003160:	bf00      	nop
 8003162:	3730      	adds	r7, #48	; 0x30
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40023800 	.word	0x40023800
 800316c:	40020400 	.word	0x40020400
 8003170:	40020c00 	.word	0x40020c00
 8003174:	40021800 	.word	0x40021800
 8003178:	40020800 	.word	0x40020800

0800317c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003180:	f001 fa5f 	bl	8004642 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003184:	f000 f82e 	bl	80031e4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003188:	f7ff ff32 	bl	8002ff0 <MX_GPIO_Init>
  MX_DMA_Init();
 800318c:	f7ff fbb8 	bl	8002900 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8003190:	f001 f886 	bl	80042a0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8003194:	f001 f984 	bl	80044a0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 8003198:	f000 fbd6 	bl	8003948 <MX_TIM1_Init>
  MX_TIM2_Init();
 800319c:	f000 fca4 	bl	8003ae8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80031a0:	f000 fcf6 	bl	8003b90 <MX_TIM3_Init>
  MX_TIM4_Init();
 80031a4:	f000 fd4a 	bl	8003c3c <MX_TIM4_Init>
  MX_TIM5_Init();
 80031a8:	f000 fd9e 	bl	8003ce8 <MX_TIM5_Init>
  MX_TIM8_Init();
 80031ac:	f000 fdf2 	bl	8003d94 <MX_TIM8_Init>
  MX_TIM9_Init();
 80031b0:	f000 fe4a 	bl	8003e48 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80031b4:	2100      	movs	r1, #0
 80031b6:	4809      	ldr	r0, [pc, #36]	; (80031dc <main+0x60>)
 80031b8:	f003 fd58 	bl	8006c6c <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80031bc:	213c      	movs	r1, #60	; 0x3c
 80031be:	4808      	ldr	r0, [pc, #32]	; (80031e0 <main+0x64>)
 80031c0:	f003 fef4 	bl	8006fac <HAL_TIM_Encoder_Start>
  TIM2->CNT = HALF_ENC+1;
 80031c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80031c8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80031cc:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80031ce:	f006 fe25 	bl	8009e1c <osKernelInitialize>
  MX_FREERTOS_Init();
 80031d2:	f7ff fc65 	bl	8002aa0 <_Z16MX_FREERTOS_Initv>

  /* Start scheduler */
  osKernelStart();
 80031d6:	f006 fe55 	bl	8009e84 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80031da:	e7fe      	b.n	80031da <main+0x5e>
 80031dc:	200077d0 	.word	0x200077d0
 80031e0:	2000781c 	.word	0x2000781c

080031e4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b094      	sub	sp, #80	; 0x50
 80031e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031ea:	f107 031c 	add.w	r3, r7, #28
 80031ee:	2234      	movs	r2, #52	; 0x34
 80031f0:	2100      	movs	r1, #0
 80031f2:	4618      	mov	r0, r3
 80031f4:	f01b fb4a 	bl	801e88c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031f8:	f107 0308 	add.w	r3, r7, #8
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	605a      	str	r2, [r3, #4]
 8003202:	609a      	str	r2, [r3, #8]
 8003204:	60da      	str	r2, [r3, #12]
 8003206:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003208:	4b33      	ldr	r3, [pc, #204]	; (80032d8 <_Z18SystemClock_Configv+0xf4>)
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320c:	4a32      	ldr	r2, [pc, #200]	; (80032d8 <_Z18SystemClock_Configv+0xf4>)
 800320e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003212:	6413      	str	r3, [r2, #64]	; 0x40
 8003214:	4b30      	ldr	r3, [pc, #192]	; (80032d8 <_Z18SystemClock_Configv+0xf4>)
 8003216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321c:	607b      	str	r3, [r7, #4]
 800321e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003220:	4b2e      	ldr	r3, [pc, #184]	; (80032dc <_Z18SystemClock_Configv+0xf8>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003228:	4a2c      	ldr	r2, [pc, #176]	; (80032dc <_Z18SystemClock_Configv+0xf8>)
 800322a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800322e:	6013      	str	r3, [r2, #0]
 8003230:	4b2a      	ldr	r3, [pc, #168]	; (80032dc <_Z18SystemClock_Configv+0xf8>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003238:	603b      	str	r3, [r7, #0]
 800323a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800323c:	2301      	movs	r3, #1
 800323e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003240:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003244:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003246:	2302      	movs	r3, #2
 8003248:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800324a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800324e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003250:	2304      	movs	r3, #4
 8003252:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8003254:	2360      	movs	r3, #96	; 0x60
 8003256:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003258:	2302      	movs	r3, #2
 800325a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800325c:	2304      	movs	r3, #4
 800325e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003260:	2302      	movs	r3, #2
 8003262:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003264:	f107 031c 	add.w	r3, r7, #28
 8003268:	4618      	mov	r0, r3
 800326a:	f002 faa9 	bl	80057c0 <HAL_RCC_OscConfig>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	bf14      	ite	ne
 8003274:	2301      	movne	r3, #1
 8003276:	2300      	moveq	r3, #0
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800327e:	f000 f841 	bl	8003304 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003282:	f002 fa4d 	bl	8005720 <HAL_PWREx_EnableOverDrive>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	bf14      	ite	ne
 800328c:	2301      	movne	r3, #1
 800328e:	2300      	moveq	r3, #0
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 8003296:	f000 f835 	bl	8003304 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800329a:	230f      	movs	r3, #15
 800329c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800329e:	2302      	movs	r3, #2
 80032a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032a2:	2300      	movs	r3, #0
 80032a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80032a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80032ac:	2300      	movs	r3, #0
 80032ae:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80032b0:	f107 0308 	add.w	r3, r7, #8
 80032b4:	2103      	movs	r1, #3
 80032b6:	4618      	mov	r0, r3
 80032b8:	f002 fd30 	bl	8005d1c <HAL_RCC_ClockConfig>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	bf14      	ite	ne
 80032c2:	2301      	movne	r3, #1
 80032c4:	2300      	moveq	r3, #0
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <_Z18SystemClock_Configv+0xec>
  {
    Error_Handler();
 80032cc:	f000 f81a 	bl	8003304 <Error_Handler>
  }
}
 80032d0:	bf00      	nop
 80032d2:	3750      	adds	r7, #80	; 0x50
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	40023800 	.word	0x40023800
 80032dc:	40007000 	.word	0x40007000

080032e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a04      	ldr	r2, [pc, #16]	; (8003300 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d101      	bne.n	80032f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80032f2:	f001 f9b3 	bl	800465c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80032f6:	bf00      	nop
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	40001000 	.word	0x40001000

08003304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003308:	b672      	cpsid	i
}
 800330a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800330c:	e7fe      	b.n	800330c <Error_Handler+0x8>
	...

08003310 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800331a:	4b0c      	ldr	r3, [pc, #48]	; (800334c <microros_allocate+0x3c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	461a      	mov	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4413      	add	r3, r2
 8003324:	461a      	mov	r2, r3
 8003326:	4b09      	ldr	r3, [pc, #36]	; (800334c <microros_allocate+0x3c>)
 8003328:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800332a:	4b09      	ldr	r3, [pc, #36]	; (8003350 <microros_allocate+0x40>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	461a      	mov	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4413      	add	r3, r2
 8003334:	461a      	mov	r2, r3
 8003336:	4b06      	ldr	r3, [pc, #24]	; (8003350 <microros_allocate+0x40>)
 8003338:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f7ff f88c 	bl	8002458 <pvPortMallocMicroROS>
 8003340:	4603      	mov	r3, r0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	20007774 	.word	0x20007774
 8003350:	20007778 	.word	0x20007778

08003354 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00c      	beq.n	800337e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7ff f99f 	bl	80026a8 <getBlockSize>
 800336a:	4603      	mov	r3, r0
 800336c:	4a06      	ldr	r2, [pc, #24]	; (8003388 <microros_deallocate+0x34>)
 800336e:	6812      	ldr	r2, [r2, #0]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	461a      	mov	r2, r3
 8003374:	4b04      	ldr	r3, [pc, #16]	; (8003388 <microros_deallocate+0x34>)
 8003376:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f7ff f937 	bl	80025ec <vPortFreeMicroROS>
  }
}
 800337e:	bf00      	nop
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	20007778 	.word	0x20007778

0800338c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8003398:	4b15      	ldr	r3, [pc, #84]	; (80033f0 <microros_reallocate+0x64>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	461a      	mov	r2, r3
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	4413      	add	r3, r2
 80033a2:	461a      	mov	r2, r3
 80033a4:	4b12      	ldr	r3, [pc, #72]	; (80033f0 <microros_reallocate+0x64>)
 80033a6:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80033a8:	4b12      	ldr	r3, [pc, #72]	; (80033f4 <microros_reallocate+0x68>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	461a      	mov	r2, r3
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	4413      	add	r3, r2
 80033b2:	461a      	mov	r2, r3
 80033b4:	4b0f      	ldr	r3, [pc, #60]	; (80033f4 <microros_reallocate+0x68>)
 80033b6:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d104      	bne.n	80033c8 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80033be:	68b8      	ldr	r0, [r7, #8]
 80033c0:	f7ff f84a 	bl	8002458 <pvPortMallocMicroROS>
 80033c4:	4603      	mov	r3, r0
 80033c6:	e00e      	b.n	80033e6 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f7ff f96d 	bl	80026a8 <getBlockSize>
 80033ce:	4603      	mov	r3, r0
 80033d0:	4a08      	ldr	r2, [pc, #32]	; (80033f4 <microros_reallocate+0x68>)
 80033d2:	6812      	ldr	r2, [r2, #0]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	461a      	mov	r2, r3
 80033d8:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <microros_reallocate+0x68>)
 80033da:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80033dc:	68b9      	ldr	r1, [r7, #8]
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f7ff f980 	bl	80026e4 <pvPortReallocMicroROS>
 80033e4:	4603      	mov	r3, r0
  }
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	20007774 	.word	0x20007774
 80033f4:	20007778 	.word	0x20007778

080033f8 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	fb02 f303 	mul.w	r3, r2, r3
 800340c:	4a0c      	ldr	r2, [pc, #48]	; (8003440 <microros_zero_allocate+0x48>)
 800340e:	6812      	ldr	r2, [r2, #0]
 8003410:	4413      	add	r3, r2
 8003412:	461a      	mov	r2, r3
 8003414:	4b0a      	ldr	r3, [pc, #40]	; (8003440 <microros_zero_allocate+0x48>)
 8003416:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	fb02 f303 	mul.w	r3, r2, r3
 8003420:	4a08      	ldr	r2, [pc, #32]	; (8003444 <microros_zero_allocate+0x4c>)
 8003422:	6812      	ldr	r2, [r2, #0]
 8003424:	4413      	add	r3, r2
 8003426:	461a      	mov	r2, r3
 8003428:	4b06      	ldr	r3, [pc, #24]	; (8003444 <microros_zero_allocate+0x4c>)
 800342a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 800342c:	68b9      	ldr	r1, [r7, #8]
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f7ff f985 	bl	800273e <pvPortCallocMicroROS>
 8003434:	4603      	mov	r3, r0
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	20007774 	.word	0x20007774
 8003444:	20007778 	.word	0x20007778

08003448 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8003448:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800344c:	b086      	sub	sp, #24
 800344e:	af00      	add	r7, sp, #0
 8003450:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003454:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8003456:	2300      	movs	r3, #0
 8003458:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800345a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800345e:	a320      	add	r3, pc, #128	; (adr r3, 80034e0 <UTILS_NanosecondsToTimespec+0x98>)
 8003460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003464:	f7fc ff54 	bl	8000310 <__aeabi_ldivmod>
 8003468:	4602      	mov	r2, r0
 800346a:	460b      	mov	r3, r1
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8003472:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003476:	a31a      	add	r3, pc, #104	; (adr r3, 80034e0 <UTILS_NanosecondsToTimespec+0x98>)
 8003478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347c:	f7fc ff48 	bl	8000310 <__aeabi_ldivmod>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	2b00      	cmp	r3, #0
 800348a:	da20      	bge.n	80034ce <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	4a11      	ldr	r2, [pc, #68]	; (80034d8 <UTILS_NanosecondsToTimespec+0x90>)
 8003492:	fb82 1203 	smull	r1, r2, r2, r3
 8003496:	1712      	asrs	r2, r2, #28
 8003498:	17db      	asrs	r3, r3, #31
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	3301      	adds	r3, #1
 800349e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a6:	6979      	ldr	r1, [r7, #20]
 80034a8:	17c8      	asrs	r0, r1, #31
 80034aa:	460c      	mov	r4, r1
 80034ac:	4605      	mov	r5, r0
 80034ae:	ebb2 0804 	subs.w	r8, r2, r4
 80034b2:	eb63 0905 	sbc.w	r9, r3, r5
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	4906      	ldr	r1, [pc, #24]	; (80034dc <UTILS_NanosecondsToTimespec+0x94>)
 80034c4:	fb01 f303 	mul.w	r3, r1, r3
 80034c8:	441a      	add	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	609a      	str	r2, [r3, #8]
    }
}
 80034ce:	bf00      	nop
 80034d0:	3718      	adds	r7, #24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80034d8:	44b82fa1 	.word	0x44b82fa1
 80034dc:	3b9aca00 	.word	0x3b9aca00
 80034e0:	3b9aca00 	.word	0x3b9aca00
 80034e4:	00000000 	.word	0x00000000

080034e8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80034e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034ec:	b08e      	sub	sp, #56	; 0x38
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6278      	str	r0, [r7, #36]	; 0x24
 80034f2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80034f4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80034f8:	2300      	movs	r3, #0
 80034fa:	6013      	str	r3, [r2, #0]
 80034fc:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80034fe:	f04f 0200 	mov.w	r2, #0
 8003502:	f04f 0300 	mov.w	r3, #0
 8003506:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800350a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800350e:	4618      	mov	r0, r3
 8003510:	f008 f8b8 	bl	800b684 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8003514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003516:	17da      	asrs	r2, r3, #31
 8003518:	61bb      	str	r3, [r7, #24]
 800351a:	61fa      	str	r2, [r7, #28]
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	f04f 0300 	mov.w	r3, #0
 8003524:	69b9      	ldr	r1, [r7, #24]
 8003526:	000b      	movs	r3, r1
 8003528:	2200      	movs	r2, #0
 800352a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800352e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003530:	2200      	movs	r2, #0
 8003532:	461c      	mov	r4, r3
 8003534:	4615      	mov	r5, r2
 8003536:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800353a:	1911      	adds	r1, r2, r4
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	416b      	adcs	r3, r5
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003546:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800354a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
 8003552:	f04f 0400 	mov.w	r4, #0
 8003556:	f04f 0500 	mov.w	r5, #0
 800355a:	015d      	lsls	r5, r3, #5
 800355c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8003560:	0154      	lsls	r4, r2, #5
 8003562:	4622      	mov	r2, r4
 8003564:	462b      	mov	r3, r5
 8003566:	ebb2 0800 	subs.w	r8, r2, r0
 800356a:	eb63 0901 	sbc.w	r9, r3, r1
 800356e:	f04f 0200 	mov.w	r2, #0
 8003572:	f04f 0300 	mov.w	r3, #0
 8003576:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800357a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800357e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8003582:	4690      	mov	r8, r2
 8003584:	4699      	mov	r9, r3
 8003586:	eb18 0a00 	adds.w	sl, r8, r0
 800358a:	eb49 0b01 	adc.w	fp, r9, r1
 800358e:	f04f 0200 	mov.w	r2, #0
 8003592:	f04f 0300 	mov.w	r3, #0
 8003596:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800359a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800359e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035a2:	ebb2 040a 	subs.w	r4, r2, sl
 80035a6:	603c      	str	r4, [r7, #0]
 80035a8:	eb63 030b 	sbc.w	r3, r3, fp
 80035ac:	607b      	str	r3, [r7, #4]
 80035ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035b2:	4623      	mov	r3, r4
 80035b4:	181b      	adds	r3, r3, r0
 80035b6:	613b      	str	r3, [r7, #16]
 80035b8:	462b      	mov	r3, r5
 80035ba:	eb41 0303 	adc.w	r3, r1, r3
 80035be:	617b      	str	r3, [r7, #20]
 80035c0:	6a3a      	ldr	r2, [r7, #32]
 80035c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80035c6:	f7ff ff3f 	bl	8003448 <UTILS_NanosecondsToTimespec>

    return 0;
 80035ca:	2300      	movs	r3, #0
 80035cc:	4618      	mov	r0, r3
 80035ce:	3738      	adds	r7, #56	; 0x38
 80035d0:	46bd      	mov	sp, r7
 80035d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080035d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80035de:	4b11      	ldr	r3, [pc, #68]	; (8003624 <HAL_MspInit+0x4c>)
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	4a10      	ldr	r2, [pc, #64]	; (8003624 <HAL_MspInit+0x4c>)
 80035e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035e8:	6413      	str	r3, [r2, #64]	; 0x40
 80035ea:	4b0e      	ldr	r3, [pc, #56]	; (8003624 <HAL_MspInit+0x4c>)
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f2:	607b      	str	r3, [r7, #4]
 80035f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035f6:	4b0b      	ldr	r3, [pc, #44]	; (8003624 <HAL_MspInit+0x4c>)
 80035f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fa:	4a0a      	ldr	r2, [pc, #40]	; (8003624 <HAL_MspInit+0x4c>)
 80035fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003600:	6453      	str	r3, [r2, #68]	; 0x44
 8003602:	4b08      	ldr	r3, [pc, #32]	; (8003624 <HAL_MspInit+0x4c>)
 8003604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800360a:	603b      	str	r3, [r7, #0]
 800360c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800360e:	2200      	movs	r2, #0
 8003610:	210f      	movs	r1, #15
 8003612:	f06f 0001 	mvn.w	r0, #1
 8003616:	f001 f91d 	bl	8004854 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800361a:	bf00      	nop
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	40023800 	.word	0x40023800

08003628 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b08e      	sub	sp, #56	; 0x38
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003630:	2300      	movs	r3, #0
 8003632:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003634:	2300      	movs	r3, #0
 8003636:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003638:	4b33      	ldr	r3, [pc, #204]	; (8003708 <HAL_InitTick+0xe0>)
 800363a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363c:	4a32      	ldr	r2, [pc, #200]	; (8003708 <HAL_InitTick+0xe0>)
 800363e:	f043 0310 	orr.w	r3, r3, #16
 8003642:	6413      	str	r3, [r2, #64]	; 0x40
 8003644:	4b30      	ldr	r3, [pc, #192]	; (8003708 <HAL_InitTick+0xe0>)
 8003646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003648:	f003 0310 	and.w	r3, r3, #16
 800364c:	60fb      	str	r3, [r7, #12]
 800364e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003650:	f107 0210 	add.w	r2, r7, #16
 8003654:	f107 0314 	add.w	r3, r7, #20
 8003658:	4611      	mov	r1, r2
 800365a:	4618      	mov	r0, r3
 800365c:	f002 fd84 	bl	8006168 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003660:	6a3b      	ldr	r3, [r7, #32]
 8003662:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003666:	2b00      	cmp	r3, #0
 8003668:	d103      	bne.n	8003672 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800366a:	f002 fd55 	bl	8006118 <HAL_RCC_GetPCLK1Freq>
 800366e:	6378      	str	r0, [r7, #52]	; 0x34
 8003670:	e004      	b.n	800367c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003672:	f002 fd51 	bl	8006118 <HAL_RCC_GetPCLK1Freq>
 8003676:	4603      	mov	r3, r0
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800367c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800367e:	4a23      	ldr	r2, [pc, #140]	; (800370c <HAL_InitTick+0xe4>)
 8003680:	fba2 2303 	umull	r2, r3, r2, r3
 8003684:	0c9b      	lsrs	r3, r3, #18
 8003686:	3b01      	subs	r3, #1
 8003688:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800368a:	4b21      	ldr	r3, [pc, #132]	; (8003710 <HAL_InitTick+0xe8>)
 800368c:	4a21      	ldr	r2, [pc, #132]	; (8003714 <HAL_InitTick+0xec>)
 800368e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003690:	4b1f      	ldr	r3, [pc, #124]	; (8003710 <HAL_InitTick+0xe8>)
 8003692:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003696:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003698:	4a1d      	ldr	r2, [pc, #116]	; (8003710 <HAL_InitTick+0xe8>)
 800369a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800369c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800369e:	4b1c      	ldr	r3, [pc, #112]	; (8003710 <HAL_InitTick+0xe8>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036a4:	4b1a      	ldr	r3, [pc, #104]	; (8003710 <HAL_InitTick+0xe8>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036aa:	4b19      	ldr	r3, [pc, #100]	; (8003710 <HAL_InitTick+0xe8>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80036b0:	4817      	ldr	r0, [pc, #92]	; (8003710 <HAL_InitTick+0xe8>)
 80036b2:	f003 f9b3 	bl	8006a1c <HAL_TIM_Base_Init>
 80036b6:	4603      	mov	r3, r0
 80036b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80036bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d11b      	bne.n	80036fc <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80036c4:	4812      	ldr	r0, [pc, #72]	; (8003710 <HAL_InitTick+0xe8>)
 80036c6:	f003 fa01 	bl	8006acc <HAL_TIM_Base_Start_IT>
 80036ca:	4603      	mov	r3, r0
 80036cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80036d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d111      	bne.n	80036fc <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80036d8:	2036      	movs	r0, #54	; 0x36
 80036da:	f001 f8d7 	bl	800488c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b0f      	cmp	r3, #15
 80036e2:	d808      	bhi.n	80036f6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80036e4:	2200      	movs	r2, #0
 80036e6:	6879      	ldr	r1, [r7, #4]
 80036e8:	2036      	movs	r0, #54	; 0x36
 80036ea:	f001 f8b3 	bl	8004854 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80036ee:	4a0a      	ldr	r2, [pc, #40]	; (8003718 <HAL_InitTick+0xf0>)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6013      	str	r3, [r2, #0]
 80036f4:	e002      	b.n	80036fc <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80036fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003700:	4618      	mov	r0, r3
 8003702:	3738      	adds	r7, #56	; 0x38
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	40023800 	.word	0x40023800
 800370c:	431bde83 	.word	0x431bde83
 8003710:	2000777c 	.word	0x2000777c
 8003714:	40001000 	.word	0x40001000
 8003718:	20000008 	.word	0x20000008

0800371c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003720:	e7fe      	b.n	8003720 <NMI_Handler+0x4>

08003722 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003722:	b480      	push	{r7}
 8003724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003726:	e7fe      	b.n	8003726 <HardFault_Handler+0x4>

08003728 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800372c:	e7fe      	b.n	800372c <MemManage_Handler+0x4>

0800372e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800372e:	b480      	push	{r7}
 8003730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003732:	e7fe      	b.n	8003732 <BusFault_Handler+0x4>

08003734 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003738:	e7fe      	b.n	8003738 <UsageFault_Handler+0x4>

0800373a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800373a:	b480      	push	{r7}
 800373c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800373e:	bf00      	nop
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800374c:	4802      	ldr	r0, [pc, #8]	; (8003758 <DMA1_Stream1_IRQHandler+0x10>)
 800374e:	f001 fa4b 	bl	8004be8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003752:	bf00      	nop
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	20007acc 	.word	0x20007acc

0800375c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003760:	4802      	ldr	r0, [pc, #8]	; (800376c <DMA1_Stream3_IRQHandler+0x10>)
 8003762:	f001 fa41 	bl	8004be8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003766:	bf00      	nop
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	20007a6c 	.word	0x20007a6c

08003770 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003774:	4802      	ldr	r0, [pc, #8]	; (8003780 <USART3_IRQHandler+0x10>)
 8003776:	f004 fe55 	bl	8008424 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800377a:	bf00      	nop
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	200079e4 	.word	0x200079e4

08003784 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003788:	4802      	ldr	r0, [pc, #8]	; (8003794 <TIM6_DAC_IRQHandler+0x10>)
 800378a:	f003 fc9d 	bl	80070c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800378e:	bf00      	nop
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	2000777c 	.word	0x2000777c

08003798 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  return 1;
 800379c:	2301      	movs	r3, #1
}
 800379e:	4618      	mov	r0, r3
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <_kill>:

int _kill(int pid, int sig)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80037b2:	f01b f967 	bl	801ea84 <__errno>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2216      	movs	r2, #22
 80037ba:	601a      	str	r2, [r3, #0]
  return -1;
 80037bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <_exit>:

void _exit (int status)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80037d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f7ff ffe7 	bl	80037a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80037da:	e7fe      	b.n	80037da <_exit+0x12>

080037dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037e8:	2300      	movs	r3, #0
 80037ea:	617b      	str	r3, [r7, #20]
 80037ec:	e00a      	b.n	8003804 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80037ee:	f3af 8000 	nop.w
 80037f2:	4601      	mov	r1, r0
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	1c5a      	adds	r2, r3, #1
 80037f8:	60ba      	str	r2, [r7, #8]
 80037fa:	b2ca      	uxtb	r2, r1
 80037fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	3301      	adds	r3, #1
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	429a      	cmp	r2, r3
 800380a:	dbf0      	blt.n	80037ee <_read+0x12>
  }

  return len;
 800380c:	687b      	ldr	r3, [r7, #4]
}
 800380e:	4618      	mov	r0, r3
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b086      	sub	sp, #24
 800381a:	af00      	add	r7, sp, #0
 800381c:	60f8      	str	r0, [r7, #12]
 800381e:	60b9      	str	r1, [r7, #8]
 8003820:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003822:	2300      	movs	r3, #0
 8003824:	617b      	str	r3, [r7, #20]
 8003826:	e009      	b.n	800383c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	1c5a      	adds	r2, r3, #1
 800382c:	60ba      	str	r2, [r7, #8]
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	4618      	mov	r0, r3
 8003832:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	3301      	adds	r3, #1
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	429a      	cmp	r2, r3
 8003842:	dbf1      	blt.n	8003828 <_write+0x12>
  }
  return len;
 8003844:	687b      	ldr	r3, [r7, #4]
}
 8003846:	4618      	mov	r0, r3
 8003848:	3718      	adds	r7, #24
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <_close>:

int _close(int file)
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003856:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800385a:	4618      	mov	r0, r3
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003866:	b480      	push	{r7}
 8003868:	b083      	sub	sp, #12
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
 800386e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003876:	605a      	str	r2, [r3, #4]
  return 0;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <_isatty>:

int _isatty(int file)
{
 8003886:	b480      	push	{r7}
 8003888:	b083      	sub	sp, #12
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800388e:	2301      	movs	r3, #1
}
 8003890:	4618      	mov	r0, r3
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3714      	adds	r7, #20
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
	...

080038b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038c0:	4a14      	ldr	r2, [pc, #80]	; (8003914 <_sbrk+0x5c>)
 80038c2:	4b15      	ldr	r3, [pc, #84]	; (8003918 <_sbrk+0x60>)
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038cc:	4b13      	ldr	r3, [pc, #76]	; (800391c <_sbrk+0x64>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d102      	bne.n	80038da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038d4:	4b11      	ldr	r3, [pc, #68]	; (800391c <_sbrk+0x64>)
 80038d6:	4a12      	ldr	r2, [pc, #72]	; (8003920 <_sbrk+0x68>)
 80038d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038da:	4b10      	ldr	r3, [pc, #64]	; (800391c <_sbrk+0x64>)
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4413      	add	r3, r2
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d207      	bcs.n	80038f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038e8:	f01b f8cc 	bl	801ea84 <__errno>
 80038ec:	4603      	mov	r3, r0
 80038ee:	220c      	movs	r2, #12
 80038f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038f6:	e009      	b.n	800390c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038f8:	4b08      	ldr	r3, [pc, #32]	; (800391c <_sbrk+0x64>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038fe:	4b07      	ldr	r3, [pc, #28]	; (800391c <_sbrk+0x64>)
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4413      	add	r3, r2
 8003906:	4a05      	ldr	r2, [pc, #20]	; (800391c <_sbrk+0x64>)
 8003908:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800390a:	68fb      	ldr	r3, [r7, #12]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3718      	adds	r7, #24
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	20080000 	.word	0x20080000
 8003918:	00000400 	.word	0x00000400
 800391c:	200077cc 	.word	0x200077cc
 8003920:	20011ee8 	.word	0x20011ee8

08003924 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003928:	4b06      	ldr	r3, [pc, #24]	; (8003944 <SystemInit+0x20>)
 800392a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800392e:	4a05      	ldr	r2, [pc, #20]	; (8003944 <SystemInit+0x20>)
 8003930:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003934:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003938:	bf00      	nop
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	e000ed00 	.word	0xe000ed00

08003948 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b09a      	sub	sp, #104	; 0x68
 800394c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800394e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003952:	2200      	movs	r2, #0
 8003954:	601a      	str	r2, [r3, #0]
 8003956:	605a      	str	r2, [r3, #4]
 8003958:	609a      	str	r2, [r3, #8]
 800395a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800395c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003960:	2200      	movs	r2, #0
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	605a      	str	r2, [r3, #4]
 8003966:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003968:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	605a      	str	r2, [r3, #4]
 8003972:	609a      	str	r2, [r3, #8]
 8003974:	60da      	str	r2, [r3, #12]
 8003976:	611a      	str	r2, [r3, #16]
 8003978:	615a      	str	r2, [r3, #20]
 800397a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800397c:	1d3b      	adds	r3, r7, #4
 800397e:	222c      	movs	r2, #44	; 0x2c
 8003980:	2100      	movs	r1, #0
 8003982:	4618      	mov	r0, r3
 8003984:	f01a ff82 	bl	801e88c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003988:	4b55      	ldr	r3, [pc, #340]	; (8003ae0 <MX_TIM1_Init+0x198>)
 800398a:	4a56      	ldr	r2, [pc, #344]	; (8003ae4 <MX_TIM1_Init+0x19c>)
 800398c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800398e:	4b54      	ldr	r3, [pc, #336]	; (8003ae0 <MX_TIM1_Init+0x198>)
 8003990:	2200      	movs	r2, #0
 8003992:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003994:	4b52      	ldr	r3, [pc, #328]	; (8003ae0 <MX_TIM1_Init+0x198>)
 8003996:	2200      	movs	r2, #0
 8003998:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 32767;
 800399a:	4b51      	ldr	r3, [pc, #324]	; (8003ae0 <MX_TIM1_Init+0x198>)
 800399c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80039a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039a2:	4b4f      	ldr	r3, [pc, #316]	; (8003ae0 <MX_TIM1_Init+0x198>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80039a8:	4b4d      	ldr	r3, [pc, #308]	; (8003ae0 <MX_TIM1_Init+0x198>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039ae:	4b4c      	ldr	r3, [pc, #304]	; (8003ae0 <MX_TIM1_Init+0x198>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80039b4:	484a      	ldr	r0, [pc, #296]	; (8003ae0 <MX_TIM1_Init+0x198>)
 80039b6:	f003 f831 	bl	8006a1c <HAL_TIM_Base_Init>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80039c0:	f7ff fca0 	bl	8003304 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039c8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80039ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80039ce:	4619      	mov	r1, r3
 80039d0:	4843      	ldr	r0, [pc, #268]	; (8003ae0 <MX_TIM1_Init+0x198>)
 80039d2:	f003 fdad 	bl	8007530 <HAL_TIM_ConfigClockSource>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80039dc:	f7ff fc92 	bl	8003304 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80039e0:	483f      	ldr	r0, [pc, #252]	; (8003ae0 <MX_TIM1_Init+0x198>)
 80039e2:	f003 f8eb 	bl	8006bbc <HAL_TIM_PWM_Init>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80039ec:	f7ff fc8a 	bl	8003304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039f0:	2300      	movs	r3, #0
 80039f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80039f4:	2300      	movs	r3, #0
 80039f6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039f8:	2300      	movs	r3, #0
 80039fa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80039fc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003a00:	4619      	mov	r1, r3
 8003a02:	4837      	ldr	r0, [pc, #220]	; (8003ae0 <MX_TIM1_Init+0x198>)
 8003a04:	f004 fa44 	bl	8007e90 <HAL_TIMEx_MasterConfigSynchronization>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003a0e:	f7ff fc79 	bl	8003304 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a12:	2360      	movs	r3, #96	; 0x60
 8003a14:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8003a16:	2300      	movs	r3, #0
 8003a18:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a22:	2300      	movs	r3, #0
 8003a24:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003a26:	2300      	movs	r3, #0
 8003a28:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a32:	2200      	movs	r2, #0
 8003a34:	4619      	mov	r1, r3
 8003a36:	482a      	ldr	r0, [pc, #168]	; (8003ae0 <MX_TIM1_Init+0x198>)
 8003a38:	f003 fc66 	bl	8007308 <HAL_TIM_PWM_ConfigChannel>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8003a42:	f7ff fc5f 	bl	8003304 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003a46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a4a:	2204      	movs	r2, #4
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4824      	ldr	r0, [pc, #144]	; (8003ae0 <MX_TIM1_Init+0x198>)
 8003a50:	f003 fc5a 	bl	8007308 <HAL_TIM_PWM_ConfigChannel>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8003a5a:	f7ff fc53 	bl	8003304 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003a5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a62:	2208      	movs	r2, #8
 8003a64:	4619      	mov	r1, r3
 8003a66:	481e      	ldr	r0, [pc, #120]	; (8003ae0 <MX_TIM1_Init+0x198>)
 8003a68:	f003 fc4e 	bl	8007308 <HAL_TIM_PWM_ConfigChannel>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8003a72:	f7ff fc47 	bl	8003304 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003a76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a7a:	220c      	movs	r2, #12
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4818      	ldr	r0, [pc, #96]	; (8003ae0 <MX_TIM1_Init+0x198>)
 8003a80:	f003 fc42 	bl	8007308 <HAL_TIM_PWM_ConfigChannel>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8003a8a:	f7ff fc3b 	bl	8003304 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003a92:	2300      	movs	r3, #0
 8003a94:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003a96:	2300      	movs	r3, #0
 8003a98:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003aa2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003aa6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003aac:	2300      	movs	r3, #0
 8003aae:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003ab0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003aba:	2300      	movs	r3, #0
 8003abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003abe:	1d3b      	adds	r3, r7, #4
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	4807      	ldr	r0, [pc, #28]	; (8003ae0 <MX_TIM1_Init+0x198>)
 8003ac4:	f004 fa72 	bl	8007fac <HAL_TIMEx_ConfigBreakDeadTime>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8003ace:	f7ff fc19 	bl	8003304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003ad2:	4803      	ldr	r0, [pc, #12]	; (8003ae0 <MX_TIM1_Init+0x198>)
 8003ad4:	f000 fb88 	bl	80041e8 <HAL_TIM_MspPostInit>

}
 8003ad8:	bf00      	nop
 8003ada:	3768      	adds	r7, #104	; 0x68
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	200077d0 	.word	0x200077d0
 8003ae4:	40010000 	.word	0x40010000

08003ae8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b08c      	sub	sp, #48	; 0x30
 8003aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003aee:	f107 030c 	add.w	r3, r7, #12
 8003af2:	2224      	movs	r2, #36	; 0x24
 8003af4:	2100      	movs	r1, #0
 8003af6:	4618      	mov	r0, r3
 8003af8:	f01a fec8 	bl	801e88c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003afc:	463b      	mov	r3, r7
 8003afe:	2200      	movs	r2, #0
 8003b00:	601a      	str	r2, [r3, #0]
 8003b02:	605a      	str	r2, [r3, #4]
 8003b04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003b06:	4b21      	ldr	r3, [pc, #132]	; (8003b8c <MX_TIM2_Init+0xa4>)
 8003b08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b0c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003b0e:	4b1f      	ldr	r3, [pc, #124]	; (8003b8c <MX_TIM2_Init+0xa4>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b14:	4b1d      	ldr	r3, [pc, #116]	; (8003b8c <MX_TIM2_Init+0xa4>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003b1a:	4b1c      	ldr	r3, [pc, #112]	; (8003b8c <MX_TIM2_Init+0xa4>)
 8003b1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b22:	4b1a      	ldr	r3, [pc, #104]	; (8003b8c <MX_TIM2_Init+0xa4>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b28:	4b18      	ldr	r3, [pc, #96]	; (8003b8c <MX_TIM2_Init+0xa4>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003b32:	2300      	movs	r3, #0
 8003b34:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003b36:	2301      	movs	r3, #1
 8003b38:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003b42:	2300      	movs	r3, #0
 8003b44:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003b46:	2301      	movs	r3, #1
 8003b48:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003b52:	f107 030c 	add.w	r3, r7, #12
 8003b56:	4619      	mov	r1, r3
 8003b58:	480c      	ldr	r0, [pc, #48]	; (8003b8c <MX_TIM2_Init+0xa4>)
 8003b5a:	f003 f981 	bl	8006e60 <HAL_TIM_Encoder_Init>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8003b64:	f7ff fbce 	bl	8003304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003b70:	463b      	mov	r3, r7
 8003b72:	4619      	mov	r1, r3
 8003b74:	4805      	ldr	r0, [pc, #20]	; (8003b8c <MX_TIM2_Init+0xa4>)
 8003b76:	f004 f98b 	bl	8007e90 <HAL_TIMEx_MasterConfigSynchronization>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8003b80:	f7ff fbc0 	bl	8003304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003b84:	bf00      	nop
 8003b86:	3730      	adds	r7, #48	; 0x30
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	2000781c 	.word	0x2000781c

08003b90 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b08c      	sub	sp, #48	; 0x30
 8003b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003b96:	f107 030c 	add.w	r3, r7, #12
 8003b9a:	2224      	movs	r2, #36	; 0x24
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f01a fe74 	bl	801e88c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ba4:	463b      	mov	r3, r7
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	601a      	str	r2, [r3, #0]
 8003baa:	605a      	str	r2, [r3, #4]
 8003bac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003bae:	4b21      	ldr	r3, [pc, #132]	; (8003c34 <MX_TIM3_Init+0xa4>)
 8003bb0:	4a21      	ldr	r2, [pc, #132]	; (8003c38 <MX_TIM3_Init+0xa8>)
 8003bb2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003bb4:	4b1f      	ldr	r3, [pc, #124]	; (8003c34 <MX_TIM3_Init+0xa4>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bba:	4b1e      	ldr	r3, [pc, #120]	; (8003c34 <MX_TIM3_Init+0xa4>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003bc0:	4b1c      	ldr	r3, [pc, #112]	; (8003c34 <MX_TIM3_Init+0xa4>)
 8003bc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bc6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bc8:	4b1a      	ldr	r3, [pc, #104]	; (8003c34 <MX_TIM3_Init+0xa4>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bce:	4b19      	ldr	r3, [pc, #100]	; (8003c34 <MX_TIM3_Init+0xa4>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003be0:	2300      	movs	r3, #0
 8003be2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003be4:	2300      	movs	r3, #0
 8003be6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003be8:	2300      	movs	r3, #0
 8003bea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003bec:	2301      	movs	r3, #1
 8003bee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003bf8:	f107 030c 	add.w	r3, r7, #12
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	480d      	ldr	r0, [pc, #52]	; (8003c34 <MX_TIM3_Init+0xa4>)
 8003c00:	f003 f92e 	bl	8006e60 <HAL_TIM_Encoder_Init>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8003c0a:	f7ff fb7b 	bl	8003304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c12:	2300      	movs	r3, #0
 8003c14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003c16:	463b      	mov	r3, r7
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4806      	ldr	r0, [pc, #24]	; (8003c34 <MX_TIM3_Init+0xa4>)
 8003c1c:	f004 f938 	bl	8007e90 <HAL_TIMEx_MasterConfigSynchronization>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8003c26:	f7ff fb6d 	bl	8003304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003c2a:	bf00      	nop
 8003c2c:	3730      	adds	r7, #48	; 0x30
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	20007868 	.word	0x20007868
 8003c38:	40000400 	.word	0x40000400

08003c3c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08c      	sub	sp, #48	; 0x30
 8003c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003c42:	f107 030c 	add.w	r3, r7, #12
 8003c46:	2224      	movs	r2, #36	; 0x24
 8003c48:	2100      	movs	r1, #0
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f01a fe1e 	bl	801e88c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c50:	463b      	mov	r3, r7
 8003c52:	2200      	movs	r2, #0
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	605a      	str	r2, [r3, #4]
 8003c58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003c5a:	4b21      	ldr	r3, [pc, #132]	; (8003ce0 <MX_TIM4_Init+0xa4>)
 8003c5c:	4a21      	ldr	r2, [pc, #132]	; (8003ce4 <MX_TIM4_Init+0xa8>)
 8003c5e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003c60:	4b1f      	ldr	r3, [pc, #124]	; (8003ce0 <MX_TIM4_Init+0xa4>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c66:	4b1e      	ldr	r3, [pc, #120]	; (8003ce0 <MX_TIM4_Init+0xa4>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003c6c:	4b1c      	ldr	r3, [pc, #112]	; (8003ce0 <MX_TIM4_Init+0xa4>)
 8003c6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c72:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c74:	4b1a      	ldr	r3, [pc, #104]	; (8003ce0 <MX_TIM4_Init+0xa4>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c7a:	4b19      	ldr	r3, [pc, #100]	; (8003ce0 <MX_TIM4_Init+0xa4>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003c80:	2301      	movs	r3, #1
 8003c82:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003c84:	2300      	movs	r3, #0
 8003c86:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003c90:	2300      	movs	r3, #0
 8003c92:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003c94:	2300      	movs	r3, #0
 8003c96:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003ca4:	f107 030c 	add.w	r3, r7, #12
 8003ca8:	4619      	mov	r1, r3
 8003caa:	480d      	ldr	r0, [pc, #52]	; (8003ce0 <MX_TIM4_Init+0xa4>)
 8003cac:	f003 f8d8 	bl	8006e60 <HAL_TIM_Encoder_Init>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8003cb6:	f7ff fb25 	bl	8003304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003cc2:	463b      	mov	r3, r7
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	4806      	ldr	r0, [pc, #24]	; (8003ce0 <MX_TIM4_Init+0xa4>)
 8003cc8:	f004 f8e2 	bl	8007e90 <HAL_TIMEx_MasterConfigSynchronization>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8003cd2:	f7ff fb17 	bl	8003304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003cd6:	bf00      	nop
 8003cd8:	3730      	adds	r7, #48	; 0x30
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	200078b4 	.word	0x200078b4
 8003ce4:	40000800 	.word	0x40000800

08003ce8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b08c      	sub	sp, #48	; 0x30
 8003cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003cee:	f107 030c 	add.w	r3, r7, #12
 8003cf2:	2224      	movs	r2, #36	; 0x24
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f01a fdc8 	bl	801e88c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cfc:	463b      	mov	r3, r7
 8003cfe:	2200      	movs	r2, #0
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	605a      	str	r2, [r3, #4]
 8003d04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003d06:	4b21      	ldr	r3, [pc, #132]	; (8003d8c <MX_TIM5_Init+0xa4>)
 8003d08:	4a21      	ldr	r2, [pc, #132]	; (8003d90 <MX_TIM5_Init+0xa8>)
 8003d0a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003d0c:	4b1f      	ldr	r3, [pc, #124]	; (8003d8c <MX_TIM5_Init+0xa4>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d12:	4b1e      	ldr	r3, [pc, #120]	; (8003d8c <MX_TIM5_Init+0xa4>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003d18:	4b1c      	ldr	r3, [pc, #112]	; (8003d8c <MX_TIM5_Init+0xa4>)
 8003d1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d1e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d20:	4b1a      	ldr	r3, [pc, #104]	; (8003d8c <MX_TIM5_Init+0xa4>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d26:	4b19      	ldr	r3, [pc, #100]	; (8003d8c <MX_TIM5_Init+0xa4>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003d30:	2300      	movs	r3, #0
 8003d32:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003d34:	2301      	movs	r3, #1
 8003d36:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003d40:	2300      	movs	r3, #0
 8003d42:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003d44:	2301      	movs	r3, #1
 8003d46:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003d50:	f107 030c 	add.w	r3, r7, #12
 8003d54:	4619      	mov	r1, r3
 8003d56:	480d      	ldr	r0, [pc, #52]	; (8003d8c <MX_TIM5_Init+0xa4>)
 8003d58:	f003 f882 	bl	8006e60 <HAL_TIM_Encoder_Init>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d001      	beq.n	8003d66 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8003d62:	f7ff facf 	bl	8003304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d66:	2300      	movs	r3, #0
 8003d68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003d6e:	463b      	mov	r3, r7
 8003d70:	4619      	mov	r1, r3
 8003d72:	4806      	ldr	r0, [pc, #24]	; (8003d8c <MX_TIM5_Init+0xa4>)
 8003d74:	f004 f88c 	bl	8007e90 <HAL_TIMEx_MasterConfigSynchronization>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8003d7e:	f7ff fac1 	bl	8003304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003d82:	bf00      	nop
 8003d84:	3730      	adds	r7, #48	; 0x30
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	20007900 	.word	0x20007900
 8003d90:	40000c00 	.word	0x40000c00

08003d94 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b08c      	sub	sp, #48	; 0x30
 8003d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003d9a:	f107 030c 	add.w	r3, r7, #12
 8003d9e:	2224      	movs	r2, #36	; 0x24
 8003da0:	2100      	movs	r1, #0
 8003da2:	4618      	mov	r0, r3
 8003da4:	f01a fd72 	bl	801e88c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003da8:	463b      	mov	r3, r7
 8003daa:	2200      	movs	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]
 8003dae:	605a      	str	r2, [r3, #4]
 8003db0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003db2:	4b23      	ldr	r3, [pc, #140]	; (8003e40 <MX_TIM8_Init+0xac>)
 8003db4:	4a23      	ldr	r2, [pc, #140]	; (8003e44 <MX_TIM8_Init+0xb0>)
 8003db6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003db8:	4b21      	ldr	r3, [pc, #132]	; (8003e40 <MX_TIM8_Init+0xac>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dbe:	4b20      	ldr	r3, [pc, #128]	; (8003e40 <MX_TIM8_Init+0xac>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003dc4:	4b1e      	ldr	r3, [pc, #120]	; (8003e40 <MX_TIM8_Init+0xac>)
 8003dc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dca:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003dcc:	4b1c      	ldr	r3, [pc, #112]	; (8003e40 <MX_TIM8_Init+0xac>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003dd2:	4b1b      	ldr	r3, [pc, #108]	; (8003e40 <MX_TIM8_Init+0xac>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dd8:	4b19      	ldr	r3, [pc, #100]	; (8003e40 <MX_TIM8_Init+0xac>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003dde:	2301      	movs	r3, #1
 8003de0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003de2:	2300      	movs	r3, #0
 8003de4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003de6:	2301      	movs	r3, #1
 8003de8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003dea:	2300      	movs	r3, #0
 8003dec:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003dee:	2300      	movs	r3, #0
 8003df0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003df2:	2300      	movs	r3, #0
 8003df4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003df6:	2301      	movs	r3, #1
 8003df8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8003e02:	f107 030c 	add.w	r3, r7, #12
 8003e06:	4619      	mov	r1, r3
 8003e08:	480d      	ldr	r0, [pc, #52]	; (8003e40 <MX_TIM8_Init+0xac>)
 8003e0a:	f003 f829 	bl	8006e60 <HAL_TIM_Encoder_Init>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8003e14:	f7ff fa76 	bl	8003304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e20:	2300      	movs	r3, #0
 8003e22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003e24:	463b      	mov	r3, r7
 8003e26:	4619      	mov	r1, r3
 8003e28:	4805      	ldr	r0, [pc, #20]	; (8003e40 <MX_TIM8_Init+0xac>)
 8003e2a:	f004 f831 	bl	8007e90 <HAL_TIMEx_MasterConfigSynchronization>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8003e34:	f7ff fa66 	bl	8003304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003e38:	bf00      	nop
 8003e3a:	3730      	adds	r7, #48	; 0x30
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	2000794c 	.word	0x2000794c
 8003e44:	40010400 	.word	0x40010400

08003e48 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b088      	sub	sp, #32
 8003e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e4e:	1d3b      	adds	r3, r7, #4
 8003e50:	2200      	movs	r2, #0
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	605a      	str	r2, [r3, #4]
 8003e56:	609a      	str	r2, [r3, #8]
 8003e58:	60da      	str	r2, [r3, #12]
 8003e5a:	611a      	str	r2, [r3, #16]
 8003e5c:	615a      	str	r2, [r3, #20]
 8003e5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003e60:	4b1f      	ldr	r3, [pc, #124]	; (8003ee0 <MX_TIM9_Init+0x98>)
 8003e62:	4a20      	ldr	r2, [pc, #128]	; (8003ee4 <MX_TIM9_Init+0x9c>)
 8003e64:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8003e66:	4b1e      	ldr	r3, [pc, #120]	; (8003ee0 <MX_TIM9_Init+0x98>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e6c:	4b1c      	ldr	r3, [pc, #112]	; (8003ee0 <MX_TIM9_Init+0x98>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8003e72:	4b1b      	ldr	r3, [pc, #108]	; (8003ee0 <MX_TIM9_Init+0x98>)
 8003e74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e78:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e7a:	4b19      	ldr	r3, [pc, #100]	; (8003ee0 <MX_TIM9_Init+0x98>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e80:	4b17      	ldr	r3, [pc, #92]	; (8003ee0 <MX_TIM9_Init+0x98>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8003e86:	4816      	ldr	r0, [pc, #88]	; (8003ee0 <MX_TIM9_Init+0x98>)
 8003e88:	f002 fe98 	bl	8006bbc <HAL_TIM_PWM_Init>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d001      	beq.n	8003e96 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8003e92:	f7ff fa37 	bl	8003304 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e96:	2360      	movs	r3, #96	; 0x60
 8003e98:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ea6:	1d3b      	adds	r3, r7, #4
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	4619      	mov	r1, r3
 8003eac:	480c      	ldr	r0, [pc, #48]	; (8003ee0 <MX_TIM9_Init+0x98>)
 8003eae:	f003 fa2b 	bl	8007308 <HAL_TIM_PWM_ConfigChannel>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8003eb8:	f7ff fa24 	bl	8003304 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003ebc:	1d3b      	adds	r3, r7, #4
 8003ebe:	2204      	movs	r2, #4
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	4807      	ldr	r0, [pc, #28]	; (8003ee0 <MX_TIM9_Init+0x98>)
 8003ec4:	f003 fa20 	bl	8007308 <HAL_TIM_PWM_ConfigChannel>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8003ece:	f7ff fa19 	bl	8003304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8003ed2:	4803      	ldr	r0, [pc, #12]	; (8003ee0 <MX_TIM9_Init+0x98>)
 8003ed4:	f000 f988 	bl	80041e8 <HAL_TIM_MspPostInit>

}
 8003ed8:	bf00      	nop
 8003eda:	3720      	adds	r7, #32
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	20007998 	.word	0x20007998
 8003ee4:	40014000 	.word	0x40014000

08003ee8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a0a      	ldr	r2, [pc, #40]	; (8003f20 <HAL_TIM_Base_MspInit+0x38>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d10b      	bne.n	8003f12 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003efa:	4b0a      	ldr	r3, [pc, #40]	; (8003f24 <HAL_TIM_Base_MspInit+0x3c>)
 8003efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efe:	4a09      	ldr	r2, [pc, #36]	; (8003f24 <HAL_TIM_Base_MspInit+0x3c>)
 8003f00:	f043 0301 	orr.w	r3, r3, #1
 8003f04:	6453      	str	r3, [r2, #68]	; 0x44
 8003f06:	4b07      	ldr	r3, [pc, #28]	; (8003f24 <HAL_TIM_Base_MspInit+0x3c>)
 8003f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	60fb      	str	r3, [r7, #12]
 8003f10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003f12:	bf00      	nop
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	40010000 	.word	0x40010000
 8003f24:	40023800 	.word	0x40023800

08003f28 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b094      	sub	sp, #80	; 0x50
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f30:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	605a      	str	r2, [r3, #4]
 8003f3a:	609a      	str	r2, [r3, #8]
 8003f3c:	60da      	str	r2, [r3, #12]
 8003f3e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f48:	d144      	bne.n	8003fd4 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f4a:	4b8e      	ldr	r3, [pc, #568]	; (8004184 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4e:	4a8d      	ldr	r2, [pc, #564]	; (8004184 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003f50:	f043 0301 	orr.w	r3, r3, #1
 8003f54:	6413      	str	r3, [r2, #64]	; 0x40
 8003f56:	4b8b      	ldr	r3, [pc, #556]	; (8004184 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f62:	4b88      	ldr	r3, [pc, #544]	; (8004184 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f66:	4a87      	ldr	r2, [pc, #540]	; (8004184 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003f68:	f043 0301 	orr.w	r3, r3, #1
 8003f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f6e:	4b85      	ldr	r3, [pc, #532]	; (8004184 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	637b      	str	r3, [r7, #52]	; 0x34
 8003f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f7a:	4b82      	ldr	r3, [pc, #520]	; (8004184 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7e:	4a81      	ldr	r2, [pc, #516]	; (8004184 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003f80:	f043 0302 	orr.w	r3, r3, #2
 8003f84:	6313      	str	r3, [r2, #48]	; 0x30
 8003f86:	4b7f      	ldr	r3, [pc, #508]	; (8004184 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	633b      	str	r3, [r7, #48]	; 0x30
 8003f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTOR1_CHA_Pin;
 8003f92:	2320      	movs	r3, #32
 8003f94:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f96:	2302      	movs	r3, #2
 8003f98:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MOTOR1_CHA_GPIO_Port, &GPIO_InitStruct);
 8003fa6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003faa:	4619      	mov	r1, r3
 8003fac:	4876      	ldr	r0, [pc, #472]	; (8004188 <HAL_TIM_Encoder_MspInit+0x260>)
 8003fae:	f001 f891 	bl	80050d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR1_CHB_Pin;
 8003fb2:	2308      	movs	r3, #8
 8003fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MOTOR1_CHB_GPIO_Port, &GPIO_InitStruct);
 8003fc6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003fca:	4619      	mov	r1, r3
 8003fcc:	486f      	ldr	r0, [pc, #444]	; (800418c <HAL_TIM_Encoder_MspInit+0x264>)
 8003fce:	f001 f881 	bl	80050d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003fd2:	e0d3      	b.n	800417c <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM3)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a6d      	ldr	r2, [pc, #436]	; (8004190 <HAL_TIM_Encoder_MspInit+0x268>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d144      	bne.n	8004068 <HAL_TIM_Encoder_MspInit+0x140>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003fde:	4b69      	ldr	r3, [pc, #420]	; (8004184 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe2:	4a68      	ldr	r2, [pc, #416]	; (8004184 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003fe4:	f043 0302 	orr.w	r3, r3, #2
 8003fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8003fea:	4b66      	ldr	r3, [pc, #408]	; (8004184 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ff6:	4b63      	ldr	r3, [pc, #396]	; (8004184 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffa:	4a62      	ldr	r2, [pc, #392]	; (8004184 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003ffc:	f043 0301 	orr.w	r3, r3, #1
 8004000:	6313      	str	r3, [r2, #48]	; 0x30
 8004002:	4b60      	ldr	r3, [pc, #384]	; (8004184 <HAL_TIM_Encoder_MspInit+0x25c>)
 8004004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	62bb      	str	r3, [r7, #40]	; 0x28
 800400c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800400e:	4b5d      	ldr	r3, [pc, #372]	; (8004184 <HAL_TIM_Encoder_MspInit+0x25c>)
 8004010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004012:	4a5c      	ldr	r2, [pc, #368]	; (8004184 <HAL_TIM_Encoder_MspInit+0x25c>)
 8004014:	f043 0302 	orr.w	r3, r3, #2
 8004018:	6313      	str	r3, [r2, #48]	; 0x30
 800401a:	4b5a      	ldr	r3, [pc, #360]	; (8004184 <HAL_TIM_Encoder_MspInit+0x25c>)
 800401c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	627b      	str	r3, [r7, #36]	; 0x24
 8004024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = MOTOR2_CHA_Pin;
 8004026:	2340      	movs	r3, #64	; 0x40
 8004028:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800402a:	2302      	movs	r3, #2
 800402c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800402e:	2300      	movs	r3, #0
 8004030:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004032:	2300      	movs	r3, #0
 8004034:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004036:	2302      	movs	r3, #2
 8004038:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MOTOR2_CHA_GPIO_Port, &GPIO_InitStruct);
 800403a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800403e:	4619      	mov	r1, r3
 8004040:	4851      	ldr	r0, [pc, #324]	; (8004188 <HAL_TIM_Encoder_MspInit+0x260>)
 8004042:	f001 f847 	bl	80050d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MOTOR2_CHB_Pin;
 8004046:	2320      	movs	r3, #32
 8004048:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800404a:	2302      	movs	r3, #2
 800404c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800404e:	2300      	movs	r3, #0
 8004050:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004052:	2300      	movs	r3, #0
 8004054:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004056:	2302      	movs	r3, #2
 8004058:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MOTOR2_CHB_GPIO_Port, &GPIO_InitStruct);
 800405a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800405e:	4619      	mov	r1, r3
 8004060:	484a      	ldr	r0, [pc, #296]	; (800418c <HAL_TIM_Encoder_MspInit+0x264>)
 8004062:	f001 f837 	bl	80050d4 <HAL_GPIO_Init>
}
 8004066:	e089      	b.n	800417c <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM4)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a49      	ldr	r2, [pc, #292]	; (8004194 <HAL_TIM_Encoder_MspInit+0x26c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d129      	bne.n	80040c6 <HAL_TIM_Encoder_MspInit+0x19e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004072:	4b44      	ldr	r3, [pc, #272]	; (8004184 <HAL_TIM_Encoder_MspInit+0x25c>)
 8004074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004076:	4a43      	ldr	r2, [pc, #268]	; (8004184 <HAL_TIM_Encoder_MspInit+0x25c>)
 8004078:	f043 0304 	orr.w	r3, r3, #4
 800407c:	6413      	str	r3, [r2, #64]	; 0x40
 800407e:	4b41      	ldr	r3, [pc, #260]	; (8004184 <HAL_TIM_Encoder_MspInit+0x25c>)
 8004080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004082:	f003 0304 	and.w	r3, r3, #4
 8004086:	623b      	str	r3, [r7, #32]
 8004088:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800408a:	4b3e      	ldr	r3, [pc, #248]	; (8004184 <HAL_TIM_Encoder_MspInit+0x25c>)
 800408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408e:	4a3d      	ldr	r2, [pc, #244]	; (8004184 <HAL_TIM_Encoder_MspInit+0x25c>)
 8004090:	f043 0308 	orr.w	r3, r3, #8
 8004094:	6313      	str	r3, [r2, #48]	; 0x30
 8004096:	4b3b      	ldr	r3, [pc, #236]	; (8004184 <HAL_TIM_Encoder_MspInit+0x25c>)
 8004098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409a:	f003 0308 	and.w	r3, r3, #8
 800409e:	61fb      	str	r3, [r7, #28]
 80040a0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = MOTOR3_CHA_Pin|MOTOR3_CHB_Pin;
 80040a2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80040a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040a8:	2302      	movs	r3, #2
 80040aa:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ac:	2300      	movs	r3, #0
 80040ae:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040b0:	2300      	movs	r3, #0
 80040b2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80040b4:	2302      	movs	r3, #2
 80040b6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80040bc:	4619      	mov	r1, r3
 80040be:	4836      	ldr	r0, [pc, #216]	; (8004198 <HAL_TIM_Encoder_MspInit+0x270>)
 80040c0:	f001 f808 	bl	80050d4 <HAL_GPIO_Init>
}
 80040c4:	e05a      	b.n	800417c <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM5)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a34      	ldr	r2, [pc, #208]	; (800419c <HAL_TIM_Encoder_MspInit+0x274>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d128      	bne.n	8004122 <HAL_TIM_Encoder_MspInit+0x1fa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80040d0:	4b2c      	ldr	r3, [pc, #176]	; (8004184 <HAL_TIM_Encoder_MspInit+0x25c>)
 80040d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d4:	4a2b      	ldr	r2, [pc, #172]	; (8004184 <HAL_TIM_Encoder_MspInit+0x25c>)
 80040d6:	f043 0308 	orr.w	r3, r3, #8
 80040da:	6413      	str	r3, [r2, #64]	; 0x40
 80040dc:	4b29      	ldr	r3, [pc, #164]	; (8004184 <HAL_TIM_Encoder_MspInit+0x25c>)
 80040de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e0:	f003 0308 	and.w	r3, r3, #8
 80040e4:	61bb      	str	r3, [r7, #24]
 80040e6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040e8:	4b26      	ldr	r3, [pc, #152]	; (8004184 <HAL_TIM_Encoder_MspInit+0x25c>)
 80040ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ec:	4a25      	ldr	r2, [pc, #148]	; (8004184 <HAL_TIM_Encoder_MspInit+0x25c>)
 80040ee:	f043 0301 	orr.w	r3, r3, #1
 80040f2:	6313      	str	r3, [r2, #48]	; 0x30
 80040f4:	4b23      	ldr	r3, [pc, #140]	; (8004184 <HAL_TIM_Encoder_MspInit+0x25c>)
 80040f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	617b      	str	r3, [r7, #20]
 80040fe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MOTOR4_CHA_Pin|MOTOR4_CHB_Pin;
 8004100:	2303      	movs	r3, #3
 8004102:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004104:	2302      	movs	r3, #2
 8004106:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004108:	2300      	movs	r3, #0
 800410a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800410c:	2300      	movs	r3, #0
 800410e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004110:	2302      	movs	r3, #2
 8004112:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004114:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004118:	4619      	mov	r1, r3
 800411a:	481b      	ldr	r0, [pc, #108]	; (8004188 <HAL_TIM_Encoder_MspInit+0x260>)
 800411c:	f000 ffda 	bl	80050d4 <HAL_GPIO_Init>
}
 8004120:	e02c      	b.n	800417c <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM8)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a1e      	ldr	r2, [pc, #120]	; (80041a0 <HAL_TIM_Encoder_MspInit+0x278>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d127      	bne.n	800417c <HAL_TIM_Encoder_MspInit+0x254>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800412c:	4b15      	ldr	r3, [pc, #84]	; (8004184 <HAL_TIM_Encoder_MspInit+0x25c>)
 800412e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004130:	4a14      	ldr	r2, [pc, #80]	; (8004184 <HAL_TIM_Encoder_MspInit+0x25c>)
 8004132:	f043 0302 	orr.w	r3, r3, #2
 8004136:	6453      	str	r3, [r2, #68]	; 0x44
 8004138:	4b12      	ldr	r3, [pc, #72]	; (8004184 <HAL_TIM_Encoder_MspInit+0x25c>)
 800413a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	613b      	str	r3, [r7, #16]
 8004142:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004144:	4b0f      	ldr	r3, [pc, #60]	; (8004184 <HAL_TIM_Encoder_MspInit+0x25c>)
 8004146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004148:	4a0e      	ldr	r2, [pc, #56]	; (8004184 <HAL_TIM_Encoder_MspInit+0x25c>)
 800414a:	f043 0304 	orr.w	r3, r3, #4
 800414e:	6313      	str	r3, [r2, #48]	; 0x30
 8004150:	4b0c      	ldr	r3, [pc, #48]	; (8004184 <HAL_TIM_Encoder_MspInit+0x25c>)
 8004152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004154:	f003 0304 	and.w	r3, r3, #4
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR5_CHA_Pin|MOTOR5_CHB_Pin;
 800415c:	23c0      	movs	r3, #192	; 0xc0
 800415e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004160:	2302      	movs	r3, #2
 8004162:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004164:	2300      	movs	r3, #0
 8004166:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004168:	2300      	movs	r3, #0
 800416a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800416c:	2303      	movs	r3, #3
 800416e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004170:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004174:	4619      	mov	r1, r3
 8004176:	480b      	ldr	r0, [pc, #44]	; (80041a4 <HAL_TIM_Encoder_MspInit+0x27c>)
 8004178:	f000 ffac 	bl	80050d4 <HAL_GPIO_Init>
}
 800417c:	bf00      	nop
 800417e:	3750      	adds	r7, #80	; 0x50
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	40023800 	.word	0x40023800
 8004188:	40020000 	.word	0x40020000
 800418c:	40020400 	.word	0x40020400
 8004190:	40000400 	.word	0x40000400
 8004194:	40000800 	.word	0x40000800
 8004198:	40020c00 	.word	0x40020c00
 800419c:	40000c00 	.word	0x40000c00
 80041a0:	40010400 	.word	0x40010400
 80041a4:	40020800 	.word	0x40020800

080041a8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM9)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a0a      	ldr	r2, [pc, #40]	; (80041e0 <HAL_TIM_PWM_MspInit+0x38>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d10b      	bne.n	80041d2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 80041ba:	4b0a      	ldr	r3, [pc, #40]	; (80041e4 <HAL_TIM_PWM_MspInit+0x3c>)
 80041bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041be:	4a09      	ldr	r2, [pc, #36]	; (80041e4 <HAL_TIM_PWM_MspInit+0x3c>)
 80041c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041c4:	6453      	str	r3, [r2, #68]	; 0x44
 80041c6:	4b07      	ldr	r3, [pc, #28]	; (80041e4 <HAL_TIM_PWM_MspInit+0x3c>)
 80041c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ce:	60fb      	str	r3, [r7, #12]
 80041d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 80041d2:	bf00      	nop
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	40014000 	.word	0x40014000
 80041e4:	40023800 	.word	0x40023800

080041e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b08a      	sub	sp, #40	; 0x28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041f0:	f107 0314 	add.w	r3, r7, #20
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	605a      	str	r2, [r3, #4]
 80041fa:	609a      	str	r2, [r3, #8]
 80041fc:	60da      	str	r2, [r3, #12]
 80041fe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a22      	ldr	r2, [pc, #136]	; (8004290 <HAL_TIM_MspPostInit+0xa8>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d11d      	bne.n	8004246 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800420a:	4b22      	ldr	r3, [pc, #136]	; (8004294 <HAL_TIM_MspPostInit+0xac>)
 800420c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420e:	4a21      	ldr	r2, [pc, #132]	; (8004294 <HAL_TIM_MspPostInit+0xac>)
 8004210:	f043 0310 	orr.w	r3, r3, #16
 8004214:	6313      	str	r3, [r2, #48]	; 0x30
 8004216:	4b1f      	ldr	r3, [pc, #124]	; (8004294 <HAL_TIM_MspPostInit+0xac>)
 8004218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421a:	f003 0310 	and.w	r3, r3, #16
 800421e:	613b      	str	r3, [r7, #16]
 8004220:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MOTOR1_PWM_Pin|MOTOR2_PWM_Pin|MOTOR3_PWM_Pin|MOTOR4_PWM_Pin;
 8004222:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8004226:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004228:	2302      	movs	r3, #2
 800422a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800422c:	2300      	movs	r3, #0
 800422e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004230:	2300      	movs	r3, #0
 8004232:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004234:	2301      	movs	r3, #1
 8004236:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004238:	f107 0314 	add.w	r3, r7, #20
 800423c:	4619      	mov	r1, r3
 800423e:	4816      	ldr	r0, [pc, #88]	; (8004298 <HAL_TIM_MspPostInit+0xb0>)
 8004240:	f000 ff48 	bl	80050d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8004244:	e020      	b.n	8004288 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM9)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a14      	ldr	r2, [pc, #80]	; (800429c <HAL_TIM_MspPostInit+0xb4>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d11b      	bne.n	8004288 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004250:	4b10      	ldr	r3, [pc, #64]	; (8004294 <HAL_TIM_MspPostInit+0xac>)
 8004252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004254:	4a0f      	ldr	r2, [pc, #60]	; (8004294 <HAL_TIM_MspPostInit+0xac>)
 8004256:	f043 0310 	orr.w	r3, r3, #16
 800425a:	6313      	str	r3, [r2, #48]	; 0x30
 800425c:	4b0d      	ldr	r3, [pc, #52]	; (8004294 <HAL_TIM_MspPostInit+0xac>)
 800425e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004260:	f003 0310 	and.w	r3, r3, #16
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR5_PWM_Pin|MOTOR6_PWM_Pin;
 8004268:	2360      	movs	r3, #96	; 0x60
 800426a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800426c:	2302      	movs	r3, #2
 800426e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004270:	2300      	movs	r3, #0
 8004272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004274:	2300      	movs	r3, #0
 8004276:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8004278:	2303      	movs	r3, #3
 800427a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800427c:	f107 0314 	add.w	r3, r7, #20
 8004280:	4619      	mov	r1, r3
 8004282:	4805      	ldr	r0, [pc, #20]	; (8004298 <HAL_TIM_MspPostInit+0xb0>)
 8004284:	f000 ff26 	bl	80050d4 <HAL_GPIO_Init>
}
 8004288:	bf00      	nop
 800428a:	3728      	adds	r7, #40	; 0x28
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	40010000 	.word	0x40010000
 8004294:	40023800 	.word	0x40023800
 8004298:	40021000 	.word	0x40021000
 800429c:	40014000 	.word	0x40014000

080042a0 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80042a4:	4b14      	ldr	r3, [pc, #80]	; (80042f8 <MX_USART3_UART_Init+0x58>)
 80042a6:	4a15      	ldr	r2, [pc, #84]	; (80042fc <MX_USART3_UART_Init+0x5c>)
 80042a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80042aa:	4b13      	ldr	r3, [pc, #76]	; (80042f8 <MX_USART3_UART_Init+0x58>)
 80042ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80042b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80042b2:	4b11      	ldr	r3, [pc, #68]	; (80042f8 <MX_USART3_UART_Init+0x58>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80042b8:	4b0f      	ldr	r3, [pc, #60]	; (80042f8 <MX_USART3_UART_Init+0x58>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80042be:	4b0e      	ldr	r3, [pc, #56]	; (80042f8 <MX_USART3_UART_Init+0x58>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80042c4:	4b0c      	ldr	r3, [pc, #48]	; (80042f8 <MX_USART3_UART_Init+0x58>)
 80042c6:	220c      	movs	r2, #12
 80042c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042ca:	4b0b      	ldr	r3, [pc, #44]	; (80042f8 <MX_USART3_UART_Init+0x58>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80042d0:	4b09      	ldr	r3, [pc, #36]	; (80042f8 <MX_USART3_UART_Init+0x58>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80042d6:	4b08      	ldr	r3, [pc, #32]	; (80042f8 <MX_USART3_UART_Init+0x58>)
 80042d8:	2200      	movs	r2, #0
 80042da:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80042dc:	4b06      	ldr	r3, [pc, #24]	; (80042f8 <MX_USART3_UART_Init+0x58>)
 80042de:	2200      	movs	r2, #0
 80042e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80042e2:	4805      	ldr	r0, [pc, #20]	; (80042f8 <MX_USART3_UART_Init+0x58>)
 80042e4:	f003 fefe 	bl	80080e4 <HAL_UART_Init>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80042ee:	f7ff f809 	bl	8003304 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80042f2:	bf00      	nop
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	200079e4 	.word	0x200079e4
 80042fc:	40004800 	.word	0x40004800

08004300 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b0ae      	sub	sp, #184	; 0xb8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004308:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800430c:	2200      	movs	r2, #0
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	605a      	str	r2, [r3, #4]
 8004312:	609a      	str	r2, [r3, #8]
 8004314:	60da      	str	r2, [r3, #12]
 8004316:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004318:	f107 0314 	add.w	r3, r7, #20
 800431c:	2290      	movs	r2, #144	; 0x90
 800431e:	2100      	movs	r1, #0
 8004320:	4618      	mov	r0, r3
 8004322:	f01a fab3 	bl	801e88c <memset>
  if(uartHandle->Instance==USART3)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a56      	ldr	r2, [pc, #344]	; (8004484 <HAL_UART_MspInit+0x184>)
 800432c:	4293      	cmp	r3, r2
 800432e:	f040 80a4 	bne.w	800447a <HAL_UART_MspInit+0x17a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004332:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004336:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004338:	2300      	movs	r3, #0
 800433a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800433c:	f107 0314 	add.w	r3, r7, #20
 8004340:	4618      	mov	r0, r3
 8004342:	f001 ff43 	bl	80061cc <HAL_RCCEx_PeriphCLKConfig>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d001      	beq.n	8004350 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800434c:	f7fe ffda 	bl	8003304 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004350:	4b4d      	ldr	r3, [pc, #308]	; (8004488 <HAL_UART_MspInit+0x188>)
 8004352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004354:	4a4c      	ldr	r2, [pc, #304]	; (8004488 <HAL_UART_MspInit+0x188>)
 8004356:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800435a:	6413      	str	r3, [r2, #64]	; 0x40
 800435c:	4b4a      	ldr	r3, [pc, #296]	; (8004488 <HAL_UART_MspInit+0x188>)
 800435e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004360:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004364:	613b      	str	r3, [r7, #16]
 8004366:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004368:	4b47      	ldr	r3, [pc, #284]	; (8004488 <HAL_UART_MspInit+0x188>)
 800436a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436c:	4a46      	ldr	r2, [pc, #280]	; (8004488 <HAL_UART_MspInit+0x188>)
 800436e:	f043 0308 	orr.w	r3, r3, #8
 8004372:	6313      	str	r3, [r2, #48]	; 0x30
 8004374:	4b44      	ldr	r3, [pc, #272]	; (8004488 <HAL_UART_MspInit+0x188>)
 8004376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004378:	f003 0308 	and.w	r3, r3, #8
 800437c:	60fb      	str	r3, [r7, #12]
 800437e:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8004380:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004384:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004388:	2302      	movs	r3, #2
 800438a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800438e:	2300      	movs	r3, #0
 8004390:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004394:	2303      	movs	r3, #3
 8004396:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800439a:	2307      	movs	r3, #7
 800439c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80043a0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80043a4:	4619      	mov	r1, r3
 80043a6:	4839      	ldr	r0, [pc, #228]	; (800448c <HAL_UART_MspInit+0x18c>)
 80043a8:	f000 fe94 	bl	80050d4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80043ac:	4b38      	ldr	r3, [pc, #224]	; (8004490 <HAL_UART_MspInit+0x190>)
 80043ae:	4a39      	ldr	r2, [pc, #228]	; (8004494 <HAL_UART_MspInit+0x194>)
 80043b0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80043b2:	4b37      	ldr	r3, [pc, #220]	; (8004490 <HAL_UART_MspInit+0x190>)
 80043b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80043b8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80043ba:	4b35      	ldr	r3, [pc, #212]	; (8004490 <HAL_UART_MspInit+0x190>)
 80043bc:	2240      	movs	r2, #64	; 0x40
 80043be:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043c0:	4b33      	ldr	r3, [pc, #204]	; (8004490 <HAL_UART_MspInit+0x190>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80043c6:	4b32      	ldr	r3, [pc, #200]	; (8004490 <HAL_UART_MspInit+0x190>)
 80043c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043cc:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043ce:	4b30      	ldr	r3, [pc, #192]	; (8004490 <HAL_UART_MspInit+0x190>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043d4:	4b2e      	ldr	r3, [pc, #184]	; (8004490 <HAL_UART_MspInit+0x190>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80043da:	4b2d      	ldr	r3, [pc, #180]	; (8004490 <HAL_UART_MspInit+0x190>)
 80043dc:	2200      	movs	r2, #0
 80043de:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80043e0:	4b2b      	ldr	r3, [pc, #172]	; (8004490 <HAL_UART_MspInit+0x190>)
 80043e2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80043e6:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043e8:	4b29      	ldr	r3, [pc, #164]	; (8004490 <HAL_UART_MspInit+0x190>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80043ee:	4828      	ldr	r0, [pc, #160]	; (8004490 <HAL_UART_MspInit+0x190>)
 80043f0:	f000 fa5a 	bl	80048a8 <HAL_DMA_Init>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 80043fa:	f7fe ff83 	bl	8003304 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a23      	ldr	r2, [pc, #140]	; (8004490 <HAL_UART_MspInit+0x190>)
 8004402:	671a      	str	r2, [r3, #112]	; 0x70
 8004404:	4a22      	ldr	r2, [pc, #136]	; (8004490 <HAL_UART_MspInit+0x190>)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800440a:	4b23      	ldr	r3, [pc, #140]	; (8004498 <HAL_UART_MspInit+0x198>)
 800440c:	4a23      	ldr	r2, [pc, #140]	; (800449c <HAL_UART_MspInit+0x19c>)
 800440e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004410:	4b21      	ldr	r3, [pc, #132]	; (8004498 <HAL_UART_MspInit+0x198>)
 8004412:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004416:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004418:	4b1f      	ldr	r3, [pc, #124]	; (8004498 <HAL_UART_MspInit+0x198>)
 800441a:	2200      	movs	r2, #0
 800441c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800441e:	4b1e      	ldr	r3, [pc, #120]	; (8004498 <HAL_UART_MspInit+0x198>)
 8004420:	2200      	movs	r2, #0
 8004422:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004424:	4b1c      	ldr	r3, [pc, #112]	; (8004498 <HAL_UART_MspInit+0x198>)
 8004426:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800442a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800442c:	4b1a      	ldr	r3, [pc, #104]	; (8004498 <HAL_UART_MspInit+0x198>)
 800442e:	2200      	movs	r2, #0
 8004430:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004432:	4b19      	ldr	r3, [pc, #100]	; (8004498 <HAL_UART_MspInit+0x198>)
 8004434:	2200      	movs	r2, #0
 8004436:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8004438:	4b17      	ldr	r3, [pc, #92]	; (8004498 <HAL_UART_MspInit+0x198>)
 800443a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800443e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004440:	4b15      	ldr	r3, [pc, #84]	; (8004498 <HAL_UART_MspInit+0x198>)
 8004442:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004446:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004448:	4b13      	ldr	r3, [pc, #76]	; (8004498 <HAL_UART_MspInit+0x198>)
 800444a:	2200      	movs	r2, #0
 800444c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800444e:	4812      	ldr	r0, [pc, #72]	; (8004498 <HAL_UART_MspInit+0x198>)
 8004450:	f000 fa2a 	bl	80048a8 <HAL_DMA_Init>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <HAL_UART_MspInit+0x15e>
    {
      Error_Handler();
 800445a:	f7fe ff53 	bl	8003304 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a0d      	ldr	r2, [pc, #52]	; (8004498 <HAL_UART_MspInit+0x198>)
 8004462:	675a      	str	r2, [r3, #116]	; 0x74
 8004464:	4a0c      	ldr	r2, [pc, #48]	; (8004498 <HAL_UART_MspInit+0x198>)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800446a:	2200      	movs	r2, #0
 800446c:	2105      	movs	r1, #5
 800446e:	2027      	movs	r0, #39	; 0x27
 8004470:	f000 f9f0 	bl	8004854 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004474:	2027      	movs	r0, #39	; 0x27
 8004476:	f000 fa09 	bl	800488c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800447a:	bf00      	nop
 800447c:	37b8      	adds	r7, #184	; 0xb8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	40004800 	.word	0x40004800
 8004488:	40023800 	.word	0x40023800
 800448c:	40020c00 	.word	0x40020c00
 8004490:	20007a6c 	.word	0x20007a6c
 8004494:	40026058 	.word	0x40026058
 8004498:	20007acc 	.word	0x20007acc
 800449c:	40026028 	.word	0x40026028

080044a0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80044a4:	4b14      	ldr	r3, [pc, #80]	; (80044f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80044a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80044aa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80044ac:	4b12      	ldr	r3, [pc, #72]	; (80044f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80044ae:	2206      	movs	r2, #6
 80044b0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80044b2:	4b11      	ldr	r3, [pc, #68]	; (80044f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80044b4:	2202      	movs	r2, #2
 80044b6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80044b8:	4b0f      	ldr	r3, [pc, #60]	; (80044f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80044be:	4b0e      	ldr	r3, [pc, #56]	; (80044f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80044c0:	2202      	movs	r2, #2
 80044c2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80044c4:	4b0c      	ldr	r3, [pc, #48]	; (80044f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80044c6:	2201      	movs	r2, #1
 80044c8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80044ca:	4b0b      	ldr	r3, [pc, #44]	; (80044f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80044d0:	4b09      	ldr	r3, [pc, #36]	; (80044f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80044d6:	4b08      	ldr	r3, [pc, #32]	; (80044f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80044d8:	2201      	movs	r2, #1
 80044da:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80044dc:	4b06      	ldr	r3, [pc, #24]	; (80044f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80044de:	2200      	movs	r2, #0
 80044e0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80044e2:	4805      	ldr	r0, [pc, #20]	; (80044f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80044e4:	f000 ffd3 	bl	800548e <HAL_PCD_Init>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80044ee:	f7fe ff09 	bl	8003304 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80044f2:	bf00      	nop
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	20007b2c 	.word	0x20007b2c

080044fc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b0ae      	sub	sp, #184	; 0xb8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004504:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]
 800450c:	605a      	str	r2, [r3, #4]
 800450e:	609a      	str	r2, [r3, #8]
 8004510:	60da      	str	r2, [r3, #12]
 8004512:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004514:	f107 0314 	add.w	r3, r7, #20
 8004518:	2290      	movs	r2, #144	; 0x90
 800451a:	2100      	movs	r1, #0
 800451c:	4618      	mov	r0, r3
 800451e:	f01a f9b5 	bl	801e88c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800452a:	d159      	bne.n	80045e0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800452c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004530:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8004532:	2300      	movs	r3, #0
 8004534:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004538:	f107 0314 	add.w	r3, r7, #20
 800453c:	4618      	mov	r0, r3
 800453e:	f001 fe45 	bl	80061cc <HAL_RCCEx_PeriphCLKConfig>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d001      	beq.n	800454c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8004548:	f7fe fedc 	bl	8003304 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800454c:	4b26      	ldr	r3, [pc, #152]	; (80045e8 <HAL_PCD_MspInit+0xec>)
 800454e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004550:	4a25      	ldr	r2, [pc, #148]	; (80045e8 <HAL_PCD_MspInit+0xec>)
 8004552:	f043 0301 	orr.w	r3, r3, #1
 8004556:	6313      	str	r3, [r2, #48]	; 0x30
 8004558:	4b23      	ldr	r3, [pc, #140]	; (80045e8 <HAL_PCD_MspInit+0xec>)
 800455a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	613b      	str	r3, [r7, #16]
 8004562:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8004564:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8004568:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800456c:	2302      	movs	r3, #2
 800456e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004572:	2300      	movs	r3, #0
 8004574:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004578:	2303      	movs	r3, #3
 800457a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800457e:	230a      	movs	r3, #10
 8004580:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004584:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004588:	4619      	mov	r1, r3
 800458a:	4818      	ldr	r0, [pc, #96]	; (80045ec <HAL_PCD_MspInit+0xf0>)
 800458c:	f000 fda2 	bl	80050d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8004590:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004594:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004598:	2300      	movs	r3, #0
 800459a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800459e:	2300      	movs	r3, #0
 80045a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80045a4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80045a8:	4619      	mov	r1, r3
 80045aa:	4810      	ldr	r0, [pc, #64]	; (80045ec <HAL_PCD_MspInit+0xf0>)
 80045ac:	f000 fd92 	bl	80050d4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80045b0:	4b0d      	ldr	r3, [pc, #52]	; (80045e8 <HAL_PCD_MspInit+0xec>)
 80045b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b4:	4a0c      	ldr	r2, [pc, #48]	; (80045e8 <HAL_PCD_MspInit+0xec>)
 80045b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ba:	6353      	str	r3, [r2, #52]	; 0x34
 80045bc:	4b0a      	ldr	r3, [pc, #40]	; (80045e8 <HAL_PCD_MspInit+0xec>)
 80045be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c4:	60fb      	str	r3, [r7, #12]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	4b07      	ldr	r3, [pc, #28]	; (80045e8 <HAL_PCD_MspInit+0xec>)
 80045ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045cc:	4a06      	ldr	r2, [pc, #24]	; (80045e8 <HAL_PCD_MspInit+0xec>)
 80045ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045d2:	6453      	str	r3, [r2, #68]	; 0x44
 80045d4:	4b04      	ldr	r3, [pc, #16]	; (80045e8 <HAL_PCD_MspInit+0xec>)
 80045d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045dc:	60bb      	str	r3, [r7, #8]
 80045de:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80045e0:	bf00      	nop
 80045e2:	37b8      	adds	r7, #184	; 0xb8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	40023800 	.word	0x40023800
 80045ec:	40020000 	.word	0x40020000

080045f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80045f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004628 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80045f4:	480d      	ldr	r0, [pc, #52]	; (800462c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80045f6:	490e      	ldr	r1, [pc, #56]	; (8004630 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80045f8:	4a0e      	ldr	r2, [pc, #56]	; (8004634 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80045fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80045fc:	e002      	b.n	8004604 <LoopCopyDataInit>

080045fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80045fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004600:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004602:	3304      	adds	r3, #4

08004604 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004604:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004606:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004608:	d3f9      	bcc.n	80045fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800460a:	4a0b      	ldr	r2, [pc, #44]	; (8004638 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800460c:	4c0b      	ldr	r4, [pc, #44]	; (800463c <LoopFillZerobss+0x26>)
  movs r3, #0
 800460e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004610:	e001      	b.n	8004616 <LoopFillZerobss>

08004612 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004612:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004614:	3204      	adds	r2, #4

08004616 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004616:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004618:	d3fb      	bcc.n	8004612 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800461a:	f7ff f983 	bl	8003924 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800461e:	f01a fa37 	bl	801ea90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004622:	f7fe fdab 	bl	800317c <main>
  bx  lr    
 8004626:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004628:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800462c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004630:	2000233c 	.word	0x2000233c
  ldr r2, =_sidata
 8004634:	08021d98 	.word	0x08021d98
  ldr r2, =_sbss
 8004638:	20002340 	.word	0x20002340
  ldr r4, =_ebss
 800463c:	20011ee4 	.word	0x20011ee4

08004640 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004640:	e7fe      	b.n	8004640 <ADC_IRQHandler>

08004642 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004646:	2003      	movs	r0, #3
 8004648:	f000 f8f9 	bl	800483e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800464c:	200f      	movs	r0, #15
 800464e:	f7fe ffeb 	bl	8003628 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004652:	f7fe ffc1 	bl	80035d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	bd80      	pop	{r7, pc}

0800465c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800465c:	b480      	push	{r7}
 800465e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004660:	4b06      	ldr	r3, [pc, #24]	; (800467c <HAL_IncTick+0x20>)
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	461a      	mov	r2, r3
 8004666:	4b06      	ldr	r3, [pc, #24]	; (8004680 <HAL_IncTick+0x24>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4413      	add	r3, r2
 800466c:	4a04      	ldr	r2, [pc, #16]	; (8004680 <HAL_IncTick+0x24>)
 800466e:	6013      	str	r3, [r2, #0]
}
 8004670:	bf00      	nop
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	2000000c 	.word	0x2000000c
 8004680:	20008034 	.word	0x20008034

08004684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004684:	b480      	push	{r7}
 8004686:	af00      	add	r7, sp, #0
  return uwTick;
 8004688:	4b03      	ldr	r3, [pc, #12]	; (8004698 <HAL_GetTick+0x14>)
 800468a:	681b      	ldr	r3, [r3, #0]
}
 800468c:	4618      	mov	r0, r3
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	20008034 	.word	0x20008034

0800469c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80046a4:	f7ff ffee 	bl	8004684 <HAL_GetTick>
 80046a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046b4:	d005      	beq.n	80046c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80046b6:	4b0a      	ldr	r3, [pc, #40]	; (80046e0 <HAL_Delay+0x44>)
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	461a      	mov	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	4413      	add	r3, r2
 80046c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80046c2:	bf00      	nop
 80046c4:	f7ff ffde 	bl	8004684 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d8f7      	bhi.n	80046c4 <HAL_Delay+0x28>
  {
  }
}
 80046d4:	bf00      	nop
 80046d6:	bf00      	nop
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	2000000c 	.word	0x2000000c

080046e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f003 0307 	and.w	r3, r3, #7
 80046f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046f4:	4b0b      	ldr	r3, [pc, #44]	; (8004724 <__NVIC_SetPriorityGrouping+0x40>)
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004700:	4013      	ands	r3, r2
 8004702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800470c:	4b06      	ldr	r3, [pc, #24]	; (8004728 <__NVIC_SetPriorityGrouping+0x44>)
 800470e:	4313      	orrs	r3, r2
 8004710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004712:	4a04      	ldr	r2, [pc, #16]	; (8004724 <__NVIC_SetPriorityGrouping+0x40>)
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	60d3      	str	r3, [r2, #12]
}
 8004718:	bf00      	nop
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	e000ed00 	.word	0xe000ed00
 8004728:	05fa0000 	.word	0x05fa0000

0800472c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800472c:	b480      	push	{r7}
 800472e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004730:	4b04      	ldr	r3, [pc, #16]	; (8004744 <__NVIC_GetPriorityGrouping+0x18>)
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	0a1b      	lsrs	r3, r3, #8
 8004736:	f003 0307 	and.w	r3, r3, #7
}
 800473a:	4618      	mov	r0, r3
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr
 8004744:	e000ed00 	.word	0xe000ed00

08004748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	4603      	mov	r3, r0
 8004750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004756:	2b00      	cmp	r3, #0
 8004758:	db0b      	blt.n	8004772 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800475a:	79fb      	ldrb	r3, [r7, #7]
 800475c:	f003 021f 	and.w	r2, r3, #31
 8004760:	4907      	ldr	r1, [pc, #28]	; (8004780 <__NVIC_EnableIRQ+0x38>)
 8004762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004766:	095b      	lsrs	r3, r3, #5
 8004768:	2001      	movs	r0, #1
 800476a:	fa00 f202 	lsl.w	r2, r0, r2
 800476e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004772:	bf00      	nop
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	e000e100 	.word	0xe000e100

08004784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	4603      	mov	r3, r0
 800478c:	6039      	str	r1, [r7, #0]
 800478e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004794:	2b00      	cmp	r3, #0
 8004796:	db0a      	blt.n	80047ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	b2da      	uxtb	r2, r3
 800479c:	490c      	ldr	r1, [pc, #48]	; (80047d0 <__NVIC_SetPriority+0x4c>)
 800479e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047a2:	0112      	lsls	r2, r2, #4
 80047a4:	b2d2      	uxtb	r2, r2
 80047a6:	440b      	add	r3, r1
 80047a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047ac:	e00a      	b.n	80047c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	b2da      	uxtb	r2, r3
 80047b2:	4908      	ldr	r1, [pc, #32]	; (80047d4 <__NVIC_SetPriority+0x50>)
 80047b4:	79fb      	ldrb	r3, [r7, #7]
 80047b6:	f003 030f 	and.w	r3, r3, #15
 80047ba:	3b04      	subs	r3, #4
 80047bc:	0112      	lsls	r2, r2, #4
 80047be:	b2d2      	uxtb	r2, r2
 80047c0:	440b      	add	r3, r1
 80047c2:	761a      	strb	r2, [r3, #24]
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr
 80047d0:	e000e100 	.word	0xe000e100
 80047d4:	e000ed00 	.word	0xe000ed00

080047d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047d8:	b480      	push	{r7}
 80047da:	b089      	sub	sp, #36	; 0x24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f003 0307 	and.w	r3, r3, #7
 80047ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	f1c3 0307 	rsb	r3, r3, #7
 80047f2:	2b04      	cmp	r3, #4
 80047f4:	bf28      	it	cs
 80047f6:	2304      	movcs	r3, #4
 80047f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	3304      	adds	r3, #4
 80047fe:	2b06      	cmp	r3, #6
 8004800:	d902      	bls.n	8004808 <NVIC_EncodePriority+0x30>
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	3b03      	subs	r3, #3
 8004806:	e000      	b.n	800480a <NVIC_EncodePriority+0x32>
 8004808:	2300      	movs	r3, #0
 800480a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800480c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	fa02 f303 	lsl.w	r3, r2, r3
 8004816:	43da      	mvns	r2, r3
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	401a      	ands	r2, r3
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004820:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	fa01 f303 	lsl.w	r3, r1, r3
 800482a:	43d9      	mvns	r1, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004830:	4313      	orrs	r3, r2
         );
}
 8004832:	4618      	mov	r0, r3
 8004834:	3724      	adds	r7, #36	; 0x24
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b082      	sub	sp, #8
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f7ff ff4c 	bl	80046e4 <__NVIC_SetPriorityGrouping>
}
 800484c:	bf00      	nop
 800484e:	3708      	adds	r7, #8
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	4603      	mov	r3, r0
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
 8004860:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004862:	2300      	movs	r3, #0
 8004864:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004866:	f7ff ff61 	bl	800472c <__NVIC_GetPriorityGrouping>
 800486a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	68b9      	ldr	r1, [r7, #8]
 8004870:	6978      	ldr	r0, [r7, #20]
 8004872:	f7ff ffb1 	bl	80047d8 <NVIC_EncodePriority>
 8004876:	4602      	mov	r2, r0
 8004878:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800487c:	4611      	mov	r1, r2
 800487e:	4618      	mov	r0, r3
 8004880:	f7ff ff80 	bl	8004784 <__NVIC_SetPriority>
}
 8004884:	bf00      	nop
 8004886:	3718      	adds	r7, #24
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	4603      	mov	r3, r0
 8004894:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800489a:	4618      	mov	r0, r3
 800489c:	f7ff ff54 	bl	8004748 <__NVIC_EnableIRQ>
}
 80048a0:	bf00      	nop
 80048a2:	3708      	adds	r7, #8
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b086      	sub	sp, #24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80048b0:	2300      	movs	r3, #0
 80048b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80048b4:	f7ff fee6 	bl	8004684 <HAL_GetTick>
 80048b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d101      	bne.n	80048c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e099      	b.n	80049f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f022 0201 	bic.w	r2, r2, #1
 80048e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048e4:	e00f      	b.n	8004906 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048e6:	f7ff fecd 	bl	8004684 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b05      	cmp	r3, #5
 80048f2:	d908      	bls.n	8004906 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2220      	movs	r2, #32
 80048f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2203      	movs	r2, #3
 80048fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e078      	b.n	80049f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1e8      	bne.n	80048e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	4b38      	ldr	r3, [pc, #224]	; (8004a00 <HAL_DMA_Init+0x158>)
 8004920:	4013      	ands	r3, r2
 8004922:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685a      	ldr	r2, [r3, #4]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004932:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800493e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800494a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	4313      	orrs	r3, r2
 8004956:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	2b04      	cmp	r3, #4
 800495e:	d107      	bne.n	8004970 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004968:	4313      	orrs	r3, r2
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	4313      	orrs	r3, r2
 800496e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	f023 0307 	bic.w	r3, r3, #7
 8004986:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	4313      	orrs	r3, r2
 8004990:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004996:	2b04      	cmp	r3, #4
 8004998:	d117      	bne.n	80049ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00e      	beq.n	80049ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 fb15 	bl	8004fdc <DMA_CheckFifoParam>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d008      	beq.n	80049ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2240      	movs	r2, #64	; 0x40
 80049bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80049c6:	2301      	movs	r3, #1
 80049c8:	e016      	b.n	80049f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 facc 	bl	8004f70 <DMA_CalcBaseAndBitshift>
 80049d8:	4603      	mov	r3, r0
 80049da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e0:	223f      	movs	r2, #63	; 0x3f
 80049e2:	409a      	lsls	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3718      	adds	r7, #24
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	e010803f 	.word	0xe010803f

08004a04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
 8004a10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a12:	2300      	movs	r3, #0
 8004a14:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a1a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d101      	bne.n	8004a2a <HAL_DMA_Start_IT+0x26>
 8004a26:	2302      	movs	r3, #2
 8004a28:	e048      	b.n	8004abc <HAL_DMA_Start_IT+0xb8>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d137      	bne.n	8004aae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2202      	movs	r2, #2
 8004a42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	68b9      	ldr	r1, [r7, #8]
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	f000 fa5e 	bl	8004f14 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a5c:	223f      	movs	r2, #63	; 0x3f
 8004a5e:	409a      	lsls	r2, r3
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f042 0216 	orr.w	r2, r2, #22
 8004a72:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	695a      	ldr	r2, [r3, #20]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a82:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d007      	beq.n	8004a9c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f042 0208 	orr.w	r2, r2, #8
 8004a9a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f042 0201 	orr.w	r2, r2, #1
 8004aaa:	601a      	str	r2, [r3, #0]
 8004aac:	e005      	b.n	8004aba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3718      	adds	r7, #24
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004ad2:	f7ff fdd7 	bl	8004684 <HAL_GetTick>
 8004ad6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d008      	beq.n	8004af6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2280      	movs	r2, #128	; 0x80
 8004ae8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e052      	b.n	8004b9c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 0216 	bic.w	r2, r2, #22
 8004b04:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	695a      	ldr	r2, [r3, #20]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b14:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d103      	bne.n	8004b26 <HAL_DMA_Abort+0x62>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d007      	beq.n	8004b36 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f022 0208 	bic.w	r2, r2, #8
 8004b34:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f022 0201 	bic.w	r2, r2, #1
 8004b44:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b46:	e013      	b.n	8004b70 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b48:	f7ff fd9c 	bl	8004684 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b05      	cmp	r3, #5
 8004b54:	d90c      	bls.n	8004b70 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2220      	movs	r2, #32
 8004b5a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2203      	movs	r2, #3
 8004b60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e015      	b.n	8004b9c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1e4      	bne.n	8004b48 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b82:	223f      	movs	r2, #63	; 0x3f
 8004b84:	409a      	lsls	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d004      	beq.n	8004bc2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2280      	movs	r2, #128	; 0x80
 8004bbc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e00c      	b.n	8004bdc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2205      	movs	r2, #5
 8004bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 0201 	bic.w	r2, r2, #1
 8004bd8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004bf4:	4b8e      	ldr	r3, [pc, #568]	; (8004e30 <HAL_DMA_IRQHandler+0x248>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a8e      	ldr	r2, [pc, #568]	; (8004e34 <HAL_DMA_IRQHandler+0x24c>)
 8004bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfe:	0a9b      	lsrs	r3, r3, #10
 8004c00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c12:	2208      	movs	r2, #8
 8004c14:	409a      	lsls	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	4013      	ands	r3, r2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d01a      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0304 	and.w	r3, r3, #4
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d013      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f022 0204 	bic.w	r2, r2, #4
 8004c3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c40:	2208      	movs	r2, #8
 8004c42:	409a      	lsls	r2, r3
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c4c:	f043 0201 	orr.w	r2, r3, #1
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c58:	2201      	movs	r2, #1
 8004c5a:	409a      	lsls	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	4013      	ands	r3, r2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d012      	beq.n	8004c8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00b      	beq.n	8004c8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c76:	2201      	movs	r2, #1
 8004c78:	409a      	lsls	r2, r3
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c82:	f043 0202 	orr.w	r2, r3, #2
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c8e:	2204      	movs	r2, #4
 8004c90:	409a      	lsls	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	4013      	ands	r3, r2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d012      	beq.n	8004cc0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00b      	beq.n	8004cc0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cac:	2204      	movs	r2, #4
 8004cae:	409a      	lsls	r2, r3
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb8:	f043 0204 	orr.w	r2, r3, #4
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc4:	2210      	movs	r2, #16
 8004cc6:	409a      	lsls	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d043      	beq.n	8004d58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0308 	and.w	r3, r3, #8
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d03c      	beq.n	8004d58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ce2:	2210      	movs	r2, #16
 8004ce4:	409a      	lsls	r2, r3
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d018      	beq.n	8004d2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d108      	bne.n	8004d18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d024      	beq.n	8004d58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	4798      	blx	r3
 8004d16:	e01f      	b.n	8004d58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d01b      	beq.n	8004d58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	4798      	blx	r3
 8004d28:	e016      	b.n	8004d58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d107      	bne.n	8004d48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 0208 	bic.w	r2, r2, #8
 8004d46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d003      	beq.n	8004d58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d5c:	2220      	movs	r2, #32
 8004d5e:	409a      	lsls	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	4013      	ands	r3, r2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f000 808f 	beq.w	8004e88 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0310 	and.w	r3, r3, #16
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f000 8087 	beq.w	8004e88 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d7e:	2220      	movs	r2, #32
 8004d80:	409a      	lsls	r2, r3
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b05      	cmp	r3, #5
 8004d90:	d136      	bne.n	8004e00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f022 0216 	bic.w	r2, r2, #22
 8004da0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	695a      	ldr	r2, [r3, #20]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004db0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d103      	bne.n	8004dc2 <HAL_DMA_IRQHandler+0x1da>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d007      	beq.n	8004dd2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f022 0208 	bic.w	r2, r2, #8
 8004dd0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dd6:	223f      	movs	r2, #63	; 0x3f
 8004dd8:	409a      	lsls	r2, r3
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d07e      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	4798      	blx	r3
        }
        return;
 8004dfe:	e079      	b.n	8004ef4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d01d      	beq.n	8004e4a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10d      	bne.n	8004e38 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d031      	beq.n	8004e88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	4798      	blx	r3
 8004e2c:	e02c      	b.n	8004e88 <HAL_DMA_IRQHandler+0x2a0>
 8004e2e:	bf00      	nop
 8004e30:	20000004 	.word	0x20000004
 8004e34:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d023      	beq.n	8004e88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	4798      	blx	r3
 8004e48:	e01e      	b.n	8004e88 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10f      	bne.n	8004e78 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 0210 	bic.w	r2, r2, #16
 8004e66:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d003      	beq.n	8004e88 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d032      	beq.n	8004ef6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d022      	beq.n	8004ee2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2205      	movs	r2, #5
 8004ea0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f022 0201 	bic.w	r2, r2, #1
 8004eb2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	60bb      	str	r3, [r7, #8]
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d307      	bcc.n	8004ed0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1f2      	bne.n	8004eb4 <HAL_DMA_IRQHandler+0x2cc>
 8004ece:	e000      	b.n	8004ed2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004ed0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d005      	beq.n	8004ef6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	4798      	blx	r3
 8004ef2:	e000      	b.n	8004ef6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004ef4:	bf00      	nop
    }
  }
}
 8004ef6:	3718      	adds	r7, #24
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
 8004f20:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f30:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	2b40      	cmp	r3, #64	; 0x40
 8004f40:	d108      	bne.n	8004f54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004f52:	e007      	b.n	8004f64 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	60da      	str	r2, [r3, #12]
}
 8004f64:	bf00      	nop
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	3b10      	subs	r3, #16
 8004f80:	4a13      	ldr	r2, [pc, #76]	; (8004fd0 <DMA_CalcBaseAndBitshift+0x60>)
 8004f82:	fba2 2303 	umull	r2, r3, r2, r3
 8004f86:	091b      	lsrs	r3, r3, #4
 8004f88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004f8a:	4a12      	ldr	r2, [pc, #72]	; (8004fd4 <DMA_CalcBaseAndBitshift+0x64>)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4413      	add	r3, r2
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	461a      	mov	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2b03      	cmp	r3, #3
 8004f9c:	d908      	bls.n	8004fb0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	4b0c      	ldr	r3, [pc, #48]	; (8004fd8 <DMA_CalcBaseAndBitshift+0x68>)
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	1d1a      	adds	r2, r3, #4
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	659a      	str	r2, [r3, #88]	; 0x58
 8004fae:	e006      	b.n	8004fbe <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	4b08      	ldr	r3, [pc, #32]	; (8004fd8 <DMA_CalcBaseAndBitshift+0x68>)
 8004fb8:	4013      	ands	r3, r2
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3714      	adds	r7, #20
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	aaaaaaab 	.word	0xaaaaaaab
 8004fd4:	0801f98c 	.word	0x0801f98c
 8004fd8:	fffffc00 	.word	0xfffffc00

08004fdc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d11f      	bne.n	8005036 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	2b03      	cmp	r3, #3
 8004ffa:	d856      	bhi.n	80050aa <DMA_CheckFifoParam+0xce>
 8004ffc:	a201      	add	r2, pc, #4	; (adr r2, 8005004 <DMA_CheckFifoParam+0x28>)
 8004ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005002:	bf00      	nop
 8005004:	08005015 	.word	0x08005015
 8005008:	08005027 	.word	0x08005027
 800500c:	08005015 	.word	0x08005015
 8005010:	080050ab 	.word	0x080050ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005018:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d046      	beq.n	80050ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005024:	e043      	b.n	80050ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800502e:	d140      	bne.n	80050b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005034:	e03d      	b.n	80050b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800503e:	d121      	bne.n	8005084 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	2b03      	cmp	r3, #3
 8005044:	d837      	bhi.n	80050b6 <DMA_CheckFifoParam+0xda>
 8005046:	a201      	add	r2, pc, #4	; (adr r2, 800504c <DMA_CheckFifoParam+0x70>)
 8005048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504c:	0800505d 	.word	0x0800505d
 8005050:	08005063 	.word	0x08005063
 8005054:	0800505d 	.word	0x0800505d
 8005058:	08005075 	.word	0x08005075
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	73fb      	strb	r3, [r7, #15]
      break;
 8005060:	e030      	b.n	80050c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005066:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d025      	beq.n	80050ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005072:	e022      	b.n	80050ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005078:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800507c:	d11f      	bne.n	80050be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005082:	e01c      	b.n	80050be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	2b02      	cmp	r3, #2
 8005088:	d903      	bls.n	8005092 <DMA_CheckFifoParam+0xb6>
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	2b03      	cmp	r3, #3
 800508e:	d003      	beq.n	8005098 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005090:	e018      	b.n	80050c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	73fb      	strb	r3, [r7, #15]
      break;
 8005096:	e015      	b.n	80050c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00e      	beq.n	80050c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	73fb      	strb	r3, [r7, #15]
      break;
 80050a8:	e00b      	b.n	80050c2 <DMA_CheckFifoParam+0xe6>
      break;
 80050aa:	bf00      	nop
 80050ac:	e00a      	b.n	80050c4 <DMA_CheckFifoParam+0xe8>
      break;
 80050ae:	bf00      	nop
 80050b0:	e008      	b.n	80050c4 <DMA_CheckFifoParam+0xe8>
      break;
 80050b2:	bf00      	nop
 80050b4:	e006      	b.n	80050c4 <DMA_CheckFifoParam+0xe8>
      break;
 80050b6:	bf00      	nop
 80050b8:	e004      	b.n	80050c4 <DMA_CheckFifoParam+0xe8>
      break;
 80050ba:	bf00      	nop
 80050bc:	e002      	b.n	80050c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80050be:	bf00      	nop
 80050c0:	e000      	b.n	80050c4 <DMA_CheckFifoParam+0xe8>
      break;
 80050c2:	bf00      	nop
    }
  } 
  
  return status; 
 80050c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop

080050d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b089      	sub	sp, #36	; 0x24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80050de:	2300      	movs	r3, #0
 80050e0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80050e2:	2300      	movs	r3, #0
 80050e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80050e6:	2300      	movs	r3, #0
 80050e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80050ea:	2300      	movs	r3, #0
 80050ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80050ee:	2300      	movs	r3, #0
 80050f0:	61fb      	str	r3, [r7, #28]
 80050f2:	e175      	b.n	80053e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80050f4:	2201      	movs	r2, #1
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	fa02 f303 	lsl.w	r3, r2, r3
 80050fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	4013      	ands	r3, r2
 8005106:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	429a      	cmp	r2, r3
 800510e:	f040 8164 	bne.w	80053da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f003 0303 	and.w	r3, r3, #3
 800511a:	2b01      	cmp	r3, #1
 800511c:	d005      	beq.n	800512a <HAL_GPIO_Init+0x56>
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f003 0303 	and.w	r3, r3, #3
 8005126:	2b02      	cmp	r3, #2
 8005128:	d130      	bne.n	800518c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	005b      	lsls	r3, r3, #1
 8005134:	2203      	movs	r2, #3
 8005136:	fa02 f303 	lsl.w	r3, r2, r3
 800513a:	43db      	mvns	r3, r3
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	4013      	ands	r3, r2
 8005140:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	68da      	ldr	r2, [r3, #12]
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	005b      	lsls	r3, r3, #1
 800514a:	fa02 f303 	lsl.w	r3, r2, r3
 800514e:	69ba      	ldr	r2, [r7, #24]
 8005150:	4313      	orrs	r3, r2
 8005152:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005160:	2201      	movs	r2, #1
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	fa02 f303 	lsl.w	r3, r2, r3
 8005168:	43db      	mvns	r3, r3
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	4013      	ands	r3, r2
 800516e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	091b      	lsrs	r3, r3, #4
 8005176:	f003 0201 	and.w	r2, r3, #1
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	fa02 f303 	lsl.w	r3, r2, r3
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	4313      	orrs	r3, r2
 8005184:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	69ba      	ldr	r2, [r7, #24]
 800518a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f003 0303 	and.w	r3, r3, #3
 8005194:	2b03      	cmp	r3, #3
 8005196:	d017      	beq.n	80051c8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	005b      	lsls	r3, r3, #1
 80051a2:	2203      	movs	r2, #3
 80051a4:	fa02 f303 	lsl.w	r3, r2, r3
 80051a8:	43db      	mvns	r3, r3
 80051aa:	69ba      	ldr	r2, [r7, #24]
 80051ac:	4013      	ands	r3, r2
 80051ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	689a      	ldr	r2, [r3, #8]
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	005b      	lsls	r3, r3, #1
 80051b8:	fa02 f303 	lsl.w	r3, r2, r3
 80051bc:	69ba      	ldr	r2, [r7, #24]
 80051be:	4313      	orrs	r3, r2
 80051c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	69ba      	ldr	r2, [r7, #24]
 80051c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f003 0303 	and.w	r3, r3, #3
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d123      	bne.n	800521c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	08da      	lsrs	r2, r3, #3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	3208      	adds	r2, #8
 80051dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	f003 0307 	and.w	r3, r3, #7
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	220f      	movs	r2, #15
 80051ec:	fa02 f303 	lsl.w	r3, r2, r3
 80051f0:	43db      	mvns	r3, r3
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	4013      	ands	r3, r2
 80051f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	691a      	ldr	r2, [r3, #16]
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	f003 0307 	and.w	r3, r3, #7
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	fa02 f303 	lsl.w	r3, r2, r3
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	4313      	orrs	r3, r2
 800520c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	08da      	lsrs	r2, r3, #3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	3208      	adds	r2, #8
 8005216:	69b9      	ldr	r1, [r7, #24]
 8005218:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	005b      	lsls	r3, r3, #1
 8005226:	2203      	movs	r2, #3
 8005228:	fa02 f303 	lsl.w	r3, r2, r3
 800522c:	43db      	mvns	r3, r3
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	4013      	ands	r3, r2
 8005232:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f003 0203 	and.w	r2, r3, #3
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	005b      	lsls	r3, r3, #1
 8005240:	fa02 f303 	lsl.w	r3, r2, r3
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	4313      	orrs	r3, r2
 8005248:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005258:	2b00      	cmp	r3, #0
 800525a:	f000 80be 	beq.w	80053da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800525e:	4b66      	ldr	r3, [pc, #408]	; (80053f8 <HAL_GPIO_Init+0x324>)
 8005260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005262:	4a65      	ldr	r2, [pc, #404]	; (80053f8 <HAL_GPIO_Init+0x324>)
 8005264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005268:	6453      	str	r3, [r2, #68]	; 0x44
 800526a:	4b63      	ldr	r3, [pc, #396]	; (80053f8 <HAL_GPIO_Init+0x324>)
 800526c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005272:	60fb      	str	r3, [r7, #12]
 8005274:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005276:	4a61      	ldr	r2, [pc, #388]	; (80053fc <HAL_GPIO_Init+0x328>)
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	089b      	lsrs	r3, r3, #2
 800527c:	3302      	adds	r3, #2
 800527e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005282:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	f003 0303 	and.w	r3, r3, #3
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	220f      	movs	r2, #15
 800528e:	fa02 f303 	lsl.w	r3, r2, r3
 8005292:	43db      	mvns	r3, r3
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	4013      	ands	r3, r2
 8005298:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a58      	ldr	r2, [pc, #352]	; (8005400 <HAL_GPIO_Init+0x32c>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d037      	beq.n	8005312 <HAL_GPIO_Init+0x23e>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a57      	ldr	r2, [pc, #348]	; (8005404 <HAL_GPIO_Init+0x330>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d031      	beq.n	800530e <HAL_GPIO_Init+0x23a>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a56      	ldr	r2, [pc, #344]	; (8005408 <HAL_GPIO_Init+0x334>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d02b      	beq.n	800530a <HAL_GPIO_Init+0x236>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a55      	ldr	r2, [pc, #340]	; (800540c <HAL_GPIO_Init+0x338>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d025      	beq.n	8005306 <HAL_GPIO_Init+0x232>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a54      	ldr	r2, [pc, #336]	; (8005410 <HAL_GPIO_Init+0x33c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d01f      	beq.n	8005302 <HAL_GPIO_Init+0x22e>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a53      	ldr	r2, [pc, #332]	; (8005414 <HAL_GPIO_Init+0x340>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d019      	beq.n	80052fe <HAL_GPIO_Init+0x22a>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a52      	ldr	r2, [pc, #328]	; (8005418 <HAL_GPIO_Init+0x344>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d013      	beq.n	80052fa <HAL_GPIO_Init+0x226>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a51      	ldr	r2, [pc, #324]	; (800541c <HAL_GPIO_Init+0x348>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d00d      	beq.n	80052f6 <HAL_GPIO_Init+0x222>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a50      	ldr	r2, [pc, #320]	; (8005420 <HAL_GPIO_Init+0x34c>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d007      	beq.n	80052f2 <HAL_GPIO_Init+0x21e>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a4f      	ldr	r2, [pc, #316]	; (8005424 <HAL_GPIO_Init+0x350>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d101      	bne.n	80052ee <HAL_GPIO_Init+0x21a>
 80052ea:	2309      	movs	r3, #9
 80052ec:	e012      	b.n	8005314 <HAL_GPIO_Init+0x240>
 80052ee:	230a      	movs	r3, #10
 80052f0:	e010      	b.n	8005314 <HAL_GPIO_Init+0x240>
 80052f2:	2308      	movs	r3, #8
 80052f4:	e00e      	b.n	8005314 <HAL_GPIO_Init+0x240>
 80052f6:	2307      	movs	r3, #7
 80052f8:	e00c      	b.n	8005314 <HAL_GPIO_Init+0x240>
 80052fa:	2306      	movs	r3, #6
 80052fc:	e00a      	b.n	8005314 <HAL_GPIO_Init+0x240>
 80052fe:	2305      	movs	r3, #5
 8005300:	e008      	b.n	8005314 <HAL_GPIO_Init+0x240>
 8005302:	2304      	movs	r3, #4
 8005304:	e006      	b.n	8005314 <HAL_GPIO_Init+0x240>
 8005306:	2303      	movs	r3, #3
 8005308:	e004      	b.n	8005314 <HAL_GPIO_Init+0x240>
 800530a:	2302      	movs	r3, #2
 800530c:	e002      	b.n	8005314 <HAL_GPIO_Init+0x240>
 800530e:	2301      	movs	r3, #1
 8005310:	e000      	b.n	8005314 <HAL_GPIO_Init+0x240>
 8005312:	2300      	movs	r3, #0
 8005314:	69fa      	ldr	r2, [r7, #28]
 8005316:	f002 0203 	and.w	r2, r2, #3
 800531a:	0092      	lsls	r2, r2, #2
 800531c:	4093      	lsls	r3, r2
 800531e:	69ba      	ldr	r2, [r7, #24]
 8005320:	4313      	orrs	r3, r2
 8005322:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005324:	4935      	ldr	r1, [pc, #212]	; (80053fc <HAL_GPIO_Init+0x328>)
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	089b      	lsrs	r3, r3, #2
 800532a:	3302      	adds	r3, #2
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005332:	4b3d      	ldr	r3, [pc, #244]	; (8005428 <HAL_GPIO_Init+0x354>)
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	43db      	mvns	r3, r3
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	4013      	ands	r3, r2
 8005340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800534e:	69ba      	ldr	r2, [r7, #24]
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	4313      	orrs	r3, r2
 8005354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005356:	4a34      	ldr	r2, [pc, #208]	; (8005428 <HAL_GPIO_Init+0x354>)
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800535c:	4b32      	ldr	r3, [pc, #200]	; (8005428 <HAL_GPIO_Init+0x354>)
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	43db      	mvns	r3, r3
 8005366:	69ba      	ldr	r2, [r7, #24]
 8005368:	4013      	ands	r3, r2
 800536a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d003      	beq.n	8005380 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005378:	69ba      	ldr	r2, [r7, #24]
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	4313      	orrs	r3, r2
 800537e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005380:	4a29      	ldr	r2, [pc, #164]	; (8005428 <HAL_GPIO_Init+0x354>)
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005386:	4b28      	ldr	r3, [pc, #160]	; (8005428 <HAL_GPIO_Init+0x354>)
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	43db      	mvns	r3, r3
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	4013      	ands	r3, r2
 8005394:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d003      	beq.n	80053aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80053a2:	69ba      	ldr	r2, [r7, #24]
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80053aa:	4a1f      	ldr	r2, [pc, #124]	; (8005428 <HAL_GPIO_Init+0x354>)
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80053b0:	4b1d      	ldr	r3, [pc, #116]	; (8005428 <HAL_GPIO_Init+0x354>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	43db      	mvns	r3, r3
 80053ba:	69ba      	ldr	r2, [r7, #24]
 80053bc:	4013      	ands	r3, r2
 80053be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d003      	beq.n	80053d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80053cc:	69ba      	ldr	r2, [r7, #24]
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80053d4:	4a14      	ldr	r2, [pc, #80]	; (8005428 <HAL_GPIO_Init+0x354>)
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	3301      	adds	r3, #1
 80053de:	61fb      	str	r3, [r7, #28]
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	2b0f      	cmp	r3, #15
 80053e4:	f67f ae86 	bls.w	80050f4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80053e8:	bf00      	nop
 80053ea:	bf00      	nop
 80053ec:	3724      	adds	r7, #36	; 0x24
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	40023800 	.word	0x40023800
 80053fc:	40013800 	.word	0x40013800
 8005400:	40020000 	.word	0x40020000
 8005404:	40020400 	.word	0x40020400
 8005408:	40020800 	.word	0x40020800
 800540c:	40020c00 	.word	0x40020c00
 8005410:	40021000 	.word	0x40021000
 8005414:	40021400 	.word	0x40021400
 8005418:	40021800 	.word	0x40021800
 800541c:	40021c00 	.word	0x40021c00
 8005420:	40022000 	.word	0x40022000
 8005424:	40022400 	.word	0x40022400
 8005428:	40013c00 	.word	0x40013c00

0800542c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800542c:	b480      	push	{r7}
 800542e:	b085      	sub	sp, #20
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	460b      	mov	r3, r1
 8005436:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	691a      	ldr	r2, [r3, #16]
 800543c:	887b      	ldrh	r3, [r7, #2]
 800543e:	4013      	ands	r3, r2
 8005440:	2b00      	cmp	r3, #0
 8005442:	d002      	beq.n	800544a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005444:	2301      	movs	r3, #1
 8005446:	73fb      	strb	r3, [r7, #15]
 8005448:	e001      	b.n	800544e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800544a:	2300      	movs	r3, #0
 800544c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800544e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005450:	4618      	mov	r0, r3
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	460b      	mov	r3, r1
 8005466:	807b      	strh	r3, [r7, #2]
 8005468:	4613      	mov	r3, r2
 800546a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800546c:	787b      	ldrb	r3, [r7, #1]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d003      	beq.n	800547a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005472:	887a      	ldrh	r2, [r7, #2]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005478:	e003      	b.n	8005482 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800547a:	887b      	ldrh	r3, [r7, #2]
 800547c:	041a      	lsls	r2, r3, #16
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	619a      	str	r2, [r3, #24]
}
 8005482:	bf00      	nop
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800548e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005490:	b08f      	sub	sp, #60	; 0x3c
 8005492:	af0a      	add	r7, sp, #40	; 0x28
 8005494:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d101      	bne.n	80054a0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e116      	b.n	80056ce <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d106      	bne.n	80054c0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f7ff f81e 	bl	80044fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2203      	movs	r2, #3
 80054c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d102      	bne.n	80054da <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4618      	mov	r0, r3
 80054e0:	f004 f9f8 	bl	80098d4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	603b      	str	r3, [r7, #0]
 80054ea:	687e      	ldr	r6, [r7, #4]
 80054ec:	466d      	mov	r5, sp
 80054ee:	f106 0410 	add.w	r4, r6, #16
 80054f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80054fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8005502:	1d33      	adds	r3, r6, #4
 8005504:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005506:	6838      	ldr	r0, [r7, #0]
 8005508:	f004 f98c 	bl	8009824 <USB_CoreInit>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d005      	beq.n	800551e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2202      	movs	r2, #2
 8005516:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e0d7      	b.n	80056ce <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2100      	movs	r1, #0
 8005524:	4618      	mov	r0, r3
 8005526:	f004 f9e6 	bl	80098f6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800552a:	2300      	movs	r3, #0
 800552c:	73fb      	strb	r3, [r7, #15]
 800552e:	e04a      	b.n	80055c6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005530:	7bfa      	ldrb	r2, [r7, #15]
 8005532:	6879      	ldr	r1, [r7, #4]
 8005534:	4613      	mov	r3, r2
 8005536:	00db      	lsls	r3, r3, #3
 8005538:	4413      	add	r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	440b      	add	r3, r1
 800553e:	333d      	adds	r3, #61	; 0x3d
 8005540:	2201      	movs	r2, #1
 8005542:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005544:	7bfa      	ldrb	r2, [r7, #15]
 8005546:	6879      	ldr	r1, [r7, #4]
 8005548:	4613      	mov	r3, r2
 800554a:	00db      	lsls	r3, r3, #3
 800554c:	4413      	add	r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	440b      	add	r3, r1
 8005552:	333c      	adds	r3, #60	; 0x3c
 8005554:	7bfa      	ldrb	r2, [r7, #15]
 8005556:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005558:	7bfa      	ldrb	r2, [r7, #15]
 800555a:	7bfb      	ldrb	r3, [r7, #15]
 800555c:	b298      	uxth	r0, r3
 800555e:	6879      	ldr	r1, [r7, #4]
 8005560:	4613      	mov	r3, r2
 8005562:	00db      	lsls	r3, r3, #3
 8005564:	4413      	add	r3, r2
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	440b      	add	r3, r1
 800556a:	3344      	adds	r3, #68	; 0x44
 800556c:	4602      	mov	r2, r0
 800556e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005570:	7bfa      	ldrb	r2, [r7, #15]
 8005572:	6879      	ldr	r1, [r7, #4]
 8005574:	4613      	mov	r3, r2
 8005576:	00db      	lsls	r3, r3, #3
 8005578:	4413      	add	r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	440b      	add	r3, r1
 800557e:	3340      	adds	r3, #64	; 0x40
 8005580:	2200      	movs	r2, #0
 8005582:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005584:	7bfa      	ldrb	r2, [r7, #15]
 8005586:	6879      	ldr	r1, [r7, #4]
 8005588:	4613      	mov	r3, r2
 800558a:	00db      	lsls	r3, r3, #3
 800558c:	4413      	add	r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	440b      	add	r3, r1
 8005592:	3348      	adds	r3, #72	; 0x48
 8005594:	2200      	movs	r2, #0
 8005596:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005598:	7bfa      	ldrb	r2, [r7, #15]
 800559a:	6879      	ldr	r1, [r7, #4]
 800559c:	4613      	mov	r3, r2
 800559e:	00db      	lsls	r3, r3, #3
 80055a0:	4413      	add	r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	440b      	add	r3, r1
 80055a6:	334c      	adds	r3, #76	; 0x4c
 80055a8:	2200      	movs	r2, #0
 80055aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80055ac:	7bfa      	ldrb	r2, [r7, #15]
 80055ae:	6879      	ldr	r1, [r7, #4]
 80055b0:	4613      	mov	r3, r2
 80055b2:	00db      	lsls	r3, r3, #3
 80055b4:	4413      	add	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	440b      	add	r3, r1
 80055ba:	3354      	adds	r3, #84	; 0x54
 80055bc:	2200      	movs	r2, #0
 80055be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055c0:	7bfb      	ldrb	r3, [r7, #15]
 80055c2:	3301      	adds	r3, #1
 80055c4:	73fb      	strb	r3, [r7, #15]
 80055c6:	7bfa      	ldrb	r2, [r7, #15]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d3af      	bcc.n	8005530 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055d0:	2300      	movs	r3, #0
 80055d2:	73fb      	strb	r3, [r7, #15]
 80055d4:	e044      	b.n	8005660 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80055d6:	7bfa      	ldrb	r2, [r7, #15]
 80055d8:	6879      	ldr	r1, [r7, #4]
 80055da:	4613      	mov	r3, r2
 80055dc:	00db      	lsls	r3, r3, #3
 80055de:	4413      	add	r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	440b      	add	r3, r1
 80055e4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80055e8:	2200      	movs	r2, #0
 80055ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80055ec:	7bfa      	ldrb	r2, [r7, #15]
 80055ee:	6879      	ldr	r1, [r7, #4]
 80055f0:	4613      	mov	r3, r2
 80055f2:	00db      	lsls	r3, r3, #3
 80055f4:	4413      	add	r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	440b      	add	r3, r1
 80055fa:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80055fe:	7bfa      	ldrb	r2, [r7, #15]
 8005600:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005602:	7bfa      	ldrb	r2, [r7, #15]
 8005604:	6879      	ldr	r1, [r7, #4]
 8005606:	4613      	mov	r3, r2
 8005608:	00db      	lsls	r3, r3, #3
 800560a:	4413      	add	r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	440b      	add	r3, r1
 8005610:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005614:	2200      	movs	r2, #0
 8005616:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005618:	7bfa      	ldrb	r2, [r7, #15]
 800561a:	6879      	ldr	r1, [r7, #4]
 800561c:	4613      	mov	r3, r2
 800561e:	00db      	lsls	r3, r3, #3
 8005620:	4413      	add	r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	440b      	add	r3, r1
 8005626:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800562a:	2200      	movs	r2, #0
 800562c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800562e:	7bfa      	ldrb	r2, [r7, #15]
 8005630:	6879      	ldr	r1, [r7, #4]
 8005632:	4613      	mov	r3, r2
 8005634:	00db      	lsls	r3, r3, #3
 8005636:	4413      	add	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	440b      	add	r3, r1
 800563c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005640:	2200      	movs	r2, #0
 8005642:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005644:	7bfa      	ldrb	r2, [r7, #15]
 8005646:	6879      	ldr	r1, [r7, #4]
 8005648:	4613      	mov	r3, r2
 800564a:	00db      	lsls	r3, r3, #3
 800564c:	4413      	add	r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	440b      	add	r3, r1
 8005652:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005656:	2200      	movs	r2, #0
 8005658:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800565a:	7bfb      	ldrb	r3, [r7, #15]
 800565c:	3301      	adds	r3, #1
 800565e:	73fb      	strb	r3, [r7, #15]
 8005660:	7bfa      	ldrb	r2, [r7, #15]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	429a      	cmp	r2, r3
 8005668:	d3b5      	bcc.n	80055d6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	603b      	str	r3, [r7, #0]
 8005670:	687e      	ldr	r6, [r7, #4]
 8005672:	466d      	mov	r5, sp
 8005674:	f106 0410 	add.w	r4, r6, #16
 8005678:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800567a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800567c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800567e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005680:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005684:	e885 0003 	stmia.w	r5, {r0, r1}
 8005688:	1d33      	adds	r3, r6, #4
 800568a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800568c:	6838      	ldr	r0, [r7, #0]
 800568e:	f004 f97f 	bl	8009990 <USB_DevInit>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d005      	beq.n	80056a4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2202      	movs	r2, #2
 800569c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e014      	b.n	80056ce <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d102      	bne.n	80056c2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 f80b 	bl	80056d8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f004 fb3d 	bl	8009d46 <USB_DevDisconnect>

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3714      	adds	r7, #20
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080056d8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005706:	4b05      	ldr	r3, [pc, #20]	; (800571c <HAL_PCDEx_ActivateLPM+0x44>)
 8005708:	4313      	orrs	r3, r2
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3714      	adds	r7, #20
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr
 800571c:	10000003 	.word	0x10000003

08005720 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005726:	2300      	movs	r3, #0
 8005728:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800572a:	4b23      	ldr	r3, [pc, #140]	; (80057b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800572c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572e:	4a22      	ldr	r2, [pc, #136]	; (80057b8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005734:	6413      	str	r3, [r2, #64]	; 0x40
 8005736:	4b20      	ldr	r3, [pc, #128]	; (80057b8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800573e:	603b      	str	r3, [r7, #0]
 8005740:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005742:	4b1e      	ldr	r3, [pc, #120]	; (80057bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a1d      	ldr	r2, [pc, #116]	; (80057bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800574c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800574e:	f7fe ff99 	bl	8004684 <HAL_GetTick>
 8005752:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005754:	e009      	b.n	800576a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005756:	f7fe ff95 	bl	8004684 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005764:	d901      	bls.n	800576a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e022      	b.n	80057b0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800576a:	4b14      	ldr	r3, [pc, #80]	; (80057bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005776:	d1ee      	bne.n	8005756 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005778:	4b10      	ldr	r3, [pc, #64]	; (80057bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a0f      	ldr	r2, [pc, #60]	; (80057bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800577e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005782:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005784:	f7fe ff7e 	bl	8004684 <HAL_GetTick>
 8005788:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800578a:	e009      	b.n	80057a0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800578c:	f7fe ff7a 	bl	8004684 <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800579a:	d901      	bls.n	80057a0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e007      	b.n	80057b0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80057a0:	4b06      	ldr	r3, [pc, #24]	; (80057bc <HAL_PWREx_EnableOverDrive+0x9c>)
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057ac:	d1ee      	bne.n	800578c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3708      	adds	r7, #8
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	40023800 	.word	0x40023800
 80057bc:	40007000 	.word	0x40007000

080057c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b086      	sub	sp, #24
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80057c8:	2300      	movs	r3, #0
 80057ca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e29b      	b.n	8005d0e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f000 8087 	beq.w	80058f2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80057e4:	4b96      	ldr	r3, [pc, #600]	; (8005a40 <HAL_RCC_OscConfig+0x280>)
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f003 030c 	and.w	r3, r3, #12
 80057ec:	2b04      	cmp	r3, #4
 80057ee:	d00c      	beq.n	800580a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057f0:	4b93      	ldr	r3, [pc, #588]	; (8005a40 <HAL_RCC_OscConfig+0x280>)
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f003 030c 	and.w	r3, r3, #12
 80057f8:	2b08      	cmp	r3, #8
 80057fa:	d112      	bne.n	8005822 <HAL_RCC_OscConfig+0x62>
 80057fc:	4b90      	ldr	r3, [pc, #576]	; (8005a40 <HAL_RCC_OscConfig+0x280>)
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005804:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005808:	d10b      	bne.n	8005822 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800580a:	4b8d      	ldr	r3, [pc, #564]	; (8005a40 <HAL_RCC_OscConfig+0x280>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d06c      	beq.n	80058f0 <HAL_RCC_OscConfig+0x130>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d168      	bne.n	80058f0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e275      	b.n	8005d0e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800582a:	d106      	bne.n	800583a <HAL_RCC_OscConfig+0x7a>
 800582c:	4b84      	ldr	r3, [pc, #528]	; (8005a40 <HAL_RCC_OscConfig+0x280>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a83      	ldr	r2, [pc, #524]	; (8005a40 <HAL_RCC_OscConfig+0x280>)
 8005832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005836:	6013      	str	r3, [r2, #0]
 8005838:	e02e      	b.n	8005898 <HAL_RCC_OscConfig+0xd8>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d10c      	bne.n	800585c <HAL_RCC_OscConfig+0x9c>
 8005842:	4b7f      	ldr	r3, [pc, #508]	; (8005a40 <HAL_RCC_OscConfig+0x280>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a7e      	ldr	r2, [pc, #504]	; (8005a40 <HAL_RCC_OscConfig+0x280>)
 8005848:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800584c:	6013      	str	r3, [r2, #0]
 800584e:	4b7c      	ldr	r3, [pc, #496]	; (8005a40 <HAL_RCC_OscConfig+0x280>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a7b      	ldr	r2, [pc, #492]	; (8005a40 <HAL_RCC_OscConfig+0x280>)
 8005854:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005858:	6013      	str	r3, [r2, #0]
 800585a:	e01d      	b.n	8005898 <HAL_RCC_OscConfig+0xd8>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005864:	d10c      	bne.n	8005880 <HAL_RCC_OscConfig+0xc0>
 8005866:	4b76      	ldr	r3, [pc, #472]	; (8005a40 <HAL_RCC_OscConfig+0x280>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a75      	ldr	r2, [pc, #468]	; (8005a40 <HAL_RCC_OscConfig+0x280>)
 800586c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005870:	6013      	str	r3, [r2, #0]
 8005872:	4b73      	ldr	r3, [pc, #460]	; (8005a40 <HAL_RCC_OscConfig+0x280>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a72      	ldr	r2, [pc, #456]	; (8005a40 <HAL_RCC_OscConfig+0x280>)
 8005878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800587c:	6013      	str	r3, [r2, #0]
 800587e:	e00b      	b.n	8005898 <HAL_RCC_OscConfig+0xd8>
 8005880:	4b6f      	ldr	r3, [pc, #444]	; (8005a40 <HAL_RCC_OscConfig+0x280>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a6e      	ldr	r2, [pc, #440]	; (8005a40 <HAL_RCC_OscConfig+0x280>)
 8005886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800588a:	6013      	str	r3, [r2, #0]
 800588c:	4b6c      	ldr	r3, [pc, #432]	; (8005a40 <HAL_RCC_OscConfig+0x280>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a6b      	ldr	r2, [pc, #428]	; (8005a40 <HAL_RCC_OscConfig+0x280>)
 8005892:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005896:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d013      	beq.n	80058c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a0:	f7fe fef0 	bl	8004684 <HAL_GetTick>
 80058a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058a6:	e008      	b.n	80058ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058a8:	f7fe feec 	bl	8004684 <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	2b64      	cmp	r3, #100	; 0x64
 80058b4:	d901      	bls.n	80058ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e229      	b.n	8005d0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058ba:	4b61      	ldr	r3, [pc, #388]	; (8005a40 <HAL_RCC_OscConfig+0x280>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d0f0      	beq.n	80058a8 <HAL_RCC_OscConfig+0xe8>
 80058c6:	e014      	b.n	80058f2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c8:	f7fe fedc 	bl	8004684 <HAL_GetTick>
 80058cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058ce:	e008      	b.n	80058e2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058d0:	f7fe fed8 	bl	8004684 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b64      	cmp	r3, #100	; 0x64
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e215      	b.n	8005d0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058e2:	4b57      	ldr	r3, [pc, #348]	; (8005a40 <HAL_RCC_OscConfig+0x280>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1f0      	bne.n	80058d0 <HAL_RCC_OscConfig+0x110>
 80058ee:	e000      	b.n	80058f2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d069      	beq.n	80059d2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80058fe:	4b50      	ldr	r3, [pc, #320]	; (8005a40 <HAL_RCC_OscConfig+0x280>)
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f003 030c 	and.w	r3, r3, #12
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00b      	beq.n	8005922 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800590a:	4b4d      	ldr	r3, [pc, #308]	; (8005a40 <HAL_RCC_OscConfig+0x280>)
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f003 030c 	and.w	r3, r3, #12
 8005912:	2b08      	cmp	r3, #8
 8005914:	d11c      	bne.n	8005950 <HAL_RCC_OscConfig+0x190>
 8005916:	4b4a      	ldr	r3, [pc, #296]	; (8005a40 <HAL_RCC_OscConfig+0x280>)
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d116      	bne.n	8005950 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005922:	4b47      	ldr	r3, [pc, #284]	; (8005a40 <HAL_RCC_OscConfig+0x280>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0302 	and.w	r3, r3, #2
 800592a:	2b00      	cmp	r3, #0
 800592c:	d005      	beq.n	800593a <HAL_RCC_OscConfig+0x17a>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d001      	beq.n	800593a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e1e9      	b.n	8005d0e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800593a:	4b41      	ldr	r3, [pc, #260]	; (8005a40 <HAL_RCC_OscConfig+0x280>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	00db      	lsls	r3, r3, #3
 8005948:	493d      	ldr	r1, [pc, #244]	; (8005a40 <HAL_RCC_OscConfig+0x280>)
 800594a:	4313      	orrs	r3, r2
 800594c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800594e:	e040      	b.n	80059d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d023      	beq.n	80059a0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005958:	4b39      	ldr	r3, [pc, #228]	; (8005a40 <HAL_RCC_OscConfig+0x280>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a38      	ldr	r2, [pc, #224]	; (8005a40 <HAL_RCC_OscConfig+0x280>)
 800595e:	f043 0301 	orr.w	r3, r3, #1
 8005962:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005964:	f7fe fe8e 	bl	8004684 <HAL_GetTick>
 8005968:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800596a:	e008      	b.n	800597e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800596c:	f7fe fe8a 	bl	8004684 <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	2b02      	cmp	r3, #2
 8005978:	d901      	bls.n	800597e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e1c7      	b.n	8005d0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800597e:	4b30      	ldr	r3, [pc, #192]	; (8005a40 <HAL_RCC_OscConfig+0x280>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0302 	and.w	r3, r3, #2
 8005986:	2b00      	cmp	r3, #0
 8005988:	d0f0      	beq.n	800596c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800598a:	4b2d      	ldr	r3, [pc, #180]	; (8005a40 <HAL_RCC_OscConfig+0x280>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	00db      	lsls	r3, r3, #3
 8005998:	4929      	ldr	r1, [pc, #164]	; (8005a40 <HAL_RCC_OscConfig+0x280>)
 800599a:	4313      	orrs	r3, r2
 800599c:	600b      	str	r3, [r1, #0]
 800599e:	e018      	b.n	80059d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059a0:	4b27      	ldr	r3, [pc, #156]	; (8005a40 <HAL_RCC_OscConfig+0x280>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a26      	ldr	r2, [pc, #152]	; (8005a40 <HAL_RCC_OscConfig+0x280>)
 80059a6:	f023 0301 	bic.w	r3, r3, #1
 80059aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ac:	f7fe fe6a 	bl	8004684 <HAL_GetTick>
 80059b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059b2:	e008      	b.n	80059c6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059b4:	f7fe fe66 	bl	8004684 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e1a3      	b.n	8005d0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059c6:	4b1e      	ldr	r3, [pc, #120]	; (8005a40 <HAL_RCC_OscConfig+0x280>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0302 	and.w	r3, r3, #2
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1f0      	bne.n	80059b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0308 	and.w	r3, r3, #8
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d038      	beq.n	8005a50 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d019      	beq.n	8005a1a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059e6:	4b16      	ldr	r3, [pc, #88]	; (8005a40 <HAL_RCC_OscConfig+0x280>)
 80059e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059ea:	4a15      	ldr	r2, [pc, #84]	; (8005a40 <HAL_RCC_OscConfig+0x280>)
 80059ec:	f043 0301 	orr.w	r3, r3, #1
 80059f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059f2:	f7fe fe47 	bl	8004684 <HAL_GetTick>
 80059f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059f8:	e008      	b.n	8005a0c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059fa:	f7fe fe43 	bl	8004684 <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d901      	bls.n	8005a0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e180      	b.n	8005d0e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a0c:	4b0c      	ldr	r3, [pc, #48]	; (8005a40 <HAL_RCC_OscConfig+0x280>)
 8005a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a10:	f003 0302 	and.w	r3, r3, #2
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d0f0      	beq.n	80059fa <HAL_RCC_OscConfig+0x23a>
 8005a18:	e01a      	b.n	8005a50 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a1a:	4b09      	ldr	r3, [pc, #36]	; (8005a40 <HAL_RCC_OscConfig+0x280>)
 8005a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a1e:	4a08      	ldr	r2, [pc, #32]	; (8005a40 <HAL_RCC_OscConfig+0x280>)
 8005a20:	f023 0301 	bic.w	r3, r3, #1
 8005a24:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a26:	f7fe fe2d 	bl	8004684 <HAL_GetTick>
 8005a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a2c:	e00a      	b.n	8005a44 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a2e:	f7fe fe29 	bl	8004684 <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d903      	bls.n	8005a44 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e166      	b.n	8005d0e <HAL_RCC_OscConfig+0x54e>
 8005a40:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a44:	4b92      	ldr	r3, [pc, #584]	; (8005c90 <HAL_RCC_OscConfig+0x4d0>)
 8005a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a48:	f003 0302 	and.w	r3, r3, #2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1ee      	bne.n	8005a2e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0304 	and.w	r3, r3, #4
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f000 80a4 	beq.w	8005ba6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a5e:	4b8c      	ldr	r3, [pc, #560]	; (8005c90 <HAL_RCC_OscConfig+0x4d0>)
 8005a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d10d      	bne.n	8005a86 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a6a:	4b89      	ldr	r3, [pc, #548]	; (8005c90 <HAL_RCC_OscConfig+0x4d0>)
 8005a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6e:	4a88      	ldr	r2, [pc, #544]	; (8005c90 <HAL_RCC_OscConfig+0x4d0>)
 8005a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a74:	6413      	str	r3, [r2, #64]	; 0x40
 8005a76:	4b86      	ldr	r3, [pc, #536]	; (8005c90 <HAL_RCC_OscConfig+0x4d0>)
 8005a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a7e:	60bb      	str	r3, [r7, #8]
 8005a80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a82:	2301      	movs	r3, #1
 8005a84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a86:	4b83      	ldr	r3, [pc, #524]	; (8005c94 <HAL_RCC_OscConfig+0x4d4>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d118      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005a92:	4b80      	ldr	r3, [pc, #512]	; (8005c94 <HAL_RCC_OscConfig+0x4d4>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a7f      	ldr	r2, [pc, #508]	; (8005c94 <HAL_RCC_OscConfig+0x4d4>)
 8005a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a9e:	f7fe fdf1 	bl	8004684 <HAL_GetTick>
 8005aa2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005aa4:	e008      	b.n	8005ab8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aa6:	f7fe fded 	bl	8004684 <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	2b64      	cmp	r3, #100	; 0x64
 8005ab2:	d901      	bls.n	8005ab8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e12a      	b.n	8005d0e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ab8:	4b76      	ldr	r3, [pc, #472]	; (8005c94 <HAL_RCC_OscConfig+0x4d4>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d0f0      	beq.n	8005aa6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d106      	bne.n	8005ada <HAL_RCC_OscConfig+0x31a>
 8005acc:	4b70      	ldr	r3, [pc, #448]	; (8005c90 <HAL_RCC_OscConfig+0x4d0>)
 8005ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad0:	4a6f      	ldr	r2, [pc, #444]	; (8005c90 <HAL_RCC_OscConfig+0x4d0>)
 8005ad2:	f043 0301 	orr.w	r3, r3, #1
 8005ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ad8:	e02d      	b.n	8005b36 <HAL_RCC_OscConfig+0x376>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10c      	bne.n	8005afc <HAL_RCC_OscConfig+0x33c>
 8005ae2:	4b6b      	ldr	r3, [pc, #428]	; (8005c90 <HAL_RCC_OscConfig+0x4d0>)
 8005ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae6:	4a6a      	ldr	r2, [pc, #424]	; (8005c90 <HAL_RCC_OscConfig+0x4d0>)
 8005ae8:	f023 0301 	bic.w	r3, r3, #1
 8005aec:	6713      	str	r3, [r2, #112]	; 0x70
 8005aee:	4b68      	ldr	r3, [pc, #416]	; (8005c90 <HAL_RCC_OscConfig+0x4d0>)
 8005af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af2:	4a67      	ldr	r2, [pc, #412]	; (8005c90 <HAL_RCC_OscConfig+0x4d0>)
 8005af4:	f023 0304 	bic.w	r3, r3, #4
 8005af8:	6713      	str	r3, [r2, #112]	; 0x70
 8005afa:	e01c      	b.n	8005b36 <HAL_RCC_OscConfig+0x376>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	2b05      	cmp	r3, #5
 8005b02:	d10c      	bne.n	8005b1e <HAL_RCC_OscConfig+0x35e>
 8005b04:	4b62      	ldr	r3, [pc, #392]	; (8005c90 <HAL_RCC_OscConfig+0x4d0>)
 8005b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b08:	4a61      	ldr	r2, [pc, #388]	; (8005c90 <HAL_RCC_OscConfig+0x4d0>)
 8005b0a:	f043 0304 	orr.w	r3, r3, #4
 8005b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8005b10:	4b5f      	ldr	r3, [pc, #380]	; (8005c90 <HAL_RCC_OscConfig+0x4d0>)
 8005b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b14:	4a5e      	ldr	r2, [pc, #376]	; (8005c90 <HAL_RCC_OscConfig+0x4d0>)
 8005b16:	f043 0301 	orr.w	r3, r3, #1
 8005b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8005b1c:	e00b      	b.n	8005b36 <HAL_RCC_OscConfig+0x376>
 8005b1e:	4b5c      	ldr	r3, [pc, #368]	; (8005c90 <HAL_RCC_OscConfig+0x4d0>)
 8005b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b22:	4a5b      	ldr	r2, [pc, #364]	; (8005c90 <HAL_RCC_OscConfig+0x4d0>)
 8005b24:	f023 0301 	bic.w	r3, r3, #1
 8005b28:	6713      	str	r3, [r2, #112]	; 0x70
 8005b2a:	4b59      	ldr	r3, [pc, #356]	; (8005c90 <HAL_RCC_OscConfig+0x4d0>)
 8005b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b2e:	4a58      	ldr	r2, [pc, #352]	; (8005c90 <HAL_RCC_OscConfig+0x4d0>)
 8005b30:	f023 0304 	bic.w	r3, r3, #4
 8005b34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d015      	beq.n	8005b6a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b3e:	f7fe fda1 	bl	8004684 <HAL_GetTick>
 8005b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b44:	e00a      	b.n	8005b5c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b46:	f7fe fd9d 	bl	8004684 <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d901      	bls.n	8005b5c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e0d8      	b.n	8005d0e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b5c:	4b4c      	ldr	r3, [pc, #304]	; (8005c90 <HAL_RCC_OscConfig+0x4d0>)
 8005b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b60:	f003 0302 	and.w	r3, r3, #2
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d0ee      	beq.n	8005b46 <HAL_RCC_OscConfig+0x386>
 8005b68:	e014      	b.n	8005b94 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b6a:	f7fe fd8b 	bl	8004684 <HAL_GetTick>
 8005b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b70:	e00a      	b.n	8005b88 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b72:	f7fe fd87 	bl	8004684 <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d901      	bls.n	8005b88 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e0c2      	b.n	8005d0e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b88:	4b41      	ldr	r3, [pc, #260]	; (8005c90 <HAL_RCC_OscConfig+0x4d0>)
 8005b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b8c:	f003 0302 	and.w	r3, r3, #2
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1ee      	bne.n	8005b72 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b94:	7dfb      	ldrb	r3, [r7, #23]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d105      	bne.n	8005ba6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b9a:	4b3d      	ldr	r3, [pc, #244]	; (8005c90 <HAL_RCC_OscConfig+0x4d0>)
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9e:	4a3c      	ldr	r2, [pc, #240]	; (8005c90 <HAL_RCC_OscConfig+0x4d0>)
 8005ba0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ba4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f000 80ae 	beq.w	8005d0c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bb0:	4b37      	ldr	r3, [pc, #220]	; (8005c90 <HAL_RCC_OscConfig+0x4d0>)
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f003 030c 	and.w	r3, r3, #12
 8005bb8:	2b08      	cmp	r3, #8
 8005bba:	d06d      	beq.n	8005c98 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d14b      	bne.n	8005c5c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bc4:	4b32      	ldr	r3, [pc, #200]	; (8005c90 <HAL_RCC_OscConfig+0x4d0>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a31      	ldr	r2, [pc, #196]	; (8005c90 <HAL_RCC_OscConfig+0x4d0>)
 8005bca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bd0:	f7fe fd58 	bl	8004684 <HAL_GetTick>
 8005bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bd6:	e008      	b.n	8005bea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bd8:	f7fe fd54 	bl	8004684 <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d901      	bls.n	8005bea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e091      	b.n	8005d0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bea:	4b29      	ldr	r3, [pc, #164]	; (8005c90 <HAL_RCC_OscConfig+0x4d0>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1f0      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	69da      	ldr	r2, [r3, #28]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c04:	019b      	lsls	r3, r3, #6
 8005c06:	431a      	orrs	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c0c:	085b      	lsrs	r3, r3, #1
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	041b      	lsls	r3, r3, #16
 8005c12:	431a      	orrs	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c18:	061b      	lsls	r3, r3, #24
 8005c1a:	431a      	orrs	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c20:	071b      	lsls	r3, r3, #28
 8005c22:	491b      	ldr	r1, [pc, #108]	; (8005c90 <HAL_RCC_OscConfig+0x4d0>)
 8005c24:	4313      	orrs	r3, r2
 8005c26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c28:	4b19      	ldr	r3, [pc, #100]	; (8005c90 <HAL_RCC_OscConfig+0x4d0>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a18      	ldr	r2, [pc, #96]	; (8005c90 <HAL_RCC_OscConfig+0x4d0>)
 8005c2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c34:	f7fe fd26 	bl	8004684 <HAL_GetTick>
 8005c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c3a:	e008      	b.n	8005c4e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c3c:	f7fe fd22 	bl	8004684 <HAL_GetTick>
 8005c40:	4602      	mov	r2, r0
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d901      	bls.n	8005c4e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e05f      	b.n	8005d0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c4e:	4b10      	ldr	r3, [pc, #64]	; (8005c90 <HAL_RCC_OscConfig+0x4d0>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d0f0      	beq.n	8005c3c <HAL_RCC_OscConfig+0x47c>
 8005c5a:	e057      	b.n	8005d0c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c5c:	4b0c      	ldr	r3, [pc, #48]	; (8005c90 <HAL_RCC_OscConfig+0x4d0>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a0b      	ldr	r2, [pc, #44]	; (8005c90 <HAL_RCC_OscConfig+0x4d0>)
 8005c62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c68:	f7fe fd0c 	bl	8004684 <HAL_GetTick>
 8005c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c6e:	e008      	b.n	8005c82 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c70:	f7fe fd08 	bl	8004684 <HAL_GetTick>
 8005c74:	4602      	mov	r2, r0
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d901      	bls.n	8005c82 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e045      	b.n	8005d0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c82:	4b03      	ldr	r3, [pc, #12]	; (8005c90 <HAL_RCC_OscConfig+0x4d0>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1f0      	bne.n	8005c70 <HAL_RCC_OscConfig+0x4b0>
 8005c8e:	e03d      	b.n	8005d0c <HAL_RCC_OscConfig+0x54c>
 8005c90:	40023800 	.word	0x40023800
 8005c94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005c98:	4b1f      	ldr	r3, [pc, #124]	; (8005d18 <HAL_RCC_OscConfig+0x558>)
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d030      	beq.n	8005d08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d129      	bne.n	8005d08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d122      	bne.n	8005d08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005cc8:	4013      	ands	r3, r2
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005cce:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d119      	bne.n	8005d08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cde:	085b      	lsrs	r3, r3, #1
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d10f      	bne.n	8005d08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d107      	bne.n	8005d08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d02:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d001      	beq.n	8005d0c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e000      	b.n	8005d0e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3718      	adds	r7, #24
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	40023800 	.word	0x40023800

08005d1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005d26:	2300      	movs	r3, #0
 8005d28:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d101      	bne.n	8005d34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e0d0      	b.n	8005ed6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d34:	4b6a      	ldr	r3, [pc, #424]	; (8005ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 030f 	and.w	r3, r3, #15
 8005d3c:	683a      	ldr	r2, [r7, #0]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d910      	bls.n	8005d64 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d42:	4b67      	ldr	r3, [pc, #412]	; (8005ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f023 020f 	bic.w	r2, r3, #15
 8005d4a:	4965      	ldr	r1, [pc, #404]	; (8005ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d52:	4b63      	ldr	r3, [pc, #396]	; (8005ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 030f 	and.w	r3, r3, #15
 8005d5a:	683a      	ldr	r2, [r7, #0]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d001      	beq.n	8005d64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e0b8      	b.n	8005ed6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0302 	and.w	r3, r3, #2
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d020      	beq.n	8005db2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0304 	and.w	r3, r3, #4
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d005      	beq.n	8005d88 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d7c:	4b59      	ldr	r3, [pc, #356]	; (8005ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	4a58      	ldr	r2, [pc, #352]	; (8005ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8005d82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d86:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0308 	and.w	r3, r3, #8
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d005      	beq.n	8005da0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d94:	4b53      	ldr	r3, [pc, #332]	; (8005ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	4a52      	ldr	r2, [pc, #328]	; (8005ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8005d9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d9e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005da0:	4b50      	ldr	r3, [pc, #320]	; (8005ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	494d      	ldr	r1, [pc, #308]	; (8005ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8005dae:	4313      	orrs	r3, r2
 8005db0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d040      	beq.n	8005e40 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d107      	bne.n	8005dd6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dc6:	4b47      	ldr	r3, [pc, #284]	; (8005ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d115      	bne.n	8005dfe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e07f      	b.n	8005ed6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d107      	bne.n	8005dee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dde:	4b41      	ldr	r3, [pc, #260]	; (8005ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d109      	bne.n	8005dfe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e073      	b.n	8005ed6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dee:	4b3d      	ldr	r3, [pc, #244]	; (8005ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0302 	and.w	r3, r3, #2
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d101      	bne.n	8005dfe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e06b      	b.n	8005ed6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005dfe:	4b39      	ldr	r3, [pc, #228]	; (8005ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f023 0203 	bic.w	r2, r3, #3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	4936      	ldr	r1, [pc, #216]	; (8005ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e10:	f7fe fc38 	bl	8004684 <HAL_GetTick>
 8005e14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e16:	e00a      	b.n	8005e2e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e18:	f7fe fc34 	bl	8004684 <HAL_GetTick>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d901      	bls.n	8005e2e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e053      	b.n	8005ed6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e2e:	4b2d      	ldr	r3, [pc, #180]	; (8005ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f003 020c 	and.w	r2, r3, #12
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d1eb      	bne.n	8005e18 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e40:	4b27      	ldr	r3, [pc, #156]	; (8005ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 030f 	and.w	r3, r3, #15
 8005e48:	683a      	ldr	r2, [r7, #0]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d210      	bcs.n	8005e70 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e4e:	4b24      	ldr	r3, [pc, #144]	; (8005ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f023 020f 	bic.w	r2, r3, #15
 8005e56:	4922      	ldr	r1, [pc, #136]	; (8005ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e5e:	4b20      	ldr	r3, [pc, #128]	; (8005ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 030f 	and.w	r3, r3, #15
 8005e66:	683a      	ldr	r2, [r7, #0]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d001      	beq.n	8005e70 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e032      	b.n	8005ed6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0304 	and.w	r3, r3, #4
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d008      	beq.n	8005e8e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e7c:	4b19      	ldr	r3, [pc, #100]	; (8005ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	4916      	ldr	r1, [pc, #88]	; (8005ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0308 	and.w	r3, r3, #8
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d009      	beq.n	8005eae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005e9a:	4b12      	ldr	r3, [pc, #72]	; (8005ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	00db      	lsls	r3, r3, #3
 8005ea8:	490e      	ldr	r1, [pc, #56]	; (8005ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005eae:	f000 f821 	bl	8005ef4 <HAL_RCC_GetSysClockFreq>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	4b0b      	ldr	r3, [pc, #44]	; (8005ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	091b      	lsrs	r3, r3, #4
 8005eba:	f003 030f 	and.w	r3, r3, #15
 8005ebe:	490a      	ldr	r1, [pc, #40]	; (8005ee8 <HAL_RCC_ClockConfig+0x1cc>)
 8005ec0:	5ccb      	ldrb	r3, [r1, r3]
 8005ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ec6:	4a09      	ldr	r2, [pc, #36]	; (8005eec <HAL_RCC_ClockConfig+0x1d0>)
 8005ec8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005eca:	4b09      	ldr	r3, [pc, #36]	; (8005ef0 <HAL_RCC_ClockConfig+0x1d4>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7fd fbaa 	bl	8003628 <HAL_InitTick>

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	40023c00 	.word	0x40023c00
 8005ee4:	40023800 	.word	0x40023800
 8005ee8:	0801f974 	.word	0x0801f974
 8005eec:	20000004 	.word	0x20000004
 8005ef0:	20000008 	.word	0x20000008

08005ef4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ef4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ef8:	b094      	sub	sp, #80	; 0x50
 8005efa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005efc:	2300      	movs	r3, #0
 8005efe:	647b      	str	r3, [r7, #68]	; 0x44
 8005f00:	2300      	movs	r3, #0
 8005f02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f04:	2300      	movs	r3, #0
 8005f06:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f0c:	4b79      	ldr	r3, [pc, #484]	; (80060f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f003 030c 	and.w	r3, r3, #12
 8005f14:	2b08      	cmp	r3, #8
 8005f16:	d00d      	beq.n	8005f34 <HAL_RCC_GetSysClockFreq+0x40>
 8005f18:	2b08      	cmp	r3, #8
 8005f1a:	f200 80e1 	bhi.w	80060e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d002      	beq.n	8005f28 <HAL_RCC_GetSysClockFreq+0x34>
 8005f22:	2b04      	cmp	r3, #4
 8005f24:	d003      	beq.n	8005f2e <HAL_RCC_GetSysClockFreq+0x3a>
 8005f26:	e0db      	b.n	80060e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f28:	4b73      	ldr	r3, [pc, #460]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f2a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f2c:	e0db      	b.n	80060e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f2e:	4b73      	ldr	r3, [pc, #460]	; (80060fc <HAL_RCC_GetSysClockFreq+0x208>)
 8005f30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f32:	e0d8      	b.n	80060e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f34:	4b6f      	ldr	r3, [pc, #444]	; (80060f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f3c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005f3e:	4b6d      	ldr	r3, [pc, #436]	; (80060f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d063      	beq.n	8006012 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f4a:	4b6a      	ldr	r3, [pc, #424]	; (80060f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	099b      	lsrs	r3, r3, #6
 8005f50:	2200      	movs	r2, #0
 8005f52:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f54:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f5c:	633b      	str	r3, [r7, #48]	; 0x30
 8005f5e:	2300      	movs	r3, #0
 8005f60:	637b      	str	r3, [r7, #52]	; 0x34
 8005f62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005f66:	4622      	mov	r2, r4
 8005f68:	462b      	mov	r3, r5
 8005f6a:	f04f 0000 	mov.w	r0, #0
 8005f6e:	f04f 0100 	mov.w	r1, #0
 8005f72:	0159      	lsls	r1, r3, #5
 8005f74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f78:	0150      	lsls	r0, r2, #5
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	4621      	mov	r1, r4
 8005f80:	1a51      	subs	r1, r2, r1
 8005f82:	6139      	str	r1, [r7, #16]
 8005f84:	4629      	mov	r1, r5
 8005f86:	eb63 0301 	sbc.w	r3, r3, r1
 8005f8a:	617b      	str	r3, [r7, #20]
 8005f8c:	f04f 0200 	mov.w	r2, #0
 8005f90:	f04f 0300 	mov.w	r3, #0
 8005f94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f98:	4659      	mov	r1, fp
 8005f9a:	018b      	lsls	r3, r1, #6
 8005f9c:	4651      	mov	r1, sl
 8005f9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005fa2:	4651      	mov	r1, sl
 8005fa4:	018a      	lsls	r2, r1, #6
 8005fa6:	4651      	mov	r1, sl
 8005fa8:	ebb2 0801 	subs.w	r8, r2, r1
 8005fac:	4659      	mov	r1, fp
 8005fae:	eb63 0901 	sbc.w	r9, r3, r1
 8005fb2:	f04f 0200 	mov.w	r2, #0
 8005fb6:	f04f 0300 	mov.w	r3, #0
 8005fba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005fbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005fc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005fc6:	4690      	mov	r8, r2
 8005fc8:	4699      	mov	r9, r3
 8005fca:	4623      	mov	r3, r4
 8005fcc:	eb18 0303 	adds.w	r3, r8, r3
 8005fd0:	60bb      	str	r3, [r7, #8]
 8005fd2:	462b      	mov	r3, r5
 8005fd4:	eb49 0303 	adc.w	r3, r9, r3
 8005fd8:	60fb      	str	r3, [r7, #12]
 8005fda:	f04f 0200 	mov.w	r2, #0
 8005fde:	f04f 0300 	mov.w	r3, #0
 8005fe2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005fe6:	4629      	mov	r1, r5
 8005fe8:	024b      	lsls	r3, r1, #9
 8005fea:	4621      	mov	r1, r4
 8005fec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005ff0:	4621      	mov	r1, r4
 8005ff2:	024a      	lsls	r2, r1, #9
 8005ff4:	4610      	mov	r0, r2
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ffe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006000:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006004:	f7fa f9d4 	bl	80003b0 <__aeabi_uldivmod>
 8006008:	4602      	mov	r2, r0
 800600a:	460b      	mov	r3, r1
 800600c:	4613      	mov	r3, r2
 800600e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006010:	e058      	b.n	80060c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006012:	4b38      	ldr	r3, [pc, #224]	; (80060f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	099b      	lsrs	r3, r3, #6
 8006018:	2200      	movs	r2, #0
 800601a:	4618      	mov	r0, r3
 800601c:	4611      	mov	r1, r2
 800601e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006022:	623b      	str	r3, [r7, #32]
 8006024:	2300      	movs	r3, #0
 8006026:	627b      	str	r3, [r7, #36]	; 0x24
 8006028:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800602c:	4642      	mov	r2, r8
 800602e:	464b      	mov	r3, r9
 8006030:	f04f 0000 	mov.w	r0, #0
 8006034:	f04f 0100 	mov.w	r1, #0
 8006038:	0159      	lsls	r1, r3, #5
 800603a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800603e:	0150      	lsls	r0, r2, #5
 8006040:	4602      	mov	r2, r0
 8006042:	460b      	mov	r3, r1
 8006044:	4641      	mov	r1, r8
 8006046:	ebb2 0a01 	subs.w	sl, r2, r1
 800604a:	4649      	mov	r1, r9
 800604c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006050:	f04f 0200 	mov.w	r2, #0
 8006054:	f04f 0300 	mov.w	r3, #0
 8006058:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800605c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006060:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006064:	ebb2 040a 	subs.w	r4, r2, sl
 8006068:	eb63 050b 	sbc.w	r5, r3, fp
 800606c:	f04f 0200 	mov.w	r2, #0
 8006070:	f04f 0300 	mov.w	r3, #0
 8006074:	00eb      	lsls	r3, r5, #3
 8006076:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800607a:	00e2      	lsls	r2, r4, #3
 800607c:	4614      	mov	r4, r2
 800607e:	461d      	mov	r5, r3
 8006080:	4643      	mov	r3, r8
 8006082:	18e3      	adds	r3, r4, r3
 8006084:	603b      	str	r3, [r7, #0]
 8006086:	464b      	mov	r3, r9
 8006088:	eb45 0303 	adc.w	r3, r5, r3
 800608c:	607b      	str	r3, [r7, #4]
 800608e:	f04f 0200 	mov.w	r2, #0
 8006092:	f04f 0300 	mov.w	r3, #0
 8006096:	e9d7 4500 	ldrd	r4, r5, [r7]
 800609a:	4629      	mov	r1, r5
 800609c:	028b      	lsls	r3, r1, #10
 800609e:	4621      	mov	r1, r4
 80060a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80060a4:	4621      	mov	r1, r4
 80060a6:	028a      	lsls	r2, r1, #10
 80060a8:	4610      	mov	r0, r2
 80060aa:	4619      	mov	r1, r3
 80060ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060ae:	2200      	movs	r2, #0
 80060b0:	61bb      	str	r3, [r7, #24]
 80060b2:	61fa      	str	r2, [r7, #28]
 80060b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060b8:	f7fa f97a 	bl	80003b0 <__aeabi_uldivmod>
 80060bc:	4602      	mov	r2, r0
 80060be:	460b      	mov	r3, r1
 80060c0:	4613      	mov	r3, r2
 80060c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80060c4:	4b0b      	ldr	r3, [pc, #44]	; (80060f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	0c1b      	lsrs	r3, r3, #16
 80060ca:	f003 0303 	and.w	r3, r3, #3
 80060ce:	3301      	adds	r3, #1
 80060d0:	005b      	lsls	r3, r3, #1
 80060d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80060d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80060de:	e002      	b.n	80060e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80060e0:	4b05      	ldr	r3, [pc, #20]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80060e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80060e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80060e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3750      	adds	r7, #80	; 0x50
 80060ec:	46bd      	mov	sp, r7
 80060ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060f2:	bf00      	nop
 80060f4:	40023800 	.word	0x40023800
 80060f8:	00f42400 	.word	0x00f42400
 80060fc:	007a1200 	.word	0x007a1200

08006100 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006100:	b480      	push	{r7}
 8006102:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006104:	4b03      	ldr	r3, [pc, #12]	; (8006114 <HAL_RCC_GetHCLKFreq+0x14>)
 8006106:	681b      	ldr	r3, [r3, #0]
}
 8006108:	4618      	mov	r0, r3
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	20000004 	.word	0x20000004

08006118 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800611c:	f7ff fff0 	bl	8006100 <HAL_RCC_GetHCLKFreq>
 8006120:	4602      	mov	r2, r0
 8006122:	4b05      	ldr	r3, [pc, #20]	; (8006138 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	0a9b      	lsrs	r3, r3, #10
 8006128:	f003 0307 	and.w	r3, r3, #7
 800612c:	4903      	ldr	r1, [pc, #12]	; (800613c <HAL_RCC_GetPCLK1Freq+0x24>)
 800612e:	5ccb      	ldrb	r3, [r1, r3]
 8006130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006134:	4618      	mov	r0, r3
 8006136:	bd80      	pop	{r7, pc}
 8006138:	40023800 	.word	0x40023800
 800613c:	0801f984 	.word	0x0801f984

08006140 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006144:	f7ff ffdc 	bl	8006100 <HAL_RCC_GetHCLKFreq>
 8006148:	4602      	mov	r2, r0
 800614a:	4b05      	ldr	r3, [pc, #20]	; (8006160 <HAL_RCC_GetPCLK2Freq+0x20>)
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	0b5b      	lsrs	r3, r3, #13
 8006150:	f003 0307 	and.w	r3, r3, #7
 8006154:	4903      	ldr	r1, [pc, #12]	; (8006164 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006156:	5ccb      	ldrb	r3, [r1, r3]
 8006158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800615c:	4618      	mov	r0, r3
 800615e:	bd80      	pop	{r7, pc}
 8006160:	40023800 	.word	0x40023800
 8006164:	0801f984 	.word	0x0801f984

08006168 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	220f      	movs	r2, #15
 8006176:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006178:	4b12      	ldr	r3, [pc, #72]	; (80061c4 <HAL_RCC_GetClockConfig+0x5c>)
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	f003 0203 	and.w	r2, r3, #3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006184:	4b0f      	ldr	r3, [pc, #60]	; (80061c4 <HAL_RCC_GetClockConfig+0x5c>)
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006190:	4b0c      	ldr	r3, [pc, #48]	; (80061c4 <HAL_RCC_GetClockConfig+0x5c>)
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800619c:	4b09      	ldr	r3, [pc, #36]	; (80061c4 <HAL_RCC_GetClockConfig+0x5c>)
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	08db      	lsrs	r3, r3, #3
 80061a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80061aa:	4b07      	ldr	r3, [pc, #28]	; (80061c8 <HAL_RCC_GetClockConfig+0x60>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 020f 	and.w	r2, r3, #15
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	601a      	str	r2, [r3, #0]
}
 80061b6:	bf00      	nop
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	40023800 	.word	0x40023800
 80061c8:	40023c00 	.word	0x40023c00

080061cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b088      	sub	sp, #32
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80061d4:	2300      	movs	r3, #0
 80061d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80061d8:	2300      	movs	r3, #0
 80061da:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80061dc:	2300      	movs	r3, #0
 80061de:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80061e0:	2300      	movs	r3, #0
 80061e2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80061e4:	2300      	movs	r3, #0
 80061e6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0301 	and.w	r3, r3, #1
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d012      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80061f4:	4b69      	ldr	r3, [pc, #420]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	4a68      	ldr	r2, [pc, #416]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061fa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80061fe:	6093      	str	r3, [r2, #8]
 8006200:	4b66      	ldr	r3, [pc, #408]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006202:	689a      	ldr	r2, [r3, #8]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006208:	4964      	ldr	r1, [pc, #400]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800620a:	4313      	orrs	r3, r2
 800620c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006216:	2301      	movs	r3, #1
 8006218:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006222:	2b00      	cmp	r3, #0
 8006224:	d017      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006226:	4b5d      	ldr	r3, [pc, #372]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006228:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800622c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006234:	4959      	ldr	r1, [pc, #356]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006236:	4313      	orrs	r3, r2
 8006238:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006240:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006244:	d101      	bne.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006246:	2301      	movs	r3, #1
 8006248:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800624e:	2b00      	cmp	r3, #0
 8006250:	d101      	bne.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006252:	2301      	movs	r3, #1
 8006254:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d017      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006262:	4b4e      	ldr	r3, [pc, #312]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006264:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006268:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006270:	494a      	ldr	r1, [pc, #296]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006272:	4313      	orrs	r3, r2
 8006274:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006280:	d101      	bne.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006282:	2301      	movs	r3, #1
 8006284:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628a:	2b00      	cmp	r3, #0
 800628c:	d101      	bne.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800628e:	2301      	movs	r3, #1
 8006290:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d001      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800629e:	2301      	movs	r3, #1
 80062a0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 0320 	and.w	r3, r3, #32
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	f000 808b 	beq.w	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80062b0:	4b3a      	ldr	r3, [pc, #232]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b4:	4a39      	ldr	r2, [pc, #228]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062ba:	6413      	str	r3, [r2, #64]	; 0x40
 80062bc:	4b37      	ldr	r3, [pc, #220]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062c4:	60bb      	str	r3, [r7, #8]
 80062c6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80062c8:	4b35      	ldr	r3, [pc, #212]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a34      	ldr	r2, [pc, #208]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80062ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062d4:	f7fe f9d6 	bl	8004684 <HAL_GetTick>
 80062d8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80062da:	e008      	b.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062dc:	f7fe f9d2 	bl	8004684 <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	2b64      	cmp	r3, #100	; 0x64
 80062e8:	d901      	bls.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e38f      	b.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80062ee:	4b2c      	ldr	r3, [pc, #176]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d0f0      	beq.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80062fa:	4b28      	ldr	r3, [pc, #160]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006302:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d035      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800630e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	429a      	cmp	r2, r3
 8006316:	d02e      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006318:	4b20      	ldr	r3, [pc, #128]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800631a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800631c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006320:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006322:	4b1e      	ldr	r3, [pc, #120]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006326:	4a1d      	ldr	r2, [pc, #116]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800632c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800632e:	4b1b      	ldr	r3, [pc, #108]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006332:	4a1a      	ldr	r2, [pc, #104]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006334:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006338:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800633a:	4a18      	ldr	r2, [pc, #96]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006340:	4b16      	ldr	r3, [pc, #88]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006344:	f003 0301 	and.w	r3, r3, #1
 8006348:	2b01      	cmp	r3, #1
 800634a:	d114      	bne.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800634c:	f7fe f99a 	bl	8004684 <HAL_GetTick>
 8006350:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006352:	e00a      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006354:	f7fe f996 	bl	8004684 <HAL_GetTick>
 8006358:	4602      	mov	r2, r0
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006362:	4293      	cmp	r3, r2
 8006364:	d901      	bls.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e351      	b.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800636a:	4b0c      	ldr	r3, [pc, #48]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800636c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800636e:	f003 0302 	and.w	r3, r3, #2
 8006372:	2b00      	cmp	r3, #0
 8006374:	d0ee      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800637a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800637e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006382:	d111      	bne.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006384:	4b05      	ldr	r3, [pc, #20]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006390:	4b04      	ldr	r3, [pc, #16]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006392:	400b      	ands	r3, r1
 8006394:	4901      	ldr	r1, [pc, #4]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006396:	4313      	orrs	r3, r2
 8006398:	608b      	str	r3, [r1, #8]
 800639a:	e00b      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800639c:	40023800 	.word	0x40023800
 80063a0:	40007000 	.word	0x40007000
 80063a4:	0ffffcff 	.word	0x0ffffcff
 80063a8:	4bac      	ldr	r3, [pc, #688]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	4aab      	ldr	r2, [pc, #684]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063ae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80063b2:	6093      	str	r3, [r2, #8]
 80063b4:	4ba9      	ldr	r3, [pc, #676]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063c0:	49a6      	ldr	r1, [pc, #664]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063c2:	4313      	orrs	r3, r2
 80063c4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0310 	and.w	r3, r3, #16
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d010      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80063d2:	4ba2      	ldr	r3, [pc, #648]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063d8:	4aa0      	ldr	r2, [pc, #640]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80063e2:	4b9e      	ldr	r3, [pc, #632]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063e4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ec:	499b      	ldr	r1, [pc, #620]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063ee:	4313      	orrs	r3, r2
 80063f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00a      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006400:	4b96      	ldr	r3, [pc, #600]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006406:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800640e:	4993      	ldr	r1, [pc, #588]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006410:	4313      	orrs	r3, r2
 8006412:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00a      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006422:	4b8e      	ldr	r3, [pc, #568]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006428:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006430:	498a      	ldr	r1, [pc, #552]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006432:	4313      	orrs	r3, r2
 8006434:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00a      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006444:	4b85      	ldr	r3, [pc, #532]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800644a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006452:	4982      	ldr	r1, [pc, #520]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006454:	4313      	orrs	r3, r2
 8006456:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00a      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006466:	4b7d      	ldr	r3, [pc, #500]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800646c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006474:	4979      	ldr	r1, [pc, #484]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006476:	4313      	orrs	r3, r2
 8006478:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006484:	2b00      	cmp	r3, #0
 8006486:	d00a      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006488:	4b74      	ldr	r3, [pc, #464]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800648a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800648e:	f023 0203 	bic.w	r2, r3, #3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006496:	4971      	ldr	r1, [pc, #452]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006498:	4313      	orrs	r3, r2
 800649a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00a      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80064aa:	4b6c      	ldr	r3, [pc, #432]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064b0:	f023 020c 	bic.w	r2, r3, #12
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064b8:	4968      	ldr	r1, [pc, #416]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064ba:	4313      	orrs	r3, r2
 80064bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00a      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80064cc:	4b63      	ldr	r3, [pc, #396]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064d2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064da:	4960      	ldr	r1, [pc, #384]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064dc:	4313      	orrs	r3, r2
 80064de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00a      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80064ee:	4b5b      	ldr	r3, [pc, #364]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064f4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064fc:	4957      	ldr	r1, [pc, #348]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064fe:	4313      	orrs	r3, r2
 8006500:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800650c:	2b00      	cmp	r3, #0
 800650e:	d00a      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006510:	4b52      	ldr	r3, [pc, #328]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006516:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800651e:	494f      	ldr	r1, [pc, #316]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006520:	4313      	orrs	r3, r2
 8006522:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00a      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006532:	4b4a      	ldr	r3, [pc, #296]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006538:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006540:	4946      	ldr	r1, [pc, #280]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006542:	4313      	orrs	r3, r2
 8006544:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00a      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006554:	4b41      	ldr	r3, [pc, #260]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800655a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006562:	493e      	ldr	r1, [pc, #248]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006564:	4313      	orrs	r3, r2
 8006566:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00a      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006576:	4b39      	ldr	r3, [pc, #228]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800657c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006584:	4935      	ldr	r1, [pc, #212]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006586:	4313      	orrs	r3, r2
 8006588:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00a      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006598:	4b30      	ldr	r3, [pc, #192]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800659a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800659e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065a6:	492d      	ldr	r1, [pc, #180]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065a8:	4313      	orrs	r3, r2
 80065aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d011      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80065ba:	4b28      	ldr	r3, [pc, #160]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065c0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065c8:	4924      	ldr	r1, [pc, #144]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065ca:	4313      	orrs	r3, r2
 80065cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065d8:	d101      	bne.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80065da:	2301      	movs	r3, #1
 80065dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0308 	and.w	r3, r3, #8
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d001      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80065ea:	2301      	movs	r3, #1
 80065ec:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00a      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065fa:	4b18      	ldr	r3, [pc, #96]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006600:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006608:	4914      	ldr	r1, [pc, #80]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800660a:	4313      	orrs	r3, r2
 800660c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00b      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800661c:	4b0f      	ldr	r3, [pc, #60]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800661e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006622:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800662c:	490b      	ldr	r1, [pc, #44]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800662e:	4313      	orrs	r3, r2
 8006630:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00f      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006640:	4b06      	ldr	r3, [pc, #24]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006646:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006650:	4902      	ldr	r1, [pc, #8]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006652:	4313      	orrs	r3, r2
 8006654:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006658:	e002      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800665a:	bf00      	nop
 800665c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00b      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800666c:	4b8a      	ldr	r3, [pc, #552]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800666e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006672:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800667c:	4986      	ldr	r1, [pc, #536]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800667e:	4313      	orrs	r3, r2
 8006680:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00b      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006690:	4b81      	ldr	r3, [pc, #516]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006692:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006696:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066a0:	497d      	ldr	r1, [pc, #500]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d006      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	f000 80d6 	beq.w	8006868 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80066bc:	4b76      	ldr	r3, [pc, #472]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a75      	ldr	r2, [pc, #468]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80066c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066c8:	f7fd ffdc 	bl	8004684 <HAL_GetTick>
 80066cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80066ce:	e008      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80066d0:	f7fd ffd8 	bl	8004684 <HAL_GetTick>
 80066d4:	4602      	mov	r2, r0
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	2b64      	cmp	r3, #100	; 0x64
 80066dc:	d901      	bls.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e195      	b.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80066e2:	4b6d      	ldr	r3, [pc, #436]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1f0      	bne.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0301 	and.w	r3, r3, #1
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d021      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x572>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d11d      	bne.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006702:	4b65      	ldr	r3, [pc, #404]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006704:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006708:	0c1b      	lsrs	r3, r3, #16
 800670a:	f003 0303 	and.w	r3, r3, #3
 800670e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006710:	4b61      	ldr	r3, [pc, #388]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006712:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006716:	0e1b      	lsrs	r3, r3, #24
 8006718:	f003 030f 	and.w	r3, r3, #15
 800671c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	019a      	lsls	r2, r3, #6
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	041b      	lsls	r3, r3, #16
 8006728:	431a      	orrs	r2, r3
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	061b      	lsls	r3, r3, #24
 800672e:	431a      	orrs	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	071b      	lsls	r3, r3, #28
 8006736:	4958      	ldr	r1, [pc, #352]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006738:	4313      	orrs	r3, r2
 800673a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d004      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800674e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006752:	d00a      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800675c:	2b00      	cmp	r3, #0
 800675e:	d02e      	beq.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006764:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006768:	d129      	bne.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800676a:	4b4b      	ldr	r3, [pc, #300]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800676c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006770:	0c1b      	lsrs	r3, r3, #16
 8006772:	f003 0303 	and.w	r3, r3, #3
 8006776:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006778:	4b47      	ldr	r3, [pc, #284]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800677a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800677e:	0f1b      	lsrs	r3, r3, #28
 8006780:	f003 0307 	and.w	r3, r3, #7
 8006784:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	019a      	lsls	r2, r3, #6
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	041b      	lsls	r3, r3, #16
 8006790:	431a      	orrs	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	061b      	lsls	r3, r3, #24
 8006798:	431a      	orrs	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	071b      	lsls	r3, r3, #28
 800679e:	493e      	ldr	r1, [pc, #248]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80067a0:	4313      	orrs	r3, r2
 80067a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80067a6:	4b3c      	ldr	r3, [pc, #240]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80067a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067ac:	f023 021f 	bic.w	r2, r3, #31
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b4:	3b01      	subs	r3, #1
 80067b6:	4938      	ldr	r1, [pc, #224]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80067b8:	4313      	orrs	r3, r2
 80067ba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d01d      	beq.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80067ca:	4b33      	ldr	r3, [pc, #204]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80067cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067d0:	0e1b      	lsrs	r3, r3, #24
 80067d2:	f003 030f 	and.w	r3, r3, #15
 80067d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80067d8:	4b2f      	ldr	r3, [pc, #188]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80067da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067de:	0f1b      	lsrs	r3, r3, #28
 80067e0:	f003 0307 	and.w	r3, r3, #7
 80067e4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	019a      	lsls	r2, r3, #6
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	041b      	lsls	r3, r3, #16
 80067f2:	431a      	orrs	r2, r3
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	061b      	lsls	r3, r3, #24
 80067f8:	431a      	orrs	r2, r3
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	071b      	lsls	r3, r3, #28
 80067fe:	4926      	ldr	r1, [pc, #152]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006800:	4313      	orrs	r3, r2
 8006802:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800680e:	2b00      	cmp	r3, #0
 8006810:	d011      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	019a      	lsls	r2, r3, #6
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	041b      	lsls	r3, r3, #16
 800681e:	431a      	orrs	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	061b      	lsls	r3, r3, #24
 8006826:	431a      	orrs	r2, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	071b      	lsls	r3, r3, #28
 800682e:	491a      	ldr	r1, [pc, #104]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006830:	4313      	orrs	r3, r2
 8006832:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006836:	4b18      	ldr	r3, [pc, #96]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a17      	ldr	r2, [pc, #92]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800683c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006840:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006842:	f7fd ff1f 	bl	8004684 <HAL_GetTick>
 8006846:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006848:	e008      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800684a:	f7fd ff1b 	bl	8004684 <HAL_GetTick>
 800684e:	4602      	mov	r2, r0
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	2b64      	cmp	r3, #100	; 0x64
 8006856:	d901      	bls.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	e0d8      	b.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800685c:	4b0e      	ldr	r3, [pc, #56]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006864:	2b00      	cmp	r3, #0
 8006866:	d0f0      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	2b01      	cmp	r3, #1
 800686c:	f040 80ce 	bne.w	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006870:	4b09      	ldr	r3, [pc, #36]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a08      	ldr	r2, [pc, #32]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006876:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800687a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800687c:	f7fd ff02 	bl	8004684 <HAL_GetTick>
 8006880:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006882:	e00b      	b.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006884:	f7fd fefe 	bl	8004684 <HAL_GetTick>
 8006888:	4602      	mov	r2, r0
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	2b64      	cmp	r3, #100	; 0x64
 8006890:	d904      	bls.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e0bb      	b.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006896:	bf00      	nop
 8006898:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800689c:	4b5e      	ldr	r3, [pc, #376]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068a8:	d0ec      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d003      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d009      	beq.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d02e      	beq.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d12a      	bne.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80068d2:	4b51      	ldr	r3, [pc, #324]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80068d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068d8:	0c1b      	lsrs	r3, r3, #16
 80068da:	f003 0303 	and.w	r3, r3, #3
 80068de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80068e0:	4b4d      	ldr	r3, [pc, #308]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80068e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068e6:	0f1b      	lsrs	r3, r3, #28
 80068e8:	f003 0307 	and.w	r3, r3, #7
 80068ec:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	695b      	ldr	r3, [r3, #20]
 80068f2:	019a      	lsls	r2, r3, #6
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	041b      	lsls	r3, r3, #16
 80068f8:	431a      	orrs	r2, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	061b      	lsls	r3, r3, #24
 8006900:	431a      	orrs	r2, r3
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	071b      	lsls	r3, r3, #28
 8006906:	4944      	ldr	r1, [pc, #272]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006908:	4313      	orrs	r3, r2
 800690a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800690e:	4b42      	ldr	r3, [pc, #264]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006910:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006914:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800691c:	3b01      	subs	r3, #1
 800691e:	021b      	lsls	r3, r3, #8
 8006920:	493d      	ldr	r1, [pc, #244]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006922:	4313      	orrs	r3, r2
 8006924:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d022      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006938:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800693c:	d11d      	bne.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800693e:	4b36      	ldr	r3, [pc, #216]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006944:	0e1b      	lsrs	r3, r3, #24
 8006946:	f003 030f 	and.w	r3, r3, #15
 800694a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800694c:	4b32      	ldr	r3, [pc, #200]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800694e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006952:	0f1b      	lsrs	r3, r3, #28
 8006954:	f003 0307 	and.w	r3, r3, #7
 8006958:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	019a      	lsls	r2, r3, #6
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a1b      	ldr	r3, [r3, #32]
 8006964:	041b      	lsls	r3, r3, #16
 8006966:	431a      	orrs	r2, r3
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	061b      	lsls	r3, r3, #24
 800696c:	431a      	orrs	r2, r3
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	071b      	lsls	r3, r3, #28
 8006972:	4929      	ldr	r1, [pc, #164]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006974:	4313      	orrs	r3, r2
 8006976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0308 	and.w	r3, r3, #8
 8006982:	2b00      	cmp	r3, #0
 8006984:	d028      	beq.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006986:	4b24      	ldr	r3, [pc, #144]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800698c:	0e1b      	lsrs	r3, r3, #24
 800698e:	f003 030f 	and.w	r3, r3, #15
 8006992:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006994:	4b20      	ldr	r3, [pc, #128]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800699a:	0c1b      	lsrs	r3, r3, #16
 800699c:	f003 0303 	and.w	r3, r3, #3
 80069a0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	019a      	lsls	r2, r3, #6
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	041b      	lsls	r3, r3, #16
 80069ac:	431a      	orrs	r2, r3
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	061b      	lsls	r3, r3, #24
 80069b2:	431a      	orrs	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	69db      	ldr	r3, [r3, #28]
 80069b8:	071b      	lsls	r3, r3, #28
 80069ba:	4917      	ldr	r1, [pc, #92]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80069bc:	4313      	orrs	r3, r2
 80069be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80069c2:	4b15      	ldr	r3, [pc, #84]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80069c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d0:	4911      	ldr	r1, [pc, #68]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80069d2:	4313      	orrs	r3, r2
 80069d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80069d8:	4b0f      	ldr	r3, [pc, #60]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a0e      	ldr	r2, [pc, #56]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80069de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069e4:	f7fd fe4e 	bl	8004684 <HAL_GetTick>
 80069e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80069ea:	e008      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80069ec:	f7fd fe4a 	bl	8004684 <HAL_GetTick>
 80069f0:	4602      	mov	r2, r0
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	2b64      	cmp	r3, #100	; 0x64
 80069f8:	d901      	bls.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e007      	b.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80069fe:	4b06      	ldr	r3, [pc, #24]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a0a:	d1ef      	bne.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3720      	adds	r7, #32
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	40023800 	.word	0x40023800

08006a1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d101      	bne.n	8006a2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e049      	b.n	8006ac2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d106      	bne.n	8006a48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f7fd fa50 	bl	8003ee8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2202      	movs	r2, #2
 8006a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	3304      	adds	r3, #4
 8006a58:	4619      	mov	r1, r3
 8006a5a:	4610      	mov	r0, r2
 8006a5c:	f000 fe5a 	bl	8007714 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3708      	adds	r7, #8
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
	...

08006acc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b085      	sub	sp, #20
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d001      	beq.n	8006ae4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e054      	b.n	8006b8e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68da      	ldr	r2, [r3, #12]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f042 0201 	orr.w	r2, r2, #1
 8006afa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a26      	ldr	r2, [pc, #152]	; (8006b9c <HAL_TIM_Base_Start_IT+0xd0>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d022      	beq.n	8006b4c <HAL_TIM_Base_Start_IT+0x80>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b0e:	d01d      	beq.n	8006b4c <HAL_TIM_Base_Start_IT+0x80>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a22      	ldr	r2, [pc, #136]	; (8006ba0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d018      	beq.n	8006b4c <HAL_TIM_Base_Start_IT+0x80>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a21      	ldr	r2, [pc, #132]	; (8006ba4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d013      	beq.n	8006b4c <HAL_TIM_Base_Start_IT+0x80>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a1f      	ldr	r2, [pc, #124]	; (8006ba8 <HAL_TIM_Base_Start_IT+0xdc>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d00e      	beq.n	8006b4c <HAL_TIM_Base_Start_IT+0x80>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a1e      	ldr	r2, [pc, #120]	; (8006bac <HAL_TIM_Base_Start_IT+0xe0>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d009      	beq.n	8006b4c <HAL_TIM_Base_Start_IT+0x80>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a1c      	ldr	r2, [pc, #112]	; (8006bb0 <HAL_TIM_Base_Start_IT+0xe4>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d004      	beq.n	8006b4c <HAL_TIM_Base_Start_IT+0x80>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a1b      	ldr	r2, [pc, #108]	; (8006bb4 <HAL_TIM_Base_Start_IT+0xe8>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d115      	bne.n	8006b78 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	689a      	ldr	r2, [r3, #8]
 8006b52:	4b19      	ldr	r3, [pc, #100]	; (8006bb8 <HAL_TIM_Base_Start_IT+0xec>)
 8006b54:	4013      	ands	r3, r2
 8006b56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2b06      	cmp	r3, #6
 8006b5c:	d015      	beq.n	8006b8a <HAL_TIM_Base_Start_IT+0xbe>
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b64:	d011      	beq.n	8006b8a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f042 0201 	orr.w	r2, r2, #1
 8006b74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b76:	e008      	b.n	8006b8a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f042 0201 	orr.w	r2, r2, #1
 8006b86:	601a      	str	r2, [r3, #0]
 8006b88:	e000      	b.n	8006b8c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3714      	adds	r7, #20
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	40010000 	.word	0x40010000
 8006ba0:	40000400 	.word	0x40000400
 8006ba4:	40000800 	.word	0x40000800
 8006ba8:	40000c00 	.word	0x40000c00
 8006bac:	40010400 	.word	0x40010400
 8006bb0:	40014000 	.word	0x40014000
 8006bb4:	40001800 	.word	0x40001800
 8006bb8:	00010007 	.word	0x00010007

08006bbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d101      	bne.n	8006bce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e049      	b.n	8006c62 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d106      	bne.n	8006be8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f7fd fae0 	bl	80041a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2202      	movs	r2, #2
 8006bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	3304      	adds	r3, #4
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	4610      	mov	r0, r2
 8006bfc:	f000 fd8a 	bl	8007714 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3708      	adds	r7, #8
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
	...

08006c6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d109      	bne.n	8006c90 <HAL_TIM_PWM_Start+0x24>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	bf14      	ite	ne
 8006c88:	2301      	movne	r3, #1
 8006c8a:	2300      	moveq	r3, #0
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	e03c      	b.n	8006d0a <HAL_TIM_PWM_Start+0x9e>
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	2b04      	cmp	r3, #4
 8006c94:	d109      	bne.n	8006caa <HAL_TIM_PWM_Start+0x3e>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	bf14      	ite	ne
 8006ca2:	2301      	movne	r3, #1
 8006ca4:	2300      	moveq	r3, #0
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	e02f      	b.n	8006d0a <HAL_TIM_PWM_Start+0x9e>
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	2b08      	cmp	r3, #8
 8006cae:	d109      	bne.n	8006cc4 <HAL_TIM_PWM_Start+0x58>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	bf14      	ite	ne
 8006cbc:	2301      	movne	r3, #1
 8006cbe:	2300      	moveq	r3, #0
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	e022      	b.n	8006d0a <HAL_TIM_PWM_Start+0x9e>
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	2b0c      	cmp	r3, #12
 8006cc8:	d109      	bne.n	8006cde <HAL_TIM_PWM_Start+0x72>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	bf14      	ite	ne
 8006cd6:	2301      	movne	r3, #1
 8006cd8:	2300      	moveq	r3, #0
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	e015      	b.n	8006d0a <HAL_TIM_PWM_Start+0x9e>
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	2b10      	cmp	r3, #16
 8006ce2:	d109      	bne.n	8006cf8 <HAL_TIM_PWM_Start+0x8c>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	bf14      	ite	ne
 8006cf0:	2301      	movne	r3, #1
 8006cf2:	2300      	moveq	r3, #0
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	e008      	b.n	8006d0a <HAL_TIM_PWM_Start+0x9e>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	bf14      	ite	ne
 8006d04:	2301      	movne	r3, #1
 8006d06:	2300      	moveq	r3, #0
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d001      	beq.n	8006d12 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e092      	b.n	8006e38 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d104      	bne.n	8006d22 <HAL_TIM_PWM_Start+0xb6>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2202      	movs	r2, #2
 8006d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d20:	e023      	b.n	8006d6a <HAL_TIM_PWM_Start+0xfe>
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	2b04      	cmp	r3, #4
 8006d26:	d104      	bne.n	8006d32 <HAL_TIM_PWM_Start+0xc6>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2202      	movs	r2, #2
 8006d2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d30:	e01b      	b.n	8006d6a <HAL_TIM_PWM_Start+0xfe>
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	2b08      	cmp	r3, #8
 8006d36:	d104      	bne.n	8006d42 <HAL_TIM_PWM_Start+0xd6>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2202      	movs	r2, #2
 8006d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d40:	e013      	b.n	8006d6a <HAL_TIM_PWM_Start+0xfe>
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	2b0c      	cmp	r3, #12
 8006d46:	d104      	bne.n	8006d52 <HAL_TIM_PWM_Start+0xe6>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2202      	movs	r2, #2
 8006d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d50:	e00b      	b.n	8006d6a <HAL_TIM_PWM_Start+0xfe>
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	2b10      	cmp	r3, #16
 8006d56:	d104      	bne.n	8006d62 <HAL_TIM_PWM_Start+0xf6>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2202      	movs	r2, #2
 8006d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d60:	e003      	b.n	8006d6a <HAL_TIM_PWM_Start+0xfe>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2202      	movs	r2, #2
 8006d66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	6839      	ldr	r1, [r7, #0]
 8006d72:	4618      	mov	r0, r3
 8006d74:	f001 f866 	bl	8007e44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a30      	ldr	r2, [pc, #192]	; (8006e40 <HAL_TIM_PWM_Start+0x1d4>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d004      	beq.n	8006d8c <HAL_TIM_PWM_Start+0x120>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a2f      	ldr	r2, [pc, #188]	; (8006e44 <HAL_TIM_PWM_Start+0x1d8>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d101      	bne.n	8006d90 <HAL_TIM_PWM_Start+0x124>
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e000      	b.n	8006d92 <HAL_TIM_PWM_Start+0x126>
 8006d90:	2300      	movs	r3, #0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d007      	beq.n	8006da6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006da4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a25      	ldr	r2, [pc, #148]	; (8006e40 <HAL_TIM_PWM_Start+0x1d4>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d022      	beq.n	8006df6 <HAL_TIM_PWM_Start+0x18a>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006db8:	d01d      	beq.n	8006df6 <HAL_TIM_PWM_Start+0x18a>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a22      	ldr	r2, [pc, #136]	; (8006e48 <HAL_TIM_PWM_Start+0x1dc>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d018      	beq.n	8006df6 <HAL_TIM_PWM_Start+0x18a>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a20      	ldr	r2, [pc, #128]	; (8006e4c <HAL_TIM_PWM_Start+0x1e0>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d013      	beq.n	8006df6 <HAL_TIM_PWM_Start+0x18a>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a1f      	ldr	r2, [pc, #124]	; (8006e50 <HAL_TIM_PWM_Start+0x1e4>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d00e      	beq.n	8006df6 <HAL_TIM_PWM_Start+0x18a>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a19      	ldr	r2, [pc, #100]	; (8006e44 <HAL_TIM_PWM_Start+0x1d8>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d009      	beq.n	8006df6 <HAL_TIM_PWM_Start+0x18a>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a1b      	ldr	r2, [pc, #108]	; (8006e54 <HAL_TIM_PWM_Start+0x1e8>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d004      	beq.n	8006df6 <HAL_TIM_PWM_Start+0x18a>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a19      	ldr	r2, [pc, #100]	; (8006e58 <HAL_TIM_PWM_Start+0x1ec>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d115      	bne.n	8006e22 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	689a      	ldr	r2, [r3, #8]
 8006dfc:	4b17      	ldr	r3, [pc, #92]	; (8006e5c <HAL_TIM_PWM_Start+0x1f0>)
 8006dfe:	4013      	ands	r3, r2
 8006e00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2b06      	cmp	r3, #6
 8006e06:	d015      	beq.n	8006e34 <HAL_TIM_PWM_Start+0x1c8>
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e0e:	d011      	beq.n	8006e34 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f042 0201 	orr.w	r2, r2, #1
 8006e1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e20:	e008      	b.n	8006e34 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f042 0201 	orr.w	r2, r2, #1
 8006e30:	601a      	str	r2, [r3, #0]
 8006e32:	e000      	b.n	8006e36 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e34:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3710      	adds	r7, #16
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	40010000 	.word	0x40010000
 8006e44:	40010400 	.word	0x40010400
 8006e48:	40000400 	.word	0x40000400
 8006e4c:	40000800 	.word	0x40000800
 8006e50:	40000c00 	.word	0x40000c00
 8006e54:	40014000 	.word	0x40014000
 8006e58:	40001800 	.word	0x40001800
 8006e5c:	00010007 	.word	0x00010007

08006e60 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b086      	sub	sp, #24
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d101      	bne.n	8006e74 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	e08f      	b.n	8006f94 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d106      	bne.n	8006e8e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f7fd f84d 	bl	8003f28 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2202      	movs	r2, #2
 8006e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	6899      	ldr	r1, [r3, #8]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	4b3e      	ldr	r3, [pc, #248]	; (8006f9c <HAL_TIM_Encoder_Init+0x13c>)
 8006ea2:	400b      	ands	r3, r1
 8006ea4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	3304      	adds	r3, #4
 8006eae:	4619      	mov	r1, r3
 8006eb0:	4610      	mov	r0, r2
 8006eb2:	f000 fc2f 	bl	8007714 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	699b      	ldr	r3, [r3, #24]
 8006ec4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	6a1b      	ldr	r3, [r3, #32]
 8006ecc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006ed8:	693a      	ldr	r2, [r7, #16]
 8006eda:	4b31      	ldr	r3, [pc, #196]	; (8006fa0 <HAL_TIM_Encoder_Init+0x140>)
 8006edc:	4013      	ands	r3, r2
 8006ede:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	689a      	ldr	r2, [r3, #8]
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	699b      	ldr	r3, [r3, #24]
 8006ee8:	021b      	lsls	r3, r3, #8
 8006eea:	4313      	orrs	r3, r2
 8006eec:	693a      	ldr	r2, [r7, #16]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006ef2:	693a      	ldr	r2, [r7, #16]
 8006ef4:	4b2b      	ldr	r3, [pc, #172]	; (8006fa4 <HAL_TIM_Encoder_Init+0x144>)
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006efa:	693a      	ldr	r2, [r7, #16]
 8006efc:	4b2a      	ldr	r3, [pc, #168]	; (8006fa8 <HAL_TIM_Encoder_Init+0x148>)
 8006efe:	4013      	ands	r3, r2
 8006f00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	68da      	ldr	r2, [r3, #12]
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	69db      	ldr	r3, [r3, #28]
 8006f0a:	021b      	lsls	r3, r3, #8
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	693a      	ldr	r2, [r7, #16]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	011a      	lsls	r2, r3, #4
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	6a1b      	ldr	r3, [r3, #32]
 8006f1e:	031b      	lsls	r3, r3, #12
 8006f20:	4313      	orrs	r3, r2
 8006f22:	693a      	ldr	r2, [r7, #16]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006f2e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006f36:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	685a      	ldr	r2, [r3, #4]
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	695b      	ldr	r3, [r3, #20]
 8006f40:	011b      	lsls	r3, r3, #4
 8006f42:	4313      	orrs	r3, r2
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	697a      	ldr	r2, [r7, #20]
 8006f50:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	693a      	ldr	r2, [r7, #16]
 8006f58:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2201      	movs	r2, #1
 8006f66:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2201      	movs	r2, #1
 8006f76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3718      	adds	r7, #24
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	fffebff8 	.word	0xfffebff8
 8006fa0:	fffffcfc 	.word	0xfffffcfc
 8006fa4:	fffff3f3 	.word	0xfffff3f3
 8006fa8:	ffff0f0f 	.word	0xffff0f0f

08006fac <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fbc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006fc4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fcc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fd4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d110      	bne.n	8006ffe <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fdc:	7bfb      	ldrb	r3, [r7, #15]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d102      	bne.n	8006fe8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006fe2:	7b7b      	ldrb	r3, [r7, #13]
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d001      	beq.n	8006fec <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e069      	b.n	80070c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2202      	movs	r2, #2
 8006ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2202      	movs	r2, #2
 8006ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ffc:	e031      	b.n	8007062 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	2b04      	cmp	r3, #4
 8007002:	d110      	bne.n	8007026 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007004:	7bbb      	ldrb	r3, [r7, #14]
 8007006:	2b01      	cmp	r3, #1
 8007008:	d102      	bne.n	8007010 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800700a:	7b3b      	ldrb	r3, [r7, #12]
 800700c:	2b01      	cmp	r3, #1
 800700e:	d001      	beq.n	8007014 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	e055      	b.n	80070c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2202      	movs	r2, #2
 8007018:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2202      	movs	r2, #2
 8007020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007024:	e01d      	b.n	8007062 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007026:	7bfb      	ldrb	r3, [r7, #15]
 8007028:	2b01      	cmp	r3, #1
 800702a:	d108      	bne.n	800703e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800702c:	7bbb      	ldrb	r3, [r7, #14]
 800702e:	2b01      	cmp	r3, #1
 8007030:	d105      	bne.n	800703e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007032:	7b7b      	ldrb	r3, [r7, #13]
 8007034:	2b01      	cmp	r3, #1
 8007036:	d102      	bne.n	800703e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007038:	7b3b      	ldrb	r3, [r7, #12]
 800703a:	2b01      	cmp	r3, #1
 800703c:	d001      	beq.n	8007042 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	e03e      	b.n	80070c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2202      	movs	r2, #2
 8007046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2202      	movs	r2, #2
 800704e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2202      	movs	r2, #2
 8007056:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2202      	movs	r2, #2
 800705e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d003      	beq.n	8007070 <HAL_TIM_Encoder_Start+0xc4>
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	2b04      	cmp	r3, #4
 800706c:	d008      	beq.n	8007080 <HAL_TIM_Encoder_Start+0xd4>
 800706e:	e00f      	b.n	8007090 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2201      	movs	r2, #1
 8007076:	2100      	movs	r1, #0
 8007078:	4618      	mov	r0, r3
 800707a:	f000 fee3 	bl	8007e44 <TIM_CCxChannelCmd>
      break;
 800707e:	e016      	b.n	80070ae <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2201      	movs	r2, #1
 8007086:	2104      	movs	r1, #4
 8007088:	4618      	mov	r0, r3
 800708a:	f000 fedb 	bl	8007e44 <TIM_CCxChannelCmd>
      break;
 800708e:	e00e      	b.n	80070ae <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2201      	movs	r2, #1
 8007096:	2100      	movs	r1, #0
 8007098:	4618      	mov	r0, r3
 800709a:	f000 fed3 	bl	8007e44 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2201      	movs	r2, #1
 80070a4:	2104      	movs	r1, #4
 80070a6:	4618      	mov	r0, r3
 80070a8:	f000 fecc 	bl	8007e44 <TIM_CCxChannelCmd>
      break;
 80070ac:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f042 0201 	orr.w	r2, r2, #1
 80070bc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	f003 0302 	and.w	r3, r3, #2
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d122      	bne.n	8007124 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	f003 0302 	and.w	r3, r3, #2
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	d11b      	bne.n	8007124 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f06f 0202 	mvn.w	r2, #2
 80070f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2201      	movs	r2, #1
 80070fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	f003 0303 	and.w	r3, r3, #3
 8007106:	2b00      	cmp	r3, #0
 8007108:	d003      	beq.n	8007112 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 fae4 	bl	80076d8 <HAL_TIM_IC_CaptureCallback>
 8007110:	e005      	b.n	800711e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 fad6 	bl	80076c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 fae7 	bl	80076ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	f003 0304 	and.w	r3, r3, #4
 800712e:	2b04      	cmp	r3, #4
 8007130:	d122      	bne.n	8007178 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	f003 0304 	and.w	r3, r3, #4
 800713c:	2b04      	cmp	r3, #4
 800713e:	d11b      	bne.n	8007178 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f06f 0204 	mvn.w	r2, #4
 8007148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2202      	movs	r2, #2
 800714e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	699b      	ldr	r3, [r3, #24]
 8007156:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800715a:	2b00      	cmp	r3, #0
 800715c:	d003      	beq.n	8007166 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 faba 	bl	80076d8 <HAL_TIM_IC_CaptureCallback>
 8007164:	e005      	b.n	8007172 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 faac 	bl	80076c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 fabd 	bl	80076ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	f003 0308 	and.w	r3, r3, #8
 8007182:	2b08      	cmp	r3, #8
 8007184:	d122      	bne.n	80071cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	f003 0308 	and.w	r3, r3, #8
 8007190:	2b08      	cmp	r3, #8
 8007192:	d11b      	bne.n	80071cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f06f 0208 	mvn.w	r2, #8
 800719c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2204      	movs	r2, #4
 80071a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	69db      	ldr	r3, [r3, #28]
 80071aa:	f003 0303 	and.w	r3, r3, #3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d003      	beq.n	80071ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 fa90 	bl	80076d8 <HAL_TIM_IC_CaptureCallback>
 80071b8:	e005      	b.n	80071c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 fa82 	bl	80076c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 fa93 	bl	80076ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	f003 0310 	and.w	r3, r3, #16
 80071d6:	2b10      	cmp	r3, #16
 80071d8:	d122      	bne.n	8007220 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	f003 0310 	and.w	r3, r3, #16
 80071e4:	2b10      	cmp	r3, #16
 80071e6:	d11b      	bne.n	8007220 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f06f 0210 	mvn.w	r2, #16
 80071f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2208      	movs	r2, #8
 80071f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	69db      	ldr	r3, [r3, #28]
 80071fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007202:	2b00      	cmp	r3, #0
 8007204:	d003      	beq.n	800720e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 fa66 	bl	80076d8 <HAL_TIM_IC_CaptureCallback>
 800720c:	e005      	b.n	800721a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 fa58 	bl	80076c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 fa69 	bl	80076ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	f003 0301 	and.w	r3, r3, #1
 800722a:	2b01      	cmp	r3, #1
 800722c:	d10e      	bne.n	800724c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	f003 0301 	and.w	r3, r3, #1
 8007238:	2b01      	cmp	r3, #1
 800723a:	d107      	bne.n	800724c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f06f 0201 	mvn.w	r2, #1
 8007244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f7fc f84a 	bl	80032e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007256:	2b80      	cmp	r3, #128	; 0x80
 8007258:	d10e      	bne.n	8007278 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007264:	2b80      	cmp	r3, #128	; 0x80
 8007266:	d107      	bne.n	8007278 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 ff22 	bl	80080bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007286:	d10e      	bne.n	80072a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007292:	2b80      	cmp	r3, #128	; 0x80
 8007294:	d107      	bne.n	80072a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800729e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 ff15 	bl	80080d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b0:	2b40      	cmp	r3, #64	; 0x40
 80072b2:	d10e      	bne.n	80072d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072be:	2b40      	cmp	r3, #64	; 0x40
 80072c0:	d107      	bne.n	80072d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80072ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 fa17 	bl	8007700 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	f003 0320 	and.w	r3, r3, #32
 80072dc:	2b20      	cmp	r3, #32
 80072de:	d10e      	bne.n	80072fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	f003 0320 	and.w	r3, r3, #32
 80072ea:	2b20      	cmp	r3, #32
 80072ec:	d107      	bne.n	80072fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f06f 0220 	mvn.w	r2, #32
 80072f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 fed5 	bl	80080a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072fe:	bf00      	nop
 8007300:	3708      	adds	r7, #8
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
	...

08007308 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b086      	sub	sp, #24
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007314:	2300      	movs	r3, #0
 8007316:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800731e:	2b01      	cmp	r3, #1
 8007320:	d101      	bne.n	8007326 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007322:	2302      	movs	r3, #2
 8007324:	e0ff      	b.n	8007526 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2201      	movs	r2, #1
 800732a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2b14      	cmp	r3, #20
 8007332:	f200 80f0 	bhi.w	8007516 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007336:	a201      	add	r2, pc, #4	; (adr r2, 800733c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800733c:	08007391 	.word	0x08007391
 8007340:	08007517 	.word	0x08007517
 8007344:	08007517 	.word	0x08007517
 8007348:	08007517 	.word	0x08007517
 800734c:	080073d1 	.word	0x080073d1
 8007350:	08007517 	.word	0x08007517
 8007354:	08007517 	.word	0x08007517
 8007358:	08007517 	.word	0x08007517
 800735c:	08007413 	.word	0x08007413
 8007360:	08007517 	.word	0x08007517
 8007364:	08007517 	.word	0x08007517
 8007368:	08007517 	.word	0x08007517
 800736c:	08007453 	.word	0x08007453
 8007370:	08007517 	.word	0x08007517
 8007374:	08007517 	.word	0x08007517
 8007378:	08007517 	.word	0x08007517
 800737c:	08007495 	.word	0x08007495
 8007380:	08007517 	.word	0x08007517
 8007384:	08007517 	.word	0x08007517
 8007388:	08007517 	.word	0x08007517
 800738c:	080074d5 	.word	0x080074d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68b9      	ldr	r1, [r7, #8]
 8007396:	4618      	mov	r0, r3
 8007398:	f000 fa5c 	bl	8007854 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	699a      	ldr	r2, [r3, #24]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f042 0208 	orr.w	r2, r2, #8
 80073aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	699a      	ldr	r2, [r3, #24]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f022 0204 	bic.w	r2, r2, #4
 80073ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	6999      	ldr	r1, [r3, #24]
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	691a      	ldr	r2, [r3, #16]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	430a      	orrs	r2, r1
 80073cc:	619a      	str	r2, [r3, #24]
      break;
 80073ce:	e0a5      	b.n	800751c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68b9      	ldr	r1, [r7, #8]
 80073d6:	4618      	mov	r0, r3
 80073d8:	f000 faae 	bl	8007938 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	699a      	ldr	r2, [r3, #24]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	699a      	ldr	r2, [r3, #24]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	6999      	ldr	r1, [r3, #24]
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	021a      	lsls	r2, r3, #8
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	430a      	orrs	r2, r1
 800740e:	619a      	str	r2, [r3, #24]
      break;
 8007410:	e084      	b.n	800751c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68b9      	ldr	r1, [r7, #8]
 8007418:	4618      	mov	r0, r3
 800741a:	f000 fb05 	bl	8007a28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	69da      	ldr	r2, [r3, #28]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f042 0208 	orr.w	r2, r2, #8
 800742c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	69da      	ldr	r2, [r3, #28]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f022 0204 	bic.w	r2, r2, #4
 800743c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	69d9      	ldr	r1, [r3, #28]
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	691a      	ldr	r2, [r3, #16]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	430a      	orrs	r2, r1
 800744e:	61da      	str	r2, [r3, #28]
      break;
 8007450:	e064      	b.n	800751c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	68b9      	ldr	r1, [r7, #8]
 8007458:	4618      	mov	r0, r3
 800745a:	f000 fb5b 	bl	8007b14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	69da      	ldr	r2, [r3, #28]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800746c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	69da      	ldr	r2, [r3, #28]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800747c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	69d9      	ldr	r1, [r3, #28]
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	021a      	lsls	r2, r3, #8
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	430a      	orrs	r2, r1
 8007490:	61da      	str	r2, [r3, #28]
      break;
 8007492:	e043      	b.n	800751c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68b9      	ldr	r1, [r7, #8]
 800749a:	4618      	mov	r0, r3
 800749c:	f000 fb92 	bl	8007bc4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f042 0208 	orr.w	r2, r2, #8
 80074ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f022 0204 	bic.w	r2, r2, #4
 80074be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	691a      	ldr	r2, [r3, #16]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	430a      	orrs	r2, r1
 80074d0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80074d2:	e023      	b.n	800751c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	68b9      	ldr	r1, [r7, #8]
 80074da:	4618      	mov	r0, r3
 80074dc:	f000 fbc4 	bl	8007c68 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	021a      	lsls	r2, r3, #8
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	430a      	orrs	r2, r1
 8007512:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007514:	e002      	b.n	800751c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	75fb      	strb	r3, [r7, #23]
      break;
 800751a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007524:	7dfb      	ldrb	r3, [r7, #23]
}
 8007526:	4618      	mov	r0, r3
 8007528:	3718      	adds	r7, #24
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop

08007530 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800753a:	2300      	movs	r3, #0
 800753c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007544:	2b01      	cmp	r3, #1
 8007546:	d101      	bne.n	800754c <HAL_TIM_ConfigClockSource+0x1c>
 8007548:	2302      	movs	r3, #2
 800754a:	e0b4      	b.n	80076b6 <HAL_TIM_ConfigClockSource+0x186>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2202      	movs	r2, #2
 8007558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007564:	68ba      	ldr	r2, [r7, #8]
 8007566:	4b56      	ldr	r3, [pc, #344]	; (80076c0 <HAL_TIM_ConfigClockSource+0x190>)
 8007568:	4013      	ands	r3, r2
 800756a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007572:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68ba      	ldr	r2, [r7, #8]
 800757a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007584:	d03e      	beq.n	8007604 <HAL_TIM_ConfigClockSource+0xd4>
 8007586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800758a:	f200 8087 	bhi.w	800769c <HAL_TIM_ConfigClockSource+0x16c>
 800758e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007592:	f000 8086 	beq.w	80076a2 <HAL_TIM_ConfigClockSource+0x172>
 8007596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800759a:	d87f      	bhi.n	800769c <HAL_TIM_ConfigClockSource+0x16c>
 800759c:	2b70      	cmp	r3, #112	; 0x70
 800759e:	d01a      	beq.n	80075d6 <HAL_TIM_ConfigClockSource+0xa6>
 80075a0:	2b70      	cmp	r3, #112	; 0x70
 80075a2:	d87b      	bhi.n	800769c <HAL_TIM_ConfigClockSource+0x16c>
 80075a4:	2b60      	cmp	r3, #96	; 0x60
 80075a6:	d050      	beq.n	800764a <HAL_TIM_ConfigClockSource+0x11a>
 80075a8:	2b60      	cmp	r3, #96	; 0x60
 80075aa:	d877      	bhi.n	800769c <HAL_TIM_ConfigClockSource+0x16c>
 80075ac:	2b50      	cmp	r3, #80	; 0x50
 80075ae:	d03c      	beq.n	800762a <HAL_TIM_ConfigClockSource+0xfa>
 80075b0:	2b50      	cmp	r3, #80	; 0x50
 80075b2:	d873      	bhi.n	800769c <HAL_TIM_ConfigClockSource+0x16c>
 80075b4:	2b40      	cmp	r3, #64	; 0x40
 80075b6:	d058      	beq.n	800766a <HAL_TIM_ConfigClockSource+0x13a>
 80075b8:	2b40      	cmp	r3, #64	; 0x40
 80075ba:	d86f      	bhi.n	800769c <HAL_TIM_ConfigClockSource+0x16c>
 80075bc:	2b30      	cmp	r3, #48	; 0x30
 80075be:	d064      	beq.n	800768a <HAL_TIM_ConfigClockSource+0x15a>
 80075c0:	2b30      	cmp	r3, #48	; 0x30
 80075c2:	d86b      	bhi.n	800769c <HAL_TIM_ConfigClockSource+0x16c>
 80075c4:	2b20      	cmp	r3, #32
 80075c6:	d060      	beq.n	800768a <HAL_TIM_ConfigClockSource+0x15a>
 80075c8:	2b20      	cmp	r3, #32
 80075ca:	d867      	bhi.n	800769c <HAL_TIM_ConfigClockSource+0x16c>
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d05c      	beq.n	800768a <HAL_TIM_ConfigClockSource+0x15a>
 80075d0:	2b10      	cmp	r3, #16
 80075d2:	d05a      	beq.n	800768a <HAL_TIM_ConfigClockSource+0x15a>
 80075d4:	e062      	b.n	800769c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80075e6:	f000 fc0d 	bl	8007e04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80075f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	68ba      	ldr	r2, [r7, #8]
 8007600:	609a      	str	r2, [r3, #8]
      break;
 8007602:	e04f      	b.n	80076a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007614:	f000 fbf6 	bl	8007e04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	689a      	ldr	r2, [r3, #8]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007626:	609a      	str	r2, [r3, #8]
      break;
 8007628:	e03c      	b.n	80076a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007636:	461a      	mov	r2, r3
 8007638:	f000 fb6a 	bl	8007d10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2150      	movs	r1, #80	; 0x50
 8007642:	4618      	mov	r0, r3
 8007644:	f000 fbc3 	bl	8007dce <TIM_ITRx_SetConfig>
      break;
 8007648:	e02c      	b.n	80076a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007656:	461a      	mov	r2, r3
 8007658:	f000 fb89 	bl	8007d6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2160      	movs	r1, #96	; 0x60
 8007662:	4618      	mov	r0, r3
 8007664:	f000 fbb3 	bl	8007dce <TIM_ITRx_SetConfig>
      break;
 8007668:	e01c      	b.n	80076a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007676:	461a      	mov	r2, r3
 8007678:	f000 fb4a 	bl	8007d10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2140      	movs	r1, #64	; 0x40
 8007682:	4618      	mov	r0, r3
 8007684:	f000 fba3 	bl	8007dce <TIM_ITRx_SetConfig>
      break;
 8007688:	e00c      	b.n	80076a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4619      	mov	r1, r3
 8007694:	4610      	mov	r0, r2
 8007696:	f000 fb9a 	bl	8007dce <TIM_ITRx_SetConfig>
      break;
 800769a:	e003      	b.n	80076a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	73fb      	strb	r3, [r7, #15]
      break;
 80076a0:	e000      	b.n	80076a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80076a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80076b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	fffeff88 	.word	0xfffeff88

080076c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076cc:	bf00      	nop
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80076e0:	bf00      	nop
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076f4:	bf00      	nop
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007708:	bf00      	nop
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007714:	b480      	push	{r7}
 8007716:	b085      	sub	sp, #20
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a40      	ldr	r2, [pc, #256]	; (8007828 <TIM_Base_SetConfig+0x114>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d013      	beq.n	8007754 <TIM_Base_SetConfig+0x40>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007732:	d00f      	beq.n	8007754 <TIM_Base_SetConfig+0x40>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a3d      	ldr	r2, [pc, #244]	; (800782c <TIM_Base_SetConfig+0x118>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d00b      	beq.n	8007754 <TIM_Base_SetConfig+0x40>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4a3c      	ldr	r2, [pc, #240]	; (8007830 <TIM_Base_SetConfig+0x11c>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d007      	beq.n	8007754 <TIM_Base_SetConfig+0x40>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4a3b      	ldr	r2, [pc, #236]	; (8007834 <TIM_Base_SetConfig+0x120>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d003      	beq.n	8007754 <TIM_Base_SetConfig+0x40>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	4a3a      	ldr	r2, [pc, #232]	; (8007838 <TIM_Base_SetConfig+0x124>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d108      	bne.n	8007766 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800775a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	4313      	orrs	r3, r2
 8007764:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4a2f      	ldr	r2, [pc, #188]	; (8007828 <TIM_Base_SetConfig+0x114>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d02b      	beq.n	80077c6 <TIM_Base_SetConfig+0xb2>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007774:	d027      	beq.n	80077c6 <TIM_Base_SetConfig+0xb2>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4a2c      	ldr	r2, [pc, #176]	; (800782c <TIM_Base_SetConfig+0x118>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d023      	beq.n	80077c6 <TIM_Base_SetConfig+0xb2>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4a2b      	ldr	r2, [pc, #172]	; (8007830 <TIM_Base_SetConfig+0x11c>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d01f      	beq.n	80077c6 <TIM_Base_SetConfig+0xb2>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4a2a      	ldr	r2, [pc, #168]	; (8007834 <TIM_Base_SetConfig+0x120>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d01b      	beq.n	80077c6 <TIM_Base_SetConfig+0xb2>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4a29      	ldr	r2, [pc, #164]	; (8007838 <TIM_Base_SetConfig+0x124>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d017      	beq.n	80077c6 <TIM_Base_SetConfig+0xb2>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4a28      	ldr	r2, [pc, #160]	; (800783c <TIM_Base_SetConfig+0x128>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d013      	beq.n	80077c6 <TIM_Base_SetConfig+0xb2>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a27      	ldr	r2, [pc, #156]	; (8007840 <TIM_Base_SetConfig+0x12c>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d00f      	beq.n	80077c6 <TIM_Base_SetConfig+0xb2>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a26      	ldr	r2, [pc, #152]	; (8007844 <TIM_Base_SetConfig+0x130>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d00b      	beq.n	80077c6 <TIM_Base_SetConfig+0xb2>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a25      	ldr	r2, [pc, #148]	; (8007848 <TIM_Base_SetConfig+0x134>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d007      	beq.n	80077c6 <TIM_Base_SetConfig+0xb2>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4a24      	ldr	r2, [pc, #144]	; (800784c <TIM_Base_SetConfig+0x138>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d003      	beq.n	80077c6 <TIM_Base_SetConfig+0xb2>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4a23      	ldr	r2, [pc, #140]	; (8007850 <TIM_Base_SetConfig+0x13c>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d108      	bne.n	80077d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	695b      	ldr	r3, [r3, #20]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	689a      	ldr	r2, [r3, #8]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4a0a      	ldr	r2, [pc, #40]	; (8007828 <TIM_Base_SetConfig+0x114>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d003      	beq.n	800780c <TIM_Base_SetConfig+0xf8>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	4a0c      	ldr	r2, [pc, #48]	; (8007838 <TIM_Base_SetConfig+0x124>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d103      	bne.n	8007814 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	691a      	ldr	r2, [r3, #16]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	615a      	str	r2, [r3, #20]
}
 800781a:	bf00      	nop
 800781c:	3714      	adds	r7, #20
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr
 8007826:	bf00      	nop
 8007828:	40010000 	.word	0x40010000
 800782c:	40000400 	.word	0x40000400
 8007830:	40000800 	.word	0x40000800
 8007834:	40000c00 	.word	0x40000c00
 8007838:	40010400 	.word	0x40010400
 800783c:	40014000 	.word	0x40014000
 8007840:	40014400 	.word	0x40014400
 8007844:	40014800 	.word	0x40014800
 8007848:	40001800 	.word	0x40001800
 800784c:	40001c00 	.word	0x40001c00
 8007850:	40002000 	.word	0x40002000

08007854 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007854:	b480      	push	{r7}
 8007856:	b087      	sub	sp, #28
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a1b      	ldr	r3, [r3, #32]
 8007862:	f023 0201 	bic.w	r2, r3, #1
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	699b      	ldr	r3, [r3, #24]
 800787a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800787c:	68fa      	ldr	r2, [r7, #12]
 800787e:	4b2b      	ldr	r3, [pc, #172]	; (800792c <TIM_OC1_SetConfig+0xd8>)
 8007880:	4013      	ands	r3, r2
 8007882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f023 0303 	bic.w	r3, r3, #3
 800788a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	4313      	orrs	r3, r2
 8007894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	f023 0302 	bic.w	r3, r3, #2
 800789c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	697a      	ldr	r2, [r7, #20]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4a21      	ldr	r2, [pc, #132]	; (8007930 <TIM_OC1_SetConfig+0xdc>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d003      	beq.n	80078b8 <TIM_OC1_SetConfig+0x64>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a20      	ldr	r2, [pc, #128]	; (8007934 <TIM_OC1_SetConfig+0xe0>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d10c      	bne.n	80078d2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	f023 0308 	bic.w	r3, r3, #8
 80078be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	697a      	ldr	r2, [r7, #20]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	f023 0304 	bic.w	r3, r3, #4
 80078d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a16      	ldr	r2, [pc, #88]	; (8007930 <TIM_OC1_SetConfig+0xdc>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d003      	beq.n	80078e2 <TIM_OC1_SetConfig+0x8e>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a15      	ldr	r2, [pc, #84]	; (8007934 <TIM_OC1_SetConfig+0xe0>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d111      	bne.n	8007906 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	693a      	ldr	r2, [r7, #16]
 80078f8:	4313      	orrs	r3, r2
 80078fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	699b      	ldr	r3, [r3, #24]
 8007900:	693a      	ldr	r2, [r7, #16]
 8007902:	4313      	orrs	r3, r2
 8007904:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	693a      	ldr	r2, [r7, #16]
 800790a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	685a      	ldr	r2, [r3, #4]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	697a      	ldr	r2, [r7, #20]
 800791e:	621a      	str	r2, [r3, #32]
}
 8007920:	bf00      	nop
 8007922:	371c      	adds	r7, #28
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr
 800792c:	fffeff8f 	.word	0xfffeff8f
 8007930:	40010000 	.word	0x40010000
 8007934:	40010400 	.word	0x40010400

08007938 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007938:	b480      	push	{r7}
 800793a:	b087      	sub	sp, #28
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a1b      	ldr	r3, [r3, #32]
 8007946:	f023 0210 	bic.w	r2, r3, #16
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a1b      	ldr	r3, [r3, #32]
 8007952:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	699b      	ldr	r3, [r3, #24]
 800795e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	4b2e      	ldr	r3, [pc, #184]	; (8007a1c <TIM_OC2_SetConfig+0xe4>)
 8007964:	4013      	ands	r3, r2
 8007966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800796e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	021b      	lsls	r3, r3, #8
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	4313      	orrs	r3, r2
 800797a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	f023 0320 	bic.w	r3, r3, #32
 8007982:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	011b      	lsls	r3, r3, #4
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	4313      	orrs	r3, r2
 800798e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a23      	ldr	r2, [pc, #140]	; (8007a20 <TIM_OC2_SetConfig+0xe8>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d003      	beq.n	80079a0 <TIM_OC2_SetConfig+0x68>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a22      	ldr	r2, [pc, #136]	; (8007a24 <TIM_OC2_SetConfig+0xec>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d10d      	bne.n	80079bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	011b      	lsls	r3, r3, #4
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a18      	ldr	r2, [pc, #96]	; (8007a20 <TIM_OC2_SetConfig+0xe8>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d003      	beq.n	80079cc <TIM_OC2_SetConfig+0x94>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a17      	ldr	r2, [pc, #92]	; (8007a24 <TIM_OC2_SetConfig+0xec>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d113      	bne.n	80079f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	695b      	ldr	r3, [r3, #20]
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	693a      	ldr	r2, [r7, #16]
 80079e4:	4313      	orrs	r3, r2
 80079e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	699b      	ldr	r3, [r3, #24]
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	693a      	ldr	r2, [r7, #16]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	693a      	ldr	r2, [r7, #16]
 80079f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	68fa      	ldr	r2, [r7, #12]
 80079fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	685a      	ldr	r2, [r3, #4]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	697a      	ldr	r2, [r7, #20]
 8007a0c:	621a      	str	r2, [r3, #32]
}
 8007a0e:	bf00      	nop
 8007a10:	371c      	adds	r7, #28
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop
 8007a1c:	feff8fff 	.word	0xfeff8fff
 8007a20:	40010000 	.word	0x40010000
 8007a24:	40010400 	.word	0x40010400

08007a28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b087      	sub	sp, #28
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a1b      	ldr	r3, [r3, #32]
 8007a36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a1b      	ldr	r3, [r3, #32]
 8007a42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	69db      	ldr	r3, [r3, #28]
 8007a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a50:	68fa      	ldr	r2, [r7, #12]
 8007a52:	4b2d      	ldr	r3, [pc, #180]	; (8007b08 <TIM_OC3_SetConfig+0xe0>)
 8007a54:	4013      	ands	r3, r2
 8007a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f023 0303 	bic.w	r3, r3, #3
 8007a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	021b      	lsls	r3, r3, #8
 8007a78:	697a      	ldr	r2, [r7, #20]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a22      	ldr	r2, [pc, #136]	; (8007b0c <TIM_OC3_SetConfig+0xe4>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d003      	beq.n	8007a8e <TIM_OC3_SetConfig+0x66>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a21      	ldr	r2, [pc, #132]	; (8007b10 <TIM_OC3_SetConfig+0xe8>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d10d      	bne.n	8007aaa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	021b      	lsls	r3, r3, #8
 8007a9c:	697a      	ldr	r2, [r7, #20]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007aa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a17      	ldr	r2, [pc, #92]	; (8007b0c <TIM_OC3_SetConfig+0xe4>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d003      	beq.n	8007aba <TIM_OC3_SetConfig+0x92>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a16      	ldr	r2, [pc, #88]	; (8007b10 <TIM_OC3_SetConfig+0xe8>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d113      	bne.n	8007ae2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ac0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	695b      	ldr	r3, [r3, #20]
 8007ace:	011b      	lsls	r3, r3, #4
 8007ad0:	693a      	ldr	r2, [r7, #16]
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	699b      	ldr	r3, [r3, #24]
 8007ada:	011b      	lsls	r3, r3, #4
 8007adc:	693a      	ldr	r2, [r7, #16]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	693a      	ldr	r2, [r7, #16]
 8007ae6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	685a      	ldr	r2, [r3, #4]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	697a      	ldr	r2, [r7, #20]
 8007afa:	621a      	str	r2, [r3, #32]
}
 8007afc:	bf00      	nop
 8007afe:	371c      	adds	r7, #28
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr
 8007b08:	fffeff8f 	.word	0xfffeff8f
 8007b0c:	40010000 	.word	0x40010000
 8007b10:	40010400 	.word	0x40010400

08007b14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b087      	sub	sp, #28
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6a1b      	ldr	r3, [r3, #32]
 8007b22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a1b      	ldr	r3, [r3, #32]
 8007b2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	69db      	ldr	r3, [r3, #28]
 8007b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	4b1e      	ldr	r3, [pc, #120]	; (8007bb8 <TIM_OC4_SetConfig+0xa4>)
 8007b40:	4013      	ands	r3, r2
 8007b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	021b      	lsls	r3, r3, #8
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	031b      	lsls	r3, r3, #12
 8007b66:	693a      	ldr	r2, [r7, #16]
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4a13      	ldr	r2, [pc, #76]	; (8007bbc <TIM_OC4_SetConfig+0xa8>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d003      	beq.n	8007b7c <TIM_OC4_SetConfig+0x68>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a12      	ldr	r2, [pc, #72]	; (8007bc0 <TIM_OC4_SetConfig+0xac>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d109      	bne.n	8007b90 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	695b      	ldr	r3, [r3, #20]
 8007b88:	019b      	lsls	r3, r3, #6
 8007b8a:	697a      	ldr	r2, [r7, #20]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	697a      	ldr	r2, [r7, #20]
 8007b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	68fa      	ldr	r2, [r7, #12]
 8007b9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	685a      	ldr	r2, [r3, #4]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	693a      	ldr	r2, [r7, #16]
 8007ba8:	621a      	str	r2, [r3, #32]
}
 8007baa:	bf00      	nop
 8007bac:	371c      	adds	r7, #28
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop
 8007bb8:	feff8fff 	.word	0xfeff8fff
 8007bbc:	40010000 	.word	0x40010000
 8007bc0:	40010400 	.word	0x40010400

08007bc4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b087      	sub	sp, #28
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a1b      	ldr	r3, [r3, #32]
 8007bd2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a1b      	ldr	r3, [r3, #32]
 8007bde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007bec:	68fa      	ldr	r2, [r7, #12]
 8007bee:	4b1b      	ldr	r3, [pc, #108]	; (8007c5c <TIM_OC5_SetConfig+0x98>)
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007c04:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	041b      	lsls	r3, r3, #16
 8007c0c:	693a      	ldr	r2, [r7, #16]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a12      	ldr	r2, [pc, #72]	; (8007c60 <TIM_OC5_SetConfig+0x9c>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d003      	beq.n	8007c22 <TIM_OC5_SetConfig+0x5e>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a11      	ldr	r2, [pc, #68]	; (8007c64 <TIM_OC5_SetConfig+0xa0>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d109      	bne.n	8007c36 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c28:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	695b      	ldr	r3, [r3, #20]
 8007c2e:	021b      	lsls	r3, r3, #8
 8007c30:	697a      	ldr	r2, [r7, #20]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	697a      	ldr	r2, [r7, #20]
 8007c3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	685a      	ldr	r2, [r3, #4]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	693a      	ldr	r2, [r7, #16]
 8007c4e:	621a      	str	r2, [r3, #32]
}
 8007c50:	bf00      	nop
 8007c52:	371c      	adds	r7, #28
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr
 8007c5c:	fffeff8f 	.word	0xfffeff8f
 8007c60:	40010000 	.word	0x40010000
 8007c64:	40010400 	.word	0x40010400

08007c68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b087      	sub	sp, #28
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a1b      	ldr	r3, [r3, #32]
 8007c76:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a1b      	ldr	r3, [r3, #32]
 8007c82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007c90:	68fa      	ldr	r2, [r7, #12]
 8007c92:	4b1c      	ldr	r3, [pc, #112]	; (8007d04 <TIM_OC6_SetConfig+0x9c>)
 8007c94:	4013      	ands	r3, r2
 8007c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	021b      	lsls	r3, r3, #8
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007caa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	051b      	lsls	r3, r3, #20
 8007cb2:	693a      	ldr	r2, [r7, #16]
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4a13      	ldr	r2, [pc, #76]	; (8007d08 <TIM_OC6_SetConfig+0xa0>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d003      	beq.n	8007cc8 <TIM_OC6_SetConfig+0x60>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4a12      	ldr	r2, [pc, #72]	; (8007d0c <TIM_OC6_SetConfig+0xa4>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d109      	bne.n	8007cdc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007cce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	695b      	ldr	r3, [r3, #20]
 8007cd4:	029b      	lsls	r3, r3, #10
 8007cd6:	697a      	ldr	r2, [r7, #20]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	697a      	ldr	r2, [r7, #20]
 8007ce0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	68fa      	ldr	r2, [r7, #12]
 8007ce6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	685a      	ldr	r2, [r3, #4]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	693a      	ldr	r2, [r7, #16]
 8007cf4:	621a      	str	r2, [r3, #32]
}
 8007cf6:	bf00      	nop
 8007cf8:	371c      	adds	r7, #28
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr
 8007d02:	bf00      	nop
 8007d04:	feff8fff 	.word	0xfeff8fff
 8007d08:	40010000 	.word	0x40010000
 8007d0c:	40010400 	.word	0x40010400

08007d10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b087      	sub	sp, #28
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6a1b      	ldr	r3, [r3, #32]
 8007d20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6a1b      	ldr	r3, [r3, #32]
 8007d26:	f023 0201 	bic.w	r2, r3, #1
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	699b      	ldr	r3, [r3, #24]
 8007d32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	011b      	lsls	r3, r3, #4
 8007d40:	693a      	ldr	r2, [r7, #16]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	f023 030a 	bic.w	r3, r3, #10
 8007d4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d4e:	697a      	ldr	r2, [r7, #20]
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	693a      	ldr	r2, [r7, #16]
 8007d5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	697a      	ldr	r2, [r7, #20]
 8007d60:	621a      	str	r2, [r3, #32]
}
 8007d62:	bf00      	nop
 8007d64:	371c      	adds	r7, #28
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr

08007d6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b087      	sub	sp, #28
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	60f8      	str	r0, [r7, #12]
 8007d76:	60b9      	str	r1, [r7, #8]
 8007d78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	f023 0210 	bic.w	r2, r3, #16
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	699b      	ldr	r3, [r3, #24]
 8007d8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6a1b      	ldr	r3, [r3, #32]
 8007d90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	031b      	lsls	r3, r3, #12
 8007d9e:	697a      	ldr	r2, [r7, #20]
 8007da0:	4313      	orrs	r3, r2
 8007da2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007daa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	011b      	lsls	r3, r3, #4
 8007db0:	693a      	ldr	r2, [r7, #16]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	697a      	ldr	r2, [r7, #20]
 8007dba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	693a      	ldr	r2, [r7, #16]
 8007dc0:	621a      	str	r2, [r3, #32]
}
 8007dc2:	bf00      	nop
 8007dc4:	371c      	adds	r7, #28
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr

08007dce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007dce:	b480      	push	{r7}
 8007dd0:	b085      	sub	sp, #20
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
 8007dd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007de4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007de6:	683a      	ldr	r2, [r7, #0]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	f043 0307 	orr.w	r3, r3, #7
 8007df0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	609a      	str	r2, [r3, #8]
}
 8007df8:	bf00      	nop
 8007dfa:	3714      	adds	r7, #20
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b087      	sub	sp, #28
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
 8007e10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	021a      	lsls	r2, r3, #8
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	431a      	orrs	r2, r3
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	697a      	ldr	r2, [r7, #20]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	697a      	ldr	r2, [r7, #20]
 8007e36:	609a      	str	r2, [r3, #8]
}
 8007e38:	bf00      	nop
 8007e3a:	371c      	adds	r7, #28
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b087      	sub	sp, #28
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	60b9      	str	r1, [r7, #8]
 8007e4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	f003 031f 	and.w	r3, r3, #31
 8007e56:	2201      	movs	r2, #1
 8007e58:	fa02 f303 	lsl.w	r3, r2, r3
 8007e5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6a1a      	ldr	r2, [r3, #32]
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	43db      	mvns	r3, r3
 8007e66:	401a      	ands	r2, r3
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6a1a      	ldr	r2, [r3, #32]
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	f003 031f 	and.w	r3, r3, #31
 8007e76:	6879      	ldr	r1, [r7, #4]
 8007e78:	fa01 f303 	lsl.w	r3, r1, r3
 8007e7c:	431a      	orrs	r2, r3
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	621a      	str	r2, [r3, #32]
}
 8007e82:	bf00      	nop
 8007e84:	371c      	adds	r7, #28
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
	...

08007e90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b085      	sub	sp, #20
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d101      	bne.n	8007ea8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ea4:	2302      	movs	r3, #2
 8007ea6:	e06d      	b.n	8007f84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2202      	movs	r2, #2
 8007eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a30      	ldr	r2, [pc, #192]	; (8007f90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d004      	beq.n	8007edc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a2f      	ldr	r2, [pc, #188]	; (8007f94 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d108      	bne.n	8007eee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007ee2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	68fa      	ldr	r2, [r7, #12]
 8007eea:	4313      	orrs	r3, r2
 8007eec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ef4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	68fa      	ldr	r2, [r7, #12]
 8007efc:	4313      	orrs	r3, r2
 8007efe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	68fa      	ldr	r2, [r7, #12]
 8007f06:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a20      	ldr	r2, [pc, #128]	; (8007f90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d022      	beq.n	8007f58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f1a:	d01d      	beq.n	8007f58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a1d      	ldr	r2, [pc, #116]	; (8007f98 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d018      	beq.n	8007f58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a1c      	ldr	r2, [pc, #112]	; (8007f9c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d013      	beq.n	8007f58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a1a      	ldr	r2, [pc, #104]	; (8007fa0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d00e      	beq.n	8007f58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a15      	ldr	r2, [pc, #84]	; (8007f94 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d009      	beq.n	8007f58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a16      	ldr	r2, [pc, #88]	; (8007fa4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d004      	beq.n	8007f58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a15      	ldr	r2, [pc, #84]	; (8007fa8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d10c      	bne.n	8007f72 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f5e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	68ba      	ldr	r2, [r7, #8]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	68ba      	ldr	r2, [r7, #8]
 8007f70:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2201      	movs	r2, #1
 8007f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3714      	adds	r7, #20
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr
 8007f90:	40010000 	.word	0x40010000
 8007f94:	40010400 	.word	0x40010400
 8007f98:	40000400 	.word	0x40000400
 8007f9c:	40000800 	.word	0x40000800
 8007fa0:	40000c00 	.word	0x40000c00
 8007fa4:	40014000 	.word	0x40014000
 8007fa8:	40001800 	.word	0x40001800

08007fac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b085      	sub	sp, #20
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d101      	bne.n	8007fc8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007fc4:	2302      	movs	r3, #2
 8007fc6:	e065      	b.n	8008094 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4313      	orrs	r3, r2
 8008006:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	691b      	ldr	r3, [r3, #16]
 8008012:	4313      	orrs	r3, r2
 8008014:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	695b      	ldr	r3, [r3, #20]
 8008020:	4313      	orrs	r3, r2
 8008022:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802e:	4313      	orrs	r3, r2
 8008030:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	699b      	ldr	r3, [r3, #24]
 800803c:	041b      	lsls	r3, r3, #16
 800803e:	4313      	orrs	r3, r2
 8008040:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a16      	ldr	r2, [pc, #88]	; (80080a0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d004      	beq.n	8008056 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a14      	ldr	r2, [pc, #80]	; (80080a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d115      	bne.n	8008082 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008060:	051b      	lsls	r3, r3, #20
 8008062:	4313      	orrs	r3, r2
 8008064:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	69db      	ldr	r3, [r3, #28]
 8008070:	4313      	orrs	r3, r2
 8008072:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	6a1b      	ldr	r3, [r3, #32]
 800807e:	4313      	orrs	r3, r2
 8008080:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	68fa      	ldr	r2, [r7, #12]
 8008088:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008092:	2300      	movs	r3, #0
}
 8008094:	4618      	mov	r0, r3
 8008096:	3714      	adds	r7, #20
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr
 80080a0:	40010000 	.word	0x40010000
 80080a4:	40010400 	.word	0x40010400

080080a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80080b0:	bf00      	nop
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080c4:	bf00      	nop
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80080d8:	bf00      	nop
 80080da:	370c      	adds	r7, #12
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b082      	sub	sp, #8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d101      	bne.n	80080f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	e040      	b.n	8008178 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d106      	bne.n	800810c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f7fc f8fa 	bl	8004300 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2224      	movs	r2, #36	; 0x24
 8008110:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f022 0201 	bic.w	r2, r2, #1
 8008120:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 fcae 	bl	8008a84 <UART_SetConfig>
 8008128:	4603      	mov	r3, r0
 800812a:	2b01      	cmp	r3, #1
 800812c:	d101      	bne.n	8008132 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	e022      	b.n	8008178 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008136:	2b00      	cmp	r3, #0
 8008138:	d002      	beq.n	8008140 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 ff06 	bl	8008f4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	685a      	ldr	r2, [r3, #4]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800814e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	689a      	ldr	r2, [r3, #8]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800815e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f042 0201 	orr.w	r2, r2, #1
 800816e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 ff8d 	bl	8009090 <UART_CheckIdleState>
 8008176:	4603      	mov	r3, r0
}
 8008178:	4618      	mov	r0, r3
 800817a:	3708      	adds	r7, #8
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b08a      	sub	sp, #40	; 0x28
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	4613      	mov	r3, r2
 800818c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008192:	2b20      	cmp	r3, #32
 8008194:	d165      	bne.n	8008262 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d002      	beq.n	80081a2 <HAL_UART_Transmit_DMA+0x22>
 800819c:	88fb      	ldrh	r3, [r7, #6]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d101      	bne.n	80081a6 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	e05e      	b.n	8008264 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	68ba      	ldr	r2, [r7, #8]
 80081aa:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	88fa      	ldrh	r2, [r7, #6]
 80081b0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	88fa      	ldrh	r2, [r7, #6]
 80081b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2200      	movs	r2, #0
 80081c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2221      	movs	r2, #33	; 0x21
 80081c8:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d027      	beq.n	8008222 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081d6:	4a25      	ldr	r2, [pc, #148]	; (800826c <HAL_UART_Transmit_DMA+0xec>)
 80081d8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081de:	4a24      	ldr	r2, [pc, #144]	; (8008270 <HAL_UART_Transmit_DMA+0xf0>)
 80081e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081e6:	4a23      	ldr	r2, [pc, #140]	; (8008274 <HAL_UART_Transmit_DMA+0xf4>)
 80081e8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ee:	2200      	movs	r2, #0
 80081f0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081fa:	4619      	mov	r1, r3
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	3328      	adds	r3, #40	; 0x28
 8008202:	461a      	mov	r2, r3
 8008204:	88fb      	ldrh	r3, [r7, #6]
 8008206:	f7fc fbfd 	bl	8004a04 <HAL_DMA_Start_IT>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d008      	beq.n	8008222 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2210      	movs	r2, #16
 8008214:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2220      	movs	r2, #32
 800821c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	e020      	b.n	8008264 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	2240      	movs	r2, #64	; 0x40
 8008228:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	3308      	adds	r3, #8
 8008230:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	e853 3f00 	ldrex	r3, [r3]
 8008238:	613b      	str	r3, [r7, #16]
   return(result);
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008240:	627b      	str	r3, [r7, #36]	; 0x24
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	3308      	adds	r3, #8
 8008248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800824a:	623a      	str	r2, [r7, #32]
 800824c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800824e:	69f9      	ldr	r1, [r7, #28]
 8008250:	6a3a      	ldr	r2, [r7, #32]
 8008252:	e841 2300 	strex	r3, r2, [r1]
 8008256:	61bb      	str	r3, [r7, #24]
   return(result);
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d1e5      	bne.n	800822a <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800825e:	2300      	movs	r3, #0
 8008260:	e000      	b.n	8008264 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8008262:	2302      	movs	r3, #2
  }
}
 8008264:	4618      	mov	r0, r3
 8008266:	3728      	adds	r7, #40	; 0x28
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}
 800826c:	0800950d 	.word	0x0800950d
 8008270:	080095a3 	.word	0x080095a3
 8008274:	08009725 	.word	0x08009725

08008278 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b08a      	sub	sp, #40	; 0x28
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	4613      	mov	r3, r2
 8008284:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800828c:	2b20      	cmp	r3, #32
 800828e:	d132      	bne.n	80082f6 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d002      	beq.n	800829c <HAL_UART_Receive_DMA+0x24>
 8008296:	88fb      	ldrh	r3, [r7, #6]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d101      	bne.n	80082a0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800829c:	2301      	movs	r3, #1
 800829e:	e02b      	b.n	80082f8 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2200      	movs	r2, #0
 80082a4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d018      	beq.n	80082e6 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	e853 3f00 	ldrex	r3, [r3]
 80082c0:	613b      	str	r3, [r7, #16]
   return(result);
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80082c8:	627b      	str	r3, [r7, #36]	; 0x24
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	461a      	mov	r2, r3
 80082d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d2:	623b      	str	r3, [r7, #32]
 80082d4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d6:	69f9      	ldr	r1, [r7, #28]
 80082d8:	6a3a      	ldr	r2, [r7, #32]
 80082da:	e841 2300 	strex	r3, r2, [r1]
 80082de:	61bb      	str	r3, [r7, #24]
   return(result);
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d1e6      	bne.n	80082b4 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80082e6:	88fb      	ldrh	r3, [r7, #6]
 80082e8:	461a      	mov	r2, r3
 80082ea:	68b9      	ldr	r1, [r7, #8]
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f000 ffe3 	bl	80092b8 <UART_Start_Receive_DMA>
 80082f2:	4603      	mov	r3, r0
 80082f4:	e000      	b.n	80082f8 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 80082f6:	2302      	movs	r3, #2
  }
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3728      	adds	r7, #40	; 0x28
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b090      	sub	sp, #64	; 0x40
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800830c:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008314:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008320:	2b80      	cmp	r3, #128	; 0x80
 8008322:	d139      	bne.n	8008398 <HAL_UART_DMAStop+0x98>
 8008324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008326:	2b21      	cmp	r3, #33	; 0x21
 8008328:	d136      	bne.n	8008398 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	3308      	adds	r3, #8
 8008330:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008332:	6a3b      	ldr	r3, [r7, #32]
 8008334:	e853 3f00 	ldrex	r3, [r3]
 8008338:	61fb      	str	r3, [r7, #28]
   return(result);
 800833a:	69fb      	ldr	r3, [r7, #28]
 800833c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008340:	637b      	str	r3, [r7, #52]	; 0x34
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	3308      	adds	r3, #8
 8008348:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800834a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800834c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800834e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008350:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008352:	e841 2300 	strex	r3, r2, [r1]
 8008356:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835a:	2b00      	cmp	r3, #0
 800835c:	d1e5      	bne.n	800832a <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008362:	2b00      	cmp	r3, #0
 8008364:	d015      	beq.n	8008392 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800836a:	4618      	mov	r0, r3
 800836c:	f7fc fbaa 	bl	8004ac4 <HAL_DMA_Abort>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d00d      	beq.n	8008392 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800837a:	4618      	mov	r0, r3
 800837c:	f7fc fdbe 	bl	8004efc <HAL_DMA_GetError>
 8008380:	4603      	mov	r3, r0
 8008382:	2b20      	cmp	r3, #32
 8008384:	d105      	bne.n	8008392 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2210      	movs	r2, #16
 800838a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800838e:	2303      	movs	r3, #3
 8008390:	e044      	b.n	800841c <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f001 f830 	bl	80093f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083a2:	2b40      	cmp	r3, #64	; 0x40
 80083a4:	d139      	bne.n	800841a <HAL_UART_DMAStop+0x11a>
 80083a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a8:	2b22      	cmp	r3, #34	; 0x22
 80083aa:	d136      	bne.n	800841a <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	3308      	adds	r3, #8
 80083b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	e853 3f00 	ldrex	r3, [r3]
 80083ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083c2:	633b      	str	r3, [r7, #48]	; 0x30
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	3308      	adds	r3, #8
 80083ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083cc:	61ba      	str	r2, [r7, #24]
 80083ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d0:	6979      	ldr	r1, [r7, #20]
 80083d2:	69ba      	ldr	r2, [r7, #24]
 80083d4:	e841 2300 	strex	r3, r2, [r1]
 80083d8:	613b      	str	r3, [r7, #16]
   return(result);
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d1e5      	bne.n	80083ac <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d015      	beq.n	8008414 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083ec:	4618      	mov	r0, r3
 80083ee:	f7fc fb69 	bl	8004ac4 <HAL_DMA_Abort>
 80083f2:	4603      	mov	r3, r0
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d00d      	beq.n	8008414 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7fc fd7d 	bl	8004efc <HAL_DMA_GetError>
 8008402:	4603      	mov	r3, r0
 8008404:	2b20      	cmp	r3, #32
 8008406:	d105      	bne.n	8008414 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2210      	movs	r2, #16
 800840c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008410:	2303      	movs	r3, #3
 8008412:	e003      	b.n	800841c <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f001 f815 	bl	8009444 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3740      	adds	r7, #64	; 0x40
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b0ba      	sub	sp, #232	; 0xe8
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	69db      	ldr	r3, [r3, #28]
 8008432:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800844a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800844e:	f640 030f 	movw	r3, #2063	; 0x80f
 8008452:	4013      	ands	r3, r2
 8008454:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008458:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800845c:	2b00      	cmp	r3, #0
 800845e:	d115      	bne.n	800848c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008464:	f003 0320 	and.w	r3, r3, #32
 8008468:	2b00      	cmp	r3, #0
 800846a:	d00f      	beq.n	800848c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800846c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008470:	f003 0320 	and.w	r3, r3, #32
 8008474:	2b00      	cmp	r3, #0
 8008476:	d009      	beq.n	800848c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800847c:	2b00      	cmp	r3, #0
 800847e:	f000 82ac 	beq.w	80089da <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	4798      	blx	r3
      }
      return;
 800848a:	e2a6      	b.n	80089da <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800848c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008490:	2b00      	cmp	r3, #0
 8008492:	f000 8117 	beq.w	80086c4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008496:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800849a:	f003 0301 	and.w	r3, r3, #1
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d106      	bne.n	80084b0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80084a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80084a6:	4b85      	ldr	r3, [pc, #532]	; (80086bc <HAL_UART_IRQHandler+0x298>)
 80084a8:	4013      	ands	r3, r2
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	f000 810a 	beq.w	80086c4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80084b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084b4:	f003 0301 	and.w	r3, r3, #1
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d011      	beq.n	80084e0 <HAL_UART_IRQHandler+0xbc>
 80084bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00b      	beq.n	80084e0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	2201      	movs	r2, #1
 80084ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084d6:	f043 0201 	orr.w	r2, r3, #1
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084e4:	f003 0302 	and.w	r3, r3, #2
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d011      	beq.n	8008510 <HAL_UART_IRQHandler+0xec>
 80084ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084f0:	f003 0301 	and.w	r3, r3, #1
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d00b      	beq.n	8008510 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2202      	movs	r2, #2
 80084fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008506:	f043 0204 	orr.w	r2, r3, #4
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008514:	f003 0304 	and.w	r3, r3, #4
 8008518:	2b00      	cmp	r3, #0
 800851a:	d011      	beq.n	8008540 <HAL_UART_IRQHandler+0x11c>
 800851c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008520:	f003 0301 	and.w	r3, r3, #1
 8008524:	2b00      	cmp	r3, #0
 8008526:	d00b      	beq.n	8008540 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	2204      	movs	r2, #4
 800852e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008536:	f043 0202 	orr.w	r2, r3, #2
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008544:	f003 0308 	and.w	r3, r3, #8
 8008548:	2b00      	cmp	r3, #0
 800854a:	d017      	beq.n	800857c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800854c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008550:	f003 0320 	and.w	r3, r3, #32
 8008554:	2b00      	cmp	r3, #0
 8008556:	d105      	bne.n	8008564 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008558:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800855c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008560:	2b00      	cmp	r3, #0
 8008562:	d00b      	beq.n	800857c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2208      	movs	r2, #8
 800856a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008572:	f043 0208 	orr.w	r2, r3, #8
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800857c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008580:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008584:	2b00      	cmp	r3, #0
 8008586:	d012      	beq.n	80085ae <HAL_UART_IRQHandler+0x18a>
 8008588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800858c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008590:	2b00      	cmp	r3, #0
 8008592:	d00c      	beq.n	80085ae <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800859c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085a4:	f043 0220 	orr.w	r2, r3, #32
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	f000 8212 	beq.w	80089de <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80085ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085be:	f003 0320 	and.w	r3, r3, #32
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00d      	beq.n	80085e2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80085c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085ca:	f003 0320 	and.w	r3, r3, #32
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d007      	beq.n	80085e2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d003      	beq.n	80085e2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085f6:	2b40      	cmp	r3, #64	; 0x40
 80085f8:	d005      	beq.n	8008606 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80085fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80085fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008602:	2b00      	cmp	r3, #0
 8008604:	d04f      	beq.n	80086a6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 ff1c 	bl	8009444 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008616:	2b40      	cmp	r3, #64	; 0x40
 8008618:	d141      	bne.n	800869e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	3308      	adds	r3, #8
 8008620:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008624:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008628:	e853 3f00 	ldrex	r3, [r3]
 800862c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008630:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008634:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008638:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	3308      	adds	r3, #8
 8008642:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008646:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800864a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008652:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008656:	e841 2300 	strex	r3, r2, [r1]
 800865a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800865e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008662:	2b00      	cmp	r3, #0
 8008664:	d1d9      	bne.n	800861a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800866a:	2b00      	cmp	r3, #0
 800866c:	d013      	beq.n	8008696 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008672:	4a13      	ldr	r2, [pc, #76]	; (80086c0 <HAL_UART_IRQHandler+0x29c>)
 8008674:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800867a:	4618      	mov	r0, r3
 800867c:	f7fc fa92 	bl	8004ba4 <HAL_DMA_Abort_IT>
 8008680:	4603      	mov	r3, r0
 8008682:	2b00      	cmp	r3, #0
 8008684:	d017      	beq.n	80086b6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800868a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008690:	4610      	mov	r0, r2
 8008692:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008694:	e00f      	b.n	80086b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 f9d4 	bl	8008a44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800869c:	e00b      	b.n	80086b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 f9d0 	bl	8008a44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086a4:	e007      	b.n	80086b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 f9cc 	bl	8008a44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80086b4:	e193      	b.n	80089de <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086b6:	bf00      	nop
    return;
 80086b8:	e191      	b.n	80089de <HAL_UART_IRQHandler+0x5ba>
 80086ba:	bf00      	nop
 80086bc:	04000120 	.word	0x04000120
 80086c0:	080097a3 	.word	0x080097a3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	f040 814c 	bne.w	8008966 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80086ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086d2:	f003 0310 	and.w	r3, r3, #16
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	f000 8145 	beq.w	8008966 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80086dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086e0:	f003 0310 	and.w	r3, r3, #16
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	f000 813e 	beq.w	8008966 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2210      	movs	r2, #16
 80086f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086fc:	2b40      	cmp	r3, #64	; 0x40
 80086fe:	f040 80b6 	bne.w	800886e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800870e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008712:	2b00      	cmp	r3, #0
 8008714:	f000 8165 	beq.w	80089e2 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800871e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008722:	429a      	cmp	r2, r3
 8008724:	f080 815d 	bcs.w	80089e2 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800872e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008736:	69db      	ldr	r3, [r3, #28]
 8008738:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800873c:	f000 8086 	beq.w	800884c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008748:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800874c:	e853 3f00 	ldrex	r3, [r3]
 8008750:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008754:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800875c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	461a      	mov	r2, r3
 8008766:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800876a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800876e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008772:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008776:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800877a:	e841 2300 	strex	r3, r2, [r1]
 800877e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008782:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008786:	2b00      	cmp	r3, #0
 8008788:	d1da      	bne.n	8008740 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	3308      	adds	r3, #8
 8008790:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008792:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008794:	e853 3f00 	ldrex	r3, [r3]
 8008798:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800879a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800879c:	f023 0301 	bic.w	r3, r3, #1
 80087a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	3308      	adds	r3, #8
 80087aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80087ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80087b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80087b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80087ba:	e841 2300 	strex	r3, r2, [r1]
 80087be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80087c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d1e1      	bne.n	800878a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	3308      	adds	r3, #8
 80087cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087d0:	e853 3f00 	ldrex	r3, [r3]
 80087d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80087d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	3308      	adds	r3, #8
 80087e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80087ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80087ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80087f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80087f2:	e841 2300 	strex	r3, r2, [r1]
 80087f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80087f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d1e3      	bne.n	80087c6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2220      	movs	r2, #32
 8008802:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008814:	e853 3f00 	ldrex	r3, [r3]
 8008818:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800881a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800881c:	f023 0310 	bic.w	r3, r3, #16
 8008820:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	461a      	mov	r2, r3
 800882a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800882e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008830:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008832:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008834:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008836:	e841 2300 	strex	r3, r2, [r1]
 800883a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800883c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1e4      	bne.n	800880c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008846:	4618      	mov	r0, r3
 8008848:	f7fc f93c 	bl	8004ac4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2202      	movs	r2, #2
 8008850:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800885e:	b29b      	uxth	r3, r3
 8008860:	1ad3      	subs	r3, r2, r3
 8008862:	b29b      	uxth	r3, r3
 8008864:	4619      	mov	r1, r3
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 f8f6 	bl	8008a58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800886c:	e0b9      	b.n	80089e2 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800887a:	b29b      	uxth	r3, r3
 800887c:	1ad3      	subs	r3, r2, r3
 800887e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008888:	b29b      	uxth	r3, r3
 800888a:	2b00      	cmp	r3, #0
 800888c:	f000 80ab 	beq.w	80089e6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8008890:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008894:	2b00      	cmp	r3, #0
 8008896:	f000 80a6 	beq.w	80089e6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a2:	e853 3f00 	ldrex	r3, [r3]
 80088a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80088a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	461a      	mov	r2, r3
 80088b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80088bc:	647b      	str	r3, [r7, #68]	; 0x44
 80088be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80088c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088c4:	e841 2300 	strex	r3, r2, [r1]
 80088c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80088ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d1e4      	bne.n	800889a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	3308      	adds	r3, #8
 80088d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088da:	e853 3f00 	ldrex	r3, [r3]
 80088de:	623b      	str	r3, [r7, #32]
   return(result);
 80088e0:	6a3b      	ldr	r3, [r7, #32]
 80088e2:	f023 0301 	bic.w	r3, r3, #1
 80088e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	3308      	adds	r3, #8
 80088f0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80088f4:	633a      	str	r2, [r7, #48]	; 0x30
 80088f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088fc:	e841 2300 	strex	r3, r2, [r1]
 8008900:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008904:	2b00      	cmp	r3, #0
 8008906:	d1e3      	bne.n	80088d0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2220      	movs	r2, #32
 800890c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	e853 3f00 	ldrex	r3, [r3]
 8008928:	60fb      	str	r3, [r7, #12]
   return(result);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f023 0310 	bic.w	r3, r3, #16
 8008930:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	461a      	mov	r2, r3
 800893a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800893e:	61fb      	str	r3, [r7, #28]
 8008940:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008942:	69b9      	ldr	r1, [r7, #24]
 8008944:	69fa      	ldr	r2, [r7, #28]
 8008946:	e841 2300 	strex	r3, r2, [r1]
 800894a:	617b      	str	r3, [r7, #20]
   return(result);
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d1e4      	bne.n	800891c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2202      	movs	r2, #2
 8008956:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008958:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800895c:	4619      	mov	r1, r3
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 f87a 	bl	8008a58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008964:	e03f      	b.n	80089e6 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800896a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800896e:	2b00      	cmp	r3, #0
 8008970:	d00e      	beq.n	8008990 <HAL_UART_IRQHandler+0x56c>
 8008972:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800897a:	2b00      	cmp	r3, #0
 800897c:	d008      	beq.n	8008990 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008986:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 f871 	bl	8008a70 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800898e:	e02d      	b.n	80089ec <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008998:	2b00      	cmp	r3, #0
 800899a:	d00e      	beq.n	80089ba <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800899c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d008      	beq.n	80089ba <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d01c      	beq.n	80089ea <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	4798      	blx	r3
    }
    return;
 80089b8:	e017      	b.n	80089ea <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80089ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d012      	beq.n	80089ec <HAL_UART_IRQHandler+0x5c8>
 80089c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d00c      	beq.n	80089ec <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 fefb 	bl	80097ce <UART_EndTransmit_IT>
    return;
 80089d8:	e008      	b.n	80089ec <HAL_UART_IRQHandler+0x5c8>
      return;
 80089da:	bf00      	nop
 80089dc:	e006      	b.n	80089ec <HAL_UART_IRQHandler+0x5c8>
    return;
 80089de:	bf00      	nop
 80089e0:	e004      	b.n	80089ec <HAL_UART_IRQHandler+0x5c8>
      return;
 80089e2:	bf00      	nop
 80089e4:	e002      	b.n	80089ec <HAL_UART_IRQHandler+0x5c8>
      return;
 80089e6:	bf00      	nop
 80089e8:	e000      	b.n	80089ec <HAL_UART_IRQHandler+0x5c8>
    return;
 80089ea:	bf00      	nop
  }

}
 80089ec:	37e8      	adds	r7, #232	; 0xe8
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop

080089f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b083      	sub	sp, #12
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80089fc:	bf00      	nop
 80089fe:	370c      	adds	r7, #12
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr

08008a08 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b083      	sub	sp, #12
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008a10:	bf00      	nop
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008a24:	bf00      	nop
 8008a26:	370c      	adds	r7, #12
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008a38:	bf00      	nop
 8008a3a:	370c      	adds	r7, #12
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008a4c:	bf00      	nop
 8008a4e:	370c      	adds	r7, #12
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr

08008a58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	460b      	mov	r3, r1
 8008a62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008a64:	bf00      	nop
 8008a66:	370c      	adds	r7, #12
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b083      	sub	sp, #12
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008a78:	bf00      	nop
 8008a7a:	370c      	adds	r7, #12
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr

08008a84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b088      	sub	sp, #32
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	689a      	ldr	r2, [r3, #8]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	691b      	ldr	r3, [r3, #16]
 8008a98:	431a      	orrs	r2, r3
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	695b      	ldr	r3, [r3, #20]
 8008a9e:	431a      	orrs	r2, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	69db      	ldr	r3, [r3, #28]
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	4ba6      	ldr	r3, [pc, #664]	; (8008d48 <UART_SetConfig+0x2c4>)
 8008ab0:	4013      	ands	r3, r2
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	6812      	ldr	r2, [r2, #0]
 8008ab6:	6979      	ldr	r1, [r7, #20]
 8008ab8:	430b      	orrs	r3, r1
 8008aba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	68da      	ldr	r2, [r3, #12]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	430a      	orrs	r2, r1
 8008ad0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	699b      	ldr	r3, [r3, #24]
 8008ad6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6a1b      	ldr	r3, [r3, #32]
 8008adc:	697a      	ldr	r2, [r7, #20]
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	697a      	ldr	r2, [r7, #20]
 8008af2:	430a      	orrs	r2, r1
 8008af4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a94      	ldr	r2, [pc, #592]	; (8008d4c <UART_SetConfig+0x2c8>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d120      	bne.n	8008b42 <UART_SetConfig+0xbe>
 8008b00:	4b93      	ldr	r3, [pc, #588]	; (8008d50 <UART_SetConfig+0x2cc>)
 8008b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b06:	f003 0303 	and.w	r3, r3, #3
 8008b0a:	2b03      	cmp	r3, #3
 8008b0c:	d816      	bhi.n	8008b3c <UART_SetConfig+0xb8>
 8008b0e:	a201      	add	r2, pc, #4	; (adr r2, 8008b14 <UART_SetConfig+0x90>)
 8008b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b14:	08008b25 	.word	0x08008b25
 8008b18:	08008b31 	.word	0x08008b31
 8008b1c:	08008b2b 	.word	0x08008b2b
 8008b20:	08008b37 	.word	0x08008b37
 8008b24:	2301      	movs	r3, #1
 8008b26:	77fb      	strb	r3, [r7, #31]
 8008b28:	e150      	b.n	8008dcc <UART_SetConfig+0x348>
 8008b2a:	2302      	movs	r3, #2
 8008b2c:	77fb      	strb	r3, [r7, #31]
 8008b2e:	e14d      	b.n	8008dcc <UART_SetConfig+0x348>
 8008b30:	2304      	movs	r3, #4
 8008b32:	77fb      	strb	r3, [r7, #31]
 8008b34:	e14a      	b.n	8008dcc <UART_SetConfig+0x348>
 8008b36:	2308      	movs	r3, #8
 8008b38:	77fb      	strb	r3, [r7, #31]
 8008b3a:	e147      	b.n	8008dcc <UART_SetConfig+0x348>
 8008b3c:	2310      	movs	r3, #16
 8008b3e:	77fb      	strb	r3, [r7, #31]
 8008b40:	e144      	b.n	8008dcc <UART_SetConfig+0x348>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a83      	ldr	r2, [pc, #524]	; (8008d54 <UART_SetConfig+0x2d0>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d132      	bne.n	8008bb2 <UART_SetConfig+0x12e>
 8008b4c:	4b80      	ldr	r3, [pc, #512]	; (8008d50 <UART_SetConfig+0x2cc>)
 8008b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b52:	f003 030c 	and.w	r3, r3, #12
 8008b56:	2b0c      	cmp	r3, #12
 8008b58:	d828      	bhi.n	8008bac <UART_SetConfig+0x128>
 8008b5a:	a201      	add	r2, pc, #4	; (adr r2, 8008b60 <UART_SetConfig+0xdc>)
 8008b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b60:	08008b95 	.word	0x08008b95
 8008b64:	08008bad 	.word	0x08008bad
 8008b68:	08008bad 	.word	0x08008bad
 8008b6c:	08008bad 	.word	0x08008bad
 8008b70:	08008ba1 	.word	0x08008ba1
 8008b74:	08008bad 	.word	0x08008bad
 8008b78:	08008bad 	.word	0x08008bad
 8008b7c:	08008bad 	.word	0x08008bad
 8008b80:	08008b9b 	.word	0x08008b9b
 8008b84:	08008bad 	.word	0x08008bad
 8008b88:	08008bad 	.word	0x08008bad
 8008b8c:	08008bad 	.word	0x08008bad
 8008b90:	08008ba7 	.word	0x08008ba7
 8008b94:	2300      	movs	r3, #0
 8008b96:	77fb      	strb	r3, [r7, #31]
 8008b98:	e118      	b.n	8008dcc <UART_SetConfig+0x348>
 8008b9a:	2302      	movs	r3, #2
 8008b9c:	77fb      	strb	r3, [r7, #31]
 8008b9e:	e115      	b.n	8008dcc <UART_SetConfig+0x348>
 8008ba0:	2304      	movs	r3, #4
 8008ba2:	77fb      	strb	r3, [r7, #31]
 8008ba4:	e112      	b.n	8008dcc <UART_SetConfig+0x348>
 8008ba6:	2308      	movs	r3, #8
 8008ba8:	77fb      	strb	r3, [r7, #31]
 8008baa:	e10f      	b.n	8008dcc <UART_SetConfig+0x348>
 8008bac:	2310      	movs	r3, #16
 8008bae:	77fb      	strb	r3, [r7, #31]
 8008bb0:	e10c      	b.n	8008dcc <UART_SetConfig+0x348>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a68      	ldr	r2, [pc, #416]	; (8008d58 <UART_SetConfig+0x2d4>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d120      	bne.n	8008bfe <UART_SetConfig+0x17a>
 8008bbc:	4b64      	ldr	r3, [pc, #400]	; (8008d50 <UART_SetConfig+0x2cc>)
 8008bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bc2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008bc6:	2b30      	cmp	r3, #48	; 0x30
 8008bc8:	d013      	beq.n	8008bf2 <UART_SetConfig+0x16e>
 8008bca:	2b30      	cmp	r3, #48	; 0x30
 8008bcc:	d814      	bhi.n	8008bf8 <UART_SetConfig+0x174>
 8008bce:	2b20      	cmp	r3, #32
 8008bd0:	d009      	beq.n	8008be6 <UART_SetConfig+0x162>
 8008bd2:	2b20      	cmp	r3, #32
 8008bd4:	d810      	bhi.n	8008bf8 <UART_SetConfig+0x174>
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d002      	beq.n	8008be0 <UART_SetConfig+0x15c>
 8008bda:	2b10      	cmp	r3, #16
 8008bdc:	d006      	beq.n	8008bec <UART_SetConfig+0x168>
 8008bde:	e00b      	b.n	8008bf8 <UART_SetConfig+0x174>
 8008be0:	2300      	movs	r3, #0
 8008be2:	77fb      	strb	r3, [r7, #31]
 8008be4:	e0f2      	b.n	8008dcc <UART_SetConfig+0x348>
 8008be6:	2302      	movs	r3, #2
 8008be8:	77fb      	strb	r3, [r7, #31]
 8008bea:	e0ef      	b.n	8008dcc <UART_SetConfig+0x348>
 8008bec:	2304      	movs	r3, #4
 8008bee:	77fb      	strb	r3, [r7, #31]
 8008bf0:	e0ec      	b.n	8008dcc <UART_SetConfig+0x348>
 8008bf2:	2308      	movs	r3, #8
 8008bf4:	77fb      	strb	r3, [r7, #31]
 8008bf6:	e0e9      	b.n	8008dcc <UART_SetConfig+0x348>
 8008bf8:	2310      	movs	r3, #16
 8008bfa:	77fb      	strb	r3, [r7, #31]
 8008bfc:	e0e6      	b.n	8008dcc <UART_SetConfig+0x348>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a56      	ldr	r2, [pc, #344]	; (8008d5c <UART_SetConfig+0x2d8>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d120      	bne.n	8008c4a <UART_SetConfig+0x1c6>
 8008c08:	4b51      	ldr	r3, [pc, #324]	; (8008d50 <UART_SetConfig+0x2cc>)
 8008c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c0e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008c12:	2bc0      	cmp	r3, #192	; 0xc0
 8008c14:	d013      	beq.n	8008c3e <UART_SetConfig+0x1ba>
 8008c16:	2bc0      	cmp	r3, #192	; 0xc0
 8008c18:	d814      	bhi.n	8008c44 <UART_SetConfig+0x1c0>
 8008c1a:	2b80      	cmp	r3, #128	; 0x80
 8008c1c:	d009      	beq.n	8008c32 <UART_SetConfig+0x1ae>
 8008c1e:	2b80      	cmp	r3, #128	; 0x80
 8008c20:	d810      	bhi.n	8008c44 <UART_SetConfig+0x1c0>
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d002      	beq.n	8008c2c <UART_SetConfig+0x1a8>
 8008c26:	2b40      	cmp	r3, #64	; 0x40
 8008c28:	d006      	beq.n	8008c38 <UART_SetConfig+0x1b4>
 8008c2a:	e00b      	b.n	8008c44 <UART_SetConfig+0x1c0>
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	77fb      	strb	r3, [r7, #31]
 8008c30:	e0cc      	b.n	8008dcc <UART_SetConfig+0x348>
 8008c32:	2302      	movs	r3, #2
 8008c34:	77fb      	strb	r3, [r7, #31]
 8008c36:	e0c9      	b.n	8008dcc <UART_SetConfig+0x348>
 8008c38:	2304      	movs	r3, #4
 8008c3a:	77fb      	strb	r3, [r7, #31]
 8008c3c:	e0c6      	b.n	8008dcc <UART_SetConfig+0x348>
 8008c3e:	2308      	movs	r3, #8
 8008c40:	77fb      	strb	r3, [r7, #31]
 8008c42:	e0c3      	b.n	8008dcc <UART_SetConfig+0x348>
 8008c44:	2310      	movs	r3, #16
 8008c46:	77fb      	strb	r3, [r7, #31]
 8008c48:	e0c0      	b.n	8008dcc <UART_SetConfig+0x348>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4a44      	ldr	r2, [pc, #272]	; (8008d60 <UART_SetConfig+0x2dc>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d125      	bne.n	8008ca0 <UART_SetConfig+0x21c>
 8008c54:	4b3e      	ldr	r3, [pc, #248]	; (8008d50 <UART_SetConfig+0x2cc>)
 8008c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c62:	d017      	beq.n	8008c94 <UART_SetConfig+0x210>
 8008c64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c68:	d817      	bhi.n	8008c9a <UART_SetConfig+0x216>
 8008c6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c6e:	d00b      	beq.n	8008c88 <UART_SetConfig+0x204>
 8008c70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c74:	d811      	bhi.n	8008c9a <UART_SetConfig+0x216>
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d003      	beq.n	8008c82 <UART_SetConfig+0x1fe>
 8008c7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c7e:	d006      	beq.n	8008c8e <UART_SetConfig+0x20a>
 8008c80:	e00b      	b.n	8008c9a <UART_SetConfig+0x216>
 8008c82:	2300      	movs	r3, #0
 8008c84:	77fb      	strb	r3, [r7, #31]
 8008c86:	e0a1      	b.n	8008dcc <UART_SetConfig+0x348>
 8008c88:	2302      	movs	r3, #2
 8008c8a:	77fb      	strb	r3, [r7, #31]
 8008c8c:	e09e      	b.n	8008dcc <UART_SetConfig+0x348>
 8008c8e:	2304      	movs	r3, #4
 8008c90:	77fb      	strb	r3, [r7, #31]
 8008c92:	e09b      	b.n	8008dcc <UART_SetConfig+0x348>
 8008c94:	2308      	movs	r3, #8
 8008c96:	77fb      	strb	r3, [r7, #31]
 8008c98:	e098      	b.n	8008dcc <UART_SetConfig+0x348>
 8008c9a:	2310      	movs	r3, #16
 8008c9c:	77fb      	strb	r3, [r7, #31]
 8008c9e:	e095      	b.n	8008dcc <UART_SetConfig+0x348>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a2f      	ldr	r2, [pc, #188]	; (8008d64 <UART_SetConfig+0x2e0>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d125      	bne.n	8008cf6 <UART_SetConfig+0x272>
 8008caa:	4b29      	ldr	r3, [pc, #164]	; (8008d50 <UART_SetConfig+0x2cc>)
 8008cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cb0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008cb4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008cb8:	d017      	beq.n	8008cea <UART_SetConfig+0x266>
 8008cba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008cbe:	d817      	bhi.n	8008cf0 <UART_SetConfig+0x26c>
 8008cc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008cc4:	d00b      	beq.n	8008cde <UART_SetConfig+0x25a>
 8008cc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008cca:	d811      	bhi.n	8008cf0 <UART_SetConfig+0x26c>
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d003      	beq.n	8008cd8 <UART_SetConfig+0x254>
 8008cd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cd4:	d006      	beq.n	8008ce4 <UART_SetConfig+0x260>
 8008cd6:	e00b      	b.n	8008cf0 <UART_SetConfig+0x26c>
 8008cd8:	2301      	movs	r3, #1
 8008cda:	77fb      	strb	r3, [r7, #31]
 8008cdc:	e076      	b.n	8008dcc <UART_SetConfig+0x348>
 8008cde:	2302      	movs	r3, #2
 8008ce0:	77fb      	strb	r3, [r7, #31]
 8008ce2:	e073      	b.n	8008dcc <UART_SetConfig+0x348>
 8008ce4:	2304      	movs	r3, #4
 8008ce6:	77fb      	strb	r3, [r7, #31]
 8008ce8:	e070      	b.n	8008dcc <UART_SetConfig+0x348>
 8008cea:	2308      	movs	r3, #8
 8008cec:	77fb      	strb	r3, [r7, #31]
 8008cee:	e06d      	b.n	8008dcc <UART_SetConfig+0x348>
 8008cf0:	2310      	movs	r3, #16
 8008cf2:	77fb      	strb	r3, [r7, #31]
 8008cf4:	e06a      	b.n	8008dcc <UART_SetConfig+0x348>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a1b      	ldr	r2, [pc, #108]	; (8008d68 <UART_SetConfig+0x2e4>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d138      	bne.n	8008d72 <UART_SetConfig+0x2ee>
 8008d00:	4b13      	ldr	r3, [pc, #76]	; (8008d50 <UART_SetConfig+0x2cc>)
 8008d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d06:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008d0a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008d0e:	d017      	beq.n	8008d40 <UART_SetConfig+0x2bc>
 8008d10:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008d14:	d82a      	bhi.n	8008d6c <UART_SetConfig+0x2e8>
 8008d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d1a:	d00b      	beq.n	8008d34 <UART_SetConfig+0x2b0>
 8008d1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d20:	d824      	bhi.n	8008d6c <UART_SetConfig+0x2e8>
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d003      	beq.n	8008d2e <UART_SetConfig+0x2aa>
 8008d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d2a:	d006      	beq.n	8008d3a <UART_SetConfig+0x2b6>
 8008d2c:	e01e      	b.n	8008d6c <UART_SetConfig+0x2e8>
 8008d2e:	2300      	movs	r3, #0
 8008d30:	77fb      	strb	r3, [r7, #31]
 8008d32:	e04b      	b.n	8008dcc <UART_SetConfig+0x348>
 8008d34:	2302      	movs	r3, #2
 8008d36:	77fb      	strb	r3, [r7, #31]
 8008d38:	e048      	b.n	8008dcc <UART_SetConfig+0x348>
 8008d3a:	2304      	movs	r3, #4
 8008d3c:	77fb      	strb	r3, [r7, #31]
 8008d3e:	e045      	b.n	8008dcc <UART_SetConfig+0x348>
 8008d40:	2308      	movs	r3, #8
 8008d42:	77fb      	strb	r3, [r7, #31]
 8008d44:	e042      	b.n	8008dcc <UART_SetConfig+0x348>
 8008d46:	bf00      	nop
 8008d48:	efff69f3 	.word	0xefff69f3
 8008d4c:	40011000 	.word	0x40011000
 8008d50:	40023800 	.word	0x40023800
 8008d54:	40004400 	.word	0x40004400
 8008d58:	40004800 	.word	0x40004800
 8008d5c:	40004c00 	.word	0x40004c00
 8008d60:	40005000 	.word	0x40005000
 8008d64:	40011400 	.word	0x40011400
 8008d68:	40007800 	.word	0x40007800
 8008d6c:	2310      	movs	r3, #16
 8008d6e:	77fb      	strb	r3, [r7, #31]
 8008d70:	e02c      	b.n	8008dcc <UART_SetConfig+0x348>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a72      	ldr	r2, [pc, #456]	; (8008f40 <UART_SetConfig+0x4bc>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d125      	bne.n	8008dc8 <UART_SetConfig+0x344>
 8008d7c:	4b71      	ldr	r3, [pc, #452]	; (8008f44 <UART_SetConfig+0x4c0>)
 8008d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d82:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008d86:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008d8a:	d017      	beq.n	8008dbc <UART_SetConfig+0x338>
 8008d8c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008d90:	d817      	bhi.n	8008dc2 <UART_SetConfig+0x33e>
 8008d92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d96:	d00b      	beq.n	8008db0 <UART_SetConfig+0x32c>
 8008d98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d9c:	d811      	bhi.n	8008dc2 <UART_SetConfig+0x33e>
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d003      	beq.n	8008daa <UART_SetConfig+0x326>
 8008da2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008da6:	d006      	beq.n	8008db6 <UART_SetConfig+0x332>
 8008da8:	e00b      	b.n	8008dc2 <UART_SetConfig+0x33e>
 8008daa:	2300      	movs	r3, #0
 8008dac:	77fb      	strb	r3, [r7, #31]
 8008dae:	e00d      	b.n	8008dcc <UART_SetConfig+0x348>
 8008db0:	2302      	movs	r3, #2
 8008db2:	77fb      	strb	r3, [r7, #31]
 8008db4:	e00a      	b.n	8008dcc <UART_SetConfig+0x348>
 8008db6:	2304      	movs	r3, #4
 8008db8:	77fb      	strb	r3, [r7, #31]
 8008dba:	e007      	b.n	8008dcc <UART_SetConfig+0x348>
 8008dbc:	2308      	movs	r3, #8
 8008dbe:	77fb      	strb	r3, [r7, #31]
 8008dc0:	e004      	b.n	8008dcc <UART_SetConfig+0x348>
 8008dc2:	2310      	movs	r3, #16
 8008dc4:	77fb      	strb	r3, [r7, #31]
 8008dc6:	e001      	b.n	8008dcc <UART_SetConfig+0x348>
 8008dc8:	2310      	movs	r3, #16
 8008dca:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	69db      	ldr	r3, [r3, #28]
 8008dd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dd4:	d15b      	bne.n	8008e8e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8008dd6:	7ffb      	ldrb	r3, [r7, #31]
 8008dd8:	2b08      	cmp	r3, #8
 8008dda:	d828      	bhi.n	8008e2e <UART_SetConfig+0x3aa>
 8008ddc:	a201      	add	r2, pc, #4	; (adr r2, 8008de4 <UART_SetConfig+0x360>)
 8008dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de2:	bf00      	nop
 8008de4:	08008e09 	.word	0x08008e09
 8008de8:	08008e11 	.word	0x08008e11
 8008dec:	08008e19 	.word	0x08008e19
 8008df0:	08008e2f 	.word	0x08008e2f
 8008df4:	08008e1f 	.word	0x08008e1f
 8008df8:	08008e2f 	.word	0x08008e2f
 8008dfc:	08008e2f 	.word	0x08008e2f
 8008e00:	08008e2f 	.word	0x08008e2f
 8008e04:	08008e27 	.word	0x08008e27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e08:	f7fd f986 	bl	8006118 <HAL_RCC_GetPCLK1Freq>
 8008e0c:	61b8      	str	r0, [r7, #24]
        break;
 8008e0e:	e013      	b.n	8008e38 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e10:	f7fd f996 	bl	8006140 <HAL_RCC_GetPCLK2Freq>
 8008e14:	61b8      	str	r0, [r7, #24]
        break;
 8008e16:	e00f      	b.n	8008e38 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e18:	4b4b      	ldr	r3, [pc, #300]	; (8008f48 <UART_SetConfig+0x4c4>)
 8008e1a:	61bb      	str	r3, [r7, #24]
        break;
 8008e1c:	e00c      	b.n	8008e38 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e1e:	f7fd f869 	bl	8005ef4 <HAL_RCC_GetSysClockFreq>
 8008e22:	61b8      	str	r0, [r7, #24]
        break;
 8008e24:	e008      	b.n	8008e38 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e2a:	61bb      	str	r3, [r7, #24]
        break;
 8008e2c:	e004      	b.n	8008e38 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008e32:	2301      	movs	r3, #1
 8008e34:	77bb      	strb	r3, [r7, #30]
        break;
 8008e36:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008e38:	69bb      	ldr	r3, [r7, #24]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d074      	beq.n	8008f28 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008e3e:	69bb      	ldr	r3, [r7, #24]
 8008e40:	005a      	lsls	r2, r3, #1
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	085b      	lsrs	r3, r3, #1
 8008e48:	441a      	add	r2, r3
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e52:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	2b0f      	cmp	r3, #15
 8008e58:	d916      	bls.n	8008e88 <UART_SetConfig+0x404>
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e60:	d212      	bcs.n	8008e88 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	f023 030f 	bic.w	r3, r3, #15
 8008e6a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	085b      	lsrs	r3, r3, #1
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	f003 0307 	and.w	r3, r3, #7
 8008e76:	b29a      	uxth	r2, r3
 8008e78:	89fb      	ldrh	r3, [r7, #14]
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	89fa      	ldrh	r2, [r7, #14]
 8008e84:	60da      	str	r2, [r3, #12]
 8008e86:	e04f      	b.n	8008f28 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	77bb      	strb	r3, [r7, #30]
 8008e8c:	e04c      	b.n	8008f28 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008e8e:	7ffb      	ldrb	r3, [r7, #31]
 8008e90:	2b08      	cmp	r3, #8
 8008e92:	d828      	bhi.n	8008ee6 <UART_SetConfig+0x462>
 8008e94:	a201      	add	r2, pc, #4	; (adr r2, 8008e9c <UART_SetConfig+0x418>)
 8008e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e9a:	bf00      	nop
 8008e9c:	08008ec1 	.word	0x08008ec1
 8008ea0:	08008ec9 	.word	0x08008ec9
 8008ea4:	08008ed1 	.word	0x08008ed1
 8008ea8:	08008ee7 	.word	0x08008ee7
 8008eac:	08008ed7 	.word	0x08008ed7
 8008eb0:	08008ee7 	.word	0x08008ee7
 8008eb4:	08008ee7 	.word	0x08008ee7
 8008eb8:	08008ee7 	.word	0x08008ee7
 8008ebc:	08008edf 	.word	0x08008edf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ec0:	f7fd f92a 	bl	8006118 <HAL_RCC_GetPCLK1Freq>
 8008ec4:	61b8      	str	r0, [r7, #24]
        break;
 8008ec6:	e013      	b.n	8008ef0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ec8:	f7fd f93a 	bl	8006140 <HAL_RCC_GetPCLK2Freq>
 8008ecc:	61b8      	str	r0, [r7, #24]
        break;
 8008ece:	e00f      	b.n	8008ef0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ed0:	4b1d      	ldr	r3, [pc, #116]	; (8008f48 <UART_SetConfig+0x4c4>)
 8008ed2:	61bb      	str	r3, [r7, #24]
        break;
 8008ed4:	e00c      	b.n	8008ef0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ed6:	f7fd f80d 	bl	8005ef4 <HAL_RCC_GetSysClockFreq>
 8008eda:	61b8      	str	r0, [r7, #24]
        break;
 8008edc:	e008      	b.n	8008ef0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ee2:	61bb      	str	r3, [r7, #24]
        break;
 8008ee4:	e004      	b.n	8008ef0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008eea:	2301      	movs	r3, #1
 8008eec:	77bb      	strb	r3, [r7, #30]
        break;
 8008eee:	bf00      	nop
    }

    if (pclk != 0U)
 8008ef0:	69bb      	ldr	r3, [r7, #24]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d018      	beq.n	8008f28 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	085a      	lsrs	r2, r3, #1
 8008efc:	69bb      	ldr	r3, [r7, #24]
 8008efe:	441a      	add	r2, r3
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f08:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	2b0f      	cmp	r3, #15
 8008f0e:	d909      	bls.n	8008f24 <UART_SetConfig+0x4a0>
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f16:	d205      	bcs.n	8008f24 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	b29a      	uxth	r2, r3
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	60da      	str	r2, [r3, #12]
 8008f22:	e001      	b.n	8008f28 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008f24:	2301      	movs	r3, #1
 8008f26:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2200      	movs	r2, #0
 8008f32:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008f34:	7fbb      	ldrb	r3, [r7, #30]
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3720      	adds	r7, #32
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	40007c00 	.word	0x40007c00
 8008f44:	40023800 	.word	0x40023800
 8008f48:	00f42400 	.word	0x00f42400

08008f4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f58:	f003 0301 	and.w	r3, r3, #1
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d00a      	beq.n	8008f76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	430a      	orrs	r2, r1
 8008f74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7a:	f003 0302 	and.w	r3, r3, #2
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00a      	beq.n	8008f98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	430a      	orrs	r2, r1
 8008f96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9c:	f003 0304 	and.w	r3, r3, #4
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d00a      	beq.n	8008fba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	430a      	orrs	r2, r1
 8008fb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fbe:	f003 0308 	and.w	r3, r3, #8
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00a      	beq.n	8008fdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	430a      	orrs	r2, r1
 8008fda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe0:	f003 0310 	and.w	r3, r3, #16
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d00a      	beq.n	8008ffe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	430a      	orrs	r2, r1
 8008ffc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009002:	f003 0320 	and.w	r3, r3, #32
 8009006:	2b00      	cmp	r3, #0
 8009008:	d00a      	beq.n	8009020 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	430a      	orrs	r2, r1
 800901e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009028:	2b00      	cmp	r3, #0
 800902a:	d01a      	beq.n	8009062 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	430a      	orrs	r2, r1
 8009040:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009046:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800904a:	d10a      	bne.n	8009062 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	430a      	orrs	r2, r1
 8009060:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800906a:	2b00      	cmp	r3, #0
 800906c:	d00a      	beq.n	8009084 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	430a      	orrs	r2, r1
 8009082:	605a      	str	r2, [r3, #4]
  }
}
 8009084:	bf00      	nop
 8009086:	370c      	adds	r7, #12
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr

08009090 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b086      	sub	sp, #24
 8009094:	af02      	add	r7, sp, #8
 8009096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80090a0:	f7fb faf0 	bl	8004684 <HAL_GetTick>
 80090a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f003 0308 	and.w	r3, r3, #8
 80090b0:	2b08      	cmp	r3, #8
 80090b2:	d10e      	bne.n	80090d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80090b8:	9300      	str	r3, [sp, #0]
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2200      	movs	r2, #0
 80090be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 f831 	bl	800912a <UART_WaitOnFlagUntilTimeout>
 80090c8:	4603      	mov	r3, r0
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d001      	beq.n	80090d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090ce:	2303      	movs	r3, #3
 80090d0:	e027      	b.n	8009122 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f003 0304 	and.w	r3, r3, #4
 80090dc:	2b04      	cmp	r3, #4
 80090de:	d10e      	bne.n	80090fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80090e4:	9300      	str	r3, [sp, #0]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2200      	movs	r2, #0
 80090ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 f81b 	bl	800912a <UART_WaitOnFlagUntilTimeout>
 80090f4:	4603      	mov	r3, r0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d001      	beq.n	80090fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090fa:	2303      	movs	r3, #3
 80090fc:	e011      	b.n	8009122 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2220      	movs	r2, #32
 8009102:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2220      	movs	r2, #32
 8009108:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2200      	movs	r2, #0
 8009110:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2200      	movs	r2, #0
 8009116:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2200      	movs	r2, #0
 800911c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8009120:	2300      	movs	r3, #0
}
 8009122:	4618      	mov	r0, r3
 8009124:	3710      	adds	r7, #16
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}

0800912a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800912a:	b580      	push	{r7, lr}
 800912c:	b09c      	sub	sp, #112	; 0x70
 800912e:	af00      	add	r7, sp, #0
 8009130:	60f8      	str	r0, [r7, #12]
 8009132:	60b9      	str	r1, [r7, #8]
 8009134:	603b      	str	r3, [r7, #0]
 8009136:	4613      	mov	r3, r2
 8009138:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800913a:	e0a7      	b.n	800928c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800913c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800913e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009142:	f000 80a3 	beq.w	800928c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009146:	f7fb fa9d 	bl	8004684 <HAL_GetTick>
 800914a:	4602      	mov	r2, r0
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	1ad3      	subs	r3, r2, r3
 8009150:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009152:	429a      	cmp	r2, r3
 8009154:	d302      	bcc.n	800915c <UART_WaitOnFlagUntilTimeout+0x32>
 8009156:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009158:	2b00      	cmp	r3, #0
 800915a:	d13f      	bne.n	80091dc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009164:	e853 3f00 	ldrex	r3, [r3]
 8009168:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800916a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800916c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009170:	667b      	str	r3, [r7, #100]	; 0x64
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	461a      	mov	r2, r3
 8009178:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800917a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800917c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800917e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009180:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009182:	e841 2300 	strex	r3, r2, [r1]
 8009186:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800918a:	2b00      	cmp	r3, #0
 800918c:	d1e6      	bne.n	800915c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	3308      	adds	r3, #8
 8009194:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009198:	e853 3f00 	ldrex	r3, [r3]
 800919c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800919e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a0:	f023 0301 	bic.w	r3, r3, #1
 80091a4:	663b      	str	r3, [r7, #96]	; 0x60
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	3308      	adds	r3, #8
 80091ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80091ae:	64ba      	str	r2, [r7, #72]	; 0x48
 80091b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80091b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091b6:	e841 2300 	strex	r3, r2, [r1]
 80091ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80091bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d1e5      	bne.n	800918e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2220      	movs	r2, #32
 80091c6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2220      	movs	r2, #32
 80091cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2200      	movs	r2, #0
 80091d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80091d8:	2303      	movs	r3, #3
 80091da:	e068      	b.n	80092ae <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f003 0304 	and.w	r3, r3, #4
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d050      	beq.n	800928c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	69db      	ldr	r3, [r3, #28]
 80091f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091f8:	d148      	bne.n	800928c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009202:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920c:	e853 3f00 	ldrex	r3, [r3]
 8009210:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009214:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009218:	66fb      	str	r3, [r7, #108]	; 0x6c
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	461a      	mov	r2, r3
 8009220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009222:	637b      	str	r3, [r7, #52]	; 0x34
 8009224:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009226:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009228:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800922a:	e841 2300 	strex	r3, r2, [r1]
 800922e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009232:	2b00      	cmp	r3, #0
 8009234:	d1e6      	bne.n	8009204 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	3308      	adds	r3, #8
 800923c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	e853 3f00 	ldrex	r3, [r3]
 8009244:	613b      	str	r3, [r7, #16]
   return(result);
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	f023 0301 	bic.w	r3, r3, #1
 800924c:	66bb      	str	r3, [r7, #104]	; 0x68
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	3308      	adds	r3, #8
 8009254:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009256:	623a      	str	r2, [r7, #32]
 8009258:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925a:	69f9      	ldr	r1, [r7, #28]
 800925c:	6a3a      	ldr	r2, [r7, #32]
 800925e:	e841 2300 	strex	r3, r2, [r1]
 8009262:	61bb      	str	r3, [r7, #24]
   return(result);
 8009264:	69bb      	ldr	r3, [r7, #24]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d1e5      	bne.n	8009236 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2220      	movs	r2, #32
 800926e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2220      	movs	r2, #32
 8009274:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2220      	movs	r2, #32
 800927c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2200      	movs	r2, #0
 8009284:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009288:	2303      	movs	r3, #3
 800928a:	e010      	b.n	80092ae <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	69da      	ldr	r2, [r3, #28]
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	4013      	ands	r3, r2
 8009296:	68ba      	ldr	r2, [r7, #8]
 8009298:	429a      	cmp	r2, r3
 800929a:	bf0c      	ite	eq
 800929c:	2301      	moveq	r3, #1
 800929e:	2300      	movne	r3, #0
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	461a      	mov	r2, r3
 80092a4:	79fb      	ldrb	r3, [r7, #7]
 80092a6:	429a      	cmp	r2, r3
 80092a8:	f43f af48 	beq.w	800913c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3770      	adds	r7, #112	; 0x70
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
	...

080092b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b096      	sub	sp, #88	; 0x58
 80092bc:	af00      	add	r7, sp, #0
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	4613      	mov	r3, r2
 80092c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	68ba      	ldr	r2, [r7, #8]
 80092ca:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	88fa      	ldrh	r2, [r7, #6]
 80092d0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2200      	movs	r2, #0
 80092d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2222      	movs	r2, #34	; 0x22
 80092e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d028      	beq.n	800933e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092f0:	4a3e      	ldr	r2, [pc, #248]	; (80093ec <UART_Start_Receive_DMA+0x134>)
 80092f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092f8:	4a3d      	ldr	r2, [pc, #244]	; (80093f0 <UART_Start_Receive_DMA+0x138>)
 80092fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009300:	4a3c      	ldr	r2, [pc, #240]	; (80093f4 <UART_Start_Receive_DMA+0x13c>)
 8009302:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009308:	2200      	movs	r2, #0
 800930a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	3324      	adds	r3, #36	; 0x24
 8009316:	4619      	mov	r1, r3
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800931c:	461a      	mov	r2, r3
 800931e:	88fb      	ldrh	r3, [r7, #6]
 8009320:	f7fb fb70 	bl	8004a04 <HAL_DMA_Start_IT>
 8009324:	4603      	mov	r3, r0
 8009326:	2b00      	cmp	r3, #0
 8009328:	d009      	beq.n	800933e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2210      	movs	r2, #16
 800932e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2220      	movs	r2, #32
 8009336:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800933a:	2301      	movs	r3, #1
 800933c:	e051      	b.n	80093e2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	691b      	ldr	r3, [r3, #16]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d018      	beq.n	8009378 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800934c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800934e:	e853 3f00 	ldrex	r3, [r3]
 8009352:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800935a:	657b      	str	r3, [r7, #84]	; 0x54
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	461a      	mov	r2, r3
 8009362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009364:	64bb      	str	r3, [r7, #72]	; 0x48
 8009366:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009368:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800936a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800936c:	e841 2300 	strex	r3, r2, [r1]
 8009370:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009374:	2b00      	cmp	r3, #0
 8009376:	d1e6      	bne.n	8009346 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	3308      	adds	r3, #8
 800937e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009382:	e853 3f00 	ldrex	r3, [r3]
 8009386:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938a:	f043 0301 	orr.w	r3, r3, #1
 800938e:	653b      	str	r3, [r7, #80]	; 0x50
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	3308      	adds	r3, #8
 8009396:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009398:	637a      	str	r2, [r7, #52]	; 0x34
 800939a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800939c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800939e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093a0:	e841 2300 	strex	r3, r2, [r1]
 80093a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80093a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d1e5      	bne.n	8009378 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	3308      	adds	r3, #8
 80093b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	e853 3f00 	ldrex	r3, [r3]
 80093ba:	613b      	str	r3, [r7, #16]
   return(result);
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	3308      	adds	r3, #8
 80093ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80093cc:	623a      	str	r2, [r7, #32]
 80093ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d0:	69f9      	ldr	r1, [r7, #28]
 80093d2:	6a3a      	ldr	r2, [r7, #32]
 80093d4:	e841 2300 	strex	r3, r2, [r1]
 80093d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80093da:	69bb      	ldr	r3, [r7, #24]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d1e5      	bne.n	80093ac <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80093e0:	2300      	movs	r3, #0
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3758      	adds	r7, #88	; 0x58
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
 80093ea:	bf00      	nop
 80093ec:	080095bf 	.word	0x080095bf
 80093f0:	080096e7 	.word	0x080096e7
 80093f4:	08009725 	.word	0x08009725

080093f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b089      	sub	sp, #36	; 0x24
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	e853 3f00 	ldrex	r3, [r3]
 800940c:	60bb      	str	r3, [r7, #8]
   return(result);
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009414:	61fb      	str	r3, [r7, #28]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	461a      	mov	r2, r3
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	61bb      	str	r3, [r7, #24]
 8009420:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009422:	6979      	ldr	r1, [r7, #20]
 8009424:	69ba      	ldr	r2, [r7, #24]
 8009426:	e841 2300 	strex	r3, r2, [r1]
 800942a:	613b      	str	r3, [r7, #16]
   return(result);
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d1e6      	bne.n	8009400 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2220      	movs	r2, #32
 8009436:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8009438:	bf00      	nop
 800943a:	3724      	adds	r7, #36	; 0x24
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr

08009444 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009444:	b480      	push	{r7}
 8009446:	b095      	sub	sp, #84	; 0x54
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009454:	e853 3f00 	ldrex	r3, [r3]
 8009458:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800945a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800945c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009460:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	461a      	mov	r2, r3
 8009468:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800946a:	643b      	str	r3, [r7, #64]	; 0x40
 800946c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800946e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009470:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009472:	e841 2300 	strex	r3, r2, [r1]
 8009476:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800947a:	2b00      	cmp	r3, #0
 800947c:	d1e6      	bne.n	800944c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	3308      	adds	r3, #8
 8009484:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009486:	6a3b      	ldr	r3, [r7, #32]
 8009488:	e853 3f00 	ldrex	r3, [r3]
 800948c:	61fb      	str	r3, [r7, #28]
   return(result);
 800948e:	69fb      	ldr	r3, [r7, #28]
 8009490:	f023 0301 	bic.w	r3, r3, #1
 8009494:	64bb      	str	r3, [r7, #72]	; 0x48
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	3308      	adds	r3, #8
 800949c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800949e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80094a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80094a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094a6:	e841 2300 	strex	r3, r2, [r1]
 80094aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80094ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d1e5      	bne.n	800947e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d118      	bne.n	80094ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	e853 3f00 	ldrex	r3, [r3]
 80094c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	f023 0310 	bic.w	r3, r3, #16
 80094ce:	647b      	str	r3, [r7, #68]	; 0x44
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	461a      	mov	r2, r3
 80094d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094d8:	61bb      	str	r3, [r7, #24]
 80094da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094dc:	6979      	ldr	r1, [r7, #20]
 80094de:	69ba      	ldr	r2, [r7, #24]
 80094e0:	e841 2300 	strex	r3, r2, [r1]
 80094e4:	613b      	str	r3, [r7, #16]
   return(result);
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d1e6      	bne.n	80094ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2220      	movs	r2, #32
 80094f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2200      	movs	r2, #0
 80094f8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2200      	movs	r2, #0
 80094fe:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009500:	bf00      	nop
 8009502:	3754      	adds	r7, #84	; 0x54
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr

0800950c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b090      	sub	sp, #64	; 0x40
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009518:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	69db      	ldr	r3, [r3, #28]
 800951e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009522:	d037      	beq.n	8009594 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8009524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009526:	2200      	movs	r2, #0
 8009528:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800952c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	3308      	adds	r3, #8
 8009532:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009536:	e853 3f00 	ldrex	r3, [r3]
 800953a:	623b      	str	r3, [r7, #32]
   return(result);
 800953c:	6a3b      	ldr	r3, [r7, #32]
 800953e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009542:	63bb      	str	r3, [r7, #56]	; 0x38
 8009544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	3308      	adds	r3, #8
 800954a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800954c:	633a      	str	r2, [r7, #48]	; 0x30
 800954e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009550:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009552:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009554:	e841 2300 	strex	r3, r2, [r1]
 8009558:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800955a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800955c:	2b00      	cmp	r3, #0
 800955e:	d1e5      	bne.n	800952c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	e853 3f00 	ldrex	r3, [r3]
 800956c:	60fb      	str	r3, [r7, #12]
   return(result);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009574:	637b      	str	r3, [r7, #52]	; 0x34
 8009576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	461a      	mov	r2, r3
 800957c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800957e:	61fb      	str	r3, [r7, #28]
 8009580:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009582:	69b9      	ldr	r1, [r7, #24]
 8009584:	69fa      	ldr	r2, [r7, #28]
 8009586:	e841 2300 	strex	r3, r2, [r1]
 800958a:	617b      	str	r3, [r7, #20]
   return(result);
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d1e6      	bne.n	8009560 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009592:	e002      	b.n	800959a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8009594:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009596:	f7ff fa2d 	bl	80089f4 <HAL_UART_TxCpltCallback>
}
 800959a:	bf00      	nop
 800959c:	3740      	adds	r7, #64	; 0x40
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80095a2:	b580      	push	{r7, lr}
 80095a4:	b084      	sub	sp, #16
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ae:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	f7ff fa29 	bl	8008a08 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095b6:	bf00      	nop
 80095b8:	3710      	adds	r7, #16
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}

080095be <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80095be:	b580      	push	{r7, lr}
 80095c0:	b09c      	sub	sp, #112	; 0x70
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ca:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	69db      	ldr	r3, [r3, #28]
 80095d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095d4:	d071      	beq.n	80096ba <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80095d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095d8:	2200      	movs	r2, #0
 80095da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095e6:	e853 3f00 	ldrex	r3, [r3]
 80095ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80095ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80095f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	461a      	mov	r2, r3
 80095fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80095fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80095fe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009600:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009602:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009604:	e841 2300 	strex	r3, r2, [r1]
 8009608:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800960a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800960c:	2b00      	cmp	r3, #0
 800960e:	d1e6      	bne.n	80095de <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	3308      	adds	r3, #8
 8009616:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800961a:	e853 3f00 	ldrex	r3, [r3]
 800961e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009622:	f023 0301 	bic.w	r3, r3, #1
 8009626:	667b      	str	r3, [r7, #100]	; 0x64
 8009628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	3308      	adds	r3, #8
 800962e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009630:	647a      	str	r2, [r7, #68]	; 0x44
 8009632:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009634:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009636:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009638:	e841 2300 	strex	r3, r2, [r1]
 800963c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800963e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009640:	2b00      	cmp	r3, #0
 8009642:	d1e5      	bne.n	8009610 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	3308      	adds	r3, #8
 800964a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800964c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964e:	e853 3f00 	ldrex	r3, [r3]
 8009652:	623b      	str	r3, [r7, #32]
   return(result);
 8009654:	6a3b      	ldr	r3, [r7, #32]
 8009656:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800965a:	663b      	str	r3, [r7, #96]	; 0x60
 800965c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	3308      	adds	r3, #8
 8009662:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009664:	633a      	str	r2, [r7, #48]	; 0x30
 8009666:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009668:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800966a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800966c:	e841 2300 	strex	r3, r2, [r1]
 8009670:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009674:	2b00      	cmp	r3, #0
 8009676:	d1e5      	bne.n	8009644 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800967a:	2220      	movs	r2, #32
 800967c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009680:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009684:	2b01      	cmp	r3, #1
 8009686:	d118      	bne.n	80096ba <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	e853 3f00 	ldrex	r3, [r3]
 8009694:	60fb      	str	r3, [r7, #12]
   return(result);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f023 0310 	bic.w	r3, r3, #16
 800969c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800969e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	461a      	mov	r2, r3
 80096a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096a6:	61fb      	str	r3, [r7, #28]
 80096a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096aa:	69b9      	ldr	r1, [r7, #24]
 80096ac:	69fa      	ldr	r2, [r7, #28]
 80096ae:	e841 2300 	strex	r3, r2, [r1]
 80096b2:	617b      	str	r3, [r7, #20]
   return(result);
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d1e6      	bne.n	8009688 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096bc:	2200      	movs	r2, #0
 80096be:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d107      	bne.n	80096d8 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80096ce:	4619      	mov	r1, r3
 80096d0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80096d2:	f7ff f9c1 	bl	8008a58 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80096d6:	e002      	b.n	80096de <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80096d8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80096da:	f7ff f99f 	bl	8008a1c <HAL_UART_RxCpltCallback>
}
 80096de:	bf00      	nop
 80096e0:	3770      	adds	r7, #112	; 0x70
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b084      	sub	sp, #16
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096f2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2201      	movs	r2, #1
 80096f8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d109      	bne.n	8009716 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009708:	085b      	lsrs	r3, r3, #1
 800970a:	b29b      	uxth	r3, r3
 800970c:	4619      	mov	r1, r3
 800970e:	68f8      	ldr	r0, [r7, #12]
 8009710:	f7ff f9a2 	bl	8008a58 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009714:	e002      	b.n	800971c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009716:	68f8      	ldr	r0, [r7, #12]
 8009718:	f7ff f98a 	bl	8008a30 <HAL_UART_RxHalfCpltCallback>
}
 800971c:	bf00      	nop
 800971e:	3710      	adds	r7, #16
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b086      	sub	sp, #24
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009730:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009736:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800973e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	689b      	ldr	r3, [r3, #8]
 8009746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800974a:	2b80      	cmp	r3, #128	; 0x80
 800974c:	d109      	bne.n	8009762 <UART_DMAError+0x3e>
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	2b21      	cmp	r3, #33	; 0x21
 8009752:	d106      	bne.n	8009762 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	2200      	movs	r2, #0
 8009758:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800975c:	6978      	ldr	r0, [r7, #20]
 800975e:	f7ff fe4b 	bl	80093f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800976c:	2b40      	cmp	r3, #64	; 0x40
 800976e:	d109      	bne.n	8009784 <UART_DMAError+0x60>
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2b22      	cmp	r3, #34	; 0x22
 8009774:	d106      	bne.n	8009784 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	2200      	movs	r2, #0
 800977a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800977e:	6978      	ldr	r0, [r7, #20]
 8009780:	f7ff fe60 	bl	8009444 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800978a:	f043 0210 	orr.w	r2, r3, #16
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009794:	6978      	ldr	r0, [r7, #20]
 8009796:	f7ff f955 	bl	8008a44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800979a:	bf00      	nop
 800979c:	3718      	adds	r7, #24
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b084      	sub	sp, #16
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2200      	movs	r2, #0
 80097b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2200      	movs	r2, #0
 80097bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80097c0:	68f8      	ldr	r0, [r7, #12]
 80097c2:	f7ff f93f 	bl	8008a44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097c6:	bf00      	nop
 80097c8:	3710      	adds	r7, #16
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}

080097ce <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80097ce:	b580      	push	{r7, lr}
 80097d0:	b088      	sub	sp, #32
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	e853 3f00 	ldrex	r3, [r3]
 80097e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097ea:	61fb      	str	r3, [r7, #28]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	461a      	mov	r2, r3
 80097f2:	69fb      	ldr	r3, [r7, #28]
 80097f4:	61bb      	str	r3, [r7, #24]
 80097f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097f8:	6979      	ldr	r1, [r7, #20]
 80097fa:	69ba      	ldr	r2, [r7, #24]
 80097fc:	e841 2300 	strex	r3, r2, [r1]
 8009800:	613b      	str	r3, [r7, #16]
   return(result);
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d1e6      	bne.n	80097d6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2220      	movs	r2, #32
 800980c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2200      	movs	r2, #0
 8009812:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f7ff f8ed 	bl	80089f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800981a:	bf00      	nop
 800981c:	3720      	adds	r7, #32
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
	...

08009824 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009824:	b084      	sub	sp, #16
 8009826:	b580      	push	{r7, lr}
 8009828:	b084      	sub	sp, #16
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
 800982e:	f107 001c 	add.w	r0, r7, #28
 8009832:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009838:	2b01      	cmp	r3, #1
 800983a:	d120      	bne.n	800987e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009840:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	68da      	ldr	r2, [r3, #12]
 800984c:	4b20      	ldr	r3, [pc, #128]	; (80098d0 <USB_CoreInit+0xac>)
 800984e:	4013      	ands	r3, r2
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009862:	2b01      	cmp	r3, #1
 8009864:	d105      	bne.n	8009872 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	68db      	ldr	r3, [r3, #12]
 800986a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 fa96 	bl	8009da4 <USB_CoreReset>
 8009878:	4603      	mov	r3, r0
 800987a:	73fb      	strb	r3, [r7, #15]
 800987c:	e010      	b.n	80098a0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	68db      	ldr	r3, [r3, #12]
 8009882:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 fa8a 	bl	8009da4 <USB_CoreReset>
 8009890:	4603      	mov	r3, r0
 8009892:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009898:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80098a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d10b      	bne.n	80098be <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	689b      	ldr	r3, [r3, #8]
 80098aa:	f043 0206 	orr.w	r2, r3, #6
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	f043 0220 	orr.w	r2, r3, #32
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80098be:	7bfb      	ldrb	r3, [r7, #15]
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3710      	adds	r7, #16
 80098c4:	46bd      	mov	sp, r7
 80098c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80098ca:	b004      	add	sp, #16
 80098cc:	4770      	bx	lr
 80098ce:	bf00      	nop
 80098d0:	ffbdffbf 	.word	0xffbdffbf

080098d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b083      	sub	sp, #12
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	f023 0201 	bic.w	r2, r3, #1
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80098e8:	2300      	movs	r3, #0
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	370c      	adds	r7, #12
 80098ee:	46bd      	mov	sp, r7
 80098f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f4:	4770      	bx	lr

080098f6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80098f6:	b580      	push	{r7, lr}
 80098f8:	b084      	sub	sp, #16
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
 80098fe:	460b      	mov	r3, r1
 8009900:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009902:	2300      	movs	r3, #0
 8009904:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	68db      	ldr	r3, [r3, #12]
 800990a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009912:	78fb      	ldrb	r3, [r7, #3]
 8009914:	2b01      	cmp	r3, #1
 8009916:	d115      	bne.n	8009944 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	68db      	ldr	r3, [r3, #12]
 800991c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009924:	2001      	movs	r0, #1
 8009926:	f7fa feb9 	bl	800469c <HAL_Delay>
      ms++;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	3301      	adds	r3, #1
 800992e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f000 fa29 	bl	8009d88 <USB_GetMode>
 8009936:	4603      	mov	r3, r0
 8009938:	2b01      	cmp	r3, #1
 800993a:	d01e      	beq.n	800997a <USB_SetCurrentMode+0x84>
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2b31      	cmp	r3, #49	; 0x31
 8009940:	d9f0      	bls.n	8009924 <USB_SetCurrentMode+0x2e>
 8009942:	e01a      	b.n	800997a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009944:	78fb      	ldrb	r3, [r7, #3]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d115      	bne.n	8009976 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	68db      	ldr	r3, [r3, #12]
 800994e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009956:	2001      	movs	r0, #1
 8009958:	f7fa fea0 	bl	800469c <HAL_Delay>
      ms++;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	3301      	adds	r3, #1
 8009960:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 fa10 	bl	8009d88 <USB_GetMode>
 8009968:	4603      	mov	r3, r0
 800996a:	2b00      	cmp	r3, #0
 800996c:	d005      	beq.n	800997a <USB_SetCurrentMode+0x84>
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2b31      	cmp	r3, #49	; 0x31
 8009972:	d9f0      	bls.n	8009956 <USB_SetCurrentMode+0x60>
 8009974:	e001      	b.n	800997a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009976:	2301      	movs	r3, #1
 8009978:	e005      	b.n	8009986 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2b32      	cmp	r3, #50	; 0x32
 800997e:	d101      	bne.n	8009984 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009980:	2301      	movs	r3, #1
 8009982:	e000      	b.n	8009986 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009984:	2300      	movs	r3, #0
}
 8009986:	4618      	mov	r0, r3
 8009988:	3710      	adds	r7, #16
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
	...

08009990 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009990:	b084      	sub	sp, #16
 8009992:	b580      	push	{r7, lr}
 8009994:	b086      	sub	sp, #24
 8009996:	af00      	add	r7, sp, #0
 8009998:	6078      	str	r0, [r7, #4]
 800999a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800999e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80099a2:	2300      	movs	r3, #0
 80099a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80099aa:	2300      	movs	r3, #0
 80099ac:	613b      	str	r3, [r7, #16]
 80099ae:	e009      	b.n	80099c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	3340      	adds	r3, #64	; 0x40
 80099b6:	009b      	lsls	r3, r3, #2
 80099b8:	4413      	add	r3, r2
 80099ba:	2200      	movs	r2, #0
 80099bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	3301      	adds	r3, #1
 80099c2:	613b      	str	r3, [r7, #16]
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	2b0e      	cmp	r3, #14
 80099c8:	d9f2      	bls.n	80099b0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80099ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d11c      	bne.n	8009a0a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	68fa      	ldr	r2, [r7, #12]
 80099da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80099de:	f043 0302 	orr.w	r3, r3, #2
 80099e2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099e8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	601a      	str	r2, [r3, #0]
 8009a08:	e005      	b.n	8009a16 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a0e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	2300      	movs	r3, #0
 8009a20:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a28:	4619      	mov	r1, r3
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a30:	461a      	mov	r2, r3
 8009a32:	680b      	ldr	r3, [r1, #0]
 8009a34:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d10c      	bne.n	8009a56 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d104      	bne.n	8009a4c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009a42:	2100      	movs	r1, #0
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f000 f965 	bl	8009d14 <USB_SetDevSpeed>
 8009a4a:	e008      	b.n	8009a5e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009a4c:	2101      	movs	r1, #1
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 f960 	bl	8009d14 <USB_SetDevSpeed>
 8009a54:	e003      	b.n	8009a5e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009a56:	2103      	movs	r1, #3
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 f95b 	bl	8009d14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009a5e:	2110      	movs	r1, #16
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 f8f3 	bl	8009c4c <USB_FlushTxFifo>
 8009a66:	4603      	mov	r3, r0
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d001      	beq.n	8009a70 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 f91f 	bl	8009cb4 <USB_FlushRxFifo>
 8009a76:	4603      	mov	r3, r0
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d001      	beq.n	8009a80 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a86:	461a      	mov	r2, r3
 8009a88:	2300      	movs	r3, #0
 8009a8a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a92:	461a      	mov	r2, r3
 8009a94:	2300      	movs	r3, #0
 8009a96:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	613b      	str	r3, [r7, #16]
 8009aa8:	e043      	b.n	8009b32 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	015a      	lsls	r2, r3, #5
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	4413      	add	r3, r2
 8009ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009abc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ac0:	d118      	bne.n	8009af4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d10a      	bne.n	8009ade <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	015a      	lsls	r2, r3, #5
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	4413      	add	r3, r2
 8009ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009ada:	6013      	str	r3, [r2, #0]
 8009adc:	e013      	b.n	8009b06 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	015a      	lsls	r2, r3, #5
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	4413      	add	r3, r2
 8009ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aea:	461a      	mov	r2, r3
 8009aec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009af0:	6013      	str	r3, [r2, #0]
 8009af2:	e008      	b.n	8009b06 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	015a      	lsls	r2, r3, #5
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	4413      	add	r3, r2
 8009afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b00:	461a      	mov	r2, r3
 8009b02:	2300      	movs	r3, #0
 8009b04:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	015a      	lsls	r2, r3, #5
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	4413      	add	r3, r2
 8009b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b12:	461a      	mov	r2, r3
 8009b14:	2300      	movs	r3, #0
 8009b16:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	015a      	lsls	r2, r3, #5
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	4413      	add	r3, r2
 8009b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b24:	461a      	mov	r2, r3
 8009b26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009b2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	3301      	adds	r3, #1
 8009b30:	613b      	str	r3, [r7, #16]
 8009b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b34:	693a      	ldr	r2, [r7, #16]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d3b7      	bcc.n	8009aaa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	613b      	str	r3, [r7, #16]
 8009b3e:	e043      	b.n	8009bc8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	015a      	lsls	r2, r3, #5
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	4413      	add	r3, r2
 8009b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b56:	d118      	bne.n	8009b8a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d10a      	bne.n	8009b74 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	015a      	lsls	r2, r3, #5
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	4413      	add	r3, r2
 8009b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009b70:	6013      	str	r3, [r2, #0]
 8009b72:	e013      	b.n	8009b9c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	015a      	lsls	r2, r3, #5
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	4413      	add	r3, r2
 8009b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b80:	461a      	mov	r2, r3
 8009b82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009b86:	6013      	str	r3, [r2, #0]
 8009b88:	e008      	b.n	8009b9c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	015a      	lsls	r2, r3, #5
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	4413      	add	r3, r2
 8009b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b96:	461a      	mov	r2, r3
 8009b98:	2300      	movs	r3, #0
 8009b9a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	015a      	lsls	r2, r3, #5
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	4413      	add	r3, r2
 8009ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ba8:	461a      	mov	r2, r3
 8009baa:	2300      	movs	r3, #0
 8009bac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	015a      	lsls	r2, r3, #5
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	4413      	add	r3, r2
 8009bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bba:	461a      	mov	r2, r3
 8009bbc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009bc0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	613b      	str	r3, [r7, #16]
 8009bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bca:	693a      	ldr	r2, [r7, #16]
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d3b7      	bcc.n	8009b40 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bd6:	691b      	ldr	r3, [r3, #16]
 8009bd8:	68fa      	ldr	r2, [r7, #12]
 8009bda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009bde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009be2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2200      	movs	r2, #0
 8009be8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009bf0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d105      	bne.n	8009c04 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	699b      	ldr	r3, [r3, #24]
 8009bfc:	f043 0210 	orr.w	r2, r3, #16
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	699a      	ldr	r2, [r3, #24]
 8009c08:	4b0e      	ldr	r3, [pc, #56]	; (8009c44 <USB_DevInit+0x2b4>)
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d005      	beq.n	8009c22 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	699b      	ldr	r3, [r3, #24]
 8009c1a:	f043 0208 	orr.w	r2, r3, #8
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d105      	bne.n	8009c34 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	699a      	ldr	r2, [r3, #24]
 8009c2c:	4b06      	ldr	r3, [pc, #24]	; (8009c48 <USB_DevInit+0x2b8>)
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3718      	adds	r7, #24
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009c40:	b004      	add	sp, #16
 8009c42:	4770      	bx	lr
 8009c44:	803c3800 	.word	0x803c3800
 8009c48:	40000004 	.word	0x40000004

08009c4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b085      	sub	sp, #20
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009c56:	2300      	movs	r3, #0
 8009c58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	3301      	adds	r3, #1
 8009c5e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	4a13      	ldr	r2, [pc, #76]	; (8009cb0 <USB_FlushTxFifo+0x64>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d901      	bls.n	8009c6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009c68:	2303      	movs	r3, #3
 8009c6a:	e01b      	b.n	8009ca4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	691b      	ldr	r3, [r3, #16]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	daf2      	bge.n	8009c5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009c74:	2300      	movs	r3, #0
 8009c76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	019b      	lsls	r3, r3, #6
 8009c7c:	f043 0220 	orr.w	r2, r3, #32
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	3301      	adds	r3, #1
 8009c88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	4a08      	ldr	r2, [pc, #32]	; (8009cb0 <USB_FlushTxFifo+0x64>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d901      	bls.n	8009c96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009c92:	2303      	movs	r3, #3
 8009c94:	e006      	b.n	8009ca4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	691b      	ldr	r3, [r3, #16]
 8009c9a:	f003 0320 	and.w	r3, r3, #32
 8009c9e:	2b20      	cmp	r3, #32
 8009ca0:	d0f0      	beq.n	8009c84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009ca2:	2300      	movs	r3, #0
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3714      	adds	r7, #20
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr
 8009cb0:	00030d40 	.word	0x00030d40

08009cb4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b085      	sub	sp, #20
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	4a11      	ldr	r2, [pc, #68]	; (8009d10 <USB_FlushRxFifo+0x5c>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d901      	bls.n	8009cd2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009cce:	2303      	movs	r3, #3
 8009cd0:	e018      	b.n	8009d04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	691b      	ldr	r3, [r3, #16]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	daf2      	bge.n	8009cc0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2210      	movs	r2, #16
 8009ce2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	4a08      	ldr	r2, [pc, #32]	; (8009d10 <USB_FlushRxFifo+0x5c>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d901      	bls.n	8009cf6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009cf2:	2303      	movs	r3, #3
 8009cf4:	e006      	b.n	8009d04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	691b      	ldr	r3, [r3, #16]
 8009cfa:	f003 0310 	and.w	r3, r3, #16
 8009cfe:	2b10      	cmp	r3, #16
 8009d00:	d0f0      	beq.n	8009ce4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009d02:	2300      	movs	r3, #0
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3714      	adds	r7, #20
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr
 8009d10:	00030d40 	.word	0x00030d40

08009d14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b085      	sub	sp, #20
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	460b      	mov	r3, r1
 8009d1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d2a:	681a      	ldr	r2, [r3, #0]
 8009d2c:	78fb      	ldrb	r3, [r7, #3]
 8009d2e:	68f9      	ldr	r1, [r7, #12]
 8009d30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d34:	4313      	orrs	r3, r2
 8009d36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009d38:	2300      	movs	r3, #0
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3714      	adds	r7, #20
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr

08009d46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009d46:	b480      	push	{r7}
 8009d48:	b085      	sub	sp, #20
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	68fa      	ldr	r2, [r7, #12]
 8009d5c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009d60:	f023 0303 	bic.w	r3, r3, #3
 8009d64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	68fa      	ldr	r2, [r7, #12]
 8009d70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d74:	f043 0302 	orr.w	r3, r3, #2
 8009d78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009d7a:	2300      	movs	r3, #0
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3714      	adds	r7, #20
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr

08009d88 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b083      	sub	sp, #12
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	695b      	ldr	r3, [r3, #20]
 8009d94:	f003 0301 	and.w	r3, r3, #1
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	370c      	adds	r7, #12
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr

08009da4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b085      	sub	sp, #20
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009dac:	2300      	movs	r3, #0
 8009dae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	3301      	adds	r3, #1
 8009db4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	4a13      	ldr	r2, [pc, #76]	; (8009e08 <USB_CoreReset+0x64>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d901      	bls.n	8009dc2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009dbe:	2303      	movs	r3, #3
 8009dc0:	e01b      	b.n	8009dfa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	691b      	ldr	r3, [r3, #16]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	daf2      	bge.n	8009db0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	691b      	ldr	r3, [r3, #16]
 8009dd2:	f043 0201 	orr.w	r2, r3, #1
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	3301      	adds	r3, #1
 8009dde:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	4a09      	ldr	r2, [pc, #36]	; (8009e08 <USB_CoreReset+0x64>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d901      	bls.n	8009dec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009de8:	2303      	movs	r3, #3
 8009dea:	e006      	b.n	8009dfa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	691b      	ldr	r3, [r3, #16]
 8009df0:	f003 0301 	and.w	r3, r3, #1
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	d0f0      	beq.n	8009dda <USB_CoreReset+0x36>

  return HAL_OK;
 8009df8:	2300      	movs	r3, #0
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3714      	adds	r7, #20
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e04:	4770      	bx	lr
 8009e06:	bf00      	nop
 8009e08:	00030d40 	.word	0x00030d40

08009e0c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009e0c:	b480      	push	{r7}
 8009e0e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8009e10:	bf00      	nop
 8009e12:	46bd      	mov	sp, r7
 8009e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e18:	4770      	bx	lr
	...

08009e1c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009e1c:	b480      	push	{r7}
 8009e1e:	b085      	sub	sp, #20
 8009e20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e22:	f3ef 8305 	mrs	r3, IPSR
 8009e26:	60bb      	str	r3, [r7, #8]
  return(result);
 8009e28:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d10f      	bne.n	8009e4e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e2e:	f3ef 8310 	mrs	r3, PRIMASK
 8009e32:	607b      	str	r3, [r7, #4]
  return(result);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d105      	bne.n	8009e46 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009e3a:	f3ef 8311 	mrs	r3, BASEPRI
 8009e3e:	603b      	str	r3, [r7, #0]
  return(result);
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d007      	beq.n	8009e56 <osKernelInitialize+0x3a>
 8009e46:	4b0e      	ldr	r3, [pc, #56]	; (8009e80 <osKernelInitialize+0x64>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	2b02      	cmp	r3, #2
 8009e4c:	d103      	bne.n	8009e56 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009e4e:	f06f 0305 	mvn.w	r3, #5
 8009e52:	60fb      	str	r3, [r7, #12]
 8009e54:	e00c      	b.n	8009e70 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009e56:	4b0a      	ldr	r3, [pc, #40]	; (8009e80 <osKernelInitialize+0x64>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d105      	bne.n	8009e6a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009e5e:	4b08      	ldr	r3, [pc, #32]	; (8009e80 <osKernelInitialize+0x64>)
 8009e60:	2201      	movs	r2, #1
 8009e62:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009e64:	2300      	movs	r3, #0
 8009e66:	60fb      	str	r3, [r7, #12]
 8009e68:	e002      	b.n	8009e70 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8009e6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e6e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009e70:	68fb      	ldr	r3, [r7, #12]
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3714      	adds	r7, #20
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr
 8009e7e:	bf00      	nop
 8009e80:	20008038 	.word	0x20008038

08009e84 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e8a:	f3ef 8305 	mrs	r3, IPSR
 8009e8e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009e90:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d10f      	bne.n	8009eb6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e96:	f3ef 8310 	mrs	r3, PRIMASK
 8009e9a:	607b      	str	r3, [r7, #4]
  return(result);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d105      	bne.n	8009eae <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009ea2:	f3ef 8311 	mrs	r3, BASEPRI
 8009ea6:	603b      	str	r3, [r7, #0]
  return(result);
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d007      	beq.n	8009ebe <osKernelStart+0x3a>
 8009eae:	4b0f      	ldr	r3, [pc, #60]	; (8009eec <osKernelStart+0x68>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	2b02      	cmp	r3, #2
 8009eb4:	d103      	bne.n	8009ebe <osKernelStart+0x3a>
    stat = osErrorISR;
 8009eb6:	f06f 0305 	mvn.w	r3, #5
 8009eba:	60fb      	str	r3, [r7, #12]
 8009ebc:	e010      	b.n	8009ee0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009ebe:	4b0b      	ldr	r3, [pc, #44]	; (8009eec <osKernelStart+0x68>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	d109      	bne.n	8009eda <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009ec6:	f7ff ffa1 	bl	8009e0c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009eca:	4b08      	ldr	r3, [pc, #32]	; (8009eec <osKernelStart+0x68>)
 8009ecc:	2202      	movs	r2, #2
 8009ece:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009ed0:	f001 f8ca 	bl	800b068 <vTaskStartScheduler>
      stat = osOK;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	60fb      	str	r3, [r7, #12]
 8009ed8:	e002      	b.n	8009ee0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8009eda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ede:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3710      	adds	r7, #16
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	bf00      	nop
 8009eec:	20008038 	.word	0x20008038

08009ef0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b090      	sub	sp, #64	; 0x40
 8009ef4:	af04      	add	r7, sp, #16
 8009ef6:	60f8      	str	r0, [r7, #12]
 8009ef8:	60b9      	str	r1, [r7, #8]
 8009efa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009efc:	2300      	movs	r3, #0
 8009efe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f00:	f3ef 8305 	mrs	r3, IPSR
 8009f04:	61fb      	str	r3, [r7, #28]
  return(result);
 8009f06:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	f040 808f 	bne.w	800a02c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f0e:	f3ef 8310 	mrs	r3, PRIMASK
 8009f12:	61bb      	str	r3, [r7, #24]
  return(result);
 8009f14:	69bb      	ldr	r3, [r7, #24]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d105      	bne.n	8009f26 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009f1a:	f3ef 8311 	mrs	r3, BASEPRI
 8009f1e:	617b      	str	r3, [r7, #20]
  return(result);
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d003      	beq.n	8009f2e <osThreadNew+0x3e>
 8009f26:	4b44      	ldr	r3, [pc, #272]	; (800a038 <osThreadNew+0x148>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	2b02      	cmp	r3, #2
 8009f2c:	d07e      	beq.n	800a02c <osThreadNew+0x13c>
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d07b      	beq.n	800a02c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8009f34:	2380      	movs	r3, #128	; 0x80
 8009f36:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8009f38:	2318      	movs	r3, #24
 8009f3a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8009f40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f44:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d045      	beq.n	8009fd8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d002      	beq.n	8009f5a <osThreadNew+0x6a>
        name = attr->name;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	699b      	ldr	r3, [r3, #24]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d002      	beq.n	8009f68 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	699b      	ldr	r3, [r3, #24]
 8009f66:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d008      	beq.n	8009f80 <osThreadNew+0x90>
 8009f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f70:	2b38      	cmp	r3, #56	; 0x38
 8009f72:	d805      	bhi.n	8009f80 <osThreadNew+0x90>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	f003 0301 	and.w	r3, r3, #1
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d001      	beq.n	8009f84 <osThreadNew+0x94>
        return (NULL);
 8009f80:	2300      	movs	r3, #0
 8009f82:	e054      	b.n	800a02e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	695b      	ldr	r3, [r3, #20]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d003      	beq.n	8009f94 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	695b      	ldr	r3, [r3, #20]
 8009f90:	089b      	lsrs	r3, r3, #2
 8009f92:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	689b      	ldr	r3, [r3, #8]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d00e      	beq.n	8009fba <osThreadNew+0xca>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	68db      	ldr	r3, [r3, #12]
 8009fa0:	2ba7      	cmp	r3, #167	; 0xa7
 8009fa2:	d90a      	bls.n	8009fba <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d006      	beq.n	8009fba <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	695b      	ldr	r3, [r3, #20]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d002      	beq.n	8009fba <osThreadNew+0xca>
        mem = 1;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	623b      	str	r3, [r7, #32]
 8009fb8:	e010      	b.n	8009fdc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	689b      	ldr	r3, [r3, #8]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d10c      	bne.n	8009fdc <osThreadNew+0xec>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	68db      	ldr	r3, [r3, #12]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d108      	bne.n	8009fdc <osThreadNew+0xec>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	691b      	ldr	r3, [r3, #16]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d104      	bne.n	8009fdc <osThreadNew+0xec>
          mem = 0;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	623b      	str	r3, [r7, #32]
 8009fd6:	e001      	b.n	8009fdc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009fdc:	6a3b      	ldr	r3, [r7, #32]
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d110      	bne.n	800a004 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009fea:	9202      	str	r2, [sp, #8]
 8009fec:	9301      	str	r3, [sp, #4]
 8009fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff0:	9300      	str	r3, [sp, #0]
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ff6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ff8:	68f8      	ldr	r0, [r7, #12]
 8009ffa:	f000 fe3f 	bl	800ac7c <xTaskCreateStatic>
 8009ffe:	4603      	mov	r3, r0
 800a000:	613b      	str	r3, [r7, #16]
 800a002:	e013      	b.n	800a02c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800a004:	6a3b      	ldr	r3, [r7, #32]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d110      	bne.n	800a02c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a00c:	b29a      	uxth	r2, r3
 800a00e:	f107 0310 	add.w	r3, r7, #16
 800a012:	9301      	str	r3, [sp, #4]
 800a014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a016:	9300      	str	r3, [sp, #0]
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a01c:	68f8      	ldr	r0, [r7, #12]
 800a01e:	f000 fe90 	bl	800ad42 <xTaskCreate>
 800a022:	4603      	mov	r3, r0
 800a024:	2b01      	cmp	r3, #1
 800a026:	d001      	beq.n	800a02c <osThreadNew+0x13c>
          hTask = NULL;
 800a028:	2300      	movs	r3, #0
 800a02a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a02c:	693b      	ldr	r3, [r7, #16]
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3730      	adds	r7, #48	; 0x30
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
 800a036:	bf00      	nop
 800a038:	20008038 	.word	0x20008038

0800a03c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b086      	sub	sp, #24
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a044:	f3ef 8305 	mrs	r3, IPSR
 800a048:	613b      	str	r3, [r7, #16]
  return(result);
 800a04a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d10f      	bne.n	800a070 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a050:	f3ef 8310 	mrs	r3, PRIMASK
 800a054:	60fb      	str	r3, [r7, #12]
  return(result);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d105      	bne.n	800a068 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a05c:	f3ef 8311 	mrs	r3, BASEPRI
 800a060:	60bb      	str	r3, [r7, #8]
  return(result);
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d007      	beq.n	800a078 <osDelay+0x3c>
 800a068:	4b0a      	ldr	r3, [pc, #40]	; (800a094 <osDelay+0x58>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	2b02      	cmp	r3, #2
 800a06e:	d103      	bne.n	800a078 <osDelay+0x3c>
    stat = osErrorISR;
 800a070:	f06f 0305 	mvn.w	r3, #5
 800a074:	617b      	str	r3, [r7, #20]
 800a076:	e007      	b.n	800a088 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a078:	2300      	movs	r3, #0
 800a07a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d002      	beq.n	800a088 <osDelay+0x4c>
      vTaskDelay(ticks);
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f000 ffba 	bl	800affc <vTaskDelay>
    }
  }

  return (stat);
 800a088:	697b      	ldr	r3, [r7, #20]
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3718      	adds	r7, #24
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
 800a092:	bf00      	nop
 800a094:	20008038 	.word	0x20008038

0800a098 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a098:	b480      	push	{r7}
 800a09a:	b085      	sub	sp, #20
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	60b9      	str	r1, [r7, #8]
 800a0a2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	4a07      	ldr	r2, [pc, #28]	; (800a0c4 <vApplicationGetIdleTaskMemory+0x2c>)
 800a0a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	4a06      	ldr	r2, [pc, #24]	; (800a0c8 <vApplicationGetIdleTaskMemory+0x30>)
 800a0ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2280      	movs	r2, #128	; 0x80
 800a0b4:	601a      	str	r2, [r3, #0]
}
 800a0b6:	bf00      	nop
 800a0b8:	3714      	adds	r7, #20
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c0:	4770      	bx	lr
 800a0c2:	bf00      	nop
 800a0c4:	2000803c 	.word	0x2000803c
 800a0c8:	200080e4 	.word	0x200080e4

0800a0cc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a0cc:	b480      	push	{r7}
 800a0ce:	b085      	sub	sp, #20
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	60f8      	str	r0, [r7, #12]
 800a0d4:	60b9      	str	r1, [r7, #8]
 800a0d6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	4a07      	ldr	r2, [pc, #28]	; (800a0f8 <vApplicationGetTimerTaskMemory+0x2c>)
 800a0dc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	4a06      	ldr	r2, [pc, #24]	; (800a0fc <vApplicationGetTimerTaskMemory+0x30>)
 800a0e2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a0ea:	601a      	str	r2, [r3, #0]
}
 800a0ec:	bf00      	nop
 800a0ee:	3714      	adds	r7, #20
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr
 800a0f8:	200082e4 	.word	0x200082e4
 800a0fc:	2000838c 	.word	0x2000838c

0800a100 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a100:	b480      	push	{r7}
 800a102:	b083      	sub	sp, #12
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f103 0208 	add.w	r2, r3, #8
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a118:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f103 0208 	add.w	r2, r3, #8
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f103 0208 	add.w	r2, r3, #8
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a134:	bf00      	nop
 800a136:	370c      	adds	r7, #12
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr

0800a140 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a140:	b480      	push	{r7}
 800a142:	b083      	sub	sp, #12
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2200      	movs	r2, #0
 800a14c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a14e:	bf00      	nop
 800a150:	370c      	adds	r7, #12
 800a152:	46bd      	mov	sp, r7
 800a154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a158:	4770      	bx	lr

0800a15a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a15a:	b480      	push	{r7}
 800a15c:	b085      	sub	sp, #20
 800a15e:	af00      	add	r7, sp, #0
 800a160:	6078      	str	r0, [r7, #4]
 800a162:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	68fa      	ldr	r2, [r7, #12]
 800a16e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	689a      	ldr	r2, [r3, #8]
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	689b      	ldr	r3, [r3, #8]
 800a17c:	683a      	ldr	r2, [r7, #0]
 800a17e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	683a      	ldr	r2, [r7, #0]
 800a184:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	687a      	ldr	r2, [r7, #4]
 800a18a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	1c5a      	adds	r2, r3, #1
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	601a      	str	r2, [r3, #0]
}
 800a196:	bf00      	nop
 800a198:	3714      	adds	r7, #20
 800a19a:	46bd      	mov	sp, r7
 800a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a0:	4770      	bx	lr

0800a1a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a1a2:	b480      	push	{r7}
 800a1a4:	b085      	sub	sp, #20
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	6078      	str	r0, [r7, #4]
 800a1aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1b8:	d103      	bne.n	800a1c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	691b      	ldr	r3, [r3, #16]
 800a1be:	60fb      	str	r3, [r7, #12]
 800a1c0:	e00c      	b.n	800a1dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	3308      	adds	r3, #8
 800a1c6:	60fb      	str	r3, [r7, #12]
 800a1c8:	e002      	b.n	800a1d0 <vListInsert+0x2e>
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	60fb      	str	r3, [r7, #12]
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	68ba      	ldr	r2, [r7, #8]
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d2f6      	bcs.n	800a1ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	685a      	ldr	r2, [r3, #4]
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	683a      	ldr	r2, [r7, #0]
 800a1ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	68fa      	ldr	r2, [r7, #12]
 800a1f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	683a      	ldr	r2, [r7, #0]
 800a1f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	1c5a      	adds	r2, r3, #1
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	601a      	str	r2, [r3, #0]
}
 800a208:	bf00      	nop
 800a20a:	3714      	adds	r7, #20
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr

0800a214 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a214:	b480      	push	{r7}
 800a216:	b085      	sub	sp, #20
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	691b      	ldr	r3, [r3, #16]
 800a220:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	685b      	ldr	r3, [r3, #4]
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	6892      	ldr	r2, [r2, #8]
 800a22a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	689b      	ldr	r3, [r3, #8]
 800a230:	687a      	ldr	r2, [r7, #4]
 800a232:	6852      	ldr	r2, [r2, #4]
 800a234:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	687a      	ldr	r2, [r7, #4]
 800a23c:	429a      	cmp	r2, r3
 800a23e:	d103      	bne.n	800a248 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	689a      	ldr	r2, [r3, #8]
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2200      	movs	r2, #0
 800a24c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	1e5a      	subs	r2, r3, #1
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3714      	adds	r7, #20
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr

0800a268 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b084      	sub	sp, #16
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d10c      	bne.n	800a296 <xQueueGenericReset+0x2e>
	__asm volatile
 800a27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a280:	b672      	cpsid	i
 800a282:	f383 8811 	msr	BASEPRI, r3
 800a286:	f3bf 8f6f 	isb	sy
 800a28a:	f3bf 8f4f 	dsb	sy
 800a28e:	b662      	cpsie	i
 800a290:	60bb      	str	r3, [r7, #8]
}
 800a292:	bf00      	nop
 800a294:	e7fe      	b.n	800a294 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800a296:	f002 f8d1 	bl	800c43c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681a      	ldr	r2, [r3, #0]
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2a2:	68f9      	ldr	r1, [r7, #12]
 800a2a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a2a6:	fb01 f303 	mul.w	r3, r1, r3
 800a2aa:	441a      	add	r2, r3
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681a      	ldr	r2, [r3, #0]
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681a      	ldr	r2, [r3, #0]
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2c6:	3b01      	subs	r3, #1
 800a2c8:	68f9      	ldr	r1, [r7, #12]
 800a2ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a2cc:	fb01 f303 	mul.w	r3, r1, r3
 800a2d0:	441a      	add	r2, r3
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	22ff      	movs	r2, #255	; 0xff
 800a2da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	22ff      	movs	r2, #255	; 0xff
 800a2e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d114      	bne.n	800a316 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	691b      	ldr	r3, [r3, #16]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d01a      	beq.n	800a32a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	3310      	adds	r3, #16
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f001 f95d 	bl	800b5b8 <xTaskRemoveFromEventList>
 800a2fe:	4603      	mov	r3, r0
 800a300:	2b00      	cmp	r3, #0
 800a302:	d012      	beq.n	800a32a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a304:	4b0c      	ldr	r3, [pc, #48]	; (800a338 <xQueueGenericReset+0xd0>)
 800a306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a30a:	601a      	str	r2, [r3, #0]
 800a30c:	f3bf 8f4f 	dsb	sy
 800a310:	f3bf 8f6f 	isb	sy
 800a314:	e009      	b.n	800a32a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	3310      	adds	r3, #16
 800a31a:	4618      	mov	r0, r3
 800a31c:	f7ff fef0 	bl	800a100 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	3324      	adds	r3, #36	; 0x24
 800a324:	4618      	mov	r0, r3
 800a326:	f7ff feeb 	bl	800a100 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a32a:	f002 f8bb 	bl	800c4a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a32e:	2301      	movs	r3, #1
}
 800a330:	4618      	mov	r0, r3
 800a332:	3710      	adds	r7, #16
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}
 800a338:	e000ed04 	.word	0xe000ed04

0800a33c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b08e      	sub	sp, #56	; 0x38
 800a340:	af02      	add	r7, sp, #8
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	60b9      	str	r1, [r7, #8]
 800a346:	607a      	str	r2, [r7, #4]
 800a348:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d10c      	bne.n	800a36a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800a350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a354:	b672      	cpsid	i
 800a356:	f383 8811 	msr	BASEPRI, r3
 800a35a:	f3bf 8f6f 	isb	sy
 800a35e:	f3bf 8f4f 	dsb	sy
 800a362:	b662      	cpsie	i
 800a364:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a366:	bf00      	nop
 800a368:	e7fe      	b.n	800a368 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d10c      	bne.n	800a38a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800a370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a374:	b672      	cpsid	i
 800a376:	f383 8811 	msr	BASEPRI, r3
 800a37a:	f3bf 8f6f 	isb	sy
 800a37e:	f3bf 8f4f 	dsb	sy
 800a382:	b662      	cpsie	i
 800a384:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a386:	bf00      	nop
 800a388:	e7fe      	b.n	800a388 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d002      	beq.n	800a396 <xQueueGenericCreateStatic+0x5a>
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d001      	beq.n	800a39a <xQueueGenericCreateStatic+0x5e>
 800a396:	2301      	movs	r3, #1
 800a398:	e000      	b.n	800a39c <xQueueGenericCreateStatic+0x60>
 800a39a:	2300      	movs	r3, #0
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d10c      	bne.n	800a3ba <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800a3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a4:	b672      	cpsid	i
 800a3a6:	f383 8811 	msr	BASEPRI, r3
 800a3aa:	f3bf 8f6f 	isb	sy
 800a3ae:	f3bf 8f4f 	dsb	sy
 800a3b2:	b662      	cpsie	i
 800a3b4:	623b      	str	r3, [r7, #32]
}
 800a3b6:	bf00      	nop
 800a3b8:	e7fe      	b.n	800a3b8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d102      	bne.n	800a3c6 <xQueueGenericCreateStatic+0x8a>
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d101      	bne.n	800a3ca <xQueueGenericCreateStatic+0x8e>
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	e000      	b.n	800a3cc <xQueueGenericCreateStatic+0x90>
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d10c      	bne.n	800a3ea <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800a3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d4:	b672      	cpsid	i
 800a3d6:	f383 8811 	msr	BASEPRI, r3
 800a3da:	f3bf 8f6f 	isb	sy
 800a3de:	f3bf 8f4f 	dsb	sy
 800a3e2:	b662      	cpsie	i
 800a3e4:	61fb      	str	r3, [r7, #28]
}
 800a3e6:	bf00      	nop
 800a3e8:	e7fe      	b.n	800a3e8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a3ea:	2350      	movs	r3, #80	; 0x50
 800a3ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	2b50      	cmp	r3, #80	; 0x50
 800a3f2:	d00c      	beq.n	800a40e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800a3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f8:	b672      	cpsid	i
 800a3fa:	f383 8811 	msr	BASEPRI, r3
 800a3fe:	f3bf 8f6f 	isb	sy
 800a402:	f3bf 8f4f 	dsb	sy
 800a406:	b662      	cpsie	i
 800a408:	61bb      	str	r3, [r7, #24]
}
 800a40a:	bf00      	nop
 800a40c:	e7fe      	b.n	800a40c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a40e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a416:	2b00      	cmp	r3, #0
 800a418:	d00d      	beq.n	800a436 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a41c:	2201      	movs	r2, #1
 800a41e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a422:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a428:	9300      	str	r3, [sp, #0]
 800a42a:	4613      	mov	r3, r2
 800a42c:	687a      	ldr	r2, [r7, #4]
 800a42e:	68b9      	ldr	r1, [r7, #8]
 800a430:	68f8      	ldr	r0, [r7, #12]
 800a432:	f000 f805 	bl	800a440 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a438:	4618      	mov	r0, r3
 800a43a:	3730      	adds	r7, #48	; 0x30
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b084      	sub	sp, #16
 800a444:	af00      	add	r7, sp, #0
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	607a      	str	r2, [r7, #4]
 800a44c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d103      	bne.n	800a45c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a454:	69bb      	ldr	r3, [r7, #24]
 800a456:	69ba      	ldr	r2, [r7, #24]
 800a458:	601a      	str	r2, [r3, #0]
 800a45a:	e002      	b.n	800a462 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a45c:	69bb      	ldr	r3, [r7, #24]
 800a45e:	687a      	ldr	r2, [r7, #4]
 800a460:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a462:	69bb      	ldr	r3, [r7, #24]
 800a464:	68fa      	ldr	r2, [r7, #12]
 800a466:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a468:	69bb      	ldr	r3, [r7, #24]
 800a46a:	68ba      	ldr	r2, [r7, #8]
 800a46c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a46e:	2101      	movs	r1, #1
 800a470:	69b8      	ldr	r0, [r7, #24]
 800a472:	f7ff fef9 	bl	800a268 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a476:	69bb      	ldr	r3, [r7, #24]
 800a478:	78fa      	ldrb	r2, [r7, #3]
 800a47a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a47e:	bf00      	nop
 800a480:	3710      	adds	r7, #16
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}
	...

0800a488 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b08e      	sub	sp, #56	; 0x38
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	607a      	str	r2, [r7, #4]
 800a494:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a496:	2300      	movs	r3, #0
 800a498:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d10c      	bne.n	800a4be <xQueueGenericSend+0x36>
	__asm volatile
 800a4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a8:	b672      	cpsid	i
 800a4aa:	f383 8811 	msr	BASEPRI, r3
 800a4ae:	f3bf 8f6f 	isb	sy
 800a4b2:	f3bf 8f4f 	dsb	sy
 800a4b6:	b662      	cpsie	i
 800a4b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a4ba:	bf00      	nop
 800a4bc:	e7fe      	b.n	800a4bc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d103      	bne.n	800a4cc <xQueueGenericSend+0x44>
 800a4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d101      	bne.n	800a4d0 <xQueueGenericSend+0x48>
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	e000      	b.n	800a4d2 <xQueueGenericSend+0x4a>
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d10c      	bne.n	800a4f0 <xQueueGenericSend+0x68>
	__asm volatile
 800a4d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4da:	b672      	cpsid	i
 800a4dc:	f383 8811 	msr	BASEPRI, r3
 800a4e0:	f3bf 8f6f 	isb	sy
 800a4e4:	f3bf 8f4f 	dsb	sy
 800a4e8:	b662      	cpsie	i
 800a4ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a4ec:	bf00      	nop
 800a4ee:	e7fe      	b.n	800a4ee <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	2b02      	cmp	r3, #2
 800a4f4:	d103      	bne.n	800a4fe <xQueueGenericSend+0x76>
 800a4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4fa:	2b01      	cmp	r3, #1
 800a4fc:	d101      	bne.n	800a502 <xQueueGenericSend+0x7a>
 800a4fe:	2301      	movs	r3, #1
 800a500:	e000      	b.n	800a504 <xQueueGenericSend+0x7c>
 800a502:	2300      	movs	r3, #0
 800a504:	2b00      	cmp	r3, #0
 800a506:	d10c      	bne.n	800a522 <xQueueGenericSend+0x9a>
	__asm volatile
 800a508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a50c:	b672      	cpsid	i
 800a50e:	f383 8811 	msr	BASEPRI, r3
 800a512:	f3bf 8f6f 	isb	sy
 800a516:	f3bf 8f4f 	dsb	sy
 800a51a:	b662      	cpsie	i
 800a51c:	623b      	str	r3, [r7, #32]
}
 800a51e:	bf00      	nop
 800a520:	e7fe      	b.n	800a520 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a522:	f001 fa3b 	bl	800b99c <xTaskGetSchedulerState>
 800a526:	4603      	mov	r3, r0
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d102      	bne.n	800a532 <xQueueGenericSend+0xaa>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d101      	bne.n	800a536 <xQueueGenericSend+0xae>
 800a532:	2301      	movs	r3, #1
 800a534:	e000      	b.n	800a538 <xQueueGenericSend+0xb0>
 800a536:	2300      	movs	r3, #0
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d10c      	bne.n	800a556 <xQueueGenericSend+0xce>
	__asm volatile
 800a53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a540:	b672      	cpsid	i
 800a542:	f383 8811 	msr	BASEPRI, r3
 800a546:	f3bf 8f6f 	isb	sy
 800a54a:	f3bf 8f4f 	dsb	sy
 800a54e:	b662      	cpsie	i
 800a550:	61fb      	str	r3, [r7, #28]
}
 800a552:	bf00      	nop
 800a554:	e7fe      	b.n	800a554 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a556:	f001 ff71 	bl	800c43c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a55c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a562:	429a      	cmp	r2, r3
 800a564:	d302      	bcc.n	800a56c <xQueueGenericSend+0xe4>
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	2b02      	cmp	r3, #2
 800a56a:	d129      	bne.n	800a5c0 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a56c:	683a      	ldr	r2, [r7, #0]
 800a56e:	68b9      	ldr	r1, [r7, #8]
 800a570:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a572:	f000 fa15 	bl	800a9a0 <prvCopyDataToQueue>
 800a576:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d010      	beq.n	800a5a2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a582:	3324      	adds	r3, #36	; 0x24
 800a584:	4618      	mov	r0, r3
 800a586:	f001 f817 	bl	800b5b8 <xTaskRemoveFromEventList>
 800a58a:	4603      	mov	r3, r0
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d013      	beq.n	800a5b8 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a590:	4b3f      	ldr	r3, [pc, #252]	; (800a690 <xQueueGenericSend+0x208>)
 800a592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a596:	601a      	str	r2, [r3, #0]
 800a598:	f3bf 8f4f 	dsb	sy
 800a59c:	f3bf 8f6f 	isb	sy
 800a5a0:	e00a      	b.n	800a5b8 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d007      	beq.n	800a5b8 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a5a8:	4b39      	ldr	r3, [pc, #228]	; (800a690 <xQueueGenericSend+0x208>)
 800a5aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5ae:	601a      	str	r2, [r3, #0]
 800a5b0:	f3bf 8f4f 	dsb	sy
 800a5b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a5b8:	f001 ff74 	bl	800c4a4 <vPortExitCritical>
				return pdPASS;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	e063      	b.n	800a688 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d103      	bne.n	800a5ce <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a5c6:	f001 ff6d 	bl	800c4a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	e05c      	b.n	800a688 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a5ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d106      	bne.n	800a5e2 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a5d4:	f107 0314 	add.w	r3, r7, #20
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f001 f87b 	bl	800b6d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a5e2:	f001 ff5f 	bl	800c4a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a5e6:	f000 fdb3 	bl	800b150 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a5ea:	f001 ff27 	bl	800c43c <vPortEnterCritical>
 800a5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a5f4:	b25b      	sxtb	r3, r3
 800a5f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5fa:	d103      	bne.n	800a604 <xQueueGenericSend+0x17c>
 800a5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5fe:	2200      	movs	r2, #0
 800a600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a606:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a60a:	b25b      	sxtb	r3, r3
 800a60c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a610:	d103      	bne.n	800a61a <xQueueGenericSend+0x192>
 800a612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a614:	2200      	movs	r2, #0
 800a616:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a61a:	f001 ff43 	bl	800c4a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a61e:	1d3a      	adds	r2, r7, #4
 800a620:	f107 0314 	add.w	r3, r7, #20
 800a624:	4611      	mov	r1, r2
 800a626:	4618      	mov	r0, r3
 800a628:	f001 f86a 	bl	800b700 <xTaskCheckForTimeOut>
 800a62c:	4603      	mov	r3, r0
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d124      	bne.n	800a67c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a632:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a634:	f000 faac 	bl	800ab90 <prvIsQueueFull>
 800a638:	4603      	mov	r3, r0
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d018      	beq.n	800a670 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a640:	3310      	adds	r3, #16
 800a642:	687a      	ldr	r2, [r7, #4]
 800a644:	4611      	mov	r1, r2
 800a646:	4618      	mov	r0, r3
 800a648:	f000 ff62 	bl	800b510 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a64c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a64e:	f000 fa37 	bl	800aac0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a652:	f000 fd8b 	bl	800b16c <xTaskResumeAll>
 800a656:	4603      	mov	r3, r0
 800a658:	2b00      	cmp	r3, #0
 800a65a:	f47f af7c 	bne.w	800a556 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800a65e:	4b0c      	ldr	r3, [pc, #48]	; (800a690 <xQueueGenericSend+0x208>)
 800a660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a664:	601a      	str	r2, [r3, #0]
 800a666:	f3bf 8f4f 	dsb	sy
 800a66a:	f3bf 8f6f 	isb	sy
 800a66e:	e772      	b.n	800a556 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a670:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a672:	f000 fa25 	bl	800aac0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a676:	f000 fd79 	bl	800b16c <xTaskResumeAll>
 800a67a:	e76c      	b.n	800a556 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a67c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a67e:	f000 fa1f 	bl	800aac0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a682:	f000 fd73 	bl	800b16c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a686:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3738      	adds	r7, #56	; 0x38
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}
 800a690:	e000ed04 	.word	0xe000ed04

0800a694 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b08e      	sub	sp, #56	; 0x38
 800a698:	af00      	add	r7, sp, #0
 800a69a:	60f8      	str	r0, [r7, #12]
 800a69c:	60b9      	str	r1, [r7, #8]
 800a69e:	607a      	str	r2, [r7, #4]
 800a6a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d10c      	bne.n	800a6c6 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800a6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b0:	b672      	cpsid	i
 800a6b2:	f383 8811 	msr	BASEPRI, r3
 800a6b6:	f3bf 8f6f 	isb	sy
 800a6ba:	f3bf 8f4f 	dsb	sy
 800a6be:	b662      	cpsie	i
 800a6c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a6c2:	bf00      	nop
 800a6c4:	e7fe      	b.n	800a6c4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d103      	bne.n	800a6d4 <xQueueGenericSendFromISR+0x40>
 800a6cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d101      	bne.n	800a6d8 <xQueueGenericSendFromISR+0x44>
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	e000      	b.n	800a6da <xQueueGenericSendFromISR+0x46>
 800a6d8:	2300      	movs	r3, #0
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d10c      	bne.n	800a6f8 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800a6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e2:	b672      	cpsid	i
 800a6e4:	f383 8811 	msr	BASEPRI, r3
 800a6e8:	f3bf 8f6f 	isb	sy
 800a6ec:	f3bf 8f4f 	dsb	sy
 800a6f0:	b662      	cpsie	i
 800a6f2:	623b      	str	r3, [r7, #32]
}
 800a6f4:	bf00      	nop
 800a6f6:	e7fe      	b.n	800a6f6 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	2b02      	cmp	r3, #2
 800a6fc:	d103      	bne.n	800a706 <xQueueGenericSendFromISR+0x72>
 800a6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a702:	2b01      	cmp	r3, #1
 800a704:	d101      	bne.n	800a70a <xQueueGenericSendFromISR+0x76>
 800a706:	2301      	movs	r3, #1
 800a708:	e000      	b.n	800a70c <xQueueGenericSendFromISR+0x78>
 800a70a:	2300      	movs	r3, #0
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d10c      	bne.n	800a72a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800a710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a714:	b672      	cpsid	i
 800a716:	f383 8811 	msr	BASEPRI, r3
 800a71a:	f3bf 8f6f 	isb	sy
 800a71e:	f3bf 8f4f 	dsb	sy
 800a722:	b662      	cpsie	i
 800a724:	61fb      	str	r3, [r7, #28]
}
 800a726:	bf00      	nop
 800a728:	e7fe      	b.n	800a728 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a72a:	f001 ff6f 	bl	800c60c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a72e:	f3ef 8211 	mrs	r2, BASEPRI
 800a732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a736:	b672      	cpsid	i
 800a738:	f383 8811 	msr	BASEPRI, r3
 800a73c:	f3bf 8f6f 	isb	sy
 800a740:	f3bf 8f4f 	dsb	sy
 800a744:	b662      	cpsie	i
 800a746:	61ba      	str	r2, [r7, #24]
 800a748:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a74a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a74c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a750:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a756:	429a      	cmp	r2, r3
 800a758:	d302      	bcc.n	800a760 <xQueueGenericSendFromISR+0xcc>
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	2b02      	cmp	r3, #2
 800a75e:	d12c      	bne.n	800a7ba <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a762:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a76a:	683a      	ldr	r2, [r7, #0]
 800a76c:	68b9      	ldr	r1, [r7, #8]
 800a76e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a770:	f000 f916 	bl	800a9a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a774:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a778:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a77c:	d112      	bne.n	800a7a4 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a782:	2b00      	cmp	r3, #0
 800a784:	d016      	beq.n	800a7b4 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a788:	3324      	adds	r3, #36	; 0x24
 800a78a:	4618      	mov	r0, r3
 800a78c:	f000 ff14 	bl	800b5b8 <xTaskRemoveFromEventList>
 800a790:	4603      	mov	r3, r0
 800a792:	2b00      	cmp	r3, #0
 800a794:	d00e      	beq.n	800a7b4 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d00b      	beq.n	800a7b4 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2201      	movs	r2, #1
 800a7a0:	601a      	str	r2, [r3, #0]
 800a7a2:	e007      	b.n	800a7b4 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a7a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a7a8:	3301      	adds	r3, #1
 800a7aa:	b2db      	uxtb	r3, r3
 800a7ac:	b25a      	sxtb	r2, r3
 800a7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a7b8:	e001      	b.n	800a7be <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	637b      	str	r3, [r7, #52]	; 0x34
 800a7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a7c8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a7ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3738      	adds	r7, #56	; 0x38
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b08c      	sub	sp, #48	; 0x30
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d10c      	bne.n	800a808 <xQueueReceive+0x34>
	__asm volatile
 800a7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f2:	b672      	cpsid	i
 800a7f4:	f383 8811 	msr	BASEPRI, r3
 800a7f8:	f3bf 8f6f 	isb	sy
 800a7fc:	f3bf 8f4f 	dsb	sy
 800a800:	b662      	cpsie	i
 800a802:	623b      	str	r3, [r7, #32]
}
 800a804:	bf00      	nop
 800a806:	e7fe      	b.n	800a806 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d103      	bne.n	800a816 <xQueueReceive+0x42>
 800a80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a812:	2b00      	cmp	r3, #0
 800a814:	d101      	bne.n	800a81a <xQueueReceive+0x46>
 800a816:	2301      	movs	r3, #1
 800a818:	e000      	b.n	800a81c <xQueueReceive+0x48>
 800a81a:	2300      	movs	r3, #0
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d10c      	bne.n	800a83a <xQueueReceive+0x66>
	__asm volatile
 800a820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a824:	b672      	cpsid	i
 800a826:	f383 8811 	msr	BASEPRI, r3
 800a82a:	f3bf 8f6f 	isb	sy
 800a82e:	f3bf 8f4f 	dsb	sy
 800a832:	b662      	cpsie	i
 800a834:	61fb      	str	r3, [r7, #28]
}
 800a836:	bf00      	nop
 800a838:	e7fe      	b.n	800a838 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a83a:	f001 f8af 	bl	800b99c <xTaskGetSchedulerState>
 800a83e:	4603      	mov	r3, r0
 800a840:	2b00      	cmp	r3, #0
 800a842:	d102      	bne.n	800a84a <xQueueReceive+0x76>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d101      	bne.n	800a84e <xQueueReceive+0x7a>
 800a84a:	2301      	movs	r3, #1
 800a84c:	e000      	b.n	800a850 <xQueueReceive+0x7c>
 800a84e:	2300      	movs	r3, #0
 800a850:	2b00      	cmp	r3, #0
 800a852:	d10c      	bne.n	800a86e <xQueueReceive+0x9a>
	__asm volatile
 800a854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a858:	b672      	cpsid	i
 800a85a:	f383 8811 	msr	BASEPRI, r3
 800a85e:	f3bf 8f6f 	isb	sy
 800a862:	f3bf 8f4f 	dsb	sy
 800a866:	b662      	cpsie	i
 800a868:	61bb      	str	r3, [r7, #24]
}
 800a86a:	bf00      	nop
 800a86c:	e7fe      	b.n	800a86c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a86e:	f001 fde5 	bl	800c43c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a876:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d01f      	beq.n	800a8be <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a87e:	68b9      	ldr	r1, [r7, #8]
 800a880:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a882:	f000 f8f7 	bl	800aa74 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a888:	1e5a      	subs	r2, r3, #1
 800a88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a88c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a890:	691b      	ldr	r3, [r3, #16]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d00f      	beq.n	800a8b6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a898:	3310      	adds	r3, #16
 800a89a:	4618      	mov	r0, r3
 800a89c:	f000 fe8c 	bl	800b5b8 <xTaskRemoveFromEventList>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d007      	beq.n	800a8b6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a8a6:	4b3d      	ldr	r3, [pc, #244]	; (800a99c <xQueueReceive+0x1c8>)
 800a8a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8ac:	601a      	str	r2, [r3, #0]
 800a8ae:	f3bf 8f4f 	dsb	sy
 800a8b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a8b6:	f001 fdf5 	bl	800c4a4 <vPortExitCritical>
				return pdPASS;
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	e069      	b.n	800a992 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d103      	bne.n	800a8cc <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a8c4:	f001 fdee 	bl	800c4a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	e062      	b.n	800a992 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d106      	bne.n	800a8e0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a8d2:	f107 0310 	add.w	r3, r7, #16
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f000 fefc 	bl	800b6d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a8e0:	f001 fde0 	bl	800c4a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a8e4:	f000 fc34 	bl	800b150 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a8e8:	f001 fda8 	bl	800c43c <vPortEnterCritical>
 800a8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8f2:	b25b      	sxtb	r3, r3
 800a8f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8f8:	d103      	bne.n	800a902 <xQueueReceive+0x12e>
 800a8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a904:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a908:	b25b      	sxtb	r3, r3
 800a90a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a90e:	d103      	bne.n	800a918 <xQueueReceive+0x144>
 800a910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a912:	2200      	movs	r2, #0
 800a914:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a918:	f001 fdc4 	bl	800c4a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a91c:	1d3a      	adds	r2, r7, #4
 800a91e:	f107 0310 	add.w	r3, r7, #16
 800a922:	4611      	mov	r1, r2
 800a924:	4618      	mov	r0, r3
 800a926:	f000 feeb 	bl	800b700 <xTaskCheckForTimeOut>
 800a92a:	4603      	mov	r3, r0
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d123      	bne.n	800a978 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a930:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a932:	f000 f917 	bl	800ab64 <prvIsQueueEmpty>
 800a936:	4603      	mov	r3, r0
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d017      	beq.n	800a96c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a93e:	3324      	adds	r3, #36	; 0x24
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	4611      	mov	r1, r2
 800a944:	4618      	mov	r0, r3
 800a946:	f000 fde3 	bl	800b510 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a94a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a94c:	f000 f8b8 	bl	800aac0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a950:	f000 fc0c 	bl	800b16c <xTaskResumeAll>
 800a954:	4603      	mov	r3, r0
 800a956:	2b00      	cmp	r3, #0
 800a958:	d189      	bne.n	800a86e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800a95a:	4b10      	ldr	r3, [pc, #64]	; (800a99c <xQueueReceive+0x1c8>)
 800a95c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a960:	601a      	str	r2, [r3, #0]
 800a962:	f3bf 8f4f 	dsb	sy
 800a966:	f3bf 8f6f 	isb	sy
 800a96a:	e780      	b.n	800a86e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a96c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a96e:	f000 f8a7 	bl	800aac0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a972:	f000 fbfb 	bl	800b16c <xTaskResumeAll>
 800a976:	e77a      	b.n	800a86e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a978:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a97a:	f000 f8a1 	bl	800aac0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a97e:	f000 fbf5 	bl	800b16c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a982:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a984:	f000 f8ee 	bl	800ab64 <prvIsQueueEmpty>
 800a988:	4603      	mov	r3, r0
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	f43f af6f 	beq.w	800a86e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a990:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a992:	4618      	mov	r0, r3
 800a994:	3730      	adds	r7, #48	; 0x30
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}
 800a99a:	bf00      	nop
 800a99c:	e000ed04 	.word	0xe000ed04

0800a9a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b086      	sub	sp, #24
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	60f8      	str	r0, [r7, #12]
 800a9a8:	60b9      	str	r1, [r7, #8]
 800a9aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d10d      	bne.n	800a9da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d14d      	bne.n	800aa62 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	689b      	ldr	r3, [r3, #8]
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f001 f804 	bl	800b9d8 <xTaskPriorityDisinherit>
 800a9d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	609a      	str	r2, [r3, #8]
 800a9d8:	e043      	b.n	800aa62 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d119      	bne.n	800aa14 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	6858      	ldr	r0, [r3, #4]
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	68b9      	ldr	r1, [r7, #8]
 800a9ec:	f014 f87f 	bl	801eaee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	685a      	ldr	r2, [r3, #4]
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9f8:	441a      	add	r2, r3
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	685a      	ldr	r2, [r3, #4]
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	689b      	ldr	r3, [r3, #8]
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d32b      	bcc.n	800aa62 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681a      	ldr	r2, [r3, #0]
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	605a      	str	r2, [r3, #4]
 800aa12:	e026      	b.n	800aa62 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	68d8      	ldr	r0, [r3, #12]
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa1c:	461a      	mov	r2, r3
 800aa1e:	68b9      	ldr	r1, [r7, #8]
 800aa20:	f014 f865 	bl	801eaee <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	68da      	ldr	r2, [r3, #12]
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa2c:	425b      	negs	r3, r3
 800aa2e:	441a      	add	r2, r3
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	68da      	ldr	r2, [r3, #12]
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	429a      	cmp	r2, r3
 800aa3e:	d207      	bcs.n	800aa50 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	689a      	ldr	r2, [r3, #8]
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa48:	425b      	negs	r3, r3
 800aa4a:	441a      	add	r2, r3
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2b02      	cmp	r3, #2
 800aa54:	d105      	bne.n	800aa62 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d002      	beq.n	800aa62 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	3b01      	subs	r3, #1
 800aa60:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	1c5a      	adds	r2, r3, #1
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800aa6a:	697b      	ldr	r3, [r7, #20]
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3718      	adds	r7, #24
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}

0800aa74 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b082      	sub	sp, #8
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d018      	beq.n	800aab8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	68da      	ldr	r2, [r3, #12]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa8e:	441a      	add	r2, r3
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	68da      	ldr	r2, [r3, #12]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	689b      	ldr	r3, [r3, #8]
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	d303      	bcc.n	800aaa8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681a      	ldr	r2, [r3, #0]
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	68d9      	ldr	r1, [r3, #12]
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aab0:	461a      	mov	r2, r3
 800aab2:	6838      	ldr	r0, [r7, #0]
 800aab4:	f014 f81b 	bl	801eaee <memcpy>
	}
}
 800aab8:	bf00      	nop
 800aaba:	3708      	adds	r7, #8
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b084      	sub	sp, #16
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aac8:	f001 fcb8 	bl	800c43c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aad2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aad4:	e011      	b.n	800aafa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d012      	beq.n	800ab04 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	3324      	adds	r3, #36	; 0x24
 800aae2:	4618      	mov	r0, r3
 800aae4:	f000 fd68 	bl	800b5b8 <xTaskRemoveFromEventList>
 800aae8:	4603      	mov	r3, r0
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d001      	beq.n	800aaf2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aaee:	f000 fe6d 	bl	800b7cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aaf2:	7bfb      	ldrb	r3, [r7, #15]
 800aaf4:	3b01      	subs	r3, #1
 800aaf6:	b2db      	uxtb	r3, r3
 800aaf8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aafa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	dce9      	bgt.n	800aad6 <prvUnlockQueue+0x16>
 800ab02:	e000      	b.n	800ab06 <prvUnlockQueue+0x46>
					break;
 800ab04:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	22ff      	movs	r2, #255	; 0xff
 800ab0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ab0e:	f001 fcc9 	bl	800c4a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ab12:	f001 fc93 	bl	800c43c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab1c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ab1e:	e011      	b.n	800ab44 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	691b      	ldr	r3, [r3, #16]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d012      	beq.n	800ab4e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	3310      	adds	r3, #16
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f000 fd43 	bl	800b5b8 <xTaskRemoveFromEventList>
 800ab32:	4603      	mov	r3, r0
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d001      	beq.n	800ab3c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ab38:	f000 fe48 	bl	800b7cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ab3c:	7bbb      	ldrb	r3, [r7, #14]
 800ab3e:	3b01      	subs	r3, #1
 800ab40:	b2db      	uxtb	r3, r3
 800ab42:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ab44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	dce9      	bgt.n	800ab20 <prvUnlockQueue+0x60>
 800ab4c:	e000      	b.n	800ab50 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ab4e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	22ff      	movs	r2, #255	; 0xff
 800ab54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ab58:	f001 fca4 	bl	800c4a4 <vPortExitCritical>
}
 800ab5c:	bf00      	nop
 800ab5e:	3710      	adds	r7, #16
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b084      	sub	sp, #16
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ab6c:	f001 fc66 	bl	800c43c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d102      	bne.n	800ab7e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ab78:	2301      	movs	r3, #1
 800ab7a:	60fb      	str	r3, [r7, #12]
 800ab7c:	e001      	b.n	800ab82 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ab82:	f001 fc8f 	bl	800c4a4 <vPortExitCritical>

	return xReturn;
 800ab86:	68fb      	ldr	r3, [r7, #12]
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3710      	adds	r7, #16
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b084      	sub	sp, #16
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ab98:	f001 fc50 	bl	800c43c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d102      	bne.n	800abae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aba8:	2301      	movs	r3, #1
 800abaa:	60fb      	str	r3, [r7, #12]
 800abac:	e001      	b.n	800abb2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800abae:	2300      	movs	r3, #0
 800abb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800abb2:	f001 fc77 	bl	800c4a4 <vPortExitCritical>

	return xReturn;
 800abb6:	68fb      	ldr	r3, [r7, #12]
}
 800abb8:	4618      	mov	r0, r3
 800abba:	3710      	adds	r7, #16
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800abc0:	b480      	push	{r7}
 800abc2:	b085      	sub	sp, #20
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
 800abc8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800abca:	2300      	movs	r3, #0
 800abcc:	60fb      	str	r3, [r7, #12]
 800abce:	e014      	b.n	800abfa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800abd0:	4a0f      	ldr	r2, [pc, #60]	; (800ac10 <vQueueAddToRegistry+0x50>)
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d10b      	bne.n	800abf4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800abdc:	490c      	ldr	r1, [pc, #48]	; (800ac10 <vQueueAddToRegistry+0x50>)
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	683a      	ldr	r2, [r7, #0]
 800abe2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800abe6:	4a0a      	ldr	r2, [pc, #40]	; (800ac10 <vQueueAddToRegistry+0x50>)
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	00db      	lsls	r3, r3, #3
 800abec:	4413      	add	r3, r2
 800abee:	687a      	ldr	r2, [r7, #4]
 800abf0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800abf2:	e006      	b.n	800ac02 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	3301      	adds	r3, #1
 800abf8:	60fb      	str	r3, [r7, #12]
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	2b07      	cmp	r3, #7
 800abfe:	d9e7      	bls.n	800abd0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ac00:	bf00      	nop
 800ac02:	bf00      	nop
 800ac04:	3714      	adds	r7, #20
 800ac06:	46bd      	mov	sp, r7
 800ac08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0c:	4770      	bx	lr
 800ac0e:	bf00      	nop
 800ac10:	2000878c 	.word	0x2000878c

0800ac14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b086      	sub	sp, #24
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	60f8      	str	r0, [r7, #12]
 800ac1c:	60b9      	str	r1, [r7, #8]
 800ac1e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ac24:	f001 fc0a 	bl	800c43c <vPortEnterCritical>
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac2e:	b25b      	sxtb	r3, r3
 800ac30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac34:	d103      	bne.n	800ac3e <vQueueWaitForMessageRestricted+0x2a>
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac44:	b25b      	sxtb	r3, r3
 800ac46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac4a:	d103      	bne.n	800ac54 <vQueueWaitForMessageRestricted+0x40>
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac54:	f001 fc26 	bl	800c4a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d106      	bne.n	800ac6e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	3324      	adds	r3, #36	; 0x24
 800ac64:	687a      	ldr	r2, [r7, #4]
 800ac66:	68b9      	ldr	r1, [r7, #8]
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f000 fc77 	bl	800b55c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ac6e:	6978      	ldr	r0, [r7, #20]
 800ac70:	f7ff ff26 	bl	800aac0 <prvUnlockQueue>
	}
 800ac74:	bf00      	nop
 800ac76:	3718      	adds	r7, #24
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b08e      	sub	sp, #56	; 0x38
 800ac80:	af04      	add	r7, sp, #16
 800ac82:	60f8      	str	r0, [r7, #12]
 800ac84:	60b9      	str	r1, [r7, #8]
 800ac86:	607a      	str	r2, [r7, #4]
 800ac88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ac8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d10c      	bne.n	800acaa <xTaskCreateStatic+0x2e>
	__asm volatile
 800ac90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac94:	b672      	cpsid	i
 800ac96:	f383 8811 	msr	BASEPRI, r3
 800ac9a:	f3bf 8f6f 	isb	sy
 800ac9e:	f3bf 8f4f 	dsb	sy
 800aca2:	b662      	cpsie	i
 800aca4:	623b      	str	r3, [r7, #32]
}
 800aca6:	bf00      	nop
 800aca8:	e7fe      	b.n	800aca8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800acaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acac:	2b00      	cmp	r3, #0
 800acae:	d10c      	bne.n	800acca <xTaskCreateStatic+0x4e>
	__asm volatile
 800acb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb4:	b672      	cpsid	i
 800acb6:	f383 8811 	msr	BASEPRI, r3
 800acba:	f3bf 8f6f 	isb	sy
 800acbe:	f3bf 8f4f 	dsb	sy
 800acc2:	b662      	cpsie	i
 800acc4:	61fb      	str	r3, [r7, #28]
}
 800acc6:	bf00      	nop
 800acc8:	e7fe      	b.n	800acc8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800acca:	23a8      	movs	r3, #168	; 0xa8
 800accc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	2ba8      	cmp	r3, #168	; 0xa8
 800acd2:	d00c      	beq.n	800acee <xTaskCreateStatic+0x72>
	__asm volatile
 800acd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd8:	b672      	cpsid	i
 800acda:	f383 8811 	msr	BASEPRI, r3
 800acde:	f3bf 8f6f 	isb	sy
 800ace2:	f3bf 8f4f 	dsb	sy
 800ace6:	b662      	cpsie	i
 800ace8:	61bb      	str	r3, [r7, #24]
}
 800acea:	bf00      	nop
 800acec:	e7fe      	b.n	800acec <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800acee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800acf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d01e      	beq.n	800ad34 <xTaskCreateStatic+0xb8>
 800acf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d01b      	beq.n	800ad34 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800acfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acfe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ad00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad04:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ad06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad08:	2202      	movs	r2, #2
 800ad0a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ad0e:	2300      	movs	r3, #0
 800ad10:	9303      	str	r3, [sp, #12]
 800ad12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad14:	9302      	str	r3, [sp, #8]
 800ad16:	f107 0314 	add.w	r3, r7, #20
 800ad1a:	9301      	str	r3, [sp, #4]
 800ad1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad1e:	9300      	str	r3, [sp, #0]
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	687a      	ldr	r2, [r7, #4]
 800ad24:	68b9      	ldr	r1, [r7, #8]
 800ad26:	68f8      	ldr	r0, [r7, #12]
 800ad28:	f000 f850 	bl	800adcc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ad2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ad2e:	f000 f8f5 	bl	800af1c <prvAddNewTaskToReadyList>
 800ad32:	e001      	b.n	800ad38 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800ad34:	2300      	movs	r3, #0
 800ad36:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ad38:	697b      	ldr	r3, [r7, #20]
	}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3728      	adds	r7, #40	; 0x28
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}

0800ad42 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ad42:	b580      	push	{r7, lr}
 800ad44:	b08c      	sub	sp, #48	; 0x30
 800ad46:	af04      	add	r7, sp, #16
 800ad48:	60f8      	str	r0, [r7, #12]
 800ad4a:	60b9      	str	r1, [r7, #8]
 800ad4c:	603b      	str	r3, [r7, #0]
 800ad4e:	4613      	mov	r3, r2
 800ad50:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ad52:	88fb      	ldrh	r3, [r7, #6]
 800ad54:	009b      	lsls	r3, r3, #2
 800ad56:	4618      	mov	r0, r3
 800ad58:	f001 fc9c 	bl	800c694 <pvPortMalloc>
 800ad5c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d00e      	beq.n	800ad82 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ad64:	20a8      	movs	r0, #168	; 0xa8
 800ad66:	f001 fc95 	bl	800c694 <pvPortMalloc>
 800ad6a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ad6c:	69fb      	ldr	r3, [r7, #28]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d003      	beq.n	800ad7a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ad72:	69fb      	ldr	r3, [r7, #28]
 800ad74:	697a      	ldr	r2, [r7, #20]
 800ad76:	631a      	str	r2, [r3, #48]	; 0x30
 800ad78:	e005      	b.n	800ad86 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ad7a:	6978      	ldr	r0, [r7, #20]
 800ad7c:	f001 fd54 	bl	800c828 <vPortFree>
 800ad80:	e001      	b.n	800ad86 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ad82:	2300      	movs	r3, #0
 800ad84:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ad86:	69fb      	ldr	r3, [r7, #28]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d017      	beq.n	800adbc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ad8c:	69fb      	ldr	r3, [r7, #28]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ad94:	88fa      	ldrh	r2, [r7, #6]
 800ad96:	2300      	movs	r3, #0
 800ad98:	9303      	str	r3, [sp, #12]
 800ad9a:	69fb      	ldr	r3, [r7, #28]
 800ad9c:	9302      	str	r3, [sp, #8]
 800ad9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada0:	9301      	str	r3, [sp, #4]
 800ada2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada4:	9300      	str	r3, [sp, #0]
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	68b9      	ldr	r1, [r7, #8]
 800adaa:	68f8      	ldr	r0, [r7, #12]
 800adac:	f000 f80e 	bl	800adcc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800adb0:	69f8      	ldr	r0, [r7, #28]
 800adb2:	f000 f8b3 	bl	800af1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800adb6:	2301      	movs	r3, #1
 800adb8:	61bb      	str	r3, [r7, #24]
 800adba:	e002      	b.n	800adc2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800adbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800adc0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800adc2:	69bb      	ldr	r3, [r7, #24]
	}
 800adc4:	4618      	mov	r0, r3
 800adc6:	3720      	adds	r7, #32
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b088      	sub	sp, #32
 800add0:	af00      	add	r7, sp, #0
 800add2:	60f8      	str	r0, [r7, #12]
 800add4:	60b9      	str	r1, [r7, #8]
 800add6:	607a      	str	r2, [r7, #4]
 800add8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800adda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800addc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	009b      	lsls	r3, r3, #2
 800ade2:	461a      	mov	r2, r3
 800ade4:	21a5      	movs	r1, #165	; 0xa5
 800ade6:	f013 fd51 	bl	801e88c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800adea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800adee:	6879      	ldr	r1, [r7, #4]
 800adf0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800adf4:	440b      	add	r3, r1
 800adf6:	009b      	lsls	r3, r3, #2
 800adf8:	4413      	add	r3, r2
 800adfa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800adfc:	69bb      	ldr	r3, [r7, #24]
 800adfe:	f023 0307 	bic.w	r3, r3, #7
 800ae02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ae04:	69bb      	ldr	r3, [r7, #24]
 800ae06:	f003 0307 	and.w	r3, r3, #7
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d00c      	beq.n	800ae28 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800ae0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae12:	b672      	cpsid	i
 800ae14:	f383 8811 	msr	BASEPRI, r3
 800ae18:	f3bf 8f6f 	isb	sy
 800ae1c:	f3bf 8f4f 	dsb	sy
 800ae20:	b662      	cpsie	i
 800ae22:	617b      	str	r3, [r7, #20]
}
 800ae24:	bf00      	nop
 800ae26:	e7fe      	b.n	800ae26 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d01f      	beq.n	800ae6e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae2e:	2300      	movs	r3, #0
 800ae30:	61fb      	str	r3, [r7, #28]
 800ae32:	e012      	b.n	800ae5a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ae34:	68ba      	ldr	r2, [r7, #8]
 800ae36:	69fb      	ldr	r3, [r7, #28]
 800ae38:	4413      	add	r3, r2
 800ae3a:	7819      	ldrb	r1, [r3, #0]
 800ae3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae3e:	69fb      	ldr	r3, [r7, #28]
 800ae40:	4413      	add	r3, r2
 800ae42:	3334      	adds	r3, #52	; 0x34
 800ae44:	460a      	mov	r2, r1
 800ae46:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ae48:	68ba      	ldr	r2, [r7, #8]
 800ae4a:	69fb      	ldr	r3, [r7, #28]
 800ae4c:	4413      	add	r3, r2
 800ae4e:	781b      	ldrb	r3, [r3, #0]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d006      	beq.n	800ae62 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae54:	69fb      	ldr	r3, [r7, #28]
 800ae56:	3301      	adds	r3, #1
 800ae58:	61fb      	str	r3, [r7, #28]
 800ae5a:	69fb      	ldr	r3, [r7, #28]
 800ae5c:	2b0f      	cmp	r3, #15
 800ae5e:	d9e9      	bls.n	800ae34 <prvInitialiseNewTask+0x68>
 800ae60:	e000      	b.n	800ae64 <prvInitialiseNewTask+0x98>
			{
				break;
 800ae62:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ae64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae66:	2200      	movs	r2, #0
 800ae68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ae6c:	e003      	b.n	800ae76 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ae6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae70:	2200      	movs	r2, #0
 800ae72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ae76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae78:	2b37      	cmp	r3, #55	; 0x37
 800ae7a:	d901      	bls.n	800ae80 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ae7c:	2337      	movs	r3, #55	; 0x37
 800ae7e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ae80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae84:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ae86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae8a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ae8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae8e:	2200      	movs	r2, #0
 800ae90:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ae92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae94:	3304      	adds	r3, #4
 800ae96:	4618      	mov	r0, r3
 800ae98:	f7ff f952 	bl	800a140 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ae9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae9e:	3318      	adds	r3, #24
 800aea0:	4618      	mov	r0, r3
 800aea2:	f7ff f94d 	bl	800a140 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aeaa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aeac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aeb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aeb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aeba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aebe:	2200      	movs	r2, #0
 800aec0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec6:	2200      	movs	r2, #0
 800aec8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800aecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aece:	3354      	adds	r3, #84	; 0x54
 800aed0:	224c      	movs	r2, #76	; 0x4c
 800aed2:	2100      	movs	r1, #0
 800aed4:	4618      	mov	r0, r3
 800aed6:	f013 fcd9 	bl	801e88c <memset>
 800aeda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aedc:	4a0c      	ldr	r2, [pc, #48]	; (800af10 <prvInitialiseNewTask+0x144>)
 800aede:	659a      	str	r2, [r3, #88]	; 0x58
 800aee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee2:	4a0c      	ldr	r2, [pc, #48]	; (800af14 <prvInitialiseNewTask+0x148>)
 800aee4:	65da      	str	r2, [r3, #92]	; 0x5c
 800aee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee8:	4a0b      	ldr	r2, [pc, #44]	; (800af18 <prvInitialiseNewTask+0x14c>)
 800aeea:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aeec:	683a      	ldr	r2, [r7, #0]
 800aeee:	68f9      	ldr	r1, [r7, #12]
 800aef0:	69b8      	ldr	r0, [r7, #24]
 800aef2:	f001 f993 	bl	800c21c <pxPortInitialiseStack>
 800aef6:	4602      	mov	r2, r0
 800aef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aefa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800aefc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d002      	beq.n	800af08 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800af02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af06:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af08:	bf00      	nop
 800af0a:	3720      	adds	r7, #32
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}
 800af10:	20011da0 	.word	0x20011da0
 800af14:	20011e08 	.word	0x20011e08
 800af18:	20011e70 	.word	0x20011e70

0800af1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b082      	sub	sp, #8
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800af24:	f001 fa8a 	bl	800c43c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800af28:	4b2d      	ldr	r3, [pc, #180]	; (800afe0 <prvAddNewTaskToReadyList+0xc4>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	3301      	adds	r3, #1
 800af2e:	4a2c      	ldr	r2, [pc, #176]	; (800afe0 <prvAddNewTaskToReadyList+0xc4>)
 800af30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800af32:	4b2c      	ldr	r3, [pc, #176]	; (800afe4 <prvAddNewTaskToReadyList+0xc8>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d109      	bne.n	800af4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800af3a:	4a2a      	ldr	r2, [pc, #168]	; (800afe4 <prvAddNewTaskToReadyList+0xc8>)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800af40:	4b27      	ldr	r3, [pc, #156]	; (800afe0 <prvAddNewTaskToReadyList+0xc4>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	2b01      	cmp	r3, #1
 800af46:	d110      	bne.n	800af6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800af48:	f000 fc64 	bl	800b814 <prvInitialiseTaskLists>
 800af4c:	e00d      	b.n	800af6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800af4e:	4b26      	ldr	r3, [pc, #152]	; (800afe8 <prvAddNewTaskToReadyList+0xcc>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d109      	bne.n	800af6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800af56:	4b23      	ldr	r3, [pc, #140]	; (800afe4 <prvAddNewTaskToReadyList+0xc8>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af60:	429a      	cmp	r2, r3
 800af62:	d802      	bhi.n	800af6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800af64:	4a1f      	ldr	r2, [pc, #124]	; (800afe4 <prvAddNewTaskToReadyList+0xc8>)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800af6a:	4b20      	ldr	r3, [pc, #128]	; (800afec <prvAddNewTaskToReadyList+0xd0>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	3301      	adds	r3, #1
 800af70:	4a1e      	ldr	r2, [pc, #120]	; (800afec <prvAddNewTaskToReadyList+0xd0>)
 800af72:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800af74:	4b1d      	ldr	r3, [pc, #116]	; (800afec <prvAddNewTaskToReadyList+0xd0>)
 800af76:	681a      	ldr	r2, [r3, #0]
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af80:	4b1b      	ldr	r3, [pc, #108]	; (800aff0 <prvAddNewTaskToReadyList+0xd4>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	429a      	cmp	r2, r3
 800af86:	d903      	bls.n	800af90 <prvAddNewTaskToReadyList+0x74>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af8c:	4a18      	ldr	r2, [pc, #96]	; (800aff0 <prvAddNewTaskToReadyList+0xd4>)
 800af8e:	6013      	str	r3, [r2, #0]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af94:	4613      	mov	r3, r2
 800af96:	009b      	lsls	r3, r3, #2
 800af98:	4413      	add	r3, r2
 800af9a:	009b      	lsls	r3, r3, #2
 800af9c:	4a15      	ldr	r2, [pc, #84]	; (800aff4 <prvAddNewTaskToReadyList+0xd8>)
 800af9e:	441a      	add	r2, r3
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	3304      	adds	r3, #4
 800afa4:	4619      	mov	r1, r3
 800afa6:	4610      	mov	r0, r2
 800afa8:	f7ff f8d7 	bl	800a15a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800afac:	f001 fa7a 	bl	800c4a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800afb0:	4b0d      	ldr	r3, [pc, #52]	; (800afe8 <prvAddNewTaskToReadyList+0xcc>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d00e      	beq.n	800afd6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800afb8:	4b0a      	ldr	r3, [pc, #40]	; (800afe4 <prvAddNewTaskToReadyList+0xc8>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afc2:	429a      	cmp	r2, r3
 800afc4:	d207      	bcs.n	800afd6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800afc6:	4b0c      	ldr	r3, [pc, #48]	; (800aff8 <prvAddNewTaskToReadyList+0xdc>)
 800afc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afcc:	601a      	str	r2, [r3, #0]
 800afce:	f3bf 8f4f 	dsb	sy
 800afd2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800afd6:	bf00      	nop
 800afd8:	3708      	adds	r7, #8
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
 800afde:	bf00      	nop
 800afe0:	20008ca0 	.word	0x20008ca0
 800afe4:	200087cc 	.word	0x200087cc
 800afe8:	20008cac 	.word	0x20008cac
 800afec:	20008cbc 	.word	0x20008cbc
 800aff0:	20008ca8 	.word	0x20008ca8
 800aff4:	200087d0 	.word	0x200087d0
 800aff8:	e000ed04 	.word	0xe000ed04

0800affc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800affc:	b580      	push	{r7, lr}
 800affe:	b084      	sub	sp, #16
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b004:	2300      	movs	r3, #0
 800b006:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d019      	beq.n	800b042 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b00e:	4b14      	ldr	r3, [pc, #80]	; (800b060 <vTaskDelay+0x64>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d00c      	beq.n	800b030 <vTaskDelay+0x34>
	__asm volatile
 800b016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b01a:	b672      	cpsid	i
 800b01c:	f383 8811 	msr	BASEPRI, r3
 800b020:	f3bf 8f6f 	isb	sy
 800b024:	f3bf 8f4f 	dsb	sy
 800b028:	b662      	cpsie	i
 800b02a:	60bb      	str	r3, [r7, #8]
}
 800b02c:	bf00      	nop
 800b02e:	e7fe      	b.n	800b02e <vTaskDelay+0x32>
			vTaskSuspendAll();
 800b030:	f000 f88e 	bl	800b150 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b034:	2100      	movs	r1, #0
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 fd40 	bl	800babc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b03c:	f000 f896 	bl	800b16c <xTaskResumeAll>
 800b040:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d107      	bne.n	800b058 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800b048:	4b06      	ldr	r3, [pc, #24]	; (800b064 <vTaskDelay+0x68>)
 800b04a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b04e:	601a      	str	r2, [r3, #0]
 800b050:	f3bf 8f4f 	dsb	sy
 800b054:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b058:	bf00      	nop
 800b05a:	3710      	adds	r7, #16
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}
 800b060:	20008cc8 	.word	0x20008cc8
 800b064:	e000ed04 	.word	0xe000ed04

0800b068 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b08a      	sub	sp, #40	; 0x28
 800b06c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b06e:	2300      	movs	r3, #0
 800b070:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b072:	2300      	movs	r3, #0
 800b074:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b076:	463a      	mov	r2, r7
 800b078:	1d39      	adds	r1, r7, #4
 800b07a:	f107 0308 	add.w	r3, r7, #8
 800b07e:	4618      	mov	r0, r3
 800b080:	f7ff f80a 	bl	800a098 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b084:	6839      	ldr	r1, [r7, #0]
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	68ba      	ldr	r2, [r7, #8]
 800b08a:	9202      	str	r2, [sp, #8]
 800b08c:	9301      	str	r3, [sp, #4]
 800b08e:	2300      	movs	r3, #0
 800b090:	9300      	str	r3, [sp, #0]
 800b092:	2300      	movs	r3, #0
 800b094:	460a      	mov	r2, r1
 800b096:	4926      	ldr	r1, [pc, #152]	; (800b130 <vTaskStartScheduler+0xc8>)
 800b098:	4826      	ldr	r0, [pc, #152]	; (800b134 <vTaskStartScheduler+0xcc>)
 800b09a:	f7ff fdef 	bl	800ac7c <xTaskCreateStatic>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	4a25      	ldr	r2, [pc, #148]	; (800b138 <vTaskStartScheduler+0xd0>)
 800b0a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b0a4:	4b24      	ldr	r3, [pc, #144]	; (800b138 <vTaskStartScheduler+0xd0>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d002      	beq.n	800b0b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	617b      	str	r3, [r7, #20]
 800b0b0:	e001      	b.n	800b0b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	2b01      	cmp	r3, #1
 800b0ba:	d102      	bne.n	800b0c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b0bc:	f000 fd52 	bl	800bb64 <xTimerCreateTimerTask>
 800b0c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	2b01      	cmp	r3, #1
 800b0c6:	d11d      	bne.n	800b104 <vTaskStartScheduler+0x9c>
	__asm volatile
 800b0c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0cc:	b672      	cpsid	i
 800b0ce:	f383 8811 	msr	BASEPRI, r3
 800b0d2:	f3bf 8f6f 	isb	sy
 800b0d6:	f3bf 8f4f 	dsb	sy
 800b0da:	b662      	cpsie	i
 800b0dc:	613b      	str	r3, [r7, #16]
}
 800b0de:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b0e0:	4b16      	ldr	r3, [pc, #88]	; (800b13c <vTaskStartScheduler+0xd4>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	3354      	adds	r3, #84	; 0x54
 800b0e6:	4a16      	ldr	r2, [pc, #88]	; (800b140 <vTaskStartScheduler+0xd8>)
 800b0e8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b0ea:	4b16      	ldr	r3, [pc, #88]	; (800b144 <vTaskStartScheduler+0xdc>)
 800b0ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b0f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b0f2:	4b15      	ldr	r3, [pc, #84]	; (800b148 <vTaskStartScheduler+0xe0>)
 800b0f4:	2201      	movs	r2, #1
 800b0f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b0f8:	4b14      	ldr	r3, [pc, #80]	; (800b14c <vTaskStartScheduler+0xe4>)
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b0fe:	f001 f91f 	bl	800c340 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b102:	e010      	b.n	800b126 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b10a:	d10c      	bne.n	800b126 <vTaskStartScheduler+0xbe>
	__asm volatile
 800b10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b110:	b672      	cpsid	i
 800b112:	f383 8811 	msr	BASEPRI, r3
 800b116:	f3bf 8f6f 	isb	sy
 800b11a:	f3bf 8f4f 	dsb	sy
 800b11e:	b662      	cpsie	i
 800b120:	60fb      	str	r3, [r7, #12]
}
 800b122:	bf00      	nop
 800b124:	e7fe      	b.n	800b124 <vTaskStartScheduler+0xbc>
}
 800b126:	bf00      	nop
 800b128:	3718      	adds	r7, #24
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
 800b12e:	bf00      	nop
 800b130:	0801f918 	.word	0x0801f918
 800b134:	0800b7e5 	.word	0x0800b7e5
 800b138:	20008cc4 	.word	0x20008cc4
 800b13c:	200087cc 	.word	0x200087cc
 800b140:	20002338 	.word	0x20002338
 800b144:	20008cc0 	.word	0x20008cc0
 800b148:	20008cac 	.word	0x20008cac
 800b14c:	20008ca4 	.word	0x20008ca4

0800b150 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b150:	b480      	push	{r7}
 800b152:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b154:	4b04      	ldr	r3, [pc, #16]	; (800b168 <vTaskSuspendAll+0x18>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	3301      	adds	r3, #1
 800b15a:	4a03      	ldr	r2, [pc, #12]	; (800b168 <vTaskSuspendAll+0x18>)
 800b15c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b15e:	bf00      	nop
 800b160:	46bd      	mov	sp, r7
 800b162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b166:	4770      	bx	lr
 800b168:	20008cc8 	.word	0x20008cc8

0800b16c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b084      	sub	sp, #16
 800b170:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b172:	2300      	movs	r3, #0
 800b174:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b176:	2300      	movs	r3, #0
 800b178:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b17a:	4b43      	ldr	r3, [pc, #268]	; (800b288 <xTaskResumeAll+0x11c>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d10c      	bne.n	800b19c <xTaskResumeAll+0x30>
	__asm volatile
 800b182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b186:	b672      	cpsid	i
 800b188:	f383 8811 	msr	BASEPRI, r3
 800b18c:	f3bf 8f6f 	isb	sy
 800b190:	f3bf 8f4f 	dsb	sy
 800b194:	b662      	cpsie	i
 800b196:	603b      	str	r3, [r7, #0]
}
 800b198:	bf00      	nop
 800b19a:	e7fe      	b.n	800b19a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b19c:	f001 f94e 	bl	800c43c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b1a0:	4b39      	ldr	r3, [pc, #228]	; (800b288 <xTaskResumeAll+0x11c>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	3b01      	subs	r3, #1
 800b1a6:	4a38      	ldr	r2, [pc, #224]	; (800b288 <xTaskResumeAll+0x11c>)
 800b1a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1aa:	4b37      	ldr	r3, [pc, #220]	; (800b288 <xTaskResumeAll+0x11c>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d162      	bne.n	800b278 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b1b2:	4b36      	ldr	r3, [pc, #216]	; (800b28c <xTaskResumeAll+0x120>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d05e      	beq.n	800b278 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b1ba:	e02f      	b.n	800b21c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1bc:	4b34      	ldr	r3, [pc, #208]	; (800b290 <xTaskResumeAll+0x124>)
 800b1be:	68db      	ldr	r3, [r3, #12]
 800b1c0:	68db      	ldr	r3, [r3, #12]
 800b1c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	3318      	adds	r3, #24
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f7ff f823 	bl	800a214 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	3304      	adds	r3, #4
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f7ff f81e 	bl	800a214 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1dc:	4b2d      	ldr	r3, [pc, #180]	; (800b294 <xTaskResumeAll+0x128>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	d903      	bls.n	800b1ec <xTaskResumeAll+0x80>
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1e8:	4a2a      	ldr	r2, [pc, #168]	; (800b294 <xTaskResumeAll+0x128>)
 800b1ea:	6013      	str	r3, [r2, #0]
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1f0:	4613      	mov	r3, r2
 800b1f2:	009b      	lsls	r3, r3, #2
 800b1f4:	4413      	add	r3, r2
 800b1f6:	009b      	lsls	r3, r3, #2
 800b1f8:	4a27      	ldr	r2, [pc, #156]	; (800b298 <xTaskResumeAll+0x12c>)
 800b1fa:	441a      	add	r2, r3
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	3304      	adds	r3, #4
 800b200:	4619      	mov	r1, r3
 800b202:	4610      	mov	r0, r2
 800b204:	f7fe ffa9 	bl	800a15a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b20c:	4b23      	ldr	r3, [pc, #140]	; (800b29c <xTaskResumeAll+0x130>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b212:	429a      	cmp	r2, r3
 800b214:	d302      	bcc.n	800b21c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800b216:	4b22      	ldr	r3, [pc, #136]	; (800b2a0 <xTaskResumeAll+0x134>)
 800b218:	2201      	movs	r2, #1
 800b21a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b21c:	4b1c      	ldr	r3, [pc, #112]	; (800b290 <xTaskResumeAll+0x124>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d1cb      	bne.n	800b1bc <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d001      	beq.n	800b22e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b22a:	f000 fb97 	bl	800b95c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b22e:	4b1d      	ldr	r3, [pc, #116]	; (800b2a4 <xTaskResumeAll+0x138>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d010      	beq.n	800b25c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b23a:	f000 f847 	bl	800b2cc <xTaskIncrementTick>
 800b23e:	4603      	mov	r3, r0
 800b240:	2b00      	cmp	r3, #0
 800b242:	d002      	beq.n	800b24a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800b244:	4b16      	ldr	r3, [pc, #88]	; (800b2a0 <xTaskResumeAll+0x134>)
 800b246:	2201      	movs	r2, #1
 800b248:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	3b01      	subs	r3, #1
 800b24e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d1f1      	bne.n	800b23a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800b256:	4b13      	ldr	r3, [pc, #76]	; (800b2a4 <xTaskResumeAll+0x138>)
 800b258:	2200      	movs	r2, #0
 800b25a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b25c:	4b10      	ldr	r3, [pc, #64]	; (800b2a0 <xTaskResumeAll+0x134>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d009      	beq.n	800b278 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b264:	2301      	movs	r3, #1
 800b266:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b268:	4b0f      	ldr	r3, [pc, #60]	; (800b2a8 <xTaskResumeAll+0x13c>)
 800b26a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b26e:	601a      	str	r2, [r3, #0]
 800b270:	f3bf 8f4f 	dsb	sy
 800b274:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b278:	f001 f914 	bl	800c4a4 <vPortExitCritical>

	return xAlreadyYielded;
 800b27c:	68bb      	ldr	r3, [r7, #8]
}
 800b27e:	4618      	mov	r0, r3
 800b280:	3710      	adds	r7, #16
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}
 800b286:	bf00      	nop
 800b288:	20008cc8 	.word	0x20008cc8
 800b28c:	20008ca0 	.word	0x20008ca0
 800b290:	20008c60 	.word	0x20008c60
 800b294:	20008ca8 	.word	0x20008ca8
 800b298:	200087d0 	.word	0x200087d0
 800b29c:	200087cc 	.word	0x200087cc
 800b2a0:	20008cb4 	.word	0x20008cb4
 800b2a4:	20008cb0 	.word	0x20008cb0
 800b2a8:	e000ed04 	.word	0xe000ed04

0800b2ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b083      	sub	sp, #12
 800b2b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b2b2:	4b05      	ldr	r3, [pc, #20]	; (800b2c8 <xTaskGetTickCount+0x1c>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b2b8:	687b      	ldr	r3, [r7, #4]
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	370c      	adds	r7, #12
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c4:	4770      	bx	lr
 800b2c6:	bf00      	nop
 800b2c8:	20008ca4 	.word	0x20008ca4

0800b2cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b086      	sub	sp, #24
 800b2d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2d6:	4b50      	ldr	r3, [pc, #320]	; (800b418 <xTaskIncrementTick+0x14c>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	f040 808b 	bne.w	800b3f6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b2e0:	4b4e      	ldr	r3, [pc, #312]	; (800b41c <xTaskIncrementTick+0x150>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	3301      	adds	r3, #1
 800b2e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b2e8:	4a4c      	ldr	r2, [pc, #304]	; (800b41c <xTaskIncrementTick+0x150>)
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d122      	bne.n	800b33a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800b2f4:	4b4a      	ldr	r3, [pc, #296]	; (800b420 <xTaskIncrementTick+0x154>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d00c      	beq.n	800b318 <xTaskIncrementTick+0x4c>
	__asm volatile
 800b2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b302:	b672      	cpsid	i
 800b304:	f383 8811 	msr	BASEPRI, r3
 800b308:	f3bf 8f6f 	isb	sy
 800b30c:	f3bf 8f4f 	dsb	sy
 800b310:	b662      	cpsie	i
 800b312:	603b      	str	r3, [r7, #0]
}
 800b314:	bf00      	nop
 800b316:	e7fe      	b.n	800b316 <xTaskIncrementTick+0x4a>
 800b318:	4b41      	ldr	r3, [pc, #260]	; (800b420 <xTaskIncrementTick+0x154>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	60fb      	str	r3, [r7, #12]
 800b31e:	4b41      	ldr	r3, [pc, #260]	; (800b424 <xTaskIncrementTick+0x158>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	4a3f      	ldr	r2, [pc, #252]	; (800b420 <xTaskIncrementTick+0x154>)
 800b324:	6013      	str	r3, [r2, #0]
 800b326:	4a3f      	ldr	r2, [pc, #252]	; (800b424 <xTaskIncrementTick+0x158>)
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	6013      	str	r3, [r2, #0]
 800b32c:	4b3e      	ldr	r3, [pc, #248]	; (800b428 <xTaskIncrementTick+0x15c>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	3301      	adds	r3, #1
 800b332:	4a3d      	ldr	r2, [pc, #244]	; (800b428 <xTaskIncrementTick+0x15c>)
 800b334:	6013      	str	r3, [r2, #0]
 800b336:	f000 fb11 	bl	800b95c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b33a:	4b3c      	ldr	r3, [pc, #240]	; (800b42c <xTaskIncrementTick+0x160>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	693a      	ldr	r2, [r7, #16]
 800b340:	429a      	cmp	r2, r3
 800b342:	d349      	bcc.n	800b3d8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b344:	4b36      	ldr	r3, [pc, #216]	; (800b420 <xTaskIncrementTick+0x154>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d104      	bne.n	800b358 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b34e:	4b37      	ldr	r3, [pc, #220]	; (800b42c <xTaskIncrementTick+0x160>)
 800b350:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b354:	601a      	str	r2, [r3, #0]
					break;
 800b356:	e03f      	b.n	800b3d8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b358:	4b31      	ldr	r3, [pc, #196]	; (800b420 <xTaskIncrementTick+0x154>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	68db      	ldr	r3, [r3, #12]
 800b35e:	68db      	ldr	r3, [r3, #12]
 800b360:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	685b      	ldr	r3, [r3, #4]
 800b366:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b368:	693a      	ldr	r2, [r7, #16]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	429a      	cmp	r2, r3
 800b36e:	d203      	bcs.n	800b378 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b370:	4a2e      	ldr	r2, [pc, #184]	; (800b42c <xTaskIncrementTick+0x160>)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b376:	e02f      	b.n	800b3d8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	3304      	adds	r3, #4
 800b37c:	4618      	mov	r0, r3
 800b37e:	f7fe ff49 	bl	800a214 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b386:	2b00      	cmp	r3, #0
 800b388:	d004      	beq.n	800b394 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	3318      	adds	r3, #24
 800b38e:	4618      	mov	r0, r3
 800b390:	f7fe ff40 	bl	800a214 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b398:	4b25      	ldr	r3, [pc, #148]	; (800b430 <xTaskIncrementTick+0x164>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d903      	bls.n	800b3a8 <xTaskIncrementTick+0xdc>
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a4:	4a22      	ldr	r2, [pc, #136]	; (800b430 <xTaskIncrementTick+0x164>)
 800b3a6:	6013      	str	r3, [r2, #0]
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3ac:	4613      	mov	r3, r2
 800b3ae:	009b      	lsls	r3, r3, #2
 800b3b0:	4413      	add	r3, r2
 800b3b2:	009b      	lsls	r3, r3, #2
 800b3b4:	4a1f      	ldr	r2, [pc, #124]	; (800b434 <xTaskIncrementTick+0x168>)
 800b3b6:	441a      	add	r2, r3
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	3304      	adds	r3, #4
 800b3bc:	4619      	mov	r1, r3
 800b3be:	4610      	mov	r0, r2
 800b3c0:	f7fe fecb 	bl	800a15a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3c8:	4b1b      	ldr	r3, [pc, #108]	; (800b438 <xTaskIncrementTick+0x16c>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ce:	429a      	cmp	r2, r3
 800b3d0:	d3b8      	bcc.n	800b344 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b3d6:	e7b5      	b.n	800b344 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b3d8:	4b17      	ldr	r3, [pc, #92]	; (800b438 <xTaskIncrementTick+0x16c>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3de:	4915      	ldr	r1, [pc, #84]	; (800b434 <xTaskIncrementTick+0x168>)
 800b3e0:	4613      	mov	r3, r2
 800b3e2:	009b      	lsls	r3, r3, #2
 800b3e4:	4413      	add	r3, r2
 800b3e6:	009b      	lsls	r3, r3, #2
 800b3e8:	440b      	add	r3, r1
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	2b01      	cmp	r3, #1
 800b3ee:	d907      	bls.n	800b400 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	617b      	str	r3, [r7, #20]
 800b3f4:	e004      	b.n	800b400 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b3f6:	4b11      	ldr	r3, [pc, #68]	; (800b43c <xTaskIncrementTick+0x170>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	3301      	adds	r3, #1
 800b3fc:	4a0f      	ldr	r2, [pc, #60]	; (800b43c <xTaskIncrementTick+0x170>)
 800b3fe:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b400:	4b0f      	ldr	r3, [pc, #60]	; (800b440 <xTaskIncrementTick+0x174>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d001      	beq.n	800b40c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800b408:	2301      	movs	r3, #1
 800b40a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b40c:	697b      	ldr	r3, [r7, #20]
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3718      	adds	r7, #24
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}
 800b416:	bf00      	nop
 800b418:	20008cc8 	.word	0x20008cc8
 800b41c:	20008ca4 	.word	0x20008ca4
 800b420:	20008c58 	.word	0x20008c58
 800b424:	20008c5c 	.word	0x20008c5c
 800b428:	20008cb8 	.word	0x20008cb8
 800b42c:	20008cc0 	.word	0x20008cc0
 800b430:	20008ca8 	.word	0x20008ca8
 800b434:	200087d0 	.word	0x200087d0
 800b438:	200087cc 	.word	0x200087cc
 800b43c:	20008cb0 	.word	0x20008cb0
 800b440:	20008cb4 	.word	0x20008cb4

0800b444 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b444:	b480      	push	{r7}
 800b446:	b085      	sub	sp, #20
 800b448:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b44a:	4b2b      	ldr	r3, [pc, #172]	; (800b4f8 <vTaskSwitchContext+0xb4>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d003      	beq.n	800b45a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b452:	4b2a      	ldr	r3, [pc, #168]	; (800b4fc <vTaskSwitchContext+0xb8>)
 800b454:	2201      	movs	r2, #1
 800b456:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b458:	e048      	b.n	800b4ec <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800b45a:	4b28      	ldr	r3, [pc, #160]	; (800b4fc <vTaskSwitchContext+0xb8>)
 800b45c:	2200      	movs	r2, #0
 800b45e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b460:	4b27      	ldr	r3, [pc, #156]	; (800b500 <vTaskSwitchContext+0xbc>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	60fb      	str	r3, [r7, #12]
 800b466:	e012      	b.n	800b48e <vTaskSwitchContext+0x4a>
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d10c      	bne.n	800b488 <vTaskSwitchContext+0x44>
	__asm volatile
 800b46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b472:	b672      	cpsid	i
 800b474:	f383 8811 	msr	BASEPRI, r3
 800b478:	f3bf 8f6f 	isb	sy
 800b47c:	f3bf 8f4f 	dsb	sy
 800b480:	b662      	cpsie	i
 800b482:	607b      	str	r3, [r7, #4]
}
 800b484:	bf00      	nop
 800b486:	e7fe      	b.n	800b486 <vTaskSwitchContext+0x42>
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	3b01      	subs	r3, #1
 800b48c:	60fb      	str	r3, [r7, #12]
 800b48e:	491d      	ldr	r1, [pc, #116]	; (800b504 <vTaskSwitchContext+0xc0>)
 800b490:	68fa      	ldr	r2, [r7, #12]
 800b492:	4613      	mov	r3, r2
 800b494:	009b      	lsls	r3, r3, #2
 800b496:	4413      	add	r3, r2
 800b498:	009b      	lsls	r3, r3, #2
 800b49a:	440b      	add	r3, r1
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d0e2      	beq.n	800b468 <vTaskSwitchContext+0x24>
 800b4a2:	68fa      	ldr	r2, [r7, #12]
 800b4a4:	4613      	mov	r3, r2
 800b4a6:	009b      	lsls	r3, r3, #2
 800b4a8:	4413      	add	r3, r2
 800b4aa:	009b      	lsls	r3, r3, #2
 800b4ac:	4a15      	ldr	r2, [pc, #84]	; (800b504 <vTaskSwitchContext+0xc0>)
 800b4ae:	4413      	add	r3, r2
 800b4b0:	60bb      	str	r3, [r7, #8]
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	685b      	ldr	r3, [r3, #4]
 800b4b6:	685a      	ldr	r2, [r3, #4]
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	605a      	str	r2, [r3, #4]
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	685a      	ldr	r2, [r3, #4]
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	3308      	adds	r3, #8
 800b4c4:	429a      	cmp	r2, r3
 800b4c6:	d104      	bne.n	800b4d2 <vTaskSwitchContext+0x8e>
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	685b      	ldr	r3, [r3, #4]
 800b4cc:	685a      	ldr	r2, [r3, #4]
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	605a      	str	r2, [r3, #4]
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	685b      	ldr	r3, [r3, #4]
 800b4d6:	68db      	ldr	r3, [r3, #12]
 800b4d8:	4a0b      	ldr	r2, [pc, #44]	; (800b508 <vTaskSwitchContext+0xc4>)
 800b4da:	6013      	str	r3, [r2, #0]
 800b4dc:	4a08      	ldr	r2, [pc, #32]	; (800b500 <vTaskSwitchContext+0xbc>)
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b4e2:	4b09      	ldr	r3, [pc, #36]	; (800b508 <vTaskSwitchContext+0xc4>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	3354      	adds	r3, #84	; 0x54
 800b4e8:	4a08      	ldr	r2, [pc, #32]	; (800b50c <vTaskSwitchContext+0xc8>)
 800b4ea:	6013      	str	r3, [r2, #0]
}
 800b4ec:	bf00      	nop
 800b4ee:	3714      	adds	r7, #20
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr
 800b4f8:	20008cc8 	.word	0x20008cc8
 800b4fc:	20008cb4 	.word	0x20008cb4
 800b500:	20008ca8 	.word	0x20008ca8
 800b504:	200087d0 	.word	0x200087d0
 800b508:	200087cc 	.word	0x200087cc
 800b50c:	20002338 	.word	0x20002338

0800b510 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b084      	sub	sp, #16
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
 800b518:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d10c      	bne.n	800b53a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800b520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b524:	b672      	cpsid	i
 800b526:	f383 8811 	msr	BASEPRI, r3
 800b52a:	f3bf 8f6f 	isb	sy
 800b52e:	f3bf 8f4f 	dsb	sy
 800b532:	b662      	cpsie	i
 800b534:	60fb      	str	r3, [r7, #12]
}
 800b536:	bf00      	nop
 800b538:	e7fe      	b.n	800b538 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b53a:	4b07      	ldr	r3, [pc, #28]	; (800b558 <vTaskPlaceOnEventList+0x48>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	3318      	adds	r3, #24
 800b540:	4619      	mov	r1, r3
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f7fe fe2d 	bl	800a1a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b548:	2101      	movs	r1, #1
 800b54a:	6838      	ldr	r0, [r7, #0]
 800b54c:	f000 fab6 	bl	800babc <prvAddCurrentTaskToDelayedList>
}
 800b550:	bf00      	nop
 800b552:	3710      	adds	r7, #16
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}
 800b558:	200087cc 	.word	0x200087cc

0800b55c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b086      	sub	sp, #24
 800b560:	af00      	add	r7, sp, #0
 800b562:	60f8      	str	r0, [r7, #12]
 800b564:	60b9      	str	r1, [r7, #8]
 800b566:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d10c      	bne.n	800b588 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800b56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b572:	b672      	cpsid	i
 800b574:	f383 8811 	msr	BASEPRI, r3
 800b578:	f3bf 8f6f 	isb	sy
 800b57c:	f3bf 8f4f 	dsb	sy
 800b580:	b662      	cpsie	i
 800b582:	617b      	str	r3, [r7, #20]
}
 800b584:	bf00      	nop
 800b586:	e7fe      	b.n	800b586 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b588:	4b0a      	ldr	r3, [pc, #40]	; (800b5b4 <vTaskPlaceOnEventListRestricted+0x58>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	3318      	adds	r3, #24
 800b58e:	4619      	mov	r1, r3
 800b590:	68f8      	ldr	r0, [r7, #12]
 800b592:	f7fe fde2 	bl	800a15a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d002      	beq.n	800b5a2 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800b59c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b5a0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b5a2:	6879      	ldr	r1, [r7, #4]
 800b5a4:	68b8      	ldr	r0, [r7, #8]
 800b5a6:	f000 fa89 	bl	800babc <prvAddCurrentTaskToDelayedList>
	}
 800b5aa:	bf00      	nop
 800b5ac:	3718      	adds	r7, #24
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}
 800b5b2:	bf00      	nop
 800b5b4:	200087cc 	.word	0x200087cc

0800b5b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b086      	sub	sp, #24
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	68db      	ldr	r3, [r3, #12]
 800b5c4:	68db      	ldr	r3, [r3, #12]
 800b5c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d10c      	bne.n	800b5e8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800b5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d2:	b672      	cpsid	i
 800b5d4:	f383 8811 	msr	BASEPRI, r3
 800b5d8:	f3bf 8f6f 	isb	sy
 800b5dc:	f3bf 8f4f 	dsb	sy
 800b5e0:	b662      	cpsie	i
 800b5e2:	60fb      	str	r3, [r7, #12]
}
 800b5e4:	bf00      	nop
 800b5e6:	e7fe      	b.n	800b5e6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	3318      	adds	r3, #24
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f7fe fe11 	bl	800a214 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5f2:	4b1e      	ldr	r3, [pc, #120]	; (800b66c <xTaskRemoveFromEventList+0xb4>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d11d      	bne.n	800b636 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	3304      	adds	r3, #4
 800b5fe:	4618      	mov	r0, r3
 800b600:	f7fe fe08 	bl	800a214 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b608:	4b19      	ldr	r3, [pc, #100]	; (800b670 <xTaskRemoveFromEventList+0xb8>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d903      	bls.n	800b618 <xTaskRemoveFromEventList+0x60>
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b614:	4a16      	ldr	r2, [pc, #88]	; (800b670 <xTaskRemoveFromEventList+0xb8>)
 800b616:	6013      	str	r3, [r2, #0]
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b61c:	4613      	mov	r3, r2
 800b61e:	009b      	lsls	r3, r3, #2
 800b620:	4413      	add	r3, r2
 800b622:	009b      	lsls	r3, r3, #2
 800b624:	4a13      	ldr	r2, [pc, #76]	; (800b674 <xTaskRemoveFromEventList+0xbc>)
 800b626:	441a      	add	r2, r3
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	3304      	adds	r3, #4
 800b62c:	4619      	mov	r1, r3
 800b62e:	4610      	mov	r0, r2
 800b630:	f7fe fd93 	bl	800a15a <vListInsertEnd>
 800b634:	e005      	b.n	800b642 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	3318      	adds	r3, #24
 800b63a:	4619      	mov	r1, r3
 800b63c:	480e      	ldr	r0, [pc, #56]	; (800b678 <xTaskRemoveFromEventList+0xc0>)
 800b63e:	f7fe fd8c 	bl	800a15a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b646:	4b0d      	ldr	r3, [pc, #52]	; (800b67c <xTaskRemoveFromEventList+0xc4>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b64c:	429a      	cmp	r2, r3
 800b64e:	d905      	bls.n	800b65c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b650:	2301      	movs	r3, #1
 800b652:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b654:	4b0a      	ldr	r3, [pc, #40]	; (800b680 <xTaskRemoveFromEventList+0xc8>)
 800b656:	2201      	movs	r2, #1
 800b658:	601a      	str	r2, [r3, #0]
 800b65a:	e001      	b.n	800b660 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800b65c:	2300      	movs	r3, #0
 800b65e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b660:	697b      	ldr	r3, [r7, #20]
}
 800b662:	4618      	mov	r0, r3
 800b664:	3718      	adds	r7, #24
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}
 800b66a:	bf00      	nop
 800b66c:	20008cc8 	.word	0x20008cc8
 800b670:	20008ca8 	.word	0x20008ca8
 800b674:	200087d0 	.word	0x200087d0
 800b678:	20008c60 	.word	0x20008c60
 800b67c:	200087cc 	.word	0x200087cc
 800b680:	20008cb4 	.word	0x20008cb4

0800b684 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b084      	sub	sp, #16
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d10c      	bne.n	800b6ac <vTaskSetTimeOutState+0x28>
	__asm volatile
 800b692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b696:	b672      	cpsid	i
 800b698:	f383 8811 	msr	BASEPRI, r3
 800b69c:	f3bf 8f6f 	isb	sy
 800b6a0:	f3bf 8f4f 	dsb	sy
 800b6a4:	b662      	cpsie	i
 800b6a6:	60fb      	str	r3, [r7, #12]
}
 800b6a8:	bf00      	nop
 800b6aa:	e7fe      	b.n	800b6aa <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 800b6ac:	f000 fec6 	bl	800c43c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b6b0:	4b06      	ldr	r3, [pc, #24]	; (800b6cc <vTaskSetTimeOutState+0x48>)
 800b6b2:	681a      	ldr	r2, [r3, #0]
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800b6b8:	4b05      	ldr	r3, [pc, #20]	; (800b6d0 <vTaskSetTimeOutState+0x4c>)
 800b6ba:	681a      	ldr	r2, [r3, #0]
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800b6c0:	f000 fef0 	bl	800c4a4 <vPortExitCritical>
}
 800b6c4:	bf00      	nop
 800b6c6:	3710      	adds	r7, #16
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}
 800b6cc:	20008cb8 	.word	0x20008cb8
 800b6d0:	20008ca4 	.word	0x20008ca4

0800b6d4 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b083      	sub	sp, #12
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b6dc:	4b06      	ldr	r3, [pc, #24]	; (800b6f8 <vTaskInternalSetTimeOutState+0x24>)
 800b6de:	681a      	ldr	r2, [r3, #0]
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b6e4:	4b05      	ldr	r3, [pc, #20]	; (800b6fc <vTaskInternalSetTimeOutState+0x28>)
 800b6e6:	681a      	ldr	r2, [r3, #0]
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	605a      	str	r2, [r3, #4]
}
 800b6ec:	bf00      	nop
 800b6ee:	370c      	adds	r7, #12
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f6:	4770      	bx	lr
 800b6f8:	20008cb8 	.word	0x20008cb8
 800b6fc:	20008ca4 	.word	0x20008ca4

0800b700 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b088      	sub	sp, #32
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
 800b708:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d10c      	bne.n	800b72a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800b710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b714:	b672      	cpsid	i
 800b716:	f383 8811 	msr	BASEPRI, r3
 800b71a:	f3bf 8f6f 	isb	sy
 800b71e:	f3bf 8f4f 	dsb	sy
 800b722:	b662      	cpsie	i
 800b724:	613b      	str	r3, [r7, #16]
}
 800b726:	bf00      	nop
 800b728:	e7fe      	b.n	800b728 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d10c      	bne.n	800b74a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800b730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b734:	b672      	cpsid	i
 800b736:	f383 8811 	msr	BASEPRI, r3
 800b73a:	f3bf 8f6f 	isb	sy
 800b73e:	f3bf 8f4f 	dsb	sy
 800b742:	b662      	cpsie	i
 800b744:	60fb      	str	r3, [r7, #12]
}
 800b746:	bf00      	nop
 800b748:	e7fe      	b.n	800b748 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800b74a:	f000 fe77 	bl	800c43c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b74e:	4b1d      	ldr	r3, [pc, #116]	; (800b7c4 <xTaskCheckForTimeOut+0xc4>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	685b      	ldr	r3, [r3, #4]
 800b758:	69ba      	ldr	r2, [r7, #24]
 800b75a:	1ad3      	subs	r3, r2, r3
 800b75c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b766:	d102      	bne.n	800b76e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b768:	2300      	movs	r3, #0
 800b76a:	61fb      	str	r3, [r7, #28]
 800b76c:	e023      	b.n	800b7b6 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681a      	ldr	r2, [r3, #0]
 800b772:	4b15      	ldr	r3, [pc, #84]	; (800b7c8 <xTaskCheckForTimeOut+0xc8>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	429a      	cmp	r2, r3
 800b778:	d007      	beq.n	800b78a <xTaskCheckForTimeOut+0x8a>
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	685b      	ldr	r3, [r3, #4]
 800b77e:	69ba      	ldr	r2, [r7, #24]
 800b780:	429a      	cmp	r2, r3
 800b782:	d302      	bcc.n	800b78a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b784:	2301      	movs	r3, #1
 800b786:	61fb      	str	r3, [r7, #28]
 800b788:	e015      	b.n	800b7b6 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	697a      	ldr	r2, [r7, #20]
 800b790:	429a      	cmp	r2, r3
 800b792:	d20b      	bcs.n	800b7ac <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	681a      	ldr	r2, [r3, #0]
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	1ad2      	subs	r2, r2, r3
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f7ff ff97 	bl	800b6d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	61fb      	str	r3, [r7, #28]
 800b7aa:	e004      	b.n	800b7b6 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b7b6:	f000 fe75 	bl	800c4a4 <vPortExitCritical>

	return xReturn;
 800b7ba:	69fb      	ldr	r3, [r7, #28]
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3720      	adds	r7, #32
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}
 800b7c4:	20008ca4 	.word	0x20008ca4
 800b7c8:	20008cb8 	.word	0x20008cb8

0800b7cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b7d0:	4b03      	ldr	r3, [pc, #12]	; (800b7e0 <vTaskMissedYield+0x14>)
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	601a      	str	r2, [r3, #0]
}
 800b7d6:	bf00      	nop
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7de:	4770      	bx	lr
 800b7e0:	20008cb4 	.word	0x20008cb4

0800b7e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b082      	sub	sp, #8
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b7ec:	f000 f852 	bl	800b894 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b7f0:	4b06      	ldr	r3, [pc, #24]	; (800b80c <prvIdleTask+0x28>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	2b01      	cmp	r3, #1
 800b7f6:	d9f9      	bls.n	800b7ec <prvIdleTask+0x8>
			{
				taskYIELD();
 800b7f8:	4b05      	ldr	r3, [pc, #20]	; (800b810 <prvIdleTask+0x2c>)
 800b7fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7fe:	601a      	str	r2, [r3, #0]
 800b800:	f3bf 8f4f 	dsb	sy
 800b804:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b808:	e7f0      	b.n	800b7ec <prvIdleTask+0x8>
 800b80a:	bf00      	nop
 800b80c:	200087d0 	.word	0x200087d0
 800b810:	e000ed04 	.word	0xe000ed04

0800b814 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b082      	sub	sp, #8
 800b818:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b81a:	2300      	movs	r3, #0
 800b81c:	607b      	str	r3, [r7, #4]
 800b81e:	e00c      	b.n	800b83a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b820:	687a      	ldr	r2, [r7, #4]
 800b822:	4613      	mov	r3, r2
 800b824:	009b      	lsls	r3, r3, #2
 800b826:	4413      	add	r3, r2
 800b828:	009b      	lsls	r3, r3, #2
 800b82a:	4a12      	ldr	r2, [pc, #72]	; (800b874 <prvInitialiseTaskLists+0x60>)
 800b82c:	4413      	add	r3, r2
 800b82e:	4618      	mov	r0, r3
 800b830:	f7fe fc66 	bl	800a100 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	3301      	adds	r3, #1
 800b838:	607b      	str	r3, [r7, #4]
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2b37      	cmp	r3, #55	; 0x37
 800b83e:	d9ef      	bls.n	800b820 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b840:	480d      	ldr	r0, [pc, #52]	; (800b878 <prvInitialiseTaskLists+0x64>)
 800b842:	f7fe fc5d 	bl	800a100 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b846:	480d      	ldr	r0, [pc, #52]	; (800b87c <prvInitialiseTaskLists+0x68>)
 800b848:	f7fe fc5a 	bl	800a100 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b84c:	480c      	ldr	r0, [pc, #48]	; (800b880 <prvInitialiseTaskLists+0x6c>)
 800b84e:	f7fe fc57 	bl	800a100 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b852:	480c      	ldr	r0, [pc, #48]	; (800b884 <prvInitialiseTaskLists+0x70>)
 800b854:	f7fe fc54 	bl	800a100 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b858:	480b      	ldr	r0, [pc, #44]	; (800b888 <prvInitialiseTaskLists+0x74>)
 800b85a:	f7fe fc51 	bl	800a100 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b85e:	4b0b      	ldr	r3, [pc, #44]	; (800b88c <prvInitialiseTaskLists+0x78>)
 800b860:	4a05      	ldr	r2, [pc, #20]	; (800b878 <prvInitialiseTaskLists+0x64>)
 800b862:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b864:	4b0a      	ldr	r3, [pc, #40]	; (800b890 <prvInitialiseTaskLists+0x7c>)
 800b866:	4a05      	ldr	r2, [pc, #20]	; (800b87c <prvInitialiseTaskLists+0x68>)
 800b868:	601a      	str	r2, [r3, #0]
}
 800b86a:	bf00      	nop
 800b86c:	3708      	adds	r7, #8
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
 800b872:	bf00      	nop
 800b874:	200087d0 	.word	0x200087d0
 800b878:	20008c30 	.word	0x20008c30
 800b87c:	20008c44 	.word	0x20008c44
 800b880:	20008c60 	.word	0x20008c60
 800b884:	20008c74 	.word	0x20008c74
 800b888:	20008c8c 	.word	0x20008c8c
 800b88c:	20008c58 	.word	0x20008c58
 800b890:	20008c5c 	.word	0x20008c5c

0800b894 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b082      	sub	sp, #8
 800b898:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b89a:	e019      	b.n	800b8d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b89c:	f000 fdce 	bl	800c43c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8a0:	4b10      	ldr	r3, [pc, #64]	; (800b8e4 <prvCheckTasksWaitingTermination+0x50>)
 800b8a2:	68db      	ldr	r3, [r3, #12]
 800b8a4:	68db      	ldr	r3, [r3, #12]
 800b8a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	3304      	adds	r3, #4
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f7fe fcb1 	bl	800a214 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b8b2:	4b0d      	ldr	r3, [pc, #52]	; (800b8e8 <prvCheckTasksWaitingTermination+0x54>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	3b01      	subs	r3, #1
 800b8b8:	4a0b      	ldr	r2, [pc, #44]	; (800b8e8 <prvCheckTasksWaitingTermination+0x54>)
 800b8ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b8bc:	4b0b      	ldr	r3, [pc, #44]	; (800b8ec <prvCheckTasksWaitingTermination+0x58>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	3b01      	subs	r3, #1
 800b8c2:	4a0a      	ldr	r2, [pc, #40]	; (800b8ec <prvCheckTasksWaitingTermination+0x58>)
 800b8c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b8c6:	f000 fded 	bl	800c4a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f000 f810 	bl	800b8f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b8d0:	4b06      	ldr	r3, [pc, #24]	; (800b8ec <prvCheckTasksWaitingTermination+0x58>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d1e1      	bne.n	800b89c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b8d8:	bf00      	nop
 800b8da:	bf00      	nop
 800b8dc:	3708      	adds	r7, #8
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}
 800b8e2:	bf00      	nop
 800b8e4:	20008c74 	.word	0x20008c74
 800b8e8:	20008ca0 	.word	0x20008ca0
 800b8ec:	20008c88 	.word	0x20008c88

0800b8f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b084      	sub	sp, #16
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	3354      	adds	r3, #84	; 0x54
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f013 f825 	bl	801e94c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d108      	bne.n	800b91e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b910:	4618      	mov	r0, r3
 800b912:	f000 ff89 	bl	800c828 <vPortFree>
				vPortFree( pxTCB );
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f000 ff86 	bl	800c828 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b91c:	e01a      	b.n	800b954 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b924:	2b01      	cmp	r3, #1
 800b926:	d103      	bne.n	800b930 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f000 ff7d 	bl	800c828 <vPortFree>
	}
 800b92e:	e011      	b.n	800b954 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b936:	2b02      	cmp	r3, #2
 800b938:	d00c      	beq.n	800b954 <prvDeleteTCB+0x64>
	__asm volatile
 800b93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b93e:	b672      	cpsid	i
 800b940:	f383 8811 	msr	BASEPRI, r3
 800b944:	f3bf 8f6f 	isb	sy
 800b948:	f3bf 8f4f 	dsb	sy
 800b94c:	b662      	cpsie	i
 800b94e:	60fb      	str	r3, [r7, #12]
}
 800b950:	bf00      	nop
 800b952:	e7fe      	b.n	800b952 <prvDeleteTCB+0x62>
	}
 800b954:	bf00      	nop
 800b956:	3710      	adds	r7, #16
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}

0800b95c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b95c:	b480      	push	{r7}
 800b95e:	b083      	sub	sp, #12
 800b960:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b962:	4b0c      	ldr	r3, [pc, #48]	; (800b994 <prvResetNextTaskUnblockTime+0x38>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d104      	bne.n	800b976 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b96c:	4b0a      	ldr	r3, [pc, #40]	; (800b998 <prvResetNextTaskUnblockTime+0x3c>)
 800b96e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b972:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b974:	e008      	b.n	800b988 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b976:	4b07      	ldr	r3, [pc, #28]	; (800b994 <prvResetNextTaskUnblockTime+0x38>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	68db      	ldr	r3, [r3, #12]
 800b97c:	68db      	ldr	r3, [r3, #12]
 800b97e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	685b      	ldr	r3, [r3, #4]
 800b984:	4a04      	ldr	r2, [pc, #16]	; (800b998 <prvResetNextTaskUnblockTime+0x3c>)
 800b986:	6013      	str	r3, [r2, #0]
}
 800b988:	bf00      	nop
 800b98a:	370c      	adds	r7, #12
 800b98c:	46bd      	mov	sp, r7
 800b98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b992:	4770      	bx	lr
 800b994:	20008c58 	.word	0x20008c58
 800b998:	20008cc0 	.word	0x20008cc0

0800b99c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b99c:	b480      	push	{r7}
 800b99e:	b083      	sub	sp, #12
 800b9a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b9a2:	4b0b      	ldr	r3, [pc, #44]	; (800b9d0 <xTaskGetSchedulerState+0x34>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d102      	bne.n	800b9b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	607b      	str	r3, [r7, #4]
 800b9ae:	e008      	b.n	800b9c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9b0:	4b08      	ldr	r3, [pc, #32]	; (800b9d4 <xTaskGetSchedulerState+0x38>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d102      	bne.n	800b9be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b9b8:	2302      	movs	r3, #2
 800b9ba:	607b      	str	r3, [r7, #4]
 800b9bc:	e001      	b.n	800b9c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b9c2:	687b      	ldr	r3, [r7, #4]
	}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	370c      	adds	r7, #12
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ce:	4770      	bx	lr
 800b9d0:	20008cac 	.word	0x20008cac
 800b9d4:	20008cc8 	.word	0x20008cc8

0800b9d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b086      	sub	sp, #24
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d05a      	beq.n	800baa4 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b9ee:	4b30      	ldr	r3, [pc, #192]	; (800bab0 <xTaskPriorityDisinherit+0xd8>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	693a      	ldr	r2, [r7, #16]
 800b9f4:	429a      	cmp	r2, r3
 800b9f6:	d00c      	beq.n	800ba12 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800b9f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9fc:	b672      	cpsid	i
 800b9fe:	f383 8811 	msr	BASEPRI, r3
 800ba02:	f3bf 8f6f 	isb	sy
 800ba06:	f3bf 8f4f 	dsb	sy
 800ba0a:	b662      	cpsie	i
 800ba0c:	60fb      	str	r3, [r7, #12]
}
 800ba0e:	bf00      	nop
 800ba10:	e7fe      	b.n	800ba10 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800ba12:	693b      	ldr	r3, [r7, #16]
 800ba14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d10c      	bne.n	800ba34 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800ba1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba1e:	b672      	cpsid	i
 800ba20:	f383 8811 	msr	BASEPRI, r3
 800ba24:	f3bf 8f6f 	isb	sy
 800ba28:	f3bf 8f4f 	dsb	sy
 800ba2c:	b662      	cpsie	i
 800ba2e:	60bb      	str	r3, [r7, #8]
}
 800ba30:	bf00      	nop
 800ba32:	e7fe      	b.n	800ba32 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba38:	1e5a      	subs	r2, r3, #1
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba42:	693b      	ldr	r3, [r7, #16]
 800ba44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba46:	429a      	cmp	r2, r3
 800ba48:	d02c      	beq.n	800baa4 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d128      	bne.n	800baa4 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba52:	693b      	ldr	r3, [r7, #16]
 800ba54:	3304      	adds	r3, #4
 800ba56:	4618      	mov	r0, r3
 800ba58:	f7fe fbdc 	bl	800a214 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ba5c:	693b      	ldr	r3, [r7, #16]
 800ba5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba68:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ba70:	693b      	ldr	r3, [r7, #16]
 800ba72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba74:	4b0f      	ldr	r3, [pc, #60]	; (800bab4 <xTaskPriorityDisinherit+0xdc>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d903      	bls.n	800ba84 <xTaskPriorityDisinherit+0xac>
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba80:	4a0c      	ldr	r2, [pc, #48]	; (800bab4 <xTaskPriorityDisinherit+0xdc>)
 800ba82:	6013      	str	r3, [r2, #0]
 800ba84:	693b      	ldr	r3, [r7, #16]
 800ba86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba88:	4613      	mov	r3, r2
 800ba8a:	009b      	lsls	r3, r3, #2
 800ba8c:	4413      	add	r3, r2
 800ba8e:	009b      	lsls	r3, r3, #2
 800ba90:	4a09      	ldr	r2, [pc, #36]	; (800bab8 <xTaskPriorityDisinherit+0xe0>)
 800ba92:	441a      	add	r2, r3
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	3304      	adds	r3, #4
 800ba98:	4619      	mov	r1, r3
 800ba9a:	4610      	mov	r0, r2
 800ba9c:	f7fe fb5d 	bl	800a15a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800baa0:	2301      	movs	r3, #1
 800baa2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800baa4:	697b      	ldr	r3, [r7, #20]
	}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3718      	adds	r7, #24
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}
 800baae:	bf00      	nop
 800bab0:	200087cc 	.word	0x200087cc
 800bab4:	20008ca8 	.word	0x20008ca8
 800bab8:	200087d0 	.word	0x200087d0

0800babc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b084      	sub	sp, #16
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bac6:	4b21      	ldr	r3, [pc, #132]	; (800bb4c <prvAddCurrentTaskToDelayedList+0x90>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bacc:	4b20      	ldr	r3, [pc, #128]	; (800bb50 <prvAddCurrentTaskToDelayedList+0x94>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	3304      	adds	r3, #4
 800bad2:	4618      	mov	r0, r3
 800bad4:	f7fe fb9e 	bl	800a214 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bade:	d10a      	bne.n	800baf6 <prvAddCurrentTaskToDelayedList+0x3a>
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d007      	beq.n	800baf6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bae6:	4b1a      	ldr	r3, [pc, #104]	; (800bb50 <prvAddCurrentTaskToDelayedList+0x94>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	3304      	adds	r3, #4
 800baec:	4619      	mov	r1, r3
 800baee:	4819      	ldr	r0, [pc, #100]	; (800bb54 <prvAddCurrentTaskToDelayedList+0x98>)
 800baf0:	f7fe fb33 	bl	800a15a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800baf4:	e026      	b.n	800bb44 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800baf6:	68fa      	ldr	r2, [r7, #12]
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	4413      	add	r3, r2
 800bafc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bafe:	4b14      	ldr	r3, [pc, #80]	; (800bb50 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	68ba      	ldr	r2, [r7, #8]
 800bb04:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bb06:	68ba      	ldr	r2, [r7, #8]
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	429a      	cmp	r2, r3
 800bb0c:	d209      	bcs.n	800bb22 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb0e:	4b12      	ldr	r3, [pc, #72]	; (800bb58 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bb10:	681a      	ldr	r2, [r3, #0]
 800bb12:	4b0f      	ldr	r3, [pc, #60]	; (800bb50 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	3304      	adds	r3, #4
 800bb18:	4619      	mov	r1, r3
 800bb1a:	4610      	mov	r0, r2
 800bb1c:	f7fe fb41 	bl	800a1a2 <vListInsert>
}
 800bb20:	e010      	b.n	800bb44 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb22:	4b0e      	ldr	r3, [pc, #56]	; (800bb5c <prvAddCurrentTaskToDelayedList+0xa0>)
 800bb24:	681a      	ldr	r2, [r3, #0]
 800bb26:	4b0a      	ldr	r3, [pc, #40]	; (800bb50 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	3304      	adds	r3, #4
 800bb2c:	4619      	mov	r1, r3
 800bb2e:	4610      	mov	r0, r2
 800bb30:	f7fe fb37 	bl	800a1a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bb34:	4b0a      	ldr	r3, [pc, #40]	; (800bb60 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	68ba      	ldr	r2, [r7, #8]
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	d202      	bcs.n	800bb44 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bb3e:	4a08      	ldr	r2, [pc, #32]	; (800bb60 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	6013      	str	r3, [r2, #0]
}
 800bb44:	bf00      	nop
 800bb46:	3710      	adds	r7, #16
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}
 800bb4c:	20008ca4 	.word	0x20008ca4
 800bb50:	200087cc 	.word	0x200087cc
 800bb54:	20008c8c 	.word	0x20008c8c
 800bb58:	20008c5c 	.word	0x20008c5c
 800bb5c:	20008c58 	.word	0x20008c58
 800bb60:	20008cc0 	.word	0x20008cc0

0800bb64 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b08a      	sub	sp, #40	; 0x28
 800bb68:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bb6e:	f000 fb15 	bl	800c19c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bb72:	4b1d      	ldr	r3, [pc, #116]	; (800bbe8 <xTimerCreateTimerTask+0x84>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d021      	beq.n	800bbbe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bb82:	1d3a      	adds	r2, r7, #4
 800bb84:	f107 0108 	add.w	r1, r7, #8
 800bb88:	f107 030c 	add.w	r3, r7, #12
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f7fe fa9d 	bl	800a0cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bb92:	6879      	ldr	r1, [r7, #4]
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	68fa      	ldr	r2, [r7, #12]
 800bb98:	9202      	str	r2, [sp, #8]
 800bb9a:	9301      	str	r3, [sp, #4]
 800bb9c:	2302      	movs	r3, #2
 800bb9e:	9300      	str	r3, [sp, #0]
 800bba0:	2300      	movs	r3, #0
 800bba2:	460a      	mov	r2, r1
 800bba4:	4911      	ldr	r1, [pc, #68]	; (800bbec <xTimerCreateTimerTask+0x88>)
 800bba6:	4812      	ldr	r0, [pc, #72]	; (800bbf0 <xTimerCreateTimerTask+0x8c>)
 800bba8:	f7ff f868 	bl	800ac7c <xTaskCreateStatic>
 800bbac:	4603      	mov	r3, r0
 800bbae:	4a11      	ldr	r2, [pc, #68]	; (800bbf4 <xTimerCreateTimerTask+0x90>)
 800bbb0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bbb2:	4b10      	ldr	r3, [pc, #64]	; (800bbf4 <xTimerCreateTimerTask+0x90>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d001      	beq.n	800bbbe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bbba:	2301      	movs	r3, #1
 800bbbc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d10c      	bne.n	800bbde <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800bbc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc8:	b672      	cpsid	i
 800bbca:	f383 8811 	msr	BASEPRI, r3
 800bbce:	f3bf 8f6f 	isb	sy
 800bbd2:	f3bf 8f4f 	dsb	sy
 800bbd6:	b662      	cpsie	i
 800bbd8:	613b      	str	r3, [r7, #16]
}
 800bbda:	bf00      	nop
 800bbdc:	e7fe      	b.n	800bbdc <xTimerCreateTimerTask+0x78>
	return xReturn;
 800bbde:	697b      	ldr	r3, [r7, #20]
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	3718      	adds	r7, #24
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}
 800bbe8:	20008cfc 	.word	0x20008cfc
 800bbec:	0801f920 	.word	0x0801f920
 800bbf0:	0800bd35 	.word	0x0800bd35
 800bbf4:	20008d00 	.word	0x20008d00

0800bbf8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b08a      	sub	sp, #40	; 0x28
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	60f8      	str	r0, [r7, #12]
 800bc00:	60b9      	str	r1, [r7, #8]
 800bc02:	607a      	str	r2, [r7, #4]
 800bc04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bc06:	2300      	movs	r3, #0
 800bc08:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d10c      	bne.n	800bc2a <xTimerGenericCommand+0x32>
	__asm volatile
 800bc10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc14:	b672      	cpsid	i
 800bc16:	f383 8811 	msr	BASEPRI, r3
 800bc1a:	f3bf 8f6f 	isb	sy
 800bc1e:	f3bf 8f4f 	dsb	sy
 800bc22:	b662      	cpsie	i
 800bc24:	623b      	str	r3, [r7, #32]
}
 800bc26:	bf00      	nop
 800bc28:	e7fe      	b.n	800bc28 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bc2a:	4b1a      	ldr	r3, [pc, #104]	; (800bc94 <xTimerGenericCommand+0x9c>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d02a      	beq.n	800bc88 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	2b05      	cmp	r3, #5
 800bc42:	dc18      	bgt.n	800bc76 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bc44:	f7ff feaa 	bl	800b99c <xTaskGetSchedulerState>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	2b02      	cmp	r3, #2
 800bc4c:	d109      	bne.n	800bc62 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bc4e:	4b11      	ldr	r3, [pc, #68]	; (800bc94 <xTimerGenericCommand+0x9c>)
 800bc50:	6818      	ldr	r0, [r3, #0]
 800bc52:	f107 0110 	add.w	r1, r7, #16
 800bc56:	2300      	movs	r3, #0
 800bc58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc5a:	f7fe fc15 	bl	800a488 <xQueueGenericSend>
 800bc5e:	6278      	str	r0, [r7, #36]	; 0x24
 800bc60:	e012      	b.n	800bc88 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bc62:	4b0c      	ldr	r3, [pc, #48]	; (800bc94 <xTimerGenericCommand+0x9c>)
 800bc64:	6818      	ldr	r0, [r3, #0]
 800bc66:	f107 0110 	add.w	r1, r7, #16
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	f7fe fc0b 	bl	800a488 <xQueueGenericSend>
 800bc72:	6278      	str	r0, [r7, #36]	; 0x24
 800bc74:	e008      	b.n	800bc88 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bc76:	4b07      	ldr	r3, [pc, #28]	; (800bc94 <xTimerGenericCommand+0x9c>)
 800bc78:	6818      	ldr	r0, [r3, #0]
 800bc7a:	f107 0110 	add.w	r1, r7, #16
 800bc7e:	2300      	movs	r3, #0
 800bc80:	683a      	ldr	r2, [r7, #0]
 800bc82:	f7fe fd07 	bl	800a694 <xQueueGenericSendFromISR>
 800bc86:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3728      	adds	r7, #40	; 0x28
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}
 800bc92:	bf00      	nop
 800bc94:	20008cfc 	.word	0x20008cfc

0800bc98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b088      	sub	sp, #32
 800bc9c:	af02      	add	r7, sp, #8
 800bc9e:	6078      	str	r0, [r7, #4]
 800bca0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bca2:	4b23      	ldr	r3, [pc, #140]	; (800bd30 <prvProcessExpiredTimer+0x98>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	68db      	ldr	r3, [r3, #12]
 800bca8:	68db      	ldr	r3, [r3, #12]
 800bcaa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	3304      	adds	r3, #4
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f7fe faaf 	bl	800a214 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bcbc:	f003 0304 	and.w	r3, r3, #4
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d024      	beq.n	800bd0e <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	699a      	ldr	r2, [r3, #24]
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	18d1      	adds	r1, r2, r3
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	683a      	ldr	r2, [r7, #0]
 800bcd0:	6978      	ldr	r0, [r7, #20]
 800bcd2:	f000 f8d3 	bl	800be7c <prvInsertTimerInActiveList>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d021      	beq.n	800bd20 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bcdc:	2300      	movs	r3, #0
 800bcde:	9300      	str	r3, [sp, #0]
 800bce0:	2300      	movs	r3, #0
 800bce2:	687a      	ldr	r2, [r7, #4]
 800bce4:	2100      	movs	r1, #0
 800bce6:	6978      	ldr	r0, [r7, #20]
 800bce8:	f7ff ff86 	bl	800bbf8 <xTimerGenericCommand>
 800bcec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d115      	bne.n	800bd20 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800bcf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf8:	b672      	cpsid	i
 800bcfa:	f383 8811 	msr	BASEPRI, r3
 800bcfe:	f3bf 8f6f 	isb	sy
 800bd02:	f3bf 8f4f 	dsb	sy
 800bd06:	b662      	cpsie	i
 800bd08:	60fb      	str	r3, [r7, #12]
}
 800bd0a:	bf00      	nop
 800bd0c:	e7fe      	b.n	800bd0c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd14:	f023 0301 	bic.w	r3, r3, #1
 800bd18:	b2da      	uxtb	r2, r3
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bd20:	697b      	ldr	r3, [r7, #20]
 800bd22:	6a1b      	ldr	r3, [r3, #32]
 800bd24:	6978      	ldr	r0, [r7, #20]
 800bd26:	4798      	blx	r3
}
 800bd28:	bf00      	nop
 800bd2a:	3718      	adds	r7, #24
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}
 800bd30:	20008cf4 	.word	0x20008cf4

0800bd34 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b084      	sub	sp, #16
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bd3c:	f107 0308 	add.w	r3, r7, #8
 800bd40:	4618      	mov	r0, r3
 800bd42:	f000 f857 	bl	800bdf4 <prvGetNextExpireTime>
 800bd46:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	4619      	mov	r1, r3
 800bd4c:	68f8      	ldr	r0, [r7, #12]
 800bd4e:	f000 f803 	bl	800bd58 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bd52:	f000 f8d5 	bl	800bf00 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bd56:	e7f1      	b.n	800bd3c <prvTimerTask+0x8>

0800bd58 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b084      	sub	sp, #16
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
 800bd60:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bd62:	f7ff f9f5 	bl	800b150 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bd66:	f107 0308 	add.w	r3, r7, #8
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f000 f866 	bl	800be3c <prvSampleTimeNow>
 800bd70:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d130      	bne.n	800bdda <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d10a      	bne.n	800bd94 <prvProcessTimerOrBlockTask+0x3c>
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	429a      	cmp	r2, r3
 800bd84:	d806      	bhi.n	800bd94 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bd86:	f7ff f9f1 	bl	800b16c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bd8a:	68f9      	ldr	r1, [r7, #12]
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f7ff ff83 	bl	800bc98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bd92:	e024      	b.n	800bdde <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d008      	beq.n	800bdac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bd9a:	4b13      	ldr	r3, [pc, #76]	; (800bde8 <prvProcessTimerOrBlockTask+0x90>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d101      	bne.n	800bda8 <prvProcessTimerOrBlockTask+0x50>
 800bda4:	2301      	movs	r3, #1
 800bda6:	e000      	b.n	800bdaa <prvProcessTimerOrBlockTask+0x52>
 800bda8:	2300      	movs	r3, #0
 800bdaa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bdac:	4b0f      	ldr	r3, [pc, #60]	; (800bdec <prvProcessTimerOrBlockTask+0x94>)
 800bdae:	6818      	ldr	r0, [r3, #0]
 800bdb0:	687a      	ldr	r2, [r7, #4]
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	1ad3      	subs	r3, r2, r3
 800bdb6:	683a      	ldr	r2, [r7, #0]
 800bdb8:	4619      	mov	r1, r3
 800bdba:	f7fe ff2b 	bl	800ac14 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bdbe:	f7ff f9d5 	bl	800b16c <xTaskResumeAll>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d10a      	bne.n	800bdde <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bdc8:	4b09      	ldr	r3, [pc, #36]	; (800bdf0 <prvProcessTimerOrBlockTask+0x98>)
 800bdca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdce:	601a      	str	r2, [r3, #0]
 800bdd0:	f3bf 8f4f 	dsb	sy
 800bdd4:	f3bf 8f6f 	isb	sy
}
 800bdd8:	e001      	b.n	800bdde <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bdda:	f7ff f9c7 	bl	800b16c <xTaskResumeAll>
}
 800bdde:	bf00      	nop
 800bde0:	3710      	adds	r7, #16
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}
 800bde6:	bf00      	nop
 800bde8:	20008cf8 	.word	0x20008cf8
 800bdec:	20008cfc 	.word	0x20008cfc
 800bdf0:	e000ed04 	.word	0xe000ed04

0800bdf4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bdf4:	b480      	push	{r7}
 800bdf6:	b085      	sub	sp, #20
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bdfc:	4b0e      	ldr	r3, [pc, #56]	; (800be38 <prvGetNextExpireTime+0x44>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d101      	bne.n	800be0a <prvGetNextExpireTime+0x16>
 800be06:	2201      	movs	r2, #1
 800be08:	e000      	b.n	800be0c <prvGetNextExpireTime+0x18>
 800be0a:	2200      	movs	r2, #0
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d105      	bne.n	800be24 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800be18:	4b07      	ldr	r3, [pc, #28]	; (800be38 <prvGetNextExpireTime+0x44>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	68db      	ldr	r3, [r3, #12]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	60fb      	str	r3, [r7, #12]
 800be22:	e001      	b.n	800be28 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800be24:	2300      	movs	r3, #0
 800be26:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800be28:	68fb      	ldr	r3, [r7, #12]
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	3714      	adds	r7, #20
 800be2e:	46bd      	mov	sp, r7
 800be30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be34:	4770      	bx	lr
 800be36:	bf00      	nop
 800be38:	20008cf4 	.word	0x20008cf4

0800be3c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b084      	sub	sp, #16
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800be44:	f7ff fa32 	bl	800b2ac <xTaskGetTickCount>
 800be48:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800be4a:	4b0b      	ldr	r3, [pc, #44]	; (800be78 <prvSampleTimeNow+0x3c>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	68fa      	ldr	r2, [r7, #12]
 800be50:	429a      	cmp	r2, r3
 800be52:	d205      	bcs.n	800be60 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800be54:	f000 f93c 	bl	800c0d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2201      	movs	r2, #1
 800be5c:	601a      	str	r2, [r3, #0]
 800be5e:	e002      	b.n	800be66 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2200      	movs	r2, #0
 800be64:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800be66:	4a04      	ldr	r2, [pc, #16]	; (800be78 <prvSampleTimeNow+0x3c>)
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800be6c:	68fb      	ldr	r3, [r7, #12]
}
 800be6e:	4618      	mov	r0, r3
 800be70:	3710      	adds	r7, #16
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}
 800be76:	bf00      	nop
 800be78:	20008d04 	.word	0x20008d04

0800be7c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b086      	sub	sp, #24
 800be80:	af00      	add	r7, sp, #0
 800be82:	60f8      	str	r0, [r7, #12]
 800be84:	60b9      	str	r1, [r7, #8]
 800be86:	607a      	str	r2, [r7, #4]
 800be88:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800be8a:	2300      	movs	r3, #0
 800be8c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	68ba      	ldr	r2, [r7, #8]
 800be92:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	68fa      	ldr	r2, [r7, #12]
 800be98:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800be9a:	68ba      	ldr	r2, [r7, #8]
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	429a      	cmp	r2, r3
 800bea0:	d812      	bhi.n	800bec8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bea2:	687a      	ldr	r2, [r7, #4]
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	1ad2      	subs	r2, r2, r3
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	699b      	ldr	r3, [r3, #24]
 800beac:	429a      	cmp	r2, r3
 800beae:	d302      	bcc.n	800beb6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800beb0:	2301      	movs	r3, #1
 800beb2:	617b      	str	r3, [r7, #20]
 800beb4:	e01b      	b.n	800beee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800beb6:	4b10      	ldr	r3, [pc, #64]	; (800bef8 <prvInsertTimerInActiveList+0x7c>)
 800beb8:	681a      	ldr	r2, [r3, #0]
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	3304      	adds	r3, #4
 800bebe:	4619      	mov	r1, r3
 800bec0:	4610      	mov	r0, r2
 800bec2:	f7fe f96e 	bl	800a1a2 <vListInsert>
 800bec6:	e012      	b.n	800beee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bec8:	687a      	ldr	r2, [r7, #4]
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	429a      	cmp	r2, r3
 800bece:	d206      	bcs.n	800bede <prvInsertTimerInActiveList+0x62>
 800bed0:	68ba      	ldr	r2, [r7, #8]
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d302      	bcc.n	800bede <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bed8:	2301      	movs	r3, #1
 800beda:	617b      	str	r3, [r7, #20]
 800bedc:	e007      	b.n	800beee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bede:	4b07      	ldr	r3, [pc, #28]	; (800befc <prvInsertTimerInActiveList+0x80>)
 800bee0:	681a      	ldr	r2, [r3, #0]
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	3304      	adds	r3, #4
 800bee6:	4619      	mov	r1, r3
 800bee8:	4610      	mov	r0, r2
 800beea:	f7fe f95a 	bl	800a1a2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800beee:	697b      	ldr	r3, [r7, #20]
}
 800bef0:	4618      	mov	r0, r3
 800bef2:	3718      	adds	r7, #24
 800bef4:	46bd      	mov	sp, r7
 800bef6:	bd80      	pop	{r7, pc}
 800bef8:	20008cf8 	.word	0x20008cf8
 800befc:	20008cf4 	.word	0x20008cf4

0800bf00 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b08e      	sub	sp, #56	; 0x38
 800bf04:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bf06:	e0d0      	b.n	800c0aa <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	da1a      	bge.n	800bf44 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bf0e:	1d3b      	adds	r3, r7, #4
 800bf10:	3304      	adds	r3, #4
 800bf12:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bf14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d10c      	bne.n	800bf34 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800bf1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf1e:	b672      	cpsid	i
 800bf20:	f383 8811 	msr	BASEPRI, r3
 800bf24:	f3bf 8f6f 	isb	sy
 800bf28:	f3bf 8f4f 	dsb	sy
 800bf2c:	b662      	cpsie	i
 800bf2e:	61fb      	str	r3, [r7, #28]
}
 800bf30:	bf00      	nop
 800bf32:	e7fe      	b.n	800bf32 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bf34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf3a:	6850      	ldr	r0, [r2, #4]
 800bf3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf3e:	6892      	ldr	r2, [r2, #8]
 800bf40:	4611      	mov	r1, r2
 800bf42:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	f2c0 80af 	blt.w	800c0aa <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bf50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf52:	695b      	ldr	r3, [r3, #20]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d004      	beq.n	800bf62 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf5a:	3304      	adds	r3, #4
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f7fe f959 	bl	800a214 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bf62:	463b      	mov	r3, r7
 800bf64:	4618      	mov	r0, r3
 800bf66:	f7ff ff69 	bl	800be3c <prvSampleTimeNow>
 800bf6a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2b09      	cmp	r3, #9
 800bf70:	f200 809a 	bhi.w	800c0a8 <prvProcessReceivedCommands+0x1a8>
 800bf74:	a201      	add	r2, pc, #4	; (adr r2, 800bf7c <prvProcessReceivedCommands+0x7c>)
 800bf76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf7a:	bf00      	nop
 800bf7c:	0800bfa5 	.word	0x0800bfa5
 800bf80:	0800bfa5 	.word	0x0800bfa5
 800bf84:	0800bfa5 	.word	0x0800bfa5
 800bf88:	0800c01d 	.word	0x0800c01d
 800bf8c:	0800c031 	.word	0x0800c031
 800bf90:	0800c07f 	.word	0x0800c07f
 800bf94:	0800bfa5 	.word	0x0800bfa5
 800bf98:	0800bfa5 	.word	0x0800bfa5
 800bf9c:	0800c01d 	.word	0x0800c01d
 800bfa0:	0800c031 	.word	0x0800c031
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bfa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bfaa:	f043 0301 	orr.w	r3, r3, #1
 800bfae:	b2da      	uxtb	r2, r3
 800bfb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bfb6:	68ba      	ldr	r2, [r7, #8]
 800bfb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfba:	699b      	ldr	r3, [r3, #24]
 800bfbc:	18d1      	adds	r1, r2, r3
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bfc4:	f7ff ff5a 	bl	800be7c <prvInsertTimerInActiveList>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d06d      	beq.n	800c0aa <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bfce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd0:	6a1b      	ldr	r3, [r3, #32]
 800bfd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bfd4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bfd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bfdc:	f003 0304 	and.w	r3, r3, #4
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d062      	beq.n	800c0aa <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bfe4:	68ba      	ldr	r2, [r7, #8]
 800bfe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe8:	699b      	ldr	r3, [r3, #24]
 800bfea:	441a      	add	r2, r3
 800bfec:	2300      	movs	r3, #0
 800bfee:	9300      	str	r3, [sp, #0]
 800bff0:	2300      	movs	r3, #0
 800bff2:	2100      	movs	r1, #0
 800bff4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bff6:	f7ff fdff 	bl	800bbf8 <xTimerGenericCommand>
 800bffa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bffc:	6a3b      	ldr	r3, [r7, #32]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d153      	bne.n	800c0aa <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800c002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c006:	b672      	cpsid	i
 800c008:	f383 8811 	msr	BASEPRI, r3
 800c00c:	f3bf 8f6f 	isb	sy
 800c010:	f3bf 8f4f 	dsb	sy
 800c014:	b662      	cpsie	i
 800c016:	61bb      	str	r3, [r7, #24]
}
 800c018:	bf00      	nop
 800c01a:	e7fe      	b.n	800c01a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c01e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c022:	f023 0301 	bic.w	r3, r3, #1
 800c026:	b2da      	uxtb	r2, r3
 800c028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c02a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c02e:	e03c      	b.n	800c0aa <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c032:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c036:	f043 0301 	orr.w	r3, r3, #1
 800c03a:	b2da      	uxtb	r2, r3
 800c03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c03e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c042:	68ba      	ldr	r2, [r7, #8]
 800c044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c046:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c04a:	699b      	ldr	r3, [r3, #24]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d10c      	bne.n	800c06a <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800c050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c054:	b672      	cpsid	i
 800c056:	f383 8811 	msr	BASEPRI, r3
 800c05a:	f3bf 8f6f 	isb	sy
 800c05e:	f3bf 8f4f 	dsb	sy
 800c062:	b662      	cpsie	i
 800c064:	617b      	str	r3, [r7, #20]
}
 800c066:	bf00      	nop
 800c068:	e7fe      	b.n	800c068 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c06c:	699a      	ldr	r2, [r3, #24]
 800c06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c070:	18d1      	adds	r1, r2, r3
 800c072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c076:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c078:	f7ff ff00 	bl	800be7c <prvInsertTimerInActiveList>
					break;
 800c07c:	e015      	b.n	800c0aa <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c080:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c084:	f003 0302 	and.w	r3, r3, #2
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d103      	bne.n	800c094 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800c08c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c08e:	f000 fbcb 	bl	800c828 <vPortFree>
 800c092:	e00a      	b.n	800c0aa <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c096:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c09a:	f023 0301 	bic.w	r3, r3, #1
 800c09e:	b2da      	uxtb	r2, r3
 800c0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c0a6:	e000      	b.n	800c0aa <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800c0a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c0aa:	4b08      	ldr	r3, [pc, #32]	; (800c0cc <prvProcessReceivedCommands+0x1cc>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	1d39      	adds	r1, r7, #4
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f7fe fb8e 	bl	800a7d4 <xQueueReceive>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	f47f af24 	bne.w	800bf08 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c0c0:	bf00      	nop
 800c0c2:	bf00      	nop
 800c0c4:	3730      	adds	r7, #48	; 0x30
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}
 800c0ca:	bf00      	nop
 800c0cc:	20008cfc 	.word	0x20008cfc

0800c0d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b088      	sub	sp, #32
 800c0d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c0d6:	e04a      	b.n	800c16e <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c0d8:	4b2e      	ldr	r3, [pc, #184]	; (800c194 <prvSwitchTimerLists+0xc4>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	68db      	ldr	r3, [r3, #12]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0e2:	4b2c      	ldr	r3, [pc, #176]	; (800c194 <prvSwitchTimerLists+0xc4>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	68db      	ldr	r3, [r3, #12]
 800c0e8:	68db      	ldr	r3, [r3, #12]
 800c0ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	3304      	adds	r3, #4
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f7fe f88f 	bl	800a214 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	6a1b      	ldr	r3, [r3, #32]
 800c0fa:	68f8      	ldr	r0, [r7, #12]
 800c0fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c104:	f003 0304 	and.w	r3, r3, #4
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d030      	beq.n	800c16e <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	699b      	ldr	r3, [r3, #24]
 800c110:	693a      	ldr	r2, [r7, #16]
 800c112:	4413      	add	r3, r2
 800c114:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c116:	68ba      	ldr	r2, [r7, #8]
 800c118:	693b      	ldr	r3, [r7, #16]
 800c11a:	429a      	cmp	r2, r3
 800c11c:	d90e      	bls.n	800c13c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	68ba      	ldr	r2, [r7, #8]
 800c122:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	68fa      	ldr	r2, [r7, #12]
 800c128:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c12a:	4b1a      	ldr	r3, [pc, #104]	; (800c194 <prvSwitchTimerLists+0xc4>)
 800c12c:	681a      	ldr	r2, [r3, #0]
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	3304      	adds	r3, #4
 800c132:	4619      	mov	r1, r3
 800c134:	4610      	mov	r0, r2
 800c136:	f7fe f834 	bl	800a1a2 <vListInsert>
 800c13a:	e018      	b.n	800c16e <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c13c:	2300      	movs	r3, #0
 800c13e:	9300      	str	r3, [sp, #0]
 800c140:	2300      	movs	r3, #0
 800c142:	693a      	ldr	r2, [r7, #16]
 800c144:	2100      	movs	r1, #0
 800c146:	68f8      	ldr	r0, [r7, #12]
 800c148:	f7ff fd56 	bl	800bbf8 <xTimerGenericCommand>
 800c14c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d10c      	bne.n	800c16e <prvSwitchTimerLists+0x9e>
	__asm volatile
 800c154:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c158:	b672      	cpsid	i
 800c15a:	f383 8811 	msr	BASEPRI, r3
 800c15e:	f3bf 8f6f 	isb	sy
 800c162:	f3bf 8f4f 	dsb	sy
 800c166:	b662      	cpsie	i
 800c168:	603b      	str	r3, [r7, #0]
}
 800c16a:	bf00      	nop
 800c16c:	e7fe      	b.n	800c16c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c16e:	4b09      	ldr	r3, [pc, #36]	; (800c194 <prvSwitchTimerLists+0xc4>)
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d1af      	bne.n	800c0d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c178:	4b06      	ldr	r3, [pc, #24]	; (800c194 <prvSwitchTimerLists+0xc4>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c17e:	4b06      	ldr	r3, [pc, #24]	; (800c198 <prvSwitchTimerLists+0xc8>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	4a04      	ldr	r2, [pc, #16]	; (800c194 <prvSwitchTimerLists+0xc4>)
 800c184:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c186:	4a04      	ldr	r2, [pc, #16]	; (800c198 <prvSwitchTimerLists+0xc8>)
 800c188:	697b      	ldr	r3, [r7, #20]
 800c18a:	6013      	str	r3, [r2, #0]
}
 800c18c:	bf00      	nop
 800c18e:	3718      	adds	r7, #24
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}
 800c194:	20008cf4 	.word	0x20008cf4
 800c198:	20008cf8 	.word	0x20008cf8

0800c19c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b082      	sub	sp, #8
 800c1a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c1a2:	f000 f94b 	bl	800c43c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c1a6:	4b15      	ldr	r3, [pc, #84]	; (800c1fc <prvCheckForValidListAndQueue+0x60>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d120      	bne.n	800c1f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c1ae:	4814      	ldr	r0, [pc, #80]	; (800c200 <prvCheckForValidListAndQueue+0x64>)
 800c1b0:	f7fd ffa6 	bl	800a100 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c1b4:	4813      	ldr	r0, [pc, #76]	; (800c204 <prvCheckForValidListAndQueue+0x68>)
 800c1b6:	f7fd ffa3 	bl	800a100 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c1ba:	4b13      	ldr	r3, [pc, #76]	; (800c208 <prvCheckForValidListAndQueue+0x6c>)
 800c1bc:	4a10      	ldr	r2, [pc, #64]	; (800c200 <prvCheckForValidListAndQueue+0x64>)
 800c1be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c1c0:	4b12      	ldr	r3, [pc, #72]	; (800c20c <prvCheckForValidListAndQueue+0x70>)
 800c1c2:	4a10      	ldr	r2, [pc, #64]	; (800c204 <prvCheckForValidListAndQueue+0x68>)
 800c1c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	9300      	str	r3, [sp, #0]
 800c1ca:	4b11      	ldr	r3, [pc, #68]	; (800c210 <prvCheckForValidListAndQueue+0x74>)
 800c1cc:	4a11      	ldr	r2, [pc, #68]	; (800c214 <prvCheckForValidListAndQueue+0x78>)
 800c1ce:	2110      	movs	r1, #16
 800c1d0:	200a      	movs	r0, #10
 800c1d2:	f7fe f8b3 	bl	800a33c <xQueueGenericCreateStatic>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	4a08      	ldr	r2, [pc, #32]	; (800c1fc <prvCheckForValidListAndQueue+0x60>)
 800c1da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c1dc:	4b07      	ldr	r3, [pc, #28]	; (800c1fc <prvCheckForValidListAndQueue+0x60>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d005      	beq.n	800c1f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c1e4:	4b05      	ldr	r3, [pc, #20]	; (800c1fc <prvCheckForValidListAndQueue+0x60>)
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	490b      	ldr	r1, [pc, #44]	; (800c218 <prvCheckForValidListAndQueue+0x7c>)
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f7fe fce8 	bl	800abc0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c1f0:	f000 f958 	bl	800c4a4 <vPortExitCritical>
}
 800c1f4:	bf00      	nop
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}
 800c1fa:	bf00      	nop
 800c1fc:	20008cfc 	.word	0x20008cfc
 800c200:	20008ccc 	.word	0x20008ccc
 800c204:	20008ce0 	.word	0x20008ce0
 800c208:	20008cf4 	.word	0x20008cf4
 800c20c:	20008cf8 	.word	0x20008cf8
 800c210:	20008da8 	.word	0x20008da8
 800c214:	20008d08 	.word	0x20008d08
 800c218:	0801f928 	.word	0x0801f928

0800c21c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c21c:	b480      	push	{r7}
 800c21e:	b085      	sub	sp, #20
 800c220:	af00      	add	r7, sp, #0
 800c222:	60f8      	str	r0, [r7, #12]
 800c224:	60b9      	str	r1, [r7, #8]
 800c226:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	3b04      	subs	r3, #4
 800c22c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c234:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	3b04      	subs	r3, #4
 800c23a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	f023 0201 	bic.w	r2, r3, #1
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	3b04      	subs	r3, #4
 800c24a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c24c:	4a0c      	ldr	r2, [pc, #48]	; (800c280 <pxPortInitialiseStack+0x64>)
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	3b14      	subs	r3, #20
 800c256:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c258:	687a      	ldr	r2, [r7, #4]
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	3b04      	subs	r3, #4
 800c262:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	f06f 0202 	mvn.w	r2, #2
 800c26a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	3b20      	subs	r3, #32
 800c270:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c272:	68fb      	ldr	r3, [r7, #12]
}
 800c274:	4618      	mov	r0, r3
 800c276:	3714      	adds	r7, #20
 800c278:	46bd      	mov	sp, r7
 800c27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27e:	4770      	bx	lr
 800c280:	0800c285 	.word	0x0800c285

0800c284 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c284:	b480      	push	{r7}
 800c286:	b085      	sub	sp, #20
 800c288:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c28a:	2300      	movs	r3, #0
 800c28c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c28e:	4b14      	ldr	r3, [pc, #80]	; (800c2e0 <prvTaskExitError+0x5c>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c296:	d00c      	beq.n	800c2b2 <prvTaskExitError+0x2e>
	__asm volatile
 800c298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c29c:	b672      	cpsid	i
 800c29e:	f383 8811 	msr	BASEPRI, r3
 800c2a2:	f3bf 8f6f 	isb	sy
 800c2a6:	f3bf 8f4f 	dsb	sy
 800c2aa:	b662      	cpsie	i
 800c2ac:	60fb      	str	r3, [r7, #12]
}
 800c2ae:	bf00      	nop
 800c2b0:	e7fe      	b.n	800c2b0 <prvTaskExitError+0x2c>
	__asm volatile
 800c2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b6:	b672      	cpsid	i
 800c2b8:	f383 8811 	msr	BASEPRI, r3
 800c2bc:	f3bf 8f6f 	isb	sy
 800c2c0:	f3bf 8f4f 	dsb	sy
 800c2c4:	b662      	cpsie	i
 800c2c6:	60bb      	str	r3, [r7, #8]
}
 800c2c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c2ca:	bf00      	nop
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d0fc      	beq.n	800c2cc <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c2d2:	bf00      	nop
 800c2d4:	bf00      	nop
 800c2d6:	3714      	adds	r7, #20
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2de:	4770      	bx	lr
 800c2e0:	20000010 	.word	0x20000010
	...

0800c2f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c2f0:	4b07      	ldr	r3, [pc, #28]	; (800c310 <pxCurrentTCBConst2>)
 800c2f2:	6819      	ldr	r1, [r3, #0]
 800c2f4:	6808      	ldr	r0, [r1, #0]
 800c2f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2fa:	f380 8809 	msr	PSP, r0
 800c2fe:	f3bf 8f6f 	isb	sy
 800c302:	f04f 0000 	mov.w	r0, #0
 800c306:	f380 8811 	msr	BASEPRI, r0
 800c30a:	4770      	bx	lr
 800c30c:	f3af 8000 	nop.w

0800c310 <pxCurrentTCBConst2>:
 800c310:	200087cc 	.word	0x200087cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c314:	bf00      	nop
 800c316:	bf00      	nop

0800c318 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c318:	4808      	ldr	r0, [pc, #32]	; (800c33c <prvPortStartFirstTask+0x24>)
 800c31a:	6800      	ldr	r0, [r0, #0]
 800c31c:	6800      	ldr	r0, [r0, #0]
 800c31e:	f380 8808 	msr	MSP, r0
 800c322:	f04f 0000 	mov.w	r0, #0
 800c326:	f380 8814 	msr	CONTROL, r0
 800c32a:	b662      	cpsie	i
 800c32c:	b661      	cpsie	f
 800c32e:	f3bf 8f4f 	dsb	sy
 800c332:	f3bf 8f6f 	isb	sy
 800c336:	df00      	svc	0
 800c338:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c33a:	bf00      	nop
 800c33c:	e000ed08 	.word	0xe000ed08

0800c340 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b084      	sub	sp, #16
 800c344:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c346:	4b37      	ldr	r3, [pc, #220]	; (800c424 <xPortStartScheduler+0xe4>)
 800c348:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	781b      	ldrb	r3, [r3, #0]
 800c34e:	b2db      	uxtb	r3, r3
 800c350:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	22ff      	movs	r2, #255	; 0xff
 800c356:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	781b      	ldrb	r3, [r3, #0]
 800c35c:	b2db      	uxtb	r3, r3
 800c35e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c360:	78fb      	ldrb	r3, [r7, #3]
 800c362:	b2db      	uxtb	r3, r3
 800c364:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c368:	b2da      	uxtb	r2, r3
 800c36a:	4b2f      	ldr	r3, [pc, #188]	; (800c428 <xPortStartScheduler+0xe8>)
 800c36c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c36e:	4b2f      	ldr	r3, [pc, #188]	; (800c42c <xPortStartScheduler+0xec>)
 800c370:	2207      	movs	r2, #7
 800c372:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c374:	e009      	b.n	800c38a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c376:	4b2d      	ldr	r3, [pc, #180]	; (800c42c <xPortStartScheduler+0xec>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	3b01      	subs	r3, #1
 800c37c:	4a2b      	ldr	r2, [pc, #172]	; (800c42c <xPortStartScheduler+0xec>)
 800c37e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c380:	78fb      	ldrb	r3, [r7, #3]
 800c382:	b2db      	uxtb	r3, r3
 800c384:	005b      	lsls	r3, r3, #1
 800c386:	b2db      	uxtb	r3, r3
 800c388:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c38a:	78fb      	ldrb	r3, [r7, #3]
 800c38c:	b2db      	uxtb	r3, r3
 800c38e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c392:	2b80      	cmp	r3, #128	; 0x80
 800c394:	d0ef      	beq.n	800c376 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c396:	4b25      	ldr	r3, [pc, #148]	; (800c42c <xPortStartScheduler+0xec>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	f1c3 0307 	rsb	r3, r3, #7
 800c39e:	2b04      	cmp	r3, #4
 800c3a0:	d00c      	beq.n	800c3bc <xPortStartScheduler+0x7c>
	__asm volatile
 800c3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a6:	b672      	cpsid	i
 800c3a8:	f383 8811 	msr	BASEPRI, r3
 800c3ac:	f3bf 8f6f 	isb	sy
 800c3b0:	f3bf 8f4f 	dsb	sy
 800c3b4:	b662      	cpsie	i
 800c3b6:	60bb      	str	r3, [r7, #8]
}
 800c3b8:	bf00      	nop
 800c3ba:	e7fe      	b.n	800c3ba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c3bc:	4b1b      	ldr	r3, [pc, #108]	; (800c42c <xPortStartScheduler+0xec>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	021b      	lsls	r3, r3, #8
 800c3c2:	4a1a      	ldr	r2, [pc, #104]	; (800c42c <xPortStartScheduler+0xec>)
 800c3c4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c3c6:	4b19      	ldr	r3, [pc, #100]	; (800c42c <xPortStartScheduler+0xec>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c3ce:	4a17      	ldr	r2, [pc, #92]	; (800c42c <xPortStartScheduler+0xec>)
 800c3d0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	b2da      	uxtb	r2, r3
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c3da:	4b15      	ldr	r3, [pc, #84]	; (800c430 <xPortStartScheduler+0xf0>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	4a14      	ldr	r2, [pc, #80]	; (800c430 <xPortStartScheduler+0xf0>)
 800c3e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c3e4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c3e6:	4b12      	ldr	r3, [pc, #72]	; (800c430 <xPortStartScheduler+0xf0>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	4a11      	ldr	r2, [pc, #68]	; (800c430 <xPortStartScheduler+0xf0>)
 800c3ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c3f0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c3f2:	f000 f8dd 	bl	800c5b0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c3f6:	4b0f      	ldr	r3, [pc, #60]	; (800c434 <xPortStartScheduler+0xf4>)
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c3fc:	f000 f8fc 	bl	800c5f8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c400:	4b0d      	ldr	r3, [pc, #52]	; (800c438 <xPortStartScheduler+0xf8>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	4a0c      	ldr	r2, [pc, #48]	; (800c438 <xPortStartScheduler+0xf8>)
 800c406:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c40a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c40c:	f7ff ff84 	bl	800c318 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c410:	f7ff f818 	bl	800b444 <vTaskSwitchContext>
	prvTaskExitError();
 800c414:	f7ff ff36 	bl	800c284 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c418:	2300      	movs	r3, #0
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3710      	adds	r7, #16
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}
 800c422:	bf00      	nop
 800c424:	e000e400 	.word	0xe000e400
 800c428:	20008df8 	.word	0x20008df8
 800c42c:	20008dfc 	.word	0x20008dfc
 800c430:	e000ed20 	.word	0xe000ed20
 800c434:	20000010 	.word	0x20000010
 800c438:	e000ef34 	.word	0xe000ef34

0800c43c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c43c:	b480      	push	{r7}
 800c43e:	b083      	sub	sp, #12
 800c440:	af00      	add	r7, sp, #0
	__asm volatile
 800c442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c446:	b672      	cpsid	i
 800c448:	f383 8811 	msr	BASEPRI, r3
 800c44c:	f3bf 8f6f 	isb	sy
 800c450:	f3bf 8f4f 	dsb	sy
 800c454:	b662      	cpsie	i
 800c456:	607b      	str	r3, [r7, #4]
}
 800c458:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c45a:	4b10      	ldr	r3, [pc, #64]	; (800c49c <vPortEnterCritical+0x60>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	3301      	adds	r3, #1
 800c460:	4a0e      	ldr	r2, [pc, #56]	; (800c49c <vPortEnterCritical+0x60>)
 800c462:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c464:	4b0d      	ldr	r3, [pc, #52]	; (800c49c <vPortEnterCritical+0x60>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	2b01      	cmp	r3, #1
 800c46a:	d111      	bne.n	800c490 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c46c:	4b0c      	ldr	r3, [pc, #48]	; (800c4a0 <vPortEnterCritical+0x64>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	b2db      	uxtb	r3, r3
 800c472:	2b00      	cmp	r3, #0
 800c474:	d00c      	beq.n	800c490 <vPortEnterCritical+0x54>
	__asm volatile
 800c476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c47a:	b672      	cpsid	i
 800c47c:	f383 8811 	msr	BASEPRI, r3
 800c480:	f3bf 8f6f 	isb	sy
 800c484:	f3bf 8f4f 	dsb	sy
 800c488:	b662      	cpsie	i
 800c48a:	603b      	str	r3, [r7, #0]
}
 800c48c:	bf00      	nop
 800c48e:	e7fe      	b.n	800c48e <vPortEnterCritical+0x52>
	}
}
 800c490:	bf00      	nop
 800c492:	370c      	adds	r7, #12
 800c494:	46bd      	mov	sp, r7
 800c496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49a:	4770      	bx	lr
 800c49c:	20000010 	.word	0x20000010
 800c4a0:	e000ed04 	.word	0xe000ed04

0800c4a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c4a4:	b480      	push	{r7}
 800c4a6:	b083      	sub	sp, #12
 800c4a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c4aa:	4b13      	ldr	r3, [pc, #76]	; (800c4f8 <vPortExitCritical+0x54>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d10c      	bne.n	800c4cc <vPortExitCritical+0x28>
	__asm volatile
 800c4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b6:	b672      	cpsid	i
 800c4b8:	f383 8811 	msr	BASEPRI, r3
 800c4bc:	f3bf 8f6f 	isb	sy
 800c4c0:	f3bf 8f4f 	dsb	sy
 800c4c4:	b662      	cpsie	i
 800c4c6:	607b      	str	r3, [r7, #4]
}
 800c4c8:	bf00      	nop
 800c4ca:	e7fe      	b.n	800c4ca <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800c4cc:	4b0a      	ldr	r3, [pc, #40]	; (800c4f8 <vPortExitCritical+0x54>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	3b01      	subs	r3, #1
 800c4d2:	4a09      	ldr	r2, [pc, #36]	; (800c4f8 <vPortExitCritical+0x54>)
 800c4d4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c4d6:	4b08      	ldr	r3, [pc, #32]	; (800c4f8 <vPortExitCritical+0x54>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d105      	bne.n	800c4ea <vPortExitCritical+0x46>
 800c4de:	2300      	movs	r3, #0
 800c4e0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	f383 8811 	msr	BASEPRI, r3
}
 800c4e8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c4ea:	bf00      	nop
 800c4ec:	370c      	adds	r7, #12
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f4:	4770      	bx	lr
 800c4f6:	bf00      	nop
 800c4f8:	20000010 	.word	0x20000010
 800c4fc:	00000000 	.word	0x00000000

0800c500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c500:	f3ef 8009 	mrs	r0, PSP
 800c504:	f3bf 8f6f 	isb	sy
 800c508:	4b15      	ldr	r3, [pc, #84]	; (800c560 <pxCurrentTCBConst>)
 800c50a:	681a      	ldr	r2, [r3, #0]
 800c50c:	f01e 0f10 	tst.w	lr, #16
 800c510:	bf08      	it	eq
 800c512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c51a:	6010      	str	r0, [r2, #0]
 800c51c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c520:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c524:	b672      	cpsid	i
 800c526:	f380 8811 	msr	BASEPRI, r0
 800c52a:	f3bf 8f4f 	dsb	sy
 800c52e:	f3bf 8f6f 	isb	sy
 800c532:	b662      	cpsie	i
 800c534:	f7fe ff86 	bl	800b444 <vTaskSwitchContext>
 800c538:	f04f 0000 	mov.w	r0, #0
 800c53c:	f380 8811 	msr	BASEPRI, r0
 800c540:	bc09      	pop	{r0, r3}
 800c542:	6819      	ldr	r1, [r3, #0]
 800c544:	6808      	ldr	r0, [r1, #0]
 800c546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c54a:	f01e 0f10 	tst.w	lr, #16
 800c54e:	bf08      	it	eq
 800c550:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c554:	f380 8809 	msr	PSP, r0
 800c558:	f3bf 8f6f 	isb	sy
 800c55c:	4770      	bx	lr
 800c55e:	bf00      	nop

0800c560 <pxCurrentTCBConst>:
 800c560:	200087cc 	.word	0x200087cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c564:	bf00      	nop
 800c566:	bf00      	nop

0800c568 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b082      	sub	sp, #8
 800c56c:	af00      	add	r7, sp, #0
	__asm volatile
 800c56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c572:	b672      	cpsid	i
 800c574:	f383 8811 	msr	BASEPRI, r3
 800c578:	f3bf 8f6f 	isb	sy
 800c57c:	f3bf 8f4f 	dsb	sy
 800c580:	b662      	cpsie	i
 800c582:	607b      	str	r3, [r7, #4]
}
 800c584:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c586:	f7fe fea1 	bl	800b2cc <xTaskIncrementTick>
 800c58a:	4603      	mov	r3, r0
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d003      	beq.n	800c598 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c590:	4b06      	ldr	r3, [pc, #24]	; (800c5ac <SysTick_Handler+0x44>)
 800c592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c596:	601a      	str	r2, [r3, #0]
 800c598:	2300      	movs	r3, #0
 800c59a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	f383 8811 	msr	BASEPRI, r3
}
 800c5a2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c5a4:	bf00      	nop
 800c5a6:	3708      	adds	r7, #8
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}
 800c5ac:	e000ed04 	.word	0xe000ed04

0800c5b0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c5b4:	4b0b      	ldr	r3, [pc, #44]	; (800c5e4 <vPortSetupTimerInterrupt+0x34>)
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c5ba:	4b0b      	ldr	r3, [pc, #44]	; (800c5e8 <vPortSetupTimerInterrupt+0x38>)
 800c5bc:	2200      	movs	r2, #0
 800c5be:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c5c0:	4b0a      	ldr	r3, [pc, #40]	; (800c5ec <vPortSetupTimerInterrupt+0x3c>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	4a0a      	ldr	r2, [pc, #40]	; (800c5f0 <vPortSetupTimerInterrupt+0x40>)
 800c5c6:	fba2 2303 	umull	r2, r3, r2, r3
 800c5ca:	099b      	lsrs	r3, r3, #6
 800c5cc:	4a09      	ldr	r2, [pc, #36]	; (800c5f4 <vPortSetupTimerInterrupt+0x44>)
 800c5ce:	3b01      	subs	r3, #1
 800c5d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c5d2:	4b04      	ldr	r3, [pc, #16]	; (800c5e4 <vPortSetupTimerInterrupt+0x34>)
 800c5d4:	2207      	movs	r2, #7
 800c5d6:	601a      	str	r2, [r3, #0]
}
 800c5d8:	bf00      	nop
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e0:	4770      	bx	lr
 800c5e2:	bf00      	nop
 800c5e4:	e000e010 	.word	0xe000e010
 800c5e8:	e000e018 	.word	0xe000e018
 800c5ec:	20000004 	.word	0x20000004
 800c5f0:	10624dd3 	.word	0x10624dd3
 800c5f4:	e000e014 	.word	0xe000e014

0800c5f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c5f8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c608 <vPortEnableVFP+0x10>
 800c5fc:	6801      	ldr	r1, [r0, #0]
 800c5fe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c602:	6001      	str	r1, [r0, #0]
 800c604:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c606:	bf00      	nop
 800c608:	e000ed88 	.word	0xe000ed88

0800c60c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c60c:	b480      	push	{r7}
 800c60e:	b085      	sub	sp, #20
 800c610:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c612:	f3ef 8305 	mrs	r3, IPSR
 800c616:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	2b0f      	cmp	r3, #15
 800c61c:	d916      	bls.n	800c64c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c61e:	4a19      	ldr	r2, [pc, #100]	; (800c684 <vPortValidateInterruptPriority+0x78>)
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	4413      	add	r3, r2
 800c624:	781b      	ldrb	r3, [r3, #0]
 800c626:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c628:	4b17      	ldr	r3, [pc, #92]	; (800c688 <vPortValidateInterruptPriority+0x7c>)
 800c62a:	781b      	ldrb	r3, [r3, #0]
 800c62c:	7afa      	ldrb	r2, [r7, #11]
 800c62e:	429a      	cmp	r2, r3
 800c630:	d20c      	bcs.n	800c64c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800c632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c636:	b672      	cpsid	i
 800c638:	f383 8811 	msr	BASEPRI, r3
 800c63c:	f3bf 8f6f 	isb	sy
 800c640:	f3bf 8f4f 	dsb	sy
 800c644:	b662      	cpsie	i
 800c646:	607b      	str	r3, [r7, #4]
}
 800c648:	bf00      	nop
 800c64a:	e7fe      	b.n	800c64a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c64c:	4b0f      	ldr	r3, [pc, #60]	; (800c68c <vPortValidateInterruptPriority+0x80>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c654:	4b0e      	ldr	r3, [pc, #56]	; (800c690 <vPortValidateInterruptPriority+0x84>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	429a      	cmp	r2, r3
 800c65a:	d90c      	bls.n	800c676 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800c65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c660:	b672      	cpsid	i
 800c662:	f383 8811 	msr	BASEPRI, r3
 800c666:	f3bf 8f6f 	isb	sy
 800c66a:	f3bf 8f4f 	dsb	sy
 800c66e:	b662      	cpsie	i
 800c670:	603b      	str	r3, [r7, #0]
}
 800c672:	bf00      	nop
 800c674:	e7fe      	b.n	800c674 <vPortValidateInterruptPriority+0x68>
	}
 800c676:	bf00      	nop
 800c678:	3714      	adds	r7, #20
 800c67a:	46bd      	mov	sp, r7
 800c67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c680:	4770      	bx	lr
 800c682:	bf00      	nop
 800c684:	e000e3f0 	.word	0xe000e3f0
 800c688:	20008df8 	.word	0x20008df8
 800c68c:	e000ed0c 	.word	0xe000ed0c
 800c690:	20008dfc 	.word	0x20008dfc

0800c694 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b08a      	sub	sp, #40	; 0x28
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c69c:	2300      	movs	r3, #0
 800c69e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c6a0:	f7fe fd56 	bl	800b150 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c6a4:	4b5b      	ldr	r3, [pc, #364]	; (800c814 <pvPortMalloc+0x180>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d101      	bne.n	800c6b0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c6ac:	f000 f91a 	bl	800c8e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c6b0:	4b59      	ldr	r3, [pc, #356]	; (800c818 <pvPortMalloc+0x184>)
 800c6b2:	681a      	ldr	r2, [r3, #0]
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	4013      	ands	r3, r2
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	f040 8092 	bne.w	800c7e2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d01f      	beq.n	800c704 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800c6c4:	2208      	movs	r2, #8
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	4413      	add	r3, r2
 800c6ca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f003 0307 	and.w	r3, r3, #7
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d016      	beq.n	800c704 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f023 0307 	bic.w	r3, r3, #7
 800c6dc:	3308      	adds	r3, #8
 800c6de:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f003 0307 	and.w	r3, r3, #7
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d00c      	beq.n	800c704 <pvPortMalloc+0x70>
	__asm volatile
 800c6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ee:	b672      	cpsid	i
 800c6f0:	f383 8811 	msr	BASEPRI, r3
 800c6f4:	f3bf 8f6f 	isb	sy
 800c6f8:	f3bf 8f4f 	dsb	sy
 800c6fc:	b662      	cpsie	i
 800c6fe:	617b      	str	r3, [r7, #20]
}
 800c700:	bf00      	nop
 800c702:	e7fe      	b.n	800c702 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d06b      	beq.n	800c7e2 <pvPortMalloc+0x14e>
 800c70a:	4b44      	ldr	r3, [pc, #272]	; (800c81c <pvPortMalloc+0x188>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	687a      	ldr	r2, [r7, #4]
 800c710:	429a      	cmp	r2, r3
 800c712:	d866      	bhi.n	800c7e2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c714:	4b42      	ldr	r3, [pc, #264]	; (800c820 <pvPortMalloc+0x18c>)
 800c716:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c718:	4b41      	ldr	r3, [pc, #260]	; (800c820 <pvPortMalloc+0x18c>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c71e:	e004      	b.n	800c72a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800c720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c722:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c72c:	685b      	ldr	r3, [r3, #4]
 800c72e:	687a      	ldr	r2, [r7, #4]
 800c730:	429a      	cmp	r2, r3
 800c732:	d903      	bls.n	800c73c <pvPortMalloc+0xa8>
 800c734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d1f1      	bne.n	800c720 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c73c:	4b35      	ldr	r3, [pc, #212]	; (800c814 <pvPortMalloc+0x180>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c742:	429a      	cmp	r2, r3
 800c744:	d04d      	beq.n	800c7e2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c746:	6a3b      	ldr	r3, [r7, #32]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	2208      	movs	r2, #8
 800c74c:	4413      	add	r3, r2
 800c74e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c752:	681a      	ldr	r2, [r3, #0]
 800c754:	6a3b      	ldr	r3, [r7, #32]
 800c756:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c75a:	685a      	ldr	r2, [r3, #4]
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	1ad2      	subs	r2, r2, r3
 800c760:	2308      	movs	r3, #8
 800c762:	005b      	lsls	r3, r3, #1
 800c764:	429a      	cmp	r2, r3
 800c766:	d921      	bls.n	800c7ac <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	4413      	add	r3, r2
 800c76e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c770:	69bb      	ldr	r3, [r7, #24]
 800c772:	f003 0307 	and.w	r3, r3, #7
 800c776:	2b00      	cmp	r3, #0
 800c778:	d00c      	beq.n	800c794 <pvPortMalloc+0x100>
	__asm volatile
 800c77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c77e:	b672      	cpsid	i
 800c780:	f383 8811 	msr	BASEPRI, r3
 800c784:	f3bf 8f6f 	isb	sy
 800c788:	f3bf 8f4f 	dsb	sy
 800c78c:	b662      	cpsie	i
 800c78e:	613b      	str	r3, [r7, #16]
}
 800c790:	bf00      	nop
 800c792:	e7fe      	b.n	800c792 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c796:	685a      	ldr	r2, [r3, #4]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	1ad2      	subs	r2, r2, r3
 800c79c:	69bb      	ldr	r3, [r7, #24]
 800c79e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a2:	687a      	ldr	r2, [r7, #4]
 800c7a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c7a6:	69b8      	ldr	r0, [r7, #24]
 800c7a8:	f000 f8fe 	bl	800c9a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c7ac:	4b1b      	ldr	r3, [pc, #108]	; (800c81c <pvPortMalloc+0x188>)
 800c7ae:	681a      	ldr	r2, [r3, #0]
 800c7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7b2:	685b      	ldr	r3, [r3, #4]
 800c7b4:	1ad3      	subs	r3, r2, r3
 800c7b6:	4a19      	ldr	r2, [pc, #100]	; (800c81c <pvPortMalloc+0x188>)
 800c7b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c7ba:	4b18      	ldr	r3, [pc, #96]	; (800c81c <pvPortMalloc+0x188>)
 800c7bc:	681a      	ldr	r2, [r3, #0]
 800c7be:	4b19      	ldr	r3, [pc, #100]	; (800c824 <pvPortMalloc+0x190>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	429a      	cmp	r2, r3
 800c7c4:	d203      	bcs.n	800c7ce <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c7c6:	4b15      	ldr	r3, [pc, #84]	; (800c81c <pvPortMalloc+0x188>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	4a16      	ldr	r2, [pc, #88]	; (800c824 <pvPortMalloc+0x190>)
 800c7cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d0:	685a      	ldr	r2, [r3, #4]
 800c7d2:	4b11      	ldr	r3, [pc, #68]	; (800c818 <pvPortMalloc+0x184>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	431a      	orrs	r2, r3
 800c7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7de:	2200      	movs	r2, #0
 800c7e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c7e2:	f7fe fcc3 	bl	800b16c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c7e6:	69fb      	ldr	r3, [r7, #28]
 800c7e8:	f003 0307 	and.w	r3, r3, #7
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d00c      	beq.n	800c80a <pvPortMalloc+0x176>
	__asm volatile
 800c7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f4:	b672      	cpsid	i
 800c7f6:	f383 8811 	msr	BASEPRI, r3
 800c7fa:	f3bf 8f6f 	isb	sy
 800c7fe:	f3bf 8f4f 	dsb	sy
 800c802:	b662      	cpsie	i
 800c804:	60fb      	str	r3, [r7, #12]
}
 800c806:	bf00      	nop
 800c808:	e7fe      	b.n	800c808 <pvPortMalloc+0x174>
	return pvReturn;
 800c80a:	69fb      	ldr	r3, [r7, #28]
}
 800c80c:	4618      	mov	r0, r3
 800c80e:	3728      	adds	r7, #40	; 0x28
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}
 800c814:	2000ca08 	.word	0x2000ca08
 800c818:	2000ca14 	.word	0x2000ca14
 800c81c:	2000ca0c 	.word	0x2000ca0c
 800c820:	2000ca00 	.word	0x2000ca00
 800c824:	2000ca10 	.word	0x2000ca10

0800c828 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b086      	sub	sp, #24
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d04c      	beq.n	800c8d4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c83a:	2308      	movs	r3, #8
 800c83c:	425b      	negs	r3, r3
 800c83e:	697a      	ldr	r2, [r7, #20]
 800c840:	4413      	add	r3, r2
 800c842:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c848:	693b      	ldr	r3, [r7, #16]
 800c84a:	685a      	ldr	r2, [r3, #4]
 800c84c:	4b23      	ldr	r3, [pc, #140]	; (800c8dc <vPortFree+0xb4>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	4013      	ands	r3, r2
 800c852:	2b00      	cmp	r3, #0
 800c854:	d10c      	bne.n	800c870 <vPortFree+0x48>
	__asm volatile
 800c856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c85a:	b672      	cpsid	i
 800c85c:	f383 8811 	msr	BASEPRI, r3
 800c860:	f3bf 8f6f 	isb	sy
 800c864:	f3bf 8f4f 	dsb	sy
 800c868:	b662      	cpsie	i
 800c86a:	60fb      	str	r3, [r7, #12]
}
 800c86c:	bf00      	nop
 800c86e:	e7fe      	b.n	800c86e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c870:	693b      	ldr	r3, [r7, #16]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d00c      	beq.n	800c892 <vPortFree+0x6a>
	__asm volatile
 800c878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c87c:	b672      	cpsid	i
 800c87e:	f383 8811 	msr	BASEPRI, r3
 800c882:	f3bf 8f6f 	isb	sy
 800c886:	f3bf 8f4f 	dsb	sy
 800c88a:	b662      	cpsie	i
 800c88c:	60bb      	str	r3, [r7, #8]
}
 800c88e:	bf00      	nop
 800c890:	e7fe      	b.n	800c890 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c892:	693b      	ldr	r3, [r7, #16]
 800c894:	685a      	ldr	r2, [r3, #4]
 800c896:	4b11      	ldr	r3, [pc, #68]	; (800c8dc <vPortFree+0xb4>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	4013      	ands	r3, r2
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d019      	beq.n	800c8d4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c8a0:	693b      	ldr	r3, [r7, #16]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d115      	bne.n	800c8d4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c8a8:	693b      	ldr	r3, [r7, #16]
 800c8aa:	685a      	ldr	r2, [r3, #4]
 800c8ac:	4b0b      	ldr	r3, [pc, #44]	; (800c8dc <vPortFree+0xb4>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	43db      	mvns	r3, r3
 800c8b2:	401a      	ands	r2, r3
 800c8b4:	693b      	ldr	r3, [r7, #16]
 800c8b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c8b8:	f7fe fc4a 	bl	800b150 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c8bc:	693b      	ldr	r3, [r7, #16]
 800c8be:	685a      	ldr	r2, [r3, #4]
 800c8c0:	4b07      	ldr	r3, [pc, #28]	; (800c8e0 <vPortFree+0xb8>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	4413      	add	r3, r2
 800c8c6:	4a06      	ldr	r2, [pc, #24]	; (800c8e0 <vPortFree+0xb8>)
 800c8c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c8ca:	6938      	ldr	r0, [r7, #16]
 800c8cc:	f000 f86c 	bl	800c9a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c8d0:	f7fe fc4c 	bl	800b16c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c8d4:	bf00      	nop
 800c8d6:	3718      	adds	r7, #24
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}
 800c8dc:	2000ca14 	.word	0x2000ca14
 800c8e0:	2000ca0c 	.word	0x2000ca0c

0800c8e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b085      	sub	sp, #20
 800c8e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c8ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c8ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c8f0:	4b27      	ldr	r3, [pc, #156]	; (800c990 <prvHeapInit+0xac>)
 800c8f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	f003 0307 	and.w	r3, r3, #7
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d00c      	beq.n	800c918 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	3307      	adds	r3, #7
 800c902:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	f023 0307 	bic.w	r3, r3, #7
 800c90a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c90c:	68ba      	ldr	r2, [r7, #8]
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	1ad3      	subs	r3, r2, r3
 800c912:	4a1f      	ldr	r2, [pc, #124]	; (800c990 <prvHeapInit+0xac>)
 800c914:	4413      	add	r3, r2
 800c916:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c91c:	4a1d      	ldr	r2, [pc, #116]	; (800c994 <prvHeapInit+0xb0>)
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c922:	4b1c      	ldr	r3, [pc, #112]	; (800c994 <prvHeapInit+0xb0>)
 800c924:	2200      	movs	r2, #0
 800c926:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	68ba      	ldr	r2, [r7, #8]
 800c92c:	4413      	add	r3, r2
 800c92e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c930:	2208      	movs	r2, #8
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	1a9b      	subs	r3, r3, r2
 800c936:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	f023 0307 	bic.w	r3, r3, #7
 800c93e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	4a15      	ldr	r2, [pc, #84]	; (800c998 <prvHeapInit+0xb4>)
 800c944:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c946:	4b14      	ldr	r3, [pc, #80]	; (800c998 <prvHeapInit+0xb4>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	2200      	movs	r2, #0
 800c94c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c94e:	4b12      	ldr	r3, [pc, #72]	; (800c998 <prvHeapInit+0xb4>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	2200      	movs	r2, #0
 800c954:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	68fa      	ldr	r2, [r7, #12]
 800c95e:	1ad2      	subs	r2, r2, r3
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c964:	4b0c      	ldr	r3, [pc, #48]	; (800c998 <prvHeapInit+0xb4>)
 800c966:	681a      	ldr	r2, [r3, #0]
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	685b      	ldr	r3, [r3, #4]
 800c970:	4a0a      	ldr	r2, [pc, #40]	; (800c99c <prvHeapInit+0xb8>)
 800c972:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	685b      	ldr	r3, [r3, #4]
 800c978:	4a09      	ldr	r2, [pc, #36]	; (800c9a0 <prvHeapInit+0xbc>)
 800c97a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c97c:	4b09      	ldr	r3, [pc, #36]	; (800c9a4 <prvHeapInit+0xc0>)
 800c97e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c982:	601a      	str	r2, [r3, #0]
}
 800c984:	bf00      	nop
 800c986:	3714      	adds	r7, #20
 800c988:	46bd      	mov	sp, r7
 800c98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98e:	4770      	bx	lr
 800c990:	20008e00 	.word	0x20008e00
 800c994:	2000ca00 	.word	0x2000ca00
 800c998:	2000ca08 	.word	0x2000ca08
 800c99c:	2000ca10 	.word	0x2000ca10
 800c9a0:	2000ca0c 	.word	0x2000ca0c
 800c9a4:	2000ca14 	.word	0x2000ca14

0800c9a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c9a8:	b480      	push	{r7}
 800c9aa:	b085      	sub	sp, #20
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c9b0:	4b28      	ldr	r3, [pc, #160]	; (800ca54 <prvInsertBlockIntoFreeList+0xac>)
 800c9b2:	60fb      	str	r3, [r7, #12]
 800c9b4:	e002      	b.n	800c9bc <prvInsertBlockIntoFreeList+0x14>
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	60fb      	str	r3, [r7, #12]
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	687a      	ldr	r2, [r7, #4]
 800c9c2:	429a      	cmp	r2, r3
 800c9c4:	d8f7      	bhi.n	800c9b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	685b      	ldr	r3, [r3, #4]
 800c9ce:	68ba      	ldr	r2, [r7, #8]
 800c9d0:	4413      	add	r3, r2
 800c9d2:	687a      	ldr	r2, [r7, #4]
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	d108      	bne.n	800c9ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	685a      	ldr	r2, [r3, #4]
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	685b      	ldr	r3, [r3, #4]
 800c9e0:	441a      	add	r2, r3
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	685b      	ldr	r3, [r3, #4]
 800c9f2:	68ba      	ldr	r2, [r7, #8]
 800c9f4:	441a      	add	r2, r3
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	429a      	cmp	r2, r3
 800c9fc:	d118      	bne.n	800ca30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	681a      	ldr	r2, [r3, #0]
 800ca02:	4b15      	ldr	r3, [pc, #84]	; (800ca58 <prvInsertBlockIntoFreeList+0xb0>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d00d      	beq.n	800ca26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	685a      	ldr	r2, [r3, #4]
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	685b      	ldr	r3, [r3, #4]
 800ca14:	441a      	add	r2, r3
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	681a      	ldr	r2, [r3, #0]
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	601a      	str	r2, [r3, #0]
 800ca24:	e008      	b.n	800ca38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ca26:	4b0c      	ldr	r3, [pc, #48]	; (800ca58 <prvInsertBlockIntoFreeList+0xb0>)
 800ca28:	681a      	ldr	r2, [r3, #0]
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	601a      	str	r2, [r3, #0]
 800ca2e:	e003      	b.n	800ca38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	681a      	ldr	r2, [r3, #0]
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ca38:	68fa      	ldr	r2, [r7, #12]
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	429a      	cmp	r2, r3
 800ca3e:	d002      	beq.n	800ca46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	687a      	ldr	r2, [r7, #4]
 800ca44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ca46:	bf00      	nop
 800ca48:	3714      	adds	r7, #20
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca50:	4770      	bx	lr
 800ca52:	bf00      	nop
 800ca54:	2000ca00 	.word	0x2000ca00
 800ca58:	2000ca08 	.word	0x2000ca08

0800ca5c <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control>:
 800ca5c:	4b04      	ldr	r3, [pc, #16]	; (800ca70 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x14>)
 800ca5e:	681a      	ldr	r2, [r3, #0]
 800ca60:	b10a      	cbz	r2, 800ca66 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0xa>
 800ca62:	4803      	ldr	r0, [pc, #12]	; (800ca70 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x14>)
 800ca64:	4770      	bx	lr
 800ca66:	4a03      	ldr	r2, [pc, #12]	; (800ca74 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x18>)
 800ca68:	4801      	ldr	r0, [pc, #4]	; (800ca70 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x14>)
 800ca6a:	6812      	ldr	r2, [r2, #0]
 800ca6c:	601a      	str	r2, [r3, #0]
 800ca6e:	4770      	bx	lr
 800ca70:	2000001c 	.word	0x2000001c
 800ca74:	20000ae8 	.word	0x20000ae8

0800ca78 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request>:
 800ca78:	4b06      	ldr	r3, [pc, #24]	; (800ca94 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x1c>)
 800ca7a:	4807      	ldr	r0, [pc, #28]	; (800ca98 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x20>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	4907      	ldr	r1, [pc, #28]	; (800ca9c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x24>)
 800ca80:	4a07      	ldr	r2, [pc, #28]	; (800caa0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x28>)
 800ca82:	b410      	push	{r4}
 800ca84:	4c07      	ldr	r4, [pc, #28]	; (800caa4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x2c>)
 800ca86:	6003      	str	r3, [r0, #0]
 800ca88:	6023      	str	r3, [r4, #0]
 800ca8a:	600b      	str	r3, [r1, #0]
 800ca8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca90:	6013      	str	r3, [r2, #0]
 800ca92:	4770      	bx	lr
 800ca94:	20000ae8 	.word	0x20000ae8
 800ca98:	20000090 	.word	0x20000090
 800ca9c:	20000050 	.word	0x20000050
 800caa0:	2000001c 	.word	0x2000001c
 800caa4:	20000078 	.word	0x20000078

0800caa8 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Debug>:
 800caa8:	4b04      	ldr	r3, [pc, #16]	; (800cabc <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Debug+0x14>)
 800caaa:	681a      	ldr	r2, [r3, #0]
 800caac:	b10a      	cbz	r2, 800cab2 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Debug+0xa>
 800caae:	4803      	ldr	r0, [pc, #12]	; (800cabc <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Debug+0x14>)
 800cab0:	4770      	bx	lr
 800cab2:	4a03      	ldr	r2, [pc, #12]	; (800cac0 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Debug+0x18>)
 800cab4:	4801      	ldr	r0, [pc, #4]	; (800cabc <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Debug+0x14>)
 800cab6:	6812      	ldr	r2, [r2, #0]
 800cab8:	601a      	str	r2, [r3, #0]
 800caba:	4770      	bx	lr
 800cabc:	200000b0 	.word	0x200000b0
 800cac0:	20000ae8 	.word	0x20000ae8

0800cac4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Debug>:
 800cac4:	4a02      	ldr	r2, [pc, #8]	; (800cad0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Debug+0xc>)
 800cac6:	4b03      	ldr	r3, [pc, #12]	; (800cad4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Debug+0x10>)
 800cac8:	6812      	ldr	r2, [r2, #0]
 800caca:	601a      	str	r2, [r3, #0]
 800cacc:	4770      	bx	lr
 800cace:	bf00      	nop
 800cad0:	20000ae8 	.word	0x20000ae8
 800cad4:	200000b0 	.word	0x200000b0

0800cad8 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess>:
 800cad8:	4b04      	ldr	r3, [pc, #16]	; (800caec <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x14>)
 800cada:	681a      	ldr	r2, [r3, #0]
 800cadc:	b10a      	cbz	r2, 800cae2 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0xa>
 800cade:	4803      	ldr	r0, [pc, #12]	; (800caec <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x14>)
 800cae0:	4770      	bx	lr
 800cae2:	4a03      	ldr	r2, [pc, #12]	; (800caf0 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x18>)
 800cae4:	4801      	ldr	r0, [pc, #4]	; (800caec <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x14>)
 800cae6:	6812      	ldr	r2, [r2, #0]
 800cae8:	601a      	str	r2, [r3, #0]
 800caea:	4770      	bx	lr
 800caec:	200000d0 	.word	0x200000d0
 800caf0:	20000ae8 	.word	0x20000ae8

0800caf4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess>:
 800caf4:	4a02      	ldr	r2, [pc, #8]	; (800cb00 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0xc>)
 800caf6:	4b03      	ldr	r3, [pc, #12]	; (800cb04 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x10>)
 800caf8:	6812      	ldr	r2, [r2, #0]
 800cafa:	601a      	str	r2, [r3, #0]
 800cafc:	4770      	bx	lr
 800cafe:	bf00      	nop
 800cb00:	20000ae8 	.word	0x20000ae8
 800cb04:	200000d0 	.word	0x200000d0

0800cb08 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Encoder>:
 800cb08:	4b04      	ldr	r3, [pc, #16]	; (800cb1c <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Encoder+0x14>)
 800cb0a:	681a      	ldr	r2, [r3, #0]
 800cb0c:	b10a      	cbz	r2, 800cb12 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Encoder+0xa>
 800cb0e:	4803      	ldr	r0, [pc, #12]	; (800cb1c <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Encoder+0x14>)
 800cb10:	4770      	bx	lr
 800cb12:	4a03      	ldr	r2, [pc, #12]	; (800cb20 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Encoder+0x18>)
 800cb14:	4801      	ldr	r0, [pc, #4]	; (800cb1c <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Encoder+0x14>)
 800cb16:	6812      	ldr	r2, [r2, #0]
 800cb18:	601a      	str	r2, [r3, #0]
 800cb1a:	4770      	bx	lr
 800cb1c:	200000f0 	.word	0x200000f0
 800cb20:	20000ae8 	.word	0x20000ae8

0800cb24 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Encoder>:
 800cb24:	4a02      	ldr	r2, [pc, #8]	; (800cb30 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Encoder+0xc>)
 800cb26:	4b03      	ldr	r3, [pc, #12]	; (800cb34 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Encoder+0x10>)
 800cb28:	6812      	ldr	r2, [r2, #0]
 800cb2a:	601a      	str	r2, [r3, #0]
 800cb2c:	4770      	bx	lr
 800cb2e:	bf00      	nop
 800cb30:	20000ae8 	.word	0x20000ae8
 800cb34:	200000f0 	.word	0x200000f0

0800cb38 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback>:
 800cb38:	4b04      	ldr	r3, [pc, #16]	; (800cb4c <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800cb3a:	681a      	ldr	r2, [r3, #0]
 800cb3c:	b10a      	cbz	r2, 800cb42 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0xa>
 800cb3e:	4803      	ldr	r0, [pc, #12]	; (800cb4c <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800cb40:	4770      	bx	lr
 800cb42:	4a03      	ldr	r2, [pc, #12]	; (800cb50 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0x18>)
 800cb44:	4801      	ldr	r0, [pc, #4]	; (800cb4c <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800cb46:	6812      	ldr	r2, [r2, #0]
 800cb48:	601a      	str	r2, [r3, #0]
 800cb4a:	4770      	bx	lr
 800cb4c:	20000110 	.word	0x20000110
 800cb50:	20000ae8 	.word	0x20000ae8

0800cb54 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback>:
 800cb54:	4a02      	ldr	r2, [pc, #8]	; (800cb60 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0xc>)
 800cb56:	4b03      	ldr	r3, [pc, #12]	; (800cb64 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0x10>)
 800cb58:	6812      	ldr	r2, [r2, #0]
 800cb5a:	601a      	str	r2, [r3, #0]
 800cb5c:	4770      	bx	lr
 800cb5e:	bf00      	nop
 800cb60:	20000ae8 	.word	0x20000ae8
 800cb64:	20000110 	.word	0x20000110

0800cb68 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup>:
 800cb68:	4b04      	ldr	r3, [pc, #16]	; (800cb7c <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x14>)
 800cb6a:	681a      	ldr	r2, [r3, #0]
 800cb6c:	b10a      	cbz	r2, 800cb72 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0xa>
 800cb6e:	4803      	ldr	r0, [pc, #12]	; (800cb7c <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x14>)
 800cb70:	4770      	bx	lr
 800cb72:	4a03      	ldr	r2, [pc, #12]	; (800cb80 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x18>)
 800cb74:	4801      	ldr	r0, [pc, #4]	; (800cb7c <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x14>)
 800cb76:	6812      	ldr	r2, [r2, #0]
 800cb78:	601a      	str	r2, [r3, #0]
 800cb7a:	4770      	bx	lr
 800cb7c:	20000130 	.word	0x20000130
 800cb80:	20000ae8 	.word	0x20000ae8

0800cb84 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request>:
 800cb84:	4b06      	ldr	r3, [pc, #24]	; (800cba0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x1c>)
 800cb86:	4807      	ldr	r0, [pc, #28]	; (800cba4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x20>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	4907      	ldr	r1, [pc, #28]	; (800cba8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x24>)
 800cb8c:	4a07      	ldr	r2, [pc, #28]	; (800cbac <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x28>)
 800cb8e:	b410      	push	{r4}
 800cb90:	4c07      	ldr	r4, [pc, #28]	; (800cbb0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x2c>)
 800cb92:	6003      	str	r3, [r0, #0]
 800cb94:	6023      	str	r3, [r4, #0]
 800cb96:	600b      	str	r3, [r1, #0]
 800cb98:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb9c:	6013      	str	r3, [r2, #0]
 800cb9e:	4770      	bx	lr
 800cba0:	20000ae8 	.word	0x20000ae8
 800cba4:	200001a4 	.word	0x200001a4
 800cba8:	20000164 	.word	0x20000164
 800cbac:	20000130 	.word	0x20000130
 800cbb0:	2000018c 	.word	0x2000018c

0800cbb4 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__size_function__Control_Request__encoders>:
 800cbb4:	2005      	movs	r0, #5
 800cbb6:	4770      	bx	lr

0800cbb8 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__get_const_function__Control_Request__encoders>:
 800cbb8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800cbbc:	4770      	bx	lr
 800cbbe:	bf00      	nop

0800cbc0 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__fetch_function__Control_Request__encoders>:
 800cbc0:	f930 3011 	ldrsh.w	r3, [r0, r1, lsl #1]
 800cbc4:	8013      	strh	r3, [r2, #0]
 800cbc6:	4770      	bx	lr

0800cbc8 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__assign_function__Control_Request__encoders>:
 800cbc8:	f9b2 3000 	ldrsh.w	r3, [r2]
 800cbcc:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800cbd0:	4770      	bx	lr
 800cbd2:	bf00      	nop

0800cbd4 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__size_function__Control_Event__request>:
 800cbd4:	6840      	ldr	r0, [r0, #4]
 800cbd6:	4770      	bx	lr

0800cbd8 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_const_function__Control_Event__request>:
 800cbd8:	6800      	ldr	r0, [r0, #0]
 800cbda:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800cbde:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800cbe2:	4770      	bx	lr

0800cbe4 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__fetch_function__Control_Event__request>:
 800cbe4:	6800      	ldr	r0, [r0, #0]
 800cbe6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800cbea:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800cbee:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800cbf2:	6859      	ldr	r1, [r3, #4]
 800cbf4:	689b      	ldr	r3, [r3, #8]
 800cbf6:	6010      	str	r0, [r2, #0]
 800cbf8:	6051      	str	r1, [r2, #4]
 800cbfa:	6093      	str	r3, [r2, #8]
 800cbfc:	4770      	bx	lr
 800cbfe:	bf00      	nop

0800cc00 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__assign_function__Control_Event__request>:
 800cc00:	6800      	ldr	r0, [r0, #0]
 800cc02:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800cc06:	f8d2 c004 	ldr.w	ip, [r2, #4]
 800cc0a:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800cc0e:	b500      	push	{lr}
 800cc10:	f8d2 e000 	ldr.w	lr, [r2]
 800cc14:	6892      	ldr	r2, [r2, #8]
 800cc16:	f840 e021 	str.w	lr, [r0, r1, lsl #2]
 800cc1a:	f8c3 c004 	str.w	ip, [r3, #4]
 800cc1e:	609a      	str	r2, [r3, #8]
 800cc20:	f85d fb04 	ldr.w	pc, [sp], #4

0800cc24 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__size_function__Control_Event__response>:
 800cc24:	6840      	ldr	r0, [r0, #4]
 800cc26:	4770      	bx	lr

0800cc28 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_const_function__Control_Event__response>:
 800cc28:	6800      	ldr	r0, [r0, #0]
 800cc2a:	4408      	add	r0, r1
 800cc2c:	4770      	bx	lr
 800cc2e:	bf00      	nop

0800cc30 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__fetch_function__Control_Event__response>:
 800cc30:	6803      	ldr	r3, [r0, #0]
 800cc32:	5c5b      	ldrb	r3, [r3, r1]
 800cc34:	7013      	strb	r3, [r2, #0]
 800cc36:	4770      	bx	lr

0800cc38 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__assign_function__Control_Event__response>:
 800cc38:	6803      	ldr	r3, [r0, #0]
 800cc3a:	7812      	ldrb	r2, [r2, #0]
 800cc3c:	545a      	strb	r2, [r3, r1]
 800cc3e:	4770      	bx	lr

0800cc40 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__Control_Request_init_function>:
 800cc40:	f008 b956 	b.w	8014ef0 <racs_services__srv__Control_Request__init>

0800cc44 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__Control_Request_fini_function>:
 800cc44:	f008 b958 	b.w	8014ef8 <racs_services__srv__Control_Request__fini>

0800cc48 <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__Control_Response_init_function>:
 800cc48:	f008 b998 	b.w	8014f7c <racs_services__srv__Control_Response__init>

0800cc4c <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__Control_Response_fini_function>:
 800cc4c:	f008 b99a 	b.w	8014f84 <racs_services__srv__Control_Response__fini>

0800cc50 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__Control_Event_init_function>:
 800cc50:	f008 b9d0 	b.w	8014ff4 <racs_services__srv__Control_Event__init>

0800cc54 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__Control_Event_fini_function>:
 800cc54:	f008 b9f0 	b.w	8015038 <racs_services__srv__Control_Event__fini>

0800cc58 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__resize_function__Control_Event__request>:
 800cc58:	b510      	push	{r4, lr}
 800cc5a:	4604      	mov	r4, r0
 800cc5c:	b082      	sub	sp, #8
 800cc5e:	9101      	str	r1, [sp, #4]
 800cc60:	f008 f978 	bl	8014f54 <racs_services__srv__Control_Request__Sequence__fini>
 800cc64:	9901      	ldr	r1, [sp, #4]
 800cc66:	4620      	mov	r0, r4
 800cc68:	b002      	add	sp, #8
 800cc6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc6e:	f008 b957 	b.w	8014f20 <racs_services__srv__Control_Request__Sequence__init>
 800cc72:	bf00      	nop

0800cc74 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__resize_function__Control_Event__response>:
 800cc74:	b510      	push	{r4, lr}
 800cc76:	4604      	mov	r4, r0
 800cc78:	b082      	sub	sp, #8
 800cc7a:	9101      	str	r1, [sp, #4]
 800cc7c:	f008 f9a6 	bl	8014fcc <racs_services__srv__Control_Response__Sequence__fini>
 800cc80:	9901      	ldr	r1, [sp, #4]
 800cc82:	4620      	mov	r0, r4
 800cc84:	b002      	add	sp, #8
 800cc86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc8a:	f008 b985 	b.w	8014f98 <racs_services__srv__Control_Response__Sequence__init>
 800cc8e:	bf00      	nop

0800cc90 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_function__Control_Event__response>:
 800cc90:	6800      	ldr	r0, [r0, #0]
 800cc92:	4408      	add	r0, r1
 800cc94:	4770      	bx	lr
 800cc96:	bf00      	nop

0800cc98 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__get_function__Control_Request__encoders>:
 800cc98:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800cc9c:	4770      	bx	lr
 800cc9e:	bf00      	nop

0800cca0 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_function__Control_Event__request>:
 800cca0:	6800      	ldr	r0, [r0, #0]
 800cca2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800cca6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800ccaa:	4770      	bx	lr

0800ccac <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request>:
 800ccac:	4b04      	ldr	r3, [pc, #16]	; (800ccc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x14>)
 800ccae:	681a      	ldr	r2, [r3, #0]
 800ccb0:	b10a      	cbz	r2, 800ccb6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0xa>
 800ccb2:	4803      	ldr	r0, [pc, #12]	; (800ccc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x14>)
 800ccb4:	4770      	bx	lr
 800ccb6:	4a03      	ldr	r2, [pc, #12]	; (800ccc4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x18>)
 800ccb8:	4801      	ldr	r0, [pc, #4]	; (800ccc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x14>)
 800ccba:	6812      	ldr	r2, [r2, #0]
 800ccbc:	601a      	str	r2, [r3, #0]
 800ccbe:	4770      	bx	lr
 800ccc0:	2000033c 	.word	0x2000033c
 800ccc4:	20000aec 	.word	0x20000aec

0800ccc8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response>:
 800ccc8:	4b04      	ldr	r3, [pc, #16]	; (800ccdc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x14>)
 800ccca:	681a      	ldr	r2, [r3, #0]
 800cccc:	b10a      	cbz	r2, 800ccd2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0xa>
 800ccce:	4803      	ldr	r0, [pc, #12]	; (800ccdc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x14>)
 800ccd0:	4770      	bx	lr
 800ccd2:	4a03      	ldr	r2, [pc, #12]	; (800cce0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x18>)
 800ccd4:	4801      	ldr	r0, [pc, #4]	; (800ccdc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x14>)
 800ccd6:	6812      	ldr	r2, [r2, #0]
 800ccd8:	601a      	str	r2, [r3, #0]
 800ccda:	4770      	bx	lr
 800ccdc:	20000390 	.word	0x20000390
 800cce0:	20000aec 	.word	0x20000aec

0800cce4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event>:
 800cce4:	b508      	push	{r3, lr}
 800cce6:	f002 ff17 	bl	800fb18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800ccea:	4913      	ldr	r1, [pc, #76]	; (800cd38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x54>)
 800ccec:	4b13      	ldr	r3, [pc, #76]	; (800cd3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x58>)
 800ccee:	680a      	ldr	r2, [r1, #0]
 800ccf0:	60d8      	str	r0, [r3, #12]
 800ccf2:	b152      	cbz	r2, 800cd0a <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x26>
 800ccf4:	4a12      	ldr	r2, [pc, #72]	; (800cd40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x5c>)
 800ccf6:	6499      	str	r1, [r3, #72]	; 0x48
 800ccf8:	6811      	ldr	r1, [r2, #0]
 800ccfa:	b171      	cbz	r1, 800cd1a <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x36>
 800ccfc:	4911      	ldr	r1, [pc, #68]	; (800cd44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800ccfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800cd02:	680b      	ldr	r3, [r1, #0]
 800cd04:	b193      	cbz	r3, 800cd2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x48>
 800cd06:	480f      	ldr	r0, [pc, #60]	; (800cd44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800cd08:	bd08      	pop	{r3, pc}
 800cd0a:	4a0f      	ldr	r2, [pc, #60]	; (800cd48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x64>)
 800cd0c:	6499      	str	r1, [r3, #72]	; 0x48
 800cd0e:	6812      	ldr	r2, [r2, #0]
 800cd10:	600a      	str	r2, [r1, #0]
 800cd12:	4a0b      	ldr	r2, [pc, #44]	; (800cd40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x5c>)
 800cd14:	6811      	ldr	r1, [r2, #0]
 800cd16:	2900      	cmp	r1, #0
 800cd18:	d1f0      	bne.n	800ccfc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x18>
 800cd1a:	490b      	ldr	r1, [pc, #44]	; (800cd48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x64>)
 800cd1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800cd20:	6809      	ldr	r1, [r1, #0]
 800cd22:	6011      	str	r1, [r2, #0]
 800cd24:	4907      	ldr	r1, [pc, #28]	; (800cd44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800cd26:	680b      	ldr	r3, [r1, #0]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d1ec      	bne.n	800cd06 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x22>
 800cd2c:	4b06      	ldr	r3, [pc, #24]	; (800cd48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x64>)
 800cd2e:	4805      	ldr	r0, [pc, #20]	; (800cd44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	600b      	str	r3, [r1, #0]
 800cd34:	bd08      	pop	{r3, pc}
 800cd36:	bf00      	nop
 800cd38:	2000033c 	.word	0x2000033c
 800cd3c:	200001bc 	.word	0x200001bc
 800cd40:	20000390 	.word	0x20000390
 800cd44:	20000270 	.word	0x20000270
 800cd48:	20000aec 	.word	0x20000aec

0800cd4c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control>:
 800cd4c:	4b25      	ldr	r3, [pc, #148]	; (800cde4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x98>)
 800cd4e:	681a      	ldr	r2, [r3, #0]
 800cd50:	b510      	push	{r4, lr}
 800cd52:	b142      	cbz	r2, 800cd66 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x1a>
 800cd54:	685c      	ldr	r4, [r3, #4]
 800cd56:	68a3      	ldr	r3, [r4, #8]
 800cd58:	b163      	cbz	r3, 800cd74 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x28>
 800cd5a:	68e3      	ldr	r3, [r4, #12]
 800cd5c:	b193      	cbz	r3, 800cd84 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x38>
 800cd5e:	6923      	ldr	r3, [r4, #16]
 800cd60:	b1c3      	cbz	r3, 800cd94 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x48>
 800cd62:	4820      	ldr	r0, [pc, #128]	; (800cde4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x98>)
 800cd64:	bd10      	pop	{r4, pc}
 800cd66:	4a20      	ldr	r2, [pc, #128]	; (800cde8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800cd68:	685c      	ldr	r4, [r3, #4]
 800cd6a:	6812      	ldr	r2, [r2, #0]
 800cd6c:	601a      	str	r2, [r3, #0]
 800cd6e:	68a3      	ldr	r3, [r4, #8]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d1f2      	bne.n	800cd5a <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xe>
 800cd74:	4a1d      	ldr	r2, [pc, #116]	; (800cdec <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa0>)
 800cd76:	6813      	ldr	r3, [r2, #0]
 800cd78:	b303      	cbz	r3, 800cdbc <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x70>
 800cd7a:	6853      	ldr	r3, [r2, #4]
 800cd7c:	60a3      	str	r3, [r4, #8]
 800cd7e:	68e3      	ldr	r3, [r4, #12]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d1ec      	bne.n	800cd5e <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x12>
 800cd84:	4b1a      	ldr	r3, [pc, #104]	; (800cdf0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa4>)
 800cd86:	681a      	ldr	r2, [r3, #0]
 800cd88:	b1e2      	cbz	r2, 800cdc4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x78>
 800cd8a:	685b      	ldr	r3, [r3, #4]
 800cd8c:	60e3      	str	r3, [r4, #12]
 800cd8e:	6923      	ldr	r3, [r4, #16]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d1e6      	bne.n	800cd62 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x16>
 800cd94:	f002 fec0 	bl	800fb18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800cd98:	4a14      	ldr	r2, [pc, #80]	; (800cdec <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa0>)
 800cd9a:	4916      	ldr	r1, [pc, #88]	; (800cdf4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa8>)
 800cd9c:	6813      	ldr	r3, [r2, #0]
 800cd9e:	60c8      	str	r0, [r1, #12]
 800cda0:	b1e3      	cbz	r3, 800cddc <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x90>
 800cda2:	4b13      	ldr	r3, [pc, #76]	; (800cdf0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa4>)
 800cda4:	648a      	str	r2, [r1, #72]	; 0x48
 800cda6:	681a      	ldr	r2, [r3, #0]
 800cda8:	b1a2      	cbz	r2, 800cdd4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x88>
 800cdaa:	4a13      	ldr	r2, [pc, #76]	; (800cdf8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xac>)
 800cdac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 800cdb0:	6813      	ldr	r3, [r2, #0]
 800cdb2:	b15b      	cbz	r3, 800cdcc <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x80>
 800cdb4:	6853      	ldr	r3, [r2, #4]
 800cdb6:	480b      	ldr	r0, [pc, #44]	; (800cde4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x98>)
 800cdb8:	6123      	str	r3, [r4, #16]
 800cdba:	bd10      	pop	{r4, pc}
 800cdbc:	4b0a      	ldr	r3, [pc, #40]	; (800cde8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	6013      	str	r3, [r2, #0]
 800cdc2:	e7da      	b.n	800cd7a <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x2e>
 800cdc4:	4a08      	ldr	r2, [pc, #32]	; (800cde8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800cdc6:	6812      	ldr	r2, [r2, #0]
 800cdc8:	601a      	str	r2, [r3, #0]
 800cdca:	e7de      	b.n	800cd8a <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x3e>
 800cdcc:	4b06      	ldr	r3, [pc, #24]	; (800cde8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	6013      	str	r3, [r2, #0]
 800cdd2:	e7ef      	b.n	800cdb4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x68>
 800cdd4:	4a04      	ldr	r2, [pc, #16]	; (800cde8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800cdd6:	6812      	ldr	r2, [r2, #0]
 800cdd8:	601a      	str	r2, [r3, #0]
 800cdda:	e7e6      	b.n	800cdaa <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x5e>
 800cddc:	4b02      	ldr	r3, [pc, #8]	; (800cde8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	6013      	str	r3, [r2, #0]
 800cde2:	e7de      	b.n	800cda2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x56>
 800cde4:	200003bc 	.word	0x200003bc
 800cde8:	20000aec 	.word	0x20000aec
 800cdec:	2000033c 	.word	0x2000033c
 800cdf0:	20000390 	.word	0x20000390
 800cdf4:	200001bc 	.word	0x200001bc
 800cdf8:	20000270 	.word	0x20000270

0800cdfc <racs_services__msg__Debug__rosidl_typesupport_introspection_c__size_function__Debug__data>:
 800cdfc:	2006      	movs	r0, #6
 800cdfe:	4770      	bx	lr

0800ce00 <racs_services__msg__Debug__rosidl_typesupport_introspection_c__get_const_function__Debug__data>:
 800ce00:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800ce04:	4770      	bx	lr
 800ce06:	bf00      	nop

0800ce08 <racs_services__msg__Debug__rosidl_typesupport_introspection_c__fetch_function__Debug__data>:
 800ce08:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ce0c:	680b      	ldr	r3, [r1, #0]
 800ce0e:	6013      	str	r3, [r2, #0]
 800ce10:	4770      	bx	lr
 800ce12:	bf00      	nop

0800ce14 <racs_services__msg__Debug__rosidl_typesupport_introspection_c__assign_function__Debug__data>:
 800ce14:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ce18:	6813      	ldr	r3, [r2, #0]
 800ce1a:	600b      	str	r3, [r1, #0]
 800ce1c:	4770      	bx	lr
 800ce1e:	bf00      	nop

0800ce20 <racs_services__msg__Debug__rosidl_typesupport_introspection_c__Debug_init_function>:
 800ce20:	f008 b9ca 	b.w	80151b8 <racs_services__msg__Debug__init>

0800ce24 <racs_services__msg__Debug__rosidl_typesupport_introspection_c__Debug_fini_function>:
 800ce24:	f008 b9cc 	b.w	80151c0 <racs_services__msg__Debug__fini>

0800ce28 <racs_services__msg__Debug__rosidl_typesupport_introspection_c__get_function__Debug__data>:
 800ce28:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800ce2c:	4770      	bx	lr
 800ce2e:	bf00      	nop

0800ce30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Debug>:
 800ce30:	4b04      	ldr	r3, [pc, #16]	; (800ce44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Debug+0x14>)
 800ce32:	681a      	ldr	r2, [r3, #0]
 800ce34:	b10a      	cbz	r2, 800ce3a <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Debug+0xa>
 800ce36:	4803      	ldr	r0, [pc, #12]	; (800ce44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Debug+0x14>)
 800ce38:	4770      	bx	lr
 800ce3a:	4a03      	ldr	r2, [pc, #12]	; (800ce48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Debug+0x18>)
 800ce3c:	4801      	ldr	r0, [pc, #4]	; (800ce44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Debug+0x14>)
 800ce3e:	6812      	ldr	r2, [r2, #0]
 800ce40:	601a      	str	r2, [r3, #0]
 800ce42:	4770      	bx	lr
 800ce44:	20000424 	.word	0x20000424
 800ce48:	20000aec 	.word	0x20000aec

0800ce4c <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__size_function__DirectAccess__pwms>:
 800ce4c:	2006      	movs	r0, #6
 800ce4e:	4770      	bx	lr

0800ce50 <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__get_const_function__DirectAccess__pwms>:
 800ce50:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800ce54:	4770      	bx	lr
 800ce56:	bf00      	nop

0800ce58 <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__fetch_function__DirectAccess__pwms>:
 800ce58:	f930 3011 	ldrsh.w	r3, [r0, r1, lsl #1]
 800ce5c:	8013      	strh	r3, [r2, #0]
 800ce5e:	4770      	bx	lr

0800ce60 <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__assign_function__DirectAccess__pwms>:
 800ce60:	f9b2 3000 	ldrsh.w	r3, [r2]
 800ce64:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800ce68:	4770      	bx	lr
 800ce6a:	bf00      	nop

0800ce6c <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__DirectAccess_init_function>:
 800ce6c:	f008 b9d6 	b.w	801521c <racs_services__msg__DirectAccess__init>

0800ce70 <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__DirectAccess_fini_function>:
 800ce70:	f008 b9d8 	b.w	8015224 <racs_services__msg__DirectAccess__fini>

0800ce74 <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__get_function__DirectAccess__pwms>:
 800ce74:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800ce78:	4770      	bx	lr
 800ce7a:	bf00      	nop

0800ce7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__DirectAccess>:
 800ce7c:	4b04      	ldr	r3, [pc, #16]	; (800ce90 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x14>)
 800ce7e:	681a      	ldr	r2, [r3, #0]
 800ce80:	b10a      	cbz	r2, 800ce86 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0xa>
 800ce82:	4803      	ldr	r0, [pc, #12]	; (800ce90 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x14>)
 800ce84:	4770      	bx	lr
 800ce86:	4a03      	ldr	r2, [pc, #12]	; (800ce94 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x18>)
 800ce88:	4801      	ldr	r0, [pc, #4]	; (800ce90 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x14>)
 800ce8a:	6812      	ldr	r2, [r2, #0]
 800ce8c:	601a      	str	r2, [r3, #0]
 800ce8e:	4770      	bx	lr
 800ce90:	20000478 	.word	0x20000478
 800ce94:	20000aec 	.word	0x20000aec

0800ce98 <racs_services__msg__Encoder__rosidl_typesupport_introspection_c__size_function__Encoder__encoders>:
 800ce98:	2005      	movs	r0, #5
 800ce9a:	4770      	bx	lr

0800ce9c <racs_services__msg__Encoder__rosidl_typesupport_introspection_c__get_const_function__Encoder__encoders>:
 800ce9c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800cea0:	4770      	bx	lr
 800cea2:	bf00      	nop

0800cea4 <racs_services__msg__Encoder__rosidl_typesupport_introspection_c__fetch_function__Encoder__encoders>:
 800cea4:	f930 3011 	ldrsh.w	r3, [r0, r1, lsl #1]
 800cea8:	8013      	strh	r3, [r2, #0]
 800ceaa:	4770      	bx	lr

0800ceac <racs_services__msg__Encoder__rosidl_typesupport_introspection_c__assign_function__Encoder__encoders>:
 800ceac:	f9b2 3000 	ldrsh.w	r3, [r2]
 800ceb0:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800ceb4:	4770      	bx	lr
 800ceb6:	bf00      	nop

0800ceb8 <racs_services__msg__Encoder__rosidl_typesupport_introspection_c__Encoder_init_function>:
 800ceb8:	f008 b9e2 	b.w	8015280 <racs_services__msg__Encoder__init>

0800cebc <racs_services__msg__Encoder__rosidl_typesupport_introspection_c__Encoder_fini_function>:
 800cebc:	f008 b9e4 	b.w	8015288 <racs_services__msg__Encoder__fini>

0800cec0 <racs_services__msg__Encoder__rosidl_typesupport_introspection_c__get_function__Encoder__encoders>:
 800cec0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800cec4:	4770      	bx	lr
 800cec6:	bf00      	nop

0800cec8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Encoder>:
 800cec8:	4b04      	ldr	r3, [pc, #16]	; (800cedc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Encoder+0x14>)
 800ceca:	681a      	ldr	r2, [r3, #0]
 800cecc:	b10a      	cbz	r2, 800ced2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Encoder+0xa>
 800cece:	4803      	ldr	r0, [pc, #12]	; (800cedc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Encoder+0x14>)
 800ced0:	4770      	bx	lr
 800ced2:	4a03      	ldr	r2, [pc, #12]	; (800cee0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Encoder+0x18>)
 800ced4:	4801      	ldr	r0, [pc, #4]	; (800cedc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Encoder+0x14>)
 800ced6:	6812      	ldr	r2, [r2, #0]
 800ced8:	601a      	str	r2, [r3, #0]
 800ceda:	4770      	bx	lr
 800cedc:	200004cc 	.word	0x200004cc
 800cee0:	20000aec 	.word	0x20000aec

0800cee4 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__size_function__Feedback__encoders>:
 800cee4:	2005      	movs	r0, #5
 800cee6:	4770      	bx	lr

0800cee8 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__get_const_function__Feedback__encoders>:
 800cee8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800ceec:	4770      	bx	lr
 800ceee:	bf00      	nop

0800cef0 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__fetch_function__Feedback__encoders>:
 800cef0:	f930 3011 	ldrsh.w	r3, [r0, r1, lsl #1]
 800cef4:	8013      	strh	r3, [r2, #0]
 800cef6:	4770      	bx	lr

0800cef8 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__assign_function__Feedback__encoders>:
 800cef8:	f9b2 3000 	ldrsh.w	r3, [r2]
 800cefc:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800cf00:	4770      	bx	lr
 800cf02:	bf00      	nop

0800cf04 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__Feedback_init_function>:
 800cf04:	f008 b9ee 	b.w	80152e4 <racs_services__msg__Feedback__init>

0800cf08 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__Feedback_fini_function>:
 800cf08:	f008 b9f0 	b.w	80152ec <racs_services__msg__Feedback__fini>

0800cf0c <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__get_function__Feedback__encoders>:
 800cf0c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800cf10:	4770      	bx	lr
 800cf12:	bf00      	nop

0800cf14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback>:
 800cf14:	4b04      	ldr	r3, [pc, #16]	; (800cf28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800cf16:	681a      	ldr	r2, [r3, #0]
 800cf18:	b10a      	cbz	r2, 800cf1e <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback+0xa>
 800cf1a:	4803      	ldr	r0, [pc, #12]	; (800cf28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800cf1c:	4770      	bx	lr
 800cf1e:	4a03      	ldr	r2, [pc, #12]	; (800cf2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback+0x18>)
 800cf20:	4801      	ldr	r0, [pc, #4]	; (800cf28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800cf22:	6812      	ldr	r2, [r2, #0]
 800cf24:	601a      	str	r2, [r3, #0]
 800cf26:	4770      	bx	lr
 800cf28:	20000520 	.word	0x20000520
 800cf2c:	20000aec 	.word	0x20000aec

0800cf30 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__size_function__Setup_Event__request>:
 800cf30:	6840      	ldr	r0, [r0, #4]
 800cf32:	4770      	bx	lr

0800cf34 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_const_function__Setup_Event__request>:
 800cf34:	6800      	ldr	r0, [r0, #0]
 800cf36:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800cf3a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800cf3e:	4770      	bx	lr

0800cf40 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__fetch_function__Setup_Event__request>:
 800cf40:	6803      	ldr	r3, [r0, #0]
 800cf42:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800cf46:	4694      	mov	ip, r2
 800cf48:	b500      	push	{lr}
 800cf4a:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 800cf4e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cf52:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cf56:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800cf5a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800cf5e:	f85d fb04 	ldr.w	pc, [sp], #4
 800cf62:	bf00      	nop

0800cf64 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__assign_function__Setup_Event__request>:
 800cf64:	6803      	ldr	r3, [r0, #0]
 800cf66:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800cf6a:	b500      	push	{lr}
 800cf6c:	4696      	mov	lr, r2
 800cf6e:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 800cf72:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cf76:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cf7a:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800cf7e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800cf82:	f85d fb04 	ldr.w	pc, [sp], #4
 800cf86:	bf00      	nop

0800cf88 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__size_function__Setup_Event__response>:
 800cf88:	6840      	ldr	r0, [r0, #4]
 800cf8a:	4770      	bx	lr

0800cf8c <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_const_function__Setup_Event__response>:
 800cf8c:	6800      	ldr	r0, [r0, #0]
 800cf8e:	4408      	add	r0, r1
 800cf90:	4770      	bx	lr
 800cf92:	bf00      	nop

0800cf94 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__fetch_function__Setup_Event__response>:
 800cf94:	6803      	ldr	r3, [r0, #0]
 800cf96:	5c5b      	ldrb	r3, [r3, r1]
 800cf98:	7013      	strb	r3, [r2, #0]
 800cf9a:	4770      	bx	lr

0800cf9c <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__assign_function__Setup_Event__response>:
 800cf9c:	6803      	ldr	r3, [r0, #0]
 800cf9e:	7812      	ldrb	r2, [r2, #0]
 800cfa0:	545a      	strb	r2, [r3, r1]
 800cfa2:	4770      	bx	lr

0800cfa4 <racs_services__srv__Setup_Request__rosidl_typesupport_introspection_c__Setup_Request_init_function>:
 800cfa4:	f008 bb86 	b.w	80156b4 <racs_services__srv__Setup_Request__init>

0800cfa8 <racs_services__srv__Setup_Request__rosidl_typesupport_introspection_c__Setup_Request_fini_function>:
 800cfa8:	f008 bb88 	b.w	80156bc <racs_services__srv__Setup_Request__fini>

0800cfac <racs_services__srv__Setup_Response__rosidl_typesupport_introspection_c__Setup_Response_init_function>:
 800cfac:	f008 bbd0 	b.w	8015750 <racs_services__srv__Setup_Response__init>

0800cfb0 <racs_services__srv__Setup_Response__rosidl_typesupport_introspection_c__Setup_Response_fini_function>:
 800cfb0:	f008 bbd2 	b.w	8015758 <racs_services__srv__Setup_Response__fini>

0800cfb4 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__Setup_Event_init_function>:
 800cfb4:	f008 bc08 	b.w	80157c8 <racs_services__srv__Setup_Event__init>

0800cfb8 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__Setup_Event_fini_function>:
 800cfb8:	f008 bc28 	b.w	801580c <racs_services__srv__Setup_Event__fini>

0800cfbc <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__resize_function__Setup_Event__request>:
 800cfbc:	b510      	push	{r4, lr}
 800cfbe:	4604      	mov	r4, r0
 800cfc0:	b082      	sub	sp, #8
 800cfc2:	9101      	str	r1, [sp, #4]
 800cfc4:	f008 fbb0 	bl	8015728 <racs_services__srv__Setup_Request__Sequence__fini>
 800cfc8:	9901      	ldr	r1, [sp, #4]
 800cfca:	4620      	mov	r0, r4
 800cfcc:	b002      	add	sp, #8
 800cfce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfd2:	f008 bb8f 	b.w	80156f4 <racs_services__srv__Setup_Request__Sequence__init>
 800cfd6:	bf00      	nop

0800cfd8 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__resize_function__Setup_Event__response>:
 800cfd8:	b510      	push	{r4, lr}
 800cfda:	4604      	mov	r4, r0
 800cfdc:	b082      	sub	sp, #8
 800cfde:	9101      	str	r1, [sp, #4]
 800cfe0:	f008 fbde 	bl	80157a0 <racs_services__srv__Setup_Response__Sequence__fini>
 800cfe4:	9901      	ldr	r1, [sp, #4]
 800cfe6:	4620      	mov	r0, r4
 800cfe8:	b002      	add	sp, #8
 800cfea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfee:	f008 bbbd 	b.w	801576c <racs_services__srv__Setup_Response__Sequence__init>
 800cff2:	bf00      	nop

0800cff4 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_function__Setup_Event__response>:
 800cff4:	6800      	ldr	r0, [r0, #0]
 800cff6:	4408      	add	r0, r1
 800cff8:	4770      	bx	lr
 800cffa:	bf00      	nop

0800cffc <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_function__Setup_Event__request>:
 800cffc:	6800      	ldr	r0, [r0, #0]
 800cffe:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800d002:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800d006:	4770      	bx	lr

0800d008 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request>:
 800d008:	4b04      	ldr	r3, [pc, #16]	; (800d01c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x14>)
 800d00a:	681a      	ldr	r2, [r3, #0]
 800d00c:	b10a      	cbz	r2, 800d012 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0xa>
 800d00e:	4803      	ldr	r0, [pc, #12]	; (800d01c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x14>)
 800d010:	4770      	bx	lr
 800d012:	4a03      	ldr	r2, [pc, #12]	; (800d020 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x18>)
 800d014:	4801      	ldr	r0, [pc, #4]	; (800d01c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x14>)
 800d016:	6812      	ldr	r2, [r2, #0]
 800d018:	601a      	str	r2, [r3, #0]
 800d01a:	4770      	bx	lr
 800d01c:	200007a8 	.word	0x200007a8
 800d020:	20000aec 	.word	0x20000aec

0800d024 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response>:
 800d024:	4b04      	ldr	r3, [pc, #16]	; (800d038 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x14>)
 800d026:	681a      	ldr	r2, [r3, #0]
 800d028:	b10a      	cbz	r2, 800d02e <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0xa>
 800d02a:	4803      	ldr	r0, [pc, #12]	; (800d038 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x14>)
 800d02c:	4770      	bx	lr
 800d02e:	4a03      	ldr	r2, [pc, #12]	; (800d03c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x18>)
 800d030:	4801      	ldr	r0, [pc, #4]	; (800d038 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x14>)
 800d032:	6812      	ldr	r2, [r2, #0]
 800d034:	601a      	str	r2, [r3, #0]
 800d036:	4770      	bx	lr
 800d038:	200007fc 	.word	0x200007fc
 800d03c:	20000aec 	.word	0x20000aec

0800d040 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event>:
 800d040:	b508      	push	{r3, lr}
 800d042:	f002 fd69 	bl	800fb18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800d046:	4913      	ldr	r1, [pc, #76]	; (800d094 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x54>)
 800d048:	4b13      	ldr	r3, [pc, #76]	; (800d098 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x58>)
 800d04a:	680a      	ldr	r2, [r1, #0]
 800d04c:	60d8      	str	r0, [r3, #12]
 800d04e:	b152      	cbz	r2, 800d066 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x26>
 800d050:	4a12      	ldr	r2, [pc, #72]	; (800d09c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x5c>)
 800d052:	6499      	str	r1, [r3, #72]	; 0x48
 800d054:	6811      	ldr	r1, [r2, #0]
 800d056:	b171      	cbz	r1, 800d076 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x36>
 800d058:	4911      	ldr	r1, [pc, #68]	; (800d0a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800d05a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800d05e:	680b      	ldr	r3, [r1, #0]
 800d060:	b193      	cbz	r3, 800d088 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x48>
 800d062:	480f      	ldr	r0, [pc, #60]	; (800d0a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800d064:	bd08      	pop	{r3, pc}
 800d066:	4a0f      	ldr	r2, [pc, #60]	; (800d0a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x64>)
 800d068:	6499      	str	r1, [r3, #72]	; 0x48
 800d06a:	6812      	ldr	r2, [r2, #0]
 800d06c:	600a      	str	r2, [r1, #0]
 800d06e:	4a0b      	ldr	r2, [pc, #44]	; (800d09c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x5c>)
 800d070:	6811      	ldr	r1, [r2, #0]
 800d072:	2900      	cmp	r1, #0
 800d074:	d1f0      	bne.n	800d058 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x18>
 800d076:	490b      	ldr	r1, [pc, #44]	; (800d0a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x64>)
 800d078:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800d07c:	6809      	ldr	r1, [r1, #0]
 800d07e:	6011      	str	r1, [r2, #0]
 800d080:	4907      	ldr	r1, [pc, #28]	; (800d0a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800d082:	680b      	ldr	r3, [r1, #0]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d1ec      	bne.n	800d062 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x22>
 800d088:	4b06      	ldr	r3, [pc, #24]	; (800d0a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x64>)
 800d08a:	4805      	ldr	r0, [pc, #20]	; (800d0a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	600b      	str	r3, [r1, #0]
 800d090:	bd08      	pop	{r3, pc}
 800d092:	bf00      	nop
 800d094:	200007a8 	.word	0x200007a8
 800d098:	20000538 	.word	0x20000538
 800d09c:	200007fc 	.word	0x200007fc
 800d0a0:	200005ec 	.word	0x200005ec
 800d0a4:	20000aec 	.word	0x20000aec

0800d0a8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup>:
 800d0a8:	4b25      	ldr	r3, [pc, #148]	; (800d140 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x98>)
 800d0aa:	681a      	ldr	r2, [r3, #0]
 800d0ac:	b510      	push	{r4, lr}
 800d0ae:	b142      	cbz	r2, 800d0c2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x1a>
 800d0b0:	685c      	ldr	r4, [r3, #4]
 800d0b2:	68a3      	ldr	r3, [r4, #8]
 800d0b4:	b163      	cbz	r3, 800d0d0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x28>
 800d0b6:	68e3      	ldr	r3, [r4, #12]
 800d0b8:	b193      	cbz	r3, 800d0e0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x38>
 800d0ba:	6923      	ldr	r3, [r4, #16]
 800d0bc:	b1c3      	cbz	r3, 800d0f0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x48>
 800d0be:	4820      	ldr	r0, [pc, #128]	; (800d140 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x98>)
 800d0c0:	bd10      	pop	{r4, pc}
 800d0c2:	4a20      	ldr	r2, [pc, #128]	; (800d144 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800d0c4:	685c      	ldr	r4, [r3, #4]
 800d0c6:	6812      	ldr	r2, [r2, #0]
 800d0c8:	601a      	str	r2, [r3, #0]
 800d0ca:	68a3      	ldr	r3, [r4, #8]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d1f2      	bne.n	800d0b6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xe>
 800d0d0:	4a1d      	ldr	r2, [pc, #116]	; (800d148 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa0>)
 800d0d2:	6813      	ldr	r3, [r2, #0]
 800d0d4:	b303      	cbz	r3, 800d118 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x70>
 800d0d6:	6853      	ldr	r3, [r2, #4]
 800d0d8:	60a3      	str	r3, [r4, #8]
 800d0da:	68e3      	ldr	r3, [r4, #12]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d1ec      	bne.n	800d0ba <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x12>
 800d0e0:	4b1a      	ldr	r3, [pc, #104]	; (800d14c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa4>)
 800d0e2:	681a      	ldr	r2, [r3, #0]
 800d0e4:	b1e2      	cbz	r2, 800d120 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x78>
 800d0e6:	685b      	ldr	r3, [r3, #4]
 800d0e8:	60e3      	str	r3, [r4, #12]
 800d0ea:	6923      	ldr	r3, [r4, #16]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d1e6      	bne.n	800d0be <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x16>
 800d0f0:	f002 fd12 	bl	800fb18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800d0f4:	4a14      	ldr	r2, [pc, #80]	; (800d148 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa0>)
 800d0f6:	4916      	ldr	r1, [pc, #88]	; (800d150 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa8>)
 800d0f8:	6813      	ldr	r3, [r2, #0]
 800d0fa:	60c8      	str	r0, [r1, #12]
 800d0fc:	b1e3      	cbz	r3, 800d138 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x90>
 800d0fe:	4b13      	ldr	r3, [pc, #76]	; (800d14c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa4>)
 800d100:	648a      	str	r2, [r1, #72]	; 0x48
 800d102:	681a      	ldr	r2, [r3, #0]
 800d104:	b1a2      	cbz	r2, 800d130 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x88>
 800d106:	4a13      	ldr	r2, [pc, #76]	; (800d154 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xac>)
 800d108:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 800d10c:	6813      	ldr	r3, [r2, #0]
 800d10e:	b15b      	cbz	r3, 800d128 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x80>
 800d110:	6853      	ldr	r3, [r2, #4]
 800d112:	480b      	ldr	r0, [pc, #44]	; (800d140 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x98>)
 800d114:	6123      	str	r3, [r4, #16]
 800d116:	bd10      	pop	{r4, pc}
 800d118:	4b0a      	ldr	r3, [pc, #40]	; (800d144 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	6013      	str	r3, [r2, #0]
 800d11e:	e7da      	b.n	800d0d6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x2e>
 800d120:	4a08      	ldr	r2, [pc, #32]	; (800d144 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800d122:	6812      	ldr	r2, [r2, #0]
 800d124:	601a      	str	r2, [r3, #0]
 800d126:	e7de      	b.n	800d0e6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x3e>
 800d128:	4b06      	ldr	r3, [pc, #24]	; (800d144 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	6013      	str	r3, [r2, #0]
 800d12e:	e7ef      	b.n	800d110 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x68>
 800d130:	4a04      	ldr	r2, [pc, #16]	; (800d144 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800d132:	6812      	ldr	r2, [r2, #0]
 800d134:	601a      	str	r2, [r3, #0]
 800d136:	e7e6      	b.n	800d106 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x5e>
 800d138:	4b02      	ldr	r3, [pc, #8]	; (800d144 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	6013      	str	r3, [r2, #0]
 800d13e:	e7de      	b.n	800d0fe <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x56>
 800d140:	20000828 	.word	0x20000828
 800d144:	20000aec 	.word	0x20000aec
 800d148:	200007a8 	.word	0x200007a8
 800d14c:	200007fc 	.word	0x200007fc
 800d150:	20000538 	.word	0x20000538
 800d154:	200005ec 	.word	0x200005ec

0800d158 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Request>:
 800d158:	4800      	ldr	r0, [pc, #0]	; (800d15c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x4>)
 800d15a:	4770      	bx	lr
 800d15c:	200008a8 	.word	0x200008a8

0800d160 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Response>:
 800d160:	4800      	ldr	r0, [pc, #0]	; (800d164 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x4>)
 800d162:	4770      	bx	lr
 800d164:	200008c0 	.word	0x200008c0

0800d168 <_Control_Response__max_serialized_size>:
 800d168:	2101      	movs	r1, #1
 800d16a:	2000      	movs	r0, #0
 800d16c:	b508      	push	{r3, lr}
 800d16e:	f004 fd6d 	bl	8011c4c <ucdr_alignment>
 800d172:	3001      	adds	r0, #1
 800d174:	bd08      	pop	{r3, pc}
 800d176:	bf00      	nop

0800d178 <_Control_Response__cdr_deserialize>:
 800d178:	b109      	cbz	r1, 800d17e <_Control_Response__cdr_deserialize+0x6>
 800d17a:	f003 b8e9 	b.w	8010350 <ucdr_deserialize_uint8_t>
 800d17e:	4608      	mov	r0, r1
 800d180:	4770      	bx	lr
 800d182:	bf00      	nop

0800d184 <_Control_Event__max_serialized_size>:
 800d184:	b500      	push	{lr}
 800d186:	b083      	sub	sp, #12
 800d188:	2301      	movs	r3, #1
 800d18a:	2100      	movs	r1, #0
 800d18c:	f10d 0007 	add.w	r0, sp, #7
 800d190:	f88d 3007 	strb.w	r3, [sp, #7]
 800d194:	f002 fd70 	bl	800fc78 <max_serialized_size_service_msgs__msg__ServiceEventInfo>
 800d198:	b003      	add	sp, #12
 800d19a:	f85d fb04 	ldr.w	pc, [sp], #4
 800d19e:	bf00      	nop

0800d1a0 <get_serialized_size_racs_services__srv__Control_Request>:
 800d1a0:	b1b0      	cbz	r0, 800d1d0 <get_serialized_size_racs_services__srv__Control_Request+0x30>
 800d1a2:	b538      	push	{r3, r4, r5, lr}
 800d1a4:	460d      	mov	r5, r1
 800d1a6:	2101      	movs	r1, #1
 800d1a8:	4628      	mov	r0, r5
 800d1aa:	f004 fd4f 	bl	8011c4c <ucdr_alignment>
 800d1ae:	1c6b      	adds	r3, r5, #1
 800d1b0:	2101      	movs	r1, #1
 800d1b2:	f1c5 050a 	rsb	r5, r5, #10
 800d1b6:	181c      	adds	r4, r3, r0
 800d1b8:	4620      	mov	r0, r4
 800d1ba:	f004 fd47 	bl	8011c4c <ucdr_alignment>
 800d1be:	3001      	adds	r0, #1
 800d1c0:	2102      	movs	r1, #2
 800d1c2:	4404      	add	r4, r0
 800d1c4:	4620      	mov	r0, r4
 800d1c6:	f004 fd41 	bl	8011c4c <ucdr_alignment>
 800d1ca:	4428      	add	r0, r5
 800d1cc:	4420      	add	r0, r4
 800d1ce:	bd38      	pop	{r3, r4, r5, pc}
 800d1d0:	4770      	bx	lr
 800d1d2:	bf00      	nop

0800d1d4 <get_serialized_size_racs_services__srv__Control_Response>:
 800d1d4:	b138      	cbz	r0, 800d1e6 <get_serialized_size_racs_services__srv__Control_Response+0x12>
 800d1d6:	b508      	push	{r3, lr}
 800d1d8:	460b      	mov	r3, r1
 800d1da:	2101      	movs	r1, #1
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f004 fd35 	bl	8011c4c <ucdr_alignment>
 800d1e2:	3001      	adds	r0, #1
 800d1e4:	bd08      	pop	{r3, pc}
 800d1e6:	4770      	bx	lr

0800d1e8 <_Control_Request__cdr_deserialize>:
 800d1e8:	b538      	push	{r3, r4, r5, lr}
 800d1ea:	460c      	mov	r4, r1
 800d1ec:	b169      	cbz	r1, 800d20a <_Control_Request__cdr_deserialize+0x22>
 800d1ee:	4605      	mov	r5, r0
 800d1f0:	f003 f8ae 	bl	8010350 <ucdr_deserialize_uint8_t>
 800d1f4:	1c61      	adds	r1, r4, #1
 800d1f6:	4628      	mov	r0, r5
 800d1f8:	f003 f8aa 	bl	8010350 <ucdr_deserialize_uint8_t>
 800d1fc:	1ca1      	adds	r1, r4, #2
 800d1fe:	4628      	mov	r0, r5
 800d200:	2205      	movs	r2, #5
 800d202:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d206:	f002 bf63 	b.w	80100d0 <ucdr_deserialize_array_int16_t>
 800d20a:	4608      	mov	r0, r1
 800d20c:	bd38      	pop	{r3, r4, r5, pc}
 800d20e:	bf00      	nop

0800d210 <_Control_Response__cdr_serialize>:
 800d210:	460a      	mov	r2, r1
 800d212:	b118      	cbz	r0, 800d21c <_Control_Response__cdr_serialize+0xc>
 800d214:	7801      	ldrb	r1, [r0, #0]
 800d216:	4610      	mov	r0, r2
 800d218:	f003 b884 	b.w	8010324 <ucdr_serialize_uint8_t>
 800d21c:	4770      	bx	lr
 800d21e:	bf00      	nop

0800d220 <_Control_Request__cdr_serialize>:
 800d220:	b188      	cbz	r0, 800d246 <_Control_Request__cdr_serialize+0x26>
 800d222:	b538      	push	{r3, r4, r5, lr}
 800d224:	460d      	mov	r5, r1
 800d226:	4604      	mov	r4, r0
 800d228:	7801      	ldrb	r1, [r0, #0]
 800d22a:	4628      	mov	r0, r5
 800d22c:	f003 f87a 	bl	8010324 <ucdr_serialize_uint8_t>
 800d230:	7861      	ldrb	r1, [r4, #1]
 800d232:	4628      	mov	r0, r5
 800d234:	f003 f876 	bl	8010324 <ucdr_serialize_uint8_t>
 800d238:	1ca1      	adds	r1, r4, #2
 800d23a:	4628      	mov	r0, r5
 800d23c:	2205      	movs	r2, #5
 800d23e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d242:	f002 beef 	b.w	8010024 <ucdr_serialize_array_int16_t>
 800d246:	4770      	bx	lr

0800d248 <get_serialized_size_racs_services__srv__Control_Event.part.0>:
 800d248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d24c:	460e      	mov	r6, r1
 800d24e:	4605      	mov	r5, r0
 800d250:	f002 fc78 	bl	800fb44 <get_serialized_size_service_msgs__msg__ServiceEventInfo>
 800d254:	2104      	movs	r1, #4
 800d256:	eb06 0800 	add.w	r8, r6, r0
 800d25a:	f8d5 902c 	ldr.w	r9, [r5, #44]	; 0x2c
 800d25e:	4640      	mov	r0, r8
 800d260:	f004 fcf4 	bl	8011c4c <ucdr_alignment>
 800d264:	3004      	adds	r0, #4
 800d266:	4480      	add	r8, r0
 800d268:	f1b9 0f00 	cmp.w	r9, #0
 800d26c:	d019      	beq.n	800d2a2 <get_serialized_size_racs_services__srv__Control_Event.part.0+0x5a>
 800d26e:	2700      	movs	r7, #0
 800d270:	f8df a07c 	ldr.w	sl, [pc, #124]	; 800d2f0 <get_serialized_size_racs_services__srv__Control_Event.part.0+0xa8>
 800d274:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800d276:	eb07 0047 	add.w	r0, r7, r7, lsl #1
 800d27a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800d27e:	4641      	mov	r1, r8
 800d280:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800d284:	3701      	adds	r7, #1
 800d286:	695b      	ldr	r3, [r3, #20]
 800d288:	4798      	blx	r3
 800d28a:	4604      	mov	r4, r0
 800d28c:	4640      	mov	r0, r8
 800d28e:	2c04      	cmp	r4, #4
 800d290:	4621      	mov	r1, r4
 800d292:	bf28      	it	cs
 800d294:	2104      	movcs	r1, #4
 800d296:	f004 fcd9 	bl	8011c4c <ucdr_alignment>
 800d29a:	45b9      	cmp	r9, r7
 800d29c:	4420      	add	r0, r4
 800d29e:	4480      	add	r8, r0
 800d2a0:	d1e8      	bne.n	800d274 <get_serialized_size_racs_services__srv__Control_Event.part.0+0x2c>
 800d2a2:	4640      	mov	r0, r8
 800d2a4:	2104      	movs	r1, #4
 800d2a6:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800d2a8:	f004 fcd0 	bl	8011c4c <ucdr_alignment>
 800d2ac:	4480      	add	r8, r0
 800d2ae:	f108 0804 	add.w	r8, r8, #4
 800d2b2:	b1c7      	cbz	r7, 800d2e6 <get_serialized_size_racs_services__srv__Control_Event.part.0+0x9e>
 800d2b4:	f04f 0900 	mov.w	r9, #0
 800d2b8:	f8df a038 	ldr.w	sl, [pc, #56]	; 800d2f4 <get_serialized_size_racs_services__srv__Control_Event.part.0+0xac>
 800d2bc:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800d2be:	4641      	mov	r1, r8
 800d2c0:	f8da 3004 	ldr.w	r3, [sl, #4]
 800d2c4:	4448      	add	r0, r9
 800d2c6:	f109 0901 	add.w	r9, r9, #1
 800d2ca:	695b      	ldr	r3, [r3, #20]
 800d2cc:	4798      	blx	r3
 800d2ce:	4604      	mov	r4, r0
 800d2d0:	4640      	mov	r0, r8
 800d2d2:	2c04      	cmp	r4, #4
 800d2d4:	4621      	mov	r1, r4
 800d2d6:	bf28      	it	cs
 800d2d8:	2104      	movcs	r1, #4
 800d2da:	f004 fcb7 	bl	8011c4c <ucdr_alignment>
 800d2de:	454f      	cmp	r7, r9
 800d2e0:	4420      	add	r0, r4
 800d2e2:	4480      	add	r8, r0
 800d2e4:	d1ea      	bne.n	800d2bc <get_serialized_size_racs_services__srv__Control_Event.part.0+0x74>
 800d2e6:	eba8 0006 	sub.w	r0, r8, r6
 800d2ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2ee:	bf00      	nop
 800d2f0:	200008a8 	.word	0x200008a8
 800d2f4:	200008c0 	.word	0x200008c0

0800d2f8 <get_serialized_size_racs_services__srv__Control_Event>:
 800d2f8:	b108      	cbz	r0, 800d2fe <get_serialized_size_racs_services__srv__Control_Event+0x6>
 800d2fa:	f7ff bfa5 	b.w	800d248 <get_serialized_size_racs_services__srv__Control_Event.part.0>
 800d2fe:	4770      	bx	lr

0800d300 <_Control_Event__get_serialized_size>:
 800d300:	b110      	cbz	r0, 800d308 <_Control_Event__get_serialized_size+0x8>
 800d302:	2100      	movs	r1, #0
 800d304:	f7ff bfa0 	b.w	800d248 <get_serialized_size_racs_services__srv__Control_Event.part.0>
 800d308:	4770      	bx	lr
 800d30a:	bf00      	nop

0800d30c <_Control_Event__cdr_deserialize>:
 800d30c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d310:	460c      	mov	r4, r1
 800d312:	b082      	sub	sp, #8
 800d314:	2900      	cmp	r1, #0
 800d316:	d045      	beq.n	800d3a4 <_Control_Event__cdr_deserialize+0x98>
 800d318:	4607      	mov	r7, r0
 800d31a:	f002 fcd3 	bl	800fcc4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800d31e:	4603      	mov	r3, r0
 800d320:	4621      	mov	r1, r4
 800d322:	4638      	mov	r0, r7
 800d324:	685b      	ldr	r3, [r3, #4]
 800d326:	68db      	ldr	r3, [r3, #12]
 800d328:	4798      	blx	r3
 800d32a:	4638      	mov	r0, r7
 800d32c:	a901      	add	r1, sp, #4
 800d32e:	f003 fb3f 	bl	80109b0 <ucdr_deserialize_uint32_t>
 800d332:	9b01      	ldr	r3, [sp, #4]
 800d334:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d336:	429a      	cmp	r2, r3
 800d338:	d330      	bcc.n	800d39c <_Control_Event__cdr_deserialize+0x90>
 800d33a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d33c:	b193      	cbz	r3, 800d364 <_Control_Event__cdr_deserialize+0x58>
 800d33e:	2500      	movs	r5, #0
 800d340:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800d3b0 <_Control_Event__cdr_deserialize+0xa4>
 800d344:	462e      	mov	r6, r5
 800d346:	e002      	b.n	800d34e <_Control_Event__cdr_deserialize+0x42>
 800d348:	9b01      	ldr	r3, [sp, #4]
 800d34a:	429e      	cmp	r6, r3
 800d34c:	d20a      	bcs.n	800d364 <_Control_Event__cdr_deserialize+0x58>
 800d34e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800d350:	4638      	mov	r0, r7
 800d352:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d356:	3601      	adds	r6, #1
 800d358:	4429      	add	r1, r5
 800d35a:	350c      	adds	r5, #12
 800d35c:	68db      	ldr	r3, [r3, #12]
 800d35e:	4798      	blx	r3
 800d360:	2800      	cmp	r0, #0
 800d362:	d1f1      	bne.n	800d348 <_Control_Event__cdr_deserialize+0x3c>
 800d364:	a901      	add	r1, sp, #4
 800d366:	4638      	mov	r0, r7
 800d368:	f003 fb22 	bl	80109b0 <ucdr_deserialize_uint32_t>
 800d36c:	9b01      	ldr	r3, [sp, #4]
 800d36e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800d370:	429a      	cmp	r2, r3
 800d372:	d313      	bcc.n	800d39c <_Control_Event__cdr_deserialize+0x90>
 800d374:	63a3      	str	r3, [r4, #56]	; 0x38
 800d376:	b193      	cbz	r3, 800d39e <_Control_Event__cdr_deserialize+0x92>
 800d378:	2500      	movs	r5, #0
 800d37a:	4e0c      	ldr	r6, [pc, #48]	; (800d3ac <_Control_Event__cdr_deserialize+0xa0>)
 800d37c:	e002      	b.n	800d384 <_Control_Event__cdr_deserialize+0x78>
 800d37e:	9b01      	ldr	r3, [sp, #4]
 800d380:	429d      	cmp	r5, r3
 800d382:	d20c      	bcs.n	800d39e <_Control_Event__cdr_deserialize+0x92>
 800d384:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d386:	4638      	mov	r0, r7
 800d388:	6873      	ldr	r3, [r6, #4]
 800d38a:	4429      	add	r1, r5
 800d38c:	3501      	adds	r5, #1
 800d38e:	68db      	ldr	r3, [r3, #12]
 800d390:	4798      	blx	r3
 800d392:	2800      	cmp	r0, #0
 800d394:	d1f3      	bne.n	800d37e <_Control_Event__cdr_deserialize+0x72>
 800d396:	b002      	add	sp, #8
 800d398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d39c:	2000      	movs	r0, #0
 800d39e:	b002      	add	sp, #8
 800d3a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3a4:	4608      	mov	r0, r1
 800d3a6:	b002      	add	sp, #8
 800d3a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3ac:	200008c0 	.word	0x200008c0
 800d3b0:	200008a8 	.word	0x200008a8

0800d3b4 <_Control_Event__cdr_serialize>:
 800d3b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3b8:	2800      	cmp	r0, #0
 800d3ba:	d03b      	beq.n	800d434 <_Control_Event__cdr_serialize+0x80>
 800d3bc:	4605      	mov	r5, r0
 800d3be:	460e      	mov	r6, r1
 800d3c0:	f002 fc80 	bl	800fcc4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	4631      	mov	r1, r6
 800d3c8:	4628      	mov	r0, r5
 800d3ca:	685b      	ldr	r3, [r3, #4]
 800d3cc:	689b      	ldr	r3, [r3, #8]
 800d3ce:	4798      	blx	r3
 800d3d0:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 800d3d2:	4630      	mov	r0, r6
 800d3d4:	4639      	mov	r1, r7
 800d3d6:	f003 f9bb 	bl	8010750 <ucdr_serialize_uint32_t>
 800d3da:	b198      	cbz	r0, 800d404 <_Control_Event__cdr_serialize+0x50>
 800d3dc:	b197      	cbz	r7, 800d404 <_Control_Event__cdr_serialize+0x50>
 800d3de:	2400      	movs	r4, #0
 800d3e0:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800d440 <_Control_Event__cdr_serialize+0x8c>
 800d3e4:	e001      	b.n	800d3ea <_Control_Event__cdr_serialize+0x36>
 800d3e6:	42a7      	cmp	r7, r4
 800d3e8:	d00c      	beq.n	800d404 <_Control_Event__cdr_serialize+0x50>
 800d3ea:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 800d3ee:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800d3f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d3f4:	4631      	mov	r1, r6
 800d3f6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800d3fa:	3401      	adds	r4, #1
 800d3fc:	689b      	ldr	r3, [r3, #8]
 800d3fe:	4798      	blx	r3
 800d400:	2800      	cmp	r0, #0
 800d402:	d1f0      	bne.n	800d3e6 <_Control_Event__cdr_serialize+0x32>
 800d404:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800d406:	4630      	mov	r0, r6
 800d408:	4639      	mov	r1, r7
 800d40a:	f003 f9a1 	bl	8010750 <ucdr_serialize_uint32_t>
 800d40e:	4680      	mov	r8, r0
 800d410:	b180      	cbz	r0, 800d434 <_Control_Event__cdr_serialize+0x80>
 800d412:	b18f      	cbz	r7, 800d438 <_Control_Event__cdr_serialize+0x84>
 800d414:	2400      	movs	r4, #0
 800d416:	f8df 902c 	ldr.w	r9, [pc, #44]	; 800d444 <_Control_Event__cdr_serialize+0x90>
 800d41a:	e001      	b.n	800d420 <_Control_Event__cdr_serialize+0x6c>
 800d41c:	42a7      	cmp	r7, r4
 800d41e:	d00b      	beq.n	800d438 <_Control_Event__cdr_serialize+0x84>
 800d420:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800d422:	4631      	mov	r1, r6
 800d424:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800d428:	4420      	add	r0, r4
 800d42a:	3401      	adds	r4, #1
 800d42c:	689b      	ldr	r3, [r3, #8]
 800d42e:	4798      	blx	r3
 800d430:	2800      	cmp	r0, #0
 800d432:	d1f3      	bne.n	800d41c <_Control_Event__cdr_serialize+0x68>
 800d434:	f04f 0800 	mov.w	r8, #0
 800d438:	4640      	mov	r0, r8
 800d43a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d43e:	bf00      	nop
 800d440:	200008a8 	.word	0x200008a8
 800d444:	200008c0 	.word	0x200008c0

0800d448 <_Control_Response__get_serialized_size>:
 800d448:	b130      	cbz	r0, 800d458 <_Control_Response__get_serialized_size+0x10>
 800d44a:	2101      	movs	r1, #1
 800d44c:	2000      	movs	r0, #0
 800d44e:	b508      	push	{r3, lr}
 800d450:	f004 fbfc 	bl	8011c4c <ucdr_alignment>
 800d454:	3001      	adds	r0, #1
 800d456:	bd08      	pop	{r3, pc}
 800d458:	4770      	bx	lr
 800d45a:	bf00      	nop

0800d45c <_Control_Request__get_serialized_size>:
 800d45c:	b190      	cbz	r0, 800d484 <_Control_Request__get_serialized_size+0x28>
 800d45e:	2101      	movs	r1, #1
 800d460:	2000      	movs	r0, #0
 800d462:	b510      	push	{r4, lr}
 800d464:	f004 fbf2 	bl	8011c4c <ucdr_alignment>
 800d468:	2101      	movs	r1, #1
 800d46a:	1844      	adds	r4, r0, r1
 800d46c:	4620      	mov	r0, r4
 800d46e:	f004 fbed 	bl	8011c4c <ucdr_alignment>
 800d472:	3001      	adds	r0, #1
 800d474:	2102      	movs	r1, #2
 800d476:	4404      	add	r4, r0
 800d478:	4620      	mov	r0, r4
 800d47a:	f004 fbe7 	bl	8011c4c <ucdr_alignment>
 800d47e:	300a      	adds	r0, #10
 800d480:	4420      	add	r0, r4
 800d482:	bd10      	pop	{r4, pc}
 800d484:	4770      	bx	lr
 800d486:	bf00      	nop

0800d488 <_Control_Request__max_serialized_size>:
 800d488:	b538      	push	{r3, r4, r5, lr}
 800d48a:	2101      	movs	r1, #1
 800d48c:	2000      	movs	r0, #0
 800d48e:	f004 fbdd 	bl	8011c4c <ucdr_alignment>
 800d492:	2101      	movs	r1, #1
 800d494:	1845      	adds	r5, r0, r1
 800d496:	4628      	mov	r0, r5
 800d498:	f004 fbd8 	bl	8011c4c <ucdr_alignment>
 800d49c:	1c44      	adds	r4, r0, #1
 800d49e:	2102      	movs	r1, #2
 800d4a0:	442c      	add	r4, r5
 800d4a2:	4620      	mov	r0, r4
 800d4a4:	f004 fbd2 	bl	8011c4c <ucdr_alignment>
 800d4a8:	300a      	adds	r0, #10
 800d4aa:	4420      	add	r0, r4
 800d4ac:	bd38      	pop	{r3, r4, r5, pc}
 800d4ae:	bf00      	nop

0800d4b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Event>:
 800d4b0:	4800      	ldr	r0, [pc, #0]	; (800d4b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x4>)
 800d4b2:	4770      	bx	lr
 800d4b4:	20000890 	.word	0x20000890

0800d4b8 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Control>:
 800d4b8:	4800      	ldr	r0, [pc, #0]	; (800d4bc <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Control+0x4>)
 800d4ba:	4770      	bx	lr
 800d4bc:	20000864 	.word	0x20000864

0800d4c0 <_Debug__max_serialized_size>:
 800d4c0:	2104      	movs	r1, #4
 800d4c2:	2000      	movs	r0, #0
 800d4c4:	b508      	push	{r3, lr}
 800d4c6:	f004 fbc1 	bl	8011c4c <ucdr_alignment>
 800d4ca:	3018      	adds	r0, #24
 800d4cc:	bd08      	pop	{r3, pc}
 800d4ce:	bf00      	nop

0800d4d0 <get_serialized_size_racs_services__msg__Debug>:
 800d4d0:	b138      	cbz	r0, 800d4e2 <get_serialized_size_racs_services__msg__Debug+0x12>
 800d4d2:	b508      	push	{r3, lr}
 800d4d4:	460b      	mov	r3, r1
 800d4d6:	2104      	movs	r1, #4
 800d4d8:	4618      	mov	r0, r3
 800d4da:	f004 fbb7 	bl	8011c4c <ucdr_alignment>
 800d4de:	3018      	adds	r0, #24
 800d4e0:	bd08      	pop	{r3, pc}
 800d4e2:	4770      	bx	lr

0800d4e4 <_Debug__cdr_deserialize>:
 800d4e4:	b111      	cbz	r1, 800d4ec <_Debug__cdr_deserialize+0x8>
 800d4e6:	2206      	movs	r2, #6
 800d4e8:	f002 be9a 	b.w	8010220 <ucdr_deserialize_array_float>
 800d4ec:	4608      	mov	r0, r1
 800d4ee:	4770      	bx	lr

0800d4f0 <_Debug__cdr_serialize>:
 800d4f0:	468c      	mov	ip, r1
 800d4f2:	b120      	cbz	r0, 800d4fe <_Debug__cdr_serialize+0xe>
 800d4f4:	4601      	mov	r1, r0
 800d4f6:	2206      	movs	r2, #6
 800d4f8:	4660      	mov	r0, ip
 800d4fa:	f002 be3d 	b.w	8010178 <ucdr_serialize_array_float>
 800d4fe:	4770      	bx	lr

0800d500 <_Debug__get_serialized_size>:
 800d500:	b130      	cbz	r0, 800d510 <_Debug__get_serialized_size+0x10>
 800d502:	2104      	movs	r1, #4
 800d504:	2000      	movs	r0, #0
 800d506:	b508      	push	{r3, lr}
 800d508:	f004 fba0 	bl	8011c4c <ucdr_alignment>
 800d50c:	3018      	adds	r0, #24
 800d50e:	bd08      	pop	{r3, pc}
 800d510:	4770      	bx	lr
 800d512:	bf00      	nop

0800d514 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__Debug>:
 800d514:	4800      	ldr	r0, [pc, #0]	; (800d518 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__Debug+0x4>)
 800d516:	4770      	bx	lr
 800d518:	2000092c 	.word	0x2000092c

0800d51c <_DirectAccess__max_serialized_size>:
 800d51c:	2102      	movs	r1, #2
 800d51e:	2000      	movs	r0, #0
 800d520:	b508      	push	{r3, lr}
 800d522:	f004 fb93 	bl	8011c4c <ucdr_alignment>
 800d526:	300c      	adds	r0, #12
 800d528:	bd08      	pop	{r3, pc}
 800d52a:	bf00      	nop

0800d52c <get_serialized_size_racs_services__msg__DirectAccess>:
 800d52c:	b138      	cbz	r0, 800d53e <get_serialized_size_racs_services__msg__DirectAccess+0x12>
 800d52e:	b508      	push	{r3, lr}
 800d530:	460b      	mov	r3, r1
 800d532:	2102      	movs	r1, #2
 800d534:	4618      	mov	r0, r3
 800d536:	f004 fb89 	bl	8011c4c <ucdr_alignment>
 800d53a:	300c      	adds	r0, #12
 800d53c:	bd08      	pop	{r3, pc}
 800d53e:	4770      	bx	lr

0800d540 <_DirectAccess__cdr_deserialize>:
 800d540:	b111      	cbz	r1, 800d548 <_DirectAccess__cdr_deserialize+0x8>
 800d542:	2206      	movs	r2, #6
 800d544:	f002 bdc4 	b.w	80100d0 <ucdr_deserialize_array_int16_t>
 800d548:	4608      	mov	r0, r1
 800d54a:	4770      	bx	lr

0800d54c <_DirectAccess__cdr_serialize>:
 800d54c:	468c      	mov	ip, r1
 800d54e:	b120      	cbz	r0, 800d55a <_DirectAccess__cdr_serialize+0xe>
 800d550:	4601      	mov	r1, r0
 800d552:	2206      	movs	r2, #6
 800d554:	4660      	mov	r0, ip
 800d556:	f002 bd65 	b.w	8010024 <ucdr_serialize_array_int16_t>
 800d55a:	4770      	bx	lr

0800d55c <_DirectAccess__get_serialized_size>:
 800d55c:	b130      	cbz	r0, 800d56c <_DirectAccess__get_serialized_size+0x10>
 800d55e:	2102      	movs	r1, #2
 800d560:	2000      	movs	r0, #0
 800d562:	b508      	push	{r3, lr}
 800d564:	f004 fb72 	bl	8011c4c <ucdr_alignment>
 800d568:	300c      	adds	r0, #12
 800d56a:	bd08      	pop	{r3, pc}
 800d56c:	4770      	bx	lr
 800d56e:	bf00      	nop

0800d570 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__DirectAccess>:
 800d570:	4800      	ldr	r0, [pc, #0]	; (800d574 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x4>)
 800d572:	4770      	bx	lr
 800d574:	20000960 	.word	0x20000960

0800d578 <_Encoder__max_serialized_size>:
 800d578:	2102      	movs	r1, #2
 800d57a:	2000      	movs	r0, #0
 800d57c:	b508      	push	{r3, lr}
 800d57e:	f004 fb65 	bl	8011c4c <ucdr_alignment>
 800d582:	300a      	adds	r0, #10
 800d584:	bd08      	pop	{r3, pc}
 800d586:	bf00      	nop

0800d588 <get_serialized_size_racs_services__msg__Encoder>:
 800d588:	b138      	cbz	r0, 800d59a <get_serialized_size_racs_services__msg__Encoder+0x12>
 800d58a:	b508      	push	{r3, lr}
 800d58c:	460b      	mov	r3, r1
 800d58e:	2102      	movs	r1, #2
 800d590:	4618      	mov	r0, r3
 800d592:	f004 fb5b 	bl	8011c4c <ucdr_alignment>
 800d596:	300a      	adds	r0, #10
 800d598:	bd08      	pop	{r3, pc}
 800d59a:	4770      	bx	lr

0800d59c <_Encoder__cdr_deserialize>:
 800d59c:	b111      	cbz	r1, 800d5a4 <_Encoder__cdr_deserialize+0x8>
 800d59e:	2205      	movs	r2, #5
 800d5a0:	f002 bd96 	b.w	80100d0 <ucdr_deserialize_array_int16_t>
 800d5a4:	4608      	mov	r0, r1
 800d5a6:	4770      	bx	lr

0800d5a8 <_Encoder__cdr_serialize>:
 800d5a8:	468c      	mov	ip, r1
 800d5aa:	b120      	cbz	r0, 800d5b6 <_Encoder__cdr_serialize+0xe>
 800d5ac:	4601      	mov	r1, r0
 800d5ae:	2205      	movs	r2, #5
 800d5b0:	4660      	mov	r0, ip
 800d5b2:	f002 bd37 	b.w	8010024 <ucdr_serialize_array_int16_t>
 800d5b6:	4770      	bx	lr

0800d5b8 <_Encoder__get_serialized_size>:
 800d5b8:	b130      	cbz	r0, 800d5c8 <_Encoder__get_serialized_size+0x10>
 800d5ba:	2102      	movs	r1, #2
 800d5bc:	2000      	movs	r0, #0
 800d5be:	b508      	push	{r3, lr}
 800d5c0:	f004 fb44 	bl	8011c4c <ucdr_alignment>
 800d5c4:	300a      	adds	r0, #10
 800d5c6:	bd08      	pop	{r3, pc}
 800d5c8:	4770      	bx	lr
 800d5ca:	bf00      	nop

0800d5cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__Encoder>:
 800d5cc:	4800      	ldr	r0, [pc, #0]	; (800d5d0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__Encoder+0x4>)
 800d5ce:	4770      	bx	lr
 800d5d0:	20000994 	.word	0x20000994

0800d5d4 <_Feedback__max_serialized_size>:
 800d5d4:	2102      	movs	r1, #2
 800d5d6:	2000      	movs	r0, #0
 800d5d8:	b508      	push	{r3, lr}
 800d5da:	f004 fb37 	bl	8011c4c <ucdr_alignment>
 800d5de:	300a      	adds	r0, #10
 800d5e0:	bd08      	pop	{r3, pc}
 800d5e2:	bf00      	nop

0800d5e4 <get_serialized_size_racs_services__msg__Feedback>:
 800d5e4:	b138      	cbz	r0, 800d5f6 <get_serialized_size_racs_services__msg__Feedback+0x12>
 800d5e6:	b508      	push	{r3, lr}
 800d5e8:	460b      	mov	r3, r1
 800d5ea:	2102      	movs	r1, #2
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f004 fb2d 	bl	8011c4c <ucdr_alignment>
 800d5f2:	300a      	adds	r0, #10
 800d5f4:	bd08      	pop	{r3, pc}
 800d5f6:	4770      	bx	lr

0800d5f8 <_Feedback__cdr_deserialize>:
 800d5f8:	b111      	cbz	r1, 800d600 <_Feedback__cdr_deserialize+0x8>
 800d5fa:	2205      	movs	r2, #5
 800d5fc:	f002 bd68 	b.w	80100d0 <ucdr_deserialize_array_int16_t>
 800d600:	4608      	mov	r0, r1
 800d602:	4770      	bx	lr

0800d604 <_Feedback__cdr_serialize>:
 800d604:	468c      	mov	ip, r1
 800d606:	b120      	cbz	r0, 800d612 <_Feedback__cdr_serialize+0xe>
 800d608:	4601      	mov	r1, r0
 800d60a:	2205      	movs	r2, #5
 800d60c:	4660      	mov	r0, ip
 800d60e:	f002 bd09 	b.w	8010024 <ucdr_serialize_array_int16_t>
 800d612:	4770      	bx	lr

0800d614 <_Feedback__get_serialized_size>:
 800d614:	b130      	cbz	r0, 800d624 <_Feedback__get_serialized_size+0x10>
 800d616:	2102      	movs	r1, #2
 800d618:	2000      	movs	r0, #0
 800d61a:	b508      	push	{r3, lr}
 800d61c:	f004 fb16 	bl	8011c4c <ucdr_alignment>
 800d620:	300a      	adds	r0, #10
 800d622:	bd08      	pop	{r3, pc}
 800d624:	4770      	bx	lr
 800d626:	bf00      	nop

0800d628 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__Feedback>:
 800d628:	4800      	ldr	r0, [pc, #0]	; (800d62c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__Feedback+0x4>)
 800d62a:	4770      	bx	lr
 800d62c:	200009c8 	.word	0x200009c8

0800d630 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Request>:
 800d630:	4800      	ldr	r0, [pc, #0]	; (800d634 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x4>)
 800d632:	4770      	bx	lr
 800d634:	20000a50 	.word	0x20000a50

0800d638 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Response>:
 800d638:	4800      	ldr	r0, [pc, #0]	; (800d63c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x4>)
 800d63a:	4770      	bx	lr
 800d63c:	20000a68 	.word	0x20000a68

0800d640 <_Setup_Response__max_serialized_size>:
 800d640:	2101      	movs	r1, #1
 800d642:	2000      	movs	r0, #0
 800d644:	b508      	push	{r3, lr}
 800d646:	f004 fb01 	bl	8011c4c <ucdr_alignment>
 800d64a:	3001      	adds	r0, #1
 800d64c:	bd08      	pop	{r3, pc}
 800d64e:	bf00      	nop

0800d650 <_Setup_Response__cdr_deserialize>:
 800d650:	b109      	cbz	r1, 800d656 <_Setup_Response__cdr_deserialize+0x6>
 800d652:	f002 be7d 	b.w	8010350 <ucdr_deserialize_uint8_t>
 800d656:	4608      	mov	r0, r1
 800d658:	4770      	bx	lr
 800d65a:	bf00      	nop

0800d65c <_Setup_Event__max_serialized_size>:
 800d65c:	b500      	push	{lr}
 800d65e:	b083      	sub	sp, #12
 800d660:	2301      	movs	r3, #1
 800d662:	2100      	movs	r1, #0
 800d664:	f10d 0007 	add.w	r0, sp, #7
 800d668:	f88d 3007 	strb.w	r3, [sp, #7]
 800d66c:	f002 fb04 	bl	800fc78 <max_serialized_size_service_msgs__msg__ServiceEventInfo>
 800d670:	b003      	add	sp, #12
 800d672:	f85d fb04 	ldr.w	pc, [sp], #4
 800d676:	bf00      	nop

0800d678 <get_serialized_size_racs_services__srv__Setup_Request.part.0>:
 800d678:	b570      	push	{r4, r5, r6, lr}
 800d67a:	4604      	mov	r4, r0
 800d67c:	2101      	movs	r1, #1
 800d67e:	f004 fae5 	bl	8011c4c <ucdr_alignment>
 800d682:	2104      	movs	r1, #4
 800d684:	1c65      	adds	r5, r4, #1
 800d686:	f1c4 0404 	rsb	r4, r4, #4
 800d68a:	4405      	add	r5, r0
 800d68c:	4628      	mov	r0, r5
 800d68e:	f004 fadd 	bl	8011c4c <ucdr_alignment>
 800d692:	2104      	movs	r1, #4
 800d694:	1846      	adds	r6, r0, r1
 800d696:	442e      	add	r6, r5
 800d698:	4630      	mov	r0, r6
 800d69a:	f004 fad7 	bl	8011c4c <ucdr_alignment>
 800d69e:	2104      	movs	r1, #4
 800d6a0:	1845      	adds	r5, r0, r1
 800d6a2:	442e      	add	r6, r5
 800d6a4:	4630      	mov	r0, r6
 800d6a6:	f004 fad1 	bl	8011c4c <ucdr_alignment>
 800d6aa:	2104      	movs	r1, #4
 800d6ac:	4408      	add	r0, r1
 800d6ae:	4406      	add	r6, r0
 800d6b0:	4630      	mov	r0, r6
 800d6b2:	f004 facb 	bl	8011c4c <ucdr_alignment>
 800d6b6:	2104      	movs	r1, #4
 800d6b8:	1845      	adds	r5, r0, r1
 800d6ba:	4435      	add	r5, r6
 800d6bc:	4628      	mov	r0, r5
 800d6be:	f004 fac5 	bl	8011c4c <ucdr_alignment>
 800d6c2:	2104      	movs	r1, #4
 800d6c4:	4408      	add	r0, r1
 800d6c6:	4405      	add	r5, r0
 800d6c8:	4628      	mov	r0, r5
 800d6ca:	f004 fabf 	bl	8011c4c <ucdr_alignment>
 800d6ce:	4420      	add	r0, r4
 800d6d0:	4428      	add	r0, r5
 800d6d2:	bd70      	pop	{r4, r5, r6, pc}

0800d6d4 <get_serialized_size_racs_services__srv__Setup_Request>:
 800d6d4:	b110      	cbz	r0, 800d6dc <get_serialized_size_racs_services__srv__Setup_Request+0x8>
 800d6d6:	4608      	mov	r0, r1
 800d6d8:	f7ff bfce 	b.w	800d678 <get_serialized_size_racs_services__srv__Setup_Request.part.0>
 800d6dc:	4770      	bx	lr
 800d6de:	bf00      	nop

0800d6e0 <_Setup_Request__get_serialized_size>:
 800d6e0:	b110      	cbz	r0, 800d6e8 <_Setup_Request__get_serialized_size+0x8>
 800d6e2:	2000      	movs	r0, #0
 800d6e4:	f7ff bfc8 	b.w	800d678 <get_serialized_size_racs_services__srv__Setup_Request.part.0>
 800d6e8:	4770      	bx	lr
 800d6ea:	bf00      	nop

0800d6ec <get_serialized_size_racs_services__srv__Setup_Response>:
 800d6ec:	b138      	cbz	r0, 800d6fe <get_serialized_size_racs_services__srv__Setup_Response+0x12>
 800d6ee:	b508      	push	{r3, lr}
 800d6f0:	460b      	mov	r3, r1
 800d6f2:	2101      	movs	r1, #1
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f004 faa9 	bl	8011c4c <ucdr_alignment>
 800d6fa:	3001      	adds	r0, #1
 800d6fc:	bd08      	pop	{r3, pc}
 800d6fe:	4770      	bx	lr

0800d700 <_Setup_Request__cdr_deserialize>:
 800d700:	b538      	push	{r3, r4, r5, lr}
 800d702:	460c      	mov	r4, r1
 800d704:	b309      	cbz	r1, 800d74a <_Setup_Request__cdr_deserialize+0x4a>
 800d706:	4605      	mov	r5, r0
 800d708:	f002 fe22 	bl	8010350 <ucdr_deserialize_uint8_t>
 800d70c:	1d21      	adds	r1, r4, #4
 800d70e:	4628      	mov	r0, r5
 800d710:	f004 f91e 	bl	8011950 <ucdr_deserialize_float>
 800d714:	f104 0108 	add.w	r1, r4, #8
 800d718:	4628      	mov	r0, r5
 800d71a:	f004 f919 	bl	8011950 <ucdr_deserialize_float>
 800d71e:	f104 010c 	add.w	r1, r4, #12
 800d722:	4628      	mov	r0, r5
 800d724:	f004 f914 	bl	8011950 <ucdr_deserialize_float>
 800d728:	f104 0110 	add.w	r1, r4, #16
 800d72c:	4628      	mov	r0, r5
 800d72e:	f004 f90f 	bl	8011950 <ucdr_deserialize_float>
 800d732:	f104 0114 	add.w	r1, r4, #20
 800d736:	4628      	mov	r0, r5
 800d738:	f004 f90a 	bl	8011950 <ucdr_deserialize_float>
 800d73c:	f104 0118 	add.w	r1, r4, #24
 800d740:	4628      	mov	r0, r5
 800d742:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d746:	f004 b903 	b.w	8011950 <ucdr_deserialize_float>
 800d74a:	4608      	mov	r0, r1
 800d74c:	bd38      	pop	{r3, r4, r5, pc}
 800d74e:	bf00      	nop

0800d750 <_Setup_Response__cdr_serialize>:
 800d750:	460a      	mov	r2, r1
 800d752:	b118      	cbz	r0, 800d75c <_Setup_Response__cdr_serialize+0xc>
 800d754:	7801      	ldrb	r1, [r0, #0]
 800d756:	4610      	mov	r0, r2
 800d758:	f002 bde4 	b.w	8010324 <ucdr_serialize_uint8_t>
 800d75c:	4770      	bx	lr
 800d75e:	bf00      	nop

0800d760 <_Setup_Request__cdr_serialize>:
 800d760:	b330      	cbz	r0, 800d7b0 <_Setup_Request__cdr_serialize+0x50>
 800d762:	b538      	push	{r3, r4, r5, lr}
 800d764:	460d      	mov	r5, r1
 800d766:	4604      	mov	r4, r0
 800d768:	7801      	ldrb	r1, [r0, #0]
 800d76a:	4628      	mov	r0, r5
 800d76c:	f002 fdda 	bl	8010324 <ucdr_serialize_uint8_t>
 800d770:	ed94 0a01 	vldr	s0, [r4, #4]
 800d774:	4628      	mov	r0, r5
 800d776:	f003 ffb9 	bl	80116ec <ucdr_serialize_float>
 800d77a:	ed94 0a02 	vldr	s0, [r4, #8]
 800d77e:	4628      	mov	r0, r5
 800d780:	f003 ffb4 	bl	80116ec <ucdr_serialize_float>
 800d784:	ed94 0a03 	vldr	s0, [r4, #12]
 800d788:	4628      	mov	r0, r5
 800d78a:	f003 ffaf 	bl	80116ec <ucdr_serialize_float>
 800d78e:	ed94 0a04 	vldr	s0, [r4, #16]
 800d792:	4628      	mov	r0, r5
 800d794:	f003 ffaa 	bl	80116ec <ucdr_serialize_float>
 800d798:	ed94 0a05 	vldr	s0, [r4, #20]
 800d79c:	4628      	mov	r0, r5
 800d79e:	f003 ffa5 	bl	80116ec <ucdr_serialize_float>
 800d7a2:	ed94 0a06 	vldr	s0, [r4, #24]
 800d7a6:	4628      	mov	r0, r5
 800d7a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7ac:	f003 bf9e 	b.w	80116ec <ucdr_serialize_float>
 800d7b0:	4770      	bx	lr
 800d7b2:	bf00      	nop

0800d7b4 <get_serialized_size_racs_services__srv__Setup_Event.part.0>:
 800d7b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7b8:	460e      	mov	r6, r1
 800d7ba:	4605      	mov	r5, r0
 800d7bc:	f002 f9c2 	bl	800fb44 <get_serialized_size_service_msgs__msg__ServiceEventInfo>
 800d7c0:	2104      	movs	r1, #4
 800d7c2:	eb06 0800 	add.w	r8, r6, r0
 800d7c6:	f8d5 902c 	ldr.w	r9, [r5, #44]	; 0x2c
 800d7ca:	4640      	mov	r0, r8
 800d7cc:	f004 fa3e 	bl	8011c4c <ucdr_alignment>
 800d7d0:	3004      	adds	r0, #4
 800d7d2:	4480      	add	r8, r0
 800d7d4:	f1b9 0f00 	cmp.w	r9, #0
 800d7d8:	d019      	beq.n	800d80e <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x5a>
 800d7da:	2700      	movs	r7, #0
 800d7dc:	f8df a07c 	ldr.w	sl, [pc, #124]	; 800d85c <get_serialized_size_racs_services__srv__Setup_Event.part.0+0xa8>
 800d7e0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800d7e2:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
 800d7e6:	f8da 3004 	ldr.w	r3, [sl, #4]
 800d7ea:	4641      	mov	r1, r8
 800d7ec:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800d7f0:	3701      	adds	r7, #1
 800d7f2:	695b      	ldr	r3, [r3, #20]
 800d7f4:	4798      	blx	r3
 800d7f6:	4604      	mov	r4, r0
 800d7f8:	4640      	mov	r0, r8
 800d7fa:	2c04      	cmp	r4, #4
 800d7fc:	4621      	mov	r1, r4
 800d7fe:	bf28      	it	cs
 800d800:	2104      	movcs	r1, #4
 800d802:	f004 fa23 	bl	8011c4c <ucdr_alignment>
 800d806:	45b9      	cmp	r9, r7
 800d808:	4420      	add	r0, r4
 800d80a:	4480      	add	r8, r0
 800d80c:	d1e8      	bne.n	800d7e0 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x2c>
 800d80e:	4640      	mov	r0, r8
 800d810:	2104      	movs	r1, #4
 800d812:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800d814:	f004 fa1a 	bl	8011c4c <ucdr_alignment>
 800d818:	4480      	add	r8, r0
 800d81a:	f108 0804 	add.w	r8, r8, #4
 800d81e:	b1c7      	cbz	r7, 800d852 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x9e>
 800d820:	f04f 0900 	mov.w	r9, #0
 800d824:	f8df a038 	ldr.w	sl, [pc, #56]	; 800d860 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0xac>
 800d828:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800d82a:	4641      	mov	r1, r8
 800d82c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800d830:	4448      	add	r0, r9
 800d832:	f109 0901 	add.w	r9, r9, #1
 800d836:	695b      	ldr	r3, [r3, #20]
 800d838:	4798      	blx	r3
 800d83a:	4604      	mov	r4, r0
 800d83c:	4640      	mov	r0, r8
 800d83e:	2c04      	cmp	r4, #4
 800d840:	4621      	mov	r1, r4
 800d842:	bf28      	it	cs
 800d844:	2104      	movcs	r1, #4
 800d846:	f004 fa01 	bl	8011c4c <ucdr_alignment>
 800d84a:	454f      	cmp	r7, r9
 800d84c:	4420      	add	r0, r4
 800d84e:	4480      	add	r8, r0
 800d850:	d1ea      	bne.n	800d828 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x74>
 800d852:	eba8 0006 	sub.w	r0, r8, r6
 800d856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d85a:	bf00      	nop
 800d85c:	20000a50 	.word	0x20000a50
 800d860:	20000a68 	.word	0x20000a68

0800d864 <get_serialized_size_racs_services__srv__Setup_Event>:
 800d864:	b108      	cbz	r0, 800d86a <get_serialized_size_racs_services__srv__Setup_Event+0x6>
 800d866:	f7ff bfa5 	b.w	800d7b4 <get_serialized_size_racs_services__srv__Setup_Event.part.0>
 800d86a:	4770      	bx	lr

0800d86c <_Setup_Event__get_serialized_size>:
 800d86c:	b110      	cbz	r0, 800d874 <_Setup_Event__get_serialized_size+0x8>
 800d86e:	2100      	movs	r1, #0
 800d870:	f7ff bfa0 	b.w	800d7b4 <get_serialized_size_racs_services__srv__Setup_Event.part.0>
 800d874:	4770      	bx	lr
 800d876:	bf00      	nop

0800d878 <_Setup_Event__cdr_deserialize>:
 800d878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d87c:	460c      	mov	r4, r1
 800d87e:	b082      	sub	sp, #8
 800d880:	2900      	cmp	r1, #0
 800d882:	d045      	beq.n	800d910 <_Setup_Event__cdr_deserialize+0x98>
 800d884:	4607      	mov	r7, r0
 800d886:	f002 fa1d 	bl	800fcc4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800d88a:	4603      	mov	r3, r0
 800d88c:	4621      	mov	r1, r4
 800d88e:	4638      	mov	r0, r7
 800d890:	685b      	ldr	r3, [r3, #4]
 800d892:	68db      	ldr	r3, [r3, #12]
 800d894:	4798      	blx	r3
 800d896:	4638      	mov	r0, r7
 800d898:	a901      	add	r1, sp, #4
 800d89a:	f003 f889 	bl	80109b0 <ucdr_deserialize_uint32_t>
 800d89e:	9b01      	ldr	r3, [sp, #4]
 800d8a0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d8a2:	429a      	cmp	r2, r3
 800d8a4:	d330      	bcc.n	800d908 <_Setup_Event__cdr_deserialize+0x90>
 800d8a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d8a8:	b193      	cbz	r3, 800d8d0 <_Setup_Event__cdr_deserialize+0x58>
 800d8aa:	2500      	movs	r5, #0
 800d8ac:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800d91c <_Setup_Event__cdr_deserialize+0xa4>
 800d8b0:	462e      	mov	r6, r5
 800d8b2:	e002      	b.n	800d8ba <_Setup_Event__cdr_deserialize+0x42>
 800d8b4:	9b01      	ldr	r3, [sp, #4]
 800d8b6:	429e      	cmp	r6, r3
 800d8b8:	d20a      	bcs.n	800d8d0 <_Setup_Event__cdr_deserialize+0x58>
 800d8ba:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800d8bc:	4638      	mov	r0, r7
 800d8be:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d8c2:	3601      	adds	r6, #1
 800d8c4:	4429      	add	r1, r5
 800d8c6:	351c      	adds	r5, #28
 800d8c8:	68db      	ldr	r3, [r3, #12]
 800d8ca:	4798      	blx	r3
 800d8cc:	2800      	cmp	r0, #0
 800d8ce:	d1f1      	bne.n	800d8b4 <_Setup_Event__cdr_deserialize+0x3c>
 800d8d0:	a901      	add	r1, sp, #4
 800d8d2:	4638      	mov	r0, r7
 800d8d4:	f003 f86c 	bl	80109b0 <ucdr_deserialize_uint32_t>
 800d8d8:	9b01      	ldr	r3, [sp, #4]
 800d8da:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800d8dc:	429a      	cmp	r2, r3
 800d8de:	d313      	bcc.n	800d908 <_Setup_Event__cdr_deserialize+0x90>
 800d8e0:	63a3      	str	r3, [r4, #56]	; 0x38
 800d8e2:	b193      	cbz	r3, 800d90a <_Setup_Event__cdr_deserialize+0x92>
 800d8e4:	2500      	movs	r5, #0
 800d8e6:	4e0c      	ldr	r6, [pc, #48]	; (800d918 <_Setup_Event__cdr_deserialize+0xa0>)
 800d8e8:	e002      	b.n	800d8f0 <_Setup_Event__cdr_deserialize+0x78>
 800d8ea:	9b01      	ldr	r3, [sp, #4]
 800d8ec:	429d      	cmp	r5, r3
 800d8ee:	d20c      	bcs.n	800d90a <_Setup_Event__cdr_deserialize+0x92>
 800d8f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d8f2:	4638      	mov	r0, r7
 800d8f4:	6873      	ldr	r3, [r6, #4]
 800d8f6:	4429      	add	r1, r5
 800d8f8:	3501      	adds	r5, #1
 800d8fa:	68db      	ldr	r3, [r3, #12]
 800d8fc:	4798      	blx	r3
 800d8fe:	2800      	cmp	r0, #0
 800d900:	d1f3      	bne.n	800d8ea <_Setup_Event__cdr_deserialize+0x72>
 800d902:	b002      	add	sp, #8
 800d904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d908:	2000      	movs	r0, #0
 800d90a:	b002      	add	sp, #8
 800d90c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d910:	4608      	mov	r0, r1
 800d912:	b002      	add	sp, #8
 800d914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d918:	20000a68 	.word	0x20000a68
 800d91c:	20000a50 	.word	0x20000a50

0800d920 <_Setup_Event__cdr_serialize>:
 800d920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d924:	2800      	cmp	r0, #0
 800d926:	d03b      	beq.n	800d9a0 <_Setup_Event__cdr_serialize+0x80>
 800d928:	4605      	mov	r5, r0
 800d92a:	460e      	mov	r6, r1
 800d92c:	f002 f9ca 	bl	800fcc4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800d930:	4603      	mov	r3, r0
 800d932:	4631      	mov	r1, r6
 800d934:	4628      	mov	r0, r5
 800d936:	685b      	ldr	r3, [r3, #4]
 800d938:	689b      	ldr	r3, [r3, #8]
 800d93a:	4798      	blx	r3
 800d93c:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 800d93e:	4630      	mov	r0, r6
 800d940:	4639      	mov	r1, r7
 800d942:	f002 ff05 	bl	8010750 <ucdr_serialize_uint32_t>
 800d946:	b198      	cbz	r0, 800d970 <_Setup_Event__cdr_serialize+0x50>
 800d948:	b197      	cbz	r7, 800d970 <_Setup_Event__cdr_serialize+0x50>
 800d94a:	2400      	movs	r4, #0
 800d94c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800d9ac <_Setup_Event__cdr_serialize+0x8c>
 800d950:	e001      	b.n	800d956 <_Setup_Event__cdr_serialize+0x36>
 800d952:	42a7      	cmp	r7, r4
 800d954:	d00c      	beq.n	800d970 <_Setup_Event__cdr_serialize+0x50>
 800d956:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 800d95a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800d95c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d960:	4631      	mov	r1, r6
 800d962:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800d966:	3401      	adds	r4, #1
 800d968:	689b      	ldr	r3, [r3, #8]
 800d96a:	4798      	blx	r3
 800d96c:	2800      	cmp	r0, #0
 800d96e:	d1f0      	bne.n	800d952 <_Setup_Event__cdr_serialize+0x32>
 800d970:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800d972:	4630      	mov	r0, r6
 800d974:	4639      	mov	r1, r7
 800d976:	f002 feeb 	bl	8010750 <ucdr_serialize_uint32_t>
 800d97a:	4680      	mov	r8, r0
 800d97c:	b180      	cbz	r0, 800d9a0 <_Setup_Event__cdr_serialize+0x80>
 800d97e:	b18f      	cbz	r7, 800d9a4 <_Setup_Event__cdr_serialize+0x84>
 800d980:	2400      	movs	r4, #0
 800d982:	f8df 902c 	ldr.w	r9, [pc, #44]	; 800d9b0 <_Setup_Event__cdr_serialize+0x90>
 800d986:	e001      	b.n	800d98c <_Setup_Event__cdr_serialize+0x6c>
 800d988:	42a7      	cmp	r7, r4
 800d98a:	d00b      	beq.n	800d9a4 <_Setup_Event__cdr_serialize+0x84>
 800d98c:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800d98e:	4631      	mov	r1, r6
 800d990:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800d994:	4420      	add	r0, r4
 800d996:	3401      	adds	r4, #1
 800d998:	689b      	ldr	r3, [r3, #8]
 800d99a:	4798      	blx	r3
 800d99c:	2800      	cmp	r0, #0
 800d99e:	d1f3      	bne.n	800d988 <_Setup_Event__cdr_serialize+0x68>
 800d9a0:	f04f 0800 	mov.w	r8, #0
 800d9a4:	4640      	mov	r0, r8
 800d9a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9aa:	bf00      	nop
 800d9ac:	20000a50 	.word	0x20000a50
 800d9b0:	20000a68 	.word	0x20000a68

0800d9b4 <_Setup_Response__get_serialized_size>:
 800d9b4:	b130      	cbz	r0, 800d9c4 <_Setup_Response__get_serialized_size+0x10>
 800d9b6:	2101      	movs	r1, #1
 800d9b8:	2000      	movs	r0, #0
 800d9ba:	b508      	push	{r3, lr}
 800d9bc:	f004 f946 	bl	8011c4c <ucdr_alignment>
 800d9c0:	3001      	adds	r0, #1
 800d9c2:	bd08      	pop	{r3, pc}
 800d9c4:	4770      	bx	lr
 800d9c6:	bf00      	nop

0800d9c8 <max_serialized_size_racs_services__srv__Setup_Request>:
 800d9c8:	b570      	push	{r4, r5, r6, lr}
 800d9ca:	460c      	mov	r4, r1
 800d9cc:	2301      	movs	r3, #1
 800d9ce:	1c65      	adds	r5, r4, #1
 800d9d0:	4619      	mov	r1, r3
 800d9d2:	7003      	strb	r3, [r0, #0]
 800d9d4:	4620      	mov	r0, r4
 800d9d6:	f004 f939 	bl	8011c4c <ucdr_alignment>
 800d9da:	4405      	add	r5, r0
 800d9dc:	2104      	movs	r1, #4
 800d9de:	f1c4 0404 	rsb	r4, r4, #4
 800d9e2:	4628      	mov	r0, r5
 800d9e4:	f004 f932 	bl	8011c4c <ucdr_alignment>
 800d9e8:	2104      	movs	r1, #4
 800d9ea:	1846      	adds	r6, r0, r1
 800d9ec:	442e      	add	r6, r5
 800d9ee:	4630      	mov	r0, r6
 800d9f0:	f004 f92c 	bl	8011c4c <ucdr_alignment>
 800d9f4:	2104      	movs	r1, #4
 800d9f6:	1845      	adds	r5, r0, r1
 800d9f8:	442e      	add	r6, r5
 800d9fa:	4630      	mov	r0, r6
 800d9fc:	f004 f926 	bl	8011c4c <ucdr_alignment>
 800da00:	2104      	movs	r1, #4
 800da02:	4408      	add	r0, r1
 800da04:	4406      	add	r6, r0
 800da06:	4630      	mov	r0, r6
 800da08:	f004 f920 	bl	8011c4c <ucdr_alignment>
 800da0c:	2104      	movs	r1, #4
 800da0e:	1845      	adds	r5, r0, r1
 800da10:	4435      	add	r5, r6
 800da12:	4628      	mov	r0, r5
 800da14:	f004 f91a 	bl	8011c4c <ucdr_alignment>
 800da18:	2104      	movs	r1, #4
 800da1a:	4408      	add	r0, r1
 800da1c:	4405      	add	r5, r0
 800da1e:	4628      	mov	r0, r5
 800da20:	f004 f914 	bl	8011c4c <ucdr_alignment>
 800da24:	4420      	add	r0, r4
 800da26:	4428      	add	r0, r5
 800da28:	bd70      	pop	{r4, r5, r6, pc}
 800da2a:	bf00      	nop

0800da2c <_Setup_Request__max_serialized_size>:
 800da2c:	b500      	push	{lr}
 800da2e:	b083      	sub	sp, #12
 800da30:	2100      	movs	r1, #0
 800da32:	f10d 0007 	add.w	r0, sp, #7
 800da36:	f7ff ffc7 	bl	800d9c8 <max_serialized_size_racs_services__srv__Setup_Request>
 800da3a:	b003      	add	sp, #12
 800da3c:	f85d fb04 	ldr.w	pc, [sp], #4

0800da40 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Event>:
 800da40:	4800      	ldr	r0, [pc, #0]	; (800da44 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x4>)
 800da42:	4770      	bx	lr
 800da44:	20000a38 	.word	0x20000a38

0800da48 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Setup>:
 800da48:	4800      	ldr	r0, [pc, #0]	; (800da4c <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Setup+0x4>)
 800da4a:	4770      	bx	lr
 800da4c:	20000a0c 	.word	0x20000a0c

0800da50 <rcl_get_zero_initialized_publisher>:
 800da50:	4b01      	ldr	r3, [pc, #4]	; (800da58 <rcl_get_zero_initialized_publisher+0x8>)
 800da52:	6818      	ldr	r0, [r3, #0]
 800da54:	4770      	bx	lr
 800da56:	bf00      	nop
 800da58:	080206f8 	.word	0x080206f8

0800da5c <rcl_publisher_init>:
 800da5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da60:	b088      	sub	sp, #32
 800da62:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800da64:	2e00      	cmp	r6, #0
 800da66:	d06c      	beq.n	800db42 <rcl_publisher_init+0xe6>
 800da68:	f106 0a50 	add.w	sl, r6, #80	; 0x50
 800da6c:	4605      	mov	r5, r0
 800da6e:	460f      	mov	r7, r1
 800da70:	4690      	mov	r8, r2
 800da72:	4650      	mov	r0, sl
 800da74:	4699      	mov	r9, r3
 800da76:	f001 f96b 	bl	800ed50 <rcutils_allocator_is_valid>
 800da7a:	f080 0401 	eor.w	r4, r0, #1
 800da7e:	b2e4      	uxtb	r4, r4
 800da80:	2c00      	cmp	r4, #0
 800da82:	d15e      	bne.n	800db42 <rcl_publisher_init+0xe6>
 800da84:	2d00      	cmp	r5, #0
 800da86:	d05c      	beq.n	800db42 <rcl_publisher_init+0xe6>
 800da88:	682b      	ldr	r3, [r5, #0]
 800da8a:	b123      	cbz	r3, 800da96 <rcl_publisher_init+0x3a>
 800da8c:	2464      	movs	r4, #100	; 0x64
 800da8e:	4620      	mov	r0, r4
 800da90:	b008      	add	sp, #32
 800da92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da96:	4638      	mov	r0, r7
 800da98:	f008 fc32 	bl	8016300 <rcl_node_is_valid>
 800da9c:	2800      	cmp	r0, #0
 800da9e:	d055      	beq.n	800db4c <rcl_publisher_init+0xf0>
 800daa0:	f1b8 0f00 	cmp.w	r8, #0
 800daa4:	d04d      	beq.n	800db42 <rcl_publisher_init+0xe6>
 800daa6:	fab9 f389 	clz	r3, r9
 800daaa:	095b      	lsrs	r3, r3, #5
 800daac:	f1b9 0f00 	cmp.w	r9, #0
 800dab0:	d047      	beq.n	800db42 <rcl_publisher_init+0xe6>
 800dab2:	aa07      	add	r2, sp, #28
 800dab4:	9307      	str	r3, [sp, #28]
 800dab6:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800daba:	f106 0358 	add.w	r3, r6, #88	; 0x58
 800dabe:	9205      	str	r2, [sp, #20]
 800dac0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dac4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800dac8:	4649      	mov	r1, r9
 800daca:	4638      	mov	r0, r7
 800dacc:	e89a 000c 	ldmia.w	sl, {r2, r3}
 800dad0:	f008 fc8e 	bl	80163f0 <rcl_node_resolve_name>
 800dad4:	2800      	cmp	r0, #0
 800dad6:	d150      	bne.n	800db7a <rcl_publisher_init+0x11e>
 800dad8:	21c8      	movs	r1, #200	; 0xc8
 800dada:	2001      	movs	r0, #1
 800dadc:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	; 0x5c
 800dae0:	4798      	blx	r3
 800dae2:	6028      	str	r0, [r5, #0]
 800dae4:	2800      	cmp	r0, #0
 800dae6:	d050      	beq.n	800db8a <rcl_publisher_init+0x12e>
 800dae8:	4638      	mov	r0, r7
 800daea:	f008 fc2b 	bl	8016344 <rcl_node_get_rmw_handle>
 800daee:	f106 0364 	add.w	r3, r6, #100	; 0x64
 800daf2:	4641      	mov	r1, r8
 800daf4:	9a07      	ldr	r2, [sp, #28]
 800daf6:	9300      	str	r3, [sp, #0]
 800daf8:	4633      	mov	r3, r6
 800dafa:	682c      	ldr	r4, [r5, #0]
 800dafc:	f001 fa36 	bl	800ef6c <rmw_create_publisher>
 800db00:	682b      	ldr	r3, [r5, #0]
 800db02:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 800db06:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800db0a:	b370      	cbz	r0, 800db6a <rcl_publisher_init+0x10e>
 800db0c:	f103 0170 	add.w	r1, r3, #112	; 0x70
 800db10:	f001 fb10 	bl	800f134 <rmw_publisher_get_actual_qos>
 800db14:	682b      	ldr	r3, [r5, #0]
 800db16:	4604      	mov	r4, r0
 800db18:	b9d0      	cbnz	r0, 800db50 <rcl_publisher_init+0xf4>
 800db1a:	f896 2048 	ldrb.w	r2, [r6, #72]	; 0x48
 800db1e:	4631      	mov	r1, r6
 800db20:	4618      	mov	r0, r3
 800db22:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 800db26:	2270      	movs	r2, #112	; 0x70
 800db28:	f010 ffe1 	bl	801eaee <memcpy>
 800db2c:	683a      	ldr	r2, [r7, #0]
 800db2e:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 800db32:	9807      	ldr	r0, [sp, #28]
 800db34:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800db36:	6e31      	ldr	r1, [r6, #96]	; 0x60
 800db38:	4798      	blx	r3
 800db3a:	4620      	mov	r0, r4
 800db3c:	b008      	add	sp, #32
 800db3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db42:	240b      	movs	r4, #11
 800db44:	4620      	mov	r0, r4
 800db46:	b008      	add	sp, #32
 800db48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db4c:	24c8      	movs	r4, #200	; 0xc8
 800db4e:	e79e      	b.n	800da8e <rcl_publisher_init+0x32>
 800db50:	b1cb      	cbz	r3, 800db86 <rcl_publisher_init+0x12a>
 800db52:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800db56:	b142      	cbz	r2, 800db6a <rcl_publisher_init+0x10e>
 800db58:	4638      	mov	r0, r7
 800db5a:	f008 fbf3 	bl	8016344 <rcl_node_get_rmw_handle>
 800db5e:	682b      	ldr	r3, [r5, #0]
 800db60:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800db64:	f001 fafa 	bl	800f15c <rmw_destroy_publisher>
 800db68:	682b      	ldr	r3, [r5, #0]
 800db6a:	4618      	mov	r0, r3
 800db6c:	6d72      	ldr	r2, [r6, #84]	; 0x54
 800db6e:	6e31      	ldr	r1, [r6, #96]	; 0x60
 800db70:	2401      	movs	r4, #1
 800db72:	4790      	blx	r2
 800db74:	2300      	movs	r3, #0
 800db76:	602b      	str	r3, [r5, #0]
 800db78:	e7db      	b.n	800db32 <rcl_publisher_init+0xd6>
 800db7a:	2867      	cmp	r0, #103	; 0x67
 800db7c:	d007      	beq.n	800db8e <rcl_publisher_init+0x132>
 800db7e:	2869      	cmp	r0, #105	; 0x69
 800db80:	d005      	beq.n	800db8e <rcl_publisher_init+0x132>
 800db82:	280a      	cmp	r0, #10
 800db84:	d001      	beq.n	800db8a <rcl_publisher_init+0x12e>
 800db86:	2401      	movs	r4, #1
 800db88:	e7d3      	b.n	800db32 <rcl_publisher_init+0xd6>
 800db8a:	240a      	movs	r4, #10
 800db8c:	e7d1      	b.n	800db32 <rcl_publisher_init+0xd6>
 800db8e:	2467      	movs	r4, #103	; 0x67
 800db90:	e7cf      	b.n	800db32 <rcl_publisher_init+0xd6>
 800db92:	bf00      	nop

0800db94 <rcl_publisher_get_default_options>:
 800db94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db96:	4d1d      	ldr	r5, [pc, #116]	; (800dc0c <rcl_publisher_get_default_options+0x78>)
 800db98:	b08b      	sub	sp, #44	; 0x2c
 800db9a:	2250      	movs	r2, #80	; 0x50
 800db9c:	491c      	ldr	r1, [pc, #112]	; (800dc10 <rcl_publisher_get_default_options+0x7c>)
 800db9e:	4604      	mov	r4, r0
 800dba0:	4628      	mov	r0, r5
 800dba2:	f010 ffa4 	bl	801eaee <memcpy>
 800dba6:	a802      	add	r0, sp, #8
 800dba8:	f001 f8c4 	bl	800ed34 <rcutils_get_default_allocator>
 800dbac:	f10d 0c08 	add.w	ip, sp, #8
 800dbb0:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 800dbb4:	466e      	mov	r6, sp
 800dbb6:	2700      	movs	r7, #0
 800dbb8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dbbc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800dbc0:	f8dc 3000 	ldr.w	r3, [ip]
 800dbc4:	4630      	mov	r0, r6
 800dbc6:	f8ce 3000 	str.w	r3, [lr]
 800dbca:	f001 f951 	bl	800ee70 <rmw_get_default_publisher_options>
 800dbce:	f105 0364 	add.w	r3, r5, #100	; 0x64
 800dbd2:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
 800dbd6:	e896 0003 	ldmia.w	r6, {r0, r1}
 800dbda:	e883 0003 	stmia.w	r3, {r0, r1}
 800dbde:	f10d 0027 	add.w	r0, sp, #39	; 0x27
 800dbe2:	f008 fbb5 	bl	8016350 <rcl_get_disable_loaned_message>
 800dbe6:	b958      	cbnz	r0, 800dc00 <rcl_publisher_get_default_options+0x6c>
 800dbe8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800dbec:	f885 306c 	strb.w	r3, [r5, #108]	; 0x6c
 800dbf0:	2270      	movs	r2, #112	; 0x70
 800dbf2:	4906      	ldr	r1, [pc, #24]	; (800dc0c <rcl_publisher_get_default_options+0x78>)
 800dbf4:	4620      	mov	r0, r4
 800dbf6:	f010 ff7a 	bl	801eaee <memcpy>
 800dbfa:	4620      	mov	r0, r4
 800dbfc:	b00b      	add	sp, #44	; 0x2c
 800dbfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc00:	f001 f8ca 	bl	800ed98 <rcutils_reset_error>
 800dc04:	f885 706c 	strb.w	r7, [r5, #108]	; 0x6c
 800dc08:	e7f2      	b.n	800dbf0 <rcl_publisher_get_default_options+0x5c>
 800dc0a:	bf00      	nop
 800dc0c:	2000ca18 	.word	0x2000ca18
 800dc10:	08020700 	.word	0x08020700

0800dc14 <rcl_publish>:
 800dc14:	b1f8      	cbz	r0, 800dc56 <rcl_publish+0x42>
 800dc16:	6803      	ldr	r3, [r0, #0]
 800dc18:	b570      	push	{r4, r5, r6, lr}
 800dc1a:	4604      	mov	r4, r0
 800dc1c:	b1b3      	cbz	r3, 800dc4c <rcl_publish+0x38>
 800dc1e:	4616      	mov	r6, r2
 800dc20:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800dc24:	b192      	cbz	r2, 800dc4c <rcl_publish+0x38>
 800dc26:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800dc2a:	460d      	mov	r5, r1
 800dc2c:	f007 ff6c 	bl	8015b08 <rcl_context_is_valid>
 800dc30:	b160      	cbz	r0, 800dc4c <rcl_publish+0x38>
 800dc32:	6823      	ldr	r3, [r4, #0]
 800dc34:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800dc38:	b140      	cbz	r0, 800dc4c <rcl_publish+0x38>
 800dc3a:	b155      	cbz	r5, 800dc52 <rcl_publish+0x3e>
 800dc3c:	4632      	mov	r2, r6
 800dc3e:	4629      	mov	r1, r5
 800dc40:	f001 f934 	bl	800eeac <rmw_publish>
 800dc44:	3800      	subs	r0, #0
 800dc46:	bf18      	it	ne
 800dc48:	2001      	movne	r0, #1
 800dc4a:	bd70      	pop	{r4, r5, r6, pc}
 800dc4c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800dc50:	bd70      	pop	{r4, r5, r6, pc}
 800dc52:	200b      	movs	r0, #11
 800dc54:	bd70      	pop	{r4, r5, r6, pc}
 800dc56:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800dc5a:	4770      	bx	lr

0800dc5c <rcl_publisher_is_valid>:
 800dc5c:	b1a0      	cbz	r0, 800dc88 <rcl_publisher_is_valid+0x2c>
 800dc5e:	6803      	ldr	r3, [r0, #0]
 800dc60:	b510      	push	{r4, lr}
 800dc62:	4604      	mov	r4, r0
 800dc64:	b173      	cbz	r3, 800dc84 <rcl_publisher_is_valid+0x28>
 800dc66:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800dc6a:	b15a      	cbz	r2, 800dc84 <rcl_publisher_is_valid+0x28>
 800dc6c:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800dc70:	f007 ff4a 	bl	8015b08 <rcl_context_is_valid>
 800dc74:	b130      	cbz	r0, 800dc84 <rcl_publisher_is_valid+0x28>
 800dc76:	6823      	ldr	r3, [r4, #0]
 800dc78:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800dc7c:	3800      	subs	r0, #0
 800dc7e:	bf18      	it	ne
 800dc80:	2001      	movne	r0, #1
 800dc82:	bd10      	pop	{r4, pc}
 800dc84:	2000      	movs	r0, #0
 800dc86:	bd10      	pop	{r4, pc}
 800dc88:	2000      	movs	r0, #0
 800dc8a:	4770      	bx	lr

0800dc8c <rcl_publisher_is_valid_except_context>:
 800dc8c:	b130      	cbz	r0, 800dc9c <rcl_publisher_is_valid_except_context+0x10>
 800dc8e:	6800      	ldr	r0, [r0, #0]
 800dc90:	b120      	cbz	r0, 800dc9c <rcl_publisher_is_valid_except_context+0x10>
 800dc92:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 800dc96:	3800      	subs	r0, #0
 800dc98:	bf18      	it	ne
 800dc9a:	2001      	movne	r0, #1
 800dc9c:	4770      	bx	lr
 800dc9e:	bf00      	nop

0800dca0 <_rclc_check_for_new_data>:
 800dca0:	2800      	cmp	r0, #0
 800dca2:	d046      	beq.n	800dd32 <_rclc_check_for_new_data+0x92>
 800dca4:	4603      	mov	r3, r0
 800dca6:	b530      	push	{r4, r5, lr}
 800dca8:	7802      	ldrb	r2, [r0, #0]
 800dcaa:	b085      	sub	sp, #20
 800dcac:	2a0a      	cmp	r2, #10
 800dcae:	d842      	bhi.n	800dd36 <_rclc_check_for_new_data+0x96>
 800dcb0:	e8df f002 	tbb	[pc, r2]
 800dcb4:	14181212 	.word	0x14181212
 800dcb8:	06060614 	.word	0x06060614
 800dcbc:	2e1a      	.short	0x2e1a
 800dcbe:	16          	.byte	0x16
 800dcbf:	00          	.byte	0x00
 800dcc0:	6a0a      	ldr	r2, [r1, #32]
 800dcc2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800dcc4:	2000      	movs	r0, #0
 800dcc6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800dcca:	1a12      	subs	r2, r2, r0
 800dccc:	bf18      	it	ne
 800dcce:	2201      	movne	r2, #1
 800dcd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800dcd4:	b005      	add	sp, #20
 800dcd6:	bd30      	pop	{r4, r5, pc}
 800dcd8:	680a      	ldr	r2, [r1, #0]
 800dcda:	e7f2      	b.n	800dcc2 <_rclc_check_for_new_data+0x22>
 800dcdc:	698a      	ldr	r2, [r1, #24]
 800dcde:	e7f0      	b.n	800dcc2 <_rclc_check_for_new_data+0x22>
 800dce0:	688a      	ldr	r2, [r1, #8]
 800dce2:	e7ee      	b.n	800dcc2 <_rclc_check_for_new_data+0x22>
 800dce4:	690a      	ldr	r2, [r1, #16]
 800dce6:	e7ec      	b.n	800dcc2 <_rclc_check_for_new_data+0x22>
 800dce8:	685c      	ldr	r4, [r3, #4]
 800dcea:	4608      	mov	r0, r1
 800dcec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dcf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dcf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dcf8:	f104 0110 	add.w	r1, r4, #16
 800dcfc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800dd00:	9500      	str	r5, [sp, #0]
 800dd02:	f104 0341 	add.w	r3, r4, #65	; 0x41
 800dd06:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800dd0a:	f00a fc4d 	bl	80185a8 <rcl_action_client_wait_set_get_entities_ready>
 800dd0e:	e7e1      	b.n	800dcd4 <_rclc_check_for_new_data+0x34>
 800dd10:	685c      	ldr	r4, [r3, #4]
 800dd12:	4608      	mov	r0, r1
 800dd14:	f104 0222 	add.w	r2, r4, #34	; 0x22
 800dd18:	f104 0123 	add.w	r1, r4, #35	; 0x23
 800dd1c:	f104 0321 	add.w	r3, r4, #33	; 0x21
 800dd20:	e9cd 2100 	strd	r2, r1, [sp]
 800dd24:	f104 0220 	add.w	r2, r4, #32
 800dd28:	f104 0110 	add.w	r1, r4, #16
 800dd2c:	f00a fe54 	bl	80189d8 <rcl_action_server_wait_set_get_entities_ready>
 800dd30:	e7d0      	b.n	800dcd4 <_rclc_check_for_new_data+0x34>
 800dd32:	200b      	movs	r0, #11
 800dd34:	4770      	bx	lr
 800dd36:	2001      	movs	r0, #1
 800dd38:	e7cc      	b.n	800dcd4 <_rclc_check_for_new_data+0x34>
 800dd3a:	bf00      	nop

0800dd3c <_rclc_take_new_data>:
 800dd3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd3e:	b099      	sub	sp, #100	; 0x64
 800dd40:	2800      	cmp	r0, #0
 800dd42:	f000 8088 	beq.w	800de56 <_rclc_take_new_data+0x11a>
 800dd46:	7803      	ldrb	r3, [r0, #0]
 800dd48:	4604      	mov	r4, r0
 800dd4a:	2b0a      	cmp	r3, #10
 800dd4c:	f200 8167 	bhi.w	800e01e <_rclc_take_new_data+0x2e2>
 800dd50:	e8df f003 	tbb	[pc, r3]
 800dd54:	44152d2d 	.word	0x44152d2d
 800dd58:	19191944 	.word	0x19191944
 800dd5c:	065a      	.short	0x065a
 800dd5e:	15          	.byte	0x15
 800dd5f:	00          	.byte	0x00
 800dd60:	6840      	ldr	r0, [r0, #4]
 800dd62:	f890 3020 	ldrb.w	r3, [r0, #32]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	f040 80b2 	bne.w	800ded0 <_rclc_take_new_data+0x194>
 800dd6c:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	f040 80e4 	bne.w	800df3e <_rclc_take_new_data+0x202>
 800dd76:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d16f      	bne.n	800de5e <_rclc_take_new_data+0x122>
 800dd7e:	2500      	movs	r5, #0
 800dd80:	4628      	mov	r0, r5
 800dd82:	b019      	add	sp, #100	; 0x64
 800dd84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd86:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800dd88:	6a0b      	ldr	r3, [r1, #32]
 800dd8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d0f5      	beq.n	800dd7e <_rclc_take_new_data+0x42>
 800dd92:	6882      	ldr	r2, [r0, #8]
 800dd94:	f100 0110 	add.w	r1, r0, #16
 800dd98:	6840      	ldr	r0, [r0, #4]
 800dd9a:	f008 fdd5 	bl	8016948 <rcl_take_request>
 800dd9e:	4605      	mov	r5, r0
 800dda0:	2800      	cmp	r0, #0
 800dda2:	d0ec      	beq.n	800dd7e <_rclc_take_new_data+0x42>
 800dda4:	f240 2359 	movw	r3, #601	; 0x259
 800dda8:	4298      	cmp	r0, r3
 800ddaa:	d013      	beq.n	800ddd4 <_rclc_take_new_data+0x98>
 800ddac:	e029      	b.n	800de02 <_rclc_take_new_data+0xc6>
 800ddae:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800ddb0:	680b      	ldr	r3, [r1, #0]
 800ddb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d0e1      	beq.n	800dd7e <_rclc_take_new_data+0x42>
 800ddba:	2300      	movs	r3, #0
 800ddbc:	aa0a      	add	r2, sp, #40	; 0x28
 800ddbe:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800ddc2:	f008 ffcf 	bl	8016d64 <rcl_take>
 800ddc6:	4605      	mov	r5, r0
 800ddc8:	2800      	cmp	r0, #0
 800ddca:	d0d9      	beq.n	800dd80 <_rclc_take_new_data+0x44>
 800ddcc:	f240 1391 	movw	r3, #401	; 0x191
 800ddd0:	4298      	cmp	r0, r3
 800ddd2:	d116      	bne.n	800de02 <_rclc_take_new_data+0xc6>
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800ddda:	e7d1      	b.n	800dd80 <_rclc_take_new_data+0x44>
 800dddc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800ddde:	698b      	ldr	r3, [r1, #24]
 800dde0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d0ca      	beq.n	800dd7e <_rclc_take_new_data+0x42>
 800dde8:	6882      	ldr	r2, [r0, #8]
 800ddea:	f100 0110 	add.w	r1, r0, #16
 800ddee:	6840      	ldr	r0, [r0, #4]
 800ddf0:	f007 fdfa 	bl	80159e8 <rcl_take_response>
 800ddf4:	4605      	mov	r5, r0
 800ddf6:	2800      	cmp	r0, #0
 800ddf8:	d0c1      	beq.n	800dd7e <_rclc_take_new_data+0x42>
 800ddfa:	f240 13f5 	movw	r3, #501	; 0x1f5
 800ddfe:	4298      	cmp	r0, r3
 800de00:	d0be      	beq.n	800dd80 <_rclc_take_new_data+0x44>
 800de02:	f000 ffc9 	bl	800ed98 <rcutils_reset_error>
 800de06:	e7bb      	b.n	800dd80 <_rclc_take_new_data+0x44>
 800de08:	6840      	ldr	r0, [r0, #4]
 800de0a:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d17d      	bne.n	800df0e <_rclc_take_new_data+0x1d2>
 800de12:	69c3      	ldr	r3, [r0, #28]
 800de14:	b11b      	cbz	r3, 800de1e <_rclc_take_new_data+0xe2>
 800de16:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d144      	bne.n	800dea8 <_rclc_take_new_data+0x16c>
 800de1e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800de22:	2b00      	cmp	r3, #0
 800de24:	f040 80ac 	bne.w	800df80 <_rclc_take_new_data+0x244>
 800de28:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d0a6      	beq.n	800dd7e <_rclc_take_new_data+0x42>
 800de30:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800de32:	a90a      	add	r1, sp, #40	; 0x28
 800de34:	3010      	adds	r0, #16
 800de36:	f00a fa8f 	bl	8018358 <rcl_action_take_result_response>
 800de3a:	4605      	mov	r5, r0
 800de3c:	2800      	cmp	r0, #0
 800de3e:	d1e0      	bne.n	800de02 <_rclc_take_new_data+0xc6>
 800de40:	6860      	ldr	r0, [r4, #4]
 800de42:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800de46:	f00a fef7 	bl	8018c38 <rclc_action_find_handle_by_result_request_sequence_number>
 800de4a:	2800      	cmp	r0, #0
 800de4c:	d098      	beq.n	800dd80 <_rclc_take_new_data+0x44>
 800de4e:	2301      	movs	r3, #1
 800de50:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 800de54:	e794      	b.n	800dd80 <_rclc_take_new_data+0x44>
 800de56:	250b      	movs	r5, #11
 800de58:	4628      	mov	r0, r5
 800de5a:	b019      	add	sp, #100	; 0x64
 800de5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de5e:	ae04      	add	r6, sp, #16
 800de60:	3010      	adds	r0, #16
 800de62:	aa0a      	add	r2, sp, #40	; 0x28
 800de64:	4631      	mov	r1, r6
 800de66:	f00a fceb 	bl	8018840 <rcl_action_take_cancel_request>
 800de6a:	4605      	mov	r5, r0
 800de6c:	2800      	cmp	r0, #0
 800de6e:	d1c8      	bne.n	800de02 <_rclc_take_new_data+0xc6>
 800de70:	a90a      	add	r1, sp, #40	; 0x28
 800de72:	6860      	ldr	r0, [r4, #4]
 800de74:	f00a fea0 	bl	8018bb8 <rclc_action_find_goal_handle_by_uuid>
 800de78:	4607      	mov	r7, r0
 800de7a:	2800      	cmp	r0, #0
 800de7c:	f000 80bb 	beq.w	800dff6 <_rclc_take_new_data+0x2ba>
 800de80:	2101      	movs	r1, #1
 800de82:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800de86:	f00a fe21 	bl	8018acc <rcl_action_transition_goal_state>
 800de8a:	2803      	cmp	r0, #3
 800de8c:	4684      	mov	ip, r0
 800de8e:	f040 80a7 	bne.w	800dfe0 <_rclc_take_new_data+0x2a4>
 800de92:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800de96:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800de98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800de9a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800de9e:	e884 0003 	stmia.w	r4, {r0, r1}
 800dea2:	f887 c008 	strb.w	ip, [r7, #8]
 800dea6:	e76b      	b.n	800dd80 <_rclc_take_new_data+0x44>
 800dea8:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800deaa:	3010      	adds	r0, #16
 800deac:	f00a fad4 	bl	8018458 <rcl_action_take_feedback>
 800deb0:	4605      	mov	r5, r0
 800deb2:	2800      	cmp	r0, #0
 800deb4:	d1a5      	bne.n	800de02 <_rclc_take_new_data+0xc6>
 800deb6:	6860      	ldr	r0, [r4, #4]
 800deb8:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800deba:	f00a fe7d 	bl	8018bb8 <rclc_action_find_goal_handle_by_uuid>
 800debe:	4603      	mov	r3, r0
 800dec0:	2800      	cmp	r0, #0
 800dec2:	f000 80a3 	beq.w	800e00c <_rclc_take_new_data+0x2d0>
 800dec6:	2201      	movs	r2, #1
 800dec8:	6860      	ldr	r0, [r4, #4]
 800deca:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800dece:	e7a6      	b.n	800de1e <_rclc_take_new_data+0xe2>
 800ded0:	f00a fe4c 	bl	8018b6c <rclc_action_take_goal_handle>
 800ded4:	4606      	mov	r6, r0
 800ded6:	6860      	ldr	r0, [r4, #4]
 800ded8:	2e00      	cmp	r6, #0
 800deda:	f43f af47 	beq.w	800dd6c <_rclc_take_new_data+0x30>
 800dede:	6070      	str	r0, [r6, #4]
 800dee0:	f106 0128 	add.w	r1, r6, #40	; 0x28
 800dee4:	69f2      	ldr	r2, [r6, #28]
 800dee6:	3010      	adds	r0, #16
 800dee8:	f00a fbf4 	bl	80186d4 <rcl_action_take_goal_request>
 800deec:	4605      	mov	r5, r0
 800deee:	2800      	cmp	r0, #0
 800def0:	f040 808e 	bne.w	800e010 <_rclc_take_new_data+0x2d4>
 800def4:	69f7      	ldr	r7, [r6, #28]
 800def6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800def8:	7235      	strb	r5, [r6, #8]
 800defa:	f8c6 0009 	str.w	r0, [r6, #9]
 800defe:	f8c6 100d 	str.w	r1, [r6, #13]
 800df02:	6860      	ldr	r0, [r4, #4]
 800df04:	f8c6 2011 	str.w	r2, [r6, #17]
 800df08:	f8c6 3015 	str.w	r3, [r6, #21]
 800df0c:	e72e      	b.n	800dd6c <_rclc_take_new_data+0x30>
 800df0e:	aa04      	add	r2, sp, #16
 800df10:	a90a      	add	r1, sp, #40	; 0x28
 800df12:	3010      	adds	r0, #16
 800df14:	f00a f9a8 	bl	8018268 <rcl_action_take_goal_response>
 800df18:	4605      	mov	r5, r0
 800df1a:	2800      	cmp	r0, #0
 800df1c:	f47f af71 	bne.w	800de02 <_rclc_take_new_data+0xc6>
 800df20:	6860      	ldr	r0, [r4, #4]
 800df22:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800df26:	f00a fe75 	bl	8018c14 <rclc_action_find_handle_by_goal_request_sequence_number>
 800df2a:	b130      	cbz	r0, 800df3a <_rclc_take_new_data+0x1fe>
 800df2c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800df30:	2201      	movs	r2, #1
 800df32:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 800df36:	f880 2020 	strb.w	r2, [r0, #32]
 800df3a:	6860      	ldr	r0, [r4, #4]
 800df3c:	e769      	b.n	800de12 <_rclc_take_new_data+0xd6>
 800df3e:	3010      	adds	r0, #16
 800df40:	aa04      	add	r2, sp, #16
 800df42:	a90a      	add	r1, sp, #40	; 0x28
 800df44:	f00a fc3c 	bl	80187c0 <rcl_action_take_result_request>
 800df48:	4605      	mov	r5, r0
 800df4a:	2800      	cmp	r0, #0
 800df4c:	f47f af59 	bne.w	800de02 <_rclc_take_new_data+0xc6>
 800df50:	a904      	add	r1, sp, #16
 800df52:	6860      	ldr	r0, [r4, #4]
 800df54:	f00a fe30 	bl	8018bb8 <rclc_action_find_goal_handle_by_uuid>
 800df58:	4607      	mov	r7, r0
 800df5a:	b160      	cbz	r0, 800df76 <_rclc_take_new_data+0x23a>
 800df5c:	ad0a      	add	r5, sp, #40	; 0x28
 800df5e:	f100 0640 	add.w	r6, r0, #64	; 0x40
 800df62:	f04f 0c02 	mov.w	ip, #2
 800df66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800df68:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800df6a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800df6e:	e886 0003 	stmia.w	r6, {r0, r1}
 800df72:	f887 c008 	strb.w	ip, [r7, #8]
 800df76:	6860      	ldr	r0, [r4, #4]
 800df78:	2300      	movs	r3, #0
 800df7a:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 800df7e:	e6fa      	b.n	800dd76 <_rclc_take_new_data+0x3a>
 800df80:	f100 0230 	add.w	r2, r0, #48	; 0x30
 800df84:	a90a      	add	r1, sp, #40	; 0x28
 800df86:	3010      	adds	r0, #16
 800df88:	f00a fa26 	bl	80183d8 <rcl_action_take_cancel_response>
 800df8c:	4605      	mov	r5, r0
 800df8e:	2800      	cmp	r0, #0
 800df90:	f47f af37 	bne.w	800de02 <_rclc_take_new_data+0xc6>
 800df94:	6860      	ldr	r0, [r4, #4]
 800df96:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800df9a:	f00a fe5f 	bl	8018c5c <rclc_action_find_handle_by_cancel_request_sequence_number>
 800df9e:	4606      	mov	r6, r0
 800dfa0:	6860      	ldr	r0, [r4, #4]
 800dfa2:	2e00      	cmp	r6, #0
 800dfa4:	f43f af40 	beq.w	800de28 <_rclc_take_new_data+0xec>
 800dfa8:	2701      	movs	r7, #1
 800dfaa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800dfac:	84b7      	strh	r7, [r6, #36]	; 0x24
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	f43f af3a 	beq.w	800de28 <_rclc_take_new_data+0xec>
 800dfb4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800dfb6:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800dfba:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800dfbe:	f00a fdfb 	bl	8018bb8 <rclc_action_find_goal_handle_by_uuid>
 800dfc2:	b138      	cbz	r0, 800dfd4 <_rclc_take_new_data+0x298>
 800dfc4:	6860      	ldr	r0, [r4, #4]
 800dfc6:	3501      	adds	r5, #1
 800dfc8:	f886 7025 	strb.w	r7, [r6, #37]	; 0x25
 800dfcc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800dfce:	42ab      	cmp	r3, r5
 800dfd0:	d8f0      	bhi.n	800dfb4 <_rclc_take_new_data+0x278>
 800dfd2:	e729      	b.n	800de28 <_rclc_take_new_data+0xec>
 800dfd4:	6860      	ldr	r0, [r4, #4]
 800dfd6:	3501      	adds	r5, #1
 800dfd8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800dfda:	42ab      	cmp	r3, r5
 800dfdc:	d8ea      	bhi.n	800dfb4 <_rclc_take_new_data+0x278>
 800dfde:	e723      	b.n	800de28 <_rclc_take_new_data+0xec>
 800dfe0:	ab06      	add	r3, sp, #24
 800dfe2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dfe4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800dfe8:	2103      	movs	r1, #3
 800dfea:	6860      	ldr	r0, [r4, #4]
 800dfec:	e896 000c 	ldmia.w	r6, {r2, r3}
 800dff0:	f00a feaa 	bl	8018d48 <rclc_action_server_goal_cancel_reject>
 800dff4:	e6c4      	b.n	800dd80 <_rclc_take_new_data+0x44>
 800dff6:	ab06      	add	r3, sp, #24
 800dff8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dffa:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800dffe:	2102      	movs	r1, #2
 800e000:	6860      	ldr	r0, [r4, #4]
 800e002:	e896 000c 	ldmia.w	r6, {r2, r3}
 800e006:	f00a fe9f 	bl	8018d48 <rclc_action_server_goal_cancel_reject>
 800e00a:	e6b9      	b.n	800dd80 <_rclc_take_new_data+0x44>
 800e00c:	6860      	ldr	r0, [r4, #4]
 800e00e:	e706      	b.n	800de1e <_rclc_take_new_data+0xe2>
 800e010:	4631      	mov	r1, r6
 800e012:	6860      	ldr	r0, [r4, #4]
 800e014:	f00a fdba 	bl	8018b8c <rclc_action_remove_used_goal_handle>
 800e018:	f000 febe 	bl	800ed98 <rcutils_reset_error>
 800e01c:	e6b0      	b.n	800dd80 <_rclc_take_new_data+0x44>
 800e01e:	2501      	movs	r5, #1
 800e020:	e6ae      	b.n	800dd80 <_rclc_take_new_data+0x44>
 800e022:	bf00      	nop

0800e024 <_rclc_execute.part.0>:
 800e024:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e026:	7803      	ldrb	r3, [r0, #0]
 800e028:	b085      	sub	sp, #20
 800e02a:	4604      	mov	r4, r0
 800e02c:	2b0a      	cmp	r3, #10
 800e02e:	f200 8139 	bhi.w	800e2a4 <_rclc_execute.part.0+0x280>
 800e032:	e8df f003 	tbb	[pc, r3]
 800e036:	4268      	.short	0x4268
 800e038:	06a75b4d 	.word	0x06a75b4d
 800e03c:	721d0606 	.word	0x721d0606
 800e040:	62          	.byte	0x62
 800e041:	00          	.byte	0x00
 800e042:	2b06      	cmp	r3, #6
 800e044:	f000 8126 	beq.w	800e294 <_rclc_execute.part.0+0x270>
 800e048:	2b07      	cmp	r3, #7
 800e04a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e04c:	f040 811c 	bne.w	800e288 <_rclc_execute.part.0+0x264>
 800e050:	f104 0510 	add.w	r5, r4, #16
 800e054:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 800e058:	6880      	ldr	r0, [r0, #8]
 800e05a:	4798      	blx	r3
 800e05c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800e05e:	4629      	mov	r1, r5
 800e060:	6860      	ldr	r0, [r4, #4]
 800e062:	f008 fcc1 	bl	80169e8 <rcl_send_response>
 800e066:	4604      	mov	r4, r0
 800e068:	b378      	cbz	r0, 800e0ca <_rclc_execute.part.0+0xa6>
 800e06a:	f000 fe95 	bl	800ed98 <rcutils_reset_error>
 800e06e:	e02c      	b.n	800e0ca <_rclc_execute.part.0+0xa6>
 800e070:	6840      	ldr	r0, [r0, #4]
 800e072:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800e076:	2b00      	cmp	r3, #0
 800e078:	f000 808e 	beq.w	800e198 <_rclc_execute.part.0+0x174>
 800e07c:	2600      	movs	r6, #0
 800e07e:	2701      	movs	r7, #1
 800e080:	e004      	b.n	800e08c <_rclc_execute.part.0+0x68>
 800e082:	f00a fd4d 	bl	8018b20 <rclc_action_send_result_request>
 800e086:	b998      	cbnz	r0, 800e0b0 <_rclc_execute.part.0+0x8c>
 800e088:	722f      	strb	r7, [r5, #8]
 800e08a:	6860      	ldr	r0, [r4, #4]
 800e08c:	f00a fdf8 	bl	8018c80 <rclc_action_find_first_handle_with_goal_response>
 800e090:	4605      	mov	r5, r0
 800e092:	2800      	cmp	r0, #0
 800e094:	d07f      	beq.n	800e196 <_rclc_execute.part.0+0x172>
 800e096:	6863      	ldr	r3, [r4, #4]
 800e098:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e09a:	699b      	ldr	r3, [r3, #24]
 800e09c:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 800e0a0:	f885 6020 	strb.w	r6, [r5, #32]
 800e0a4:	4798      	blx	r3
 800e0a6:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 800e0aa:	4628      	mov	r0, r5
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d1e8      	bne.n	800e082 <_rclc_execute.part.0+0x5e>
 800e0b0:	6860      	ldr	r0, [r4, #4]
 800e0b2:	4629      	mov	r1, r5
 800e0b4:	f00a fd6a 	bl	8018b8c <rclc_action_remove_used_goal_handle>
 800e0b8:	e7e7      	b.n	800e08a <_rclc_execute.part.0+0x66>
 800e0ba:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 800e0be:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
 800e0c2:	b100      	cbz	r0, 800e0c6 <_rclc_execute.part.0+0xa2>
 800e0c4:	68a0      	ldr	r0, [r4, #8]
 800e0c6:	2400      	movs	r4, #0
 800e0c8:	4798      	blx	r3
 800e0ca:	4620      	mov	r0, r4
 800e0cc:	b005      	add	sp, #20
 800e0ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0d0:	6840      	ldr	r0, [r0, #4]
 800e0d2:	f009 f981 	bl	80173d8 <rcl_timer_call>
 800e0d6:	f240 3321 	movw	r3, #801	; 0x321
 800e0da:	4604      	mov	r4, r0
 800e0dc:	4298      	cmp	r0, r3
 800e0de:	d001      	beq.n	800e0e4 <_rclc_execute.part.0+0xc0>
 800e0e0:	2800      	cmp	r0, #0
 800e0e2:	d1c2      	bne.n	800e06a <_rclc_execute.part.0+0x46>
 800e0e4:	2400      	movs	r4, #0
 800e0e6:	4620      	mov	r0, r4
 800e0e8:	b005      	add	sp, #20
 800e0ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0ec:	2400      	movs	r4, #0
 800e0ee:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e0f0:	6880      	ldr	r0, [r0, #8]
 800e0f2:	4798      	blx	r3
 800e0f4:	4620      	mov	r0, r4
 800e0f6:	b005      	add	sp, #20
 800e0f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0fa:	2400      	movs	r4, #0
 800e0fc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e0fe:	4798      	blx	r3
 800e100:	4620      	mov	r0, r4
 800e102:	b005      	add	sp, #20
 800e104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e106:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 800e10a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e10c:	b100      	cbz	r0, 800e110 <_rclc_execute.part.0+0xec>
 800e10e:	68a0      	ldr	r0, [r4, #8]
 800e110:	2400      	movs	r4, #0
 800e112:	4798      	blx	r3
 800e114:	4620      	mov	r0, r4
 800e116:	b005      	add	sp, #20
 800e118:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e11a:	6840      	ldr	r0, [r0, #4]
 800e11c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800e120:	bb3b      	cbnz	r3, 800e172 <_rclc_execute.part.0+0x14e>
 800e122:	f890 3020 	ldrb.w	r3, [r0, #32]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d07d      	beq.n	800e226 <_rclc_execute.part.0+0x202>
 800e12a:	f640 0634 	movw	r6, #2100	; 0x834
 800e12e:	2701      	movs	r7, #1
 800e130:	e007      	b.n	800e142 <_rclc_execute.part.0+0x11e>
 800e132:	4628      	mov	r0, r5
 800e134:	f00a fdbc 	bl	8018cb0 <rclc_action_server_response_goal_request>
 800e138:	4629      	mov	r1, r5
 800e13a:	6860      	ldr	r0, [r4, #4]
 800e13c:	f00a fd26 	bl	8018b8c <rclc_action_remove_used_goal_handle>
 800e140:	6860      	ldr	r0, [r4, #4]
 800e142:	2100      	movs	r1, #0
 800e144:	f00a fd4e 	bl	8018be4 <rclc_action_find_first_handle_by_status>
 800e148:	4605      	mov	r5, r0
 800e14a:	2800      	cmp	r0, #0
 800e14c:	d068      	beq.n	800e220 <_rclc_execute.part.0+0x1fc>
 800e14e:	6863      	ldr	r3, [r4, #4]
 800e150:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e152:	699b      	ldr	r3, [r3, #24]
 800e154:	4798      	blx	r3
 800e156:	42b0      	cmp	r0, r6
 800e158:	f04f 0100 	mov.w	r1, #0
 800e15c:	d1e9      	bne.n	800e132 <_rclc_execute.part.0+0x10e>
 800e15e:	2101      	movs	r1, #1
 800e160:	4628      	mov	r0, r5
 800e162:	f00a fda5 	bl	8018cb0 <rclc_action_server_response_goal_request>
 800e166:	722f      	strb	r7, [r5, #8]
 800e168:	e7ea      	b.n	800e140 <_rclc_execute.part.0+0x11c>
 800e16a:	6848      	ldr	r0, [r1, #4]
 800e16c:	f00a fd0e 	bl	8018b8c <rclc_action_remove_used_goal_handle>
 800e170:	6860      	ldr	r0, [r4, #4]
 800e172:	f00a fd43 	bl	8018bfc <rclc_action_find_first_terminated_handle>
 800e176:	4601      	mov	r1, r0
 800e178:	2800      	cmp	r0, #0
 800e17a:	d1f6      	bne.n	800e16a <_rclc_execute.part.0+0x146>
 800e17c:	6860      	ldr	r0, [r4, #4]
 800e17e:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 800e182:	e7ce      	b.n	800e122 <_rclc_execute.part.0+0xfe>
 800e184:	2400      	movs	r4, #0
 800e186:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e188:	f100 0110 	add.w	r1, r0, #16
 800e18c:	6880      	ldr	r0, [r0, #8]
 800e18e:	4798      	blx	r3
 800e190:	4620      	mov	r0, r4
 800e192:	b005      	add	sp, #20
 800e194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e196:	6860      	ldr	r0, [r4, #4]
 800e198:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800e19c:	b18b      	cbz	r3, 800e1c2 <_rclc_execute.part.0+0x19e>
 800e19e:	68c5      	ldr	r5, [r0, #12]
 800e1a0:	b32d      	cbz	r5, 800e1ee <_rclc_execute.part.0+0x1ca>
 800e1a2:	2600      	movs	r6, #0
 800e1a4:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800e1a8:	b143      	cbz	r3, 800e1bc <_rclc_execute.part.0+0x198>
 800e1aa:	69c3      	ldr	r3, [r0, #28]
 800e1ac:	f885 6022 	strb.w	r6, [r5, #34]	; 0x22
 800e1b0:	b123      	cbz	r3, 800e1bc <_rclc_execute.part.0+0x198>
 800e1b2:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800e1b4:	4628      	mov	r0, r5
 800e1b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e1b8:	4798      	blx	r3
 800e1ba:	6860      	ldr	r0, [r4, #4]
 800e1bc:	682d      	ldr	r5, [r5, #0]
 800e1be:	2d00      	cmp	r5, #0
 800e1c0:	d1f0      	bne.n	800e1a4 <_rclc_execute.part.0+0x180>
 800e1c2:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800e1c6:	b193      	cbz	r3, 800e1ee <_rclc_execute.part.0+0x1ca>
 800e1c8:	68c5      	ldr	r5, [r0, #12]
 800e1ca:	b185      	cbz	r5, 800e1ee <_rclc_execute.part.0+0x1ca>
 800e1cc:	2600      	movs	r6, #0
 800e1ce:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800e1d2:	b14b      	cbz	r3, 800e1e8 <_rclc_execute.part.0+0x1c4>
 800e1d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e1d6:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 800e1da:	b12b      	cbz	r3, 800e1e8 <_rclc_execute.part.0+0x1c4>
 800e1dc:	4628      	mov	r0, r5
 800e1de:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 800e1e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e1e4:	4798      	blx	r3
 800e1e6:	6860      	ldr	r0, [r4, #4]
 800e1e8:	682d      	ldr	r5, [r5, #0]
 800e1ea:	2d00      	cmp	r5, #0
 800e1ec:	d1ef      	bne.n	800e1ce <_rclc_execute.part.0+0x1aa>
 800e1ee:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	f43f af76 	beq.w	800e0e4 <_rclc_execute.part.0+0xc0>
 800e1f8:	2700      	movs	r7, #0
 800e1fa:	e00b      	b.n	800e214 <_rclc_execute.part.0+0x1f0>
 800e1fc:	6863      	ldr	r3, [r4, #4]
 800e1fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e200:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800e202:	6a1e      	ldr	r6, [r3, #32]
 800e204:	f885 7023 	strb.w	r7, [r5, #35]	; 0x23
 800e208:	47b0      	blx	r6
 800e20a:	6860      	ldr	r0, [r4, #4]
 800e20c:	4629      	mov	r1, r5
 800e20e:	f00a fcbd 	bl	8018b8c <rclc_action_remove_used_goal_handle>
 800e212:	6860      	ldr	r0, [r4, #4]
 800e214:	f00a fd40 	bl	8018c98 <rclc_action_find_first_handle_with_result_response>
 800e218:	4605      	mov	r5, r0
 800e21a:	2800      	cmp	r0, #0
 800e21c:	d1ee      	bne.n	800e1fc <_rclc_execute.part.0+0x1d8>
 800e21e:	e761      	b.n	800e0e4 <_rclc_execute.part.0+0xc0>
 800e220:	6860      	ldr	r0, [r4, #4]
 800e222:	f880 5020 	strb.w	r5, [r0, #32]
 800e226:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	f43f af5a 	beq.w	800e0e4 <_rclc_execute.part.0+0xc0>
 800e230:	68c5      	ldr	r5, [r0, #12]
 800e232:	b1b5      	cbz	r5, 800e262 <_rclc_execute.part.0+0x23e>
 800e234:	2602      	movs	r6, #2
 800e236:	e001      	b.n	800e23c <_rclc_execute.part.0+0x218>
 800e238:	682d      	ldr	r5, [r5, #0]
 800e23a:	b195      	cbz	r5, 800e262 <_rclc_execute.part.0+0x23e>
 800e23c:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800e240:	2b03      	cmp	r3, #3
 800e242:	d1f9      	bne.n	800e238 <_rclc_execute.part.0+0x214>
 800e244:	69c3      	ldr	r3, [r0, #28]
 800e246:	4628      	mov	r0, r5
 800e248:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e24a:	4798      	blx	r3
 800e24c:	4603      	mov	r3, r0
 800e24e:	f105 0260 	add.w	r2, r5, #96	; 0x60
 800e252:	4628      	mov	r0, r5
 800e254:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800e258:	b143      	cbz	r3, 800e26c <_rclc_execute.part.0+0x248>
 800e25a:	f00a fd49 	bl	8018cf0 <rclc_action_server_goal_cancel_accept>
 800e25e:	6860      	ldr	r0, [r4, #4]
 800e260:	e7ea      	b.n	800e238 <_rclc_execute.part.0+0x214>
 800e262:	2300      	movs	r3, #0
 800e264:	461c      	mov	r4, r3
 800e266:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 800e26a:	e72e      	b.n	800e0ca <_rclc_execute.part.0+0xa6>
 800e26c:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800e26e:	f105 0758 	add.w	r7, r5, #88	; 0x58
 800e272:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e276:	2101      	movs	r1, #1
 800e278:	6860      	ldr	r0, [r4, #4]
 800e27a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e27e:	f00a fd63 	bl	8018d48 <rclc_action_server_goal_cancel_reject>
 800e282:	722e      	strb	r6, [r5, #8]
 800e284:	6860      	ldr	r0, [r4, #4]
 800e286:	e7d7      	b.n	800e238 <_rclc_execute.part.0+0x214>
 800e288:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800e28a:	f104 0510 	add.w	r5, r4, #16
 800e28e:	6880      	ldr	r0, [r0, #8]
 800e290:	4798      	blx	r3
 800e292:	e6e3      	b.n	800e05c <_rclc_execute.part.0+0x38>
 800e294:	f100 0510 	add.w	r5, r0, #16
 800e298:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e29a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800e29c:	4629      	mov	r1, r5
 800e29e:	6880      	ldr	r0, [r0, #8]
 800e2a0:	4798      	blx	r3
 800e2a2:	e6db      	b.n	800e05c <_rclc_execute.part.0+0x38>
 800e2a4:	2401      	movs	r4, #1
 800e2a6:	e710      	b.n	800e0ca <_rclc_execute.part.0+0xa6>

0800e2a8 <rclc_executor_trigger_any>:
 800e2a8:	2800      	cmp	r0, #0
 800e2aa:	d03d      	beq.n	800e328 <rclc_executor_trigger_any+0x80>
 800e2ac:	2900      	cmp	r1, #0
 800e2ae:	d03c      	beq.n	800e32a <rclc_executor_trigger_any+0x82>
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	2800      	cmp	r0, #0
 800e2ba:	d035      	beq.n	800e328 <rclc_executor_trigger_any+0x80>
 800e2bc:	b430      	push	{r4, r5}
 800e2be:	f893 c000 	ldrb.w	ip, [r3]
 800e2c2:	f1bc 0f08 	cmp.w	ip, #8
 800e2c6:	d11d      	bne.n	800e304 <rclc_executor_trigger_any+0x5c>
 800e2c8:	685c      	ldr	r4, [r3, #4]
 800e2ca:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800e2cc:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800e2d0:	d105      	bne.n	800e2de <rclc_executor_trigger_any+0x36>
 800e2d2:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800e2d6:	b910      	cbnz	r0, 800e2de <rclc_executor_trigger_any+0x36>
 800e2d8:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 800e2dc:	b128      	cbz	r0, 800e2ea <rclc_executor_trigger_any+0x42>
 800e2de:	bc30      	pop	{r4, r5}
 800e2e0:	4770      	bx	lr
 800e2e2:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800e2e6:	2800      	cmp	r0, #0
 800e2e8:	d1f9      	bne.n	800e2de <rclc_executor_trigger_any+0x36>
 800e2ea:	3201      	adds	r2, #1
 800e2ec:	3340      	adds	r3, #64	; 0x40
 800e2ee:	4291      	cmp	r1, r2
 800e2f0:	d017      	beq.n	800e322 <rclc_executor_trigger_any+0x7a>
 800e2f2:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800e2f6:	2800      	cmp	r0, #0
 800e2f8:	d0f1      	beq.n	800e2de <rclc_executor_trigger_any+0x36>
 800e2fa:	f893 c000 	ldrb.w	ip, [r3]
 800e2fe:	f1bc 0f08 	cmp.w	ip, #8
 800e302:	d0e1      	beq.n	800e2c8 <rclc_executor_trigger_any+0x20>
 800e304:	f1bc 0f09 	cmp.w	ip, #9
 800e308:	d1eb      	bne.n	800e2e2 <rclc_executor_trigger_any+0x3a>
 800e30a:	685c      	ldr	r4, [r3, #4]
 800e30c:	6a25      	ldr	r5, [r4, #32]
 800e30e:	2d00      	cmp	r5, #0
 800e310:	d1e5      	bne.n	800e2de <rclc_executor_trigger_any+0x36>
 800e312:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800e316:	2800      	cmp	r0, #0
 800e318:	d1e1      	bne.n	800e2de <rclc_executor_trigger_any+0x36>
 800e31a:	3201      	adds	r2, #1
 800e31c:	3340      	adds	r3, #64	; 0x40
 800e31e:	4291      	cmp	r1, r2
 800e320:	d1e7      	bne.n	800e2f2 <rclc_executor_trigger_any+0x4a>
 800e322:	2000      	movs	r0, #0
 800e324:	bc30      	pop	{r4, r5}
 800e326:	4770      	bx	lr
 800e328:	4770      	bx	lr
 800e32a:	4608      	mov	r0, r1
 800e32c:	4770      	bx	lr
 800e32e:	bf00      	nop

0800e330 <rclc_executor_get_zero_initialized_executor>:
 800e330:	b510      	push	{r4, lr}
 800e332:	4604      	mov	r4, r0
 800e334:	2290      	movs	r2, #144	; 0x90
 800e336:	4902      	ldr	r1, [pc, #8]	; (800e340 <rclc_executor_get_zero_initialized_executor+0x10>)
 800e338:	f010 fbd9 	bl	801eaee <memcpy>
 800e33c:	4620      	mov	r0, r4
 800e33e:	bd10      	pop	{r4, pc}
 800e340:	08020750 	.word	0x08020750
 800e344:	00000000 	.word	0x00000000

0800e348 <rclc_executor_init>:
 800e348:	2900      	cmp	r1, #0
 800e34a:	d06a      	beq.n	800e422 <rclc_executor_init+0xda>
 800e34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e350:	4605      	mov	r5, r0
 800e352:	b0b2      	sub	sp, #200	; 0xc8
 800e354:	2800      	cmp	r0, #0
 800e356:	d05c      	beq.n	800e412 <rclc_executor_init+0xca>
 800e358:	4616      	mov	r6, r2
 800e35a:	4618      	mov	r0, r3
 800e35c:	4688      	mov	r8, r1
 800e35e:	461f      	mov	r7, r3
 800e360:	f000 fcf6 	bl	800ed50 <rcutils_allocator_is_valid>
 800e364:	2e00      	cmp	r6, #0
 800e366:	d054      	beq.n	800e412 <rclc_executor_init+0xca>
 800e368:	f080 0401 	eor.w	r4, r0, #1
 800e36c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800e370:	d14f      	bne.n	800e412 <rclc_executor_init+0xca>
 800e372:	2290      	movs	r2, #144	; 0x90
 800e374:	4930      	ldr	r1, [pc, #192]	; (800e438 <rclc_executor_init+0xf0>)
 800e376:	a80e      	add	r0, sp, #56	; 0x38
 800e378:	f010 fbb9 	bl	801eaee <memcpy>
 800e37c:	a90e      	add	r1, sp, #56	; 0x38
 800e37e:	2290      	movs	r2, #144	; 0x90
 800e380:	4628      	mov	r0, r5
 800e382:	f010 fbb4 	bl	801eaee <memcpy>
 800e386:	4668      	mov	r0, sp
 800e388:	f8c5 8004 	str.w	r8, [r5, #4]
 800e38c:	60ee      	str	r6, [r5, #12]
 800e38e:	f009 f999 	bl	80176c4 <rcl_get_zero_initialized_wait_set>
 800e392:	46ec      	mov	ip, sp
 800e394:	f105 0e18 	add.w	lr, r5, #24
 800e398:	f8d7 8000 	ldr.w	r8, [r7]
 800e39c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e3a0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e3a4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e3a8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e3ac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e3b0:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800e430 <rclc_executor_init+0xe8>
 800e3b4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e3b8:	f8dc 3000 	ldr.w	r3, [ip]
 800e3bc:	01b0      	lsls	r0, r6, #6
 800e3be:	6939      	ldr	r1, [r7, #16]
 800e3c0:	f8ce 3000 	str.w	r3, [lr]
 800e3c4:	616f      	str	r7, [r5, #20]
 800e3c6:	ed85 7b1c 	vstr	d7, [r5, #112]	; 0x70
 800e3ca:	47c0      	blx	r8
 800e3cc:	60a8      	str	r0, [r5, #8]
 800e3ce:	b908      	cbnz	r0, 800e3d4 <rclc_executor_init+0x8c>
 800e3d0:	e029      	b.n	800e426 <rclc_executor_init+0xde>
 800e3d2:	68a8      	ldr	r0, [r5, #8]
 800e3d4:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800e3d8:	3401      	adds	r4, #1
 800e3da:	4631      	mov	r1, r6
 800e3dc:	f000 faf4 	bl	800e9c8 <rclc_executor_handle_init>
 800e3e0:	42a6      	cmp	r6, r4
 800e3e2:	d8f6      	bhi.n	800e3d2 <rclc_executor_init+0x8a>
 800e3e4:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 800e3e8:	f000 fae4 	bl	800e9b4 <rclc_executor_handle_counters_zero_init>
 800e3ec:	4a13      	ldr	r2, [pc, #76]	; (800e43c <rclc_executor_init+0xf4>)
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	68a8      	ldr	r0, [r5, #8]
 800e3f2:	e9c5 2320 	strd	r2, r3, [r5, #128]	; 0x80
 800e3f6:	b168      	cbz	r0, 800e414 <rclc_executor_init+0xcc>
 800e3f8:	68eb      	ldr	r3, [r5, #12]
 800e3fa:	b173      	cbz	r3, 800e41a <rclc_executor_init+0xd2>
 800e3fc:	696a      	ldr	r2, [r5, #20]
 800e3fe:	fab2 f382 	clz	r3, r2
 800e402:	095b      	lsrs	r3, r3, #5
 800e404:	b14a      	cbz	r2, 800e41a <rclc_executor_init+0xd2>
 800e406:	4618      	mov	r0, r3
 800e408:	f885 3088 	strb.w	r3, [r5, #136]	; 0x88
 800e40c:	b032      	add	sp, #200	; 0xc8
 800e40e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e412:	200b      	movs	r0, #11
 800e414:	b032      	add	sp, #200	; 0xc8
 800e416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e41a:	2000      	movs	r0, #0
 800e41c:	b032      	add	sp, #200	; 0xc8
 800e41e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e422:	200b      	movs	r0, #11
 800e424:	4770      	bx	lr
 800e426:	200a      	movs	r0, #10
 800e428:	e7f4      	b.n	800e414 <rclc_executor_init+0xcc>
 800e42a:	bf00      	nop
 800e42c:	f3af 8000 	nop.w
 800e430:	3b9aca00 	.word	0x3b9aca00
 800e434:	00000000 	.word	0x00000000
 800e438:	08020750 	.word	0x08020750
 800e43c:	0800e2a9 	.word	0x0800e2a9

0800e440 <rclc_executor_add_subscription>:
 800e440:	2b00      	cmp	r3, #0
 800e442:	bf18      	it	ne
 800e444:	2a00      	cmpne	r2, #0
 800e446:	b570      	push	{r4, r5, r6, lr}
 800e448:	4604      	mov	r4, r0
 800e44a:	bf0c      	ite	eq
 800e44c:	2001      	moveq	r0, #1
 800e44e:	2000      	movne	r0, #0
 800e450:	f89d c010 	ldrb.w	ip, [sp, #16]
 800e454:	2900      	cmp	r1, #0
 800e456:	bf08      	it	eq
 800e458:	f040 0001 	orreq.w	r0, r0, #1
 800e45c:	bb28      	cbnz	r0, 800e4aa <rclc_executor_add_subscription+0x6a>
 800e45e:	fab4 f584 	clz	r5, r4
 800e462:	096d      	lsrs	r5, r5, #5
 800e464:	b30c      	cbz	r4, 800e4aa <rclc_executor_add_subscription+0x6a>
 800e466:	e9d4 0603 	ldrd	r0, r6, [r4, #12]
 800e46a:	4286      	cmp	r6, r0
 800e46c:	d301      	bcc.n	800e472 <rclc_executor_add_subscription+0x32>
 800e46e:	2001      	movs	r0, #1
 800e470:	bd70      	pop	{r4, r5, r6, pc}
 800e472:	68a0      	ldr	r0, [r4, #8]
 800e474:	ea4f 1e86 	mov.w	lr, r6, lsl #6
 800e478:	f800 500e 	strb.w	r5, [r0, lr]
 800e47c:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800e480:	3601      	adds	r6, #1
 800e482:	6303      	str	r3, [r0, #48]	; 0x30
 800e484:	2301      	movs	r3, #1
 800e486:	62c5      	str	r5, [r0, #44]	; 0x2c
 800e488:	f104 0518 	add.w	r5, r4, #24
 800e48c:	f880 c001 	strb.w	ip, [r0, #1]
 800e490:	8703      	strh	r3, [r0, #56]	; 0x38
 800e492:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800e496:	4628      	mov	r0, r5
 800e498:	6126      	str	r6, [r4, #16]
 800e49a:	f009 f927 	bl	80176ec <rcl_wait_set_is_valid>
 800e49e:	b930      	cbnz	r0, 800e4ae <rclc_executor_add_subscription+0x6e>
 800e4a0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800e4a2:	2000      	movs	r0, #0
 800e4a4:	3301      	adds	r3, #1
 800e4a6:	64e3      	str	r3, [r4, #76]	; 0x4c
 800e4a8:	bd70      	pop	{r4, r5, r6, pc}
 800e4aa:	200b      	movs	r0, #11
 800e4ac:	bd70      	pop	{r4, r5, r6, pc}
 800e4ae:	4628      	mov	r0, r5
 800e4b0:	f009 f922 	bl	80176f8 <rcl_wait_set_fini>
 800e4b4:	2800      	cmp	r0, #0
 800e4b6:	d0f3      	beq.n	800e4a0 <rclc_executor_add_subscription+0x60>
 800e4b8:	bd70      	pop	{r4, r5, r6, pc}
 800e4ba:	bf00      	nop

0800e4bc <rclc_executor_add_timer>:
 800e4bc:	b351      	cbz	r1, 800e514 <rclc_executor_add_timer+0x58>
 800e4be:	fab0 f280 	clz	r2, r0
 800e4c2:	b570      	push	{r4, r5, r6, lr}
 800e4c4:	0952      	lsrs	r2, r2, #5
 800e4c6:	4604      	mov	r4, r0
 800e4c8:	b1e0      	cbz	r0, 800e504 <rclc_executor_add_timer+0x48>
 800e4ca:	e9d0 0303 	ldrd	r0, r3, [r0, #12]
 800e4ce:	4283      	cmp	r3, r0
 800e4d0:	d301      	bcc.n	800e4d6 <rclc_executor_add_timer+0x1a>
 800e4d2:	2001      	movs	r0, #1
 800e4d4:	bd70      	pop	{r4, r5, r6, pc}
 800e4d6:	68a0      	ldr	r0, [r4, #8]
 800e4d8:	019d      	lsls	r5, r3, #6
 800e4da:	1c5e      	adds	r6, r3, #1
 800e4dc:	eb00 1383 	add.w	r3, r0, r3, lsl #6
 800e4e0:	6059      	str	r1, [r3, #4]
 800e4e2:	2102      	movs	r1, #2
 800e4e4:	5341      	strh	r1, [r0, r5]
 800e4e6:	2101      	movs	r1, #1
 800e4e8:	f104 0518 	add.w	r5, r4, #24
 800e4ec:	62da      	str	r2, [r3, #44]	; 0x2c
 800e4ee:	8719      	strh	r1, [r3, #56]	; 0x38
 800e4f0:	4628      	mov	r0, r5
 800e4f2:	6126      	str	r6, [r4, #16]
 800e4f4:	f009 f8fa 	bl	80176ec <rcl_wait_set_is_valid>
 800e4f8:	b930      	cbnz	r0, 800e508 <rclc_executor_add_timer+0x4c>
 800e4fa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e4fc:	2000      	movs	r0, #0
 800e4fe:	3301      	adds	r3, #1
 800e500:	6523      	str	r3, [r4, #80]	; 0x50
 800e502:	bd70      	pop	{r4, r5, r6, pc}
 800e504:	200b      	movs	r0, #11
 800e506:	bd70      	pop	{r4, r5, r6, pc}
 800e508:	4628      	mov	r0, r5
 800e50a:	f009 f8f5 	bl	80176f8 <rcl_wait_set_fini>
 800e50e:	2800      	cmp	r0, #0
 800e510:	d0f3      	beq.n	800e4fa <rclc_executor_add_timer+0x3e>
 800e512:	bd70      	pop	{r4, r5, r6, pc}
 800e514:	200b      	movs	r0, #11
 800e516:	4770      	bx	lr

0800e518 <rclc_executor_add_service>:
 800e518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e51a:	9d06      	ldr	r5, [sp, #24]
 800e51c:	4604      	mov	r4, r0
 800e51e:	2b00      	cmp	r3, #0
 800e520:	bf18      	it	ne
 800e522:	2d00      	cmpne	r5, #0
 800e524:	bf0c      	ite	eq
 800e526:	2001      	moveq	r0, #1
 800e528:	2000      	movne	r0, #0
 800e52a:	2a00      	cmp	r2, #0
 800e52c:	bf08      	it	eq
 800e52e:	f040 0001 	orreq.w	r0, r0, #1
 800e532:	2900      	cmp	r1, #0
 800e534:	bf08      	it	eq
 800e536:	f040 0001 	orreq.w	r0, r0, #1
 800e53a:	bb40      	cbnz	r0, 800e58e <rclc_executor_add_service+0x76>
 800e53c:	fab4 f684 	clz	r6, r4
 800e540:	0976      	lsrs	r6, r6, #5
 800e542:	b324      	cbz	r4, 800e58e <rclc_executor_add_service+0x76>
 800e544:	e9d4 7003 	ldrd	r7, r0, [r4, #12]
 800e548:	42b8      	cmp	r0, r7
 800e54a:	d301      	bcc.n	800e550 <rclc_executor_add_service+0x38>
 800e54c:	2001      	movs	r0, #1
 800e54e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e550:	68a7      	ldr	r7, [r4, #8]
 800e552:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800e556:	f100 0c01 	add.w	ip, r0, #1
 800e55a:	eb07 1080 	add.w	r0, r7, r0, lsl #6
 800e55e:	6283      	str	r3, [r0, #40]	; 0x28
 800e560:	2305      	movs	r3, #5
 800e562:	6305      	str	r5, [r0, #48]	; 0x30
 800e564:	f104 0518 	add.w	r5, r4, #24
 800e568:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800e56c:	f827 300e 	strh.w	r3, [r7, lr]
 800e570:	2301      	movs	r3, #1
 800e572:	62c6      	str	r6, [r0, #44]	; 0x2c
 800e574:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 800e578:	4628      	mov	r0, r5
 800e57a:	f8c4 c010 	str.w	ip, [r4, #16]
 800e57e:	f009 f8b5 	bl	80176ec <rcl_wait_set_is_valid>
 800e582:	b930      	cbnz	r0, 800e592 <rclc_executor_add_service+0x7a>
 800e584:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e586:	2000      	movs	r0, #0
 800e588:	3301      	adds	r3, #1
 800e58a:	65a3      	str	r3, [r4, #88]	; 0x58
 800e58c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e58e:	200b      	movs	r0, #11
 800e590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e592:	4628      	mov	r0, r5
 800e594:	f009 f8b0 	bl	80176f8 <rcl_wait_set_fini>
 800e598:	2800      	cmp	r0, #0
 800e59a:	d0f3      	beq.n	800e584 <rclc_executor_add_service+0x6c>
 800e59c:	e7d7      	b.n	800e54e <rclc_executor_add_service+0x36>
 800e59e:	bf00      	nop

0800e5a0 <rclc_executor_prepare>:
 800e5a0:	2800      	cmp	r0, #0
 800e5a2:	d044      	beq.n	800e62e <rclc_executor_prepare+0x8e>
 800e5a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5a6:	f100 0518 	add.w	r5, r0, #24
 800e5aa:	b09b      	sub	sp, #108	; 0x6c
 800e5ac:	4604      	mov	r4, r0
 800e5ae:	4628      	mov	r0, r5
 800e5b0:	f009 f89c 	bl	80176ec <rcl_wait_set_is_valid>
 800e5b4:	b110      	cbz	r0, 800e5bc <rclc_executor_prepare+0x1c>
 800e5b6:	2000      	movs	r0, #0
 800e5b8:	b01b      	add	sp, #108	; 0x6c
 800e5ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5bc:	4628      	mov	r0, r5
 800e5be:	f009 f89b 	bl	80176f8 <rcl_wait_set_fini>
 800e5c2:	2800      	cmp	r0, #0
 800e5c4:	d130      	bne.n	800e628 <rclc_executor_prepare+0x88>
 800e5c6:	a80c      	add	r0, sp, #48	; 0x30
 800e5c8:	ae04      	add	r6, sp, #16
 800e5ca:	f009 f87b 	bl	80176c4 <rcl_get_zero_initialized_wait_set>
 800e5ce:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800e5d2:	46ae      	mov	lr, r5
 800e5d4:	6967      	ldr	r7, [r4, #20]
 800e5d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e5da:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e5de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e5e2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e5e6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e5ea:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e5ee:	f8dc 3000 	ldr.w	r3, [ip]
 800e5f2:	f8ce 3000 	str.w	r3, [lr]
 800e5f6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e5f8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e5fa:	683b      	ldr	r3, [r7, #0]
 800e5fc:	4628      	mov	r0, r5
 800e5fe:	6862      	ldr	r2, [r4, #4]
 800e600:	6033      	str	r3, [r6, #0]
 800e602:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800e604:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e606:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800e60a:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	; 0x50
 800e60e:	e9cd 2100 	strd	r2, r1, [sp]
 800e612:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e614:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800e616:	f009 fb6f 	bl	8017cf8 <rcl_wait_set_init>
 800e61a:	2800      	cmp	r0, #0
 800e61c:	d0cc      	beq.n	800e5b8 <rclc_executor_prepare+0x18>
 800e61e:	900b      	str	r0, [sp, #44]	; 0x2c
 800e620:	f000 fbba 	bl	800ed98 <rcutils_reset_error>
 800e624:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e626:	e7c7      	b.n	800e5b8 <rclc_executor_prepare+0x18>
 800e628:	f000 fbb6 	bl	800ed98 <rcutils_reset_error>
 800e62c:	e7cb      	b.n	800e5c6 <rclc_executor_prepare+0x26>
 800e62e:	200b      	movs	r0, #11
 800e630:	4770      	bx	lr
 800e632:	bf00      	nop

0800e634 <rclc_executor_spin_some.part.0>:
 800e634:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e638:	4605      	mov	r5, r0
 800e63a:	4691      	mov	r9, r2
 800e63c:	4698      	mov	r8, r3
 800e63e:	f7ff ffaf 	bl	800e5a0 <rclc_executor_prepare>
 800e642:	f105 0618 	add.w	r6, r5, #24
 800e646:	4630      	mov	r0, r6
 800e648:	f009 f922 	bl	8017890 <rcl_wait_set_clear>
 800e64c:	4607      	mov	r7, r0
 800e64e:	2800      	cmp	r0, #0
 800e650:	f040 80a8 	bne.w	800e7a4 <rclc_executor_spin_some.part.0+0x170>
 800e654:	68eb      	ldr	r3, [r5, #12]
 800e656:	b30b      	cbz	r3, 800e69c <rclc_executor_spin_some.part.0+0x68>
 800e658:	4604      	mov	r4, r0
 800e65a:	68a9      	ldr	r1, [r5, #8]
 800e65c:	01a2      	lsls	r2, r4, #6
 800e65e:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800e662:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 800e666:	b1cb      	cbz	r3, 800e69c <rclc_executor_spin_some.part.0+0x68>
 800e668:	5c8b      	ldrb	r3, [r1, r2]
 800e66a:	2b0a      	cmp	r3, #10
 800e66c:	f200 80de 	bhi.w	800e82c <rclc_executor_spin_some.part.0+0x1f8>
 800e670:	e8df f003 	tbb	[pc, r3]
 800e674:	8da99d9d 	.word	0x8da99d9d
 800e678:	0606068d 	.word	0x0606068d
 800e67c:	c1ce      	.short	0xc1ce
 800e67e:	b5          	.byte	0xb5
 800e67f:	00          	.byte	0x00
 800e680:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800e684:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e688:	4630      	mov	r0, r6
 800e68a:	f009 fc51 	bl	8017f30 <rcl_wait_set_add_service>
 800e68e:	2800      	cmp	r0, #0
 800e690:	f040 8087 	bne.w	800e7a2 <rclc_executor_spin_some.part.0+0x16e>
 800e694:	3401      	adds	r4, #1
 800e696:	68eb      	ldr	r3, [r5, #12]
 800e698:	429c      	cmp	r4, r3
 800e69a:	d3de      	bcc.n	800e65a <rclc_executor_spin_some.part.0+0x26>
 800e69c:	4643      	mov	r3, r8
 800e69e:	464a      	mov	r2, r9
 800e6a0:	4630      	mov	r0, r6
 800e6a2:	f009 fc71 	bl	8017f88 <rcl_wait>
 800e6a6:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	f000 80c6 	beq.w	800e83c <rclc_executor_spin_some.part.0+0x208>
 800e6b0:	2b01      	cmp	r3, #1
 800e6b2:	f040 80bb 	bne.w	800e82c <rclc_executor_spin_some.part.0+0x1f8>
 800e6b6:	68eb      	ldr	r3, [r5, #12]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	f000 8159 	beq.w	800e970 <rclc_executor_spin_some.part.0+0x33c>
 800e6be:	2400      	movs	r4, #0
 800e6c0:	f240 1991 	movw	r9, #401	; 0x191
 800e6c4:	46a0      	mov	r8, r4
 800e6c6:	e00a      	b.n	800e6de <rclc_executor_spin_some.part.0+0xaa>
 800e6c8:	f7ff faea 	bl	800dca0 <_rclc_check_for_new_data>
 800e6cc:	4604      	mov	r4, r0
 800e6ce:	b110      	cbz	r0, 800e6d6 <rclc_executor_spin_some.part.0+0xa2>
 800e6d0:	4548      	cmp	r0, r9
 800e6d2:	f040 80b1 	bne.w	800e838 <rclc_executor_spin_some.part.0+0x204>
 800e6d6:	68eb      	ldr	r3, [r5, #12]
 800e6d8:	4598      	cmp	r8, r3
 800e6da:	f080 8126 	bcs.w	800e92a <rclc_executor_spin_some.part.0+0x2f6>
 800e6de:	68aa      	ldr	r2, [r5, #8]
 800e6e0:	4631      	mov	r1, r6
 800e6e2:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800e6e6:	f108 0801 	add.w	r8, r8, #1
 800e6ea:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800e6ee:	f1bc 0f00 	cmp.w	ip, #0
 800e6f2:	d1e9      	bne.n	800e6c8 <rclc_executor_spin_some.part.0+0x94>
 800e6f4:	4619      	mov	r1, r3
 800e6f6:	4610      	mov	r0, r2
 800e6f8:	e9d5 3220 	ldrd	r3, r2, [r5, #128]	; 0x80
 800e6fc:	4798      	blx	r3
 800e6fe:	2800      	cmp	r0, #0
 800e700:	f000 809a 	beq.w	800e838 <rclc_executor_spin_some.part.0+0x204>
 800e704:	68eb      	ldr	r3, [r5, #12]
 800e706:	2b00      	cmp	r3, #0
 800e708:	f000 8096 	beq.w	800e838 <rclc_executor_spin_some.part.0+0x204>
 800e70c:	f04f 0800 	mov.w	r8, #0
 800e710:	f240 1991 	movw	r9, #401	; 0x191
 800e714:	e009      	b.n	800e72a <rclc_executor_spin_some.part.0+0xf6>
 800e716:	f7ff fb11 	bl	800dd3c <_rclc_take_new_data>
 800e71a:	4604      	mov	r4, r0
 800e71c:	b110      	cbz	r0, 800e724 <rclc_executor_spin_some.part.0+0xf0>
 800e71e:	4548      	cmp	r0, r9
 800e720:	f040 808a 	bne.w	800e838 <rclc_executor_spin_some.part.0+0x204>
 800e724:	68eb      	ldr	r3, [r5, #12]
 800e726:	4598      	cmp	r8, r3
 800e728:	d209      	bcs.n	800e73e <rclc_executor_spin_some.part.0+0x10a>
 800e72a:	68a8      	ldr	r0, [r5, #8]
 800e72c:	4631      	mov	r1, r6
 800e72e:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800e732:	f108 0801 	add.w	r8, r8, #1
 800e736:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800e73a:	2a00      	cmp	r2, #0
 800e73c:	d1eb      	bne.n	800e716 <rclc_executor_spin_some.part.0+0xe2>
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d07a      	beq.n	800e838 <rclc_executor_spin_some.part.0+0x204>
 800e742:	2600      	movs	r6, #0
 800e744:	e00e      	b.n	800e764 <rclc_executor_spin_some.part.0+0x130>
 800e746:	f812 200c 	ldrb.w	r2, [r2, ip]
 800e74a:	2a08      	cmp	r2, #8
 800e74c:	f000 80fc 	beq.w	800e948 <rclc_executor_spin_some.part.0+0x314>
 800e750:	2a09      	cmp	r2, #9
 800e752:	f000 80ee 	beq.w	800e932 <rclc_executor_spin_some.part.0+0x2fe>
 800e756:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 800e75a:	b98a      	cbnz	r2, 800e780 <rclc_executor_spin_some.part.0+0x14c>
 800e75c:	3601      	adds	r6, #1
 800e75e:	429e      	cmp	r6, r3
 800e760:	d267      	bcs.n	800e832 <rclc_executor_spin_some.part.0+0x1fe>
 800e762:	2400      	movs	r4, #0
 800e764:	68aa      	ldr	r2, [r5, #8]
 800e766:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800e76a:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800e76e:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
 800e772:	2900      	cmp	r1, #0
 800e774:	d060      	beq.n	800e838 <rclc_executor_spin_some.part.0+0x204>
 800e776:	7841      	ldrb	r1, [r0, #1]
 800e778:	2900      	cmp	r1, #0
 800e77a:	d0e4      	beq.n	800e746 <rclc_executor_spin_some.part.0+0x112>
 800e77c:	2901      	cmp	r1, #1
 800e77e:	d1ed      	bne.n	800e75c <rclc_executor_spin_some.part.0+0x128>
 800e780:	f7ff fc50 	bl	800e024 <_rclc_execute.part.0>
 800e784:	2800      	cmp	r0, #0
 800e786:	f040 80b5 	bne.w	800e8f4 <rclc_executor_spin_some.part.0+0x2c0>
 800e78a:	68eb      	ldr	r3, [r5, #12]
 800e78c:	e7e6      	b.n	800e75c <rclc_executor_spin_some.part.0+0x128>
 800e78e:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800e792:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e796:	4630      	mov	r0, r6
 800e798:	f009 fb9e 	bl	8017ed8 <rcl_wait_set_add_client>
 800e79c:	2800      	cmp	r0, #0
 800e79e:	f43f af79 	beq.w	800e694 <rclc_executor_spin_some.part.0+0x60>
 800e7a2:	4607      	mov	r7, r0
 800e7a4:	f000 faf8 	bl	800ed98 <rcutils_reset_error>
 800e7a8:	4638      	mov	r0, r7
 800e7aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7ae:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800e7b2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e7b6:	4630      	mov	r0, r6
 800e7b8:	f009 f83e 	bl	8017838 <rcl_wait_set_add_subscription>
 800e7bc:	2800      	cmp	r0, #0
 800e7be:	f43f af69 	beq.w	800e694 <rclc_executor_spin_some.part.0+0x60>
 800e7c2:	4607      	mov	r7, r0
 800e7c4:	e7ee      	b.n	800e7a4 <rclc_executor_spin_some.part.0+0x170>
 800e7c6:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800e7ca:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e7ce:	4630      	mov	r0, r6
 800e7d0:	f009 fb52 	bl	8017e78 <rcl_wait_set_add_timer>
 800e7d4:	2800      	cmp	r0, #0
 800e7d6:	f43f af5d 	beq.w	800e694 <rclc_executor_spin_some.part.0+0x60>
 800e7da:	4607      	mov	r7, r0
 800e7dc:	e7e2      	b.n	800e7a4 <rclc_executor_spin_some.part.0+0x170>
 800e7de:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800e7e2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e7e6:	4630      	mov	r0, r6
 800e7e8:	f009 fb1a 	bl	8017e20 <rcl_wait_set_add_guard_condition>
 800e7ec:	2800      	cmp	r0, #0
 800e7ee:	f43f af51 	beq.w	800e694 <rclc_executor_spin_some.part.0+0x60>
 800e7f2:	4607      	mov	r7, r0
 800e7f4:	e7d6      	b.n	800e7a4 <rclc_executor_spin_some.part.0+0x170>
 800e7f6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e7fa:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800e7fe:	4630      	mov	r0, r6
 800e800:	3110      	adds	r1, #16
 800e802:	f00a f895 	bl	8018930 <rcl_action_wait_set_add_action_server>
 800e806:	2800      	cmp	r0, #0
 800e808:	f43f af44 	beq.w	800e694 <rclc_executor_spin_some.part.0+0x60>
 800e80c:	4607      	mov	r7, r0
 800e80e:	e7c9      	b.n	800e7a4 <rclc_executor_spin_some.part.0+0x170>
 800e810:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e814:	2300      	movs	r3, #0
 800e816:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800e81a:	4630      	mov	r0, r6
 800e81c:	3110      	adds	r1, #16
 800e81e:	f009 fe5f 	bl	80184e0 <rcl_action_wait_set_add_action_client>
 800e822:	2800      	cmp	r0, #0
 800e824:	f43f af36 	beq.w	800e694 <rclc_executor_spin_some.part.0+0x60>
 800e828:	4607      	mov	r7, r0
 800e82a:	e7bb      	b.n	800e7a4 <rclc_executor_spin_some.part.0+0x170>
 800e82c:	2701      	movs	r7, #1
 800e82e:	f000 fab3 	bl	800ed98 <rcutils_reset_error>
 800e832:	4638      	mov	r0, r7
 800e834:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e838:	4627      	mov	r7, r4
 800e83a:	e7fa      	b.n	800e832 <rclc_executor_spin_some.part.0+0x1fe>
 800e83c:	68eb      	ldr	r3, [r5, #12]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	f000 8093 	beq.w	800e96a <rclc_executor_spin_some.part.0+0x336>
 800e844:	2400      	movs	r4, #0
 800e846:	f240 1991 	movw	r9, #401	; 0x191
 800e84a:	46a0      	mov	r8, r4
 800e84c:	e008      	b.n	800e860 <rclc_executor_spin_some.part.0+0x22c>
 800e84e:	f7ff fa27 	bl	800dca0 <_rclc_check_for_new_data>
 800e852:	4604      	mov	r4, r0
 800e854:	b108      	cbz	r0, 800e85a <rclc_executor_spin_some.part.0+0x226>
 800e856:	4548      	cmp	r0, r9
 800e858:	d1ee      	bne.n	800e838 <rclc_executor_spin_some.part.0+0x204>
 800e85a:	68eb      	ldr	r3, [r5, #12]
 800e85c:	4598      	cmp	r8, r3
 800e85e:	d266      	bcs.n	800e92e <rclc_executor_spin_some.part.0+0x2fa>
 800e860:	68aa      	ldr	r2, [r5, #8]
 800e862:	4631      	mov	r1, r6
 800e864:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800e868:	f108 0801 	add.w	r8, r8, #1
 800e86c:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800e870:	f1bc 0f00 	cmp.w	ip, #0
 800e874:	d1eb      	bne.n	800e84e <rclc_executor_spin_some.part.0+0x21a>
 800e876:	4619      	mov	r1, r3
 800e878:	4610      	mov	r0, r2
 800e87a:	e9d5 3220 	ldrd	r3, r2, [r5, #128]	; 0x80
 800e87e:	4798      	blx	r3
 800e880:	2800      	cmp	r0, #0
 800e882:	d0d9      	beq.n	800e838 <rclc_executor_spin_some.part.0+0x204>
 800e884:	68eb      	ldr	r3, [r5, #12]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d0d6      	beq.n	800e838 <rclc_executor_spin_some.part.0+0x204>
 800e88a:	f04f 0a00 	mov.w	sl, #0
 800e88e:	f240 1891 	movw	r8, #401	; 0x191
 800e892:	f240 2959 	movw	r9, #601	; 0x259
 800e896:	e00e      	b.n	800e8b6 <rclc_executor_spin_some.part.0+0x282>
 800e898:	f813 300b 	ldrb.w	r3, [r3, fp]
 800e89c:	2b08      	cmp	r3, #8
 800e89e:	d034      	beq.n	800e90a <rclc_executor_spin_some.part.0+0x2d6>
 800e8a0:	2b09      	cmp	r3, #9
 800e8a2:	d029      	beq.n	800e8f8 <rclc_executor_spin_some.part.0+0x2c4>
 800e8a4:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800e8a8:	bb03      	cbnz	r3, 800e8ec <rclc_executor_spin_some.part.0+0x2b8>
 800e8aa:	f10a 0a01 	add.w	sl, sl, #1
 800e8ae:	68eb      	ldr	r3, [r5, #12]
 800e8b0:	459a      	cmp	sl, r3
 800e8b2:	d2be      	bcs.n	800e832 <rclc_executor_spin_some.part.0+0x1fe>
 800e8b4:	2400      	movs	r4, #0
 800e8b6:	68a8      	ldr	r0, [r5, #8]
 800e8b8:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800e8bc:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800e8c0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d0b7      	beq.n	800e838 <rclc_executor_spin_some.part.0+0x204>
 800e8c8:	4631      	mov	r1, r6
 800e8ca:	f7ff fa37 	bl	800dd3c <_rclc_take_new_data>
 800e8ce:	2800      	cmp	r0, #0
 800e8d0:	bf18      	it	ne
 800e8d2:	4540      	cmpne	r0, r8
 800e8d4:	d001      	beq.n	800e8da <rclc_executor_spin_some.part.0+0x2a6>
 800e8d6:	4548      	cmp	r0, r9
 800e8d8:	d10c      	bne.n	800e8f4 <rclc_executor_spin_some.part.0+0x2c0>
 800e8da:	68ab      	ldr	r3, [r5, #8]
 800e8dc:	eb13 000b 	adds.w	r0, r3, fp
 800e8e0:	d021      	beq.n	800e926 <rclc_executor_spin_some.part.0+0x2f2>
 800e8e2:	7842      	ldrb	r2, [r0, #1]
 800e8e4:	2a00      	cmp	r2, #0
 800e8e6:	d0d7      	beq.n	800e898 <rclc_executor_spin_some.part.0+0x264>
 800e8e8:	2a01      	cmp	r2, #1
 800e8ea:	d1de      	bne.n	800e8aa <rclc_executor_spin_some.part.0+0x276>
 800e8ec:	f7ff fb9a 	bl	800e024 <_rclc_execute.part.0>
 800e8f0:	2800      	cmp	r0, #0
 800e8f2:	d0da      	beq.n	800e8aa <rclc_executor_spin_some.part.0+0x276>
 800e8f4:	4607      	mov	r7, r0
 800e8f6:	e79c      	b.n	800e832 <rclc_executor_spin_some.part.0+0x1fe>
 800e8f8:	6843      	ldr	r3, [r0, #4]
 800e8fa:	6a1a      	ldr	r2, [r3, #32]
 800e8fc:	2a00      	cmp	r2, #0
 800e8fe:	d1f5      	bne.n	800e8ec <rclc_executor_spin_some.part.0+0x2b8>
 800e900:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e904:	2b00      	cmp	r3, #0
 800e906:	d0d0      	beq.n	800e8aa <rclc_executor_spin_some.part.0+0x276>
 800e908:	e7f0      	b.n	800e8ec <rclc_executor_spin_some.part.0+0x2b8>
 800e90a:	6843      	ldr	r3, [r0, #4]
 800e90c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e90e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800e912:	d1eb      	bne.n	800e8ec <rclc_executor_spin_some.part.0+0x2b8>
 800e914:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e918:	2a00      	cmp	r2, #0
 800e91a:	d1e7      	bne.n	800e8ec <rclc_executor_spin_some.part.0+0x2b8>
 800e91c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e920:	2b00      	cmp	r3, #0
 800e922:	d0c2      	beq.n	800e8aa <rclc_executor_spin_some.part.0+0x276>
 800e924:	e7e2      	b.n	800e8ec <rclc_executor_spin_some.part.0+0x2b8>
 800e926:	270b      	movs	r7, #11
 800e928:	e783      	b.n	800e832 <rclc_executor_spin_some.part.0+0x1fe>
 800e92a:	68aa      	ldr	r2, [r5, #8]
 800e92c:	e6e2      	b.n	800e6f4 <rclc_executor_spin_some.part.0+0xc0>
 800e92e:	68aa      	ldr	r2, [r5, #8]
 800e930:	e7a1      	b.n	800e876 <rclc_executor_spin_some.part.0+0x242>
 800e932:	6842      	ldr	r2, [r0, #4]
 800e934:	6a11      	ldr	r1, [r2, #32]
 800e936:	2900      	cmp	r1, #0
 800e938:	f47f af22 	bne.w	800e780 <rclc_executor_spin_some.part.0+0x14c>
 800e93c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800e940:	2a00      	cmp	r2, #0
 800e942:	f43f af0b 	beq.w	800e75c <rclc_executor_spin_some.part.0+0x128>
 800e946:	e71b      	b.n	800e780 <rclc_executor_spin_some.part.0+0x14c>
 800e948:	6842      	ldr	r2, [r0, #4]
 800e94a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800e94c:	f031 417f 	bics.w	r1, r1, #4278190080	; 0xff000000
 800e950:	f47f af16 	bne.w	800e780 <rclc_executor_spin_some.part.0+0x14c>
 800e954:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
 800e958:	2900      	cmp	r1, #0
 800e95a:	f47f af11 	bne.w	800e780 <rclc_executor_spin_some.part.0+0x14c>
 800e95e:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 800e962:	2a00      	cmp	r2, #0
 800e964:	f43f aefa 	beq.w	800e75c <rclc_executor_spin_some.part.0+0x128>
 800e968:	e70a      	b.n	800e780 <rclc_executor_spin_some.part.0+0x14c>
 800e96a:	68aa      	ldr	r2, [r5, #8]
 800e96c:	461c      	mov	r4, r3
 800e96e:	e782      	b.n	800e876 <rclc_executor_spin_some.part.0+0x242>
 800e970:	68aa      	ldr	r2, [r5, #8]
 800e972:	461c      	mov	r4, r3
 800e974:	e6be      	b.n	800e6f4 <rclc_executor_spin_some.part.0+0xc0>
 800e976:	bf00      	nop

0800e978 <rclc_executor_spin>:
 800e978:	b1d0      	cbz	r0, 800e9b0 <rclc_executor_spin+0x38>
 800e97a:	b510      	push	{r4, lr}
 800e97c:	4604      	mov	r4, r0
 800e97e:	b082      	sub	sp, #8
 800e980:	e004      	b.n	800e98c <rclc_executor_spin+0x14>
 800e982:	f7ff fe57 	bl	800e634 <rclc_executor_spin_some.part.0>
 800e986:	f030 0302 	bics.w	r3, r0, #2
 800e98a:	d10f      	bne.n	800e9ac <rclc_executor_spin+0x34>
 800e98c:	6860      	ldr	r0, [r4, #4]
 800e98e:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
 800e992:	e9cd 2300 	strd	r2, r3, [sp]
 800e996:	f007 f8b7 	bl	8015b08 <rcl_context_is_valid>
 800e99a:	4601      	mov	r1, r0
 800e99c:	4620      	mov	r0, r4
 800e99e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e9a2:	2900      	cmp	r1, #0
 800e9a4:	d1ed      	bne.n	800e982 <rclc_executor_spin+0xa>
 800e9a6:	f000 f9f7 	bl	800ed98 <rcutils_reset_error>
 800e9aa:	2001      	movs	r0, #1
 800e9ac:	b002      	add	sp, #8
 800e9ae:	bd10      	pop	{r4, pc}
 800e9b0:	200b      	movs	r0, #11
 800e9b2:	4770      	bx	lr

0800e9b4 <rclc_executor_handle_counters_zero_init>:
 800e9b4:	b130      	cbz	r0, 800e9c4 <rclc_executor_handle_counters_zero_init+0x10>
 800e9b6:	2220      	movs	r2, #32
 800e9b8:	2100      	movs	r1, #0
 800e9ba:	b508      	push	{r3, lr}
 800e9bc:	f00f ff66 	bl	801e88c <memset>
 800e9c0:	2000      	movs	r0, #0
 800e9c2:	bd08      	pop	{r3, pc}
 800e9c4:	200b      	movs	r0, #11
 800e9c6:	4770      	bx	lr

0800e9c8 <rclc_executor_handle_init>:
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	b178      	cbz	r0, 800e9ec <rclc_executor_handle_init+0x24>
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	f04f 0c0b 	mov.w	ip, #11
 800e9d2:	6341      	str	r1, [r0, #52]	; 0x34
 800e9d4:	4610      	mov	r0, r2
 800e9d6:	f8a3 c000 	strh.w	ip, [r3]
 800e9da:	631a      	str	r2, [r3, #48]	; 0x30
 800e9dc:	871a      	strh	r2, [r3, #56]	; 0x38
 800e9de:	ed9f 7b04 	vldr	d7, [pc, #16]	; 800e9f0 <rclc_executor_handle_init+0x28>
 800e9e2:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800e9e6:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
 800e9ea:	4770      	bx	lr
 800e9ec:	200b      	movs	r0, #11
 800e9ee:	4770      	bx	lr
	...

0800e9f8 <rclc_support_init>:
 800e9f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9fc:	b086      	sub	sp, #24
 800e9fe:	b3bb      	cbz	r3, 800ea70 <rclc_support_init+0x78>
 800ea00:	4606      	mov	r6, r0
 800ea02:	b3a8      	cbz	r0, 800ea70 <rclc_support_init+0x78>
 800ea04:	461c      	mov	r4, r3
 800ea06:	460f      	mov	r7, r1
 800ea08:	4690      	mov	r8, r2
 800ea0a:	f007 fa1d 	bl	8015e48 <rcl_get_zero_initialized_init_options>
 800ea0e:	f104 050c 	add.w	r5, r4, #12
 800ea12:	9005      	str	r0, [sp, #20]
 800ea14:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ea18:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ea1c:	a805      	add	r0, sp, #20
 800ea1e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ea22:	f007 fa13 	bl	8015e4c <rcl_init_options_init>
 800ea26:	4605      	mov	r5, r0
 800ea28:	b9e0      	cbnz	r0, 800ea64 <rclc_support_init+0x6c>
 800ea2a:	ad02      	add	r5, sp, #8
 800ea2c:	4628      	mov	r0, r5
 800ea2e:	f007 f861 	bl	8015af4 <rcl_get_zero_initialized_context>
 800ea32:	4633      	mov	r3, r6
 800ea34:	aa05      	add	r2, sp, #20
 800ea36:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ea3a:	e886 0003 	stmia.w	r6, {r0, r1}
 800ea3e:	4641      	mov	r1, r8
 800ea40:	4638      	mov	r0, r7
 800ea42:	f007 f8c7 	bl	8015bd4 <rcl_init>
 800ea46:	4605      	mov	r5, r0
 800ea48:	b9b8      	cbnz	r0, 800ea7a <rclc_support_init+0x82>
 800ea4a:	4622      	mov	r2, r4
 800ea4c:	f106 010c 	add.w	r1, r6, #12
 800ea50:	2003      	movs	r0, #3
 800ea52:	60b4      	str	r4, [r6, #8]
 800ea54:	f008 fa10 	bl	8016e78 <rcl_clock_init>
 800ea58:	4605      	mov	r5, r0
 800ea5a:	b970      	cbnz	r0, 800ea7a <rclc_support_init+0x82>
 800ea5c:	a805      	add	r0, sp, #20
 800ea5e:	f007 fa51 	bl	8015f04 <rcl_init_options_fini>
 800ea62:	b108      	cbz	r0, 800ea68 <rclc_support_init+0x70>
 800ea64:	f000 f998 	bl	800ed98 <rcutils_reset_error>
 800ea68:	4628      	mov	r0, r5
 800ea6a:	b006      	add	sp, #24
 800ea6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea70:	250b      	movs	r5, #11
 800ea72:	4628      	mov	r0, r5
 800ea74:	b006      	add	sp, #24
 800ea76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea7a:	f000 f98d 	bl	800ed98 <rcutils_reset_error>
 800ea7e:	a805      	add	r0, sp, #20
 800ea80:	f007 fa40 	bl	8015f04 <rcl_init_options_fini>
 800ea84:	2800      	cmp	r0, #0
 800ea86:	d0ef      	beq.n	800ea68 <rclc_support_init+0x70>
 800ea88:	e7ec      	b.n	800ea64 <rclc_support_init+0x6c>
 800ea8a:	bf00      	nop

0800ea8c <rclc_node_init_default>:
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	bf18      	it	ne
 800ea90:	2a00      	cmpne	r2, #0
 800ea92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ea96:	4616      	mov	r6, r2
 800ea98:	bf0c      	ite	eq
 800ea9a:	2201      	moveq	r2, #1
 800ea9c:	2200      	movne	r2, #0
 800ea9e:	b0a3      	sub	sp, #140	; 0x8c
 800eaa0:	2900      	cmp	r1, #0
 800eaa2:	bf08      	it	eq
 800eaa4:	f042 0201 	orreq.w	r2, r2, #1
 800eaa8:	bb22      	cbnz	r2, 800eaf4 <rclc_node_init_default+0x68>
 800eaaa:	4604      	mov	r4, r0
 800eaac:	b310      	cbz	r0, 800eaf4 <rclc_node_init_default+0x68>
 800eaae:	f10d 0810 	add.w	r8, sp, #16
 800eab2:	461f      	mov	r7, r3
 800eab4:	460d      	mov	r5, r1
 800eab6:	f10d 0918 	add.w	r9, sp, #24
 800eaba:	4640      	mov	r0, r8
 800eabc:	f007 face 	bl	801605c <rcl_get_zero_initialized_node>
 800eac0:	e898 0003 	ldmia.w	r8, {r0, r1}
 800eac4:	e884 0003 	stmia.w	r4, {r0, r1}
 800eac8:	4648      	mov	r0, r9
 800eaca:	f007 fc61 	bl	8016390 <rcl_node_get_default_options>
 800eace:	4640      	mov	r0, r8
 800ead0:	f007 fac4 	bl	801605c <rcl_get_zero_initialized_node>
 800ead4:	f8cd 9000 	str.w	r9, [sp]
 800ead8:	463b      	mov	r3, r7
 800eada:	4632      	mov	r2, r6
 800eadc:	e898 0003 	ldmia.w	r8, {r0, r1}
 800eae0:	e884 0003 	stmia.w	r4, {r0, r1}
 800eae4:	4629      	mov	r1, r5
 800eae6:	4620      	mov	r0, r4
 800eae8:	f007 fac2 	bl	8016070 <rcl_node_init>
 800eaec:	b930      	cbnz	r0, 800eafc <rclc_node_init_default+0x70>
 800eaee:	b023      	add	sp, #140	; 0x8c
 800eaf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eaf4:	200b      	movs	r0, #11
 800eaf6:	b023      	add	sp, #140	; 0x8c
 800eaf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eafc:	9003      	str	r0, [sp, #12]
 800eafe:	f000 f94b 	bl	800ed98 <rcutils_reset_error>
 800eb02:	f000 f949 	bl	800ed98 <rcutils_reset_error>
 800eb06:	9803      	ldr	r0, [sp, #12]
 800eb08:	b023      	add	sp, #140	; 0x8c
 800eb0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb0e:	bf00      	nop

0800eb10 <rclc_publisher_init_best_effort>:
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	bf18      	it	ne
 800eb14:	2a00      	cmpne	r2, #0
 800eb16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb1a:	4616      	mov	r6, r2
 800eb1c:	bf0c      	ite	eq
 800eb1e:	2201      	moveq	r2, #1
 800eb20:	2200      	movne	r2, #0
 800eb22:	b0a0      	sub	sp, #128	; 0x80
 800eb24:	2900      	cmp	r1, #0
 800eb26:	bf08      	it	eq
 800eb28:	f042 0201 	orreq.w	r2, r2, #1
 800eb2c:	bb1a      	cbnz	r2, 800eb76 <rclc_publisher_init_best_effort+0x66>
 800eb2e:	4604      	mov	r4, r0
 800eb30:	b308      	cbz	r0, 800eb76 <rclc_publisher_init_best_effort+0x66>
 800eb32:	f10d 0810 	add.w	r8, sp, #16
 800eb36:	461f      	mov	r7, r3
 800eb38:	460d      	mov	r5, r1
 800eb3a:	f7fe ff89 	bl	800da50 <rcl_get_zero_initialized_publisher>
 800eb3e:	6020      	str	r0, [r4, #0]
 800eb40:	4640      	mov	r0, r8
 800eb42:	f7ff f827 	bl	800db94 <rcl_publisher_get_default_options>
 800eb46:	2250      	movs	r2, #80	; 0x50
 800eb48:	490d      	ldr	r1, [pc, #52]	; (800eb80 <rclc_publisher_init_best_effort+0x70>)
 800eb4a:	4640      	mov	r0, r8
 800eb4c:	f00f ffcf 	bl	801eaee <memcpy>
 800eb50:	463b      	mov	r3, r7
 800eb52:	4632      	mov	r2, r6
 800eb54:	4629      	mov	r1, r5
 800eb56:	4620      	mov	r0, r4
 800eb58:	f8cd 8000 	str.w	r8, [sp]
 800eb5c:	f7fe ff7e 	bl	800da5c <rcl_publisher_init>
 800eb60:	b910      	cbnz	r0, 800eb68 <rclc_publisher_init_best_effort+0x58>
 800eb62:	b020      	add	sp, #128	; 0x80
 800eb64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb68:	9003      	str	r0, [sp, #12]
 800eb6a:	f000 f915 	bl	800ed98 <rcutils_reset_error>
 800eb6e:	9803      	ldr	r0, [sp, #12]
 800eb70:	b020      	add	sp, #128	; 0x80
 800eb72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb76:	200b      	movs	r0, #11
 800eb78:	b020      	add	sp, #128	; 0x80
 800eb7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb7e:	bf00      	nop
 800eb80:	080207e0 	.word	0x080207e0

0800eb84 <rclc_service_init_default>:
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	bf18      	it	ne
 800eb88:	2a00      	cmpne	r2, #0
 800eb8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb8e:	4616      	mov	r6, r2
 800eb90:	bf0c      	ite	eq
 800eb92:	2201      	moveq	r2, #1
 800eb94:	2200      	movne	r2, #0
 800eb96:	b09e      	sub	sp, #120	; 0x78
 800eb98:	2900      	cmp	r1, #0
 800eb9a:	bf08      	it	eq
 800eb9c:	f042 0201 	orreq.w	r2, r2, #1
 800eba0:	bb1a      	cbnz	r2, 800ebea <rclc_service_init_default+0x66>
 800eba2:	4604      	mov	r4, r0
 800eba4:	b308      	cbz	r0, 800ebea <rclc_service_init_default+0x66>
 800eba6:	f10d 0810 	add.w	r8, sp, #16
 800ebaa:	461f      	mov	r7, r3
 800ebac:	460d      	mov	r5, r1
 800ebae:	f007 fdf3 	bl	8016798 <rcl_get_zero_initialized_service>
 800ebb2:	6020      	str	r0, [r4, #0]
 800ebb4:	4640      	mov	r0, r8
 800ebb6:	f007 fe9d 	bl	80168f4 <rcl_service_get_default_options>
 800ebba:	2250      	movs	r2, #80	; 0x50
 800ebbc:	490d      	ldr	r1, [pc, #52]	; (800ebf4 <rclc_service_init_default+0x70>)
 800ebbe:	4640      	mov	r0, r8
 800ebc0:	f00f ff95 	bl	801eaee <memcpy>
 800ebc4:	463b      	mov	r3, r7
 800ebc6:	4632      	mov	r2, r6
 800ebc8:	4629      	mov	r1, r5
 800ebca:	4620      	mov	r0, r4
 800ebcc:	f8cd 8000 	str.w	r8, [sp]
 800ebd0:	f007 fde8 	bl	80167a4 <rcl_service_init>
 800ebd4:	b910      	cbnz	r0, 800ebdc <rclc_service_init_default+0x58>
 800ebd6:	b01e      	add	sp, #120	; 0x78
 800ebd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebdc:	9003      	str	r0, [sp, #12]
 800ebde:	f000 f8db 	bl	800ed98 <rcutils_reset_error>
 800ebe2:	9803      	ldr	r0, [sp, #12]
 800ebe4:	b01e      	add	sp, #120	; 0x78
 800ebe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebea:	200b      	movs	r0, #11
 800ebec:	b01e      	add	sp, #120	; 0x78
 800ebee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebf2:	bf00      	nop
 800ebf4:	08020830 	.word	0x08020830

0800ebf8 <rclc_subscription_init_best_effort>:
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	bf18      	it	ne
 800ebfc:	2a00      	cmpne	r2, #0
 800ebfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec02:	4616      	mov	r6, r2
 800ec04:	bf0c      	ite	eq
 800ec06:	2201      	moveq	r2, #1
 800ec08:	2200      	movne	r2, #0
 800ec0a:	b0a2      	sub	sp, #136	; 0x88
 800ec0c:	2900      	cmp	r1, #0
 800ec0e:	bf08      	it	eq
 800ec10:	f042 0201 	orreq.w	r2, r2, #1
 800ec14:	bb1a      	cbnz	r2, 800ec5e <rclc_subscription_init_best_effort+0x66>
 800ec16:	4604      	mov	r4, r0
 800ec18:	b308      	cbz	r0, 800ec5e <rclc_subscription_init_best_effort+0x66>
 800ec1a:	f10d 0810 	add.w	r8, sp, #16
 800ec1e:	461f      	mov	r7, r3
 800ec20:	460d      	mov	r5, r1
 800ec22:	f007 ffb9 	bl	8016b98 <rcl_get_zero_initialized_subscription>
 800ec26:	6020      	str	r0, [r4, #0]
 800ec28:	4640      	mov	r0, r8
 800ec2a:	f008 f869 	bl	8016d00 <rcl_subscription_get_default_options>
 800ec2e:	2250      	movs	r2, #80	; 0x50
 800ec30:	490d      	ldr	r1, [pc, #52]	; (800ec68 <rclc_subscription_init_best_effort+0x70>)
 800ec32:	4640      	mov	r0, r8
 800ec34:	f00f ff5b 	bl	801eaee <memcpy>
 800ec38:	463b      	mov	r3, r7
 800ec3a:	4632      	mov	r2, r6
 800ec3c:	4629      	mov	r1, r5
 800ec3e:	4620      	mov	r0, r4
 800ec40:	f8cd 8000 	str.w	r8, [sp]
 800ec44:	f007 ffae 	bl	8016ba4 <rcl_subscription_init>
 800ec48:	b910      	cbnz	r0, 800ec50 <rclc_subscription_init_best_effort+0x58>
 800ec4a:	b022      	add	sp, #136	; 0x88
 800ec4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec50:	9003      	str	r0, [sp, #12]
 800ec52:	f000 f8a1 	bl	800ed98 <rcutils_reset_error>
 800ec56:	9803      	ldr	r0, [sp, #12]
 800ec58:	b022      	add	sp, #136	; 0x88
 800ec5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec5e:	200b      	movs	r0, #11
 800ec60:	b022      	add	sp, #136	; 0x88
 800ec62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec66:	bf00      	nop
 800ec68:	08020880 	.word	0x08020880

0800ec6c <rclc_timer_init_default>:
 800ec6c:	b361      	cbz	r1, 800ecc8 <rclc_timer_init_default+0x5c>
 800ec6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec72:	4606      	mov	r6, r0
 800ec74:	b08a      	sub	sp, #40	; 0x28
 800ec76:	b318      	cbz	r0, 800ecc0 <rclc_timer_init_default+0x54>
 800ec78:	460d      	mov	r5, r1
 800ec7a:	4690      	mov	r8, r2
 800ec7c:	461f      	mov	r7, r3
 800ec7e:	f008 faf3 	bl	8017268 <rcl_get_zero_initialized_timer>
 800ec82:	68ac      	ldr	r4, [r5, #8]
 800ec84:	f10d 0c0c 	add.w	ip, sp, #12
 800ec88:	6030      	str	r0, [r6, #0]
 800ec8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ec8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ec90:	6823      	ldr	r3, [r4, #0]
 800ec92:	462a      	mov	r2, r5
 800ec94:	f105 010c 	add.w	r1, r5, #12
 800ec98:	4630      	mov	r0, r6
 800ec9a:	f8cc 3000 	str.w	r3, [ip]
 800ec9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eca0:	e9cd 8700 	strd	r8, r7, [sp]
 800eca4:	9302      	str	r3, [sp, #8]
 800eca6:	f008 fae5 	bl	8017274 <rcl_timer_init>
 800ecaa:	b910      	cbnz	r0, 800ecb2 <rclc_timer_init_default+0x46>
 800ecac:	b00a      	add	sp, #40	; 0x28
 800ecae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecb2:	9009      	str	r0, [sp, #36]	; 0x24
 800ecb4:	f000 f870 	bl	800ed98 <rcutils_reset_error>
 800ecb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ecba:	b00a      	add	sp, #40	; 0x28
 800ecbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecc0:	200b      	movs	r0, #11
 800ecc2:	b00a      	add	sp, #40	; 0x28
 800ecc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecc8:	200b      	movs	r0, #11
 800ecca:	4770      	bx	lr

0800eccc <__default_zero_allocate>:
 800eccc:	f00f ba00 	b.w	801e0d0 <calloc>

0800ecd0 <__default_reallocate>:
 800ecd0:	f00f bb8c 	b.w	801e3ec <realloc>

0800ecd4 <__default_deallocate>:
 800ecd4:	f00f ba6a 	b.w	801e1ac <free>

0800ecd8 <__default_allocate>:
 800ecd8:	f00f ba60 	b.w	801e19c <malloc>

0800ecdc <rcutils_get_zero_initialized_allocator>:
 800ecdc:	b510      	push	{r4, lr}
 800ecde:	4c05      	ldr	r4, [pc, #20]	; (800ecf4 <rcutils_get_zero_initialized_allocator+0x18>)
 800ece0:	4686      	mov	lr, r0
 800ece2:	4684      	mov	ip, r0
 800ece4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ece6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ecea:	6823      	ldr	r3, [r4, #0]
 800ecec:	4670      	mov	r0, lr
 800ecee:	f8cc 3000 	str.w	r3, [ip]
 800ecf2:	bd10      	pop	{r4, pc}
 800ecf4:	080208d0 	.word	0x080208d0

0800ecf8 <rcutils_set_default_allocator>:
 800ecf8:	b1a8      	cbz	r0, 800ed26 <rcutils_set_default_allocator+0x2e>
 800ecfa:	6802      	ldr	r2, [r0, #0]
 800ecfc:	b1a2      	cbz	r2, 800ed28 <rcutils_set_default_allocator+0x30>
 800ecfe:	6841      	ldr	r1, [r0, #4]
 800ed00:	b1a1      	cbz	r1, 800ed2c <rcutils_set_default_allocator+0x34>
 800ed02:	b410      	push	{r4}
 800ed04:	68c4      	ldr	r4, [r0, #12]
 800ed06:	b164      	cbz	r4, 800ed22 <rcutils_set_default_allocator+0x2a>
 800ed08:	6880      	ldr	r0, [r0, #8]
 800ed0a:	b138      	cbz	r0, 800ed1c <rcutils_set_default_allocator+0x24>
 800ed0c:	4b08      	ldr	r3, [pc, #32]	; (800ed30 <rcutils_set_default_allocator+0x38>)
 800ed0e:	601a      	str	r2, [r3, #0]
 800ed10:	2200      	movs	r2, #0
 800ed12:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800ed16:	2001      	movs	r0, #1
 800ed18:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800ed1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed20:	4770      	bx	lr
 800ed22:	4620      	mov	r0, r4
 800ed24:	e7fa      	b.n	800ed1c <rcutils_set_default_allocator+0x24>
 800ed26:	4770      	bx	lr
 800ed28:	4610      	mov	r0, r2
 800ed2a:	4770      	bx	lr
 800ed2c:	4608      	mov	r0, r1
 800ed2e:	4770      	bx	lr
 800ed30:	20000ad4 	.word	0x20000ad4

0800ed34 <rcutils_get_default_allocator>:
 800ed34:	b510      	push	{r4, lr}
 800ed36:	4c05      	ldr	r4, [pc, #20]	; (800ed4c <rcutils_get_default_allocator+0x18>)
 800ed38:	4686      	mov	lr, r0
 800ed3a:	4684      	mov	ip, r0
 800ed3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ed3e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ed42:	6823      	ldr	r3, [r4, #0]
 800ed44:	4670      	mov	r0, lr
 800ed46:	f8cc 3000 	str.w	r3, [ip]
 800ed4a:	bd10      	pop	{r4, pc}
 800ed4c:	20000ad4 	.word	0x20000ad4

0800ed50 <rcutils_allocator_is_valid>:
 800ed50:	b158      	cbz	r0, 800ed6a <rcutils_allocator_is_valid+0x1a>
 800ed52:	6803      	ldr	r3, [r0, #0]
 800ed54:	b143      	cbz	r3, 800ed68 <rcutils_allocator_is_valid+0x18>
 800ed56:	6843      	ldr	r3, [r0, #4]
 800ed58:	b133      	cbz	r3, 800ed68 <rcutils_allocator_is_valid+0x18>
 800ed5a:	68c3      	ldr	r3, [r0, #12]
 800ed5c:	b123      	cbz	r3, 800ed68 <rcutils_allocator_is_valid+0x18>
 800ed5e:	6880      	ldr	r0, [r0, #8]
 800ed60:	3800      	subs	r0, #0
 800ed62:	bf18      	it	ne
 800ed64:	2001      	movne	r0, #1
 800ed66:	4770      	bx	lr
 800ed68:	4618      	mov	r0, r3
 800ed6a:	4770      	bx	lr

0800ed6c <rcutils_get_error_string>:
 800ed6c:	4b06      	ldr	r3, [pc, #24]	; (800ed88 <rcutils_get_error_string+0x1c>)
 800ed6e:	781b      	ldrb	r3, [r3, #0]
 800ed70:	b13b      	cbz	r3, 800ed82 <rcutils_get_error_string+0x16>
 800ed72:	4b06      	ldr	r3, [pc, #24]	; (800ed8c <rcutils_get_error_string+0x20>)
 800ed74:	781a      	ldrb	r2, [r3, #0]
 800ed76:	b90a      	cbnz	r2, 800ed7c <rcutils_get_error_string+0x10>
 800ed78:	2201      	movs	r2, #1
 800ed7a:	701a      	strb	r2, [r3, #0]
 800ed7c:	4b04      	ldr	r3, [pc, #16]	; (800ed90 <rcutils_get_error_string+0x24>)
 800ed7e:	7818      	ldrb	r0, [r3, #0]
 800ed80:	4770      	bx	lr
 800ed82:	4b04      	ldr	r3, [pc, #16]	; (800ed94 <rcutils_get_error_string+0x28>)
 800ed84:	7818      	ldrb	r0, [r3, #0]
 800ed86:	4770      	bx	lr
 800ed88:	2000ca88 	.word	0x2000ca88
 800ed8c:	2000caa1 	.word	0x2000caa1
 800ed90:	2000caa0 	.word	0x2000caa0
 800ed94:	0801fbe8 	.word	0x0801fbe8

0800ed98 <rcutils_reset_error>:
 800ed98:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800edb8 <rcutils_reset_error+0x20>
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	4a08      	ldr	r2, [pc, #32]	; (800edc0 <rcutils_reset_error+0x28>)
 800eda0:	4808      	ldr	r0, [pc, #32]	; (800edc4 <rcutils_reset_error+0x2c>)
 800eda2:	8013      	strh	r3, [r2, #0]
 800eda4:	4908      	ldr	r1, [pc, #32]	; (800edc8 <rcutils_reset_error+0x30>)
 800eda6:	7003      	strb	r3, [r0, #0]
 800eda8:	700b      	strb	r3, [r1, #0]
 800edaa:	ed82 7b02 	vstr	d7, [r2, #8]
 800edae:	4a07      	ldr	r2, [pc, #28]	; (800edcc <rcutils_reset_error+0x34>)
 800edb0:	7013      	strb	r3, [r2, #0]
 800edb2:	4770      	bx	lr
 800edb4:	f3af 8000 	nop.w
	...
 800edc0:	2000ca90 	.word	0x2000ca90
 800edc4:	2000caa1 	.word	0x2000caa1
 800edc8:	2000caa0 	.word	0x2000caa0
 800edcc:	2000ca88 	.word	0x2000ca88

0800edd0 <rcutils_system_time_now>:
 800edd0:	b310      	cbz	r0, 800ee18 <rcutils_system_time_now+0x48>
 800edd2:	b570      	push	{r4, r5, r6, lr}
 800edd4:	b084      	sub	sp, #16
 800edd6:	4604      	mov	r4, r0
 800edd8:	2001      	movs	r0, #1
 800edda:	4669      	mov	r1, sp
 800eddc:	f7f4 fb84 	bl	80034e8 <clock_gettime>
 800ede0:	2800      	cmp	r0, #0
 800ede2:	db16      	blt.n	800ee12 <rcutils_system_time_now+0x42>
 800ede4:	e9dd 3100 	ldrd	r3, r1, [sp]
 800ede8:	2900      	cmp	r1, #0
 800edea:	db12      	blt.n	800ee12 <rcutils_system_time_now+0x42>
 800edec:	ea53 0201 	orrs.w	r2, r3, r1
 800edf0:	9d02      	ldr	r5, [sp, #8]
 800edf2:	d101      	bne.n	800edf8 <rcutils_system_time_now+0x28>
 800edf4:	2d00      	cmp	r5, #0
 800edf6:	db0c      	blt.n	800ee12 <rcutils_system_time_now+0x42>
 800edf8:	4e08      	ldr	r6, [pc, #32]	; (800ee1c <rcutils_system_time_now+0x4c>)
 800edfa:	2000      	movs	r0, #0
 800edfc:	fba3 3206 	umull	r3, r2, r3, r6
 800ee00:	195b      	adds	r3, r3, r5
 800ee02:	fb06 2201 	mla	r2, r6, r1, r2
 800ee06:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800ee0a:	e9c4 3200 	strd	r3, r2, [r4]
 800ee0e:	b004      	add	sp, #16
 800ee10:	bd70      	pop	{r4, r5, r6, pc}
 800ee12:	2002      	movs	r0, #2
 800ee14:	b004      	add	sp, #16
 800ee16:	bd70      	pop	{r4, r5, r6, pc}
 800ee18:	200b      	movs	r0, #11
 800ee1a:	4770      	bx	lr
 800ee1c:	3b9aca00 	.word	0x3b9aca00

0800ee20 <rcutils_steady_time_now>:
 800ee20:	b310      	cbz	r0, 800ee68 <rcutils_steady_time_now+0x48>
 800ee22:	b570      	push	{r4, r5, r6, lr}
 800ee24:	b084      	sub	sp, #16
 800ee26:	4604      	mov	r4, r0
 800ee28:	2000      	movs	r0, #0
 800ee2a:	4669      	mov	r1, sp
 800ee2c:	f7f4 fb5c 	bl	80034e8 <clock_gettime>
 800ee30:	2800      	cmp	r0, #0
 800ee32:	db16      	blt.n	800ee62 <rcutils_steady_time_now+0x42>
 800ee34:	e9dd 3100 	ldrd	r3, r1, [sp]
 800ee38:	2900      	cmp	r1, #0
 800ee3a:	db12      	blt.n	800ee62 <rcutils_steady_time_now+0x42>
 800ee3c:	ea53 0201 	orrs.w	r2, r3, r1
 800ee40:	9d02      	ldr	r5, [sp, #8]
 800ee42:	d101      	bne.n	800ee48 <rcutils_steady_time_now+0x28>
 800ee44:	2d00      	cmp	r5, #0
 800ee46:	db0c      	blt.n	800ee62 <rcutils_steady_time_now+0x42>
 800ee48:	4e08      	ldr	r6, [pc, #32]	; (800ee6c <rcutils_steady_time_now+0x4c>)
 800ee4a:	2000      	movs	r0, #0
 800ee4c:	fba3 3206 	umull	r3, r2, r3, r6
 800ee50:	195b      	adds	r3, r3, r5
 800ee52:	fb06 2201 	mla	r2, r6, r1, r2
 800ee56:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800ee5a:	e9c4 3200 	strd	r3, r2, [r4]
 800ee5e:	b004      	add	sp, #16
 800ee60:	bd70      	pop	{r4, r5, r6, pc}
 800ee62:	2002      	movs	r0, #2
 800ee64:	b004      	add	sp, #16
 800ee66:	bd70      	pop	{r4, r5, r6, pc}
 800ee68:	200b      	movs	r0, #11
 800ee6a:	4770      	bx	lr
 800ee6c:	3b9aca00 	.word	0x3b9aca00

0800ee70 <rmw_get_default_publisher_options>:
 800ee70:	2200      	movs	r2, #0
 800ee72:	6002      	str	r2, [r0, #0]
 800ee74:	7102      	strb	r2, [r0, #4]
 800ee76:	4770      	bx	lr

0800ee78 <rmw_uros_set_custom_transport>:
 800ee78:	b470      	push	{r4, r5, r6}
 800ee7a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800ee7e:	b162      	cbz	r2, 800ee9a <rmw_uros_set_custom_transport+0x22>
 800ee80:	b15b      	cbz	r3, 800ee9a <rmw_uros_set_custom_transport+0x22>
 800ee82:	b155      	cbz	r5, 800ee9a <rmw_uros_set_custom_transport+0x22>
 800ee84:	b14e      	cbz	r6, 800ee9a <rmw_uros_set_custom_transport+0x22>
 800ee86:	4c06      	ldr	r4, [pc, #24]	; (800eea0 <rmw_uros_set_custom_transport+0x28>)
 800ee88:	7020      	strb	r0, [r4, #0]
 800ee8a:	2000      	movs	r0, #0
 800ee8c:	6166      	str	r6, [r4, #20]
 800ee8e:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800ee92:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ee96:	bc70      	pop	{r4, r5, r6}
 800ee98:	4770      	bx	lr
 800ee9a:	200b      	movs	r0, #11
 800ee9c:	bc70      	pop	{r4, r5, r6}
 800ee9e:	4770      	bx	lr
 800eea0:	2000caa4 	.word	0x2000caa4

0800eea4 <flush_session>:
 800eea4:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800eea6:	f003 be87 	b.w	8012bb8 <uxr_run_session_until_confirm_delivery>
 800eeaa:	bf00      	nop

0800eeac <rmw_publish>:
 800eeac:	2800      	cmp	r0, #0
 800eeae:	d053      	beq.n	800ef58 <rmw_publish+0xac>
 800eeb0:	b570      	push	{r4, r5, r6, lr}
 800eeb2:	460d      	mov	r5, r1
 800eeb4:	b08e      	sub	sp, #56	; 0x38
 800eeb6:	2900      	cmp	r1, #0
 800eeb8:	d04b      	beq.n	800ef52 <rmw_publish+0xa6>
 800eeba:	4604      	mov	r4, r0
 800eebc:	6800      	ldr	r0, [r0, #0]
 800eebe:	f000 fd97 	bl	800f9f0 <is_uxrce_rmw_identifier_valid>
 800eec2:	2800      	cmp	r0, #0
 800eec4:	d045      	beq.n	800ef52 <rmw_publish+0xa6>
 800eec6:	6866      	ldr	r6, [r4, #4]
 800eec8:	2e00      	cmp	r6, #0
 800eeca:	d042      	beq.n	800ef52 <rmw_publish+0xa6>
 800eecc:	69b4      	ldr	r4, [r6, #24]
 800eece:	4628      	mov	r0, r5
 800eed0:	6923      	ldr	r3, [r4, #16]
 800eed2:	4798      	blx	r3
 800eed4:	69f3      	ldr	r3, [r6, #28]
 800eed6:	9005      	str	r0, [sp, #20]
 800eed8:	b113      	cbz	r3, 800eee0 <rmw_publish+0x34>
 800eeda:	a805      	add	r0, sp, #20
 800eedc:	4798      	blx	r3
 800eede:	9805      	ldr	r0, [sp, #20]
 800eee0:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800eee4:	691b      	ldr	r3, [r3, #16]
 800eee6:	9000      	str	r0, [sp, #0]
 800eee8:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800eeec:	6972      	ldr	r2, [r6, #20]
 800eeee:	ab06      	add	r3, sp, #24
 800eef0:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800eef2:	f004 fc5f 	bl	80137b4 <uxr_prepare_output_stream>
 800eef6:	b1d8      	cbz	r0, 800ef30 <rmw_publish+0x84>
 800eef8:	68a3      	ldr	r3, [r4, #8]
 800eefa:	a906      	add	r1, sp, #24
 800eefc:	4628      	mov	r0, r5
 800eefe:	4798      	blx	r3
 800ef00:	6a33      	ldr	r3, [r6, #32]
 800ef02:	4604      	mov	r4, r0
 800ef04:	b10b      	cbz	r3, 800ef0a <rmw_publish+0x5e>
 800ef06:	a806      	add	r0, sp, #24
 800ef08:	4798      	blx	r3
 800ef0a:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800ef0e:	2b01      	cmp	r3, #1
 800ef10:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800ef14:	d022      	beq.n	800ef5c <rmw_publish+0xb0>
 800ef16:	6918      	ldr	r0, [r3, #16]
 800ef18:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800ef1a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ef1e:	f003 fe4b 	bl	8012bb8 <uxr_run_session_until_confirm_delivery>
 800ef22:	4020      	ands	r0, r4
 800ef24:	b2c4      	uxtb	r4, r0
 800ef26:	f084 0001 	eor.w	r0, r4, #1
 800ef2a:	b2c0      	uxtb	r0, r0
 800ef2c:	b00e      	add	sp, #56	; 0x38
 800ef2e:	bd70      	pop	{r4, r5, r6, pc}
 800ef30:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800ef34:	6918      	ldr	r0, [r3, #16]
 800ef36:	9b05      	ldr	r3, [sp, #20]
 800ef38:	9602      	str	r6, [sp, #8]
 800ef3a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ef3e:	9300      	str	r3, [sp, #0]
 800ef40:	4b09      	ldr	r3, [pc, #36]	; (800ef68 <rmw_publish+0xbc>)
 800ef42:	9301      	str	r3, [sp, #4]
 800ef44:	ab06      	add	r3, sp, #24
 800ef46:	6972      	ldr	r2, [r6, #20]
 800ef48:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800ef4a:	f004 fc63 	bl	8013814 <uxr_prepare_output_stream_fragmented>
 800ef4e:	2800      	cmp	r0, #0
 800ef50:	d1d2      	bne.n	800eef8 <rmw_publish+0x4c>
 800ef52:	2001      	movs	r0, #1
 800ef54:	b00e      	add	sp, #56	; 0x38
 800ef56:	bd70      	pop	{r4, r5, r6, pc}
 800ef58:	2001      	movs	r0, #1
 800ef5a:	4770      	bx	lr
 800ef5c:	6918      	ldr	r0, [r3, #16]
 800ef5e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ef62:	f003 fa6f 	bl	8012444 <uxr_flash_output_streams>
 800ef66:	e7de      	b.n	800ef26 <rmw_publish+0x7a>
 800ef68:	0800eea5 	.word	0x0800eea5

0800ef6c <rmw_create_publisher>:
 800ef6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef70:	b087      	sub	sp, #28
 800ef72:	2800      	cmp	r0, #0
 800ef74:	f000 80d2 	beq.w	800f11c <rmw_create_publisher+0x1b0>
 800ef78:	460e      	mov	r6, r1
 800ef7a:	2900      	cmp	r1, #0
 800ef7c:	f000 80ce 	beq.w	800f11c <rmw_create_publisher+0x1b0>
 800ef80:	4604      	mov	r4, r0
 800ef82:	6800      	ldr	r0, [r0, #0]
 800ef84:	4615      	mov	r5, r2
 800ef86:	461f      	mov	r7, r3
 800ef88:	f000 fd32 	bl	800f9f0 <is_uxrce_rmw_identifier_valid>
 800ef8c:	f080 0001 	eor.w	r0, r0, #1
 800ef90:	b2c0      	uxtb	r0, r0
 800ef92:	2800      	cmp	r0, #0
 800ef94:	f040 80c2 	bne.w	800f11c <rmw_create_publisher+0x1b0>
 800ef98:	2d00      	cmp	r5, #0
 800ef9a:	f000 80bf 	beq.w	800f11c <rmw_create_publisher+0x1b0>
 800ef9e:	782b      	ldrb	r3, [r5, #0]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	f000 80bb 	beq.w	800f11c <rmw_create_publisher+0x1b0>
 800efa6:	2f00      	cmp	r7, #0
 800efa8:	f000 80b8 	beq.w	800f11c <rmw_create_publisher+0x1b0>
 800efac:	485e      	ldr	r0, [pc, #376]	; (800f128 <rmw_create_publisher+0x1bc>)
 800efae:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800efb2:	f00a fc67 	bl	8019884 <get_memory>
 800efb6:	2800      	cmp	r0, #0
 800efb8:	f000 80b0 	beq.w	800f11c <rmw_create_publisher+0x1b0>
 800efbc:	6884      	ldr	r4, [r0, #8]
 800efbe:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 800efc2:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800efc6:	f00a fce3 	bl	8019990 <rmw_get_implementation_identifier>
 800efca:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800efce:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800efd2:	4628      	mov	r0, r5
 800efd4:	f7f1 f994 	bl	8000300 <strlen>
 800efd8:	3001      	adds	r0, #1
 800efda:	f104 0884 	add.w	r8, r4, #132	; 0x84
 800efde:	283c      	cmp	r0, #60	; 0x3c
 800efe0:	f200 808f 	bhi.w	800f102 <rmw_create_publisher+0x196>
 800efe4:	462b      	mov	r3, r5
 800efe6:	4a51      	ldr	r2, [pc, #324]	; (800f12c <rmw_create_publisher+0x1c0>)
 800efe8:	213c      	movs	r1, #60	; 0x3c
 800efea:	4650      	mov	r0, sl
 800efec:	f00f fb74 	bl	801e6d8 <sniprintf>
 800eff0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800eff4:	4639      	mov	r1, r7
 800eff6:	2250      	movs	r2, #80	; 0x50
 800eff8:	67e3      	str	r3, [r4, #124]	; 0x7c
 800effa:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800effe:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 800f002:	f00f fd74 	bl	801eaee <memcpy>
 800f006:	7a3b      	ldrb	r3, [r7, #8]
 800f008:	4630      	mov	r0, r6
 800f00a:	4949      	ldr	r1, [pc, #292]	; (800f130 <rmw_create_publisher+0x1c4>)
 800f00c:	2b02      	cmp	r3, #2
 800f00e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f012:	bf0c      	ite	eq
 800f014:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800f018:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800f01c:	67a3      	str	r3, [r4, #120]	; 0x78
 800f01e:	2300      	movs	r3, #0
 800f020:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800f024:	f000 fcf2 	bl	800fa0c <get_message_typesupport_handle>
 800f028:	2800      	cmp	r0, #0
 800f02a:	d06a      	beq.n	800f102 <rmw_create_publisher+0x196>
 800f02c:	6842      	ldr	r2, [r0, #4]
 800f02e:	61a2      	str	r2, [r4, #24]
 800f030:	2a00      	cmp	r2, #0
 800f032:	d066      	beq.n	800f102 <rmw_create_publisher+0x196>
 800f034:	4629      	mov	r1, r5
 800f036:	463b      	mov	r3, r7
 800f038:	4648      	mov	r0, r9
 800f03a:	f00a fee7 	bl	8019e0c <create_topic>
 800f03e:	6260      	str	r0, [r4, #36]	; 0x24
 800f040:	2800      	cmp	r0, #0
 800f042:	d062      	beq.n	800f10a <rmw_create_publisher+0x19e>
 800f044:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f048:	2103      	movs	r1, #3
 800f04a:	2506      	movs	r5, #6
 800f04c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f050:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 800f054:	1c42      	adds	r2, r0, #1
 800f056:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 800f05a:	f003 f8a3 	bl	80121a4 <uxr_object_id>
 800f05e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800f062:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f066:	6120      	str	r0, [r4, #16]
 800f068:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800f06c:	6910      	ldr	r0, [r2, #16]
 800f06e:	9500      	str	r5, [sp, #0]
 800f070:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f074:	6819      	ldr	r1, [r3, #0]
 800f076:	6922      	ldr	r2, [r4, #16]
 800f078:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800f07c:	f002 ff0a 	bl	8011e94 <uxr_buffer_create_publisher_bin>
 800f080:	4602      	mov	r2, r0
 800f082:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f086:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800f08a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800f08e:	f000 fb9d 	bl	800f7cc <run_xrce_session>
 800f092:	b3b0      	cbz	r0, 800f102 <rmw_create_publisher+0x196>
 800f094:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f098:	2105      	movs	r1, #5
 800f09a:	f10d 0a10 	add.w	sl, sp, #16
 800f09e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f0a2:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 800f0a6:	1c42      	adds	r2, r0, #1
 800f0a8:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 800f0ac:	f003 f87a 	bl	80121a4 <uxr_object_id>
 800f0b0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800f0b4:	4639      	mov	r1, r7
 800f0b6:	6160      	str	r0, [r4, #20]
 800f0b8:	691e      	ldr	r6, [r3, #16]
 800f0ba:	4650      	mov	r0, sl
 800f0bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f0c0:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800f0c4:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 800f0c8:	f8d3 7384 	ldr.w	r7, [r3, #900]	; 0x384
 800f0cc:	f000 fb9a 	bl	800f804 <convert_qos_profile>
 800f0d0:	9503      	str	r5, [sp, #12]
 800f0d2:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800f0d6:	9001      	str	r0, [sp, #4]
 800f0d8:	4630      	mov	r0, r6
 800f0da:	f8ad 1008 	strh.w	r1, [sp, #8]
 800f0de:	f8db 3010 	ldr.w	r3, [fp, #16]
 800f0e2:	9300      	str	r3, [sp, #0]
 800f0e4:	6839      	ldr	r1, [r7, #0]
 800f0e6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800f0ea:	f002 ff33 	bl	8011f54 <uxr_buffer_create_datawriter_bin>
 800f0ee:	4602      	mov	r2, r0
 800f0f0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f0f4:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800f0f8:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800f0fc:	f000 fb66 	bl	800f7cc <run_xrce_session>
 800f100:	b970      	cbnz	r0, 800f120 <rmw_create_publisher+0x1b4>
 800f102:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f104:	b108      	cbz	r0, 800f10a <rmw_create_publisher+0x19e>
 800f106:	f000 fa53 	bl	800f5b0 <rmw_uxrce_fini_topic_memory>
 800f10a:	4640      	mov	r0, r8
 800f10c:	f04f 0800 	mov.w	r8, #0
 800f110:	f000 f9f6 	bl	800f500 <rmw_uxrce_fini_publisher_memory>
 800f114:	4640      	mov	r0, r8
 800f116:	b007      	add	sp, #28
 800f118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f11c:	f04f 0800 	mov.w	r8, #0
 800f120:	4640      	mov	r0, r8
 800f122:	b007      	add	sp, #28
 800f124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f128:	2001150c 	.word	0x2001150c
 800f12c:	080208f4 	.word	0x080208f4
 800f130:	0801fa8c 	.word	0x0801fa8c

0800f134 <rmw_publisher_get_actual_qos>:
 800f134:	b178      	cbz	r0, 800f156 <rmw_publisher_get_actual_qos+0x22>
 800f136:	b510      	push	{r4, lr}
 800f138:	fab1 f481 	clz	r4, r1
 800f13c:	0964      	lsrs	r4, r4, #5
 800f13e:	b141      	cbz	r1, 800f152 <rmw_publisher_get_actual_qos+0x1e>
 800f140:	6843      	ldr	r3, [r0, #4]
 800f142:	2250      	movs	r2, #80	; 0x50
 800f144:	4608      	mov	r0, r1
 800f146:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800f14a:	f00f fcd0 	bl	801eaee <memcpy>
 800f14e:	4620      	mov	r0, r4
 800f150:	bd10      	pop	{r4, pc}
 800f152:	200b      	movs	r0, #11
 800f154:	bd10      	pop	{r4, pc}
 800f156:	200b      	movs	r0, #11
 800f158:	4770      	bx	lr
 800f15a:	bf00      	nop

0800f15c <rmw_destroy_publisher>:
 800f15c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f160:	b128      	cbz	r0, 800f16e <rmw_destroy_publisher+0x12>
 800f162:	4604      	mov	r4, r0
 800f164:	6800      	ldr	r0, [r0, #0]
 800f166:	460d      	mov	r5, r1
 800f168:	f000 fc42 	bl	800f9f0 <is_uxrce_rmw_identifier_valid>
 800f16c:	b918      	cbnz	r0, 800f176 <rmw_destroy_publisher+0x1a>
 800f16e:	2401      	movs	r4, #1
 800f170:	4620      	mov	r0, r4
 800f172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f176:	6863      	ldr	r3, [r4, #4]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d0f8      	beq.n	800f16e <rmw_destroy_publisher+0x12>
 800f17c:	fab5 f485 	clz	r4, r5
 800f180:	0964      	lsrs	r4, r4, #5
 800f182:	2d00      	cmp	r5, #0
 800f184:	d0f3      	beq.n	800f16e <rmw_destroy_publisher+0x12>
 800f186:	6828      	ldr	r0, [r5, #0]
 800f188:	f000 fc32 	bl	800f9f0 <is_uxrce_rmw_identifier_valid>
 800f18c:	2800      	cmp	r0, #0
 800f18e:	d0ee      	beq.n	800f16e <rmw_destroy_publisher+0x12>
 800f190:	686e      	ldr	r6, [r5, #4]
 800f192:	2e00      	cmp	r6, #0
 800f194:	d0eb      	beq.n	800f16e <rmw_destroy_publisher+0x12>
 800f196:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800f198:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 800f19c:	f00a fe86 	bl	8019eac <destroy_topic>
 800f1a0:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800f1a4:	6972      	ldr	r2, [r6, #20]
 800f1a6:	6918      	ldr	r0, [r3, #16]
 800f1a8:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800f1ac:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f1b0:	6819      	ldr	r1, [r3, #0]
 800f1b2:	f002 fdbb 	bl	8011d2c <uxr_buffer_delete_entity>
 800f1b6:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800f1ba:	4680      	mov	r8, r0
 800f1bc:	6932      	ldr	r2, [r6, #16]
 800f1be:	6918      	ldr	r0, [r3, #16]
 800f1c0:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800f1c4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f1c8:	6819      	ldr	r1, [r3, #0]
 800f1ca:	f002 fdaf 	bl	8011d2c <uxr_buffer_delete_entity>
 800f1ce:	4606      	mov	r6, r0
 800f1d0:	6938      	ldr	r0, [r7, #16]
 800f1d2:	4642      	mov	r2, r8
 800f1d4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800f1d8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800f1dc:	f000 faf6 	bl	800f7cc <run_xrce_session>
 800f1e0:	693f      	ldr	r7, [r7, #16]
 800f1e2:	4632      	mov	r2, r6
 800f1e4:	4606      	mov	r6, r0
 800f1e6:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 800f1ea:	4638      	mov	r0, r7
 800f1ec:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 800f1f0:	f000 faec 	bl	800f7cc <run_xrce_session>
 800f1f4:	b126      	cbz	r6, 800f200 <rmw_destroy_publisher+0xa4>
 800f1f6:	b118      	cbz	r0, 800f200 <rmw_destroy_publisher+0xa4>
 800f1f8:	4628      	mov	r0, r5
 800f1fa:	f000 f981 	bl	800f500 <rmw_uxrce_fini_publisher_memory>
 800f1fe:	e7b7      	b.n	800f170 <rmw_destroy_publisher+0x14>
 800f200:	2402      	movs	r4, #2
 800f202:	e7f9      	b.n	800f1f8 <rmw_destroy_publisher+0x9c>

0800f204 <rmw_uxrce_init_service_memory>:
 800f204:	b1e2      	cbz	r2, 800f240 <rmw_uxrce_init_service_memory+0x3c>
 800f206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f20a:	7b05      	ldrb	r5, [r0, #12]
 800f20c:	4606      	mov	r6, r0
 800f20e:	b9ad      	cbnz	r5, 800f23c <rmw_uxrce_init_service_memory+0x38>
 800f210:	23c8      	movs	r3, #200	; 0xc8
 800f212:	4617      	mov	r7, r2
 800f214:	460c      	mov	r4, r1
 800f216:	46a8      	mov	r8, r5
 800f218:	6083      	str	r3, [r0, #8]
 800f21a:	f240 1301 	movw	r3, #257	; 0x101
 800f21e:	e9c0 5500 	strd	r5, r5, [r0]
 800f222:	8183      	strh	r3, [r0, #12]
 800f224:	3501      	adds	r5, #1
 800f226:	4621      	mov	r1, r4
 800f228:	4630      	mov	r0, r6
 800f22a:	f00a fb3b 	bl	80198a4 <put_memory>
 800f22e:	42af      	cmp	r7, r5
 800f230:	60a4      	str	r4, [r4, #8]
 800f232:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800f236:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800f23a:	d1f3      	bne.n	800f224 <rmw_uxrce_init_service_memory+0x20>
 800f23c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f240:	4770      	bx	lr
 800f242:	bf00      	nop

0800f244 <rmw_uxrce_init_client_memory>:
 800f244:	b1e2      	cbz	r2, 800f280 <rmw_uxrce_init_client_memory+0x3c>
 800f246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f24a:	7b05      	ldrb	r5, [r0, #12]
 800f24c:	4606      	mov	r6, r0
 800f24e:	b9ad      	cbnz	r5, 800f27c <rmw_uxrce_init_client_memory+0x38>
 800f250:	23c8      	movs	r3, #200	; 0xc8
 800f252:	4617      	mov	r7, r2
 800f254:	460c      	mov	r4, r1
 800f256:	46a8      	mov	r8, r5
 800f258:	6083      	str	r3, [r0, #8]
 800f25a:	f240 1301 	movw	r3, #257	; 0x101
 800f25e:	e9c0 5500 	strd	r5, r5, [r0]
 800f262:	8183      	strh	r3, [r0, #12]
 800f264:	3501      	adds	r5, #1
 800f266:	4621      	mov	r1, r4
 800f268:	4630      	mov	r0, r6
 800f26a:	f00a fb1b 	bl	80198a4 <put_memory>
 800f26e:	42af      	cmp	r7, r5
 800f270:	60a4      	str	r4, [r4, #8]
 800f272:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800f276:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800f27a:	d1f3      	bne.n	800f264 <rmw_uxrce_init_client_memory+0x20>
 800f27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f280:	4770      	bx	lr
 800f282:	bf00      	nop

0800f284 <rmw_uxrce_init_publisher_memory>:
 800f284:	b1e2      	cbz	r2, 800f2c0 <rmw_uxrce_init_publisher_memory+0x3c>
 800f286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f28a:	7b05      	ldrb	r5, [r0, #12]
 800f28c:	4606      	mov	r6, r0
 800f28e:	b9ad      	cbnz	r5, 800f2bc <rmw_uxrce_init_publisher_memory+0x38>
 800f290:	23d8      	movs	r3, #216	; 0xd8
 800f292:	4617      	mov	r7, r2
 800f294:	460c      	mov	r4, r1
 800f296:	46a8      	mov	r8, r5
 800f298:	6083      	str	r3, [r0, #8]
 800f29a:	f240 1301 	movw	r3, #257	; 0x101
 800f29e:	e9c0 5500 	strd	r5, r5, [r0]
 800f2a2:	8183      	strh	r3, [r0, #12]
 800f2a4:	3501      	adds	r5, #1
 800f2a6:	4621      	mov	r1, r4
 800f2a8:	4630      	mov	r0, r6
 800f2aa:	f00a fafb 	bl	80198a4 <put_memory>
 800f2ae:	42af      	cmp	r7, r5
 800f2b0:	60a4      	str	r4, [r4, #8]
 800f2b2:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800f2b6:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800f2ba:	d1f3      	bne.n	800f2a4 <rmw_uxrce_init_publisher_memory+0x20>
 800f2bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2c0:	4770      	bx	lr
 800f2c2:	bf00      	nop

0800f2c4 <rmw_uxrce_init_subscription_memory>:
 800f2c4:	b1e2      	cbz	r2, 800f300 <rmw_uxrce_init_subscription_memory+0x3c>
 800f2c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2ca:	7b05      	ldrb	r5, [r0, #12]
 800f2cc:	4606      	mov	r6, r0
 800f2ce:	b9ad      	cbnz	r5, 800f2fc <rmw_uxrce_init_subscription_memory+0x38>
 800f2d0:	23d8      	movs	r3, #216	; 0xd8
 800f2d2:	4617      	mov	r7, r2
 800f2d4:	460c      	mov	r4, r1
 800f2d6:	46a8      	mov	r8, r5
 800f2d8:	6083      	str	r3, [r0, #8]
 800f2da:	f240 1301 	movw	r3, #257	; 0x101
 800f2de:	e9c0 5500 	strd	r5, r5, [r0]
 800f2e2:	8183      	strh	r3, [r0, #12]
 800f2e4:	3501      	adds	r5, #1
 800f2e6:	4621      	mov	r1, r4
 800f2e8:	4630      	mov	r0, r6
 800f2ea:	f00a fadb 	bl	80198a4 <put_memory>
 800f2ee:	42af      	cmp	r7, r5
 800f2f0:	60a4      	str	r4, [r4, #8]
 800f2f2:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800f2f6:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800f2fa:	d1f3      	bne.n	800f2e4 <rmw_uxrce_init_subscription_memory+0x20>
 800f2fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f300:	4770      	bx	lr
 800f302:	bf00      	nop

0800f304 <rmw_uxrce_init_node_memory>:
 800f304:	b1e2      	cbz	r2, 800f340 <rmw_uxrce_init_node_memory+0x3c>
 800f306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f30a:	7b05      	ldrb	r5, [r0, #12]
 800f30c:	4606      	mov	r6, r0
 800f30e:	b9ad      	cbnz	r5, 800f33c <rmw_uxrce_init_node_memory+0x38>
 800f310:	23a4      	movs	r3, #164	; 0xa4
 800f312:	4617      	mov	r7, r2
 800f314:	460c      	mov	r4, r1
 800f316:	46a8      	mov	r8, r5
 800f318:	6083      	str	r3, [r0, #8]
 800f31a:	f240 1301 	movw	r3, #257	; 0x101
 800f31e:	e9c0 5500 	strd	r5, r5, [r0]
 800f322:	8183      	strh	r3, [r0, #12]
 800f324:	3501      	adds	r5, #1
 800f326:	4621      	mov	r1, r4
 800f328:	4630      	mov	r0, r6
 800f32a:	f00a fabb 	bl	80198a4 <put_memory>
 800f32e:	42af      	cmp	r7, r5
 800f330:	60a4      	str	r4, [r4, #8]
 800f332:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 800f336:	f804 8c98 	strb.w	r8, [r4, #-152]
 800f33a:	d1f3      	bne.n	800f324 <rmw_uxrce_init_node_memory+0x20>
 800f33c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f340:	4770      	bx	lr
 800f342:	bf00      	nop

0800f344 <rmw_uxrce_init_session_memory>:
 800f344:	b1ea      	cbz	r2, 800f382 <rmw_uxrce_init_session_memory+0x3e>
 800f346:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f34a:	7b05      	ldrb	r5, [r0, #12]
 800f34c:	4606      	mov	r6, r0
 800f34e:	b9b5      	cbnz	r5, 800f37e <rmw_uxrce_init_session_memory+0x3a>
 800f350:	f241 58a8 	movw	r8, #5544	; 0x15a8
 800f354:	f240 1301 	movw	r3, #257	; 0x101
 800f358:	4617      	mov	r7, r2
 800f35a:	460c      	mov	r4, r1
 800f35c:	46a9      	mov	r9, r5
 800f35e:	f8c0 8008 	str.w	r8, [r0, #8]
 800f362:	8183      	strh	r3, [r0, #12]
 800f364:	e9c0 5500 	strd	r5, r5, [r0]
 800f368:	3501      	adds	r5, #1
 800f36a:	4621      	mov	r1, r4
 800f36c:	4630      	mov	r0, r6
 800f36e:	f00a fa99 	bl	80198a4 <put_memory>
 800f372:	42af      	cmp	r7, r5
 800f374:	60a4      	str	r4, [r4, #8]
 800f376:	f884 900c 	strb.w	r9, [r4, #12]
 800f37a:	4444      	add	r4, r8
 800f37c:	d1f4      	bne.n	800f368 <rmw_uxrce_init_session_memory+0x24>
 800f37e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f382:	4770      	bx	lr

0800f384 <rmw_uxrce_init_topic_memory>:
 800f384:	b1e2      	cbz	r2, 800f3c0 <rmw_uxrce_init_topic_memory+0x3c>
 800f386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f38a:	7b05      	ldrb	r5, [r0, #12]
 800f38c:	4606      	mov	r6, r0
 800f38e:	b9ad      	cbnz	r5, 800f3bc <rmw_uxrce_init_topic_memory+0x38>
 800f390:	231c      	movs	r3, #28
 800f392:	4617      	mov	r7, r2
 800f394:	460c      	mov	r4, r1
 800f396:	46a8      	mov	r8, r5
 800f398:	6083      	str	r3, [r0, #8]
 800f39a:	f240 1301 	movw	r3, #257	; 0x101
 800f39e:	e9c0 5500 	strd	r5, r5, [r0]
 800f3a2:	8183      	strh	r3, [r0, #12]
 800f3a4:	3501      	adds	r5, #1
 800f3a6:	4621      	mov	r1, r4
 800f3a8:	4630      	mov	r0, r6
 800f3aa:	f00a fa7b 	bl	80198a4 <put_memory>
 800f3ae:	42af      	cmp	r7, r5
 800f3b0:	60a4      	str	r4, [r4, #8]
 800f3b2:	f104 041c 	add.w	r4, r4, #28
 800f3b6:	f804 8c10 	strb.w	r8, [r4, #-16]
 800f3ba:	d1f3      	bne.n	800f3a4 <rmw_uxrce_init_topic_memory+0x20>
 800f3bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3c0:	4770      	bx	lr
 800f3c2:	bf00      	nop

0800f3c4 <rmw_uxrce_init_static_input_buffer_memory>:
 800f3c4:	b1ea      	cbz	r2, 800f402 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800f3c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3ca:	7b05      	ldrb	r5, [r0, #12]
 800f3cc:	4606      	mov	r6, r0
 800f3ce:	b9b5      	cbnz	r5, 800f3fe <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800f3d0:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800f3d4:	4617      	mov	r7, r2
 800f3d6:	460c      	mov	r4, r1
 800f3d8:	46a8      	mov	r8, r5
 800f3da:	6083      	str	r3, [r0, #8]
 800f3dc:	f240 1301 	movw	r3, #257	; 0x101
 800f3e0:	e9c0 5500 	strd	r5, r5, [r0]
 800f3e4:	8183      	strh	r3, [r0, #12]
 800f3e6:	3501      	adds	r5, #1
 800f3e8:	4621      	mov	r1, r4
 800f3ea:	4630      	mov	r0, r6
 800f3ec:	f00a fa5a 	bl	80198a4 <put_memory>
 800f3f0:	42af      	cmp	r7, r5
 800f3f2:	60a4      	str	r4, [r4, #8]
 800f3f4:	f884 800c 	strb.w	r8, [r4, #12]
 800f3f8:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800f3fc:	d1f3      	bne.n	800f3e6 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800f3fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f402:	4770      	bx	lr

0800f404 <rmw_uxrce_init_init_options_impl_memory>:
 800f404:	b1e2      	cbz	r2, 800f440 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800f406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f40a:	7b05      	ldrb	r5, [r0, #12]
 800f40c:	4606      	mov	r6, r0
 800f40e:	b9ad      	cbnz	r5, 800f43c <rmw_uxrce_init_init_options_impl_memory+0x38>
 800f410:	232c      	movs	r3, #44	; 0x2c
 800f412:	4617      	mov	r7, r2
 800f414:	460c      	mov	r4, r1
 800f416:	46a8      	mov	r8, r5
 800f418:	6083      	str	r3, [r0, #8]
 800f41a:	f240 1301 	movw	r3, #257	; 0x101
 800f41e:	e9c0 5500 	strd	r5, r5, [r0]
 800f422:	8183      	strh	r3, [r0, #12]
 800f424:	3501      	adds	r5, #1
 800f426:	4621      	mov	r1, r4
 800f428:	4630      	mov	r0, r6
 800f42a:	f00a fa3b 	bl	80198a4 <put_memory>
 800f42e:	42af      	cmp	r7, r5
 800f430:	60a4      	str	r4, [r4, #8]
 800f432:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 800f436:	f804 8c20 	strb.w	r8, [r4, #-32]
 800f43a:	d1f3      	bne.n	800f424 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800f43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f440:	4770      	bx	lr
 800f442:	bf00      	nop

0800f444 <rmw_uxrce_init_wait_set_memory>:
 800f444:	b1e2      	cbz	r2, 800f480 <rmw_uxrce_init_wait_set_memory+0x3c>
 800f446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f44a:	7b05      	ldrb	r5, [r0, #12]
 800f44c:	4606      	mov	r6, r0
 800f44e:	b9ad      	cbnz	r5, 800f47c <rmw_uxrce_init_wait_set_memory+0x38>
 800f450:	231c      	movs	r3, #28
 800f452:	4617      	mov	r7, r2
 800f454:	460c      	mov	r4, r1
 800f456:	46a8      	mov	r8, r5
 800f458:	6083      	str	r3, [r0, #8]
 800f45a:	f240 1301 	movw	r3, #257	; 0x101
 800f45e:	e9c0 5500 	strd	r5, r5, [r0]
 800f462:	8183      	strh	r3, [r0, #12]
 800f464:	3501      	adds	r5, #1
 800f466:	4621      	mov	r1, r4
 800f468:	4630      	mov	r0, r6
 800f46a:	f00a fa1b 	bl	80198a4 <put_memory>
 800f46e:	42af      	cmp	r7, r5
 800f470:	60a4      	str	r4, [r4, #8]
 800f472:	f104 041c 	add.w	r4, r4, #28
 800f476:	f804 8c10 	strb.w	r8, [r4, #-16]
 800f47a:	d1f3      	bne.n	800f464 <rmw_uxrce_init_wait_set_memory+0x20>
 800f47c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f480:	4770      	bx	lr
 800f482:	bf00      	nop

0800f484 <rmw_uxrce_init_guard_condition_memory>:
 800f484:	b1e2      	cbz	r2, 800f4c0 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800f486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f48a:	7b05      	ldrb	r5, [r0, #12]
 800f48c:	4606      	mov	r6, r0
 800f48e:	b9ad      	cbnz	r5, 800f4bc <rmw_uxrce_init_guard_condition_memory+0x38>
 800f490:	2320      	movs	r3, #32
 800f492:	4617      	mov	r7, r2
 800f494:	460c      	mov	r4, r1
 800f496:	46a8      	mov	r8, r5
 800f498:	6083      	str	r3, [r0, #8]
 800f49a:	f240 1301 	movw	r3, #257	; 0x101
 800f49e:	e9c0 5500 	strd	r5, r5, [r0]
 800f4a2:	8183      	strh	r3, [r0, #12]
 800f4a4:	3501      	adds	r5, #1
 800f4a6:	4621      	mov	r1, r4
 800f4a8:	4630      	mov	r0, r6
 800f4aa:	f00a f9fb 	bl	80198a4 <put_memory>
 800f4ae:	42af      	cmp	r7, r5
 800f4b0:	60a4      	str	r4, [r4, #8]
 800f4b2:	f104 0420 	add.w	r4, r4, #32
 800f4b6:	f804 8c14 	strb.w	r8, [r4, #-20]
 800f4ba:	d1f3      	bne.n	800f4a4 <rmw_uxrce_init_guard_condition_memory+0x20>
 800f4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4c0:	4770      	bx	lr
 800f4c2:	bf00      	nop

0800f4c4 <rmw_uxrce_fini_session_memory>:
 800f4c4:	4601      	mov	r1, r0
 800f4c6:	4801      	ldr	r0, [pc, #4]	; (800f4cc <rmw_uxrce_fini_session_memory+0x8>)
 800f4c8:	f00a b9ec 	b.w	80198a4 <put_memory>
 800f4cc:	2001152c 	.word	0x2001152c

0800f4d0 <rmw_uxrce_fini_node_memory>:
 800f4d0:	b538      	push	{r3, r4, r5, lr}
 800f4d2:	4604      	mov	r4, r0
 800f4d4:	6800      	ldr	r0, [r0, #0]
 800f4d6:	b128      	cbz	r0, 800f4e4 <rmw_uxrce_fini_node_memory+0x14>
 800f4d8:	4b07      	ldr	r3, [pc, #28]	; (800f4f8 <rmw_uxrce_fini_node_memory+0x28>)
 800f4da:	6819      	ldr	r1, [r3, #0]
 800f4dc:	f7f0 feb0 	bl	8000240 <strcmp>
 800f4e0:	b940      	cbnz	r0, 800f4f4 <rmw_uxrce_fini_node_memory+0x24>
 800f4e2:	6020      	str	r0, [r4, #0]
 800f4e4:	6861      	ldr	r1, [r4, #4]
 800f4e6:	b129      	cbz	r1, 800f4f4 <rmw_uxrce_fini_node_memory+0x24>
 800f4e8:	2500      	movs	r5, #0
 800f4ea:	4804      	ldr	r0, [pc, #16]	; (800f4fc <rmw_uxrce_fini_node_memory+0x2c>)
 800f4ec:	610d      	str	r5, [r1, #16]
 800f4ee:	f00a f9d9 	bl	80198a4 <put_memory>
 800f4f2:	6065      	str	r5, [r4, #4]
 800f4f4:	bd38      	pop	{r3, r4, r5, pc}
 800f4f6:	bf00      	nop
 800f4f8:	08021440 	.word	0x08021440
 800f4fc:	200114fc 	.word	0x200114fc

0800f500 <rmw_uxrce_fini_publisher_memory>:
 800f500:	b510      	push	{r4, lr}
 800f502:	4604      	mov	r4, r0
 800f504:	6800      	ldr	r0, [r0, #0]
 800f506:	b128      	cbz	r0, 800f514 <rmw_uxrce_fini_publisher_memory+0x14>
 800f508:	4b06      	ldr	r3, [pc, #24]	; (800f524 <rmw_uxrce_fini_publisher_memory+0x24>)
 800f50a:	6819      	ldr	r1, [r3, #0]
 800f50c:	f7f0 fe98 	bl	8000240 <strcmp>
 800f510:	b938      	cbnz	r0, 800f522 <rmw_uxrce_fini_publisher_memory+0x22>
 800f512:	6020      	str	r0, [r4, #0]
 800f514:	6861      	ldr	r1, [r4, #4]
 800f516:	b121      	cbz	r1, 800f522 <rmw_uxrce_fini_publisher_memory+0x22>
 800f518:	4803      	ldr	r0, [pc, #12]	; (800f528 <rmw_uxrce_fini_publisher_memory+0x28>)
 800f51a:	f00a f9c3 	bl	80198a4 <put_memory>
 800f51e:	2300      	movs	r3, #0
 800f520:	6063      	str	r3, [r4, #4]
 800f522:	bd10      	pop	{r4, pc}
 800f524:	08021440 	.word	0x08021440
 800f528:	2001150c 	.word	0x2001150c

0800f52c <rmw_uxrce_fini_subscription_memory>:
 800f52c:	b510      	push	{r4, lr}
 800f52e:	4604      	mov	r4, r0
 800f530:	6800      	ldr	r0, [r0, #0]
 800f532:	b128      	cbz	r0, 800f540 <rmw_uxrce_fini_subscription_memory+0x14>
 800f534:	4b06      	ldr	r3, [pc, #24]	; (800f550 <rmw_uxrce_fini_subscription_memory+0x24>)
 800f536:	6819      	ldr	r1, [r3, #0]
 800f538:	f7f0 fe82 	bl	8000240 <strcmp>
 800f53c:	b938      	cbnz	r0, 800f54e <rmw_uxrce_fini_subscription_memory+0x22>
 800f53e:	6020      	str	r0, [r4, #0]
 800f540:	6861      	ldr	r1, [r4, #4]
 800f542:	b121      	cbz	r1, 800f54e <rmw_uxrce_fini_subscription_memory+0x22>
 800f544:	4803      	ldr	r0, [pc, #12]	; (800f554 <rmw_uxrce_fini_subscription_memory+0x28>)
 800f546:	f00a f9ad 	bl	80198a4 <put_memory>
 800f54a:	2300      	movs	r3, #0
 800f54c:	6063      	str	r3, [r4, #4]
 800f54e:	bd10      	pop	{r4, pc}
 800f550:	08021440 	.word	0x08021440
 800f554:	2001154c 	.word	0x2001154c

0800f558 <rmw_uxrce_fini_service_memory>:
 800f558:	b510      	push	{r4, lr}
 800f55a:	4604      	mov	r4, r0
 800f55c:	6800      	ldr	r0, [r0, #0]
 800f55e:	b128      	cbz	r0, 800f56c <rmw_uxrce_fini_service_memory+0x14>
 800f560:	4b06      	ldr	r3, [pc, #24]	; (800f57c <rmw_uxrce_fini_service_memory+0x24>)
 800f562:	6819      	ldr	r1, [r3, #0]
 800f564:	f7f0 fe6c 	bl	8000240 <strcmp>
 800f568:	b938      	cbnz	r0, 800f57a <rmw_uxrce_fini_service_memory+0x22>
 800f56a:	6020      	str	r0, [r4, #0]
 800f56c:	6861      	ldr	r1, [r4, #4]
 800f56e:	b121      	cbz	r1, 800f57a <rmw_uxrce_fini_service_memory+0x22>
 800f570:	4803      	ldr	r0, [pc, #12]	; (800f580 <rmw_uxrce_fini_service_memory+0x28>)
 800f572:	f00a f997 	bl	80198a4 <put_memory>
 800f576:	2300      	movs	r3, #0
 800f578:	6063      	str	r3, [r4, #4]
 800f57a:	bd10      	pop	{r4, pc}
 800f57c:	08021440 	.word	0x08021440
 800f580:	2001151c 	.word	0x2001151c

0800f584 <rmw_uxrce_fini_client_memory>:
 800f584:	b510      	push	{r4, lr}
 800f586:	4604      	mov	r4, r0
 800f588:	6800      	ldr	r0, [r0, #0]
 800f58a:	b128      	cbz	r0, 800f598 <rmw_uxrce_fini_client_memory+0x14>
 800f58c:	4b06      	ldr	r3, [pc, #24]	; (800f5a8 <rmw_uxrce_fini_client_memory+0x24>)
 800f58e:	6819      	ldr	r1, [r3, #0]
 800f590:	f7f0 fe56 	bl	8000240 <strcmp>
 800f594:	b938      	cbnz	r0, 800f5a6 <rmw_uxrce_fini_client_memory+0x22>
 800f596:	6020      	str	r0, [r4, #0]
 800f598:	6861      	ldr	r1, [r4, #4]
 800f59a:	b121      	cbz	r1, 800f5a6 <rmw_uxrce_fini_client_memory+0x22>
 800f59c:	4803      	ldr	r0, [pc, #12]	; (800f5ac <rmw_uxrce_fini_client_memory+0x28>)
 800f59e:	f00a f981 	bl	80198a4 <put_memory>
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	6063      	str	r3, [r4, #4]
 800f5a6:	bd10      	pop	{r4, pc}
 800f5a8:	08021440 	.word	0x08021440
 800f5ac:	2000cac0 	.word	0x2000cac0

0800f5b0 <rmw_uxrce_fini_topic_memory>:
 800f5b0:	b510      	push	{r4, lr}
 800f5b2:	4604      	mov	r4, r0
 800f5b4:	4803      	ldr	r0, [pc, #12]	; (800f5c4 <rmw_uxrce_fini_topic_memory+0x14>)
 800f5b6:	4621      	mov	r1, r4
 800f5b8:	f00a f974 	bl	80198a4 <put_memory>
 800f5bc:	2300      	movs	r3, #0
 800f5be:	61a3      	str	r3, [r4, #24]
 800f5c0:	bd10      	pop	{r4, pc}
 800f5c2:	bf00      	nop
 800f5c4:	2001155c 	.word	0x2001155c

0800f5c8 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800f5c8:	b082      	sub	sp, #8
 800f5ca:	492b      	ldr	r1, [pc, #172]	; (800f678 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800f5cc:	b530      	push	{r4, r5, lr}
 800f5ce:	680d      	ldr	r5, [r1, #0]
 800f5d0:	ac03      	add	r4, sp, #12
 800f5d2:	e884 000c 	stmia.w	r4, {r2, r3}
 800f5d6:	461c      	mov	r4, r3
 800f5d8:	2d00      	cmp	r5, #0
 800f5da:	d04b      	beq.n	800f674 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 800f5dc:	462b      	mov	r3, r5
 800f5de:	2100      	movs	r1, #0
 800f5e0:	689a      	ldr	r2, [r3, #8]
 800f5e2:	685b      	ldr	r3, [r3, #4]
 800f5e4:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800f5e8:	4290      	cmp	r0, r2
 800f5ea:	bf08      	it	eq
 800f5ec:	3101      	addeq	r1, #1
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d1f6      	bne.n	800f5e0 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800f5f2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800f5f6:	2b02      	cmp	r3, #2
 800f5f8:	d029      	beq.n	800f64e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800f5fa:	d820      	bhi.n	800f63e <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 800f5fc:	428c      	cmp	r4, r1
 800f5fe:	d828      	bhi.n	800f652 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800f600:	fab4 f284 	clz	r2, r4
 800f604:	0952      	lsrs	r2, r2, #5
 800f606:	b324      	cbz	r4, 800f652 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800f608:	b1dd      	cbz	r5, 800f642 <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 800f60a:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800f60e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800f612:	e001      	b.n	800f618 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 800f614:	686d      	ldr	r5, [r5, #4]
 800f616:	b1ad      	cbz	r5, 800f644 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800f618:	68ab      	ldr	r3, [r5, #8]
 800f61a:	f8d3 1814 	ldr.w	r1, [r3, #2068]	; 0x814
 800f61e:	4288      	cmp	r0, r1
 800f620:	d1f8      	bne.n	800f614 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800f622:	f8d3 1818 	ldr.w	r1, [r3, #2072]	; 0x818
 800f626:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800f62a:	4561      	cmp	r1, ip
 800f62c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800f630:	eb73 0e04 	sbcs.w	lr, r3, r4
 800f634:	daee      	bge.n	800f614 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800f636:	468c      	mov	ip, r1
 800f638:	461c      	mov	r4, r3
 800f63a:	462a      	mov	r2, r5
 800f63c:	e7ea      	b.n	800f614 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800f63e:	2b03      	cmp	r3, #3
 800f640:	d0dc      	beq.n	800f5fc <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 800f642:	2200      	movs	r2, #0
 800f644:	4610      	mov	r0, r2
 800f646:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f64a:	b002      	add	sp, #8
 800f64c:	4770      	bx	lr
 800f64e:	428c      	cmp	r4, r1
 800f650:	d905      	bls.n	800f65e <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 800f652:	4809      	ldr	r0, [pc, #36]	; (800f678 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800f654:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f658:	b002      	add	sp, #8
 800f65a:	f00a b913 	b.w	8019884 <get_memory>
 800f65e:	fab4 f284 	clz	r2, r4
 800f662:	0952      	lsrs	r2, r2, #5
 800f664:	2c00      	cmp	r4, #0
 800f666:	d1ed      	bne.n	800f644 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800f668:	4803      	ldr	r0, [pc, #12]	; (800f678 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800f66a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f66e:	b002      	add	sp, #8
 800f670:	f00a b908 	b.w	8019884 <get_memory>
 800f674:	4629      	mov	r1, r5
 800f676:	e7bc      	b.n	800f5f2 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800f678:	2001153c 	.word	0x2001153c

0800f67c <rmw_uxrce_find_static_input_buffer_by_owner>:
 800f67c:	4b12      	ldr	r3, [pc, #72]	; (800f6c8 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	b530      	push	{r4, r5, lr}
 800f682:	b1f3      	cbz	r3, 800f6c2 <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 800f684:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800f688:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 800f68c:	2400      	movs	r4, #0
 800f68e:	e001      	b.n	800f694 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800f690:	685b      	ldr	r3, [r3, #4]
 800f692:	b1a3      	cbz	r3, 800f6be <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800f694:	689a      	ldr	r2, [r3, #8]
 800f696:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 800f69a:	4288      	cmp	r0, r1
 800f69c:	d1f8      	bne.n	800f690 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800f69e:	f8d2 1818 	ldr.w	r1, [r2, #2072]	; 0x818
 800f6a2:	f502 6202 	add.w	r2, r2, #2080	; 0x820
 800f6a6:	4571      	cmp	r1, lr
 800f6a8:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800f6ac:	eb72 050c 	sbcs.w	r5, r2, ip
 800f6b0:	daee      	bge.n	800f690 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800f6b2:	461c      	mov	r4, r3
 800f6b4:	685b      	ldr	r3, [r3, #4]
 800f6b6:	468e      	mov	lr, r1
 800f6b8:	4694      	mov	ip, r2
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d1ea      	bne.n	800f694 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800f6be:	4620      	mov	r0, r4
 800f6c0:	bd30      	pop	{r4, r5, pc}
 800f6c2:	461c      	mov	r4, r3
 800f6c4:	4620      	mov	r0, r4
 800f6c6:	bd30      	pop	{r4, r5, pc}
 800f6c8:	2001153c 	.word	0x2001153c
 800f6cc:	00000000 	.word	0x00000000

0800f6d0 <rmw_uxrce_clean_expired_static_input_buffer>:
 800f6d0:	4b3d      	ldr	r3, [pc, #244]	; (800f7c8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800f6d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6d6:	681f      	ldr	r7, [r3, #0]
 800f6d8:	ed2d 8b06 	vpush	{d8-d10}
 800f6dc:	b08d      	sub	sp, #52	; 0x34
 800f6de:	f00b fb0d 	bl	801acfc <rmw_uros_epoch_nanos>
 800f6e2:	2f00      	cmp	r7, #0
 800f6e4:	d05d      	beq.n	800f7a2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800f6e6:	46b8      	mov	r8, r7
 800f6e8:	4681      	mov	r9, r0
 800f6ea:	468a      	mov	sl, r1
 800f6ec:	ac04      	add	r4, sp, #16
 800f6ee:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f6f2:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 800f6f6:	2b04      	cmp	r3, #4
 800f6f8:	ed9f 8b2d 	vldr	d8, [pc, #180]	; 800f7b0 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800f6fc:	ed9f ab2e 	vldr	d10, [pc, #184]	; 800f7b8 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800f700:	ed9f 9b2f 	vldr	d9, [pc, #188]	; 800f7c0 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800f704:	d03f      	beq.n	800f786 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800f706:	2b05      	cmp	r3, #5
 800f708:	d044      	beq.n	800f794 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800f70a:	2b03      	cmp	r3, #3
 800f70c:	d03b      	beq.n	800f786 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800f70e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800f712:	ed8d ab06 	vstr	d10, [sp, #24]
 800f716:	ab08      	add	r3, sp, #32
 800f718:	ed8d 8b08 	vstr	d8, [sp, #32]
 800f71c:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 800f720:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f722:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f726:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f72a:	f009 fecd 	bl	80194c8 <rmw_time_equal>
 800f72e:	b118      	cbz	r0, 800f738 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800f730:	ed8d 9b04 	vstr	d9, [sp, #16]
 800f734:	ed8d 8b06 	vstr	d8, [sp, #24]
 800f738:	f8d5 6818 	ldr.w	r6, [r5, #2072]	; 0x818
 800f73c:	f505 6502 	add.w	r5, r5, #2080	; 0x820
 800f740:	f855 7c04 	ldr.w	r7, [r5, #-4]
 800f744:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800f748:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f74c:	f009 ff12 	bl	8019574 <rmw_time_total_nsec>
 800f750:	1830      	adds	r0, r6, r0
 800f752:	eb47 0101 	adc.w	r1, r7, r1
 800f756:	4548      	cmp	r0, r9
 800f758:	eb71 030a 	sbcs.w	r3, r1, sl
 800f75c:	db05      	blt.n	800f76a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800f75e:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800f762:	4591      	cmp	r9, r2
 800f764:	eb7a 0303 	sbcs.w	r3, sl, r3
 800f768:	da03      	bge.n	800f772 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800f76a:	4641      	mov	r1, r8
 800f76c:	4816      	ldr	r0, [pc, #88]	; (800f7c8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800f76e:	f00a f899 	bl	80198a4 <put_memory>
 800f772:	f1bb 0f00 	cmp.w	fp, #0
 800f776:	d014      	beq.n	800f7a2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800f778:	46d8      	mov	r8, fp
 800f77a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f77e:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 800f782:	2b04      	cmp	r3, #4
 800f784:	d1bf      	bne.n	800f706 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800f786:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 800f78a:	3340      	adds	r3, #64	; 0x40
 800f78c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f78e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f792:	e7c0      	b.n	800f716 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800f794:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 800f798:	3348      	adds	r3, #72	; 0x48
 800f79a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f79c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f7a0:	e7b9      	b.n	800f716 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800f7a2:	b00d      	add	sp, #52	; 0x34
 800f7a4:	ecbd 8b06 	vpop	{d8-d10}
 800f7a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7ac:	f3af 8000 	nop.w
	...
 800f7b8:	00000001 	.word	0x00000001
 800f7bc:	00000000 	.word	0x00000000
 800f7c0:	0000001e 	.word	0x0000001e
 800f7c4:	00000000 	.word	0x00000000
 800f7c8:	2001153c 	.word	0x2001153c

0800f7cc <run_xrce_session>:
 800f7cc:	b510      	push	{r4, lr}
 800f7ce:	788c      	ldrb	r4, [r1, #2]
 800f7d0:	b086      	sub	sp, #24
 800f7d2:	2c01      	cmp	r4, #1
 800f7d4:	f8ad 200e 	strh.w	r2, [sp, #14]
 800f7d8:	d00c      	beq.n	800f7f4 <run_xrce_session+0x28>
 800f7da:	2401      	movs	r4, #1
 800f7dc:	4619      	mov	r1, r3
 800f7de:	f10d 020e 	add.w	r2, sp, #14
 800f7e2:	f10d 0317 	add.w	r3, sp, #23
 800f7e6:	9400      	str	r4, [sp, #0]
 800f7e8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f7ec:	f003 fa08 	bl	8012c00 <uxr_run_session_until_all_status>
 800f7f0:	b006      	add	sp, #24
 800f7f2:	bd10      	pop	{r4, pc}
 800f7f4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f7f8:	f002 fe24 	bl	8012444 <uxr_flash_output_streams>
 800f7fc:	4620      	mov	r0, r4
 800f7fe:	b006      	add	sp, #24
 800f800:	bd10      	pop	{r4, pc}
 800f802:	bf00      	nop

0800f804 <convert_qos_profile>:
 800f804:	7a4a      	ldrb	r2, [r1, #9]
 800f806:	f891 c008 	ldrb.w	ip, [r1, #8]
 800f80a:	2a02      	cmp	r2, #2
 800f80c:	bf18      	it	ne
 800f80e:	2200      	movne	r2, #0
 800f810:	7002      	strb	r2, [r0, #0]
 800f812:	f1ac 0202 	sub.w	r2, ip, #2
 800f816:	fab2 f282 	clz	r2, r2
 800f81a:	0952      	lsrs	r2, r2, #5
 800f81c:	7042      	strb	r2, [r0, #1]
 800f81e:	780a      	ldrb	r2, [r1, #0]
 800f820:	8889      	ldrh	r1, [r1, #4]
 800f822:	f1a2 0202 	sub.w	r2, r2, #2
 800f826:	8081      	strh	r1, [r0, #4]
 800f828:	fab2 f282 	clz	r2, r2
 800f82c:	0952      	lsrs	r2, r2, #5
 800f82e:	7082      	strb	r2, [r0, #2]
 800f830:	4770      	bx	lr
 800f832:	bf00      	nop

0800f834 <generate_service_topics>:
 800f834:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f836:	461d      	mov	r5, r3
 800f838:	b083      	sub	sp, #12
 800f83a:	4606      	mov	r6, r0
 800f83c:	4c11      	ldr	r4, [pc, #68]	; (800f884 <generate_service_topics+0x50>)
 800f83e:	4608      	mov	r0, r1
 800f840:	4b11      	ldr	r3, [pc, #68]	; (800f888 <generate_service_topics+0x54>)
 800f842:	4617      	mov	r7, r2
 800f844:	4629      	mov	r1, r5
 800f846:	4a11      	ldr	r2, [pc, #68]	; (800f88c <generate_service_topics+0x58>)
 800f848:	9401      	str	r4, [sp, #4]
 800f84a:	9600      	str	r6, [sp, #0]
 800f84c:	f00e ff44 	bl	801e6d8 <sniprintf>
 800f850:	4a0f      	ldr	r2, [pc, #60]	; (800f890 <generate_service_topics+0x5c>)
 800f852:	4604      	mov	r4, r0
 800f854:	4b0f      	ldr	r3, [pc, #60]	; (800f894 <generate_service_topics+0x60>)
 800f856:	9201      	str	r2, [sp, #4]
 800f858:	4638      	mov	r0, r7
 800f85a:	4a0c      	ldr	r2, [pc, #48]	; (800f88c <generate_service_topics+0x58>)
 800f85c:	4629      	mov	r1, r5
 800f85e:	9600      	str	r6, [sp, #0]
 800f860:	f00e ff3a 	bl	801e6d8 <sniprintf>
 800f864:	2c00      	cmp	r4, #0
 800f866:	bfa8      	it	ge
 800f868:	42a5      	cmpge	r5, r4
 800f86a:	bfcc      	ite	gt
 800f86c:	2401      	movgt	r4, #1
 800f86e:	2400      	movle	r4, #0
 800f870:	dd05      	ble.n	800f87e <generate_service_topics+0x4a>
 800f872:	2800      	cmp	r0, #0
 800f874:	bfa8      	it	ge
 800f876:	4285      	cmpge	r5, r0
 800f878:	bfcc      	ite	gt
 800f87a:	2401      	movgt	r4, #1
 800f87c:	2400      	movle	r4, #0
 800f87e:	4620      	mov	r0, r4
 800f880:	b003      	add	sp, #12
 800f882:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f884:	08020918 	.word	0x08020918
 800f888:	08020914 	.word	0x08020914
 800f88c:	080208f0 	.word	0x080208f0
 800f890:	0802090c 	.word	0x0802090c
 800f894:	08020908 	.word	0x08020908

0800f898 <generate_service_types>:
 800f898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f89c:	4606      	mov	r6, r0
 800f89e:	b087      	sub	sp, #28
 800f8a0:	461c      	mov	r4, r3
 800f8a2:	6883      	ldr	r3, [r0, #8]
 800f8a4:	460d      	mov	r5, r1
 800f8a6:	4617      	mov	r7, r2
 800f8a8:	4798      	blx	r3
 800f8aa:	68f3      	ldr	r3, [r6, #12]
 800f8ac:	4606      	mov	r6, r0
 800f8ae:	4798      	blx	r3
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	f8d0 b004 	ldr.w	fp, [r0, #4]
 800f8b6:	6872      	ldr	r2, [r6, #4]
 800f8b8:	702b      	strb	r3, [r5, #0]
 800f8ba:	6813      	ldr	r3, [r2, #0]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d03f      	beq.n	800f940 <generate_service_types+0xa8>
 800f8c0:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800f954 <generate_service_types+0xbc>
 800f8c4:	4649      	mov	r1, r9
 800f8c6:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800f95c <generate_service_types+0xc4>
 800f8ca:	4628      	mov	r0, r5
 800f8cc:	f8df a090 	ldr.w	sl, [pc, #144]	; 800f960 <generate_service_types+0xc8>
 800f8d0:	f8cd 8014 	str.w	r8, [sp, #20]
 800f8d4:	6852      	ldr	r2, [r2, #4]
 800f8d6:	9100      	str	r1, [sp, #0]
 800f8d8:	4621      	mov	r1, r4
 800f8da:	f8cd 8008 	str.w	r8, [sp, #8]
 800f8de:	f8cd a004 	str.w	sl, [sp, #4]
 800f8e2:	e9cd 9203 	strd	r9, r2, [sp, #12]
 800f8e6:	4a1a      	ldr	r2, [pc, #104]	; (800f950 <generate_service_types+0xb8>)
 800f8e8:	f00e fef6 	bl	801e6d8 <sniprintf>
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	42a0      	cmp	r0, r4
 800f8f0:	ea6f 0600 	mvn.w	r6, r0
 800f8f4:	703b      	strb	r3, [r7, #0]
 800f8f6:	f8db 3000 	ldr.w	r3, [fp]
 800f8fa:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 800f8fe:	bfac      	ite	ge
 800f900:	2500      	movge	r5, #0
 800f902:	2501      	movlt	r5, #1
 800f904:	b30b      	cbz	r3, 800f94a <generate_service_types+0xb2>
 800f906:	4a13      	ldr	r2, [pc, #76]	; (800f954 <generate_service_types+0xbc>)
 800f908:	f8cd 8014 	str.w	r8, [sp, #20]
 800f90c:	402e      	ands	r6, r5
 800f90e:	f8db 1004 	ldr.w	r1, [fp, #4]
 800f912:	4638      	mov	r0, r7
 800f914:	9104      	str	r1, [sp, #16]
 800f916:	4621      	mov	r1, r4
 800f918:	e9cd 2a00 	strd	r2, sl, [sp]
 800f91c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800f920:	4a0b      	ldr	r2, [pc, #44]	; (800f950 <generate_service_types+0xb8>)
 800f922:	f00e fed9 	bl	801e6d8 <sniprintf>
 800f926:	2800      	cmp	r0, #0
 800f928:	bfb4      	ite	lt
 800f92a:	2600      	movlt	r6, #0
 800f92c:	f006 0601 	andge.w	r6, r6, #1
 800f930:	42a0      	cmp	r0, r4
 800f932:	bfac      	ite	ge
 800f934:	2000      	movge	r0, #0
 800f936:	f006 0001 	andlt.w	r0, r6, #1
 800f93a:	b007      	add	sp, #28
 800f93c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f940:	4b05      	ldr	r3, [pc, #20]	; (800f958 <generate_service_types+0xc0>)
 800f942:	f8df 9010 	ldr.w	r9, [pc, #16]	; 800f954 <generate_service_types+0xbc>
 800f946:	4619      	mov	r1, r3
 800f948:	e7bd      	b.n	800f8c6 <generate_service_types+0x2e>
 800f94a:	4b03      	ldr	r3, [pc, #12]	; (800f958 <generate_service_types+0xc0>)
 800f94c:	461a      	mov	r2, r3
 800f94e:	e7db      	b.n	800f908 <generate_service_types+0x70>
 800f950:	080208e8 	.word	0x080208e8
 800f954:	080208e4 	.word	0x080208e4
 800f958:	08021218 	.word	0x08021218
 800f95c:	080208f8 	.word	0x080208f8
 800f960:	080208fc 	.word	0x080208fc

0800f964 <generate_type_name>:
 800f964:	2300      	movs	r3, #0
 800f966:	b530      	push	{r4, r5, lr}
 800f968:	700b      	strb	r3, [r1, #0]
 800f96a:	b087      	sub	sp, #28
 800f96c:	6803      	ldr	r3, [r0, #0]
 800f96e:	4614      	mov	r4, r2
 800f970:	b1bb      	cbz	r3, 800f9a2 <generate_type_name+0x3e>
 800f972:	4a0e      	ldr	r2, [pc, #56]	; (800f9ac <generate_type_name+0x48>)
 800f974:	4615      	mov	r5, r2
 800f976:	9500      	str	r5, [sp, #0]
 800f978:	9203      	str	r2, [sp, #12]
 800f97a:	4d0d      	ldr	r5, [pc, #52]	; (800f9b0 <generate_type_name+0x4c>)
 800f97c:	6842      	ldr	r2, [r0, #4]
 800f97e:	4608      	mov	r0, r1
 800f980:	490c      	ldr	r1, [pc, #48]	; (800f9b4 <generate_type_name+0x50>)
 800f982:	9204      	str	r2, [sp, #16]
 800f984:	9105      	str	r1, [sp, #20]
 800f986:	9102      	str	r1, [sp, #8]
 800f988:	4621      	mov	r1, r4
 800f98a:	4a0b      	ldr	r2, [pc, #44]	; (800f9b8 <generate_type_name+0x54>)
 800f98c:	9501      	str	r5, [sp, #4]
 800f98e:	f00e fea3 	bl	801e6d8 <sniprintf>
 800f992:	2800      	cmp	r0, #0
 800f994:	bfa8      	it	ge
 800f996:	4284      	cmpge	r4, r0
 800f998:	bfcc      	ite	gt
 800f99a:	2001      	movgt	r0, #1
 800f99c:	2000      	movle	r0, #0
 800f99e:	b007      	add	sp, #28
 800f9a0:	bd30      	pop	{r4, r5, pc}
 800f9a2:	4b06      	ldr	r3, [pc, #24]	; (800f9bc <generate_type_name+0x58>)
 800f9a4:	4a01      	ldr	r2, [pc, #4]	; (800f9ac <generate_type_name+0x48>)
 800f9a6:	461d      	mov	r5, r3
 800f9a8:	e7e5      	b.n	800f976 <generate_type_name+0x12>
 800f9aa:	bf00      	nop
 800f9ac:	080208e4 	.word	0x080208e4
 800f9b0:	080208fc 	.word	0x080208fc
 800f9b4:	080208f8 	.word	0x080208f8
 800f9b8:	080208e8 	.word	0x080208e8
 800f9bc:	08021218 	.word	0x08021218

0800f9c0 <generate_topic_name>:
 800f9c0:	b530      	push	{r4, r5, lr}
 800f9c2:	4614      	mov	r4, r2
 800f9c4:	b083      	sub	sp, #12
 800f9c6:	4605      	mov	r5, r0
 800f9c8:	4b07      	ldr	r3, [pc, #28]	; (800f9e8 <generate_topic_name+0x28>)
 800f9ca:	4a08      	ldr	r2, [pc, #32]	; (800f9ec <generate_topic_name+0x2c>)
 800f9cc:	4608      	mov	r0, r1
 800f9ce:	9500      	str	r5, [sp, #0]
 800f9d0:	4621      	mov	r1, r4
 800f9d2:	f00e fe81 	bl	801e6d8 <sniprintf>
 800f9d6:	2800      	cmp	r0, #0
 800f9d8:	bfa8      	it	ge
 800f9da:	4284      	cmpge	r4, r0
 800f9dc:	bfcc      	ite	gt
 800f9de:	2001      	movgt	r0, #1
 800f9e0:	2000      	movle	r0, #0
 800f9e2:	b003      	add	sp, #12
 800f9e4:	bd30      	pop	{r4, r5, pc}
 800f9e6:	bf00      	nop
 800f9e8:	08020920 	.word	0x08020920
 800f9ec:	08020900 	.word	0x08020900

0800f9f0 <is_uxrce_rmw_identifier_valid>:
 800f9f0:	b510      	push	{r4, lr}
 800f9f2:	4604      	mov	r4, r0
 800f9f4:	b140      	cbz	r0, 800fa08 <is_uxrce_rmw_identifier_valid+0x18>
 800f9f6:	f009 ffcb 	bl	8019990 <rmw_get_implementation_identifier>
 800f9fa:	4601      	mov	r1, r0
 800f9fc:	4620      	mov	r0, r4
 800f9fe:	f7f0 fc1f 	bl	8000240 <strcmp>
 800fa02:	fab0 f080 	clz	r0, r0
 800fa06:	0940      	lsrs	r0, r0, #5
 800fa08:	bd10      	pop	{r4, pc}
 800fa0a:	bf00      	nop

0800fa0c <get_message_typesupport_handle>:
 800fa0c:	6883      	ldr	r3, [r0, #8]
 800fa0e:	4718      	bx	r3

0800fa10 <get_message_typesupport_handle_function>:
 800fa10:	b510      	push	{r4, lr}
 800fa12:	4604      	mov	r4, r0
 800fa14:	6800      	ldr	r0, [r0, #0]
 800fa16:	f7f0 fc13 	bl	8000240 <strcmp>
 800fa1a:	2800      	cmp	r0, #0
 800fa1c:	bf0c      	ite	eq
 800fa1e:	4620      	moveq	r0, r4
 800fa20:	2000      	movne	r0, #0
 800fa22:	bd10      	pop	{r4, pc}

0800fa24 <get_service_typesupport_handle>:
 800fa24:	6883      	ldr	r3, [r0, #8]
 800fa26:	4718      	bx	r3

0800fa28 <get_service_typesupport_handle_function>:
 800fa28:	b510      	push	{r4, lr}
 800fa2a:	4604      	mov	r4, r0
 800fa2c:	6800      	ldr	r0, [r0, #0]
 800fa2e:	f7f0 fc07 	bl	8000240 <strcmp>
 800fa32:	2800      	cmp	r0, #0
 800fa34:	bf0c      	ite	eq
 800fa36:	4620      	moveq	r0, r4
 800fa38:	2000      	movne	r0, #0
 800fa3a:	bd10      	pop	{r4, pc}

0800fa3c <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800fa3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa40:	6805      	ldr	r5, [r0, #0]
 800fa42:	4604      	mov	r4, r0
 800fa44:	460e      	mov	r6, r1
 800fa46:	4628      	mov	r0, r5
 800fa48:	f7f0 fbfa 	bl	8000240 <strcmp>
 800fa4c:	b1c8      	cbz	r0, 800fa82 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800fa4e:	4b11      	ldr	r3, [pc, #68]	; (800fa94 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	429d      	cmp	r5, r3
 800fa54:	d112      	bne.n	800fa7c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800fa56:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800fa5a:	f8d8 4000 	ldr.w	r4, [r8]
 800fa5e:	b16c      	cbz	r4, 800fa7c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800fa60:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800fa64:	2700      	movs	r7, #0
 800fa66:	3d04      	subs	r5, #4
 800fa68:	4631      	mov	r1, r6
 800fa6a:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800fa6e:	f7f0 fbe7 	bl	8000240 <strcmp>
 800fa72:	00bb      	lsls	r3, r7, #2
 800fa74:	b140      	cbz	r0, 800fa88 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800fa76:	3701      	adds	r7, #1
 800fa78:	42bc      	cmp	r4, r7
 800fa7a:	d1f5      	bne.n	800fa68 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800fa7c:	2000      	movs	r0, #0
 800fa7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa82:	4620      	mov	r0, r4
 800fa84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa88:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fa8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa90:	58d3      	ldr	r3, [r2, r3]
 800fa92:	4718      	bx	r3
 800fa94:	20000ae8 	.word	0x20000ae8

0800fa98 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 800fa98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa9c:	6805      	ldr	r5, [r0, #0]
 800fa9e:	4604      	mov	r4, r0
 800faa0:	460e      	mov	r6, r1
 800faa2:	4628      	mov	r0, r5
 800faa4:	f7f0 fbcc 	bl	8000240 <strcmp>
 800faa8:	b1c8      	cbz	r0, 800fade <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 800faaa:	4b11      	ldr	r3, [pc, #68]	; (800faf0 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	429d      	cmp	r5, r3
 800fab0:	d112      	bne.n	800fad8 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800fab2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800fab6:	f8d8 4000 	ldr.w	r4, [r8]
 800faba:	b16c      	cbz	r4, 800fad8 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800fabc:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800fac0:	2700      	movs	r7, #0
 800fac2:	3d04      	subs	r5, #4
 800fac4:	4631      	mov	r1, r6
 800fac6:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800faca:	f7f0 fbb9 	bl	8000240 <strcmp>
 800face:	00bb      	lsls	r3, r7, #2
 800fad0:	b140      	cbz	r0, 800fae4 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 800fad2:	3701      	adds	r7, #1
 800fad4:	42bc      	cmp	r4, r7
 800fad6:	d1f5      	bne.n	800fac4 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 800fad8:	2000      	movs	r0, #0
 800fada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fade:	4620      	mov	r0, r4
 800fae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fae4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fae8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800faec:	58d3      	ldr	r3, [r2, r3]
 800faee:	4718      	bx	r3
 800faf0:	20000ae8 	.word	0x20000ae8

0800faf4 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__size_function__ServiceEventInfo__client_gid>:
 800faf4:	2010      	movs	r0, #16
 800faf6:	4770      	bx	lr

0800faf8 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__get_const_function__ServiceEventInfo__client_gid>:
 800faf8:	4408      	add	r0, r1
 800fafa:	4770      	bx	lr

0800fafc <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__fetch_function__ServiceEventInfo__client_gid>:
 800fafc:	5c43      	ldrb	r3, [r0, r1]
 800fafe:	7013      	strb	r3, [r2, #0]
 800fb00:	4770      	bx	lr
 800fb02:	bf00      	nop

0800fb04 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__assign_function__ServiceEventInfo__client_gid>:
 800fb04:	7813      	ldrb	r3, [r2, #0]
 800fb06:	5443      	strb	r3, [r0, r1]
 800fb08:	4770      	bx	lr
 800fb0a:	bf00      	nop

0800fb0c <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__ServiceEventInfo_init_function>:
 800fb0c:	f00b b94c 	b.w	801ada8 <service_msgs__msg__ServiceEventInfo__init>

0800fb10 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__ServiceEventInfo_fini_function>:
 800fb10:	f00b b95c 	b.w	801adcc <service_msgs__msg__ServiceEventInfo__fini>

0800fb14 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__get_function__ServiceEventInfo__client_gid>:
 800fb14:	4408      	add	r0, r1
 800fb16:	4770      	bx	lr

0800fb18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>:
 800fb18:	b508      	push	{r3, lr}
 800fb1a:	f000 f8db 	bl	800fcd4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800fb1e:	4b06      	ldr	r3, [pc, #24]	; (800fb38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 800fb20:	4906      	ldr	r1, [pc, #24]	; (800fb3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x24>)
 800fb22:	681a      	ldr	r2, [r3, #0]
 800fb24:	6488      	str	r0, [r1, #72]	; 0x48
 800fb26:	b10a      	cbz	r2, 800fb2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x14>
 800fb28:	4803      	ldr	r0, [pc, #12]	; (800fb38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 800fb2a:	bd08      	pop	{r3, pc}
 800fb2c:	4a04      	ldr	r2, [pc, #16]	; (800fb40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x28>)
 800fb2e:	4802      	ldr	r0, [pc, #8]	; (800fb38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 800fb30:	6812      	ldr	r2, [r2, #0]
 800fb32:	601a      	str	r2, [r3, #0]
 800fb34:	bd08      	pop	{r3, pc}
 800fb36:	bf00      	nop
 800fb38:	20000be0 	.word	0x20000be0
 800fb3c:	20000af0 	.word	0x20000af0
 800fb40:	20000aec 	.word	0x20000aec

0800fb44 <get_serialized_size_service_msgs__msg__ServiceEventInfo>:
 800fb44:	b5b0      	push	{r4, r5, r7, lr}
 800fb46:	4604      	mov	r4, r0
 800fb48:	b1d8      	cbz	r0, 800fb82 <get_serialized_size_service_msgs__msg__ServiceEventInfo+0x3e>
 800fb4a:	460d      	mov	r5, r1
 800fb4c:	2101      	movs	r1, #1
 800fb4e:	4628      	mov	r0, r5
 800fb50:	f002 f87c 	bl	8011c4c <ucdr_alignment>
 800fb54:	1c6b      	adds	r3, r5, #1
 800fb56:	4607      	mov	r7, r0
 800fb58:	1d20      	adds	r0, r4, #4
 800fb5a:	f1c5 0508 	rsb	r5, r5, #8
 800fb5e:	441f      	add	r7, r3
 800fb60:	4639      	mov	r1, r7
 800fb62:	f000 f8c5 	bl	800fcf0 <get_serialized_size_builtin_interfaces__msg__Time>
 800fb66:	4407      	add	r7, r0
 800fb68:	2101      	movs	r1, #1
 800fb6a:	4638      	mov	r0, r7
 800fb6c:	f002 f86e 	bl	8011c4c <ucdr_alignment>
 800fb70:	f100 0410 	add.w	r4, r0, #16
 800fb74:	2108      	movs	r1, #8
 800fb76:	443c      	add	r4, r7
 800fb78:	4620      	mov	r0, r4
 800fb7a:	f002 f867 	bl	8011c4c <ucdr_alignment>
 800fb7e:	4428      	add	r0, r5
 800fb80:	4420      	add	r0, r4
 800fb82:	bdb0      	pop	{r4, r5, r7, pc}

0800fb84 <_ServiceEventInfo__cdr_deserialize>:
 800fb84:	b538      	push	{r3, r4, r5, lr}
 800fb86:	460c      	mov	r4, r1
 800fb88:	b1b9      	cbz	r1, 800fbba <_ServiceEventInfo__cdr_deserialize+0x36>
 800fb8a:	4605      	mov	r5, r0
 800fb8c:	f000 fbe0 	bl	8010350 <ucdr_deserialize_uint8_t>
 800fb90:	f000 f912 	bl	800fdb8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800fb94:	4603      	mov	r3, r0
 800fb96:	1d21      	adds	r1, r4, #4
 800fb98:	4628      	mov	r0, r5
 800fb9a:	685b      	ldr	r3, [r3, #4]
 800fb9c:	68db      	ldr	r3, [r3, #12]
 800fb9e:	4798      	blx	r3
 800fba0:	f104 010c 	add.w	r1, r4, #12
 800fba4:	4628      	mov	r0, r5
 800fba6:	2210      	movs	r2, #16
 800fba8:	f000 f9d4 	bl	800ff54 <ucdr_deserialize_array_uint8_t>
 800fbac:	f104 0120 	add.w	r1, r4, #32
 800fbb0:	4628      	mov	r0, r5
 800fbb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fbb6:	f001 bcd3 	b.w	8011560 <ucdr_deserialize_int64_t>
 800fbba:	4608      	mov	r0, r1
 800fbbc:	bd38      	pop	{r3, r4, r5, pc}
 800fbbe:	bf00      	nop

0800fbc0 <_ServiceEventInfo__cdr_serialize>:
 800fbc0:	b1e8      	cbz	r0, 800fbfe <_ServiceEventInfo__cdr_serialize+0x3e>
 800fbc2:	b570      	push	{r4, r5, r6, lr}
 800fbc4:	4606      	mov	r6, r0
 800fbc6:	460d      	mov	r5, r1
 800fbc8:	4604      	mov	r4, r0
 800fbca:	4608      	mov	r0, r1
 800fbcc:	f816 1b04 	ldrb.w	r1, [r6], #4
 800fbd0:	f000 fba8 	bl	8010324 <ucdr_serialize_uint8_t>
 800fbd4:	f000 f8f0 	bl	800fdb8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800fbd8:	4603      	mov	r3, r0
 800fbda:	4629      	mov	r1, r5
 800fbdc:	4630      	mov	r0, r6
 800fbde:	685b      	ldr	r3, [r3, #4]
 800fbe0:	689b      	ldr	r3, [r3, #8]
 800fbe2:	4798      	blx	r3
 800fbe4:	2210      	movs	r2, #16
 800fbe6:	f104 010c 	add.w	r1, r4, #12
 800fbea:	4628      	mov	r0, r5
 800fbec:	f000 f94e 	bl	800fe8c <ucdr_serialize_array_uint8_t>
 800fbf0:	4628      	mov	r0, r5
 800fbf2:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 800fbf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fbfa:	f001 bbe1 	b.w	80113c0 <ucdr_serialize_int64_t>
 800fbfe:	4770      	bx	lr

0800fc00 <_ServiceEventInfo__get_serialized_size>:
 800fc00:	b538      	push	{r3, r4, r5, lr}
 800fc02:	4604      	mov	r4, r0
 800fc04:	b1b0      	cbz	r0, 800fc34 <_ServiceEventInfo__get_serialized_size+0x34>
 800fc06:	2101      	movs	r1, #1
 800fc08:	2000      	movs	r0, #0
 800fc0a:	f002 f81f 	bl	8011c4c <ucdr_alignment>
 800fc0e:	4605      	mov	r5, r0
 800fc10:	1d20      	adds	r0, r4, #4
 800fc12:	3501      	adds	r5, #1
 800fc14:	4629      	mov	r1, r5
 800fc16:	f000 f86b 	bl	800fcf0 <get_serialized_size_builtin_interfaces__msg__Time>
 800fc1a:	4405      	add	r5, r0
 800fc1c:	2101      	movs	r1, #1
 800fc1e:	4628      	mov	r0, r5
 800fc20:	f002 f814 	bl	8011c4c <ucdr_alignment>
 800fc24:	3010      	adds	r0, #16
 800fc26:	2108      	movs	r1, #8
 800fc28:	4405      	add	r5, r0
 800fc2a:	4628      	mov	r0, r5
 800fc2c:	f002 f80e 	bl	8011c4c <ucdr_alignment>
 800fc30:	3008      	adds	r0, #8
 800fc32:	4428      	add	r0, r5
 800fc34:	bd38      	pop	{r3, r4, r5, pc}
 800fc36:	bf00      	nop

0800fc38 <_ServiceEventInfo__max_serialized_size>:
 800fc38:	b550      	push	{r4, r6, lr}
 800fc3a:	2601      	movs	r6, #1
 800fc3c:	b083      	sub	sp, #12
 800fc3e:	2000      	movs	r0, #0
 800fc40:	4631      	mov	r1, r6
 800fc42:	f88d 6007 	strb.w	r6, [sp, #7]
 800fc46:	f002 f801 	bl	8011c4c <ucdr_alignment>
 800fc4a:	4604      	mov	r4, r0
 800fc4c:	f10d 0007 	add.w	r0, sp, #7
 800fc50:	4434      	add	r4, r6
 800fc52:	4621      	mov	r1, r4
 800fc54:	f000 f89c 	bl	800fd90 <max_serialized_size_builtin_interfaces__msg__Time>
 800fc58:	4404      	add	r4, r0
 800fc5a:	4631      	mov	r1, r6
 800fc5c:	4620      	mov	r0, r4
 800fc5e:	f001 fff5 	bl	8011c4c <ucdr_alignment>
 800fc62:	3010      	adds	r0, #16
 800fc64:	2108      	movs	r1, #8
 800fc66:	4404      	add	r4, r0
 800fc68:	4620      	mov	r0, r4
 800fc6a:	f001 ffef 	bl	8011c4c <ucdr_alignment>
 800fc6e:	3008      	adds	r0, #8
 800fc70:	4420      	add	r0, r4
 800fc72:	b003      	add	sp, #12
 800fc74:	bd50      	pop	{r4, r6, pc}
 800fc76:	bf00      	nop

0800fc78 <max_serialized_size_service_msgs__msg__ServiceEventInfo>:
 800fc78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc7c:	f04f 0801 	mov.w	r8, #1
 800fc80:	460c      	mov	r4, r1
 800fc82:	4607      	mov	r7, r0
 800fc84:	4641      	mov	r1, r8
 800fc86:	4620      	mov	r0, r4
 800fc88:	f887 8000 	strb.w	r8, [r7]
 800fc8c:	eb04 0608 	add.w	r6, r4, r8
 800fc90:	f001 ffdc 	bl	8011c4c <ucdr_alignment>
 800fc94:	4605      	mov	r5, r0
 800fc96:	4638      	mov	r0, r7
 800fc98:	f1c4 0408 	rsb	r4, r4, #8
 800fc9c:	4435      	add	r5, r6
 800fc9e:	4629      	mov	r1, r5
 800fca0:	f000 f876 	bl	800fd90 <max_serialized_size_builtin_interfaces__msg__Time>
 800fca4:	4405      	add	r5, r0
 800fca6:	4641      	mov	r1, r8
 800fca8:	4628      	mov	r0, r5
 800fcaa:	f001 ffcf 	bl	8011c4c <ucdr_alignment>
 800fcae:	3010      	adds	r0, #16
 800fcb0:	2108      	movs	r1, #8
 800fcb2:	4405      	add	r5, r0
 800fcb4:	4628      	mov	r0, r5
 800fcb6:	f001 ffc9 	bl	8011c4c <ucdr_alignment>
 800fcba:	4420      	add	r0, r4
 800fcbc:	4428      	add	r0, r5
 800fcbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcc2:	bf00      	nop

0800fcc4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>:
 800fcc4:	4800      	ldr	r0, [pc, #0]	; (800fcc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x4>)
 800fcc6:	4770      	bx	lr
 800fcc8:	20000bf8 	.word	0x20000bf8

0800fccc <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800fccc:	f00b b8b4 	b.w	801ae38 <builtin_interfaces__msg__Time__init>

0800fcd0 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800fcd0:	f00b b8b6 	b.w	801ae40 <builtin_interfaces__msg__Time__fini>

0800fcd4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800fcd4:	4b04      	ldr	r3, [pc, #16]	; (800fce8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800fcd6:	681a      	ldr	r2, [r3, #0]
 800fcd8:	b10a      	cbz	r2, 800fcde <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800fcda:	4803      	ldr	r0, [pc, #12]	; (800fce8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800fcdc:	4770      	bx	lr
 800fcde:	4a03      	ldr	r2, [pc, #12]	; (800fcec <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800fce0:	4801      	ldr	r0, [pc, #4]	; (800fce8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800fce2:	6812      	ldr	r2, [r2, #0]
 800fce4:	601a      	str	r2, [r3, #0]
 800fce6:	4770      	bx	lr
 800fce8:	20000ca4 	.word	0x20000ca4
 800fcec:	20000aec 	.word	0x20000aec

0800fcf0 <get_serialized_size_builtin_interfaces__msg__Time>:
 800fcf0:	b180      	cbz	r0, 800fd14 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800fcf2:	b538      	push	{r3, r4, r5, lr}
 800fcf4:	460d      	mov	r5, r1
 800fcf6:	2104      	movs	r1, #4
 800fcf8:	4628      	mov	r0, r5
 800fcfa:	f001 ffa7 	bl	8011c4c <ucdr_alignment>
 800fcfe:	1d2b      	adds	r3, r5, #4
 800fd00:	f1c5 0504 	rsb	r5, r5, #4
 800fd04:	2104      	movs	r1, #4
 800fd06:	181c      	adds	r4, r3, r0
 800fd08:	4620      	mov	r0, r4
 800fd0a:	f001 ff9f 	bl	8011c4c <ucdr_alignment>
 800fd0e:	4428      	add	r0, r5
 800fd10:	4420      	add	r0, r4
 800fd12:	bd38      	pop	{r3, r4, r5, pc}
 800fd14:	4770      	bx	lr
 800fd16:	bf00      	nop

0800fd18 <_Time__cdr_deserialize>:
 800fd18:	b538      	push	{r3, r4, r5, lr}
 800fd1a:	460c      	mov	r4, r1
 800fd1c:	b141      	cbz	r1, 800fd30 <_Time__cdr_deserialize+0x18>
 800fd1e:	4605      	mov	r5, r0
 800fd20:	f001 fabe 	bl	80112a0 <ucdr_deserialize_int32_t>
 800fd24:	1d21      	adds	r1, r4, #4
 800fd26:	4628      	mov	r0, r5
 800fd28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd2c:	f000 be40 	b.w	80109b0 <ucdr_deserialize_uint32_t>
 800fd30:	4608      	mov	r0, r1
 800fd32:	bd38      	pop	{r3, r4, r5, pc}

0800fd34 <_Time__cdr_serialize>:
 800fd34:	b160      	cbz	r0, 800fd50 <_Time__cdr_serialize+0x1c>
 800fd36:	b538      	push	{r3, r4, r5, lr}
 800fd38:	460d      	mov	r5, r1
 800fd3a:	4604      	mov	r4, r0
 800fd3c:	6801      	ldr	r1, [r0, #0]
 800fd3e:	4628      	mov	r0, r5
 800fd40:	f001 fa16 	bl	8011170 <ucdr_serialize_int32_t>
 800fd44:	6861      	ldr	r1, [r4, #4]
 800fd46:	4628      	mov	r0, r5
 800fd48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd4c:	f000 bd00 	b.w	8010750 <ucdr_serialize_uint32_t>
 800fd50:	4770      	bx	lr
 800fd52:	bf00      	nop

0800fd54 <_Time__get_serialized_size>:
 800fd54:	b160      	cbz	r0, 800fd70 <_Time__get_serialized_size+0x1c>
 800fd56:	2104      	movs	r1, #4
 800fd58:	2000      	movs	r0, #0
 800fd5a:	b510      	push	{r4, lr}
 800fd5c:	f001 ff76 	bl	8011c4c <ucdr_alignment>
 800fd60:	2104      	movs	r1, #4
 800fd62:	1844      	adds	r4, r0, r1
 800fd64:	4620      	mov	r0, r4
 800fd66:	f001 ff71 	bl	8011c4c <ucdr_alignment>
 800fd6a:	3004      	adds	r0, #4
 800fd6c:	4420      	add	r0, r4
 800fd6e:	bd10      	pop	{r4, pc}
 800fd70:	4770      	bx	lr
 800fd72:	bf00      	nop

0800fd74 <_Time__max_serialized_size>:
 800fd74:	b510      	push	{r4, lr}
 800fd76:	2104      	movs	r1, #4
 800fd78:	2000      	movs	r0, #0
 800fd7a:	f001 ff67 	bl	8011c4c <ucdr_alignment>
 800fd7e:	2104      	movs	r1, #4
 800fd80:	1844      	adds	r4, r0, r1
 800fd82:	4620      	mov	r0, r4
 800fd84:	f001 ff62 	bl	8011c4c <ucdr_alignment>
 800fd88:	3004      	adds	r0, #4
 800fd8a:	4420      	add	r0, r4
 800fd8c:	bd10      	pop	{r4, pc}
 800fd8e:	bf00      	nop

0800fd90 <max_serialized_size_builtin_interfaces__msg__Time>:
 800fd90:	b538      	push	{r3, r4, r5, lr}
 800fd92:	460c      	mov	r4, r1
 800fd94:	2301      	movs	r3, #1
 800fd96:	2104      	movs	r1, #4
 800fd98:	1d25      	adds	r5, r4, #4
 800fd9a:	7003      	strb	r3, [r0, #0]
 800fd9c:	4620      	mov	r0, r4
 800fd9e:	f1c4 0404 	rsb	r4, r4, #4
 800fda2:	f001 ff53 	bl	8011c4c <ucdr_alignment>
 800fda6:	4405      	add	r5, r0
 800fda8:	2104      	movs	r1, #4
 800fdaa:	4628      	mov	r0, r5
 800fdac:	f001 ff4e 	bl	8011c4c <ucdr_alignment>
 800fdb0:	4420      	add	r0, r4
 800fdb2:	4428      	add	r0, r5
 800fdb4:	bd38      	pop	{r3, r4, r5, pc}
 800fdb6:	bf00      	nop

0800fdb8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800fdb8:	4800      	ldr	r0, [pc, #0]	; (800fdbc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800fdba:	4770      	bx	lr
 800fdbc:	20000cbc 	.word	0x20000cbc

0800fdc0 <ucdr_serialize_endian_array_char>:
 800fdc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdc4:	4619      	mov	r1, r3
 800fdc6:	461f      	mov	r7, r3
 800fdc8:	4605      	mov	r5, r0
 800fdca:	4690      	mov	r8, r2
 800fdcc:	f001 fee6 	bl	8011b9c <ucdr_check_buffer_available_for>
 800fdd0:	b9e0      	cbnz	r0, 800fe0c <ucdr_serialize_endian_array_char+0x4c>
 800fdd2:	463e      	mov	r6, r7
 800fdd4:	e00b      	b.n	800fdee <ucdr_serialize_endian_array_char+0x2e>
 800fdd6:	4441      	add	r1, r8
 800fdd8:	68a8      	ldr	r0, [r5, #8]
 800fdda:	4622      	mov	r2, r4
 800fddc:	1b36      	subs	r6, r6, r4
 800fdde:	f00e fe86 	bl	801eaee <memcpy>
 800fde2:	68ab      	ldr	r3, [r5, #8]
 800fde4:	6928      	ldr	r0, [r5, #16]
 800fde6:	4423      	add	r3, r4
 800fde8:	4420      	add	r0, r4
 800fdea:	60ab      	str	r3, [r5, #8]
 800fdec:	6128      	str	r0, [r5, #16]
 800fdee:	4631      	mov	r1, r6
 800fdf0:	2201      	movs	r2, #1
 800fdf2:	4628      	mov	r0, r5
 800fdf4:	f001 ff5c 	bl	8011cb0 <ucdr_check_final_buffer_behavior_array>
 800fdf8:	1bb9      	subs	r1, r7, r6
 800fdfa:	4604      	mov	r4, r0
 800fdfc:	2800      	cmp	r0, #0
 800fdfe:	d1ea      	bne.n	800fdd6 <ucdr_serialize_endian_array_char+0x16>
 800fe00:	2301      	movs	r3, #1
 800fe02:	7da8      	ldrb	r0, [r5, #22]
 800fe04:	756b      	strb	r3, [r5, #21]
 800fe06:	4058      	eors	r0, r3
 800fe08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe0c:	463a      	mov	r2, r7
 800fe0e:	4641      	mov	r1, r8
 800fe10:	68a8      	ldr	r0, [r5, #8]
 800fe12:	f00e fe6c 	bl	801eaee <memcpy>
 800fe16:	68aa      	ldr	r2, [r5, #8]
 800fe18:	692b      	ldr	r3, [r5, #16]
 800fe1a:	443a      	add	r2, r7
 800fe1c:	443b      	add	r3, r7
 800fe1e:	60aa      	str	r2, [r5, #8]
 800fe20:	612b      	str	r3, [r5, #16]
 800fe22:	e7ed      	b.n	800fe00 <ucdr_serialize_endian_array_char+0x40>

0800fe24 <ucdr_deserialize_endian_array_char>:
 800fe24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe28:	4619      	mov	r1, r3
 800fe2a:	461f      	mov	r7, r3
 800fe2c:	4605      	mov	r5, r0
 800fe2e:	4690      	mov	r8, r2
 800fe30:	f001 feb4 	bl	8011b9c <ucdr_check_buffer_available_for>
 800fe34:	b9e8      	cbnz	r0, 800fe72 <ucdr_deserialize_endian_array_char+0x4e>
 800fe36:	463e      	mov	r6, r7
 800fe38:	e00c      	b.n	800fe54 <ucdr_deserialize_endian_array_char+0x30>
 800fe3a:	eb08 0003 	add.w	r0, r8, r3
 800fe3e:	68a9      	ldr	r1, [r5, #8]
 800fe40:	4622      	mov	r2, r4
 800fe42:	1b36      	subs	r6, r6, r4
 800fe44:	f00e fe53 	bl	801eaee <memcpy>
 800fe48:	68ab      	ldr	r3, [r5, #8]
 800fe4a:	6928      	ldr	r0, [r5, #16]
 800fe4c:	4423      	add	r3, r4
 800fe4e:	4420      	add	r0, r4
 800fe50:	60ab      	str	r3, [r5, #8]
 800fe52:	6128      	str	r0, [r5, #16]
 800fe54:	4631      	mov	r1, r6
 800fe56:	2201      	movs	r2, #1
 800fe58:	4628      	mov	r0, r5
 800fe5a:	f001 ff29 	bl	8011cb0 <ucdr_check_final_buffer_behavior_array>
 800fe5e:	1bbb      	subs	r3, r7, r6
 800fe60:	4604      	mov	r4, r0
 800fe62:	2800      	cmp	r0, #0
 800fe64:	d1e9      	bne.n	800fe3a <ucdr_deserialize_endian_array_char+0x16>
 800fe66:	2301      	movs	r3, #1
 800fe68:	7da8      	ldrb	r0, [r5, #22]
 800fe6a:	756b      	strb	r3, [r5, #21]
 800fe6c:	4058      	eors	r0, r3
 800fe6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe72:	463a      	mov	r2, r7
 800fe74:	68a9      	ldr	r1, [r5, #8]
 800fe76:	4640      	mov	r0, r8
 800fe78:	f00e fe39 	bl	801eaee <memcpy>
 800fe7c:	68aa      	ldr	r2, [r5, #8]
 800fe7e:	692b      	ldr	r3, [r5, #16]
 800fe80:	443a      	add	r2, r7
 800fe82:	443b      	add	r3, r7
 800fe84:	60aa      	str	r2, [r5, #8]
 800fe86:	612b      	str	r3, [r5, #16]
 800fe88:	e7ed      	b.n	800fe66 <ucdr_deserialize_endian_array_char+0x42>
 800fe8a:	bf00      	nop

0800fe8c <ucdr_serialize_array_uint8_t>:
 800fe8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe90:	4688      	mov	r8, r1
 800fe92:	4611      	mov	r1, r2
 800fe94:	4617      	mov	r7, r2
 800fe96:	4605      	mov	r5, r0
 800fe98:	f001 fe80 	bl	8011b9c <ucdr_check_buffer_available_for>
 800fe9c:	b9e0      	cbnz	r0, 800fed8 <ucdr_serialize_array_uint8_t+0x4c>
 800fe9e:	463e      	mov	r6, r7
 800fea0:	e00b      	b.n	800feba <ucdr_serialize_array_uint8_t+0x2e>
 800fea2:	4441      	add	r1, r8
 800fea4:	68a8      	ldr	r0, [r5, #8]
 800fea6:	4622      	mov	r2, r4
 800fea8:	1b36      	subs	r6, r6, r4
 800feaa:	f00e fe20 	bl	801eaee <memcpy>
 800feae:	68ab      	ldr	r3, [r5, #8]
 800feb0:	6928      	ldr	r0, [r5, #16]
 800feb2:	4423      	add	r3, r4
 800feb4:	4420      	add	r0, r4
 800feb6:	60ab      	str	r3, [r5, #8]
 800feb8:	6128      	str	r0, [r5, #16]
 800feba:	4631      	mov	r1, r6
 800febc:	2201      	movs	r2, #1
 800febe:	4628      	mov	r0, r5
 800fec0:	f001 fef6 	bl	8011cb0 <ucdr_check_final_buffer_behavior_array>
 800fec4:	1bb9      	subs	r1, r7, r6
 800fec6:	4604      	mov	r4, r0
 800fec8:	2800      	cmp	r0, #0
 800feca:	d1ea      	bne.n	800fea2 <ucdr_serialize_array_uint8_t+0x16>
 800fecc:	2301      	movs	r3, #1
 800fece:	7da8      	ldrb	r0, [r5, #22]
 800fed0:	756b      	strb	r3, [r5, #21]
 800fed2:	4058      	eors	r0, r3
 800fed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fed8:	463a      	mov	r2, r7
 800feda:	4641      	mov	r1, r8
 800fedc:	68a8      	ldr	r0, [r5, #8]
 800fede:	f00e fe06 	bl	801eaee <memcpy>
 800fee2:	68aa      	ldr	r2, [r5, #8]
 800fee4:	692b      	ldr	r3, [r5, #16]
 800fee6:	443a      	add	r2, r7
 800fee8:	443b      	add	r3, r7
 800feea:	60aa      	str	r2, [r5, #8]
 800feec:	612b      	str	r3, [r5, #16]
 800feee:	e7ed      	b.n	800fecc <ucdr_serialize_array_uint8_t+0x40>

0800fef0 <ucdr_serialize_endian_array_uint8_t>:
 800fef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fef4:	4619      	mov	r1, r3
 800fef6:	461f      	mov	r7, r3
 800fef8:	4605      	mov	r5, r0
 800fefa:	4690      	mov	r8, r2
 800fefc:	f001 fe4e 	bl	8011b9c <ucdr_check_buffer_available_for>
 800ff00:	b9e0      	cbnz	r0, 800ff3c <ucdr_serialize_endian_array_uint8_t+0x4c>
 800ff02:	463e      	mov	r6, r7
 800ff04:	e00b      	b.n	800ff1e <ucdr_serialize_endian_array_uint8_t+0x2e>
 800ff06:	4441      	add	r1, r8
 800ff08:	68a8      	ldr	r0, [r5, #8]
 800ff0a:	4622      	mov	r2, r4
 800ff0c:	1b36      	subs	r6, r6, r4
 800ff0e:	f00e fdee 	bl	801eaee <memcpy>
 800ff12:	68ab      	ldr	r3, [r5, #8]
 800ff14:	6928      	ldr	r0, [r5, #16]
 800ff16:	4423      	add	r3, r4
 800ff18:	4420      	add	r0, r4
 800ff1a:	60ab      	str	r3, [r5, #8]
 800ff1c:	6128      	str	r0, [r5, #16]
 800ff1e:	4631      	mov	r1, r6
 800ff20:	2201      	movs	r2, #1
 800ff22:	4628      	mov	r0, r5
 800ff24:	f001 fec4 	bl	8011cb0 <ucdr_check_final_buffer_behavior_array>
 800ff28:	1bb9      	subs	r1, r7, r6
 800ff2a:	4604      	mov	r4, r0
 800ff2c:	2800      	cmp	r0, #0
 800ff2e:	d1ea      	bne.n	800ff06 <ucdr_serialize_endian_array_uint8_t+0x16>
 800ff30:	2301      	movs	r3, #1
 800ff32:	7da8      	ldrb	r0, [r5, #22]
 800ff34:	756b      	strb	r3, [r5, #21]
 800ff36:	4058      	eors	r0, r3
 800ff38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff3c:	463a      	mov	r2, r7
 800ff3e:	4641      	mov	r1, r8
 800ff40:	68a8      	ldr	r0, [r5, #8]
 800ff42:	f00e fdd4 	bl	801eaee <memcpy>
 800ff46:	68aa      	ldr	r2, [r5, #8]
 800ff48:	692b      	ldr	r3, [r5, #16]
 800ff4a:	443a      	add	r2, r7
 800ff4c:	443b      	add	r3, r7
 800ff4e:	60aa      	str	r2, [r5, #8]
 800ff50:	612b      	str	r3, [r5, #16]
 800ff52:	e7ed      	b.n	800ff30 <ucdr_serialize_endian_array_uint8_t+0x40>

0800ff54 <ucdr_deserialize_array_uint8_t>:
 800ff54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff58:	4688      	mov	r8, r1
 800ff5a:	4611      	mov	r1, r2
 800ff5c:	4617      	mov	r7, r2
 800ff5e:	4605      	mov	r5, r0
 800ff60:	f001 fe1c 	bl	8011b9c <ucdr_check_buffer_available_for>
 800ff64:	b9e8      	cbnz	r0, 800ffa2 <ucdr_deserialize_array_uint8_t+0x4e>
 800ff66:	463e      	mov	r6, r7
 800ff68:	e00c      	b.n	800ff84 <ucdr_deserialize_array_uint8_t+0x30>
 800ff6a:	eb08 0003 	add.w	r0, r8, r3
 800ff6e:	68a9      	ldr	r1, [r5, #8]
 800ff70:	4622      	mov	r2, r4
 800ff72:	1b36      	subs	r6, r6, r4
 800ff74:	f00e fdbb 	bl	801eaee <memcpy>
 800ff78:	68ab      	ldr	r3, [r5, #8]
 800ff7a:	6928      	ldr	r0, [r5, #16]
 800ff7c:	4423      	add	r3, r4
 800ff7e:	4420      	add	r0, r4
 800ff80:	60ab      	str	r3, [r5, #8]
 800ff82:	6128      	str	r0, [r5, #16]
 800ff84:	4631      	mov	r1, r6
 800ff86:	2201      	movs	r2, #1
 800ff88:	4628      	mov	r0, r5
 800ff8a:	f001 fe91 	bl	8011cb0 <ucdr_check_final_buffer_behavior_array>
 800ff8e:	1bbb      	subs	r3, r7, r6
 800ff90:	4604      	mov	r4, r0
 800ff92:	2800      	cmp	r0, #0
 800ff94:	d1e9      	bne.n	800ff6a <ucdr_deserialize_array_uint8_t+0x16>
 800ff96:	2301      	movs	r3, #1
 800ff98:	7da8      	ldrb	r0, [r5, #22]
 800ff9a:	756b      	strb	r3, [r5, #21]
 800ff9c:	4058      	eors	r0, r3
 800ff9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffa2:	463a      	mov	r2, r7
 800ffa4:	68a9      	ldr	r1, [r5, #8]
 800ffa6:	4640      	mov	r0, r8
 800ffa8:	f00e fda1 	bl	801eaee <memcpy>
 800ffac:	68aa      	ldr	r2, [r5, #8]
 800ffae:	692b      	ldr	r3, [r5, #16]
 800ffb0:	443a      	add	r2, r7
 800ffb2:	443b      	add	r3, r7
 800ffb4:	60aa      	str	r2, [r5, #8]
 800ffb6:	612b      	str	r3, [r5, #16]
 800ffb8:	e7ed      	b.n	800ff96 <ucdr_deserialize_array_uint8_t+0x42>
 800ffba:	bf00      	nop

0800ffbc <ucdr_deserialize_endian_array_uint8_t>:
 800ffbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffc0:	4619      	mov	r1, r3
 800ffc2:	461f      	mov	r7, r3
 800ffc4:	4605      	mov	r5, r0
 800ffc6:	4690      	mov	r8, r2
 800ffc8:	f001 fde8 	bl	8011b9c <ucdr_check_buffer_available_for>
 800ffcc:	b9e8      	cbnz	r0, 801000a <ucdr_deserialize_endian_array_uint8_t+0x4e>
 800ffce:	463e      	mov	r6, r7
 800ffd0:	e00c      	b.n	800ffec <ucdr_deserialize_endian_array_uint8_t+0x30>
 800ffd2:	eb08 0003 	add.w	r0, r8, r3
 800ffd6:	68a9      	ldr	r1, [r5, #8]
 800ffd8:	4622      	mov	r2, r4
 800ffda:	1b36      	subs	r6, r6, r4
 800ffdc:	f00e fd87 	bl	801eaee <memcpy>
 800ffe0:	68ab      	ldr	r3, [r5, #8]
 800ffe2:	6928      	ldr	r0, [r5, #16]
 800ffe4:	4423      	add	r3, r4
 800ffe6:	4420      	add	r0, r4
 800ffe8:	60ab      	str	r3, [r5, #8]
 800ffea:	6128      	str	r0, [r5, #16]
 800ffec:	4631      	mov	r1, r6
 800ffee:	2201      	movs	r2, #1
 800fff0:	4628      	mov	r0, r5
 800fff2:	f001 fe5d 	bl	8011cb0 <ucdr_check_final_buffer_behavior_array>
 800fff6:	1bbb      	subs	r3, r7, r6
 800fff8:	4604      	mov	r4, r0
 800fffa:	2800      	cmp	r0, #0
 800fffc:	d1e9      	bne.n	800ffd2 <ucdr_deserialize_endian_array_uint8_t+0x16>
 800fffe:	2301      	movs	r3, #1
 8010000:	7da8      	ldrb	r0, [r5, #22]
 8010002:	756b      	strb	r3, [r5, #21]
 8010004:	4058      	eors	r0, r3
 8010006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801000a:	463a      	mov	r2, r7
 801000c:	68a9      	ldr	r1, [r5, #8]
 801000e:	4640      	mov	r0, r8
 8010010:	f00e fd6d 	bl	801eaee <memcpy>
 8010014:	68aa      	ldr	r2, [r5, #8]
 8010016:	692b      	ldr	r3, [r5, #16]
 8010018:	443a      	add	r2, r7
 801001a:	443b      	add	r3, r7
 801001c:	60aa      	str	r2, [r5, #8]
 801001e:	612b      	str	r3, [r5, #16]
 8010020:	e7ed      	b.n	800fffe <ucdr_deserialize_endian_array_uint8_t+0x42>
 8010022:	bf00      	nop

08010024 <ucdr_serialize_array_int16_t>:
 8010024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010028:	4604      	mov	r4, r0
 801002a:	460e      	mov	r6, r1
 801002c:	2102      	movs	r1, #2
 801002e:	4617      	mov	r7, r2
 8010030:	f001 fe14 	bl	8011c5c <ucdr_buffer_alignment>
 8010034:	4601      	mov	r1, r0
 8010036:	4620      	mov	r0, r4
 8010038:	7d65      	ldrb	r5, [r4, #21]
 801003a:	f001 fe57 	bl	8011cec <ucdr_advance_buffer>
 801003e:	7d21      	ldrb	r1, [r4, #20]
 8010040:	7565      	strb	r5, [r4, #21]
 8010042:	2901      	cmp	r1, #1
 8010044:	d011      	beq.n	801006a <ucdr_serialize_array_int16_t+0x46>
 8010046:	b15f      	cbz	r7, 8010060 <ucdr_serialize_array_int16_t+0x3c>
 8010048:	3e02      	subs	r6, #2
 801004a:	2500      	movs	r5, #0
 801004c:	e000      	b.n	8010050 <ucdr_serialize_array_int16_t+0x2c>
 801004e:	7d21      	ldrb	r1, [r4, #20]
 8010050:	3501      	adds	r5, #1
 8010052:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
 8010056:	4620      	mov	r0, r4
 8010058:	f000 ff20 	bl	8010e9c <ucdr_serialize_endian_int16_t>
 801005c:	42af      	cmp	r7, r5
 801005e:	d1f6      	bne.n	801004e <ucdr_serialize_array_int16_t+0x2a>
 8010060:	7da0      	ldrb	r0, [r4, #22]
 8010062:	f080 0001 	eor.w	r0, r0, #1
 8010066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801006a:	007f      	lsls	r7, r7, #1
 801006c:	4620      	mov	r0, r4
 801006e:	4639      	mov	r1, r7
 8010070:	f001 fd94 	bl	8011b9c <ucdr_check_buffer_available_for>
 8010074:	b9f8      	cbnz	r0, 80100b6 <ucdr_serialize_array_int16_t+0x92>
 8010076:	46b8      	mov	r8, r7
 8010078:	e00c      	b.n	8010094 <ucdr_serialize_array_int16_t+0x70>
 801007a:	462a      	mov	r2, r5
 801007c:	4431      	add	r1, r6
 801007e:	68a0      	ldr	r0, [r4, #8]
 8010080:	eba8 0805 	sub.w	r8, r8, r5
 8010084:	f00e fd33 	bl	801eaee <memcpy>
 8010088:	68a2      	ldr	r2, [r4, #8]
 801008a:	6923      	ldr	r3, [r4, #16]
 801008c:	442a      	add	r2, r5
 801008e:	442b      	add	r3, r5
 8010090:	60a2      	str	r2, [r4, #8]
 8010092:	6123      	str	r3, [r4, #16]
 8010094:	4641      	mov	r1, r8
 8010096:	2202      	movs	r2, #2
 8010098:	4620      	mov	r0, r4
 801009a:	f001 fe09 	bl	8011cb0 <ucdr_check_final_buffer_behavior_array>
 801009e:	eba7 0108 	sub.w	r1, r7, r8
 80100a2:	4605      	mov	r5, r0
 80100a4:	2800      	cmp	r0, #0
 80100a6:	d1e8      	bne.n	801007a <ucdr_serialize_array_int16_t+0x56>
 80100a8:	2302      	movs	r3, #2
 80100aa:	7da0      	ldrb	r0, [r4, #22]
 80100ac:	7563      	strb	r3, [r4, #21]
 80100ae:	f080 0001 	eor.w	r0, r0, #1
 80100b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100b6:	463a      	mov	r2, r7
 80100b8:	4631      	mov	r1, r6
 80100ba:	68a0      	ldr	r0, [r4, #8]
 80100bc:	f00e fd17 	bl	801eaee <memcpy>
 80100c0:	68a2      	ldr	r2, [r4, #8]
 80100c2:	6923      	ldr	r3, [r4, #16]
 80100c4:	443a      	add	r2, r7
 80100c6:	441f      	add	r7, r3
 80100c8:	60a2      	str	r2, [r4, #8]
 80100ca:	6127      	str	r7, [r4, #16]
 80100cc:	e7ec      	b.n	80100a8 <ucdr_serialize_array_int16_t+0x84>
 80100ce:	bf00      	nop

080100d0 <ucdr_deserialize_array_int16_t>:
 80100d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100d4:	4604      	mov	r4, r0
 80100d6:	460e      	mov	r6, r1
 80100d8:	2102      	movs	r1, #2
 80100da:	4617      	mov	r7, r2
 80100dc:	f001 fdbe 	bl	8011c5c <ucdr_buffer_alignment>
 80100e0:	4601      	mov	r1, r0
 80100e2:	4620      	mov	r0, r4
 80100e4:	7d65      	ldrb	r5, [r4, #21]
 80100e6:	f001 fe01 	bl	8011cec <ucdr_advance_buffer>
 80100ea:	7d21      	ldrb	r1, [r4, #20]
 80100ec:	7565      	strb	r5, [r4, #21]
 80100ee:	2901      	cmp	r1, #1
 80100f0:	d010      	beq.n	8010114 <ucdr_deserialize_array_int16_t+0x44>
 80100f2:	b157      	cbz	r7, 801010a <ucdr_deserialize_array_int16_t+0x3a>
 80100f4:	2500      	movs	r5, #0
 80100f6:	e000      	b.n	80100fa <ucdr_deserialize_array_int16_t+0x2a>
 80100f8:	7d21      	ldrb	r1, [r4, #20]
 80100fa:	3501      	adds	r5, #1
 80100fc:	4632      	mov	r2, r6
 80100fe:	4620      	mov	r0, r4
 8010100:	3602      	adds	r6, #2
 8010102:	f000 ffbf 	bl	8011084 <ucdr_deserialize_endian_int16_t>
 8010106:	42af      	cmp	r7, r5
 8010108:	d1f6      	bne.n	80100f8 <ucdr_deserialize_array_int16_t+0x28>
 801010a:	7da0      	ldrb	r0, [r4, #22]
 801010c:	f080 0001 	eor.w	r0, r0, #1
 8010110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010114:	007f      	lsls	r7, r7, #1
 8010116:	4620      	mov	r0, r4
 8010118:	4639      	mov	r1, r7
 801011a:	f001 fd3f 	bl	8011b9c <ucdr_check_buffer_available_for>
 801011e:	b9f8      	cbnz	r0, 8010160 <ucdr_deserialize_array_int16_t+0x90>
 8010120:	46b8      	mov	r8, r7
 8010122:	e00c      	b.n	801013e <ucdr_deserialize_array_int16_t+0x6e>
 8010124:	18f0      	adds	r0, r6, r3
 8010126:	462a      	mov	r2, r5
 8010128:	68a1      	ldr	r1, [r4, #8]
 801012a:	eba8 0805 	sub.w	r8, r8, r5
 801012e:	f00e fcde 	bl	801eaee <memcpy>
 8010132:	68a2      	ldr	r2, [r4, #8]
 8010134:	6923      	ldr	r3, [r4, #16]
 8010136:	442a      	add	r2, r5
 8010138:	442b      	add	r3, r5
 801013a:	60a2      	str	r2, [r4, #8]
 801013c:	6123      	str	r3, [r4, #16]
 801013e:	4641      	mov	r1, r8
 8010140:	2202      	movs	r2, #2
 8010142:	4620      	mov	r0, r4
 8010144:	f001 fdb4 	bl	8011cb0 <ucdr_check_final_buffer_behavior_array>
 8010148:	eba7 0308 	sub.w	r3, r7, r8
 801014c:	4605      	mov	r5, r0
 801014e:	2800      	cmp	r0, #0
 8010150:	d1e8      	bne.n	8010124 <ucdr_deserialize_array_int16_t+0x54>
 8010152:	2302      	movs	r3, #2
 8010154:	7da0      	ldrb	r0, [r4, #22]
 8010156:	7563      	strb	r3, [r4, #21]
 8010158:	f080 0001 	eor.w	r0, r0, #1
 801015c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010160:	463a      	mov	r2, r7
 8010162:	68a1      	ldr	r1, [r4, #8]
 8010164:	4630      	mov	r0, r6
 8010166:	f00e fcc2 	bl	801eaee <memcpy>
 801016a:	68a2      	ldr	r2, [r4, #8]
 801016c:	6923      	ldr	r3, [r4, #16]
 801016e:	443a      	add	r2, r7
 8010170:	441f      	add	r7, r3
 8010172:	60a2      	str	r2, [r4, #8]
 8010174:	6127      	str	r7, [r4, #16]
 8010176:	e7ec      	b.n	8010152 <ucdr_deserialize_array_int16_t+0x82>

08010178 <ucdr_serialize_array_float>:
 8010178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801017c:	4604      	mov	r4, r0
 801017e:	460e      	mov	r6, r1
 8010180:	2104      	movs	r1, #4
 8010182:	4617      	mov	r7, r2
 8010184:	f001 fd6a 	bl	8011c5c <ucdr_buffer_alignment>
 8010188:	4601      	mov	r1, r0
 801018a:	4620      	mov	r0, r4
 801018c:	7d65      	ldrb	r5, [r4, #21]
 801018e:	f001 fdad 	bl	8011cec <ucdr_advance_buffer>
 8010192:	7d21      	ldrb	r1, [r4, #20]
 8010194:	7565      	strb	r5, [r4, #21]
 8010196:	2901      	cmp	r1, #1
 8010198:	d010      	beq.n	80101bc <ucdr_serialize_array_float+0x44>
 801019a:	b157      	cbz	r7, 80101b2 <ucdr_serialize_array_float+0x3a>
 801019c:	2500      	movs	r5, #0
 801019e:	e000      	b.n	80101a2 <ucdr_serialize_array_float+0x2a>
 80101a0:	7d21      	ldrb	r1, [r4, #20]
 80101a2:	3501      	adds	r5, #1
 80101a4:	ecb6 0a01 	vldmia	r6!, {s0}
 80101a8:	4620      	mov	r0, r4
 80101aa:	f001 fb37 	bl	801181c <ucdr_serialize_endian_float>
 80101ae:	42af      	cmp	r7, r5
 80101b0:	d1f6      	bne.n	80101a0 <ucdr_serialize_array_float+0x28>
 80101b2:	7da0      	ldrb	r0, [r4, #22]
 80101b4:	f080 0001 	eor.w	r0, r0, #1
 80101b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101bc:	00bf      	lsls	r7, r7, #2
 80101be:	4620      	mov	r0, r4
 80101c0:	4639      	mov	r1, r7
 80101c2:	f001 fceb 	bl	8011b9c <ucdr_check_buffer_available_for>
 80101c6:	b9f8      	cbnz	r0, 8010208 <ucdr_serialize_array_float+0x90>
 80101c8:	46b8      	mov	r8, r7
 80101ca:	e00c      	b.n	80101e6 <ucdr_serialize_array_float+0x6e>
 80101cc:	462a      	mov	r2, r5
 80101ce:	4431      	add	r1, r6
 80101d0:	68a0      	ldr	r0, [r4, #8]
 80101d2:	eba8 0805 	sub.w	r8, r8, r5
 80101d6:	f00e fc8a 	bl	801eaee <memcpy>
 80101da:	68a2      	ldr	r2, [r4, #8]
 80101dc:	6923      	ldr	r3, [r4, #16]
 80101de:	442a      	add	r2, r5
 80101e0:	442b      	add	r3, r5
 80101e2:	60a2      	str	r2, [r4, #8]
 80101e4:	6123      	str	r3, [r4, #16]
 80101e6:	4641      	mov	r1, r8
 80101e8:	2204      	movs	r2, #4
 80101ea:	4620      	mov	r0, r4
 80101ec:	f001 fd60 	bl	8011cb0 <ucdr_check_final_buffer_behavior_array>
 80101f0:	eba7 0108 	sub.w	r1, r7, r8
 80101f4:	4605      	mov	r5, r0
 80101f6:	2800      	cmp	r0, #0
 80101f8:	d1e8      	bne.n	80101cc <ucdr_serialize_array_float+0x54>
 80101fa:	2304      	movs	r3, #4
 80101fc:	7da0      	ldrb	r0, [r4, #22]
 80101fe:	7563      	strb	r3, [r4, #21]
 8010200:	f080 0001 	eor.w	r0, r0, #1
 8010204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010208:	463a      	mov	r2, r7
 801020a:	4631      	mov	r1, r6
 801020c:	68a0      	ldr	r0, [r4, #8]
 801020e:	f00e fc6e 	bl	801eaee <memcpy>
 8010212:	68a2      	ldr	r2, [r4, #8]
 8010214:	6923      	ldr	r3, [r4, #16]
 8010216:	443a      	add	r2, r7
 8010218:	441f      	add	r7, r3
 801021a:	60a2      	str	r2, [r4, #8]
 801021c:	6127      	str	r7, [r4, #16]
 801021e:	e7ec      	b.n	80101fa <ucdr_serialize_array_float+0x82>

08010220 <ucdr_deserialize_array_float>:
 8010220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010224:	4604      	mov	r4, r0
 8010226:	460e      	mov	r6, r1
 8010228:	2104      	movs	r1, #4
 801022a:	4617      	mov	r7, r2
 801022c:	f001 fd16 	bl	8011c5c <ucdr_buffer_alignment>
 8010230:	4601      	mov	r1, r0
 8010232:	4620      	mov	r0, r4
 8010234:	7d65      	ldrb	r5, [r4, #21]
 8010236:	f001 fd59 	bl	8011cec <ucdr_advance_buffer>
 801023a:	7d21      	ldrb	r1, [r4, #20]
 801023c:	7565      	strb	r5, [r4, #21]
 801023e:	2901      	cmp	r1, #1
 8010240:	d010      	beq.n	8010264 <ucdr_deserialize_array_float+0x44>
 8010242:	b157      	cbz	r7, 801025a <ucdr_deserialize_array_float+0x3a>
 8010244:	2500      	movs	r5, #0
 8010246:	e000      	b.n	801024a <ucdr_deserialize_array_float+0x2a>
 8010248:	7d21      	ldrb	r1, [r4, #20]
 801024a:	3501      	adds	r5, #1
 801024c:	4632      	mov	r2, r6
 801024e:	4620      	mov	r0, r4
 8010250:	3604      	adds	r6, #4
 8010252:	f001 fc0d 	bl	8011a70 <ucdr_deserialize_endian_float>
 8010256:	42af      	cmp	r7, r5
 8010258:	d1f6      	bne.n	8010248 <ucdr_deserialize_array_float+0x28>
 801025a:	7da0      	ldrb	r0, [r4, #22]
 801025c:	f080 0001 	eor.w	r0, r0, #1
 8010260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010264:	00bf      	lsls	r7, r7, #2
 8010266:	4620      	mov	r0, r4
 8010268:	4639      	mov	r1, r7
 801026a:	f001 fc97 	bl	8011b9c <ucdr_check_buffer_available_for>
 801026e:	b9f8      	cbnz	r0, 80102b0 <ucdr_deserialize_array_float+0x90>
 8010270:	46b8      	mov	r8, r7
 8010272:	e00c      	b.n	801028e <ucdr_deserialize_array_float+0x6e>
 8010274:	18f0      	adds	r0, r6, r3
 8010276:	462a      	mov	r2, r5
 8010278:	68a1      	ldr	r1, [r4, #8]
 801027a:	eba8 0805 	sub.w	r8, r8, r5
 801027e:	f00e fc36 	bl	801eaee <memcpy>
 8010282:	68a2      	ldr	r2, [r4, #8]
 8010284:	6923      	ldr	r3, [r4, #16]
 8010286:	442a      	add	r2, r5
 8010288:	442b      	add	r3, r5
 801028a:	60a2      	str	r2, [r4, #8]
 801028c:	6123      	str	r3, [r4, #16]
 801028e:	4641      	mov	r1, r8
 8010290:	2204      	movs	r2, #4
 8010292:	4620      	mov	r0, r4
 8010294:	f001 fd0c 	bl	8011cb0 <ucdr_check_final_buffer_behavior_array>
 8010298:	eba7 0308 	sub.w	r3, r7, r8
 801029c:	4605      	mov	r5, r0
 801029e:	2800      	cmp	r0, #0
 80102a0:	d1e8      	bne.n	8010274 <ucdr_deserialize_array_float+0x54>
 80102a2:	2304      	movs	r3, #4
 80102a4:	7da0      	ldrb	r0, [r4, #22]
 80102a6:	7563      	strb	r3, [r4, #21]
 80102a8:	f080 0001 	eor.w	r0, r0, #1
 80102ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102b0:	463a      	mov	r2, r7
 80102b2:	68a1      	ldr	r1, [r4, #8]
 80102b4:	4630      	mov	r0, r6
 80102b6:	f00e fc1a 	bl	801eaee <memcpy>
 80102ba:	68a2      	ldr	r2, [r4, #8]
 80102bc:	6923      	ldr	r3, [r4, #16]
 80102be:	443a      	add	r2, r7
 80102c0:	441f      	add	r7, r3
 80102c2:	60a2      	str	r2, [r4, #8]
 80102c4:	6127      	str	r7, [r4, #16]
 80102c6:	e7ec      	b.n	80102a2 <ucdr_deserialize_array_float+0x82>

080102c8 <ucdr_serialize_bool>:
 80102c8:	b538      	push	{r3, r4, r5, lr}
 80102ca:	460d      	mov	r5, r1
 80102cc:	2101      	movs	r1, #1
 80102ce:	4604      	mov	r4, r0
 80102d0:	f001 fc70 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 80102d4:	b148      	cbz	r0, 80102ea <ucdr_serialize_bool+0x22>
 80102d6:	68a3      	ldr	r3, [r4, #8]
 80102d8:	2101      	movs	r1, #1
 80102da:	701d      	strb	r5, [r3, #0]
 80102dc:	68a2      	ldr	r2, [r4, #8]
 80102de:	6923      	ldr	r3, [r4, #16]
 80102e0:	440a      	add	r2, r1
 80102e2:	7561      	strb	r1, [r4, #21]
 80102e4:	440b      	add	r3, r1
 80102e6:	60a2      	str	r2, [r4, #8]
 80102e8:	6123      	str	r3, [r4, #16]
 80102ea:	7da0      	ldrb	r0, [r4, #22]
 80102ec:	f080 0001 	eor.w	r0, r0, #1
 80102f0:	bd38      	pop	{r3, r4, r5, pc}
 80102f2:	bf00      	nop

080102f4 <ucdr_deserialize_bool>:
 80102f4:	b538      	push	{r3, r4, r5, lr}
 80102f6:	460d      	mov	r5, r1
 80102f8:	2101      	movs	r1, #1
 80102fa:	4604      	mov	r4, r0
 80102fc:	f001 fc5a 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 8010300:	b160      	cbz	r0, 801031c <ucdr_deserialize_bool+0x28>
 8010302:	68a2      	ldr	r2, [r4, #8]
 8010304:	2101      	movs	r1, #1
 8010306:	6923      	ldr	r3, [r4, #16]
 8010308:	f812 0b01 	ldrb.w	r0, [r2], #1
 801030c:	440b      	add	r3, r1
 801030e:	3800      	subs	r0, #0
 8010310:	bf18      	it	ne
 8010312:	2001      	movne	r0, #1
 8010314:	7028      	strb	r0, [r5, #0]
 8010316:	60a2      	str	r2, [r4, #8]
 8010318:	6123      	str	r3, [r4, #16]
 801031a:	7561      	strb	r1, [r4, #21]
 801031c:	7da0      	ldrb	r0, [r4, #22]
 801031e:	f080 0001 	eor.w	r0, r0, #1
 8010322:	bd38      	pop	{r3, r4, r5, pc}

08010324 <ucdr_serialize_uint8_t>:
 8010324:	b538      	push	{r3, r4, r5, lr}
 8010326:	460d      	mov	r5, r1
 8010328:	2101      	movs	r1, #1
 801032a:	4604      	mov	r4, r0
 801032c:	f001 fc42 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 8010330:	b148      	cbz	r0, 8010346 <ucdr_serialize_uint8_t+0x22>
 8010332:	68a3      	ldr	r3, [r4, #8]
 8010334:	2101      	movs	r1, #1
 8010336:	701d      	strb	r5, [r3, #0]
 8010338:	68a2      	ldr	r2, [r4, #8]
 801033a:	6923      	ldr	r3, [r4, #16]
 801033c:	440a      	add	r2, r1
 801033e:	7561      	strb	r1, [r4, #21]
 8010340:	440b      	add	r3, r1
 8010342:	60a2      	str	r2, [r4, #8]
 8010344:	6123      	str	r3, [r4, #16]
 8010346:	7da0      	ldrb	r0, [r4, #22]
 8010348:	f080 0001 	eor.w	r0, r0, #1
 801034c:	bd38      	pop	{r3, r4, r5, pc}
 801034e:	bf00      	nop

08010350 <ucdr_deserialize_uint8_t>:
 8010350:	b538      	push	{r3, r4, r5, lr}
 8010352:	460d      	mov	r5, r1
 8010354:	2101      	movs	r1, #1
 8010356:	4604      	mov	r4, r0
 8010358:	f001 fc2c 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 801035c:	b150      	cbz	r0, 8010374 <ucdr_deserialize_uint8_t+0x24>
 801035e:	68a3      	ldr	r3, [r4, #8]
 8010360:	2101      	movs	r1, #1
 8010362:	781b      	ldrb	r3, [r3, #0]
 8010364:	702b      	strb	r3, [r5, #0]
 8010366:	68a2      	ldr	r2, [r4, #8]
 8010368:	6923      	ldr	r3, [r4, #16]
 801036a:	440a      	add	r2, r1
 801036c:	7561      	strb	r1, [r4, #21]
 801036e:	440b      	add	r3, r1
 8010370:	60a2      	str	r2, [r4, #8]
 8010372:	6123      	str	r3, [r4, #16]
 8010374:	7da0      	ldrb	r0, [r4, #22]
 8010376:	f080 0001 	eor.w	r0, r0, #1
 801037a:	bd38      	pop	{r3, r4, r5, pc}

0801037c <ucdr_serialize_uint16_t>:
 801037c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010380:	460b      	mov	r3, r1
 8010382:	b082      	sub	sp, #8
 8010384:	4604      	mov	r4, r0
 8010386:	2102      	movs	r1, #2
 8010388:	f8ad 3006 	strh.w	r3, [sp, #6]
 801038c:	f001 fc66 	bl	8011c5c <ucdr_buffer_alignment>
 8010390:	4601      	mov	r1, r0
 8010392:	4620      	mov	r0, r4
 8010394:	7d67      	ldrb	r7, [r4, #21]
 8010396:	f001 fca9 	bl	8011cec <ucdr_advance_buffer>
 801039a:	2102      	movs	r1, #2
 801039c:	4620      	mov	r0, r4
 801039e:	f001 fbfd 	bl	8011b9c <ucdr_check_buffer_available_for>
 80103a2:	bb78      	cbnz	r0, 8010404 <ucdr_serialize_uint16_t+0x88>
 80103a4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80103a8:	42ab      	cmp	r3, r5
 80103aa:	d926      	bls.n	80103fa <ucdr_serialize_uint16_t+0x7e>
 80103ac:	1b5e      	subs	r6, r3, r5
 80103ae:	60a3      	str	r3, [r4, #8]
 80103b0:	6923      	ldr	r3, [r4, #16]
 80103b2:	4620      	mov	r0, r4
 80103b4:	f1c6 0802 	rsb	r8, r6, #2
 80103b8:	4433      	add	r3, r6
 80103ba:	4641      	mov	r1, r8
 80103bc:	6123      	str	r3, [r4, #16]
 80103be:	f001 fbf9 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 80103c2:	2800      	cmp	r0, #0
 80103c4:	d03b      	beq.n	801043e <ucdr_serialize_uint16_t+0xc2>
 80103c6:	7d23      	ldrb	r3, [r4, #20]
 80103c8:	2b01      	cmp	r3, #1
 80103ca:	d04a      	beq.n	8010462 <ucdr_serialize_uint16_t+0xe6>
 80103cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80103d0:	702b      	strb	r3, [r5, #0]
 80103d2:	2e00      	cmp	r6, #0
 80103d4:	d040      	beq.n	8010458 <ucdr_serialize_uint16_t+0xdc>
 80103d6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80103da:	706b      	strb	r3, [r5, #1]
 80103dc:	6923      	ldr	r3, [r4, #16]
 80103de:	2102      	movs	r1, #2
 80103e0:	68a2      	ldr	r2, [r4, #8]
 80103e2:	3302      	adds	r3, #2
 80103e4:	7da0      	ldrb	r0, [r4, #22]
 80103e6:	4442      	add	r2, r8
 80103e8:	7561      	strb	r1, [r4, #21]
 80103ea:	1b9e      	subs	r6, r3, r6
 80103ec:	f080 0001 	eor.w	r0, r0, #1
 80103f0:	60a2      	str	r2, [r4, #8]
 80103f2:	6126      	str	r6, [r4, #16]
 80103f4:	b002      	add	sp, #8
 80103f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103fa:	2102      	movs	r1, #2
 80103fc:	4620      	mov	r0, r4
 80103fe:	f001 fbd9 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 8010402:	b190      	cbz	r0, 801042a <ucdr_serialize_uint16_t+0xae>
 8010404:	7d23      	ldrb	r3, [r4, #20]
 8010406:	2b01      	cmp	r3, #1
 8010408:	68a3      	ldr	r3, [r4, #8]
 801040a:	d014      	beq.n	8010436 <ucdr_serialize_uint16_t+0xba>
 801040c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010410:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010414:	7019      	strb	r1, [r3, #0]
 8010416:	68a3      	ldr	r3, [r4, #8]
 8010418:	705a      	strb	r2, [r3, #1]
 801041a:	2102      	movs	r1, #2
 801041c:	68a2      	ldr	r2, [r4, #8]
 801041e:	6923      	ldr	r3, [r4, #16]
 8010420:	440a      	add	r2, r1
 8010422:	7561      	strb	r1, [r4, #21]
 8010424:	440b      	add	r3, r1
 8010426:	60a2      	str	r2, [r4, #8]
 8010428:	6123      	str	r3, [r4, #16]
 801042a:	7da0      	ldrb	r0, [r4, #22]
 801042c:	f080 0001 	eor.w	r0, r0, #1
 8010430:	b002      	add	sp, #8
 8010432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010436:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801043a:	801a      	strh	r2, [r3, #0]
 801043c:	e7ed      	b.n	801041a <ucdr_serialize_uint16_t+0x9e>
 801043e:	68a2      	ldr	r2, [r4, #8]
 8010440:	6923      	ldr	r3, [r4, #16]
 8010442:	7da0      	ldrb	r0, [r4, #22]
 8010444:	1b92      	subs	r2, r2, r6
 8010446:	1b9b      	subs	r3, r3, r6
 8010448:	7567      	strb	r7, [r4, #21]
 801044a:	f080 0001 	eor.w	r0, r0, #1
 801044e:	60a2      	str	r2, [r4, #8]
 8010450:	6123      	str	r3, [r4, #16]
 8010452:	b002      	add	sp, #8
 8010454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010458:	68a3      	ldr	r3, [r4, #8]
 801045a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801045e:	701a      	strb	r2, [r3, #0]
 8010460:	e7bc      	b.n	80103dc <ucdr_serialize_uint16_t+0x60>
 8010462:	4628      	mov	r0, r5
 8010464:	f10d 0506 	add.w	r5, sp, #6
 8010468:	4632      	mov	r2, r6
 801046a:	4629      	mov	r1, r5
 801046c:	f00e fb3f 	bl	801eaee <memcpy>
 8010470:	4642      	mov	r2, r8
 8010472:	19a9      	adds	r1, r5, r6
 8010474:	68a0      	ldr	r0, [r4, #8]
 8010476:	f00e fb3a 	bl	801eaee <memcpy>
 801047a:	e7af      	b.n	80103dc <ucdr_serialize_uint16_t+0x60>

0801047c <ucdr_serialize_endian_uint16_t>:
 801047c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010480:	4604      	mov	r4, r0
 8010482:	b083      	sub	sp, #12
 8010484:	460d      	mov	r5, r1
 8010486:	2102      	movs	r1, #2
 8010488:	f8ad 2006 	strh.w	r2, [sp, #6]
 801048c:	f001 fbe6 	bl	8011c5c <ucdr_buffer_alignment>
 8010490:	4601      	mov	r1, r0
 8010492:	4620      	mov	r0, r4
 8010494:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010498:	f001 fc28 	bl	8011cec <ucdr_advance_buffer>
 801049c:	2102      	movs	r1, #2
 801049e:	4620      	mov	r0, r4
 80104a0:	f001 fb7c 	bl	8011b9c <ucdr_check_buffer_available_for>
 80104a4:	bb70      	cbnz	r0, 8010504 <ucdr_serialize_endian_uint16_t+0x88>
 80104a6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80104aa:	42be      	cmp	r6, r7
 80104ac:	d925      	bls.n	80104fa <ucdr_serialize_endian_uint16_t+0x7e>
 80104ae:	6923      	ldr	r3, [r4, #16]
 80104b0:	4620      	mov	r0, r4
 80104b2:	60a6      	str	r6, [r4, #8]
 80104b4:	1bf6      	subs	r6, r6, r7
 80104b6:	4433      	add	r3, r6
 80104b8:	f1c6 0902 	rsb	r9, r6, #2
 80104bc:	6123      	str	r3, [r4, #16]
 80104be:	4649      	mov	r1, r9
 80104c0:	f001 fb78 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 80104c4:	2800      	cmp	r0, #0
 80104c6:	d039      	beq.n	801053c <ucdr_serialize_endian_uint16_t+0xc0>
 80104c8:	2d01      	cmp	r5, #1
 80104ca:	d04a      	beq.n	8010562 <ucdr_serialize_endian_uint16_t+0xe6>
 80104cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80104d0:	703b      	strb	r3, [r7, #0]
 80104d2:	2e00      	cmp	r6, #0
 80104d4:	d040      	beq.n	8010558 <ucdr_serialize_endian_uint16_t+0xdc>
 80104d6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80104da:	707b      	strb	r3, [r7, #1]
 80104dc:	6923      	ldr	r3, [r4, #16]
 80104de:	2102      	movs	r1, #2
 80104e0:	68a2      	ldr	r2, [r4, #8]
 80104e2:	7da0      	ldrb	r0, [r4, #22]
 80104e4:	3302      	adds	r3, #2
 80104e6:	444a      	add	r2, r9
 80104e8:	7561      	strb	r1, [r4, #21]
 80104ea:	1b9b      	subs	r3, r3, r6
 80104ec:	f080 0001 	eor.w	r0, r0, #1
 80104f0:	60a2      	str	r2, [r4, #8]
 80104f2:	6123      	str	r3, [r4, #16]
 80104f4:	b003      	add	sp, #12
 80104f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80104fa:	2102      	movs	r1, #2
 80104fc:	4620      	mov	r0, r4
 80104fe:	f001 fb59 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 8010502:	b188      	cbz	r0, 8010528 <ucdr_serialize_endian_uint16_t+0xac>
 8010504:	2d01      	cmp	r5, #1
 8010506:	68a3      	ldr	r3, [r4, #8]
 8010508:	d014      	beq.n	8010534 <ucdr_serialize_endian_uint16_t+0xb8>
 801050a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801050e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010512:	7019      	strb	r1, [r3, #0]
 8010514:	68a3      	ldr	r3, [r4, #8]
 8010516:	705a      	strb	r2, [r3, #1]
 8010518:	2102      	movs	r1, #2
 801051a:	68a2      	ldr	r2, [r4, #8]
 801051c:	6923      	ldr	r3, [r4, #16]
 801051e:	440a      	add	r2, r1
 8010520:	7561      	strb	r1, [r4, #21]
 8010522:	440b      	add	r3, r1
 8010524:	60a2      	str	r2, [r4, #8]
 8010526:	6123      	str	r3, [r4, #16]
 8010528:	7da0      	ldrb	r0, [r4, #22]
 801052a:	f080 0001 	eor.w	r0, r0, #1
 801052e:	b003      	add	sp, #12
 8010530:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010534:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010538:	801a      	strh	r2, [r3, #0]
 801053a:	e7ed      	b.n	8010518 <ucdr_serialize_endian_uint16_t+0x9c>
 801053c:	68a2      	ldr	r2, [r4, #8]
 801053e:	6923      	ldr	r3, [r4, #16]
 8010540:	7da0      	ldrb	r0, [r4, #22]
 8010542:	1b92      	subs	r2, r2, r6
 8010544:	1b9b      	subs	r3, r3, r6
 8010546:	f884 8015 	strb.w	r8, [r4, #21]
 801054a:	f080 0001 	eor.w	r0, r0, #1
 801054e:	60a2      	str	r2, [r4, #8]
 8010550:	6123      	str	r3, [r4, #16]
 8010552:	b003      	add	sp, #12
 8010554:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010558:	68a3      	ldr	r3, [r4, #8]
 801055a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801055e:	701a      	strb	r2, [r3, #0]
 8010560:	e7bc      	b.n	80104dc <ucdr_serialize_endian_uint16_t+0x60>
 8010562:	f10d 0506 	add.w	r5, sp, #6
 8010566:	4632      	mov	r2, r6
 8010568:	4638      	mov	r0, r7
 801056a:	4629      	mov	r1, r5
 801056c:	f00e fabf 	bl	801eaee <memcpy>
 8010570:	464a      	mov	r2, r9
 8010572:	19a9      	adds	r1, r5, r6
 8010574:	68a0      	ldr	r0, [r4, #8]
 8010576:	f00e faba 	bl	801eaee <memcpy>
 801057a:	e7af      	b.n	80104dc <ucdr_serialize_endian_uint16_t+0x60>

0801057c <ucdr_deserialize_uint16_t>:
 801057c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010580:	4604      	mov	r4, r0
 8010582:	460d      	mov	r5, r1
 8010584:	2102      	movs	r1, #2
 8010586:	f001 fb69 	bl	8011c5c <ucdr_buffer_alignment>
 801058a:	4601      	mov	r1, r0
 801058c:	4620      	mov	r0, r4
 801058e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010592:	f001 fbab 	bl	8011cec <ucdr_advance_buffer>
 8010596:	2102      	movs	r1, #2
 8010598:	4620      	mov	r0, r4
 801059a:	f001 faff 	bl	8011b9c <ucdr_check_buffer_available_for>
 801059e:	bb60      	cbnz	r0, 80105fa <ucdr_deserialize_uint16_t+0x7e>
 80105a0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80105a4:	42be      	cmp	r6, r7
 80105a6:	d923      	bls.n	80105f0 <ucdr_deserialize_uint16_t+0x74>
 80105a8:	6923      	ldr	r3, [r4, #16]
 80105aa:	4620      	mov	r0, r4
 80105ac:	60a6      	str	r6, [r4, #8]
 80105ae:	1bf6      	subs	r6, r6, r7
 80105b0:	4433      	add	r3, r6
 80105b2:	f1c6 0902 	rsb	r9, r6, #2
 80105b6:	6123      	str	r3, [r4, #16]
 80105b8:	4649      	mov	r1, r9
 80105ba:	f001 fafb 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 80105be:	2800      	cmp	r0, #0
 80105c0:	d034      	beq.n	801062c <ucdr_deserialize_uint16_t+0xb0>
 80105c2:	7d23      	ldrb	r3, [r4, #20]
 80105c4:	2b01      	cmp	r3, #1
 80105c6:	d042      	beq.n	801064e <ucdr_deserialize_uint16_t+0xd2>
 80105c8:	787b      	ldrb	r3, [r7, #1]
 80105ca:	702b      	strb	r3, [r5, #0]
 80105cc:	2e00      	cmp	r6, #0
 80105ce:	d03a      	beq.n	8010646 <ucdr_deserialize_uint16_t+0xca>
 80105d0:	783b      	ldrb	r3, [r7, #0]
 80105d2:	706b      	strb	r3, [r5, #1]
 80105d4:	6923      	ldr	r3, [r4, #16]
 80105d6:	2102      	movs	r1, #2
 80105d8:	68a2      	ldr	r2, [r4, #8]
 80105da:	3302      	adds	r3, #2
 80105dc:	7da0      	ldrb	r0, [r4, #22]
 80105de:	444a      	add	r2, r9
 80105e0:	7561      	strb	r1, [r4, #21]
 80105e2:	1b9b      	subs	r3, r3, r6
 80105e4:	f080 0001 	eor.w	r0, r0, #1
 80105e8:	60a2      	str	r2, [r4, #8]
 80105ea:	6123      	str	r3, [r4, #16]
 80105ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105f0:	2102      	movs	r1, #2
 80105f2:	4620      	mov	r0, r4
 80105f4:	f001 fade 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 80105f8:	b180      	cbz	r0, 801061c <ucdr_deserialize_uint16_t+0xa0>
 80105fa:	7d23      	ldrb	r3, [r4, #20]
 80105fc:	2b01      	cmp	r3, #1
 80105fe:	68a3      	ldr	r3, [r4, #8]
 8010600:	d011      	beq.n	8010626 <ucdr_deserialize_uint16_t+0xaa>
 8010602:	785b      	ldrb	r3, [r3, #1]
 8010604:	702b      	strb	r3, [r5, #0]
 8010606:	68a3      	ldr	r3, [r4, #8]
 8010608:	781b      	ldrb	r3, [r3, #0]
 801060a:	706b      	strb	r3, [r5, #1]
 801060c:	2102      	movs	r1, #2
 801060e:	68a2      	ldr	r2, [r4, #8]
 8010610:	6923      	ldr	r3, [r4, #16]
 8010612:	440a      	add	r2, r1
 8010614:	7561      	strb	r1, [r4, #21]
 8010616:	440b      	add	r3, r1
 8010618:	60a2      	str	r2, [r4, #8]
 801061a:	6123      	str	r3, [r4, #16]
 801061c:	7da0      	ldrb	r0, [r4, #22]
 801061e:	f080 0001 	eor.w	r0, r0, #1
 8010622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010626:	881b      	ldrh	r3, [r3, #0]
 8010628:	802b      	strh	r3, [r5, #0]
 801062a:	e7ef      	b.n	801060c <ucdr_deserialize_uint16_t+0x90>
 801062c:	68a2      	ldr	r2, [r4, #8]
 801062e:	6923      	ldr	r3, [r4, #16]
 8010630:	1b92      	subs	r2, r2, r6
 8010632:	7da0      	ldrb	r0, [r4, #22]
 8010634:	1b9b      	subs	r3, r3, r6
 8010636:	f884 8015 	strb.w	r8, [r4, #21]
 801063a:	f080 0001 	eor.w	r0, r0, #1
 801063e:	60a2      	str	r2, [r4, #8]
 8010640:	6123      	str	r3, [r4, #16]
 8010642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010646:	68a3      	ldr	r3, [r4, #8]
 8010648:	781b      	ldrb	r3, [r3, #0]
 801064a:	706b      	strb	r3, [r5, #1]
 801064c:	e7c2      	b.n	80105d4 <ucdr_deserialize_uint16_t+0x58>
 801064e:	4639      	mov	r1, r7
 8010650:	4632      	mov	r2, r6
 8010652:	4628      	mov	r0, r5
 8010654:	f00e fa4b 	bl	801eaee <memcpy>
 8010658:	464a      	mov	r2, r9
 801065a:	19a8      	adds	r0, r5, r6
 801065c:	68a1      	ldr	r1, [r4, #8]
 801065e:	f00e fa46 	bl	801eaee <memcpy>
 8010662:	e7b7      	b.n	80105d4 <ucdr_deserialize_uint16_t+0x58>

08010664 <ucdr_deserialize_endian_uint16_t>:
 8010664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010668:	4604      	mov	r4, r0
 801066a:	460e      	mov	r6, r1
 801066c:	2102      	movs	r1, #2
 801066e:	4615      	mov	r5, r2
 8010670:	f001 faf4 	bl	8011c5c <ucdr_buffer_alignment>
 8010674:	4601      	mov	r1, r0
 8010676:	4620      	mov	r0, r4
 8010678:	f894 8015 	ldrb.w	r8, [r4, #21]
 801067c:	f001 fb36 	bl	8011cec <ucdr_advance_buffer>
 8010680:	2102      	movs	r1, #2
 8010682:	4620      	mov	r0, r4
 8010684:	f001 fa8a 	bl	8011b9c <ucdr_check_buffer_available_for>
 8010688:	bb70      	cbnz	r0, 80106e8 <ucdr_deserialize_endian_uint16_t+0x84>
 801068a:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 801068e:	454f      	cmp	r7, r9
 8010690:	d925      	bls.n	80106de <ucdr_deserialize_endian_uint16_t+0x7a>
 8010692:	6923      	ldr	r3, [r4, #16]
 8010694:	4620      	mov	r0, r4
 8010696:	60a7      	str	r7, [r4, #8]
 8010698:	eba7 0709 	sub.w	r7, r7, r9
 801069c:	443b      	add	r3, r7
 801069e:	f1c7 0a02 	rsb	sl, r7, #2
 80106a2:	6123      	str	r3, [r4, #16]
 80106a4:	4651      	mov	r1, sl
 80106a6:	f001 fa85 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 80106aa:	2800      	cmp	r0, #0
 80106ac:	d034      	beq.n	8010718 <ucdr_deserialize_endian_uint16_t+0xb4>
 80106ae:	2e01      	cmp	r6, #1
 80106b0:	d043      	beq.n	801073a <ucdr_deserialize_endian_uint16_t+0xd6>
 80106b2:	f899 3001 	ldrb.w	r3, [r9, #1]
 80106b6:	702b      	strb	r3, [r5, #0]
 80106b8:	2f00      	cmp	r7, #0
 80106ba:	d03a      	beq.n	8010732 <ucdr_deserialize_endian_uint16_t+0xce>
 80106bc:	f899 3000 	ldrb.w	r3, [r9]
 80106c0:	706b      	strb	r3, [r5, #1]
 80106c2:	6923      	ldr	r3, [r4, #16]
 80106c4:	2102      	movs	r1, #2
 80106c6:	68a2      	ldr	r2, [r4, #8]
 80106c8:	3302      	adds	r3, #2
 80106ca:	7da0      	ldrb	r0, [r4, #22]
 80106cc:	4452      	add	r2, sl
 80106ce:	7561      	strb	r1, [r4, #21]
 80106d0:	1bdb      	subs	r3, r3, r7
 80106d2:	f080 0001 	eor.w	r0, r0, #1
 80106d6:	60a2      	str	r2, [r4, #8]
 80106d8:	6123      	str	r3, [r4, #16]
 80106da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106de:	2102      	movs	r1, #2
 80106e0:	4620      	mov	r0, r4
 80106e2:	f001 fa67 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 80106e6:	b178      	cbz	r0, 8010708 <ucdr_deserialize_endian_uint16_t+0xa4>
 80106e8:	2e01      	cmp	r6, #1
 80106ea:	68a3      	ldr	r3, [r4, #8]
 80106ec:	d011      	beq.n	8010712 <ucdr_deserialize_endian_uint16_t+0xae>
 80106ee:	785b      	ldrb	r3, [r3, #1]
 80106f0:	702b      	strb	r3, [r5, #0]
 80106f2:	68a3      	ldr	r3, [r4, #8]
 80106f4:	781b      	ldrb	r3, [r3, #0]
 80106f6:	706b      	strb	r3, [r5, #1]
 80106f8:	2102      	movs	r1, #2
 80106fa:	68a2      	ldr	r2, [r4, #8]
 80106fc:	6923      	ldr	r3, [r4, #16]
 80106fe:	440a      	add	r2, r1
 8010700:	7561      	strb	r1, [r4, #21]
 8010702:	440b      	add	r3, r1
 8010704:	60a2      	str	r2, [r4, #8]
 8010706:	6123      	str	r3, [r4, #16]
 8010708:	7da0      	ldrb	r0, [r4, #22]
 801070a:	f080 0001 	eor.w	r0, r0, #1
 801070e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010712:	881b      	ldrh	r3, [r3, #0]
 8010714:	802b      	strh	r3, [r5, #0]
 8010716:	e7ef      	b.n	80106f8 <ucdr_deserialize_endian_uint16_t+0x94>
 8010718:	68a2      	ldr	r2, [r4, #8]
 801071a:	6923      	ldr	r3, [r4, #16]
 801071c:	1bd2      	subs	r2, r2, r7
 801071e:	7da0      	ldrb	r0, [r4, #22]
 8010720:	1bdb      	subs	r3, r3, r7
 8010722:	f884 8015 	strb.w	r8, [r4, #21]
 8010726:	f080 0001 	eor.w	r0, r0, #1
 801072a:	60a2      	str	r2, [r4, #8]
 801072c:	6123      	str	r3, [r4, #16]
 801072e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010732:	68a3      	ldr	r3, [r4, #8]
 8010734:	781b      	ldrb	r3, [r3, #0]
 8010736:	706b      	strb	r3, [r5, #1]
 8010738:	e7c3      	b.n	80106c2 <ucdr_deserialize_endian_uint16_t+0x5e>
 801073a:	4649      	mov	r1, r9
 801073c:	463a      	mov	r2, r7
 801073e:	4628      	mov	r0, r5
 8010740:	f00e f9d5 	bl	801eaee <memcpy>
 8010744:	4652      	mov	r2, sl
 8010746:	19e8      	adds	r0, r5, r7
 8010748:	68a1      	ldr	r1, [r4, #8]
 801074a:	f00e f9d0 	bl	801eaee <memcpy>
 801074e:	e7b8      	b.n	80106c2 <ucdr_deserialize_endian_uint16_t+0x5e>

08010750 <ucdr_serialize_uint32_t>:
 8010750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010754:	b082      	sub	sp, #8
 8010756:	4604      	mov	r4, r0
 8010758:	9101      	str	r1, [sp, #4]
 801075a:	2104      	movs	r1, #4
 801075c:	f001 fa7e 	bl	8011c5c <ucdr_buffer_alignment>
 8010760:	4601      	mov	r1, r0
 8010762:	4620      	mov	r0, r4
 8010764:	7d67      	ldrb	r7, [r4, #21]
 8010766:	f001 fac1 	bl	8011cec <ucdr_advance_buffer>
 801076a:	2104      	movs	r1, #4
 801076c:	4620      	mov	r0, r4
 801076e:	f001 fa15 	bl	8011b9c <ucdr_check_buffer_available_for>
 8010772:	2800      	cmp	r0, #0
 8010774:	d139      	bne.n	80107ea <ucdr_serialize_uint32_t+0x9a>
 8010776:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801077a:	42ab      	cmp	r3, r5
 801077c:	d930      	bls.n	80107e0 <ucdr_serialize_uint32_t+0x90>
 801077e:	1b5e      	subs	r6, r3, r5
 8010780:	60a3      	str	r3, [r4, #8]
 8010782:	6923      	ldr	r3, [r4, #16]
 8010784:	4620      	mov	r0, r4
 8010786:	f1c6 0804 	rsb	r8, r6, #4
 801078a:	4433      	add	r3, r6
 801078c:	4641      	mov	r1, r8
 801078e:	6123      	str	r3, [r4, #16]
 8010790:	f001 fa10 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 8010794:	2800      	cmp	r0, #0
 8010796:	d04c      	beq.n	8010832 <ucdr_serialize_uint32_t+0xe2>
 8010798:	7d23      	ldrb	r3, [r4, #20]
 801079a:	2b01      	cmp	r3, #1
 801079c:	d063      	beq.n	8010866 <ucdr_serialize_uint32_t+0x116>
 801079e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80107a2:	702b      	strb	r3, [r5, #0]
 80107a4:	2e00      	cmp	r6, #0
 80107a6:	d051      	beq.n	801084c <ucdr_serialize_uint32_t+0xfc>
 80107a8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80107ac:	2e01      	cmp	r6, #1
 80107ae:	706b      	strb	r3, [r5, #1]
 80107b0:	d050      	beq.n	8010854 <ucdr_serialize_uint32_t+0x104>
 80107b2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80107b6:	2e02      	cmp	r6, #2
 80107b8:	70ab      	strb	r3, [r5, #2]
 80107ba:	d04f      	beq.n	801085c <ucdr_serialize_uint32_t+0x10c>
 80107bc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80107c0:	70eb      	strb	r3, [r5, #3]
 80107c2:	6923      	ldr	r3, [r4, #16]
 80107c4:	2104      	movs	r1, #4
 80107c6:	68a2      	ldr	r2, [r4, #8]
 80107c8:	3304      	adds	r3, #4
 80107ca:	7da0      	ldrb	r0, [r4, #22]
 80107cc:	4442      	add	r2, r8
 80107ce:	7561      	strb	r1, [r4, #21]
 80107d0:	1b9e      	subs	r6, r3, r6
 80107d2:	f080 0001 	eor.w	r0, r0, #1
 80107d6:	60a2      	str	r2, [r4, #8]
 80107d8:	6126      	str	r6, [r4, #16]
 80107da:	b002      	add	sp, #8
 80107dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107e0:	2104      	movs	r1, #4
 80107e2:	4620      	mov	r0, r4
 80107e4:	f001 f9e6 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 80107e8:	b1d0      	cbz	r0, 8010820 <ucdr_serialize_uint32_t+0xd0>
 80107ea:	7d23      	ldrb	r3, [r4, #20]
 80107ec:	2b01      	cmp	r3, #1
 80107ee:	68a3      	ldr	r3, [r4, #8]
 80107f0:	d01c      	beq.n	801082c <ucdr_serialize_uint32_t+0xdc>
 80107f2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80107f6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80107fa:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80107fe:	7018      	strb	r0, [r3, #0]
 8010800:	68a3      	ldr	r3, [r4, #8]
 8010802:	705a      	strb	r2, [r3, #1]
 8010804:	68a3      	ldr	r3, [r4, #8]
 8010806:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801080a:	7099      	strb	r1, [r3, #2]
 801080c:	68a3      	ldr	r3, [r4, #8]
 801080e:	70da      	strb	r2, [r3, #3]
 8010810:	2104      	movs	r1, #4
 8010812:	68a2      	ldr	r2, [r4, #8]
 8010814:	6923      	ldr	r3, [r4, #16]
 8010816:	440a      	add	r2, r1
 8010818:	7561      	strb	r1, [r4, #21]
 801081a:	440b      	add	r3, r1
 801081c:	60a2      	str	r2, [r4, #8]
 801081e:	6123      	str	r3, [r4, #16]
 8010820:	7da0      	ldrb	r0, [r4, #22]
 8010822:	f080 0001 	eor.w	r0, r0, #1
 8010826:	b002      	add	sp, #8
 8010828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801082c:	9a01      	ldr	r2, [sp, #4]
 801082e:	601a      	str	r2, [r3, #0]
 8010830:	e7ee      	b.n	8010810 <ucdr_serialize_uint32_t+0xc0>
 8010832:	68a2      	ldr	r2, [r4, #8]
 8010834:	6923      	ldr	r3, [r4, #16]
 8010836:	7da0      	ldrb	r0, [r4, #22]
 8010838:	1b92      	subs	r2, r2, r6
 801083a:	1b9b      	subs	r3, r3, r6
 801083c:	7567      	strb	r7, [r4, #21]
 801083e:	f080 0001 	eor.w	r0, r0, #1
 8010842:	60a2      	str	r2, [r4, #8]
 8010844:	6123      	str	r3, [r4, #16]
 8010846:	b002      	add	sp, #8
 8010848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801084c:	68a3      	ldr	r3, [r4, #8]
 801084e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010852:	701a      	strb	r2, [r3, #0]
 8010854:	68a3      	ldr	r3, [r4, #8]
 8010856:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801085a:	701a      	strb	r2, [r3, #0]
 801085c:	68a3      	ldr	r3, [r4, #8]
 801085e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010862:	701a      	strb	r2, [r3, #0]
 8010864:	e7ad      	b.n	80107c2 <ucdr_serialize_uint32_t+0x72>
 8010866:	4628      	mov	r0, r5
 8010868:	ad01      	add	r5, sp, #4
 801086a:	4632      	mov	r2, r6
 801086c:	4629      	mov	r1, r5
 801086e:	f00e f93e 	bl	801eaee <memcpy>
 8010872:	4642      	mov	r2, r8
 8010874:	19a9      	adds	r1, r5, r6
 8010876:	68a0      	ldr	r0, [r4, #8]
 8010878:	f00e f939 	bl	801eaee <memcpy>
 801087c:	e7a1      	b.n	80107c2 <ucdr_serialize_uint32_t+0x72>
 801087e:	bf00      	nop

08010880 <ucdr_serialize_endian_uint32_t>:
 8010880:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010884:	4604      	mov	r4, r0
 8010886:	b083      	sub	sp, #12
 8010888:	460d      	mov	r5, r1
 801088a:	2104      	movs	r1, #4
 801088c:	9201      	str	r2, [sp, #4]
 801088e:	f001 f9e5 	bl	8011c5c <ucdr_buffer_alignment>
 8010892:	4601      	mov	r1, r0
 8010894:	4620      	mov	r0, r4
 8010896:	f894 8015 	ldrb.w	r8, [r4, #21]
 801089a:	f001 fa27 	bl	8011cec <ucdr_advance_buffer>
 801089e:	2104      	movs	r1, #4
 80108a0:	4620      	mov	r0, r4
 80108a2:	f001 f97b 	bl	8011b9c <ucdr_check_buffer_available_for>
 80108a6:	2800      	cmp	r0, #0
 80108a8:	d138      	bne.n	801091c <ucdr_serialize_endian_uint32_t+0x9c>
 80108aa:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80108ae:	42b7      	cmp	r7, r6
 80108b0:	d92f      	bls.n	8010912 <ucdr_serialize_endian_uint32_t+0x92>
 80108b2:	6923      	ldr	r3, [r4, #16]
 80108b4:	4620      	mov	r0, r4
 80108b6:	60a7      	str	r7, [r4, #8]
 80108b8:	1bbf      	subs	r7, r7, r6
 80108ba:	443b      	add	r3, r7
 80108bc:	f1c7 0904 	rsb	r9, r7, #4
 80108c0:	6123      	str	r3, [r4, #16]
 80108c2:	4649      	mov	r1, r9
 80108c4:	f001 f976 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 80108c8:	2800      	cmp	r0, #0
 80108ca:	d04a      	beq.n	8010962 <ucdr_serialize_endian_uint32_t+0xe2>
 80108cc:	2d01      	cmp	r5, #1
 80108ce:	d063      	beq.n	8010998 <ucdr_serialize_endian_uint32_t+0x118>
 80108d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80108d4:	7033      	strb	r3, [r6, #0]
 80108d6:	2f00      	cmp	r7, #0
 80108d8:	d051      	beq.n	801097e <ucdr_serialize_endian_uint32_t+0xfe>
 80108da:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80108de:	2f01      	cmp	r7, #1
 80108e0:	7073      	strb	r3, [r6, #1]
 80108e2:	d050      	beq.n	8010986 <ucdr_serialize_endian_uint32_t+0x106>
 80108e4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80108e8:	2f02      	cmp	r7, #2
 80108ea:	70b3      	strb	r3, [r6, #2]
 80108ec:	d04f      	beq.n	801098e <ucdr_serialize_endian_uint32_t+0x10e>
 80108ee:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80108f2:	70f3      	strb	r3, [r6, #3]
 80108f4:	6923      	ldr	r3, [r4, #16]
 80108f6:	2104      	movs	r1, #4
 80108f8:	68a2      	ldr	r2, [r4, #8]
 80108fa:	7da0      	ldrb	r0, [r4, #22]
 80108fc:	3304      	adds	r3, #4
 80108fe:	444a      	add	r2, r9
 8010900:	7561      	strb	r1, [r4, #21]
 8010902:	1bdb      	subs	r3, r3, r7
 8010904:	f080 0001 	eor.w	r0, r0, #1
 8010908:	60a2      	str	r2, [r4, #8]
 801090a:	6123      	str	r3, [r4, #16]
 801090c:	b003      	add	sp, #12
 801090e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010912:	2104      	movs	r1, #4
 8010914:	4620      	mov	r0, r4
 8010916:	f001 f94d 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 801091a:	b1c8      	cbz	r0, 8010950 <ucdr_serialize_endian_uint32_t+0xd0>
 801091c:	2d01      	cmp	r5, #1
 801091e:	68a3      	ldr	r3, [r4, #8]
 8010920:	d01c      	beq.n	801095c <ucdr_serialize_endian_uint32_t+0xdc>
 8010922:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8010926:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801092a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801092e:	7018      	strb	r0, [r3, #0]
 8010930:	68a3      	ldr	r3, [r4, #8]
 8010932:	705a      	strb	r2, [r3, #1]
 8010934:	68a3      	ldr	r3, [r4, #8]
 8010936:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801093a:	7099      	strb	r1, [r3, #2]
 801093c:	68a3      	ldr	r3, [r4, #8]
 801093e:	70da      	strb	r2, [r3, #3]
 8010940:	2104      	movs	r1, #4
 8010942:	68a2      	ldr	r2, [r4, #8]
 8010944:	6923      	ldr	r3, [r4, #16]
 8010946:	440a      	add	r2, r1
 8010948:	7561      	strb	r1, [r4, #21]
 801094a:	440b      	add	r3, r1
 801094c:	60a2      	str	r2, [r4, #8]
 801094e:	6123      	str	r3, [r4, #16]
 8010950:	7da0      	ldrb	r0, [r4, #22]
 8010952:	f080 0001 	eor.w	r0, r0, #1
 8010956:	b003      	add	sp, #12
 8010958:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801095c:	9a01      	ldr	r2, [sp, #4]
 801095e:	601a      	str	r2, [r3, #0]
 8010960:	e7ee      	b.n	8010940 <ucdr_serialize_endian_uint32_t+0xc0>
 8010962:	68a2      	ldr	r2, [r4, #8]
 8010964:	6923      	ldr	r3, [r4, #16]
 8010966:	7da0      	ldrb	r0, [r4, #22]
 8010968:	1bd2      	subs	r2, r2, r7
 801096a:	1bdb      	subs	r3, r3, r7
 801096c:	f884 8015 	strb.w	r8, [r4, #21]
 8010970:	f080 0001 	eor.w	r0, r0, #1
 8010974:	60a2      	str	r2, [r4, #8]
 8010976:	6123      	str	r3, [r4, #16]
 8010978:	b003      	add	sp, #12
 801097a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801097e:	68a3      	ldr	r3, [r4, #8]
 8010980:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010984:	701a      	strb	r2, [r3, #0]
 8010986:	68a3      	ldr	r3, [r4, #8]
 8010988:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801098c:	701a      	strb	r2, [r3, #0]
 801098e:	68a3      	ldr	r3, [r4, #8]
 8010990:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010994:	701a      	strb	r2, [r3, #0]
 8010996:	e7ad      	b.n	80108f4 <ucdr_serialize_endian_uint32_t+0x74>
 8010998:	ad01      	add	r5, sp, #4
 801099a:	463a      	mov	r2, r7
 801099c:	4630      	mov	r0, r6
 801099e:	4629      	mov	r1, r5
 80109a0:	f00e f8a5 	bl	801eaee <memcpy>
 80109a4:	464a      	mov	r2, r9
 80109a6:	19e9      	adds	r1, r5, r7
 80109a8:	68a0      	ldr	r0, [r4, #8]
 80109aa:	f00e f8a0 	bl	801eaee <memcpy>
 80109ae:	e7a1      	b.n	80108f4 <ucdr_serialize_endian_uint32_t+0x74>

080109b0 <ucdr_deserialize_uint32_t>:
 80109b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80109b4:	4604      	mov	r4, r0
 80109b6:	460d      	mov	r5, r1
 80109b8:	2104      	movs	r1, #4
 80109ba:	f001 f94f 	bl	8011c5c <ucdr_buffer_alignment>
 80109be:	4601      	mov	r1, r0
 80109c0:	4620      	mov	r0, r4
 80109c2:	f894 8015 	ldrb.w	r8, [r4, #21]
 80109c6:	f001 f991 	bl	8011cec <ucdr_advance_buffer>
 80109ca:	2104      	movs	r1, #4
 80109cc:	4620      	mov	r0, r4
 80109ce:	f001 f8e5 	bl	8011b9c <ucdr_check_buffer_available_for>
 80109d2:	2800      	cmp	r0, #0
 80109d4:	d138      	bne.n	8010a48 <ucdr_deserialize_uint32_t+0x98>
 80109d6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80109da:	42b7      	cmp	r7, r6
 80109dc:	d92f      	bls.n	8010a3e <ucdr_deserialize_uint32_t+0x8e>
 80109de:	6923      	ldr	r3, [r4, #16]
 80109e0:	4620      	mov	r0, r4
 80109e2:	60a7      	str	r7, [r4, #8]
 80109e4:	1bbf      	subs	r7, r7, r6
 80109e6:	443b      	add	r3, r7
 80109e8:	f1c7 0904 	rsb	r9, r7, #4
 80109ec:	6123      	str	r3, [r4, #16]
 80109ee:	4649      	mov	r1, r9
 80109f0:	f001 f8e0 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 80109f4:	2800      	cmp	r0, #0
 80109f6:	d046      	beq.n	8010a86 <ucdr_deserialize_uint32_t+0xd6>
 80109f8:	7d23      	ldrb	r3, [r4, #20]
 80109fa:	2b01      	cmp	r3, #1
 80109fc:	d05c      	beq.n	8010ab8 <ucdr_deserialize_uint32_t+0x108>
 80109fe:	78f3      	ldrb	r3, [r6, #3]
 8010a00:	702b      	strb	r3, [r5, #0]
 8010a02:	2f00      	cmp	r7, #0
 8010a04:	d04c      	beq.n	8010aa0 <ucdr_deserialize_uint32_t+0xf0>
 8010a06:	78b3      	ldrb	r3, [r6, #2]
 8010a08:	2f01      	cmp	r7, #1
 8010a0a:	706b      	strb	r3, [r5, #1]
 8010a0c:	f105 0302 	add.w	r3, r5, #2
 8010a10:	d04a      	beq.n	8010aa8 <ucdr_deserialize_uint32_t+0xf8>
 8010a12:	7873      	ldrb	r3, [r6, #1]
 8010a14:	2f02      	cmp	r7, #2
 8010a16:	70ab      	strb	r3, [r5, #2]
 8010a18:	f105 0303 	add.w	r3, r5, #3
 8010a1c:	d048      	beq.n	8010ab0 <ucdr_deserialize_uint32_t+0x100>
 8010a1e:	7833      	ldrb	r3, [r6, #0]
 8010a20:	70eb      	strb	r3, [r5, #3]
 8010a22:	6923      	ldr	r3, [r4, #16]
 8010a24:	2104      	movs	r1, #4
 8010a26:	68a2      	ldr	r2, [r4, #8]
 8010a28:	3304      	adds	r3, #4
 8010a2a:	7da0      	ldrb	r0, [r4, #22]
 8010a2c:	444a      	add	r2, r9
 8010a2e:	7561      	strb	r1, [r4, #21]
 8010a30:	1bdb      	subs	r3, r3, r7
 8010a32:	f080 0001 	eor.w	r0, r0, #1
 8010a36:	60a2      	str	r2, [r4, #8]
 8010a38:	6123      	str	r3, [r4, #16]
 8010a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a3e:	2104      	movs	r1, #4
 8010a40:	4620      	mov	r0, r4
 8010a42:	f001 f8b7 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 8010a46:	b1b0      	cbz	r0, 8010a76 <ucdr_deserialize_uint32_t+0xc6>
 8010a48:	7d23      	ldrb	r3, [r4, #20]
 8010a4a:	2b01      	cmp	r3, #1
 8010a4c:	68a3      	ldr	r3, [r4, #8]
 8010a4e:	d017      	beq.n	8010a80 <ucdr_deserialize_uint32_t+0xd0>
 8010a50:	78db      	ldrb	r3, [r3, #3]
 8010a52:	702b      	strb	r3, [r5, #0]
 8010a54:	68a3      	ldr	r3, [r4, #8]
 8010a56:	789b      	ldrb	r3, [r3, #2]
 8010a58:	706b      	strb	r3, [r5, #1]
 8010a5a:	68a3      	ldr	r3, [r4, #8]
 8010a5c:	785b      	ldrb	r3, [r3, #1]
 8010a5e:	70ab      	strb	r3, [r5, #2]
 8010a60:	68a3      	ldr	r3, [r4, #8]
 8010a62:	781b      	ldrb	r3, [r3, #0]
 8010a64:	70eb      	strb	r3, [r5, #3]
 8010a66:	2104      	movs	r1, #4
 8010a68:	68a2      	ldr	r2, [r4, #8]
 8010a6a:	6923      	ldr	r3, [r4, #16]
 8010a6c:	440a      	add	r2, r1
 8010a6e:	7561      	strb	r1, [r4, #21]
 8010a70:	440b      	add	r3, r1
 8010a72:	60a2      	str	r2, [r4, #8]
 8010a74:	6123      	str	r3, [r4, #16]
 8010a76:	7da0      	ldrb	r0, [r4, #22]
 8010a78:	f080 0001 	eor.w	r0, r0, #1
 8010a7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	602b      	str	r3, [r5, #0]
 8010a84:	e7ef      	b.n	8010a66 <ucdr_deserialize_uint32_t+0xb6>
 8010a86:	68a2      	ldr	r2, [r4, #8]
 8010a88:	6923      	ldr	r3, [r4, #16]
 8010a8a:	1bd2      	subs	r2, r2, r7
 8010a8c:	7da0      	ldrb	r0, [r4, #22]
 8010a8e:	1bdb      	subs	r3, r3, r7
 8010a90:	f884 8015 	strb.w	r8, [r4, #21]
 8010a94:	f080 0001 	eor.w	r0, r0, #1
 8010a98:	60a2      	str	r2, [r4, #8]
 8010a9a:	6123      	str	r3, [r4, #16]
 8010a9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010aa0:	68a3      	ldr	r3, [r4, #8]
 8010aa2:	789b      	ldrb	r3, [r3, #2]
 8010aa4:	706b      	strb	r3, [r5, #1]
 8010aa6:	1cab      	adds	r3, r5, #2
 8010aa8:	68a2      	ldr	r2, [r4, #8]
 8010aaa:	7852      	ldrb	r2, [r2, #1]
 8010aac:	f803 2b01 	strb.w	r2, [r3], #1
 8010ab0:	68a2      	ldr	r2, [r4, #8]
 8010ab2:	7812      	ldrb	r2, [r2, #0]
 8010ab4:	701a      	strb	r2, [r3, #0]
 8010ab6:	e7b4      	b.n	8010a22 <ucdr_deserialize_uint32_t+0x72>
 8010ab8:	4631      	mov	r1, r6
 8010aba:	463a      	mov	r2, r7
 8010abc:	4628      	mov	r0, r5
 8010abe:	f00e f816 	bl	801eaee <memcpy>
 8010ac2:	464a      	mov	r2, r9
 8010ac4:	19e8      	adds	r0, r5, r7
 8010ac6:	68a1      	ldr	r1, [r4, #8]
 8010ac8:	f00e f811 	bl	801eaee <memcpy>
 8010acc:	e7a9      	b.n	8010a22 <ucdr_deserialize_uint32_t+0x72>
 8010ace:	bf00      	nop

08010ad0 <ucdr_deserialize_endian_uint32_t>:
 8010ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ad4:	4604      	mov	r4, r0
 8010ad6:	460e      	mov	r6, r1
 8010ad8:	2104      	movs	r1, #4
 8010ada:	4615      	mov	r5, r2
 8010adc:	f001 f8be 	bl	8011c5c <ucdr_buffer_alignment>
 8010ae0:	4601      	mov	r1, r0
 8010ae2:	4620      	mov	r0, r4
 8010ae4:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010ae8:	f001 f900 	bl	8011cec <ucdr_advance_buffer>
 8010aec:	2104      	movs	r1, #4
 8010aee:	4620      	mov	r0, r4
 8010af0:	f001 f854 	bl	8011b9c <ucdr_check_buffer_available_for>
 8010af4:	2800      	cmp	r0, #0
 8010af6:	d13c      	bne.n	8010b72 <ucdr_deserialize_endian_uint32_t+0xa2>
 8010af8:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8010afc:	42bb      	cmp	r3, r7
 8010afe:	d933      	bls.n	8010b68 <ucdr_deserialize_endian_uint32_t+0x98>
 8010b00:	eba3 0907 	sub.w	r9, r3, r7
 8010b04:	60a3      	str	r3, [r4, #8]
 8010b06:	6923      	ldr	r3, [r4, #16]
 8010b08:	4620      	mov	r0, r4
 8010b0a:	f1c9 0a04 	rsb	sl, r9, #4
 8010b0e:	444b      	add	r3, r9
 8010b10:	4651      	mov	r1, sl
 8010b12:	6123      	str	r3, [r4, #16]
 8010b14:	f001 f84e 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 8010b18:	2800      	cmp	r0, #0
 8010b1a:	d048      	beq.n	8010bae <ucdr_deserialize_endian_uint32_t+0xde>
 8010b1c:	2e01      	cmp	r6, #1
 8010b1e:	d061      	beq.n	8010be4 <ucdr_deserialize_endian_uint32_t+0x114>
 8010b20:	78fb      	ldrb	r3, [r7, #3]
 8010b22:	702b      	strb	r3, [r5, #0]
 8010b24:	f1b9 0f00 	cmp.w	r9, #0
 8010b28:	d050      	beq.n	8010bcc <ucdr_deserialize_endian_uint32_t+0xfc>
 8010b2a:	78bb      	ldrb	r3, [r7, #2]
 8010b2c:	f1b9 0f01 	cmp.w	r9, #1
 8010b30:	706b      	strb	r3, [r5, #1]
 8010b32:	f105 0302 	add.w	r3, r5, #2
 8010b36:	d04d      	beq.n	8010bd4 <ucdr_deserialize_endian_uint32_t+0x104>
 8010b38:	787b      	ldrb	r3, [r7, #1]
 8010b3a:	f1b9 0f02 	cmp.w	r9, #2
 8010b3e:	70ab      	strb	r3, [r5, #2]
 8010b40:	f105 0303 	add.w	r3, r5, #3
 8010b44:	d04a      	beq.n	8010bdc <ucdr_deserialize_endian_uint32_t+0x10c>
 8010b46:	783b      	ldrb	r3, [r7, #0]
 8010b48:	70eb      	strb	r3, [r5, #3]
 8010b4a:	6923      	ldr	r3, [r4, #16]
 8010b4c:	2104      	movs	r1, #4
 8010b4e:	68a2      	ldr	r2, [r4, #8]
 8010b50:	3304      	adds	r3, #4
 8010b52:	7da0      	ldrb	r0, [r4, #22]
 8010b54:	4452      	add	r2, sl
 8010b56:	7561      	strb	r1, [r4, #21]
 8010b58:	eba3 0309 	sub.w	r3, r3, r9
 8010b5c:	f080 0001 	eor.w	r0, r0, #1
 8010b60:	60a2      	str	r2, [r4, #8]
 8010b62:	6123      	str	r3, [r4, #16]
 8010b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b68:	2104      	movs	r1, #4
 8010b6a:	4620      	mov	r0, r4
 8010b6c:	f001 f822 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 8010b70:	b1a8      	cbz	r0, 8010b9e <ucdr_deserialize_endian_uint32_t+0xce>
 8010b72:	2e01      	cmp	r6, #1
 8010b74:	68a3      	ldr	r3, [r4, #8]
 8010b76:	d017      	beq.n	8010ba8 <ucdr_deserialize_endian_uint32_t+0xd8>
 8010b78:	78db      	ldrb	r3, [r3, #3]
 8010b7a:	702b      	strb	r3, [r5, #0]
 8010b7c:	68a3      	ldr	r3, [r4, #8]
 8010b7e:	789b      	ldrb	r3, [r3, #2]
 8010b80:	706b      	strb	r3, [r5, #1]
 8010b82:	68a3      	ldr	r3, [r4, #8]
 8010b84:	785b      	ldrb	r3, [r3, #1]
 8010b86:	70ab      	strb	r3, [r5, #2]
 8010b88:	68a3      	ldr	r3, [r4, #8]
 8010b8a:	781b      	ldrb	r3, [r3, #0]
 8010b8c:	70eb      	strb	r3, [r5, #3]
 8010b8e:	2104      	movs	r1, #4
 8010b90:	68a2      	ldr	r2, [r4, #8]
 8010b92:	6923      	ldr	r3, [r4, #16]
 8010b94:	440a      	add	r2, r1
 8010b96:	7561      	strb	r1, [r4, #21]
 8010b98:	440b      	add	r3, r1
 8010b9a:	60a2      	str	r2, [r4, #8]
 8010b9c:	6123      	str	r3, [r4, #16]
 8010b9e:	7da0      	ldrb	r0, [r4, #22]
 8010ba0:	f080 0001 	eor.w	r0, r0, #1
 8010ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	602b      	str	r3, [r5, #0]
 8010bac:	e7ef      	b.n	8010b8e <ucdr_deserialize_endian_uint32_t+0xbe>
 8010bae:	68a2      	ldr	r2, [r4, #8]
 8010bb0:	6923      	ldr	r3, [r4, #16]
 8010bb2:	eba2 0209 	sub.w	r2, r2, r9
 8010bb6:	7da0      	ldrb	r0, [r4, #22]
 8010bb8:	eba3 0309 	sub.w	r3, r3, r9
 8010bbc:	f884 8015 	strb.w	r8, [r4, #21]
 8010bc0:	f080 0001 	eor.w	r0, r0, #1
 8010bc4:	60a2      	str	r2, [r4, #8]
 8010bc6:	6123      	str	r3, [r4, #16]
 8010bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bcc:	68a3      	ldr	r3, [r4, #8]
 8010bce:	789b      	ldrb	r3, [r3, #2]
 8010bd0:	706b      	strb	r3, [r5, #1]
 8010bd2:	1cab      	adds	r3, r5, #2
 8010bd4:	68a2      	ldr	r2, [r4, #8]
 8010bd6:	7852      	ldrb	r2, [r2, #1]
 8010bd8:	f803 2b01 	strb.w	r2, [r3], #1
 8010bdc:	68a2      	ldr	r2, [r4, #8]
 8010bde:	7812      	ldrb	r2, [r2, #0]
 8010be0:	701a      	strb	r2, [r3, #0]
 8010be2:	e7b2      	b.n	8010b4a <ucdr_deserialize_endian_uint32_t+0x7a>
 8010be4:	4639      	mov	r1, r7
 8010be6:	464a      	mov	r2, r9
 8010be8:	4628      	mov	r0, r5
 8010bea:	f00d ff80 	bl	801eaee <memcpy>
 8010bee:	4652      	mov	r2, sl
 8010bf0:	eb05 0009 	add.w	r0, r5, r9
 8010bf4:	68a1      	ldr	r1, [r4, #8]
 8010bf6:	f00d ff7a 	bl	801eaee <memcpy>
 8010bfa:	e7a6      	b.n	8010b4a <ucdr_deserialize_endian_uint32_t+0x7a>

08010bfc <ucdr_serialize_uint64_t>:
 8010bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c00:	4604      	mov	r4, r0
 8010c02:	b082      	sub	sp, #8
 8010c04:	2108      	movs	r1, #8
 8010c06:	e9cd 2300 	strd	r2, r3, [sp]
 8010c0a:	f001 f827 	bl	8011c5c <ucdr_buffer_alignment>
 8010c0e:	4601      	mov	r1, r0
 8010c10:	4620      	mov	r0, r4
 8010c12:	7d67      	ldrb	r7, [r4, #21]
 8010c14:	f001 f86a 	bl	8011cec <ucdr_advance_buffer>
 8010c18:	2108      	movs	r1, #8
 8010c1a:	4620      	mov	r0, r4
 8010c1c:	f000 ffbe 	bl	8011b9c <ucdr_check_buffer_available_for>
 8010c20:	2800      	cmp	r0, #0
 8010c22:	d14e      	bne.n	8010cc2 <ucdr_serialize_uint64_t+0xc6>
 8010c24:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8010c28:	42ab      	cmp	r3, r5
 8010c2a:	d945      	bls.n	8010cb8 <ucdr_serialize_uint64_t+0xbc>
 8010c2c:	1b5e      	subs	r6, r3, r5
 8010c2e:	60a3      	str	r3, [r4, #8]
 8010c30:	6923      	ldr	r3, [r4, #16]
 8010c32:	4620      	mov	r0, r4
 8010c34:	f1c6 0808 	rsb	r8, r6, #8
 8010c38:	4433      	add	r3, r6
 8010c3a:	4641      	mov	r1, r8
 8010c3c:	6123      	str	r3, [r4, #16]
 8010c3e:	f000 ffb9 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 8010c42:	2800      	cmp	r0, #0
 8010c44:	d074      	beq.n	8010d30 <ucdr_serialize_uint64_t+0x134>
 8010c46:	7d23      	ldrb	r3, [r4, #20]
 8010c48:	2b01      	cmp	r3, #1
 8010c4a:	f000 809b 	beq.w	8010d84 <ucdr_serialize_uint64_t+0x188>
 8010c4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010c52:	702b      	strb	r3, [r5, #0]
 8010c54:	2e00      	cmp	r6, #0
 8010c56:	d078      	beq.n	8010d4a <ucdr_serialize_uint64_t+0x14e>
 8010c58:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010c5c:	2e01      	cmp	r6, #1
 8010c5e:	706b      	strb	r3, [r5, #1]
 8010c60:	d077      	beq.n	8010d52 <ucdr_serialize_uint64_t+0x156>
 8010c62:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010c66:	2e02      	cmp	r6, #2
 8010c68:	70ab      	strb	r3, [r5, #2]
 8010c6a:	d076      	beq.n	8010d5a <ucdr_serialize_uint64_t+0x15e>
 8010c6c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010c70:	2e03      	cmp	r6, #3
 8010c72:	70eb      	strb	r3, [r5, #3]
 8010c74:	d075      	beq.n	8010d62 <ucdr_serialize_uint64_t+0x166>
 8010c76:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8010c7a:	2e04      	cmp	r6, #4
 8010c7c:	712b      	strb	r3, [r5, #4]
 8010c7e:	d074      	beq.n	8010d6a <ucdr_serialize_uint64_t+0x16e>
 8010c80:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8010c84:	2e05      	cmp	r6, #5
 8010c86:	716b      	strb	r3, [r5, #5]
 8010c88:	d073      	beq.n	8010d72 <ucdr_serialize_uint64_t+0x176>
 8010c8a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8010c8e:	2e06      	cmp	r6, #6
 8010c90:	71ab      	strb	r3, [r5, #6]
 8010c92:	d072      	beq.n	8010d7a <ucdr_serialize_uint64_t+0x17e>
 8010c94:	f89d 3000 	ldrb.w	r3, [sp]
 8010c98:	71eb      	strb	r3, [r5, #7]
 8010c9a:	6923      	ldr	r3, [r4, #16]
 8010c9c:	2108      	movs	r1, #8
 8010c9e:	68a2      	ldr	r2, [r4, #8]
 8010ca0:	3308      	adds	r3, #8
 8010ca2:	7da0      	ldrb	r0, [r4, #22]
 8010ca4:	4442      	add	r2, r8
 8010ca6:	7561      	strb	r1, [r4, #21]
 8010ca8:	1b9e      	subs	r6, r3, r6
 8010caa:	f080 0001 	eor.w	r0, r0, #1
 8010cae:	60a2      	str	r2, [r4, #8]
 8010cb0:	6126      	str	r6, [r4, #16]
 8010cb2:	b002      	add	sp, #8
 8010cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cb8:	2108      	movs	r1, #8
 8010cba:	4620      	mov	r0, r4
 8010cbc:	f000 ff7a 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 8010cc0:	b350      	cbz	r0, 8010d18 <ucdr_serialize_uint64_t+0x11c>
 8010cc2:	7d23      	ldrb	r3, [r4, #20]
 8010cc4:	2b01      	cmp	r3, #1
 8010cc6:	d02d      	beq.n	8010d24 <ucdr_serialize_uint64_t+0x128>
 8010cc8:	68a3      	ldr	r3, [r4, #8]
 8010cca:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8010cce:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010cd2:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8010cd6:	7018      	strb	r0, [r3, #0]
 8010cd8:	68a3      	ldr	r3, [r4, #8]
 8010cda:	705a      	strb	r2, [r3, #1]
 8010cdc:	68a3      	ldr	r3, [r4, #8]
 8010cde:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010ce2:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8010ce6:	7099      	strb	r1, [r3, #2]
 8010ce8:	68a3      	ldr	r3, [r4, #8]
 8010cea:	70da      	strb	r2, [r3, #3]
 8010cec:	68a3      	ldr	r3, [r4, #8]
 8010cee:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8010cf2:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8010cf6:	7118      	strb	r0, [r3, #4]
 8010cf8:	68a3      	ldr	r3, [r4, #8]
 8010cfa:	715a      	strb	r2, [r3, #5]
 8010cfc:	68a3      	ldr	r3, [r4, #8]
 8010cfe:	f89d 2000 	ldrb.w	r2, [sp]
 8010d02:	7199      	strb	r1, [r3, #6]
 8010d04:	68a3      	ldr	r3, [r4, #8]
 8010d06:	71da      	strb	r2, [r3, #7]
 8010d08:	2108      	movs	r1, #8
 8010d0a:	68a2      	ldr	r2, [r4, #8]
 8010d0c:	6923      	ldr	r3, [r4, #16]
 8010d0e:	440a      	add	r2, r1
 8010d10:	7561      	strb	r1, [r4, #21]
 8010d12:	440b      	add	r3, r1
 8010d14:	60a2      	str	r2, [r4, #8]
 8010d16:	6123      	str	r3, [r4, #16]
 8010d18:	7da0      	ldrb	r0, [r4, #22]
 8010d1a:	f080 0001 	eor.w	r0, r0, #1
 8010d1e:	b002      	add	sp, #8
 8010d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d24:	466b      	mov	r3, sp
 8010d26:	68a2      	ldr	r2, [r4, #8]
 8010d28:	cb03      	ldmia	r3!, {r0, r1}
 8010d2a:	6010      	str	r0, [r2, #0]
 8010d2c:	6051      	str	r1, [r2, #4]
 8010d2e:	e7eb      	b.n	8010d08 <ucdr_serialize_uint64_t+0x10c>
 8010d30:	68a2      	ldr	r2, [r4, #8]
 8010d32:	6923      	ldr	r3, [r4, #16]
 8010d34:	7da0      	ldrb	r0, [r4, #22]
 8010d36:	1b92      	subs	r2, r2, r6
 8010d38:	1b9b      	subs	r3, r3, r6
 8010d3a:	7567      	strb	r7, [r4, #21]
 8010d3c:	f080 0001 	eor.w	r0, r0, #1
 8010d40:	60a2      	str	r2, [r4, #8]
 8010d42:	6123      	str	r3, [r4, #16]
 8010d44:	b002      	add	sp, #8
 8010d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d4a:	68a3      	ldr	r3, [r4, #8]
 8010d4c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010d50:	701a      	strb	r2, [r3, #0]
 8010d52:	68a3      	ldr	r3, [r4, #8]
 8010d54:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010d58:	701a      	strb	r2, [r3, #0]
 8010d5a:	68a3      	ldr	r3, [r4, #8]
 8010d5c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010d60:	701a      	strb	r2, [r3, #0]
 8010d62:	68a3      	ldr	r3, [r4, #8]
 8010d64:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8010d68:	701a      	strb	r2, [r3, #0]
 8010d6a:	68a3      	ldr	r3, [r4, #8]
 8010d6c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8010d70:	701a      	strb	r2, [r3, #0]
 8010d72:	68a3      	ldr	r3, [r4, #8]
 8010d74:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8010d78:	701a      	strb	r2, [r3, #0]
 8010d7a:	68a3      	ldr	r3, [r4, #8]
 8010d7c:	f89d 2000 	ldrb.w	r2, [sp]
 8010d80:	701a      	strb	r2, [r3, #0]
 8010d82:	e78a      	b.n	8010c9a <ucdr_serialize_uint64_t+0x9e>
 8010d84:	4628      	mov	r0, r5
 8010d86:	466d      	mov	r5, sp
 8010d88:	4632      	mov	r2, r6
 8010d8a:	4629      	mov	r1, r5
 8010d8c:	f00d feaf 	bl	801eaee <memcpy>
 8010d90:	4642      	mov	r2, r8
 8010d92:	19a9      	adds	r1, r5, r6
 8010d94:	68a0      	ldr	r0, [r4, #8]
 8010d96:	f00d feaa 	bl	801eaee <memcpy>
 8010d9a:	e77e      	b.n	8010c9a <ucdr_serialize_uint64_t+0x9e>

08010d9c <ucdr_serialize_int16_t>:
 8010d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010da0:	460b      	mov	r3, r1
 8010da2:	b082      	sub	sp, #8
 8010da4:	4604      	mov	r4, r0
 8010da6:	2102      	movs	r1, #2
 8010da8:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010dac:	f000 ff56 	bl	8011c5c <ucdr_buffer_alignment>
 8010db0:	4601      	mov	r1, r0
 8010db2:	4620      	mov	r0, r4
 8010db4:	7d67      	ldrb	r7, [r4, #21]
 8010db6:	f000 ff99 	bl	8011cec <ucdr_advance_buffer>
 8010dba:	2102      	movs	r1, #2
 8010dbc:	4620      	mov	r0, r4
 8010dbe:	f000 feed 	bl	8011b9c <ucdr_check_buffer_available_for>
 8010dc2:	bb78      	cbnz	r0, 8010e24 <ucdr_serialize_int16_t+0x88>
 8010dc4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8010dc8:	42ab      	cmp	r3, r5
 8010dca:	d926      	bls.n	8010e1a <ucdr_serialize_int16_t+0x7e>
 8010dcc:	1b5e      	subs	r6, r3, r5
 8010dce:	60a3      	str	r3, [r4, #8]
 8010dd0:	6923      	ldr	r3, [r4, #16]
 8010dd2:	4620      	mov	r0, r4
 8010dd4:	f1c6 0802 	rsb	r8, r6, #2
 8010dd8:	4433      	add	r3, r6
 8010dda:	4641      	mov	r1, r8
 8010ddc:	6123      	str	r3, [r4, #16]
 8010dde:	f000 fee9 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 8010de2:	2800      	cmp	r0, #0
 8010de4:	d03b      	beq.n	8010e5e <ucdr_serialize_int16_t+0xc2>
 8010de6:	7d23      	ldrb	r3, [r4, #20]
 8010de8:	2b01      	cmp	r3, #1
 8010dea:	d04a      	beq.n	8010e82 <ucdr_serialize_int16_t+0xe6>
 8010dec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010df0:	702b      	strb	r3, [r5, #0]
 8010df2:	2e00      	cmp	r6, #0
 8010df4:	d040      	beq.n	8010e78 <ucdr_serialize_int16_t+0xdc>
 8010df6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010dfa:	706b      	strb	r3, [r5, #1]
 8010dfc:	6923      	ldr	r3, [r4, #16]
 8010dfe:	2102      	movs	r1, #2
 8010e00:	68a2      	ldr	r2, [r4, #8]
 8010e02:	3302      	adds	r3, #2
 8010e04:	7da0      	ldrb	r0, [r4, #22]
 8010e06:	4442      	add	r2, r8
 8010e08:	7561      	strb	r1, [r4, #21]
 8010e0a:	1b9e      	subs	r6, r3, r6
 8010e0c:	f080 0001 	eor.w	r0, r0, #1
 8010e10:	60a2      	str	r2, [r4, #8]
 8010e12:	6126      	str	r6, [r4, #16]
 8010e14:	b002      	add	sp, #8
 8010e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e1a:	2102      	movs	r1, #2
 8010e1c:	4620      	mov	r0, r4
 8010e1e:	f000 fec9 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 8010e22:	b190      	cbz	r0, 8010e4a <ucdr_serialize_int16_t+0xae>
 8010e24:	7d23      	ldrb	r3, [r4, #20]
 8010e26:	2b01      	cmp	r3, #1
 8010e28:	68a3      	ldr	r3, [r4, #8]
 8010e2a:	d014      	beq.n	8010e56 <ucdr_serialize_int16_t+0xba>
 8010e2c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010e30:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010e34:	7019      	strb	r1, [r3, #0]
 8010e36:	68a3      	ldr	r3, [r4, #8]
 8010e38:	705a      	strb	r2, [r3, #1]
 8010e3a:	2102      	movs	r1, #2
 8010e3c:	68a2      	ldr	r2, [r4, #8]
 8010e3e:	6923      	ldr	r3, [r4, #16]
 8010e40:	440a      	add	r2, r1
 8010e42:	7561      	strb	r1, [r4, #21]
 8010e44:	440b      	add	r3, r1
 8010e46:	60a2      	str	r2, [r4, #8]
 8010e48:	6123      	str	r3, [r4, #16]
 8010e4a:	7da0      	ldrb	r0, [r4, #22]
 8010e4c:	f080 0001 	eor.w	r0, r0, #1
 8010e50:	b002      	add	sp, #8
 8010e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e56:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010e5a:	801a      	strh	r2, [r3, #0]
 8010e5c:	e7ed      	b.n	8010e3a <ucdr_serialize_int16_t+0x9e>
 8010e5e:	68a2      	ldr	r2, [r4, #8]
 8010e60:	6923      	ldr	r3, [r4, #16]
 8010e62:	7da0      	ldrb	r0, [r4, #22]
 8010e64:	1b92      	subs	r2, r2, r6
 8010e66:	1b9b      	subs	r3, r3, r6
 8010e68:	7567      	strb	r7, [r4, #21]
 8010e6a:	f080 0001 	eor.w	r0, r0, #1
 8010e6e:	60a2      	str	r2, [r4, #8]
 8010e70:	6123      	str	r3, [r4, #16]
 8010e72:	b002      	add	sp, #8
 8010e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e78:	68a3      	ldr	r3, [r4, #8]
 8010e7a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010e7e:	701a      	strb	r2, [r3, #0]
 8010e80:	e7bc      	b.n	8010dfc <ucdr_serialize_int16_t+0x60>
 8010e82:	4628      	mov	r0, r5
 8010e84:	f10d 0506 	add.w	r5, sp, #6
 8010e88:	4632      	mov	r2, r6
 8010e8a:	4629      	mov	r1, r5
 8010e8c:	f00d fe2f 	bl	801eaee <memcpy>
 8010e90:	4642      	mov	r2, r8
 8010e92:	19a9      	adds	r1, r5, r6
 8010e94:	68a0      	ldr	r0, [r4, #8]
 8010e96:	f00d fe2a 	bl	801eaee <memcpy>
 8010e9a:	e7af      	b.n	8010dfc <ucdr_serialize_int16_t+0x60>

08010e9c <ucdr_serialize_endian_int16_t>:
 8010e9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010ea0:	4604      	mov	r4, r0
 8010ea2:	b083      	sub	sp, #12
 8010ea4:	460d      	mov	r5, r1
 8010ea6:	2102      	movs	r1, #2
 8010ea8:	f8ad 2006 	strh.w	r2, [sp, #6]
 8010eac:	f000 fed6 	bl	8011c5c <ucdr_buffer_alignment>
 8010eb0:	4601      	mov	r1, r0
 8010eb2:	4620      	mov	r0, r4
 8010eb4:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010eb8:	f000 ff18 	bl	8011cec <ucdr_advance_buffer>
 8010ebc:	2102      	movs	r1, #2
 8010ebe:	4620      	mov	r0, r4
 8010ec0:	f000 fe6c 	bl	8011b9c <ucdr_check_buffer_available_for>
 8010ec4:	bb70      	cbnz	r0, 8010f24 <ucdr_serialize_endian_int16_t+0x88>
 8010ec6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010eca:	42be      	cmp	r6, r7
 8010ecc:	d925      	bls.n	8010f1a <ucdr_serialize_endian_int16_t+0x7e>
 8010ece:	6923      	ldr	r3, [r4, #16]
 8010ed0:	4620      	mov	r0, r4
 8010ed2:	60a6      	str	r6, [r4, #8]
 8010ed4:	1bf6      	subs	r6, r6, r7
 8010ed6:	4433      	add	r3, r6
 8010ed8:	f1c6 0902 	rsb	r9, r6, #2
 8010edc:	6123      	str	r3, [r4, #16]
 8010ede:	4649      	mov	r1, r9
 8010ee0:	f000 fe68 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 8010ee4:	2800      	cmp	r0, #0
 8010ee6:	d039      	beq.n	8010f5c <ucdr_serialize_endian_int16_t+0xc0>
 8010ee8:	2d01      	cmp	r5, #1
 8010eea:	d04a      	beq.n	8010f82 <ucdr_serialize_endian_int16_t+0xe6>
 8010eec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010ef0:	703b      	strb	r3, [r7, #0]
 8010ef2:	2e00      	cmp	r6, #0
 8010ef4:	d040      	beq.n	8010f78 <ucdr_serialize_endian_int16_t+0xdc>
 8010ef6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010efa:	707b      	strb	r3, [r7, #1]
 8010efc:	6923      	ldr	r3, [r4, #16]
 8010efe:	2102      	movs	r1, #2
 8010f00:	68a2      	ldr	r2, [r4, #8]
 8010f02:	7da0      	ldrb	r0, [r4, #22]
 8010f04:	3302      	adds	r3, #2
 8010f06:	444a      	add	r2, r9
 8010f08:	7561      	strb	r1, [r4, #21]
 8010f0a:	1b9b      	subs	r3, r3, r6
 8010f0c:	f080 0001 	eor.w	r0, r0, #1
 8010f10:	60a2      	str	r2, [r4, #8]
 8010f12:	6123      	str	r3, [r4, #16]
 8010f14:	b003      	add	sp, #12
 8010f16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f1a:	2102      	movs	r1, #2
 8010f1c:	4620      	mov	r0, r4
 8010f1e:	f000 fe49 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 8010f22:	b188      	cbz	r0, 8010f48 <ucdr_serialize_endian_int16_t+0xac>
 8010f24:	2d01      	cmp	r5, #1
 8010f26:	68a3      	ldr	r3, [r4, #8]
 8010f28:	d014      	beq.n	8010f54 <ucdr_serialize_endian_int16_t+0xb8>
 8010f2a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010f2e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010f32:	7019      	strb	r1, [r3, #0]
 8010f34:	68a3      	ldr	r3, [r4, #8]
 8010f36:	705a      	strb	r2, [r3, #1]
 8010f38:	2102      	movs	r1, #2
 8010f3a:	68a2      	ldr	r2, [r4, #8]
 8010f3c:	6923      	ldr	r3, [r4, #16]
 8010f3e:	440a      	add	r2, r1
 8010f40:	7561      	strb	r1, [r4, #21]
 8010f42:	440b      	add	r3, r1
 8010f44:	60a2      	str	r2, [r4, #8]
 8010f46:	6123      	str	r3, [r4, #16]
 8010f48:	7da0      	ldrb	r0, [r4, #22]
 8010f4a:	f080 0001 	eor.w	r0, r0, #1
 8010f4e:	b003      	add	sp, #12
 8010f50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f54:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010f58:	801a      	strh	r2, [r3, #0]
 8010f5a:	e7ed      	b.n	8010f38 <ucdr_serialize_endian_int16_t+0x9c>
 8010f5c:	68a2      	ldr	r2, [r4, #8]
 8010f5e:	6923      	ldr	r3, [r4, #16]
 8010f60:	7da0      	ldrb	r0, [r4, #22]
 8010f62:	1b92      	subs	r2, r2, r6
 8010f64:	1b9b      	subs	r3, r3, r6
 8010f66:	f884 8015 	strb.w	r8, [r4, #21]
 8010f6a:	f080 0001 	eor.w	r0, r0, #1
 8010f6e:	60a2      	str	r2, [r4, #8]
 8010f70:	6123      	str	r3, [r4, #16]
 8010f72:	b003      	add	sp, #12
 8010f74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f78:	68a3      	ldr	r3, [r4, #8]
 8010f7a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010f7e:	701a      	strb	r2, [r3, #0]
 8010f80:	e7bc      	b.n	8010efc <ucdr_serialize_endian_int16_t+0x60>
 8010f82:	f10d 0506 	add.w	r5, sp, #6
 8010f86:	4632      	mov	r2, r6
 8010f88:	4638      	mov	r0, r7
 8010f8a:	4629      	mov	r1, r5
 8010f8c:	f00d fdaf 	bl	801eaee <memcpy>
 8010f90:	464a      	mov	r2, r9
 8010f92:	19a9      	adds	r1, r5, r6
 8010f94:	68a0      	ldr	r0, [r4, #8]
 8010f96:	f00d fdaa 	bl	801eaee <memcpy>
 8010f9a:	e7af      	b.n	8010efc <ucdr_serialize_endian_int16_t+0x60>

08010f9c <ucdr_deserialize_int16_t>:
 8010f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010fa0:	4604      	mov	r4, r0
 8010fa2:	460d      	mov	r5, r1
 8010fa4:	2102      	movs	r1, #2
 8010fa6:	f000 fe59 	bl	8011c5c <ucdr_buffer_alignment>
 8010faa:	4601      	mov	r1, r0
 8010fac:	4620      	mov	r0, r4
 8010fae:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010fb2:	f000 fe9b 	bl	8011cec <ucdr_advance_buffer>
 8010fb6:	2102      	movs	r1, #2
 8010fb8:	4620      	mov	r0, r4
 8010fba:	f000 fdef 	bl	8011b9c <ucdr_check_buffer_available_for>
 8010fbe:	bb60      	cbnz	r0, 801101a <ucdr_deserialize_int16_t+0x7e>
 8010fc0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010fc4:	42be      	cmp	r6, r7
 8010fc6:	d923      	bls.n	8011010 <ucdr_deserialize_int16_t+0x74>
 8010fc8:	6923      	ldr	r3, [r4, #16]
 8010fca:	4620      	mov	r0, r4
 8010fcc:	60a6      	str	r6, [r4, #8]
 8010fce:	1bf6      	subs	r6, r6, r7
 8010fd0:	4433      	add	r3, r6
 8010fd2:	f1c6 0902 	rsb	r9, r6, #2
 8010fd6:	6123      	str	r3, [r4, #16]
 8010fd8:	4649      	mov	r1, r9
 8010fda:	f000 fdeb 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 8010fde:	2800      	cmp	r0, #0
 8010fe0:	d034      	beq.n	801104c <ucdr_deserialize_int16_t+0xb0>
 8010fe2:	7d23      	ldrb	r3, [r4, #20]
 8010fe4:	2b01      	cmp	r3, #1
 8010fe6:	d042      	beq.n	801106e <ucdr_deserialize_int16_t+0xd2>
 8010fe8:	787b      	ldrb	r3, [r7, #1]
 8010fea:	702b      	strb	r3, [r5, #0]
 8010fec:	2e00      	cmp	r6, #0
 8010fee:	d03a      	beq.n	8011066 <ucdr_deserialize_int16_t+0xca>
 8010ff0:	783b      	ldrb	r3, [r7, #0]
 8010ff2:	706b      	strb	r3, [r5, #1]
 8010ff4:	6923      	ldr	r3, [r4, #16]
 8010ff6:	2102      	movs	r1, #2
 8010ff8:	68a2      	ldr	r2, [r4, #8]
 8010ffa:	3302      	adds	r3, #2
 8010ffc:	7da0      	ldrb	r0, [r4, #22]
 8010ffe:	444a      	add	r2, r9
 8011000:	7561      	strb	r1, [r4, #21]
 8011002:	1b9b      	subs	r3, r3, r6
 8011004:	f080 0001 	eor.w	r0, r0, #1
 8011008:	60a2      	str	r2, [r4, #8]
 801100a:	6123      	str	r3, [r4, #16]
 801100c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011010:	2102      	movs	r1, #2
 8011012:	4620      	mov	r0, r4
 8011014:	f000 fdce 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 8011018:	b180      	cbz	r0, 801103c <ucdr_deserialize_int16_t+0xa0>
 801101a:	7d23      	ldrb	r3, [r4, #20]
 801101c:	2b01      	cmp	r3, #1
 801101e:	68a3      	ldr	r3, [r4, #8]
 8011020:	d011      	beq.n	8011046 <ucdr_deserialize_int16_t+0xaa>
 8011022:	785b      	ldrb	r3, [r3, #1]
 8011024:	702b      	strb	r3, [r5, #0]
 8011026:	68a3      	ldr	r3, [r4, #8]
 8011028:	781b      	ldrb	r3, [r3, #0]
 801102a:	706b      	strb	r3, [r5, #1]
 801102c:	2102      	movs	r1, #2
 801102e:	68a2      	ldr	r2, [r4, #8]
 8011030:	6923      	ldr	r3, [r4, #16]
 8011032:	440a      	add	r2, r1
 8011034:	7561      	strb	r1, [r4, #21]
 8011036:	440b      	add	r3, r1
 8011038:	60a2      	str	r2, [r4, #8]
 801103a:	6123      	str	r3, [r4, #16]
 801103c:	7da0      	ldrb	r0, [r4, #22]
 801103e:	f080 0001 	eor.w	r0, r0, #1
 8011042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011046:	881b      	ldrh	r3, [r3, #0]
 8011048:	802b      	strh	r3, [r5, #0]
 801104a:	e7ef      	b.n	801102c <ucdr_deserialize_int16_t+0x90>
 801104c:	68a2      	ldr	r2, [r4, #8]
 801104e:	6923      	ldr	r3, [r4, #16]
 8011050:	1b92      	subs	r2, r2, r6
 8011052:	7da0      	ldrb	r0, [r4, #22]
 8011054:	1b9b      	subs	r3, r3, r6
 8011056:	f884 8015 	strb.w	r8, [r4, #21]
 801105a:	f080 0001 	eor.w	r0, r0, #1
 801105e:	60a2      	str	r2, [r4, #8]
 8011060:	6123      	str	r3, [r4, #16]
 8011062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011066:	68a3      	ldr	r3, [r4, #8]
 8011068:	781b      	ldrb	r3, [r3, #0]
 801106a:	706b      	strb	r3, [r5, #1]
 801106c:	e7c2      	b.n	8010ff4 <ucdr_deserialize_int16_t+0x58>
 801106e:	4639      	mov	r1, r7
 8011070:	4632      	mov	r2, r6
 8011072:	4628      	mov	r0, r5
 8011074:	f00d fd3b 	bl	801eaee <memcpy>
 8011078:	464a      	mov	r2, r9
 801107a:	19a8      	adds	r0, r5, r6
 801107c:	68a1      	ldr	r1, [r4, #8]
 801107e:	f00d fd36 	bl	801eaee <memcpy>
 8011082:	e7b7      	b.n	8010ff4 <ucdr_deserialize_int16_t+0x58>

08011084 <ucdr_deserialize_endian_int16_t>:
 8011084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011088:	4604      	mov	r4, r0
 801108a:	460e      	mov	r6, r1
 801108c:	2102      	movs	r1, #2
 801108e:	4615      	mov	r5, r2
 8011090:	f000 fde4 	bl	8011c5c <ucdr_buffer_alignment>
 8011094:	4601      	mov	r1, r0
 8011096:	4620      	mov	r0, r4
 8011098:	f894 8015 	ldrb.w	r8, [r4, #21]
 801109c:	f000 fe26 	bl	8011cec <ucdr_advance_buffer>
 80110a0:	2102      	movs	r1, #2
 80110a2:	4620      	mov	r0, r4
 80110a4:	f000 fd7a 	bl	8011b9c <ucdr_check_buffer_available_for>
 80110a8:	bb70      	cbnz	r0, 8011108 <ucdr_deserialize_endian_int16_t+0x84>
 80110aa:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 80110ae:	454f      	cmp	r7, r9
 80110b0:	d925      	bls.n	80110fe <ucdr_deserialize_endian_int16_t+0x7a>
 80110b2:	6923      	ldr	r3, [r4, #16]
 80110b4:	4620      	mov	r0, r4
 80110b6:	60a7      	str	r7, [r4, #8]
 80110b8:	eba7 0709 	sub.w	r7, r7, r9
 80110bc:	443b      	add	r3, r7
 80110be:	f1c7 0a02 	rsb	sl, r7, #2
 80110c2:	6123      	str	r3, [r4, #16]
 80110c4:	4651      	mov	r1, sl
 80110c6:	f000 fd75 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 80110ca:	2800      	cmp	r0, #0
 80110cc:	d034      	beq.n	8011138 <ucdr_deserialize_endian_int16_t+0xb4>
 80110ce:	2e01      	cmp	r6, #1
 80110d0:	d043      	beq.n	801115a <ucdr_deserialize_endian_int16_t+0xd6>
 80110d2:	f899 3001 	ldrb.w	r3, [r9, #1]
 80110d6:	702b      	strb	r3, [r5, #0]
 80110d8:	2f00      	cmp	r7, #0
 80110da:	d03a      	beq.n	8011152 <ucdr_deserialize_endian_int16_t+0xce>
 80110dc:	f899 3000 	ldrb.w	r3, [r9]
 80110e0:	706b      	strb	r3, [r5, #1]
 80110e2:	6923      	ldr	r3, [r4, #16]
 80110e4:	2102      	movs	r1, #2
 80110e6:	68a2      	ldr	r2, [r4, #8]
 80110e8:	3302      	adds	r3, #2
 80110ea:	7da0      	ldrb	r0, [r4, #22]
 80110ec:	4452      	add	r2, sl
 80110ee:	7561      	strb	r1, [r4, #21]
 80110f0:	1bdb      	subs	r3, r3, r7
 80110f2:	f080 0001 	eor.w	r0, r0, #1
 80110f6:	60a2      	str	r2, [r4, #8]
 80110f8:	6123      	str	r3, [r4, #16]
 80110fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110fe:	2102      	movs	r1, #2
 8011100:	4620      	mov	r0, r4
 8011102:	f000 fd57 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 8011106:	b178      	cbz	r0, 8011128 <ucdr_deserialize_endian_int16_t+0xa4>
 8011108:	2e01      	cmp	r6, #1
 801110a:	68a3      	ldr	r3, [r4, #8]
 801110c:	d011      	beq.n	8011132 <ucdr_deserialize_endian_int16_t+0xae>
 801110e:	785b      	ldrb	r3, [r3, #1]
 8011110:	702b      	strb	r3, [r5, #0]
 8011112:	68a3      	ldr	r3, [r4, #8]
 8011114:	781b      	ldrb	r3, [r3, #0]
 8011116:	706b      	strb	r3, [r5, #1]
 8011118:	2102      	movs	r1, #2
 801111a:	68a2      	ldr	r2, [r4, #8]
 801111c:	6923      	ldr	r3, [r4, #16]
 801111e:	440a      	add	r2, r1
 8011120:	7561      	strb	r1, [r4, #21]
 8011122:	440b      	add	r3, r1
 8011124:	60a2      	str	r2, [r4, #8]
 8011126:	6123      	str	r3, [r4, #16]
 8011128:	7da0      	ldrb	r0, [r4, #22]
 801112a:	f080 0001 	eor.w	r0, r0, #1
 801112e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011132:	881b      	ldrh	r3, [r3, #0]
 8011134:	802b      	strh	r3, [r5, #0]
 8011136:	e7ef      	b.n	8011118 <ucdr_deserialize_endian_int16_t+0x94>
 8011138:	68a2      	ldr	r2, [r4, #8]
 801113a:	6923      	ldr	r3, [r4, #16]
 801113c:	1bd2      	subs	r2, r2, r7
 801113e:	7da0      	ldrb	r0, [r4, #22]
 8011140:	1bdb      	subs	r3, r3, r7
 8011142:	f884 8015 	strb.w	r8, [r4, #21]
 8011146:	f080 0001 	eor.w	r0, r0, #1
 801114a:	60a2      	str	r2, [r4, #8]
 801114c:	6123      	str	r3, [r4, #16]
 801114e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011152:	68a3      	ldr	r3, [r4, #8]
 8011154:	781b      	ldrb	r3, [r3, #0]
 8011156:	706b      	strb	r3, [r5, #1]
 8011158:	e7c3      	b.n	80110e2 <ucdr_deserialize_endian_int16_t+0x5e>
 801115a:	4649      	mov	r1, r9
 801115c:	463a      	mov	r2, r7
 801115e:	4628      	mov	r0, r5
 8011160:	f00d fcc5 	bl	801eaee <memcpy>
 8011164:	4652      	mov	r2, sl
 8011166:	19e8      	adds	r0, r5, r7
 8011168:	68a1      	ldr	r1, [r4, #8]
 801116a:	f00d fcc0 	bl	801eaee <memcpy>
 801116e:	e7b8      	b.n	80110e2 <ucdr_deserialize_endian_int16_t+0x5e>

08011170 <ucdr_serialize_int32_t>:
 8011170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011174:	b082      	sub	sp, #8
 8011176:	4604      	mov	r4, r0
 8011178:	9101      	str	r1, [sp, #4]
 801117a:	2104      	movs	r1, #4
 801117c:	f000 fd6e 	bl	8011c5c <ucdr_buffer_alignment>
 8011180:	4601      	mov	r1, r0
 8011182:	4620      	mov	r0, r4
 8011184:	7d67      	ldrb	r7, [r4, #21]
 8011186:	f000 fdb1 	bl	8011cec <ucdr_advance_buffer>
 801118a:	2104      	movs	r1, #4
 801118c:	4620      	mov	r0, r4
 801118e:	f000 fd05 	bl	8011b9c <ucdr_check_buffer_available_for>
 8011192:	2800      	cmp	r0, #0
 8011194:	d139      	bne.n	801120a <ucdr_serialize_int32_t+0x9a>
 8011196:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801119a:	42ab      	cmp	r3, r5
 801119c:	d930      	bls.n	8011200 <ucdr_serialize_int32_t+0x90>
 801119e:	1b5e      	subs	r6, r3, r5
 80111a0:	60a3      	str	r3, [r4, #8]
 80111a2:	6923      	ldr	r3, [r4, #16]
 80111a4:	4620      	mov	r0, r4
 80111a6:	f1c6 0804 	rsb	r8, r6, #4
 80111aa:	4433      	add	r3, r6
 80111ac:	4641      	mov	r1, r8
 80111ae:	6123      	str	r3, [r4, #16]
 80111b0:	f000 fd00 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 80111b4:	2800      	cmp	r0, #0
 80111b6:	d04c      	beq.n	8011252 <ucdr_serialize_int32_t+0xe2>
 80111b8:	7d23      	ldrb	r3, [r4, #20]
 80111ba:	2b01      	cmp	r3, #1
 80111bc:	d063      	beq.n	8011286 <ucdr_serialize_int32_t+0x116>
 80111be:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80111c2:	702b      	strb	r3, [r5, #0]
 80111c4:	2e00      	cmp	r6, #0
 80111c6:	d051      	beq.n	801126c <ucdr_serialize_int32_t+0xfc>
 80111c8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80111cc:	2e01      	cmp	r6, #1
 80111ce:	706b      	strb	r3, [r5, #1]
 80111d0:	d050      	beq.n	8011274 <ucdr_serialize_int32_t+0x104>
 80111d2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80111d6:	2e02      	cmp	r6, #2
 80111d8:	70ab      	strb	r3, [r5, #2]
 80111da:	d04f      	beq.n	801127c <ucdr_serialize_int32_t+0x10c>
 80111dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80111e0:	70eb      	strb	r3, [r5, #3]
 80111e2:	6923      	ldr	r3, [r4, #16]
 80111e4:	2104      	movs	r1, #4
 80111e6:	68a2      	ldr	r2, [r4, #8]
 80111e8:	3304      	adds	r3, #4
 80111ea:	7da0      	ldrb	r0, [r4, #22]
 80111ec:	4442      	add	r2, r8
 80111ee:	7561      	strb	r1, [r4, #21]
 80111f0:	1b9e      	subs	r6, r3, r6
 80111f2:	f080 0001 	eor.w	r0, r0, #1
 80111f6:	60a2      	str	r2, [r4, #8]
 80111f8:	6126      	str	r6, [r4, #16]
 80111fa:	b002      	add	sp, #8
 80111fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011200:	2104      	movs	r1, #4
 8011202:	4620      	mov	r0, r4
 8011204:	f000 fcd6 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 8011208:	b1d0      	cbz	r0, 8011240 <ucdr_serialize_int32_t+0xd0>
 801120a:	7d23      	ldrb	r3, [r4, #20]
 801120c:	2b01      	cmp	r3, #1
 801120e:	68a3      	ldr	r3, [r4, #8]
 8011210:	d01c      	beq.n	801124c <ucdr_serialize_int32_t+0xdc>
 8011212:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011216:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801121a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801121e:	7018      	strb	r0, [r3, #0]
 8011220:	68a3      	ldr	r3, [r4, #8]
 8011222:	705a      	strb	r2, [r3, #1]
 8011224:	68a3      	ldr	r3, [r4, #8]
 8011226:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801122a:	7099      	strb	r1, [r3, #2]
 801122c:	68a3      	ldr	r3, [r4, #8]
 801122e:	70da      	strb	r2, [r3, #3]
 8011230:	2104      	movs	r1, #4
 8011232:	68a2      	ldr	r2, [r4, #8]
 8011234:	6923      	ldr	r3, [r4, #16]
 8011236:	440a      	add	r2, r1
 8011238:	7561      	strb	r1, [r4, #21]
 801123a:	440b      	add	r3, r1
 801123c:	60a2      	str	r2, [r4, #8]
 801123e:	6123      	str	r3, [r4, #16]
 8011240:	7da0      	ldrb	r0, [r4, #22]
 8011242:	f080 0001 	eor.w	r0, r0, #1
 8011246:	b002      	add	sp, #8
 8011248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801124c:	9a01      	ldr	r2, [sp, #4]
 801124e:	601a      	str	r2, [r3, #0]
 8011250:	e7ee      	b.n	8011230 <ucdr_serialize_int32_t+0xc0>
 8011252:	68a2      	ldr	r2, [r4, #8]
 8011254:	6923      	ldr	r3, [r4, #16]
 8011256:	7da0      	ldrb	r0, [r4, #22]
 8011258:	1b92      	subs	r2, r2, r6
 801125a:	1b9b      	subs	r3, r3, r6
 801125c:	7567      	strb	r7, [r4, #21]
 801125e:	f080 0001 	eor.w	r0, r0, #1
 8011262:	60a2      	str	r2, [r4, #8]
 8011264:	6123      	str	r3, [r4, #16]
 8011266:	b002      	add	sp, #8
 8011268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801126c:	68a3      	ldr	r3, [r4, #8]
 801126e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011272:	701a      	strb	r2, [r3, #0]
 8011274:	68a3      	ldr	r3, [r4, #8]
 8011276:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801127a:	701a      	strb	r2, [r3, #0]
 801127c:	68a3      	ldr	r3, [r4, #8]
 801127e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011282:	701a      	strb	r2, [r3, #0]
 8011284:	e7ad      	b.n	80111e2 <ucdr_serialize_int32_t+0x72>
 8011286:	4628      	mov	r0, r5
 8011288:	ad01      	add	r5, sp, #4
 801128a:	4632      	mov	r2, r6
 801128c:	4629      	mov	r1, r5
 801128e:	f00d fc2e 	bl	801eaee <memcpy>
 8011292:	4642      	mov	r2, r8
 8011294:	19a9      	adds	r1, r5, r6
 8011296:	68a0      	ldr	r0, [r4, #8]
 8011298:	f00d fc29 	bl	801eaee <memcpy>
 801129c:	e7a1      	b.n	80111e2 <ucdr_serialize_int32_t+0x72>
 801129e:	bf00      	nop

080112a0 <ucdr_deserialize_int32_t>:
 80112a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80112a4:	4604      	mov	r4, r0
 80112a6:	460d      	mov	r5, r1
 80112a8:	2104      	movs	r1, #4
 80112aa:	f000 fcd7 	bl	8011c5c <ucdr_buffer_alignment>
 80112ae:	4601      	mov	r1, r0
 80112b0:	4620      	mov	r0, r4
 80112b2:	f894 8015 	ldrb.w	r8, [r4, #21]
 80112b6:	f000 fd19 	bl	8011cec <ucdr_advance_buffer>
 80112ba:	2104      	movs	r1, #4
 80112bc:	4620      	mov	r0, r4
 80112be:	f000 fc6d 	bl	8011b9c <ucdr_check_buffer_available_for>
 80112c2:	2800      	cmp	r0, #0
 80112c4:	d138      	bne.n	8011338 <ucdr_deserialize_int32_t+0x98>
 80112c6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80112ca:	42b7      	cmp	r7, r6
 80112cc:	d92f      	bls.n	801132e <ucdr_deserialize_int32_t+0x8e>
 80112ce:	6923      	ldr	r3, [r4, #16]
 80112d0:	4620      	mov	r0, r4
 80112d2:	60a7      	str	r7, [r4, #8]
 80112d4:	1bbf      	subs	r7, r7, r6
 80112d6:	443b      	add	r3, r7
 80112d8:	f1c7 0904 	rsb	r9, r7, #4
 80112dc:	6123      	str	r3, [r4, #16]
 80112de:	4649      	mov	r1, r9
 80112e0:	f000 fc68 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 80112e4:	2800      	cmp	r0, #0
 80112e6:	d046      	beq.n	8011376 <ucdr_deserialize_int32_t+0xd6>
 80112e8:	7d23      	ldrb	r3, [r4, #20]
 80112ea:	2b01      	cmp	r3, #1
 80112ec:	d05c      	beq.n	80113a8 <ucdr_deserialize_int32_t+0x108>
 80112ee:	78f3      	ldrb	r3, [r6, #3]
 80112f0:	702b      	strb	r3, [r5, #0]
 80112f2:	2f00      	cmp	r7, #0
 80112f4:	d04c      	beq.n	8011390 <ucdr_deserialize_int32_t+0xf0>
 80112f6:	78b3      	ldrb	r3, [r6, #2]
 80112f8:	2f01      	cmp	r7, #1
 80112fa:	706b      	strb	r3, [r5, #1]
 80112fc:	f105 0302 	add.w	r3, r5, #2
 8011300:	d04a      	beq.n	8011398 <ucdr_deserialize_int32_t+0xf8>
 8011302:	7873      	ldrb	r3, [r6, #1]
 8011304:	2f02      	cmp	r7, #2
 8011306:	70ab      	strb	r3, [r5, #2]
 8011308:	f105 0303 	add.w	r3, r5, #3
 801130c:	d048      	beq.n	80113a0 <ucdr_deserialize_int32_t+0x100>
 801130e:	7833      	ldrb	r3, [r6, #0]
 8011310:	70eb      	strb	r3, [r5, #3]
 8011312:	6923      	ldr	r3, [r4, #16]
 8011314:	2104      	movs	r1, #4
 8011316:	68a2      	ldr	r2, [r4, #8]
 8011318:	3304      	adds	r3, #4
 801131a:	7da0      	ldrb	r0, [r4, #22]
 801131c:	444a      	add	r2, r9
 801131e:	7561      	strb	r1, [r4, #21]
 8011320:	1bdb      	subs	r3, r3, r7
 8011322:	f080 0001 	eor.w	r0, r0, #1
 8011326:	60a2      	str	r2, [r4, #8]
 8011328:	6123      	str	r3, [r4, #16]
 801132a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801132e:	2104      	movs	r1, #4
 8011330:	4620      	mov	r0, r4
 8011332:	f000 fc3f 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 8011336:	b1b0      	cbz	r0, 8011366 <ucdr_deserialize_int32_t+0xc6>
 8011338:	7d23      	ldrb	r3, [r4, #20]
 801133a:	2b01      	cmp	r3, #1
 801133c:	68a3      	ldr	r3, [r4, #8]
 801133e:	d017      	beq.n	8011370 <ucdr_deserialize_int32_t+0xd0>
 8011340:	78db      	ldrb	r3, [r3, #3]
 8011342:	702b      	strb	r3, [r5, #0]
 8011344:	68a3      	ldr	r3, [r4, #8]
 8011346:	789b      	ldrb	r3, [r3, #2]
 8011348:	706b      	strb	r3, [r5, #1]
 801134a:	68a3      	ldr	r3, [r4, #8]
 801134c:	785b      	ldrb	r3, [r3, #1]
 801134e:	70ab      	strb	r3, [r5, #2]
 8011350:	68a3      	ldr	r3, [r4, #8]
 8011352:	781b      	ldrb	r3, [r3, #0]
 8011354:	70eb      	strb	r3, [r5, #3]
 8011356:	2104      	movs	r1, #4
 8011358:	68a2      	ldr	r2, [r4, #8]
 801135a:	6923      	ldr	r3, [r4, #16]
 801135c:	440a      	add	r2, r1
 801135e:	7561      	strb	r1, [r4, #21]
 8011360:	440b      	add	r3, r1
 8011362:	60a2      	str	r2, [r4, #8]
 8011364:	6123      	str	r3, [r4, #16]
 8011366:	7da0      	ldrb	r0, [r4, #22]
 8011368:	f080 0001 	eor.w	r0, r0, #1
 801136c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	602b      	str	r3, [r5, #0]
 8011374:	e7ef      	b.n	8011356 <ucdr_deserialize_int32_t+0xb6>
 8011376:	68a2      	ldr	r2, [r4, #8]
 8011378:	6923      	ldr	r3, [r4, #16]
 801137a:	1bd2      	subs	r2, r2, r7
 801137c:	7da0      	ldrb	r0, [r4, #22]
 801137e:	1bdb      	subs	r3, r3, r7
 8011380:	f884 8015 	strb.w	r8, [r4, #21]
 8011384:	f080 0001 	eor.w	r0, r0, #1
 8011388:	60a2      	str	r2, [r4, #8]
 801138a:	6123      	str	r3, [r4, #16]
 801138c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011390:	68a3      	ldr	r3, [r4, #8]
 8011392:	789b      	ldrb	r3, [r3, #2]
 8011394:	706b      	strb	r3, [r5, #1]
 8011396:	1cab      	adds	r3, r5, #2
 8011398:	68a2      	ldr	r2, [r4, #8]
 801139a:	7852      	ldrb	r2, [r2, #1]
 801139c:	f803 2b01 	strb.w	r2, [r3], #1
 80113a0:	68a2      	ldr	r2, [r4, #8]
 80113a2:	7812      	ldrb	r2, [r2, #0]
 80113a4:	701a      	strb	r2, [r3, #0]
 80113a6:	e7b4      	b.n	8011312 <ucdr_deserialize_int32_t+0x72>
 80113a8:	4631      	mov	r1, r6
 80113aa:	463a      	mov	r2, r7
 80113ac:	4628      	mov	r0, r5
 80113ae:	f00d fb9e 	bl	801eaee <memcpy>
 80113b2:	464a      	mov	r2, r9
 80113b4:	19e8      	adds	r0, r5, r7
 80113b6:	68a1      	ldr	r1, [r4, #8]
 80113b8:	f00d fb99 	bl	801eaee <memcpy>
 80113bc:	e7a9      	b.n	8011312 <ucdr_deserialize_int32_t+0x72>
 80113be:	bf00      	nop

080113c0 <ucdr_serialize_int64_t>:
 80113c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113c4:	4604      	mov	r4, r0
 80113c6:	b082      	sub	sp, #8
 80113c8:	2108      	movs	r1, #8
 80113ca:	e9cd 2300 	strd	r2, r3, [sp]
 80113ce:	f000 fc45 	bl	8011c5c <ucdr_buffer_alignment>
 80113d2:	4601      	mov	r1, r0
 80113d4:	4620      	mov	r0, r4
 80113d6:	7d67      	ldrb	r7, [r4, #21]
 80113d8:	f000 fc88 	bl	8011cec <ucdr_advance_buffer>
 80113dc:	2108      	movs	r1, #8
 80113de:	4620      	mov	r0, r4
 80113e0:	f000 fbdc 	bl	8011b9c <ucdr_check_buffer_available_for>
 80113e4:	2800      	cmp	r0, #0
 80113e6:	d14e      	bne.n	8011486 <ucdr_serialize_int64_t+0xc6>
 80113e8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80113ec:	42ab      	cmp	r3, r5
 80113ee:	d945      	bls.n	801147c <ucdr_serialize_int64_t+0xbc>
 80113f0:	1b5e      	subs	r6, r3, r5
 80113f2:	60a3      	str	r3, [r4, #8]
 80113f4:	6923      	ldr	r3, [r4, #16]
 80113f6:	4620      	mov	r0, r4
 80113f8:	f1c6 0808 	rsb	r8, r6, #8
 80113fc:	4433      	add	r3, r6
 80113fe:	4641      	mov	r1, r8
 8011400:	6123      	str	r3, [r4, #16]
 8011402:	f000 fbd7 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 8011406:	2800      	cmp	r0, #0
 8011408:	d074      	beq.n	80114f4 <ucdr_serialize_int64_t+0x134>
 801140a:	7d23      	ldrb	r3, [r4, #20]
 801140c:	2b01      	cmp	r3, #1
 801140e:	f000 809b 	beq.w	8011548 <ucdr_serialize_int64_t+0x188>
 8011412:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011416:	702b      	strb	r3, [r5, #0]
 8011418:	2e00      	cmp	r6, #0
 801141a:	d078      	beq.n	801150e <ucdr_serialize_int64_t+0x14e>
 801141c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011420:	2e01      	cmp	r6, #1
 8011422:	706b      	strb	r3, [r5, #1]
 8011424:	d077      	beq.n	8011516 <ucdr_serialize_int64_t+0x156>
 8011426:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801142a:	2e02      	cmp	r6, #2
 801142c:	70ab      	strb	r3, [r5, #2]
 801142e:	d076      	beq.n	801151e <ucdr_serialize_int64_t+0x15e>
 8011430:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011434:	2e03      	cmp	r6, #3
 8011436:	70eb      	strb	r3, [r5, #3]
 8011438:	d075      	beq.n	8011526 <ucdr_serialize_int64_t+0x166>
 801143a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801143e:	2e04      	cmp	r6, #4
 8011440:	712b      	strb	r3, [r5, #4]
 8011442:	d074      	beq.n	801152e <ucdr_serialize_int64_t+0x16e>
 8011444:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8011448:	2e05      	cmp	r6, #5
 801144a:	716b      	strb	r3, [r5, #5]
 801144c:	d073      	beq.n	8011536 <ucdr_serialize_int64_t+0x176>
 801144e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8011452:	2e06      	cmp	r6, #6
 8011454:	71ab      	strb	r3, [r5, #6]
 8011456:	d072      	beq.n	801153e <ucdr_serialize_int64_t+0x17e>
 8011458:	f89d 3000 	ldrb.w	r3, [sp]
 801145c:	71eb      	strb	r3, [r5, #7]
 801145e:	6923      	ldr	r3, [r4, #16]
 8011460:	2108      	movs	r1, #8
 8011462:	68a2      	ldr	r2, [r4, #8]
 8011464:	3308      	adds	r3, #8
 8011466:	7da0      	ldrb	r0, [r4, #22]
 8011468:	4442      	add	r2, r8
 801146a:	7561      	strb	r1, [r4, #21]
 801146c:	1b9e      	subs	r6, r3, r6
 801146e:	f080 0001 	eor.w	r0, r0, #1
 8011472:	60a2      	str	r2, [r4, #8]
 8011474:	6126      	str	r6, [r4, #16]
 8011476:	b002      	add	sp, #8
 8011478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801147c:	2108      	movs	r1, #8
 801147e:	4620      	mov	r0, r4
 8011480:	f000 fb98 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 8011484:	b350      	cbz	r0, 80114dc <ucdr_serialize_int64_t+0x11c>
 8011486:	7d23      	ldrb	r3, [r4, #20]
 8011488:	2b01      	cmp	r3, #1
 801148a:	d02d      	beq.n	80114e8 <ucdr_serialize_int64_t+0x128>
 801148c:	68a3      	ldr	r3, [r4, #8]
 801148e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011492:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011496:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801149a:	7018      	strb	r0, [r3, #0]
 801149c:	68a3      	ldr	r3, [r4, #8]
 801149e:	705a      	strb	r2, [r3, #1]
 80114a0:	68a3      	ldr	r3, [r4, #8]
 80114a2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80114a6:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80114aa:	7099      	strb	r1, [r3, #2]
 80114ac:	68a3      	ldr	r3, [r4, #8]
 80114ae:	70da      	strb	r2, [r3, #3]
 80114b0:	68a3      	ldr	r3, [r4, #8]
 80114b2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80114b6:	f89d 1001 	ldrb.w	r1, [sp, #1]
 80114ba:	7118      	strb	r0, [r3, #4]
 80114bc:	68a3      	ldr	r3, [r4, #8]
 80114be:	715a      	strb	r2, [r3, #5]
 80114c0:	68a3      	ldr	r3, [r4, #8]
 80114c2:	f89d 2000 	ldrb.w	r2, [sp]
 80114c6:	7199      	strb	r1, [r3, #6]
 80114c8:	68a3      	ldr	r3, [r4, #8]
 80114ca:	71da      	strb	r2, [r3, #7]
 80114cc:	2108      	movs	r1, #8
 80114ce:	68a2      	ldr	r2, [r4, #8]
 80114d0:	6923      	ldr	r3, [r4, #16]
 80114d2:	440a      	add	r2, r1
 80114d4:	7561      	strb	r1, [r4, #21]
 80114d6:	440b      	add	r3, r1
 80114d8:	60a2      	str	r2, [r4, #8]
 80114da:	6123      	str	r3, [r4, #16]
 80114dc:	7da0      	ldrb	r0, [r4, #22]
 80114de:	f080 0001 	eor.w	r0, r0, #1
 80114e2:	b002      	add	sp, #8
 80114e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114e8:	466b      	mov	r3, sp
 80114ea:	68a2      	ldr	r2, [r4, #8]
 80114ec:	cb03      	ldmia	r3!, {r0, r1}
 80114ee:	6010      	str	r0, [r2, #0]
 80114f0:	6051      	str	r1, [r2, #4]
 80114f2:	e7eb      	b.n	80114cc <ucdr_serialize_int64_t+0x10c>
 80114f4:	68a2      	ldr	r2, [r4, #8]
 80114f6:	6923      	ldr	r3, [r4, #16]
 80114f8:	7da0      	ldrb	r0, [r4, #22]
 80114fa:	1b92      	subs	r2, r2, r6
 80114fc:	1b9b      	subs	r3, r3, r6
 80114fe:	7567      	strb	r7, [r4, #21]
 8011500:	f080 0001 	eor.w	r0, r0, #1
 8011504:	60a2      	str	r2, [r4, #8]
 8011506:	6123      	str	r3, [r4, #16]
 8011508:	b002      	add	sp, #8
 801150a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801150e:	68a3      	ldr	r3, [r4, #8]
 8011510:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011514:	701a      	strb	r2, [r3, #0]
 8011516:	68a3      	ldr	r3, [r4, #8]
 8011518:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801151c:	701a      	strb	r2, [r3, #0]
 801151e:	68a3      	ldr	r3, [r4, #8]
 8011520:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011524:	701a      	strb	r2, [r3, #0]
 8011526:	68a3      	ldr	r3, [r4, #8]
 8011528:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801152c:	701a      	strb	r2, [r3, #0]
 801152e:	68a3      	ldr	r3, [r4, #8]
 8011530:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8011534:	701a      	strb	r2, [r3, #0]
 8011536:	68a3      	ldr	r3, [r4, #8]
 8011538:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801153c:	701a      	strb	r2, [r3, #0]
 801153e:	68a3      	ldr	r3, [r4, #8]
 8011540:	f89d 2000 	ldrb.w	r2, [sp]
 8011544:	701a      	strb	r2, [r3, #0]
 8011546:	e78a      	b.n	801145e <ucdr_serialize_int64_t+0x9e>
 8011548:	4628      	mov	r0, r5
 801154a:	466d      	mov	r5, sp
 801154c:	4632      	mov	r2, r6
 801154e:	4629      	mov	r1, r5
 8011550:	f00d facd 	bl	801eaee <memcpy>
 8011554:	4642      	mov	r2, r8
 8011556:	19a9      	adds	r1, r5, r6
 8011558:	68a0      	ldr	r0, [r4, #8]
 801155a:	f00d fac8 	bl	801eaee <memcpy>
 801155e:	e77e      	b.n	801145e <ucdr_serialize_int64_t+0x9e>

08011560 <ucdr_deserialize_int64_t>:
 8011560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011564:	4604      	mov	r4, r0
 8011566:	460d      	mov	r5, r1
 8011568:	2108      	movs	r1, #8
 801156a:	f000 fb77 	bl	8011c5c <ucdr_buffer_alignment>
 801156e:	4601      	mov	r1, r0
 8011570:	4620      	mov	r0, r4
 8011572:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011576:	f000 fbb9 	bl	8011cec <ucdr_advance_buffer>
 801157a:	2108      	movs	r1, #8
 801157c:	4620      	mov	r0, r4
 801157e:	f000 fb0d 	bl	8011b9c <ucdr_check_buffer_available_for>
 8011582:	2800      	cmp	r0, #0
 8011584:	d151      	bne.n	801162a <ucdr_deserialize_int64_t+0xca>
 8011586:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801158a:	42be      	cmp	r6, r7
 801158c:	d948      	bls.n	8011620 <ucdr_deserialize_int64_t+0xc0>
 801158e:	6923      	ldr	r3, [r4, #16]
 8011590:	4620      	mov	r0, r4
 8011592:	60a6      	str	r6, [r4, #8]
 8011594:	1bf6      	subs	r6, r6, r7
 8011596:	4433      	add	r3, r6
 8011598:	f1c6 0908 	rsb	r9, r6, #8
 801159c:	6123      	str	r3, [r4, #16]
 801159e:	4649      	mov	r1, r9
 80115a0:	f000 fb08 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 80115a4:	2800      	cmp	r0, #0
 80115a6:	d06d      	beq.n	8011684 <ucdr_deserialize_int64_t+0x124>
 80115a8:	7d23      	ldrb	r3, [r4, #20]
 80115aa:	2b01      	cmp	r3, #1
 80115ac:	f000 8093 	beq.w	80116d6 <ucdr_deserialize_int64_t+0x176>
 80115b0:	79fb      	ldrb	r3, [r7, #7]
 80115b2:	702b      	strb	r3, [r5, #0]
 80115b4:	2e00      	cmp	r6, #0
 80115b6:	d072      	beq.n	801169e <ucdr_deserialize_int64_t+0x13e>
 80115b8:	79bb      	ldrb	r3, [r7, #6]
 80115ba:	2e01      	cmp	r6, #1
 80115bc:	706b      	strb	r3, [r5, #1]
 80115be:	f105 0302 	add.w	r3, r5, #2
 80115c2:	d070      	beq.n	80116a6 <ucdr_deserialize_int64_t+0x146>
 80115c4:	797b      	ldrb	r3, [r7, #5]
 80115c6:	2e02      	cmp	r6, #2
 80115c8:	70ab      	strb	r3, [r5, #2]
 80115ca:	f105 0303 	add.w	r3, r5, #3
 80115ce:	d06e      	beq.n	80116ae <ucdr_deserialize_int64_t+0x14e>
 80115d0:	793b      	ldrb	r3, [r7, #4]
 80115d2:	2e03      	cmp	r6, #3
 80115d4:	70eb      	strb	r3, [r5, #3]
 80115d6:	f105 0304 	add.w	r3, r5, #4
 80115da:	d06c      	beq.n	80116b6 <ucdr_deserialize_int64_t+0x156>
 80115dc:	78fb      	ldrb	r3, [r7, #3]
 80115de:	2e04      	cmp	r6, #4
 80115e0:	712b      	strb	r3, [r5, #4]
 80115e2:	f105 0305 	add.w	r3, r5, #5
 80115e6:	d06a      	beq.n	80116be <ucdr_deserialize_int64_t+0x15e>
 80115e8:	78bb      	ldrb	r3, [r7, #2]
 80115ea:	2e05      	cmp	r6, #5
 80115ec:	716b      	strb	r3, [r5, #5]
 80115ee:	f105 0306 	add.w	r3, r5, #6
 80115f2:	d068      	beq.n	80116c6 <ucdr_deserialize_int64_t+0x166>
 80115f4:	787b      	ldrb	r3, [r7, #1]
 80115f6:	2e06      	cmp	r6, #6
 80115f8:	71ab      	strb	r3, [r5, #6]
 80115fa:	f105 0307 	add.w	r3, r5, #7
 80115fe:	d066      	beq.n	80116ce <ucdr_deserialize_int64_t+0x16e>
 8011600:	783b      	ldrb	r3, [r7, #0]
 8011602:	71eb      	strb	r3, [r5, #7]
 8011604:	6923      	ldr	r3, [r4, #16]
 8011606:	2108      	movs	r1, #8
 8011608:	68a2      	ldr	r2, [r4, #8]
 801160a:	3308      	adds	r3, #8
 801160c:	7da0      	ldrb	r0, [r4, #22]
 801160e:	444a      	add	r2, r9
 8011610:	7561      	strb	r1, [r4, #21]
 8011612:	1b9e      	subs	r6, r3, r6
 8011614:	f080 0001 	eor.w	r0, r0, #1
 8011618:	60a2      	str	r2, [r4, #8]
 801161a:	6126      	str	r6, [r4, #16]
 801161c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011620:	2108      	movs	r1, #8
 8011622:	4620      	mov	r0, r4
 8011624:	f000 fac6 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 8011628:	b310      	cbz	r0, 8011670 <ucdr_deserialize_int64_t+0x110>
 801162a:	7d23      	ldrb	r3, [r4, #20]
 801162c:	2b01      	cmp	r3, #1
 801162e:	68a3      	ldr	r3, [r4, #8]
 8011630:	d023      	beq.n	801167a <ucdr_deserialize_int64_t+0x11a>
 8011632:	79db      	ldrb	r3, [r3, #7]
 8011634:	702b      	strb	r3, [r5, #0]
 8011636:	68a3      	ldr	r3, [r4, #8]
 8011638:	799b      	ldrb	r3, [r3, #6]
 801163a:	706b      	strb	r3, [r5, #1]
 801163c:	68a3      	ldr	r3, [r4, #8]
 801163e:	795b      	ldrb	r3, [r3, #5]
 8011640:	70ab      	strb	r3, [r5, #2]
 8011642:	68a3      	ldr	r3, [r4, #8]
 8011644:	791b      	ldrb	r3, [r3, #4]
 8011646:	70eb      	strb	r3, [r5, #3]
 8011648:	68a3      	ldr	r3, [r4, #8]
 801164a:	78db      	ldrb	r3, [r3, #3]
 801164c:	712b      	strb	r3, [r5, #4]
 801164e:	68a3      	ldr	r3, [r4, #8]
 8011650:	789b      	ldrb	r3, [r3, #2]
 8011652:	716b      	strb	r3, [r5, #5]
 8011654:	68a3      	ldr	r3, [r4, #8]
 8011656:	785b      	ldrb	r3, [r3, #1]
 8011658:	71ab      	strb	r3, [r5, #6]
 801165a:	68a3      	ldr	r3, [r4, #8]
 801165c:	781b      	ldrb	r3, [r3, #0]
 801165e:	71eb      	strb	r3, [r5, #7]
 8011660:	2108      	movs	r1, #8
 8011662:	68a2      	ldr	r2, [r4, #8]
 8011664:	6923      	ldr	r3, [r4, #16]
 8011666:	440a      	add	r2, r1
 8011668:	7561      	strb	r1, [r4, #21]
 801166a:	440b      	add	r3, r1
 801166c:	60a2      	str	r2, [r4, #8]
 801166e:	6123      	str	r3, [r4, #16]
 8011670:	7da0      	ldrb	r0, [r4, #22]
 8011672:	f080 0001 	eor.w	r0, r0, #1
 8011676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801167a:	681a      	ldr	r2, [r3, #0]
 801167c:	685b      	ldr	r3, [r3, #4]
 801167e:	602a      	str	r2, [r5, #0]
 8011680:	606b      	str	r3, [r5, #4]
 8011682:	e7ed      	b.n	8011660 <ucdr_deserialize_int64_t+0x100>
 8011684:	68a2      	ldr	r2, [r4, #8]
 8011686:	6923      	ldr	r3, [r4, #16]
 8011688:	1b92      	subs	r2, r2, r6
 801168a:	7da0      	ldrb	r0, [r4, #22]
 801168c:	1b9b      	subs	r3, r3, r6
 801168e:	f884 8015 	strb.w	r8, [r4, #21]
 8011692:	f080 0001 	eor.w	r0, r0, #1
 8011696:	60a2      	str	r2, [r4, #8]
 8011698:	6123      	str	r3, [r4, #16]
 801169a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801169e:	68a3      	ldr	r3, [r4, #8]
 80116a0:	799b      	ldrb	r3, [r3, #6]
 80116a2:	706b      	strb	r3, [r5, #1]
 80116a4:	1cab      	adds	r3, r5, #2
 80116a6:	68a2      	ldr	r2, [r4, #8]
 80116a8:	7952      	ldrb	r2, [r2, #5]
 80116aa:	f803 2b01 	strb.w	r2, [r3], #1
 80116ae:	68a2      	ldr	r2, [r4, #8]
 80116b0:	7912      	ldrb	r2, [r2, #4]
 80116b2:	f803 2b01 	strb.w	r2, [r3], #1
 80116b6:	68a2      	ldr	r2, [r4, #8]
 80116b8:	78d2      	ldrb	r2, [r2, #3]
 80116ba:	f803 2b01 	strb.w	r2, [r3], #1
 80116be:	68a2      	ldr	r2, [r4, #8]
 80116c0:	7892      	ldrb	r2, [r2, #2]
 80116c2:	f803 2b01 	strb.w	r2, [r3], #1
 80116c6:	68a2      	ldr	r2, [r4, #8]
 80116c8:	7852      	ldrb	r2, [r2, #1]
 80116ca:	f803 2b01 	strb.w	r2, [r3], #1
 80116ce:	68a2      	ldr	r2, [r4, #8]
 80116d0:	7812      	ldrb	r2, [r2, #0]
 80116d2:	701a      	strb	r2, [r3, #0]
 80116d4:	e796      	b.n	8011604 <ucdr_deserialize_int64_t+0xa4>
 80116d6:	4639      	mov	r1, r7
 80116d8:	4632      	mov	r2, r6
 80116da:	4628      	mov	r0, r5
 80116dc:	f00d fa07 	bl	801eaee <memcpy>
 80116e0:	464a      	mov	r2, r9
 80116e2:	19a8      	adds	r0, r5, r6
 80116e4:	68a1      	ldr	r1, [r4, #8]
 80116e6:	f00d fa02 	bl	801eaee <memcpy>
 80116ea:	e78b      	b.n	8011604 <ucdr_deserialize_int64_t+0xa4>

080116ec <ucdr_serialize_float>:
 80116ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116f0:	4604      	mov	r4, r0
 80116f2:	b082      	sub	sp, #8
 80116f4:	2104      	movs	r1, #4
 80116f6:	ed8d 0a01 	vstr	s0, [sp, #4]
 80116fa:	f000 faaf 	bl	8011c5c <ucdr_buffer_alignment>
 80116fe:	4601      	mov	r1, r0
 8011700:	4620      	mov	r0, r4
 8011702:	7d67      	ldrb	r7, [r4, #21]
 8011704:	f000 faf2 	bl	8011cec <ucdr_advance_buffer>
 8011708:	2104      	movs	r1, #4
 801170a:	4620      	mov	r0, r4
 801170c:	f000 fa46 	bl	8011b9c <ucdr_check_buffer_available_for>
 8011710:	2800      	cmp	r0, #0
 8011712:	d139      	bne.n	8011788 <ucdr_serialize_float+0x9c>
 8011714:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011718:	42ab      	cmp	r3, r5
 801171a:	d930      	bls.n	801177e <ucdr_serialize_float+0x92>
 801171c:	1b5e      	subs	r6, r3, r5
 801171e:	60a3      	str	r3, [r4, #8]
 8011720:	6923      	ldr	r3, [r4, #16]
 8011722:	4620      	mov	r0, r4
 8011724:	f1c6 0804 	rsb	r8, r6, #4
 8011728:	4433      	add	r3, r6
 801172a:	4641      	mov	r1, r8
 801172c:	6123      	str	r3, [r4, #16]
 801172e:	f000 fa41 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 8011732:	2800      	cmp	r0, #0
 8011734:	d04c      	beq.n	80117d0 <ucdr_serialize_float+0xe4>
 8011736:	7d23      	ldrb	r3, [r4, #20]
 8011738:	2b01      	cmp	r3, #1
 801173a:	d063      	beq.n	8011804 <ucdr_serialize_float+0x118>
 801173c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011740:	702b      	strb	r3, [r5, #0]
 8011742:	2e00      	cmp	r6, #0
 8011744:	d051      	beq.n	80117ea <ucdr_serialize_float+0xfe>
 8011746:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801174a:	2e01      	cmp	r6, #1
 801174c:	706b      	strb	r3, [r5, #1]
 801174e:	d050      	beq.n	80117f2 <ucdr_serialize_float+0x106>
 8011750:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011754:	2e02      	cmp	r6, #2
 8011756:	70ab      	strb	r3, [r5, #2]
 8011758:	d04f      	beq.n	80117fa <ucdr_serialize_float+0x10e>
 801175a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801175e:	70eb      	strb	r3, [r5, #3]
 8011760:	6923      	ldr	r3, [r4, #16]
 8011762:	2104      	movs	r1, #4
 8011764:	68a2      	ldr	r2, [r4, #8]
 8011766:	3304      	adds	r3, #4
 8011768:	7da0      	ldrb	r0, [r4, #22]
 801176a:	4442      	add	r2, r8
 801176c:	7561      	strb	r1, [r4, #21]
 801176e:	1b9e      	subs	r6, r3, r6
 8011770:	f080 0001 	eor.w	r0, r0, #1
 8011774:	60a2      	str	r2, [r4, #8]
 8011776:	6126      	str	r6, [r4, #16]
 8011778:	b002      	add	sp, #8
 801177a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801177e:	2104      	movs	r1, #4
 8011780:	4620      	mov	r0, r4
 8011782:	f000 fa17 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 8011786:	b1d0      	cbz	r0, 80117be <ucdr_serialize_float+0xd2>
 8011788:	7d23      	ldrb	r3, [r4, #20]
 801178a:	2b01      	cmp	r3, #1
 801178c:	68a3      	ldr	r3, [r4, #8]
 801178e:	d01c      	beq.n	80117ca <ucdr_serialize_float+0xde>
 8011790:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011794:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011798:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801179c:	7018      	strb	r0, [r3, #0]
 801179e:	68a3      	ldr	r3, [r4, #8]
 80117a0:	705a      	strb	r2, [r3, #1]
 80117a2:	68a3      	ldr	r3, [r4, #8]
 80117a4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80117a8:	7099      	strb	r1, [r3, #2]
 80117aa:	68a3      	ldr	r3, [r4, #8]
 80117ac:	70da      	strb	r2, [r3, #3]
 80117ae:	2104      	movs	r1, #4
 80117b0:	68a2      	ldr	r2, [r4, #8]
 80117b2:	6923      	ldr	r3, [r4, #16]
 80117b4:	440a      	add	r2, r1
 80117b6:	7561      	strb	r1, [r4, #21]
 80117b8:	440b      	add	r3, r1
 80117ba:	60a2      	str	r2, [r4, #8]
 80117bc:	6123      	str	r3, [r4, #16]
 80117be:	7da0      	ldrb	r0, [r4, #22]
 80117c0:	f080 0001 	eor.w	r0, r0, #1
 80117c4:	b002      	add	sp, #8
 80117c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117ca:	9a01      	ldr	r2, [sp, #4]
 80117cc:	601a      	str	r2, [r3, #0]
 80117ce:	e7ee      	b.n	80117ae <ucdr_serialize_float+0xc2>
 80117d0:	68a2      	ldr	r2, [r4, #8]
 80117d2:	6923      	ldr	r3, [r4, #16]
 80117d4:	7da0      	ldrb	r0, [r4, #22]
 80117d6:	1b92      	subs	r2, r2, r6
 80117d8:	1b9b      	subs	r3, r3, r6
 80117da:	7567      	strb	r7, [r4, #21]
 80117dc:	f080 0001 	eor.w	r0, r0, #1
 80117e0:	60a2      	str	r2, [r4, #8]
 80117e2:	6123      	str	r3, [r4, #16]
 80117e4:	b002      	add	sp, #8
 80117e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117ea:	68a3      	ldr	r3, [r4, #8]
 80117ec:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80117f0:	701a      	strb	r2, [r3, #0]
 80117f2:	68a3      	ldr	r3, [r4, #8]
 80117f4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80117f8:	701a      	strb	r2, [r3, #0]
 80117fa:	68a3      	ldr	r3, [r4, #8]
 80117fc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011800:	701a      	strb	r2, [r3, #0]
 8011802:	e7ad      	b.n	8011760 <ucdr_serialize_float+0x74>
 8011804:	4628      	mov	r0, r5
 8011806:	ad01      	add	r5, sp, #4
 8011808:	4632      	mov	r2, r6
 801180a:	4629      	mov	r1, r5
 801180c:	f00d f96f 	bl	801eaee <memcpy>
 8011810:	4642      	mov	r2, r8
 8011812:	19a9      	adds	r1, r5, r6
 8011814:	68a0      	ldr	r0, [r4, #8]
 8011816:	f00d f96a 	bl	801eaee <memcpy>
 801181a:	e7a1      	b.n	8011760 <ucdr_serialize_float+0x74>

0801181c <ucdr_serialize_endian_float>:
 801181c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011820:	4604      	mov	r4, r0
 8011822:	b083      	sub	sp, #12
 8011824:	460d      	mov	r5, r1
 8011826:	2104      	movs	r1, #4
 8011828:	ed8d 0a01 	vstr	s0, [sp, #4]
 801182c:	f000 fa16 	bl	8011c5c <ucdr_buffer_alignment>
 8011830:	4601      	mov	r1, r0
 8011832:	4620      	mov	r0, r4
 8011834:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011838:	f000 fa58 	bl	8011cec <ucdr_advance_buffer>
 801183c:	2104      	movs	r1, #4
 801183e:	4620      	mov	r0, r4
 8011840:	f000 f9ac 	bl	8011b9c <ucdr_check_buffer_available_for>
 8011844:	2800      	cmp	r0, #0
 8011846:	d138      	bne.n	80118ba <ucdr_serialize_endian_float+0x9e>
 8011848:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801184c:	42b7      	cmp	r7, r6
 801184e:	d92f      	bls.n	80118b0 <ucdr_serialize_endian_float+0x94>
 8011850:	6923      	ldr	r3, [r4, #16]
 8011852:	4620      	mov	r0, r4
 8011854:	60a7      	str	r7, [r4, #8]
 8011856:	1bbf      	subs	r7, r7, r6
 8011858:	443b      	add	r3, r7
 801185a:	f1c7 0904 	rsb	r9, r7, #4
 801185e:	6123      	str	r3, [r4, #16]
 8011860:	4649      	mov	r1, r9
 8011862:	f000 f9a7 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 8011866:	2800      	cmp	r0, #0
 8011868:	d04a      	beq.n	8011900 <ucdr_serialize_endian_float+0xe4>
 801186a:	2d01      	cmp	r5, #1
 801186c:	d063      	beq.n	8011936 <ucdr_serialize_endian_float+0x11a>
 801186e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011872:	7033      	strb	r3, [r6, #0]
 8011874:	2f00      	cmp	r7, #0
 8011876:	d051      	beq.n	801191c <ucdr_serialize_endian_float+0x100>
 8011878:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801187c:	2f01      	cmp	r7, #1
 801187e:	7073      	strb	r3, [r6, #1]
 8011880:	d050      	beq.n	8011924 <ucdr_serialize_endian_float+0x108>
 8011882:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011886:	2f02      	cmp	r7, #2
 8011888:	70b3      	strb	r3, [r6, #2]
 801188a:	d04f      	beq.n	801192c <ucdr_serialize_endian_float+0x110>
 801188c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011890:	70f3      	strb	r3, [r6, #3]
 8011892:	6923      	ldr	r3, [r4, #16]
 8011894:	2104      	movs	r1, #4
 8011896:	68a2      	ldr	r2, [r4, #8]
 8011898:	7da0      	ldrb	r0, [r4, #22]
 801189a:	3304      	adds	r3, #4
 801189c:	444a      	add	r2, r9
 801189e:	7561      	strb	r1, [r4, #21]
 80118a0:	1bdb      	subs	r3, r3, r7
 80118a2:	f080 0001 	eor.w	r0, r0, #1
 80118a6:	60a2      	str	r2, [r4, #8]
 80118a8:	6123      	str	r3, [r4, #16]
 80118aa:	b003      	add	sp, #12
 80118ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80118b0:	2104      	movs	r1, #4
 80118b2:	4620      	mov	r0, r4
 80118b4:	f000 f97e 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 80118b8:	b1c8      	cbz	r0, 80118ee <ucdr_serialize_endian_float+0xd2>
 80118ba:	2d01      	cmp	r5, #1
 80118bc:	68a3      	ldr	r3, [r4, #8]
 80118be:	d01c      	beq.n	80118fa <ucdr_serialize_endian_float+0xde>
 80118c0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80118c4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80118c8:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80118cc:	7018      	strb	r0, [r3, #0]
 80118ce:	68a3      	ldr	r3, [r4, #8]
 80118d0:	705a      	strb	r2, [r3, #1]
 80118d2:	68a3      	ldr	r3, [r4, #8]
 80118d4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80118d8:	7099      	strb	r1, [r3, #2]
 80118da:	68a3      	ldr	r3, [r4, #8]
 80118dc:	70da      	strb	r2, [r3, #3]
 80118de:	2104      	movs	r1, #4
 80118e0:	68a2      	ldr	r2, [r4, #8]
 80118e2:	6923      	ldr	r3, [r4, #16]
 80118e4:	440a      	add	r2, r1
 80118e6:	7561      	strb	r1, [r4, #21]
 80118e8:	440b      	add	r3, r1
 80118ea:	60a2      	str	r2, [r4, #8]
 80118ec:	6123      	str	r3, [r4, #16]
 80118ee:	7da0      	ldrb	r0, [r4, #22]
 80118f0:	f080 0001 	eor.w	r0, r0, #1
 80118f4:	b003      	add	sp, #12
 80118f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80118fa:	9a01      	ldr	r2, [sp, #4]
 80118fc:	601a      	str	r2, [r3, #0]
 80118fe:	e7ee      	b.n	80118de <ucdr_serialize_endian_float+0xc2>
 8011900:	68a2      	ldr	r2, [r4, #8]
 8011902:	6923      	ldr	r3, [r4, #16]
 8011904:	7da0      	ldrb	r0, [r4, #22]
 8011906:	1bd2      	subs	r2, r2, r7
 8011908:	1bdb      	subs	r3, r3, r7
 801190a:	f884 8015 	strb.w	r8, [r4, #21]
 801190e:	f080 0001 	eor.w	r0, r0, #1
 8011912:	60a2      	str	r2, [r4, #8]
 8011914:	6123      	str	r3, [r4, #16]
 8011916:	b003      	add	sp, #12
 8011918:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801191c:	68a3      	ldr	r3, [r4, #8]
 801191e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011922:	701a      	strb	r2, [r3, #0]
 8011924:	68a3      	ldr	r3, [r4, #8]
 8011926:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801192a:	701a      	strb	r2, [r3, #0]
 801192c:	68a3      	ldr	r3, [r4, #8]
 801192e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011932:	701a      	strb	r2, [r3, #0]
 8011934:	e7ad      	b.n	8011892 <ucdr_serialize_endian_float+0x76>
 8011936:	ad01      	add	r5, sp, #4
 8011938:	463a      	mov	r2, r7
 801193a:	4630      	mov	r0, r6
 801193c:	4629      	mov	r1, r5
 801193e:	f00d f8d6 	bl	801eaee <memcpy>
 8011942:	464a      	mov	r2, r9
 8011944:	19e9      	adds	r1, r5, r7
 8011946:	68a0      	ldr	r0, [r4, #8]
 8011948:	f00d f8d1 	bl	801eaee <memcpy>
 801194c:	e7a1      	b.n	8011892 <ucdr_serialize_endian_float+0x76>
 801194e:	bf00      	nop

08011950 <ucdr_deserialize_float>:
 8011950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011954:	4604      	mov	r4, r0
 8011956:	460d      	mov	r5, r1
 8011958:	2104      	movs	r1, #4
 801195a:	f000 f97f 	bl	8011c5c <ucdr_buffer_alignment>
 801195e:	4601      	mov	r1, r0
 8011960:	4620      	mov	r0, r4
 8011962:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011966:	f000 f9c1 	bl	8011cec <ucdr_advance_buffer>
 801196a:	2104      	movs	r1, #4
 801196c:	4620      	mov	r0, r4
 801196e:	f000 f915 	bl	8011b9c <ucdr_check_buffer_available_for>
 8011972:	2800      	cmp	r0, #0
 8011974:	d138      	bne.n	80119e8 <ucdr_deserialize_float+0x98>
 8011976:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801197a:	42b7      	cmp	r7, r6
 801197c:	d92f      	bls.n	80119de <ucdr_deserialize_float+0x8e>
 801197e:	6923      	ldr	r3, [r4, #16]
 8011980:	4620      	mov	r0, r4
 8011982:	60a7      	str	r7, [r4, #8]
 8011984:	1bbf      	subs	r7, r7, r6
 8011986:	443b      	add	r3, r7
 8011988:	f1c7 0904 	rsb	r9, r7, #4
 801198c:	6123      	str	r3, [r4, #16]
 801198e:	4649      	mov	r1, r9
 8011990:	f000 f910 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 8011994:	2800      	cmp	r0, #0
 8011996:	d046      	beq.n	8011a26 <ucdr_deserialize_float+0xd6>
 8011998:	7d23      	ldrb	r3, [r4, #20]
 801199a:	2b01      	cmp	r3, #1
 801199c:	d05c      	beq.n	8011a58 <ucdr_deserialize_float+0x108>
 801199e:	78f3      	ldrb	r3, [r6, #3]
 80119a0:	702b      	strb	r3, [r5, #0]
 80119a2:	2f00      	cmp	r7, #0
 80119a4:	d04c      	beq.n	8011a40 <ucdr_deserialize_float+0xf0>
 80119a6:	78b3      	ldrb	r3, [r6, #2]
 80119a8:	2f01      	cmp	r7, #1
 80119aa:	706b      	strb	r3, [r5, #1]
 80119ac:	f105 0302 	add.w	r3, r5, #2
 80119b0:	d04a      	beq.n	8011a48 <ucdr_deserialize_float+0xf8>
 80119b2:	7873      	ldrb	r3, [r6, #1]
 80119b4:	2f02      	cmp	r7, #2
 80119b6:	70ab      	strb	r3, [r5, #2]
 80119b8:	f105 0303 	add.w	r3, r5, #3
 80119bc:	d048      	beq.n	8011a50 <ucdr_deserialize_float+0x100>
 80119be:	7833      	ldrb	r3, [r6, #0]
 80119c0:	70eb      	strb	r3, [r5, #3]
 80119c2:	6923      	ldr	r3, [r4, #16]
 80119c4:	2104      	movs	r1, #4
 80119c6:	68a2      	ldr	r2, [r4, #8]
 80119c8:	3304      	adds	r3, #4
 80119ca:	7da0      	ldrb	r0, [r4, #22]
 80119cc:	444a      	add	r2, r9
 80119ce:	7561      	strb	r1, [r4, #21]
 80119d0:	1bdb      	subs	r3, r3, r7
 80119d2:	f080 0001 	eor.w	r0, r0, #1
 80119d6:	60a2      	str	r2, [r4, #8]
 80119d8:	6123      	str	r3, [r4, #16]
 80119da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119de:	2104      	movs	r1, #4
 80119e0:	4620      	mov	r0, r4
 80119e2:	f000 f8e7 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 80119e6:	b1b0      	cbz	r0, 8011a16 <ucdr_deserialize_float+0xc6>
 80119e8:	7d23      	ldrb	r3, [r4, #20]
 80119ea:	2b01      	cmp	r3, #1
 80119ec:	68a3      	ldr	r3, [r4, #8]
 80119ee:	d017      	beq.n	8011a20 <ucdr_deserialize_float+0xd0>
 80119f0:	78db      	ldrb	r3, [r3, #3]
 80119f2:	702b      	strb	r3, [r5, #0]
 80119f4:	68a3      	ldr	r3, [r4, #8]
 80119f6:	789b      	ldrb	r3, [r3, #2]
 80119f8:	706b      	strb	r3, [r5, #1]
 80119fa:	68a3      	ldr	r3, [r4, #8]
 80119fc:	785b      	ldrb	r3, [r3, #1]
 80119fe:	70ab      	strb	r3, [r5, #2]
 8011a00:	68a3      	ldr	r3, [r4, #8]
 8011a02:	781b      	ldrb	r3, [r3, #0]
 8011a04:	70eb      	strb	r3, [r5, #3]
 8011a06:	2104      	movs	r1, #4
 8011a08:	68a2      	ldr	r2, [r4, #8]
 8011a0a:	6923      	ldr	r3, [r4, #16]
 8011a0c:	440a      	add	r2, r1
 8011a0e:	7561      	strb	r1, [r4, #21]
 8011a10:	440b      	add	r3, r1
 8011a12:	60a2      	str	r2, [r4, #8]
 8011a14:	6123      	str	r3, [r4, #16]
 8011a16:	7da0      	ldrb	r0, [r4, #22]
 8011a18:	f080 0001 	eor.w	r0, r0, #1
 8011a1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	602b      	str	r3, [r5, #0]
 8011a24:	e7ef      	b.n	8011a06 <ucdr_deserialize_float+0xb6>
 8011a26:	68a2      	ldr	r2, [r4, #8]
 8011a28:	6923      	ldr	r3, [r4, #16]
 8011a2a:	1bd2      	subs	r2, r2, r7
 8011a2c:	7da0      	ldrb	r0, [r4, #22]
 8011a2e:	1bdb      	subs	r3, r3, r7
 8011a30:	f884 8015 	strb.w	r8, [r4, #21]
 8011a34:	f080 0001 	eor.w	r0, r0, #1
 8011a38:	60a2      	str	r2, [r4, #8]
 8011a3a:	6123      	str	r3, [r4, #16]
 8011a3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a40:	68a3      	ldr	r3, [r4, #8]
 8011a42:	789b      	ldrb	r3, [r3, #2]
 8011a44:	706b      	strb	r3, [r5, #1]
 8011a46:	1cab      	adds	r3, r5, #2
 8011a48:	68a2      	ldr	r2, [r4, #8]
 8011a4a:	7852      	ldrb	r2, [r2, #1]
 8011a4c:	f803 2b01 	strb.w	r2, [r3], #1
 8011a50:	68a2      	ldr	r2, [r4, #8]
 8011a52:	7812      	ldrb	r2, [r2, #0]
 8011a54:	701a      	strb	r2, [r3, #0]
 8011a56:	e7b4      	b.n	80119c2 <ucdr_deserialize_float+0x72>
 8011a58:	4631      	mov	r1, r6
 8011a5a:	463a      	mov	r2, r7
 8011a5c:	4628      	mov	r0, r5
 8011a5e:	f00d f846 	bl	801eaee <memcpy>
 8011a62:	464a      	mov	r2, r9
 8011a64:	19e8      	adds	r0, r5, r7
 8011a66:	68a1      	ldr	r1, [r4, #8]
 8011a68:	f00d f841 	bl	801eaee <memcpy>
 8011a6c:	e7a9      	b.n	80119c2 <ucdr_deserialize_float+0x72>
 8011a6e:	bf00      	nop

08011a70 <ucdr_deserialize_endian_float>:
 8011a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a74:	4604      	mov	r4, r0
 8011a76:	460e      	mov	r6, r1
 8011a78:	2104      	movs	r1, #4
 8011a7a:	4615      	mov	r5, r2
 8011a7c:	f000 f8ee 	bl	8011c5c <ucdr_buffer_alignment>
 8011a80:	4601      	mov	r1, r0
 8011a82:	4620      	mov	r0, r4
 8011a84:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011a88:	f000 f930 	bl	8011cec <ucdr_advance_buffer>
 8011a8c:	2104      	movs	r1, #4
 8011a8e:	4620      	mov	r0, r4
 8011a90:	f000 f884 	bl	8011b9c <ucdr_check_buffer_available_for>
 8011a94:	2800      	cmp	r0, #0
 8011a96:	d13c      	bne.n	8011b12 <ucdr_deserialize_endian_float+0xa2>
 8011a98:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8011a9c:	42bb      	cmp	r3, r7
 8011a9e:	d933      	bls.n	8011b08 <ucdr_deserialize_endian_float+0x98>
 8011aa0:	eba3 0907 	sub.w	r9, r3, r7
 8011aa4:	60a3      	str	r3, [r4, #8]
 8011aa6:	6923      	ldr	r3, [r4, #16]
 8011aa8:	4620      	mov	r0, r4
 8011aaa:	f1c9 0a04 	rsb	sl, r9, #4
 8011aae:	444b      	add	r3, r9
 8011ab0:	4651      	mov	r1, sl
 8011ab2:	6123      	str	r3, [r4, #16]
 8011ab4:	f000 f87e 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 8011ab8:	2800      	cmp	r0, #0
 8011aba:	d048      	beq.n	8011b4e <ucdr_deserialize_endian_float+0xde>
 8011abc:	2e01      	cmp	r6, #1
 8011abe:	d061      	beq.n	8011b84 <ucdr_deserialize_endian_float+0x114>
 8011ac0:	78fb      	ldrb	r3, [r7, #3]
 8011ac2:	702b      	strb	r3, [r5, #0]
 8011ac4:	f1b9 0f00 	cmp.w	r9, #0
 8011ac8:	d050      	beq.n	8011b6c <ucdr_deserialize_endian_float+0xfc>
 8011aca:	78bb      	ldrb	r3, [r7, #2]
 8011acc:	f1b9 0f01 	cmp.w	r9, #1
 8011ad0:	706b      	strb	r3, [r5, #1]
 8011ad2:	f105 0302 	add.w	r3, r5, #2
 8011ad6:	d04d      	beq.n	8011b74 <ucdr_deserialize_endian_float+0x104>
 8011ad8:	787b      	ldrb	r3, [r7, #1]
 8011ada:	f1b9 0f02 	cmp.w	r9, #2
 8011ade:	70ab      	strb	r3, [r5, #2]
 8011ae0:	f105 0303 	add.w	r3, r5, #3
 8011ae4:	d04a      	beq.n	8011b7c <ucdr_deserialize_endian_float+0x10c>
 8011ae6:	783b      	ldrb	r3, [r7, #0]
 8011ae8:	70eb      	strb	r3, [r5, #3]
 8011aea:	6923      	ldr	r3, [r4, #16]
 8011aec:	2104      	movs	r1, #4
 8011aee:	68a2      	ldr	r2, [r4, #8]
 8011af0:	3304      	adds	r3, #4
 8011af2:	7da0      	ldrb	r0, [r4, #22]
 8011af4:	4452      	add	r2, sl
 8011af6:	7561      	strb	r1, [r4, #21]
 8011af8:	eba3 0309 	sub.w	r3, r3, r9
 8011afc:	f080 0001 	eor.w	r0, r0, #1
 8011b00:	60a2      	str	r2, [r4, #8]
 8011b02:	6123      	str	r3, [r4, #16]
 8011b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b08:	2104      	movs	r1, #4
 8011b0a:	4620      	mov	r0, r4
 8011b0c:	f000 f852 	bl	8011bb4 <ucdr_check_final_buffer_behavior>
 8011b10:	b1a8      	cbz	r0, 8011b3e <ucdr_deserialize_endian_float+0xce>
 8011b12:	2e01      	cmp	r6, #1
 8011b14:	68a3      	ldr	r3, [r4, #8]
 8011b16:	d017      	beq.n	8011b48 <ucdr_deserialize_endian_float+0xd8>
 8011b18:	78db      	ldrb	r3, [r3, #3]
 8011b1a:	702b      	strb	r3, [r5, #0]
 8011b1c:	68a3      	ldr	r3, [r4, #8]
 8011b1e:	789b      	ldrb	r3, [r3, #2]
 8011b20:	706b      	strb	r3, [r5, #1]
 8011b22:	68a3      	ldr	r3, [r4, #8]
 8011b24:	785b      	ldrb	r3, [r3, #1]
 8011b26:	70ab      	strb	r3, [r5, #2]
 8011b28:	68a3      	ldr	r3, [r4, #8]
 8011b2a:	781b      	ldrb	r3, [r3, #0]
 8011b2c:	70eb      	strb	r3, [r5, #3]
 8011b2e:	2104      	movs	r1, #4
 8011b30:	68a2      	ldr	r2, [r4, #8]
 8011b32:	6923      	ldr	r3, [r4, #16]
 8011b34:	440a      	add	r2, r1
 8011b36:	7561      	strb	r1, [r4, #21]
 8011b38:	440b      	add	r3, r1
 8011b3a:	60a2      	str	r2, [r4, #8]
 8011b3c:	6123      	str	r3, [r4, #16]
 8011b3e:	7da0      	ldrb	r0, [r4, #22]
 8011b40:	f080 0001 	eor.w	r0, r0, #1
 8011b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	602b      	str	r3, [r5, #0]
 8011b4c:	e7ef      	b.n	8011b2e <ucdr_deserialize_endian_float+0xbe>
 8011b4e:	68a2      	ldr	r2, [r4, #8]
 8011b50:	6923      	ldr	r3, [r4, #16]
 8011b52:	eba2 0209 	sub.w	r2, r2, r9
 8011b56:	7da0      	ldrb	r0, [r4, #22]
 8011b58:	eba3 0309 	sub.w	r3, r3, r9
 8011b5c:	f884 8015 	strb.w	r8, [r4, #21]
 8011b60:	f080 0001 	eor.w	r0, r0, #1
 8011b64:	60a2      	str	r2, [r4, #8]
 8011b66:	6123      	str	r3, [r4, #16]
 8011b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b6c:	68a3      	ldr	r3, [r4, #8]
 8011b6e:	789b      	ldrb	r3, [r3, #2]
 8011b70:	706b      	strb	r3, [r5, #1]
 8011b72:	1cab      	adds	r3, r5, #2
 8011b74:	68a2      	ldr	r2, [r4, #8]
 8011b76:	7852      	ldrb	r2, [r2, #1]
 8011b78:	f803 2b01 	strb.w	r2, [r3], #1
 8011b7c:	68a2      	ldr	r2, [r4, #8]
 8011b7e:	7812      	ldrb	r2, [r2, #0]
 8011b80:	701a      	strb	r2, [r3, #0]
 8011b82:	e7b2      	b.n	8011aea <ucdr_deserialize_endian_float+0x7a>
 8011b84:	4639      	mov	r1, r7
 8011b86:	464a      	mov	r2, r9
 8011b88:	4628      	mov	r0, r5
 8011b8a:	f00c ffb0 	bl	801eaee <memcpy>
 8011b8e:	4652      	mov	r2, sl
 8011b90:	eb05 0009 	add.w	r0, r5, r9
 8011b94:	68a1      	ldr	r1, [r4, #8]
 8011b96:	f00c ffaa 	bl	801eaee <memcpy>
 8011b9a:	e7a6      	b.n	8011aea <ucdr_deserialize_endian_float+0x7a>

08011b9c <ucdr_check_buffer_available_for>:
 8011b9c:	7d83      	ldrb	r3, [r0, #22]
 8011b9e:	b93b      	cbnz	r3, 8011bb0 <ucdr_check_buffer_available_for+0x14>
 8011ba0:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8011ba4:	4419      	add	r1, r3
 8011ba6:	4288      	cmp	r0, r1
 8011ba8:	bf34      	ite	cc
 8011baa:	2000      	movcc	r0, #0
 8011bac:	2001      	movcs	r0, #1
 8011bae:	4770      	bx	lr
 8011bb0:	2000      	movs	r0, #0
 8011bb2:	4770      	bx	lr

08011bb4 <ucdr_check_final_buffer_behavior>:
 8011bb4:	7d83      	ldrb	r3, [r0, #22]
 8011bb6:	b943      	cbnz	r3, 8011bca <ucdr_check_final_buffer_behavior+0x16>
 8011bb8:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8011bbc:	b510      	push	{r4, lr}
 8011bbe:	4291      	cmp	r1, r2
 8011bc0:	4604      	mov	r4, r0
 8011bc2:	d205      	bcs.n	8011bd0 <ucdr_check_final_buffer_behavior+0x1c>
 8011bc4:	2301      	movs	r3, #1
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	bd10      	pop	{r4, pc}
 8011bca:	2300      	movs	r3, #0
 8011bcc:	4618      	mov	r0, r3
 8011bce:	4770      	bx	lr
 8011bd0:	6982      	ldr	r2, [r0, #24]
 8011bd2:	b13a      	cbz	r2, 8011be4 <ucdr_check_final_buffer_behavior+0x30>
 8011bd4:	69c1      	ldr	r1, [r0, #28]
 8011bd6:	4790      	blx	r2
 8011bd8:	f080 0301 	eor.w	r3, r0, #1
 8011bdc:	75a0      	strb	r0, [r4, #22]
 8011bde:	b2db      	uxtb	r3, r3
 8011be0:	4618      	mov	r0, r3
 8011be2:	bd10      	pop	{r4, pc}
 8011be4:	2001      	movs	r0, #1
 8011be6:	75a0      	strb	r0, [r4, #22]
 8011be8:	e7fa      	b.n	8011be0 <ucdr_check_final_buffer_behavior+0x2c>
 8011bea:	bf00      	nop

08011bec <ucdr_set_on_full_buffer_callback>:
 8011bec:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8011bf0:	4770      	bx	lr
 8011bf2:	bf00      	nop

08011bf4 <ucdr_init_buffer_origin_offset_endian>:
 8011bf4:	b410      	push	{r4}
 8011bf6:	9c01      	ldr	r4, [sp, #4]
 8011bf8:	440a      	add	r2, r1
 8011bfa:	6001      	str	r1, [r0, #0]
 8011bfc:	6042      	str	r2, [r0, #4]
 8011bfe:	190a      	adds	r2, r1, r4
 8011c00:	441c      	add	r4, r3
 8011c02:	6082      	str	r2, [r0, #8]
 8011c04:	2200      	movs	r2, #0
 8011c06:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8011c0a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8011c0e:	7542      	strb	r2, [r0, #21]
 8011c10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c14:	7582      	strb	r2, [r0, #22]
 8011c16:	7503      	strb	r3, [r0, #20]
 8011c18:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8011c1c:	4770      	bx	lr
 8011c1e:	bf00      	nop

08011c20 <ucdr_init_buffer_origin_offset>:
 8011c20:	b510      	push	{r4, lr}
 8011c22:	b082      	sub	sp, #8
 8011c24:	9c04      	ldr	r4, [sp, #16]
 8011c26:	9400      	str	r4, [sp, #0]
 8011c28:	2401      	movs	r4, #1
 8011c2a:	9401      	str	r4, [sp, #4]
 8011c2c:	f7ff ffe2 	bl	8011bf4 <ucdr_init_buffer_origin_offset_endian>
 8011c30:	b002      	add	sp, #8
 8011c32:	bd10      	pop	{r4, pc}

08011c34 <ucdr_init_buffer_origin>:
 8011c34:	b510      	push	{r4, lr}
 8011c36:	2400      	movs	r4, #0
 8011c38:	b082      	sub	sp, #8
 8011c3a:	9400      	str	r4, [sp, #0]
 8011c3c:	f7ff fff0 	bl	8011c20 <ucdr_init_buffer_origin_offset>
 8011c40:	b002      	add	sp, #8
 8011c42:	bd10      	pop	{r4, pc}

08011c44 <ucdr_init_buffer>:
 8011c44:	2300      	movs	r3, #0
 8011c46:	f7ff bff5 	b.w	8011c34 <ucdr_init_buffer_origin>
 8011c4a:	bf00      	nop

08011c4c <ucdr_alignment>:
 8011c4c:	fbb0 f2f1 	udiv	r2, r0, r1
 8011c50:	fb02 0011 	mls	r0, r2, r1, r0
 8011c54:	1e4b      	subs	r3, r1, #1
 8011c56:	1a08      	subs	r0, r1, r0
 8011c58:	4018      	ands	r0, r3
 8011c5a:	4770      	bx	lr

08011c5c <ucdr_buffer_alignment>:
 8011c5c:	7d43      	ldrb	r3, [r0, #21]
 8011c5e:	428b      	cmp	r3, r1
 8011c60:	d209      	bcs.n	8011c76 <ucdr_buffer_alignment+0x1a>
 8011c62:	6903      	ldr	r3, [r0, #16]
 8011c64:	1e4a      	subs	r2, r1, #1
 8011c66:	fbb3 f0f1 	udiv	r0, r3, r1
 8011c6a:	fb01 3010 	mls	r0, r1, r0, r3
 8011c6e:	1a09      	subs	r1, r1, r0
 8011c70:	ea01 0002 	and.w	r0, r1, r2
 8011c74:	4770      	bx	lr
 8011c76:	2000      	movs	r0, #0
 8011c78:	4770      	bx	lr
 8011c7a:	bf00      	nop

08011c7c <ucdr_align_to>:
 8011c7c:	b538      	push	{r3, r4, r5, lr}
 8011c7e:	4604      	mov	r4, r0
 8011c80:	460d      	mov	r5, r1
 8011c82:	f7ff ffeb 	bl	8011c5c <ucdr_buffer_alignment>
 8011c86:	68a3      	ldr	r3, [r4, #8]
 8011c88:	7565      	strb	r5, [r4, #21]
 8011c8a:	181a      	adds	r2, r3, r0
 8011c8c:	6923      	ldr	r3, [r4, #16]
 8011c8e:	4418      	add	r0, r3
 8011c90:	6863      	ldr	r3, [r4, #4]
 8011c92:	4293      	cmp	r3, r2
 8011c94:	6120      	str	r0, [r4, #16]
 8011c96:	bf28      	it	cs
 8011c98:	4613      	movcs	r3, r2
 8011c9a:	60a3      	str	r3, [r4, #8]
 8011c9c:	bd38      	pop	{r3, r4, r5, pc}
 8011c9e:	bf00      	nop

08011ca0 <ucdr_buffer_length>:
 8011ca0:	6882      	ldr	r2, [r0, #8]
 8011ca2:	6800      	ldr	r0, [r0, #0]
 8011ca4:	1a10      	subs	r0, r2, r0
 8011ca6:	4770      	bx	lr

08011ca8 <ucdr_buffer_remaining>:
 8011ca8:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8011cac:	1a10      	subs	r0, r2, r0
 8011cae:	4770      	bx	lr

08011cb0 <ucdr_check_final_buffer_behavior_array>:
 8011cb0:	b538      	push	{r3, r4, r5, lr}
 8011cb2:	7d83      	ldrb	r3, [r0, #22]
 8011cb4:	b9a3      	cbnz	r3, 8011ce0 <ucdr_check_final_buffer_behavior_array+0x30>
 8011cb6:	4604      	mov	r4, r0
 8011cb8:	460d      	mov	r5, r1
 8011cba:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8011cbe:	429a      	cmp	r2, r3
 8011cc0:	d300      	bcc.n	8011cc4 <ucdr_check_final_buffer_behavior_array+0x14>
 8011cc2:	b931      	cbnz	r1, 8011cd2 <ucdr_check_final_buffer_behavior_array+0x22>
 8011cc4:	4620      	mov	r0, r4
 8011cc6:	f7ff ffef 	bl	8011ca8 <ucdr_buffer_remaining>
 8011cca:	42a8      	cmp	r0, r5
 8011ccc:	bf28      	it	cs
 8011cce:	4628      	movcs	r0, r5
 8011cd0:	bd38      	pop	{r3, r4, r5, pc}
 8011cd2:	6983      	ldr	r3, [r0, #24]
 8011cd4:	b133      	cbz	r3, 8011ce4 <ucdr_check_final_buffer_behavior_array+0x34>
 8011cd6:	69c1      	ldr	r1, [r0, #28]
 8011cd8:	4798      	blx	r3
 8011cda:	75a0      	strb	r0, [r4, #22]
 8011cdc:	2800      	cmp	r0, #0
 8011cde:	d0f1      	beq.n	8011cc4 <ucdr_check_final_buffer_behavior_array+0x14>
 8011ce0:	2000      	movs	r0, #0
 8011ce2:	bd38      	pop	{r3, r4, r5, pc}
 8011ce4:	2301      	movs	r3, #1
 8011ce6:	7583      	strb	r3, [r0, #22]
 8011ce8:	e7fa      	b.n	8011ce0 <ucdr_check_final_buffer_behavior_array+0x30>
 8011cea:	bf00      	nop

08011cec <ucdr_advance_buffer>:
 8011cec:	b538      	push	{r3, r4, r5, lr}
 8011cee:	4604      	mov	r4, r0
 8011cf0:	460d      	mov	r5, r1
 8011cf2:	f7ff ff53 	bl	8011b9c <ucdr_check_buffer_available_for>
 8011cf6:	b178      	cbz	r0, 8011d18 <ucdr_advance_buffer+0x2c>
 8011cf8:	6923      	ldr	r3, [r4, #16]
 8011cfa:	68a2      	ldr	r2, [r4, #8]
 8011cfc:	442b      	add	r3, r5
 8011cfe:	442a      	add	r2, r5
 8011d00:	6123      	str	r3, [r4, #16]
 8011d02:	2301      	movs	r3, #1
 8011d04:	60a2      	str	r2, [r4, #8]
 8011d06:	7563      	strb	r3, [r4, #21]
 8011d08:	bd38      	pop	{r3, r4, r5, pc}
 8011d0a:	68a2      	ldr	r2, [r4, #8]
 8011d0c:	1a2d      	subs	r5, r5, r0
 8011d0e:	6923      	ldr	r3, [r4, #16]
 8011d10:	4402      	add	r2, r0
 8011d12:	4418      	add	r0, r3
 8011d14:	60a2      	str	r2, [r4, #8]
 8011d16:	6120      	str	r0, [r4, #16]
 8011d18:	4629      	mov	r1, r5
 8011d1a:	2201      	movs	r2, #1
 8011d1c:	4620      	mov	r0, r4
 8011d1e:	f7ff ffc7 	bl	8011cb0 <ucdr_check_final_buffer_behavior_array>
 8011d22:	2800      	cmp	r0, #0
 8011d24:	d1f1      	bne.n	8011d0a <ucdr_advance_buffer+0x1e>
 8011d26:	2301      	movs	r3, #1
 8011d28:	7563      	strb	r3, [r4, #21]
 8011d2a:	bd38      	pop	{r3, r4, r5, pc}

08011d2c <uxr_buffer_delete_entity>:
 8011d2c:	b510      	push	{r4, lr}
 8011d2e:	2300      	movs	r3, #0
 8011d30:	b08e      	sub	sp, #56	; 0x38
 8011d32:	4604      	mov	r4, r0
 8011d34:	9103      	str	r1, [sp, #12]
 8011d36:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8011d3a:	2303      	movs	r3, #3
 8011d3c:	2204      	movs	r2, #4
 8011d3e:	9300      	str	r3, [sp, #0]
 8011d40:	ab06      	add	r3, sp, #24
 8011d42:	f001 f989 	bl	8013058 <uxr_prepare_stream_to_write_submessage>
 8011d46:	b918      	cbnz	r0, 8011d50 <uxr_buffer_delete_entity+0x24>
 8011d48:	4604      	mov	r4, r0
 8011d4a:	4620      	mov	r0, r4
 8011d4c:	b00e      	add	sp, #56	; 0x38
 8011d4e:	bd10      	pop	{r4, pc}
 8011d50:	9902      	ldr	r1, [sp, #8]
 8011d52:	aa05      	add	r2, sp, #20
 8011d54:	4620      	mov	r0, r4
 8011d56:	f001 fabb 	bl	80132d0 <uxr_init_base_object_request>
 8011d5a:	4604      	mov	r4, r0
 8011d5c:	a905      	add	r1, sp, #20
 8011d5e:	a806      	add	r0, sp, #24
 8011d60:	f002 fd44 	bl	80147ec <uxr_serialize_DELETE_Payload>
 8011d64:	4620      	mov	r0, r4
 8011d66:	b00e      	add	sp, #56	; 0x38
 8011d68:	bd10      	pop	{r4, pc}
 8011d6a:	bf00      	nop

08011d6c <uxr_common_create_entity>:
 8011d6c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8011d70:	b510      	push	{r4, lr}
 8011d72:	f1bc 0f01 	cmp.w	ip, #1
 8011d76:	b08c      	sub	sp, #48	; 0x30
 8011d78:	4604      	mov	r4, r0
 8011d7a:	9202      	str	r2, [sp, #8]
 8011d7c:	bf0c      	ite	eq
 8011d7e:	f003 0201 	andeq.w	r2, r3, #1
 8011d82:	2200      	movne	r2, #0
 8011d84:	330e      	adds	r3, #14
 8011d86:	9103      	str	r1, [sp, #12]
 8011d88:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8011d8c:	441a      	add	r2, r3
 8011d8e:	ab04      	add	r3, sp, #16
 8011d90:	9101      	str	r1, [sp, #4]
 8011d92:	2101      	movs	r1, #1
 8011d94:	b292      	uxth	r2, r2
 8011d96:	9100      	str	r1, [sp, #0]
 8011d98:	9903      	ldr	r1, [sp, #12]
 8011d9a:	f001 f95d 	bl	8013058 <uxr_prepare_stream_to_write_submessage>
 8011d9e:	b918      	cbnz	r0, 8011da8 <uxr_common_create_entity+0x3c>
 8011da0:	4604      	mov	r4, r0
 8011da2:	4620      	mov	r0, r4
 8011da4:	b00c      	add	sp, #48	; 0x30
 8011da6:	bd10      	pop	{r4, pc}
 8011da8:	9902      	ldr	r1, [sp, #8]
 8011daa:	4620      	mov	r0, r4
 8011dac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011dae:	f001 fa8f 	bl	80132d0 <uxr_init_base_object_request>
 8011db2:	4604      	mov	r4, r0
 8011db4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011db6:	a804      	add	r0, sp, #16
 8011db8:	f002 fc72 	bl	80146a0 <uxr_serialize_CREATE_Payload>
 8011dbc:	4620      	mov	r0, r4
 8011dbe:	b00c      	add	sp, #48	; 0x30
 8011dc0:	bd10      	pop	{r4, pc}
 8011dc2:	bf00      	nop

08011dc4 <uxr_buffer_create_participant_bin>:
 8011dc4:	b570      	push	{r4, r5, r6, lr}
 8011dc6:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8011dca:	4605      	mov	r5, r0
 8011dcc:	ac11      	add	r4, sp, #68	; 0x44
 8011dce:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 8011dd2:	2303      	movs	r3, #3
 8011dd4:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 8011dd8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8011ddc:	7223      	strb	r3, [r4, #8]
 8011dde:	2300      	movs	r3, #0
 8011de0:	2201      	movs	r2, #1
 8011de2:	f88d 3014 	strb.w	r3, [sp, #20]
 8011de6:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 8011de8:	7122      	strb	r2, [r4, #4]
 8011dea:	b1cb      	cbz	r3, 8011e20 <uxr_buffer_create_participant_bin+0x5c>
 8011dec:	f88d 201c 	strb.w	r2, [sp, #28]
 8011df0:	9308      	str	r3, [sp, #32]
 8011df2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011df6:	a915      	add	r1, sp, #84	; 0x54
 8011df8:	a809      	add	r0, sp, #36	; 0x24
 8011dfa:	f7ff ff23 	bl	8011c44 <ucdr_init_buffer>
 8011dfe:	a905      	add	r1, sp, #20
 8011e00:	a809      	add	r0, sp, #36	; 0x24
 8011e02:	f002 f803 	bl	8013e0c <uxr_serialize_OBJK_DomainParticipant_Binary>
 8011e06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011e08:	9600      	str	r6, [sp, #0]
 8011e0a:	4628      	mov	r0, r5
 8011e0c:	9401      	str	r4, [sp, #4]
 8011e0e:	60e3      	str	r3, [r4, #12]
 8011e10:	b29b      	uxth	r3, r3
 8011e12:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8011e16:	f7ff ffa9 	bl	8011d6c <uxr_common_create_entity>
 8011e1a:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 8011e1e:	bd70      	pop	{r4, r5, r6, pc}
 8011e20:	f88d 301c 	strb.w	r3, [sp, #28]
 8011e24:	e7e5      	b.n	8011df2 <uxr_buffer_create_participant_bin+0x2e>
 8011e26:	bf00      	nop

08011e28 <uxr_buffer_create_topic_bin>:
 8011e28:	b570      	push	{r4, r5, r6, lr}
 8011e2a:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 8011e2e:	4605      	mov	r5, r0
 8011e30:	4618      	mov	r0, r3
 8011e32:	9105      	str	r1, [sp, #20]
 8011e34:	a997      	add	r1, sp, #604	; 0x25c
 8011e36:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 8011e3a:	ac13      	add	r4, sp, #76	; 0x4c
 8011e3c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011e40:	2302      	movs	r3, #2
 8011e42:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 8011e46:	f000 f9cf 	bl	80121e8 <uxr_object_id_to_raw>
 8011e4a:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 8011e4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011e50:	a917      	add	r1, sp, #92	; 0x5c
 8011e52:	a80b      	add	r0, sp, #44	; 0x2c
 8011e54:	9306      	str	r3, [sp, #24]
 8011e56:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 8011e58:	930a      	str	r3, [sp, #40]	; 0x28
 8011e5a:	2303      	movs	r3, #3
 8011e5c:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8011e60:	2301      	movs	r3, #1
 8011e62:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8011e66:	2300      	movs	r3, #0
 8011e68:	f88d 301c 	strb.w	r3, [sp, #28]
 8011e6c:	f7ff feea 	bl	8011c44 <ucdr_init_buffer>
 8011e70:	a906      	add	r1, sp, #24
 8011e72:	a80b      	add	r0, sp, #44	; 0x2c
 8011e74:	f001 ffec 	bl	8013e50 <uxr_serialize_OBJK_Topic_Binary>
 8011e78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011e7a:	4628      	mov	r0, r5
 8011e7c:	9600      	str	r6, [sp, #0]
 8011e7e:	9316      	str	r3, [sp, #88]	; 0x58
 8011e80:	b29b      	uxth	r3, r3
 8011e82:	9401      	str	r4, [sp, #4]
 8011e84:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011e88:	f7ff ff70 	bl	8011d6c <uxr_common_create_entity>
 8011e8c:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 8011e90:	bd70      	pop	{r4, r5, r6, pc}
 8011e92:	bf00      	nop

08011e94 <uxr_buffer_create_publisher_bin>:
 8011e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e96:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8011e9a:	2603      	movs	r6, #3
 8011e9c:	4605      	mov	r5, r0
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	9105      	str	r1, [sp, #20]
 8011ea2:	a992      	add	r1, sp, #584	; 0x248
 8011ea4:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 8011ea8:	ac0e      	add	r4, sp, #56	; 0x38
 8011eaa:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 8011eae:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011eb2:	f000 f999 	bl	80121e8 <uxr_object_id_to_raw>
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011ebc:	a912      	add	r1, sp, #72	; 0x48
 8011ebe:	a806      	add	r0, sp, #24
 8011ec0:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8011ec4:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8011ec8:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 8011ecc:	f7ff feba 	bl	8011c44 <ucdr_init_buffer>
 8011ed0:	a993      	add	r1, sp, #588	; 0x24c
 8011ed2:	a806      	add	r0, sp, #24
 8011ed4:	f002 f870 	bl	8013fb8 <uxr_serialize_OBJK_Publisher_Binary>
 8011ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011eda:	4628      	mov	r0, r5
 8011edc:	9700      	str	r7, [sp, #0]
 8011ede:	9311      	str	r3, [sp, #68]	; 0x44
 8011ee0:	b29b      	uxth	r3, r3
 8011ee2:	9401      	str	r4, [sp, #4]
 8011ee4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011ee8:	f7ff ff40 	bl	8011d6c <uxr_common_create_entity>
 8011eec:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 8011ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ef2:	bf00      	nop

08011ef4 <uxr_buffer_create_subscriber_bin>:
 8011ef4:	b570      	push	{r4, r5, r6, lr}
 8011ef6:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 8011efa:	4605      	mov	r5, r0
 8011efc:	4618      	mov	r0, r3
 8011efe:	9105      	str	r1, [sp, #20]
 8011f00:	a992      	add	r1, sp, #584	; 0x248
 8011f02:	f89d 6498 	ldrb.w	r6, [sp, #1176]	; 0x498
 8011f06:	ac0e      	add	r4, sp, #56	; 0x38
 8011f08:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011f0c:	2304      	movs	r3, #4
 8011f0e:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 8011f12:	f000 f969 	bl	80121e8 <uxr_object_id_to_raw>
 8011f16:	2300      	movs	r3, #0
 8011f18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011f1c:	a912      	add	r1, sp, #72	; 0x48
 8011f1e:	a806      	add	r0, sp, #24
 8011f20:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8011f24:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8011f28:	2303      	movs	r3, #3
 8011f2a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8011f2e:	f7ff fe89 	bl	8011c44 <ucdr_init_buffer>
 8011f32:	a993      	add	r1, sp, #588	; 0x24c
 8011f34:	a806      	add	r0, sp, #24
 8011f36:	f002 f8ef 	bl	8014118 <uxr_serialize_OBJK_Subscriber_Binary>
 8011f3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011f3c:	4628      	mov	r0, r5
 8011f3e:	9600      	str	r6, [sp, #0]
 8011f40:	9311      	str	r3, [sp, #68]	; 0x44
 8011f42:	b29b      	uxth	r3, r3
 8011f44:	9401      	str	r4, [sp, #4]
 8011f46:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011f4a:	f7ff ff0f 	bl	8011d6c <uxr_common_create_entity>
 8011f4e:	f50d 6d91 	add.w	sp, sp, #1160	; 0x488
 8011f52:	bd70      	pop	{r4, r5, r6, pc}

08011f54 <uxr_buffer_create_datawriter_bin>:
 8011f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f58:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8011f5c:	4606      	mov	r6, r0
 8011f5e:	4618      	mov	r0, r3
 8011f60:	2703      	movs	r7, #3
 8011f62:	ac1d      	add	r4, sp, #116	; 0x74
 8011f64:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 8011f68:	9105      	str	r1, [sp, #20]
 8011f6a:	a9a1      	add	r1, sp, #644	; 0x284
 8011f6c:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 8011f70:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011f74:	2305      	movs	r3, #5
 8011f76:	7123      	strb	r3, [r4, #4]
 8011f78:	f000 f936 	bl	80121e8 <uxr_object_id_to_raw>
 8011f7c:	a90e      	add	r1, sp, #56	; 0x38
 8011f7e:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 8011f80:	7227      	strb	r7, [r4, #8]
 8011f82:	f000 f931 	bl	80121e8 <uxr_object_id_to_raw>
 8011f86:	2300      	movs	r3, #0
 8011f88:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8011f8c:	3d00      	subs	r5, #0
 8011f8e:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 8011f92:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8011f96:	bf18      	it	ne
 8011f98:	2501      	movne	r5, #1
 8011f9a:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8011f9e:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8011fa2:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8011fa6:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8011faa:	2301      	movs	r3, #1
 8011fac:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8011fb0:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8011fb4:	bb8a      	cbnz	r2, 801201a <uxr_buffer_create_datawriter_bin+0xc6>
 8011fb6:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8011fba:	f04f 0c13 	mov.w	ip, #19
 8011fbe:	250b      	movs	r5, #11
 8011fc0:	2221      	movs	r2, #33	; 0x21
 8011fc2:	2111      	movs	r1, #17
 8011fc4:	2009      	movs	r0, #9
 8011fc6:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8011fca:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 8011fce:	b923      	cbnz	r3, 8011fda <uxr_buffer_create_datawriter_bin+0x86>
 8011fd0:	4672      	mov	r2, lr
 8011fd2:	4661      	mov	r1, ip
 8011fd4:	4628      	mov	r0, r5
 8011fd6:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8011fda:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 8011fde:	2b01      	cmp	r3, #1
 8011fe0:	d025      	beq.n	801202e <uxr_buffer_create_datawriter_bin+0xda>
 8011fe2:	2b03      	cmp	r3, #3
 8011fe4:	d029      	beq.n	801203a <uxr_buffer_create_datawriter_bin+0xe6>
 8011fe6:	b32b      	cbz	r3, 8012034 <uxr_buffer_create_datawriter_bin+0xe0>
 8011fe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011fec:	a921      	add	r1, sp, #132	; 0x84
 8011fee:	a806      	add	r0, sp, #24
 8011ff0:	f7ff fe28 	bl	8011c44 <ucdr_init_buffer>
 8011ff4:	a90e      	add	r1, sp, #56	; 0x38
 8011ff6:	a806      	add	r0, sp, #24
 8011ff8:	f002 f940 	bl	801427c <uxr_serialize_OBJK_DataWriter_Binary>
 8011ffc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ffe:	f8cd 8000 	str.w	r8, [sp]
 8012002:	4630      	mov	r0, r6
 8012004:	9401      	str	r4, [sp, #4]
 8012006:	60e3      	str	r3, [r4, #12]
 8012008:	b29b      	uxth	r3, r3
 801200a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801200e:	f7ff fead 	bl	8011d6c <uxr_common_create_entity>
 8012012:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8012016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801201a:	f04f 0e22 	mov.w	lr, #34	; 0x22
 801201e:	f04f 0c12 	mov.w	ip, #18
 8012022:	250a      	movs	r5, #10
 8012024:	2220      	movs	r2, #32
 8012026:	2110      	movs	r1, #16
 8012028:	2008      	movs	r0, #8
 801202a:	2702      	movs	r7, #2
 801202c:	e7cd      	b.n	8011fca <uxr_buffer_create_datawriter_bin+0x76>
 801202e:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8012032:	e7d9      	b.n	8011fe8 <uxr_buffer_create_datawriter_bin+0x94>
 8012034:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8012038:	e7d6      	b.n	8011fe8 <uxr_buffer_create_datawriter_bin+0x94>
 801203a:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801203e:	e7d3      	b.n	8011fe8 <uxr_buffer_create_datawriter_bin+0x94>

08012040 <uxr_buffer_create_datareader_bin>:
 8012040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012044:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8012048:	4606      	mov	r6, r0
 801204a:	4618      	mov	r0, r3
 801204c:	2703      	movs	r7, #3
 801204e:	ac1f      	add	r4, sp, #124	; 0x7c
 8012050:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 8012054:	9105      	str	r1, [sp, #20]
 8012056:	a9a3      	add	r1, sp, #652	; 0x28c
 8012058:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 801205c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012060:	2306      	movs	r3, #6
 8012062:	7123      	strb	r3, [r4, #4]
 8012064:	f000 f8c0 	bl	80121e8 <uxr_object_id_to_raw>
 8012068:	a90e      	add	r1, sp, #56	; 0x38
 801206a:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 801206c:	7227      	strb	r7, [r4, #8]
 801206e:	f000 f8bb 	bl	80121e8 <uxr_object_id_to_raw>
 8012072:	2300      	movs	r3, #0
 8012074:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8012078:	3d00      	subs	r5, #0
 801207a:	f89d 22ad 	ldrb.w	r2, [sp, #685]	; 0x2ad
 801207e:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8012082:	bf18      	it	ne
 8012084:	2501      	movne	r5, #1
 8012086:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 801208a:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 801208e:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8012092:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8012096:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801209a:	2301      	movs	r3, #1
 801209c:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 80120a0:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 80120a4:	bb8a      	cbnz	r2, 801210a <uxr_buffer_create_datareader_bin+0xca>
 80120a6:	f04f 0e23 	mov.w	lr, #35	; 0x23
 80120aa:	f04f 0c13 	mov.w	ip, #19
 80120ae:	250b      	movs	r5, #11
 80120b0:	2221      	movs	r2, #33	; 0x21
 80120b2:	2111      	movs	r1, #17
 80120b4:	2009      	movs	r0, #9
 80120b6:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80120ba:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 80120be:	b923      	cbnz	r3, 80120ca <uxr_buffer_create_datareader_bin+0x8a>
 80120c0:	4672      	mov	r2, lr
 80120c2:	4661      	mov	r1, ip
 80120c4:	4628      	mov	r0, r5
 80120c6:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 80120ca:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 80120ce:	2b01      	cmp	r3, #1
 80120d0:	d025      	beq.n	801211e <uxr_buffer_create_datareader_bin+0xde>
 80120d2:	2b03      	cmp	r3, #3
 80120d4:	d029      	beq.n	801212a <uxr_buffer_create_datareader_bin+0xea>
 80120d6:	b32b      	cbz	r3, 8012124 <uxr_buffer_create_datareader_bin+0xe4>
 80120d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80120dc:	a923      	add	r1, sp, #140	; 0x8c
 80120de:	a806      	add	r0, sp, #24
 80120e0:	f7ff fdb0 	bl	8011c44 <ucdr_init_buffer>
 80120e4:	a90e      	add	r1, sp, #56	; 0x38
 80120e6:	a806      	add	r0, sp, #24
 80120e8:	f002 f88c 	bl	8014204 <uxr_serialize_OBJK_DataReader_Binary>
 80120ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80120ee:	f8cd 8000 	str.w	r8, [sp]
 80120f2:	4630      	mov	r0, r6
 80120f4:	9401      	str	r4, [sp, #4]
 80120f6:	60e3      	str	r3, [r4, #12]
 80120f8:	b29b      	uxth	r3, r3
 80120fa:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80120fe:	f7ff fe35 	bl	8011d6c <uxr_common_create_entity>
 8012102:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8012106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801210a:	f04f 0e22 	mov.w	lr, #34	; 0x22
 801210e:	f04f 0c12 	mov.w	ip, #18
 8012112:	250a      	movs	r5, #10
 8012114:	2220      	movs	r2, #32
 8012116:	2110      	movs	r1, #16
 8012118:	2008      	movs	r0, #8
 801211a:	2702      	movs	r7, #2
 801211c:	e7cd      	b.n	80120ba <uxr_buffer_create_datareader_bin+0x7a>
 801211e:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8012122:	e7d9      	b.n	80120d8 <uxr_buffer_create_datareader_bin+0x98>
 8012124:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8012128:	e7d6      	b.n	80120d8 <uxr_buffer_create_datareader_bin+0x98>
 801212a:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801212e:	e7d3      	b.n	80120d8 <uxr_buffer_create_datareader_bin+0x98>

08012130 <uxr_buffer_create_replier_bin>:
 8012130:	b570      	push	{r4, r5, r6, lr}
 8012132:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8012136:	4605      	mov	r5, r0
 8012138:	4618      	mov	r0, r3
 801213a:	9105      	str	r1, [sp, #20]
 801213c:	a999      	add	r1, sp, #612	; 0x264
 801213e:	f89d 6294 	ldrb.w	r6, [sp, #660]	; 0x294
 8012142:	ac15      	add	r4, sp, #84	; 0x54
 8012144:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012148:	2308      	movs	r3, #8
 801214a:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 801214e:	f000 f84b 	bl	80121e8 <uxr_object_id_to_raw>
 8012152:	9b9e      	ldr	r3, [sp, #632]	; 0x278
 8012154:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012158:	a919      	add	r1, sp, #100	; 0x64
 801215a:	a80d      	add	r0, sp, #52	; 0x34
 801215c:	9306      	str	r3, [sp, #24]
 801215e:	9b9f      	ldr	r3, [sp, #636]	; 0x27c
 8012160:	9307      	str	r3, [sp, #28]
 8012162:	9ba0      	ldr	r3, [sp, #640]	; 0x280
 8012164:	9308      	str	r3, [sp, #32]
 8012166:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8012168:	930c      	str	r3, [sp, #48]	; 0x30
 801216a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801216c:	930a      	str	r3, [sp, #40]	; 0x28
 801216e:	2301      	movs	r3, #1
 8012170:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8012174:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8012178:	2303      	movs	r3, #3
 801217a:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 801217e:	f7ff fd61 	bl	8011c44 <ucdr_init_buffer>
 8012182:	a906      	add	r1, sp, #24
 8012184:	a80d      	add	r0, sp, #52	; 0x34
 8012186:	f002 f8a5 	bl	80142d4 <uxr_serialize_OBJK_Replier_Binary>
 801218a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801218c:	4628      	mov	r0, r5
 801218e:	9600      	str	r6, [sp, #0]
 8012190:	9318      	str	r3, [sp, #96]	; 0x60
 8012192:	b29b      	uxth	r3, r3
 8012194:	9401      	str	r4, [sp, #4]
 8012196:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801219a:	f7ff fde7 	bl	8011d6c <uxr_common_create_entity>
 801219e:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
 80121a2:	bd70      	pop	{r4, r5, r6, pc}

080121a4 <uxr_object_id>:
 80121a4:	b082      	sub	sp, #8
 80121a6:	2300      	movs	r3, #0
 80121a8:	f88d 1006 	strb.w	r1, [sp, #6]
 80121ac:	f360 030f 	bfi	r3, r0, #0, #16
 80121b0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80121b4:	f362 431f 	bfi	r3, r2, #16, #16
 80121b8:	4618      	mov	r0, r3
 80121ba:	b002      	add	sp, #8
 80121bc:	4770      	bx	lr
 80121be:	bf00      	nop

080121c0 <uxr_object_id_from_raw>:
 80121c0:	7843      	ldrb	r3, [r0, #1]
 80121c2:	b082      	sub	sp, #8
 80121c4:	7801      	ldrb	r1, [r0, #0]
 80121c6:	2000      	movs	r0, #0
 80121c8:	091a      	lsrs	r2, r3, #4
 80121ca:	f003 030f 	and.w	r3, r3, #15
 80121ce:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80121d2:	f88d 3006 	strb.w	r3, [sp, #6]
 80121d6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80121da:	f362 000f 	bfi	r0, r2, #0, #16
 80121de:	f363 401f 	bfi	r0, r3, #16, #16
 80121e2:	b002      	add	sp, #8
 80121e4:	4770      	bx	lr
 80121e6:	bf00      	nop

080121e8 <uxr_object_id_to_raw>:
 80121e8:	4602      	mov	r2, r0
 80121ea:	f3c0 4303 	ubfx	r3, r0, #16, #4
 80121ee:	b082      	sub	sp, #8
 80121f0:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 80121f4:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 80121f8:	f881 c000 	strb.w	ip, [r1]
 80121fc:	7048      	strb	r0, [r1, #1]
 80121fe:	b002      	add	sp, #8
 8012200:	4770      	bx	lr
 8012202:	bf00      	nop

08012204 <on_get_fragmentation_info>:
 8012204:	b500      	push	{lr}
 8012206:	b08b      	sub	sp, #44	; 0x2c
 8012208:	4601      	mov	r1, r0
 801220a:	2204      	movs	r2, #4
 801220c:	a802      	add	r0, sp, #8
 801220e:	f7ff fd19 	bl	8011c44 <ucdr_init_buffer>
 8012212:	f10d 0305 	add.w	r3, sp, #5
 8012216:	f10d 0206 	add.w	r2, sp, #6
 801221a:	a901      	add	r1, sp, #4
 801221c:	a802      	add	r0, sp, #8
 801221e:	f001 f9e1 	bl	80135e4 <uxr_read_submessage_header>
 8012222:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012226:	2b0d      	cmp	r3, #13
 8012228:	d003      	beq.n	8012232 <on_get_fragmentation_info+0x2e>
 801222a:	2000      	movs	r0, #0
 801222c:	b00b      	add	sp, #44	; 0x2c
 801222e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012232:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012236:	f013 0f02 	tst.w	r3, #2
 801223a:	bf14      	ite	ne
 801223c:	2002      	movne	r0, #2
 801223e:	2001      	moveq	r0, #1
 8012240:	b00b      	add	sp, #44	; 0x2c
 8012242:	f85d fb04 	ldr.w	pc, [sp], #4
 8012246:	bf00      	nop

08012248 <read_submessage_get_info>:
 8012248:	b570      	push	{r4, r5, r6, lr}
 801224a:	2500      	movs	r5, #0
 801224c:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 8012250:	460e      	mov	r6, r1
 8012252:	4604      	mov	r4, r0
 8012254:	f44f 7224 	mov.w	r2, #656	; 0x290
 8012258:	4629      	mov	r1, r5
 801225a:	a810      	add	r0, sp, #64	; 0x40
 801225c:	9503      	str	r5, [sp, #12]
 801225e:	9504      	str	r5, [sp, #16]
 8012260:	f00c fb14 	bl	801e88c <memset>
 8012264:	a903      	add	r1, sp, #12
 8012266:	4630      	mov	r0, r6
 8012268:	f002 faaa 	bl	80147c0 <uxr_deserialize_GET_INFO_Payload>
 801226c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8012270:	4620      	mov	r0, r4
 8012272:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8012276:	f001 f823 	bl	80132c0 <uxr_session_header_offset>
 801227a:	462b      	mov	r3, r5
 801227c:	220c      	movs	r2, #12
 801227e:	a905      	add	r1, sp, #20
 8012280:	9000      	str	r0, [sp, #0]
 8012282:	a808      	add	r0, sp, #32
 8012284:	f7ff fccc 	bl	8011c20 <ucdr_init_buffer_origin_offset>
 8012288:	a910      	add	r1, sp, #64	; 0x40
 801228a:	a808      	add	r0, sp, #32
 801228c:	f002 fb0c 	bl	80148a8 <uxr_serialize_INFO_Payload>
 8012290:	9b08      	ldr	r3, [sp, #32]
 8012292:	462a      	mov	r2, r5
 8012294:	4629      	mov	r1, r5
 8012296:	4620      	mov	r0, r4
 8012298:	f000 ffbe 	bl	8013218 <uxr_stamp_session_header>
 801229c:	a808      	add	r0, sp, #32
 801229e:	f7ff fcff 	bl	8011ca0 <ucdr_buffer_length>
 80122a2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80122a4:	4602      	mov	r2, r0
 80122a6:	a905      	add	r1, sp, #20
 80122a8:	e9d3 0400 	ldrd	r0, r4, [r3]
 80122ac:	47a0      	blx	r4
 80122ae:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 80122b2:	bd70      	pop	{r4, r5, r6, pc}

080122b4 <write_submessage_acknack.isra.0>:
 80122b4:	b570      	push	{r4, r5, r6, lr}
 80122b6:	b092      	sub	sp, #72	; 0x48
 80122b8:	4605      	mov	r5, r0
 80122ba:	460e      	mov	r6, r1
 80122bc:	4614      	mov	r4, r2
 80122be:	f000 ffff 	bl	80132c0 <uxr_session_header_offset>
 80122c2:	a905      	add	r1, sp, #20
 80122c4:	9000      	str	r0, [sp, #0]
 80122c6:	2300      	movs	r3, #0
 80122c8:	a80a      	add	r0, sp, #40	; 0x28
 80122ca:	2211      	movs	r2, #17
 80122cc:	f7ff fca8 	bl	8011c20 <ucdr_init_buffer_origin_offset>
 80122d0:	2218      	movs	r2, #24
 80122d2:	2300      	movs	r3, #0
 80122d4:	210a      	movs	r1, #10
 80122d6:	fb02 5404 	mla	r4, r2, r4, r5
 80122da:	a80a      	add	r0, sp, #40	; 0x28
 80122dc:	2205      	movs	r2, #5
 80122de:	3450      	adds	r4, #80	; 0x50
 80122e0:	f001 f966 	bl	80135b0 <uxr_buffer_submessage_header>
 80122e4:	a903      	add	r1, sp, #12
 80122e6:	4620      	mov	r0, r4
 80122e8:	f009 f874 	bl	801b3d4 <uxr_compute_acknack>
 80122ec:	ba40      	rev16	r0, r0
 80122ee:	a903      	add	r1, sp, #12
 80122f0:	f88d 6010 	strb.w	r6, [sp, #16]
 80122f4:	f8ad 000e 	strh.w	r0, [sp, #14]
 80122f8:	a80a      	add	r0, sp, #40	; 0x28
 80122fa:	f002 fb47 	bl	801498c <uxr_serialize_ACKNACK_Payload>
 80122fe:	2200      	movs	r2, #0
 8012300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012302:	4628      	mov	r0, r5
 8012304:	4611      	mov	r1, r2
 8012306:	f000 ff87 	bl	8013218 <uxr_stamp_session_header>
 801230a:	a80a      	add	r0, sp, #40	; 0x28
 801230c:	f7ff fcc8 	bl	8011ca0 <ucdr_buffer_length>
 8012310:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8012312:	4602      	mov	r2, r0
 8012314:	a905      	add	r1, sp, #20
 8012316:	e9d3 0400 	ldrd	r0, r4, [r3]
 801231a:	47a0      	blx	r4
 801231c:	b012      	add	sp, #72	; 0x48
 801231e:	bd70      	pop	{r4, r5, r6, pc}

08012320 <uxr_init_session>:
 8012320:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8012358 <uxr_init_session+0x38>
 8012324:	2300      	movs	r3, #0
 8012326:	b510      	push	{r4, lr}
 8012328:	4604      	mov	r4, r0
 801232a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 801232e:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 8012332:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 8012336:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 801233a:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 801233e:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 8012342:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 8012346:	2181      	movs	r1, #129	; 0x81
 8012348:	f000 feca 	bl	80130e0 <uxr_init_session_info>
 801234c:	f104 0008 	add.w	r0, r4, #8
 8012350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012354:	f001 b848 	b.w	80133e8 <uxr_init_stream_storage>
	...

08012360 <uxr_set_status_callback>:
 8012360:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 8012364:	4770      	bx	lr
 8012366:	bf00      	nop

08012368 <uxr_set_topic_callback>:
 8012368:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 801236c:	4770      	bx	lr
 801236e:	bf00      	nop

08012370 <uxr_set_request_callback>:
 8012370:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 8012374:	4770      	bx	lr
 8012376:	bf00      	nop

08012378 <uxr_set_reply_callback>:
 8012378:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 801237c:	4770      	bx	lr
 801237e:	bf00      	nop

08012380 <uxr_create_output_best_effort_stream>:
 8012380:	b510      	push	{r4, lr}
 8012382:	4604      	mov	r4, r0
 8012384:	b084      	sub	sp, #16
 8012386:	e9cd 2100 	strd	r2, r1, [sp]
 801238a:	f000 ff99 	bl	80132c0 <uxr_session_header_offset>
 801238e:	4603      	mov	r3, r0
 8012390:	f104 0008 	add.w	r0, r4, #8
 8012394:	e9dd 2100 	ldrd	r2, r1, [sp]
 8012398:	b004      	add	sp, #16
 801239a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801239e:	f001 b869 	b.w	8013474 <uxr_add_output_best_effort_buffer>
 80123a2:	bf00      	nop

080123a4 <uxr_create_output_reliable_stream>:
 80123a4:	b530      	push	{r4, r5, lr}
 80123a6:	b089      	sub	sp, #36	; 0x24
 80123a8:	4604      	mov	r4, r0
 80123aa:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80123ae:	9303      	str	r3, [sp, #12]
 80123b0:	f000 ff86 	bl	80132c0 <uxr_session_header_offset>
 80123b4:	4605      	mov	r5, r0
 80123b6:	9905      	ldr	r1, [sp, #20]
 80123b8:	f104 0008 	add.w	r0, r4, #8
 80123bc:	9500      	str	r5, [sp, #0]
 80123be:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80123c2:	f001 f86b 	bl	801349c <uxr_add_output_reliable_buffer>
 80123c6:	2200      	movs	r2, #0
 80123c8:	fa5f fc80 	uxtb.w	ip, r0
 80123cc:	f3c0 2407 	ubfx	r4, r0, #8, #8
 80123d0:	f3c0 4107 	ubfx	r1, r0, #16, #8
 80123d4:	0e03      	lsrs	r3, r0, #24
 80123d6:	f36c 0207 	bfi	r2, ip, #0, #8
 80123da:	f364 220f 	bfi	r2, r4, #8, #8
 80123de:	f361 4217 	bfi	r2, r1, #16, #8
 80123e2:	f363 621f 	bfi	r2, r3, #24, #8
 80123e6:	4610      	mov	r0, r2
 80123e8:	b009      	add	sp, #36	; 0x24
 80123ea:	bd30      	pop	{r4, r5, pc}

080123ec <uxr_create_input_best_effort_stream>:
 80123ec:	b082      	sub	sp, #8
 80123ee:	3008      	adds	r0, #8
 80123f0:	b002      	add	sp, #8
 80123f2:	f001 b86d 	b.w	80134d0 <uxr_add_input_best_effort_buffer>
 80123f6:	bf00      	nop

080123f8 <uxr_create_input_reliable_stream>:
 80123f8:	b510      	push	{r4, lr}
 80123fa:	4c0c      	ldr	r4, [pc, #48]	; (801242c <uxr_create_input_reliable_stream+0x34>)
 80123fc:	b084      	sub	sp, #16
 80123fe:	3008      	adds	r0, #8
 8012400:	9400      	str	r4, [sp, #0]
 8012402:	f001 f87b 	bl	80134fc <uxr_add_input_reliable_buffer>
 8012406:	2200      	movs	r2, #0
 8012408:	fa5f fe80 	uxtb.w	lr, r0
 801240c:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8012410:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8012414:	0e03      	lsrs	r3, r0, #24
 8012416:	f36e 0207 	bfi	r2, lr, #0, #8
 801241a:	f36c 220f 	bfi	r2, ip, #8, #8
 801241e:	f361 4217 	bfi	r2, r1, #16, #8
 8012422:	f363 621f 	bfi	r2, r3, #24, #8
 8012426:	4610      	mov	r0, r2
 8012428:	b004      	add	sp, #16
 801242a:	bd10      	pop	{r4, pc}
 801242c:	08012205 	.word	0x08012205

08012430 <uxr_epoch_nanos>:
 8012430:	b510      	push	{r4, lr}
 8012432:	4604      	mov	r4, r0
 8012434:	f001 f91e 	bl	8013674 <uxr_nanos>
 8012438:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 801243c:	1ac0      	subs	r0, r0, r3
 801243e:	eb61 0102 	sbc.w	r1, r1, r2
 8012442:	bd10      	pop	{r4, pc}

08012444 <uxr_flash_output_streams>:
 8012444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012448:	7e03      	ldrb	r3, [r0, #24]
 801244a:	b084      	sub	sp, #16
 801244c:	4604      	mov	r4, r0
 801244e:	b1fb      	cbz	r3, 8012490 <uxr_flash_output_streams+0x4c>
 8012450:	f04f 0900 	mov.w	r9, #0
 8012454:	f10d 0802 	add.w	r8, sp, #2
 8012458:	af03      	add	r7, sp, #12
 801245a:	ae02      	add	r6, sp, #8
 801245c:	4648      	mov	r0, r9
 801245e:	2201      	movs	r2, #1
 8012460:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8012464:	4611      	mov	r1, r2
 8012466:	3508      	adds	r5, #8
 8012468:	f000 ff64 	bl	8013334 <uxr_stream_id>
 801246c:	4684      	mov	ip, r0
 801246e:	4643      	mov	r3, r8
 8012470:	463a      	mov	r2, r7
 8012472:	4631      	mov	r1, r6
 8012474:	4628      	mov	r0, r5
 8012476:	f8cd c004 	str.w	ip, [sp, #4]
 801247a:	f009 f835 	bl	801b4e8 <uxr_prepare_best_effort_buffer_to_send>
 801247e:	2800      	cmp	r0, #0
 8012480:	d13d      	bne.n	80124fe <uxr_flash_output_streams+0xba>
 8012482:	f109 0901 	add.w	r9, r9, #1
 8012486:	7e23      	ldrb	r3, [r4, #24]
 8012488:	fa5f f089 	uxtb.w	r0, r9
 801248c:	4283      	cmp	r3, r0
 801248e:	d8e6      	bhi.n	801245e <uxr_flash_output_streams+0x1a>
 8012490:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8012494:	b383      	cbz	r3, 80124f8 <uxr_flash_output_streams+0xb4>
 8012496:	f04f 0900 	mov.w	r9, #0
 801249a:	f10d 0802 	add.w	r8, sp, #2
 801249e:	af03      	add	r7, sp, #12
 80124a0:	ae02      	add	r6, sp, #8
 80124a2:	4648      	mov	r0, r9
 80124a4:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 80124a8:	2201      	movs	r2, #1
 80124aa:	2102      	movs	r1, #2
 80124ac:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80124b0:	f000 ff40 	bl	8013334 <uxr_stream_id>
 80124b4:	9001      	str	r0, [sp, #4]
 80124b6:	3520      	adds	r5, #32
 80124b8:	e00c      	b.n	80124d4 <uxr_flash_output_streams+0x90>
 80124ba:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80124be:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80124c2:	9b02      	ldr	r3, [sp, #8]
 80124c4:	f000 fea8 	bl	8013218 <uxr_stamp_session_header>
 80124c8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80124ca:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80124ce:	e9d3 0a00 	ldrd	r0, sl, [r3]
 80124d2:	47d0      	blx	sl
 80124d4:	4643      	mov	r3, r8
 80124d6:	463a      	mov	r2, r7
 80124d8:	4631      	mov	r1, r6
 80124da:	4628      	mov	r0, r5
 80124dc:	f009 fa28 	bl	801b930 <uxr_prepare_next_reliable_buffer_to_send>
 80124e0:	4603      	mov	r3, r0
 80124e2:	4620      	mov	r0, r4
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d1e8      	bne.n	80124ba <uxr_flash_output_streams+0x76>
 80124e8:	f109 0901 	add.w	r9, r9, #1
 80124ec:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80124f0:	fa5f f089 	uxtb.w	r0, r9
 80124f4:	4283      	cmp	r3, r0
 80124f6:	d8d5      	bhi.n	80124a4 <uxr_flash_output_streams+0x60>
 80124f8:	b004      	add	sp, #16
 80124fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124fe:	9b02      	ldr	r3, [sp, #8]
 8012500:	4620      	mov	r0, r4
 8012502:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8012506:	f109 0901 	add.w	r9, r9, #1
 801250a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801250e:	f000 fe83 	bl	8013218 <uxr_stamp_session_header>
 8012512:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012514:	9a03      	ldr	r2, [sp, #12]
 8012516:	685d      	ldr	r5, [r3, #4]
 8012518:	6818      	ldr	r0, [r3, #0]
 801251a:	9902      	ldr	r1, [sp, #8]
 801251c:	47a8      	blx	r5
 801251e:	7e23      	ldrb	r3, [r4, #24]
 8012520:	fa5f f089 	uxtb.w	r0, r9
 8012524:	4283      	cmp	r3, r0
 8012526:	d89a      	bhi.n	801245e <uxr_flash_output_streams+0x1a>
 8012528:	e7b2      	b.n	8012490 <uxr_flash_output_streams+0x4c>
 801252a:	bf00      	nop

0801252c <read_submessage_info>:
 801252c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012530:	460d      	mov	r5, r1
 8012532:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8012536:	4606      	mov	r6, r0
 8012538:	4669      	mov	r1, sp
 801253a:	4628      	mov	r0, r5
 801253c:	f002 f852 	bl	80145e4 <uxr_deserialize_BaseObjectReply>
 8012540:	4604      	mov	r4, r0
 8012542:	a902      	add	r1, sp, #8
 8012544:	4628      	mov	r0, r5
 8012546:	f89d 7005 	ldrb.w	r7, [sp, #5]
 801254a:	f7fd fed3 	bl	80102f4 <ucdr_deserialize_bool>
 801254e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8012552:	4004      	ands	r4, r0
 8012554:	b2e4      	uxtb	r4, r4
 8012556:	b95b      	cbnz	r3, 8012570 <read_submessage_info+0x44>
 8012558:	a987      	add	r1, sp, #540	; 0x21c
 801255a:	4628      	mov	r0, r5
 801255c:	f7fd feca 	bl	80102f4 <ucdr_deserialize_bool>
 8012560:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 8012564:	4680      	mov	r8, r0
 8012566:	b94b      	cbnz	r3, 801257c <read_submessage_info+0x50>
 8012568:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 801256c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012570:	a903      	add	r1, sp, #12
 8012572:	4628      	mov	r0, r5
 8012574:	f001 fee2 	bl	801433c <uxr_deserialize_ObjectVariant>
 8012578:	4004      	ands	r4, r0
 801257a:	e7ed      	b.n	8012558 <read_submessage_info+0x2c>
 801257c:	a988      	add	r1, sp, #544	; 0x220
 801257e:	4628      	mov	r0, r5
 8012580:	f7fd fee6 	bl	8010350 <ucdr_deserialize_uint8_t>
 8012584:	ea14 0f08 	tst.w	r4, r8
 8012588:	d0ee      	beq.n	8012568 <read_submessage_info+0x3c>
 801258a:	2800      	cmp	r0, #0
 801258c:	d0ec      	beq.n	8012568 <read_submessage_info+0x3c>
 801258e:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 8012592:	2b0d      	cmp	r3, #13
 8012594:	d1e8      	bne.n	8012568 <read_submessage_info+0x3c>
 8012596:	a98a      	add	r1, sp, #552	; 0x228
 8012598:	4628      	mov	r0, r5
 801259a:	f7fe fcff 	bl	8010f9c <ucdr_deserialize_int16_t>
 801259e:	b138      	cbz	r0, 80125b0 <read_submessage_info+0x84>
 80125a0:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	dd06      	ble.n	80125b6 <read_submessage_info+0x8a>
 80125a8:	2f00      	cmp	r7, #0
 80125aa:	bf14      	ite	ne
 80125ac:	2001      	movne	r0, #1
 80125ae:	2002      	moveq	r0, #2
 80125b0:	f886 00b5 	strb.w	r0, [r6, #181]	; 0xb5
 80125b4:	e7d8      	b.n	8012568 <read_submessage_info+0x3c>
 80125b6:	2000      	movs	r0, #0
 80125b8:	e7fa      	b.n	80125b0 <read_submessage_info+0x84>
 80125ba:	bf00      	nop

080125bc <read_submessage_list>:
 80125bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125c0:	4604      	mov	r4, r0
 80125c2:	b097      	sub	sp, #92	; 0x5c
 80125c4:	460d      	mov	r5, r1
 80125c6:	4ec1      	ldr	r6, [pc, #772]	; (80128cc <read_submessage_list+0x310>)
 80125c8:	9209      	str	r2, [sp, #36]	; 0x24
 80125ca:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 80125ce:	aa0c      	add	r2, sp, #48	; 0x30
 80125d0:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 80125d4:	4628      	mov	r0, r5
 80125d6:	f001 f805 	bl	80135e4 <uxr_read_submessage_header>
 80125da:	2800      	cmp	r0, #0
 80125dc:	f000 8142 	beq.w	8012864 <read_submessage_list+0x2a8>
 80125e0:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 80125e4:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 80125e8:	3b02      	subs	r3, #2
 80125ea:	2b0d      	cmp	r3, #13
 80125ec:	d8ed      	bhi.n	80125ca <read_submessage_list+0xe>
 80125ee:	a101      	add	r1, pc, #4	; (adr r1, 80125f4 <read_submessage_list+0x38>)
 80125f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80125f4:	0801285b 	.word	0x0801285b
 80125f8:	080125cb 	.word	0x080125cb
 80125fc:	0801284b 	.word	0x0801284b
 8012600:	080127e9 	.word	0x080127e9
 8012604:	080127df 	.word	0x080127df
 8012608:	080125cb 	.word	0x080125cb
 801260c:	080125cb 	.word	0x080125cb
 8012610:	08012735 	.word	0x08012735
 8012614:	080126c7 	.word	0x080126c7
 8012618:	08012687 	.word	0x08012687
 801261c:	080125cb 	.word	0x080125cb
 8012620:	080125cb 	.word	0x080125cb
 8012624:	080125cb 	.word	0x080125cb
 8012628:	0801262d 	.word	0x0801262d
 801262c:	a910      	add	r1, sp, #64	; 0x40
 801262e:	4628      	mov	r0, r5
 8012630:	f002 fa00 	bl	8014a34 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8012634:	f8d4 8090 	ldr.w	r8, [r4, #144]	; 0x90
 8012638:	f1b8 0f00 	cmp.w	r8, #0
 801263c:	f000 811a 	beq.w	8012874 <read_submessage_list+0x2b8>
 8012640:	f001 f818 	bl	8013674 <uxr_nanos>
 8012644:	4602      	mov	r2, r0
 8012646:	460b      	mov	r3, r1
 8012648:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 801264c:	2100      	movs	r1, #0
 801264e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8012650:	9006      	str	r0, [sp, #24]
 8012652:	468c      	mov	ip, r1
 8012654:	9815      	ldr	r0, [sp, #84]	; 0x54
 8012656:	fbc7 0c06 	smlal	r0, ip, r7, r6
 801265a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801265c:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 8012660:	468c      	mov	ip, r1
 8012662:	9811      	ldr	r0, [sp, #68]	; 0x44
 8012664:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8012668:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 801266c:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	; 0x48
 8012670:	fbc7 0106 	smlal	r0, r1, r7, r6
 8012674:	e9cd 0100 	strd	r0, r1, [sp]
 8012678:	4620      	mov	r0, r4
 801267a:	47c0      	blx	r8
 801267c:	f04f 0301 	mov.w	r3, #1
 8012680:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 8012684:	e7a1      	b.n	80125ca <read_submessage_list+0xe>
 8012686:	a910      	add	r1, sp, #64	; 0x40
 8012688:	4628      	mov	r0, r5
 801268a:	f002 f9bf 	bl	8014a0c <uxr_deserialize_HEARTBEAT_Payload>
 801268e:	2100      	movs	r1, #0
 8012690:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8012694:	f000 fe7c 	bl	8013390 <uxr_stream_id_from_raw>
 8012698:	f3c0 2807 	ubfx	r8, r0, #8, #8
 801269c:	900f      	str	r0, [sp, #60]	; 0x3c
 801269e:	f104 0008 	add.w	r0, r4, #8
 80126a2:	4641      	mov	r1, r8
 80126a4:	f000 ff62 	bl	801356c <uxr_get_input_reliable_stream>
 80126a8:	2800      	cmp	r0, #0
 80126aa:	d08e      	beq.n	80125ca <read_submessage_list+0xe>
 80126ac:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 80126b0:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 80126b4:	f008 fe82 	bl	801b3bc <uxr_process_heartbeat>
 80126b8:	4642      	mov	r2, r8
 80126ba:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 80126be:	4620      	mov	r0, r4
 80126c0:	f7ff fdf8 	bl	80122b4 <write_submessage_acknack.isra.0>
 80126c4:	e781      	b.n	80125ca <read_submessage_list+0xe>
 80126c6:	a910      	add	r1, sp, #64	; 0x40
 80126c8:	4628      	mov	r0, r5
 80126ca:	f002 f977 	bl	80149bc <uxr_deserialize_ACKNACK_Payload>
 80126ce:	2100      	movs	r1, #0
 80126d0:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80126d4:	f000 fe5c 	bl	8013390 <uxr_stream_id_from_raw>
 80126d8:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80126dc:	900d      	str	r0, [sp, #52]	; 0x34
 80126de:	f104 0008 	add.w	r0, r4, #8
 80126e2:	f000 ff2d 	bl	8013540 <uxr_get_output_reliable_stream>
 80126e6:	4680      	mov	r8, r0
 80126e8:	2800      	cmp	r0, #0
 80126ea:	f43f af6e 	beq.w	80125ca <read_submessage_list+0xe>
 80126ee:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 80126f2:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 80126f6:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 80126fa:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80126fe:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8012702:	b289      	uxth	r1, r1
 8012704:	f009 f9bc 	bl	801ba80 <uxr_process_acknack>
 8012708:	4640      	mov	r0, r8
 801270a:	f009 f97d 	bl	801ba08 <uxr_begin_output_nack_buffer_it>
 801270e:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 8012712:	e005      	b.n	8012720 <read_submessage_list+0x164>
 8012714:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012716:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 801271a:	e9d3 0900 	ldrd	r0, r9, [r3]
 801271e:	47c8      	blx	r9
 8012720:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 8012724:	aa0f      	add	r2, sp, #60	; 0x3c
 8012726:	4651      	mov	r1, sl
 8012728:	4640      	mov	r0, r8
 801272a:	f009 f96f 	bl	801ba0c <uxr_next_reliable_nack_buffer_to_send>
 801272e:	2800      	cmp	r0, #0
 8012730:	d1f0      	bne.n	8012714 <read_submessage_list+0x158>
 8012732:	e74a      	b.n	80125ca <read_submessage_list+0xe>
 8012734:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8012738:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 801273c:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 8012740:	4628      	mov	r0, r5
 8012742:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 8012746:	4651      	mov	r1, sl
 8012748:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 801274c:	f1a8 0804 	sub.w	r8, r8, #4
 8012750:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 8012754:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 8012758:	fa1f f888 	uxth.w	r8, r8
 801275c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8012760:	f009 090e 	and.w	r9, r9, #14
 8012764:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 8012768:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 801276c:	f001 fe88 	bl	8014480 <uxr_deserialize_BaseObjectRequest>
 8012770:	4650      	mov	r0, sl
 8012772:	a90f      	add	r1, sp, #60	; 0x3c
 8012774:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8012778:	f000 fdca 	bl	8013310 <uxr_parse_base_object_request>
 801277c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801277e:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 8012782:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 8012786:	9110      	str	r1, [sp, #64]	; 0x40
 8012788:	f1bb 0f00 	cmp.w	fp, #0
 801278c:	d006      	beq.n	801279c <read_submessage_list+0x1e0>
 801278e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8012792:	4652      	mov	r2, sl
 8012794:	4620      	mov	r0, r4
 8012796:	9300      	str	r3, [sp, #0]
 8012798:	2300      	movs	r3, #0
 801279a:	47d8      	blx	fp
 801279c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 801279e:	b182      	cbz	r2, 80127c2 <read_submessage_list+0x206>
 80127a0:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80127a2:	f04f 0c00 	mov.w	ip, #0
 80127a6:	3902      	subs	r1, #2
 80127a8:	e003      	b.n	80127b2 <read_submessage_list+0x1f6>
 80127aa:	f10c 0c01 	add.w	ip, ip, #1
 80127ae:	4594      	cmp	ip, r2
 80127b0:	d007      	beq.n	80127c2 <read_submessage_list+0x206>
 80127b2:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 80127b6:	4553      	cmp	r3, sl
 80127b8:	d1f7      	bne.n	80127aa <read_submessage_list+0x1ee>
 80127ba:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80127bc:	2200      	movs	r2, #0
 80127be:	f803 200c 	strb.w	r2, [r3, ip]
 80127c2:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 80127c6:	464b      	mov	r3, r9
 80127c8:	4642      	mov	r2, r8
 80127ca:	4620      	mov	r0, r4
 80127cc:	9102      	str	r1, [sp, #8]
 80127ce:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80127d0:	9101      	str	r1, [sp, #4]
 80127d2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80127d4:	9100      	str	r1, [sp, #0]
 80127d6:	4629      	mov	r1, r5
 80127d8:	f009 fa14 	bl	801bc04 <read_submessage_format>
 80127dc:	e6f5      	b.n	80125ca <read_submessage_list+0xe>
 80127de:	4629      	mov	r1, r5
 80127e0:	4620      	mov	r0, r4
 80127e2:	f7ff fea3 	bl	801252c <read_submessage_info>
 80127e6:	e6f0      	b.n	80125ca <read_submessage_list+0xe>
 80127e8:	2a00      	cmp	r2, #0
 80127ea:	d03e      	beq.n	801286a <read_submessage_list+0x2ae>
 80127ec:	a910      	add	r1, sp, #64	; 0x40
 80127ee:	4628      	mov	r0, r5
 80127f0:	f002 f83c 	bl	801486c <uxr_deserialize_STATUS_Payload>
 80127f4:	a90e      	add	r1, sp, #56	; 0x38
 80127f6:	aa0d      	add	r2, sp, #52	; 0x34
 80127f8:	a810      	add	r0, sp, #64	; 0x40
 80127fa:	f000 fd89 	bl	8013310 <uxr_parse_base_object_request>
 80127fe:	990e      	ldr	r1, [sp, #56]	; 0x38
 8012800:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 8012804:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 8012808:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
 801280c:	910f      	str	r1, [sp, #60]	; 0x3c
 801280e:	f1ba 0f00 	cmp.w	sl, #0
 8012812:	d006      	beq.n	8012822 <read_submessage_list+0x266>
 8012814:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8012818:	4642      	mov	r2, r8
 801281a:	4620      	mov	r0, r4
 801281c:	9300      	str	r3, [sp, #0]
 801281e:	464b      	mov	r3, r9
 8012820:	47d0      	blx	sl
 8012822:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8012824:	2a00      	cmp	r2, #0
 8012826:	f43f aed0 	beq.w	80125ca <read_submessage_list+0xe>
 801282a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 801282c:	2100      	movs	r1, #0
 801282e:	3802      	subs	r0, #2
 8012830:	e003      	b.n	801283a <read_submessage_list+0x27e>
 8012832:	3101      	adds	r1, #1
 8012834:	4291      	cmp	r1, r2
 8012836:	f43f aec8 	beq.w	80125ca <read_submessage_list+0xe>
 801283a:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 801283e:	4543      	cmp	r3, r8
 8012840:	d1f7      	bne.n	8012832 <read_submessage_list+0x276>
 8012842:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8012844:	f803 9001 	strb.w	r9, [r3, r1]
 8012848:	e6bf      	b.n	80125ca <read_submessage_list+0xe>
 801284a:	2a00      	cmp	r2, #0
 801284c:	f47f aebd 	bne.w	80125ca <read_submessage_list+0xe>
 8012850:	4629      	mov	r1, r5
 8012852:	4620      	mov	r0, r4
 8012854:	f000 fca0 	bl	8013198 <uxr_read_create_session_status>
 8012858:	e6b7      	b.n	80125ca <read_submessage_list+0xe>
 801285a:	4629      	mov	r1, r5
 801285c:	4620      	mov	r0, r4
 801285e:	f7ff fcf3 	bl	8012248 <read_submessage_get_info>
 8012862:	e6b2      	b.n	80125ca <read_submessage_list+0xe>
 8012864:	b017      	add	sp, #92	; 0x5c
 8012866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801286a:	4629      	mov	r1, r5
 801286c:	4620      	mov	r0, r4
 801286e:	f000 fca1 	bl	80131b4 <uxr_read_delete_session_status>
 8012872:	e6aa      	b.n	80125ca <read_submessage_list+0xe>
 8012874:	f000 fefe 	bl	8013674 <uxr_nanos>
 8012878:	4642      	mov	r2, r8
 801287a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801287c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801287e:	fbc7 3206 	smlal	r3, r2, r7, r6
 8012882:	1818      	adds	r0, r3, r0
 8012884:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8012886:	eb42 0101 	adc.w	r1, r2, r1
 801288a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801288c:	4642      	mov	r2, r8
 801288e:	fbc7 3206 	smlal	r3, r2, r7, r6
 8012892:	469c      	mov	ip, r3
 8012894:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	; 0x40
 8012898:	fbc3 7806 	smlal	r7, r8, r3, r6
 801289c:	4643      	mov	r3, r8
 801289e:	eb1c 0c07 	adds.w	ip, ip, r7
 80128a2:	eb42 0203 	adc.w	r2, r2, r3
 80128a6:	ebb0 030c 	subs.w	r3, r0, ip
 80128aa:	eb61 0202 	sbc.w	r2, r1, r2
 80128ae:	2a00      	cmp	r2, #0
 80128b0:	db08      	blt.n	80128c4 <read_submessage_list+0x308>
 80128b2:	085b      	lsrs	r3, r3, #1
 80128b4:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 80128b8:	1052      	asrs	r2, r2, #1
 80128ba:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 80128be:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
 80128c2:	e6db      	b.n	801267c <read_submessage_list+0xc0>
 80128c4:	3301      	adds	r3, #1
 80128c6:	f142 0200 	adc.w	r2, r2, #0
 80128ca:	e7f2      	b.n	80128b2 <read_submessage_list+0x2f6>
 80128cc:	3b9aca00 	.word	0x3b9aca00

080128d0 <listen_message_reliably>:
 80128d0:	1e0b      	subs	r3, r1, #0
 80128d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128d6:	bfb8      	it	lt
 80128d8:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 80128dc:	b09d      	sub	sp, #116	; 0x74
 80128de:	4680      	mov	r8, r0
 80128e0:	9305      	str	r3, [sp, #20]
 80128e2:	f000 feab 	bl	801363c <uxr_millis>
 80128e6:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 80128ea:	4681      	mov	r9, r0
 80128ec:	2a00      	cmp	r2, #0
 80128ee:	f000 809a 	beq.w	8012a26 <listen_message_reliably+0x156>
 80128f2:	2600      	movs	r6, #0
 80128f4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80128f8:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 80128fc:	460f      	mov	r7, r1
 80128fe:	4630      	mov	r0, r6
 8012900:	9303      	str	r3, [sp, #12]
 8012902:	e00e      	b.n	8012922 <listen_message_reliably+0x52>
 8012904:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012906:	3601      	adds	r6, #1
 8012908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801290a:	455a      	cmp	r2, fp
 801290c:	9903      	ldr	r1, [sp, #12]
 801290e:	b2f0      	uxtb	r0, r6
 8012910:	eb73 0101 	sbcs.w	r1, r3, r1
 8012914:	da01      	bge.n	801291a <listen_message_reliably+0x4a>
 8012916:	4693      	mov	fp, r2
 8012918:	9303      	str	r3, [sp, #12]
 801291a:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 801291e:	4283      	cmp	r3, r0
 8012920:	d95f      	bls.n	80129e2 <listen_message_reliably+0x112>
 8012922:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8012926:	2102      	movs	r1, #2
 8012928:	2201      	movs	r2, #1
 801292a:	00e4      	lsls	r4, r4, #3
 801292c:	f000 fd02 	bl	8013334 <uxr_stream_id>
 8012930:	4601      	mov	r1, r0
 8012932:	f104 0520 	add.w	r5, r4, #32
 8012936:	463b      	mov	r3, r7
 8012938:	464a      	mov	r2, r9
 801293a:	9109      	str	r1, [sp, #36]	; 0x24
 801293c:	4445      	add	r5, r8
 801293e:	4628      	mov	r0, r5
 8012940:	f009 f836 	bl	801b9b0 <uxr_update_output_stream_heartbeat_timestamp>
 8012944:	eb08 0304 	add.w	r3, r8, r4
 8012948:	2800      	cmp	r0, #0
 801294a:	d0db      	beq.n	8012904 <listen_message_reliably+0x34>
 801294c:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 8012950:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 8012954:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8012958:	4640      	mov	r0, r8
 801295a:	3501      	adds	r5, #1
 801295c:	4444      	add	r4, r8
 801295e:	9304      	str	r3, [sp, #16]
 8012960:	f000 fcae 	bl	80132c0 <uxr_session_header_offset>
 8012964:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8012968:	2300      	movs	r3, #0
 801296a:	2211      	movs	r2, #17
 801296c:	a90c      	add	r1, sp, #48	; 0x30
 801296e:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8012972:	9000      	str	r0, [sp, #0]
 8012974:	4650      	mov	r0, sl
 8012976:	3601      	adds	r6, #1
 8012978:	f7ff f952 	bl	8011c20 <ucdr_init_buffer_origin_offset>
 801297c:	2300      	movs	r3, #0
 801297e:	2205      	movs	r2, #5
 8012980:	210b      	movs	r1, #11
 8012982:	4650      	mov	r0, sl
 8012984:	f000 fe14 	bl	80135b0 <uxr_buffer_submessage_header>
 8012988:	2101      	movs	r1, #1
 801298a:	8968      	ldrh	r0, [r5, #10]
 801298c:	f009 fa04 	bl	801bd98 <uxr_seq_num_add>
 8012990:	892b      	ldrh	r3, [r5, #8]
 8012992:	4602      	mov	r2, r0
 8012994:	a90a      	add	r1, sp, #40	; 0x28
 8012996:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801299a:	4650      	mov	r0, sl
 801299c:	9b04      	ldr	r3, [sp, #16]
 801299e:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80129a2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80129a6:	f002 f81d 	bl	80149e4 <uxr_serialize_HEARTBEAT_Payload>
 80129aa:	2200      	movs	r2, #0
 80129ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80129ae:	4640      	mov	r0, r8
 80129b0:	4611      	mov	r1, r2
 80129b2:	f000 fc31 	bl	8013218 <uxr_stamp_session_header>
 80129b6:	4650      	mov	r0, sl
 80129b8:	f7ff f972 	bl	8011ca0 <ucdr_buffer_length>
 80129bc:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 80129c0:	4602      	mov	r2, r0
 80129c2:	a90c      	add	r1, sp, #48	; 0x30
 80129c4:	e9d3 0500 	ldrd	r0, r5, [r3]
 80129c8:	47a8      	blx	r5
 80129ca:	9903      	ldr	r1, [sp, #12]
 80129cc:	b2f0      	uxtb	r0, r6
 80129ce:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 80129d2:	455a      	cmp	r2, fp
 80129d4:	eb73 0101 	sbcs.w	r1, r3, r1
 80129d8:	db9d      	blt.n	8012916 <listen_message_reliably+0x46>
 80129da:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 80129de:	4283      	cmp	r3, r0
 80129e0:	d89f      	bhi.n	8012922 <listen_message_reliably+0x52>
 80129e2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80129e6:	9a03      	ldr	r2, [sp, #12]
 80129e8:	429a      	cmp	r2, r3
 80129ea:	bf08      	it	eq
 80129ec:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 80129f0:	d019      	beq.n	8012a26 <listen_message_reliably+0x156>
 80129f2:	ebab 0309 	sub.w	r3, fp, r9
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	9d05      	ldr	r5, [sp, #20]
 80129fa:	f8d8 0070 	ldr.w	r0, [r8, #112]	; 0x70
 80129fe:	aa08      	add	r2, sp, #32
 8012a00:	bf08      	it	eq
 8012a02:	2301      	moveq	r3, #1
 8012a04:	a907      	add	r1, sp, #28
 8012a06:	6884      	ldr	r4, [r0, #8]
 8012a08:	429d      	cmp	r5, r3
 8012a0a:	6800      	ldr	r0, [r0, #0]
 8012a0c:	bfa8      	it	ge
 8012a0e:	461d      	movge	r5, r3
 8012a10:	462b      	mov	r3, r5
 8012a12:	47a0      	blx	r4
 8012a14:	b948      	cbnz	r0, 8012a2a <listen_message_reliably+0x15a>
 8012a16:	9b05      	ldr	r3, [sp, #20]
 8012a18:	1b5b      	subs	r3, r3, r5
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	9305      	str	r3, [sp, #20]
 8012a1e:	f73f af60 	bgt.w	80128e2 <listen_message_reliably+0x12>
 8012a22:	4604      	mov	r4, r0
 8012a24:	e012      	b.n	8012a4c <listen_message_reliably+0x17c>
 8012a26:	9b05      	ldr	r3, [sp, #20]
 8012a28:	e7e5      	b.n	80129f6 <listen_message_reliably+0x126>
 8012a2a:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8012a2e:	4604      	mov	r4, r0
 8012a30:	2500      	movs	r5, #0
 8012a32:	a80c      	add	r0, sp, #48	; 0x30
 8012a34:	f7ff f906 	bl	8011c44 <ucdr_init_buffer>
 8012a38:	f10d 031a 	add.w	r3, sp, #26
 8012a3c:	aa06      	add	r2, sp, #24
 8012a3e:	a90c      	add	r1, sp, #48	; 0x30
 8012a40:	4640      	mov	r0, r8
 8012a42:	f88d 5018 	strb.w	r5, [sp, #24]
 8012a46:	f000 fbfb 	bl	8013240 <uxr_read_session_header>
 8012a4a:	b918      	cbnz	r0, 8012a54 <listen_message_reliably+0x184>
 8012a4c:	4620      	mov	r0, r4
 8012a4e:	b01d      	add	sp, #116	; 0x74
 8012a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a54:	4629      	mov	r1, r5
 8012a56:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8012a5a:	f000 fc99 	bl	8013390 <uxr_stream_id_from_raw>
 8012a5e:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8012a62:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8012a66:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8012a6a:	2e01      	cmp	r6, #1
 8012a6c:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8012a70:	d04b      	beq.n	8012b0a <listen_message_reliably+0x23a>
 8012a72:	2e02      	cmp	r6, #2
 8012a74:	d00f      	beq.n	8012a96 <listen_message_reliably+0x1c6>
 8012a76:	2e00      	cmp	r6, #0
 8012a78:	d1e8      	bne.n	8012a4c <listen_message_reliably+0x17c>
 8012a7a:	4631      	mov	r1, r6
 8012a7c:	4630      	mov	r0, r6
 8012a7e:	f000 fc87 	bl	8013390 <uxr_stream_id_from_raw>
 8012a82:	4602      	mov	r2, r0
 8012a84:	a90c      	add	r1, sp, #48	; 0x30
 8012a86:	4640      	mov	r0, r8
 8012a88:	920a      	str	r2, [sp, #40]	; 0x28
 8012a8a:	f7ff fd97 	bl	80125bc <read_submessage_list>
 8012a8e:	4620      	mov	r0, r4
 8012a90:	b01d      	add	sp, #116	; 0x74
 8012a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a96:	4629      	mov	r1, r5
 8012a98:	f108 0008 	add.w	r0, r8, #8
 8012a9c:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 8012aa0:	f000 fd64 	bl	801356c <uxr_get_input_reliable_stream>
 8012aa4:	4607      	mov	r7, r0
 8012aa6:	b338      	cbz	r0, 8012af8 <listen_message_reliably+0x228>
 8012aa8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012aaa:	a80c      	add	r0, sp, #48	; 0x30
 8012aac:	9203      	str	r2, [sp, #12]
 8012aae:	f7ff f8fb 	bl	8011ca8 <ucdr_buffer_remaining>
 8012ab2:	4603      	mov	r3, r0
 8012ab4:	f10d 0019 	add.w	r0, sp, #25
 8012ab8:	9a03      	ldr	r2, [sp, #12]
 8012aba:	4651      	mov	r1, sl
 8012abc:	9000      	str	r0, [sp, #0]
 8012abe:	4638      	mov	r0, r7
 8012ac0:	f008 fb80 	bl	801b1c4 <uxr_receive_reliable_message>
 8012ac4:	b1c0      	cbz	r0, 8012af8 <listen_message_reliably+0x228>
 8012ac6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8012aca:	b393      	cbz	r3, 8012b32 <listen_message_reliably+0x262>
 8012acc:	ae14      	add	r6, sp, #80	; 0x50
 8012ace:	f04f 0a02 	mov.w	sl, #2
 8012ad2:	e00a      	b.n	8012aea <listen_message_reliably+0x21a>
 8012ad4:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 8012ad8:	4631      	mov	r1, r6
 8012ada:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 8012ade:	4640      	mov	r0, r8
 8012ae0:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 8012ae4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012ae6:	f7ff fd69 	bl	80125bc <read_submessage_list>
 8012aea:	2204      	movs	r2, #4
 8012aec:	4631      	mov	r1, r6
 8012aee:	4638      	mov	r0, r7
 8012af0:	f008 fbea 	bl	801b2c8 <uxr_next_input_reliable_buffer_available>
 8012af4:	2800      	cmp	r0, #0
 8012af6:	d1ed      	bne.n	8012ad4 <listen_message_reliably+0x204>
 8012af8:	4640      	mov	r0, r8
 8012afa:	462a      	mov	r2, r5
 8012afc:	4649      	mov	r1, r9
 8012afe:	f7ff fbd9 	bl	80122b4 <write_submessage_acknack.isra.0>
 8012b02:	4620      	mov	r0, r4
 8012b04:	b01d      	add	sp, #116	; 0x74
 8012b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b0a:	4629      	mov	r1, r5
 8012b0c:	f108 0008 	add.w	r0, r8, #8
 8012b10:	f000 fd22 	bl	8013558 <uxr_get_input_best_effort_stream>
 8012b14:	2800      	cmp	r0, #0
 8012b16:	d099      	beq.n	8012a4c <listen_message_reliably+0x17c>
 8012b18:	4651      	mov	r1, sl
 8012b1a:	f008 fac9 	bl	801b0b0 <uxr_receive_best_effort_message>
 8012b1e:	2800      	cmp	r0, #0
 8012b20:	d094      	beq.n	8012a4c <listen_message_reliably+0x17c>
 8012b22:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8012b26:	a90c      	add	r1, sp, #48	; 0x30
 8012b28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012b2a:	4640      	mov	r0, r8
 8012b2c:	f7ff fd46 	bl	80125bc <read_submessage_list>
 8012b30:	e78c      	b.n	8012a4c <listen_message_reliably+0x17c>
 8012b32:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8012b36:	a90c      	add	r1, sp, #48	; 0x30
 8012b38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012b3a:	4640      	mov	r0, r8
 8012b3c:	f7ff fd3e 	bl	80125bc <read_submessage_list>
 8012b40:	e7c4      	b.n	8012acc <listen_message_reliably+0x1fc>
 8012b42:	bf00      	nop

08012b44 <uxr_run_session_timeout>:
 8012b44:	b570      	push	{r4, r5, r6, lr}
 8012b46:	4604      	mov	r4, r0
 8012b48:	460d      	mov	r5, r1
 8012b4a:	f000 fd77 	bl	801363c <uxr_millis>
 8012b4e:	4606      	mov	r6, r0
 8012b50:	4620      	mov	r0, r4
 8012b52:	f7ff fc77 	bl	8012444 <uxr_flash_output_streams>
 8012b56:	4629      	mov	r1, r5
 8012b58:	4620      	mov	r0, r4
 8012b5a:	f7ff feb9 	bl	80128d0 <listen_message_reliably>
 8012b5e:	f000 fd6d 	bl	801363c <uxr_millis>
 8012b62:	1b83      	subs	r3, r0, r6
 8012b64:	1ae9      	subs	r1, r5, r3
 8012b66:	2900      	cmp	r1, #0
 8012b68:	dcf6      	bgt.n	8012b58 <uxr_run_session_timeout+0x14>
 8012b6a:	f104 0008 	add.w	r0, r4, #8
 8012b6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012b72:	f000 bd07 	b.w	8013584 <uxr_output_streams_confirmed>
 8012b76:	bf00      	nop

08012b78 <uxr_run_session_until_data>:
 8012b78:	b570      	push	{r4, r5, r6, lr}
 8012b7a:	4604      	mov	r4, r0
 8012b7c:	460d      	mov	r5, r1
 8012b7e:	f000 fd5d 	bl	801363c <uxr_millis>
 8012b82:	4606      	mov	r6, r0
 8012b84:	4620      	mov	r0, r4
 8012b86:	f7ff fc5d 	bl	8012444 <uxr_flash_output_streams>
 8012b8a:	2300      	movs	r3, #0
 8012b8c:	4629      	mov	r1, r5
 8012b8e:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8012b92:	e005      	b.n	8012ba0 <uxr_run_session_until_data+0x28>
 8012b94:	f000 fd52 	bl	801363c <uxr_millis>
 8012b98:	1b83      	subs	r3, r0, r6
 8012b9a:	1ae9      	subs	r1, r5, r3
 8012b9c:	2900      	cmp	r1, #0
 8012b9e:	dd07      	ble.n	8012bb0 <uxr_run_session_until_data+0x38>
 8012ba0:	4620      	mov	r0, r4
 8012ba2:	f7ff fe95 	bl	80128d0 <listen_message_reliably>
 8012ba6:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8012baa:	2800      	cmp	r0, #0
 8012bac:	d0f2      	beq.n	8012b94 <uxr_run_session_until_data+0x1c>
 8012bae:	bd70      	pop	{r4, r5, r6, pc}
 8012bb0:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8012bb4:	bd70      	pop	{r4, r5, r6, pc}
 8012bb6:	bf00      	nop

08012bb8 <uxr_run_session_until_confirm_delivery>:
 8012bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bbc:	4606      	mov	r6, r0
 8012bbe:	460d      	mov	r5, r1
 8012bc0:	f000 fd3c 	bl	801363c <uxr_millis>
 8012bc4:	4607      	mov	r7, r0
 8012bc6:	4630      	mov	r0, r6
 8012bc8:	f106 0808 	add.w	r8, r6, #8
 8012bcc:	f7ff fc3a 	bl	8012444 <uxr_flash_output_streams>
 8012bd0:	2d00      	cmp	r5, #0
 8012bd2:	db10      	blt.n	8012bf6 <uxr_run_session_until_confirm_delivery+0x3e>
 8012bd4:	462c      	mov	r4, r5
 8012bd6:	e006      	b.n	8012be6 <uxr_run_session_until_confirm_delivery+0x2e>
 8012bd8:	f7ff fe7a 	bl	80128d0 <listen_message_reliably>
 8012bdc:	f000 fd2e 	bl	801363c <uxr_millis>
 8012be0:	1bc3      	subs	r3, r0, r7
 8012be2:	1aec      	subs	r4, r5, r3
 8012be4:	d407      	bmi.n	8012bf6 <uxr_run_session_until_confirm_delivery+0x3e>
 8012be6:	4640      	mov	r0, r8
 8012be8:	f000 fccc 	bl	8013584 <uxr_output_streams_confirmed>
 8012bec:	4603      	mov	r3, r0
 8012bee:	4621      	mov	r1, r4
 8012bf0:	4630      	mov	r0, r6
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d0f0      	beq.n	8012bd8 <uxr_run_session_until_confirm_delivery+0x20>
 8012bf6:	4640      	mov	r0, r8
 8012bf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012bfc:	f000 bcc2 	b.w	8013584 <uxr_output_streams_confirmed>

08012c00 <uxr_run_session_until_all_status>:
 8012c00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c04:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8012c08:	4606      	mov	r6, r0
 8012c0a:	4688      	mov	r8, r1
 8012c0c:	4692      	mov	sl, r2
 8012c0e:	461f      	mov	r7, r3
 8012c10:	f7ff fc18 	bl	8012444 <uxr_flash_output_streams>
 8012c14:	f1bb 0f00 	cmp.w	fp, #0
 8012c18:	d004      	beq.n	8012c24 <uxr_run_session_until_all_status+0x24>
 8012c1a:	465a      	mov	r2, fp
 8012c1c:	21ff      	movs	r1, #255	; 0xff
 8012c1e:	4638      	mov	r0, r7
 8012c20:	f00b fe34 	bl	801e88c <memset>
 8012c24:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 8012c28:	1e7d      	subs	r5, r7, #1
 8012c2a:	e9c6 a71d 	strd	sl, r7, [r6, #116]	; 0x74
 8012c2e:	f000 fd05 	bl	801363c <uxr_millis>
 8012c32:	4641      	mov	r1, r8
 8012c34:	4681      	mov	r9, r0
 8012c36:	4630      	mov	r0, r6
 8012c38:	f7ff fe4a 	bl	80128d0 <listen_message_reliably>
 8012c3c:	f000 fcfe 	bl	801363c <uxr_millis>
 8012c40:	eba0 0009 	sub.w	r0, r0, r9
 8012c44:	eba8 0100 	sub.w	r1, r8, r0
 8012c48:	f1bb 0f00 	cmp.w	fp, #0
 8012c4c:	d029      	beq.n	8012ca2 <uxr_run_session_until_all_status+0xa2>
 8012c4e:	46ae      	mov	lr, r5
 8012c50:	f04f 0c00 	mov.w	ip, #0
 8012c54:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8012c58:	2cff      	cmp	r4, #255	; 0xff
 8012c5a:	d015      	beq.n	8012c88 <uxr_run_session_until_all_status+0x88>
 8012c5c:	f10c 0c01 	add.w	ip, ip, #1
 8012c60:	45e3      	cmp	fp, ip
 8012c62:	d8f7      	bhi.n	8012c54 <uxr_run_session_until_all_status+0x54>
 8012c64:	2300      	movs	r3, #0
 8012c66:	67f3      	str	r3, [r6, #124]	; 0x7c
 8012c68:	e000      	b.n	8012c6c <uxr_run_session_until_all_status+0x6c>
 8012c6a:	b158      	cbz	r0, 8012c84 <uxr_run_session_until_all_status+0x84>
 8012c6c:	462b      	mov	r3, r5
 8012c6e:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8012c72:	3302      	adds	r3, #2
 8012c74:	2801      	cmp	r0, #1
 8012c76:	eba3 0307 	sub.w	r3, r3, r7
 8012c7a:	bf8c      	ite	hi
 8012c7c:	2000      	movhi	r0, #0
 8012c7e:	2001      	movls	r0, #1
 8012c80:	459b      	cmp	fp, r3
 8012c82:	d8f2      	bhi.n	8012c6a <uxr_run_session_until_all_status+0x6a>
 8012c84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c88:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 8012c8c:	f10c 0c01 	add.w	ip, ip, #1
 8012c90:	45dc      	cmp	ip, fp
 8012c92:	d201      	bcs.n	8012c98 <uxr_run_session_until_all_status+0x98>
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d0dd      	beq.n	8012c54 <uxr_run_session_until_all_status+0x54>
 8012c98:	2900      	cmp	r1, #0
 8012c9a:	dde3      	ble.n	8012c64 <uxr_run_session_until_all_status+0x64>
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d1ca      	bne.n	8012c36 <uxr_run_session_until_all_status+0x36>
 8012ca0:	e7e0      	b.n	8012c64 <uxr_run_session_until_all_status+0x64>
 8012ca2:	2001      	movs	r0, #1
 8012ca4:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 8012ca8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012cac <wait_session_status>:
 8012cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cb0:	4604      	mov	r4, r0
 8012cb2:	b09d      	sub	sp, #116	; 0x74
 8012cb4:	20ff      	movs	r0, #255	; 0xff
 8012cb6:	9303      	str	r3, [sp, #12]
 8012cb8:	7160      	strb	r0, [r4, #5]
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	f000 80b6 	beq.w	8012e2c <wait_session_status+0x180>
 8012cc0:	4689      	mov	r9, r1
 8012cc2:	4692      	mov	sl, r2
 8012cc4:	f04f 0b00 	mov.w	fp, #0
 8012cc8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012cca:	4652      	mov	r2, sl
 8012ccc:	4649      	mov	r1, r9
 8012cce:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012cd2:	47a8      	blx	r5
 8012cd4:	f000 fcb2 	bl	801363c <uxr_millis>
 8012cd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012cdc:	4605      	mov	r5, r0
 8012cde:	e009      	b.n	8012cf4 <wait_session_status+0x48>
 8012ce0:	f000 fcac 	bl	801363c <uxr_millis>
 8012ce4:	1b40      	subs	r0, r0, r5
 8012ce6:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	dd40      	ble.n	8012d70 <wait_session_status+0xc4>
 8012cee:	7960      	ldrb	r0, [r4, #5]
 8012cf0:	28ff      	cmp	r0, #255	; 0xff
 8012cf2:	d145      	bne.n	8012d80 <wait_session_status+0xd4>
 8012cf4:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8012cf6:	a908      	add	r1, sp, #32
 8012cf8:	6896      	ldr	r6, [r2, #8]
 8012cfa:	6810      	ldr	r0, [r2, #0]
 8012cfc:	aa09      	add	r2, sp, #36	; 0x24
 8012cfe:	47b0      	blx	r6
 8012d00:	2800      	cmp	r0, #0
 8012d02:	d0ed      	beq.n	8012ce0 <wait_session_status+0x34>
 8012d04:	a80c      	add	r0, sp, #48	; 0x30
 8012d06:	2600      	movs	r6, #0
 8012d08:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8012d0c:	f7fe ff9a 	bl	8011c44 <ucdr_init_buffer>
 8012d10:	f10d 031e 	add.w	r3, sp, #30
 8012d14:	aa07      	add	r2, sp, #28
 8012d16:	a90c      	add	r1, sp, #48	; 0x30
 8012d18:	4620      	mov	r0, r4
 8012d1a:	f88d 601c 	strb.w	r6, [sp, #28]
 8012d1e:	f000 fa8f 	bl	8013240 <uxr_read_session_header>
 8012d22:	2800      	cmp	r0, #0
 8012d24:	d0dc      	beq.n	8012ce0 <wait_session_status+0x34>
 8012d26:	4631      	mov	r1, r6
 8012d28:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8012d2c:	f000 fb30 	bl	8013390 <uxr_stream_id_from_raw>
 8012d30:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8012d34:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8012d38:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8012d3c:	2f01      	cmp	r7, #1
 8012d3e:	9302      	str	r3, [sp, #8]
 8012d40:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8012d44:	d05c      	beq.n	8012e00 <wait_session_status+0x154>
 8012d46:	2f02      	cmp	r7, #2
 8012d48:	d020      	beq.n	8012d8c <wait_session_status+0xe0>
 8012d4a:	2f00      	cmp	r7, #0
 8012d4c:	d1c8      	bne.n	8012ce0 <wait_session_status+0x34>
 8012d4e:	4639      	mov	r1, r7
 8012d50:	4638      	mov	r0, r7
 8012d52:	f000 fb1d 	bl	8013390 <uxr_stream_id_from_raw>
 8012d56:	a90c      	add	r1, sp, #48	; 0x30
 8012d58:	4602      	mov	r2, r0
 8012d5a:	900b      	str	r0, [sp, #44]	; 0x2c
 8012d5c:	4620      	mov	r0, r4
 8012d5e:	f7ff fc2d 	bl	80125bc <read_submessage_list>
 8012d62:	f000 fc6b 	bl	801363c <uxr_millis>
 8012d66:	1b40      	subs	r0, r0, r5
 8012d68:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	dcbe      	bgt.n	8012cee <wait_session_status+0x42>
 8012d70:	f10b 0b01 	add.w	fp, fp, #1
 8012d74:	9b03      	ldr	r3, [sp, #12]
 8012d76:	7960      	ldrb	r0, [r4, #5]
 8012d78:	455b      	cmp	r3, fp
 8012d7a:	d001      	beq.n	8012d80 <wait_session_status+0xd4>
 8012d7c:	28ff      	cmp	r0, #255	; 0xff
 8012d7e:	d0a3      	beq.n	8012cc8 <wait_session_status+0x1c>
 8012d80:	38ff      	subs	r0, #255	; 0xff
 8012d82:	bf18      	it	ne
 8012d84:	2001      	movne	r0, #1
 8012d86:	b01d      	add	sp, #116	; 0x74
 8012d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d8c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8012d90:	4631      	mov	r1, r6
 8012d92:	f104 0008 	add.w	r0, r4, #8
 8012d96:	9304      	str	r3, [sp, #16]
 8012d98:	f000 fbe8 	bl	801356c <uxr_get_input_reliable_stream>
 8012d9c:	4680      	mov	r8, r0
 8012d9e:	b348      	cbz	r0, 8012df4 <wait_session_status+0x148>
 8012da0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012da2:	a80c      	add	r0, sp, #48	; 0x30
 8012da4:	9205      	str	r2, [sp, #20]
 8012da6:	f7fe ff7f 	bl	8011ca8 <ucdr_buffer_remaining>
 8012daa:	4603      	mov	r3, r0
 8012dac:	f10d 001d 	add.w	r0, sp, #29
 8012db0:	9a05      	ldr	r2, [sp, #20]
 8012db2:	9000      	str	r0, [sp, #0]
 8012db4:	4640      	mov	r0, r8
 8012db6:	9902      	ldr	r1, [sp, #8]
 8012db8:	f008 fa04 	bl	801b1c4 <uxr_receive_reliable_message>
 8012dbc:	b1d0      	cbz	r0, 8012df4 <wait_session_status+0x148>
 8012dbe:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d03a      	beq.n	8012e3c <wait_session_status+0x190>
 8012dc6:	9f04      	ldr	r7, [sp, #16]
 8012dc8:	e00a      	b.n	8012de0 <wait_session_status+0x134>
 8012dca:	f04f 0302 	mov.w	r3, #2
 8012dce:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 8012dd2:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8012dd6:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8012dda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012ddc:	f7ff fbee 	bl	80125bc <read_submessage_list>
 8012de0:	a914      	add	r1, sp, #80	; 0x50
 8012de2:	2204      	movs	r2, #4
 8012de4:	4640      	mov	r0, r8
 8012de6:	f008 fa6f 	bl	801b2c8 <uxr_next_input_reliable_buffer_available>
 8012dea:	4603      	mov	r3, r0
 8012dec:	a914      	add	r1, sp, #80	; 0x50
 8012dee:	4620      	mov	r0, r4
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d1ea      	bne.n	8012dca <wait_session_status+0x11e>
 8012df4:	4632      	mov	r2, r6
 8012df6:	9904      	ldr	r1, [sp, #16]
 8012df8:	4620      	mov	r0, r4
 8012dfa:	f7ff fa5b 	bl	80122b4 <write_submessage_acknack.isra.0>
 8012dfe:	e76f      	b.n	8012ce0 <wait_session_status+0x34>
 8012e00:	4631      	mov	r1, r6
 8012e02:	f104 0008 	add.w	r0, r4, #8
 8012e06:	f000 fba7 	bl	8013558 <uxr_get_input_best_effort_stream>
 8012e0a:	2800      	cmp	r0, #0
 8012e0c:	f43f af68 	beq.w	8012ce0 <wait_session_status+0x34>
 8012e10:	9902      	ldr	r1, [sp, #8]
 8012e12:	f008 f94d 	bl	801b0b0 <uxr_receive_best_effort_message>
 8012e16:	2800      	cmp	r0, #0
 8012e18:	f43f af62 	beq.w	8012ce0 <wait_session_status+0x34>
 8012e1c:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8012e20:	a90c      	add	r1, sp, #48	; 0x30
 8012e22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012e24:	4620      	mov	r0, r4
 8012e26:	f7ff fbc9 	bl	80125bc <read_submessage_list>
 8012e2a:	e759      	b.n	8012ce0 <wait_session_status+0x34>
 8012e2c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012e2e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8012e32:	47a0      	blx	r4
 8012e34:	2001      	movs	r0, #1
 8012e36:	b01d      	add	sp, #116	; 0x74
 8012e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e3c:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8012e40:	a90c      	add	r1, sp, #48	; 0x30
 8012e42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012e44:	4620      	mov	r0, r4
 8012e46:	f7ff fbb9 	bl	80125bc <read_submessage_list>
 8012e4a:	e7bc      	b.n	8012dc6 <wait_session_status+0x11a>

08012e4c <uxr_delete_session_retries>:
 8012e4c:	b530      	push	{r4, r5, lr}
 8012e4e:	b08f      	sub	sp, #60	; 0x3c
 8012e50:	4604      	mov	r4, r0
 8012e52:	460d      	mov	r5, r1
 8012e54:	f000 fa34 	bl	80132c0 <uxr_session_header_offset>
 8012e58:	2300      	movs	r3, #0
 8012e5a:	2210      	movs	r2, #16
 8012e5c:	a902      	add	r1, sp, #8
 8012e5e:	9000      	str	r0, [sp, #0]
 8012e60:	a806      	add	r0, sp, #24
 8012e62:	f7fe fedd 	bl	8011c20 <ucdr_init_buffer_origin_offset>
 8012e66:	a906      	add	r1, sp, #24
 8012e68:	4620      	mov	r0, r4
 8012e6a:	f000 f979 	bl	8013160 <uxr_buffer_delete_session>
 8012e6e:	2200      	movs	r2, #0
 8012e70:	9b06      	ldr	r3, [sp, #24]
 8012e72:	4620      	mov	r0, r4
 8012e74:	4611      	mov	r1, r2
 8012e76:	f000 f9cf 	bl	8013218 <uxr_stamp_session_header>
 8012e7a:	a806      	add	r0, sp, #24
 8012e7c:	f7fe ff10 	bl	8011ca0 <ucdr_buffer_length>
 8012e80:	462b      	mov	r3, r5
 8012e82:	4602      	mov	r2, r0
 8012e84:	a902      	add	r1, sp, #8
 8012e86:	4620      	mov	r0, r4
 8012e88:	f7ff ff10 	bl	8012cac <wait_session_status>
 8012e8c:	b118      	cbz	r0, 8012e96 <uxr_delete_session_retries+0x4a>
 8012e8e:	7960      	ldrb	r0, [r4, #5]
 8012e90:	fab0 f080 	clz	r0, r0
 8012e94:	0940      	lsrs	r0, r0, #5
 8012e96:	b00f      	add	sp, #60	; 0x3c
 8012e98:	bd30      	pop	{r4, r5, pc}
 8012e9a:	bf00      	nop

08012e9c <uxr_create_session>:
 8012e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ea0:	f100 0b08 	add.w	fp, r0, #8
 8012ea4:	4604      	mov	r4, r0
 8012ea6:	b0ab      	sub	sp, #172	; 0xac
 8012ea8:	4658      	mov	r0, fp
 8012eaa:	465e      	mov	r6, fp
 8012eac:	f000 faa6 	bl	80133fc <uxr_reset_stream_storage>
 8012eb0:	4620      	mov	r0, r4
 8012eb2:	f000 fa05 	bl	80132c0 <uxr_session_header_offset>
 8012eb6:	2300      	movs	r3, #0
 8012eb8:	221c      	movs	r2, #28
 8012eba:	a90b      	add	r1, sp, #44	; 0x2c
 8012ebc:	9000      	str	r0, [sp, #0]
 8012ebe:	a812      	add	r0, sp, #72	; 0x48
 8012ec0:	f7fe feae 	bl	8011c20 <ucdr_init_buffer_origin_offset>
 8012ec4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012ec6:	a912      	add	r1, sp, #72	; 0x48
 8012ec8:	4620      	mov	r0, r4
 8012eca:	8a1a      	ldrh	r2, [r3, #16]
 8012ecc:	3a04      	subs	r2, #4
 8012ece:	b292      	uxth	r2, r2
 8012ed0:	f000 f91c 	bl	801310c <uxr_buffer_create_session>
 8012ed4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8012ed6:	4620      	mov	r0, r4
 8012ed8:	f000 f98a 	bl	80131f0 <uxr_stamp_create_session_header>
 8012edc:	a812      	add	r0, sp, #72	; 0x48
 8012ede:	f7fe fedf 	bl	8011ca0 <ucdr_buffer_length>
 8012ee2:	23ff      	movs	r3, #255	; 0xff
 8012ee4:	4681      	mov	r9, r0
 8012ee6:	7163      	strb	r3, [r4, #5]
 8012ee8:	230a      	movs	r3, #10
 8012eea:	9303      	str	r3, [sp, #12]
 8012eec:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012eee:	464a      	mov	r2, r9
 8012ef0:	a90b      	add	r1, sp, #44	; 0x2c
 8012ef2:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012ef6:	47a8      	blx	r5
 8012ef8:	f000 fba0 	bl	801363c <uxr_millis>
 8012efc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012f00:	4605      	mov	r5, r0
 8012f02:	e009      	b.n	8012f18 <uxr_create_session+0x7c>
 8012f04:	f000 fb9a 	bl	801363c <uxr_millis>
 8012f08:	1b40      	subs	r0, r0, r5
 8012f0a:	7962      	ldrb	r2, [r4, #5]
 8012f0c:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	dd38      	ble.n	8012f86 <uxr_create_session+0xea>
 8012f14:	2aff      	cmp	r2, #255	; 0xff
 8012f16:	d13c      	bne.n	8012f92 <uxr_create_session+0xf6>
 8012f18:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8012f1a:	a907      	add	r1, sp, #28
 8012f1c:	6897      	ldr	r7, [r2, #8]
 8012f1e:	6810      	ldr	r0, [r2, #0]
 8012f20:	aa08      	add	r2, sp, #32
 8012f22:	47b8      	blx	r7
 8012f24:	2800      	cmp	r0, #0
 8012f26:	d0ed      	beq.n	8012f04 <uxr_create_session+0x68>
 8012f28:	a81a      	add	r0, sp, #104	; 0x68
 8012f2a:	2700      	movs	r7, #0
 8012f2c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8012f30:	f7fe fe88 	bl	8011c44 <ucdr_init_buffer>
 8012f34:	f10d 031a 	add.w	r3, sp, #26
 8012f38:	aa06      	add	r2, sp, #24
 8012f3a:	a91a      	add	r1, sp, #104	; 0x68
 8012f3c:	4620      	mov	r0, r4
 8012f3e:	f88d 7018 	strb.w	r7, [sp, #24]
 8012f42:	f000 f97d 	bl	8013240 <uxr_read_session_header>
 8012f46:	2800      	cmp	r0, #0
 8012f48:	d0dc      	beq.n	8012f04 <uxr_create_session+0x68>
 8012f4a:	4639      	mov	r1, r7
 8012f4c:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8012f50:	f000 fa1e 	bl	8013390 <uxr_stream_id_from_raw>
 8012f54:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8012f58:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 8012f5c:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8012f60:	2f01      	cmp	r7, #1
 8012f62:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8012f66:	d053      	beq.n	8013010 <uxr_create_session+0x174>
 8012f68:	2f02      	cmp	r7, #2
 8012f6a:	d018      	beq.n	8012f9e <uxr_create_session+0x102>
 8012f6c:	2f00      	cmp	r7, #0
 8012f6e:	d1c9      	bne.n	8012f04 <uxr_create_session+0x68>
 8012f70:	4639      	mov	r1, r7
 8012f72:	4638      	mov	r0, r7
 8012f74:	f000 fa0c 	bl	8013390 <uxr_stream_id_from_raw>
 8012f78:	a91a      	add	r1, sp, #104	; 0x68
 8012f7a:	4602      	mov	r2, r0
 8012f7c:	900a      	str	r0, [sp, #40]	; 0x28
 8012f7e:	4620      	mov	r0, r4
 8012f80:	f7ff fb1c 	bl	80125bc <read_submessage_list>
 8012f84:	e7be      	b.n	8012f04 <uxr_create_session+0x68>
 8012f86:	9b03      	ldr	r3, [sp, #12]
 8012f88:	3b01      	subs	r3, #1
 8012f8a:	9303      	str	r3, [sp, #12]
 8012f8c:	d001      	beq.n	8012f92 <uxr_create_session+0xf6>
 8012f8e:	2aff      	cmp	r2, #255	; 0xff
 8012f90:	d0ac      	beq.n	8012eec <uxr_create_session+0x50>
 8012f92:	2a00      	cmp	r2, #0
 8012f94:	d051      	beq.n	801303a <uxr_create_session+0x19e>
 8012f96:	2000      	movs	r0, #0
 8012f98:	b02b      	add	sp, #172	; 0xac
 8012f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f9e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8012fa2:	4641      	mov	r1, r8
 8012fa4:	4630      	mov	r0, r6
 8012fa6:	9304      	str	r3, [sp, #16]
 8012fa8:	f000 fae0 	bl	801356c <uxr_get_input_reliable_stream>
 8012fac:	4682      	mov	sl, r0
 8012fae:	b348      	cbz	r0, 8013004 <uxr_create_session+0x168>
 8012fb0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012fb2:	a81a      	add	r0, sp, #104	; 0x68
 8012fb4:	9205      	str	r2, [sp, #20]
 8012fb6:	f7fe fe77 	bl	8011ca8 <ucdr_buffer_remaining>
 8012fba:	4603      	mov	r3, r0
 8012fbc:	f10d 0019 	add.w	r0, sp, #25
 8012fc0:	9a05      	ldr	r2, [sp, #20]
 8012fc2:	4659      	mov	r1, fp
 8012fc4:	9000      	str	r0, [sp, #0]
 8012fc6:	4650      	mov	r0, sl
 8012fc8:	f008 f8fc 	bl	801b1c4 <uxr_receive_reliable_message>
 8012fcc:	b1d0      	cbz	r0, 8013004 <uxr_create_session+0x168>
 8012fce:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d038      	beq.n	8013048 <uxr_create_session+0x1ac>
 8012fd6:	9f04      	ldr	r7, [sp, #16]
 8012fd8:	e00a      	b.n	8012ff0 <uxr_create_session+0x154>
 8012fda:	f04f 0302 	mov.w	r3, #2
 8012fde:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 8012fe2:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
 8012fe6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012fea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012fec:	f7ff fae6 	bl	80125bc <read_submessage_list>
 8012ff0:	a922      	add	r1, sp, #136	; 0x88
 8012ff2:	2204      	movs	r2, #4
 8012ff4:	4650      	mov	r0, sl
 8012ff6:	f008 f967 	bl	801b2c8 <uxr_next_input_reliable_buffer_available>
 8012ffa:	4603      	mov	r3, r0
 8012ffc:	a922      	add	r1, sp, #136	; 0x88
 8012ffe:	4620      	mov	r0, r4
 8013000:	2b00      	cmp	r3, #0
 8013002:	d1ea      	bne.n	8012fda <uxr_create_session+0x13e>
 8013004:	4642      	mov	r2, r8
 8013006:	9904      	ldr	r1, [sp, #16]
 8013008:	4620      	mov	r0, r4
 801300a:	f7ff f953 	bl	80122b4 <write_submessage_acknack.isra.0>
 801300e:	e779      	b.n	8012f04 <uxr_create_session+0x68>
 8013010:	4641      	mov	r1, r8
 8013012:	4630      	mov	r0, r6
 8013014:	f000 faa0 	bl	8013558 <uxr_get_input_best_effort_stream>
 8013018:	2800      	cmp	r0, #0
 801301a:	f43f af73 	beq.w	8012f04 <uxr_create_session+0x68>
 801301e:	4659      	mov	r1, fp
 8013020:	f008 f846 	bl	801b0b0 <uxr_receive_best_effort_message>
 8013024:	2800      	cmp	r0, #0
 8013026:	f43f af6d 	beq.w	8012f04 <uxr_create_session+0x68>
 801302a:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 801302e:	a91a      	add	r1, sp, #104	; 0x68
 8013030:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013032:	4620      	mov	r0, r4
 8013034:	f7ff fac2 	bl	80125bc <read_submessage_list>
 8013038:	e764      	b.n	8012f04 <uxr_create_session+0x68>
 801303a:	4630      	mov	r0, r6
 801303c:	f000 f9de 	bl	80133fc <uxr_reset_stream_storage>
 8013040:	2001      	movs	r0, #1
 8013042:	b02b      	add	sp, #172	; 0xac
 8013044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013048:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 801304c:	a91a      	add	r1, sp, #104	; 0x68
 801304e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013050:	4620      	mov	r0, r4
 8013052:	f7ff fab3 	bl	80125bc <read_submessage_list>
 8013056:	e7be      	b.n	8012fd6 <uxr_create_session+0x13a>

08013058 <uxr_prepare_stream_to_write_submessage>:
 8013058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801305c:	b082      	sub	sp, #8
 801305e:	4604      	mov	r4, r0
 8013060:	4610      	mov	r0, r2
 8013062:	4615      	mov	r5, r2
 8013064:	461e      	mov	r6, r3
 8013066:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 801306a:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 801306e:	f105 0904 	add.w	r9, r5, #4
 8013072:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8013076:	9101      	str	r1, [sp, #4]
 8013078:	f000 fada 	bl	8013630 <uxr_submessage_padding>
 801307c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013080:	4481      	add	r9, r0
 8013082:	2b01      	cmp	r3, #1
 8013084:	d01d      	beq.n	80130c2 <uxr_prepare_stream_to_write_submessage+0x6a>
 8013086:	2b02      	cmp	r3, #2
 8013088:	d116      	bne.n	80130b8 <uxr_prepare_stream_to_write_submessage+0x60>
 801308a:	f104 0008 	add.w	r0, r4, #8
 801308e:	4651      	mov	r1, sl
 8013090:	f000 fa56 	bl	8013540 <uxr_get_output_reliable_stream>
 8013094:	4604      	mov	r4, r0
 8013096:	b158      	cbz	r0, 80130b0 <uxr_prepare_stream_to_write_submessage+0x58>
 8013098:	4649      	mov	r1, r9
 801309a:	4632      	mov	r2, r6
 801309c:	f008 fada 	bl	801b654 <uxr_prepare_reliable_buffer_to_write>
 80130a0:	4604      	mov	r4, r0
 80130a2:	b12c      	cbz	r4, 80130b0 <uxr_prepare_stream_to_write_submessage+0x58>
 80130a4:	4643      	mov	r3, r8
 80130a6:	b2aa      	uxth	r2, r5
 80130a8:	4639      	mov	r1, r7
 80130aa:	4630      	mov	r0, r6
 80130ac:	f000 fa80 	bl	80135b0 <uxr_buffer_submessage_header>
 80130b0:	4620      	mov	r0, r4
 80130b2:	b002      	add	sp, #8
 80130b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80130b8:	2400      	movs	r4, #0
 80130ba:	4620      	mov	r0, r4
 80130bc:	b002      	add	sp, #8
 80130be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80130c2:	f104 0008 	add.w	r0, r4, #8
 80130c6:	4651      	mov	r1, sl
 80130c8:	f000 fa32 	bl	8013530 <uxr_get_output_best_effort_stream>
 80130cc:	4604      	mov	r4, r0
 80130ce:	2800      	cmp	r0, #0
 80130d0:	d0ee      	beq.n	80130b0 <uxr_prepare_stream_to_write_submessage+0x58>
 80130d2:	4649      	mov	r1, r9
 80130d4:	4632      	mov	r2, r6
 80130d6:	f008 f9e7 	bl	801b4a8 <uxr_prepare_best_effort_buffer_to_write>
 80130da:	4604      	mov	r4, r0
 80130dc:	e7e1      	b.n	80130a2 <uxr_prepare_stream_to_write_submessage+0x4a>
 80130de:	bf00      	nop

080130e0 <uxr_init_session_info>:
 80130e0:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 80130e4:	23ff      	movs	r3, #255	; 0xff
 80130e6:	7102      	strb	r2, [r0, #4]
 80130e8:	f880 c001 	strb.w	ip, [r0, #1]
 80130ec:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80130f0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80130f4:	7001      	strb	r1, [r0, #0]
 80130f6:	f880 c002 	strb.w	ip, [r0, #2]
 80130fa:	7143      	strb	r3, [r0, #5]
 80130fc:	70c2      	strb	r2, [r0, #3]
 80130fe:	b500      	push	{lr}
 8013100:	f04f 0e09 	mov.w	lr, #9
 8013104:	f8a0 e006 	strh.w	lr, [r0, #6]
 8013108:	f85d fb04 	ldr.w	pc, [sp], #4

0801310c <uxr_buffer_create_session>:
 801310c:	b530      	push	{r4, r5, lr}
 801310e:	2300      	movs	r3, #0
 8013110:	b089      	sub	sp, #36	; 0x24
 8013112:	4d12      	ldr	r5, [pc, #72]	; (801315c <uxr_buffer_create_session+0x50>)
 8013114:	460c      	mov	r4, r1
 8013116:	9307      	str	r3, [sp, #28]
 8013118:	4619      	mov	r1, r3
 801311a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801311e:	2201      	movs	r2, #1
 8013120:	9301      	str	r3, [sp, #4]
 8013122:	80c2      	strh	r2, [r0, #6]
 8013124:	f88d 2004 	strb.w	r2, [sp, #4]
 8013128:	682a      	ldr	r2, [r5, #0]
 801312a:	9303      	str	r3, [sp, #12]
 801312c:	9200      	str	r2, [sp, #0]
 801312e:	88aa      	ldrh	r2, [r5, #4]
 8013130:	9306      	str	r3, [sp, #24]
 8013132:	f8ad 2006 	strh.w	r2, [sp, #6]
 8013136:	f8d0 2001 	ldr.w	r2, [r0, #1]
 801313a:	9202      	str	r2, [sp, #8]
 801313c:	7802      	ldrb	r2, [r0, #0]
 801313e:	4620      	mov	r0, r4
 8013140:	f88d 200c 	strb.w	r2, [sp, #12]
 8013144:	2210      	movs	r2, #16
 8013146:	e9cd 3304 	strd	r3, r3, [sp, #16]
 801314a:	f000 fa31 	bl	80135b0 <uxr_buffer_submessage_header>
 801314e:	4669      	mov	r1, sp
 8013150:	4620      	mov	r0, r4
 8013152:	f001 faa3 	bl	801469c <uxr_serialize_CREATE_CLIENT_Payload>
 8013156:	b009      	add	sp, #36	; 0x24
 8013158:	bd30      	pop	{r4, r5, pc}
 801315a:	bf00      	nop
 801315c:	0801f930 	.word	0x0801f930

08013160 <uxr_buffer_delete_session>:
 8013160:	4a0c      	ldr	r2, [pc, #48]	; (8013194 <uxr_buffer_delete_session+0x34>)
 8013162:	2302      	movs	r3, #2
 8013164:	f44f 7c00 	mov.w	ip, #512	; 0x200
 8013168:	b510      	push	{r4, lr}
 801316a:	460c      	mov	r4, r1
 801316c:	b082      	sub	sp, #8
 801316e:	8911      	ldrh	r1, [r2, #8]
 8013170:	2204      	movs	r2, #4
 8013172:	80c3      	strh	r3, [r0, #6]
 8013174:	2300      	movs	r3, #0
 8013176:	f8ad 1006 	strh.w	r1, [sp, #6]
 801317a:	4620      	mov	r0, r4
 801317c:	2103      	movs	r1, #3
 801317e:	f8ad c004 	strh.w	ip, [sp, #4]
 8013182:	f000 fa15 	bl	80135b0 <uxr_buffer_submessage_header>
 8013186:	a901      	add	r1, sp, #4
 8013188:	4620      	mov	r0, r4
 801318a:	f001 fb2f 	bl	80147ec <uxr_serialize_DELETE_Payload>
 801318e:	b002      	add	sp, #8
 8013190:	bd10      	pop	{r4, pc}
 8013192:	bf00      	nop
 8013194:	0801f930 	.word	0x0801f930

08013198 <uxr_read_create_session_status>:
 8013198:	b510      	push	{r4, lr}
 801319a:	460b      	mov	r3, r1
 801319c:	b088      	sub	sp, #32
 801319e:	4604      	mov	r4, r0
 80131a0:	a901      	add	r1, sp, #4
 80131a2:	4618      	mov	r0, r3
 80131a4:	f001 fb32 	bl	801480c <uxr_deserialize_STATUS_AGENT_Payload>
 80131a8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80131ac:	7163      	strb	r3, [r4, #5]
 80131ae:	b008      	add	sp, #32
 80131b0:	bd10      	pop	{r4, pc}
 80131b2:	bf00      	nop

080131b4 <uxr_read_delete_session_status>:
 80131b4:	b510      	push	{r4, lr}
 80131b6:	b084      	sub	sp, #16
 80131b8:	4604      	mov	r4, r0
 80131ba:	4608      	mov	r0, r1
 80131bc:	a902      	add	r1, sp, #8
 80131be:	f001 fb55 	bl	801486c <uxr_deserialize_STATUS_Payload>
 80131c2:	88e3      	ldrh	r3, [r4, #6]
 80131c4:	2b02      	cmp	r3, #2
 80131c6:	d001      	beq.n	80131cc <uxr_read_delete_session_status+0x18>
 80131c8:	b004      	add	sp, #16
 80131ca:	bd10      	pop	{r4, pc}
 80131cc:	f10d 000a 	add.w	r0, sp, #10
 80131d0:	f7fe fff6 	bl	80121c0 <uxr_object_id_from_raw>
 80131d4:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80131d8:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80131dc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80131e0:	b29b      	uxth	r3, r3
 80131e2:	2b02      	cmp	r3, #2
 80131e4:	d1f0      	bne.n	80131c8 <uxr_read_delete_session_status+0x14>
 80131e6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80131ea:	7163      	strb	r3, [r4, #5]
 80131ec:	e7ec      	b.n	80131c8 <uxr_read_delete_session_status+0x14>
 80131ee:	bf00      	nop

080131f0 <uxr_stamp_create_session_header>:
 80131f0:	b510      	push	{r4, lr}
 80131f2:	2208      	movs	r2, #8
 80131f4:	b08a      	sub	sp, #40	; 0x28
 80131f6:	4604      	mov	r4, r0
 80131f8:	eb0d 0002 	add.w	r0, sp, r2
 80131fc:	f7fe fd22 	bl	8011c44 <ucdr_init_buffer>
 8013200:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013204:	2300      	movs	r3, #0
 8013206:	a802      	add	r0, sp, #8
 8013208:	f001 0180 	and.w	r1, r1, #128	; 0x80
 801320c:	9400      	str	r4, [sp, #0]
 801320e:	461a      	mov	r2, r3
 8013210:	f000 fbca 	bl	80139a8 <uxr_serialize_message_header>
 8013214:	b00a      	add	sp, #40	; 0x28
 8013216:	bd10      	pop	{r4, pc}

08013218 <uxr_stamp_session_header>:
 8013218:	b530      	push	{r4, r5, lr}
 801321a:	b08d      	sub	sp, #52	; 0x34
 801321c:	4604      	mov	r4, r0
 801321e:	460d      	mov	r5, r1
 8013220:	4619      	mov	r1, r3
 8013222:	a804      	add	r0, sp, #16
 8013224:	9203      	str	r2, [sp, #12]
 8013226:	2208      	movs	r2, #8
 8013228:	f7fe fd0c 	bl	8011c44 <ucdr_init_buffer>
 801322c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013230:	9b03      	ldr	r3, [sp, #12]
 8013232:	462a      	mov	r2, r5
 8013234:	a804      	add	r0, sp, #16
 8013236:	9400      	str	r4, [sp, #0]
 8013238:	f000 fbb6 	bl	80139a8 <uxr_serialize_message_header>
 801323c:	b00d      	add	sp, #52	; 0x34
 801323e:	bd30      	pop	{r4, r5, pc}

08013240 <uxr_read_session_header>:
 8013240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013244:	4607      	mov	r7, r0
 8013246:	b084      	sub	sp, #16
 8013248:	4608      	mov	r0, r1
 801324a:	460c      	mov	r4, r1
 801324c:	4615      	mov	r5, r2
 801324e:	461e      	mov	r6, r3
 8013250:	f7fe fd2a 	bl	8011ca8 <ucdr_buffer_remaining>
 8013254:	2808      	cmp	r0, #8
 8013256:	d803      	bhi.n	8013260 <uxr_read_session_header+0x20>
 8013258:	2000      	movs	r0, #0
 801325a:	b004      	add	sp, #16
 801325c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013260:	f10d 080c 	add.w	r8, sp, #12
 8013264:	4633      	mov	r3, r6
 8013266:	462a      	mov	r2, r5
 8013268:	4620      	mov	r0, r4
 801326a:	f10d 010b 	add.w	r1, sp, #11
 801326e:	f8cd 8000 	str.w	r8, [sp]
 8013272:	f000 fbb7 	bl	80139e4 <uxr_deserialize_message_header>
 8013276:	783a      	ldrb	r2, [r7, #0]
 8013278:	f89d 300b 	ldrb.w	r3, [sp, #11]
 801327c:	4293      	cmp	r3, r2
 801327e:	d1eb      	bne.n	8013258 <uxr_read_session_header+0x18>
 8013280:	061b      	lsls	r3, r3, #24
 8013282:	d41b      	bmi.n	80132bc <uxr_read_session_header+0x7c>
 8013284:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8013288:	787b      	ldrb	r3, [r7, #1]
 801328a:	429a      	cmp	r2, r3
 801328c:	d003      	beq.n	8013296 <uxr_read_session_header+0x56>
 801328e:	2001      	movs	r0, #1
 8013290:	f080 0001 	eor.w	r0, r0, #1
 8013294:	e7e1      	b.n	801325a <uxr_read_session_header+0x1a>
 8013296:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801329a:	1cb8      	adds	r0, r7, #2
 801329c:	78bb      	ldrb	r3, [r7, #2]
 801329e:	429a      	cmp	r2, r3
 80132a0:	d1f5      	bne.n	801328e <uxr_read_session_header+0x4e>
 80132a2:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80132a6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80132aa:	429a      	cmp	r2, r3
 80132ac:	d1ef      	bne.n	801328e <uxr_read_session_header+0x4e>
 80132ae:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80132b2:	7843      	ldrb	r3, [r0, #1]
 80132b4:	429a      	cmp	r2, r3
 80132b6:	d1ea      	bne.n	801328e <uxr_read_session_header+0x4e>
 80132b8:	2000      	movs	r0, #0
 80132ba:	e7e9      	b.n	8013290 <uxr_read_session_header+0x50>
 80132bc:	2001      	movs	r0, #1
 80132be:	e7cc      	b.n	801325a <uxr_read_session_header+0x1a>

080132c0 <uxr_session_header_offset>:
 80132c0:	f990 3000 	ldrsb.w	r3, [r0]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	bfac      	ite	ge
 80132c8:	2008      	movge	r0, #8
 80132ca:	2004      	movlt	r0, #4
 80132cc:	4770      	bx	lr
 80132ce:	bf00      	nop

080132d0 <uxr_init_base_object_request>:
 80132d0:	b510      	push	{r4, lr}
 80132d2:	b082      	sub	sp, #8
 80132d4:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 80132d8:	9101      	str	r1, [sp, #4]
 80132da:	88c3      	ldrh	r3, [r0, #6]
 80132dc:	f1a3 010a 	sub.w	r1, r3, #10
 80132e0:	b289      	uxth	r1, r1
 80132e2:	42a1      	cmp	r1, r4
 80132e4:	d80f      	bhi.n	8013306 <uxr_init_base_object_request+0x36>
 80132e6:	3301      	adds	r3, #1
 80132e8:	b29c      	uxth	r4, r3
 80132ea:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 80132ee:	b2db      	uxtb	r3, r3
 80132f0:	80c4      	strh	r4, [r0, #6]
 80132f2:	1c91      	adds	r1, r2, #2
 80132f4:	9801      	ldr	r0, [sp, #4]
 80132f6:	f882 c000 	strb.w	ip, [r2]
 80132fa:	7053      	strb	r3, [r2, #1]
 80132fc:	f7fe ff74 	bl	80121e8 <uxr_object_id_to_raw>
 8013300:	4620      	mov	r0, r4
 8013302:	b002      	add	sp, #8
 8013304:	bd10      	pop	{r4, pc}
 8013306:	230a      	movs	r3, #10
 8013308:	f04f 0c00 	mov.w	ip, #0
 801330c:	461c      	mov	r4, r3
 801330e:	e7ef      	b.n	80132f0 <uxr_init_base_object_request+0x20>

08013310 <uxr_parse_base_object_request>:
 8013310:	b570      	push	{r4, r5, r6, lr}
 8013312:	4604      	mov	r4, r0
 8013314:	3002      	adds	r0, #2
 8013316:	460d      	mov	r5, r1
 8013318:	4616      	mov	r6, r2
 801331a:	f7fe ff51 	bl	80121c0 <uxr_object_id_from_raw>
 801331e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8013322:	8028      	strh	r0, [r5, #0]
 8013324:	806b      	strh	r3, [r5, #2]
 8013326:	7822      	ldrb	r2, [r4, #0]
 8013328:	7863      	ldrb	r3, [r4, #1]
 801332a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801332e:	8033      	strh	r3, [r6, #0]
 8013330:	bd70      	pop	{r4, r5, r6, pc}
 8013332:	bf00      	nop

08013334 <uxr_stream_id>:
 8013334:	2901      	cmp	r1, #1
 8013336:	4684      	mov	ip, r0
 8013338:	b500      	push	{lr}
 801333a:	b083      	sub	sp, #12
 801333c:	d01f      	beq.n	801337e <uxr_stream_id+0x4a>
 801333e:	2902      	cmp	r1, #2
 8013340:	f04f 0e00 	mov.w	lr, #0
 8013344:	d020      	beq.n	8013388 <uxr_stream_id+0x54>
 8013346:	2300      	movs	r3, #0
 8013348:	2000      	movs	r0, #0
 801334a:	f36e 0307 	bfi	r3, lr, #0, #8
 801334e:	f36c 230f 	bfi	r3, ip, #8, #8
 8013352:	f361 4317 	bfi	r3, r1, #16, #8
 8013356:	f362 631f 	bfi	r3, r2, #24, #8
 801335a:	fa5f fc83 	uxtb.w	ip, r3
 801335e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8013362:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8013366:	0e1b      	lsrs	r3, r3, #24
 8013368:	f36c 0007 	bfi	r0, ip, #0, #8
 801336c:	f361 200f 	bfi	r0, r1, #8, #8
 8013370:	f362 4017 	bfi	r0, r2, #16, #8
 8013374:	f363 601f 	bfi	r0, r3, #24, #8
 8013378:	b003      	add	sp, #12
 801337a:	f85d fb04 	ldr.w	pc, [sp], #4
 801337e:	f100 0e01 	add.w	lr, r0, #1
 8013382:	fa5f fe8e 	uxtb.w	lr, lr
 8013386:	e7de      	b.n	8013346 <uxr_stream_id+0x12>
 8013388:	f080 0e80 	eor.w	lr, r0, #128	; 0x80
 801338c:	e7db      	b.n	8013346 <uxr_stream_id+0x12>
 801338e:	bf00      	nop

08013390 <uxr_stream_id_from_raw>:
 8013390:	b082      	sub	sp, #8
 8013392:	b130      	cbz	r0, 80133a2 <uxr_stream_id_from_raw+0x12>
 8013394:	0603      	lsls	r3, r0, #24
 8013396:	d421      	bmi.n	80133dc <uxr_stream_id_from_raw+0x4c>
 8013398:	1e42      	subs	r2, r0, #1
 801339a:	f04f 0c01 	mov.w	ip, #1
 801339e:	b2d2      	uxtb	r2, r2
 80133a0:	e001      	b.n	80133a6 <uxr_stream_id_from_raw+0x16>
 80133a2:	4684      	mov	ip, r0
 80133a4:	4602      	mov	r2, r0
 80133a6:	2300      	movs	r3, #0
 80133a8:	f360 0307 	bfi	r3, r0, #0, #8
 80133ac:	2000      	movs	r0, #0
 80133ae:	f362 230f 	bfi	r3, r2, #8, #8
 80133b2:	f36c 4317 	bfi	r3, ip, #16, #8
 80133b6:	f361 631f 	bfi	r3, r1, #24, #8
 80133ba:	fa5f fc83 	uxtb.w	ip, r3
 80133be:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80133c2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80133c6:	0e1b      	lsrs	r3, r3, #24
 80133c8:	f36c 0007 	bfi	r0, ip, #0, #8
 80133cc:	f361 200f 	bfi	r0, r1, #8, #8
 80133d0:	f362 4017 	bfi	r0, r2, #16, #8
 80133d4:	f363 601f 	bfi	r0, r3, #24, #8
 80133d8:	b002      	add	sp, #8
 80133da:	4770      	bx	lr
 80133dc:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 80133e0:	f04f 0c02 	mov.w	ip, #2
 80133e4:	e7df      	b.n	80133a6 <uxr_stream_id_from_raw+0x16>
 80133e6:	bf00      	nop

080133e8 <uxr_init_stream_storage>:
 80133e8:	2300      	movs	r3, #0
 80133ea:	7403      	strb	r3, [r0, #16]
 80133ec:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80133f0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 80133f4:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 80133f8:	4770      	bx	lr
 80133fa:	bf00      	nop

080133fc <uxr_reset_stream_storage>:
 80133fc:	b570      	push	{r4, r5, r6, lr}
 80133fe:	7c03      	ldrb	r3, [r0, #16]
 8013400:	4604      	mov	r4, r0
 8013402:	b14b      	cbz	r3, 8013418 <uxr_reset_stream_storage+0x1c>
 8013404:	4606      	mov	r6, r0
 8013406:	2500      	movs	r5, #0
 8013408:	4630      	mov	r0, r6
 801340a:	3501      	adds	r5, #1
 801340c:	f008 f846 	bl	801b49c <uxr_reset_output_best_effort_stream>
 8013410:	7c23      	ldrb	r3, [r4, #16]
 8013412:	3610      	adds	r6, #16
 8013414:	42ab      	cmp	r3, r5
 8013416:	d8f7      	bhi.n	8013408 <uxr_reset_stream_storage+0xc>
 8013418:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801341c:	b15b      	cbz	r3, 8013436 <uxr_reset_stream_storage+0x3a>
 801341e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013422:	2500      	movs	r5, #0
 8013424:	4630      	mov	r0, r6
 8013426:	3501      	adds	r5, #1
 8013428:	f007 fe3e 	bl	801b0a8 <uxr_reset_input_best_effort_stream>
 801342c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013430:	3602      	adds	r6, #2
 8013432:	42ab      	cmp	r3, r5
 8013434:	d8f6      	bhi.n	8013424 <uxr_reset_stream_storage+0x28>
 8013436:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 801343a:	b15b      	cbz	r3, 8013454 <uxr_reset_stream_storage+0x58>
 801343c:	f104 0618 	add.w	r6, r4, #24
 8013440:	2500      	movs	r5, #0
 8013442:	4630      	mov	r0, r6
 8013444:	3501      	adds	r5, #1
 8013446:	f008 f8d7 	bl	801b5f8 <uxr_reset_output_reliable_stream>
 801344a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 801344e:	3628      	adds	r6, #40	; 0x28
 8013450:	42ab      	cmp	r3, r5
 8013452:	d8f6      	bhi.n	8013442 <uxr_reset_stream_storage+0x46>
 8013454:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8013458:	b15b      	cbz	r3, 8013472 <uxr_reset_stream_storage+0x76>
 801345a:	f104 0648 	add.w	r6, r4, #72	; 0x48
 801345e:	2500      	movs	r5, #0
 8013460:	4630      	mov	r0, r6
 8013462:	3501      	adds	r5, #1
 8013464:	f007 fe8c 	bl	801b180 <uxr_reset_input_reliable_stream>
 8013468:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 801346c:	3618      	adds	r6, #24
 801346e:	42ab      	cmp	r3, r5
 8013470:	d8f6      	bhi.n	8013460 <uxr_reset_stream_storage+0x64>
 8013472:	bd70      	pop	{r4, r5, r6, pc}

08013474 <uxr_add_output_best_effort_buffer>:
 8013474:	b510      	push	{r4, lr}
 8013476:	7c04      	ldrb	r4, [r0, #16]
 8013478:	b082      	sub	sp, #8
 801347a:	f104 0c01 	add.w	ip, r4, #1
 801347e:	f880 c010 	strb.w	ip, [r0, #16]
 8013482:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8013486:	f007 ffff 	bl	801b488 <uxr_init_output_best_effort_stream>
 801348a:	2201      	movs	r2, #1
 801348c:	4620      	mov	r0, r4
 801348e:	4611      	mov	r1, r2
 8013490:	b002      	add	sp, #8
 8013492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013496:	f7ff bf4d 	b.w	8013334 <uxr_stream_id>
 801349a:	bf00      	nop

0801349c <uxr_add_output_reliable_buffer>:
 801349c:	b510      	push	{r4, lr}
 801349e:	b084      	sub	sp, #16
 80134a0:	4684      	mov	ip, r0
 80134a2:	2028      	movs	r0, #40	; 0x28
 80134a4:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80134a8:	9400      	str	r4, [sp, #0]
 80134aa:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 80134ae:	fb00 c004 	mla	r0, r0, r4, ip
 80134b2:	f104 0e01 	add.w	lr, r4, #1
 80134b6:	3018      	adds	r0, #24
 80134b8:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 80134bc:	f008 f864 	bl	801b588 <uxr_init_output_reliable_stream>
 80134c0:	2201      	movs	r2, #1
 80134c2:	2102      	movs	r1, #2
 80134c4:	4620      	mov	r0, r4
 80134c6:	b004      	add	sp, #16
 80134c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80134cc:	f7ff bf32 	b.w	8013334 <uxr_stream_id>

080134d0 <uxr_add_input_best_effort_buffer>:
 80134d0:	b510      	push	{r4, lr}
 80134d2:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 80134d6:	b082      	sub	sp, #8
 80134d8:	1c62      	adds	r2, r4, #1
 80134da:	f104 0321 	add.w	r3, r4, #33	; 0x21
 80134de:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 80134e2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80134e6:	f007 fddb 	bl	801b0a0 <uxr_init_input_best_effort_stream>
 80134ea:	2200      	movs	r2, #0
 80134ec:	2101      	movs	r1, #1
 80134ee:	4620      	mov	r0, r4
 80134f0:	b002      	add	sp, #8
 80134f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80134f6:	f7ff bf1d 	b.w	8013334 <uxr_stream_id>
 80134fa:	bf00      	nop

080134fc <uxr_add_input_reliable_buffer>:
 80134fc:	b510      	push	{r4, lr}
 80134fe:	b084      	sub	sp, #16
 8013500:	4684      	mov	ip, r0
 8013502:	2018      	movs	r0, #24
 8013504:	9c06      	ldr	r4, [sp, #24]
 8013506:	9400      	str	r4, [sp, #0]
 8013508:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 801350c:	fb00 c004 	mla	r0, r0, r4, ip
 8013510:	f104 0e01 	add.w	lr, r4, #1
 8013514:	3048      	adds	r0, #72	; 0x48
 8013516:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 801351a:	f007 fe0b 	bl	801b134 <uxr_init_input_reliable_stream>
 801351e:	2200      	movs	r2, #0
 8013520:	2102      	movs	r1, #2
 8013522:	4620      	mov	r0, r4
 8013524:	b004      	add	sp, #16
 8013526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801352a:	f7ff bf03 	b.w	8013334 <uxr_stream_id>
 801352e:	bf00      	nop

08013530 <uxr_get_output_best_effort_stream>:
 8013530:	7c03      	ldrb	r3, [r0, #16]
 8013532:	428b      	cmp	r3, r1
 8013534:	bf8c      	ite	hi
 8013536:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801353a:	2000      	movls	r0, #0
 801353c:	4770      	bx	lr
 801353e:	bf00      	nop

08013540 <uxr_get_output_reliable_stream>:
 8013540:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8013544:	428b      	cmp	r3, r1
 8013546:	d904      	bls.n	8013552 <uxr_get_output_reliable_stream+0x12>
 8013548:	2328      	movs	r3, #40	; 0x28
 801354a:	fb03 0001 	mla	r0, r3, r1, r0
 801354e:	3018      	adds	r0, #24
 8013550:	4770      	bx	lr
 8013552:	2000      	movs	r0, #0
 8013554:	4770      	bx	lr
 8013556:	bf00      	nop

08013558 <uxr_get_input_best_effort_stream>:
 8013558:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 801355c:	428b      	cmp	r3, r1
 801355e:	d903      	bls.n	8013568 <uxr_get_input_best_effort_stream+0x10>
 8013560:	3121      	adds	r1, #33	; 0x21
 8013562:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8013566:	4770      	bx	lr
 8013568:	2000      	movs	r0, #0
 801356a:	4770      	bx	lr

0801356c <uxr_get_input_reliable_stream>:
 801356c:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8013570:	428b      	cmp	r3, r1
 8013572:	d904      	bls.n	801357e <uxr_get_input_reliable_stream+0x12>
 8013574:	2318      	movs	r3, #24
 8013576:	fb03 0001 	mla	r0, r3, r1, r0
 801357a:	3048      	adds	r0, #72	; 0x48
 801357c:	4770      	bx	lr
 801357e:	2000      	movs	r0, #0
 8013580:	4770      	bx	lr
 8013582:	bf00      	nop

08013584 <uxr_output_streams_confirmed>:
 8013584:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8013588:	b183      	cbz	r3, 80135ac <uxr_output_streams_confirmed+0x28>
 801358a:	b570      	push	{r4, r5, r6, lr}
 801358c:	4606      	mov	r6, r0
 801358e:	f100 0518 	add.w	r5, r0, #24
 8013592:	2400      	movs	r4, #0
 8013594:	e000      	b.n	8013598 <uxr_output_streams_confirmed+0x14>
 8013596:	b140      	cbz	r0, 80135aa <uxr_output_streams_confirmed+0x26>
 8013598:	4628      	mov	r0, r5
 801359a:	3401      	adds	r4, #1
 801359c:	f008 faa0 	bl	801bae0 <uxr_is_output_up_to_date>
 80135a0:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 80135a4:	3528      	adds	r5, #40	; 0x28
 80135a6:	42a3      	cmp	r3, r4
 80135a8:	d8f5      	bhi.n	8013596 <uxr_output_streams_confirmed+0x12>
 80135aa:	bd70      	pop	{r4, r5, r6, pc}
 80135ac:	2001      	movs	r0, #1
 80135ae:	4770      	bx	lr

080135b0 <uxr_buffer_submessage_header>:
 80135b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135b2:	460e      	mov	r6, r1
 80135b4:	2104      	movs	r1, #4
 80135b6:	4604      	mov	r4, r0
 80135b8:	4615      	mov	r5, r2
 80135ba:	461f      	mov	r7, r3
 80135bc:	f7fe fb5e 	bl	8011c7c <ucdr_align_to>
 80135c0:	2301      	movs	r3, #1
 80135c2:	4631      	mov	r1, r6
 80135c4:	4620      	mov	r0, r4
 80135c6:	ea47 0203 	orr.w	r2, r7, r3
 80135ca:	7523      	strb	r3, [r4, #20]
 80135cc:	462b      	mov	r3, r5
 80135ce:	f000 fa29 	bl	8013a24 <uxr_serialize_submessage_header>
 80135d2:	4620      	mov	r0, r4
 80135d4:	f7fe fb68 	bl	8011ca8 <ucdr_buffer_remaining>
 80135d8:	42a8      	cmp	r0, r5
 80135da:	bf34      	ite	cc
 80135dc:	2000      	movcc	r0, #0
 80135de:	2001      	movcs	r0, #1
 80135e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80135e2:	bf00      	nop

080135e4 <uxr_read_submessage_header>:
 80135e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135e8:	4604      	mov	r4, r0
 80135ea:	460d      	mov	r5, r1
 80135ec:	2104      	movs	r1, #4
 80135ee:	4616      	mov	r6, r2
 80135f0:	4698      	mov	r8, r3
 80135f2:	f7fe fb43 	bl	8011c7c <ucdr_align_to>
 80135f6:	4620      	mov	r0, r4
 80135f8:	f7fe fb56 	bl	8011ca8 <ucdr_buffer_remaining>
 80135fc:	2803      	cmp	r0, #3
 80135fe:	bf8c      	ite	hi
 8013600:	2701      	movhi	r7, #1
 8013602:	2700      	movls	r7, #0
 8013604:	d802      	bhi.n	801360c <uxr_read_submessage_header+0x28>
 8013606:	4638      	mov	r0, r7
 8013608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801360c:	4633      	mov	r3, r6
 801360e:	4642      	mov	r2, r8
 8013610:	4620      	mov	r0, r4
 8013612:	4629      	mov	r1, r5
 8013614:	f000 fa1a 	bl	8013a4c <uxr_deserialize_submessage_header>
 8013618:	f898 3000 	ldrb.w	r3, [r8]
 801361c:	4638      	mov	r0, r7
 801361e:	f003 0201 	and.w	r2, r3, #1
 8013622:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8013626:	f888 3000 	strb.w	r3, [r8]
 801362a:	7522      	strb	r2, [r4, #20]
 801362c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013630 <uxr_submessage_padding>:
 8013630:	f010 0003 	ands.w	r0, r0, #3
 8013634:	bf18      	it	ne
 8013636:	f1c0 0004 	rsbne	r0, r0, #4
 801363a:	4770      	bx	lr

0801363c <uxr_millis>:
 801363c:	b510      	push	{r4, lr}
 801363e:	b084      	sub	sp, #16
 8013640:	2001      	movs	r0, #1
 8013642:	4669      	mov	r1, sp
 8013644:	f7ef ff50 	bl	80034e8 <clock_gettime>
 8013648:	4908      	ldr	r1, [pc, #32]	; (801366c <uxr_millis+0x30>)
 801364a:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 801364e:	fba0 0301 	umull	r0, r3, r0, r1
 8013652:	1900      	adds	r0, r0, r4
 8013654:	fb01 3102 	mla	r1, r1, r2, r3
 8013658:	4a05      	ldr	r2, [pc, #20]	; (8013670 <uxr_millis+0x34>)
 801365a:	f04f 0300 	mov.w	r3, #0
 801365e:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8013662:	f7ec fe55 	bl	8000310 <__aeabi_ldivmod>
 8013666:	b004      	add	sp, #16
 8013668:	bd10      	pop	{r4, pc}
 801366a:	bf00      	nop
 801366c:	3b9aca00 	.word	0x3b9aca00
 8013670:	000f4240 	.word	0x000f4240

08013674 <uxr_nanos>:
 8013674:	b510      	push	{r4, lr}
 8013676:	b084      	sub	sp, #16
 8013678:	2001      	movs	r0, #1
 801367a:	4669      	mov	r1, sp
 801367c:	f7ef ff34 	bl	80034e8 <clock_gettime>
 8013680:	4a06      	ldr	r2, [pc, #24]	; (801369c <uxr_nanos+0x28>)
 8013682:	9800      	ldr	r0, [sp, #0]
 8013684:	9902      	ldr	r1, [sp, #8]
 8013686:	fba0 0302 	umull	r0, r3, r0, r2
 801368a:	9c01      	ldr	r4, [sp, #4]
 801368c:	1840      	adds	r0, r0, r1
 801368e:	fb02 3304 	mla	r3, r2, r4, r3
 8013692:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8013696:	b004      	add	sp, #16
 8013698:	bd10      	pop	{r4, pc}
 801369a:	bf00      	nop
 801369c:	3b9aca00 	.word	0x3b9aca00

080136a0 <on_full_output_buffer_fragmented>:
 80136a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136a4:	460c      	mov	r4, r1
 80136a6:	b08a      	sub	sp, #40	; 0x28
 80136a8:	4606      	mov	r6, r0
 80136aa:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 80136ae:	f104 0008 	add.w	r0, r4, #8
 80136b2:	f7ff ff45 	bl	8013540 <uxr_get_output_reliable_stream>
 80136b6:	4605      	mov	r5, r0
 80136b8:	f008 fa1c 	bl	801baf4 <get_available_free_slots>
 80136bc:	b968      	cbnz	r0, 80136da <on_full_output_buffer_fragmented+0x3a>
 80136be:	4620      	mov	r0, r4
 80136c0:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 80136c4:	4798      	blx	r3
 80136c6:	b918      	cbnz	r0, 80136d0 <on_full_output_buffer_fragmented+0x30>
 80136c8:	2001      	movs	r0, #1
 80136ca:	b00a      	add	sp, #40	; 0x28
 80136cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136d0:	4628      	mov	r0, r5
 80136d2:	f008 fa0f 	bl	801baf4 <get_available_free_slots>
 80136d6:	2800      	cmp	r0, #0
 80136d8:	d0f6      	beq.n	80136c8 <on_full_output_buffer_fragmented+0x28>
 80136da:	8929      	ldrh	r1, [r5, #8]
 80136dc:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80136e0:	89eb      	ldrh	r3, [r5, #14]
 80136e2:	7b28      	ldrb	r0, [r5, #12]
 80136e4:	686f      	ldr	r7, [r5, #4]
 80136e6:	1a12      	subs	r2, r2, r0
 80136e8:	fbb3 f0f1 	udiv	r0, r3, r1
 80136ec:	fbb7 f7f1 	udiv	r7, r7, r1
 80136f0:	fb01 3110 	mls	r1, r1, r0, r3
 80136f4:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 80136f8:	b289      	uxth	r1, r1
 80136fa:	fb07 f101 	mul.w	r1, r7, r1
 80136fe:	3f04      	subs	r7, #4
 8013700:	443a      	add	r2, r7
 8013702:	3104      	adds	r1, #4
 8013704:	fa1f f882 	uxth.w	r8, r2
 8013708:	463a      	mov	r2, r7
 801370a:	eba3 0308 	sub.w	r3, r3, r8
 801370e:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 8013712:	682b      	ldr	r3, [r5, #0]
 8013714:	4419      	add	r1, r3
 8013716:	2300      	movs	r3, #0
 8013718:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801371c:	9000      	str	r0, [sp, #0]
 801371e:	a802      	add	r0, sp, #8
 8013720:	f7fe fa7e 	bl	8011c20 <ucdr_init_buffer_origin_offset>
 8013724:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8013728:	f102 0308 	add.w	r3, r2, #8
 801372c:	42bb      	cmp	r3, r7
 801372e:	d927      	bls.n	8013780 <on_full_output_buffer_fragmented+0xe0>
 8013730:	4642      	mov	r2, r8
 8013732:	2300      	movs	r3, #0
 8013734:	210d      	movs	r1, #13
 8013736:	a802      	add	r0, sp, #8
 8013738:	f7ff ff3a 	bl	80135b0 <uxr_buffer_submessage_header>
 801373c:	8929      	ldrh	r1, [r5, #8]
 801373e:	89eb      	ldrh	r3, [r5, #14]
 8013740:	686a      	ldr	r2, [r5, #4]
 8013742:	fbb3 f0f1 	udiv	r0, r3, r1
 8013746:	fbb2 f2f1 	udiv	r2, r2, r1
 801374a:	fb01 3310 	mls	r3, r1, r0, r3
 801374e:	b29b      	uxth	r3, r3
 8013750:	fb02 f303 	mul.w	r3, r2, r3
 8013754:	682a      	ldr	r2, [r5, #0]
 8013756:	50d7      	str	r7, [r2, r3]
 8013758:	2101      	movs	r1, #1
 801375a:	89e8      	ldrh	r0, [r5, #14]
 801375c:	f008 fb1c 	bl	801bd98 <uxr_seq_num_add>
 8013760:	9904      	ldr	r1, [sp, #16]
 8013762:	9a03      	ldr	r2, [sp, #12]
 8013764:	81e8      	strh	r0, [r5, #14]
 8013766:	4630      	mov	r0, r6
 8013768:	1a52      	subs	r2, r2, r1
 801376a:	f7fe fa6b 	bl	8011c44 <ucdr_init_buffer>
 801376e:	4630      	mov	r0, r6
 8013770:	4622      	mov	r2, r4
 8013772:	490f      	ldr	r1, [pc, #60]	; (80137b0 <on_full_output_buffer_fragmented+0x110>)
 8013774:	f7fe fa3a 	bl	8011bec <ucdr_set_on_full_buffer_callback>
 8013778:	2000      	movs	r0, #0
 801377a:	b00a      	add	sp, #40	; 0x28
 801377c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013780:	b292      	uxth	r2, r2
 8013782:	2302      	movs	r3, #2
 8013784:	210d      	movs	r1, #13
 8013786:	a802      	add	r0, sp, #8
 8013788:	f7ff ff12 	bl	80135b0 <uxr_buffer_submessage_header>
 801378c:	8928      	ldrh	r0, [r5, #8]
 801378e:	89eb      	ldrh	r3, [r5, #14]
 8013790:	6869      	ldr	r1, [r5, #4]
 8013792:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8013796:	fbb3 f7f0 	udiv	r7, r3, r0
 801379a:	fbb1 f1f0 	udiv	r1, r1, r0
 801379e:	fb00 3317 	mls	r3, r0, r7, r3
 80137a2:	3208      	adds	r2, #8
 80137a4:	b29b      	uxth	r3, r3
 80137a6:	fb01 f303 	mul.w	r3, r1, r3
 80137aa:	6829      	ldr	r1, [r5, #0]
 80137ac:	50ca      	str	r2, [r1, r3]
 80137ae:	e7d3      	b.n	8013758 <on_full_output_buffer_fragmented+0xb8>
 80137b0:	080136a1 	.word	0x080136a1

080137b4 <uxr_prepare_output_stream>:
 80137b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80137b6:	b087      	sub	sp, #28
 80137b8:	2707      	movs	r7, #7
 80137ba:	2500      	movs	r5, #0
 80137bc:	461c      	mov	r4, r3
 80137be:	4606      	mov	r6, r0
 80137c0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80137c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80137c6:	e9cd 7500 	strd	r7, r5, [sp]
 80137ca:	3204      	adds	r2, #4
 80137cc:	f7ff fc44 	bl	8013058 <uxr_prepare_stream_to_write_submessage>
 80137d0:	f080 0201 	eor.w	r2, r0, #1
 80137d4:	b2d2      	uxtb	r2, r2
 80137d6:	75a2      	strb	r2, [r4, #22]
 80137d8:	b112      	cbz	r2, 80137e0 <uxr_prepare_output_stream+0x2c>
 80137da:	4628      	mov	r0, r5
 80137dc:	b007      	add	sp, #28
 80137de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137e0:	aa05      	add	r2, sp, #20
 80137e2:	9902      	ldr	r1, [sp, #8]
 80137e4:	4630      	mov	r0, r6
 80137e6:	f7ff fd73 	bl	80132d0 <uxr_init_base_object_request>
 80137ea:	a905      	add	r1, sp, #20
 80137ec:	4605      	mov	r5, r0
 80137ee:	4620      	mov	r0, r4
 80137f0:	f001 f8bc 	bl	801496c <uxr_serialize_WRITE_DATA_Payload_Data>
 80137f4:	69a6      	ldr	r6, [r4, #24]
 80137f6:	69e7      	ldr	r7, [r4, #28]
 80137f8:	4620      	mov	r0, r4
 80137fa:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 80137fe:	1a52      	subs	r2, r2, r1
 8013800:	f7fe fa20 	bl	8011c44 <ucdr_init_buffer>
 8013804:	4620      	mov	r0, r4
 8013806:	463a      	mov	r2, r7
 8013808:	4631      	mov	r1, r6
 801380a:	f7fe f9ef 	bl	8011bec <ucdr_set_on_full_buffer_callback>
 801380e:	4628      	mov	r0, r5
 8013810:	b007      	add	sp, #28
 8013812:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013814 <uxr_prepare_output_stream_fragmented>:
 8013814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013818:	b091      	sub	sp, #68	; 0x44
 801381a:	4605      	mov	r5, r0
 801381c:	3008      	adds	r0, #8
 801381e:	461e      	mov	r6, r3
 8013820:	9105      	str	r1, [sp, #20]
 8013822:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8013826:	9204      	str	r2, [sp, #16]
 8013828:	f7ff fe8a 	bl	8013540 <uxr_get_output_reliable_stream>
 801382c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8013830:	2b01      	cmp	r3, #1
 8013832:	f000 8093 	beq.w	801395c <uxr_prepare_output_stream_fragmented+0x148>
 8013836:	4604      	mov	r4, r0
 8013838:	2800      	cmp	r0, #0
 801383a:	f000 808f 	beq.w	801395c <uxr_prepare_output_stream_fragmented+0x148>
 801383e:	f008 f959 	bl	801baf4 <get_available_free_slots>
 8013842:	2800      	cmp	r0, #0
 8013844:	f000 8085 	beq.w	8013952 <uxr_prepare_output_stream_fragmented+0x13e>
 8013848:	8923      	ldrh	r3, [r4, #8]
 801384a:	89e7      	ldrh	r7, [r4, #14]
 801384c:	6862      	ldr	r2, [r4, #4]
 801384e:	fbb7 f9f3 	udiv	r9, r7, r3
 8013852:	fbb2 f2f3 	udiv	r2, r2, r3
 8013856:	fb03 7919 	mls	r9, r3, r9, r7
 801385a:	6823      	ldr	r3, [r4, #0]
 801385c:	f1a2 0b04 	sub.w	fp, r2, #4
 8013860:	9203      	str	r2, [sp, #12]
 8013862:	fa1f f989 	uxth.w	r9, r9
 8013866:	fb02 f909 	mul.w	r9, r2, r9
 801386a:	f109 0904 	add.w	r9, r9, #4
 801386e:	4499      	add	r9, r3
 8013870:	7b23      	ldrb	r3, [r4, #12]
 8013872:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8013876:	4543      	cmp	r3, r8
 8013878:	d37c      	bcc.n	8013974 <uxr_prepare_output_stream_fragmented+0x160>
 801387a:	f1ab 0a04 	sub.w	sl, fp, #4
 801387e:	465a      	mov	r2, fp
 8013880:	4649      	mov	r1, r9
 8013882:	a808      	add	r0, sp, #32
 8013884:	ebaa 0a03 	sub.w	sl, sl, r3
 8013888:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801388a:	f8cd 8000 	str.w	r8, [sp]
 801388e:	3308      	adds	r3, #8
 8013890:	fa1f fa8a 	uxth.w	sl, sl
 8013894:	9302      	str	r3, [sp, #8]
 8013896:	2300      	movs	r3, #0
 8013898:	f7fe f9c2 	bl	8011c20 <ucdr_init_buffer_origin_offset>
 801389c:	9b02      	ldr	r3, [sp, #8]
 801389e:	4652      	mov	r2, sl
 80138a0:	210d      	movs	r1, #13
 80138a2:	455b      	cmp	r3, fp
 80138a4:	bf34      	ite	cc
 80138a6:	2302      	movcc	r3, #2
 80138a8:	2300      	movcs	r3, #0
 80138aa:	a808      	add	r0, sp, #32
 80138ac:	f7ff fe80 	bl	80135b0 <uxr_buffer_submessage_header>
 80138b0:	8921      	ldrh	r1, [r4, #8]
 80138b2:	6863      	ldr	r3, [r4, #4]
 80138b4:	4638      	mov	r0, r7
 80138b6:	fbb7 f2f1 	udiv	r2, r7, r1
 80138ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80138be:	fb01 7212 	mls	r2, r1, r2, r7
 80138c2:	2101      	movs	r1, #1
 80138c4:	b292      	uxth	r2, r2
 80138c6:	fb02 f303 	mul.w	r3, r2, r3
 80138ca:	6822      	ldr	r2, [r4, #0]
 80138cc:	f842 b003 	str.w	fp, [r2, r3]
 80138d0:	f008 fa62 	bl	801bd98 <uxr_seq_num_add>
 80138d4:	9b03      	ldr	r3, [sp, #12]
 80138d6:	f108 0104 	add.w	r1, r8, #4
 80138da:	4607      	mov	r7, r0
 80138dc:	f1a3 0208 	sub.w	r2, r3, #8
 80138e0:	4630      	mov	r0, r6
 80138e2:	4449      	add	r1, r9
 80138e4:	eba2 0208 	sub.w	r2, r2, r8
 80138e8:	f7fe f9ac 	bl	8011c44 <ucdr_init_buffer>
 80138ec:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80138ee:	2107      	movs	r1, #7
 80138f0:	81e7      	strh	r7, [r4, #14]
 80138f2:	1d1a      	adds	r2, r3, #4
 80138f4:	2300      	movs	r3, #0
 80138f6:	4630      	mov	r0, r6
 80138f8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80138fc:	bf28      	it	cs
 80138fe:	461a      	movcs	r2, r3
 8013900:	b292      	uxth	r2, r2
 8013902:	f7ff fe55 	bl	80135b0 <uxr_buffer_submessage_header>
 8013906:	aa07      	add	r2, sp, #28
 8013908:	9904      	ldr	r1, [sp, #16]
 801390a:	4628      	mov	r0, r5
 801390c:	f7ff fce0 	bl	80132d0 <uxr_init_base_object_request>
 8013910:	4604      	mov	r4, r0
 8013912:	b320      	cbz	r0, 801395e <uxr_prepare_output_stream_fragmented+0x14a>
 8013914:	a907      	add	r1, sp, #28
 8013916:	4630      	mov	r0, r6
 8013918:	f001 f828 	bl	801496c <uxr_serialize_WRITE_DATA_Payload_Data>
 801391c:	4630      	mov	r0, r6
 801391e:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8013922:	1a52      	subs	r2, r2, r1
 8013924:	f7fe f98e 	bl	8011c44 <ucdr_init_buffer>
 8013928:	9b05      	ldr	r3, [sp, #20]
 801392a:	9a02      	ldr	r2, [sp, #8]
 801392c:	4630      	mov	r0, r6
 801392e:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 8013932:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013934:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 8013938:	462a      	mov	r2, r5
 801393a:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 801393e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8013940:	4918      	ldr	r1, [pc, #96]	; (80139a4 <uxr_prepare_output_stream_fragmented+0x190>)
 8013942:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 8013946:	f7fe f951 	bl	8011bec <ucdr_set_on_full_buffer_callback>
 801394a:	4620      	mov	r0, r4
 801394c:	b011      	add	sp, #68	; 0x44
 801394e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013952:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013954:	4628      	mov	r0, r5
 8013956:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013958:	4798      	blx	r3
 801395a:	b920      	cbnz	r0, 8013966 <uxr_prepare_output_stream_fragmented+0x152>
 801395c:	2400      	movs	r4, #0
 801395e:	4620      	mov	r0, r4
 8013960:	b011      	add	sp, #68	; 0x44
 8013962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013966:	4620      	mov	r0, r4
 8013968:	f008 f8c4 	bl	801baf4 <get_available_free_slots>
 801396c:	2800      	cmp	r0, #0
 801396e:	f47f af6b 	bne.w	8013848 <uxr_prepare_output_stream_fragmented+0x34>
 8013972:	e7f3      	b.n	801395c <uxr_prepare_output_stream_fragmented+0x148>
 8013974:	4638      	mov	r0, r7
 8013976:	2101      	movs	r1, #1
 8013978:	f008 fa0e 	bl	801bd98 <uxr_seq_num_add>
 801397c:	8922      	ldrh	r2, [r4, #8]
 801397e:	6863      	ldr	r3, [r4, #4]
 8013980:	4607      	mov	r7, r0
 8013982:	fbb3 f9f2 	udiv	r9, r3, r2
 8013986:	fbb0 f3f2 	udiv	r3, r0, r2
 801398a:	fb02 0313 	mls	r3, r2, r3, r0
 801398e:	b29b      	uxth	r3, r3
 8013990:	fb03 f909 	mul.w	r9, r3, r9
 8013994:	6823      	ldr	r3, [r4, #0]
 8013996:	f109 0904 	add.w	r9, r9, #4
 801399a:	4499      	add	r9, r3
 801399c:	7b23      	ldrb	r3, [r4, #12]
 801399e:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80139a2:	e76a      	b.n	801387a <uxr_prepare_output_stream_fragmented+0x66>
 80139a4:	080136a1 	.word	0x080136a1

080139a8 <uxr_serialize_message_header>:
 80139a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80139aa:	4616      	mov	r6, r2
 80139ac:	b083      	sub	sp, #12
 80139ae:	4604      	mov	r4, r0
 80139b0:	460d      	mov	r5, r1
 80139b2:	9301      	str	r3, [sp, #4]
 80139b4:	9f08      	ldr	r7, [sp, #32]
 80139b6:	f7fc fcb5 	bl	8010324 <ucdr_serialize_uint8_t>
 80139ba:	4631      	mov	r1, r6
 80139bc:	4620      	mov	r0, r4
 80139be:	f7fc fcb1 	bl	8010324 <ucdr_serialize_uint8_t>
 80139c2:	9a01      	ldr	r2, [sp, #4]
 80139c4:	2101      	movs	r1, #1
 80139c6:	4620      	mov	r0, r4
 80139c8:	f7fc fd58 	bl	801047c <ucdr_serialize_endian_uint16_t>
 80139cc:	062b      	lsls	r3, r5, #24
 80139ce:	d501      	bpl.n	80139d4 <uxr_serialize_message_header+0x2c>
 80139d0:	b003      	add	sp, #12
 80139d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80139d4:	2204      	movs	r2, #4
 80139d6:	4639      	mov	r1, r7
 80139d8:	4620      	mov	r0, r4
 80139da:	b003      	add	sp, #12
 80139dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80139e0:	f7fc ba54 	b.w	800fe8c <ucdr_serialize_array_uint8_t>

080139e4 <uxr_deserialize_message_header>:
 80139e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80139e6:	4616      	mov	r6, r2
 80139e8:	b083      	sub	sp, #12
 80139ea:	4604      	mov	r4, r0
 80139ec:	460d      	mov	r5, r1
 80139ee:	9301      	str	r3, [sp, #4]
 80139f0:	9f08      	ldr	r7, [sp, #32]
 80139f2:	f7fc fcad 	bl	8010350 <ucdr_deserialize_uint8_t>
 80139f6:	4631      	mov	r1, r6
 80139f8:	4620      	mov	r0, r4
 80139fa:	f7fc fca9 	bl	8010350 <ucdr_deserialize_uint8_t>
 80139fe:	9a01      	ldr	r2, [sp, #4]
 8013a00:	2101      	movs	r1, #1
 8013a02:	4620      	mov	r0, r4
 8013a04:	f7fc fe2e 	bl	8010664 <ucdr_deserialize_endian_uint16_t>
 8013a08:	f995 3000 	ldrsb.w	r3, [r5]
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	da01      	bge.n	8013a14 <uxr_deserialize_message_header+0x30>
 8013a10:	b003      	add	sp, #12
 8013a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a14:	2204      	movs	r2, #4
 8013a16:	4639      	mov	r1, r7
 8013a18:	4620      	mov	r0, r4
 8013a1a:	b003      	add	sp, #12
 8013a1c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013a20:	f7fc ba98 	b.w	800ff54 <ucdr_deserialize_array_uint8_t>

08013a24 <uxr_serialize_submessage_header>:
 8013a24:	b530      	push	{r4, r5, lr}
 8013a26:	4615      	mov	r5, r2
 8013a28:	b083      	sub	sp, #12
 8013a2a:	4604      	mov	r4, r0
 8013a2c:	9301      	str	r3, [sp, #4]
 8013a2e:	f7fc fc79 	bl	8010324 <ucdr_serialize_uint8_t>
 8013a32:	4629      	mov	r1, r5
 8013a34:	4620      	mov	r0, r4
 8013a36:	f7fc fc75 	bl	8010324 <ucdr_serialize_uint8_t>
 8013a3a:	9a01      	ldr	r2, [sp, #4]
 8013a3c:	2101      	movs	r1, #1
 8013a3e:	4620      	mov	r0, r4
 8013a40:	b003      	add	sp, #12
 8013a42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013a46:	f7fc bd19 	b.w	801047c <ucdr_serialize_endian_uint16_t>
 8013a4a:	bf00      	nop

08013a4c <uxr_deserialize_submessage_header>:
 8013a4c:	b530      	push	{r4, r5, lr}
 8013a4e:	4615      	mov	r5, r2
 8013a50:	b083      	sub	sp, #12
 8013a52:	4604      	mov	r4, r0
 8013a54:	9301      	str	r3, [sp, #4]
 8013a56:	f7fc fc7b 	bl	8010350 <ucdr_deserialize_uint8_t>
 8013a5a:	4629      	mov	r1, r5
 8013a5c:	4620      	mov	r0, r4
 8013a5e:	f7fc fc77 	bl	8010350 <ucdr_deserialize_uint8_t>
 8013a62:	9a01      	ldr	r2, [sp, #4]
 8013a64:	2101      	movs	r1, #1
 8013a66:	4620      	mov	r0, r4
 8013a68:	b003      	add	sp, #12
 8013a6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013a6e:	f7fc bdf9 	b.w	8010664 <ucdr_deserialize_endian_uint16_t>
 8013a72:	bf00      	nop

08013a74 <uxr_serialize_CLIENT_Representation>:
 8013a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a78:	2204      	movs	r2, #4
 8013a7a:	460e      	mov	r6, r1
 8013a7c:	4605      	mov	r5, r0
 8013a7e:	f7fc fa05 	bl	800fe8c <ucdr_serialize_array_uint8_t>
 8013a82:	4607      	mov	r7, r0
 8013a84:	2202      	movs	r2, #2
 8013a86:	1d31      	adds	r1, r6, #4
 8013a88:	4628      	mov	r0, r5
 8013a8a:	f7fc f9ff 	bl	800fe8c <ucdr_serialize_array_uint8_t>
 8013a8e:	4038      	ands	r0, r7
 8013a90:	2202      	movs	r2, #2
 8013a92:	1db1      	adds	r1, r6, #6
 8013a94:	b2c7      	uxtb	r7, r0
 8013a96:	4628      	mov	r0, r5
 8013a98:	f7fc f9f8 	bl	800fe8c <ucdr_serialize_array_uint8_t>
 8013a9c:	2204      	movs	r2, #4
 8013a9e:	4007      	ands	r7, r0
 8013aa0:	f106 0108 	add.w	r1, r6, #8
 8013aa4:	4628      	mov	r0, r5
 8013aa6:	f7fc f9f1 	bl	800fe8c <ucdr_serialize_array_uint8_t>
 8013aaa:	4007      	ands	r7, r0
 8013aac:	7b31      	ldrb	r1, [r6, #12]
 8013aae:	4628      	mov	r0, r5
 8013ab0:	f7fc fc38 	bl	8010324 <ucdr_serialize_uint8_t>
 8013ab4:	7b71      	ldrb	r1, [r6, #13]
 8013ab6:	4007      	ands	r7, r0
 8013ab8:	4628      	mov	r0, r5
 8013aba:	f7fc fc05 	bl	80102c8 <ucdr_serialize_bool>
 8013abe:	7b73      	ldrb	r3, [r6, #13]
 8013ac0:	ea07 0800 	and.w	r8, r7, r0
 8013ac4:	b93b      	cbnz	r3, 8013ad6 <uxr_serialize_CLIENT_Representation+0x62>
 8013ac6:	8bb1      	ldrh	r1, [r6, #28]
 8013ac8:	4628      	mov	r0, r5
 8013aca:	f7fc fc57 	bl	801037c <ucdr_serialize_uint16_t>
 8013ace:	ea08 0000 	and.w	r0, r8, r0
 8013ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ad6:	6931      	ldr	r1, [r6, #16]
 8013ad8:	4628      	mov	r0, r5
 8013ada:	f7fc fe39 	bl	8010750 <ucdr_serialize_uint32_t>
 8013ade:	6933      	ldr	r3, [r6, #16]
 8013ae0:	b1e3      	cbz	r3, 8013b1c <uxr_serialize_CLIENT_Representation+0xa8>
 8013ae2:	b1c0      	cbz	r0, 8013b16 <uxr_serialize_CLIENT_Representation+0xa2>
 8013ae4:	4637      	mov	r7, r6
 8013ae6:	f04f 0900 	mov.w	r9, #0
 8013aea:	e000      	b.n	8013aee <uxr_serialize_CLIENT_Representation+0x7a>
 8013aec:	b19c      	cbz	r4, 8013b16 <uxr_serialize_CLIENT_Representation+0xa2>
 8013aee:	6979      	ldr	r1, [r7, #20]
 8013af0:	4628      	mov	r0, r5
 8013af2:	f007 f9ff 	bl	801aef4 <ucdr_serialize_string>
 8013af6:	69b9      	ldr	r1, [r7, #24]
 8013af8:	4604      	mov	r4, r0
 8013afa:	4628      	mov	r0, r5
 8013afc:	f007 f9fa 	bl	801aef4 <ucdr_serialize_string>
 8013b00:	f109 0901 	add.w	r9, r9, #1
 8013b04:	6933      	ldr	r3, [r6, #16]
 8013b06:	4004      	ands	r4, r0
 8013b08:	3708      	adds	r7, #8
 8013b0a:	4599      	cmp	r9, r3
 8013b0c:	b2e4      	uxtb	r4, r4
 8013b0e:	d3ed      	bcc.n	8013aec <uxr_serialize_CLIENT_Representation+0x78>
 8013b10:	ea08 0804 	and.w	r8, r8, r4
 8013b14:	e7d7      	b.n	8013ac6 <uxr_serialize_CLIENT_Representation+0x52>
 8013b16:	f04f 0800 	mov.w	r8, #0
 8013b1a:	e7d4      	b.n	8013ac6 <uxr_serialize_CLIENT_Representation+0x52>
 8013b1c:	ea08 0800 	and.w	r8, r8, r0
 8013b20:	e7d1      	b.n	8013ac6 <uxr_serialize_CLIENT_Representation+0x52>
 8013b22:	bf00      	nop

08013b24 <uxr_deserialize_CLIENT_Representation>:
 8013b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b28:	2204      	movs	r2, #4
 8013b2a:	460c      	mov	r4, r1
 8013b2c:	4605      	mov	r5, r0
 8013b2e:	f7fc fa11 	bl	800ff54 <ucdr_deserialize_array_uint8_t>
 8013b32:	4607      	mov	r7, r0
 8013b34:	2202      	movs	r2, #2
 8013b36:	1d21      	adds	r1, r4, #4
 8013b38:	4628      	mov	r0, r5
 8013b3a:	f7fc fa0b 	bl	800ff54 <ucdr_deserialize_array_uint8_t>
 8013b3e:	4038      	ands	r0, r7
 8013b40:	2202      	movs	r2, #2
 8013b42:	1da1      	adds	r1, r4, #6
 8013b44:	b2c6      	uxtb	r6, r0
 8013b46:	4628      	mov	r0, r5
 8013b48:	f7fc fa04 	bl	800ff54 <ucdr_deserialize_array_uint8_t>
 8013b4c:	2204      	movs	r2, #4
 8013b4e:	4006      	ands	r6, r0
 8013b50:	f104 0108 	add.w	r1, r4, #8
 8013b54:	4628      	mov	r0, r5
 8013b56:	f7fc f9fd 	bl	800ff54 <ucdr_deserialize_array_uint8_t>
 8013b5a:	4006      	ands	r6, r0
 8013b5c:	f104 010c 	add.w	r1, r4, #12
 8013b60:	4628      	mov	r0, r5
 8013b62:	f7fc fbf5 	bl	8010350 <ucdr_deserialize_uint8_t>
 8013b66:	f104 010d 	add.w	r1, r4, #13
 8013b6a:	ea06 0700 	and.w	r7, r6, r0
 8013b6e:	4628      	mov	r0, r5
 8013b70:	f7fc fbc0 	bl	80102f4 <ucdr_deserialize_bool>
 8013b74:	7b63      	ldrb	r3, [r4, #13]
 8013b76:	4007      	ands	r7, r0
 8013b78:	b93b      	cbnz	r3, 8013b8a <uxr_deserialize_CLIENT_Representation+0x66>
 8013b7a:	f104 011c 	add.w	r1, r4, #28
 8013b7e:	4628      	mov	r0, r5
 8013b80:	f7fc fcfc 	bl	801057c <ucdr_deserialize_uint16_t>
 8013b84:	4038      	ands	r0, r7
 8013b86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b8a:	f104 0110 	add.w	r1, r4, #16
 8013b8e:	4628      	mov	r0, r5
 8013b90:	f7fc ff0e 	bl	80109b0 <ucdr_deserialize_uint32_t>
 8013b94:	6923      	ldr	r3, [r4, #16]
 8013b96:	2b01      	cmp	r3, #1
 8013b98:	d903      	bls.n	8013ba2 <uxr_deserialize_CLIENT_Representation+0x7e>
 8013b9a:	2301      	movs	r3, #1
 8013b9c:	2700      	movs	r7, #0
 8013b9e:	75ab      	strb	r3, [r5, #22]
 8013ba0:	e7eb      	b.n	8013b7a <uxr_deserialize_CLIENT_Representation+0x56>
 8013ba2:	b30b      	cbz	r3, 8013be8 <uxr_deserialize_CLIENT_Representation+0xc4>
 8013ba4:	b1f0      	cbz	r0, 8013be4 <uxr_deserialize_CLIENT_Representation+0xc0>
 8013ba6:	46a0      	mov	r8, r4
 8013ba8:	f04f 0900 	mov.w	r9, #0
 8013bac:	e000      	b.n	8013bb0 <uxr_deserialize_CLIENT_Representation+0x8c>
 8013bae:	b1ce      	cbz	r6, 8013be4 <uxr_deserialize_CLIENT_Representation+0xc0>
 8013bb0:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013bb4:	f108 0808 	add.w	r8, r8, #8
 8013bb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013bbc:	4628      	mov	r0, r5
 8013bbe:	f007 f9a9 	bl	801af14 <ucdr_deserialize_string>
 8013bc2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013bc6:	4606      	mov	r6, r0
 8013bc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013bcc:	4628      	mov	r0, r5
 8013bce:	f109 0901 	add.w	r9, r9, #1
 8013bd2:	f007 f99f 	bl	801af14 <ucdr_deserialize_string>
 8013bd6:	6923      	ldr	r3, [r4, #16]
 8013bd8:	4006      	ands	r6, r0
 8013bda:	4599      	cmp	r9, r3
 8013bdc:	b2f6      	uxtb	r6, r6
 8013bde:	d3e6      	bcc.n	8013bae <uxr_deserialize_CLIENT_Representation+0x8a>
 8013be0:	4037      	ands	r7, r6
 8013be2:	e7ca      	b.n	8013b7a <uxr_deserialize_CLIENT_Representation+0x56>
 8013be4:	2700      	movs	r7, #0
 8013be6:	e7c8      	b.n	8013b7a <uxr_deserialize_CLIENT_Representation+0x56>
 8013be8:	4007      	ands	r7, r0
 8013bea:	e7c6      	b.n	8013b7a <uxr_deserialize_CLIENT_Representation+0x56>

08013bec <uxr_serialize_AGENT_Representation>:
 8013bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013bf0:	2204      	movs	r2, #4
 8013bf2:	460f      	mov	r7, r1
 8013bf4:	4605      	mov	r5, r0
 8013bf6:	f7fc f949 	bl	800fe8c <ucdr_serialize_array_uint8_t>
 8013bfa:	4604      	mov	r4, r0
 8013bfc:	2202      	movs	r2, #2
 8013bfe:	1d39      	adds	r1, r7, #4
 8013c00:	4628      	mov	r0, r5
 8013c02:	f7fc f943 	bl	800fe8c <ucdr_serialize_array_uint8_t>
 8013c06:	4020      	ands	r0, r4
 8013c08:	2202      	movs	r2, #2
 8013c0a:	1db9      	adds	r1, r7, #6
 8013c0c:	b2c4      	uxtb	r4, r0
 8013c0e:	4628      	mov	r0, r5
 8013c10:	f7fc f93c 	bl	800fe8c <ucdr_serialize_array_uint8_t>
 8013c14:	7a39      	ldrb	r1, [r7, #8]
 8013c16:	4004      	ands	r4, r0
 8013c18:	4628      	mov	r0, r5
 8013c1a:	f7fc fb55 	bl	80102c8 <ucdr_serialize_bool>
 8013c1e:	7a3b      	ldrb	r3, [r7, #8]
 8013c20:	ea00 0804 	and.w	r8, r0, r4
 8013c24:	b913      	cbnz	r3, 8013c2c <uxr_serialize_AGENT_Representation+0x40>
 8013c26:	4640      	mov	r0, r8
 8013c28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c2c:	68f9      	ldr	r1, [r7, #12]
 8013c2e:	4628      	mov	r0, r5
 8013c30:	f7fc fd8e 	bl	8010750 <ucdr_serialize_uint32_t>
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	b303      	cbz	r3, 8013c7a <uxr_serialize_AGENT_Representation+0x8e>
 8013c38:	b1d0      	cbz	r0, 8013c70 <uxr_serialize_AGENT_Representation+0x84>
 8013c3a:	463e      	mov	r6, r7
 8013c3c:	f04f 0900 	mov.w	r9, #0
 8013c40:	e000      	b.n	8013c44 <uxr_serialize_AGENT_Representation+0x58>
 8013c42:	b1ac      	cbz	r4, 8013c70 <uxr_serialize_AGENT_Representation+0x84>
 8013c44:	6931      	ldr	r1, [r6, #16]
 8013c46:	4628      	mov	r0, r5
 8013c48:	f007 f954 	bl	801aef4 <ucdr_serialize_string>
 8013c4c:	6971      	ldr	r1, [r6, #20]
 8013c4e:	4604      	mov	r4, r0
 8013c50:	4628      	mov	r0, r5
 8013c52:	f007 f94f 	bl	801aef4 <ucdr_serialize_string>
 8013c56:	f109 0901 	add.w	r9, r9, #1
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	4004      	ands	r4, r0
 8013c5e:	3608      	adds	r6, #8
 8013c60:	4599      	cmp	r9, r3
 8013c62:	b2e4      	uxtb	r4, r4
 8013c64:	d3ed      	bcc.n	8013c42 <uxr_serialize_AGENT_Representation+0x56>
 8013c66:	ea08 0804 	and.w	r8, r8, r4
 8013c6a:	4640      	mov	r0, r8
 8013c6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c70:	f04f 0800 	mov.w	r8, #0
 8013c74:	4640      	mov	r0, r8
 8013c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c7a:	ea08 0800 	and.w	r8, r8, r0
 8013c7e:	e7d2      	b.n	8013c26 <uxr_serialize_AGENT_Representation+0x3a>

08013c80 <uxr_serialize_DATAWRITER_Representation>:
 8013c80:	b570      	push	{r4, r5, r6, lr}
 8013c82:	460d      	mov	r5, r1
 8013c84:	7809      	ldrb	r1, [r1, #0]
 8013c86:	4606      	mov	r6, r0
 8013c88:	f7fc fb4c 	bl	8010324 <ucdr_serialize_uint8_t>
 8013c8c:	4604      	mov	r4, r0
 8013c8e:	b130      	cbz	r0, 8013c9e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8013c90:	782b      	ldrb	r3, [r5, #0]
 8013c92:	2b02      	cmp	r3, #2
 8013c94:	d00c      	beq.n	8013cb0 <uxr_serialize_DATAWRITER_Representation+0x30>
 8013c96:	2b03      	cmp	r3, #3
 8013c98:	d010      	beq.n	8013cbc <uxr_serialize_DATAWRITER_Representation+0x3c>
 8013c9a:	2b01      	cmp	r3, #1
 8013c9c:	d008      	beq.n	8013cb0 <uxr_serialize_DATAWRITER_Representation+0x30>
 8013c9e:	2202      	movs	r2, #2
 8013ca0:	f505 7102 	add.w	r1, r5, #520	; 0x208
 8013ca4:	4630      	mov	r0, r6
 8013ca6:	f7fc f8f1 	bl	800fe8c <ucdr_serialize_array_uint8_t>
 8013caa:	4020      	ands	r0, r4
 8013cac:	b2c0      	uxtb	r0, r0
 8013cae:	bd70      	pop	{r4, r5, r6, pc}
 8013cb0:	6869      	ldr	r1, [r5, #4]
 8013cb2:	4630      	mov	r0, r6
 8013cb4:	f007 f91e 	bl	801aef4 <ucdr_serialize_string>
 8013cb8:	4604      	mov	r4, r0
 8013cba:	e7f0      	b.n	8013c9e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8013cbc:	4629      	mov	r1, r5
 8013cbe:	4630      	mov	r0, r6
 8013cc0:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8013cc4:	3104      	adds	r1, #4
 8013cc6:	f007 f8e9 	bl	801ae9c <ucdr_serialize_sequence_uint8_t>
 8013cca:	4604      	mov	r4, r0
 8013ccc:	e7e7      	b.n	8013c9e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8013cce:	bf00      	nop

08013cd0 <uxr_serialize_ObjectVariant.part.0>:
 8013cd0:	b570      	push	{r4, r5, r6, lr}
 8013cd2:	780b      	ldrb	r3, [r1, #0]
 8013cd4:	460c      	mov	r4, r1
 8013cd6:	4605      	mov	r5, r0
 8013cd8:	3b01      	subs	r3, #1
 8013cda:	2b0d      	cmp	r3, #13
 8013cdc:	d854      	bhi.n	8013d88 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8013cde:	e8df f003 	tbb	[pc, r3]
 8013ce2:	0730      	.short	0x0730
 8013ce4:	07071b1b 	.word	0x07071b1b
 8013ce8:	0c530707 	.word	0x0c530707
 8013cec:	494e0c0c 	.word	0x494e0c0c
 8013cf0:	3104      	adds	r1, #4
 8013cf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013cf6:	f7ff bfc3 	b.w	8013c80 <uxr_serialize_DATAWRITER_Representation>
 8013cfa:	7909      	ldrb	r1, [r1, #4]
 8013cfc:	f7fc fb12 	bl	8010324 <ucdr_serialize_uint8_t>
 8013d00:	b1e8      	cbz	r0, 8013d3e <uxr_serialize_ObjectVariant.part.0+0x6e>
 8013d02:	7923      	ldrb	r3, [r4, #4]
 8013d04:	2b01      	cmp	r3, #1
 8013d06:	d001      	beq.n	8013d0c <uxr_serialize_ObjectVariant.part.0+0x3c>
 8013d08:	2b02      	cmp	r3, #2
 8013d0a:	d13d      	bne.n	8013d88 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8013d0c:	68a1      	ldr	r1, [r4, #8]
 8013d0e:	4628      	mov	r0, r5
 8013d10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013d14:	f007 b8ee 	b.w	801aef4 <ucdr_serialize_string>
 8013d18:	7909      	ldrb	r1, [r1, #4]
 8013d1a:	f7fc fb03 	bl	8010324 <ucdr_serialize_uint8_t>
 8013d1e:	4606      	mov	r6, r0
 8013d20:	b120      	cbz	r0, 8013d2c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8013d22:	7923      	ldrb	r3, [r4, #4]
 8013d24:	2b02      	cmp	r3, #2
 8013d26:	d039      	beq.n	8013d9c <uxr_serialize_ObjectVariant.part.0+0xcc>
 8013d28:	2b03      	cmp	r3, #3
 8013d2a:	d02f      	beq.n	8013d8c <uxr_serialize_ObjectVariant.part.0+0xbc>
 8013d2c:	2202      	movs	r2, #2
 8013d2e:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8013d32:	4628      	mov	r0, r5
 8013d34:	f7fc f8aa 	bl	800fe8c <ucdr_serialize_array_uint8_t>
 8013d38:	4030      	ands	r0, r6
 8013d3a:	b2c0      	uxtb	r0, r0
 8013d3c:	bd70      	pop	{r4, r5, r6, pc}
 8013d3e:	2000      	movs	r0, #0
 8013d40:	bd70      	pop	{r4, r5, r6, pc}
 8013d42:	7909      	ldrb	r1, [r1, #4]
 8013d44:	f7fc faee 	bl	8010324 <ucdr_serialize_uint8_t>
 8013d48:	4606      	mov	r6, r0
 8013d4a:	b158      	cbz	r0, 8013d64 <uxr_serialize_ObjectVariant.part.0+0x94>
 8013d4c:	7923      	ldrb	r3, [r4, #4]
 8013d4e:	2b02      	cmp	r3, #2
 8013d50:	d003      	beq.n	8013d5a <uxr_serialize_ObjectVariant.part.0+0x8a>
 8013d52:	2b03      	cmp	r3, #3
 8013d54:	d028      	beq.n	8013da8 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8013d56:	2b01      	cmp	r3, #1
 8013d58:	d104      	bne.n	8013d64 <uxr_serialize_ObjectVariant.part.0+0x94>
 8013d5a:	68a1      	ldr	r1, [r4, #8]
 8013d5c:	4628      	mov	r0, r5
 8013d5e:	f007 f8c9 	bl	801aef4 <ucdr_serialize_string>
 8013d62:	4606      	mov	r6, r0
 8013d64:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 8013d68:	4628      	mov	r0, r5
 8013d6a:	f7fd f817 	bl	8010d9c <ucdr_serialize_int16_t>
 8013d6e:	4030      	ands	r0, r6
 8013d70:	b2c0      	uxtb	r0, r0
 8013d72:	bd70      	pop	{r4, r5, r6, pc}
 8013d74:	3104      	adds	r1, #4
 8013d76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013d7a:	f7ff be7b 	b.w	8013a74 <uxr_serialize_CLIENT_Representation>
 8013d7e:	3104      	adds	r1, #4
 8013d80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013d84:	f7ff bf32 	b.w	8013bec <uxr_serialize_AGENT_Representation>
 8013d88:	2001      	movs	r0, #1
 8013d8a:	bd70      	pop	{r4, r5, r6, pc}
 8013d8c:	68a2      	ldr	r2, [r4, #8]
 8013d8e:	f104 010c 	add.w	r1, r4, #12
 8013d92:	4628      	mov	r0, r5
 8013d94:	f007 f882 	bl	801ae9c <ucdr_serialize_sequence_uint8_t>
 8013d98:	4606      	mov	r6, r0
 8013d9a:	e7c7      	b.n	8013d2c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8013d9c:	68a1      	ldr	r1, [r4, #8]
 8013d9e:	4628      	mov	r0, r5
 8013da0:	f007 f8a8 	bl	801aef4 <ucdr_serialize_string>
 8013da4:	4606      	mov	r6, r0
 8013da6:	e7c1      	b.n	8013d2c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8013da8:	68a2      	ldr	r2, [r4, #8]
 8013daa:	f104 010c 	add.w	r1, r4, #12
 8013dae:	4628      	mov	r0, r5
 8013db0:	f007 f874 	bl	801ae9c <ucdr_serialize_sequence_uint8_t>
 8013db4:	4606      	mov	r6, r0
 8013db6:	e7d5      	b.n	8013d64 <uxr_serialize_ObjectVariant.part.0+0x94>

08013db8 <uxr_deserialize_DATAWRITER_Representation>:
 8013db8:	b570      	push	{r4, r5, r6, lr}
 8013dba:	4606      	mov	r6, r0
 8013dbc:	460d      	mov	r5, r1
 8013dbe:	f7fc fac7 	bl	8010350 <ucdr_deserialize_uint8_t>
 8013dc2:	4604      	mov	r4, r0
 8013dc4:	b130      	cbz	r0, 8013dd4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8013dc6:	782b      	ldrb	r3, [r5, #0]
 8013dc8:	2b02      	cmp	r3, #2
 8013dca:	d00c      	beq.n	8013de6 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8013dcc:	2b03      	cmp	r3, #3
 8013dce:	d012      	beq.n	8013df6 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8013dd0:	2b01      	cmp	r3, #1
 8013dd2:	d008      	beq.n	8013de6 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8013dd4:	2202      	movs	r2, #2
 8013dd6:	f505 7102 	add.w	r1, r5, #520	; 0x208
 8013dda:	4630      	mov	r0, r6
 8013ddc:	f7fc f8ba 	bl	800ff54 <ucdr_deserialize_array_uint8_t>
 8013de0:	4020      	ands	r0, r4
 8013de2:	b2c0      	uxtb	r0, r0
 8013de4:	bd70      	pop	{r4, r5, r6, pc}
 8013de6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013dea:	6869      	ldr	r1, [r5, #4]
 8013dec:	4630      	mov	r0, r6
 8013dee:	f007 f891 	bl	801af14 <ucdr_deserialize_string>
 8013df2:	4604      	mov	r4, r0
 8013df4:	e7ee      	b.n	8013dd4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8013df6:	1d2b      	adds	r3, r5, #4
 8013df8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013dfc:	f105 0108 	add.w	r1, r5, #8
 8013e00:	4630      	mov	r0, r6
 8013e02:	f007 f85d 	bl	801aec0 <ucdr_deserialize_sequence_uint8_t>
 8013e06:	4604      	mov	r4, r0
 8013e08:	e7e4      	b.n	8013dd4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8013e0a:	bf00      	nop

08013e0c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8013e0c:	b570      	push	{r4, r5, r6, lr}
 8013e0e:	460d      	mov	r5, r1
 8013e10:	7809      	ldrb	r1, [r1, #0]
 8013e12:	4606      	mov	r6, r0
 8013e14:	f7fc fa58 	bl	80102c8 <ucdr_serialize_bool>
 8013e18:	782b      	ldrb	r3, [r5, #0]
 8013e1a:	4604      	mov	r4, r0
 8013e1c:	b94b      	cbnz	r3, 8013e32 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8013e1e:	7a29      	ldrb	r1, [r5, #8]
 8013e20:	4630      	mov	r0, r6
 8013e22:	f7fc fa51 	bl	80102c8 <ucdr_serialize_bool>
 8013e26:	7a2b      	ldrb	r3, [r5, #8]
 8013e28:	4004      	ands	r4, r0
 8013e2a:	b2e4      	uxtb	r4, r4
 8013e2c:	b943      	cbnz	r3, 8013e40 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8013e2e:	4620      	mov	r0, r4
 8013e30:	bd70      	pop	{r4, r5, r6, pc}
 8013e32:	6869      	ldr	r1, [r5, #4]
 8013e34:	4630      	mov	r0, r6
 8013e36:	f007 f85d 	bl	801aef4 <ucdr_serialize_string>
 8013e3a:	4004      	ands	r4, r0
 8013e3c:	b2e4      	uxtb	r4, r4
 8013e3e:	e7ee      	b.n	8013e1e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8013e40:	68e9      	ldr	r1, [r5, #12]
 8013e42:	4630      	mov	r0, r6
 8013e44:	f007 f856 	bl	801aef4 <ucdr_serialize_string>
 8013e48:	4004      	ands	r4, r0
 8013e4a:	4620      	mov	r0, r4
 8013e4c:	bd70      	pop	{r4, r5, r6, pc}
 8013e4e:	bf00      	nop

08013e50 <uxr_serialize_OBJK_Topic_Binary>:
 8013e50:	b570      	push	{r4, r5, r6, lr}
 8013e52:	460d      	mov	r5, r1
 8013e54:	4606      	mov	r6, r0
 8013e56:	6809      	ldr	r1, [r1, #0]
 8013e58:	f007 f84c 	bl	801aef4 <ucdr_serialize_string>
 8013e5c:	4604      	mov	r4, r0
 8013e5e:	7929      	ldrb	r1, [r5, #4]
 8013e60:	4630      	mov	r0, r6
 8013e62:	f7fc fa31 	bl	80102c8 <ucdr_serialize_bool>
 8013e66:	792b      	ldrb	r3, [r5, #4]
 8013e68:	4004      	ands	r4, r0
 8013e6a:	b2e4      	uxtb	r4, r4
 8013e6c:	b943      	cbnz	r3, 8013e80 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8013e6e:	7b29      	ldrb	r1, [r5, #12]
 8013e70:	4630      	mov	r0, r6
 8013e72:	f7fc fa29 	bl	80102c8 <ucdr_serialize_bool>
 8013e76:	7b2b      	ldrb	r3, [r5, #12]
 8013e78:	4004      	ands	r4, r0
 8013e7a:	b93b      	cbnz	r3, 8013e8c <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8013e7c:	4620      	mov	r0, r4
 8013e7e:	bd70      	pop	{r4, r5, r6, pc}
 8013e80:	68a9      	ldr	r1, [r5, #8]
 8013e82:	4630      	mov	r0, r6
 8013e84:	f007 f836 	bl	801aef4 <ucdr_serialize_string>
 8013e88:	4004      	ands	r4, r0
 8013e8a:	e7f0      	b.n	8013e6e <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8013e8c:	6929      	ldr	r1, [r5, #16]
 8013e8e:	4630      	mov	r0, r6
 8013e90:	f007 f830 	bl	801aef4 <ucdr_serialize_string>
 8013e94:	4004      	ands	r4, r0
 8013e96:	b2e4      	uxtb	r4, r4
 8013e98:	4620      	mov	r0, r4
 8013e9a:	bd70      	pop	{r4, r5, r6, pc}

08013e9c <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8013e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ea0:	460c      	mov	r4, r1
 8013ea2:	7809      	ldrb	r1, [r1, #0]
 8013ea4:	4606      	mov	r6, r0
 8013ea6:	f7fc fa0f 	bl	80102c8 <ucdr_serialize_bool>
 8013eaa:	7823      	ldrb	r3, [r4, #0]
 8013eac:	4605      	mov	r5, r0
 8013eae:	b96b      	cbnz	r3, 8013ecc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8013eb0:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8013eb4:	4630      	mov	r0, r6
 8013eb6:	f7fc fa07 	bl	80102c8 <ucdr_serialize_bool>
 8013eba:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8013ebe:	4005      	ands	r5, r0
 8013ec0:	b2ed      	uxtb	r5, r5
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d169      	bne.n	8013f9a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8013ec6:	4628      	mov	r0, r5
 8013ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ecc:	6861      	ldr	r1, [r4, #4]
 8013ece:	4630      	mov	r0, r6
 8013ed0:	f7fc fc3e 	bl	8010750 <ucdr_serialize_uint32_t>
 8013ed4:	6863      	ldr	r3, [r4, #4]
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d06b      	beq.n	8013fb2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8013eda:	2800      	cmp	r0, #0
 8013edc:	d067      	beq.n	8013fae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013ede:	68a1      	ldr	r1, [r4, #8]
 8013ee0:	4630      	mov	r0, r6
 8013ee2:	f007 f807 	bl	801aef4 <ucdr_serialize_string>
 8013ee6:	6863      	ldr	r3, [r4, #4]
 8013ee8:	2b01      	cmp	r3, #1
 8013eea:	d953      	bls.n	8013f94 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013eec:	2800      	cmp	r0, #0
 8013eee:	d05e      	beq.n	8013fae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013ef0:	68e1      	ldr	r1, [r4, #12]
 8013ef2:	4630      	mov	r0, r6
 8013ef4:	f006 fffe 	bl	801aef4 <ucdr_serialize_string>
 8013ef8:	6863      	ldr	r3, [r4, #4]
 8013efa:	2b02      	cmp	r3, #2
 8013efc:	d94a      	bls.n	8013f94 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013efe:	2800      	cmp	r0, #0
 8013f00:	d055      	beq.n	8013fae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013f02:	6921      	ldr	r1, [r4, #16]
 8013f04:	4630      	mov	r0, r6
 8013f06:	f006 fff5 	bl	801aef4 <ucdr_serialize_string>
 8013f0a:	6863      	ldr	r3, [r4, #4]
 8013f0c:	2b03      	cmp	r3, #3
 8013f0e:	d941      	bls.n	8013f94 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013f10:	2800      	cmp	r0, #0
 8013f12:	d04c      	beq.n	8013fae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013f14:	6961      	ldr	r1, [r4, #20]
 8013f16:	4630      	mov	r0, r6
 8013f18:	f006 ffec 	bl	801aef4 <ucdr_serialize_string>
 8013f1c:	6863      	ldr	r3, [r4, #4]
 8013f1e:	2b04      	cmp	r3, #4
 8013f20:	d938      	bls.n	8013f94 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013f22:	2800      	cmp	r0, #0
 8013f24:	d043      	beq.n	8013fae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013f26:	69a1      	ldr	r1, [r4, #24]
 8013f28:	4630      	mov	r0, r6
 8013f2a:	f006 ffe3 	bl	801aef4 <ucdr_serialize_string>
 8013f2e:	6863      	ldr	r3, [r4, #4]
 8013f30:	2b05      	cmp	r3, #5
 8013f32:	d92f      	bls.n	8013f94 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013f34:	2800      	cmp	r0, #0
 8013f36:	d03a      	beq.n	8013fae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013f38:	69e1      	ldr	r1, [r4, #28]
 8013f3a:	4630      	mov	r0, r6
 8013f3c:	f006 ffda 	bl	801aef4 <ucdr_serialize_string>
 8013f40:	6863      	ldr	r3, [r4, #4]
 8013f42:	2b06      	cmp	r3, #6
 8013f44:	d926      	bls.n	8013f94 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013f46:	b390      	cbz	r0, 8013fae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013f48:	6a21      	ldr	r1, [r4, #32]
 8013f4a:	4630      	mov	r0, r6
 8013f4c:	f006 ffd2 	bl	801aef4 <ucdr_serialize_string>
 8013f50:	6863      	ldr	r3, [r4, #4]
 8013f52:	2b07      	cmp	r3, #7
 8013f54:	d91e      	bls.n	8013f94 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013f56:	b350      	cbz	r0, 8013fae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013f58:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013f5a:	4630      	mov	r0, r6
 8013f5c:	f006 ffca 	bl	801aef4 <ucdr_serialize_string>
 8013f60:	6863      	ldr	r3, [r4, #4]
 8013f62:	2b08      	cmp	r3, #8
 8013f64:	d916      	bls.n	8013f94 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013f66:	b310      	cbz	r0, 8013fae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013f68:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8013f6a:	4630      	mov	r0, r6
 8013f6c:	f006 ffc2 	bl	801aef4 <ucdr_serialize_string>
 8013f70:	6863      	ldr	r3, [r4, #4]
 8013f72:	2b09      	cmp	r3, #9
 8013f74:	d90e      	bls.n	8013f94 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013f76:	b1d0      	cbz	r0, 8013fae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013f78:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8013f7c:	2709      	movs	r7, #9
 8013f7e:	e000      	b.n	8013f82 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8013f80:	b1a8      	cbz	r0, 8013fae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013f82:	f858 1b04 	ldr.w	r1, [r8], #4
 8013f86:	4630      	mov	r0, r6
 8013f88:	f006 ffb4 	bl	801aef4 <ucdr_serialize_string>
 8013f8c:	3701      	adds	r7, #1
 8013f8e:	6862      	ldr	r2, [r4, #4]
 8013f90:	4297      	cmp	r7, r2
 8013f92:	d3f5      	bcc.n	8013f80 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8013f94:	4005      	ands	r5, r0
 8013f96:	b2ed      	uxtb	r5, r5
 8013f98:	e78a      	b.n	8013eb0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8013f9a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8013f9c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8013fa0:	4630      	mov	r0, r6
 8013fa2:	f006 ff7b 	bl	801ae9c <ucdr_serialize_sequence_uint8_t>
 8013fa6:	4005      	ands	r5, r0
 8013fa8:	4628      	mov	r0, r5
 8013faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fae:	2500      	movs	r5, #0
 8013fb0:	e77e      	b.n	8013eb0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8013fb2:	4028      	ands	r0, r5
 8013fb4:	b2c5      	uxtb	r5, r0
 8013fb6:	e77b      	b.n	8013eb0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08013fb8 <uxr_serialize_OBJK_Publisher_Binary>:
 8013fb8:	b570      	push	{r4, r5, r6, lr}
 8013fba:	460d      	mov	r5, r1
 8013fbc:	7809      	ldrb	r1, [r1, #0]
 8013fbe:	4606      	mov	r6, r0
 8013fc0:	f7fc f982 	bl	80102c8 <ucdr_serialize_bool>
 8013fc4:	782b      	ldrb	r3, [r5, #0]
 8013fc6:	4604      	mov	r4, r0
 8013fc8:	b94b      	cbnz	r3, 8013fde <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8013fca:	7a29      	ldrb	r1, [r5, #8]
 8013fcc:	4630      	mov	r0, r6
 8013fce:	f7fc f97b 	bl	80102c8 <ucdr_serialize_bool>
 8013fd2:	7a2b      	ldrb	r3, [r5, #8]
 8013fd4:	4004      	ands	r4, r0
 8013fd6:	b2e4      	uxtb	r4, r4
 8013fd8:	b943      	cbnz	r3, 8013fec <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8013fda:	4620      	mov	r0, r4
 8013fdc:	bd70      	pop	{r4, r5, r6, pc}
 8013fde:	6869      	ldr	r1, [r5, #4]
 8013fe0:	4630      	mov	r0, r6
 8013fe2:	f006 ff87 	bl	801aef4 <ucdr_serialize_string>
 8013fe6:	4004      	ands	r4, r0
 8013fe8:	b2e4      	uxtb	r4, r4
 8013fea:	e7ee      	b.n	8013fca <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8013fec:	f105 010c 	add.w	r1, r5, #12
 8013ff0:	4630      	mov	r0, r6
 8013ff2:	f7ff ff53 	bl	8013e9c <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8013ff6:	4004      	ands	r4, r0
 8013ff8:	4620      	mov	r0, r4
 8013ffa:	bd70      	pop	{r4, r5, r6, pc}

08013ffc <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8013ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014000:	460c      	mov	r4, r1
 8014002:	7809      	ldrb	r1, [r1, #0]
 8014004:	4606      	mov	r6, r0
 8014006:	f7fc f95f 	bl	80102c8 <ucdr_serialize_bool>
 801400a:	7823      	ldrb	r3, [r4, #0]
 801400c:	4605      	mov	r5, r0
 801400e:	b96b      	cbnz	r3, 801402c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8014010:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8014014:	4630      	mov	r0, r6
 8014016:	f7fc f957 	bl	80102c8 <ucdr_serialize_bool>
 801401a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801401e:	4005      	ands	r5, r0
 8014020:	b2ed      	uxtb	r5, r5
 8014022:	2b00      	cmp	r3, #0
 8014024:	d169      	bne.n	80140fa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8014026:	4628      	mov	r0, r5
 8014028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801402c:	6861      	ldr	r1, [r4, #4]
 801402e:	4630      	mov	r0, r6
 8014030:	f7fc fb8e 	bl	8010750 <ucdr_serialize_uint32_t>
 8014034:	6863      	ldr	r3, [r4, #4]
 8014036:	2b00      	cmp	r3, #0
 8014038:	d06b      	beq.n	8014112 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 801403a:	2800      	cmp	r0, #0
 801403c:	d067      	beq.n	801410e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801403e:	68a1      	ldr	r1, [r4, #8]
 8014040:	4630      	mov	r0, r6
 8014042:	f006 ff57 	bl	801aef4 <ucdr_serialize_string>
 8014046:	6863      	ldr	r3, [r4, #4]
 8014048:	2b01      	cmp	r3, #1
 801404a:	d953      	bls.n	80140f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801404c:	2800      	cmp	r0, #0
 801404e:	d05e      	beq.n	801410e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014050:	68e1      	ldr	r1, [r4, #12]
 8014052:	4630      	mov	r0, r6
 8014054:	f006 ff4e 	bl	801aef4 <ucdr_serialize_string>
 8014058:	6863      	ldr	r3, [r4, #4]
 801405a:	2b02      	cmp	r3, #2
 801405c:	d94a      	bls.n	80140f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801405e:	2800      	cmp	r0, #0
 8014060:	d055      	beq.n	801410e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014062:	6921      	ldr	r1, [r4, #16]
 8014064:	4630      	mov	r0, r6
 8014066:	f006 ff45 	bl	801aef4 <ucdr_serialize_string>
 801406a:	6863      	ldr	r3, [r4, #4]
 801406c:	2b03      	cmp	r3, #3
 801406e:	d941      	bls.n	80140f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8014070:	2800      	cmp	r0, #0
 8014072:	d04c      	beq.n	801410e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014074:	6961      	ldr	r1, [r4, #20]
 8014076:	4630      	mov	r0, r6
 8014078:	f006 ff3c 	bl	801aef4 <ucdr_serialize_string>
 801407c:	6863      	ldr	r3, [r4, #4]
 801407e:	2b04      	cmp	r3, #4
 8014080:	d938      	bls.n	80140f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8014082:	2800      	cmp	r0, #0
 8014084:	d043      	beq.n	801410e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014086:	69a1      	ldr	r1, [r4, #24]
 8014088:	4630      	mov	r0, r6
 801408a:	f006 ff33 	bl	801aef4 <ucdr_serialize_string>
 801408e:	6863      	ldr	r3, [r4, #4]
 8014090:	2b05      	cmp	r3, #5
 8014092:	d92f      	bls.n	80140f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8014094:	2800      	cmp	r0, #0
 8014096:	d03a      	beq.n	801410e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014098:	69e1      	ldr	r1, [r4, #28]
 801409a:	4630      	mov	r0, r6
 801409c:	f006 ff2a 	bl	801aef4 <ucdr_serialize_string>
 80140a0:	6863      	ldr	r3, [r4, #4]
 80140a2:	2b06      	cmp	r3, #6
 80140a4:	d926      	bls.n	80140f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80140a6:	b390      	cbz	r0, 801410e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80140a8:	6a21      	ldr	r1, [r4, #32]
 80140aa:	4630      	mov	r0, r6
 80140ac:	f006 ff22 	bl	801aef4 <ucdr_serialize_string>
 80140b0:	6863      	ldr	r3, [r4, #4]
 80140b2:	2b07      	cmp	r3, #7
 80140b4:	d91e      	bls.n	80140f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80140b6:	b350      	cbz	r0, 801410e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80140b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80140ba:	4630      	mov	r0, r6
 80140bc:	f006 ff1a 	bl	801aef4 <ucdr_serialize_string>
 80140c0:	6863      	ldr	r3, [r4, #4]
 80140c2:	2b08      	cmp	r3, #8
 80140c4:	d916      	bls.n	80140f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80140c6:	b310      	cbz	r0, 801410e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80140c8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80140ca:	4630      	mov	r0, r6
 80140cc:	f006 ff12 	bl	801aef4 <ucdr_serialize_string>
 80140d0:	6863      	ldr	r3, [r4, #4]
 80140d2:	2b09      	cmp	r3, #9
 80140d4:	d90e      	bls.n	80140f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80140d6:	b1d0      	cbz	r0, 801410e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80140d8:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 80140dc:	2709      	movs	r7, #9
 80140de:	e000      	b.n	80140e2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 80140e0:	b1a8      	cbz	r0, 801410e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80140e2:	f858 1b04 	ldr.w	r1, [r8], #4
 80140e6:	4630      	mov	r0, r6
 80140e8:	f006 ff04 	bl	801aef4 <ucdr_serialize_string>
 80140ec:	3701      	adds	r7, #1
 80140ee:	6862      	ldr	r2, [r4, #4]
 80140f0:	4297      	cmp	r7, r2
 80140f2:	d3f5      	bcc.n	80140e0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 80140f4:	4005      	ands	r5, r0
 80140f6:	b2ed      	uxtb	r5, r5
 80140f8:	e78a      	b.n	8014010 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 80140fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80140fc:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8014100:	4630      	mov	r0, r6
 8014102:	f006 fecb 	bl	801ae9c <ucdr_serialize_sequence_uint8_t>
 8014106:	4005      	ands	r5, r0
 8014108:	4628      	mov	r0, r5
 801410a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801410e:	2500      	movs	r5, #0
 8014110:	e77e      	b.n	8014010 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8014112:	4028      	ands	r0, r5
 8014114:	b2c5      	uxtb	r5, r0
 8014116:	e77b      	b.n	8014010 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08014118 <uxr_serialize_OBJK_Subscriber_Binary>:
 8014118:	b570      	push	{r4, r5, r6, lr}
 801411a:	460d      	mov	r5, r1
 801411c:	7809      	ldrb	r1, [r1, #0]
 801411e:	4606      	mov	r6, r0
 8014120:	f7fc f8d2 	bl	80102c8 <ucdr_serialize_bool>
 8014124:	782b      	ldrb	r3, [r5, #0]
 8014126:	4604      	mov	r4, r0
 8014128:	b94b      	cbnz	r3, 801413e <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 801412a:	7a29      	ldrb	r1, [r5, #8]
 801412c:	4630      	mov	r0, r6
 801412e:	f7fc f8cb 	bl	80102c8 <ucdr_serialize_bool>
 8014132:	7a2b      	ldrb	r3, [r5, #8]
 8014134:	4004      	ands	r4, r0
 8014136:	b2e4      	uxtb	r4, r4
 8014138:	b943      	cbnz	r3, 801414c <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 801413a:	4620      	mov	r0, r4
 801413c:	bd70      	pop	{r4, r5, r6, pc}
 801413e:	6869      	ldr	r1, [r5, #4]
 8014140:	4630      	mov	r0, r6
 8014142:	f006 fed7 	bl	801aef4 <ucdr_serialize_string>
 8014146:	4004      	ands	r4, r0
 8014148:	b2e4      	uxtb	r4, r4
 801414a:	e7ee      	b.n	801412a <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 801414c:	f105 010c 	add.w	r1, r5, #12
 8014150:	4630      	mov	r0, r6
 8014152:	f7ff ff53 	bl	8013ffc <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8014156:	4004      	ands	r4, r0
 8014158:	4620      	mov	r0, r4
 801415a:	bd70      	pop	{r4, r5, r6, pc}

0801415c <uxr_serialize_OBJK_Endpoint_QosBinary>:
 801415c:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8014160:	4688      	mov	r8, r1
 8014162:	4681      	mov	r9, r0
 8014164:	8809      	ldrh	r1, [r1, #0]
 8014166:	f7fc f909 	bl	801037c <ucdr_serialize_uint16_t>
 801416a:	4606      	mov	r6, r0
 801416c:	f898 1002 	ldrb.w	r1, [r8, #2]
 8014170:	4648      	mov	r0, r9
 8014172:	f7fc f8a9 	bl	80102c8 <ucdr_serialize_bool>
 8014176:	f898 3002 	ldrb.w	r3, [r8, #2]
 801417a:	4006      	ands	r6, r0
 801417c:	b2f5      	uxtb	r5, r6
 801417e:	b9eb      	cbnz	r3, 80141bc <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8014180:	f898 1006 	ldrb.w	r1, [r8, #6]
 8014184:	4648      	mov	r0, r9
 8014186:	f7fc f89f 	bl	80102c8 <ucdr_serialize_bool>
 801418a:	f898 3006 	ldrb.w	r3, [r8, #6]
 801418e:	4005      	ands	r5, r0
 8014190:	bb7b      	cbnz	r3, 80141f2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8014192:	f898 100c 	ldrb.w	r1, [r8, #12]
 8014196:	4648      	mov	r0, r9
 8014198:	f7fc f896 	bl	80102c8 <ucdr_serialize_bool>
 801419c:	f898 300c 	ldrb.w	r3, [r8, #12]
 80141a0:	4005      	ands	r5, r0
 80141a2:	b9f3      	cbnz	r3, 80141e2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 80141a4:	f898 1014 	ldrb.w	r1, [r8, #20]
 80141a8:	4648      	mov	r0, r9
 80141aa:	f7fc f88d 	bl	80102c8 <ucdr_serialize_bool>
 80141ae:	f898 3014 	ldrb.w	r3, [r8, #20]
 80141b2:	4005      	ands	r5, r0
 80141b4:	b94b      	cbnz	r3, 80141ca <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 80141b6:	4628      	mov	r0, r5
 80141b8:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80141bc:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80141c0:	4648      	mov	r0, r9
 80141c2:	f7fc f8db 	bl	801037c <ucdr_serialize_uint16_t>
 80141c6:	4005      	ands	r5, r0
 80141c8:	e7da      	b.n	8014180 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 80141ca:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80141ce:	f108 011c 	add.w	r1, r8, #28
 80141d2:	4648      	mov	r0, r9
 80141d4:	f006 fe62 	bl	801ae9c <ucdr_serialize_sequence_uint8_t>
 80141d8:	4028      	ands	r0, r5
 80141da:	b2c5      	uxtb	r5, r0
 80141dc:	4628      	mov	r0, r5
 80141de:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80141e2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80141e6:	4648      	mov	r0, r9
 80141e8:	f7fc fab2 	bl	8010750 <ucdr_serialize_uint32_t>
 80141ec:	4028      	ands	r0, r5
 80141ee:	b2c5      	uxtb	r5, r0
 80141f0:	e7d8      	b.n	80141a4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 80141f2:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80141f6:	4648      	mov	r0, r9
 80141f8:	f7fc faaa 	bl	8010750 <ucdr_serialize_uint32_t>
 80141fc:	4028      	ands	r0, r5
 80141fe:	b2c5      	uxtb	r5, r0
 8014200:	e7c7      	b.n	8014192 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8014202:	bf00      	nop

08014204 <uxr_serialize_OBJK_DataReader_Binary>:
 8014204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014206:	2202      	movs	r2, #2
 8014208:	460c      	mov	r4, r1
 801420a:	4606      	mov	r6, r0
 801420c:	f7fb fe3e 	bl	800fe8c <ucdr_serialize_array_uint8_t>
 8014210:	4605      	mov	r5, r0
 8014212:	78a1      	ldrb	r1, [r4, #2]
 8014214:	4630      	mov	r0, r6
 8014216:	f7fc f857 	bl	80102c8 <ucdr_serialize_bool>
 801421a:	78a3      	ldrb	r3, [r4, #2]
 801421c:	4005      	ands	r5, r0
 801421e:	b2ed      	uxtb	r5, r5
 8014220:	b90b      	cbnz	r3, 8014226 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8014222:	4628      	mov	r0, r5
 8014224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014226:	f104 0108 	add.w	r1, r4, #8
 801422a:	4630      	mov	r0, r6
 801422c:	f7ff ff96 	bl	801415c <uxr_serialize_OBJK_Endpoint_QosBinary>
 8014230:	4607      	mov	r7, r0
 8014232:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8014236:	4630      	mov	r0, r6
 8014238:	f7fc f846 	bl	80102c8 <ucdr_serialize_bool>
 801423c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8014240:	4038      	ands	r0, r7
 8014242:	b2c7      	uxtb	r7, r0
 8014244:	b95b      	cbnz	r3, 801425e <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8014246:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 801424a:	4630      	mov	r0, r6
 801424c:	f7fc f83c 	bl	80102c8 <ucdr_serialize_bool>
 8014250:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8014254:	4007      	ands	r7, r0
 8014256:	b94b      	cbnz	r3, 801426c <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8014258:	403d      	ands	r5, r7
 801425a:	4628      	mov	r0, r5
 801425c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801425e:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8014262:	4630      	mov	r0, r6
 8014264:	f7fc fcca 	bl	8010bfc <ucdr_serialize_uint64_t>
 8014268:	4007      	ands	r7, r0
 801426a:	e7ec      	b.n	8014246 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 801426c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801426e:	4630      	mov	r0, r6
 8014270:	f006 fe40 	bl	801aef4 <ucdr_serialize_string>
 8014274:	4007      	ands	r7, r0
 8014276:	b2ff      	uxtb	r7, r7
 8014278:	e7ee      	b.n	8014258 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 801427a:	bf00      	nop

0801427c <uxr_serialize_OBJK_DataWriter_Binary>:
 801427c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801427e:	2202      	movs	r2, #2
 8014280:	460d      	mov	r5, r1
 8014282:	4606      	mov	r6, r0
 8014284:	f7fb fe02 	bl	800fe8c <ucdr_serialize_array_uint8_t>
 8014288:	4604      	mov	r4, r0
 801428a:	78a9      	ldrb	r1, [r5, #2]
 801428c:	4630      	mov	r0, r6
 801428e:	f7fc f81b 	bl	80102c8 <ucdr_serialize_bool>
 8014292:	78ab      	ldrb	r3, [r5, #2]
 8014294:	4004      	ands	r4, r0
 8014296:	b2e4      	uxtb	r4, r4
 8014298:	b90b      	cbnz	r3, 801429e <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801429a:	4620      	mov	r0, r4
 801429c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801429e:	f105 0108 	add.w	r1, r5, #8
 80142a2:	4630      	mov	r0, r6
 80142a4:	f7ff ff5a 	bl	801415c <uxr_serialize_OBJK_Endpoint_QosBinary>
 80142a8:	4607      	mov	r7, r0
 80142aa:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 80142ae:	4630      	mov	r0, r6
 80142b0:	f7fc f80a 	bl	80102c8 <ucdr_serialize_bool>
 80142b4:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 80142b8:	4038      	ands	r0, r7
 80142ba:	b2c7      	uxtb	r7, r0
 80142bc:	b913      	cbnz	r3, 80142c4 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 80142be:	403c      	ands	r4, r7
 80142c0:	4620      	mov	r0, r4
 80142c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80142c4:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 80142c8:	4630      	mov	r0, r6
 80142ca:	f7fc fc97 	bl	8010bfc <ucdr_serialize_uint64_t>
 80142ce:	4007      	ands	r7, r0
 80142d0:	e7f5      	b.n	80142be <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 80142d2:	bf00      	nop

080142d4 <uxr_serialize_OBJK_Replier_Binary>:
 80142d4:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 80142d8:	460f      	mov	r7, r1
 80142da:	4680      	mov	r8, r0
 80142dc:	6809      	ldr	r1, [r1, #0]
 80142de:	f006 fe09 	bl	801aef4 <ucdr_serialize_string>
 80142e2:	4605      	mov	r5, r0
 80142e4:	6879      	ldr	r1, [r7, #4]
 80142e6:	4640      	mov	r0, r8
 80142e8:	f006 fe04 	bl	801aef4 <ucdr_serialize_string>
 80142ec:	4005      	ands	r5, r0
 80142ee:	68b9      	ldr	r1, [r7, #8]
 80142f0:	4640      	mov	r0, r8
 80142f2:	b2ec      	uxtb	r4, r5
 80142f4:	f006 fdfe 	bl	801aef4 <ucdr_serialize_string>
 80142f8:	7b39      	ldrb	r1, [r7, #12]
 80142fa:	4004      	ands	r4, r0
 80142fc:	4640      	mov	r0, r8
 80142fe:	f7fb ffe3 	bl	80102c8 <ucdr_serialize_bool>
 8014302:	7b3b      	ldrb	r3, [r7, #12]
 8014304:	4004      	ands	r4, r0
 8014306:	b94b      	cbnz	r3, 801431c <uxr_serialize_OBJK_Replier_Binary+0x48>
 8014308:	7d39      	ldrb	r1, [r7, #20]
 801430a:	4640      	mov	r0, r8
 801430c:	f7fb ffdc 	bl	80102c8 <ucdr_serialize_bool>
 8014310:	7d3b      	ldrb	r3, [r7, #20]
 8014312:	4004      	ands	r4, r0
 8014314:	b943      	cbnz	r3, 8014328 <uxr_serialize_OBJK_Replier_Binary+0x54>
 8014316:	4620      	mov	r0, r4
 8014318:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801431c:	6939      	ldr	r1, [r7, #16]
 801431e:	4640      	mov	r0, r8
 8014320:	f006 fde8 	bl	801aef4 <ucdr_serialize_string>
 8014324:	4004      	ands	r4, r0
 8014326:	e7ef      	b.n	8014308 <uxr_serialize_OBJK_Replier_Binary+0x34>
 8014328:	69b9      	ldr	r1, [r7, #24]
 801432a:	4640      	mov	r0, r8
 801432c:	f006 fde2 	bl	801aef4 <ucdr_serialize_string>
 8014330:	4004      	ands	r4, r0
 8014332:	b2e4      	uxtb	r4, r4
 8014334:	4620      	mov	r0, r4
 8014336:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801433a:	bf00      	nop

0801433c <uxr_deserialize_ObjectVariant>:
 801433c:	b570      	push	{r4, r5, r6, lr}
 801433e:	4605      	mov	r5, r0
 8014340:	460e      	mov	r6, r1
 8014342:	f7fc f805 	bl	8010350 <ucdr_deserialize_uint8_t>
 8014346:	b168      	cbz	r0, 8014364 <uxr_deserialize_ObjectVariant+0x28>
 8014348:	7833      	ldrb	r3, [r6, #0]
 801434a:	4604      	mov	r4, r0
 801434c:	3b01      	subs	r3, #1
 801434e:	2b0d      	cmp	r3, #13
 8014350:	d809      	bhi.n	8014366 <uxr_deserialize_ObjectVariant+0x2a>
 8014352:	e8df f003 	tbb	[pc, r3]
 8014356:	0a41      	.short	0x0a41
 8014358:	0a0a2323 	.word	0x0a0a2323
 801435c:	10080a0a 	.word	0x10080a0a
 8014360:	565c1010 	.word	0x565c1010
 8014364:	2400      	movs	r4, #0
 8014366:	4620      	mov	r0, r4
 8014368:	bd70      	pop	{r4, r5, r6, pc}
 801436a:	1d31      	adds	r1, r6, #4
 801436c:	4628      	mov	r0, r5
 801436e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014372:	f7ff bd21 	b.w	8013db8 <uxr_deserialize_DATAWRITER_Representation>
 8014376:	1d31      	adds	r1, r6, #4
 8014378:	4628      	mov	r0, r5
 801437a:	f7fb ffe9 	bl	8010350 <ucdr_deserialize_uint8_t>
 801437e:	2800      	cmp	r0, #0
 8014380:	d0f0      	beq.n	8014364 <uxr_deserialize_ObjectVariant+0x28>
 8014382:	7933      	ldrb	r3, [r6, #4]
 8014384:	2b01      	cmp	r3, #1
 8014386:	d001      	beq.n	801438c <uxr_deserialize_ObjectVariant+0x50>
 8014388:	2b02      	cmp	r3, #2
 801438a:	d1ec      	bne.n	8014366 <uxr_deserialize_ObjectVariant+0x2a>
 801438c:	68b1      	ldr	r1, [r6, #8]
 801438e:	4628      	mov	r0, r5
 8014390:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014394:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014398:	f006 bdbc 	b.w	801af14 <ucdr_deserialize_string>
 801439c:	1d31      	adds	r1, r6, #4
 801439e:	4628      	mov	r0, r5
 80143a0:	f7fb ffd6 	bl	8010350 <ucdr_deserialize_uint8_t>
 80143a4:	4604      	mov	r4, r0
 80143a6:	b170      	cbz	r0, 80143c6 <uxr_deserialize_ObjectVariant+0x8a>
 80143a8:	7933      	ldrb	r3, [r6, #4]
 80143aa:	2b02      	cmp	r3, #2
 80143ac:	d04c      	beq.n	8014448 <uxr_deserialize_ObjectVariant+0x10c>
 80143ae:	2b03      	cmp	r3, #3
 80143b0:	d109      	bne.n	80143c6 <uxr_deserialize_ObjectVariant+0x8a>
 80143b2:	f106 0308 	add.w	r3, r6, #8
 80143b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80143ba:	f106 010c 	add.w	r1, r6, #12
 80143be:	4628      	mov	r0, r5
 80143c0:	f006 fd7e 	bl	801aec0 <ucdr_deserialize_sequence_uint8_t>
 80143c4:	4604      	mov	r4, r0
 80143c6:	2202      	movs	r2, #2
 80143c8:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 80143cc:	4628      	mov	r0, r5
 80143ce:	f7fb fdc1 	bl	800ff54 <ucdr_deserialize_array_uint8_t>
 80143d2:	4020      	ands	r0, r4
 80143d4:	b2c4      	uxtb	r4, r0
 80143d6:	e7c6      	b.n	8014366 <uxr_deserialize_ObjectVariant+0x2a>
 80143d8:	1d31      	adds	r1, r6, #4
 80143da:	4628      	mov	r0, r5
 80143dc:	f7fb ffb8 	bl	8010350 <ucdr_deserialize_uint8_t>
 80143e0:	4604      	mov	r4, r0
 80143e2:	b130      	cbz	r0, 80143f2 <uxr_deserialize_ObjectVariant+0xb6>
 80143e4:	7933      	ldrb	r3, [r6, #4]
 80143e6:	2b02      	cmp	r3, #2
 80143e8:	d036      	beq.n	8014458 <uxr_deserialize_ObjectVariant+0x11c>
 80143ea:	2b03      	cmp	r3, #3
 80143ec:	d03c      	beq.n	8014468 <uxr_deserialize_ObjectVariant+0x12c>
 80143ee:	2b01      	cmp	r3, #1
 80143f0:	d032      	beq.n	8014458 <uxr_deserialize_ObjectVariant+0x11c>
 80143f2:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 80143f6:	4628      	mov	r0, r5
 80143f8:	f7fc fdd0 	bl	8010f9c <ucdr_deserialize_int16_t>
 80143fc:	4020      	ands	r0, r4
 80143fe:	b2c4      	uxtb	r4, r0
 8014400:	e7b1      	b.n	8014366 <uxr_deserialize_ObjectVariant+0x2a>
 8014402:	1d31      	adds	r1, r6, #4
 8014404:	4628      	mov	r0, r5
 8014406:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801440a:	f7ff bb8b 	b.w	8013b24 <uxr_deserialize_CLIENT_Representation>
 801440e:	2204      	movs	r2, #4
 8014410:	4628      	mov	r0, r5
 8014412:	18b1      	adds	r1, r6, r2
 8014414:	f7fb fd9e 	bl	800ff54 <ucdr_deserialize_array_uint8_t>
 8014418:	4604      	mov	r4, r0
 801441a:	2202      	movs	r2, #2
 801441c:	f106 0108 	add.w	r1, r6, #8
 8014420:	4628      	mov	r0, r5
 8014422:	f7fb fd97 	bl	800ff54 <ucdr_deserialize_array_uint8_t>
 8014426:	4004      	ands	r4, r0
 8014428:	2202      	movs	r2, #2
 801442a:	f106 010a 	add.w	r1, r6, #10
 801442e:	4628      	mov	r0, r5
 8014430:	b2e4      	uxtb	r4, r4
 8014432:	f7fb fd8f 	bl	800ff54 <ucdr_deserialize_array_uint8_t>
 8014436:	4603      	mov	r3, r0
 8014438:	f106 010c 	add.w	r1, r6, #12
 801443c:	4628      	mov	r0, r5
 801443e:	401c      	ands	r4, r3
 8014440:	f7fb ff58 	bl	80102f4 <ucdr_deserialize_bool>
 8014444:	4004      	ands	r4, r0
 8014446:	e78e      	b.n	8014366 <uxr_deserialize_ObjectVariant+0x2a>
 8014448:	f44f 7200 	mov.w	r2, #512	; 0x200
 801444c:	68b1      	ldr	r1, [r6, #8]
 801444e:	4628      	mov	r0, r5
 8014450:	f006 fd60 	bl	801af14 <ucdr_deserialize_string>
 8014454:	4604      	mov	r4, r0
 8014456:	e7b6      	b.n	80143c6 <uxr_deserialize_ObjectVariant+0x8a>
 8014458:	f44f 7200 	mov.w	r2, #512	; 0x200
 801445c:	68b1      	ldr	r1, [r6, #8]
 801445e:	4628      	mov	r0, r5
 8014460:	f006 fd58 	bl	801af14 <ucdr_deserialize_string>
 8014464:	4604      	mov	r4, r0
 8014466:	e7c4      	b.n	80143f2 <uxr_deserialize_ObjectVariant+0xb6>
 8014468:	f106 0308 	add.w	r3, r6, #8
 801446c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014470:	f106 010c 	add.w	r1, r6, #12
 8014474:	4628      	mov	r0, r5
 8014476:	f006 fd23 	bl	801aec0 <ucdr_deserialize_sequence_uint8_t>
 801447a:	4604      	mov	r4, r0
 801447c:	e7b9      	b.n	80143f2 <uxr_deserialize_ObjectVariant+0xb6>
 801447e:	bf00      	nop

08014480 <uxr_deserialize_BaseObjectRequest>:
 8014480:	b570      	push	{r4, r5, r6, lr}
 8014482:	2202      	movs	r2, #2
 8014484:	4605      	mov	r5, r0
 8014486:	460e      	mov	r6, r1
 8014488:	f7fb fd64 	bl	800ff54 <ucdr_deserialize_array_uint8_t>
 801448c:	2202      	movs	r2, #2
 801448e:	4604      	mov	r4, r0
 8014490:	4628      	mov	r0, r5
 8014492:	18b1      	adds	r1, r6, r2
 8014494:	f7fb fd5e 	bl	800ff54 <ucdr_deserialize_array_uint8_t>
 8014498:	4020      	ands	r0, r4
 801449a:	b2c0      	uxtb	r0, r0
 801449c:	bd70      	pop	{r4, r5, r6, pc}
 801449e:	bf00      	nop

080144a0 <uxr_serialize_ActivityInfoVariant>:
 80144a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80144a4:	460e      	mov	r6, r1
 80144a6:	7809      	ldrb	r1, [r1, #0]
 80144a8:	4680      	mov	r8, r0
 80144aa:	f7fb ff3b 	bl	8010324 <ucdr_serialize_uint8_t>
 80144ae:	4607      	mov	r7, r0
 80144b0:	b138      	cbz	r0, 80144c2 <uxr_serialize_ActivityInfoVariant+0x22>
 80144b2:	7833      	ldrb	r3, [r6, #0]
 80144b4:	2b06      	cmp	r3, #6
 80144b6:	f000 8081 	beq.w	80145bc <uxr_serialize_ActivityInfoVariant+0x11c>
 80144ba:	2b0d      	cmp	r3, #13
 80144bc:	d014      	beq.n	80144e8 <uxr_serialize_ActivityInfoVariant+0x48>
 80144be:	2b05      	cmp	r3, #5
 80144c0:	d002      	beq.n	80144c8 <uxr_serialize_ActivityInfoVariant+0x28>
 80144c2:	4638      	mov	r0, r7
 80144c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144c8:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 80144cc:	4640      	mov	r0, r8
 80144ce:	f7fc fc65 	bl	8010d9c <ucdr_serialize_int16_t>
 80144d2:	4607      	mov	r7, r0
 80144d4:	4640      	mov	r0, r8
 80144d6:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 80144da:	f7fc fb8f 	bl	8010bfc <ucdr_serialize_uint64_t>
 80144de:	4038      	ands	r0, r7
 80144e0:	b2c7      	uxtb	r7, r0
 80144e2:	4638      	mov	r0, r7
 80144e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144e8:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 80144ec:	4640      	mov	r0, r8
 80144ee:	f7fc fc55 	bl	8010d9c <ucdr_serialize_int16_t>
 80144f2:	68f1      	ldr	r1, [r6, #12]
 80144f4:	4607      	mov	r7, r0
 80144f6:	4640      	mov	r0, r8
 80144f8:	f7fc f92a 	bl	8010750 <ucdr_serialize_uint32_t>
 80144fc:	68f3      	ldr	r3, [r6, #12]
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d0ed      	beq.n	80144de <uxr_serialize_ActivityInfoVariant+0x3e>
 8014502:	b318      	cbz	r0, 801454c <uxr_serialize_ActivityInfoVariant+0xac>
 8014504:	f106 090c 	add.w	r9, r6, #12
 8014508:	2400      	movs	r4, #0
 801450a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801450e:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 8014512:	7c29      	ldrb	r1, [r5, #16]
 8014514:	4640      	mov	r0, r8
 8014516:	f7fb ff05 	bl	8010324 <ucdr_serialize_uint8_t>
 801451a:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 801451e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8014522:	2800      	cmp	r0, #0
 8014524:	d051      	beq.n	80145ca <uxr_serialize_ActivityInfoVariant+0x12a>
 8014526:	7c2b      	ldrb	r3, [r5, #16]
 8014528:	00c9      	lsls	r1, r1, #3
 801452a:	2b03      	cmp	r3, #3
 801452c:	d854      	bhi.n	80145d8 <uxr_serialize_ActivityInfoVariant+0x138>
 801452e:	e8df f003 	tbb	[pc, r3]
 8014532:	2133      	.short	0x2133
 8014534:	020f      	.short	0x020f
 8014536:	4449      	add	r1, r9
 8014538:	4640      	mov	r0, r8
 801453a:	6889      	ldr	r1, [r1, #8]
 801453c:	f006 fcda 	bl	801aef4 <ucdr_serialize_string>
 8014540:	3401      	adds	r4, #1
 8014542:	68f2      	ldr	r2, [r6, #12]
 8014544:	4294      	cmp	r4, r2
 8014546:	d244      	bcs.n	80145d2 <uxr_serialize_ActivityInfoVariant+0x132>
 8014548:	2800      	cmp	r0, #0
 801454a:	d1de      	bne.n	801450a <uxr_serialize_ActivityInfoVariant+0x6a>
 801454c:	2700      	movs	r7, #0
 801454e:	e7b8      	b.n	80144c2 <uxr_serialize_ActivityInfoVariant+0x22>
 8014550:	3108      	adds	r1, #8
 8014552:	44a2      	add	sl, r4
 8014554:	2210      	movs	r2, #16
 8014556:	4640      	mov	r0, r8
 8014558:	4449      	add	r1, r9
 801455a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801455e:	f7fb fc95 	bl	800fe8c <ucdr_serialize_array_uint8_t>
 8014562:	4605      	mov	r5, r0
 8014564:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
 8014568:	4640      	mov	r0, r8
 801456a:	f7fc f8f1 	bl	8010750 <ucdr_serialize_uint32_t>
 801456e:	4028      	ands	r0, r5
 8014570:	b2c0      	uxtb	r0, r0
 8014572:	e7e5      	b.n	8014540 <uxr_serialize_ActivityInfoVariant+0xa0>
 8014574:	3108      	adds	r1, #8
 8014576:	44a2      	add	sl, r4
 8014578:	2204      	movs	r2, #4
 801457a:	4640      	mov	r0, r8
 801457c:	4449      	add	r1, r9
 801457e:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8014582:	f7fb fc83 	bl	800fe8c <ucdr_serialize_array_uint8_t>
 8014586:	4605      	mov	r5, r0
 8014588:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 801458c:	4640      	mov	r0, r8
 801458e:	f7fb fef5 	bl	801037c <ucdr_serialize_uint16_t>
 8014592:	4028      	ands	r0, r5
 8014594:	b2c0      	uxtb	r0, r0
 8014596:	e7d3      	b.n	8014540 <uxr_serialize_ActivityInfoVariant+0xa0>
 8014598:	3108      	adds	r1, #8
 801459a:	44a2      	add	sl, r4
 801459c:	2202      	movs	r2, #2
 801459e:	4640      	mov	r0, r8
 80145a0:	4449      	add	r1, r9
 80145a2:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80145a6:	f7fb fc71 	bl	800fe8c <ucdr_serialize_array_uint8_t>
 80145aa:	4605      	mov	r5, r0
 80145ac:	f89a 1016 	ldrb.w	r1, [sl, #22]
 80145b0:	4640      	mov	r0, r8
 80145b2:	f7fb feb7 	bl	8010324 <ucdr_serialize_uint8_t>
 80145b6:	4028      	ands	r0, r5
 80145b8:	b2c0      	uxtb	r0, r0
 80145ba:	e7c1      	b.n	8014540 <uxr_serialize_ActivityInfoVariant+0xa0>
 80145bc:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 80145c0:	4640      	mov	r0, r8
 80145c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80145c6:	f7fc bbe9 	b.w	8010d9c <ucdr_serialize_int16_t>
 80145ca:	3401      	adds	r4, #1
 80145cc:	68f2      	ldr	r2, [r6, #12]
 80145ce:	42a2      	cmp	r2, r4
 80145d0:	d8bc      	bhi.n	801454c <uxr_serialize_ActivityInfoVariant+0xac>
 80145d2:	4007      	ands	r7, r0
 80145d4:	b2ff      	uxtb	r7, r7
 80145d6:	e774      	b.n	80144c2 <uxr_serialize_ActivityInfoVariant+0x22>
 80145d8:	3401      	adds	r4, #1
 80145da:	68f3      	ldr	r3, [r6, #12]
 80145dc:	3518      	adds	r5, #24
 80145de:	429c      	cmp	r4, r3
 80145e0:	d397      	bcc.n	8014512 <uxr_serialize_ActivityInfoVariant+0x72>
 80145e2:	e76e      	b.n	80144c2 <uxr_serialize_ActivityInfoVariant+0x22>

080145e4 <uxr_deserialize_BaseObjectReply>:
 80145e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145e8:	2202      	movs	r2, #2
 80145ea:	4606      	mov	r6, r0
 80145ec:	460f      	mov	r7, r1
 80145ee:	f7fb fcb1 	bl	800ff54 <ucdr_deserialize_array_uint8_t>
 80145f2:	2202      	movs	r2, #2
 80145f4:	4605      	mov	r5, r0
 80145f6:	4630      	mov	r0, r6
 80145f8:	18b9      	adds	r1, r7, r2
 80145fa:	f7fb fcab 	bl	800ff54 <ucdr_deserialize_array_uint8_t>
 80145fe:	4680      	mov	r8, r0
 8014600:	1d39      	adds	r1, r7, #4
 8014602:	4630      	mov	r0, r6
 8014604:	f7fb fea4 	bl	8010350 <ucdr_deserialize_uint8_t>
 8014608:	ea05 0508 	and.w	r5, r5, r8
 801460c:	4604      	mov	r4, r0
 801460e:	1d79      	adds	r1, r7, #5
 8014610:	4630      	mov	r0, r6
 8014612:	402c      	ands	r4, r5
 8014614:	f7fb fe9c 	bl	8010350 <ucdr_deserialize_uint8_t>
 8014618:	4020      	ands	r0, r4
 801461a:	b2c0      	uxtb	r0, r0
 801461c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014620 <uxr_serialize_ReadSpecification>:
 8014620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014622:	460e      	mov	r6, r1
 8014624:	4607      	mov	r7, r0
 8014626:	7809      	ldrb	r1, [r1, #0]
 8014628:	f7fb fe7c 	bl	8010324 <ucdr_serialize_uint8_t>
 801462c:	4604      	mov	r4, r0
 801462e:	7871      	ldrb	r1, [r6, #1]
 8014630:	4638      	mov	r0, r7
 8014632:	f7fb fe77 	bl	8010324 <ucdr_serialize_uint8_t>
 8014636:	4004      	ands	r4, r0
 8014638:	78b1      	ldrb	r1, [r6, #2]
 801463a:	4638      	mov	r0, r7
 801463c:	f7fb fe44 	bl	80102c8 <ucdr_serialize_bool>
 8014640:	78b3      	ldrb	r3, [r6, #2]
 8014642:	b2e4      	uxtb	r4, r4
 8014644:	4004      	ands	r4, r0
 8014646:	b943      	cbnz	r3, 801465a <uxr_serialize_ReadSpecification+0x3a>
 8014648:	7a31      	ldrb	r1, [r6, #8]
 801464a:	4638      	mov	r0, r7
 801464c:	f7fb fe3c 	bl	80102c8 <ucdr_serialize_bool>
 8014650:	7a33      	ldrb	r3, [r6, #8]
 8014652:	4004      	ands	r4, r0
 8014654:	b93b      	cbnz	r3, 8014666 <uxr_serialize_ReadSpecification+0x46>
 8014656:	4620      	mov	r0, r4
 8014658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801465a:	6871      	ldr	r1, [r6, #4]
 801465c:	4638      	mov	r0, r7
 801465e:	f006 fc49 	bl	801aef4 <ucdr_serialize_string>
 8014662:	4004      	ands	r4, r0
 8014664:	e7f0      	b.n	8014648 <uxr_serialize_ReadSpecification+0x28>
 8014666:	8971      	ldrh	r1, [r6, #10]
 8014668:	4638      	mov	r0, r7
 801466a:	f7fb fe87 	bl	801037c <ucdr_serialize_uint16_t>
 801466e:	4605      	mov	r5, r0
 8014670:	89b1      	ldrh	r1, [r6, #12]
 8014672:	4638      	mov	r0, r7
 8014674:	f7fb fe82 	bl	801037c <ucdr_serialize_uint16_t>
 8014678:	4005      	ands	r5, r0
 801467a:	89f1      	ldrh	r1, [r6, #14]
 801467c:	4638      	mov	r0, r7
 801467e:	b2ed      	uxtb	r5, r5
 8014680:	f7fb fe7c 	bl	801037c <ucdr_serialize_uint16_t>
 8014684:	8a31      	ldrh	r1, [r6, #16]
 8014686:	4025      	ands	r5, r4
 8014688:	4604      	mov	r4, r0
 801468a:	4638      	mov	r0, r7
 801468c:	4025      	ands	r5, r4
 801468e:	f7fb fe75 	bl	801037c <ucdr_serialize_uint16_t>
 8014692:	ea00 0405 	and.w	r4, r0, r5
 8014696:	4620      	mov	r0, r4
 8014698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801469a:	bf00      	nop

0801469c <uxr_serialize_CREATE_CLIENT_Payload>:
 801469c:	f7ff b9ea 	b.w	8013a74 <uxr_serialize_CLIENT_Representation>

080146a0 <uxr_serialize_CREATE_Payload>:
 80146a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146a2:	2202      	movs	r2, #2
 80146a4:	4607      	mov	r7, r0
 80146a6:	460e      	mov	r6, r1
 80146a8:	f7fb fbf0 	bl	800fe8c <ucdr_serialize_array_uint8_t>
 80146ac:	2202      	movs	r2, #2
 80146ae:	4605      	mov	r5, r0
 80146b0:	4638      	mov	r0, r7
 80146b2:	18b1      	adds	r1, r6, r2
 80146b4:	f7fb fbea 	bl	800fe8c <ucdr_serialize_array_uint8_t>
 80146b8:	7931      	ldrb	r1, [r6, #4]
 80146ba:	4604      	mov	r4, r0
 80146bc:	4638      	mov	r0, r7
 80146be:	f7fb fe31 	bl	8010324 <ucdr_serialize_uint8_t>
 80146c2:	b170      	cbz	r0, 80146e2 <uxr_serialize_CREATE_Payload+0x42>
 80146c4:	7933      	ldrb	r3, [r6, #4]
 80146c6:	402c      	ands	r4, r5
 80146c8:	3b01      	subs	r3, #1
 80146ca:	b2e4      	uxtb	r4, r4
 80146cc:	2b0d      	cmp	r3, #13
 80146ce:	d809      	bhi.n	80146e4 <uxr_serialize_CREATE_Payload+0x44>
 80146d0:	e8df f003 	tbb	[pc, r3]
 80146d4:	23230a4c 	.word	0x23230a4c
 80146d8:	0a0a0a0a 	.word	0x0a0a0a0a
 80146dc:	12121208 	.word	0x12121208
 80146e0:	3e45      	.short	0x3e45
 80146e2:	2400      	movs	r4, #0
 80146e4:	4620      	mov	r0, r4
 80146e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80146e8:	f106 0108 	add.w	r1, r6, #8
 80146ec:	4638      	mov	r0, r7
 80146ee:	f7ff fac7 	bl	8013c80 <uxr_serialize_DATAWRITER_Representation>
 80146f2:	4004      	ands	r4, r0
 80146f4:	4620      	mov	r0, r4
 80146f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80146f8:	7a31      	ldrb	r1, [r6, #8]
 80146fa:	4638      	mov	r0, r7
 80146fc:	f7fb fe12 	bl	8010324 <ucdr_serialize_uint8_t>
 8014700:	2800      	cmp	r0, #0
 8014702:	d0ee      	beq.n	80146e2 <uxr_serialize_CREATE_Payload+0x42>
 8014704:	7a33      	ldrb	r3, [r6, #8]
 8014706:	2b01      	cmp	r3, #1
 8014708:	d001      	beq.n	801470e <uxr_serialize_CREATE_Payload+0x6e>
 801470a:	2b02      	cmp	r3, #2
 801470c:	d1ea      	bne.n	80146e4 <uxr_serialize_CREATE_Payload+0x44>
 801470e:	68f1      	ldr	r1, [r6, #12]
 8014710:	4638      	mov	r0, r7
 8014712:	f006 fbef 	bl	801aef4 <ucdr_serialize_string>
 8014716:	4004      	ands	r4, r0
 8014718:	e7e4      	b.n	80146e4 <uxr_serialize_CREATE_Payload+0x44>
 801471a:	7a31      	ldrb	r1, [r6, #8]
 801471c:	4638      	mov	r0, r7
 801471e:	f7fb fe01 	bl	8010324 <ucdr_serialize_uint8_t>
 8014722:	4605      	mov	r5, r0
 8014724:	b158      	cbz	r0, 801473e <uxr_serialize_CREATE_Payload+0x9e>
 8014726:	7a33      	ldrb	r3, [r6, #8]
 8014728:	2b02      	cmp	r3, #2
 801472a:	d034      	beq.n	8014796 <uxr_serialize_CREATE_Payload+0xf6>
 801472c:	2b03      	cmp	r3, #3
 801472e:	d106      	bne.n	801473e <uxr_serialize_CREATE_Payload+0x9e>
 8014730:	68f2      	ldr	r2, [r6, #12]
 8014732:	f106 0110 	add.w	r1, r6, #16
 8014736:	4638      	mov	r0, r7
 8014738:	f006 fbb0 	bl	801ae9c <ucdr_serialize_sequence_uint8_t>
 801473c:	4605      	mov	r5, r0
 801473e:	2202      	movs	r2, #2
 8014740:	f506 7104 	add.w	r1, r6, #528	; 0x210
 8014744:	4638      	mov	r0, r7
 8014746:	f7fb fba1 	bl	800fe8c <ucdr_serialize_array_uint8_t>
 801474a:	4028      	ands	r0, r5
 801474c:	4004      	ands	r4, r0
 801474e:	e7c9      	b.n	80146e4 <uxr_serialize_CREATE_Payload+0x44>
 8014750:	f106 0108 	add.w	r1, r6, #8
 8014754:	4638      	mov	r0, r7
 8014756:	f7ff f98d 	bl	8013a74 <uxr_serialize_CLIENT_Representation>
 801475a:	4004      	ands	r4, r0
 801475c:	e7c2      	b.n	80146e4 <uxr_serialize_CREATE_Payload+0x44>
 801475e:	f106 0108 	add.w	r1, r6, #8
 8014762:	4638      	mov	r0, r7
 8014764:	f7ff fa42 	bl	8013bec <uxr_serialize_AGENT_Representation>
 8014768:	4004      	ands	r4, r0
 801476a:	e7bb      	b.n	80146e4 <uxr_serialize_CREATE_Payload+0x44>
 801476c:	7a31      	ldrb	r1, [r6, #8]
 801476e:	4638      	mov	r0, r7
 8014770:	f7fb fdd8 	bl	8010324 <ucdr_serialize_uint8_t>
 8014774:	4605      	mov	r5, r0
 8014776:	b130      	cbz	r0, 8014786 <uxr_serialize_CREATE_Payload+0xe6>
 8014778:	7a33      	ldrb	r3, [r6, #8]
 801477a:	2b02      	cmp	r3, #2
 801477c:	d011      	beq.n	80147a2 <uxr_serialize_CREATE_Payload+0x102>
 801477e:	2b03      	cmp	r3, #3
 8014780:	d015      	beq.n	80147ae <uxr_serialize_CREATE_Payload+0x10e>
 8014782:	2b01      	cmp	r3, #1
 8014784:	d00d      	beq.n	80147a2 <uxr_serialize_CREATE_Payload+0x102>
 8014786:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 801478a:	4638      	mov	r0, r7
 801478c:	f7fc fb06 	bl	8010d9c <ucdr_serialize_int16_t>
 8014790:	4028      	ands	r0, r5
 8014792:	4004      	ands	r4, r0
 8014794:	e7a6      	b.n	80146e4 <uxr_serialize_CREATE_Payload+0x44>
 8014796:	68f1      	ldr	r1, [r6, #12]
 8014798:	4638      	mov	r0, r7
 801479a:	f006 fbab 	bl	801aef4 <ucdr_serialize_string>
 801479e:	4605      	mov	r5, r0
 80147a0:	e7cd      	b.n	801473e <uxr_serialize_CREATE_Payload+0x9e>
 80147a2:	68f1      	ldr	r1, [r6, #12]
 80147a4:	4638      	mov	r0, r7
 80147a6:	f006 fba5 	bl	801aef4 <ucdr_serialize_string>
 80147aa:	4605      	mov	r5, r0
 80147ac:	e7eb      	b.n	8014786 <uxr_serialize_CREATE_Payload+0xe6>
 80147ae:	68f2      	ldr	r2, [r6, #12]
 80147b0:	f106 0110 	add.w	r1, r6, #16
 80147b4:	4638      	mov	r0, r7
 80147b6:	f006 fb71 	bl	801ae9c <ucdr_serialize_sequence_uint8_t>
 80147ba:	4605      	mov	r5, r0
 80147bc:	e7e3      	b.n	8014786 <uxr_serialize_CREATE_Payload+0xe6>
 80147be:	bf00      	nop

080147c0 <uxr_deserialize_GET_INFO_Payload>:
 80147c0:	b570      	push	{r4, r5, r6, lr}
 80147c2:	2202      	movs	r2, #2
 80147c4:	4605      	mov	r5, r0
 80147c6:	460e      	mov	r6, r1
 80147c8:	f7fb fbc4 	bl	800ff54 <ucdr_deserialize_array_uint8_t>
 80147cc:	2202      	movs	r2, #2
 80147ce:	4604      	mov	r4, r0
 80147d0:	4628      	mov	r0, r5
 80147d2:	18b1      	adds	r1, r6, r2
 80147d4:	f7fb fbbe 	bl	800ff54 <ucdr_deserialize_array_uint8_t>
 80147d8:	4603      	mov	r3, r0
 80147da:	1d31      	adds	r1, r6, #4
 80147dc:	4628      	mov	r0, r5
 80147de:	401c      	ands	r4, r3
 80147e0:	f7fc f8e6 	bl	80109b0 <ucdr_deserialize_uint32_t>
 80147e4:	b2e4      	uxtb	r4, r4
 80147e6:	4020      	ands	r0, r4
 80147e8:	bd70      	pop	{r4, r5, r6, pc}
 80147ea:	bf00      	nop

080147ec <uxr_serialize_DELETE_Payload>:
 80147ec:	b570      	push	{r4, r5, r6, lr}
 80147ee:	2202      	movs	r2, #2
 80147f0:	4605      	mov	r5, r0
 80147f2:	460e      	mov	r6, r1
 80147f4:	f7fb fb4a 	bl	800fe8c <ucdr_serialize_array_uint8_t>
 80147f8:	2202      	movs	r2, #2
 80147fa:	4604      	mov	r4, r0
 80147fc:	4628      	mov	r0, r5
 80147fe:	18b1      	adds	r1, r6, r2
 8014800:	f7fb fb44 	bl	800fe8c <ucdr_serialize_array_uint8_t>
 8014804:	4020      	ands	r0, r4
 8014806:	b2c0      	uxtb	r0, r0
 8014808:	bd70      	pop	{r4, r5, r6, pc}
 801480a:	bf00      	nop

0801480c <uxr_deserialize_STATUS_AGENT_Payload>:
 801480c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014810:	460e      	mov	r6, r1
 8014812:	4605      	mov	r5, r0
 8014814:	f7fb fd9c 	bl	8010350 <ucdr_deserialize_uint8_t>
 8014818:	4604      	mov	r4, r0
 801481a:	1c71      	adds	r1, r6, #1
 801481c:	4628      	mov	r0, r5
 801481e:	f7fb fd97 	bl	8010350 <ucdr_deserialize_uint8_t>
 8014822:	2204      	movs	r2, #4
 8014824:	4681      	mov	r9, r0
 8014826:	4628      	mov	r0, r5
 8014828:	18b1      	adds	r1, r6, r2
 801482a:	f7fb fb93 	bl	800ff54 <ucdr_deserialize_array_uint8_t>
 801482e:	f106 0108 	add.w	r1, r6, #8
 8014832:	4680      	mov	r8, r0
 8014834:	2202      	movs	r2, #2
 8014836:	4628      	mov	r0, r5
 8014838:	f7fb fb8c 	bl	800ff54 <ucdr_deserialize_array_uint8_t>
 801483c:	ea04 0309 	and.w	r3, r4, r9
 8014840:	4607      	mov	r7, r0
 8014842:	2202      	movs	r2, #2
 8014844:	b2db      	uxtb	r3, r3
 8014846:	f106 010a 	add.w	r1, r6, #10
 801484a:	4628      	mov	r0, r5
 801484c:	ea03 0408 	and.w	r4, r3, r8
 8014850:	f7fb fb80 	bl	800ff54 <ucdr_deserialize_array_uint8_t>
 8014854:	4603      	mov	r3, r0
 8014856:	4628      	mov	r0, r5
 8014858:	403c      	ands	r4, r7
 801485a:	f106 010c 	add.w	r1, r6, #12
 801485e:	461d      	mov	r5, r3
 8014860:	f7fb fd48 	bl	80102f4 <ucdr_deserialize_bool>
 8014864:	4025      	ands	r5, r4
 8014866:	4028      	ands	r0, r5
 8014868:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801486c <uxr_deserialize_STATUS_Payload>:
 801486c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014870:	2202      	movs	r2, #2
 8014872:	4606      	mov	r6, r0
 8014874:	460f      	mov	r7, r1
 8014876:	f7fb fb6d 	bl	800ff54 <ucdr_deserialize_array_uint8_t>
 801487a:	2202      	movs	r2, #2
 801487c:	4605      	mov	r5, r0
 801487e:	4630      	mov	r0, r6
 8014880:	18b9      	adds	r1, r7, r2
 8014882:	f7fb fb67 	bl	800ff54 <ucdr_deserialize_array_uint8_t>
 8014886:	4680      	mov	r8, r0
 8014888:	1d39      	adds	r1, r7, #4
 801488a:	4630      	mov	r0, r6
 801488c:	f7fb fd60 	bl	8010350 <ucdr_deserialize_uint8_t>
 8014890:	ea05 0508 	and.w	r5, r5, r8
 8014894:	4604      	mov	r4, r0
 8014896:	1d79      	adds	r1, r7, #5
 8014898:	4630      	mov	r0, r6
 801489a:	402c      	ands	r4, r5
 801489c:	f7fb fd58 	bl	8010350 <ucdr_deserialize_uint8_t>
 80148a0:	4020      	ands	r0, r4
 80148a2:	b2c0      	uxtb	r0, r0
 80148a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080148a8 <uxr_serialize_INFO_Payload>:
 80148a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148ac:	2202      	movs	r2, #2
 80148ae:	460c      	mov	r4, r1
 80148b0:	4605      	mov	r5, r0
 80148b2:	f7fb faeb 	bl	800fe8c <ucdr_serialize_array_uint8_t>
 80148b6:	2202      	movs	r2, #2
 80148b8:	4680      	mov	r8, r0
 80148ba:	4628      	mov	r0, r5
 80148bc:	18a1      	adds	r1, r4, r2
 80148be:	f7fb fae5 	bl	800fe8c <ucdr_serialize_array_uint8_t>
 80148c2:	4607      	mov	r7, r0
 80148c4:	7921      	ldrb	r1, [r4, #4]
 80148c6:	4628      	mov	r0, r5
 80148c8:	f7fb fd2c 	bl	8010324 <ucdr_serialize_uint8_t>
 80148cc:	ea08 0807 	and.w	r8, r8, r7
 80148d0:	4606      	mov	r6, r0
 80148d2:	7961      	ldrb	r1, [r4, #5]
 80148d4:	4628      	mov	r0, r5
 80148d6:	ea06 0608 	and.w	r6, r6, r8
 80148da:	f7fb fd23 	bl	8010324 <ucdr_serialize_uint8_t>
 80148de:	7a21      	ldrb	r1, [r4, #8]
 80148e0:	4030      	ands	r0, r6
 80148e2:	b2c7      	uxtb	r7, r0
 80148e4:	4628      	mov	r0, r5
 80148e6:	f7fb fcef 	bl	80102c8 <ucdr_serialize_bool>
 80148ea:	7a23      	ldrb	r3, [r4, #8]
 80148ec:	4606      	mov	r6, r0
 80148ee:	b96b      	cbnz	r3, 801490c <uxr_serialize_INFO_Payload+0x64>
 80148f0:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 80148f4:	4628      	mov	r0, r5
 80148f6:	f7fb fce7 	bl	80102c8 <ucdr_serialize_bool>
 80148fa:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 80148fe:	4030      	ands	r0, r6
 8014900:	b2c6      	uxtb	r6, r0
 8014902:	b983      	cbnz	r3, 8014926 <uxr_serialize_INFO_Payload+0x7e>
 8014904:	ea06 0007 	and.w	r0, r6, r7
 8014908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801490c:	7b21      	ldrb	r1, [r4, #12]
 801490e:	4628      	mov	r0, r5
 8014910:	f7fb fd08 	bl	8010324 <ucdr_serialize_uint8_t>
 8014914:	b188      	cbz	r0, 801493a <uxr_serialize_INFO_Payload+0x92>
 8014916:	f104 010c 	add.w	r1, r4, #12
 801491a:	4628      	mov	r0, r5
 801491c:	f7ff f9d8 	bl	8013cd0 <uxr_serialize_ObjectVariant.part.0>
 8014920:	4030      	ands	r0, r6
 8014922:	b2c6      	uxtb	r6, r0
 8014924:	e7e4      	b.n	80148f0 <uxr_serialize_INFO_Payload+0x48>
 8014926:	f504 7108 	add.w	r1, r4, #544	; 0x220
 801492a:	4628      	mov	r0, r5
 801492c:	f7ff fdb8 	bl	80144a0 <uxr_serialize_ActivityInfoVariant>
 8014930:	4006      	ands	r6, r0
 8014932:	ea06 0007 	and.w	r0, r6, r7
 8014936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801493a:	4606      	mov	r6, r0
 801493c:	e7d8      	b.n	80148f0 <uxr_serialize_INFO_Payload+0x48>
 801493e:	bf00      	nop

08014940 <uxr_serialize_READ_DATA_Payload>:
 8014940:	b570      	push	{r4, r5, r6, lr}
 8014942:	2202      	movs	r2, #2
 8014944:	4605      	mov	r5, r0
 8014946:	460e      	mov	r6, r1
 8014948:	f7fb faa0 	bl	800fe8c <ucdr_serialize_array_uint8_t>
 801494c:	2202      	movs	r2, #2
 801494e:	4604      	mov	r4, r0
 8014950:	4628      	mov	r0, r5
 8014952:	18b1      	adds	r1, r6, r2
 8014954:	f7fb fa9a 	bl	800fe8c <ucdr_serialize_array_uint8_t>
 8014958:	4603      	mov	r3, r0
 801495a:	1d31      	adds	r1, r6, #4
 801495c:	4628      	mov	r0, r5
 801495e:	401c      	ands	r4, r3
 8014960:	f7ff fe5e 	bl	8014620 <uxr_serialize_ReadSpecification>
 8014964:	b2e4      	uxtb	r4, r4
 8014966:	4020      	ands	r0, r4
 8014968:	bd70      	pop	{r4, r5, r6, pc}
 801496a:	bf00      	nop

0801496c <uxr_serialize_WRITE_DATA_Payload_Data>:
 801496c:	b570      	push	{r4, r5, r6, lr}
 801496e:	2202      	movs	r2, #2
 8014970:	4605      	mov	r5, r0
 8014972:	460e      	mov	r6, r1
 8014974:	f7fb fa8a 	bl	800fe8c <ucdr_serialize_array_uint8_t>
 8014978:	2202      	movs	r2, #2
 801497a:	4604      	mov	r4, r0
 801497c:	4628      	mov	r0, r5
 801497e:	18b1      	adds	r1, r6, r2
 8014980:	f7fb fa84 	bl	800fe8c <ucdr_serialize_array_uint8_t>
 8014984:	4020      	ands	r0, r4
 8014986:	b2c0      	uxtb	r0, r0
 8014988:	bd70      	pop	{r4, r5, r6, pc}
 801498a:	bf00      	nop

0801498c <uxr_serialize_ACKNACK_Payload>:
 801498c:	b570      	push	{r4, r5, r6, lr}
 801498e:	460c      	mov	r4, r1
 8014990:	4605      	mov	r5, r0
 8014992:	460e      	mov	r6, r1
 8014994:	f834 1b02 	ldrh.w	r1, [r4], #2
 8014998:	f7fb fcf0 	bl	801037c <ucdr_serialize_uint16_t>
 801499c:	2202      	movs	r2, #2
 801499e:	4621      	mov	r1, r4
 80149a0:	4604      	mov	r4, r0
 80149a2:	4628      	mov	r0, r5
 80149a4:	f7fb fa72 	bl	800fe8c <ucdr_serialize_array_uint8_t>
 80149a8:	4603      	mov	r3, r0
 80149aa:	7931      	ldrb	r1, [r6, #4]
 80149ac:	4628      	mov	r0, r5
 80149ae:	401c      	ands	r4, r3
 80149b0:	f7fb fcb8 	bl	8010324 <ucdr_serialize_uint8_t>
 80149b4:	b2e4      	uxtb	r4, r4
 80149b6:	4020      	ands	r0, r4
 80149b8:	bd70      	pop	{r4, r5, r6, pc}
 80149ba:	bf00      	nop

080149bc <uxr_deserialize_ACKNACK_Payload>:
 80149bc:	b570      	push	{r4, r5, r6, lr}
 80149be:	460e      	mov	r6, r1
 80149c0:	4605      	mov	r5, r0
 80149c2:	f7fb fddb 	bl	801057c <ucdr_deserialize_uint16_t>
 80149c6:	2202      	movs	r2, #2
 80149c8:	4604      	mov	r4, r0
 80149ca:	4628      	mov	r0, r5
 80149cc:	18b1      	adds	r1, r6, r2
 80149ce:	f7fb fac1 	bl	800ff54 <ucdr_deserialize_array_uint8_t>
 80149d2:	4603      	mov	r3, r0
 80149d4:	1d31      	adds	r1, r6, #4
 80149d6:	4628      	mov	r0, r5
 80149d8:	401c      	ands	r4, r3
 80149da:	f7fb fcb9 	bl	8010350 <ucdr_deserialize_uint8_t>
 80149de:	b2e4      	uxtb	r4, r4
 80149e0:	4020      	ands	r0, r4
 80149e2:	bd70      	pop	{r4, r5, r6, pc}

080149e4 <uxr_serialize_HEARTBEAT_Payload>:
 80149e4:	b570      	push	{r4, r5, r6, lr}
 80149e6:	460d      	mov	r5, r1
 80149e8:	4606      	mov	r6, r0
 80149ea:	8809      	ldrh	r1, [r1, #0]
 80149ec:	f7fb fcc6 	bl	801037c <ucdr_serialize_uint16_t>
 80149f0:	8869      	ldrh	r1, [r5, #2]
 80149f2:	4604      	mov	r4, r0
 80149f4:	4630      	mov	r0, r6
 80149f6:	f7fb fcc1 	bl	801037c <ucdr_serialize_uint16_t>
 80149fa:	4603      	mov	r3, r0
 80149fc:	7929      	ldrb	r1, [r5, #4]
 80149fe:	4630      	mov	r0, r6
 8014a00:	401c      	ands	r4, r3
 8014a02:	f7fb fc8f 	bl	8010324 <ucdr_serialize_uint8_t>
 8014a06:	b2e4      	uxtb	r4, r4
 8014a08:	4020      	ands	r0, r4
 8014a0a:	bd70      	pop	{r4, r5, r6, pc}

08014a0c <uxr_deserialize_HEARTBEAT_Payload>:
 8014a0c:	b570      	push	{r4, r5, r6, lr}
 8014a0e:	460e      	mov	r6, r1
 8014a10:	4605      	mov	r5, r0
 8014a12:	f7fb fdb3 	bl	801057c <ucdr_deserialize_uint16_t>
 8014a16:	4604      	mov	r4, r0
 8014a18:	1cb1      	adds	r1, r6, #2
 8014a1a:	4628      	mov	r0, r5
 8014a1c:	f7fb fdae 	bl	801057c <ucdr_deserialize_uint16_t>
 8014a20:	4603      	mov	r3, r0
 8014a22:	1d31      	adds	r1, r6, #4
 8014a24:	4628      	mov	r0, r5
 8014a26:	401c      	ands	r4, r3
 8014a28:	f7fb fc92 	bl	8010350 <ucdr_deserialize_uint8_t>
 8014a2c:	b2e4      	uxtb	r4, r4
 8014a2e:	4020      	ands	r0, r4
 8014a30:	bd70      	pop	{r4, r5, r6, pc}
 8014a32:	bf00      	nop

08014a34 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8014a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a38:	460e      	mov	r6, r1
 8014a3a:	4605      	mov	r5, r0
 8014a3c:	f7fc fc30 	bl	80112a0 <ucdr_deserialize_int32_t>
 8014a40:	4607      	mov	r7, r0
 8014a42:	1d31      	adds	r1, r6, #4
 8014a44:	4628      	mov	r0, r5
 8014a46:	f7fb ffb3 	bl	80109b0 <ucdr_deserialize_uint32_t>
 8014a4a:	4680      	mov	r8, r0
 8014a4c:	f106 0108 	add.w	r1, r6, #8
 8014a50:	4628      	mov	r0, r5
 8014a52:	f7fc fc25 	bl	80112a0 <ucdr_deserialize_int32_t>
 8014a56:	ea07 0708 	and.w	r7, r7, r8
 8014a5a:	4604      	mov	r4, r0
 8014a5c:	f106 010c 	add.w	r1, r6, #12
 8014a60:	4628      	mov	r0, r5
 8014a62:	403c      	ands	r4, r7
 8014a64:	f7fb ffa4 	bl	80109b0 <ucdr_deserialize_uint32_t>
 8014a68:	f106 0110 	add.w	r1, r6, #16
 8014a6c:	4004      	ands	r4, r0
 8014a6e:	4628      	mov	r0, r5
 8014a70:	f7fc fc16 	bl	80112a0 <ucdr_deserialize_int32_t>
 8014a74:	4603      	mov	r3, r0
 8014a76:	b2e4      	uxtb	r4, r4
 8014a78:	4628      	mov	r0, r5
 8014a7a:	461d      	mov	r5, r3
 8014a7c:	f106 0114 	add.w	r1, r6, #20
 8014a80:	f7fb ff96 	bl	80109b0 <ucdr_deserialize_uint32_t>
 8014a84:	402c      	ands	r4, r5
 8014a86:	4020      	ands	r0, r4
 8014a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014a8c <uxr_serialize_SampleIdentity>:
 8014a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a90:	4604      	mov	r4, r0
 8014a92:	460d      	mov	r5, r1
 8014a94:	220c      	movs	r2, #12
 8014a96:	f7fb f9f9 	bl	800fe8c <ucdr_serialize_array_uint8_t>
 8014a9a:	2203      	movs	r2, #3
 8014a9c:	f105 010c 	add.w	r1, r5, #12
 8014aa0:	4607      	mov	r7, r0
 8014aa2:	4620      	mov	r0, r4
 8014aa4:	f7fb f9f2 	bl	800fe8c <ucdr_serialize_array_uint8_t>
 8014aa8:	7be9      	ldrb	r1, [r5, #15]
 8014aaa:	4680      	mov	r8, r0
 8014aac:	4620      	mov	r0, r4
 8014aae:	f7fb fc39 	bl	8010324 <ucdr_serialize_uint8_t>
 8014ab2:	6929      	ldr	r1, [r5, #16]
 8014ab4:	4606      	mov	r6, r0
 8014ab6:	4620      	mov	r0, r4
 8014ab8:	f7fc fb5a 	bl	8011170 <ucdr_serialize_int32_t>
 8014abc:	ea07 0708 	and.w	r7, r7, r8
 8014ac0:	4603      	mov	r3, r0
 8014ac2:	4620      	mov	r0, r4
 8014ac4:	403e      	ands	r6, r7
 8014ac6:	6969      	ldr	r1, [r5, #20]
 8014ac8:	461c      	mov	r4, r3
 8014aca:	f7fb fe41 	bl	8010750 <ucdr_serialize_uint32_t>
 8014ace:	4034      	ands	r4, r6
 8014ad0:	4020      	ands	r0, r4
 8014ad2:	b2c0      	uxtb	r0, r0
 8014ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014ad8 <uxr_deserialize_SampleIdentity>:
 8014ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014adc:	4604      	mov	r4, r0
 8014ade:	460d      	mov	r5, r1
 8014ae0:	220c      	movs	r2, #12
 8014ae2:	f7fb fa37 	bl	800ff54 <ucdr_deserialize_array_uint8_t>
 8014ae6:	2203      	movs	r2, #3
 8014ae8:	f105 010c 	add.w	r1, r5, #12
 8014aec:	4607      	mov	r7, r0
 8014aee:	4620      	mov	r0, r4
 8014af0:	f7fb fa30 	bl	800ff54 <ucdr_deserialize_array_uint8_t>
 8014af4:	f105 010f 	add.w	r1, r5, #15
 8014af8:	4680      	mov	r8, r0
 8014afa:	4620      	mov	r0, r4
 8014afc:	f7fb fc28 	bl	8010350 <ucdr_deserialize_uint8_t>
 8014b00:	f105 0110 	add.w	r1, r5, #16
 8014b04:	4606      	mov	r6, r0
 8014b06:	4620      	mov	r0, r4
 8014b08:	f7fc fbca 	bl	80112a0 <ucdr_deserialize_int32_t>
 8014b0c:	ea07 0708 	and.w	r7, r7, r8
 8014b10:	4603      	mov	r3, r0
 8014b12:	4620      	mov	r0, r4
 8014b14:	403e      	ands	r6, r7
 8014b16:	f105 0114 	add.w	r1, r5, #20
 8014b1a:	461c      	mov	r4, r3
 8014b1c:	f7fb ff48 	bl	80109b0 <ucdr_deserialize_uint32_t>
 8014b20:	4034      	ands	r4, r6
 8014b22:	4020      	ands	r0, r4
 8014b24:	b2c0      	uxtb	r0, r0
 8014b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b2a:	bf00      	nop

08014b2c <racs_services__srv__Control_Event__get_type_description.part.0>:
 8014b2c:	b510      	push	{r4, lr}
 8014b2e:	2000      	movs	r0, #0
 8014b30:	4c13      	ldr	r4, [pc, #76]	; (8014b80 <racs_services__srv__Control_Event__get_type_description.part.0+0x54>)
 8014b32:	f006 f955 	bl	801ade0 <builtin_interfaces__msg__Time__get_type_description>
 8014b36:	300c      	adds	r0, #12
 8014b38:	4b12      	ldr	r3, [pc, #72]	; (8014b84 <racs_services__srv__Control_Event__get_type_description.part.0+0x58>)
 8014b3a:	c807      	ldmia	r0, {r0, r1, r2}
 8014b3c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014b40:	7823      	ldrb	r3, [r4, #0]
 8014b42:	b90b      	cbnz	r3, 8014b48 <racs_services__srv__Control_Event__get_type_description.part.0+0x1c>
 8014b44:	2301      	movs	r3, #1
 8014b46:	7023      	strb	r3, [r4, #0]
 8014b48:	4a0f      	ldr	r2, [pc, #60]	; (8014b88 <racs_services__srv__Control_Event__get_type_description.part.0+0x5c>)
 8014b4a:	4b10      	ldr	r3, [pc, #64]	; (8014b8c <racs_services__srv__Control_Event__get_type_description.part.0+0x60>)
 8014b4c:	4c10      	ldr	r4, [pc, #64]	; (8014b90 <racs_services__srv__Control_Event__get_type_description.part.0+0x64>)
 8014b4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8014b50:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014b54:	7823      	ldrb	r3, [r4, #0]
 8014b56:	b90b      	cbnz	r3, 8014b5c <racs_services__srv__Control_Event__get_type_description.part.0+0x30>
 8014b58:	2301      	movs	r3, #1
 8014b5a:	7023      	strb	r3, [r4, #0]
 8014b5c:	4b0d      	ldr	r3, [pc, #52]	; (8014b94 <racs_services__srv__Control_Event__get_type_description.part.0+0x68>)
 8014b5e:	4c0e      	ldr	r4, [pc, #56]	; (8014b98 <racs_services__srv__Control_Event__get_type_description.part.0+0x6c>)
 8014b60:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014b64:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014b68:	2000      	movs	r0, #0
 8014b6a:	3418      	adds	r4, #24
 8014b6c:	f006 f8d8 	bl	801ad20 <service_msgs__msg__ServiceEventInfo__get_type_description>
 8014b70:	300c      	adds	r0, #12
 8014b72:	4b0a      	ldr	r3, [pc, #40]	; (8014b9c <racs_services__srv__Control_Event__get_type_description.part.0+0x70>)
 8014b74:	c807      	ldmia	r0, {r0, r1, r2}
 8014b76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014b7a:	2201      	movs	r2, #1
 8014b7c:	701a      	strb	r2, [r3, #0]
 8014b7e:	bd10      	pop	{r4, pc}
 8014b80:	20011580 	.word	0x20011580
 8014b84:	20000ea8 	.word	0x20000ea8
 8014b88:	08020a74 	.word	0x08020a74
 8014b8c:	20000ec0 	.word	0x20000ec0
 8014b90:	2001157e 	.word	0x2001157e
 8014b94:	08020a50 	.word	0x08020a50
 8014b98:	20000ed8 	.word	0x20000ed8
 8014b9c:	2001157d 	.word	0x2001157d

08014ba0 <racs_services__srv__Control__get_type_hash>:
 8014ba0:	4800      	ldr	r0, [pc, #0]	; (8014ba4 <racs_services__srv__Control__get_type_hash+0x4>)
 8014ba2:	4770      	bx	lr
 8014ba4:	20000d78 	.word	0x20000d78

08014ba8 <racs_services__srv__Control_Request__get_type_hash>:
 8014ba8:	4800      	ldr	r0, [pc, #0]	; (8014bac <racs_services__srv__Control_Request__get_type_hash+0x4>)
 8014baa:	4770      	bx	lr
 8014bac:	20000d54 	.word	0x20000d54

08014bb0 <racs_services__srv__Control_Response__get_type_hash>:
 8014bb0:	4800      	ldr	r0, [pc, #0]	; (8014bb4 <racs_services__srv__Control_Response__get_type_hash+0x4>)
 8014bb2:	4770      	bx	lr
 8014bb4:	20000d30 	.word	0x20000d30

08014bb8 <racs_services__srv__Control_Event__get_type_hash>:
 8014bb8:	4800      	ldr	r0, [pc, #0]	; (8014bbc <racs_services__srv__Control_Event__get_type_hash+0x4>)
 8014bba:	4770      	bx	lr
 8014bbc:	20000d0c 	.word	0x20000d0c

08014bc0 <racs_services__srv__Control__get_type_description>:
 8014bc0:	b538      	push	{r3, r4, r5, lr}
 8014bc2:	4d1c      	ldr	r5, [pc, #112]	; (8014c34 <racs_services__srv__Control__get_type_description+0x74>)
 8014bc4:	7828      	ldrb	r0, [r5, #0]
 8014bc6:	b108      	cbz	r0, 8014bcc <racs_services__srv__Control__get_type_description+0xc>
 8014bc8:	481b      	ldr	r0, [pc, #108]	; (8014c38 <racs_services__srv__Control__get_type_description+0x78>)
 8014bca:	bd38      	pop	{r3, r4, r5, pc}
 8014bcc:	f006 f908 	bl	801ade0 <builtin_interfaces__msg__Time__get_type_description>
 8014bd0:	300c      	adds	r0, #12
 8014bd2:	4b1a      	ldr	r3, [pc, #104]	; (8014c3c <racs_services__srv__Control__get_type_description+0x7c>)
 8014bd4:	c807      	ldmia	r0, {r0, r1, r2}
 8014bd6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014bda:	4b19      	ldr	r3, [pc, #100]	; (8014c40 <racs_services__srv__Control__get_type_description+0x80>)
 8014bdc:	781b      	ldrb	r3, [r3, #0]
 8014bde:	b32b      	cbz	r3, 8014c2c <racs_services__srv__Control__get_type_description+0x6c>
 8014be0:	4a18      	ldr	r2, [pc, #96]	; (8014c44 <racs_services__srv__Control__get_type_description+0x84>)
 8014be2:	4b19      	ldr	r3, [pc, #100]	; (8014c48 <racs_services__srv__Control__get_type_description+0x88>)
 8014be4:	4c19      	ldr	r4, [pc, #100]	; (8014c4c <racs_services__srv__Control__get_type_description+0x8c>)
 8014be6:	ca07      	ldmia	r2, {r0, r1, r2}
 8014be8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014bec:	7823      	ldrb	r3, [r4, #0]
 8014bee:	b90b      	cbnz	r3, 8014bf4 <racs_services__srv__Control__get_type_description+0x34>
 8014bf0:	2301      	movs	r3, #1
 8014bf2:	7023      	strb	r3, [r4, #0]
 8014bf4:	4a16      	ldr	r2, [pc, #88]	; (8014c50 <racs_services__srv__Control__get_type_description+0x90>)
 8014bf6:	4b17      	ldr	r3, [pc, #92]	; (8014c54 <racs_services__srv__Control__get_type_description+0x94>)
 8014bf8:	4c17      	ldr	r4, [pc, #92]	; (8014c58 <racs_services__srv__Control__get_type_description+0x98>)
 8014bfa:	ca07      	ldmia	r2, {r0, r1, r2}
 8014bfc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014c00:	7823      	ldrb	r3, [r4, #0]
 8014c02:	b90b      	cbnz	r3, 8014c08 <racs_services__srv__Control__get_type_description+0x48>
 8014c04:	2301      	movs	r3, #1
 8014c06:	7023      	strb	r3, [r4, #0]
 8014c08:	4b14      	ldr	r3, [pc, #80]	; (8014c5c <racs_services__srv__Control__get_type_description+0x9c>)
 8014c0a:	4c15      	ldr	r4, [pc, #84]	; (8014c60 <racs_services__srv__Control__get_type_description+0xa0>)
 8014c0c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014c10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014c14:	2000      	movs	r0, #0
 8014c16:	3418      	adds	r4, #24
 8014c18:	f006 f882 	bl	801ad20 <service_msgs__msg__ServiceEventInfo__get_type_description>
 8014c1c:	300c      	adds	r0, #12
 8014c1e:	2301      	movs	r3, #1
 8014c20:	c807      	ldmia	r0, {r0, r1, r2}
 8014c22:	702b      	strb	r3, [r5, #0]
 8014c24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014c28:	4803      	ldr	r0, [pc, #12]	; (8014c38 <racs_services__srv__Control__get_type_description+0x78>)
 8014c2a:	bd38      	pop	{r3, r4, r5, pc}
 8014c2c:	f7ff ff7e 	bl	8014b2c <racs_services__srv__Control_Event__get_type_description.part.0>
 8014c30:	e7d6      	b.n	8014be0 <racs_services__srv__Control__get_type_description+0x20>
 8014c32:	bf00      	nop
 8014c34:	20011581 	.word	0x20011581
 8014c38:	08020a8c 	.word	0x08020a8c
 8014c3c:	200011d0 	.word	0x200011d0
 8014c40:	2001157d 	.word	0x2001157d
 8014c44:	08020a2c 	.word	0x08020a2c
 8014c48:	200011e8 	.word	0x200011e8
 8014c4c:	20011580 	.word	0x20011580
 8014c50:	08020a74 	.word	0x08020a74
 8014c54:	20001200 	.word	0x20001200
 8014c58:	2001157e 	.word	0x2001157e
 8014c5c:	08020a50 	.word	0x08020a50
 8014c60:	20001218 	.word	0x20001218

08014c64 <racs_services__srv__Control_Request__get_type_description>:
 8014c64:	4b03      	ldr	r3, [pc, #12]	; (8014c74 <racs_services__srv__Control_Request__get_type_description+0x10>)
 8014c66:	781a      	ldrb	r2, [r3, #0]
 8014c68:	b90a      	cbnz	r2, 8014c6e <racs_services__srv__Control_Request__get_type_description+0xa>
 8014c6a:	2201      	movs	r2, #1
 8014c6c:	701a      	strb	r2, [r3, #0]
 8014c6e:	4802      	ldr	r0, [pc, #8]	; (8014c78 <racs_services__srv__Control_Request__get_type_description+0x14>)
 8014c70:	4770      	bx	lr
 8014c72:	bf00      	nop
 8014c74:	20011580 	.word	0x20011580
 8014c78:	08020a68 	.word	0x08020a68

08014c7c <racs_services__srv__Control_Response__get_type_description>:
 8014c7c:	4b03      	ldr	r3, [pc, #12]	; (8014c8c <racs_services__srv__Control_Response__get_type_description+0x10>)
 8014c7e:	781a      	ldrb	r2, [r3, #0]
 8014c80:	b90a      	cbnz	r2, 8014c86 <racs_services__srv__Control_Response__get_type_description+0xa>
 8014c82:	2201      	movs	r2, #1
 8014c84:	701a      	strb	r2, [r3, #0]
 8014c86:	4802      	ldr	r0, [pc, #8]	; (8014c90 <racs_services__srv__Control_Response__get_type_description+0x14>)
 8014c88:	4770      	bx	lr
 8014c8a:	bf00      	nop
 8014c8c:	2001157e 	.word	0x2001157e
 8014c90:	08020a44 	.word	0x08020a44

08014c94 <racs_services__srv__Control_Event__get_type_description>:
 8014c94:	b508      	push	{r3, lr}
 8014c96:	4b04      	ldr	r3, [pc, #16]	; (8014ca8 <racs_services__srv__Control_Event__get_type_description+0x14>)
 8014c98:	781b      	ldrb	r3, [r3, #0]
 8014c9a:	b10b      	cbz	r3, 8014ca0 <racs_services__srv__Control_Event__get_type_description+0xc>
 8014c9c:	4803      	ldr	r0, [pc, #12]	; (8014cac <racs_services__srv__Control_Event__get_type_description+0x18>)
 8014c9e:	bd08      	pop	{r3, pc}
 8014ca0:	f7ff ff44 	bl	8014b2c <racs_services__srv__Control_Event__get_type_description.part.0>
 8014ca4:	4801      	ldr	r0, [pc, #4]	; (8014cac <racs_services__srv__Control_Event__get_type_description+0x18>)
 8014ca6:	bd08      	pop	{r3, pc}
 8014ca8:	2001157d 	.word	0x2001157d
 8014cac:	08020a20 	.word	0x08020a20

08014cb0 <racs_services__srv__Control__get_type_description_sources>:
 8014cb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cb4:	4b2c      	ldr	r3, [pc, #176]	; (8014d68 <racs_services__srv__Control__get_type_description_sources+0xb8>)
 8014cb6:	f893 9000 	ldrb.w	r9, [r3]
 8014cba:	f1b9 0f00 	cmp.w	r9, #0
 8014cbe:	d002      	beq.n	8014cc6 <racs_services__srv__Control__get_type_description_sources+0x16>
 8014cc0:	482a      	ldr	r0, [pc, #168]	; (8014d6c <racs_services__srv__Control__get_type_description_sources+0xbc>)
 8014cc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cc6:	4d2a      	ldr	r5, [pc, #168]	; (8014d70 <racs_services__srv__Control__get_type_description_sources+0xc0>)
 8014cc8:	4c2a      	ldr	r4, [pc, #168]	; (8014d74 <racs_services__srv__Control__get_type_description_sources+0xc4>)
 8014cca:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8014d7c <racs_services__srv__Control__get_type_description_sources+0xcc>
 8014cce:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8014d80 <racs_services__srv__Control__get_type_description_sources+0xd0>
 8014cd2:	4e29      	ldr	r6, [pc, #164]	; (8014d78 <racs_services__srv__Control__get_type_description_sources+0xc8>)
 8014cd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014cd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014cd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014cda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014cdc:	682b      	ldr	r3, [r5, #0]
 8014cde:	4625      	mov	r5, r4
 8014ce0:	4648      	mov	r0, r9
 8014ce2:	f104 0a28 	add.w	sl, r4, #40	; 0x28
 8014ce6:	f845 3b04 	str.w	r3, [r5], #4
 8014cea:	f104 074c 	add.w	r7, r4, #76	; 0x4c
 8014cee:	f006 f883 	bl	801adf8 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8014cf2:	4684      	mov	ip, r0
 8014cf4:	f104 0e70 	add.w	lr, r4, #112	; 0x70
 8014cf8:	3494      	adds	r4, #148	; 0x94
 8014cfa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014cfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014d00:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014d04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014d06:	f8dc 3000 	ldr.w	r3, [ip]
 8014d0a:	602b      	str	r3, [r5, #0]
 8014d0c:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8014d10:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 8014d14:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8014d18:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 8014d1c:	f8db 3000 	ldr.w	r3, [fp]
 8014d20:	f8ca 3000 	str.w	r3, [sl]
 8014d24:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8014d28:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8014d2a:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8014d2e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8014d30:	f8d8 3000 	ldr.w	r3, [r8]
 8014d34:	603b      	str	r3, [r7, #0]
 8014d36:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8014d38:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014d3c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8014d3e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014d42:	6833      	ldr	r3, [r6, #0]
 8014d44:	4648      	mov	r0, r9
 8014d46:	f8ce 3000 	str.w	r3, [lr]
 8014d4a:	f006 f801 	bl	801ad50 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 8014d4e:	2301      	movs	r3, #1
 8014d50:	4a05      	ldr	r2, [pc, #20]	; (8014d68 <racs_services__srv__Control__get_type_description_sources+0xb8>)
 8014d52:	4605      	mov	r5, r0
 8014d54:	7013      	strb	r3, [r2, #0]
 8014d56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014d58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014d5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014d5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014d5e:	682b      	ldr	r3, [r5, #0]
 8014d60:	4802      	ldr	r0, [pc, #8]	; (8014d6c <racs_services__srv__Control__get_type_description_sources+0xbc>)
 8014d62:	6023      	str	r3, [r4, #0]
 8014d64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d68:	2001157c 	.word	0x2001157c
 8014d6c:	08020b64 	.word	0x08020b64
 8014d70:	08020b1c 	.word	0x08020b1c
 8014d74:	20011638 	.word	0x20011638
 8014d78:	08020ad4 	.word	0x08020ad4
 8014d7c:	08020ab0 	.word	0x08020ab0
 8014d80:	08020af8 	.word	0x08020af8

08014d84 <racs_services__srv__Control_Request__get_type_description_sources>:
 8014d84:	4b09      	ldr	r3, [pc, #36]	; (8014dac <racs_services__srv__Control_Request__get_type_description_sources+0x28>)
 8014d86:	781a      	ldrb	r2, [r3, #0]
 8014d88:	b96a      	cbnz	r2, 8014da6 <racs_services__srv__Control_Request__get_type_description_sources+0x22>
 8014d8a:	2201      	movs	r2, #1
 8014d8c:	b430      	push	{r4, r5}
 8014d8e:	4d08      	ldr	r5, [pc, #32]	; (8014db0 <racs_services__srv__Control_Request__get_type_description_sources+0x2c>)
 8014d90:	4c08      	ldr	r4, [pc, #32]	; (8014db4 <racs_services__srv__Control_Request__get_type_description_sources+0x30>)
 8014d92:	701a      	strb	r2, [r3, #0]
 8014d94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014d96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014d98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014d9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014d9c:	682b      	ldr	r3, [r5, #0]
 8014d9e:	4806      	ldr	r0, [pc, #24]	; (8014db8 <racs_services__srv__Control_Request__get_type_description_sources+0x34>)
 8014da0:	6023      	str	r3, [r4, #0]
 8014da2:	bc30      	pop	{r4, r5}
 8014da4:	4770      	bx	lr
 8014da6:	4804      	ldr	r0, [pc, #16]	; (8014db8 <racs_services__srv__Control_Request__get_type_description_sources+0x34>)
 8014da8:	4770      	bx	lr
 8014daa:	bf00      	nop
 8014dac:	20011583 	.word	0x20011583
 8014db0:	08020af8 	.word	0x08020af8
 8014db4:	20011734 	.word	0x20011734
 8014db8:	08020b58 	.word	0x08020b58

08014dbc <racs_services__srv__Control_Response__get_type_description_sources>:
 8014dbc:	4b09      	ldr	r3, [pc, #36]	; (8014de4 <racs_services__srv__Control_Response__get_type_description_sources+0x28>)
 8014dbe:	781a      	ldrb	r2, [r3, #0]
 8014dc0:	b96a      	cbnz	r2, 8014dde <racs_services__srv__Control_Response__get_type_description_sources+0x22>
 8014dc2:	2201      	movs	r2, #1
 8014dc4:	b430      	push	{r4, r5}
 8014dc6:	4d08      	ldr	r5, [pc, #32]	; (8014de8 <racs_services__srv__Control_Response__get_type_description_sources+0x2c>)
 8014dc8:	4c08      	ldr	r4, [pc, #32]	; (8014dec <racs_services__srv__Control_Response__get_type_description_sources+0x30>)
 8014dca:	701a      	strb	r2, [r3, #0]
 8014dcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014dce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014dd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014dd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014dd4:	682b      	ldr	r3, [r5, #0]
 8014dd6:	4806      	ldr	r0, [pc, #24]	; (8014df0 <racs_services__srv__Control_Response__get_type_description_sources+0x34>)
 8014dd8:	6023      	str	r3, [r4, #0]
 8014dda:	bc30      	pop	{r4, r5}
 8014ddc:	4770      	bx	lr
 8014dde:	4804      	ldr	r0, [pc, #16]	; (8014df0 <racs_services__srv__Control_Response__get_type_description_sources+0x34>)
 8014de0:	4770      	bx	lr
 8014de2:	bf00      	nop
 8014de4:	20011582 	.word	0x20011582
 8014de8:	08020ad4 	.word	0x08020ad4
 8014dec:	20011710 	.word	0x20011710
 8014df0:	08020b4c 	.word	0x08020b4c

08014df4 <racs_services__srv__Control_Event__get_type_description_sources>:
 8014df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014df8:	4e27      	ldr	r6, [pc, #156]	; (8014e98 <racs_services__srv__Control_Event__get_type_description_sources+0xa4>)
 8014dfa:	f896 8000 	ldrb.w	r8, [r6]
 8014dfe:	f1b8 0f00 	cmp.w	r8, #0
 8014e02:	d002      	beq.n	8014e0a <racs_services__srv__Control_Event__get_type_description_sources+0x16>
 8014e04:	4825      	ldr	r0, [pc, #148]	; (8014e9c <racs_services__srv__Control_Event__get_type_description_sources+0xa8>)
 8014e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e0a:	4d25      	ldr	r5, [pc, #148]	; (8014ea0 <racs_services__srv__Control_Event__get_type_description_sources+0xac>)
 8014e0c:	4c25      	ldr	r4, [pc, #148]	; (8014ea4 <racs_services__srv__Control_Event__get_type_description_sources+0xb0>)
 8014e0e:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8014eac <racs_services__srv__Control_Event__get_type_description_sources+0xb8>
 8014e12:	4f25      	ldr	r7, [pc, #148]	; (8014ea8 <racs_services__srv__Control_Event__get_type_description_sources+0xb4>)
 8014e14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014e16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014e18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014e1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014e1c:	682b      	ldr	r3, [r5, #0]
 8014e1e:	4625      	mov	r5, r4
 8014e20:	4640      	mov	r0, r8
 8014e22:	f104 0928 	add.w	r9, r4, #40	; 0x28
 8014e26:	f845 3b04 	str.w	r3, [r5], #4
 8014e2a:	f005 ffe5 	bl	801adf8 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8014e2e:	4684      	mov	ip, r0
 8014e30:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 8014e34:	3470      	adds	r4, #112	; 0x70
 8014e36:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014e3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014e3c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014e40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014e42:	f8dc 3000 	ldr.w	r3, [ip]
 8014e46:	602b      	str	r3, [r5, #0]
 8014e48:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 8014e4c:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8014e50:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 8014e54:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8014e58:	f8da 3000 	ldr.w	r3, [sl]
 8014e5c:	f8c9 3000 	str.w	r3, [r9]
 8014e60:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014e62:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014e66:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014e68:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014e6c:	683b      	ldr	r3, [r7, #0]
 8014e6e:	4640      	mov	r0, r8
 8014e70:	f8ce 3000 	str.w	r3, [lr]
 8014e74:	f005 ff6c 	bl	801ad50 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 8014e78:	2301      	movs	r3, #1
 8014e7a:	4684      	mov	ip, r0
 8014e7c:	7033      	strb	r3, [r6, #0]
 8014e7e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014e82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014e84:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014e88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014e8a:	f8dc 3000 	ldr.w	r3, [ip]
 8014e8e:	4803      	ldr	r0, [pc, #12]	; (8014e9c <racs_services__srv__Control_Event__get_type_description_sources+0xa8>)
 8014e90:	6023      	str	r3, [r4, #0]
 8014e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e96:	bf00      	nop
 8014e98:	2001157f 	.word	0x2001157f
 8014e9c:	08020b40 	.word	0x08020b40
 8014ea0:	08020ab0 	.word	0x08020ab0
 8014ea4:	20011584 	.word	0x20011584
 8014ea8:	08020ad4 	.word	0x08020ad4
 8014eac:	08020af8 	.word	0x08020af8

08014eb0 <racs_services__srv__Control_Event__fini.part.0>:
 8014eb0:	b510      	push	{r4, lr}
 8014eb2:	b086      	sub	sp, #24
 8014eb4:	4604      	mov	r4, r0
 8014eb6:	f005 ff89 	bl	801adcc <service_msgs__msg__ServiceEventInfo__fini>
 8014eba:	a801      	add	r0, sp, #4
 8014ebc:	f7f9 ff3a 	bl	800ed34 <rcutils_get_default_allocator>
 8014ec0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8014ec2:	b130      	cbz	r0, 8014ed2 <racs_services__srv__Control_Event__fini.part.0+0x22>
 8014ec4:	9b02      	ldr	r3, [sp, #8]
 8014ec6:	9905      	ldr	r1, [sp, #20]
 8014ec8:	4798      	blx	r3
 8014eca:	2300      	movs	r3, #0
 8014ecc:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8014ed0:	6323      	str	r3, [r4, #48]	; 0x30
 8014ed2:	a801      	add	r0, sp, #4
 8014ed4:	f7f9 ff2e 	bl	800ed34 <rcutils_get_default_allocator>
 8014ed8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8014eda:	b130      	cbz	r0, 8014eea <racs_services__srv__Control_Event__fini.part.0+0x3a>
 8014edc:	9b02      	ldr	r3, [sp, #8]
 8014ede:	9905      	ldr	r1, [sp, #20]
 8014ee0:	4798      	blx	r3
 8014ee2:	2300      	movs	r3, #0
 8014ee4:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8014ee8:	63e3      	str	r3, [r4, #60]	; 0x3c
 8014eea:	b006      	add	sp, #24
 8014eec:	bd10      	pop	{r4, pc}
 8014eee:	bf00      	nop

08014ef0 <racs_services__srv__Control_Request__init>:
 8014ef0:	3800      	subs	r0, #0
 8014ef2:	bf18      	it	ne
 8014ef4:	2001      	movne	r0, #1
 8014ef6:	4770      	bx	lr

08014ef8 <racs_services__srv__Control_Request__fini>:
 8014ef8:	4770      	bx	lr
 8014efa:	bf00      	nop

08014efc <racs_services__srv__Control_Request__copy>:
 8014efc:	b168      	cbz	r0, 8014f1a <racs_services__srv__Control_Request__copy+0x1e>
 8014efe:	b161      	cbz	r1, 8014f1a <racs_services__srv__Control_Request__copy+0x1e>
 8014f00:	220a      	movs	r2, #10
 8014f02:	b508      	push	{r3, lr}
 8014f04:	4603      	mov	r3, r0
 8014f06:	4608      	mov	r0, r1
 8014f08:	f833 1b02 	ldrh.w	r1, [r3], #2
 8014f0c:	f820 1b02 	strh.w	r1, [r0], #2
 8014f10:	4619      	mov	r1, r3
 8014f12:	f009 fca1 	bl	801e858 <memmove>
 8014f16:	2001      	movs	r0, #1
 8014f18:	bd08      	pop	{r3, pc}
 8014f1a:	2000      	movs	r0, #0
 8014f1c:	4770      	bx	lr
 8014f1e:	bf00      	nop

08014f20 <racs_services__srv__Control_Request__Sequence__init>:
 8014f20:	b530      	push	{r4, r5, lr}
 8014f22:	4604      	mov	r4, r0
 8014f24:	b087      	sub	sp, #28
 8014f26:	b148      	cbz	r0, 8014f3c <racs_services__srv__Control_Request__Sequence__init+0x1c>
 8014f28:	460d      	mov	r5, r1
 8014f2a:	a801      	add	r0, sp, #4
 8014f2c:	f7f9 ff02 	bl	800ed34 <rcutils_get_default_allocator>
 8014f30:	b935      	cbnz	r5, 8014f40 <racs_services__srv__Control_Request__Sequence__init+0x20>
 8014f32:	462b      	mov	r3, r5
 8014f34:	2001      	movs	r0, #1
 8014f36:	60a5      	str	r5, [r4, #8]
 8014f38:	e9c4 3500 	strd	r3, r5, [r4]
 8014f3c:	b007      	add	sp, #28
 8014f3e:	bd30      	pop	{r4, r5, pc}
 8014f40:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8014f44:	210c      	movs	r1, #12
 8014f46:	4628      	mov	r0, r5
 8014f48:	4798      	blx	r3
 8014f4a:	4603      	mov	r3, r0
 8014f4c:	2800      	cmp	r0, #0
 8014f4e:	d1f1      	bne.n	8014f34 <racs_services__srv__Control_Request__Sequence__init+0x14>
 8014f50:	e7f4      	b.n	8014f3c <racs_services__srv__Control_Request__Sequence__init+0x1c>
 8014f52:	bf00      	nop

08014f54 <racs_services__srv__Control_Request__Sequence__fini>:
 8014f54:	b180      	cbz	r0, 8014f78 <racs_services__srv__Control_Request__Sequence__fini+0x24>
 8014f56:	b510      	push	{r4, lr}
 8014f58:	b086      	sub	sp, #24
 8014f5a:	4604      	mov	r4, r0
 8014f5c:	a801      	add	r0, sp, #4
 8014f5e:	f7f9 fee9 	bl	800ed34 <rcutils_get_default_allocator>
 8014f62:	6820      	ldr	r0, [r4, #0]
 8014f64:	b130      	cbz	r0, 8014f74 <racs_services__srv__Control_Request__Sequence__fini+0x20>
 8014f66:	9b02      	ldr	r3, [sp, #8]
 8014f68:	9905      	ldr	r1, [sp, #20]
 8014f6a:	4798      	blx	r3
 8014f6c:	2300      	movs	r3, #0
 8014f6e:	e9c4 3300 	strd	r3, r3, [r4]
 8014f72:	60a3      	str	r3, [r4, #8]
 8014f74:	b006      	add	sp, #24
 8014f76:	bd10      	pop	{r4, pc}
 8014f78:	4770      	bx	lr
 8014f7a:	bf00      	nop

08014f7c <racs_services__srv__Control_Response__init>:
 8014f7c:	3800      	subs	r0, #0
 8014f7e:	bf18      	it	ne
 8014f80:	2001      	movne	r0, #1
 8014f82:	4770      	bx	lr

08014f84 <racs_services__srv__Control_Response__fini>:
 8014f84:	4770      	bx	lr
 8014f86:	bf00      	nop

08014f88 <racs_services__srv__Control_Response__copy>:
 8014f88:	b120      	cbz	r0, 8014f94 <racs_services__srv__Control_Response__copy+0xc>
 8014f8a:	b119      	cbz	r1, 8014f94 <racs_services__srv__Control_Response__copy+0xc>
 8014f8c:	7803      	ldrb	r3, [r0, #0]
 8014f8e:	2001      	movs	r0, #1
 8014f90:	700b      	strb	r3, [r1, #0]
 8014f92:	4770      	bx	lr
 8014f94:	2000      	movs	r0, #0
 8014f96:	4770      	bx	lr

08014f98 <racs_services__srv__Control_Response__Sequence__init>:
 8014f98:	b530      	push	{r4, r5, lr}
 8014f9a:	4604      	mov	r4, r0
 8014f9c:	b087      	sub	sp, #28
 8014f9e:	b148      	cbz	r0, 8014fb4 <racs_services__srv__Control_Response__Sequence__init+0x1c>
 8014fa0:	460d      	mov	r5, r1
 8014fa2:	a801      	add	r0, sp, #4
 8014fa4:	f7f9 fec6 	bl	800ed34 <rcutils_get_default_allocator>
 8014fa8:	b935      	cbnz	r5, 8014fb8 <racs_services__srv__Control_Response__Sequence__init+0x20>
 8014faa:	462b      	mov	r3, r5
 8014fac:	2001      	movs	r0, #1
 8014fae:	60a5      	str	r5, [r4, #8]
 8014fb0:	e9c4 3500 	strd	r3, r5, [r4]
 8014fb4:	b007      	add	sp, #28
 8014fb6:	bd30      	pop	{r4, r5, pc}
 8014fb8:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8014fbc:	2101      	movs	r1, #1
 8014fbe:	4628      	mov	r0, r5
 8014fc0:	4798      	blx	r3
 8014fc2:	4603      	mov	r3, r0
 8014fc4:	2800      	cmp	r0, #0
 8014fc6:	d1f1      	bne.n	8014fac <racs_services__srv__Control_Response__Sequence__init+0x14>
 8014fc8:	e7f4      	b.n	8014fb4 <racs_services__srv__Control_Response__Sequence__init+0x1c>
 8014fca:	bf00      	nop

08014fcc <racs_services__srv__Control_Response__Sequence__fini>:
 8014fcc:	b180      	cbz	r0, 8014ff0 <racs_services__srv__Control_Response__Sequence__fini+0x24>
 8014fce:	b510      	push	{r4, lr}
 8014fd0:	b086      	sub	sp, #24
 8014fd2:	4604      	mov	r4, r0
 8014fd4:	a801      	add	r0, sp, #4
 8014fd6:	f7f9 fead 	bl	800ed34 <rcutils_get_default_allocator>
 8014fda:	6820      	ldr	r0, [r4, #0]
 8014fdc:	b130      	cbz	r0, 8014fec <racs_services__srv__Control_Response__Sequence__fini+0x20>
 8014fde:	9b02      	ldr	r3, [sp, #8]
 8014fe0:	9905      	ldr	r1, [sp, #20]
 8014fe2:	4798      	blx	r3
 8014fe4:	2300      	movs	r3, #0
 8014fe6:	e9c4 3300 	strd	r3, r3, [r4]
 8014fea:	60a3      	str	r3, [r4, #8]
 8014fec:	b006      	add	sp, #24
 8014fee:	bd10      	pop	{r4, pc}
 8014ff0:	4770      	bx	lr
 8014ff2:	bf00      	nop

08014ff4 <racs_services__srv__Control_Event__init>:
 8014ff4:	b570      	push	{r4, r5, r6, lr}
 8014ff6:	4604      	mov	r4, r0
 8014ff8:	b086      	sub	sp, #24
 8014ffa:	b1c8      	cbz	r0, 8015030 <racs_services__srv__Control_Event__init+0x3c>
 8014ffc:	f005 fed4 	bl	801ada8 <service_msgs__msg__ServiceEventInfo__init>
 8015000:	4605      	mov	r5, r0
 8015002:	b178      	cbz	r0, 8015024 <racs_services__srv__Control_Event__init+0x30>
 8015004:	2600      	movs	r6, #0
 8015006:	a801      	add	r0, sp, #4
 8015008:	f7f9 fe94 	bl	800ed34 <rcutils_get_default_allocator>
 801500c:	a801      	add	r0, sp, #4
 801500e:	6326      	str	r6, [r4, #48]	; 0x30
 8015010:	e9c4 660a 	strd	r6, r6, [r4, #40]	; 0x28
 8015014:	f7f9 fe8e 	bl	800ed34 <rcutils_get_default_allocator>
 8015018:	4628      	mov	r0, r5
 801501a:	63e6      	str	r6, [r4, #60]	; 0x3c
 801501c:	e9c4 660d 	strd	r6, r6, [r4, #52]	; 0x34
 8015020:	b006      	add	sp, #24
 8015022:	bd70      	pop	{r4, r5, r6, pc}
 8015024:	4620      	mov	r0, r4
 8015026:	f7ff ff43 	bl	8014eb0 <racs_services__srv__Control_Event__fini.part.0>
 801502a:	4628      	mov	r0, r5
 801502c:	b006      	add	sp, #24
 801502e:	bd70      	pop	{r4, r5, r6, pc}
 8015030:	4605      	mov	r5, r0
 8015032:	4628      	mov	r0, r5
 8015034:	b006      	add	sp, #24
 8015036:	bd70      	pop	{r4, r5, r6, pc}

08015038 <racs_services__srv__Control_Event__fini>:
 8015038:	b1f0      	cbz	r0, 8015078 <racs_services__srv__Control_Event__fini+0x40>
 801503a:	b510      	push	{r4, lr}
 801503c:	b086      	sub	sp, #24
 801503e:	4604      	mov	r4, r0
 8015040:	f005 fec4 	bl	801adcc <service_msgs__msg__ServiceEventInfo__fini>
 8015044:	a801      	add	r0, sp, #4
 8015046:	f7f9 fe75 	bl	800ed34 <rcutils_get_default_allocator>
 801504a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801504c:	b130      	cbz	r0, 801505c <racs_services__srv__Control_Event__fini+0x24>
 801504e:	9b02      	ldr	r3, [sp, #8]
 8015050:	9905      	ldr	r1, [sp, #20]
 8015052:	4798      	blx	r3
 8015054:	2300      	movs	r3, #0
 8015056:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 801505a:	6323      	str	r3, [r4, #48]	; 0x30
 801505c:	a801      	add	r0, sp, #4
 801505e:	f7f9 fe69 	bl	800ed34 <rcutils_get_default_allocator>
 8015062:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8015064:	b130      	cbz	r0, 8015074 <racs_services__srv__Control_Event__fini+0x3c>
 8015066:	9b02      	ldr	r3, [sp, #8]
 8015068:	9905      	ldr	r1, [sp, #20]
 801506a:	4798      	blx	r3
 801506c:	2300      	movs	r3, #0
 801506e:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8015072:	63e3      	str	r3, [r4, #60]	; 0x3c
 8015074:	b006      	add	sp, #24
 8015076:	bd10      	pop	{r4, pc}
 8015078:	4770      	bx	lr
 801507a:	bf00      	nop

0801507c <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control>:
 801507c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015080:	2900      	cmp	r1, #0
 8015082:	d04d      	beq.n	8015120 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0xa4>
 8015084:	4605      	mov	r5, r0
 8015086:	2800      	cmp	r0, #0
 8015088:	d04a      	beq.n	8015120 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0xa4>
 801508a:	460e      	mov	r6, r1
 801508c:	4698      	mov	r8, r3
 801508e:	2040      	movs	r0, #64	; 0x40
 8015090:	680b      	ldr	r3, [r1, #0]
 8015092:	6909      	ldr	r1, [r1, #16]
 8015094:	4617      	mov	r7, r2
 8015096:	4798      	blx	r3
 8015098:	4604      	mov	r4, r0
 801509a:	f7ff ffab 	bl	8014ff4 <racs_services__srv__Control_Event__init>
 801509e:	4684      	mov	ip, r0
 80150a0:	b370      	cbz	r0, 8015100 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x84>
 80150a2:	782b      	ldrb	r3, [r5, #0]
 80150a4:	7023      	strb	r3, [r4, #0]
 80150a6:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 80150aa:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 80150ae:	e9c4 2301 	strd	r2, r3, [r4, #4]
 80150b2:	e9c4 0108 	strd	r0, r1, [r4, #32]
 80150b6:	68e8      	ldr	r0, [r5, #12]
 80150b8:	6929      	ldr	r1, [r5, #16]
 80150ba:	696a      	ldr	r2, [r5, #20]
 80150bc:	69ab      	ldr	r3, [r5, #24]
 80150be:	60e0      	str	r0, [r4, #12]
 80150c0:	6121      	str	r1, [r4, #16]
 80150c2:	6162      	str	r2, [r4, #20]
 80150c4:	61a3      	str	r3, [r4, #24]
 80150c6:	b157      	cbz	r7, 80150de <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x62>
 80150c8:	2101      	movs	r1, #1
 80150ca:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80150ce:	f7ff ff27 	bl	8014f20 <racs_services__srv__Control_Request__Sequence__init>
 80150d2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80150d4:	4638      	mov	r0, r7
 80150d6:	f7ff ff11 	bl	8014efc <racs_services__srv__Control_Request__copy>
 80150da:	4603      	mov	r3, r0
 80150dc:	b1c0      	cbz	r0, 8015110 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x94>
 80150de:	f1b8 0f00 	cmp.w	r8, #0
 80150e2:	d00a      	beq.n	80150fa <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x7e>
 80150e4:	2101      	movs	r1, #1
 80150e6:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80150ea:	f7ff ff55 	bl	8014f98 <racs_services__srv__Control_Response__Sequence__init>
 80150ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80150f0:	4640      	mov	r0, r8
 80150f2:	f7ff ff49 	bl	8014f88 <racs_services__srv__Control_Response__copy>
 80150f6:	4603      	mov	r3, r0
 80150f8:	b150      	cbz	r0, 8015110 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x94>
 80150fa:	4620      	mov	r0, r4
 80150fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015100:	4620      	mov	r0, r4
 8015102:	4664      	mov	r4, ip
 8015104:	6873      	ldr	r3, [r6, #4]
 8015106:	6931      	ldr	r1, [r6, #16]
 8015108:	4798      	blx	r3
 801510a:	4620      	mov	r0, r4
 801510c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015110:	4620      	mov	r0, r4
 8015112:	461c      	mov	r4, r3
 8015114:	6872      	ldr	r2, [r6, #4]
 8015116:	6931      	ldr	r1, [r6, #16]
 8015118:	4790      	blx	r2
 801511a:	4620      	mov	r0, r4
 801511c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015120:	2400      	movs	r4, #0
 8015122:	4620      	mov	r0, r4
 8015124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015128 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control>:
 8015128:	b1b9      	cbz	r1, 801515a <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x32>
 801512a:	b538      	push	{r3, r4, r5, lr}
 801512c:	4605      	mov	r5, r0
 801512e:	b190      	cbz	r0, 8015156 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x2e>
 8015130:	460c      	mov	r4, r1
 8015132:	f7ff ff81 	bl	8015038 <racs_services__srv__Control_Event__fini>
 8015136:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8015138:	b110      	cbz	r0, 8015140 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x18>
 801513a:	6863      	ldr	r3, [r4, #4]
 801513c:	6921      	ldr	r1, [r4, #16]
 801513e:	4798      	blx	r3
 8015140:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8015142:	b110      	cbz	r0, 801514a <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x22>
 8015144:	6863      	ldr	r3, [r4, #4]
 8015146:	6921      	ldr	r1, [r4, #16]
 8015148:	4798      	blx	r3
 801514a:	4628      	mov	r0, r5
 801514c:	6863      	ldr	r3, [r4, #4]
 801514e:	6921      	ldr	r1, [r4, #16]
 8015150:	4798      	blx	r3
 8015152:	2001      	movs	r0, #1
 8015154:	bd38      	pop	{r3, r4, r5, pc}
 8015156:	2000      	movs	r0, #0
 8015158:	bd38      	pop	{r3, r4, r5, pc}
 801515a:	2000      	movs	r0, #0
 801515c:	4770      	bx	lr
 801515e:	bf00      	nop

08015160 <racs_services__msg__Debug__get_type_hash>:
 8015160:	4800      	ldr	r0, [pc, #0]	; (8015164 <racs_services__msg__Debug__get_type_hash+0x4>)
 8015162:	4770      	bx	lr
 8015164:	200012c4 	.word	0x200012c4

08015168 <racs_services__msg__Debug__get_type_description>:
 8015168:	4b03      	ldr	r3, [pc, #12]	; (8015178 <racs_services__msg__Debug__get_type_description+0x10>)
 801516a:	781a      	ldrb	r2, [r3, #0]
 801516c:	b90a      	cbnz	r2, 8015172 <racs_services__msg__Debug__get_type_description+0xa>
 801516e:	2201      	movs	r2, #1
 8015170:	701a      	strb	r2, [r3, #0]
 8015172:	4802      	ldr	r0, [pc, #8]	; (801517c <racs_services__msg__Debug__get_type_description+0x14>)
 8015174:	4770      	bx	lr
 8015176:	bf00      	nop
 8015178:	20011759 	.word	0x20011759
 801517c:	08020b70 	.word	0x08020b70

08015180 <racs_services__msg__Debug__get_type_description_sources>:
 8015180:	4b09      	ldr	r3, [pc, #36]	; (80151a8 <racs_services__msg__Debug__get_type_description_sources+0x28>)
 8015182:	781a      	ldrb	r2, [r3, #0]
 8015184:	b96a      	cbnz	r2, 80151a2 <racs_services__msg__Debug__get_type_description_sources+0x22>
 8015186:	2201      	movs	r2, #1
 8015188:	b430      	push	{r4, r5}
 801518a:	4d08      	ldr	r5, [pc, #32]	; (80151ac <racs_services__msg__Debug__get_type_description_sources+0x2c>)
 801518c:	4c08      	ldr	r4, [pc, #32]	; (80151b0 <racs_services__msg__Debug__get_type_description_sources+0x30>)
 801518e:	701a      	strb	r2, [r3, #0]
 8015190:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015192:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015194:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015196:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015198:	682b      	ldr	r3, [r5, #0]
 801519a:	4806      	ldr	r0, [pc, #24]	; (80151b4 <racs_services__msg__Debug__get_type_description_sources+0x34>)
 801519c:	6023      	str	r3, [r4, #0]
 801519e:	bc30      	pop	{r4, r5}
 80151a0:	4770      	bx	lr
 80151a2:	4804      	ldr	r0, [pc, #16]	; (80151b4 <racs_services__msg__Debug__get_type_description_sources+0x34>)
 80151a4:	4770      	bx	lr
 80151a6:	bf00      	nop
 80151a8:	20011758 	.word	0x20011758
 80151ac:	08020b94 	.word	0x08020b94
 80151b0:	2001175c 	.word	0x2001175c
 80151b4:	08020bb8 	.word	0x08020bb8

080151b8 <racs_services__msg__Debug__init>:
 80151b8:	3800      	subs	r0, #0
 80151ba:	bf18      	it	ne
 80151bc:	2001      	movne	r0, #1
 80151be:	4770      	bx	lr

080151c0 <racs_services__msg__Debug__fini>:
 80151c0:	4770      	bx	lr
 80151c2:	bf00      	nop

080151c4 <racs_services__msg__DirectAccess__get_type_hash>:
 80151c4:	4800      	ldr	r0, [pc, #0]	; (80151c8 <racs_services__msg__DirectAccess__get_type_hash+0x4>)
 80151c6:	4770      	bx	lr
 80151c8:	20001368 	.word	0x20001368

080151cc <racs_services__msg__DirectAccess__get_type_description>:
 80151cc:	4b03      	ldr	r3, [pc, #12]	; (80151dc <racs_services__msg__DirectAccess__get_type_description+0x10>)
 80151ce:	781a      	ldrb	r2, [r3, #0]
 80151d0:	b90a      	cbnz	r2, 80151d6 <racs_services__msg__DirectAccess__get_type_description+0xa>
 80151d2:	2201      	movs	r2, #1
 80151d4:	701a      	strb	r2, [r3, #0]
 80151d6:	4802      	ldr	r0, [pc, #8]	; (80151e0 <racs_services__msg__DirectAccess__get_type_description+0x14>)
 80151d8:	4770      	bx	lr
 80151da:	bf00      	nop
 80151dc:	20011781 	.word	0x20011781
 80151e0:	08020bc4 	.word	0x08020bc4

080151e4 <racs_services__msg__DirectAccess__get_type_description_sources>:
 80151e4:	4b09      	ldr	r3, [pc, #36]	; (801520c <racs_services__msg__DirectAccess__get_type_description_sources+0x28>)
 80151e6:	781a      	ldrb	r2, [r3, #0]
 80151e8:	b96a      	cbnz	r2, 8015206 <racs_services__msg__DirectAccess__get_type_description_sources+0x22>
 80151ea:	2201      	movs	r2, #1
 80151ec:	b430      	push	{r4, r5}
 80151ee:	4d08      	ldr	r5, [pc, #32]	; (8015210 <racs_services__msg__DirectAccess__get_type_description_sources+0x2c>)
 80151f0:	4c08      	ldr	r4, [pc, #32]	; (8015214 <racs_services__msg__DirectAccess__get_type_description_sources+0x30>)
 80151f2:	701a      	strb	r2, [r3, #0]
 80151f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80151f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80151f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80151fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80151fc:	682b      	ldr	r3, [r5, #0]
 80151fe:	4806      	ldr	r0, [pc, #24]	; (8015218 <racs_services__msg__DirectAccess__get_type_description_sources+0x34>)
 8015200:	6023      	str	r3, [r4, #0]
 8015202:	bc30      	pop	{r4, r5}
 8015204:	4770      	bx	lr
 8015206:	4804      	ldr	r0, [pc, #16]	; (8015218 <racs_services__msg__DirectAccess__get_type_description_sources+0x34>)
 8015208:	4770      	bx	lr
 801520a:	bf00      	nop
 801520c:	20011780 	.word	0x20011780
 8015210:	08020be8 	.word	0x08020be8
 8015214:	20011784 	.word	0x20011784
 8015218:	08020c0c 	.word	0x08020c0c

0801521c <racs_services__msg__DirectAccess__init>:
 801521c:	3800      	subs	r0, #0
 801521e:	bf18      	it	ne
 8015220:	2001      	movne	r0, #1
 8015222:	4770      	bx	lr

08015224 <racs_services__msg__DirectAccess__fini>:
 8015224:	4770      	bx	lr
 8015226:	bf00      	nop

08015228 <racs_services__msg__Encoder__get_type_hash>:
 8015228:	4800      	ldr	r0, [pc, #0]	; (801522c <racs_services__msg__Encoder__get_type_hash+0x4>)
 801522a:	4770      	bx	lr
 801522c:	20001410 	.word	0x20001410

08015230 <racs_services__msg__Encoder__get_type_description>:
 8015230:	4b03      	ldr	r3, [pc, #12]	; (8015240 <racs_services__msg__Encoder__get_type_description+0x10>)
 8015232:	781a      	ldrb	r2, [r3, #0]
 8015234:	b90a      	cbnz	r2, 801523a <racs_services__msg__Encoder__get_type_description+0xa>
 8015236:	2201      	movs	r2, #1
 8015238:	701a      	strb	r2, [r3, #0]
 801523a:	4802      	ldr	r0, [pc, #8]	; (8015244 <racs_services__msg__Encoder__get_type_description+0x14>)
 801523c:	4770      	bx	lr
 801523e:	bf00      	nop
 8015240:	200117a9 	.word	0x200117a9
 8015244:	08020c18 	.word	0x08020c18

08015248 <racs_services__msg__Encoder__get_type_description_sources>:
 8015248:	4b09      	ldr	r3, [pc, #36]	; (8015270 <racs_services__msg__Encoder__get_type_description_sources+0x28>)
 801524a:	781a      	ldrb	r2, [r3, #0]
 801524c:	b96a      	cbnz	r2, 801526a <racs_services__msg__Encoder__get_type_description_sources+0x22>
 801524e:	2201      	movs	r2, #1
 8015250:	b430      	push	{r4, r5}
 8015252:	4d08      	ldr	r5, [pc, #32]	; (8015274 <racs_services__msg__Encoder__get_type_description_sources+0x2c>)
 8015254:	4c08      	ldr	r4, [pc, #32]	; (8015278 <racs_services__msg__Encoder__get_type_description_sources+0x30>)
 8015256:	701a      	strb	r2, [r3, #0]
 8015258:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801525a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801525c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801525e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015260:	682b      	ldr	r3, [r5, #0]
 8015262:	4806      	ldr	r0, [pc, #24]	; (801527c <racs_services__msg__Encoder__get_type_description_sources+0x34>)
 8015264:	6023      	str	r3, [r4, #0]
 8015266:	bc30      	pop	{r4, r5}
 8015268:	4770      	bx	lr
 801526a:	4804      	ldr	r0, [pc, #16]	; (801527c <racs_services__msg__Encoder__get_type_description_sources+0x34>)
 801526c:	4770      	bx	lr
 801526e:	bf00      	nop
 8015270:	200117a8 	.word	0x200117a8
 8015274:	08020c3c 	.word	0x08020c3c
 8015278:	200117ac 	.word	0x200117ac
 801527c:	08020c60 	.word	0x08020c60

08015280 <racs_services__msg__Encoder__init>:
 8015280:	3800      	subs	r0, #0
 8015282:	bf18      	it	ne
 8015284:	2001      	movne	r0, #1
 8015286:	4770      	bx	lr

08015288 <racs_services__msg__Encoder__fini>:
 8015288:	4770      	bx	lr
 801528a:	bf00      	nop

0801528c <racs_services__msg__Feedback__get_type_hash>:
 801528c:	4800      	ldr	r0, [pc, #0]	; (8015290 <racs_services__msg__Feedback__get_type_hash+0x4>)
 801528e:	4770      	bx	lr
 8015290:	200014bc 	.word	0x200014bc

08015294 <racs_services__msg__Feedback__get_type_description>:
 8015294:	4b03      	ldr	r3, [pc, #12]	; (80152a4 <racs_services__msg__Feedback__get_type_description+0x10>)
 8015296:	781a      	ldrb	r2, [r3, #0]
 8015298:	b90a      	cbnz	r2, 801529e <racs_services__msg__Feedback__get_type_description+0xa>
 801529a:	2201      	movs	r2, #1
 801529c:	701a      	strb	r2, [r3, #0]
 801529e:	4802      	ldr	r0, [pc, #8]	; (80152a8 <racs_services__msg__Feedback__get_type_description+0x14>)
 80152a0:	4770      	bx	lr
 80152a2:	bf00      	nop
 80152a4:	200117d1 	.word	0x200117d1
 80152a8:	08020c6c 	.word	0x08020c6c

080152ac <racs_services__msg__Feedback__get_type_description_sources>:
 80152ac:	4b09      	ldr	r3, [pc, #36]	; (80152d4 <racs_services__msg__Feedback__get_type_description_sources+0x28>)
 80152ae:	781a      	ldrb	r2, [r3, #0]
 80152b0:	b96a      	cbnz	r2, 80152ce <racs_services__msg__Feedback__get_type_description_sources+0x22>
 80152b2:	2201      	movs	r2, #1
 80152b4:	b430      	push	{r4, r5}
 80152b6:	4d08      	ldr	r5, [pc, #32]	; (80152d8 <racs_services__msg__Feedback__get_type_description_sources+0x2c>)
 80152b8:	4c08      	ldr	r4, [pc, #32]	; (80152dc <racs_services__msg__Feedback__get_type_description_sources+0x30>)
 80152ba:	701a      	strb	r2, [r3, #0]
 80152bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80152be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80152c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80152c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80152c4:	682b      	ldr	r3, [r5, #0]
 80152c6:	4806      	ldr	r0, [pc, #24]	; (80152e0 <racs_services__msg__Feedback__get_type_description_sources+0x34>)
 80152c8:	6023      	str	r3, [r4, #0]
 80152ca:	bc30      	pop	{r4, r5}
 80152cc:	4770      	bx	lr
 80152ce:	4804      	ldr	r0, [pc, #16]	; (80152e0 <racs_services__msg__Feedback__get_type_description_sources+0x34>)
 80152d0:	4770      	bx	lr
 80152d2:	bf00      	nop
 80152d4:	200117d0 	.word	0x200117d0
 80152d8:	08020c90 	.word	0x08020c90
 80152dc:	200117d4 	.word	0x200117d4
 80152e0:	08020cb4 	.word	0x08020cb4

080152e4 <racs_services__msg__Feedback__init>:
 80152e4:	3800      	subs	r0, #0
 80152e6:	bf18      	it	ne
 80152e8:	2001      	movne	r0, #1
 80152ea:	4770      	bx	lr

080152ec <racs_services__msg__Feedback__fini>:
 80152ec:	4770      	bx	lr
 80152ee:	bf00      	nop

080152f0 <racs_services__srv__Setup_Event__get_type_description.part.0>:
 80152f0:	b510      	push	{r4, lr}
 80152f2:	2000      	movs	r0, #0
 80152f4:	4c13      	ldr	r4, [pc, #76]	; (8015344 <racs_services__srv__Setup_Event__get_type_description.part.0+0x54>)
 80152f6:	f005 fd73 	bl	801ade0 <builtin_interfaces__msg__Time__get_type_description>
 80152fa:	300c      	adds	r0, #12
 80152fc:	4b12      	ldr	r3, [pc, #72]	; (8015348 <racs_services__srv__Setup_Event__get_type_description.part.0+0x58>)
 80152fe:	c807      	ldmia	r0, {r0, r1, r2}
 8015300:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015304:	7823      	ldrb	r3, [r4, #0]
 8015306:	b90b      	cbnz	r3, 801530c <racs_services__srv__Setup_Event__get_type_description.part.0+0x1c>
 8015308:	2301      	movs	r3, #1
 801530a:	7023      	strb	r3, [r4, #0]
 801530c:	4a0f      	ldr	r2, [pc, #60]	; (801534c <racs_services__srv__Setup_Event__get_type_description.part.0+0x5c>)
 801530e:	4b10      	ldr	r3, [pc, #64]	; (8015350 <racs_services__srv__Setup_Event__get_type_description.part.0+0x60>)
 8015310:	4c10      	ldr	r4, [pc, #64]	; (8015354 <racs_services__srv__Setup_Event__get_type_description.part.0+0x64>)
 8015312:	ca07      	ldmia	r2, {r0, r1, r2}
 8015314:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015318:	7823      	ldrb	r3, [r4, #0]
 801531a:	b90b      	cbnz	r3, 8015320 <racs_services__srv__Setup_Event__get_type_description.part.0+0x30>
 801531c:	2301      	movs	r3, #1
 801531e:	7023      	strb	r3, [r4, #0]
 8015320:	4b0d      	ldr	r3, [pc, #52]	; (8015358 <racs_services__srv__Setup_Event__get_type_description.part.0+0x68>)
 8015322:	4c0e      	ldr	r4, [pc, #56]	; (801535c <racs_services__srv__Setup_Event__get_type_description.part.0+0x6c>)
 8015324:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015328:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801532c:	2000      	movs	r0, #0
 801532e:	3418      	adds	r4, #24
 8015330:	f005 fcf6 	bl	801ad20 <service_msgs__msg__ServiceEventInfo__get_type_description>
 8015334:	300c      	adds	r0, #12
 8015336:	4b0a      	ldr	r3, [pc, #40]	; (8015360 <racs_services__srv__Setup_Event__get_type_description.part.0+0x70>)
 8015338:	c807      	ldmia	r0, {r0, r1, r2}
 801533a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801533e:	2201      	movs	r2, #1
 8015340:	701a      	strb	r2, [r3, #0]
 8015342:	bd10      	pop	{r4, pc}
 8015344:	200117fc 	.word	0x200117fc
 8015348:	20001728 	.word	0x20001728
 801534c:	08020d14 	.word	0x08020d14
 8015350:	20001740 	.word	0x20001740
 8015354:	200117fa 	.word	0x200117fa
 8015358:	08020cf0 	.word	0x08020cf0
 801535c:	20001758 	.word	0x20001758
 8015360:	200117f9 	.word	0x200117f9

08015364 <racs_services__srv__Setup__get_type_hash>:
 8015364:	4800      	ldr	r0, [pc, #0]	; (8015368 <racs_services__srv__Setup__get_type_hash+0x4>)
 8015366:	4770      	bx	lr
 8015368:	200015f4 	.word	0x200015f4

0801536c <racs_services__srv__Setup_Request__get_type_hash>:
 801536c:	4800      	ldr	r0, [pc, #0]	; (8015370 <racs_services__srv__Setup_Request__get_type_hash+0x4>)
 801536e:	4770      	bx	lr
 8015370:	200015d0 	.word	0x200015d0

08015374 <racs_services__srv__Setup_Response__get_type_hash>:
 8015374:	4800      	ldr	r0, [pc, #0]	; (8015378 <racs_services__srv__Setup_Response__get_type_hash+0x4>)
 8015376:	4770      	bx	lr
 8015378:	200015ac 	.word	0x200015ac

0801537c <racs_services__srv__Setup_Event__get_type_hash>:
 801537c:	4800      	ldr	r0, [pc, #0]	; (8015380 <racs_services__srv__Setup_Event__get_type_hash+0x4>)
 801537e:	4770      	bx	lr
 8015380:	20001588 	.word	0x20001588

08015384 <racs_services__srv__Setup__get_type_description>:
 8015384:	b538      	push	{r3, r4, r5, lr}
 8015386:	4d1c      	ldr	r5, [pc, #112]	; (80153f8 <racs_services__srv__Setup__get_type_description+0x74>)
 8015388:	7828      	ldrb	r0, [r5, #0]
 801538a:	b108      	cbz	r0, 8015390 <racs_services__srv__Setup__get_type_description+0xc>
 801538c:	481b      	ldr	r0, [pc, #108]	; (80153fc <racs_services__srv__Setup__get_type_description+0x78>)
 801538e:	bd38      	pop	{r3, r4, r5, pc}
 8015390:	f005 fd26 	bl	801ade0 <builtin_interfaces__msg__Time__get_type_description>
 8015394:	300c      	adds	r0, #12
 8015396:	4b1a      	ldr	r3, [pc, #104]	; (8015400 <racs_services__srv__Setup__get_type_description+0x7c>)
 8015398:	c807      	ldmia	r0, {r0, r1, r2}
 801539a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801539e:	4b19      	ldr	r3, [pc, #100]	; (8015404 <racs_services__srv__Setup__get_type_description+0x80>)
 80153a0:	781b      	ldrb	r3, [r3, #0]
 80153a2:	b32b      	cbz	r3, 80153f0 <racs_services__srv__Setup__get_type_description+0x6c>
 80153a4:	4a18      	ldr	r2, [pc, #96]	; (8015408 <racs_services__srv__Setup__get_type_description+0x84>)
 80153a6:	4b19      	ldr	r3, [pc, #100]	; (801540c <racs_services__srv__Setup__get_type_description+0x88>)
 80153a8:	4c19      	ldr	r4, [pc, #100]	; (8015410 <racs_services__srv__Setup__get_type_description+0x8c>)
 80153aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80153ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80153b0:	7823      	ldrb	r3, [r4, #0]
 80153b2:	b90b      	cbnz	r3, 80153b8 <racs_services__srv__Setup__get_type_description+0x34>
 80153b4:	2301      	movs	r3, #1
 80153b6:	7023      	strb	r3, [r4, #0]
 80153b8:	4a16      	ldr	r2, [pc, #88]	; (8015414 <racs_services__srv__Setup__get_type_description+0x90>)
 80153ba:	4b17      	ldr	r3, [pc, #92]	; (8015418 <racs_services__srv__Setup__get_type_description+0x94>)
 80153bc:	4c17      	ldr	r4, [pc, #92]	; (801541c <racs_services__srv__Setup__get_type_description+0x98>)
 80153be:	ca07      	ldmia	r2, {r0, r1, r2}
 80153c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80153c4:	7823      	ldrb	r3, [r4, #0]
 80153c6:	b90b      	cbnz	r3, 80153cc <racs_services__srv__Setup__get_type_description+0x48>
 80153c8:	2301      	movs	r3, #1
 80153ca:	7023      	strb	r3, [r4, #0]
 80153cc:	4b14      	ldr	r3, [pc, #80]	; (8015420 <racs_services__srv__Setup__get_type_description+0x9c>)
 80153ce:	4c15      	ldr	r4, [pc, #84]	; (8015424 <racs_services__srv__Setup__get_type_description+0xa0>)
 80153d0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80153d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80153d8:	2000      	movs	r0, #0
 80153da:	3418      	adds	r4, #24
 80153dc:	f005 fca0 	bl	801ad20 <service_msgs__msg__ServiceEventInfo__get_type_description>
 80153e0:	300c      	adds	r0, #12
 80153e2:	2301      	movs	r3, #1
 80153e4:	c807      	ldmia	r0, {r0, r1, r2}
 80153e6:	702b      	strb	r3, [r5, #0]
 80153e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80153ec:	4803      	ldr	r0, [pc, #12]	; (80153fc <racs_services__srv__Setup__get_type_description+0x78>)
 80153ee:	bd38      	pop	{r3, r4, r5, pc}
 80153f0:	f7ff ff7e 	bl	80152f0 <racs_services__srv__Setup_Event__get_type_description.part.0>
 80153f4:	e7d6      	b.n	80153a4 <racs_services__srv__Setup__get_type_description+0x20>
 80153f6:	bf00      	nop
 80153f8:	200117fd 	.word	0x200117fd
 80153fc:	08020d2c 	.word	0x08020d2c
 8015400:	20001b70 	.word	0x20001b70
 8015404:	200117f9 	.word	0x200117f9
 8015408:	08020ccc 	.word	0x08020ccc
 801540c:	20001b88 	.word	0x20001b88
 8015410:	200117fc 	.word	0x200117fc
 8015414:	08020d14 	.word	0x08020d14
 8015418:	20001ba0 	.word	0x20001ba0
 801541c:	200117fa 	.word	0x200117fa
 8015420:	08020cf0 	.word	0x08020cf0
 8015424:	20001bb8 	.word	0x20001bb8

08015428 <racs_services__srv__Setup_Request__get_type_description>:
 8015428:	4b03      	ldr	r3, [pc, #12]	; (8015438 <racs_services__srv__Setup_Request__get_type_description+0x10>)
 801542a:	781a      	ldrb	r2, [r3, #0]
 801542c:	b90a      	cbnz	r2, 8015432 <racs_services__srv__Setup_Request__get_type_description+0xa>
 801542e:	2201      	movs	r2, #1
 8015430:	701a      	strb	r2, [r3, #0]
 8015432:	4802      	ldr	r0, [pc, #8]	; (801543c <racs_services__srv__Setup_Request__get_type_description+0x14>)
 8015434:	4770      	bx	lr
 8015436:	bf00      	nop
 8015438:	200117fc 	.word	0x200117fc
 801543c:	08020d08 	.word	0x08020d08

08015440 <racs_services__srv__Setup_Response__get_type_description>:
 8015440:	4b03      	ldr	r3, [pc, #12]	; (8015450 <racs_services__srv__Setup_Response__get_type_description+0x10>)
 8015442:	781a      	ldrb	r2, [r3, #0]
 8015444:	b90a      	cbnz	r2, 801544a <racs_services__srv__Setup_Response__get_type_description+0xa>
 8015446:	2201      	movs	r2, #1
 8015448:	701a      	strb	r2, [r3, #0]
 801544a:	4802      	ldr	r0, [pc, #8]	; (8015454 <racs_services__srv__Setup_Response__get_type_description+0x14>)
 801544c:	4770      	bx	lr
 801544e:	bf00      	nop
 8015450:	200117fa 	.word	0x200117fa
 8015454:	08020ce4 	.word	0x08020ce4

08015458 <racs_services__srv__Setup_Event__get_type_description>:
 8015458:	b508      	push	{r3, lr}
 801545a:	4b04      	ldr	r3, [pc, #16]	; (801546c <racs_services__srv__Setup_Event__get_type_description+0x14>)
 801545c:	781b      	ldrb	r3, [r3, #0]
 801545e:	b10b      	cbz	r3, 8015464 <racs_services__srv__Setup_Event__get_type_description+0xc>
 8015460:	4803      	ldr	r0, [pc, #12]	; (8015470 <racs_services__srv__Setup_Event__get_type_description+0x18>)
 8015462:	bd08      	pop	{r3, pc}
 8015464:	f7ff ff44 	bl	80152f0 <racs_services__srv__Setup_Event__get_type_description.part.0>
 8015468:	4801      	ldr	r0, [pc, #4]	; (8015470 <racs_services__srv__Setup_Event__get_type_description+0x18>)
 801546a:	bd08      	pop	{r3, pc}
 801546c:	200117f9 	.word	0x200117f9
 8015470:	08020cc0 	.word	0x08020cc0

08015474 <racs_services__srv__Setup__get_type_description_sources>:
 8015474:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015478:	4b2c      	ldr	r3, [pc, #176]	; (801552c <racs_services__srv__Setup__get_type_description_sources+0xb8>)
 801547a:	f893 9000 	ldrb.w	r9, [r3]
 801547e:	f1b9 0f00 	cmp.w	r9, #0
 8015482:	d002      	beq.n	801548a <racs_services__srv__Setup__get_type_description_sources+0x16>
 8015484:	482a      	ldr	r0, [pc, #168]	; (8015530 <racs_services__srv__Setup__get_type_description_sources+0xbc>)
 8015486:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801548a:	4d2a      	ldr	r5, [pc, #168]	; (8015534 <racs_services__srv__Setup__get_type_description_sources+0xc0>)
 801548c:	4c2a      	ldr	r4, [pc, #168]	; (8015538 <racs_services__srv__Setup__get_type_description_sources+0xc4>)
 801548e:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8015540 <racs_services__srv__Setup__get_type_description_sources+0xcc>
 8015492:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8015544 <racs_services__srv__Setup__get_type_description_sources+0xd0>
 8015496:	4e29      	ldr	r6, [pc, #164]	; (801553c <racs_services__srv__Setup__get_type_description_sources+0xc8>)
 8015498:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801549a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801549c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801549e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80154a0:	682b      	ldr	r3, [r5, #0]
 80154a2:	4625      	mov	r5, r4
 80154a4:	4648      	mov	r0, r9
 80154a6:	f104 0a28 	add.w	sl, r4, #40	; 0x28
 80154aa:	f845 3b04 	str.w	r3, [r5], #4
 80154ae:	f104 074c 	add.w	r7, r4, #76	; 0x4c
 80154b2:	f005 fca1 	bl	801adf8 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 80154b6:	4684      	mov	ip, r0
 80154b8:	f104 0e70 	add.w	lr, r4, #112	; 0x70
 80154bc:	3494      	adds	r4, #148	; 0x94
 80154be:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80154c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80154c4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80154c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80154ca:	f8dc 3000 	ldr.w	r3, [ip]
 80154ce:	602b      	str	r3, [r5, #0]
 80154d0:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 80154d4:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 80154d8:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 80154dc:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 80154e0:	f8db 3000 	ldr.w	r3, [fp]
 80154e4:	f8ca 3000 	str.w	r3, [sl]
 80154e8:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 80154ec:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80154ee:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 80154f2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80154f4:	f8d8 3000 	ldr.w	r3, [r8]
 80154f8:	603b      	str	r3, [r7, #0]
 80154fa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80154fc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015500:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8015502:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015506:	6833      	ldr	r3, [r6, #0]
 8015508:	4648      	mov	r0, r9
 801550a:	f8ce 3000 	str.w	r3, [lr]
 801550e:	f005 fc1f 	bl	801ad50 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 8015512:	2301      	movs	r3, #1
 8015514:	4a05      	ldr	r2, [pc, #20]	; (801552c <racs_services__srv__Setup__get_type_description_sources+0xb8>)
 8015516:	4605      	mov	r5, r0
 8015518:	7013      	strb	r3, [r2, #0]
 801551a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801551c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801551e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015520:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015522:	682b      	ldr	r3, [r5, #0]
 8015524:	4802      	ldr	r0, [pc, #8]	; (8015530 <racs_services__srv__Setup__get_type_description_sources+0xbc>)
 8015526:	6023      	str	r3, [r4, #0]
 8015528:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801552c:	200117f8 	.word	0x200117f8
 8015530:	08020e04 	.word	0x08020e04
 8015534:	08020dbc 	.word	0x08020dbc
 8015538:	200118b4 	.word	0x200118b4
 801553c:	08020d74 	.word	0x08020d74
 8015540:	08020d50 	.word	0x08020d50
 8015544:	08020d98 	.word	0x08020d98

08015548 <racs_services__srv__Setup_Request__get_type_description_sources>:
 8015548:	4b09      	ldr	r3, [pc, #36]	; (8015570 <racs_services__srv__Setup_Request__get_type_description_sources+0x28>)
 801554a:	781a      	ldrb	r2, [r3, #0]
 801554c:	b96a      	cbnz	r2, 801556a <racs_services__srv__Setup_Request__get_type_description_sources+0x22>
 801554e:	2201      	movs	r2, #1
 8015550:	b430      	push	{r4, r5}
 8015552:	4d08      	ldr	r5, [pc, #32]	; (8015574 <racs_services__srv__Setup_Request__get_type_description_sources+0x2c>)
 8015554:	4c08      	ldr	r4, [pc, #32]	; (8015578 <racs_services__srv__Setup_Request__get_type_description_sources+0x30>)
 8015556:	701a      	strb	r2, [r3, #0]
 8015558:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801555a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801555c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801555e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015560:	682b      	ldr	r3, [r5, #0]
 8015562:	4806      	ldr	r0, [pc, #24]	; (801557c <racs_services__srv__Setup_Request__get_type_description_sources+0x34>)
 8015564:	6023      	str	r3, [r4, #0]
 8015566:	bc30      	pop	{r4, r5}
 8015568:	4770      	bx	lr
 801556a:	4804      	ldr	r0, [pc, #16]	; (801557c <racs_services__srv__Setup_Request__get_type_description_sources+0x34>)
 801556c:	4770      	bx	lr
 801556e:	bf00      	nop
 8015570:	200117ff 	.word	0x200117ff
 8015574:	08020d98 	.word	0x08020d98
 8015578:	200119b0 	.word	0x200119b0
 801557c:	08020df8 	.word	0x08020df8

08015580 <racs_services__srv__Setup_Response__get_type_description_sources>:
 8015580:	4b09      	ldr	r3, [pc, #36]	; (80155a8 <racs_services__srv__Setup_Response__get_type_description_sources+0x28>)
 8015582:	781a      	ldrb	r2, [r3, #0]
 8015584:	b96a      	cbnz	r2, 80155a2 <racs_services__srv__Setup_Response__get_type_description_sources+0x22>
 8015586:	2201      	movs	r2, #1
 8015588:	b430      	push	{r4, r5}
 801558a:	4d08      	ldr	r5, [pc, #32]	; (80155ac <racs_services__srv__Setup_Response__get_type_description_sources+0x2c>)
 801558c:	4c08      	ldr	r4, [pc, #32]	; (80155b0 <racs_services__srv__Setup_Response__get_type_description_sources+0x30>)
 801558e:	701a      	strb	r2, [r3, #0]
 8015590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015594:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015596:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015598:	682b      	ldr	r3, [r5, #0]
 801559a:	4806      	ldr	r0, [pc, #24]	; (80155b4 <racs_services__srv__Setup_Response__get_type_description_sources+0x34>)
 801559c:	6023      	str	r3, [r4, #0]
 801559e:	bc30      	pop	{r4, r5}
 80155a0:	4770      	bx	lr
 80155a2:	4804      	ldr	r0, [pc, #16]	; (80155b4 <racs_services__srv__Setup_Response__get_type_description_sources+0x34>)
 80155a4:	4770      	bx	lr
 80155a6:	bf00      	nop
 80155a8:	200117fe 	.word	0x200117fe
 80155ac:	08020d74 	.word	0x08020d74
 80155b0:	2001198c 	.word	0x2001198c
 80155b4:	08020dec 	.word	0x08020dec

080155b8 <racs_services__srv__Setup_Event__get_type_description_sources>:
 80155b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80155bc:	4e27      	ldr	r6, [pc, #156]	; (801565c <racs_services__srv__Setup_Event__get_type_description_sources+0xa4>)
 80155be:	f896 8000 	ldrb.w	r8, [r6]
 80155c2:	f1b8 0f00 	cmp.w	r8, #0
 80155c6:	d002      	beq.n	80155ce <racs_services__srv__Setup_Event__get_type_description_sources+0x16>
 80155c8:	4825      	ldr	r0, [pc, #148]	; (8015660 <racs_services__srv__Setup_Event__get_type_description_sources+0xa8>)
 80155ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155ce:	4d25      	ldr	r5, [pc, #148]	; (8015664 <racs_services__srv__Setup_Event__get_type_description_sources+0xac>)
 80155d0:	4c25      	ldr	r4, [pc, #148]	; (8015668 <racs_services__srv__Setup_Event__get_type_description_sources+0xb0>)
 80155d2:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8015670 <racs_services__srv__Setup_Event__get_type_description_sources+0xb8>
 80155d6:	4f25      	ldr	r7, [pc, #148]	; (801566c <racs_services__srv__Setup_Event__get_type_description_sources+0xb4>)
 80155d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80155da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80155dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80155de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80155e0:	682b      	ldr	r3, [r5, #0]
 80155e2:	4625      	mov	r5, r4
 80155e4:	4640      	mov	r0, r8
 80155e6:	f104 0928 	add.w	r9, r4, #40	; 0x28
 80155ea:	f845 3b04 	str.w	r3, [r5], #4
 80155ee:	f005 fc03 	bl	801adf8 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 80155f2:	4684      	mov	ip, r0
 80155f4:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 80155f8:	3470      	adds	r4, #112	; 0x70
 80155fa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80155fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015600:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015604:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015606:	f8dc 3000 	ldr.w	r3, [ip]
 801560a:	602b      	str	r3, [r5, #0]
 801560c:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 8015610:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8015614:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 8015618:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 801561c:	f8da 3000 	ldr.w	r3, [sl]
 8015620:	f8c9 3000 	str.w	r3, [r9]
 8015624:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8015626:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801562a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801562c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015630:	683b      	ldr	r3, [r7, #0]
 8015632:	4640      	mov	r0, r8
 8015634:	f8ce 3000 	str.w	r3, [lr]
 8015638:	f005 fb8a 	bl	801ad50 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 801563c:	2301      	movs	r3, #1
 801563e:	4684      	mov	ip, r0
 8015640:	7033      	strb	r3, [r6, #0]
 8015642:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015648:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801564c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801564e:	f8dc 3000 	ldr.w	r3, [ip]
 8015652:	4803      	ldr	r0, [pc, #12]	; (8015660 <racs_services__srv__Setup_Event__get_type_description_sources+0xa8>)
 8015654:	6023      	str	r3, [r4, #0]
 8015656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801565a:	bf00      	nop
 801565c:	200117fb 	.word	0x200117fb
 8015660:	08020de0 	.word	0x08020de0
 8015664:	08020d50 	.word	0x08020d50
 8015668:	20011800 	.word	0x20011800
 801566c:	08020d74 	.word	0x08020d74
 8015670:	08020d98 	.word	0x08020d98

08015674 <racs_services__srv__Setup_Event__fini.part.0>:
 8015674:	b510      	push	{r4, lr}
 8015676:	b086      	sub	sp, #24
 8015678:	4604      	mov	r4, r0
 801567a:	f005 fba7 	bl	801adcc <service_msgs__msg__ServiceEventInfo__fini>
 801567e:	a801      	add	r0, sp, #4
 8015680:	f7f9 fb58 	bl	800ed34 <rcutils_get_default_allocator>
 8015684:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8015686:	b130      	cbz	r0, 8015696 <racs_services__srv__Setup_Event__fini.part.0+0x22>
 8015688:	9b02      	ldr	r3, [sp, #8]
 801568a:	9905      	ldr	r1, [sp, #20]
 801568c:	4798      	blx	r3
 801568e:	2300      	movs	r3, #0
 8015690:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8015694:	6323      	str	r3, [r4, #48]	; 0x30
 8015696:	a801      	add	r0, sp, #4
 8015698:	f7f9 fb4c 	bl	800ed34 <rcutils_get_default_allocator>
 801569c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801569e:	b130      	cbz	r0, 80156ae <racs_services__srv__Setup_Event__fini.part.0+0x3a>
 80156a0:	9b02      	ldr	r3, [sp, #8]
 80156a2:	9905      	ldr	r1, [sp, #20]
 80156a4:	4798      	blx	r3
 80156a6:	2300      	movs	r3, #0
 80156a8:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 80156ac:	63e3      	str	r3, [r4, #60]	; 0x3c
 80156ae:	b006      	add	sp, #24
 80156b0:	bd10      	pop	{r4, pc}
 80156b2:	bf00      	nop

080156b4 <racs_services__srv__Setup_Request__init>:
 80156b4:	3800      	subs	r0, #0
 80156b6:	bf18      	it	ne
 80156b8:	2001      	movne	r0, #1
 80156ba:	4770      	bx	lr

080156bc <racs_services__srv__Setup_Request__fini>:
 80156bc:	4770      	bx	lr
 80156be:	bf00      	nop

080156c0 <racs_services__srv__Setup_Request__copy>:
 80156c0:	4603      	mov	r3, r0
 80156c2:	b1a0      	cbz	r0, 80156ee <racs_services__srv__Setup_Request__copy+0x2e>
 80156c4:	b199      	cbz	r1, 80156ee <racs_services__srv__Setup_Request__copy+0x2e>
 80156c6:	7802      	ldrb	r2, [r0, #0]
 80156c8:	2001      	movs	r0, #1
 80156ca:	700a      	strb	r2, [r1, #0]
 80156cc:	689a      	ldr	r2, [r3, #8]
 80156ce:	f8d3 c004 	ldr.w	ip, [r3, #4]
 80156d2:	608a      	str	r2, [r1, #8]
 80156d4:	691a      	ldr	r2, [r3, #16]
 80156d6:	f8c1 c004 	str.w	ip, [r1, #4]
 80156da:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 80156de:	610a      	str	r2, [r1, #16]
 80156e0:	695a      	ldr	r2, [r3, #20]
 80156e2:	699b      	ldr	r3, [r3, #24]
 80156e4:	f8c1 c00c 	str.w	ip, [r1, #12]
 80156e8:	614a      	str	r2, [r1, #20]
 80156ea:	618b      	str	r3, [r1, #24]
 80156ec:	4770      	bx	lr
 80156ee:	2000      	movs	r0, #0
 80156f0:	4770      	bx	lr
 80156f2:	bf00      	nop

080156f4 <racs_services__srv__Setup_Request__Sequence__init>:
 80156f4:	b530      	push	{r4, r5, lr}
 80156f6:	4604      	mov	r4, r0
 80156f8:	b087      	sub	sp, #28
 80156fa:	b148      	cbz	r0, 8015710 <racs_services__srv__Setup_Request__Sequence__init+0x1c>
 80156fc:	460d      	mov	r5, r1
 80156fe:	a801      	add	r0, sp, #4
 8015700:	f7f9 fb18 	bl	800ed34 <rcutils_get_default_allocator>
 8015704:	b935      	cbnz	r5, 8015714 <racs_services__srv__Setup_Request__Sequence__init+0x20>
 8015706:	462b      	mov	r3, r5
 8015708:	2001      	movs	r0, #1
 801570a:	60a5      	str	r5, [r4, #8]
 801570c:	e9c4 3500 	strd	r3, r5, [r4]
 8015710:	b007      	add	sp, #28
 8015712:	bd30      	pop	{r4, r5, pc}
 8015714:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8015718:	211c      	movs	r1, #28
 801571a:	4628      	mov	r0, r5
 801571c:	4798      	blx	r3
 801571e:	4603      	mov	r3, r0
 8015720:	2800      	cmp	r0, #0
 8015722:	d1f1      	bne.n	8015708 <racs_services__srv__Setup_Request__Sequence__init+0x14>
 8015724:	e7f4      	b.n	8015710 <racs_services__srv__Setup_Request__Sequence__init+0x1c>
 8015726:	bf00      	nop

08015728 <racs_services__srv__Setup_Request__Sequence__fini>:
 8015728:	b180      	cbz	r0, 801574c <racs_services__srv__Setup_Request__Sequence__fini+0x24>
 801572a:	b510      	push	{r4, lr}
 801572c:	b086      	sub	sp, #24
 801572e:	4604      	mov	r4, r0
 8015730:	a801      	add	r0, sp, #4
 8015732:	f7f9 faff 	bl	800ed34 <rcutils_get_default_allocator>
 8015736:	6820      	ldr	r0, [r4, #0]
 8015738:	b130      	cbz	r0, 8015748 <racs_services__srv__Setup_Request__Sequence__fini+0x20>
 801573a:	9b02      	ldr	r3, [sp, #8]
 801573c:	9905      	ldr	r1, [sp, #20]
 801573e:	4798      	blx	r3
 8015740:	2300      	movs	r3, #0
 8015742:	e9c4 3300 	strd	r3, r3, [r4]
 8015746:	60a3      	str	r3, [r4, #8]
 8015748:	b006      	add	sp, #24
 801574a:	bd10      	pop	{r4, pc}
 801574c:	4770      	bx	lr
 801574e:	bf00      	nop

08015750 <racs_services__srv__Setup_Response__init>:
 8015750:	3800      	subs	r0, #0
 8015752:	bf18      	it	ne
 8015754:	2001      	movne	r0, #1
 8015756:	4770      	bx	lr

08015758 <racs_services__srv__Setup_Response__fini>:
 8015758:	4770      	bx	lr
 801575a:	bf00      	nop

0801575c <racs_services__srv__Setup_Response__copy>:
 801575c:	b120      	cbz	r0, 8015768 <racs_services__srv__Setup_Response__copy+0xc>
 801575e:	b119      	cbz	r1, 8015768 <racs_services__srv__Setup_Response__copy+0xc>
 8015760:	7803      	ldrb	r3, [r0, #0]
 8015762:	2001      	movs	r0, #1
 8015764:	700b      	strb	r3, [r1, #0]
 8015766:	4770      	bx	lr
 8015768:	2000      	movs	r0, #0
 801576a:	4770      	bx	lr

0801576c <racs_services__srv__Setup_Response__Sequence__init>:
 801576c:	b530      	push	{r4, r5, lr}
 801576e:	4604      	mov	r4, r0
 8015770:	b087      	sub	sp, #28
 8015772:	b148      	cbz	r0, 8015788 <racs_services__srv__Setup_Response__Sequence__init+0x1c>
 8015774:	460d      	mov	r5, r1
 8015776:	a801      	add	r0, sp, #4
 8015778:	f7f9 fadc 	bl	800ed34 <rcutils_get_default_allocator>
 801577c:	b935      	cbnz	r5, 801578c <racs_services__srv__Setup_Response__Sequence__init+0x20>
 801577e:	462b      	mov	r3, r5
 8015780:	2001      	movs	r0, #1
 8015782:	60a5      	str	r5, [r4, #8]
 8015784:	e9c4 3500 	strd	r3, r5, [r4]
 8015788:	b007      	add	sp, #28
 801578a:	bd30      	pop	{r4, r5, pc}
 801578c:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8015790:	2101      	movs	r1, #1
 8015792:	4628      	mov	r0, r5
 8015794:	4798      	blx	r3
 8015796:	4603      	mov	r3, r0
 8015798:	2800      	cmp	r0, #0
 801579a:	d1f1      	bne.n	8015780 <racs_services__srv__Setup_Response__Sequence__init+0x14>
 801579c:	e7f4      	b.n	8015788 <racs_services__srv__Setup_Response__Sequence__init+0x1c>
 801579e:	bf00      	nop

080157a0 <racs_services__srv__Setup_Response__Sequence__fini>:
 80157a0:	b180      	cbz	r0, 80157c4 <racs_services__srv__Setup_Response__Sequence__fini+0x24>
 80157a2:	b510      	push	{r4, lr}
 80157a4:	b086      	sub	sp, #24
 80157a6:	4604      	mov	r4, r0
 80157a8:	a801      	add	r0, sp, #4
 80157aa:	f7f9 fac3 	bl	800ed34 <rcutils_get_default_allocator>
 80157ae:	6820      	ldr	r0, [r4, #0]
 80157b0:	b130      	cbz	r0, 80157c0 <racs_services__srv__Setup_Response__Sequence__fini+0x20>
 80157b2:	9b02      	ldr	r3, [sp, #8]
 80157b4:	9905      	ldr	r1, [sp, #20]
 80157b6:	4798      	blx	r3
 80157b8:	2300      	movs	r3, #0
 80157ba:	e9c4 3300 	strd	r3, r3, [r4]
 80157be:	60a3      	str	r3, [r4, #8]
 80157c0:	b006      	add	sp, #24
 80157c2:	bd10      	pop	{r4, pc}
 80157c4:	4770      	bx	lr
 80157c6:	bf00      	nop

080157c8 <racs_services__srv__Setup_Event__init>:
 80157c8:	b570      	push	{r4, r5, r6, lr}
 80157ca:	4604      	mov	r4, r0
 80157cc:	b086      	sub	sp, #24
 80157ce:	b1c8      	cbz	r0, 8015804 <racs_services__srv__Setup_Event__init+0x3c>
 80157d0:	f005 faea 	bl	801ada8 <service_msgs__msg__ServiceEventInfo__init>
 80157d4:	4605      	mov	r5, r0
 80157d6:	b178      	cbz	r0, 80157f8 <racs_services__srv__Setup_Event__init+0x30>
 80157d8:	2600      	movs	r6, #0
 80157da:	a801      	add	r0, sp, #4
 80157dc:	f7f9 faaa 	bl	800ed34 <rcutils_get_default_allocator>
 80157e0:	a801      	add	r0, sp, #4
 80157e2:	6326      	str	r6, [r4, #48]	; 0x30
 80157e4:	e9c4 660a 	strd	r6, r6, [r4, #40]	; 0x28
 80157e8:	f7f9 faa4 	bl	800ed34 <rcutils_get_default_allocator>
 80157ec:	4628      	mov	r0, r5
 80157ee:	63e6      	str	r6, [r4, #60]	; 0x3c
 80157f0:	e9c4 660d 	strd	r6, r6, [r4, #52]	; 0x34
 80157f4:	b006      	add	sp, #24
 80157f6:	bd70      	pop	{r4, r5, r6, pc}
 80157f8:	4620      	mov	r0, r4
 80157fa:	f7ff ff3b 	bl	8015674 <racs_services__srv__Setup_Event__fini.part.0>
 80157fe:	4628      	mov	r0, r5
 8015800:	b006      	add	sp, #24
 8015802:	bd70      	pop	{r4, r5, r6, pc}
 8015804:	4605      	mov	r5, r0
 8015806:	4628      	mov	r0, r5
 8015808:	b006      	add	sp, #24
 801580a:	bd70      	pop	{r4, r5, r6, pc}

0801580c <racs_services__srv__Setup_Event__fini>:
 801580c:	b1f0      	cbz	r0, 801584c <racs_services__srv__Setup_Event__fini+0x40>
 801580e:	b510      	push	{r4, lr}
 8015810:	b086      	sub	sp, #24
 8015812:	4604      	mov	r4, r0
 8015814:	f005 fada 	bl	801adcc <service_msgs__msg__ServiceEventInfo__fini>
 8015818:	a801      	add	r0, sp, #4
 801581a:	f7f9 fa8b 	bl	800ed34 <rcutils_get_default_allocator>
 801581e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8015820:	b130      	cbz	r0, 8015830 <racs_services__srv__Setup_Event__fini+0x24>
 8015822:	9b02      	ldr	r3, [sp, #8]
 8015824:	9905      	ldr	r1, [sp, #20]
 8015826:	4798      	blx	r3
 8015828:	2300      	movs	r3, #0
 801582a:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 801582e:	6323      	str	r3, [r4, #48]	; 0x30
 8015830:	a801      	add	r0, sp, #4
 8015832:	f7f9 fa7f 	bl	800ed34 <rcutils_get_default_allocator>
 8015836:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8015838:	b130      	cbz	r0, 8015848 <racs_services__srv__Setup_Event__fini+0x3c>
 801583a:	9b02      	ldr	r3, [sp, #8]
 801583c:	9905      	ldr	r1, [sp, #20]
 801583e:	4798      	blx	r3
 8015840:	2300      	movs	r3, #0
 8015842:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8015846:	63e3      	str	r3, [r4, #60]	; 0x3c
 8015848:	b006      	add	sp, #24
 801584a:	bd10      	pop	{r4, pc}
 801584c:	4770      	bx	lr
 801584e:	bf00      	nop

08015850 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup>:
 8015850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015854:	2900      	cmp	r1, #0
 8015856:	d04d      	beq.n	80158f4 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0xa4>
 8015858:	4605      	mov	r5, r0
 801585a:	2800      	cmp	r0, #0
 801585c:	d04a      	beq.n	80158f4 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0xa4>
 801585e:	460e      	mov	r6, r1
 8015860:	4698      	mov	r8, r3
 8015862:	2040      	movs	r0, #64	; 0x40
 8015864:	680b      	ldr	r3, [r1, #0]
 8015866:	6909      	ldr	r1, [r1, #16]
 8015868:	4617      	mov	r7, r2
 801586a:	4798      	blx	r3
 801586c:	4604      	mov	r4, r0
 801586e:	f7ff ffab 	bl	80157c8 <racs_services__srv__Setup_Event__init>
 8015872:	4684      	mov	ip, r0
 8015874:	b370      	cbz	r0, 80158d4 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x84>
 8015876:	782b      	ldrb	r3, [r5, #0]
 8015878:	7023      	strb	r3, [r4, #0]
 801587a:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 801587e:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8015882:	e9c4 2301 	strd	r2, r3, [r4, #4]
 8015886:	e9c4 0108 	strd	r0, r1, [r4, #32]
 801588a:	68e8      	ldr	r0, [r5, #12]
 801588c:	6929      	ldr	r1, [r5, #16]
 801588e:	696a      	ldr	r2, [r5, #20]
 8015890:	69ab      	ldr	r3, [r5, #24]
 8015892:	60e0      	str	r0, [r4, #12]
 8015894:	6121      	str	r1, [r4, #16]
 8015896:	6162      	str	r2, [r4, #20]
 8015898:	61a3      	str	r3, [r4, #24]
 801589a:	b157      	cbz	r7, 80158b2 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x62>
 801589c:	2101      	movs	r1, #1
 801589e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80158a2:	f7ff ff27 	bl	80156f4 <racs_services__srv__Setup_Request__Sequence__init>
 80158a6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80158a8:	4638      	mov	r0, r7
 80158aa:	f7ff ff09 	bl	80156c0 <racs_services__srv__Setup_Request__copy>
 80158ae:	4603      	mov	r3, r0
 80158b0:	b1c0      	cbz	r0, 80158e4 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x94>
 80158b2:	f1b8 0f00 	cmp.w	r8, #0
 80158b6:	d00a      	beq.n	80158ce <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x7e>
 80158b8:	2101      	movs	r1, #1
 80158ba:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80158be:	f7ff ff55 	bl	801576c <racs_services__srv__Setup_Response__Sequence__init>
 80158c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80158c4:	4640      	mov	r0, r8
 80158c6:	f7ff ff49 	bl	801575c <racs_services__srv__Setup_Response__copy>
 80158ca:	4603      	mov	r3, r0
 80158cc:	b150      	cbz	r0, 80158e4 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x94>
 80158ce:	4620      	mov	r0, r4
 80158d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158d4:	4620      	mov	r0, r4
 80158d6:	4664      	mov	r4, ip
 80158d8:	6873      	ldr	r3, [r6, #4]
 80158da:	6931      	ldr	r1, [r6, #16]
 80158dc:	4798      	blx	r3
 80158de:	4620      	mov	r0, r4
 80158e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158e4:	4620      	mov	r0, r4
 80158e6:	461c      	mov	r4, r3
 80158e8:	6872      	ldr	r2, [r6, #4]
 80158ea:	6931      	ldr	r1, [r6, #16]
 80158ec:	4790      	blx	r2
 80158ee:	4620      	mov	r0, r4
 80158f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158f4:	2400      	movs	r4, #0
 80158f6:	4620      	mov	r0, r4
 80158f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080158fc <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup>:
 80158fc:	b1b9      	cbz	r1, 801592e <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x32>
 80158fe:	b538      	push	{r3, r4, r5, lr}
 8015900:	4605      	mov	r5, r0
 8015902:	b190      	cbz	r0, 801592a <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x2e>
 8015904:	460c      	mov	r4, r1
 8015906:	f7ff ff81 	bl	801580c <racs_services__srv__Setup_Event__fini>
 801590a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801590c:	b110      	cbz	r0, 8015914 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x18>
 801590e:	6863      	ldr	r3, [r4, #4]
 8015910:	6921      	ldr	r1, [r4, #16]
 8015912:	4798      	blx	r3
 8015914:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8015916:	b110      	cbz	r0, 801591e <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x22>
 8015918:	6863      	ldr	r3, [r4, #4]
 801591a:	6921      	ldr	r1, [r4, #16]
 801591c:	4798      	blx	r3
 801591e:	4628      	mov	r0, r5
 8015920:	6863      	ldr	r3, [r4, #4]
 8015922:	6921      	ldr	r1, [r4, #16]
 8015924:	4798      	blx	r3
 8015926:	2001      	movs	r0, #1
 8015928:	bd38      	pop	{r3, r4, r5, pc}
 801592a:	2000      	movs	r0, #0
 801592c:	bd38      	pop	{r3, r4, r5, pc}
 801592e:	2000      	movs	r0, #0
 8015930:	4770      	bx	lr
 8015932:	bf00      	nop

08015934 <rcl_client_get_rmw_handle>:
 8015934:	b118      	cbz	r0, 801593e <rcl_client_get_rmw_handle+0xa>
 8015936:	6800      	ldr	r0, [r0, #0]
 8015938:	b108      	cbz	r0, 801593e <rcl_client_get_rmw_handle+0xa>
 801593a:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801593e:	4770      	bx	lr

08015940 <rcl_send_request>:
 8015940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015942:	b08b      	sub	sp, #44	; 0x2c
 8015944:	b1e8      	cbz	r0, 8015982 <rcl_send_request+0x42>
 8015946:	4604      	mov	r4, r0
 8015948:	6800      	ldr	r0, [r0, #0]
 801594a:	b1d0      	cbz	r0, 8015982 <rcl_send_request+0x42>
 801594c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8015950:	b1bb      	cbz	r3, 8015982 <rcl_send_request+0x42>
 8015952:	460f      	mov	r7, r1
 8015954:	b1d1      	cbz	r1, 801598c <rcl_send_request+0x4c>
 8015956:	4615      	mov	r5, r2
 8015958:	b1c2      	cbz	r2, 801598c <rcl_send_request+0x4c>
 801595a:	2105      	movs	r1, #5
 801595c:	f500 7088 	add.w	r0, r0, #272	; 0x110
 8015960:	f003 fa12 	bl	8018d88 <__atomic_load_8>
 8015964:	6823      	ldr	r3, [r4, #0]
 8015966:	462a      	mov	r2, r5
 8015968:	e9c5 0100 	strd	r0, r1, [r5]
 801596c:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8015970:	4639      	mov	r1, r7
 8015972:	f004 fbd3 	bl	801a11c <rmw_send_request>
 8015976:	4606      	mov	r6, r0
 8015978:	b160      	cbz	r0, 8015994 <rcl_send_request+0x54>
 801597a:	2601      	movs	r6, #1
 801597c:	4630      	mov	r0, r6
 801597e:	b00b      	add	sp, #44	; 0x2c
 8015980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015982:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 8015986:	4630      	mov	r0, r6
 8015988:	b00b      	add	sp, #44	; 0x2c
 801598a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801598c:	260b      	movs	r6, #11
 801598e:	4630      	mov	r0, r6
 8015990:	b00b      	add	sp, #44	; 0x2c
 8015992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015994:	6820      	ldr	r0, [r4, #0]
 8015996:	2305      	movs	r3, #5
 8015998:	f500 7088 	add.w	r0, r0, #272	; 0x110
 801599c:	9300      	str	r3, [sp, #0]
 801599e:	e9d5 2300 	ldrd	r2, r3, [r5]
 80159a2:	f003 fa5d 	bl	8018e60 <__atomic_exchange_8>
 80159a6:	6823      	ldr	r3, [r4, #0]
 80159a8:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 80159ac:	2a00      	cmp	r2, #0
 80159ae:	d0e5      	beq.n	801597c <rcl_send_request+0x3c>
 80159b0:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 80159b4:	a905      	add	r1, sp, #20
 80159b6:	f003 ffcd 	bl	8019954 <rmw_get_gid_for_client>
 80159ba:	b970      	cbnz	r0, 80159da <rcl_send_request+0x9a>
 80159bc:	6820      	ldr	r0, [r4, #0]
 80159be:	ab06      	add	r3, sp, #24
 80159c0:	4631      	mov	r1, r6
 80159c2:	463a      	mov	r2, r7
 80159c4:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
 80159c8:	9302      	str	r3, [sp, #8]
 80159ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 80159ce:	e9cd 4500 	strd	r4, r5, [sp]
 80159d2:	f001 f845 	bl	8016a60 <rcl_send_service_event_message>
 80159d6:	4606      	mov	r6, r0
 80159d8:	e7d0      	b.n	801597c <rcl_send_request+0x3c>
 80159da:	f000 f877 	bl	8015acc <rcl_convert_rmw_ret_to_rcl_ret>
 80159de:	4606      	mov	r6, r0
 80159e0:	e7cc      	b.n	801597c <rcl_send_request+0x3c>
 80159e2:	bf00      	nop
 80159e4:	0000      	movs	r0, r0
	...

080159e8 <rcl_take_response>:
 80159e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80159ea:	468e      	mov	lr, r1
 80159ec:	b095      	sub	sp, #84	; 0x54
 80159ee:	460c      	mov	r4, r1
 80159f0:	4616      	mov	r6, r2
 80159f2:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 80159f6:	4605      	mov	r5, r0
 80159f8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80159fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015a00:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015a04:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015a08:	2d00      	cmp	r5, #0
 8015a0a:	d042      	beq.n	8015a92 <rcl_take_response+0xaa>
 8015a0c:	682b      	ldr	r3, [r5, #0]
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d03f      	beq.n	8015a92 <rcl_take_response+0xaa>
 8015a12:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8015a16:	2800      	cmp	r0, #0
 8015a18:	d03b      	beq.n	8015a92 <rcl_take_response+0xaa>
 8015a1a:	2e00      	cmp	r6, #0
 8015a1c:	d03c      	beq.n	8015a98 <rcl_take_response+0xb0>
 8015a1e:	2300      	movs	r3, #0
 8015a20:	4632      	mov	r2, r6
 8015a22:	a90a      	add	r1, sp, #40	; 0x28
 8015a24:	f88d 3013 	strb.w	r3, [sp, #19]
 8015a28:	f10d 0313 	add.w	r3, sp, #19
 8015a2c:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8015ab0 <rcl_take_response+0xc8>
 8015a30:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8015a34:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8015a38:	f004 fc78 	bl	801a32c <rmw_take_response>
 8015a3c:	4607      	mov	r7, r0
 8015a3e:	bb68      	cbnz	r0, 8015a9c <rcl_take_response+0xb4>
 8015a40:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8015a44:	b363      	cbz	r3, 8015aa0 <rcl_take_response+0xb8>
 8015a46:	682b      	ldr	r3, [r5, #0]
 8015a48:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8015a4c:	b19a      	cbz	r2, 8015a76 <rcl_take_response+0x8e>
 8015a4e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8015a52:	a905      	add	r1, sp, #20
 8015a54:	f003 ff7e 	bl	8019954 <rmw_get_gid_for_client>
 8015a58:	bb28      	cbnz	r0, 8015aa6 <rcl_take_response+0xbe>
 8015a5a:	6829      	ldr	r1, [r5, #0]
 8015a5c:	ab06      	add	r3, sp, #24
 8015a5e:	4632      	mov	r2, r6
 8015a60:	f8d1 0118 	ldr.w	r0, [r1, #280]	; 0x118
 8015a64:	2103      	movs	r1, #3
 8015a66:	9302      	str	r3, [sp, #8]
 8015a68:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8015a6c:	e9cd 6700 	strd	r6, r7, [sp]
 8015a70:	f000 fff6 	bl	8016a60 <rcl_send_service_event_message>
 8015a74:	4607      	mov	r7, r0
 8015a76:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
 8015a7a:	46a4      	mov	ip, r4
 8015a7c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015a80:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015a84:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015a88:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015a8c:	4638      	mov	r0, r7
 8015a8e:	b015      	add	sp, #84	; 0x54
 8015a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a92:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
 8015a96:	e7ee      	b.n	8015a76 <rcl_take_response+0x8e>
 8015a98:	270b      	movs	r7, #11
 8015a9a:	e7ec      	b.n	8015a76 <rcl_take_response+0x8e>
 8015a9c:	2701      	movs	r7, #1
 8015a9e:	e7ea      	b.n	8015a76 <rcl_take_response+0x8e>
 8015aa0:	f240 17f5 	movw	r7, #501	; 0x1f5
 8015aa4:	e7e7      	b.n	8015a76 <rcl_take_response+0x8e>
 8015aa6:	f000 f811 	bl	8015acc <rcl_convert_rmw_ret_to_rcl_ret>
 8015aaa:	4607      	mov	r7, r0
 8015aac:	e7e3      	b.n	8015a76 <rcl_take_response+0x8e>
 8015aae:	bf00      	nop
	...

08015ab8 <rcl_client_is_valid>:
 8015ab8:	b130      	cbz	r0, 8015ac8 <rcl_client_is_valid+0x10>
 8015aba:	6800      	ldr	r0, [r0, #0]
 8015abc:	b120      	cbz	r0, 8015ac8 <rcl_client_is_valid+0x10>
 8015abe:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8015ac2:	3800      	subs	r0, #0
 8015ac4:	bf18      	it	ne
 8015ac6:	2001      	movne	r0, #1
 8015ac8:	4770      	bx	lr
 8015aca:	bf00      	nop

08015acc <rcl_convert_rmw_ret_to_rcl_ret>:
 8015acc:	280b      	cmp	r0, #11
 8015ace:	dc0d      	bgt.n	8015aec <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8015ad0:	2800      	cmp	r0, #0
 8015ad2:	db09      	blt.n	8015ae8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8015ad4:	280b      	cmp	r0, #11
 8015ad6:	d807      	bhi.n	8015ae8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8015ad8:	e8df f000 	tbb	[pc, r0]
 8015adc:	07060607 	.word	0x07060607
 8015ae0:	06060606 	.word	0x06060606
 8015ae4:	07070606 	.word	0x07070606
 8015ae8:	2001      	movs	r0, #1
 8015aea:	4770      	bx	lr
 8015aec:	28cb      	cmp	r0, #203	; 0xcb
 8015aee:	bf18      	it	ne
 8015af0:	2001      	movne	r0, #1
 8015af2:	4770      	bx	lr

08015af4 <rcl_get_zero_initialized_context>:
 8015af4:	4a03      	ldr	r2, [pc, #12]	; (8015b04 <rcl_get_zero_initialized_context+0x10>)
 8015af6:	4603      	mov	r3, r0
 8015af8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015afc:	e883 0003 	stmia.w	r3, {r0, r1}
 8015b00:	4618      	mov	r0, r3
 8015b02:	4770      	bx	lr
 8015b04:	08020e10 	.word	0x08020e10

08015b08 <rcl_context_is_valid>:
 8015b08:	b118      	cbz	r0, 8015b12 <rcl_context_is_valid+0xa>
 8015b0a:	6840      	ldr	r0, [r0, #4]
 8015b0c:	3800      	subs	r0, #0
 8015b0e:	bf18      	it	ne
 8015b10:	2001      	movne	r0, #1
 8015b12:	4770      	bx	lr

08015b14 <__cleanup_context>:
 8015b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b18:	4606      	mov	r6, r0
 8015b1a:	2300      	movs	r3, #0
 8015b1c:	6800      	ldr	r0, [r0, #0]
 8015b1e:	6073      	str	r3, [r6, #4]
 8015b20:	2800      	cmp	r0, #0
 8015b22:	d049      	beq.n	8015bb8 <__cleanup_context+0xa4>
 8015b24:	6947      	ldr	r7, [r0, #20]
 8015b26:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8015b2a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8015b2e:	b137      	cbz	r7, 8015b3e <__cleanup_context+0x2a>
 8015b30:	3014      	adds	r0, #20
 8015b32:	f000 f9e7 	bl	8015f04 <rcl_init_options_fini>
 8015b36:	4607      	mov	r7, r0
 8015b38:	2800      	cmp	r0, #0
 8015b3a:	d144      	bne.n	8015bc6 <__cleanup_context+0xb2>
 8015b3c:	6830      	ldr	r0, [r6, #0]
 8015b3e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8015b40:	b143      	cbz	r3, 8015b54 <__cleanup_context+0x40>
 8015b42:	3028      	adds	r0, #40	; 0x28
 8015b44:	f004 f930 	bl	8019da8 <rmw_context_fini>
 8015b48:	b118      	cbz	r0, 8015b52 <__cleanup_context+0x3e>
 8015b4a:	2f00      	cmp	r7, #0
 8015b4c:	d03e      	beq.n	8015bcc <__cleanup_context+0xb8>
 8015b4e:	f7f9 f923 	bl	800ed98 <rcutils_reset_error>
 8015b52:	6830      	ldr	r0, [r6, #0]
 8015b54:	6a03      	ldr	r3, [r0, #32]
 8015b56:	b1db      	cbz	r3, 8015b90 <__cleanup_context+0x7c>
 8015b58:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8015b5c:	2a01      	cmp	r2, #1
 8015b5e:	f17c 0100 	sbcs.w	r1, ip, #0
 8015b62:	db11      	blt.n	8015b88 <__cleanup_context+0x74>
 8015b64:	2400      	movs	r4, #0
 8015b66:	4625      	mov	r5, r4
 8015b68:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015b6c:	4649      	mov	r1, r9
 8015b6e:	b1b8      	cbz	r0, 8015ba0 <__cleanup_context+0x8c>
 8015b70:	47c0      	blx	r8
 8015b72:	6833      	ldr	r3, [r6, #0]
 8015b74:	3401      	adds	r4, #1
 8015b76:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8015b7a:	f145 0500 	adc.w	r5, r5, #0
 8015b7e:	6a1b      	ldr	r3, [r3, #32]
 8015b80:	4294      	cmp	r4, r2
 8015b82:	eb75 010c 	sbcs.w	r1, r5, ip
 8015b86:	dbef      	blt.n	8015b68 <__cleanup_context+0x54>
 8015b88:	4618      	mov	r0, r3
 8015b8a:	4649      	mov	r1, r9
 8015b8c:	47c0      	blx	r8
 8015b8e:	6830      	ldr	r0, [r6, #0]
 8015b90:	4649      	mov	r1, r9
 8015b92:	47c0      	blx	r8
 8015b94:	2300      	movs	r3, #0
 8015b96:	4638      	mov	r0, r7
 8015b98:	e9c6 3300 	strd	r3, r3, [r6]
 8015b9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015ba0:	3401      	adds	r4, #1
 8015ba2:	f145 0500 	adc.w	r5, r5, #0
 8015ba6:	4294      	cmp	r4, r2
 8015ba8:	eb75 010c 	sbcs.w	r1, r5, ip
 8015bac:	dbdc      	blt.n	8015b68 <__cleanup_context+0x54>
 8015bae:	4618      	mov	r0, r3
 8015bb0:	4649      	mov	r1, r9
 8015bb2:	47c0      	blx	r8
 8015bb4:	6830      	ldr	r0, [r6, #0]
 8015bb6:	e7eb      	b.n	8015b90 <__cleanup_context+0x7c>
 8015bb8:	4607      	mov	r7, r0
 8015bba:	2300      	movs	r3, #0
 8015bbc:	4638      	mov	r0, r7
 8015bbe:	e9c6 3300 	strd	r3, r3, [r6]
 8015bc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015bc6:	f7f9 f8e7 	bl	800ed98 <rcutils_reset_error>
 8015bca:	e7b7      	b.n	8015b3c <__cleanup_context+0x28>
 8015bcc:	f7ff ff7e 	bl	8015acc <rcl_convert_rmw_ret_to_rcl_ret>
 8015bd0:	4607      	mov	r7, r0
 8015bd2:	e7bc      	b.n	8015b4e <__cleanup_context+0x3a>

08015bd4 <rcl_init>:
 8015bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bd8:	1e05      	subs	r5, r0, #0
 8015bda:	b0a7      	sub	sp, #156	; 0x9c
 8015bdc:	460e      	mov	r6, r1
 8015bde:	4690      	mov	r8, r2
 8015be0:	461f      	mov	r7, r3
 8015be2:	f340 80a0 	ble.w	8015d26 <rcl_init+0x152>
 8015be6:	2900      	cmp	r1, #0
 8015be8:	f000 80a0 	beq.w	8015d2c <rcl_init+0x158>
 8015bec:	f1a1 0e04 	sub.w	lr, r1, #4
 8015bf0:	f04f 0c00 	mov.w	ip, #0
 8015bf4:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8015bf8:	f10c 0c01 	add.w	ip, ip, #1
 8015bfc:	2c00      	cmp	r4, #0
 8015bfe:	f000 8095 	beq.w	8015d2c <rcl_init+0x158>
 8015c02:	4565      	cmp	r5, ip
 8015c04:	d1f6      	bne.n	8015bf4 <rcl_init+0x20>
 8015c06:	f1b8 0f00 	cmp.w	r8, #0
 8015c0a:	f000 808f 	beq.w	8015d2c <rcl_init+0x158>
 8015c0e:	f8d8 4000 	ldr.w	r4, [r8]
 8015c12:	2c00      	cmp	r4, #0
 8015c14:	f000 808a 	beq.w	8015d2c <rcl_init+0x158>
 8015c18:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
 8015c1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015c1e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015c22:	6823      	ldr	r3, [r4, #0]
 8015c24:	a821      	add	r0, sp, #132	; 0x84
 8015c26:	f8cc 3000 	str.w	r3, [ip]
 8015c2a:	f7f9 f891 	bl	800ed50 <rcutils_allocator_is_valid>
 8015c2e:	f080 0001 	eor.w	r0, r0, #1
 8015c32:	b2c0      	uxtb	r0, r0
 8015c34:	2800      	cmp	r0, #0
 8015c36:	d179      	bne.n	8015d2c <rcl_init+0x158>
 8015c38:	2f00      	cmp	r7, #0
 8015c3a:	d077      	beq.n	8015d2c <rcl_init+0x158>
 8015c3c:	683b      	ldr	r3, [r7, #0]
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d179      	bne.n	8015d36 <rcl_init+0x162>
 8015c42:	2198      	movs	r1, #152	; 0x98
 8015c44:	2001      	movs	r0, #1
 8015c46:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	; 0x90
 8015c4a:	4798      	blx	r3
 8015c4c:	4604      	mov	r4, r0
 8015c4e:	6038      	str	r0, [r7, #0]
 8015c50:	2800      	cmp	r0, #0
 8015c52:	f000 80cd 	beq.w	8015df0 <rcl_init+0x21c>
 8015c56:	a802      	add	r0, sp, #8
 8015c58:	f003 fbea 	bl	8019430 <rmw_get_zero_initialized_context>
 8015c5c:	a902      	add	r1, sp, #8
 8015c5e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015c62:	2270      	movs	r2, #112	; 0x70
 8015c64:	f008 ff43 	bl	801eaee <memcpy>
 8015c68:	f8d7 e000 	ldr.w	lr, [r7]
 8015c6c:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
 8015c70:	4674      	mov	r4, lr
 8015c72:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015c76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015c78:	f8dc 3000 	ldr.w	r3, [ip]
 8015c7c:	f10e 0114 	add.w	r1, lr, #20
 8015c80:	4640      	mov	r0, r8
 8015c82:	6023      	str	r3, [r4, #0]
 8015c84:	f000 f968 	bl	8015f58 <rcl_init_options_copy>
 8015c88:	4604      	mov	r4, r0
 8015c8a:	2800      	cmp	r0, #0
 8015c8c:	d144      	bne.n	8015d18 <rcl_init+0x144>
 8015c8e:	f8d7 9000 	ldr.w	r9, [r7]
 8015c92:	ea4f 7ae5 	mov.w	sl, r5, asr #31
 8015c96:	f8c9 0020 	str.w	r0, [r9, #32]
 8015c9a:	f8c9 5018 	str.w	r5, [r9, #24]
 8015c9e:	f8c9 a01c 	str.w	sl, [r9, #28]
 8015ca2:	2d00      	cmp	r5, #0
 8015ca4:	d04e      	beq.n	8015d44 <rcl_init+0x170>
 8015ca6:	2e00      	cmp	r6, #0
 8015ca8:	d04c      	beq.n	8015d44 <rcl_init+0x170>
 8015caa:	2104      	movs	r1, #4
 8015cac:	4628      	mov	r0, r5
 8015cae:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	; 0x90
 8015cb2:	4798      	blx	r3
 8015cb4:	f8c9 0020 	str.w	r0, [r9, #32]
 8015cb8:	f8d7 9000 	ldr.w	r9, [r7]
 8015cbc:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8015cc0:	46cb      	mov	fp, r9
 8015cc2:	b343      	cbz	r3, 8015d16 <rcl_init+0x142>
 8015cc4:	2d01      	cmp	r5, #1
 8015cc6:	f17a 0300 	sbcs.w	r3, sl, #0
 8015cca:	db3b      	blt.n	8015d44 <rcl_init+0x170>
 8015ccc:	2400      	movs	r4, #0
 8015cce:	3e04      	subs	r6, #4
 8015cd0:	46a1      	mov	r9, r4
 8015cd2:	e00b      	b.n	8015cec <rcl_init+0x118>
 8015cd4:	6831      	ldr	r1, [r6, #0]
 8015cd6:	f008 ff0a 	bl	801eaee <memcpy>
 8015cda:	3401      	adds	r4, #1
 8015cdc:	f149 0900 	adc.w	r9, r9, #0
 8015ce0:	45ca      	cmp	sl, r9
 8015ce2:	bf08      	it	eq
 8015ce4:	42a5      	cmpeq	r5, r4
 8015ce6:	d02b      	beq.n	8015d40 <rcl_init+0x16c>
 8015ce8:	f8d7 b000 	ldr.w	fp, [r7]
 8015cec:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8015cf0:	f7ea fb06 	bl	8000300 <strlen>
 8015cf4:	1c42      	adds	r2, r0, #1
 8015cf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015cf8:	4610      	mov	r0, r2
 8015cfa:	9925      	ldr	r1, [sp, #148]	; 0x94
 8015cfc:	f8db b020 	ldr.w	fp, [fp, #32]
 8015d00:	9201      	str	r2, [sp, #4]
 8015d02:	4798      	blx	r3
 8015d04:	683b      	ldr	r3, [r7, #0]
 8015d06:	f84b 0024 	str.w	r0, [fp, r4, lsl #2]
 8015d0a:	6a1b      	ldr	r3, [r3, #32]
 8015d0c:	9a01      	ldr	r2, [sp, #4]
 8015d0e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015d12:	2800      	cmp	r0, #0
 8015d14:	d1de      	bne.n	8015cd4 <rcl_init+0x100>
 8015d16:	240a      	movs	r4, #10
 8015d18:	4638      	mov	r0, r7
 8015d1a:	f7ff fefb 	bl	8015b14 <__cleanup_context>
 8015d1e:	4620      	mov	r0, r4
 8015d20:	b027      	add	sp, #156	; 0x9c
 8015d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d26:	2900      	cmp	r1, #0
 8015d28:	f43f af6d 	beq.w	8015c06 <rcl_init+0x32>
 8015d2c:	240b      	movs	r4, #11
 8015d2e:	4620      	mov	r0, r4
 8015d30:	b027      	add	sp, #156	; 0x9c
 8015d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d36:	2464      	movs	r4, #100	; 0x64
 8015d38:	4620      	mov	r0, r4
 8015d3a:	b027      	add	sp, #156	; 0x9c
 8015d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d40:	f8d7 9000 	ldr.w	r9, [r7]
 8015d44:	493f      	ldr	r1, [pc, #252]	; (8015e44 <rcl_init+0x270>)
 8015d46:	680b      	ldr	r3, [r1, #0]
 8015d48:	3301      	adds	r3, #1
 8015d4a:	d04c      	beq.n	8015de6 <rcl_init+0x212>
 8015d4c:	461a      	mov	r2, r3
 8015d4e:	2000      	movs	r0, #0
 8015d50:	600b      	str	r3, [r1, #0]
 8015d52:	f8d9 5014 	ldr.w	r5, [r9, #20]
 8015d56:	607b      	str	r3, [r7, #4]
 8015d58:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015d5a:	3301      	adds	r3, #1
 8015d5c:	e9c5 2006 	strd	r2, r0, [r5, #24]
 8015d60:	d05d      	beq.n	8015e1e <rcl_init+0x24a>
 8015d62:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d044      	beq.n	8015df4 <rcl_init+0x220>
 8015d6a:	2b01      	cmp	r3, #1
 8015d6c:	d04e      	beq.n	8015e0c <rcl_init+0x238>
 8015d6e:	f8d8 3000 	ldr.w	r3, [r8]
 8015d72:	f105 0634 	add.w	r6, r5, #52	; 0x34
 8015d76:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d05a      	beq.n	8015e34 <rcl_init+0x260>
 8015d7e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8015d80:	b953      	cbnz	r3, 8015d98 <rcl_init+0x1c4>
 8015d82:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 8015d86:	2801      	cmp	r0, #1
 8015d88:	d008      	beq.n	8015d9c <rcl_init+0x1c8>
 8015d8a:	a921      	add	r1, sp, #132	; 0x84
 8015d8c:	4630      	mov	r0, r6
 8015d8e:	f006 fceb 	bl	801c768 <rcl_get_discovery_static_peers>
 8015d92:	4604      	mov	r4, r0
 8015d94:	2800      	cmp	r0, #0
 8015d96:	d1bf      	bne.n	8015d18 <rcl_init+0x144>
 8015d98:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 8015d9c:	f006 fcda 	bl	801c754 <rcl_automatic_discovery_range_to_string>
 8015da0:	683b      	ldr	r3, [r7, #0]
 8015da2:	aa20      	add	r2, sp, #128	; 0x80
 8015da4:	a91f      	add	r1, sp, #124	; 0x7c
 8015da6:	695b      	ldr	r3, [r3, #20]
 8015da8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8015daa:	f001 fc79 	bl	80176a0 <rcl_validate_enclave_name>
 8015dae:	4604      	mov	r4, r0
 8015db0:	2800      	cmp	r0, #0
 8015db2:	d1b1      	bne.n	8015d18 <rcl_init+0x144>
 8015db4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015db6:	bb83      	cbnz	r3, 8015e1a <rcl_init+0x246>
 8015db8:	6839      	ldr	r1, [r7, #0]
 8015dba:	694b      	ldr	r3, [r1, #20]
 8015dbc:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8015dc0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8015dc2:	f000 fc97 	bl	80166f4 <rcl_get_security_options_from_environment>
 8015dc6:	4604      	mov	r4, r0
 8015dc8:	2800      	cmp	r0, #0
 8015dca:	d1a5      	bne.n	8015d18 <rcl_init+0x144>
 8015dcc:	6839      	ldr	r1, [r7, #0]
 8015dce:	6948      	ldr	r0, [r1, #20]
 8015dd0:	3128      	adds	r1, #40	; 0x28
 8015dd2:	3018      	adds	r0, #24
 8015dd4:	f003 feb2 	bl	8019b3c <rmw_init>
 8015dd8:	4604      	mov	r4, r0
 8015dda:	2800      	cmp	r0, #0
 8015ddc:	d0a7      	beq.n	8015d2e <rcl_init+0x15a>
 8015dde:	f7ff fe75 	bl	8015acc <rcl_convert_rmw_ret_to_rcl_ret>
 8015de2:	4604      	mov	r4, r0
 8015de4:	e798      	b.n	8015d18 <rcl_init+0x144>
 8015de6:	2201      	movs	r2, #1
 8015de8:	4618      	mov	r0, r3
 8015dea:	600a      	str	r2, [r1, #0]
 8015dec:	4613      	mov	r3, r2
 8015dee:	e7b0      	b.n	8015d52 <rcl_init+0x17e>
 8015df0:	240a      	movs	r4, #10
 8015df2:	e79c      	b.n	8015d2e <rcl_init+0x15a>
 8015df4:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8015df8:	f000 f90c 	bl	8016014 <rcl_get_localhost_only>
 8015dfc:	4604      	mov	r4, r0
 8015dfe:	2800      	cmp	r0, #0
 8015e00:	d18a      	bne.n	8015d18 <rcl_init+0x144>
 8015e02:	683a      	ldr	r2, [r7, #0]
 8015e04:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8015e08:	6955      	ldr	r5, [r2, #20]
 8015e0a:	e7ae      	b.n	8015d6a <rcl_init+0x196>
 8015e0c:	2302      	movs	r3, #2
 8015e0e:	2200      	movs	r2, #0
 8015e10:	4618      	mov	r0, r3
 8015e12:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
 8015e16:	63ea      	str	r2, [r5, #60]	; 0x3c
 8015e18:	e7c0      	b.n	8015d9c <rcl_init+0x1c8>
 8015e1a:	2401      	movs	r4, #1
 8015e1c:	e77c      	b.n	8015d18 <rcl_init+0x144>
 8015e1e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8015e22:	f006 fd07 	bl	801c834 <rcl_get_default_domain_id>
 8015e26:	4604      	mov	r4, r0
 8015e28:	2800      	cmp	r0, #0
 8015e2a:	f47f af75 	bne.w	8015d18 <rcl_init+0x144>
 8015e2e:	683b      	ldr	r3, [r7, #0]
 8015e30:	695d      	ldr	r5, [r3, #20]
 8015e32:	e796      	b.n	8015d62 <rcl_init+0x18e>
 8015e34:	4630      	mov	r0, r6
 8015e36:	f006 fc4b 	bl	801c6d0 <rcl_get_automatic_discovery_range>
 8015e3a:	4604      	mov	r4, r0
 8015e3c:	2800      	cmp	r0, #0
 8015e3e:	d09e      	beq.n	8015d7e <rcl_init+0x1aa>
 8015e40:	e76a      	b.n	8015d18 <rcl_init+0x144>
 8015e42:	bf00      	nop
 8015e44:	200119d4 	.word	0x200119d4

08015e48 <rcl_get_zero_initialized_init_options>:
 8015e48:	2000      	movs	r0, #0
 8015e4a:	4770      	bx	lr

08015e4c <rcl_init_options_init>:
 8015e4c:	b084      	sub	sp, #16
 8015e4e:	b570      	push	{r4, r5, r6, lr}
 8015e50:	b09e      	sub	sp, #120	; 0x78
 8015e52:	ad23      	add	r5, sp, #140	; 0x8c
 8015e54:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8015e58:	2800      	cmp	r0, #0
 8015e5a:	d046      	beq.n	8015eea <rcl_init_options_init+0x9e>
 8015e5c:	6803      	ldr	r3, [r0, #0]
 8015e5e:	4604      	mov	r4, r0
 8015e60:	b133      	cbz	r3, 8015e70 <rcl_init_options_init+0x24>
 8015e62:	2564      	movs	r5, #100	; 0x64
 8015e64:	4628      	mov	r0, r5
 8015e66:	b01e      	add	sp, #120	; 0x78
 8015e68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015e6c:	b004      	add	sp, #16
 8015e6e:	4770      	bx	lr
 8015e70:	4628      	mov	r0, r5
 8015e72:	f7f8 ff6d 	bl	800ed50 <rcutils_allocator_is_valid>
 8015e76:	2800      	cmp	r0, #0
 8015e78:	d037      	beq.n	8015eea <rcl_init_options_init+0x9e>
 8015e7a:	46ae      	mov	lr, r5
 8015e7c:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 8015e80:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015e84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015e88:	f8de 3000 	ldr.w	r3, [lr]
 8015e8c:	2070      	movs	r0, #112	; 0x70
 8015e8e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8015e90:	f8cc 3000 	str.w	r3, [ip]
 8015e94:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015e96:	4798      	blx	r3
 8015e98:	4606      	mov	r6, r0
 8015e9a:	6020      	str	r0, [r4, #0]
 8015e9c:	b338      	cbz	r0, 8015eee <rcl_init_options_init+0xa2>
 8015e9e:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 8015ea2:	4686      	mov	lr, r0
 8015ea4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015ea8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015eac:	f8dc 3000 	ldr.w	r3, [ip]
 8015eb0:	a802      	add	r0, sp, #8
 8015eb2:	f8ce 3000 	str.w	r3, [lr]
 8015eb6:	f003 facf 	bl	8019458 <rmw_get_zero_initialized_init_options>
 8015eba:	2258      	movs	r2, #88	; 0x58
 8015ebc:	a902      	add	r1, sp, #8
 8015ebe:	f106 0018 	add.w	r0, r6, #24
 8015ec2:	f008 fe14 	bl	801eaee <memcpy>
 8015ec6:	ab26      	add	r3, sp, #152	; 0x98
 8015ec8:	6826      	ldr	r6, [r4, #0]
 8015eca:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015ece:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015ed2:	f106 0018 	add.w	r0, r6, #24
 8015ed6:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8015eda:	f003 fd5f 	bl	801999c <rmw_init_options_init>
 8015ede:	4605      	mov	r5, r0
 8015ee0:	b938      	cbnz	r0, 8015ef2 <rcl_init_options_init+0xa6>
 8015ee2:	6823      	ldr	r3, [r4, #0]
 8015ee4:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34
 8015ee8:	e7bc      	b.n	8015e64 <rcl_init_options_init+0x18>
 8015eea:	250b      	movs	r5, #11
 8015eec:	e7ba      	b.n	8015e64 <rcl_init_options_init+0x18>
 8015eee:	250a      	movs	r5, #10
 8015ef0:	e7b8      	b.n	8015e64 <rcl_init_options_init+0x18>
 8015ef2:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8015ef4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015ef6:	6820      	ldr	r0, [r4, #0]
 8015ef8:	4798      	blx	r3
 8015efa:	4628      	mov	r0, r5
 8015efc:	f7ff fde6 	bl	8015acc <rcl_convert_rmw_ret_to_rcl_ret>
 8015f00:	4605      	mov	r5, r0
 8015f02:	e7af      	b.n	8015e64 <rcl_init_options_init+0x18>

08015f04 <rcl_init_options_fini>:
 8015f04:	b530      	push	{r4, r5, lr}
 8015f06:	b087      	sub	sp, #28
 8015f08:	b1f0      	cbz	r0, 8015f48 <rcl_init_options_fini+0x44>
 8015f0a:	6803      	ldr	r3, [r0, #0]
 8015f0c:	4604      	mov	r4, r0
 8015f0e:	b1db      	cbz	r3, 8015f48 <rcl_init_options_fini+0x44>
 8015f10:	469c      	mov	ip, r3
 8015f12:	f10d 0e04 	add.w	lr, sp, #4
 8015f16:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015f1a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015f1e:	f8dc 3000 	ldr.w	r3, [ip]
 8015f22:	a801      	add	r0, sp, #4
 8015f24:	f8ce 3000 	str.w	r3, [lr]
 8015f28:	f7f8 ff12 	bl	800ed50 <rcutils_allocator_is_valid>
 8015f2c:	b160      	cbz	r0, 8015f48 <rcl_init_options_fini+0x44>
 8015f2e:	6820      	ldr	r0, [r4, #0]
 8015f30:	3018      	adds	r0, #24
 8015f32:	f003 fdcd 	bl	8019ad0 <rmw_init_options_fini>
 8015f36:	4605      	mov	r5, r0
 8015f38:	b950      	cbnz	r0, 8015f50 <rcl_init_options_fini+0x4c>
 8015f3a:	6820      	ldr	r0, [r4, #0]
 8015f3c:	9b02      	ldr	r3, [sp, #8]
 8015f3e:	9905      	ldr	r1, [sp, #20]
 8015f40:	4798      	blx	r3
 8015f42:	4628      	mov	r0, r5
 8015f44:	b007      	add	sp, #28
 8015f46:	bd30      	pop	{r4, r5, pc}
 8015f48:	250b      	movs	r5, #11
 8015f4a:	4628      	mov	r0, r5
 8015f4c:	b007      	add	sp, #28
 8015f4e:	bd30      	pop	{r4, r5, pc}
 8015f50:	f7ff fdbc 	bl	8015acc <rcl_convert_rmw_ret_to_rcl_ret>
 8015f54:	4605      	mov	r5, r0
 8015f56:	e7f8      	b.n	8015f4a <rcl_init_options_fini+0x46>

08015f58 <rcl_init_options_copy>:
 8015f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f5a:	b09d      	sub	sp, #116	; 0x74
 8015f5c:	2800      	cmp	r0, #0
 8015f5e:	d04d      	beq.n	8015ffc <rcl_init_options_copy+0xa4>
 8015f60:	4604      	mov	r4, r0
 8015f62:	6800      	ldr	r0, [r0, #0]
 8015f64:	2800      	cmp	r0, #0
 8015f66:	d049      	beq.n	8015ffc <rcl_init_options_copy+0xa4>
 8015f68:	460d      	mov	r5, r1
 8015f6a:	f7f8 fef1 	bl	800ed50 <rcutils_allocator_is_valid>
 8015f6e:	2d00      	cmp	r5, #0
 8015f70:	d044      	beq.n	8015ffc <rcl_init_options_copy+0xa4>
 8015f72:	f080 0001 	eor.w	r0, r0, #1
 8015f76:	b2c0      	uxtb	r0, r0
 8015f78:	2800      	cmp	r0, #0
 8015f7a:	d13f      	bne.n	8015ffc <rcl_init_options_copy+0xa4>
 8015f7c:	682b      	ldr	r3, [r5, #0]
 8015f7e:	b11b      	cbz	r3, 8015f88 <rcl_init_options_copy+0x30>
 8015f80:	2464      	movs	r4, #100	; 0x64
 8015f82:	4620      	mov	r0, r4
 8015f84:	b01d      	add	sp, #116	; 0x74
 8015f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f88:	6826      	ldr	r6, [r4, #0]
 8015f8a:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
 8015f8e:	46b6      	mov	lr, r6
 8015f90:	6837      	ldr	r7, [r6, #0]
 8015f92:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015f96:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015f9a:	f8de 3000 	ldr.w	r3, [lr]
 8015f9e:	2070      	movs	r0, #112	; 0x70
 8015fa0:	4619      	mov	r1, r3
 8015fa2:	f8cc 3000 	str.w	r3, [ip]
 8015fa6:	47b8      	blx	r7
 8015fa8:	4606      	mov	r6, r0
 8015faa:	6028      	str	r0, [r5, #0]
 8015fac:	b350      	cbz	r0, 8016004 <rcl_init_options_copy+0xac>
 8015fae:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
 8015fb2:	4686      	mov	lr, r0
 8015fb4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015fb8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015fbc:	f8dc 3000 	ldr.w	r3, [ip]
 8015fc0:	4668      	mov	r0, sp
 8015fc2:	f8ce 3000 	str.w	r3, [lr]
 8015fc6:	f003 fa47 	bl	8019458 <rmw_get_zero_initialized_init_options>
 8015fca:	2258      	movs	r2, #88	; 0x58
 8015fcc:	4669      	mov	r1, sp
 8015fce:	f106 0018 	add.w	r0, r6, #24
 8015fd2:	f008 fd8c 	bl	801eaee <memcpy>
 8015fd6:	6820      	ldr	r0, [r4, #0]
 8015fd8:	6829      	ldr	r1, [r5, #0]
 8015fda:	3018      	adds	r0, #24
 8015fdc:	3118      	adds	r1, #24
 8015fde:	f003 fd45 	bl	8019a6c <rmw_init_options_copy>
 8015fe2:	4604      	mov	r4, r0
 8015fe4:	2800      	cmp	r0, #0
 8015fe6:	d0cc      	beq.n	8015f82 <rcl_init_options_copy+0x2a>
 8015fe8:	f7f8 fec0 	bl	800ed6c <rcutils_get_error_string>
 8015fec:	f7f8 fed4 	bl	800ed98 <rcutils_reset_error>
 8015ff0:	4628      	mov	r0, r5
 8015ff2:	f7ff ff87 	bl	8015f04 <rcl_init_options_fini>
 8015ff6:	b138      	cbz	r0, 8016008 <rcl_init_options_copy+0xb0>
 8015ff8:	4604      	mov	r4, r0
 8015ffa:	e7c2      	b.n	8015f82 <rcl_init_options_copy+0x2a>
 8015ffc:	240b      	movs	r4, #11
 8015ffe:	4620      	mov	r0, r4
 8016000:	b01d      	add	sp, #116	; 0x74
 8016002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016004:	240a      	movs	r4, #10
 8016006:	e7bc      	b.n	8015f82 <rcl_init_options_copy+0x2a>
 8016008:	4620      	mov	r0, r4
 801600a:	b01d      	add	sp, #116	; 0x74
 801600c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016010:	f7ff bd5c 	b.w	8015acc <rcl_convert_rmw_ret_to_rcl_ret>

08016014 <rcl_get_localhost_only>:
 8016014:	b510      	push	{r4, lr}
 8016016:	2300      	movs	r3, #0
 8016018:	b082      	sub	sp, #8
 801601a:	9301      	str	r3, [sp, #4]
 801601c:	b1c0      	cbz	r0, 8016050 <rcl_get_localhost_only+0x3c>
 801601e:	4604      	mov	r4, r0
 8016020:	a901      	add	r1, sp, #4
 8016022:	480d      	ldr	r0, [pc, #52]	; (8016058 <rcl_get_localhost_only+0x44>)
 8016024:	f002 ff54 	bl	8018ed0 <rcutils_get_env>
 8016028:	b110      	cbz	r0, 8016030 <rcl_get_localhost_only+0x1c>
 801602a:	2001      	movs	r0, #1
 801602c:	b002      	add	sp, #8
 801602e:	bd10      	pop	{r4, pc}
 8016030:	9b01      	ldr	r3, [sp, #4]
 8016032:	b10b      	cbz	r3, 8016038 <rcl_get_localhost_only+0x24>
 8016034:	781b      	ldrb	r3, [r3, #0]
 8016036:	b923      	cbnz	r3, 8016042 <rcl_get_localhost_only+0x2e>
 8016038:	2300      	movs	r3, #0
 801603a:	4618      	mov	r0, r3
 801603c:	7023      	strb	r3, [r4, #0]
 801603e:	b002      	add	sp, #8
 8016040:	bd10      	pop	{r4, pc}
 8016042:	2b31      	cmp	r3, #49	; 0x31
 8016044:	bf0c      	ite	eq
 8016046:	2301      	moveq	r3, #1
 8016048:	2302      	movne	r3, #2
 801604a:	7023      	strb	r3, [r4, #0]
 801604c:	b002      	add	sp, #8
 801604e:	bd10      	pop	{r4, pc}
 8016050:	200b      	movs	r0, #11
 8016052:	b002      	add	sp, #8
 8016054:	bd10      	pop	{r4, pc}
 8016056:	bf00      	nop
 8016058:	08020e18 	.word	0x08020e18

0801605c <rcl_get_zero_initialized_node>:
 801605c:	4a03      	ldr	r2, [pc, #12]	; (801606c <rcl_get_zero_initialized_node+0x10>)
 801605e:	4603      	mov	r3, r0
 8016060:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016064:	e883 0003 	stmia.w	r3, {r0, r1}
 8016068:	4618      	mov	r0, r3
 801606a:	4770      	bx	lr
 801606c:	08020e5c 	.word	0x08020e5c

08016070 <rcl_node_init>:
 8016070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016074:	b0ab      	sub	sp, #172	; 0xac
 8016076:	4604      	mov	r4, r0
 8016078:	460e      	mov	r6, r1
 801607a:	4615      	mov	r5, r2
 801607c:	f8dd 80d0 	ldr.w	r8, [sp, #208]	; 0xd0
 8016080:	a825      	add	r0, sp, #148	; 0x94
 8016082:	461f      	mov	r7, r3
 8016084:	f006 fe4a 	bl	801cd1c <rcl_guard_condition_get_default_options>
 8016088:	f1b8 0f00 	cmp.w	r8, #0
 801608c:	f000 80f3 	beq.w	8016276 <rcl_node_init+0x206>
 8016090:	4640      	mov	r0, r8
 8016092:	f7f8 fe5d 	bl	800ed50 <rcutils_allocator_is_valid>
 8016096:	2d00      	cmp	r5, #0
 8016098:	bf18      	it	ne
 801609a:	2c00      	cmpne	r4, #0
 801609c:	f080 0001 	eor.w	r0, r0, #1
 80160a0:	bf0c      	ite	eq
 80160a2:	f04f 0c01 	moveq.w	ip, #1
 80160a6:	f04f 0c00 	movne.w	ip, #0
 80160aa:	2e00      	cmp	r6, #0
 80160ac:	bf08      	it	eq
 80160ae:	f04c 0c01 	orreq.w	ip, ip, #1
 80160b2:	ea4c 0c00 	orr.w	ip, ip, r0
 80160b6:	f01c 09ff 	ands.w	r9, ip, #255	; 0xff
 80160ba:	f040 80dc 	bne.w	8016276 <rcl_node_init+0x206>
 80160be:	f8d4 a004 	ldr.w	sl, [r4, #4]
 80160c2:	f1ba 0f00 	cmp.w	sl, #0
 80160c6:	f040 80fc 	bne.w	80162c2 <rcl_node_init+0x252>
 80160ca:	2f00      	cmp	r7, #0
 80160cc:	f000 80d3 	beq.w	8016276 <rcl_node_init+0x206>
 80160d0:	4638      	mov	r0, r7
 80160d2:	f7ff fd19 	bl	8015b08 <rcl_context_is_valid>
 80160d6:	4683      	mov	fp, r0
 80160d8:	2800      	cmp	r0, #0
 80160da:	f000 80d2 	beq.w	8016282 <rcl_node_init+0x212>
 80160de:	4652      	mov	r2, sl
 80160e0:	4630      	mov	r0, r6
 80160e2:	a924      	add	r1, sp, #144	; 0x90
 80160e4:	f8cd a090 	str.w	sl, [sp, #144]	; 0x90
 80160e8:	f003 fb6c 	bl	80197c4 <rmw_validate_node_name>
 80160ec:	4682      	mov	sl, r0
 80160ee:	2800      	cmp	r0, #0
 80160f0:	f040 80c3 	bne.w	801627a <rcl_node_init+0x20a>
 80160f4:	9824      	ldr	r0, [sp, #144]	; 0x90
 80160f6:	2800      	cmp	r0, #0
 80160f8:	f040 80f1 	bne.w	80162de <rcl_node_init+0x26e>
 80160fc:	4628      	mov	r0, r5
 80160fe:	f7ea f8ff 	bl	8000300 <strlen>
 8016102:	2800      	cmp	r0, #0
 8016104:	f040 80c0 	bne.w	8016288 <rcl_node_init+0x218>
 8016108:	4d79      	ldr	r5, [pc, #484]	; (80162f0 <rcl_node_init+0x280>)
 801610a:	a924      	add	r1, sp, #144	; 0x90
 801610c:	2200      	movs	r2, #0
 801610e:	4628      	mov	r0, r5
 8016110:	f003 fb3a 	bl	8019788 <rmw_validate_namespace>
 8016114:	4682      	mov	sl, r0
 8016116:	2800      	cmp	r0, #0
 8016118:	f040 80af 	bne.w	801627a <rcl_node_init+0x20a>
 801611c:	9824      	ldr	r0, [sp, #144]	; 0x90
 801611e:	2800      	cmp	r0, #0
 8016120:	f040 80d5 	bne.w	80162ce <rcl_node_init+0x25e>
 8016124:	f8d8 3000 	ldr.w	r3, [r8]
 8016128:	2080      	movs	r0, #128	; 0x80
 801612a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801612e:	4798      	blx	r3
 8016130:	4682      	mov	sl, r0
 8016132:	6060      	str	r0, [r4, #4]
 8016134:	2800      	cmp	r0, #0
 8016136:	f000 80cf 	beq.w	80162d8 <rcl_node_init+0x268>
 801613a:	2200      	movs	r2, #0
 801613c:	2300      	movs	r3, #0
 801613e:	a808      	add	r0, sp, #32
 8016140:	e9ca 231c 	strd	r2, r3, [sl, #112]	; 0x70
 8016144:	e9ca 231e 	strd	r2, r3, [sl, #120]	; 0x78
 8016148:	f000 f922 	bl	8016390 <rcl_node_get_default_options>
 801614c:	a908      	add	r1, sp, #32
 801614e:	4650      	mov	r0, sl
 8016150:	2270      	movs	r2, #112	; 0x70
 8016152:	f008 fccc 	bl	801eaee <memcpy>
 8016156:	6861      	ldr	r1, [r4, #4]
 8016158:	4640      	mov	r0, r8
 801615a:	6027      	str	r7, [r4, #0]
 801615c:	f000 f926 	bl	80163ac <rcl_node_options_copy>
 8016160:	2800      	cmp	r0, #0
 8016162:	d158      	bne.n	8016216 <rcl_node_init+0x1a6>
 8016164:	4628      	mov	r0, r5
 8016166:	f7ea f8cb 	bl	8000300 <strlen>
 801616a:	4428      	add	r0, r5
 801616c:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8016170:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8016174:	2b2f      	cmp	r3, #47	; 0x2f
 8016176:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801617a:	9300      	str	r3, [sp, #0]
 801617c:	bf0c      	ite	eq
 801617e:	4b5d      	ldreq	r3, [pc, #372]	; (80162f4 <rcl_node_init+0x284>)
 8016180:	4b5d      	ldrne	r3, [pc, #372]	; (80162f8 <rcl_node_init+0x288>)
 8016182:	9302      	str	r3, [sp, #8]
 8016184:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016188:	9301      	str	r3, [sp, #4]
 801618a:	f8d4 a004 	ldr.w	sl, [r4, #4]
 801618e:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8016192:	f002 fec5 	bl	8018f20 <rcutils_format_string_limit>
 8016196:	6823      	ldr	r3, [r4, #0]
 8016198:	f8ca 007c 	str.w	r0, [sl, #124]	; 0x7c
 801619c:	4631      	mov	r1, r6
 801619e:	6818      	ldr	r0, [r3, #0]
 80161a0:	462a      	mov	r2, r5
 80161a2:	6866      	ldr	r6, [r4, #4]
 80161a4:	3028      	adds	r0, #40	; 0x28
 80161a6:	f003 ff23 	bl	8019ff0 <rmw_create_node>
 80161aa:	6863      	ldr	r3, [r4, #4]
 80161ac:	6730      	str	r0, [r6, #112]	; 0x70
 80161ae:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80161b0:	2800      	cmp	r0, #0
 80161b2:	d032      	beq.n	801621a <rcl_node_init+0x1aa>
 80161b4:	f003 ffac 	bl	801a110 <rmw_node_get_graph_guard_condition>
 80161b8:	4682      	mov	sl, r0
 80161ba:	b360      	cbz	r0, 8016216 <rcl_node_init+0x1a6>
 80161bc:	f8d8 3000 	ldr.w	r3, [r8]
 80161c0:	2008      	movs	r0, #8
 80161c2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80161c6:	6866      	ldr	r6, [r4, #4]
 80161c8:	4798      	blx	r3
 80161ca:	6863      	ldr	r3, [r4, #4]
 80161cc:	6770      	str	r0, [r6, #116]	; 0x74
 80161ce:	f8d3 b074 	ldr.w	fp, [r3, #116]	; 0x74
 80161d2:	f1bb 0f00 	cmp.w	fp, #0
 80161d6:	d020      	beq.n	801621a <rcl_node_init+0x1aa>
 80161d8:	a806      	add	r0, sp, #24
 80161da:	ae25      	add	r6, sp, #148	; 0x94
 80161dc:	f006 fcc4 	bl	801cb68 <rcl_get_zero_initialized_guard_condition>
 80161e0:	a806      	add	r0, sp, #24
 80161e2:	6863      	ldr	r3, [r4, #4]
 80161e4:	46c4      	mov	ip, r8
 80161e6:	c803      	ldmia	r0, {r0, r1}
 80161e8:	f8d3 e074 	ldr.w	lr, [r3, #116]	; 0x74
 80161ec:	e88b 0003 	stmia.w	fp, {r0, r1}
 80161f0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80161f4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80161f6:	f8dc 3000 	ldr.w	r3, [ip]
 80161fa:	6033      	str	r3, [r6, #0]
 80161fc:	ab2a      	add	r3, sp, #168	; 0xa8
 80161fe:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8016202:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8016206:	4651      	mov	r1, sl
 8016208:	463a      	mov	r2, r7
 801620a:	4670      	mov	r0, lr
 801620c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801620e:	f006 fd03 	bl	801cc18 <rcl_guard_condition_init_from_rmw>
 8016212:	4682      	mov	sl, r0
 8016214:	b328      	cbz	r0, 8016262 <rcl_node_init+0x1f2>
 8016216:	6863      	ldr	r3, [r4, #4]
 8016218:	b1f3      	cbz	r3, 8016258 <rcl_node_init+0x1e8>
 801621a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 801621c:	b128      	cbz	r0, 801622a <rcl_node_init+0x1ba>
 801621e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016222:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016226:	4798      	blx	r3
 8016228:	6863      	ldr	r3, [r4, #4]
 801622a:	6f18      	ldr	r0, [r3, #112]	; 0x70
 801622c:	b110      	cbz	r0, 8016234 <rcl_node_init+0x1c4>
 801622e:	f003 fef1 	bl	801a014 <rmw_destroy_node>
 8016232:	6863      	ldr	r3, [r4, #4]
 8016234:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8016236:	b148      	cbz	r0, 801624c <rcl_node_init+0x1dc>
 8016238:	f006 fd4a 	bl	801ccd0 <rcl_guard_condition_fini>
 801623c:	6863      	ldr	r3, [r4, #4]
 801623e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016242:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8016244:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016248:	4798      	blx	r3
 801624a:	6863      	ldr	r3, [r4, #4]
 801624c:	4618      	mov	r0, r3
 801624e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016252:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016256:	4798      	blx	r3
 8016258:	2300      	movs	r3, #0
 801625a:	f04f 0a01 	mov.w	sl, #1
 801625e:	e9c4 3300 	strd	r3, r3, [r4]
 8016262:	f1b9 0f00 	cmp.w	r9, #0
 8016266:	d008      	beq.n	801627a <rcl_node_init+0x20a>
 8016268:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801626c:	4628      	mov	r0, r5
 801626e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016272:	4798      	blx	r3
 8016274:	e001      	b.n	801627a <rcl_node_init+0x20a>
 8016276:	f04f 0a0b 	mov.w	sl, #11
 801627a:	4650      	mov	r0, sl
 801627c:	b02b      	add	sp, #172	; 0xac
 801627e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016282:	f04f 0a65 	mov.w	sl, #101	; 0x65
 8016286:	e7f8      	b.n	801627a <rcl_node_init+0x20a>
 8016288:	782b      	ldrb	r3, [r5, #0]
 801628a:	2b2f      	cmp	r3, #47	; 0x2f
 801628c:	f43f af3d 	beq.w	801610a <rcl_node_init+0x9a>
 8016290:	9503      	str	r5, [sp, #12]
 8016292:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016296:	9300      	str	r3, [sp, #0]
 8016298:	4b18      	ldr	r3, [pc, #96]	; (80162fc <rcl_node_init+0x28c>)
 801629a:	9302      	str	r3, [sp, #8]
 801629c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80162a0:	9301      	str	r3, [sp, #4]
 80162a2:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80162a6:	f002 fe3b 	bl	8018f20 <rcutils_format_string_limit>
 80162aa:	4605      	mov	r5, r0
 80162ac:	b1e0      	cbz	r0, 80162e8 <rcl_node_init+0x278>
 80162ae:	2200      	movs	r2, #0
 80162b0:	a924      	add	r1, sp, #144	; 0x90
 80162b2:	9224      	str	r2, [sp, #144]	; 0x90
 80162b4:	f003 fa68 	bl	8019788 <rmw_validate_namespace>
 80162b8:	4682      	mov	sl, r0
 80162ba:	2800      	cmp	r0, #0
 80162bc:	d1d4      	bne.n	8016268 <rcl_node_init+0x1f8>
 80162be:	46d9      	mov	r9, fp
 80162c0:	e72c      	b.n	801611c <rcl_node_init+0xac>
 80162c2:	f04f 0a64 	mov.w	sl, #100	; 0x64
 80162c6:	4650      	mov	r0, sl
 80162c8:	b02b      	add	sp, #172	; 0xac
 80162ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162ce:	f04f 0aca 	mov.w	sl, #202	; 0xca
 80162d2:	f003 fa6b 	bl	80197ac <rmw_namespace_validation_result_string>
 80162d6:	e7c4      	b.n	8016262 <rcl_node_init+0x1f2>
 80162d8:	f04f 0a0a 	mov.w	sl, #10
 80162dc:	e7c1      	b.n	8016262 <rcl_node_init+0x1f2>
 80162de:	f04f 0ac9 	mov.w	sl, #201	; 0xc9
 80162e2:	f003 fac3 	bl	801986c <rmw_node_name_validation_result_string>
 80162e6:	e7c8      	b.n	801627a <rcl_node_init+0x20a>
 80162e8:	f04f 0a0a 	mov.w	sl, #10
 80162ec:	e7c5      	b.n	801627a <rcl_node_init+0x20a>
 80162ee:	bf00      	nop
 80162f0:	08020e30 	.word	0x08020e30
 80162f4:	08020900 	.word	0x08020900
 80162f8:	08020e38 	.word	0x08020e38
 80162fc:	08020e34 	.word	0x08020e34

08016300 <rcl_node_is_valid>:
 8016300:	b130      	cbz	r0, 8016310 <rcl_node_is_valid+0x10>
 8016302:	6843      	ldr	r3, [r0, #4]
 8016304:	b123      	cbz	r3, 8016310 <rcl_node_is_valid+0x10>
 8016306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016308:	b113      	cbz	r3, 8016310 <rcl_node_is_valid+0x10>
 801630a:	6800      	ldr	r0, [r0, #0]
 801630c:	f7ff bbfc 	b.w	8015b08 <rcl_context_is_valid>
 8016310:	2000      	movs	r0, #0
 8016312:	4770      	bx	lr

08016314 <rcl_node_get_name>:
 8016314:	b120      	cbz	r0, 8016320 <rcl_node_get_name+0xc>
 8016316:	6840      	ldr	r0, [r0, #4]
 8016318:	b110      	cbz	r0, 8016320 <rcl_node_get_name+0xc>
 801631a:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801631c:	b100      	cbz	r0, 8016320 <rcl_node_get_name+0xc>
 801631e:	6880      	ldr	r0, [r0, #8]
 8016320:	4770      	bx	lr
 8016322:	bf00      	nop

08016324 <rcl_node_get_namespace>:
 8016324:	b120      	cbz	r0, 8016330 <rcl_node_get_namespace+0xc>
 8016326:	6840      	ldr	r0, [r0, #4]
 8016328:	b110      	cbz	r0, 8016330 <rcl_node_get_namespace+0xc>
 801632a:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801632c:	b100      	cbz	r0, 8016330 <rcl_node_get_namespace+0xc>
 801632e:	68c0      	ldr	r0, [r0, #12]
 8016330:	4770      	bx	lr
 8016332:	bf00      	nop

08016334 <rcl_node_get_options>:
 8016334:	b128      	cbz	r0, 8016342 <rcl_node_get_options+0xe>
 8016336:	6840      	ldr	r0, [r0, #4]
 8016338:	b118      	cbz	r0, 8016342 <rcl_node_get_options+0xe>
 801633a:	6f03      	ldr	r3, [r0, #112]	; 0x70
 801633c:	2b00      	cmp	r3, #0
 801633e:	bf08      	it	eq
 8016340:	2000      	moveq	r0, #0
 8016342:	4770      	bx	lr

08016344 <rcl_node_get_rmw_handle>:
 8016344:	b110      	cbz	r0, 801634c <rcl_node_get_rmw_handle+0x8>
 8016346:	6840      	ldr	r0, [r0, #4]
 8016348:	b100      	cbz	r0, 801634c <rcl_node_get_rmw_handle+0x8>
 801634a:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801634c:	4770      	bx	lr
 801634e:	bf00      	nop

08016350 <rcl_get_disable_loaned_message>:
 8016350:	b510      	push	{r4, lr}
 8016352:	2300      	movs	r3, #0
 8016354:	b082      	sub	sp, #8
 8016356:	9301      	str	r3, [sp, #4]
 8016358:	b1a0      	cbz	r0, 8016384 <rcl_get_disable_loaned_message+0x34>
 801635a:	4604      	mov	r4, r0
 801635c:	a901      	add	r1, sp, #4
 801635e:	480b      	ldr	r0, [pc, #44]	; (801638c <rcl_get_disable_loaned_message+0x3c>)
 8016360:	f002 fdb6 	bl	8018ed0 <rcutils_get_env>
 8016364:	b110      	cbz	r0, 801636c <rcl_get_disable_loaned_message+0x1c>
 8016366:	2001      	movs	r0, #1
 8016368:	b002      	add	sp, #8
 801636a:	bd10      	pop	{r4, pc}
 801636c:	9a01      	ldr	r2, [sp, #4]
 801636e:	2000      	movs	r0, #0
 8016370:	7813      	ldrb	r3, [r2, #0]
 8016372:	3b31      	subs	r3, #49	; 0x31
 8016374:	bf08      	it	eq
 8016376:	7853      	ldrbeq	r3, [r2, #1]
 8016378:	fab3 f383 	clz	r3, r3
 801637c:	095b      	lsrs	r3, r3, #5
 801637e:	7023      	strb	r3, [r4, #0]
 8016380:	b002      	add	sp, #8
 8016382:	bd10      	pop	{r4, pc}
 8016384:	200b      	movs	r0, #11
 8016386:	b002      	add	sp, #8
 8016388:	bd10      	pop	{r4, pc}
 801638a:	bf00      	nop
 801638c:	08020e40 	.word	0x08020e40

08016390 <rcl_node_get_default_options>:
 8016390:	b510      	push	{r4, lr}
 8016392:	4604      	mov	r4, r0
 8016394:	2270      	movs	r2, #112	; 0x70
 8016396:	2100      	movs	r1, #0
 8016398:	f008 fa78 	bl	801e88c <memset>
 801639c:	4620      	mov	r0, r4
 801639e:	f7f8 fcc9 	bl	800ed34 <rcutils_get_default_allocator>
 80163a2:	2301      	movs	r3, #1
 80163a4:	4620      	mov	r0, r4
 80163a6:	7523      	strb	r3, [r4, #20]
 80163a8:	bd10      	pop	{r4, pc}
 80163aa:	bf00      	nop

080163ac <rcl_node_options_copy>:
 80163ac:	2800      	cmp	r0, #0
 80163ae:	bf18      	it	ne
 80163b0:	4288      	cmpne	r0, r1
 80163b2:	d01b      	beq.n	80163ec <rcl_node_options_copy+0x40>
 80163b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80163b6:	fab1 f681 	clz	r6, r1
 80163ba:	460c      	mov	r4, r1
 80163bc:	0976      	lsrs	r6, r6, #5
 80163be:	b199      	cbz	r1, 80163e8 <rcl_node_options_copy+0x3c>
 80163c0:	4605      	mov	r5, r0
 80163c2:	8a87      	ldrh	r7, [r0, #20]
 80163c4:	4684      	mov	ip, r0
 80163c6:	468e      	mov	lr, r1
 80163c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80163ca:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80163ce:	682b      	ldr	r3, [r5, #0]
 80163d0:	2250      	movs	r2, #80	; 0x50
 80163d2:	f10c 0118 	add.w	r1, ip, #24
 80163d6:	f104 0018 	add.w	r0, r4, #24
 80163da:	f8ce 3000 	str.w	r3, [lr]
 80163de:	82a7      	strh	r7, [r4, #20]
 80163e0:	f008 fb85 	bl	801eaee <memcpy>
 80163e4:	4630      	mov	r0, r6
 80163e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80163e8:	200b      	movs	r0, #11
 80163ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80163ec:	200b      	movs	r0, #11
 80163ee:	4770      	bx	lr

080163f0 <rcl_node_resolve_name>:
 80163f0:	b082      	sub	sp, #8
 80163f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163f6:	b091      	sub	sp, #68	; 0x44
 80163f8:	ac1a      	add	r4, sp, #104	; 0x68
 80163fa:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 80163fe:	e884 000c 	stmia.w	r4, {r2, r3}
 8016402:	2800      	cmp	r0, #0
 8016404:	d03d      	beq.n	8016482 <rcl_node_resolve_name+0x92>
 8016406:	460c      	mov	r4, r1
 8016408:	4605      	mov	r5, r0
 801640a:	f7ff ff93 	bl	8016334 <rcl_node_get_options>
 801640e:	2800      	cmp	r0, #0
 8016410:	d03a      	beq.n	8016488 <rcl_node_resolve_name+0x98>
 8016412:	4628      	mov	r0, r5
 8016414:	f7ff ff7e 	bl	8016314 <rcl_node_get_name>
 8016418:	4606      	mov	r6, r0
 801641a:	4628      	mov	r0, r5
 801641c:	ad0b      	add	r5, sp, #44	; 0x2c
 801641e:	f7ff ff81 	bl	8016324 <rcl_node_get_namespace>
 8016422:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 8016426:	4607      	mov	r7, r0
 8016428:	46ac      	mov	ip, r5
 801642a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801642e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016432:	f8de 3000 	ldr.w	r3, [lr]
 8016436:	f8cc 3000 	str.w	r3, [ip]
 801643a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801643c:	b30b      	cbz	r3, 8016482 <rcl_node_resolve_name+0x92>
 801643e:	4689      	mov	r9, r1
 8016440:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8016444:	f002 feee 	bl	8019224 <rcutils_get_zero_initialized_string_map>
 8016448:	ab10      	add	r3, sp, #64	; 0x40
 801644a:	9008      	str	r0, [sp, #32]
 801644c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8016450:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016454:	2100      	movs	r1, #0
 8016456:	a808      	add	r0, sp, #32
 8016458:	e895 000c 	ldmia.w	r5, {r2, r3}
 801645c:	f002 ff34 	bl	80192c8 <rcutils_string_map_init>
 8016460:	4683      	mov	fp, r0
 8016462:	b1a0      	cbz	r0, 801648e <rcl_node_resolve_name+0x9e>
 8016464:	f7f8 fc82 	bl	800ed6c <rcutils_get_error_string>
 8016468:	f7f8 fc96 	bl	800ed98 <rcutils_reset_error>
 801646c:	f1bb 0f0a 	cmp.w	fp, #10
 8016470:	bf18      	it	ne
 8016472:	f04f 0b01 	movne.w	fp, #1
 8016476:	4658      	mov	r0, fp
 8016478:	b011      	add	sp, #68	; 0x44
 801647a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801647e:	b002      	add	sp, #8
 8016480:	4770      	bx	lr
 8016482:	f04f 0b0b 	mov.w	fp, #11
 8016486:	e7f6      	b.n	8016476 <rcl_node_resolve_name+0x86>
 8016488:	f04f 0b01 	mov.w	fp, #1
 801648c:	e7f3      	b.n	8016476 <rcl_node_resolve_name+0x86>
 801648e:	9009      	str	r0, [sp, #36]	; 0x24
 8016490:	9007      	str	r0, [sp, #28]
 8016492:	a808      	add	r0, sp, #32
 8016494:	f006 fb62 	bl	801cb5c <rcl_get_default_topic_name_substitutions>
 8016498:	4683      	mov	fp, r0
 801649a:	b180      	cbz	r0, 80164be <rcl_node_resolve_name+0xce>
 801649c:	280a      	cmp	r0, #10
 801649e:	a808      	add	r0, sp, #32
 80164a0:	bf18      	it	ne
 80164a2:	f04f 0b01 	movne.w	fp, #1
 80164a6:	f002 ff4d 	bl	8019344 <rcutils_string_map_fini>
 80164aa:	4604      	mov	r4, r0
 80164ac:	2800      	cmp	r0, #0
 80164ae:	d15b      	bne.n	8016568 <rcl_node_resolve_name+0x178>
 80164b0:	4651      	mov	r1, sl
 80164b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80164b4:	47c8      	blx	r9
 80164b6:	4651      	mov	r1, sl
 80164b8:	4620      	mov	r0, r4
 80164ba:	47c8      	blx	r9
 80164bc:	e7db      	b.n	8016476 <rcl_node_resolve_name+0x86>
 80164be:	ab09      	add	r3, sp, #36	; 0x24
 80164c0:	46ec      	mov	ip, sp
 80164c2:	9305      	str	r3, [sp, #20]
 80164c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80164c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80164ca:	682b      	ldr	r3, [r5, #0]
 80164cc:	463a      	mov	r2, r7
 80164ce:	4631      	mov	r1, r6
 80164d0:	4620      	mov	r0, r4
 80164d2:	f8cc 3000 	str.w	r3, [ip]
 80164d6:	ab08      	add	r3, sp, #32
 80164d8:	f006 f9e0 	bl	801c89c <rcl_expand_topic_name>
 80164dc:	4683      	mov	fp, r0
 80164de:	b9d8      	cbnz	r0, 8016518 <rcl_node_resolve_name+0x128>
 80164e0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80164e2:	4602      	mov	r2, r0
 80164e4:	9009      	str	r0, [sp, #36]	; 0x24
 80164e6:	a90a      	add	r1, sp, #40	; 0x28
 80164e8:	4620      	mov	r0, r4
 80164ea:	f003 f87d 	bl	80195e8 <rmw_validate_full_topic_name>
 80164ee:	bb50      	cbnz	r0, 8016546 <rcl_node_resolve_name+0x156>
 80164f0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80164f2:	2d00      	cmp	r5, #0
 80164f4:	d140      	bne.n	8016578 <rcl_node_resolve_name+0x188>
 80164f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80164f8:	a808      	add	r0, sp, #32
 80164fa:	601c      	str	r4, [r3, #0]
 80164fc:	f002 ff22 	bl	8019344 <rcutils_string_map_fini>
 8016500:	4683      	mov	fp, r0
 8016502:	2800      	cmp	r0, #0
 8016504:	d043      	beq.n	801658e <rcl_node_resolve_name+0x19e>
 8016506:	f7f8 fc31 	bl	800ed6c <rcutils_get_error_string>
 801650a:	46a8      	mov	r8, r5
 801650c:	f04f 0b01 	mov.w	fp, #1
 8016510:	462c      	mov	r4, r5
 8016512:	f7f8 fc41 	bl	800ed98 <rcutils_reset_error>
 8016516:	e00a      	b.n	801652e <rcl_node_resolve_name+0x13e>
 8016518:	2867      	cmp	r0, #103	; 0x67
 801651a:	bf14      	ite	ne
 801651c:	f04f 0800 	movne.w	r8, #0
 8016520:	f008 0801 	andeq.w	r8, r8, #1
 8016524:	9c07      	ldr	r4, [sp, #28]
 8016526:	a808      	add	r0, sp, #32
 8016528:	f002 ff0c 	bl	8019344 <rcutils_string_map_fini>
 801652c:	bb50      	cbnz	r0, 8016584 <rcl_node_resolve_name+0x194>
 801652e:	4651      	mov	r1, sl
 8016530:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016532:	47c8      	blx	r9
 8016534:	4651      	mov	r1, sl
 8016536:	4620      	mov	r0, r4
 8016538:	47c8      	blx	r9
 801653a:	f1b8 0f00 	cmp.w	r8, #0
 801653e:	bf18      	it	ne
 8016540:	f04f 0b68 	movne.w	fp, #104	; 0x68
 8016544:	e797      	b.n	8016476 <rcl_node_resolve_name+0x86>
 8016546:	f7f8 fc11 	bl	800ed6c <rcutils_get_error_string>
 801654a:	f7f8 fc25 	bl	800ed98 <rcutils_reset_error>
 801654e:	a808      	add	r0, sp, #32
 8016550:	f002 fef8 	bl	8019344 <rcutils_string_map_fini>
 8016554:	b998      	cbnz	r0, 801657e <rcl_node_resolve_name+0x18e>
 8016556:	4651      	mov	r1, sl
 8016558:	9809      	ldr	r0, [sp, #36]	; 0x24
 801655a:	47c8      	blx	r9
 801655c:	4651      	mov	r1, sl
 801655e:	4620      	mov	r0, r4
 8016560:	f04f 0b01 	mov.w	fp, #1
 8016564:	47c8      	blx	r9
 8016566:	e786      	b.n	8016476 <rcl_node_resolve_name+0x86>
 8016568:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801656c:	f7f8 fbfe 	bl	800ed6c <rcutils_get_error_string>
 8016570:	f7f8 fc12 	bl	800ed98 <rcutils_reset_error>
 8016574:	4644      	mov	r4, r8
 8016576:	e7da      	b.n	801652e <rcl_node_resolve_name+0x13e>
 8016578:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801657c:	e7d3      	b.n	8016526 <rcl_node_resolve_name+0x136>
 801657e:	46d8      	mov	r8, fp
 8016580:	f04f 0b01 	mov.w	fp, #1
 8016584:	f7f8 fbf2 	bl	800ed6c <rcutils_get_error_string>
 8016588:	f7f8 fc06 	bl	800ed98 <rcutils_reset_error>
 801658c:	e7cf      	b.n	801652e <rcl_node_resolve_name+0x13e>
 801658e:	4651      	mov	r1, sl
 8016590:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016592:	47c8      	blx	r9
 8016594:	4651      	mov	r1, sl
 8016596:	4658      	mov	r0, fp
 8016598:	47c8      	blx	r9
 801659a:	e76c      	b.n	8016476 <rcl_node_resolve_name+0x86>

0801659c <exact_match_lookup>:
 801659c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801659e:	f102 0708 	add.w	r7, r2, #8
 80165a2:	460b      	mov	r3, r1
 80165a4:	b085      	sub	sp, #20
 80165a6:	4614      	mov	r4, r2
 80165a8:	4606      	mov	r6, r0
 80165aa:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80165ae:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80165b2:	4618      	mov	r0, r3
 80165b4:	4919      	ldr	r1, [pc, #100]	; (801661c <exact_match_lookup+0x80>)
 80165b6:	e894 000c 	ldmia.w	r4, {r2, r3}
 80165ba:	f002 fca3 	bl	8018f04 <rcutils_join_path>
 80165be:	7833      	ldrb	r3, [r6, #0]
 80165c0:	4605      	mov	r5, r0
 80165c2:	2b2f      	cmp	r3, #47	; 0x2f
 80165c4:	d023      	beq.n	801660e <exact_match_lookup+0x72>
 80165c6:	f104 030c 	add.w	r3, r4, #12
 80165ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 80165ce:	e88d 0003 	stmia.w	sp, {r0, r1}
 80165d2:	1c70      	adds	r0, r6, #1
 80165d4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80165d8:	f002 fc9a 	bl	8018f10 <rcutils_to_native_path>
 80165dc:	4606      	mov	r6, r0
 80165de:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80165e2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80165e6:	4631      	mov	r1, r6
 80165e8:	4628      	mov	r0, r5
 80165ea:	e894 000c 	ldmia.w	r4, {r2, r3}
 80165ee:	f002 fc89 	bl	8018f04 <rcutils_join_path>
 80165f2:	4603      	mov	r3, r0
 80165f4:	4630      	mov	r0, r6
 80165f6:	6862      	ldr	r2, [r4, #4]
 80165f8:	461e      	mov	r6, r3
 80165fa:	6921      	ldr	r1, [r4, #16]
 80165fc:	4790      	blx	r2
 80165fe:	4628      	mov	r0, r5
 8016600:	4635      	mov	r5, r6
 8016602:	6863      	ldr	r3, [r4, #4]
 8016604:	6921      	ldr	r1, [r4, #16]
 8016606:	4798      	blx	r3
 8016608:	4628      	mov	r0, r5
 801660a:	b005      	add	sp, #20
 801660c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801660e:	7873      	ldrb	r3, [r6, #1]
 8016610:	2b00      	cmp	r3, #0
 8016612:	d1d8      	bne.n	80165c6 <exact_match_lookup+0x2a>
 8016614:	4628      	mov	r0, r5
 8016616:	b005      	add	sp, #20
 8016618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801661a:	bf00      	nop
 801661c:	08020ea0 	.word	0x08020ea0

08016620 <rcl_get_secure_root>:
 8016620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016624:	b085      	sub	sp, #20
 8016626:	b168      	cbz	r0, 8016644 <rcl_get_secure_root+0x24>
 8016628:	4607      	mov	r7, r0
 801662a:	4608      	mov	r0, r1
 801662c:	460c      	mov	r4, r1
 801662e:	f7f8 fb8f 	bl	800ed50 <rcutils_allocator_is_valid>
 8016632:	b138      	cbz	r0, 8016644 <rcl_get_secure_root+0x24>
 8016634:	2300      	movs	r3, #0
 8016636:	482d      	ldr	r0, [pc, #180]	; (80166ec <rcl_get_secure_root+0xcc>)
 8016638:	a903      	add	r1, sp, #12
 801663a:	9303      	str	r3, [sp, #12]
 801663c:	f002 fc48 	bl	8018ed0 <rcutils_get_env>
 8016640:	4605      	mov	r5, r0
 8016642:	b120      	cbz	r0, 801664e <rcl_get_secure_root+0x2e>
 8016644:	2500      	movs	r5, #0
 8016646:	4628      	mov	r0, r5
 8016648:	b005      	add	sp, #20
 801664a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801664e:	9b03      	ldr	r3, [sp, #12]
 8016650:	781a      	ldrb	r2, [r3, #0]
 8016652:	2a00      	cmp	r2, #0
 8016654:	d0f6      	beq.n	8016644 <rcl_get_secure_root+0x24>
 8016656:	f104 090c 	add.w	r9, r4, #12
 801665a:	e899 0003 	ldmia.w	r9, {r0, r1}
 801665e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016662:	4618      	mov	r0, r3
 8016664:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8016668:	f002 fd94 	bl	8019194 <rcutils_strdup>
 801666c:	4680      	mov	r8, r0
 801666e:	2800      	cmp	r0, #0
 8016670:	d0e8      	beq.n	8016644 <rcl_get_secure_root+0x24>
 8016672:	a903      	add	r1, sp, #12
 8016674:	481e      	ldr	r0, [pc, #120]	; (80166f0 <rcl_get_secure_root+0xd0>)
 8016676:	9503      	str	r5, [sp, #12]
 8016678:	f002 fc2a 	bl	8018ed0 <rcutils_get_env>
 801667c:	b160      	cbz	r0, 8016698 <rcl_get_secure_root+0x78>
 801667e:	2600      	movs	r6, #0
 8016680:	4630      	mov	r0, r6
 8016682:	6863      	ldr	r3, [r4, #4]
 8016684:	6921      	ldr	r1, [r4, #16]
 8016686:	4798      	blx	r3
 8016688:	4640      	mov	r0, r8
 801668a:	6863      	ldr	r3, [r4, #4]
 801668c:	6921      	ldr	r1, [r4, #16]
 801668e:	4798      	blx	r3
 8016690:	4628      	mov	r0, r5
 8016692:	b005      	add	sp, #20
 8016694:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016698:	9b03      	ldr	r3, [sp, #12]
 801669a:	781e      	ldrb	r6, [r3, #0]
 801669c:	b1f6      	cbz	r6, 80166dc <rcl_get_secure_root+0xbc>
 801669e:	e899 0003 	ldmia.w	r9, {r0, r1}
 80166a2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80166a6:	4618      	mov	r0, r3
 80166a8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80166ac:	f002 fd72 	bl	8019194 <rcutils_strdup>
 80166b0:	4606      	mov	r6, r0
 80166b2:	2800      	cmp	r0, #0
 80166b4:	d0e3      	beq.n	801667e <rcl_get_secure_root+0x5e>
 80166b6:	4622      	mov	r2, r4
 80166b8:	4641      	mov	r1, r8
 80166ba:	f7ff ff6f 	bl	801659c <exact_match_lookup>
 80166be:	4605      	mov	r5, r0
 80166c0:	2d00      	cmp	r5, #0
 80166c2:	d0dd      	beq.n	8016680 <rcl_get_secure_root+0x60>
 80166c4:	4628      	mov	r0, r5
 80166c6:	f002 fc1b 	bl	8018f00 <rcutils_is_directory>
 80166ca:	4603      	mov	r3, r0
 80166cc:	2800      	cmp	r0, #0
 80166ce:	d1d7      	bne.n	8016680 <rcl_get_secure_root+0x60>
 80166d0:	4628      	mov	r0, r5
 80166d2:	6921      	ldr	r1, [r4, #16]
 80166d4:	461d      	mov	r5, r3
 80166d6:	6863      	ldr	r3, [r4, #4]
 80166d8:	4798      	blx	r3
 80166da:	e7d1      	b.n	8016680 <rcl_get_secure_root+0x60>
 80166dc:	4622      	mov	r2, r4
 80166de:	4638      	mov	r0, r7
 80166e0:	4641      	mov	r1, r8
 80166e2:	f7ff ff5b 	bl	801659c <exact_match_lookup>
 80166e6:	4605      	mov	r5, r0
 80166e8:	e7ea      	b.n	80166c0 <rcl_get_secure_root+0xa0>
 80166ea:	bf00      	nop
 80166ec:	08020eac 	.word	0x08020eac
 80166f0:	08020ec4 	.word	0x08020ec4

080166f4 <rcl_get_security_options_from_environment>:
 80166f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80166f8:	b082      	sub	sp, #8
 80166fa:	2300      	movs	r3, #0
 80166fc:	4606      	mov	r6, r0
 80166fe:	460f      	mov	r7, r1
 8016700:	4821      	ldr	r0, [pc, #132]	; (8016788 <rcl_get_security_options_from_environment+0x94>)
 8016702:	a901      	add	r1, sp, #4
 8016704:	4690      	mov	r8, r2
 8016706:	9301      	str	r3, [sp, #4]
 8016708:	f002 fbe2 	bl	8018ed0 <rcutils_get_env>
 801670c:	b120      	cbz	r0, 8016718 <rcl_get_security_options_from_environment+0x24>
 801670e:	2501      	movs	r5, #1
 8016710:	4628      	mov	r0, r5
 8016712:	b002      	add	sp, #8
 8016714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016718:	4604      	mov	r4, r0
 801671a:	491c      	ldr	r1, [pc, #112]	; (801678c <rcl_get_security_options_from_environment+0x98>)
 801671c:	9801      	ldr	r0, [sp, #4]
 801671e:	f7e9 fd8f 	bl	8000240 <strcmp>
 8016722:	4605      	mov	r5, r0
 8016724:	b9f0      	cbnz	r0, 8016764 <rcl_get_security_options_from_environment+0x70>
 8016726:	9001      	str	r0, [sp, #4]
 8016728:	f1b8 0f00 	cmp.w	r8, #0
 801672c:	d021      	beq.n	8016772 <rcl_get_security_options_from_environment+0x7e>
 801672e:	a901      	add	r1, sp, #4
 8016730:	4817      	ldr	r0, [pc, #92]	; (8016790 <rcl_get_security_options_from_environment+0x9c>)
 8016732:	f002 fbcd 	bl	8018ed0 <rcutils_get_env>
 8016736:	2800      	cmp	r0, #0
 8016738:	d1e9      	bne.n	801670e <rcl_get_security_options_from_environment+0x1a>
 801673a:	4916      	ldr	r1, [pc, #88]	; (8016794 <rcl_get_security_options_from_environment+0xa0>)
 801673c:	9801      	ldr	r0, [sp, #4]
 801673e:	f7e9 fd7f 	bl	8000240 <strcmp>
 8016742:	4603      	mov	r3, r0
 8016744:	4639      	mov	r1, r7
 8016746:	4630      	mov	r0, r6
 8016748:	fab3 f383 	clz	r3, r3
 801674c:	095b      	lsrs	r3, r3, #5
 801674e:	f888 3000 	strb.w	r3, [r8]
 8016752:	f7ff ff65 	bl	8016620 <rcl_get_secure_root>
 8016756:	b170      	cbz	r0, 8016776 <rcl_get_security_options_from_environment+0x82>
 8016758:	f8c8 0004 	str.w	r0, [r8, #4]
 801675c:	4628      	mov	r0, r5
 801675e:	b002      	add	sp, #8
 8016760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016764:	4625      	mov	r5, r4
 8016766:	f888 4000 	strb.w	r4, [r8]
 801676a:	4628      	mov	r0, r5
 801676c:	b002      	add	sp, #8
 801676e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016772:	250b      	movs	r5, #11
 8016774:	e7cc      	b.n	8016710 <rcl_get_security_options_from_environment+0x1c>
 8016776:	f898 5000 	ldrb.w	r5, [r8]
 801677a:	f1a5 0501 	sub.w	r5, r5, #1
 801677e:	fab5 f585 	clz	r5, r5
 8016782:	096d      	lsrs	r5, r5, #5
 8016784:	e7c4      	b.n	8016710 <rcl_get_security_options_from_environment+0x1c>
 8016786:	bf00      	nop
 8016788:	08020e64 	.word	0x08020e64
 801678c:	08020e78 	.word	0x08020e78
 8016790:	08020e80 	.word	0x08020e80
 8016794:	08020e98 	.word	0x08020e98

08016798 <rcl_get_zero_initialized_service>:
 8016798:	4b01      	ldr	r3, [pc, #4]	; (80167a0 <rcl_get_zero_initialized_service+0x8>)
 801679a:	6818      	ldr	r0, [r3, #0]
 801679c:	4770      	bx	lr
 801679e:	bf00      	nop
 80167a0:	08020ee4 	.word	0x08020ee4

080167a4 <rcl_service_init>:
 80167a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80167a8:	b086      	sub	sp, #24
 80167aa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80167ac:	2d00      	cmp	r5, #0
 80167ae:	d04d      	beq.n	801684c <rcl_service_init+0xa8>
 80167b0:	f105 0950 	add.w	r9, r5, #80	; 0x50
 80167b4:	4604      	mov	r4, r0
 80167b6:	460e      	mov	r6, r1
 80167b8:	4690      	mov	r8, r2
 80167ba:	4648      	mov	r0, r9
 80167bc:	461f      	mov	r7, r3
 80167be:	f7f8 fac7 	bl	800ed50 <rcutils_allocator_is_valid>
 80167c2:	2c00      	cmp	r4, #0
 80167c4:	d042      	beq.n	801684c <rcl_service_init+0xa8>
 80167c6:	f080 0001 	eor.w	r0, r0, #1
 80167ca:	b2c0      	uxtb	r0, r0
 80167cc:	2800      	cmp	r0, #0
 80167ce:	d13d      	bne.n	801684c <rcl_service_init+0xa8>
 80167d0:	4630      	mov	r0, r6
 80167d2:	f7ff fd95 	bl	8016300 <rcl_node_is_valid>
 80167d6:	2800      	cmp	r0, #0
 80167d8:	d042      	beq.n	8016860 <rcl_service_init+0xbc>
 80167da:	2f00      	cmp	r7, #0
 80167dc:	d036      	beq.n	801684c <rcl_service_init+0xa8>
 80167de:	f1b8 0f00 	cmp.w	r8, #0
 80167e2:	d033      	beq.n	801684c <rcl_service_init+0xa8>
 80167e4:	f8d4 a000 	ldr.w	sl, [r4]
 80167e8:	f1ba 0f00 	cmp.w	sl, #0
 80167ec:	d133      	bne.n	8016856 <rcl_service_init+0xb2>
 80167ee:	f44f 718c 	mov.w	r1, #280	; 0x118
 80167f2:	2001      	movs	r0, #1
 80167f4:	e9d5 3217 	ldrd	r3, r2, [r5, #92]	; 0x5c
 80167f8:	4798      	blx	r3
 80167fa:	6020      	str	r0, [r4, #0]
 80167fc:	2800      	cmp	r0, #0
 80167fe:	d075      	beq.n	80168ec <rcl_service_init+0x148>
 8016800:	f500 7088 	add.w	r0, r0, #272	; 0x110
 8016804:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8016808:	2201      	movs	r2, #1
 801680a:	f8cd a010 	str.w	sl, [sp, #16]
 801680e:	9005      	str	r0, [sp, #20]
 8016810:	9203      	str	r2, [sp, #12]
 8016812:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016816:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801681a:	4639      	mov	r1, r7
 801681c:	4630      	mov	r0, r6
 801681e:	e899 000c 	ldmia.w	r9, {r2, r3}
 8016822:	f7ff fde5 	bl	80163f0 <rcl_node_resolve_name>
 8016826:	4607      	mov	r7, r0
 8016828:	b1f8      	cbz	r0, 801686a <rcl_service_init+0xc6>
 801682a:	f1a0 0368 	sub.w	r3, r0, #104	; 0x68
 801682e:	6820      	ldr	r0, [r4, #0]
 8016830:	2b01      	cmp	r3, #1
 8016832:	d943      	bls.n	80168bc <rcl_service_init+0x118>
 8016834:	2f0a      	cmp	r7, #10
 8016836:	d000      	beq.n	801683a <rcl_service_init+0x96>
 8016838:	2701      	movs	r7, #1
 801683a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 801683c:	6e29      	ldr	r1, [r5, #96]	; 0x60
 801683e:	4798      	blx	r3
 8016840:	2300      	movs	r3, #0
 8016842:	4638      	mov	r0, r7
 8016844:	6023      	str	r3, [r4, #0]
 8016846:	b006      	add	sp, #24
 8016848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801684c:	270b      	movs	r7, #11
 801684e:	4638      	mov	r0, r7
 8016850:	b006      	add	sp, #24
 8016852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016856:	2764      	movs	r7, #100	; 0x64
 8016858:	4638      	mov	r0, r7
 801685a:	b006      	add	sp, #24
 801685c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016860:	27c8      	movs	r7, #200	; 0xc8
 8016862:	4638      	mov	r0, r7
 8016864:	b006      	add	sp, #24
 8016866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801686a:	4630      	mov	r0, r6
 801686c:	f7ff fd6a 	bl	8016344 <rcl_node_get_rmw_handle>
 8016870:	6827      	ldr	r7, [r4, #0]
 8016872:	4641      	mov	r1, r8
 8016874:	462b      	mov	r3, r5
 8016876:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801687a:	f003 fd9f 	bl	801a3bc <rmw_create_service>
 801687e:	6821      	ldr	r1, [r4, #0]
 8016880:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 8016884:	f8d1 0108 	ldr.w	r0, [r1, #264]	; 0x108
 8016888:	b390      	cbz	r0, 80168f0 <rcl_service_init+0x14c>
 801688a:	3168      	adds	r1, #104	; 0x68
 801688c:	f003 fec8 	bl	801a620 <rmw_service_request_subscription_get_actual_qos>
 8016890:	b9b0      	cbnz	r0, 80168c0 <rcl_service_init+0x11c>
 8016892:	6823      	ldr	r3, [r4, #0]
 8016894:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 8016898:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 801689c:	f003 feac 	bl	801a5f8 <rmw_service_response_publisher_get_actual_qos>
 80168a0:	4607      	mov	r7, r0
 80168a2:	b968      	cbnz	r0, 80168c0 <rcl_service_init+0x11c>
 80168a4:	6820      	ldr	r0, [r4, #0]
 80168a6:	2268      	movs	r2, #104	; 0x68
 80168a8:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 80168ac:	4629      	mov	r1, r5
 80168ae:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
 80168b2:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
 80168b6:	f008 f91a 	bl	801eaee <memcpy>
 80168ba:	e7c8      	b.n	801684e <rcl_service_init+0xaa>
 80168bc:	2768      	movs	r7, #104	; 0x68
 80168be:	e7bc      	b.n	801683a <rcl_service_init+0x96>
 80168c0:	f7ff f904 	bl	8015acc <rcl_convert_rmw_ret_to_rcl_ret>
 80168c4:	4607      	mov	r7, r0
 80168c6:	4630      	mov	r0, r6
 80168c8:	f7ff fd3c 	bl	8016344 <rcl_node_get_rmw_handle>
 80168cc:	6823      	ldr	r3, [r4, #0]
 80168ce:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 80168d2:	f003 fe4d 	bl	801a570 <rmw_destroy_service>
 80168d6:	6821      	ldr	r1, [r4, #0]
 80168d8:	f8d1 0110 	ldr.w	r0, [r1, #272]	; 0x110
 80168dc:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80168de:	6e29      	ldr	r1, [r5, #96]	; 0x60
 80168e0:	4798      	blx	r3
 80168e2:	6820      	ldr	r0, [r4, #0]
 80168e4:	2300      	movs	r3, #0
 80168e6:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
 80168ea:	e7a6      	b.n	801683a <rcl_service_init+0x96>
 80168ec:	270a      	movs	r7, #10
 80168ee:	e7ae      	b.n	801684e <rcl_service_init+0xaa>
 80168f0:	2701      	movs	r7, #1
 80168f2:	e7f1      	b.n	80168d8 <rcl_service_init+0x134>

080168f4 <rcl_service_get_default_options>:
 80168f4:	b530      	push	{r4, r5, lr}
 80168f6:	4d0f      	ldr	r5, [pc, #60]	; (8016934 <rcl_service_get_default_options+0x40>)
 80168f8:	b087      	sub	sp, #28
 80168fa:	4604      	mov	r4, r0
 80168fc:	2250      	movs	r2, #80	; 0x50
 80168fe:	490e      	ldr	r1, [pc, #56]	; (8016938 <rcl_service_get_default_options+0x44>)
 8016900:	4628      	mov	r0, r5
 8016902:	f008 f8f4 	bl	801eaee <memcpy>
 8016906:	4668      	mov	r0, sp
 8016908:	f7f8 fa14 	bl	800ed34 <rcutils_get_default_allocator>
 801690c:	46ec      	mov	ip, sp
 801690e:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8016912:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016916:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801691a:	f8dc 3000 	ldr.w	r3, [ip]
 801691e:	2268      	movs	r2, #104	; 0x68
 8016920:	4629      	mov	r1, r5
 8016922:	4620      	mov	r0, r4
 8016924:	f8ce 3000 	str.w	r3, [lr]
 8016928:	f008 f8e1 	bl	801eaee <memcpy>
 801692c:	4620      	mov	r0, r4
 801692e:	b007      	add	sp, #28
 8016930:	bd30      	pop	{r4, r5, pc}
 8016932:	bf00      	nop
 8016934:	200119d8 	.word	0x200119d8
 8016938:	08020ee8 	.word	0x08020ee8

0801693c <rcl_service_get_rmw_handle>:
 801693c:	b118      	cbz	r0, 8016946 <rcl_service_get_rmw_handle+0xa>
 801693e:	6800      	ldr	r0, [r0, #0]
 8016940:	b108      	cbz	r0, 8016946 <rcl_service_get_rmw_handle+0xa>
 8016942:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8016946:	4770      	bx	lr

08016948 <rcl_take_request>:
 8016948:	b5f0      	push	{r4, r5, r6, r7, lr}
 801694a:	468e      	mov	lr, r1
 801694c:	b091      	sub	sp, #68	; 0x44
 801694e:	460c      	mov	r4, r1
 8016950:	4617      	mov	r7, r2
 8016952:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8016956:	4605      	mov	r5, r0
 8016958:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801695c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016960:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016964:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016968:	b30d      	cbz	r5, 80169ae <rcl_take_request+0x66>
 801696a:	682b      	ldr	r3, [r5, #0]
 801696c:	b1fb      	cbz	r3, 80169ae <rcl_take_request+0x66>
 801696e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8016972:	b1e0      	cbz	r0, 80169ae <rcl_take_request+0x66>
 8016974:	b397      	cbz	r7, 80169dc <rcl_take_request+0x94>
 8016976:	2300      	movs	r3, #0
 8016978:	463a      	mov	r2, r7
 801697a:	a906      	add	r1, sp, #24
 801697c:	f88d 3017 	strb.w	r3, [sp, #23]
 8016980:	f10d 0317 	add.w	r3, sp, #23
 8016984:	f003 fc18 	bl	801a1b8 <rmw_take_request>
 8016988:	4606      	mov	r6, r0
 801698a:	b198      	cbz	r0, 80169b4 <rcl_take_request+0x6c>
 801698c:	280a      	cmp	r0, #10
 801698e:	bf18      	it	ne
 8016990:	2601      	movne	r6, #1
 8016992:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8016996:	46a6      	mov	lr, r4
 8016998:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801699c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80169a0:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80169a4:	e88e 0003 	stmia.w	lr, {r0, r1}
 80169a8:	4630      	mov	r0, r6
 80169aa:	b011      	add	sp, #68	; 0x44
 80169ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80169ae:	f44f 7616 	mov.w	r6, #600	; 0x258
 80169b2:	e7ee      	b.n	8016992 <rcl_take_request+0x4a>
 80169b4:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80169b8:	b193      	cbz	r3, 80169e0 <rcl_take_request+0x98>
 80169ba:	682b      	ldr	r3, [r5, #0]
 80169bc:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
 80169c0:	2800      	cmp	r0, #0
 80169c2:	d0e6      	beq.n	8016992 <rcl_take_request+0x4a>
 80169c4:	463a      	mov	r2, r7
 80169c6:	ab0a      	add	r3, sp, #40	; 0x28
 80169c8:	2101      	movs	r1, #1
 80169ca:	9302      	str	r3, [sp, #8]
 80169cc:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 80169d0:	e9cd 6700 	strd	r6, r7, [sp]
 80169d4:	f000 f844 	bl	8016a60 <rcl_send_service_event_message>
 80169d8:	4606      	mov	r6, r0
 80169da:	e7da      	b.n	8016992 <rcl_take_request+0x4a>
 80169dc:	260b      	movs	r6, #11
 80169de:	e7d8      	b.n	8016992 <rcl_take_request+0x4a>
 80169e0:	f240 2659 	movw	r6, #601	; 0x259
 80169e4:	e7d5      	b.n	8016992 <rcl_take_request+0x4a>
 80169e6:	bf00      	nop

080169e8 <rcl_send_response>:
 80169e8:	b350      	cbz	r0, 8016a40 <rcl_send_response+0x58>
 80169ea:	6803      	ldr	r3, [r0, #0]
 80169ec:	b570      	push	{r4, r5, r6, lr}
 80169ee:	4604      	mov	r4, r0
 80169f0:	b084      	sub	sp, #16
 80169f2:	b1cb      	cbz	r3, 8016a28 <rcl_send_response+0x40>
 80169f4:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 80169f8:	b1b0      	cbz	r0, 8016a28 <rcl_send_response+0x40>
 80169fa:	4615      	mov	r5, r2
 80169fc:	b1ea      	cbz	r2, 8016a3a <rcl_send_response+0x52>
 80169fe:	460e      	mov	r6, r1
 8016a00:	b1d9      	cbz	r1, 8016a3a <rcl_send_response+0x52>
 8016a02:	f003 fc37 	bl	801a274 <rmw_send_response>
 8016a06:	b998      	cbnz	r0, 8016a30 <rcl_send_response+0x48>
 8016a08:	6823      	ldr	r3, [r4, #0]
 8016a0a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8016a0e:	b16b      	cbz	r3, 8016a2c <rcl_send_response+0x44>
 8016a10:	462a      	mov	r2, r5
 8016a12:	2102      	movs	r1, #2
 8016a14:	4618      	mov	r0, r3
 8016a16:	ed96 7b04 	vldr	d7, [r6, #16]
 8016a1a:	9602      	str	r6, [sp, #8]
 8016a1c:	ed8d 7b00 	vstr	d7, [sp]
 8016a20:	f000 f81e 	bl	8016a60 <rcl_send_service_event_message>
 8016a24:	b004      	add	sp, #16
 8016a26:	bd70      	pop	{r4, r5, r6, pc}
 8016a28:	f44f 7016 	mov.w	r0, #600	; 0x258
 8016a2c:	b004      	add	sp, #16
 8016a2e:	bd70      	pop	{r4, r5, r6, pc}
 8016a30:	2802      	cmp	r0, #2
 8016a32:	bf18      	it	ne
 8016a34:	2001      	movne	r0, #1
 8016a36:	b004      	add	sp, #16
 8016a38:	bd70      	pop	{r4, r5, r6, pc}
 8016a3a:	200b      	movs	r0, #11
 8016a3c:	b004      	add	sp, #16
 8016a3e:	bd70      	pop	{r4, r5, r6, pc}
 8016a40:	f44f 7016 	mov.w	r0, #600	; 0x258
 8016a44:	4770      	bx	lr
 8016a46:	bf00      	nop

08016a48 <rcl_service_is_valid>:
 8016a48:	b130      	cbz	r0, 8016a58 <rcl_service_is_valid+0x10>
 8016a4a:	6800      	ldr	r0, [r0, #0]
 8016a4c:	b120      	cbz	r0, 8016a58 <rcl_service_is_valid+0x10>
 8016a4e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8016a52:	3800      	subs	r0, #0
 8016a54:	bf18      	it	ne
 8016a56:	2001      	movne	r0, #1
 8016a58:	4770      	bx	lr
 8016a5a:	bf00      	nop
 8016a5c:	0000      	movs	r0, r0
	...

08016a60 <rcl_send_service_event_message>:
 8016a60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016a64:	b093      	sub	sp, #76	; 0x4c
 8016a66:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8016a68:	b196      	cbz	r6, 8016a90 <rcl_send_service_event_message+0x30>
 8016a6a:	4615      	mov	r5, r2
 8016a6c:	b182      	cbz	r2, 8016a90 <rcl_send_service_event_message+0x30>
 8016a6e:	4604      	mov	r4, r0
 8016a70:	b148      	cbz	r0, 8016a86 <rcl_send_service_event_message+0x26>
 8016a72:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8016a76:	b133      	cbz	r3, 8016a86 <rcl_send_service_event_message+0x26>
 8016a78:	68c0      	ldr	r0, [r0, #12]
 8016a7a:	460f      	mov	r7, r1
 8016a7c:	f000 f9f2 	bl	8016e64 <rcl_clock_valid>
 8016a80:	b108      	cbz	r0, 8016a86 <rcl_send_service_event_message+0x26>
 8016a82:	7a23      	ldrb	r3, [r4, #8]
 8016a84:	b94b      	cbnz	r3, 8016a9a <rcl_send_service_event_message+0x3a>
 8016a86:	2401      	movs	r4, #1
 8016a88:	4620      	mov	r0, r4
 8016a8a:	b013      	add	sp, #76	; 0x4c
 8016a8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016a90:	240b      	movs	r4, #11
 8016a92:	4620      	mov	r0, r4
 8016a94:	b013      	add	sp, #76	; 0x4c
 8016a96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016a9a:	f104 0e60 	add.w	lr, r4, #96	; 0x60
 8016a9e:	f10d 0c0c 	add.w	ip, sp, #12
 8016aa2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016aa6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016aaa:	f8de 3000 	ldr.w	r3, [lr]
 8016aae:	a803      	add	r0, sp, #12
 8016ab0:	f8cc 3000 	str.w	r3, [ip]
 8016ab4:	f7f8 f94c 	bl	800ed50 <rcutils_allocator_is_valid>
 8016ab8:	2800      	cmp	r0, #0
 8016aba:	d0e9      	beq.n	8016a90 <rcl_send_service_event_message+0x30>
 8016abc:	6820      	ldr	r0, [r4, #0]
 8016abe:	f7f7 f8cd 	bl	800dc5c <rcl_publisher_is_valid>
 8016ac2:	2800      	cmp	r0, #0
 8016ac4:	d05e      	beq.n	8016b84 <rcl_send_service_event_message+0x124>
 8016ac6:	4669      	mov	r1, sp
 8016ac8:	68e0      	ldr	r0, [r4, #12]
 8016aca:	f000 fa5d 	bl	8016f88 <rcl_clock_get_now>
 8016ace:	4601      	mov	r1, r0
 8016ad0:	2800      	cmp	r0, #0
 8016ad2:	d146      	bne.n	8016b62 <rcl_send_service_event_message+0x102>
 8016ad4:	2220      	movs	r2, #32
 8016ad6:	eb0d 0002 	add.w	r0, sp, r2
 8016ada:	f007 fed7 	bl	801e88c <memset>
 8016ade:	f88d 7020 	strb.w	r7, [sp, #32]
 8016ae2:	e9dd 8900 	ldrd	r8, r9, [sp]
 8016ae6:	a32a      	add	r3, pc, #168	; (adr r3, 8016b90 <rcl_send_service_event_message+0x130>)
 8016ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016aec:	4640      	mov	r0, r8
 8016aee:	4649      	mov	r1, r9
 8016af0:	f7e9 fc0e 	bl	8000310 <__aeabi_ldivmod>
 8016af4:	4649      	mov	r1, r9
 8016af6:	9009      	str	r0, [sp, #36]	; 0x24
 8016af8:	4640      	mov	r0, r8
 8016afa:	a325      	add	r3, pc, #148	; (adr r3, 8016b90 <rcl_send_service_event_message+0x130>)
 8016afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b00:	f7e9 fc06 	bl	8000310 <__aeabi_ldivmod>
 8016b04:	920a      	str	r2, [sp, #40]	; 0x28
 8016b06:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 8016b0a:	6830      	ldr	r0, [r6, #0]
 8016b0c:	6871      	ldr	r1, [r6, #4]
 8016b0e:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8016b12:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8016b16:	7a23      	ldrb	r3, [r4, #8]
 8016b18:	68b2      	ldr	r2, [r6, #8]
 8016b1a:	2b01      	cmp	r3, #1
 8016b1c:	68f3      	ldr	r3, [r6, #12]
 8016b1e:	bf08      	it	eq
 8016b20:	2500      	moveq	r5, #0
 8016b22:	2f01      	cmp	r7, #1
 8016b24:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016b28:	d81f      	bhi.n	8016b6a <rcl_send_service_event_message+0x10a>
 8016b2a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8016b2e:	462a      	mov	r2, r5
 8016b30:	a808      	add	r0, sp, #32
 8016b32:	a903      	add	r1, sp, #12
 8016b34:	699d      	ldr	r5, [r3, #24]
 8016b36:	2300      	movs	r3, #0
 8016b38:	47a8      	blx	r5
 8016b3a:	4605      	mov	r5, r0
 8016b3c:	2d00      	cmp	r5, #0
 8016b3e:	d0a2      	beq.n	8016a86 <rcl_send_service_event_message+0x26>
 8016b40:	4629      	mov	r1, r5
 8016b42:	6820      	ldr	r0, [r4, #0]
 8016b44:	2200      	movs	r2, #0
 8016b46:	f7f7 f865 	bl	800dc14 <rcl_publish>
 8016b4a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8016b4e:	4604      	mov	r4, r0
 8016b50:	a903      	add	r1, sp, #12
 8016b52:	4628      	mov	r0, r5
 8016b54:	69db      	ldr	r3, [r3, #28]
 8016b56:	4798      	blx	r3
 8016b58:	2c00      	cmp	r4, #0
 8016b5a:	d095      	beq.n	8016a88 <rcl_send_service_event_message+0x28>
 8016b5c:	f7f8 f91c 	bl	800ed98 <rcutils_reset_error>
 8016b60:	e792      	b.n	8016a88 <rcl_send_service_event_message+0x28>
 8016b62:	2401      	movs	r4, #1
 8016b64:	f7f8 f918 	bl	800ed98 <rcutils_reset_error>
 8016b68:	e78e      	b.n	8016a88 <rcl_send_service_event_message+0x28>
 8016b6a:	1eb9      	subs	r1, r7, #2
 8016b6c:	2901      	cmp	r1, #1
 8016b6e:	d8f8      	bhi.n	8016b62 <rcl_send_service_event_message+0x102>
 8016b70:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8016b74:	462b      	mov	r3, r5
 8016b76:	a808      	add	r0, sp, #32
 8016b78:	a903      	add	r1, sp, #12
 8016b7a:	6995      	ldr	r5, [r2, #24]
 8016b7c:	2200      	movs	r2, #0
 8016b7e:	47a8      	blx	r5
 8016b80:	4605      	mov	r5, r0
 8016b82:	e7db      	b.n	8016b3c <rcl_send_service_event_message+0xdc>
 8016b84:	f44f 7496 	mov.w	r4, #300	; 0x12c
 8016b88:	e77e      	b.n	8016a88 <rcl_send_service_event_message+0x28>
 8016b8a:	bf00      	nop
 8016b8c:	f3af 8000 	nop.w
 8016b90:	3b9aca00 	.word	0x3b9aca00
 8016b94:	00000000 	.word	0x00000000

08016b98 <rcl_get_zero_initialized_subscription>:
 8016b98:	4b01      	ldr	r3, [pc, #4]	; (8016ba0 <rcl_get_zero_initialized_subscription+0x8>)
 8016b9a:	6818      	ldr	r0, [r3, #0]
 8016b9c:	4770      	bx	lr
 8016b9e:	bf00      	nop
 8016ba0:	08020f38 	.word	0x08020f38

08016ba4 <rcl_subscription_init>:
 8016ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016ba8:	b088      	sub	sp, #32
 8016baa:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8016bac:	b1ff      	cbz	r7, 8016bee <rcl_subscription_init+0x4a>
 8016bae:	f107 0a50 	add.w	sl, r7, #80	; 0x50
 8016bb2:	4605      	mov	r5, r0
 8016bb4:	460e      	mov	r6, r1
 8016bb6:	4691      	mov	r9, r2
 8016bb8:	4650      	mov	r0, sl
 8016bba:	4698      	mov	r8, r3
 8016bbc:	f7f8 f8c8 	bl	800ed50 <rcutils_allocator_is_valid>
 8016bc0:	f080 0401 	eor.w	r4, r0, #1
 8016bc4:	b2e4      	uxtb	r4, r4
 8016bc6:	b994      	cbnz	r4, 8016bee <rcl_subscription_init+0x4a>
 8016bc8:	b18d      	cbz	r5, 8016bee <rcl_subscription_init+0x4a>
 8016bca:	4630      	mov	r0, r6
 8016bcc:	f7ff fb98 	bl	8016300 <rcl_node_is_valid>
 8016bd0:	2800      	cmp	r0, #0
 8016bd2:	d055      	beq.n	8016c80 <rcl_subscription_init+0xdc>
 8016bd4:	f1b9 0f00 	cmp.w	r9, #0
 8016bd8:	d009      	beq.n	8016bee <rcl_subscription_init+0x4a>
 8016bda:	f1b8 0f00 	cmp.w	r8, #0
 8016bde:	d006      	beq.n	8016bee <rcl_subscription_init+0x4a>
 8016be0:	682b      	ldr	r3, [r5, #0]
 8016be2:	b14b      	cbz	r3, 8016bf8 <rcl_subscription_init+0x54>
 8016be4:	2464      	movs	r4, #100	; 0x64
 8016be6:	4620      	mov	r0, r4
 8016be8:	b008      	add	sp, #32
 8016bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016bee:	240b      	movs	r4, #11
 8016bf0:	4620      	mov	r0, r4
 8016bf2:	b008      	add	sp, #32
 8016bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016bf8:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8016bfc:	aa07      	add	r2, sp, #28
 8016bfe:	9307      	str	r3, [sp, #28]
 8016c00:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8016c04:	9205      	str	r2, [sp, #20]
 8016c06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016c0a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016c0e:	4641      	mov	r1, r8
 8016c10:	4630      	mov	r0, r6
 8016c12:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8016c16:	f7ff fbeb 	bl	80163f0 <rcl_node_resolve_name>
 8016c1a:	2800      	cmp	r0, #0
 8016c1c:	d15f      	bne.n	8016cde <rcl_subscription_init+0x13a>
 8016c1e:	21d0      	movs	r1, #208	; 0xd0
 8016c20:	2001      	movs	r0, #1
 8016c22:	e9d7 3217 	ldrd	r3, r2, [r7, #92]	; 0x5c
 8016c26:	4798      	blx	r3
 8016c28:	6028      	str	r0, [r5, #0]
 8016c2a:	2800      	cmp	r0, #0
 8016c2c:	d05f      	beq.n	8016cee <rcl_subscription_init+0x14a>
 8016c2e:	4630      	mov	r0, r6
 8016c30:	f7ff fb88 	bl	8016344 <rcl_node_get_rmw_handle>
 8016c34:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016c38:	4649      	mov	r1, r9
 8016c3a:	9a07      	ldr	r2, [sp, #28]
 8016c3c:	9300      	str	r3, [sp, #0]
 8016c3e:	463b      	mov	r3, r7
 8016c40:	682c      	ldr	r4, [r5, #0]
 8016c42:	f003 fd01 	bl	801a648 <rmw_create_subscription>
 8016c46:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
 8016c4a:	682c      	ldr	r4, [r5, #0]
 8016c4c:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
 8016c50:	b348      	cbz	r0, 8016ca6 <rcl_subscription_init+0x102>
 8016c52:	f104 0178 	add.w	r1, r4, #120	; 0x78
 8016c56:	f003 fded 	bl	801a834 <rmw_subscription_get_actual_qos>
 8016c5a:	4604      	mov	r4, r0
 8016c5c:	b9a8      	cbnz	r0, 8016c8a <rcl_subscription_init+0xe6>
 8016c5e:	6828      	ldr	r0, [r5, #0]
 8016c60:	2278      	movs	r2, #120	; 0x78
 8016c62:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8016c66:	4639      	mov	r1, r7
 8016c68:	f880 30c0 	strb.w	r3, [r0, #192]	; 0xc0
 8016c6c:	f007 ff3f 	bl	801eaee <memcpy>
 8016c70:	9807      	ldr	r0, [sp, #28]
 8016c72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016c74:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8016c76:	4798      	blx	r3
 8016c78:	4620      	mov	r0, r4
 8016c7a:	b008      	add	sp, #32
 8016c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c80:	24c8      	movs	r4, #200	; 0xc8
 8016c82:	4620      	mov	r0, r4
 8016c84:	b008      	add	sp, #32
 8016c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c8a:	682c      	ldr	r4, [r5, #0]
 8016c8c:	b36c      	cbz	r4, 8016cea <rcl_subscription_init+0x146>
 8016c8e:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8016c92:	b14b      	cbz	r3, 8016ca8 <rcl_subscription_init+0x104>
 8016c94:	4630      	mov	r0, r6
 8016c96:	f7ff fb55 	bl	8016344 <rcl_node_get_rmw_handle>
 8016c9a:	682b      	ldr	r3, [r5, #0]
 8016c9c:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
 8016ca0:	f003 fddc 	bl	801a85c <rmw_destroy_subscription>
 8016ca4:	682c      	ldr	r4, [r5, #0]
 8016ca6:	b194      	cbz	r4, 8016cce <rcl_subscription_init+0x12a>
 8016ca8:	f104 0650 	add.w	r6, r4, #80	; 0x50
 8016cac:	4630      	mov	r0, r6
 8016cae:	f7f8 f84f 	bl	800ed50 <rcutils_allocator_is_valid>
 8016cb2:	b158      	cbz	r0, 8016ccc <rcl_subscription_init+0x128>
 8016cb4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8016cb6:	b148      	cbz	r0, 8016ccc <rcl_subscription_init+0x128>
 8016cb8:	4631      	mov	r1, r6
 8016cba:	f002 fbe5 	bl	8019488 <rmw_subscription_content_filter_options_fini>
 8016cbe:	4606      	mov	r6, r0
 8016cc0:	b9c8      	cbnz	r0, 8016cf6 <rcl_subscription_init+0x152>
 8016cc2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8016cc4:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8016cc6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8016cc8:	4798      	blx	r3
 8016cca:	66e6      	str	r6, [r4, #108]	; 0x6c
 8016ccc:	682c      	ldr	r4, [r5, #0]
 8016cce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016cd0:	4620      	mov	r0, r4
 8016cd2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8016cd4:	2401      	movs	r4, #1
 8016cd6:	4798      	blx	r3
 8016cd8:	2300      	movs	r3, #0
 8016cda:	602b      	str	r3, [r5, #0]
 8016cdc:	e7c8      	b.n	8016c70 <rcl_subscription_init+0xcc>
 8016cde:	2867      	cmp	r0, #103	; 0x67
 8016ce0:	d007      	beq.n	8016cf2 <rcl_subscription_init+0x14e>
 8016ce2:	2869      	cmp	r0, #105	; 0x69
 8016ce4:	d005      	beq.n	8016cf2 <rcl_subscription_init+0x14e>
 8016ce6:	280a      	cmp	r0, #10
 8016ce8:	d001      	beq.n	8016cee <rcl_subscription_init+0x14a>
 8016cea:	2401      	movs	r4, #1
 8016cec:	e7c0      	b.n	8016c70 <rcl_subscription_init+0xcc>
 8016cee:	240a      	movs	r4, #10
 8016cf0:	e7be      	b.n	8016c70 <rcl_subscription_init+0xcc>
 8016cf2:	2467      	movs	r4, #103	; 0x67
 8016cf4:	e7bc      	b.n	8016c70 <rcl_subscription_init+0xcc>
 8016cf6:	f7fe fee9 	bl	8015acc <rcl_convert_rmw_ret_to_rcl_ret>
 8016cfa:	682c      	ldr	r4, [r5, #0]
 8016cfc:	e7e7      	b.n	8016cce <rcl_subscription_init+0x12a>
 8016cfe:	bf00      	nop

08016d00 <rcl_subscription_get_default_options>:
 8016d00:	b570      	push	{r4, r5, r6, lr}
 8016d02:	4c16      	ldr	r4, [pc, #88]	; (8016d5c <rcl_subscription_get_default_options+0x5c>)
 8016d04:	b08a      	sub	sp, #40	; 0x28
 8016d06:	4605      	mov	r5, r0
 8016d08:	2250      	movs	r2, #80	; 0x50
 8016d0a:	4915      	ldr	r1, [pc, #84]	; (8016d60 <rcl_subscription_get_default_options+0x60>)
 8016d0c:	4620      	mov	r0, r4
 8016d0e:	f007 feee 	bl	801eaee <memcpy>
 8016d12:	a804      	add	r0, sp, #16
 8016d14:	f7f8 f80e 	bl	800ed34 <rcutils_get_default_allocator>
 8016d18:	f10d 0c10 	add.w	ip, sp, #16
 8016d1c:	f104 0e50 	add.w	lr, r4, #80	; 0x50
 8016d20:	466e      	mov	r6, sp
 8016d22:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016d26:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016d2a:	f8dc 3000 	ldr.w	r3, [ip]
 8016d2e:	4630      	mov	r0, r6
 8016d30:	f8ce 3000 	str.w	r3, [lr]
 8016d34:	f002 fbc2 	bl	80194bc <rmw_get_default_subscription_options>
 8016d38:	f104 0364 	add.w	r3, r4, #100	; 0x64
 8016d3c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8016d40:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016d44:	2301      	movs	r3, #1
 8016d46:	2278      	movs	r2, #120	; 0x78
 8016d48:	4621      	mov	r1, r4
 8016d4a:	4628      	mov	r0, r5
 8016d4c:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8016d50:	f007 fecd 	bl	801eaee <memcpy>
 8016d54:	4628      	mov	r0, r5
 8016d56:	b00a      	add	sp, #40	; 0x28
 8016d58:	bd70      	pop	{r4, r5, r6, pc}
 8016d5a:	bf00      	nop
 8016d5c:	20011a40 	.word	0x20011a40
 8016d60:	08020f40 	.word	0x08020f40

08016d64 <rcl_take>:
 8016d64:	2800      	cmp	r0, #0
 8016d66:	d049      	beq.n	8016dfc <rcl_take+0x98>
 8016d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d6c:	4615      	mov	r5, r2
 8016d6e:	6802      	ldr	r2, [r0, #0]
 8016d70:	b0a0      	sub	sp, #128	; 0x80
 8016d72:	4604      	mov	r4, r0
 8016d74:	2a00      	cmp	r2, #0
 8016d76:	d039      	beq.n	8016dec <rcl_take+0x88>
 8016d78:	461f      	mov	r7, r3
 8016d7a:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 8016d7e:	b3ab      	cbz	r3, 8016dec <rcl_take+0x88>
 8016d80:	460e      	mov	r6, r1
 8016d82:	2900      	cmp	r1, #0
 8016d84:	d038      	beq.n	8016df8 <rcl_take+0x94>
 8016d86:	2d00      	cmp	r5, #0
 8016d88:	d03c      	beq.n	8016e04 <rcl_take+0xa0>
 8016d8a:	a802      	add	r0, sp, #8
 8016d8c:	f002 fc24 	bl	80195d8 <rmw_get_zero_initialized_message_info>
 8016d90:	6823      	ldr	r3, [r4, #0]
 8016d92:	f10d 0c08 	add.w	ip, sp, #8
 8016d96:	46ae      	mov	lr, r5
 8016d98:	f8d3 80c8 	ldr.w	r8, [r3, #200]	; 0xc8
 8016d9c:	2400      	movs	r4, #0
 8016d9e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016da2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016da6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016daa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016dae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016db2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016db6:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8016dba:	462b      	mov	r3, r5
 8016dbc:	f10d 0247 	add.w	r2, sp, #71	; 0x47
 8016dc0:	f88d 4047 	strb.w	r4, [sp, #71]	; 0x47
 8016dc4:	e88e 0003 	stmia.w	lr, {r0, r1}
 8016dc8:	4631      	mov	r1, r6
 8016dca:	4640      	mov	r0, r8
 8016dcc:	9700      	str	r7, [sp, #0]
 8016dce:	f003 fda7 	bl	801a920 <rmw_take_with_info>
 8016dd2:	4603      	mov	r3, r0
 8016dd4:	b9c0      	cbnz	r0, 8016e08 <rcl_take+0xa4>
 8016dd6:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
 8016dda:	f240 1291 	movw	r2, #401	; 0x191
 8016dde:	2900      	cmp	r1, #0
 8016de0:	bf08      	it	eq
 8016de2:	4613      	moveq	r3, r2
 8016de4:	4618      	mov	r0, r3
 8016de6:	b020      	add	sp, #128	; 0x80
 8016de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016dec:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8016df0:	4618      	mov	r0, r3
 8016df2:	b020      	add	sp, #128	; 0x80
 8016df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016df8:	230b      	movs	r3, #11
 8016dfa:	e7f3      	b.n	8016de4 <rcl_take+0x80>
 8016dfc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8016e00:	4618      	mov	r0, r3
 8016e02:	4770      	bx	lr
 8016e04:	ad12      	add	r5, sp, #72	; 0x48
 8016e06:	e7c0      	b.n	8016d8a <rcl_take+0x26>
 8016e08:	f7fe fe60 	bl	8015acc <rcl_convert_rmw_ret_to_rcl_ret>
 8016e0c:	4603      	mov	r3, r0
 8016e0e:	e7e9      	b.n	8016de4 <rcl_take+0x80>

08016e10 <rcl_subscription_get_rmw_handle>:
 8016e10:	b118      	cbz	r0, 8016e1a <rcl_subscription_get_rmw_handle+0xa>
 8016e12:	6800      	ldr	r0, [r0, #0]
 8016e14:	b108      	cbz	r0, 8016e1a <rcl_subscription_get_rmw_handle+0xa>
 8016e16:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 8016e1a:	4770      	bx	lr

08016e1c <rcl_subscription_is_valid>:
 8016e1c:	b130      	cbz	r0, 8016e2c <rcl_subscription_is_valid+0x10>
 8016e1e:	6800      	ldr	r0, [r0, #0]
 8016e20:	b120      	cbz	r0, 8016e2c <rcl_subscription_is_valid+0x10>
 8016e22:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 8016e26:	3800      	subs	r0, #0
 8016e28:	bf18      	it	ne
 8016e2a:	2001      	movne	r0, #1
 8016e2c:	4770      	bx	lr
 8016e2e:	bf00      	nop

08016e30 <rcl_get_system_time>:
 8016e30:	4608      	mov	r0, r1
 8016e32:	f7f7 bfcd 	b.w	800edd0 <rcutils_system_time_now>
 8016e36:	bf00      	nop

08016e38 <rcl_get_steady_time>:
 8016e38:	4608      	mov	r0, r1
 8016e3a:	f7f7 bff1 	b.w	800ee20 <rcutils_steady_time_now>
 8016e3e:	bf00      	nop

08016e40 <rcl_get_ros_time>:
 8016e40:	7a03      	ldrb	r3, [r0, #8]
 8016e42:	b510      	push	{r4, lr}
 8016e44:	460c      	mov	r4, r1
 8016e46:	b143      	cbz	r3, 8016e5a <rcl_get_ros_time+0x1a>
 8016e48:	2105      	movs	r1, #5
 8016e4a:	f001 ff9d 	bl	8018d88 <__atomic_load_8>
 8016e4e:	4602      	mov	r2, r0
 8016e50:	460b      	mov	r3, r1
 8016e52:	2000      	movs	r0, #0
 8016e54:	e9c4 2300 	strd	r2, r3, [r4]
 8016e58:	bd10      	pop	{r4, pc}
 8016e5a:	4608      	mov	r0, r1
 8016e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e60:	f7f7 bfb6 	b.w	800edd0 <rcutils_system_time_now>

08016e64 <rcl_clock_valid>:
 8016e64:	b138      	cbz	r0, 8016e76 <rcl_clock_valid+0x12>
 8016e66:	7803      	ldrb	r3, [r0, #0]
 8016e68:	b123      	cbz	r3, 8016e74 <rcl_clock_valid+0x10>
 8016e6a:	68c0      	ldr	r0, [r0, #12]
 8016e6c:	3800      	subs	r0, #0
 8016e6e:	bf18      	it	ne
 8016e70:	2001      	movne	r0, #1
 8016e72:	4770      	bx	lr
 8016e74:	4618      	mov	r0, r3
 8016e76:	4770      	bx	lr

08016e78 <rcl_clock_init>:
 8016e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e7a:	4605      	mov	r5, r0
 8016e7c:	4610      	mov	r0, r2
 8016e7e:	4614      	mov	r4, r2
 8016e80:	460e      	mov	r6, r1
 8016e82:	f7f7 ff65 	bl	800ed50 <rcutils_allocator_is_valid>
 8016e86:	b128      	cbz	r0, 8016e94 <rcl_clock_init+0x1c>
 8016e88:	2d03      	cmp	r5, #3
 8016e8a:	d803      	bhi.n	8016e94 <rcl_clock_init+0x1c>
 8016e8c:	e8df f005 	tbb	[pc, r5]
 8016e90:	0659301f 	.word	0x0659301f
 8016e94:	f04f 0c0b 	mov.w	ip, #11
 8016e98:	4660      	mov	r0, ip
 8016e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e9c:	2c00      	cmp	r4, #0
 8016e9e:	d0f9      	beq.n	8016e94 <rcl_clock_init+0x1c>
 8016ea0:	fab6 f386 	clz	r3, r6
 8016ea4:	095b      	lsrs	r3, r3, #5
 8016ea6:	2e00      	cmp	r6, #0
 8016ea8:	d0f4      	beq.n	8016e94 <rcl_clock_init+0x1c>
 8016eaa:	6133      	str	r3, [r6, #16]
 8016eac:	469c      	mov	ip, r3
 8016eae:	f106 0514 	add.w	r5, r6, #20
 8016eb2:	4f32      	ldr	r7, [pc, #200]	; (8016f7c <rcl_clock_init+0x104>)
 8016eb4:	f04f 0e03 	mov.w	lr, #3
 8016eb8:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8016ebc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016ebe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016ec0:	6823      	ldr	r3, [r4, #0]
 8016ec2:	4660      	mov	r0, ip
 8016ec4:	602b      	str	r3, [r5, #0]
 8016ec6:	60f7      	str	r7, [r6, #12]
 8016ec8:	f886 e000 	strb.w	lr, [r6]
 8016ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ece:	2e00      	cmp	r6, #0
 8016ed0:	d0e0      	beq.n	8016e94 <rcl_clock_init+0x1c>
 8016ed2:	2300      	movs	r3, #0
 8016ed4:	f106 0514 	add.w	r5, r6, #20
 8016ed8:	7033      	strb	r3, [r6, #0]
 8016eda:	469c      	mov	ip, r3
 8016edc:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8016ee0:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8016ee4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016ee6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016ee8:	6823      	ldr	r3, [r4, #0]
 8016eea:	4660      	mov	r0, ip
 8016eec:	602b      	str	r3, [r5, #0]
 8016eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ef0:	2c00      	cmp	r4, #0
 8016ef2:	d0cf      	beq.n	8016e94 <rcl_clock_init+0x1c>
 8016ef4:	fab6 f586 	clz	r5, r6
 8016ef8:	096d      	lsrs	r5, r5, #5
 8016efa:	2e00      	cmp	r6, #0
 8016efc:	d0ca      	beq.n	8016e94 <rcl_clock_init+0x1c>
 8016efe:	46a6      	mov	lr, r4
 8016f00:	7035      	strb	r5, [r6, #0]
 8016f02:	f106 0c14 	add.w	ip, r6, #20
 8016f06:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016f0a:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8016f0e:	e9c6 5503 	strd	r5, r5, [r6, #12]
 8016f12:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016f16:	f8de 3000 	ldr.w	r3, [lr]
 8016f1a:	2010      	movs	r0, #16
 8016f1c:	f8cc 3000 	str.w	r3, [ip]
 8016f20:	6823      	ldr	r3, [r4, #0]
 8016f22:	6921      	ldr	r1, [r4, #16]
 8016f24:	4798      	blx	r3
 8016f26:	6130      	str	r0, [r6, #16]
 8016f28:	b320      	cbz	r0, 8016f74 <rcl_clock_init+0xfc>
 8016f2a:	2200      	movs	r2, #0
 8016f2c:	2300      	movs	r3, #0
 8016f2e:	46ac      	mov	ip, r5
 8016f30:	7205      	strb	r5, [r0, #8]
 8016f32:	e9c0 2300 	strd	r2, r3, [r0]
 8016f36:	4a12      	ldr	r2, [pc, #72]	; (8016f80 <rcl_clock_init+0x108>)
 8016f38:	2301      	movs	r3, #1
 8016f3a:	4660      	mov	r0, ip
 8016f3c:	60f2      	str	r2, [r6, #12]
 8016f3e:	7033      	strb	r3, [r6, #0]
 8016f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f42:	2c00      	cmp	r4, #0
 8016f44:	d0a6      	beq.n	8016e94 <rcl_clock_init+0x1c>
 8016f46:	fab6 f386 	clz	r3, r6
 8016f4a:	095b      	lsrs	r3, r3, #5
 8016f4c:	2e00      	cmp	r6, #0
 8016f4e:	d0a1      	beq.n	8016e94 <rcl_clock_init+0x1c>
 8016f50:	6133      	str	r3, [r6, #16]
 8016f52:	469c      	mov	ip, r3
 8016f54:	f106 0514 	add.w	r5, r6, #20
 8016f58:	f8df e028 	ldr.w	lr, [pc, #40]	; 8016f84 <rcl_clock_init+0x10c>
 8016f5c:	2702      	movs	r7, #2
 8016f5e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8016f62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016f64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016f66:	6823      	ldr	r3, [r4, #0]
 8016f68:	4660      	mov	r0, ip
 8016f6a:	602b      	str	r3, [r5, #0]
 8016f6c:	f8c6 e00c 	str.w	lr, [r6, #12]
 8016f70:	7037      	strb	r7, [r6, #0]
 8016f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f74:	f04f 0c0a 	mov.w	ip, #10
 8016f78:	e78e      	b.n	8016e98 <rcl_clock_init+0x20>
 8016f7a:	bf00      	nop
 8016f7c:	08016e39 	.word	0x08016e39
 8016f80:	08016e41 	.word	0x08016e41
 8016f84:	08016e31 	.word	0x08016e31

08016f88 <rcl_clock_get_now>:
 8016f88:	b140      	cbz	r0, 8016f9c <rcl_clock_get_now+0x14>
 8016f8a:	b139      	cbz	r1, 8016f9c <rcl_clock_get_now+0x14>
 8016f8c:	7803      	ldrb	r3, [r0, #0]
 8016f8e:	b11b      	cbz	r3, 8016f98 <rcl_clock_get_now+0x10>
 8016f90:	68c3      	ldr	r3, [r0, #12]
 8016f92:	b10b      	cbz	r3, 8016f98 <rcl_clock_get_now+0x10>
 8016f94:	6900      	ldr	r0, [r0, #16]
 8016f96:	4718      	bx	r3
 8016f98:	2001      	movs	r0, #1
 8016f9a:	4770      	bx	lr
 8016f9c:	200b      	movs	r0, #11
 8016f9e:	4770      	bx	lr

08016fa0 <rcl_clock_add_jump_callback>:
 8016fa0:	b082      	sub	sp, #8
 8016fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016fa6:	a906      	add	r1, sp, #24
 8016fa8:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 8016fac:	e881 000c 	stmia.w	r1, {r2, r3}
 8016fb0:	b330      	cbz	r0, 8017000 <rcl_clock_add_jump_callback+0x60>
 8016fb2:	4604      	mov	r4, r0
 8016fb4:	3014      	adds	r0, #20
 8016fb6:	f7f7 fecb 	bl	800ed50 <rcutils_allocator_is_valid>
 8016fba:	b30d      	cbz	r5, 8017000 <rcl_clock_add_jump_callback+0x60>
 8016fbc:	f080 0301 	eor.w	r3, r0, #1
 8016fc0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8016fc4:	d11c      	bne.n	8017000 <rcl_clock_add_jump_callback+0x60>
 8016fc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016fc8:	2a00      	cmp	r2, #0
 8016fca:	db19      	blt.n	8017000 <rcl_clock_add_jump_callback+0x60>
 8016fcc:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8016fd0:	2901      	cmp	r1, #1
 8016fd2:	f172 0200 	sbcs.w	r2, r2, #0
 8016fd6:	da13      	bge.n	8017000 <rcl_clock_add_jump_callback+0x60>
 8016fd8:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8016fdc:	2f00      	cmp	r7, #0
 8016fde:	d040      	beq.n	8017062 <rcl_clock_add_jump_callback+0xc2>
 8016fe0:	4602      	mov	r2, r0
 8016fe2:	e003      	b.n	8016fec <rcl_clock_add_jump_callback+0x4c>
 8016fe4:	42bb      	cmp	r3, r7
 8016fe6:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8016fea:	d010      	beq.n	801700e <rcl_clock_add_jump_callback+0x6e>
 8016fec:	6811      	ldr	r1, [r2, #0]
 8016fee:	3301      	adds	r3, #1
 8016ff0:	42a9      	cmp	r1, r5
 8016ff2:	d1f7      	bne.n	8016fe4 <rcl_clock_add_jump_callback+0x44>
 8016ff4:	6a11      	ldr	r1, [r2, #32]
 8016ff6:	42b1      	cmp	r1, r6
 8016ff8:	d1f4      	bne.n	8016fe4 <rcl_clock_add_jump_callback+0x44>
 8016ffa:	f04f 0e01 	mov.w	lr, #1
 8016ffe:	e001      	b.n	8017004 <rcl_clock_add_jump_callback+0x64>
 8017000:	f04f 0e0b 	mov.w	lr, #11
 8017004:	4670      	mov	r0, lr
 8017006:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801700a:	b002      	add	sp, #8
 801700c:	4770      	bx	lr
 801700e:	3301      	adds	r3, #1
 8017010:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8017014:	00d9      	lsls	r1, r3, #3
 8017016:	69e3      	ldr	r3, [r4, #28]
 8017018:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801701a:	4798      	blx	r3
 801701c:	b1f0      	cbz	r0, 801705c <rcl_clock_add_jump_callback+0xbc>
 801701e:	68a3      	ldr	r3, [r4, #8]
 8017020:	f10d 0c18 	add.w	ip, sp, #24
 8017024:	6060      	str	r0, [r4, #4]
 8017026:	f04f 0e00 	mov.w	lr, #0
 801702a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801702e:	f103 0801 	add.w	r8, r3, #1
 8017032:	f840 5032 	str.w	r5, [r0, r2, lsl #3]
 8017036:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801703a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801703e:	f105 0708 	add.w	r7, r5, #8
 8017042:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8017044:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8017048:	e887 0003 	stmia.w	r7, {r0, r1}
 801704c:	4670      	mov	r0, lr
 801704e:	622e      	str	r6, [r5, #32]
 8017050:	f8c4 8008 	str.w	r8, [r4, #8]
 8017054:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017058:	b002      	add	sp, #8
 801705a:	4770      	bx	lr
 801705c:	f04f 0e0a 	mov.w	lr, #10
 8017060:	e7d0      	b.n	8017004 <rcl_clock_add_jump_callback+0x64>
 8017062:	2128      	movs	r1, #40	; 0x28
 8017064:	e7d7      	b.n	8017016 <rcl_clock_add_jump_callback+0x76>
 8017066:	bf00      	nop

08017068 <rcl_clock_remove_jump_callback>:
 8017068:	2800      	cmp	r0, #0
 801706a:	d05f      	beq.n	801712c <rcl_clock_remove_jump_callback+0xc4>
 801706c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017070:	4605      	mov	r5, r0
 8017072:	3014      	adds	r0, #20
 8017074:	460f      	mov	r7, r1
 8017076:	4692      	mov	sl, r2
 8017078:	f7f7 fe6a 	bl	800ed50 <rcutils_allocator_is_valid>
 801707c:	f080 0001 	eor.w	r0, r0, #1
 8017080:	b2c0      	uxtb	r0, r0
 8017082:	2800      	cmp	r0, #0
 8017084:	d13f      	bne.n	8017106 <rcl_clock_remove_jump_callback+0x9e>
 8017086:	2f00      	cmp	r7, #0
 8017088:	d03d      	beq.n	8017106 <rcl_clock_remove_jump_callback+0x9e>
 801708a:	f8d5 8008 	ldr.w	r8, [r5, #8]
 801708e:	f1b8 0f00 	cmp.w	r8, #0
 8017092:	d00c      	beq.n	80170ae <rcl_clock_remove_jump_callback+0x46>
 8017094:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8017098:	eb08 0688 	add.w	r6, r8, r8, lsl #2
 801709c:	464c      	mov	r4, r9
 801709e:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
 80170a2:	6823      	ldr	r3, [r4, #0]
 80170a4:	42bb      	cmp	r3, r7
 80170a6:	d005      	beq.n	80170b4 <rcl_clock_remove_jump_callback+0x4c>
 80170a8:	3428      	adds	r4, #40	; 0x28
 80170aa:	42a6      	cmp	r6, r4
 80170ac:	d1f9      	bne.n	80170a2 <rcl_clock_remove_jump_callback+0x3a>
 80170ae:	2001      	movs	r0, #1
 80170b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80170b4:	6a23      	ldr	r3, [r4, #32]
 80170b6:	3428      	adds	r4, #40	; 0x28
 80170b8:	42a6      	cmp	r6, r4
 80170ba:	d02f      	beq.n	801711c <rcl_clock_remove_jump_callback+0xb4>
 80170bc:	4553      	cmp	r3, sl
 80170be:	d1f0      	bne.n	80170a2 <rcl_clock_remove_jump_callback+0x3a>
 80170c0:	46a6      	mov	lr, r4
 80170c2:	f1a4 0c28 	sub.w	ip, r4, #40	; 0x28
 80170c6:	3428      	adds	r4, #40	; 0x28
 80170c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80170cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80170d0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80170d4:	42a6      	cmp	r6, r4
 80170d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80170da:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80170de:	e88c 0003 	stmia.w	ip, {r0, r1}
 80170e2:	d1ed      	bne.n	80170c0 <rcl_clock_remove_jump_callback+0x58>
 80170e4:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 80170e8:	60ac      	str	r4, [r5, #8]
 80170ea:	b17c      	cbz	r4, 801710c <rcl_clock_remove_jump_callback+0xa4>
 80170ec:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80170f0:	69eb      	ldr	r3, [r5, #28]
 80170f2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80170f4:	4648      	mov	r0, r9
 80170f6:	00e1      	lsls	r1, r4, #3
 80170f8:	4798      	blx	r3
 80170fa:	4603      	mov	r3, r0
 80170fc:	b1c0      	cbz	r0, 8017130 <rcl_clock_remove_jump_callback+0xc8>
 80170fe:	2000      	movs	r0, #0
 8017100:	606b      	str	r3, [r5, #4]
 8017102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017106:	200b      	movs	r0, #11
 8017108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801710c:	4648      	mov	r0, r9
 801710e:	69ab      	ldr	r3, [r5, #24]
 8017110:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8017112:	4798      	blx	r3
 8017114:	4620      	mov	r0, r4
 8017116:	606c      	str	r4, [r5, #4]
 8017118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801711c:	4553      	cmp	r3, sl
 801711e:	d1c6      	bne.n	80170ae <rcl_clock_remove_jump_callback+0x46>
 8017120:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 8017124:	60ac      	str	r4, [r5, #8]
 8017126:	2c00      	cmp	r4, #0
 8017128:	d1e0      	bne.n	80170ec <rcl_clock_remove_jump_callback+0x84>
 801712a:	e7ef      	b.n	801710c <rcl_clock_remove_jump_callback+0xa4>
 801712c:	200b      	movs	r0, #11
 801712e:	4770      	bx	lr
 8017130:	200a      	movs	r0, #10
 8017132:	e7e9      	b.n	8017108 <rcl_clock_remove_jump_callback+0xa0>

08017134 <_rcl_timer_time_jump>:
 8017134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017138:	4605      	mov	r5, r0
 801713a:	b084      	sub	sp, #16
 801713c:	4614      	mov	r4, r2
 801713e:	b131      	cbz	r1, 801714e <_rcl_timer_time_jump+0x1a>
 8017140:	7803      	ldrb	r3, [r0, #0]
 8017142:	3b02      	subs	r3, #2
 8017144:	2b01      	cmp	r3, #1
 8017146:	d93f      	bls.n	80171c8 <_rcl_timer_time_jump+0x94>
 8017148:	b004      	add	sp, #16
 801714a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801714e:	6813      	ldr	r3, [r2, #0]
 8017150:	a902      	add	r1, sp, #8
 8017152:	6818      	ldr	r0, [r3, #0]
 8017154:	f7ff ff18 	bl	8016f88 <rcl_clock_get_now>
 8017158:	2800      	cmp	r0, #0
 801715a:	d1f5      	bne.n	8017148 <_rcl_timer_time_jump+0x14>
 801715c:	6820      	ldr	r0, [r4, #0]
 801715e:	2105      	movs	r1, #5
 8017160:	3020      	adds	r0, #32
 8017162:	f001 fe11 	bl	8018d88 <__atomic_load_8>
 8017166:	6823      	ldr	r3, [r4, #0]
 8017168:	4681      	mov	r9, r0
 801716a:	4688      	mov	r8, r1
 801716c:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8017170:	2105      	movs	r1, #5
 8017172:	f001 fe09 	bl	8018d88 <__atomic_load_8>
 8017176:	4607      	mov	r7, r0
 8017178:	6820      	ldr	r0, [r4, #0]
 801717a:	460e      	mov	r6, r1
 801717c:	2105      	movs	r1, #5
 801717e:	3018      	adds	r0, #24
 8017180:	f001 fe02 	bl	8018d88 <__atomic_load_8>
 8017184:	782b      	ldrb	r3, [r5, #0]
 8017186:	4682      	mov	sl, r0
 8017188:	460d      	mov	r5, r1
 801718a:	3b02      	subs	r3, #2
 801718c:	9a02      	ldr	r2, [sp, #8]
 801718e:	2b01      	cmp	r3, #1
 8017190:	9b03      	ldr	r3, [sp, #12]
 8017192:	d937      	bls.n	8017204 <_rcl_timer_time_jump+0xd0>
 8017194:	42ba      	cmp	r2, r7
 8017196:	eb73 0106 	sbcs.w	r1, r3, r6
 801719a:	da60      	bge.n	801725e <_rcl_timer_time_jump+0x12a>
 801719c:	454a      	cmp	r2, r9
 801719e:	eb73 0108 	sbcs.w	r1, r3, r8
 80171a2:	dad1      	bge.n	8017148 <_rcl_timer_time_jump+0x14>
 80171a4:	eb1a 0202 	adds.w	r2, sl, r2
 80171a8:	6820      	ldr	r0, [r4, #0]
 80171aa:	eb43 0305 	adc.w	r3, r3, r5
 80171ae:	2505      	movs	r5, #5
 80171b0:	3028      	adds	r0, #40	; 0x28
 80171b2:	9500      	str	r5, [sp, #0]
 80171b4:	f001 fe1e 	bl	8018df4 <__atomic_store_8>
 80171b8:	6820      	ldr	r0, [r4, #0]
 80171ba:	9500      	str	r5, [sp, #0]
 80171bc:	3020      	adds	r0, #32
 80171be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80171c2:	f001 fe17 	bl	8018df4 <__atomic_store_8>
 80171c6:	e7bf      	b.n	8017148 <_rcl_timer_time_jump+0x14>
 80171c8:	6813      	ldr	r3, [r2, #0]
 80171ca:	a902      	add	r1, sp, #8
 80171cc:	6818      	ldr	r0, [r3, #0]
 80171ce:	f7ff fedb 	bl	8016f88 <rcl_clock_get_now>
 80171d2:	2800      	cmp	r0, #0
 80171d4:	d1b8      	bne.n	8017148 <_rcl_timer_time_jump+0x14>
 80171d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80171da:	4313      	orrs	r3, r2
 80171dc:	d0b4      	beq.n	8017148 <_rcl_timer_time_jump+0x14>
 80171de:	6820      	ldr	r0, [r4, #0]
 80171e0:	2105      	movs	r1, #5
 80171e2:	3028      	adds	r0, #40	; 0x28
 80171e4:	f001 fdd0 	bl	8018d88 <__atomic_load_8>
 80171e8:	9d02      	ldr	r5, [sp, #8]
 80171ea:	4602      	mov	r2, r0
 80171ec:	9b03      	ldr	r3, [sp, #12]
 80171ee:	6820      	ldr	r0, [r4, #0]
 80171f0:	1b52      	subs	r2, r2, r5
 80171f2:	f100 0030 	add.w	r0, r0, #48	; 0x30
 80171f6:	eb61 0303 	sbc.w	r3, r1, r3
 80171fa:	2105      	movs	r1, #5
 80171fc:	9100      	str	r1, [sp, #0]
 80171fe:	f001 fdf9 	bl	8018df4 <__atomic_store_8>
 8017202:	e7a1      	b.n	8017148 <_rcl_timer_time_jump+0x14>
 8017204:	4313      	orrs	r3, r2
 8017206:	d09f      	beq.n	8017148 <_rcl_timer_time_jump+0x14>
 8017208:	6820      	ldr	r0, [r4, #0]
 801720a:	f04f 0805 	mov.w	r8, #5
 801720e:	2300      	movs	r3, #0
 8017210:	2200      	movs	r2, #0
 8017212:	3030      	adds	r0, #48	; 0x30
 8017214:	f8cd 8000 	str.w	r8, [sp]
 8017218:	f001 fe22 	bl	8018e60 <__atomic_exchange_8>
 801721c:	ea51 0300 	orrs.w	r3, r1, r0
 8017220:	4606      	mov	r6, r0
 8017222:	460f      	mov	r7, r1
 8017224:	d090      	beq.n	8017148 <_rcl_timer_time_jump+0x14>
 8017226:	9a02      	ldr	r2, [sp, #8]
 8017228:	9b03      	ldr	r3, [sp, #12]
 801722a:	1a12      	subs	r2, r2, r0
 801722c:	f8cd 8000 	str.w	r8, [sp]
 8017230:	6820      	ldr	r0, [r4, #0]
 8017232:	eb63 0301 	sbc.w	r3, r3, r1
 8017236:	eb12 020a 	adds.w	r2, r2, sl
 801723a:	f100 0028 	add.w	r0, r0, #40	; 0x28
 801723e:	eb43 0305 	adc.w	r3, r3, r5
 8017242:	f001 fdd7 	bl	8018df4 <__atomic_store_8>
 8017246:	f8cd 8000 	str.w	r8, [sp]
 801724a:	6820      	ldr	r0, [r4, #0]
 801724c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017250:	3020      	adds	r0, #32
 8017252:	1b92      	subs	r2, r2, r6
 8017254:	eb63 0307 	sbc.w	r3, r3, r7
 8017258:	f001 fdcc 	bl	8018df4 <__atomic_store_8>
 801725c:	e774      	b.n	8017148 <_rcl_timer_time_jump+0x14>
 801725e:	6820      	ldr	r0, [r4, #0]
 8017260:	3008      	adds	r0, #8
 8017262:	f005 fd77 	bl	801cd54 <rcl_trigger_guard_condition>
 8017266:	e76f      	b.n	8017148 <_rcl_timer_time_jump+0x14>

08017268 <rcl_get_zero_initialized_timer>:
 8017268:	4b01      	ldr	r3, [pc, #4]	; (8017270 <rcl_get_zero_initialized_timer+0x8>)
 801726a:	6818      	ldr	r0, [r3, #0]
 801726c:	4770      	bx	lr
 801726e:	bf00      	nop
 8017270:	08020f90 	.word	0x08020f90

08017274 <rcl_timer_init>:
 8017274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017278:	b0af      	sub	sp, #188	; 0xbc
 801727a:	460d      	mov	r5, r1
 801727c:	4604      	mov	r4, r0
 801727e:	4692      	mov	sl, r2
 8017280:	a83b      	add	r0, sp, #236	; 0xec
 8017282:	e9dd 8938 	ldrd	r8, r9, [sp, #224]	; 0xe0
 8017286:	f7f7 fd63 	bl	800ed50 <rcutils_allocator_is_valid>
 801728a:	fab5 f385 	clz	r3, r5
 801728e:	095b      	lsrs	r3, r3, #5
 8017290:	ea43 73d9 	orr.w	r3, r3, r9, lsr #31
 8017294:	2c00      	cmp	r4, #0
 8017296:	bf08      	it	eq
 8017298:	f043 0301 	orreq.w	r3, r3, #1
 801729c:	2b00      	cmp	r3, #0
 801729e:	d167      	bne.n	8017370 <rcl_timer_init+0xfc>
 80172a0:	f080 0001 	eor.w	r0, r0, #1
 80172a4:	b2c0      	uxtb	r0, r0
 80172a6:	2800      	cmp	r0, #0
 80172a8:	d162      	bne.n	8017370 <rcl_timer_init+0xfc>
 80172aa:	6823      	ldr	r3, [r4, #0]
 80172ac:	b123      	cbz	r3, 80172b8 <rcl_timer_init+0x44>
 80172ae:	2664      	movs	r6, #100	; 0x64
 80172b0:	4630      	mov	r0, r6
 80172b2:	b02f      	add	sp, #188	; 0xbc
 80172b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172b8:	a908      	add	r1, sp, #32
 80172ba:	4628      	mov	r0, r5
 80172bc:	f7ff fe64 	bl	8016f88 <rcl_clock_get_now>
 80172c0:	4606      	mov	r6, r0
 80172c2:	2800      	cmp	r0, #0
 80172c4:	d1f4      	bne.n	80172b0 <rcl_timer_init+0x3c>
 80172c6:	f10d 0b18 	add.w	fp, sp, #24
 80172ca:	ae0b      	add	r6, sp, #44	; 0x2c
 80172cc:	af18      	add	r7, sp, #96	; 0x60
 80172ce:	4658      	mov	r0, fp
 80172d0:	e9cd 5a16 	strd	r5, sl, [sp, #88]	; 0x58
 80172d4:	f005 fc48 	bl	801cb68 <rcl_get_zero_initialized_guard_condition>
 80172d8:	e89b 0003 	ldmia.w	fp, {r0, r1}
 80172dc:	e887 0003 	stmia.w	r7, {r0, r1}
 80172e0:	4630      	mov	r0, r6
 80172e2:	f005 fd1b 	bl	801cd1c <rcl_guard_condition_get_default_options>
 80172e6:	ab0d      	add	r3, sp, #52	; 0x34
 80172e8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80172ec:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80172f0:	4651      	mov	r1, sl
 80172f2:	4638      	mov	r0, r7
 80172f4:	e896 000c 	ldmia.w	r6, {r2, r3}
 80172f8:	f005 fc40 	bl	801cb7c <rcl_guard_condition_init>
 80172fc:	4606      	mov	r6, r0
 80172fe:	2800      	cmp	r0, #0
 8017300:	d1d6      	bne.n	80172b0 <rcl_timer_init+0x3c>
 8017302:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017304:	781b      	ldrb	r3, [r3, #0]
 8017306:	2b01      	cmp	r3, #1
 8017308:	d037      	beq.n	801737a <rcl_timer_init+0x106>
 801730a:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 801730c:	f10d 0cec 	add.w	ip, sp, #236	; 0xec
 8017310:	f10d 0e94 	add.w	lr, sp, #148	; 0x94
 8017314:	f04f 0a00 	mov.w	sl, #0
 8017318:	931a      	str	r3, [sp, #104]	; 0x68
 801731a:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
 801731e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017322:	e9cd 891c 	strd	r8, r9, [sp, #112]	; 0x70
 8017326:	eb12 0008 	adds.w	r0, r2, r8
 801732a:	f04f 0800 	mov.w	r8, #0
 801732e:	eb43 0109 	adc.w	r1, r3, r9
 8017332:	f04f 0900 	mov.w	r9, #0
 8017336:	e9cd 8922 	strd	r8, r9, [sp, #136]	; 0x88
 801733a:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 801733e:	e9cd 0120 	strd	r0, r1, [sp, #128]	; 0x80
 8017342:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017346:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801734a:	f8dc 3000 	ldr.w	r3, [ip]
 801734e:	2060      	movs	r0, #96	; 0x60
 8017350:	f88d a090 	strb.w	sl, [sp, #144]	; 0x90
 8017354:	4619      	mov	r1, r3
 8017356:	f8ce 3000 	str.w	r3, [lr]
 801735a:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 801735c:	e9cd aa2a 	strd	sl, sl, [sp, #168]	; 0xa8
 8017360:	4798      	blx	r3
 8017362:	6020      	str	r0, [r4, #0]
 8017364:	b358      	cbz	r0, 80173be <rcl_timer_init+0x14a>
 8017366:	2260      	movs	r2, #96	; 0x60
 8017368:	a916      	add	r1, sp, #88	; 0x58
 801736a:	f007 fbc0 	bl	801eaee <memcpy>
 801736e:	e79f      	b.n	80172b0 <rcl_timer_init+0x3c>
 8017370:	260b      	movs	r6, #11
 8017372:	4630      	mov	r0, r6
 8017374:	b02f      	add	sp, #188	; 0xbc
 8017376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801737a:	2001      	movs	r0, #1
 801737c:	2100      	movs	r1, #0
 801737e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8017382:	ab12      	add	r3, sp, #72	; 0x48
 8017384:	4a13      	ldr	r2, [pc, #76]	; (80173d4 <rcl_timer_init+0x160>)
 8017386:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 801738a:	9405      	str	r4, [sp, #20]
 801738c:	9204      	str	r2, [sp, #16]
 801738e:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8017392:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017396:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801739a:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 801739e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80173a0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80173a4:	4628      	mov	r0, r5
 80173a6:	e89c 000c 	ldmia.w	ip, {r2, r3}
 80173aa:	f7ff fdf9 	bl	8016fa0 <rcl_clock_add_jump_callback>
 80173ae:	4603      	mov	r3, r0
 80173b0:	2800      	cmp	r0, #0
 80173b2:	d0aa      	beq.n	801730a <rcl_timer_init+0x96>
 80173b4:	4638      	mov	r0, r7
 80173b6:	461e      	mov	r6, r3
 80173b8:	f005 fc8a 	bl	801ccd0 <rcl_guard_condition_fini>
 80173bc:	e778      	b.n	80172b0 <rcl_timer_init+0x3c>
 80173be:	4638      	mov	r0, r7
 80173c0:	260a      	movs	r6, #10
 80173c2:	f005 fc85 	bl	801ccd0 <rcl_guard_condition_fini>
 80173c6:	4622      	mov	r2, r4
 80173c8:	4902      	ldr	r1, [pc, #8]	; (80173d4 <rcl_timer_init+0x160>)
 80173ca:	4628      	mov	r0, r5
 80173cc:	f7ff fe4c 	bl	8017068 <rcl_clock_remove_jump_callback>
 80173d0:	e76e      	b.n	80172b0 <rcl_timer_init+0x3c>
 80173d2:	bf00      	nop
 80173d4:	08017135 	.word	0x08017135

080173d8 <rcl_timer_call>:
 80173d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173dc:	b087      	sub	sp, #28
 80173de:	2800      	cmp	r0, #0
 80173e0:	d06c      	beq.n	80174bc <rcl_timer_call+0xe4>
 80173e2:	6803      	ldr	r3, [r0, #0]
 80173e4:	4604      	mov	r4, r0
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	d062      	beq.n	80174b0 <rcl_timer_call+0xd8>
 80173ea:	f3bf 8f5b 	dmb	ish
 80173ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80173f2:	f3bf 8f5b 	dmb	ish
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	d14f      	bne.n	801749a <rcl_timer_call+0xc2>
 80173fa:	6803      	ldr	r3, [r0, #0]
 80173fc:	a904      	add	r1, sp, #16
 80173fe:	6818      	ldr	r0, [r3, #0]
 8017400:	f7ff fdc2 	bl	8016f88 <rcl_clock_get_now>
 8017404:	4605      	mov	r5, r0
 8017406:	2800      	cmp	r0, #0
 8017408:	d149      	bne.n	801749e <rcl_timer_call+0xc6>
 801740a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801740e:	2b00      	cmp	r3, #0
 8017410:	db49      	blt.n	80174a6 <rcl_timer_call+0xce>
 8017412:	2605      	movs	r6, #5
 8017414:	6820      	ldr	r0, [r4, #0]
 8017416:	9600      	str	r6, [sp, #0]
 8017418:	3020      	adds	r0, #32
 801741a:	f001 fd21 	bl	8018e60 <__atomic_exchange_8>
 801741e:	6823      	ldr	r3, [r4, #0]
 8017420:	4680      	mov	r8, r0
 8017422:	f3bf 8f5b 	dmb	ish
 8017426:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801742a:	f3bf 8f5b 	dmb	ish
 801742e:	6820      	ldr	r0, [r4, #0]
 8017430:	4689      	mov	r9, r1
 8017432:	4631      	mov	r1, r6
 8017434:	3028      	adds	r0, #40	; 0x28
 8017436:	f001 fca7 	bl	8018d88 <__atomic_load_8>
 801743a:	460f      	mov	r7, r1
 801743c:	4631      	mov	r1, r6
 801743e:	4606      	mov	r6, r0
 8017440:	6820      	ldr	r0, [r4, #0]
 8017442:	3018      	adds	r0, #24
 8017444:	f001 fca0 	bl	8018d88 <__atomic_load_8>
 8017448:	4602      	mov	r2, r0
 801744a:	9804      	ldr	r0, [sp, #16]
 801744c:	460b      	mov	r3, r1
 801744e:	18b6      	adds	r6, r6, r2
 8017450:	f8dd c014 	ldr.w	ip, [sp, #20]
 8017454:	4692      	mov	sl, r2
 8017456:	eb47 0701 	adc.w	r7, r7, r1
 801745a:	4286      	cmp	r6, r0
 801745c:	eb77 010c 	sbcs.w	r1, r7, ip
 8017460:	da04      	bge.n	801746c <rcl_timer_call+0x94>
 8017462:	ea53 0102 	orrs.w	r1, r3, r2
 8017466:	d12e      	bne.n	80174c6 <rcl_timer_call+0xee>
 8017468:	4606      	mov	r6, r0
 801746a:	4667      	mov	r7, ip
 801746c:	6820      	ldr	r0, [r4, #0]
 801746e:	2105      	movs	r1, #5
 8017470:	4632      	mov	r2, r6
 8017472:	463b      	mov	r3, r7
 8017474:	3028      	adds	r0, #40	; 0x28
 8017476:	9100      	str	r1, [sp, #0]
 8017478:	f001 fcbc 	bl	8018df4 <__atomic_store_8>
 801747c:	f1bb 0f00 	cmp.w	fp, #0
 8017480:	d00d      	beq.n	801749e <rcl_timer_call+0xc6>
 8017482:	9a04      	ldr	r2, [sp, #16]
 8017484:	4620      	mov	r0, r4
 8017486:	9b05      	ldr	r3, [sp, #20]
 8017488:	ebb2 0208 	subs.w	r2, r2, r8
 801748c:	eb63 0309 	sbc.w	r3, r3, r9
 8017490:	47d8      	blx	fp
 8017492:	4628      	mov	r0, r5
 8017494:	b007      	add	sp, #28
 8017496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801749a:	f240 3521 	movw	r5, #801	; 0x321
 801749e:	4628      	mov	r0, r5
 80174a0:	b007      	add	sp, #28
 80174a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174a6:	2501      	movs	r5, #1
 80174a8:	4628      	mov	r0, r5
 80174aa:	b007      	add	sp, #28
 80174ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174b0:	f44f 7548 	mov.w	r5, #800	; 0x320
 80174b4:	4628      	mov	r0, r5
 80174b6:	b007      	add	sp, #28
 80174b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174bc:	250b      	movs	r5, #11
 80174be:	4628      	mov	r0, r5
 80174c0:	b007      	add	sp, #28
 80174c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174c6:	1b80      	subs	r0, r0, r6
 80174c8:	eb6c 0107 	sbc.w	r1, ip, r7
 80174cc:	3801      	subs	r0, #1
 80174ce:	f161 0100 	sbc.w	r1, r1, #0
 80174d2:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80174d6:	f7e8 ff1b 	bl	8000310 <__aeabi_ldivmod>
 80174da:	9b02      	ldr	r3, [sp, #8]
 80174dc:	3001      	adds	r0, #1
 80174de:	f141 0100 	adc.w	r1, r1, #0
 80174e2:	fb00 f303 	mul.w	r3, r0, r3
 80174e6:	fb01 330a 	mla	r3, r1, sl, r3
 80174ea:	fba0 0a0a 	umull	r0, sl, r0, sl
 80174ee:	1986      	adds	r6, r0, r6
 80174f0:	4453      	add	r3, sl
 80174f2:	eb43 0707 	adc.w	r7, r3, r7
 80174f6:	e7b9      	b.n	801746c <rcl_timer_call+0x94>

080174f8 <rcl_timer_is_ready>:
 80174f8:	b570      	push	{r4, r5, r6, lr}
 80174fa:	b082      	sub	sp, #8
 80174fc:	b380      	cbz	r0, 8017560 <rcl_timer_is_ready+0x68>
 80174fe:	6803      	ldr	r3, [r0, #0]
 8017500:	4604      	mov	r4, r0
 8017502:	b38b      	cbz	r3, 8017568 <rcl_timer_is_ready+0x70>
 8017504:	460d      	mov	r5, r1
 8017506:	b359      	cbz	r1, 8017560 <rcl_timer_is_ready+0x68>
 8017508:	f3bf 8f5b 	dmb	ish
 801750c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017510:	f3bf 8f5b 	dmb	ish
 8017514:	b953      	cbnz	r3, 801752c <rcl_timer_is_ready+0x34>
 8017516:	6803      	ldr	r3, [r0, #0]
 8017518:	4669      	mov	r1, sp
 801751a:	6818      	ldr	r0, [r3, #0]
 801751c:	f7ff fd34 	bl	8016f88 <rcl_clock_get_now>
 8017520:	4606      	mov	r6, r0
 8017522:	b148      	cbz	r0, 8017538 <rcl_timer_is_ready+0x40>
 8017524:	f240 3321 	movw	r3, #801	; 0x321
 8017528:	4298      	cmp	r0, r3
 801752a:	d102      	bne.n	8017532 <rcl_timer_is_ready+0x3a>
 801752c:	2300      	movs	r3, #0
 801752e:	461e      	mov	r6, r3
 8017530:	702b      	strb	r3, [r5, #0]
 8017532:	4630      	mov	r0, r6
 8017534:	b002      	add	sp, #8
 8017536:	bd70      	pop	{r4, r5, r6, pc}
 8017538:	6820      	ldr	r0, [r4, #0]
 801753a:	2105      	movs	r1, #5
 801753c:	3028      	adds	r0, #40	; 0x28
 801753e:	f001 fc23 	bl	8018d88 <__atomic_load_8>
 8017542:	9b00      	ldr	r3, [sp, #0]
 8017544:	1ac0      	subs	r0, r0, r3
 8017546:	9b01      	ldr	r3, [sp, #4]
 8017548:	eb61 0103 	sbc.w	r1, r1, r3
 801754c:	2801      	cmp	r0, #1
 801754e:	4630      	mov	r0, r6
 8017550:	f171 0300 	sbcs.w	r3, r1, #0
 8017554:	bfb4      	ite	lt
 8017556:	2301      	movlt	r3, #1
 8017558:	2300      	movge	r3, #0
 801755a:	702b      	strb	r3, [r5, #0]
 801755c:	b002      	add	sp, #8
 801755e:	bd70      	pop	{r4, r5, r6, pc}
 8017560:	260b      	movs	r6, #11
 8017562:	4630      	mov	r0, r6
 8017564:	b002      	add	sp, #8
 8017566:	bd70      	pop	{r4, r5, r6, pc}
 8017568:	f44f 7648 	mov.w	r6, #800	; 0x320
 801756c:	e7e1      	b.n	8017532 <rcl_timer_is_ready+0x3a>
 801756e:	bf00      	nop

08017570 <rcl_timer_get_time_until_next_call>:
 8017570:	b570      	push	{r4, r5, r6, lr}
 8017572:	b082      	sub	sp, #8
 8017574:	b330      	cbz	r0, 80175c4 <rcl_timer_get_time_until_next_call+0x54>
 8017576:	6803      	ldr	r3, [r0, #0]
 8017578:	4604      	mov	r4, r0
 801757a:	b33b      	cbz	r3, 80175cc <rcl_timer_get_time_until_next_call+0x5c>
 801757c:	460d      	mov	r5, r1
 801757e:	b309      	cbz	r1, 80175c4 <rcl_timer_get_time_until_next_call+0x54>
 8017580:	f3bf 8f5b 	dmb	ish
 8017584:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017588:	f3bf 8f5b 	dmb	ish
 801758c:	b9ab      	cbnz	r3, 80175ba <rcl_timer_get_time_until_next_call+0x4a>
 801758e:	6803      	ldr	r3, [r0, #0]
 8017590:	4669      	mov	r1, sp
 8017592:	6818      	ldr	r0, [r3, #0]
 8017594:	f7ff fcf8 	bl	8016f88 <rcl_clock_get_now>
 8017598:	4606      	mov	r6, r0
 801759a:	b958      	cbnz	r0, 80175b4 <rcl_timer_get_time_until_next_call+0x44>
 801759c:	6820      	ldr	r0, [r4, #0]
 801759e:	2105      	movs	r1, #5
 80175a0:	3028      	adds	r0, #40	; 0x28
 80175a2:	f001 fbf1 	bl	8018d88 <__atomic_load_8>
 80175a6:	9b00      	ldr	r3, [sp, #0]
 80175a8:	1ac0      	subs	r0, r0, r3
 80175aa:	9b01      	ldr	r3, [sp, #4]
 80175ac:	eb61 0103 	sbc.w	r1, r1, r3
 80175b0:	6028      	str	r0, [r5, #0]
 80175b2:	6069      	str	r1, [r5, #4]
 80175b4:	4630      	mov	r0, r6
 80175b6:	b002      	add	sp, #8
 80175b8:	bd70      	pop	{r4, r5, r6, pc}
 80175ba:	f240 3621 	movw	r6, #801	; 0x321
 80175be:	4630      	mov	r0, r6
 80175c0:	b002      	add	sp, #8
 80175c2:	bd70      	pop	{r4, r5, r6, pc}
 80175c4:	260b      	movs	r6, #11
 80175c6:	4630      	mov	r0, r6
 80175c8:	b002      	add	sp, #8
 80175ca:	bd70      	pop	{r4, r5, r6, pc}
 80175cc:	f44f 7648 	mov.w	r6, #800	; 0x320
 80175d0:	e7f0      	b.n	80175b4 <rcl_timer_get_time_until_next_call+0x44>
 80175d2:	bf00      	nop

080175d4 <rcl_timer_get_guard_condition>:
 80175d4:	b130      	cbz	r0, 80175e4 <rcl_timer_get_guard_condition+0x10>
 80175d6:	6800      	ldr	r0, [r0, #0]
 80175d8:	b120      	cbz	r0, 80175e4 <rcl_timer_get_guard_condition+0x10>
 80175da:	68c3      	ldr	r3, [r0, #12]
 80175dc:	b10b      	cbz	r3, 80175e2 <rcl_timer_get_guard_condition+0xe>
 80175de:	3008      	adds	r0, #8
 80175e0:	4770      	bx	lr
 80175e2:	4618      	mov	r0, r3
 80175e4:	4770      	bx	lr
 80175e6:	bf00      	nop

080175e8 <rcl_validate_enclave_name_with_size>:
 80175e8:	2800      	cmp	r0, #0
 80175ea:	d049      	beq.n	8017680 <rcl_validate_enclave_name_with_size+0x98>
 80175ec:	b570      	push	{r4, r5, r6, lr}
 80175ee:	4615      	mov	r5, r2
 80175f0:	b0c2      	sub	sp, #264	; 0x108
 80175f2:	b19a      	cbz	r2, 801761c <rcl_validate_enclave_name_with_size+0x34>
 80175f4:	461e      	mov	r6, r3
 80175f6:	466a      	mov	r2, sp
 80175f8:	ab01      	add	r3, sp, #4
 80175fa:	460c      	mov	r4, r1
 80175fc:	f002 f870 	bl	80196e0 <rmw_validate_namespace_with_size>
 8017600:	4684      	mov	ip, r0
 8017602:	b9b8      	cbnz	r0, 8017634 <rcl_validate_enclave_name_with_size+0x4c>
 8017604:	9900      	ldr	r1, [sp, #0]
 8017606:	b171      	cbz	r1, 8017626 <rcl_validate_enclave_name_with_size+0x3e>
 8017608:	2907      	cmp	r1, #7
 801760a:	d019      	beq.n	8017640 <rcl_validate_enclave_name_with_size+0x58>
 801760c:	1e4b      	subs	r3, r1, #1
 801760e:	2b05      	cmp	r3, #5
 8017610:	d83a      	bhi.n	8017688 <rcl_validate_enclave_name_with_size+0xa0>
 8017612:	e8df f003 	tbb	[pc, r3]
 8017616:	2926      	.short	0x2926
 8017618:	1d322f2c 	.word	0x1d322f2c
 801761c:	f04f 0c0b 	mov.w	ip, #11
 8017620:	4660      	mov	r0, ip
 8017622:	b042      	add	sp, #264	; 0x108
 8017624:	bd70      	pop	{r4, r5, r6, pc}
 8017626:	2907      	cmp	r1, #7
 8017628:	d00a      	beq.n	8017640 <rcl_validate_enclave_name_with_size+0x58>
 801762a:	2300      	movs	r3, #0
 801762c:	4660      	mov	r0, ip
 801762e:	602b      	str	r3, [r5, #0]
 8017630:	b042      	add	sp, #264	; 0x108
 8017632:	bd70      	pop	{r4, r5, r6, pc}
 8017634:	f7fe fa4a 	bl	8015acc <rcl_convert_rmw_ret_to_rcl_ret>
 8017638:	4684      	mov	ip, r0
 801763a:	4660      	mov	r0, ip
 801763c:	b042      	add	sp, #264	; 0x108
 801763e:	bd70      	pop	{r4, r5, r6, pc}
 8017640:	2cff      	cmp	r4, #255	; 0xff
 8017642:	d9f2      	bls.n	801762a <rcl_validate_enclave_name_with_size+0x42>
 8017644:	6029      	str	r1, [r5, #0]
 8017646:	2e00      	cmp	r6, #0
 8017648:	d0ea      	beq.n	8017620 <rcl_validate_enclave_name_with_size+0x38>
 801764a:	23fe      	movs	r3, #254	; 0xfe
 801764c:	6033      	str	r3, [r6, #0]
 801764e:	e7e7      	b.n	8017620 <rcl_validate_enclave_name_with_size+0x38>
 8017650:	2306      	movs	r3, #6
 8017652:	602b      	str	r3, [r5, #0]
 8017654:	2e00      	cmp	r6, #0
 8017656:	d0e3      	beq.n	8017620 <rcl_validate_enclave_name_with_size+0x38>
 8017658:	9b01      	ldr	r3, [sp, #4]
 801765a:	4660      	mov	r0, ip
 801765c:	6033      	str	r3, [r6, #0]
 801765e:	b042      	add	sp, #264	; 0x108
 8017660:	bd70      	pop	{r4, r5, r6, pc}
 8017662:	2301      	movs	r3, #1
 8017664:	602b      	str	r3, [r5, #0]
 8017666:	e7f5      	b.n	8017654 <rcl_validate_enclave_name_with_size+0x6c>
 8017668:	2302      	movs	r3, #2
 801766a:	602b      	str	r3, [r5, #0]
 801766c:	e7f2      	b.n	8017654 <rcl_validate_enclave_name_with_size+0x6c>
 801766e:	2303      	movs	r3, #3
 8017670:	602b      	str	r3, [r5, #0]
 8017672:	e7ef      	b.n	8017654 <rcl_validate_enclave_name_with_size+0x6c>
 8017674:	2304      	movs	r3, #4
 8017676:	602b      	str	r3, [r5, #0]
 8017678:	e7ec      	b.n	8017654 <rcl_validate_enclave_name_with_size+0x6c>
 801767a:	2305      	movs	r3, #5
 801767c:	602b      	str	r3, [r5, #0]
 801767e:	e7e9      	b.n	8017654 <rcl_validate_enclave_name_with_size+0x6c>
 8017680:	f04f 0c0b 	mov.w	ip, #11
 8017684:	4660      	mov	r0, ip
 8017686:	4770      	bx	lr
 8017688:	460b      	mov	r3, r1
 801768a:	4a04      	ldr	r2, [pc, #16]	; (801769c <rcl_validate_enclave_name_with_size+0xb4>)
 801768c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8017690:	a802      	add	r0, sp, #8
 8017692:	f001 fd31 	bl	80190f8 <rcutils_snprintf>
 8017696:	f04f 0c01 	mov.w	ip, #1
 801769a:	e7c1      	b.n	8017620 <rcl_validate_enclave_name_with_size+0x38>
 801769c:	08020f94 	.word	0x08020f94

080176a0 <rcl_validate_enclave_name>:
 80176a0:	b168      	cbz	r0, 80176be <rcl_validate_enclave_name+0x1e>
 80176a2:	b570      	push	{r4, r5, r6, lr}
 80176a4:	460d      	mov	r5, r1
 80176a6:	4616      	mov	r6, r2
 80176a8:	4604      	mov	r4, r0
 80176aa:	f7e8 fe29 	bl	8000300 <strlen>
 80176ae:	4633      	mov	r3, r6
 80176b0:	4601      	mov	r1, r0
 80176b2:	462a      	mov	r2, r5
 80176b4:	4620      	mov	r0, r4
 80176b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80176ba:	f7ff bf95 	b.w	80175e8 <rcl_validate_enclave_name_with_size>
 80176be:	200b      	movs	r0, #11
 80176c0:	4770      	bx	lr
 80176c2:	bf00      	nop

080176c4 <rcl_get_zero_initialized_wait_set>:
 80176c4:	b510      	push	{r4, lr}
 80176c6:	4c08      	ldr	r4, [pc, #32]	; (80176e8 <rcl_get_zero_initialized_wait_set+0x24>)
 80176c8:	4686      	mov	lr, r0
 80176ca:	4684      	mov	ip, r0
 80176cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80176ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80176d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80176d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80176d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80176da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80176de:	6823      	ldr	r3, [r4, #0]
 80176e0:	4670      	mov	r0, lr
 80176e2:	f8cc 3000 	str.w	r3, [ip]
 80176e6:	bd10      	pop	{r4, pc}
 80176e8:	08020ff4 	.word	0x08020ff4

080176ec <rcl_wait_set_is_valid>:
 80176ec:	b118      	cbz	r0, 80176f6 <rcl_wait_set_is_valid+0xa>
 80176ee:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80176f0:	3800      	subs	r0, #0
 80176f2:	bf18      	it	ne
 80176f4:	2001      	movne	r0, #1
 80176f6:	4770      	bx	lr

080176f8 <rcl_wait_set_fini>:
 80176f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176fc:	b082      	sub	sp, #8
 80176fe:	2800      	cmp	r0, #0
 8017700:	f000 8095 	beq.w	801782e <rcl_wait_set_fini+0x136>
 8017704:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8017706:	4604      	mov	r4, r0
 8017708:	2e00      	cmp	r6, #0
 801770a:	f000 808c 	beq.w	8017826 <rcl_wait_set_fini+0x12e>
 801770e:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8017710:	f003 fae0 	bl	801acd4 <rmw_destroy_wait_set>
 8017714:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017716:	1e06      	subs	r6, r0, #0
 8017718:	bf18      	it	ne
 801771a:	f44f 7661 	movne.w	r6, #900	; 0x384
 801771e:	2d00      	cmp	r5, #0
 8017720:	f000 8081 	beq.w	8017826 <rcl_wait_set_fini+0x12e>
 8017724:	2700      	movs	r7, #0
 8017726:	6820      	ldr	r0, [r4, #0]
 8017728:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801772c:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801772e:	6067      	str	r7, [r4, #4]
 8017730:	602f      	str	r7, [r5, #0]
 8017732:	b120      	cbz	r0, 801773e <rcl_wait_set_fini+0x46>
 8017734:	9101      	str	r1, [sp, #4]
 8017736:	47c0      	blx	r8
 8017738:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801773a:	9901      	ldr	r1, [sp, #4]
 801773c:	6027      	str	r7, [r4, #0]
 801773e:	68a8      	ldr	r0, [r5, #8]
 8017740:	b120      	cbz	r0, 801774c <rcl_wait_set_fini+0x54>
 8017742:	47c0      	blx	r8
 8017744:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017746:	2300      	movs	r3, #0
 8017748:	e9c5 3301 	strd	r3, r3, [r5, #4]
 801774c:	f04f 0800 	mov.w	r8, #0
 8017750:	68a0      	ldr	r0, [r4, #8]
 8017752:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8017754:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8017756:	f8c4 800c 	str.w	r8, [r4, #12]
 801775a:	f8c5 800c 	str.w	r8, [r5, #12]
 801775e:	b128      	cbz	r0, 801776c <rcl_wait_set_fini+0x74>
 8017760:	47b8      	blx	r7
 8017762:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017764:	f8c4 8008 	str.w	r8, [r4, #8]
 8017768:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801776a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801776c:	f04f 0800 	mov.w	r8, #0
 8017770:	6968      	ldr	r0, [r5, #20]
 8017772:	f8c5 8010 	str.w	r8, [r5, #16]
 8017776:	b128      	cbz	r0, 8017784 <rcl_wait_set_fini+0x8c>
 8017778:	47b8      	blx	r7
 801777a:	f8c5 8014 	str.w	r8, [r5, #20]
 801777e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017780:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8017782:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8017784:	f04f 0800 	mov.w	r8, #0
 8017788:	6920      	ldr	r0, [r4, #16]
 801778a:	f8c4 8014 	str.w	r8, [r4, #20]
 801778e:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 8017792:	b128      	cbz	r0, 80177a0 <rcl_wait_set_fini+0xa8>
 8017794:	47b8      	blx	r7
 8017796:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017798:	f8c4 8010 	str.w	r8, [r4, #16]
 801779c:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801779e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80177a0:	f04f 0800 	mov.w	r8, #0
 80177a4:	69a0      	ldr	r0, [r4, #24]
 80177a6:	f8c4 801c 	str.w	r8, [r4, #28]
 80177aa:	f8c5 8018 	str.w	r8, [r5, #24]
 80177ae:	b128      	cbz	r0, 80177bc <rcl_wait_set_fini+0xc4>
 80177b0:	9101      	str	r1, [sp, #4]
 80177b2:	47b8      	blx	r7
 80177b4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80177b6:	9901      	ldr	r1, [sp, #4]
 80177b8:	f8c4 8018 	str.w	r8, [r4, #24]
 80177bc:	6a28      	ldr	r0, [r5, #32]
 80177be:	b120      	cbz	r0, 80177ca <rcl_wait_set_fini+0xd2>
 80177c0:	47b8      	blx	r7
 80177c2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80177c4:	2300      	movs	r3, #0
 80177c6:	e9c5 3307 	strd	r3, r3, [r5, #28]
 80177ca:	2700      	movs	r7, #0
 80177cc:	6a20      	ldr	r0, [r4, #32]
 80177ce:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 80177d2:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80177d4:	6267      	str	r7, [r4, #36]	; 0x24
 80177d6:	626f      	str	r7, [r5, #36]	; 0x24
 80177d8:	b120      	cbz	r0, 80177e4 <rcl_wait_set_fini+0xec>
 80177da:	9101      	str	r1, [sp, #4]
 80177dc:	47c0      	blx	r8
 80177de:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80177e0:	9901      	ldr	r1, [sp, #4]
 80177e2:	6227      	str	r7, [r4, #32]
 80177e4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80177e6:	b120      	cbz	r0, 80177f2 <rcl_wait_set_fini+0xfa>
 80177e8:	47c0      	blx	r8
 80177ea:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80177ec:	2300      	movs	r3, #0
 80177ee:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 80177f2:	2700      	movs	r7, #0
 80177f4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80177f6:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 80177fa:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80177fc:	62e7      	str	r7, [r4, #44]	; 0x2c
 80177fe:	632f      	str	r7, [r5, #48]	; 0x30
 8017800:	b120      	cbz	r0, 801780c <rcl_wait_set_fini+0x114>
 8017802:	9101      	str	r1, [sp, #4]
 8017804:	47c0      	blx	r8
 8017806:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017808:	9901      	ldr	r1, [sp, #4]
 801780a:	62a7      	str	r7, [r4, #40]	; 0x28
 801780c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801780e:	b120      	cbz	r0, 801781a <rcl_wait_set_fini+0x122>
 8017810:	47c0      	blx	r8
 8017812:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017814:	2300      	movs	r3, #0
 8017816:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 801781a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801781c:	4628      	mov	r0, r5
 801781e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8017820:	4798      	blx	r3
 8017822:	2300      	movs	r3, #0
 8017824:	6323      	str	r3, [r4, #48]	; 0x30
 8017826:	4630      	mov	r0, r6
 8017828:	b002      	add	sp, #8
 801782a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801782e:	260b      	movs	r6, #11
 8017830:	4630      	mov	r0, r6
 8017832:	b002      	add	sp, #8
 8017834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017838 <rcl_wait_set_add_subscription>:
 8017838:	b318      	cbz	r0, 8017882 <rcl_wait_set_add_subscription+0x4a>
 801783a:	b538      	push	{r3, r4, r5, lr}
 801783c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801783e:	4604      	mov	r4, r0
 8017840:	b30b      	cbz	r3, 8017886 <rcl_wait_set_add_subscription+0x4e>
 8017842:	b319      	cbz	r1, 801788c <rcl_wait_set_add_subscription+0x54>
 8017844:	681d      	ldr	r5, [r3, #0]
 8017846:	6840      	ldr	r0, [r0, #4]
 8017848:	4285      	cmp	r5, r0
 801784a:	d217      	bcs.n	801787c <rcl_wait_set_add_subscription+0x44>
 801784c:	1c68      	adds	r0, r5, #1
 801784e:	6018      	str	r0, [r3, #0]
 8017850:	6823      	ldr	r3, [r4, #0]
 8017852:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8017856:	b102      	cbz	r2, 801785a <rcl_wait_set_add_subscription+0x22>
 8017858:	6015      	str	r5, [r2, #0]
 801785a:	4608      	mov	r0, r1
 801785c:	f7ff fad8 	bl	8016e10 <rcl_subscription_get_rmw_handle>
 8017860:	b150      	cbz	r0, 8017878 <rcl_wait_set_add_subscription+0x40>
 8017862:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017864:	6842      	ldr	r2, [r0, #4]
 8017866:	2000      	movs	r0, #0
 8017868:	689b      	ldr	r3, [r3, #8]
 801786a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801786e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017870:	6853      	ldr	r3, [r2, #4]
 8017872:	3301      	adds	r3, #1
 8017874:	6053      	str	r3, [r2, #4]
 8017876:	bd38      	pop	{r3, r4, r5, pc}
 8017878:	2001      	movs	r0, #1
 801787a:	bd38      	pop	{r3, r4, r5, pc}
 801787c:	f240 3086 	movw	r0, #902	; 0x386
 8017880:	bd38      	pop	{r3, r4, r5, pc}
 8017882:	200b      	movs	r0, #11
 8017884:	4770      	bx	lr
 8017886:	f44f 7061 	mov.w	r0, #900	; 0x384
 801788a:	bd38      	pop	{r3, r4, r5, pc}
 801788c:	200b      	movs	r0, #11
 801788e:	bd38      	pop	{r3, r4, r5, pc}

08017890 <rcl_wait_set_clear>:
 8017890:	2800      	cmp	r0, #0
 8017892:	d074      	beq.n	801797e <rcl_wait_set_clear+0xee>
 8017894:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017896:	b510      	push	{r4, lr}
 8017898:	4604      	mov	r4, r0
 801789a:	2b00      	cmp	r3, #0
 801789c:	d071      	beq.n	8017982 <rcl_wait_set_clear+0xf2>
 801789e:	6800      	ldr	r0, [r0, #0]
 80178a0:	b138      	cbz	r0, 80178b2 <rcl_wait_set_clear+0x22>
 80178a2:	6862      	ldr	r2, [r4, #4]
 80178a4:	2100      	movs	r1, #0
 80178a6:	0092      	lsls	r2, r2, #2
 80178a8:	f006 fff0 	bl	801e88c <memset>
 80178ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80178ae:	2200      	movs	r2, #0
 80178b0:	601a      	str	r2, [r3, #0]
 80178b2:	68a0      	ldr	r0, [r4, #8]
 80178b4:	b138      	cbz	r0, 80178c6 <rcl_wait_set_clear+0x36>
 80178b6:	68e2      	ldr	r2, [r4, #12]
 80178b8:	2100      	movs	r1, #0
 80178ba:	0092      	lsls	r2, r2, #2
 80178bc:	f006 ffe6 	bl	801e88c <memset>
 80178c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80178c2:	2200      	movs	r2, #0
 80178c4:	60da      	str	r2, [r3, #12]
 80178c6:	69a0      	ldr	r0, [r4, #24]
 80178c8:	b138      	cbz	r0, 80178da <rcl_wait_set_clear+0x4a>
 80178ca:	69e2      	ldr	r2, [r4, #28]
 80178cc:	2100      	movs	r1, #0
 80178ce:	0092      	lsls	r2, r2, #2
 80178d0:	f006 ffdc 	bl	801e88c <memset>
 80178d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80178d6:	2200      	movs	r2, #0
 80178d8:	619a      	str	r2, [r3, #24]
 80178da:	6a20      	ldr	r0, [r4, #32]
 80178dc:	b138      	cbz	r0, 80178ee <rcl_wait_set_clear+0x5e>
 80178de:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80178e0:	2100      	movs	r1, #0
 80178e2:	0092      	lsls	r2, r2, #2
 80178e4:	f006 ffd2 	bl	801e88c <memset>
 80178e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80178ea:	2200      	movs	r2, #0
 80178ec:	625a      	str	r2, [r3, #36]	; 0x24
 80178ee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80178f0:	b138      	cbz	r0, 8017902 <rcl_wait_set_clear+0x72>
 80178f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80178f4:	2100      	movs	r1, #0
 80178f6:	0092      	lsls	r2, r2, #2
 80178f8:	f006 ffc8 	bl	801e88c <memset>
 80178fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80178fe:	2200      	movs	r2, #0
 8017900:	631a      	str	r2, [r3, #48]	; 0x30
 8017902:	6920      	ldr	r0, [r4, #16]
 8017904:	b138      	cbz	r0, 8017916 <rcl_wait_set_clear+0x86>
 8017906:	6962      	ldr	r2, [r4, #20]
 8017908:	2100      	movs	r1, #0
 801790a:	0092      	lsls	r2, r2, #2
 801790c:	f006 ffbe 	bl	801e88c <memset>
 8017910:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017912:	2200      	movs	r2, #0
 8017914:	641a      	str	r2, [r3, #64]	; 0x40
 8017916:	6898      	ldr	r0, [r3, #8]
 8017918:	b138      	cbz	r0, 801792a <rcl_wait_set_clear+0x9a>
 801791a:	685a      	ldr	r2, [r3, #4]
 801791c:	2100      	movs	r1, #0
 801791e:	0092      	lsls	r2, r2, #2
 8017920:	f006 ffb4 	bl	801e88c <memset>
 8017924:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017926:	2200      	movs	r2, #0
 8017928:	605a      	str	r2, [r3, #4]
 801792a:	6958      	ldr	r0, [r3, #20]
 801792c:	b138      	cbz	r0, 801793e <rcl_wait_set_clear+0xae>
 801792e:	691a      	ldr	r2, [r3, #16]
 8017930:	2100      	movs	r1, #0
 8017932:	0092      	lsls	r2, r2, #2
 8017934:	f006 ffaa 	bl	801e88c <memset>
 8017938:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801793a:	2200      	movs	r2, #0
 801793c:	611a      	str	r2, [r3, #16]
 801793e:	6a18      	ldr	r0, [r3, #32]
 8017940:	b138      	cbz	r0, 8017952 <rcl_wait_set_clear+0xc2>
 8017942:	69da      	ldr	r2, [r3, #28]
 8017944:	2100      	movs	r1, #0
 8017946:	0092      	lsls	r2, r2, #2
 8017948:	f006 ffa0 	bl	801e88c <memset>
 801794c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801794e:	2200      	movs	r2, #0
 8017950:	61da      	str	r2, [r3, #28]
 8017952:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8017954:	b138      	cbz	r0, 8017966 <rcl_wait_set_clear+0xd6>
 8017956:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017958:	2100      	movs	r1, #0
 801795a:	0092      	lsls	r2, r2, #2
 801795c:	f006 ff96 	bl	801e88c <memset>
 8017960:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017962:	2200      	movs	r2, #0
 8017964:	629a      	str	r2, [r3, #40]	; 0x28
 8017966:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8017968:	b140      	cbz	r0, 801797c <rcl_wait_set_clear+0xec>
 801796a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801796c:	2100      	movs	r1, #0
 801796e:	0092      	lsls	r2, r2, #2
 8017970:	f006 ff8c 	bl	801e88c <memset>
 8017974:	2300      	movs	r3, #0
 8017976:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017978:	4618      	mov	r0, r3
 801797a:	6353      	str	r3, [r2, #52]	; 0x34
 801797c:	bd10      	pop	{r4, pc}
 801797e:	200b      	movs	r0, #11
 8017980:	4770      	bx	lr
 8017982:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017986:	bd10      	pop	{r4, pc}

08017988 <rcl_wait_set_resize>:
 8017988:	2800      	cmp	r0, #0
 801798a:	f000 8180 	beq.w	8017c8e <rcl_wait_set_resize+0x306>
 801798e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017992:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8017994:	b083      	sub	sp, #12
 8017996:	4605      	mov	r5, r0
 8017998:	2c00      	cmp	r4, #0
 801799a:	f000 817a 	beq.w	8017c92 <rcl_wait_set_resize+0x30a>
 801799e:	f04f 0900 	mov.w	r9, #0
 80179a2:	461f      	mov	r7, r3
 80179a4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80179a8:	4688      	mov	r8, r1
 80179aa:	4616      	mov	r6, r2
 80179ac:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	; 0x4c
 80179b0:	f8c0 9004 	str.w	r9, [r0, #4]
 80179b4:	f8c4 9000 	str.w	r9, [r4]
 80179b8:	2900      	cmp	r1, #0
 80179ba:	f000 80bf 	beq.w	8017b3c <rcl_wait_set_resize+0x1b4>
 80179be:	008c      	lsls	r4, r1, #2
 80179c0:	4652      	mov	r2, sl
 80179c2:	6800      	ldr	r0, [r0, #0]
 80179c4:	4621      	mov	r1, r4
 80179c6:	9301      	str	r3, [sp, #4]
 80179c8:	4798      	blx	r3
 80179ca:	9b01      	ldr	r3, [sp, #4]
 80179cc:	6028      	str	r0, [r5, #0]
 80179ce:	2800      	cmp	r0, #0
 80179d0:	f000 80f6 	beq.w	8017bc0 <rcl_wait_set_resize+0x238>
 80179d4:	4622      	mov	r2, r4
 80179d6:	4649      	mov	r1, r9
 80179d8:	9301      	str	r3, [sp, #4]
 80179da:	f006 ff57 	bl	801e88c <memset>
 80179de:	f8c5 8004 	str.w	r8, [r5, #4]
 80179e2:	4652      	mov	r2, sl
 80179e4:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 80179e8:	4621      	mov	r1, r4
 80179ea:	9b01      	ldr	r3, [sp, #4]
 80179ec:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80179f0:	f8c8 9004 	str.w	r9, [r8, #4]
 80179f4:	4798      	blx	r3
 80179f6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80179f8:	f8c8 0008 	str.w	r0, [r8, #8]
 80179fc:	689b      	ldr	r3, [r3, #8]
 80179fe:	2b00      	cmp	r3, #0
 8017a00:	f000 814a 	beq.w	8017c98 <rcl_wait_set_resize+0x310>
 8017a04:	4622      	mov	r2, r4
 8017a06:	4649      	mov	r1, r9
 8017a08:	4618      	mov	r0, r3
 8017a0a:	f006 ff3f 	bl	801e88c <memset>
 8017a0e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017a10:	f04f 0800 	mov.w	r8, #0
 8017a14:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8017a18:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
 8017a1c:	f8c5 800c 	str.w	r8, [r5, #12]
 8017a20:	f8c4 800c 	str.w	r8, [r4, #12]
 8017a24:	2e00      	cmp	r6, #0
 8017a26:	f040 809b 	bne.w	8017b60 <rcl_wait_set_resize+0x1d8>
 8017a2a:	68a8      	ldr	r0, [r5, #8]
 8017a2c:	b128      	cbz	r0, 8017a3a <rcl_wait_set_resize+0xb2>
 8017a2e:	4649      	mov	r1, r9
 8017a30:	4790      	blx	r2
 8017a32:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017a34:	60ae      	str	r6, [r5, #8]
 8017a36:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8017a3a:	f04f 0800 	mov.w	r8, #0
 8017a3e:	19f6      	adds	r6, r6, r7
 8017a40:	f8c4 8010 	str.w	r8, [r4, #16]
 8017a44:	f040 80a2 	bne.w	8017b8c <rcl_wait_set_resize+0x204>
 8017a48:	6960      	ldr	r0, [r4, #20]
 8017a4a:	b130      	cbz	r0, 8017a5a <rcl_wait_set_resize+0xd2>
 8017a4c:	4649      	mov	r1, r9
 8017a4e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8017a50:	4798      	blx	r3
 8017a52:	6166      	str	r6, [r4, #20]
 8017a54:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017a56:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8017a5a:	2600      	movs	r6, #0
 8017a5c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8017a60:	616e      	str	r6, [r5, #20]
 8017a62:	6426      	str	r6, [r4, #64]	; 0x40
 8017a64:	2f00      	cmp	r7, #0
 8017a66:	f040 80af 	bne.w	8017bc8 <rcl_wait_set_resize+0x240>
 8017a6a:	6928      	ldr	r0, [r5, #16]
 8017a6c:	b138      	cbz	r0, 8017a7e <rcl_wait_set_resize+0xf6>
 8017a6e:	4649      	mov	r1, r9
 8017a70:	47d0      	blx	sl
 8017a72:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017a74:	612f      	str	r7, [r5, #16]
 8017a76:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8017a7a:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8017a7e:	2600      	movs	r6, #0
 8017a80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017a82:	61ee      	str	r6, [r5, #28]
 8017a84:	61a6      	str	r6, [r4, #24]
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	f040 8093 	bne.w	8017bb2 <rcl_wait_set_resize+0x22a>
 8017a8c:	69a8      	ldr	r0, [r5, #24]
 8017a8e:	b120      	cbz	r0, 8017a9a <rcl_wait_set_resize+0x112>
 8017a90:	4649      	mov	r1, r9
 8017a92:	47d0      	blx	sl
 8017a94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017a96:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017a98:	61ab      	str	r3, [r5, #24]
 8017a9a:	6a20      	ldr	r0, [r4, #32]
 8017a9c:	b128      	cbz	r0, 8017aaa <rcl_wait_set_resize+0x122>
 8017a9e:	4649      	mov	r1, r9
 8017aa0:	47d0      	blx	sl
 8017aa2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017aa4:	2300      	movs	r3, #0
 8017aa6:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8017aaa:	2600      	movs	r6, #0
 8017aac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017aae:	6da7      	ldr	r7, [r4, #88]	; 0x58
 8017ab0:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 8017ab4:	626e      	str	r6, [r5, #36]	; 0x24
 8017ab6:	6266      	str	r6, [r4, #36]	; 0x24
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	f000 8098 	beq.w	8017bee <rcl_wait_set_resize+0x266>
 8017abe:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8017ac2:	463a      	mov	r2, r7
 8017ac4:	6a28      	ldr	r0, [r5, #32]
 8017ac6:	4651      	mov	r1, sl
 8017ac8:	47c8      	blx	r9
 8017aca:	6228      	str	r0, [r5, #32]
 8017acc:	2800      	cmp	r0, #0
 8017ace:	d077      	beq.n	8017bc0 <rcl_wait_set_resize+0x238>
 8017ad0:	4652      	mov	r2, sl
 8017ad2:	4631      	mov	r1, r6
 8017ad4:	f006 feda 	bl	801e88c <memset>
 8017ad8:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017ada:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017adc:	463a      	mov	r2, r7
 8017ade:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8017ae0:	4651      	mov	r1, sl
 8017ae2:	626b      	str	r3, [r5, #36]	; 0x24
 8017ae4:	62a6      	str	r6, [r4, #40]	; 0x28
 8017ae6:	47c8      	blx	r9
 8017ae8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017aea:	62e0      	str	r0, [r4, #44]	; 0x2c
 8017aec:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8017aee:	2c00      	cmp	r4, #0
 8017af0:	f000 80f2 	beq.w	8017cd8 <rcl_wait_set_resize+0x350>
 8017af4:	4620      	mov	r0, r4
 8017af6:	4652      	mov	r2, sl
 8017af8:	4631      	mov	r1, r6
 8017afa:	f006 fec7 	bl	801e88c <memset>
 8017afe:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017b00:	2600      	movs	r6, #0
 8017b02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017b04:	6da7      	ldr	r7, [r4, #88]	; 0x58
 8017b06:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 8017b0a:	62ee      	str	r6, [r5, #44]	; 0x2c
 8017b0c:	6326      	str	r6, [r4, #48]	; 0x30
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	f040 8097 	bne.w	8017c42 <rcl_wait_set_resize+0x2ba>
 8017b14:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8017b16:	b120      	cbz	r0, 8017b22 <rcl_wait_set_resize+0x19a>
 8017b18:	4639      	mov	r1, r7
 8017b1a:	47c0      	blx	r8
 8017b1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017b1e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017b20:	62ab      	str	r3, [r5, #40]	; 0x28
 8017b22:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8017b24:	2800      	cmp	r0, #0
 8017b26:	d04c      	beq.n	8017bc2 <rcl_wait_set_resize+0x23a>
 8017b28:	4639      	mov	r1, r7
 8017b2a:	47c0      	blx	r8
 8017b2c:	2300      	movs	r3, #0
 8017b2e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8017b30:	4618      	mov	r0, r3
 8017b32:	e9c2 330d 	strd	r3, r3, [r2, #52]	; 0x34
 8017b36:	b003      	add	sp, #12
 8017b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b3c:	6800      	ldr	r0, [r0, #0]
 8017b3e:	b120      	cbz	r0, 8017b4a <rcl_wait_set_resize+0x1c2>
 8017b40:	4651      	mov	r1, sl
 8017b42:	47d8      	blx	fp
 8017b44:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017b46:	f8c5 8000 	str.w	r8, [r5]
 8017b4a:	68a0      	ldr	r0, [r4, #8]
 8017b4c:	2800      	cmp	r0, #0
 8017b4e:	f43f af5f 	beq.w	8017a10 <rcl_wait_set_resize+0x88>
 8017b52:	4651      	mov	r1, sl
 8017b54:	47d8      	blx	fp
 8017b56:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017b58:	2300      	movs	r3, #0
 8017b5a:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8017b5e:	e757      	b.n	8017a10 <rcl_wait_set_resize+0x88>
 8017b60:	00b4      	lsls	r4, r6, #2
 8017b62:	464a      	mov	r2, r9
 8017b64:	68a8      	ldr	r0, [r5, #8]
 8017b66:	4621      	mov	r1, r4
 8017b68:	4798      	blx	r3
 8017b6a:	60a8      	str	r0, [r5, #8]
 8017b6c:	b340      	cbz	r0, 8017bc0 <rcl_wait_set_resize+0x238>
 8017b6e:	4622      	mov	r2, r4
 8017b70:	4641      	mov	r1, r8
 8017b72:	f006 fe8b 	bl	801e88c <memset>
 8017b76:	f04f 0800 	mov.w	r8, #0
 8017b7a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017b7c:	60ee      	str	r6, [r5, #12]
 8017b7e:	19f6      	adds	r6, r6, r7
 8017b80:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8017b84:	f8c4 8010 	str.w	r8, [r4, #16]
 8017b88:	f43f af5e 	beq.w	8017a48 <rcl_wait_set_resize+0xc0>
 8017b8c:	00b6      	lsls	r6, r6, #2
 8017b8e:	464a      	mov	r2, r9
 8017b90:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8017b92:	6960      	ldr	r0, [r4, #20]
 8017b94:	4631      	mov	r1, r6
 8017b96:	4798      	blx	r3
 8017b98:	4681      	mov	r9, r0
 8017b9a:	6160      	str	r0, [r4, #20]
 8017b9c:	2800      	cmp	r0, #0
 8017b9e:	f000 8084 	beq.w	8017caa <rcl_wait_set_resize+0x322>
 8017ba2:	4632      	mov	r2, r6
 8017ba4:	4641      	mov	r1, r8
 8017ba6:	f006 fe71 	bl	801e88c <memset>
 8017baa:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017bac:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8017bb0:	e753      	b.n	8017a5a <rcl_wait_set_resize+0xd2>
 8017bb2:	009c      	lsls	r4, r3, #2
 8017bb4:	464a      	mov	r2, r9
 8017bb6:	69a8      	ldr	r0, [r5, #24]
 8017bb8:	4621      	mov	r1, r4
 8017bba:	47c0      	blx	r8
 8017bbc:	61a8      	str	r0, [r5, #24]
 8017bbe:	bb40      	cbnz	r0, 8017c12 <rcl_wait_set_resize+0x28a>
 8017bc0:	200a      	movs	r0, #10
 8017bc2:	b003      	add	sp, #12
 8017bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017bc8:	00bc      	lsls	r4, r7, #2
 8017bca:	464a      	mov	r2, r9
 8017bcc:	6928      	ldr	r0, [r5, #16]
 8017bce:	4621      	mov	r1, r4
 8017bd0:	47c0      	blx	r8
 8017bd2:	6128      	str	r0, [r5, #16]
 8017bd4:	2800      	cmp	r0, #0
 8017bd6:	d0f3      	beq.n	8017bc0 <rcl_wait_set_resize+0x238>
 8017bd8:	4622      	mov	r2, r4
 8017bda:	4631      	mov	r1, r6
 8017bdc:	f006 fe56 	bl	801e88c <memset>
 8017be0:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017be2:	616f      	str	r7, [r5, #20]
 8017be4:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8017be8:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8017bec:	e747      	b.n	8017a7e <rcl_wait_set_resize+0xf6>
 8017bee:	6a28      	ldr	r0, [r5, #32]
 8017bf0:	b120      	cbz	r0, 8017bfc <rcl_wait_set_resize+0x274>
 8017bf2:	4639      	mov	r1, r7
 8017bf4:	47c0      	blx	r8
 8017bf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017bf8:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017bfa:	622b      	str	r3, [r5, #32]
 8017bfc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8017bfe:	2800      	cmp	r0, #0
 8017c00:	f43f af7e 	beq.w	8017b00 <rcl_wait_set_resize+0x178>
 8017c04:	4639      	mov	r1, r7
 8017c06:	47c0      	blx	r8
 8017c08:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017c0a:	2300      	movs	r3, #0
 8017c0c:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8017c10:	e776      	b.n	8017b00 <rcl_wait_set_resize+0x178>
 8017c12:	4622      	mov	r2, r4
 8017c14:	4631      	mov	r1, r6
 8017c16:	f006 fe39 	bl	801e88c <memset>
 8017c1a:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 8017c1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017c1e:	464a      	mov	r2, r9
 8017c20:	6a38      	ldr	r0, [r7, #32]
 8017c22:	4621      	mov	r1, r4
 8017c24:	61eb      	str	r3, [r5, #28]
 8017c26:	61fe      	str	r6, [r7, #28]
 8017c28:	47c0      	blx	r8
 8017c2a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017c2c:	6238      	str	r0, [r7, #32]
 8017c2e:	6a1f      	ldr	r7, [r3, #32]
 8017c30:	2f00      	cmp	r7, #0
 8017c32:	d04a      	beq.n	8017cca <rcl_wait_set_resize+0x342>
 8017c34:	4622      	mov	r2, r4
 8017c36:	4631      	mov	r1, r6
 8017c38:	4638      	mov	r0, r7
 8017c3a:	f006 fe27 	bl	801e88c <memset>
 8017c3e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017c40:	e733      	b.n	8017aaa <rcl_wait_set_resize+0x122>
 8017c42:	009c      	lsls	r4, r3, #2
 8017c44:	463a      	mov	r2, r7
 8017c46:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8017c48:	4621      	mov	r1, r4
 8017c4a:	47c8      	blx	r9
 8017c4c:	62a8      	str	r0, [r5, #40]	; 0x28
 8017c4e:	2800      	cmp	r0, #0
 8017c50:	d0b6      	beq.n	8017bc0 <rcl_wait_set_resize+0x238>
 8017c52:	4622      	mov	r2, r4
 8017c54:	4631      	mov	r1, r6
 8017c56:	f006 fe19 	bl	801e88c <memset>
 8017c5a:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8017c5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017c60:	463a      	mov	r2, r7
 8017c62:	4621      	mov	r1, r4
 8017c64:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 8017c68:	62eb      	str	r3, [r5, #44]	; 0x2c
 8017c6a:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
 8017c6e:	47c8      	blx	r9
 8017c70:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017c72:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 8017c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017c78:	2b00      	cmp	r3, #0
 8017c7a:	d034      	beq.n	8017ce6 <rcl_wait_set_resize+0x35e>
 8017c7c:	4622      	mov	r2, r4
 8017c7e:	4631      	mov	r1, r6
 8017c80:	4618      	mov	r0, r3
 8017c82:	f006 fe03 	bl	801e88c <memset>
 8017c86:	4630      	mov	r0, r6
 8017c88:	b003      	add	sp, #12
 8017c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c8e:	200b      	movs	r0, #11
 8017c90:	4770      	bx	lr
 8017c92:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017c96:	e794      	b.n	8017bc2 <rcl_wait_set_resize+0x23a>
 8017c98:	6828      	ldr	r0, [r5, #0]
 8017c9a:	4651      	mov	r1, sl
 8017c9c:	9301      	str	r3, [sp, #4]
 8017c9e:	47d8      	blx	fp
 8017ca0:	9b01      	ldr	r3, [sp, #4]
 8017ca2:	200a      	movs	r0, #10
 8017ca4:	e9c5 3300 	strd	r3, r3, [r5]
 8017ca8:	e78b      	b.n	8017bc2 <rcl_wait_set_resize+0x23a>
 8017caa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017cac:	68a8      	ldr	r0, [r5, #8]
 8017cae:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8017cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017cb2:	4798      	blx	r3
 8017cb4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017cb6:	6928      	ldr	r0, [r5, #16]
 8017cb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017cba:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8017cbc:	e9c5 9902 	strd	r9, r9, [r5, #8]
 8017cc0:	4790      	blx	r2
 8017cc2:	200a      	movs	r0, #10
 8017cc4:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8017cc8:	e77b      	b.n	8017bc2 <rcl_wait_set_resize+0x23a>
 8017cca:	69a8      	ldr	r0, [r5, #24]
 8017ccc:	4649      	mov	r1, r9
 8017cce:	47d0      	blx	sl
 8017cd0:	200a      	movs	r0, #10
 8017cd2:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8017cd6:	e774      	b.n	8017bc2 <rcl_wait_set_resize+0x23a>
 8017cd8:	6a28      	ldr	r0, [r5, #32]
 8017cda:	4639      	mov	r1, r7
 8017cdc:	47c0      	blx	r8
 8017cde:	200a      	movs	r0, #10
 8017ce0:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8017ce4:	e76d      	b.n	8017bc2 <rcl_wait_set_resize+0x23a>
 8017ce6:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8017ce8:	4639      	mov	r1, r7
 8017cea:	9301      	str	r3, [sp, #4]
 8017cec:	47c0      	blx	r8
 8017cee:	9b01      	ldr	r3, [sp, #4]
 8017cf0:	200a      	movs	r0, #10
 8017cf2:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8017cf6:	e764      	b.n	8017bc2 <rcl_wait_set_resize+0x23a>

08017cf8 <rcl_wait_set_init>:
 8017cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cfc:	b085      	sub	sp, #20
 8017cfe:	4605      	mov	r5, r0
 8017d00:	460e      	mov	r6, r1
 8017d02:	4617      	mov	r7, r2
 8017d04:	a812      	add	r0, sp, #72	; 0x48
 8017d06:	4698      	mov	r8, r3
 8017d08:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 8017d0c:	f7f7 f820 	bl	800ed50 <rcutils_allocator_is_valid>
 8017d10:	2d00      	cmp	r5, #0
 8017d12:	d072      	beq.n	8017dfa <rcl_wait_set_init+0x102>
 8017d14:	f080 0001 	eor.w	r0, r0, #1
 8017d18:	b2c0      	uxtb	r0, r0
 8017d1a:	2800      	cmp	r0, #0
 8017d1c:	d16d      	bne.n	8017dfa <rcl_wait_set_init+0x102>
 8017d1e:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8017d22:	f1ba 0f00 	cmp.w	sl, #0
 8017d26:	d004      	beq.n	8017d32 <rcl_wait_set_init+0x3a>
 8017d28:	2464      	movs	r4, #100	; 0x64
 8017d2a:	4620      	mov	r0, r4
 8017d2c:	b005      	add	sp, #20
 8017d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d32:	f1b9 0f00 	cmp.w	r9, #0
 8017d36:	d060      	beq.n	8017dfa <rcl_wait_set_init+0x102>
 8017d38:	4648      	mov	r0, r9
 8017d3a:	f7fd fee5 	bl	8015b08 <rcl_context_is_valid>
 8017d3e:	2800      	cmp	r0, #0
 8017d40:	d068      	beq.n	8017e14 <rcl_wait_set_init+0x11c>
 8017d42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017d44:	205c      	movs	r0, #92	; 0x5c
 8017d46:	9916      	ldr	r1, [sp, #88]	; 0x58
 8017d48:	4798      	blx	r3
 8017d4a:	6328      	str	r0, [r5, #48]	; 0x30
 8017d4c:	2800      	cmp	r0, #0
 8017d4e:	d063      	beq.n	8017e18 <rcl_wait_set_init+0x120>
 8017d50:	225c      	movs	r2, #92	; 0x5c
 8017d52:	4651      	mov	r1, sl
 8017d54:	f006 fd9a 	bl	801e88c <memset>
 8017d58:	ac12      	add	r4, sp, #72	; 0x48
 8017d5a:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
 8017d5e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8017d62:	f10b 0c48 	add.w	ip, fp, #72	; 0x48
 8017d66:	f8cb 9044 	str.w	r9, [fp, #68]	; 0x44
 8017d6a:	eb03 0e02 	add.w	lr, r3, r2
 8017d6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017d70:	f8d9 9000 	ldr.w	r9, [r9]
 8017d74:	449e      	add	lr, r3
 8017d76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017d78:	e9cb aa01 	strd	sl, sl, [fp, #4]
 8017d7c:	e9cb aa04 	strd	sl, sl, [fp, #16]
 8017d80:	e9cb aa07 	strd	sl, sl, [fp, #28]
 8017d84:	e9cb aa0a 	strd	sl, sl, [fp, #40]	; 0x28
 8017d88:	e9cb aa0d 	strd	sl, sl, [fp, #52]	; 0x34
 8017d8c:	44be      	add	lr, r7
 8017d8e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017d92:	6823      	ldr	r3, [r4, #0]
 8017d94:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 8017d98:	f109 0028 	add.w	r0, r9, #40	; 0x28
 8017d9c:	f8cc 3000 	str.w	r3, [ip]
 8017da0:	f002 ff8e 	bl	801acc0 <rmw_create_wait_set>
 8017da4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017da6:	f8cb 003c 	str.w	r0, [fp, #60]	; 0x3c
 8017daa:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8017dac:	b350      	cbz	r0, 8017e04 <rcl_wait_set_init+0x10c>
 8017dae:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8017db0:	4643      	mov	r3, r8
 8017db2:	463a      	mov	r2, r7
 8017db4:	4631      	mov	r1, r6
 8017db6:	9402      	str	r4, [sp, #8]
 8017db8:	4628      	mov	r0, r5
 8017dba:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8017dbc:	9401      	str	r4, [sp, #4]
 8017dbe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8017dc0:	9400      	str	r4, [sp, #0]
 8017dc2:	f7ff fde1 	bl	8017988 <rcl_wait_set_resize>
 8017dc6:	4604      	mov	r4, r0
 8017dc8:	2800      	cmp	r0, #0
 8017dca:	d0ae      	beq.n	8017d2a <rcl_wait_set_init+0x32>
 8017dcc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017dce:	bb2b      	cbnz	r3, 8017e1c <rcl_wait_set_init+0x124>
 8017dd0:	2600      	movs	r6, #0
 8017dd2:	4628      	mov	r0, r5
 8017dd4:	4633      	mov	r3, r6
 8017dd6:	4632      	mov	r2, r6
 8017dd8:	4631      	mov	r1, r6
 8017dda:	9600      	str	r6, [sp, #0]
 8017ddc:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8017de0:	f7ff fdd2 	bl	8017988 <rcl_wait_set_resize>
 8017de4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8017de6:	2800      	cmp	r0, #0
 8017de8:	d09f      	beq.n	8017d2a <rcl_wait_set_init+0x32>
 8017dea:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8017dec:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8017dee:	4798      	blx	r3
 8017df0:	4620      	mov	r0, r4
 8017df2:	632e      	str	r6, [r5, #48]	; 0x30
 8017df4:	b005      	add	sp, #20
 8017df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017dfa:	240b      	movs	r4, #11
 8017dfc:	4620      	mov	r0, r4
 8017dfe:	b005      	add	sp, #20
 8017e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e04:	2401      	movs	r4, #1
 8017e06:	f002 ff65 	bl	801acd4 <rmw_destroy_wait_set>
 8017e0a:	2800      	cmp	r0, #0
 8017e0c:	bf18      	it	ne
 8017e0e:	f44f 7461 	movne.w	r4, #900	; 0x384
 8017e12:	e7dd      	b.n	8017dd0 <rcl_wait_set_init+0xd8>
 8017e14:	2465      	movs	r4, #101	; 0x65
 8017e16:	e788      	b.n	8017d2a <rcl_wait_set_init+0x32>
 8017e18:	240a      	movs	r4, #10
 8017e1a:	e786      	b.n	8017d2a <rcl_wait_set_init+0x32>
 8017e1c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8017e1e:	e7f2      	b.n	8017e06 <rcl_wait_set_init+0x10e>

08017e20 <rcl_wait_set_add_guard_condition>:
 8017e20:	b318      	cbz	r0, 8017e6a <rcl_wait_set_add_guard_condition+0x4a>
 8017e22:	b538      	push	{r3, r4, r5, lr}
 8017e24:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017e26:	4604      	mov	r4, r0
 8017e28:	b30b      	cbz	r3, 8017e6e <rcl_wait_set_add_guard_condition+0x4e>
 8017e2a:	b319      	cbz	r1, 8017e74 <rcl_wait_set_add_guard_condition+0x54>
 8017e2c:	68dd      	ldr	r5, [r3, #12]
 8017e2e:	68c0      	ldr	r0, [r0, #12]
 8017e30:	4285      	cmp	r5, r0
 8017e32:	d217      	bcs.n	8017e64 <rcl_wait_set_add_guard_condition+0x44>
 8017e34:	1c68      	adds	r0, r5, #1
 8017e36:	60d8      	str	r0, [r3, #12]
 8017e38:	68a3      	ldr	r3, [r4, #8]
 8017e3a:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8017e3e:	b102      	cbz	r2, 8017e42 <rcl_wait_set_add_guard_condition+0x22>
 8017e40:	6015      	str	r5, [r2, #0]
 8017e42:	4608      	mov	r0, r1
 8017e44:	f004 ff96 	bl	801cd74 <rcl_guard_condition_get_rmw_handle>
 8017e48:	b150      	cbz	r0, 8017e60 <rcl_wait_set_add_guard_condition+0x40>
 8017e4a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017e4c:	6842      	ldr	r2, [r0, #4]
 8017e4e:	2000      	movs	r0, #0
 8017e50:	695b      	ldr	r3, [r3, #20]
 8017e52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017e56:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017e58:	6913      	ldr	r3, [r2, #16]
 8017e5a:	3301      	adds	r3, #1
 8017e5c:	6113      	str	r3, [r2, #16]
 8017e5e:	bd38      	pop	{r3, r4, r5, pc}
 8017e60:	2001      	movs	r0, #1
 8017e62:	bd38      	pop	{r3, r4, r5, pc}
 8017e64:	f240 3086 	movw	r0, #902	; 0x386
 8017e68:	bd38      	pop	{r3, r4, r5, pc}
 8017e6a:	200b      	movs	r0, #11
 8017e6c:	4770      	bx	lr
 8017e6e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017e72:	bd38      	pop	{r3, r4, r5, pc}
 8017e74:	200b      	movs	r0, #11
 8017e76:	bd38      	pop	{r3, r4, r5, pc}

08017e78 <rcl_wait_set_add_timer>:
 8017e78:	b328      	cbz	r0, 8017ec6 <rcl_wait_set_add_timer+0x4e>
 8017e7a:	b538      	push	{r3, r4, r5, lr}
 8017e7c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017e7e:	4604      	mov	r4, r0
 8017e80:	b31b      	cbz	r3, 8017eca <rcl_wait_set_add_timer+0x52>
 8017e82:	b329      	cbz	r1, 8017ed0 <rcl_wait_set_add_timer+0x58>
 8017e84:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8017e86:	6965      	ldr	r5, [r4, #20]
 8017e88:	42a8      	cmp	r0, r5
 8017e8a:	d219      	bcs.n	8017ec0 <rcl_wait_set_add_timer+0x48>
 8017e8c:	1c45      	adds	r5, r0, #1
 8017e8e:	641d      	str	r5, [r3, #64]	; 0x40
 8017e90:	6923      	ldr	r3, [r4, #16]
 8017e92:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8017e96:	b102      	cbz	r2, 8017e9a <rcl_wait_set_add_timer+0x22>
 8017e98:	6010      	str	r0, [r2, #0]
 8017e9a:	4608      	mov	r0, r1
 8017e9c:	f7ff fb9a 	bl	80175d4 <rcl_timer_get_guard_condition>
 8017ea0:	b168      	cbz	r0, 8017ebe <rcl_wait_set_add_timer+0x46>
 8017ea2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017ea4:	68e3      	ldr	r3, [r4, #12]
 8017ea6:	6c15      	ldr	r5, [r2, #64]	; 0x40
 8017ea8:	3b01      	subs	r3, #1
 8017eaa:	441d      	add	r5, r3
 8017eac:	f004 ff62 	bl	801cd74 <rcl_guard_condition_get_rmw_handle>
 8017eb0:	b180      	cbz	r0, 8017ed4 <rcl_wait_set_add_timer+0x5c>
 8017eb2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017eb4:	6842      	ldr	r2, [r0, #4]
 8017eb6:	2000      	movs	r0, #0
 8017eb8:	695b      	ldr	r3, [r3, #20]
 8017eba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017ebe:	bd38      	pop	{r3, r4, r5, pc}
 8017ec0:	f240 3086 	movw	r0, #902	; 0x386
 8017ec4:	bd38      	pop	{r3, r4, r5, pc}
 8017ec6:	200b      	movs	r0, #11
 8017ec8:	4770      	bx	lr
 8017eca:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017ece:	bd38      	pop	{r3, r4, r5, pc}
 8017ed0:	200b      	movs	r0, #11
 8017ed2:	bd38      	pop	{r3, r4, r5, pc}
 8017ed4:	2001      	movs	r0, #1
 8017ed6:	bd38      	pop	{r3, r4, r5, pc}

08017ed8 <rcl_wait_set_add_client>:
 8017ed8:	b318      	cbz	r0, 8017f22 <rcl_wait_set_add_client+0x4a>
 8017eda:	b538      	push	{r3, r4, r5, lr}
 8017edc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017ede:	4604      	mov	r4, r0
 8017ee0:	b30b      	cbz	r3, 8017f26 <rcl_wait_set_add_client+0x4e>
 8017ee2:	b319      	cbz	r1, 8017f2c <rcl_wait_set_add_client+0x54>
 8017ee4:	699d      	ldr	r5, [r3, #24]
 8017ee6:	69c0      	ldr	r0, [r0, #28]
 8017ee8:	4285      	cmp	r5, r0
 8017eea:	d217      	bcs.n	8017f1c <rcl_wait_set_add_client+0x44>
 8017eec:	1c68      	adds	r0, r5, #1
 8017eee:	6198      	str	r0, [r3, #24]
 8017ef0:	69a3      	ldr	r3, [r4, #24]
 8017ef2:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8017ef6:	b102      	cbz	r2, 8017efa <rcl_wait_set_add_client+0x22>
 8017ef8:	6015      	str	r5, [r2, #0]
 8017efa:	4608      	mov	r0, r1
 8017efc:	f7fd fd1a 	bl	8015934 <rcl_client_get_rmw_handle>
 8017f00:	b150      	cbz	r0, 8017f18 <rcl_wait_set_add_client+0x40>
 8017f02:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017f04:	6842      	ldr	r2, [r0, #4]
 8017f06:	2000      	movs	r0, #0
 8017f08:	6a1b      	ldr	r3, [r3, #32]
 8017f0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017f0e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017f10:	69d3      	ldr	r3, [r2, #28]
 8017f12:	3301      	adds	r3, #1
 8017f14:	61d3      	str	r3, [r2, #28]
 8017f16:	bd38      	pop	{r3, r4, r5, pc}
 8017f18:	2001      	movs	r0, #1
 8017f1a:	bd38      	pop	{r3, r4, r5, pc}
 8017f1c:	f240 3086 	movw	r0, #902	; 0x386
 8017f20:	bd38      	pop	{r3, r4, r5, pc}
 8017f22:	200b      	movs	r0, #11
 8017f24:	4770      	bx	lr
 8017f26:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017f2a:	bd38      	pop	{r3, r4, r5, pc}
 8017f2c:	200b      	movs	r0, #11
 8017f2e:	bd38      	pop	{r3, r4, r5, pc}

08017f30 <rcl_wait_set_add_service>:
 8017f30:	b318      	cbz	r0, 8017f7a <rcl_wait_set_add_service+0x4a>
 8017f32:	b538      	push	{r3, r4, r5, lr}
 8017f34:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017f36:	4604      	mov	r4, r0
 8017f38:	b30b      	cbz	r3, 8017f7e <rcl_wait_set_add_service+0x4e>
 8017f3a:	b319      	cbz	r1, 8017f84 <rcl_wait_set_add_service+0x54>
 8017f3c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8017f3e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8017f40:	4285      	cmp	r5, r0
 8017f42:	d217      	bcs.n	8017f74 <rcl_wait_set_add_service+0x44>
 8017f44:	1c68      	adds	r0, r5, #1
 8017f46:	6258      	str	r0, [r3, #36]	; 0x24
 8017f48:	6a23      	ldr	r3, [r4, #32]
 8017f4a:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8017f4e:	b102      	cbz	r2, 8017f52 <rcl_wait_set_add_service+0x22>
 8017f50:	6015      	str	r5, [r2, #0]
 8017f52:	4608      	mov	r0, r1
 8017f54:	f7fe fcf2 	bl	801693c <rcl_service_get_rmw_handle>
 8017f58:	b150      	cbz	r0, 8017f70 <rcl_wait_set_add_service+0x40>
 8017f5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017f5c:	6842      	ldr	r2, [r0, #4]
 8017f5e:	2000      	movs	r0, #0
 8017f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017f66:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017f68:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8017f6a:	3301      	adds	r3, #1
 8017f6c:	6293      	str	r3, [r2, #40]	; 0x28
 8017f6e:	bd38      	pop	{r3, r4, r5, pc}
 8017f70:	2001      	movs	r0, #1
 8017f72:	bd38      	pop	{r3, r4, r5, pc}
 8017f74:	f240 3086 	movw	r0, #902	; 0x386
 8017f78:	bd38      	pop	{r3, r4, r5, pc}
 8017f7a:	200b      	movs	r0, #11
 8017f7c:	4770      	bx	lr
 8017f7e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017f82:	bd38      	pop	{r3, r4, r5, pc}
 8017f84:	200b      	movs	r0, #11
 8017f86:	bd38      	pop	{r3, r4, r5, pc}

08017f88 <rcl_wait>:
 8017f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f8c:	ed2d 8b02 	vpush	{d8}
 8017f90:	b08d      	sub	sp, #52	; 0x34
 8017f92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8017f96:	2800      	cmp	r0, #0
 8017f98:	f000 814f 	beq.w	801823a <rcl_wait+0x2b2>
 8017f9c:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8017f9e:	4605      	mov	r5, r0
 8017fa0:	2e00      	cmp	r6, #0
 8017fa2:	f000 811a 	beq.w	80181da <rcl_wait+0x252>
 8017fa6:	6843      	ldr	r3, [r0, #4]
 8017fa8:	b983      	cbnz	r3, 8017fcc <rcl_wait+0x44>
 8017faa:	68eb      	ldr	r3, [r5, #12]
 8017fac:	b973      	cbnz	r3, 8017fcc <rcl_wait+0x44>
 8017fae:	696b      	ldr	r3, [r5, #20]
 8017fb0:	b963      	cbnz	r3, 8017fcc <rcl_wait+0x44>
 8017fb2:	69eb      	ldr	r3, [r5, #28]
 8017fb4:	b953      	cbnz	r3, 8017fcc <rcl_wait+0x44>
 8017fb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017fb8:	b943      	cbnz	r3, 8017fcc <rcl_wait+0x44>
 8017fba:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8017fbc:	b933      	cbnz	r3, 8017fcc <rcl_wait+0x44>
 8017fbe:	f240 3085 	movw	r0, #901	; 0x385
 8017fc2:	b00d      	add	sp, #52	; 0x34
 8017fc4:	ecbd 8b02 	vpop	{d8}
 8017fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fcc:	9b04      	ldr	r3, [sp, #16]
 8017fce:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8017fd0:	2b01      	cmp	r3, #1
 8017fd2:	9b05      	ldr	r3, [sp, #20]
 8017fd4:	f173 0300 	sbcs.w	r3, r3, #0
 8017fd8:	f2c0 80f8 	blt.w	80181cc <rcl_wait+0x244>
 8017fdc:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8017fe0:	2a00      	cmp	r2, #0
 8017fe2:	f000 810f 	beq.w	8018204 <rcl_wait+0x27c>
 8017fe6:	2400      	movs	r4, #0
 8017fe8:	4613      	mov	r3, r2
 8017fea:	f240 3921 	movw	r9, #801	; 0x321
 8017fee:	4632      	mov	r2, r6
 8017ff0:	46a2      	mov	sl, r4
 8017ff2:	46a3      	mov	fp, r4
 8017ff4:	ed9f 8b98 	vldr	d8, [pc, #608]	; 8018258 <rcl_wait+0x2d0>
 8017ff8:	e014      	b.n	8018024 <rcl_wait+0x9c>
 8017ffa:	2800      	cmp	r0, #0
 8017ffc:	d1e1      	bne.n	8017fc2 <rcl_wait+0x3a>
 8017ffe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8018002:	4542      	cmp	r2, r8
 8018004:	eb73 0107 	sbcs.w	r1, r3, r7
 8018008:	da03      	bge.n	8018012 <rcl_wait+0x8a>
 801800a:	4690      	mov	r8, r2
 801800c:	461f      	mov	r7, r3
 801800e:	f04f 0b01 	mov.w	fp, #1
 8018012:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8018014:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8018016:	3401      	adds	r4, #1
 8018018:	f14a 0a00 	adc.w	sl, sl, #0
 801801c:	429c      	cmp	r4, r3
 801801e:	f17a 0100 	sbcs.w	r1, sl, #0
 8018022:	d228      	bcs.n	8018076 <rcl_wait+0xee>
 8018024:	6928      	ldr	r0, [r5, #16]
 8018026:	a908      	add	r1, sp, #32
 8018028:	00a6      	lsls	r6, r4, #2
 801802a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801802e:	2800      	cmp	r0, #0
 8018030:	d0f1      	beq.n	8018016 <rcl_wait+0x8e>
 8018032:	68eb      	ldr	r3, [r5, #12]
 8018034:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8018038:	4423      	add	r3, r4
 801803a:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 801803e:	f1be 0f00 	cmp.w	lr, #0
 8018042:	d006      	beq.n	8018052 <rcl_wait+0xca>
 8018044:	6913      	ldr	r3, [r2, #16]
 8018046:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 801804a:	3301      	adds	r3, #1
 801804c:	6113      	str	r3, [r2, #16]
 801804e:	692b      	ldr	r3, [r5, #16]
 8018050:	5998      	ldr	r0, [r3, r6]
 8018052:	ed8d 8b08 	vstr	d8, [sp, #32]
 8018056:	f7ff fa8b 	bl	8017570 <rcl_timer_get_time_until_next_call>
 801805a:	4548      	cmp	r0, r9
 801805c:	d1cd      	bne.n	8017ffa <rcl_wait+0x72>
 801805e:	692b      	ldr	r3, [r5, #16]
 8018060:	2200      	movs	r2, #0
 8018062:	3401      	adds	r4, #1
 8018064:	519a      	str	r2, [r3, r6]
 8018066:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8018068:	f14a 0a00 	adc.w	sl, sl, #0
 801806c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801806e:	429c      	cmp	r4, r3
 8018070:	f17a 0100 	sbcs.w	r1, sl, #0
 8018074:	d3d6      	bcc.n	8018024 <rcl_wait+0x9c>
 8018076:	4659      	mov	r1, fp
 8018078:	4616      	mov	r6, r2
 801807a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801807e:	4313      	orrs	r3, r2
 8018080:	f040 80b4 	bne.w	80181ec <rcl_wait+0x264>
 8018084:	2300      	movs	r3, #0
 8018086:	2200      	movs	r2, #0
 8018088:	460c      	mov	r4, r1
 801808a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801808e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8018092:	ab08      	add	r3, sp, #32
 8018094:	9302      	str	r3, [sp, #8]
 8018096:	f106 0334 	add.w	r3, r6, #52	; 0x34
 801809a:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 801809c:	f106 0110 	add.w	r1, r6, #16
 80180a0:	9300      	str	r3, [sp, #0]
 80180a2:	1d30      	adds	r0, r6, #4
 80180a4:	f106 031c 	add.w	r3, r6, #28
 80180a8:	9201      	str	r2, [sp, #4]
 80180aa:	f106 0228 	add.w	r2, r6, #40	; 0x28
 80180ae:	f002 fca3 	bl	801a9f8 <rmw_wait>
 80180b2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80180b4:	4680      	mov	r8, r0
 80180b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80180b8:	b1e2      	cbz	r2, 80180f4 <rcl_wait+0x16c>
 80180ba:	f04f 0900 	mov.w	r9, #0
 80180be:	464f      	mov	r7, r9
 80180c0:	692a      	ldr	r2, [r5, #16]
 80180c2:	f10d 011f 	add.w	r1, sp, #31
 80180c6:	ea4f 0689 	mov.w	r6, r9, lsl #2
 80180ca:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 80180ce:	b160      	cbz	r0, 80180ea <rcl_wait+0x162>
 80180d0:	f88d 701f 	strb.w	r7, [sp, #31]
 80180d4:	f7ff fa10 	bl	80174f8 <rcl_timer_is_ready>
 80180d8:	2800      	cmp	r0, #0
 80180da:	f47f af72 	bne.w	8017fc2 <rcl_wait+0x3a>
 80180de:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80180e2:	b90b      	cbnz	r3, 80180e8 <rcl_wait+0x160>
 80180e4:	692a      	ldr	r2, [r5, #16]
 80180e6:	5193      	str	r3, [r2, r6]
 80180e8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80180ea:	f109 0901 	add.w	r9, r9, #1
 80180ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80180f0:	454a      	cmp	r2, r9
 80180f2:	d8e5      	bhi.n	80180c0 <rcl_wait+0x138>
 80180f4:	f038 0002 	bics.w	r0, r8, #2
 80180f8:	d176      	bne.n	80181e8 <rcl_wait+0x260>
 80180fa:	686f      	ldr	r7, [r5, #4]
 80180fc:	b17f      	cbz	r7, 801811e <rcl_wait+0x196>
 80180fe:	4602      	mov	r2, r0
 8018100:	e002      	b.n	8018108 <rcl_wait+0x180>
 8018102:	3201      	adds	r2, #1
 8018104:	42ba      	cmp	r2, r7
 8018106:	d00a      	beq.n	801811e <rcl_wait+0x196>
 8018108:	6899      	ldr	r1, [r3, #8]
 801810a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801810e:	2900      	cmp	r1, #0
 8018110:	d1f7      	bne.n	8018102 <rcl_wait+0x17a>
 8018112:	682e      	ldr	r6, [r5, #0]
 8018114:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8018118:	3201      	adds	r2, #1
 801811a:	42ba      	cmp	r2, r7
 801811c:	d1f4      	bne.n	8018108 <rcl_wait+0x180>
 801811e:	68ef      	ldr	r7, [r5, #12]
 8018120:	b17f      	cbz	r7, 8018142 <rcl_wait+0x1ba>
 8018122:	2200      	movs	r2, #0
 8018124:	e002      	b.n	801812c <rcl_wait+0x1a4>
 8018126:	3201      	adds	r2, #1
 8018128:	42ba      	cmp	r2, r7
 801812a:	d00a      	beq.n	8018142 <rcl_wait+0x1ba>
 801812c:	6959      	ldr	r1, [r3, #20]
 801812e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018132:	2900      	cmp	r1, #0
 8018134:	d1f7      	bne.n	8018126 <rcl_wait+0x19e>
 8018136:	68ae      	ldr	r6, [r5, #8]
 8018138:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801813c:	3201      	adds	r2, #1
 801813e:	42ba      	cmp	r2, r7
 8018140:	d1f4      	bne.n	801812c <rcl_wait+0x1a4>
 8018142:	69ef      	ldr	r7, [r5, #28]
 8018144:	b17f      	cbz	r7, 8018166 <rcl_wait+0x1de>
 8018146:	2200      	movs	r2, #0
 8018148:	e002      	b.n	8018150 <rcl_wait+0x1c8>
 801814a:	3201      	adds	r2, #1
 801814c:	42ba      	cmp	r2, r7
 801814e:	d00a      	beq.n	8018166 <rcl_wait+0x1de>
 8018150:	6a19      	ldr	r1, [r3, #32]
 8018152:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018156:	2900      	cmp	r1, #0
 8018158:	d1f7      	bne.n	801814a <rcl_wait+0x1c2>
 801815a:	69ae      	ldr	r6, [r5, #24]
 801815c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8018160:	3201      	adds	r2, #1
 8018162:	42ba      	cmp	r2, r7
 8018164:	d1f4      	bne.n	8018150 <rcl_wait+0x1c8>
 8018166:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8018168:	b17f      	cbz	r7, 801818a <rcl_wait+0x202>
 801816a:	2200      	movs	r2, #0
 801816c:	e002      	b.n	8018174 <rcl_wait+0x1ec>
 801816e:	3201      	adds	r2, #1
 8018170:	42ba      	cmp	r2, r7
 8018172:	d00a      	beq.n	801818a <rcl_wait+0x202>
 8018174:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8018176:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801817a:	2900      	cmp	r1, #0
 801817c:	d1f7      	bne.n	801816e <rcl_wait+0x1e6>
 801817e:	6a2e      	ldr	r6, [r5, #32]
 8018180:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8018184:	3201      	adds	r2, #1
 8018186:	42ba      	cmp	r2, r7
 8018188:	d1f4      	bne.n	8018174 <rcl_wait+0x1ec>
 801818a:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 801818c:	b17f      	cbz	r7, 80181ae <rcl_wait+0x226>
 801818e:	2200      	movs	r2, #0
 8018190:	e002      	b.n	8018198 <rcl_wait+0x210>
 8018192:	3201      	adds	r2, #1
 8018194:	42ba      	cmp	r2, r7
 8018196:	d00a      	beq.n	80181ae <rcl_wait+0x226>
 8018198:	6b99      	ldr	r1, [r3, #56]	; 0x38
 801819a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801819e:	2900      	cmp	r1, #0
 80181a0:	d1f7      	bne.n	8018192 <rcl_wait+0x20a>
 80181a2:	6aae      	ldr	r6, [r5, #40]	; 0x28
 80181a4:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 80181a8:	3201      	adds	r2, #1
 80181aa:	42ba      	cmp	r2, r7
 80181ac:	d1f4      	bne.n	8018198 <rcl_wait+0x210>
 80181ae:	f1b8 0f02 	cmp.w	r8, #2
 80181b2:	f47f af06 	bne.w	8017fc2 <rcl_wait+0x3a>
 80181b6:	f084 0301 	eor.w	r3, r4, #1
 80181ba:	b2db      	uxtb	r3, r3
 80181bc:	2b00      	cmp	r3, #0
 80181be:	bf18      	it	ne
 80181c0:	2002      	movne	r0, #2
 80181c2:	b00d      	add	sp, #52	; 0x34
 80181c4:	ecbd 8b02 	vpop	{d8}
 80181c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181cc:	2a00      	cmp	r2, #0
 80181ce:	d03a      	beq.n	8018246 <rcl_wait+0x2be>
 80181d0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80181d4:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 80181d8:	e705      	b.n	8017fe6 <rcl_wait+0x5e>
 80181da:	f44f 7061 	mov.w	r0, #900	; 0x384
 80181de:	b00d      	add	sp, #52	; 0x34
 80181e0:	ecbd 8b02 	vpop	{d8}
 80181e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181e8:	2001      	movs	r0, #1
 80181ea:	e6ea      	b.n	8017fc2 <rcl_wait+0x3a>
 80181ec:	9b04      	ldr	r3, [sp, #16]
 80181ee:	460c      	mov	r4, r1
 80181f0:	2b01      	cmp	r3, #1
 80181f2:	9b05      	ldr	r3, [sp, #20]
 80181f4:	f173 0300 	sbcs.w	r3, r3, #0
 80181f8:	bfa8      	it	ge
 80181fa:	f044 0401 	orrge.w	r4, r4, #1
 80181fe:	b914      	cbnz	r4, 8018206 <rcl_wait+0x27e>
 8018200:	4623      	mov	r3, r4
 8018202:	e747      	b.n	8018094 <rcl_wait+0x10c>
 8018204:	4611      	mov	r1, r2
 8018206:	2f00      	cmp	r7, #0
 8018208:	da02      	bge.n	8018210 <rcl_wait+0x288>
 801820a:	f04f 0800 	mov.w	r8, #0
 801820e:	4647      	mov	r7, r8
 8018210:	460c      	mov	r4, r1
 8018212:	4640      	mov	r0, r8
 8018214:	4639      	mov	r1, r7
 8018216:	a312      	add	r3, pc, #72	; (adr r3, 8018260 <rcl_wait+0x2d8>)
 8018218:	e9d3 2300 	ldrd	r2, r3, [r3]
 801821c:	f7e8 f878 	bl	8000310 <__aeabi_ldivmod>
 8018220:	a30f      	add	r3, pc, #60	; (adr r3, 8018260 <rcl_wait+0x2d8>)
 8018222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018226:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801822a:	4640      	mov	r0, r8
 801822c:	4639      	mov	r1, r7
 801822e:	f7e8 f86f 	bl	8000310 <__aeabi_ldivmod>
 8018232:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8018236:	ab08      	add	r3, sp, #32
 8018238:	e72c      	b.n	8018094 <rcl_wait+0x10c>
 801823a:	200b      	movs	r0, #11
 801823c:	b00d      	add	sp, #52	; 0x34
 801823e:	ecbd 8b02 	vpop	{d8}
 8018242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018246:	4611      	mov	r1, r2
 8018248:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801824c:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8018250:	e713      	b.n	801807a <rcl_wait+0xf2>
 8018252:	bf00      	nop
 8018254:	f3af 8000 	nop.w
 8018258:	ffffffff 	.word	0xffffffff
 801825c:	7fffffff 	.word	0x7fffffff
 8018260:	3b9aca00 	.word	0x3b9aca00
 8018264:	00000000 	.word	0x00000000

08018268 <rcl_action_take_goal_response>:
 8018268:	2800      	cmp	r0, #0
 801826a:	d039      	beq.n	80182e0 <rcl_action_take_goal_response+0x78>
 801826c:	b570      	push	{r4, r5, r6, lr}
 801826e:	4604      	mov	r4, r0
 8018270:	6800      	ldr	r0, [r0, #0]
 8018272:	b380      	cbz	r0, 80182d6 <rcl_action_take_goal_response+0x6e>
 8018274:	460e      	mov	r6, r1
 8018276:	4615      	mov	r5, r2
 8018278:	f7fd fc1e 	bl	8015ab8 <rcl_client_is_valid>
 801827c:	b330      	cbz	r0, 80182cc <rcl_action_take_goal_response+0x64>
 801827e:	6820      	ldr	r0, [r4, #0]
 8018280:	3004      	adds	r0, #4
 8018282:	f7fd fc19 	bl	8015ab8 <rcl_client_is_valid>
 8018286:	b308      	cbz	r0, 80182cc <rcl_action_take_goal_response+0x64>
 8018288:	6820      	ldr	r0, [r4, #0]
 801828a:	3008      	adds	r0, #8
 801828c:	f7fd fc14 	bl	8015ab8 <rcl_client_is_valid>
 8018290:	b1e0      	cbz	r0, 80182cc <rcl_action_take_goal_response+0x64>
 8018292:	6820      	ldr	r0, [r4, #0]
 8018294:	300c      	adds	r0, #12
 8018296:	f7fe fdc1 	bl	8016e1c <rcl_subscription_is_valid>
 801829a:	b1b8      	cbz	r0, 80182cc <rcl_action_take_goal_response+0x64>
 801829c:	6820      	ldr	r0, [r4, #0]
 801829e:	3010      	adds	r0, #16
 80182a0:	f7fe fdbc 	bl	8016e1c <rcl_subscription_is_valid>
 80182a4:	b190      	cbz	r0, 80182cc <rcl_action_take_goal_response+0x64>
 80182a6:	b1cd      	cbz	r5, 80182dc <rcl_action_take_goal_response+0x74>
 80182a8:	b1c6      	cbz	r6, 80182dc <rcl_action_take_goal_response+0x74>
 80182aa:	462a      	mov	r2, r5
 80182ac:	4631      	mov	r1, r6
 80182ae:	6820      	ldr	r0, [r4, #0]
 80182b0:	f7fd fb9a 	bl	80159e8 <rcl_take_response>
 80182b4:	b148      	cbz	r0, 80182ca <rcl_action_take_goal_response+0x62>
 80182b6:	280a      	cmp	r0, #10
 80182b8:	d007      	beq.n	80182ca <rcl_action_take_goal_response+0x62>
 80182ba:	f240 12f5 	movw	r2, #501	; 0x1f5
 80182be:	f640 0337 	movw	r3, #2103	; 0x837
 80182c2:	4290      	cmp	r0, r2
 80182c4:	bf0c      	ite	eq
 80182c6:	4618      	moveq	r0, r3
 80182c8:	2001      	movne	r0, #1
 80182ca:	bd70      	pop	{r4, r5, r6, pc}
 80182cc:	f7f6 fd64 	bl	800ed98 <rcutils_reset_error>
 80182d0:	f640 0036 	movw	r0, #2102	; 0x836
 80182d4:	bd70      	pop	{r4, r5, r6, pc}
 80182d6:	f640 0036 	movw	r0, #2102	; 0x836
 80182da:	bd70      	pop	{r4, r5, r6, pc}
 80182dc:	200b      	movs	r0, #11
 80182de:	bd70      	pop	{r4, r5, r6, pc}
 80182e0:	f640 0036 	movw	r0, #2102	; 0x836
 80182e4:	4770      	bx	lr
 80182e6:	bf00      	nop

080182e8 <rcl_action_send_result_request>:
 80182e8:	b390      	cbz	r0, 8018350 <rcl_action_send_result_request+0x68>
 80182ea:	b570      	push	{r4, r5, r6, lr}
 80182ec:	4604      	mov	r4, r0
 80182ee:	6800      	ldr	r0, [r0, #0]
 80182f0:	b348      	cbz	r0, 8018346 <rcl_action_send_result_request+0x5e>
 80182f2:	460e      	mov	r6, r1
 80182f4:	4615      	mov	r5, r2
 80182f6:	f7fd fbdf 	bl	8015ab8 <rcl_client_is_valid>
 80182fa:	b1f8      	cbz	r0, 801833c <rcl_action_send_result_request+0x54>
 80182fc:	6820      	ldr	r0, [r4, #0]
 80182fe:	3004      	adds	r0, #4
 8018300:	f7fd fbda 	bl	8015ab8 <rcl_client_is_valid>
 8018304:	b1d0      	cbz	r0, 801833c <rcl_action_send_result_request+0x54>
 8018306:	6820      	ldr	r0, [r4, #0]
 8018308:	3008      	adds	r0, #8
 801830a:	f7fd fbd5 	bl	8015ab8 <rcl_client_is_valid>
 801830e:	b1a8      	cbz	r0, 801833c <rcl_action_send_result_request+0x54>
 8018310:	6820      	ldr	r0, [r4, #0]
 8018312:	300c      	adds	r0, #12
 8018314:	f7fe fd82 	bl	8016e1c <rcl_subscription_is_valid>
 8018318:	b180      	cbz	r0, 801833c <rcl_action_send_result_request+0x54>
 801831a:	6820      	ldr	r0, [r4, #0]
 801831c:	3010      	adds	r0, #16
 801831e:	f7fe fd7d 	bl	8016e1c <rcl_subscription_is_valid>
 8018322:	b158      	cbz	r0, 801833c <rcl_action_send_result_request+0x54>
 8018324:	b195      	cbz	r5, 801834c <rcl_action_send_result_request+0x64>
 8018326:	b18e      	cbz	r6, 801834c <rcl_action_send_result_request+0x64>
 8018328:	6820      	ldr	r0, [r4, #0]
 801832a:	462a      	mov	r2, r5
 801832c:	4631      	mov	r1, r6
 801832e:	3008      	adds	r0, #8
 8018330:	f7fd fb06 	bl	8015940 <rcl_send_request>
 8018334:	3800      	subs	r0, #0
 8018336:	bf18      	it	ne
 8018338:	2001      	movne	r0, #1
 801833a:	bd70      	pop	{r4, r5, r6, pc}
 801833c:	f7f6 fd2c 	bl	800ed98 <rcutils_reset_error>
 8018340:	f640 0036 	movw	r0, #2102	; 0x836
 8018344:	bd70      	pop	{r4, r5, r6, pc}
 8018346:	f640 0036 	movw	r0, #2102	; 0x836
 801834a:	bd70      	pop	{r4, r5, r6, pc}
 801834c:	200b      	movs	r0, #11
 801834e:	bd70      	pop	{r4, r5, r6, pc}
 8018350:	f640 0036 	movw	r0, #2102	; 0x836
 8018354:	4770      	bx	lr
 8018356:	bf00      	nop

08018358 <rcl_action_take_result_response>:
 8018358:	2800      	cmp	r0, #0
 801835a:	d03a      	beq.n	80183d2 <rcl_action_take_result_response+0x7a>
 801835c:	b570      	push	{r4, r5, r6, lr}
 801835e:	4604      	mov	r4, r0
 8018360:	6800      	ldr	r0, [r0, #0]
 8018362:	b388      	cbz	r0, 80183c8 <rcl_action_take_result_response+0x70>
 8018364:	460e      	mov	r6, r1
 8018366:	4615      	mov	r5, r2
 8018368:	f7fd fba6 	bl	8015ab8 <rcl_client_is_valid>
 801836c:	b338      	cbz	r0, 80183be <rcl_action_take_result_response+0x66>
 801836e:	6820      	ldr	r0, [r4, #0]
 8018370:	3004      	adds	r0, #4
 8018372:	f7fd fba1 	bl	8015ab8 <rcl_client_is_valid>
 8018376:	b310      	cbz	r0, 80183be <rcl_action_take_result_response+0x66>
 8018378:	6820      	ldr	r0, [r4, #0]
 801837a:	3008      	adds	r0, #8
 801837c:	f7fd fb9c 	bl	8015ab8 <rcl_client_is_valid>
 8018380:	b1e8      	cbz	r0, 80183be <rcl_action_take_result_response+0x66>
 8018382:	6820      	ldr	r0, [r4, #0]
 8018384:	300c      	adds	r0, #12
 8018386:	f7fe fd49 	bl	8016e1c <rcl_subscription_is_valid>
 801838a:	b1c0      	cbz	r0, 80183be <rcl_action_take_result_response+0x66>
 801838c:	6820      	ldr	r0, [r4, #0]
 801838e:	3010      	adds	r0, #16
 8018390:	f7fe fd44 	bl	8016e1c <rcl_subscription_is_valid>
 8018394:	b198      	cbz	r0, 80183be <rcl_action_take_result_response+0x66>
 8018396:	b1d5      	cbz	r5, 80183ce <rcl_action_take_result_response+0x76>
 8018398:	b1ce      	cbz	r6, 80183ce <rcl_action_take_result_response+0x76>
 801839a:	6820      	ldr	r0, [r4, #0]
 801839c:	462a      	mov	r2, r5
 801839e:	4631      	mov	r1, r6
 80183a0:	3008      	adds	r0, #8
 80183a2:	f7fd fb21 	bl	80159e8 <rcl_take_response>
 80183a6:	b148      	cbz	r0, 80183bc <rcl_action_take_result_response+0x64>
 80183a8:	280a      	cmp	r0, #10
 80183aa:	d007      	beq.n	80183bc <rcl_action_take_result_response+0x64>
 80183ac:	f240 12f5 	movw	r2, #501	; 0x1f5
 80183b0:	f640 0337 	movw	r3, #2103	; 0x837
 80183b4:	4290      	cmp	r0, r2
 80183b6:	bf0c      	ite	eq
 80183b8:	4618      	moveq	r0, r3
 80183ba:	2001      	movne	r0, #1
 80183bc:	bd70      	pop	{r4, r5, r6, pc}
 80183be:	f7f6 fceb 	bl	800ed98 <rcutils_reset_error>
 80183c2:	f640 0036 	movw	r0, #2102	; 0x836
 80183c6:	bd70      	pop	{r4, r5, r6, pc}
 80183c8:	f640 0036 	movw	r0, #2102	; 0x836
 80183cc:	bd70      	pop	{r4, r5, r6, pc}
 80183ce:	200b      	movs	r0, #11
 80183d0:	bd70      	pop	{r4, r5, r6, pc}
 80183d2:	f640 0036 	movw	r0, #2102	; 0x836
 80183d6:	4770      	bx	lr

080183d8 <rcl_action_take_cancel_response>:
 80183d8:	2800      	cmp	r0, #0
 80183da:	d03a      	beq.n	8018452 <rcl_action_take_cancel_response+0x7a>
 80183dc:	b570      	push	{r4, r5, r6, lr}
 80183de:	4604      	mov	r4, r0
 80183e0:	6800      	ldr	r0, [r0, #0]
 80183e2:	b388      	cbz	r0, 8018448 <rcl_action_take_cancel_response+0x70>
 80183e4:	460e      	mov	r6, r1
 80183e6:	4615      	mov	r5, r2
 80183e8:	f7fd fb66 	bl	8015ab8 <rcl_client_is_valid>
 80183ec:	b338      	cbz	r0, 801843e <rcl_action_take_cancel_response+0x66>
 80183ee:	6820      	ldr	r0, [r4, #0]
 80183f0:	3004      	adds	r0, #4
 80183f2:	f7fd fb61 	bl	8015ab8 <rcl_client_is_valid>
 80183f6:	b310      	cbz	r0, 801843e <rcl_action_take_cancel_response+0x66>
 80183f8:	6820      	ldr	r0, [r4, #0]
 80183fa:	3008      	adds	r0, #8
 80183fc:	f7fd fb5c 	bl	8015ab8 <rcl_client_is_valid>
 8018400:	b1e8      	cbz	r0, 801843e <rcl_action_take_cancel_response+0x66>
 8018402:	6820      	ldr	r0, [r4, #0]
 8018404:	300c      	adds	r0, #12
 8018406:	f7fe fd09 	bl	8016e1c <rcl_subscription_is_valid>
 801840a:	b1c0      	cbz	r0, 801843e <rcl_action_take_cancel_response+0x66>
 801840c:	6820      	ldr	r0, [r4, #0]
 801840e:	3010      	adds	r0, #16
 8018410:	f7fe fd04 	bl	8016e1c <rcl_subscription_is_valid>
 8018414:	b198      	cbz	r0, 801843e <rcl_action_take_cancel_response+0x66>
 8018416:	b1d5      	cbz	r5, 801844e <rcl_action_take_cancel_response+0x76>
 8018418:	b1ce      	cbz	r6, 801844e <rcl_action_take_cancel_response+0x76>
 801841a:	6820      	ldr	r0, [r4, #0]
 801841c:	462a      	mov	r2, r5
 801841e:	4631      	mov	r1, r6
 8018420:	3004      	adds	r0, #4
 8018422:	f7fd fae1 	bl	80159e8 <rcl_take_response>
 8018426:	b148      	cbz	r0, 801843c <rcl_action_take_cancel_response+0x64>
 8018428:	280a      	cmp	r0, #10
 801842a:	d007      	beq.n	801843c <rcl_action_take_cancel_response+0x64>
 801842c:	f240 12f5 	movw	r2, #501	; 0x1f5
 8018430:	f640 0337 	movw	r3, #2103	; 0x837
 8018434:	4290      	cmp	r0, r2
 8018436:	bf0c      	ite	eq
 8018438:	4618      	moveq	r0, r3
 801843a:	2001      	movne	r0, #1
 801843c:	bd70      	pop	{r4, r5, r6, pc}
 801843e:	f7f6 fcab 	bl	800ed98 <rcutils_reset_error>
 8018442:	f640 0036 	movw	r0, #2102	; 0x836
 8018446:	bd70      	pop	{r4, r5, r6, pc}
 8018448:	f640 0036 	movw	r0, #2102	; 0x836
 801844c:	bd70      	pop	{r4, r5, r6, pc}
 801844e:	200b      	movs	r0, #11
 8018450:	bd70      	pop	{r4, r5, r6, pc}
 8018452:	f640 0036 	movw	r0, #2102	; 0x836
 8018456:	4770      	bx	lr

08018458 <rcl_action_take_feedback>:
 8018458:	2800      	cmp	r0, #0
 801845a:	d038      	beq.n	80184ce <rcl_action_take_feedback+0x76>
 801845c:	b530      	push	{r4, r5, lr}
 801845e:	4604      	mov	r4, r0
 8018460:	6800      	ldr	r0, [r0, #0]
 8018462:	b08f      	sub	sp, #60	; 0x3c
 8018464:	b378      	cbz	r0, 80184c6 <rcl_action_take_feedback+0x6e>
 8018466:	460d      	mov	r5, r1
 8018468:	f7fd fb26 	bl	8015ab8 <rcl_client_is_valid>
 801846c:	b328      	cbz	r0, 80184ba <rcl_action_take_feedback+0x62>
 801846e:	6820      	ldr	r0, [r4, #0]
 8018470:	3004      	adds	r0, #4
 8018472:	f7fd fb21 	bl	8015ab8 <rcl_client_is_valid>
 8018476:	b300      	cbz	r0, 80184ba <rcl_action_take_feedback+0x62>
 8018478:	6820      	ldr	r0, [r4, #0]
 801847a:	3008      	adds	r0, #8
 801847c:	f7fd fb1c 	bl	8015ab8 <rcl_client_is_valid>
 8018480:	b1d8      	cbz	r0, 80184ba <rcl_action_take_feedback+0x62>
 8018482:	6820      	ldr	r0, [r4, #0]
 8018484:	300c      	adds	r0, #12
 8018486:	f7fe fcc9 	bl	8016e1c <rcl_subscription_is_valid>
 801848a:	b1b0      	cbz	r0, 80184ba <rcl_action_take_feedback+0x62>
 801848c:	6820      	ldr	r0, [r4, #0]
 801848e:	3010      	adds	r0, #16
 8018490:	f7fe fcc4 	bl	8016e1c <rcl_subscription_is_valid>
 8018494:	b188      	cbz	r0, 80184ba <rcl_action_take_feedback+0x62>
 8018496:	b1ed      	cbz	r5, 80184d4 <rcl_action_take_feedback+0x7c>
 8018498:	6820      	ldr	r0, [r4, #0]
 801849a:	2300      	movs	r3, #0
 801849c:	466a      	mov	r2, sp
 801849e:	4629      	mov	r1, r5
 80184a0:	300c      	adds	r0, #12
 80184a2:	f7fe fc5f 	bl	8016d64 <rcl_take>
 80184a6:	b160      	cbz	r0, 80184c2 <rcl_action_take_feedback+0x6a>
 80184a8:	f240 1391 	movw	r3, #401	; 0x191
 80184ac:	4298      	cmp	r0, r3
 80184ae:	d014      	beq.n	80184da <rcl_action_take_feedback+0x82>
 80184b0:	280a      	cmp	r0, #10
 80184b2:	bf18      	it	ne
 80184b4:	2001      	movne	r0, #1
 80184b6:	b00f      	add	sp, #60	; 0x3c
 80184b8:	bd30      	pop	{r4, r5, pc}
 80184ba:	f7f6 fc6d 	bl	800ed98 <rcutils_reset_error>
 80184be:	f640 0036 	movw	r0, #2102	; 0x836
 80184c2:	b00f      	add	sp, #60	; 0x3c
 80184c4:	bd30      	pop	{r4, r5, pc}
 80184c6:	f640 0036 	movw	r0, #2102	; 0x836
 80184ca:	b00f      	add	sp, #60	; 0x3c
 80184cc:	bd30      	pop	{r4, r5, pc}
 80184ce:	f640 0036 	movw	r0, #2102	; 0x836
 80184d2:	4770      	bx	lr
 80184d4:	200b      	movs	r0, #11
 80184d6:	b00f      	add	sp, #60	; 0x3c
 80184d8:	bd30      	pop	{r4, r5, pc}
 80184da:	f640 0037 	movw	r0, #2103	; 0x837
 80184de:	e7f0      	b.n	80184c2 <rcl_action_take_feedback+0x6a>

080184e0 <rcl_action_wait_set_add_action_client>:
 80184e0:	2800      	cmp	r0, #0
 80184e2:	d048      	beq.n	8018576 <rcl_action_wait_set_add_action_client+0x96>
 80184e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184e6:	460c      	mov	r4, r1
 80184e8:	2900      	cmp	r1, #0
 80184ea:	d03c      	beq.n	8018566 <rcl_action_wait_set_add_action_client+0x86>
 80184ec:	4605      	mov	r5, r0
 80184ee:	6808      	ldr	r0, [r1, #0]
 80184f0:	2800      	cmp	r0, #0
 80184f2:	d038      	beq.n	8018566 <rcl_action_wait_set_add_action_client+0x86>
 80184f4:	4617      	mov	r7, r2
 80184f6:	461e      	mov	r6, r3
 80184f8:	f7fd fade 	bl	8015ab8 <rcl_client_is_valid>
 80184fc:	b3b0      	cbz	r0, 801856c <rcl_action_wait_set_add_action_client+0x8c>
 80184fe:	6820      	ldr	r0, [r4, #0]
 8018500:	3004      	adds	r0, #4
 8018502:	f7fd fad9 	bl	8015ab8 <rcl_client_is_valid>
 8018506:	b388      	cbz	r0, 801856c <rcl_action_wait_set_add_action_client+0x8c>
 8018508:	6820      	ldr	r0, [r4, #0]
 801850a:	3008      	adds	r0, #8
 801850c:	f7fd fad4 	bl	8015ab8 <rcl_client_is_valid>
 8018510:	b360      	cbz	r0, 801856c <rcl_action_wait_set_add_action_client+0x8c>
 8018512:	6820      	ldr	r0, [r4, #0]
 8018514:	300c      	adds	r0, #12
 8018516:	f7fe fc81 	bl	8016e1c <rcl_subscription_is_valid>
 801851a:	b338      	cbz	r0, 801856c <rcl_action_wait_set_add_action_client+0x8c>
 801851c:	6820      	ldr	r0, [r4, #0]
 801851e:	3010      	adds	r0, #16
 8018520:	f7fe fc7c 	bl	8016e1c <rcl_subscription_is_valid>
 8018524:	b310      	cbz	r0, 801856c <rcl_action_wait_set_add_action_client+0x8c>
 8018526:	6821      	ldr	r1, [r4, #0]
 8018528:	4628      	mov	r0, r5
 801852a:	f501 72e2 	add.w	r2, r1, #452	; 0x1c4
 801852e:	f7ff fcd3 	bl	8017ed8 <rcl_wait_set_add_client>
 8018532:	b9b8      	cbnz	r0, 8018564 <rcl_action_wait_set_add_action_client+0x84>
 8018534:	6821      	ldr	r1, [r4, #0]
 8018536:	4628      	mov	r0, r5
 8018538:	f501 72e4 	add.w	r2, r1, #456	; 0x1c8
 801853c:	3104      	adds	r1, #4
 801853e:	f7ff fccb 	bl	8017ed8 <rcl_wait_set_add_client>
 8018542:	b978      	cbnz	r0, 8018564 <rcl_action_wait_set_add_action_client+0x84>
 8018544:	6821      	ldr	r1, [r4, #0]
 8018546:	4628      	mov	r0, r5
 8018548:	f501 72e6 	add.w	r2, r1, #460	; 0x1cc
 801854c:	3108      	adds	r1, #8
 801854e:	f7ff fcc3 	bl	8017ed8 <rcl_wait_set_add_client>
 8018552:	b938      	cbnz	r0, 8018564 <rcl_action_wait_set_add_action_client+0x84>
 8018554:	6821      	ldr	r1, [r4, #0]
 8018556:	4628      	mov	r0, r5
 8018558:	f501 72e8 	add.w	r2, r1, #464	; 0x1d0
 801855c:	310c      	adds	r1, #12
 801855e:	f7ff f96b 	bl	8017838 <rcl_wait_set_add_subscription>
 8018562:	b158      	cbz	r0, 801857c <rcl_action_wait_set_add_action_client+0x9c>
 8018564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018566:	f640 0036 	movw	r0, #2102	; 0x836
 801856a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801856c:	f7f6 fc14 	bl	800ed98 <rcutils_reset_error>
 8018570:	f640 0036 	movw	r0, #2102	; 0x836
 8018574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018576:	f44f 7061 	mov.w	r0, #900	; 0x384
 801857a:	4770      	bx	lr
 801857c:	6821      	ldr	r1, [r4, #0]
 801857e:	4628      	mov	r0, r5
 8018580:	f501 72ea 	add.w	r2, r1, #468	; 0x1d4
 8018584:	3110      	adds	r1, #16
 8018586:	f7ff f957 	bl	8017838 <rcl_wait_set_add_subscription>
 801858a:	2800      	cmp	r0, #0
 801858c:	d1ea      	bne.n	8018564 <rcl_action_wait_set_add_action_client+0x84>
 801858e:	b11f      	cbz	r7, 8018598 <rcl_action_wait_set_add_action_client+0xb8>
 8018590:	6823      	ldr	r3, [r4, #0]
 8018592:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8018596:	603b      	str	r3, [r7, #0]
 8018598:	2e00      	cmp	r6, #0
 801859a:	d0e3      	beq.n	8018564 <rcl_action_wait_set_add_action_client+0x84>
 801859c:	6823      	ldr	r3, [r4, #0]
 801859e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 80185a2:	6033      	str	r3, [r6, #0]
 80185a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80185a6:	bf00      	nop

080185a8 <rcl_action_client_wait_set_get_entities_ready>:
 80185a8:	2800      	cmp	r0, #0
 80185aa:	d050      	beq.n	801864e <rcl_action_client_wait_set_get_entities_ready+0xa6>
 80185ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80185b0:	460c      	mov	r4, r1
 80185b2:	2900      	cmp	r1, #0
 80185b4:	d03e      	beq.n	8018634 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 80185b6:	4605      	mov	r5, r0
 80185b8:	6808      	ldr	r0, [r1, #0]
 80185ba:	2800      	cmp	r0, #0
 80185bc:	d03a      	beq.n	8018634 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 80185be:	4616      	mov	r6, r2
 80185c0:	461f      	mov	r7, r3
 80185c2:	f7fd fa79 	bl	8015ab8 <rcl_client_is_valid>
 80185c6:	2800      	cmp	r0, #0
 80185c8:	d038      	beq.n	801863c <rcl_action_client_wait_set_get_entities_ready+0x94>
 80185ca:	6820      	ldr	r0, [r4, #0]
 80185cc:	3004      	adds	r0, #4
 80185ce:	f7fd fa73 	bl	8015ab8 <rcl_client_is_valid>
 80185d2:	2800      	cmp	r0, #0
 80185d4:	d032      	beq.n	801863c <rcl_action_client_wait_set_get_entities_ready+0x94>
 80185d6:	6820      	ldr	r0, [r4, #0]
 80185d8:	3008      	adds	r0, #8
 80185da:	f7fd fa6d 	bl	8015ab8 <rcl_client_is_valid>
 80185de:	b368      	cbz	r0, 801863c <rcl_action_client_wait_set_get_entities_ready+0x94>
 80185e0:	6820      	ldr	r0, [r4, #0]
 80185e2:	300c      	adds	r0, #12
 80185e4:	f7fe fc1a 	bl	8016e1c <rcl_subscription_is_valid>
 80185e8:	b340      	cbz	r0, 801863c <rcl_action_client_wait_set_get_entities_ready+0x94>
 80185ea:	6820      	ldr	r0, [r4, #0]
 80185ec:	3010      	adds	r0, #16
 80185ee:	f7fe fc15 	bl	8016e1c <rcl_subscription_is_valid>
 80185f2:	b318      	cbz	r0, 801863c <rcl_action_client_wait_set_get_entities_ready+0x94>
 80185f4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80185f8:	2a00      	cmp	r2, #0
 80185fa:	bf18      	it	ne
 80185fc:	2b00      	cmpne	r3, #0
 80185fe:	9b08      	ldr	r3, [sp, #32]
 8018600:	bf0c      	ite	eq
 8018602:	2101      	moveq	r1, #1
 8018604:	2100      	movne	r1, #0
 8018606:	2b00      	cmp	r3, #0
 8018608:	bf08      	it	eq
 801860a:	f041 0101 	orreq.w	r1, r1, #1
 801860e:	2f00      	cmp	r7, #0
 8018610:	bf08      	it	eq
 8018612:	f041 0101 	orreq.w	r1, r1, #1
 8018616:	b9b9      	cbnz	r1, 8018648 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8018618:	b1b6      	cbz	r6, 8018648 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801861a:	6823      	ldr	r3, [r4, #0]
 801861c:	686c      	ldr	r4, [r5, #4]
 801861e:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	; 0x1d0
 8018622:	428a      	cmp	r2, r1
 8018624:	4610      	mov	r0, r2
 8018626:	bf38      	it	cc
 8018628:	4608      	movcc	r0, r1
 801862a:	4284      	cmp	r4, r0
 801862c:	d812      	bhi.n	8018654 <rcl_action_client_wait_set_get_entities_ready+0xac>
 801862e:	2001      	movs	r0, #1
 8018630:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018634:	f640 0036 	movw	r0, #2102	; 0x836
 8018638:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801863c:	f7f6 fbac 	bl	800ed98 <rcutils_reset_error>
 8018640:	f640 0036 	movw	r0, #2102	; 0x836
 8018644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018648:	200b      	movs	r0, #11
 801864a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801864e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8018652:	4770      	bx	lr
 8018654:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	; 0x1c4
 8018658:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	; 0x1cc
 801865c:	45f0      	cmp	r8, lr
 801865e:	4640      	mov	r0, r8
 8018660:	69ec      	ldr	r4, [r5, #28]
 8018662:	bf38      	it	cc
 8018664:	4670      	movcc	r0, lr
 8018666:	4560      	cmp	r0, ip
 8018668:	bf38      	it	cc
 801866a:	4660      	movcc	r0, ip
 801866c:	4284      	cmp	r4, r0
 801866e:	d9de      	bls.n	801862e <rcl_action_client_wait_set_get_entities_ready+0x86>
 8018670:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8018674:	682d      	ldr	r5, [r5, #0]
 8018676:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 801867a:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 801867e:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8018682:	1a18      	subs	r0, r3, r0
 8018684:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 8018688:	f103 0c0c 	add.w	ip, r3, #12
 801868c:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 8018690:	fab0 f080 	clz	r0, r0
 8018694:	eba5 050c 	sub.w	r5, r5, ip
 8018698:	0940      	lsrs	r0, r0, #5
 801869a:	fab5 f585 	clz	r5, r5
 801869e:	096d      	lsrs	r5, r5, #5
 80186a0:	7035      	strb	r5, [r6, #0]
 80186a2:	f103 0510 	add.w	r5, r3, #16
 80186a6:	1b64      	subs	r4, r4, r5
 80186a8:	9d08      	ldr	r5, [sp, #32]
 80186aa:	fab4 f484 	clz	r4, r4
 80186ae:	0964      	lsrs	r4, r4, #5
 80186b0:	703c      	strb	r4, [r7, #0]
 80186b2:	1d1c      	adds	r4, r3, #4
 80186b4:	3308      	adds	r3, #8
 80186b6:	7028      	strb	r0, [r5, #0]
 80186b8:	1b09      	subs	r1, r1, r4
 80186ba:	2000      	movs	r0, #0
 80186bc:	1ad3      	subs	r3, r2, r3
 80186be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80186c0:	fab1 f181 	clz	r1, r1
 80186c4:	fab3 f383 	clz	r3, r3
 80186c8:	0949      	lsrs	r1, r1, #5
 80186ca:	095b      	lsrs	r3, r3, #5
 80186cc:	7011      	strb	r1, [r2, #0]
 80186ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80186d0:	7013      	strb	r3, [r2, #0]
 80186d2:	e7b1      	b.n	8018638 <rcl_action_client_wait_set_get_entities_ready+0x90>

080186d4 <rcl_action_take_goal_request>:
 80186d4:	2800      	cmp	r0, #0
 80186d6:	d039      	beq.n	801874c <rcl_action_take_goal_request+0x78>
 80186d8:	b570      	push	{r4, r5, r6, lr}
 80186da:	4604      	mov	r4, r0
 80186dc:	6800      	ldr	r0, [r0, #0]
 80186de:	b380      	cbz	r0, 8018742 <rcl_action_take_goal_request+0x6e>
 80186e0:	460e      	mov	r6, r1
 80186e2:	4615      	mov	r5, r2
 80186e4:	f7fe f9b0 	bl	8016a48 <rcl_service_is_valid>
 80186e8:	b330      	cbz	r0, 8018738 <rcl_action_take_goal_request+0x64>
 80186ea:	6820      	ldr	r0, [r4, #0]
 80186ec:	3004      	adds	r0, #4
 80186ee:	f7fe f9ab 	bl	8016a48 <rcl_service_is_valid>
 80186f2:	b308      	cbz	r0, 8018738 <rcl_action_take_goal_request+0x64>
 80186f4:	6820      	ldr	r0, [r4, #0]
 80186f6:	3008      	adds	r0, #8
 80186f8:	f7fe f9a6 	bl	8016a48 <rcl_service_is_valid>
 80186fc:	b1e0      	cbz	r0, 8018738 <rcl_action_take_goal_request+0x64>
 80186fe:	6820      	ldr	r0, [r4, #0]
 8018700:	300c      	adds	r0, #12
 8018702:	f7f5 faab 	bl	800dc5c <rcl_publisher_is_valid>
 8018706:	b1b8      	cbz	r0, 8018738 <rcl_action_take_goal_request+0x64>
 8018708:	6820      	ldr	r0, [r4, #0]
 801870a:	3010      	adds	r0, #16
 801870c:	f7f5 faa6 	bl	800dc5c <rcl_publisher_is_valid>
 8018710:	b190      	cbz	r0, 8018738 <rcl_action_take_goal_request+0x64>
 8018712:	b1cd      	cbz	r5, 8018748 <rcl_action_take_goal_request+0x74>
 8018714:	b1c6      	cbz	r6, 8018748 <rcl_action_take_goal_request+0x74>
 8018716:	462a      	mov	r2, r5
 8018718:	4631      	mov	r1, r6
 801871a:	6820      	ldr	r0, [r4, #0]
 801871c:	f7fe f914 	bl	8016948 <rcl_take_request>
 8018720:	b148      	cbz	r0, 8018736 <rcl_action_take_goal_request+0x62>
 8018722:	280a      	cmp	r0, #10
 8018724:	d007      	beq.n	8018736 <rcl_action_take_goal_request+0x62>
 8018726:	f240 2259 	movw	r2, #601	; 0x259
 801872a:	f640 0399 	movw	r3, #2201	; 0x899
 801872e:	4290      	cmp	r0, r2
 8018730:	bf0c      	ite	eq
 8018732:	4618      	moveq	r0, r3
 8018734:	2001      	movne	r0, #1
 8018736:	bd70      	pop	{r4, r5, r6, pc}
 8018738:	f7f6 fb2e 	bl	800ed98 <rcutils_reset_error>
 801873c:	f640 0098 	movw	r0, #2200	; 0x898
 8018740:	bd70      	pop	{r4, r5, r6, pc}
 8018742:	f640 0098 	movw	r0, #2200	; 0x898
 8018746:	bd70      	pop	{r4, r5, r6, pc}
 8018748:	200b      	movs	r0, #11
 801874a:	bd70      	pop	{r4, r5, r6, pc}
 801874c:	f640 0098 	movw	r0, #2200	; 0x898
 8018750:	4770      	bx	lr
 8018752:	bf00      	nop

08018754 <rcl_action_send_goal_response>:
 8018754:	b388      	cbz	r0, 80187ba <rcl_action_send_goal_response+0x66>
 8018756:	b570      	push	{r4, r5, r6, lr}
 8018758:	4604      	mov	r4, r0
 801875a:	6800      	ldr	r0, [r0, #0]
 801875c:	b340      	cbz	r0, 80187b0 <rcl_action_send_goal_response+0x5c>
 801875e:	460e      	mov	r6, r1
 8018760:	4615      	mov	r5, r2
 8018762:	f7fe f971 	bl	8016a48 <rcl_service_is_valid>
 8018766:	b1f0      	cbz	r0, 80187a6 <rcl_action_send_goal_response+0x52>
 8018768:	6820      	ldr	r0, [r4, #0]
 801876a:	3004      	adds	r0, #4
 801876c:	f7fe f96c 	bl	8016a48 <rcl_service_is_valid>
 8018770:	b1c8      	cbz	r0, 80187a6 <rcl_action_send_goal_response+0x52>
 8018772:	6820      	ldr	r0, [r4, #0]
 8018774:	3008      	adds	r0, #8
 8018776:	f7fe f967 	bl	8016a48 <rcl_service_is_valid>
 801877a:	b1a0      	cbz	r0, 80187a6 <rcl_action_send_goal_response+0x52>
 801877c:	6820      	ldr	r0, [r4, #0]
 801877e:	300c      	adds	r0, #12
 8018780:	f7f5 fa6c 	bl	800dc5c <rcl_publisher_is_valid>
 8018784:	b178      	cbz	r0, 80187a6 <rcl_action_send_goal_response+0x52>
 8018786:	6820      	ldr	r0, [r4, #0]
 8018788:	3010      	adds	r0, #16
 801878a:	f7f5 fa67 	bl	800dc5c <rcl_publisher_is_valid>
 801878e:	b150      	cbz	r0, 80187a6 <rcl_action_send_goal_response+0x52>
 8018790:	b18d      	cbz	r5, 80187b6 <rcl_action_send_goal_response+0x62>
 8018792:	b186      	cbz	r6, 80187b6 <rcl_action_send_goal_response+0x62>
 8018794:	462a      	mov	r2, r5
 8018796:	4631      	mov	r1, r6
 8018798:	6820      	ldr	r0, [r4, #0]
 801879a:	f7fe f925 	bl	80169e8 <rcl_send_response>
 801879e:	3800      	subs	r0, #0
 80187a0:	bf18      	it	ne
 80187a2:	2001      	movne	r0, #1
 80187a4:	bd70      	pop	{r4, r5, r6, pc}
 80187a6:	f7f6 faf7 	bl	800ed98 <rcutils_reset_error>
 80187aa:	f640 0098 	movw	r0, #2200	; 0x898
 80187ae:	bd70      	pop	{r4, r5, r6, pc}
 80187b0:	f640 0098 	movw	r0, #2200	; 0x898
 80187b4:	bd70      	pop	{r4, r5, r6, pc}
 80187b6:	200b      	movs	r0, #11
 80187b8:	bd70      	pop	{r4, r5, r6, pc}
 80187ba:	f640 0098 	movw	r0, #2200	; 0x898
 80187be:	4770      	bx	lr

080187c0 <rcl_action_take_result_request>:
 80187c0:	2800      	cmp	r0, #0
 80187c2:	d03a      	beq.n	801883a <rcl_action_take_result_request+0x7a>
 80187c4:	b570      	push	{r4, r5, r6, lr}
 80187c6:	4604      	mov	r4, r0
 80187c8:	6800      	ldr	r0, [r0, #0]
 80187ca:	b388      	cbz	r0, 8018830 <rcl_action_take_result_request+0x70>
 80187cc:	460e      	mov	r6, r1
 80187ce:	4615      	mov	r5, r2
 80187d0:	f7fe f93a 	bl	8016a48 <rcl_service_is_valid>
 80187d4:	b338      	cbz	r0, 8018826 <rcl_action_take_result_request+0x66>
 80187d6:	6820      	ldr	r0, [r4, #0]
 80187d8:	3004      	adds	r0, #4
 80187da:	f7fe f935 	bl	8016a48 <rcl_service_is_valid>
 80187de:	b310      	cbz	r0, 8018826 <rcl_action_take_result_request+0x66>
 80187e0:	6820      	ldr	r0, [r4, #0]
 80187e2:	3008      	adds	r0, #8
 80187e4:	f7fe f930 	bl	8016a48 <rcl_service_is_valid>
 80187e8:	b1e8      	cbz	r0, 8018826 <rcl_action_take_result_request+0x66>
 80187ea:	6820      	ldr	r0, [r4, #0]
 80187ec:	300c      	adds	r0, #12
 80187ee:	f7f5 fa35 	bl	800dc5c <rcl_publisher_is_valid>
 80187f2:	b1c0      	cbz	r0, 8018826 <rcl_action_take_result_request+0x66>
 80187f4:	6820      	ldr	r0, [r4, #0]
 80187f6:	3010      	adds	r0, #16
 80187f8:	f7f5 fa30 	bl	800dc5c <rcl_publisher_is_valid>
 80187fc:	b198      	cbz	r0, 8018826 <rcl_action_take_result_request+0x66>
 80187fe:	b1d5      	cbz	r5, 8018836 <rcl_action_take_result_request+0x76>
 8018800:	b1ce      	cbz	r6, 8018836 <rcl_action_take_result_request+0x76>
 8018802:	6820      	ldr	r0, [r4, #0]
 8018804:	462a      	mov	r2, r5
 8018806:	4631      	mov	r1, r6
 8018808:	3008      	adds	r0, #8
 801880a:	f7fe f89d 	bl	8016948 <rcl_take_request>
 801880e:	b148      	cbz	r0, 8018824 <rcl_action_take_result_request+0x64>
 8018810:	280a      	cmp	r0, #10
 8018812:	d007      	beq.n	8018824 <rcl_action_take_result_request+0x64>
 8018814:	f240 2259 	movw	r2, #601	; 0x259
 8018818:	f640 0399 	movw	r3, #2201	; 0x899
 801881c:	4290      	cmp	r0, r2
 801881e:	bf0c      	ite	eq
 8018820:	4618      	moveq	r0, r3
 8018822:	2001      	movne	r0, #1
 8018824:	bd70      	pop	{r4, r5, r6, pc}
 8018826:	f7f6 fab7 	bl	800ed98 <rcutils_reset_error>
 801882a:	f640 0098 	movw	r0, #2200	; 0x898
 801882e:	bd70      	pop	{r4, r5, r6, pc}
 8018830:	f640 0098 	movw	r0, #2200	; 0x898
 8018834:	bd70      	pop	{r4, r5, r6, pc}
 8018836:	200b      	movs	r0, #11
 8018838:	bd70      	pop	{r4, r5, r6, pc}
 801883a:	f640 0098 	movw	r0, #2200	; 0x898
 801883e:	4770      	bx	lr

08018840 <rcl_action_take_cancel_request>:
 8018840:	2800      	cmp	r0, #0
 8018842:	d03a      	beq.n	80188ba <rcl_action_take_cancel_request+0x7a>
 8018844:	b570      	push	{r4, r5, r6, lr}
 8018846:	4604      	mov	r4, r0
 8018848:	6800      	ldr	r0, [r0, #0]
 801884a:	b388      	cbz	r0, 80188b0 <rcl_action_take_cancel_request+0x70>
 801884c:	460e      	mov	r6, r1
 801884e:	4615      	mov	r5, r2
 8018850:	f7fe f8fa 	bl	8016a48 <rcl_service_is_valid>
 8018854:	b338      	cbz	r0, 80188a6 <rcl_action_take_cancel_request+0x66>
 8018856:	6820      	ldr	r0, [r4, #0]
 8018858:	3004      	adds	r0, #4
 801885a:	f7fe f8f5 	bl	8016a48 <rcl_service_is_valid>
 801885e:	b310      	cbz	r0, 80188a6 <rcl_action_take_cancel_request+0x66>
 8018860:	6820      	ldr	r0, [r4, #0]
 8018862:	3008      	adds	r0, #8
 8018864:	f7fe f8f0 	bl	8016a48 <rcl_service_is_valid>
 8018868:	b1e8      	cbz	r0, 80188a6 <rcl_action_take_cancel_request+0x66>
 801886a:	6820      	ldr	r0, [r4, #0]
 801886c:	300c      	adds	r0, #12
 801886e:	f7f5 f9f5 	bl	800dc5c <rcl_publisher_is_valid>
 8018872:	b1c0      	cbz	r0, 80188a6 <rcl_action_take_cancel_request+0x66>
 8018874:	6820      	ldr	r0, [r4, #0]
 8018876:	3010      	adds	r0, #16
 8018878:	f7f5 f9f0 	bl	800dc5c <rcl_publisher_is_valid>
 801887c:	b198      	cbz	r0, 80188a6 <rcl_action_take_cancel_request+0x66>
 801887e:	b1d5      	cbz	r5, 80188b6 <rcl_action_take_cancel_request+0x76>
 8018880:	b1ce      	cbz	r6, 80188b6 <rcl_action_take_cancel_request+0x76>
 8018882:	6820      	ldr	r0, [r4, #0]
 8018884:	462a      	mov	r2, r5
 8018886:	4631      	mov	r1, r6
 8018888:	3004      	adds	r0, #4
 801888a:	f7fe f85d 	bl	8016948 <rcl_take_request>
 801888e:	b148      	cbz	r0, 80188a4 <rcl_action_take_cancel_request+0x64>
 8018890:	280a      	cmp	r0, #10
 8018892:	d007      	beq.n	80188a4 <rcl_action_take_cancel_request+0x64>
 8018894:	f240 2259 	movw	r2, #601	; 0x259
 8018898:	f640 0399 	movw	r3, #2201	; 0x899
 801889c:	4290      	cmp	r0, r2
 801889e:	bf0c      	ite	eq
 80188a0:	4618      	moveq	r0, r3
 80188a2:	2001      	movne	r0, #1
 80188a4:	bd70      	pop	{r4, r5, r6, pc}
 80188a6:	f7f6 fa77 	bl	800ed98 <rcutils_reset_error>
 80188aa:	f640 0098 	movw	r0, #2200	; 0x898
 80188ae:	bd70      	pop	{r4, r5, r6, pc}
 80188b0:	f640 0098 	movw	r0, #2200	; 0x898
 80188b4:	bd70      	pop	{r4, r5, r6, pc}
 80188b6:	200b      	movs	r0, #11
 80188b8:	bd70      	pop	{r4, r5, r6, pc}
 80188ba:	f640 0098 	movw	r0, #2200	; 0x898
 80188be:	4770      	bx	lr

080188c0 <rcl_action_send_cancel_response>:
 80188c0:	b390      	cbz	r0, 8018928 <rcl_action_send_cancel_response+0x68>
 80188c2:	b570      	push	{r4, r5, r6, lr}
 80188c4:	4604      	mov	r4, r0
 80188c6:	6800      	ldr	r0, [r0, #0]
 80188c8:	b348      	cbz	r0, 801891e <rcl_action_send_cancel_response+0x5e>
 80188ca:	460e      	mov	r6, r1
 80188cc:	4615      	mov	r5, r2
 80188ce:	f7fe f8bb 	bl	8016a48 <rcl_service_is_valid>
 80188d2:	b1f8      	cbz	r0, 8018914 <rcl_action_send_cancel_response+0x54>
 80188d4:	6820      	ldr	r0, [r4, #0]
 80188d6:	3004      	adds	r0, #4
 80188d8:	f7fe f8b6 	bl	8016a48 <rcl_service_is_valid>
 80188dc:	b1d0      	cbz	r0, 8018914 <rcl_action_send_cancel_response+0x54>
 80188de:	6820      	ldr	r0, [r4, #0]
 80188e0:	3008      	adds	r0, #8
 80188e2:	f7fe f8b1 	bl	8016a48 <rcl_service_is_valid>
 80188e6:	b1a8      	cbz	r0, 8018914 <rcl_action_send_cancel_response+0x54>
 80188e8:	6820      	ldr	r0, [r4, #0]
 80188ea:	300c      	adds	r0, #12
 80188ec:	f7f5 f9b6 	bl	800dc5c <rcl_publisher_is_valid>
 80188f0:	b180      	cbz	r0, 8018914 <rcl_action_send_cancel_response+0x54>
 80188f2:	6820      	ldr	r0, [r4, #0]
 80188f4:	3010      	adds	r0, #16
 80188f6:	f7f5 f9b1 	bl	800dc5c <rcl_publisher_is_valid>
 80188fa:	b158      	cbz	r0, 8018914 <rcl_action_send_cancel_response+0x54>
 80188fc:	b195      	cbz	r5, 8018924 <rcl_action_send_cancel_response+0x64>
 80188fe:	b18e      	cbz	r6, 8018924 <rcl_action_send_cancel_response+0x64>
 8018900:	6820      	ldr	r0, [r4, #0]
 8018902:	462a      	mov	r2, r5
 8018904:	4631      	mov	r1, r6
 8018906:	3004      	adds	r0, #4
 8018908:	f7fe f86e 	bl	80169e8 <rcl_send_response>
 801890c:	3800      	subs	r0, #0
 801890e:	bf18      	it	ne
 8018910:	2001      	movne	r0, #1
 8018912:	bd70      	pop	{r4, r5, r6, pc}
 8018914:	f7f6 fa40 	bl	800ed98 <rcutils_reset_error>
 8018918:	f640 0098 	movw	r0, #2200	; 0x898
 801891c:	bd70      	pop	{r4, r5, r6, pc}
 801891e:	f640 0098 	movw	r0, #2200	; 0x898
 8018922:	bd70      	pop	{r4, r5, r6, pc}
 8018924:	200b      	movs	r0, #11
 8018926:	bd70      	pop	{r4, r5, r6, pc}
 8018928:	f640 0098 	movw	r0, #2200	; 0x898
 801892c:	4770      	bx	lr
 801892e:	bf00      	nop

08018930 <rcl_action_wait_set_add_action_server>:
 8018930:	2800      	cmp	r0, #0
 8018932:	d04d      	beq.n	80189d0 <rcl_action_wait_set_add_action_server+0xa0>
 8018934:	b570      	push	{r4, r5, r6, lr}
 8018936:	460c      	mov	r4, r1
 8018938:	b159      	cbz	r1, 8018952 <rcl_action_wait_set_add_action_server+0x22>
 801893a:	4605      	mov	r5, r0
 801893c:	6808      	ldr	r0, [r1, #0]
 801893e:	b140      	cbz	r0, 8018952 <rcl_action_wait_set_add_action_server+0x22>
 8018940:	4616      	mov	r6, r2
 8018942:	f7fe f881 	bl	8016a48 <rcl_service_is_valid>
 8018946:	b120      	cbz	r0, 8018952 <rcl_action_wait_set_add_action_server+0x22>
 8018948:	6820      	ldr	r0, [r4, #0]
 801894a:	3004      	adds	r0, #4
 801894c:	f7fe f87c 	bl	8016a48 <rcl_service_is_valid>
 8018950:	b910      	cbnz	r0, 8018958 <rcl_action_wait_set_add_action_server+0x28>
 8018952:	f640 0098 	movw	r0, #2200	; 0x898
 8018956:	bd70      	pop	{r4, r5, r6, pc}
 8018958:	6820      	ldr	r0, [r4, #0]
 801895a:	3008      	adds	r0, #8
 801895c:	f7fe f874 	bl	8016a48 <rcl_service_is_valid>
 8018960:	2800      	cmp	r0, #0
 8018962:	d0f6      	beq.n	8018952 <rcl_action_wait_set_add_action_server+0x22>
 8018964:	6820      	ldr	r0, [r4, #0]
 8018966:	300c      	adds	r0, #12
 8018968:	f7f5 f990 	bl	800dc8c <rcl_publisher_is_valid_except_context>
 801896c:	2800      	cmp	r0, #0
 801896e:	d0f0      	beq.n	8018952 <rcl_action_wait_set_add_action_server+0x22>
 8018970:	6820      	ldr	r0, [r4, #0]
 8018972:	3010      	adds	r0, #16
 8018974:	f7f5 f98a 	bl	800dc8c <rcl_publisher_is_valid_except_context>
 8018978:	2800      	cmp	r0, #0
 801897a:	d0ea      	beq.n	8018952 <rcl_action_wait_set_add_action_server+0x22>
 801897c:	6821      	ldr	r1, [r4, #0]
 801897e:	4628      	mov	r0, r5
 8018980:	f501 72ee 	add.w	r2, r1, #476	; 0x1dc
 8018984:	f7ff fad4 	bl	8017f30 <rcl_wait_set_add_service>
 8018988:	2800      	cmp	r0, #0
 801898a:	d1e4      	bne.n	8018956 <rcl_action_wait_set_add_action_server+0x26>
 801898c:	6821      	ldr	r1, [r4, #0]
 801898e:	4628      	mov	r0, r5
 8018990:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
 8018994:	3104      	adds	r1, #4
 8018996:	f7ff facb 	bl	8017f30 <rcl_wait_set_add_service>
 801899a:	2800      	cmp	r0, #0
 801899c:	d1db      	bne.n	8018956 <rcl_action_wait_set_add_action_server+0x26>
 801899e:	6821      	ldr	r1, [r4, #0]
 80189a0:	4628      	mov	r0, r5
 80189a2:	f501 72f2 	add.w	r2, r1, #484	; 0x1e4
 80189a6:	3108      	adds	r1, #8
 80189a8:	f7ff fac2 	bl	8017f30 <rcl_wait_set_add_service>
 80189ac:	2800      	cmp	r0, #0
 80189ae:	d1d2      	bne.n	8018956 <rcl_action_wait_set_add_action_server+0x26>
 80189b0:	6821      	ldr	r1, [r4, #0]
 80189b2:	4628      	mov	r0, r5
 80189b4:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
 80189b8:	3114      	adds	r1, #20
 80189ba:	f7ff fa5d 	bl	8017e78 <rcl_wait_set_add_timer>
 80189be:	2800      	cmp	r0, #0
 80189c0:	d1c9      	bne.n	8018956 <rcl_action_wait_set_add_action_server+0x26>
 80189c2:	2e00      	cmp	r6, #0
 80189c4:	d0c7      	beq.n	8018956 <rcl_action_wait_set_add_action_server+0x26>
 80189c6:	6823      	ldr	r3, [r4, #0]
 80189c8:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 80189cc:	6033      	str	r3, [r6, #0]
 80189ce:	bd70      	pop	{r4, r5, r6, pc}
 80189d0:	f44f 7061 	mov.w	r0, #900	; 0x384
 80189d4:	4770      	bx	lr
 80189d6:	bf00      	nop

080189d8 <rcl_action_server_wait_set_get_entities_ready>:
 80189d8:	2800      	cmp	r0, #0
 80189da:	d067      	beq.n	8018aac <rcl_action_server_wait_set_get_entities_ready+0xd4>
 80189dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80189e0:	460c      	mov	r4, r1
 80189e2:	b161      	cbz	r1, 80189fe <rcl_action_server_wait_set_get_entities_ready+0x26>
 80189e4:	4605      	mov	r5, r0
 80189e6:	6808      	ldr	r0, [r1, #0]
 80189e8:	b148      	cbz	r0, 80189fe <rcl_action_server_wait_set_get_entities_ready+0x26>
 80189ea:	4616      	mov	r6, r2
 80189ec:	4698      	mov	r8, r3
 80189ee:	f7fe f82b 	bl	8016a48 <rcl_service_is_valid>
 80189f2:	b120      	cbz	r0, 80189fe <rcl_action_server_wait_set_get_entities_ready+0x26>
 80189f4:	6820      	ldr	r0, [r4, #0]
 80189f6:	3004      	adds	r0, #4
 80189f8:	f7fe f826 	bl	8016a48 <rcl_service_is_valid>
 80189fc:	b918      	cbnz	r0, 8018a06 <rcl_action_server_wait_set_get_entities_ready+0x2e>
 80189fe:	f640 0098 	movw	r0, #2200	; 0x898
 8018a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a06:	6820      	ldr	r0, [r4, #0]
 8018a08:	3008      	adds	r0, #8
 8018a0a:	f7fe f81d 	bl	8016a48 <rcl_service_is_valid>
 8018a0e:	2800      	cmp	r0, #0
 8018a10:	d0f5      	beq.n	80189fe <rcl_action_server_wait_set_get_entities_ready+0x26>
 8018a12:	6820      	ldr	r0, [r4, #0]
 8018a14:	300c      	adds	r0, #12
 8018a16:	f7f5 f939 	bl	800dc8c <rcl_publisher_is_valid_except_context>
 8018a1a:	2800      	cmp	r0, #0
 8018a1c:	d0ef      	beq.n	80189fe <rcl_action_server_wait_set_get_entities_ready+0x26>
 8018a1e:	6820      	ldr	r0, [r4, #0]
 8018a20:	3010      	adds	r0, #16
 8018a22:	f7f5 f933 	bl	800dc8c <rcl_publisher_is_valid_except_context>
 8018a26:	2800      	cmp	r0, #0
 8018a28:	d0e9      	beq.n	80189fe <rcl_action_server_wait_set_get_entities_ready+0x26>
 8018a2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018a2e:	2a00      	cmp	r2, #0
 8018a30:	bf18      	it	ne
 8018a32:	2b00      	cmpne	r3, #0
 8018a34:	bf0c      	ite	eq
 8018a36:	2101      	moveq	r1, #1
 8018a38:	2100      	movne	r1, #0
 8018a3a:	f1b8 0f00 	cmp.w	r8, #0
 8018a3e:	bf08      	it	eq
 8018a40:	f041 0101 	orreq.w	r1, r1, #1
 8018a44:	bba9      	cbnz	r1, 8018ab2 <rcl_action_server_wait_set_get_entities_ready+0xda>
 8018a46:	b3a6      	cbz	r6, 8018ab2 <rcl_action_server_wait_set_get_entities_ready+0xda>
 8018a48:	6821      	ldr	r1, [r4, #0]
 8018a4a:	2000      	movs	r0, #0
 8018a4c:	692c      	ldr	r4, [r5, #16]
 8018a4e:	f8d1 21e8 	ldr.w	r2, [r1, #488]	; 0x1e8
 8018a52:	6a2f      	ldr	r7, [r5, #32]
 8018a54:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018a58:	f8d1 41dc 	ldr.w	r4, [r1, #476]	; 0x1dc
 8018a5c:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
 8018a60:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 8018a64:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 8018a68:	1a64      	subs	r4, r4, r1
 8018a6a:	f8d1 31e4 	ldr.w	r3, [r1, #484]	; 0x1e4
 8018a6e:	fab4 f484 	clz	r4, r4
 8018a72:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8018a76:	0964      	lsrs	r4, r4, #5
 8018a78:	7034      	strb	r4, [r6, #0]
 8018a7a:	1d0c      	adds	r4, r1, #4
 8018a7c:	1b2c      	subs	r4, r5, r4
 8018a7e:	fab4 f484 	clz	r4, r4
 8018a82:	0964      	lsrs	r4, r4, #5
 8018a84:	f888 4000 	strb.w	r4, [r8]
 8018a88:	f101 0408 	add.w	r4, r1, #8
 8018a8c:	1b1b      	subs	r3, r3, r4
 8018a8e:	9c06      	ldr	r4, [sp, #24]
 8018a90:	fab3 f383 	clz	r3, r3
 8018a94:	095b      	lsrs	r3, r3, #5
 8018a96:	7023      	strb	r3, [r4, #0]
 8018a98:	f101 0314 	add.w	r3, r1, #20
 8018a9c:	1ad3      	subs	r3, r2, r3
 8018a9e:	9a07      	ldr	r2, [sp, #28]
 8018aa0:	fab3 f383 	clz	r3, r3
 8018aa4:	095b      	lsrs	r3, r3, #5
 8018aa6:	7013      	strb	r3, [r2, #0]
 8018aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018aac:	f44f 7061 	mov.w	r0, #900	; 0x384
 8018ab0:	4770      	bx	lr
 8018ab2:	200b      	movs	r0, #11
 8018ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018ab8 <_execute_event_handler>:
 8018ab8:	2002      	movs	r0, #2
 8018aba:	4770      	bx	lr

08018abc <_cancel_goal_event_handler>:
 8018abc:	2003      	movs	r0, #3
 8018abe:	4770      	bx	lr

08018ac0 <_succeed_event_handler>:
 8018ac0:	2004      	movs	r0, #4
 8018ac2:	4770      	bx	lr

08018ac4 <_abort_event_handler>:
 8018ac4:	2006      	movs	r0, #6
 8018ac6:	4770      	bx	lr

08018ac8 <_canceled_event_handler>:
 8018ac8:	2005      	movs	r0, #5
 8018aca:	4770      	bx	lr

08018acc <rcl_action_transition_goal_state>:
 8018acc:	b2c2      	uxtb	r2, r0
 8018ace:	2a06      	cmp	r2, #6
 8018ad0:	d810      	bhi.n	8018af4 <rcl_action_transition_goal_state+0x28>
 8018ad2:	2904      	cmp	r1, #4
 8018ad4:	d80e      	bhi.n	8018af4 <rcl_action_transition_goal_state+0x28>
 8018ad6:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8018ada:	b410      	push	{r4}
 8018adc:	1853      	adds	r3, r2, r1
 8018ade:	4c06      	ldr	r4, [pc, #24]	; (8018af8 <rcl_action_transition_goal_state+0x2c>)
 8018ae0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8018ae4:	b113      	cbz	r3, 8018aec <rcl_action_transition_goal_state+0x20>
 8018ae6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018aea:	4718      	bx	r3
 8018aec:	2000      	movs	r0, #0
 8018aee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018af2:	4770      	bx	lr
 8018af4:	2000      	movs	r0, #0
 8018af6:	4770      	bx	lr
 8018af8:	08021028 	.word	0x08021028

08018afc <rcl_action_get_zero_initialized_cancel_response>:
 8018afc:	b510      	push	{r4, lr}
 8018afe:	4c07      	ldr	r4, [pc, #28]	; (8018b1c <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8018b00:	4686      	mov	lr, r0
 8018b02:	4684      	mov	ip, r0
 8018b04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018b06:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018b0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018b0c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018b10:	6823      	ldr	r3, [r4, #0]
 8018b12:	4670      	mov	r0, lr
 8018b14:	f8cc 3000 	str.w	r3, [ip]
 8018b18:	bd10      	pop	{r4, pc}
 8018b1a:	bf00      	nop
 8018b1c:	080210b4 	.word	0x080210b4

08018b20 <rclc_action_send_result_request>:
 8018b20:	b1d0      	cbz	r0, 8018b58 <rclc_action_send_result_request+0x38>
 8018b22:	4684      	mov	ip, r0
 8018b24:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8018b28:	b500      	push	{lr}
 8018b2a:	b087      	sub	sp, #28
 8018b2c:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8018b30:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8018b34:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8018b38:	f10d 0e08 	add.w	lr, sp, #8
 8018b3c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8018b40:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8018b44:	f10c 0240 	add.w	r2, ip, #64	; 0x40
 8018b48:	a902      	add	r1, sp, #8
 8018b4a:	3010      	adds	r0, #16
 8018b4c:	f7ff fbcc 	bl	80182e8 <rcl_action_send_result_request>
 8018b50:	b920      	cbnz	r0, 8018b5c <rclc_action_send_result_request+0x3c>
 8018b52:	b007      	add	sp, #28
 8018b54:	f85d fb04 	ldr.w	pc, [sp], #4
 8018b58:	200b      	movs	r0, #11
 8018b5a:	4770      	bx	lr
 8018b5c:	9001      	str	r0, [sp, #4]
 8018b5e:	f7f6 f91b 	bl	800ed98 <rcutils_reset_error>
 8018b62:	9801      	ldr	r0, [sp, #4]
 8018b64:	b007      	add	sp, #28
 8018b66:	f85d fb04 	ldr.w	pc, [sp], #4
 8018b6a:	bf00      	nop

08018b6c <rclc_action_take_goal_handle>:
 8018b6c:	b160      	cbz	r0, 8018b88 <rclc_action_take_goal_handle+0x1c>
 8018b6e:	6883      	ldr	r3, [r0, #8]
 8018b70:	b143      	cbz	r3, 8018b84 <rclc_action_take_goal_handle+0x18>
 8018b72:	6819      	ldr	r1, [r3, #0]
 8018b74:	2200      	movs	r2, #0
 8018b76:	6081      	str	r1, [r0, #8]
 8018b78:	721a      	strb	r2, [r3, #8]
 8018b7a:	68c1      	ldr	r1, [r0, #12]
 8018b7c:	621a      	str	r2, [r3, #32]
 8018b7e:	849a      	strh	r2, [r3, #36]	; 0x24
 8018b80:	6019      	str	r1, [r3, #0]
 8018b82:	60c3      	str	r3, [r0, #12]
 8018b84:	4618      	mov	r0, r3
 8018b86:	4770      	bx	lr
 8018b88:	4603      	mov	r3, r0
 8018b8a:	e7fb      	b.n	8018b84 <rclc_action_take_goal_handle+0x18>

08018b8c <rclc_action_remove_used_goal_handle>:
 8018b8c:	b180      	cbz	r0, 8018bb0 <rclc_action_remove_used_goal_handle+0x24>
 8018b8e:	b179      	cbz	r1, 8018bb0 <rclc_action_remove_used_goal_handle+0x24>
 8018b90:	68c3      	ldr	r3, [r0, #12]
 8018b92:	4299      	cmp	r1, r3
 8018b94:	d00d      	beq.n	8018bb2 <rclc_action_remove_used_goal_handle+0x26>
 8018b96:	b12b      	cbz	r3, 8018ba4 <rclc_action_remove_used_goal_handle+0x18>
 8018b98:	681a      	ldr	r2, [r3, #0]
 8018b9a:	4291      	cmp	r1, r2
 8018b9c:	d003      	beq.n	8018ba6 <rclc_action_remove_used_goal_handle+0x1a>
 8018b9e:	4613      	mov	r3, r2
 8018ba0:	2b00      	cmp	r3, #0
 8018ba2:	d1f9      	bne.n	8018b98 <rclc_action_remove_used_goal_handle+0xc>
 8018ba4:	4770      	bx	lr
 8018ba6:	680a      	ldr	r2, [r1, #0]
 8018ba8:	601a      	str	r2, [r3, #0]
 8018baa:	6883      	ldr	r3, [r0, #8]
 8018bac:	600b      	str	r3, [r1, #0]
 8018bae:	6081      	str	r1, [r0, #8]
 8018bb0:	4770      	bx	lr
 8018bb2:	680b      	ldr	r3, [r1, #0]
 8018bb4:	60c3      	str	r3, [r0, #12]
 8018bb6:	e7f8      	b.n	8018baa <rclc_action_remove_used_goal_handle+0x1e>

08018bb8 <rclc_action_find_goal_handle_by_uuid>:
 8018bb8:	b538      	push	{r3, r4, r5, lr}
 8018bba:	b181      	cbz	r1, 8018bde <rclc_action_find_goal_handle_by_uuid+0x26>
 8018bbc:	b178      	cbz	r0, 8018bde <rclc_action_find_goal_handle_by_uuid+0x26>
 8018bbe:	68c4      	ldr	r4, [r0, #12]
 8018bc0:	460d      	mov	r5, r1
 8018bc2:	b914      	cbnz	r4, 8018bca <rclc_action_find_goal_handle_by_uuid+0x12>
 8018bc4:	e009      	b.n	8018bda <rclc_action_find_goal_handle_by_uuid+0x22>
 8018bc6:	6824      	ldr	r4, [r4, #0]
 8018bc8:	b13c      	cbz	r4, 8018bda <rclc_action_find_goal_handle_by_uuid+0x22>
 8018bca:	f104 0009 	add.w	r0, r4, #9
 8018bce:	2210      	movs	r2, #16
 8018bd0:	4629      	mov	r1, r5
 8018bd2:	f005 fe31 	bl	801e838 <memcmp>
 8018bd6:	2800      	cmp	r0, #0
 8018bd8:	d1f5      	bne.n	8018bc6 <rclc_action_find_goal_handle_by_uuid+0xe>
 8018bda:	4620      	mov	r0, r4
 8018bdc:	bd38      	pop	{r3, r4, r5, pc}
 8018bde:	2400      	movs	r4, #0
 8018be0:	4620      	mov	r0, r4
 8018be2:	bd38      	pop	{r3, r4, r5, pc}

08018be4 <rclc_action_find_first_handle_by_status>:
 8018be4:	b140      	cbz	r0, 8018bf8 <rclc_action_find_first_handle_by_status+0x14>
 8018be6:	68c0      	ldr	r0, [r0, #12]
 8018be8:	b910      	cbnz	r0, 8018bf0 <rclc_action_find_first_handle_by_status+0xc>
 8018bea:	e005      	b.n	8018bf8 <rclc_action_find_first_handle_by_status+0x14>
 8018bec:	6800      	ldr	r0, [r0, #0]
 8018bee:	b118      	cbz	r0, 8018bf8 <rclc_action_find_first_handle_by_status+0x14>
 8018bf0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8018bf4:	428b      	cmp	r3, r1
 8018bf6:	d1f9      	bne.n	8018bec <rclc_action_find_first_handle_by_status+0x8>
 8018bf8:	4770      	bx	lr
 8018bfa:	bf00      	nop

08018bfc <rclc_action_find_first_terminated_handle>:
 8018bfc:	b140      	cbz	r0, 8018c10 <rclc_action_find_first_terminated_handle+0x14>
 8018bfe:	68c0      	ldr	r0, [r0, #12]
 8018c00:	b910      	cbnz	r0, 8018c08 <rclc_action_find_first_terminated_handle+0xc>
 8018c02:	e005      	b.n	8018c10 <rclc_action_find_first_terminated_handle+0x14>
 8018c04:	6800      	ldr	r0, [r0, #0]
 8018c06:	b118      	cbz	r0, 8018c10 <rclc_action_find_first_terminated_handle+0x14>
 8018c08:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8018c0c:	2b03      	cmp	r3, #3
 8018c0e:	ddf9      	ble.n	8018c04 <rclc_action_find_first_terminated_handle+0x8>
 8018c10:	4770      	bx	lr
 8018c12:	bf00      	nop

08018c14 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8018c14:	b170      	cbz	r0, 8018c34 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8018c16:	68c0      	ldr	r0, [r0, #12]
 8018c18:	b160      	cbz	r0, 8018c34 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8018c1a:	b410      	push	{r4}
 8018c1c:	e001      	b.n	8018c22 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8018c1e:	6800      	ldr	r0, [r0, #0]
 8018c20:	b128      	cbz	r0, 8018c2e <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8018c22:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	; 0x28
 8018c26:	4299      	cmp	r1, r3
 8018c28:	bf08      	it	eq
 8018c2a:	4294      	cmpeq	r4, r2
 8018c2c:	d1f7      	bne.n	8018c1e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8018c2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018c32:	4770      	bx	lr
 8018c34:	4770      	bx	lr
 8018c36:	bf00      	nop

08018c38 <rclc_action_find_handle_by_result_request_sequence_number>:
 8018c38:	b170      	cbz	r0, 8018c58 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8018c3a:	68c0      	ldr	r0, [r0, #12]
 8018c3c:	b160      	cbz	r0, 8018c58 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8018c3e:	b410      	push	{r4}
 8018c40:	e001      	b.n	8018c46 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8018c42:	6800      	ldr	r0, [r0, #0]
 8018c44:	b128      	cbz	r0, 8018c52 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8018c46:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	; 0x40
 8018c4a:	4299      	cmp	r1, r3
 8018c4c:	bf08      	it	eq
 8018c4e:	4294      	cmpeq	r4, r2
 8018c50:	d1f7      	bne.n	8018c42 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8018c52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018c56:	4770      	bx	lr
 8018c58:	4770      	bx	lr
 8018c5a:	bf00      	nop

08018c5c <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8018c5c:	b170      	cbz	r0, 8018c7c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8018c5e:	68c0      	ldr	r0, [r0, #12]
 8018c60:	b160      	cbz	r0, 8018c7c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8018c62:	b410      	push	{r4}
 8018c64:	e001      	b.n	8018c6a <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8018c66:	6800      	ldr	r0, [r0, #0]
 8018c68:	b128      	cbz	r0, 8018c76 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8018c6a:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	; 0x58
 8018c6e:	4299      	cmp	r1, r3
 8018c70:	bf08      	it	eq
 8018c72:	4294      	cmpeq	r4, r2
 8018c74:	d1f7      	bne.n	8018c66 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8018c76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018c7a:	4770      	bx	lr
 8018c7c:	4770      	bx	lr
 8018c7e:	bf00      	nop

08018c80 <rclc_action_find_first_handle_with_goal_response>:
 8018c80:	b140      	cbz	r0, 8018c94 <rclc_action_find_first_handle_with_goal_response+0x14>
 8018c82:	68c0      	ldr	r0, [r0, #12]
 8018c84:	b910      	cbnz	r0, 8018c8c <rclc_action_find_first_handle_with_goal_response+0xc>
 8018c86:	e005      	b.n	8018c94 <rclc_action_find_first_handle_with_goal_response+0x14>
 8018c88:	6800      	ldr	r0, [r0, #0]
 8018c8a:	b118      	cbz	r0, 8018c94 <rclc_action_find_first_handle_with_goal_response+0x14>
 8018c8c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8018c90:	2b00      	cmp	r3, #0
 8018c92:	d0f9      	beq.n	8018c88 <rclc_action_find_first_handle_with_goal_response+0x8>
 8018c94:	4770      	bx	lr
 8018c96:	bf00      	nop

08018c98 <rclc_action_find_first_handle_with_result_response>:
 8018c98:	b140      	cbz	r0, 8018cac <rclc_action_find_first_handle_with_result_response+0x14>
 8018c9a:	68c0      	ldr	r0, [r0, #12]
 8018c9c:	b910      	cbnz	r0, 8018ca4 <rclc_action_find_first_handle_with_result_response+0xc>
 8018c9e:	e005      	b.n	8018cac <rclc_action_find_first_handle_with_result_response+0x14>
 8018ca0:	6800      	ldr	r0, [r0, #0]
 8018ca2:	b118      	cbz	r0, 8018cac <rclc_action_find_first_handle_with_result_response+0x14>
 8018ca4:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8018ca8:	2b00      	cmp	r3, #0
 8018caa:	d0f9      	beq.n	8018ca0 <rclc_action_find_first_handle_with_result_response+0x8>
 8018cac:	4770      	bx	lr
 8018cae:	bf00      	nop

08018cb0 <rclc_action_server_response_goal_request>:
 8018cb0:	b198      	cbz	r0, 8018cda <rclc_action_server_response_goal_request+0x2a>
 8018cb2:	2200      	movs	r2, #0
 8018cb4:	460b      	mov	r3, r1
 8018cb6:	f100 0128 	add.w	r1, r0, #40	; 0x28
 8018cba:	b510      	push	{r4, lr}
 8018cbc:	6844      	ldr	r4, [r0, #4]
 8018cbe:	b086      	sub	sp, #24
 8018cc0:	f104 0010 	add.w	r0, r4, #16
 8018cc4:	9205      	str	r2, [sp, #20]
 8018cc6:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8018cca:	aa03      	add	r2, sp, #12
 8018ccc:	f88d 300c 	strb.w	r3, [sp, #12]
 8018cd0:	f7ff fd40 	bl	8018754 <rcl_action_send_goal_response>
 8018cd4:	b918      	cbnz	r0, 8018cde <rclc_action_server_response_goal_request+0x2e>
 8018cd6:	b006      	add	sp, #24
 8018cd8:	bd10      	pop	{r4, pc}
 8018cda:	200b      	movs	r0, #11
 8018cdc:	4770      	bx	lr
 8018cde:	9001      	str	r0, [sp, #4]
 8018ce0:	f7f6 f85a 	bl	800ed98 <rcutils_reset_error>
 8018ce4:	9801      	ldr	r0, [sp, #4]
 8018ce6:	b006      	add	sp, #24
 8018ce8:	bd10      	pop	{r4, pc}
 8018cea:	bf00      	nop
 8018cec:	0000      	movs	r0, r0
	...

08018cf0 <rclc_action_server_goal_cancel_accept>:
 8018cf0:	b310      	cbz	r0, 8018d38 <rclc_action_server_goal_cancel_accept+0x48>
 8018cf2:	b510      	push	{r4, lr}
 8018cf4:	b090      	sub	sp, #64	; 0x40
 8018cf6:	4604      	mov	r4, r0
 8018cf8:	a806      	add	r0, sp, #24
 8018cfa:	f7ff feff 	bl	8018afc <rcl_action_get_zero_initialized_cancel_response>
 8018cfe:	2300      	movs	r3, #0
 8018d00:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8018d04:	46ec      	mov	ip, sp
 8018d06:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8018d0a:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8018d0e:	f88d 3018 	strb.w	r3, [sp, #24]
 8018d12:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8018d16:	f8cd d01c 	str.w	sp, [sp, #28]
 8018d1a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018d1e:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8018d40 <rclc_action_server_goal_cancel_accept+0x50>
 8018d22:	6860      	ldr	r0, [r4, #4]
 8018d24:	aa06      	add	r2, sp, #24
 8018d26:	f104 0158 	add.w	r1, r4, #88	; 0x58
 8018d2a:	3010      	adds	r0, #16
 8018d2c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8018d30:	f7ff fdc6 	bl	80188c0 <rcl_action_send_cancel_response>
 8018d34:	b010      	add	sp, #64	; 0x40
 8018d36:	bd10      	pop	{r4, pc}
 8018d38:	200b      	movs	r0, #11
 8018d3a:	4770      	bx	lr
 8018d3c:	f3af 8000 	nop.w
 8018d40:	00000001 	.word	0x00000001
 8018d44:	00000001 	.word	0x00000001

08018d48 <rclc_action_server_goal_cancel_reject>:
 8018d48:	b082      	sub	sp, #8
 8018d4a:	b530      	push	{r4, r5, lr}
 8018d4c:	b08b      	sub	sp, #44	; 0x2c
 8018d4e:	ac0e      	add	r4, sp, #56	; 0x38
 8018d50:	e884 000c 	stmia.w	r4, {r2, r3}
 8018d54:	b188      	cbz	r0, 8018d7a <rclc_action_server_goal_cancel_reject+0x32>
 8018d56:	4604      	mov	r4, r0
 8018d58:	a801      	add	r0, sp, #4
 8018d5a:	460d      	mov	r5, r1
 8018d5c:	f7ff fece 	bl	8018afc <rcl_action_get_zero_initialized_cancel_response>
 8018d60:	aa01      	add	r2, sp, #4
 8018d62:	a90e      	add	r1, sp, #56	; 0x38
 8018d64:	f104 0010 	add.w	r0, r4, #16
 8018d68:	f88d 5004 	strb.w	r5, [sp, #4]
 8018d6c:	f7ff fda8 	bl	80188c0 <rcl_action_send_cancel_response>
 8018d70:	b00b      	add	sp, #44	; 0x2c
 8018d72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018d76:	b002      	add	sp, #8
 8018d78:	4770      	bx	lr
 8018d7a:	200b      	movs	r0, #11
 8018d7c:	b00b      	add	sp, #44	; 0x2c
 8018d7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018d82:	b002      	add	sp, #8
 8018d84:	4770      	bx	lr
 8018d86:	bf00      	nop

08018d88 <__atomic_load_8>:
 8018d88:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8018d8c:	4a16      	ldr	r2, [pc, #88]	; (8018de8 <__atomic_load_8+0x60>)
 8018d8e:	4b17      	ldr	r3, [pc, #92]	; (8018dec <__atomic_load_8+0x64>)
 8018d90:	f04f 0c01 	mov.w	ip, #1
 8018d94:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8018d98:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8018d9c:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8018da0:	fb02 f101 	mul.w	r1, r2, r1
 8018da4:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8018da8:	fba3 2301 	umull	r2, r3, r3, r1
 8018dac:	091b      	lsrs	r3, r3, #4
 8018dae:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8018db2:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8018db6:	b4d0      	push	{r4, r6, r7}
 8018db8:	1ac9      	subs	r1, r1, r3
 8018dba:	4c0d      	ldr	r4, [pc, #52]	; (8018df0 <__atomic_load_8+0x68>)
 8018dbc:	1862      	adds	r2, r4, r1
 8018dbe:	e8d2 3f4f 	ldrexb	r3, [r2]
 8018dc2:	e8c2 cf46 	strexb	r6, ip, [r2]
 8018dc6:	2e00      	cmp	r6, #0
 8018dc8:	d1f9      	bne.n	8018dbe <__atomic_load_8+0x36>
 8018dca:	b2db      	uxtb	r3, r3
 8018dcc:	f3bf 8f5b 	dmb	ish
 8018dd0:	2b00      	cmp	r3, #0
 8018dd2:	d1f4      	bne.n	8018dbe <__atomic_load_8+0x36>
 8018dd4:	e9d0 6700 	ldrd	r6, r7, [r0]
 8018dd8:	f3bf 8f5b 	dmb	ish
 8018ddc:	5463      	strb	r3, [r4, r1]
 8018dde:	4630      	mov	r0, r6
 8018de0:	4639      	mov	r1, r7
 8018de2:	bcd0      	pop	{r4, r6, r7}
 8018de4:	4770      	bx	lr
 8018de6:	bf00      	nop
 8018de8:	27d4eb2d 	.word	0x27d4eb2d
 8018dec:	b21642c9 	.word	0xb21642c9
 8018df0:	20011ab8 	.word	0x20011ab8

08018df4 <__atomic_store_8>:
 8018df4:	b570      	push	{r4, r5, r6, lr}
 8018df6:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 8018dfa:	4916      	ldr	r1, [pc, #88]	; (8018e54 <__atomic_store_8+0x60>)
 8018dfc:	4c16      	ldr	r4, [pc, #88]	; (8018e58 <__atomic_store_8+0x64>)
 8018dfe:	f08e 0e3d 	eor.w	lr, lr, #61	; 0x3d
 8018e02:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8018e06:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 8018e0a:	fb01 fe0e 	mul.w	lr, r1, lr
 8018e0e:	4913      	ldr	r1, [pc, #76]	; (8018e5c <__atomic_store_8+0x68>)
 8018e10:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 8018e14:	fba1 510e 	umull	r5, r1, r1, lr
 8018e18:	f04f 0501 	mov.w	r5, #1
 8018e1c:	0909      	lsrs	r1, r1, #4
 8018e1e:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 8018e22:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 8018e26:	ebae 0e01 	sub.w	lr, lr, r1
 8018e2a:	eb04 0c0e 	add.w	ip, r4, lr
 8018e2e:	e8dc 1f4f 	ldrexb	r1, [ip]
 8018e32:	e8cc 5f46 	strexb	r6, r5, [ip]
 8018e36:	2e00      	cmp	r6, #0
 8018e38:	d1f9      	bne.n	8018e2e <__atomic_store_8+0x3a>
 8018e3a:	b2c9      	uxtb	r1, r1
 8018e3c:	f3bf 8f5b 	dmb	ish
 8018e40:	2900      	cmp	r1, #0
 8018e42:	d1f4      	bne.n	8018e2e <__atomic_store_8+0x3a>
 8018e44:	e9c0 2300 	strd	r2, r3, [r0]
 8018e48:	f3bf 8f5b 	dmb	ish
 8018e4c:	f804 100e 	strb.w	r1, [r4, lr]
 8018e50:	bd70      	pop	{r4, r5, r6, pc}
 8018e52:	bf00      	nop
 8018e54:	27d4eb2d 	.word	0x27d4eb2d
 8018e58:	20011ab8 	.word	0x20011ab8
 8018e5c:	b21642c9 	.word	0xb21642c9

08018e60 <__atomic_exchange_8>:
 8018e60:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8018e64:	4917      	ldr	r1, [pc, #92]	; (8018ec4 <__atomic_exchange_8+0x64>)
 8018e66:	f08c 0c3d 	eor.w	ip, ip, #61	; 0x3d
 8018e6a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8018e6e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8018e72:	fb01 fc0c 	mul.w	ip, r1, ip
 8018e76:	4914      	ldr	r1, [pc, #80]	; (8018ec8 <__atomic_exchange_8+0x68>)
 8018e78:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8018e7c:	b570      	push	{r4, r5, r6, lr}
 8018e7e:	4686      	mov	lr, r0
 8018e80:	fba1 010c 	umull	r0, r1, r1, ip
 8018e84:	4d11      	ldr	r5, [pc, #68]	; (8018ecc <__atomic_exchange_8+0x6c>)
 8018e86:	f04f 0001 	mov.w	r0, #1
 8018e8a:	0909      	lsrs	r1, r1, #4
 8018e8c:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8018e90:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8018e94:	ebac 0c01 	sub.w	ip, ip, r1
 8018e98:	eb05 010c 	add.w	r1, r5, ip
 8018e9c:	e8d1 4f4f 	ldrexb	r4, [r1]
 8018ea0:	e8c1 0f46 	strexb	r6, r0, [r1]
 8018ea4:	2e00      	cmp	r6, #0
 8018ea6:	d1f9      	bne.n	8018e9c <__atomic_exchange_8+0x3c>
 8018ea8:	b2e4      	uxtb	r4, r4
 8018eaa:	f3bf 8f5b 	dmb	ish
 8018eae:	2c00      	cmp	r4, #0
 8018eb0:	d1f4      	bne.n	8018e9c <__atomic_exchange_8+0x3c>
 8018eb2:	e9de 0100 	ldrd	r0, r1, [lr]
 8018eb6:	e9ce 2300 	strd	r2, r3, [lr]
 8018eba:	f3bf 8f5b 	dmb	ish
 8018ebe:	f805 400c 	strb.w	r4, [r5, ip]
 8018ec2:	bd70      	pop	{r4, r5, r6, pc}
 8018ec4:	27d4eb2d 	.word	0x27d4eb2d
 8018ec8:	b21642c9 	.word	0xb21642c9
 8018ecc:	20011ab8 	.word	0x20011ab8

08018ed0 <rcutils_get_env>:
 8018ed0:	b168      	cbz	r0, 8018eee <rcutils_get_env+0x1e>
 8018ed2:	b510      	push	{r4, lr}
 8018ed4:	460c      	mov	r4, r1
 8018ed6:	b129      	cbz	r1, 8018ee4 <rcutils_get_env+0x14>
 8018ed8:	f005 f918 	bl	801e10c <getenv>
 8018edc:	b120      	cbz	r0, 8018ee8 <rcutils_get_env+0x18>
 8018ede:	6020      	str	r0, [r4, #0]
 8018ee0:	2000      	movs	r0, #0
 8018ee2:	bd10      	pop	{r4, pc}
 8018ee4:	4803      	ldr	r0, [pc, #12]	; (8018ef4 <rcutils_get_env+0x24>)
 8018ee6:	bd10      	pop	{r4, pc}
 8018ee8:	4b03      	ldr	r3, [pc, #12]	; (8018ef8 <rcutils_get_env+0x28>)
 8018eea:	6023      	str	r3, [r4, #0]
 8018eec:	bd10      	pop	{r4, pc}
 8018eee:	4803      	ldr	r0, [pc, #12]	; (8018efc <rcutils_get_env+0x2c>)
 8018ef0:	4770      	bx	lr
 8018ef2:	bf00      	nop
 8018ef4:	080210f4 	.word	0x080210f4
 8018ef8:	08021218 	.word	0x08021218
 8018efc:	080210d8 	.word	0x080210d8

08018f00 <rcutils_is_directory>:
 8018f00:	2000      	movs	r0, #0
 8018f02:	4770      	bx	lr

08018f04 <rcutils_join_path>:
 8018f04:	b082      	sub	sp, #8
 8018f06:	2000      	movs	r0, #0
 8018f08:	e88d 000c 	stmia.w	sp, {r2, r3}
 8018f0c:	b002      	add	sp, #8
 8018f0e:	4770      	bx	lr

08018f10 <rcutils_to_native_path>:
 8018f10:	b084      	sub	sp, #16
 8018f12:	2000      	movs	r0, #0
 8018f14:	f10d 0c04 	add.w	ip, sp, #4
 8018f18:	b004      	add	sp, #16
 8018f1a:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8018f1e:	4770      	bx	lr

08018f20 <rcutils_format_string_limit>:
 8018f20:	b40f      	push	{r0, r1, r2, r3}
 8018f22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f24:	b083      	sub	sp, #12
 8018f26:	ac08      	add	r4, sp, #32
 8018f28:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8018f2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8018f2e:	b326      	cbz	r6, 8018f7a <rcutils_format_string_limit+0x5a>
 8018f30:	a808      	add	r0, sp, #32
 8018f32:	f7f5 ff0d 	bl	800ed50 <rcutils_allocator_is_valid>
 8018f36:	b300      	cbz	r0, 8018f7a <rcutils_format_string_limit+0x5a>
 8018f38:	2100      	movs	r1, #0
 8018f3a:	ab0f      	add	r3, sp, #60	; 0x3c
 8018f3c:	4632      	mov	r2, r6
 8018f3e:	4608      	mov	r0, r1
 8018f40:	e9cd 3300 	strd	r3, r3, [sp]
 8018f44:	f000 f906 	bl	8019154 <rcutils_vsnprintf>
 8018f48:	1c43      	adds	r3, r0, #1
 8018f4a:	4605      	mov	r5, r0
 8018f4c:	d015      	beq.n	8018f7a <rcutils_format_string_limit+0x5a>
 8018f4e:	1c47      	adds	r7, r0, #1
 8018f50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018f52:	429f      	cmp	r7, r3
 8018f54:	d901      	bls.n	8018f5a <rcutils_format_string_limit+0x3a>
 8018f56:	1e5d      	subs	r5, r3, #1
 8018f58:	461f      	mov	r7, r3
 8018f5a:	9b08      	ldr	r3, [sp, #32]
 8018f5c:	4638      	mov	r0, r7
 8018f5e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018f60:	4798      	blx	r3
 8018f62:	4604      	mov	r4, r0
 8018f64:	b148      	cbz	r0, 8018f7a <rcutils_format_string_limit+0x5a>
 8018f66:	4632      	mov	r2, r6
 8018f68:	4639      	mov	r1, r7
 8018f6a:	9b01      	ldr	r3, [sp, #4]
 8018f6c:	f000 f8f2 	bl	8019154 <rcutils_vsnprintf>
 8018f70:	2800      	cmp	r0, #0
 8018f72:	db09      	blt.n	8018f88 <rcutils_format_string_limit+0x68>
 8018f74:	2300      	movs	r3, #0
 8018f76:	5563      	strb	r3, [r4, r5]
 8018f78:	e000      	b.n	8018f7c <rcutils_format_string_limit+0x5c>
 8018f7a:	2400      	movs	r4, #0
 8018f7c:	4620      	mov	r0, r4
 8018f7e:	b003      	add	sp, #12
 8018f80:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018f84:	b004      	add	sp, #16
 8018f86:	4770      	bx	lr
 8018f88:	4620      	mov	r0, r4
 8018f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f8c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018f8e:	2400      	movs	r4, #0
 8018f90:	4798      	blx	r3
 8018f92:	e7f3      	b.n	8018f7c <rcutils_format_string_limit+0x5c>

08018f94 <rcutils_repl_str>:
 8018f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f98:	ed2d 8b02 	vpush	{d8}
 8018f9c:	b087      	sub	sp, #28
 8018f9e:	2600      	movs	r6, #0
 8018fa0:	4680      	mov	r8, r0
 8018fa2:	468a      	mov	sl, r1
 8018fa4:	9000      	str	r0, [sp, #0]
 8018fa6:	4608      	mov	r0, r1
 8018fa8:	ee08 2a10 	vmov	s16, r2
 8018fac:	4699      	mov	r9, r3
 8018fae:	2510      	movs	r5, #16
 8018fb0:	f7e7 f9a6 	bl	8000300 <strlen>
 8018fb4:	4637      	mov	r7, r6
 8018fb6:	46b3      	mov	fp, r6
 8018fb8:	9001      	str	r0, [sp, #4]
 8018fba:	e01e      	b.n	8018ffa <rcutils_repl_str+0x66>
 8018fbc:	f10b 0b01 	add.w	fp, fp, #1
 8018fc0:	9b01      	ldr	r3, [sp, #4]
 8018fc2:	455e      	cmp	r6, fp
 8018fc4:	eb04 0803 	add.w	r8, r4, r3
 8018fc8:	d211      	bcs.n	8018fee <rcutils_repl_str+0x5a>
 8018fca:	442e      	add	r6, r5
 8018fcc:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8018fd0:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8018fd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018fd8:	00b1      	lsls	r1, r6, #2
 8018fda:	4798      	blx	r3
 8018fdc:	2800      	cmp	r0, #0
 8018fde:	f000 8088 	beq.w	80190f2 <rcutils_repl_str+0x15e>
 8018fe2:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8018fe6:	4607      	mov	r7, r0
 8018fe8:	bf28      	it	cs
 8018fea:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8018fee:	9a00      	ldr	r2, [sp, #0]
 8018ff0:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 8018ff4:	1aa4      	subs	r4, r4, r2
 8018ff6:	f843 4c04 	str.w	r4, [r3, #-4]
 8018ffa:	4651      	mov	r1, sl
 8018ffc:	4640      	mov	r0, r8
 8018ffe:	f005 fc7f 	bl	801e900 <strstr>
 8019002:	4604      	mov	r4, r0
 8019004:	4638      	mov	r0, r7
 8019006:	2c00      	cmp	r4, #0
 8019008:	d1d8      	bne.n	8018fbc <rcutils_repl_str+0x28>
 801900a:	4640      	mov	r0, r8
 801900c:	f7e7 f978 	bl	8000300 <strlen>
 8019010:	9b00      	ldr	r3, [sp, #0]
 8019012:	eba8 0803 	sub.w	r8, r8, r3
 8019016:	eb08 0400 	add.w	r4, r8, r0
 801901a:	9402      	str	r4, [sp, #8]
 801901c:	f1bb 0f00 	cmp.w	fp, #0
 8019020:	d045      	beq.n	80190ae <rcutils_repl_str+0x11a>
 8019022:	ee18 0a10 	vmov	r0, s16
 8019026:	f7e7 f96b 	bl	8000300 <strlen>
 801902a:	9a01      	ldr	r2, [sp, #4]
 801902c:	4606      	mov	r6, r0
 801902e:	f8d9 3000 	ldr.w	r3, [r9]
 8019032:	1a82      	subs	r2, r0, r2
 8019034:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8019038:	fb0b 4202 	mla	r2, fp, r2, r4
 801903c:	1c50      	adds	r0, r2, #1
 801903e:	9205      	str	r2, [sp, #20]
 8019040:	4798      	blx	r3
 8019042:	4682      	mov	sl, r0
 8019044:	2800      	cmp	r0, #0
 8019046:	d054      	beq.n	80190f2 <rcutils_repl_str+0x15e>
 8019048:	683a      	ldr	r2, [r7, #0]
 801904a:	463d      	mov	r5, r7
 801904c:	9900      	ldr	r1, [sp, #0]
 801904e:	2401      	movs	r4, #1
 8019050:	f005 fd4d 	bl	801eaee <memcpy>
 8019054:	683b      	ldr	r3, [r7, #0]
 8019056:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 801905a:	eb0a 0803 	add.w	r8, sl, r3
 801905e:	ee18 7a10 	vmov	r7, s16
 8019062:	f8dd a000 	ldr.w	sl, [sp]
 8019066:	f8cd 9000 	str.w	r9, [sp]
 801906a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801906e:	4632      	mov	r2, r6
 8019070:	4639      	mov	r1, r7
 8019072:	4640      	mov	r0, r8
 8019074:	44b0      	add	r8, r6
 8019076:	f005 fd3a 	bl	801eaee <memcpy>
 801907a:	f855 2b04 	ldr.w	r2, [r5], #4
 801907e:	45a3      	cmp	fp, r4
 8019080:	444a      	add	r2, r9
 8019082:	eb0a 0102 	add.w	r1, sl, r2
 8019086:	d02a      	beq.n	80190de <rcutils_repl_str+0x14a>
 8019088:	6828      	ldr	r0, [r5, #0]
 801908a:	1a82      	subs	r2, r0, r2
 801908c:	4640      	mov	r0, r8
 801908e:	4490      	add	r8, r2
 8019090:	f005 fd2d 	bl	801eaee <memcpy>
 8019094:	1c62      	adds	r2, r4, #1
 8019096:	45a3      	cmp	fp, r4
 8019098:	4614      	mov	r4, r2
 801909a:	d8e8      	bhi.n	801906e <rcutils_repl_str+0xda>
 801909c:	f8dd 9000 	ldr.w	r9, [sp]
 80190a0:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 80190a4:	2300      	movs	r3, #0
 80190a6:	9a05      	ldr	r2, [sp, #20]
 80190a8:	f80a 3002 	strb.w	r3, [sl, r2]
 80190ac:	e00b      	b.n	80190c6 <rcutils_repl_str+0x132>
 80190ae:	4620      	mov	r0, r4
 80190b0:	f8d9 3000 	ldr.w	r3, [r9]
 80190b4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80190b8:	3001      	adds	r0, #1
 80190ba:	4798      	blx	r3
 80190bc:	4682      	mov	sl, r0
 80190be:	b110      	cbz	r0, 80190c6 <rcutils_repl_str+0x132>
 80190c0:	9900      	ldr	r1, [sp, #0]
 80190c2:	f005 fd0c 	bl	801eade <strcpy>
 80190c6:	4638      	mov	r0, r7
 80190c8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80190cc:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80190d0:	4798      	blx	r3
 80190d2:	4650      	mov	r0, sl
 80190d4:	b007      	add	sp, #28
 80190d6:	ecbd 8b02 	vpop	{d8}
 80190da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190de:	9b02      	ldr	r3, [sp, #8]
 80190e0:	4640      	mov	r0, r8
 80190e2:	f8dd 9000 	ldr.w	r9, [sp]
 80190e6:	1a9a      	subs	r2, r3, r2
 80190e8:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 80190ec:	f005 fcff 	bl	801eaee <memcpy>
 80190f0:	e7d8      	b.n	80190a4 <rcutils_repl_str+0x110>
 80190f2:	f04f 0a00 	mov.w	sl, #0
 80190f6:	e7e6      	b.n	80190c6 <rcutils_repl_str+0x132>

080190f8 <rcutils_snprintf>:
 80190f8:	b40c      	push	{r2, r3}
 80190fa:	b530      	push	{r4, r5, lr}
 80190fc:	b083      	sub	sp, #12
 80190fe:	ab06      	add	r3, sp, #24
 8019100:	f853 2b04 	ldr.w	r2, [r3], #4
 8019104:	9301      	str	r3, [sp, #4]
 8019106:	b1e2      	cbz	r2, 8019142 <rcutils_snprintf+0x4a>
 8019108:	fab0 f480 	clz	r4, r0
 801910c:	fab1 f581 	clz	r5, r1
 8019110:	ea50 0c01 	orrs.w	ip, r0, r1
 8019114:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8019118:	ea4f 1555 	mov.w	r5, r5, lsr #5
 801911c:	d008      	beq.n	8019130 <rcutils_snprintf+0x38>
 801911e:	b984      	cbnz	r4, 8019142 <rcutils_snprintf+0x4a>
 8019120:	b97d      	cbnz	r5, 8019142 <rcutils_snprintf+0x4a>
 8019122:	f005 fb7b 	bl	801e81c <vsniprintf>
 8019126:	b003      	add	sp, #12
 8019128:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801912c:	b002      	add	sp, #8
 801912e:	4770      	bx	lr
 8019130:	4661      	mov	r1, ip
 8019132:	4660      	mov	r0, ip
 8019134:	f005 fb72 	bl	801e81c <vsniprintf>
 8019138:	b003      	add	sp, #12
 801913a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801913e:	b002      	add	sp, #8
 8019140:	4770      	bx	lr
 8019142:	f005 fc9f 	bl	801ea84 <__errno>
 8019146:	2216      	movs	r2, #22
 8019148:	4603      	mov	r3, r0
 801914a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801914e:	601a      	str	r2, [r3, #0]
 8019150:	e7e9      	b.n	8019126 <rcutils_snprintf+0x2e>
 8019152:	bf00      	nop

08019154 <rcutils_vsnprintf>:
 8019154:	b570      	push	{r4, r5, r6, lr}
 8019156:	b1b2      	cbz	r2, 8019186 <rcutils_vsnprintf+0x32>
 8019158:	fab0 f480 	clz	r4, r0
 801915c:	fab1 f581 	clz	r5, r1
 8019160:	ea50 0c01 	orrs.w	ip, r0, r1
 8019164:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8019168:	ea4f 1555 	mov.w	r5, r5, lsr #5
 801916c:	d005      	beq.n	801917a <rcutils_vsnprintf+0x26>
 801916e:	b954      	cbnz	r4, 8019186 <rcutils_vsnprintf+0x32>
 8019170:	b94d      	cbnz	r5, 8019186 <rcutils_vsnprintf+0x32>
 8019172:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019176:	f005 bb51 	b.w	801e81c <vsniprintf>
 801917a:	4661      	mov	r1, ip
 801917c:	4660      	mov	r0, ip
 801917e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019182:	f005 bb4b 	b.w	801e81c <vsniprintf>
 8019186:	f005 fc7d 	bl	801ea84 <__errno>
 801918a:	2316      	movs	r3, #22
 801918c:	6003      	str	r3, [r0, #0]
 801918e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019192:	bd70      	pop	{r4, r5, r6, pc}

08019194 <rcutils_strdup>:
 8019194:	b084      	sub	sp, #16
 8019196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019198:	ac07      	add	r4, sp, #28
 801919a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801919c:	4605      	mov	r5, r0
 801919e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80191a2:	b1d0      	cbz	r0, 80191da <rcutils_strdup+0x46>
 80191a4:	460c      	mov	r4, r1
 80191a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80191aa:	2100      	movs	r1, #0
 80191ac:	f7e7 f858 	bl	8000260 <memchr>
 80191b0:	b180      	cbz	r0, 80191d4 <rcutils_strdup+0x40>
 80191b2:	1b46      	subs	r6, r0, r5
 80191b4:	1c70      	adds	r0, r6, #1
 80191b6:	4639      	mov	r1, r7
 80191b8:	47a0      	blx	r4
 80191ba:	4604      	mov	r4, r0
 80191bc:	b128      	cbz	r0, 80191ca <rcutils_strdup+0x36>
 80191be:	4632      	mov	r2, r6
 80191c0:	4629      	mov	r1, r5
 80191c2:	f005 fc94 	bl	801eaee <memcpy>
 80191c6:	2300      	movs	r3, #0
 80191c8:	55a3      	strb	r3, [r4, r6]
 80191ca:	4620      	mov	r0, r4
 80191cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80191d0:	b004      	add	sp, #16
 80191d2:	4770      	bx	lr
 80191d4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80191d8:	e7ed      	b.n	80191b6 <rcutils_strdup+0x22>
 80191da:	4604      	mov	r4, r0
 80191dc:	e7f5      	b.n	80191ca <rcutils_strdup+0x36>
 80191de:	bf00      	nop

080191e0 <rcutils_strndup>:
 80191e0:	b082      	sub	sp, #8
 80191e2:	b570      	push	{r4, r5, r6, lr}
 80191e4:	ac04      	add	r4, sp, #16
 80191e6:	4606      	mov	r6, r0
 80191e8:	e884 000c 	stmia.w	r4, {r2, r3}
 80191ec:	b1b8      	cbz	r0, 801921e <rcutils_strndup+0x3e>
 80191ee:	460c      	mov	r4, r1
 80191f0:	460a      	mov	r2, r1
 80191f2:	2100      	movs	r1, #0
 80191f4:	f7e7 f834 	bl	8000260 <memchr>
 80191f8:	b100      	cbz	r0, 80191fc <rcutils_strndup+0x1c>
 80191fa:	1b84      	subs	r4, r0, r6
 80191fc:	9b04      	ldr	r3, [sp, #16]
 80191fe:	1c60      	adds	r0, r4, #1
 8019200:	9908      	ldr	r1, [sp, #32]
 8019202:	4798      	blx	r3
 8019204:	4605      	mov	r5, r0
 8019206:	b128      	cbz	r0, 8019214 <rcutils_strndup+0x34>
 8019208:	4622      	mov	r2, r4
 801920a:	4631      	mov	r1, r6
 801920c:	f005 fc6f 	bl	801eaee <memcpy>
 8019210:	2300      	movs	r3, #0
 8019212:	552b      	strb	r3, [r5, r4]
 8019214:	4628      	mov	r0, r5
 8019216:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801921a:	b002      	add	sp, #8
 801921c:	4770      	bx	lr
 801921e:	4605      	mov	r5, r0
 8019220:	e7f8      	b.n	8019214 <rcutils_strndup+0x34>
 8019222:	bf00      	nop

08019224 <rcutils_get_zero_initialized_string_map>:
 8019224:	2000      	movs	r0, #0
 8019226:	4b01      	ldr	r3, [pc, #4]	; (801922c <rcutils_get_zero_initialized_string_map+0x8>)
 8019228:	6018      	str	r0, [r3, #0]
 801922a:	4770      	bx	lr
 801922c:	20011ad0 	.word	0x20011ad0

08019230 <rcutils_string_map_reserve>:
 8019230:	2800      	cmp	r0, #0
 8019232:	d03e      	beq.n	80192b2 <rcutils_string_map_reserve+0x82>
 8019234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019236:	6805      	ldr	r5, [r0, #0]
 8019238:	4606      	mov	r6, r0
 801923a:	460c      	mov	r4, r1
 801923c:	b12d      	cbz	r5, 801924a <rcutils_string_map_reserve+0x1a>
 801923e:	68ab      	ldr	r3, [r5, #8]
 8019240:	42a3      	cmp	r3, r4
 8019242:	d904      	bls.n	801924e <rcutils_string_map_reserve+0x1e>
 8019244:	461c      	mov	r4, r3
 8019246:	2d00      	cmp	r5, #0
 8019248:	d1f9      	bne.n	801923e <rcutils_string_map_reserve+0xe>
 801924a:	201f      	movs	r0, #31
 801924c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801924e:	686b      	ldr	r3, [r5, #4]
 8019250:	42a3      	cmp	r3, r4
 8019252:	d02a      	beq.n	80192aa <rcutils_string_map_reserve+0x7a>
 8019254:	69e9      	ldr	r1, [r5, #28]
 8019256:	b304      	cbz	r4, 801929a <rcutils_string_map_reserve+0x6a>
 8019258:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
 801925c:	d227      	bcs.n	80192ae <rcutils_string_map_reserve+0x7e>
 801925e:	00e7      	lsls	r7, r4, #3
 8019260:	460a      	mov	r2, r1
 8019262:	696b      	ldr	r3, [r5, #20]
 8019264:	6828      	ldr	r0, [r5, #0]
 8019266:	4639      	mov	r1, r7
 8019268:	4798      	blx	r3
 801926a:	b300      	cbz	r0, 80192ae <rcutils_string_map_reserve+0x7e>
 801926c:	6835      	ldr	r5, [r6, #0]
 801926e:	686a      	ldr	r2, [r5, #4]
 8019270:	6028      	str	r0, [r5, #0]
 8019272:	42a2      	cmp	r2, r4
 8019274:	d216      	bcs.n	80192a4 <rcutils_string_map_reserve+0x74>
 8019276:	43d1      	mvns	r1, r2
 8019278:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
 801927c:	4421      	add	r1, r4
 801927e:	2909      	cmp	r1, #9
 8019280:	d919      	bls.n	80192b6 <rcutils_string_map_reserve+0x86>
 8019282:	0759      	lsls	r1, r3, #29
 8019284:	d117      	bne.n	80192b6 <rcutils_string_map_reserve+0x86>
 8019286:	1aa1      	subs	r1, r4, r2
 8019288:	2600      	movs	r6, #0
 801928a:	2200      	movs	r2, #0
 801928c:	2700      	movs	r7, #0
 801928e:	3201      	adds	r2, #1
 8019290:	4291      	cmp	r1, r2
 8019292:	e8e3 6702 	strd	r6, r7, [r3], #8
 8019296:	d8fa      	bhi.n	801928e <rcutils_string_map_reserve+0x5e>
 8019298:	e004      	b.n	80192a4 <rcutils_string_map_reserve+0x74>
 801929a:	692b      	ldr	r3, [r5, #16]
 801929c:	6828      	ldr	r0, [r5, #0]
 801929e:	4798      	blx	r3
 80192a0:	6835      	ldr	r5, [r6, #0]
 80192a2:	602c      	str	r4, [r5, #0]
 80192a4:	2000      	movs	r0, #0
 80192a6:	606c      	str	r4, [r5, #4]
 80192a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80192aa:	2000      	movs	r0, #0
 80192ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80192ae:	200a      	movs	r0, #10
 80192b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80192b2:	200b      	movs	r0, #11
 80192b4:	4770      	bx	lr
 80192b6:	4438      	add	r0, r7
 80192b8:	2200      	movs	r2, #0
 80192ba:	e9c3 2200 	strd	r2, r2, [r3]
 80192be:	3308      	adds	r3, #8
 80192c0:	4283      	cmp	r3, r0
 80192c2:	d1fa      	bne.n	80192ba <rcutils_string_map_reserve+0x8a>
 80192c4:	e7ee      	b.n	80192a4 <rcutils_string_map_reserve+0x74>
 80192c6:	bf00      	nop

080192c8 <rcutils_string_map_init>:
 80192c8:	b082      	sub	sp, #8
 80192ca:	b570      	push	{r4, r5, r6, lr}
 80192cc:	ac04      	add	r4, sp, #16
 80192ce:	e884 000c 	stmia.w	r4, {r2, r3}
 80192d2:	b378      	cbz	r0, 8019334 <rcutils_string_map_init+0x6c>
 80192d4:	6806      	ldr	r6, [r0, #0]
 80192d6:	4604      	mov	r4, r0
 80192d8:	b12e      	cbz	r6, 80192e6 <rcutils_string_map_init+0x1e>
 80192da:	251e      	movs	r5, #30
 80192dc:	4628      	mov	r0, r5
 80192de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80192e2:	b002      	add	sp, #8
 80192e4:	4770      	bx	lr
 80192e6:	a804      	add	r0, sp, #16
 80192e8:	460d      	mov	r5, r1
 80192ea:	f7f5 fd31 	bl	800ed50 <rcutils_allocator_is_valid>
 80192ee:	b308      	cbz	r0, 8019334 <rcutils_string_map_init+0x6c>
 80192f0:	9b04      	ldr	r3, [sp, #16]
 80192f2:	2020      	movs	r0, #32
 80192f4:	9908      	ldr	r1, [sp, #32]
 80192f6:	4798      	blx	r3
 80192f8:	6020      	str	r0, [r4, #0]
 80192fa:	b308      	cbz	r0, 8019340 <rcutils_string_map_init+0x78>
 80192fc:	f10d 0e10 	add.w	lr, sp, #16
 8019300:	6086      	str	r6, [r0, #8]
 8019302:	f100 0c0c 	add.w	ip, r0, #12
 8019306:	e9c0 6600 	strd	r6, r6, [r0]
 801930a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801930e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019312:	f8de 3000 	ldr.w	r3, [lr]
 8019316:	4629      	mov	r1, r5
 8019318:	4620      	mov	r0, r4
 801931a:	f8cc 3000 	str.w	r3, [ip]
 801931e:	f7ff ff87 	bl	8019230 <rcutils_string_map_reserve>
 8019322:	4605      	mov	r5, r0
 8019324:	2800      	cmp	r0, #0
 8019326:	d0d9      	beq.n	80192dc <rcutils_string_map_init+0x14>
 8019328:	9b05      	ldr	r3, [sp, #20]
 801932a:	9908      	ldr	r1, [sp, #32]
 801932c:	6820      	ldr	r0, [r4, #0]
 801932e:	4798      	blx	r3
 8019330:	6026      	str	r6, [r4, #0]
 8019332:	e7d3      	b.n	80192dc <rcutils_string_map_init+0x14>
 8019334:	250b      	movs	r5, #11
 8019336:	4628      	mov	r0, r5
 8019338:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801933c:	b002      	add	sp, #8
 801933e:	4770      	bx	lr
 8019340:	250a      	movs	r5, #10
 8019342:	e7cb      	b.n	80192dc <rcutils_string_map_init+0x14>

08019344 <rcutils_string_map_fini>:
 8019344:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019348:	b083      	sub	sp, #12
 801934a:	2800      	cmp	r0, #0
 801934c:	d03e      	beq.n	80193cc <rcutils_string_map_fini+0x88>
 801934e:	6804      	ldr	r4, [r0, #0]
 8019350:	4606      	mov	r6, r0
 8019352:	2c00      	cmp	r4, #0
 8019354:	d036      	beq.n	80193c4 <rcutils_string_map_fini+0x80>
 8019356:	6863      	ldr	r3, [r4, #4]
 8019358:	b34b      	cbz	r3, 80193ae <rcutils_string_map_fini+0x6a>
 801935a:	2500      	movs	r5, #0
 801935c:	6822      	ldr	r2, [r4, #0]
 801935e:	462f      	mov	r7, r5
 8019360:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
 8019364:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 8019368:	b1f0      	cbz	r0, 80193a8 <rcutils_string_map_fini+0x64>
 801936a:	69e1      	ldr	r1, [r4, #28]
 801936c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8019370:	9101      	str	r1, [sp, #4]
 8019372:	47c8      	blx	r9
 8019374:	6823      	ldr	r3, [r4, #0]
 8019376:	9901      	ldr	r1, [sp, #4]
 8019378:	eb03 0208 	add.w	r2, r3, r8
 801937c:	f843 7035 	str.w	r7, [r3, r5, lsl #3]
 8019380:	3501      	adds	r5, #1
 8019382:	6850      	ldr	r0, [r2, #4]
 8019384:	47c8      	blx	r9
 8019386:	68a3      	ldr	r3, [r4, #8]
 8019388:	6822      	ldr	r2, [r4, #0]
 801938a:	3b01      	subs	r3, #1
 801938c:	4442      	add	r2, r8
 801938e:	6057      	str	r7, [r2, #4]
 8019390:	60a3      	str	r3, [r4, #8]
 8019392:	6834      	ldr	r4, [r6, #0]
 8019394:	6863      	ldr	r3, [r4, #4]
 8019396:	429d      	cmp	r5, r3
 8019398:	d209      	bcs.n	80193ae <rcutils_string_map_fini+0x6a>
 801939a:	6822      	ldr	r2, [r4, #0]
 801939c:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 80193a0:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
 80193a4:	2800      	cmp	r0, #0
 80193a6:	d1e0      	bne.n	801936a <rcutils_string_map_fini+0x26>
 80193a8:	3501      	adds	r5, #1
 80193aa:	429d      	cmp	r5, r3
 80193ac:	d3d8      	bcc.n	8019360 <rcutils_string_map_fini+0x1c>
 80193ae:	2100      	movs	r1, #0
 80193b0:	4630      	mov	r0, r6
 80193b2:	f7ff ff3d 	bl	8019230 <rcutils_string_map_reserve>
 80193b6:	4604      	mov	r4, r0
 80193b8:	b920      	cbnz	r0, 80193c4 <rcutils_string_map_fini+0x80>
 80193ba:	6830      	ldr	r0, [r6, #0]
 80193bc:	6903      	ldr	r3, [r0, #16]
 80193be:	69c1      	ldr	r1, [r0, #28]
 80193c0:	4798      	blx	r3
 80193c2:	6034      	str	r4, [r6, #0]
 80193c4:	4620      	mov	r0, r4
 80193c6:	b003      	add	sp, #12
 80193c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80193cc:	240b      	movs	r4, #11
 80193ce:	4620      	mov	r0, r4
 80193d0:	b003      	add	sp, #12
 80193d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80193d6:	bf00      	nop

080193d8 <rcutils_string_map_getn>:
 80193d8:	b338      	cbz	r0, 801942a <rcutils_string_map_getn+0x52>
 80193da:	6803      	ldr	r3, [r0, #0]
 80193dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80193e0:	4688      	mov	r8, r1
 80193e2:	b1d9      	cbz	r1, 801941c <rcutils_string_map_getn+0x44>
 80193e4:	fab3 f483 	clz	r4, r3
 80193e8:	0964      	lsrs	r4, r4, #5
 80193ea:	b1bb      	cbz	r3, 801941c <rcutils_string_map_getn+0x44>
 80193ec:	4691      	mov	r9, r2
 80193ee:	e9d3 7600 	ldrd	r7, r6, [r3]
 80193f2:	b19e      	cbz	r6, 801941c <rcutils_string_map_getn+0x44>
 80193f4:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
 80193f8:	eb07 0ac4 	add.w	sl, r7, r4, lsl #3
 80193fc:	3401      	adds	r4, #1
 80193fe:	4628      	mov	r0, r5
 8019400:	b155      	cbz	r5, 8019418 <rcutils_string_map_getn+0x40>
 8019402:	f7e6 ff7d 	bl	8000300 <strlen>
 8019406:	4602      	mov	r2, r0
 8019408:	4629      	mov	r1, r5
 801940a:	4640      	mov	r0, r8
 801940c:	454a      	cmp	r2, r9
 801940e:	bf38      	it	cc
 8019410:	464a      	movcc	r2, r9
 8019412:	f005 fa50 	bl	801e8b6 <strncmp>
 8019416:	b120      	cbz	r0, 8019422 <rcutils_string_map_getn+0x4a>
 8019418:	42a6      	cmp	r6, r4
 801941a:	d1eb      	bne.n	80193f4 <rcutils_string_map_getn+0x1c>
 801941c:	2000      	movs	r0, #0
 801941e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019422:	f8da 0004 	ldr.w	r0, [sl, #4]
 8019426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801942a:	4770      	bx	lr
 801942c:	0000      	movs	r0, r0
	...

08019430 <rmw_get_zero_initialized_context>:
 8019430:	b510      	push	{r4, lr}
 8019432:	4604      	mov	r4, r0
 8019434:	3010      	adds	r0, #16
 8019436:	f000 f80f 	bl	8019458 <rmw_get_zero_initialized_init_options>
 801943a:	2300      	movs	r3, #0
 801943c:	4620      	mov	r0, r4
 801943e:	60a3      	str	r3, [r4, #8]
 8019440:	66a3      	str	r3, [r4, #104]	; 0x68
 8019442:	66e3      	str	r3, [r4, #108]	; 0x6c
 8019444:	ed9f 7b02 	vldr	d7, [pc, #8]	; 8019450 <rmw_get_zero_initialized_context+0x20>
 8019448:	ed84 7b00 	vstr	d7, [r4]
 801944c:	bd10      	pop	{r4, pc}
 801944e:	bf00      	nop
	...

08019458 <rmw_get_zero_initialized_init_options>:
 8019458:	b510      	push	{r4, lr}
 801945a:	4604      	mov	r4, r0
 801945c:	2258      	movs	r2, #88	; 0x58
 801945e:	2100      	movs	r1, #0
 8019460:	f005 fa14 	bl	801e88c <memset>
 8019464:	f104 0010 	add.w	r0, r4, #16
 8019468:	f000 f80a 	bl	8019480 <rmw_get_default_security_options>
 801946c:	f104 001c 	add.w	r0, r4, #28
 8019470:	f003 fe50 	bl	801d114 <rmw_get_zero_initialized_discovery_options>
 8019474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019478:	4620      	mov	r0, r4
 801947a:	60e3      	str	r3, [r4, #12]
 801947c:	bd10      	pop	{r4, pc}
 801947e:	bf00      	nop

08019480 <rmw_get_default_security_options>:
 8019480:	2200      	movs	r2, #0
 8019482:	7002      	strb	r2, [r0, #0]
 8019484:	6042      	str	r2, [r0, #4]
 8019486:	4770      	bx	lr

08019488 <rmw_subscription_content_filter_options_fini>:
 8019488:	b1b0      	cbz	r0, 80194b8 <rmw_subscription_content_filter_options_fini+0x30>
 801948a:	b538      	push	{r3, r4, r5, lr}
 801948c:	4604      	mov	r4, r0
 801948e:	4608      	mov	r0, r1
 8019490:	460d      	mov	r5, r1
 8019492:	f7f5 fc5d 	bl	800ed50 <rcutils_allocator_is_valid>
 8019496:	b168      	cbz	r0, 80194b4 <rmw_subscription_content_filter_options_fini+0x2c>
 8019498:	6820      	ldr	r0, [r4, #0]
 801949a:	b120      	cbz	r0, 80194a6 <rmw_subscription_content_filter_options_fini+0x1e>
 801949c:	686b      	ldr	r3, [r5, #4]
 801949e:	6929      	ldr	r1, [r5, #16]
 80194a0:	4798      	blx	r3
 80194a2:	2300      	movs	r3, #0
 80194a4:	6023      	str	r3, [r4, #0]
 80194a6:	1d20      	adds	r0, r4, #4
 80194a8:	f003 fe0a 	bl	801d0c0 <rcutils_string_array_fini>
 80194ac:	3800      	subs	r0, #0
 80194ae:	bf18      	it	ne
 80194b0:	2001      	movne	r0, #1
 80194b2:	bd38      	pop	{r3, r4, r5, pc}
 80194b4:	200b      	movs	r0, #11
 80194b6:	bd38      	pop	{r3, r4, r5, pc}
 80194b8:	200b      	movs	r0, #11
 80194ba:	4770      	bx	lr

080194bc <rmw_get_default_subscription_options>:
 80194bc:	2200      	movs	r2, #0
 80194be:	e9c0 2200 	strd	r2, r2, [r0]
 80194c2:	6082      	str	r2, [r0, #8]
 80194c4:	4770      	bx	lr
 80194c6:	bf00      	nop

080194c8 <rmw_time_equal>:
 80194c8:	b4f0      	push	{r4, r5, r6, r7}
 80194ca:	b084      	sub	sp, #16
 80194cc:	ac04      	add	r4, sp, #16
 80194ce:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80194d2:	4603      	mov	r3, r0
 80194d4:	4925      	ldr	r1, [pc, #148]	; (801956c <rmw_time_equal+0xa4>)
 80194d6:	9d01      	ldr	r5, [sp, #4]
 80194d8:	4610      	mov	r0, r2
 80194da:	4299      	cmp	r1, r3
 80194dc:	f04f 0202 	mov.w	r2, #2
 80194e0:	9e03      	ldr	r6, [sp, #12]
 80194e2:	41aa      	sbcs	r2, r5
 80194e4:	d330      	bcc.n	8019548 <rmw_time_equal+0x80>
 80194e6:	4c22      	ldr	r4, [pc, #136]	; (8019570 <rmw_time_equal+0xa8>)
 80194e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80194ec:	fba3 3204 	umull	r3, r2, r3, r4
 80194f0:	fb04 2205 	mla	r2, r4, r5, r2
 80194f4:	43dd      	mvns	r5, r3
 80194f6:	1a8c      	subs	r4, r1, r2
 80194f8:	4285      	cmp	r5, r0
 80194fa:	41b4      	sbcs	r4, r6
 80194fc:	d332      	bcc.n	8019564 <rmw_time_equal+0x9c>
 80194fe:	eb10 0c03 	adds.w	ip, r0, r3
 8019502:	eb42 0106 	adc.w	r1, r2, r6
 8019506:	4819      	ldr	r0, [pc, #100]	; (801956c <rmw_time_equal+0xa4>)
 8019508:	2202      	movs	r2, #2
 801950a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801950c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801950e:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8019512:	4298      	cmp	r0, r3
 8019514:	41b2      	sbcs	r2, r6
 8019516:	d31c      	bcc.n	8019552 <rmw_time_equal+0x8a>
 8019518:	4c15      	ldr	r4, [pc, #84]	; (8019570 <rmw_time_equal+0xa8>)
 801951a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801951e:	fba3 3204 	umull	r3, r2, r3, r4
 8019522:	fb04 2206 	mla	r2, r4, r6, r2
 8019526:	43de      	mvns	r6, r3
 8019528:	1a84      	subs	r4, r0, r2
 801952a:	42ae      	cmp	r6, r5
 801952c:	41bc      	sbcs	r4, r7
 801952e:	d315      	bcc.n	801955c <rmw_time_equal+0x94>
 8019530:	195b      	adds	r3, r3, r5
 8019532:	eb42 0207 	adc.w	r2, r2, r7
 8019536:	428a      	cmp	r2, r1
 8019538:	bf08      	it	eq
 801953a:	4563      	cmpeq	r3, ip
 801953c:	bf0c      	ite	eq
 801953e:	2001      	moveq	r0, #1
 8019540:	2000      	movne	r0, #0
 8019542:	b004      	add	sp, #16
 8019544:	bcf0      	pop	{r4, r5, r6, r7}
 8019546:	4770      	bx	lr
 8019548:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801954c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019550:	e7d9      	b.n	8019506 <rmw_time_equal+0x3e>
 8019552:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019556:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 801955a:	e7ec      	b.n	8019536 <rmw_time_equal+0x6e>
 801955c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019560:	4602      	mov	r2, r0
 8019562:	e7e8      	b.n	8019536 <rmw_time_equal+0x6e>
 8019564:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8019568:	e7cd      	b.n	8019506 <rmw_time_equal+0x3e>
 801956a:	bf00      	nop
 801956c:	25c17d04 	.word	0x25c17d04
 8019570:	3b9aca00 	.word	0x3b9aca00

08019574 <rmw_time_total_nsec>:
 8019574:	b470      	push	{r4, r5, r6}
 8019576:	b085      	sub	sp, #20
 8019578:	ac04      	add	r4, sp, #16
 801957a:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801957e:	4603      	mov	r3, r0
 8019580:	4913      	ldr	r1, [pc, #76]	; (80195d0 <rmw_time_total_nsec+0x5c>)
 8019582:	9d01      	ldr	r5, [sp, #4]
 8019584:	4610      	mov	r0, r2
 8019586:	4299      	cmp	r1, r3
 8019588:	f04f 0202 	mov.w	r2, #2
 801958c:	9e03      	ldr	r6, [sp, #12]
 801958e:	41aa      	sbcs	r2, r5
 8019590:	d311      	bcc.n	80195b6 <rmw_time_total_nsec+0x42>
 8019592:	4c10      	ldr	r4, [pc, #64]	; (80195d4 <rmw_time_total_nsec+0x60>)
 8019594:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019598:	fba3 3204 	umull	r3, r2, r3, r4
 801959c:	fb04 2205 	mla	r2, r4, r5, r2
 80195a0:	43dd      	mvns	r5, r3
 80195a2:	1a8c      	subs	r4, r1, r2
 80195a4:	4285      	cmp	r5, r0
 80195a6:	41b4      	sbcs	r4, r6
 80195a8:	d30c      	bcc.n	80195c4 <rmw_time_total_nsec+0x50>
 80195aa:	1818      	adds	r0, r3, r0
 80195ac:	eb42 0106 	adc.w	r1, r2, r6
 80195b0:	b005      	add	sp, #20
 80195b2:	bc70      	pop	{r4, r5, r6}
 80195b4:	4770      	bx	lr
 80195b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80195ba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80195be:	b005      	add	sp, #20
 80195c0:	bc70      	pop	{r4, r5, r6}
 80195c2:	4770      	bx	lr
 80195c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80195c8:	b005      	add	sp, #20
 80195ca:	bc70      	pop	{r4, r5, r6}
 80195cc:	4770      	bx	lr
 80195ce:	bf00      	nop
 80195d0:	25c17d04 	.word	0x25c17d04
 80195d4:	3b9aca00 	.word	0x3b9aca00

080195d8 <rmw_get_zero_initialized_message_info>:
 80195d8:	b510      	push	{r4, lr}
 80195da:	4604      	mov	r4, r0
 80195dc:	2238      	movs	r2, #56	; 0x38
 80195de:	2100      	movs	r1, #0
 80195e0:	f005 f954 	bl	801e88c <memset>
 80195e4:	4620      	mov	r0, r4
 80195e6:	bd10      	pop	{r4, pc}

080195e8 <rmw_validate_full_topic_name>:
 80195e8:	2800      	cmp	r0, #0
 80195ea:	d05d      	beq.n	80196a8 <rmw_validate_full_topic_name+0xc0>
 80195ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80195f0:	460d      	mov	r5, r1
 80195f2:	2900      	cmp	r1, #0
 80195f4:	d05a      	beq.n	80196ac <rmw_validate_full_topic_name+0xc4>
 80195f6:	4604      	mov	r4, r0
 80195f8:	4616      	mov	r6, r2
 80195fa:	f7e6 fe81 	bl	8000300 <strlen>
 80195fe:	b150      	cbz	r0, 8019616 <rmw_validate_full_topic_name+0x2e>
 8019600:	7823      	ldrb	r3, [r4, #0]
 8019602:	2b2f      	cmp	r3, #47	; 0x2f
 8019604:	d00e      	beq.n	8019624 <rmw_validate_full_topic_name+0x3c>
 8019606:	2302      	movs	r3, #2
 8019608:	602b      	str	r3, [r5, #0]
 801960a:	b146      	cbz	r6, 801961e <rmw_validate_full_topic_name+0x36>
 801960c:	2300      	movs	r3, #0
 801960e:	4618      	mov	r0, r3
 8019610:	6033      	str	r3, [r6, #0]
 8019612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019616:	2301      	movs	r3, #1
 8019618:	602b      	str	r3, [r5, #0]
 801961a:	2e00      	cmp	r6, #0
 801961c:	d1f6      	bne.n	801960c <rmw_validate_full_topic_name+0x24>
 801961e:	2000      	movs	r0, #0
 8019620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019624:	1e43      	subs	r3, r0, #1
 8019626:	5ce2      	ldrb	r2, [r4, r3]
 8019628:	2a2f      	cmp	r2, #47	; 0x2f
 801962a:	d041      	beq.n	80196b0 <rmw_validate_full_topic_name+0xc8>
 801962c:	1e62      	subs	r2, r4, #1
 801962e:	f1c4 0e01 	rsb	lr, r4, #1
 8019632:	eb02 0800 	add.w	r8, r2, r0
 8019636:	eb0e 0702 	add.w	r7, lr, r2
 801963a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801963e:	f023 0120 	bic.w	r1, r3, #32
 8019642:	f1a3 0c2f 	sub.w	ip, r3, #47	; 0x2f
 8019646:	3941      	subs	r1, #65	; 0x41
 8019648:	2919      	cmp	r1, #25
 801964a:	d90f      	bls.n	801966c <rmw_validate_full_topic_name+0x84>
 801964c:	f1bc 0f0a 	cmp.w	ip, #10
 8019650:	d90c      	bls.n	801966c <rmw_validate_full_topic_name+0x84>
 8019652:	f1a3 035f 	sub.w	r3, r3, #95	; 0x5f
 8019656:	fab3 f383 	clz	r3, r3
 801965a:	095b      	lsrs	r3, r3, #5
 801965c:	b933      	cbnz	r3, 801966c <rmw_validate_full_topic_name+0x84>
 801965e:	2204      	movs	r2, #4
 8019660:	602a      	str	r2, [r5, #0]
 8019662:	2e00      	cmp	r6, #0
 8019664:	d0db      	beq.n	801961e <rmw_validate_full_topic_name+0x36>
 8019666:	4618      	mov	r0, r3
 8019668:	6037      	str	r7, [r6, #0]
 801966a:	e7d2      	b.n	8019612 <rmw_validate_full_topic_name+0x2a>
 801966c:	4542      	cmp	r2, r8
 801966e:	d1e2      	bne.n	8019636 <rmw_validate_full_topic_name+0x4e>
 8019670:	2301      	movs	r3, #1
 8019672:	4f1a      	ldr	r7, [pc, #104]	; (80196dc <rmw_validate_full_topic_name+0xf4>)
 8019674:	e004      	b.n	8019680 <rmw_validate_full_topic_name+0x98>
 8019676:	4298      	cmp	r0, r3
 8019678:	f104 0401 	add.w	r4, r4, #1
 801967c:	4613      	mov	r3, r2
 801967e:	d91c      	bls.n	80196ba <rmw_validate_full_topic_name+0xd2>
 8019680:	4298      	cmp	r0, r3
 8019682:	f103 0201 	add.w	r2, r3, #1
 8019686:	d0f6      	beq.n	8019676 <rmw_validate_full_topic_name+0x8e>
 8019688:	7821      	ldrb	r1, [r4, #0]
 801968a:	292f      	cmp	r1, #47	; 0x2f
 801968c:	d1f3      	bne.n	8019676 <rmw_validate_full_topic_name+0x8e>
 801968e:	7861      	ldrb	r1, [r4, #1]
 8019690:	292f      	cmp	r1, #47	; 0x2f
 8019692:	d01e      	beq.n	80196d2 <rmw_validate_full_topic_name+0xea>
 8019694:	5dc9      	ldrb	r1, [r1, r7]
 8019696:	0749      	lsls	r1, r1, #29
 8019698:	d5ed      	bpl.n	8019676 <rmw_validate_full_topic_name+0x8e>
 801969a:	2206      	movs	r2, #6
 801969c:	602a      	str	r2, [r5, #0]
 801969e:	2e00      	cmp	r6, #0
 80196a0:	d0bd      	beq.n	801961e <rmw_validate_full_topic_name+0x36>
 80196a2:	2000      	movs	r0, #0
 80196a4:	6033      	str	r3, [r6, #0]
 80196a6:	e7b4      	b.n	8019612 <rmw_validate_full_topic_name+0x2a>
 80196a8:	200b      	movs	r0, #11
 80196aa:	4770      	bx	lr
 80196ac:	200b      	movs	r0, #11
 80196ae:	e7b0      	b.n	8019612 <rmw_validate_full_topic_name+0x2a>
 80196b0:	2203      	movs	r2, #3
 80196b2:	602a      	str	r2, [r5, #0]
 80196b4:	2e00      	cmp	r6, #0
 80196b6:	d1f4      	bne.n	80196a2 <rmw_validate_full_topic_name+0xba>
 80196b8:	e7b1      	b.n	801961e <rmw_validate_full_topic_name+0x36>
 80196ba:	28f7      	cmp	r0, #247	; 0xf7
 80196bc:	d803      	bhi.n	80196c6 <rmw_validate_full_topic_name+0xde>
 80196be:	2300      	movs	r3, #0
 80196c0:	4618      	mov	r0, r3
 80196c2:	602b      	str	r3, [r5, #0]
 80196c4:	e7a5      	b.n	8019612 <rmw_validate_full_topic_name+0x2a>
 80196c6:	2307      	movs	r3, #7
 80196c8:	602b      	str	r3, [r5, #0]
 80196ca:	2e00      	cmp	r6, #0
 80196cc:	d0a7      	beq.n	801961e <rmw_validate_full_topic_name+0x36>
 80196ce:	23f6      	movs	r3, #246	; 0xf6
 80196d0:	e7e7      	b.n	80196a2 <rmw_validate_full_topic_name+0xba>
 80196d2:	2205      	movs	r2, #5
 80196d4:	602a      	str	r2, [r5, #0]
 80196d6:	2e00      	cmp	r6, #0
 80196d8:	d1e3      	bne.n	80196a2 <rmw_validate_full_topic_name+0xba>
 80196da:	e7a0      	b.n	801961e <rmw_validate_full_topic_name+0x36>
 80196dc:	08021bf8 	.word	0x08021bf8

080196e0 <rmw_validate_namespace_with_size>:
 80196e0:	2800      	cmp	r0, #0
 80196e2:	d043      	beq.n	801976c <rmw_validate_namespace_with_size+0x8c>
 80196e4:	b570      	push	{r4, r5, r6, lr}
 80196e6:	4614      	mov	r4, r2
 80196e8:	b0c2      	sub	sp, #264	; 0x108
 80196ea:	b32a      	cbz	r2, 8019738 <rmw_validate_namespace_with_size+0x58>
 80196ec:	2901      	cmp	r1, #1
 80196ee:	460d      	mov	r5, r1
 80196f0:	461e      	mov	r6, r3
 80196f2:	d102      	bne.n	80196fa <rmw_validate_namespace_with_size+0x1a>
 80196f4:	7803      	ldrb	r3, [r0, #0]
 80196f6:	2b2f      	cmp	r3, #47	; 0x2f
 80196f8:	d012      	beq.n	8019720 <rmw_validate_namespace_with_size+0x40>
 80196fa:	aa01      	add	r2, sp, #4
 80196fc:	4669      	mov	r1, sp
 80196fe:	f7ff ff73 	bl	80195e8 <rmw_validate_full_topic_name>
 8019702:	b980      	cbnz	r0, 8019726 <rmw_validate_namespace_with_size+0x46>
 8019704:	9a00      	ldr	r2, [sp, #0]
 8019706:	b14a      	cbz	r2, 801971c <rmw_validate_namespace_with_size+0x3c>
 8019708:	2a07      	cmp	r2, #7
 801970a:	d007      	beq.n	801971c <rmw_validate_namespace_with_size+0x3c>
 801970c:	1e53      	subs	r3, r2, #1
 801970e:	2b05      	cmp	r3, #5
 8019710:	d82e      	bhi.n	8019770 <rmw_validate_namespace_with_size+0x90>
 8019712:	e8df f003 	tbb	[pc, r3]
 8019716:	1f1c      	.short	0x1f1c
 8019718:	14282522 	.word	0x14282522
 801971c:	2df5      	cmp	r5, #245	; 0xf5
 801971e:	d804      	bhi.n	801972a <rmw_validate_namespace_with_size+0x4a>
 8019720:	2300      	movs	r3, #0
 8019722:	4618      	mov	r0, r3
 8019724:	6023      	str	r3, [r4, #0]
 8019726:	b042      	add	sp, #264	; 0x108
 8019728:	bd70      	pop	{r4, r5, r6, pc}
 801972a:	2307      	movs	r3, #7
 801972c:	6023      	str	r3, [r4, #0]
 801972e:	2e00      	cmp	r6, #0
 8019730:	d0f9      	beq.n	8019726 <rmw_validate_namespace_with_size+0x46>
 8019732:	23f4      	movs	r3, #244	; 0xf4
 8019734:	6033      	str	r3, [r6, #0]
 8019736:	e7f6      	b.n	8019726 <rmw_validate_namespace_with_size+0x46>
 8019738:	200b      	movs	r0, #11
 801973a:	b042      	add	sp, #264	; 0x108
 801973c:	bd70      	pop	{r4, r5, r6, pc}
 801973e:	2306      	movs	r3, #6
 8019740:	6023      	str	r3, [r4, #0]
 8019742:	2e00      	cmp	r6, #0
 8019744:	d0ef      	beq.n	8019726 <rmw_validate_namespace_with_size+0x46>
 8019746:	9b01      	ldr	r3, [sp, #4]
 8019748:	6033      	str	r3, [r6, #0]
 801974a:	b042      	add	sp, #264	; 0x108
 801974c:	bd70      	pop	{r4, r5, r6, pc}
 801974e:	2301      	movs	r3, #1
 8019750:	6023      	str	r3, [r4, #0]
 8019752:	e7f6      	b.n	8019742 <rmw_validate_namespace_with_size+0x62>
 8019754:	2302      	movs	r3, #2
 8019756:	6023      	str	r3, [r4, #0]
 8019758:	e7f3      	b.n	8019742 <rmw_validate_namespace_with_size+0x62>
 801975a:	2303      	movs	r3, #3
 801975c:	6023      	str	r3, [r4, #0]
 801975e:	e7f0      	b.n	8019742 <rmw_validate_namespace_with_size+0x62>
 8019760:	2304      	movs	r3, #4
 8019762:	6023      	str	r3, [r4, #0]
 8019764:	e7ed      	b.n	8019742 <rmw_validate_namespace_with_size+0x62>
 8019766:	2305      	movs	r3, #5
 8019768:	6023      	str	r3, [r4, #0]
 801976a:	e7ea      	b.n	8019742 <rmw_validate_namespace_with_size+0x62>
 801976c:	200b      	movs	r0, #11
 801976e:	4770      	bx	lr
 8019770:	4613      	mov	r3, r2
 8019772:	f44f 7180 	mov.w	r1, #256	; 0x100
 8019776:	4a03      	ldr	r2, [pc, #12]	; (8019784 <rmw_validate_namespace_with_size+0xa4>)
 8019778:	a802      	add	r0, sp, #8
 801977a:	f7ff fcbd 	bl	80190f8 <rcutils_snprintf>
 801977e:	2001      	movs	r0, #1
 8019780:	e7d1      	b.n	8019726 <rmw_validate_namespace_with_size+0x46>
 8019782:	bf00      	nop
 8019784:	08021110 	.word	0x08021110

08019788 <rmw_validate_namespace>:
 8019788:	b168      	cbz	r0, 80197a6 <rmw_validate_namespace+0x1e>
 801978a:	b570      	push	{r4, r5, r6, lr}
 801978c:	460d      	mov	r5, r1
 801978e:	4616      	mov	r6, r2
 8019790:	4604      	mov	r4, r0
 8019792:	f7e6 fdb5 	bl	8000300 <strlen>
 8019796:	4633      	mov	r3, r6
 8019798:	4601      	mov	r1, r0
 801979a:	462a      	mov	r2, r5
 801979c:	4620      	mov	r0, r4
 801979e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80197a2:	f7ff bf9d 	b.w	80196e0 <rmw_validate_namespace_with_size>
 80197a6:	200b      	movs	r0, #11
 80197a8:	4770      	bx	lr
 80197aa:	bf00      	nop

080197ac <rmw_namespace_validation_result_string>:
 80197ac:	2807      	cmp	r0, #7
 80197ae:	d803      	bhi.n	80197b8 <rmw_namespace_validation_result_string+0xc>
 80197b0:	4b02      	ldr	r3, [pc, #8]	; (80197bc <rmw_namespace_validation_result_string+0x10>)
 80197b2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80197b6:	4770      	bx	lr
 80197b8:	4801      	ldr	r0, [pc, #4]	; (80197c0 <rmw_namespace_validation_result_string+0x14>)
 80197ba:	4770      	bx	lr
 80197bc:	08021308 	.word	0x08021308
 80197c0:	08021160 	.word	0x08021160

080197c4 <rmw_validate_node_name>:
 80197c4:	2800      	cmp	r0, #0
 80197c6:	d042      	beq.n	801984e <rmw_validate_node_name+0x8a>
 80197c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80197cc:	460d      	mov	r5, r1
 80197ce:	2900      	cmp	r1, #0
 80197d0:	d03f      	beq.n	8019852 <rmw_validate_node_name+0x8e>
 80197d2:	4604      	mov	r4, r0
 80197d4:	4616      	mov	r6, r2
 80197d6:	f7e6 fd93 	bl	8000300 <strlen>
 80197da:	b310      	cbz	r0, 8019822 <rmw_validate_node_name+0x5e>
 80197dc:	1e63      	subs	r3, r4, #1
 80197de:	f1c4 0101 	rsb	r1, r4, #1
 80197e2:	eb03 0800 	add.w	r8, r3, r0
 80197e6:	18cf      	adds	r7, r1, r3
 80197e8:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 80197ec:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 80197f0:	f02e 0c20 	bic.w	ip, lr, #32
 80197f4:	2a09      	cmp	r2, #9
 80197f6:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 80197fa:	d905      	bls.n	8019808 <rmw_validate_node_name+0x44>
 80197fc:	f1bc 0f19 	cmp.w	ip, #25
 8019800:	d902      	bls.n	8019808 <rmw_validate_node_name+0x44>
 8019802:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 8019806:	d114      	bne.n	8019832 <rmw_validate_node_name+0x6e>
 8019808:	4598      	cmp	r8, r3
 801980a:	d1ec      	bne.n	80197e6 <rmw_validate_node_name+0x22>
 801980c:	7822      	ldrb	r2, [r4, #0]
 801980e:	4b16      	ldr	r3, [pc, #88]	; (8019868 <rmw_validate_node_name+0xa4>)
 8019810:	5cd3      	ldrb	r3, [r2, r3]
 8019812:	f013 0304 	ands.w	r3, r3, #4
 8019816:	d113      	bne.n	8019840 <rmw_validate_node_name+0x7c>
 8019818:	28ff      	cmp	r0, #255	; 0xff
 801981a:	d81c      	bhi.n	8019856 <rmw_validate_node_name+0x92>
 801981c:	4618      	mov	r0, r3
 801981e:	602b      	str	r3, [r5, #0]
 8019820:	e00c      	b.n	801983c <rmw_validate_node_name+0x78>
 8019822:	2301      	movs	r3, #1
 8019824:	602b      	str	r3, [r5, #0]
 8019826:	b17e      	cbz	r6, 8019848 <rmw_validate_node_name+0x84>
 8019828:	2300      	movs	r3, #0
 801982a:	4618      	mov	r0, r3
 801982c:	6033      	str	r3, [r6, #0]
 801982e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019832:	2302      	movs	r3, #2
 8019834:	602b      	str	r3, [r5, #0]
 8019836:	b13e      	cbz	r6, 8019848 <rmw_validate_node_name+0x84>
 8019838:	2000      	movs	r0, #0
 801983a:	6037      	str	r7, [r6, #0]
 801983c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019840:	2303      	movs	r3, #3
 8019842:	602b      	str	r3, [r5, #0]
 8019844:	2e00      	cmp	r6, #0
 8019846:	d1ef      	bne.n	8019828 <rmw_validate_node_name+0x64>
 8019848:	2000      	movs	r0, #0
 801984a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801984e:	200b      	movs	r0, #11
 8019850:	4770      	bx	lr
 8019852:	200b      	movs	r0, #11
 8019854:	e7f2      	b.n	801983c <rmw_validate_node_name+0x78>
 8019856:	2204      	movs	r2, #4
 8019858:	602a      	str	r2, [r5, #0]
 801985a:	2e00      	cmp	r6, #0
 801985c:	d0f4      	beq.n	8019848 <rmw_validate_node_name+0x84>
 801985e:	22fe      	movs	r2, #254	; 0xfe
 8019860:	4618      	mov	r0, r3
 8019862:	6032      	str	r2, [r6, #0]
 8019864:	e7ea      	b.n	801983c <rmw_validate_node_name+0x78>
 8019866:	bf00      	nop
 8019868:	08021bf8 	.word	0x08021bf8

0801986c <rmw_node_name_validation_result_string>:
 801986c:	2804      	cmp	r0, #4
 801986e:	d803      	bhi.n	8019878 <rmw_node_name_validation_result_string+0xc>
 8019870:	4b02      	ldr	r3, [pc, #8]	; (801987c <rmw_node_name_validation_result_string+0x10>)
 8019872:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8019876:	4770      	bx	lr
 8019878:	4801      	ldr	r0, [pc, #4]	; (8019880 <rmw_node_name_validation_result_string+0x14>)
 801987a:	4770      	bx	lr
 801987c:	08021414 	.word	0x08021414
 8019880:	08021328 	.word	0x08021328

08019884 <get_memory>:
 8019884:	4603      	mov	r3, r0
 8019886:	6840      	ldr	r0, [r0, #4]
 8019888:	b158      	cbz	r0, 80198a2 <get_memory+0x1e>
 801988a:	6842      	ldr	r2, [r0, #4]
 801988c:	605a      	str	r2, [r3, #4]
 801988e:	b10a      	cbz	r2, 8019894 <get_memory+0x10>
 8019890:	2100      	movs	r1, #0
 8019892:	6011      	str	r1, [r2, #0]
 8019894:	681a      	ldr	r2, [r3, #0]
 8019896:	6042      	str	r2, [r0, #4]
 8019898:	b102      	cbz	r2, 801989c <get_memory+0x18>
 801989a:	6010      	str	r0, [r2, #0]
 801989c:	2200      	movs	r2, #0
 801989e:	6002      	str	r2, [r0, #0]
 80198a0:	6018      	str	r0, [r3, #0]
 80198a2:	4770      	bx	lr

080198a4 <put_memory>:
 80198a4:	680b      	ldr	r3, [r1, #0]
 80198a6:	b10b      	cbz	r3, 80198ac <put_memory+0x8>
 80198a8:	684a      	ldr	r2, [r1, #4]
 80198aa:	605a      	str	r2, [r3, #4]
 80198ac:	684a      	ldr	r2, [r1, #4]
 80198ae:	b102      	cbz	r2, 80198b2 <put_memory+0xe>
 80198b0:	6013      	str	r3, [r2, #0]
 80198b2:	6803      	ldr	r3, [r0, #0]
 80198b4:	428b      	cmp	r3, r1
 80198b6:	6843      	ldr	r3, [r0, #4]
 80198b8:	bf08      	it	eq
 80198ba:	6002      	streq	r2, [r0, #0]
 80198bc:	604b      	str	r3, [r1, #4]
 80198be:	b103      	cbz	r3, 80198c2 <put_memory+0x1e>
 80198c0:	6019      	str	r1, [r3, #0]
 80198c2:	2300      	movs	r3, #0
 80198c4:	600b      	str	r3, [r1, #0]
 80198c6:	6041      	str	r1, [r0, #4]
 80198c8:	4770      	bx	lr
 80198ca:	bf00      	nop

080198cc <rmw_destroy_client>:
 80198cc:	b570      	push	{r4, r5, r6, lr}
 80198ce:	b128      	cbz	r0, 80198dc <rmw_destroy_client+0x10>
 80198d0:	4604      	mov	r4, r0
 80198d2:	6800      	ldr	r0, [r0, #0]
 80198d4:	460d      	mov	r5, r1
 80198d6:	f7f6 f88b 	bl	800f9f0 <is_uxrce_rmw_identifier_valid>
 80198da:	b910      	cbnz	r0, 80198e2 <rmw_destroy_client+0x16>
 80198dc:	2401      	movs	r4, #1
 80198de:	4620      	mov	r0, r4
 80198e0:	bd70      	pop	{r4, r5, r6, pc}
 80198e2:	6863      	ldr	r3, [r4, #4]
 80198e4:	2b00      	cmp	r3, #0
 80198e6:	d0f9      	beq.n	80198dc <rmw_destroy_client+0x10>
 80198e8:	2d00      	cmp	r5, #0
 80198ea:	d0f7      	beq.n	80198dc <rmw_destroy_client+0x10>
 80198ec:	6828      	ldr	r0, [r5, #0]
 80198ee:	f7f6 f87f 	bl	800f9f0 <is_uxrce_rmw_identifier_valid>
 80198f2:	2800      	cmp	r0, #0
 80198f4:	d0f2      	beq.n	80198dc <rmw_destroy_client+0x10>
 80198f6:	686e      	ldr	r6, [r5, #4]
 80198f8:	2e00      	cmp	r6, #0
 80198fa:	d0ef      	beq.n	80198dc <rmw_destroy_client+0x10>
 80198fc:	6864      	ldr	r4, [r4, #4]
 80198fe:	6932      	ldr	r2, [r6, #16]
 8019900:	6920      	ldr	r0, [r4, #16]
 8019902:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8019906:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801990a:	6819      	ldr	r1, [r3, #0]
 801990c:	f002 f94e 	bl	801bbac <uxr_buffer_cancel_data>
 8019910:	4602      	mov	r2, r0
 8019912:	6920      	ldr	r0, [r4, #16]
 8019914:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8019918:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801991c:	f7f5 ff56 	bl	800f7cc <run_xrce_session>
 8019920:	6920      	ldr	r0, [r4, #16]
 8019922:	6932      	ldr	r2, [r6, #16]
 8019924:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8019928:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801992c:	6819      	ldr	r1, [r3, #0]
 801992e:	f7f8 f9fd 	bl	8011d2c <uxr_buffer_delete_entity>
 8019932:	4602      	mov	r2, r0
 8019934:	6920      	ldr	r0, [r4, #16]
 8019936:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801993a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801993e:	f7f5 ff45 	bl	800f7cc <run_xrce_session>
 8019942:	4603      	mov	r3, r0
 8019944:	4628      	mov	r0, r5
 8019946:	2b00      	cmp	r3, #0
 8019948:	bf14      	ite	ne
 801994a:	2400      	movne	r4, #0
 801994c:	2402      	moveq	r4, #2
 801994e:	f7f5 fe19 	bl	800f584 <rmw_uxrce_fini_client_memory>
 8019952:	e7c4      	b.n	80198de <rmw_destroy_client+0x12>

08019954 <rmw_get_gid_for_client>:
 8019954:	b1b9      	cbz	r1, 8019986 <rmw_get_gid_for_client+0x32>
 8019956:	b538      	push	{r3, r4, r5, lr}
 8019958:	4605      	mov	r5, r0
 801995a:	b180      	cbz	r0, 801997e <rmw_get_gid_for_client+0x2a>
 801995c:	6800      	ldr	r0, [r0, #0]
 801995e:	460c      	mov	r4, r1
 8019960:	b120      	cbz	r0, 801996c <rmw_get_gid_for_client+0x18>
 8019962:	4b0a      	ldr	r3, [pc, #40]	; (801998c <rmw_get_gid_for_client+0x38>)
 8019964:	6819      	ldr	r1, [r3, #0]
 8019966:	f7e6 fc6b 	bl	8000240 <strcmp>
 801996a:	b950      	cbnz	r0, 8019982 <rmw_get_gid_for_client+0x2e>
 801996c:	686b      	ldr	r3, [r5, #4]
 801996e:	2000      	movs	r0, #0
 8019970:	6060      	str	r0, [r4, #4]
 8019972:	60a0      	str	r0, [r4, #8]
 8019974:	60e0      	str	r0, [r4, #12]
 8019976:	6120      	str	r0, [r4, #16]
 8019978:	691b      	ldr	r3, [r3, #16]
 801997a:	6063      	str	r3, [r4, #4]
 801997c:	bd38      	pop	{r3, r4, r5, pc}
 801997e:	200b      	movs	r0, #11
 8019980:	bd38      	pop	{r3, r4, r5, pc}
 8019982:	200c      	movs	r0, #12
 8019984:	bd38      	pop	{r3, r4, r5, pc}
 8019986:	200b      	movs	r0, #11
 8019988:	4770      	bx	lr
 801998a:	bf00      	nop
 801998c:	08021440 	.word	0x08021440

08019990 <rmw_get_implementation_identifier>:
 8019990:	4b01      	ldr	r3, [pc, #4]	; (8019998 <rmw_get_implementation_identifier+0x8>)
 8019992:	6818      	ldr	r0, [r3, #0]
 8019994:	4770      	bx	lr
 8019996:	bf00      	nop
 8019998:	08021440 	.word	0x08021440

0801999c <rmw_init_options_init>:
 801999c:	b084      	sub	sp, #16
 801999e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80199a0:	b083      	sub	sp, #12
 80199a2:	ad09      	add	r5, sp, #36	; 0x24
 80199a4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80199a8:	b130      	cbz	r0, 80199b8 <rmw_init_options_init+0x1c>
 80199aa:	4604      	mov	r4, r0
 80199ac:	4628      	mov	r0, r5
 80199ae:	f7f5 f9cf 	bl	800ed50 <rcutils_allocator_is_valid>
 80199b2:	b108      	cbz	r0, 80199b8 <rmw_init_options_init+0x1c>
 80199b4:	68a6      	ldr	r6, [r4, #8]
 80199b6:	b12e      	cbz	r6, 80199c4 <rmw_init_options_init+0x28>
 80199b8:	200b      	movs	r0, #11
 80199ba:	b003      	add	sp, #12
 80199bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80199c0:	b004      	add	sp, #16
 80199c2:	4770      	bx	lr
 80199c4:	2200      	movs	r2, #0
 80199c6:	2300      	movs	r3, #0
 80199c8:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 80199cc:	f8df e098 	ldr.w	lr, [pc, #152]	; 8019a68 <rmw_init_options_init+0xcc>
 80199d0:	466f      	mov	r7, sp
 80199d2:	e9c4 2300 	strd	r2, r3, [r4]
 80199d6:	4b20      	ldr	r3, [pc, #128]	; (8019a58 <rmw_init_options_init+0xbc>)
 80199d8:	681b      	ldr	r3, [r3, #0]
 80199da:	60a3      	str	r3, [r4, #8]
 80199dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80199de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80199e2:	682b      	ldr	r3, [r5, #0]
 80199e4:	4638      	mov	r0, r7
 80199e6:	f8cc 3000 	str.w	r3, [ip]
 80199ea:	f8c4 e03c 	str.w	lr, [r4, #60]	; 0x3c
 80199ee:	60e6      	str	r6, [r4, #12]
 80199f0:	f7ff fd46 	bl	8019480 <rmw_get_default_security_options>
 80199f4:	f104 0310 	add.w	r3, r4, #16
 80199f8:	2203      	movs	r2, #3
 80199fa:	e897 0003 	ldmia.w	r7, {r0, r1}
 80199fe:	e883 0003 	stmia.w	r3, {r0, r1}
 8019a02:	4816      	ldr	r0, [pc, #88]	; (8019a5c <rmw_init_options_init+0xc0>)
 8019a04:	4916      	ldr	r1, [pc, #88]	; (8019a60 <rmw_init_options_init+0xc4>)
 8019a06:	7626      	strb	r6, [r4, #24]
 8019a08:	f7f5 fcfc 	bl	800f404 <rmw_uxrce_init_init_options_impl_memory>
 8019a0c:	4813      	ldr	r0, [pc, #76]	; (8019a5c <rmw_init_options_init+0xc0>)
 8019a0e:	f7ff ff39 	bl	8019884 <get_memory>
 8019a12:	b1f0      	cbz	r0, 8019a52 <rmw_init_options_init+0xb6>
 8019a14:	4a13      	ldr	r2, [pc, #76]	; (8019a64 <rmw_init_options_init+0xc8>)
 8019a16:	6883      	ldr	r3, [r0, #8]
 8019a18:	6851      	ldr	r1, [r2, #4]
 8019a1a:	6563      	str	r3, [r4, #84]	; 0x54
 8019a1c:	7810      	ldrb	r0, [r2, #0]
 8019a1e:	6159      	str	r1, [r3, #20]
 8019a20:	68d1      	ldr	r1, [r2, #12]
 8019a22:	7418      	strb	r0, [r3, #16]
 8019a24:	61d9      	str	r1, [r3, #28]
 8019a26:	6911      	ldr	r1, [r2, #16]
 8019a28:	6219      	str	r1, [r3, #32]
 8019a2a:	6951      	ldr	r1, [r2, #20]
 8019a2c:	6892      	ldr	r2, [r2, #8]
 8019a2e:	6259      	str	r1, [r3, #36]	; 0x24
 8019a30:	619a      	str	r2, [r3, #24]
 8019a32:	f7f9 fe1f 	bl	8013674 <uxr_nanos>
 8019a36:	f004 fc6d 	bl	801e314 <srand>
 8019a3a:	f004 fc99 	bl	801e370 <rand>
 8019a3e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8019a40:	6298      	str	r0, [r3, #40]	; 0x28
 8019a42:	2800      	cmp	r0, #0
 8019a44:	d0f9      	beq.n	8019a3a <rmw_init_options_init+0x9e>
 8019a46:	2000      	movs	r0, #0
 8019a48:	b003      	add	sp, #12
 8019a4a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019a4e:	b004      	add	sp, #16
 8019a50:	4770      	bx	lr
 8019a52:	2001      	movs	r0, #1
 8019a54:	e7b1      	b.n	80199ba <rmw_init_options_init+0x1e>
 8019a56:	bf00      	nop
 8019a58:	08021440 	.word	0x08021440
 8019a5c:	200114ec 	.word	0x200114ec
 8019a60:	2000cc18 	.word	0x2000cc18
 8019a64:	2000caa4 	.word	0x2000caa4
 8019a68:	08020e30 	.word	0x08020e30

08019a6c <rmw_init_options_copy>:
 8019a6c:	b570      	push	{r4, r5, r6, lr}
 8019a6e:	b158      	cbz	r0, 8019a88 <rmw_init_options_copy+0x1c>
 8019a70:	460d      	mov	r5, r1
 8019a72:	b149      	cbz	r1, 8019a88 <rmw_init_options_copy+0x1c>
 8019a74:	4604      	mov	r4, r0
 8019a76:	6880      	ldr	r0, [r0, #8]
 8019a78:	b120      	cbz	r0, 8019a84 <rmw_init_options_copy+0x18>
 8019a7a:	4b13      	ldr	r3, [pc, #76]	; (8019ac8 <rmw_init_options_copy+0x5c>)
 8019a7c:	6819      	ldr	r1, [r3, #0]
 8019a7e:	f7e6 fbdf 	bl	8000240 <strcmp>
 8019a82:	b9d8      	cbnz	r0, 8019abc <rmw_init_options_copy+0x50>
 8019a84:	68ae      	ldr	r6, [r5, #8]
 8019a86:	b116      	cbz	r6, 8019a8e <rmw_init_options_copy+0x22>
 8019a88:	260b      	movs	r6, #11
 8019a8a:	4630      	mov	r0, r6
 8019a8c:	bd70      	pop	{r4, r5, r6, pc}
 8019a8e:	2258      	movs	r2, #88	; 0x58
 8019a90:	4621      	mov	r1, r4
 8019a92:	4628      	mov	r0, r5
 8019a94:	f005 f82b 	bl	801eaee <memcpy>
 8019a98:	480c      	ldr	r0, [pc, #48]	; (8019acc <rmw_init_options_copy+0x60>)
 8019a9a:	f7ff fef3 	bl	8019884 <get_memory>
 8019a9e:	b180      	cbz	r0, 8019ac2 <rmw_init_options_copy+0x56>
 8019aa0:	6883      	ldr	r3, [r0, #8]
 8019aa2:	656b      	str	r3, [r5, #84]	; 0x54
 8019aa4:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8019aa6:	f103 0410 	add.w	r4, r3, #16
 8019aaa:	3510      	adds	r5, #16
 8019aac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019aae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019ab0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019ab4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8019ab8:	4630      	mov	r0, r6
 8019aba:	bd70      	pop	{r4, r5, r6, pc}
 8019abc:	260c      	movs	r6, #12
 8019abe:	4630      	mov	r0, r6
 8019ac0:	bd70      	pop	{r4, r5, r6, pc}
 8019ac2:	2601      	movs	r6, #1
 8019ac4:	e7e1      	b.n	8019a8a <rmw_init_options_copy+0x1e>
 8019ac6:	bf00      	nop
 8019ac8:	08021440 	.word	0x08021440
 8019acc:	200114ec 	.word	0x200114ec

08019ad0 <rmw_init_options_fini>:
 8019ad0:	b368      	cbz	r0, 8019b2e <rmw_init_options_fini+0x5e>
 8019ad2:	b510      	push	{r4, lr}
 8019ad4:	4604      	mov	r4, r0
 8019ad6:	b096      	sub	sp, #88	; 0x58
 8019ad8:	3040      	adds	r0, #64	; 0x40
 8019ada:	f7f5 f939 	bl	800ed50 <rcutils_allocator_is_valid>
 8019ade:	b1f0      	cbz	r0, 8019b1e <rmw_init_options_fini+0x4e>
 8019ae0:	68a0      	ldr	r0, [r4, #8]
 8019ae2:	b120      	cbz	r0, 8019aee <rmw_init_options_fini+0x1e>
 8019ae4:	4b13      	ldr	r3, [pc, #76]	; (8019b34 <rmw_init_options_fini+0x64>)
 8019ae6:	6819      	ldr	r1, [r3, #0]
 8019ae8:	f7e6 fbaa 	bl	8000240 <strcmp>
 8019aec:	b9e8      	cbnz	r0, 8019b2a <rmw_init_options_fini+0x5a>
 8019aee:	4b12      	ldr	r3, [pc, #72]	; (8019b38 <rmw_init_options_fini+0x68>)
 8019af0:	6819      	ldr	r1, [r3, #0]
 8019af2:	b1b9      	cbz	r1, 8019b24 <rmw_init_options_fini+0x54>
 8019af4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8019af6:	e001      	b.n	8019afc <rmw_init_options_fini+0x2c>
 8019af8:	6849      	ldr	r1, [r1, #4]
 8019afa:	b199      	cbz	r1, 8019b24 <rmw_init_options_fini+0x54>
 8019afc:	688b      	ldr	r3, [r1, #8]
 8019afe:	429a      	cmp	r2, r3
 8019b00:	d1fa      	bne.n	8019af8 <rmw_init_options_fini+0x28>
 8019b02:	480d      	ldr	r0, [pc, #52]	; (8019b38 <rmw_init_options_fini+0x68>)
 8019b04:	f7ff fece 	bl	80198a4 <put_memory>
 8019b08:	4668      	mov	r0, sp
 8019b0a:	f7ff fca5 	bl	8019458 <rmw_get_zero_initialized_init_options>
 8019b0e:	2258      	movs	r2, #88	; 0x58
 8019b10:	4669      	mov	r1, sp
 8019b12:	4620      	mov	r0, r4
 8019b14:	f004 ffeb 	bl	801eaee <memcpy>
 8019b18:	2000      	movs	r0, #0
 8019b1a:	b016      	add	sp, #88	; 0x58
 8019b1c:	bd10      	pop	{r4, pc}
 8019b1e:	200b      	movs	r0, #11
 8019b20:	b016      	add	sp, #88	; 0x58
 8019b22:	bd10      	pop	{r4, pc}
 8019b24:	2001      	movs	r0, #1
 8019b26:	b016      	add	sp, #88	; 0x58
 8019b28:	bd10      	pop	{r4, pc}
 8019b2a:	200c      	movs	r0, #12
 8019b2c:	e7f5      	b.n	8019b1a <rmw_init_options_fini+0x4a>
 8019b2e:	200b      	movs	r0, #11
 8019b30:	4770      	bx	lr
 8019b32:	bf00      	nop
 8019b34:	08021440 	.word	0x08021440
 8019b38:	200114ec 	.word	0x200114ec

08019b3c <rmw_init>:
 8019b3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019b40:	b083      	sub	sp, #12
 8019b42:	2800      	cmp	r0, #0
 8019b44:	f000 80d3 	beq.w	8019cee <rmw_init+0x1b2>
 8019b48:	460e      	mov	r6, r1
 8019b4a:	2900      	cmp	r1, #0
 8019b4c:	f000 80cf 	beq.w	8019cee <rmw_init+0x1b2>
 8019b50:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8019b52:	4605      	mov	r5, r0
 8019b54:	2b00      	cmp	r3, #0
 8019b56:	f000 80ca 	beq.w	8019cee <rmw_init+0x1b2>
 8019b5a:	4b78      	ldr	r3, [pc, #480]	; (8019d3c <rmw_init+0x200>)
 8019b5c:	6880      	ldr	r0, [r0, #8]
 8019b5e:	681f      	ldr	r7, [r3, #0]
 8019b60:	b128      	cbz	r0, 8019b6e <rmw_init+0x32>
 8019b62:	4639      	mov	r1, r7
 8019b64:	f7e6 fb6c 	bl	8000240 <strcmp>
 8019b68:	2800      	cmp	r0, #0
 8019b6a:	f040 80ca 	bne.w	8019d02 <rmw_init+0x1c6>
 8019b6e:	4c74      	ldr	r4, [pc, #464]	; (8019d40 <rmw_init+0x204>)
 8019b70:	f04f 0800 	mov.w	r8, #0
 8019b74:	4973      	ldr	r1, [pc, #460]	; (8019d44 <rmw_init+0x208>)
 8019b76:	4874      	ldr	r0, [pc, #464]	; (8019d48 <rmw_init+0x20c>)
 8019b78:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019b7c:	60b7      	str	r7, [r6, #8]
 8019b7e:	e9c6 2300 	strd	r2, r3, [r6]
 8019b82:	68eb      	ldr	r3, [r5, #12]
 8019b84:	2201      	movs	r2, #1
 8019b86:	66b3      	str	r3, [r6, #104]	; 0x68
 8019b88:	f7f5 fbdc 	bl	800f344 <rmw_uxrce_init_session_memory>
 8019b8c:	4620      	mov	r0, r4
 8019b8e:	2204      	movs	r2, #4
 8019b90:	496e      	ldr	r1, [pc, #440]	; (8019d4c <rmw_init+0x210>)
 8019b92:	f7f5 fc17 	bl	800f3c4 <rmw_uxrce_init_static_input_buffer_memory>
 8019b96:	486c      	ldr	r0, [pc, #432]	; (8019d48 <rmw_init+0x20c>)
 8019b98:	f884 800d 	strb.w	r8, [r4, #13]
 8019b9c:	f7ff fe72 	bl	8019884 <get_memory>
 8019ba0:	2800      	cmp	r0, #0
 8019ba2:	f000 80a9 	beq.w	8019cf8 <rmw_init+0x1bc>
 8019ba6:	6884      	ldr	r4, [r0, #8]
 8019ba8:	6d68      	ldr	r0, [r5, #84]	; 0x54
 8019baa:	f104 0910 	add.w	r9, r4, #16
 8019bae:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8019bb0:	f890 c010 	ldrb.w	ip, [r0, #16]
 8019bb4:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8019bb8:	9101      	str	r1, [sp, #4]
 8019bba:	4661      	mov	r1, ip
 8019bbc:	6a00      	ldr	r0, [r0, #32]
 8019bbe:	9000      	str	r0, [sp, #0]
 8019bc0:	4648      	mov	r0, r9
 8019bc2:	f001 fa2b 	bl	801b01c <uxr_set_custom_transport_callbacks>
 8019bc6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019bca:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8019bce:	4960      	ldr	r1, [pc, #384]	; (8019d50 <rmw_init+0x214>)
 8019bd0:	4860      	ldr	r0, [pc, #384]	; (8019d54 <rmw_init+0x218>)
 8019bd2:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8019bd6:	f504 725e 	add.w	r2, r4, #888	; 0x378
 8019bda:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 8019bde:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 8019be2:	2202      	movs	r2, #2
 8019be4:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 8019be8:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 8019bec:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 8019bf0:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 8019bf4:	66f4      	str	r4, [r6, #108]	; 0x6c
 8019bf6:	f7f5 fb85 	bl	800f304 <rmw_uxrce_init_node_memory>
 8019bfa:	2205      	movs	r2, #5
 8019bfc:	4956      	ldr	r1, [pc, #344]	; (8019d58 <rmw_init+0x21c>)
 8019bfe:	4857      	ldr	r0, [pc, #348]	; (8019d5c <rmw_init+0x220>)
 8019c00:	f7f5 fb60 	bl	800f2c4 <rmw_uxrce_init_subscription_memory>
 8019c04:	220a      	movs	r2, #10
 8019c06:	4956      	ldr	r1, [pc, #344]	; (8019d60 <rmw_init+0x224>)
 8019c08:	4856      	ldr	r0, [pc, #344]	; (8019d64 <rmw_init+0x228>)
 8019c0a:	f7f5 fb3b 	bl	800f284 <rmw_uxrce_init_publisher_memory>
 8019c0e:	2202      	movs	r2, #2
 8019c10:	4955      	ldr	r1, [pc, #340]	; (8019d68 <rmw_init+0x22c>)
 8019c12:	4856      	ldr	r0, [pc, #344]	; (8019d6c <rmw_init+0x230>)
 8019c14:	f7f5 faf6 	bl	800f204 <rmw_uxrce_init_service_memory>
 8019c18:	2201      	movs	r2, #1
 8019c1a:	4955      	ldr	r1, [pc, #340]	; (8019d70 <rmw_init+0x234>)
 8019c1c:	4855      	ldr	r0, [pc, #340]	; (8019d74 <rmw_init+0x238>)
 8019c1e:	f7f5 fb11 	bl	800f244 <rmw_uxrce_init_client_memory>
 8019c22:	220f      	movs	r2, #15
 8019c24:	4954      	ldr	r1, [pc, #336]	; (8019d78 <rmw_init+0x23c>)
 8019c26:	4855      	ldr	r0, [pc, #340]	; (8019d7c <rmw_init+0x240>)
 8019c28:	f7f5 fbac 	bl	800f384 <rmw_uxrce_init_topic_memory>
 8019c2c:	2203      	movs	r2, #3
 8019c2e:	4954      	ldr	r1, [pc, #336]	; (8019d80 <rmw_init+0x244>)
 8019c30:	4854      	ldr	r0, [pc, #336]	; (8019d84 <rmw_init+0x248>)
 8019c32:	f7f5 fbe7 	bl	800f404 <rmw_uxrce_init_init_options_impl_memory>
 8019c36:	2204      	movs	r2, #4
 8019c38:	4953      	ldr	r1, [pc, #332]	; (8019d88 <rmw_init+0x24c>)
 8019c3a:	4854      	ldr	r0, [pc, #336]	; (8019d8c <rmw_init+0x250>)
 8019c3c:	f7f5 fc02 	bl	800f444 <rmw_uxrce_init_wait_set_memory>
 8019c40:	4953      	ldr	r1, [pc, #332]	; (8019d90 <rmw_init+0x254>)
 8019c42:	4854      	ldr	r0, [pc, #336]	; (8019d94 <rmw_init+0x258>)
 8019c44:	2204      	movs	r2, #4
 8019c46:	f7f5 fc1d 	bl	800f484 <rmw_uxrce_init_guard_condition_memory>
 8019c4a:	4642      	mov	r2, r8
 8019c4c:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8019c4e:	6ef0      	ldr	r0, [r6, #108]	; 0x6c
 8019c50:	f000 feba 	bl	801a9c8 <rmw_uxrce_transport_init>
 8019c54:	4607      	mov	r7, r0
 8019c56:	2800      	cmp	r0, #0
 8019c58:	d158      	bne.n	8019d0c <rmw_init+0x1d0>
 8019c5a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8019c5c:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 8019c60:	f504 7122 	add.w	r1, r4, #648	; 0x288
 8019c64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8019c66:	4628      	mov	r0, r5
 8019c68:	f7f8 fb5a 	bl	8012320 <uxr_init_session>
 8019c6c:	4622      	mov	r2, r4
 8019c6e:	494a      	ldr	r1, [pc, #296]	; (8019d98 <rmw_init+0x25c>)
 8019c70:	4628      	mov	r0, r5
 8019c72:	f7f8 fb79 	bl	8012368 <uxr_set_topic_callback>
 8019c76:	463a      	mov	r2, r7
 8019c78:	4948      	ldr	r1, [pc, #288]	; (8019d9c <rmw_init+0x260>)
 8019c7a:	4628      	mov	r0, r5
 8019c7c:	f7f8 fb70 	bl	8012360 <uxr_set_status_callback>
 8019c80:	463a      	mov	r2, r7
 8019c82:	4947      	ldr	r1, [pc, #284]	; (8019da0 <rmw_init+0x264>)
 8019c84:	4628      	mov	r0, r5
 8019c86:	f7f8 fb73 	bl	8012370 <uxr_set_request_callback>
 8019c8a:	463a      	mov	r2, r7
 8019c8c:	4945      	ldr	r1, [pc, #276]	; (8019da4 <rmw_init+0x268>)
 8019c8e:	4628      	mov	r0, r5
 8019c90:	f7f8 fb72 	bl	8012378 <uxr_set_reply_callback>
 8019c94:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8019c98:	2304      	movs	r3, #4
 8019c9a:	f504 7165 	add.w	r1, r4, #916	; 0x394
 8019c9e:	0092      	lsls	r2, r2, #2
 8019ca0:	4628      	mov	r0, r5
 8019ca2:	f7f8 fba9 	bl	80123f8 <uxr_create_input_reliable_stream>
 8019ca6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8019caa:	2304      	movs	r3, #4
 8019cac:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8019cb0:	0092      	lsls	r2, r2, #2
 8019cb2:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8019cb6:	4628      	mov	r0, r5
 8019cb8:	f7f8 fb74 	bl	80123a4 <uxr_create_output_reliable_stream>
 8019cbc:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8019cc0:	4628      	mov	r0, r5
 8019cc2:	f7f8 fb93 	bl	80123ec <uxr_create_input_best_effort_stream>
 8019cc6:	f241 3194 	movw	r1, #5012	; 0x1394
 8019cca:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8019cce:	4628      	mov	r0, r5
 8019cd0:	4421      	add	r1, r4
 8019cd2:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8019cd6:	f7f8 fb53 	bl	8012380 <uxr_create_output_best_effort_stream>
 8019cda:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 8019cde:	4628      	mov	r0, r5
 8019ce0:	f7f9 f8dc 	bl	8012e9c <uxr_create_session>
 8019ce4:	b1f8      	cbz	r0, 8019d26 <rmw_init+0x1ea>
 8019ce6:	4638      	mov	r0, r7
 8019ce8:	b003      	add	sp, #12
 8019cea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019cee:	270b      	movs	r7, #11
 8019cf0:	4638      	mov	r0, r7
 8019cf2:	b003      	add	sp, #12
 8019cf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019cf8:	2701      	movs	r7, #1
 8019cfa:	4638      	mov	r0, r7
 8019cfc:	b003      	add	sp, #12
 8019cfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019d02:	270c      	movs	r7, #12
 8019d04:	4638      	mov	r0, r7
 8019d06:	b003      	add	sp, #12
 8019d08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019d0c:	4648      	mov	r0, r9
 8019d0e:	f001 f9c3 	bl	801b098 <uxr_close_custom_transport>
 8019d12:	4621      	mov	r1, r4
 8019d14:	480c      	ldr	r0, [pc, #48]	; (8019d48 <rmw_init+0x20c>)
 8019d16:	f7ff fdc5 	bl	80198a4 <put_memory>
 8019d1a:	4638      	mov	r0, r7
 8019d1c:	f8c6 806c 	str.w	r8, [r6, #108]	; 0x6c
 8019d20:	b003      	add	sp, #12
 8019d22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019d26:	4648      	mov	r0, r9
 8019d28:	f001 f9b6 	bl	801b098 <uxr_close_custom_transport>
 8019d2c:	4621      	mov	r1, r4
 8019d2e:	4806      	ldr	r0, [pc, #24]	; (8019d48 <rmw_init+0x20c>)
 8019d30:	f7ff fdb8 	bl	80198a4 <put_memory>
 8019d34:	66f7      	str	r7, [r6, #108]	; 0x6c
 8019d36:	2701      	movs	r7, #1
 8019d38:	e7d5      	b.n	8019ce6 <rmw_init+0x1aa>
 8019d3a:	bf00      	nop
 8019d3c:	08021440 	.word	0x08021440
 8019d40:	2001153c 	.word	0x2001153c
 8019d44:	2000d7e8 	.word	0x2000d7e8
 8019d48:	2001152c 	.word	0x2001152c
 8019d4c:	2000ed90 	.word	0x2000ed90
 8019d50:	2000cc9c 	.word	0x2000cc9c
 8019d54:	200114fc 	.word	0x200114fc
 8019d58:	20010e90 	.word	0x20010e90
 8019d5c:	2001154c 	.word	0x2001154c
 8019d60:	2000cde8 	.word	0x2000cde8
 8019d64:	2001150c 	.word	0x2001150c
 8019d68:	2000d658 	.word	0x2000d658
 8019d6c:	2001151c 	.word	0x2001151c
 8019d70:	2000cad0 	.word	0x2000cad0
 8019d74:	2000cac0 	.word	0x2000cac0
 8019d78:	200112c8 	.word	0x200112c8
 8019d7c:	2001155c 	.word	0x2001155c
 8019d80:	2000cc18 	.word	0x2000cc18
 8019d84:	200114ec 	.word	0x200114ec
 8019d88:	2001146c 	.word	0x2001146c
 8019d8c:	2001156c 	.word	0x2001156c
 8019d90:	2000cb98 	.word	0x2000cb98
 8019d94:	200114dc 	.word	0x200114dc
 8019d98:	0801d185 	.word	0x0801d185
 8019d9c:	0801d17d 	.word	0x0801d17d
 8019da0:	0801d21d 	.word	0x0801d21d
 8019da4:	0801d2b9 	.word	0x0801d2b9

08019da8 <rmw_context_fini>:
 8019da8:	4b17      	ldr	r3, [pc, #92]	; (8019e08 <rmw_context_fini+0x60>)
 8019daa:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8019dac:	b570      	push	{r4, r5, r6, lr}
 8019dae:	681c      	ldr	r4, [r3, #0]
 8019db0:	4605      	mov	r5, r0
 8019db2:	b334      	cbz	r4, 8019e02 <rmw_context_fini+0x5a>
 8019db4:	2600      	movs	r6, #0
 8019db6:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8019dba:	6902      	ldr	r2, [r0, #16]
 8019dbc:	428a      	cmp	r2, r1
 8019dbe:	d018      	beq.n	8019df2 <rmw_context_fini+0x4a>
 8019dc0:	2c00      	cmp	r4, #0
 8019dc2:	d1f8      	bne.n	8019db6 <rmw_context_fini+0xe>
 8019dc4:	b189      	cbz	r1, 8019dea <rmw_context_fini+0x42>
 8019dc6:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 8019dca:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 8019dce:	789b      	ldrb	r3, [r3, #2]
 8019dd0:	2b01      	cmp	r3, #1
 8019dd2:	bf14      	ite	ne
 8019dd4:	210a      	movne	r1, #10
 8019dd6:	2100      	moveq	r1, #0
 8019dd8:	f7f9 f838 	bl	8012e4c <uxr_delete_session_retries>
 8019ddc:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8019dde:	f7f5 fb71 	bl	800f4c4 <rmw_uxrce_fini_session_memory>
 8019de2:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8019de4:	3010      	adds	r0, #16
 8019de6:	f001 f957 	bl	801b098 <uxr_close_custom_transport>
 8019dea:	2300      	movs	r3, #0
 8019dec:	4630      	mov	r0, r6
 8019dee:	66eb      	str	r3, [r5, #108]	; 0x6c
 8019df0:	bd70      	pop	{r4, r5, r6, pc}
 8019df2:	3018      	adds	r0, #24
 8019df4:	f000 f90e 	bl	801a014 <rmw_destroy_node>
 8019df8:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 8019dfa:	4606      	mov	r6, r0
 8019dfc:	2c00      	cmp	r4, #0
 8019dfe:	d1da      	bne.n	8019db6 <rmw_context_fini+0xe>
 8019e00:	e7e0      	b.n	8019dc4 <rmw_context_fini+0x1c>
 8019e02:	4626      	mov	r6, r4
 8019e04:	e7de      	b.n	8019dc4 <rmw_context_fini+0x1c>
 8019e06:	bf00      	nop
 8019e08:	200114fc 	.word	0x200114fc

08019e0c <create_topic>:
 8019e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e10:	4605      	mov	r5, r0
 8019e12:	b084      	sub	sp, #16
 8019e14:	4822      	ldr	r0, [pc, #136]	; (8019ea0 <create_topic+0x94>)
 8019e16:	460f      	mov	r7, r1
 8019e18:	4616      	mov	r6, r2
 8019e1a:	f7ff fd33 	bl	8019884 <get_memory>
 8019e1e:	4604      	mov	r4, r0
 8019e20:	2800      	cmp	r0, #0
 8019e22:	d039      	beq.n	8019e98 <create_topic+0x8c>
 8019e24:	692b      	ldr	r3, [r5, #16]
 8019e26:	2102      	movs	r1, #2
 8019e28:	6884      	ldr	r4, [r0, #8]
 8019e2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019e2e:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8019ea8 <create_topic+0x9c>
 8019e32:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 8019e36:	1c42      	adds	r2, r0, #1
 8019e38:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8019e3c:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 8019e40:	f7f8 f9b0 	bl	80121a4 <uxr_object_id>
 8019e44:	223c      	movs	r2, #60	; 0x3c
 8019e46:	6120      	str	r0, [r4, #16]
 8019e48:	4641      	mov	r1, r8
 8019e4a:	4638      	mov	r0, r7
 8019e4c:	f7f5 fdb8 	bl	800f9c0 <generate_topic_name>
 8019e50:	b1f0      	cbz	r0, 8019e90 <create_topic+0x84>
 8019e52:	4f14      	ldr	r7, [pc, #80]	; (8019ea4 <create_topic+0x98>)
 8019e54:	4630      	mov	r0, r6
 8019e56:	2264      	movs	r2, #100	; 0x64
 8019e58:	4639      	mov	r1, r7
 8019e5a:	f7f5 fd83 	bl	800f964 <generate_type_name>
 8019e5e:	b1b8      	cbz	r0, 8019e90 <create_topic+0x84>
 8019e60:	6928      	ldr	r0, [r5, #16]
 8019e62:	2106      	movs	r1, #6
 8019e64:	696b      	ldr	r3, [r5, #20]
 8019e66:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8019e6a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019e6e:	f8cd 8000 	str.w	r8, [sp]
 8019e72:	e9cd 7101 	strd	r7, r1, [sp, #4]
 8019e76:	6811      	ldr	r1, [r2, #0]
 8019e78:	6922      	ldr	r2, [r4, #16]
 8019e7a:	f7f7 ffd5 	bl	8011e28 <uxr_buffer_create_topic_bin>
 8019e7e:	4602      	mov	r2, r0
 8019e80:	6928      	ldr	r0, [r5, #16]
 8019e82:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8019e86:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8019e8a:	f7f5 fc9f 	bl	800f7cc <run_xrce_session>
 8019e8e:	b918      	cbnz	r0, 8019e98 <create_topic+0x8c>
 8019e90:	4620      	mov	r0, r4
 8019e92:	2400      	movs	r4, #0
 8019e94:	f7f5 fb8c 	bl	800f5b0 <rmw_uxrce_fini_topic_memory>
 8019e98:	4620      	mov	r0, r4
 8019e9a:	b004      	add	sp, #16
 8019e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ea0:	2001155c 	.word	0x2001155c
 8019ea4:	20011b10 	.word	0x20011b10
 8019ea8:	20011ad4 	.word	0x20011ad4

08019eac <destroy_topic>:
 8019eac:	b538      	push	{r3, r4, r5, lr}
 8019eae:	6985      	ldr	r5, [r0, #24]
 8019eb0:	b1dd      	cbz	r5, 8019eea <destroy_topic+0x3e>
 8019eb2:	4604      	mov	r4, r0
 8019eb4:	6928      	ldr	r0, [r5, #16]
 8019eb6:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8019eba:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019ebe:	6922      	ldr	r2, [r4, #16]
 8019ec0:	6819      	ldr	r1, [r3, #0]
 8019ec2:	f7f7 ff33 	bl	8011d2c <uxr_buffer_delete_entity>
 8019ec6:	4602      	mov	r2, r0
 8019ec8:	6928      	ldr	r0, [r5, #16]
 8019eca:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8019ece:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8019ed2:	f7f5 fc7b 	bl	800f7cc <run_xrce_session>
 8019ed6:	4603      	mov	r3, r0
 8019ed8:	4620      	mov	r0, r4
 8019eda:	2b00      	cmp	r3, #0
 8019edc:	bf14      	ite	ne
 8019ede:	2400      	movne	r4, #0
 8019ee0:	2402      	moveq	r4, #2
 8019ee2:	f7f5 fb65 	bl	800f5b0 <rmw_uxrce_fini_topic_memory>
 8019ee6:	4620      	mov	r0, r4
 8019ee8:	bd38      	pop	{r3, r4, r5, pc}
 8019eea:	2401      	movs	r4, #1
 8019eec:	4620      	mov	r0, r4
 8019eee:	bd38      	pop	{r3, r4, r5, pc}

08019ef0 <create_node>:
 8019ef0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019ef4:	b083      	sub	sp, #12
 8019ef6:	2b00      	cmp	r3, #0
 8019ef8:	d064      	beq.n	8019fc4 <create_node+0xd4>
 8019efa:	4606      	mov	r6, r0
 8019efc:	4838      	ldr	r0, [pc, #224]	; (8019fe0 <create_node+0xf0>)
 8019efe:	460f      	mov	r7, r1
 8019f00:	4690      	mov	r8, r2
 8019f02:	461d      	mov	r5, r3
 8019f04:	f7ff fcbe 	bl	8019884 <get_memory>
 8019f08:	2800      	cmp	r0, #0
 8019f0a:	d05b      	beq.n	8019fc4 <create_node+0xd4>
 8019f0c:	6884      	ldr	r4, [r0, #8]
 8019f0e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8019f10:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 8019f14:	f104 0518 	add.w	r5, r4, #24
 8019f18:	6123      	str	r3, [r4, #16]
 8019f1a:	f7ff fd39 	bl	8019990 <rmw_get_implementation_identifier>
 8019f1e:	f8c4 9020 	str.w	r9, [r4, #32]
 8019f22:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8019f26:	4630      	mov	r0, r6
 8019f28:	f7e6 f9ea 	bl	8000300 <strlen>
 8019f2c:	1c42      	adds	r2, r0, #1
 8019f2e:	2a3c      	cmp	r2, #60	; 0x3c
 8019f30:	d840      	bhi.n	8019fb4 <create_node+0xc4>
 8019f32:	4648      	mov	r0, r9
 8019f34:	f104 0968 	add.w	r9, r4, #104	; 0x68
 8019f38:	4631      	mov	r1, r6
 8019f3a:	f004 fdd8 	bl	801eaee <memcpy>
 8019f3e:	4638      	mov	r0, r7
 8019f40:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8019f44:	f7e6 f9dc 	bl	8000300 <strlen>
 8019f48:	1c42      	adds	r2, r0, #1
 8019f4a:	2a3c      	cmp	r2, #60	; 0x3c
 8019f4c:	d832      	bhi.n	8019fb4 <create_node+0xc4>
 8019f4e:	4639      	mov	r1, r7
 8019f50:	4648      	mov	r0, r9
 8019f52:	f004 fdcc 	bl	801eaee <memcpy>
 8019f56:	6923      	ldr	r3, [r4, #16]
 8019f58:	2101      	movs	r1, #1
 8019f5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019f5e:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 8019f62:	1842      	adds	r2, r0, r1
 8019f64:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 8019f68:	f7f8 f91c 	bl	80121a4 <uxr_object_id>
 8019f6c:	6160      	str	r0, [r4, #20]
 8019f6e:	783b      	ldrb	r3, [r7, #0]
 8019f70:	2b2f      	cmp	r3, #47	; 0x2f
 8019f72:	d12c      	bne.n	8019fce <create_node+0xde>
 8019f74:	787b      	ldrb	r3, [r7, #1]
 8019f76:	bb53      	cbnz	r3, 8019fce <create_node+0xde>
 8019f78:	4633      	mov	r3, r6
 8019f7a:	4a1a      	ldr	r2, [pc, #104]	; (8019fe4 <create_node+0xf4>)
 8019f7c:	213c      	movs	r1, #60	; 0x3c
 8019f7e:	481a      	ldr	r0, [pc, #104]	; (8019fe8 <create_node+0xf8>)
 8019f80:	f004 fbaa 	bl	801e6d8 <sniprintf>
 8019f84:	6920      	ldr	r0, [r4, #16]
 8019f86:	2106      	movs	r1, #6
 8019f88:	fa1f f388 	uxth.w	r3, r8
 8019f8c:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8019f90:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019f94:	9101      	str	r1, [sp, #4]
 8019f96:	4914      	ldr	r1, [pc, #80]	; (8019fe8 <create_node+0xf8>)
 8019f98:	9100      	str	r1, [sp, #0]
 8019f9a:	6811      	ldr	r1, [r2, #0]
 8019f9c:	6962      	ldr	r2, [r4, #20]
 8019f9e:	f7f7 ff11 	bl	8011dc4 <uxr_buffer_create_participant_bin>
 8019fa2:	4602      	mov	r2, r0
 8019fa4:	6920      	ldr	r0, [r4, #16]
 8019fa6:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8019faa:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8019fae:	f7f5 fc0d 	bl	800f7cc <run_xrce_session>
 8019fb2:	b918      	cbnz	r0, 8019fbc <create_node+0xcc>
 8019fb4:	4628      	mov	r0, r5
 8019fb6:	2500      	movs	r5, #0
 8019fb8:	f7f5 fa8a 	bl	800f4d0 <rmw_uxrce_fini_node_memory>
 8019fbc:	4628      	mov	r0, r5
 8019fbe:	b003      	add	sp, #12
 8019fc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019fc4:	2500      	movs	r5, #0
 8019fc6:	4628      	mov	r0, r5
 8019fc8:	b003      	add	sp, #12
 8019fca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019fce:	463b      	mov	r3, r7
 8019fd0:	4a06      	ldr	r2, [pc, #24]	; (8019fec <create_node+0xfc>)
 8019fd2:	213c      	movs	r1, #60	; 0x3c
 8019fd4:	9600      	str	r6, [sp, #0]
 8019fd6:	4804      	ldr	r0, [pc, #16]	; (8019fe8 <create_node+0xf8>)
 8019fd8:	f004 fb7e 	bl	801e6d8 <sniprintf>
 8019fdc:	e7d2      	b.n	8019f84 <create_node+0x94>
 8019fde:	bf00      	nop
 8019fe0:	200114fc 	.word	0x200114fc
 8019fe4:	080208f4 	.word	0x080208f4
 8019fe8:	20011b74 	.word	0x20011b74
 8019fec:	08020e38 	.word	0x08020e38

08019ff0 <rmw_create_node>:
 8019ff0:	468c      	mov	ip, r1
 8019ff2:	4611      	mov	r1, r2
 8019ff4:	f1bc 0f00 	cmp.w	ip, #0
 8019ff8:	d00a      	beq.n	801a010 <rmw_create_node+0x20>
 8019ffa:	f89c 3000 	ldrb.w	r3, [ip]
 8019ffe:	b13b      	cbz	r3, 801a010 <rmw_create_node+0x20>
 801a000:	b132      	cbz	r2, 801a010 <rmw_create_node+0x20>
 801a002:	7813      	ldrb	r3, [r2, #0]
 801a004:	b123      	cbz	r3, 801a010 <rmw_create_node+0x20>
 801a006:	4603      	mov	r3, r0
 801a008:	6e82      	ldr	r2, [r0, #104]	; 0x68
 801a00a:	4660      	mov	r0, ip
 801a00c:	f7ff bf70 	b.w	8019ef0 <create_node>
 801a010:	2000      	movs	r0, #0
 801a012:	4770      	bx	lr

0801a014 <rmw_destroy_node>:
 801a014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a016:	b328      	cbz	r0, 801a064 <rmw_destroy_node+0x50>
 801a018:	4607      	mov	r7, r0
 801a01a:	6800      	ldr	r0, [r0, #0]
 801a01c:	b120      	cbz	r0, 801a028 <rmw_destroy_node+0x14>
 801a01e:	4b37      	ldr	r3, [pc, #220]	; (801a0fc <rmw_destroy_node+0xe8>)
 801a020:	6819      	ldr	r1, [r3, #0]
 801a022:	f7e6 f90d 	bl	8000240 <strcmp>
 801a026:	b9e8      	cbnz	r0, 801a064 <rmw_destroy_node+0x50>
 801a028:	687d      	ldr	r5, [r7, #4]
 801a02a:	b1dd      	cbz	r5, 801a064 <rmw_destroy_node+0x50>
 801a02c:	4b34      	ldr	r3, [pc, #208]	; (801a100 <rmw_destroy_node+0xec>)
 801a02e:	681c      	ldr	r4, [r3, #0]
 801a030:	2c00      	cmp	r4, #0
 801a032:	d060      	beq.n	801a0f6 <rmw_destroy_node+0xe2>
 801a034:	2600      	movs	r6, #0
 801a036:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801a03a:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 801a03e:	429d      	cmp	r5, r3
 801a040:	d013      	beq.n	801a06a <rmw_destroy_node+0x56>
 801a042:	2c00      	cmp	r4, #0
 801a044:	d1f7      	bne.n	801a036 <rmw_destroy_node+0x22>
 801a046:	4b2f      	ldr	r3, [pc, #188]	; (801a104 <rmw_destroy_node+0xf0>)
 801a048:	681c      	ldr	r4, [r3, #0]
 801a04a:	b1c4      	cbz	r4, 801a07e <rmw_destroy_node+0x6a>
 801a04c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801a050:	6a0b      	ldr	r3, [r1, #32]
 801a052:	429d      	cmp	r5, r3
 801a054:	d1f9      	bne.n	801a04a <rmw_destroy_node+0x36>
 801a056:	317c      	adds	r1, #124	; 0x7c
 801a058:	4638      	mov	r0, r7
 801a05a:	f000 fbff 	bl	801a85c <rmw_destroy_subscription>
 801a05e:	2801      	cmp	r0, #1
 801a060:	4606      	mov	r6, r0
 801a062:	d1f2      	bne.n	801a04a <rmw_destroy_node+0x36>
 801a064:	2601      	movs	r6, #1
 801a066:	4630      	mov	r0, r6
 801a068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a06a:	3184      	adds	r1, #132	; 0x84
 801a06c:	4638      	mov	r0, r7
 801a06e:	f7f5 f875 	bl	800f15c <rmw_destroy_publisher>
 801a072:	2801      	cmp	r0, #1
 801a074:	4606      	mov	r6, r0
 801a076:	d0f5      	beq.n	801a064 <rmw_destroy_node+0x50>
 801a078:	2c00      	cmp	r4, #0
 801a07a:	d1dc      	bne.n	801a036 <rmw_destroy_node+0x22>
 801a07c:	e7e3      	b.n	801a046 <rmw_destroy_node+0x32>
 801a07e:	4b22      	ldr	r3, [pc, #136]	; (801a108 <rmw_destroy_node+0xf4>)
 801a080:	681c      	ldr	r4, [r3, #0]
 801a082:	b16c      	cbz	r4, 801a0a0 <rmw_destroy_node+0x8c>
 801a084:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801a088:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 801a08a:	429d      	cmp	r5, r3
 801a08c:	d1f9      	bne.n	801a082 <rmw_destroy_node+0x6e>
 801a08e:	317c      	adds	r1, #124	; 0x7c
 801a090:	4638      	mov	r0, r7
 801a092:	f000 fa6d 	bl	801a570 <rmw_destroy_service>
 801a096:	2801      	cmp	r0, #1
 801a098:	4606      	mov	r6, r0
 801a09a:	d0e3      	beq.n	801a064 <rmw_destroy_node+0x50>
 801a09c:	2c00      	cmp	r4, #0
 801a09e:	d1f1      	bne.n	801a084 <rmw_destroy_node+0x70>
 801a0a0:	4b1a      	ldr	r3, [pc, #104]	; (801a10c <rmw_destroy_node+0xf8>)
 801a0a2:	681c      	ldr	r4, [r3, #0]
 801a0a4:	b16c      	cbz	r4, 801a0c2 <rmw_destroy_node+0xae>
 801a0a6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801a0aa:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 801a0ac:	429d      	cmp	r5, r3
 801a0ae:	d1f9      	bne.n	801a0a4 <rmw_destroy_node+0x90>
 801a0b0:	317c      	adds	r1, #124	; 0x7c
 801a0b2:	4638      	mov	r0, r7
 801a0b4:	f7ff fc0a 	bl	80198cc <rmw_destroy_client>
 801a0b8:	2801      	cmp	r0, #1
 801a0ba:	4606      	mov	r6, r0
 801a0bc:	d0d2      	beq.n	801a064 <rmw_destroy_node+0x50>
 801a0be:	2c00      	cmp	r4, #0
 801a0c0:	d1f1      	bne.n	801a0a6 <rmw_destroy_node+0x92>
 801a0c2:	6928      	ldr	r0, [r5, #16]
 801a0c4:	696a      	ldr	r2, [r5, #20]
 801a0c6:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801a0ca:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a0ce:	6819      	ldr	r1, [r3, #0]
 801a0d0:	f7f7 fe2c 	bl	8011d2c <uxr_buffer_delete_entity>
 801a0d4:	4602      	mov	r2, r0
 801a0d6:	6928      	ldr	r0, [r5, #16]
 801a0d8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801a0dc:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801a0e0:	f7f5 fb74 	bl	800f7cc <run_xrce_session>
 801a0e4:	4603      	mov	r3, r0
 801a0e6:	4638      	mov	r0, r7
 801a0e8:	2b00      	cmp	r3, #0
 801a0ea:	bf08      	it	eq
 801a0ec:	2602      	moveq	r6, #2
 801a0ee:	f7f5 f9ef 	bl	800f4d0 <rmw_uxrce_fini_node_memory>
 801a0f2:	4630      	mov	r0, r6
 801a0f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a0f6:	4626      	mov	r6, r4
 801a0f8:	e7a5      	b.n	801a046 <rmw_destroy_node+0x32>
 801a0fa:	bf00      	nop
 801a0fc:	08021440 	.word	0x08021440
 801a100:	2001150c 	.word	0x2001150c
 801a104:	2001154c 	.word	0x2001154c
 801a108:	2001151c 	.word	0x2001151c
 801a10c:	2000cac0 	.word	0x2000cac0

0801a110 <rmw_node_get_graph_guard_condition>:
 801a110:	6843      	ldr	r3, [r0, #4]
 801a112:	6918      	ldr	r0, [r3, #16]
 801a114:	f500 705a 	add.w	r0, r0, #872	; 0x368
 801a118:	4770      	bx	lr
 801a11a:	bf00      	nop

0801a11c <rmw_send_request>:
 801a11c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a120:	4604      	mov	r4, r0
 801a122:	6800      	ldr	r0, [r0, #0]
 801a124:	b08b      	sub	sp, #44	; 0x2c
 801a126:	460e      	mov	r6, r1
 801a128:	4615      	mov	r5, r2
 801a12a:	b128      	cbz	r0, 801a138 <rmw_send_request+0x1c>
 801a12c:	4b21      	ldr	r3, [pc, #132]	; (801a1b4 <rmw_send_request+0x98>)
 801a12e:	6819      	ldr	r1, [r3, #0]
 801a130:	f7e6 f886 	bl	8000240 <strcmp>
 801a134:	2800      	cmp	r0, #0
 801a136:	d139      	bne.n	801a1ac <rmw_send_request+0x90>
 801a138:	6864      	ldr	r4, [r4, #4]
 801a13a:	2700      	movs	r7, #0
 801a13c:	6963      	ldr	r3, [r4, #20]
 801a13e:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
 801a142:	689b      	ldr	r3, [r3, #8]
 801a144:	4798      	blx	r3
 801a146:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801a14a:	4630      	mov	r0, r6
 801a14c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a150:	4798      	blx	r3
 801a152:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801a156:	9000      	str	r0, [sp, #0]
 801a158:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 801a15c:	6922      	ldr	r2, [r4, #16]
 801a15e:	ab02      	add	r3, sp, #8
 801a160:	6f21      	ldr	r1, [r4, #112]	; 0x70
 801a162:	f7f9 fb27 	bl	80137b4 <uxr_prepare_output_stream>
 801a166:	e9c5 0700 	strd	r0, r7, [r5]
 801a16a:	b198      	cbz	r0, 801a194 <rmw_send_request+0x78>
 801a16c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801a170:	a902      	add	r1, sp, #8
 801a172:	4630      	mov	r0, r6
 801a174:	4798      	blx	r3
 801a176:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 801a17a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801a17e:	2b01      	cmp	r3, #1
 801a180:	d00c      	beq.n	801a19c <rmw_send_request+0x80>
 801a182:	6f61      	ldr	r1, [r4, #116]	; 0x74
 801a184:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a188:	f7f8 fd16 	bl	8012bb8 <uxr_run_session_until_confirm_delivery>
 801a18c:	4638      	mov	r0, r7
 801a18e:	b00b      	add	sp, #44	; 0x2c
 801a190:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a194:	2001      	movs	r0, #1
 801a196:	b00b      	add	sp, #44	; 0x2c
 801a198:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a19c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a1a0:	f7f8 f950 	bl	8012444 <uxr_flash_output_streams>
 801a1a4:	4638      	mov	r0, r7
 801a1a6:	b00b      	add	sp, #44	; 0x2c
 801a1a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a1ac:	200c      	movs	r0, #12
 801a1ae:	b00b      	add	sp, #44	; 0x2c
 801a1b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a1b4:	08021440 	.word	0x08021440

0801a1b8 <rmw_take_request>:
 801a1b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a1bc:	4605      	mov	r5, r0
 801a1be:	6800      	ldr	r0, [r0, #0]
 801a1c0:	b089      	sub	sp, #36	; 0x24
 801a1c2:	460c      	mov	r4, r1
 801a1c4:	4690      	mov	r8, r2
 801a1c6:	461e      	mov	r6, r3
 801a1c8:	b128      	cbz	r0, 801a1d6 <rmw_take_request+0x1e>
 801a1ca:	4b28      	ldr	r3, [pc, #160]	; (801a26c <rmw_take_request+0xb4>)
 801a1cc:	6819      	ldr	r1, [r3, #0]
 801a1ce:	f7e6 f837 	bl	8000240 <strcmp>
 801a1d2:	2800      	cmp	r0, #0
 801a1d4:	d146      	bne.n	801a264 <rmw_take_request+0xac>
 801a1d6:	b10e      	cbz	r6, 801a1dc <rmw_take_request+0x24>
 801a1d8:	2300      	movs	r3, #0
 801a1da:	7033      	strb	r3, [r6, #0]
 801a1dc:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801a1e0:	f7f5 fa76 	bl	800f6d0 <rmw_uxrce_clean_expired_static_input_buffer>
 801a1e4:	4648      	mov	r0, r9
 801a1e6:	f7f5 fa49 	bl	800f67c <rmw_uxrce_find_static_input_buffer_by_owner>
 801a1ea:	4607      	mov	r7, r0
 801a1ec:	b3b0      	cbz	r0, 801a25c <rmw_take_request+0xa4>
 801a1ee:	6885      	ldr	r5, [r0, #8]
 801a1f0:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 801a1f4:	f8d5 383c 	ldr.w	r3, [r5, #2108]	; 0x83c
 801a1f8:	e9c4 3208 	strd	r3, r2, [r4, #32]
 801a1fc:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 801a200:	7423      	strb	r3, [r4, #16]
 801a202:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	; 0x834
 801a206:	f895 3836 	ldrb.w	r3, [r5, #2102]	; 0x836
 801a20a:	f8a4 2011 	strh.w	r2, [r4, #17]
 801a20e:	74e3      	strb	r3, [r4, #19]
 801a210:	f8d5 1828 	ldr.w	r1, [r5, #2088]	; 0x828
 801a214:	f8d5 282c 	ldr.w	r2, [r5, #2092]	; 0x82c
 801a218:	f8d5 3830 	ldr.w	r3, [r5, #2096]	; 0x830
 801a21c:	6161      	str	r1, [r4, #20]
 801a21e:	61a2      	str	r2, [r4, #24]
 801a220:	61e3      	str	r3, [r4, #28]
 801a222:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801a226:	689b      	ldr	r3, [r3, #8]
 801a228:	4798      	blx	r3
 801a22a:	6844      	ldr	r4, [r0, #4]
 801a22c:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 801a230:	f105 0110 	add.w	r1, r5, #16
 801a234:	4668      	mov	r0, sp
 801a236:	f7f7 fd05 	bl	8011c44 <ucdr_init_buffer>
 801a23a:	4641      	mov	r1, r8
 801a23c:	68e3      	ldr	r3, [r4, #12]
 801a23e:	4668      	mov	r0, sp
 801a240:	4798      	blx	r3
 801a242:	4639      	mov	r1, r7
 801a244:	4604      	mov	r4, r0
 801a246:	480a      	ldr	r0, [pc, #40]	; (801a270 <rmw_take_request+0xb8>)
 801a248:	f7ff fb2c 	bl	80198a4 <put_memory>
 801a24c:	b106      	cbz	r6, 801a250 <rmw_take_request+0x98>
 801a24e:	7034      	strb	r4, [r6, #0]
 801a250:	f084 0001 	eor.w	r0, r4, #1
 801a254:	b2c0      	uxtb	r0, r0
 801a256:	b009      	add	sp, #36	; 0x24
 801a258:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a25c:	2001      	movs	r0, #1
 801a25e:	b009      	add	sp, #36	; 0x24
 801a260:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a264:	200c      	movs	r0, #12
 801a266:	b009      	add	sp, #36	; 0x24
 801a268:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a26c:	08021440 	.word	0x08021440
 801a270:	2001153c 	.word	0x2001153c

0801a274 <rmw_send_response>:
 801a274:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a276:	4605      	mov	r5, r0
 801a278:	6800      	ldr	r0, [r0, #0]
 801a27a:	b091      	sub	sp, #68	; 0x44
 801a27c:	460c      	mov	r4, r1
 801a27e:	4616      	mov	r6, r2
 801a280:	b128      	cbz	r0, 801a28e <rmw_send_response+0x1a>
 801a282:	4b29      	ldr	r3, [pc, #164]	; (801a328 <rmw_send_response+0xb4>)
 801a284:	6819      	ldr	r1, [r3, #0]
 801a286:	f7e5 ffdb 	bl	8000240 <strcmp>
 801a28a:	2800      	cmp	r0, #0
 801a28c:	d141      	bne.n	801a312 <rmw_send_response+0x9e>
 801a28e:	686d      	ldr	r5, [r5, #4]
 801a290:	68a1      	ldr	r1, [r4, #8]
 801a292:	6860      	ldr	r0, [r4, #4]
 801a294:	6faf      	ldr	r7, [r5, #120]	; 0x78
 801a296:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 801a29a:	9307      	str	r3, [sp, #28]
 801a29c:	4623      	mov	r3, r4
 801a29e:	9206      	str	r2, [sp, #24]
 801a2a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a2a4:	789b      	ldrb	r3, [r3, #2]
 801a2a6:	f88d 2017 	strb.w	r2, [sp, #23]
 801a2aa:	f88d 3016 	strb.w	r3, [sp, #22]
 801a2ae:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801a2b2:	68e2      	ldr	r2, [r4, #12]
 801a2b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a2b8:	ab02      	add	r3, sp, #8
 801a2ba:	696c      	ldr	r4, [r5, #20]
 801a2bc:	c307      	stmia	r3!, {r0, r1, r2}
 801a2be:	68e3      	ldr	r3, [r4, #12]
 801a2c0:	4798      	blx	r3
 801a2c2:	6844      	ldr	r4, [r0, #4]
 801a2c4:	4630      	mov	r0, r6
 801a2c6:	6923      	ldr	r3, [r4, #16]
 801a2c8:	4798      	blx	r3
 801a2ca:	f100 0318 	add.w	r3, r0, #24
 801a2ce:	6938      	ldr	r0, [r7, #16]
 801a2d0:	9300      	str	r3, [sp, #0]
 801a2d2:	ab08      	add	r3, sp, #32
 801a2d4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a2d8:	692a      	ldr	r2, [r5, #16]
 801a2da:	6f29      	ldr	r1, [r5, #112]	; 0x70
 801a2dc:	f7f9 fa6a 	bl	80137b4 <uxr_prepare_output_stream>
 801a2e0:	b910      	cbnz	r0, 801a2e8 <rmw_send_response+0x74>
 801a2e2:	2001      	movs	r0, #1
 801a2e4:	b011      	add	sp, #68	; 0x44
 801a2e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a2e8:	a902      	add	r1, sp, #8
 801a2ea:	a808      	add	r0, sp, #32
 801a2ec:	f7fa fbce 	bl	8014a8c <uxr_serialize_SampleIdentity>
 801a2f0:	68a3      	ldr	r3, [r4, #8]
 801a2f2:	a908      	add	r1, sp, #32
 801a2f4:	4630      	mov	r0, r6
 801a2f6:	4798      	blx	r3
 801a2f8:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 801a2fc:	6938      	ldr	r0, [r7, #16]
 801a2fe:	2b01      	cmp	r3, #1
 801a300:	d00a      	beq.n	801a318 <rmw_send_response+0xa4>
 801a302:	6f69      	ldr	r1, [r5, #116]	; 0x74
 801a304:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a308:	f7f8 fc56 	bl	8012bb8 <uxr_run_session_until_confirm_delivery>
 801a30c:	2000      	movs	r0, #0
 801a30e:	b011      	add	sp, #68	; 0x44
 801a310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a312:	200c      	movs	r0, #12
 801a314:	b011      	add	sp, #68	; 0x44
 801a316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a318:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a31c:	f7f8 f892 	bl	8012444 <uxr_flash_output_streams>
 801a320:	2000      	movs	r0, #0
 801a322:	b011      	add	sp, #68	; 0x44
 801a324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a326:	bf00      	nop
 801a328:	08021440 	.word	0x08021440

0801a32c <rmw_take_response>:
 801a32c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a330:	4604      	mov	r4, r0
 801a332:	6800      	ldr	r0, [r0, #0]
 801a334:	b088      	sub	sp, #32
 801a336:	460f      	mov	r7, r1
 801a338:	4690      	mov	r8, r2
 801a33a:	461d      	mov	r5, r3
 801a33c:	b120      	cbz	r0, 801a348 <rmw_take_response+0x1c>
 801a33e:	4b1d      	ldr	r3, [pc, #116]	; (801a3b4 <rmw_take_response+0x88>)
 801a340:	6819      	ldr	r1, [r3, #0]
 801a342:	f7e5 ff7d 	bl	8000240 <strcmp>
 801a346:	bb68      	cbnz	r0, 801a3a4 <rmw_take_response+0x78>
 801a348:	b10d      	cbz	r5, 801a34e <rmw_take_response+0x22>
 801a34a:	2300      	movs	r3, #0
 801a34c:	702b      	strb	r3, [r5, #0]
 801a34e:	6864      	ldr	r4, [r4, #4]
 801a350:	f7f5 f9be 	bl	800f6d0 <rmw_uxrce_clean_expired_static_input_buffer>
 801a354:	4620      	mov	r0, r4
 801a356:	f7f5 f991 	bl	800f67c <rmw_uxrce_find_static_input_buffer_by_owner>
 801a35a:	4606      	mov	r6, r0
 801a35c:	b330      	cbz	r0, 801a3ac <rmw_take_response+0x80>
 801a35e:	6963      	ldr	r3, [r4, #20]
 801a360:	6884      	ldr	r4, [r0, #8]
 801a362:	68db      	ldr	r3, [r3, #12]
 801a364:	f504 6203 	add.w	r2, r4, #2096	; 0x830
 801a368:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 801a36c:	e9c7 0108 	strd	r0, r1, [r7, #32]
 801a370:	4798      	blx	r3
 801a372:	6847      	ldr	r7, [r0, #4]
 801a374:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 801a378:	f104 0110 	add.w	r1, r4, #16
 801a37c:	4668      	mov	r0, sp
 801a37e:	f7f7 fc61 	bl	8011c44 <ucdr_init_buffer>
 801a382:	4641      	mov	r1, r8
 801a384:	68fb      	ldr	r3, [r7, #12]
 801a386:	4668      	mov	r0, sp
 801a388:	4798      	blx	r3
 801a38a:	4631      	mov	r1, r6
 801a38c:	4604      	mov	r4, r0
 801a38e:	480a      	ldr	r0, [pc, #40]	; (801a3b8 <rmw_take_response+0x8c>)
 801a390:	f7ff fa88 	bl	80198a4 <put_memory>
 801a394:	b105      	cbz	r5, 801a398 <rmw_take_response+0x6c>
 801a396:	702c      	strb	r4, [r5, #0]
 801a398:	f084 0001 	eor.w	r0, r4, #1
 801a39c:	b2c0      	uxtb	r0, r0
 801a39e:	b008      	add	sp, #32
 801a3a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a3a4:	200c      	movs	r0, #12
 801a3a6:	b008      	add	sp, #32
 801a3a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a3ac:	2001      	movs	r0, #1
 801a3ae:	b008      	add	sp, #32
 801a3b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a3b4:	08021440 	.word	0x08021440
 801a3b8:	2001153c 	.word	0x2001153c

0801a3bc <rmw_create_service>:
 801a3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3c0:	b091      	sub	sp, #68	; 0x44
 801a3c2:	2900      	cmp	r1, #0
 801a3c4:	f000 80bb 	beq.w	801a53e <rmw_create_service+0x182>
 801a3c8:	4606      	mov	r6, r0
 801a3ca:	2800      	cmp	r0, #0
 801a3cc:	f000 80b7 	beq.w	801a53e <rmw_create_service+0x182>
 801a3d0:	4614      	mov	r4, r2
 801a3d2:	6800      	ldr	r0, [r0, #0]
 801a3d4:	4689      	mov	r9, r1
 801a3d6:	461d      	mov	r5, r3
 801a3d8:	f7f5 fb0a 	bl	800f9f0 <is_uxrce_rmw_identifier_valid>
 801a3dc:	2c00      	cmp	r4, #0
 801a3de:	f000 80ae 	beq.w	801a53e <rmw_create_service+0x182>
 801a3e2:	f080 0001 	eor.w	r0, r0, #1
 801a3e6:	b2c0      	uxtb	r0, r0
 801a3e8:	2800      	cmp	r0, #0
 801a3ea:	f040 80a8 	bne.w	801a53e <rmw_create_service+0x182>
 801a3ee:	7823      	ldrb	r3, [r4, #0]
 801a3f0:	2b00      	cmp	r3, #0
 801a3f2:	f000 80a4 	beq.w	801a53e <rmw_create_service+0x182>
 801a3f6:	2d00      	cmp	r5, #0
 801a3f8:	f000 80a1 	beq.w	801a53e <rmw_create_service+0x182>
 801a3fc:	4856      	ldr	r0, [pc, #344]	; (801a558 <rmw_create_service+0x19c>)
 801a3fe:	f8d6 8004 	ldr.w	r8, [r6, #4]
 801a402:	f7ff fa3f 	bl	8019884 <get_memory>
 801a406:	4606      	mov	r6, r0
 801a408:	2800      	cmp	r0, #0
 801a40a:	f000 8099 	beq.w	801a540 <rmw_create_service+0x184>
 801a40e:	6887      	ldr	r7, [r0, #8]
 801a410:	f107 0a88 	add.w	sl, r7, #136	; 0x88
 801a414:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 801a418:	f7ff faba 	bl	8019990 <rmw_get_implementation_identifier>
 801a41c:	67f8      	str	r0, [r7, #124]	; 0x7c
 801a41e:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 801a422:	4620      	mov	r0, r4
 801a424:	f7e5 ff6c 	bl	8000300 <strlen>
 801a428:	1c42      	adds	r2, r0, #1
 801a42a:	f107 067c 	add.w	r6, r7, #124	; 0x7c
 801a42e:	2a3c      	cmp	r2, #60	; 0x3c
 801a430:	f200 808a 	bhi.w	801a548 <rmw_create_service+0x18c>
 801a434:	4621      	mov	r1, r4
 801a436:	4650      	mov	r0, sl
 801a438:	f004 fb59 	bl	801eaee <memcpy>
 801a43c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801a440:	4629      	mov	r1, r5
 801a442:	2250      	movs	r2, #80	; 0x50
 801a444:	f107 0020 	add.w	r0, r7, #32
 801a448:	f8c7 8078 	str.w	r8, [r7, #120]	; 0x78
 801a44c:	677b      	str	r3, [r7, #116]	; 0x74
 801a44e:	f004 fb4e 	bl	801eaee <memcpy>
 801a452:	4648      	mov	r0, r9
 801a454:	4941      	ldr	r1, [pc, #260]	; (801a55c <rmw_create_service+0x1a0>)
 801a456:	f7f5 fae5 	bl	800fa24 <get_service_typesupport_handle>
 801a45a:	2800      	cmp	r0, #0
 801a45c:	d074      	beq.n	801a548 <rmw_create_service+0x18c>
 801a45e:	6843      	ldr	r3, [r0, #4]
 801a460:	617b      	str	r3, [r7, #20]
 801a462:	2b00      	cmp	r3, #0
 801a464:	d070      	beq.n	801a548 <rmw_create_service+0x18c>
 801a466:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801a46a:	2108      	movs	r1, #8
 801a46c:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 801a564 <rmw_create_service+0x1a8>
 801a470:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a474:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 801a568 <rmw_create_service+0x1ac>
 801a478:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	; 0x5a2
 801a47c:	1c42      	adds	r2, r0, #1
 801a47e:	f8a3 25a2 	strh.w	r2, [r3, #1442]	; 0x5a2
 801a482:	f7f7 fe8f 	bl	80121a4 <uxr_object_id>
 801a486:	2364      	movs	r3, #100	; 0x64
 801a488:	6138      	str	r0, [r7, #16]
 801a48a:	4652      	mov	r2, sl
 801a48c:	4649      	mov	r1, r9
 801a48e:	6978      	ldr	r0, [r7, #20]
 801a490:	f7f5 fa02 	bl	800f898 <generate_service_types>
 801a494:	2800      	cmp	r0, #0
 801a496:	d057      	beq.n	801a548 <rmw_create_service+0x18c>
 801a498:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 801a56c <rmw_create_service+0x1b0>
 801a49c:	233c      	movs	r3, #60	; 0x3c
 801a49e:	4a30      	ldr	r2, [pc, #192]	; (801a560 <rmw_create_service+0x1a4>)
 801a4a0:	4620      	mov	r0, r4
 801a4a2:	4659      	mov	r1, fp
 801a4a4:	f7f5 f9c6 	bl	800f834 <generate_service_topics>
 801a4a8:	2800      	cmp	r0, #0
 801a4aa:	d04d      	beq.n	801a548 <rmw_create_service+0x18c>
 801a4ac:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801a4b0:	a80c      	add	r0, sp, #48	; 0x30
 801a4b2:	4629      	mov	r1, r5
 801a4b4:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 801a4b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a4bc:	f7f5 f9a2 	bl	800f804 <convert_qos_profile>
 801a4c0:	4a27      	ldr	r2, [pc, #156]	; (801a560 <rmw_create_service+0x1a4>)
 801a4c2:	a80c      	add	r0, sp, #48	; 0x30
 801a4c4:	9400      	str	r4, [sp, #0]
 801a4c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a4c8:	e9cd b203 	strd	fp, r2, [sp, #12]
 801a4cc:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 801a4d0:	c803      	ldmia	r0, {r0, r1}
 801a4d2:	9a08      	ldr	r2, [sp, #32]
 801a4d4:	9005      	str	r0, [sp, #20]
 801a4d6:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 801a4da:	2306      	movs	r3, #6
 801a4dc:	f8ad 1018 	strh.w	r1, [sp, #24]
 801a4e0:	9307      	str	r3, [sp, #28]
 801a4e2:	6811      	ldr	r1, [r2, #0]
 801a4e4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801a4e8:	693a      	ldr	r2, [r7, #16]
 801a4ea:	f7f7 fe21 	bl	8012130 <uxr_buffer_create_replier_bin>
 801a4ee:	4602      	mov	r2, r0
 801a4f0:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801a4f4:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801a4f8:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801a4fc:	f7f5 f966 	bl	800f7cc <run_xrce_session>
 801a500:	b310      	cbz	r0, 801a548 <rmw_create_service+0x18c>
 801a502:	7a2b      	ldrb	r3, [r5, #8]
 801a504:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a508:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801a50c:	2b02      	cmp	r3, #2
 801a50e:	920e      	str	r2, [sp, #56]	; 0x38
 801a510:	f04f 0200 	mov.w	r2, #0
 801a514:	920f      	str	r2, [sp, #60]	; 0x3c
 801a516:	bf0c      	ite	eq
 801a518:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	; 0x37c
 801a51c:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	; 0x374
 801a520:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a524:	930b      	str	r3, [sp, #44]	; 0x2c
 801a526:	ab0e      	add	r3, sp, #56	; 0x38
 801a528:	673a      	str	r2, [r7, #112]	; 0x70
 801a52a:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4
 801a52e:	9300      	str	r3, [sp, #0]
 801a530:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a532:	6811      	ldr	r1, [r2, #0]
 801a534:	693a      	ldr	r2, [r7, #16]
 801a536:	f001 faff 	bl	801bb38 <uxr_buffer_request_data>
 801a53a:	8338      	strh	r0, [r7, #24]
 801a53c:	e000      	b.n	801a540 <rmw_create_service+0x184>
 801a53e:	2600      	movs	r6, #0
 801a540:	4630      	mov	r0, r6
 801a542:	b011      	add	sp, #68	; 0x44
 801a544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a548:	4630      	mov	r0, r6
 801a54a:	2600      	movs	r6, #0
 801a54c:	f7f5 f804 	bl	800f558 <rmw_uxrce_fini_service_memory>
 801a550:	4630      	mov	r0, r6
 801a552:	b011      	add	sp, #68	; 0x44
 801a554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a558:	2001151c 	.word	0x2001151c
 801a55c:	0801fa8c 	.word	0x0801fa8c
 801a560:	20011c50 	.word	0x20011c50
 801a564:	20011c8c 	.word	0x20011c8c
 801a568:	20011bec 	.word	0x20011bec
 801a56c:	20011bb0 	.word	0x20011bb0

0801a570 <rmw_destroy_service>:
 801a570:	b570      	push	{r4, r5, r6, lr}
 801a572:	b128      	cbz	r0, 801a580 <rmw_destroy_service+0x10>
 801a574:	4604      	mov	r4, r0
 801a576:	6800      	ldr	r0, [r0, #0]
 801a578:	460d      	mov	r5, r1
 801a57a:	f7f5 fa39 	bl	800f9f0 <is_uxrce_rmw_identifier_valid>
 801a57e:	b910      	cbnz	r0, 801a586 <rmw_destroy_service+0x16>
 801a580:	2401      	movs	r4, #1
 801a582:	4620      	mov	r0, r4
 801a584:	bd70      	pop	{r4, r5, r6, pc}
 801a586:	6863      	ldr	r3, [r4, #4]
 801a588:	2b00      	cmp	r3, #0
 801a58a:	d0f9      	beq.n	801a580 <rmw_destroy_service+0x10>
 801a58c:	2d00      	cmp	r5, #0
 801a58e:	d0f7      	beq.n	801a580 <rmw_destroy_service+0x10>
 801a590:	6828      	ldr	r0, [r5, #0]
 801a592:	f7f5 fa2d 	bl	800f9f0 <is_uxrce_rmw_identifier_valid>
 801a596:	2800      	cmp	r0, #0
 801a598:	d0f2      	beq.n	801a580 <rmw_destroy_service+0x10>
 801a59a:	686e      	ldr	r6, [r5, #4]
 801a59c:	2e00      	cmp	r6, #0
 801a59e:	d0ef      	beq.n	801a580 <rmw_destroy_service+0x10>
 801a5a0:	6864      	ldr	r4, [r4, #4]
 801a5a2:	6932      	ldr	r2, [r6, #16]
 801a5a4:	6920      	ldr	r0, [r4, #16]
 801a5a6:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801a5aa:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a5ae:	6819      	ldr	r1, [r3, #0]
 801a5b0:	f001 fafc 	bl	801bbac <uxr_buffer_cancel_data>
 801a5b4:	4602      	mov	r2, r0
 801a5b6:	6920      	ldr	r0, [r4, #16]
 801a5b8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801a5bc:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801a5c0:	f7f5 f904 	bl	800f7cc <run_xrce_session>
 801a5c4:	6920      	ldr	r0, [r4, #16]
 801a5c6:	6932      	ldr	r2, [r6, #16]
 801a5c8:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801a5cc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a5d0:	6819      	ldr	r1, [r3, #0]
 801a5d2:	f7f7 fbab 	bl	8011d2c <uxr_buffer_delete_entity>
 801a5d6:	4602      	mov	r2, r0
 801a5d8:	6920      	ldr	r0, [r4, #16]
 801a5da:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801a5de:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801a5e2:	f7f5 f8f3 	bl	800f7cc <run_xrce_session>
 801a5e6:	4603      	mov	r3, r0
 801a5e8:	4628      	mov	r0, r5
 801a5ea:	2b00      	cmp	r3, #0
 801a5ec:	bf14      	ite	ne
 801a5ee:	2400      	movne	r4, #0
 801a5f0:	2402      	moveq	r4, #2
 801a5f2:	f7f4 ffb1 	bl	800f558 <rmw_uxrce_fini_service_memory>
 801a5f6:	e7c4      	b.n	801a582 <rmw_destroy_service+0x12>

0801a5f8 <rmw_service_response_publisher_get_actual_qos>:
 801a5f8:	b181      	cbz	r1, 801a61c <rmw_service_response_publisher_get_actual_qos+0x24>
 801a5fa:	4603      	mov	r3, r0
 801a5fc:	b510      	push	{r4, lr}
 801a5fe:	fab0 f480 	clz	r4, r0
 801a602:	0964      	lsrs	r4, r4, #5
 801a604:	b140      	cbz	r0, 801a618 <rmw_service_response_publisher_get_actual_qos+0x20>
 801a606:	685b      	ldr	r3, [r3, #4]
 801a608:	4608      	mov	r0, r1
 801a60a:	2250      	movs	r2, #80	; 0x50
 801a60c:	f103 0120 	add.w	r1, r3, #32
 801a610:	f004 fa6d 	bl	801eaee <memcpy>
 801a614:	4620      	mov	r0, r4
 801a616:	bd10      	pop	{r4, pc}
 801a618:	200b      	movs	r0, #11
 801a61a:	bd10      	pop	{r4, pc}
 801a61c:	200b      	movs	r0, #11
 801a61e:	4770      	bx	lr

0801a620 <rmw_service_request_subscription_get_actual_qos>:
 801a620:	b178      	cbz	r0, 801a642 <rmw_service_request_subscription_get_actual_qos+0x22>
 801a622:	b510      	push	{r4, lr}
 801a624:	fab1 f481 	clz	r4, r1
 801a628:	0964      	lsrs	r4, r4, #5
 801a62a:	b141      	cbz	r1, 801a63e <rmw_service_request_subscription_get_actual_qos+0x1e>
 801a62c:	6843      	ldr	r3, [r0, #4]
 801a62e:	2250      	movs	r2, #80	; 0x50
 801a630:	4608      	mov	r0, r1
 801a632:	f103 0120 	add.w	r1, r3, #32
 801a636:	f004 fa5a 	bl	801eaee <memcpy>
 801a63a:	4620      	mov	r0, r4
 801a63c:	bd10      	pop	{r4, pc}
 801a63e:	200b      	movs	r0, #11
 801a640:	bd10      	pop	{r4, pc}
 801a642:	200b      	movs	r0, #11
 801a644:	4770      	bx	lr
 801a646:	bf00      	nop

0801a648 <rmw_create_subscription>:
 801a648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a64c:	b08d      	sub	sp, #52	; 0x34
 801a64e:	2900      	cmp	r1, #0
 801a650:	f000 80d8 	beq.w	801a804 <rmw_create_subscription+0x1bc>
 801a654:	4604      	mov	r4, r0
 801a656:	2800      	cmp	r0, #0
 801a658:	f000 80d4 	beq.w	801a804 <rmw_create_subscription+0x1bc>
 801a65c:	6800      	ldr	r0, [r0, #0]
 801a65e:	460e      	mov	r6, r1
 801a660:	4615      	mov	r5, r2
 801a662:	461f      	mov	r7, r3
 801a664:	f7f5 f9c4 	bl	800f9f0 <is_uxrce_rmw_identifier_valid>
 801a668:	f080 0001 	eor.w	r0, r0, #1
 801a66c:	b2c0      	uxtb	r0, r0
 801a66e:	2800      	cmp	r0, #0
 801a670:	f040 80c8 	bne.w	801a804 <rmw_create_subscription+0x1bc>
 801a674:	2d00      	cmp	r5, #0
 801a676:	f000 80c5 	beq.w	801a804 <rmw_create_subscription+0x1bc>
 801a67a:	782b      	ldrb	r3, [r5, #0]
 801a67c:	2b00      	cmp	r3, #0
 801a67e:	f000 80c1 	beq.w	801a804 <rmw_create_subscription+0x1bc>
 801a682:	2f00      	cmp	r7, #0
 801a684:	f000 80be 	beq.w	801a804 <rmw_create_subscription+0x1bc>
 801a688:	4867      	ldr	r0, [pc, #412]	; (801a828 <rmw_create_subscription+0x1e0>)
 801a68a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801a68e:	f7ff f8f9 	bl	8019884 <get_memory>
 801a692:	4604      	mov	r4, r0
 801a694:	2800      	cmp	r0, #0
 801a696:	f000 80b6 	beq.w	801a806 <rmw_create_subscription+0x1be>
 801a69a:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801a69e:	f108 0a98 	add.w	sl, r8, #152	; 0x98
 801a6a2:	f8c8 8080 	str.w	r8, [r8, #128]	; 0x80
 801a6a6:	f7ff f973 	bl	8019990 <rmw_get_implementation_identifier>
 801a6aa:	f8c8 007c 	str.w	r0, [r8, #124]	; 0x7c
 801a6ae:	f8c8 a084 	str.w	sl, [r8, #132]	; 0x84
 801a6b2:	4628      	mov	r0, r5
 801a6b4:	f7e5 fe24 	bl	8000300 <strlen>
 801a6b8:	3001      	adds	r0, #1
 801a6ba:	f108 047c 	add.w	r4, r8, #124	; 0x7c
 801a6be:	283c      	cmp	r0, #60	; 0x3c
 801a6c0:	f200 80a5 	bhi.w	801a80e <rmw_create_subscription+0x1c6>
 801a6c4:	462b      	mov	r3, r5
 801a6c6:	4a59      	ldr	r2, [pc, #356]	; (801a82c <rmw_create_subscription+0x1e4>)
 801a6c8:	213c      	movs	r1, #60	; 0x3c
 801a6ca:	4650      	mov	r0, sl
 801a6cc:	f004 f804 	bl	801e6d8 <sniprintf>
 801a6d0:	4639      	mov	r1, r7
 801a6d2:	2250      	movs	r2, #80	; 0x50
 801a6d4:	f108 0028 	add.w	r0, r8, #40	; 0x28
 801a6d8:	f8c8 9020 	str.w	r9, [r8, #32]
 801a6dc:	f004 fa07 	bl	801eaee <memcpy>
 801a6e0:	4630      	mov	r0, r6
 801a6e2:	4953      	ldr	r1, [pc, #332]	; (801a830 <rmw_create_subscription+0x1e8>)
 801a6e4:	f7f5 f992 	bl	800fa0c <get_message_typesupport_handle>
 801a6e8:	2800      	cmp	r0, #0
 801a6ea:	f000 8090 	beq.w	801a80e <rmw_create_subscription+0x1c6>
 801a6ee:	6842      	ldr	r2, [r0, #4]
 801a6f0:	f8c8 2018 	str.w	r2, [r8, #24]
 801a6f4:	2a00      	cmp	r2, #0
 801a6f6:	f000 808a 	beq.w	801a80e <rmw_create_subscription+0x1c6>
 801a6fa:	4629      	mov	r1, r5
 801a6fc:	463b      	mov	r3, r7
 801a6fe:	4648      	mov	r0, r9
 801a700:	f7ff fb84 	bl	8019e0c <create_topic>
 801a704:	f8c8 001c 	str.w	r0, [r8, #28]
 801a708:	2800      	cmp	r0, #0
 801a70a:	f000 8085 	beq.w	801a818 <rmw_create_subscription+0x1d0>
 801a70e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a712:	2104      	movs	r1, #4
 801a714:	2506      	movs	r5, #6
 801a716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a71a:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	; 0x59c
 801a71e:	1c42      	adds	r2, r0, #1
 801a720:	f8a3 259c 	strh.w	r2, [r3, #1436]	; 0x59c
 801a724:	f7f7 fd3e 	bl	80121a4 <uxr_object_id>
 801a728:	f8c8 0010 	str.w	r0, [r8, #16]
 801a72c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801a730:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 801a734:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a738:	9500      	str	r5, [sp, #0]
 801a73a:	6819      	ldr	r1, [r3, #0]
 801a73c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801a740:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801a744:	f7f7 fbd6 	bl	8011ef4 <uxr_buffer_create_subscriber_bin>
 801a748:	4602      	mov	r2, r0
 801a74a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801a74e:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801a752:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801a756:	f7f5 f839 	bl	800f7cc <run_xrce_session>
 801a75a:	2800      	cmp	r0, #0
 801a75c:	d057      	beq.n	801a80e <rmw_create_subscription+0x1c6>
 801a75e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a762:	4629      	mov	r1, r5
 801a764:	ae08      	add	r6, sp, #32
 801a766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a76a:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	; 0x59e
 801a76e:	1c42      	adds	r2, r0, #1
 801a770:	f8a3 259e 	strh.w	r2, [r3, #1438]	; 0x59e
 801a774:	f7f7 fd16 	bl	80121a4 <uxr_object_id>
 801a778:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801a77c:	f8d8 301c 	ldr.w	r3, [r8, #28]
 801a780:	4639      	mov	r1, r7
 801a782:	f8c8 0014 	str.w	r0, [r8, #20]
 801a786:	4630      	mov	r0, r6
 801a788:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 801a78c:	9305      	str	r3, [sp, #20]
 801a78e:	f7f5 f839 	bl	800f804 <convert_qos_profile>
 801a792:	9503      	str	r5, [sp, #12]
 801a794:	9b05      	ldr	r3, [sp, #20]
 801a796:	e896 0003 	ldmia.w	r6, {r0, r1}
 801a79a:	9001      	str	r0, [sp, #4]
 801a79c:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 801a7a0:	f8ad 1008 	strh.w	r1, [sp, #8]
 801a7a4:	691b      	ldr	r3, [r3, #16]
 801a7a6:	9300      	str	r3, [sp, #0]
 801a7a8:	f8db 1000 	ldr.w	r1, [fp]
 801a7ac:	e9d8 3204 	ldrd	r3, r2, [r8, #16]
 801a7b0:	f7f7 fc46 	bl	8012040 <uxr_buffer_create_datareader_bin>
 801a7b4:	4602      	mov	r2, r0
 801a7b6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801a7ba:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801a7be:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801a7c2:	f7f5 f803 	bl	800f7cc <run_xrce_session>
 801a7c6:	b310      	cbz	r0, 801a80e <rmw_create_subscription+0x1c6>
 801a7c8:	7a3b      	ldrb	r3, [r7, #8]
 801a7ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a7ce:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801a7d2:	2b02      	cmp	r3, #2
 801a7d4:	920a      	str	r2, [sp, #40]	; 0x28
 801a7d6:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801a7da:	f04f 0200 	mov.w	r2, #0
 801a7de:	bf08      	it	eq
 801a7e0:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 801a7e4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a7e8:	bf18      	it	ne
 801a7ea:	f8d0 30d4 	ldrne.w	r3, [r0, #212]	; 0xd4
 801a7ee:	920b      	str	r2, [sp, #44]	; 0x2c
 801a7f0:	9307      	str	r3, [sp, #28]
 801a7f2:	ab0a      	add	r3, sp, #40	; 0x28
 801a7f4:	9300      	str	r3, [sp, #0]
 801a7f6:	9b07      	ldr	r3, [sp, #28]
 801a7f8:	f8d8 2014 	ldr.w	r2, [r8, #20]
 801a7fc:	6809      	ldr	r1, [r1, #0]
 801a7fe:	f001 f99b 	bl	801bb38 <uxr_buffer_request_data>
 801a802:	e000      	b.n	801a806 <rmw_create_subscription+0x1be>
 801a804:	2400      	movs	r4, #0
 801a806:	4620      	mov	r0, r4
 801a808:	b00d      	add	sp, #52	; 0x34
 801a80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a80e:	f8d8 001c 	ldr.w	r0, [r8, #28]
 801a812:	b108      	cbz	r0, 801a818 <rmw_create_subscription+0x1d0>
 801a814:	f7f4 fecc 	bl	800f5b0 <rmw_uxrce_fini_topic_memory>
 801a818:	4620      	mov	r0, r4
 801a81a:	2400      	movs	r4, #0
 801a81c:	f7f4 fe86 	bl	800f52c <rmw_uxrce_fini_subscription_memory>
 801a820:	4620      	mov	r0, r4
 801a822:	b00d      	add	sp, #52	; 0x34
 801a824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a828:	2001154c 	.word	0x2001154c
 801a82c:	080208f4 	.word	0x080208f4
 801a830:	0801fa8c 	.word	0x0801fa8c

0801a834 <rmw_subscription_get_actual_qos>:
 801a834:	b178      	cbz	r0, 801a856 <rmw_subscription_get_actual_qos+0x22>
 801a836:	b510      	push	{r4, lr}
 801a838:	fab1 f481 	clz	r4, r1
 801a83c:	0964      	lsrs	r4, r4, #5
 801a83e:	b141      	cbz	r1, 801a852 <rmw_subscription_get_actual_qos+0x1e>
 801a840:	6843      	ldr	r3, [r0, #4]
 801a842:	2250      	movs	r2, #80	; 0x50
 801a844:	4608      	mov	r0, r1
 801a846:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801a84a:	f004 f950 	bl	801eaee <memcpy>
 801a84e:	4620      	mov	r0, r4
 801a850:	bd10      	pop	{r4, pc}
 801a852:	200b      	movs	r0, #11
 801a854:	bd10      	pop	{r4, pc}
 801a856:	200b      	movs	r0, #11
 801a858:	4770      	bx	lr
 801a85a:	bf00      	nop

0801a85c <rmw_destroy_subscription>:
 801a85c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a860:	b128      	cbz	r0, 801a86e <rmw_destroy_subscription+0x12>
 801a862:	4604      	mov	r4, r0
 801a864:	6800      	ldr	r0, [r0, #0]
 801a866:	460d      	mov	r5, r1
 801a868:	f7f5 f8c2 	bl	800f9f0 <is_uxrce_rmw_identifier_valid>
 801a86c:	b918      	cbnz	r0, 801a876 <rmw_destroy_subscription+0x1a>
 801a86e:	2401      	movs	r4, #1
 801a870:	4620      	mov	r0, r4
 801a872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a876:	6863      	ldr	r3, [r4, #4]
 801a878:	2b00      	cmp	r3, #0
 801a87a:	d0f8      	beq.n	801a86e <rmw_destroy_subscription+0x12>
 801a87c:	fab5 f485 	clz	r4, r5
 801a880:	0964      	lsrs	r4, r4, #5
 801a882:	2d00      	cmp	r5, #0
 801a884:	d0f3      	beq.n	801a86e <rmw_destroy_subscription+0x12>
 801a886:	6828      	ldr	r0, [r5, #0]
 801a888:	f7f5 f8b2 	bl	800f9f0 <is_uxrce_rmw_identifier_valid>
 801a88c:	2800      	cmp	r0, #0
 801a88e:	d0ee      	beq.n	801a86e <rmw_destroy_subscription+0x12>
 801a890:	686e      	ldr	r6, [r5, #4]
 801a892:	2e00      	cmp	r6, #0
 801a894:	d0eb      	beq.n	801a86e <rmw_destroy_subscription+0x12>
 801a896:	6a37      	ldr	r7, [r6, #32]
 801a898:	6972      	ldr	r2, [r6, #20]
 801a89a:	6938      	ldr	r0, [r7, #16]
 801a89c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801a8a0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a8a4:	6819      	ldr	r1, [r3, #0]
 801a8a6:	f001 f981 	bl	801bbac <uxr_buffer_cancel_data>
 801a8aa:	4602      	mov	r2, r0
 801a8ac:	6938      	ldr	r0, [r7, #16]
 801a8ae:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801a8b2:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801a8b6:	f7f4 ff89 	bl	800f7cc <run_xrce_session>
 801a8ba:	69f0      	ldr	r0, [r6, #28]
 801a8bc:	f7ff faf6 	bl	8019eac <destroy_topic>
 801a8c0:	6a33      	ldr	r3, [r6, #32]
 801a8c2:	6972      	ldr	r2, [r6, #20]
 801a8c4:	6918      	ldr	r0, [r3, #16]
 801a8c6:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801a8ca:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a8ce:	6819      	ldr	r1, [r3, #0]
 801a8d0:	f7f7 fa2c 	bl	8011d2c <uxr_buffer_delete_entity>
 801a8d4:	6a33      	ldr	r3, [r6, #32]
 801a8d6:	4680      	mov	r8, r0
 801a8d8:	6932      	ldr	r2, [r6, #16]
 801a8da:	6918      	ldr	r0, [r3, #16]
 801a8dc:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801a8e0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a8e4:	6819      	ldr	r1, [r3, #0]
 801a8e6:	f7f7 fa21 	bl	8011d2c <uxr_buffer_delete_entity>
 801a8ea:	4606      	mov	r6, r0
 801a8ec:	6938      	ldr	r0, [r7, #16]
 801a8ee:	4642      	mov	r2, r8
 801a8f0:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801a8f4:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801a8f8:	f7f4 ff68 	bl	800f7cc <run_xrce_session>
 801a8fc:	693f      	ldr	r7, [r7, #16]
 801a8fe:	4632      	mov	r2, r6
 801a900:	4606      	mov	r6, r0
 801a902:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 801a906:	4638      	mov	r0, r7
 801a908:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 801a90c:	f7f4 ff5e 	bl	800f7cc <run_xrce_session>
 801a910:	b126      	cbz	r6, 801a91c <rmw_destroy_subscription+0xc0>
 801a912:	b118      	cbz	r0, 801a91c <rmw_destroy_subscription+0xc0>
 801a914:	4628      	mov	r0, r5
 801a916:	f7f4 fe09 	bl	800f52c <rmw_uxrce_fini_subscription_memory>
 801a91a:	e7a9      	b.n	801a870 <rmw_destroy_subscription+0x14>
 801a91c:	2402      	movs	r4, #2
 801a91e:	e7f9      	b.n	801a914 <rmw_destroy_subscription+0xb8>

0801a920 <rmw_take_with_info>:
 801a920:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a922:	4604      	mov	r4, r0
 801a924:	6800      	ldr	r0, [r0, #0]
 801a926:	b089      	sub	sp, #36	; 0x24
 801a928:	460f      	mov	r7, r1
 801a92a:	4615      	mov	r5, r2
 801a92c:	b128      	cbz	r0, 801a93a <rmw_take_with_info+0x1a>
 801a92e:	4b24      	ldr	r3, [pc, #144]	; (801a9c0 <rmw_take_with_info+0xa0>)
 801a930:	6819      	ldr	r1, [r3, #0]
 801a932:	f7e5 fc85 	bl	8000240 <strcmp>
 801a936:	2800      	cmp	r0, #0
 801a938:	d13e      	bne.n	801a9b8 <rmw_take_with_info+0x98>
 801a93a:	b305      	cbz	r5, 801a97e <rmw_take_with_info+0x5e>
 801a93c:	2300      	movs	r3, #0
 801a93e:	6864      	ldr	r4, [r4, #4]
 801a940:	702b      	strb	r3, [r5, #0]
 801a942:	f7f4 fec5 	bl	800f6d0 <rmw_uxrce_clean_expired_static_input_buffer>
 801a946:	4620      	mov	r0, r4
 801a948:	f7f4 fe98 	bl	800f67c <rmw_uxrce_find_static_input_buffer_by_owner>
 801a94c:	4606      	mov	r6, r0
 801a94e:	b1f0      	cbz	r0, 801a98e <rmw_take_with_info+0x6e>
 801a950:	6881      	ldr	r1, [r0, #8]
 801a952:	4668      	mov	r0, sp
 801a954:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 801a958:	3110      	adds	r1, #16
 801a95a:	f7f7 f973 	bl	8011c44 <ucdr_init_buffer>
 801a95e:	69a3      	ldr	r3, [r4, #24]
 801a960:	4639      	mov	r1, r7
 801a962:	4668      	mov	r0, sp
 801a964:	68db      	ldr	r3, [r3, #12]
 801a966:	4798      	blx	r3
 801a968:	4604      	mov	r4, r0
 801a96a:	4631      	mov	r1, r6
 801a96c:	4815      	ldr	r0, [pc, #84]	; (801a9c4 <rmw_take_with_info+0xa4>)
 801a96e:	f7fe ff99 	bl	80198a4 <put_memory>
 801a972:	702c      	strb	r4, [r5, #0]
 801a974:	f084 0001 	eor.w	r0, r4, #1
 801a978:	b2c0      	uxtb	r0, r0
 801a97a:	b009      	add	sp, #36	; 0x24
 801a97c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a97e:	6864      	ldr	r4, [r4, #4]
 801a980:	f7f4 fea6 	bl	800f6d0 <rmw_uxrce_clean_expired_static_input_buffer>
 801a984:	4620      	mov	r0, r4
 801a986:	f7f4 fe79 	bl	800f67c <rmw_uxrce_find_static_input_buffer_by_owner>
 801a98a:	4605      	mov	r5, r0
 801a98c:	b910      	cbnz	r0, 801a994 <rmw_take_with_info+0x74>
 801a98e:	2001      	movs	r0, #1
 801a990:	b009      	add	sp, #36	; 0x24
 801a992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a994:	68a9      	ldr	r1, [r5, #8]
 801a996:	4668      	mov	r0, sp
 801a998:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 801a99c:	3110      	adds	r1, #16
 801a99e:	f7f7 f951 	bl	8011c44 <ucdr_init_buffer>
 801a9a2:	69a3      	ldr	r3, [r4, #24]
 801a9a4:	4639      	mov	r1, r7
 801a9a6:	4668      	mov	r0, sp
 801a9a8:	68db      	ldr	r3, [r3, #12]
 801a9aa:	4798      	blx	r3
 801a9ac:	4629      	mov	r1, r5
 801a9ae:	4604      	mov	r4, r0
 801a9b0:	4804      	ldr	r0, [pc, #16]	; (801a9c4 <rmw_take_with_info+0xa4>)
 801a9b2:	f7fe ff77 	bl	80198a4 <put_memory>
 801a9b6:	e7dd      	b.n	801a974 <rmw_take_with_info+0x54>
 801a9b8:	200c      	movs	r0, #12
 801a9ba:	b009      	add	sp, #36	; 0x24
 801a9bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a9be:	bf00      	nop
 801a9c0:	08021440 	.word	0x08021440
 801a9c4:	2001153c 	.word	0x2001153c

0801a9c8 <rmw_uxrce_transport_init>:
 801a9c8:	b508      	push	{r3, lr}
 801a9ca:	b108      	cbz	r0, 801a9d0 <rmw_uxrce_transport_init+0x8>
 801a9cc:	f100 0210 	add.w	r2, r0, #16
 801a9d0:	b139      	cbz	r1, 801a9e2 <rmw_uxrce_transport_init+0x1a>
 801a9d2:	6949      	ldr	r1, [r1, #20]
 801a9d4:	4610      	mov	r0, r2
 801a9d6:	f000 fb2b 	bl	801b030 <uxr_init_custom_transport>
 801a9da:	f080 0001 	eor.w	r0, r0, #1
 801a9de:	b2c0      	uxtb	r0, r0
 801a9e0:	bd08      	pop	{r3, pc}
 801a9e2:	4b04      	ldr	r3, [pc, #16]	; (801a9f4 <rmw_uxrce_transport_init+0x2c>)
 801a9e4:	4610      	mov	r0, r2
 801a9e6:	6859      	ldr	r1, [r3, #4]
 801a9e8:	f000 fb22 	bl	801b030 <uxr_init_custom_transport>
 801a9ec:	f080 0001 	eor.w	r0, r0, #1
 801a9f0:	b2c0      	uxtb	r0, r0
 801a9f2:	bd08      	pop	{r3, pc}
 801a9f4:	2000caa4 	.word	0x2000caa4

0801a9f8 <rmw_wait>:
 801a9f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a9fc:	4698      	mov	r8, r3
 801a9fe:	ea40 0301 	orr.w	r3, r0, r1
 801aa02:	b089      	sub	sp, #36	; 0x24
 801aa04:	ea48 0303 	orr.w	r3, r8, r3
 801aa08:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801aa0a:	4313      	orrs	r3, r2
 801aa0c:	f000 8106 	beq.w	801ac1c <rmw_wait+0x224>
 801aa10:	4605      	mov	r5, r0
 801aa12:	460e      	mov	r6, r1
 801aa14:	4691      	mov	r9, r2
 801aa16:	b16c      	cbz	r4, 801aa34 <rmw_wait+0x3c>
 801aa18:	4ba6      	ldr	r3, [pc, #664]	; (801acb4 <rmw_wait+0x2bc>)
 801aa1a:	af04      	add	r7, sp, #16
 801aa1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801aa1e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801aa22:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801aa26:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801aa2a:	f7fe fd4d 	bl	80194c8 <rmw_time_equal>
 801aa2e:	2800      	cmp	r0, #0
 801aa30:	f000 810b 	beq.w	801ac4a <rmw_wait+0x252>
 801aa34:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801aa38:	f7f4 fe4a 	bl	800f6d0 <rmw_uxrce_clean_expired_static_input_buffer>
 801aa3c:	4b9e      	ldr	r3, [pc, #632]	; (801acb8 <rmw_wait+0x2c0>)
 801aa3e:	681c      	ldr	r4, [r3, #0]
 801aa40:	b14c      	cbz	r4, 801aa56 <rmw_wait+0x5e>
 801aa42:	4623      	mov	r3, r4
 801aa44:	2100      	movs	r1, #0
 801aa46:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801aa4a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801aa4e:	f882 15a4 	strb.w	r1, [r2, #1444]	; 0x5a4
 801aa52:	2b00      	cmp	r3, #0
 801aa54:	d1f7      	bne.n	801aa46 <rmw_wait+0x4e>
 801aa56:	f1b9 0f00 	cmp.w	r9, #0
 801aa5a:	d011      	beq.n	801aa80 <rmw_wait+0x88>
 801aa5c:	f8d9 1000 	ldr.w	r1, [r9]
 801aa60:	b171      	cbz	r1, 801aa80 <rmw_wait+0x88>
 801aa62:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801aa66:	2300      	movs	r3, #0
 801aa68:	2001      	movs	r0, #1
 801aa6a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801aa6e:	3301      	adds	r3, #1
 801aa70:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801aa72:	4299      	cmp	r1, r3
 801aa74:	6912      	ldr	r2, [r2, #16]
 801aa76:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801aa7a:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801aa7e:	d1f4      	bne.n	801aa6a <rmw_wait+0x72>
 801aa80:	f1b8 0f00 	cmp.w	r8, #0
 801aa84:	d011      	beq.n	801aaaa <rmw_wait+0xb2>
 801aa86:	f8d8 1000 	ldr.w	r1, [r8]
 801aa8a:	b171      	cbz	r1, 801aaaa <rmw_wait+0xb2>
 801aa8c:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801aa90:	2300      	movs	r3, #0
 801aa92:	2001      	movs	r0, #1
 801aa94:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801aa98:	3301      	adds	r3, #1
 801aa9a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801aa9c:	4299      	cmp	r1, r3
 801aa9e:	6912      	ldr	r2, [r2, #16]
 801aaa0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801aaa4:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801aaa8:	d1f4      	bne.n	801aa94 <rmw_wait+0x9c>
 801aaaa:	b185      	cbz	r5, 801aace <rmw_wait+0xd6>
 801aaac:	6829      	ldr	r1, [r5, #0]
 801aaae:	b171      	cbz	r1, 801aace <rmw_wait+0xd6>
 801aab0:	f8d5 c004 	ldr.w	ip, [r5, #4]
 801aab4:	2300      	movs	r3, #0
 801aab6:	2001      	movs	r0, #1
 801aab8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801aabc:	3301      	adds	r3, #1
 801aabe:	6a12      	ldr	r2, [r2, #32]
 801aac0:	4299      	cmp	r1, r3
 801aac2:	6912      	ldr	r2, [r2, #16]
 801aac4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801aac8:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801aacc:	d1f4      	bne.n	801aab8 <rmw_wait+0xc0>
 801aace:	b344      	cbz	r4, 801ab22 <rmw_wait+0x12a>
 801aad0:	4622      	mov	r2, r4
 801aad2:	2300      	movs	r3, #0
 801aad4:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801aad8:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 801aadc:	f891 15a4 	ldrb.w	r1, [r1, #1444]	; 0x5a4
 801aae0:	440b      	add	r3, r1
 801aae2:	b2db      	uxtb	r3, r3
 801aae4:	2a00      	cmp	r2, #0
 801aae6:	d1f5      	bne.n	801aad4 <rmw_wait+0xdc>
 801aae8:	2b00      	cmp	r3, #0
 801aaea:	d05f      	beq.n	801abac <rmw_wait+0x1b4>
 801aaec:	1c7a      	adds	r2, r7, #1
 801aaee:	d00d      	beq.n	801ab0c <rmw_wait+0x114>
 801aaf0:	ee07 7a90 	vmov	s15, r7
 801aaf4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801aaf8:	ee07 3a90 	vmov	s15, r3
 801aafc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ab00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ab04:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801ab08:	ee17 7a90 	vmov	r7, s15
 801ab0c:	68a0      	ldr	r0, [r4, #8]
 801ab0e:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 801ab12:	f893 35a4 	ldrb.w	r3, [r3, #1444]	; 0x5a4
 801ab16:	2b00      	cmp	r3, #0
 801ab18:	f040 808d 	bne.w	801ac36 <rmw_wait+0x23e>
 801ab1c:	6864      	ldr	r4, [r4, #4]
 801ab1e:	2c00      	cmp	r4, #0
 801ab20:	d1f4      	bne.n	801ab0c <rmw_wait+0x114>
 801ab22:	f1b9 0f00 	cmp.w	r9, #0
 801ab26:	f000 80a1 	beq.w	801ac6c <rmw_wait+0x274>
 801ab2a:	f8d9 7000 	ldr.w	r7, [r9]
 801ab2e:	2f00      	cmp	r7, #0
 801ab30:	f000 80a4 	beq.w	801ac7c <rmw_wait+0x284>
 801ab34:	2400      	movs	r4, #0
 801ab36:	4627      	mov	r7, r4
 801ab38:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801ab3c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801ab40:	f7f4 fd9c 	bl	800f67c <rmw_uxrce_find_static_input_buffer_by_owner>
 801ab44:	2800      	cmp	r0, #0
 801ab46:	d03b      	beq.n	801abc0 <rmw_wait+0x1c8>
 801ab48:	3401      	adds	r4, #1
 801ab4a:	f8d9 3000 	ldr.w	r3, [r9]
 801ab4e:	2701      	movs	r7, #1
 801ab50:	42a3      	cmp	r3, r4
 801ab52:	d8f1      	bhi.n	801ab38 <rmw_wait+0x140>
 801ab54:	2701      	movs	r7, #1
 801ab56:	f1b8 0f00 	cmp.w	r8, #0
 801ab5a:	d010      	beq.n	801ab7e <rmw_wait+0x186>
 801ab5c:	f8d8 3000 	ldr.w	r3, [r8]
 801ab60:	b16b      	cbz	r3, 801ab7e <rmw_wait+0x186>
 801ab62:	2400      	movs	r4, #0
 801ab64:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801ab68:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801ab6c:	f7f4 fd86 	bl	800f67c <rmw_uxrce_find_static_input_buffer_by_owner>
 801ab70:	b370      	cbz	r0, 801abd0 <rmw_wait+0x1d8>
 801ab72:	3401      	adds	r4, #1
 801ab74:	f8d8 3000 	ldr.w	r3, [r8]
 801ab78:	2701      	movs	r7, #1
 801ab7a:	42a3      	cmp	r3, r4
 801ab7c:	d8f2      	bhi.n	801ab64 <rmw_wait+0x16c>
 801ab7e:	2d00      	cmp	r5, #0
 801ab80:	d035      	beq.n	801abee <rmw_wait+0x1f6>
 801ab82:	682b      	ldr	r3, [r5, #0]
 801ab84:	b39b      	cbz	r3, 801abee <rmw_wait+0x1f6>
 801ab86:	2400      	movs	r4, #0
 801ab88:	686b      	ldr	r3, [r5, #4]
 801ab8a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801ab8e:	f7f4 fd75 	bl	800f67c <rmw_uxrce_find_static_input_buffer_by_owner>
 801ab92:	b328      	cbz	r0, 801abe0 <rmw_wait+0x1e8>
 801ab94:	3401      	adds	r4, #1
 801ab96:	682b      	ldr	r3, [r5, #0]
 801ab98:	2701      	movs	r7, #1
 801ab9a:	42a3      	cmp	r3, r4
 801ab9c:	d8f4      	bhi.n	801ab88 <rmw_wait+0x190>
 801ab9e:	2e00      	cmp	r6, #0
 801aba0:	d03c      	beq.n	801ac1c <rmw_wait+0x224>
 801aba2:	6834      	ldr	r4, [r6, #0]
 801aba4:	2c00      	cmp	r4, #0
 801aba6:	d039      	beq.n	801ac1c <rmw_wait+0x224>
 801aba8:	2701      	movs	r7, #1
 801abaa:	e023      	b.n	801abf4 <rmw_wait+0x1fc>
 801abac:	68a0      	ldr	r0, [r4, #8]
 801abae:	2100      	movs	r1, #0
 801abb0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801abb4:	f7f7 ffc6 	bl	8012b44 <uxr_run_session_timeout>
 801abb8:	6864      	ldr	r4, [r4, #4]
 801abba:	2c00      	cmp	r4, #0
 801abbc:	d1f6      	bne.n	801abac <rmw_wait+0x1b4>
 801abbe:	e7b0      	b.n	801ab22 <rmw_wait+0x12a>
 801abc0:	e9d9 3200 	ldrd	r3, r2, [r9]
 801abc4:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801abc8:	3401      	adds	r4, #1
 801abca:	42a3      	cmp	r3, r4
 801abcc:	d8b4      	bhi.n	801ab38 <rmw_wait+0x140>
 801abce:	e7c2      	b.n	801ab56 <rmw_wait+0x15e>
 801abd0:	e9d8 3200 	ldrd	r3, r2, [r8]
 801abd4:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801abd8:	3401      	adds	r4, #1
 801abda:	429c      	cmp	r4, r3
 801abdc:	d3c2      	bcc.n	801ab64 <rmw_wait+0x16c>
 801abde:	e7ce      	b.n	801ab7e <rmw_wait+0x186>
 801abe0:	e9d5 3200 	ldrd	r3, r2, [r5]
 801abe4:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801abe8:	3401      	adds	r4, #1
 801abea:	42a3      	cmp	r3, r4
 801abec:	d8cc      	bhi.n	801ab88 <rmw_wait+0x190>
 801abee:	b1a6      	cbz	r6, 801ac1a <rmw_wait+0x222>
 801abf0:	6834      	ldr	r4, [r6, #0]
 801abf2:	b194      	cbz	r4, 801ac1a <rmw_wait+0x222>
 801abf4:	2300      	movs	r3, #0
 801abf6:	461d      	mov	r5, r3
 801abf8:	e004      	b.n	801ac04 <rmw_wait+0x20c>
 801abfa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801abfe:	3301      	adds	r3, #1
 801ac00:	42a3      	cmp	r3, r4
 801ac02:	d00a      	beq.n	801ac1a <rmw_wait+0x222>
 801ac04:	6870      	ldr	r0, [r6, #4]
 801ac06:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801ac0a:	7c0a      	ldrb	r2, [r1, #16]
 801ac0c:	2a00      	cmp	r2, #0
 801ac0e:	d0f4      	beq.n	801abfa <rmw_wait+0x202>
 801ac10:	3301      	adds	r3, #1
 801ac12:	4617      	mov	r7, r2
 801ac14:	740d      	strb	r5, [r1, #16]
 801ac16:	42a3      	cmp	r3, r4
 801ac18:	d1f4      	bne.n	801ac04 <rmw_wait+0x20c>
 801ac1a:	b147      	cbz	r7, 801ac2e <rmw_wait+0x236>
 801ac1c:	2000      	movs	r0, #0
 801ac1e:	b009      	add	sp, #36	; 0x24
 801ac20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ac24:	b11e      	cbz	r6, 801ac2e <rmw_wait+0x236>
 801ac26:	6834      	ldr	r4, [r6, #0]
 801ac28:	462f      	mov	r7, r5
 801ac2a:	2c00      	cmp	r4, #0
 801ac2c:	d1e2      	bne.n	801abf4 <rmw_wait+0x1fc>
 801ac2e:	2002      	movs	r0, #2
 801ac30:	b009      	add	sp, #36	; 0x24
 801ac32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ac36:	4639      	mov	r1, r7
 801ac38:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801ac3c:	f7f7 ff9c 	bl	8012b78 <uxr_run_session_until_data>
 801ac40:	6864      	ldr	r4, [r4, #4]
 801ac42:	2c00      	cmp	r4, #0
 801ac44:	f47f af62 	bne.w	801ab0c <rmw_wait+0x114>
 801ac48:	e76b      	b.n	801ab22 <rmw_wait+0x12a>
 801ac4a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801ac4e:	f7fe fc91 	bl	8019574 <rmw_time_total_nsec>
 801ac52:	2300      	movs	r3, #0
 801ac54:	4a19      	ldr	r2, [pc, #100]	; (801acbc <rmw_wait+0x2c4>)
 801ac56:	f7e5 fbab 	bl	80003b0 <__aeabi_uldivmod>
 801ac5a:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 801ac5e:	4607      	mov	r7, r0
 801ac60:	f171 0300 	sbcs.w	r3, r1, #0
 801ac64:	bfa8      	it	ge
 801ac66:	f06f 4700 	mvnge.w	r7, #2147483648	; 0x80000000
 801ac6a:	e6e5      	b.n	801aa38 <rmw_wait+0x40>
 801ac6c:	f1b8 0f00 	cmp.w	r8, #0
 801ac70:	d00f      	beq.n	801ac92 <rmw_wait+0x29a>
 801ac72:	f8d8 3000 	ldr.w	r3, [r8]
 801ac76:	b193      	cbz	r3, 801ac9e <rmw_wait+0x2a6>
 801ac78:	464f      	mov	r7, r9
 801ac7a:	e772      	b.n	801ab62 <rmw_wait+0x16a>
 801ac7c:	f1b8 0f00 	cmp.w	r8, #0
 801ac80:	d007      	beq.n	801ac92 <rmw_wait+0x29a>
 801ac82:	f8d8 3000 	ldr.w	r3, [r8]
 801ac86:	2b00      	cmp	r3, #0
 801ac88:	f47f af6b 	bne.w	801ab62 <rmw_wait+0x16a>
 801ac8c:	b155      	cbz	r5, 801aca4 <rmw_wait+0x2ac>
 801ac8e:	461f      	mov	r7, r3
 801ac90:	e777      	b.n	801ab82 <rmw_wait+0x18a>
 801ac92:	2d00      	cmp	r5, #0
 801ac94:	d0c6      	beq.n	801ac24 <rmw_wait+0x22c>
 801ac96:	682b      	ldr	r3, [r5, #0]
 801ac98:	b143      	cbz	r3, 801acac <rmw_wait+0x2b4>
 801ac9a:	4647      	mov	r7, r8
 801ac9c:	e773      	b.n	801ab86 <rmw_wait+0x18e>
 801ac9e:	b10d      	cbz	r5, 801aca4 <rmw_wait+0x2ac>
 801aca0:	464f      	mov	r7, r9
 801aca2:	e76e      	b.n	801ab82 <rmw_wait+0x18a>
 801aca4:	462f      	mov	r7, r5
 801aca6:	2e00      	cmp	r6, #0
 801aca8:	d1a2      	bne.n	801abf0 <rmw_wait+0x1f8>
 801acaa:	e7c0      	b.n	801ac2e <rmw_wait+0x236>
 801acac:	4647      	mov	r7, r8
 801acae:	2e00      	cmp	r6, #0
 801acb0:	d19e      	bne.n	801abf0 <rmw_wait+0x1f8>
 801acb2:	e7bc      	b.n	801ac2e <rmw_wait+0x236>
 801acb4:	0801f940 	.word	0x0801f940
 801acb8:	2001152c 	.word	0x2001152c
 801acbc:	000f4240 	.word	0x000f4240

0801acc0 <rmw_create_wait_set>:
 801acc0:	b508      	push	{r3, lr}
 801acc2:	4803      	ldr	r0, [pc, #12]	; (801acd0 <rmw_create_wait_set+0x10>)
 801acc4:	f7fe fdde 	bl	8019884 <get_memory>
 801acc8:	b108      	cbz	r0, 801acce <rmw_create_wait_set+0xe>
 801acca:	6880      	ldr	r0, [r0, #8]
 801accc:	3010      	adds	r0, #16
 801acce:	bd08      	pop	{r3, pc}
 801acd0:	2001156c 	.word	0x2001156c

0801acd4 <rmw_destroy_wait_set>:
 801acd4:	b508      	push	{r3, lr}
 801acd6:	4b08      	ldr	r3, [pc, #32]	; (801acf8 <rmw_destroy_wait_set+0x24>)
 801acd8:	6819      	ldr	r1, [r3, #0]
 801acda:	b911      	cbnz	r1, 801ace2 <rmw_destroy_wait_set+0xe>
 801acdc:	e00a      	b.n	801acf4 <rmw_destroy_wait_set+0x20>
 801acde:	6849      	ldr	r1, [r1, #4]
 801ace0:	b141      	cbz	r1, 801acf4 <rmw_destroy_wait_set+0x20>
 801ace2:	688b      	ldr	r3, [r1, #8]
 801ace4:	3310      	adds	r3, #16
 801ace6:	4298      	cmp	r0, r3
 801ace8:	d1f9      	bne.n	801acde <rmw_destroy_wait_set+0xa>
 801acea:	4803      	ldr	r0, [pc, #12]	; (801acf8 <rmw_destroy_wait_set+0x24>)
 801acec:	f7fe fdda 	bl	80198a4 <put_memory>
 801acf0:	2000      	movs	r0, #0
 801acf2:	bd08      	pop	{r3, pc}
 801acf4:	2001      	movs	r0, #1
 801acf6:	bd08      	pop	{r3, pc}
 801acf8:	2001156c 	.word	0x2001156c

0801acfc <rmw_uros_epoch_nanos>:
 801acfc:	4b05      	ldr	r3, [pc, #20]	; (801ad14 <rmw_uros_epoch_nanos+0x18>)
 801acfe:	681b      	ldr	r3, [r3, #0]
 801ad00:	b123      	cbz	r3, 801ad0c <rmw_uros_epoch_nanos+0x10>
 801ad02:	6898      	ldr	r0, [r3, #8]
 801ad04:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801ad08:	f7f7 bb92 	b.w	8012430 <uxr_epoch_nanos>
 801ad0c:	2000      	movs	r0, #0
 801ad0e:	2100      	movs	r1, #0
 801ad10:	4770      	bx	lr
 801ad12:	bf00      	nop
 801ad14:	2001152c 	.word	0x2001152c

0801ad18 <service_msgs__msg__ServiceEventInfo__get_type_hash>:
 801ad18:	4800      	ldr	r0, [pc, #0]	; (801ad1c <service_msgs__msg__ServiceEventInfo__get_type_hash+0x4>)
 801ad1a:	4770      	bx	lr
 801ad1c:	20001ca0 	.word	0x20001ca0

0801ad20 <service_msgs__msg__ServiceEventInfo__get_type_description>:
 801ad20:	b510      	push	{r4, lr}
 801ad22:	4c08      	ldr	r4, [pc, #32]	; (801ad44 <service_msgs__msg__ServiceEventInfo__get_type_description+0x24>)
 801ad24:	7820      	ldrb	r0, [r4, #0]
 801ad26:	b108      	cbz	r0, 801ad2c <service_msgs__msg__ServiceEventInfo__get_type_description+0xc>
 801ad28:	4807      	ldr	r0, [pc, #28]	; (801ad48 <service_msgs__msg__ServiceEventInfo__get_type_description+0x28>)
 801ad2a:	bd10      	pop	{r4, pc}
 801ad2c:	f000 f858 	bl	801ade0 <builtin_interfaces__msg__Time__get_type_description>
 801ad30:	300c      	adds	r0, #12
 801ad32:	4b06      	ldr	r3, [pc, #24]	; (801ad4c <service_msgs__msg__ServiceEventInfo__get_type_description+0x2c>)
 801ad34:	c807      	ldmia	r0, {r0, r1, r2}
 801ad36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801ad3a:	2301      	movs	r3, #1
 801ad3c:	4802      	ldr	r0, [pc, #8]	; (801ad48 <service_msgs__msg__ServiceEventInfo__get_type_description+0x28>)
 801ad3e:	7023      	strb	r3, [r4, #0]
 801ad40:	bd10      	pop	{r4, pc}
 801ad42:	bf00      	nop
 801ad44:	20011cf1 	.word	0x20011cf1
 801ad48:	08021444 	.word	0x08021444
 801ad4c:	20001e24 	.word	0x20001e24

0801ad50 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>:
 801ad50:	4800      	ldr	r0, [pc, #0]	; (801ad54 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source+0x4>)
 801ad52:	4770      	bx	lr
 801ad54:	08021468 	.word	0x08021468

0801ad58 <service_msgs__msg__ServiceEventInfo__get_type_description_sources>:
 801ad58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad5a:	4e0f      	ldr	r6, [pc, #60]	; (801ad98 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x40>)
 801ad5c:	7837      	ldrb	r7, [r6, #0]
 801ad5e:	b10f      	cbz	r7, 801ad64 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0xc>
 801ad60:	480e      	ldr	r0, [pc, #56]	; (801ad9c <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x44>)
 801ad62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ad64:	4d0e      	ldr	r5, [pc, #56]	; (801ada0 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x48>)
 801ad66:	4c0f      	ldr	r4, [pc, #60]	; (801ada4 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x4c>)
 801ad68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ad6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ad6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ad6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ad70:	682b      	ldr	r3, [r5, #0]
 801ad72:	4638      	mov	r0, r7
 801ad74:	f844 3b04 	str.w	r3, [r4], #4
 801ad78:	f000 f83e 	bl	801adf8 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 801ad7c:	2301      	movs	r3, #1
 801ad7e:	4684      	mov	ip, r0
 801ad80:	7033      	strb	r3, [r6, #0]
 801ad82:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ad86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ad88:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ad8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ad8e:	f8dc 3000 	ldr.w	r3, [ip]
 801ad92:	4802      	ldr	r0, [pc, #8]	; (801ad9c <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x44>)
 801ad94:	6023      	str	r3, [r4, #0]
 801ad96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ad98:	20011cf0 	.word	0x20011cf0
 801ad9c:	0802148c 	.word	0x0802148c
 801ada0:	08021468 	.word	0x08021468
 801ada4:	20011cf4 	.word	0x20011cf4

0801ada8 <service_msgs__msg__ServiceEventInfo__init>:
 801ada8:	b538      	push	{r3, r4, r5, lr}
 801adaa:	b138      	cbz	r0, 801adbc <service_msgs__msg__ServiceEventInfo__init+0x14>
 801adac:	1d05      	adds	r5, r0, #4
 801adae:	4628      	mov	r0, r5
 801adb0:	f000 f842 	bl	801ae38 <builtin_interfaces__msg__Time__init>
 801adb4:	4604      	mov	r4, r0
 801adb6:	b120      	cbz	r0, 801adc2 <service_msgs__msg__ServiceEventInfo__init+0x1a>
 801adb8:	4620      	mov	r0, r4
 801adba:	bd38      	pop	{r3, r4, r5, pc}
 801adbc:	4604      	mov	r4, r0
 801adbe:	4620      	mov	r0, r4
 801adc0:	bd38      	pop	{r3, r4, r5, pc}
 801adc2:	4628      	mov	r0, r5
 801adc4:	f000 f83c 	bl	801ae40 <builtin_interfaces__msg__Time__fini>
 801adc8:	4620      	mov	r0, r4
 801adca:	bd38      	pop	{r3, r4, r5, pc}

0801adcc <service_msgs__msg__ServiceEventInfo__fini>:
 801adcc:	b110      	cbz	r0, 801add4 <service_msgs__msg__ServiceEventInfo__fini+0x8>
 801adce:	3004      	adds	r0, #4
 801add0:	f000 b836 	b.w	801ae40 <builtin_interfaces__msg__Time__fini>
 801add4:	4770      	bx	lr
 801add6:	bf00      	nop

0801add8 <builtin_interfaces__msg__Time__get_type_hash>:
 801add8:	4800      	ldr	r0, [pc, #0]	; (801addc <builtin_interfaces__msg__Time__get_type_hash+0x4>)
 801adda:	4770      	bx	lr
 801addc:	200021c0 	.word	0x200021c0

0801ade0 <builtin_interfaces__msg__Time__get_type_description>:
 801ade0:	4b03      	ldr	r3, [pc, #12]	; (801adf0 <builtin_interfaces__msg__Time__get_type_description+0x10>)
 801ade2:	781a      	ldrb	r2, [r3, #0]
 801ade4:	b90a      	cbnz	r2, 801adea <builtin_interfaces__msg__Time__get_type_description+0xa>
 801ade6:	2201      	movs	r2, #1
 801ade8:	701a      	strb	r2, [r3, #0]
 801adea:	4802      	ldr	r0, [pc, #8]	; (801adf4 <builtin_interfaces__msg__Time__get_type_description+0x14>)
 801adec:	4770      	bx	lr
 801adee:	bf00      	nop
 801adf0:	20011d3d 	.word	0x20011d3d
 801adf4:	08021498 	.word	0x08021498

0801adf8 <builtin_interfaces__msg__Time__get_individual_type_description_source>:
 801adf8:	4800      	ldr	r0, [pc, #0]	; (801adfc <builtin_interfaces__msg__Time__get_individual_type_description_source+0x4>)
 801adfa:	4770      	bx	lr
 801adfc:	080214bc 	.word	0x080214bc

0801ae00 <builtin_interfaces__msg__Time__get_type_description_sources>:
 801ae00:	4b09      	ldr	r3, [pc, #36]	; (801ae28 <builtin_interfaces__msg__Time__get_type_description_sources+0x28>)
 801ae02:	781a      	ldrb	r2, [r3, #0]
 801ae04:	b96a      	cbnz	r2, 801ae22 <builtin_interfaces__msg__Time__get_type_description_sources+0x22>
 801ae06:	2201      	movs	r2, #1
 801ae08:	b430      	push	{r4, r5}
 801ae0a:	4d08      	ldr	r5, [pc, #32]	; (801ae2c <builtin_interfaces__msg__Time__get_type_description_sources+0x2c>)
 801ae0c:	4c08      	ldr	r4, [pc, #32]	; (801ae30 <builtin_interfaces__msg__Time__get_type_description_sources+0x30>)
 801ae0e:	701a      	strb	r2, [r3, #0]
 801ae10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ae12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ae14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ae16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ae18:	682b      	ldr	r3, [r5, #0]
 801ae1a:	4806      	ldr	r0, [pc, #24]	; (801ae34 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 801ae1c:	6023      	str	r3, [r4, #0]
 801ae1e:	bc30      	pop	{r4, r5}
 801ae20:	4770      	bx	lr
 801ae22:	4804      	ldr	r0, [pc, #16]	; (801ae34 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 801ae24:	4770      	bx	lr
 801ae26:	bf00      	nop
 801ae28:	20011d3c 	.word	0x20011d3c
 801ae2c:	080214bc 	.word	0x080214bc
 801ae30:	20011d40 	.word	0x20011d40
 801ae34:	080214e0 	.word	0x080214e0

0801ae38 <builtin_interfaces__msg__Time__init>:
 801ae38:	3800      	subs	r0, #0
 801ae3a:	bf18      	it	ne
 801ae3c:	2001      	movne	r0, #1
 801ae3e:	4770      	bx	lr

0801ae40 <builtin_interfaces__msg__Time__fini>:
 801ae40:	4770      	bx	lr
 801ae42:	bf00      	nop

0801ae44 <ucdr_serialize_sequence_char>:
 801ae44:	b570      	push	{r4, r5, r6, lr}
 801ae46:	4615      	mov	r5, r2
 801ae48:	460e      	mov	r6, r1
 801ae4a:	7d01      	ldrb	r1, [r0, #20]
 801ae4c:	4604      	mov	r4, r0
 801ae4e:	f7f5 fd17 	bl	8010880 <ucdr_serialize_endian_uint32_t>
 801ae52:	b90d      	cbnz	r5, 801ae58 <ucdr_serialize_sequence_char+0x14>
 801ae54:	2001      	movs	r0, #1
 801ae56:	bd70      	pop	{r4, r5, r6, pc}
 801ae58:	462b      	mov	r3, r5
 801ae5a:	4632      	mov	r2, r6
 801ae5c:	7d21      	ldrb	r1, [r4, #20]
 801ae5e:	4620      	mov	r0, r4
 801ae60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ae64:	f7f4 bfac 	b.w	800fdc0 <ucdr_serialize_endian_array_char>

0801ae68 <ucdr_deserialize_sequence_char>:
 801ae68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae6c:	461d      	mov	r5, r3
 801ae6e:	4616      	mov	r6, r2
 801ae70:	460f      	mov	r7, r1
 801ae72:	461a      	mov	r2, r3
 801ae74:	7d01      	ldrb	r1, [r0, #20]
 801ae76:	4604      	mov	r4, r0
 801ae78:	f7f5 fe2a 	bl	8010ad0 <ucdr_deserialize_endian_uint32_t>
 801ae7c:	682b      	ldr	r3, [r5, #0]
 801ae7e:	429e      	cmp	r6, r3
 801ae80:	d201      	bcs.n	801ae86 <ucdr_deserialize_sequence_char+0x1e>
 801ae82:	2201      	movs	r2, #1
 801ae84:	75a2      	strb	r2, [r4, #22]
 801ae86:	b913      	cbnz	r3, 801ae8e <ucdr_deserialize_sequence_char+0x26>
 801ae88:	2001      	movs	r0, #1
 801ae8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ae8e:	463a      	mov	r2, r7
 801ae90:	7d21      	ldrb	r1, [r4, #20]
 801ae92:	4620      	mov	r0, r4
 801ae94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ae98:	f7f4 bfc4 	b.w	800fe24 <ucdr_deserialize_endian_array_char>

0801ae9c <ucdr_serialize_sequence_uint8_t>:
 801ae9c:	b570      	push	{r4, r5, r6, lr}
 801ae9e:	4615      	mov	r5, r2
 801aea0:	460e      	mov	r6, r1
 801aea2:	7d01      	ldrb	r1, [r0, #20]
 801aea4:	4604      	mov	r4, r0
 801aea6:	f7f5 fceb 	bl	8010880 <ucdr_serialize_endian_uint32_t>
 801aeaa:	b90d      	cbnz	r5, 801aeb0 <ucdr_serialize_sequence_uint8_t+0x14>
 801aeac:	2001      	movs	r0, #1
 801aeae:	bd70      	pop	{r4, r5, r6, pc}
 801aeb0:	462b      	mov	r3, r5
 801aeb2:	4632      	mov	r2, r6
 801aeb4:	7d21      	ldrb	r1, [r4, #20]
 801aeb6:	4620      	mov	r0, r4
 801aeb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801aebc:	f7f5 b818 	b.w	800fef0 <ucdr_serialize_endian_array_uint8_t>

0801aec0 <ucdr_deserialize_sequence_uint8_t>:
 801aec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aec4:	461d      	mov	r5, r3
 801aec6:	4616      	mov	r6, r2
 801aec8:	460f      	mov	r7, r1
 801aeca:	461a      	mov	r2, r3
 801aecc:	7d01      	ldrb	r1, [r0, #20]
 801aece:	4604      	mov	r4, r0
 801aed0:	f7f5 fdfe 	bl	8010ad0 <ucdr_deserialize_endian_uint32_t>
 801aed4:	682b      	ldr	r3, [r5, #0]
 801aed6:	429e      	cmp	r6, r3
 801aed8:	d201      	bcs.n	801aede <ucdr_deserialize_sequence_uint8_t+0x1e>
 801aeda:	2201      	movs	r2, #1
 801aedc:	75a2      	strb	r2, [r4, #22]
 801aede:	b913      	cbnz	r3, 801aee6 <ucdr_deserialize_sequence_uint8_t+0x26>
 801aee0:	2001      	movs	r0, #1
 801aee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aee6:	463a      	mov	r2, r7
 801aee8:	7d21      	ldrb	r1, [r4, #20]
 801aeea:	4620      	mov	r0, r4
 801aeec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801aef0:	f7f5 b864 	b.w	800ffbc <ucdr_deserialize_endian_array_uint8_t>

0801aef4 <ucdr_serialize_string>:
 801aef4:	b510      	push	{r4, lr}
 801aef6:	b082      	sub	sp, #8
 801aef8:	4604      	mov	r4, r0
 801aefa:	4608      	mov	r0, r1
 801aefc:	9101      	str	r1, [sp, #4]
 801aefe:	f7e5 f9ff 	bl	8000300 <strlen>
 801af02:	4602      	mov	r2, r0
 801af04:	9901      	ldr	r1, [sp, #4]
 801af06:	4620      	mov	r0, r4
 801af08:	3201      	adds	r2, #1
 801af0a:	b002      	add	sp, #8
 801af0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801af10:	f7ff bf98 	b.w	801ae44 <ucdr_serialize_sequence_char>

0801af14 <ucdr_deserialize_string>:
 801af14:	b500      	push	{lr}
 801af16:	b083      	sub	sp, #12
 801af18:	ab01      	add	r3, sp, #4
 801af1a:	f7ff ffa5 	bl	801ae68 <ucdr_deserialize_sequence_char>
 801af1e:	b003      	add	sp, #12
 801af20:	f85d fb04 	ldr.w	pc, [sp], #4

0801af24 <get_custom_error>:
 801af24:	4b01      	ldr	r3, [pc, #4]	; (801af2c <get_custom_error+0x8>)
 801af26:	7818      	ldrb	r0, [r3, #0]
 801af28:	4770      	bx	lr
 801af2a:	bf00      	nop
 801af2c:	20011d64 	.word	0x20011d64

0801af30 <recv_custom_msg>:
 801af30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af34:	4693      	mov	fp, r2
 801af36:	b089      	sub	sp, #36	; 0x24
 801af38:	2200      	movs	r2, #0
 801af3a:	4604      	mov	r4, r0
 801af3c:	468a      	mov	sl, r1
 801af3e:	9305      	str	r3, [sp, #20]
 801af40:	f88d 201e 	strb.w	r2, [sp, #30]
 801af44:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 801af48:	b322      	cbz	r2, 801af94 <recv_custom_msg+0x64>
 801af4a:	f200 2902 	addw	r9, r0, #514	; 0x202
 801af4e:	f10d 081f 	add.w	r8, sp, #31
 801af52:	af05      	add	r7, sp, #20
 801af54:	f10d 061e 	add.w	r6, sp, #30
 801af58:	f44f 7500 	mov.w	r5, #512	; 0x200
 801af5c:	e002      	b.n	801af64 <recv_custom_msg+0x34>
 801af5e:	9b05      	ldr	r3, [sp, #20]
 801af60:	2b00      	cmp	r3, #0
 801af62:	dd0f      	ble.n	801af84 <recv_custom_msg+0x54>
 801af64:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 801af68:	4623      	mov	r3, r4
 801af6a:	4622      	mov	r2, r4
 801af6c:	4648      	mov	r0, r9
 801af6e:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801af72:	e9cd 5600 	strd	r5, r6, [sp]
 801af76:	f001 f913 	bl	801c1a0 <uxr_read_framed_msg>
 801af7a:	2800      	cmp	r0, #0
 801af7c:	d0ef      	beq.n	801af5e <recv_custom_msg+0x2e>
 801af7e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801af82:	b1b3      	cbz	r3, 801afb2 <recv_custom_msg+0x82>
 801af84:	4b0f      	ldr	r3, [pc, #60]	; (801afc4 <recv_custom_msg+0x94>)
 801af86:	2000      	movs	r0, #0
 801af88:	f89d 201f 	ldrb.w	r2, [sp, #31]
 801af8c:	701a      	strb	r2, [r3, #0]
 801af8e:	b009      	add	sp, #36	; 0x24
 801af90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af94:	f10d 021f 	add.w	r2, sp, #31
 801af98:	4601      	mov	r1, r0
 801af9a:	9200      	str	r2, [sp, #0]
 801af9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 801afa0:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 801afa4:	47a8      	blx	r5
 801afa6:	2800      	cmp	r0, #0
 801afa8:	d0ec      	beq.n	801af84 <recv_custom_msg+0x54>
 801afaa:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801afae:	2b00      	cmp	r3, #0
 801afb0:	d1e8      	bne.n	801af84 <recv_custom_msg+0x54>
 801afb2:	f8cb 0000 	str.w	r0, [fp]
 801afb6:	2001      	movs	r0, #1
 801afb8:	f8ca 4000 	str.w	r4, [sl]
 801afbc:	b009      	add	sp, #36	; 0x24
 801afbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801afc2:	bf00      	nop
 801afc4:	20011d64 	.word	0x20011d64

0801afc8 <send_custom_msg>:
 801afc8:	b530      	push	{r4, r5, lr}
 801afca:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 801afce:	b087      	sub	sp, #28
 801afd0:	4614      	mov	r4, r2
 801afd2:	b995      	cbnz	r5, 801affa <send_custom_msg+0x32>
 801afd4:	f8d0 5270 	ldr.w	r5, [r0, #624]	; 0x270
 801afd8:	f10d 0317 	add.w	r3, sp, #23
 801afdc:	47a8      	blx	r5
 801afde:	1e03      	subs	r3, r0, #0
 801afe0:	bf18      	it	ne
 801afe2:	2301      	movne	r3, #1
 801afe4:	42a0      	cmp	r0, r4
 801afe6:	bf18      	it	ne
 801afe8:	2300      	movne	r3, #0
 801afea:	b91b      	cbnz	r3, 801aff4 <send_custom_msg+0x2c>
 801afec:	4a0a      	ldr	r2, [pc, #40]	; (801b018 <send_custom_msg+0x50>)
 801afee:	f89d 1017 	ldrb.w	r1, [sp, #23]
 801aff2:	7011      	strb	r1, [r2, #0]
 801aff4:	4618      	mov	r0, r3
 801aff6:	b007      	add	sp, #28
 801aff8:	bd30      	pop	{r4, r5, pc}
 801affa:	460b      	mov	r3, r1
 801affc:	2200      	movs	r2, #0
 801affe:	f10d 0117 	add.w	r1, sp, #23
 801b002:	9400      	str	r4, [sp, #0]
 801b004:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801b008:	4602      	mov	r2, r0
 801b00a:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 801b00e:	f200 2002 	addw	r0, r0, #514	; 0x202
 801b012:	f000 fee7 	bl	801bde4 <uxr_write_framed_msg>
 801b016:	e7e2      	b.n	801afde <send_custom_msg+0x16>
 801b018:	20011d64 	.word	0x20011d64

0801b01c <uxr_set_custom_transport_callbacks>:
 801b01c:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 801b020:	9901      	ldr	r1, [sp, #4]
 801b022:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 801b026:	9b00      	ldr	r3, [sp, #0]
 801b028:	e9c0 319c 	strd	r3, r1, [r0, #624]	; 0x270
 801b02c:	4770      	bx	lr
 801b02e:	bf00      	nop

0801b030 <uxr_init_custom_transport>:
 801b030:	b538      	push	{r3, r4, r5, lr}
 801b032:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 801b036:	b303      	cbz	r3, 801b07a <uxr_init_custom_transport+0x4a>
 801b038:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 801b03c:	4604      	mov	r4, r0
 801b03e:	b1e2      	cbz	r2, 801b07a <uxr_init_custom_transport+0x4a>
 801b040:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 801b044:	b1ca      	cbz	r2, 801b07a <uxr_init_custom_transport+0x4a>
 801b046:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 801b04a:	b1b2      	cbz	r2, 801b07a <uxr_init_custom_transport+0x4a>
 801b04c:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 801b050:	4798      	blx	r3
 801b052:	4605      	mov	r5, r0
 801b054:	b188      	cbz	r0, 801b07a <uxr_init_custom_transport+0x4a>
 801b056:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 801b05a:	b98b      	cbnz	r3, 801b080 <uxr_init_custom_transport+0x50>
 801b05c:	4b0b      	ldr	r3, [pc, #44]	; (801b08c <uxr_init_custom_transport+0x5c>)
 801b05e:	4628      	mov	r0, r5
 801b060:	490b      	ldr	r1, [pc, #44]	; (801b090 <uxr_init_custom_transport+0x60>)
 801b062:	4a0c      	ldr	r2, [pc, #48]	; (801b094 <uxr_init_custom_transport+0x64>)
 801b064:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 801b068:	f44f 7300 	mov.w	r3, #512	; 0x200
 801b06c:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 801b070:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 801b074:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 801b078:	bd38      	pop	{r3, r4, r5, pc}
 801b07a:	2500      	movs	r5, #0
 801b07c:	4628      	mov	r0, r5
 801b07e:	bd38      	pop	{r3, r4, r5, pc}
 801b080:	2100      	movs	r1, #0
 801b082:	f204 2002 	addw	r0, r4, #514	; 0x202
 801b086:	f000 fea7 	bl	801bdd8 <uxr_init_framing_io>
 801b08a:	e7e7      	b.n	801b05c <uxr_init_custom_transport+0x2c>
 801b08c:	0801af31 	.word	0x0801af31
 801b090:	0801afc9 	.word	0x0801afc9
 801b094:	0801af25 	.word	0x0801af25

0801b098 <uxr_close_custom_transport>:
 801b098:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 801b09c:	4718      	bx	r3
 801b09e:	bf00      	nop

0801b0a0 <uxr_init_input_best_effort_stream>:
 801b0a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b0a4:	8003      	strh	r3, [r0, #0]
 801b0a6:	4770      	bx	lr

0801b0a8 <uxr_reset_input_best_effort_stream>:
 801b0a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b0ac:	8003      	strh	r3, [r0, #0]
 801b0ae:	4770      	bx	lr

0801b0b0 <uxr_receive_best_effort_message>:
 801b0b0:	b538      	push	{r3, r4, r5, lr}
 801b0b2:	4604      	mov	r4, r0
 801b0b4:	8800      	ldrh	r0, [r0, #0]
 801b0b6:	460d      	mov	r5, r1
 801b0b8:	f000 fe76 	bl	801bda8 <uxr_seq_num_cmp>
 801b0bc:	4603      	mov	r3, r0
 801b0be:	0fc0      	lsrs	r0, r0, #31
 801b0c0:	2b00      	cmp	r3, #0
 801b0c2:	bfb8      	it	lt
 801b0c4:	8025      	strhlt	r5, [r4, #0]
 801b0c6:	bd38      	pop	{r3, r4, r5, pc}

0801b0c8 <on_full_input_buffer>:
 801b0c8:	b570      	push	{r4, r5, r6, lr}
 801b0ca:	460c      	mov	r4, r1
 801b0cc:	4605      	mov	r5, r0
 801b0ce:	8908      	ldrh	r0, [r1, #8]
 801b0d0:	682b      	ldr	r3, [r5, #0]
 801b0d2:	7d26      	ldrb	r6, [r4, #20]
 801b0d4:	e9d1 1200 	ldrd	r1, r2, [r1]
 801b0d8:	fbb2 f2f0 	udiv	r2, r2, r0
 801b0dc:	eba3 0c01 	sub.w	ip, r3, r1
 801b0e0:	fbbc fcf2 	udiv	ip, ip, r2
 801b0e4:	f10c 0c01 	add.w	ip, ip, #1
 801b0e8:	fa1f f38c 	uxth.w	r3, ip
 801b0ec:	fbb3 fcf0 	udiv	ip, r3, r0
 801b0f0:	fb00 331c 	mls	r3, r0, ip, r3
 801b0f4:	b29b      	uxth	r3, r3
 801b0f6:	fb02 f303 	mul.w	r3, r2, r3
 801b0fa:	1d18      	adds	r0, r3, #4
 801b0fc:	4408      	add	r0, r1
 801b0fe:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801b102:	b116      	cbz	r6, 801b10a <on_full_input_buffer+0x42>
 801b104:	2600      	movs	r6, #0
 801b106:	f840 6c04 	str.w	r6, [r0, #-4]
 801b10a:	2a03      	cmp	r2, #3
 801b10c:	d801      	bhi.n	801b112 <on_full_input_buffer+0x4a>
 801b10e:	2001      	movs	r0, #1
 801b110:	bd70      	pop	{r4, r5, r6, pc}
 801b112:	3308      	adds	r3, #8
 801b114:	4628      	mov	r0, r5
 801b116:	3a04      	subs	r2, #4
 801b118:	4419      	add	r1, r3
 801b11a:	692b      	ldr	r3, [r5, #16]
 801b11c:	f7f6 fd8a 	bl	8011c34 <ucdr_init_buffer_origin>
 801b120:	4628      	mov	r0, r5
 801b122:	4622      	mov	r2, r4
 801b124:	4902      	ldr	r1, [pc, #8]	; (801b130 <on_full_input_buffer+0x68>)
 801b126:	f7f6 fd61 	bl	8011bec <ucdr_set_on_full_buffer_callback>
 801b12a:	2000      	movs	r0, #0
 801b12c:	bd70      	pop	{r4, r5, r6, pc}
 801b12e:	bf00      	nop
 801b130:	0801b0c9 	.word	0x0801b0c9

0801b134 <uxr_init_input_reliable_stream>:
 801b134:	b510      	push	{r4, lr}
 801b136:	e9c0 1200 	strd	r1, r2, [r0]
 801b13a:	2400      	movs	r4, #0
 801b13c:	9a02      	ldr	r2, [sp, #8]
 801b13e:	8103      	strh	r3, [r0, #8]
 801b140:	6102      	str	r2, [r0, #16]
 801b142:	7504      	strb	r4, [r0, #20]
 801b144:	b1c3      	cbz	r3, 801b178 <uxr_init_input_reliable_stream+0x44>
 801b146:	600c      	str	r4, [r1, #0]
 801b148:	8901      	ldrh	r1, [r0, #8]
 801b14a:	2901      	cmp	r1, #1
 801b14c:	d914      	bls.n	801b178 <uxr_init_input_reliable_stream+0x44>
 801b14e:	f04f 0c01 	mov.w	ip, #1
 801b152:	6843      	ldr	r3, [r0, #4]
 801b154:	f10c 0e01 	add.w	lr, ip, #1
 801b158:	fbbc f2f1 	udiv	r2, ip, r1
 801b15c:	fbb3 f3f1 	udiv	r3, r3, r1
 801b160:	fb01 c212 	mls	r2, r1, r2, ip
 801b164:	fa1f fc8e 	uxth.w	ip, lr
 801b168:	b292      	uxth	r2, r2
 801b16a:	fb02 f303 	mul.w	r3, r2, r3
 801b16e:	6802      	ldr	r2, [r0, #0]
 801b170:	50d4      	str	r4, [r2, r3]
 801b172:	8901      	ldrh	r1, [r0, #8]
 801b174:	4561      	cmp	r1, ip
 801b176:	d8ec      	bhi.n	801b152 <uxr_init_input_reliable_stream+0x1e>
 801b178:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b17c:	60c3      	str	r3, [r0, #12]
 801b17e:	bd10      	pop	{r4, pc}

0801b180 <uxr_reset_input_reliable_stream>:
 801b180:	8901      	ldrh	r1, [r0, #8]
 801b182:	b1d9      	cbz	r1, 801b1bc <uxr_reset_input_reliable_stream+0x3c>
 801b184:	b510      	push	{r4, lr}
 801b186:	f04f 0e00 	mov.w	lr, #0
 801b18a:	46f4      	mov	ip, lr
 801b18c:	4674      	mov	r4, lr
 801b18e:	6843      	ldr	r3, [r0, #4]
 801b190:	f10e 0e01 	add.w	lr, lr, #1
 801b194:	fbbc f2f1 	udiv	r2, ip, r1
 801b198:	fbb3 f3f1 	udiv	r3, r3, r1
 801b19c:	fb01 c212 	mls	r2, r1, r2, ip
 801b1a0:	fa1f fc8e 	uxth.w	ip, lr
 801b1a4:	b292      	uxth	r2, r2
 801b1a6:	fb02 f303 	mul.w	r3, r2, r3
 801b1aa:	6802      	ldr	r2, [r0, #0]
 801b1ac:	50d4      	str	r4, [r2, r3]
 801b1ae:	8901      	ldrh	r1, [r0, #8]
 801b1b0:	4561      	cmp	r1, ip
 801b1b2:	d8ec      	bhi.n	801b18e <uxr_reset_input_reliable_stream+0xe>
 801b1b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b1b8:	60c3      	str	r3, [r0, #12]
 801b1ba:	bd10      	pop	{r4, pc}
 801b1bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b1c0:	60c3      	str	r3, [r0, #12]
 801b1c2:	4770      	bx	lr

0801b1c4 <uxr_receive_reliable_message>:
 801b1c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b1c8:	4604      	mov	r4, r0
 801b1ca:	460d      	mov	r5, r1
 801b1cc:	8901      	ldrh	r1, [r0, #8]
 801b1ce:	4617      	mov	r7, r2
 801b1d0:	8980      	ldrh	r0, [r0, #12]
 801b1d2:	4698      	mov	r8, r3
 801b1d4:	f000 fde0 	bl	801bd98 <uxr_seq_num_add>
 801b1d8:	4629      	mov	r1, r5
 801b1da:	4606      	mov	r6, r0
 801b1dc:	89a0      	ldrh	r0, [r4, #12]
 801b1de:	f000 fde3 	bl	801bda8 <uxr_seq_num_cmp>
 801b1e2:	2800      	cmp	r0, #0
 801b1e4:	db0a      	blt.n	801b1fc <uxr_receive_reliable_message+0x38>
 801b1e6:	2600      	movs	r6, #0
 801b1e8:	4629      	mov	r1, r5
 801b1ea:	89e0      	ldrh	r0, [r4, #14]
 801b1ec:	f000 fddc 	bl	801bda8 <uxr_seq_num_cmp>
 801b1f0:	2800      	cmp	r0, #0
 801b1f2:	da00      	bge.n	801b1f6 <uxr_receive_reliable_message+0x32>
 801b1f4:	81e5      	strh	r5, [r4, #14]
 801b1f6:	4630      	mov	r0, r6
 801b1f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b1fc:	4630      	mov	r0, r6
 801b1fe:	4629      	mov	r1, r5
 801b200:	f000 fdd2 	bl	801bda8 <uxr_seq_num_cmp>
 801b204:	2800      	cmp	r0, #0
 801b206:	dbee      	blt.n	801b1e6 <uxr_receive_reliable_message+0x22>
 801b208:	6923      	ldr	r3, [r4, #16]
 801b20a:	4638      	mov	r0, r7
 801b20c:	4798      	blx	r3
 801b20e:	4681      	mov	r9, r0
 801b210:	2101      	movs	r1, #1
 801b212:	89a0      	ldrh	r0, [r4, #12]
 801b214:	f000 fdc0 	bl	801bd98 <uxr_seq_num_add>
 801b218:	f1b9 0f00 	cmp.w	r9, #0
 801b21c:	bf08      	it	eq
 801b21e:	4285      	cmpeq	r5, r0
 801b220:	bf0c      	ite	eq
 801b222:	2601      	moveq	r6, #1
 801b224:	2600      	movne	r6, #0
 801b226:	d104      	bne.n	801b232 <uxr_receive_reliable_message+0x6e>
 801b228:	2300      	movs	r3, #0
 801b22a:	9a08      	ldr	r2, [sp, #32]
 801b22c:	81a0      	strh	r0, [r4, #12]
 801b22e:	7013      	strb	r3, [r2, #0]
 801b230:	e7da      	b.n	801b1e8 <uxr_receive_reliable_message+0x24>
 801b232:	8922      	ldrh	r2, [r4, #8]
 801b234:	6863      	ldr	r3, [r4, #4]
 801b236:	fbb5 f0f2 	udiv	r0, r5, r2
 801b23a:	fbb3 f3f2 	udiv	r3, r3, r2
 801b23e:	fb02 5010 	mls	r0, r2, r0, r5
 801b242:	b280      	uxth	r0, r0
 801b244:	fb03 f000 	mul.w	r0, r3, r0
 801b248:	6823      	ldr	r3, [r4, #0]
 801b24a:	3004      	adds	r0, #4
 801b24c:	4418      	add	r0, r3
 801b24e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801b252:	2b00      	cmp	r3, #0
 801b254:	d1c7      	bne.n	801b1e6 <uxr_receive_reliable_message+0x22>
 801b256:	4639      	mov	r1, r7
 801b258:	4642      	mov	r2, r8
 801b25a:	f003 fc48 	bl	801eaee <memcpy>
 801b25e:	8921      	ldrh	r1, [r4, #8]
 801b260:	6863      	ldr	r3, [r4, #4]
 801b262:	fbb5 f2f1 	udiv	r2, r5, r1
 801b266:	fbb3 f3f1 	udiv	r3, r3, r1
 801b26a:	fb01 5212 	mls	r2, r1, r2, r5
 801b26e:	b292      	uxth	r2, r2
 801b270:	fb02 f303 	mul.w	r3, r2, r3
 801b274:	6822      	ldr	r2, [r4, #0]
 801b276:	f842 8003 	str.w	r8, [r2, r3]
 801b27a:	2301      	movs	r3, #1
 801b27c:	9a08      	ldr	r2, [sp, #32]
 801b27e:	7013      	strb	r3, [r2, #0]
 801b280:	f1b9 0f00 	cmp.w	r9, #0
 801b284:	d0af      	beq.n	801b1e6 <uxr_receive_reliable_message+0x22>
 801b286:	89a6      	ldrh	r6, [r4, #12]
 801b288:	2101      	movs	r1, #1
 801b28a:	4630      	mov	r0, r6
 801b28c:	f000 fd84 	bl	801bd98 <uxr_seq_num_add>
 801b290:	8921      	ldrh	r1, [r4, #8]
 801b292:	6863      	ldr	r3, [r4, #4]
 801b294:	4606      	mov	r6, r0
 801b296:	fbb0 f2f1 	udiv	r2, r0, r1
 801b29a:	fbb3 f3f1 	udiv	r3, r3, r1
 801b29e:	fb01 0212 	mls	r2, r1, r2, r0
 801b2a2:	6820      	ldr	r0, [r4, #0]
 801b2a4:	b292      	uxth	r2, r2
 801b2a6:	fb02 f303 	mul.w	r3, r2, r3
 801b2aa:	3304      	adds	r3, #4
 801b2ac:	4418      	add	r0, r3
 801b2ae:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801b2b2:	2b00      	cmp	r3, #0
 801b2b4:	d097      	beq.n	801b1e6 <uxr_receive_reliable_message+0x22>
 801b2b6:	6923      	ldr	r3, [r4, #16]
 801b2b8:	4798      	blx	r3
 801b2ba:	2802      	cmp	r0, #2
 801b2bc:	d002      	beq.n	801b2c4 <uxr_receive_reliable_message+0x100>
 801b2be:	2801      	cmp	r0, #1
 801b2c0:	d0e2      	beq.n	801b288 <uxr_receive_reliable_message+0xc4>
 801b2c2:	e790      	b.n	801b1e6 <uxr_receive_reliable_message+0x22>
 801b2c4:	2601      	movs	r6, #1
 801b2c6:	e78f      	b.n	801b1e8 <uxr_receive_reliable_message+0x24>

0801b2c8 <uxr_next_input_reliable_buffer_available>:
 801b2c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b2cc:	4604      	mov	r4, r0
 801b2ce:	460f      	mov	r7, r1
 801b2d0:	8980      	ldrh	r0, [r0, #12]
 801b2d2:	2101      	movs	r1, #1
 801b2d4:	4690      	mov	r8, r2
 801b2d6:	f000 fd5f 	bl	801bd98 <uxr_seq_num_add>
 801b2da:	8922      	ldrh	r2, [r4, #8]
 801b2dc:	6866      	ldr	r6, [r4, #4]
 801b2de:	fbb0 f3f2 	udiv	r3, r0, r2
 801b2e2:	fbb6 f6f2 	udiv	r6, r6, r2
 801b2e6:	fb02 0313 	mls	r3, r2, r3, r0
 801b2ea:	b29b      	uxth	r3, r3
 801b2ec:	fb03 f606 	mul.w	r6, r3, r6
 801b2f0:	6823      	ldr	r3, [r4, #0]
 801b2f2:	3604      	adds	r6, #4
 801b2f4:	441e      	add	r6, r3
 801b2f6:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801b2fa:	f1b9 0f00 	cmp.w	r9, #0
 801b2fe:	d023      	beq.n	801b348 <uxr_next_input_reliable_buffer_available+0x80>
 801b300:	4605      	mov	r5, r0
 801b302:	6923      	ldr	r3, [r4, #16]
 801b304:	4630      	mov	r0, r6
 801b306:	4798      	blx	r3
 801b308:	4682      	mov	sl, r0
 801b30a:	b300      	cbz	r0, 801b34e <uxr_next_input_reliable_buffer_available+0x86>
 801b30c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801b310:	2101      	movs	r1, #1
 801b312:	4650      	mov	r0, sl
 801b314:	f000 fd40 	bl	801bd98 <uxr_seq_num_add>
 801b318:	8921      	ldrh	r1, [r4, #8]
 801b31a:	4682      	mov	sl, r0
 801b31c:	6863      	ldr	r3, [r4, #4]
 801b31e:	6820      	ldr	r0, [r4, #0]
 801b320:	fbba f2f1 	udiv	r2, sl, r1
 801b324:	fbb3 f3f1 	udiv	r3, r3, r1
 801b328:	fb01 a212 	mls	r2, r1, r2, sl
 801b32c:	b292      	uxth	r2, r2
 801b32e:	fb02 f303 	mul.w	r3, r2, r3
 801b332:	3304      	adds	r3, #4
 801b334:	4418      	add	r0, r3
 801b336:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801b33a:	b12b      	cbz	r3, 801b348 <uxr_next_input_reliable_buffer_available+0x80>
 801b33c:	6923      	ldr	r3, [r4, #16]
 801b33e:	4798      	blx	r3
 801b340:	2802      	cmp	r0, #2
 801b342:	d01b      	beq.n	801b37c <uxr_next_input_reliable_buffer_available+0xb4>
 801b344:	2801      	cmp	r0, #1
 801b346:	d0e3      	beq.n	801b310 <uxr_next_input_reliable_buffer_available+0x48>
 801b348:	2000      	movs	r0, #0
 801b34a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b34e:	464a      	mov	r2, r9
 801b350:	4631      	mov	r1, r6
 801b352:	4638      	mov	r0, r7
 801b354:	f7f6 fc76 	bl	8011c44 <ucdr_init_buffer>
 801b358:	8921      	ldrh	r1, [r4, #8]
 801b35a:	6863      	ldr	r3, [r4, #4]
 801b35c:	2001      	movs	r0, #1
 801b35e:	fbb5 f2f1 	udiv	r2, r5, r1
 801b362:	fbb3 f3f1 	udiv	r3, r3, r1
 801b366:	fb01 5212 	mls	r2, r1, r2, r5
 801b36a:	b292      	uxth	r2, r2
 801b36c:	fb02 f303 	mul.w	r3, r2, r3
 801b370:	6822      	ldr	r2, [r4, #0]
 801b372:	f842 a003 	str.w	sl, [r2, r3]
 801b376:	81a5      	strh	r5, [r4, #12]
 801b378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b37c:	8920      	ldrh	r0, [r4, #8]
 801b37e:	eb06 0108 	add.w	r1, r6, r8
 801b382:	6863      	ldr	r3, [r4, #4]
 801b384:	eba9 0208 	sub.w	r2, r9, r8
 801b388:	fbb5 f6f0 	udiv	r6, r5, r0
 801b38c:	fbb3 f3f0 	udiv	r3, r3, r0
 801b390:	fb00 5516 	mls	r5, r0, r6, r5
 801b394:	2000      	movs	r0, #0
 801b396:	b2ad      	uxth	r5, r5
 801b398:	fb03 f505 	mul.w	r5, r3, r5
 801b39c:	6823      	ldr	r3, [r4, #0]
 801b39e:	5158      	str	r0, [r3, r5]
 801b3a0:	4638      	mov	r0, r7
 801b3a2:	f7f6 fc4f 	bl	8011c44 <ucdr_init_buffer>
 801b3a6:	4638      	mov	r0, r7
 801b3a8:	4622      	mov	r2, r4
 801b3aa:	4903      	ldr	r1, [pc, #12]	; (801b3b8 <uxr_next_input_reliable_buffer_available+0xf0>)
 801b3ac:	f7f6 fc1e 	bl	8011bec <ucdr_set_on_full_buffer_callback>
 801b3b0:	2001      	movs	r0, #1
 801b3b2:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801b3b6:	e7c8      	b.n	801b34a <uxr_next_input_reliable_buffer_available+0x82>
 801b3b8:	0801b0c9 	.word	0x0801b0c9

0801b3bc <uxr_process_heartbeat>:
 801b3bc:	b538      	push	{r3, r4, r5, lr}
 801b3be:	4611      	mov	r1, r2
 801b3c0:	4604      	mov	r4, r0
 801b3c2:	89c0      	ldrh	r0, [r0, #14]
 801b3c4:	4615      	mov	r5, r2
 801b3c6:	f000 fcef 	bl	801bda8 <uxr_seq_num_cmp>
 801b3ca:	2800      	cmp	r0, #0
 801b3cc:	bfb8      	it	lt
 801b3ce:	81e5      	strhlt	r5, [r4, #14]
 801b3d0:	bd38      	pop	{r3, r4, r5, pc}
 801b3d2:	bf00      	nop

0801b3d4 <uxr_compute_acknack>:
 801b3d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b3d8:	8903      	ldrh	r3, [r0, #8]
 801b3da:	4604      	mov	r4, r0
 801b3dc:	460f      	mov	r7, r1
 801b3de:	8985      	ldrh	r5, [r0, #12]
 801b3e0:	b1db      	cbz	r3, 801b41a <uxr_compute_acknack+0x46>
 801b3e2:	4628      	mov	r0, r5
 801b3e4:	2601      	movs	r6, #1
 801b3e6:	e004      	b.n	801b3f2 <uxr_compute_acknack+0x1e>
 801b3e8:	4566      	cmp	r6, ip
 801b3ea:	f106 0601 	add.w	r6, r6, #1
 801b3ee:	d214      	bcs.n	801b41a <uxr_compute_acknack+0x46>
 801b3f0:	89a0      	ldrh	r0, [r4, #12]
 801b3f2:	b2b1      	uxth	r1, r6
 801b3f4:	f000 fcd0 	bl	801bd98 <uxr_seq_num_add>
 801b3f8:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801b3fc:	fbb0 f2fc 	udiv	r2, r0, ip
 801b400:	e9d4 1300 	ldrd	r1, r3, [r4]
 801b404:	fb0c 0212 	mls	r2, ip, r2, r0
 801b408:	fbb3 f3fc 	udiv	r3, r3, ip
 801b40c:	b292      	uxth	r2, r2
 801b40e:	fb02 f303 	mul.w	r3, r2, r3
 801b412:	58cb      	ldr	r3, [r1, r3]
 801b414:	2b00      	cmp	r3, #0
 801b416:	d1e7      	bne.n	801b3e8 <uxr_compute_acknack+0x14>
 801b418:	4605      	mov	r5, r0
 801b41a:	803d      	strh	r5, [r7, #0]
 801b41c:	2101      	movs	r1, #1
 801b41e:	89e6      	ldrh	r6, [r4, #14]
 801b420:	4628      	mov	r0, r5
 801b422:	f000 fcbd 	bl	801bda0 <uxr_seq_num_sub>
 801b426:	4601      	mov	r1, r0
 801b428:	4630      	mov	r0, r6
 801b42a:	f000 fcb9 	bl	801bda0 <uxr_seq_num_sub>
 801b42e:	4606      	mov	r6, r0
 801b430:	b328      	cbz	r0, 801b47e <uxr_compute_acknack+0xaa>
 801b432:	f04f 0900 	mov.w	r9, #0
 801b436:	f04f 0801 	mov.w	r8, #1
 801b43a:	464d      	mov	r5, r9
 801b43c:	fa1f f189 	uxth.w	r1, r9
 801b440:	8838      	ldrh	r0, [r7, #0]
 801b442:	f000 fca9 	bl	801bd98 <uxr_seq_num_add>
 801b446:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801b44a:	6861      	ldr	r1, [r4, #4]
 801b44c:	fa08 fe09 	lsl.w	lr, r8, r9
 801b450:	6822      	ldr	r2, [r4, #0]
 801b452:	f109 0901 	add.w	r9, r9, #1
 801b456:	ea4e 0e05 	orr.w	lr, lr, r5
 801b45a:	fbb0 f3fc 	udiv	r3, r0, ip
 801b45e:	fbb1 f1fc 	udiv	r1, r1, ip
 801b462:	fb03 001c 	mls	r0, r3, ip, r0
 801b466:	b283      	uxth	r3, r0
 801b468:	fb01 f303 	mul.w	r3, r1, r3
 801b46c:	58d3      	ldr	r3, [r2, r3]
 801b46e:	b90b      	cbnz	r3, 801b474 <uxr_compute_acknack+0xa0>
 801b470:	fa1f f58e 	uxth.w	r5, lr
 801b474:	454e      	cmp	r6, r9
 801b476:	d1e1      	bne.n	801b43c <uxr_compute_acknack+0x68>
 801b478:	4628      	mov	r0, r5
 801b47a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b47e:	4605      	mov	r5, r0
 801b480:	4628      	mov	r0, r5
 801b482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b486:	bf00      	nop

0801b488 <uxr_init_output_best_effort_stream>:
 801b488:	f64f 7cff 	movw	ip, #65535	; 0xffff
 801b48c:	6001      	str	r1, [r0, #0]
 801b48e:	7303      	strb	r3, [r0, #12]
 801b490:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801b494:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801b498:	4770      	bx	lr
 801b49a:	bf00      	nop

0801b49c <uxr_reset_output_best_effort_stream>:
 801b49c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b4a0:	7b03      	ldrb	r3, [r0, #12]
 801b4a2:	81c2      	strh	r2, [r0, #14]
 801b4a4:	6043      	str	r3, [r0, #4]
 801b4a6:	4770      	bx	lr

0801b4a8 <uxr_prepare_best_effort_buffer_to_write>:
 801b4a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b4aa:	4604      	mov	r4, r0
 801b4ac:	b083      	sub	sp, #12
 801b4ae:	6840      	ldr	r0, [r0, #4]
 801b4b0:	460d      	mov	r5, r1
 801b4b2:	4616      	mov	r6, r2
 801b4b4:	f7f8 f8bc 	bl	8013630 <uxr_submessage_padding>
 801b4b8:	6863      	ldr	r3, [r4, #4]
 801b4ba:	4418      	add	r0, r3
 801b4bc:	68a3      	ldr	r3, [r4, #8]
 801b4be:	1942      	adds	r2, r0, r5
 801b4c0:	4293      	cmp	r3, r2
 801b4c2:	bf2c      	ite	cs
 801b4c4:	2701      	movcs	r7, #1
 801b4c6:	2700      	movcc	r7, #0
 801b4c8:	d202      	bcs.n	801b4d0 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801b4ca:	4638      	mov	r0, r7
 801b4cc:	b003      	add	sp, #12
 801b4ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b4d0:	9000      	str	r0, [sp, #0]
 801b4d2:	2300      	movs	r3, #0
 801b4d4:	4630      	mov	r0, r6
 801b4d6:	6821      	ldr	r1, [r4, #0]
 801b4d8:	f7f6 fba2 	bl	8011c20 <ucdr_init_buffer_origin_offset>
 801b4dc:	6861      	ldr	r1, [r4, #4]
 801b4de:	4638      	mov	r0, r7
 801b4e0:	4429      	add	r1, r5
 801b4e2:	6061      	str	r1, [r4, #4]
 801b4e4:	b003      	add	sp, #12
 801b4e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b4e8 <uxr_prepare_best_effort_buffer_to_send>:
 801b4e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b4ec:	4604      	mov	r4, r0
 801b4ee:	461d      	mov	r5, r3
 801b4f0:	6840      	ldr	r0, [r0, #4]
 801b4f2:	7b23      	ldrb	r3, [r4, #12]
 801b4f4:	4298      	cmp	r0, r3
 801b4f6:	bf8c      	ite	hi
 801b4f8:	2601      	movhi	r6, #1
 801b4fa:	2600      	movls	r6, #0
 801b4fc:	d802      	bhi.n	801b504 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801b4fe:	4630      	mov	r0, r6
 801b500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b504:	4688      	mov	r8, r1
 801b506:	89e0      	ldrh	r0, [r4, #14]
 801b508:	2101      	movs	r1, #1
 801b50a:	4617      	mov	r7, r2
 801b50c:	f000 fc44 	bl	801bd98 <uxr_seq_num_add>
 801b510:	6823      	ldr	r3, [r4, #0]
 801b512:	81e0      	strh	r0, [r4, #14]
 801b514:	8028      	strh	r0, [r5, #0]
 801b516:	4630      	mov	r0, r6
 801b518:	f8c8 3000 	str.w	r3, [r8]
 801b51c:	6863      	ldr	r3, [r4, #4]
 801b51e:	603b      	str	r3, [r7, #0]
 801b520:	7b23      	ldrb	r3, [r4, #12]
 801b522:	6063      	str	r3, [r4, #4]
 801b524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b528 <on_full_output_buffer>:
 801b528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b52a:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801b52e:	460c      	mov	r4, r1
 801b530:	6803      	ldr	r3, [r0, #0]
 801b532:	4605      	mov	r5, r0
 801b534:	7b26      	ldrb	r6, [r4, #12]
 801b536:	e9d1 1200 	ldrd	r1, r2, [r1]
 801b53a:	fbb2 f2fc 	udiv	r2, r2, ip
 801b53e:	eba3 0e01 	sub.w	lr, r3, r1
 801b542:	6903      	ldr	r3, [r0, #16]
 801b544:	fbbe fef2 	udiv	lr, lr, r2
 801b548:	f10e 0e01 	add.w	lr, lr, #1
 801b54c:	fa1f fe8e 	uxth.w	lr, lr
 801b550:	fbbe f7fc 	udiv	r7, lr, ip
 801b554:	fb0c ec17 	mls	ip, ip, r7, lr
 801b558:	fa1f fc8c 	uxth.w	ip, ip
 801b55c:	fb02 fc0c 	mul.w	ip, r2, ip
 801b560:	f851 200c 	ldr.w	r2, [r1, ip]
 801b564:	44b4      	add	ip, r6
 801b566:	1b92      	subs	r2, r2, r6
 801b568:	f10c 0c08 	add.w	ip, ip, #8
 801b56c:	3a04      	subs	r2, #4
 801b56e:	4461      	add	r1, ip
 801b570:	f7f6 fb60 	bl	8011c34 <ucdr_init_buffer_origin>
 801b574:	4628      	mov	r0, r5
 801b576:	4622      	mov	r2, r4
 801b578:	4902      	ldr	r1, [pc, #8]	; (801b584 <on_full_output_buffer+0x5c>)
 801b57a:	f7f6 fb37 	bl	8011bec <ucdr_set_on_full_buffer_callback>
 801b57e:	2000      	movs	r0, #0
 801b580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b582:	bf00      	nop
 801b584:	0801b529 	.word	0x0801b529

0801b588 <uxr_init_output_reliable_stream>:
 801b588:	b530      	push	{r4, r5, lr}
 801b58a:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801b58e:	8103      	strh	r3, [r0, #8]
 801b590:	7304      	strb	r4, [r0, #12]
 801b592:	e9c0 1200 	strd	r1, r2, [r0]
 801b596:	b1e3      	cbz	r3, 801b5d2 <uxr_init_output_reliable_stream+0x4a>
 801b598:	600c      	str	r4, [r1, #0]
 801b59a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801b59e:	f1bc 0f01 	cmp.w	ip, #1
 801b5a2:	d916      	bls.n	801b5d2 <uxr_init_output_reliable_stream+0x4a>
 801b5a4:	f04f 0e01 	mov.w	lr, #1
 801b5a8:	6843      	ldr	r3, [r0, #4]
 801b5aa:	f10e 0501 	add.w	r5, lr, #1
 801b5ae:	7b04      	ldrb	r4, [r0, #12]
 801b5b0:	6801      	ldr	r1, [r0, #0]
 801b5b2:	fbbe f2fc 	udiv	r2, lr, ip
 801b5b6:	fbb3 f3fc 	udiv	r3, r3, ip
 801b5ba:	fb0c e212 	mls	r2, ip, r2, lr
 801b5be:	fa1f fe85 	uxth.w	lr, r5
 801b5c2:	b292      	uxth	r2, r2
 801b5c4:	fb02 f303 	mul.w	r3, r2, r3
 801b5c8:	50cc      	str	r4, [r1, r3]
 801b5ca:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801b5ce:	45f4      	cmp	ip, lr
 801b5d0:	d8ea      	bhi.n	801b5a8 <uxr_init_output_reliable_stream+0x20>
 801b5d2:	4b07      	ldr	r3, [pc, #28]	; (801b5f0 <uxr_init_output_reliable_stream+0x68>)
 801b5d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b5d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801b5dc:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 801b5e0:	f8c0 300e 	str.w	r3, [r0, #14]
 801b5e4:	2300      	movs	r3, #0
 801b5e6:	8242      	strh	r2, [r0, #18]
 801b5e8:	8403      	strh	r3, [r0, #32]
 801b5ea:	e9c0 4506 	strd	r4, r5, [r0, #24]
 801b5ee:	bd30      	pop	{r4, r5, pc}
 801b5f0:	ffff0000 	.word	0xffff0000
 801b5f4:	00000000 	.word	0x00000000

0801b5f8 <uxr_reset_output_reliable_stream>:
 801b5f8:	8901      	ldrh	r1, [r0, #8]
 801b5fa:	b510      	push	{r4, lr}
 801b5fc:	b1b1      	cbz	r1, 801b62c <uxr_reset_output_reliable_stream+0x34>
 801b5fe:	f04f 0e00 	mov.w	lr, #0
 801b602:	46f4      	mov	ip, lr
 801b604:	6843      	ldr	r3, [r0, #4]
 801b606:	f10e 0e01 	add.w	lr, lr, #1
 801b60a:	7b04      	ldrb	r4, [r0, #12]
 801b60c:	fbbc f2f1 	udiv	r2, ip, r1
 801b610:	fbb3 f3f1 	udiv	r3, r3, r1
 801b614:	fb01 c212 	mls	r2, r1, r2, ip
 801b618:	fa1f fc8e 	uxth.w	ip, lr
 801b61c:	b292      	uxth	r2, r2
 801b61e:	fb02 f303 	mul.w	r3, r2, r3
 801b622:	6802      	ldr	r2, [r0, #0]
 801b624:	50d4      	str	r4, [r2, r3]
 801b626:	8901      	ldrh	r1, [r0, #8]
 801b628:	4561      	cmp	r1, ip
 801b62a:	d8eb      	bhi.n	801b604 <uxr_reset_output_reliable_stream+0xc>
 801b62c:	4b08      	ldr	r3, [pc, #32]	; (801b650 <uxr_reset_output_reliable_stream+0x58>)
 801b62e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b632:	ed9f 7b05 	vldr	d7, [pc, #20]	; 801b648 <uxr_reset_output_reliable_stream+0x50>
 801b636:	f8c0 300e 	str.w	r3, [r0, #14]
 801b63a:	2300      	movs	r3, #0
 801b63c:	8242      	strh	r2, [r0, #18]
 801b63e:	8403      	strh	r3, [r0, #32]
 801b640:	ed80 7b06 	vstr	d7, [r0, #24]
 801b644:	bd10      	pop	{r4, pc}
 801b646:	bf00      	nop
 801b648:	ffffffff 	.word	0xffffffff
 801b64c:	7fffffff 	.word	0x7fffffff
 801b650:	ffff0000 	.word	0xffff0000

0801b654 <uxr_prepare_reliable_buffer_to_write>:
 801b654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b658:	4604      	mov	r4, r0
 801b65a:	b091      	sub	sp, #68	; 0x44
 801b65c:	8900      	ldrh	r0, [r0, #8]
 801b65e:	468b      	mov	fp, r1
 801b660:	89e6      	ldrh	r6, [r4, #14]
 801b662:	9204      	str	r2, [sp, #16]
 801b664:	6865      	ldr	r5, [r4, #4]
 801b666:	6823      	ldr	r3, [r4, #0]
 801b668:	f894 900c 	ldrb.w	r9, [r4, #12]
 801b66c:	fbb6 f2f0 	udiv	r2, r6, r0
 801b670:	fbb5 f5f0 	udiv	r5, r5, r0
 801b674:	fb00 6212 	mls	r2, r0, r2, r6
 801b678:	1f2f      	subs	r7, r5, #4
 801b67a:	b292      	uxth	r2, r2
 801b67c:	fb05 3202 	mla	r2, r5, r2, r3
 801b680:	1d11      	adds	r1, r2, #4
 801b682:	f8d2 8000 	ldr.w	r8, [r2]
 801b686:	9103      	str	r1, [sp, #12]
 801b688:	2800      	cmp	r0, #0
 801b68a:	f000 814a 	beq.w	801b922 <uxr_prepare_reliable_buffer_to_write+0x2ce>
 801b68e:	f04f 0c00 	mov.w	ip, #0
 801b692:	46e2      	mov	sl, ip
 801b694:	4661      	mov	r1, ip
 801b696:	f10c 0c01 	add.w	ip, ip, #1
 801b69a:	fbb1 f2f0 	udiv	r2, r1, r0
 801b69e:	fb00 1212 	mls	r2, r0, r2, r1
 801b6a2:	fa1f f18c 	uxth.w	r1, ip
 801b6a6:	b292      	uxth	r2, r2
 801b6a8:	fb05 f202 	mul.w	r2, r5, r2
 801b6ac:	589a      	ldr	r2, [r3, r2]
 801b6ae:	454a      	cmp	r2, r9
 801b6b0:	d103      	bne.n	801b6ba <uxr_prepare_reliable_buffer_to_write+0x66>
 801b6b2:	f10a 0a01 	add.w	sl, sl, #1
 801b6b6:	fa1f fa8a 	uxth.w	sl, sl
 801b6ba:	4281      	cmp	r1, r0
 801b6bc:	d3eb      	bcc.n	801b696 <uxr_prepare_reliable_buffer_to_write+0x42>
 801b6be:	4640      	mov	r0, r8
 801b6c0:	2104      	movs	r1, #4
 801b6c2:	f8cd a014 	str.w	sl, [sp, #20]
 801b6c6:	f7f6 fac1 	bl	8011c4c <ucdr_alignment>
 801b6ca:	4480      	add	r8, r0
 801b6cc:	eb08 020b 	add.w	r2, r8, fp
 801b6d0:	42ba      	cmp	r2, r7
 801b6d2:	f240 80ca 	bls.w	801b86a <uxr_prepare_reliable_buffer_to_write+0x216>
 801b6d6:	7b22      	ldrb	r2, [r4, #12]
 801b6d8:	445a      	add	r2, fp
 801b6da:	42ba      	cmp	r2, r7
 801b6dc:	f240 80b2 	bls.w	801b844 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 801b6e0:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 801b6e4:	b2bb      	uxth	r3, r7
 801b6e6:	eba2 0209 	sub.w	r2, r2, r9
 801b6ea:	441a      	add	r2, r3
 801b6ec:	b292      	uxth	r2, r2
 801b6ee:	fb0a f902 	mul.w	r9, sl, r2
 801b6f2:	9205      	str	r2, [sp, #20]
 801b6f4:	45d9      	cmp	r9, fp
 801b6f6:	9206      	str	r2, [sp, #24]
 801b6f8:	f0c0 80b3 	bcc.w	801b862 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801b6fc:	f108 0204 	add.w	r2, r8, #4
 801b700:	42ba      	cmp	r2, r7
 801b702:	f080 80da 	bcs.w	801b8ba <uxr_prepare_reliable_buffer_to_write+0x266>
 801b706:	f1a3 0904 	sub.w	r9, r3, #4
 801b70a:	9b05      	ldr	r3, [sp, #20]
 801b70c:	eba9 0908 	sub.w	r9, r9, r8
 801b710:	fa1f f989 	uxth.w	r9, r9
 801b714:	ebab 0b09 	sub.w	fp, fp, r9
 801b718:	fbbb f2f3 	udiv	r2, fp, r3
 801b71c:	fb03 b312 	mls	r3, r3, r2, fp
 801b720:	2b00      	cmp	r3, #0
 801b722:	f040 80c4 	bne.w	801b8ae <uxr_prepare_reliable_buffer_to_write+0x25a>
 801b726:	b293      	uxth	r3, r2
 801b728:	4553      	cmp	r3, sl
 801b72a:	f200 809a 	bhi.w	801b862 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801b72e:	2b00      	cmp	r3, #0
 801b730:	f000 80f9 	beq.w	801b926 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801b734:	f8cd 801c 	str.w	r8, [sp, #28]
 801b738:	f04f 0a00 	mov.w	sl, #0
 801b73c:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801b740:	f10d 0b20 	add.w	fp, sp, #32
 801b744:	9505      	str	r5, [sp, #20]
 801b746:	461d      	mov	r5, r3
 801b748:	e000      	b.n	801b74c <uxr_prepare_reliable_buffer_to_write+0xf8>
 801b74a:	46c1      	mov	r9, r8
 801b74c:	8922      	ldrh	r2, [r4, #8]
 801b74e:	4658      	mov	r0, fp
 801b750:	6863      	ldr	r3, [r4, #4]
 801b752:	f10a 0a01 	add.w	sl, sl, #1
 801b756:	fbb6 f1f2 	udiv	r1, r6, r2
 801b75a:	fbb3 f3f2 	udiv	r3, r3, r2
 801b75e:	fb02 6111 	mls	r1, r2, r1, r6
 801b762:	463a      	mov	r2, r7
 801b764:	b289      	uxth	r1, r1
 801b766:	fb03 f101 	mul.w	r1, r3, r1
 801b76a:	6823      	ldr	r3, [r4, #0]
 801b76c:	3104      	adds	r1, #4
 801b76e:	4419      	add	r1, r3
 801b770:	2300      	movs	r3, #0
 801b772:	f851 cc04 	ldr.w	ip, [r1, #-4]
 801b776:	f8cd c000 	str.w	ip, [sp]
 801b77a:	f7f6 fa51 	bl	8011c20 <ucdr_init_buffer_origin_offset>
 801b77e:	464a      	mov	r2, r9
 801b780:	2300      	movs	r3, #0
 801b782:	210d      	movs	r1, #13
 801b784:	4658      	mov	r0, fp
 801b786:	f7f7 ff13 	bl	80135b0 <uxr_buffer_submessage_header>
 801b78a:	8921      	ldrh	r1, [r4, #8]
 801b78c:	6863      	ldr	r3, [r4, #4]
 801b78e:	4630      	mov	r0, r6
 801b790:	fbb6 f2f1 	udiv	r2, r6, r1
 801b794:	fbb3 f3f1 	udiv	r3, r3, r1
 801b798:	fb01 6212 	mls	r2, r1, r2, r6
 801b79c:	2101      	movs	r1, #1
 801b79e:	b292      	uxth	r2, r2
 801b7a0:	fb02 f303 	mul.w	r3, r2, r3
 801b7a4:	6822      	ldr	r2, [r4, #0]
 801b7a6:	50d7      	str	r7, [r2, r3]
 801b7a8:	f000 faf6 	bl	801bd98 <uxr_seq_num_add>
 801b7ac:	4606      	mov	r6, r0
 801b7ae:	fa1f f38a 	uxth.w	r3, sl
 801b7b2:	429d      	cmp	r5, r3
 801b7b4:	d8c9      	bhi.n	801b74a <uxr_prepare_reliable_buffer_to_write+0xf6>
 801b7b6:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801b7ba:	9d05      	ldr	r5, [sp, #20]
 801b7bc:	8920      	ldrh	r0, [r4, #8]
 801b7be:	463a      	mov	r2, r7
 801b7c0:	6863      	ldr	r3, [r4, #4]
 801b7c2:	fbb6 f1f0 	udiv	r1, r6, r0
 801b7c6:	fbb3 f3f0 	udiv	r3, r3, r0
 801b7ca:	fb00 6111 	mls	r1, r0, r1, r6
 801b7ce:	4658      	mov	r0, fp
 801b7d0:	b289      	uxth	r1, r1
 801b7d2:	fb01 f303 	mul.w	r3, r1, r3
 801b7d6:	6821      	ldr	r1, [r4, #0]
 801b7d8:	3304      	adds	r3, #4
 801b7da:	4419      	add	r1, r3
 801b7dc:	2300      	movs	r3, #0
 801b7de:	f851 7c04 	ldr.w	r7, [r1, #-4]
 801b7e2:	9700      	str	r7, [sp, #0]
 801b7e4:	f7f6 fa1c 	bl	8011c20 <ucdr_init_buffer_origin_offset>
 801b7e8:	9f06      	ldr	r7, [sp, #24]
 801b7ea:	4658      	mov	r0, fp
 801b7ec:	2302      	movs	r3, #2
 801b7ee:	b2ba      	uxth	r2, r7
 801b7f0:	210d      	movs	r1, #13
 801b7f2:	f7f7 fedd 	bl	80135b0 <uxr_buffer_submessage_header>
 801b7f6:	f108 0104 	add.w	r1, r8, #4
 801b7fa:	9b03      	ldr	r3, [sp, #12]
 801b7fc:	f1a5 0208 	sub.w	r2, r5, #8
 801b800:	8925      	ldrh	r5, [r4, #8]
 801b802:	440b      	add	r3, r1
 801b804:	eba2 0208 	sub.w	r2, r2, r8
 801b808:	fbb6 f0f5 	udiv	r0, r6, r5
 801b80c:	4619      	mov	r1, r3
 801b80e:	6863      	ldr	r3, [r4, #4]
 801b810:	fb05 6010 	mls	r0, r5, r0, r6
 801b814:	fbb3 f3f5 	udiv	r3, r3, r5
 801b818:	b280      	uxth	r0, r0
 801b81a:	6825      	ldr	r5, [r4, #0]
 801b81c:	fb00 f303 	mul.w	r3, r0, r3
 801b820:	7b20      	ldrb	r0, [r4, #12]
 801b822:	3004      	adds	r0, #4
 801b824:	4438      	add	r0, r7
 801b826:	50e8      	str	r0, [r5, r3]
 801b828:	9d04      	ldr	r5, [sp, #16]
 801b82a:	4628      	mov	r0, r5
 801b82c:	f7f6 fa0a 	bl	8011c44 <ucdr_init_buffer>
 801b830:	4628      	mov	r0, r5
 801b832:	4622      	mov	r2, r4
 801b834:	493d      	ldr	r1, [pc, #244]	; (801b92c <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801b836:	f7f6 f9d9 	bl	8011bec <ucdr_set_on_full_buffer_callback>
 801b83a:	2001      	movs	r0, #1
 801b83c:	81e6      	strh	r6, [r4, #14]
 801b83e:	b011      	add	sp, #68	; 0x44
 801b840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b844:	2101      	movs	r1, #1
 801b846:	89e0      	ldrh	r0, [r4, #14]
 801b848:	f000 faa6 	bl	801bd98 <uxr_seq_num_add>
 801b84c:	4605      	mov	r5, r0
 801b84e:	8921      	ldrh	r1, [r4, #8]
 801b850:	8a60      	ldrh	r0, [r4, #18]
 801b852:	f000 faa1 	bl	801bd98 <uxr_seq_num_add>
 801b856:	4601      	mov	r1, r0
 801b858:	4628      	mov	r0, r5
 801b85a:	f000 faa5 	bl	801bda8 <uxr_seq_num_cmp>
 801b85e:	2800      	cmp	r0, #0
 801b860:	dd44      	ble.n	801b8ec <uxr_prepare_reliable_buffer_to_write+0x298>
 801b862:	2000      	movs	r0, #0
 801b864:	b011      	add	sp, #68	; 0x44
 801b866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b86a:	8921      	ldrh	r1, [r4, #8]
 801b86c:	8a60      	ldrh	r0, [r4, #18]
 801b86e:	9205      	str	r2, [sp, #20]
 801b870:	f000 fa92 	bl	801bd98 <uxr_seq_num_add>
 801b874:	4601      	mov	r1, r0
 801b876:	4630      	mov	r0, r6
 801b878:	f000 fa96 	bl	801bda8 <uxr_seq_num_cmp>
 801b87c:	2800      	cmp	r0, #0
 801b87e:	9a05      	ldr	r2, [sp, #20]
 801b880:	dcef      	bgt.n	801b862 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801b882:	8925      	ldrh	r5, [r4, #8]
 801b884:	e9d4 7300 	ldrd	r7, r3, [r4]
 801b888:	fbb6 f4f5 	udiv	r4, r6, r5
 801b88c:	fbb3 f3f5 	udiv	r3, r3, r5
 801b890:	fb05 6414 	mls	r4, r5, r4, r6
 801b894:	b2a4      	uxth	r4, r4
 801b896:	fb04 f303 	mul.w	r3, r4, r3
 801b89a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801b89e:	50fa      	str	r2, [r7, r3]
 801b8a0:	2300      	movs	r3, #0
 801b8a2:	f8cd 8000 	str.w	r8, [sp]
 801b8a6:	f7f6 f9bb 	bl	8011c20 <ucdr_init_buffer_origin_offset>
 801b8aa:	2001      	movs	r0, #1
 801b8ac:	e7da      	b.n	801b864 <uxr_prepare_reliable_buffer_to_write+0x210>
 801b8ae:	3201      	adds	r2, #1
 801b8b0:	9306      	str	r3, [sp, #24]
 801b8b2:	b293      	uxth	r3, r2
 801b8b4:	4553      	cmp	r3, sl
 801b8b6:	d8d4      	bhi.n	801b862 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801b8b8:	e739      	b.n	801b72e <uxr_prepare_reliable_buffer_to_write+0xda>
 801b8ba:	4630      	mov	r0, r6
 801b8bc:	2101      	movs	r1, #1
 801b8be:	9307      	str	r3, [sp, #28]
 801b8c0:	f000 fa6a 	bl	801bd98 <uxr_seq_num_add>
 801b8c4:	4606      	mov	r6, r0
 801b8c6:	8920      	ldrh	r0, [r4, #8]
 801b8c8:	6862      	ldr	r2, [r4, #4]
 801b8ca:	fbb6 f1f0 	udiv	r1, r6, r0
 801b8ce:	fbb2 f2f0 	udiv	r2, r2, r0
 801b8d2:	fb00 6111 	mls	r1, r0, r1, r6
 801b8d6:	b289      	uxth	r1, r1
 801b8d8:	fb01 f202 	mul.w	r2, r1, r2
 801b8dc:	6821      	ldr	r1, [r4, #0]
 801b8de:	3204      	adds	r2, #4
 801b8e0:	188b      	adds	r3, r1, r2
 801b8e2:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801b8e6:	9303      	str	r3, [sp, #12]
 801b8e8:	9b07      	ldr	r3, [sp, #28]
 801b8ea:	e70c      	b.n	801b706 <uxr_prepare_reliable_buffer_to_write+0xb2>
 801b8ec:	8921      	ldrh	r1, [r4, #8]
 801b8ee:	6863      	ldr	r3, [r4, #4]
 801b8f0:	9804      	ldr	r0, [sp, #16]
 801b8f2:	fbb5 f2f1 	udiv	r2, r5, r1
 801b8f6:	fbb3 f3f1 	udiv	r3, r3, r1
 801b8fa:	fb01 5212 	mls	r2, r1, r2, r5
 801b8fe:	6821      	ldr	r1, [r4, #0]
 801b900:	b292      	uxth	r2, r2
 801b902:	fb02 f303 	mul.w	r3, r2, r3
 801b906:	7b22      	ldrb	r2, [r4, #12]
 801b908:	3304      	adds	r3, #4
 801b90a:	445a      	add	r2, fp
 801b90c:	4419      	add	r1, r3
 801b90e:	f841 2c04 	str.w	r2, [r1, #-4]
 801b912:	7b23      	ldrb	r3, [r4, #12]
 801b914:	9300      	str	r3, [sp, #0]
 801b916:	2300      	movs	r3, #0
 801b918:	f7f6 f982 	bl	8011c20 <ucdr_init_buffer_origin_offset>
 801b91c:	2001      	movs	r0, #1
 801b91e:	81e5      	strh	r5, [r4, #14]
 801b920:	e7a0      	b.n	801b864 <uxr_prepare_reliable_buffer_to_write+0x210>
 801b922:	4682      	mov	sl, r0
 801b924:	e6cb      	b.n	801b6be <uxr_prepare_reliable_buffer_to_write+0x6a>
 801b926:	f10d 0b20 	add.w	fp, sp, #32
 801b92a:	e747      	b.n	801b7bc <uxr_prepare_reliable_buffer_to_write+0x168>
 801b92c:	0801b529 	.word	0x0801b529

0801b930 <uxr_prepare_next_reliable_buffer_to_send>:
 801b930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b932:	4604      	mov	r4, r0
 801b934:	461d      	mov	r5, r3
 801b936:	460f      	mov	r7, r1
 801b938:	8a00      	ldrh	r0, [r0, #16]
 801b93a:	2101      	movs	r1, #1
 801b93c:	4616      	mov	r6, r2
 801b93e:	f000 fa2b 	bl	801bd98 <uxr_seq_num_add>
 801b942:	8028      	strh	r0, [r5, #0]
 801b944:	8922      	ldrh	r2, [r4, #8]
 801b946:	6863      	ldr	r3, [r4, #4]
 801b948:	fbb0 f1f2 	udiv	r1, r0, r2
 801b94c:	fbb3 f3f2 	udiv	r3, r3, r2
 801b950:	fb02 0c11 	mls	ip, r2, r1, r0
 801b954:	89e1      	ldrh	r1, [r4, #14]
 801b956:	fa1f fc8c 	uxth.w	ip, ip
 801b95a:	fb0c fc03 	mul.w	ip, ip, r3
 801b95e:	6823      	ldr	r3, [r4, #0]
 801b960:	f10c 0c04 	add.w	ip, ip, #4
 801b964:	4463      	add	r3, ip
 801b966:	603b      	str	r3, [r7, #0]
 801b968:	6823      	ldr	r3, [r4, #0]
 801b96a:	449c      	add	ip, r3
 801b96c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801b970:	6033      	str	r3, [r6, #0]
 801b972:	f000 fa19 	bl	801bda8 <uxr_seq_num_cmp>
 801b976:	2800      	cmp	r0, #0
 801b978:	dd01      	ble.n	801b97e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801b97a:	2000      	movs	r0, #0
 801b97c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b97e:	7b23      	ldrb	r3, [r4, #12]
 801b980:	6832      	ldr	r2, [r6, #0]
 801b982:	429a      	cmp	r2, r3
 801b984:	d9f9      	bls.n	801b97a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801b986:	8a61      	ldrh	r1, [r4, #18]
 801b988:	8a20      	ldrh	r0, [r4, #16]
 801b98a:	f000 fa09 	bl	801bda0 <uxr_seq_num_sub>
 801b98e:	8923      	ldrh	r3, [r4, #8]
 801b990:	4283      	cmp	r3, r0
 801b992:	d0f2      	beq.n	801b97a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801b994:	8828      	ldrh	r0, [r5, #0]
 801b996:	89e3      	ldrh	r3, [r4, #14]
 801b998:	8220      	strh	r0, [r4, #16]
 801b99a:	4298      	cmp	r0, r3
 801b99c:	d001      	beq.n	801b9a2 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801b99e:	2001      	movs	r0, #1
 801b9a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b9a2:	2101      	movs	r1, #1
 801b9a4:	f000 f9f8 	bl	801bd98 <uxr_seq_num_add>
 801b9a8:	4603      	mov	r3, r0
 801b9aa:	2001      	movs	r0, #1
 801b9ac:	81e3      	strh	r3, [r4, #14]
 801b9ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801b9b0 <uxr_update_output_stream_heartbeat_timestamp>:
 801b9b0:	b570      	push	{r4, r5, r6, lr}
 801b9b2:	8a01      	ldrh	r1, [r0, #16]
 801b9b4:	4604      	mov	r4, r0
 801b9b6:	8a40      	ldrh	r0, [r0, #18]
 801b9b8:	4615      	mov	r5, r2
 801b9ba:	461e      	mov	r6, r3
 801b9bc:	f000 f9f4 	bl	801bda8 <uxr_seq_num_cmp>
 801b9c0:	2800      	cmp	r0, #0
 801b9c2:	db07      	blt.n	801b9d4 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801b9c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b9c8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801b9cc:	2000      	movs	r0, #0
 801b9ce:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801b9d2:	bd70      	pop	{r4, r5, r6, pc}
 801b9d4:	f894 0020 	ldrb.w	r0, [r4, #32]
 801b9d8:	b940      	cbnz	r0, 801b9ec <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801b9da:	2301      	movs	r3, #1
 801b9dc:	f884 3020 	strb.w	r3, [r4, #32]
 801b9e0:	3564      	adds	r5, #100	; 0x64
 801b9e2:	f146 0600 	adc.w	r6, r6, #0
 801b9e6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801b9ea:	bd70      	pop	{r4, r5, r6, pc}
 801b9ec:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801b9f0:	4295      	cmp	r5, r2
 801b9f2:	eb76 0303 	sbcs.w	r3, r6, r3
 801b9f6:	db04      	blt.n	801ba02 <uxr_update_output_stream_heartbeat_timestamp+0x52>
 801b9f8:	1c43      	adds	r3, r0, #1
 801b9fa:	2001      	movs	r0, #1
 801b9fc:	f884 3020 	strb.w	r3, [r4, #32]
 801ba00:	e7ee      	b.n	801b9e0 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801ba02:	2000      	movs	r0, #0
 801ba04:	e7ec      	b.n	801b9e0 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801ba06:	bf00      	nop

0801ba08 <uxr_begin_output_nack_buffer_it>:
 801ba08:	8a40      	ldrh	r0, [r0, #18]
 801ba0a:	4770      	bx	lr

0801ba0c <uxr_next_reliable_nack_buffer_to_send>:
 801ba0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ba10:	f890 7021 	ldrb.w	r7, [r0, #33]	; 0x21
 801ba14:	b197      	cbz	r7, 801ba3c <uxr_next_reliable_nack_buffer_to_send+0x30>
 801ba16:	4680      	mov	r8, r0
 801ba18:	460d      	mov	r5, r1
 801ba1a:	4616      	mov	r6, r2
 801ba1c:	461c      	mov	r4, r3
 801ba1e:	8818      	ldrh	r0, [r3, #0]
 801ba20:	2101      	movs	r1, #1
 801ba22:	f000 f9b9 	bl	801bd98 <uxr_seq_num_add>
 801ba26:	8020      	strh	r0, [r4, #0]
 801ba28:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 801ba2c:	f000 f9bc 	bl	801bda8 <uxr_seq_num_cmp>
 801ba30:	2800      	cmp	r0, #0
 801ba32:	dd06      	ble.n	801ba42 <uxr_next_reliable_nack_buffer_to_send+0x36>
 801ba34:	2300      	movs	r3, #0
 801ba36:	461f      	mov	r7, r3
 801ba38:	f888 3021 	strb.w	r3, [r8, #33]	; 0x21
 801ba3c:	4638      	mov	r0, r7
 801ba3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ba42:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 801ba46:	8820      	ldrh	r0, [r4, #0]
 801ba48:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801ba4c:	fbb0 f3f2 	udiv	r3, r0, r2
 801ba50:	fbb1 fcf2 	udiv	ip, r1, r2
 801ba54:	fb02 0313 	mls	r3, r2, r3, r0
 801ba58:	b29b      	uxth	r3, r3
 801ba5a:	fb03 fc0c 	mul.w	ip, r3, ip
 801ba5e:	f8d8 3000 	ldr.w	r3, [r8]
 801ba62:	f10c 0c04 	add.w	ip, ip, #4
 801ba66:	4463      	add	r3, ip
 801ba68:	602b      	str	r3, [r5, #0]
 801ba6a:	f8d8 3000 	ldr.w	r3, [r8]
 801ba6e:	4463      	add	r3, ip
 801ba70:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801ba74:	6033      	str	r3, [r6, #0]
 801ba76:	f898 200c 	ldrb.w	r2, [r8, #12]
 801ba7a:	429a      	cmp	r2, r3
 801ba7c:	d0d0      	beq.n	801ba20 <uxr_next_reliable_nack_buffer_to_send+0x14>
 801ba7e:	e7dd      	b.n	801ba3c <uxr_next_reliable_nack_buffer_to_send+0x30>

0801ba80 <uxr_process_acknack>:
 801ba80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ba82:	4604      	mov	r4, r0
 801ba84:	460e      	mov	r6, r1
 801ba86:	4610      	mov	r0, r2
 801ba88:	2101      	movs	r1, #1
 801ba8a:	f000 f989 	bl	801bda0 <uxr_seq_num_sub>
 801ba8e:	8a61      	ldrh	r1, [r4, #18]
 801ba90:	f000 f986 	bl	801bda0 <uxr_seq_num_sub>
 801ba94:	b1c8      	cbz	r0, 801baca <uxr_process_acknack+0x4a>
 801ba96:	4605      	mov	r5, r0
 801ba98:	2700      	movs	r7, #0
 801ba9a:	2101      	movs	r1, #1
 801ba9c:	8a60      	ldrh	r0, [r4, #18]
 801ba9e:	f000 f97b 	bl	801bd98 <uxr_seq_num_add>
 801baa2:	8923      	ldrh	r3, [r4, #8]
 801baa4:	6862      	ldr	r2, [r4, #4]
 801baa6:	3701      	adds	r7, #1
 801baa8:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801baac:	6821      	ldr	r1, [r4, #0]
 801baae:	42bd      	cmp	r5, r7
 801bab0:	8260      	strh	r0, [r4, #18]
 801bab2:	fbb0 fef3 	udiv	lr, r0, r3
 801bab6:	fbb2 f2f3 	udiv	r2, r2, r3
 801baba:	fb03 031e 	mls	r3, r3, lr, r0
 801babe:	b29b      	uxth	r3, r3
 801bac0:	fb02 f303 	mul.w	r3, r2, r3
 801bac4:	f841 c003 	str.w	ip, [r1, r3]
 801bac8:	d1e7      	bne.n	801ba9a <uxr_process_acknack+0x1a>
 801baca:	3e00      	subs	r6, #0
 801bacc:	f04f 0300 	mov.w	r3, #0
 801bad0:	bf18      	it	ne
 801bad2:	2601      	movne	r6, #1
 801bad4:	f884 3020 	strb.w	r3, [r4, #32]
 801bad8:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 801badc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bade:	bf00      	nop

0801bae0 <uxr_is_output_up_to_date>:
 801bae0:	8a01      	ldrh	r1, [r0, #16]
 801bae2:	8a40      	ldrh	r0, [r0, #18]
 801bae4:	b508      	push	{r3, lr}
 801bae6:	f000 f95f 	bl	801bda8 <uxr_seq_num_cmp>
 801baea:	fab0 f080 	clz	r0, r0
 801baee:	0940      	lsrs	r0, r0, #5
 801baf0:	bd08      	pop	{r3, pc}
 801baf2:	bf00      	nop

0801baf4 <get_available_free_slots>:
 801baf4:	8901      	ldrh	r1, [r0, #8]
 801baf6:	b1e1      	cbz	r1, 801bb32 <get_available_free_slots+0x3e>
 801baf8:	6843      	ldr	r3, [r0, #4]
 801bafa:	f04f 0c00 	mov.w	ip, #0
 801bafe:	b530      	push	{r4, r5, lr}
 801bb00:	fbb3 fef1 	udiv	lr, r3, r1
 801bb04:	6805      	ldr	r5, [r0, #0]
 801bb06:	4662      	mov	r2, ip
 801bb08:	7b04      	ldrb	r4, [r0, #12]
 801bb0a:	4660      	mov	r0, ip
 801bb0c:	f10c 0c01 	add.w	ip, ip, #1
 801bb10:	fbb2 f3f1 	udiv	r3, r2, r1
 801bb14:	fb01 2313 	mls	r3, r1, r3, r2
 801bb18:	fa1f f28c 	uxth.w	r2, ip
 801bb1c:	b29b      	uxth	r3, r3
 801bb1e:	fb0e f303 	mul.w	r3, lr, r3
 801bb22:	58eb      	ldr	r3, [r5, r3]
 801bb24:	429c      	cmp	r4, r3
 801bb26:	d101      	bne.n	801bb2c <get_available_free_slots+0x38>
 801bb28:	3001      	adds	r0, #1
 801bb2a:	b280      	uxth	r0, r0
 801bb2c:	428a      	cmp	r2, r1
 801bb2e:	d3ed      	bcc.n	801bb0c <get_available_free_slots+0x18>
 801bb30:	bd30      	pop	{r4, r5, pc}
 801bb32:	4608      	mov	r0, r1
 801bb34:	4770      	bx	lr
 801bb36:	bf00      	nop

0801bb38 <uxr_buffer_request_data>:
 801bb38:	b530      	push	{r4, r5, lr}
 801bb3a:	b095      	sub	sp, #84	; 0x54
 801bb3c:	4604      	mov	r4, r0
 801bb3e:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801bb40:	9303      	str	r3, [sp, #12]
 801bb42:	2d00      	cmp	r5, #0
 801bb44:	f88d 301c 	strb.w	r3, [sp, #28]
 801bb48:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801bb4c:	f04f 0200 	mov.w	r2, #0
 801bb50:	bf14      	ite	ne
 801bb52:	2101      	movne	r1, #1
 801bb54:	4611      	moveq	r1, r2
 801bb56:	f88d 201d 	strb.w	r2, [sp, #29]
 801bb5a:	f88d 201e 	strb.w	r2, [sp, #30]
 801bb5e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801bb62:	d021      	beq.n	801bba8 <uxr_buffer_request_data+0x70>
 801bb64:	686b      	ldr	r3, [r5, #4]
 801bb66:	2210      	movs	r2, #16
 801bb68:	6829      	ldr	r1, [r5, #0]
 801bb6a:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 801bb6e:	f8cd 1026 	str.w	r1, [sp, #38]	; 0x26
 801bb72:	2308      	movs	r3, #8
 801bb74:	2100      	movs	r1, #0
 801bb76:	4620      	mov	r0, r4
 801bb78:	e9cd 3100 	strd	r3, r1, [sp]
 801bb7c:	ab0c      	add	r3, sp, #48	; 0x30
 801bb7e:	9905      	ldr	r1, [sp, #20]
 801bb80:	f7f7 fa6a 	bl	8013058 <uxr_prepare_stream_to_write_submessage>
 801bb84:	b918      	cbnz	r0, 801bb8e <uxr_buffer_request_data+0x56>
 801bb86:	4604      	mov	r4, r0
 801bb88:	4620      	mov	r0, r4
 801bb8a:	b015      	add	sp, #84	; 0x54
 801bb8c:	bd30      	pop	{r4, r5, pc}
 801bb8e:	9904      	ldr	r1, [sp, #16]
 801bb90:	aa06      	add	r2, sp, #24
 801bb92:	4620      	mov	r0, r4
 801bb94:	f7f7 fb9c 	bl	80132d0 <uxr_init_base_object_request>
 801bb98:	4604      	mov	r4, r0
 801bb9a:	a906      	add	r1, sp, #24
 801bb9c:	a80c      	add	r0, sp, #48	; 0x30
 801bb9e:	f7f8 fecf 	bl	8014940 <uxr_serialize_READ_DATA_Payload>
 801bba2:	4620      	mov	r0, r4
 801bba4:	b015      	add	sp, #84	; 0x54
 801bba6:	bd30      	pop	{r4, r5, pc}
 801bba8:	2208      	movs	r2, #8
 801bbaa:	e7e2      	b.n	801bb72 <uxr_buffer_request_data+0x3a>

0801bbac <uxr_buffer_cancel_data>:
 801bbac:	b510      	push	{r4, lr}
 801bbae:	2300      	movs	r3, #0
 801bbb0:	b094      	sub	sp, #80	; 0x50
 801bbb2:	4604      	mov	r4, r0
 801bbb4:	9205      	str	r2, [sp, #20]
 801bbb6:	9301      	str	r3, [sp, #4]
 801bbb8:	f8ad 301c 	strh.w	r3, [sp, #28]
 801bbbc:	f88d 301e 	strb.w	r3, [sp, #30]
 801bbc0:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 801bbc4:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 801bbc8:	2308      	movs	r3, #8
 801bbca:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801bbce:	2201      	movs	r2, #1
 801bbd0:	9300      	str	r3, [sp, #0]
 801bbd2:	ab0c      	add	r3, sp, #48	; 0x30
 801bbd4:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 801bbd8:	2210      	movs	r2, #16
 801bbda:	f7f7 fa3d 	bl	8013058 <uxr_prepare_stream_to_write_submessage>
 801bbde:	b918      	cbnz	r0, 801bbe8 <uxr_buffer_cancel_data+0x3c>
 801bbe0:	4604      	mov	r4, r0
 801bbe2:	4620      	mov	r0, r4
 801bbe4:	b014      	add	sp, #80	; 0x50
 801bbe6:	bd10      	pop	{r4, pc}
 801bbe8:	9905      	ldr	r1, [sp, #20]
 801bbea:	aa06      	add	r2, sp, #24
 801bbec:	4620      	mov	r0, r4
 801bbee:	f7f7 fb6f 	bl	80132d0 <uxr_init_base_object_request>
 801bbf2:	4604      	mov	r4, r0
 801bbf4:	a906      	add	r1, sp, #24
 801bbf6:	a80c      	add	r0, sp, #48	; 0x30
 801bbf8:	f7f8 fea2 	bl	8014940 <uxr_serialize_READ_DATA_Payload>
 801bbfc:	4620      	mov	r0, r4
 801bbfe:	b014      	add	sp, #80	; 0x50
 801bc00:	bd10      	pop	{r4, pc}
 801bc02:	bf00      	nop

0801bc04 <read_submessage_format>:
 801bc04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bc08:	b095      	sub	sp, #84	; 0x54
 801bc0a:	f8bd 7078 	ldrh.w	r7, [sp, #120]	; 0x78
 801bc0e:	b113      	cbz	r3, 801bc16 <read_submessage_format+0x12>
 801bc10:	b015      	add	sp, #84	; 0x54
 801bc12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bc16:	4606      	mov	r6, r0
 801bc18:	981c      	ldr	r0, [sp, #112]	; 0x70
 801bc1a:	460c      	mov	r4, r1
 801bc1c:	4615      	mov	r5, r2
 801bc1e:	9004      	str	r0, [sp, #16]
 801bc20:	4699      	mov	r9, r3
 801bc22:	981d      	ldr	r0, [sp, #116]	; 0x74
 801bc24:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 801bc28:	9005      	str	r0, [sp, #20]
 801bc2a:	a80c      	add	r0, sp, #48	; 0x30
 801bc2c:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801bc30:	1a52      	subs	r2, r2, r1
 801bc32:	f7f6 f807 	bl	8011c44 <ucdr_init_buffer>
 801bc36:	a80c      	add	r0, sp, #48	; 0x30
 801bc38:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801bc3c:	f7f5 ffd6 	bl	8011bec <ucdr_set_on_full_buffer_callback>
 801bc40:	69e2      	ldr	r2, [r4, #28]
 801bc42:	b19a      	cbz	r2, 801bc6c <read_submessage_format+0x68>
 801bc44:	f1b8 0f07 	cmp.w	r8, #7
 801bc48:	f882 9014 	strb.w	r9, [r2, #20]
 801bc4c:	d040      	beq.n	801bcd0 <read_submessage_format+0xcc>
 801bc4e:	f1b8 0f08 	cmp.w	r8, #8
 801bc52:	d02e      	beq.n	801bcb2 <read_submessage_format+0xae>
 801bc54:	f1b8 0f06 	cmp.w	r8, #6
 801bc58:	d011      	beq.n	801bc7e <read_submessage_format+0x7a>
 801bc5a:	2301      	movs	r3, #1
 801bc5c:	7513      	strb	r3, [r2, #20]
 801bc5e:	4629      	mov	r1, r5
 801bc60:	4620      	mov	r0, r4
 801bc62:	f7f6 f843 	bl	8011cec <ucdr_advance_buffer>
 801bc66:	b015      	add	sp, #84	; 0x54
 801bc68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bc6c:	f1b8 0f07 	cmp.w	r8, #7
 801bc70:	d02e      	beq.n	801bcd0 <read_submessage_format+0xcc>
 801bc72:	f1b8 0f08 	cmp.w	r8, #8
 801bc76:	d01c      	beq.n	801bcb2 <read_submessage_format+0xae>
 801bc78:	f1b8 0f06 	cmp.w	r8, #6
 801bc7c:	d1ef      	bne.n	801bc5e <read_submessage_format+0x5a>
 801bc7e:	f8d6 8088 	ldr.w	r8, [r6, #136]	; 0x88
 801bc82:	f1b8 0f00 	cmp.w	r8, #0
 801bc86:	d011      	beq.n	801bcac <read_submessage_format+0xa8>
 801bc88:	ab0c      	add	r3, sp, #48	; 0x30
 801bc8a:	9501      	str	r5, [sp, #4]
 801bc8c:	463a      	mov	r2, r7
 801bc8e:	4630      	mov	r0, r6
 801bc90:	9300      	str	r3, [sp, #0]
 801bc92:	2306      	movs	r3, #6
 801bc94:	f88d 3016 	strb.w	r3, [sp, #22]
 801bc98:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 801bc9c:	9302      	str	r3, [sp, #8]
 801bc9e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801bca2:	47c0      	blx	r8
 801bca4:	2301      	movs	r3, #1
 801bca6:	69e2      	ldr	r2, [r4, #28]
 801bca8:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 801bcac:	2a00      	cmp	r2, #0
 801bcae:	d1d4      	bne.n	801bc5a <read_submessage_format+0x56>
 801bcb0:	e7d5      	b.n	801bc5e <read_submessage_format+0x5a>
 801bcb2:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 801bcb6:	2b00      	cmp	r3, #0
 801bcb8:	d0f8      	beq.n	801bcac <read_submessage_format+0xa8>
 801bcba:	a80c      	add	r0, sp, #48	; 0x30
 801bcbc:	a906      	add	r1, sp, #24
 801bcbe:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801bcc2:	f7f8 ff09 	bl	8014ad8 <uxr_deserialize_SampleIdentity>
 801bcc6:	b9a0      	cbnz	r0, 801bcf2 <read_submessage_format+0xee>
 801bcc8:	69e2      	ldr	r2, [r4, #28]
 801bcca:	2a00      	cmp	r2, #0
 801bccc:	d1c5      	bne.n	801bc5a <read_submessage_format+0x56>
 801bcce:	e7c6      	b.n	801bc5e <read_submessage_format+0x5a>
 801bcd0:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 801bcd4:	b13b      	cbz	r3, 801bce6 <read_submessage_format+0xe2>
 801bcd6:	a906      	add	r1, sp, #24
 801bcd8:	a80c      	add	r0, sp, #48	; 0x30
 801bcda:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801bcde:	f7f8 fbcf 	bl	8014480 <uxr_deserialize_BaseObjectRequest>
 801bce2:	bb60      	cbnz	r0, 801bd3e <read_submessage_format+0x13a>
 801bce4:	69e2      	ldr	r2, [r4, #28]
 801bce6:	68a3      	ldr	r3, [r4, #8]
 801bce8:	442b      	add	r3, r5
 801bcea:	60a3      	str	r3, [r4, #8]
 801bcec:	2a00      	cmp	r2, #0
 801bcee:	d1b4      	bne.n	801bc5a <read_submessage_format+0x56>
 801bcf0:	e7b5      	b.n	801bc5e <read_submessage_format+0x5a>
 801bcf2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bcf4:	a80c      	add	r0, sp, #48	; 0x30
 801bcf6:	eba8 0803 	sub.w	r8, r8, r3
 801bcfa:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801bcfe:	44a8      	add	r8, r5
 801bd00:	1a52      	subs	r2, r2, r1
 801bd02:	f7f5 ff9f 	bl	8011c44 <ucdr_init_buffer>
 801bd06:	a80c      	add	r0, sp, #48	; 0x30
 801bd08:	fa1f f888 	uxth.w	r8, r8
 801bd0c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801bd10:	f7f5 ff6c 	bl	8011bec <ucdr_set_on_full_buffer_callback>
 801bd14:	ab0c      	add	r3, sp, #48	; 0x30
 801bd16:	2108      	movs	r1, #8
 801bd18:	f8cd 8004 	str.w	r8, [sp, #4]
 801bd1c:	9300      	str	r3, [sp, #0]
 801bd1e:	463a      	mov	r2, r7
 801bd20:	f88d 1016 	strb.w	r1, [sp, #22]
 801bd24:	ab06      	add	r3, sp, #24
 801bd26:	f8d6 10a8 	ldr.w	r1, [r6, #168]	; 0xa8
 801bd2a:	4630      	mov	r0, r6
 801bd2c:	9102      	str	r1, [sp, #8]
 801bd2e:	9905      	ldr	r1, [sp, #20]
 801bd30:	f8d6 70a4 	ldr.w	r7, [r6, #164]	; 0xa4
 801bd34:	47b8      	blx	r7
 801bd36:	2301      	movs	r3, #1
 801bd38:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 801bd3c:	e7c4      	b.n	801bcc8 <read_submessage_format+0xc4>
 801bd3e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801bd42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bd44:	a80c      	add	r0, sp, #48	; 0x30
 801bd46:	1a52      	subs	r2, r2, r1
 801bd48:	eba8 0803 	sub.w	r8, r8, r3
 801bd4c:	f7f5 ff7a 	bl	8011c44 <ucdr_init_buffer>
 801bd50:	a80c      	add	r0, sp, #48	; 0x30
 801bd52:	44a8      	add	r8, r5
 801bd54:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801bd58:	f7f5 ff48 	bl	8011bec <ucdr_set_on_full_buffer_callback>
 801bd5c:	ab0c      	add	r3, sp, #48	; 0x30
 801bd5e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801bd62:	fa1f f888 	uxth.w	r8, r8
 801bd66:	9300      	str	r3, [sp, #0]
 801bd68:	463a      	mov	r2, r7
 801bd6a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801bd6e:	4630      	mov	r0, r6
 801bd70:	f8cd 8004 	str.w	r8, [sp, #4]
 801bd74:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801bd78:	2107      	movs	r1, #7
 801bd7a:	f88d 1016 	strb.w	r1, [sp, #22]
 801bd7e:	b29b      	uxth	r3, r3
 801bd80:	f8d6 10b0 	ldr.w	r1, [r6, #176]	; 0xb0
 801bd84:	9102      	str	r1, [sp, #8]
 801bd86:	9905      	ldr	r1, [sp, #20]
 801bd88:	f8d6 70ac 	ldr.w	r7, [r6, #172]	; 0xac
 801bd8c:	47b8      	blx	r7
 801bd8e:	2301      	movs	r3, #1
 801bd90:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 801bd94:	e7a6      	b.n	801bce4 <read_submessage_format+0xe0>
 801bd96:	bf00      	nop

0801bd98 <uxr_seq_num_add>:
 801bd98:	4408      	add	r0, r1
 801bd9a:	b280      	uxth	r0, r0
 801bd9c:	4770      	bx	lr
 801bd9e:	bf00      	nop

0801bda0 <uxr_seq_num_sub>:
 801bda0:	1a40      	subs	r0, r0, r1
 801bda2:	b280      	uxth	r0, r0
 801bda4:	4770      	bx	lr
 801bda6:	bf00      	nop

0801bda8 <uxr_seq_num_cmp>:
 801bda8:	4288      	cmp	r0, r1
 801bdaa:	d011      	beq.n	801bdd0 <uxr_seq_num_cmp+0x28>
 801bdac:	d309      	bcc.n	801bdc2 <uxr_seq_num_cmp+0x1a>
 801bdae:	4288      	cmp	r0, r1
 801bdb0:	d910      	bls.n	801bdd4 <uxr_seq_num_cmp+0x2c>
 801bdb2:	1a40      	subs	r0, r0, r1
 801bdb4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801bdb8:	bfd4      	ite	le
 801bdba:	2001      	movle	r0, #1
 801bdbc:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 801bdc0:	4770      	bx	lr
 801bdc2:	1a0b      	subs	r3, r1, r0
 801bdc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801bdc8:	daf1      	bge.n	801bdae <uxr_seq_num_cmp+0x6>
 801bdca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bdce:	4770      	bx	lr
 801bdd0:	2000      	movs	r0, #0
 801bdd2:	4770      	bx	lr
 801bdd4:	2001      	movs	r0, #1
 801bdd6:	4770      	bx	lr

0801bdd8 <uxr_init_framing_io>:
 801bdd8:	2300      	movs	r3, #0
 801bdda:	7041      	strb	r1, [r0, #1]
 801bddc:	7003      	strb	r3, [r0, #0]
 801bdde:	8583      	strh	r3, [r0, #44]	; 0x2c
 801bde0:	4770      	bx	lr
 801bde2:	bf00      	nop

0801bde4 <uxr_write_framed_msg>:
 801bde4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bde8:	4617      	mov	r7, r2
 801bdea:	7842      	ldrb	r2, [r0, #1]
 801bdec:	460e      	mov	r6, r1
 801bdee:	b083      	sub	sp, #12
 801bdf0:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 801bdf4:	469b      	mov	fp, r3
 801bdf6:	237e      	movs	r3, #126	; 0x7e
 801bdf8:	4604      	mov	r4, r0
 801bdfa:	2901      	cmp	r1, #1
 801bdfc:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 801be00:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801be04:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 801be08:	f240 8115 	bls.w	801c036 <uxr_write_framed_msg+0x252>
 801be0c:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 801be10:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 801be14:	2202      	movs	r2, #2
 801be16:	2901      	cmp	r1, #1
 801be18:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801be1c:	d952      	bls.n	801bec4 <uxr_write_framed_msg+0xe0>
 801be1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801be20:	2103      	movs	r1, #3
 801be22:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 801be26:	b2dd      	uxtb	r5, r3
 801be28:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801be2c:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 801be30:	2a01      	cmp	r2, #1
 801be32:	d95c      	bls.n	801beee <uxr_write_framed_msg+0x10a>
 801be34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801be36:	1862      	adds	r2, r4, r1
 801be38:	3101      	adds	r1, #1
 801be3a:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801be3e:	f882 5038 	strb.w	r5, [r2, #56]	; 0x38
 801be42:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801be46:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 801be4a:	2a01      	cmp	r2, #1
 801be4c:	d961      	bls.n	801bf12 <uxr_write_framed_msg+0x12e>
 801be4e:	1c4a      	adds	r2, r1, #1
 801be50:	4421      	add	r1, r4
 801be52:	b2d2      	uxtb	r2, r2
 801be54:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 801be58:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801be5c:	2b00      	cmp	r3, #0
 801be5e:	d06a      	beq.n	801bf36 <uxr_write_framed_msg+0x152>
 801be60:	f04f 0800 	mov.w	r8, #0
 801be64:	46c1      	mov	r9, r8
 801be66:	e016      	b.n	801be96 <uxr_write_framed_msg+0xb2>
 801be68:	2a29      	cmp	r2, #41	; 0x29
 801be6a:	d868      	bhi.n	801bf3e <uxr_write_framed_msg+0x15a>
 801be6c:	18a0      	adds	r0, r4, r2
 801be6e:	3201      	adds	r2, #1
 801be70:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801be74:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801be78:	ea88 0101 	eor.w	r1, r8, r1
 801be7c:	4b7d      	ldr	r3, [pc, #500]	; (801c074 <uxr_write_framed_msg+0x290>)
 801be7e:	f109 0901 	add.w	r9, r9, #1
 801be82:	b2c9      	uxtb	r1, r1
 801be84:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 801be88:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 801be8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801be8e:	454b      	cmp	r3, r9
 801be90:	d969      	bls.n	801bf66 <uxr_write_framed_msg+0x182>
 801be92:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801be96:	f81b 1009 	ldrb.w	r1, [fp, r9]
 801be9a:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 801be9e:	2801      	cmp	r0, #1
 801bea0:	d8e2      	bhi.n	801be68 <uxr_write_framed_msg+0x84>
 801bea2:	1c50      	adds	r0, r2, #1
 801bea4:	b2c0      	uxtb	r0, r0
 801bea6:	2829      	cmp	r0, #41	; 0x29
 801bea8:	d849      	bhi.n	801bf3e <uxr_write_framed_msg+0x15a>
 801beaa:	18a0      	adds	r0, r4, r2
 801beac:	f04f 037d 	mov.w	r3, #125	; 0x7d
 801beb0:	3202      	adds	r2, #2
 801beb2:	f081 0520 	eor.w	r5, r1, #32
 801beb6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801beba:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 801bebe:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801bec2:	e7d9      	b.n	801be78 <uxr_write_framed_msg+0x94>
 801bec4:	2104      	movs	r1, #4
 801bec6:	f04f 0c03 	mov.w	ip, #3
 801beca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801becc:	4422      	add	r2, r4
 801bece:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 801bed2:	44a4      	add	ip, r4
 801bed4:	b2dd      	uxtb	r5, r3
 801bed6:	f080 0020 	eor.w	r0, r0, #32
 801beda:	f882 e038 	strb.w	lr, [r2, #56]	; 0x38
 801bede:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 801bee2:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 801bee6:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801beea:	2a01      	cmp	r2, #1
 801beec:	d8a2      	bhi.n	801be34 <uxr_write_framed_msg+0x50>
 801beee:	1862      	adds	r2, r4, r1
 801bef0:	207d      	movs	r0, #125	; 0x7d
 801bef2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bef4:	f085 0520 	eor.w	r5, r5, #32
 801bef8:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
 801befc:	3102      	adds	r1, #2
 801befe:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801bf02:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
 801bf06:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801bf0a:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 801bf0e:	2a01      	cmp	r2, #1
 801bf10:	d89d      	bhi.n	801be4e <uxr_write_framed_msg+0x6a>
 801bf12:	1c4d      	adds	r5, r1, #1
 801bf14:	1c8a      	adds	r2, r1, #2
 801bf16:	f080 0020 	eor.w	r0, r0, #32
 801bf1a:	4421      	add	r1, r4
 801bf1c:	fa54 f585 	uxtab	r5, r4, r5
 801bf20:	b2d2      	uxtb	r2, r2
 801bf22:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 801bf26:	f881 c038 	strb.w	ip, [r1, #56]	; 0x38
 801bf2a:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 801bf2e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801bf32:	2b00      	cmp	r3, #0
 801bf34:	d194      	bne.n	801be60 <uxr_write_framed_msg+0x7c>
 801bf36:	4619      	mov	r1, r3
 801bf38:	f8ad 3004 	strh.w	r3, [sp, #4]
 801bf3c:	e019      	b.n	801bf72 <uxr_write_framed_msg+0x18e>
 801bf3e:	2500      	movs	r5, #0
 801bf40:	e000      	b.n	801bf44 <uxr_write_framed_msg+0x160>
 801bf42:	b160      	cbz	r0, 801bf5e <uxr_write_framed_msg+0x17a>
 801bf44:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801bf48:	1b52      	subs	r2, r2, r5
 801bf4a:	4653      	mov	r3, sl
 801bf4c:	4638      	mov	r0, r7
 801bf4e:	4421      	add	r1, r4
 801bf50:	47b0      	blx	r6
 801bf52:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801bf56:	4405      	add	r5, r0
 801bf58:	4295      	cmp	r5, r2
 801bf5a:	d3f2      	bcc.n	801bf42 <uxr_write_framed_msg+0x15e>
 801bf5c:	d066      	beq.n	801c02c <uxr_write_framed_msg+0x248>
 801bf5e:	2000      	movs	r0, #0
 801bf60:	b003      	add	sp, #12
 801bf62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf66:	fa5f f188 	uxtb.w	r1, r8
 801bf6a:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801bf6e:	f8ad 8004 	strh.w	r8, [sp, #4]
 801bf72:	f04f 0900 	mov.w	r9, #0
 801bf76:	f04f 0b7d 	mov.w	fp, #125	; 0x7d
 801bf7a:	46c8      	mov	r8, r9
 801bf7c:	e013      	b.n	801bfa6 <uxr_write_framed_msg+0x1c2>
 801bf7e:	2a29      	cmp	r2, #41	; 0x29
 801bf80:	d824      	bhi.n	801bfcc <uxr_write_framed_msg+0x1e8>
 801bf82:	18a3      	adds	r3, r4, r2
 801bf84:	3201      	adds	r2, #1
 801bf86:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 801bf8a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801bf8e:	f109 0901 	add.w	r9, r9, #1
 801bf92:	f1b9 0f02 	cmp.w	r9, #2
 801bf96:	d02d      	beq.n	801bff4 <uxr_write_framed_msg+0x210>
 801bf98:	f109 0308 	add.w	r3, r9, #8
 801bf9c:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801bfa0:	446b      	add	r3, sp
 801bfa2:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 801bfa6:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 801bfaa:	2b01      	cmp	r3, #1
 801bfac:	d8e7      	bhi.n	801bf7e <uxr_write_framed_msg+0x19a>
 801bfae:	1c53      	adds	r3, r2, #1
 801bfb0:	b2db      	uxtb	r3, r3
 801bfb2:	2b29      	cmp	r3, #41	; 0x29
 801bfb4:	d80a      	bhi.n	801bfcc <uxr_write_framed_msg+0x1e8>
 801bfb6:	18a3      	adds	r3, r4, r2
 801bfb8:	f081 0120 	eor.w	r1, r1, #32
 801bfbc:	3202      	adds	r2, #2
 801bfbe:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 801bfc2:	f883 b038 	strb.w	fp, [r3, #56]	; 0x38
 801bfc6:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801bfca:	e7e0      	b.n	801bf8e <uxr_write_framed_msg+0x1aa>
 801bfcc:	2500      	movs	r5, #0
 801bfce:	e001      	b.n	801bfd4 <uxr_write_framed_msg+0x1f0>
 801bfd0:	2800      	cmp	r0, #0
 801bfd2:	d0c4      	beq.n	801bf5e <uxr_write_framed_msg+0x17a>
 801bfd4:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801bfd8:	1b52      	subs	r2, r2, r5
 801bfda:	4653      	mov	r3, sl
 801bfdc:	4638      	mov	r0, r7
 801bfde:	4421      	add	r1, r4
 801bfe0:	47b0      	blx	r6
 801bfe2:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801bfe6:	4405      	add	r5, r0
 801bfe8:	4295      	cmp	r5, r2
 801bfea:	d3f1      	bcc.n	801bfd0 <uxr_write_framed_msg+0x1ec>
 801bfec:	d1b7      	bne.n	801bf5e <uxr_write_framed_msg+0x17a>
 801bfee:	f884 8062 	strb.w	r8, [r4, #98]	; 0x62
 801bff2:	e7d1      	b.n	801bf98 <uxr_write_framed_msg+0x1b4>
 801bff4:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801bff8:	b19a      	cbz	r2, 801c022 <uxr_write_framed_msg+0x23e>
 801bffa:	2500      	movs	r5, #0
 801bffc:	e001      	b.n	801c002 <uxr_write_framed_msg+0x21e>
 801bffe:	2800      	cmp	r0, #0
 801c000:	d0ad      	beq.n	801bf5e <uxr_write_framed_msg+0x17a>
 801c002:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801c006:	1b52      	subs	r2, r2, r5
 801c008:	4653      	mov	r3, sl
 801c00a:	4638      	mov	r0, r7
 801c00c:	4421      	add	r1, r4
 801c00e:	47b0      	blx	r6
 801c010:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801c014:	4405      	add	r5, r0
 801c016:	4295      	cmp	r5, r2
 801c018:	d3f1      	bcc.n	801bffe <uxr_write_framed_msg+0x21a>
 801c01a:	d1a0      	bne.n	801bf5e <uxr_write_framed_msg+0x17a>
 801c01c:	2300      	movs	r3, #0
 801c01e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801c022:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c024:	b298      	uxth	r0, r3
 801c026:	b003      	add	sp, #12
 801c028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c02c:	f04f 0300 	mov.w	r3, #0
 801c030:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801c034:	e72a      	b.n	801be8c <uxr_write_framed_msg+0xa8>
 801c036:	217d      	movs	r1, #125	; 0x7d
 801c038:	f082 0220 	eor.w	r2, r2, #32
 801c03c:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 801c040:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 801c044:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 801c048:	2203      	movs	r2, #3
 801c04a:	2901      	cmp	r1, #1
 801c04c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801c050:	d803      	bhi.n	801c05a <uxr_write_framed_msg+0x276>
 801c052:	2105      	movs	r1, #5
 801c054:	f04f 0c04 	mov.w	ip, #4
 801c058:	e737      	b.n	801beca <uxr_write_framed_msg+0xe6>
 801c05a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c05c:	2104      	movs	r1, #4
 801c05e:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 801c062:	b2dd      	uxtb	r5, r3
 801c064:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801c068:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 801c06c:	2a01      	cmp	r2, #1
 801c06e:	f63f aee1 	bhi.w	801be34 <uxr_write_framed_msg+0x50>
 801c072:	e73c      	b.n	801beee <uxr_write_framed_msg+0x10a>
 801c074:	080214ec 	.word	0x080214ec

0801c078 <uxr_framing_read_transport>:
 801c078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c07c:	4604      	mov	r4, r0
 801c07e:	b085      	sub	sp, #20
 801c080:	4692      	mov	sl, r2
 801c082:	4689      	mov	r9, r1
 801c084:	461d      	mov	r5, r3
 801c086:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801c088:	f7f7 fad8 	bl	801363c <uxr_millis>
 801c08c:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 801c090:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 801c094:	4680      	mov	r8, r0
 801c096:	42ba      	cmp	r2, r7
 801c098:	d05f      	beq.n	801c15a <uxr_framing_read_transport+0xe2>
 801c09a:	d817      	bhi.n	801c0cc <uxr_framing_read_transport+0x54>
 801c09c:	3f01      	subs	r7, #1
 801c09e:	1aba      	subs	r2, r7, r2
 801c0a0:	2700      	movs	r7, #0
 801c0a2:	b2d2      	uxtb	r2, r2
 801c0a4:	42b2      	cmp	r2, r6
 801c0a6:	d81a      	bhi.n	801c0de <uxr_framing_read_transport+0x66>
 801c0a8:	19d3      	adds	r3, r2, r7
 801c0aa:	42b3      	cmp	r3, r6
 801c0ac:	d852      	bhi.n	801c154 <uxr_framing_read_transport+0xdc>
 801c0ae:	b9d2      	cbnz	r2, 801c0e6 <uxr_framing_read_transport+0x6e>
 801c0b0:	2600      	movs	r6, #0
 801c0b2:	f7f7 fac3 	bl	801363c <uxr_millis>
 801c0b6:	682b      	ldr	r3, [r5, #0]
 801c0b8:	eba0 0008 	sub.w	r0, r0, r8
 801c0bc:	1a1b      	subs	r3, r3, r0
 801c0be:	4630      	mov	r0, r6
 801c0c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c0c4:	602b      	str	r3, [r5, #0]
 801c0c6:	b005      	add	sp, #20
 801c0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c0cc:	2f00      	cmp	r7, #0
 801c0ce:	d060      	beq.n	801c192 <uxr_framing_read_transport+0x11a>
 801c0d0:	f1c2 022a 	rsb	r2, r2, #42	; 0x2a
 801c0d4:	3f01      	subs	r7, #1
 801c0d6:	b2d2      	uxtb	r2, r2
 801c0d8:	b2ff      	uxtb	r7, r7
 801c0da:	42b2      	cmp	r2, r6
 801c0dc:	d9e4      	bls.n	801c0a8 <uxr_framing_read_transport+0x30>
 801c0de:	b2f2      	uxtb	r2, r6
 801c0e0:	2700      	movs	r7, #0
 801c0e2:	2a00      	cmp	r2, #0
 801c0e4:	d0e4      	beq.n	801c0b0 <uxr_framing_read_transport+0x38>
 801c0e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c0e8:	4650      	mov	r0, sl
 801c0ea:	9203      	str	r2, [sp, #12]
 801c0ec:	9300      	str	r3, [sp, #0]
 801c0ee:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801c0f2:	682b      	ldr	r3, [r5, #0]
 801c0f4:	3102      	adds	r1, #2
 801c0f6:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 801c19c <uxr_framing_read_transport+0x124>
 801c0fa:	4421      	add	r1, r4
 801c0fc:	47c8      	blx	r9
 801c0fe:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801c102:	4606      	mov	r6, r0
 801c104:	4403      	add	r3, r0
 801c106:	0859      	lsrs	r1, r3, #1
 801c108:	fbab 2101 	umull	r2, r1, fp, r1
 801c10c:	222a      	movs	r2, #42	; 0x2a
 801c10e:	0889      	lsrs	r1, r1, #2
 801c110:	fb02 3111 	mls	r1, r2, r1, r3
 801c114:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 801c118:	2800      	cmp	r0, #0
 801c11a:	d0c9      	beq.n	801c0b0 <uxr_framing_read_transport+0x38>
 801c11c:	9a03      	ldr	r2, [sp, #12]
 801c11e:	4290      	cmp	r0, r2
 801c120:	d1c7      	bne.n	801c0b2 <uxr_framing_read_transport+0x3a>
 801c122:	2f00      	cmp	r7, #0
 801c124:	d0c5      	beq.n	801c0b2 <uxr_framing_read_transport+0x3a>
 801c126:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c128:	3102      	adds	r1, #2
 801c12a:	463a      	mov	r2, r7
 801c12c:	4650      	mov	r0, sl
 801c12e:	4421      	add	r1, r4
 801c130:	9300      	str	r3, [sp, #0]
 801c132:	2300      	movs	r3, #0
 801c134:	47c8      	blx	r9
 801c136:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 801c13a:	4406      	add	r6, r0
 801c13c:	1813      	adds	r3, r2, r0
 801c13e:	085a      	lsrs	r2, r3, #1
 801c140:	fbab 1b02 	umull	r1, fp, fp, r2
 801c144:	222a      	movs	r2, #42	; 0x2a
 801c146:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 801c14a:	fb02 331b 	mls	r3, r2, fp, r3
 801c14e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 801c152:	e7ae      	b.n	801c0b2 <uxr_framing_read_transport+0x3a>
 801c154:	1ab6      	subs	r6, r6, r2
 801c156:	b2f7      	uxtb	r7, r6
 801c158:	e7a9      	b.n	801c0ae <uxr_framing_read_transport+0x36>
 801c15a:	2300      	movs	r3, #0
 801c15c:	2e28      	cmp	r6, #40	; 0x28
 801c15e:	85a3      	strh	r3, [r4, #44]	; 0x2c
 801c160:	d9bd      	bls.n	801c0de <uxr_framing_read_transport+0x66>
 801c162:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c164:	2229      	movs	r2, #41	; 0x29
 801c166:	1ca1      	adds	r1, r4, #2
 801c168:	4650      	mov	r0, sl
 801c16a:	9300      	str	r3, [sp, #0]
 801c16c:	682b      	ldr	r3, [r5, #0]
 801c16e:	47c8      	blx	r9
 801c170:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801c174:	4606      	mov	r6, r0
 801c176:	212a      	movs	r1, #42	; 0x2a
 801c178:	4403      	add	r3, r0
 801c17a:	4808      	ldr	r0, [pc, #32]	; (801c19c <uxr_framing_read_transport+0x124>)
 801c17c:	085a      	lsrs	r2, r3, #1
 801c17e:	fba0 0202 	umull	r0, r2, r0, r2
 801c182:	0892      	lsrs	r2, r2, #2
 801c184:	fb01 3312 	mls	r3, r1, r2, r3
 801c188:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 801c18c:	2e00      	cmp	r6, #0
 801c18e:	d08f      	beq.n	801c0b0 <uxr_framing_read_transport+0x38>
 801c190:	e78f      	b.n	801c0b2 <uxr_framing_read_transport+0x3a>
 801c192:	f1c2 0229 	rsb	r2, r2, #41	; 0x29
 801c196:	b2d2      	uxtb	r2, r2
 801c198:	e784      	b.n	801c0a4 <uxr_framing_read_transport+0x2c>
 801c19a:	bf00      	nop
 801c19c:	30c30c31 	.word	0x30c30c31

0801c1a0 <uxr_read_framed_msg>:
 801c1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1a4:	461e      	mov	r6, r3
 801c1a6:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 801c1aa:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 801c1ae:	b083      	sub	sp, #12
 801c1b0:	4604      	mov	r4, r0
 801c1b2:	4688      	mov	r8, r1
 801c1b4:	429d      	cmp	r5, r3
 801c1b6:	4691      	mov	r9, r2
 801c1b8:	f000 818c 	beq.w	801c4d4 <uxr_read_framed_msg+0x334>
 801c1bc:	7823      	ldrb	r3, [r4, #0]
 801c1be:	4dc3      	ldr	r5, [pc, #780]	; (801c4cc <uxr_read_framed_msg+0x32c>)
 801c1c0:	4fc3      	ldr	r7, [pc, #780]	; (801c4d0 <uxr_read_framed_msg+0x330>)
 801c1c2:	2b07      	cmp	r3, #7
 801c1c4:	d8fd      	bhi.n	801c1c2 <uxr_read_framed_msg+0x22>
 801c1c6:	e8df f013 	tbh	[pc, r3, lsl #1]
 801c1ca:	011c      	.short	0x011c
 801c1cc:	00d900fb 	.word	0x00d900fb
 801c1d0:	008f00ba 	.word	0x008f00ba
 801c1d4:	00320051 	.word	0x00320051
 801c1d8:	0008      	.short	0x0008
 801c1da:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801c1de:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801c1e2:	4299      	cmp	r1, r3
 801c1e4:	f000 814d 	beq.w	801c482 <uxr_read_framed_msg+0x2e2>
 801c1e8:	18e2      	adds	r2, r4, r3
 801c1ea:	7892      	ldrb	r2, [r2, #2]
 801c1ec:	2a7d      	cmp	r2, #125	; 0x7d
 801c1ee:	f000 81b8 	beq.w	801c562 <uxr_read_framed_msg+0x3c2>
 801c1f2:	3301      	adds	r3, #1
 801c1f4:	212a      	movs	r1, #42	; 0x2a
 801c1f6:	2a7e      	cmp	r2, #126	; 0x7e
 801c1f8:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801c1fc:	fba5 c000 	umull	ip, r0, r5, r0
 801c200:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801c204:	fb01 3310 	mls	r3, r1, r0, r3
 801c208:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801c20c:	f000 8257 	beq.w	801c6be <uxr_read_framed_msg+0x51e>
 801c210:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801c212:	2000      	movs	r0, #0
 801c214:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 801c216:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801c21a:	7020      	strb	r0, [r4, #0]
 801c21c:	b29b      	uxth	r3, r3
 801c21e:	4299      	cmp	r1, r3
 801c220:	86a3      	strh	r3, [r4, #52]	; 0x34
 801c222:	f000 8178 	beq.w	801c516 <uxr_read_framed_msg+0x376>
 801c226:	2000      	movs	r0, #0
 801c228:	b003      	add	sp, #12
 801c22a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c22e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801c232:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801c236:	4298      	cmp	r0, r3
 801c238:	f000 8132 	beq.w	801c4a0 <uxr_read_framed_msg+0x300>
 801c23c:	18e2      	adds	r2, r4, r3
 801c23e:	7891      	ldrb	r1, [r2, #2]
 801c240:	297d      	cmp	r1, #125	; 0x7d
 801c242:	f000 8170 	beq.w	801c526 <uxr_read_framed_msg+0x386>
 801c246:	3301      	adds	r3, #1
 801c248:	202a      	movs	r0, #42	; 0x2a
 801c24a:	297e      	cmp	r1, #126	; 0x7e
 801c24c:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801c250:	fba5 c202 	umull	ip, r2, r5, r2
 801c254:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801c258:	fb00 3312 	mls	r3, r0, r2, r3
 801c25c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801c260:	f000 821d 	beq.w	801c69e <uxr_read_framed_msg+0x4fe>
 801c264:	2307      	movs	r3, #7
 801c266:	86a1      	strh	r1, [r4, #52]	; 0x34
 801c268:	7023      	strb	r3, [r4, #0]
 801c26a:	e7aa      	b.n	801c1c2 <uxr_read_framed_msg+0x22>
 801c26c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801c26e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 801c272:	459e      	cmp	lr, r3
 801c274:	d827      	bhi.n	801c2c6 <uxr_read_framed_msg+0x126>
 801c276:	e032      	b.n	801c2de <uxr_read_framed_msg+0x13e>
 801c278:	fba5 b101 	umull	fp, r1, r5, r1
 801c27c:	f89c c002 	ldrb.w	ip, [ip, #2]
 801c280:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 801c284:	0889      	lsrs	r1, r1, #2
 801c286:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 801c28a:	fb0b 0111 	mls	r1, fp, r1, r0
 801c28e:	f000 80d4 	beq.w	801c43a <uxr_read_framed_msg+0x29a>
 801c292:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 801c296:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 801c29a:	f000 80cb 	beq.w	801c434 <uxr_read_framed_msg+0x294>
 801c29e:	f806 c003 	strb.w	ip, [r6, r3]
 801c2a2:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801c2a4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801c2a6:	ea80 010c 	eor.w	r1, r0, ip
 801c2aa:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 801c2ae:	3301      	adds	r3, #1
 801c2b0:	b2c9      	uxtb	r1, r1
 801c2b2:	b29b      	uxth	r3, r3
 801c2b4:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 801c2b8:	4573      	cmp	r3, lr
 801c2ba:	8663      	strh	r3, [r4, #50]	; 0x32
 801c2bc:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 801c2c0:	86e2      	strh	r2, [r4, #54]	; 0x36
 801c2c2:	f080 811d 	bcs.w	801c500 <uxr_read_framed_msg+0x360>
 801c2c6:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801c2ca:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 801c2ce:	1c50      	adds	r0, r2, #1
 801c2d0:	eb04 0c02 	add.w	ip, r4, r2
 801c2d4:	4592      	cmp	sl, r2
 801c2d6:	ea4f 0150 	mov.w	r1, r0, lsr #1
 801c2da:	d1cd      	bne.n	801c278 <uxr_read_framed_msg+0xd8>
 801c2dc:	459e      	cmp	lr, r3
 801c2de:	f040 8114 	bne.w	801c50a <uxr_read_framed_msg+0x36a>
 801c2e2:	2306      	movs	r3, #6
 801c2e4:	7023      	strb	r3, [r4, #0]
 801c2e6:	e76c      	b.n	801c1c2 <uxr_read_framed_msg+0x22>
 801c2e8:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801c2ec:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801c2f0:	4298      	cmp	r0, r3
 801c2f2:	f000 80c6 	beq.w	801c482 <uxr_read_framed_msg+0x2e2>
 801c2f6:	18e2      	adds	r2, r4, r3
 801c2f8:	7891      	ldrb	r1, [r2, #2]
 801c2fa:	297d      	cmp	r1, #125	; 0x7d
 801c2fc:	f000 8193 	beq.w	801c626 <uxr_read_framed_msg+0x486>
 801c300:	3301      	adds	r3, #1
 801c302:	202a      	movs	r0, #42	; 0x2a
 801c304:	297e      	cmp	r1, #126	; 0x7e
 801c306:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801c30a:	fba5 c202 	umull	ip, r2, r5, r2
 801c30e:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801c312:	fb00 3312 	mls	r3, r0, r2, r3
 801c316:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801c31a:	f000 81d0 	beq.w	801c6be <uxr_read_framed_msg+0x51e>
 801c31e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801c320:	2000      	movs	r0, #0
 801c322:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801c326:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c328:	8660      	strh	r0, [r4, #50]	; 0x32
 801c32a:	b29b      	uxth	r3, r3
 801c32c:	86e0      	strh	r0, [r4, #54]	; 0x36
 801c32e:	428b      	cmp	r3, r1
 801c330:	8623      	strh	r3, [r4, #48]	; 0x30
 801c332:	f240 80e2 	bls.w	801c4fa <uxr_read_framed_msg+0x35a>
 801c336:	7020      	strb	r0, [r4, #0]
 801c338:	b003      	add	sp, #12
 801c33a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c33e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801c342:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801c346:	4298      	cmp	r0, r3
 801c348:	f000 80aa 	beq.w	801c4a0 <uxr_read_framed_msg+0x300>
 801c34c:	18e2      	adds	r2, r4, r3
 801c34e:	7891      	ldrb	r1, [r2, #2]
 801c350:	297d      	cmp	r1, #125	; 0x7d
 801c352:	f000 8186 	beq.w	801c662 <uxr_read_framed_msg+0x4c2>
 801c356:	3301      	adds	r3, #1
 801c358:	202a      	movs	r0, #42	; 0x2a
 801c35a:	297e      	cmp	r1, #126	; 0x7e
 801c35c:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801c360:	fba5 c202 	umull	ip, r2, r5, r2
 801c364:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801c368:	fb00 3312 	mls	r3, r0, r2, r3
 801c36c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801c370:	f000 8195 	beq.w	801c69e <uxr_read_framed_msg+0x4fe>
 801c374:	2304      	movs	r3, #4
 801c376:	8621      	strh	r1, [r4, #48]	; 0x30
 801c378:	7023      	strb	r3, [r4, #0]
 801c37a:	e722      	b.n	801c1c2 <uxr_read_framed_msg+0x22>
 801c37c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801c380:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801c384:	4290      	cmp	r0, r2
 801c386:	f000 80b4 	beq.w	801c4f2 <uxr_read_framed_msg+0x352>
 801c38a:	18a3      	adds	r3, r4, r2
 801c38c:	7899      	ldrb	r1, [r3, #2]
 801c38e:	297d      	cmp	r1, #125	; 0x7d
 801c390:	f000 8107 	beq.w	801c5a2 <uxr_read_framed_msg+0x402>
 801c394:	3201      	adds	r2, #1
 801c396:	232a      	movs	r3, #42	; 0x2a
 801c398:	297e      	cmp	r1, #126	; 0x7e
 801c39a:	ea4f 0052 	mov.w	r0, r2, lsr #1
 801c39e:	fba5 c000 	umull	ip, r0, r5, r0
 801c3a2:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801c3a6:	fb03 2210 	mls	r2, r3, r0, r2
 801c3aa:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801c3ae:	f000 818a 	beq.w	801c6c6 <uxr_read_framed_msg+0x526>
 801c3b2:	7863      	ldrb	r3, [r4, #1]
 801c3b4:	428b      	cmp	r3, r1
 801c3b6:	bf0c      	ite	eq
 801c3b8:	2303      	moveq	r3, #3
 801c3ba:	2300      	movne	r3, #0
 801c3bc:	7023      	strb	r3, [r4, #0]
 801c3be:	e700      	b.n	801c1c2 <uxr_read_framed_msg+0x22>
 801c3c0:	2300      	movs	r3, #0
 801c3c2:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801c3c6:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 801c3ca:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801c3ce:	4299      	cmp	r1, r3
 801c3d0:	d06a      	beq.n	801c4a8 <uxr_read_framed_msg+0x308>
 801c3d2:	18e2      	adds	r2, r4, r3
 801c3d4:	7890      	ldrb	r0, [r2, #2]
 801c3d6:	287d      	cmp	r0, #125	; 0x7d
 801c3d8:	f000 8100 	beq.w	801c5dc <uxr_read_framed_msg+0x43c>
 801c3dc:	3301      	adds	r3, #1
 801c3de:	212a      	movs	r1, #42	; 0x2a
 801c3e0:	287e      	cmp	r0, #126	; 0x7e
 801c3e2:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 801c3e6:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801c3ea:	fba5 c202 	umull	ip, r2, r5, r2
 801c3ee:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801c3f2:	fb01 3312 	mls	r3, r1, r2, r3
 801c3f6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801c3fa:	d055      	beq.n	801c4a8 <uxr_read_framed_msg+0x308>
 801c3fc:	2302      	movs	r3, #2
 801c3fe:	7023      	strb	r3, [r4, #0]
 801c400:	e6df      	b.n	801c1c2 <uxr_read_framed_msg+0x22>
 801c402:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
 801c406:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 801c40a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801c40e:	1c5a      	adds	r2, r3, #1
 801c410:	459c      	cmp	ip, r3
 801c412:	eb04 0103 	add.w	r1, r4, r3
 801c416:	ea4f 0352 	mov.w	r3, r2, lsr #1
 801c41a:	f43f af04 	beq.w	801c226 <uxr_read_framed_msg+0x86>
 801c41e:	fba5 0303 	umull	r0, r3, r5, r3
 801c422:	7889      	ldrb	r1, [r1, #2]
 801c424:	089b      	lsrs	r3, r3, #2
 801c426:	297e      	cmp	r1, #126	; 0x7e
 801c428:	fb0e 2313 	mls	r3, lr, r3, r2
 801c42c:	b2db      	uxtb	r3, r3
 801c42e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801c432:	d1ec      	bne.n	801c40e <uxr_read_framed_msg+0x26e>
 801c434:	2301      	movs	r3, #1
 801c436:	7023      	strb	r3, [r4, #0]
 801c438:	e6c3      	b.n	801c1c2 <uxr_read_framed_msg+0x22>
 801c43a:	1c50      	adds	r0, r2, #1
 801c43c:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 801c440:	3202      	adds	r2, #2
 801c442:	0841      	lsrs	r1, r0, #1
 801c444:	fba5 c101 	umull	ip, r1, r5, r1
 801c448:	0889      	lsrs	r1, r1, #2
 801c44a:	fb0b 0111 	mls	r1, fp, r1, r0
 801c44e:	1860      	adds	r0, r4, r1
 801c450:	b2c9      	uxtb	r1, r1
 801c452:	458a      	cmp	sl, r1
 801c454:	f43f af42 	beq.w	801c2dc <uxr_read_framed_msg+0x13c>
 801c458:	0851      	lsrs	r1, r2, #1
 801c45a:	7880      	ldrb	r0, [r0, #2]
 801c45c:	fba5 a101 	umull	sl, r1, r5, r1
 801c460:	287e      	cmp	r0, #126	; 0x7e
 801c462:	f080 0c20 	eor.w	ip, r0, #32
 801c466:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801c46a:	fb0b 2211 	mls	r2, fp, r1, r2
 801c46e:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801c472:	f47f af14 	bne.w	801c29e <uxr_read_framed_msg+0xfe>
 801c476:	459e      	cmp	lr, r3
 801c478:	f43f af33 	beq.w	801c2e2 <uxr_read_framed_msg+0x142>
 801c47c:	2301      	movs	r3, #1
 801c47e:	7023      	strb	r3, [r4, #0]
 801c480:	e69f      	b.n	801c1c2 <uxr_read_framed_msg+0x22>
 801c482:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c484:	9300      	str	r3, [sp, #0]
 801c486:	2301      	movs	r3, #1
 801c488:	9301      	str	r3, [sp, #4]
 801c48a:	464a      	mov	r2, r9
 801c48c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c48e:	4641      	mov	r1, r8
 801c490:	4620      	mov	r0, r4
 801c492:	f7ff fdf1 	bl	801c078 <uxr_framing_read_transport>
 801c496:	2800      	cmp	r0, #0
 801c498:	f43f aec5 	beq.w	801c226 <uxr_read_framed_msg+0x86>
 801c49c:	7823      	ldrb	r3, [r4, #0]
 801c49e:	e690      	b.n	801c1c2 <uxr_read_framed_msg+0x22>
 801c4a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c4a2:	9300      	str	r3, [sp, #0]
 801c4a4:	2302      	movs	r3, #2
 801c4a6:	e7ef      	b.n	801c488 <uxr_read_framed_msg+0x2e8>
 801c4a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c4aa:	464a      	mov	r2, r9
 801c4ac:	4641      	mov	r1, r8
 801c4ae:	4620      	mov	r0, r4
 801c4b0:	9300      	str	r3, [sp, #0]
 801c4b2:	2304      	movs	r3, #4
 801c4b4:	9301      	str	r3, [sp, #4]
 801c4b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c4b8:	f7ff fdde 	bl	801c078 <uxr_framing_read_transport>
 801c4bc:	2800      	cmp	r0, #0
 801c4be:	d1ed      	bne.n	801c49c <uxr_read_framed_msg+0x2fc>
 801c4c0:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801c4c4:	2b7e      	cmp	r3, #126	; 0x7e
 801c4c6:	d0e9      	beq.n	801c49c <uxr_read_framed_msg+0x2fc>
 801c4c8:	e6ad      	b.n	801c226 <uxr_read_framed_msg+0x86>
 801c4ca:	bf00      	nop
 801c4cc:	30c30c31 	.word	0x30c30c31
 801c4d0:	080214ec 	.word	0x080214ec
 801c4d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c4d6:	9300      	str	r3, [sp, #0]
 801c4d8:	2305      	movs	r3, #5
 801c4da:	9301      	str	r3, [sp, #4]
 801c4dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c4de:	f7ff fdcb 	bl	801c078 <uxr_framing_read_transport>
 801c4e2:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801c4e6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801c4ea:	429a      	cmp	r2, r3
 801c4ec:	f43f ae9b 	beq.w	801c226 <uxr_read_framed_msg+0x86>
 801c4f0:	e664      	b.n	801c1bc <uxr_read_framed_msg+0x1c>
 801c4f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c4f4:	9300      	str	r3, [sp, #0]
 801c4f6:	2303      	movs	r3, #3
 801c4f8:	e7c6      	b.n	801c488 <uxr_read_framed_msg+0x2e8>
 801c4fa:	2305      	movs	r3, #5
 801c4fc:	7023      	strb	r3, [r4, #0]
 801c4fe:	e660      	b.n	801c1c2 <uxr_read_framed_msg+0x22>
 801c500:	f43f aeef 	beq.w	801c2e2 <uxr_read_framed_msg+0x142>
 801c504:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 801c508:	d094      	beq.n	801c434 <uxr_read_framed_msg+0x294>
 801c50a:	ebae 0303 	sub.w	r3, lr, r3
 801c50e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c510:	3302      	adds	r3, #2
 801c512:	9200      	str	r2, [sp, #0]
 801c514:	e7b8      	b.n	801c488 <uxr_read_framed_msg+0x2e8>
 801c516:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801c51a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c51c:	7013      	strb	r3, [r2, #0]
 801c51e:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 801c520:	b003      	add	sp, #12
 801c522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c526:	1c59      	adds	r1, r3, #1
 801c528:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801c52c:	084a      	lsrs	r2, r1, #1
 801c52e:	fba5 e202 	umull	lr, r2, r5, r2
 801c532:	0892      	lsrs	r2, r2, #2
 801c534:	fb0c 1212 	mls	r2, ip, r2, r1
 801c538:	b2d1      	uxtb	r1, r2
 801c53a:	4288      	cmp	r0, r1
 801c53c:	d0b0      	beq.n	801c4a0 <uxr_read_framed_msg+0x300>
 801c53e:	3302      	adds	r3, #2
 801c540:	4422      	add	r2, r4
 801c542:	7891      	ldrb	r1, [r2, #2]
 801c544:	085a      	lsrs	r2, r3, #1
 801c546:	fba5 0202 	umull	r0, r2, r5, r2
 801c54a:	297e      	cmp	r1, #126	; 0x7e
 801c54c:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801c550:	fb0c 3312 	mls	r3, ip, r2, r3
 801c554:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801c558:	f000 80a1 	beq.w	801c69e <uxr_read_framed_msg+0x4fe>
 801c55c:	f081 0120 	eor.w	r1, r1, #32
 801c560:	e680      	b.n	801c264 <uxr_read_framed_msg+0xc4>
 801c562:	f103 0c01 	add.w	ip, r3, #1
 801c566:	202a      	movs	r0, #42	; 0x2a
 801c568:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801c56c:	fba5 e202 	umull	lr, r2, r5, r2
 801c570:	0892      	lsrs	r2, r2, #2
 801c572:	fb00 c212 	mls	r2, r0, r2, ip
 801c576:	fa5f fc82 	uxtb.w	ip, r2
 801c57a:	4561      	cmp	r1, ip
 801c57c:	d081      	beq.n	801c482 <uxr_read_framed_msg+0x2e2>
 801c57e:	3302      	adds	r3, #2
 801c580:	4422      	add	r2, r4
 801c582:	0859      	lsrs	r1, r3, #1
 801c584:	7892      	ldrb	r2, [r2, #2]
 801c586:	fba5 c101 	umull	ip, r1, r5, r1
 801c58a:	2a7e      	cmp	r2, #126	; 0x7e
 801c58c:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801c590:	fb00 3311 	mls	r3, r0, r1, r3
 801c594:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801c598:	f000 8091 	beq.w	801c6be <uxr_read_framed_msg+0x51e>
 801c59c:	f082 0220 	eor.w	r2, r2, #32
 801c5a0:	e636      	b.n	801c210 <uxr_read_framed_msg+0x70>
 801c5a2:	1c51      	adds	r1, r2, #1
 801c5a4:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801c5a8:	084b      	lsrs	r3, r1, #1
 801c5aa:	fba5 e303 	umull	lr, r3, r5, r3
 801c5ae:	089b      	lsrs	r3, r3, #2
 801c5b0:	fb0c 1313 	mls	r3, ip, r3, r1
 801c5b4:	b2d9      	uxtb	r1, r3
 801c5b6:	4288      	cmp	r0, r1
 801c5b8:	d09b      	beq.n	801c4f2 <uxr_read_framed_msg+0x352>
 801c5ba:	3202      	adds	r2, #2
 801c5bc:	4423      	add	r3, r4
 801c5be:	0850      	lsrs	r0, r2, #1
 801c5c0:	789b      	ldrb	r3, [r3, #2]
 801c5c2:	fba5 1000 	umull	r1, r0, r5, r0
 801c5c6:	2b7e      	cmp	r3, #126	; 0x7e
 801c5c8:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801c5cc:	fb0c 2210 	mls	r2, ip, r0, r2
 801c5d0:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801c5d4:	d077      	beq.n	801c6c6 <uxr_read_framed_msg+0x526>
 801c5d6:	f083 0120 	eor.w	r1, r3, #32
 801c5da:	e6ea      	b.n	801c3b2 <uxr_read_framed_msg+0x212>
 801c5dc:	f103 0c01 	add.w	ip, r3, #1
 801c5e0:	202a      	movs	r0, #42	; 0x2a
 801c5e2:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801c5e6:	fba5 e202 	umull	lr, r2, r5, r2
 801c5ea:	0892      	lsrs	r2, r2, #2
 801c5ec:	fb00 c212 	mls	r2, r0, r2, ip
 801c5f0:	fa5f fc82 	uxtb.w	ip, r2
 801c5f4:	4561      	cmp	r1, ip
 801c5f6:	f43f af57 	beq.w	801c4a8 <uxr_read_framed_msg+0x308>
 801c5fa:	3302      	adds	r3, #2
 801c5fc:	4422      	add	r2, r4
 801c5fe:	7891      	ldrb	r1, [r2, #2]
 801c600:	085a      	lsrs	r2, r3, #1
 801c602:	fba5 c202 	umull	ip, r2, r5, r2
 801c606:	297e      	cmp	r1, #126	; 0x7e
 801c608:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 801c60c:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801c610:	fb00 3312 	mls	r3, r0, r2, r3
 801c614:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801c618:	f43f af46 	beq.w	801c4a8 <uxr_read_framed_msg+0x308>
 801c61c:	f081 0120 	eor.w	r1, r1, #32
 801c620:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 801c624:	e6ea      	b.n	801c3fc <uxr_read_framed_msg+0x25c>
 801c626:	1c59      	adds	r1, r3, #1
 801c628:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801c62c:	084a      	lsrs	r2, r1, #1
 801c62e:	fba5 e202 	umull	lr, r2, r5, r2
 801c632:	0892      	lsrs	r2, r2, #2
 801c634:	fb0c 1212 	mls	r2, ip, r2, r1
 801c638:	b2d1      	uxtb	r1, r2
 801c63a:	4288      	cmp	r0, r1
 801c63c:	f43f af21 	beq.w	801c482 <uxr_read_framed_msg+0x2e2>
 801c640:	3302      	adds	r3, #2
 801c642:	4422      	add	r2, r4
 801c644:	7891      	ldrb	r1, [r2, #2]
 801c646:	085a      	lsrs	r2, r3, #1
 801c648:	fba5 0202 	umull	r0, r2, r5, r2
 801c64c:	297e      	cmp	r1, #126	; 0x7e
 801c64e:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801c652:	fb0c 3312 	mls	r3, ip, r2, r3
 801c656:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801c65a:	d030      	beq.n	801c6be <uxr_read_framed_msg+0x51e>
 801c65c:	f081 0120 	eor.w	r1, r1, #32
 801c660:	e65d      	b.n	801c31e <uxr_read_framed_msg+0x17e>
 801c662:	1c59      	adds	r1, r3, #1
 801c664:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801c668:	084a      	lsrs	r2, r1, #1
 801c66a:	fba5 e202 	umull	lr, r2, r5, r2
 801c66e:	0892      	lsrs	r2, r2, #2
 801c670:	fb0c 1212 	mls	r2, ip, r2, r1
 801c674:	b2d1      	uxtb	r1, r2
 801c676:	4288      	cmp	r0, r1
 801c678:	f43f af12 	beq.w	801c4a0 <uxr_read_framed_msg+0x300>
 801c67c:	3302      	adds	r3, #2
 801c67e:	4422      	add	r2, r4
 801c680:	7891      	ldrb	r1, [r2, #2]
 801c682:	085a      	lsrs	r2, r3, #1
 801c684:	fba5 0202 	umull	r0, r2, r5, r2
 801c688:	297e      	cmp	r1, #126	; 0x7e
 801c68a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801c68e:	fb0c 3312 	mls	r3, ip, r2, r3
 801c692:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801c696:	d002      	beq.n	801c69e <uxr_read_framed_msg+0x4fe>
 801c698:	f081 0120 	eor.w	r1, r1, #32
 801c69c:	e66a      	b.n	801c374 <uxr_read_framed_msg+0x1d4>
 801c69e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c6a0:	9300      	str	r3, [sp, #0]
 801c6a2:	2302      	movs	r3, #2
 801c6a4:	9301      	str	r3, [sp, #4]
 801c6a6:	464a      	mov	r2, r9
 801c6a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c6aa:	4641      	mov	r1, r8
 801c6ac:	4620      	mov	r0, r4
 801c6ae:	f7ff fce3 	bl	801c078 <uxr_framing_read_transport>
 801c6b2:	2800      	cmp	r0, #0
 801c6b4:	f47f aef2 	bne.w	801c49c <uxr_read_framed_msg+0x2fc>
 801c6b8:	2301      	movs	r3, #1
 801c6ba:	7023      	strb	r3, [r4, #0]
 801c6bc:	e581      	b.n	801c1c2 <uxr_read_framed_msg+0x22>
 801c6be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c6c0:	9300      	str	r3, [sp, #0]
 801c6c2:	2301      	movs	r3, #1
 801c6c4:	e7ee      	b.n	801c6a4 <uxr_read_framed_msg+0x504>
 801c6c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c6c8:	9300      	str	r3, [sp, #0]
 801c6ca:	2303      	movs	r3, #3
 801c6cc:	e7ea      	b.n	801c6a4 <uxr_read_framed_msg+0x504>
 801c6ce:	bf00      	nop

0801c6d0 <rcl_get_automatic_discovery_range>:
 801c6d0:	b530      	push	{r4, r5, lr}
 801c6d2:	2300      	movs	r3, #0
 801c6d4:	b083      	sub	sp, #12
 801c6d6:	9301      	str	r3, [sp, #4]
 801c6d8:	b1c0      	cbz	r0, 801c70c <rcl_get_automatic_discovery_range+0x3c>
 801c6da:	4604      	mov	r4, r0
 801c6dc:	a901      	add	r1, sp, #4
 801c6de:	4818      	ldr	r0, [pc, #96]	; (801c740 <rcl_get_automatic_discovery_range+0x70>)
 801c6e0:	f7fc fbf6 	bl	8018ed0 <rcutils_get_env>
 801c6e4:	b110      	cbz	r0, 801c6ec <rcl_get_automatic_discovery_range+0x1c>
 801c6e6:	2001      	movs	r0, #1
 801c6e8:	b003      	add	sp, #12
 801c6ea:	bd30      	pop	{r4, r5, pc}
 801c6ec:	9d01      	ldr	r5, [sp, #4]
 801c6ee:	782b      	ldrb	r3, [r5, #0]
 801c6f0:	b13b      	cbz	r3, 801c702 <rcl_get_automatic_discovery_range+0x32>
 801c6f2:	4914      	ldr	r1, [pc, #80]	; (801c744 <rcl_get_automatic_discovery_range+0x74>)
 801c6f4:	4628      	mov	r0, r5
 801c6f6:	f7e3 fda3 	bl	8000240 <strcmp>
 801c6fa:	b950      	cbnz	r0, 801c712 <rcl_get_automatic_discovery_range+0x42>
 801c6fc:	2301      	movs	r3, #1
 801c6fe:	7023      	strb	r3, [r4, #0]
 801c700:	e7f2      	b.n	801c6e8 <rcl_get_automatic_discovery_range+0x18>
 801c702:	2303      	movs	r3, #3
 801c704:	2000      	movs	r0, #0
 801c706:	7023      	strb	r3, [r4, #0]
 801c708:	b003      	add	sp, #12
 801c70a:	bd30      	pop	{r4, r5, pc}
 801c70c:	200b      	movs	r0, #11
 801c70e:	b003      	add	sp, #12
 801c710:	bd30      	pop	{r4, r5, pc}
 801c712:	490d      	ldr	r1, [pc, #52]	; (801c748 <rcl_get_automatic_discovery_range+0x78>)
 801c714:	4628      	mov	r0, r5
 801c716:	f7e3 fd93 	bl	8000240 <strcmp>
 801c71a:	b168      	cbz	r0, 801c738 <rcl_get_automatic_discovery_range+0x68>
 801c71c:	490b      	ldr	r1, [pc, #44]	; (801c74c <rcl_get_automatic_discovery_range+0x7c>)
 801c71e:	4628      	mov	r0, r5
 801c720:	f7e3 fd8e 	bl	8000240 <strcmp>
 801c724:	2800      	cmp	r0, #0
 801c726:	d0ec      	beq.n	801c702 <rcl_get_automatic_discovery_range+0x32>
 801c728:	4909      	ldr	r1, [pc, #36]	; (801c750 <rcl_get_automatic_discovery_range+0x80>)
 801c72a:	4628      	mov	r0, r5
 801c72c:	f7e3 fd88 	bl	8000240 <strcmp>
 801c730:	b910      	cbnz	r0, 801c738 <rcl_get_automatic_discovery_range+0x68>
 801c732:	2304      	movs	r3, #4
 801c734:	7023      	strb	r3, [r4, #0]
 801c736:	e7d7      	b.n	801c6e8 <rcl_get_automatic_discovery_range+0x18>
 801c738:	2302      	movs	r3, #2
 801c73a:	2000      	movs	r0, #0
 801c73c:	7023      	strb	r3, [r4, #0]
 801c73e:	e7d3      	b.n	801c6e8 <rcl_get_automatic_discovery_range+0x18>
 801c740:	080216ec 	.word	0x080216ec
 801c744:	0802170c 	.word	0x0802170c
 801c748:	08021710 	.word	0x08021710
 801c74c:	0802171c 	.word	0x0802171c
 801c750:	08021724 	.word	0x08021724

0801c754 <rcl_automatic_discovery_range_to_string>:
 801c754:	2804      	cmp	r0, #4
 801c756:	d803      	bhi.n	801c760 <rcl_automatic_discovery_range_to_string+0xc>
 801c758:	4b02      	ldr	r3, [pc, #8]	; (801c764 <rcl_automatic_discovery_range_to_string+0x10>)
 801c75a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801c75e:	4770      	bx	lr
 801c760:	2000      	movs	r0, #0
 801c762:	4770      	bx	lr
 801c764:	08021814 	.word	0x08021814

0801c768 <rcl_get_discovery_static_peers>:
 801c768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c76c:	2300      	movs	r3, #0
 801c76e:	b08e      	sub	sp, #56	; 0x38
 801c770:	9306      	str	r3, [sp, #24]
 801c772:	2900      	cmp	r1, #0
 801c774:	d04b      	beq.n	801c80e <rcl_get_discovery_static_peers+0xa6>
 801c776:	4605      	mov	r5, r0
 801c778:	2800      	cmp	r0, #0
 801c77a:	d048      	beq.n	801c80e <rcl_get_discovery_static_peers+0xa6>
 801c77c:	460c      	mov	r4, r1
 801c77e:	482c      	ldr	r0, [pc, #176]	; (801c830 <rcl_get_discovery_static_peers+0xc8>)
 801c780:	a906      	add	r1, sp, #24
 801c782:	f7fc fba5 	bl	8018ed0 <rcutils_get_env>
 801c786:	b118      	cbz	r0, 801c790 <rcl_get_discovery_static_peers+0x28>
 801c788:	2001      	movs	r0, #1
 801c78a:	b00e      	add	sp, #56	; 0x38
 801c78c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c790:	9b06      	ldr	r3, [sp, #24]
 801c792:	2b00      	cmp	r3, #0
 801c794:	d0f8      	beq.n	801c788 <rcl_get_discovery_static_peers+0x20>
 801c796:	af07      	add	r7, sp, #28
 801c798:	4638      	mov	r0, r7
 801c79a:	f000 fc73 	bl	801d084 <rcutils_get_zero_initialized_string_array>
 801c79e:	f104 0308 	add.w	r3, r4, #8
 801c7a2:	9703      	str	r7, [sp, #12]
 801c7a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801c7a8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801c7ac:	213b      	movs	r1, #59	; 0x3b
 801c7ae:	9806      	ldr	r0, [sp, #24]
 801c7b0:	e894 000c 	ldmia.w	r4, {r2, r3}
 801c7b4:	f000 fba8 	bl	801cf08 <rcutils_split>
 801c7b8:	2800      	cmp	r0, #0
 801c7ba:	d1e5      	bne.n	801c788 <rcl_get_discovery_static_peers+0x20>
 801c7bc:	4622      	mov	r2, r4
 801c7be:	9907      	ldr	r1, [sp, #28]
 801c7c0:	4628      	mov	r0, r5
 801c7c2:	f000 fcaf 	bl	801d124 <rmw_discovery_options_init>
 801c7c6:	4604      	mov	r4, r0
 801c7c8:	bb78      	cbnz	r0, 801c82a <rcl_get_discovery_static_peers+0xc2>
 801c7ca:	9e07      	ldr	r6, [sp, #28]
 801c7cc:	b336      	cbz	r6, 801c81c <rcl_get_discovery_static_peers+0xb4>
 801c7ce:	f8dd a020 	ldr.w	sl, [sp, #32]
 801c7d2:	4680      	mov	r8, r0
 801c7d4:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 801c7d8:	ea4f 2904 	mov.w	r9, r4, lsl #8
 801c7dc:	4608      	mov	r0, r1
 801c7de:	9105      	str	r1, [sp, #20]
 801c7e0:	f7e3 fd8e 	bl	8000300 <strlen>
 801c7e4:	28ff      	cmp	r0, #255	; 0xff
 801c7e6:	9905      	ldr	r1, [sp, #20]
 801c7e8:	d815      	bhi.n	801c816 <rcl_get_discovery_static_peers+0xae>
 801c7ea:	6868      	ldr	r0, [r5, #4]
 801c7ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 801c7f0:	eb00 2004 	add.w	r0, r0, r4, lsl #8
 801c7f4:	3401      	adds	r4, #1
 801c7f6:	f002 f870 	bl	801e8da <strncpy>
 801c7fa:	686b      	ldr	r3, [r5, #4]
 801c7fc:	9e07      	ldr	r6, [sp, #28]
 801c7fe:	444b      	add	r3, r9
 801c800:	42b4      	cmp	r4, r6
 801c802:	f883 80ff 	strb.w	r8, [r3, #255]	; 0xff
 801c806:	d209      	bcs.n	801c81c <rcl_get_discovery_static_peers+0xb4>
 801c808:	f8dd a020 	ldr.w	sl, [sp, #32]
 801c80c:	e7e2      	b.n	801c7d4 <rcl_get_discovery_static_peers+0x6c>
 801c80e:	200b      	movs	r0, #11
 801c810:	b00e      	add	sp, #56	; 0x38
 801c812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c816:	3401      	adds	r4, #1
 801c818:	42b4      	cmp	r4, r6
 801c81a:	d3db      	bcc.n	801c7d4 <rcl_get_discovery_static_peers+0x6c>
 801c81c:	4638      	mov	r0, r7
 801c81e:	f000 fc4f 	bl	801d0c0 <rcutils_string_array_fini>
 801c822:	3800      	subs	r0, #0
 801c824:	bf18      	it	ne
 801c826:	2001      	movne	r0, #1
 801c828:	e7af      	b.n	801c78a <rcl_get_discovery_static_peers+0x22>
 801c82a:	f7f9 f94f 	bl	8015acc <rcl_convert_rmw_ret_to_rcl_ret>
 801c82e:	e7ac      	b.n	801c78a <rcl_get_discovery_static_peers+0x22>
 801c830:	08021734 	.word	0x08021734

0801c834 <rcl_get_default_domain_id>:
 801c834:	b530      	push	{r4, r5, lr}
 801c836:	2300      	movs	r3, #0
 801c838:	b083      	sub	sp, #12
 801c83a:	9300      	str	r3, [sp, #0]
 801c83c:	b1d0      	cbz	r0, 801c874 <rcl_get_default_domain_id+0x40>
 801c83e:	4604      	mov	r4, r0
 801c840:	4669      	mov	r1, sp
 801c842:	4815      	ldr	r0, [pc, #84]	; (801c898 <rcl_get_default_domain_id+0x64>)
 801c844:	f7fc fb44 	bl	8018ed0 <rcutils_get_env>
 801c848:	4602      	mov	r2, r0
 801c84a:	b110      	cbz	r0, 801c852 <rcl_get_default_domain_id+0x1e>
 801c84c:	2001      	movs	r0, #1
 801c84e:	b003      	add	sp, #12
 801c850:	bd30      	pop	{r4, r5, pc}
 801c852:	9b00      	ldr	r3, [sp, #0]
 801c854:	b18b      	cbz	r3, 801c87a <rcl_get_default_domain_id+0x46>
 801c856:	7818      	ldrb	r0, [r3, #0]
 801c858:	2800      	cmp	r0, #0
 801c85a:	d0f8      	beq.n	801c84e <rcl_get_default_domain_id+0x1a>
 801c85c:	a901      	add	r1, sp, #4
 801c85e:	4618      	mov	r0, r3
 801c860:	9201      	str	r2, [sp, #4]
 801c862:	f001 fe6d 	bl	801e540 <strtoul>
 801c866:	4605      	mov	r5, r0
 801c868:	b150      	cbz	r0, 801c880 <rcl_get_default_domain_id+0x4c>
 801c86a:	1c43      	adds	r3, r0, #1
 801c86c:	d00d      	beq.n	801c88a <rcl_get_default_domain_id+0x56>
 801c86e:	2000      	movs	r0, #0
 801c870:	6025      	str	r5, [r4, #0]
 801c872:	e7ec      	b.n	801c84e <rcl_get_default_domain_id+0x1a>
 801c874:	200b      	movs	r0, #11
 801c876:	b003      	add	sp, #12
 801c878:	bd30      	pop	{r4, r5, pc}
 801c87a:	4618      	mov	r0, r3
 801c87c:	b003      	add	sp, #12
 801c87e:	bd30      	pop	{r4, r5, pc}
 801c880:	9b01      	ldr	r3, [sp, #4]
 801c882:	781b      	ldrb	r3, [r3, #0]
 801c884:	2b00      	cmp	r3, #0
 801c886:	d0f2      	beq.n	801c86e <rcl_get_default_domain_id+0x3a>
 801c888:	e7e0      	b.n	801c84c <rcl_get_default_domain_id+0x18>
 801c88a:	f002 f8fb 	bl	801ea84 <__errno>
 801c88e:	6803      	ldr	r3, [r0, #0]
 801c890:	2b22      	cmp	r3, #34	; 0x22
 801c892:	d1ec      	bne.n	801c86e <rcl_get_default_domain_id+0x3a>
 801c894:	e7da      	b.n	801c84c <rcl_get_default_domain_id+0x18>
 801c896:	bf00      	nop
 801c898:	08021828 	.word	0x08021828

0801c89c <rcl_expand_topic_name>:
 801c89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8a0:	b08d      	sub	sp, #52	; 0x34
 801c8a2:	4698      	mov	r8, r3
 801c8a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c8a6:	9207      	str	r2, [sp, #28]
 801c8a8:	2b00      	cmp	r3, #0
 801c8aa:	bf18      	it	ne
 801c8ac:	f1b8 0f00 	cmpne.w	r8, #0
 801c8b0:	bf0c      	ite	eq
 801c8b2:	2301      	moveq	r3, #1
 801c8b4:	2300      	movne	r3, #0
 801c8b6:	2a00      	cmp	r2, #0
 801c8b8:	bf08      	it	eq
 801c8ba:	f043 0301 	orreq.w	r3, r3, #1
 801c8be:	2900      	cmp	r1, #0
 801c8c0:	bf08      	it	eq
 801c8c2:	f043 0301 	orreq.w	r3, r3, #1
 801c8c6:	2b00      	cmp	r3, #0
 801c8c8:	d13d      	bne.n	801c946 <rcl_expand_topic_name+0xaa>
 801c8ca:	fab0 f280 	clz	r2, r0
 801c8ce:	4604      	mov	r4, r0
 801c8d0:	0952      	lsrs	r2, r2, #5
 801c8d2:	2800      	cmp	r0, #0
 801c8d4:	d037      	beq.n	801c946 <rcl_expand_topic_name+0xaa>
 801c8d6:	460f      	mov	r7, r1
 801c8d8:	a90b      	add	r1, sp, #44	; 0x2c
 801c8da:	f000 fa51 	bl	801cd80 <rcl_validate_topic_name>
 801c8de:	4605      	mov	r5, r0
 801c8e0:	bb68      	cbnz	r0, 801c93e <rcl_expand_topic_name+0xa2>
 801c8e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c8e4:	2b00      	cmp	r3, #0
 801c8e6:	d137      	bne.n	801c958 <rcl_expand_topic_name+0xbc>
 801c8e8:	4602      	mov	r2, r0
 801c8ea:	a90b      	add	r1, sp, #44	; 0x2c
 801c8ec:	4638      	mov	r0, r7
 801c8ee:	f7fc ff69 	bl	80197c4 <rmw_validate_node_name>
 801c8f2:	bb68      	cbnz	r0, 801c950 <rcl_expand_topic_name+0xb4>
 801c8f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c8f6:	2b00      	cmp	r3, #0
 801c8f8:	d133      	bne.n	801c962 <rcl_expand_topic_name+0xc6>
 801c8fa:	462a      	mov	r2, r5
 801c8fc:	a90b      	add	r1, sp, #44	; 0x2c
 801c8fe:	9807      	ldr	r0, [sp, #28]
 801c900:	f7fc ff42 	bl	8019788 <rmw_validate_namespace>
 801c904:	bb20      	cbnz	r0, 801c950 <rcl_expand_topic_name+0xb4>
 801c906:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801c908:	2d00      	cmp	r5, #0
 801c90a:	f040 80a2 	bne.w	801ca52 <rcl_expand_topic_name+0x1b6>
 801c90e:	217b      	movs	r1, #123	; 0x7b
 801c910:	4620      	mov	r0, r4
 801c912:	f001 ffc3 	bl	801e89c <strchr>
 801c916:	7823      	ldrb	r3, [r4, #0]
 801c918:	4681      	mov	r9, r0
 801c91a:	bb20      	cbnz	r0, 801c966 <rcl_expand_topic_name+0xca>
 801c91c:	2b2f      	cmp	r3, #47	; 0x2f
 801c91e:	d122      	bne.n	801c966 <rcl_expand_topic_name+0xca>
 801c920:	ab19      	add	r3, sp, #100	; 0x64
 801c922:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c926:	ab16      	add	r3, sp, #88	; 0x58
 801c928:	e88d 0003 	stmia.w	sp, {r0, r1}
 801c92c:	4620      	mov	r0, r4
 801c92e:	cb0e      	ldmia	r3, {r1, r2, r3}
 801c930:	f7fc fc30 	bl	8019194 <rcutils_strdup>
 801c934:	2800      	cmp	r0, #0
 801c936:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c938:	bf08      	it	eq
 801c93a:	250a      	moveq	r5, #10
 801c93c:	6018      	str	r0, [r3, #0]
 801c93e:	4628      	mov	r0, r5
 801c940:	b00d      	add	sp, #52	; 0x34
 801c942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c946:	250b      	movs	r5, #11
 801c948:	4628      	mov	r0, r5
 801c94a:	b00d      	add	sp, #52	; 0x34
 801c94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c950:	f7f9 f8bc 	bl	8015acc <rcl_convert_rmw_ret_to_rcl_ret>
 801c954:	4605      	mov	r5, r0
 801c956:	e7f2      	b.n	801c93e <rcl_expand_topic_name+0xa2>
 801c958:	2567      	movs	r5, #103	; 0x67
 801c95a:	4628      	mov	r0, r5
 801c95c:	b00d      	add	sp, #52	; 0x34
 801c95e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c962:	25c9      	movs	r5, #201	; 0xc9
 801c964:	e7eb      	b.n	801c93e <rcl_expand_topic_name+0xa2>
 801c966:	2b7e      	cmp	r3, #126	; 0x7e
 801c968:	d075      	beq.n	801ca56 <rcl_expand_topic_name+0x1ba>
 801c96a:	f1b9 0f00 	cmp.w	r9, #0
 801c96e:	f000 80c2 	beq.w	801caf6 <rcl_expand_topic_name+0x25a>
 801c972:	2300      	movs	r3, #0
 801c974:	46a2      	mov	sl, r4
 801c976:	461e      	mov	r6, r3
 801c978:	9508      	str	r5, [sp, #32]
 801c97a:	4655      	mov	r5, sl
 801c97c:	9409      	str	r4, [sp, #36]	; 0x24
 801c97e:	46b2      	mov	sl, r6
 801c980:	464c      	mov	r4, r9
 801c982:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801c986:	2c00      	cmp	r4, #0
 801c988:	f000 80ae 	beq.w	801cae8 <rcl_expand_topic_name+0x24c>
 801c98c:	217d      	movs	r1, #125	; 0x7d
 801c98e:	4628      	mov	r0, r5
 801c990:	f001 ff84 	bl	801e89c <strchr>
 801c994:	eba0 0904 	sub.w	r9, r0, r4
 801c998:	4621      	mov	r1, r4
 801c99a:	4869      	ldr	r0, [pc, #420]	; (801cb40 <rcl_expand_topic_name+0x2a4>)
 801c99c:	f109 0601 	add.w	r6, r9, #1
 801c9a0:	4632      	mov	r2, r6
 801c9a2:	f001 ff88 	bl	801e8b6 <strncmp>
 801c9a6:	2800      	cmp	r0, #0
 801c9a8:	d051      	beq.n	801ca4e <rcl_expand_topic_name+0x1b2>
 801c9aa:	4632      	mov	r2, r6
 801c9ac:	4621      	mov	r1, r4
 801c9ae:	4865      	ldr	r0, [pc, #404]	; (801cb44 <rcl_expand_topic_name+0x2a8>)
 801c9b0:	f001 ff81 	bl	801e8b6 <strncmp>
 801c9b4:	b128      	cbz	r0, 801c9c2 <rcl_expand_topic_name+0x126>
 801c9b6:	4632      	mov	r2, r6
 801c9b8:	4621      	mov	r1, r4
 801c9ba:	4863      	ldr	r0, [pc, #396]	; (801cb48 <rcl_expand_topic_name+0x2ac>)
 801c9bc:	f001 ff7b 	bl	801e8b6 <strncmp>
 801c9c0:	bb38      	cbnz	r0, 801ca12 <rcl_expand_topic_name+0x176>
 801c9c2:	46d9      	mov	r9, fp
 801c9c4:	ab18      	add	r3, sp, #96	; 0x60
 801c9c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801c9ca:	ab16      	add	r3, sp, #88	; 0x58
 801c9cc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801c9d0:	4620      	mov	r0, r4
 801c9d2:	4631      	mov	r1, r6
 801c9d4:	cb0c      	ldmia	r3, {r2, r3}
 801c9d6:	f7fc fc03 	bl	80191e0 <rcutils_strndup>
 801c9da:	4604      	mov	r4, r0
 801c9dc:	2800      	cmp	r0, #0
 801c9de:	f000 80a3 	beq.w	801cb28 <rcl_expand_topic_name+0x28c>
 801c9e2:	464a      	mov	r2, r9
 801c9e4:	4628      	mov	r0, r5
 801c9e6:	ab16      	add	r3, sp, #88	; 0x58
 801c9e8:	4621      	mov	r1, r4
 801c9ea:	f7fc fad3 	bl	8018f94 <rcutils_repl_str>
 801c9ee:	991a      	ldr	r1, [sp, #104]	; 0x68
 801c9f0:	4605      	mov	r5, r0
 801c9f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c9f4:	4620      	mov	r0, r4
 801c9f6:	4798      	blx	r3
 801c9f8:	4650      	mov	r0, sl
 801c9fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c9fc:	991a      	ldr	r1, [sp, #104]	; 0x68
 801c9fe:	4798      	blx	r3
 801ca00:	2d00      	cmp	r5, #0
 801ca02:	d06c      	beq.n	801cade <rcl_expand_topic_name+0x242>
 801ca04:	217b      	movs	r1, #123	; 0x7b
 801ca06:	4628      	mov	r0, r5
 801ca08:	f001 ff48 	bl	801e89c <strchr>
 801ca0c:	46aa      	mov	sl, r5
 801ca0e:	4604      	mov	r4, r0
 801ca10:	e7b9      	b.n	801c986 <rcl_expand_topic_name+0xea>
 801ca12:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 801ca16:	1c61      	adds	r1, r4, #1
 801ca18:	4640      	mov	r0, r8
 801ca1a:	f7fc fcdd 	bl	80193d8 <rcutils_string_map_getn>
 801ca1e:	4681      	mov	r9, r0
 801ca20:	2800      	cmp	r0, #0
 801ca22:	d1cf      	bne.n	801c9c4 <rcl_expand_topic_name+0x128>
 801ca24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ca26:	aa18      	add	r2, sp, #96	; 0x60
 801ca28:	2569      	movs	r5, #105	; 0x69
 801ca2a:	6018      	str	r0, [r3, #0]
 801ca2c:	ab16      	add	r3, sp, #88	; 0x58
 801ca2e:	ca07      	ldmia	r2, {r0, r1, r2}
 801ca30:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801ca34:	4631      	mov	r1, r6
 801ca36:	4620      	mov	r0, r4
 801ca38:	cb0c      	ldmia	r3, {r2, r3}
 801ca3a:	f7fc fbd1 	bl	80191e0 <rcutils_strndup>
 801ca3e:	991a      	ldr	r1, [sp, #104]	; 0x68
 801ca40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ca42:	4798      	blx	r3
 801ca44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ca46:	991a      	ldr	r1, [sp, #104]	; 0x68
 801ca48:	4650      	mov	r0, sl
 801ca4a:	4798      	blx	r3
 801ca4c:	e777      	b.n	801c93e <rcl_expand_topic_name+0xa2>
 801ca4e:	46b9      	mov	r9, r7
 801ca50:	e7b8      	b.n	801c9c4 <rcl_expand_topic_name+0x128>
 801ca52:	25ca      	movs	r5, #202	; 0xca
 801ca54:	e773      	b.n	801c93e <rcl_expand_topic_name+0xa2>
 801ca56:	9e07      	ldr	r6, [sp, #28]
 801ca58:	4630      	mov	r0, r6
 801ca5a:	f7e3 fc51 	bl	8000300 <strlen>
 801ca5e:	4a3b      	ldr	r2, [pc, #236]	; (801cb4c <rcl_expand_topic_name+0x2b0>)
 801ca60:	4b3b      	ldr	r3, [pc, #236]	; (801cb50 <rcl_expand_topic_name+0x2b4>)
 801ca62:	9603      	str	r6, [sp, #12]
 801ca64:	2801      	cmp	r0, #1
 801ca66:	bf18      	it	ne
 801ca68:	4613      	movne	r3, r2
 801ca6a:	9704      	str	r7, [sp, #16]
 801ca6c:	9302      	str	r3, [sp, #8]
 801ca6e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801ca70:	9300      	str	r3, [sp, #0]
 801ca72:	1c63      	adds	r3, r4, #1
 801ca74:	9305      	str	r3, [sp, #20]
 801ca76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801ca7a:	9301      	str	r3, [sp, #4]
 801ca7c:	ab16      	add	r3, sp, #88	; 0x58
 801ca7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801ca80:	f7fc fa4e 	bl	8018f20 <rcutils_format_string_limit>
 801ca84:	4606      	mov	r6, r0
 801ca86:	b350      	cbz	r0, 801cade <rcl_expand_topic_name+0x242>
 801ca88:	f1b9 0f00 	cmp.w	r9, #0
 801ca8c:	d005      	beq.n	801ca9a <rcl_expand_topic_name+0x1fe>
 801ca8e:	217b      	movs	r1, #123	; 0x7b
 801ca90:	46b2      	mov	sl, r6
 801ca92:	f001 ff03 	bl	801e89c <strchr>
 801ca96:	4681      	mov	r9, r0
 801ca98:	e76e      	b.n	801c978 <rcl_expand_topic_name+0xdc>
 801ca9a:	7833      	ldrb	r3, [r6, #0]
 801ca9c:	2b2f      	cmp	r3, #47	; 0x2f
 801ca9e:	d01b      	beq.n	801cad8 <rcl_expand_topic_name+0x23c>
 801caa0:	9c07      	ldr	r4, [sp, #28]
 801caa2:	4620      	mov	r0, r4
 801caa4:	f7e3 fc2c 	bl	8000300 <strlen>
 801caa8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801caac:	4a29      	ldr	r2, [pc, #164]	; (801cb54 <rcl_expand_topic_name+0x2b8>)
 801caae:	9301      	str	r3, [sp, #4]
 801cab0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801cab2:	9604      	str	r6, [sp, #16]
 801cab4:	9300      	str	r3, [sp, #0]
 801cab6:	4b28      	ldr	r3, [pc, #160]	; (801cb58 <rcl_expand_topic_name+0x2bc>)
 801cab8:	9403      	str	r4, [sp, #12]
 801caba:	2801      	cmp	r0, #1
 801cabc:	bf18      	it	ne
 801cabe:	4613      	movne	r3, r2
 801cac0:	9302      	str	r3, [sp, #8]
 801cac2:	ab16      	add	r3, sp, #88	; 0x58
 801cac4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801cac6:	f7fc fa2b 	bl	8018f20 <rcutils_format_string_limit>
 801caca:	4603      	mov	r3, r0
 801cacc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801cace:	4630      	mov	r0, r6
 801cad0:	991a      	ldr	r1, [sp, #104]	; 0x68
 801cad2:	461e      	mov	r6, r3
 801cad4:	4790      	blx	r2
 801cad6:	b116      	cbz	r6, 801cade <rcl_expand_topic_name+0x242>
 801cad8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801cada:	601e      	str	r6, [r3, #0]
 801cadc:	e72f      	b.n	801c93e <rcl_expand_topic_name+0xa2>
 801cade:	2300      	movs	r3, #0
 801cae0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801cae2:	250a      	movs	r5, #10
 801cae4:	6013      	str	r3, [r2, #0]
 801cae6:	e72a      	b.n	801c93e <rcl_expand_topic_name+0xa2>
 801cae8:	4653      	mov	r3, sl
 801caea:	4656      	mov	r6, sl
 801caec:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 801caf0:	2b00      	cmp	r3, #0
 801caf2:	d1d2      	bne.n	801ca9a <rcl_expand_topic_name+0x1fe>
 801caf4:	7823      	ldrb	r3, [r4, #0]
 801caf6:	2b2f      	cmp	r3, #47	; 0x2f
 801caf8:	d01e      	beq.n	801cb38 <rcl_expand_topic_name+0x29c>
 801cafa:	9e07      	ldr	r6, [sp, #28]
 801cafc:	4630      	mov	r0, r6
 801cafe:	f7e3 fbff 	bl	8000300 <strlen>
 801cb02:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801cb04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801cb08:	9603      	str	r6, [sp, #12]
 801cb0a:	9404      	str	r4, [sp, #16]
 801cb0c:	e9cd 2300 	strd	r2, r3, [sp]
 801cb10:	4a10      	ldr	r2, [pc, #64]	; (801cb54 <rcl_expand_topic_name+0x2b8>)
 801cb12:	4b11      	ldr	r3, [pc, #68]	; (801cb58 <rcl_expand_topic_name+0x2bc>)
 801cb14:	2801      	cmp	r0, #1
 801cb16:	bf18      	it	ne
 801cb18:	4613      	movne	r3, r2
 801cb1a:	9302      	str	r3, [sp, #8]
 801cb1c:	ab16      	add	r3, sp, #88	; 0x58
 801cb1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801cb20:	f7fc f9fe 	bl	8018f20 <rcutils_format_string_limit>
 801cb24:	4606      	mov	r6, r0
 801cb26:	e7d6      	b.n	801cad6 <rcl_expand_topic_name+0x23a>
 801cb28:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
 801cb2c:	4650      	mov	r0, sl
 801cb2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801cb30:	6014      	str	r4, [r2, #0]
 801cb32:	250a      	movs	r5, #10
 801cb34:	4798      	blx	r3
 801cb36:	e702      	b.n	801c93e <rcl_expand_topic_name+0xa2>
 801cb38:	2300      	movs	r3, #0
 801cb3a:	461e      	mov	r6, r3
 801cb3c:	e7cc      	b.n	801cad8 <rcl_expand_topic_name+0x23c>
 801cb3e:	bf00      	nop
 801cb40:	08021840 	.word	0x08021840
 801cb44:	08021848 	.word	0x08021848
 801cb48:	08021850 	.word	0x08021850
 801cb4c:	08021838 	.word	0x08021838
 801cb50:	080208f0 	.word	0x080208f0
 801cb54:	08020e38 	.word	0x08020e38
 801cb58:	08020900 	.word	0x08020900

0801cb5c <rcl_get_default_topic_name_substitutions>:
 801cb5c:	2800      	cmp	r0, #0
 801cb5e:	bf0c      	ite	eq
 801cb60:	200b      	moveq	r0, #11
 801cb62:	2000      	movne	r0, #0
 801cb64:	4770      	bx	lr
 801cb66:	bf00      	nop

0801cb68 <rcl_get_zero_initialized_guard_condition>:
 801cb68:	4a03      	ldr	r2, [pc, #12]	; (801cb78 <rcl_get_zero_initialized_guard_condition+0x10>)
 801cb6a:	4603      	mov	r3, r0
 801cb6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801cb70:	e883 0003 	stmia.w	r3, {r0, r1}
 801cb74:	4618      	mov	r0, r3
 801cb76:	4770      	bx	lr
 801cb78:	0802185c 	.word	0x0802185c

0801cb7c <rcl_guard_condition_init>:
 801cb7c:	b082      	sub	sp, #8
 801cb7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cb80:	b087      	sub	sp, #28
 801cb82:	4604      	mov	r4, r0
 801cb84:	460d      	mov	r5, r1
 801cb86:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 801cb8a:	f10d 0c04 	add.w	ip, sp, #4
 801cb8e:	e9ce 2300 	strd	r2, r3, [lr]
 801cb92:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801cb96:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801cb9a:	f8de 3000 	ldr.w	r3, [lr]
 801cb9e:	a801      	add	r0, sp, #4
 801cba0:	f8cc 3000 	str.w	r3, [ip]
 801cba4:	f7f2 f8d4 	bl	800ed50 <rcutils_allocator_is_valid>
 801cba8:	b354      	cbz	r4, 801cc00 <rcl_guard_condition_init+0x84>
 801cbaa:	f080 0301 	eor.w	r3, r0, #1
 801cbae:	b2db      	uxtb	r3, r3
 801cbb0:	bb33      	cbnz	r3, 801cc00 <rcl_guard_condition_init+0x84>
 801cbb2:	6866      	ldr	r6, [r4, #4]
 801cbb4:	b9ee      	cbnz	r6, 801cbf2 <rcl_guard_condition_init+0x76>
 801cbb6:	b31d      	cbz	r5, 801cc00 <rcl_guard_condition_init+0x84>
 801cbb8:	4628      	mov	r0, r5
 801cbba:	f7f8 ffa5 	bl	8015b08 <rcl_context_is_valid>
 801cbbe:	b308      	cbz	r0, 801cc04 <rcl_guard_condition_init+0x88>
 801cbc0:	9b01      	ldr	r3, [sp, #4]
 801cbc2:	201c      	movs	r0, #28
 801cbc4:	9905      	ldr	r1, [sp, #20]
 801cbc6:	4798      	blx	r3
 801cbc8:	4607      	mov	r7, r0
 801cbca:	6060      	str	r0, [r4, #4]
 801cbcc:	b310      	cbz	r0, 801cc14 <rcl_guard_condition_init+0x98>
 801cbce:	6828      	ldr	r0, [r5, #0]
 801cbd0:	3028      	adds	r0, #40	; 0x28
 801cbd2:	f000 fbbb 	bl	801d34c <rmw_create_guard_condition>
 801cbd6:	6038      	str	r0, [r7, #0]
 801cbd8:	6860      	ldr	r0, [r4, #4]
 801cbda:	6807      	ldr	r7, [r0, #0]
 801cbdc:	b1a7      	cbz	r7, 801cc08 <rcl_guard_condition_init+0x8c>
 801cbde:	2301      	movs	r3, #1
 801cbe0:	ac01      	add	r4, sp, #4
 801cbe2:	f100 0708 	add.w	r7, r0, #8
 801cbe6:	7103      	strb	r3, [r0, #4]
 801cbe8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801cbea:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801cbec:	6823      	ldr	r3, [r4, #0]
 801cbee:	603b      	str	r3, [r7, #0]
 801cbf0:	e000      	b.n	801cbf4 <rcl_guard_condition_init+0x78>
 801cbf2:	2664      	movs	r6, #100	; 0x64
 801cbf4:	4630      	mov	r0, r6
 801cbf6:	b007      	add	sp, #28
 801cbf8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801cbfc:	b002      	add	sp, #8
 801cbfe:	4770      	bx	lr
 801cc00:	260b      	movs	r6, #11
 801cc02:	e7f7      	b.n	801cbf4 <rcl_guard_condition_init+0x78>
 801cc04:	2665      	movs	r6, #101	; 0x65
 801cc06:	e7f5      	b.n	801cbf4 <rcl_guard_condition_init+0x78>
 801cc08:	9b02      	ldr	r3, [sp, #8]
 801cc0a:	2601      	movs	r6, #1
 801cc0c:	9905      	ldr	r1, [sp, #20]
 801cc0e:	4798      	blx	r3
 801cc10:	6067      	str	r7, [r4, #4]
 801cc12:	e7ef      	b.n	801cbf4 <rcl_guard_condition_init+0x78>
 801cc14:	260a      	movs	r6, #10
 801cc16:	e7ed      	b.n	801cbf4 <rcl_guard_condition_init+0x78>

0801cc18 <rcl_guard_condition_init_from_rmw>:
 801cc18:	b082      	sub	sp, #8
 801cc1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cc1e:	b086      	sub	sp, #24
 801cc20:	4604      	mov	r4, r0
 801cc22:	460e      	mov	r6, r1
 801cc24:	4615      	mov	r5, r2
 801cc26:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801cc2a:	f10d 0e04 	add.w	lr, sp, #4
 801cc2e:	f84c 3f04 	str.w	r3, [ip, #4]!
 801cc32:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801cc36:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801cc3a:	f8dc 3000 	ldr.w	r3, [ip]
 801cc3e:	a801      	add	r0, sp, #4
 801cc40:	f8ce 3000 	str.w	r3, [lr]
 801cc44:	f7f2 f884 	bl	800ed50 <rcutils_allocator_is_valid>
 801cc48:	f080 0301 	eor.w	r3, r0, #1
 801cc4c:	b2db      	uxtb	r3, r3
 801cc4e:	bb3b      	cbnz	r3, 801cca0 <rcl_guard_condition_init_from_rmw+0x88>
 801cc50:	b334      	cbz	r4, 801cca0 <rcl_guard_condition_init_from_rmw+0x88>
 801cc52:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801cc56:	f1b8 0f00 	cmp.w	r8, #0
 801cc5a:	d11a      	bne.n	801cc92 <rcl_guard_condition_init_from_rmw+0x7a>
 801cc5c:	b305      	cbz	r5, 801cca0 <rcl_guard_condition_init_from_rmw+0x88>
 801cc5e:	4628      	mov	r0, r5
 801cc60:	f7f8 ff52 	bl	8015b08 <rcl_context_is_valid>
 801cc64:	b1f0      	cbz	r0, 801cca4 <rcl_guard_condition_init_from_rmw+0x8c>
 801cc66:	9b01      	ldr	r3, [sp, #4]
 801cc68:	201c      	movs	r0, #28
 801cc6a:	9905      	ldr	r1, [sp, #20]
 801cc6c:	4798      	blx	r3
 801cc6e:	4607      	mov	r7, r0
 801cc70:	6060      	str	r0, [r4, #4]
 801cc72:	b320      	cbz	r0, 801ccbe <rcl_guard_condition_init_from_rmw+0xa6>
 801cc74:	b1c6      	cbz	r6, 801cca8 <rcl_guard_condition_init_from_rmw+0x90>
 801cc76:	6006      	str	r6, [r0, #0]
 801cc78:	f880 8004 	strb.w	r8, [r0, #4]
 801cc7c:	ac01      	add	r4, sp, #4
 801cc7e:	f107 0c08 	add.w	ip, r7, #8
 801cc82:	2500      	movs	r5, #0
 801cc84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801cc86:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801cc8a:	6823      	ldr	r3, [r4, #0]
 801cc8c:	f8cc 3000 	str.w	r3, [ip]
 801cc90:	e000      	b.n	801cc94 <rcl_guard_condition_init_from_rmw+0x7c>
 801cc92:	2564      	movs	r5, #100	; 0x64
 801cc94:	4628      	mov	r0, r5
 801cc96:	b006      	add	sp, #24
 801cc98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cc9c:	b002      	add	sp, #8
 801cc9e:	4770      	bx	lr
 801cca0:	250b      	movs	r5, #11
 801cca2:	e7f7      	b.n	801cc94 <rcl_guard_condition_init_from_rmw+0x7c>
 801cca4:	2565      	movs	r5, #101	; 0x65
 801cca6:	e7f5      	b.n	801cc94 <rcl_guard_condition_init_from_rmw+0x7c>
 801cca8:	6828      	ldr	r0, [r5, #0]
 801ccaa:	3028      	adds	r0, #40	; 0x28
 801ccac:	f000 fb4e 	bl	801d34c <rmw_create_guard_condition>
 801ccb0:	6038      	str	r0, [r7, #0]
 801ccb2:	6867      	ldr	r7, [r4, #4]
 801ccb4:	683e      	ldr	r6, [r7, #0]
 801ccb6:	b126      	cbz	r6, 801ccc2 <rcl_guard_condition_init_from_rmw+0xaa>
 801ccb8:	2301      	movs	r3, #1
 801ccba:	713b      	strb	r3, [r7, #4]
 801ccbc:	e7de      	b.n	801cc7c <rcl_guard_condition_init_from_rmw+0x64>
 801ccbe:	250a      	movs	r5, #10
 801ccc0:	e7e8      	b.n	801cc94 <rcl_guard_condition_init_from_rmw+0x7c>
 801ccc2:	9b02      	ldr	r3, [sp, #8]
 801ccc4:	4638      	mov	r0, r7
 801ccc6:	9905      	ldr	r1, [sp, #20]
 801ccc8:	2501      	movs	r5, #1
 801ccca:	4798      	blx	r3
 801cccc:	6066      	str	r6, [r4, #4]
 801ccce:	e7e1      	b.n	801cc94 <rcl_guard_condition_init_from_rmw+0x7c>

0801ccd0 <rcl_guard_condition_fini>:
 801ccd0:	b570      	push	{r4, r5, r6, lr}
 801ccd2:	b082      	sub	sp, #8
 801ccd4:	b1f0      	cbz	r0, 801cd14 <rcl_guard_condition_fini+0x44>
 801ccd6:	6843      	ldr	r3, [r0, #4]
 801ccd8:	4604      	mov	r4, r0
 801ccda:	b163      	cbz	r3, 801ccf6 <rcl_guard_condition_fini+0x26>
 801ccdc:	6818      	ldr	r0, [r3, #0]
 801ccde:	68de      	ldr	r6, [r3, #12]
 801cce0:	6999      	ldr	r1, [r3, #24]
 801cce2:	b160      	cbz	r0, 801ccfe <rcl_guard_condition_fini+0x2e>
 801cce4:	791d      	ldrb	r5, [r3, #4]
 801cce6:	b965      	cbnz	r5, 801cd02 <rcl_guard_condition_fini+0x32>
 801cce8:	4618      	mov	r0, r3
 801ccea:	47b0      	blx	r6
 801ccec:	2300      	movs	r3, #0
 801ccee:	4628      	mov	r0, r5
 801ccf0:	6063      	str	r3, [r4, #4]
 801ccf2:	b002      	add	sp, #8
 801ccf4:	bd70      	pop	{r4, r5, r6, pc}
 801ccf6:	461d      	mov	r5, r3
 801ccf8:	4628      	mov	r0, r5
 801ccfa:	b002      	add	sp, #8
 801ccfc:	bd70      	pop	{r4, r5, r6, pc}
 801ccfe:	4605      	mov	r5, r0
 801cd00:	e7f2      	b.n	801cce8 <rcl_guard_condition_fini+0x18>
 801cd02:	9101      	str	r1, [sp, #4]
 801cd04:	f000 fb38 	bl	801d378 <rmw_destroy_guard_condition>
 801cd08:	1e05      	subs	r5, r0, #0
 801cd0a:	6863      	ldr	r3, [r4, #4]
 801cd0c:	9901      	ldr	r1, [sp, #4]
 801cd0e:	bf18      	it	ne
 801cd10:	2501      	movne	r5, #1
 801cd12:	e7e9      	b.n	801cce8 <rcl_guard_condition_fini+0x18>
 801cd14:	250b      	movs	r5, #11
 801cd16:	4628      	mov	r0, r5
 801cd18:	b002      	add	sp, #8
 801cd1a:	bd70      	pop	{r4, r5, r6, pc}

0801cd1c <rcl_guard_condition_get_default_options>:
 801cd1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cd1e:	b087      	sub	sp, #28
 801cd20:	4606      	mov	r6, r0
 801cd22:	4c0b      	ldr	r4, [pc, #44]	; (801cd50 <rcl_guard_condition_get_default_options+0x34>)
 801cd24:	4668      	mov	r0, sp
 801cd26:	f7f2 f805 	bl	800ed34 <rcutils_get_default_allocator>
 801cd2a:	46ee      	mov	lr, sp
 801cd2c:	46a4      	mov	ip, r4
 801cd2e:	4625      	mov	r5, r4
 801cd30:	4634      	mov	r4, r6
 801cd32:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801cd36:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801cd3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801cd3c:	f8de 7000 	ldr.w	r7, [lr]
 801cd40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801cd42:	4630      	mov	r0, r6
 801cd44:	f8cc 7000 	str.w	r7, [ip]
 801cd48:	6027      	str	r7, [r4, #0]
 801cd4a:	b007      	add	sp, #28
 801cd4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cd4e:	bf00      	nop
 801cd50:	20011d68 	.word	0x20011d68

0801cd54 <rcl_trigger_guard_condition>:
 801cd54:	b148      	cbz	r0, 801cd6a <rcl_trigger_guard_condition+0x16>
 801cd56:	b508      	push	{r3, lr}
 801cd58:	6843      	ldr	r3, [r0, #4]
 801cd5a:	b143      	cbz	r3, 801cd6e <rcl_trigger_guard_condition+0x1a>
 801cd5c:	6818      	ldr	r0, [r3, #0]
 801cd5e:	f000 fb1f 	bl	801d3a0 <rmw_trigger_guard_condition>
 801cd62:	3800      	subs	r0, #0
 801cd64:	bf18      	it	ne
 801cd66:	2001      	movne	r0, #1
 801cd68:	bd08      	pop	{r3, pc}
 801cd6a:	200b      	movs	r0, #11
 801cd6c:	4770      	bx	lr
 801cd6e:	200b      	movs	r0, #11
 801cd70:	bd08      	pop	{r3, pc}
 801cd72:	bf00      	nop

0801cd74 <rcl_guard_condition_get_rmw_handle>:
 801cd74:	b110      	cbz	r0, 801cd7c <rcl_guard_condition_get_rmw_handle+0x8>
 801cd76:	6840      	ldr	r0, [r0, #4]
 801cd78:	b100      	cbz	r0, 801cd7c <rcl_guard_condition_get_rmw_handle+0x8>
 801cd7a:	6800      	ldr	r0, [r0, #0]
 801cd7c:	4770      	bx	lr
 801cd7e:	bf00      	nop

0801cd80 <rcl_validate_topic_name>:
 801cd80:	2800      	cmp	r0, #0
 801cd82:	f000 8089 	beq.w	801ce98 <rcl_validate_topic_name+0x118>
 801cd86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cd8a:	460e      	mov	r6, r1
 801cd8c:	2900      	cmp	r1, #0
 801cd8e:	f000 8085 	beq.w	801ce9c <rcl_validate_topic_name+0x11c>
 801cd92:	4604      	mov	r4, r0
 801cd94:	4617      	mov	r7, r2
 801cd96:	f7e3 fab3 	bl	8000300 <strlen>
 801cd9a:	b1b0      	cbz	r0, 801cdca <rcl_validate_topic_name+0x4a>
 801cd9c:	f894 e000 	ldrb.w	lr, [r4]
 801cda0:	f8df c160 	ldr.w	ip, [pc, #352]	; 801cf04 <rcl_validate_topic_name+0x184>
 801cda4:	f81c 300e 	ldrb.w	r3, [ip, lr]
 801cda8:	f013 0304 	ands.w	r3, r3, #4
 801cdac:	d139      	bne.n	801ce22 <rcl_validate_topic_name+0xa2>
 801cdae:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 801cdb2:	f814 2008 	ldrb.w	r2, [r4, r8]
 801cdb6:	2a2f      	cmp	r2, #47	; 0x2f
 801cdb8:	d10f      	bne.n	801cdda <rcl_validate_topic_name+0x5a>
 801cdba:	2202      	movs	r2, #2
 801cdbc:	6032      	str	r2, [r6, #0]
 801cdbe:	b3a7      	cbz	r7, 801ce2a <rcl_validate_topic_name+0xaa>
 801cdc0:	4618      	mov	r0, r3
 801cdc2:	f8c7 8000 	str.w	r8, [r7]
 801cdc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cdca:	2301      	movs	r3, #1
 801cdcc:	6033      	str	r3, [r6, #0]
 801cdce:	b367      	cbz	r7, 801ce2a <rcl_validate_topic_name+0xaa>
 801cdd0:	2300      	movs	r3, #0
 801cdd2:	4618      	mov	r0, r3
 801cdd4:	603b      	str	r3, [r7, #0]
 801cdd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cdda:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 801cdde:	461d      	mov	r5, r3
 801cde0:	4619      	mov	r1, r3
 801cde2:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801cde6:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 801cdea:	f1b9 0f09 	cmp.w	r9, #9
 801cdee:	d91f      	bls.n	801ce30 <rcl_validate_topic_name+0xb0>
 801cdf0:	f022 0920 	bic.w	r9, r2, #32
 801cdf4:	f1a9 0941 	sub.w	r9, r9, #65	; 0x41
 801cdf8:	f1b9 0f19 	cmp.w	r9, #25
 801cdfc:	d918      	bls.n	801ce30 <rcl_validate_topic_name+0xb0>
 801cdfe:	2a5f      	cmp	r2, #95	; 0x5f
 801ce00:	d024      	beq.n	801ce4c <rcl_validate_topic_name+0xcc>
 801ce02:	2a2f      	cmp	r2, #47	; 0x2f
 801ce04:	d058      	beq.n	801ceb8 <rcl_validate_topic_name+0x138>
 801ce06:	2a7e      	cmp	r2, #126	; 0x7e
 801ce08:	d04a      	beq.n	801cea0 <rcl_validate_topic_name+0x120>
 801ce0a:	2a7b      	cmp	r2, #123	; 0x7b
 801ce0c:	d05b      	beq.n	801cec6 <rcl_validate_topic_name+0x146>
 801ce0e:	2a7d      	cmp	r2, #125	; 0x7d
 801ce10:	d169      	bne.n	801cee6 <rcl_validate_topic_name+0x166>
 801ce12:	2d00      	cmp	r5, #0
 801ce14:	d15c      	bne.n	801ced0 <rcl_validate_topic_name+0x150>
 801ce16:	2305      	movs	r3, #5
 801ce18:	6033      	str	r3, [r6, #0]
 801ce1a:	b137      	cbz	r7, 801ce2a <rcl_validate_topic_name+0xaa>
 801ce1c:	2000      	movs	r0, #0
 801ce1e:	6039      	str	r1, [r7, #0]
 801ce20:	e7d9      	b.n	801cdd6 <rcl_validate_topic_name+0x56>
 801ce22:	2304      	movs	r3, #4
 801ce24:	6033      	str	r3, [r6, #0]
 801ce26:	2f00      	cmp	r7, #0
 801ce28:	d1d2      	bne.n	801cdd0 <rcl_validate_topic_name+0x50>
 801ce2a:	2000      	movs	r0, #0
 801ce2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ce30:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801ce34:	0752      	lsls	r2, r2, #29
 801ce36:	d509      	bpl.n	801ce4c <rcl_validate_topic_name+0xcc>
 801ce38:	2900      	cmp	r1, #0
 801ce3a:	bf0c      	ite	eq
 801ce3c:	2200      	moveq	r2, #0
 801ce3e:	f005 0201 	andne.w	r2, r5, #1
 801ce42:	b11a      	cbz	r2, 801ce4c <rcl_validate_topic_name+0xcc>
 801ce44:	1e4d      	subs	r5, r1, #1
 801ce46:	429d      	cmp	r5, r3
 801ce48:	d031      	beq.n	801ceae <rcl_validate_topic_name+0x12e>
 801ce4a:	4615      	mov	r5, r2
 801ce4c:	3101      	adds	r1, #1
 801ce4e:	4288      	cmp	r0, r1
 801ce50:	d1c7      	bne.n	801cde2 <rcl_validate_topic_name+0x62>
 801ce52:	2d00      	cmp	r5, #0
 801ce54:	d142      	bne.n	801cedc <rcl_validate_topic_name+0x15c>
 801ce56:	4628      	mov	r0, r5
 801ce58:	2301      	movs	r3, #1
 801ce5a:	e00c      	b.n	801ce76 <rcl_validate_topic_name+0xf6>
 801ce5c:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 801ce60:	d101      	bne.n	801ce66 <rcl_validate_topic_name+0xe6>
 801ce62:	2801      	cmp	r0, #1
 801ce64:	d047      	beq.n	801cef6 <rcl_validate_topic_name+0x176>
 801ce66:	1c5a      	adds	r2, r3, #1
 801ce68:	428b      	cmp	r3, r1
 801ce6a:	f100 0001 	add.w	r0, r0, #1
 801ce6e:	f104 0401 	add.w	r4, r4, #1
 801ce72:	4613      	mov	r3, r2
 801ce74:	d22e      	bcs.n	801ced4 <rcl_validate_topic_name+0x154>
 801ce76:	4580      	cmp	r8, r0
 801ce78:	d0f5      	beq.n	801ce66 <rcl_validate_topic_name+0xe6>
 801ce7a:	7822      	ldrb	r2, [r4, #0]
 801ce7c:	2a2f      	cmp	r2, #47	; 0x2f
 801ce7e:	d1ed      	bne.n	801ce5c <rcl_validate_topic_name+0xdc>
 801ce80:	7862      	ldrb	r2, [r4, #1]
 801ce82:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801ce86:	0752      	lsls	r2, r2, #29
 801ce88:	d5ed      	bpl.n	801ce66 <rcl_validate_topic_name+0xe6>
 801ce8a:	2204      	movs	r2, #4
 801ce8c:	6032      	str	r2, [r6, #0]
 801ce8e:	2f00      	cmp	r7, #0
 801ce90:	d0cb      	beq.n	801ce2a <rcl_validate_topic_name+0xaa>
 801ce92:	2000      	movs	r0, #0
 801ce94:	603b      	str	r3, [r7, #0]
 801ce96:	e79e      	b.n	801cdd6 <rcl_validate_topic_name+0x56>
 801ce98:	200b      	movs	r0, #11
 801ce9a:	4770      	bx	lr
 801ce9c:	200b      	movs	r0, #11
 801ce9e:	e79a      	b.n	801cdd6 <rcl_validate_topic_name+0x56>
 801cea0:	2900      	cmp	r1, #0
 801cea2:	d0d3      	beq.n	801ce4c <rcl_validate_topic_name+0xcc>
 801cea4:	2306      	movs	r3, #6
 801cea6:	6033      	str	r3, [r6, #0]
 801cea8:	2f00      	cmp	r7, #0
 801ceaa:	d1b7      	bne.n	801ce1c <rcl_validate_topic_name+0x9c>
 801ceac:	e7bd      	b.n	801ce2a <rcl_validate_topic_name+0xaa>
 801ceae:	2309      	movs	r3, #9
 801ceb0:	6033      	str	r3, [r6, #0]
 801ceb2:	2f00      	cmp	r7, #0
 801ceb4:	d1b2      	bne.n	801ce1c <rcl_validate_topic_name+0x9c>
 801ceb6:	e7b8      	b.n	801ce2a <rcl_validate_topic_name+0xaa>
 801ceb8:	2d00      	cmp	r5, #0
 801ceba:	d0c7      	beq.n	801ce4c <rcl_validate_topic_name+0xcc>
 801cebc:	2308      	movs	r3, #8
 801cebe:	6033      	str	r3, [r6, #0]
 801cec0:	2f00      	cmp	r7, #0
 801cec2:	d1ab      	bne.n	801ce1c <rcl_validate_topic_name+0x9c>
 801cec4:	e7b1      	b.n	801ce2a <rcl_validate_topic_name+0xaa>
 801cec6:	2d00      	cmp	r5, #0
 801cec8:	d1f8      	bne.n	801cebc <rcl_validate_topic_name+0x13c>
 801ceca:	460b      	mov	r3, r1
 801cecc:	2501      	movs	r5, #1
 801cece:	e7bd      	b.n	801ce4c <rcl_validate_topic_name+0xcc>
 801ced0:	2500      	movs	r5, #0
 801ced2:	e7bb      	b.n	801ce4c <rcl_validate_topic_name+0xcc>
 801ced4:	2300      	movs	r3, #0
 801ced6:	4618      	mov	r0, r3
 801ced8:	6033      	str	r3, [r6, #0]
 801ceda:	e77c      	b.n	801cdd6 <rcl_validate_topic_name+0x56>
 801cedc:	2205      	movs	r2, #5
 801cede:	6032      	str	r2, [r6, #0]
 801cee0:	2f00      	cmp	r7, #0
 801cee2:	d1d6      	bne.n	801ce92 <rcl_validate_topic_name+0x112>
 801cee4:	e7a1      	b.n	801ce2a <rcl_validate_topic_name+0xaa>
 801cee6:	2d00      	cmp	r5, #0
 801cee8:	bf14      	ite	ne
 801ceea:	2308      	movne	r3, #8
 801ceec:	2303      	moveq	r3, #3
 801ceee:	6033      	str	r3, [r6, #0]
 801cef0:	2f00      	cmp	r7, #0
 801cef2:	d193      	bne.n	801ce1c <rcl_validate_topic_name+0x9c>
 801cef4:	e799      	b.n	801ce2a <rcl_validate_topic_name+0xaa>
 801cef6:	2307      	movs	r3, #7
 801cef8:	6033      	str	r3, [r6, #0]
 801cefa:	2f00      	cmp	r7, #0
 801cefc:	d095      	beq.n	801ce2a <rcl_validate_topic_name+0xaa>
 801cefe:	2301      	movs	r3, #1
 801cf00:	e7c7      	b.n	801ce92 <rcl_validate_topic_name+0x112>
 801cf02:	bf00      	nop
 801cf04:	08021bf8 	.word	0x08021bf8

0801cf08 <rcutils_split>:
 801cf08:	b082      	sub	sp, #8
 801cf0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf0e:	b08d      	sub	sp, #52	; 0x34
 801cf10:	ac16      	add	r4, sp, #88	; 0x58
 801cf12:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 801cf14:	e884 000c 	stmia.w	r4, {r2, r3}
 801cf18:	2f00      	cmp	r7, #0
 801cf1a:	f000 80a8 	beq.w	801d06e <rcutils_split+0x166>
 801cf1e:	4605      	mov	r5, r0
 801cf20:	2800      	cmp	r0, #0
 801cf22:	d07e      	beq.n	801d022 <rcutils_split+0x11a>
 801cf24:	7803      	ldrb	r3, [r0, #0]
 801cf26:	2b00      	cmp	r3, #0
 801cf28:	d07b      	beq.n	801d022 <rcutils_split+0x11a>
 801cf2a:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
 801cf2e:	460e      	mov	r6, r1
 801cf30:	9203      	str	r2, [sp, #12]
 801cf32:	f107 0408 	add.w	r4, r7, #8
 801cf36:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
 801cf3a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801cf3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801cf40:	4628      	mov	r0, r5
 801cf42:	f8c4 b000 	str.w	fp, [r4]
 801cf46:	f7e3 f9db 	bl	8000300 <strlen>
 801cf4a:	782c      	ldrb	r4, [r5, #0]
 801cf4c:	182b      	adds	r3, r5, r0
 801cf4e:	1ba4      	subs	r4, r4, r6
 801cf50:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801cf54:	fab4 f484 	clz	r4, r4
 801cf58:	42b3      	cmp	r3, r6
 801cf5a:	bf14      	ite	ne
 801cf5c:	4680      	movne	r8, r0
 801cf5e:	f1a0 0801 	subeq.w	r8, r0, #1
 801cf62:	2001      	movs	r0, #1
 801cf64:	0964      	lsrs	r4, r4, #5
 801cf66:	6038      	str	r0, [r7, #0]
 801cf68:	4544      	cmp	r4, r8
 801cf6a:	d26b      	bcs.n	801d044 <rcutils_split+0x13c>
 801cf6c:	192b      	adds	r3, r5, r4
 801cf6e:	eb05 0108 	add.w	r1, r5, r8
 801cf72:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cf76:	42b2      	cmp	r2, r6
 801cf78:	d101      	bne.n	801cf7e <rcutils_split+0x76>
 801cf7a:	3001      	adds	r0, #1
 801cf7c:	6038      	str	r0, [r7, #0]
 801cf7e:	4299      	cmp	r1, r3
 801cf80:	d1f7      	bne.n	801cf72 <rcutils_split+0x6a>
 801cf82:	9b03      	ldr	r3, [sp, #12]
 801cf84:	0080      	lsls	r0, r0, #2
 801cf86:	4659      	mov	r1, fp
 801cf88:	4798      	blx	r3
 801cf8a:	4603      	mov	r3, r0
 801cf8c:	6078      	str	r0, [r7, #4]
 801cf8e:	2800      	cmp	r0, #0
 801cf90:	d05f      	beq.n	801d052 <rcutils_split+0x14a>
 801cf92:	f04f 0a00 	mov.w	sl, #0
 801cf96:	46a1      	mov	r9, r4
 801cf98:	e002      	b.n	801cfa0 <rcutils_split+0x98>
 801cf9a:	3401      	adds	r4, #1
 801cf9c:	45a0      	cmp	r8, r4
 801cf9e:	d922      	bls.n	801cfe6 <rcutils_split+0xde>
 801cfa0:	5d2a      	ldrb	r2, [r5, r4]
 801cfa2:	42b2      	cmp	r2, r6
 801cfa4:	d1f9      	bne.n	801cf9a <rcutils_split+0x92>
 801cfa6:	45a1      	cmp	r9, r4
 801cfa8:	eba4 0209 	sub.w	r2, r4, r9
 801cfac:	d032      	beq.n	801d014 <rcutils_split+0x10c>
 801cfae:	4659      	mov	r1, fp
 801cfb0:	1c90      	adds	r0, r2, #2
 801cfb2:	9302      	str	r3, [sp, #8]
 801cfb4:	9b03      	ldr	r3, [sp, #12]
 801cfb6:	9201      	str	r2, [sp, #4]
 801cfb8:	4798      	blx	r3
 801cfba:	9a01      	ldr	r2, [sp, #4]
 801cfbc:	9b02      	ldr	r3, [sp, #8]
 801cfbe:	1c51      	adds	r1, r2, #1
 801cfc0:	687a      	ldr	r2, [r7, #4]
 801cfc2:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 801cfc6:	eb05 0309 	add.w	r3, r5, r9
 801cfca:	f852 002a 	ldr.w	r0, [r2, sl, lsl #2]
 801cfce:	2800      	cmp	r0, #0
 801cfd0:	d04f      	beq.n	801d072 <rcutils_split+0x16a>
 801cfd2:	4a2b      	ldr	r2, [pc, #172]	; (801d080 <rcutils_split+0x178>)
 801cfd4:	f10a 0a01 	add.w	sl, sl, #1
 801cfd8:	f001 fb7e 	bl	801e6d8 <sniprintf>
 801cfdc:	687b      	ldr	r3, [r7, #4]
 801cfde:	3401      	adds	r4, #1
 801cfe0:	45a0      	cmp	r8, r4
 801cfe2:	46a1      	mov	r9, r4
 801cfe4:	d8dc      	bhi.n	801cfa0 <rcutils_split+0x98>
 801cfe6:	45a1      	cmp	r9, r4
 801cfe8:	d039      	beq.n	801d05e <rcutils_split+0x156>
 801cfea:	eba4 0409 	sub.w	r4, r4, r9
 801cfee:	4659      	mov	r1, fp
 801cff0:	9301      	str	r3, [sp, #4]
 801cff2:	1ca0      	adds	r0, r4, #2
 801cff4:	9b03      	ldr	r3, [sp, #12]
 801cff6:	4798      	blx	r3
 801cff8:	9b01      	ldr	r3, [sp, #4]
 801cffa:	4a21      	ldr	r2, [pc, #132]	; (801d080 <rcutils_split+0x178>)
 801cffc:	1c61      	adds	r1, r4, #1
 801cffe:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 801d002:	eb05 0309 	add.w	r3, r5, r9
 801d006:	6878      	ldr	r0, [r7, #4]
 801d008:	2500      	movs	r5, #0
 801d00a:	f850 002a 	ldr.w	r0, [r0, sl, lsl #2]
 801d00e:	f001 fb63 	bl	801e6d8 <sniprintf>
 801d012:	e011      	b.n	801d038 <rcutils_split+0x130>
 801d014:	683a      	ldr	r2, [r7, #0]
 801d016:	2100      	movs	r1, #0
 801d018:	3a01      	subs	r2, #1
 801d01a:	603a      	str	r2, [r7, #0]
 801d01c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801d020:	e7dd      	b.n	801cfde <rcutils_split+0xd6>
 801d022:	ac04      	add	r4, sp, #16
 801d024:	a804      	add	r0, sp, #16
 801d026:	f000 f82d 	bl	801d084 <rcutils_get_zero_initialized_string_array>
 801d02a:	2500      	movs	r5, #0
 801d02c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d02e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801d030:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801d034:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 801d038:	4628      	mov	r0, r5
 801d03a:	b00d      	add	sp, #52	; 0x34
 801d03c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d040:	b002      	add	sp, #8
 801d042:	4770      	bx	lr
 801d044:	9b03      	ldr	r3, [sp, #12]
 801d046:	4659      	mov	r1, fp
 801d048:	2004      	movs	r0, #4
 801d04a:	4798      	blx	r3
 801d04c:	4603      	mov	r3, r0
 801d04e:	6078      	str	r0, [r7, #4]
 801d050:	b928      	cbnz	r0, 801d05e <rcutils_split+0x156>
 801d052:	4638      	mov	r0, r7
 801d054:	f000 f834 	bl	801d0c0 <rcutils_string_array_fini>
 801d058:	b970      	cbnz	r0, 801d078 <rcutils_split+0x170>
 801d05a:	2502      	movs	r5, #2
 801d05c:	e7ec      	b.n	801d038 <rcutils_split+0x130>
 801d05e:	683a      	ldr	r2, [r7, #0]
 801d060:	2100      	movs	r1, #0
 801d062:	3a01      	subs	r2, #1
 801d064:	460d      	mov	r5, r1
 801d066:	603a      	str	r2, [r7, #0]
 801d068:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801d06c:	e7e4      	b.n	801d038 <rcutils_split+0x130>
 801d06e:	250b      	movs	r5, #11
 801d070:	e7e2      	b.n	801d038 <rcutils_split+0x130>
 801d072:	f8c7 a000 	str.w	sl, [r7]
 801d076:	e7ec      	b.n	801d052 <rcutils_split+0x14a>
 801d078:	2502      	movs	r5, #2
 801d07a:	f7f1 fe8d 	bl	800ed98 <rcutils_reset_error>
 801d07e:	e7db      	b.n	801d038 <rcutils_split+0x130>
 801d080:	080208f4 	.word	0x080208f4

0801d084 <rcutils_get_zero_initialized_string_array>:
 801d084:	b570      	push	{r4, r5, r6, lr}
 801d086:	b086      	sub	sp, #24
 801d088:	4606      	mov	r6, r0
 801d08a:	4c0c      	ldr	r4, [pc, #48]	; (801d0bc <rcutils_get_zero_initialized_string_array+0x38>)
 801d08c:	4668      	mov	r0, sp
 801d08e:	f7f1 fe25 	bl	800ecdc <rcutils_get_zero_initialized_allocator>
 801d092:	46ee      	mov	lr, sp
 801d094:	f104 0508 	add.w	r5, r4, #8
 801d098:	46a4      	mov	ip, r4
 801d09a:	4634      	mov	r4, r6
 801d09c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801d0a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d0a2:	f8de 3000 	ldr.w	r3, [lr]
 801d0a6:	602b      	str	r3, [r5, #0]
 801d0a8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801d0ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d0ae:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 801d0b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801d0b6:	4630      	mov	r0, r6
 801d0b8:	b006      	add	sp, #24
 801d0ba:	bd70      	pop	{r4, r5, r6, pc}
 801d0bc:	20011d7c 	.word	0x20011d7c

0801d0c0 <rcutils_string_array_fini>:
 801d0c0:	b328      	cbz	r0, 801d10e <rcutils_string_array_fini+0x4e>
 801d0c2:	b570      	push	{r4, r5, r6, lr}
 801d0c4:	4604      	mov	r4, r0
 801d0c6:	6840      	ldr	r0, [r0, #4]
 801d0c8:	b1e0      	cbz	r0, 801d104 <rcutils_string_array_fini+0x44>
 801d0ca:	f104 0008 	add.w	r0, r4, #8
 801d0ce:	f7f1 fe3f 	bl	800ed50 <rcutils_allocator_is_valid>
 801d0d2:	b1c0      	cbz	r0, 801d106 <rcutils_string_array_fini+0x46>
 801d0d4:	6823      	ldr	r3, [r4, #0]
 801d0d6:	b1c3      	cbz	r3, 801d10a <rcutils_string_array_fini+0x4a>
 801d0d8:	2500      	movs	r5, #0
 801d0da:	6860      	ldr	r0, [r4, #4]
 801d0dc:	462e      	mov	r6, r5
 801d0de:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801d0e2:	68e3      	ldr	r3, [r4, #12]
 801d0e4:	69a1      	ldr	r1, [r4, #24]
 801d0e6:	4798      	blx	r3
 801d0e8:	e9d4 3000 	ldrd	r3, r0, [r4]
 801d0ec:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801d0f0:	3501      	adds	r5, #1
 801d0f2:	429d      	cmp	r5, r3
 801d0f4:	d3f3      	bcc.n	801d0de <rcutils_string_array_fini+0x1e>
 801d0f6:	68e3      	ldr	r3, [r4, #12]
 801d0f8:	69a1      	ldr	r1, [r4, #24]
 801d0fa:	4798      	blx	r3
 801d0fc:	2300      	movs	r3, #0
 801d0fe:	4618      	mov	r0, r3
 801d100:	e9c4 3300 	strd	r3, r3, [r4]
 801d104:	bd70      	pop	{r4, r5, r6, pc}
 801d106:	200b      	movs	r0, #11
 801d108:	bd70      	pop	{r4, r5, r6, pc}
 801d10a:	6860      	ldr	r0, [r4, #4]
 801d10c:	e7f3      	b.n	801d0f6 <rcutils_string_array_fini+0x36>
 801d10e:	200b      	movs	r0, #11
 801d110:	4770      	bx	lr
 801d112:	bf00      	nop

0801d114 <rmw_get_zero_initialized_discovery_options>:
 801d114:	b510      	push	{r4, lr}
 801d116:	4604      	mov	r4, r0
 801d118:	2220      	movs	r2, #32
 801d11a:	2100      	movs	r1, #0
 801d11c:	f001 fbb6 	bl	801e88c <memset>
 801d120:	4620      	mov	r0, r4
 801d122:	bd10      	pop	{r4, pc}

0801d124 <rmw_discovery_options_init>:
 801d124:	b570      	push	{r4, r5, r6, lr}
 801d126:	b318      	cbz	r0, 801d170 <rmw_discovery_options_init+0x4c>
 801d128:	4604      	mov	r4, r0
 801d12a:	4610      	mov	r0, r2
 801d12c:	460e      	mov	r6, r1
 801d12e:	4615      	mov	r5, r2
 801d130:	f7f1 fe0e 	bl	800ed50 <rcutils_allocator_is_valid>
 801d134:	b1e0      	cbz	r0, 801d170 <rmw_discovery_options_init+0x4c>
 801d136:	68a3      	ldr	r3, [r4, #8]
 801d138:	b9d3      	cbnz	r3, 801d170 <rmw_discovery_options_init+0x4c>
 801d13a:	6863      	ldr	r3, [r4, #4]
 801d13c:	b9c3      	cbnz	r3, 801d170 <rmw_discovery_options_init+0x4c>
 801d13e:	7823      	ldrb	r3, [r4, #0]
 801d140:	b90b      	cbnz	r3, 801d146 <rmw_discovery_options_init+0x22>
 801d142:	2302      	movs	r3, #2
 801d144:	7023      	strb	r3, [r4, #0]
 801d146:	b1a6      	cbz	r6, 801d172 <rmw_discovery_options_init+0x4e>
 801d148:	f44f 7180 	mov.w	r1, #256	; 0x100
 801d14c:	4630      	mov	r0, r6
 801d14e:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 801d152:	4798      	blx	r3
 801d154:	6060      	str	r0, [r4, #4]
 801d156:	b170      	cbz	r0, 801d176 <rmw_discovery_options_init+0x52>
 801d158:	f104 0c0c 	add.w	ip, r4, #12
 801d15c:	60a6      	str	r6, [r4, #8]
 801d15e:	2600      	movs	r6, #0
 801d160:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d162:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d166:	682b      	ldr	r3, [r5, #0]
 801d168:	4630      	mov	r0, r6
 801d16a:	f8cc 3000 	str.w	r3, [ip]
 801d16e:	bd70      	pop	{r4, r5, r6, pc}
 801d170:	260b      	movs	r6, #11
 801d172:	4630      	mov	r0, r6
 801d174:	bd70      	pop	{r4, r5, r6, pc}
 801d176:	260a      	movs	r6, #10
 801d178:	e7fb      	b.n	801d172 <rmw_discovery_options_init+0x4e>
 801d17a:	bf00      	nop

0801d17c <on_status>:
 801d17c:	b082      	sub	sp, #8
 801d17e:	b002      	add	sp, #8
 801d180:	4770      	bx	lr
 801d182:	bf00      	nop

0801d184 <on_topic>:
 801d184:	4a23      	ldr	r2, [pc, #140]	; (801d214 <on_topic+0x90>)
 801d186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d18a:	6812      	ldr	r2, [r2, #0]
 801d18c:	b094      	sub	sp, #80	; 0x50
 801d18e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801d190:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 801d194:	9113      	str	r1, [sp, #76]	; 0x4c
 801d196:	9312      	str	r3, [sp, #72]	; 0x48
 801d198:	b3c2      	cbz	r2, 801d20c <on_topic+0x88>
 801d19a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 801d19e:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 801d1a2:	e001      	b.n	801d1a8 <on_topic+0x24>
 801d1a4:	6852      	ldr	r2, [r2, #4]
 801d1a6:	b38a      	cbz	r2, 801d20c <on_topic+0x88>
 801d1a8:	6894      	ldr	r4, [r2, #8]
 801d1aa:	8aa3      	ldrh	r3, [r4, #20]
 801d1ac:	428b      	cmp	r3, r1
 801d1ae:	d1f9      	bne.n	801d1a4 <on_topic+0x20>
 801d1b0:	7da3      	ldrb	r3, [r4, #22]
 801d1b2:	4283      	cmp	r3, r0
 801d1b4:	d1f6      	bne.n	801d1a4 <on_topic+0x20>
 801d1b6:	2248      	movs	r2, #72	; 0x48
 801d1b8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801d1bc:	4668      	mov	r0, sp
 801d1be:	f001 fc96 	bl	801eaee <memcpy>
 801d1c2:	f104 0328 	add.w	r3, r4, #40	; 0x28
 801d1c6:	4620      	mov	r0, r4
 801d1c8:	cb0c      	ldmia	r3, {r2, r3}
 801d1ca:	f7f2 f9fd 	bl	800f5c8 <rmw_uxrce_get_static_input_buffer_for_entity>
 801d1ce:	4607      	mov	r7, r0
 801d1d0:	b1e0      	cbz	r0, 801d20c <on_topic+0x88>
 801d1d2:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801d1d6:	462a      	mov	r2, r5
 801d1d8:	4630      	mov	r0, r6
 801d1da:	f108 0110 	add.w	r1, r8, #16
 801d1de:	f7f2 feb9 	bl	800ff54 <ucdr_deserialize_array_uint8_t>
 801d1e2:	b930      	cbnz	r0, 801d1f2 <on_topic+0x6e>
 801d1e4:	4639      	mov	r1, r7
 801d1e6:	480c      	ldr	r0, [pc, #48]	; (801d218 <on_topic+0x94>)
 801d1e8:	b014      	add	sp, #80	; 0x50
 801d1ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d1ee:	f7fc bb59 	b.w	80198a4 <put_memory>
 801d1f2:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 801d1f6:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 801d1fa:	f7fd fd7f 	bl	801acfc <rmw_uros_epoch_nanos>
 801d1fe:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 801d202:	2305      	movs	r3, #5
 801d204:	e942 0102 	strd	r0, r1, [r2, #-8]
 801d208:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 801d20c:	b014      	add	sp, #80	; 0x50
 801d20e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d212:	bf00      	nop
 801d214:	2001154c 	.word	0x2001154c
 801d218:	2001153c 	.word	0x2001153c

0801d21c <on_request>:
 801d21c:	4824      	ldr	r0, [pc, #144]	; (801d2b0 <on_request+0x94>)
 801d21e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d222:	6800      	ldr	r0, [r0, #0]
 801d224:	b094      	sub	sp, #80	; 0x50
 801d226:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801d228:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801d22c:	9113      	str	r1, [sp, #76]	; 0x4c
 801d22e:	2800      	cmp	r0, #0
 801d230:	d03b      	beq.n	801d2aa <on_request+0x8e>
 801d232:	461d      	mov	r5, r3
 801d234:	e001      	b.n	801d23a <on_request+0x1e>
 801d236:	6840      	ldr	r0, [r0, #4]
 801d238:	b3b8      	cbz	r0, 801d2aa <on_request+0x8e>
 801d23a:	6884      	ldr	r4, [r0, #8]
 801d23c:	8b21      	ldrh	r1, [r4, #24]
 801d23e:	4291      	cmp	r1, r2
 801d240:	d1f9      	bne.n	801d236 <on_request+0x1a>
 801d242:	2248      	movs	r2, #72	; 0x48
 801d244:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801d248:	4668      	mov	r0, sp
 801d24a:	f001 fc50 	bl	801eaee <memcpy>
 801d24e:	f104 0320 	add.w	r3, r4, #32
 801d252:	4620      	mov	r0, r4
 801d254:	cb0c      	ldmia	r3, {r2, r3}
 801d256:	f7f2 f9b7 	bl	800f5c8 <rmw_uxrce_get_static_input_buffer_for_entity>
 801d25a:	4680      	mov	r8, r0
 801d25c:	b328      	cbz	r0, 801d2aa <on_request+0x8e>
 801d25e:	4630      	mov	r0, r6
 801d260:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801d264:	463a      	mov	r2, r7
 801d266:	f106 0110 	add.w	r1, r6, #16
 801d26a:	f7f2 fe73 	bl	800ff54 <ucdr_deserialize_array_uint8_t>
 801d26e:	b930      	cbnz	r0, 801d27e <on_request+0x62>
 801d270:	4641      	mov	r1, r8
 801d272:	4810      	ldr	r0, [pc, #64]	; (801d2b4 <on_request+0x98>)
 801d274:	b014      	add	sp, #80	; 0x50
 801d276:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d27a:	f7fc bb13 	b.w	80198a4 <put_memory>
 801d27e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d280:	f606 0c28 	addw	ip, r6, #2088	; 0x828
 801d284:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801d288:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 801d28c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d290:	e895 0003 	ldmia.w	r5, {r0, r1}
 801d294:	e88c 0003 	stmia.w	ip, {r0, r1}
 801d298:	f7fd fd30 	bl	801acfc <rmw_uros_epoch_nanos>
 801d29c:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 801d2a0:	2303      	movs	r3, #3
 801d2a2:	e942 0102 	strd	r0, r1, [r2, #-8]
 801d2a6:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801d2aa:	b014      	add	sp, #80	; 0x50
 801d2ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d2b0:	2001151c 	.word	0x2001151c
 801d2b4:	2001153c 	.word	0x2001153c

0801d2b8 <on_reply>:
 801d2b8:	4822      	ldr	r0, [pc, #136]	; (801d344 <on_reply+0x8c>)
 801d2ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d2be:	6800      	ldr	r0, [r0, #0]
 801d2c0:	b094      	sub	sp, #80	; 0x50
 801d2c2:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801d2c4:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801d2c8:	9113      	str	r1, [sp, #76]	; 0x4c
 801d2ca:	b3b8      	cbz	r0, 801d33c <on_reply+0x84>
 801d2cc:	461d      	mov	r5, r3
 801d2ce:	e001      	b.n	801d2d4 <on_reply+0x1c>
 801d2d0:	6840      	ldr	r0, [r0, #4]
 801d2d2:	b398      	cbz	r0, 801d33c <on_reply+0x84>
 801d2d4:	6884      	ldr	r4, [r0, #8]
 801d2d6:	8b21      	ldrh	r1, [r4, #24]
 801d2d8:	4291      	cmp	r1, r2
 801d2da:	d1f9      	bne.n	801d2d0 <on_reply+0x18>
 801d2dc:	2248      	movs	r2, #72	; 0x48
 801d2de:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801d2e2:	4668      	mov	r0, sp
 801d2e4:	f001 fc03 	bl	801eaee <memcpy>
 801d2e8:	f104 0320 	add.w	r3, r4, #32
 801d2ec:	4620      	mov	r0, r4
 801d2ee:	cb0c      	ldmia	r3, {r2, r3}
 801d2f0:	f7f2 f96a 	bl	800f5c8 <rmw_uxrce_get_static_input_buffer_for_entity>
 801d2f4:	4680      	mov	r8, r0
 801d2f6:	b308      	cbz	r0, 801d33c <on_reply+0x84>
 801d2f8:	4630      	mov	r0, r6
 801d2fa:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801d2fe:	463a      	mov	r2, r7
 801d300:	f106 0110 	add.w	r1, r6, #16
 801d304:	f7f2 fe26 	bl	800ff54 <ucdr_deserialize_array_uint8_t>
 801d308:	b930      	cbnz	r0, 801d318 <on_reply+0x60>
 801d30a:	4641      	mov	r1, r8
 801d30c:	480e      	ldr	r0, [pc, #56]	; (801d348 <on_reply+0x90>)
 801d30e:	b014      	add	sp, #80	; 0x50
 801d310:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d314:	f7fc bac6 	b.w	80198a4 <put_memory>
 801d318:	2200      	movs	r2, #0
 801d31a:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801d31e:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 801d322:	f8c6 282c 	str.w	r2, [r6, #2092]	; 0x82c
 801d326:	f8c6 5828 	str.w	r5, [r6, #2088]	; 0x828
 801d32a:	f7fd fce7 	bl	801acfc <rmw_uros_epoch_nanos>
 801d32e:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 801d332:	2304      	movs	r3, #4
 801d334:	e942 0102 	strd	r0, r1, [r2, #-8]
 801d338:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801d33c:	b014      	add	sp, #80	; 0x50
 801d33e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d342:	bf00      	nop
 801d344:	2000cac0 	.word	0x2000cac0
 801d348:	2001153c 	.word	0x2001153c

0801d34c <rmw_create_guard_condition>:
 801d34c:	b538      	push	{r3, r4, r5, lr}
 801d34e:	4605      	mov	r5, r0
 801d350:	4808      	ldr	r0, [pc, #32]	; (801d374 <rmw_create_guard_condition+0x28>)
 801d352:	f7fc fa97 	bl	8019884 <get_memory>
 801d356:	4603      	mov	r3, r0
 801d358:	b148      	cbz	r0, 801d36e <rmw_create_guard_condition+0x22>
 801d35a:	6884      	ldr	r4, [r0, #8]
 801d35c:	2300      	movs	r3, #0
 801d35e:	61e5      	str	r5, [r4, #28]
 801d360:	7423      	strb	r3, [r4, #16]
 801d362:	f7fc fb15 	bl	8019990 <rmw_get_implementation_identifier>
 801d366:	f104 0314 	add.w	r3, r4, #20
 801d36a:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801d36e:	4618      	mov	r0, r3
 801d370:	bd38      	pop	{r3, r4, r5, pc}
 801d372:	bf00      	nop
 801d374:	200114dc 	.word	0x200114dc

0801d378 <rmw_destroy_guard_condition>:
 801d378:	b508      	push	{r3, lr}
 801d37a:	4b08      	ldr	r3, [pc, #32]	; (801d39c <rmw_destroy_guard_condition+0x24>)
 801d37c:	6819      	ldr	r1, [r3, #0]
 801d37e:	b911      	cbnz	r1, 801d386 <rmw_destroy_guard_condition+0xe>
 801d380:	e00a      	b.n	801d398 <rmw_destroy_guard_condition+0x20>
 801d382:	6849      	ldr	r1, [r1, #4]
 801d384:	b141      	cbz	r1, 801d398 <rmw_destroy_guard_condition+0x20>
 801d386:	688b      	ldr	r3, [r1, #8]
 801d388:	3314      	adds	r3, #20
 801d38a:	4298      	cmp	r0, r3
 801d38c:	d1f9      	bne.n	801d382 <rmw_destroy_guard_condition+0xa>
 801d38e:	4803      	ldr	r0, [pc, #12]	; (801d39c <rmw_destroy_guard_condition+0x24>)
 801d390:	f7fc fa88 	bl	80198a4 <put_memory>
 801d394:	2000      	movs	r0, #0
 801d396:	bd08      	pop	{r3, pc}
 801d398:	2001      	movs	r0, #1
 801d39a:	bd08      	pop	{r3, pc}
 801d39c:	200114dc 	.word	0x200114dc

0801d3a0 <rmw_trigger_guard_condition>:
 801d3a0:	b160      	cbz	r0, 801d3bc <rmw_trigger_guard_condition+0x1c>
 801d3a2:	b510      	push	{r4, lr}
 801d3a4:	4604      	mov	r4, r0
 801d3a6:	6800      	ldr	r0, [r0, #0]
 801d3a8:	f7f2 fb22 	bl	800f9f0 <is_uxrce_rmw_identifier_valid>
 801d3ac:	b908      	cbnz	r0, 801d3b2 <rmw_trigger_guard_condition+0x12>
 801d3ae:	2001      	movs	r0, #1
 801d3b0:	bd10      	pop	{r4, pc}
 801d3b2:	6863      	ldr	r3, [r4, #4]
 801d3b4:	2201      	movs	r2, #1
 801d3b6:	2000      	movs	r0, #0
 801d3b8:	741a      	strb	r2, [r3, #16]
 801d3ba:	bd10      	pop	{r4, pc}
 801d3bc:	2001      	movs	r0, #1
 801d3be:	4770      	bx	lr

0801d3c0 <sin>:
 801d3c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d3c2:	eeb0 7b40 	vmov.f64	d7, d0
 801d3c6:	ee17 3a90 	vmov	r3, s15
 801d3ca:	4a21      	ldr	r2, [pc, #132]	; (801d450 <sin+0x90>)
 801d3cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d3d0:	4293      	cmp	r3, r2
 801d3d2:	dc07      	bgt.n	801d3e4 <sin+0x24>
 801d3d4:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 801d448 <sin+0x88>
 801d3d8:	2000      	movs	r0, #0
 801d3da:	b005      	add	sp, #20
 801d3dc:	f85d eb04 	ldr.w	lr, [sp], #4
 801d3e0:	f000 b942 	b.w	801d668 <__kernel_sin>
 801d3e4:	4a1b      	ldr	r2, [pc, #108]	; (801d454 <sin+0x94>)
 801d3e6:	4293      	cmp	r3, r2
 801d3e8:	dd04      	ble.n	801d3f4 <sin+0x34>
 801d3ea:	ee30 0b40 	vsub.f64	d0, d0, d0
 801d3ee:	b005      	add	sp, #20
 801d3f0:	f85d fb04 	ldr.w	pc, [sp], #4
 801d3f4:	4668      	mov	r0, sp
 801d3f6:	f000 f98f 	bl	801d718 <__ieee754_rem_pio2>
 801d3fa:	f000 0003 	and.w	r0, r0, #3
 801d3fe:	2801      	cmp	r0, #1
 801d400:	d00a      	beq.n	801d418 <sin+0x58>
 801d402:	2802      	cmp	r0, #2
 801d404:	d00f      	beq.n	801d426 <sin+0x66>
 801d406:	b9c0      	cbnz	r0, 801d43a <sin+0x7a>
 801d408:	ed9d 1b02 	vldr	d1, [sp, #8]
 801d40c:	ed9d 0b00 	vldr	d0, [sp]
 801d410:	2001      	movs	r0, #1
 801d412:	f000 f929 	bl	801d668 <__kernel_sin>
 801d416:	e7ea      	b.n	801d3ee <sin+0x2e>
 801d418:	ed9d 1b02 	vldr	d1, [sp, #8]
 801d41c:	ed9d 0b00 	vldr	d0, [sp]
 801d420:	f000 f8b6 	bl	801d590 <__kernel_cos>
 801d424:	e7e3      	b.n	801d3ee <sin+0x2e>
 801d426:	ed9d 1b02 	vldr	d1, [sp, #8]
 801d42a:	ed9d 0b00 	vldr	d0, [sp]
 801d42e:	2001      	movs	r0, #1
 801d430:	f000 f91a 	bl	801d668 <__kernel_sin>
 801d434:	eeb1 0b40 	vneg.f64	d0, d0
 801d438:	e7d9      	b.n	801d3ee <sin+0x2e>
 801d43a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801d43e:	ed9d 0b00 	vldr	d0, [sp]
 801d442:	f000 f8a5 	bl	801d590 <__kernel_cos>
 801d446:	e7f5      	b.n	801d434 <sin+0x74>
	...
 801d450:	3fe921fb 	.word	0x3fe921fb
 801d454:	7fefffff 	.word	0x7fefffff

0801d458 <expf>:
 801d458:	ee10 2a10 	vmov	r2, s0
 801d45c:	f240 412a 	movw	r1, #1066	; 0x42a
 801d460:	f3c2 530a 	ubfx	r3, r2, #20, #11
 801d464:	428b      	cmp	r3, r1
 801d466:	b430      	push	{r4, r5}
 801d468:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801d46c:	d92a      	bls.n	801d4c4 <expf+0x6c>
 801d46e:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 801d472:	d058      	beq.n	801d526 <expf+0xce>
 801d474:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 801d478:	d303      	bcc.n	801d482 <expf+0x2a>
 801d47a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801d47e:	bc30      	pop	{r4, r5}
 801d480:	4770      	bx	lr
 801d482:	eddf 7a2a 	vldr	s15, [pc, #168]	; 801d52c <expf+0xd4>
 801d486:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801d48a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d48e:	dd03      	ble.n	801d498 <expf+0x40>
 801d490:	bc30      	pop	{r4, r5}
 801d492:	2000      	movs	r0, #0
 801d494:	f000 b876 	b.w	801d584 <__math_oflowf>
 801d498:	eddf 7a25 	vldr	s15, [pc, #148]	; 801d530 <expf+0xd8>
 801d49c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801d4a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d4a4:	d503      	bpl.n	801d4ae <expf+0x56>
 801d4a6:	bc30      	pop	{r4, r5}
 801d4a8:	2000      	movs	r0, #0
 801d4aa:	f000 b85f 	b.w	801d56c <__math_uflowf>
 801d4ae:	eddf 7a21 	vldr	s15, [pc, #132]	; 801d534 <expf+0xdc>
 801d4b2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801d4b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d4ba:	d503      	bpl.n	801d4c4 <expf+0x6c>
 801d4bc:	bc30      	pop	{r4, r5}
 801d4be:	2000      	movs	r0, #0
 801d4c0:	f000 b85a 	b.w	801d578 <__math_may_uflowf>
 801d4c4:	4b1c      	ldr	r3, [pc, #112]	; (801d538 <expf+0xe0>)
 801d4c6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801d4ca:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 801d4ce:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 801d4d2:	eeb0 7b44 	vmov.f64	d7, d4
 801d4d6:	eea5 7b06 	vfma.f64	d7, d5, d6
 801d4da:	ee17 0a10 	vmov	r0, s14
 801d4de:	ee37 7b44 	vsub.f64	d7, d7, d4
 801d4e2:	f000 021f 	and.w	r2, r0, #31
 801d4e6:	ee95 7b06 	vfnms.f64	d7, d5, d6
 801d4ea:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 801d4ee:	ee27 4b07 	vmul.f64	d4, d7, d7
 801d4f2:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 801d4f6:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 801d4fa:	eea5 6b07 	vfma.f64	d6, d5, d7
 801d4fe:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 801d502:	684d      	ldr	r5, [r1, #4]
 801d504:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 801d508:	2100      	movs	r1, #0
 801d50a:	190a      	adds	r2, r1, r4
 801d50c:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 801d510:	eea5 0b07 	vfma.f64	d0, d5, d7
 801d514:	ec43 2b17 	vmov	d7, r2, r3
 801d518:	eea6 0b04 	vfma.f64	d0, d6, d4
 801d51c:	ee20 0b07 	vmul.f64	d0, d0, d7
 801d520:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801d524:	e7ab      	b.n	801d47e <expf+0x26>
 801d526:	ed9f 0a05 	vldr	s0, [pc, #20]	; 801d53c <expf+0xe4>
 801d52a:	e7a8      	b.n	801d47e <expf+0x26>
 801d52c:	42b17217 	.word	0x42b17217
 801d530:	c2cff1b4 	.word	0xc2cff1b4
 801d534:	c2ce8ecf 	.word	0xc2ce8ecf
 801d538:	08021868 	.word	0x08021868
 801d53c:	00000000 	.word	0x00000000

0801d540 <with_errnof>:
 801d540:	b513      	push	{r0, r1, r4, lr}
 801d542:	4604      	mov	r4, r0
 801d544:	ed8d 0a01 	vstr	s0, [sp, #4]
 801d548:	f001 fa9c 	bl	801ea84 <__errno>
 801d54c:	ed9d 0a01 	vldr	s0, [sp, #4]
 801d550:	6004      	str	r4, [r0, #0]
 801d552:	b002      	add	sp, #8
 801d554:	bd10      	pop	{r4, pc}

0801d556 <xflowf>:
 801d556:	b130      	cbz	r0, 801d566 <xflowf+0x10>
 801d558:	eef1 7a40 	vneg.f32	s15, s0
 801d55c:	ee27 0a80 	vmul.f32	s0, s15, s0
 801d560:	2022      	movs	r0, #34	; 0x22
 801d562:	f7ff bfed 	b.w	801d540 <with_errnof>
 801d566:	eef0 7a40 	vmov.f32	s15, s0
 801d56a:	e7f7      	b.n	801d55c <xflowf+0x6>

0801d56c <__math_uflowf>:
 801d56c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801d574 <__math_uflowf+0x8>
 801d570:	f7ff bff1 	b.w	801d556 <xflowf>
 801d574:	10000000 	.word	0x10000000

0801d578 <__math_may_uflowf>:
 801d578:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801d580 <__math_may_uflowf+0x8>
 801d57c:	f7ff bfeb 	b.w	801d556 <xflowf>
 801d580:	1a200000 	.word	0x1a200000

0801d584 <__math_oflowf>:
 801d584:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801d58c <__math_oflowf+0x8>
 801d588:	f7ff bfe5 	b.w	801d556 <xflowf>
 801d58c:	70000000 	.word	0x70000000

0801d590 <__kernel_cos>:
 801d590:	ee10 1a90 	vmov	r1, s1
 801d594:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801d598:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801d59c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 801d5a0:	da05      	bge.n	801d5ae <__kernel_cos+0x1e>
 801d5a2:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801d5a6:	ee17 3a90 	vmov	r3, s15
 801d5aa:	2b00      	cmp	r3, #0
 801d5ac:	d03d      	beq.n	801d62a <__kernel_cos+0x9a>
 801d5ae:	ee20 5b00 	vmul.f64	d5, d0, d0
 801d5b2:	ee21 1b40 	vnmul.f64	d1, d1, d0
 801d5b6:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 801d630 <__kernel_cos+0xa0>
 801d5ba:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 801d638 <__kernel_cos+0xa8>
 801d5be:	eea5 4b07 	vfma.f64	d4, d5, d7
 801d5c2:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 801d640 <__kernel_cos+0xb0>
 801d5c6:	eea4 7b05 	vfma.f64	d7, d4, d5
 801d5ca:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 801d648 <__kernel_cos+0xb8>
 801d5ce:	eea7 4b05 	vfma.f64	d4, d7, d5
 801d5d2:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 801d650 <__kernel_cos+0xc0>
 801d5d6:	4b22      	ldr	r3, [pc, #136]	; (801d660 <__kernel_cos+0xd0>)
 801d5d8:	eea4 7b05 	vfma.f64	d7, d4, d5
 801d5dc:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 801d658 <__kernel_cos+0xc8>
 801d5e0:	4299      	cmp	r1, r3
 801d5e2:	eea7 4b05 	vfma.f64	d4, d7, d5
 801d5e6:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801d5ea:	ee24 4b05 	vmul.f64	d4, d4, d5
 801d5ee:	ee25 7b07 	vmul.f64	d7, d5, d7
 801d5f2:	eea5 1b04 	vfma.f64	d1, d5, d4
 801d5f6:	dc04      	bgt.n	801d602 <__kernel_cos+0x72>
 801d5f8:	ee37 7b41 	vsub.f64	d7, d7, d1
 801d5fc:	ee36 0b47 	vsub.f64	d0, d6, d7
 801d600:	4770      	bx	lr
 801d602:	4b18      	ldr	r3, [pc, #96]	; (801d664 <__kernel_cos+0xd4>)
 801d604:	4299      	cmp	r1, r3
 801d606:	dc0d      	bgt.n	801d624 <__kernel_cos+0x94>
 801d608:	2200      	movs	r2, #0
 801d60a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 801d60e:	ec43 2b15 	vmov	d5, r2, r3
 801d612:	ee36 0b45 	vsub.f64	d0, d6, d5
 801d616:	ee37 7b45 	vsub.f64	d7, d7, d5
 801d61a:	ee37 7b41 	vsub.f64	d7, d7, d1
 801d61e:	ee30 0b47 	vsub.f64	d0, d0, d7
 801d622:	4770      	bx	lr
 801d624:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 801d628:	e7f3      	b.n	801d612 <__kernel_cos+0x82>
 801d62a:	eeb0 0b46 	vmov.f64	d0, d6
 801d62e:	4770      	bx	lr
 801d630:	be8838d4 	.word	0xbe8838d4
 801d634:	bda8fae9 	.word	0xbda8fae9
 801d638:	bdb4b1c4 	.word	0xbdb4b1c4
 801d63c:	3e21ee9e 	.word	0x3e21ee9e
 801d640:	809c52ad 	.word	0x809c52ad
 801d644:	be927e4f 	.word	0xbe927e4f
 801d648:	19cb1590 	.word	0x19cb1590
 801d64c:	3efa01a0 	.word	0x3efa01a0
 801d650:	16c15177 	.word	0x16c15177
 801d654:	bf56c16c 	.word	0xbf56c16c
 801d658:	5555554c 	.word	0x5555554c
 801d65c:	3fa55555 	.word	0x3fa55555
 801d660:	3fd33332 	.word	0x3fd33332
 801d664:	3fe90000 	.word	0x3fe90000

0801d668 <__kernel_sin>:
 801d668:	ee10 3a90 	vmov	r3, s1
 801d66c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d670:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801d674:	da04      	bge.n	801d680 <__kernel_sin+0x18>
 801d676:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801d67a:	ee17 3a90 	vmov	r3, s15
 801d67e:	b35b      	cbz	r3, 801d6d8 <__kernel_sin+0x70>
 801d680:	ee20 6b00 	vmul.f64	d6, d0, d0
 801d684:	ee20 5b06 	vmul.f64	d5, d0, d6
 801d688:	ed9f 7b15 	vldr	d7, [pc, #84]	; 801d6e0 <__kernel_sin+0x78>
 801d68c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 801d6e8 <__kernel_sin+0x80>
 801d690:	eea6 4b07 	vfma.f64	d4, d6, d7
 801d694:	ed9f 7b16 	vldr	d7, [pc, #88]	; 801d6f0 <__kernel_sin+0x88>
 801d698:	eea4 7b06 	vfma.f64	d7, d4, d6
 801d69c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 801d6f8 <__kernel_sin+0x90>
 801d6a0:	eea7 4b06 	vfma.f64	d4, d7, d6
 801d6a4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 801d700 <__kernel_sin+0x98>
 801d6a8:	eea4 7b06 	vfma.f64	d7, d4, d6
 801d6ac:	b930      	cbnz	r0, 801d6bc <__kernel_sin+0x54>
 801d6ae:	ed9f 4b16 	vldr	d4, [pc, #88]	; 801d708 <__kernel_sin+0xa0>
 801d6b2:	eea6 4b07 	vfma.f64	d4, d6, d7
 801d6b6:	eea4 0b05 	vfma.f64	d0, d4, d5
 801d6ba:	4770      	bx	lr
 801d6bc:	ee27 7b45 	vnmul.f64	d7, d7, d5
 801d6c0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 801d6c4:	eea1 7b04 	vfma.f64	d7, d1, d4
 801d6c8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801d6cc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 801d710 <__kernel_sin+0xa8>
 801d6d0:	eea5 1b07 	vfma.f64	d1, d5, d7
 801d6d4:	ee30 0b41 	vsub.f64	d0, d0, d1
 801d6d8:	4770      	bx	lr
 801d6da:	bf00      	nop
 801d6dc:	f3af 8000 	nop.w
 801d6e0:	5acfd57c 	.word	0x5acfd57c
 801d6e4:	3de5d93a 	.word	0x3de5d93a
 801d6e8:	8a2b9ceb 	.word	0x8a2b9ceb
 801d6ec:	be5ae5e6 	.word	0xbe5ae5e6
 801d6f0:	57b1fe7d 	.word	0x57b1fe7d
 801d6f4:	3ec71de3 	.word	0x3ec71de3
 801d6f8:	19c161d5 	.word	0x19c161d5
 801d6fc:	bf2a01a0 	.word	0xbf2a01a0
 801d700:	1110f8a6 	.word	0x1110f8a6
 801d704:	3f811111 	.word	0x3f811111
 801d708:	55555549 	.word	0x55555549
 801d70c:	bfc55555 	.word	0xbfc55555
 801d710:	55555549 	.word	0x55555549
 801d714:	3fc55555 	.word	0x3fc55555

0801d718 <__ieee754_rem_pio2>:
 801d718:	b570      	push	{r4, r5, r6, lr}
 801d71a:	eeb0 7b40 	vmov.f64	d7, d0
 801d71e:	ee17 5a90 	vmov	r5, s15
 801d722:	4b99      	ldr	r3, [pc, #612]	; (801d988 <__ieee754_rem_pio2+0x270>)
 801d724:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801d728:	429e      	cmp	r6, r3
 801d72a:	b088      	sub	sp, #32
 801d72c:	4604      	mov	r4, r0
 801d72e:	dc07      	bgt.n	801d740 <__ieee754_rem_pio2+0x28>
 801d730:	2200      	movs	r2, #0
 801d732:	2300      	movs	r3, #0
 801d734:	ed84 0b00 	vstr	d0, [r4]
 801d738:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801d73c:	2000      	movs	r0, #0
 801d73e:	e01b      	b.n	801d778 <__ieee754_rem_pio2+0x60>
 801d740:	4b92      	ldr	r3, [pc, #584]	; (801d98c <__ieee754_rem_pio2+0x274>)
 801d742:	429e      	cmp	r6, r3
 801d744:	dc3b      	bgt.n	801d7be <__ieee754_rem_pio2+0xa6>
 801d746:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 801d74a:	2d00      	cmp	r5, #0
 801d74c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 801d948 <__ieee754_rem_pio2+0x230>
 801d750:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 801d754:	dd19      	ble.n	801d78a <__ieee754_rem_pio2+0x72>
 801d756:	ee30 7b46 	vsub.f64	d7, d0, d6
 801d75a:	429e      	cmp	r6, r3
 801d75c:	d00e      	beq.n	801d77c <__ieee754_rem_pio2+0x64>
 801d75e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 801d950 <__ieee754_rem_pio2+0x238>
 801d762:	ee37 5b46 	vsub.f64	d5, d7, d6
 801d766:	ee37 7b45 	vsub.f64	d7, d7, d5
 801d76a:	ed84 5b00 	vstr	d5, [r4]
 801d76e:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d772:	ed84 7b02 	vstr	d7, [r4, #8]
 801d776:	2001      	movs	r0, #1
 801d778:	b008      	add	sp, #32
 801d77a:	bd70      	pop	{r4, r5, r6, pc}
 801d77c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 801d958 <__ieee754_rem_pio2+0x240>
 801d780:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d784:	ed9f 6b76 	vldr	d6, [pc, #472]	; 801d960 <__ieee754_rem_pio2+0x248>
 801d788:	e7eb      	b.n	801d762 <__ieee754_rem_pio2+0x4a>
 801d78a:	429e      	cmp	r6, r3
 801d78c:	ee30 7b06 	vadd.f64	d7, d0, d6
 801d790:	d00e      	beq.n	801d7b0 <__ieee754_rem_pio2+0x98>
 801d792:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 801d950 <__ieee754_rem_pio2+0x238>
 801d796:	ee37 5b06 	vadd.f64	d5, d7, d6
 801d79a:	ee37 7b45 	vsub.f64	d7, d7, d5
 801d79e:	ed84 5b00 	vstr	d5, [r4]
 801d7a2:	ee37 7b06 	vadd.f64	d7, d7, d6
 801d7a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d7aa:	ed84 7b02 	vstr	d7, [r4, #8]
 801d7ae:	e7e3      	b.n	801d778 <__ieee754_rem_pio2+0x60>
 801d7b0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 801d958 <__ieee754_rem_pio2+0x240>
 801d7b4:	ee37 7b06 	vadd.f64	d7, d7, d6
 801d7b8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 801d960 <__ieee754_rem_pio2+0x248>
 801d7bc:	e7eb      	b.n	801d796 <__ieee754_rem_pio2+0x7e>
 801d7be:	4b74      	ldr	r3, [pc, #464]	; (801d990 <__ieee754_rem_pio2+0x278>)
 801d7c0:	429e      	cmp	r6, r3
 801d7c2:	dc70      	bgt.n	801d8a6 <__ieee754_rem_pio2+0x18e>
 801d7c4:	f000 f8ec 	bl	801d9a0 <fabs>
 801d7c8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801d7cc:	ed9f 6b66 	vldr	d6, [pc, #408]	; 801d968 <__ieee754_rem_pio2+0x250>
 801d7d0:	eea0 7b06 	vfma.f64	d7, d0, d6
 801d7d4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801d7d8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801d7dc:	ee17 0a90 	vmov	r0, s15
 801d7e0:	eeb1 4b45 	vneg.f64	d4, d5
 801d7e4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 801d948 <__ieee754_rem_pio2+0x230>
 801d7e8:	eea5 0b47 	vfms.f64	d0, d5, d7
 801d7ec:	ed9f 7b58 	vldr	d7, [pc, #352]	; 801d950 <__ieee754_rem_pio2+0x238>
 801d7f0:	281f      	cmp	r0, #31
 801d7f2:	ee25 7b07 	vmul.f64	d7, d5, d7
 801d7f6:	ee30 6b47 	vsub.f64	d6, d0, d7
 801d7fa:	dc08      	bgt.n	801d80e <__ieee754_rem_pio2+0xf6>
 801d7fc:	4b65      	ldr	r3, [pc, #404]	; (801d994 <__ieee754_rem_pio2+0x27c>)
 801d7fe:	1e42      	subs	r2, r0, #1
 801d800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d804:	42b3      	cmp	r3, r6
 801d806:	d002      	beq.n	801d80e <__ieee754_rem_pio2+0xf6>
 801d808:	ed84 6b00 	vstr	d6, [r4]
 801d80c:	e024      	b.n	801d858 <__ieee754_rem_pio2+0x140>
 801d80e:	ee16 3a90 	vmov	r3, s13
 801d812:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801d816:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 801d81a:	2b10      	cmp	r3, #16
 801d81c:	ea4f 5226 	mov.w	r2, r6, asr #20
 801d820:	ddf2      	ble.n	801d808 <__ieee754_rem_pio2+0xf0>
 801d822:	eeb0 6b40 	vmov.f64	d6, d0
 801d826:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 801d958 <__ieee754_rem_pio2+0x240>
 801d82a:	eea4 6b03 	vfma.f64	d6, d4, d3
 801d82e:	ee30 7b46 	vsub.f64	d7, d0, d6
 801d832:	eea4 7b03 	vfma.f64	d7, d4, d3
 801d836:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 801d960 <__ieee754_rem_pio2+0x248>
 801d83a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801d83e:	ee36 3b47 	vsub.f64	d3, d6, d7
 801d842:	ee13 3a90 	vmov	r3, s7
 801d846:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801d84a:	1ad3      	subs	r3, r2, r3
 801d84c:	2b31      	cmp	r3, #49	; 0x31
 801d84e:	dc17      	bgt.n	801d880 <__ieee754_rem_pio2+0x168>
 801d850:	eeb0 0b46 	vmov.f64	d0, d6
 801d854:	ed84 3b00 	vstr	d3, [r4]
 801d858:	ed94 6b00 	vldr	d6, [r4]
 801d85c:	2d00      	cmp	r5, #0
 801d85e:	ee30 0b46 	vsub.f64	d0, d0, d6
 801d862:	ee30 0b47 	vsub.f64	d0, d0, d7
 801d866:	ed84 0b02 	vstr	d0, [r4, #8]
 801d86a:	da85      	bge.n	801d778 <__ieee754_rem_pio2+0x60>
 801d86c:	eeb1 6b46 	vneg.f64	d6, d6
 801d870:	eeb1 0b40 	vneg.f64	d0, d0
 801d874:	ed84 6b00 	vstr	d6, [r4]
 801d878:	ed84 0b02 	vstr	d0, [r4, #8]
 801d87c:	4240      	negs	r0, r0
 801d87e:	e77b      	b.n	801d778 <__ieee754_rem_pio2+0x60>
 801d880:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 801d970 <__ieee754_rem_pio2+0x258>
 801d884:	eeb0 0b46 	vmov.f64	d0, d6
 801d888:	eea4 0b07 	vfma.f64	d0, d4, d7
 801d88c:	ee36 6b40 	vsub.f64	d6, d6, d0
 801d890:	eea4 6b07 	vfma.f64	d6, d4, d7
 801d894:	ed9f 4b38 	vldr	d4, [pc, #224]	; 801d978 <__ieee754_rem_pio2+0x260>
 801d898:	eeb0 7b46 	vmov.f64	d7, d6
 801d89c:	ee95 7b04 	vfnms.f64	d7, d5, d4
 801d8a0:	ee30 6b47 	vsub.f64	d6, d0, d7
 801d8a4:	e7b0      	b.n	801d808 <__ieee754_rem_pio2+0xf0>
 801d8a6:	4b3c      	ldr	r3, [pc, #240]	; (801d998 <__ieee754_rem_pio2+0x280>)
 801d8a8:	429e      	cmp	r6, r3
 801d8aa:	dd06      	ble.n	801d8ba <__ieee754_rem_pio2+0x1a2>
 801d8ac:	ee30 7b40 	vsub.f64	d7, d0, d0
 801d8b0:	ed80 7b02 	vstr	d7, [r0, #8]
 801d8b4:	ed80 7b00 	vstr	d7, [r0]
 801d8b8:	e740      	b.n	801d73c <__ieee754_rem_pio2+0x24>
 801d8ba:	1532      	asrs	r2, r6, #20
 801d8bc:	ee10 0a10 	vmov	r0, s0
 801d8c0:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 801d8c4:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801d8c8:	ec41 0b17 	vmov	d7, r0, r1
 801d8cc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801d8d0:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 801d980 <__ieee754_rem_pio2+0x268>
 801d8d4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801d8d8:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d8dc:	ed8d 6b02 	vstr	d6, [sp, #8]
 801d8e0:	ee27 7b05 	vmul.f64	d7, d7, d5
 801d8e4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801d8e8:	a808      	add	r0, sp, #32
 801d8ea:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801d8ee:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d8f2:	ed8d 6b04 	vstr	d6, [sp, #16]
 801d8f6:	ee27 7b05 	vmul.f64	d7, d7, d5
 801d8fa:	ed8d 7b06 	vstr	d7, [sp, #24]
 801d8fe:	2103      	movs	r1, #3
 801d900:	ed30 7b02 	vldmdb	r0!, {d7}
 801d904:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801d908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d90c:	460b      	mov	r3, r1
 801d90e:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 801d912:	d0f5      	beq.n	801d900 <__ieee754_rem_pio2+0x1e8>
 801d914:	4921      	ldr	r1, [pc, #132]	; (801d99c <__ieee754_rem_pio2+0x284>)
 801d916:	9101      	str	r1, [sp, #4]
 801d918:	2102      	movs	r1, #2
 801d91a:	9100      	str	r1, [sp, #0]
 801d91c:	a802      	add	r0, sp, #8
 801d91e:	4621      	mov	r1, r4
 801d920:	f000 f84a 	bl	801d9b8 <__kernel_rem_pio2>
 801d924:	2d00      	cmp	r5, #0
 801d926:	f6bf af27 	bge.w	801d778 <__ieee754_rem_pio2+0x60>
 801d92a:	ed94 7b00 	vldr	d7, [r4]
 801d92e:	eeb1 7b47 	vneg.f64	d7, d7
 801d932:	ed84 7b00 	vstr	d7, [r4]
 801d936:	ed94 7b02 	vldr	d7, [r4, #8]
 801d93a:	eeb1 7b47 	vneg.f64	d7, d7
 801d93e:	ed84 7b02 	vstr	d7, [r4, #8]
 801d942:	e79b      	b.n	801d87c <__ieee754_rem_pio2+0x164>
 801d944:	f3af 8000 	nop.w
 801d948:	54400000 	.word	0x54400000
 801d94c:	3ff921fb 	.word	0x3ff921fb
 801d950:	1a626331 	.word	0x1a626331
 801d954:	3dd0b461 	.word	0x3dd0b461
 801d958:	1a600000 	.word	0x1a600000
 801d95c:	3dd0b461 	.word	0x3dd0b461
 801d960:	2e037073 	.word	0x2e037073
 801d964:	3ba3198a 	.word	0x3ba3198a
 801d968:	6dc9c883 	.word	0x6dc9c883
 801d96c:	3fe45f30 	.word	0x3fe45f30
 801d970:	2e000000 	.word	0x2e000000
 801d974:	3ba3198a 	.word	0x3ba3198a
 801d978:	252049c1 	.word	0x252049c1
 801d97c:	397b839a 	.word	0x397b839a
 801d980:	00000000 	.word	0x00000000
 801d984:	41700000 	.word	0x41700000
 801d988:	3fe921fb 	.word	0x3fe921fb
 801d98c:	4002d97b 	.word	0x4002d97b
 801d990:	413921fb 	.word	0x413921fb
 801d994:	080219b0 	.word	0x080219b0
 801d998:	7fefffff 	.word	0x7fefffff
 801d99c:	08021a30 	.word	0x08021a30

0801d9a0 <fabs>:
 801d9a0:	ec51 0b10 	vmov	r0, r1, d0
 801d9a4:	ee10 2a10 	vmov	r2, s0
 801d9a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801d9ac:	ec43 2b10 	vmov	d0, r2, r3
 801d9b0:	4770      	bx	lr
 801d9b2:	0000      	movs	r0, r0
 801d9b4:	0000      	movs	r0, r0
	...

0801d9b8 <__kernel_rem_pio2>:
 801d9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d9bc:	ed2d 8b06 	vpush	{d8-d10}
 801d9c0:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 801d9c4:	460f      	mov	r7, r1
 801d9c6:	9002      	str	r0, [sp, #8]
 801d9c8:	49c3      	ldr	r1, [pc, #780]	; (801dcd8 <__kernel_rem_pio2+0x320>)
 801d9ca:	98a2      	ldr	r0, [sp, #648]	; 0x288
 801d9cc:	9301      	str	r3, [sp, #4]
 801d9ce:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 801d9d2:	9901      	ldr	r1, [sp, #4]
 801d9d4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 801d9d6:	f112 0f14 	cmn.w	r2, #20
 801d9da:	bfa8      	it	ge
 801d9dc:	1ed0      	subge	r0, r2, #3
 801d9de:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 801d9e2:	bfaa      	itet	ge
 801d9e4:	2418      	movge	r4, #24
 801d9e6:	2000      	movlt	r0, #0
 801d9e8:	fb90 f0f4 	sdivge	r0, r0, r4
 801d9ec:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 801dcc0 <__kernel_rem_pio2+0x308>
 801d9f0:	f06f 0417 	mvn.w	r4, #23
 801d9f4:	fb00 4404 	mla	r4, r0, r4, r4
 801d9f8:	eba0 060a 	sub.w	r6, r0, sl
 801d9fc:	4414      	add	r4, r2
 801d9fe:	eb09 0c0a 	add.w	ip, r9, sl
 801da02:	ad1a      	add	r5, sp, #104	; 0x68
 801da04:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 801da08:	2200      	movs	r2, #0
 801da0a:	4562      	cmp	r2, ip
 801da0c:	dd10      	ble.n	801da30 <__kernel_rem_pio2+0x78>
 801da0e:	9a01      	ldr	r2, [sp, #4]
 801da10:	a91a      	add	r1, sp, #104	; 0x68
 801da12:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801da16:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
 801da1a:	f04f 0c00 	mov.w	ip, #0
 801da1e:	45cc      	cmp	ip, r9
 801da20:	dc26      	bgt.n	801da70 <__kernel_rem_pio2+0xb8>
 801da22:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 801dcc0 <__kernel_rem_pio2+0x308>
 801da26:	f8dd e008 	ldr.w	lr, [sp, #8]
 801da2a:	4616      	mov	r6, r2
 801da2c:	2500      	movs	r5, #0
 801da2e:	e015      	b.n	801da5c <__kernel_rem_pio2+0xa4>
 801da30:	42d6      	cmn	r6, r2
 801da32:	d409      	bmi.n	801da48 <__kernel_rem_pio2+0x90>
 801da34:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 801da38:	ee07 1a90 	vmov	s15, r1
 801da3c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801da40:	eca5 7b02 	vstmia	r5!, {d7}
 801da44:	3201      	adds	r2, #1
 801da46:	e7e0      	b.n	801da0a <__kernel_rem_pio2+0x52>
 801da48:	eeb0 7b46 	vmov.f64	d7, d6
 801da4c:	e7f8      	b.n	801da40 <__kernel_rem_pio2+0x88>
 801da4e:	ecbe 5b02 	vldmia	lr!, {d5}
 801da52:	ed96 6b00 	vldr	d6, [r6]
 801da56:	3501      	adds	r5, #1
 801da58:	eea5 7b06 	vfma.f64	d7, d5, d6
 801da5c:	4555      	cmp	r5, sl
 801da5e:	f1a6 0608 	sub.w	r6, r6, #8
 801da62:	ddf4      	ble.n	801da4e <__kernel_rem_pio2+0x96>
 801da64:	eca8 7b02 	vstmia	r8!, {d7}
 801da68:	f10c 0c01 	add.w	ip, ip, #1
 801da6c:	3208      	adds	r2, #8
 801da6e:	e7d6      	b.n	801da1e <__kernel_rem_pio2+0x66>
 801da70:	aa06      	add	r2, sp, #24
 801da72:	ed9f 9b95 	vldr	d9, [pc, #596]	; 801dcc8 <__kernel_rem_pio2+0x310>
 801da76:	ed9f ab96 	vldr	d10, [pc, #600]	; 801dcd0 <__kernel_rem_pio2+0x318>
 801da7a:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 801da7e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801da82:	9204      	str	r2, [sp, #16]
 801da84:	9303      	str	r3, [sp, #12]
 801da86:	464d      	mov	r5, r9
 801da88:	00eb      	lsls	r3, r5, #3
 801da8a:	9305      	str	r3, [sp, #20]
 801da8c:	ab92      	add	r3, sp, #584	; 0x248
 801da8e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801da92:	f10d 0b18 	add.w	fp, sp, #24
 801da96:	ab6a      	add	r3, sp, #424	; 0x1a8
 801da98:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 801da9c:	465e      	mov	r6, fp
 801da9e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801daa2:	4628      	mov	r0, r5
 801daa4:	2800      	cmp	r0, #0
 801daa6:	f1a2 0208 	sub.w	r2, r2, #8
 801daaa:	dc48      	bgt.n	801db3e <__kernel_rem_pio2+0x186>
 801daac:	4620      	mov	r0, r4
 801daae:	f000 fa17 	bl	801dee0 <scalbn>
 801dab2:	eeb0 8b40 	vmov.f64	d8, d0
 801dab6:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 801daba:	ee28 0b00 	vmul.f64	d0, d8, d0
 801dabe:	f000 fa8f 	bl	801dfe0 <floor>
 801dac2:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 801dac6:	eea0 8b47 	vfms.f64	d8, d0, d7
 801daca:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801dace:	2c00      	cmp	r4, #0
 801dad0:	ee17 8a90 	vmov	r8, s15
 801dad4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801dad8:	ee38 8b47 	vsub.f64	d8, d8, d7
 801dadc:	dd41      	ble.n	801db62 <__kernel_rem_pio2+0x1aa>
 801dade:	1e68      	subs	r0, r5, #1
 801dae0:	ab06      	add	r3, sp, #24
 801dae2:	f1c4 0c18 	rsb	ip, r4, #24
 801dae6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 801daea:	fa46 f20c 	asr.w	r2, r6, ip
 801daee:	4490      	add	r8, r2
 801daf0:	fa02 f20c 	lsl.w	r2, r2, ip
 801daf4:	1ab6      	subs	r6, r6, r2
 801daf6:	f1c4 0217 	rsb	r2, r4, #23
 801dafa:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 801dafe:	4116      	asrs	r6, r2
 801db00:	2e00      	cmp	r6, #0
 801db02:	dd3d      	ble.n	801db80 <__kernel_rem_pio2+0x1c8>
 801db04:	f04f 0c00 	mov.w	ip, #0
 801db08:	f108 0801 	add.w	r8, r8, #1
 801db0c:	4660      	mov	r0, ip
 801db0e:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 801db12:	4565      	cmp	r5, ip
 801db14:	dc6a      	bgt.n	801dbec <__kernel_rem_pio2+0x234>
 801db16:	2c00      	cmp	r4, #0
 801db18:	dd04      	ble.n	801db24 <__kernel_rem_pio2+0x16c>
 801db1a:	2c01      	cmp	r4, #1
 801db1c:	d07b      	beq.n	801dc16 <__kernel_rem_pio2+0x25e>
 801db1e:	2c02      	cmp	r4, #2
 801db20:	f000 8083 	beq.w	801dc2a <__kernel_rem_pio2+0x272>
 801db24:	2e02      	cmp	r6, #2
 801db26:	d12b      	bne.n	801db80 <__kernel_rem_pio2+0x1c8>
 801db28:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801db2c:	ee30 8b48 	vsub.f64	d8, d0, d8
 801db30:	b330      	cbz	r0, 801db80 <__kernel_rem_pio2+0x1c8>
 801db32:	4620      	mov	r0, r4
 801db34:	f000 f9d4 	bl	801dee0 <scalbn>
 801db38:	ee38 8b40 	vsub.f64	d8, d8, d0
 801db3c:	e020      	b.n	801db80 <__kernel_rem_pio2+0x1c8>
 801db3e:	ee20 7b09 	vmul.f64	d7, d0, d9
 801db42:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801db46:	3801      	subs	r0, #1
 801db48:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801db4c:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801db50:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801db54:	eca6 0a01 	vstmia	r6!, {s0}
 801db58:	ed92 0b00 	vldr	d0, [r2]
 801db5c:	ee37 0b00 	vadd.f64	d0, d7, d0
 801db60:	e7a0      	b.n	801daa4 <__kernel_rem_pio2+0xec>
 801db62:	d105      	bne.n	801db70 <__kernel_rem_pio2+0x1b8>
 801db64:	1e6a      	subs	r2, r5, #1
 801db66:	ab06      	add	r3, sp, #24
 801db68:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801db6c:	15f6      	asrs	r6, r6, #23
 801db6e:	e7c7      	b.n	801db00 <__kernel_rem_pio2+0x148>
 801db70:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801db74:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801db78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801db7c:	da34      	bge.n	801dbe8 <__kernel_rem_pio2+0x230>
 801db7e:	2600      	movs	r6, #0
 801db80:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801db84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801db88:	f040 80aa 	bne.w	801dce0 <__kernel_rem_pio2+0x328>
 801db8c:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 801db90:	4658      	mov	r0, fp
 801db92:	2200      	movs	r2, #0
 801db94:	4548      	cmp	r0, r9
 801db96:	da50      	bge.n	801dc3a <__kernel_rem_pio2+0x282>
 801db98:	2a00      	cmp	r2, #0
 801db9a:	d06b      	beq.n	801dc74 <__kernel_rem_pio2+0x2bc>
 801db9c:	ab06      	add	r3, sp, #24
 801db9e:	3c18      	subs	r4, #24
 801dba0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801dba4:	2b00      	cmp	r3, #0
 801dba6:	f000 8087 	beq.w	801dcb8 <__kernel_rem_pio2+0x300>
 801dbaa:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801dbae:	4620      	mov	r0, r4
 801dbb0:	f000 f996 	bl	801dee0 <scalbn>
 801dbb4:	ed9f 6b44 	vldr	d6, [pc, #272]	; 801dcc8 <__kernel_rem_pio2+0x310>
 801dbb8:	f10b 0201 	add.w	r2, fp, #1
 801dbbc:	a96a      	add	r1, sp, #424	; 0x1a8
 801dbbe:	00d3      	lsls	r3, r2, #3
 801dbc0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801dbc4:	465a      	mov	r2, fp
 801dbc6:	2a00      	cmp	r2, #0
 801dbc8:	f280 80b8 	bge.w	801dd3c <__kernel_rem_pio2+0x384>
 801dbcc:	465a      	mov	r2, fp
 801dbce:	2a00      	cmp	r2, #0
 801dbd0:	f2c0 80d6 	blt.w	801dd80 <__kernel_rem_pio2+0x3c8>
 801dbd4:	a96a      	add	r1, sp, #424	; 0x1a8
 801dbd6:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 801dbda:	ed9f 7b39 	vldr	d7, [pc, #228]	; 801dcc0 <__kernel_rem_pio2+0x308>
 801dbde:	4d3f      	ldr	r5, [pc, #252]	; (801dcdc <__kernel_rem_pio2+0x324>)
 801dbe0:	2000      	movs	r0, #0
 801dbe2:	ebab 0102 	sub.w	r1, fp, r2
 801dbe6:	e0c0      	b.n	801dd6a <__kernel_rem_pio2+0x3b2>
 801dbe8:	2602      	movs	r6, #2
 801dbea:	e78b      	b.n	801db04 <__kernel_rem_pio2+0x14c>
 801dbec:	f8db 2000 	ldr.w	r2, [fp]
 801dbf0:	b958      	cbnz	r0, 801dc0a <__kernel_rem_pio2+0x252>
 801dbf2:	b122      	cbz	r2, 801dbfe <__kernel_rem_pio2+0x246>
 801dbf4:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 801dbf8:	f8cb 2000 	str.w	r2, [fp]
 801dbfc:	2201      	movs	r2, #1
 801dbfe:	f10c 0c01 	add.w	ip, ip, #1
 801dc02:	f10b 0b04 	add.w	fp, fp, #4
 801dc06:	4610      	mov	r0, r2
 801dc08:	e783      	b.n	801db12 <__kernel_rem_pio2+0x15a>
 801dc0a:	ebae 0202 	sub.w	r2, lr, r2
 801dc0e:	f8cb 2000 	str.w	r2, [fp]
 801dc12:	4602      	mov	r2, r0
 801dc14:	e7f3      	b.n	801dbfe <__kernel_rem_pio2+0x246>
 801dc16:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 801dc1a:	ab06      	add	r3, sp, #24
 801dc1c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801dc20:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801dc24:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 801dc28:	e77c      	b.n	801db24 <__kernel_rem_pio2+0x16c>
 801dc2a:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 801dc2e:	ab06      	add	r3, sp, #24
 801dc30:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801dc34:	f3c2 0215 	ubfx	r2, r2, #0, #22
 801dc38:	e7f4      	b.n	801dc24 <__kernel_rem_pio2+0x26c>
 801dc3a:	ab06      	add	r3, sp, #24
 801dc3c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801dc40:	3801      	subs	r0, #1
 801dc42:	431a      	orrs	r2, r3
 801dc44:	e7a6      	b.n	801db94 <__kernel_rem_pio2+0x1dc>
 801dc46:	3201      	adds	r2, #1
 801dc48:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801dc4c:	2e00      	cmp	r6, #0
 801dc4e:	d0fa      	beq.n	801dc46 <__kernel_rem_pio2+0x28e>
 801dc50:	9b05      	ldr	r3, [sp, #20]
 801dc52:	f503 7312 	add.w	r3, r3, #584	; 0x248
 801dc56:	eb0d 0003 	add.w	r0, sp, r3
 801dc5a:	9b01      	ldr	r3, [sp, #4]
 801dc5c:	18ee      	adds	r6, r5, r3
 801dc5e:	ab1a      	add	r3, sp, #104	; 0x68
 801dc60:	f105 0c01 	add.w	ip, r5, #1
 801dc64:	3898      	subs	r0, #152	; 0x98
 801dc66:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801dc6a:	442a      	add	r2, r5
 801dc6c:	4562      	cmp	r2, ip
 801dc6e:	da04      	bge.n	801dc7a <__kernel_rem_pio2+0x2c2>
 801dc70:	4615      	mov	r5, r2
 801dc72:	e709      	b.n	801da88 <__kernel_rem_pio2+0xd0>
 801dc74:	9804      	ldr	r0, [sp, #16]
 801dc76:	2201      	movs	r2, #1
 801dc78:	e7e6      	b.n	801dc48 <__kernel_rem_pio2+0x290>
 801dc7a:	9b03      	ldr	r3, [sp, #12]
 801dc7c:	f8dd e008 	ldr.w	lr, [sp, #8]
 801dc80:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801dc84:	9305      	str	r3, [sp, #20]
 801dc86:	ee07 3a90 	vmov	s15, r3
 801dc8a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801dc8e:	2500      	movs	r5, #0
 801dc90:	eca6 7b02 	vstmia	r6!, {d7}
 801dc94:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 801dcc0 <__kernel_rem_pio2+0x308>
 801dc98:	46b0      	mov	r8, r6
 801dc9a:	4555      	cmp	r5, sl
 801dc9c:	dd04      	ble.n	801dca8 <__kernel_rem_pio2+0x2f0>
 801dc9e:	eca0 7b02 	vstmia	r0!, {d7}
 801dca2:	f10c 0c01 	add.w	ip, ip, #1
 801dca6:	e7e1      	b.n	801dc6c <__kernel_rem_pio2+0x2b4>
 801dca8:	ecbe 5b02 	vldmia	lr!, {d5}
 801dcac:	ed38 6b02 	vldmdb	r8!, {d6}
 801dcb0:	3501      	adds	r5, #1
 801dcb2:	eea5 7b06 	vfma.f64	d7, d5, d6
 801dcb6:	e7f0      	b.n	801dc9a <__kernel_rem_pio2+0x2e2>
 801dcb8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801dcbc:	e76e      	b.n	801db9c <__kernel_rem_pio2+0x1e4>
 801dcbe:	bf00      	nop
	...
 801dccc:	3e700000 	.word	0x3e700000
 801dcd0:	00000000 	.word	0x00000000
 801dcd4:	41700000 	.word	0x41700000
 801dcd8:	08021b78 	.word	0x08021b78
 801dcdc:	08021b38 	.word	0x08021b38
 801dce0:	4260      	negs	r0, r4
 801dce2:	eeb0 0b48 	vmov.f64	d0, d8
 801dce6:	f000 f8fb 	bl	801dee0 <scalbn>
 801dcea:	ed9f 6b77 	vldr	d6, [pc, #476]	; 801dec8 <__kernel_rem_pio2+0x510>
 801dcee:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801dcf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dcf6:	db18      	blt.n	801dd2a <__kernel_rem_pio2+0x372>
 801dcf8:	ed9f 7b75 	vldr	d7, [pc, #468]	; 801ded0 <__kernel_rem_pio2+0x518>
 801dcfc:	ee20 7b07 	vmul.f64	d7, d0, d7
 801dd00:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801dd04:	aa06      	add	r2, sp, #24
 801dd06:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801dd0a:	eea5 0b46 	vfms.f64	d0, d5, d6
 801dd0e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801dd12:	f105 0b01 	add.w	fp, r5, #1
 801dd16:	ee10 3a10 	vmov	r3, s0
 801dd1a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801dd1e:	ee17 3a10 	vmov	r3, s14
 801dd22:	3418      	adds	r4, #24
 801dd24:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 801dd28:	e73f      	b.n	801dbaa <__kernel_rem_pio2+0x1f2>
 801dd2a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801dd2e:	aa06      	add	r2, sp, #24
 801dd30:	ee10 3a10 	vmov	r3, s0
 801dd34:	46ab      	mov	fp, r5
 801dd36:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801dd3a:	e736      	b.n	801dbaa <__kernel_rem_pio2+0x1f2>
 801dd3c:	a806      	add	r0, sp, #24
 801dd3e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801dd42:	9001      	str	r0, [sp, #4]
 801dd44:	ee07 0a90 	vmov	s15, r0
 801dd48:	3a01      	subs	r2, #1
 801dd4a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801dd4e:	ee27 7b00 	vmul.f64	d7, d7, d0
 801dd52:	ee20 0b06 	vmul.f64	d0, d0, d6
 801dd56:	ed21 7b02 	vstmdb	r1!, {d7}
 801dd5a:	e734      	b.n	801dbc6 <__kernel_rem_pio2+0x20e>
 801dd5c:	ecb5 5b02 	vldmia	r5!, {d5}
 801dd60:	ecb4 6b02 	vldmia	r4!, {d6}
 801dd64:	3001      	adds	r0, #1
 801dd66:	eea5 7b06 	vfma.f64	d7, d5, d6
 801dd6a:	4548      	cmp	r0, r9
 801dd6c:	dc01      	bgt.n	801dd72 <__kernel_rem_pio2+0x3ba>
 801dd6e:	4288      	cmp	r0, r1
 801dd70:	ddf4      	ble.n	801dd5c <__kernel_rem_pio2+0x3a4>
 801dd72:	a842      	add	r0, sp, #264	; 0x108
 801dd74:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801dd78:	ed81 7b00 	vstr	d7, [r1]
 801dd7c:	3a01      	subs	r2, #1
 801dd7e:	e726      	b.n	801dbce <__kernel_rem_pio2+0x216>
 801dd80:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 801dd82:	2a02      	cmp	r2, #2
 801dd84:	dc0a      	bgt.n	801dd9c <__kernel_rem_pio2+0x3e4>
 801dd86:	2a00      	cmp	r2, #0
 801dd88:	dc2e      	bgt.n	801dde8 <__kernel_rem_pio2+0x430>
 801dd8a:	d047      	beq.n	801de1c <__kernel_rem_pio2+0x464>
 801dd8c:	f008 0007 	and.w	r0, r8, #7
 801dd90:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 801dd94:	ecbd 8b06 	vpop	{d8-d10}
 801dd98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd9c:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 801dd9e:	2a03      	cmp	r2, #3
 801dda0:	d1f4      	bne.n	801dd8c <__kernel_rem_pio2+0x3d4>
 801dda2:	a942      	add	r1, sp, #264	; 0x108
 801dda4:	f1a3 0208 	sub.w	r2, r3, #8
 801dda8:	440a      	add	r2, r1
 801ddaa:	4611      	mov	r1, r2
 801ddac:	4658      	mov	r0, fp
 801ddae:	2800      	cmp	r0, #0
 801ddb0:	f1a1 0108 	sub.w	r1, r1, #8
 801ddb4:	dc55      	bgt.n	801de62 <__kernel_rem_pio2+0x4aa>
 801ddb6:	4659      	mov	r1, fp
 801ddb8:	2901      	cmp	r1, #1
 801ddba:	f1a2 0208 	sub.w	r2, r2, #8
 801ddbe:	dc60      	bgt.n	801de82 <__kernel_rem_pio2+0x4ca>
 801ddc0:	ed9f 7b45 	vldr	d7, [pc, #276]	; 801ded8 <__kernel_rem_pio2+0x520>
 801ddc4:	aa42      	add	r2, sp, #264	; 0x108
 801ddc6:	4413      	add	r3, r2
 801ddc8:	f1bb 0f01 	cmp.w	fp, #1
 801ddcc:	dc69      	bgt.n	801dea2 <__kernel_rem_pio2+0x4ea>
 801ddce:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 801ddd2:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 801ddd6:	2e00      	cmp	r6, #0
 801ddd8:	d16a      	bne.n	801deb0 <__kernel_rem_pio2+0x4f8>
 801ddda:	ed87 5b00 	vstr	d5, [r7]
 801ddde:	ed87 6b02 	vstr	d6, [r7, #8]
 801dde2:	ed87 7b04 	vstr	d7, [r7, #16]
 801dde6:	e7d1      	b.n	801dd8c <__kernel_rem_pio2+0x3d4>
 801dde8:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 801ded8 <__kernel_rem_pio2+0x520>
 801ddec:	aa42      	add	r2, sp, #264	; 0x108
 801ddee:	4413      	add	r3, r2
 801ddf0:	465a      	mov	r2, fp
 801ddf2:	2a00      	cmp	r2, #0
 801ddf4:	da26      	bge.n	801de44 <__kernel_rem_pio2+0x48c>
 801ddf6:	b35e      	cbz	r6, 801de50 <__kernel_rem_pio2+0x498>
 801ddf8:	eeb1 7b46 	vneg.f64	d7, d6
 801ddfc:	ed87 7b00 	vstr	d7, [r7]
 801de00:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 801de04:	aa44      	add	r2, sp, #272	; 0x110
 801de06:	2301      	movs	r3, #1
 801de08:	ee37 7b46 	vsub.f64	d7, d7, d6
 801de0c:	459b      	cmp	fp, r3
 801de0e:	da22      	bge.n	801de56 <__kernel_rem_pio2+0x49e>
 801de10:	b10e      	cbz	r6, 801de16 <__kernel_rem_pio2+0x45e>
 801de12:	eeb1 7b47 	vneg.f64	d7, d7
 801de16:	ed87 7b02 	vstr	d7, [r7, #8]
 801de1a:	e7b7      	b.n	801dd8c <__kernel_rem_pio2+0x3d4>
 801de1c:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801ded8 <__kernel_rem_pio2+0x520>
 801de20:	aa42      	add	r2, sp, #264	; 0x108
 801de22:	4413      	add	r3, r2
 801de24:	f1bb 0f00 	cmp.w	fp, #0
 801de28:	da05      	bge.n	801de36 <__kernel_rem_pio2+0x47e>
 801de2a:	b10e      	cbz	r6, 801de30 <__kernel_rem_pio2+0x478>
 801de2c:	eeb1 7b47 	vneg.f64	d7, d7
 801de30:	ed87 7b00 	vstr	d7, [r7]
 801de34:	e7aa      	b.n	801dd8c <__kernel_rem_pio2+0x3d4>
 801de36:	ed33 6b02 	vldmdb	r3!, {d6}
 801de3a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801de3e:	ee37 7b06 	vadd.f64	d7, d7, d6
 801de42:	e7ef      	b.n	801de24 <__kernel_rem_pio2+0x46c>
 801de44:	ed33 7b02 	vldmdb	r3!, {d7}
 801de48:	3a01      	subs	r2, #1
 801de4a:	ee36 6b07 	vadd.f64	d6, d6, d7
 801de4e:	e7d0      	b.n	801ddf2 <__kernel_rem_pio2+0x43a>
 801de50:	eeb0 7b46 	vmov.f64	d7, d6
 801de54:	e7d2      	b.n	801ddfc <__kernel_rem_pio2+0x444>
 801de56:	ecb2 6b02 	vldmia	r2!, {d6}
 801de5a:	3301      	adds	r3, #1
 801de5c:	ee37 7b06 	vadd.f64	d7, d7, d6
 801de60:	e7d4      	b.n	801de0c <__kernel_rem_pio2+0x454>
 801de62:	ed91 7b00 	vldr	d7, [r1]
 801de66:	ed91 5b02 	vldr	d5, [r1, #8]
 801de6a:	3801      	subs	r0, #1
 801de6c:	ee37 6b05 	vadd.f64	d6, d7, d5
 801de70:	ee37 7b46 	vsub.f64	d7, d7, d6
 801de74:	ed81 6b00 	vstr	d6, [r1]
 801de78:	ee37 7b05 	vadd.f64	d7, d7, d5
 801de7c:	ed81 7b02 	vstr	d7, [r1, #8]
 801de80:	e795      	b.n	801ddae <__kernel_rem_pio2+0x3f6>
 801de82:	ed92 7b00 	vldr	d7, [r2]
 801de86:	ed92 5b02 	vldr	d5, [r2, #8]
 801de8a:	3901      	subs	r1, #1
 801de8c:	ee37 6b05 	vadd.f64	d6, d7, d5
 801de90:	ee37 7b46 	vsub.f64	d7, d7, d6
 801de94:	ed82 6b00 	vstr	d6, [r2]
 801de98:	ee37 7b05 	vadd.f64	d7, d7, d5
 801de9c:	ed82 7b02 	vstr	d7, [r2, #8]
 801dea0:	e78a      	b.n	801ddb8 <__kernel_rem_pio2+0x400>
 801dea2:	ed33 6b02 	vldmdb	r3!, {d6}
 801dea6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801deaa:	ee37 7b06 	vadd.f64	d7, d7, d6
 801deae:	e78b      	b.n	801ddc8 <__kernel_rem_pio2+0x410>
 801deb0:	eeb1 5b45 	vneg.f64	d5, d5
 801deb4:	eeb1 6b46 	vneg.f64	d6, d6
 801deb8:	ed87 5b00 	vstr	d5, [r7]
 801debc:	eeb1 7b47 	vneg.f64	d7, d7
 801dec0:	ed87 6b02 	vstr	d6, [r7, #8]
 801dec4:	e78d      	b.n	801dde2 <__kernel_rem_pio2+0x42a>
 801dec6:	bf00      	nop
 801dec8:	00000000 	.word	0x00000000
 801decc:	41700000 	.word	0x41700000
 801ded0:	00000000 	.word	0x00000000
 801ded4:	3e700000 	.word	0x3e700000
	...

0801dee0 <scalbn>:
 801dee0:	ee10 1a90 	vmov	r1, s1
 801dee4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801dee8:	b98b      	cbnz	r3, 801df0e <scalbn+0x2e>
 801deea:	ee10 3a10 	vmov	r3, s0
 801deee:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801def2:	4319      	orrs	r1, r3
 801def4:	d00a      	beq.n	801df0c <scalbn+0x2c>
 801def6:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 801dfa8 <scalbn+0xc8>
 801defa:	4b37      	ldr	r3, [pc, #220]	; (801dfd8 <scalbn+0xf8>)
 801defc:	ee20 0b07 	vmul.f64	d0, d0, d7
 801df00:	4298      	cmp	r0, r3
 801df02:	da0b      	bge.n	801df1c <scalbn+0x3c>
 801df04:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 801dfb0 <scalbn+0xd0>
 801df08:	ee20 0b07 	vmul.f64	d0, d0, d7
 801df0c:	4770      	bx	lr
 801df0e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801df12:	4293      	cmp	r3, r2
 801df14:	d107      	bne.n	801df26 <scalbn+0x46>
 801df16:	ee30 0b00 	vadd.f64	d0, d0, d0
 801df1a:	4770      	bx	lr
 801df1c:	ee10 1a90 	vmov	r1, s1
 801df20:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801df24:	3b36      	subs	r3, #54	; 0x36
 801df26:	f24c 3250 	movw	r2, #50000	; 0xc350
 801df2a:	4290      	cmp	r0, r2
 801df2c:	dd0d      	ble.n	801df4a <scalbn+0x6a>
 801df2e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 801dfb8 <scalbn+0xd8>
 801df32:	ee10 3a90 	vmov	r3, s1
 801df36:	eeb0 6b47 	vmov.f64	d6, d7
 801df3a:	ed9f 5b21 	vldr	d5, [pc, #132]	; 801dfc0 <scalbn+0xe0>
 801df3e:	2b00      	cmp	r3, #0
 801df40:	fe27 7b05 	vselge.f64	d7, d7, d5
 801df44:	ee27 0b06 	vmul.f64	d0, d7, d6
 801df48:	4770      	bx	lr
 801df4a:	4418      	add	r0, r3
 801df4c:	f240 73fe 	movw	r3, #2046	; 0x7fe
 801df50:	4298      	cmp	r0, r3
 801df52:	dcec      	bgt.n	801df2e <scalbn+0x4e>
 801df54:	2800      	cmp	r0, #0
 801df56:	dd0a      	ble.n	801df6e <scalbn+0x8e>
 801df58:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801df5c:	ec53 2b10 	vmov	r2, r3, d0
 801df60:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 801df64:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801df68:	ec43 2b10 	vmov	d0, r2, r3
 801df6c:	4770      	bx	lr
 801df6e:	f110 0f35 	cmn.w	r0, #53	; 0x35
 801df72:	da09      	bge.n	801df88 <scalbn+0xa8>
 801df74:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 801dfb0 <scalbn+0xd0>
 801df78:	ee10 3a90 	vmov	r3, s1
 801df7c:	eeb0 6b47 	vmov.f64	d6, d7
 801df80:	ed9f 5b11 	vldr	d5, [pc, #68]	; 801dfc8 <scalbn+0xe8>
 801df84:	2b00      	cmp	r3, #0
 801df86:	e7db      	b.n	801df40 <scalbn+0x60>
 801df88:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801df8c:	ec53 2b10 	vmov	r2, r3, d0
 801df90:	3036      	adds	r0, #54	; 0x36
 801df92:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 801df96:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801df9a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 801dfd0 <scalbn+0xf0>
 801df9e:	ec43 2b10 	vmov	d0, r2, r3
 801dfa2:	e7b1      	b.n	801df08 <scalbn+0x28>
 801dfa4:	f3af 8000 	nop.w
 801dfa8:	00000000 	.word	0x00000000
 801dfac:	43500000 	.word	0x43500000
 801dfb0:	c2f8f359 	.word	0xc2f8f359
 801dfb4:	01a56e1f 	.word	0x01a56e1f
 801dfb8:	8800759c 	.word	0x8800759c
 801dfbc:	7e37e43c 	.word	0x7e37e43c
 801dfc0:	8800759c 	.word	0x8800759c
 801dfc4:	fe37e43c 	.word	0xfe37e43c
 801dfc8:	c2f8f359 	.word	0xc2f8f359
 801dfcc:	81a56e1f 	.word	0x81a56e1f
 801dfd0:	00000000 	.word	0x00000000
 801dfd4:	3c900000 	.word	0x3c900000
 801dfd8:	ffff3cb0 	.word	0xffff3cb0
 801dfdc:	00000000 	.word	0x00000000

0801dfe0 <floor>:
 801dfe0:	ee10 1a90 	vmov	r1, s1
 801dfe4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801dfe8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801dfec:	2b13      	cmp	r3, #19
 801dfee:	b530      	push	{r4, r5, lr}
 801dff0:	ee10 0a10 	vmov	r0, s0
 801dff4:	ee10 5a10 	vmov	r5, s0
 801dff8:	dc31      	bgt.n	801e05e <floor+0x7e>
 801dffa:	2b00      	cmp	r3, #0
 801dffc:	da15      	bge.n	801e02a <floor+0x4a>
 801dffe:	ed9f 7b30 	vldr	d7, [pc, #192]	; 801e0c0 <floor+0xe0>
 801e002:	ee30 0b07 	vadd.f64	d0, d0, d7
 801e006:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801e00a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e00e:	dd07      	ble.n	801e020 <floor+0x40>
 801e010:	2900      	cmp	r1, #0
 801e012:	da4e      	bge.n	801e0b2 <floor+0xd2>
 801e014:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801e018:	4308      	orrs	r0, r1
 801e01a:	d04d      	beq.n	801e0b8 <floor+0xd8>
 801e01c:	492a      	ldr	r1, [pc, #168]	; (801e0c8 <floor+0xe8>)
 801e01e:	2000      	movs	r0, #0
 801e020:	460b      	mov	r3, r1
 801e022:	4602      	mov	r2, r0
 801e024:	ec43 2b10 	vmov	d0, r2, r3
 801e028:	e020      	b.n	801e06c <floor+0x8c>
 801e02a:	4a28      	ldr	r2, [pc, #160]	; (801e0cc <floor+0xec>)
 801e02c:	411a      	asrs	r2, r3
 801e02e:	ea01 0402 	and.w	r4, r1, r2
 801e032:	4304      	orrs	r4, r0
 801e034:	d01a      	beq.n	801e06c <floor+0x8c>
 801e036:	ed9f 7b22 	vldr	d7, [pc, #136]	; 801e0c0 <floor+0xe0>
 801e03a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801e03e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801e042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e046:	ddeb      	ble.n	801e020 <floor+0x40>
 801e048:	2900      	cmp	r1, #0
 801e04a:	bfbe      	ittt	lt
 801e04c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 801e050:	fa40 f303 	asrlt.w	r3, r0, r3
 801e054:	18c9      	addlt	r1, r1, r3
 801e056:	ea21 0102 	bic.w	r1, r1, r2
 801e05a:	2000      	movs	r0, #0
 801e05c:	e7e0      	b.n	801e020 <floor+0x40>
 801e05e:	2b33      	cmp	r3, #51	; 0x33
 801e060:	dd05      	ble.n	801e06e <floor+0x8e>
 801e062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801e066:	d101      	bne.n	801e06c <floor+0x8c>
 801e068:	ee30 0b00 	vadd.f64	d0, d0, d0
 801e06c:	bd30      	pop	{r4, r5, pc}
 801e06e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 801e072:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e076:	40e2      	lsrs	r2, r4
 801e078:	4210      	tst	r0, r2
 801e07a:	d0f7      	beq.n	801e06c <floor+0x8c>
 801e07c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 801e0c0 <floor+0xe0>
 801e080:	ee30 0b07 	vadd.f64	d0, d0, d7
 801e084:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801e088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e08c:	ddc8      	ble.n	801e020 <floor+0x40>
 801e08e:	2900      	cmp	r1, #0
 801e090:	da02      	bge.n	801e098 <floor+0xb8>
 801e092:	2b14      	cmp	r3, #20
 801e094:	d103      	bne.n	801e09e <floor+0xbe>
 801e096:	3101      	adds	r1, #1
 801e098:	ea20 0002 	bic.w	r0, r0, r2
 801e09c:	e7c0      	b.n	801e020 <floor+0x40>
 801e09e:	2401      	movs	r4, #1
 801e0a0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801e0a4:	fa04 f303 	lsl.w	r3, r4, r3
 801e0a8:	4418      	add	r0, r3
 801e0aa:	4285      	cmp	r5, r0
 801e0ac:	bf88      	it	hi
 801e0ae:	1909      	addhi	r1, r1, r4
 801e0b0:	e7f2      	b.n	801e098 <floor+0xb8>
 801e0b2:	2000      	movs	r0, #0
 801e0b4:	4601      	mov	r1, r0
 801e0b6:	e7b3      	b.n	801e020 <floor+0x40>
 801e0b8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801e0bc:	e7b0      	b.n	801e020 <floor+0x40>
 801e0be:	bf00      	nop
 801e0c0:	8800759c 	.word	0x8800759c
 801e0c4:	7e37e43c 	.word	0x7e37e43c
 801e0c8:	bff00000 	.word	0xbff00000
 801e0cc:	000fffff 	.word	0x000fffff

0801e0d0 <calloc>:
 801e0d0:	4b02      	ldr	r3, [pc, #8]	; (801e0dc <calloc+0xc>)
 801e0d2:	460a      	mov	r2, r1
 801e0d4:	4601      	mov	r1, r0
 801e0d6:	6818      	ldr	r0, [r3, #0]
 801e0d8:	f000 b802 	b.w	801e0e0 <_calloc_r>
 801e0dc:	20002338 	.word	0x20002338

0801e0e0 <_calloc_r>:
 801e0e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e0e2:	fba1 2402 	umull	r2, r4, r1, r2
 801e0e6:	b94c      	cbnz	r4, 801e0fc <_calloc_r+0x1c>
 801e0e8:	4611      	mov	r1, r2
 801e0ea:	9201      	str	r2, [sp, #4]
 801e0ec:	f000 f886 	bl	801e1fc <_malloc_r>
 801e0f0:	9a01      	ldr	r2, [sp, #4]
 801e0f2:	4605      	mov	r5, r0
 801e0f4:	b930      	cbnz	r0, 801e104 <_calloc_r+0x24>
 801e0f6:	4628      	mov	r0, r5
 801e0f8:	b003      	add	sp, #12
 801e0fa:	bd30      	pop	{r4, r5, pc}
 801e0fc:	220c      	movs	r2, #12
 801e0fe:	6002      	str	r2, [r0, #0]
 801e100:	2500      	movs	r5, #0
 801e102:	e7f8      	b.n	801e0f6 <_calloc_r+0x16>
 801e104:	4621      	mov	r1, r4
 801e106:	f000 fbc1 	bl	801e88c <memset>
 801e10a:	e7f4      	b.n	801e0f6 <_calloc_r+0x16>

0801e10c <getenv>:
 801e10c:	b507      	push	{r0, r1, r2, lr}
 801e10e:	4b04      	ldr	r3, [pc, #16]	; (801e120 <getenv+0x14>)
 801e110:	4601      	mov	r1, r0
 801e112:	aa01      	add	r2, sp, #4
 801e114:	6818      	ldr	r0, [r3, #0]
 801e116:	f000 f805 	bl	801e124 <_findenv_r>
 801e11a:	b003      	add	sp, #12
 801e11c:	f85d fb04 	ldr.w	pc, [sp], #4
 801e120:	20002338 	.word	0x20002338

0801e124 <_findenv_r>:
 801e124:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e128:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801e198 <_findenv_r+0x74>
 801e12c:	4607      	mov	r7, r0
 801e12e:	4689      	mov	r9, r1
 801e130:	4616      	mov	r6, r2
 801e132:	f000 fd09 	bl	801eb48 <__env_lock>
 801e136:	f8da 4000 	ldr.w	r4, [sl]
 801e13a:	b134      	cbz	r4, 801e14a <_findenv_r+0x26>
 801e13c:	464b      	mov	r3, r9
 801e13e:	4698      	mov	r8, r3
 801e140:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e144:	b13a      	cbz	r2, 801e156 <_findenv_r+0x32>
 801e146:	2a3d      	cmp	r2, #61	; 0x3d
 801e148:	d1f9      	bne.n	801e13e <_findenv_r+0x1a>
 801e14a:	4638      	mov	r0, r7
 801e14c:	f000 fd02 	bl	801eb54 <__env_unlock>
 801e150:	2000      	movs	r0, #0
 801e152:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e156:	eba8 0809 	sub.w	r8, r8, r9
 801e15a:	46a3      	mov	fp, r4
 801e15c:	f854 0b04 	ldr.w	r0, [r4], #4
 801e160:	2800      	cmp	r0, #0
 801e162:	d0f2      	beq.n	801e14a <_findenv_r+0x26>
 801e164:	4642      	mov	r2, r8
 801e166:	4649      	mov	r1, r9
 801e168:	f000 fba5 	bl	801e8b6 <strncmp>
 801e16c:	2800      	cmp	r0, #0
 801e16e:	d1f4      	bne.n	801e15a <_findenv_r+0x36>
 801e170:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801e174:	eb03 0508 	add.w	r5, r3, r8
 801e178:	f813 3008 	ldrb.w	r3, [r3, r8]
 801e17c:	2b3d      	cmp	r3, #61	; 0x3d
 801e17e:	d1ec      	bne.n	801e15a <_findenv_r+0x36>
 801e180:	f8da 3000 	ldr.w	r3, [sl]
 801e184:	ebab 0303 	sub.w	r3, fp, r3
 801e188:	109b      	asrs	r3, r3, #2
 801e18a:	4638      	mov	r0, r7
 801e18c:	6033      	str	r3, [r6, #0]
 801e18e:	f000 fce1 	bl	801eb54 <__env_unlock>
 801e192:	1c68      	adds	r0, r5, #1
 801e194:	e7dd      	b.n	801e152 <_findenv_r+0x2e>
 801e196:	bf00      	nop
 801e198:	20000000 	.word	0x20000000

0801e19c <malloc>:
 801e19c:	4b02      	ldr	r3, [pc, #8]	; (801e1a8 <malloc+0xc>)
 801e19e:	4601      	mov	r1, r0
 801e1a0:	6818      	ldr	r0, [r3, #0]
 801e1a2:	f000 b82b 	b.w	801e1fc <_malloc_r>
 801e1a6:	bf00      	nop
 801e1a8:	20002338 	.word	0x20002338

0801e1ac <free>:
 801e1ac:	4b02      	ldr	r3, [pc, #8]	; (801e1b8 <free+0xc>)
 801e1ae:	4601      	mov	r1, r0
 801e1b0:	6818      	ldr	r0, [r3, #0]
 801e1b2:	f000 bcd5 	b.w	801eb60 <_free_r>
 801e1b6:	bf00      	nop
 801e1b8:	20002338 	.word	0x20002338

0801e1bc <sbrk_aligned>:
 801e1bc:	b570      	push	{r4, r5, r6, lr}
 801e1be:	4e0e      	ldr	r6, [pc, #56]	; (801e1f8 <sbrk_aligned+0x3c>)
 801e1c0:	460c      	mov	r4, r1
 801e1c2:	6831      	ldr	r1, [r6, #0]
 801e1c4:	4605      	mov	r5, r0
 801e1c6:	b911      	cbnz	r1, 801e1ce <sbrk_aligned+0x12>
 801e1c8:	f000 fc3a 	bl	801ea40 <_sbrk_r>
 801e1cc:	6030      	str	r0, [r6, #0]
 801e1ce:	4621      	mov	r1, r4
 801e1d0:	4628      	mov	r0, r5
 801e1d2:	f000 fc35 	bl	801ea40 <_sbrk_r>
 801e1d6:	1c43      	adds	r3, r0, #1
 801e1d8:	d00a      	beq.n	801e1f0 <sbrk_aligned+0x34>
 801e1da:	1cc4      	adds	r4, r0, #3
 801e1dc:	f024 0403 	bic.w	r4, r4, #3
 801e1e0:	42a0      	cmp	r0, r4
 801e1e2:	d007      	beq.n	801e1f4 <sbrk_aligned+0x38>
 801e1e4:	1a21      	subs	r1, r4, r0
 801e1e6:	4628      	mov	r0, r5
 801e1e8:	f000 fc2a 	bl	801ea40 <_sbrk_r>
 801e1ec:	3001      	adds	r0, #1
 801e1ee:	d101      	bne.n	801e1f4 <sbrk_aligned+0x38>
 801e1f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801e1f4:	4620      	mov	r0, r4
 801e1f6:	bd70      	pop	{r4, r5, r6, pc}
 801e1f8:	20011d9c 	.word	0x20011d9c

0801e1fc <_malloc_r>:
 801e1fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e200:	1ccd      	adds	r5, r1, #3
 801e202:	f025 0503 	bic.w	r5, r5, #3
 801e206:	3508      	adds	r5, #8
 801e208:	2d0c      	cmp	r5, #12
 801e20a:	bf38      	it	cc
 801e20c:	250c      	movcc	r5, #12
 801e20e:	2d00      	cmp	r5, #0
 801e210:	4607      	mov	r7, r0
 801e212:	db01      	blt.n	801e218 <_malloc_r+0x1c>
 801e214:	42a9      	cmp	r1, r5
 801e216:	d905      	bls.n	801e224 <_malloc_r+0x28>
 801e218:	230c      	movs	r3, #12
 801e21a:	603b      	str	r3, [r7, #0]
 801e21c:	2600      	movs	r6, #0
 801e21e:	4630      	mov	r0, r6
 801e220:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e224:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801e2f8 <_malloc_r+0xfc>
 801e228:	f000 f868 	bl	801e2fc <__malloc_lock>
 801e22c:	f8d8 3000 	ldr.w	r3, [r8]
 801e230:	461c      	mov	r4, r3
 801e232:	bb5c      	cbnz	r4, 801e28c <_malloc_r+0x90>
 801e234:	4629      	mov	r1, r5
 801e236:	4638      	mov	r0, r7
 801e238:	f7ff ffc0 	bl	801e1bc <sbrk_aligned>
 801e23c:	1c43      	adds	r3, r0, #1
 801e23e:	4604      	mov	r4, r0
 801e240:	d155      	bne.n	801e2ee <_malloc_r+0xf2>
 801e242:	f8d8 4000 	ldr.w	r4, [r8]
 801e246:	4626      	mov	r6, r4
 801e248:	2e00      	cmp	r6, #0
 801e24a:	d145      	bne.n	801e2d8 <_malloc_r+0xdc>
 801e24c:	2c00      	cmp	r4, #0
 801e24e:	d048      	beq.n	801e2e2 <_malloc_r+0xe6>
 801e250:	6823      	ldr	r3, [r4, #0]
 801e252:	4631      	mov	r1, r6
 801e254:	4638      	mov	r0, r7
 801e256:	eb04 0903 	add.w	r9, r4, r3
 801e25a:	f000 fbf1 	bl	801ea40 <_sbrk_r>
 801e25e:	4581      	cmp	r9, r0
 801e260:	d13f      	bne.n	801e2e2 <_malloc_r+0xe6>
 801e262:	6821      	ldr	r1, [r4, #0]
 801e264:	1a6d      	subs	r5, r5, r1
 801e266:	4629      	mov	r1, r5
 801e268:	4638      	mov	r0, r7
 801e26a:	f7ff ffa7 	bl	801e1bc <sbrk_aligned>
 801e26e:	3001      	adds	r0, #1
 801e270:	d037      	beq.n	801e2e2 <_malloc_r+0xe6>
 801e272:	6823      	ldr	r3, [r4, #0]
 801e274:	442b      	add	r3, r5
 801e276:	6023      	str	r3, [r4, #0]
 801e278:	f8d8 3000 	ldr.w	r3, [r8]
 801e27c:	2b00      	cmp	r3, #0
 801e27e:	d038      	beq.n	801e2f2 <_malloc_r+0xf6>
 801e280:	685a      	ldr	r2, [r3, #4]
 801e282:	42a2      	cmp	r2, r4
 801e284:	d12b      	bne.n	801e2de <_malloc_r+0xe2>
 801e286:	2200      	movs	r2, #0
 801e288:	605a      	str	r2, [r3, #4]
 801e28a:	e00f      	b.n	801e2ac <_malloc_r+0xb0>
 801e28c:	6822      	ldr	r2, [r4, #0]
 801e28e:	1b52      	subs	r2, r2, r5
 801e290:	d41f      	bmi.n	801e2d2 <_malloc_r+0xd6>
 801e292:	2a0b      	cmp	r2, #11
 801e294:	d917      	bls.n	801e2c6 <_malloc_r+0xca>
 801e296:	1961      	adds	r1, r4, r5
 801e298:	42a3      	cmp	r3, r4
 801e29a:	6025      	str	r5, [r4, #0]
 801e29c:	bf18      	it	ne
 801e29e:	6059      	strne	r1, [r3, #4]
 801e2a0:	6863      	ldr	r3, [r4, #4]
 801e2a2:	bf08      	it	eq
 801e2a4:	f8c8 1000 	streq.w	r1, [r8]
 801e2a8:	5162      	str	r2, [r4, r5]
 801e2aa:	604b      	str	r3, [r1, #4]
 801e2ac:	4638      	mov	r0, r7
 801e2ae:	f104 060b 	add.w	r6, r4, #11
 801e2b2:	f000 f829 	bl	801e308 <__malloc_unlock>
 801e2b6:	f026 0607 	bic.w	r6, r6, #7
 801e2ba:	1d23      	adds	r3, r4, #4
 801e2bc:	1af2      	subs	r2, r6, r3
 801e2be:	d0ae      	beq.n	801e21e <_malloc_r+0x22>
 801e2c0:	1b9b      	subs	r3, r3, r6
 801e2c2:	50a3      	str	r3, [r4, r2]
 801e2c4:	e7ab      	b.n	801e21e <_malloc_r+0x22>
 801e2c6:	42a3      	cmp	r3, r4
 801e2c8:	6862      	ldr	r2, [r4, #4]
 801e2ca:	d1dd      	bne.n	801e288 <_malloc_r+0x8c>
 801e2cc:	f8c8 2000 	str.w	r2, [r8]
 801e2d0:	e7ec      	b.n	801e2ac <_malloc_r+0xb0>
 801e2d2:	4623      	mov	r3, r4
 801e2d4:	6864      	ldr	r4, [r4, #4]
 801e2d6:	e7ac      	b.n	801e232 <_malloc_r+0x36>
 801e2d8:	4634      	mov	r4, r6
 801e2da:	6876      	ldr	r6, [r6, #4]
 801e2dc:	e7b4      	b.n	801e248 <_malloc_r+0x4c>
 801e2de:	4613      	mov	r3, r2
 801e2e0:	e7cc      	b.n	801e27c <_malloc_r+0x80>
 801e2e2:	230c      	movs	r3, #12
 801e2e4:	603b      	str	r3, [r7, #0]
 801e2e6:	4638      	mov	r0, r7
 801e2e8:	f000 f80e 	bl	801e308 <__malloc_unlock>
 801e2ec:	e797      	b.n	801e21e <_malloc_r+0x22>
 801e2ee:	6025      	str	r5, [r4, #0]
 801e2f0:	e7dc      	b.n	801e2ac <_malloc_r+0xb0>
 801e2f2:	605b      	str	r3, [r3, #4]
 801e2f4:	deff      	udf	#255	; 0xff
 801e2f6:	bf00      	nop
 801e2f8:	20011d98 	.word	0x20011d98

0801e2fc <__malloc_lock>:
 801e2fc:	4801      	ldr	r0, [pc, #4]	; (801e304 <__malloc_lock+0x8>)
 801e2fe:	f000 bbec 	b.w	801eada <__retarget_lock_acquire_recursive>
 801e302:	bf00      	nop
 801e304:	20011ee1 	.word	0x20011ee1

0801e308 <__malloc_unlock>:
 801e308:	4801      	ldr	r0, [pc, #4]	; (801e310 <__malloc_unlock+0x8>)
 801e30a:	f000 bbe7 	b.w	801eadc <__retarget_lock_release_recursive>
 801e30e:	bf00      	nop
 801e310:	20011ee1 	.word	0x20011ee1

0801e314 <srand>:
 801e314:	b538      	push	{r3, r4, r5, lr}
 801e316:	4b10      	ldr	r3, [pc, #64]	; (801e358 <srand+0x44>)
 801e318:	681d      	ldr	r5, [r3, #0]
 801e31a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801e31c:	4604      	mov	r4, r0
 801e31e:	b9b3      	cbnz	r3, 801e34e <srand+0x3a>
 801e320:	2018      	movs	r0, #24
 801e322:	f7ff ff3b 	bl	801e19c <malloc>
 801e326:	4602      	mov	r2, r0
 801e328:	6328      	str	r0, [r5, #48]	; 0x30
 801e32a:	b920      	cbnz	r0, 801e336 <srand+0x22>
 801e32c:	4b0b      	ldr	r3, [pc, #44]	; (801e35c <srand+0x48>)
 801e32e:	480c      	ldr	r0, [pc, #48]	; (801e360 <srand+0x4c>)
 801e330:	2146      	movs	r1, #70	; 0x46
 801e332:	f000 fbeb 	bl	801eb0c <__assert_func>
 801e336:	490b      	ldr	r1, [pc, #44]	; (801e364 <srand+0x50>)
 801e338:	4b0b      	ldr	r3, [pc, #44]	; (801e368 <srand+0x54>)
 801e33a:	e9c0 1300 	strd	r1, r3, [r0]
 801e33e:	4b0b      	ldr	r3, [pc, #44]	; (801e36c <srand+0x58>)
 801e340:	6083      	str	r3, [r0, #8]
 801e342:	230b      	movs	r3, #11
 801e344:	8183      	strh	r3, [r0, #12]
 801e346:	2100      	movs	r1, #0
 801e348:	2001      	movs	r0, #1
 801e34a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801e34e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801e350:	2200      	movs	r2, #0
 801e352:	611c      	str	r4, [r3, #16]
 801e354:	615a      	str	r2, [r3, #20]
 801e356:	bd38      	pop	{r3, r4, r5, pc}
 801e358:	20002338 	.word	0x20002338
 801e35c:	08021b88 	.word	0x08021b88
 801e360:	08021b9f 	.word	0x08021b9f
 801e364:	abcd330e 	.word	0xabcd330e
 801e368:	e66d1234 	.word	0xe66d1234
 801e36c:	0005deec 	.word	0x0005deec

0801e370 <rand>:
 801e370:	4b16      	ldr	r3, [pc, #88]	; (801e3cc <rand+0x5c>)
 801e372:	b510      	push	{r4, lr}
 801e374:	681c      	ldr	r4, [r3, #0]
 801e376:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801e378:	b9b3      	cbnz	r3, 801e3a8 <rand+0x38>
 801e37a:	2018      	movs	r0, #24
 801e37c:	f7ff ff0e 	bl	801e19c <malloc>
 801e380:	4602      	mov	r2, r0
 801e382:	6320      	str	r0, [r4, #48]	; 0x30
 801e384:	b920      	cbnz	r0, 801e390 <rand+0x20>
 801e386:	4b12      	ldr	r3, [pc, #72]	; (801e3d0 <rand+0x60>)
 801e388:	4812      	ldr	r0, [pc, #72]	; (801e3d4 <rand+0x64>)
 801e38a:	2152      	movs	r1, #82	; 0x52
 801e38c:	f000 fbbe 	bl	801eb0c <__assert_func>
 801e390:	4911      	ldr	r1, [pc, #68]	; (801e3d8 <rand+0x68>)
 801e392:	4b12      	ldr	r3, [pc, #72]	; (801e3dc <rand+0x6c>)
 801e394:	e9c0 1300 	strd	r1, r3, [r0]
 801e398:	4b11      	ldr	r3, [pc, #68]	; (801e3e0 <rand+0x70>)
 801e39a:	6083      	str	r3, [r0, #8]
 801e39c:	230b      	movs	r3, #11
 801e39e:	8183      	strh	r3, [r0, #12]
 801e3a0:	2100      	movs	r1, #0
 801e3a2:	2001      	movs	r0, #1
 801e3a4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801e3a8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801e3aa:	480e      	ldr	r0, [pc, #56]	; (801e3e4 <rand+0x74>)
 801e3ac:	690b      	ldr	r3, [r1, #16]
 801e3ae:	694c      	ldr	r4, [r1, #20]
 801e3b0:	4a0d      	ldr	r2, [pc, #52]	; (801e3e8 <rand+0x78>)
 801e3b2:	4358      	muls	r0, r3
 801e3b4:	fb02 0004 	mla	r0, r2, r4, r0
 801e3b8:	fba3 3202 	umull	r3, r2, r3, r2
 801e3bc:	3301      	adds	r3, #1
 801e3be:	eb40 0002 	adc.w	r0, r0, r2
 801e3c2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801e3c6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801e3ca:	bd10      	pop	{r4, pc}
 801e3cc:	20002338 	.word	0x20002338
 801e3d0:	08021b88 	.word	0x08021b88
 801e3d4:	08021b9f 	.word	0x08021b9f
 801e3d8:	abcd330e 	.word	0xabcd330e
 801e3dc:	e66d1234 	.word	0xe66d1234
 801e3e0:	0005deec 	.word	0x0005deec
 801e3e4:	5851f42d 	.word	0x5851f42d
 801e3e8:	4c957f2d 	.word	0x4c957f2d

0801e3ec <realloc>:
 801e3ec:	4b02      	ldr	r3, [pc, #8]	; (801e3f8 <realloc+0xc>)
 801e3ee:	460a      	mov	r2, r1
 801e3f0:	4601      	mov	r1, r0
 801e3f2:	6818      	ldr	r0, [r3, #0]
 801e3f4:	f000 b802 	b.w	801e3fc <_realloc_r>
 801e3f8:	20002338 	.word	0x20002338

0801e3fc <_realloc_r>:
 801e3fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e400:	4680      	mov	r8, r0
 801e402:	4614      	mov	r4, r2
 801e404:	460e      	mov	r6, r1
 801e406:	b921      	cbnz	r1, 801e412 <_realloc_r+0x16>
 801e408:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e40c:	4611      	mov	r1, r2
 801e40e:	f7ff bef5 	b.w	801e1fc <_malloc_r>
 801e412:	b92a      	cbnz	r2, 801e420 <_realloc_r+0x24>
 801e414:	f000 fba4 	bl	801eb60 <_free_r>
 801e418:	4625      	mov	r5, r4
 801e41a:	4628      	mov	r0, r5
 801e41c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e420:	f000 fbea 	bl	801ebf8 <_malloc_usable_size_r>
 801e424:	4284      	cmp	r4, r0
 801e426:	4607      	mov	r7, r0
 801e428:	d802      	bhi.n	801e430 <_realloc_r+0x34>
 801e42a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801e42e:	d812      	bhi.n	801e456 <_realloc_r+0x5a>
 801e430:	4621      	mov	r1, r4
 801e432:	4640      	mov	r0, r8
 801e434:	f7ff fee2 	bl	801e1fc <_malloc_r>
 801e438:	4605      	mov	r5, r0
 801e43a:	2800      	cmp	r0, #0
 801e43c:	d0ed      	beq.n	801e41a <_realloc_r+0x1e>
 801e43e:	42bc      	cmp	r4, r7
 801e440:	4622      	mov	r2, r4
 801e442:	4631      	mov	r1, r6
 801e444:	bf28      	it	cs
 801e446:	463a      	movcs	r2, r7
 801e448:	f000 fb51 	bl	801eaee <memcpy>
 801e44c:	4631      	mov	r1, r6
 801e44e:	4640      	mov	r0, r8
 801e450:	f000 fb86 	bl	801eb60 <_free_r>
 801e454:	e7e1      	b.n	801e41a <_realloc_r+0x1e>
 801e456:	4635      	mov	r5, r6
 801e458:	e7df      	b.n	801e41a <_realloc_r+0x1e>
	...

0801e45c <_strtoul_l.constprop.0>:
 801e45c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e460:	4f36      	ldr	r7, [pc, #216]	; (801e53c <_strtoul_l.constprop.0+0xe0>)
 801e462:	4686      	mov	lr, r0
 801e464:	460d      	mov	r5, r1
 801e466:	4628      	mov	r0, r5
 801e468:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e46c:	5d3e      	ldrb	r6, [r7, r4]
 801e46e:	f016 0608 	ands.w	r6, r6, #8
 801e472:	d1f8      	bne.n	801e466 <_strtoul_l.constprop.0+0xa>
 801e474:	2c2d      	cmp	r4, #45	; 0x2d
 801e476:	d130      	bne.n	801e4da <_strtoul_l.constprop.0+0x7e>
 801e478:	782c      	ldrb	r4, [r5, #0]
 801e47a:	2601      	movs	r6, #1
 801e47c:	1c85      	adds	r5, r0, #2
 801e47e:	2b00      	cmp	r3, #0
 801e480:	d057      	beq.n	801e532 <_strtoul_l.constprop.0+0xd6>
 801e482:	2b10      	cmp	r3, #16
 801e484:	d109      	bne.n	801e49a <_strtoul_l.constprop.0+0x3e>
 801e486:	2c30      	cmp	r4, #48	; 0x30
 801e488:	d107      	bne.n	801e49a <_strtoul_l.constprop.0+0x3e>
 801e48a:	7828      	ldrb	r0, [r5, #0]
 801e48c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801e490:	2858      	cmp	r0, #88	; 0x58
 801e492:	d149      	bne.n	801e528 <_strtoul_l.constprop.0+0xcc>
 801e494:	786c      	ldrb	r4, [r5, #1]
 801e496:	2310      	movs	r3, #16
 801e498:	3502      	adds	r5, #2
 801e49a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801e49e:	2700      	movs	r7, #0
 801e4a0:	fbb8 f8f3 	udiv	r8, r8, r3
 801e4a4:	fb03 f908 	mul.w	r9, r3, r8
 801e4a8:	ea6f 0909 	mvn.w	r9, r9
 801e4ac:	4638      	mov	r0, r7
 801e4ae:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801e4b2:	f1bc 0f09 	cmp.w	ip, #9
 801e4b6:	d815      	bhi.n	801e4e4 <_strtoul_l.constprop.0+0x88>
 801e4b8:	4664      	mov	r4, ip
 801e4ba:	42a3      	cmp	r3, r4
 801e4bc:	dd23      	ble.n	801e506 <_strtoul_l.constprop.0+0xaa>
 801e4be:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 801e4c2:	d007      	beq.n	801e4d4 <_strtoul_l.constprop.0+0x78>
 801e4c4:	4580      	cmp	r8, r0
 801e4c6:	d31b      	bcc.n	801e500 <_strtoul_l.constprop.0+0xa4>
 801e4c8:	d101      	bne.n	801e4ce <_strtoul_l.constprop.0+0x72>
 801e4ca:	45a1      	cmp	r9, r4
 801e4cc:	db18      	blt.n	801e500 <_strtoul_l.constprop.0+0xa4>
 801e4ce:	fb00 4003 	mla	r0, r0, r3, r4
 801e4d2:	2701      	movs	r7, #1
 801e4d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e4d8:	e7e9      	b.n	801e4ae <_strtoul_l.constprop.0+0x52>
 801e4da:	2c2b      	cmp	r4, #43	; 0x2b
 801e4dc:	bf04      	itt	eq
 801e4de:	782c      	ldrbeq	r4, [r5, #0]
 801e4e0:	1c85      	addeq	r5, r0, #2
 801e4e2:	e7cc      	b.n	801e47e <_strtoul_l.constprop.0+0x22>
 801e4e4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801e4e8:	f1bc 0f19 	cmp.w	ip, #25
 801e4ec:	d801      	bhi.n	801e4f2 <_strtoul_l.constprop.0+0x96>
 801e4ee:	3c37      	subs	r4, #55	; 0x37
 801e4f0:	e7e3      	b.n	801e4ba <_strtoul_l.constprop.0+0x5e>
 801e4f2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801e4f6:	f1bc 0f19 	cmp.w	ip, #25
 801e4fa:	d804      	bhi.n	801e506 <_strtoul_l.constprop.0+0xaa>
 801e4fc:	3c57      	subs	r4, #87	; 0x57
 801e4fe:	e7dc      	b.n	801e4ba <_strtoul_l.constprop.0+0x5e>
 801e500:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801e504:	e7e6      	b.n	801e4d4 <_strtoul_l.constprop.0+0x78>
 801e506:	1c7b      	adds	r3, r7, #1
 801e508:	d106      	bne.n	801e518 <_strtoul_l.constprop.0+0xbc>
 801e50a:	2322      	movs	r3, #34	; 0x22
 801e50c:	f8ce 3000 	str.w	r3, [lr]
 801e510:	4638      	mov	r0, r7
 801e512:	b932      	cbnz	r2, 801e522 <_strtoul_l.constprop.0+0xc6>
 801e514:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e518:	b106      	cbz	r6, 801e51c <_strtoul_l.constprop.0+0xc0>
 801e51a:	4240      	negs	r0, r0
 801e51c:	2a00      	cmp	r2, #0
 801e51e:	d0f9      	beq.n	801e514 <_strtoul_l.constprop.0+0xb8>
 801e520:	b107      	cbz	r7, 801e524 <_strtoul_l.constprop.0+0xc8>
 801e522:	1e69      	subs	r1, r5, #1
 801e524:	6011      	str	r1, [r2, #0]
 801e526:	e7f5      	b.n	801e514 <_strtoul_l.constprop.0+0xb8>
 801e528:	2430      	movs	r4, #48	; 0x30
 801e52a:	2b00      	cmp	r3, #0
 801e52c:	d1b5      	bne.n	801e49a <_strtoul_l.constprop.0+0x3e>
 801e52e:	2308      	movs	r3, #8
 801e530:	e7b3      	b.n	801e49a <_strtoul_l.constprop.0+0x3e>
 801e532:	2c30      	cmp	r4, #48	; 0x30
 801e534:	d0a9      	beq.n	801e48a <_strtoul_l.constprop.0+0x2e>
 801e536:	230a      	movs	r3, #10
 801e538:	e7af      	b.n	801e49a <_strtoul_l.constprop.0+0x3e>
 801e53a:	bf00      	nop
 801e53c:	08021bf8 	.word	0x08021bf8

0801e540 <strtoul>:
 801e540:	4613      	mov	r3, r2
 801e542:	460a      	mov	r2, r1
 801e544:	4601      	mov	r1, r0
 801e546:	4802      	ldr	r0, [pc, #8]	; (801e550 <strtoul+0x10>)
 801e548:	6800      	ldr	r0, [r0, #0]
 801e54a:	f7ff bf87 	b.w	801e45c <_strtoul_l.constprop.0>
 801e54e:	bf00      	nop
 801e550:	20002338 	.word	0x20002338

0801e554 <std>:
 801e554:	2300      	movs	r3, #0
 801e556:	b510      	push	{r4, lr}
 801e558:	4604      	mov	r4, r0
 801e55a:	e9c0 3300 	strd	r3, r3, [r0]
 801e55e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e562:	6083      	str	r3, [r0, #8]
 801e564:	8181      	strh	r1, [r0, #12]
 801e566:	6643      	str	r3, [r0, #100]	; 0x64
 801e568:	81c2      	strh	r2, [r0, #14]
 801e56a:	6183      	str	r3, [r0, #24]
 801e56c:	4619      	mov	r1, r3
 801e56e:	2208      	movs	r2, #8
 801e570:	305c      	adds	r0, #92	; 0x5c
 801e572:	f000 f98b 	bl	801e88c <memset>
 801e576:	4b0d      	ldr	r3, [pc, #52]	; (801e5ac <std+0x58>)
 801e578:	6263      	str	r3, [r4, #36]	; 0x24
 801e57a:	4b0d      	ldr	r3, [pc, #52]	; (801e5b0 <std+0x5c>)
 801e57c:	62a3      	str	r3, [r4, #40]	; 0x28
 801e57e:	4b0d      	ldr	r3, [pc, #52]	; (801e5b4 <std+0x60>)
 801e580:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e582:	4b0d      	ldr	r3, [pc, #52]	; (801e5b8 <std+0x64>)
 801e584:	6323      	str	r3, [r4, #48]	; 0x30
 801e586:	4b0d      	ldr	r3, [pc, #52]	; (801e5bc <std+0x68>)
 801e588:	6224      	str	r4, [r4, #32]
 801e58a:	429c      	cmp	r4, r3
 801e58c:	d006      	beq.n	801e59c <std+0x48>
 801e58e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801e592:	4294      	cmp	r4, r2
 801e594:	d002      	beq.n	801e59c <std+0x48>
 801e596:	33d0      	adds	r3, #208	; 0xd0
 801e598:	429c      	cmp	r4, r3
 801e59a:	d105      	bne.n	801e5a8 <std+0x54>
 801e59c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801e5a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e5a4:	f000 ba98 	b.w	801ead8 <__retarget_lock_init_recursive>
 801e5a8:	bd10      	pop	{r4, pc}
 801e5aa:	bf00      	nop
 801e5ac:	0801e741 	.word	0x0801e741
 801e5b0:	0801e763 	.word	0x0801e763
 801e5b4:	0801e79b 	.word	0x0801e79b
 801e5b8:	0801e7bf 	.word	0x0801e7bf
 801e5bc:	20011da0 	.word	0x20011da0

0801e5c0 <stdio_exit_handler>:
 801e5c0:	4a02      	ldr	r2, [pc, #8]	; (801e5cc <stdio_exit_handler+0xc>)
 801e5c2:	4903      	ldr	r1, [pc, #12]	; (801e5d0 <stdio_exit_handler+0x10>)
 801e5c4:	4803      	ldr	r0, [pc, #12]	; (801e5d4 <stdio_exit_handler+0x14>)
 801e5c6:	f000 b869 	b.w	801e69c <_fwalk_sglue>
 801e5ca:	bf00      	nop
 801e5cc:	200022e0 	.word	0x200022e0
 801e5d0:	0801f2e5 	.word	0x0801f2e5
 801e5d4:	200022ec 	.word	0x200022ec

0801e5d8 <cleanup_stdio>:
 801e5d8:	6841      	ldr	r1, [r0, #4]
 801e5da:	4b0c      	ldr	r3, [pc, #48]	; (801e60c <cleanup_stdio+0x34>)
 801e5dc:	4299      	cmp	r1, r3
 801e5de:	b510      	push	{r4, lr}
 801e5e0:	4604      	mov	r4, r0
 801e5e2:	d001      	beq.n	801e5e8 <cleanup_stdio+0x10>
 801e5e4:	f000 fe7e 	bl	801f2e4 <_fflush_r>
 801e5e8:	68a1      	ldr	r1, [r4, #8]
 801e5ea:	4b09      	ldr	r3, [pc, #36]	; (801e610 <cleanup_stdio+0x38>)
 801e5ec:	4299      	cmp	r1, r3
 801e5ee:	d002      	beq.n	801e5f6 <cleanup_stdio+0x1e>
 801e5f0:	4620      	mov	r0, r4
 801e5f2:	f000 fe77 	bl	801f2e4 <_fflush_r>
 801e5f6:	68e1      	ldr	r1, [r4, #12]
 801e5f8:	4b06      	ldr	r3, [pc, #24]	; (801e614 <cleanup_stdio+0x3c>)
 801e5fa:	4299      	cmp	r1, r3
 801e5fc:	d004      	beq.n	801e608 <cleanup_stdio+0x30>
 801e5fe:	4620      	mov	r0, r4
 801e600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e604:	f000 be6e 	b.w	801f2e4 <_fflush_r>
 801e608:	bd10      	pop	{r4, pc}
 801e60a:	bf00      	nop
 801e60c:	20011da0 	.word	0x20011da0
 801e610:	20011e08 	.word	0x20011e08
 801e614:	20011e70 	.word	0x20011e70

0801e618 <global_stdio_init.part.0>:
 801e618:	b510      	push	{r4, lr}
 801e61a:	4b0b      	ldr	r3, [pc, #44]	; (801e648 <global_stdio_init.part.0+0x30>)
 801e61c:	4c0b      	ldr	r4, [pc, #44]	; (801e64c <global_stdio_init.part.0+0x34>)
 801e61e:	4a0c      	ldr	r2, [pc, #48]	; (801e650 <global_stdio_init.part.0+0x38>)
 801e620:	601a      	str	r2, [r3, #0]
 801e622:	4620      	mov	r0, r4
 801e624:	2200      	movs	r2, #0
 801e626:	2104      	movs	r1, #4
 801e628:	f7ff ff94 	bl	801e554 <std>
 801e62c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801e630:	2201      	movs	r2, #1
 801e632:	2109      	movs	r1, #9
 801e634:	f7ff ff8e 	bl	801e554 <std>
 801e638:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801e63c:	2202      	movs	r2, #2
 801e63e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e642:	2112      	movs	r1, #18
 801e644:	f7ff bf86 	b.w	801e554 <std>
 801e648:	20011ed8 	.word	0x20011ed8
 801e64c:	20011da0 	.word	0x20011da0
 801e650:	0801e5c1 	.word	0x0801e5c1

0801e654 <__sfp_lock_acquire>:
 801e654:	4801      	ldr	r0, [pc, #4]	; (801e65c <__sfp_lock_acquire+0x8>)
 801e656:	f000 ba40 	b.w	801eada <__retarget_lock_acquire_recursive>
 801e65a:	bf00      	nop
 801e65c:	20011ee2 	.word	0x20011ee2

0801e660 <__sfp_lock_release>:
 801e660:	4801      	ldr	r0, [pc, #4]	; (801e668 <__sfp_lock_release+0x8>)
 801e662:	f000 ba3b 	b.w	801eadc <__retarget_lock_release_recursive>
 801e666:	bf00      	nop
 801e668:	20011ee2 	.word	0x20011ee2

0801e66c <__sinit>:
 801e66c:	b510      	push	{r4, lr}
 801e66e:	4604      	mov	r4, r0
 801e670:	f7ff fff0 	bl	801e654 <__sfp_lock_acquire>
 801e674:	6a23      	ldr	r3, [r4, #32]
 801e676:	b11b      	cbz	r3, 801e680 <__sinit+0x14>
 801e678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e67c:	f7ff bff0 	b.w	801e660 <__sfp_lock_release>
 801e680:	4b04      	ldr	r3, [pc, #16]	; (801e694 <__sinit+0x28>)
 801e682:	6223      	str	r3, [r4, #32]
 801e684:	4b04      	ldr	r3, [pc, #16]	; (801e698 <__sinit+0x2c>)
 801e686:	681b      	ldr	r3, [r3, #0]
 801e688:	2b00      	cmp	r3, #0
 801e68a:	d1f5      	bne.n	801e678 <__sinit+0xc>
 801e68c:	f7ff ffc4 	bl	801e618 <global_stdio_init.part.0>
 801e690:	e7f2      	b.n	801e678 <__sinit+0xc>
 801e692:	bf00      	nop
 801e694:	0801e5d9 	.word	0x0801e5d9
 801e698:	20011ed8 	.word	0x20011ed8

0801e69c <_fwalk_sglue>:
 801e69c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e6a0:	4607      	mov	r7, r0
 801e6a2:	4688      	mov	r8, r1
 801e6a4:	4614      	mov	r4, r2
 801e6a6:	2600      	movs	r6, #0
 801e6a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e6ac:	f1b9 0901 	subs.w	r9, r9, #1
 801e6b0:	d505      	bpl.n	801e6be <_fwalk_sglue+0x22>
 801e6b2:	6824      	ldr	r4, [r4, #0]
 801e6b4:	2c00      	cmp	r4, #0
 801e6b6:	d1f7      	bne.n	801e6a8 <_fwalk_sglue+0xc>
 801e6b8:	4630      	mov	r0, r6
 801e6ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e6be:	89ab      	ldrh	r3, [r5, #12]
 801e6c0:	2b01      	cmp	r3, #1
 801e6c2:	d907      	bls.n	801e6d4 <_fwalk_sglue+0x38>
 801e6c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e6c8:	3301      	adds	r3, #1
 801e6ca:	d003      	beq.n	801e6d4 <_fwalk_sglue+0x38>
 801e6cc:	4629      	mov	r1, r5
 801e6ce:	4638      	mov	r0, r7
 801e6d0:	47c0      	blx	r8
 801e6d2:	4306      	orrs	r6, r0
 801e6d4:	3568      	adds	r5, #104	; 0x68
 801e6d6:	e7e9      	b.n	801e6ac <_fwalk_sglue+0x10>

0801e6d8 <sniprintf>:
 801e6d8:	b40c      	push	{r2, r3}
 801e6da:	b530      	push	{r4, r5, lr}
 801e6dc:	4b17      	ldr	r3, [pc, #92]	; (801e73c <sniprintf+0x64>)
 801e6de:	1e0c      	subs	r4, r1, #0
 801e6e0:	681d      	ldr	r5, [r3, #0]
 801e6e2:	b09d      	sub	sp, #116	; 0x74
 801e6e4:	da08      	bge.n	801e6f8 <sniprintf+0x20>
 801e6e6:	238b      	movs	r3, #139	; 0x8b
 801e6e8:	602b      	str	r3, [r5, #0]
 801e6ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e6ee:	b01d      	add	sp, #116	; 0x74
 801e6f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e6f4:	b002      	add	sp, #8
 801e6f6:	4770      	bx	lr
 801e6f8:	f44f 7302 	mov.w	r3, #520	; 0x208
 801e6fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 801e700:	bf14      	ite	ne
 801e702:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801e706:	4623      	moveq	r3, r4
 801e708:	9304      	str	r3, [sp, #16]
 801e70a:	9307      	str	r3, [sp, #28]
 801e70c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e710:	9002      	str	r0, [sp, #8]
 801e712:	9006      	str	r0, [sp, #24]
 801e714:	f8ad 3016 	strh.w	r3, [sp, #22]
 801e718:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801e71a:	ab21      	add	r3, sp, #132	; 0x84
 801e71c:	a902      	add	r1, sp, #8
 801e71e:	4628      	mov	r0, r5
 801e720:	9301      	str	r3, [sp, #4]
 801e722:	f000 facb 	bl	801ecbc <_svfiprintf_r>
 801e726:	1c43      	adds	r3, r0, #1
 801e728:	bfbc      	itt	lt
 801e72a:	238b      	movlt	r3, #139	; 0x8b
 801e72c:	602b      	strlt	r3, [r5, #0]
 801e72e:	2c00      	cmp	r4, #0
 801e730:	d0dd      	beq.n	801e6ee <sniprintf+0x16>
 801e732:	9b02      	ldr	r3, [sp, #8]
 801e734:	2200      	movs	r2, #0
 801e736:	701a      	strb	r2, [r3, #0]
 801e738:	e7d9      	b.n	801e6ee <sniprintf+0x16>
 801e73a:	bf00      	nop
 801e73c:	20002338 	.word	0x20002338

0801e740 <__sread>:
 801e740:	b510      	push	{r4, lr}
 801e742:	460c      	mov	r4, r1
 801e744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e748:	f000 f968 	bl	801ea1c <_read_r>
 801e74c:	2800      	cmp	r0, #0
 801e74e:	bfab      	itete	ge
 801e750:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801e752:	89a3      	ldrhlt	r3, [r4, #12]
 801e754:	181b      	addge	r3, r3, r0
 801e756:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801e75a:	bfac      	ite	ge
 801e75c:	6563      	strge	r3, [r4, #84]	; 0x54
 801e75e:	81a3      	strhlt	r3, [r4, #12]
 801e760:	bd10      	pop	{r4, pc}

0801e762 <__swrite>:
 801e762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e766:	461f      	mov	r7, r3
 801e768:	898b      	ldrh	r3, [r1, #12]
 801e76a:	05db      	lsls	r3, r3, #23
 801e76c:	4605      	mov	r5, r0
 801e76e:	460c      	mov	r4, r1
 801e770:	4616      	mov	r6, r2
 801e772:	d505      	bpl.n	801e780 <__swrite+0x1e>
 801e774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e778:	2302      	movs	r3, #2
 801e77a:	2200      	movs	r2, #0
 801e77c:	f000 f93c 	bl	801e9f8 <_lseek_r>
 801e780:	89a3      	ldrh	r3, [r4, #12]
 801e782:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e786:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e78a:	81a3      	strh	r3, [r4, #12]
 801e78c:	4632      	mov	r2, r6
 801e78e:	463b      	mov	r3, r7
 801e790:	4628      	mov	r0, r5
 801e792:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e796:	f000 b963 	b.w	801ea60 <_write_r>

0801e79a <__sseek>:
 801e79a:	b510      	push	{r4, lr}
 801e79c:	460c      	mov	r4, r1
 801e79e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e7a2:	f000 f929 	bl	801e9f8 <_lseek_r>
 801e7a6:	1c43      	adds	r3, r0, #1
 801e7a8:	89a3      	ldrh	r3, [r4, #12]
 801e7aa:	bf15      	itete	ne
 801e7ac:	6560      	strne	r0, [r4, #84]	; 0x54
 801e7ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801e7b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801e7b6:	81a3      	strheq	r3, [r4, #12]
 801e7b8:	bf18      	it	ne
 801e7ba:	81a3      	strhne	r3, [r4, #12]
 801e7bc:	bd10      	pop	{r4, pc}

0801e7be <__sclose>:
 801e7be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e7c2:	f000 b8b3 	b.w	801e92c <_close_r>

0801e7c6 <_vsniprintf_r>:
 801e7c6:	b530      	push	{r4, r5, lr}
 801e7c8:	4614      	mov	r4, r2
 801e7ca:	2c00      	cmp	r4, #0
 801e7cc:	b09b      	sub	sp, #108	; 0x6c
 801e7ce:	4605      	mov	r5, r0
 801e7d0:	461a      	mov	r2, r3
 801e7d2:	da05      	bge.n	801e7e0 <_vsniprintf_r+0x1a>
 801e7d4:	238b      	movs	r3, #139	; 0x8b
 801e7d6:	6003      	str	r3, [r0, #0]
 801e7d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e7dc:	b01b      	add	sp, #108	; 0x6c
 801e7de:	bd30      	pop	{r4, r5, pc}
 801e7e0:	f44f 7302 	mov.w	r3, #520	; 0x208
 801e7e4:	f8ad 300c 	strh.w	r3, [sp, #12]
 801e7e8:	bf14      	ite	ne
 801e7ea:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801e7ee:	4623      	moveq	r3, r4
 801e7f0:	9302      	str	r3, [sp, #8]
 801e7f2:	9305      	str	r3, [sp, #20]
 801e7f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e7f8:	9100      	str	r1, [sp, #0]
 801e7fa:	9104      	str	r1, [sp, #16]
 801e7fc:	f8ad 300e 	strh.w	r3, [sp, #14]
 801e800:	4669      	mov	r1, sp
 801e802:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e804:	f000 fa5a 	bl	801ecbc <_svfiprintf_r>
 801e808:	1c43      	adds	r3, r0, #1
 801e80a:	bfbc      	itt	lt
 801e80c:	238b      	movlt	r3, #139	; 0x8b
 801e80e:	602b      	strlt	r3, [r5, #0]
 801e810:	2c00      	cmp	r4, #0
 801e812:	d0e3      	beq.n	801e7dc <_vsniprintf_r+0x16>
 801e814:	9b00      	ldr	r3, [sp, #0]
 801e816:	2200      	movs	r2, #0
 801e818:	701a      	strb	r2, [r3, #0]
 801e81a:	e7df      	b.n	801e7dc <_vsniprintf_r+0x16>

0801e81c <vsniprintf>:
 801e81c:	b507      	push	{r0, r1, r2, lr}
 801e81e:	9300      	str	r3, [sp, #0]
 801e820:	4613      	mov	r3, r2
 801e822:	460a      	mov	r2, r1
 801e824:	4601      	mov	r1, r0
 801e826:	4803      	ldr	r0, [pc, #12]	; (801e834 <vsniprintf+0x18>)
 801e828:	6800      	ldr	r0, [r0, #0]
 801e82a:	f7ff ffcc 	bl	801e7c6 <_vsniprintf_r>
 801e82e:	b003      	add	sp, #12
 801e830:	f85d fb04 	ldr.w	pc, [sp], #4
 801e834:	20002338 	.word	0x20002338

0801e838 <memcmp>:
 801e838:	b510      	push	{r4, lr}
 801e83a:	3901      	subs	r1, #1
 801e83c:	4402      	add	r2, r0
 801e83e:	4290      	cmp	r0, r2
 801e840:	d101      	bne.n	801e846 <memcmp+0xe>
 801e842:	2000      	movs	r0, #0
 801e844:	e005      	b.n	801e852 <memcmp+0x1a>
 801e846:	7803      	ldrb	r3, [r0, #0]
 801e848:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e84c:	42a3      	cmp	r3, r4
 801e84e:	d001      	beq.n	801e854 <memcmp+0x1c>
 801e850:	1b18      	subs	r0, r3, r4
 801e852:	bd10      	pop	{r4, pc}
 801e854:	3001      	adds	r0, #1
 801e856:	e7f2      	b.n	801e83e <memcmp+0x6>

0801e858 <memmove>:
 801e858:	4288      	cmp	r0, r1
 801e85a:	b510      	push	{r4, lr}
 801e85c:	eb01 0402 	add.w	r4, r1, r2
 801e860:	d902      	bls.n	801e868 <memmove+0x10>
 801e862:	4284      	cmp	r4, r0
 801e864:	4623      	mov	r3, r4
 801e866:	d807      	bhi.n	801e878 <memmove+0x20>
 801e868:	1e43      	subs	r3, r0, #1
 801e86a:	42a1      	cmp	r1, r4
 801e86c:	d008      	beq.n	801e880 <memmove+0x28>
 801e86e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e872:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e876:	e7f8      	b.n	801e86a <memmove+0x12>
 801e878:	4402      	add	r2, r0
 801e87a:	4601      	mov	r1, r0
 801e87c:	428a      	cmp	r2, r1
 801e87e:	d100      	bne.n	801e882 <memmove+0x2a>
 801e880:	bd10      	pop	{r4, pc}
 801e882:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e886:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e88a:	e7f7      	b.n	801e87c <memmove+0x24>

0801e88c <memset>:
 801e88c:	4402      	add	r2, r0
 801e88e:	4603      	mov	r3, r0
 801e890:	4293      	cmp	r3, r2
 801e892:	d100      	bne.n	801e896 <memset+0xa>
 801e894:	4770      	bx	lr
 801e896:	f803 1b01 	strb.w	r1, [r3], #1
 801e89a:	e7f9      	b.n	801e890 <memset+0x4>

0801e89c <strchr>:
 801e89c:	b2c9      	uxtb	r1, r1
 801e89e:	4603      	mov	r3, r0
 801e8a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e8a4:	b11a      	cbz	r2, 801e8ae <strchr+0x12>
 801e8a6:	428a      	cmp	r2, r1
 801e8a8:	d1f9      	bne.n	801e89e <strchr+0x2>
 801e8aa:	4618      	mov	r0, r3
 801e8ac:	4770      	bx	lr
 801e8ae:	2900      	cmp	r1, #0
 801e8b0:	bf18      	it	ne
 801e8b2:	2300      	movne	r3, #0
 801e8b4:	e7f9      	b.n	801e8aa <strchr+0xe>

0801e8b6 <strncmp>:
 801e8b6:	b510      	push	{r4, lr}
 801e8b8:	b16a      	cbz	r2, 801e8d6 <strncmp+0x20>
 801e8ba:	3901      	subs	r1, #1
 801e8bc:	1884      	adds	r4, r0, r2
 801e8be:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e8c2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801e8c6:	429a      	cmp	r2, r3
 801e8c8:	d103      	bne.n	801e8d2 <strncmp+0x1c>
 801e8ca:	42a0      	cmp	r0, r4
 801e8cc:	d001      	beq.n	801e8d2 <strncmp+0x1c>
 801e8ce:	2a00      	cmp	r2, #0
 801e8d0:	d1f5      	bne.n	801e8be <strncmp+0x8>
 801e8d2:	1ad0      	subs	r0, r2, r3
 801e8d4:	bd10      	pop	{r4, pc}
 801e8d6:	4610      	mov	r0, r2
 801e8d8:	e7fc      	b.n	801e8d4 <strncmp+0x1e>

0801e8da <strncpy>:
 801e8da:	b510      	push	{r4, lr}
 801e8dc:	3901      	subs	r1, #1
 801e8de:	4603      	mov	r3, r0
 801e8e0:	b132      	cbz	r2, 801e8f0 <strncpy+0x16>
 801e8e2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e8e6:	f803 4b01 	strb.w	r4, [r3], #1
 801e8ea:	3a01      	subs	r2, #1
 801e8ec:	2c00      	cmp	r4, #0
 801e8ee:	d1f7      	bne.n	801e8e0 <strncpy+0x6>
 801e8f0:	441a      	add	r2, r3
 801e8f2:	2100      	movs	r1, #0
 801e8f4:	4293      	cmp	r3, r2
 801e8f6:	d100      	bne.n	801e8fa <strncpy+0x20>
 801e8f8:	bd10      	pop	{r4, pc}
 801e8fa:	f803 1b01 	strb.w	r1, [r3], #1
 801e8fe:	e7f9      	b.n	801e8f4 <strncpy+0x1a>

0801e900 <strstr>:
 801e900:	780a      	ldrb	r2, [r1, #0]
 801e902:	b570      	push	{r4, r5, r6, lr}
 801e904:	b96a      	cbnz	r2, 801e922 <strstr+0x22>
 801e906:	bd70      	pop	{r4, r5, r6, pc}
 801e908:	429a      	cmp	r2, r3
 801e90a:	d109      	bne.n	801e920 <strstr+0x20>
 801e90c:	460c      	mov	r4, r1
 801e90e:	4605      	mov	r5, r0
 801e910:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801e914:	2b00      	cmp	r3, #0
 801e916:	d0f6      	beq.n	801e906 <strstr+0x6>
 801e918:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801e91c:	429e      	cmp	r6, r3
 801e91e:	d0f7      	beq.n	801e910 <strstr+0x10>
 801e920:	3001      	adds	r0, #1
 801e922:	7803      	ldrb	r3, [r0, #0]
 801e924:	2b00      	cmp	r3, #0
 801e926:	d1ef      	bne.n	801e908 <strstr+0x8>
 801e928:	4618      	mov	r0, r3
 801e92a:	e7ec      	b.n	801e906 <strstr+0x6>

0801e92c <_close_r>:
 801e92c:	b538      	push	{r3, r4, r5, lr}
 801e92e:	4d06      	ldr	r5, [pc, #24]	; (801e948 <_close_r+0x1c>)
 801e930:	2300      	movs	r3, #0
 801e932:	4604      	mov	r4, r0
 801e934:	4608      	mov	r0, r1
 801e936:	602b      	str	r3, [r5, #0]
 801e938:	f7e4 ff89 	bl	800384e <_close>
 801e93c:	1c43      	adds	r3, r0, #1
 801e93e:	d102      	bne.n	801e946 <_close_r+0x1a>
 801e940:	682b      	ldr	r3, [r5, #0]
 801e942:	b103      	cbz	r3, 801e946 <_close_r+0x1a>
 801e944:	6023      	str	r3, [r4, #0]
 801e946:	bd38      	pop	{r3, r4, r5, pc}
 801e948:	20011edc 	.word	0x20011edc

0801e94c <_reclaim_reent>:
 801e94c:	4b29      	ldr	r3, [pc, #164]	; (801e9f4 <_reclaim_reent+0xa8>)
 801e94e:	681b      	ldr	r3, [r3, #0]
 801e950:	4283      	cmp	r3, r0
 801e952:	b570      	push	{r4, r5, r6, lr}
 801e954:	4604      	mov	r4, r0
 801e956:	d04b      	beq.n	801e9f0 <_reclaim_reent+0xa4>
 801e958:	69c3      	ldr	r3, [r0, #28]
 801e95a:	b143      	cbz	r3, 801e96e <_reclaim_reent+0x22>
 801e95c:	68db      	ldr	r3, [r3, #12]
 801e95e:	2b00      	cmp	r3, #0
 801e960:	d144      	bne.n	801e9ec <_reclaim_reent+0xa0>
 801e962:	69e3      	ldr	r3, [r4, #28]
 801e964:	6819      	ldr	r1, [r3, #0]
 801e966:	b111      	cbz	r1, 801e96e <_reclaim_reent+0x22>
 801e968:	4620      	mov	r0, r4
 801e96a:	f000 f8f9 	bl	801eb60 <_free_r>
 801e96e:	6961      	ldr	r1, [r4, #20]
 801e970:	b111      	cbz	r1, 801e978 <_reclaim_reent+0x2c>
 801e972:	4620      	mov	r0, r4
 801e974:	f000 f8f4 	bl	801eb60 <_free_r>
 801e978:	69e1      	ldr	r1, [r4, #28]
 801e97a:	b111      	cbz	r1, 801e982 <_reclaim_reent+0x36>
 801e97c:	4620      	mov	r0, r4
 801e97e:	f000 f8ef 	bl	801eb60 <_free_r>
 801e982:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801e984:	b111      	cbz	r1, 801e98c <_reclaim_reent+0x40>
 801e986:	4620      	mov	r0, r4
 801e988:	f000 f8ea 	bl	801eb60 <_free_r>
 801e98c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e98e:	b111      	cbz	r1, 801e996 <_reclaim_reent+0x4a>
 801e990:	4620      	mov	r0, r4
 801e992:	f000 f8e5 	bl	801eb60 <_free_r>
 801e996:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801e998:	b111      	cbz	r1, 801e9a0 <_reclaim_reent+0x54>
 801e99a:	4620      	mov	r0, r4
 801e99c:	f000 f8e0 	bl	801eb60 <_free_r>
 801e9a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801e9a2:	b111      	cbz	r1, 801e9aa <_reclaim_reent+0x5e>
 801e9a4:	4620      	mov	r0, r4
 801e9a6:	f000 f8db 	bl	801eb60 <_free_r>
 801e9aa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801e9ac:	b111      	cbz	r1, 801e9b4 <_reclaim_reent+0x68>
 801e9ae:	4620      	mov	r0, r4
 801e9b0:	f000 f8d6 	bl	801eb60 <_free_r>
 801e9b4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801e9b6:	b111      	cbz	r1, 801e9be <_reclaim_reent+0x72>
 801e9b8:	4620      	mov	r0, r4
 801e9ba:	f000 f8d1 	bl	801eb60 <_free_r>
 801e9be:	6a23      	ldr	r3, [r4, #32]
 801e9c0:	b1b3      	cbz	r3, 801e9f0 <_reclaim_reent+0xa4>
 801e9c2:	4620      	mov	r0, r4
 801e9c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e9c8:	4718      	bx	r3
 801e9ca:	5949      	ldr	r1, [r1, r5]
 801e9cc:	b941      	cbnz	r1, 801e9e0 <_reclaim_reent+0x94>
 801e9ce:	3504      	adds	r5, #4
 801e9d0:	69e3      	ldr	r3, [r4, #28]
 801e9d2:	2d80      	cmp	r5, #128	; 0x80
 801e9d4:	68d9      	ldr	r1, [r3, #12]
 801e9d6:	d1f8      	bne.n	801e9ca <_reclaim_reent+0x7e>
 801e9d8:	4620      	mov	r0, r4
 801e9da:	f000 f8c1 	bl	801eb60 <_free_r>
 801e9de:	e7c0      	b.n	801e962 <_reclaim_reent+0x16>
 801e9e0:	680e      	ldr	r6, [r1, #0]
 801e9e2:	4620      	mov	r0, r4
 801e9e4:	f000 f8bc 	bl	801eb60 <_free_r>
 801e9e8:	4631      	mov	r1, r6
 801e9ea:	e7ef      	b.n	801e9cc <_reclaim_reent+0x80>
 801e9ec:	2500      	movs	r5, #0
 801e9ee:	e7ef      	b.n	801e9d0 <_reclaim_reent+0x84>
 801e9f0:	bd70      	pop	{r4, r5, r6, pc}
 801e9f2:	bf00      	nop
 801e9f4:	20002338 	.word	0x20002338

0801e9f8 <_lseek_r>:
 801e9f8:	b538      	push	{r3, r4, r5, lr}
 801e9fa:	4d07      	ldr	r5, [pc, #28]	; (801ea18 <_lseek_r+0x20>)
 801e9fc:	4604      	mov	r4, r0
 801e9fe:	4608      	mov	r0, r1
 801ea00:	4611      	mov	r1, r2
 801ea02:	2200      	movs	r2, #0
 801ea04:	602a      	str	r2, [r5, #0]
 801ea06:	461a      	mov	r2, r3
 801ea08:	f7e4 ff48 	bl	800389c <_lseek>
 801ea0c:	1c43      	adds	r3, r0, #1
 801ea0e:	d102      	bne.n	801ea16 <_lseek_r+0x1e>
 801ea10:	682b      	ldr	r3, [r5, #0]
 801ea12:	b103      	cbz	r3, 801ea16 <_lseek_r+0x1e>
 801ea14:	6023      	str	r3, [r4, #0]
 801ea16:	bd38      	pop	{r3, r4, r5, pc}
 801ea18:	20011edc 	.word	0x20011edc

0801ea1c <_read_r>:
 801ea1c:	b538      	push	{r3, r4, r5, lr}
 801ea1e:	4d07      	ldr	r5, [pc, #28]	; (801ea3c <_read_r+0x20>)
 801ea20:	4604      	mov	r4, r0
 801ea22:	4608      	mov	r0, r1
 801ea24:	4611      	mov	r1, r2
 801ea26:	2200      	movs	r2, #0
 801ea28:	602a      	str	r2, [r5, #0]
 801ea2a:	461a      	mov	r2, r3
 801ea2c:	f7e4 fed6 	bl	80037dc <_read>
 801ea30:	1c43      	adds	r3, r0, #1
 801ea32:	d102      	bne.n	801ea3a <_read_r+0x1e>
 801ea34:	682b      	ldr	r3, [r5, #0]
 801ea36:	b103      	cbz	r3, 801ea3a <_read_r+0x1e>
 801ea38:	6023      	str	r3, [r4, #0]
 801ea3a:	bd38      	pop	{r3, r4, r5, pc}
 801ea3c:	20011edc 	.word	0x20011edc

0801ea40 <_sbrk_r>:
 801ea40:	b538      	push	{r3, r4, r5, lr}
 801ea42:	4d06      	ldr	r5, [pc, #24]	; (801ea5c <_sbrk_r+0x1c>)
 801ea44:	2300      	movs	r3, #0
 801ea46:	4604      	mov	r4, r0
 801ea48:	4608      	mov	r0, r1
 801ea4a:	602b      	str	r3, [r5, #0]
 801ea4c:	f7e4 ff34 	bl	80038b8 <_sbrk>
 801ea50:	1c43      	adds	r3, r0, #1
 801ea52:	d102      	bne.n	801ea5a <_sbrk_r+0x1a>
 801ea54:	682b      	ldr	r3, [r5, #0]
 801ea56:	b103      	cbz	r3, 801ea5a <_sbrk_r+0x1a>
 801ea58:	6023      	str	r3, [r4, #0]
 801ea5a:	bd38      	pop	{r3, r4, r5, pc}
 801ea5c:	20011edc 	.word	0x20011edc

0801ea60 <_write_r>:
 801ea60:	b538      	push	{r3, r4, r5, lr}
 801ea62:	4d07      	ldr	r5, [pc, #28]	; (801ea80 <_write_r+0x20>)
 801ea64:	4604      	mov	r4, r0
 801ea66:	4608      	mov	r0, r1
 801ea68:	4611      	mov	r1, r2
 801ea6a:	2200      	movs	r2, #0
 801ea6c:	602a      	str	r2, [r5, #0]
 801ea6e:	461a      	mov	r2, r3
 801ea70:	f7e4 fed1 	bl	8003816 <_write>
 801ea74:	1c43      	adds	r3, r0, #1
 801ea76:	d102      	bne.n	801ea7e <_write_r+0x1e>
 801ea78:	682b      	ldr	r3, [r5, #0]
 801ea7a:	b103      	cbz	r3, 801ea7e <_write_r+0x1e>
 801ea7c:	6023      	str	r3, [r4, #0]
 801ea7e:	bd38      	pop	{r3, r4, r5, pc}
 801ea80:	20011edc 	.word	0x20011edc

0801ea84 <__errno>:
 801ea84:	4b01      	ldr	r3, [pc, #4]	; (801ea8c <__errno+0x8>)
 801ea86:	6818      	ldr	r0, [r3, #0]
 801ea88:	4770      	bx	lr
 801ea8a:	bf00      	nop
 801ea8c:	20002338 	.word	0x20002338

0801ea90 <__libc_init_array>:
 801ea90:	b570      	push	{r4, r5, r6, lr}
 801ea92:	4d0d      	ldr	r5, [pc, #52]	; (801eac8 <__libc_init_array+0x38>)
 801ea94:	4c0d      	ldr	r4, [pc, #52]	; (801eacc <__libc_init_array+0x3c>)
 801ea96:	1b64      	subs	r4, r4, r5
 801ea98:	10a4      	asrs	r4, r4, #2
 801ea9a:	2600      	movs	r6, #0
 801ea9c:	42a6      	cmp	r6, r4
 801ea9e:	d109      	bne.n	801eab4 <__libc_init_array+0x24>
 801eaa0:	4d0b      	ldr	r5, [pc, #44]	; (801ead0 <__libc_init_array+0x40>)
 801eaa2:	4c0c      	ldr	r4, [pc, #48]	; (801ead4 <__libc_init_array+0x44>)
 801eaa4:	f000 ff00 	bl	801f8a8 <_init>
 801eaa8:	1b64      	subs	r4, r4, r5
 801eaaa:	10a4      	asrs	r4, r4, #2
 801eaac:	2600      	movs	r6, #0
 801eaae:	42a6      	cmp	r6, r4
 801eab0:	d105      	bne.n	801eabe <__libc_init_array+0x2e>
 801eab2:	bd70      	pop	{r4, r5, r6, pc}
 801eab4:	f855 3b04 	ldr.w	r3, [r5], #4
 801eab8:	4798      	blx	r3
 801eaba:	3601      	adds	r6, #1
 801eabc:	e7ee      	b.n	801ea9c <__libc_init_array+0xc>
 801eabe:	f855 3b04 	ldr.w	r3, [r5], #4
 801eac2:	4798      	blx	r3
 801eac4:	3601      	adds	r6, #1
 801eac6:	e7f2      	b.n	801eaae <__libc_init_array+0x1e>
 801eac8:	08021d70 	.word	0x08021d70
 801eacc:	08021d70 	.word	0x08021d70
 801ead0:	08021d70 	.word	0x08021d70
 801ead4:	08021d90 	.word	0x08021d90

0801ead8 <__retarget_lock_init_recursive>:
 801ead8:	4770      	bx	lr

0801eada <__retarget_lock_acquire_recursive>:
 801eada:	4770      	bx	lr

0801eadc <__retarget_lock_release_recursive>:
 801eadc:	4770      	bx	lr

0801eade <strcpy>:
 801eade:	4603      	mov	r3, r0
 801eae0:	f811 2b01 	ldrb.w	r2, [r1], #1
 801eae4:	f803 2b01 	strb.w	r2, [r3], #1
 801eae8:	2a00      	cmp	r2, #0
 801eaea:	d1f9      	bne.n	801eae0 <strcpy+0x2>
 801eaec:	4770      	bx	lr

0801eaee <memcpy>:
 801eaee:	440a      	add	r2, r1
 801eaf0:	4291      	cmp	r1, r2
 801eaf2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801eaf6:	d100      	bne.n	801eafa <memcpy+0xc>
 801eaf8:	4770      	bx	lr
 801eafa:	b510      	push	{r4, lr}
 801eafc:	f811 4b01 	ldrb.w	r4, [r1], #1
 801eb00:	f803 4f01 	strb.w	r4, [r3, #1]!
 801eb04:	4291      	cmp	r1, r2
 801eb06:	d1f9      	bne.n	801eafc <memcpy+0xe>
 801eb08:	bd10      	pop	{r4, pc}
	...

0801eb0c <__assert_func>:
 801eb0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801eb0e:	4614      	mov	r4, r2
 801eb10:	461a      	mov	r2, r3
 801eb12:	4b09      	ldr	r3, [pc, #36]	; (801eb38 <__assert_func+0x2c>)
 801eb14:	681b      	ldr	r3, [r3, #0]
 801eb16:	4605      	mov	r5, r0
 801eb18:	68d8      	ldr	r0, [r3, #12]
 801eb1a:	b14c      	cbz	r4, 801eb30 <__assert_func+0x24>
 801eb1c:	4b07      	ldr	r3, [pc, #28]	; (801eb3c <__assert_func+0x30>)
 801eb1e:	9100      	str	r1, [sp, #0]
 801eb20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801eb24:	4906      	ldr	r1, [pc, #24]	; (801eb40 <__assert_func+0x34>)
 801eb26:	462b      	mov	r3, r5
 801eb28:	f000 fc04 	bl	801f334 <fiprintf>
 801eb2c:	f000 fc14 	bl	801f358 <abort>
 801eb30:	4b04      	ldr	r3, [pc, #16]	; (801eb44 <__assert_func+0x38>)
 801eb32:	461c      	mov	r4, r3
 801eb34:	e7f3      	b.n	801eb1e <__assert_func+0x12>
 801eb36:	bf00      	nop
 801eb38:	20002338 	.word	0x20002338
 801eb3c:	08021cf8 	.word	0x08021cf8
 801eb40:	08021d05 	.word	0x08021d05
 801eb44:	08021d33 	.word	0x08021d33

0801eb48 <__env_lock>:
 801eb48:	4801      	ldr	r0, [pc, #4]	; (801eb50 <__env_lock+0x8>)
 801eb4a:	f7ff bfc6 	b.w	801eada <__retarget_lock_acquire_recursive>
 801eb4e:	bf00      	nop
 801eb50:	20011ee0 	.word	0x20011ee0

0801eb54 <__env_unlock>:
 801eb54:	4801      	ldr	r0, [pc, #4]	; (801eb5c <__env_unlock+0x8>)
 801eb56:	f7ff bfc1 	b.w	801eadc <__retarget_lock_release_recursive>
 801eb5a:	bf00      	nop
 801eb5c:	20011ee0 	.word	0x20011ee0

0801eb60 <_free_r>:
 801eb60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801eb62:	2900      	cmp	r1, #0
 801eb64:	d044      	beq.n	801ebf0 <_free_r+0x90>
 801eb66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801eb6a:	9001      	str	r0, [sp, #4]
 801eb6c:	2b00      	cmp	r3, #0
 801eb6e:	f1a1 0404 	sub.w	r4, r1, #4
 801eb72:	bfb8      	it	lt
 801eb74:	18e4      	addlt	r4, r4, r3
 801eb76:	f7ff fbc1 	bl	801e2fc <__malloc_lock>
 801eb7a:	4a1e      	ldr	r2, [pc, #120]	; (801ebf4 <_free_r+0x94>)
 801eb7c:	9801      	ldr	r0, [sp, #4]
 801eb7e:	6813      	ldr	r3, [r2, #0]
 801eb80:	b933      	cbnz	r3, 801eb90 <_free_r+0x30>
 801eb82:	6063      	str	r3, [r4, #4]
 801eb84:	6014      	str	r4, [r2, #0]
 801eb86:	b003      	add	sp, #12
 801eb88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801eb8c:	f7ff bbbc 	b.w	801e308 <__malloc_unlock>
 801eb90:	42a3      	cmp	r3, r4
 801eb92:	d908      	bls.n	801eba6 <_free_r+0x46>
 801eb94:	6825      	ldr	r5, [r4, #0]
 801eb96:	1961      	adds	r1, r4, r5
 801eb98:	428b      	cmp	r3, r1
 801eb9a:	bf01      	itttt	eq
 801eb9c:	6819      	ldreq	r1, [r3, #0]
 801eb9e:	685b      	ldreq	r3, [r3, #4]
 801eba0:	1949      	addeq	r1, r1, r5
 801eba2:	6021      	streq	r1, [r4, #0]
 801eba4:	e7ed      	b.n	801eb82 <_free_r+0x22>
 801eba6:	461a      	mov	r2, r3
 801eba8:	685b      	ldr	r3, [r3, #4]
 801ebaa:	b10b      	cbz	r3, 801ebb0 <_free_r+0x50>
 801ebac:	42a3      	cmp	r3, r4
 801ebae:	d9fa      	bls.n	801eba6 <_free_r+0x46>
 801ebb0:	6811      	ldr	r1, [r2, #0]
 801ebb2:	1855      	adds	r5, r2, r1
 801ebb4:	42a5      	cmp	r5, r4
 801ebb6:	d10b      	bne.n	801ebd0 <_free_r+0x70>
 801ebb8:	6824      	ldr	r4, [r4, #0]
 801ebba:	4421      	add	r1, r4
 801ebbc:	1854      	adds	r4, r2, r1
 801ebbe:	42a3      	cmp	r3, r4
 801ebc0:	6011      	str	r1, [r2, #0]
 801ebc2:	d1e0      	bne.n	801eb86 <_free_r+0x26>
 801ebc4:	681c      	ldr	r4, [r3, #0]
 801ebc6:	685b      	ldr	r3, [r3, #4]
 801ebc8:	6053      	str	r3, [r2, #4]
 801ebca:	440c      	add	r4, r1
 801ebcc:	6014      	str	r4, [r2, #0]
 801ebce:	e7da      	b.n	801eb86 <_free_r+0x26>
 801ebd0:	d902      	bls.n	801ebd8 <_free_r+0x78>
 801ebd2:	230c      	movs	r3, #12
 801ebd4:	6003      	str	r3, [r0, #0]
 801ebd6:	e7d6      	b.n	801eb86 <_free_r+0x26>
 801ebd8:	6825      	ldr	r5, [r4, #0]
 801ebda:	1961      	adds	r1, r4, r5
 801ebdc:	428b      	cmp	r3, r1
 801ebde:	bf04      	itt	eq
 801ebe0:	6819      	ldreq	r1, [r3, #0]
 801ebe2:	685b      	ldreq	r3, [r3, #4]
 801ebe4:	6063      	str	r3, [r4, #4]
 801ebe6:	bf04      	itt	eq
 801ebe8:	1949      	addeq	r1, r1, r5
 801ebea:	6021      	streq	r1, [r4, #0]
 801ebec:	6054      	str	r4, [r2, #4]
 801ebee:	e7ca      	b.n	801eb86 <_free_r+0x26>
 801ebf0:	b003      	add	sp, #12
 801ebf2:	bd30      	pop	{r4, r5, pc}
 801ebf4:	20011d98 	.word	0x20011d98

0801ebf8 <_malloc_usable_size_r>:
 801ebf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ebfc:	1f18      	subs	r0, r3, #4
 801ebfe:	2b00      	cmp	r3, #0
 801ec00:	bfbc      	itt	lt
 801ec02:	580b      	ldrlt	r3, [r1, r0]
 801ec04:	18c0      	addlt	r0, r0, r3
 801ec06:	4770      	bx	lr

0801ec08 <__ssputs_r>:
 801ec08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ec0c:	688e      	ldr	r6, [r1, #8]
 801ec0e:	461f      	mov	r7, r3
 801ec10:	42be      	cmp	r6, r7
 801ec12:	680b      	ldr	r3, [r1, #0]
 801ec14:	4682      	mov	sl, r0
 801ec16:	460c      	mov	r4, r1
 801ec18:	4690      	mov	r8, r2
 801ec1a:	d82c      	bhi.n	801ec76 <__ssputs_r+0x6e>
 801ec1c:	898a      	ldrh	r2, [r1, #12]
 801ec1e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801ec22:	d026      	beq.n	801ec72 <__ssputs_r+0x6a>
 801ec24:	6965      	ldr	r5, [r4, #20]
 801ec26:	6909      	ldr	r1, [r1, #16]
 801ec28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ec2c:	eba3 0901 	sub.w	r9, r3, r1
 801ec30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801ec34:	1c7b      	adds	r3, r7, #1
 801ec36:	444b      	add	r3, r9
 801ec38:	106d      	asrs	r5, r5, #1
 801ec3a:	429d      	cmp	r5, r3
 801ec3c:	bf38      	it	cc
 801ec3e:	461d      	movcc	r5, r3
 801ec40:	0553      	lsls	r3, r2, #21
 801ec42:	d527      	bpl.n	801ec94 <__ssputs_r+0x8c>
 801ec44:	4629      	mov	r1, r5
 801ec46:	f7ff fad9 	bl	801e1fc <_malloc_r>
 801ec4a:	4606      	mov	r6, r0
 801ec4c:	b360      	cbz	r0, 801eca8 <__ssputs_r+0xa0>
 801ec4e:	6921      	ldr	r1, [r4, #16]
 801ec50:	464a      	mov	r2, r9
 801ec52:	f7ff ff4c 	bl	801eaee <memcpy>
 801ec56:	89a3      	ldrh	r3, [r4, #12]
 801ec58:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801ec5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ec60:	81a3      	strh	r3, [r4, #12]
 801ec62:	6126      	str	r6, [r4, #16]
 801ec64:	6165      	str	r5, [r4, #20]
 801ec66:	444e      	add	r6, r9
 801ec68:	eba5 0509 	sub.w	r5, r5, r9
 801ec6c:	6026      	str	r6, [r4, #0]
 801ec6e:	60a5      	str	r5, [r4, #8]
 801ec70:	463e      	mov	r6, r7
 801ec72:	42be      	cmp	r6, r7
 801ec74:	d900      	bls.n	801ec78 <__ssputs_r+0x70>
 801ec76:	463e      	mov	r6, r7
 801ec78:	6820      	ldr	r0, [r4, #0]
 801ec7a:	4632      	mov	r2, r6
 801ec7c:	4641      	mov	r1, r8
 801ec7e:	f7ff fdeb 	bl	801e858 <memmove>
 801ec82:	68a3      	ldr	r3, [r4, #8]
 801ec84:	1b9b      	subs	r3, r3, r6
 801ec86:	60a3      	str	r3, [r4, #8]
 801ec88:	6823      	ldr	r3, [r4, #0]
 801ec8a:	4433      	add	r3, r6
 801ec8c:	6023      	str	r3, [r4, #0]
 801ec8e:	2000      	movs	r0, #0
 801ec90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ec94:	462a      	mov	r2, r5
 801ec96:	f7ff fbb1 	bl	801e3fc <_realloc_r>
 801ec9a:	4606      	mov	r6, r0
 801ec9c:	2800      	cmp	r0, #0
 801ec9e:	d1e0      	bne.n	801ec62 <__ssputs_r+0x5a>
 801eca0:	6921      	ldr	r1, [r4, #16]
 801eca2:	4650      	mov	r0, sl
 801eca4:	f7ff ff5c 	bl	801eb60 <_free_r>
 801eca8:	230c      	movs	r3, #12
 801ecaa:	f8ca 3000 	str.w	r3, [sl]
 801ecae:	89a3      	ldrh	r3, [r4, #12]
 801ecb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ecb4:	81a3      	strh	r3, [r4, #12]
 801ecb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ecba:	e7e9      	b.n	801ec90 <__ssputs_r+0x88>

0801ecbc <_svfiprintf_r>:
 801ecbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ecc0:	4698      	mov	r8, r3
 801ecc2:	898b      	ldrh	r3, [r1, #12]
 801ecc4:	061b      	lsls	r3, r3, #24
 801ecc6:	b09d      	sub	sp, #116	; 0x74
 801ecc8:	4607      	mov	r7, r0
 801ecca:	460d      	mov	r5, r1
 801eccc:	4614      	mov	r4, r2
 801ecce:	d50e      	bpl.n	801ecee <_svfiprintf_r+0x32>
 801ecd0:	690b      	ldr	r3, [r1, #16]
 801ecd2:	b963      	cbnz	r3, 801ecee <_svfiprintf_r+0x32>
 801ecd4:	2140      	movs	r1, #64	; 0x40
 801ecd6:	f7ff fa91 	bl	801e1fc <_malloc_r>
 801ecda:	6028      	str	r0, [r5, #0]
 801ecdc:	6128      	str	r0, [r5, #16]
 801ecde:	b920      	cbnz	r0, 801ecea <_svfiprintf_r+0x2e>
 801ece0:	230c      	movs	r3, #12
 801ece2:	603b      	str	r3, [r7, #0]
 801ece4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ece8:	e0d0      	b.n	801ee8c <_svfiprintf_r+0x1d0>
 801ecea:	2340      	movs	r3, #64	; 0x40
 801ecec:	616b      	str	r3, [r5, #20]
 801ecee:	2300      	movs	r3, #0
 801ecf0:	9309      	str	r3, [sp, #36]	; 0x24
 801ecf2:	2320      	movs	r3, #32
 801ecf4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ecf8:	f8cd 800c 	str.w	r8, [sp, #12]
 801ecfc:	2330      	movs	r3, #48	; 0x30
 801ecfe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801eea4 <_svfiprintf_r+0x1e8>
 801ed02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ed06:	f04f 0901 	mov.w	r9, #1
 801ed0a:	4623      	mov	r3, r4
 801ed0c:	469a      	mov	sl, r3
 801ed0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ed12:	b10a      	cbz	r2, 801ed18 <_svfiprintf_r+0x5c>
 801ed14:	2a25      	cmp	r2, #37	; 0x25
 801ed16:	d1f9      	bne.n	801ed0c <_svfiprintf_r+0x50>
 801ed18:	ebba 0b04 	subs.w	fp, sl, r4
 801ed1c:	d00b      	beq.n	801ed36 <_svfiprintf_r+0x7a>
 801ed1e:	465b      	mov	r3, fp
 801ed20:	4622      	mov	r2, r4
 801ed22:	4629      	mov	r1, r5
 801ed24:	4638      	mov	r0, r7
 801ed26:	f7ff ff6f 	bl	801ec08 <__ssputs_r>
 801ed2a:	3001      	adds	r0, #1
 801ed2c:	f000 80a9 	beq.w	801ee82 <_svfiprintf_r+0x1c6>
 801ed30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ed32:	445a      	add	r2, fp
 801ed34:	9209      	str	r2, [sp, #36]	; 0x24
 801ed36:	f89a 3000 	ldrb.w	r3, [sl]
 801ed3a:	2b00      	cmp	r3, #0
 801ed3c:	f000 80a1 	beq.w	801ee82 <_svfiprintf_r+0x1c6>
 801ed40:	2300      	movs	r3, #0
 801ed42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ed46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ed4a:	f10a 0a01 	add.w	sl, sl, #1
 801ed4e:	9304      	str	r3, [sp, #16]
 801ed50:	9307      	str	r3, [sp, #28]
 801ed52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ed56:	931a      	str	r3, [sp, #104]	; 0x68
 801ed58:	4654      	mov	r4, sl
 801ed5a:	2205      	movs	r2, #5
 801ed5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ed60:	4850      	ldr	r0, [pc, #320]	; (801eea4 <_svfiprintf_r+0x1e8>)
 801ed62:	f7e1 fa7d 	bl	8000260 <memchr>
 801ed66:	9a04      	ldr	r2, [sp, #16]
 801ed68:	b9d8      	cbnz	r0, 801eda2 <_svfiprintf_r+0xe6>
 801ed6a:	06d0      	lsls	r0, r2, #27
 801ed6c:	bf44      	itt	mi
 801ed6e:	2320      	movmi	r3, #32
 801ed70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ed74:	0711      	lsls	r1, r2, #28
 801ed76:	bf44      	itt	mi
 801ed78:	232b      	movmi	r3, #43	; 0x2b
 801ed7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ed7e:	f89a 3000 	ldrb.w	r3, [sl]
 801ed82:	2b2a      	cmp	r3, #42	; 0x2a
 801ed84:	d015      	beq.n	801edb2 <_svfiprintf_r+0xf6>
 801ed86:	9a07      	ldr	r2, [sp, #28]
 801ed88:	4654      	mov	r4, sl
 801ed8a:	2000      	movs	r0, #0
 801ed8c:	f04f 0c0a 	mov.w	ip, #10
 801ed90:	4621      	mov	r1, r4
 801ed92:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ed96:	3b30      	subs	r3, #48	; 0x30
 801ed98:	2b09      	cmp	r3, #9
 801ed9a:	d94d      	bls.n	801ee38 <_svfiprintf_r+0x17c>
 801ed9c:	b1b0      	cbz	r0, 801edcc <_svfiprintf_r+0x110>
 801ed9e:	9207      	str	r2, [sp, #28]
 801eda0:	e014      	b.n	801edcc <_svfiprintf_r+0x110>
 801eda2:	eba0 0308 	sub.w	r3, r0, r8
 801eda6:	fa09 f303 	lsl.w	r3, r9, r3
 801edaa:	4313      	orrs	r3, r2
 801edac:	9304      	str	r3, [sp, #16]
 801edae:	46a2      	mov	sl, r4
 801edb0:	e7d2      	b.n	801ed58 <_svfiprintf_r+0x9c>
 801edb2:	9b03      	ldr	r3, [sp, #12]
 801edb4:	1d19      	adds	r1, r3, #4
 801edb6:	681b      	ldr	r3, [r3, #0]
 801edb8:	9103      	str	r1, [sp, #12]
 801edba:	2b00      	cmp	r3, #0
 801edbc:	bfbb      	ittet	lt
 801edbe:	425b      	neglt	r3, r3
 801edc0:	f042 0202 	orrlt.w	r2, r2, #2
 801edc4:	9307      	strge	r3, [sp, #28]
 801edc6:	9307      	strlt	r3, [sp, #28]
 801edc8:	bfb8      	it	lt
 801edca:	9204      	strlt	r2, [sp, #16]
 801edcc:	7823      	ldrb	r3, [r4, #0]
 801edce:	2b2e      	cmp	r3, #46	; 0x2e
 801edd0:	d10c      	bne.n	801edec <_svfiprintf_r+0x130>
 801edd2:	7863      	ldrb	r3, [r4, #1]
 801edd4:	2b2a      	cmp	r3, #42	; 0x2a
 801edd6:	d134      	bne.n	801ee42 <_svfiprintf_r+0x186>
 801edd8:	9b03      	ldr	r3, [sp, #12]
 801edda:	1d1a      	adds	r2, r3, #4
 801eddc:	681b      	ldr	r3, [r3, #0]
 801edde:	9203      	str	r2, [sp, #12]
 801ede0:	2b00      	cmp	r3, #0
 801ede2:	bfb8      	it	lt
 801ede4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801ede8:	3402      	adds	r4, #2
 801edea:	9305      	str	r3, [sp, #20]
 801edec:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801eeb4 <_svfiprintf_r+0x1f8>
 801edf0:	7821      	ldrb	r1, [r4, #0]
 801edf2:	2203      	movs	r2, #3
 801edf4:	4650      	mov	r0, sl
 801edf6:	f7e1 fa33 	bl	8000260 <memchr>
 801edfa:	b138      	cbz	r0, 801ee0c <_svfiprintf_r+0x150>
 801edfc:	9b04      	ldr	r3, [sp, #16]
 801edfe:	eba0 000a 	sub.w	r0, r0, sl
 801ee02:	2240      	movs	r2, #64	; 0x40
 801ee04:	4082      	lsls	r2, r0
 801ee06:	4313      	orrs	r3, r2
 801ee08:	3401      	adds	r4, #1
 801ee0a:	9304      	str	r3, [sp, #16]
 801ee0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ee10:	4825      	ldr	r0, [pc, #148]	; (801eea8 <_svfiprintf_r+0x1ec>)
 801ee12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ee16:	2206      	movs	r2, #6
 801ee18:	f7e1 fa22 	bl	8000260 <memchr>
 801ee1c:	2800      	cmp	r0, #0
 801ee1e:	d038      	beq.n	801ee92 <_svfiprintf_r+0x1d6>
 801ee20:	4b22      	ldr	r3, [pc, #136]	; (801eeac <_svfiprintf_r+0x1f0>)
 801ee22:	bb1b      	cbnz	r3, 801ee6c <_svfiprintf_r+0x1b0>
 801ee24:	9b03      	ldr	r3, [sp, #12]
 801ee26:	3307      	adds	r3, #7
 801ee28:	f023 0307 	bic.w	r3, r3, #7
 801ee2c:	3308      	adds	r3, #8
 801ee2e:	9303      	str	r3, [sp, #12]
 801ee30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ee32:	4433      	add	r3, r6
 801ee34:	9309      	str	r3, [sp, #36]	; 0x24
 801ee36:	e768      	b.n	801ed0a <_svfiprintf_r+0x4e>
 801ee38:	fb0c 3202 	mla	r2, ip, r2, r3
 801ee3c:	460c      	mov	r4, r1
 801ee3e:	2001      	movs	r0, #1
 801ee40:	e7a6      	b.n	801ed90 <_svfiprintf_r+0xd4>
 801ee42:	2300      	movs	r3, #0
 801ee44:	3401      	adds	r4, #1
 801ee46:	9305      	str	r3, [sp, #20]
 801ee48:	4619      	mov	r1, r3
 801ee4a:	f04f 0c0a 	mov.w	ip, #10
 801ee4e:	4620      	mov	r0, r4
 801ee50:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ee54:	3a30      	subs	r2, #48	; 0x30
 801ee56:	2a09      	cmp	r2, #9
 801ee58:	d903      	bls.n	801ee62 <_svfiprintf_r+0x1a6>
 801ee5a:	2b00      	cmp	r3, #0
 801ee5c:	d0c6      	beq.n	801edec <_svfiprintf_r+0x130>
 801ee5e:	9105      	str	r1, [sp, #20]
 801ee60:	e7c4      	b.n	801edec <_svfiprintf_r+0x130>
 801ee62:	fb0c 2101 	mla	r1, ip, r1, r2
 801ee66:	4604      	mov	r4, r0
 801ee68:	2301      	movs	r3, #1
 801ee6a:	e7f0      	b.n	801ee4e <_svfiprintf_r+0x192>
 801ee6c:	ab03      	add	r3, sp, #12
 801ee6e:	9300      	str	r3, [sp, #0]
 801ee70:	462a      	mov	r2, r5
 801ee72:	4b0f      	ldr	r3, [pc, #60]	; (801eeb0 <_svfiprintf_r+0x1f4>)
 801ee74:	a904      	add	r1, sp, #16
 801ee76:	4638      	mov	r0, r7
 801ee78:	f3af 8000 	nop.w
 801ee7c:	1c42      	adds	r2, r0, #1
 801ee7e:	4606      	mov	r6, r0
 801ee80:	d1d6      	bne.n	801ee30 <_svfiprintf_r+0x174>
 801ee82:	89ab      	ldrh	r3, [r5, #12]
 801ee84:	065b      	lsls	r3, r3, #25
 801ee86:	f53f af2d 	bmi.w	801ece4 <_svfiprintf_r+0x28>
 801ee8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ee8c:	b01d      	add	sp, #116	; 0x74
 801ee8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee92:	ab03      	add	r3, sp, #12
 801ee94:	9300      	str	r3, [sp, #0]
 801ee96:	462a      	mov	r2, r5
 801ee98:	4b05      	ldr	r3, [pc, #20]	; (801eeb0 <_svfiprintf_r+0x1f4>)
 801ee9a:	a904      	add	r1, sp, #16
 801ee9c:	4638      	mov	r0, r7
 801ee9e:	f000 f879 	bl	801ef94 <_printf_i>
 801eea2:	e7eb      	b.n	801ee7c <_svfiprintf_r+0x1c0>
 801eea4:	08021d34 	.word	0x08021d34
 801eea8:	08021d3e 	.word	0x08021d3e
 801eeac:	00000000 	.word	0x00000000
 801eeb0:	0801ec09 	.word	0x0801ec09
 801eeb4:	08021d3a 	.word	0x08021d3a

0801eeb8 <_printf_common>:
 801eeb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eebc:	4616      	mov	r6, r2
 801eebe:	4699      	mov	r9, r3
 801eec0:	688a      	ldr	r2, [r1, #8]
 801eec2:	690b      	ldr	r3, [r1, #16]
 801eec4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801eec8:	4293      	cmp	r3, r2
 801eeca:	bfb8      	it	lt
 801eecc:	4613      	movlt	r3, r2
 801eece:	6033      	str	r3, [r6, #0]
 801eed0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801eed4:	4607      	mov	r7, r0
 801eed6:	460c      	mov	r4, r1
 801eed8:	b10a      	cbz	r2, 801eede <_printf_common+0x26>
 801eeda:	3301      	adds	r3, #1
 801eedc:	6033      	str	r3, [r6, #0]
 801eede:	6823      	ldr	r3, [r4, #0]
 801eee0:	0699      	lsls	r1, r3, #26
 801eee2:	bf42      	ittt	mi
 801eee4:	6833      	ldrmi	r3, [r6, #0]
 801eee6:	3302      	addmi	r3, #2
 801eee8:	6033      	strmi	r3, [r6, #0]
 801eeea:	6825      	ldr	r5, [r4, #0]
 801eeec:	f015 0506 	ands.w	r5, r5, #6
 801eef0:	d106      	bne.n	801ef00 <_printf_common+0x48>
 801eef2:	f104 0a19 	add.w	sl, r4, #25
 801eef6:	68e3      	ldr	r3, [r4, #12]
 801eef8:	6832      	ldr	r2, [r6, #0]
 801eefa:	1a9b      	subs	r3, r3, r2
 801eefc:	42ab      	cmp	r3, r5
 801eefe:	dc26      	bgt.n	801ef4e <_printf_common+0x96>
 801ef00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801ef04:	1e13      	subs	r3, r2, #0
 801ef06:	6822      	ldr	r2, [r4, #0]
 801ef08:	bf18      	it	ne
 801ef0a:	2301      	movne	r3, #1
 801ef0c:	0692      	lsls	r2, r2, #26
 801ef0e:	d42b      	bmi.n	801ef68 <_printf_common+0xb0>
 801ef10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ef14:	4649      	mov	r1, r9
 801ef16:	4638      	mov	r0, r7
 801ef18:	47c0      	blx	r8
 801ef1a:	3001      	adds	r0, #1
 801ef1c:	d01e      	beq.n	801ef5c <_printf_common+0xa4>
 801ef1e:	6823      	ldr	r3, [r4, #0]
 801ef20:	6922      	ldr	r2, [r4, #16]
 801ef22:	f003 0306 	and.w	r3, r3, #6
 801ef26:	2b04      	cmp	r3, #4
 801ef28:	bf02      	ittt	eq
 801ef2a:	68e5      	ldreq	r5, [r4, #12]
 801ef2c:	6833      	ldreq	r3, [r6, #0]
 801ef2e:	1aed      	subeq	r5, r5, r3
 801ef30:	68a3      	ldr	r3, [r4, #8]
 801ef32:	bf0c      	ite	eq
 801ef34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ef38:	2500      	movne	r5, #0
 801ef3a:	4293      	cmp	r3, r2
 801ef3c:	bfc4      	itt	gt
 801ef3e:	1a9b      	subgt	r3, r3, r2
 801ef40:	18ed      	addgt	r5, r5, r3
 801ef42:	2600      	movs	r6, #0
 801ef44:	341a      	adds	r4, #26
 801ef46:	42b5      	cmp	r5, r6
 801ef48:	d11a      	bne.n	801ef80 <_printf_common+0xc8>
 801ef4a:	2000      	movs	r0, #0
 801ef4c:	e008      	b.n	801ef60 <_printf_common+0xa8>
 801ef4e:	2301      	movs	r3, #1
 801ef50:	4652      	mov	r2, sl
 801ef52:	4649      	mov	r1, r9
 801ef54:	4638      	mov	r0, r7
 801ef56:	47c0      	blx	r8
 801ef58:	3001      	adds	r0, #1
 801ef5a:	d103      	bne.n	801ef64 <_printf_common+0xac>
 801ef5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ef60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ef64:	3501      	adds	r5, #1
 801ef66:	e7c6      	b.n	801eef6 <_printf_common+0x3e>
 801ef68:	18e1      	adds	r1, r4, r3
 801ef6a:	1c5a      	adds	r2, r3, #1
 801ef6c:	2030      	movs	r0, #48	; 0x30
 801ef6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ef72:	4422      	add	r2, r4
 801ef74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ef78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ef7c:	3302      	adds	r3, #2
 801ef7e:	e7c7      	b.n	801ef10 <_printf_common+0x58>
 801ef80:	2301      	movs	r3, #1
 801ef82:	4622      	mov	r2, r4
 801ef84:	4649      	mov	r1, r9
 801ef86:	4638      	mov	r0, r7
 801ef88:	47c0      	blx	r8
 801ef8a:	3001      	adds	r0, #1
 801ef8c:	d0e6      	beq.n	801ef5c <_printf_common+0xa4>
 801ef8e:	3601      	adds	r6, #1
 801ef90:	e7d9      	b.n	801ef46 <_printf_common+0x8e>
	...

0801ef94 <_printf_i>:
 801ef94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ef98:	7e0f      	ldrb	r7, [r1, #24]
 801ef9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ef9c:	2f78      	cmp	r7, #120	; 0x78
 801ef9e:	4691      	mov	r9, r2
 801efa0:	4680      	mov	r8, r0
 801efa2:	460c      	mov	r4, r1
 801efa4:	469a      	mov	sl, r3
 801efa6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801efaa:	d807      	bhi.n	801efbc <_printf_i+0x28>
 801efac:	2f62      	cmp	r7, #98	; 0x62
 801efae:	d80a      	bhi.n	801efc6 <_printf_i+0x32>
 801efb0:	2f00      	cmp	r7, #0
 801efb2:	f000 80d4 	beq.w	801f15e <_printf_i+0x1ca>
 801efb6:	2f58      	cmp	r7, #88	; 0x58
 801efb8:	f000 80c0 	beq.w	801f13c <_printf_i+0x1a8>
 801efbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801efc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801efc4:	e03a      	b.n	801f03c <_printf_i+0xa8>
 801efc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801efca:	2b15      	cmp	r3, #21
 801efcc:	d8f6      	bhi.n	801efbc <_printf_i+0x28>
 801efce:	a101      	add	r1, pc, #4	; (adr r1, 801efd4 <_printf_i+0x40>)
 801efd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801efd4:	0801f02d 	.word	0x0801f02d
 801efd8:	0801f041 	.word	0x0801f041
 801efdc:	0801efbd 	.word	0x0801efbd
 801efe0:	0801efbd 	.word	0x0801efbd
 801efe4:	0801efbd 	.word	0x0801efbd
 801efe8:	0801efbd 	.word	0x0801efbd
 801efec:	0801f041 	.word	0x0801f041
 801eff0:	0801efbd 	.word	0x0801efbd
 801eff4:	0801efbd 	.word	0x0801efbd
 801eff8:	0801efbd 	.word	0x0801efbd
 801effc:	0801efbd 	.word	0x0801efbd
 801f000:	0801f145 	.word	0x0801f145
 801f004:	0801f06d 	.word	0x0801f06d
 801f008:	0801f0ff 	.word	0x0801f0ff
 801f00c:	0801efbd 	.word	0x0801efbd
 801f010:	0801efbd 	.word	0x0801efbd
 801f014:	0801f167 	.word	0x0801f167
 801f018:	0801efbd 	.word	0x0801efbd
 801f01c:	0801f06d 	.word	0x0801f06d
 801f020:	0801efbd 	.word	0x0801efbd
 801f024:	0801efbd 	.word	0x0801efbd
 801f028:	0801f107 	.word	0x0801f107
 801f02c:	682b      	ldr	r3, [r5, #0]
 801f02e:	1d1a      	adds	r2, r3, #4
 801f030:	681b      	ldr	r3, [r3, #0]
 801f032:	602a      	str	r2, [r5, #0]
 801f034:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f038:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f03c:	2301      	movs	r3, #1
 801f03e:	e09f      	b.n	801f180 <_printf_i+0x1ec>
 801f040:	6820      	ldr	r0, [r4, #0]
 801f042:	682b      	ldr	r3, [r5, #0]
 801f044:	0607      	lsls	r7, r0, #24
 801f046:	f103 0104 	add.w	r1, r3, #4
 801f04a:	6029      	str	r1, [r5, #0]
 801f04c:	d501      	bpl.n	801f052 <_printf_i+0xbe>
 801f04e:	681e      	ldr	r6, [r3, #0]
 801f050:	e003      	b.n	801f05a <_printf_i+0xc6>
 801f052:	0646      	lsls	r6, r0, #25
 801f054:	d5fb      	bpl.n	801f04e <_printf_i+0xba>
 801f056:	f9b3 6000 	ldrsh.w	r6, [r3]
 801f05a:	2e00      	cmp	r6, #0
 801f05c:	da03      	bge.n	801f066 <_printf_i+0xd2>
 801f05e:	232d      	movs	r3, #45	; 0x2d
 801f060:	4276      	negs	r6, r6
 801f062:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f066:	485a      	ldr	r0, [pc, #360]	; (801f1d0 <_printf_i+0x23c>)
 801f068:	230a      	movs	r3, #10
 801f06a:	e012      	b.n	801f092 <_printf_i+0xfe>
 801f06c:	682b      	ldr	r3, [r5, #0]
 801f06e:	6820      	ldr	r0, [r4, #0]
 801f070:	1d19      	adds	r1, r3, #4
 801f072:	6029      	str	r1, [r5, #0]
 801f074:	0605      	lsls	r5, r0, #24
 801f076:	d501      	bpl.n	801f07c <_printf_i+0xe8>
 801f078:	681e      	ldr	r6, [r3, #0]
 801f07a:	e002      	b.n	801f082 <_printf_i+0xee>
 801f07c:	0641      	lsls	r1, r0, #25
 801f07e:	d5fb      	bpl.n	801f078 <_printf_i+0xe4>
 801f080:	881e      	ldrh	r6, [r3, #0]
 801f082:	4853      	ldr	r0, [pc, #332]	; (801f1d0 <_printf_i+0x23c>)
 801f084:	2f6f      	cmp	r7, #111	; 0x6f
 801f086:	bf0c      	ite	eq
 801f088:	2308      	moveq	r3, #8
 801f08a:	230a      	movne	r3, #10
 801f08c:	2100      	movs	r1, #0
 801f08e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801f092:	6865      	ldr	r5, [r4, #4]
 801f094:	60a5      	str	r5, [r4, #8]
 801f096:	2d00      	cmp	r5, #0
 801f098:	bfa2      	ittt	ge
 801f09a:	6821      	ldrge	r1, [r4, #0]
 801f09c:	f021 0104 	bicge.w	r1, r1, #4
 801f0a0:	6021      	strge	r1, [r4, #0]
 801f0a2:	b90e      	cbnz	r6, 801f0a8 <_printf_i+0x114>
 801f0a4:	2d00      	cmp	r5, #0
 801f0a6:	d04b      	beq.n	801f140 <_printf_i+0x1ac>
 801f0a8:	4615      	mov	r5, r2
 801f0aa:	fbb6 f1f3 	udiv	r1, r6, r3
 801f0ae:	fb03 6711 	mls	r7, r3, r1, r6
 801f0b2:	5dc7      	ldrb	r7, [r0, r7]
 801f0b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801f0b8:	4637      	mov	r7, r6
 801f0ba:	42bb      	cmp	r3, r7
 801f0bc:	460e      	mov	r6, r1
 801f0be:	d9f4      	bls.n	801f0aa <_printf_i+0x116>
 801f0c0:	2b08      	cmp	r3, #8
 801f0c2:	d10b      	bne.n	801f0dc <_printf_i+0x148>
 801f0c4:	6823      	ldr	r3, [r4, #0]
 801f0c6:	07de      	lsls	r6, r3, #31
 801f0c8:	d508      	bpl.n	801f0dc <_printf_i+0x148>
 801f0ca:	6923      	ldr	r3, [r4, #16]
 801f0cc:	6861      	ldr	r1, [r4, #4]
 801f0ce:	4299      	cmp	r1, r3
 801f0d0:	bfde      	ittt	le
 801f0d2:	2330      	movle	r3, #48	; 0x30
 801f0d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 801f0d8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801f0dc:	1b52      	subs	r2, r2, r5
 801f0de:	6122      	str	r2, [r4, #16]
 801f0e0:	f8cd a000 	str.w	sl, [sp]
 801f0e4:	464b      	mov	r3, r9
 801f0e6:	aa03      	add	r2, sp, #12
 801f0e8:	4621      	mov	r1, r4
 801f0ea:	4640      	mov	r0, r8
 801f0ec:	f7ff fee4 	bl	801eeb8 <_printf_common>
 801f0f0:	3001      	adds	r0, #1
 801f0f2:	d14a      	bne.n	801f18a <_printf_i+0x1f6>
 801f0f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f0f8:	b004      	add	sp, #16
 801f0fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f0fe:	6823      	ldr	r3, [r4, #0]
 801f100:	f043 0320 	orr.w	r3, r3, #32
 801f104:	6023      	str	r3, [r4, #0]
 801f106:	4833      	ldr	r0, [pc, #204]	; (801f1d4 <_printf_i+0x240>)
 801f108:	2778      	movs	r7, #120	; 0x78
 801f10a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801f10e:	6823      	ldr	r3, [r4, #0]
 801f110:	6829      	ldr	r1, [r5, #0]
 801f112:	061f      	lsls	r7, r3, #24
 801f114:	f851 6b04 	ldr.w	r6, [r1], #4
 801f118:	d402      	bmi.n	801f120 <_printf_i+0x18c>
 801f11a:	065f      	lsls	r7, r3, #25
 801f11c:	bf48      	it	mi
 801f11e:	b2b6      	uxthmi	r6, r6
 801f120:	07df      	lsls	r7, r3, #31
 801f122:	bf48      	it	mi
 801f124:	f043 0320 	orrmi.w	r3, r3, #32
 801f128:	6029      	str	r1, [r5, #0]
 801f12a:	bf48      	it	mi
 801f12c:	6023      	strmi	r3, [r4, #0]
 801f12e:	b91e      	cbnz	r6, 801f138 <_printf_i+0x1a4>
 801f130:	6823      	ldr	r3, [r4, #0]
 801f132:	f023 0320 	bic.w	r3, r3, #32
 801f136:	6023      	str	r3, [r4, #0]
 801f138:	2310      	movs	r3, #16
 801f13a:	e7a7      	b.n	801f08c <_printf_i+0xf8>
 801f13c:	4824      	ldr	r0, [pc, #144]	; (801f1d0 <_printf_i+0x23c>)
 801f13e:	e7e4      	b.n	801f10a <_printf_i+0x176>
 801f140:	4615      	mov	r5, r2
 801f142:	e7bd      	b.n	801f0c0 <_printf_i+0x12c>
 801f144:	682b      	ldr	r3, [r5, #0]
 801f146:	6826      	ldr	r6, [r4, #0]
 801f148:	6961      	ldr	r1, [r4, #20]
 801f14a:	1d18      	adds	r0, r3, #4
 801f14c:	6028      	str	r0, [r5, #0]
 801f14e:	0635      	lsls	r5, r6, #24
 801f150:	681b      	ldr	r3, [r3, #0]
 801f152:	d501      	bpl.n	801f158 <_printf_i+0x1c4>
 801f154:	6019      	str	r1, [r3, #0]
 801f156:	e002      	b.n	801f15e <_printf_i+0x1ca>
 801f158:	0670      	lsls	r0, r6, #25
 801f15a:	d5fb      	bpl.n	801f154 <_printf_i+0x1c0>
 801f15c:	8019      	strh	r1, [r3, #0]
 801f15e:	2300      	movs	r3, #0
 801f160:	6123      	str	r3, [r4, #16]
 801f162:	4615      	mov	r5, r2
 801f164:	e7bc      	b.n	801f0e0 <_printf_i+0x14c>
 801f166:	682b      	ldr	r3, [r5, #0]
 801f168:	1d1a      	adds	r2, r3, #4
 801f16a:	602a      	str	r2, [r5, #0]
 801f16c:	681d      	ldr	r5, [r3, #0]
 801f16e:	6862      	ldr	r2, [r4, #4]
 801f170:	2100      	movs	r1, #0
 801f172:	4628      	mov	r0, r5
 801f174:	f7e1 f874 	bl	8000260 <memchr>
 801f178:	b108      	cbz	r0, 801f17e <_printf_i+0x1ea>
 801f17a:	1b40      	subs	r0, r0, r5
 801f17c:	6060      	str	r0, [r4, #4]
 801f17e:	6863      	ldr	r3, [r4, #4]
 801f180:	6123      	str	r3, [r4, #16]
 801f182:	2300      	movs	r3, #0
 801f184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f188:	e7aa      	b.n	801f0e0 <_printf_i+0x14c>
 801f18a:	6923      	ldr	r3, [r4, #16]
 801f18c:	462a      	mov	r2, r5
 801f18e:	4649      	mov	r1, r9
 801f190:	4640      	mov	r0, r8
 801f192:	47d0      	blx	sl
 801f194:	3001      	adds	r0, #1
 801f196:	d0ad      	beq.n	801f0f4 <_printf_i+0x160>
 801f198:	6823      	ldr	r3, [r4, #0]
 801f19a:	079b      	lsls	r3, r3, #30
 801f19c:	d413      	bmi.n	801f1c6 <_printf_i+0x232>
 801f19e:	68e0      	ldr	r0, [r4, #12]
 801f1a0:	9b03      	ldr	r3, [sp, #12]
 801f1a2:	4298      	cmp	r0, r3
 801f1a4:	bfb8      	it	lt
 801f1a6:	4618      	movlt	r0, r3
 801f1a8:	e7a6      	b.n	801f0f8 <_printf_i+0x164>
 801f1aa:	2301      	movs	r3, #1
 801f1ac:	4632      	mov	r2, r6
 801f1ae:	4649      	mov	r1, r9
 801f1b0:	4640      	mov	r0, r8
 801f1b2:	47d0      	blx	sl
 801f1b4:	3001      	adds	r0, #1
 801f1b6:	d09d      	beq.n	801f0f4 <_printf_i+0x160>
 801f1b8:	3501      	adds	r5, #1
 801f1ba:	68e3      	ldr	r3, [r4, #12]
 801f1bc:	9903      	ldr	r1, [sp, #12]
 801f1be:	1a5b      	subs	r3, r3, r1
 801f1c0:	42ab      	cmp	r3, r5
 801f1c2:	dcf2      	bgt.n	801f1aa <_printf_i+0x216>
 801f1c4:	e7eb      	b.n	801f19e <_printf_i+0x20a>
 801f1c6:	2500      	movs	r5, #0
 801f1c8:	f104 0619 	add.w	r6, r4, #25
 801f1cc:	e7f5      	b.n	801f1ba <_printf_i+0x226>
 801f1ce:	bf00      	nop
 801f1d0:	08021d45 	.word	0x08021d45
 801f1d4:	08021d56 	.word	0x08021d56

0801f1d8 <__sflush_r>:
 801f1d8:	898a      	ldrh	r2, [r1, #12]
 801f1da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f1de:	4605      	mov	r5, r0
 801f1e0:	0710      	lsls	r0, r2, #28
 801f1e2:	460c      	mov	r4, r1
 801f1e4:	d458      	bmi.n	801f298 <__sflush_r+0xc0>
 801f1e6:	684b      	ldr	r3, [r1, #4]
 801f1e8:	2b00      	cmp	r3, #0
 801f1ea:	dc05      	bgt.n	801f1f8 <__sflush_r+0x20>
 801f1ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801f1ee:	2b00      	cmp	r3, #0
 801f1f0:	dc02      	bgt.n	801f1f8 <__sflush_r+0x20>
 801f1f2:	2000      	movs	r0, #0
 801f1f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f1f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f1fa:	2e00      	cmp	r6, #0
 801f1fc:	d0f9      	beq.n	801f1f2 <__sflush_r+0x1a>
 801f1fe:	2300      	movs	r3, #0
 801f200:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801f204:	682f      	ldr	r7, [r5, #0]
 801f206:	6a21      	ldr	r1, [r4, #32]
 801f208:	602b      	str	r3, [r5, #0]
 801f20a:	d032      	beq.n	801f272 <__sflush_r+0x9a>
 801f20c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801f20e:	89a3      	ldrh	r3, [r4, #12]
 801f210:	075a      	lsls	r2, r3, #29
 801f212:	d505      	bpl.n	801f220 <__sflush_r+0x48>
 801f214:	6863      	ldr	r3, [r4, #4]
 801f216:	1ac0      	subs	r0, r0, r3
 801f218:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f21a:	b10b      	cbz	r3, 801f220 <__sflush_r+0x48>
 801f21c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801f21e:	1ac0      	subs	r0, r0, r3
 801f220:	2300      	movs	r3, #0
 801f222:	4602      	mov	r2, r0
 801f224:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f226:	6a21      	ldr	r1, [r4, #32]
 801f228:	4628      	mov	r0, r5
 801f22a:	47b0      	blx	r6
 801f22c:	1c43      	adds	r3, r0, #1
 801f22e:	89a3      	ldrh	r3, [r4, #12]
 801f230:	d106      	bne.n	801f240 <__sflush_r+0x68>
 801f232:	6829      	ldr	r1, [r5, #0]
 801f234:	291d      	cmp	r1, #29
 801f236:	d82b      	bhi.n	801f290 <__sflush_r+0xb8>
 801f238:	4a29      	ldr	r2, [pc, #164]	; (801f2e0 <__sflush_r+0x108>)
 801f23a:	410a      	asrs	r2, r1
 801f23c:	07d6      	lsls	r6, r2, #31
 801f23e:	d427      	bmi.n	801f290 <__sflush_r+0xb8>
 801f240:	2200      	movs	r2, #0
 801f242:	6062      	str	r2, [r4, #4]
 801f244:	04d9      	lsls	r1, r3, #19
 801f246:	6922      	ldr	r2, [r4, #16]
 801f248:	6022      	str	r2, [r4, #0]
 801f24a:	d504      	bpl.n	801f256 <__sflush_r+0x7e>
 801f24c:	1c42      	adds	r2, r0, #1
 801f24e:	d101      	bne.n	801f254 <__sflush_r+0x7c>
 801f250:	682b      	ldr	r3, [r5, #0]
 801f252:	b903      	cbnz	r3, 801f256 <__sflush_r+0x7e>
 801f254:	6560      	str	r0, [r4, #84]	; 0x54
 801f256:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f258:	602f      	str	r7, [r5, #0]
 801f25a:	2900      	cmp	r1, #0
 801f25c:	d0c9      	beq.n	801f1f2 <__sflush_r+0x1a>
 801f25e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f262:	4299      	cmp	r1, r3
 801f264:	d002      	beq.n	801f26c <__sflush_r+0x94>
 801f266:	4628      	mov	r0, r5
 801f268:	f7ff fc7a 	bl	801eb60 <_free_r>
 801f26c:	2000      	movs	r0, #0
 801f26e:	6360      	str	r0, [r4, #52]	; 0x34
 801f270:	e7c0      	b.n	801f1f4 <__sflush_r+0x1c>
 801f272:	2301      	movs	r3, #1
 801f274:	4628      	mov	r0, r5
 801f276:	47b0      	blx	r6
 801f278:	1c41      	adds	r1, r0, #1
 801f27a:	d1c8      	bne.n	801f20e <__sflush_r+0x36>
 801f27c:	682b      	ldr	r3, [r5, #0]
 801f27e:	2b00      	cmp	r3, #0
 801f280:	d0c5      	beq.n	801f20e <__sflush_r+0x36>
 801f282:	2b1d      	cmp	r3, #29
 801f284:	d001      	beq.n	801f28a <__sflush_r+0xb2>
 801f286:	2b16      	cmp	r3, #22
 801f288:	d101      	bne.n	801f28e <__sflush_r+0xb6>
 801f28a:	602f      	str	r7, [r5, #0]
 801f28c:	e7b1      	b.n	801f1f2 <__sflush_r+0x1a>
 801f28e:	89a3      	ldrh	r3, [r4, #12]
 801f290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f294:	81a3      	strh	r3, [r4, #12]
 801f296:	e7ad      	b.n	801f1f4 <__sflush_r+0x1c>
 801f298:	690f      	ldr	r7, [r1, #16]
 801f29a:	2f00      	cmp	r7, #0
 801f29c:	d0a9      	beq.n	801f1f2 <__sflush_r+0x1a>
 801f29e:	0793      	lsls	r3, r2, #30
 801f2a0:	680e      	ldr	r6, [r1, #0]
 801f2a2:	bf08      	it	eq
 801f2a4:	694b      	ldreq	r3, [r1, #20]
 801f2a6:	600f      	str	r7, [r1, #0]
 801f2a8:	bf18      	it	ne
 801f2aa:	2300      	movne	r3, #0
 801f2ac:	eba6 0807 	sub.w	r8, r6, r7
 801f2b0:	608b      	str	r3, [r1, #8]
 801f2b2:	f1b8 0f00 	cmp.w	r8, #0
 801f2b6:	dd9c      	ble.n	801f1f2 <__sflush_r+0x1a>
 801f2b8:	6a21      	ldr	r1, [r4, #32]
 801f2ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801f2bc:	4643      	mov	r3, r8
 801f2be:	463a      	mov	r2, r7
 801f2c0:	4628      	mov	r0, r5
 801f2c2:	47b0      	blx	r6
 801f2c4:	2800      	cmp	r0, #0
 801f2c6:	dc06      	bgt.n	801f2d6 <__sflush_r+0xfe>
 801f2c8:	89a3      	ldrh	r3, [r4, #12]
 801f2ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f2ce:	81a3      	strh	r3, [r4, #12]
 801f2d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f2d4:	e78e      	b.n	801f1f4 <__sflush_r+0x1c>
 801f2d6:	4407      	add	r7, r0
 801f2d8:	eba8 0800 	sub.w	r8, r8, r0
 801f2dc:	e7e9      	b.n	801f2b2 <__sflush_r+0xda>
 801f2de:	bf00      	nop
 801f2e0:	dfbffffe 	.word	0xdfbffffe

0801f2e4 <_fflush_r>:
 801f2e4:	b538      	push	{r3, r4, r5, lr}
 801f2e6:	690b      	ldr	r3, [r1, #16]
 801f2e8:	4605      	mov	r5, r0
 801f2ea:	460c      	mov	r4, r1
 801f2ec:	b913      	cbnz	r3, 801f2f4 <_fflush_r+0x10>
 801f2ee:	2500      	movs	r5, #0
 801f2f0:	4628      	mov	r0, r5
 801f2f2:	bd38      	pop	{r3, r4, r5, pc}
 801f2f4:	b118      	cbz	r0, 801f2fe <_fflush_r+0x1a>
 801f2f6:	6a03      	ldr	r3, [r0, #32]
 801f2f8:	b90b      	cbnz	r3, 801f2fe <_fflush_r+0x1a>
 801f2fa:	f7ff f9b7 	bl	801e66c <__sinit>
 801f2fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f302:	2b00      	cmp	r3, #0
 801f304:	d0f3      	beq.n	801f2ee <_fflush_r+0xa>
 801f306:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801f308:	07d0      	lsls	r0, r2, #31
 801f30a:	d404      	bmi.n	801f316 <_fflush_r+0x32>
 801f30c:	0599      	lsls	r1, r3, #22
 801f30e:	d402      	bmi.n	801f316 <_fflush_r+0x32>
 801f310:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f312:	f7ff fbe2 	bl	801eada <__retarget_lock_acquire_recursive>
 801f316:	4628      	mov	r0, r5
 801f318:	4621      	mov	r1, r4
 801f31a:	f7ff ff5d 	bl	801f1d8 <__sflush_r>
 801f31e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f320:	07da      	lsls	r2, r3, #31
 801f322:	4605      	mov	r5, r0
 801f324:	d4e4      	bmi.n	801f2f0 <_fflush_r+0xc>
 801f326:	89a3      	ldrh	r3, [r4, #12]
 801f328:	059b      	lsls	r3, r3, #22
 801f32a:	d4e1      	bmi.n	801f2f0 <_fflush_r+0xc>
 801f32c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f32e:	f7ff fbd5 	bl	801eadc <__retarget_lock_release_recursive>
 801f332:	e7dd      	b.n	801f2f0 <_fflush_r+0xc>

0801f334 <fiprintf>:
 801f334:	b40e      	push	{r1, r2, r3}
 801f336:	b503      	push	{r0, r1, lr}
 801f338:	4601      	mov	r1, r0
 801f33a:	ab03      	add	r3, sp, #12
 801f33c:	4805      	ldr	r0, [pc, #20]	; (801f354 <fiprintf+0x20>)
 801f33e:	f853 2b04 	ldr.w	r2, [r3], #4
 801f342:	6800      	ldr	r0, [r0, #0]
 801f344:	9301      	str	r3, [sp, #4]
 801f346:	f000 f837 	bl	801f3b8 <_vfiprintf_r>
 801f34a:	b002      	add	sp, #8
 801f34c:	f85d eb04 	ldr.w	lr, [sp], #4
 801f350:	b003      	add	sp, #12
 801f352:	4770      	bx	lr
 801f354:	20002338 	.word	0x20002338

0801f358 <abort>:
 801f358:	b508      	push	{r3, lr}
 801f35a:	2006      	movs	r0, #6
 801f35c:	f000 fa04 	bl	801f768 <raise>
 801f360:	2001      	movs	r0, #1
 801f362:	f7e4 fa31 	bl	80037c8 <_exit>

0801f366 <__sfputc_r>:
 801f366:	6893      	ldr	r3, [r2, #8]
 801f368:	3b01      	subs	r3, #1
 801f36a:	2b00      	cmp	r3, #0
 801f36c:	b410      	push	{r4}
 801f36e:	6093      	str	r3, [r2, #8]
 801f370:	da08      	bge.n	801f384 <__sfputc_r+0x1e>
 801f372:	6994      	ldr	r4, [r2, #24]
 801f374:	42a3      	cmp	r3, r4
 801f376:	db01      	blt.n	801f37c <__sfputc_r+0x16>
 801f378:	290a      	cmp	r1, #10
 801f37a:	d103      	bne.n	801f384 <__sfputc_r+0x1e>
 801f37c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f380:	f000 b934 	b.w	801f5ec <__swbuf_r>
 801f384:	6813      	ldr	r3, [r2, #0]
 801f386:	1c58      	adds	r0, r3, #1
 801f388:	6010      	str	r0, [r2, #0]
 801f38a:	7019      	strb	r1, [r3, #0]
 801f38c:	4608      	mov	r0, r1
 801f38e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f392:	4770      	bx	lr

0801f394 <__sfputs_r>:
 801f394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f396:	4606      	mov	r6, r0
 801f398:	460f      	mov	r7, r1
 801f39a:	4614      	mov	r4, r2
 801f39c:	18d5      	adds	r5, r2, r3
 801f39e:	42ac      	cmp	r4, r5
 801f3a0:	d101      	bne.n	801f3a6 <__sfputs_r+0x12>
 801f3a2:	2000      	movs	r0, #0
 801f3a4:	e007      	b.n	801f3b6 <__sfputs_r+0x22>
 801f3a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f3aa:	463a      	mov	r2, r7
 801f3ac:	4630      	mov	r0, r6
 801f3ae:	f7ff ffda 	bl	801f366 <__sfputc_r>
 801f3b2:	1c43      	adds	r3, r0, #1
 801f3b4:	d1f3      	bne.n	801f39e <__sfputs_r+0xa>
 801f3b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801f3b8 <_vfiprintf_r>:
 801f3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f3bc:	460d      	mov	r5, r1
 801f3be:	b09d      	sub	sp, #116	; 0x74
 801f3c0:	4614      	mov	r4, r2
 801f3c2:	4698      	mov	r8, r3
 801f3c4:	4606      	mov	r6, r0
 801f3c6:	b118      	cbz	r0, 801f3d0 <_vfiprintf_r+0x18>
 801f3c8:	6a03      	ldr	r3, [r0, #32]
 801f3ca:	b90b      	cbnz	r3, 801f3d0 <_vfiprintf_r+0x18>
 801f3cc:	f7ff f94e 	bl	801e66c <__sinit>
 801f3d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f3d2:	07d9      	lsls	r1, r3, #31
 801f3d4:	d405      	bmi.n	801f3e2 <_vfiprintf_r+0x2a>
 801f3d6:	89ab      	ldrh	r3, [r5, #12]
 801f3d8:	059a      	lsls	r2, r3, #22
 801f3da:	d402      	bmi.n	801f3e2 <_vfiprintf_r+0x2a>
 801f3dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f3de:	f7ff fb7c 	bl	801eada <__retarget_lock_acquire_recursive>
 801f3e2:	89ab      	ldrh	r3, [r5, #12]
 801f3e4:	071b      	lsls	r3, r3, #28
 801f3e6:	d501      	bpl.n	801f3ec <_vfiprintf_r+0x34>
 801f3e8:	692b      	ldr	r3, [r5, #16]
 801f3ea:	b99b      	cbnz	r3, 801f414 <_vfiprintf_r+0x5c>
 801f3ec:	4629      	mov	r1, r5
 801f3ee:	4630      	mov	r0, r6
 801f3f0:	f000 f93a 	bl	801f668 <__swsetup_r>
 801f3f4:	b170      	cbz	r0, 801f414 <_vfiprintf_r+0x5c>
 801f3f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f3f8:	07dc      	lsls	r4, r3, #31
 801f3fa:	d504      	bpl.n	801f406 <_vfiprintf_r+0x4e>
 801f3fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f400:	b01d      	add	sp, #116	; 0x74
 801f402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f406:	89ab      	ldrh	r3, [r5, #12]
 801f408:	0598      	lsls	r0, r3, #22
 801f40a:	d4f7      	bmi.n	801f3fc <_vfiprintf_r+0x44>
 801f40c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f40e:	f7ff fb65 	bl	801eadc <__retarget_lock_release_recursive>
 801f412:	e7f3      	b.n	801f3fc <_vfiprintf_r+0x44>
 801f414:	2300      	movs	r3, #0
 801f416:	9309      	str	r3, [sp, #36]	; 0x24
 801f418:	2320      	movs	r3, #32
 801f41a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f41e:	f8cd 800c 	str.w	r8, [sp, #12]
 801f422:	2330      	movs	r3, #48	; 0x30
 801f424:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801f5d8 <_vfiprintf_r+0x220>
 801f428:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f42c:	f04f 0901 	mov.w	r9, #1
 801f430:	4623      	mov	r3, r4
 801f432:	469a      	mov	sl, r3
 801f434:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f438:	b10a      	cbz	r2, 801f43e <_vfiprintf_r+0x86>
 801f43a:	2a25      	cmp	r2, #37	; 0x25
 801f43c:	d1f9      	bne.n	801f432 <_vfiprintf_r+0x7a>
 801f43e:	ebba 0b04 	subs.w	fp, sl, r4
 801f442:	d00b      	beq.n	801f45c <_vfiprintf_r+0xa4>
 801f444:	465b      	mov	r3, fp
 801f446:	4622      	mov	r2, r4
 801f448:	4629      	mov	r1, r5
 801f44a:	4630      	mov	r0, r6
 801f44c:	f7ff ffa2 	bl	801f394 <__sfputs_r>
 801f450:	3001      	adds	r0, #1
 801f452:	f000 80a9 	beq.w	801f5a8 <_vfiprintf_r+0x1f0>
 801f456:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f458:	445a      	add	r2, fp
 801f45a:	9209      	str	r2, [sp, #36]	; 0x24
 801f45c:	f89a 3000 	ldrb.w	r3, [sl]
 801f460:	2b00      	cmp	r3, #0
 801f462:	f000 80a1 	beq.w	801f5a8 <_vfiprintf_r+0x1f0>
 801f466:	2300      	movs	r3, #0
 801f468:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801f46c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f470:	f10a 0a01 	add.w	sl, sl, #1
 801f474:	9304      	str	r3, [sp, #16]
 801f476:	9307      	str	r3, [sp, #28]
 801f478:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f47c:	931a      	str	r3, [sp, #104]	; 0x68
 801f47e:	4654      	mov	r4, sl
 801f480:	2205      	movs	r2, #5
 801f482:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f486:	4854      	ldr	r0, [pc, #336]	; (801f5d8 <_vfiprintf_r+0x220>)
 801f488:	f7e0 feea 	bl	8000260 <memchr>
 801f48c:	9a04      	ldr	r2, [sp, #16]
 801f48e:	b9d8      	cbnz	r0, 801f4c8 <_vfiprintf_r+0x110>
 801f490:	06d1      	lsls	r1, r2, #27
 801f492:	bf44      	itt	mi
 801f494:	2320      	movmi	r3, #32
 801f496:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f49a:	0713      	lsls	r3, r2, #28
 801f49c:	bf44      	itt	mi
 801f49e:	232b      	movmi	r3, #43	; 0x2b
 801f4a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f4a4:	f89a 3000 	ldrb.w	r3, [sl]
 801f4a8:	2b2a      	cmp	r3, #42	; 0x2a
 801f4aa:	d015      	beq.n	801f4d8 <_vfiprintf_r+0x120>
 801f4ac:	9a07      	ldr	r2, [sp, #28]
 801f4ae:	4654      	mov	r4, sl
 801f4b0:	2000      	movs	r0, #0
 801f4b2:	f04f 0c0a 	mov.w	ip, #10
 801f4b6:	4621      	mov	r1, r4
 801f4b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f4bc:	3b30      	subs	r3, #48	; 0x30
 801f4be:	2b09      	cmp	r3, #9
 801f4c0:	d94d      	bls.n	801f55e <_vfiprintf_r+0x1a6>
 801f4c2:	b1b0      	cbz	r0, 801f4f2 <_vfiprintf_r+0x13a>
 801f4c4:	9207      	str	r2, [sp, #28]
 801f4c6:	e014      	b.n	801f4f2 <_vfiprintf_r+0x13a>
 801f4c8:	eba0 0308 	sub.w	r3, r0, r8
 801f4cc:	fa09 f303 	lsl.w	r3, r9, r3
 801f4d0:	4313      	orrs	r3, r2
 801f4d2:	9304      	str	r3, [sp, #16]
 801f4d4:	46a2      	mov	sl, r4
 801f4d6:	e7d2      	b.n	801f47e <_vfiprintf_r+0xc6>
 801f4d8:	9b03      	ldr	r3, [sp, #12]
 801f4da:	1d19      	adds	r1, r3, #4
 801f4dc:	681b      	ldr	r3, [r3, #0]
 801f4de:	9103      	str	r1, [sp, #12]
 801f4e0:	2b00      	cmp	r3, #0
 801f4e2:	bfbb      	ittet	lt
 801f4e4:	425b      	neglt	r3, r3
 801f4e6:	f042 0202 	orrlt.w	r2, r2, #2
 801f4ea:	9307      	strge	r3, [sp, #28]
 801f4ec:	9307      	strlt	r3, [sp, #28]
 801f4ee:	bfb8      	it	lt
 801f4f0:	9204      	strlt	r2, [sp, #16]
 801f4f2:	7823      	ldrb	r3, [r4, #0]
 801f4f4:	2b2e      	cmp	r3, #46	; 0x2e
 801f4f6:	d10c      	bne.n	801f512 <_vfiprintf_r+0x15a>
 801f4f8:	7863      	ldrb	r3, [r4, #1]
 801f4fa:	2b2a      	cmp	r3, #42	; 0x2a
 801f4fc:	d134      	bne.n	801f568 <_vfiprintf_r+0x1b0>
 801f4fe:	9b03      	ldr	r3, [sp, #12]
 801f500:	1d1a      	adds	r2, r3, #4
 801f502:	681b      	ldr	r3, [r3, #0]
 801f504:	9203      	str	r2, [sp, #12]
 801f506:	2b00      	cmp	r3, #0
 801f508:	bfb8      	it	lt
 801f50a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801f50e:	3402      	adds	r4, #2
 801f510:	9305      	str	r3, [sp, #20]
 801f512:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801f5e8 <_vfiprintf_r+0x230>
 801f516:	7821      	ldrb	r1, [r4, #0]
 801f518:	2203      	movs	r2, #3
 801f51a:	4650      	mov	r0, sl
 801f51c:	f7e0 fea0 	bl	8000260 <memchr>
 801f520:	b138      	cbz	r0, 801f532 <_vfiprintf_r+0x17a>
 801f522:	9b04      	ldr	r3, [sp, #16]
 801f524:	eba0 000a 	sub.w	r0, r0, sl
 801f528:	2240      	movs	r2, #64	; 0x40
 801f52a:	4082      	lsls	r2, r0
 801f52c:	4313      	orrs	r3, r2
 801f52e:	3401      	adds	r4, #1
 801f530:	9304      	str	r3, [sp, #16]
 801f532:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f536:	4829      	ldr	r0, [pc, #164]	; (801f5dc <_vfiprintf_r+0x224>)
 801f538:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f53c:	2206      	movs	r2, #6
 801f53e:	f7e0 fe8f 	bl	8000260 <memchr>
 801f542:	2800      	cmp	r0, #0
 801f544:	d03f      	beq.n	801f5c6 <_vfiprintf_r+0x20e>
 801f546:	4b26      	ldr	r3, [pc, #152]	; (801f5e0 <_vfiprintf_r+0x228>)
 801f548:	bb1b      	cbnz	r3, 801f592 <_vfiprintf_r+0x1da>
 801f54a:	9b03      	ldr	r3, [sp, #12]
 801f54c:	3307      	adds	r3, #7
 801f54e:	f023 0307 	bic.w	r3, r3, #7
 801f552:	3308      	adds	r3, #8
 801f554:	9303      	str	r3, [sp, #12]
 801f556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f558:	443b      	add	r3, r7
 801f55a:	9309      	str	r3, [sp, #36]	; 0x24
 801f55c:	e768      	b.n	801f430 <_vfiprintf_r+0x78>
 801f55e:	fb0c 3202 	mla	r2, ip, r2, r3
 801f562:	460c      	mov	r4, r1
 801f564:	2001      	movs	r0, #1
 801f566:	e7a6      	b.n	801f4b6 <_vfiprintf_r+0xfe>
 801f568:	2300      	movs	r3, #0
 801f56a:	3401      	adds	r4, #1
 801f56c:	9305      	str	r3, [sp, #20]
 801f56e:	4619      	mov	r1, r3
 801f570:	f04f 0c0a 	mov.w	ip, #10
 801f574:	4620      	mov	r0, r4
 801f576:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f57a:	3a30      	subs	r2, #48	; 0x30
 801f57c:	2a09      	cmp	r2, #9
 801f57e:	d903      	bls.n	801f588 <_vfiprintf_r+0x1d0>
 801f580:	2b00      	cmp	r3, #0
 801f582:	d0c6      	beq.n	801f512 <_vfiprintf_r+0x15a>
 801f584:	9105      	str	r1, [sp, #20]
 801f586:	e7c4      	b.n	801f512 <_vfiprintf_r+0x15a>
 801f588:	fb0c 2101 	mla	r1, ip, r1, r2
 801f58c:	4604      	mov	r4, r0
 801f58e:	2301      	movs	r3, #1
 801f590:	e7f0      	b.n	801f574 <_vfiprintf_r+0x1bc>
 801f592:	ab03      	add	r3, sp, #12
 801f594:	9300      	str	r3, [sp, #0]
 801f596:	462a      	mov	r2, r5
 801f598:	4b12      	ldr	r3, [pc, #72]	; (801f5e4 <_vfiprintf_r+0x22c>)
 801f59a:	a904      	add	r1, sp, #16
 801f59c:	4630      	mov	r0, r6
 801f59e:	f3af 8000 	nop.w
 801f5a2:	4607      	mov	r7, r0
 801f5a4:	1c78      	adds	r0, r7, #1
 801f5a6:	d1d6      	bne.n	801f556 <_vfiprintf_r+0x19e>
 801f5a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f5aa:	07d9      	lsls	r1, r3, #31
 801f5ac:	d405      	bmi.n	801f5ba <_vfiprintf_r+0x202>
 801f5ae:	89ab      	ldrh	r3, [r5, #12]
 801f5b0:	059a      	lsls	r2, r3, #22
 801f5b2:	d402      	bmi.n	801f5ba <_vfiprintf_r+0x202>
 801f5b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f5b6:	f7ff fa91 	bl	801eadc <__retarget_lock_release_recursive>
 801f5ba:	89ab      	ldrh	r3, [r5, #12]
 801f5bc:	065b      	lsls	r3, r3, #25
 801f5be:	f53f af1d 	bmi.w	801f3fc <_vfiprintf_r+0x44>
 801f5c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f5c4:	e71c      	b.n	801f400 <_vfiprintf_r+0x48>
 801f5c6:	ab03      	add	r3, sp, #12
 801f5c8:	9300      	str	r3, [sp, #0]
 801f5ca:	462a      	mov	r2, r5
 801f5cc:	4b05      	ldr	r3, [pc, #20]	; (801f5e4 <_vfiprintf_r+0x22c>)
 801f5ce:	a904      	add	r1, sp, #16
 801f5d0:	4630      	mov	r0, r6
 801f5d2:	f7ff fcdf 	bl	801ef94 <_printf_i>
 801f5d6:	e7e4      	b.n	801f5a2 <_vfiprintf_r+0x1ea>
 801f5d8:	08021d34 	.word	0x08021d34
 801f5dc:	08021d3e 	.word	0x08021d3e
 801f5e0:	00000000 	.word	0x00000000
 801f5e4:	0801f395 	.word	0x0801f395
 801f5e8:	08021d3a 	.word	0x08021d3a

0801f5ec <__swbuf_r>:
 801f5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f5ee:	460e      	mov	r6, r1
 801f5f0:	4614      	mov	r4, r2
 801f5f2:	4605      	mov	r5, r0
 801f5f4:	b118      	cbz	r0, 801f5fe <__swbuf_r+0x12>
 801f5f6:	6a03      	ldr	r3, [r0, #32]
 801f5f8:	b90b      	cbnz	r3, 801f5fe <__swbuf_r+0x12>
 801f5fa:	f7ff f837 	bl	801e66c <__sinit>
 801f5fe:	69a3      	ldr	r3, [r4, #24]
 801f600:	60a3      	str	r3, [r4, #8]
 801f602:	89a3      	ldrh	r3, [r4, #12]
 801f604:	071a      	lsls	r2, r3, #28
 801f606:	d525      	bpl.n	801f654 <__swbuf_r+0x68>
 801f608:	6923      	ldr	r3, [r4, #16]
 801f60a:	b31b      	cbz	r3, 801f654 <__swbuf_r+0x68>
 801f60c:	6823      	ldr	r3, [r4, #0]
 801f60e:	6922      	ldr	r2, [r4, #16]
 801f610:	1a98      	subs	r0, r3, r2
 801f612:	6963      	ldr	r3, [r4, #20]
 801f614:	b2f6      	uxtb	r6, r6
 801f616:	4283      	cmp	r3, r0
 801f618:	4637      	mov	r7, r6
 801f61a:	dc04      	bgt.n	801f626 <__swbuf_r+0x3a>
 801f61c:	4621      	mov	r1, r4
 801f61e:	4628      	mov	r0, r5
 801f620:	f7ff fe60 	bl	801f2e4 <_fflush_r>
 801f624:	b9e0      	cbnz	r0, 801f660 <__swbuf_r+0x74>
 801f626:	68a3      	ldr	r3, [r4, #8]
 801f628:	3b01      	subs	r3, #1
 801f62a:	60a3      	str	r3, [r4, #8]
 801f62c:	6823      	ldr	r3, [r4, #0]
 801f62e:	1c5a      	adds	r2, r3, #1
 801f630:	6022      	str	r2, [r4, #0]
 801f632:	701e      	strb	r6, [r3, #0]
 801f634:	6962      	ldr	r2, [r4, #20]
 801f636:	1c43      	adds	r3, r0, #1
 801f638:	429a      	cmp	r2, r3
 801f63a:	d004      	beq.n	801f646 <__swbuf_r+0x5a>
 801f63c:	89a3      	ldrh	r3, [r4, #12]
 801f63e:	07db      	lsls	r3, r3, #31
 801f640:	d506      	bpl.n	801f650 <__swbuf_r+0x64>
 801f642:	2e0a      	cmp	r6, #10
 801f644:	d104      	bne.n	801f650 <__swbuf_r+0x64>
 801f646:	4621      	mov	r1, r4
 801f648:	4628      	mov	r0, r5
 801f64a:	f7ff fe4b 	bl	801f2e4 <_fflush_r>
 801f64e:	b938      	cbnz	r0, 801f660 <__swbuf_r+0x74>
 801f650:	4638      	mov	r0, r7
 801f652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f654:	4621      	mov	r1, r4
 801f656:	4628      	mov	r0, r5
 801f658:	f000 f806 	bl	801f668 <__swsetup_r>
 801f65c:	2800      	cmp	r0, #0
 801f65e:	d0d5      	beq.n	801f60c <__swbuf_r+0x20>
 801f660:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801f664:	e7f4      	b.n	801f650 <__swbuf_r+0x64>
	...

0801f668 <__swsetup_r>:
 801f668:	b538      	push	{r3, r4, r5, lr}
 801f66a:	4b2a      	ldr	r3, [pc, #168]	; (801f714 <__swsetup_r+0xac>)
 801f66c:	4605      	mov	r5, r0
 801f66e:	6818      	ldr	r0, [r3, #0]
 801f670:	460c      	mov	r4, r1
 801f672:	b118      	cbz	r0, 801f67c <__swsetup_r+0x14>
 801f674:	6a03      	ldr	r3, [r0, #32]
 801f676:	b90b      	cbnz	r3, 801f67c <__swsetup_r+0x14>
 801f678:	f7fe fff8 	bl	801e66c <__sinit>
 801f67c:	89a3      	ldrh	r3, [r4, #12]
 801f67e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f682:	0718      	lsls	r0, r3, #28
 801f684:	d422      	bmi.n	801f6cc <__swsetup_r+0x64>
 801f686:	06d9      	lsls	r1, r3, #27
 801f688:	d407      	bmi.n	801f69a <__swsetup_r+0x32>
 801f68a:	2309      	movs	r3, #9
 801f68c:	602b      	str	r3, [r5, #0]
 801f68e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801f692:	81a3      	strh	r3, [r4, #12]
 801f694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f698:	e034      	b.n	801f704 <__swsetup_r+0x9c>
 801f69a:	0758      	lsls	r0, r3, #29
 801f69c:	d512      	bpl.n	801f6c4 <__swsetup_r+0x5c>
 801f69e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f6a0:	b141      	cbz	r1, 801f6b4 <__swsetup_r+0x4c>
 801f6a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f6a6:	4299      	cmp	r1, r3
 801f6a8:	d002      	beq.n	801f6b0 <__swsetup_r+0x48>
 801f6aa:	4628      	mov	r0, r5
 801f6ac:	f7ff fa58 	bl	801eb60 <_free_r>
 801f6b0:	2300      	movs	r3, #0
 801f6b2:	6363      	str	r3, [r4, #52]	; 0x34
 801f6b4:	89a3      	ldrh	r3, [r4, #12]
 801f6b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801f6ba:	81a3      	strh	r3, [r4, #12]
 801f6bc:	2300      	movs	r3, #0
 801f6be:	6063      	str	r3, [r4, #4]
 801f6c0:	6923      	ldr	r3, [r4, #16]
 801f6c2:	6023      	str	r3, [r4, #0]
 801f6c4:	89a3      	ldrh	r3, [r4, #12]
 801f6c6:	f043 0308 	orr.w	r3, r3, #8
 801f6ca:	81a3      	strh	r3, [r4, #12]
 801f6cc:	6923      	ldr	r3, [r4, #16]
 801f6ce:	b94b      	cbnz	r3, 801f6e4 <__swsetup_r+0x7c>
 801f6d0:	89a3      	ldrh	r3, [r4, #12]
 801f6d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801f6d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f6da:	d003      	beq.n	801f6e4 <__swsetup_r+0x7c>
 801f6dc:	4621      	mov	r1, r4
 801f6de:	4628      	mov	r0, r5
 801f6e0:	f000 f884 	bl	801f7ec <__smakebuf_r>
 801f6e4:	89a0      	ldrh	r0, [r4, #12]
 801f6e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f6ea:	f010 0301 	ands.w	r3, r0, #1
 801f6ee:	d00a      	beq.n	801f706 <__swsetup_r+0x9e>
 801f6f0:	2300      	movs	r3, #0
 801f6f2:	60a3      	str	r3, [r4, #8]
 801f6f4:	6963      	ldr	r3, [r4, #20]
 801f6f6:	425b      	negs	r3, r3
 801f6f8:	61a3      	str	r3, [r4, #24]
 801f6fa:	6923      	ldr	r3, [r4, #16]
 801f6fc:	b943      	cbnz	r3, 801f710 <__swsetup_r+0xa8>
 801f6fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801f702:	d1c4      	bne.n	801f68e <__swsetup_r+0x26>
 801f704:	bd38      	pop	{r3, r4, r5, pc}
 801f706:	0781      	lsls	r1, r0, #30
 801f708:	bf58      	it	pl
 801f70a:	6963      	ldrpl	r3, [r4, #20]
 801f70c:	60a3      	str	r3, [r4, #8]
 801f70e:	e7f4      	b.n	801f6fa <__swsetup_r+0x92>
 801f710:	2000      	movs	r0, #0
 801f712:	e7f7      	b.n	801f704 <__swsetup_r+0x9c>
 801f714:	20002338 	.word	0x20002338

0801f718 <_raise_r>:
 801f718:	291f      	cmp	r1, #31
 801f71a:	b538      	push	{r3, r4, r5, lr}
 801f71c:	4604      	mov	r4, r0
 801f71e:	460d      	mov	r5, r1
 801f720:	d904      	bls.n	801f72c <_raise_r+0x14>
 801f722:	2316      	movs	r3, #22
 801f724:	6003      	str	r3, [r0, #0]
 801f726:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f72a:	bd38      	pop	{r3, r4, r5, pc}
 801f72c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801f72e:	b112      	cbz	r2, 801f736 <_raise_r+0x1e>
 801f730:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f734:	b94b      	cbnz	r3, 801f74a <_raise_r+0x32>
 801f736:	4620      	mov	r0, r4
 801f738:	f000 f830 	bl	801f79c <_getpid_r>
 801f73c:	462a      	mov	r2, r5
 801f73e:	4601      	mov	r1, r0
 801f740:	4620      	mov	r0, r4
 801f742:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f746:	f000 b817 	b.w	801f778 <_kill_r>
 801f74a:	2b01      	cmp	r3, #1
 801f74c:	d00a      	beq.n	801f764 <_raise_r+0x4c>
 801f74e:	1c59      	adds	r1, r3, #1
 801f750:	d103      	bne.n	801f75a <_raise_r+0x42>
 801f752:	2316      	movs	r3, #22
 801f754:	6003      	str	r3, [r0, #0]
 801f756:	2001      	movs	r0, #1
 801f758:	e7e7      	b.n	801f72a <_raise_r+0x12>
 801f75a:	2400      	movs	r4, #0
 801f75c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801f760:	4628      	mov	r0, r5
 801f762:	4798      	blx	r3
 801f764:	2000      	movs	r0, #0
 801f766:	e7e0      	b.n	801f72a <_raise_r+0x12>

0801f768 <raise>:
 801f768:	4b02      	ldr	r3, [pc, #8]	; (801f774 <raise+0xc>)
 801f76a:	4601      	mov	r1, r0
 801f76c:	6818      	ldr	r0, [r3, #0]
 801f76e:	f7ff bfd3 	b.w	801f718 <_raise_r>
 801f772:	bf00      	nop
 801f774:	20002338 	.word	0x20002338

0801f778 <_kill_r>:
 801f778:	b538      	push	{r3, r4, r5, lr}
 801f77a:	4d07      	ldr	r5, [pc, #28]	; (801f798 <_kill_r+0x20>)
 801f77c:	2300      	movs	r3, #0
 801f77e:	4604      	mov	r4, r0
 801f780:	4608      	mov	r0, r1
 801f782:	4611      	mov	r1, r2
 801f784:	602b      	str	r3, [r5, #0]
 801f786:	f7e4 f80f 	bl	80037a8 <_kill>
 801f78a:	1c43      	adds	r3, r0, #1
 801f78c:	d102      	bne.n	801f794 <_kill_r+0x1c>
 801f78e:	682b      	ldr	r3, [r5, #0]
 801f790:	b103      	cbz	r3, 801f794 <_kill_r+0x1c>
 801f792:	6023      	str	r3, [r4, #0]
 801f794:	bd38      	pop	{r3, r4, r5, pc}
 801f796:	bf00      	nop
 801f798:	20011edc 	.word	0x20011edc

0801f79c <_getpid_r>:
 801f79c:	f7e3 bffc 	b.w	8003798 <_getpid>

0801f7a0 <__swhatbuf_r>:
 801f7a0:	b570      	push	{r4, r5, r6, lr}
 801f7a2:	460c      	mov	r4, r1
 801f7a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f7a8:	2900      	cmp	r1, #0
 801f7aa:	b096      	sub	sp, #88	; 0x58
 801f7ac:	4615      	mov	r5, r2
 801f7ae:	461e      	mov	r6, r3
 801f7b0:	da0d      	bge.n	801f7ce <__swhatbuf_r+0x2e>
 801f7b2:	89a3      	ldrh	r3, [r4, #12]
 801f7b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 801f7b8:	f04f 0100 	mov.w	r1, #0
 801f7bc:	bf0c      	ite	eq
 801f7be:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801f7c2:	2340      	movne	r3, #64	; 0x40
 801f7c4:	2000      	movs	r0, #0
 801f7c6:	6031      	str	r1, [r6, #0]
 801f7c8:	602b      	str	r3, [r5, #0]
 801f7ca:	b016      	add	sp, #88	; 0x58
 801f7cc:	bd70      	pop	{r4, r5, r6, pc}
 801f7ce:	466a      	mov	r2, sp
 801f7d0:	f000 f848 	bl	801f864 <_fstat_r>
 801f7d4:	2800      	cmp	r0, #0
 801f7d6:	dbec      	blt.n	801f7b2 <__swhatbuf_r+0x12>
 801f7d8:	9901      	ldr	r1, [sp, #4]
 801f7da:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801f7de:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801f7e2:	4259      	negs	r1, r3
 801f7e4:	4159      	adcs	r1, r3
 801f7e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f7ea:	e7eb      	b.n	801f7c4 <__swhatbuf_r+0x24>

0801f7ec <__smakebuf_r>:
 801f7ec:	898b      	ldrh	r3, [r1, #12]
 801f7ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f7f0:	079d      	lsls	r5, r3, #30
 801f7f2:	4606      	mov	r6, r0
 801f7f4:	460c      	mov	r4, r1
 801f7f6:	d507      	bpl.n	801f808 <__smakebuf_r+0x1c>
 801f7f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801f7fc:	6023      	str	r3, [r4, #0]
 801f7fe:	6123      	str	r3, [r4, #16]
 801f800:	2301      	movs	r3, #1
 801f802:	6163      	str	r3, [r4, #20]
 801f804:	b002      	add	sp, #8
 801f806:	bd70      	pop	{r4, r5, r6, pc}
 801f808:	ab01      	add	r3, sp, #4
 801f80a:	466a      	mov	r2, sp
 801f80c:	f7ff ffc8 	bl	801f7a0 <__swhatbuf_r>
 801f810:	9900      	ldr	r1, [sp, #0]
 801f812:	4605      	mov	r5, r0
 801f814:	4630      	mov	r0, r6
 801f816:	f7fe fcf1 	bl	801e1fc <_malloc_r>
 801f81a:	b948      	cbnz	r0, 801f830 <__smakebuf_r+0x44>
 801f81c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f820:	059a      	lsls	r2, r3, #22
 801f822:	d4ef      	bmi.n	801f804 <__smakebuf_r+0x18>
 801f824:	f023 0303 	bic.w	r3, r3, #3
 801f828:	f043 0302 	orr.w	r3, r3, #2
 801f82c:	81a3      	strh	r3, [r4, #12]
 801f82e:	e7e3      	b.n	801f7f8 <__smakebuf_r+0xc>
 801f830:	89a3      	ldrh	r3, [r4, #12]
 801f832:	6020      	str	r0, [r4, #0]
 801f834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f838:	81a3      	strh	r3, [r4, #12]
 801f83a:	9b00      	ldr	r3, [sp, #0]
 801f83c:	6163      	str	r3, [r4, #20]
 801f83e:	9b01      	ldr	r3, [sp, #4]
 801f840:	6120      	str	r0, [r4, #16]
 801f842:	b15b      	cbz	r3, 801f85c <__smakebuf_r+0x70>
 801f844:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f848:	4630      	mov	r0, r6
 801f84a:	f000 f81d 	bl	801f888 <_isatty_r>
 801f84e:	b128      	cbz	r0, 801f85c <__smakebuf_r+0x70>
 801f850:	89a3      	ldrh	r3, [r4, #12]
 801f852:	f023 0303 	bic.w	r3, r3, #3
 801f856:	f043 0301 	orr.w	r3, r3, #1
 801f85a:	81a3      	strh	r3, [r4, #12]
 801f85c:	89a3      	ldrh	r3, [r4, #12]
 801f85e:	431d      	orrs	r5, r3
 801f860:	81a5      	strh	r5, [r4, #12]
 801f862:	e7cf      	b.n	801f804 <__smakebuf_r+0x18>

0801f864 <_fstat_r>:
 801f864:	b538      	push	{r3, r4, r5, lr}
 801f866:	4d07      	ldr	r5, [pc, #28]	; (801f884 <_fstat_r+0x20>)
 801f868:	2300      	movs	r3, #0
 801f86a:	4604      	mov	r4, r0
 801f86c:	4608      	mov	r0, r1
 801f86e:	4611      	mov	r1, r2
 801f870:	602b      	str	r3, [r5, #0]
 801f872:	f7e3 fff8 	bl	8003866 <_fstat>
 801f876:	1c43      	adds	r3, r0, #1
 801f878:	d102      	bne.n	801f880 <_fstat_r+0x1c>
 801f87a:	682b      	ldr	r3, [r5, #0]
 801f87c:	b103      	cbz	r3, 801f880 <_fstat_r+0x1c>
 801f87e:	6023      	str	r3, [r4, #0]
 801f880:	bd38      	pop	{r3, r4, r5, pc}
 801f882:	bf00      	nop
 801f884:	20011edc 	.word	0x20011edc

0801f888 <_isatty_r>:
 801f888:	b538      	push	{r3, r4, r5, lr}
 801f88a:	4d06      	ldr	r5, [pc, #24]	; (801f8a4 <_isatty_r+0x1c>)
 801f88c:	2300      	movs	r3, #0
 801f88e:	4604      	mov	r4, r0
 801f890:	4608      	mov	r0, r1
 801f892:	602b      	str	r3, [r5, #0]
 801f894:	f7e3 fff7 	bl	8003886 <_isatty>
 801f898:	1c43      	adds	r3, r0, #1
 801f89a:	d102      	bne.n	801f8a2 <_isatty_r+0x1a>
 801f89c:	682b      	ldr	r3, [r5, #0]
 801f89e:	b103      	cbz	r3, 801f8a2 <_isatty_r+0x1a>
 801f8a0:	6023      	str	r3, [r4, #0]
 801f8a2:	bd38      	pop	{r3, r4, r5, pc}
 801f8a4:	20011edc 	.word	0x20011edc

0801f8a8 <_init>:
 801f8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f8aa:	bf00      	nop
 801f8ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f8ae:	bc08      	pop	{r3}
 801f8b0:	469e      	mov	lr, r3
 801f8b2:	4770      	bx	lr

0801f8b4 <_fini>:
 801f8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f8b6:	bf00      	nop
 801f8b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f8ba:	bc08      	pop	{r3}
 801f8bc:	469e      	mov	lr, r3
 801f8be:	4770      	bx	lr
