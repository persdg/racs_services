
scorbot_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a3fc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a84  0801a600  0801a600  0002a600  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c084  0801c084  0003213c  2**0
                  CONTENTS
  4 .ARM          00000008  0801c084  0801c084  0002c084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c08c  0801c08c  0003213c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0801c08c  0801c08c  0002c08c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c09c  0801c09c  0002c09c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000213c  20000000  0801c0a0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e9f0  20002140  0801e1dc  00032140  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20010b30  0801e1dc  00040b30  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003213c  2**0
                  CONTENTS, READONLY
 12 .comment      00000076  00000000  00000000  0003216a  2**0
                  CONTENTS, READONLY
 13 .debug_info   000334fd  00000000  00000000  000321e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006697  00000000  00000000  000656dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d58  00000000  00000000  0006bd78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000168e  00000000  00000000  0006dad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003249f  00000000  00000000  0006f15e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a87b  00000000  00000000  000a15fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00121579  00000000  00000000  000cbe78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008734  00000000  00000000  001ed3f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001f5b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20002140 	.word	0x20002140
 800021c:	00000000 	.word	0x00000000
 8000220:	0801a5e4 	.word	0x0801a5e4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20002144 	.word	0x20002144
 800023c:	0801a5e4 	.word	0x0801a5e4

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr
	...

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800032e:	f000 b9bb 	b.w	80006a8 <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003c4:	f000 b970 	b.w	80006a8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9e08      	ldr	r6, [sp, #32]
 80003e6:	460d      	mov	r5, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	460f      	mov	r7, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4694      	mov	ip, r2
 80003f4:	d965      	bls.n	80004c2 <__udivmoddi4+0xe2>
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	b143      	cbz	r3, 800040e <__udivmoddi4+0x2e>
 80003fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000400:	f1c3 0220 	rsb	r2, r3, #32
 8000404:	409f      	lsls	r7, r3
 8000406:	fa20 f202 	lsr.w	r2, r0, r2
 800040a:	4317      	orrs	r7, r2
 800040c:	409c      	lsls	r4, r3
 800040e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000412:	fa1f f58c 	uxth.w	r5, ip
 8000416:	fbb7 f1fe 	udiv	r1, r7, lr
 800041a:	0c22      	lsrs	r2, r4, #16
 800041c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000420:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000424:	fb01 f005 	mul.w	r0, r1, r5
 8000428:	4290      	cmp	r0, r2
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x62>
 800042c:	eb1c 0202 	adds.w	r2, ip, r2
 8000430:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000434:	f080 811c 	bcs.w	8000670 <__udivmoddi4+0x290>
 8000438:	4290      	cmp	r0, r2
 800043a:	f240 8119 	bls.w	8000670 <__udivmoddi4+0x290>
 800043e:	3902      	subs	r1, #2
 8000440:	4462      	add	r2, ip
 8000442:	1a12      	subs	r2, r2, r0
 8000444:	b2a4      	uxth	r4, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000452:	fb00 f505 	mul.w	r5, r0, r5
 8000456:	42a5      	cmp	r5, r4
 8000458:	d90a      	bls.n	8000470 <__udivmoddi4+0x90>
 800045a:	eb1c 0404 	adds.w	r4, ip, r4
 800045e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000462:	f080 8107 	bcs.w	8000674 <__udivmoddi4+0x294>
 8000466:	42a5      	cmp	r5, r4
 8000468:	f240 8104 	bls.w	8000674 <__udivmoddi4+0x294>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000474:	1b64      	subs	r4, r4, r5
 8000476:	2100      	movs	r1, #0
 8000478:	b11e      	cbz	r6, 8000482 <__udivmoddi4+0xa2>
 800047a:	40dc      	lsrs	r4, r3
 800047c:	2300      	movs	r3, #0
 800047e:	e9c6 4300 	strd	r4, r3, [r6]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0xbc>
 800048a:	2e00      	cmp	r6, #0
 800048c:	f000 80ed 	beq.w	800066a <__udivmoddi4+0x28a>
 8000490:	2100      	movs	r1, #0
 8000492:	e9c6 0500 	strd	r0, r5, [r6]
 8000496:	4608      	mov	r0, r1
 8000498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049c:	fab3 f183 	clz	r1, r3
 80004a0:	2900      	cmp	r1, #0
 80004a2:	d149      	bne.n	8000538 <__udivmoddi4+0x158>
 80004a4:	42ab      	cmp	r3, r5
 80004a6:	d302      	bcc.n	80004ae <__udivmoddi4+0xce>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	f200 80f8 	bhi.w	800069e <__udivmoddi4+0x2be>
 80004ae:	1a84      	subs	r4, r0, r2
 80004b0:	eb65 0203 	sbc.w	r2, r5, r3
 80004b4:	2001      	movs	r0, #1
 80004b6:	4617      	mov	r7, r2
 80004b8:	2e00      	cmp	r6, #0
 80004ba:	d0e2      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	e9c6 4700 	strd	r4, r7, [r6]
 80004c0:	e7df      	b.n	8000482 <__udivmoddi4+0xa2>
 80004c2:	b902      	cbnz	r2, 80004c6 <__udivmoddi4+0xe6>
 80004c4:	deff      	udf	#255	; 0xff
 80004c6:	fab2 f382 	clz	r3, r2
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	f040 8090 	bne.w	80005f0 <__udivmoddi4+0x210>
 80004d0:	1a8a      	subs	r2, r1, r2
 80004d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d6:	fa1f fe8c 	uxth.w	lr, ip
 80004da:	2101      	movs	r1, #1
 80004dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004e0:	fb07 2015 	mls	r0, r7, r5, r2
 80004e4:	0c22      	lsrs	r2, r4, #16
 80004e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ea:	fb0e f005 	mul.w	r0, lr, r5
 80004ee:	4290      	cmp	r0, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x124>
 80004f2:	eb1c 0202 	adds.w	r2, ip, r2
 80004f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x122>
 80004fc:	4290      	cmp	r0, r2
 80004fe:	f200 80cb 	bhi.w	8000698 <__udivmoddi4+0x2b8>
 8000502:	4645      	mov	r5, r8
 8000504:	1a12      	subs	r2, r2, r0
 8000506:	b2a4      	uxth	r4, r4
 8000508:	fbb2 f0f7 	udiv	r0, r2, r7
 800050c:	fb07 2210 	mls	r2, r7, r0, r2
 8000510:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000514:	fb0e fe00 	mul.w	lr, lr, r0
 8000518:	45a6      	cmp	lr, r4
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x14e>
 800051c:	eb1c 0404 	adds.w	r4, ip, r4
 8000520:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x14c>
 8000526:	45a6      	cmp	lr, r4
 8000528:	f200 80bb 	bhi.w	80006a2 <__udivmoddi4+0x2c2>
 800052c:	4610      	mov	r0, r2
 800052e:	eba4 040e 	sub.w	r4, r4, lr
 8000532:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000536:	e79f      	b.n	8000478 <__udivmoddi4+0x98>
 8000538:	f1c1 0720 	rsb	r7, r1, #32
 800053c:	408b      	lsls	r3, r1
 800053e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000542:	ea4c 0c03 	orr.w	ip, ip, r3
 8000546:	fa05 f401 	lsl.w	r4, r5, r1
 800054a:	fa20 f307 	lsr.w	r3, r0, r7
 800054e:	40fd      	lsrs	r5, r7
 8000550:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000554:	4323      	orrs	r3, r4
 8000556:	fbb5 f8f9 	udiv	r8, r5, r9
 800055a:	fa1f fe8c 	uxth.w	lr, ip
 800055e:	fb09 5518 	mls	r5, r9, r8, r5
 8000562:	0c1c      	lsrs	r4, r3, #16
 8000564:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000568:	fb08 f50e 	mul.w	r5, r8, lr
 800056c:	42a5      	cmp	r5, r4
 800056e:	fa02 f201 	lsl.w	r2, r2, r1
 8000572:	fa00 f001 	lsl.w	r0, r0, r1
 8000576:	d90b      	bls.n	8000590 <__udivmoddi4+0x1b0>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000580:	f080 8088 	bcs.w	8000694 <__udivmoddi4+0x2b4>
 8000584:	42a5      	cmp	r5, r4
 8000586:	f240 8085 	bls.w	8000694 <__udivmoddi4+0x2b4>
 800058a:	f1a8 0802 	sub.w	r8, r8, #2
 800058e:	4464      	add	r4, ip
 8000590:	1b64      	subs	r4, r4, r5
 8000592:	b29d      	uxth	r5, r3
 8000594:	fbb4 f3f9 	udiv	r3, r4, r9
 8000598:	fb09 4413 	mls	r4, r9, r3, r4
 800059c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005a4:	45a6      	cmp	lr, r4
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x1da>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80005b0:	d26c      	bcs.n	800068c <__udivmoddi4+0x2ac>
 80005b2:	45a6      	cmp	lr, r4
 80005b4:	d96a      	bls.n	800068c <__udivmoddi4+0x2ac>
 80005b6:	3b02      	subs	r3, #2
 80005b8:	4464      	add	r4, ip
 80005ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005be:	fba3 9502 	umull	r9, r5, r3, r2
 80005c2:	eba4 040e 	sub.w	r4, r4, lr
 80005c6:	42ac      	cmp	r4, r5
 80005c8:	46c8      	mov	r8, r9
 80005ca:	46ae      	mov	lr, r5
 80005cc:	d356      	bcc.n	800067c <__udivmoddi4+0x29c>
 80005ce:	d053      	beq.n	8000678 <__udivmoddi4+0x298>
 80005d0:	b156      	cbz	r6, 80005e8 <__udivmoddi4+0x208>
 80005d2:	ebb0 0208 	subs.w	r2, r0, r8
 80005d6:	eb64 040e 	sbc.w	r4, r4, lr
 80005da:	fa04 f707 	lsl.w	r7, r4, r7
 80005de:	40ca      	lsrs	r2, r1
 80005e0:	40cc      	lsrs	r4, r1
 80005e2:	4317      	orrs	r7, r2
 80005e4:	e9c6 7400 	strd	r7, r4, [r6]
 80005e8:	4618      	mov	r0, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005f0:	f1c3 0120 	rsb	r1, r3, #32
 80005f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005f8:	fa20 f201 	lsr.w	r2, r0, r1
 80005fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000600:	409d      	lsls	r5, r3
 8000602:	432a      	orrs	r2, r5
 8000604:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000608:	fa1f fe8c 	uxth.w	lr, ip
 800060c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000610:	fb07 1510 	mls	r5, r7, r0, r1
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800061a:	fb00 f50e 	mul.w	r5, r0, lr
 800061e:	428d      	cmp	r5, r1
 8000620:	fa04 f403 	lsl.w	r4, r4, r3
 8000624:	d908      	bls.n	8000638 <__udivmoddi4+0x258>
 8000626:	eb1c 0101 	adds.w	r1, ip, r1
 800062a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800062e:	d22f      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000630:	428d      	cmp	r5, r1
 8000632:	d92d      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000634:	3802      	subs	r0, #2
 8000636:	4461      	add	r1, ip
 8000638:	1b49      	subs	r1, r1, r5
 800063a:	b292      	uxth	r2, r2
 800063c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000640:	fb07 1115 	mls	r1, r7, r5, r1
 8000644:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000648:	fb05 f10e 	mul.w	r1, r5, lr
 800064c:	4291      	cmp	r1, r2
 800064e:	d908      	bls.n	8000662 <__udivmoddi4+0x282>
 8000650:	eb1c 0202 	adds.w	r2, ip, r2
 8000654:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000658:	d216      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 800065a:	4291      	cmp	r1, r2
 800065c:	d914      	bls.n	8000688 <__udivmoddi4+0x2a8>
 800065e:	3d02      	subs	r5, #2
 8000660:	4462      	add	r2, ip
 8000662:	1a52      	subs	r2, r2, r1
 8000664:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000668:	e738      	b.n	80004dc <__udivmoddi4+0xfc>
 800066a:	4631      	mov	r1, r6
 800066c:	4630      	mov	r0, r6
 800066e:	e708      	b.n	8000482 <__udivmoddi4+0xa2>
 8000670:	4639      	mov	r1, r7
 8000672:	e6e6      	b.n	8000442 <__udivmoddi4+0x62>
 8000674:	4610      	mov	r0, r2
 8000676:	e6fb      	b.n	8000470 <__udivmoddi4+0x90>
 8000678:	4548      	cmp	r0, r9
 800067a:	d2a9      	bcs.n	80005d0 <__udivmoddi4+0x1f0>
 800067c:	ebb9 0802 	subs.w	r8, r9, r2
 8000680:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000684:	3b01      	subs	r3, #1
 8000686:	e7a3      	b.n	80005d0 <__udivmoddi4+0x1f0>
 8000688:	4645      	mov	r5, r8
 800068a:	e7ea      	b.n	8000662 <__udivmoddi4+0x282>
 800068c:	462b      	mov	r3, r5
 800068e:	e794      	b.n	80005ba <__udivmoddi4+0x1da>
 8000690:	4640      	mov	r0, r8
 8000692:	e7d1      	b.n	8000638 <__udivmoddi4+0x258>
 8000694:	46d0      	mov	r8, sl
 8000696:	e77b      	b.n	8000590 <__udivmoddi4+0x1b0>
 8000698:	3d02      	subs	r5, #2
 800069a:	4462      	add	r2, ip
 800069c:	e732      	b.n	8000504 <__udivmoddi4+0x124>
 800069e:	4608      	mov	r0, r1
 80006a0:	e70a      	b.n	80004b8 <__udivmoddi4+0xd8>
 80006a2:	4464      	add	r4, ip
 80006a4:	3802      	subs	r0, #2
 80006a6:	e742      	b.n	800052e <__udivmoddi4+0x14e>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <_ZN10PinControlC1Ev>:
// ==================================================
// ==================================================
// PinControl
// ==================================================

PinControl::PinControl() {
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]

}
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4618      	mov	r0, r3
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr

080006c2 <_ZN10PinMeasureC1Ev>:

// ==================================================
// PinMeasure
// ==================================================

PinMeasure::PinMeasure() {
 80006c2:	b480      	push	{r7}
 80006c4:	b083      	sub	sp, #12
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	6078      	str	r0, [r7, #4]

}
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4618      	mov	r0, r3
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08a      	sub	sp, #40	; 0x28
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80006e4:	f008 fa2e 	bl	8008b44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80006e8:	4b5b      	ldr	r3, [pc, #364]	; (8000858 <pvPortMallocMicroROS+0x180>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d101      	bne.n	80006f4 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80006f0:	f000 f98a 	bl	8000a08 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80006f4:	4b59      	ldr	r3, [pc, #356]	; (800085c <pvPortMallocMicroROS+0x184>)
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4013      	ands	r3, r2
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	f040 8092 	bne.w	8000826 <pvPortMallocMicroROS+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d01f      	beq.n	8000748 <pvPortMallocMicroROS+0x70>
			{
				xWantedSize += xHeapStructSize;
 8000708:	2208      	movs	r2, #8
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4413      	add	r3, r2
 800070e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f003 0307 	and.w	r3, r3, #7
 8000716:	2b00      	cmp	r3, #0
 8000718:	d016      	beq.n	8000748 <pvPortMallocMicroROS+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	f023 0307 	bic.w	r3, r3, #7
 8000720:	3308      	adds	r3, #8
 8000722:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f003 0307 	and.w	r3, r3, #7
 800072a:	2b00      	cmp	r3, #0
 800072c:	d00c      	beq.n	8000748 <pvPortMallocMicroROS+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800072e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000732:	b672      	cpsid	i
 8000734:	f383 8811 	msr	BASEPRI, r3
 8000738:	f3bf 8f6f 	isb	sy
 800073c:	f3bf 8f4f 	dsb	sy
 8000740:	b662      	cpsie	i
 8000742:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000744:	bf00      	nop
 8000746:	e7fe      	b.n	8000746 <pvPortMallocMicroROS+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d06b      	beq.n	8000826 <pvPortMallocMicroROS+0x14e>
 800074e:	4b44      	ldr	r3, [pc, #272]	; (8000860 <pvPortMallocMicroROS+0x188>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	429a      	cmp	r2, r3
 8000756:	d866      	bhi.n	8000826 <pvPortMallocMicroROS+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000758:	4b42      	ldr	r3, [pc, #264]	; (8000864 <pvPortMallocMicroROS+0x18c>)
 800075a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800075c:	4b41      	ldr	r3, [pc, #260]	; (8000864 <pvPortMallocMicroROS+0x18c>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000762:	e004      	b.n	800076e <pvPortMallocMicroROS+0x96>
				{
					pxPreviousBlock = pxBlock;
 8000764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000766:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800076e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000770:	685b      	ldr	r3, [r3, #4]
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	429a      	cmp	r2, r3
 8000776:	d903      	bls.n	8000780 <pvPortMallocMicroROS+0xa8>
 8000778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d1f1      	bne.n	8000764 <pvPortMallocMicroROS+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000780:	4b35      	ldr	r3, [pc, #212]	; (8000858 <pvPortMallocMicroROS+0x180>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000786:	429a      	cmp	r2, r3
 8000788:	d04d      	beq.n	8000826 <pvPortMallocMicroROS+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800078a:	6a3b      	ldr	r3, [r7, #32]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	2208      	movs	r2, #8
 8000790:	4413      	add	r3, r2
 8000792:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	6a3b      	ldr	r3, [r7, #32]
 800079a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800079c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800079e:	685a      	ldr	r2, [r3, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	1ad2      	subs	r2, r2, r3
 80007a4:	2308      	movs	r3, #8
 80007a6:	005b      	lsls	r3, r3, #1
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d921      	bls.n	80007f0 <pvPortMallocMicroROS+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80007ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4413      	add	r3, r2
 80007b2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80007b4:	69bb      	ldr	r3, [r7, #24]
 80007b6:	f003 0307 	and.w	r3, r3, #7
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d00c      	beq.n	80007d8 <pvPortMallocMicroROS+0x100>
	__asm volatile
 80007be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007c2:	b672      	cpsid	i
 80007c4:	f383 8811 	msr	BASEPRI, r3
 80007c8:	f3bf 8f6f 	isb	sy
 80007cc:	f3bf 8f4f 	dsb	sy
 80007d0:	b662      	cpsie	i
 80007d2:	613b      	str	r3, [r7, #16]
}
 80007d4:	bf00      	nop
 80007d6:	e7fe      	b.n	80007d6 <pvPortMallocMicroROS+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80007d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007da:	685a      	ldr	r2, [r3, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	1ad2      	subs	r2, r2, r3
 80007e0:	69bb      	ldr	r3, [r7, #24]
 80007e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80007e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80007ea:	69b8      	ldr	r0, [r7, #24]
 80007ec:	f000 f96e 	bl	8000acc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80007f0:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <pvPortMallocMicroROS+0x188>)
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	1ad3      	subs	r3, r2, r3
 80007fa:	4a19      	ldr	r2, [pc, #100]	; (8000860 <pvPortMallocMicroROS+0x188>)
 80007fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80007fe:	4b18      	ldr	r3, [pc, #96]	; (8000860 <pvPortMallocMicroROS+0x188>)
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	4b19      	ldr	r3, [pc, #100]	; (8000868 <pvPortMallocMicroROS+0x190>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	429a      	cmp	r2, r3
 8000808:	d203      	bcs.n	8000812 <pvPortMallocMicroROS+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800080a:	4b15      	ldr	r3, [pc, #84]	; (8000860 <pvPortMallocMicroROS+0x188>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a16      	ldr	r2, [pc, #88]	; (8000868 <pvPortMallocMicroROS+0x190>)
 8000810:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000814:	685a      	ldr	r2, [r3, #4]
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <pvPortMallocMicroROS+0x184>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	431a      	orrs	r2, r3
 800081c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800081e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000826:	f008 f99b 	bl	8008b60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	f003 0307 	and.w	r3, r3, #7
 8000830:	2b00      	cmp	r3, #0
 8000832:	d00c      	beq.n	800084e <pvPortMallocMicroROS+0x176>
	__asm volatile
 8000834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000838:	b672      	cpsid	i
 800083a:	f383 8811 	msr	BASEPRI, r3
 800083e:	f3bf 8f6f 	isb	sy
 8000842:	f3bf 8f4f 	dsb	sy
 8000846:	b662      	cpsie	i
 8000848:	60fb      	str	r3, [r7, #12]
}
 800084a:	bf00      	nop
 800084c:	e7fe      	b.n	800084c <pvPortMallocMicroROS+0x174>
	return pvReturn;
 800084e:	69fb      	ldr	r3, [r7, #28]
}
 8000850:	4618      	mov	r0, r3
 8000852:	3728      	adds	r7, #40	; 0x28
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20005d64 	.word	0x20005d64
 800085c:	20005d70 	.word	0x20005d70
 8000860:	20005d68 	.word	0x20005d68
 8000864:	20005d5c 	.word	0x20005d5c
 8000868:	20005d6c 	.word	0x20005d6c

0800086c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d04c      	beq.n	8000918 <vPortFreeMicroROS+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800087e:	2308      	movs	r3, #8
 8000880:	425b      	negs	r3, r3
 8000882:	697a      	ldr	r2, [r7, #20]
 8000884:	4413      	add	r3, r2
 8000886:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800088c:	693b      	ldr	r3, [r7, #16]
 800088e:	685a      	ldr	r2, [r3, #4]
 8000890:	4b23      	ldr	r3, [pc, #140]	; (8000920 <vPortFreeMicroROS+0xb4>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4013      	ands	r3, r2
 8000896:	2b00      	cmp	r3, #0
 8000898:	d10c      	bne.n	80008b4 <vPortFreeMicroROS+0x48>
	__asm volatile
 800089a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800089e:	b672      	cpsid	i
 80008a0:	f383 8811 	msr	BASEPRI, r3
 80008a4:	f3bf 8f6f 	isb	sy
 80008a8:	f3bf 8f4f 	dsb	sy
 80008ac:	b662      	cpsie	i
 80008ae:	60fb      	str	r3, [r7, #12]
}
 80008b0:	bf00      	nop
 80008b2:	e7fe      	b.n	80008b2 <vPortFreeMicroROS+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80008b4:	693b      	ldr	r3, [r7, #16]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d00c      	beq.n	80008d6 <vPortFreeMicroROS+0x6a>
	__asm volatile
 80008bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008c0:	b672      	cpsid	i
 80008c2:	f383 8811 	msr	BASEPRI, r3
 80008c6:	f3bf 8f6f 	isb	sy
 80008ca:	f3bf 8f4f 	dsb	sy
 80008ce:	b662      	cpsie	i
 80008d0:	60bb      	str	r3, [r7, #8]
}
 80008d2:	bf00      	nop
 80008d4:	e7fe      	b.n	80008d4 <vPortFreeMicroROS+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80008d6:	693b      	ldr	r3, [r7, #16]
 80008d8:	685a      	ldr	r2, [r3, #4]
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <vPortFreeMicroROS+0xb4>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4013      	ands	r3, r2
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d019      	beq.n	8000918 <vPortFreeMicroROS+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80008e4:	693b      	ldr	r3, [r7, #16]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d115      	bne.n	8000918 <vPortFreeMicroROS+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	685a      	ldr	r2, [r3, #4]
 80008f0:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <vPortFreeMicroROS+0xb4>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	43db      	mvns	r3, r3
 80008f6:	401a      	ands	r2, r3
 80008f8:	693b      	ldr	r3, [r7, #16]
 80008fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80008fc:	f008 f922 	bl	8008b44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000900:	693b      	ldr	r3, [r7, #16]
 8000902:	685a      	ldr	r2, [r3, #4]
 8000904:	4b07      	ldr	r3, [pc, #28]	; (8000924 <vPortFreeMicroROS+0xb8>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4413      	add	r3, r2
 800090a:	4a06      	ldr	r2, [pc, #24]	; (8000924 <vPortFreeMicroROS+0xb8>)
 800090c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800090e:	6938      	ldr	r0, [r7, #16]
 8000910:	f000 f8dc 	bl	8000acc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000914:	f008 f924 	bl	8008b60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000918:	bf00      	nop
 800091a:	3718      	adds	r7, #24
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20005d70 	.word	0x20005d70
 8000924:	20005d68 	.word	0x20005d68

08000928 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000928:	b480      	push	{r7}
 800092a:	b087      	sub	sp, #28
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000934:	2308      	movs	r3, #8
 8000936:	425b      	negs	r3, r3
 8000938:	697a      	ldr	r2, [r7, #20]
 800093a:	4413      	add	r3, r2
 800093c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	685a      	ldr	r2, [r3, #4]
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <getBlockSize+0x38>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	43db      	mvns	r3, r3
 800094c:	4013      	ands	r3, r2
 800094e:	60fb      	str	r3, [r7, #12]

	return count;
 8000950:	68fb      	ldr	r3, [r7, #12]
}
 8000952:	4618      	mov	r0, r3
 8000954:	371c      	adds	r7, #28
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	20005d70 	.word	0x20005d70

08000964 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800096e:	f008 f8e9 	bl	8008b44 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000972:	6838      	ldr	r0, [r7, #0]
 8000974:	f7ff feb0 	bl	80006d8 <pvPortMallocMicroROS>
 8000978:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d017      	beq.n	80009b0 <pvPortReallocMicroROS+0x4c>
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d014      	beq.n	80009b0 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f7ff ffce 	bl	8000928 <getBlockSize>
 800098c:	4603      	mov	r3, r0
 800098e:	2208      	movs	r2, #8
 8000990:	1a9b      	subs	r3, r3, r2
 8000992:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000994:	683a      	ldr	r2, [r7, #0]
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	429a      	cmp	r2, r3
 800099a:	d201      	bcs.n	80009a0 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80009a0:	68fa      	ldr	r2, [r7, #12]
 80009a2:	6879      	ldr	r1, [r7, #4]
 80009a4:	68b8      	ldr	r0, [r7, #8]
 80009a6:	f018 ff8a 	bl	80198be <memcpy>

		vPortFreeMicroROS(pv);
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff ff5e 	bl	800086c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80009b0:	f008 f8d6 	bl	8008b60 <xTaskResumeAll>

	return newmem;
 80009b4:	68bb      	ldr	r3, [r7, #8]
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3710      	adds	r7, #16
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b086      	sub	sp, #24
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
 80009c6:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80009c8:	f008 f8bc 	bl	8008b44 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	fb02 f303 	mul.w	r3, r2, r3
 80009d4:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80009d6:	6978      	ldr	r0, [r7, #20]
 80009d8:	f7ff fe7e 	bl	80006d8 <pvPortMallocMicroROS>
 80009dc:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	613b      	str	r3, [r7, #16]

  	while(count--)
 80009e2:	e004      	b.n	80009ee <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80009e4:	693b      	ldr	r3, [r7, #16]
 80009e6:	1c5a      	adds	r2, r3, #1
 80009e8:	613a      	str	r2, [r7, #16]
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	1e5a      	subs	r2, r3, #1
 80009f2:	617a      	str	r2, [r7, #20]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d1f5      	bne.n	80009e4 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80009f8:	f008 f8b2 	bl	8008b60 <xTaskResumeAll>
  	return mem;
 80009fc:	68fb      	ldr	r3, [r7, #12]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3718      	adds	r7, #24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000a0e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000a12:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000a14:	4b27      	ldr	r3, [pc, #156]	; (8000ab4 <prvHeapInit+0xac>)
 8000a16:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	f003 0307 	and.w	r3, r3, #7
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d00c      	beq.n	8000a3c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	3307      	adds	r3, #7
 8000a26:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	f023 0307 	bic.w	r3, r3, #7
 8000a2e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000a30:	68ba      	ldr	r2, [r7, #8]
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	4a1f      	ldr	r2, [pc, #124]	; (8000ab4 <prvHeapInit+0xac>)
 8000a38:	4413      	add	r3, r2
 8000a3a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000a40:	4a1d      	ldr	r2, [pc, #116]	; (8000ab8 <prvHeapInit+0xb0>)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000a46:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <prvHeapInit+0xb0>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	68ba      	ldr	r2, [r7, #8]
 8000a50:	4413      	add	r3, r2
 8000a52:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000a54:	2208      	movs	r2, #8
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	1a9b      	subs	r3, r3, r2
 8000a5a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	f023 0307 	bic.w	r3, r3, #7
 8000a62:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	4a15      	ldr	r2, [pc, #84]	; (8000abc <prvHeapInit+0xb4>)
 8000a68:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000a6a:	4b14      	ldr	r3, [pc, #80]	; (8000abc <prvHeapInit+0xb4>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000a72:	4b12      	ldr	r3, [pc, #72]	; (8000abc <prvHeapInit+0xb4>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	68fa      	ldr	r2, [r7, #12]
 8000a82:	1ad2      	subs	r2, r2, r3
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <prvHeapInit+0xb4>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <prvHeapInit+0xb8>)
 8000a96:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	4a09      	ldr	r2, [pc, #36]	; (8000ac4 <prvHeapInit+0xbc>)
 8000a9e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000aa0:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <prvHeapInit+0xc0>)
 8000aa2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000aa6:	601a      	str	r2, [r3, #0]
}
 8000aa8:	bf00      	nop
 8000aaa:	3714      	adds	r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	2000215c 	.word	0x2000215c
 8000ab8:	20005d5c 	.word	0x20005d5c
 8000abc:	20005d64 	.word	0x20005d64
 8000ac0:	20005d6c 	.word	0x20005d6c
 8000ac4:	20005d68 	.word	0x20005d68
 8000ac8:	20005d70 	.word	0x20005d70

08000acc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000ad4:	4b28      	ldr	r3, [pc, #160]	; (8000b78 <prvInsertBlockIntoFreeList+0xac>)
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	e002      	b.n	8000ae0 <prvInsertBlockIntoFreeList+0x14>
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d8f7      	bhi.n	8000ada <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	68ba      	ldr	r2, [r7, #8]
 8000af4:	4413      	add	r3, r2
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d108      	bne.n	8000b0e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	685a      	ldr	r2, [r3, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	441a      	add	r2, r3
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	68ba      	ldr	r2, [r7, #8]
 8000b18:	441a      	add	r2, r3
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d118      	bne.n	8000b54 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <prvInsertBlockIntoFreeList+0xb0>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d00d      	beq.n	8000b4a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	685a      	ldr	r2, [r3, #4]
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	441a      	add	r2, r3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	e008      	b.n	8000b5c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <prvInsertBlockIntoFreeList+0xb0>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	e003      	b.n	8000b5c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000b5c:	68fa      	ldr	r2, [r7, #12]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d002      	beq.n	8000b6a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000b6a:	bf00      	nop
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	20005d5c 	.word	0x20005d5c
 8000b7c:	20005d64 	.word	0x20005d64

08000b80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <MX_DMA_Init+0x48>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a0f      	ldr	r2, [pc, #60]	; (8000bc8 <MX_DMA_Init+0x48>)
 8000b8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <MX_DMA_Init+0x48>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2105      	movs	r1, #5
 8000ba2:	200c      	movs	r0, #12
 8000ba4:	f001 fe60 	bl	8002868 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ba8:	200c      	movs	r0, #12
 8000baa:	f001 fe79 	bl	80028a0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2105      	movs	r1, #5
 8000bb2:	200e      	movs	r0, #14
 8000bb4:	f001 fe58 	bl	8002868 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000bb8:	200e      	movs	r0, #14
 8000bba:	f001 fe71 	bl	80028a0 <HAL_NVIC_EnableIRQ>

}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800

08000bcc <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000bda:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000bdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000be0:	4904      	ldr	r1, [pc, #16]	; (8000bf4 <cubemx_transport_open+0x28>)
 8000be2:	68f8      	ldr	r0, [r7, #12]
 8000be4:	f005 f842 	bl	8005c6c <HAL_UART_Receive_DMA>
    return true;
 8000be8:	2301      	movs	r3, #1
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20005d74 	.word	0x20005d74

08000bf8 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000c06:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000c08:	68f8      	ldr	r0, [r7, #12]
 8000c0a:	f005 f873 	bl	8005cf4 <HAL_UART_DMAStop>
    return true;
 8000c0e:	2301      	movs	r3, #1
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3710      	adds	r7, #16
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, const uint8_t * buf, size_t len, uint8_t * err){
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
 8000c24:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000c2c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000c32:	2b20      	cmp	r3, #32
 8000c34:	d11a      	bne.n	8000c6c <cubemx_transport_write+0x54>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	68b9      	ldr	r1, [r7, #8]
 8000c3e:	6978      	ldr	r0, [r7, #20]
 8000c40:	f004 ff98 	bl	8005b74 <HAL_UART_Transmit_DMA>
 8000c44:	4603      	mov	r3, r0
 8000c46:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000c48:	e002      	b.n	8000c50 <cubemx_transport_write+0x38>
            osDelay(1);
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f006 fef0 	bl	8007a30 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000c50:	7cfb      	ldrb	r3, [r7, #19]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d103      	bne.n	8000c5e <cubemx_transport_write+0x46>
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000c5a:	2b20      	cmp	r3, #32
 8000c5c:	d1f5      	bne.n	8000c4a <cubemx_transport_write+0x32>
        }

        return (ret == HAL_OK) ? len : 0;
 8000c5e:	7cfb      	ldrb	r3, [r7, #19]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d101      	bne.n	8000c68 <cubemx_transport_write+0x50>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	e002      	b.n	8000c6e <cubemx_transport_write+0x56>
 8000c68:	2300      	movs	r3, #0
 8000c6a:	e000      	b.n	8000c6e <cubemx_transport_write+0x56>
    }else{
        return 0;
 8000c6c:	2300      	movs	r3, #0
    }
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b088      	sub	sp, #32
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
 8000c84:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000c8c:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c92:	b672      	cpsid	i
}
 8000c94:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000ca2:	4a1c      	ldr	r2, [pc, #112]	; (8000d14 <cubemx_transport_read+0x9c>)
 8000ca4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000ca6:	b662      	cpsie	i
}
 8000ca8:	bf00      	nop
        __enable_irq();
        ms_used++;
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	3301      	adds	r3, #1
 8000cae:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f006 febd 	bl	8007a30 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8000cb6:	4b18      	ldr	r3, [pc, #96]	; (8000d18 <cubemx_transport_read+0xa0>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <cubemx_transport_read+0x9c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d103      	bne.n	8000cca <cubemx_transport_read+0x52>
 8000cc2:	69fa      	ldr	r2, [r7, #28]
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	dbe3      	blt.n	8000c92 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000cce:	e011      	b.n	8000cf4 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8000cd0:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <cubemx_transport_read+0xa0>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	68b9      	ldr	r1, [r7, #8]
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	440b      	add	r3, r1
 8000cda:	4910      	ldr	r1, [pc, #64]	; (8000d1c <cubemx_transport_read+0xa4>)
 8000cdc:	5c8a      	ldrb	r2, [r1, r2]
 8000cde:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8000ce0:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <cubemx_transport_read+0xa0>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000cea:	4a0b      	ldr	r2, [pc, #44]	; (8000d18 <cubemx_transport_read+0xa0>)
 8000cec:	6013      	str	r3, [r2, #0]
        wrote++;
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000cf4:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <cubemx_transport_read+0xa0>)
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <cubemx_transport_read+0x9c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d003      	beq.n	8000d08 <cubemx_transport_read+0x90>
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d3e3      	bcc.n	8000cd0 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8000d08:	69bb      	ldr	r3, [r7, #24]
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3720      	adds	r7, #32
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20006578 	.word	0x20006578
 8000d18:	20006574 	.word	0x20006574
 8000d1c:	20005d74 	.word	0x20005d74

08000d20 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d24:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <MX_FREERTOS_Init+0x18>)
 8000d26:	2100      	movs	r1, #0
 8000d28:	4804      	ldr	r0, [pc, #16]	; (8000d3c <MX_FREERTOS_Init+0x1c>)
 8000d2a:	f006 fddb 	bl	80078e4 <osThreadNew>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	4a03      	ldr	r2, [pc, #12]	; (8000d40 <MX_FREERTOS_Init+0x20>)
 8000d32:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	0801a664 	.word	0x0801a664
 8000d3c:	08000d45 	.word	0x08000d45
 8000d40:	2000657c 	.word	0x2000657c

08000d44 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d44:	b5b0      	push	{r4, r5, r7, lr}
 8000d46:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8000d4a:	af02      	add	r7, sp, #8
 8000d4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000d50:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8000d54:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDefaultTask */
	rmw_uros_set_custom_transport(
 8000d56:	4b6f      	ldr	r3, [pc, #444]	; (8000f14 <StartDefaultTask+0x1d0>)
 8000d58:	9301      	str	r3, [sp, #4]
 8000d5a:	4b6f      	ldr	r3, [pc, #444]	; (8000f18 <StartDefaultTask+0x1d4>)
 8000d5c:	9300      	str	r3, [sp, #0]
 8000d5e:	4b6f      	ldr	r3, [pc, #444]	; (8000f1c <StartDefaultTask+0x1d8>)
 8000d60:	4a6f      	ldr	r2, [pc, #444]	; (8000f20 <StartDefaultTask+0x1dc>)
 8000d62:	4970      	ldr	r1, [pc, #448]	; (8000f24 <StartDefaultTask+0x1e0>)
 8000d64:	2001      	movs	r0, #1
 8000d66:	f00b fa67 	bl	800c238 <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8000d6a:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f00b f998 	bl	800c0a4 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 8000d74:	4b6c      	ldr	r3, [pc, #432]	; (8000f28 <StartDefaultTask+0x1e4>)
 8000d76:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
	freeRTOS_allocator.deallocate = microros_deallocate;
 8000d7a:	4b6c      	ldr	r3, [pc, #432]	; (8000f2c <StartDefaultTask+0x1e8>)
 8000d7c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
	freeRTOS_allocator.reallocate = microros_reallocate;
 8000d80:	4b6b      	ldr	r3, [pc, #428]	; (8000f30 <StartDefaultTask+0x1ec>)
 8000d82:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8000d86:	4b6b      	ldr	r3, [pc, #428]	; (8000f34 <StartDefaultTask+0x1f0>)
 8000d88:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) return;
 8000d8c:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8000d90:	4618      	mov	r0, r3
 8000d92:	f00b f995 	bl	800c0c0 <rcutils_set_default_allocator>
 8000d96:	4603      	mov	r3, r0
 8000d98:	f083 0301 	eor.w	r3, r3, #1
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f040 80a6 	bne.w	8000ef0 <StartDefaultTask+0x1ac>

	rcl_ret_t rc;
	rcl_node_t node; // nodo;
	rcl_service_t setup_service, control_service; //servizi
	const char* setup_service_name = "/setup";
 8000da4:	4b64      	ldr	r3, [pc, #400]	; (8000f38 <StartDefaultTask+0x1f4>)
 8000da6:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
	const char* control_service_name = "/control"; //nomi dei servizi
 8000daa:	4b64      	ldr	r3, [pc, #400]	; (8000f3c <StartDefaultTask+0x1f8>)
 8000dac:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	const rosidl_service_type_support_t* setup_type_support =
		ROSIDL_GET_SRV_TYPE_SUPPORT(racs_services, srv, Setup);
 8000db0:	f009 fb72 	bl	800a498 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup>
 8000db4:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
	const rosidl_service_type_support_t* control_type_support =
		ROSIDL_GET_SRV_TYPE_SUPPORT(racs_services, srv, Control);
 8000db8:	f009 fb48 	bl	800a44c <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control>
 8000dbc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
	racs_services__srv__Setup_Request req_setup;
	racs_services__srv__Setup_Response res_setup;
	racs_services__srv__Control_Request req_control;
	racs_services__srv__Control_Response res_control;

	allocator = rcl_get_default_allocator();
 8000dc0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f00b f999 	bl	800c0fc <rcutils_get_default_allocator>
 8000dca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000dce:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8000dd2:	f507 74c2 	add.w	r4, r7, #388	; 0x184
 8000dd6:	461d      	mov	r5, r3
 8000dd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ddc:	682b      	ldr	r3, [r5, #0]
 8000dde:	6023      	str	r3, [r4, #0]

	rc = rclc_support_init(&support, 0, NULL, &allocator);
 8000de0:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8000de4:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 8000de8:	2200      	movs	r2, #0
 8000dea:	2100      	movs	r1, #0
 8000dec:	f00b f88c 	bl	800bf08 <rclc_support_init>
 8000df0:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4
	if (rc != RCL_RET_OK) return;
 8000df4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d17b      	bne.n	8000ef4 <StartDefaultTask+0x1b0>

	rc = rclc_node_init_default(&node, "STM32_node", "", &support);
 8000dfc:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000e00:	f507 70ea 	add.w	r0, r7, #468	; 0x1d4
 8000e04:	4a4e      	ldr	r2, [pc, #312]	; (8000f40 <StartDefaultTask+0x1fc>)
 8000e06:	494f      	ldr	r1, [pc, #316]	; (8000f44 <StartDefaultTask+0x200>)
 8000e08:	f00b f8c8 	bl	800bf9c <rclc_node_init_default>
 8000e0c:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4
	if (rc != RCL_RET_OK) return;
 8000e10:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d16f      	bne.n	8000ef8 <StartDefaultTask+0x1b4>

	rc = rclc_service_init_default(
 8000e18:	f507 71ea 	add.w	r1, r7, #468	; 0x1d4
 8000e1c:	f507 70e8 	add.w	r0, r7, #464	; 0x1d0
 8000e20:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000e24:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8000e28:	f00b f8fa 	bl	800c020 <rclc_service_init_default>
 8000e2c:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4
		&setup_service, &node, setup_type_support, setup_service_name);

	if (rc != RCL_RET_OK) return;
 8000e30:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d161      	bne.n	8000efc <StartDefaultTask+0x1b8>

	rc = rclc_service_init_default(
 8000e38:	f507 71ea 	add.w	r1, r7, #468	; 0x1d4
 8000e3c:	f507 70e6 	add.w	r0, r7, #460	; 0x1cc
 8000e40:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000e44:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 8000e48:	f00b f8ea 	bl	800c020 <rclc_service_init_default>
 8000e4c:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4
		&control_service, &node, control_type_support, control_service_name);

	if (rc != RCL_RET_OK) return;
 8000e50:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d153      	bne.n	8000f00 <StartDefaultTask+0x1bc>

	rclc_executor_t executor;
	executor = rclc_executor_get_zero_initialized_executor();
 8000e58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e5c:	f5a3 74ac 	sub.w	r4, r3, #344	; 0x158
 8000e60:	463b      	mov	r3, r7
 8000e62:	4618      	mov	r0, r3
 8000e64:	f00a fd58 	bl	800b918 <rclc_executor_get_zero_initialized_executor>
 8000e68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e6c:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8000e70:	4620      	mov	r0, r4
 8000e72:	4619      	mov	r1, r3
 8000e74:	2390      	movs	r3, #144	; 0x90
 8000e76:	461a      	mov	r2, r3
 8000e78:	f018 fd21 	bl	80198be <memcpy>
	unsigned int num_handles = 2;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
	rclc_executor_init(&executor, &support.context, num_handles, &allocator);
 8000e82:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8000e86:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 8000e8a:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8000e8e:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8000e92:	f00a fd4d 	bl	800b930 <rclc_executor_init>

	rc = rclc_executor_add_service(
 8000e96:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8000e9a:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8000e9e:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 8000ea2:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8000ea6:	4c28      	ldr	r4, [pc, #160]	; (8000f48 <StartDefaultTask+0x204>)
 8000ea8:	9400      	str	r4, [sp, #0]
 8000eaa:	f00a fdbd 	bl	800ba28 <rclc_executor_add_service>
 8000eae:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4
		&executor, &setup_service, &req_setup,
		&res_setup, setup_callback);
	if (rc != RCL_RET_OK) return;
 8000eb2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d124      	bne.n	8000f04 <StartDefaultTask+0x1c0>

	rc = rclc_executor_add_service(
 8000eba:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8000ebe:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8000ec2:	f507 71e6 	add.w	r1, r7, #460	; 0x1cc
 8000ec6:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8000eca:	4c20      	ldr	r4, [pc, #128]	; (8000f4c <StartDefaultTask+0x208>)
 8000ecc:	9400      	str	r4, [sp, #0]
 8000ece:	f00a fdab 	bl	800ba28 <rclc_executor_add_service>
 8000ed2:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4
		&executor, &control_service, &req_control,
		&res_control, control_callback);
	if (rc != RCL_RET_OK) return;
 8000ed6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d114      	bne.n	8000f08 <StartDefaultTask+0x1c4>

	rclc_executor_spin(&executor);
 8000ede:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f00a ffd0 	bl	800be88 <rclc_executor_spin>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f006 fda1 	bl	8007a30 <osDelay>
 8000eee:	e7fb      	b.n	8000ee8 <StartDefaultTask+0x1a4>
	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) return;
 8000ef0:	bf00      	nop
 8000ef2:	e00a      	b.n	8000f0a <StartDefaultTask+0x1c6>
	if (rc != RCL_RET_OK) return;
 8000ef4:	bf00      	nop
 8000ef6:	e008      	b.n	8000f0a <StartDefaultTask+0x1c6>
	if (rc != RCL_RET_OK) return;
 8000ef8:	bf00      	nop
 8000efa:	e006      	b.n	8000f0a <StartDefaultTask+0x1c6>
	if (rc != RCL_RET_OK) return;
 8000efc:	bf00      	nop
 8000efe:	e004      	b.n	8000f0a <StartDefaultTask+0x1c6>
	if (rc != RCL_RET_OK) return;
 8000f00:	bf00      	nop
 8000f02:	e002      	b.n	8000f0a <StartDefaultTask+0x1c6>
	if (rc != RCL_RET_OK) return;
 8000f04:	bf00      	nop
 8000f06:	e000      	b.n	8000f0a <StartDefaultTask+0x1c6>
	if (rc != RCL_RET_OK) return;
 8000f08:	bf00      	nop
  }
  /* USER CODE END StartDefaultTask */
}
 8000f0a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bdb0      	pop	{r4, r5, r7, pc}
 8000f12:	bf00      	nop
 8000f14:	08000c79 	.word	0x08000c79
 8000f18:	08000c19 	.word	0x08000c19
 8000f1c:	08000bf9 	.word	0x08000bf9
 8000f20:	08000bcd 	.word	0x08000bcd
 8000f24:	20006900 	.word	0x20006900
 8000f28:	08001295 	.word	0x08001295
 8000f2c:	080012d9 	.word	0x080012d9
 8000f30:	08001311 	.word	0x08001311
 8000f34:	0800137d 	.word	0x0800137d
 8000f38:	0801a60c 	.word	0x0801a60c
 8000f3c:	0801a614 	.word	0x0801a614
 8000f40:	0801a620 	.word	0x0801a620
 8000f44:	0801a624 	.word	0x0801a624
 8000f48:	080010fb 	.word	0x080010fb
 8000f4c:	080010dd 	.word	0x080010dd

08000f50 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08c      	sub	sp, #48	; 0x30
 8000f54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f56:	f107 031c 	add.w	r3, r7, #28
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]
 8000f64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f66:	4b58      	ldr	r3, [pc, #352]	; (80010c8 <MX_GPIO_Init+0x178>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a57      	ldr	r2, [pc, #348]	; (80010c8 <MX_GPIO_Init+0x178>)
 8000f6c:	f043 0310 	orr.w	r3, r3, #16
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b55      	ldr	r3, [pc, #340]	; (80010c8 <MX_GPIO_Init+0x178>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0310 	and.w	r3, r3, #16
 8000f7a:	61bb      	str	r3, [r7, #24]
 8000f7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f7e:	4b52      	ldr	r3, [pc, #328]	; (80010c8 <MX_GPIO_Init+0x178>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a51      	ldr	r2, [pc, #324]	; (80010c8 <MX_GPIO_Init+0x178>)
 8000f84:	f043 0304 	orr.w	r3, r3, #4
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b4f      	ldr	r3, [pc, #316]	; (80010c8 <MX_GPIO_Init+0x178>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0304 	and.w	r3, r3, #4
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f96:	4b4c      	ldr	r3, [pc, #304]	; (80010c8 <MX_GPIO_Init+0x178>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a4b      	ldr	r2, [pc, #300]	; (80010c8 <MX_GPIO_Init+0x178>)
 8000f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b49      	ldr	r3, [pc, #292]	; (80010c8 <MX_GPIO_Init+0x178>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fae:	4b46      	ldr	r3, [pc, #280]	; (80010c8 <MX_GPIO_Init+0x178>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a45      	ldr	r2, [pc, #276]	; (80010c8 <MX_GPIO_Init+0x178>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b43      	ldr	r3, [pc, #268]	; (80010c8 <MX_GPIO_Init+0x178>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc6:	4b40      	ldr	r3, [pc, #256]	; (80010c8 <MX_GPIO_Init+0x178>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a3f      	ldr	r2, [pc, #252]	; (80010c8 <MX_GPIO_Init+0x178>)
 8000fcc:	f043 0302 	orr.w	r3, r3, #2
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b3d      	ldr	r3, [pc, #244]	; (80010c8 <MX_GPIO_Init+0x178>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fde:	4b3a      	ldr	r3, [pc, #232]	; (80010c8 <MX_GPIO_Init+0x178>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a39      	ldr	r2, [pc, #228]	; (80010c8 <MX_GPIO_Init+0x178>)
 8000fe4:	f043 0308 	orr.w	r3, r3, #8
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b37      	ldr	r3, [pc, #220]	; (80010c8 <MX_GPIO_Init+0x178>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0308 	and.w	r3, r3, #8
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ff6:	4b34      	ldr	r3, [pc, #208]	; (80010c8 <MX_GPIO_Init+0x178>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a33      	ldr	r2, [pc, #204]	; (80010c8 <MX_GPIO_Init+0x178>)
 8000ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b31      	ldr	r3, [pc, #196]	; (80010c8 <MX_GPIO_Init+0x178>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800100e:	2200      	movs	r2, #0
 8001010:	f244 0181 	movw	r1, #16513	; 0x4081
 8001014:	482d      	ldr	r0, [pc, #180]	; (80010cc <MX_GPIO_Init+0x17c>)
 8001016:	f002 fa13 	bl	8003440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MOTOR5_INA_Pin|MOTOR5_INB_Pin|MOTOR1_INA_Pin|MOTOR1_INB_Pin
 800101a:	2200      	movs	r2, #0
 800101c:	f24c 01ff 	movw	r1, #49407	; 0xc0ff
 8001020:	482b      	ldr	r0, [pc, #172]	; (80010d0 <MX_GPIO_Init+0x180>)
 8001022:	f002 fa0d 	bl	8003440 <HAL_GPIO_WritePin>
                          |MOTOR2_INA_Pin|MOTOR2_INB_Pin|MOTOR3_INA_Pin|MOTOR3_INB_Pin
                          |MOTOR4_INA_Pin|MOTOR4_INB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, MOTOR6_INA_Pin|MOTOR6_INB_Pin|PIN_TOGGLE_Pin|MOTORS_EN_Pin
 8001026:	2200      	movs	r2, #0
 8001028:	f647 616c 	movw	r1, #32364	; 0x7e6c
 800102c:	4829      	ldr	r0, [pc, #164]	; (80010d4 <MX_GPIO_Init+0x184>)
 800102e:	f002 fa07 	bl	8003440 <HAL_GPIO_WritePin>
                          |MOTOR1_END_Pin|MOTOR2_END_Pin|MOTOR3_END_Pin|MOTOR4_END_Pin
                          |MOTOR5_END_Pin|MOTOR6_END_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001032:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001036:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001038:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800103c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001042:	f107 031c 	add.w	r3, r7, #28
 8001046:	4619      	mov	r1, r3
 8001048:	4823      	ldr	r0, [pc, #140]	; (80010d8 <MX_GPIO_Init+0x188>)
 800104a:	f002 f84d 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800104e:	f244 0381 	movw	r3, #16513	; 0x4081
 8001052:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001054:	2301      	movs	r3, #1
 8001056:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105c:	2300      	movs	r3, #0
 800105e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001060:	f107 031c 	add.w	r3, r7, #28
 8001064:	4619      	mov	r1, r3
 8001066:	4819      	ldr	r0, [pc, #100]	; (80010cc <MX_GPIO_Init+0x17c>)
 8001068:	f002 f83e 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = MOTOR5_INA_Pin|MOTOR5_INB_Pin|MOTOR1_INA_Pin|MOTOR1_INB_Pin
 800106c:	f24c 03ff 	movw	r3, #49407	; 0xc0ff
 8001070:	61fb      	str	r3, [r7, #28]
                          |MOTOR2_INA_Pin|MOTOR2_INB_Pin|MOTOR3_INA_Pin|MOTOR3_INB_Pin
                          |MOTOR4_INA_Pin|MOTOR4_INB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001072:	2301      	movs	r3, #1
 8001074:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	2300      	movs	r3, #0
 800107c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800107e:	f107 031c 	add.w	r3, r7, #28
 8001082:	4619      	mov	r1, r3
 8001084:	4812      	ldr	r0, [pc, #72]	; (80010d0 <MX_GPIO_Init+0x180>)
 8001086:	f002 f82f 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = MOTOR6_INA_Pin|MOTOR6_INB_Pin|PIN_TOGGLE_Pin|MOTORS_EN_Pin
 800108a:	f647 636c 	movw	r3, #32364	; 0x7e6c
 800108e:	61fb      	str	r3, [r7, #28]
                          |MOTOR1_END_Pin|MOTOR2_END_Pin|MOTOR3_END_Pin|MOTOR4_END_Pin
                          |MOTOR5_END_Pin|MOTOR6_END_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001090:	2301      	movs	r3, #1
 8001092:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001098:	2300      	movs	r3, #0
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800109c:	f107 031c 	add.w	r3, r7, #28
 80010a0:	4619      	mov	r1, r3
 80010a2:	480c      	ldr	r0, [pc, #48]	; (80010d4 <MX_GPIO_Init+0x184>)
 80010a4:	f002 f820 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80010a8:	2380      	movs	r3, #128	; 0x80
 80010aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ac:	2300      	movs	r3, #0
 80010ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	4619      	mov	r1, r3
 80010ba:	4806      	ldr	r0, [pc, #24]	; (80010d4 <MX_GPIO_Init+0x184>)
 80010bc:	f002 f814 	bl	80030e8 <HAL_GPIO_Init>

}
 80010c0:	bf00      	nop
 80010c2:	3730      	adds	r7, #48	; 0x30
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40020400 	.word	0x40020400
 80010d0:	40020c00 	.word	0x40020c00
 80010d4:	40021800 	.word	0x40021800
 80010d8:	40020800 	.word	0x40020800

080010dc <control_callback>:
}
#endif
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void control_callback(const void* request_msg, void* response_msg){
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
		racs_services__srv__Control_Request* req_in =
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	60fb      	str	r3, [r7, #12]
				(racs_services__srv__Control_Request*) request_msg;
		racs_services__srv__Control_Response* res_in =
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	60bb      	str	r3, [r7, #8]
				(racs_services__srv__Control_Response*) response_msg;
		//logica
	}
 80010ee:	bf00      	nop
 80010f0:	3714      	adds	r7, #20
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <setup_callback>:

void setup_callback(const void* request_msg, void* response_msg){
 80010fa:	b480      	push	{r7}
 80010fc:	b085      	sub	sp, #20
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
 8001102:	6039      	str	r1, [r7, #0]
		racs_services__srv__Setup_Request* req_in =
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	60fb      	str	r3, [r7, #12]
				(racs_services__srv__Setup_Request*) request_msg;
		racs_services__srv__Setup_Response* res_in =
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	60bb      	str	r3, [r7, #8]
				(racs_services__srv__Setup_Response*) response_msg;


		res_in->response = 0b00000011;
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	2203      	movs	r2, #3
 8001110:	701a      	strb	r2, [r3, #0]
	}
 8001112:	bf00      	nop
 8001114:	3714      	adds	r7, #20
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001122:	f001 fa98 	bl	8002656 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001126:	f000 f81d 	bl	8001164 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800112a:	f7ff ff11 	bl	8000f50 <MX_GPIO_Init>
  MX_DMA_Init();
 800112e:	f7ff fd27 	bl	8000b80 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001132:	f001 f8bf 	bl	80022b4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001136:	f001 f9bd 	bl	80024b4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 800113a:	f000 fc37 	bl	80019ac <MX_TIM1_Init>
  MX_TIM2_Init();
 800113e:	f000 fce9 	bl	8001b14 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001142:	f000 fd3b 	bl	8001bbc <MX_TIM3_Init>
  MX_TIM4_Init();
 8001146:	f000 fd8f 	bl	8001c68 <MX_TIM4_Init>
  MX_TIM5_Init();
 800114a:	f000 fde3 	bl	8001d14 <MX_TIM5_Init>
  MX_TIM8_Init();
 800114e:	f000 fe37 	bl	8001dc0 <MX_TIM8_Init>
  MX_TIM9_Init();
 8001152:	f000 fe8f 	bl	8001e74 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001156:	f006 fb5b 	bl	8007810 <osKernelInitialize>
  MX_FREERTOS_Init();
 800115a:	f7ff fde1 	bl	8000d20 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800115e:	f006 fb8b 	bl	8007878 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001162:	e7fe      	b.n	8001162 <main+0x44>

08001164 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b094      	sub	sp, #80	; 0x50
 8001168:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116a:	f107 031c 	add.w	r3, r7, #28
 800116e:	2234      	movs	r2, #52	; 0x34
 8001170:	2100      	movs	r1, #0
 8001172:	4618      	mov	r0, r3
 8001174:	f018 fa2e 	bl	80195d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001178:	f107 0308 	add.w	r3, r7, #8
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001188:	f002 fabc 	bl	8003704 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800118c:	4b33      	ldr	r3, [pc, #204]	; (800125c <SystemClock_Config+0xf8>)
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	4a32      	ldr	r2, [pc, #200]	; (800125c <SystemClock_Config+0xf8>)
 8001192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001196:	6413      	str	r3, [r2, #64]	; 0x40
 8001198:	4b30      	ldr	r3, [pc, #192]	; (800125c <SystemClock_Config+0xf8>)
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a0:	607b      	str	r3, [r7, #4]
 80011a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011a4:	4b2e      	ldr	r3, [pc, #184]	; (8001260 <SystemClock_Config+0xfc>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011ac:	4a2c      	ldr	r2, [pc, #176]	; (8001260 <SystemClock_Config+0xfc>)
 80011ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b2:	6013      	str	r3, [r2, #0]
 80011b4:	4b2a      	ldr	r3, [pc, #168]	; (8001260 <SystemClock_Config+0xfc>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011bc:	603b      	str	r3, [r7, #0]
 80011be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011c0:	2301      	movs	r3, #1
 80011c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80011c4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80011c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ca:	2302      	movs	r3, #2
 80011cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011d4:	2304      	movs	r3, #4
 80011d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80011d8:	2360      	movs	r3, #96	; 0x60
 80011da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011dc:	2302      	movs	r3, #2
 80011de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011e0:	2304      	movs	r3, #4
 80011e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011e4:	2302      	movs	r3, #2
 80011e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e8:	f107 031c 	add.w	r3, r7, #28
 80011ec:	4618      	mov	r0, r3
 80011ee:	f002 fae9 	bl	80037c4 <HAL_RCC_OscConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	bf14      	ite	ne
 80011f8:	2301      	movne	r3, #1
 80011fa:	2300      	moveq	r3, #0
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001202:	f000 f841 	bl	8001288 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001206:	f002 fa8d 	bl	8003724 <HAL_PWREx_EnableOverDrive>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	bf14      	ite	ne
 8001210:	2301      	movne	r3, #1
 8001212:	2300      	moveq	r3, #0
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800121a:	f000 f835 	bl	8001288 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800121e:	230f      	movs	r3, #15
 8001220:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001222:	2302      	movs	r3, #2
 8001224:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800122a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800122e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001230:	2300      	movs	r3, #0
 8001232:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001234:	f107 0308 	add.w	r3, r7, #8
 8001238:	2103      	movs	r1, #3
 800123a:	4618      	mov	r0, r3
 800123c:	f002 fd70 	bl	8003d20 <HAL_RCC_ClockConfig>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	bf14      	ite	ne
 8001246:	2301      	movne	r3, #1
 8001248:	2300      	moveq	r3, #0
 800124a:	b2db      	uxtb	r3, r3
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8001250:	f000 f81a 	bl	8001288 <Error_Handler>
  }
}
 8001254:	bf00      	nop
 8001256:	3750      	adds	r7, #80	; 0x50
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40023800 	.word	0x40023800
 8001260:	40007000 	.word	0x40007000

08001264 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a04      	ldr	r2, [pc, #16]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d101      	bne.n	800127a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001276:	f001 f9fb 	bl	8002670 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40001000 	.word	0x40001000

08001288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800128c:	b672      	cpsid	i
}
 800128e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001290:	e7fe      	b.n	8001290 <Error_Handler+0x8>
	...

08001294 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800129e:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <microros_allocate+0x3c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	461a      	mov	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4413      	add	r3, r2
 80012a8:	461a      	mov	r2, r3
 80012aa:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <microros_allocate+0x3c>)
 80012ac:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80012ae:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <microros_allocate+0x40>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	461a      	mov	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4413      	add	r3, r2
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <microros_allocate+0x40>)
 80012bc:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff fa0a 	bl	80006d8 <pvPortMallocMicroROS>
 80012c4:	4603      	mov	r3, r0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20006580 	.word	0x20006580
 80012d4:	20006584 	.word	0x20006584

080012d8 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d00c      	beq.n	8001302 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff fb1d 	bl	8000928 <getBlockSize>
 80012ee:	4603      	mov	r3, r0
 80012f0:	4a06      	ldr	r2, [pc, #24]	; (800130c <microros_deallocate+0x34>)
 80012f2:	6812      	ldr	r2, [r2, #0]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	461a      	mov	r2, r3
 80012f8:	4b04      	ldr	r3, [pc, #16]	; (800130c <microros_deallocate+0x34>)
 80012fa:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff fab5 	bl	800086c <vPortFreeMicroROS>
  }
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20006584 	.word	0x20006584

08001310 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800131c:	4b15      	ldr	r3, [pc, #84]	; (8001374 <microros_reallocate+0x64>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	461a      	mov	r2, r3
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	4413      	add	r3, r2
 8001326:	461a      	mov	r2, r3
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <microros_reallocate+0x64>)
 800132a:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <microros_reallocate+0x68>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	461a      	mov	r2, r3
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	4413      	add	r3, r2
 8001336:	461a      	mov	r2, r3
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <microros_reallocate+0x68>)
 800133a:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d104      	bne.n	800134c <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001342:	68b8      	ldr	r0, [r7, #8]
 8001344:	f7ff f9c8 	bl	80006d8 <pvPortMallocMicroROS>
 8001348:	4603      	mov	r3, r0
 800134a:	e00e      	b.n	800136a <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 800134c:	68f8      	ldr	r0, [r7, #12]
 800134e:	f7ff faeb 	bl	8000928 <getBlockSize>
 8001352:	4603      	mov	r3, r0
 8001354:	4a08      	ldr	r2, [pc, #32]	; (8001378 <microros_reallocate+0x68>)
 8001356:	6812      	ldr	r2, [r2, #0]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	461a      	mov	r2, r3
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <microros_reallocate+0x68>)
 800135e:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001360:	68b9      	ldr	r1, [r7, #8]
 8001362:	68f8      	ldr	r0, [r7, #12]
 8001364:	f7ff fafe 	bl	8000964 <pvPortReallocMicroROS>
 8001368:	4603      	mov	r3, r0
  }
}
 800136a:	4618      	mov	r0, r3
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20006580 	.word	0x20006580
 8001378:	20006584 	.word	0x20006584

0800137c <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	fb02 f303 	mul.w	r3, r2, r3
 8001390:	4a0c      	ldr	r2, [pc, #48]	; (80013c4 <microros_zero_allocate+0x48>)
 8001392:	6812      	ldr	r2, [r2, #0]
 8001394:	4413      	add	r3, r2
 8001396:	461a      	mov	r2, r3
 8001398:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <microros_zero_allocate+0x48>)
 800139a:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	68ba      	ldr	r2, [r7, #8]
 80013a0:	fb02 f303 	mul.w	r3, r2, r3
 80013a4:	4a08      	ldr	r2, [pc, #32]	; (80013c8 <microros_zero_allocate+0x4c>)
 80013a6:	6812      	ldr	r2, [r2, #0]
 80013a8:	4413      	add	r3, r2
 80013aa:	461a      	mov	r2, r3
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <microros_zero_allocate+0x4c>)
 80013ae:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80013b0:	68b9      	ldr	r1, [r7, #8]
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	f7ff fb03 	bl	80009be <pvPortCallocMicroROS>
 80013b8:	4603      	mov	r3, r0
 80013ba:	4618      	mov	r0, r3
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20006580 	.word	0x20006580
 80013c8:	20006584 	.word	0x20006584
 80013cc:	00000000 	.word	0x00000000

080013d0 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80013d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013d4:	b086      	sub	sp, #24
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80013dc:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80013e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013e6:	a320      	add	r3, pc, #128	; (adr r3, 8001468 <UTILS_NanosecondsToTimespec+0x98>)
 80013e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ec:	f7fe ff90 	bl	8000310 <__aeabi_ldivmod>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	6879      	ldr	r1, [r7, #4]
 80013f6:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80013fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013fe:	a31a      	add	r3, pc, #104	; (adr r3, 8001468 <UTILS_NanosecondsToTimespec+0x98>)
 8001400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001404:	f7fe ff84 	bl	8000310 <__aeabi_ldivmod>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	2b00      	cmp	r3, #0
 8001412:	da20      	bge.n	8001456 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	4a11      	ldr	r2, [pc, #68]	; (8001460 <UTILS_NanosecondsToTimespec+0x90>)
 800141a:	fb82 1203 	smull	r1, r2, r2, r3
 800141e:	1712      	asrs	r2, r2, #28
 8001420:	17db      	asrs	r3, r3, #31
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	3301      	adds	r3, #1
 8001426:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142e:	6979      	ldr	r1, [r7, #20]
 8001430:	17c8      	asrs	r0, r1, #31
 8001432:	460c      	mov	r4, r1
 8001434:	4605      	mov	r5, r0
 8001436:	ebb2 0804 	subs.w	r8, r2, r4
 800143a:	eb63 0905 	sbc.w	r9, r3, r5
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	4906      	ldr	r1, [pc, #24]	; (8001464 <UTILS_NanosecondsToTimespec+0x94>)
 800144c:	fb01 f303 	mul.w	r3, r1, r3
 8001450:	441a      	add	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	609a      	str	r2, [r3, #8]
    }
}
 8001456:	bf00      	nop
 8001458:	3718      	adds	r7, #24
 800145a:	46bd      	mov	sp, r7
 800145c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001460:	44b82fa1 	.word	0x44b82fa1
 8001464:	3b9aca00 	.word	0x3b9aca00
 8001468:	3b9aca00 	.word	0x3b9aca00
 800146c:	00000000 	.word	0x00000000

08001470 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001470:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001474:	b08e      	sub	sp, #56	; 0x38
 8001476:	af00      	add	r7, sp, #0
 8001478:	6278      	str	r0, [r7, #36]	; 0x24
 800147a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800147c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001480:	2300      	movs	r3, #0
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001486:	f04f 0200 	mov.w	r2, #0
 800148a:	f04f 0300 	mov.w	r3, #0
 800148e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001492:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001496:	4618      	mov	r0, r3
 8001498:	f007 fdee 	bl	8009078 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800149c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800149e:	17da      	asrs	r2, r3, #31
 80014a0:	61bb      	str	r3, [r7, #24]
 80014a2:	61fa      	str	r2, [r7, #28]
 80014a4:	f04f 0200 	mov.w	r2, #0
 80014a8:	f04f 0300 	mov.w	r3, #0
 80014ac:	69b9      	ldr	r1, [r7, #24]
 80014ae:	000b      	movs	r3, r1
 80014b0:	2200      	movs	r2, #0
 80014b2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80014b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014b8:	2200      	movs	r2, #0
 80014ba:	461c      	mov	r4, r3
 80014bc:	4615      	mov	r5, r2
 80014be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80014c2:	1911      	adds	r1, r2, r4
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	416b      	adcs	r3, r5
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80014ce:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80014d2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	f04f 0400 	mov.w	r4, #0
 80014de:	f04f 0500 	mov.w	r5, #0
 80014e2:	015d      	lsls	r5, r3, #5
 80014e4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80014e8:	0154      	lsls	r4, r2, #5
 80014ea:	4622      	mov	r2, r4
 80014ec:	462b      	mov	r3, r5
 80014ee:	ebb2 0800 	subs.w	r8, r2, r0
 80014f2:	eb63 0901 	sbc.w	r9, r3, r1
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	f04f 0300 	mov.w	r3, #0
 80014fe:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001502:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001506:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800150a:	4690      	mov	r8, r2
 800150c:	4699      	mov	r9, r3
 800150e:	eb18 0a00 	adds.w	sl, r8, r0
 8001512:	eb49 0b01 	adc.w	fp, r9, r1
 8001516:	f04f 0200 	mov.w	r2, #0
 800151a:	f04f 0300 	mov.w	r3, #0
 800151e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001522:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001526:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800152a:	ebb2 040a 	subs.w	r4, r2, sl
 800152e:	603c      	str	r4, [r7, #0]
 8001530:	eb63 030b 	sbc.w	r3, r3, fp
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	e9d7 4500 	ldrd	r4, r5, [r7]
 800153a:	4623      	mov	r3, r4
 800153c:	181b      	adds	r3, r3, r0
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	462b      	mov	r3, r5
 8001542:	eb41 0303 	adc.w	r3, r1, r3
 8001546:	617b      	str	r3, [r7, #20]
 8001548:	6a3a      	ldr	r2, [r7, #32]
 800154a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800154e:	f7ff ff3f 	bl	80013d0 <UTILS_NanosecondsToTimespec>

    return 0;
 8001552:	2300      	movs	r3, #0
 8001554:	4618      	mov	r0, r3
 8001556:	3738      	adds	r7, #56	; 0x38
 8001558:	46bd      	mov	sp, r7
 800155a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001560 <_Z41__static_initialization_and_destruction_0ii>:

GPIO_TypeDef* Port1A, Port2A, Port3A, Port4A, Port5A, Port6A;
GPIO_TypeDef* Port1B, Port2B, Port3B, Port4B, Port5B, Port6B;

uint16_t Pin1A, Pin2A, Pin3A, Pin4A, Pin5A, Pin6A;
uint16_t Pin1B, Pin2B, Pin3B, Pin4B, Pin5B, Pin6B;
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d137      	bne.n	80015e0 <_Z41__static_initialization_and_destruction_0ii+0x80>
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001576:	4293      	cmp	r3, r2
 8001578:	d132      	bne.n	80015e0 <_Z41__static_initialization_and_destruction_0ii+0x80>
PinControl INA1;
 800157a:	481b      	ldr	r0, [pc, #108]	; (80015e8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800157c:	f7ff f896 	bl	80006ac <_ZN10PinControlC1Ev>
PinControl INA2, INA3, INA4, INA5, INA6;
 8001580:	481a      	ldr	r0, [pc, #104]	; (80015ec <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8001582:	f7ff f893 	bl	80006ac <_ZN10PinControlC1Ev>
 8001586:	481a      	ldr	r0, [pc, #104]	; (80015f0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001588:	f7ff f890 	bl	80006ac <_ZN10PinControlC1Ev>
 800158c:	4819      	ldr	r0, [pc, #100]	; (80015f4 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800158e:	f7ff f88d 	bl	80006ac <_ZN10PinControlC1Ev>
 8001592:	4819      	ldr	r0, [pc, #100]	; (80015f8 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8001594:	f7ff f88a 	bl	80006ac <_ZN10PinControlC1Ev>
 8001598:	4818      	ldr	r0, [pc, #96]	; (80015fc <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800159a:	f7ff f887 	bl	80006ac <_ZN10PinControlC1Ev>
PinControl INB1, INB2, INB3, INB4, INB5, INB6;
 800159e:	4818      	ldr	r0, [pc, #96]	; (8001600 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80015a0:	f7ff f884 	bl	80006ac <_ZN10PinControlC1Ev>
 80015a4:	4817      	ldr	r0, [pc, #92]	; (8001604 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80015a6:	f7ff f881 	bl	80006ac <_ZN10PinControlC1Ev>
 80015aa:	4817      	ldr	r0, [pc, #92]	; (8001608 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80015ac:	f7ff f87e 	bl	80006ac <_ZN10PinControlC1Ev>
 80015b0:	4816      	ldr	r0, [pc, #88]	; (800160c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80015b2:	f7ff f87b 	bl	80006ac <_ZN10PinControlC1Ev>
 80015b6:	4816      	ldr	r0, [pc, #88]	; (8001610 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80015b8:	f7ff f878 	bl	80006ac <_ZN10PinControlC1Ev>
 80015bc:	4815      	ldr	r0, [pc, #84]	; (8001614 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80015be:	f7ff f875 	bl	80006ac <_ZN10PinControlC1Ev>
PinMeasure END1, END2, END3, END4, END5;
 80015c2:	4815      	ldr	r0, [pc, #84]	; (8001618 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80015c4:	f7ff f87d 	bl	80006c2 <_ZN10PinMeasureC1Ev>
 80015c8:	4814      	ldr	r0, [pc, #80]	; (800161c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80015ca:	f7ff f87a 	bl	80006c2 <_ZN10PinMeasureC1Ev>
 80015ce:	4814      	ldr	r0, [pc, #80]	; (8001620 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80015d0:	f7ff f877 	bl	80006c2 <_ZN10PinMeasureC1Ev>
 80015d4:	4813      	ldr	r0, [pc, #76]	; (8001624 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80015d6:	f7ff f874 	bl	80006c2 <_ZN10PinMeasureC1Ev>
 80015da:	4813      	ldr	r0, [pc, #76]	; (8001628 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 80015dc:	f7ff f871 	bl	80006c2 <_ZN10PinMeasureC1Ev>
uint16_t Pin1B, Pin2B, Pin3B, Pin4B, Pin5B, Pin6B;
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20006588 	.word	0x20006588
 80015ec:	20006598 	.word	0x20006598
 80015f0:	200065a8 	.word	0x200065a8
 80015f4:	200065b8 	.word	0x200065b8
 80015f8:	200065c8 	.word	0x200065c8
 80015fc:	200065d8 	.word	0x200065d8
 8001600:	200065e8 	.word	0x200065e8
 8001604:	200065f8 	.word	0x200065f8
 8001608:	20006608 	.word	0x20006608
 800160c:	20006618 	.word	0x20006618
 8001610:	20006628 	.word	0x20006628
 8001614:	20006638 	.word	0x20006638
 8001618:	20006648 	.word	0x20006648
 800161c:	20006658 	.word	0x20006658
 8001620:	20006668 	.word	0x20006668
 8001624:	20006678 	.word	0x20006678
 8001628:	20006688 	.word	0x20006688

0800162c <_GLOBAL__sub_I_INA1>:
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
 8001630:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001634:	2001      	movs	r0, #1
 8001636:	f7ff ff93 	bl	8001560 <_Z41__static_initialization_and_destruction_0ii>
 800163a:	bd80      	pop	{r7, pc}

0800163c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001642:	4b11      	ldr	r3, [pc, #68]	; (8001688 <HAL_MspInit+0x4c>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	4a10      	ldr	r2, [pc, #64]	; (8001688 <HAL_MspInit+0x4c>)
 8001648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800164c:	6413      	str	r3, [r2, #64]	; 0x40
 800164e:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <HAL_MspInit+0x4c>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001656:	607b      	str	r3, [r7, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165a:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <HAL_MspInit+0x4c>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <HAL_MspInit+0x4c>)
 8001660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001664:	6453      	str	r3, [r2, #68]	; 0x44
 8001666:	4b08      	ldr	r3, [pc, #32]	; (8001688 <HAL_MspInit+0x4c>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800166e:	603b      	str	r3, [r7, #0]
 8001670:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001672:	2200      	movs	r2, #0
 8001674:	210f      	movs	r1, #15
 8001676:	f06f 0001 	mvn.w	r0, #1
 800167a:	f001 f8f5 	bl	8002868 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40023800 	.word	0x40023800

0800168c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08e      	sub	sp, #56	; 0x38
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001694:	2300      	movs	r3, #0
 8001696:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001698:	2300      	movs	r3, #0
 800169a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800169c:	4b33      	ldr	r3, [pc, #204]	; (800176c <HAL_InitTick+0xe0>)
 800169e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a0:	4a32      	ldr	r2, [pc, #200]	; (800176c <HAL_InitTick+0xe0>)
 80016a2:	f043 0310 	orr.w	r3, r3, #16
 80016a6:	6413      	str	r3, [r2, #64]	; 0x40
 80016a8:	4b30      	ldr	r3, [pc, #192]	; (800176c <HAL_InitTick+0xe0>)
 80016aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ac:	f003 0310 	and.w	r3, r3, #16
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016b4:	f107 0210 	add.w	r2, r7, #16
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	4611      	mov	r1, r2
 80016be:	4618      	mov	r0, r3
 80016c0:	f002 fd54 	bl	800416c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016c4:	6a3b      	ldr	r3, [r7, #32]
 80016c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80016c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d103      	bne.n	80016d6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016ce:	f002 fd25 	bl	800411c <HAL_RCC_GetPCLK1Freq>
 80016d2:	6378      	str	r0, [r7, #52]	; 0x34
 80016d4:	e004      	b.n	80016e0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80016d6:	f002 fd21 	bl	800411c <HAL_RCC_GetPCLK1Freq>
 80016da:	4603      	mov	r3, r0
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016e2:	4a23      	ldr	r2, [pc, #140]	; (8001770 <HAL_InitTick+0xe4>)
 80016e4:	fba2 2303 	umull	r2, r3, r2, r3
 80016e8:	0c9b      	lsrs	r3, r3, #18
 80016ea:	3b01      	subs	r3, #1
 80016ec:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80016ee:	4b21      	ldr	r3, [pc, #132]	; (8001774 <HAL_InitTick+0xe8>)
 80016f0:	4a21      	ldr	r2, [pc, #132]	; (8001778 <HAL_InitTick+0xec>)
 80016f2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80016f4:	4b1f      	ldr	r3, [pc, #124]	; (8001774 <HAL_InitTick+0xe8>)
 80016f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016fa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80016fc:	4a1d      	ldr	r2, [pc, #116]	; (8001774 <HAL_InitTick+0xe8>)
 80016fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001700:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001702:	4b1c      	ldr	r3, [pc, #112]	; (8001774 <HAL_InitTick+0xe8>)
 8001704:	2200      	movs	r2, #0
 8001706:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001708:	4b1a      	ldr	r3, [pc, #104]	; (8001774 <HAL_InitTick+0xe8>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800170e:	4b19      	ldr	r3, [pc, #100]	; (8001774 <HAL_InitTick+0xe8>)
 8001710:	2200      	movs	r2, #0
 8001712:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001714:	4817      	ldr	r0, [pc, #92]	; (8001774 <HAL_InitTick+0xe8>)
 8001716:	f003 f983 	bl	8004a20 <HAL_TIM_Base_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001720:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001724:	2b00      	cmp	r3, #0
 8001726:	d11b      	bne.n	8001760 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001728:	4812      	ldr	r0, [pc, #72]	; (8001774 <HAL_InitTick+0xe8>)
 800172a:	f003 f9db 	bl	8004ae4 <HAL_TIM_Base_Start_IT>
 800172e:	4603      	mov	r3, r0
 8001730:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001734:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001738:	2b00      	cmp	r3, #0
 800173a:	d111      	bne.n	8001760 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800173c:	2036      	movs	r0, #54	; 0x36
 800173e:	f001 f8af 	bl	80028a0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b0f      	cmp	r3, #15
 8001746:	d808      	bhi.n	800175a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001748:	2200      	movs	r2, #0
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	2036      	movs	r0, #54	; 0x36
 800174e:	f001 f88b 	bl	8002868 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001752:	4a0a      	ldr	r2, [pc, #40]	; (800177c <HAL_InitTick+0xf0>)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6013      	str	r3, [r2, #0]
 8001758:	e002      	b.n	8001760 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001760:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001764:	4618      	mov	r0, r3
 8001766:	3738      	adds	r7, #56	; 0x38
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40023800 	.word	0x40023800
 8001770:	431bde83 	.word	0x431bde83
 8001774:	20006698 	.word	0x20006698
 8001778:	40001000 	.word	0x40001000
 800177c:	20000008 	.word	0x20000008

08001780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001784:	e7fe      	b.n	8001784 <NMI_Handler+0x4>

08001786 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800178a:	e7fe      	b.n	800178a <HardFault_Handler+0x4>

0800178c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001790:	e7fe      	b.n	8001790 <MemManage_Handler+0x4>

08001792 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001796:	e7fe      	b.n	8001796 <BusFault_Handler+0x4>

08001798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800179c:	e7fe      	b.n	800179c <UsageFault_Handler+0x4>

0800179e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80017b0:	4802      	ldr	r0, [pc, #8]	; (80017bc <DMA1_Stream1_IRQHandler+0x10>)
 80017b2:	f001 fa23 	bl	8002bfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	200069e8 	.word	0x200069e8

080017c0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80017c4:	4802      	ldr	r0, [pc, #8]	; (80017d0 <DMA1_Stream3_IRQHandler+0x10>)
 80017c6:	f001 fa19 	bl	8002bfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20006988 	.word	0x20006988

080017d4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80017d8:	4802      	ldr	r0, [pc, #8]	; (80017e4 <USART3_IRQHandler+0x10>)
 80017da:	f004 fb1d 	bl	8005e18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20006900 	.word	0x20006900

080017e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <TIM6_DAC_IRQHandler+0x10>)
 80017ee:	f003 faef 	bl	8004dd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20006698 	.word	0x20006698

080017fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return 1;
 8001800:	2301      	movs	r3, #1
}
 8001802:	4618      	mov	r0, r3
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <_kill>:

int _kill(int pid, int sig)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001816:	f018 f81d 	bl	8019854 <__errno>
 800181a:	4603      	mov	r3, r0
 800181c:	2216      	movs	r2, #22
 800181e:	601a      	str	r2, [r3, #0]
  return -1;
 8001820:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001824:	4618      	mov	r0, r3
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <_exit>:

void _exit (int status)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001834:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff ffe7 	bl	800180c <_kill>
  while (1) {}    /* Make sure we hang here */
 800183e:	e7fe      	b.n	800183e <_exit+0x12>

08001840 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	e00a      	b.n	8001868 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001852:	f3af 8000 	nop.w
 8001856:	4601      	mov	r1, r0
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	1c5a      	adds	r2, r3, #1
 800185c:	60ba      	str	r2, [r7, #8]
 800185e:	b2ca      	uxtb	r2, r1
 8001860:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	3301      	adds	r3, #1
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	697a      	ldr	r2, [r7, #20]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	429a      	cmp	r2, r3
 800186e:	dbf0      	blt.n	8001852 <_read+0x12>
  }

  return len;
 8001870:	687b      	ldr	r3, [r7, #4]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b086      	sub	sp, #24
 800187e:	af00      	add	r7, sp, #0
 8001880:	60f8      	str	r0, [r7, #12]
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	e009      	b.n	80018a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	1c5a      	adds	r2, r3, #1
 8001890:	60ba      	str	r2, [r7, #8]
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	3301      	adds	r3, #1
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	dbf1      	blt.n	800188c <_write+0x12>
  }
  return len;
 80018a8:	687b      	ldr	r3, [r7, #4]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <_close>:

int _close(int file)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80018be:	4618      	mov	r0, r3
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
 80018d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018da:	605a      	str	r2, [r3, #4]
  return 0;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <_isatty>:

int _isatty(int file)
{
 80018ea:	b480      	push	{r7}
 80018ec:	b083      	sub	sp, #12
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018f2:	2301      	movs	r3, #1
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
	...

0800191c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001924:	4a14      	ldr	r2, [pc, #80]	; (8001978 <_sbrk+0x5c>)
 8001926:	4b15      	ldr	r3, [pc, #84]	; (800197c <_sbrk+0x60>)
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001930:	4b13      	ldr	r3, [pc, #76]	; (8001980 <_sbrk+0x64>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d102      	bne.n	800193e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001938:	4b11      	ldr	r3, [pc, #68]	; (8001980 <_sbrk+0x64>)
 800193a:	4a12      	ldr	r2, [pc, #72]	; (8001984 <_sbrk+0x68>)
 800193c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800193e:	4b10      	ldr	r3, [pc, #64]	; (8001980 <_sbrk+0x64>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	429a      	cmp	r2, r3
 800194a:	d207      	bcs.n	800195c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800194c:	f017 ff82 	bl	8019854 <__errno>
 8001950:	4603      	mov	r3, r0
 8001952:	220c      	movs	r2, #12
 8001954:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001956:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800195a:	e009      	b.n	8001970 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800195c:	4b08      	ldr	r3, [pc, #32]	; (8001980 <_sbrk+0x64>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001962:	4b07      	ldr	r3, [pc, #28]	; (8001980 <_sbrk+0x64>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4413      	add	r3, r2
 800196a:	4a05      	ldr	r2, [pc, #20]	; (8001980 <_sbrk+0x64>)
 800196c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800196e:	68fb      	ldr	r3, [r7, #12]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20080000 	.word	0x20080000
 800197c:	00000400 	.word	0x00000400
 8001980:	200066e8 	.word	0x200066e8
 8001984:	20010b30 	.word	0x20010b30

08001988 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <SystemInit+0x20>)
 800198e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001992:	4a05      	ldr	r2, [pc, #20]	; (80019a8 <SystemInit+0x20>)
 8001994:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001998:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b096      	sub	sp, #88	; 0x58
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	609a      	str	r2, [r3, #8]
 80019ca:	60da      	str	r2, [r3, #12]
 80019cc:	611a      	str	r2, [r3, #16]
 80019ce:	615a      	str	r2, [r3, #20]
 80019d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019d2:	1d3b      	adds	r3, r7, #4
 80019d4:	222c      	movs	r2, #44	; 0x2c
 80019d6:	2100      	movs	r1, #0
 80019d8:	4618      	mov	r0, r3
 80019da:	f017 fdfb 	bl	80195d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019de:	4b4b      	ldr	r3, [pc, #300]	; (8001b0c <MX_TIM1_Init+0x160>)
 80019e0:	4a4b      	ldr	r2, [pc, #300]	; (8001b10 <MX_TIM1_Init+0x164>)
 80019e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80019e4:	4b49      	ldr	r3, [pc, #292]	; (8001b0c <MX_TIM1_Init+0x160>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ea:	4b48      	ldr	r3, [pc, #288]	; (8001b0c <MX_TIM1_Init+0x160>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80019f0:	4b46      	ldr	r3, [pc, #280]	; (8001b0c <MX_TIM1_Init+0x160>)
 80019f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f8:	4b44      	ldr	r3, [pc, #272]	; (8001b0c <MX_TIM1_Init+0x160>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019fe:	4b43      	ldr	r3, [pc, #268]	; (8001b0c <MX_TIM1_Init+0x160>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a04:	4b41      	ldr	r3, [pc, #260]	; (8001b0c <MX_TIM1_Init+0x160>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a0a:	4840      	ldr	r0, [pc, #256]	; (8001b0c <MX_TIM1_Init+0x160>)
 8001a0c:	f003 f8e2 	bl	8004bd4 <HAL_TIM_PWM_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001a16:	f7ff fc37 	bl	8001288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a22:	2300      	movs	r3, #0
 8001a24:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a26:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4837      	ldr	r0, [pc, #220]	; (8001b0c <MX_TIM1_Init+0x160>)
 8001a2e:	f003 ff29 	bl	8005884 <HAL_TIMEx_MasterConfigSynchronization>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001a38:	f7ff fc26 	bl	8001288 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a3c:	2360      	movs	r3, #96	; 0x60
 8001a3e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a44:	2300      	movs	r3, #0
 8001a46:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a50:	2300      	movs	r3, #0
 8001a52:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a54:	2300      	movs	r3, #0
 8001a56:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	4619      	mov	r1, r3
 8001a60:	482a      	ldr	r0, [pc, #168]	; (8001b0c <MX_TIM1_Init+0x160>)
 8001a62:	f003 fad5 	bl	8005010 <HAL_TIM_PWM_ConfigChannel>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001a6c:	f7ff fc0c 	bl	8001288 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a74:	2204      	movs	r2, #4
 8001a76:	4619      	mov	r1, r3
 8001a78:	4824      	ldr	r0, [pc, #144]	; (8001b0c <MX_TIM1_Init+0x160>)
 8001a7a:	f003 fac9 	bl	8005010 <HAL_TIM_PWM_ConfigChannel>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001a84:	f7ff fc00 	bl	8001288 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a8c:	2208      	movs	r2, #8
 8001a8e:	4619      	mov	r1, r3
 8001a90:	481e      	ldr	r0, [pc, #120]	; (8001b0c <MX_TIM1_Init+0x160>)
 8001a92:	f003 fabd 	bl	8005010 <HAL_TIM_PWM_ConfigChannel>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001a9c:	f7ff fbf4 	bl	8001288 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001aa0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001aa4:	220c      	movs	r2, #12
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4818      	ldr	r0, [pc, #96]	; (8001b0c <MX_TIM1_Init+0x160>)
 8001aaa:	f003 fab1 	bl	8005010 <HAL_TIM_PWM_ConfigChannel>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8001ab4:	f7ff fbe8 	bl	8001288 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001abc:	2300      	movs	r3, #0
 8001abe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001acc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ad0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ada:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ade:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ae8:	1d3b      	adds	r3, r7, #4
 8001aea:	4619      	mov	r1, r3
 8001aec:	4807      	ldr	r0, [pc, #28]	; (8001b0c <MX_TIM1_Init+0x160>)
 8001aee:	f003 ff57 	bl	80059a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8001af8:	f7ff fbc6 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001afc:	4803      	ldr	r0, [pc, #12]	; (8001b0c <MX_TIM1_Init+0x160>)
 8001afe:	f000 fb7d 	bl	80021fc <HAL_TIM_MspPostInit>

}
 8001b02:	bf00      	nop
 8001b04:	3758      	adds	r7, #88	; 0x58
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	200066ec 	.word	0x200066ec
 8001b10:	40010000 	.word	0x40010000

08001b14 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08c      	sub	sp, #48	; 0x30
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b1a:	f107 030c 	add.w	r3, r7, #12
 8001b1e:	2224      	movs	r2, #36	; 0x24
 8001b20:	2100      	movs	r1, #0
 8001b22:	4618      	mov	r0, r3
 8001b24:	f017 fd56 	bl	80195d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b28:	463b      	mov	r3, r7
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b32:	4b21      	ldr	r3, [pc, #132]	; (8001bb8 <MX_TIM2_Init+0xa4>)
 8001b34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b38:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b3a:	4b1f      	ldr	r3, [pc, #124]	; (8001bb8 <MX_TIM2_Init+0xa4>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b40:	4b1d      	ldr	r3, [pc, #116]	; (8001bb8 <MX_TIM2_Init+0xa4>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001b46:	4b1c      	ldr	r3, [pc, #112]	; (8001bb8 <MX_TIM2_Init+0xa4>)
 8001b48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b4c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b4e:	4b1a      	ldr	r3, [pc, #104]	; (8001bb8 <MX_TIM2_Init+0xa4>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b54:	4b18      	ldr	r3, [pc, #96]	; (8001bb8 <MX_TIM2_Init+0xa4>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b62:	2301      	movs	r3, #1
 8001b64:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b72:	2301      	movs	r3, #1
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b76:	2300      	movs	r3, #0
 8001b78:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001b7e:	f107 030c 	add.w	r3, r7, #12
 8001b82:	4619      	mov	r1, r3
 8001b84:	480c      	ldr	r0, [pc, #48]	; (8001bb8 <MX_TIM2_Init+0xa4>)
 8001b86:	f003 f87d 	bl	8004c84 <HAL_TIM_Encoder_Init>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001b90:	f7ff fb7a 	bl	8001288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b94:	2300      	movs	r3, #0
 8001b96:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b9c:	463b      	mov	r3, r7
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <MX_TIM2_Init+0xa4>)
 8001ba2:	f003 fe6f 	bl	8005884 <HAL_TIMEx_MasterConfigSynchronization>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001bac:	f7ff fb6c 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bb0:	bf00      	nop
 8001bb2:	3730      	adds	r7, #48	; 0x30
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	20006738 	.word	0x20006738

08001bbc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08c      	sub	sp, #48	; 0x30
 8001bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bc2:	f107 030c 	add.w	r3, r7, #12
 8001bc6:	2224      	movs	r2, #36	; 0x24
 8001bc8:	2100      	movs	r1, #0
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f017 fd02 	bl	80195d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd0:	463b      	mov	r3, r7
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	605a      	str	r2, [r3, #4]
 8001bd8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bda:	4b21      	ldr	r3, [pc, #132]	; (8001c60 <MX_TIM3_Init+0xa4>)
 8001bdc:	4a21      	ldr	r2, [pc, #132]	; (8001c64 <MX_TIM3_Init+0xa8>)
 8001bde:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001be0:	4b1f      	ldr	r3, [pc, #124]	; (8001c60 <MX_TIM3_Init+0xa4>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be6:	4b1e      	ldr	r3, [pc, #120]	; (8001c60 <MX_TIM3_Init+0xa4>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001bec:	4b1c      	ldr	r3, [pc, #112]	; (8001c60 <MX_TIM3_Init+0xa4>)
 8001bee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bf2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf4:	4b1a      	ldr	r3, [pc, #104]	; (8001c60 <MX_TIM3_Init+0xa4>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bfa:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <MX_TIM3_Init+0xa4>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001c00:	2301      	movs	r3, #1
 8001c02:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c04:	2300      	movs	r3, #0
 8001c06:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c14:	2300      	movs	r3, #0
 8001c16:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001c24:	f107 030c 	add.w	r3, r7, #12
 8001c28:	4619      	mov	r1, r3
 8001c2a:	480d      	ldr	r0, [pc, #52]	; (8001c60 <MX_TIM3_Init+0xa4>)
 8001c2c:	f003 f82a 	bl	8004c84 <HAL_TIM_Encoder_Init>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001c36:	f7ff fb27 	bl	8001288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c42:	463b      	mov	r3, r7
 8001c44:	4619      	mov	r1, r3
 8001c46:	4806      	ldr	r0, [pc, #24]	; (8001c60 <MX_TIM3_Init+0xa4>)
 8001c48:	f003 fe1c 	bl	8005884 <HAL_TIMEx_MasterConfigSynchronization>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001c52:	f7ff fb19 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c56:	bf00      	nop
 8001c58:	3730      	adds	r7, #48	; 0x30
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20006784 	.word	0x20006784
 8001c64:	40000400 	.word	0x40000400

08001c68 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08c      	sub	sp, #48	; 0x30
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c6e:	f107 030c 	add.w	r3, r7, #12
 8001c72:	2224      	movs	r2, #36	; 0x24
 8001c74:	2100      	movs	r1, #0
 8001c76:	4618      	mov	r0, r3
 8001c78:	f017 fcac 	bl	80195d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c7c:	463b      	mov	r3, r7
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	605a      	str	r2, [r3, #4]
 8001c84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c86:	4b21      	ldr	r3, [pc, #132]	; (8001d0c <MX_TIM4_Init+0xa4>)
 8001c88:	4a21      	ldr	r2, [pc, #132]	; (8001d10 <MX_TIM4_Init+0xa8>)
 8001c8a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001c8c:	4b1f      	ldr	r3, [pc, #124]	; (8001d0c <MX_TIM4_Init+0xa4>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c92:	4b1e      	ldr	r3, [pc, #120]	; (8001d0c <MX_TIM4_Init+0xa4>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001c98:	4b1c      	ldr	r3, [pc, #112]	; (8001d0c <MX_TIM4_Init+0xa4>)
 8001c9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c9e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca0:	4b1a      	ldr	r3, [pc, #104]	; (8001d0c <MX_TIM4_Init+0xa4>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca6:	4b19      	ldr	r3, [pc, #100]	; (8001d0c <MX_TIM4_Init+0xa4>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001cac:	2301      	movs	r3, #1
 8001cae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001cd0:	f107 030c 	add.w	r3, r7, #12
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	480d      	ldr	r0, [pc, #52]	; (8001d0c <MX_TIM4_Init+0xa4>)
 8001cd8:	f002 ffd4 	bl	8004c84 <HAL_TIM_Encoder_Init>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001ce2:	f7ff fad1 	bl	8001288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cea:	2300      	movs	r3, #0
 8001cec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001cee:	463b      	mov	r3, r7
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4806      	ldr	r0, [pc, #24]	; (8001d0c <MX_TIM4_Init+0xa4>)
 8001cf4:	f003 fdc6 	bl	8005884 <HAL_TIMEx_MasterConfigSynchronization>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001cfe:	f7ff fac3 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d02:	bf00      	nop
 8001d04:	3730      	adds	r7, #48	; 0x30
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	200067d0 	.word	0x200067d0
 8001d10:	40000800 	.word	0x40000800

08001d14 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08c      	sub	sp, #48	; 0x30
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d1a:	f107 030c 	add.w	r3, r7, #12
 8001d1e:	2224      	movs	r2, #36	; 0x24
 8001d20:	2100      	movs	r1, #0
 8001d22:	4618      	mov	r0, r3
 8001d24:	f017 fc56 	bl	80195d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d28:	463b      	mov	r3, r7
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	605a      	str	r2, [r3, #4]
 8001d30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001d32:	4b21      	ldr	r3, [pc, #132]	; (8001db8 <MX_TIM5_Init+0xa4>)
 8001d34:	4a21      	ldr	r2, [pc, #132]	; (8001dbc <MX_TIM5_Init+0xa8>)
 8001d36:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001d38:	4b1f      	ldr	r3, [pc, #124]	; (8001db8 <MX_TIM5_Init+0xa4>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d3e:	4b1e      	ldr	r3, [pc, #120]	; (8001db8 <MX_TIM5_Init+0xa4>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001d44:	4b1c      	ldr	r3, [pc, #112]	; (8001db8 <MX_TIM5_Init+0xa4>)
 8001d46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d4a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d4c:	4b1a      	ldr	r3, [pc, #104]	; (8001db8 <MX_TIM5_Init+0xa4>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d52:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <MX_TIM5_Init+0xa4>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d60:	2301      	movs	r3, #1
 8001d62:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d64:	2300      	movs	r3, #0
 8001d66:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d70:	2301      	movs	r3, #1
 8001d72:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d74:	2300      	movs	r3, #0
 8001d76:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001d7c:	f107 030c 	add.w	r3, r7, #12
 8001d80:	4619      	mov	r1, r3
 8001d82:	480d      	ldr	r0, [pc, #52]	; (8001db8 <MX_TIM5_Init+0xa4>)
 8001d84:	f002 ff7e 	bl	8004c84 <HAL_TIM_Encoder_Init>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8001d8e:	f7ff fa7b 	bl	8001288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d92:	2300      	movs	r3, #0
 8001d94:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d96:	2300      	movs	r3, #0
 8001d98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001d9a:	463b      	mov	r3, r7
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4806      	ldr	r0, [pc, #24]	; (8001db8 <MX_TIM5_Init+0xa4>)
 8001da0:	f003 fd70 	bl	8005884 <HAL_TIMEx_MasterConfigSynchronization>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8001daa:	f7ff fa6d 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001dae:	bf00      	nop
 8001db0:	3730      	adds	r7, #48	; 0x30
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	2000681c 	.word	0x2000681c
 8001dbc:	40000c00 	.word	0x40000c00

08001dc0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08c      	sub	sp, #48	; 0x30
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001dc6:	f107 030c 	add.w	r3, r7, #12
 8001dca:	2224      	movs	r2, #36	; 0x24
 8001dcc:	2100      	movs	r1, #0
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f017 fc00 	bl	80195d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd4:	463b      	mov	r3, r7
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	605a      	str	r2, [r3, #4]
 8001ddc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001dde:	4b23      	ldr	r3, [pc, #140]	; (8001e6c <MX_TIM8_Init+0xac>)
 8001de0:	4a23      	ldr	r2, [pc, #140]	; (8001e70 <MX_TIM8_Init+0xb0>)
 8001de2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001de4:	4b21      	ldr	r3, [pc, #132]	; (8001e6c <MX_TIM8_Init+0xac>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dea:	4b20      	ldr	r3, [pc, #128]	; (8001e6c <MX_TIM8_Init+0xac>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001df0:	4b1e      	ldr	r3, [pc, #120]	; (8001e6c <MX_TIM8_Init+0xac>)
 8001df2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001df6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df8:	4b1c      	ldr	r3, [pc, #112]	; (8001e6c <MX_TIM8_Init+0xac>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001dfe:	4b1b      	ldr	r3, [pc, #108]	; (8001e6c <MX_TIM8_Init+0xac>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e04:	4b19      	ldr	r3, [pc, #100]	; (8001e6c <MX_TIM8_Init+0xac>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e12:	2301      	movs	r3, #1
 8001e14:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e22:	2301      	movs	r3, #1
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e26:	2300      	movs	r3, #0
 8001e28:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001e2e:	f107 030c 	add.w	r3, r7, #12
 8001e32:	4619      	mov	r1, r3
 8001e34:	480d      	ldr	r0, [pc, #52]	; (8001e6c <MX_TIM8_Init+0xac>)
 8001e36:	f002 ff25 	bl	8004c84 <HAL_TIM_Encoder_Init>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001e40:	f7ff fa22 	bl	8001288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e44:	2300      	movs	r3, #0
 8001e46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001e50:	463b      	mov	r3, r7
 8001e52:	4619      	mov	r1, r3
 8001e54:	4805      	ldr	r0, [pc, #20]	; (8001e6c <MX_TIM8_Init+0xac>)
 8001e56:	f003 fd15 	bl	8005884 <HAL_TIMEx_MasterConfigSynchronization>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001e60:	f7ff fa12 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001e64:	bf00      	nop
 8001e66:	3730      	adds	r7, #48	; 0x30
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20006868 	.word	0x20006868
 8001e70:	40010400 	.word	0x40010400

08001e74 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b088      	sub	sp, #32
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e7a:	1d3b      	adds	r3, r7, #4
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	60da      	str	r2, [r3, #12]
 8001e86:	611a      	str	r2, [r3, #16]
 8001e88:	615a      	str	r2, [r3, #20]
 8001e8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001e8c:	4b1f      	ldr	r3, [pc, #124]	; (8001f0c <MX_TIM9_Init+0x98>)
 8001e8e:	4a20      	ldr	r2, [pc, #128]	; (8001f10 <MX_TIM9_Init+0x9c>)
 8001e90:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001e92:	4b1e      	ldr	r3, [pc, #120]	; (8001f0c <MX_TIM9_Init+0x98>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e98:	4b1c      	ldr	r3, [pc, #112]	; (8001f0c <MX_TIM9_Init+0x98>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001e9e:	4b1b      	ldr	r3, [pc, #108]	; (8001f0c <MX_TIM9_Init+0x98>)
 8001ea0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ea4:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea6:	4b19      	ldr	r3, [pc, #100]	; (8001f0c <MX_TIM9_Init+0x98>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eac:	4b17      	ldr	r3, [pc, #92]	; (8001f0c <MX_TIM9_Init+0x98>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001eb2:	4816      	ldr	r0, [pc, #88]	; (8001f0c <MX_TIM9_Init+0x98>)
 8001eb4:	f002 fe8e 	bl	8004bd4 <HAL_TIM_PWM_Init>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8001ebe:	f7ff f9e3 	bl	8001288 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ec2:	2360      	movs	r3, #96	; 0x60
 8001ec4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ed2:	1d3b      	adds	r3, r7, #4
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	480c      	ldr	r0, [pc, #48]	; (8001f0c <MX_TIM9_Init+0x98>)
 8001eda:	f003 f899 	bl	8005010 <HAL_TIM_PWM_ConfigChannel>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8001ee4:	f7ff f9d0 	bl	8001288 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ee8:	1d3b      	adds	r3, r7, #4
 8001eea:	2204      	movs	r2, #4
 8001eec:	4619      	mov	r1, r3
 8001eee:	4807      	ldr	r0, [pc, #28]	; (8001f0c <MX_TIM9_Init+0x98>)
 8001ef0:	f003 f88e 	bl	8005010 <HAL_TIM_PWM_ConfigChannel>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8001efa:	f7ff f9c5 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001efe:	4803      	ldr	r0, [pc, #12]	; (8001f0c <MX_TIM9_Init+0x98>)
 8001f00:	f000 f97c 	bl	80021fc <HAL_TIM_MspPostInit>

}
 8001f04:	bf00      	nop
 8001f06:	3720      	adds	r7, #32
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	200068b4 	.word	0x200068b4
 8001f10:	40014000 	.word	0x40014000

08001f14 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a13      	ldr	r2, [pc, #76]	; (8001f70 <HAL_TIM_PWM_MspInit+0x5c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d10c      	bne.n	8001f40 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f26:	4b13      	ldr	r3, [pc, #76]	; (8001f74 <HAL_TIM_PWM_MspInit+0x60>)
 8001f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2a:	4a12      	ldr	r2, [pc, #72]	; (8001f74 <HAL_TIM_PWM_MspInit+0x60>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	6453      	str	r3, [r2, #68]	; 0x44
 8001f32:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <HAL_TIM_PWM_MspInit+0x60>)
 8001f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8001f3e:	e010      	b.n	8001f62 <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM9)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a0c      	ldr	r2, [pc, #48]	; (8001f78 <HAL_TIM_PWM_MspInit+0x64>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d10b      	bne.n	8001f62 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <HAL_TIM_PWM_MspInit+0x60>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4e:	4a09      	ldr	r2, [pc, #36]	; (8001f74 <HAL_TIM_PWM_MspInit+0x60>)
 8001f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f54:	6453      	str	r3, [r2, #68]	; 0x44
 8001f56:	4b07      	ldr	r3, [pc, #28]	; (8001f74 <HAL_TIM_PWM_MspInit+0x60>)
 8001f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f5e:	60bb      	str	r3, [r7, #8]
 8001f60:	68bb      	ldr	r3, [r7, #8]
}
 8001f62:	bf00      	nop
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	40010000 	.word	0x40010000
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40014000 	.word	0x40014000

08001f7c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b094      	sub	sp, #80	; 0x50
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f84:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f9c:	d144      	bne.n	8002028 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f9e:	4b8e      	ldr	r3, [pc, #568]	; (80021d8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	4a8d      	ldr	r2, [pc, #564]	; (80021d8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8001faa:	4b8b      	ldr	r3, [pc, #556]	; (80021d8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb6:	4b88      	ldr	r3, [pc, #544]	; (80021d8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4a87      	ldr	r2, [pc, #540]	; (80021d8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc2:	4b85      	ldr	r3, [pc, #532]	; (80021d8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	637b      	str	r3, [r7, #52]	; 0x34
 8001fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fce:	4b82      	ldr	r3, [pc, #520]	; (80021d8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	4a81      	ldr	r2, [pc, #516]	; (80021d8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001fd4:	f043 0302 	orr.w	r3, r3, #2
 8001fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fda:	4b7f      	ldr	r3, [pc, #508]	; (80021d8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	633b      	str	r3, [r7, #48]	; 0x30
 8001fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTOR1_CHA_Pin;
 8001fe6:	2320      	movs	r3, #32
 8001fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fea:	2302      	movs	r3, #2
 8001fec:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MOTOR1_CHA_GPIO_Port, &GPIO_InitStruct);
 8001ffa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ffe:	4619      	mov	r1, r3
 8002000:	4876      	ldr	r0, [pc, #472]	; (80021dc <HAL_TIM_Encoder_MspInit+0x260>)
 8002002:	f001 f871 	bl	80030e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR1_CHB_Pin;
 8002006:	2308      	movs	r3, #8
 8002008:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200a:	2302      	movs	r3, #2
 800200c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200e:	2300      	movs	r3, #0
 8002010:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002012:	2300      	movs	r3, #0
 8002014:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002016:	2301      	movs	r3, #1
 8002018:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MOTOR1_CHB_GPIO_Port, &GPIO_InitStruct);
 800201a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800201e:	4619      	mov	r1, r3
 8002020:	486f      	ldr	r0, [pc, #444]	; (80021e0 <HAL_TIM_Encoder_MspInit+0x264>)
 8002022:	f001 f861 	bl	80030e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002026:	e0d3      	b.n	80021d0 <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM3)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a6d      	ldr	r2, [pc, #436]	; (80021e4 <HAL_TIM_Encoder_MspInit+0x268>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d144      	bne.n	80020bc <HAL_TIM_Encoder_MspInit+0x140>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002032:	4b69      	ldr	r3, [pc, #420]	; (80021d8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	4a68      	ldr	r2, [pc, #416]	; (80021d8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002038:	f043 0302 	orr.w	r3, r3, #2
 800203c:	6413      	str	r3, [r2, #64]	; 0x40
 800203e:	4b66      	ldr	r3, [pc, #408]	; (80021d8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204a:	4b63      	ldr	r3, [pc, #396]	; (80021d8 <HAL_TIM_Encoder_MspInit+0x25c>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	4a62      	ldr	r2, [pc, #392]	; (80021d8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	6313      	str	r3, [r2, #48]	; 0x30
 8002056:	4b60      	ldr	r3, [pc, #384]	; (80021d8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002060:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002062:	4b5d      	ldr	r3, [pc, #372]	; (80021d8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	4a5c      	ldr	r2, [pc, #368]	; (80021d8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002068:	f043 0302 	orr.w	r3, r3, #2
 800206c:	6313      	str	r3, [r2, #48]	; 0x30
 800206e:	4b5a      	ldr	r3, [pc, #360]	; (80021d8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	627b      	str	r3, [r7, #36]	; 0x24
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = MOTOR2_CHA_Pin;
 800207a:	2340      	movs	r3, #64	; 0x40
 800207c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207e:	2302      	movs	r3, #2
 8002080:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002086:	2300      	movs	r3, #0
 8002088:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800208a:	2302      	movs	r3, #2
 800208c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MOTOR2_CHA_GPIO_Port, &GPIO_InitStruct);
 800208e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002092:	4619      	mov	r1, r3
 8002094:	4851      	ldr	r0, [pc, #324]	; (80021dc <HAL_TIM_Encoder_MspInit+0x260>)
 8002096:	f001 f827 	bl	80030e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MOTOR2_CHB_Pin;
 800209a:	2320      	movs	r3, #32
 800209c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209e:	2302      	movs	r3, #2
 80020a0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a2:	2300      	movs	r3, #0
 80020a4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a6:	2300      	movs	r3, #0
 80020a8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020aa:	2302      	movs	r3, #2
 80020ac:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MOTOR2_CHB_GPIO_Port, &GPIO_InitStruct);
 80020ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80020b2:	4619      	mov	r1, r3
 80020b4:	484a      	ldr	r0, [pc, #296]	; (80021e0 <HAL_TIM_Encoder_MspInit+0x264>)
 80020b6:	f001 f817 	bl	80030e8 <HAL_GPIO_Init>
}
 80020ba:	e089      	b.n	80021d0 <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM4)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a49      	ldr	r2, [pc, #292]	; (80021e8 <HAL_TIM_Encoder_MspInit+0x26c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d129      	bne.n	800211a <HAL_TIM_Encoder_MspInit+0x19e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020c6:	4b44      	ldr	r3, [pc, #272]	; (80021d8 <HAL_TIM_Encoder_MspInit+0x25c>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	4a43      	ldr	r2, [pc, #268]	; (80021d8 <HAL_TIM_Encoder_MspInit+0x25c>)
 80020cc:	f043 0304 	orr.w	r3, r3, #4
 80020d0:	6413      	str	r3, [r2, #64]	; 0x40
 80020d2:	4b41      	ldr	r3, [pc, #260]	; (80021d8 <HAL_TIM_Encoder_MspInit+0x25c>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	f003 0304 	and.w	r3, r3, #4
 80020da:	623b      	str	r3, [r7, #32]
 80020dc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020de:	4b3e      	ldr	r3, [pc, #248]	; (80021d8 <HAL_TIM_Encoder_MspInit+0x25c>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	4a3d      	ldr	r2, [pc, #244]	; (80021d8 <HAL_TIM_Encoder_MspInit+0x25c>)
 80020e4:	f043 0308 	orr.w	r3, r3, #8
 80020e8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ea:	4b3b      	ldr	r3, [pc, #236]	; (80021d8 <HAL_TIM_Encoder_MspInit+0x25c>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	61fb      	str	r3, [r7, #28]
 80020f4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = MOTOR3_CHA_Pin|MOTOR3_CHB_Pin;
 80020f6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80020fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fc:	2302      	movs	r3, #2
 80020fe:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002100:	2300      	movs	r3, #0
 8002102:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002104:	2300      	movs	r3, #0
 8002106:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002108:	2302      	movs	r3, #2
 800210a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800210c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002110:	4619      	mov	r1, r3
 8002112:	4836      	ldr	r0, [pc, #216]	; (80021ec <HAL_TIM_Encoder_MspInit+0x270>)
 8002114:	f000 ffe8 	bl	80030e8 <HAL_GPIO_Init>
}
 8002118:	e05a      	b.n	80021d0 <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM5)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a34      	ldr	r2, [pc, #208]	; (80021f0 <HAL_TIM_Encoder_MspInit+0x274>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d128      	bne.n	8002176 <HAL_TIM_Encoder_MspInit+0x1fa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002124:	4b2c      	ldr	r3, [pc, #176]	; (80021d8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002128:	4a2b      	ldr	r2, [pc, #172]	; (80021d8 <HAL_TIM_Encoder_MspInit+0x25c>)
 800212a:	f043 0308 	orr.w	r3, r3, #8
 800212e:	6413      	str	r3, [r2, #64]	; 0x40
 8002130:	4b29      	ldr	r3, [pc, #164]	; (80021d8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	f003 0308 	and.w	r3, r3, #8
 8002138:	61bb      	str	r3, [r7, #24]
 800213a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800213c:	4b26      	ldr	r3, [pc, #152]	; (80021d8 <HAL_TIM_Encoder_MspInit+0x25c>)
 800213e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002140:	4a25      	ldr	r2, [pc, #148]	; (80021d8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	6313      	str	r3, [r2, #48]	; 0x30
 8002148:	4b23      	ldr	r3, [pc, #140]	; (80021d8 <HAL_TIM_Encoder_MspInit+0x25c>)
 800214a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	617b      	str	r3, [r7, #20]
 8002152:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MOTOR4_CHA_Pin|MOTOR4_CHB_Pin;
 8002154:	2303      	movs	r3, #3
 8002156:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002158:	2302      	movs	r3, #2
 800215a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002160:	2300      	movs	r3, #0
 8002162:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002164:	2302      	movs	r3, #2
 8002166:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002168:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800216c:	4619      	mov	r1, r3
 800216e:	481b      	ldr	r0, [pc, #108]	; (80021dc <HAL_TIM_Encoder_MspInit+0x260>)
 8002170:	f000 ffba 	bl	80030e8 <HAL_GPIO_Init>
}
 8002174:	e02c      	b.n	80021d0 <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM8)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a1e      	ldr	r2, [pc, #120]	; (80021f4 <HAL_TIM_Encoder_MspInit+0x278>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d127      	bne.n	80021d0 <HAL_TIM_Encoder_MspInit+0x254>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002180:	4b15      	ldr	r3, [pc, #84]	; (80021d8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002184:	4a14      	ldr	r2, [pc, #80]	; (80021d8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002186:	f043 0302 	orr.w	r3, r3, #2
 800218a:	6453      	str	r3, [r2, #68]	; 0x44
 800218c:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <HAL_TIM_Encoder_MspInit+0x25c>)
 800218e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	613b      	str	r3, [r7, #16]
 8002196:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002198:	4b0f      	ldr	r3, [pc, #60]	; (80021d8 <HAL_TIM_Encoder_MspInit+0x25c>)
 800219a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219c:	4a0e      	ldr	r2, [pc, #56]	; (80021d8 <HAL_TIM_Encoder_MspInit+0x25c>)
 800219e:	f043 0304 	orr.w	r3, r3, #4
 80021a2:	6313      	str	r3, [r2, #48]	; 0x30
 80021a4:	4b0c      	ldr	r3, [pc, #48]	; (80021d8 <HAL_TIM_Encoder_MspInit+0x25c>)
 80021a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR5_CHA_Pin|MOTOR5_CHB_Pin;
 80021b0:	23c0      	movs	r3, #192	; 0xc0
 80021b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b4:	2302      	movs	r3, #2
 80021b6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021bc:	2300      	movs	r3, #0
 80021be:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80021c0:	2303      	movs	r3, #3
 80021c2:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80021c8:	4619      	mov	r1, r3
 80021ca:	480b      	ldr	r0, [pc, #44]	; (80021f8 <HAL_TIM_Encoder_MspInit+0x27c>)
 80021cc:	f000 ff8c 	bl	80030e8 <HAL_GPIO_Init>
}
 80021d0:	bf00      	nop
 80021d2:	3750      	adds	r7, #80	; 0x50
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40023800 	.word	0x40023800
 80021dc:	40020000 	.word	0x40020000
 80021e0:	40020400 	.word	0x40020400
 80021e4:	40000400 	.word	0x40000400
 80021e8:	40000800 	.word	0x40000800
 80021ec:	40020c00 	.word	0x40020c00
 80021f0:	40000c00 	.word	0x40000c00
 80021f4:	40010400 	.word	0x40010400
 80021f8:	40020800 	.word	0x40020800

080021fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08a      	sub	sp, #40	; 0x28
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002204:	f107 0314 	add.w	r3, r7, #20
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a22      	ldr	r2, [pc, #136]	; (80022a4 <HAL_TIM_MspPostInit+0xa8>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d11d      	bne.n	800225a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800221e:	4b22      	ldr	r3, [pc, #136]	; (80022a8 <HAL_TIM_MspPostInit+0xac>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	4a21      	ldr	r2, [pc, #132]	; (80022a8 <HAL_TIM_MspPostInit+0xac>)
 8002224:	f043 0310 	orr.w	r3, r3, #16
 8002228:	6313      	str	r3, [r2, #48]	; 0x30
 800222a:	4b1f      	ldr	r3, [pc, #124]	; (80022a8 <HAL_TIM_MspPostInit+0xac>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	f003 0310 	and.w	r3, r3, #16
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MOTOR1_PWM_Pin|MOTOR2_PWM_Pin|MOTOR3_PWM_Pin|MOTOR4_PWM_Pin;
 8002236:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800223a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223c:	2302      	movs	r3, #2
 800223e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	2300      	movs	r3, #0
 8002242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002244:	2300      	movs	r3, #0
 8002246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002248:	2301      	movs	r3, #1
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800224c:	f107 0314 	add.w	r3, r7, #20
 8002250:	4619      	mov	r1, r3
 8002252:	4816      	ldr	r0, [pc, #88]	; (80022ac <HAL_TIM_MspPostInit+0xb0>)
 8002254:	f000 ff48 	bl	80030e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8002258:	e020      	b.n	800229c <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM9)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a14      	ldr	r2, [pc, #80]	; (80022b0 <HAL_TIM_MspPostInit+0xb4>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d11b      	bne.n	800229c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002264:	4b10      	ldr	r3, [pc, #64]	; (80022a8 <HAL_TIM_MspPostInit+0xac>)
 8002266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002268:	4a0f      	ldr	r2, [pc, #60]	; (80022a8 <HAL_TIM_MspPostInit+0xac>)
 800226a:	f043 0310 	orr.w	r3, r3, #16
 800226e:	6313      	str	r3, [r2, #48]	; 0x30
 8002270:	4b0d      	ldr	r3, [pc, #52]	; (80022a8 <HAL_TIM_MspPostInit+0xac>)
 8002272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002274:	f003 0310 	and.w	r3, r3, #16
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR5_PWM_Pin|MOTOR6_PWM_Pin;
 800227c:	2360      	movs	r3, #96	; 0x60
 800227e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002280:	2302      	movs	r3, #2
 8002282:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002284:	2300      	movs	r3, #0
 8002286:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002288:	2300      	movs	r3, #0
 800228a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800228c:	2303      	movs	r3, #3
 800228e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002290:	f107 0314 	add.w	r3, r7, #20
 8002294:	4619      	mov	r1, r3
 8002296:	4805      	ldr	r0, [pc, #20]	; (80022ac <HAL_TIM_MspPostInit+0xb0>)
 8002298:	f000 ff26 	bl	80030e8 <HAL_GPIO_Init>
}
 800229c:	bf00      	nop
 800229e:	3728      	adds	r7, #40	; 0x28
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40010000 	.word	0x40010000
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40021000 	.word	0x40021000
 80022b0:	40014000 	.word	0x40014000

080022b4 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80022b8:	4b14      	ldr	r3, [pc, #80]	; (800230c <MX_USART3_UART_Init+0x58>)
 80022ba:	4a15      	ldr	r2, [pc, #84]	; (8002310 <MX_USART3_UART_Init+0x5c>)
 80022bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80022be:	4b13      	ldr	r3, [pc, #76]	; (800230c <MX_USART3_UART_Init+0x58>)
 80022c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80022c6:	4b11      	ldr	r3, [pc, #68]	; (800230c <MX_USART3_UART_Init+0x58>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80022cc:	4b0f      	ldr	r3, [pc, #60]	; (800230c <MX_USART3_UART_Init+0x58>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80022d2:	4b0e      	ldr	r3, [pc, #56]	; (800230c <MX_USART3_UART_Init+0x58>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80022d8:	4b0c      	ldr	r3, [pc, #48]	; (800230c <MX_USART3_UART_Init+0x58>)
 80022da:	220c      	movs	r2, #12
 80022dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022de:	4b0b      	ldr	r3, [pc, #44]	; (800230c <MX_USART3_UART_Init+0x58>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80022e4:	4b09      	ldr	r3, [pc, #36]	; (800230c <MX_USART3_UART_Init+0x58>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022ea:	4b08      	ldr	r3, [pc, #32]	; (800230c <MX_USART3_UART_Init+0x58>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022f0:	4b06      	ldr	r3, [pc, #24]	; (800230c <MX_USART3_UART_Init+0x58>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80022f6:	4805      	ldr	r0, [pc, #20]	; (800230c <MX_USART3_UART_Init+0x58>)
 80022f8:	f003 fbee 	bl	8005ad8 <HAL_UART_Init>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002302:	f7fe ffc1 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	20006900 	.word	0x20006900
 8002310:	40004800 	.word	0x40004800

08002314 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b0ae      	sub	sp, #184	; 0xb8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800231c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	60da      	str	r2, [r3, #12]
 800232a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800232c:	f107 0314 	add.w	r3, r7, #20
 8002330:	2290      	movs	r2, #144	; 0x90
 8002332:	2100      	movs	r1, #0
 8002334:	4618      	mov	r0, r3
 8002336:	f017 f94d 	bl	80195d4 <memset>
  if(uartHandle->Instance==USART3)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a56      	ldr	r2, [pc, #344]	; (8002498 <HAL_UART_MspInit+0x184>)
 8002340:	4293      	cmp	r3, r2
 8002342:	f040 80a4 	bne.w	800248e <HAL_UART_MspInit+0x17a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002346:	f44f 7380 	mov.w	r3, #256	; 0x100
 800234a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800234c:	2300      	movs	r3, #0
 800234e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002350:	f107 0314 	add.w	r3, r7, #20
 8002354:	4618      	mov	r0, r3
 8002356:	f001 ff3b 	bl	80041d0 <HAL_RCCEx_PeriphCLKConfig>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002360:	f7fe ff92 	bl	8001288 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002364:	4b4d      	ldr	r3, [pc, #308]	; (800249c <HAL_UART_MspInit+0x188>)
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	4a4c      	ldr	r2, [pc, #304]	; (800249c <HAL_UART_MspInit+0x188>)
 800236a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800236e:	6413      	str	r3, [r2, #64]	; 0x40
 8002370:	4b4a      	ldr	r3, [pc, #296]	; (800249c <HAL_UART_MspInit+0x188>)
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002378:	613b      	str	r3, [r7, #16]
 800237a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800237c:	4b47      	ldr	r3, [pc, #284]	; (800249c <HAL_UART_MspInit+0x188>)
 800237e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002380:	4a46      	ldr	r2, [pc, #280]	; (800249c <HAL_UART_MspInit+0x188>)
 8002382:	f043 0308 	orr.w	r3, r3, #8
 8002386:	6313      	str	r3, [r2, #48]	; 0x30
 8002388:	4b44      	ldr	r3, [pc, #272]	; (800249c <HAL_UART_MspInit+0x188>)
 800238a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238c:	f003 0308 	and.w	r3, r3, #8
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002394:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002398:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239c:	2302      	movs	r3, #2
 800239e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a8:	2303      	movs	r3, #3
 80023aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023ae:	2307      	movs	r3, #7
 80023b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80023b8:	4619      	mov	r1, r3
 80023ba:	4839      	ldr	r0, [pc, #228]	; (80024a0 <HAL_UART_MspInit+0x18c>)
 80023bc:	f000 fe94 	bl	80030e8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80023c0:	4b38      	ldr	r3, [pc, #224]	; (80024a4 <HAL_UART_MspInit+0x190>)
 80023c2:	4a39      	ldr	r2, [pc, #228]	; (80024a8 <HAL_UART_MspInit+0x194>)
 80023c4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80023c6:	4b37      	ldr	r3, [pc, #220]	; (80024a4 <HAL_UART_MspInit+0x190>)
 80023c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023cc:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023ce:	4b35      	ldr	r3, [pc, #212]	; (80024a4 <HAL_UART_MspInit+0x190>)
 80023d0:	2240      	movs	r2, #64	; 0x40
 80023d2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023d4:	4b33      	ldr	r3, [pc, #204]	; (80024a4 <HAL_UART_MspInit+0x190>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023da:	4b32      	ldr	r3, [pc, #200]	; (80024a4 <HAL_UART_MspInit+0x190>)
 80023dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023e0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023e2:	4b30      	ldr	r3, [pc, #192]	; (80024a4 <HAL_UART_MspInit+0x190>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023e8:	4b2e      	ldr	r3, [pc, #184]	; (80024a4 <HAL_UART_MspInit+0x190>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80023ee:	4b2d      	ldr	r3, [pc, #180]	; (80024a4 <HAL_UART_MspInit+0x190>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80023f4:	4b2b      	ldr	r3, [pc, #172]	; (80024a4 <HAL_UART_MspInit+0x190>)
 80023f6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80023fa:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023fc:	4b29      	ldr	r3, [pc, #164]	; (80024a4 <HAL_UART_MspInit+0x190>)
 80023fe:	2200      	movs	r2, #0
 8002400:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002402:	4828      	ldr	r0, [pc, #160]	; (80024a4 <HAL_UART_MspInit+0x190>)
 8002404:	f000 fa5a 	bl	80028bc <HAL_DMA_Init>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 800240e:	f7fe ff3b 	bl	8001288 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a23      	ldr	r2, [pc, #140]	; (80024a4 <HAL_UART_MspInit+0x190>)
 8002416:	671a      	str	r2, [r3, #112]	; 0x70
 8002418:	4a22      	ldr	r2, [pc, #136]	; (80024a4 <HAL_UART_MspInit+0x190>)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800241e:	4b23      	ldr	r3, [pc, #140]	; (80024ac <HAL_UART_MspInit+0x198>)
 8002420:	4a23      	ldr	r2, [pc, #140]	; (80024b0 <HAL_UART_MspInit+0x19c>)
 8002422:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002424:	4b21      	ldr	r3, [pc, #132]	; (80024ac <HAL_UART_MspInit+0x198>)
 8002426:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800242a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800242c:	4b1f      	ldr	r3, [pc, #124]	; (80024ac <HAL_UART_MspInit+0x198>)
 800242e:	2200      	movs	r2, #0
 8002430:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002432:	4b1e      	ldr	r3, [pc, #120]	; (80024ac <HAL_UART_MspInit+0x198>)
 8002434:	2200      	movs	r2, #0
 8002436:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002438:	4b1c      	ldr	r3, [pc, #112]	; (80024ac <HAL_UART_MspInit+0x198>)
 800243a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800243e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002440:	4b1a      	ldr	r3, [pc, #104]	; (80024ac <HAL_UART_MspInit+0x198>)
 8002442:	2200      	movs	r2, #0
 8002444:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002446:	4b19      	ldr	r3, [pc, #100]	; (80024ac <HAL_UART_MspInit+0x198>)
 8002448:	2200      	movs	r2, #0
 800244a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800244c:	4b17      	ldr	r3, [pc, #92]	; (80024ac <HAL_UART_MspInit+0x198>)
 800244e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002452:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002454:	4b15      	ldr	r3, [pc, #84]	; (80024ac <HAL_UART_MspInit+0x198>)
 8002456:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800245a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800245c:	4b13      	ldr	r3, [pc, #76]	; (80024ac <HAL_UART_MspInit+0x198>)
 800245e:	2200      	movs	r2, #0
 8002460:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002462:	4812      	ldr	r0, [pc, #72]	; (80024ac <HAL_UART_MspInit+0x198>)
 8002464:	f000 fa2a 	bl	80028bc <HAL_DMA_Init>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <HAL_UART_MspInit+0x15e>
    {
      Error_Handler();
 800246e:	f7fe ff0b 	bl	8001288 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a0d      	ldr	r2, [pc, #52]	; (80024ac <HAL_UART_MspInit+0x198>)
 8002476:	675a      	str	r2, [r3, #116]	; 0x74
 8002478:	4a0c      	ldr	r2, [pc, #48]	; (80024ac <HAL_UART_MspInit+0x198>)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800247e:	2200      	movs	r2, #0
 8002480:	2105      	movs	r1, #5
 8002482:	2027      	movs	r0, #39	; 0x27
 8002484:	f000 f9f0 	bl	8002868 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002488:	2027      	movs	r0, #39	; 0x27
 800248a:	f000 fa09 	bl	80028a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800248e:	bf00      	nop
 8002490:	37b8      	adds	r7, #184	; 0xb8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40004800 	.word	0x40004800
 800249c:	40023800 	.word	0x40023800
 80024a0:	40020c00 	.word	0x40020c00
 80024a4:	20006988 	.word	0x20006988
 80024a8:	40026058 	.word	0x40026058
 80024ac:	200069e8 	.word	0x200069e8
 80024b0:	40026028 	.word	0x40026028

080024b4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80024b8:	4b14      	ldr	r3, [pc, #80]	; (800250c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80024be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80024c0:	4b12      	ldr	r3, [pc, #72]	; (800250c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024c2:	2206      	movs	r2, #6
 80024c4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80024c6:	4b11      	ldr	r3, [pc, #68]	; (800250c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024c8:	2202      	movs	r2, #2
 80024ca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80024cc:	4b0f      	ldr	r3, [pc, #60]	; (800250c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80024d2:	4b0e      	ldr	r3, [pc, #56]	; (800250c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024d4:	2202      	movs	r2, #2
 80024d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80024d8:	4b0c      	ldr	r3, [pc, #48]	; (800250c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024da:	2201      	movs	r2, #1
 80024dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80024de:	4b0b      	ldr	r3, [pc, #44]	; (800250c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80024e4:	4b09      	ldr	r3, [pc, #36]	; (800250c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80024ea:	4b08      	ldr	r3, [pc, #32]	; (800250c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024ec:	2201      	movs	r2, #1
 80024ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80024f0:	4b06      	ldr	r3, [pc, #24]	; (800250c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80024f6:	4805      	ldr	r0, [pc, #20]	; (800250c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024f8:	f000 ffbb 	bl	8003472 <HAL_PCD_Init>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002502:	f7fe fec1 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20006a48 	.word	0x20006a48

08002510 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b0ae      	sub	sp, #184	; 0xb8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002518:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	605a      	str	r2, [r3, #4]
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	60da      	str	r2, [r3, #12]
 8002526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002528:	f107 0314 	add.w	r3, r7, #20
 800252c:	2290      	movs	r2, #144	; 0x90
 800252e:	2100      	movs	r1, #0
 8002530:	4618      	mov	r0, r3
 8002532:	f017 f84f 	bl	80195d4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800253e:	d159      	bne.n	80025f4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002540:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002544:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002546:	2300      	movs	r3, #0
 8002548:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800254c:	f107 0314 	add.w	r3, r7, #20
 8002550:	4618      	mov	r0, r3
 8002552:	f001 fe3d 	bl	80041d0 <HAL_RCCEx_PeriphCLKConfig>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800255c:	f7fe fe94 	bl	8001288 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002560:	4b26      	ldr	r3, [pc, #152]	; (80025fc <HAL_PCD_MspInit+0xec>)
 8002562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002564:	4a25      	ldr	r2, [pc, #148]	; (80025fc <HAL_PCD_MspInit+0xec>)
 8002566:	f043 0301 	orr.w	r3, r3, #1
 800256a:	6313      	str	r3, [r2, #48]	; 0x30
 800256c:	4b23      	ldr	r3, [pc, #140]	; (80025fc <HAL_PCD_MspInit+0xec>)
 800256e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002578:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800257c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002580:	2302      	movs	r3, #2
 8002582:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002586:	2300      	movs	r3, #0
 8002588:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800258c:	2303      	movs	r3, #3
 800258e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002592:	230a      	movs	r3, #10
 8002594:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002598:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800259c:	4619      	mov	r1, r3
 800259e:	4818      	ldr	r0, [pc, #96]	; (8002600 <HAL_PCD_MspInit+0xf0>)
 80025a0:	f000 fda2 	bl	80030e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80025a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025ac:	2300      	movs	r3, #0
 80025ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b2:	2300      	movs	r3, #0
 80025b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80025b8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80025bc:	4619      	mov	r1, r3
 80025be:	4810      	ldr	r0, [pc, #64]	; (8002600 <HAL_PCD_MspInit+0xf0>)
 80025c0:	f000 fd92 	bl	80030e8 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80025c4:	4b0d      	ldr	r3, [pc, #52]	; (80025fc <HAL_PCD_MspInit+0xec>)
 80025c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025c8:	4a0c      	ldr	r2, [pc, #48]	; (80025fc <HAL_PCD_MspInit+0xec>)
 80025ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025ce:	6353      	str	r3, [r2, #52]	; 0x34
 80025d0:	4b0a      	ldr	r3, [pc, #40]	; (80025fc <HAL_PCD_MspInit+0xec>)
 80025d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	4b07      	ldr	r3, [pc, #28]	; (80025fc <HAL_PCD_MspInit+0xec>)
 80025de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e0:	4a06      	ldr	r2, [pc, #24]	; (80025fc <HAL_PCD_MspInit+0xec>)
 80025e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025e6:	6453      	str	r3, [r2, #68]	; 0x44
 80025e8:	4b04      	ldr	r3, [pc, #16]	; (80025fc <HAL_PCD_MspInit+0xec>)
 80025ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025f0:	60bb      	str	r3, [r7, #8]
 80025f2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80025f4:	bf00      	nop
 80025f6:	37b8      	adds	r7, #184	; 0xb8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40023800 	.word	0x40023800
 8002600:	40020000 	.word	0x40020000

08002604 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002604:	f8df d034 	ldr.w	sp, [pc, #52]	; 800263c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002608:	480d      	ldr	r0, [pc, #52]	; (8002640 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800260a:	490e      	ldr	r1, [pc, #56]	; (8002644 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800260c:	4a0e      	ldr	r2, [pc, #56]	; (8002648 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800260e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002610:	e002      	b.n	8002618 <LoopCopyDataInit>

08002612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002616:	3304      	adds	r3, #4

08002618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800261a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800261c:	d3f9      	bcc.n	8002612 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800261e:	4a0b      	ldr	r2, [pc, #44]	; (800264c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002620:	4c0b      	ldr	r4, [pc, #44]	; (8002650 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002624:	e001      	b.n	800262a <LoopFillZerobss>

08002626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002628:	3204      	adds	r2, #4

0800262a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800262a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800262c:	d3fb      	bcc.n	8002626 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800262e:	f7ff f9ab 	bl	8001988 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002632:	f017 f915 	bl	8019860 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002636:	f7fe fd72 	bl	800111e <main>
  bx  lr    
 800263a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800263c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002644:	2000213c 	.word	0x2000213c
  ldr r2, =_sidata
 8002648:	0801c0a0 	.word	0x0801c0a0
  ldr r2, =_sbss
 800264c:	20002140 	.word	0x20002140
  ldr r4, =_ebss
 8002650:	20010b30 	.word	0x20010b30

08002654 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002654:	e7fe      	b.n	8002654 <ADC_IRQHandler>

08002656 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800265a:	2003      	movs	r0, #3
 800265c:	f000 f8f9 	bl	8002852 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002660:	200f      	movs	r0, #15
 8002662:	f7ff f813 	bl	800168c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002666:	f7fe ffe9 	bl	800163c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	bd80      	pop	{r7, pc}

08002670 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002674:	4b06      	ldr	r3, [pc, #24]	; (8002690 <HAL_IncTick+0x20>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	461a      	mov	r2, r3
 800267a:	4b06      	ldr	r3, [pc, #24]	; (8002694 <HAL_IncTick+0x24>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4413      	add	r3, r2
 8002680:	4a04      	ldr	r2, [pc, #16]	; (8002694 <HAL_IncTick+0x24>)
 8002682:	6013      	str	r3, [r2, #0]
}
 8002684:	bf00      	nop
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	2000000c 	.word	0x2000000c
 8002694:	20006f50 	.word	0x20006f50

08002698 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  return uwTick;
 800269c:	4b03      	ldr	r3, [pc, #12]	; (80026ac <HAL_GetTick+0x14>)
 800269e:	681b      	ldr	r3, [r3, #0]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	20006f50 	.word	0x20006f50

080026b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026b8:	f7ff ffee 	bl	8002698 <HAL_GetTick>
 80026bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026c8:	d005      	beq.n	80026d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026ca:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <HAL_Delay+0x44>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	461a      	mov	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4413      	add	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026d6:	bf00      	nop
 80026d8:	f7ff ffde 	bl	8002698 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d8f7      	bhi.n	80026d8 <HAL_Delay+0x28>
  {
  }
}
 80026e8:	bf00      	nop
 80026ea:	bf00      	nop
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	2000000c 	.word	0x2000000c

080026f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002708:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <__NVIC_SetPriorityGrouping+0x40>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800270e:	68ba      	ldr	r2, [r7, #8]
 8002710:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002714:	4013      	ands	r3, r2
 8002716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002720:	4b06      	ldr	r3, [pc, #24]	; (800273c <__NVIC_SetPriorityGrouping+0x44>)
 8002722:	4313      	orrs	r3, r2
 8002724:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002726:	4a04      	ldr	r2, [pc, #16]	; (8002738 <__NVIC_SetPriorityGrouping+0x40>)
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	60d3      	str	r3, [r2, #12]
}
 800272c:	bf00      	nop
 800272e:	3714      	adds	r7, #20
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	e000ed00 	.word	0xe000ed00
 800273c:	05fa0000 	.word	0x05fa0000

08002740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002744:	4b04      	ldr	r3, [pc, #16]	; (8002758 <__NVIC_GetPriorityGrouping+0x18>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	0a1b      	lsrs	r3, r3, #8
 800274a:	f003 0307 	and.w	r3, r3, #7
}
 800274e:	4618      	mov	r0, r3
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	4603      	mov	r3, r0
 8002764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276a:	2b00      	cmp	r3, #0
 800276c:	db0b      	blt.n	8002786 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800276e:	79fb      	ldrb	r3, [r7, #7]
 8002770:	f003 021f 	and.w	r2, r3, #31
 8002774:	4907      	ldr	r1, [pc, #28]	; (8002794 <__NVIC_EnableIRQ+0x38>)
 8002776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277a:	095b      	lsrs	r3, r3, #5
 800277c:	2001      	movs	r0, #1
 800277e:	fa00 f202 	lsl.w	r2, r0, r2
 8002782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	e000e100 	.word	0xe000e100

08002798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	6039      	str	r1, [r7, #0]
 80027a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	db0a      	blt.n	80027c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	b2da      	uxtb	r2, r3
 80027b0:	490c      	ldr	r1, [pc, #48]	; (80027e4 <__NVIC_SetPriority+0x4c>)
 80027b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b6:	0112      	lsls	r2, r2, #4
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	440b      	add	r3, r1
 80027bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027c0:	e00a      	b.n	80027d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	4908      	ldr	r1, [pc, #32]	; (80027e8 <__NVIC_SetPriority+0x50>)
 80027c8:	79fb      	ldrb	r3, [r7, #7]
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	3b04      	subs	r3, #4
 80027d0:	0112      	lsls	r2, r2, #4
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	440b      	add	r3, r1
 80027d6:	761a      	strb	r2, [r3, #24]
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	e000e100 	.word	0xe000e100
 80027e8:	e000ed00 	.word	0xe000ed00

080027ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b089      	sub	sp, #36	; 0x24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	f1c3 0307 	rsb	r3, r3, #7
 8002806:	2b04      	cmp	r3, #4
 8002808:	bf28      	it	cs
 800280a:	2304      	movcs	r3, #4
 800280c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3304      	adds	r3, #4
 8002812:	2b06      	cmp	r3, #6
 8002814:	d902      	bls.n	800281c <NVIC_EncodePriority+0x30>
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	3b03      	subs	r3, #3
 800281a:	e000      	b.n	800281e <NVIC_EncodePriority+0x32>
 800281c:	2300      	movs	r3, #0
 800281e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002820:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	43da      	mvns	r2, r3
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	401a      	ands	r2, r3
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002834:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	fa01 f303 	lsl.w	r3, r1, r3
 800283e:	43d9      	mvns	r1, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002844:	4313      	orrs	r3, r2
         );
}
 8002846:	4618      	mov	r0, r3
 8002848:	3724      	adds	r7, #36	; 0x24
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7ff ff4c 	bl	80026f8 <__NVIC_SetPriorityGrouping>
}
 8002860:	bf00      	nop
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
 8002874:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002876:	2300      	movs	r3, #0
 8002878:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800287a:	f7ff ff61 	bl	8002740 <__NVIC_GetPriorityGrouping>
 800287e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	68b9      	ldr	r1, [r7, #8]
 8002884:	6978      	ldr	r0, [r7, #20]
 8002886:	f7ff ffb1 	bl	80027ec <NVIC_EncodePriority>
 800288a:	4602      	mov	r2, r0
 800288c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002890:	4611      	mov	r1, r2
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff ff80 	bl	8002798 <__NVIC_SetPriority>
}
 8002898:	bf00      	nop
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff ff54 	bl	800275c <__NVIC_EnableIRQ>
}
 80028b4:	bf00      	nop
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028c4:	2300      	movs	r3, #0
 80028c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80028c8:	f7ff fee6 	bl	8002698 <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e099      	b.n	8002a0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2202      	movs	r2, #2
 80028dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 0201 	bic.w	r2, r2, #1
 80028f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028f8:	e00f      	b.n	800291a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028fa:	f7ff fecd 	bl	8002698 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b05      	cmp	r3, #5
 8002906:	d908      	bls.n	800291a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2220      	movs	r2, #32
 800290c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2203      	movs	r2, #3
 8002912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e078      	b.n	8002a0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1e8      	bne.n	80028fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	4b38      	ldr	r3, [pc, #224]	; (8002a14 <HAL_DMA_Init+0x158>)
 8002934:	4013      	ands	r3, r2
 8002936:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002946:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002952:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800295e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	4313      	orrs	r3, r2
 800296a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002970:	2b04      	cmp	r3, #4
 8002972:	d107      	bne.n	8002984 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297c:	4313      	orrs	r3, r2
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	4313      	orrs	r3, r2
 8002982:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	f023 0307 	bic.w	r3, r3, #7
 800299a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d117      	bne.n	80029de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00e      	beq.n	80029de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 fb15 	bl	8002ff0 <DMA_CheckFifoParam>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d008      	beq.n	80029de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2240      	movs	r2, #64	; 0x40
 80029d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80029da:	2301      	movs	r3, #1
 80029dc:	e016      	b.n	8002a0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 facc 	bl	8002f84 <DMA_CalcBaseAndBitshift>
 80029ec:	4603      	mov	r3, r0
 80029ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f4:	223f      	movs	r2, #63	; 0x3f
 80029f6:	409a      	lsls	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3718      	adds	r7, #24
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	e010803f 	.word	0xe010803f

08002a18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
 8002a24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a26:	2300      	movs	r3, #0
 8002a28:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d101      	bne.n	8002a3e <HAL_DMA_Start_IT+0x26>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e048      	b.n	8002ad0 <HAL_DMA_Start_IT+0xb8>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d137      	bne.n	8002ac2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2202      	movs	r2, #2
 8002a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	68b9      	ldr	r1, [r7, #8]
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f000 fa5e 	bl	8002f28 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a70:	223f      	movs	r2, #63	; 0x3f
 8002a72:	409a      	lsls	r2, r3
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f042 0216 	orr.w	r2, r2, #22
 8002a86:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	695a      	ldr	r2, [r3, #20]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a96:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d007      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f042 0208 	orr.w	r2, r2, #8
 8002aae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f042 0201 	orr.w	r2, r2, #1
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	e005      	b.n	8002ace <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002aca:	2302      	movs	r3, #2
 8002acc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002ace:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3718      	adds	r7, #24
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ae6:	f7ff fdd7 	bl	8002698 <HAL_GetTick>
 8002aea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d008      	beq.n	8002b0a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2280      	movs	r2, #128	; 0x80
 8002afc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e052      	b.n	8002bb0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 0216 	bic.w	r2, r2, #22
 8002b18:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	695a      	ldr	r2, [r3, #20]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b28:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d103      	bne.n	8002b3a <HAL_DMA_Abort+0x62>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d007      	beq.n	8002b4a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 0208 	bic.w	r2, r2, #8
 8002b48:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 0201 	bic.w	r2, r2, #1
 8002b58:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b5a:	e013      	b.n	8002b84 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b5c:	f7ff fd9c 	bl	8002698 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b05      	cmp	r3, #5
 8002b68:	d90c      	bls.n	8002b84 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2220      	movs	r2, #32
 8002b6e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2203      	movs	r2, #3
 8002b74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e015      	b.n	8002bb0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1e4      	bne.n	8002b5c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b96:	223f      	movs	r2, #63	; 0x3f
 8002b98:	409a      	lsls	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d004      	beq.n	8002bd6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2280      	movs	r2, #128	; 0x80
 8002bd0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e00c      	b.n	8002bf0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2205      	movs	r2, #5
 8002bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 0201 	bic.w	r2, r2, #1
 8002bec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002c04:	2300      	movs	r3, #0
 8002c06:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002c08:	4b8e      	ldr	r3, [pc, #568]	; (8002e44 <HAL_DMA_IRQHandler+0x248>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a8e      	ldr	r2, [pc, #568]	; (8002e48 <HAL_DMA_IRQHandler+0x24c>)
 8002c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c12:	0a9b      	lsrs	r3, r3, #10
 8002c14:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c26:	2208      	movs	r2, #8
 8002c28:	409a      	lsls	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d01a      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d013      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0204 	bic.w	r2, r2, #4
 8002c4e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c54:	2208      	movs	r2, #8
 8002c56:	409a      	lsls	r2, r3
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c60:	f043 0201 	orr.w	r2, r3, #1
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	409a      	lsls	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	4013      	ands	r3, r2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d012      	beq.n	8002c9e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00b      	beq.n	8002c9e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	409a      	lsls	r2, r3
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c96:	f043 0202 	orr.w	r2, r3, #2
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca2:	2204      	movs	r2, #4
 8002ca4:	409a      	lsls	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d012      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00b      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc0:	2204      	movs	r2, #4
 8002cc2:	409a      	lsls	r2, r3
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ccc:	f043 0204 	orr.w	r2, r3, #4
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd8:	2210      	movs	r2, #16
 8002cda:	409a      	lsls	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d043      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0308 	and.w	r3, r3, #8
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d03c      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf6:	2210      	movs	r2, #16
 8002cf8:	409a      	lsls	r2, r3
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d018      	beq.n	8002d3e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d108      	bne.n	8002d2c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d024      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	4798      	blx	r3
 8002d2a:	e01f      	b.n	8002d6c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d01b      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	4798      	blx	r3
 8002d3c:	e016      	b.n	8002d6c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d107      	bne.n	8002d5c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 0208 	bic.w	r2, r2, #8
 8002d5a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d70:	2220      	movs	r2, #32
 8002d72:	409a      	lsls	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	4013      	ands	r3, r2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f000 808f 	beq.w	8002e9c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0310 	and.w	r3, r3, #16
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 8087 	beq.w	8002e9c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d92:	2220      	movs	r2, #32
 8002d94:	409a      	lsls	r2, r3
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b05      	cmp	r3, #5
 8002da4:	d136      	bne.n	8002e14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 0216 	bic.w	r2, r2, #22
 8002db4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	695a      	ldr	r2, [r3, #20]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dc4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d103      	bne.n	8002dd6 <HAL_DMA_IRQHandler+0x1da>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d007      	beq.n	8002de6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 0208 	bic.w	r2, r2, #8
 8002de4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dea:	223f      	movs	r2, #63	; 0x3f
 8002dec:	409a      	lsls	r2, r3
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d07e      	beq.n	8002f08 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	4798      	blx	r3
        }
        return;
 8002e12:	e079      	b.n	8002f08 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d01d      	beq.n	8002e5e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10d      	bne.n	8002e4c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d031      	beq.n	8002e9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	4798      	blx	r3
 8002e40:	e02c      	b.n	8002e9c <HAL_DMA_IRQHandler+0x2a0>
 8002e42:	bf00      	nop
 8002e44:	20000004 	.word	0x20000004
 8002e48:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d023      	beq.n	8002e9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	4798      	blx	r3
 8002e5c:	e01e      	b.n	8002e9c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d10f      	bne.n	8002e8c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 0210 	bic.w	r2, r2, #16
 8002e7a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d032      	beq.n	8002f0a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d022      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2205      	movs	r2, #5
 8002eb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0201 	bic.w	r2, r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	3301      	adds	r3, #1
 8002ecc:	60bb      	str	r3, [r7, #8]
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d307      	bcc.n	8002ee4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1f2      	bne.n	8002ec8 <HAL_DMA_IRQHandler+0x2cc>
 8002ee2:	e000      	b.n	8002ee6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ee4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d005      	beq.n	8002f0a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	4798      	blx	r3
 8002f06:	e000      	b.n	8002f0a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f08:	bf00      	nop
    }
  }
}
 8002f0a:	3718      	adds	r7, #24
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
 8002f34:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f44:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	2b40      	cmp	r3, #64	; 0x40
 8002f54:	d108      	bne.n	8002f68 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f66:	e007      	b.n	8002f78 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	60da      	str	r2, [r3, #12]
}
 8002f78:	bf00      	nop
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	3b10      	subs	r3, #16
 8002f94:	4a13      	ldr	r2, [pc, #76]	; (8002fe4 <DMA_CalcBaseAndBitshift+0x60>)
 8002f96:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9a:	091b      	lsrs	r3, r3, #4
 8002f9c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f9e:	4a12      	ldr	r2, [pc, #72]	; (8002fe8 <DMA_CalcBaseAndBitshift+0x64>)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	d908      	bls.n	8002fc4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <DMA_CalcBaseAndBitshift+0x68>)
 8002fba:	4013      	ands	r3, r2
 8002fbc:	1d1a      	adds	r2, r3, #4
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	659a      	str	r2, [r3, #88]	; 0x58
 8002fc2:	e006      	b.n	8002fd2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	4b08      	ldr	r3, [pc, #32]	; (8002fec <DMA_CalcBaseAndBitshift+0x68>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	aaaaaaab 	.word	0xaaaaaaab
 8002fe8:	0801a6a0 	.word	0x0801a6a0
 8002fec:	fffffc00 	.word	0xfffffc00

08002ff0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003000:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d11f      	bne.n	800304a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2b03      	cmp	r3, #3
 800300e:	d856      	bhi.n	80030be <DMA_CheckFifoParam+0xce>
 8003010:	a201      	add	r2, pc, #4	; (adr r2, 8003018 <DMA_CheckFifoParam+0x28>)
 8003012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003016:	bf00      	nop
 8003018:	08003029 	.word	0x08003029
 800301c:	0800303b 	.word	0x0800303b
 8003020:	08003029 	.word	0x08003029
 8003024:	080030bf 	.word	0x080030bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d046      	beq.n	80030c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003038:	e043      	b.n	80030c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003042:	d140      	bne.n	80030c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003048:	e03d      	b.n	80030c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003052:	d121      	bne.n	8003098 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	2b03      	cmp	r3, #3
 8003058:	d837      	bhi.n	80030ca <DMA_CheckFifoParam+0xda>
 800305a:	a201      	add	r2, pc, #4	; (adr r2, 8003060 <DMA_CheckFifoParam+0x70>)
 800305c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003060:	08003071 	.word	0x08003071
 8003064:	08003077 	.word	0x08003077
 8003068:	08003071 	.word	0x08003071
 800306c:	08003089 	.word	0x08003089
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	73fb      	strb	r3, [r7, #15]
      break;
 8003074:	e030      	b.n	80030d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d025      	beq.n	80030ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003086:	e022      	b.n	80030ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003090:	d11f      	bne.n	80030d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003096:	e01c      	b.n	80030d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	2b02      	cmp	r3, #2
 800309c:	d903      	bls.n	80030a6 <DMA_CheckFifoParam+0xb6>
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	2b03      	cmp	r3, #3
 80030a2:	d003      	beq.n	80030ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030a4:	e018      	b.n	80030d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	73fb      	strb	r3, [r7, #15]
      break;
 80030aa:	e015      	b.n	80030d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00e      	beq.n	80030d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	73fb      	strb	r3, [r7, #15]
      break;
 80030bc:	e00b      	b.n	80030d6 <DMA_CheckFifoParam+0xe6>
      break;
 80030be:	bf00      	nop
 80030c0:	e00a      	b.n	80030d8 <DMA_CheckFifoParam+0xe8>
      break;
 80030c2:	bf00      	nop
 80030c4:	e008      	b.n	80030d8 <DMA_CheckFifoParam+0xe8>
      break;
 80030c6:	bf00      	nop
 80030c8:	e006      	b.n	80030d8 <DMA_CheckFifoParam+0xe8>
      break;
 80030ca:	bf00      	nop
 80030cc:	e004      	b.n	80030d8 <DMA_CheckFifoParam+0xe8>
      break;
 80030ce:	bf00      	nop
 80030d0:	e002      	b.n	80030d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80030d2:	bf00      	nop
 80030d4:	e000      	b.n	80030d8 <DMA_CheckFifoParam+0xe8>
      break;
 80030d6:	bf00      	nop
    }
  } 
  
  return status; 
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3714      	adds	r7, #20
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop

080030e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b089      	sub	sp, #36	; 0x24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80030f2:	2300      	movs	r3, #0
 80030f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80030f6:	2300      	movs	r3, #0
 80030f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80030fa:	2300      	movs	r3, #0
 80030fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80030fe:	2300      	movs	r3, #0
 8003100:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003102:	2300      	movs	r3, #0
 8003104:	61fb      	str	r3, [r7, #28]
 8003106:	e175      	b.n	80033f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003108:	2201      	movs	r2, #1
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	4013      	ands	r3, r2
 800311a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	429a      	cmp	r2, r3
 8003122:	f040 8164 	bne.w	80033ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f003 0303 	and.w	r3, r3, #3
 800312e:	2b01      	cmp	r3, #1
 8003130:	d005      	beq.n	800313e <HAL_GPIO_Init+0x56>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f003 0303 	and.w	r3, r3, #3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d130      	bne.n	80031a0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	2203      	movs	r2, #3
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	43db      	mvns	r3, r3
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	4013      	ands	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	68da      	ldr	r2, [r3, #12]
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4313      	orrs	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003174:	2201      	movs	r2, #1
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	43db      	mvns	r3, r3
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	4013      	ands	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	091b      	lsrs	r3, r3, #4
 800318a:	f003 0201 	and.w	r2, r3, #1
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	4313      	orrs	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f003 0303 	and.w	r3, r3, #3
 80031a8:	2b03      	cmp	r3, #3
 80031aa:	d017      	beq.n	80031dc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	2203      	movs	r2, #3
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	43db      	mvns	r3, r3
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	4013      	ands	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f003 0303 	and.w	r3, r3, #3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d123      	bne.n	8003230 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	08da      	lsrs	r2, r3, #3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3208      	adds	r2, #8
 80031f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	220f      	movs	r2, #15
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	43db      	mvns	r3, r3
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	4013      	ands	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	691a      	ldr	r2, [r3, #16]
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	f003 0307 	and.w	r3, r3, #7
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	4313      	orrs	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	08da      	lsrs	r2, r3, #3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	3208      	adds	r2, #8
 800322a:	69b9      	ldr	r1, [r7, #24]
 800322c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	2203      	movs	r2, #3
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	43db      	mvns	r3, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4013      	ands	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f003 0203 	and.w	r2, r3, #3
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4313      	orrs	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 80be 	beq.w	80033ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003272:	4b66      	ldr	r3, [pc, #408]	; (800340c <HAL_GPIO_Init+0x324>)
 8003274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003276:	4a65      	ldr	r2, [pc, #404]	; (800340c <HAL_GPIO_Init+0x324>)
 8003278:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800327c:	6453      	str	r3, [r2, #68]	; 0x44
 800327e:	4b63      	ldr	r3, [pc, #396]	; (800340c <HAL_GPIO_Init+0x324>)
 8003280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800328a:	4a61      	ldr	r2, [pc, #388]	; (8003410 <HAL_GPIO_Init+0x328>)
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	089b      	lsrs	r3, r3, #2
 8003290:	3302      	adds	r3, #2
 8003292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003296:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	f003 0303 	and.w	r3, r3, #3
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	220f      	movs	r2, #15
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	43db      	mvns	r3, r3
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	4013      	ands	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a58      	ldr	r2, [pc, #352]	; (8003414 <HAL_GPIO_Init+0x32c>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d037      	beq.n	8003326 <HAL_GPIO_Init+0x23e>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a57      	ldr	r2, [pc, #348]	; (8003418 <HAL_GPIO_Init+0x330>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d031      	beq.n	8003322 <HAL_GPIO_Init+0x23a>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a56      	ldr	r2, [pc, #344]	; (800341c <HAL_GPIO_Init+0x334>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d02b      	beq.n	800331e <HAL_GPIO_Init+0x236>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a55      	ldr	r2, [pc, #340]	; (8003420 <HAL_GPIO_Init+0x338>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d025      	beq.n	800331a <HAL_GPIO_Init+0x232>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a54      	ldr	r2, [pc, #336]	; (8003424 <HAL_GPIO_Init+0x33c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d01f      	beq.n	8003316 <HAL_GPIO_Init+0x22e>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a53      	ldr	r2, [pc, #332]	; (8003428 <HAL_GPIO_Init+0x340>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d019      	beq.n	8003312 <HAL_GPIO_Init+0x22a>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a52      	ldr	r2, [pc, #328]	; (800342c <HAL_GPIO_Init+0x344>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d013      	beq.n	800330e <HAL_GPIO_Init+0x226>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a51      	ldr	r2, [pc, #324]	; (8003430 <HAL_GPIO_Init+0x348>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d00d      	beq.n	800330a <HAL_GPIO_Init+0x222>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a50      	ldr	r2, [pc, #320]	; (8003434 <HAL_GPIO_Init+0x34c>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d007      	beq.n	8003306 <HAL_GPIO_Init+0x21e>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a4f      	ldr	r2, [pc, #316]	; (8003438 <HAL_GPIO_Init+0x350>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d101      	bne.n	8003302 <HAL_GPIO_Init+0x21a>
 80032fe:	2309      	movs	r3, #9
 8003300:	e012      	b.n	8003328 <HAL_GPIO_Init+0x240>
 8003302:	230a      	movs	r3, #10
 8003304:	e010      	b.n	8003328 <HAL_GPIO_Init+0x240>
 8003306:	2308      	movs	r3, #8
 8003308:	e00e      	b.n	8003328 <HAL_GPIO_Init+0x240>
 800330a:	2307      	movs	r3, #7
 800330c:	e00c      	b.n	8003328 <HAL_GPIO_Init+0x240>
 800330e:	2306      	movs	r3, #6
 8003310:	e00a      	b.n	8003328 <HAL_GPIO_Init+0x240>
 8003312:	2305      	movs	r3, #5
 8003314:	e008      	b.n	8003328 <HAL_GPIO_Init+0x240>
 8003316:	2304      	movs	r3, #4
 8003318:	e006      	b.n	8003328 <HAL_GPIO_Init+0x240>
 800331a:	2303      	movs	r3, #3
 800331c:	e004      	b.n	8003328 <HAL_GPIO_Init+0x240>
 800331e:	2302      	movs	r3, #2
 8003320:	e002      	b.n	8003328 <HAL_GPIO_Init+0x240>
 8003322:	2301      	movs	r3, #1
 8003324:	e000      	b.n	8003328 <HAL_GPIO_Init+0x240>
 8003326:	2300      	movs	r3, #0
 8003328:	69fa      	ldr	r2, [r7, #28]
 800332a:	f002 0203 	and.w	r2, r2, #3
 800332e:	0092      	lsls	r2, r2, #2
 8003330:	4093      	lsls	r3, r2
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4313      	orrs	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003338:	4935      	ldr	r1, [pc, #212]	; (8003410 <HAL_GPIO_Init+0x328>)
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	089b      	lsrs	r3, r3, #2
 800333e:	3302      	adds	r3, #2
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003346:	4b3d      	ldr	r3, [pc, #244]	; (800343c <HAL_GPIO_Init+0x354>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	43db      	mvns	r3, r3
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4013      	ands	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800336a:	4a34      	ldr	r2, [pc, #208]	; (800343c <HAL_GPIO_Init+0x354>)
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003370:	4b32      	ldr	r3, [pc, #200]	; (800343c <HAL_GPIO_Init+0x354>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	43db      	mvns	r3, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4013      	ands	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d003      	beq.n	8003394 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	4313      	orrs	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003394:	4a29      	ldr	r2, [pc, #164]	; (800343c <HAL_GPIO_Init+0x354>)
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800339a:	4b28      	ldr	r3, [pc, #160]	; (800343c <HAL_GPIO_Init+0x354>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	43db      	mvns	r3, r3
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	4013      	ands	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033be:	4a1f      	ldr	r2, [pc, #124]	; (800343c <HAL_GPIO_Init+0x354>)
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033c4:	4b1d      	ldr	r3, [pc, #116]	; (800343c <HAL_GPIO_Init+0x354>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	43db      	mvns	r3, r3
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	4013      	ands	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d003      	beq.n	80033e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033e8:	4a14      	ldr	r2, [pc, #80]	; (800343c <HAL_GPIO_Init+0x354>)
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	3301      	adds	r3, #1
 80033f2:	61fb      	str	r3, [r7, #28]
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	2b0f      	cmp	r3, #15
 80033f8:	f67f ae86 	bls.w	8003108 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80033fc:	bf00      	nop
 80033fe:	bf00      	nop
 8003400:	3724      	adds	r7, #36	; 0x24
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	40023800 	.word	0x40023800
 8003410:	40013800 	.word	0x40013800
 8003414:	40020000 	.word	0x40020000
 8003418:	40020400 	.word	0x40020400
 800341c:	40020800 	.word	0x40020800
 8003420:	40020c00 	.word	0x40020c00
 8003424:	40021000 	.word	0x40021000
 8003428:	40021400 	.word	0x40021400
 800342c:	40021800 	.word	0x40021800
 8003430:	40021c00 	.word	0x40021c00
 8003434:	40022000 	.word	0x40022000
 8003438:	40022400 	.word	0x40022400
 800343c:	40013c00 	.word	0x40013c00

08003440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	460b      	mov	r3, r1
 800344a:	807b      	strh	r3, [r7, #2]
 800344c:	4613      	mov	r3, r2
 800344e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003450:	787b      	ldrb	r3, [r7, #1]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003456:	887a      	ldrh	r2, [r7, #2]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800345c:	e003      	b.n	8003466 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800345e:	887b      	ldrh	r3, [r7, #2]
 8003460:	041a      	lsls	r2, r3, #16
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	619a      	str	r2, [r3, #24]
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003472:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003474:	b08f      	sub	sp, #60	; 0x3c
 8003476:	af0a      	add	r7, sp, #40	; 0x28
 8003478:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d101      	bne.n	8003484 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e116      	b.n	80036b2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d106      	bne.n	80034a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7ff f836 	bl	8002510 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2203      	movs	r2, #3
 80034a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d102      	bne.n	80034be <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f003 ff00 	bl	80072c8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	603b      	str	r3, [r7, #0]
 80034ce:	687e      	ldr	r6, [r7, #4]
 80034d0:	466d      	mov	r5, sp
 80034d2:	f106 0410 	add.w	r4, r6, #16
 80034d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80034e6:	1d33      	adds	r3, r6, #4
 80034e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034ea:	6838      	ldr	r0, [r7, #0]
 80034ec:	f003 fe94 	bl	8007218 <USB_CoreInit>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d005      	beq.n	8003502 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2202      	movs	r2, #2
 80034fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e0d7      	b.n	80036b2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2100      	movs	r1, #0
 8003508:	4618      	mov	r0, r3
 800350a:	f003 feee 	bl	80072ea <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800350e:	2300      	movs	r3, #0
 8003510:	73fb      	strb	r3, [r7, #15]
 8003512:	e04a      	b.n	80035aa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003514:	7bfa      	ldrb	r2, [r7, #15]
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	4613      	mov	r3, r2
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	4413      	add	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	440b      	add	r3, r1
 8003522:	333d      	adds	r3, #61	; 0x3d
 8003524:	2201      	movs	r2, #1
 8003526:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003528:	7bfa      	ldrb	r2, [r7, #15]
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	4613      	mov	r3, r2
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	4413      	add	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	440b      	add	r3, r1
 8003536:	333c      	adds	r3, #60	; 0x3c
 8003538:	7bfa      	ldrb	r2, [r7, #15]
 800353a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800353c:	7bfa      	ldrb	r2, [r7, #15]
 800353e:	7bfb      	ldrb	r3, [r7, #15]
 8003540:	b298      	uxth	r0, r3
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	4613      	mov	r3, r2
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	4413      	add	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	440b      	add	r3, r1
 800354e:	3344      	adds	r3, #68	; 0x44
 8003550:	4602      	mov	r2, r0
 8003552:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003554:	7bfa      	ldrb	r2, [r7, #15]
 8003556:	6879      	ldr	r1, [r7, #4]
 8003558:	4613      	mov	r3, r2
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	4413      	add	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	3340      	adds	r3, #64	; 0x40
 8003564:	2200      	movs	r2, #0
 8003566:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003568:	7bfa      	ldrb	r2, [r7, #15]
 800356a:	6879      	ldr	r1, [r7, #4]
 800356c:	4613      	mov	r3, r2
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	4413      	add	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	3348      	adds	r3, #72	; 0x48
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800357c:	7bfa      	ldrb	r2, [r7, #15]
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	4413      	add	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	334c      	adds	r3, #76	; 0x4c
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003590:	7bfa      	ldrb	r2, [r7, #15]
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	4613      	mov	r3, r2
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	4413      	add	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	3354      	adds	r3, #84	; 0x54
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
 80035a6:	3301      	adds	r3, #1
 80035a8:	73fb      	strb	r3, [r7, #15]
 80035aa:	7bfa      	ldrb	r2, [r7, #15]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d3af      	bcc.n	8003514 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035b4:	2300      	movs	r3, #0
 80035b6:	73fb      	strb	r3, [r7, #15]
 80035b8:	e044      	b.n	8003644 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80035ba:	7bfa      	ldrb	r2, [r7, #15]
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	4613      	mov	r3, r2
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	4413      	add	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	440b      	add	r3, r1
 80035c8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80035cc:	2200      	movs	r2, #0
 80035ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035d0:	7bfa      	ldrb	r2, [r7, #15]
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	4613      	mov	r3, r2
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	4413      	add	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80035e2:	7bfa      	ldrb	r2, [r7, #15]
 80035e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035e6:	7bfa      	ldrb	r2, [r7, #15]
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	4613      	mov	r3, r2
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	4413      	add	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	440b      	add	r3, r1
 80035f4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80035f8:	2200      	movs	r2, #0
 80035fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035fc:	7bfa      	ldrb	r2, [r7, #15]
 80035fe:	6879      	ldr	r1, [r7, #4]
 8003600:	4613      	mov	r3, r2
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	4413      	add	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800360e:	2200      	movs	r2, #0
 8003610:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003612:	7bfa      	ldrb	r2, [r7, #15]
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	4613      	mov	r3, r2
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	4413      	add	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	440b      	add	r3, r1
 8003620:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003628:	7bfa      	ldrb	r2, [r7, #15]
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	4613      	mov	r3, r2
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	4413      	add	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800363a:	2200      	movs	r2, #0
 800363c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800363e:	7bfb      	ldrb	r3, [r7, #15]
 8003640:	3301      	adds	r3, #1
 8003642:	73fb      	strb	r3, [r7, #15]
 8003644:	7bfa      	ldrb	r2, [r7, #15]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	429a      	cmp	r2, r3
 800364c:	d3b5      	bcc.n	80035ba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	603b      	str	r3, [r7, #0]
 8003654:	687e      	ldr	r6, [r7, #4]
 8003656:	466d      	mov	r5, sp
 8003658:	f106 0410 	add.w	r4, r6, #16
 800365c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800365e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003660:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003662:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003664:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003668:	e885 0003 	stmia.w	r5, {r0, r1}
 800366c:	1d33      	adds	r3, r6, #4
 800366e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003670:	6838      	ldr	r0, [r7, #0]
 8003672:	f003 fe87 	bl	8007384 <USB_DevInit>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d005      	beq.n	8003688 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e014      	b.n	80036b2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	2b01      	cmp	r3, #1
 800369e:	d102      	bne.n	80036a6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f80b 	bl	80036bc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f004 f845 	bl	800773a <USB_DevDisconnect>

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080036bc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036ea:	4b05      	ldr	r3, [pc, #20]	; (8003700 <HAL_PCDEx_ActivateLPM+0x44>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3714      	adds	r7, #20
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	10000003 	.word	0x10000003

08003704 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003708:	4b05      	ldr	r3, [pc, #20]	; (8003720 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a04      	ldr	r2, [pc, #16]	; (8003720 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800370e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003712:	6013      	str	r3, [r2, #0]
}
 8003714:	bf00      	nop
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	40007000 	.word	0x40007000

08003724 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800372a:	2300      	movs	r3, #0
 800372c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800372e:	4b23      	ldr	r3, [pc, #140]	; (80037bc <HAL_PWREx_EnableOverDrive+0x98>)
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	4a22      	ldr	r2, [pc, #136]	; (80037bc <HAL_PWREx_EnableOverDrive+0x98>)
 8003734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003738:	6413      	str	r3, [r2, #64]	; 0x40
 800373a:	4b20      	ldr	r3, [pc, #128]	; (80037bc <HAL_PWREx_EnableOverDrive+0x98>)
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003742:	603b      	str	r3, [r7, #0]
 8003744:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003746:	4b1e      	ldr	r3, [pc, #120]	; (80037c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a1d      	ldr	r2, [pc, #116]	; (80037c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800374c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003750:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003752:	f7fe ffa1 	bl	8002698 <HAL_GetTick>
 8003756:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003758:	e009      	b.n	800376e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800375a:	f7fe ff9d 	bl	8002698 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003768:	d901      	bls.n	800376e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e022      	b.n	80037b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800376e:	4b14      	ldr	r3, [pc, #80]	; (80037c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800377a:	d1ee      	bne.n	800375a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800377c:	4b10      	ldr	r3, [pc, #64]	; (80037c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a0f      	ldr	r2, [pc, #60]	; (80037c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003786:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003788:	f7fe ff86 	bl	8002698 <HAL_GetTick>
 800378c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800378e:	e009      	b.n	80037a4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003790:	f7fe ff82 	bl	8002698 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800379e:	d901      	bls.n	80037a4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e007      	b.n	80037b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80037a4:	4b06      	ldr	r3, [pc, #24]	; (80037c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037b0:	d1ee      	bne.n	8003790 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40023800 	.word	0x40023800
 80037c0:	40007000 	.word	0x40007000

080037c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80037cc:	2300      	movs	r3, #0
 80037ce:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e29b      	b.n	8003d12 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f000 8087 	beq.w	80038f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037e8:	4b96      	ldr	r3, [pc, #600]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f003 030c 	and.w	r3, r3, #12
 80037f0:	2b04      	cmp	r3, #4
 80037f2:	d00c      	beq.n	800380e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037f4:	4b93      	ldr	r3, [pc, #588]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f003 030c 	and.w	r3, r3, #12
 80037fc:	2b08      	cmp	r3, #8
 80037fe:	d112      	bne.n	8003826 <HAL_RCC_OscConfig+0x62>
 8003800:	4b90      	ldr	r3, [pc, #576]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003808:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800380c:	d10b      	bne.n	8003826 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800380e:	4b8d      	ldr	r3, [pc, #564]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d06c      	beq.n	80038f4 <HAL_RCC_OscConfig+0x130>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d168      	bne.n	80038f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e275      	b.n	8003d12 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800382e:	d106      	bne.n	800383e <HAL_RCC_OscConfig+0x7a>
 8003830:	4b84      	ldr	r3, [pc, #528]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a83      	ldr	r2, [pc, #524]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 8003836:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800383a:	6013      	str	r3, [r2, #0]
 800383c:	e02e      	b.n	800389c <HAL_RCC_OscConfig+0xd8>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10c      	bne.n	8003860 <HAL_RCC_OscConfig+0x9c>
 8003846:	4b7f      	ldr	r3, [pc, #508]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a7e      	ldr	r2, [pc, #504]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 800384c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003850:	6013      	str	r3, [r2, #0]
 8003852:	4b7c      	ldr	r3, [pc, #496]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a7b      	ldr	r2, [pc, #492]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 8003858:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	e01d      	b.n	800389c <HAL_RCC_OscConfig+0xd8>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003868:	d10c      	bne.n	8003884 <HAL_RCC_OscConfig+0xc0>
 800386a:	4b76      	ldr	r3, [pc, #472]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a75      	ldr	r2, [pc, #468]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 8003870:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003874:	6013      	str	r3, [r2, #0]
 8003876:	4b73      	ldr	r3, [pc, #460]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a72      	ldr	r2, [pc, #456]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 800387c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003880:	6013      	str	r3, [r2, #0]
 8003882:	e00b      	b.n	800389c <HAL_RCC_OscConfig+0xd8>
 8003884:	4b6f      	ldr	r3, [pc, #444]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a6e      	ldr	r2, [pc, #440]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 800388a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800388e:	6013      	str	r3, [r2, #0]
 8003890:	4b6c      	ldr	r3, [pc, #432]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a6b      	ldr	r2, [pc, #428]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 8003896:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800389a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d013      	beq.n	80038cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a4:	f7fe fef8 	bl	8002698 <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038ac:	f7fe fef4 	bl	8002698 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b64      	cmp	r3, #100	; 0x64
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e229      	b.n	8003d12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038be:	4b61      	ldr	r3, [pc, #388]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0f0      	beq.n	80038ac <HAL_RCC_OscConfig+0xe8>
 80038ca:	e014      	b.n	80038f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038cc:	f7fe fee4 	bl	8002698 <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038d4:	f7fe fee0 	bl	8002698 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b64      	cmp	r3, #100	; 0x64
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e215      	b.n	8003d12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038e6:	4b57      	ldr	r3, [pc, #348]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1f0      	bne.n	80038d4 <HAL_RCC_OscConfig+0x110>
 80038f2:	e000      	b.n	80038f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d069      	beq.n	80039d6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003902:	4b50      	ldr	r3, [pc, #320]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f003 030c 	and.w	r3, r3, #12
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00b      	beq.n	8003926 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800390e:	4b4d      	ldr	r3, [pc, #308]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 030c 	and.w	r3, r3, #12
 8003916:	2b08      	cmp	r3, #8
 8003918:	d11c      	bne.n	8003954 <HAL_RCC_OscConfig+0x190>
 800391a:	4b4a      	ldr	r3, [pc, #296]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d116      	bne.n	8003954 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003926:	4b47      	ldr	r3, [pc, #284]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d005      	beq.n	800393e <HAL_RCC_OscConfig+0x17a>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d001      	beq.n	800393e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e1e9      	b.n	8003d12 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800393e:	4b41      	ldr	r3, [pc, #260]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	493d      	ldr	r1, [pc, #244]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 800394e:	4313      	orrs	r3, r2
 8003950:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003952:	e040      	b.n	80039d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d023      	beq.n	80039a4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800395c:	4b39      	ldr	r3, [pc, #228]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a38      	ldr	r2, [pc, #224]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 8003962:	f043 0301 	orr.w	r3, r3, #1
 8003966:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003968:	f7fe fe96 	bl	8002698 <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003970:	f7fe fe92 	bl	8002698 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e1c7      	b.n	8003d12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003982:	4b30      	ldr	r3, [pc, #192]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d0f0      	beq.n	8003970 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800398e:	4b2d      	ldr	r3, [pc, #180]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	4929      	ldr	r1, [pc, #164]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	600b      	str	r3, [r1, #0]
 80039a2:	e018      	b.n	80039d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039a4:	4b27      	ldr	r3, [pc, #156]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a26      	ldr	r2, [pc, #152]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 80039aa:	f023 0301 	bic.w	r3, r3, #1
 80039ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b0:	f7fe fe72 	bl	8002698 <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039b8:	f7fe fe6e 	bl	8002698 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e1a3      	b.n	8003d12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ca:	4b1e      	ldr	r3, [pc, #120]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1f0      	bne.n	80039b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d038      	beq.n	8003a54 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d019      	beq.n	8003a1e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039ea:	4b16      	ldr	r3, [pc, #88]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 80039ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ee:	4a15      	ldr	r2, [pc, #84]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 80039f0:	f043 0301 	orr.w	r3, r3, #1
 80039f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f6:	f7fe fe4f 	bl	8002698 <HAL_GetTick>
 80039fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039fc:	e008      	b.n	8003a10 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039fe:	f7fe fe4b 	bl	8002698 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d901      	bls.n	8003a10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e180      	b.n	8003d12 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a10:	4b0c      	ldr	r3, [pc, #48]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 8003a12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d0f0      	beq.n	80039fe <HAL_RCC_OscConfig+0x23a>
 8003a1c:	e01a      	b.n	8003a54 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a1e:	4b09      	ldr	r3, [pc, #36]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 8003a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a22:	4a08      	ldr	r2, [pc, #32]	; (8003a44 <HAL_RCC_OscConfig+0x280>)
 8003a24:	f023 0301 	bic.w	r3, r3, #1
 8003a28:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2a:	f7fe fe35 	bl	8002698 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a30:	e00a      	b.n	8003a48 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a32:	f7fe fe31 	bl	8002698 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d903      	bls.n	8003a48 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e166      	b.n	8003d12 <HAL_RCC_OscConfig+0x54e>
 8003a44:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a48:	4b92      	ldr	r3, [pc, #584]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003a4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1ee      	bne.n	8003a32 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0304 	and.w	r3, r3, #4
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 80a4 	beq.w	8003baa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a62:	4b8c      	ldr	r3, [pc, #560]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10d      	bne.n	8003a8a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a6e:	4b89      	ldr	r3, [pc, #548]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	4a88      	ldr	r2, [pc, #544]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a78:	6413      	str	r3, [r2, #64]	; 0x40
 8003a7a:	4b86      	ldr	r3, [pc, #536]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a82:	60bb      	str	r3, [r7, #8]
 8003a84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a86:	2301      	movs	r3, #1
 8003a88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a8a:	4b83      	ldr	r3, [pc, #524]	; (8003c98 <HAL_RCC_OscConfig+0x4d4>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d118      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003a96:	4b80      	ldr	r3, [pc, #512]	; (8003c98 <HAL_RCC_OscConfig+0x4d4>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a7f      	ldr	r2, [pc, #508]	; (8003c98 <HAL_RCC_OscConfig+0x4d4>)
 8003a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aa2:	f7fe fdf9 	bl	8002698 <HAL_GetTick>
 8003aa6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aa8:	e008      	b.n	8003abc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aaa:	f7fe fdf5 	bl	8002698 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b64      	cmp	r3, #100	; 0x64
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e12a      	b.n	8003d12 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003abc:	4b76      	ldr	r3, [pc, #472]	; (8003c98 <HAL_RCC_OscConfig+0x4d4>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0f0      	beq.n	8003aaa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d106      	bne.n	8003ade <HAL_RCC_OscConfig+0x31a>
 8003ad0:	4b70      	ldr	r3, [pc, #448]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad4:	4a6f      	ldr	r2, [pc, #444]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003ad6:	f043 0301 	orr.w	r3, r3, #1
 8003ada:	6713      	str	r3, [r2, #112]	; 0x70
 8003adc:	e02d      	b.n	8003b3a <HAL_RCC_OscConfig+0x376>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10c      	bne.n	8003b00 <HAL_RCC_OscConfig+0x33c>
 8003ae6:	4b6b      	ldr	r3, [pc, #428]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aea:	4a6a      	ldr	r2, [pc, #424]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003aec:	f023 0301 	bic.w	r3, r3, #1
 8003af0:	6713      	str	r3, [r2, #112]	; 0x70
 8003af2:	4b68      	ldr	r3, [pc, #416]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af6:	4a67      	ldr	r2, [pc, #412]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003af8:	f023 0304 	bic.w	r3, r3, #4
 8003afc:	6713      	str	r3, [r2, #112]	; 0x70
 8003afe:	e01c      	b.n	8003b3a <HAL_RCC_OscConfig+0x376>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	2b05      	cmp	r3, #5
 8003b06:	d10c      	bne.n	8003b22 <HAL_RCC_OscConfig+0x35e>
 8003b08:	4b62      	ldr	r3, [pc, #392]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0c:	4a61      	ldr	r2, [pc, #388]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003b0e:	f043 0304 	orr.w	r3, r3, #4
 8003b12:	6713      	str	r3, [r2, #112]	; 0x70
 8003b14:	4b5f      	ldr	r3, [pc, #380]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b18:	4a5e      	ldr	r2, [pc, #376]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003b1a:	f043 0301 	orr.w	r3, r3, #1
 8003b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b20:	e00b      	b.n	8003b3a <HAL_RCC_OscConfig+0x376>
 8003b22:	4b5c      	ldr	r3, [pc, #368]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b26:	4a5b      	ldr	r2, [pc, #364]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003b28:	f023 0301 	bic.w	r3, r3, #1
 8003b2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b2e:	4b59      	ldr	r3, [pc, #356]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b32:	4a58      	ldr	r2, [pc, #352]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003b34:	f023 0304 	bic.w	r3, r3, #4
 8003b38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d015      	beq.n	8003b6e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b42:	f7fe fda9 	bl	8002698 <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b48:	e00a      	b.n	8003b60 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b4a:	f7fe fda5 	bl	8002698 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e0d8      	b.n	8003d12 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b60:	4b4c      	ldr	r3, [pc, #304]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d0ee      	beq.n	8003b4a <HAL_RCC_OscConfig+0x386>
 8003b6c:	e014      	b.n	8003b98 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6e:	f7fe fd93 	bl	8002698 <HAL_GetTick>
 8003b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b74:	e00a      	b.n	8003b8c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b76:	f7fe fd8f 	bl	8002698 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e0c2      	b.n	8003d12 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b8c:	4b41      	ldr	r3, [pc, #260]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1ee      	bne.n	8003b76 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b98:	7dfb      	ldrb	r3, [r7, #23]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d105      	bne.n	8003baa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b9e:	4b3d      	ldr	r3, [pc, #244]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	4a3c      	ldr	r2, [pc, #240]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003ba4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ba8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 80ae 	beq.w	8003d10 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bb4:	4b37      	ldr	r3, [pc, #220]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f003 030c 	and.w	r3, r3, #12
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	d06d      	beq.n	8003c9c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d14b      	bne.n	8003c60 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc8:	4b32      	ldr	r3, [pc, #200]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a31      	ldr	r2, [pc, #196]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003bce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd4:	f7fe fd60 	bl	8002698 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bdc:	f7fe fd5c 	bl	8002698 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e091      	b.n	8003d12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bee:	4b29      	ldr	r3, [pc, #164]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1f0      	bne.n	8003bdc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69da      	ldr	r2, [r3, #28]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	431a      	orrs	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	019b      	lsls	r3, r3, #6
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c10:	085b      	lsrs	r3, r3, #1
 8003c12:	3b01      	subs	r3, #1
 8003c14:	041b      	lsls	r3, r3, #16
 8003c16:	431a      	orrs	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1c:	061b      	lsls	r3, r3, #24
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c24:	071b      	lsls	r3, r3, #28
 8003c26:	491b      	ldr	r1, [pc, #108]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c2c:	4b19      	ldr	r3, [pc, #100]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a18      	ldr	r2, [pc, #96]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003c32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c38:	f7fe fd2e 	bl	8002698 <HAL_GetTick>
 8003c3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c3e:	e008      	b.n	8003c52 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c40:	f7fe fd2a 	bl	8002698 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e05f      	b.n	8003d12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c52:	4b10      	ldr	r3, [pc, #64]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d0f0      	beq.n	8003c40 <HAL_RCC_OscConfig+0x47c>
 8003c5e:	e057      	b.n	8003d10 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c60:	4b0c      	ldr	r3, [pc, #48]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a0b      	ldr	r2, [pc, #44]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003c66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6c:	f7fe fd14 	bl	8002698 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c74:	f7fe fd10 	bl	8002698 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e045      	b.n	8003d12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c86:	4b03      	ldr	r3, [pc, #12]	; (8003c94 <HAL_RCC_OscConfig+0x4d0>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1f0      	bne.n	8003c74 <HAL_RCC_OscConfig+0x4b0>
 8003c92:	e03d      	b.n	8003d10 <HAL_RCC_OscConfig+0x54c>
 8003c94:	40023800 	.word	0x40023800
 8003c98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003c9c:	4b1f      	ldr	r3, [pc, #124]	; (8003d1c <HAL_RCC_OscConfig+0x558>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d030      	beq.n	8003d0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d129      	bne.n	8003d0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d122      	bne.n	8003d0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ccc:	4013      	ands	r3, r2
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cd2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d119      	bne.n	8003d0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce2:	085b      	lsrs	r3, r3, #1
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d10f      	bne.n	8003d0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d107      	bne.n	8003d0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d06:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d001      	beq.n	8003d10 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e000      	b.n	8003d12 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3718      	adds	r7, #24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	40023800 	.word	0x40023800

08003d20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e0d0      	b.n	8003eda <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d38:	4b6a      	ldr	r3, [pc, #424]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 030f 	and.w	r3, r3, #15
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d910      	bls.n	8003d68 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d46:	4b67      	ldr	r3, [pc, #412]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f023 020f 	bic.w	r2, r3, #15
 8003d4e:	4965      	ldr	r1, [pc, #404]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d56:	4b63      	ldr	r3, [pc, #396]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 030f 	and.w	r3, r3, #15
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d001      	beq.n	8003d68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e0b8      	b.n	8003eda <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d020      	beq.n	8003db6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0304 	and.w	r3, r3, #4
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d005      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d80:	4b59      	ldr	r3, [pc, #356]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	4a58      	ldr	r2, [pc, #352]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003d86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d8a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0308 	and.w	r3, r3, #8
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d005      	beq.n	8003da4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d98:	4b53      	ldr	r3, [pc, #332]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	4a52      	ldr	r2, [pc, #328]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003d9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003da2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003da4:	4b50      	ldr	r3, [pc, #320]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	494d      	ldr	r1, [pc, #308]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d040      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d107      	bne.n	8003dda <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dca:	4b47      	ldr	r3, [pc, #284]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d115      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e07f      	b.n	8003eda <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d107      	bne.n	8003df2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003de2:	4b41      	ldr	r3, [pc, #260]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d109      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e073      	b.n	8003eda <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003df2:	4b3d      	ldr	r3, [pc, #244]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e06b      	b.n	8003eda <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e02:	4b39      	ldr	r3, [pc, #228]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f023 0203 	bic.w	r2, r3, #3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	4936      	ldr	r1, [pc, #216]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e14:	f7fe fc40 	bl	8002698 <HAL_GetTick>
 8003e18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e1a:	e00a      	b.n	8003e32 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e1c:	f7fe fc3c 	bl	8002698 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e053      	b.n	8003eda <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e32:	4b2d      	ldr	r3, [pc, #180]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 020c 	and.w	r2, r3, #12
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d1eb      	bne.n	8003e1c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e44:	4b27      	ldr	r3, [pc, #156]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 030f 	and.w	r3, r3, #15
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d210      	bcs.n	8003e74 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e52:	4b24      	ldr	r3, [pc, #144]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f023 020f 	bic.w	r2, r3, #15
 8003e5a:	4922      	ldr	r1, [pc, #136]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e62:	4b20      	ldr	r3, [pc, #128]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 030f 	and.w	r3, r3, #15
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d001      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e032      	b.n	8003eda <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0304 	and.w	r3, r3, #4
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d008      	beq.n	8003e92 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e80:	4b19      	ldr	r3, [pc, #100]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	4916      	ldr	r1, [pc, #88]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0308 	and.w	r3, r3, #8
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d009      	beq.n	8003eb2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e9e:	4b12      	ldr	r3, [pc, #72]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	490e      	ldr	r1, [pc, #56]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003eb2:	f000 f821 	bl	8003ef8 <HAL_RCC_GetSysClockFreq>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	4b0b      	ldr	r3, [pc, #44]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	091b      	lsrs	r3, r3, #4
 8003ebe:	f003 030f 	and.w	r3, r3, #15
 8003ec2:	490a      	ldr	r1, [pc, #40]	; (8003eec <HAL_RCC_ClockConfig+0x1cc>)
 8003ec4:	5ccb      	ldrb	r3, [r1, r3]
 8003ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eca:	4a09      	ldr	r2, [pc, #36]	; (8003ef0 <HAL_RCC_ClockConfig+0x1d0>)
 8003ecc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ece:	4b09      	ldr	r3, [pc, #36]	; (8003ef4 <HAL_RCC_ClockConfig+0x1d4>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fd fbda 	bl	800168c <HAL_InitTick>

  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	40023c00 	.word	0x40023c00
 8003ee8:	40023800 	.word	0x40023800
 8003eec:	0801a688 	.word	0x0801a688
 8003ef0:	20000004 	.word	0x20000004
 8003ef4:	20000008 	.word	0x20000008

08003ef8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003efc:	b094      	sub	sp, #80	; 0x50
 8003efe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003f00:	2300      	movs	r3, #0
 8003f02:	647b      	str	r3, [r7, #68]	; 0x44
 8003f04:	2300      	movs	r3, #0
 8003f06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f08:	2300      	movs	r3, #0
 8003f0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f10:	4b79      	ldr	r3, [pc, #484]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f003 030c 	and.w	r3, r3, #12
 8003f18:	2b08      	cmp	r3, #8
 8003f1a:	d00d      	beq.n	8003f38 <HAL_RCC_GetSysClockFreq+0x40>
 8003f1c:	2b08      	cmp	r3, #8
 8003f1e:	f200 80e1 	bhi.w	80040e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d002      	beq.n	8003f2c <HAL_RCC_GetSysClockFreq+0x34>
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	d003      	beq.n	8003f32 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f2a:	e0db      	b.n	80040e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f2c:	4b73      	ldr	r3, [pc, #460]	; (80040fc <HAL_RCC_GetSysClockFreq+0x204>)
 8003f2e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f30:	e0db      	b.n	80040ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f32:	4b73      	ldr	r3, [pc, #460]	; (8004100 <HAL_RCC_GetSysClockFreq+0x208>)
 8003f34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f36:	e0d8      	b.n	80040ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f38:	4b6f      	ldr	r3, [pc, #444]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f40:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003f42:	4b6d      	ldr	r3, [pc, #436]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d063      	beq.n	8004016 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f4e:	4b6a      	ldr	r3, [pc, #424]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	099b      	lsrs	r3, r3, #6
 8003f54:	2200      	movs	r2, #0
 8003f56:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f58:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f60:	633b      	str	r3, [r7, #48]	; 0x30
 8003f62:	2300      	movs	r3, #0
 8003f64:	637b      	str	r3, [r7, #52]	; 0x34
 8003f66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f6a:	4622      	mov	r2, r4
 8003f6c:	462b      	mov	r3, r5
 8003f6e:	f04f 0000 	mov.w	r0, #0
 8003f72:	f04f 0100 	mov.w	r1, #0
 8003f76:	0159      	lsls	r1, r3, #5
 8003f78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f7c:	0150      	lsls	r0, r2, #5
 8003f7e:	4602      	mov	r2, r0
 8003f80:	460b      	mov	r3, r1
 8003f82:	4621      	mov	r1, r4
 8003f84:	1a51      	subs	r1, r2, r1
 8003f86:	6139      	str	r1, [r7, #16]
 8003f88:	4629      	mov	r1, r5
 8003f8a:	eb63 0301 	sbc.w	r3, r3, r1
 8003f8e:	617b      	str	r3, [r7, #20]
 8003f90:	f04f 0200 	mov.w	r2, #0
 8003f94:	f04f 0300 	mov.w	r3, #0
 8003f98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f9c:	4659      	mov	r1, fp
 8003f9e:	018b      	lsls	r3, r1, #6
 8003fa0:	4651      	mov	r1, sl
 8003fa2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fa6:	4651      	mov	r1, sl
 8003fa8:	018a      	lsls	r2, r1, #6
 8003faa:	4651      	mov	r1, sl
 8003fac:	ebb2 0801 	subs.w	r8, r2, r1
 8003fb0:	4659      	mov	r1, fp
 8003fb2:	eb63 0901 	sbc.w	r9, r3, r1
 8003fb6:	f04f 0200 	mov.w	r2, #0
 8003fba:	f04f 0300 	mov.w	r3, #0
 8003fbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fca:	4690      	mov	r8, r2
 8003fcc:	4699      	mov	r9, r3
 8003fce:	4623      	mov	r3, r4
 8003fd0:	eb18 0303 	adds.w	r3, r8, r3
 8003fd4:	60bb      	str	r3, [r7, #8]
 8003fd6:	462b      	mov	r3, r5
 8003fd8:	eb49 0303 	adc.w	r3, r9, r3
 8003fdc:	60fb      	str	r3, [r7, #12]
 8003fde:	f04f 0200 	mov.w	r2, #0
 8003fe2:	f04f 0300 	mov.w	r3, #0
 8003fe6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003fea:	4629      	mov	r1, r5
 8003fec:	024b      	lsls	r3, r1, #9
 8003fee:	4621      	mov	r1, r4
 8003ff0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ff4:	4621      	mov	r1, r4
 8003ff6:	024a      	lsls	r2, r1, #9
 8003ff8:	4610      	mov	r0, r2
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ffe:	2200      	movs	r2, #0
 8004000:	62bb      	str	r3, [r7, #40]	; 0x28
 8004002:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004004:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004008:	f7fc f9d2 	bl	80003b0 <__aeabi_uldivmod>
 800400c:	4602      	mov	r2, r0
 800400e:	460b      	mov	r3, r1
 8004010:	4613      	mov	r3, r2
 8004012:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004014:	e058      	b.n	80040c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004016:	4b38      	ldr	r3, [pc, #224]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	099b      	lsrs	r3, r3, #6
 800401c:	2200      	movs	r2, #0
 800401e:	4618      	mov	r0, r3
 8004020:	4611      	mov	r1, r2
 8004022:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004026:	623b      	str	r3, [r7, #32]
 8004028:	2300      	movs	r3, #0
 800402a:	627b      	str	r3, [r7, #36]	; 0x24
 800402c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004030:	4642      	mov	r2, r8
 8004032:	464b      	mov	r3, r9
 8004034:	f04f 0000 	mov.w	r0, #0
 8004038:	f04f 0100 	mov.w	r1, #0
 800403c:	0159      	lsls	r1, r3, #5
 800403e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004042:	0150      	lsls	r0, r2, #5
 8004044:	4602      	mov	r2, r0
 8004046:	460b      	mov	r3, r1
 8004048:	4641      	mov	r1, r8
 800404a:	ebb2 0a01 	subs.w	sl, r2, r1
 800404e:	4649      	mov	r1, r9
 8004050:	eb63 0b01 	sbc.w	fp, r3, r1
 8004054:	f04f 0200 	mov.w	r2, #0
 8004058:	f04f 0300 	mov.w	r3, #0
 800405c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004060:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004064:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004068:	ebb2 040a 	subs.w	r4, r2, sl
 800406c:	eb63 050b 	sbc.w	r5, r3, fp
 8004070:	f04f 0200 	mov.w	r2, #0
 8004074:	f04f 0300 	mov.w	r3, #0
 8004078:	00eb      	lsls	r3, r5, #3
 800407a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800407e:	00e2      	lsls	r2, r4, #3
 8004080:	4614      	mov	r4, r2
 8004082:	461d      	mov	r5, r3
 8004084:	4643      	mov	r3, r8
 8004086:	18e3      	adds	r3, r4, r3
 8004088:	603b      	str	r3, [r7, #0]
 800408a:	464b      	mov	r3, r9
 800408c:	eb45 0303 	adc.w	r3, r5, r3
 8004090:	607b      	str	r3, [r7, #4]
 8004092:	f04f 0200 	mov.w	r2, #0
 8004096:	f04f 0300 	mov.w	r3, #0
 800409a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800409e:	4629      	mov	r1, r5
 80040a0:	028b      	lsls	r3, r1, #10
 80040a2:	4621      	mov	r1, r4
 80040a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040a8:	4621      	mov	r1, r4
 80040aa:	028a      	lsls	r2, r1, #10
 80040ac:	4610      	mov	r0, r2
 80040ae:	4619      	mov	r1, r3
 80040b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040b2:	2200      	movs	r2, #0
 80040b4:	61bb      	str	r3, [r7, #24]
 80040b6:	61fa      	str	r2, [r7, #28]
 80040b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040bc:	f7fc f978 	bl	80003b0 <__aeabi_uldivmod>
 80040c0:	4602      	mov	r2, r0
 80040c2:	460b      	mov	r3, r1
 80040c4:	4613      	mov	r3, r2
 80040c6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80040c8:	4b0b      	ldr	r3, [pc, #44]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	0c1b      	lsrs	r3, r3, #16
 80040ce:	f003 0303 	and.w	r3, r3, #3
 80040d2:	3301      	adds	r3, #1
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80040d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040e2:	e002      	b.n	80040ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040e4:	4b05      	ldr	r3, [pc, #20]	; (80040fc <HAL_RCC_GetSysClockFreq+0x204>)
 80040e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3750      	adds	r7, #80	; 0x50
 80040f0:	46bd      	mov	sp, r7
 80040f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040f6:	bf00      	nop
 80040f8:	40023800 	.word	0x40023800
 80040fc:	00f42400 	.word	0x00f42400
 8004100:	007a1200 	.word	0x007a1200

08004104 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004108:	4b03      	ldr	r3, [pc, #12]	; (8004118 <HAL_RCC_GetHCLKFreq+0x14>)
 800410a:	681b      	ldr	r3, [r3, #0]
}
 800410c:	4618      	mov	r0, r3
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	20000004 	.word	0x20000004

0800411c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004120:	f7ff fff0 	bl	8004104 <HAL_RCC_GetHCLKFreq>
 8004124:	4602      	mov	r2, r0
 8004126:	4b05      	ldr	r3, [pc, #20]	; (800413c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	0a9b      	lsrs	r3, r3, #10
 800412c:	f003 0307 	and.w	r3, r3, #7
 8004130:	4903      	ldr	r1, [pc, #12]	; (8004140 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004132:	5ccb      	ldrb	r3, [r1, r3]
 8004134:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004138:	4618      	mov	r0, r3
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40023800 	.word	0x40023800
 8004140:	0801a698 	.word	0x0801a698

08004144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004148:	f7ff ffdc 	bl	8004104 <HAL_RCC_GetHCLKFreq>
 800414c:	4602      	mov	r2, r0
 800414e:	4b05      	ldr	r3, [pc, #20]	; (8004164 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	0b5b      	lsrs	r3, r3, #13
 8004154:	f003 0307 	and.w	r3, r3, #7
 8004158:	4903      	ldr	r1, [pc, #12]	; (8004168 <HAL_RCC_GetPCLK2Freq+0x24>)
 800415a:	5ccb      	ldrb	r3, [r1, r3]
 800415c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004160:	4618      	mov	r0, r3
 8004162:	bd80      	pop	{r7, pc}
 8004164:	40023800 	.word	0x40023800
 8004168:	0801a698 	.word	0x0801a698

0800416c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	220f      	movs	r2, #15
 800417a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800417c:	4b12      	ldr	r3, [pc, #72]	; (80041c8 <HAL_RCC_GetClockConfig+0x5c>)
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f003 0203 	and.w	r2, r3, #3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004188:	4b0f      	ldr	r3, [pc, #60]	; (80041c8 <HAL_RCC_GetClockConfig+0x5c>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004194:	4b0c      	ldr	r3, [pc, #48]	; (80041c8 <HAL_RCC_GetClockConfig+0x5c>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80041a0:	4b09      	ldr	r3, [pc, #36]	; (80041c8 <HAL_RCC_GetClockConfig+0x5c>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	08db      	lsrs	r3, r3, #3
 80041a6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80041ae:	4b07      	ldr	r3, [pc, #28]	; (80041cc <HAL_RCC_GetClockConfig+0x60>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 020f 	and.w	r2, r3, #15
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	601a      	str	r2, [r3, #0]
}
 80041ba:	bf00      	nop
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	40023800 	.word	0x40023800
 80041cc:	40023c00 	.word	0x40023c00

080041d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b088      	sub	sp, #32
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80041d8:	2300      	movs	r3, #0
 80041da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80041dc:	2300      	movs	r3, #0
 80041de:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80041e0:	2300      	movs	r3, #0
 80041e2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80041e4:	2300      	movs	r3, #0
 80041e6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80041e8:	2300      	movs	r3, #0
 80041ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d012      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80041f8:	4b69      	ldr	r3, [pc, #420]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	4a68      	ldr	r2, [pc, #416]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041fe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004202:	6093      	str	r3, [r2, #8]
 8004204:	4b66      	ldr	r3, [pc, #408]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800420c:	4964      	ldr	r1, [pc, #400]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800420e:	4313      	orrs	r3, r2
 8004210:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800421a:	2301      	movs	r3, #1
 800421c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d017      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800422a:	4b5d      	ldr	r3, [pc, #372]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800422c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004230:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004238:	4959      	ldr	r1, [pc, #356]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800423a:	4313      	orrs	r3, r2
 800423c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004244:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004248:	d101      	bne.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800424a:	2301      	movs	r3, #1
 800424c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004256:	2301      	movs	r3, #1
 8004258:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d017      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004266:	4b4e      	ldr	r3, [pc, #312]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004268:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800426c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004274:	494a      	ldr	r1, [pc, #296]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004276:	4313      	orrs	r3, r2
 8004278:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004280:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004284:	d101      	bne.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004286:	2301      	movs	r3, #1
 8004288:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004292:	2301      	movs	r3, #1
 8004294:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80042a2:	2301      	movs	r3, #1
 80042a4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0320 	and.w	r3, r3, #32
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f000 808b 	beq.w	80043ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80042b4:	4b3a      	ldr	r3, [pc, #232]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b8:	4a39      	ldr	r2, [pc, #228]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042be:	6413      	str	r3, [r2, #64]	; 0x40
 80042c0:	4b37      	ldr	r3, [pc, #220]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c8:	60bb      	str	r3, [r7, #8]
 80042ca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80042cc:	4b35      	ldr	r3, [pc, #212]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a34      	ldr	r2, [pc, #208]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042d8:	f7fe f9de 	bl	8002698 <HAL_GetTick>
 80042dc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80042de:	e008      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042e0:	f7fe f9da 	bl	8002698 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b64      	cmp	r3, #100	; 0x64
 80042ec:	d901      	bls.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e38f      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80042f2:	4b2c      	ldr	r3, [pc, #176]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d0f0      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042fe:	4b28      	ldr	r3, [pc, #160]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004306:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d035      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	429a      	cmp	r2, r3
 800431a:	d02e      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800431c:	4b20      	ldr	r3, [pc, #128]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800431e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004324:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004326:	4b1e      	ldr	r3, [pc, #120]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800432a:	4a1d      	ldr	r2, [pc, #116]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800432c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004330:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004332:	4b1b      	ldr	r3, [pc, #108]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004336:	4a1a      	ldr	r2, [pc, #104]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800433c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800433e:	4a18      	ldr	r2, [pc, #96]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004344:	4b16      	ldr	r3, [pc, #88]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004348:	f003 0301 	and.w	r3, r3, #1
 800434c:	2b01      	cmp	r3, #1
 800434e:	d114      	bne.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004350:	f7fe f9a2 	bl	8002698 <HAL_GetTick>
 8004354:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004356:	e00a      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004358:	f7fe f99e 	bl	8002698 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	f241 3288 	movw	r2, #5000	; 0x1388
 8004366:	4293      	cmp	r3, r2
 8004368:	d901      	bls.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e351      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800436e:	4b0c      	ldr	r3, [pc, #48]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d0ee      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004382:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004386:	d111      	bne.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004388:	4b05      	ldr	r3, [pc, #20]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004394:	4b04      	ldr	r3, [pc, #16]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004396:	400b      	ands	r3, r1
 8004398:	4901      	ldr	r1, [pc, #4]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800439a:	4313      	orrs	r3, r2
 800439c:	608b      	str	r3, [r1, #8]
 800439e:	e00b      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80043a0:	40023800 	.word	0x40023800
 80043a4:	40007000 	.word	0x40007000
 80043a8:	0ffffcff 	.word	0x0ffffcff
 80043ac:	4bac      	ldr	r3, [pc, #688]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	4aab      	ldr	r2, [pc, #684]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80043b6:	6093      	str	r3, [r2, #8]
 80043b8:	4ba9      	ldr	r3, [pc, #676]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043c4:	49a6      	ldr	r1, [pc, #664]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0310 	and.w	r3, r3, #16
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d010      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80043d6:	4ba2      	ldr	r3, [pc, #648]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043dc:	4aa0      	ldr	r2, [pc, #640]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80043e6:	4b9e      	ldr	r3, [pc, #632]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043e8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f0:	499b      	ldr	r1, [pc, #620]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00a      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004404:	4b96      	ldr	r3, [pc, #600]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800440a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004412:	4993      	ldr	r1, [pc, #588]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004414:	4313      	orrs	r3, r2
 8004416:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00a      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004426:	4b8e      	ldr	r3, [pc, #568]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004434:	498a      	ldr	r1, [pc, #552]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004436:	4313      	orrs	r3, r2
 8004438:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00a      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004448:	4b85      	ldr	r3, [pc, #532]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800444a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800444e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004456:	4982      	ldr	r1, [pc, #520]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004458:	4313      	orrs	r3, r2
 800445a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00a      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800446a:	4b7d      	ldr	r3, [pc, #500]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800446c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004470:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004478:	4979      	ldr	r1, [pc, #484]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800447a:	4313      	orrs	r3, r2
 800447c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00a      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800448c:	4b74      	ldr	r3, [pc, #464]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800448e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004492:	f023 0203 	bic.w	r2, r3, #3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449a:	4971      	ldr	r1, [pc, #452]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800449c:	4313      	orrs	r3, r2
 800449e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00a      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044ae:	4b6c      	ldr	r3, [pc, #432]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b4:	f023 020c 	bic.w	r2, r3, #12
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044bc:	4968      	ldr	r1, [pc, #416]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00a      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044d0:	4b63      	ldr	r3, [pc, #396]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044de:	4960      	ldr	r1, [pc, #384]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00a      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80044f2:	4b5b      	ldr	r3, [pc, #364]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004500:	4957      	ldr	r1, [pc, #348]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004502:	4313      	orrs	r3, r2
 8004504:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00a      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004514:	4b52      	ldr	r3, [pc, #328]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004522:	494f      	ldr	r1, [pc, #316]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004524:	4313      	orrs	r3, r2
 8004526:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00a      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004536:	4b4a      	ldr	r3, [pc, #296]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800453c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004544:	4946      	ldr	r1, [pc, #280]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004546:	4313      	orrs	r3, r2
 8004548:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00a      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004558:	4b41      	ldr	r3, [pc, #260]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800455a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004566:	493e      	ldr	r1, [pc, #248]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004568:	4313      	orrs	r3, r2
 800456a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00a      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800457a:	4b39      	ldr	r3, [pc, #228]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800457c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004580:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004588:	4935      	ldr	r1, [pc, #212]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800458a:	4313      	orrs	r3, r2
 800458c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00a      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800459c:	4b30      	ldr	r3, [pc, #192]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800459e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045aa:	492d      	ldr	r1, [pc, #180]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d011      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80045be:	4b28      	ldr	r3, [pc, #160]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045cc:	4924      	ldr	r1, [pc, #144]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045dc:	d101      	bne.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80045de:	2301      	movs	r3, #1
 80045e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0308 	and.w	r3, r3, #8
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80045ee:	2301      	movs	r3, #1
 80045f0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00a      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045fe:	4b18      	ldr	r3, [pc, #96]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004604:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800460c:	4914      	ldr	r1, [pc, #80]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800460e:	4313      	orrs	r3, r2
 8004610:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00b      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004620:	4b0f      	ldr	r3, [pc, #60]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004626:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004630:	490b      	ldr	r1, [pc, #44]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004632:	4313      	orrs	r3, r2
 8004634:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00f      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004644:	4b06      	ldr	r3, [pc, #24]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800464a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004654:	4902      	ldr	r1, [pc, #8]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004656:	4313      	orrs	r3, r2
 8004658:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800465c:	e002      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800465e:	bf00      	nop
 8004660:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00b      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004670:	4b8a      	ldr	r3, [pc, #552]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004672:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004676:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004680:	4986      	ldr	r1, [pc, #536]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004682:	4313      	orrs	r3, r2
 8004684:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00b      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004694:	4b81      	ldr	r3, [pc, #516]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004696:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800469a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046a4:	497d      	ldr	r1, [pc, #500]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d006      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f000 80d6 	beq.w	800486c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80046c0:	4b76      	ldr	r3, [pc, #472]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a75      	ldr	r2, [pc, #468]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046cc:	f7fd ffe4 	bl	8002698 <HAL_GetTick>
 80046d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046d2:	e008      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80046d4:	f7fd ffe0 	bl	8002698 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b64      	cmp	r3, #100	; 0x64
 80046e0:	d901      	bls.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e195      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046e6:	4b6d      	ldr	r3, [pc, #436]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1f0      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d021      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004702:	2b00      	cmp	r3, #0
 8004704:	d11d      	bne.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004706:	4b65      	ldr	r3, [pc, #404]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004708:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800470c:	0c1b      	lsrs	r3, r3, #16
 800470e:	f003 0303 	and.w	r3, r3, #3
 8004712:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004714:	4b61      	ldr	r3, [pc, #388]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004716:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800471a:	0e1b      	lsrs	r3, r3, #24
 800471c:	f003 030f 	and.w	r3, r3, #15
 8004720:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	019a      	lsls	r2, r3, #6
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	041b      	lsls	r3, r3, #16
 800472c:	431a      	orrs	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	061b      	lsls	r3, r3, #24
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	071b      	lsls	r3, r3, #28
 800473a:	4958      	ldr	r1, [pc, #352]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800473c:	4313      	orrs	r3, r2
 800473e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d004      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004752:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004756:	d00a      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004760:	2b00      	cmp	r3, #0
 8004762:	d02e      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004768:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800476c:	d129      	bne.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800476e:	4b4b      	ldr	r3, [pc, #300]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004770:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004774:	0c1b      	lsrs	r3, r3, #16
 8004776:	f003 0303 	and.w	r3, r3, #3
 800477a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800477c:	4b47      	ldr	r3, [pc, #284]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800477e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004782:	0f1b      	lsrs	r3, r3, #28
 8004784:	f003 0307 	and.w	r3, r3, #7
 8004788:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	019a      	lsls	r2, r3, #6
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	041b      	lsls	r3, r3, #16
 8004794:	431a      	orrs	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	061b      	lsls	r3, r3, #24
 800479c:	431a      	orrs	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	071b      	lsls	r3, r3, #28
 80047a2:	493e      	ldr	r1, [pc, #248]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80047aa:	4b3c      	ldr	r3, [pc, #240]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047b0:	f023 021f 	bic.w	r2, r3, #31
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b8:	3b01      	subs	r3, #1
 80047ba:	4938      	ldr	r1, [pc, #224]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d01d      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80047ce:	4b33      	ldr	r3, [pc, #204]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047d4:	0e1b      	lsrs	r3, r3, #24
 80047d6:	f003 030f 	and.w	r3, r3, #15
 80047da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80047dc:	4b2f      	ldr	r3, [pc, #188]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047e2:	0f1b      	lsrs	r3, r3, #28
 80047e4:	f003 0307 	and.w	r3, r3, #7
 80047e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	019a      	lsls	r2, r3, #6
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	041b      	lsls	r3, r3, #16
 80047f6:	431a      	orrs	r2, r3
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	061b      	lsls	r3, r3, #24
 80047fc:	431a      	orrs	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	071b      	lsls	r3, r3, #28
 8004802:	4926      	ldr	r1, [pc, #152]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004804:	4313      	orrs	r3, r2
 8004806:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d011      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	019a      	lsls	r2, r3, #6
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	041b      	lsls	r3, r3, #16
 8004822:	431a      	orrs	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	061b      	lsls	r3, r3, #24
 800482a:	431a      	orrs	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	071b      	lsls	r3, r3, #28
 8004832:	491a      	ldr	r1, [pc, #104]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004834:	4313      	orrs	r3, r2
 8004836:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800483a:	4b18      	ldr	r3, [pc, #96]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a17      	ldr	r2, [pc, #92]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004840:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004844:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004846:	f7fd ff27 	bl	8002698 <HAL_GetTick>
 800484a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800484c:	e008      	b.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800484e:	f7fd ff23 	bl	8002698 <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	2b64      	cmp	r3, #100	; 0x64
 800485a:	d901      	bls.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e0d8      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004860:	4b0e      	ldr	r3, [pc, #56]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d0f0      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	2b01      	cmp	r3, #1
 8004870:	f040 80ce 	bne.w	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004874:	4b09      	ldr	r3, [pc, #36]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a08      	ldr	r2, [pc, #32]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800487a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800487e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004880:	f7fd ff0a 	bl	8002698 <HAL_GetTick>
 8004884:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004886:	e00b      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004888:	f7fd ff06 	bl	8002698 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b64      	cmp	r3, #100	; 0x64
 8004894:	d904      	bls.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e0bb      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800489a:	bf00      	nop
 800489c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80048a0:	4b5e      	ldr	r3, [pc, #376]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048ac:	d0ec      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d009      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d02e      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d12a      	bne.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80048d6:	4b51      	ldr	r3, [pc, #324]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048dc:	0c1b      	lsrs	r3, r3, #16
 80048de:	f003 0303 	and.w	r3, r3, #3
 80048e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80048e4:	4b4d      	ldr	r3, [pc, #308]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ea:	0f1b      	lsrs	r3, r3, #28
 80048ec:	f003 0307 	and.w	r3, r3, #7
 80048f0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	019a      	lsls	r2, r3, #6
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	041b      	lsls	r3, r3, #16
 80048fc:	431a      	orrs	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	061b      	lsls	r3, r3, #24
 8004904:	431a      	orrs	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	071b      	lsls	r3, r3, #28
 800490a:	4944      	ldr	r1, [pc, #272]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800490c:	4313      	orrs	r3, r2
 800490e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004912:	4b42      	ldr	r3, [pc, #264]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004914:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004918:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004920:	3b01      	subs	r3, #1
 8004922:	021b      	lsls	r3, r3, #8
 8004924:	493d      	ldr	r1, [pc, #244]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004926:	4313      	orrs	r3, r2
 8004928:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d022      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800493c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004940:	d11d      	bne.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004942:	4b36      	ldr	r3, [pc, #216]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004948:	0e1b      	lsrs	r3, r3, #24
 800494a:	f003 030f 	and.w	r3, r3, #15
 800494e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004950:	4b32      	ldr	r3, [pc, #200]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004956:	0f1b      	lsrs	r3, r3, #28
 8004958:	f003 0307 	and.w	r3, r3, #7
 800495c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	019a      	lsls	r2, r3, #6
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a1b      	ldr	r3, [r3, #32]
 8004968:	041b      	lsls	r3, r3, #16
 800496a:	431a      	orrs	r2, r3
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	061b      	lsls	r3, r3, #24
 8004970:	431a      	orrs	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	071b      	lsls	r3, r3, #28
 8004976:	4929      	ldr	r1, [pc, #164]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004978:	4313      	orrs	r3, r2
 800497a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0308 	and.w	r3, r3, #8
 8004986:	2b00      	cmp	r3, #0
 8004988:	d028      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800498a:	4b24      	ldr	r3, [pc, #144]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800498c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004990:	0e1b      	lsrs	r3, r3, #24
 8004992:	f003 030f 	and.w	r3, r3, #15
 8004996:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004998:	4b20      	ldr	r3, [pc, #128]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800499a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499e:	0c1b      	lsrs	r3, r3, #16
 80049a0:	f003 0303 	and.w	r3, r3, #3
 80049a4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	019a      	lsls	r2, r3, #6
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	041b      	lsls	r3, r3, #16
 80049b0:	431a      	orrs	r2, r3
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	061b      	lsls	r3, r3, #24
 80049b6:	431a      	orrs	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	69db      	ldr	r3, [r3, #28]
 80049bc:	071b      	lsls	r3, r3, #28
 80049be:	4917      	ldr	r1, [pc, #92]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80049c6:	4b15      	ldr	r3, [pc, #84]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d4:	4911      	ldr	r1, [pc, #68]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80049dc:	4b0f      	ldr	r3, [pc, #60]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a0e      	ldr	r2, [pc, #56]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049e8:	f7fd fe56 	bl	8002698 <HAL_GetTick>
 80049ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80049ee:	e008      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80049f0:	f7fd fe52 	bl	8002698 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b64      	cmp	r3, #100	; 0x64
 80049fc:	d901      	bls.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e007      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a02:	4b06      	ldr	r3, [pc, #24]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a0e:	d1ef      	bne.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3720      	adds	r7, #32
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	40023800 	.word	0x40023800

08004a20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e049      	b.n	8004ac6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d106      	bne.n	8004a4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f841 	bl	8004ace <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	3304      	adds	r3, #4
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	4610      	mov	r0, r2
 8004a60:	f000 fc12 	bl	8005288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b083      	sub	sp, #12
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004ad6:	bf00      	nop
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
	...

08004ae4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d001      	beq.n	8004afc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e054      	b.n	8004ba6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2202      	movs	r2, #2
 8004b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f042 0201 	orr.w	r2, r2, #1
 8004b12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a26      	ldr	r2, [pc, #152]	; (8004bb4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d022      	beq.n	8004b64 <HAL_TIM_Base_Start_IT+0x80>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b26:	d01d      	beq.n	8004b64 <HAL_TIM_Base_Start_IT+0x80>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a22      	ldr	r2, [pc, #136]	; (8004bb8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d018      	beq.n	8004b64 <HAL_TIM_Base_Start_IT+0x80>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a21      	ldr	r2, [pc, #132]	; (8004bbc <HAL_TIM_Base_Start_IT+0xd8>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d013      	beq.n	8004b64 <HAL_TIM_Base_Start_IT+0x80>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a1f      	ldr	r2, [pc, #124]	; (8004bc0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d00e      	beq.n	8004b64 <HAL_TIM_Base_Start_IT+0x80>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a1e      	ldr	r2, [pc, #120]	; (8004bc4 <HAL_TIM_Base_Start_IT+0xe0>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d009      	beq.n	8004b64 <HAL_TIM_Base_Start_IT+0x80>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a1c      	ldr	r2, [pc, #112]	; (8004bc8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d004      	beq.n	8004b64 <HAL_TIM_Base_Start_IT+0x80>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a1b      	ldr	r2, [pc, #108]	; (8004bcc <HAL_TIM_Base_Start_IT+0xe8>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d115      	bne.n	8004b90 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	689a      	ldr	r2, [r3, #8]
 8004b6a:	4b19      	ldr	r3, [pc, #100]	; (8004bd0 <HAL_TIM_Base_Start_IT+0xec>)
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2b06      	cmp	r3, #6
 8004b74:	d015      	beq.n	8004ba2 <HAL_TIM_Base_Start_IT+0xbe>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b7c:	d011      	beq.n	8004ba2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f042 0201 	orr.w	r2, r2, #1
 8004b8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b8e:	e008      	b.n	8004ba2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f042 0201 	orr.w	r2, r2, #1
 8004b9e:	601a      	str	r2, [r3, #0]
 8004ba0:	e000      	b.n	8004ba4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3714      	adds	r7, #20
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	40010000 	.word	0x40010000
 8004bb8:	40000400 	.word	0x40000400
 8004bbc:	40000800 	.word	0x40000800
 8004bc0:	40000c00 	.word	0x40000c00
 8004bc4:	40010400 	.word	0x40010400
 8004bc8:	40014000 	.word	0x40014000
 8004bcc:	40001800 	.word	0x40001800
 8004bd0:	00010007 	.word	0x00010007

08004bd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e049      	b.n	8004c7a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d106      	bne.n	8004c00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7fd f98a 	bl	8001f14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2202      	movs	r2, #2
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	3304      	adds	r3, #4
 8004c10:	4619      	mov	r1, r3
 8004c12:	4610      	mov	r0, r2
 8004c14:	f000 fb38 	bl	8005288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3708      	adds	r7, #8
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
	...

08004c84 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d101      	bne.n	8004c98 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e08f      	b.n	8004db8 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d106      	bne.n	8004cb2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f7fd f965 	bl	8001f7c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2202      	movs	r2, #2
 8004cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6899      	ldr	r1, [r3, #8]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	4b3e      	ldr	r3, [pc, #248]	; (8004dc0 <HAL_TIM_Encoder_Init+0x13c>)
 8004cc6:	400b      	ands	r3, r1
 8004cc8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	3304      	adds	r3, #4
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	4610      	mov	r0, r2
 8004cd6:	f000 fad7 	bl	8005288 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	4b31      	ldr	r3, [pc, #196]	; (8004dc4 <HAL_TIM_Encoder_Init+0x140>)
 8004d00:	4013      	ands	r3, r2
 8004d02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	689a      	ldr	r2, [r3, #8]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	021b      	lsls	r3, r3, #8
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	4b2b      	ldr	r3, [pc, #172]	; (8004dc8 <HAL_TIM_Encoder_Init+0x144>)
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	4b2a      	ldr	r3, [pc, #168]	; (8004dcc <HAL_TIM_Encoder_Init+0x148>)
 8004d22:	4013      	ands	r3, r2
 8004d24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	68da      	ldr	r2, [r3, #12]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	69db      	ldr	r3, [r3, #28]
 8004d2e:	021b      	lsls	r3, r3, #8
 8004d30:	4313      	orrs	r3, r2
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	011a      	lsls	r2, r3, #4
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	031b      	lsls	r3, r3, #12
 8004d44:	4313      	orrs	r3, r2
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004d52:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004d5a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685a      	ldr	r2, [r3, #4]
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	011b      	lsls	r3, r3, #4
 8004d66:	4313      	orrs	r3, r2
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3718      	adds	r7, #24
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	fffebff8 	.word	0xfffebff8
 8004dc4:	fffffcfc 	.word	0xfffffcfc
 8004dc8:	fffff3f3 	.word	0xfffff3f3
 8004dcc:	ffff0f0f 	.word	0xffff0f0f

08004dd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d122      	bne.n	8004e2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d11b      	bne.n	8004e2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f06f 0202 	mvn.w	r2, #2
 8004dfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2201      	movs	r2, #1
 8004e02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	f003 0303 	and.w	r3, r3, #3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d003      	beq.n	8004e1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 fa1a 	bl	800524c <HAL_TIM_IC_CaptureCallback>
 8004e18:	e005      	b.n	8004e26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 fa0c 	bl	8005238 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 fa1d 	bl	8005260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	f003 0304 	and.w	r3, r3, #4
 8004e36:	2b04      	cmp	r3, #4
 8004e38:	d122      	bne.n	8004e80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	f003 0304 	and.w	r3, r3, #4
 8004e44:	2b04      	cmp	r3, #4
 8004e46:	d11b      	bne.n	8004e80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f06f 0204 	mvn.w	r2, #4
 8004e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2202      	movs	r2, #2
 8004e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 f9f0 	bl	800524c <HAL_TIM_IC_CaptureCallback>
 8004e6c:	e005      	b.n	8004e7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 f9e2 	bl	8005238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f9f3 	bl	8005260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	f003 0308 	and.w	r3, r3, #8
 8004e8a:	2b08      	cmp	r3, #8
 8004e8c:	d122      	bne.n	8004ed4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	f003 0308 	and.w	r3, r3, #8
 8004e98:	2b08      	cmp	r3, #8
 8004e9a:	d11b      	bne.n	8004ed4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f06f 0208 	mvn.w	r2, #8
 8004ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2204      	movs	r2, #4
 8004eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	f003 0303 	and.w	r3, r3, #3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d003      	beq.n	8004ec2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f9c6 	bl	800524c <HAL_TIM_IC_CaptureCallback>
 8004ec0:	e005      	b.n	8004ece <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 f9b8 	bl	8005238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 f9c9 	bl	8005260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	f003 0310 	and.w	r3, r3, #16
 8004ede:	2b10      	cmp	r3, #16
 8004ee0:	d122      	bne.n	8004f28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	f003 0310 	and.w	r3, r3, #16
 8004eec:	2b10      	cmp	r3, #16
 8004eee:	d11b      	bne.n	8004f28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f06f 0210 	mvn.w	r2, #16
 8004ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2208      	movs	r2, #8
 8004efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	69db      	ldr	r3, [r3, #28]
 8004f06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d003      	beq.n	8004f16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f99c 	bl	800524c <HAL_TIM_IC_CaptureCallback>
 8004f14:	e005      	b.n	8004f22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f98e 	bl	8005238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 f99f 	bl	8005260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d10e      	bne.n	8004f54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d107      	bne.n	8004f54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f06f 0201 	mvn.w	r2, #1
 8004f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f7fc f988 	bl	8001264 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f5e:	2b80      	cmp	r3, #128	; 0x80
 8004f60:	d10e      	bne.n	8004f80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f6c:	2b80      	cmp	r3, #128	; 0x80
 8004f6e:	d107      	bne.n	8004f80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 fd98 	bl	8005ab0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f8e:	d10e      	bne.n	8004fae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f9a:	2b80      	cmp	r3, #128	; 0x80
 8004f9c:	d107      	bne.n	8004fae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004fa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 fd8b 	bl	8005ac4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb8:	2b40      	cmp	r3, #64	; 0x40
 8004fba:	d10e      	bne.n	8004fda <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc6:	2b40      	cmp	r3, #64	; 0x40
 8004fc8:	d107      	bne.n	8004fda <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 f94d 	bl	8005274 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	f003 0320 	and.w	r3, r3, #32
 8004fe4:	2b20      	cmp	r3, #32
 8004fe6:	d10e      	bne.n	8005006 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	f003 0320 	and.w	r3, r3, #32
 8004ff2:	2b20      	cmp	r3, #32
 8004ff4:	d107      	bne.n	8005006 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f06f 0220 	mvn.w	r2, #32
 8004ffe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 fd4b 	bl	8005a9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005006:	bf00      	nop
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
	...

08005010 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800501c:	2300      	movs	r3, #0
 800501e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005026:	2b01      	cmp	r3, #1
 8005028:	d101      	bne.n	800502e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800502a:	2302      	movs	r3, #2
 800502c:	e0ff      	b.n	800522e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2b14      	cmp	r3, #20
 800503a:	f200 80f0 	bhi.w	800521e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800503e:	a201      	add	r2, pc, #4	; (adr r2, 8005044 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005044:	08005099 	.word	0x08005099
 8005048:	0800521f 	.word	0x0800521f
 800504c:	0800521f 	.word	0x0800521f
 8005050:	0800521f 	.word	0x0800521f
 8005054:	080050d9 	.word	0x080050d9
 8005058:	0800521f 	.word	0x0800521f
 800505c:	0800521f 	.word	0x0800521f
 8005060:	0800521f 	.word	0x0800521f
 8005064:	0800511b 	.word	0x0800511b
 8005068:	0800521f 	.word	0x0800521f
 800506c:	0800521f 	.word	0x0800521f
 8005070:	0800521f 	.word	0x0800521f
 8005074:	0800515b 	.word	0x0800515b
 8005078:	0800521f 	.word	0x0800521f
 800507c:	0800521f 	.word	0x0800521f
 8005080:	0800521f 	.word	0x0800521f
 8005084:	0800519d 	.word	0x0800519d
 8005088:	0800521f 	.word	0x0800521f
 800508c:	0800521f 	.word	0x0800521f
 8005090:	0800521f 	.word	0x0800521f
 8005094:	080051dd 	.word	0x080051dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68b9      	ldr	r1, [r7, #8]
 800509e:	4618      	mov	r0, r3
 80050a0:	f000 f992 	bl	80053c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	699a      	ldr	r2, [r3, #24]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f042 0208 	orr.w	r2, r2, #8
 80050b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	699a      	ldr	r2, [r3, #24]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 0204 	bic.w	r2, r2, #4
 80050c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	6999      	ldr	r1, [r3, #24]
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	691a      	ldr	r2, [r3, #16]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	430a      	orrs	r2, r1
 80050d4:	619a      	str	r2, [r3, #24]
      break;
 80050d6:	e0a5      	b.n	8005224 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68b9      	ldr	r1, [r7, #8]
 80050de:	4618      	mov	r0, r3
 80050e0:	f000 f9e4 	bl	80054ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	699a      	ldr	r2, [r3, #24]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	699a      	ldr	r2, [r3, #24]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005102:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6999      	ldr	r1, [r3, #24]
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	021a      	lsls	r2, r3, #8
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	430a      	orrs	r2, r1
 8005116:	619a      	str	r2, [r3, #24]
      break;
 8005118:	e084      	b.n	8005224 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68b9      	ldr	r1, [r7, #8]
 8005120:	4618      	mov	r0, r3
 8005122:	f000 fa3b 	bl	800559c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	69da      	ldr	r2, [r3, #28]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f042 0208 	orr.w	r2, r2, #8
 8005134:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	69da      	ldr	r2, [r3, #28]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f022 0204 	bic.w	r2, r2, #4
 8005144:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	69d9      	ldr	r1, [r3, #28]
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	691a      	ldr	r2, [r3, #16]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	430a      	orrs	r2, r1
 8005156:	61da      	str	r2, [r3, #28]
      break;
 8005158:	e064      	b.n	8005224 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68b9      	ldr	r1, [r7, #8]
 8005160:	4618      	mov	r0, r3
 8005162:	f000 fa91 	bl	8005688 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	69da      	ldr	r2, [r3, #28]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005174:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	69da      	ldr	r2, [r3, #28]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005184:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	69d9      	ldr	r1, [r3, #28]
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	021a      	lsls	r2, r3, #8
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	430a      	orrs	r2, r1
 8005198:	61da      	str	r2, [r3, #28]
      break;
 800519a:	e043      	b.n	8005224 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68b9      	ldr	r1, [r7, #8]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 fac8 	bl	8005738 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f042 0208 	orr.w	r2, r2, #8
 80051b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 0204 	bic.w	r2, r2, #4
 80051c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	691a      	ldr	r2, [r3, #16]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80051da:	e023      	b.n	8005224 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68b9      	ldr	r1, [r7, #8]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 fafa 	bl	80057dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005206:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	021a      	lsls	r2, r3, #8
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	430a      	orrs	r2, r1
 800521a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800521c:	e002      	b.n	8005224 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	75fb      	strb	r3, [r7, #23]
      break;
 8005222:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800522c:	7dfb      	ldrb	r3, [r7, #23]
}
 800522e:	4618      	mov	r0, r3
 8005230:	3718      	adds	r7, #24
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop

08005238 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005268:	bf00      	nop
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a40      	ldr	r2, [pc, #256]	; (800539c <TIM_Base_SetConfig+0x114>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d013      	beq.n	80052c8 <TIM_Base_SetConfig+0x40>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052a6:	d00f      	beq.n	80052c8 <TIM_Base_SetConfig+0x40>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a3d      	ldr	r2, [pc, #244]	; (80053a0 <TIM_Base_SetConfig+0x118>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d00b      	beq.n	80052c8 <TIM_Base_SetConfig+0x40>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a3c      	ldr	r2, [pc, #240]	; (80053a4 <TIM_Base_SetConfig+0x11c>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d007      	beq.n	80052c8 <TIM_Base_SetConfig+0x40>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a3b      	ldr	r2, [pc, #236]	; (80053a8 <TIM_Base_SetConfig+0x120>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d003      	beq.n	80052c8 <TIM_Base_SetConfig+0x40>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a3a      	ldr	r2, [pc, #232]	; (80053ac <TIM_Base_SetConfig+0x124>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d108      	bne.n	80052da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a2f      	ldr	r2, [pc, #188]	; (800539c <TIM_Base_SetConfig+0x114>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d02b      	beq.n	800533a <TIM_Base_SetConfig+0xb2>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052e8:	d027      	beq.n	800533a <TIM_Base_SetConfig+0xb2>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a2c      	ldr	r2, [pc, #176]	; (80053a0 <TIM_Base_SetConfig+0x118>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d023      	beq.n	800533a <TIM_Base_SetConfig+0xb2>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a2b      	ldr	r2, [pc, #172]	; (80053a4 <TIM_Base_SetConfig+0x11c>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d01f      	beq.n	800533a <TIM_Base_SetConfig+0xb2>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a2a      	ldr	r2, [pc, #168]	; (80053a8 <TIM_Base_SetConfig+0x120>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d01b      	beq.n	800533a <TIM_Base_SetConfig+0xb2>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a29      	ldr	r2, [pc, #164]	; (80053ac <TIM_Base_SetConfig+0x124>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d017      	beq.n	800533a <TIM_Base_SetConfig+0xb2>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a28      	ldr	r2, [pc, #160]	; (80053b0 <TIM_Base_SetConfig+0x128>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d013      	beq.n	800533a <TIM_Base_SetConfig+0xb2>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a27      	ldr	r2, [pc, #156]	; (80053b4 <TIM_Base_SetConfig+0x12c>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d00f      	beq.n	800533a <TIM_Base_SetConfig+0xb2>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a26      	ldr	r2, [pc, #152]	; (80053b8 <TIM_Base_SetConfig+0x130>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d00b      	beq.n	800533a <TIM_Base_SetConfig+0xb2>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a25      	ldr	r2, [pc, #148]	; (80053bc <TIM_Base_SetConfig+0x134>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d007      	beq.n	800533a <TIM_Base_SetConfig+0xb2>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a24      	ldr	r2, [pc, #144]	; (80053c0 <TIM_Base_SetConfig+0x138>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d003      	beq.n	800533a <TIM_Base_SetConfig+0xb2>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a23      	ldr	r2, [pc, #140]	; (80053c4 <TIM_Base_SetConfig+0x13c>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d108      	bne.n	800534c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005340:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	4313      	orrs	r3, r2
 800534a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	4313      	orrs	r3, r2
 8005358:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	689a      	ldr	r2, [r3, #8]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a0a      	ldr	r2, [pc, #40]	; (800539c <TIM_Base_SetConfig+0x114>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d003      	beq.n	8005380 <TIM_Base_SetConfig+0xf8>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a0c      	ldr	r2, [pc, #48]	; (80053ac <TIM_Base_SetConfig+0x124>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d103      	bne.n	8005388 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	691a      	ldr	r2, [r3, #16]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	615a      	str	r2, [r3, #20]
}
 800538e:	bf00      	nop
 8005390:	3714      	adds	r7, #20
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	40010000 	.word	0x40010000
 80053a0:	40000400 	.word	0x40000400
 80053a4:	40000800 	.word	0x40000800
 80053a8:	40000c00 	.word	0x40000c00
 80053ac:	40010400 	.word	0x40010400
 80053b0:	40014000 	.word	0x40014000
 80053b4:	40014400 	.word	0x40014400
 80053b8:	40014800 	.word	0x40014800
 80053bc:	40001800 	.word	0x40001800
 80053c0:	40001c00 	.word	0x40001c00
 80053c4:	40002000 	.word	0x40002000

080053c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b087      	sub	sp, #28
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
 80053d6:	f023 0201 	bic.w	r2, r3, #1
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	4b2b      	ldr	r3, [pc, #172]	; (80054a0 <TIM_OC1_SetConfig+0xd8>)
 80053f4:	4013      	ands	r3, r2
 80053f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f023 0303 	bic.w	r3, r3, #3
 80053fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	4313      	orrs	r3, r2
 8005408:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f023 0302 	bic.w	r3, r3, #2
 8005410:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	4313      	orrs	r3, r2
 800541a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a21      	ldr	r2, [pc, #132]	; (80054a4 <TIM_OC1_SetConfig+0xdc>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d003      	beq.n	800542c <TIM_OC1_SetConfig+0x64>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a20      	ldr	r2, [pc, #128]	; (80054a8 <TIM_OC1_SetConfig+0xe0>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d10c      	bne.n	8005446 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	f023 0308 	bic.w	r3, r3, #8
 8005432:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	4313      	orrs	r3, r2
 800543c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	f023 0304 	bic.w	r3, r3, #4
 8005444:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a16      	ldr	r2, [pc, #88]	; (80054a4 <TIM_OC1_SetConfig+0xdc>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d003      	beq.n	8005456 <TIM_OC1_SetConfig+0x8e>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a15      	ldr	r2, [pc, #84]	; (80054a8 <TIM_OC1_SetConfig+0xe0>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d111      	bne.n	800547a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800545c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005464:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	4313      	orrs	r3, r2
 800546e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	4313      	orrs	r3, r2
 8005478:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	621a      	str	r2, [r3, #32]
}
 8005494:	bf00      	nop
 8005496:	371c      	adds	r7, #28
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr
 80054a0:	fffeff8f 	.word	0xfffeff8f
 80054a4:	40010000 	.word	0x40010000
 80054a8:	40010400 	.word	0x40010400

080054ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b087      	sub	sp, #28
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	f023 0210 	bic.w	r2, r3, #16
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	4b2e      	ldr	r3, [pc, #184]	; (8005590 <TIM_OC2_SetConfig+0xe4>)
 80054d8:	4013      	ands	r3, r2
 80054da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	021b      	lsls	r3, r3, #8
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	f023 0320 	bic.w	r3, r3, #32
 80054f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	011b      	lsls	r3, r3, #4
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	4313      	orrs	r3, r2
 8005502:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a23      	ldr	r2, [pc, #140]	; (8005594 <TIM_OC2_SetConfig+0xe8>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d003      	beq.n	8005514 <TIM_OC2_SetConfig+0x68>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a22      	ldr	r2, [pc, #136]	; (8005598 <TIM_OC2_SetConfig+0xec>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d10d      	bne.n	8005530 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800551a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	011b      	lsls	r3, r3, #4
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	4313      	orrs	r3, r2
 8005526:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800552e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a18      	ldr	r2, [pc, #96]	; (8005594 <TIM_OC2_SetConfig+0xe8>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d003      	beq.n	8005540 <TIM_OC2_SetConfig+0x94>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a17      	ldr	r2, [pc, #92]	; (8005598 <TIM_OC2_SetConfig+0xec>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d113      	bne.n	8005568 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005546:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800554e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	695b      	ldr	r3, [r3, #20]
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	4313      	orrs	r3, r2
 800555a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	699b      	ldr	r3, [r3, #24]
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	4313      	orrs	r3, r2
 8005566:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	621a      	str	r2, [r3, #32]
}
 8005582:	bf00      	nop
 8005584:	371c      	adds	r7, #28
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	feff8fff 	.word	0xfeff8fff
 8005594:	40010000 	.word	0x40010000
 8005598:	40010400 	.word	0x40010400

0800559c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800559c:	b480      	push	{r7}
 800559e:	b087      	sub	sp, #28
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a1b      	ldr	r3, [r3, #32]
 80055aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a1b      	ldr	r3, [r3, #32]
 80055b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	4b2d      	ldr	r3, [pc, #180]	; (800567c <TIM_OC3_SetConfig+0xe0>)
 80055c8:	4013      	ands	r3, r2
 80055ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f023 0303 	bic.w	r3, r3, #3
 80055d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	4313      	orrs	r3, r2
 80055dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	021b      	lsls	r3, r3, #8
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a22      	ldr	r2, [pc, #136]	; (8005680 <TIM_OC3_SetConfig+0xe4>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d003      	beq.n	8005602 <TIM_OC3_SetConfig+0x66>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a21      	ldr	r2, [pc, #132]	; (8005684 <TIM_OC3_SetConfig+0xe8>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d10d      	bne.n	800561e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005608:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	021b      	lsls	r3, r3, #8
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	4313      	orrs	r3, r2
 8005614:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800561c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a17      	ldr	r2, [pc, #92]	; (8005680 <TIM_OC3_SetConfig+0xe4>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d003      	beq.n	800562e <TIM_OC3_SetConfig+0x92>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a16      	ldr	r2, [pc, #88]	; (8005684 <TIM_OC3_SetConfig+0xe8>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d113      	bne.n	8005656 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005634:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800563c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	011b      	lsls	r3, r3, #4
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	4313      	orrs	r3, r2
 8005648:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	011b      	lsls	r3, r3, #4
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	4313      	orrs	r3, r2
 8005654:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	621a      	str	r2, [r3, #32]
}
 8005670:	bf00      	nop
 8005672:	371c      	adds	r7, #28
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr
 800567c:	fffeff8f 	.word	0xfffeff8f
 8005680:	40010000 	.word	0x40010000
 8005684:	40010400 	.word	0x40010400

08005688 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005688:	b480      	push	{r7}
 800568a:	b087      	sub	sp, #28
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	69db      	ldr	r3, [r3, #28]
 80056ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	4b1e      	ldr	r3, [pc, #120]	; (800572c <TIM_OC4_SetConfig+0xa4>)
 80056b4:	4013      	ands	r3, r2
 80056b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	021b      	lsls	r3, r3, #8
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	031b      	lsls	r3, r3, #12
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	4313      	orrs	r3, r2
 80056de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a13      	ldr	r2, [pc, #76]	; (8005730 <TIM_OC4_SetConfig+0xa8>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d003      	beq.n	80056f0 <TIM_OC4_SetConfig+0x68>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a12      	ldr	r2, [pc, #72]	; (8005734 <TIM_OC4_SetConfig+0xac>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d109      	bne.n	8005704 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	695b      	ldr	r3, [r3, #20]
 80056fc:	019b      	lsls	r3, r3, #6
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	4313      	orrs	r3, r2
 8005702:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	685a      	ldr	r2, [r3, #4]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	621a      	str	r2, [r3, #32]
}
 800571e:	bf00      	nop
 8005720:	371c      	adds	r7, #28
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	feff8fff 	.word	0xfeff8fff
 8005730:	40010000 	.word	0x40010000
 8005734:	40010400 	.word	0x40010400

08005738 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005738:	b480      	push	{r7}
 800573a:	b087      	sub	sp, #28
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800575e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	4b1b      	ldr	r3, [pc, #108]	; (80057d0 <TIM_OC5_SetConfig+0x98>)
 8005764:	4013      	ands	r3, r2
 8005766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	4313      	orrs	r3, r2
 8005770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005778:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	041b      	lsls	r3, r3, #16
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	4313      	orrs	r3, r2
 8005784:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a12      	ldr	r2, [pc, #72]	; (80057d4 <TIM_OC5_SetConfig+0x9c>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d003      	beq.n	8005796 <TIM_OC5_SetConfig+0x5e>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a11      	ldr	r2, [pc, #68]	; (80057d8 <TIM_OC5_SetConfig+0xa0>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d109      	bne.n	80057aa <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800579c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	021b      	lsls	r3, r3, #8
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	697a      	ldr	r2, [r7, #20]
 80057ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	685a      	ldr	r2, [r3, #4]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	621a      	str	r2, [r3, #32]
}
 80057c4:	bf00      	nop
 80057c6:	371c      	adds	r7, #28
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr
 80057d0:	fffeff8f 	.word	0xfffeff8f
 80057d4:	40010000 	.word	0x40010000
 80057d8:	40010400 	.word	0x40010400

080057dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80057dc:	b480      	push	{r7}
 80057de:	b087      	sub	sp, #28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	4b1c      	ldr	r3, [pc, #112]	; (8005878 <TIM_OC6_SetConfig+0x9c>)
 8005808:	4013      	ands	r3, r2
 800580a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	021b      	lsls	r3, r3, #8
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	4313      	orrs	r3, r2
 8005816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800581e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	051b      	lsls	r3, r3, #20
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	4313      	orrs	r3, r2
 800582a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a13      	ldr	r2, [pc, #76]	; (800587c <TIM_OC6_SetConfig+0xa0>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d003      	beq.n	800583c <TIM_OC6_SetConfig+0x60>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a12      	ldr	r2, [pc, #72]	; (8005880 <TIM_OC6_SetConfig+0xa4>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d109      	bne.n	8005850 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005842:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	695b      	ldr	r3, [r3, #20]
 8005848:	029b      	lsls	r3, r3, #10
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	4313      	orrs	r3, r2
 800584e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	685a      	ldr	r2, [r3, #4]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	621a      	str	r2, [r3, #32]
}
 800586a:	bf00      	nop
 800586c:	371c      	adds	r7, #28
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	feff8fff 	.word	0xfeff8fff
 800587c:	40010000 	.word	0x40010000
 8005880:	40010400 	.word	0x40010400

08005884 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005894:	2b01      	cmp	r3, #1
 8005896:	d101      	bne.n	800589c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005898:	2302      	movs	r3, #2
 800589a:	e06d      	b.n	8005978 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2202      	movs	r2, #2
 80058a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a30      	ldr	r2, [pc, #192]	; (8005984 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d004      	beq.n	80058d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a2f      	ldr	r2, [pc, #188]	; (8005988 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d108      	bne.n	80058e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80058d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	4313      	orrs	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a20      	ldr	r2, [pc, #128]	; (8005984 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d022      	beq.n	800594c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800590e:	d01d      	beq.n	800594c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a1d      	ldr	r2, [pc, #116]	; (800598c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d018      	beq.n	800594c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a1c      	ldr	r2, [pc, #112]	; (8005990 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d013      	beq.n	800594c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a1a      	ldr	r2, [pc, #104]	; (8005994 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d00e      	beq.n	800594c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a15      	ldr	r2, [pc, #84]	; (8005988 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d009      	beq.n	800594c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a16      	ldr	r2, [pc, #88]	; (8005998 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d004      	beq.n	800594c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a15      	ldr	r2, [pc, #84]	; (800599c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d10c      	bne.n	8005966 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005952:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	4313      	orrs	r3, r2
 800595c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3714      	adds	r7, #20
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr
 8005984:	40010000 	.word	0x40010000
 8005988:	40010400 	.word	0x40010400
 800598c:	40000400 	.word	0x40000400
 8005990:	40000800 	.word	0x40000800
 8005994:	40000c00 	.word	0x40000c00
 8005998:	40014000 	.word	0x40014000
 800599c:	40001800 	.word	0x40001800

080059a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80059aa:	2300      	movs	r3, #0
 80059ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d101      	bne.n	80059bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80059b8:	2302      	movs	r3, #2
 80059ba:	e065      	b.n	8005a88 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	4313      	orrs	r3, r2
 80059de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a22:	4313      	orrs	r3, r2
 8005a24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	041b      	lsls	r3, r3, #16
 8005a32:	4313      	orrs	r3, r2
 8005a34:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a16      	ldr	r2, [pc, #88]	; (8005a94 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d004      	beq.n	8005a4a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a14      	ldr	r2, [pc, #80]	; (8005a98 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d115      	bne.n	8005a76 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a54:	051b      	lsls	r3, r3, #20
 8005a56:	4313      	orrs	r3, r2
 8005a58:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	69db      	ldr	r3, [r3, #28]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3714      	adds	r7, #20
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr
 8005a94:	40010000 	.word	0x40010000
 8005a98:	40010400 	.word	0x40010400

08005a9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d101      	bne.n	8005aea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e040      	b.n	8005b6c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d106      	bne.n	8005b00 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f7fc fc0a 	bl	8002314 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2224      	movs	r2, #36	; 0x24
 8005b04:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f022 0201 	bic.w	r2, r2, #1
 8005b14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 fcae 	bl	8006478 <UART_SetConfig>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d101      	bne.n	8005b26 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e022      	b.n	8005b6c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d002      	beq.n	8005b34 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 ff06 	bl	8006940 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	685a      	ldr	r2, [r3, #4]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689a      	ldr	r2, [r3, #8]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f042 0201 	orr.w	r2, r2, #1
 8005b62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 ff8d 	bl	8006a84 <UART_CheckIdleState>
 8005b6a:	4603      	mov	r3, r0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3708      	adds	r7, #8
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b08a      	sub	sp, #40	; 0x28
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b86:	2b20      	cmp	r3, #32
 8005b88:	d165      	bne.n	8005c56 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d002      	beq.n	8005b96 <HAL_UART_Transmit_DMA+0x22>
 8005b90:	88fb      	ldrh	r3, [r7, #6]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d101      	bne.n	8005b9a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e05e      	b.n	8005c58 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	68ba      	ldr	r2, [r7, #8]
 8005b9e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	88fa      	ldrh	r2, [r7, #6]
 8005ba4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	88fa      	ldrh	r2, [r7, #6]
 8005bac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2221      	movs	r2, #33	; 0x21
 8005bbc:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d027      	beq.n	8005c16 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bca:	4a25      	ldr	r2, [pc, #148]	; (8005c60 <HAL_UART_Transmit_DMA+0xec>)
 8005bcc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd2:	4a24      	ldr	r2, [pc, #144]	; (8005c64 <HAL_UART_Transmit_DMA+0xf0>)
 8005bd4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bda:	4a23      	ldr	r2, [pc, #140]	; (8005c68 <HAL_UART_Transmit_DMA+0xf4>)
 8005bdc:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be2:	2200      	movs	r2, #0
 8005be4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bee:	4619      	mov	r1, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	3328      	adds	r3, #40	; 0x28
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	88fb      	ldrh	r3, [r7, #6]
 8005bfa:	f7fc ff0d 	bl	8002a18 <HAL_DMA_Start_IT>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d008      	beq.n	8005c16 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2210      	movs	r2, #16
 8005c08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2220      	movs	r2, #32
 8005c10:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e020      	b.n	8005c58 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2240      	movs	r2, #64	; 0x40
 8005c1c:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	3308      	adds	r3, #8
 8005c24:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	e853 3f00 	ldrex	r3, [r3]
 8005c2c:	613b      	str	r3, [r7, #16]
   return(result);
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c34:	627b      	str	r3, [r7, #36]	; 0x24
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	3308      	adds	r3, #8
 8005c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c3e:	623a      	str	r2, [r7, #32]
 8005c40:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c42:	69f9      	ldr	r1, [r7, #28]
 8005c44:	6a3a      	ldr	r2, [r7, #32]
 8005c46:	e841 2300 	strex	r3, r2, [r1]
 8005c4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1e5      	bne.n	8005c1e <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8005c52:	2300      	movs	r3, #0
 8005c54:	e000      	b.n	8005c58 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8005c56:	2302      	movs	r3, #2
  }
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3728      	adds	r7, #40	; 0x28
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	08006f01 	.word	0x08006f01
 8005c64:	08006f97 	.word	0x08006f97
 8005c68:	08007119 	.word	0x08007119

08005c6c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b08a      	sub	sp, #40	; 0x28
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	4613      	mov	r3, r2
 8005c78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c80:	2b20      	cmp	r3, #32
 8005c82:	d132      	bne.n	8005cea <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d002      	beq.n	8005c90 <HAL_UART_Receive_DMA+0x24>
 8005c8a:	88fb      	ldrh	r3, [r7, #6]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d101      	bne.n	8005c94 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e02b      	b.n	8005cec <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d018      	beq.n	8005cda <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	e853 3f00 	ldrex	r3, [r3]
 8005cb4:	613b      	str	r3, [r7, #16]
   return(result);
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc6:	623b      	str	r3, [r7, #32]
 8005cc8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cca:	69f9      	ldr	r1, [r7, #28]
 8005ccc:	6a3a      	ldr	r2, [r7, #32]
 8005cce:	e841 2300 	strex	r3, r2, [r1]
 8005cd2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1e6      	bne.n	8005ca8 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005cda:	88fb      	ldrh	r3, [r7, #6]
 8005cdc:	461a      	mov	r2, r3
 8005cde:	68b9      	ldr	r1, [r7, #8]
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f000 ffe3 	bl	8006cac <UART_Start_Receive_DMA>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	e000      	b.n	8005cec <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005cea:	2302      	movs	r3, #2
  }
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3728      	adds	r7, #40	; 0x28
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b090      	sub	sp, #64	; 0x40
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d00:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d08:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d14:	2b80      	cmp	r3, #128	; 0x80
 8005d16:	d139      	bne.n	8005d8c <HAL_UART_DMAStop+0x98>
 8005d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d1a:	2b21      	cmp	r3, #33	; 0x21
 8005d1c:	d136      	bne.n	8005d8c <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	3308      	adds	r3, #8
 8005d24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d26:	6a3b      	ldr	r3, [r7, #32]
 8005d28:	e853 3f00 	ldrex	r3, [r3]
 8005d2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d34:	637b      	str	r3, [r7, #52]	; 0x34
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	3308      	adds	r3, #8
 8005d3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d46:	e841 2300 	strex	r3, r2, [r1]
 8005d4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1e5      	bne.n	8005d1e <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d015      	beq.n	8005d86 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7fc feba 	bl	8002ad8 <HAL_DMA_Abort>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00d      	beq.n	8005d86 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7fd f8ce 	bl	8002f10 <HAL_DMA_GetError>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b20      	cmp	r3, #32
 8005d78:	d105      	bne.n	8005d86 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2210      	movs	r2, #16
 8005d7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e044      	b.n	8005e10 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f001 f830 	bl	8006dec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d96:	2b40      	cmp	r3, #64	; 0x40
 8005d98:	d139      	bne.n	8005e0e <HAL_UART_DMAStop+0x11a>
 8005d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9c:	2b22      	cmp	r3, #34	; 0x22
 8005d9e:	d136      	bne.n	8005e0e <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	3308      	adds	r3, #8
 8005da6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	e853 3f00 	ldrex	r3, [r3]
 8005dae:	60bb      	str	r3, [r7, #8]
   return(result);
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005db6:	633b      	str	r3, [r7, #48]	; 0x30
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	3308      	adds	r3, #8
 8005dbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dc0:	61ba      	str	r2, [r7, #24]
 8005dc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc4:	6979      	ldr	r1, [r7, #20]
 8005dc6:	69ba      	ldr	r2, [r7, #24]
 8005dc8:	e841 2300 	strex	r3, r2, [r1]
 8005dcc:	613b      	str	r3, [r7, #16]
   return(result);
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d1e5      	bne.n	8005da0 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d015      	beq.n	8005e08 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7fc fe79 	bl	8002ad8 <HAL_DMA_Abort>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00d      	beq.n	8005e08 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005df0:	4618      	mov	r0, r3
 8005df2:	f7fd f88d 	bl	8002f10 <HAL_DMA_GetError>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b20      	cmp	r3, #32
 8005dfa:	d105      	bne.n	8005e08 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2210      	movs	r2, #16
 8005e00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e003      	b.n	8005e10 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f001 f815 	bl	8006e38 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3740      	adds	r7, #64	; 0x40
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b0ba      	sub	sp, #232	; 0xe8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	69db      	ldr	r3, [r3, #28]
 8005e26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e3e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005e42:	f640 030f 	movw	r3, #2063	; 0x80f
 8005e46:	4013      	ands	r3, r2
 8005e48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005e4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d115      	bne.n	8005e80 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e58:	f003 0320 	and.w	r3, r3, #32
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d00f      	beq.n	8005e80 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e64:	f003 0320 	and.w	r3, r3, #32
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d009      	beq.n	8005e80 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f000 82ac 	beq.w	80063ce <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	4798      	blx	r3
      }
      return;
 8005e7e:	e2a6      	b.n	80063ce <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005e80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f000 8117 	beq.w	80060b8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005e8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d106      	bne.n	8005ea4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005e96:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005e9a:	4b85      	ldr	r3, [pc, #532]	; (80060b0 <HAL_UART_IRQHandler+0x298>)
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	f000 810a 	beq.w	80060b8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ea8:	f003 0301 	and.w	r3, r3, #1
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d011      	beq.n	8005ed4 <HAL_UART_IRQHandler+0xbc>
 8005eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00b      	beq.n	8005ed4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005eca:	f043 0201 	orr.w	r2, r3, #1
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ed8:	f003 0302 	and.w	r3, r3, #2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d011      	beq.n	8005f04 <HAL_UART_IRQHandler+0xec>
 8005ee0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ee4:	f003 0301 	and.w	r3, r3, #1
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00b      	beq.n	8005f04 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2202      	movs	r2, #2
 8005ef2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005efa:	f043 0204 	orr.w	r2, r3, #4
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f08:	f003 0304 	and.w	r3, r3, #4
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d011      	beq.n	8005f34 <HAL_UART_IRQHandler+0x11c>
 8005f10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00b      	beq.n	8005f34 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2204      	movs	r2, #4
 8005f22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f2a:	f043 0202 	orr.w	r2, r3, #2
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f38:	f003 0308 	and.w	r3, r3, #8
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d017      	beq.n	8005f70 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f44:	f003 0320 	and.w	r3, r3, #32
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d105      	bne.n	8005f58 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005f4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f50:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00b      	beq.n	8005f70 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2208      	movs	r2, #8
 8005f5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f66:	f043 0208 	orr.w	r2, r3, #8
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d012      	beq.n	8005fa2 <HAL_UART_IRQHandler+0x18a>
 8005f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00c      	beq.n	8005fa2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f98:	f043 0220 	orr.w	r2, r3, #32
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f000 8212 	beq.w	80063d2 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fb2:	f003 0320 	and.w	r3, r3, #32
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00d      	beq.n	8005fd6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005fba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fbe:	f003 0320 	and.w	r3, r3, #32
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d007      	beq.n	8005fd6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d003      	beq.n	8005fd6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fdc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fea:	2b40      	cmp	r3, #64	; 0x40
 8005fec:	d005      	beq.n	8005ffa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005fee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ff2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d04f      	beq.n	800609a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 ff1c 	bl	8006e38 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800600a:	2b40      	cmp	r3, #64	; 0x40
 800600c:	d141      	bne.n	8006092 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	3308      	adds	r3, #8
 8006014:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006018:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800601c:	e853 3f00 	ldrex	r3, [r3]
 8006020:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006024:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006028:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800602c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	3308      	adds	r3, #8
 8006036:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800603a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800603e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006042:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006046:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800604a:	e841 2300 	strex	r3, r2, [r1]
 800604e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006052:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d1d9      	bne.n	800600e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800605e:	2b00      	cmp	r3, #0
 8006060:	d013      	beq.n	800608a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006066:	4a13      	ldr	r2, [pc, #76]	; (80060b4 <HAL_UART_IRQHandler+0x29c>)
 8006068:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800606e:	4618      	mov	r0, r3
 8006070:	f7fc fda2 	bl	8002bb8 <HAL_DMA_Abort_IT>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d017      	beq.n	80060aa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800607e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006084:	4610      	mov	r0, r2
 8006086:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006088:	e00f      	b.n	80060aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f9d4 	bl	8006438 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006090:	e00b      	b.n	80060aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f9d0 	bl	8006438 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006098:	e007      	b.n	80060aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f9cc 	bl	8006438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80060a8:	e193      	b.n	80063d2 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060aa:	bf00      	nop
    return;
 80060ac:	e191      	b.n	80063d2 <HAL_UART_IRQHandler+0x5ba>
 80060ae:	bf00      	nop
 80060b0:	04000120 	.word	0x04000120
 80060b4:	08007197 	.word	0x08007197

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060bc:	2b01      	cmp	r3, #1
 80060be:	f040 814c 	bne.w	800635a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80060c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060c6:	f003 0310 	and.w	r3, r3, #16
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f000 8145 	beq.w	800635a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80060d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060d4:	f003 0310 	and.w	r3, r3, #16
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f000 813e 	beq.w	800635a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2210      	movs	r2, #16
 80060e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f0:	2b40      	cmp	r3, #64	; 0x40
 80060f2:	f040 80b6 	bne.w	8006262 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006102:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006106:	2b00      	cmp	r3, #0
 8006108:	f000 8165 	beq.w	80063d6 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006112:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006116:	429a      	cmp	r2, r3
 8006118:	f080 815d 	bcs.w	80063d6 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006122:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800612a:	69db      	ldr	r3, [r3, #28]
 800612c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006130:	f000 8086 	beq.w	8006240 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006140:	e853 3f00 	ldrex	r3, [r3]
 8006144:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006148:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800614c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006150:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	461a      	mov	r2, r3
 800615a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800615e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006162:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006166:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800616a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800616e:	e841 2300 	strex	r3, r2, [r1]
 8006172:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006176:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1da      	bne.n	8006134 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	3308      	adds	r3, #8
 8006184:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006186:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006188:	e853 3f00 	ldrex	r3, [r3]
 800618c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800618e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006190:	f023 0301 	bic.w	r3, r3, #1
 8006194:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	3308      	adds	r3, #8
 800619e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80061a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80061a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80061aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80061ae:	e841 2300 	strex	r3, r2, [r1]
 80061b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80061b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1e1      	bne.n	800617e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	3308      	adds	r3, #8
 80061c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061c4:	e853 3f00 	ldrex	r3, [r3]
 80061c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80061ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	3308      	adds	r3, #8
 80061da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80061de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80061e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80061e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80061e6:	e841 2300 	strex	r3, r2, [r1]
 80061ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80061ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d1e3      	bne.n	80061ba <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2220      	movs	r2, #32
 80061f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006208:	e853 3f00 	ldrex	r3, [r3]
 800620c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800620e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006210:	f023 0310 	bic.w	r3, r3, #16
 8006214:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	461a      	mov	r2, r3
 800621e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006222:	65bb      	str	r3, [r7, #88]	; 0x58
 8006224:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006226:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006228:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800622a:	e841 2300 	strex	r3, r2, [r1]
 800622e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006230:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1e4      	bne.n	8006200 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800623a:	4618      	mov	r0, r3
 800623c:	f7fc fc4c 	bl	8002ad8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2202      	movs	r2, #2
 8006244:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006252:	b29b      	uxth	r3, r3
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	b29b      	uxth	r3, r3
 8006258:	4619      	mov	r1, r3
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f8f6 	bl	800644c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006260:	e0b9      	b.n	80063d6 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800626e:	b29b      	uxth	r3, r3
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800627c:	b29b      	uxth	r3, r3
 800627e:	2b00      	cmp	r3, #0
 8006280:	f000 80ab 	beq.w	80063da <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8006284:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006288:	2b00      	cmp	r3, #0
 800628a:	f000 80a6 	beq.w	80063da <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006296:	e853 3f00 	ldrex	r3, [r3]
 800629a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800629c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800629e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	461a      	mov	r2, r3
 80062ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062b0:	647b      	str	r3, [r7, #68]	; 0x44
 80062b2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062b8:	e841 2300 	strex	r3, r2, [r1]
 80062bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1e4      	bne.n	800628e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	3308      	adds	r3, #8
 80062ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ce:	e853 3f00 	ldrex	r3, [r3]
 80062d2:	623b      	str	r3, [r7, #32]
   return(result);
 80062d4:	6a3b      	ldr	r3, [r7, #32]
 80062d6:	f023 0301 	bic.w	r3, r3, #1
 80062da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	3308      	adds	r3, #8
 80062e4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80062e8:	633a      	str	r2, [r7, #48]	; 0x30
 80062ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062f0:	e841 2300 	strex	r3, r2, [r1]
 80062f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d1e3      	bne.n	80062c4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2220      	movs	r2, #32
 8006300:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	e853 3f00 	ldrex	r3, [r3]
 800631c:	60fb      	str	r3, [r7, #12]
   return(result);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f023 0310 	bic.w	r3, r3, #16
 8006324:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	461a      	mov	r2, r3
 800632e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006332:	61fb      	str	r3, [r7, #28]
 8006334:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006336:	69b9      	ldr	r1, [r7, #24]
 8006338:	69fa      	ldr	r2, [r7, #28]
 800633a:	e841 2300 	strex	r3, r2, [r1]
 800633e:	617b      	str	r3, [r7, #20]
   return(result);
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1e4      	bne.n	8006310 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2202      	movs	r2, #2
 800634a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800634c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006350:	4619      	mov	r1, r3
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f87a 	bl	800644c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006358:	e03f      	b.n	80063da <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800635a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800635e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00e      	beq.n	8006384 <HAL_UART_IRQHandler+0x56c>
 8006366:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800636a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d008      	beq.n	8006384 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800637a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 f871 	bl	8006464 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006382:	e02d      	b.n	80063e0 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800638c:	2b00      	cmp	r3, #0
 800638e:	d00e      	beq.n	80063ae <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006398:	2b00      	cmp	r3, #0
 800639a:	d008      	beq.n	80063ae <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d01c      	beq.n	80063de <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	4798      	blx	r3
    }
    return;
 80063ac:	e017      	b.n	80063de <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80063ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d012      	beq.n	80063e0 <HAL_UART_IRQHandler+0x5c8>
 80063ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00c      	beq.n	80063e0 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 fefb 	bl	80071c2 <UART_EndTransmit_IT>
    return;
 80063cc:	e008      	b.n	80063e0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80063ce:	bf00      	nop
 80063d0:	e006      	b.n	80063e0 <HAL_UART_IRQHandler+0x5c8>
    return;
 80063d2:	bf00      	nop
 80063d4:	e004      	b.n	80063e0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80063d6:	bf00      	nop
 80063d8:	e002      	b.n	80063e0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80063da:	bf00      	nop
 80063dc:	e000      	b.n	80063e0 <HAL_UART_IRQHandler+0x5c8>
    return;
 80063de:	bf00      	nop
  }

}
 80063e0:	37e8      	adds	r7, #232	; 0xe8
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop

080063e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80063f0:	bf00      	nop
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006404:	bf00      	nop
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006418:	bf00      	nop
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006440:	bf00      	nop
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	460b      	mov	r3, r1
 8006456:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006458:	bf00      	nop
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800646c:	bf00      	nop
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b088      	sub	sp, #32
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006480:	2300      	movs	r3, #0
 8006482:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	689a      	ldr	r2, [r3, #8]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	431a      	orrs	r2, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	431a      	orrs	r2, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	69db      	ldr	r3, [r3, #28]
 8006498:	4313      	orrs	r3, r2
 800649a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	4ba6      	ldr	r3, [pc, #664]	; (800673c <UART_SetConfig+0x2c4>)
 80064a4:	4013      	ands	r3, r2
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	6812      	ldr	r2, [r2, #0]
 80064aa:	6979      	ldr	r1, [r7, #20]
 80064ac:	430b      	orrs	r3, r1
 80064ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	68da      	ldr	r2, [r3, #12]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	430a      	orrs	r2, r1
 80064c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6a1b      	ldr	r3, [r3, #32]
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	697a      	ldr	r2, [r7, #20]
 80064e6:	430a      	orrs	r2, r1
 80064e8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a94      	ldr	r2, [pc, #592]	; (8006740 <UART_SetConfig+0x2c8>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d120      	bne.n	8006536 <UART_SetConfig+0xbe>
 80064f4:	4b93      	ldr	r3, [pc, #588]	; (8006744 <UART_SetConfig+0x2cc>)
 80064f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064fa:	f003 0303 	and.w	r3, r3, #3
 80064fe:	2b03      	cmp	r3, #3
 8006500:	d816      	bhi.n	8006530 <UART_SetConfig+0xb8>
 8006502:	a201      	add	r2, pc, #4	; (adr r2, 8006508 <UART_SetConfig+0x90>)
 8006504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006508:	08006519 	.word	0x08006519
 800650c:	08006525 	.word	0x08006525
 8006510:	0800651f 	.word	0x0800651f
 8006514:	0800652b 	.word	0x0800652b
 8006518:	2301      	movs	r3, #1
 800651a:	77fb      	strb	r3, [r7, #31]
 800651c:	e150      	b.n	80067c0 <UART_SetConfig+0x348>
 800651e:	2302      	movs	r3, #2
 8006520:	77fb      	strb	r3, [r7, #31]
 8006522:	e14d      	b.n	80067c0 <UART_SetConfig+0x348>
 8006524:	2304      	movs	r3, #4
 8006526:	77fb      	strb	r3, [r7, #31]
 8006528:	e14a      	b.n	80067c0 <UART_SetConfig+0x348>
 800652a:	2308      	movs	r3, #8
 800652c:	77fb      	strb	r3, [r7, #31]
 800652e:	e147      	b.n	80067c0 <UART_SetConfig+0x348>
 8006530:	2310      	movs	r3, #16
 8006532:	77fb      	strb	r3, [r7, #31]
 8006534:	e144      	b.n	80067c0 <UART_SetConfig+0x348>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a83      	ldr	r2, [pc, #524]	; (8006748 <UART_SetConfig+0x2d0>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d132      	bne.n	80065a6 <UART_SetConfig+0x12e>
 8006540:	4b80      	ldr	r3, [pc, #512]	; (8006744 <UART_SetConfig+0x2cc>)
 8006542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006546:	f003 030c 	and.w	r3, r3, #12
 800654a:	2b0c      	cmp	r3, #12
 800654c:	d828      	bhi.n	80065a0 <UART_SetConfig+0x128>
 800654e:	a201      	add	r2, pc, #4	; (adr r2, 8006554 <UART_SetConfig+0xdc>)
 8006550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006554:	08006589 	.word	0x08006589
 8006558:	080065a1 	.word	0x080065a1
 800655c:	080065a1 	.word	0x080065a1
 8006560:	080065a1 	.word	0x080065a1
 8006564:	08006595 	.word	0x08006595
 8006568:	080065a1 	.word	0x080065a1
 800656c:	080065a1 	.word	0x080065a1
 8006570:	080065a1 	.word	0x080065a1
 8006574:	0800658f 	.word	0x0800658f
 8006578:	080065a1 	.word	0x080065a1
 800657c:	080065a1 	.word	0x080065a1
 8006580:	080065a1 	.word	0x080065a1
 8006584:	0800659b 	.word	0x0800659b
 8006588:	2300      	movs	r3, #0
 800658a:	77fb      	strb	r3, [r7, #31]
 800658c:	e118      	b.n	80067c0 <UART_SetConfig+0x348>
 800658e:	2302      	movs	r3, #2
 8006590:	77fb      	strb	r3, [r7, #31]
 8006592:	e115      	b.n	80067c0 <UART_SetConfig+0x348>
 8006594:	2304      	movs	r3, #4
 8006596:	77fb      	strb	r3, [r7, #31]
 8006598:	e112      	b.n	80067c0 <UART_SetConfig+0x348>
 800659a:	2308      	movs	r3, #8
 800659c:	77fb      	strb	r3, [r7, #31]
 800659e:	e10f      	b.n	80067c0 <UART_SetConfig+0x348>
 80065a0:	2310      	movs	r3, #16
 80065a2:	77fb      	strb	r3, [r7, #31]
 80065a4:	e10c      	b.n	80067c0 <UART_SetConfig+0x348>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a68      	ldr	r2, [pc, #416]	; (800674c <UART_SetConfig+0x2d4>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d120      	bne.n	80065f2 <UART_SetConfig+0x17a>
 80065b0:	4b64      	ldr	r3, [pc, #400]	; (8006744 <UART_SetConfig+0x2cc>)
 80065b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065b6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80065ba:	2b30      	cmp	r3, #48	; 0x30
 80065bc:	d013      	beq.n	80065e6 <UART_SetConfig+0x16e>
 80065be:	2b30      	cmp	r3, #48	; 0x30
 80065c0:	d814      	bhi.n	80065ec <UART_SetConfig+0x174>
 80065c2:	2b20      	cmp	r3, #32
 80065c4:	d009      	beq.n	80065da <UART_SetConfig+0x162>
 80065c6:	2b20      	cmp	r3, #32
 80065c8:	d810      	bhi.n	80065ec <UART_SetConfig+0x174>
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d002      	beq.n	80065d4 <UART_SetConfig+0x15c>
 80065ce:	2b10      	cmp	r3, #16
 80065d0:	d006      	beq.n	80065e0 <UART_SetConfig+0x168>
 80065d2:	e00b      	b.n	80065ec <UART_SetConfig+0x174>
 80065d4:	2300      	movs	r3, #0
 80065d6:	77fb      	strb	r3, [r7, #31]
 80065d8:	e0f2      	b.n	80067c0 <UART_SetConfig+0x348>
 80065da:	2302      	movs	r3, #2
 80065dc:	77fb      	strb	r3, [r7, #31]
 80065de:	e0ef      	b.n	80067c0 <UART_SetConfig+0x348>
 80065e0:	2304      	movs	r3, #4
 80065e2:	77fb      	strb	r3, [r7, #31]
 80065e4:	e0ec      	b.n	80067c0 <UART_SetConfig+0x348>
 80065e6:	2308      	movs	r3, #8
 80065e8:	77fb      	strb	r3, [r7, #31]
 80065ea:	e0e9      	b.n	80067c0 <UART_SetConfig+0x348>
 80065ec:	2310      	movs	r3, #16
 80065ee:	77fb      	strb	r3, [r7, #31]
 80065f0:	e0e6      	b.n	80067c0 <UART_SetConfig+0x348>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a56      	ldr	r2, [pc, #344]	; (8006750 <UART_SetConfig+0x2d8>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d120      	bne.n	800663e <UART_SetConfig+0x1c6>
 80065fc:	4b51      	ldr	r3, [pc, #324]	; (8006744 <UART_SetConfig+0x2cc>)
 80065fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006602:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006606:	2bc0      	cmp	r3, #192	; 0xc0
 8006608:	d013      	beq.n	8006632 <UART_SetConfig+0x1ba>
 800660a:	2bc0      	cmp	r3, #192	; 0xc0
 800660c:	d814      	bhi.n	8006638 <UART_SetConfig+0x1c0>
 800660e:	2b80      	cmp	r3, #128	; 0x80
 8006610:	d009      	beq.n	8006626 <UART_SetConfig+0x1ae>
 8006612:	2b80      	cmp	r3, #128	; 0x80
 8006614:	d810      	bhi.n	8006638 <UART_SetConfig+0x1c0>
 8006616:	2b00      	cmp	r3, #0
 8006618:	d002      	beq.n	8006620 <UART_SetConfig+0x1a8>
 800661a:	2b40      	cmp	r3, #64	; 0x40
 800661c:	d006      	beq.n	800662c <UART_SetConfig+0x1b4>
 800661e:	e00b      	b.n	8006638 <UART_SetConfig+0x1c0>
 8006620:	2300      	movs	r3, #0
 8006622:	77fb      	strb	r3, [r7, #31]
 8006624:	e0cc      	b.n	80067c0 <UART_SetConfig+0x348>
 8006626:	2302      	movs	r3, #2
 8006628:	77fb      	strb	r3, [r7, #31]
 800662a:	e0c9      	b.n	80067c0 <UART_SetConfig+0x348>
 800662c:	2304      	movs	r3, #4
 800662e:	77fb      	strb	r3, [r7, #31]
 8006630:	e0c6      	b.n	80067c0 <UART_SetConfig+0x348>
 8006632:	2308      	movs	r3, #8
 8006634:	77fb      	strb	r3, [r7, #31]
 8006636:	e0c3      	b.n	80067c0 <UART_SetConfig+0x348>
 8006638:	2310      	movs	r3, #16
 800663a:	77fb      	strb	r3, [r7, #31]
 800663c:	e0c0      	b.n	80067c0 <UART_SetConfig+0x348>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a44      	ldr	r2, [pc, #272]	; (8006754 <UART_SetConfig+0x2dc>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d125      	bne.n	8006694 <UART_SetConfig+0x21c>
 8006648:	4b3e      	ldr	r3, [pc, #248]	; (8006744 <UART_SetConfig+0x2cc>)
 800664a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800664e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006652:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006656:	d017      	beq.n	8006688 <UART_SetConfig+0x210>
 8006658:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800665c:	d817      	bhi.n	800668e <UART_SetConfig+0x216>
 800665e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006662:	d00b      	beq.n	800667c <UART_SetConfig+0x204>
 8006664:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006668:	d811      	bhi.n	800668e <UART_SetConfig+0x216>
 800666a:	2b00      	cmp	r3, #0
 800666c:	d003      	beq.n	8006676 <UART_SetConfig+0x1fe>
 800666e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006672:	d006      	beq.n	8006682 <UART_SetConfig+0x20a>
 8006674:	e00b      	b.n	800668e <UART_SetConfig+0x216>
 8006676:	2300      	movs	r3, #0
 8006678:	77fb      	strb	r3, [r7, #31]
 800667a:	e0a1      	b.n	80067c0 <UART_SetConfig+0x348>
 800667c:	2302      	movs	r3, #2
 800667e:	77fb      	strb	r3, [r7, #31]
 8006680:	e09e      	b.n	80067c0 <UART_SetConfig+0x348>
 8006682:	2304      	movs	r3, #4
 8006684:	77fb      	strb	r3, [r7, #31]
 8006686:	e09b      	b.n	80067c0 <UART_SetConfig+0x348>
 8006688:	2308      	movs	r3, #8
 800668a:	77fb      	strb	r3, [r7, #31]
 800668c:	e098      	b.n	80067c0 <UART_SetConfig+0x348>
 800668e:	2310      	movs	r3, #16
 8006690:	77fb      	strb	r3, [r7, #31]
 8006692:	e095      	b.n	80067c0 <UART_SetConfig+0x348>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a2f      	ldr	r2, [pc, #188]	; (8006758 <UART_SetConfig+0x2e0>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d125      	bne.n	80066ea <UART_SetConfig+0x272>
 800669e:	4b29      	ldr	r3, [pc, #164]	; (8006744 <UART_SetConfig+0x2cc>)
 80066a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80066a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066ac:	d017      	beq.n	80066de <UART_SetConfig+0x266>
 80066ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066b2:	d817      	bhi.n	80066e4 <UART_SetConfig+0x26c>
 80066b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066b8:	d00b      	beq.n	80066d2 <UART_SetConfig+0x25a>
 80066ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066be:	d811      	bhi.n	80066e4 <UART_SetConfig+0x26c>
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d003      	beq.n	80066cc <UART_SetConfig+0x254>
 80066c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066c8:	d006      	beq.n	80066d8 <UART_SetConfig+0x260>
 80066ca:	e00b      	b.n	80066e4 <UART_SetConfig+0x26c>
 80066cc:	2301      	movs	r3, #1
 80066ce:	77fb      	strb	r3, [r7, #31]
 80066d0:	e076      	b.n	80067c0 <UART_SetConfig+0x348>
 80066d2:	2302      	movs	r3, #2
 80066d4:	77fb      	strb	r3, [r7, #31]
 80066d6:	e073      	b.n	80067c0 <UART_SetConfig+0x348>
 80066d8:	2304      	movs	r3, #4
 80066da:	77fb      	strb	r3, [r7, #31]
 80066dc:	e070      	b.n	80067c0 <UART_SetConfig+0x348>
 80066de:	2308      	movs	r3, #8
 80066e0:	77fb      	strb	r3, [r7, #31]
 80066e2:	e06d      	b.n	80067c0 <UART_SetConfig+0x348>
 80066e4:	2310      	movs	r3, #16
 80066e6:	77fb      	strb	r3, [r7, #31]
 80066e8:	e06a      	b.n	80067c0 <UART_SetConfig+0x348>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a1b      	ldr	r2, [pc, #108]	; (800675c <UART_SetConfig+0x2e4>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d138      	bne.n	8006766 <UART_SetConfig+0x2ee>
 80066f4:	4b13      	ldr	r3, [pc, #76]	; (8006744 <UART_SetConfig+0x2cc>)
 80066f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066fa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80066fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006702:	d017      	beq.n	8006734 <UART_SetConfig+0x2bc>
 8006704:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006708:	d82a      	bhi.n	8006760 <UART_SetConfig+0x2e8>
 800670a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800670e:	d00b      	beq.n	8006728 <UART_SetConfig+0x2b0>
 8006710:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006714:	d824      	bhi.n	8006760 <UART_SetConfig+0x2e8>
 8006716:	2b00      	cmp	r3, #0
 8006718:	d003      	beq.n	8006722 <UART_SetConfig+0x2aa>
 800671a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800671e:	d006      	beq.n	800672e <UART_SetConfig+0x2b6>
 8006720:	e01e      	b.n	8006760 <UART_SetConfig+0x2e8>
 8006722:	2300      	movs	r3, #0
 8006724:	77fb      	strb	r3, [r7, #31]
 8006726:	e04b      	b.n	80067c0 <UART_SetConfig+0x348>
 8006728:	2302      	movs	r3, #2
 800672a:	77fb      	strb	r3, [r7, #31]
 800672c:	e048      	b.n	80067c0 <UART_SetConfig+0x348>
 800672e:	2304      	movs	r3, #4
 8006730:	77fb      	strb	r3, [r7, #31]
 8006732:	e045      	b.n	80067c0 <UART_SetConfig+0x348>
 8006734:	2308      	movs	r3, #8
 8006736:	77fb      	strb	r3, [r7, #31]
 8006738:	e042      	b.n	80067c0 <UART_SetConfig+0x348>
 800673a:	bf00      	nop
 800673c:	efff69f3 	.word	0xefff69f3
 8006740:	40011000 	.word	0x40011000
 8006744:	40023800 	.word	0x40023800
 8006748:	40004400 	.word	0x40004400
 800674c:	40004800 	.word	0x40004800
 8006750:	40004c00 	.word	0x40004c00
 8006754:	40005000 	.word	0x40005000
 8006758:	40011400 	.word	0x40011400
 800675c:	40007800 	.word	0x40007800
 8006760:	2310      	movs	r3, #16
 8006762:	77fb      	strb	r3, [r7, #31]
 8006764:	e02c      	b.n	80067c0 <UART_SetConfig+0x348>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a72      	ldr	r2, [pc, #456]	; (8006934 <UART_SetConfig+0x4bc>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d125      	bne.n	80067bc <UART_SetConfig+0x344>
 8006770:	4b71      	ldr	r3, [pc, #452]	; (8006938 <UART_SetConfig+0x4c0>)
 8006772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006776:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800677a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800677e:	d017      	beq.n	80067b0 <UART_SetConfig+0x338>
 8006780:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006784:	d817      	bhi.n	80067b6 <UART_SetConfig+0x33e>
 8006786:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800678a:	d00b      	beq.n	80067a4 <UART_SetConfig+0x32c>
 800678c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006790:	d811      	bhi.n	80067b6 <UART_SetConfig+0x33e>
 8006792:	2b00      	cmp	r3, #0
 8006794:	d003      	beq.n	800679e <UART_SetConfig+0x326>
 8006796:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800679a:	d006      	beq.n	80067aa <UART_SetConfig+0x332>
 800679c:	e00b      	b.n	80067b6 <UART_SetConfig+0x33e>
 800679e:	2300      	movs	r3, #0
 80067a0:	77fb      	strb	r3, [r7, #31]
 80067a2:	e00d      	b.n	80067c0 <UART_SetConfig+0x348>
 80067a4:	2302      	movs	r3, #2
 80067a6:	77fb      	strb	r3, [r7, #31]
 80067a8:	e00a      	b.n	80067c0 <UART_SetConfig+0x348>
 80067aa:	2304      	movs	r3, #4
 80067ac:	77fb      	strb	r3, [r7, #31]
 80067ae:	e007      	b.n	80067c0 <UART_SetConfig+0x348>
 80067b0:	2308      	movs	r3, #8
 80067b2:	77fb      	strb	r3, [r7, #31]
 80067b4:	e004      	b.n	80067c0 <UART_SetConfig+0x348>
 80067b6:	2310      	movs	r3, #16
 80067b8:	77fb      	strb	r3, [r7, #31]
 80067ba:	e001      	b.n	80067c0 <UART_SetConfig+0x348>
 80067bc:	2310      	movs	r3, #16
 80067be:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	69db      	ldr	r3, [r3, #28]
 80067c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067c8:	d15b      	bne.n	8006882 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80067ca:	7ffb      	ldrb	r3, [r7, #31]
 80067cc:	2b08      	cmp	r3, #8
 80067ce:	d828      	bhi.n	8006822 <UART_SetConfig+0x3aa>
 80067d0:	a201      	add	r2, pc, #4	; (adr r2, 80067d8 <UART_SetConfig+0x360>)
 80067d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d6:	bf00      	nop
 80067d8:	080067fd 	.word	0x080067fd
 80067dc:	08006805 	.word	0x08006805
 80067e0:	0800680d 	.word	0x0800680d
 80067e4:	08006823 	.word	0x08006823
 80067e8:	08006813 	.word	0x08006813
 80067ec:	08006823 	.word	0x08006823
 80067f0:	08006823 	.word	0x08006823
 80067f4:	08006823 	.word	0x08006823
 80067f8:	0800681b 	.word	0x0800681b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067fc:	f7fd fc8e 	bl	800411c <HAL_RCC_GetPCLK1Freq>
 8006800:	61b8      	str	r0, [r7, #24]
        break;
 8006802:	e013      	b.n	800682c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006804:	f7fd fc9e 	bl	8004144 <HAL_RCC_GetPCLK2Freq>
 8006808:	61b8      	str	r0, [r7, #24]
        break;
 800680a:	e00f      	b.n	800682c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800680c:	4b4b      	ldr	r3, [pc, #300]	; (800693c <UART_SetConfig+0x4c4>)
 800680e:	61bb      	str	r3, [r7, #24]
        break;
 8006810:	e00c      	b.n	800682c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006812:	f7fd fb71 	bl	8003ef8 <HAL_RCC_GetSysClockFreq>
 8006816:	61b8      	str	r0, [r7, #24]
        break;
 8006818:	e008      	b.n	800682c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800681a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800681e:	61bb      	str	r3, [r7, #24]
        break;
 8006820:	e004      	b.n	800682c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006822:	2300      	movs	r3, #0
 8006824:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	77bb      	strb	r3, [r7, #30]
        break;
 800682a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d074      	beq.n	800691c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	005a      	lsls	r2, r3, #1
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	085b      	lsrs	r3, r3, #1
 800683c:	441a      	add	r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	fbb2 f3f3 	udiv	r3, r2, r3
 8006846:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	2b0f      	cmp	r3, #15
 800684c:	d916      	bls.n	800687c <UART_SetConfig+0x404>
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006854:	d212      	bcs.n	800687c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	b29b      	uxth	r3, r3
 800685a:	f023 030f 	bic.w	r3, r3, #15
 800685e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	085b      	lsrs	r3, r3, #1
 8006864:	b29b      	uxth	r3, r3
 8006866:	f003 0307 	and.w	r3, r3, #7
 800686a:	b29a      	uxth	r2, r3
 800686c:	89fb      	ldrh	r3, [r7, #14]
 800686e:	4313      	orrs	r3, r2
 8006870:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	89fa      	ldrh	r2, [r7, #14]
 8006878:	60da      	str	r2, [r3, #12]
 800687a:	e04f      	b.n	800691c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	77bb      	strb	r3, [r7, #30]
 8006880:	e04c      	b.n	800691c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006882:	7ffb      	ldrb	r3, [r7, #31]
 8006884:	2b08      	cmp	r3, #8
 8006886:	d828      	bhi.n	80068da <UART_SetConfig+0x462>
 8006888:	a201      	add	r2, pc, #4	; (adr r2, 8006890 <UART_SetConfig+0x418>)
 800688a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800688e:	bf00      	nop
 8006890:	080068b5 	.word	0x080068b5
 8006894:	080068bd 	.word	0x080068bd
 8006898:	080068c5 	.word	0x080068c5
 800689c:	080068db 	.word	0x080068db
 80068a0:	080068cb 	.word	0x080068cb
 80068a4:	080068db 	.word	0x080068db
 80068a8:	080068db 	.word	0x080068db
 80068ac:	080068db 	.word	0x080068db
 80068b0:	080068d3 	.word	0x080068d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068b4:	f7fd fc32 	bl	800411c <HAL_RCC_GetPCLK1Freq>
 80068b8:	61b8      	str	r0, [r7, #24]
        break;
 80068ba:	e013      	b.n	80068e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068bc:	f7fd fc42 	bl	8004144 <HAL_RCC_GetPCLK2Freq>
 80068c0:	61b8      	str	r0, [r7, #24]
        break;
 80068c2:	e00f      	b.n	80068e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068c4:	4b1d      	ldr	r3, [pc, #116]	; (800693c <UART_SetConfig+0x4c4>)
 80068c6:	61bb      	str	r3, [r7, #24]
        break;
 80068c8:	e00c      	b.n	80068e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068ca:	f7fd fb15 	bl	8003ef8 <HAL_RCC_GetSysClockFreq>
 80068ce:	61b8      	str	r0, [r7, #24]
        break;
 80068d0:	e008      	b.n	80068e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068d6:	61bb      	str	r3, [r7, #24]
        break;
 80068d8:	e004      	b.n	80068e4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80068da:	2300      	movs	r3, #0
 80068dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	77bb      	strb	r3, [r7, #30]
        break;
 80068e2:	bf00      	nop
    }

    if (pclk != 0U)
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d018      	beq.n	800691c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	085a      	lsrs	r2, r3, #1
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	441a      	add	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	2b0f      	cmp	r3, #15
 8006902:	d909      	bls.n	8006918 <UART_SetConfig+0x4a0>
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800690a:	d205      	bcs.n	8006918 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	b29a      	uxth	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	60da      	str	r2, [r3, #12]
 8006916:	e001      	b.n	800691c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006928:	7fbb      	ldrb	r3, [r7, #30]
}
 800692a:	4618      	mov	r0, r3
 800692c:	3720      	adds	r7, #32
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	40007c00 	.word	0x40007c00
 8006938:	40023800 	.word	0x40023800
 800693c:	00f42400 	.word	0x00f42400

08006940 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694c:	f003 0301 	and.w	r3, r3, #1
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00a      	beq.n	800696a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	430a      	orrs	r2, r1
 8006968:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696e:	f003 0302 	and.w	r3, r3, #2
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00a      	beq.n	800698c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	430a      	orrs	r2, r1
 800698a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006990:	f003 0304 	and.w	r3, r3, #4
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00a      	beq.n	80069ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	430a      	orrs	r2, r1
 80069ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b2:	f003 0308 	and.w	r3, r3, #8
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00a      	beq.n	80069d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	430a      	orrs	r2, r1
 80069ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d4:	f003 0310 	and.w	r3, r3, #16
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00a      	beq.n	80069f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	430a      	orrs	r2, r1
 80069f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f6:	f003 0320 	and.w	r3, r3, #32
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00a      	beq.n	8006a14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	430a      	orrs	r2, r1
 8006a12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d01a      	beq.n	8006a56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	430a      	orrs	r2, r1
 8006a34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a3e:	d10a      	bne.n	8006a56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	430a      	orrs	r2, r1
 8006a54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00a      	beq.n	8006a78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	430a      	orrs	r2, r1
 8006a76:	605a      	str	r2, [r3, #4]
  }
}
 8006a78:	bf00      	nop
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b086      	sub	sp, #24
 8006a88:	af02      	add	r7, sp, #8
 8006a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a94:	f7fb fe00 	bl	8002698 <HAL_GetTick>
 8006a98:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 0308 	and.w	r3, r3, #8
 8006aa4:	2b08      	cmp	r3, #8
 8006aa6:	d10e      	bne.n	8006ac6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006aa8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f831 	bl	8006b1e <UART_WaitOnFlagUntilTimeout>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d001      	beq.n	8006ac6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	e027      	b.n	8006b16 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 0304 	and.w	r3, r3, #4
 8006ad0:	2b04      	cmp	r3, #4
 8006ad2:	d10e      	bne.n	8006af2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ad4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ad8:	9300      	str	r3, [sp, #0]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 f81b 	bl	8006b1e <UART_WaitOnFlagUntilTimeout>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d001      	beq.n	8006af2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006aee:	2303      	movs	r3, #3
 8006af0:	e011      	b.n	8006b16 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2220      	movs	r2, #32
 8006af6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2220      	movs	r2, #32
 8006afc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3710      	adds	r7, #16
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b09c      	sub	sp, #112	; 0x70
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	60f8      	str	r0, [r7, #12]
 8006b26:	60b9      	str	r1, [r7, #8]
 8006b28:	603b      	str	r3, [r7, #0]
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b2e:	e0a7      	b.n	8006c80 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b36:	f000 80a3 	beq.w	8006c80 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b3a:	f7fb fdad 	bl	8002698 <HAL_GetTick>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d302      	bcc.n	8006b50 <UART_WaitOnFlagUntilTimeout+0x32>
 8006b4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d13f      	bne.n	8006bd0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b58:	e853 3f00 	ldrex	r3, [r3]
 8006b5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b64:	667b      	str	r3, [r7, #100]	; 0x64
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b70:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006b74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006b76:	e841 2300 	strex	r3, r2, [r1]
 8006b7a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006b7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1e6      	bne.n	8006b50 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	3308      	adds	r3, #8
 8006b88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b8c:	e853 3f00 	ldrex	r3, [r3]
 8006b90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b94:	f023 0301 	bic.w	r3, r3, #1
 8006b98:	663b      	str	r3, [r7, #96]	; 0x60
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	3308      	adds	r3, #8
 8006ba0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006ba2:	64ba      	str	r2, [r7, #72]	; 0x48
 8006ba4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006ba8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006baa:	e841 2300 	strex	r3, r2, [r1]
 8006bae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1e5      	bne.n	8006b82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2220      	movs	r2, #32
 8006bba:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2220      	movs	r2, #32
 8006bc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	e068      	b.n	8006ca2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0304 	and.w	r3, r3, #4
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d050      	beq.n	8006c80 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	69db      	ldr	r3, [r3, #28]
 8006be4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006be8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bec:	d148      	bne.n	8006c80 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bf6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c00:	e853 3f00 	ldrex	r3, [r3]
 8006c04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	461a      	mov	r2, r3
 8006c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c16:	637b      	str	r3, [r7, #52]	; 0x34
 8006c18:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c1e:	e841 2300 	strex	r3, r2, [r1]
 8006c22:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1e6      	bne.n	8006bf8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	3308      	adds	r3, #8
 8006c30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	e853 3f00 	ldrex	r3, [r3]
 8006c38:	613b      	str	r3, [r7, #16]
   return(result);
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	f023 0301 	bic.w	r3, r3, #1
 8006c40:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	3308      	adds	r3, #8
 8006c48:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c4a:	623a      	str	r2, [r7, #32]
 8006c4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4e:	69f9      	ldr	r1, [r7, #28]
 8006c50:	6a3a      	ldr	r2, [r7, #32]
 8006c52:	e841 2300 	strex	r3, r2, [r1]
 8006c56:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1e5      	bne.n	8006c2a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2220      	movs	r2, #32
 8006c62:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2220      	movs	r2, #32
 8006c68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2220      	movs	r2, #32
 8006c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	e010      	b.n	8006ca2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	69da      	ldr	r2, [r3, #28]
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	4013      	ands	r3, r2
 8006c8a:	68ba      	ldr	r2, [r7, #8]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	bf0c      	ite	eq
 8006c90:	2301      	moveq	r3, #1
 8006c92:	2300      	movne	r3, #0
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	461a      	mov	r2, r3
 8006c98:	79fb      	ldrb	r3, [r7, #7]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	f43f af48 	beq.w	8006b30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3770      	adds	r7, #112	; 0x70
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
	...

08006cac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b096      	sub	sp, #88	; 0x58
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	68ba      	ldr	r2, [r7, #8]
 8006cbe:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	88fa      	ldrh	r2, [r7, #6]
 8006cc4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2222      	movs	r2, #34	; 0x22
 8006cd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d028      	beq.n	8006d32 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ce4:	4a3e      	ldr	r2, [pc, #248]	; (8006de0 <UART_Start_Receive_DMA+0x134>)
 8006ce6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cec:	4a3d      	ldr	r2, [pc, #244]	; (8006de4 <UART_Start_Receive_DMA+0x138>)
 8006cee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cf4:	4a3c      	ldr	r2, [pc, #240]	; (8006de8 <UART_Start_Receive_DMA+0x13c>)
 8006cf6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	3324      	adds	r3, #36	; 0x24
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d10:	461a      	mov	r2, r3
 8006d12:	88fb      	ldrh	r3, [r7, #6]
 8006d14:	f7fb fe80 	bl	8002a18 <HAL_DMA_Start_IT>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d009      	beq.n	8006d32 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2210      	movs	r2, #16
 8006d22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2220      	movs	r2, #32
 8006d2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e051      	b.n	8006dd6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d018      	beq.n	8006d6c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d42:	e853 3f00 	ldrex	r3, [r3]
 8006d46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d4e:	657b      	str	r3, [r7, #84]	; 0x54
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	461a      	mov	r2, r3
 8006d56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d58:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d5a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d60:	e841 2300 	strex	r3, r2, [r1]
 8006d64:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006d66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d1e6      	bne.n	8006d3a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	3308      	adds	r3, #8
 8006d72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d76:	e853 3f00 	ldrex	r3, [r3]
 8006d7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7e:	f043 0301 	orr.w	r3, r3, #1
 8006d82:	653b      	str	r3, [r7, #80]	; 0x50
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	3308      	adds	r3, #8
 8006d8a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006d8c:	637a      	str	r2, [r7, #52]	; 0x34
 8006d8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d94:	e841 2300 	strex	r3, r2, [r1]
 8006d98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d1e5      	bne.n	8006d6c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	3308      	adds	r3, #8
 8006da6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	e853 3f00 	ldrex	r3, [r3]
 8006dae:	613b      	str	r3, [r7, #16]
   return(result);
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006db6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	3308      	adds	r3, #8
 8006dbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006dc0:	623a      	str	r2, [r7, #32]
 8006dc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc4:	69f9      	ldr	r1, [r7, #28]
 8006dc6:	6a3a      	ldr	r2, [r7, #32]
 8006dc8:	e841 2300 	strex	r3, r2, [r1]
 8006dcc:	61bb      	str	r3, [r7, #24]
   return(result);
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1e5      	bne.n	8006da0 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3758      	adds	r7, #88	; 0x58
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	08006fb3 	.word	0x08006fb3
 8006de4:	080070db 	.word	0x080070db
 8006de8:	08007119 	.word	0x08007119

08006dec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b089      	sub	sp, #36	; 0x24
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	e853 3f00 	ldrex	r3, [r3]
 8006e00:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006e08:	61fb      	str	r3, [r7, #28]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	61bb      	str	r3, [r7, #24]
 8006e14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e16:	6979      	ldr	r1, [r7, #20]
 8006e18:	69ba      	ldr	r2, [r7, #24]
 8006e1a:	e841 2300 	strex	r3, r2, [r1]
 8006e1e:	613b      	str	r3, [r7, #16]
   return(result);
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1e6      	bne.n	8006df4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2220      	movs	r2, #32
 8006e2a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8006e2c:	bf00      	nop
 8006e2e:	3724      	adds	r7, #36	; 0x24
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b095      	sub	sp, #84	; 0x54
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e48:	e853 3f00 	ldrex	r3, [r3]
 8006e4c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e5e:	643b      	str	r3, [r7, #64]	; 0x40
 8006e60:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e62:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e66:	e841 2300 	strex	r3, r2, [r1]
 8006e6a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1e6      	bne.n	8006e40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	3308      	adds	r3, #8
 8006e78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7a:	6a3b      	ldr	r3, [r7, #32]
 8006e7c:	e853 3f00 	ldrex	r3, [r3]
 8006e80:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	f023 0301 	bic.w	r3, r3, #1
 8006e88:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	3308      	adds	r3, #8
 8006e90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e9a:	e841 2300 	strex	r3, r2, [r1]
 8006e9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1e5      	bne.n	8006e72 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d118      	bne.n	8006ee0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	e853 3f00 	ldrex	r3, [r3]
 8006eba:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	f023 0310 	bic.w	r3, r3, #16
 8006ec2:	647b      	str	r3, [r7, #68]	; 0x44
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	461a      	mov	r2, r3
 8006eca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ecc:	61bb      	str	r3, [r7, #24]
 8006ece:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed0:	6979      	ldr	r1, [r7, #20]
 8006ed2:	69ba      	ldr	r2, [r7, #24]
 8006ed4:	e841 2300 	strex	r3, r2, [r1]
 8006ed8:	613b      	str	r3, [r7, #16]
   return(result);
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1e6      	bne.n	8006eae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2220      	movs	r2, #32
 8006ee4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006ef4:	bf00      	nop
 8006ef6:	3754      	adds	r7, #84	; 0x54
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b090      	sub	sp, #64	; 0x40
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f0c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	69db      	ldr	r3, [r3, #28]
 8006f12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f16:	d037      	beq.n	8006f88 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8006f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	3308      	adds	r3, #8
 8006f26:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2a:	e853 3f00 	ldrex	r3, [r3]
 8006f2e:	623b      	str	r3, [r7, #32]
   return(result);
 8006f30:	6a3b      	ldr	r3, [r7, #32]
 8006f32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f36:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	3308      	adds	r3, #8
 8006f3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f40:	633a      	str	r2, [r7, #48]	; 0x30
 8006f42:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f48:	e841 2300 	strex	r3, r2, [r1]
 8006f4c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d1e5      	bne.n	8006f20 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	e853 3f00 	ldrex	r3, [r3]
 8006f60:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f68:	637b      	str	r3, [r7, #52]	; 0x34
 8006f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f72:	61fb      	str	r3, [r7, #28]
 8006f74:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f76:	69b9      	ldr	r1, [r7, #24]
 8006f78:	69fa      	ldr	r2, [r7, #28]
 8006f7a:	e841 2300 	strex	r3, r2, [r1]
 8006f7e:	617b      	str	r3, [r7, #20]
   return(result);
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1e6      	bne.n	8006f54 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f86:	e002      	b.n	8006f8e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8006f88:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006f8a:	f7ff fa2d 	bl	80063e8 <HAL_UART_TxCpltCallback>
}
 8006f8e:	bf00      	nop
 8006f90:	3740      	adds	r7, #64	; 0x40
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b084      	sub	sp, #16
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006fa4:	68f8      	ldr	r0, [r7, #12]
 8006fa6:	f7ff fa29 	bl	80063fc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006faa:	bf00      	nop
 8006fac:	3710      	adds	r7, #16
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b09c      	sub	sp, #112	; 0x70
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fbe:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	69db      	ldr	r3, [r3, #28]
 8006fc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fc8:	d071      	beq.n	80070ae <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8006fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fda:	e853 3f00 	ldrex	r3, [r3]
 8006fde:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006fe0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fe2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fe6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	461a      	mov	r2, r3
 8006fee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ff0:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ff2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ff6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ff8:	e841 2300 	strex	r3, r2, [r1]
 8006ffc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ffe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007000:	2b00      	cmp	r3, #0
 8007002:	d1e6      	bne.n	8006fd2 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	3308      	adds	r3, #8
 800700a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700e:	e853 3f00 	ldrex	r3, [r3]
 8007012:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007016:	f023 0301 	bic.w	r3, r3, #1
 800701a:	667b      	str	r3, [r7, #100]	; 0x64
 800701c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	3308      	adds	r3, #8
 8007022:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007024:	647a      	str	r2, [r7, #68]	; 0x44
 8007026:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007028:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800702a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800702c:	e841 2300 	strex	r3, r2, [r1]
 8007030:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1e5      	bne.n	8007004 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	3308      	adds	r3, #8
 800703e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007042:	e853 3f00 	ldrex	r3, [r3]
 8007046:	623b      	str	r3, [r7, #32]
   return(result);
 8007048:	6a3b      	ldr	r3, [r7, #32]
 800704a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800704e:	663b      	str	r3, [r7, #96]	; 0x60
 8007050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	3308      	adds	r3, #8
 8007056:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007058:	633a      	str	r2, [r7, #48]	; 0x30
 800705a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800705e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007060:	e841 2300 	strex	r3, r2, [r1]
 8007064:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007068:	2b00      	cmp	r3, #0
 800706a:	d1e5      	bne.n	8007038 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800706c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800706e:	2220      	movs	r2, #32
 8007070:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007078:	2b01      	cmp	r3, #1
 800707a:	d118      	bne.n	80070ae <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800707c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	e853 3f00 	ldrex	r3, [r3]
 8007088:	60fb      	str	r3, [r7, #12]
   return(result);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f023 0310 	bic.w	r3, r3, #16
 8007090:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	461a      	mov	r2, r3
 8007098:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800709a:	61fb      	str	r3, [r7, #28]
 800709c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709e:	69b9      	ldr	r1, [r7, #24]
 80070a0:	69fa      	ldr	r2, [r7, #28]
 80070a2:	e841 2300 	strex	r3, r2, [r1]
 80070a6:	617b      	str	r3, [r7, #20]
   return(result);
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d1e6      	bne.n	800707c <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070b0:	2200      	movs	r2, #0
 80070b2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d107      	bne.n	80070cc <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80070c2:	4619      	mov	r1, r3
 80070c4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80070c6:	f7ff f9c1 	bl	800644c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80070ca:	e002      	b.n	80070d2 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80070cc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80070ce:	f7ff f99f 	bl	8006410 <HAL_UART_RxCpltCallback>
}
 80070d2:	bf00      	nop
 80070d4:	3770      	adds	r7, #112	; 0x70
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b084      	sub	sp, #16
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2201      	movs	r2, #1
 80070ec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d109      	bne.n	800710a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80070fc:	085b      	lsrs	r3, r3, #1
 80070fe:	b29b      	uxth	r3, r3
 8007100:	4619      	mov	r1, r3
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f7ff f9a2 	bl	800644c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007108:	e002      	b.n	8007110 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	f7ff f98a 	bl	8006424 <HAL_UART_RxHalfCpltCallback>
}
 8007110:	bf00      	nop
 8007112:	3710      	adds	r7, #16
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b086      	sub	sp, #24
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007124:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800712a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007132:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800713e:	2b80      	cmp	r3, #128	; 0x80
 8007140:	d109      	bne.n	8007156 <UART_DMAError+0x3e>
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	2b21      	cmp	r3, #33	; 0x21
 8007146:	d106      	bne.n	8007156 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	2200      	movs	r2, #0
 800714c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8007150:	6978      	ldr	r0, [r7, #20]
 8007152:	f7ff fe4b 	bl	8006dec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007160:	2b40      	cmp	r3, #64	; 0x40
 8007162:	d109      	bne.n	8007178 <UART_DMAError+0x60>
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2b22      	cmp	r3, #34	; 0x22
 8007168:	d106      	bne.n	8007178 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	2200      	movs	r2, #0
 800716e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8007172:	6978      	ldr	r0, [r7, #20]
 8007174:	f7ff fe60 	bl	8006e38 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800717e:	f043 0210 	orr.w	r2, r3, #16
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007188:	6978      	ldr	r0, [r7, #20]
 800718a:	f7ff f955 	bl	8006438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800718e:	bf00      	nop
 8007190:	3718      	adds	r7, #24
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}

08007196 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007196:	b580      	push	{r7, lr}
 8007198:	b084      	sub	sp, #16
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071b4:	68f8      	ldr	r0, [r7, #12]
 80071b6:	f7ff f93f 	bl	8006438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071ba:	bf00      	nop
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b088      	sub	sp, #32
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	e853 3f00 	ldrex	r3, [r3]
 80071d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071de:	61fb      	str	r3, [r7, #28]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	461a      	mov	r2, r3
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	61bb      	str	r3, [r7, #24]
 80071ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ec:	6979      	ldr	r1, [r7, #20]
 80071ee:	69ba      	ldr	r2, [r7, #24]
 80071f0:	e841 2300 	strex	r3, r2, [r1]
 80071f4:	613b      	str	r3, [r7, #16]
   return(result);
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d1e6      	bne.n	80071ca <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2220      	movs	r2, #32
 8007200:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f7ff f8ed 	bl	80063e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800720e:	bf00      	nop
 8007210:	3720      	adds	r7, #32
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
	...

08007218 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007218:	b084      	sub	sp, #16
 800721a:	b580      	push	{r7, lr}
 800721c:	b084      	sub	sp, #16
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
 8007222:	f107 001c 	add.w	r0, r7, #28
 8007226:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800722a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722c:	2b01      	cmp	r3, #1
 800722e:	d120      	bne.n	8007272 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007234:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	68da      	ldr	r2, [r3, #12]
 8007240:	4b20      	ldr	r3, [pc, #128]	; (80072c4 <USB_CoreInit+0xac>)
 8007242:	4013      	ands	r3, r2
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007256:	2b01      	cmp	r3, #1
 8007258:	d105      	bne.n	8007266 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 fa96 	bl	8007798 <USB_CoreReset>
 800726c:	4603      	mov	r3, r0
 800726e:	73fb      	strb	r3, [r7, #15]
 8007270:	e010      	b.n	8007294 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 fa8a 	bl	8007798 <USB_CoreReset>
 8007284:	4603      	mov	r3, r0
 8007286:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800728c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007296:	2b01      	cmp	r3, #1
 8007298:	d10b      	bne.n	80072b2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	f043 0206 	orr.w	r2, r3, #6
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	f043 0220 	orr.w	r2, r3, #32
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80072b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3710      	adds	r7, #16
 80072b8:	46bd      	mov	sp, r7
 80072ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80072be:	b004      	add	sp, #16
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop
 80072c4:	ffbdffbf 	.word	0xffbdffbf

080072c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	f023 0201 	bic.w	r2, r3, #1
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	370c      	adds	r7, #12
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr

080072ea <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b084      	sub	sp, #16
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
 80072f2:	460b      	mov	r3, r1
 80072f4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80072f6:	2300      	movs	r3, #0
 80072f8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007306:	78fb      	ldrb	r3, [r7, #3]
 8007308:	2b01      	cmp	r3, #1
 800730a:	d115      	bne.n	8007338 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007318:	2001      	movs	r0, #1
 800731a:	f7fb f9c9 	bl	80026b0 <HAL_Delay>
      ms++;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	3301      	adds	r3, #1
 8007322:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 fa29 	bl	800777c <USB_GetMode>
 800732a:	4603      	mov	r3, r0
 800732c:	2b01      	cmp	r3, #1
 800732e:	d01e      	beq.n	800736e <USB_SetCurrentMode+0x84>
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2b31      	cmp	r3, #49	; 0x31
 8007334:	d9f0      	bls.n	8007318 <USB_SetCurrentMode+0x2e>
 8007336:	e01a      	b.n	800736e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007338:	78fb      	ldrb	r3, [r7, #3]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d115      	bne.n	800736a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800734a:	2001      	movs	r0, #1
 800734c:	f7fb f9b0 	bl	80026b0 <HAL_Delay>
      ms++;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	3301      	adds	r3, #1
 8007354:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 fa10 	bl	800777c <USB_GetMode>
 800735c:	4603      	mov	r3, r0
 800735e:	2b00      	cmp	r3, #0
 8007360:	d005      	beq.n	800736e <USB_SetCurrentMode+0x84>
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2b31      	cmp	r3, #49	; 0x31
 8007366:	d9f0      	bls.n	800734a <USB_SetCurrentMode+0x60>
 8007368:	e001      	b.n	800736e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e005      	b.n	800737a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2b32      	cmp	r3, #50	; 0x32
 8007372:	d101      	bne.n	8007378 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	e000      	b.n	800737a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3710      	adds	r7, #16
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
	...

08007384 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007384:	b084      	sub	sp, #16
 8007386:	b580      	push	{r7, lr}
 8007388:	b086      	sub	sp, #24
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
 800738e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007392:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007396:	2300      	movs	r3, #0
 8007398:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800739e:	2300      	movs	r3, #0
 80073a0:	613b      	str	r3, [r7, #16]
 80073a2:	e009      	b.n	80073b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	3340      	adds	r3, #64	; 0x40
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	4413      	add	r3, r2
 80073ae:	2200      	movs	r2, #0
 80073b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	3301      	adds	r3, #1
 80073b6:	613b      	str	r3, [r7, #16]
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	2b0e      	cmp	r3, #14
 80073bc:	d9f2      	bls.n	80073a4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80073be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d11c      	bne.n	80073fe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	68fa      	ldr	r2, [r7, #12]
 80073ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073d2:	f043 0302 	orr.w	r3, r3, #2
 80073d6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073dc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	601a      	str	r2, [r3, #0]
 80073fc:	e005      	b.n	800740a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007402:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007410:	461a      	mov	r2, r3
 8007412:	2300      	movs	r3, #0
 8007414:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800741c:	4619      	mov	r1, r3
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007424:	461a      	mov	r2, r3
 8007426:	680b      	ldr	r3, [r1, #0]
 8007428:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800742a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800742c:	2b01      	cmp	r3, #1
 800742e:	d10c      	bne.n	800744a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007432:	2b00      	cmp	r3, #0
 8007434:	d104      	bne.n	8007440 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007436:	2100      	movs	r1, #0
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 f965 	bl	8007708 <USB_SetDevSpeed>
 800743e:	e008      	b.n	8007452 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007440:	2101      	movs	r1, #1
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 f960 	bl	8007708 <USB_SetDevSpeed>
 8007448:	e003      	b.n	8007452 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800744a:	2103      	movs	r1, #3
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 f95b 	bl	8007708 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007452:	2110      	movs	r1, #16
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 f8f3 	bl	8007640 <USB_FlushTxFifo>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d001      	beq.n	8007464 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 f91f 	bl	80076a8 <USB_FlushRxFifo>
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d001      	beq.n	8007474 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800747a:	461a      	mov	r2, r3
 800747c:	2300      	movs	r3, #0
 800747e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007486:	461a      	mov	r2, r3
 8007488:	2300      	movs	r3, #0
 800748a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007492:	461a      	mov	r2, r3
 8007494:	2300      	movs	r3, #0
 8007496:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007498:	2300      	movs	r3, #0
 800749a:	613b      	str	r3, [r7, #16]
 800749c:	e043      	b.n	8007526 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	015a      	lsls	r2, r3, #5
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	4413      	add	r3, r2
 80074a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074b4:	d118      	bne.n	80074e8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d10a      	bne.n	80074d2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	015a      	lsls	r2, r3, #5
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	4413      	add	r3, r2
 80074c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074c8:	461a      	mov	r2, r3
 80074ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80074ce:	6013      	str	r3, [r2, #0]
 80074d0:	e013      	b.n	80074fa <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	015a      	lsls	r2, r3, #5
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	4413      	add	r3, r2
 80074da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074de:	461a      	mov	r2, r3
 80074e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80074e4:	6013      	str	r3, [r2, #0]
 80074e6:	e008      	b.n	80074fa <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	015a      	lsls	r2, r3, #5
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	4413      	add	r3, r2
 80074f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074f4:	461a      	mov	r2, r3
 80074f6:	2300      	movs	r3, #0
 80074f8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	015a      	lsls	r2, r3, #5
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	4413      	add	r3, r2
 8007502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007506:	461a      	mov	r2, r3
 8007508:	2300      	movs	r3, #0
 800750a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	015a      	lsls	r2, r3, #5
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	4413      	add	r3, r2
 8007514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007518:	461a      	mov	r2, r3
 800751a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800751e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	3301      	adds	r3, #1
 8007524:	613b      	str	r3, [r7, #16]
 8007526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007528:	693a      	ldr	r2, [r7, #16]
 800752a:	429a      	cmp	r2, r3
 800752c:	d3b7      	bcc.n	800749e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800752e:	2300      	movs	r3, #0
 8007530:	613b      	str	r3, [r7, #16]
 8007532:	e043      	b.n	80075bc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	015a      	lsls	r2, r3, #5
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	4413      	add	r3, r2
 800753c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007546:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800754a:	d118      	bne.n	800757e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d10a      	bne.n	8007568 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	015a      	lsls	r2, r3, #5
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	4413      	add	r3, r2
 800755a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800755e:	461a      	mov	r2, r3
 8007560:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007564:	6013      	str	r3, [r2, #0]
 8007566:	e013      	b.n	8007590 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	015a      	lsls	r2, r3, #5
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	4413      	add	r3, r2
 8007570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007574:	461a      	mov	r2, r3
 8007576:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800757a:	6013      	str	r3, [r2, #0]
 800757c:	e008      	b.n	8007590 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	015a      	lsls	r2, r3, #5
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	4413      	add	r3, r2
 8007586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800758a:	461a      	mov	r2, r3
 800758c:	2300      	movs	r3, #0
 800758e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	015a      	lsls	r2, r3, #5
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	4413      	add	r3, r2
 8007598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800759c:	461a      	mov	r2, r3
 800759e:	2300      	movs	r3, #0
 80075a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	015a      	lsls	r2, r3, #5
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	4413      	add	r3, r2
 80075aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ae:	461a      	mov	r2, r3
 80075b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80075b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	3301      	adds	r3, #1
 80075ba:	613b      	str	r3, [r7, #16]
 80075bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075be:	693a      	ldr	r2, [r7, #16]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d3b7      	bcc.n	8007534 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	68fa      	ldr	r2, [r7, #12]
 80075ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075d6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80075e4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80075e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d105      	bne.n	80075f8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	699b      	ldr	r3, [r3, #24]
 80075f0:	f043 0210 	orr.w	r2, r3, #16
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	699a      	ldr	r2, [r3, #24]
 80075fc:	4b0e      	ldr	r3, [pc, #56]	; (8007638 <USB_DevInit+0x2b4>)
 80075fe:	4313      	orrs	r3, r2
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007606:	2b00      	cmp	r3, #0
 8007608:	d005      	beq.n	8007616 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	699b      	ldr	r3, [r3, #24]
 800760e:	f043 0208 	orr.w	r2, r3, #8
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007618:	2b01      	cmp	r3, #1
 800761a:	d105      	bne.n	8007628 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	699a      	ldr	r2, [r3, #24]
 8007620:	4b06      	ldr	r3, [pc, #24]	; (800763c <USB_DevInit+0x2b8>)
 8007622:	4313      	orrs	r3, r2
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007628:	7dfb      	ldrb	r3, [r7, #23]
}
 800762a:	4618      	mov	r0, r3
 800762c:	3718      	adds	r7, #24
 800762e:	46bd      	mov	sp, r7
 8007630:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007634:	b004      	add	sp, #16
 8007636:	4770      	bx	lr
 8007638:	803c3800 	.word	0x803c3800
 800763c:	40000004 	.word	0x40000004

08007640 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007640:	b480      	push	{r7}
 8007642:	b085      	sub	sp, #20
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800764a:	2300      	movs	r3, #0
 800764c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	3301      	adds	r3, #1
 8007652:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	4a13      	ldr	r2, [pc, #76]	; (80076a4 <USB_FlushTxFifo+0x64>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d901      	bls.n	8007660 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800765c:	2303      	movs	r3, #3
 800765e:	e01b      	b.n	8007698 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	691b      	ldr	r3, [r3, #16]
 8007664:	2b00      	cmp	r3, #0
 8007666:	daf2      	bge.n	800764e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007668:	2300      	movs	r3, #0
 800766a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	019b      	lsls	r3, r3, #6
 8007670:	f043 0220 	orr.w	r2, r3, #32
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	3301      	adds	r3, #1
 800767c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	4a08      	ldr	r2, [pc, #32]	; (80076a4 <USB_FlushTxFifo+0x64>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d901      	bls.n	800768a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007686:	2303      	movs	r3, #3
 8007688:	e006      	b.n	8007698 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	f003 0320 	and.w	r3, r3, #32
 8007692:	2b20      	cmp	r3, #32
 8007694:	d0f0      	beq.n	8007678 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	3714      	adds	r7, #20
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr
 80076a4:	00030d40 	.word	0x00030d40

080076a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80076b0:	2300      	movs	r3, #0
 80076b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	3301      	adds	r3, #1
 80076b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	4a11      	ldr	r2, [pc, #68]	; (8007704 <USB_FlushRxFifo+0x5c>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d901      	bls.n	80076c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80076c2:	2303      	movs	r3, #3
 80076c4:	e018      	b.n	80076f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	691b      	ldr	r3, [r3, #16]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	daf2      	bge.n	80076b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80076ce:	2300      	movs	r3, #0
 80076d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2210      	movs	r2, #16
 80076d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	3301      	adds	r3, #1
 80076dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	4a08      	ldr	r2, [pc, #32]	; (8007704 <USB_FlushRxFifo+0x5c>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d901      	bls.n	80076ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80076e6:	2303      	movs	r3, #3
 80076e8:	e006      	b.n	80076f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	f003 0310 	and.w	r3, r3, #16
 80076f2:	2b10      	cmp	r3, #16
 80076f4:	d0f0      	beq.n	80076d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3714      	adds	r7, #20
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr
 8007704:	00030d40 	.word	0x00030d40

08007708 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	460b      	mov	r3, r1
 8007712:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	78fb      	ldrb	r3, [r7, #3]
 8007722:	68f9      	ldr	r1, [r7, #12]
 8007724:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007728:	4313      	orrs	r3, r2
 800772a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3714      	adds	r7, #20
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr

0800773a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800773a:	b480      	push	{r7}
 800773c:	b085      	sub	sp, #20
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007754:	f023 0303 	bic.w	r3, r3, #3
 8007758:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	68fa      	ldr	r2, [r7, #12]
 8007764:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007768:	f043 0302 	orr.w	r3, r3, #2
 800776c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800776e:	2300      	movs	r3, #0
}
 8007770:	4618      	mov	r0, r3
 8007772:	3714      	adds	r7, #20
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	695b      	ldr	r3, [r3, #20]
 8007788:	f003 0301 	and.w	r3, r3, #1
}
 800778c:	4618      	mov	r0, r3
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80077a0:	2300      	movs	r3, #0
 80077a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	3301      	adds	r3, #1
 80077a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	4a13      	ldr	r2, [pc, #76]	; (80077fc <USB_CoreReset+0x64>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d901      	bls.n	80077b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	e01b      	b.n	80077ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	691b      	ldr	r3, [r3, #16]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	daf2      	bge.n	80077a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80077be:	2300      	movs	r3, #0
 80077c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	f043 0201 	orr.w	r2, r3, #1
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	3301      	adds	r3, #1
 80077d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	4a09      	ldr	r2, [pc, #36]	; (80077fc <USB_CoreReset+0x64>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d901      	bls.n	80077e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80077dc:	2303      	movs	r3, #3
 80077de:	e006      	b.n	80077ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	f003 0301 	and.w	r3, r3, #1
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d0f0      	beq.n	80077ce <USB_CoreReset+0x36>

  return HAL_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3714      	adds	r7, #20
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	00030d40 	.word	0x00030d40

08007800 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007800:	b480      	push	{r7}
 8007802:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007804:	bf00      	nop
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr
	...

08007810 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007810:	b480      	push	{r7}
 8007812:	b085      	sub	sp, #20
 8007814:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007816:	f3ef 8305 	mrs	r3, IPSR
 800781a:	60bb      	str	r3, [r7, #8]
  return(result);
 800781c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10f      	bne.n	8007842 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007822:	f3ef 8310 	mrs	r3, PRIMASK
 8007826:	607b      	str	r3, [r7, #4]
  return(result);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d105      	bne.n	800783a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800782e:	f3ef 8311 	mrs	r3, BASEPRI
 8007832:	603b      	str	r3, [r7, #0]
  return(result);
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d007      	beq.n	800784a <osKernelInitialize+0x3a>
 800783a:	4b0e      	ldr	r3, [pc, #56]	; (8007874 <osKernelInitialize+0x64>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2b02      	cmp	r3, #2
 8007840:	d103      	bne.n	800784a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007842:	f06f 0305 	mvn.w	r3, #5
 8007846:	60fb      	str	r3, [r7, #12]
 8007848:	e00c      	b.n	8007864 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800784a:	4b0a      	ldr	r3, [pc, #40]	; (8007874 <osKernelInitialize+0x64>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d105      	bne.n	800785e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007852:	4b08      	ldr	r3, [pc, #32]	; (8007874 <osKernelInitialize+0x64>)
 8007854:	2201      	movs	r2, #1
 8007856:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007858:	2300      	movs	r3, #0
 800785a:	60fb      	str	r3, [r7, #12]
 800785c:	e002      	b.n	8007864 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800785e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007862:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007864:	68fb      	ldr	r3, [r7, #12]
}
 8007866:	4618      	mov	r0, r3
 8007868:	3714      	adds	r7, #20
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	20006f54 	.word	0x20006f54

08007878 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800787e:	f3ef 8305 	mrs	r3, IPSR
 8007882:	60bb      	str	r3, [r7, #8]
  return(result);
 8007884:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007886:	2b00      	cmp	r3, #0
 8007888:	d10f      	bne.n	80078aa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800788a:	f3ef 8310 	mrs	r3, PRIMASK
 800788e:	607b      	str	r3, [r7, #4]
  return(result);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d105      	bne.n	80078a2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007896:	f3ef 8311 	mrs	r3, BASEPRI
 800789a:	603b      	str	r3, [r7, #0]
  return(result);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d007      	beq.n	80078b2 <osKernelStart+0x3a>
 80078a2:	4b0f      	ldr	r3, [pc, #60]	; (80078e0 <osKernelStart+0x68>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2b02      	cmp	r3, #2
 80078a8:	d103      	bne.n	80078b2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80078aa:	f06f 0305 	mvn.w	r3, #5
 80078ae:	60fb      	str	r3, [r7, #12]
 80078b0:	e010      	b.n	80078d4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80078b2:	4b0b      	ldr	r3, [pc, #44]	; (80078e0 <osKernelStart+0x68>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d109      	bne.n	80078ce <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80078ba:	f7ff ffa1 	bl	8007800 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80078be:	4b08      	ldr	r3, [pc, #32]	; (80078e0 <osKernelStart+0x68>)
 80078c0:	2202      	movs	r2, #2
 80078c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80078c4:	f001 f8ca 	bl	8008a5c <vTaskStartScheduler>
      stat = osOK;
 80078c8:	2300      	movs	r3, #0
 80078ca:	60fb      	str	r3, [r7, #12]
 80078cc:	e002      	b.n	80078d4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80078ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80078d4:	68fb      	ldr	r3, [r7, #12]
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3710      	adds	r7, #16
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	20006f54 	.word	0x20006f54

080078e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b090      	sub	sp, #64	; 0x40
 80078e8:	af04      	add	r7, sp, #16
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80078f0:	2300      	movs	r3, #0
 80078f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078f4:	f3ef 8305 	mrs	r3, IPSR
 80078f8:	61fb      	str	r3, [r7, #28]
  return(result);
 80078fa:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f040 808f 	bne.w	8007a20 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007902:	f3ef 8310 	mrs	r3, PRIMASK
 8007906:	61bb      	str	r3, [r7, #24]
  return(result);
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d105      	bne.n	800791a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800790e:	f3ef 8311 	mrs	r3, BASEPRI
 8007912:	617b      	str	r3, [r7, #20]
  return(result);
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d003      	beq.n	8007922 <osThreadNew+0x3e>
 800791a:	4b44      	ldr	r3, [pc, #272]	; (8007a2c <osThreadNew+0x148>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2b02      	cmp	r3, #2
 8007920:	d07e      	beq.n	8007a20 <osThreadNew+0x13c>
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d07b      	beq.n	8007a20 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007928:	2380      	movs	r3, #128	; 0x80
 800792a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800792c:	2318      	movs	r3, #24
 800792e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8007930:	2300      	movs	r3, #0
 8007932:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8007934:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007938:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d045      	beq.n	80079cc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d002      	beq.n	800794e <osThreadNew+0x6a>
        name = attr->name;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	699b      	ldr	r3, [r3, #24]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d002      	beq.n	800795c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	699b      	ldr	r3, [r3, #24]
 800795a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800795c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795e:	2b00      	cmp	r3, #0
 8007960:	d008      	beq.n	8007974 <osThreadNew+0x90>
 8007962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007964:	2b38      	cmp	r3, #56	; 0x38
 8007966:	d805      	bhi.n	8007974 <osThreadNew+0x90>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	f003 0301 	and.w	r3, r3, #1
 8007970:	2b00      	cmp	r3, #0
 8007972:	d001      	beq.n	8007978 <osThreadNew+0x94>
        return (NULL);
 8007974:	2300      	movs	r3, #0
 8007976:	e054      	b.n	8007a22 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	695b      	ldr	r3, [r3, #20]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d003      	beq.n	8007988 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	695b      	ldr	r3, [r3, #20]
 8007984:	089b      	lsrs	r3, r3, #2
 8007986:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d00e      	beq.n	80079ae <osThreadNew+0xca>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	2ba7      	cmp	r3, #167	; 0xa7
 8007996:	d90a      	bls.n	80079ae <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800799c:	2b00      	cmp	r3, #0
 800799e:	d006      	beq.n	80079ae <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	695b      	ldr	r3, [r3, #20]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d002      	beq.n	80079ae <osThreadNew+0xca>
        mem = 1;
 80079a8:	2301      	movs	r3, #1
 80079aa:	623b      	str	r3, [r7, #32]
 80079ac:	e010      	b.n	80079d0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d10c      	bne.n	80079d0 <osThreadNew+0xec>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d108      	bne.n	80079d0 <osThreadNew+0xec>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d104      	bne.n	80079d0 <osThreadNew+0xec>
          mem = 0;
 80079c6:	2300      	movs	r3, #0
 80079c8:	623b      	str	r3, [r7, #32]
 80079ca:	e001      	b.n	80079d0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80079cc:	2300      	movs	r3, #0
 80079ce:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80079d0:	6a3b      	ldr	r3, [r7, #32]
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d110      	bne.n	80079f8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80079de:	9202      	str	r2, [sp, #8]
 80079e0:	9301      	str	r3, [sp, #4]
 80079e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e4:	9300      	str	r3, [sp, #0]
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079ec:	68f8      	ldr	r0, [r7, #12]
 80079ee:	f000 fe3f 	bl	8008670 <xTaskCreateStatic>
 80079f2:	4603      	mov	r3, r0
 80079f4:	613b      	str	r3, [r7, #16]
 80079f6:	e013      	b.n	8007a20 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80079f8:	6a3b      	ldr	r3, [r7, #32]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d110      	bne.n	8007a20 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80079fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a00:	b29a      	uxth	r2, r3
 8007a02:	f107 0310 	add.w	r3, r7, #16
 8007a06:	9301      	str	r3, [sp, #4]
 8007a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0a:	9300      	str	r3, [sp, #0]
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f000 fe90 	bl	8008736 <xTaskCreate>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d001      	beq.n	8007a20 <osThreadNew+0x13c>
          hTask = NULL;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007a20:	693b      	ldr	r3, [r7, #16]
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3730      	adds	r7, #48	; 0x30
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	20006f54 	.word	0x20006f54

08007a30 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b086      	sub	sp, #24
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a38:	f3ef 8305 	mrs	r3, IPSR
 8007a3c:	613b      	str	r3, [r7, #16]
  return(result);
 8007a3e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d10f      	bne.n	8007a64 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a44:	f3ef 8310 	mrs	r3, PRIMASK
 8007a48:	60fb      	str	r3, [r7, #12]
  return(result);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d105      	bne.n	8007a5c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007a50:	f3ef 8311 	mrs	r3, BASEPRI
 8007a54:	60bb      	str	r3, [r7, #8]
  return(result);
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d007      	beq.n	8007a6c <osDelay+0x3c>
 8007a5c:	4b0a      	ldr	r3, [pc, #40]	; (8007a88 <osDelay+0x58>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2b02      	cmp	r3, #2
 8007a62:	d103      	bne.n	8007a6c <osDelay+0x3c>
    stat = osErrorISR;
 8007a64:	f06f 0305 	mvn.w	r3, #5
 8007a68:	617b      	str	r3, [r7, #20]
 8007a6a:	e007      	b.n	8007a7c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d002      	beq.n	8007a7c <osDelay+0x4c>
      vTaskDelay(ticks);
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 ffba 	bl	80089f0 <vTaskDelay>
    }
  }

  return (stat);
 8007a7c:	697b      	ldr	r3, [r7, #20]
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3718      	adds	r7, #24
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	20006f54 	.word	0x20006f54

08007a8c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007a8c:	b480      	push	{r7}
 8007a8e:	b085      	sub	sp, #20
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	4a07      	ldr	r2, [pc, #28]	; (8007ab8 <vApplicationGetIdleTaskMemory+0x2c>)
 8007a9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	4a06      	ldr	r2, [pc, #24]	; (8007abc <vApplicationGetIdleTaskMemory+0x30>)
 8007aa2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2280      	movs	r2, #128	; 0x80
 8007aa8:	601a      	str	r2, [r3, #0]
}
 8007aaa:	bf00      	nop
 8007aac:	3714      	adds	r7, #20
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr
 8007ab6:	bf00      	nop
 8007ab8:	20006f58 	.word	0x20006f58
 8007abc:	20007000 	.word	0x20007000

08007ac0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007ac0:	b480      	push	{r7}
 8007ac2:	b085      	sub	sp, #20
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	4a07      	ldr	r2, [pc, #28]	; (8007aec <vApplicationGetTimerTaskMemory+0x2c>)
 8007ad0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	4a06      	ldr	r2, [pc, #24]	; (8007af0 <vApplicationGetTimerTaskMemory+0x30>)
 8007ad6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ade:	601a      	str	r2, [r3, #0]
}
 8007ae0:	bf00      	nop
 8007ae2:	3714      	adds	r7, #20
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr
 8007aec:	20007200 	.word	0x20007200
 8007af0:	200072a8 	.word	0x200072a8

08007af4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f103 0208 	add.w	r2, r3, #8
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f103 0208 	add.w	r2, r3, #8
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f103 0208 	add.w	r2, r3, #8
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b28:	bf00      	nop
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007b42:	bf00      	nop
 8007b44:	370c      	adds	r7, #12
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr

08007b4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b4e:	b480      	push	{r7}
 8007b50:	b085      	sub	sp, #20
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
 8007b56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	689a      	ldr	r2, [r3, #8]
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	683a      	ldr	r2, [r7, #0]
 8007b72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	683a      	ldr	r2, [r7, #0]
 8007b78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	1c5a      	adds	r2, r3, #1
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	601a      	str	r2, [r3, #0]
}
 8007b8a:	bf00      	nop
 8007b8c:	3714      	adds	r7, #20
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr

08007b96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b96:	b480      	push	{r7}
 8007b98:	b085      	sub	sp, #20
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
 8007b9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bac:	d103      	bne.n	8007bb6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	60fb      	str	r3, [r7, #12]
 8007bb4:	e00c      	b.n	8007bd0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	3308      	adds	r3, #8
 8007bba:	60fb      	str	r3, [r7, #12]
 8007bbc:	e002      	b.n	8007bc4 <vListInsert+0x2e>
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	60fb      	str	r3, [r7, #12]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	68ba      	ldr	r2, [r7, #8]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d2f6      	bcs.n	8007bbe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	685a      	ldr	r2, [r3, #4]
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	683a      	ldr	r2, [r7, #0]
 8007bde:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	683a      	ldr	r2, [r7, #0]
 8007bea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	1c5a      	adds	r2, r3, #1
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	601a      	str	r2, [r3, #0]
}
 8007bfc:	bf00      	nop
 8007bfe:	3714      	adds	r7, #20
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	691b      	ldr	r3, [r3, #16]
 8007c14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	6892      	ldr	r2, [r2, #8]
 8007c1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	6852      	ldr	r2, [r2, #4]
 8007c28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d103      	bne.n	8007c3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	689a      	ldr	r2, [r3, #8]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	1e5a      	subs	r2, r3, #1
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3714      	adds	r7, #20
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d10c      	bne.n	8007c8a <xQueueGenericReset+0x2e>
	__asm volatile
 8007c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c74:	b672      	cpsid	i
 8007c76:	f383 8811 	msr	BASEPRI, r3
 8007c7a:	f3bf 8f6f 	isb	sy
 8007c7e:	f3bf 8f4f 	dsb	sy
 8007c82:	b662      	cpsie	i
 8007c84:	60bb      	str	r3, [r7, #8]
}
 8007c86:	bf00      	nop
 8007c88:	e7fe      	b.n	8007c88 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007c8a:	f002 f8cf 	bl	8009e2c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c96:	68f9      	ldr	r1, [r7, #12]
 8007c98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007c9a:	fb01 f303 	mul.w	r3, r1, r3
 8007c9e:	441a      	add	r2, r3
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cba:	3b01      	subs	r3, #1
 8007cbc:	68f9      	ldr	r1, [r7, #12]
 8007cbe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007cc0:	fb01 f303 	mul.w	r3, r1, r3
 8007cc4:	441a      	add	r2, r3
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	22ff      	movs	r2, #255	; 0xff
 8007cce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	22ff      	movs	r2, #255	; 0xff
 8007cd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d114      	bne.n	8007d0a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d01a      	beq.n	8007d1e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	3310      	adds	r3, #16
 8007cec:	4618      	mov	r0, r3
 8007cee:	f001 f95d 	bl	8008fac <xTaskRemoveFromEventList>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d012      	beq.n	8007d1e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007cf8:	4b0c      	ldr	r3, [pc, #48]	; (8007d2c <xQueueGenericReset+0xd0>)
 8007cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cfe:	601a      	str	r2, [r3, #0]
 8007d00:	f3bf 8f4f 	dsb	sy
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	e009      	b.n	8007d1e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	3310      	adds	r3, #16
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7ff fef0 	bl	8007af4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	3324      	adds	r3, #36	; 0x24
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f7ff feeb 	bl	8007af4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007d1e:	f002 f8b9 	bl	8009e94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007d22:	2301      	movs	r3, #1
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3710      	adds	r7, #16
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	e000ed04 	.word	0xe000ed04

08007d30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b08e      	sub	sp, #56	; 0x38
 8007d34:	af02      	add	r7, sp, #8
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	607a      	str	r2, [r7, #4]
 8007d3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d10c      	bne.n	8007d5e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8007d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d48:	b672      	cpsid	i
 8007d4a:	f383 8811 	msr	BASEPRI, r3
 8007d4e:	f3bf 8f6f 	isb	sy
 8007d52:	f3bf 8f4f 	dsb	sy
 8007d56:	b662      	cpsie	i
 8007d58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007d5a:	bf00      	nop
 8007d5c:	e7fe      	b.n	8007d5c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d10c      	bne.n	8007d7e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8007d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d68:	b672      	cpsid	i
 8007d6a:	f383 8811 	msr	BASEPRI, r3
 8007d6e:	f3bf 8f6f 	isb	sy
 8007d72:	f3bf 8f4f 	dsb	sy
 8007d76:	b662      	cpsie	i
 8007d78:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007d7a:	bf00      	nop
 8007d7c:	e7fe      	b.n	8007d7c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d002      	beq.n	8007d8a <xQueueGenericCreateStatic+0x5a>
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d001      	beq.n	8007d8e <xQueueGenericCreateStatic+0x5e>
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e000      	b.n	8007d90 <xQueueGenericCreateStatic+0x60>
 8007d8e:	2300      	movs	r3, #0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d10c      	bne.n	8007dae <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8007d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d98:	b672      	cpsid	i
 8007d9a:	f383 8811 	msr	BASEPRI, r3
 8007d9e:	f3bf 8f6f 	isb	sy
 8007da2:	f3bf 8f4f 	dsb	sy
 8007da6:	b662      	cpsie	i
 8007da8:	623b      	str	r3, [r7, #32]
}
 8007daa:	bf00      	nop
 8007dac:	e7fe      	b.n	8007dac <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d102      	bne.n	8007dba <xQueueGenericCreateStatic+0x8a>
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d101      	bne.n	8007dbe <xQueueGenericCreateStatic+0x8e>
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e000      	b.n	8007dc0 <xQueueGenericCreateStatic+0x90>
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d10c      	bne.n	8007dde <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8007dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc8:	b672      	cpsid	i
 8007dca:	f383 8811 	msr	BASEPRI, r3
 8007dce:	f3bf 8f6f 	isb	sy
 8007dd2:	f3bf 8f4f 	dsb	sy
 8007dd6:	b662      	cpsie	i
 8007dd8:	61fb      	str	r3, [r7, #28]
}
 8007dda:	bf00      	nop
 8007ddc:	e7fe      	b.n	8007ddc <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007dde:	2350      	movs	r3, #80	; 0x50
 8007de0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	2b50      	cmp	r3, #80	; 0x50
 8007de6:	d00c      	beq.n	8007e02 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8007de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dec:	b672      	cpsid	i
 8007dee:	f383 8811 	msr	BASEPRI, r3
 8007df2:	f3bf 8f6f 	isb	sy
 8007df6:	f3bf 8f4f 	dsb	sy
 8007dfa:	b662      	cpsie	i
 8007dfc:	61bb      	str	r3, [r7, #24]
}
 8007dfe:	bf00      	nop
 8007e00:	e7fe      	b.n	8007e00 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007e02:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00d      	beq.n	8007e2a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e10:	2201      	movs	r2, #1
 8007e12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e16:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e1c:	9300      	str	r3, [sp, #0]
 8007e1e:	4613      	mov	r3, r2
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	68b9      	ldr	r1, [r7, #8]
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f000 f805 	bl	8007e34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3730      	adds	r7, #48	; 0x30
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	607a      	str	r2, [r7, #4]
 8007e40:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d103      	bne.n	8007e50 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	69ba      	ldr	r2, [r7, #24]
 8007e4c:	601a      	str	r2, [r3, #0]
 8007e4e:	e002      	b.n	8007e56 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	68ba      	ldr	r2, [r7, #8]
 8007e60:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007e62:	2101      	movs	r1, #1
 8007e64:	69b8      	ldr	r0, [r7, #24]
 8007e66:	f7ff fef9 	bl	8007c5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	78fa      	ldrb	r2, [r7, #3]
 8007e6e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007e72:	bf00      	nop
 8007e74:	3710      	adds	r7, #16
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
	...

08007e7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b08e      	sub	sp, #56	; 0x38
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	607a      	str	r2, [r7, #4]
 8007e88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d10c      	bne.n	8007eb2 <xQueueGenericSend+0x36>
	__asm volatile
 8007e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9c:	b672      	cpsid	i
 8007e9e:	f383 8811 	msr	BASEPRI, r3
 8007ea2:	f3bf 8f6f 	isb	sy
 8007ea6:	f3bf 8f4f 	dsb	sy
 8007eaa:	b662      	cpsie	i
 8007eac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007eae:	bf00      	nop
 8007eb0:	e7fe      	b.n	8007eb0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d103      	bne.n	8007ec0 <xQueueGenericSend+0x44>
 8007eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d101      	bne.n	8007ec4 <xQueueGenericSend+0x48>
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e000      	b.n	8007ec6 <xQueueGenericSend+0x4a>
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d10c      	bne.n	8007ee4 <xQueueGenericSend+0x68>
	__asm volatile
 8007eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ece:	b672      	cpsid	i
 8007ed0:	f383 8811 	msr	BASEPRI, r3
 8007ed4:	f3bf 8f6f 	isb	sy
 8007ed8:	f3bf 8f4f 	dsb	sy
 8007edc:	b662      	cpsie	i
 8007ede:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007ee0:	bf00      	nop
 8007ee2:	e7fe      	b.n	8007ee2 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	2b02      	cmp	r3, #2
 8007ee8:	d103      	bne.n	8007ef2 <xQueueGenericSend+0x76>
 8007eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d101      	bne.n	8007ef6 <xQueueGenericSend+0x7a>
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e000      	b.n	8007ef8 <xQueueGenericSend+0x7c>
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d10c      	bne.n	8007f16 <xQueueGenericSend+0x9a>
	__asm volatile
 8007efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f00:	b672      	cpsid	i
 8007f02:	f383 8811 	msr	BASEPRI, r3
 8007f06:	f3bf 8f6f 	isb	sy
 8007f0a:	f3bf 8f4f 	dsb	sy
 8007f0e:	b662      	cpsie	i
 8007f10:	623b      	str	r3, [r7, #32]
}
 8007f12:	bf00      	nop
 8007f14:	e7fe      	b.n	8007f14 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f16:	f001 fa3b 	bl	8009390 <xTaskGetSchedulerState>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d102      	bne.n	8007f26 <xQueueGenericSend+0xaa>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d101      	bne.n	8007f2a <xQueueGenericSend+0xae>
 8007f26:	2301      	movs	r3, #1
 8007f28:	e000      	b.n	8007f2c <xQueueGenericSend+0xb0>
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d10c      	bne.n	8007f4a <xQueueGenericSend+0xce>
	__asm volatile
 8007f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f34:	b672      	cpsid	i
 8007f36:	f383 8811 	msr	BASEPRI, r3
 8007f3a:	f3bf 8f6f 	isb	sy
 8007f3e:	f3bf 8f4f 	dsb	sy
 8007f42:	b662      	cpsie	i
 8007f44:	61fb      	str	r3, [r7, #28]
}
 8007f46:	bf00      	nop
 8007f48:	e7fe      	b.n	8007f48 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f4a:	f001 ff6f 	bl	8009e2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d302      	bcc.n	8007f60 <xQueueGenericSend+0xe4>
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	d129      	bne.n	8007fb4 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f60:	683a      	ldr	r2, [r7, #0]
 8007f62:	68b9      	ldr	r1, [r7, #8]
 8007f64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f66:	f000 fa15 	bl	8008394 <prvCopyDataToQueue>
 8007f6a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d010      	beq.n	8007f96 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f76:	3324      	adds	r3, #36	; 0x24
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f001 f817 	bl	8008fac <xTaskRemoveFromEventList>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d013      	beq.n	8007fac <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007f84:	4b3f      	ldr	r3, [pc, #252]	; (8008084 <xQueueGenericSend+0x208>)
 8007f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f8a:	601a      	str	r2, [r3, #0]
 8007f8c:	f3bf 8f4f 	dsb	sy
 8007f90:	f3bf 8f6f 	isb	sy
 8007f94:	e00a      	b.n	8007fac <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d007      	beq.n	8007fac <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007f9c:	4b39      	ldr	r3, [pc, #228]	; (8008084 <xQueueGenericSend+0x208>)
 8007f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fa2:	601a      	str	r2, [r3, #0]
 8007fa4:	f3bf 8f4f 	dsb	sy
 8007fa8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007fac:	f001 ff72 	bl	8009e94 <vPortExitCritical>
				return pdPASS;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e063      	b.n	800807c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d103      	bne.n	8007fc2 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007fba:	f001 ff6b 	bl	8009e94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	e05c      	b.n	800807c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d106      	bne.n	8007fd6 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007fc8:	f107 0314 	add.w	r3, r7, #20
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f001 f87b 	bl	80090c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007fd6:	f001 ff5d 	bl	8009e94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007fda:	f000 fdb3 	bl	8008b44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007fde:	f001 ff25 	bl	8009e2c <vPortEnterCritical>
 8007fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fe8:	b25b      	sxtb	r3, r3
 8007fea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fee:	d103      	bne.n	8007ff8 <xQueueGenericSend+0x17c>
 8007ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ffe:	b25b      	sxtb	r3, r3
 8008000:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008004:	d103      	bne.n	800800e <xQueueGenericSend+0x192>
 8008006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008008:	2200      	movs	r2, #0
 800800a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800800e:	f001 ff41 	bl	8009e94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008012:	1d3a      	adds	r2, r7, #4
 8008014:	f107 0314 	add.w	r3, r7, #20
 8008018:	4611      	mov	r1, r2
 800801a:	4618      	mov	r0, r3
 800801c:	f001 f86a 	bl	80090f4 <xTaskCheckForTimeOut>
 8008020:	4603      	mov	r3, r0
 8008022:	2b00      	cmp	r3, #0
 8008024:	d124      	bne.n	8008070 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008026:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008028:	f000 faac 	bl	8008584 <prvIsQueueFull>
 800802c:	4603      	mov	r3, r0
 800802e:	2b00      	cmp	r3, #0
 8008030:	d018      	beq.n	8008064 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008034:	3310      	adds	r3, #16
 8008036:	687a      	ldr	r2, [r7, #4]
 8008038:	4611      	mov	r1, r2
 800803a:	4618      	mov	r0, r3
 800803c:	f000 ff62 	bl	8008f04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008040:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008042:	f000 fa37 	bl	80084b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008046:	f000 fd8b 	bl	8008b60 <xTaskResumeAll>
 800804a:	4603      	mov	r3, r0
 800804c:	2b00      	cmp	r3, #0
 800804e:	f47f af7c 	bne.w	8007f4a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8008052:	4b0c      	ldr	r3, [pc, #48]	; (8008084 <xQueueGenericSend+0x208>)
 8008054:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008058:	601a      	str	r2, [r3, #0]
 800805a:	f3bf 8f4f 	dsb	sy
 800805e:	f3bf 8f6f 	isb	sy
 8008062:	e772      	b.n	8007f4a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008064:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008066:	f000 fa25 	bl	80084b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800806a:	f000 fd79 	bl	8008b60 <xTaskResumeAll>
 800806e:	e76c      	b.n	8007f4a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008070:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008072:	f000 fa1f 	bl	80084b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008076:	f000 fd73 	bl	8008b60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800807a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800807c:	4618      	mov	r0, r3
 800807e:	3738      	adds	r7, #56	; 0x38
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}
 8008084:	e000ed04 	.word	0xe000ed04

08008088 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b08e      	sub	sp, #56	; 0x38
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	607a      	str	r2, [r7, #4]
 8008094:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800809a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809c:	2b00      	cmp	r3, #0
 800809e:	d10c      	bne.n	80080ba <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80080a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a4:	b672      	cpsid	i
 80080a6:	f383 8811 	msr	BASEPRI, r3
 80080aa:	f3bf 8f6f 	isb	sy
 80080ae:	f3bf 8f4f 	dsb	sy
 80080b2:	b662      	cpsie	i
 80080b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80080b6:	bf00      	nop
 80080b8:	e7fe      	b.n	80080b8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d103      	bne.n	80080c8 <xQueueGenericSendFromISR+0x40>
 80080c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d101      	bne.n	80080cc <xQueueGenericSendFromISR+0x44>
 80080c8:	2301      	movs	r3, #1
 80080ca:	e000      	b.n	80080ce <xQueueGenericSendFromISR+0x46>
 80080cc:	2300      	movs	r3, #0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d10c      	bne.n	80080ec <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80080d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d6:	b672      	cpsid	i
 80080d8:	f383 8811 	msr	BASEPRI, r3
 80080dc:	f3bf 8f6f 	isb	sy
 80080e0:	f3bf 8f4f 	dsb	sy
 80080e4:	b662      	cpsie	i
 80080e6:	623b      	str	r3, [r7, #32]
}
 80080e8:	bf00      	nop
 80080ea:	e7fe      	b.n	80080ea <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	2b02      	cmp	r3, #2
 80080f0:	d103      	bne.n	80080fa <xQueueGenericSendFromISR+0x72>
 80080f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d101      	bne.n	80080fe <xQueueGenericSendFromISR+0x76>
 80080fa:	2301      	movs	r3, #1
 80080fc:	e000      	b.n	8008100 <xQueueGenericSendFromISR+0x78>
 80080fe:	2300      	movs	r3, #0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d10c      	bne.n	800811e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8008104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008108:	b672      	cpsid	i
 800810a:	f383 8811 	msr	BASEPRI, r3
 800810e:	f3bf 8f6f 	isb	sy
 8008112:	f3bf 8f4f 	dsb	sy
 8008116:	b662      	cpsie	i
 8008118:	61fb      	str	r3, [r7, #28]
}
 800811a:	bf00      	nop
 800811c:	e7fe      	b.n	800811c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800811e:	f001 ff6d 	bl	8009ffc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008122:	f3ef 8211 	mrs	r2, BASEPRI
 8008126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812a:	b672      	cpsid	i
 800812c:	f383 8811 	msr	BASEPRI, r3
 8008130:	f3bf 8f6f 	isb	sy
 8008134:	f3bf 8f4f 	dsb	sy
 8008138:	b662      	cpsie	i
 800813a:	61ba      	str	r2, [r7, #24]
 800813c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800813e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008140:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008144:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800814a:	429a      	cmp	r2, r3
 800814c:	d302      	bcc.n	8008154 <xQueueGenericSendFromISR+0xcc>
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	2b02      	cmp	r3, #2
 8008152:	d12c      	bne.n	80081ae <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008156:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800815a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800815e:	683a      	ldr	r2, [r7, #0]
 8008160:	68b9      	ldr	r1, [r7, #8]
 8008162:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008164:	f000 f916 	bl	8008394 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008168:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800816c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008170:	d112      	bne.n	8008198 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008176:	2b00      	cmp	r3, #0
 8008178:	d016      	beq.n	80081a8 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800817a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817c:	3324      	adds	r3, #36	; 0x24
 800817e:	4618      	mov	r0, r3
 8008180:	f000 ff14 	bl	8008fac <xTaskRemoveFromEventList>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00e      	beq.n	80081a8 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00b      	beq.n	80081a8 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2201      	movs	r2, #1
 8008194:	601a      	str	r2, [r3, #0]
 8008196:	e007      	b.n	80081a8 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008198:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800819c:	3301      	adds	r3, #1
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	b25a      	sxtb	r2, r3
 80081a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80081a8:	2301      	movs	r3, #1
 80081aa:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80081ac:	e001      	b.n	80081b2 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80081ae:	2300      	movs	r3, #0
 80081b0:	637b      	str	r3, [r7, #52]	; 0x34
 80081b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081b4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80081bc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80081be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3738      	adds	r7, #56	; 0x38
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b08c      	sub	sp, #48	; 0x30
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80081d4:	2300      	movs	r3, #0
 80081d6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80081dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d10c      	bne.n	80081fc <xQueueReceive+0x34>
	__asm volatile
 80081e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e6:	b672      	cpsid	i
 80081e8:	f383 8811 	msr	BASEPRI, r3
 80081ec:	f3bf 8f6f 	isb	sy
 80081f0:	f3bf 8f4f 	dsb	sy
 80081f4:	b662      	cpsie	i
 80081f6:	623b      	str	r3, [r7, #32]
}
 80081f8:	bf00      	nop
 80081fa:	e7fe      	b.n	80081fa <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d103      	bne.n	800820a <xQueueReceive+0x42>
 8008202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008206:	2b00      	cmp	r3, #0
 8008208:	d101      	bne.n	800820e <xQueueReceive+0x46>
 800820a:	2301      	movs	r3, #1
 800820c:	e000      	b.n	8008210 <xQueueReceive+0x48>
 800820e:	2300      	movs	r3, #0
 8008210:	2b00      	cmp	r3, #0
 8008212:	d10c      	bne.n	800822e <xQueueReceive+0x66>
	__asm volatile
 8008214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008218:	b672      	cpsid	i
 800821a:	f383 8811 	msr	BASEPRI, r3
 800821e:	f3bf 8f6f 	isb	sy
 8008222:	f3bf 8f4f 	dsb	sy
 8008226:	b662      	cpsie	i
 8008228:	61fb      	str	r3, [r7, #28]
}
 800822a:	bf00      	nop
 800822c:	e7fe      	b.n	800822c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800822e:	f001 f8af 	bl	8009390 <xTaskGetSchedulerState>
 8008232:	4603      	mov	r3, r0
 8008234:	2b00      	cmp	r3, #0
 8008236:	d102      	bne.n	800823e <xQueueReceive+0x76>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d101      	bne.n	8008242 <xQueueReceive+0x7a>
 800823e:	2301      	movs	r3, #1
 8008240:	e000      	b.n	8008244 <xQueueReceive+0x7c>
 8008242:	2300      	movs	r3, #0
 8008244:	2b00      	cmp	r3, #0
 8008246:	d10c      	bne.n	8008262 <xQueueReceive+0x9a>
	__asm volatile
 8008248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824c:	b672      	cpsid	i
 800824e:	f383 8811 	msr	BASEPRI, r3
 8008252:	f3bf 8f6f 	isb	sy
 8008256:	f3bf 8f4f 	dsb	sy
 800825a:	b662      	cpsie	i
 800825c:	61bb      	str	r3, [r7, #24]
}
 800825e:	bf00      	nop
 8008260:	e7fe      	b.n	8008260 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008262:	f001 fde3 	bl	8009e2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800826a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800826c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826e:	2b00      	cmp	r3, #0
 8008270:	d01f      	beq.n	80082b2 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008272:	68b9      	ldr	r1, [r7, #8]
 8008274:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008276:	f000 f8f7 	bl	8008468 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800827a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827c:	1e5a      	subs	r2, r3, #1
 800827e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008280:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008284:	691b      	ldr	r3, [r3, #16]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d00f      	beq.n	80082aa <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800828a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828c:	3310      	adds	r3, #16
 800828e:	4618      	mov	r0, r3
 8008290:	f000 fe8c 	bl	8008fac <xTaskRemoveFromEventList>
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d007      	beq.n	80082aa <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800829a:	4b3d      	ldr	r3, [pc, #244]	; (8008390 <xQueueReceive+0x1c8>)
 800829c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082a0:	601a      	str	r2, [r3, #0]
 80082a2:	f3bf 8f4f 	dsb	sy
 80082a6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80082aa:	f001 fdf3 	bl	8009e94 <vPortExitCritical>
				return pdPASS;
 80082ae:	2301      	movs	r3, #1
 80082b0:	e069      	b.n	8008386 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d103      	bne.n	80082c0 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80082b8:	f001 fdec 	bl	8009e94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80082bc:	2300      	movs	r3, #0
 80082be:	e062      	b.n	8008386 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80082c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d106      	bne.n	80082d4 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80082c6:	f107 0310 	add.w	r3, r7, #16
 80082ca:	4618      	mov	r0, r3
 80082cc:	f000 fefc 	bl	80090c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80082d0:	2301      	movs	r3, #1
 80082d2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80082d4:	f001 fdde 	bl	8009e94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80082d8:	f000 fc34 	bl	8008b44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80082dc:	f001 fda6 	bl	8009e2c <vPortEnterCritical>
 80082e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082e6:	b25b      	sxtb	r3, r3
 80082e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082ec:	d103      	bne.n	80082f6 <xQueueReceive+0x12e>
 80082ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082fc:	b25b      	sxtb	r3, r3
 80082fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008302:	d103      	bne.n	800830c <xQueueReceive+0x144>
 8008304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008306:	2200      	movs	r2, #0
 8008308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800830c:	f001 fdc2 	bl	8009e94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008310:	1d3a      	adds	r2, r7, #4
 8008312:	f107 0310 	add.w	r3, r7, #16
 8008316:	4611      	mov	r1, r2
 8008318:	4618      	mov	r0, r3
 800831a:	f000 feeb 	bl	80090f4 <xTaskCheckForTimeOut>
 800831e:	4603      	mov	r3, r0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d123      	bne.n	800836c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008324:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008326:	f000 f917 	bl	8008558 <prvIsQueueEmpty>
 800832a:	4603      	mov	r3, r0
 800832c:	2b00      	cmp	r3, #0
 800832e:	d017      	beq.n	8008360 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008332:	3324      	adds	r3, #36	; 0x24
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	4611      	mov	r1, r2
 8008338:	4618      	mov	r0, r3
 800833a:	f000 fde3 	bl	8008f04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800833e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008340:	f000 f8b8 	bl	80084b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008344:	f000 fc0c 	bl	8008b60 <xTaskResumeAll>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d189      	bne.n	8008262 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800834e:	4b10      	ldr	r3, [pc, #64]	; (8008390 <xQueueReceive+0x1c8>)
 8008350:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008354:	601a      	str	r2, [r3, #0]
 8008356:	f3bf 8f4f 	dsb	sy
 800835a:	f3bf 8f6f 	isb	sy
 800835e:	e780      	b.n	8008262 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008360:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008362:	f000 f8a7 	bl	80084b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008366:	f000 fbfb 	bl	8008b60 <xTaskResumeAll>
 800836a:	e77a      	b.n	8008262 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800836c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800836e:	f000 f8a1 	bl	80084b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008372:	f000 fbf5 	bl	8008b60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008376:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008378:	f000 f8ee 	bl	8008558 <prvIsQueueEmpty>
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	f43f af6f 	beq.w	8008262 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008384:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008386:	4618      	mov	r0, r3
 8008388:	3730      	adds	r7, #48	; 0x30
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	e000ed04 	.word	0xe000ed04

08008394 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b086      	sub	sp, #24
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80083a0:	2300      	movs	r3, #0
 80083a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d10d      	bne.n	80083ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d14d      	bne.n	8008456 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	4618      	mov	r0, r3
 80083c0:	f001 f804 	bl	80093cc <xTaskPriorityDisinherit>
 80083c4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2200      	movs	r2, #0
 80083ca:	609a      	str	r2, [r3, #8]
 80083cc:	e043      	b.n	8008456 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d119      	bne.n	8008408 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6858      	ldr	r0, [r3, #4]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083dc:	461a      	mov	r2, r3
 80083de:	68b9      	ldr	r1, [r7, #8]
 80083e0:	f011 fa6d 	bl	80198be <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	685a      	ldr	r2, [r3, #4]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ec:	441a      	add	r2, r3
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	685a      	ldr	r2, [r3, #4]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d32b      	bcc.n	8008456 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681a      	ldr	r2, [r3, #0]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	605a      	str	r2, [r3, #4]
 8008406:	e026      	b.n	8008456 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	68d8      	ldr	r0, [r3, #12]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008410:	461a      	mov	r2, r3
 8008412:	68b9      	ldr	r1, [r7, #8]
 8008414:	f011 fa53 	bl	80198be <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	68da      	ldr	r2, [r3, #12]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008420:	425b      	negs	r3, r3
 8008422:	441a      	add	r2, r3
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	68da      	ldr	r2, [r3, #12]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	429a      	cmp	r2, r3
 8008432:	d207      	bcs.n	8008444 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	689a      	ldr	r2, [r3, #8]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800843c:	425b      	negs	r3, r3
 800843e:	441a      	add	r2, r3
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2b02      	cmp	r3, #2
 8008448:	d105      	bne.n	8008456 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d002      	beq.n	8008456 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	3b01      	subs	r3, #1
 8008454:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	1c5a      	adds	r2, r3, #1
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800845e:	697b      	ldr	r3, [r7, #20]
}
 8008460:	4618      	mov	r0, r3
 8008462:	3718      	adds	r7, #24
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008476:	2b00      	cmp	r3, #0
 8008478:	d018      	beq.n	80084ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	68da      	ldr	r2, [r3, #12]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008482:	441a      	add	r2, r3
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	68da      	ldr	r2, [r3, #12]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	429a      	cmp	r2, r3
 8008492:	d303      	bcc.n	800849c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681a      	ldr	r2, [r3, #0]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	68d9      	ldr	r1, [r3, #12]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a4:	461a      	mov	r2, r3
 80084a6:	6838      	ldr	r0, [r7, #0]
 80084a8:	f011 fa09 	bl	80198be <memcpy>
	}
}
 80084ac:	bf00      	nop
 80084ae:	3708      	adds	r7, #8
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80084bc:	f001 fcb6 	bl	8009e2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084c8:	e011      	b.n	80084ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d012      	beq.n	80084f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	3324      	adds	r3, #36	; 0x24
 80084d6:	4618      	mov	r0, r3
 80084d8:	f000 fd68 	bl	8008fac <xTaskRemoveFromEventList>
 80084dc:	4603      	mov	r3, r0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d001      	beq.n	80084e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80084e2:	f000 fe6d 	bl	80091c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80084e6:	7bfb      	ldrb	r3, [r7, #15]
 80084e8:	3b01      	subs	r3, #1
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	dce9      	bgt.n	80084ca <prvUnlockQueue+0x16>
 80084f6:	e000      	b.n	80084fa <prvUnlockQueue+0x46>
					break;
 80084f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	22ff      	movs	r2, #255	; 0xff
 80084fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008502:	f001 fcc7 	bl	8009e94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008506:	f001 fc91 	bl	8009e2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008510:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008512:	e011      	b.n	8008538 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	691b      	ldr	r3, [r3, #16]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d012      	beq.n	8008542 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	3310      	adds	r3, #16
 8008520:	4618      	mov	r0, r3
 8008522:	f000 fd43 	bl	8008fac <xTaskRemoveFromEventList>
 8008526:	4603      	mov	r3, r0
 8008528:	2b00      	cmp	r3, #0
 800852a:	d001      	beq.n	8008530 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800852c:	f000 fe48 	bl	80091c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008530:	7bbb      	ldrb	r3, [r7, #14]
 8008532:	3b01      	subs	r3, #1
 8008534:	b2db      	uxtb	r3, r3
 8008536:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008538:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800853c:	2b00      	cmp	r3, #0
 800853e:	dce9      	bgt.n	8008514 <prvUnlockQueue+0x60>
 8008540:	e000      	b.n	8008544 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008542:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	22ff      	movs	r2, #255	; 0xff
 8008548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800854c:	f001 fca2 	bl	8009e94 <vPortExitCritical>
}
 8008550:	bf00      	nop
 8008552:	3710      	adds	r7, #16
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008560:	f001 fc64 	bl	8009e2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008568:	2b00      	cmp	r3, #0
 800856a:	d102      	bne.n	8008572 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800856c:	2301      	movs	r3, #1
 800856e:	60fb      	str	r3, [r7, #12]
 8008570:	e001      	b.n	8008576 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008572:	2300      	movs	r3, #0
 8008574:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008576:	f001 fc8d 	bl	8009e94 <vPortExitCritical>

	return xReturn;
 800857a:	68fb      	ldr	r3, [r7, #12]
}
 800857c:	4618      	mov	r0, r3
 800857e:	3710      	adds	r7, #16
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800858c:	f001 fc4e 	bl	8009e2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008598:	429a      	cmp	r2, r3
 800859a:	d102      	bne.n	80085a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800859c:	2301      	movs	r3, #1
 800859e:	60fb      	str	r3, [r7, #12]
 80085a0:	e001      	b.n	80085a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80085a2:	2300      	movs	r3, #0
 80085a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80085a6:	f001 fc75 	bl	8009e94 <vPortExitCritical>

	return xReturn;
 80085aa:	68fb      	ldr	r3, [r7, #12]
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3710      	adds	r7, #16
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80085b4:	b480      	push	{r7}
 80085b6:	b085      	sub	sp, #20
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80085be:	2300      	movs	r3, #0
 80085c0:	60fb      	str	r3, [r7, #12]
 80085c2:	e014      	b.n	80085ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80085c4:	4a0f      	ldr	r2, [pc, #60]	; (8008604 <vQueueAddToRegistry+0x50>)
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d10b      	bne.n	80085e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80085d0:	490c      	ldr	r1, [pc, #48]	; (8008604 <vQueueAddToRegistry+0x50>)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	683a      	ldr	r2, [r7, #0]
 80085d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80085da:	4a0a      	ldr	r2, [pc, #40]	; (8008604 <vQueueAddToRegistry+0x50>)
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	00db      	lsls	r3, r3, #3
 80085e0:	4413      	add	r3, r2
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80085e6:	e006      	b.n	80085f6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	3301      	adds	r3, #1
 80085ec:	60fb      	str	r3, [r7, #12]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2b07      	cmp	r3, #7
 80085f2:	d9e7      	bls.n	80085c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80085f4:	bf00      	nop
 80085f6:	bf00      	nop
 80085f8:	3714      	adds	r7, #20
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr
 8008602:	bf00      	nop
 8008604:	200076a8 	.word	0x200076a8

08008608 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008608:	b580      	push	{r7, lr}
 800860a:	b086      	sub	sp, #24
 800860c:	af00      	add	r7, sp, #0
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	60b9      	str	r1, [r7, #8]
 8008612:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008618:	f001 fc08 	bl	8009e2c <vPortEnterCritical>
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008622:	b25b      	sxtb	r3, r3
 8008624:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008628:	d103      	bne.n	8008632 <vQueueWaitForMessageRestricted+0x2a>
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	2200      	movs	r2, #0
 800862e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008638:	b25b      	sxtb	r3, r3
 800863a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800863e:	d103      	bne.n	8008648 <vQueueWaitForMessageRestricted+0x40>
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	2200      	movs	r2, #0
 8008644:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008648:	f001 fc24 	bl	8009e94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008650:	2b00      	cmp	r3, #0
 8008652:	d106      	bne.n	8008662 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	3324      	adds	r3, #36	; 0x24
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	68b9      	ldr	r1, [r7, #8]
 800865c:	4618      	mov	r0, r3
 800865e:	f000 fc77 	bl	8008f50 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008662:	6978      	ldr	r0, [r7, #20]
 8008664:	f7ff ff26 	bl	80084b4 <prvUnlockQueue>
	}
 8008668:	bf00      	nop
 800866a:	3718      	adds	r7, #24
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008670:	b580      	push	{r7, lr}
 8008672:	b08e      	sub	sp, #56	; 0x38
 8008674:	af04      	add	r7, sp, #16
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	607a      	str	r2, [r7, #4]
 800867c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800867e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008680:	2b00      	cmp	r3, #0
 8008682:	d10c      	bne.n	800869e <xTaskCreateStatic+0x2e>
	__asm volatile
 8008684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008688:	b672      	cpsid	i
 800868a:	f383 8811 	msr	BASEPRI, r3
 800868e:	f3bf 8f6f 	isb	sy
 8008692:	f3bf 8f4f 	dsb	sy
 8008696:	b662      	cpsie	i
 8008698:	623b      	str	r3, [r7, #32]
}
 800869a:	bf00      	nop
 800869c:	e7fe      	b.n	800869c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800869e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d10c      	bne.n	80086be <xTaskCreateStatic+0x4e>
	__asm volatile
 80086a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a8:	b672      	cpsid	i
 80086aa:	f383 8811 	msr	BASEPRI, r3
 80086ae:	f3bf 8f6f 	isb	sy
 80086b2:	f3bf 8f4f 	dsb	sy
 80086b6:	b662      	cpsie	i
 80086b8:	61fb      	str	r3, [r7, #28]
}
 80086ba:	bf00      	nop
 80086bc:	e7fe      	b.n	80086bc <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80086be:	23a8      	movs	r3, #168	; 0xa8
 80086c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	2ba8      	cmp	r3, #168	; 0xa8
 80086c6:	d00c      	beq.n	80086e2 <xTaskCreateStatic+0x72>
	__asm volatile
 80086c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086cc:	b672      	cpsid	i
 80086ce:	f383 8811 	msr	BASEPRI, r3
 80086d2:	f3bf 8f6f 	isb	sy
 80086d6:	f3bf 8f4f 	dsb	sy
 80086da:	b662      	cpsie	i
 80086dc:	61bb      	str	r3, [r7, #24]
}
 80086de:	bf00      	nop
 80086e0:	e7fe      	b.n	80086e0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80086e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80086e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d01e      	beq.n	8008728 <xTaskCreateStatic+0xb8>
 80086ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d01b      	beq.n	8008728 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80086f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80086f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80086fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fc:	2202      	movs	r2, #2
 80086fe:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008702:	2300      	movs	r3, #0
 8008704:	9303      	str	r3, [sp, #12]
 8008706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008708:	9302      	str	r3, [sp, #8]
 800870a:	f107 0314 	add.w	r3, r7, #20
 800870e:	9301      	str	r3, [sp, #4]
 8008710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008712:	9300      	str	r3, [sp, #0]
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	68b9      	ldr	r1, [r7, #8]
 800871a:	68f8      	ldr	r0, [r7, #12]
 800871c:	f000 f850 	bl	80087c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008720:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008722:	f000 f8f5 	bl	8008910 <prvAddNewTaskToReadyList>
 8008726:	e001      	b.n	800872c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8008728:	2300      	movs	r3, #0
 800872a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800872c:	697b      	ldr	r3, [r7, #20]
	}
 800872e:	4618      	mov	r0, r3
 8008730:	3728      	adds	r7, #40	; 0x28
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008736:	b580      	push	{r7, lr}
 8008738:	b08c      	sub	sp, #48	; 0x30
 800873a:	af04      	add	r7, sp, #16
 800873c:	60f8      	str	r0, [r7, #12]
 800873e:	60b9      	str	r1, [r7, #8]
 8008740:	603b      	str	r3, [r7, #0]
 8008742:	4613      	mov	r3, r2
 8008744:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008746:	88fb      	ldrh	r3, [r7, #6]
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	4618      	mov	r0, r3
 800874c:	f001 fc9a 	bl	800a084 <pvPortMalloc>
 8008750:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d00e      	beq.n	8008776 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008758:	20a8      	movs	r0, #168	; 0xa8
 800875a:	f001 fc93 	bl	800a084 <pvPortMalloc>
 800875e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008760:	69fb      	ldr	r3, [r7, #28]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d003      	beq.n	800876e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	697a      	ldr	r2, [r7, #20]
 800876a:	631a      	str	r2, [r3, #48]	; 0x30
 800876c:	e005      	b.n	800877a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800876e:	6978      	ldr	r0, [r7, #20]
 8008770:	f001 fd52 	bl	800a218 <vPortFree>
 8008774:	e001      	b.n	800877a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008776:	2300      	movs	r3, #0
 8008778:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800877a:	69fb      	ldr	r3, [r7, #28]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d017      	beq.n	80087b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	2200      	movs	r2, #0
 8008784:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008788:	88fa      	ldrh	r2, [r7, #6]
 800878a:	2300      	movs	r3, #0
 800878c:	9303      	str	r3, [sp, #12]
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	9302      	str	r3, [sp, #8]
 8008792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008794:	9301      	str	r3, [sp, #4]
 8008796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008798:	9300      	str	r3, [sp, #0]
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	68b9      	ldr	r1, [r7, #8]
 800879e:	68f8      	ldr	r0, [r7, #12]
 80087a0:	f000 f80e 	bl	80087c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087a4:	69f8      	ldr	r0, [r7, #28]
 80087a6:	f000 f8b3 	bl	8008910 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80087aa:	2301      	movs	r3, #1
 80087ac:	61bb      	str	r3, [r7, #24]
 80087ae:	e002      	b.n	80087b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80087b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80087b6:	69bb      	ldr	r3, [r7, #24]
	}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3720      	adds	r7, #32
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b088      	sub	sp, #32
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	60b9      	str	r1, [r7, #8]
 80087ca:	607a      	str	r2, [r7, #4]
 80087cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80087ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	461a      	mov	r2, r3
 80087d8:	21a5      	movs	r1, #165	; 0xa5
 80087da:	f010 fefb 	bl	80195d4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80087de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087e2:	6879      	ldr	r1, [r7, #4]
 80087e4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80087e8:	440b      	add	r3, r1
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	4413      	add	r3, r2
 80087ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	f023 0307 	bic.w	r3, r3, #7
 80087f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80087f8:	69bb      	ldr	r3, [r7, #24]
 80087fa:	f003 0307 	and.w	r3, r3, #7
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00c      	beq.n	800881c <prvInitialiseNewTask+0x5c>
	__asm volatile
 8008802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008806:	b672      	cpsid	i
 8008808:	f383 8811 	msr	BASEPRI, r3
 800880c:	f3bf 8f6f 	isb	sy
 8008810:	f3bf 8f4f 	dsb	sy
 8008814:	b662      	cpsie	i
 8008816:	617b      	str	r3, [r7, #20]
}
 8008818:	bf00      	nop
 800881a:	e7fe      	b.n	800881a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d01f      	beq.n	8008862 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008822:	2300      	movs	r3, #0
 8008824:	61fb      	str	r3, [r7, #28]
 8008826:	e012      	b.n	800884e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008828:	68ba      	ldr	r2, [r7, #8]
 800882a:	69fb      	ldr	r3, [r7, #28]
 800882c:	4413      	add	r3, r2
 800882e:	7819      	ldrb	r1, [r3, #0]
 8008830:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008832:	69fb      	ldr	r3, [r7, #28]
 8008834:	4413      	add	r3, r2
 8008836:	3334      	adds	r3, #52	; 0x34
 8008838:	460a      	mov	r2, r1
 800883a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800883c:	68ba      	ldr	r2, [r7, #8]
 800883e:	69fb      	ldr	r3, [r7, #28]
 8008840:	4413      	add	r3, r2
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d006      	beq.n	8008856 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	3301      	adds	r3, #1
 800884c:	61fb      	str	r3, [r7, #28]
 800884e:	69fb      	ldr	r3, [r7, #28]
 8008850:	2b0f      	cmp	r3, #15
 8008852:	d9e9      	bls.n	8008828 <prvInitialiseNewTask+0x68>
 8008854:	e000      	b.n	8008858 <prvInitialiseNewTask+0x98>
			{
				break;
 8008856:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800885a:	2200      	movs	r2, #0
 800885c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008860:	e003      	b.n	800886a <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008864:	2200      	movs	r2, #0
 8008866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800886a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800886c:	2b37      	cmp	r3, #55	; 0x37
 800886e:	d901      	bls.n	8008874 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008870:	2337      	movs	r3, #55	; 0x37
 8008872:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008876:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008878:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800887a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800887c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800887e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008882:	2200      	movs	r2, #0
 8008884:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008888:	3304      	adds	r3, #4
 800888a:	4618      	mov	r0, r3
 800888c:	f7ff f952 	bl	8007b34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008892:	3318      	adds	r3, #24
 8008894:	4618      	mov	r0, r3
 8008896:	f7ff f94d 	bl	8007b34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800889a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800889c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800889e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80088a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80088aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80088b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b2:	2200      	movs	r2, #0
 80088b4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80088b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ba:	2200      	movs	r2, #0
 80088bc:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80088c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c2:	3354      	adds	r3, #84	; 0x54
 80088c4:	224c      	movs	r2, #76	; 0x4c
 80088c6:	2100      	movs	r1, #0
 80088c8:	4618      	mov	r0, r3
 80088ca:	f010 fe83 	bl	80195d4 <memset>
 80088ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d0:	4a0c      	ldr	r2, [pc, #48]	; (8008904 <prvInitialiseNewTask+0x144>)
 80088d2:	659a      	str	r2, [r3, #88]	; 0x58
 80088d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d6:	4a0c      	ldr	r2, [pc, #48]	; (8008908 <prvInitialiseNewTask+0x148>)
 80088d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80088da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088dc:	4a0b      	ldr	r2, [pc, #44]	; (800890c <prvInitialiseNewTask+0x14c>)
 80088de:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80088e0:	683a      	ldr	r2, [r7, #0]
 80088e2:	68f9      	ldr	r1, [r7, #12]
 80088e4:	69b8      	ldr	r0, [r7, #24]
 80088e6:	f001 f993 	bl	8009c10 <pxPortInitialiseStack>
 80088ea:	4602      	mov	r2, r0
 80088ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80088f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d002      	beq.n	80088fc <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80088f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088fc:	bf00      	nop
 80088fe:	3720      	adds	r7, #32
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}
 8008904:	200109ec 	.word	0x200109ec
 8008908:	20010a54 	.word	0x20010a54
 800890c:	20010abc 	.word	0x20010abc

08008910 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008918:	f001 fa88 	bl	8009e2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800891c:	4b2d      	ldr	r3, [pc, #180]	; (80089d4 <prvAddNewTaskToReadyList+0xc4>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	3301      	adds	r3, #1
 8008922:	4a2c      	ldr	r2, [pc, #176]	; (80089d4 <prvAddNewTaskToReadyList+0xc4>)
 8008924:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008926:	4b2c      	ldr	r3, [pc, #176]	; (80089d8 <prvAddNewTaskToReadyList+0xc8>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d109      	bne.n	8008942 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800892e:	4a2a      	ldr	r2, [pc, #168]	; (80089d8 <prvAddNewTaskToReadyList+0xc8>)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008934:	4b27      	ldr	r3, [pc, #156]	; (80089d4 <prvAddNewTaskToReadyList+0xc4>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	2b01      	cmp	r3, #1
 800893a:	d110      	bne.n	800895e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800893c:	f000 fc64 	bl	8009208 <prvInitialiseTaskLists>
 8008940:	e00d      	b.n	800895e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008942:	4b26      	ldr	r3, [pc, #152]	; (80089dc <prvAddNewTaskToReadyList+0xcc>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d109      	bne.n	800895e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800894a:	4b23      	ldr	r3, [pc, #140]	; (80089d8 <prvAddNewTaskToReadyList+0xc8>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008954:	429a      	cmp	r2, r3
 8008956:	d802      	bhi.n	800895e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008958:	4a1f      	ldr	r2, [pc, #124]	; (80089d8 <prvAddNewTaskToReadyList+0xc8>)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800895e:	4b20      	ldr	r3, [pc, #128]	; (80089e0 <prvAddNewTaskToReadyList+0xd0>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	3301      	adds	r3, #1
 8008964:	4a1e      	ldr	r2, [pc, #120]	; (80089e0 <prvAddNewTaskToReadyList+0xd0>)
 8008966:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008968:	4b1d      	ldr	r3, [pc, #116]	; (80089e0 <prvAddNewTaskToReadyList+0xd0>)
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008974:	4b1b      	ldr	r3, [pc, #108]	; (80089e4 <prvAddNewTaskToReadyList+0xd4>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	429a      	cmp	r2, r3
 800897a:	d903      	bls.n	8008984 <prvAddNewTaskToReadyList+0x74>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008980:	4a18      	ldr	r2, [pc, #96]	; (80089e4 <prvAddNewTaskToReadyList+0xd4>)
 8008982:	6013      	str	r3, [r2, #0]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008988:	4613      	mov	r3, r2
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	4413      	add	r3, r2
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	4a15      	ldr	r2, [pc, #84]	; (80089e8 <prvAddNewTaskToReadyList+0xd8>)
 8008992:	441a      	add	r2, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	3304      	adds	r3, #4
 8008998:	4619      	mov	r1, r3
 800899a:	4610      	mov	r0, r2
 800899c:	f7ff f8d7 	bl	8007b4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80089a0:	f001 fa78 	bl	8009e94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80089a4:	4b0d      	ldr	r3, [pc, #52]	; (80089dc <prvAddNewTaskToReadyList+0xcc>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d00e      	beq.n	80089ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80089ac:	4b0a      	ldr	r3, [pc, #40]	; (80089d8 <prvAddNewTaskToReadyList+0xc8>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d207      	bcs.n	80089ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80089ba:	4b0c      	ldr	r3, [pc, #48]	; (80089ec <prvAddNewTaskToReadyList+0xdc>)
 80089bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089c0:	601a      	str	r2, [r3, #0]
 80089c2:	f3bf 8f4f 	dsb	sy
 80089c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089ca:	bf00      	nop
 80089cc:	3708      	adds	r7, #8
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	20007bbc 	.word	0x20007bbc
 80089d8:	200076e8 	.word	0x200076e8
 80089dc:	20007bc8 	.word	0x20007bc8
 80089e0:	20007bd8 	.word	0x20007bd8
 80089e4:	20007bc4 	.word	0x20007bc4
 80089e8:	200076ec 	.word	0x200076ec
 80089ec:	e000ed04 	.word	0xe000ed04

080089f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80089f8:	2300      	movs	r3, #0
 80089fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d019      	beq.n	8008a36 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008a02:	4b14      	ldr	r3, [pc, #80]	; (8008a54 <vTaskDelay+0x64>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d00c      	beq.n	8008a24 <vTaskDelay+0x34>
	__asm volatile
 8008a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0e:	b672      	cpsid	i
 8008a10:	f383 8811 	msr	BASEPRI, r3
 8008a14:	f3bf 8f6f 	isb	sy
 8008a18:	f3bf 8f4f 	dsb	sy
 8008a1c:	b662      	cpsie	i
 8008a1e:	60bb      	str	r3, [r7, #8]
}
 8008a20:	bf00      	nop
 8008a22:	e7fe      	b.n	8008a22 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008a24:	f000 f88e 	bl	8008b44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008a28:	2100      	movs	r1, #0
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 fd40 	bl	80094b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008a30:	f000 f896 	bl	8008b60 <xTaskResumeAll>
 8008a34:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d107      	bne.n	8008a4c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8008a3c:	4b06      	ldr	r3, [pc, #24]	; (8008a58 <vTaskDelay+0x68>)
 8008a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a42:	601a      	str	r2, [r3, #0]
 8008a44:	f3bf 8f4f 	dsb	sy
 8008a48:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a4c:	bf00      	nop
 8008a4e:	3710      	adds	r7, #16
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}
 8008a54:	20007be4 	.word	0x20007be4
 8008a58:	e000ed04 	.word	0xe000ed04

08008a5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b08a      	sub	sp, #40	; 0x28
 8008a60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008a62:	2300      	movs	r3, #0
 8008a64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008a66:	2300      	movs	r3, #0
 8008a68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008a6a:	463a      	mov	r2, r7
 8008a6c:	1d39      	adds	r1, r7, #4
 8008a6e:	f107 0308 	add.w	r3, r7, #8
 8008a72:	4618      	mov	r0, r3
 8008a74:	f7ff f80a 	bl	8007a8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008a78:	6839      	ldr	r1, [r7, #0]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	68ba      	ldr	r2, [r7, #8]
 8008a7e:	9202      	str	r2, [sp, #8]
 8008a80:	9301      	str	r3, [sp, #4]
 8008a82:	2300      	movs	r3, #0
 8008a84:	9300      	str	r3, [sp, #0]
 8008a86:	2300      	movs	r3, #0
 8008a88:	460a      	mov	r2, r1
 8008a8a:	4926      	ldr	r1, [pc, #152]	; (8008b24 <vTaskStartScheduler+0xc8>)
 8008a8c:	4826      	ldr	r0, [pc, #152]	; (8008b28 <vTaskStartScheduler+0xcc>)
 8008a8e:	f7ff fdef 	bl	8008670 <xTaskCreateStatic>
 8008a92:	4603      	mov	r3, r0
 8008a94:	4a25      	ldr	r2, [pc, #148]	; (8008b2c <vTaskStartScheduler+0xd0>)
 8008a96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008a98:	4b24      	ldr	r3, [pc, #144]	; (8008b2c <vTaskStartScheduler+0xd0>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d002      	beq.n	8008aa6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	617b      	str	r3, [r7, #20]
 8008aa4:	e001      	b.n	8008aaa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d102      	bne.n	8008ab6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008ab0:	f000 fd52 	bl	8009558 <xTimerCreateTimerTask>
 8008ab4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d11d      	bne.n	8008af8 <vTaskStartScheduler+0x9c>
	__asm volatile
 8008abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac0:	b672      	cpsid	i
 8008ac2:	f383 8811 	msr	BASEPRI, r3
 8008ac6:	f3bf 8f6f 	isb	sy
 8008aca:	f3bf 8f4f 	dsb	sy
 8008ace:	b662      	cpsie	i
 8008ad0:	613b      	str	r3, [r7, #16]
}
 8008ad2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ad4:	4b16      	ldr	r3, [pc, #88]	; (8008b30 <vTaskStartScheduler+0xd4>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	3354      	adds	r3, #84	; 0x54
 8008ada:	4a16      	ldr	r2, [pc, #88]	; (8008b34 <vTaskStartScheduler+0xd8>)
 8008adc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008ade:	4b16      	ldr	r3, [pc, #88]	; (8008b38 <vTaskStartScheduler+0xdc>)
 8008ae0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ae4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008ae6:	4b15      	ldr	r3, [pc, #84]	; (8008b3c <vTaskStartScheduler+0xe0>)
 8008ae8:	2201      	movs	r2, #1
 8008aea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008aec:	4b14      	ldr	r3, [pc, #80]	; (8008b40 <vTaskStartScheduler+0xe4>)
 8008aee:	2200      	movs	r2, #0
 8008af0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008af2:	f001 f91d 	bl	8009d30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008af6:	e010      	b.n	8008b1a <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008afe:	d10c      	bne.n	8008b1a <vTaskStartScheduler+0xbe>
	__asm volatile
 8008b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b04:	b672      	cpsid	i
 8008b06:	f383 8811 	msr	BASEPRI, r3
 8008b0a:	f3bf 8f6f 	isb	sy
 8008b0e:	f3bf 8f4f 	dsb	sy
 8008b12:	b662      	cpsie	i
 8008b14:	60fb      	str	r3, [r7, #12]
}
 8008b16:	bf00      	nop
 8008b18:	e7fe      	b.n	8008b18 <vTaskStartScheduler+0xbc>
}
 8008b1a:	bf00      	nop
 8008b1c:	3718      	adds	r7, #24
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	0801a630 	.word	0x0801a630
 8008b28:	080091d9 	.word	0x080091d9
 8008b2c:	20007be0 	.word	0x20007be0
 8008b30:	200076e8 	.word	0x200076e8
 8008b34:	20002138 	.word	0x20002138
 8008b38:	20007bdc 	.word	0x20007bdc
 8008b3c:	20007bc8 	.word	0x20007bc8
 8008b40:	20007bc0 	.word	0x20007bc0

08008b44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008b44:	b480      	push	{r7}
 8008b46:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008b48:	4b04      	ldr	r3, [pc, #16]	; (8008b5c <vTaskSuspendAll+0x18>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	4a03      	ldr	r2, [pc, #12]	; (8008b5c <vTaskSuspendAll+0x18>)
 8008b50:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008b52:	bf00      	nop
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr
 8008b5c:	20007be4 	.word	0x20007be4

08008b60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008b66:	2300      	movs	r3, #0
 8008b68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008b6e:	4b43      	ldr	r3, [pc, #268]	; (8008c7c <xTaskResumeAll+0x11c>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d10c      	bne.n	8008b90 <xTaskResumeAll+0x30>
	__asm volatile
 8008b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7a:	b672      	cpsid	i
 8008b7c:	f383 8811 	msr	BASEPRI, r3
 8008b80:	f3bf 8f6f 	isb	sy
 8008b84:	f3bf 8f4f 	dsb	sy
 8008b88:	b662      	cpsie	i
 8008b8a:	603b      	str	r3, [r7, #0]
}
 8008b8c:	bf00      	nop
 8008b8e:	e7fe      	b.n	8008b8e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008b90:	f001 f94c 	bl	8009e2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008b94:	4b39      	ldr	r3, [pc, #228]	; (8008c7c <xTaskResumeAll+0x11c>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	3b01      	subs	r3, #1
 8008b9a:	4a38      	ldr	r2, [pc, #224]	; (8008c7c <xTaskResumeAll+0x11c>)
 8008b9c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b9e:	4b37      	ldr	r3, [pc, #220]	; (8008c7c <xTaskResumeAll+0x11c>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d162      	bne.n	8008c6c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008ba6:	4b36      	ldr	r3, [pc, #216]	; (8008c80 <xTaskResumeAll+0x120>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d05e      	beq.n	8008c6c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008bae:	e02f      	b.n	8008c10 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bb0:	4b34      	ldr	r3, [pc, #208]	; (8008c84 <xTaskResumeAll+0x124>)
 8008bb2:	68db      	ldr	r3, [r3, #12]
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	3318      	adds	r3, #24
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7ff f823 	bl	8007c08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	3304      	adds	r3, #4
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7ff f81e 	bl	8007c08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bd0:	4b2d      	ldr	r3, [pc, #180]	; (8008c88 <xTaskResumeAll+0x128>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d903      	bls.n	8008be0 <xTaskResumeAll+0x80>
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bdc:	4a2a      	ldr	r2, [pc, #168]	; (8008c88 <xTaskResumeAll+0x128>)
 8008bde:	6013      	str	r3, [r2, #0]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008be4:	4613      	mov	r3, r2
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	4413      	add	r3, r2
 8008bea:	009b      	lsls	r3, r3, #2
 8008bec:	4a27      	ldr	r2, [pc, #156]	; (8008c8c <xTaskResumeAll+0x12c>)
 8008bee:	441a      	add	r2, r3
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	3304      	adds	r3, #4
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	4610      	mov	r0, r2
 8008bf8:	f7fe ffa9 	bl	8007b4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c00:	4b23      	ldr	r3, [pc, #140]	; (8008c90 <xTaskResumeAll+0x130>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d302      	bcc.n	8008c10 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8008c0a:	4b22      	ldr	r3, [pc, #136]	; (8008c94 <xTaskResumeAll+0x134>)
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c10:	4b1c      	ldr	r3, [pc, #112]	; (8008c84 <xTaskResumeAll+0x124>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d1cb      	bne.n	8008bb0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d001      	beq.n	8008c22 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008c1e:	f000 fb97 	bl	8009350 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008c22:	4b1d      	ldr	r3, [pc, #116]	; (8008c98 <xTaskResumeAll+0x138>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d010      	beq.n	8008c50 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008c2e:	f000 f847 	bl	8008cc0 <xTaskIncrementTick>
 8008c32:	4603      	mov	r3, r0
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d002      	beq.n	8008c3e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8008c38:	4b16      	ldr	r3, [pc, #88]	; (8008c94 <xTaskResumeAll+0x134>)
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	3b01      	subs	r3, #1
 8008c42:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d1f1      	bne.n	8008c2e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8008c4a:	4b13      	ldr	r3, [pc, #76]	; (8008c98 <xTaskResumeAll+0x138>)
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008c50:	4b10      	ldr	r3, [pc, #64]	; (8008c94 <xTaskResumeAll+0x134>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d009      	beq.n	8008c6c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008c5c:	4b0f      	ldr	r3, [pc, #60]	; (8008c9c <xTaskResumeAll+0x13c>)
 8008c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c62:	601a      	str	r2, [r3, #0]
 8008c64:	f3bf 8f4f 	dsb	sy
 8008c68:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c6c:	f001 f912 	bl	8009e94 <vPortExitCritical>

	return xAlreadyYielded;
 8008c70:	68bb      	ldr	r3, [r7, #8]
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3710      	adds	r7, #16
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	20007be4 	.word	0x20007be4
 8008c80:	20007bbc 	.word	0x20007bbc
 8008c84:	20007b7c 	.word	0x20007b7c
 8008c88:	20007bc4 	.word	0x20007bc4
 8008c8c:	200076ec 	.word	0x200076ec
 8008c90:	200076e8 	.word	0x200076e8
 8008c94:	20007bd0 	.word	0x20007bd0
 8008c98:	20007bcc 	.word	0x20007bcc
 8008c9c:	e000ed04 	.word	0xe000ed04

08008ca0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008ca6:	4b05      	ldr	r3, [pc, #20]	; (8008cbc <xTaskGetTickCount+0x1c>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008cac:	687b      	ldr	r3, [r7, #4]
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	370c      	adds	r7, #12
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop
 8008cbc:	20007bc0 	.word	0x20007bc0

08008cc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b086      	sub	sp, #24
 8008cc4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cca:	4b50      	ldr	r3, [pc, #320]	; (8008e0c <xTaskIncrementTick+0x14c>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	f040 808b 	bne.w	8008dea <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008cd4:	4b4e      	ldr	r3, [pc, #312]	; (8008e10 <xTaskIncrementTick+0x150>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	3301      	adds	r3, #1
 8008cda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008cdc:	4a4c      	ldr	r2, [pc, #304]	; (8008e10 <xTaskIncrementTick+0x150>)
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d122      	bne.n	8008d2e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008ce8:	4b4a      	ldr	r3, [pc, #296]	; (8008e14 <xTaskIncrementTick+0x154>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d00c      	beq.n	8008d0c <xTaskIncrementTick+0x4c>
	__asm volatile
 8008cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf6:	b672      	cpsid	i
 8008cf8:	f383 8811 	msr	BASEPRI, r3
 8008cfc:	f3bf 8f6f 	isb	sy
 8008d00:	f3bf 8f4f 	dsb	sy
 8008d04:	b662      	cpsie	i
 8008d06:	603b      	str	r3, [r7, #0]
}
 8008d08:	bf00      	nop
 8008d0a:	e7fe      	b.n	8008d0a <xTaskIncrementTick+0x4a>
 8008d0c:	4b41      	ldr	r3, [pc, #260]	; (8008e14 <xTaskIncrementTick+0x154>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	60fb      	str	r3, [r7, #12]
 8008d12:	4b41      	ldr	r3, [pc, #260]	; (8008e18 <xTaskIncrementTick+0x158>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a3f      	ldr	r2, [pc, #252]	; (8008e14 <xTaskIncrementTick+0x154>)
 8008d18:	6013      	str	r3, [r2, #0]
 8008d1a:	4a3f      	ldr	r2, [pc, #252]	; (8008e18 <xTaskIncrementTick+0x158>)
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6013      	str	r3, [r2, #0]
 8008d20:	4b3e      	ldr	r3, [pc, #248]	; (8008e1c <xTaskIncrementTick+0x15c>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	3301      	adds	r3, #1
 8008d26:	4a3d      	ldr	r2, [pc, #244]	; (8008e1c <xTaskIncrementTick+0x15c>)
 8008d28:	6013      	str	r3, [r2, #0]
 8008d2a:	f000 fb11 	bl	8009350 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008d2e:	4b3c      	ldr	r3, [pc, #240]	; (8008e20 <xTaskIncrementTick+0x160>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	693a      	ldr	r2, [r7, #16]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d349      	bcc.n	8008dcc <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d38:	4b36      	ldr	r3, [pc, #216]	; (8008e14 <xTaskIncrementTick+0x154>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d104      	bne.n	8008d4c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d42:	4b37      	ldr	r3, [pc, #220]	; (8008e20 <xTaskIncrementTick+0x160>)
 8008d44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d48:	601a      	str	r2, [r3, #0]
					break;
 8008d4a:	e03f      	b.n	8008dcc <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d4c:	4b31      	ldr	r3, [pc, #196]	; (8008e14 <xTaskIncrementTick+0x154>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	68db      	ldr	r3, [r3, #12]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008d5c:	693a      	ldr	r2, [r7, #16]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d203      	bcs.n	8008d6c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008d64:	4a2e      	ldr	r2, [pc, #184]	; (8008e20 <xTaskIncrementTick+0x160>)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008d6a:	e02f      	b.n	8008dcc <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	3304      	adds	r3, #4
 8008d70:	4618      	mov	r0, r3
 8008d72:	f7fe ff49 	bl	8007c08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d004      	beq.n	8008d88 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	3318      	adds	r3, #24
 8008d82:	4618      	mov	r0, r3
 8008d84:	f7fe ff40 	bl	8007c08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d8c:	4b25      	ldr	r3, [pc, #148]	; (8008e24 <xTaskIncrementTick+0x164>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d903      	bls.n	8008d9c <xTaskIncrementTick+0xdc>
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d98:	4a22      	ldr	r2, [pc, #136]	; (8008e24 <xTaskIncrementTick+0x164>)
 8008d9a:	6013      	str	r3, [r2, #0]
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008da0:	4613      	mov	r3, r2
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	4413      	add	r3, r2
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	4a1f      	ldr	r2, [pc, #124]	; (8008e28 <xTaskIncrementTick+0x168>)
 8008daa:	441a      	add	r2, r3
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	3304      	adds	r3, #4
 8008db0:	4619      	mov	r1, r3
 8008db2:	4610      	mov	r0, r2
 8008db4:	f7fe fecb 	bl	8007b4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dbc:	4b1b      	ldr	r3, [pc, #108]	; (8008e2c <xTaskIncrementTick+0x16c>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d3b8      	bcc.n	8008d38 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008dca:	e7b5      	b.n	8008d38 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008dcc:	4b17      	ldr	r3, [pc, #92]	; (8008e2c <xTaskIncrementTick+0x16c>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dd2:	4915      	ldr	r1, [pc, #84]	; (8008e28 <xTaskIncrementTick+0x168>)
 8008dd4:	4613      	mov	r3, r2
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	4413      	add	r3, r2
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	440b      	add	r3, r1
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d907      	bls.n	8008df4 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8008de4:	2301      	movs	r3, #1
 8008de6:	617b      	str	r3, [r7, #20]
 8008de8:	e004      	b.n	8008df4 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008dea:	4b11      	ldr	r3, [pc, #68]	; (8008e30 <xTaskIncrementTick+0x170>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	3301      	adds	r3, #1
 8008df0:	4a0f      	ldr	r2, [pc, #60]	; (8008e30 <xTaskIncrementTick+0x170>)
 8008df2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008df4:	4b0f      	ldr	r3, [pc, #60]	; (8008e34 <xTaskIncrementTick+0x174>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d001      	beq.n	8008e00 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008e00:	697b      	ldr	r3, [r7, #20]
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3718      	adds	r7, #24
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop
 8008e0c:	20007be4 	.word	0x20007be4
 8008e10:	20007bc0 	.word	0x20007bc0
 8008e14:	20007b74 	.word	0x20007b74
 8008e18:	20007b78 	.word	0x20007b78
 8008e1c:	20007bd4 	.word	0x20007bd4
 8008e20:	20007bdc 	.word	0x20007bdc
 8008e24:	20007bc4 	.word	0x20007bc4
 8008e28:	200076ec 	.word	0x200076ec
 8008e2c:	200076e8 	.word	0x200076e8
 8008e30:	20007bcc 	.word	0x20007bcc
 8008e34:	20007bd0 	.word	0x20007bd0

08008e38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008e3e:	4b2b      	ldr	r3, [pc, #172]	; (8008eec <vTaskSwitchContext+0xb4>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d003      	beq.n	8008e4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008e46:	4b2a      	ldr	r3, [pc, #168]	; (8008ef0 <vTaskSwitchContext+0xb8>)
 8008e48:	2201      	movs	r2, #1
 8008e4a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008e4c:	e048      	b.n	8008ee0 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8008e4e:	4b28      	ldr	r3, [pc, #160]	; (8008ef0 <vTaskSwitchContext+0xb8>)
 8008e50:	2200      	movs	r2, #0
 8008e52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e54:	4b27      	ldr	r3, [pc, #156]	; (8008ef4 <vTaskSwitchContext+0xbc>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	60fb      	str	r3, [r7, #12]
 8008e5a:	e012      	b.n	8008e82 <vTaskSwitchContext+0x4a>
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d10c      	bne.n	8008e7c <vTaskSwitchContext+0x44>
	__asm volatile
 8008e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e66:	b672      	cpsid	i
 8008e68:	f383 8811 	msr	BASEPRI, r3
 8008e6c:	f3bf 8f6f 	isb	sy
 8008e70:	f3bf 8f4f 	dsb	sy
 8008e74:	b662      	cpsie	i
 8008e76:	607b      	str	r3, [r7, #4]
}
 8008e78:	bf00      	nop
 8008e7a:	e7fe      	b.n	8008e7a <vTaskSwitchContext+0x42>
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	3b01      	subs	r3, #1
 8008e80:	60fb      	str	r3, [r7, #12]
 8008e82:	491d      	ldr	r1, [pc, #116]	; (8008ef8 <vTaskSwitchContext+0xc0>)
 8008e84:	68fa      	ldr	r2, [r7, #12]
 8008e86:	4613      	mov	r3, r2
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	4413      	add	r3, r2
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	440b      	add	r3, r1
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d0e2      	beq.n	8008e5c <vTaskSwitchContext+0x24>
 8008e96:	68fa      	ldr	r2, [r7, #12]
 8008e98:	4613      	mov	r3, r2
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	4413      	add	r3, r2
 8008e9e:	009b      	lsls	r3, r3, #2
 8008ea0:	4a15      	ldr	r2, [pc, #84]	; (8008ef8 <vTaskSwitchContext+0xc0>)
 8008ea2:	4413      	add	r3, r2
 8008ea4:	60bb      	str	r3, [r7, #8]
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	685a      	ldr	r2, [r3, #4]
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	605a      	str	r2, [r3, #4]
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	685a      	ldr	r2, [r3, #4]
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	3308      	adds	r3, #8
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d104      	bne.n	8008ec6 <vTaskSwitchContext+0x8e>
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	685a      	ldr	r2, [r3, #4]
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	605a      	str	r2, [r3, #4]
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	68db      	ldr	r3, [r3, #12]
 8008ecc:	4a0b      	ldr	r2, [pc, #44]	; (8008efc <vTaskSwitchContext+0xc4>)
 8008ece:	6013      	str	r3, [r2, #0]
 8008ed0:	4a08      	ldr	r2, [pc, #32]	; (8008ef4 <vTaskSwitchContext+0xbc>)
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ed6:	4b09      	ldr	r3, [pc, #36]	; (8008efc <vTaskSwitchContext+0xc4>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	3354      	adds	r3, #84	; 0x54
 8008edc:	4a08      	ldr	r2, [pc, #32]	; (8008f00 <vTaskSwitchContext+0xc8>)
 8008ede:	6013      	str	r3, [r2, #0]
}
 8008ee0:	bf00      	nop
 8008ee2:	3714      	adds	r7, #20
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr
 8008eec:	20007be4 	.word	0x20007be4
 8008ef0:	20007bd0 	.word	0x20007bd0
 8008ef4:	20007bc4 	.word	0x20007bc4
 8008ef8:	200076ec 	.word	0x200076ec
 8008efc:	200076e8 	.word	0x200076e8
 8008f00:	20002138 	.word	0x20002138

08008f04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d10c      	bne.n	8008f2e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8008f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f18:	b672      	cpsid	i
 8008f1a:	f383 8811 	msr	BASEPRI, r3
 8008f1e:	f3bf 8f6f 	isb	sy
 8008f22:	f3bf 8f4f 	dsb	sy
 8008f26:	b662      	cpsie	i
 8008f28:	60fb      	str	r3, [r7, #12]
}
 8008f2a:	bf00      	nop
 8008f2c:	e7fe      	b.n	8008f2c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f2e:	4b07      	ldr	r3, [pc, #28]	; (8008f4c <vTaskPlaceOnEventList+0x48>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	3318      	adds	r3, #24
 8008f34:	4619      	mov	r1, r3
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f7fe fe2d 	bl	8007b96 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008f3c:	2101      	movs	r1, #1
 8008f3e:	6838      	ldr	r0, [r7, #0]
 8008f40:	f000 fab6 	bl	80094b0 <prvAddCurrentTaskToDelayedList>
}
 8008f44:	bf00      	nop
 8008f46:	3710      	adds	r7, #16
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}
 8008f4c:	200076e8 	.word	0x200076e8

08008f50 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b086      	sub	sp, #24
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	60f8      	str	r0, [r7, #12]
 8008f58:	60b9      	str	r1, [r7, #8]
 8008f5a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d10c      	bne.n	8008f7c <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8008f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f66:	b672      	cpsid	i
 8008f68:	f383 8811 	msr	BASEPRI, r3
 8008f6c:	f3bf 8f6f 	isb	sy
 8008f70:	f3bf 8f4f 	dsb	sy
 8008f74:	b662      	cpsie	i
 8008f76:	617b      	str	r3, [r7, #20]
}
 8008f78:	bf00      	nop
 8008f7a:	e7fe      	b.n	8008f7a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f7c:	4b0a      	ldr	r3, [pc, #40]	; (8008fa8 <vTaskPlaceOnEventListRestricted+0x58>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	3318      	adds	r3, #24
 8008f82:	4619      	mov	r1, r3
 8008f84:	68f8      	ldr	r0, [r7, #12]
 8008f86:	f7fe fde2 	bl	8007b4e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d002      	beq.n	8008f96 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8008f90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f94:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008f96:	6879      	ldr	r1, [r7, #4]
 8008f98:	68b8      	ldr	r0, [r7, #8]
 8008f9a:	f000 fa89 	bl	80094b0 <prvAddCurrentTaskToDelayedList>
	}
 8008f9e:	bf00      	nop
 8008fa0:	3718      	adds	r7, #24
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	200076e8 	.word	0x200076e8

08008fac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b086      	sub	sp, #24
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d10c      	bne.n	8008fdc <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8008fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc6:	b672      	cpsid	i
 8008fc8:	f383 8811 	msr	BASEPRI, r3
 8008fcc:	f3bf 8f6f 	isb	sy
 8008fd0:	f3bf 8f4f 	dsb	sy
 8008fd4:	b662      	cpsie	i
 8008fd6:	60fb      	str	r3, [r7, #12]
}
 8008fd8:	bf00      	nop
 8008fda:	e7fe      	b.n	8008fda <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	3318      	adds	r3, #24
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f7fe fe11 	bl	8007c08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fe6:	4b1e      	ldr	r3, [pc, #120]	; (8009060 <xTaskRemoveFromEventList+0xb4>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d11d      	bne.n	800902a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	3304      	adds	r3, #4
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f7fe fe08 	bl	8007c08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ffc:	4b19      	ldr	r3, [pc, #100]	; (8009064 <xTaskRemoveFromEventList+0xb8>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	429a      	cmp	r2, r3
 8009002:	d903      	bls.n	800900c <xTaskRemoveFromEventList+0x60>
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009008:	4a16      	ldr	r2, [pc, #88]	; (8009064 <xTaskRemoveFromEventList+0xb8>)
 800900a:	6013      	str	r3, [r2, #0]
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009010:	4613      	mov	r3, r2
 8009012:	009b      	lsls	r3, r3, #2
 8009014:	4413      	add	r3, r2
 8009016:	009b      	lsls	r3, r3, #2
 8009018:	4a13      	ldr	r2, [pc, #76]	; (8009068 <xTaskRemoveFromEventList+0xbc>)
 800901a:	441a      	add	r2, r3
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	3304      	adds	r3, #4
 8009020:	4619      	mov	r1, r3
 8009022:	4610      	mov	r0, r2
 8009024:	f7fe fd93 	bl	8007b4e <vListInsertEnd>
 8009028:	e005      	b.n	8009036 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	3318      	adds	r3, #24
 800902e:	4619      	mov	r1, r3
 8009030:	480e      	ldr	r0, [pc, #56]	; (800906c <xTaskRemoveFromEventList+0xc0>)
 8009032:	f7fe fd8c 	bl	8007b4e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800903a:	4b0d      	ldr	r3, [pc, #52]	; (8009070 <xTaskRemoveFromEventList+0xc4>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009040:	429a      	cmp	r2, r3
 8009042:	d905      	bls.n	8009050 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009044:	2301      	movs	r3, #1
 8009046:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009048:	4b0a      	ldr	r3, [pc, #40]	; (8009074 <xTaskRemoveFromEventList+0xc8>)
 800904a:	2201      	movs	r2, #1
 800904c:	601a      	str	r2, [r3, #0]
 800904e:	e001      	b.n	8009054 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8009050:	2300      	movs	r3, #0
 8009052:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009054:	697b      	ldr	r3, [r7, #20]
}
 8009056:	4618      	mov	r0, r3
 8009058:	3718      	adds	r7, #24
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	20007be4 	.word	0x20007be4
 8009064:	20007bc4 	.word	0x20007bc4
 8009068:	200076ec 	.word	0x200076ec
 800906c:	20007b7c 	.word	0x20007b7c
 8009070:	200076e8 	.word	0x200076e8
 8009074:	20007bd0 	.word	0x20007bd0

08009078 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d10c      	bne.n	80090a0 <vTaskSetTimeOutState+0x28>
	__asm volatile
 8009086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800908a:	b672      	cpsid	i
 800908c:	f383 8811 	msr	BASEPRI, r3
 8009090:	f3bf 8f6f 	isb	sy
 8009094:	f3bf 8f4f 	dsb	sy
 8009098:	b662      	cpsie	i
 800909a:	60fb      	str	r3, [r7, #12]
}
 800909c:	bf00      	nop
 800909e:	e7fe      	b.n	800909e <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 80090a0:	f000 fec4 	bl	8009e2c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 80090a4:	4b06      	ldr	r3, [pc, #24]	; (80090c0 <vTaskSetTimeOutState+0x48>)
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 80090ac:	4b05      	ldr	r3, [pc, #20]	; (80090c4 <vTaskSetTimeOutState+0x4c>)
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 80090b4:	f000 feee 	bl	8009e94 <vPortExitCritical>
}
 80090b8:	bf00      	nop
 80090ba:	3710      	adds	r7, #16
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	20007bd4 	.word	0x20007bd4
 80090c4:	20007bc0 	.word	0x20007bc0

080090c8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80090c8:	b480      	push	{r7}
 80090ca:	b083      	sub	sp, #12
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80090d0:	4b06      	ldr	r3, [pc, #24]	; (80090ec <vTaskInternalSetTimeOutState+0x24>)
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80090d8:	4b05      	ldr	r3, [pc, #20]	; (80090f0 <vTaskInternalSetTimeOutState+0x28>)
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	605a      	str	r2, [r3, #4]
}
 80090e0:	bf00      	nop
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr
 80090ec:	20007bd4 	.word	0x20007bd4
 80090f0:	20007bc0 	.word	0x20007bc0

080090f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b088      	sub	sp, #32
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d10c      	bne.n	800911e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8009104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009108:	b672      	cpsid	i
 800910a:	f383 8811 	msr	BASEPRI, r3
 800910e:	f3bf 8f6f 	isb	sy
 8009112:	f3bf 8f4f 	dsb	sy
 8009116:	b662      	cpsie	i
 8009118:	613b      	str	r3, [r7, #16]
}
 800911a:	bf00      	nop
 800911c:	e7fe      	b.n	800911c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d10c      	bne.n	800913e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8009124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009128:	b672      	cpsid	i
 800912a:	f383 8811 	msr	BASEPRI, r3
 800912e:	f3bf 8f6f 	isb	sy
 8009132:	f3bf 8f4f 	dsb	sy
 8009136:	b662      	cpsie	i
 8009138:	60fb      	str	r3, [r7, #12]
}
 800913a:	bf00      	nop
 800913c:	e7fe      	b.n	800913c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800913e:	f000 fe75 	bl	8009e2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009142:	4b1d      	ldr	r3, [pc, #116]	; (80091b8 <xTaskCheckForTimeOut+0xc4>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	69ba      	ldr	r2, [r7, #24]
 800914e:	1ad3      	subs	r3, r2, r3
 8009150:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800915a:	d102      	bne.n	8009162 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800915c:	2300      	movs	r3, #0
 800915e:	61fb      	str	r3, [r7, #28]
 8009160:	e023      	b.n	80091aa <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681a      	ldr	r2, [r3, #0]
 8009166:	4b15      	ldr	r3, [pc, #84]	; (80091bc <xTaskCheckForTimeOut+0xc8>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	429a      	cmp	r2, r3
 800916c:	d007      	beq.n	800917e <xTaskCheckForTimeOut+0x8a>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	69ba      	ldr	r2, [r7, #24]
 8009174:	429a      	cmp	r2, r3
 8009176:	d302      	bcc.n	800917e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009178:	2301      	movs	r3, #1
 800917a:	61fb      	str	r3, [r7, #28]
 800917c:	e015      	b.n	80091aa <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	697a      	ldr	r2, [r7, #20]
 8009184:	429a      	cmp	r2, r3
 8009186:	d20b      	bcs.n	80091a0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	1ad2      	subs	r2, r2, r3
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f7ff ff97 	bl	80090c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800919a:	2300      	movs	r3, #0
 800919c:	61fb      	str	r3, [r7, #28]
 800919e:	e004      	b.n	80091aa <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	2200      	movs	r2, #0
 80091a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80091a6:	2301      	movs	r3, #1
 80091a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80091aa:	f000 fe73 	bl	8009e94 <vPortExitCritical>

	return xReturn;
 80091ae:	69fb      	ldr	r3, [r7, #28]
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3720      	adds	r7, #32
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}
 80091b8:	20007bc0 	.word	0x20007bc0
 80091bc:	20007bd4 	.word	0x20007bd4

080091c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80091c0:	b480      	push	{r7}
 80091c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80091c4:	4b03      	ldr	r3, [pc, #12]	; (80091d4 <vTaskMissedYield+0x14>)
 80091c6:	2201      	movs	r2, #1
 80091c8:	601a      	str	r2, [r3, #0]
}
 80091ca:	bf00      	nop
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr
 80091d4:	20007bd0 	.word	0x20007bd0

080091d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80091e0:	f000 f852 	bl	8009288 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80091e4:	4b06      	ldr	r3, [pc, #24]	; (8009200 <prvIdleTask+0x28>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d9f9      	bls.n	80091e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80091ec:	4b05      	ldr	r3, [pc, #20]	; (8009204 <prvIdleTask+0x2c>)
 80091ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091f2:	601a      	str	r2, [r3, #0]
 80091f4:	f3bf 8f4f 	dsb	sy
 80091f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80091fc:	e7f0      	b.n	80091e0 <prvIdleTask+0x8>
 80091fe:	bf00      	nop
 8009200:	200076ec 	.word	0x200076ec
 8009204:	e000ed04 	.word	0xe000ed04

08009208 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800920e:	2300      	movs	r3, #0
 8009210:	607b      	str	r3, [r7, #4]
 8009212:	e00c      	b.n	800922e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	4613      	mov	r3, r2
 8009218:	009b      	lsls	r3, r3, #2
 800921a:	4413      	add	r3, r2
 800921c:	009b      	lsls	r3, r3, #2
 800921e:	4a12      	ldr	r2, [pc, #72]	; (8009268 <prvInitialiseTaskLists+0x60>)
 8009220:	4413      	add	r3, r2
 8009222:	4618      	mov	r0, r3
 8009224:	f7fe fc66 	bl	8007af4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	3301      	adds	r3, #1
 800922c:	607b      	str	r3, [r7, #4]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2b37      	cmp	r3, #55	; 0x37
 8009232:	d9ef      	bls.n	8009214 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009234:	480d      	ldr	r0, [pc, #52]	; (800926c <prvInitialiseTaskLists+0x64>)
 8009236:	f7fe fc5d 	bl	8007af4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800923a:	480d      	ldr	r0, [pc, #52]	; (8009270 <prvInitialiseTaskLists+0x68>)
 800923c:	f7fe fc5a 	bl	8007af4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009240:	480c      	ldr	r0, [pc, #48]	; (8009274 <prvInitialiseTaskLists+0x6c>)
 8009242:	f7fe fc57 	bl	8007af4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009246:	480c      	ldr	r0, [pc, #48]	; (8009278 <prvInitialiseTaskLists+0x70>)
 8009248:	f7fe fc54 	bl	8007af4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800924c:	480b      	ldr	r0, [pc, #44]	; (800927c <prvInitialiseTaskLists+0x74>)
 800924e:	f7fe fc51 	bl	8007af4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009252:	4b0b      	ldr	r3, [pc, #44]	; (8009280 <prvInitialiseTaskLists+0x78>)
 8009254:	4a05      	ldr	r2, [pc, #20]	; (800926c <prvInitialiseTaskLists+0x64>)
 8009256:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009258:	4b0a      	ldr	r3, [pc, #40]	; (8009284 <prvInitialiseTaskLists+0x7c>)
 800925a:	4a05      	ldr	r2, [pc, #20]	; (8009270 <prvInitialiseTaskLists+0x68>)
 800925c:	601a      	str	r2, [r3, #0]
}
 800925e:	bf00      	nop
 8009260:	3708      	adds	r7, #8
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	200076ec 	.word	0x200076ec
 800926c:	20007b4c 	.word	0x20007b4c
 8009270:	20007b60 	.word	0x20007b60
 8009274:	20007b7c 	.word	0x20007b7c
 8009278:	20007b90 	.word	0x20007b90
 800927c:	20007ba8 	.word	0x20007ba8
 8009280:	20007b74 	.word	0x20007b74
 8009284:	20007b78 	.word	0x20007b78

08009288 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800928e:	e019      	b.n	80092c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009290:	f000 fdcc 	bl	8009e2c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009294:	4b10      	ldr	r3, [pc, #64]	; (80092d8 <prvCheckTasksWaitingTermination+0x50>)
 8009296:	68db      	ldr	r3, [r3, #12]
 8009298:	68db      	ldr	r3, [r3, #12]
 800929a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	3304      	adds	r3, #4
 80092a0:	4618      	mov	r0, r3
 80092a2:	f7fe fcb1 	bl	8007c08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80092a6:	4b0d      	ldr	r3, [pc, #52]	; (80092dc <prvCheckTasksWaitingTermination+0x54>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	3b01      	subs	r3, #1
 80092ac:	4a0b      	ldr	r2, [pc, #44]	; (80092dc <prvCheckTasksWaitingTermination+0x54>)
 80092ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80092b0:	4b0b      	ldr	r3, [pc, #44]	; (80092e0 <prvCheckTasksWaitingTermination+0x58>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	3b01      	subs	r3, #1
 80092b6:	4a0a      	ldr	r2, [pc, #40]	; (80092e0 <prvCheckTasksWaitingTermination+0x58>)
 80092b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80092ba:	f000 fdeb 	bl	8009e94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 f810 	bl	80092e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80092c4:	4b06      	ldr	r3, [pc, #24]	; (80092e0 <prvCheckTasksWaitingTermination+0x58>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d1e1      	bne.n	8009290 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80092cc:	bf00      	nop
 80092ce:	bf00      	nop
 80092d0:	3708      	adds	r7, #8
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	20007b90 	.word	0x20007b90
 80092dc:	20007bbc 	.word	0x20007bbc
 80092e0:	20007ba4 	.word	0x20007ba4

080092e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b084      	sub	sp, #16
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	3354      	adds	r3, #84	; 0x54
 80092f0:	4618      	mov	r0, r3
 80092f2:	f010 f9ff 	bl	80196f4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d108      	bne.n	8009312 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009304:	4618      	mov	r0, r3
 8009306:	f000 ff87 	bl	800a218 <vPortFree>
				vPortFree( pxTCB );
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 ff84 	bl	800a218 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009310:	e01a      	b.n	8009348 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009318:	2b01      	cmp	r3, #1
 800931a:	d103      	bne.n	8009324 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 ff7b 	bl	800a218 <vPortFree>
	}
 8009322:	e011      	b.n	8009348 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800932a:	2b02      	cmp	r3, #2
 800932c:	d00c      	beq.n	8009348 <prvDeleteTCB+0x64>
	__asm volatile
 800932e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009332:	b672      	cpsid	i
 8009334:	f383 8811 	msr	BASEPRI, r3
 8009338:	f3bf 8f6f 	isb	sy
 800933c:	f3bf 8f4f 	dsb	sy
 8009340:	b662      	cpsie	i
 8009342:	60fb      	str	r3, [r7, #12]
}
 8009344:	bf00      	nop
 8009346:	e7fe      	b.n	8009346 <prvDeleteTCB+0x62>
	}
 8009348:	bf00      	nop
 800934a:	3710      	adds	r7, #16
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009350:	b480      	push	{r7}
 8009352:	b083      	sub	sp, #12
 8009354:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009356:	4b0c      	ldr	r3, [pc, #48]	; (8009388 <prvResetNextTaskUnblockTime+0x38>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d104      	bne.n	800936a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009360:	4b0a      	ldr	r3, [pc, #40]	; (800938c <prvResetNextTaskUnblockTime+0x3c>)
 8009362:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009366:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009368:	e008      	b.n	800937c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800936a:	4b07      	ldr	r3, [pc, #28]	; (8009388 <prvResetNextTaskUnblockTime+0x38>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	68db      	ldr	r3, [r3, #12]
 8009372:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	4a04      	ldr	r2, [pc, #16]	; (800938c <prvResetNextTaskUnblockTime+0x3c>)
 800937a:	6013      	str	r3, [r2, #0]
}
 800937c:	bf00      	nop
 800937e:	370c      	adds	r7, #12
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr
 8009388:	20007b74 	.word	0x20007b74
 800938c:	20007bdc 	.word	0x20007bdc

08009390 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009396:	4b0b      	ldr	r3, [pc, #44]	; (80093c4 <xTaskGetSchedulerState+0x34>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d102      	bne.n	80093a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800939e:	2301      	movs	r3, #1
 80093a0:	607b      	str	r3, [r7, #4]
 80093a2:	e008      	b.n	80093b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093a4:	4b08      	ldr	r3, [pc, #32]	; (80093c8 <xTaskGetSchedulerState+0x38>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d102      	bne.n	80093b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80093ac:	2302      	movs	r3, #2
 80093ae:	607b      	str	r3, [r7, #4]
 80093b0:	e001      	b.n	80093b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80093b2:	2300      	movs	r3, #0
 80093b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80093b6:	687b      	ldr	r3, [r7, #4]
	}
 80093b8:	4618      	mov	r0, r3
 80093ba:	370c      	adds	r7, #12
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr
 80093c4:	20007bc8 	.word	0x20007bc8
 80093c8:	20007be4 	.word	0x20007be4

080093cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b086      	sub	sp, #24
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80093d8:	2300      	movs	r3, #0
 80093da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d05a      	beq.n	8009498 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80093e2:	4b30      	ldr	r3, [pc, #192]	; (80094a4 <xTaskPriorityDisinherit+0xd8>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	693a      	ldr	r2, [r7, #16]
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d00c      	beq.n	8009406 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80093ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f0:	b672      	cpsid	i
 80093f2:	f383 8811 	msr	BASEPRI, r3
 80093f6:	f3bf 8f6f 	isb	sy
 80093fa:	f3bf 8f4f 	dsb	sy
 80093fe:	b662      	cpsie	i
 8009400:	60fb      	str	r3, [r7, #12]
}
 8009402:	bf00      	nop
 8009404:	e7fe      	b.n	8009404 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800940a:	2b00      	cmp	r3, #0
 800940c:	d10c      	bne.n	8009428 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800940e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009412:	b672      	cpsid	i
 8009414:	f383 8811 	msr	BASEPRI, r3
 8009418:	f3bf 8f6f 	isb	sy
 800941c:	f3bf 8f4f 	dsb	sy
 8009420:	b662      	cpsie	i
 8009422:	60bb      	str	r3, [r7, #8]
}
 8009424:	bf00      	nop
 8009426:	e7fe      	b.n	8009426 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800942c:	1e5a      	subs	r2, r3, #1
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800943a:	429a      	cmp	r2, r3
 800943c:	d02c      	beq.n	8009498 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009442:	2b00      	cmp	r3, #0
 8009444:	d128      	bne.n	8009498 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	3304      	adds	r3, #4
 800944a:	4618      	mov	r0, r3
 800944c:	f7fe fbdc 	bl	8007c08 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800945c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009468:	4b0f      	ldr	r3, [pc, #60]	; (80094a8 <xTaskPriorityDisinherit+0xdc>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	429a      	cmp	r2, r3
 800946e:	d903      	bls.n	8009478 <xTaskPriorityDisinherit+0xac>
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009474:	4a0c      	ldr	r2, [pc, #48]	; (80094a8 <xTaskPriorityDisinherit+0xdc>)
 8009476:	6013      	str	r3, [r2, #0]
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800947c:	4613      	mov	r3, r2
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	4413      	add	r3, r2
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	4a09      	ldr	r2, [pc, #36]	; (80094ac <xTaskPriorityDisinherit+0xe0>)
 8009486:	441a      	add	r2, r3
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	3304      	adds	r3, #4
 800948c:	4619      	mov	r1, r3
 800948e:	4610      	mov	r0, r2
 8009490:	f7fe fb5d 	bl	8007b4e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009494:	2301      	movs	r3, #1
 8009496:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009498:	697b      	ldr	r3, [r7, #20]
	}
 800949a:	4618      	mov	r0, r3
 800949c:	3718      	adds	r7, #24
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	200076e8 	.word	0x200076e8
 80094a8:	20007bc4 	.word	0x20007bc4
 80094ac:	200076ec 	.word	0x200076ec

080094b0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b084      	sub	sp, #16
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80094ba:	4b21      	ldr	r3, [pc, #132]	; (8009540 <prvAddCurrentTaskToDelayedList+0x90>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094c0:	4b20      	ldr	r3, [pc, #128]	; (8009544 <prvAddCurrentTaskToDelayedList+0x94>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	3304      	adds	r3, #4
 80094c6:	4618      	mov	r0, r3
 80094c8:	f7fe fb9e 	bl	8007c08 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094d2:	d10a      	bne.n	80094ea <prvAddCurrentTaskToDelayedList+0x3a>
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d007      	beq.n	80094ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094da:	4b1a      	ldr	r3, [pc, #104]	; (8009544 <prvAddCurrentTaskToDelayedList+0x94>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	3304      	adds	r3, #4
 80094e0:	4619      	mov	r1, r3
 80094e2:	4819      	ldr	r0, [pc, #100]	; (8009548 <prvAddCurrentTaskToDelayedList+0x98>)
 80094e4:	f7fe fb33 	bl	8007b4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80094e8:	e026      	b.n	8009538 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80094ea:	68fa      	ldr	r2, [r7, #12]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	4413      	add	r3, r2
 80094f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80094f2:	4b14      	ldr	r3, [pc, #80]	; (8009544 <prvAddCurrentTaskToDelayedList+0x94>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	68ba      	ldr	r2, [r7, #8]
 80094f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80094fa:	68ba      	ldr	r2, [r7, #8]
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	429a      	cmp	r2, r3
 8009500:	d209      	bcs.n	8009516 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009502:	4b12      	ldr	r3, [pc, #72]	; (800954c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	4b0f      	ldr	r3, [pc, #60]	; (8009544 <prvAddCurrentTaskToDelayedList+0x94>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	3304      	adds	r3, #4
 800950c:	4619      	mov	r1, r3
 800950e:	4610      	mov	r0, r2
 8009510:	f7fe fb41 	bl	8007b96 <vListInsert>
}
 8009514:	e010      	b.n	8009538 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009516:	4b0e      	ldr	r3, [pc, #56]	; (8009550 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009518:	681a      	ldr	r2, [r3, #0]
 800951a:	4b0a      	ldr	r3, [pc, #40]	; (8009544 <prvAddCurrentTaskToDelayedList+0x94>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	3304      	adds	r3, #4
 8009520:	4619      	mov	r1, r3
 8009522:	4610      	mov	r0, r2
 8009524:	f7fe fb37 	bl	8007b96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009528:	4b0a      	ldr	r3, [pc, #40]	; (8009554 <prvAddCurrentTaskToDelayedList+0xa4>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	68ba      	ldr	r2, [r7, #8]
 800952e:	429a      	cmp	r2, r3
 8009530:	d202      	bcs.n	8009538 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009532:	4a08      	ldr	r2, [pc, #32]	; (8009554 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	6013      	str	r3, [r2, #0]
}
 8009538:	bf00      	nop
 800953a:	3710      	adds	r7, #16
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}
 8009540:	20007bc0 	.word	0x20007bc0
 8009544:	200076e8 	.word	0x200076e8
 8009548:	20007ba8 	.word	0x20007ba8
 800954c:	20007b78 	.word	0x20007b78
 8009550:	20007b74 	.word	0x20007b74
 8009554:	20007bdc 	.word	0x20007bdc

08009558 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b08a      	sub	sp, #40	; 0x28
 800955c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800955e:	2300      	movs	r3, #0
 8009560:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009562:	f000 fb15 	bl	8009b90 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009566:	4b1d      	ldr	r3, [pc, #116]	; (80095dc <xTimerCreateTimerTask+0x84>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d021      	beq.n	80095b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800956e:	2300      	movs	r3, #0
 8009570:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009572:	2300      	movs	r3, #0
 8009574:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009576:	1d3a      	adds	r2, r7, #4
 8009578:	f107 0108 	add.w	r1, r7, #8
 800957c:	f107 030c 	add.w	r3, r7, #12
 8009580:	4618      	mov	r0, r3
 8009582:	f7fe fa9d 	bl	8007ac0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009586:	6879      	ldr	r1, [r7, #4]
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	68fa      	ldr	r2, [r7, #12]
 800958c:	9202      	str	r2, [sp, #8]
 800958e:	9301      	str	r3, [sp, #4]
 8009590:	2302      	movs	r3, #2
 8009592:	9300      	str	r3, [sp, #0]
 8009594:	2300      	movs	r3, #0
 8009596:	460a      	mov	r2, r1
 8009598:	4911      	ldr	r1, [pc, #68]	; (80095e0 <xTimerCreateTimerTask+0x88>)
 800959a:	4812      	ldr	r0, [pc, #72]	; (80095e4 <xTimerCreateTimerTask+0x8c>)
 800959c:	f7ff f868 	bl	8008670 <xTaskCreateStatic>
 80095a0:	4603      	mov	r3, r0
 80095a2:	4a11      	ldr	r2, [pc, #68]	; (80095e8 <xTimerCreateTimerTask+0x90>)
 80095a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80095a6:	4b10      	ldr	r3, [pc, #64]	; (80095e8 <xTimerCreateTimerTask+0x90>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d001      	beq.n	80095b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80095ae:	2301      	movs	r3, #1
 80095b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d10c      	bne.n	80095d2 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80095b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095bc:	b672      	cpsid	i
 80095be:	f383 8811 	msr	BASEPRI, r3
 80095c2:	f3bf 8f6f 	isb	sy
 80095c6:	f3bf 8f4f 	dsb	sy
 80095ca:	b662      	cpsie	i
 80095cc:	613b      	str	r3, [r7, #16]
}
 80095ce:	bf00      	nop
 80095d0:	e7fe      	b.n	80095d0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80095d2:	697b      	ldr	r3, [r7, #20]
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3718      	adds	r7, #24
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}
 80095dc:	20007c18 	.word	0x20007c18
 80095e0:	0801a638 	.word	0x0801a638
 80095e4:	08009729 	.word	0x08009729
 80095e8:	20007c1c 	.word	0x20007c1c

080095ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b08a      	sub	sp, #40	; 0x28
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	60b9      	str	r1, [r7, #8]
 80095f6:	607a      	str	r2, [r7, #4]
 80095f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80095fa:	2300      	movs	r3, #0
 80095fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d10c      	bne.n	800961e <xTimerGenericCommand+0x32>
	__asm volatile
 8009604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009608:	b672      	cpsid	i
 800960a:	f383 8811 	msr	BASEPRI, r3
 800960e:	f3bf 8f6f 	isb	sy
 8009612:	f3bf 8f4f 	dsb	sy
 8009616:	b662      	cpsie	i
 8009618:	623b      	str	r3, [r7, #32]
}
 800961a:	bf00      	nop
 800961c:	e7fe      	b.n	800961c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800961e:	4b1a      	ldr	r3, [pc, #104]	; (8009688 <xTimerGenericCommand+0x9c>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d02a      	beq.n	800967c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	2b05      	cmp	r3, #5
 8009636:	dc18      	bgt.n	800966a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009638:	f7ff feaa 	bl	8009390 <xTaskGetSchedulerState>
 800963c:	4603      	mov	r3, r0
 800963e:	2b02      	cmp	r3, #2
 8009640:	d109      	bne.n	8009656 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009642:	4b11      	ldr	r3, [pc, #68]	; (8009688 <xTimerGenericCommand+0x9c>)
 8009644:	6818      	ldr	r0, [r3, #0]
 8009646:	f107 0110 	add.w	r1, r7, #16
 800964a:	2300      	movs	r3, #0
 800964c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800964e:	f7fe fc15 	bl	8007e7c <xQueueGenericSend>
 8009652:	6278      	str	r0, [r7, #36]	; 0x24
 8009654:	e012      	b.n	800967c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009656:	4b0c      	ldr	r3, [pc, #48]	; (8009688 <xTimerGenericCommand+0x9c>)
 8009658:	6818      	ldr	r0, [r3, #0]
 800965a:	f107 0110 	add.w	r1, r7, #16
 800965e:	2300      	movs	r3, #0
 8009660:	2200      	movs	r2, #0
 8009662:	f7fe fc0b 	bl	8007e7c <xQueueGenericSend>
 8009666:	6278      	str	r0, [r7, #36]	; 0x24
 8009668:	e008      	b.n	800967c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800966a:	4b07      	ldr	r3, [pc, #28]	; (8009688 <xTimerGenericCommand+0x9c>)
 800966c:	6818      	ldr	r0, [r3, #0]
 800966e:	f107 0110 	add.w	r1, r7, #16
 8009672:	2300      	movs	r3, #0
 8009674:	683a      	ldr	r2, [r7, #0]
 8009676:	f7fe fd07 	bl	8008088 <xQueueGenericSendFromISR>
 800967a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800967c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800967e:	4618      	mov	r0, r3
 8009680:	3728      	adds	r7, #40	; 0x28
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
 8009686:	bf00      	nop
 8009688:	20007c18 	.word	0x20007c18

0800968c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b088      	sub	sp, #32
 8009690:	af02      	add	r7, sp, #8
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009696:	4b23      	ldr	r3, [pc, #140]	; (8009724 <prvProcessExpiredTimer+0x98>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	68db      	ldr	r3, [r3, #12]
 800969c:	68db      	ldr	r3, [r3, #12]
 800969e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	3304      	adds	r3, #4
 80096a4:	4618      	mov	r0, r3
 80096a6:	f7fe faaf 	bl	8007c08 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096b0:	f003 0304 	and.w	r3, r3, #4
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d024      	beq.n	8009702 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	699a      	ldr	r2, [r3, #24]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	18d1      	adds	r1, r2, r3
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	683a      	ldr	r2, [r7, #0]
 80096c4:	6978      	ldr	r0, [r7, #20]
 80096c6:	f000 f8d3 	bl	8009870 <prvInsertTimerInActiveList>
 80096ca:	4603      	mov	r3, r0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d021      	beq.n	8009714 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80096d0:	2300      	movs	r3, #0
 80096d2:	9300      	str	r3, [sp, #0]
 80096d4:	2300      	movs	r3, #0
 80096d6:	687a      	ldr	r2, [r7, #4]
 80096d8:	2100      	movs	r1, #0
 80096da:	6978      	ldr	r0, [r7, #20]
 80096dc:	f7ff ff86 	bl	80095ec <xTimerGenericCommand>
 80096e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d115      	bne.n	8009714 <prvProcessExpiredTimer+0x88>
	__asm volatile
 80096e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ec:	b672      	cpsid	i
 80096ee:	f383 8811 	msr	BASEPRI, r3
 80096f2:	f3bf 8f6f 	isb	sy
 80096f6:	f3bf 8f4f 	dsb	sy
 80096fa:	b662      	cpsie	i
 80096fc:	60fb      	str	r3, [r7, #12]
}
 80096fe:	bf00      	nop
 8009700:	e7fe      	b.n	8009700 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009708:	f023 0301 	bic.w	r3, r3, #1
 800970c:	b2da      	uxtb	r2, r3
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	6a1b      	ldr	r3, [r3, #32]
 8009718:	6978      	ldr	r0, [r7, #20]
 800971a:	4798      	blx	r3
}
 800971c:	bf00      	nop
 800971e:	3718      	adds	r7, #24
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}
 8009724:	20007c10 	.word	0x20007c10

08009728 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b084      	sub	sp, #16
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009730:	f107 0308 	add.w	r3, r7, #8
 8009734:	4618      	mov	r0, r3
 8009736:	f000 f857 	bl	80097e8 <prvGetNextExpireTime>
 800973a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	4619      	mov	r1, r3
 8009740:	68f8      	ldr	r0, [r7, #12]
 8009742:	f000 f803 	bl	800974c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009746:	f000 f8d5 	bl	80098f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800974a:	e7f1      	b.n	8009730 <prvTimerTask+0x8>

0800974c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009756:	f7ff f9f5 	bl	8008b44 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800975a:	f107 0308 	add.w	r3, r7, #8
 800975e:	4618      	mov	r0, r3
 8009760:	f000 f866 	bl	8009830 <prvSampleTimeNow>
 8009764:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d130      	bne.n	80097ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d10a      	bne.n	8009788 <prvProcessTimerOrBlockTask+0x3c>
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	429a      	cmp	r2, r3
 8009778:	d806      	bhi.n	8009788 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800977a:	f7ff f9f1 	bl	8008b60 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800977e:	68f9      	ldr	r1, [r7, #12]
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f7ff ff83 	bl	800968c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009786:	e024      	b.n	80097d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d008      	beq.n	80097a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800978e:	4b13      	ldr	r3, [pc, #76]	; (80097dc <prvProcessTimerOrBlockTask+0x90>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d101      	bne.n	800979c <prvProcessTimerOrBlockTask+0x50>
 8009798:	2301      	movs	r3, #1
 800979a:	e000      	b.n	800979e <prvProcessTimerOrBlockTask+0x52>
 800979c:	2300      	movs	r3, #0
 800979e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80097a0:	4b0f      	ldr	r3, [pc, #60]	; (80097e0 <prvProcessTimerOrBlockTask+0x94>)
 80097a2:	6818      	ldr	r0, [r3, #0]
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	1ad3      	subs	r3, r2, r3
 80097aa:	683a      	ldr	r2, [r7, #0]
 80097ac:	4619      	mov	r1, r3
 80097ae:	f7fe ff2b 	bl	8008608 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80097b2:	f7ff f9d5 	bl	8008b60 <xTaskResumeAll>
 80097b6:	4603      	mov	r3, r0
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d10a      	bne.n	80097d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80097bc:	4b09      	ldr	r3, [pc, #36]	; (80097e4 <prvProcessTimerOrBlockTask+0x98>)
 80097be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097c2:	601a      	str	r2, [r3, #0]
 80097c4:	f3bf 8f4f 	dsb	sy
 80097c8:	f3bf 8f6f 	isb	sy
}
 80097cc:	e001      	b.n	80097d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80097ce:	f7ff f9c7 	bl	8008b60 <xTaskResumeAll>
}
 80097d2:	bf00      	nop
 80097d4:	3710      	adds	r7, #16
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop
 80097dc:	20007c14 	.word	0x20007c14
 80097e0:	20007c18 	.word	0x20007c18
 80097e4:	e000ed04 	.word	0xe000ed04

080097e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80097e8:	b480      	push	{r7}
 80097ea:	b085      	sub	sp, #20
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80097f0:	4b0e      	ldr	r3, [pc, #56]	; (800982c <prvGetNextExpireTime+0x44>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d101      	bne.n	80097fe <prvGetNextExpireTime+0x16>
 80097fa:	2201      	movs	r2, #1
 80097fc:	e000      	b.n	8009800 <prvGetNextExpireTime+0x18>
 80097fe:	2200      	movs	r2, #0
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d105      	bne.n	8009818 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800980c:	4b07      	ldr	r3, [pc, #28]	; (800982c <prvGetNextExpireTime+0x44>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	68db      	ldr	r3, [r3, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	60fb      	str	r3, [r7, #12]
 8009816:	e001      	b.n	800981c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009818:	2300      	movs	r3, #0
 800981a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800981c:	68fb      	ldr	r3, [r7, #12]
}
 800981e:	4618      	mov	r0, r3
 8009820:	3714      	adds	r7, #20
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr
 800982a:	bf00      	nop
 800982c:	20007c10 	.word	0x20007c10

08009830 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009838:	f7ff fa32 	bl	8008ca0 <xTaskGetTickCount>
 800983c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800983e:	4b0b      	ldr	r3, [pc, #44]	; (800986c <prvSampleTimeNow+0x3c>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	68fa      	ldr	r2, [r7, #12]
 8009844:	429a      	cmp	r2, r3
 8009846:	d205      	bcs.n	8009854 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009848:	f000 f93c 	bl	8009ac4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2201      	movs	r2, #1
 8009850:	601a      	str	r2, [r3, #0]
 8009852:	e002      	b.n	800985a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2200      	movs	r2, #0
 8009858:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800985a:	4a04      	ldr	r2, [pc, #16]	; (800986c <prvSampleTimeNow+0x3c>)
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009860:	68fb      	ldr	r3, [r7, #12]
}
 8009862:	4618      	mov	r0, r3
 8009864:	3710      	adds	r7, #16
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop
 800986c:	20007c20 	.word	0x20007c20

08009870 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b086      	sub	sp, #24
 8009874:	af00      	add	r7, sp, #0
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	60b9      	str	r1, [r7, #8]
 800987a:	607a      	str	r2, [r7, #4]
 800987c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800987e:	2300      	movs	r3, #0
 8009880:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	68ba      	ldr	r2, [r7, #8]
 8009886:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	68fa      	ldr	r2, [r7, #12]
 800988c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800988e:	68ba      	ldr	r2, [r7, #8]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	429a      	cmp	r2, r3
 8009894:	d812      	bhi.n	80098bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009896:	687a      	ldr	r2, [r7, #4]
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	1ad2      	subs	r2, r2, r3
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	699b      	ldr	r3, [r3, #24]
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d302      	bcc.n	80098aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80098a4:	2301      	movs	r3, #1
 80098a6:	617b      	str	r3, [r7, #20]
 80098a8:	e01b      	b.n	80098e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80098aa:	4b10      	ldr	r3, [pc, #64]	; (80098ec <prvInsertTimerInActiveList+0x7c>)
 80098ac:	681a      	ldr	r2, [r3, #0]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	3304      	adds	r3, #4
 80098b2:	4619      	mov	r1, r3
 80098b4:	4610      	mov	r0, r2
 80098b6:	f7fe f96e 	bl	8007b96 <vListInsert>
 80098ba:	e012      	b.n	80098e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d206      	bcs.n	80098d2 <prvInsertTimerInActiveList+0x62>
 80098c4:	68ba      	ldr	r2, [r7, #8]
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d302      	bcc.n	80098d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80098cc:	2301      	movs	r3, #1
 80098ce:	617b      	str	r3, [r7, #20]
 80098d0:	e007      	b.n	80098e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80098d2:	4b07      	ldr	r3, [pc, #28]	; (80098f0 <prvInsertTimerInActiveList+0x80>)
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	3304      	adds	r3, #4
 80098da:	4619      	mov	r1, r3
 80098dc:	4610      	mov	r0, r2
 80098de:	f7fe f95a 	bl	8007b96 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80098e2:	697b      	ldr	r3, [r7, #20]
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3718      	adds	r7, #24
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}
 80098ec:	20007c14 	.word	0x20007c14
 80098f0:	20007c10 	.word	0x20007c10

080098f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b08e      	sub	sp, #56	; 0x38
 80098f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80098fa:	e0d0      	b.n	8009a9e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	da1a      	bge.n	8009938 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009902:	1d3b      	adds	r3, r7, #4
 8009904:	3304      	adds	r3, #4
 8009906:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800990a:	2b00      	cmp	r3, #0
 800990c:	d10c      	bne.n	8009928 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800990e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009912:	b672      	cpsid	i
 8009914:	f383 8811 	msr	BASEPRI, r3
 8009918:	f3bf 8f6f 	isb	sy
 800991c:	f3bf 8f4f 	dsb	sy
 8009920:	b662      	cpsie	i
 8009922:	61fb      	str	r3, [r7, #28]
}
 8009924:	bf00      	nop
 8009926:	e7fe      	b.n	8009926 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800992e:	6850      	ldr	r0, [r2, #4]
 8009930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009932:	6892      	ldr	r2, [r2, #8]
 8009934:	4611      	mov	r1, r2
 8009936:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2b00      	cmp	r3, #0
 800993c:	f2c0 80af 	blt.w	8009a9e <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009946:	695b      	ldr	r3, [r3, #20]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d004      	beq.n	8009956 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800994c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800994e:	3304      	adds	r3, #4
 8009950:	4618      	mov	r0, r3
 8009952:	f7fe f959 	bl	8007c08 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009956:	463b      	mov	r3, r7
 8009958:	4618      	mov	r0, r3
 800995a:	f7ff ff69 	bl	8009830 <prvSampleTimeNow>
 800995e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2b09      	cmp	r3, #9
 8009964:	f200 809a 	bhi.w	8009a9c <prvProcessReceivedCommands+0x1a8>
 8009968:	a201      	add	r2, pc, #4	; (adr r2, 8009970 <prvProcessReceivedCommands+0x7c>)
 800996a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800996e:	bf00      	nop
 8009970:	08009999 	.word	0x08009999
 8009974:	08009999 	.word	0x08009999
 8009978:	08009999 	.word	0x08009999
 800997c:	08009a11 	.word	0x08009a11
 8009980:	08009a25 	.word	0x08009a25
 8009984:	08009a73 	.word	0x08009a73
 8009988:	08009999 	.word	0x08009999
 800998c:	08009999 	.word	0x08009999
 8009990:	08009a11 	.word	0x08009a11
 8009994:	08009a25 	.word	0x08009a25
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800999a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800999e:	f043 0301 	orr.w	r3, r3, #1
 80099a2:	b2da      	uxtb	r2, r3
 80099a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80099aa:	68ba      	ldr	r2, [r7, #8]
 80099ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ae:	699b      	ldr	r3, [r3, #24]
 80099b0:	18d1      	adds	r1, r2, r3
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099b8:	f7ff ff5a 	bl	8009870 <prvInsertTimerInActiveList>
 80099bc:	4603      	mov	r3, r0
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d06d      	beq.n	8009a9e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80099c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c4:	6a1b      	ldr	r3, [r3, #32]
 80099c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80099ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099d0:	f003 0304 	and.w	r3, r3, #4
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d062      	beq.n	8009a9e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80099d8:	68ba      	ldr	r2, [r7, #8]
 80099da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099dc:	699b      	ldr	r3, [r3, #24]
 80099de:	441a      	add	r2, r3
 80099e0:	2300      	movs	r3, #0
 80099e2:	9300      	str	r3, [sp, #0]
 80099e4:	2300      	movs	r3, #0
 80099e6:	2100      	movs	r1, #0
 80099e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099ea:	f7ff fdff 	bl	80095ec <xTimerGenericCommand>
 80099ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80099f0:	6a3b      	ldr	r3, [r7, #32]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d153      	bne.n	8009a9e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 80099f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fa:	b672      	cpsid	i
 80099fc:	f383 8811 	msr	BASEPRI, r3
 8009a00:	f3bf 8f6f 	isb	sy
 8009a04:	f3bf 8f4f 	dsb	sy
 8009a08:	b662      	cpsie	i
 8009a0a:	61bb      	str	r3, [r7, #24]
}
 8009a0c:	bf00      	nop
 8009a0e:	e7fe      	b.n	8009a0e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a16:	f023 0301 	bic.w	r3, r3, #1
 8009a1a:	b2da      	uxtb	r2, r3
 8009a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009a22:	e03c      	b.n	8009a9e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a2a:	f043 0301 	orr.w	r3, r3, #1
 8009a2e:	b2da      	uxtb	r2, r3
 8009a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009a36:	68ba      	ldr	r2, [r7, #8]
 8009a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a3a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a3e:	699b      	ldr	r3, [r3, #24]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d10c      	bne.n	8009a5e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8009a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a48:	b672      	cpsid	i
 8009a4a:	f383 8811 	msr	BASEPRI, r3
 8009a4e:	f3bf 8f6f 	isb	sy
 8009a52:	f3bf 8f4f 	dsb	sy
 8009a56:	b662      	cpsie	i
 8009a58:	617b      	str	r3, [r7, #20]
}
 8009a5a:	bf00      	nop
 8009a5c:	e7fe      	b.n	8009a5c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a60:	699a      	ldr	r2, [r3, #24]
 8009a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a64:	18d1      	adds	r1, r2, r3
 8009a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a6c:	f7ff ff00 	bl	8009870 <prvInsertTimerInActiveList>
					break;
 8009a70:	e015      	b.n	8009a9e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a78:	f003 0302 	and.w	r3, r3, #2
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d103      	bne.n	8009a88 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8009a80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a82:	f000 fbc9 	bl	800a218 <vPortFree>
 8009a86:	e00a      	b.n	8009a9e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a8e:	f023 0301 	bic.w	r3, r3, #1
 8009a92:	b2da      	uxtb	r2, r3
 8009a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009a9a:	e000      	b.n	8009a9e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 8009a9c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a9e:	4b08      	ldr	r3, [pc, #32]	; (8009ac0 <prvProcessReceivedCommands+0x1cc>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	1d39      	adds	r1, r7, #4
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f7fe fb8e 	bl	80081c8 <xQueueReceive>
 8009aac:	4603      	mov	r3, r0
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	f47f af24 	bne.w	80098fc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009ab4:	bf00      	nop
 8009ab6:	bf00      	nop
 8009ab8:	3730      	adds	r7, #48	; 0x30
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	20007c18 	.word	0x20007c18

08009ac4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b088      	sub	sp, #32
 8009ac8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009aca:	e04a      	b.n	8009b62 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009acc:	4b2e      	ldr	r3, [pc, #184]	; (8009b88 <prvSwitchTimerLists+0xc4>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	68db      	ldr	r3, [r3, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ad6:	4b2c      	ldr	r3, [pc, #176]	; (8009b88 <prvSwitchTimerLists+0xc4>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	68db      	ldr	r3, [r3, #12]
 8009adc:	68db      	ldr	r3, [r3, #12]
 8009ade:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	3304      	adds	r3, #4
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f7fe f88f 	bl	8007c08 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	6a1b      	ldr	r3, [r3, #32]
 8009aee:	68f8      	ldr	r0, [r7, #12]
 8009af0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009af8:	f003 0304 	and.w	r3, r3, #4
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d030      	beq.n	8009b62 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	699b      	ldr	r3, [r3, #24]
 8009b04:	693a      	ldr	r2, [r7, #16]
 8009b06:	4413      	add	r3, r2
 8009b08:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009b0a:	68ba      	ldr	r2, [r7, #8]
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d90e      	bls.n	8009b30 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	68ba      	ldr	r2, [r7, #8]
 8009b16:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	68fa      	ldr	r2, [r7, #12]
 8009b1c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009b1e:	4b1a      	ldr	r3, [pc, #104]	; (8009b88 <prvSwitchTimerLists+0xc4>)
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	3304      	adds	r3, #4
 8009b26:	4619      	mov	r1, r3
 8009b28:	4610      	mov	r0, r2
 8009b2a:	f7fe f834 	bl	8007b96 <vListInsert>
 8009b2e:	e018      	b.n	8009b62 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b30:	2300      	movs	r3, #0
 8009b32:	9300      	str	r3, [sp, #0]
 8009b34:	2300      	movs	r3, #0
 8009b36:	693a      	ldr	r2, [r7, #16]
 8009b38:	2100      	movs	r1, #0
 8009b3a:	68f8      	ldr	r0, [r7, #12]
 8009b3c:	f7ff fd56 	bl	80095ec <xTimerGenericCommand>
 8009b40:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d10c      	bne.n	8009b62 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8009b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4c:	b672      	cpsid	i
 8009b4e:	f383 8811 	msr	BASEPRI, r3
 8009b52:	f3bf 8f6f 	isb	sy
 8009b56:	f3bf 8f4f 	dsb	sy
 8009b5a:	b662      	cpsie	i
 8009b5c:	603b      	str	r3, [r7, #0]
}
 8009b5e:	bf00      	nop
 8009b60:	e7fe      	b.n	8009b60 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b62:	4b09      	ldr	r3, [pc, #36]	; (8009b88 <prvSwitchTimerLists+0xc4>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d1af      	bne.n	8009acc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009b6c:	4b06      	ldr	r3, [pc, #24]	; (8009b88 <prvSwitchTimerLists+0xc4>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009b72:	4b06      	ldr	r3, [pc, #24]	; (8009b8c <prvSwitchTimerLists+0xc8>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a04      	ldr	r2, [pc, #16]	; (8009b88 <prvSwitchTimerLists+0xc4>)
 8009b78:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009b7a:	4a04      	ldr	r2, [pc, #16]	; (8009b8c <prvSwitchTimerLists+0xc8>)
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	6013      	str	r3, [r2, #0]
}
 8009b80:	bf00      	nop
 8009b82:	3718      	adds	r7, #24
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}
 8009b88:	20007c10 	.word	0x20007c10
 8009b8c:	20007c14 	.word	0x20007c14

08009b90 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009b96:	f000 f949 	bl	8009e2c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009b9a:	4b15      	ldr	r3, [pc, #84]	; (8009bf0 <prvCheckForValidListAndQueue+0x60>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d120      	bne.n	8009be4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009ba2:	4814      	ldr	r0, [pc, #80]	; (8009bf4 <prvCheckForValidListAndQueue+0x64>)
 8009ba4:	f7fd ffa6 	bl	8007af4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009ba8:	4813      	ldr	r0, [pc, #76]	; (8009bf8 <prvCheckForValidListAndQueue+0x68>)
 8009baa:	f7fd ffa3 	bl	8007af4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009bae:	4b13      	ldr	r3, [pc, #76]	; (8009bfc <prvCheckForValidListAndQueue+0x6c>)
 8009bb0:	4a10      	ldr	r2, [pc, #64]	; (8009bf4 <prvCheckForValidListAndQueue+0x64>)
 8009bb2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009bb4:	4b12      	ldr	r3, [pc, #72]	; (8009c00 <prvCheckForValidListAndQueue+0x70>)
 8009bb6:	4a10      	ldr	r2, [pc, #64]	; (8009bf8 <prvCheckForValidListAndQueue+0x68>)
 8009bb8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009bba:	2300      	movs	r3, #0
 8009bbc:	9300      	str	r3, [sp, #0]
 8009bbe:	4b11      	ldr	r3, [pc, #68]	; (8009c04 <prvCheckForValidListAndQueue+0x74>)
 8009bc0:	4a11      	ldr	r2, [pc, #68]	; (8009c08 <prvCheckForValidListAndQueue+0x78>)
 8009bc2:	2110      	movs	r1, #16
 8009bc4:	200a      	movs	r0, #10
 8009bc6:	f7fe f8b3 	bl	8007d30 <xQueueGenericCreateStatic>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	4a08      	ldr	r2, [pc, #32]	; (8009bf0 <prvCheckForValidListAndQueue+0x60>)
 8009bce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009bd0:	4b07      	ldr	r3, [pc, #28]	; (8009bf0 <prvCheckForValidListAndQueue+0x60>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d005      	beq.n	8009be4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009bd8:	4b05      	ldr	r3, [pc, #20]	; (8009bf0 <prvCheckForValidListAndQueue+0x60>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	490b      	ldr	r1, [pc, #44]	; (8009c0c <prvCheckForValidListAndQueue+0x7c>)
 8009bde:	4618      	mov	r0, r3
 8009be0:	f7fe fce8 	bl	80085b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009be4:	f000 f956 	bl	8009e94 <vPortExitCritical>
}
 8009be8:	bf00      	nop
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop
 8009bf0:	20007c18 	.word	0x20007c18
 8009bf4:	20007be8 	.word	0x20007be8
 8009bf8:	20007bfc 	.word	0x20007bfc
 8009bfc:	20007c10 	.word	0x20007c10
 8009c00:	20007c14 	.word	0x20007c14
 8009c04:	20007cc4 	.word	0x20007cc4
 8009c08:	20007c24 	.word	0x20007c24
 8009c0c:	0801a640 	.word	0x0801a640

08009c10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009c10:	b480      	push	{r7}
 8009c12:	b085      	sub	sp, #20
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	60f8      	str	r0, [r7, #12]
 8009c18:	60b9      	str	r1, [r7, #8]
 8009c1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	3b04      	subs	r3, #4
 8009c20:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009c28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	3b04      	subs	r3, #4
 8009c2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	f023 0201 	bic.w	r2, r3, #1
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	3b04      	subs	r3, #4
 8009c3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009c40:	4a0c      	ldr	r2, [pc, #48]	; (8009c74 <pxPortInitialiseStack+0x64>)
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	3b14      	subs	r3, #20
 8009c4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	3b04      	subs	r3, #4
 8009c56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	f06f 0202 	mvn.w	r2, #2
 8009c5e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	3b20      	subs	r3, #32
 8009c64:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009c66:	68fb      	ldr	r3, [r7, #12]
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3714      	adds	r7, #20
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr
 8009c74:	08009c79 	.word	0x08009c79

08009c78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b085      	sub	sp, #20
 8009c7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009c82:	4b14      	ldr	r3, [pc, #80]	; (8009cd4 <prvTaskExitError+0x5c>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c8a:	d00c      	beq.n	8009ca6 <prvTaskExitError+0x2e>
	__asm volatile
 8009c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c90:	b672      	cpsid	i
 8009c92:	f383 8811 	msr	BASEPRI, r3
 8009c96:	f3bf 8f6f 	isb	sy
 8009c9a:	f3bf 8f4f 	dsb	sy
 8009c9e:	b662      	cpsie	i
 8009ca0:	60fb      	str	r3, [r7, #12]
}
 8009ca2:	bf00      	nop
 8009ca4:	e7fe      	b.n	8009ca4 <prvTaskExitError+0x2c>
	__asm volatile
 8009ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009caa:	b672      	cpsid	i
 8009cac:	f383 8811 	msr	BASEPRI, r3
 8009cb0:	f3bf 8f6f 	isb	sy
 8009cb4:	f3bf 8f4f 	dsb	sy
 8009cb8:	b662      	cpsie	i
 8009cba:	60bb      	str	r3, [r7, #8]
}
 8009cbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009cbe:	bf00      	nop
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d0fc      	beq.n	8009cc0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009cc6:	bf00      	nop
 8009cc8:	bf00      	nop
 8009cca:	3714      	adds	r7, #20
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr
 8009cd4:	20000010 	.word	0x20000010
	...

08009ce0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009ce0:	4b07      	ldr	r3, [pc, #28]	; (8009d00 <pxCurrentTCBConst2>)
 8009ce2:	6819      	ldr	r1, [r3, #0]
 8009ce4:	6808      	ldr	r0, [r1, #0]
 8009ce6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cea:	f380 8809 	msr	PSP, r0
 8009cee:	f3bf 8f6f 	isb	sy
 8009cf2:	f04f 0000 	mov.w	r0, #0
 8009cf6:	f380 8811 	msr	BASEPRI, r0
 8009cfa:	4770      	bx	lr
 8009cfc:	f3af 8000 	nop.w

08009d00 <pxCurrentTCBConst2>:
 8009d00:	200076e8 	.word	0x200076e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009d04:	bf00      	nop
 8009d06:	bf00      	nop

08009d08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009d08:	4808      	ldr	r0, [pc, #32]	; (8009d2c <prvPortStartFirstTask+0x24>)
 8009d0a:	6800      	ldr	r0, [r0, #0]
 8009d0c:	6800      	ldr	r0, [r0, #0]
 8009d0e:	f380 8808 	msr	MSP, r0
 8009d12:	f04f 0000 	mov.w	r0, #0
 8009d16:	f380 8814 	msr	CONTROL, r0
 8009d1a:	b662      	cpsie	i
 8009d1c:	b661      	cpsie	f
 8009d1e:	f3bf 8f4f 	dsb	sy
 8009d22:	f3bf 8f6f 	isb	sy
 8009d26:	df00      	svc	0
 8009d28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009d2a:	bf00      	nop
 8009d2c:	e000ed08 	.word	0xe000ed08

08009d30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009d36:	4b37      	ldr	r3, [pc, #220]	; (8009e14 <xPortStartScheduler+0xe4>)
 8009d38:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	b2db      	uxtb	r3, r3
 8009d40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	22ff      	movs	r2, #255	; 0xff
 8009d46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	b2db      	uxtb	r3, r3
 8009d4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009d50:	78fb      	ldrb	r3, [r7, #3]
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009d58:	b2da      	uxtb	r2, r3
 8009d5a:	4b2f      	ldr	r3, [pc, #188]	; (8009e18 <xPortStartScheduler+0xe8>)
 8009d5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009d5e:	4b2f      	ldr	r3, [pc, #188]	; (8009e1c <xPortStartScheduler+0xec>)
 8009d60:	2207      	movs	r2, #7
 8009d62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d64:	e009      	b.n	8009d7a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009d66:	4b2d      	ldr	r3, [pc, #180]	; (8009e1c <xPortStartScheduler+0xec>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	3b01      	subs	r3, #1
 8009d6c:	4a2b      	ldr	r2, [pc, #172]	; (8009e1c <xPortStartScheduler+0xec>)
 8009d6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009d70:	78fb      	ldrb	r3, [r7, #3]
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	005b      	lsls	r3, r3, #1
 8009d76:	b2db      	uxtb	r3, r3
 8009d78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d7a:	78fb      	ldrb	r3, [r7, #3]
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d82:	2b80      	cmp	r3, #128	; 0x80
 8009d84:	d0ef      	beq.n	8009d66 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009d86:	4b25      	ldr	r3, [pc, #148]	; (8009e1c <xPortStartScheduler+0xec>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f1c3 0307 	rsb	r3, r3, #7
 8009d8e:	2b04      	cmp	r3, #4
 8009d90:	d00c      	beq.n	8009dac <xPortStartScheduler+0x7c>
	__asm volatile
 8009d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d96:	b672      	cpsid	i
 8009d98:	f383 8811 	msr	BASEPRI, r3
 8009d9c:	f3bf 8f6f 	isb	sy
 8009da0:	f3bf 8f4f 	dsb	sy
 8009da4:	b662      	cpsie	i
 8009da6:	60bb      	str	r3, [r7, #8]
}
 8009da8:	bf00      	nop
 8009daa:	e7fe      	b.n	8009daa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009dac:	4b1b      	ldr	r3, [pc, #108]	; (8009e1c <xPortStartScheduler+0xec>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	021b      	lsls	r3, r3, #8
 8009db2:	4a1a      	ldr	r2, [pc, #104]	; (8009e1c <xPortStartScheduler+0xec>)
 8009db4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009db6:	4b19      	ldr	r3, [pc, #100]	; (8009e1c <xPortStartScheduler+0xec>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009dbe:	4a17      	ldr	r2, [pc, #92]	; (8009e1c <xPortStartScheduler+0xec>)
 8009dc0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	b2da      	uxtb	r2, r3
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009dca:	4b15      	ldr	r3, [pc, #84]	; (8009e20 <xPortStartScheduler+0xf0>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	4a14      	ldr	r2, [pc, #80]	; (8009e20 <xPortStartScheduler+0xf0>)
 8009dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009dd4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009dd6:	4b12      	ldr	r3, [pc, #72]	; (8009e20 <xPortStartScheduler+0xf0>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4a11      	ldr	r2, [pc, #68]	; (8009e20 <xPortStartScheduler+0xf0>)
 8009ddc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009de0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009de2:	f000 f8dd 	bl	8009fa0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009de6:	4b0f      	ldr	r3, [pc, #60]	; (8009e24 <xPortStartScheduler+0xf4>)
 8009de8:	2200      	movs	r2, #0
 8009dea:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009dec:	f000 f8fc 	bl	8009fe8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009df0:	4b0d      	ldr	r3, [pc, #52]	; (8009e28 <xPortStartScheduler+0xf8>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4a0c      	ldr	r2, [pc, #48]	; (8009e28 <xPortStartScheduler+0xf8>)
 8009df6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009dfa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009dfc:	f7ff ff84 	bl	8009d08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009e00:	f7ff f81a 	bl	8008e38 <vTaskSwitchContext>
	prvTaskExitError();
 8009e04:	f7ff ff38 	bl	8009c78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009e08:	2300      	movs	r3, #0
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3710      	adds	r7, #16
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	e000e400 	.word	0xe000e400
 8009e18:	20007d14 	.word	0x20007d14
 8009e1c:	20007d18 	.word	0x20007d18
 8009e20:	e000ed20 	.word	0xe000ed20
 8009e24:	20000010 	.word	0x20000010
 8009e28:	e000ef34 	.word	0xe000ef34

08009e2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b083      	sub	sp, #12
 8009e30:	af00      	add	r7, sp, #0
	__asm volatile
 8009e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e36:	b672      	cpsid	i
 8009e38:	f383 8811 	msr	BASEPRI, r3
 8009e3c:	f3bf 8f6f 	isb	sy
 8009e40:	f3bf 8f4f 	dsb	sy
 8009e44:	b662      	cpsie	i
 8009e46:	607b      	str	r3, [r7, #4]
}
 8009e48:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009e4a:	4b10      	ldr	r3, [pc, #64]	; (8009e8c <vPortEnterCritical+0x60>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	3301      	adds	r3, #1
 8009e50:	4a0e      	ldr	r2, [pc, #56]	; (8009e8c <vPortEnterCritical+0x60>)
 8009e52:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009e54:	4b0d      	ldr	r3, [pc, #52]	; (8009e8c <vPortEnterCritical+0x60>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d111      	bne.n	8009e80 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009e5c:	4b0c      	ldr	r3, [pc, #48]	; (8009e90 <vPortEnterCritical+0x64>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	b2db      	uxtb	r3, r3
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d00c      	beq.n	8009e80 <vPortEnterCritical+0x54>
	__asm volatile
 8009e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e6a:	b672      	cpsid	i
 8009e6c:	f383 8811 	msr	BASEPRI, r3
 8009e70:	f3bf 8f6f 	isb	sy
 8009e74:	f3bf 8f4f 	dsb	sy
 8009e78:	b662      	cpsie	i
 8009e7a:	603b      	str	r3, [r7, #0]
}
 8009e7c:	bf00      	nop
 8009e7e:	e7fe      	b.n	8009e7e <vPortEnterCritical+0x52>
	}
}
 8009e80:	bf00      	nop
 8009e82:	370c      	adds	r7, #12
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr
 8009e8c:	20000010 	.word	0x20000010
 8009e90:	e000ed04 	.word	0xe000ed04

08009e94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009e94:	b480      	push	{r7}
 8009e96:	b083      	sub	sp, #12
 8009e98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009e9a:	4b13      	ldr	r3, [pc, #76]	; (8009ee8 <vPortExitCritical+0x54>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d10c      	bne.n	8009ebc <vPortExitCritical+0x28>
	__asm volatile
 8009ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea6:	b672      	cpsid	i
 8009ea8:	f383 8811 	msr	BASEPRI, r3
 8009eac:	f3bf 8f6f 	isb	sy
 8009eb0:	f3bf 8f4f 	dsb	sy
 8009eb4:	b662      	cpsie	i
 8009eb6:	607b      	str	r3, [r7, #4]
}
 8009eb8:	bf00      	nop
 8009eba:	e7fe      	b.n	8009eba <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009ebc:	4b0a      	ldr	r3, [pc, #40]	; (8009ee8 <vPortExitCritical+0x54>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	3b01      	subs	r3, #1
 8009ec2:	4a09      	ldr	r2, [pc, #36]	; (8009ee8 <vPortExitCritical+0x54>)
 8009ec4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009ec6:	4b08      	ldr	r3, [pc, #32]	; (8009ee8 <vPortExitCritical+0x54>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d105      	bne.n	8009eda <vPortExitCritical+0x46>
 8009ece:	2300      	movs	r3, #0
 8009ed0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	f383 8811 	msr	BASEPRI, r3
}
 8009ed8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009eda:	bf00      	nop
 8009edc:	370c      	adds	r7, #12
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr
 8009ee6:	bf00      	nop
 8009ee8:	20000010 	.word	0x20000010
 8009eec:	00000000 	.word	0x00000000

08009ef0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009ef0:	f3ef 8009 	mrs	r0, PSP
 8009ef4:	f3bf 8f6f 	isb	sy
 8009ef8:	4b15      	ldr	r3, [pc, #84]	; (8009f50 <pxCurrentTCBConst>)
 8009efa:	681a      	ldr	r2, [r3, #0]
 8009efc:	f01e 0f10 	tst.w	lr, #16
 8009f00:	bf08      	it	eq
 8009f02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009f06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f0a:	6010      	str	r0, [r2, #0]
 8009f0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009f10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009f14:	b672      	cpsid	i
 8009f16:	f380 8811 	msr	BASEPRI, r0
 8009f1a:	f3bf 8f4f 	dsb	sy
 8009f1e:	f3bf 8f6f 	isb	sy
 8009f22:	b662      	cpsie	i
 8009f24:	f7fe ff88 	bl	8008e38 <vTaskSwitchContext>
 8009f28:	f04f 0000 	mov.w	r0, #0
 8009f2c:	f380 8811 	msr	BASEPRI, r0
 8009f30:	bc09      	pop	{r0, r3}
 8009f32:	6819      	ldr	r1, [r3, #0]
 8009f34:	6808      	ldr	r0, [r1, #0]
 8009f36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f3a:	f01e 0f10 	tst.w	lr, #16
 8009f3e:	bf08      	it	eq
 8009f40:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009f44:	f380 8809 	msr	PSP, r0
 8009f48:	f3bf 8f6f 	isb	sy
 8009f4c:	4770      	bx	lr
 8009f4e:	bf00      	nop

08009f50 <pxCurrentTCBConst>:
 8009f50:	200076e8 	.word	0x200076e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009f54:	bf00      	nop
 8009f56:	bf00      	nop

08009f58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b082      	sub	sp, #8
 8009f5c:	af00      	add	r7, sp, #0
	__asm volatile
 8009f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f62:	b672      	cpsid	i
 8009f64:	f383 8811 	msr	BASEPRI, r3
 8009f68:	f3bf 8f6f 	isb	sy
 8009f6c:	f3bf 8f4f 	dsb	sy
 8009f70:	b662      	cpsie	i
 8009f72:	607b      	str	r3, [r7, #4]
}
 8009f74:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009f76:	f7fe fea3 	bl	8008cc0 <xTaskIncrementTick>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d003      	beq.n	8009f88 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009f80:	4b06      	ldr	r3, [pc, #24]	; (8009f9c <SysTick_Handler+0x44>)
 8009f82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f86:	601a      	str	r2, [r3, #0]
 8009f88:	2300      	movs	r3, #0
 8009f8a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	f383 8811 	msr	BASEPRI, r3
}
 8009f92:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009f94:	bf00      	nop
 8009f96:	3708      	adds	r7, #8
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}
 8009f9c:	e000ed04 	.word	0xe000ed04

08009fa0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009fa4:	4b0b      	ldr	r3, [pc, #44]	; (8009fd4 <vPortSetupTimerInterrupt+0x34>)
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009faa:	4b0b      	ldr	r3, [pc, #44]	; (8009fd8 <vPortSetupTimerInterrupt+0x38>)
 8009fac:	2200      	movs	r2, #0
 8009fae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009fb0:	4b0a      	ldr	r3, [pc, #40]	; (8009fdc <vPortSetupTimerInterrupt+0x3c>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a0a      	ldr	r2, [pc, #40]	; (8009fe0 <vPortSetupTimerInterrupt+0x40>)
 8009fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8009fba:	099b      	lsrs	r3, r3, #6
 8009fbc:	4a09      	ldr	r2, [pc, #36]	; (8009fe4 <vPortSetupTimerInterrupt+0x44>)
 8009fbe:	3b01      	subs	r3, #1
 8009fc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009fc2:	4b04      	ldr	r3, [pc, #16]	; (8009fd4 <vPortSetupTimerInterrupt+0x34>)
 8009fc4:	2207      	movs	r2, #7
 8009fc6:	601a      	str	r2, [r3, #0]
}
 8009fc8:	bf00      	nop
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd0:	4770      	bx	lr
 8009fd2:	bf00      	nop
 8009fd4:	e000e010 	.word	0xe000e010
 8009fd8:	e000e018 	.word	0xe000e018
 8009fdc:	20000004 	.word	0x20000004
 8009fe0:	10624dd3 	.word	0x10624dd3
 8009fe4:	e000e014 	.word	0xe000e014

08009fe8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009fe8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009ff8 <vPortEnableVFP+0x10>
 8009fec:	6801      	ldr	r1, [r0, #0]
 8009fee:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009ff2:	6001      	str	r1, [r0, #0]
 8009ff4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009ff6:	bf00      	nop
 8009ff8:	e000ed88 	.word	0xe000ed88

08009ffc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b085      	sub	sp, #20
 800a000:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a002:	f3ef 8305 	mrs	r3, IPSR
 800a006:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2b0f      	cmp	r3, #15
 800a00c:	d916      	bls.n	800a03c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a00e:	4a19      	ldr	r2, [pc, #100]	; (800a074 <vPortValidateInterruptPriority+0x78>)
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	4413      	add	r3, r2
 800a014:	781b      	ldrb	r3, [r3, #0]
 800a016:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a018:	4b17      	ldr	r3, [pc, #92]	; (800a078 <vPortValidateInterruptPriority+0x7c>)
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	7afa      	ldrb	r2, [r7, #11]
 800a01e:	429a      	cmp	r2, r3
 800a020:	d20c      	bcs.n	800a03c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800a022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a026:	b672      	cpsid	i
 800a028:	f383 8811 	msr	BASEPRI, r3
 800a02c:	f3bf 8f6f 	isb	sy
 800a030:	f3bf 8f4f 	dsb	sy
 800a034:	b662      	cpsie	i
 800a036:	607b      	str	r3, [r7, #4]
}
 800a038:	bf00      	nop
 800a03a:	e7fe      	b.n	800a03a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a03c:	4b0f      	ldr	r3, [pc, #60]	; (800a07c <vPortValidateInterruptPriority+0x80>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a044:	4b0e      	ldr	r3, [pc, #56]	; (800a080 <vPortValidateInterruptPriority+0x84>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	429a      	cmp	r2, r3
 800a04a:	d90c      	bls.n	800a066 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800a04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a050:	b672      	cpsid	i
 800a052:	f383 8811 	msr	BASEPRI, r3
 800a056:	f3bf 8f6f 	isb	sy
 800a05a:	f3bf 8f4f 	dsb	sy
 800a05e:	b662      	cpsie	i
 800a060:	603b      	str	r3, [r7, #0]
}
 800a062:	bf00      	nop
 800a064:	e7fe      	b.n	800a064 <vPortValidateInterruptPriority+0x68>
	}
 800a066:	bf00      	nop
 800a068:	3714      	adds	r7, #20
 800a06a:	46bd      	mov	sp, r7
 800a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a070:	4770      	bx	lr
 800a072:	bf00      	nop
 800a074:	e000e3f0 	.word	0xe000e3f0
 800a078:	20007d14 	.word	0x20007d14
 800a07c:	e000ed0c 	.word	0xe000ed0c
 800a080:	20007d18 	.word	0x20007d18

0800a084 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b08a      	sub	sp, #40	; 0x28
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a08c:	2300      	movs	r3, #0
 800a08e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a090:	f7fe fd58 	bl	8008b44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a094:	4b5b      	ldr	r3, [pc, #364]	; (800a204 <pvPortMalloc+0x180>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d101      	bne.n	800a0a0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a09c:	f000 f91a 	bl	800a2d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a0a0:	4b59      	ldr	r3, [pc, #356]	; (800a208 <pvPortMalloc+0x184>)
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	4013      	ands	r3, r2
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	f040 8092 	bne.w	800a1d2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d01f      	beq.n	800a0f4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800a0b4:	2208      	movs	r2, #8
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	4413      	add	r3, r2
 800a0ba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f003 0307 	and.w	r3, r3, #7
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d016      	beq.n	800a0f4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f023 0307 	bic.w	r3, r3, #7
 800a0cc:	3308      	adds	r3, #8
 800a0ce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f003 0307 	and.w	r3, r3, #7
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d00c      	beq.n	800a0f4 <pvPortMalloc+0x70>
	__asm volatile
 800a0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0de:	b672      	cpsid	i
 800a0e0:	f383 8811 	msr	BASEPRI, r3
 800a0e4:	f3bf 8f6f 	isb	sy
 800a0e8:	f3bf 8f4f 	dsb	sy
 800a0ec:	b662      	cpsie	i
 800a0ee:	617b      	str	r3, [r7, #20]
}
 800a0f0:	bf00      	nop
 800a0f2:	e7fe      	b.n	800a0f2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d06b      	beq.n	800a1d2 <pvPortMalloc+0x14e>
 800a0fa:	4b44      	ldr	r3, [pc, #272]	; (800a20c <pvPortMalloc+0x188>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	429a      	cmp	r2, r3
 800a102:	d866      	bhi.n	800a1d2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a104:	4b42      	ldr	r3, [pc, #264]	; (800a210 <pvPortMalloc+0x18c>)
 800a106:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a108:	4b41      	ldr	r3, [pc, #260]	; (800a210 <pvPortMalloc+0x18c>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a10e:	e004      	b.n	800a11a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800a110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a112:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	429a      	cmp	r2, r3
 800a122:	d903      	bls.n	800a12c <pvPortMalloc+0xa8>
 800a124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d1f1      	bne.n	800a110 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a12c:	4b35      	ldr	r3, [pc, #212]	; (800a204 <pvPortMalloc+0x180>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a132:	429a      	cmp	r2, r3
 800a134:	d04d      	beq.n	800a1d2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a136:	6a3b      	ldr	r3, [r7, #32]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	2208      	movs	r2, #8
 800a13c:	4413      	add	r3, r2
 800a13e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	6a3b      	ldr	r3, [r7, #32]
 800a146:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14a:	685a      	ldr	r2, [r3, #4]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	1ad2      	subs	r2, r2, r3
 800a150:	2308      	movs	r3, #8
 800a152:	005b      	lsls	r3, r3, #1
 800a154:	429a      	cmp	r2, r3
 800a156:	d921      	bls.n	800a19c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	4413      	add	r3, r2
 800a15e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a160:	69bb      	ldr	r3, [r7, #24]
 800a162:	f003 0307 	and.w	r3, r3, #7
 800a166:	2b00      	cmp	r3, #0
 800a168:	d00c      	beq.n	800a184 <pvPortMalloc+0x100>
	__asm volatile
 800a16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a16e:	b672      	cpsid	i
 800a170:	f383 8811 	msr	BASEPRI, r3
 800a174:	f3bf 8f6f 	isb	sy
 800a178:	f3bf 8f4f 	dsb	sy
 800a17c:	b662      	cpsie	i
 800a17e:	613b      	str	r3, [r7, #16]
}
 800a180:	bf00      	nop
 800a182:	e7fe      	b.n	800a182 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a186:	685a      	ldr	r2, [r3, #4]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	1ad2      	subs	r2, r2, r3
 800a18c:	69bb      	ldr	r3, [r7, #24]
 800a18e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a192:	687a      	ldr	r2, [r7, #4]
 800a194:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a196:	69b8      	ldr	r0, [r7, #24]
 800a198:	f000 f8fe 	bl	800a398 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a19c:	4b1b      	ldr	r3, [pc, #108]	; (800a20c <pvPortMalloc+0x188>)
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	1ad3      	subs	r3, r2, r3
 800a1a6:	4a19      	ldr	r2, [pc, #100]	; (800a20c <pvPortMalloc+0x188>)
 800a1a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a1aa:	4b18      	ldr	r3, [pc, #96]	; (800a20c <pvPortMalloc+0x188>)
 800a1ac:	681a      	ldr	r2, [r3, #0]
 800a1ae:	4b19      	ldr	r3, [pc, #100]	; (800a214 <pvPortMalloc+0x190>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d203      	bcs.n	800a1be <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a1b6:	4b15      	ldr	r3, [pc, #84]	; (800a20c <pvPortMalloc+0x188>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4a16      	ldr	r2, [pc, #88]	; (800a214 <pvPortMalloc+0x190>)
 800a1bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c0:	685a      	ldr	r2, [r3, #4]
 800a1c2:	4b11      	ldr	r3, [pc, #68]	; (800a208 <pvPortMalloc+0x184>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	431a      	orrs	r2, r3
 800a1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a1d2:	f7fe fcc5 	bl	8008b60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1d6:	69fb      	ldr	r3, [r7, #28]
 800a1d8:	f003 0307 	and.w	r3, r3, #7
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d00c      	beq.n	800a1fa <pvPortMalloc+0x176>
	__asm volatile
 800a1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e4:	b672      	cpsid	i
 800a1e6:	f383 8811 	msr	BASEPRI, r3
 800a1ea:	f3bf 8f6f 	isb	sy
 800a1ee:	f3bf 8f4f 	dsb	sy
 800a1f2:	b662      	cpsie	i
 800a1f4:	60fb      	str	r3, [r7, #12]
}
 800a1f6:	bf00      	nop
 800a1f8:	e7fe      	b.n	800a1f8 <pvPortMalloc+0x174>
	return pvReturn;
 800a1fa:	69fb      	ldr	r3, [r7, #28]
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3728      	adds	r7, #40	; 0x28
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}
 800a204:	2000b924 	.word	0x2000b924
 800a208:	2000b930 	.word	0x2000b930
 800a20c:	2000b928 	.word	0x2000b928
 800a210:	2000b91c 	.word	0x2000b91c
 800a214:	2000b92c 	.word	0x2000b92c

0800a218 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b086      	sub	sp, #24
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d04c      	beq.n	800a2c4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a22a:	2308      	movs	r3, #8
 800a22c:	425b      	negs	r3, r3
 800a22e:	697a      	ldr	r2, [r7, #20]
 800a230:	4413      	add	r3, r2
 800a232:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	685a      	ldr	r2, [r3, #4]
 800a23c:	4b23      	ldr	r3, [pc, #140]	; (800a2cc <vPortFree+0xb4>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4013      	ands	r3, r2
 800a242:	2b00      	cmp	r3, #0
 800a244:	d10c      	bne.n	800a260 <vPortFree+0x48>
	__asm volatile
 800a246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24a:	b672      	cpsid	i
 800a24c:	f383 8811 	msr	BASEPRI, r3
 800a250:	f3bf 8f6f 	isb	sy
 800a254:	f3bf 8f4f 	dsb	sy
 800a258:	b662      	cpsie	i
 800a25a:	60fb      	str	r3, [r7, #12]
}
 800a25c:	bf00      	nop
 800a25e:	e7fe      	b.n	800a25e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d00c      	beq.n	800a282 <vPortFree+0x6a>
	__asm volatile
 800a268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26c:	b672      	cpsid	i
 800a26e:	f383 8811 	msr	BASEPRI, r3
 800a272:	f3bf 8f6f 	isb	sy
 800a276:	f3bf 8f4f 	dsb	sy
 800a27a:	b662      	cpsie	i
 800a27c:	60bb      	str	r3, [r7, #8]
}
 800a27e:	bf00      	nop
 800a280:	e7fe      	b.n	800a280 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	685a      	ldr	r2, [r3, #4]
 800a286:	4b11      	ldr	r3, [pc, #68]	; (800a2cc <vPortFree+0xb4>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	4013      	ands	r3, r2
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d019      	beq.n	800a2c4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d115      	bne.n	800a2c4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	685a      	ldr	r2, [r3, #4]
 800a29c:	4b0b      	ldr	r3, [pc, #44]	; (800a2cc <vPortFree+0xb4>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	43db      	mvns	r3, r3
 800a2a2:	401a      	ands	r2, r3
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a2a8:	f7fe fc4c 	bl	8008b44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	685a      	ldr	r2, [r3, #4]
 800a2b0:	4b07      	ldr	r3, [pc, #28]	; (800a2d0 <vPortFree+0xb8>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	4413      	add	r3, r2
 800a2b6:	4a06      	ldr	r2, [pc, #24]	; (800a2d0 <vPortFree+0xb8>)
 800a2b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a2ba:	6938      	ldr	r0, [r7, #16]
 800a2bc:	f000 f86c 	bl	800a398 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a2c0:	f7fe fc4e 	bl	8008b60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a2c4:	bf00      	nop
 800a2c6:	3718      	adds	r7, #24
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}
 800a2cc:	2000b930 	.word	0x2000b930
 800a2d0:	2000b928 	.word	0x2000b928

0800a2d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b085      	sub	sp, #20
 800a2d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a2da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a2de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a2e0:	4b27      	ldr	r3, [pc, #156]	; (800a380 <prvHeapInit+0xac>)
 800a2e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f003 0307 	and.w	r3, r3, #7
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d00c      	beq.n	800a308 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	3307      	adds	r3, #7
 800a2f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f023 0307 	bic.w	r3, r3, #7
 800a2fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a2fc:	68ba      	ldr	r2, [r7, #8]
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	1ad3      	subs	r3, r2, r3
 800a302:	4a1f      	ldr	r2, [pc, #124]	; (800a380 <prvHeapInit+0xac>)
 800a304:	4413      	add	r3, r2
 800a306:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a30c:	4a1d      	ldr	r2, [pc, #116]	; (800a384 <prvHeapInit+0xb0>)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a312:	4b1c      	ldr	r3, [pc, #112]	; (800a384 <prvHeapInit+0xb0>)
 800a314:	2200      	movs	r2, #0
 800a316:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	68ba      	ldr	r2, [r7, #8]
 800a31c:	4413      	add	r3, r2
 800a31e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a320:	2208      	movs	r2, #8
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	1a9b      	subs	r3, r3, r2
 800a326:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f023 0307 	bic.w	r3, r3, #7
 800a32e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	4a15      	ldr	r2, [pc, #84]	; (800a388 <prvHeapInit+0xb4>)
 800a334:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a336:	4b14      	ldr	r3, [pc, #80]	; (800a388 <prvHeapInit+0xb4>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	2200      	movs	r2, #0
 800a33c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a33e:	4b12      	ldr	r3, [pc, #72]	; (800a388 <prvHeapInit+0xb4>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	2200      	movs	r2, #0
 800a344:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	68fa      	ldr	r2, [r7, #12]
 800a34e:	1ad2      	subs	r2, r2, r3
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a354:	4b0c      	ldr	r3, [pc, #48]	; (800a388 <prvHeapInit+0xb4>)
 800a356:	681a      	ldr	r2, [r3, #0]
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	4a0a      	ldr	r2, [pc, #40]	; (800a38c <prvHeapInit+0xb8>)
 800a362:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	4a09      	ldr	r2, [pc, #36]	; (800a390 <prvHeapInit+0xbc>)
 800a36a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a36c:	4b09      	ldr	r3, [pc, #36]	; (800a394 <prvHeapInit+0xc0>)
 800a36e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a372:	601a      	str	r2, [r3, #0]
}
 800a374:	bf00      	nop
 800a376:	3714      	adds	r7, #20
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr
 800a380:	20007d1c 	.word	0x20007d1c
 800a384:	2000b91c 	.word	0x2000b91c
 800a388:	2000b924 	.word	0x2000b924
 800a38c:	2000b92c 	.word	0x2000b92c
 800a390:	2000b928 	.word	0x2000b928
 800a394:	2000b930 	.word	0x2000b930

0800a398 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a398:	b480      	push	{r7}
 800a39a:	b085      	sub	sp, #20
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a3a0:	4b28      	ldr	r3, [pc, #160]	; (800a444 <prvInsertBlockIntoFreeList+0xac>)
 800a3a2:	60fb      	str	r3, [r7, #12]
 800a3a4:	e002      	b.n	800a3ac <prvInsertBlockIntoFreeList+0x14>
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	60fb      	str	r3, [r7, #12]
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d8f7      	bhi.n	800a3a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	68ba      	ldr	r2, [r7, #8]
 800a3c0:	4413      	add	r3, r2
 800a3c2:	687a      	ldr	r2, [r7, #4]
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d108      	bne.n	800a3da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	685a      	ldr	r2, [r3, #4]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	441a      	add	r2, r3
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	68ba      	ldr	r2, [r7, #8]
 800a3e4:	441a      	add	r2, r3
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	429a      	cmp	r2, r3
 800a3ec:	d118      	bne.n	800a420 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681a      	ldr	r2, [r3, #0]
 800a3f2:	4b15      	ldr	r3, [pc, #84]	; (800a448 <prvInsertBlockIntoFreeList+0xb0>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	d00d      	beq.n	800a416 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	685a      	ldr	r2, [r3, #4]
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	441a      	add	r2, r3
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	681a      	ldr	r2, [r3, #0]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	601a      	str	r2, [r3, #0]
 800a414:	e008      	b.n	800a428 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a416:	4b0c      	ldr	r3, [pc, #48]	; (800a448 <prvInsertBlockIntoFreeList+0xb0>)
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	601a      	str	r2, [r3, #0]
 800a41e:	e003      	b.n	800a428 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681a      	ldr	r2, [r3, #0]
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a428:	68fa      	ldr	r2, [r7, #12]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	429a      	cmp	r2, r3
 800a42e:	d002      	beq.n	800a436 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a436:	bf00      	nop
 800a438:	3714      	adds	r7, #20
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr
 800a442:	bf00      	nop
 800a444:	2000b91c 	.word	0x2000b91c
 800a448:	2000b924 	.word	0x2000b924

0800a44c <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control>:
 800a44c:	4b04      	ldr	r3, [pc, #16]	; (800a460 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x14>)
 800a44e:	681a      	ldr	r2, [r3, #0]
 800a450:	b10a      	cbz	r2, 800a456 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0xa>
 800a452:	4803      	ldr	r0, [pc, #12]	; (800a460 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x14>)
 800a454:	4770      	bx	lr
 800a456:	4a03      	ldr	r2, [pc, #12]	; (800a464 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x18>)
 800a458:	4801      	ldr	r0, [pc, #4]	; (800a460 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x14>)
 800a45a:	6812      	ldr	r2, [r2, #0]
 800a45c:	601a      	str	r2, [r3, #0]
 800a45e:	4770      	bx	lr
 800a460:	2000001c 	.word	0x2000001c
 800a464:	20000974 	.word	0x20000974

0800a468 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request>:
 800a468:	4b06      	ldr	r3, [pc, #24]	; (800a484 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x1c>)
 800a46a:	4807      	ldr	r0, [pc, #28]	; (800a488 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x20>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4907      	ldr	r1, [pc, #28]	; (800a48c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x24>)
 800a470:	4a07      	ldr	r2, [pc, #28]	; (800a490 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x28>)
 800a472:	b410      	push	{r4}
 800a474:	4c07      	ldr	r4, [pc, #28]	; (800a494 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x2c>)
 800a476:	6003      	str	r3, [r0, #0]
 800a478:	6023      	str	r3, [r4, #0]
 800a47a:	600b      	str	r3, [r1, #0]
 800a47c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a480:	6013      	str	r3, [r2, #0]
 800a482:	4770      	bx	lr
 800a484:	20000974 	.word	0x20000974
 800a488:	20000090 	.word	0x20000090
 800a48c:	20000050 	.word	0x20000050
 800a490:	2000001c 	.word	0x2000001c
 800a494:	20000078 	.word	0x20000078

0800a498 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup>:
 800a498:	4b04      	ldr	r3, [pc, #16]	; (800a4ac <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x14>)
 800a49a:	681a      	ldr	r2, [r3, #0]
 800a49c:	b10a      	cbz	r2, 800a4a2 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0xa>
 800a49e:	4803      	ldr	r0, [pc, #12]	; (800a4ac <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x14>)
 800a4a0:	4770      	bx	lr
 800a4a2:	4a03      	ldr	r2, [pc, #12]	; (800a4b0 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x18>)
 800a4a4:	4801      	ldr	r0, [pc, #4]	; (800a4ac <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x14>)
 800a4a6:	6812      	ldr	r2, [r2, #0]
 800a4a8:	601a      	str	r2, [r3, #0]
 800a4aa:	4770      	bx	lr
 800a4ac:	200000b0 	.word	0x200000b0
 800a4b0:	20000974 	.word	0x20000974

0800a4b4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request>:
 800a4b4:	4b06      	ldr	r3, [pc, #24]	; (800a4d0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x1c>)
 800a4b6:	4807      	ldr	r0, [pc, #28]	; (800a4d4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x20>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	4907      	ldr	r1, [pc, #28]	; (800a4d8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x24>)
 800a4bc:	4a07      	ldr	r2, [pc, #28]	; (800a4dc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x28>)
 800a4be:	b410      	push	{r4}
 800a4c0:	4c07      	ldr	r4, [pc, #28]	; (800a4e0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x2c>)
 800a4c2:	6003      	str	r3, [r0, #0]
 800a4c4:	6023      	str	r3, [r4, #0]
 800a4c6:	600b      	str	r3, [r1, #0]
 800a4c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4cc:	6013      	str	r3, [r2, #0]
 800a4ce:	4770      	bx	lr
 800a4d0:	20000974 	.word	0x20000974
 800a4d4:	20000124 	.word	0x20000124
 800a4d8:	200000e4 	.word	0x200000e4
 800a4dc:	200000b0 	.word	0x200000b0
 800a4e0:	2000010c 	.word	0x2000010c

0800a4e4 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__size_function__Control_Request__values>:
 800a4e4:	6840      	ldr	r0, [r0, #4]
 800a4e6:	4770      	bx	lr

0800a4e8 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__get_const_function__Control_Request__values>:
 800a4e8:	6800      	ldr	r0, [r0, #0]
 800a4ea:	4408      	add	r0, r1
 800a4ec:	4770      	bx	lr
 800a4ee:	bf00      	nop

0800a4f0 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__fetch_function__Control_Request__values>:
 800a4f0:	6803      	ldr	r3, [r0, #0]
 800a4f2:	5c5b      	ldrb	r3, [r3, r1]
 800a4f4:	7013      	strb	r3, [r2, #0]
 800a4f6:	4770      	bx	lr

0800a4f8 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__assign_function__Control_Request__values>:
 800a4f8:	7812      	ldrb	r2, [r2, #0]
 800a4fa:	6803      	ldr	r3, [r0, #0]
 800a4fc:	545a      	strb	r2, [r3, r1]
 800a4fe:	4770      	bx	lr

0800a500 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__size_function__Control_Event__request>:
 800a500:	6840      	ldr	r0, [r0, #4]
 800a502:	4770      	bx	lr

0800a504 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_const_function__Control_Event__request>:
 800a504:	6800      	ldr	r0, [r0, #0]
 800a506:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800a50a:	4770      	bx	lr

0800a50c <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__fetch_function__Control_Event__request>:
 800a50c:	6803      	ldr	r3, [r0, #0]
 800a50e:	4694      	mov	ip, r2
 800a510:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 800a514:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 800a516:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800a51a:	4770      	bx	lr

0800a51c <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__assign_function__Control_Event__request>:
 800a51c:	6803      	ldr	r3, [r0, #0]
 800a51e:	eb03 1c01 	add.w	ip, r3, r1, lsl #4
 800a522:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800a524:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800a528:	4770      	bx	lr
 800a52a:	bf00      	nop

0800a52c <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__size_function__Control_Event__response>:
 800a52c:	6840      	ldr	r0, [r0, #4]
 800a52e:	4770      	bx	lr

0800a530 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_const_function__Control_Event__response>:
 800a530:	6800      	ldr	r0, [r0, #0]
 800a532:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800a536:	4770      	bx	lr

0800a538 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__fetch_function__Control_Event__response>:
 800a538:	6803      	ldr	r3, [r0, #0]
 800a53a:	4694      	mov	ip, r2
 800a53c:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 800a540:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 800a542:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800a546:	4770      	bx	lr

0800a548 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__assign_function__Control_Event__response>:
 800a548:	6803      	ldr	r3, [r0, #0]
 800a54a:	eb03 1c01 	add.w	ip, r3, r1, lsl #4
 800a54e:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800a550:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800a554:	4770      	bx	lr
 800a556:	bf00      	nop

0800a558 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__Control_Request_init_function>:
 800a558:	f003 bf90 	b.w	800e47c <racs_services__srv__Control_Request__init>

0800a55c <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__Control_Request_fini_function>:
 800a55c:	f003 bfa2 	b.w	800e4a4 <racs_services__srv__Control_Request__fini>

0800a560 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__resize_function__Control_Request__values>:
 800a560:	b510      	push	{r4, lr}
 800a562:	4604      	mov	r4, r0
 800a564:	b082      	sub	sp, #8
 800a566:	9101      	str	r1, [sp, #4]
 800a568:	f001 fe9e 	bl	800c2a8 <rosidl_runtime_c__uint8__Sequence__fini>
 800a56c:	9901      	ldr	r1, [sp, #4]
 800a56e:	4620      	mov	r0, r4
 800a570:	b002      	add	sp, #8
 800a572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a576:	f001 be7f 	b.w	800c278 <rosidl_runtime_c__uint8__Sequence__init>
 800a57a:	bf00      	nop

0800a57c <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__Control_Response_init_function>:
 800a57c:	f003 bfd4 	b.w	800e528 <racs_services__srv__Control_Response__init>

0800a580 <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__Control_Response_fini_function>:
 800a580:	f003 bfe6 	b.w	800e550 <racs_services__srv__Control_Response__fini>

0800a584 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__Control_Event_init_function>:
 800a584:	f004 b820 	b.w	800e5c8 <racs_services__srv__Control_Event__init>

0800a588 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__Control_Event_fini_function>:
 800a588:	f004 b882 	b.w	800e690 <racs_services__srv__Control_Event__fini>

0800a58c <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__resize_function__Control_Event__request>:
 800a58c:	b510      	push	{r4, lr}
 800a58e:	4604      	mov	r4, r0
 800a590:	b082      	sub	sp, #8
 800a592:	9101      	str	r1, [sp, #4]
 800a594:	f003 ffa0 	bl	800e4d8 <racs_services__srv__Control_Request__Sequence__fini>
 800a598:	9901      	ldr	r1, [sp, #4]
 800a59a:	4620      	mov	r0, r4
 800a59c:	b002      	add	sp, #8
 800a59e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5a2:	f003 bf95 	b.w	800e4d0 <racs_services__srv__Control_Request__Sequence__init>
 800a5a6:	bf00      	nop

0800a5a8 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__resize_function__Control_Event__response>:
 800a5a8:	b510      	push	{r4, lr}
 800a5aa:	4604      	mov	r4, r0
 800a5ac:	b082      	sub	sp, #8
 800a5ae:	9101      	str	r1, [sp, #4]
 800a5b0:	f003 ffe2 	bl	800e578 <racs_services__srv__Control_Response__Sequence__fini>
 800a5b4:	9901      	ldr	r1, [sp, #4]
 800a5b6:	4620      	mov	r0, r4
 800a5b8:	b002      	add	sp, #8
 800a5ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5be:	f003 bfd7 	b.w	800e570 <racs_services__srv__Control_Response__Sequence__init>
 800a5c2:	bf00      	nop

0800a5c4 <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__get_function__Control_Response__encoders>:
 800a5c4:	6800      	ldr	r0, [r0, #0]
 800a5c6:	4408      	add	r0, r1
 800a5c8:	4770      	bx	lr
 800a5ca:	bf00      	nop

0800a5cc <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__get_function__Control_Request__values>:
 800a5cc:	6800      	ldr	r0, [r0, #0]
 800a5ce:	4408      	add	r0, r1
 800a5d0:	4770      	bx	lr
 800a5d2:	bf00      	nop

0800a5d4 <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__size_function__Control_Response__encoders>:
 800a5d4:	6840      	ldr	r0, [r0, #4]
 800a5d6:	4770      	bx	lr

0800a5d8 <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__get_const_function__Control_Response__encoders>:
 800a5d8:	6800      	ldr	r0, [r0, #0]
 800a5da:	4408      	add	r0, r1
 800a5dc:	4770      	bx	lr
 800a5de:	bf00      	nop

0800a5e0 <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__fetch_function__Control_Response__encoders>:
 800a5e0:	6803      	ldr	r3, [r0, #0]
 800a5e2:	5c5b      	ldrb	r3, [r3, r1]
 800a5e4:	7013      	strb	r3, [r2, #0]
 800a5e6:	4770      	bx	lr

0800a5e8 <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__assign_function__Control_Response__encoders>:
 800a5e8:	7812      	ldrb	r2, [r2, #0]
 800a5ea:	6803      	ldr	r3, [r0, #0]
 800a5ec:	545a      	strb	r2, [r3, r1]
 800a5ee:	4770      	bx	lr

0800a5f0 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_function__Control_Event__request>:
 800a5f0:	6800      	ldr	r0, [r0, #0]
 800a5f2:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800a5f6:	4770      	bx	lr

0800a5f8 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_function__Control_Event__response>:
 800a5f8:	6800      	ldr	r0, [r0, #0]
 800a5fa:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800a5fe:	4770      	bx	lr

0800a600 <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__resize_function__Control_Response__encoders>:
 800a600:	b510      	push	{r4, lr}
 800a602:	4604      	mov	r4, r0
 800a604:	b082      	sub	sp, #8
 800a606:	9101      	str	r1, [sp, #4]
 800a608:	f001 fe4e 	bl	800c2a8 <rosidl_runtime_c__uint8__Sequence__fini>
 800a60c:	9901      	ldr	r1, [sp, #4]
 800a60e:	4620      	mov	r0, r4
 800a610:	b002      	add	sp, #8
 800a612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a616:	f001 be2f 	b.w	800c278 <rosidl_runtime_c__uint8__Sequence__init>
 800a61a:	bf00      	nop

0800a61c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request>:
 800a61c:	4b04      	ldr	r3, [pc, #16]	; (800a630 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x14>)
 800a61e:	681a      	ldr	r2, [r3, #0]
 800a620:	b10a      	cbz	r2, 800a626 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0xa>
 800a622:	4803      	ldr	r0, [pc, #12]	; (800a630 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x14>)
 800a624:	4770      	bx	lr
 800a626:	4a03      	ldr	r2, [pc, #12]	; (800a634 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x18>)
 800a628:	4801      	ldr	r0, [pc, #4]	; (800a630 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x14>)
 800a62a:	6812      	ldr	r2, [r2, #0]
 800a62c:	601a      	str	r2, [r3, #0]
 800a62e:	4770      	bx	lr
 800a630:	200002f8 	.word	0x200002f8
 800a634:	20000978 	.word	0x20000978

0800a638 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response>:
 800a638:	4b04      	ldr	r3, [pc, #16]	; (800a64c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x14>)
 800a63a:	681a      	ldr	r2, [r3, #0]
 800a63c:	b10a      	cbz	r2, 800a642 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0xa>
 800a63e:	4803      	ldr	r0, [pc, #12]	; (800a64c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x14>)
 800a640:	4770      	bx	lr
 800a642:	4a03      	ldr	r2, [pc, #12]	; (800a650 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x18>)
 800a644:	4801      	ldr	r0, [pc, #4]	; (800a64c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x14>)
 800a646:	6812      	ldr	r2, [r2, #0]
 800a648:	601a      	str	r2, [r3, #0]
 800a64a:	4770      	bx	lr
 800a64c:	2000043c 	.word	0x2000043c
 800a650:	20000978 	.word	0x20000978

0800a654 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event>:
 800a654:	b508      	push	{r3, lr}
 800a656:	f001 fee1 	bl	800c41c <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800a65a:	4913      	ldr	r1, [pc, #76]	; (800a6a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x54>)
 800a65c:	4b13      	ldr	r3, [pc, #76]	; (800a6ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x58>)
 800a65e:	680a      	ldr	r2, [r1, #0]
 800a660:	60d8      	str	r0, [r3, #12]
 800a662:	b152      	cbz	r2, 800a67a <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x26>
 800a664:	4a12      	ldr	r2, [pc, #72]	; (800a6b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x5c>)
 800a666:	6499      	str	r1, [r3, #72]	; 0x48
 800a668:	6811      	ldr	r1, [r2, #0]
 800a66a:	b171      	cbz	r1, 800a68a <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x36>
 800a66c:	4911      	ldr	r1, [pc, #68]	; (800a6b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800a66e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800a672:	680b      	ldr	r3, [r1, #0]
 800a674:	b193      	cbz	r3, 800a69c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x48>
 800a676:	480f      	ldr	r0, [pc, #60]	; (800a6b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800a678:	bd08      	pop	{r3, pc}
 800a67a:	4a0f      	ldr	r2, [pc, #60]	; (800a6b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x64>)
 800a67c:	6499      	str	r1, [r3, #72]	; 0x48
 800a67e:	6812      	ldr	r2, [r2, #0]
 800a680:	600a      	str	r2, [r1, #0]
 800a682:	4a0b      	ldr	r2, [pc, #44]	; (800a6b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x5c>)
 800a684:	6811      	ldr	r1, [r2, #0]
 800a686:	2900      	cmp	r1, #0
 800a688:	d1f0      	bne.n	800a66c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x18>
 800a68a:	490b      	ldr	r1, [pc, #44]	; (800a6b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x64>)
 800a68c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800a690:	6809      	ldr	r1, [r1, #0]
 800a692:	6011      	str	r1, [r2, #0]
 800a694:	4907      	ldr	r1, [pc, #28]	; (800a6b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800a696:	680b      	ldr	r3, [r1, #0]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d1ec      	bne.n	800a676 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x22>
 800a69c:	4b06      	ldr	r3, [pc, #24]	; (800a6b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x64>)
 800a69e:	4805      	ldr	r0, [pc, #20]	; (800a6b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	600b      	str	r3, [r1, #0]
 800a6a4:	bd08      	pop	{r3, pc}
 800a6a6:	bf00      	nop
 800a6a8:	200002f8 	.word	0x200002f8
 800a6ac:	2000013c 	.word	0x2000013c
 800a6b0:	2000043c 	.word	0x2000043c
 800a6b4:	200001f0 	.word	0x200001f0
 800a6b8:	20000978 	.word	0x20000978

0800a6bc <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control>:
 800a6bc:	4b25      	ldr	r3, [pc, #148]	; (800a754 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x98>)
 800a6be:	681a      	ldr	r2, [r3, #0]
 800a6c0:	b510      	push	{r4, lr}
 800a6c2:	b142      	cbz	r2, 800a6d6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x1a>
 800a6c4:	685c      	ldr	r4, [r3, #4]
 800a6c6:	68a3      	ldr	r3, [r4, #8]
 800a6c8:	b163      	cbz	r3, 800a6e4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x28>
 800a6ca:	68e3      	ldr	r3, [r4, #12]
 800a6cc:	b193      	cbz	r3, 800a6f4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x38>
 800a6ce:	6923      	ldr	r3, [r4, #16]
 800a6d0:	b1c3      	cbz	r3, 800a704 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x48>
 800a6d2:	4820      	ldr	r0, [pc, #128]	; (800a754 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x98>)
 800a6d4:	bd10      	pop	{r4, pc}
 800a6d6:	4a20      	ldr	r2, [pc, #128]	; (800a758 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800a6d8:	685c      	ldr	r4, [r3, #4]
 800a6da:	6812      	ldr	r2, [r2, #0]
 800a6dc:	601a      	str	r2, [r3, #0]
 800a6de:	68a3      	ldr	r3, [r4, #8]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d1f2      	bne.n	800a6ca <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xe>
 800a6e4:	4a1d      	ldr	r2, [pc, #116]	; (800a75c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa0>)
 800a6e6:	6813      	ldr	r3, [r2, #0]
 800a6e8:	b303      	cbz	r3, 800a72c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x70>
 800a6ea:	6853      	ldr	r3, [r2, #4]
 800a6ec:	60a3      	str	r3, [r4, #8]
 800a6ee:	68e3      	ldr	r3, [r4, #12]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d1ec      	bne.n	800a6ce <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x12>
 800a6f4:	4b1a      	ldr	r3, [pc, #104]	; (800a760 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa4>)
 800a6f6:	681a      	ldr	r2, [r3, #0]
 800a6f8:	b1e2      	cbz	r2, 800a734 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x78>
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	60e3      	str	r3, [r4, #12]
 800a6fe:	6923      	ldr	r3, [r4, #16]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d1e6      	bne.n	800a6d2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x16>
 800a704:	f001 fe8a 	bl	800c41c <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800a708:	4a14      	ldr	r2, [pc, #80]	; (800a75c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa0>)
 800a70a:	4916      	ldr	r1, [pc, #88]	; (800a764 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa8>)
 800a70c:	6813      	ldr	r3, [r2, #0]
 800a70e:	60c8      	str	r0, [r1, #12]
 800a710:	b1e3      	cbz	r3, 800a74c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x90>
 800a712:	4b13      	ldr	r3, [pc, #76]	; (800a760 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa4>)
 800a714:	648a      	str	r2, [r1, #72]	; 0x48
 800a716:	681a      	ldr	r2, [r3, #0]
 800a718:	b1a2      	cbz	r2, 800a744 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x88>
 800a71a:	4a13      	ldr	r2, [pc, #76]	; (800a768 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xac>)
 800a71c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 800a720:	6813      	ldr	r3, [r2, #0]
 800a722:	b15b      	cbz	r3, 800a73c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x80>
 800a724:	6853      	ldr	r3, [r2, #4]
 800a726:	480b      	ldr	r0, [pc, #44]	; (800a754 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x98>)
 800a728:	6123      	str	r3, [r4, #16]
 800a72a:	bd10      	pop	{r4, pc}
 800a72c:	4b0a      	ldr	r3, [pc, #40]	; (800a758 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	6013      	str	r3, [r2, #0]
 800a732:	e7da      	b.n	800a6ea <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x2e>
 800a734:	4a08      	ldr	r2, [pc, #32]	; (800a758 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800a736:	6812      	ldr	r2, [r2, #0]
 800a738:	601a      	str	r2, [r3, #0]
 800a73a:	e7de      	b.n	800a6fa <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x3e>
 800a73c:	4b06      	ldr	r3, [pc, #24]	; (800a758 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	6013      	str	r3, [r2, #0]
 800a742:	e7ef      	b.n	800a724 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x68>
 800a744:	4a04      	ldr	r2, [pc, #16]	; (800a758 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800a746:	6812      	ldr	r2, [r2, #0]
 800a748:	601a      	str	r2, [r3, #0]
 800a74a:	e7e6      	b.n	800a71a <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x5e>
 800a74c:	4b02      	ldr	r3, [pc, #8]	; (800a758 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	6013      	str	r3, [r2, #0]
 800a752:	e7de      	b.n	800a712 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x56>
 800a754:	20000468 	.word	0x20000468
 800a758:	20000978 	.word	0x20000978
 800a75c:	200002f8 	.word	0x200002f8
 800a760:	2000043c 	.word	0x2000043c
 800a764:	2000013c 	.word	0x2000013c
 800a768:	200001f0 	.word	0x200001f0

0800a76c <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__size_function__Setup_Event__request>:
 800a76c:	6840      	ldr	r0, [r0, #4]
 800a76e:	4770      	bx	lr

0800a770 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_const_function__Setup_Event__request>:
 800a770:	6800      	ldr	r0, [r0, #0]
 800a772:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800a776:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800a77a:	4770      	bx	lr

0800a77c <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__fetch_function__Setup_Event__request>:
 800a77c:	6803      	ldr	r3, [r0, #0]
 800a77e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800a782:	4694      	mov	ip, r2
 800a784:	b500      	push	{lr}
 800a786:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 800a78a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a78e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a792:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800a796:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800a79a:	f85d fb04 	ldr.w	pc, [sp], #4
 800a79e:	bf00      	nop

0800a7a0 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__assign_function__Setup_Event__request>:
 800a7a0:	6803      	ldr	r3, [r0, #0]
 800a7a2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800a7a6:	b500      	push	{lr}
 800a7a8:	4696      	mov	lr, r2
 800a7aa:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 800a7ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a7b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a7b6:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800a7ba:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800a7be:	f85d fb04 	ldr.w	pc, [sp], #4
 800a7c2:	bf00      	nop

0800a7c4 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__size_function__Setup_Event__response>:
 800a7c4:	6840      	ldr	r0, [r0, #4]
 800a7c6:	4770      	bx	lr

0800a7c8 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_const_function__Setup_Event__response>:
 800a7c8:	6800      	ldr	r0, [r0, #0]
 800a7ca:	4408      	add	r0, r1
 800a7cc:	4770      	bx	lr
 800a7ce:	bf00      	nop

0800a7d0 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__fetch_function__Setup_Event__response>:
 800a7d0:	6803      	ldr	r3, [r0, #0]
 800a7d2:	5c5b      	ldrb	r3, [r3, r1]
 800a7d4:	7013      	strb	r3, [r2, #0]
 800a7d6:	4770      	bx	lr

0800a7d8 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__assign_function__Setup_Event__response>:
 800a7d8:	6803      	ldr	r3, [r0, #0]
 800a7da:	7812      	ldrb	r2, [r2, #0]
 800a7dc:	545a      	strb	r2, [r3, r1]
 800a7de:	4770      	bx	lr

0800a7e0 <racs_services__srv__Setup_Request__rosidl_typesupport_introspection_c__Setup_Request_init_function>:
 800a7e0:	f004 b9f4 	b.w	800ebcc <racs_services__srv__Setup_Request__init>

0800a7e4 <racs_services__srv__Setup_Request__rosidl_typesupport_introspection_c__Setup_Request_fini_function>:
 800a7e4:	f004 b9f6 	b.w	800ebd4 <racs_services__srv__Setup_Request__fini>

0800a7e8 <racs_services__srv__Setup_Response__rosidl_typesupport_introspection_c__Setup_Response_init_function>:
 800a7e8:	f004 ba3e 	b.w	800ec68 <racs_services__srv__Setup_Response__init>

0800a7ec <racs_services__srv__Setup_Response__rosidl_typesupport_introspection_c__Setup_Response_fini_function>:
 800a7ec:	f004 ba40 	b.w	800ec70 <racs_services__srv__Setup_Response__fini>

0800a7f0 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__Setup_Event_init_function>:
 800a7f0:	f004 ba76 	b.w	800ece0 <racs_services__srv__Setup_Event__init>

0800a7f4 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__Setup_Event_fini_function>:
 800a7f4:	f004 ba96 	b.w	800ed24 <racs_services__srv__Setup_Event__fini>

0800a7f8 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__resize_function__Setup_Event__request>:
 800a7f8:	b510      	push	{r4, lr}
 800a7fa:	4604      	mov	r4, r0
 800a7fc:	b082      	sub	sp, #8
 800a7fe:	9101      	str	r1, [sp, #4]
 800a800:	f004 fa1e 	bl	800ec40 <racs_services__srv__Setup_Request__Sequence__fini>
 800a804:	9901      	ldr	r1, [sp, #4]
 800a806:	4620      	mov	r0, r4
 800a808:	b002      	add	sp, #8
 800a80a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a80e:	f004 b9fd 	b.w	800ec0c <racs_services__srv__Setup_Request__Sequence__init>
 800a812:	bf00      	nop

0800a814 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__resize_function__Setup_Event__response>:
 800a814:	b510      	push	{r4, lr}
 800a816:	4604      	mov	r4, r0
 800a818:	b082      	sub	sp, #8
 800a81a:	9101      	str	r1, [sp, #4]
 800a81c:	f004 fa4c 	bl	800ecb8 <racs_services__srv__Setup_Response__Sequence__fini>
 800a820:	9901      	ldr	r1, [sp, #4]
 800a822:	4620      	mov	r0, r4
 800a824:	b002      	add	sp, #8
 800a826:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a82a:	f004 ba2b 	b.w	800ec84 <racs_services__srv__Setup_Response__Sequence__init>
 800a82e:	bf00      	nop

0800a830 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_function__Setup_Event__response>:
 800a830:	6800      	ldr	r0, [r0, #0]
 800a832:	4408      	add	r0, r1
 800a834:	4770      	bx	lr
 800a836:	bf00      	nop

0800a838 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_function__Setup_Event__request>:
 800a838:	6800      	ldr	r0, [r0, #0]
 800a83a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800a83e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800a842:	4770      	bx	lr

0800a844 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request>:
 800a844:	4b04      	ldr	r3, [pc, #16]	; (800a858 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x14>)
 800a846:	681a      	ldr	r2, [r3, #0]
 800a848:	b10a      	cbz	r2, 800a84e <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0xa>
 800a84a:	4803      	ldr	r0, [pc, #12]	; (800a858 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x14>)
 800a84c:	4770      	bx	lr
 800a84e:	4a03      	ldr	r2, [pc, #12]	; (800a85c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x18>)
 800a850:	4801      	ldr	r0, [pc, #4]	; (800a858 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x14>)
 800a852:	6812      	ldr	r2, [r2, #0]
 800a854:	601a      	str	r2, [r3, #0]
 800a856:	4770      	bx	lr
 800a858:	20000704 	.word	0x20000704
 800a85c:	20000978 	.word	0x20000978

0800a860 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response>:
 800a860:	4b04      	ldr	r3, [pc, #16]	; (800a874 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x14>)
 800a862:	681a      	ldr	r2, [r3, #0]
 800a864:	b10a      	cbz	r2, 800a86a <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0xa>
 800a866:	4803      	ldr	r0, [pc, #12]	; (800a874 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x14>)
 800a868:	4770      	bx	lr
 800a86a:	4a03      	ldr	r2, [pc, #12]	; (800a878 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x18>)
 800a86c:	4801      	ldr	r0, [pc, #4]	; (800a874 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x14>)
 800a86e:	6812      	ldr	r2, [r2, #0]
 800a870:	601a      	str	r2, [r3, #0]
 800a872:	4770      	bx	lr
 800a874:	20000758 	.word	0x20000758
 800a878:	20000978 	.word	0x20000978

0800a87c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event>:
 800a87c:	b508      	push	{r3, lr}
 800a87e:	f001 fdcd 	bl	800c41c <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800a882:	4913      	ldr	r1, [pc, #76]	; (800a8d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x54>)
 800a884:	4b13      	ldr	r3, [pc, #76]	; (800a8d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x58>)
 800a886:	680a      	ldr	r2, [r1, #0]
 800a888:	60d8      	str	r0, [r3, #12]
 800a88a:	b152      	cbz	r2, 800a8a2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x26>
 800a88c:	4a12      	ldr	r2, [pc, #72]	; (800a8d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x5c>)
 800a88e:	6499      	str	r1, [r3, #72]	; 0x48
 800a890:	6811      	ldr	r1, [r2, #0]
 800a892:	b171      	cbz	r1, 800a8b2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x36>
 800a894:	4911      	ldr	r1, [pc, #68]	; (800a8dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800a896:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800a89a:	680b      	ldr	r3, [r1, #0]
 800a89c:	b193      	cbz	r3, 800a8c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x48>
 800a89e:	480f      	ldr	r0, [pc, #60]	; (800a8dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800a8a0:	bd08      	pop	{r3, pc}
 800a8a2:	4a0f      	ldr	r2, [pc, #60]	; (800a8e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x64>)
 800a8a4:	6499      	str	r1, [r3, #72]	; 0x48
 800a8a6:	6812      	ldr	r2, [r2, #0]
 800a8a8:	600a      	str	r2, [r1, #0]
 800a8aa:	4a0b      	ldr	r2, [pc, #44]	; (800a8d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x5c>)
 800a8ac:	6811      	ldr	r1, [r2, #0]
 800a8ae:	2900      	cmp	r1, #0
 800a8b0:	d1f0      	bne.n	800a894 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x18>
 800a8b2:	490b      	ldr	r1, [pc, #44]	; (800a8e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x64>)
 800a8b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800a8b8:	6809      	ldr	r1, [r1, #0]
 800a8ba:	6011      	str	r1, [r2, #0]
 800a8bc:	4907      	ldr	r1, [pc, #28]	; (800a8dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800a8be:	680b      	ldr	r3, [r1, #0]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d1ec      	bne.n	800a89e <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x22>
 800a8c4:	4b06      	ldr	r3, [pc, #24]	; (800a8e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x64>)
 800a8c6:	4805      	ldr	r0, [pc, #20]	; (800a8dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	600b      	str	r3, [r1, #0]
 800a8cc:	bd08      	pop	{r3, pc}
 800a8ce:	bf00      	nop
 800a8d0:	20000704 	.word	0x20000704
 800a8d4:	20000494 	.word	0x20000494
 800a8d8:	20000758 	.word	0x20000758
 800a8dc:	20000548 	.word	0x20000548
 800a8e0:	20000978 	.word	0x20000978

0800a8e4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup>:
 800a8e4:	4b25      	ldr	r3, [pc, #148]	; (800a97c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x98>)
 800a8e6:	681a      	ldr	r2, [r3, #0]
 800a8e8:	b510      	push	{r4, lr}
 800a8ea:	b142      	cbz	r2, 800a8fe <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x1a>
 800a8ec:	685c      	ldr	r4, [r3, #4]
 800a8ee:	68a3      	ldr	r3, [r4, #8]
 800a8f0:	b163      	cbz	r3, 800a90c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x28>
 800a8f2:	68e3      	ldr	r3, [r4, #12]
 800a8f4:	b193      	cbz	r3, 800a91c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x38>
 800a8f6:	6923      	ldr	r3, [r4, #16]
 800a8f8:	b1c3      	cbz	r3, 800a92c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x48>
 800a8fa:	4820      	ldr	r0, [pc, #128]	; (800a97c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x98>)
 800a8fc:	bd10      	pop	{r4, pc}
 800a8fe:	4a20      	ldr	r2, [pc, #128]	; (800a980 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800a900:	685c      	ldr	r4, [r3, #4]
 800a902:	6812      	ldr	r2, [r2, #0]
 800a904:	601a      	str	r2, [r3, #0]
 800a906:	68a3      	ldr	r3, [r4, #8]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d1f2      	bne.n	800a8f2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xe>
 800a90c:	4a1d      	ldr	r2, [pc, #116]	; (800a984 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa0>)
 800a90e:	6813      	ldr	r3, [r2, #0]
 800a910:	b303      	cbz	r3, 800a954 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x70>
 800a912:	6853      	ldr	r3, [r2, #4]
 800a914:	60a3      	str	r3, [r4, #8]
 800a916:	68e3      	ldr	r3, [r4, #12]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d1ec      	bne.n	800a8f6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x12>
 800a91c:	4b1a      	ldr	r3, [pc, #104]	; (800a988 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa4>)
 800a91e:	681a      	ldr	r2, [r3, #0]
 800a920:	b1e2      	cbz	r2, 800a95c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x78>
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	60e3      	str	r3, [r4, #12]
 800a926:	6923      	ldr	r3, [r4, #16]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d1e6      	bne.n	800a8fa <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x16>
 800a92c:	f001 fd76 	bl	800c41c <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800a930:	4a14      	ldr	r2, [pc, #80]	; (800a984 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa0>)
 800a932:	4916      	ldr	r1, [pc, #88]	; (800a98c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa8>)
 800a934:	6813      	ldr	r3, [r2, #0]
 800a936:	60c8      	str	r0, [r1, #12]
 800a938:	b1e3      	cbz	r3, 800a974 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x90>
 800a93a:	4b13      	ldr	r3, [pc, #76]	; (800a988 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa4>)
 800a93c:	648a      	str	r2, [r1, #72]	; 0x48
 800a93e:	681a      	ldr	r2, [r3, #0]
 800a940:	b1a2      	cbz	r2, 800a96c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x88>
 800a942:	4a13      	ldr	r2, [pc, #76]	; (800a990 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xac>)
 800a944:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 800a948:	6813      	ldr	r3, [r2, #0]
 800a94a:	b15b      	cbz	r3, 800a964 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x80>
 800a94c:	6853      	ldr	r3, [r2, #4]
 800a94e:	480b      	ldr	r0, [pc, #44]	; (800a97c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x98>)
 800a950:	6123      	str	r3, [r4, #16]
 800a952:	bd10      	pop	{r4, pc}
 800a954:	4b0a      	ldr	r3, [pc, #40]	; (800a980 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	6013      	str	r3, [r2, #0]
 800a95a:	e7da      	b.n	800a912 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x2e>
 800a95c:	4a08      	ldr	r2, [pc, #32]	; (800a980 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800a95e:	6812      	ldr	r2, [r2, #0]
 800a960:	601a      	str	r2, [r3, #0]
 800a962:	e7de      	b.n	800a922 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x3e>
 800a964:	4b06      	ldr	r3, [pc, #24]	; (800a980 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	6013      	str	r3, [r2, #0]
 800a96a:	e7ef      	b.n	800a94c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x68>
 800a96c:	4a04      	ldr	r2, [pc, #16]	; (800a980 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800a96e:	6812      	ldr	r2, [r2, #0]
 800a970:	601a      	str	r2, [r3, #0]
 800a972:	e7e6      	b.n	800a942 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x5e>
 800a974:	4b02      	ldr	r3, [pc, #8]	; (800a980 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	6013      	str	r3, [r2, #0]
 800a97a:	e7de      	b.n	800a93a <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x56>
 800a97c:	20000784 	.word	0x20000784
 800a980:	20000978 	.word	0x20000978
 800a984:	20000704 	.word	0x20000704
 800a988:	20000758 	.word	0x20000758
 800a98c:	20000494 	.word	0x20000494
 800a990:	20000548 	.word	0x20000548

0800a994 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Request>:
 800a994:	4800      	ldr	r0, [pc, #0]	; (800a998 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x4>)
 800a996:	4770      	bx	lr
 800a998:	20000804 	.word	0x20000804

0800a99c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Response>:
 800a99c:	4800      	ldr	r0, [pc, #0]	; (800a9a0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x4>)
 800a99e:	4770      	bx	lr
 800a9a0:	2000081c 	.word	0x2000081c

0800a9a4 <_Control_Event__max_serialized_size>:
 800a9a4:	b500      	push	{lr}
 800a9a6:	b083      	sub	sp, #12
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	2100      	movs	r1, #0
 800a9ac:	f10d 0007 	add.w	r0, sp, #7
 800a9b0:	f88d 3007 	strb.w	r3, [sp, #7]
 800a9b4:	f001 fde2 	bl	800c57c <max_serialized_size_service_msgs__msg__ServiceEventInfo>
 800a9b8:	b003      	add	sp, #12
 800a9ba:	f85d fb04 	ldr.w	pc, [sp], #4
 800a9be:	bf00      	nop

0800a9c0 <get_serialized_size_racs_services__srv__Control_Request>:
 800a9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9c2:	4604      	mov	r4, r0
 800a9c4:	b1d8      	cbz	r0, 800a9fe <get_serialized_size_racs_services__srv__Control_Request+0x3e>
 800a9c6:	460d      	mov	r5, r1
 800a9c8:	2101      	movs	r1, #1
 800a9ca:	1c6e      	adds	r6, r5, #1
 800a9cc:	4628      	mov	r0, r5
 800a9ce:	f003 fa47 	bl	800de60 <ucdr_alignment>
 800a9d2:	2101      	movs	r1, #1
 800a9d4:	4406      	add	r6, r0
 800a9d6:	4630      	mov	r0, r6
 800a9d8:	f003 fa42 	bl	800de60 <ucdr_alignment>
 800a9dc:	2101      	movs	r1, #1
 800a9de:	1847      	adds	r7, r0, r1
 800a9e0:	4437      	add	r7, r6
 800a9e2:	4638      	mov	r0, r7
 800a9e4:	f003 fa3c 	bl	800de60 <ucdr_alignment>
 800a9e8:	68a6      	ldr	r6, [r4, #8]
 800a9ea:	1c44      	adds	r4, r0, #1
 800a9ec:	2104      	movs	r1, #4
 800a9ee:	443c      	add	r4, r7
 800a9f0:	4620      	mov	r0, r4
 800a9f2:	f003 fa35 	bl	800de60 <ucdr_alignment>
 800a9f6:	1d03      	adds	r3, r0, #4
 800a9f8:	441c      	add	r4, r3
 800a9fa:	b90e      	cbnz	r6, 800aa00 <get_serialized_size_racs_services__srv__Control_Request+0x40>
 800a9fc:	1b60      	subs	r0, r4, r5
 800a9fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa00:	4620      	mov	r0, r4
 800aa02:	2101      	movs	r1, #1
 800aa04:	f003 fa2c 	bl	800de60 <ucdr_alignment>
 800aa08:	1933      	adds	r3, r6, r4
 800aa0a:	181c      	adds	r4, r3, r0
 800aa0c:	1b60      	subs	r0, r4, r5
 800aa0e:	e7f6      	b.n	800a9fe <get_serialized_size_racs_services__srv__Control_Request+0x3e>

0800aa10 <get_serialized_size_racs_services__srv__Control_Response.part.0>:
 800aa10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa12:	460e      	mov	r6, r1
 800aa14:	4607      	mov	r7, r0
 800aa16:	2101      	movs	r1, #1
 800aa18:	1c75      	adds	r5, r6, #1
 800aa1a:	4630      	mov	r0, r6
 800aa1c:	f003 fa20 	bl	800de60 <ucdr_alignment>
 800aa20:	2101      	movs	r1, #1
 800aa22:	4405      	add	r5, r0
 800aa24:	4628      	mov	r0, r5
 800aa26:	f003 fa1b 	bl	800de60 <ucdr_alignment>
 800aa2a:	2101      	movs	r1, #1
 800aa2c:	1844      	adds	r4, r0, r1
 800aa2e:	4425      	add	r5, r4
 800aa30:	4628      	mov	r0, r5
 800aa32:	f003 fa15 	bl	800de60 <ucdr_alignment>
 800aa36:	2101      	movs	r1, #1
 800aa38:	1844      	adds	r4, r0, r1
 800aa3a:	442c      	add	r4, r5
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	f003 fa0f 	bl	800de60 <ucdr_alignment>
 800aa42:	3001      	adds	r0, #1
 800aa44:	2104      	movs	r1, #4
 800aa46:	68bd      	ldr	r5, [r7, #8]
 800aa48:	4404      	add	r4, r0
 800aa4a:	4620      	mov	r0, r4
 800aa4c:	f003 fa08 	bl	800de60 <ucdr_alignment>
 800aa50:	3004      	adds	r0, #4
 800aa52:	4404      	add	r4, r0
 800aa54:	b90d      	cbnz	r5, 800aa5a <get_serialized_size_racs_services__srv__Control_Response.part.0+0x4a>
 800aa56:	1ba0      	subs	r0, r4, r6
 800aa58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa5a:	4620      	mov	r0, r4
 800aa5c:	442c      	add	r4, r5
 800aa5e:	2101      	movs	r1, #1
 800aa60:	f003 f9fe 	bl	800de60 <ucdr_alignment>
 800aa64:	4404      	add	r4, r0
 800aa66:	1ba0      	subs	r0, r4, r6
 800aa68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa6a:	bf00      	nop

0800aa6c <get_serialized_size_racs_services__srv__Control_Response>:
 800aa6c:	b108      	cbz	r0, 800aa72 <get_serialized_size_racs_services__srv__Control_Response+0x6>
 800aa6e:	f7ff bfcf 	b.w	800aa10 <get_serialized_size_racs_services__srv__Control_Response.part.0>
 800aa72:	4770      	bx	lr

0800aa74 <_Control_Response__get_serialized_size>:
 800aa74:	b110      	cbz	r0, 800aa7c <_Control_Response__get_serialized_size+0x8>
 800aa76:	2100      	movs	r1, #0
 800aa78:	f7ff bfca 	b.w	800aa10 <get_serialized_size_racs_services__srv__Control_Response.part.0>
 800aa7c:	4770      	bx	lr
 800aa7e:	bf00      	nop

0800aa80 <_Control_Request__cdr_deserialize>:
 800aa80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa82:	460c      	mov	r4, r1
 800aa84:	b083      	sub	sp, #12
 800aa86:	b1e9      	cbz	r1, 800aac4 <_Control_Request__cdr_deserialize+0x44>
 800aa88:	4605      	mov	r5, r0
 800aa8a:	f001 ff91 	bl	800c9b0 <ucdr_deserialize_uint8_t>
 800aa8e:	1c61      	adds	r1, r4, #1
 800aa90:	4628      	mov	r0, r5
 800aa92:	f001 ff8d 	bl	800c9b0 <ucdr_deserialize_uint8_t>
 800aa96:	1ca1      	adds	r1, r4, #2
 800aa98:	4628      	mov	r0, r5
 800aa9a:	f001 ff89 	bl	800c9b0 <ucdr_deserialize_uint8_t>
 800aa9e:	68e7      	ldr	r7, [r4, #12]
 800aaa0:	ab01      	add	r3, sp, #4
 800aaa2:	6861      	ldr	r1, [r4, #4]
 800aaa4:	463a      	mov	r2, r7
 800aaa6:	4628      	mov	r0, r5
 800aaa8:	f003 fa88 	bl	800dfbc <ucdr_deserialize_sequence_uint8_t>
 800aaac:	9b01      	ldr	r3, [sp, #4]
 800aaae:	4606      	mov	r6, r0
 800aab0:	b920      	cbnz	r0, 800aabc <_Control_Request__cdr_deserialize+0x3c>
 800aab2:	429f      	cmp	r7, r3
 800aab4:	d30a      	bcc.n	800aacc <_Control_Request__cdr_deserialize+0x4c>
 800aab6:	4630      	mov	r0, r6
 800aab8:	b003      	add	sp, #12
 800aaba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aabc:	4630      	mov	r0, r6
 800aabe:	60a3      	str	r3, [r4, #8]
 800aac0:	b003      	add	sp, #12
 800aac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aac4:	460e      	mov	r6, r1
 800aac6:	4630      	mov	r0, r6
 800aac8:	b003      	add	sp, #12
 800aaca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aacc:	2101      	movs	r1, #1
 800aace:	4628      	mov	r0, r5
 800aad0:	75ae      	strb	r6, [r5, #22]
 800aad2:	7569      	strb	r1, [r5, #21]
 800aad4:	60a6      	str	r6, [r4, #8]
 800aad6:	f003 f9db 	bl	800de90 <ucdr_align_to>
 800aada:	4628      	mov	r0, r5
 800aadc:	9901      	ldr	r1, [sp, #4]
 800aade:	f003 fa0f 	bl	800df00 <ucdr_advance_buffer>
 800aae2:	4630      	mov	r0, r6
 800aae4:	b003      	add	sp, #12
 800aae6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aae8 <_Control_Response__cdr_deserialize>:
 800aae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aaea:	460c      	mov	r4, r1
 800aaec:	b083      	sub	sp, #12
 800aaee:	b309      	cbz	r1, 800ab34 <_Control_Response__cdr_deserialize+0x4c>
 800aaf0:	4605      	mov	r5, r0
 800aaf2:	f001 ff5d 	bl	800c9b0 <ucdr_deserialize_uint8_t>
 800aaf6:	1c61      	adds	r1, r4, #1
 800aaf8:	4628      	mov	r0, r5
 800aafa:	f001 ff59 	bl	800c9b0 <ucdr_deserialize_uint8_t>
 800aafe:	1ca1      	adds	r1, r4, #2
 800ab00:	4628      	mov	r0, r5
 800ab02:	f001 ff55 	bl	800c9b0 <ucdr_deserialize_uint8_t>
 800ab06:	1ce1      	adds	r1, r4, #3
 800ab08:	4628      	mov	r0, r5
 800ab0a:	f001 ff51 	bl	800c9b0 <ucdr_deserialize_uint8_t>
 800ab0e:	68e7      	ldr	r7, [r4, #12]
 800ab10:	ab01      	add	r3, sp, #4
 800ab12:	6861      	ldr	r1, [r4, #4]
 800ab14:	463a      	mov	r2, r7
 800ab16:	4628      	mov	r0, r5
 800ab18:	f003 fa50 	bl	800dfbc <ucdr_deserialize_sequence_uint8_t>
 800ab1c:	9b01      	ldr	r3, [sp, #4]
 800ab1e:	4606      	mov	r6, r0
 800ab20:	b920      	cbnz	r0, 800ab2c <_Control_Response__cdr_deserialize+0x44>
 800ab22:	429f      	cmp	r7, r3
 800ab24:	d30a      	bcc.n	800ab3c <_Control_Response__cdr_deserialize+0x54>
 800ab26:	4630      	mov	r0, r6
 800ab28:	b003      	add	sp, #12
 800ab2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab2c:	4630      	mov	r0, r6
 800ab2e:	60a3      	str	r3, [r4, #8]
 800ab30:	b003      	add	sp, #12
 800ab32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab34:	460e      	mov	r6, r1
 800ab36:	4630      	mov	r0, r6
 800ab38:	b003      	add	sp, #12
 800ab3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab3c:	2101      	movs	r1, #1
 800ab3e:	4628      	mov	r0, r5
 800ab40:	75ae      	strb	r6, [r5, #22]
 800ab42:	7569      	strb	r1, [r5, #21]
 800ab44:	60a6      	str	r6, [r4, #8]
 800ab46:	f003 f9a3 	bl	800de90 <ucdr_align_to>
 800ab4a:	4628      	mov	r0, r5
 800ab4c:	9901      	ldr	r1, [sp, #4]
 800ab4e:	f003 f9d7 	bl	800df00 <ucdr_advance_buffer>
 800ab52:	4630      	mov	r0, r6
 800ab54:	b003      	add	sp, #12
 800ab56:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ab58 <_Control_Request__cdr_serialize>:
 800ab58:	b1a8      	cbz	r0, 800ab86 <_Control_Request__cdr_serialize+0x2e>
 800ab5a:	b538      	push	{r3, r4, r5, lr}
 800ab5c:	460d      	mov	r5, r1
 800ab5e:	4604      	mov	r4, r0
 800ab60:	7801      	ldrb	r1, [r0, #0]
 800ab62:	4628      	mov	r0, r5
 800ab64:	f001 ff0e 	bl	800c984 <ucdr_serialize_uint8_t>
 800ab68:	7861      	ldrb	r1, [r4, #1]
 800ab6a:	4628      	mov	r0, r5
 800ab6c:	f001 ff0a 	bl	800c984 <ucdr_serialize_uint8_t>
 800ab70:	78a1      	ldrb	r1, [r4, #2]
 800ab72:	4628      	mov	r0, r5
 800ab74:	f001 ff06 	bl	800c984 <ucdr_serialize_uint8_t>
 800ab78:	4628      	mov	r0, r5
 800ab7a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 800ab7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab82:	f003 ba09 	b.w	800df98 <ucdr_serialize_sequence_uint8_t>
 800ab86:	4770      	bx	lr

0800ab88 <_Control_Response__cdr_serialize>:
 800ab88:	b1c8      	cbz	r0, 800abbe <_Control_Response__cdr_serialize+0x36>
 800ab8a:	b538      	push	{r3, r4, r5, lr}
 800ab8c:	460d      	mov	r5, r1
 800ab8e:	4604      	mov	r4, r0
 800ab90:	7801      	ldrb	r1, [r0, #0]
 800ab92:	4628      	mov	r0, r5
 800ab94:	f001 fef6 	bl	800c984 <ucdr_serialize_uint8_t>
 800ab98:	7861      	ldrb	r1, [r4, #1]
 800ab9a:	4628      	mov	r0, r5
 800ab9c:	f001 fef2 	bl	800c984 <ucdr_serialize_uint8_t>
 800aba0:	78a1      	ldrb	r1, [r4, #2]
 800aba2:	4628      	mov	r0, r5
 800aba4:	f001 feee 	bl	800c984 <ucdr_serialize_uint8_t>
 800aba8:	78e1      	ldrb	r1, [r4, #3]
 800abaa:	4628      	mov	r0, r5
 800abac:	f001 feea 	bl	800c984 <ucdr_serialize_uint8_t>
 800abb0:	4628      	mov	r0, r5
 800abb2:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 800abb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abba:	f003 b9ed 	b.w	800df98 <ucdr_serialize_sequence_uint8_t>
 800abbe:	4770      	bx	lr

0800abc0 <get_serialized_size_racs_services__srv__Control_Event.part.0>:
 800abc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abc4:	460e      	mov	r6, r1
 800abc6:	4605      	mov	r5, r0
 800abc8:	f001 fc3e 	bl	800c448 <get_serialized_size_service_msgs__msg__ServiceEventInfo>
 800abcc:	2104      	movs	r1, #4
 800abce:	1837      	adds	r7, r6, r0
 800abd0:	f8d5 902c 	ldr.w	r9, [r5, #44]	; 0x2c
 800abd4:	4638      	mov	r0, r7
 800abd6:	f003 f943 	bl	800de60 <ucdr_alignment>
 800abda:	3004      	adds	r0, #4
 800abdc:	4407      	add	r7, r0
 800abde:	f1b9 0f00 	cmp.w	r9, #0
 800abe2:	d019      	beq.n	800ac18 <get_serialized_size_racs_services__srv__Control_Event.part.0+0x58>
 800abe4:	f04f 0800 	mov.w	r8, #0
 800abe8:	f8df a07c 	ldr.w	sl, [pc, #124]	; 800ac68 <get_serialized_size_racs_services__srv__Control_Event.part.0+0xa8>
 800abec:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800abee:	4639      	mov	r1, r7
 800abf0:	f8da 3004 	ldr.w	r3, [sl, #4]
 800abf4:	eb00 1008 	add.w	r0, r0, r8, lsl #4
 800abf8:	f108 0801 	add.w	r8, r8, #1
 800abfc:	695b      	ldr	r3, [r3, #20]
 800abfe:	4798      	blx	r3
 800ac00:	4604      	mov	r4, r0
 800ac02:	4638      	mov	r0, r7
 800ac04:	2c04      	cmp	r4, #4
 800ac06:	4621      	mov	r1, r4
 800ac08:	bf28      	it	cs
 800ac0a:	2104      	movcs	r1, #4
 800ac0c:	f003 f928 	bl	800de60 <ucdr_alignment>
 800ac10:	45c1      	cmp	r9, r8
 800ac12:	4420      	add	r0, r4
 800ac14:	4407      	add	r7, r0
 800ac16:	d1e9      	bne.n	800abec <get_serialized_size_racs_services__srv__Control_Event.part.0+0x2c>
 800ac18:	4638      	mov	r0, r7
 800ac1a:	2104      	movs	r1, #4
 800ac1c:	f8d5 8038 	ldr.w	r8, [r5, #56]	; 0x38
 800ac20:	f003 f91e 	bl	800de60 <ucdr_alignment>
 800ac24:	4407      	add	r7, r0
 800ac26:	3704      	adds	r7, #4
 800ac28:	f1b8 0f00 	cmp.w	r8, #0
 800ac2c:	d019      	beq.n	800ac62 <get_serialized_size_racs_services__srv__Control_Event.part.0+0xa2>
 800ac2e:	f04f 0900 	mov.w	r9, #0
 800ac32:	f8df a038 	ldr.w	sl, [pc, #56]	; 800ac6c <get_serialized_size_racs_services__srv__Control_Event.part.0+0xac>
 800ac36:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800ac38:	4639      	mov	r1, r7
 800ac3a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ac3e:	eb00 1009 	add.w	r0, r0, r9, lsl #4
 800ac42:	f109 0901 	add.w	r9, r9, #1
 800ac46:	695b      	ldr	r3, [r3, #20]
 800ac48:	4798      	blx	r3
 800ac4a:	4604      	mov	r4, r0
 800ac4c:	4638      	mov	r0, r7
 800ac4e:	2c04      	cmp	r4, #4
 800ac50:	4621      	mov	r1, r4
 800ac52:	bf28      	it	cs
 800ac54:	2104      	movcs	r1, #4
 800ac56:	f003 f903 	bl	800de60 <ucdr_alignment>
 800ac5a:	45c8      	cmp	r8, r9
 800ac5c:	4420      	add	r0, r4
 800ac5e:	4407      	add	r7, r0
 800ac60:	d1e9      	bne.n	800ac36 <get_serialized_size_racs_services__srv__Control_Event.part.0+0x76>
 800ac62:	1bb8      	subs	r0, r7, r6
 800ac64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac68:	20000804 	.word	0x20000804
 800ac6c:	2000081c 	.word	0x2000081c

0800ac70 <get_serialized_size_racs_services__srv__Control_Event>:
 800ac70:	b108      	cbz	r0, 800ac76 <get_serialized_size_racs_services__srv__Control_Event+0x6>
 800ac72:	f7ff bfa5 	b.w	800abc0 <get_serialized_size_racs_services__srv__Control_Event.part.0>
 800ac76:	4770      	bx	lr

0800ac78 <_Control_Event__get_serialized_size>:
 800ac78:	b110      	cbz	r0, 800ac80 <_Control_Event__get_serialized_size+0x8>
 800ac7a:	2100      	movs	r1, #0
 800ac7c:	f7ff bfa0 	b.w	800abc0 <get_serialized_size_racs_services__srv__Control_Event.part.0>
 800ac80:	4770      	bx	lr
 800ac82:	bf00      	nop

0800ac84 <_Control_Event__cdr_deserialize>:
 800ac84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac86:	460d      	mov	r5, r1
 800ac88:	b083      	sub	sp, #12
 800ac8a:	2900      	cmp	r1, #0
 800ac8c:	d041      	beq.n	800ad12 <_Control_Event__cdr_deserialize+0x8e>
 800ac8e:	4606      	mov	r6, r0
 800ac90:	f001 fc9a 	bl	800c5c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800ac94:	4603      	mov	r3, r0
 800ac96:	4629      	mov	r1, r5
 800ac98:	4630      	mov	r0, r6
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	68db      	ldr	r3, [r3, #12]
 800ac9e:	4798      	blx	r3
 800aca0:	4630      	mov	r0, r6
 800aca2:	a901      	add	r1, sp, #4
 800aca4:	f002 f9b4 	bl	800d010 <ucdr_deserialize_uint32_t>
 800aca8:	9b01      	ldr	r3, [sp, #4]
 800acaa:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800acac:	429a      	cmp	r2, r3
 800acae:	d32d      	bcc.n	800ad0c <_Control_Event__cdr_deserialize+0x88>
 800acb0:	62eb      	str	r3, [r5, #44]	; 0x2c
 800acb2:	b17b      	cbz	r3, 800acd4 <_Control_Event__cdr_deserialize+0x50>
 800acb4:	2400      	movs	r4, #0
 800acb6:	4f18      	ldr	r7, [pc, #96]	; (800ad18 <_Control_Event__cdr_deserialize+0x94>)
 800acb8:	e002      	b.n	800acc0 <_Control_Event__cdr_deserialize+0x3c>
 800acba:	9b01      	ldr	r3, [sp, #4]
 800acbc:	429c      	cmp	r4, r3
 800acbe:	d209      	bcs.n	800acd4 <_Control_Event__cdr_deserialize+0x50>
 800acc0:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800acc2:	4630      	mov	r0, r6
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800acca:	3401      	adds	r4, #1
 800accc:	68db      	ldr	r3, [r3, #12]
 800acce:	4798      	blx	r3
 800acd0:	2800      	cmp	r0, #0
 800acd2:	d1f2      	bne.n	800acba <_Control_Event__cdr_deserialize+0x36>
 800acd4:	a901      	add	r1, sp, #4
 800acd6:	4630      	mov	r0, r6
 800acd8:	f002 f99a 	bl	800d010 <ucdr_deserialize_uint32_t>
 800acdc:	9b01      	ldr	r3, [sp, #4]
 800acde:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800ace0:	429a      	cmp	r2, r3
 800ace2:	d313      	bcc.n	800ad0c <_Control_Event__cdr_deserialize+0x88>
 800ace4:	63ab      	str	r3, [r5, #56]	; 0x38
 800ace6:	b193      	cbz	r3, 800ad0e <_Control_Event__cdr_deserialize+0x8a>
 800ace8:	2400      	movs	r4, #0
 800acea:	4f0c      	ldr	r7, [pc, #48]	; (800ad1c <_Control_Event__cdr_deserialize+0x98>)
 800acec:	e002      	b.n	800acf4 <_Control_Event__cdr_deserialize+0x70>
 800acee:	9b01      	ldr	r3, [sp, #4]
 800acf0:	429c      	cmp	r4, r3
 800acf2:	d20c      	bcs.n	800ad0e <_Control_Event__cdr_deserialize+0x8a>
 800acf4:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800acf6:	4630      	mov	r0, r6
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800acfe:	3401      	adds	r4, #1
 800ad00:	68db      	ldr	r3, [r3, #12]
 800ad02:	4798      	blx	r3
 800ad04:	2800      	cmp	r0, #0
 800ad06:	d1f2      	bne.n	800acee <_Control_Event__cdr_deserialize+0x6a>
 800ad08:	b003      	add	sp, #12
 800ad0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad0c:	2000      	movs	r0, #0
 800ad0e:	b003      	add	sp, #12
 800ad10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad12:	4608      	mov	r0, r1
 800ad14:	b003      	add	sp, #12
 800ad16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad18:	20000804 	.word	0x20000804
 800ad1c:	2000081c 	.word	0x2000081c

0800ad20 <_Control_Event__cdr_serialize>:
 800ad20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad24:	2800      	cmp	r0, #0
 800ad26:	d03a      	beq.n	800ad9e <_Control_Event__cdr_serialize+0x7e>
 800ad28:	4605      	mov	r5, r0
 800ad2a:	460e      	mov	r6, r1
 800ad2c:	f001 fc4c 	bl	800c5c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800ad30:	4603      	mov	r3, r0
 800ad32:	4631      	mov	r1, r6
 800ad34:	4628      	mov	r0, r5
 800ad36:	685b      	ldr	r3, [r3, #4]
 800ad38:	689b      	ldr	r3, [r3, #8]
 800ad3a:	4798      	blx	r3
 800ad3c:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 800ad3e:	4630      	mov	r0, r6
 800ad40:	4639      	mov	r1, r7
 800ad42:	f002 f835 	bl	800cdb0 <ucdr_serialize_uint32_t>
 800ad46:	b188      	cbz	r0, 800ad6c <_Control_Event__cdr_serialize+0x4c>
 800ad48:	b187      	cbz	r7, 800ad6c <_Control_Event__cdr_serialize+0x4c>
 800ad4a:	2400      	movs	r4, #0
 800ad4c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 800ada8 <_Control_Event__cdr_serialize+0x88>
 800ad50:	e001      	b.n	800ad56 <_Control_Event__cdr_serialize+0x36>
 800ad52:	42a7      	cmp	r7, r4
 800ad54:	d00a      	beq.n	800ad6c <_Control_Event__cdr_serialize+0x4c>
 800ad56:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800ad58:	4631      	mov	r1, r6
 800ad5a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ad5e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800ad62:	3401      	adds	r4, #1
 800ad64:	689b      	ldr	r3, [r3, #8]
 800ad66:	4798      	blx	r3
 800ad68:	2800      	cmp	r0, #0
 800ad6a:	d1f2      	bne.n	800ad52 <_Control_Event__cdr_serialize+0x32>
 800ad6c:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800ad6e:	4630      	mov	r0, r6
 800ad70:	4639      	mov	r1, r7
 800ad72:	f002 f81d 	bl	800cdb0 <ucdr_serialize_uint32_t>
 800ad76:	4680      	mov	r8, r0
 800ad78:	b188      	cbz	r0, 800ad9e <_Control_Event__cdr_serialize+0x7e>
 800ad7a:	b197      	cbz	r7, 800ada2 <_Control_Event__cdr_serialize+0x82>
 800ad7c:	2400      	movs	r4, #0
 800ad7e:	f8df 902c 	ldr.w	r9, [pc, #44]	; 800adac <_Control_Event__cdr_serialize+0x8c>
 800ad82:	e001      	b.n	800ad88 <_Control_Event__cdr_serialize+0x68>
 800ad84:	42a7      	cmp	r7, r4
 800ad86:	d00c      	beq.n	800ada2 <_Control_Event__cdr_serialize+0x82>
 800ad88:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800ad8a:	4631      	mov	r1, r6
 800ad8c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ad90:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800ad94:	3401      	adds	r4, #1
 800ad96:	689b      	ldr	r3, [r3, #8]
 800ad98:	4798      	blx	r3
 800ad9a:	2800      	cmp	r0, #0
 800ad9c:	d1f2      	bne.n	800ad84 <_Control_Event__cdr_serialize+0x64>
 800ad9e:	f04f 0800 	mov.w	r8, #0
 800ada2:	4640      	mov	r0, r8
 800ada4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ada8:	20000804 	.word	0x20000804
 800adac:	2000081c 	.word	0x2000081c

0800adb0 <_Control_Request__max_serialized_size>:
 800adb0:	b538      	push	{r3, r4, r5, lr}
 800adb2:	2101      	movs	r1, #1
 800adb4:	2000      	movs	r0, #0
 800adb6:	f003 f853 	bl	800de60 <ucdr_alignment>
 800adba:	2101      	movs	r1, #1
 800adbc:	1845      	adds	r5, r0, r1
 800adbe:	4628      	mov	r0, r5
 800adc0:	f003 f84e 	bl	800de60 <ucdr_alignment>
 800adc4:	2101      	movs	r1, #1
 800adc6:	1844      	adds	r4, r0, r1
 800adc8:	442c      	add	r4, r5
 800adca:	4620      	mov	r0, r4
 800adcc:	f003 f848 	bl	800de60 <ucdr_alignment>
 800add0:	3001      	adds	r0, #1
 800add2:	4420      	add	r0, r4
 800add4:	bd38      	pop	{r3, r4, r5, pc}
 800add6:	bf00      	nop

0800add8 <_Control_Response__max_serialized_size>:
 800add8:	b538      	push	{r3, r4, r5, lr}
 800adda:	2101      	movs	r1, #1
 800addc:	2000      	movs	r0, #0
 800adde:	f003 f83f 	bl	800de60 <ucdr_alignment>
 800ade2:	2101      	movs	r1, #1
 800ade4:	1845      	adds	r5, r0, r1
 800ade6:	4628      	mov	r0, r5
 800ade8:	f003 f83a 	bl	800de60 <ucdr_alignment>
 800adec:	2101      	movs	r1, #1
 800adee:	1844      	adds	r4, r0, r1
 800adf0:	442c      	add	r4, r5
 800adf2:	4620      	mov	r0, r4
 800adf4:	f003 f834 	bl	800de60 <ucdr_alignment>
 800adf8:	2101      	movs	r1, #1
 800adfa:	4408      	add	r0, r1
 800adfc:	4404      	add	r4, r0
 800adfe:	4620      	mov	r0, r4
 800ae00:	f003 f82e 	bl	800de60 <ucdr_alignment>
 800ae04:	3001      	adds	r0, #1
 800ae06:	4420      	add	r0, r4
 800ae08:	bd38      	pop	{r3, r4, r5, pc}
 800ae0a:	bf00      	nop

0800ae0c <_Control_Request__get_serialized_size>:
 800ae0c:	b570      	push	{r4, r5, r6, lr}
 800ae0e:	4604      	mov	r4, r0
 800ae10:	b1c0      	cbz	r0, 800ae44 <_Control_Request__get_serialized_size+0x38>
 800ae12:	2101      	movs	r1, #1
 800ae14:	2000      	movs	r0, #0
 800ae16:	f003 f823 	bl	800de60 <ucdr_alignment>
 800ae1a:	2101      	movs	r1, #1
 800ae1c:	1846      	adds	r6, r0, r1
 800ae1e:	4630      	mov	r0, r6
 800ae20:	f003 f81e 	bl	800de60 <ucdr_alignment>
 800ae24:	2101      	movs	r1, #1
 800ae26:	1845      	adds	r5, r0, r1
 800ae28:	4435      	add	r5, r6
 800ae2a:	4628      	mov	r0, r5
 800ae2c:	f003 f818 	bl	800de60 <ucdr_alignment>
 800ae30:	3001      	adds	r0, #1
 800ae32:	2104      	movs	r1, #4
 800ae34:	68a6      	ldr	r6, [r4, #8]
 800ae36:	4405      	add	r5, r0
 800ae38:	4628      	mov	r0, r5
 800ae3a:	f003 f811 	bl	800de60 <ucdr_alignment>
 800ae3e:	1d04      	adds	r4, r0, #4
 800ae40:	442c      	add	r4, r5
 800ae42:	b90e      	cbnz	r6, 800ae48 <_Control_Request__get_serialized_size+0x3c>
 800ae44:	4620      	mov	r0, r4
 800ae46:	bd70      	pop	{r4, r5, r6, pc}
 800ae48:	4620      	mov	r0, r4
 800ae4a:	4434      	add	r4, r6
 800ae4c:	2101      	movs	r1, #1
 800ae4e:	f003 f807 	bl	800de60 <ucdr_alignment>
 800ae52:	4404      	add	r4, r0
 800ae54:	4620      	mov	r0, r4
 800ae56:	bd70      	pop	{r4, r5, r6, pc}

0800ae58 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Event>:
 800ae58:	4800      	ldr	r0, [pc, #0]	; (800ae5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x4>)
 800ae5a:	4770      	bx	lr
 800ae5c:	200007ec 	.word	0x200007ec

0800ae60 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Control>:
 800ae60:	4800      	ldr	r0, [pc, #0]	; (800ae64 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Control+0x4>)
 800ae62:	4770      	bx	lr
 800ae64:	200007c0 	.word	0x200007c0

0800ae68 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Request>:
 800ae68:	4800      	ldr	r0, [pc, #0]	; (800ae6c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x4>)
 800ae6a:	4770      	bx	lr
 800ae6c:	200008dc 	.word	0x200008dc

0800ae70 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Response>:
 800ae70:	4800      	ldr	r0, [pc, #0]	; (800ae74 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x4>)
 800ae72:	4770      	bx	lr
 800ae74:	200008f4 	.word	0x200008f4

0800ae78 <_Setup_Response__max_serialized_size>:
 800ae78:	2101      	movs	r1, #1
 800ae7a:	2000      	movs	r0, #0
 800ae7c:	b508      	push	{r3, lr}
 800ae7e:	f002 ffef 	bl	800de60 <ucdr_alignment>
 800ae82:	3001      	adds	r0, #1
 800ae84:	bd08      	pop	{r3, pc}
 800ae86:	bf00      	nop

0800ae88 <_Setup_Response__cdr_deserialize>:
 800ae88:	b109      	cbz	r1, 800ae8e <_Setup_Response__cdr_deserialize+0x6>
 800ae8a:	f001 bd91 	b.w	800c9b0 <ucdr_deserialize_uint8_t>
 800ae8e:	4608      	mov	r0, r1
 800ae90:	4770      	bx	lr
 800ae92:	bf00      	nop

0800ae94 <_Setup_Event__max_serialized_size>:
 800ae94:	b500      	push	{lr}
 800ae96:	b083      	sub	sp, #12
 800ae98:	2301      	movs	r3, #1
 800ae9a:	2100      	movs	r1, #0
 800ae9c:	f10d 0007 	add.w	r0, sp, #7
 800aea0:	f88d 3007 	strb.w	r3, [sp, #7]
 800aea4:	f001 fb6a 	bl	800c57c <max_serialized_size_service_msgs__msg__ServiceEventInfo>
 800aea8:	b003      	add	sp, #12
 800aeaa:	f85d fb04 	ldr.w	pc, [sp], #4
 800aeae:	bf00      	nop

0800aeb0 <get_serialized_size_racs_services__srv__Setup_Request.part.0>:
 800aeb0:	b570      	push	{r4, r5, r6, lr}
 800aeb2:	4604      	mov	r4, r0
 800aeb4:	2101      	movs	r1, #1
 800aeb6:	f002 ffd3 	bl	800de60 <ucdr_alignment>
 800aeba:	2104      	movs	r1, #4
 800aebc:	1c65      	adds	r5, r4, #1
 800aebe:	f1c4 0404 	rsb	r4, r4, #4
 800aec2:	4405      	add	r5, r0
 800aec4:	4628      	mov	r0, r5
 800aec6:	f002 ffcb 	bl	800de60 <ucdr_alignment>
 800aeca:	2104      	movs	r1, #4
 800aecc:	1846      	adds	r6, r0, r1
 800aece:	442e      	add	r6, r5
 800aed0:	4630      	mov	r0, r6
 800aed2:	f002 ffc5 	bl	800de60 <ucdr_alignment>
 800aed6:	2104      	movs	r1, #4
 800aed8:	1845      	adds	r5, r0, r1
 800aeda:	442e      	add	r6, r5
 800aedc:	4630      	mov	r0, r6
 800aede:	f002 ffbf 	bl	800de60 <ucdr_alignment>
 800aee2:	2104      	movs	r1, #4
 800aee4:	4408      	add	r0, r1
 800aee6:	4406      	add	r6, r0
 800aee8:	4630      	mov	r0, r6
 800aeea:	f002 ffb9 	bl	800de60 <ucdr_alignment>
 800aeee:	2104      	movs	r1, #4
 800aef0:	1845      	adds	r5, r0, r1
 800aef2:	4435      	add	r5, r6
 800aef4:	4628      	mov	r0, r5
 800aef6:	f002 ffb3 	bl	800de60 <ucdr_alignment>
 800aefa:	2104      	movs	r1, #4
 800aefc:	4408      	add	r0, r1
 800aefe:	4405      	add	r5, r0
 800af00:	4628      	mov	r0, r5
 800af02:	f002 ffad 	bl	800de60 <ucdr_alignment>
 800af06:	4420      	add	r0, r4
 800af08:	4428      	add	r0, r5
 800af0a:	bd70      	pop	{r4, r5, r6, pc}

0800af0c <get_serialized_size_racs_services__srv__Setup_Request>:
 800af0c:	b110      	cbz	r0, 800af14 <get_serialized_size_racs_services__srv__Setup_Request+0x8>
 800af0e:	4608      	mov	r0, r1
 800af10:	f7ff bfce 	b.w	800aeb0 <get_serialized_size_racs_services__srv__Setup_Request.part.0>
 800af14:	4770      	bx	lr
 800af16:	bf00      	nop

0800af18 <_Setup_Request__get_serialized_size>:
 800af18:	b110      	cbz	r0, 800af20 <_Setup_Request__get_serialized_size+0x8>
 800af1a:	2000      	movs	r0, #0
 800af1c:	f7ff bfc8 	b.w	800aeb0 <get_serialized_size_racs_services__srv__Setup_Request.part.0>
 800af20:	4770      	bx	lr
 800af22:	bf00      	nop

0800af24 <get_serialized_size_racs_services__srv__Setup_Response>:
 800af24:	b138      	cbz	r0, 800af36 <get_serialized_size_racs_services__srv__Setup_Response+0x12>
 800af26:	b508      	push	{r3, lr}
 800af28:	460b      	mov	r3, r1
 800af2a:	2101      	movs	r1, #1
 800af2c:	4618      	mov	r0, r3
 800af2e:	f002 ff97 	bl	800de60 <ucdr_alignment>
 800af32:	3001      	adds	r0, #1
 800af34:	bd08      	pop	{r3, pc}
 800af36:	4770      	bx	lr

0800af38 <_Setup_Request__cdr_deserialize>:
 800af38:	b538      	push	{r3, r4, r5, lr}
 800af3a:	460c      	mov	r4, r1
 800af3c:	b309      	cbz	r1, 800af82 <_Setup_Request__cdr_deserialize+0x4a>
 800af3e:	4605      	mov	r5, r0
 800af40:	f001 fd36 	bl	800c9b0 <ucdr_deserialize_uint8_t>
 800af44:	1d21      	adds	r1, r4, #4
 800af46:	4628      	mov	r0, r5
 800af48:	f002 fea2 	bl	800dc90 <ucdr_deserialize_float>
 800af4c:	f104 0108 	add.w	r1, r4, #8
 800af50:	4628      	mov	r0, r5
 800af52:	f002 fe9d 	bl	800dc90 <ucdr_deserialize_float>
 800af56:	f104 010c 	add.w	r1, r4, #12
 800af5a:	4628      	mov	r0, r5
 800af5c:	f002 fe98 	bl	800dc90 <ucdr_deserialize_float>
 800af60:	f104 0110 	add.w	r1, r4, #16
 800af64:	4628      	mov	r0, r5
 800af66:	f002 fe93 	bl	800dc90 <ucdr_deserialize_float>
 800af6a:	f104 0114 	add.w	r1, r4, #20
 800af6e:	4628      	mov	r0, r5
 800af70:	f002 fe8e 	bl	800dc90 <ucdr_deserialize_float>
 800af74:	f104 0118 	add.w	r1, r4, #24
 800af78:	4628      	mov	r0, r5
 800af7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af7e:	f002 be87 	b.w	800dc90 <ucdr_deserialize_float>
 800af82:	4608      	mov	r0, r1
 800af84:	bd38      	pop	{r3, r4, r5, pc}
 800af86:	bf00      	nop

0800af88 <_Setup_Response__cdr_serialize>:
 800af88:	460a      	mov	r2, r1
 800af8a:	b118      	cbz	r0, 800af94 <_Setup_Response__cdr_serialize+0xc>
 800af8c:	7801      	ldrb	r1, [r0, #0]
 800af8e:	4610      	mov	r0, r2
 800af90:	f001 bcf8 	b.w	800c984 <ucdr_serialize_uint8_t>
 800af94:	4770      	bx	lr
 800af96:	bf00      	nop

0800af98 <_Setup_Request__cdr_serialize>:
 800af98:	b330      	cbz	r0, 800afe8 <_Setup_Request__cdr_serialize+0x50>
 800af9a:	b538      	push	{r3, r4, r5, lr}
 800af9c:	460d      	mov	r5, r1
 800af9e:	4604      	mov	r4, r0
 800afa0:	7801      	ldrb	r1, [r0, #0]
 800afa2:	4628      	mov	r0, r5
 800afa4:	f001 fcee 	bl	800c984 <ucdr_serialize_uint8_t>
 800afa8:	ed94 0a01 	vldr	s0, [r4, #4]
 800afac:	4628      	mov	r0, r5
 800afae:	f002 fdd7 	bl	800db60 <ucdr_serialize_float>
 800afb2:	ed94 0a02 	vldr	s0, [r4, #8]
 800afb6:	4628      	mov	r0, r5
 800afb8:	f002 fdd2 	bl	800db60 <ucdr_serialize_float>
 800afbc:	ed94 0a03 	vldr	s0, [r4, #12]
 800afc0:	4628      	mov	r0, r5
 800afc2:	f002 fdcd 	bl	800db60 <ucdr_serialize_float>
 800afc6:	ed94 0a04 	vldr	s0, [r4, #16]
 800afca:	4628      	mov	r0, r5
 800afcc:	f002 fdc8 	bl	800db60 <ucdr_serialize_float>
 800afd0:	ed94 0a05 	vldr	s0, [r4, #20]
 800afd4:	4628      	mov	r0, r5
 800afd6:	f002 fdc3 	bl	800db60 <ucdr_serialize_float>
 800afda:	ed94 0a06 	vldr	s0, [r4, #24]
 800afde:	4628      	mov	r0, r5
 800afe0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afe4:	f002 bdbc 	b.w	800db60 <ucdr_serialize_float>
 800afe8:	4770      	bx	lr
 800afea:	bf00      	nop

0800afec <get_serialized_size_racs_services__srv__Setup_Event.part.0>:
 800afec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aff0:	460e      	mov	r6, r1
 800aff2:	4605      	mov	r5, r0
 800aff4:	f001 fa28 	bl	800c448 <get_serialized_size_service_msgs__msg__ServiceEventInfo>
 800aff8:	2104      	movs	r1, #4
 800affa:	eb06 0800 	add.w	r8, r6, r0
 800affe:	f8d5 902c 	ldr.w	r9, [r5, #44]	; 0x2c
 800b002:	4640      	mov	r0, r8
 800b004:	f002 ff2c 	bl	800de60 <ucdr_alignment>
 800b008:	3004      	adds	r0, #4
 800b00a:	4480      	add	r8, r0
 800b00c:	f1b9 0f00 	cmp.w	r9, #0
 800b010:	d019      	beq.n	800b046 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x5a>
 800b012:	2700      	movs	r7, #0
 800b014:	f8df a07c 	ldr.w	sl, [pc, #124]	; 800b094 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0xa8>
 800b018:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800b01a:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
 800b01e:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b022:	4641      	mov	r1, r8
 800b024:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800b028:	3701      	adds	r7, #1
 800b02a:	695b      	ldr	r3, [r3, #20]
 800b02c:	4798      	blx	r3
 800b02e:	4604      	mov	r4, r0
 800b030:	4640      	mov	r0, r8
 800b032:	2c04      	cmp	r4, #4
 800b034:	4621      	mov	r1, r4
 800b036:	bf28      	it	cs
 800b038:	2104      	movcs	r1, #4
 800b03a:	f002 ff11 	bl	800de60 <ucdr_alignment>
 800b03e:	45b9      	cmp	r9, r7
 800b040:	4420      	add	r0, r4
 800b042:	4480      	add	r8, r0
 800b044:	d1e8      	bne.n	800b018 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x2c>
 800b046:	4640      	mov	r0, r8
 800b048:	2104      	movs	r1, #4
 800b04a:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800b04c:	f002 ff08 	bl	800de60 <ucdr_alignment>
 800b050:	4480      	add	r8, r0
 800b052:	f108 0804 	add.w	r8, r8, #4
 800b056:	b1c7      	cbz	r7, 800b08a <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x9e>
 800b058:	f04f 0900 	mov.w	r9, #0
 800b05c:	f8df a038 	ldr.w	sl, [pc, #56]	; 800b098 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0xac>
 800b060:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800b062:	4641      	mov	r1, r8
 800b064:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b068:	4448      	add	r0, r9
 800b06a:	f109 0901 	add.w	r9, r9, #1
 800b06e:	695b      	ldr	r3, [r3, #20]
 800b070:	4798      	blx	r3
 800b072:	4604      	mov	r4, r0
 800b074:	4640      	mov	r0, r8
 800b076:	2c04      	cmp	r4, #4
 800b078:	4621      	mov	r1, r4
 800b07a:	bf28      	it	cs
 800b07c:	2104      	movcs	r1, #4
 800b07e:	f002 feef 	bl	800de60 <ucdr_alignment>
 800b082:	454f      	cmp	r7, r9
 800b084:	4420      	add	r0, r4
 800b086:	4480      	add	r8, r0
 800b088:	d1ea      	bne.n	800b060 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x74>
 800b08a:	eba8 0006 	sub.w	r0, r8, r6
 800b08e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b092:	bf00      	nop
 800b094:	200008dc 	.word	0x200008dc
 800b098:	200008f4 	.word	0x200008f4

0800b09c <get_serialized_size_racs_services__srv__Setup_Event>:
 800b09c:	b108      	cbz	r0, 800b0a2 <get_serialized_size_racs_services__srv__Setup_Event+0x6>
 800b09e:	f7ff bfa5 	b.w	800afec <get_serialized_size_racs_services__srv__Setup_Event.part.0>
 800b0a2:	4770      	bx	lr

0800b0a4 <_Setup_Event__get_serialized_size>:
 800b0a4:	b110      	cbz	r0, 800b0ac <_Setup_Event__get_serialized_size+0x8>
 800b0a6:	2100      	movs	r1, #0
 800b0a8:	f7ff bfa0 	b.w	800afec <get_serialized_size_racs_services__srv__Setup_Event.part.0>
 800b0ac:	4770      	bx	lr
 800b0ae:	bf00      	nop

0800b0b0 <_Setup_Event__cdr_deserialize>:
 800b0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0b4:	460c      	mov	r4, r1
 800b0b6:	b082      	sub	sp, #8
 800b0b8:	2900      	cmp	r1, #0
 800b0ba:	d045      	beq.n	800b148 <_Setup_Event__cdr_deserialize+0x98>
 800b0bc:	4607      	mov	r7, r0
 800b0be:	f001 fa83 	bl	800c5c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	4621      	mov	r1, r4
 800b0c6:	4638      	mov	r0, r7
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	68db      	ldr	r3, [r3, #12]
 800b0cc:	4798      	blx	r3
 800b0ce:	4638      	mov	r0, r7
 800b0d0:	a901      	add	r1, sp, #4
 800b0d2:	f001 ff9d 	bl	800d010 <ucdr_deserialize_uint32_t>
 800b0d6:	9b01      	ldr	r3, [sp, #4]
 800b0d8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d330      	bcc.n	800b140 <_Setup_Event__cdr_deserialize+0x90>
 800b0de:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b0e0:	b193      	cbz	r3, 800b108 <_Setup_Event__cdr_deserialize+0x58>
 800b0e2:	2500      	movs	r5, #0
 800b0e4:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800b154 <_Setup_Event__cdr_deserialize+0xa4>
 800b0e8:	462e      	mov	r6, r5
 800b0ea:	e002      	b.n	800b0f2 <_Setup_Event__cdr_deserialize+0x42>
 800b0ec:	9b01      	ldr	r3, [sp, #4]
 800b0ee:	429e      	cmp	r6, r3
 800b0f0:	d20a      	bcs.n	800b108 <_Setup_Event__cdr_deserialize+0x58>
 800b0f2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800b0f4:	4638      	mov	r0, r7
 800b0f6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b0fa:	3601      	adds	r6, #1
 800b0fc:	4429      	add	r1, r5
 800b0fe:	351c      	adds	r5, #28
 800b100:	68db      	ldr	r3, [r3, #12]
 800b102:	4798      	blx	r3
 800b104:	2800      	cmp	r0, #0
 800b106:	d1f1      	bne.n	800b0ec <_Setup_Event__cdr_deserialize+0x3c>
 800b108:	a901      	add	r1, sp, #4
 800b10a:	4638      	mov	r0, r7
 800b10c:	f001 ff80 	bl	800d010 <ucdr_deserialize_uint32_t>
 800b110:	9b01      	ldr	r3, [sp, #4]
 800b112:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800b114:	429a      	cmp	r2, r3
 800b116:	d313      	bcc.n	800b140 <_Setup_Event__cdr_deserialize+0x90>
 800b118:	63a3      	str	r3, [r4, #56]	; 0x38
 800b11a:	b193      	cbz	r3, 800b142 <_Setup_Event__cdr_deserialize+0x92>
 800b11c:	2500      	movs	r5, #0
 800b11e:	4e0c      	ldr	r6, [pc, #48]	; (800b150 <_Setup_Event__cdr_deserialize+0xa0>)
 800b120:	e002      	b.n	800b128 <_Setup_Event__cdr_deserialize+0x78>
 800b122:	9b01      	ldr	r3, [sp, #4]
 800b124:	429d      	cmp	r5, r3
 800b126:	d20c      	bcs.n	800b142 <_Setup_Event__cdr_deserialize+0x92>
 800b128:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b12a:	4638      	mov	r0, r7
 800b12c:	6873      	ldr	r3, [r6, #4]
 800b12e:	4429      	add	r1, r5
 800b130:	3501      	adds	r5, #1
 800b132:	68db      	ldr	r3, [r3, #12]
 800b134:	4798      	blx	r3
 800b136:	2800      	cmp	r0, #0
 800b138:	d1f3      	bne.n	800b122 <_Setup_Event__cdr_deserialize+0x72>
 800b13a:	b002      	add	sp, #8
 800b13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b140:	2000      	movs	r0, #0
 800b142:	b002      	add	sp, #8
 800b144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b148:	4608      	mov	r0, r1
 800b14a:	b002      	add	sp, #8
 800b14c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b150:	200008f4 	.word	0x200008f4
 800b154:	200008dc 	.word	0x200008dc

0800b158 <_Setup_Event__cdr_serialize>:
 800b158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b15c:	2800      	cmp	r0, #0
 800b15e:	d03b      	beq.n	800b1d8 <_Setup_Event__cdr_serialize+0x80>
 800b160:	4605      	mov	r5, r0
 800b162:	460e      	mov	r6, r1
 800b164:	f001 fa30 	bl	800c5c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800b168:	4603      	mov	r3, r0
 800b16a:	4631      	mov	r1, r6
 800b16c:	4628      	mov	r0, r5
 800b16e:	685b      	ldr	r3, [r3, #4]
 800b170:	689b      	ldr	r3, [r3, #8]
 800b172:	4798      	blx	r3
 800b174:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 800b176:	4630      	mov	r0, r6
 800b178:	4639      	mov	r1, r7
 800b17a:	f001 fe19 	bl	800cdb0 <ucdr_serialize_uint32_t>
 800b17e:	b198      	cbz	r0, 800b1a8 <_Setup_Event__cdr_serialize+0x50>
 800b180:	b197      	cbz	r7, 800b1a8 <_Setup_Event__cdr_serialize+0x50>
 800b182:	2400      	movs	r4, #0
 800b184:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800b1e4 <_Setup_Event__cdr_serialize+0x8c>
 800b188:	e001      	b.n	800b18e <_Setup_Event__cdr_serialize+0x36>
 800b18a:	42a7      	cmp	r7, r4
 800b18c:	d00c      	beq.n	800b1a8 <_Setup_Event__cdr_serialize+0x50>
 800b18e:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 800b192:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800b194:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b198:	4631      	mov	r1, r6
 800b19a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800b19e:	3401      	adds	r4, #1
 800b1a0:	689b      	ldr	r3, [r3, #8]
 800b1a2:	4798      	blx	r3
 800b1a4:	2800      	cmp	r0, #0
 800b1a6:	d1f0      	bne.n	800b18a <_Setup_Event__cdr_serialize+0x32>
 800b1a8:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800b1aa:	4630      	mov	r0, r6
 800b1ac:	4639      	mov	r1, r7
 800b1ae:	f001 fdff 	bl	800cdb0 <ucdr_serialize_uint32_t>
 800b1b2:	4680      	mov	r8, r0
 800b1b4:	b180      	cbz	r0, 800b1d8 <_Setup_Event__cdr_serialize+0x80>
 800b1b6:	b18f      	cbz	r7, 800b1dc <_Setup_Event__cdr_serialize+0x84>
 800b1b8:	2400      	movs	r4, #0
 800b1ba:	f8df 902c 	ldr.w	r9, [pc, #44]	; 800b1e8 <_Setup_Event__cdr_serialize+0x90>
 800b1be:	e001      	b.n	800b1c4 <_Setup_Event__cdr_serialize+0x6c>
 800b1c0:	42a7      	cmp	r7, r4
 800b1c2:	d00b      	beq.n	800b1dc <_Setup_Event__cdr_serialize+0x84>
 800b1c4:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800b1c6:	4631      	mov	r1, r6
 800b1c8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b1cc:	4420      	add	r0, r4
 800b1ce:	3401      	adds	r4, #1
 800b1d0:	689b      	ldr	r3, [r3, #8]
 800b1d2:	4798      	blx	r3
 800b1d4:	2800      	cmp	r0, #0
 800b1d6:	d1f3      	bne.n	800b1c0 <_Setup_Event__cdr_serialize+0x68>
 800b1d8:	f04f 0800 	mov.w	r8, #0
 800b1dc:	4640      	mov	r0, r8
 800b1de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1e2:	bf00      	nop
 800b1e4:	200008dc 	.word	0x200008dc
 800b1e8:	200008f4 	.word	0x200008f4

0800b1ec <_Setup_Response__get_serialized_size>:
 800b1ec:	b130      	cbz	r0, 800b1fc <_Setup_Response__get_serialized_size+0x10>
 800b1ee:	2101      	movs	r1, #1
 800b1f0:	2000      	movs	r0, #0
 800b1f2:	b508      	push	{r3, lr}
 800b1f4:	f002 fe34 	bl	800de60 <ucdr_alignment>
 800b1f8:	3001      	adds	r0, #1
 800b1fa:	bd08      	pop	{r3, pc}
 800b1fc:	4770      	bx	lr
 800b1fe:	bf00      	nop

0800b200 <max_serialized_size_racs_services__srv__Setup_Request>:
 800b200:	b570      	push	{r4, r5, r6, lr}
 800b202:	460c      	mov	r4, r1
 800b204:	2301      	movs	r3, #1
 800b206:	1c65      	adds	r5, r4, #1
 800b208:	4619      	mov	r1, r3
 800b20a:	7003      	strb	r3, [r0, #0]
 800b20c:	4620      	mov	r0, r4
 800b20e:	f002 fe27 	bl	800de60 <ucdr_alignment>
 800b212:	4405      	add	r5, r0
 800b214:	2104      	movs	r1, #4
 800b216:	f1c4 0404 	rsb	r4, r4, #4
 800b21a:	4628      	mov	r0, r5
 800b21c:	f002 fe20 	bl	800de60 <ucdr_alignment>
 800b220:	2104      	movs	r1, #4
 800b222:	1846      	adds	r6, r0, r1
 800b224:	442e      	add	r6, r5
 800b226:	4630      	mov	r0, r6
 800b228:	f002 fe1a 	bl	800de60 <ucdr_alignment>
 800b22c:	2104      	movs	r1, #4
 800b22e:	1845      	adds	r5, r0, r1
 800b230:	442e      	add	r6, r5
 800b232:	4630      	mov	r0, r6
 800b234:	f002 fe14 	bl	800de60 <ucdr_alignment>
 800b238:	2104      	movs	r1, #4
 800b23a:	4408      	add	r0, r1
 800b23c:	4406      	add	r6, r0
 800b23e:	4630      	mov	r0, r6
 800b240:	f002 fe0e 	bl	800de60 <ucdr_alignment>
 800b244:	2104      	movs	r1, #4
 800b246:	1845      	adds	r5, r0, r1
 800b248:	4435      	add	r5, r6
 800b24a:	4628      	mov	r0, r5
 800b24c:	f002 fe08 	bl	800de60 <ucdr_alignment>
 800b250:	2104      	movs	r1, #4
 800b252:	4408      	add	r0, r1
 800b254:	4405      	add	r5, r0
 800b256:	4628      	mov	r0, r5
 800b258:	f002 fe02 	bl	800de60 <ucdr_alignment>
 800b25c:	4420      	add	r0, r4
 800b25e:	4428      	add	r0, r5
 800b260:	bd70      	pop	{r4, r5, r6, pc}
 800b262:	bf00      	nop

0800b264 <_Setup_Request__max_serialized_size>:
 800b264:	b500      	push	{lr}
 800b266:	b083      	sub	sp, #12
 800b268:	2100      	movs	r1, #0
 800b26a:	f10d 0007 	add.w	r0, sp, #7
 800b26e:	f7ff ffc7 	bl	800b200 <max_serialized_size_racs_services__srv__Setup_Request>
 800b272:	b003      	add	sp, #12
 800b274:	f85d fb04 	ldr.w	pc, [sp], #4

0800b278 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Event>:
 800b278:	4800      	ldr	r0, [pc, #0]	; (800b27c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x4>)
 800b27a:	4770      	bx	lr
 800b27c:	200008c4 	.word	0x200008c4

0800b280 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Setup>:
 800b280:	4800      	ldr	r0, [pc, #0]	; (800b284 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Setup+0x4>)
 800b282:	4770      	bx	lr
 800b284:	20000898 	.word	0x20000898

0800b288 <_rclc_check_for_new_data>:
 800b288:	2800      	cmp	r0, #0
 800b28a:	d046      	beq.n	800b31a <_rclc_check_for_new_data+0x92>
 800b28c:	4603      	mov	r3, r0
 800b28e:	b530      	push	{r4, r5, lr}
 800b290:	7802      	ldrb	r2, [r0, #0]
 800b292:	b085      	sub	sp, #20
 800b294:	2a0a      	cmp	r2, #10
 800b296:	d842      	bhi.n	800b31e <_rclc_check_for_new_data+0x96>
 800b298:	e8df f002 	tbb	[pc, r2]
 800b29c:	14181212 	.word	0x14181212
 800b2a0:	06060614 	.word	0x06060614
 800b2a4:	2e1a      	.short	0x2e1a
 800b2a6:	16          	.byte	0x16
 800b2a7:	00          	.byte	0x00
 800b2a8:	6a0a      	ldr	r2, [r1, #32]
 800b2aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b2ac:	2000      	movs	r0, #0
 800b2ae:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800b2b2:	1a12      	subs	r2, r2, r0
 800b2b4:	bf18      	it	ne
 800b2b6:	2201      	movne	r2, #1
 800b2b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800b2bc:	b005      	add	sp, #20
 800b2be:	bd30      	pop	{r4, r5, pc}
 800b2c0:	680a      	ldr	r2, [r1, #0]
 800b2c2:	e7f2      	b.n	800b2aa <_rclc_check_for_new_data+0x22>
 800b2c4:	698a      	ldr	r2, [r1, #24]
 800b2c6:	e7f0      	b.n	800b2aa <_rclc_check_for_new_data+0x22>
 800b2c8:	688a      	ldr	r2, [r1, #8]
 800b2ca:	e7ee      	b.n	800b2aa <_rclc_check_for_new_data+0x22>
 800b2cc:	690a      	ldr	r2, [r1, #16]
 800b2ce:	e7ec      	b.n	800b2aa <_rclc_check_for_new_data+0x22>
 800b2d0:	685c      	ldr	r4, [r3, #4]
 800b2d2:	4608      	mov	r0, r1
 800b2d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b2d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b2dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b2e0:	f104 0110 	add.w	r1, r4, #16
 800b2e4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b2e8:	9500      	str	r5, [sp, #0]
 800b2ea:	f104 0341 	add.w	r3, r4, #65	; 0x41
 800b2ee:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800b2f2:	f006 f8c5 	bl	8011480 <rcl_action_client_wait_set_get_entities_ready>
 800b2f6:	e7e1      	b.n	800b2bc <_rclc_check_for_new_data+0x34>
 800b2f8:	685c      	ldr	r4, [r3, #4]
 800b2fa:	4608      	mov	r0, r1
 800b2fc:	f104 0222 	add.w	r2, r4, #34	; 0x22
 800b300:	f104 0123 	add.w	r1, r4, #35	; 0x23
 800b304:	f104 0321 	add.w	r3, r4, #33	; 0x21
 800b308:	e9cd 2100 	strd	r2, r1, [sp]
 800b30c:	f104 0220 	add.w	r2, r4, #32
 800b310:	f104 0110 	add.w	r1, r4, #16
 800b314:	f006 facc 	bl	80118b0 <rcl_action_server_wait_set_get_entities_ready>
 800b318:	e7d0      	b.n	800b2bc <_rclc_check_for_new_data+0x34>
 800b31a:	200b      	movs	r0, #11
 800b31c:	4770      	bx	lr
 800b31e:	2001      	movs	r0, #1
 800b320:	e7cc      	b.n	800b2bc <_rclc_check_for_new_data+0x34>
 800b322:	bf00      	nop

0800b324 <_rclc_take_new_data>:
 800b324:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b326:	b099      	sub	sp, #100	; 0x64
 800b328:	2800      	cmp	r0, #0
 800b32a:	f000 8088 	beq.w	800b43e <_rclc_take_new_data+0x11a>
 800b32e:	7803      	ldrb	r3, [r0, #0]
 800b330:	4604      	mov	r4, r0
 800b332:	2b0a      	cmp	r3, #10
 800b334:	f200 8167 	bhi.w	800b606 <_rclc_take_new_data+0x2e2>
 800b338:	e8df f003 	tbb	[pc, r3]
 800b33c:	44152d2d 	.word	0x44152d2d
 800b340:	19191944 	.word	0x19191944
 800b344:	065a      	.short	0x065a
 800b346:	15          	.byte	0x15
 800b347:	00          	.byte	0x00
 800b348:	6840      	ldr	r0, [r0, #4]
 800b34a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	f040 80b2 	bne.w	800b4b8 <_rclc_take_new_data+0x194>
 800b354:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800b358:	2b00      	cmp	r3, #0
 800b35a:	f040 80e4 	bne.w	800b526 <_rclc_take_new_data+0x202>
 800b35e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800b362:	2b00      	cmp	r3, #0
 800b364:	d16f      	bne.n	800b446 <_rclc_take_new_data+0x122>
 800b366:	2500      	movs	r5, #0
 800b368:	4628      	mov	r0, r5
 800b36a:	b019      	add	sp, #100	; 0x64
 800b36c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b36e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800b370:	6a0b      	ldr	r3, [r1, #32]
 800b372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d0f5      	beq.n	800b366 <_rclc_take_new_data+0x42>
 800b37a:	6882      	ldr	r2, [r0, #8]
 800b37c:	f100 0110 	add.w	r1, r0, #16
 800b380:	6840      	ldr	r0, [r0, #4]
 800b382:	f004 fd4d 	bl	800fe20 <rcl_take_request>
 800b386:	4605      	mov	r5, r0
 800b388:	2800      	cmp	r0, #0
 800b38a:	d0ec      	beq.n	800b366 <_rclc_take_new_data+0x42>
 800b38c:	f240 2359 	movw	r3, #601	; 0x259
 800b390:	4298      	cmp	r0, r3
 800b392:	d013      	beq.n	800b3bc <_rclc_take_new_data+0x98>
 800b394:	e029      	b.n	800b3ea <_rclc_take_new_data+0xc6>
 800b396:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800b398:	680b      	ldr	r3, [r1, #0]
 800b39a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d0e1      	beq.n	800b366 <_rclc_take_new_data+0x42>
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	aa0a      	add	r2, sp, #40	; 0x28
 800b3a6:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800b3aa:	f004 fe61 	bl	8010070 <rcl_take>
 800b3ae:	4605      	mov	r5, r0
 800b3b0:	2800      	cmp	r0, #0
 800b3b2:	d0d9      	beq.n	800b368 <_rclc_take_new_data+0x44>
 800b3b4:	f240 1391 	movw	r3, #401	; 0x191
 800b3b8:	4298      	cmp	r0, r3
 800b3ba:	d116      	bne.n	800b3ea <_rclc_take_new_data+0xc6>
 800b3bc:	2300      	movs	r3, #0
 800b3be:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800b3c2:	e7d1      	b.n	800b368 <_rclc_take_new_data+0x44>
 800b3c4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800b3c6:	698b      	ldr	r3, [r1, #24]
 800b3c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d0ca      	beq.n	800b366 <_rclc_take_new_data+0x42>
 800b3d0:	6882      	ldr	r2, [r0, #8]
 800b3d2:	f100 0110 	add.w	r1, r0, #16
 800b3d6:	6840      	ldr	r0, [r0, #4]
 800b3d8:	f003 fd92 	bl	800ef00 <rcl_take_response>
 800b3dc:	4605      	mov	r5, r0
 800b3de:	2800      	cmp	r0, #0
 800b3e0:	d0c1      	beq.n	800b366 <_rclc_take_new_data+0x42>
 800b3e2:	f240 13f5 	movw	r3, #501	; 0x1f5
 800b3e6:	4298      	cmp	r0, r3
 800b3e8:	d0be      	beq.n	800b368 <_rclc_take_new_data+0x44>
 800b3ea:	f000 feb9 	bl	800c160 <rcutils_reset_error>
 800b3ee:	e7bb      	b.n	800b368 <_rclc_take_new_data+0x44>
 800b3f0:	6840      	ldr	r0, [r0, #4]
 800b3f2:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d17d      	bne.n	800b4f6 <_rclc_take_new_data+0x1d2>
 800b3fa:	69c3      	ldr	r3, [r0, #28]
 800b3fc:	b11b      	cbz	r3, 800b406 <_rclc_take_new_data+0xe2>
 800b3fe:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800b402:	2b00      	cmp	r3, #0
 800b404:	d144      	bne.n	800b490 <_rclc_take_new_data+0x16c>
 800b406:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	f040 80ac 	bne.w	800b568 <_rclc_take_new_data+0x244>
 800b410:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800b414:	2b00      	cmp	r3, #0
 800b416:	d0a6      	beq.n	800b366 <_rclc_take_new_data+0x42>
 800b418:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800b41a:	a90a      	add	r1, sp, #40	; 0x28
 800b41c:	3010      	adds	r0, #16
 800b41e:	f005 ff07 	bl	8011230 <rcl_action_take_result_response>
 800b422:	4605      	mov	r5, r0
 800b424:	2800      	cmp	r0, #0
 800b426:	d1e0      	bne.n	800b3ea <_rclc_take_new_data+0xc6>
 800b428:	6860      	ldr	r0, [r4, #4]
 800b42a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b42e:	f006 fb6f 	bl	8011b10 <rclc_action_find_handle_by_result_request_sequence_number>
 800b432:	2800      	cmp	r0, #0
 800b434:	d098      	beq.n	800b368 <_rclc_take_new_data+0x44>
 800b436:	2301      	movs	r3, #1
 800b438:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 800b43c:	e794      	b.n	800b368 <_rclc_take_new_data+0x44>
 800b43e:	250b      	movs	r5, #11
 800b440:	4628      	mov	r0, r5
 800b442:	b019      	add	sp, #100	; 0x64
 800b444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b446:	ae04      	add	r6, sp, #16
 800b448:	3010      	adds	r0, #16
 800b44a:	aa0a      	add	r2, sp, #40	; 0x28
 800b44c:	4631      	mov	r1, r6
 800b44e:	f006 f963 	bl	8011718 <rcl_action_take_cancel_request>
 800b452:	4605      	mov	r5, r0
 800b454:	2800      	cmp	r0, #0
 800b456:	d1c8      	bne.n	800b3ea <_rclc_take_new_data+0xc6>
 800b458:	a90a      	add	r1, sp, #40	; 0x28
 800b45a:	6860      	ldr	r0, [r4, #4]
 800b45c:	f006 fb18 	bl	8011a90 <rclc_action_find_goal_handle_by_uuid>
 800b460:	4607      	mov	r7, r0
 800b462:	2800      	cmp	r0, #0
 800b464:	f000 80bb 	beq.w	800b5de <_rclc_take_new_data+0x2ba>
 800b468:	2101      	movs	r1, #1
 800b46a:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800b46e:	f006 fa99 	bl	80119a4 <rcl_action_transition_goal_state>
 800b472:	2803      	cmp	r0, #3
 800b474:	4684      	mov	ip, r0
 800b476:	f040 80a7 	bne.w	800b5c8 <_rclc_take_new_data+0x2a4>
 800b47a:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800b47e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800b480:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b482:	e896 0003 	ldmia.w	r6, {r0, r1}
 800b486:	e884 0003 	stmia.w	r4, {r0, r1}
 800b48a:	f887 c008 	strb.w	ip, [r7, #8]
 800b48e:	e76b      	b.n	800b368 <_rclc_take_new_data+0x44>
 800b490:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800b492:	3010      	adds	r0, #16
 800b494:	f005 ff4c 	bl	8011330 <rcl_action_take_feedback>
 800b498:	4605      	mov	r5, r0
 800b49a:	2800      	cmp	r0, #0
 800b49c:	d1a5      	bne.n	800b3ea <_rclc_take_new_data+0xc6>
 800b49e:	6860      	ldr	r0, [r4, #4]
 800b4a0:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800b4a2:	f006 faf5 	bl	8011a90 <rclc_action_find_goal_handle_by_uuid>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	2800      	cmp	r0, #0
 800b4aa:	f000 80a3 	beq.w	800b5f4 <_rclc_take_new_data+0x2d0>
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	6860      	ldr	r0, [r4, #4]
 800b4b2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800b4b6:	e7a6      	b.n	800b406 <_rclc_take_new_data+0xe2>
 800b4b8:	f006 fac4 	bl	8011a44 <rclc_action_take_goal_handle>
 800b4bc:	4606      	mov	r6, r0
 800b4be:	6860      	ldr	r0, [r4, #4]
 800b4c0:	2e00      	cmp	r6, #0
 800b4c2:	f43f af47 	beq.w	800b354 <_rclc_take_new_data+0x30>
 800b4c6:	6070      	str	r0, [r6, #4]
 800b4c8:	f106 0128 	add.w	r1, r6, #40	; 0x28
 800b4cc:	69f2      	ldr	r2, [r6, #28]
 800b4ce:	3010      	adds	r0, #16
 800b4d0:	f006 f86c 	bl	80115ac <rcl_action_take_goal_request>
 800b4d4:	4605      	mov	r5, r0
 800b4d6:	2800      	cmp	r0, #0
 800b4d8:	f040 808e 	bne.w	800b5f8 <_rclc_take_new_data+0x2d4>
 800b4dc:	69f7      	ldr	r7, [r6, #28]
 800b4de:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b4e0:	7235      	strb	r5, [r6, #8]
 800b4e2:	f8c6 0009 	str.w	r0, [r6, #9]
 800b4e6:	f8c6 100d 	str.w	r1, [r6, #13]
 800b4ea:	6860      	ldr	r0, [r4, #4]
 800b4ec:	f8c6 2011 	str.w	r2, [r6, #17]
 800b4f0:	f8c6 3015 	str.w	r3, [r6, #21]
 800b4f4:	e72e      	b.n	800b354 <_rclc_take_new_data+0x30>
 800b4f6:	aa04      	add	r2, sp, #16
 800b4f8:	a90a      	add	r1, sp, #40	; 0x28
 800b4fa:	3010      	adds	r0, #16
 800b4fc:	f005 fe20 	bl	8011140 <rcl_action_take_goal_response>
 800b500:	4605      	mov	r5, r0
 800b502:	2800      	cmp	r0, #0
 800b504:	f47f af71 	bne.w	800b3ea <_rclc_take_new_data+0xc6>
 800b508:	6860      	ldr	r0, [r4, #4]
 800b50a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b50e:	f006 faed 	bl	8011aec <rclc_action_find_handle_by_goal_request_sequence_number>
 800b512:	b130      	cbz	r0, 800b522 <_rclc_take_new_data+0x1fe>
 800b514:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800b518:	2201      	movs	r2, #1
 800b51a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 800b51e:	f880 2020 	strb.w	r2, [r0, #32]
 800b522:	6860      	ldr	r0, [r4, #4]
 800b524:	e769      	b.n	800b3fa <_rclc_take_new_data+0xd6>
 800b526:	3010      	adds	r0, #16
 800b528:	aa04      	add	r2, sp, #16
 800b52a:	a90a      	add	r1, sp, #40	; 0x28
 800b52c:	f006 f8b4 	bl	8011698 <rcl_action_take_result_request>
 800b530:	4605      	mov	r5, r0
 800b532:	2800      	cmp	r0, #0
 800b534:	f47f af59 	bne.w	800b3ea <_rclc_take_new_data+0xc6>
 800b538:	a904      	add	r1, sp, #16
 800b53a:	6860      	ldr	r0, [r4, #4]
 800b53c:	f006 faa8 	bl	8011a90 <rclc_action_find_goal_handle_by_uuid>
 800b540:	4607      	mov	r7, r0
 800b542:	b160      	cbz	r0, 800b55e <_rclc_take_new_data+0x23a>
 800b544:	ad0a      	add	r5, sp, #40	; 0x28
 800b546:	f100 0640 	add.w	r6, r0, #64	; 0x40
 800b54a:	f04f 0c02 	mov.w	ip, #2
 800b54e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b550:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b552:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b556:	e886 0003 	stmia.w	r6, {r0, r1}
 800b55a:	f887 c008 	strb.w	ip, [r7, #8]
 800b55e:	6860      	ldr	r0, [r4, #4]
 800b560:	2300      	movs	r3, #0
 800b562:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 800b566:	e6fa      	b.n	800b35e <_rclc_take_new_data+0x3a>
 800b568:	f100 0230 	add.w	r2, r0, #48	; 0x30
 800b56c:	a90a      	add	r1, sp, #40	; 0x28
 800b56e:	3010      	adds	r0, #16
 800b570:	f005 fe9e 	bl	80112b0 <rcl_action_take_cancel_response>
 800b574:	4605      	mov	r5, r0
 800b576:	2800      	cmp	r0, #0
 800b578:	f47f af37 	bne.w	800b3ea <_rclc_take_new_data+0xc6>
 800b57c:	6860      	ldr	r0, [r4, #4]
 800b57e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b582:	f006 fad7 	bl	8011b34 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800b586:	4606      	mov	r6, r0
 800b588:	6860      	ldr	r0, [r4, #4]
 800b58a:	2e00      	cmp	r6, #0
 800b58c:	f43f af40 	beq.w	800b410 <_rclc_take_new_data+0xec>
 800b590:	2701      	movs	r7, #1
 800b592:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b594:	84b7      	strh	r7, [r6, #36]	; 0x24
 800b596:	2b00      	cmp	r3, #0
 800b598:	f43f af3a 	beq.w	800b410 <_rclc_take_new_data+0xec>
 800b59c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b59e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800b5a2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800b5a6:	f006 fa73 	bl	8011a90 <rclc_action_find_goal_handle_by_uuid>
 800b5aa:	b138      	cbz	r0, 800b5bc <_rclc_take_new_data+0x298>
 800b5ac:	6860      	ldr	r0, [r4, #4]
 800b5ae:	3501      	adds	r5, #1
 800b5b0:	f886 7025 	strb.w	r7, [r6, #37]	; 0x25
 800b5b4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b5b6:	42ab      	cmp	r3, r5
 800b5b8:	d8f0      	bhi.n	800b59c <_rclc_take_new_data+0x278>
 800b5ba:	e729      	b.n	800b410 <_rclc_take_new_data+0xec>
 800b5bc:	6860      	ldr	r0, [r4, #4]
 800b5be:	3501      	adds	r5, #1
 800b5c0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b5c2:	42ab      	cmp	r3, r5
 800b5c4:	d8ea      	bhi.n	800b59c <_rclc_take_new_data+0x278>
 800b5c6:	e723      	b.n	800b410 <_rclc_take_new_data+0xec>
 800b5c8:	ab06      	add	r3, sp, #24
 800b5ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b5cc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b5d0:	2103      	movs	r1, #3
 800b5d2:	6860      	ldr	r0, [r4, #4]
 800b5d4:	e896 000c 	ldmia.w	r6, {r2, r3}
 800b5d8:	f006 fb22 	bl	8011c20 <rclc_action_server_goal_cancel_reject>
 800b5dc:	e6c4      	b.n	800b368 <_rclc_take_new_data+0x44>
 800b5de:	ab06      	add	r3, sp, #24
 800b5e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b5e2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b5e6:	2102      	movs	r1, #2
 800b5e8:	6860      	ldr	r0, [r4, #4]
 800b5ea:	e896 000c 	ldmia.w	r6, {r2, r3}
 800b5ee:	f006 fb17 	bl	8011c20 <rclc_action_server_goal_cancel_reject>
 800b5f2:	e6b9      	b.n	800b368 <_rclc_take_new_data+0x44>
 800b5f4:	6860      	ldr	r0, [r4, #4]
 800b5f6:	e706      	b.n	800b406 <_rclc_take_new_data+0xe2>
 800b5f8:	4631      	mov	r1, r6
 800b5fa:	6860      	ldr	r0, [r4, #4]
 800b5fc:	f006 fa32 	bl	8011a64 <rclc_action_remove_used_goal_handle>
 800b600:	f000 fdae 	bl	800c160 <rcutils_reset_error>
 800b604:	e6b0      	b.n	800b368 <_rclc_take_new_data+0x44>
 800b606:	2501      	movs	r5, #1
 800b608:	e6ae      	b.n	800b368 <_rclc_take_new_data+0x44>
 800b60a:	bf00      	nop

0800b60c <_rclc_execute.part.0>:
 800b60c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b60e:	7803      	ldrb	r3, [r0, #0]
 800b610:	b085      	sub	sp, #20
 800b612:	4604      	mov	r4, r0
 800b614:	2b0a      	cmp	r3, #10
 800b616:	f200 8139 	bhi.w	800b88c <_rclc_execute.part.0+0x280>
 800b61a:	e8df f003 	tbb	[pc, r3]
 800b61e:	4268      	.short	0x4268
 800b620:	06a75b4d 	.word	0x06a75b4d
 800b624:	721d0606 	.word	0x721d0606
 800b628:	62          	.byte	0x62
 800b629:	00          	.byte	0x00
 800b62a:	2b06      	cmp	r3, #6
 800b62c:	f000 8126 	beq.w	800b87c <_rclc_execute.part.0+0x270>
 800b630:	2b07      	cmp	r3, #7
 800b632:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b634:	f040 811c 	bne.w	800b870 <_rclc_execute.part.0+0x264>
 800b638:	f104 0510 	add.w	r5, r4, #16
 800b63c:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 800b640:	6880      	ldr	r0, [r0, #8]
 800b642:	4798      	blx	r3
 800b644:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b646:	4629      	mov	r1, r5
 800b648:	6860      	ldr	r0, [r4, #4]
 800b64a:	f004 fc39 	bl	800fec0 <rcl_send_response>
 800b64e:	4604      	mov	r4, r0
 800b650:	b378      	cbz	r0, 800b6b2 <_rclc_execute.part.0+0xa6>
 800b652:	f000 fd85 	bl	800c160 <rcutils_reset_error>
 800b656:	e02c      	b.n	800b6b2 <_rclc_execute.part.0+0xa6>
 800b658:	6840      	ldr	r0, [r0, #4]
 800b65a:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800b65e:	2b00      	cmp	r3, #0
 800b660:	f000 808e 	beq.w	800b780 <_rclc_execute.part.0+0x174>
 800b664:	2600      	movs	r6, #0
 800b666:	2701      	movs	r7, #1
 800b668:	e004      	b.n	800b674 <_rclc_execute.part.0+0x68>
 800b66a:	f006 f9c5 	bl	80119f8 <rclc_action_send_result_request>
 800b66e:	b998      	cbnz	r0, 800b698 <_rclc_execute.part.0+0x8c>
 800b670:	722f      	strb	r7, [r5, #8]
 800b672:	6860      	ldr	r0, [r4, #4]
 800b674:	f006 fa70 	bl	8011b58 <rclc_action_find_first_handle_with_goal_response>
 800b678:	4605      	mov	r5, r0
 800b67a:	2800      	cmp	r0, #0
 800b67c:	d07f      	beq.n	800b77e <_rclc_execute.part.0+0x172>
 800b67e:	6863      	ldr	r3, [r4, #4]
 800b680:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b682:	699b      	ldr	r3, [r3, #24]
 800b684:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 800b688:	f885 6020 	strb.w	r6, [r5, #32]
 800b68c:	4798      	blx	r3
 800b68e:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 800b692:	4628      	mov	r0, r5
 800b694:	2b00      	cmp	r3, #0
 800b696:	d1e8      	bne.n	800b66a <_rclc_execute.part.0+0x5e>
 800b698:	6860      	ldr	r0, [r4, #4]
 800b69a:	4629      	mov	r1, r5
 800b69c:	f006 f9e2 	bl	8011a64 <rclc_action_remove_used_goal_handle>
 800b6a0:	e7e7      	b.n	800b672 <_rclc_execute.part.0+0x66>
 800b6a2:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 800b6a6:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
 800b6aa:	b100      	cbz	r0, 800b6ae <_rclc_execute.part.0+0xa2>
 800b6ac:	68a0      	ldr	r0, [r4, #8]
 800b6ae:	2400      	movs	r4, #0
 800b6b0:	4798      	blx	r3
 800b6b2:	4620      	mov	r0, r4
 800b6b4:	b005      	add	sp, #20
 800b6b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6b8:	6840      	ldr	r0, [r0, #4]
 800b6ba:	f004 fdf7 	bl	80102ac <rcl_timer_call>
 800b6be:	f240 3321 	movw	r3, #801	; 0x321
 800b6c2:	4604      	mov	r4, r0
 800b6c4:	4298      	cmp	r0, r3
 800b6c6:	d001      	beq.n	800b6cc <_rclc_execute.part.0+0xc0>
 800b6c8:	2800      	cmp	r0, #0
 800b6ca:	d1c2      	bne.n	800b652 <_rclc_execute.part.0+0x46>
 800b6cc:	2400      	movs	r4, #0
 800b6ce:	4620      	mov	r0, r4
 800b6d0:	b005      	add	sp, #20
 800b6d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6d4:	2400      	movs	r4, #0
 800b6d6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b6d8:	6880      	ldr	r0, [r0, #8]
 800b6da:	4798      	blx	r3
 800b6dc:	4620      	mov	r0, r4
 800b6de:	b005      	add	sp, #20
 800b6e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6e2:	2400      	movs	r4, #0
 800b6e4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b6e6:	4798      	blx	r3
 800b6e8:	4620      	mov	r0, r4
 800b6ea:	b005      	add	sp, #20
 800b6ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6ee:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 800b6f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b6f4:	b100      	cbz	r0, 800b6f8 <_rclc_execute.part.0+0xec>
 800b6f6:	68a0      	ldr	r0, [r4, #8]
 800b6f8:	2400      	movs	r4, #0
 800b6fa:	4798      	blx	r3
 800b6fc:	4620      	mov	r0, r4
 800b6fe:	b005      	add	sp, #20
 800b700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b702:	6840      	ldr	r0, [r0, #4]
 800b704:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800b708:	bb3b      	cbnz	r3, 800b75a <_rclc_execute.part.0+0x14e>
 800b70a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d07d      	beq.n	800b80e <_rclc_execute.part.0+0x202>
 800b712:	f640 0634 	movw	r6, #2100	; 0x834
 800b716:	2701      	movs	r7, #1
 800b718:	e007      	b.n	800b72a <_rclc_execute.part.0+0x11e>
 800b71a:	4628      	mov	r0, r5
 800b71c:	f006 fa34 	bl	8011b88 <rclc_action_server_response_goal_request>
 800b720:	4629      	mov	r1, r5
 800b722:	6860      	ldr	r0, [r4, #4]
 800b724:	f006 f99e 	bl	8011a64 <rclc_action_remove_used_goal_handle>
 800b728:	6860      	ldr	r0, [r4, #4]
 800b72a:	2100      	movs	r1, #0
 800b72c:	f006 f9c6 	bl	8011abc <rclc_action_find_first_handle_by_status>
 800b730:	4605      	mov	r5, r0
 800b732:	2800      	cmp	r0, #0
 800b734:	d068      	beq.n	800b808 <_rclc_execute.part.0+0x1fc>
 800b736:	6863      	ldr	r3, [r4, #4]
 800b738:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b73a:	699b      	ldr	r3, [r3, #24]
 800b73c:	4798      	blx	r3
 800b73e:	42b0      	cmp	r0, r6
 800b740:	f04f 0100 	mov.w	r1, #0
 800b744:	d1e9      	bne.n	800b71a <_rclc_execute.part.0+0x10e>
 800b746:	2101      	movs	r1, #1
 800b748:	4628      	mov	r0, r5
 800b74a:	f006 fa1d 	bl	8011b88 <rclc_action_server_response_goal_request>
 800b74e:	722f      	strb	r7, [r5, #8]
 800b750:	e7ea      	b.n	800b728 <_rclc_execute.part.0+0x11c>
 800b752:	6848      	ldr	r0, [r1, #4]
 800b754:	f006 f986 	bl	8011a64 <rclc_action_remove_used_goal_handle>
 800b758:	6860      	ldr	r0, [r4, #4]
 800b75a:	f006 f9bb 	bl	8011ad4 <rclc_action_find_first_terminated_handle>
 800b75e:	4601      	mov	r1, r0
 800b760:	2800      	cmp	r0, #0
 800b762:	d1f6      	bne.n	800b752 <_rclc_execute.part.0+0x146>
 800b764:	6860      	ldr	r0, [r4, #4]
 800b766:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 800b76a:	e7ce      	b.n	800b70a <_rclc_execute.part.0+0xfe>
 800b76c:	2400      	movs	r4, #0
 800b76e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b770:	f100 0110 	add.w	r1, r0, #16
 800b774:	6880      	ldr	r0, [r0, #8]
 800b776:	4798      	blx	r3
 800b778:	4620      	mov	r0, r4
 800b77a:	b005      	add	sp, #20
 800b77c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b77e:	6860      	ldr	r0, [r4, #4]
 800b780:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800b784:	b18b      	cbz	r3, 800b7aa <_rclc_execute.part.0+0x19e>
 800b786:	68c5      	ldr	r5, [r0, #12]
 800b788:	b32d      	cbz	r5, 800b7d6 <_rclc_execute.part.0+0x1ca>
 800b78a:	2600      	movs	r6, #0
 800b78c:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800b790:	b143      	cbz	r3, 800b7a4 <_rclc_execute.part.0+0x198>
 800b792:	69c3      	ldr	r3, [r0, #28]
 800b794:	f885 6022 	strb.w	r6, [r5, #34]	; 0x22
 800b798:	b123      	cbz	r3, 800b7a4 <_rclc_execute.part.0+0x198>
 800b79a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800b79c:	4628      	mov	r0, r5
 800b79e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b7a0:	4798      	blx	r3
 800b7a2:	6860      	ldr	r0, [r4, #4]
 800b7a4:	682d      	ldr	r5, [r5, #0]
 800b7a6:	2d00      	cmp	r5, #0
 800b7a8:	d1f0      	bne.n	800b78c <_rclc_execute.part.0+0x180>
 800b7aa:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800b7ae:	b193      	cbz	r3, 800b7d6 <_rclc_execute.part.0+0x1ca>
 800b7b0:	68c5      	ldr	r5, [r0, #12]
 800b7b2:	b185      	cbz	r5, 800b7d6 <_rclc_execute.part.0+0x1ca>
 800b7b4:	2600      	movs	r6, #0
 800b7b6:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800b7ba:	b14b      	cbz	r3, 800b7d0 <_rclc_execute.part.0+0x1c4>
 800b7bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b7be:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 800b7c2:	b12b      	cbz	r3, 800b7d0 <_rclc_execute.part.0+0x1c4>
 800b7c4:	4628      	mov	r0, r5
 800b7c6:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 800b7ca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b7cc:	4798      	blx	r3
 800b7ce:	6860      	ldr	r0, [r4, #4]
 800b7d0:	682d      	ldr	r5, [r5, #0]
 800b7d2:	2d00      	cmp	r5, #0
 800b7d4:	d1ef      	bne.n	800b7b6 <_rclc_execute.part.0+0x1aa>
 800b7d6:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	f43f af76 	beq.w	800b6cc <_rclc_execute.part.0+0xc0>
 800b7e0:	2700      	movs	r7, #0
 800b7e2:	e00b      	b.n	800b7fc <_rclc_execute.part.0+0x1f0>
 800b7e4:	6863      	ldr	r3, [r4, #4]
 800b7e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b7e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b7ea:	6a1e      	ldr	r6, [r3, #32]
 800b7ec:	f885 7023 	strb.w	r7, [r5, #35]	; 0x23
 800b7f0:	47b0      	blx	r6
 800b7f2:	6860      	ldr	r0, [r4, #4]
 800b7f4:	4629      	mov	r1, r5
 800b7f6:	f006 f935 	bl	8011a64 <rclc_action_remove_used_goal_handle>
 800b7fa:	6860      	ldr	r0, [r4, #4]
 800b7fc:	f006 f9b8 	bl	8011b70 <rclc_action_find_first_handle_with_result_response>
 800b800:	4605      	mov	r5, r0
 800b802:	2800      	cmp	r0, #0
 800b804:	d1ee      	bne.n	800b7e4 <_rclc_execute.part.0+0x1d8>
 800b806:	e761      	b.n	800b6cc <_rclc_execute.part.0+0xc0>
 800b808:	6860      	ldr	r0, [r4, #4]
 800b80a:	f880 5020 	strb.w	r5, [r0, #32]
 800b80e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800b812:	2b00      	cmp	r3, #0
 800b814:	f43f af5a 	beq.w	800b6cc <_rclc_execute.part.0+0xc0>
 800b818:	68c5      	ldr	r5, [r0, #12]
 800b81a:	b1b5      	cbz	r5, 800b84a <_rclc_execute.part.0+0x23e>
 800b81c:	2602      	movs	r6, #2
 800b81e:	e001      	b.n	800b824 <_rclc_execute.part.0+0x218>
 800b820:	682d      	ldr	r5, [r5, #0]
 800b822:	b195      	cbz	r5, 800b84a <_rclc_execute.part.0+0x23e>
 800b824:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800b828:	2b03      	cmp	r3, #3
 800b82a:	d1f9      	bne.n	800b820 <_rclc_execute.part.0+0x214>
 800b82c:	69c3      	ldr	r3, [r0, #28]
 800b82e:	4628      	mov	r0, r5
 800b830:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b832:	4798      	blx	r3
 800b834:	4603      	mov	r3, r0
 800b836:	f105 0260 	add.w	r2, r5, #96	; 0x60
 800b83a:	4628      	mov	r0, r5
 800b83c:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800b840:	b143      	cbz	r3, 800b854 <_rclc_execute.part.0+0x248>
 800b842:	f006 f9c1 	bl	8011bc8 <rclc_action_server_goal_cancel_accept>
 800b846:	6860      	ldr	r0, [r4, #4]
 800b848:	e7ea      	b.n	800b820 <_rclc_execute.part.0+0x214>
 800b84a:	2300      	movs	r3, #0
 800b84c:	461c      	mov	r4, r3
 800b84e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 800b852:	e72e      	b.n	800b6b2 <_rclc_execute.part.0+0xa6>
 800b854:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800b856:	f105 0758 	add.w	r7, r5, #88	; 0x58
 800b85a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b85e:	2101      	movs	r1, #1
 800b860:	6860      	ldr	r0, [r4, #4]
 800b862:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b866:	f006 f9db 	bl	8011c20 <rclc_action_server_goal_cancel_reject>
 800b86a:	722e      	strb	r6, [r5, #8]
 800b86c:	6860      	ldr	r0, [r4, #4]
 800b86e:	e7d7      	b.n	800b820 <_rclc_execute.part.0+0x214>
 800b870:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800b872:	f104 0510 	add.w	r5, r4, #16
 800b876:	6880      	ldr	r0, [r0, #8]
 800b878:	4798      	blx	r3
 800b87a:	e6e3      	b.n	800b644 <_rclc_execute.part.0+0x38>
 800b87c:	f100 0510 	add.w	r5, r0, #16
 800b880:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b882:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800b884:	4629      	mov	r1, r5
 800b886:	6880      	ldr	r0, [r0, #8]
 800b888:	4798      	blx	r3
 800b88a:	e6db      	b.n	800b644 <_rclc_execute.part.0+0x38>
 800b88c:	2401      	movs	r4, #1
 800b88e:	e710      	b.n	800b6b2 <_rclc_execute.part.0+0xa6>

0800b890 <rclc_executor_trigger_any>:
 800b890:	2800      	cmp	r0, #0
 800b892:	d03d      	beq.n	800b910 <rclc_executor_trigger_any+0x80>
 800b894:	2900      	cmp	r1, #0
 800b896:	d03c      	beq.n	800b912 <rclc_executor_trigger_any+0x82>
 800b898:	4603      	mov	r3, r0
 800b89a:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 800b89e:	2200      	movs	r2, #0
 800b8a0:	2800      	cmp	r0, #0
 800b8a2:	d035      	beq.n	800b910 <rclc_executor_trigger_any+0x80>
 800b8a4:	b430      	push	{r4, r5}
 800b8a6:	f893 c000 	ldrb.w	ip, [r3]
 800b8aa:	f1bc 0f08 	cmp.w	ip, #8
 800b8ae:	d11d      	bne.n	800b8ec <rclc_executor_trigger_any+0x5c>
 800b8b0:	685c      	ldr	r4, [r3, #4]
 800b8b2:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800b8b4:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800b8b8:	d105      	bne.n	800b8c6 <rclc_executor_trigger_any+0x36>
 800b8ba:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800b8be:	b910      	cbnz	r0, 800b8c6 <rclc_executor_trigger_any+0x36>
 800b8c0:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 800b8c4:	b128      	cbz	r0, 800b8d2 <rclc_executor_trigger_any+0x42>
 800b8c6:	bc30      	pop	{r4, r5}
 800b8c8:	4770      	bx	lr
 800b8ca:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800b8ce:	2800      	cmp	r0, #0
 800b8d0:	d1f9      	bne.n	800b8c6 <rclc_executor_trigger_any+0x36>
 800b8d2:	3201      	adds	r2, #1
 800b8d4:	3340      	adds	r3, #64	; 0x40
 800b8d6:	4291      	cmp	r1, r2
 800b8d8:	d017      	beq.n	800b90a <rclc_executor_trigger_any+0x7a>
 800b8da:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800b8de:	2800      	cmp	r0, #0
 800b8e0:	d0f1      	beq.n	800b8c6 <rclc_executor_trigger_any+0x36>
 800b8e2:	f893 c000 	ldrb.w	ip, [r3]
 800b8e6:	f1bc 0f08 	cmp.w	ip, #8
 800b8ea:	d0e1      	beq.n	800b8b0 <rclc_executor_trigger_any+0x20>
 800b8ec:	f1bc 0f09 	cmp.w	ip, #9
 800b8f0:	d1eb      	bne.n	800b8ca <rclc_executor_trigger_any+0x3a>
 800b8f2:	685c      	ldr	r4, [r3, #4]
 800b8f4:	6a25      	ldr	r5, [r4, #32]
 800b8f6:	2d00      	cmp	r5, #0
 800b8f8:	d1e5      	bne.n	800b8c6 <rclc_executor_trigger_any+0x36>
 800b8fa:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800b8fe:	2800      	cmp	r0, #0
 800b900:	d1e1      	bne.n	800b8c6 <rclc_executor_trigger_any+0x36>
 800b902:	3201      	adds	r2, #1
 800b904:	3340      	adds	r3, #64	; 0x40
 800b906:	4291      	cmp	r1, r2
 800b908:	d1e7      	bne.n	800b8da <rclc_executor_trigger_any+0x4a>
 800b90a:	2000      	movs	r0, #0
 800b90c:	bc30      	pop	{r4, r5}
 800b90e:	4770      	bx	lr
 800b910:	4770      	bx	lr
 800b912:	4608      	mov	r0, r1
 800b914:	4770      	bx	lr
 800b916:	bf00      	nop

0800b918 <rclc_executor_get_zero_initialized_executor>:
 800b918:	b510      	push	{r4, lr}
 800b91a:	4604      	mov	r4, r0
 800b91c:	2290      	movs	r2, #144	; 0x90
 800b91e:	4902      	ldr	r1, [pc, #8]	; (800b928 <rclc_executor_get_zero_initialized_executor+0x10>)
 800b920:	f00d ffcd 	bl	80198be <memcpy>
 800b924:	4620      	mov	r0, r4
 800b926:	bd10      	pop	{r4, pc}
 800b928:	0801aff8 	.word	0x0801aff8
 800b92c:	00000000 	.word	0x00000000

0800b930 <rclc_executor_init>:
 800b930:	2900      	cmp	r1, #0
 800b932:	d06a      	beq.n	800ba0a <rclc_executor_init+0xda>
 800b934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b938:	4605      	mov	r5, r0
 800b93a:	b0b2      	sub	sp, #200	; 0xc8
 800b93c:	2800      	cmp	r0, #0
 800b93e:	d05c      	beq.n	800b9fa <rclc_executor_init+0xca>
 800b940:	4616      	mov	r6, r2
 800b942:	4618      	mov	r0, r3
 800b944:	4688      	mov	r8, r1
 800b946:	461f      	mov	r7, r3
 800b948:	f000 fbe6 	bl	800c118 <rcutils_allocator_is_valid>
 800b94c:	2e00      	cmp	r6, #0
 800b94e:	d054      	beq.n	800b9fa <rclc_executor_init+0xca>
 800b950:	f080 0401 	eor.w	r4, r0, #1
 800b954:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800b958:	d14f      	bne.n	800b9fa <rclc_executor_init+0xca>
 800b95a:	2290      	movs	r2, #144	; 0x90
 800b95c:	4930      	ldr	r1, [pc, #192]	; (800ba20 <rclc_executor_init+0xf0>)
 800b95e:	a80e      	add	r0, sp, #56	; 0x38
 800b960:	f00d ffad 	bl	80198be <memcpy>
 800b964:	a90e      	add	r1, sp, #56	; 0x38
 800b966:	2290      	movs	r2, #144	; 0x90
 800b968:	4628      	mov	r0, r5
 800b96a:	f00d ffa8 	bl	80198be <memcpy>
 800b96e:	4668      	mov	r0, sp
 800b970:	f8c5 8004 	str.w	r8, [r5, #4]
 800b974:	60ee      	str	r6, [r5, #12]
 800b976:	f004 fe0f 	bl	8010598 <rcl_get_zero_initialized_wait_set>
 800b97a:	46ec      	mov	ip, sp
 800b97c:	f105 0e18 	add.w	lr, r5, #24
 800b980:	f8d7 8000 	ldr.w	r8, [r7]
 800b984:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b988:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b98c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b990:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b994:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b998:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800ba18 <rclc_executor_init+0xe8>
 800b99c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b9a0:	f8dc 3000 	ldr.w	r3, [ip]
 800b9a4:	01b0      	lsls	r0, r6, #6
 800b9a6:	6939      	ldr	r1, [r7, #16]
 800b9a8:	f8ce 3000 	str.w	r3, [lr]
 800b9ac:	616f      	str	r7, [r5, #20]
 800b9ae:	ed85 7b1c 	vstr	d7, [r5, #112]	; 0x70
 800b9b2:	47c0      	blx	r8
 800b9b4:	60a8      	str	r0, [r5, #8]
 800b9b6:	b908      	cbnz	r0, 800b9bc <rclc_executor_init+0x8c>
 800b9b8:	e029      	b.n	800ba0e <rclc_executor_init+0xde>
 800b9ba:	68a8      	ldr	r0, [r5, #8]
 800b9bc:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800b9c0:	3401      	adds	r4, #1
 800b9c2:	4631      	mov	r1, r6
 800b9c4:	f000 fa88 	bl	800bed8 <rclc_executor_handle_init>
 800b9c8:	42a6      	cmp	r6, r4
 800b9ca:	d8f6      	bhi.n	800b9ba <rclc_executor_init+0x8a>
 800b9cc:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 800b9d0:	f000 fa78 	bl	800bec4 <rclc_executor_handle_counters_zero_init>
 800b9d4:	4a13      	ldr	r2, [pc, #76]	; (800ba24 <rclc_executor_init+0xf4>)
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	68a8      	ldr	r0, [r5, #8]
 800b9da:	e9c5 2320 	strd	r2, r3, [r5, #128]	; 0x80
 800b9de:	b168      	cbz	r0, 800b9fc <rclc_executor_init+0xcc>
 800b9e0:	68eb      	ldr	r3, [r5, #12]
 800b9e2:	b173      	cbz	r3, 800ba02 <rclc_executor_init+0xd2>
 800b9e4:	696a      	ldr	r2, [r5, #20]
 800b9e6:	fab2 f382 	clz	r3, r2
 800b9ea:	095b      	lsrs	r3, r3, #5
 800b9ec:	b14a      	cbz	r2, 800ba02 <rclc_executor_init+0xd2>
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f885 3088 	strb.w	r3, [r5, #136]	; 0x88
 800b9f4:	b032      	add	sp, #200	; 0xc8
 800b9f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9fa:	200b      	movs	r0, #11
 800b9fc:	b032      	add	sp, #200	; 0xc8
 800b9fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba02:	2000      	movs	r0, #0
 800ba04:	b032      	add	sp, #200	; 0xc8
 800ba06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba0a:	200b      	movs	r0, #11
 800ba0c:	4770      	bx	lr
 800ba0e:	200a      	movs	r0, #10
 800ba10:	e7f4      	b.n	800b9fc <rclc_executor_init+0xcc>
 800ba12:	bf00      	nop
 800ba14:	f3af 8000 	nop.w
 800ba18:	3b9aca00 	.word	0x3b9aca00
 800ba1c:	00000000 	.word	0x00000000
 800ba20:	0801aff8 	.word	0x0801aff8
 800ba24:	0800b891 	.word	0x0800b891

0800ba28 <rclc_executor_add_service>:
 800ba28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba2a:	9d06      	ldr	r5, [sp, #24]
 800ba2c:	4604      	mov	r4, r0
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	bf18      	it	ne
 800ba32:	2d00      	cmpne	r5, #0
 800ba34:	bf0c      	ite	eq
 800ba36:	2001      	moveq	r0, #1
 800ba38:	2000      	movne	r0, #0
 800ba3a:	2a00      	cmp	r2, #0
 800ba3c:	bf08      	it	eq
 800ba3e:	f040 0001 	orreq.w	r0, r0, #1
 800ba42:	2900      	cmp	r1, #0
 800ba44:	bf08      	it	eq
 800ba46:	f040 0001 	orreq.w	r0, r0, #1
 800ba4a:	bb40      	cbnz	r0, 800ba9e <rclc_executor_add_service+0x76>
 800ba4c:	fab4 f684 	clz	r6, r4
 800ba50:	0976      	lsrs	r6, r6, #5
 800ba52:	b324      	cbz	r4, 800ba9e <rclc_executor_add_service+0x76>
 800ba54:	e9d4 7003 	ldrd	r7, r0, [r4, #12]
 800ba58:	42b8      	cmp	r0, r7
 800ba5a:	d301      	bcc.n	800ba60 <rclc_executor_add_service+0x38>
 800ba5c:	2001      	movs	r0, #1
 800ba5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba60:	68a7      	ldr	r7, [r4, #8]
 800ba62:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800ba66:	f100 0c01 	add.w	ip, r0, #1
 800ba6a:	eb07 1080 	add.w	r0, r7, r0, lsl #6
 800ba6e:	6283      	str	r3, [r0, #40]	; 0x28
 800ba70:	2305      	movs	r3, #5
 800ba72:	6305      	str	r5, [r0, #48]	; 0x30
 800ba74:	f104 0518 	add.w	r5, r4, #24
 800ba78:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800ba7c:	f827 300e 	strh.w	r3, [r7, lr]
 800ba80:	2301      	movs	r3, #1
 800ba82:	62c6      	str	r6, [r0, #44]	; 0x2c
 800ba84:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 800ba88:	4628      	mov	r0, r5
 800ba8a:	f8c4 c010 	str.w	ip, [r4, #16]
 800ba8e:	f004 fd97 	bl	80105c0 <rcl_wait_set_is_valid>
 800ba92:	b930      	cbnz	r0, 800baa2 <rclc_executor_add_service+0x7a>
 800ba94:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ba96:	2000      	movs	r0, #0
 800ba98:	3301      	adds	r3, #1
 800ba9a:	65a3      	str	r3, [r4, #88]	; 0x58
 800ba9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba9e:	200b      	movs	r0, #11
 800baa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800baa2:	4628      	mov	r0, r5
 800baa4:	f004 fd92 	bl	80105cc <rcl_wait_set_fini>
 800baa8:	2800      	cmp	r0, #0
 800baaa:	d0f3      	beq.n	800ba94 <rclc_executor_add_service+0x6c>
 800baac:	e7d7      	b.n	800ba5e <rclc_executor_add_service+0x36>
 800baae:	bf00      	nop

0800bab0 <rclc_executor_prepare>:
 800bab0:	2800      	cmp	r0, #0
 800bab2:	d044      	beq.n	800bb3e <rclc_executor_prepare+0x8e>
 800bab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bab6:	f100 0518 	add.w	r5, r0, #24
 800baba:	b09b      	sub	sp, #108	; 0x6c
 800babc:	4604      	mov	r4, r0
 800babe:	4628      	mov	r0, r5
 800bac0:	f004 fd7e 	bl	80105c0 <rcl_wait_set_is_valid>
 800bac4:	b110      	cbz	r0, 800bacc <rclc_executor_prepare+0x1c>
 800bac6:	2000      	movs	r0, #0
 800bac8:	b01b      	add	sp, #108	; 0x6c
 800baca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bacc:	4628      	mov	r0, r5
 800bace:	f004 fd7d 	bl	80105cc <rcl_wait_set_fini>
 800bad2:	2800      	cmp	r0, #0
 800bad4:	d130      	bne.n	800bb38 <rclc_executor_prepare+0x88>
 800bad6:	a80c      	add	r0, sp, #48	; 0x30
 800bad8:	ae04      	add	r6, sp, #16
 800bada:	f004 fd5d 	bl	8010598 <rcl_get_zero_initialized_wait_set>
 800bade:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800bae2:	46ae      	mov	lr, r5
 800bae4:	6967      	ldr	r7, [r4, #20]
 800bae6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800baea:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800baee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800baf2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800baf6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bafa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bafe:	f8dc 3000 	ldr.w	r3, [ip]
 800bb02:	f8ce 3000 	str.w	r3, [lr]
 800bb06:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800bb08:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	4628      	mov	r0, r5
 800bb0e:	6862      	ldr	r2, [r4, #4]
 800bb10:	6033      	str	r3, [r6, #0]
 800bb12:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800bb14:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800bb16:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800bb1a:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	; 0x50
 800bb1e:	e9cd 2100 	strd	r2, r1, [sp]
 800bb22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bb24:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800bb26:	f005 f851 	bl	8010bcc <rcl_wait_set_init>
 800bb2a:	2800      	cmp	r0, #0
 800bb2c:	d0cc      	beq.n	800bac8 <rclc_executor_prepare+0x18>
 800bb2e:	900b      	str	r0, [sp, #44]	; 0x2c
 800bb30:	f000 fb16 	bl	800c160 <rcutils_reset_error>
 800bb34:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800bb36:	e7c7      	b.n	800bac8 <rclc_executor_prepare+0x18>
 800bb38:	f000 fb12 	bl	800c160 <rcutils_reset_error>
 800bb3c:	e7cb      	b.n	800bad6 <rclc_executor_prepare+0x26>
 800bb3e:	200b      	movs	r0, #11
 800bb40:	4770      	bx	lr
 800bb42:	bf00      	nop

0800bb44 <rclc_executor_spin_some.part.0>:
 800bb44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb48:	4605      	mov	r5, r0
 800bb4a:	4691      	mov	r9, r2
 800bb4c:	4698      	mov	r8, r3
 800bb4e:	f7ff ffaf 	bl	800bab0 <rclc_executor_prepare>
 800bb52:	f105 0618 	add.w	r6, r5, #24
 800bb56:	4630      	mov	r0, r6
 800bb58:	f004 fe04 	bl	8010764 <rcl_wait_set_clear>
 800bb5c:	4607      	mov	r7, r0
 800bb5e:	2800      	cmp	r0, #0
 800bb60:	f040 80a8 	bne.w	800bcb4 <rclc_executor_spin_some.part.0+0x170>
 800bb64:	68eb      	ldr	r3, [r5, #12]
 800bb66:	b30b      	cbz	r3, 800bbac <rclc_executor_spin_some.part.0+0x68>
 800bb68:	4604      	mov	r4, r0
 800bb6a:	68a9      	ldr	r1, [r5, #8]
 800bb6c:	01a2      	lsls	r2, r4, #6
 800bb6e:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800bb72:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 800bb76:	b1cb      	cbz	r3, 800bbac <rclc_executor_spin_some.part.0+0x68>
 800bb78:	5c8b      	ldrb	r3, [r1, r2]
 800bb7a:	2b0a      	cmp	r3, #10
 800bb7c:	f200 80de 	bhi.w	800bd3c <rclc_executor_spin_some.part.0+0x1f8>
 800bb80:	e8df f003 	tbb	[pc, r3]
 800bb84:	8da99d9d 	.word	0x8da99d9d
 800bb88:	0606068d 	.word	0x0606068d
 800bb8c:	c1ce      	.short	0xc1ce
 800bb8e:	b5          	.byte	0xb5
 800bb8f:	00          	.byte	0x00
 800bb90:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800bb94:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800bb98:	4630      	mov	r0, r6
 800bb9a:	f005 f933 	bl	8010e04 <rcl_wait_set_add_service>
 800bb9e:	2800      	cmp	r0, #0
 800bba0:	f040 8087 	bne.w	800bcb2 <rclc_executor_spin_some.part.0+0x16e>
 800bba4:	3401      	adds	r4, #1
 800bba6:	68eb      	ldr	r3, [r5, #12]
 800bba8:	429c      	cmp	r4, r3
 800bbaa:	d3de      	bcc.n	800bb6a <rclc_executor_spin_some.part.0+0x26>
 800bbac:	4643      	mov	r3, r8
 800bbae:	464a      	mov	r2, r9
 800bbb0:	4630      	mov	r0, r6
 800bbb2:	f005 f955 	bl	8010e60 <rcl_wait>
 800bbb6:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	f000 80c6 	beq.w	800bd4c <rclc_executor_spin_some.part.0+0x208>
 800bbc0:	2b01      	cmp	r3, #1
 800bbc2:	f040 80bb 	bne.w	800bd3c <rclc_executor_spin_some.part.0+0x1f8>
 800bbc6:	68eb      	ldr	r3, [r5, #12]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	f000 8159 	beq.w	800be80 <rclc_executor_spin_some.part.0+0x33c>
 800bbce:	2400      	movs	r4, #0
 800bbd0:	f240 1991 	movw	r9, #401	; 0x191
 800bbd4:	46a0      	mov	r8, r4
 800bbd6:	e00a      	b.n	800bbee <rclc_executor_spin_some.part.0+0xaa>
 800bbd8:	f7ff fb56 	bl	800b288 <_rclc_check_for_new_data>
 800bbdc:	4604      	mov	r4, r0
 800bbde:	b110      	cbz	r0, 800bbe6 <rclc_executor_spin_some.part.0+0xa2>
 800bbe0:	4548      	cmp	r0, r9
 800bbe2:	f040 80b1 	bne.w	800bd48 <rclc_executor_spin_some.part.0+0x204>
 800bbe6:	68eb      	ldr	r3, [r5, #12]
 800bbe8:	4598      	cmp	r8, r3
 800bbea:	f080 8126 	bcs.w	800be3a <rclc_executor_spin_some.part.0+0x2f6>
 800bbee:	68aa      	ldr	r2, [r5, #8]
 800bbf0:	4631      	mov	r1, r6
 800bbf2:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800bbf6:	f108 0801 	add.w	r8, r8, #1
 800bbfa:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800bbfe:	f1bc 0f00 	cmp.w	ip, #0
 800bc02:	d1e9      	bne.n	800bbd8 <rclc_executor_spin_some.part.0+0x94>
 800bc04:	4619      	mov	r1, r3
 800bc06:	4610      	mov	r0, r2
 800bc08:	e9d5 3220 	ldrd	r3, r2, [r5, #128]	; 0x80
 800bc0c:	4798      	blx	r3
 800bc0e:	2800      	cmp	r0, #0
 800bc10:	f000 809a 	beq.w	800bd48 <rclc_executor_spin_some.part.0+0x204>
 800bc14:	68eb      	ldr	r3, [r5, #12]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	f000 8096 	beq.w	800bd48 <rclc_executor_spin_some.part.0+0x204>
 800bc1c:	f04f 0800 	mov.w	r8, #0
 800bc20:	f240 1991 	movw	r9, #401	; 0x191
 800bc24:	e009      	b.n	800bc3a <rclc_executor_spin_some.part.0+0xf6>
 800bc26:	f7ff fb7d 	bl	800b324 <_rclc_take_new_data>
 800bc2a:	4604      	mov	r4, r0
 800bc2c:	b110      	cbz	r0, 800bc34 <rclc_executor_spin_some.part.0+0xf0>
 800bc2e:	4548      	cmp	r0, r9
 800bc30:	f040 808a 	bne.w	800bd48 <rclc_executor_spin_some.part.0+0x204>
 800bc34:	68eb      	ldr	r3, [r5, #12]
 800bc36:	4598      	cmp	r8, r3
 800bc38:	d209      	bcs.n	800bc4e <rclc_executor_spin_some.part.0+0x10a>
 800bc3a:	68a8      	ldr	r0, [r5, #8]
 800bc3c:	4631      	mov	r1, r6
 800bc3e:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800bc42:	f108 0801 	add.w	r8, r8, #1
 800bc46:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800bc4a:	2a00      	cmp	r2, #0
 800bc4c:	d1eb      	bne.n	800bc26 <rclc_executor_spin_some.part.0+0xe2>
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d07a      	beq.n	800bd48 <rclc_executor_spin_some.part.0+0x204>
 800bc52:	2600      	movs	r6, #0
 800bc54:	e00e      	b.n	800bc74 <rclc_executor_spin_some.part.0+0x130>
 800bc56:	f812 200c 	ldrb.w	r2, [r2, ip]
 800bc5a:	2a08      	cmp	r2, #8
 800bc5c:	f000 80fc 	beq.w	800be58 <rclc_executor_spin_some.part.0+0x314>
 800bc60:	2a09      	cmp	r2, #9
 800bc62:	f000 80ee 	beq.w	800be42 <rclc_executor_spin_some.part.0+0x2fe>
 800bc66:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 800bc6a:	b98a      	cbnz	r2, 800bc90 <rclc_executor_spin_some.part.0+0x14c>
 800bc6c:	3601      	adds	r6, #1
 800bc6e:	429e      	cmp	r6, r3
 800bc70:	d267      	bcs.n	800bd42 <rclc_executor_spin_some.part.0+0x1fe>
 800bc72:	2400      	movs	r4, #0
 800bc74:	68aa      	ldr	r2, [r5, #8]
 800bc76:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800bc7a:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800bc7e:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
 800bc82:	2900      	cmp	r1, #0
 800bc84:	d060      	beq.n	800bd48 <rclc_executor_spin_some.part.0+0x204>
 800bc86:	7841      	ldrb	r1, [r0, #1]
 800bc88:	2900      	cmp	r1, #0
 800bc8a:	d0e4      	beq.n	800bc56 <rclc_executor_spin_some.part.0+0x112>
 800bc8c:	2901      	cmp	r1, #1
 800bc8e:	d1ed      	bne.n	800bc6c <rclc_executor_spin_some.part.0+0x128>
 800bc90:	f7ff fcbc 	bl	800b60c <_rclc_execute.part.0>
 800bc94:	2800      	cmp	r0, #0
 800bc96:	f040 80b5 	bne.w	800be04 <rclc_executor_spin_some.part.0+0x2c0>
 800bc9a:	68eb      	ldr	r3, [r5, #12]
 800bc9c:	e7e6      	b.n	800bc6c <rclc_executor_spin_some.part.0+0x128>
 800bc9e:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800bca2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800bca6:	4630      	mov	r0, r6
 800bca8:	f005 f880 	bl	8010dac <rcl_wait_set_add_client>
 800bcac:	2800      	cmp	r0, #0
 800bcae:	f43f af79 	beq.w	800bba4 <rclc_executor_spin_some.part.0+0x60>
 800bcb2:	4607      	mov	r7, r0
 800bcb4:	f000 fa54 	bl	800c160 <rcutils_reset_error>
 800bcb8:	4638      	mov	r0, r7
 800bcba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcbe:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800bcc2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800bcc6:	4630      	mov	r0, r6
 800bcc8:	f004 fd20 	bl	801070c <rcl_wait_set_add_subscription>
 800bccc:	2800      	cmp	r0, #0
 800bcce:	f43f af69 	beq.w	800bba4 <rclc_executor_spin_some.part.0+0x60>
 800bcd2:	4607      	mov	r7, r0
 800bcd4:	e7ee      	b.n	800bcb4 <rclc_executor_spin_some.part.0+0x170>
 800bcd6:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800bcda:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800bcde:	4630      	mov	r0, r6
 800bce0:	f005 f834 	bl	8010d4c <rcl_wait_set_add_timer>
 800bce4:	2800      	cmp	r0, #0
 800bce6:	f43f af5d 	beq.w	800bba4 <rclc_executor_spin_some.part.0+0x60>
 800bcea:	4607      	mov	r7, r0
 800bcec:	e7e2      	b.n	800bcb4 <rclc_executor_spin_some.part.0+0x170>
 800bcee:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800bcf2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800bcf6:	4630      	mov	r0, r6
 800bcf8:	f004 fffc 	bl	8010cf4 <rcl_wait_set_add_guard_condition>
 800bcfc:	2800      	cmp	r0, #0
 800bcfe:	f43f af51 	beq.w	800bba4 <rclc_executor_spin_some.part.0+0x60>
 800bd02:	4607      	mov	r7, r0
 800bd04:	e7d6      	b.n	800bcb4 <rclc_executor_spin_some.part.0+0x170>
 800bd06:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800bd0a:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800bd0e:	4630      	mov	r0, r6
 800bd10:	3110      	adds	r1, #16
 800bd12:	f005 fd79 	bl	8011808 <rcl_action_wait_set_add_action_server>
 800bd16:	2800      	cmp	r0, #0
 800bd18:	f43f af44 	beq.w	800bba4 <rclc_executor_spin_some.part.0+0x60>
 800bd1c:	4607      	mov	r7, r0
 800bd1e:	e7c9      	b.n	800bcb4 <rclc_executor_spin_some.part.0+0x170>
 800bd20:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800bd24:	2300      	movs	r3, #0
 800bd26:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800bd2a:	4630      	mov	r0, r6
 800bd2c:	3110      	adds	r1, #16
 800bd2e:	f005 fb43 	bl	80113b8 <rcl_action_wait_set_add_action_client>
 800bd32:	2800      	cmp	r0, #0
 800bd34:	f43f af36 	beq.w	800bba4 <rclc_executor_spin_some.part.0+0x60>
 800bd38:	4607      	mov	r7, r0
 800bd3a:	e7bb      	b.n	800bcb4 <rclc_executor_spin_some.part.0+0x170>
 800bd3c:	2701      	movs	r7, #1
 800bd3e:	f000 fa0f 	bl	800c160 <rcutils_reset_error>
 800bd42:	4638      	mov	r0, r7
 800bd44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd48:	4627      	mov	r7, r4
 800bd4a:	e7fa      	b.n	800bd42 <rclc_executor_spin_some.part.0+0x1fe>
 800bd4c:	68eb      	ldr	r3, [r5, #12]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	f000 8093 	beq.w	800be7a <rclc_executor_spin_some.part.0+0x336>
 800bd54:	2400      	movs	r4, #0
 800bd56:	f240 1991 	movw	r9, #401	; 0x191
 800bd5a:	46a0      	mov	r8, r4
 800bd5c:	e008      	b.n	800bd70 <rclc_executor_spin_some.part.0+0x22c>
 800bd5e:	f7ff fa93 	bl	800b288 <_rclc_check_for_new_data>
 800bd62:	4604      	mov	r4, r0
 800bd64:	b108      	cbz	r0, 800bd6a <rclc_executor_spin_some.part.0+0x226>
 800bd66:	4548      	cmp	r0, r9
 800bd68:	d1ee      	bne.n	800bd48 <rclc_executor_spin_some.part.0+0x204>
 800bd6a:	68eb      	ldr	r3, [r5, #12]
 800bd6c:	4598      	cmp	r8, r3
 800bd6e:	d266      	bcs.n	800be3e <rclc_executor_spin_some.part.0+0x2fa>
 800bd70:	68aa      	ldr	r2, [r5, #8]
 800bd72:	4631      	mov	r1, r6
 800bd74:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800bd78:	f108 0801 	add.w	r8, r8, #1
 800bd7c:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800bd80:	f1bc 0f00 	cmp.w	ip, #0
 800bd84:	d1eb      	bne.n	800bd5e <rclc_executor_spin_some.part.0+0x21a>
 800bd86:	4619      	mov	r1, r3
 800bd88:	4610      	mov	r0, r2
 800bd8a:	e9d5 3220 	ldrd	r3, r2, [r5, #128]	; 0x80
 800bd8e:	4798      	blx	r3
 800bd90:	2800      	cmp	r0, #0
 800bd92:	d0d9      	beq.n	800bd48 <rclc_executor_spin_some.part.0+0x204>
 800bd94:	68eb      	ldr	r3, [r5, #12]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d0d6      	beq.n	800bd48 <rclc_executor_spin_some.part.0+0x204>
 800bd9a:	f04f 0a00 	mov.w	sl, #0
 800bd9e:	f240 1891 	movw	r8, #401	; 0x191
 800bda2:	f240 2959 	movw	r9, #601	; 0x259
 800bda6:	e00e      	b.n	800bdc6 <rclc_executor_spin_some.part.0+0x282>
 800bda8:	f813 300b 	ldrb.w	r3, [r3, fp]
 800bdac:	2b08      	cmp	r3, #8
 800bdae:	d034      	beq.n	800be1a <rclc_executor_spin_some.part.0+0x2d6>
 800bdb0:	2b09      	cmp	r3, #9
 800bdb2:	d029      	beq.n	800be08 <rclc_executor_spin_some.part.0+0x2c4>
 800bdb4:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800bdb8:	bb03      	cbnz	r3, 800bdfc <rclc_executor_spin_some.part.0+0x2b8>
 800bdba:	f10a 0a01 	add.w	sl, sl, #1
 800bdbe:	68eb      	ldr	r3, [r5, #12]
 800bdc0:	459a      	cmp	sl, r3
 800bdc2:	d2be      	bcs.n	800bd42 <rclc_executor_spin_some.part.0+0x1fe>
 800bdc4:	2400      	movs	r4, #0
 800bdc6:	68a8      	ldr	r0, [r5, #8]
 800bdc8:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800bdcc:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800bdd0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d0b7      	beq.n	800bd48 <rclc_executor_spin_some.part.0+0x204>
 800bdd8:	4631      	mov	r1, r6
 800bdda:	f7ff faa3 	bl	800b324 <_rclc_take_new_data>
 800bdde:	2800      	cmp	r0, #0
 800bde0:	bf18      	it	ne
 800bde2:	4540      	cmpne	r0, r8
 800bde4:	d001      	beq.n	800bdea <rclc_executor_spin_some.part.0+0x2a6>
 800bde6:	4548      	cmp	r0, r9
 800bde8:	d10c      	bne.n	800be04 <rclc_executor_spin_some.part.0+0x2c0>
 800bdea:	68ab      	ldr	r3, [r5, #8]
 800bdec:	eb13 000b 	adds.w	r0, r3, fp
 800bdf0:	d021      	beq.n	800be36 <rclc_executor_spin_some.part.0+0x2f2>
 800bdf2:	7842      	ldrb	r2, [r0, #1]
 800bdf4:	2a00      	cmp	r2, #0
 800bdf6:	d0d7      	beq.n	800bda8 <rclc_executor_spin_some.part.0+0x264>
 800bdf8:	2a01      	cmp	r2, #1
 800bdfa:	d1de      	bne.n	800bdba <rclc_executor_spin_some.part.0+0x276>
 800bdfc:	f7ff fc06 	bl	800b60c <_rclc_execute.part.0>
 800be00:	2800      	cmp	r0, #0
 800be02:	d0da      	beq.n	800bdba <rclc_executor_spin_some.part.0+0x276>
 800be04:	4607      	mov	r7, r0
 800be06:	e79c      	b.n	800bd42 <rclc_executor_spin_some.part.0+0x1fe>
 800be08:	6843      	ldr	r3, [r0, #4]
 800be0a:	6a1a      	ldr	r2, [r3, #32]
 800be0c:	2a00      	cmp	r2, #0
 800be0e:	d1f5      	bne.n	800bdfc <rclc_executor_spin_some.part.0+0x2b8>
 800be10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800be14:	2b00      	cmp	r3, #0
 800be16:	d0d0      	beq.n	800bdba <rclc_executor_spin_some.part.0+0x276>
 800be18:	e7f0      	b.n	800bdfc <rclc_executor_spin_some.part.0+0x2b8>
 800be1a:	6843      	ldr	r3, [r0, #4]
 800be1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800be1e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800be22:	d1eb      	bne.n	800bdfc <rclc_executor_spin_some.part.0+0x2b8>
 800be24:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800be28:	2a00      	cmp	r2, #0
 800be2a:	d1e7      	bne.n	800bdfc <rclc_executor_spin_some.part.0+0x2b8>
 800be2c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800be30:	2b00      	cmp	r3, #0
 800be32:	d0c2      	beq.n	800bdba <rclc_executor_spin_some.part.0+0x276>
 800be34:	e7e2      	b.n	800bdfc <rclc_executor_spin_some.part.0+0x2b8>
 800be36:	270b      	movs	r7, #11
 800be38:	e783      	b.n	800bd42 <rclc_executor_spin_some.part.0+0x1fe>
 800be3a:	68aa      	ldr	r2, [r5, #8]
 800be3c:	e6e2      	b.n	800bc04 <rclc_executor_spin_some.part.0+0xc0>
 800be3e:	68aa      	ldr	r2, [r5, #8]
 800be40:	e7a1      	b.n	800bd86 <rclc_executor_spin_some.part.0+0x242>
 800be42:	6842      	ldr	r2, [r0, #4]
 800be44:	6a11      	ldr	r1, [r2, #32]
 800be46:	2900      	cmp	r1, #0
 800be48:	f47f af22 	bne.w	800bc90 <rclc_executor_spin_some.part.0+0x14c>
 800be4c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800be50:	2a00      	cmp	r2, #0
 800be52:	f43f af0b 	beq.w	800bc6c <rclc_executor_spin_some.part.0+0x128>
 800be56:	e71b      	b.n	800bc90 <rclc_executor_spin_some.part.0+0x14c>
 800be58:	6842      	ldr	r2, [r0, #4]
 800be5a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800be5c:	f031 417f 	bics.w	r1, r1, #4278190080	; 0xff000000
 800be60:	f47f af16 	bne.w	800bc90 <rclc_executor_spin_some.part.0+0x14c>
 800be64:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
 800be68:	2900      	cmp	r1, #0
 800be6a:	f47f af11 	bne.w	800bc90 <rclc_executor_spin_some.part.0+0x14c>
 800be6e:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 800be72:	2a00      	cmp	r2, #0
 800be74:	f43f aefa 	beq.w	800bc6c <rclc_executor_spin_some.part.0+0x128>
 800be78:	e70a      	b.n	800bc90 <rclc_executor_spin_some.part.0+0x14c>
 800be7a:	68aa      	ldr	r2, [r5, #8]
 800be7c:	461c      	mov	r4, r3
 800be7e:	e782      	b.n	800bd86 <rclc_executor_spin_some.part.0+0x242>
 800be80:	68aa      	ldr	r2, [r5, #8]
 800be82:	461c      	mov	r4, r3
 800be84:	e6be      	b.n	800bc04 <rclc_executor_spin_some.part.0+0xc0>
 800be86:	bf00      	nop

0800be88 <rclc_executor_spin>:
 800be88:	b1d0      	cbz	r0, 800bec0 <rclc_executor_spin+0x38>
 800be8a:	b510      	push	{r4, lr}
 800be8c:	4604      	mov	r4, r0
 800be8e:	b082      	sub	sp, #8
 800be90:	e004      	b.n	800be9c <rclc_executor_spin+0x14>
 800be92:	f7ff fe57 	bl	800bb44 <rclc_executor_spin_some.part.0>
 800be96:	f030 0302 	bics.w	r3, r0, #2
 800be9a:	d10f      	bne.n	800bebc <rclc_executor_spin+0x34>
 800be9c:	6860      	ldr	r0, [r4, #4]
 800be9e:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
 800bea2:	e9cd 2300 	strd	r2, r3, [sp]
 800bea6:	f003 f8bb 	bl	800f020 <rcl_context_is_valid>
 800beaa:	4601      	mov	r1, r0
 800beac:	4620      	mov	r0, r4
 800beae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800beb2:	2900      	cmp	r1, #0
 800beb4:	d1ed      	bne.n	800be92 <rclc_executor_spin+0xa>
 800beb6:	f000 f953 	bl	800c160 <rcutils_reset_error>
 800beba:	2001      	movs	r0, #1
 800bebc:	b002      	add	sp, #8
 800bebe:	bd10      	pop	{r4, pc}
 800bec0:	200b      	movs	r0, #11
 800bec2:	4770      	bx	lr

0800bec4 <rclc_executor_handle_counters_zero_init>:
 800bec4:	b130      	cbz	r0, 800bed4 <rclc_executor_handle_counters_zero_init+0x10>
 800bec6:	2220      	movs	r2, #32
 800bec8:	2100      	movs	r1, #0
 800beca:	b508      	push	{r3, lr}
 800becc:	f00d fb82 	bl	80195d4 <memset>
 800bed0:	2000      	movs	r0, #0
 800bed2:	bd08      	pop	{r3, pc}
 800bed4:	200b      	movs	r0, #11
 800bed6:	4770      	bx	lr

0800bed8 <rclc_executor_handle_init>:
 800bed8:	4603      	mov	r3, r0
 800beda:	b178      	cbz	r0, 800befc <rclc_executor_handle_init+0x24>
 800bedc:	2200      	movs	r2, #0
 800bede:	f04f 0c0b 	mov.w	ip, #11
 800bee2:	6341      	str	r1, [r0, #52]	; 0x34
 800bee4:	4610      	mov	r0, r2
 800bee6:	f8a3 c000 	strh.w	ip, [r3]
 800beea:	631a      	str	r2, [r3, #48]	; 0x30
 800beec:	871a      	strh	r2, [r3, #56]	; 0x38
 800beee:	ed9f 7b04 	vldr	d7, [pc, #16]	; 800bf00 <rclc_executor_handle_init+0x28>
 800bef2:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800bef6:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
 800befa:	4770      	bx	lr
 800befc:	200b      	movs	r0, #11
 800befe:	4770      	bx	lr
	...

0800bf08 <rclc_support_init>:
 800bf08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf0c:	b086      	sub	sp, #24
 800bf0e:	b3bb      	cbz	r3, 800bf80 <rclc_support_init+0x78>
 800bf10:	4606      	mov	r6, r0
 800bf12:	b3a8      	cbz	r0, 800bf80 <rclc_support_init+0x78>
 800bf14:	461c      	mov	r4, r3
 800bf16:	460f      	mov	r7, r1
 800bf18:	4690      	mov	r8, r2
 800bf1a:	f003 fa21 	bl	800f360 <rcl_get_zero_initialized_init_options>
 800bf1e:	f104 050c 	add.w	r5, r4, #12
 800bf22:	9005      	str	r0, [sp, #20]
 800bf24:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bf28:	e88d 0003 	stmia.w	sp, {r0, r1}
 800bf2c:	a805      	add	r0, sp, #20
 800bf2e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800bf32:	f003 fa17 	bl	800f364 <rcl_init_options_init>
 800bf36:	4605      	mov	r5, r0
 800bf38:	b9e0      	cbnz	r0, 800bf74 <rclc_support_init+0x6c>
 800bf3a:	ad02      	add	r5, sp, #8
 800bf3c:	4628      	mov	r0, r5
 800bf3e:	f003 f865 	bl	800f00c <rcl_get_zero_initialized_context>
 800bf42:	4633      	mov	r3, r6
 800bf44:	aa05      	add	r2, sp, #20
 800bf46:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bf4a:	e886 0003 	stmia.w	r6, {r0, r1}
 800bf4e:	4641      	mov	r1, r8
 800bf50:	4638      	mov	r0, r7
 800bf52:	f003 f8cb 	bl	800f0ec <rcl_init>
 800bf56:	4605      	mov	r5, r0
 800bf58:	b9b8      	cbnz	r0, 800bf8a <rclc_support_init+0x82>
 800bf5a:	4622      	mov	r2, r4
 800bf5c:	f106 010c 	add.w	r1, r6, #12
 800bf60:	2003      	movs	r0, #3
 800bf62:	60b4      	str	r4, [r6, #8]
 800bf64:	f004 f90e 	bl	8010184 <rcl_clock_init>
 800bf68:	4605      	mov	r5, r0
 800bf6a:	b970      	cbnz	r0, 800bf8a <rclc_support_init+0x82>
 800bf6c:	a805      	add	r0, sp, #20
 800bf6e:	f003 fa55 	bl	800f41c <rcl_init_options_fini>
 800bf72:	b108      	cbz	r0, 800bf78 <rclc_support_init+0x70>
 800bf74:	f000 f8f4 	bl	800c160 <rcutils_reset_error>
 800bf78:	4628      	mov	r0, r5
 800bf7a:	b006      	add	sp, #24
 800bf7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf80:	250b      	movs	r5, #11
 800bf82:	4628      	mov	r0, r5
 800bf84:	b006      	add	sp, #24
 800bf86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf8a:	f000 f8e9 	bl	800c160 <rcutils_reset_error>
 800bf8e:	a805      	add	r0, sp, #20
 800bf90:	f003 fa44 	bl	800f41c <rcl_init_options_fini>
 800bf94:	2800      	cmp	r0, #0
 800bf96:	d0ef      	beq.n	800bf78 <rclc_support_init+0x70>
 800bf98:	e7ec      	b.n	800bf74 <rclc_support_init+0x6c>
 800bf9a:	bf00      	nop

0800bf9c <rclc_node_init_default>:
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	bf18      	it	ne
 800bfa0:	2a00      	cmpne	r2, #0
 800bfa2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bfa6:	4616      	mov	r6, r2
 800bfa8:	bf0c      	ite	eq
 800bfaa:	2201      	moveq	r2, #1
 800bfac:	2200      	movne	r2, #0
 800bfae:	b0a3      	sub	sp, #140	; 0x8c
 800bfb0:	2900      	cmp	r1, #0
 800bfb2:	bf08      	it	eq
 800bfb4:	f042 0201 	orreq.w	r2, r2, #1
 800bfb8:	bb22      	cbnz	r2, 800c004 <rclc_node_init_default+0x68>
 800bfba:	4604      	mov	r4, r0
 800bfbc:	b310      	cbz	r0, 800c004 <rclc_node_init_default+0x68>
 800bfbe:	f10d 0810 	add.w	r8, sp, #16
 800bfc2:	461f      	mov	r7, r3
 800bfc4:	460d      	mov	r5, r1
 800bfc6:	f10d 0918 	add.w	r9, sp, #24
 800bfca:	4640      	mov	r0, r8
 800bfcc:	f003 fad2 	bl	800f574 <rcl_get_zero_initialized_node>
 800bfd0:	e898 0003 	ldmia.w	r8, {r0, r1}
 800bfd4:	e884 0003 	stmia.w	r4, {r0, r1}
 800bfd8:	4648      	mov	r0, r9
 800bfda:	f003 fc45 	bl	800f868 <rcl_node_get_default_options>
 800bfde:	4640      	mov	r0, r8
 800bfe0:	f003 fac8 	bl	800f574 <rcl_get_zero_initialized_node>
 800bfe4:	f8cd 9000 	str.w	r9, [sp]
 800bfe8:	463b      	mov	r3, r7
 800bfea:	4632      	mov	r2, r6
 800bfec:	e898 0003 	ldmia.w	r8, {r0, r1}
 800bff0:	e884 0003 	stmia.w	r4, {r0, r1}
 800bff4:	4629      	mov	r1, r5
 800bff6:	4620      	mov	r0, r4
 800bff8:	f003 fac6 	bl	800f588 <rcl_node_init>
 800bffc:	b930      	cbnz	r0, 800c00c <rclc_node_init_default+0x70>
 800bffe:	b023      	add	sp, #140	; 0x8c
 800c000:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c004:	200b      	movs	r0, #11
 800c006:	b023      	add	sp, #140	; 0x8c
 800c008:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c00c:	9003      	str	r0, [sp, #12]
 800c00e:	f000 f8a7 	bl	800c160 <rcutils_reset_error>
 800c012:	f000 f8a5 	bl	800c160 <rcutils_reset_error>
 800c016:	9803      	ldr	r0, [sp, #12]
 800c018:	b023      	add	sp, #140	; 0x8c
 800c01a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c01e:	bf00      	nop

0800c020 <rclc_service_init_default>:
 800c020:	2b00      	cmp	r3, #0
 800c022:	bf18      	it	ne
 800c024:	2a00      	cmpne	r2, #0
 800c026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c02a:	4616      	mov	r6, r2
 800c02c:	bf0c      	ite	eq
 800c02e:	2201      	moveq	r2, #1
 800c030:	2200      	movne	r2, #0
 800c032:	b09e      	sub	sp, #120	; 0x78
 800c034:	2900      	cmp	r1, #0
 800c036:	bf08      	it	eq
 800c038:	f042 0201 	orreq.w	r2, r2, #1
 800c03c:	bb1a      	cbnz	r2, 800c086 <rclc_service_init_default+0x66>
 800c03e:	4604      	mov	r4, r0
 800c040:	b308      	cbz	r0, 800c086 <rclc_service_init_default+0x66>
 800c042:	f10d 0810 	add.w	r8, sp, #16
 800c046:	461f      	mov	r7, r3
 800c048:	460d      	mov	r5, r1
 800c04a:	f003 fe11 	bl	800fc70 <rcl_get_zero_initialized_service>
 800c04e:	6020      	str	r0, [r4, #0]
 800c050:	4640      	mov	r0, r8
 800c052:	f003 febb 	bl	800fdcc <rcl_service_get_default_options>
 800c056:	2250      	movs	r2, #80	; 0x50
 800c058:	490d      	ldr	r1, [pc, #52]	; (800c090 <rclc_service_init_default+0x70>)
 800c05a:	4640      	mov	r0, r8
 800c05c:	f00d fc2f 	bl	80198be <memcpy>
 800c060:	463b      	mov	r3, r7
 800c062:	4632      	mov	r2, r6
 800c064:	4629      	mov	r1, r5
 800c066:	4620      	mov	r0, r4
 800c068:	f8cd 8000 	str.w	r8, [sp]
 800c06c:	f003 fe06 	bl	800fc7c <rcl_service_init>
 800c070:	b910      	cbnz	r0, 800c078 <rclc_service_init_default+0x58>
 800c072:	b01e      	add	sp, #120	; 0x78
 800c074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c078:	9003      	str	r0, [sp, #12]
 800c07a:	f000 f871 	bl	800c160 <rcutils_reset_error>
 800c07e:	9803      	ldr	r0, [sp, #12]
 800c080:	b01e      	add	sp, #120	; 0x78
 800c082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c086:	200b      	movs	r0, #11
 800c088:	b01e      	add	sp, #120	; 0x78
 800c08a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c08e:	bf00      	nop
 800c090:	0801b088 	.word	0x0801b088

0800c094 <__default_zero_allocate>:
 800c094:	f00c bec0 	b.w	8018e18 <calloc>

0800c098 <__default_reallocate>:
 800c098:	f00d b84c 	b.w	8019134 <realloc>

0800c09c <__default_deallocate>:
 800c09c:	f00c bf2a 	b.w	8018ef4 <free>

0800c0a0 <__default_allocate>:
 800c0a0:	f00c bf20 	b.w	8018ee4 <malloc>

0800c0a4 <rcutils_get_zero_initialized_allocator>:
 800c0a4:	b510      	push	{r4, lr}
 800c0a6:	4c05      	ldr	r4, [pc, #20]	; (800c0bc <rcutils_get_zero_initialized_allocator+0x18>)
 800c0a8:	4686      	mov	lr, r0
 800c0aa:	4684      	mov	ip, r0
 800c0ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c0ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c0b2:	6823      	ldr	r3, [r4, #0]
 800c0b4:	4670      	mov	r0, lr
 800c0b6:	f8cc 3000 	str.w	r3, [ip]
 800c0ba:	bd10      	pop	{r4, pc}
 800c0bc:	0801b0d8 	.word	0x0801b0d8

0800c0c0 <rcutils_set_default_allocator>:
 800c0c0:	b1a8      	cbz	r0, 800c0ee <rcutils_set_default_allocator+0x2e>
 800c0c2:	6802      	ldr	r2, [r0, #0]
 800c0c4:	b1a2      	cbz	r2, 800c0f0 <rcutils_set_default_allocator+0x30>
 800c0c6:	6841      	ldr	r1, [r0, #4]
 800c0c8:	b1a1      	cbz	r1, 800c0f4 <rcutils_set_default_allocator+0x34>
 800c0ca:	b410      	push	{r4}
 800c0cc:	68c4      	ldr	r4, [r0, #12]
 800c0ce:	b164      	cbz	r4, 800c0ea <rcutils_set_default_allocator+0x2a>
 800c0d0:	6880      	ldr	r0, [r0, #8]
 800c0d2:	b138      	cbz	r0, 800c0e4 <rcutils_set_default_allocator+0x24>
 800c0d4:	4b08      	ldr	r3, [pc, #32]	; (800c0f8 <rcutils_set_default_allocator+0x38>)
 800c0d6:	601a      	str	r2, [r3, #0]
 800c0d8:	2200      	movs	r2, #0
 800c0da:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800c0de:	2001      	movs	r0, #1
 800c0e0:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800c0e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0e8:	4770      	bx	lr
 800c0ea:	4620      	mov	r0, r4
 800c0ec:	e7fa      	b.n	800c0e4 <rcutils_set_default_allocator+0x24>
 800c0ee:	4770      	bx	lr
 800c0f0:	4610      	mov	r0, r2
 800c0f2:	4770      	bx	lr
 800c0f4:	4608      	mov	r0, r1
 800c0f6:	4770      	bx	lr
 800c0f8:	20000960 	.word	0x20000960

0800c0fc <rcutils_get_default_allocator>:
 800c0fc:	b510      	push	{r4, lr}
 800c0fe:	4c05      	ldr	r4, [pc, #20]	; (800c114 <rcutils_get_default_allocator+0x18>)
 800c100:	4686      	mov	lr, r0
 800c102:	4684      	mov	ip, r0
 800c104:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c106:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c10a:	6823      	ldr	r3, [r4, #0]
 800c10c:	4670      	mov	r0, lr
 800c10e:	f8cc 3000 	str.w	r3, [ip]
 800c112:	bd10      	pop	{r4, pc}
 800c114:	20000960 	.word	0x20000960

0800c118 <rcutils_allocator_is_valid>:
 800c118:	b158      	cbz	r0, 800c132 <rcutils_allocator_is_valid+0x1a>
 800c11a:	6803      	ldr	r3, [r0, #0]
 800c11c:	b143      	cbz	r3, 800c130 <rcutils_allocator_is_valid+0x18>
 800c11e:	6843      	ldr	r3, [r0, #4]
 800c120:	b133      	cbz	r3, 800c130 <rcutils_allocator_is_valid+0x18>
 800c122:	68c3      	ldr	r3, [r0, #12]
 800c124:	b123      	cbz	r3, 800c130 <rcutils_allocator_is_valid+0x18>
 800c126:	6880      	ldr	r0, [r0, #8]
 800c128:	3800      	subs	r0, #0
 800c12a:	bf18      	it	ne
 800c12c:	2001      	movne	r0, #1
 800c12e:	4770      	bx	lr
 800c130:	4618      	mov	r0, r3
 800c132:	4770      	bx	lr

0800c134 <rcutils_get_error_string>:
 800c134:	4b06      	ldr	r3, [pc, #24]	; (800c150 <rcutils_get_error_string+0x1c>)
 800c136:	781b      	ldrb	r3, [r3, #0]
 800c138:	b13b      	cbz	r3, 800c14a <rcutils_get_error_string+0x16>
 800c13a:	4b06      	ldr	r3, [pc, #24]	; (800c154 <rcutils_get_error_string+0x20>)
 800c13c:	781a      	ldrb	r2, [r3, #0]
 800c13e:	b90a      	cbnz	r2, 800c144 <rcutils_get_error_string+0x10>
 800c140:	2201      	movs	r2, #1
 800c142:	701a      	strb	r2, [r3, #0]
 800c144:	4b04      	ldr	r3, [pc, #16]	; (800c158 <rcutils_get_error_string+0x24>)
 800c146:	7818      	ldrb	r0, [r3, #0]
 800c148:	4770      	bx	lr
 800c14a:	4b04      	ldr	r3, [pc, #16]	; (800c15c <rcutils_get_error_string+0x28>)
 800c14c:	7818      	ldrb	r0, [r3, #0]
 800c14e:	4770      	bx	lr
 800c150:	2000b934 	.word	0x2000b934
 800c154:	2000b949 	.word	0x2000b949
 800c158:	2000b948 	.word	0x2000b948
 800c15c:	0801a8fc 	.word	0x0801a8fc

0800c160 <rcutils_reset_error>:
 800c160:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800c180 <rcutils_reset_error+0x20>
 800c164:	2300      	movs	r3, #0
 800c166:	4a08      	ldr	r2, [pc, #32]	; (800c188 <rcutils_reset_error+0x28>)
 800c168:	4808      	ldr	r0, [pc, #32]	; (800c18c <rcutils_reset_error+0x2c>)
 800c16a:	8013      	strh	r3, [r2, #0]
 800c16c:	4908      	ldr	r1, [pc, #32]	; (800c190 <rcutils_reset_error+0x30>)
 800c16e:	7003      	strb	r3, [r0, #0]
 800c170:	700b      	strb	r3, [r1, #0]
 800c172:	ed82 7b02 	vstr	d7, [r2, #8]
 800c176:	4a07      	ldr	r2, [pc, #28]	; (800c194 <rcutils_reset_error+0x34>)
 800c178:	7013      	strb	r3, [r2, #0]
 800c17a:	4770      	bx	lr
 800c17c:	f3af 8000 	nop.w
	...
 800c188:	2000b938 	.word	0x2000b938
 800c18c:	2000b949 	.word	0x2000b949
 800c190:	2000b948 	.word	0x2000b948
 800c194:	2000b934 	.word	0x2000b934

0800c198 <rcutils_system_time_now>:
 800c198:	b310      	cbz	r0, 800c1e0 <rcutils_system_time_now+0x48>
 800c19a:	b570      	push	{r4, r5, r6, lr}
 800c19c:	b084      	sub	sp, #16
 800c19e:	4604      	mov	r4, r0
 800c1a0:	2001      	movs	r0, #1
 800c1a2:	4669      	mov	r1, sp
 800c1a4:	f7f5 f964 	bl	8001470 <clock_gettime>
 800c1a8:	2800      	cmp	r0, #0
 800c1aa:	db16      	blt.n	800c1da <rcutils_system_time_now+0x42>
 800c1ac:	e9dd 3100 	ldrd	r3, r1, [sp]
 800c1b0:	2900      	cmp	r1, #0
 800c1b2:	db12      	blt.n	800c1da <rcutils_system_time_now+0x42>
 800c1b4:	ea53 0201 	orrs.w	r2, r3, r1
 800c1b8:	9d02      	ldr	r5, [sp, #8]
 800c1ba:	d101      	bne.n	800c1c0 <rcutils_system_time_now+0x28>
 800c1bc:	2d00      	cmp	r5, #0
 800c1be:	db0c      	blt.n	800c1da <rcutils_system_time_now+0x42>
 800c1c0:	4e08      	ldr	r6, [pc, #32]	; (800c1e4 <rcutils_system_time_now+0x4c>)
 800c1c2:	2000      	movs	r0, #0
 800c1c4:	fba3 3206 	umull	r3, r2, r3, r6
 800c1c8:	195b      	adds	r3, r3, r5
 800c1ca:	fb06 2201 	mla	r2, r6, r1, r2
 800c1ce:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800c1d2:	e9c4 3200 	strd	r3, r2, [r4]
 800c1d6:	b004      	add	sp, #16
 800c1d8:	bd70      	pop	{r4, r5, r6, pc}
 800c1da:	2002      	movs	r0, #2
 800c1dc:	b004      	add	sp, #16
 800c1de:	bd70      	pop	{r4, r5, r6, pc}
 800c1e0:	200b      	movs	r0, #11
 800c1e2:	4770      	bx	lr
 800c1e4:	3b9aca00 	.word	0x3b9aca00

0800c1e8 <rcutils_steady_time_now>:
 800c1e8:	b310      	cbz	r0, 800c230 <rcutils_steady_time_now+0x48>
 800c1ea:	b570      	push	{r4, r5, r6, lr}
 800c1ec:	b084      	sub	sp, #16
 800c1ee:	4604      	mov	r4, r0
 800c1f0:	2000      	movs	r0, #0
 800c1f2:	4669      	mov	r1, sp
 800c1f4:	f7f5 f93c 	bl	8001470 <clock_gettime>
 800c1f8:	2800      	cmp	r0, #0
 800c1fa:	db16      	blt.n	800c22a <rcutils_steady_time_now+0x42>
 800c1fc:	e9dd 3100 	ldrd	r3, r1, [sp]
 800c200:	2900      	cmp	r1, #0
 800c202:	db12      	blt.n	800c22a <rcutils_steady_time_now+0x42>
 800c204:	ea53 0201 	orrs.w	r2, r3, r1
 800c208:	9d02      	ldr	r5, [sp, #8]
 800c20a:	d101      	bne.n	800c210 <rcutils_steady_time_now+0x28>
 800c20c:	2d00      	cmp	r5, #0
 800c20e:	db0c      	blt.n	800c22a <rcutils_steady_time_now+0x42>
 800c210:	4e08      	ldr	r6, [pc, #32]	; (800c234 <rcutils_steady_time_now+0x4c>)
 800c212:	2000      	movs	r0, #0
 800c214:	fba3 3206 	umull	r3, r2, r3, r6
 800c218:	195b      	adds	r3, r3, r5
 800c21a:	fb06 2201 	mla	r2, r6, r1, r2
 800c21e:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800c222:	e9c4 3200 	strd	r3, r2, [r4]
 800c226:	b004      	add	sp, #16
 800c228:	bd70      	pop	{r4, r5, r6, pc}
 800c22a:	2002      	movs	r0, #2
 800c22c:	b004      	add	sp, #16
 800c22e:	bd70      	pop	{r4, r5, r6, pc}
 800c230:	200b      	movs	r0, #11
 800c232:	4770      	bx	lr
 800c234:	3b9aca00 	.word	0x3b9aca00

0800c238 <rmw_uros_set_custom_transport>:
 800c238:	b470      	push	{r4, r5, r6}
 800c23a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800c23e:	b162      	cbz	r2, 800c25a <rmw_uros_set_custom_transport+0x22>
 800c240:	b15b      	cbz	r3, 800c25a <rmw_uros_set_custom_transport+0x22>
 800c242:	b155      	cbz	r5, 800c25a <rmw_uros_set_custom_transport+0x22>
 800c244:	b14e      	cbz	r6, 800c25a <rmw_uros_set_custom_transport+0x22>
 800c246:	4c06      	ldr	r4, [pc, #24]	; (800c260 <rmw_uros_set_custom_transport+0x28>)
 800c248:	7020      	strb	r0, [r4, #0]
 800c24a:	2000      	movs	r0, #0
 800c24c:	6166      	str	r6, [r4, #20]
 800c24e:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800c252:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800c256:	bc70      	pop	{r4, r5, r6}
 800c258:	4770      	bx	lr
 800c25a:	200b      	movs	r0, #11
 800c25c:	bc70      	pop	{r4, r5, r6}
 800c25e:	4770      	bx	lr
 800c260:	2000b94c 	.word	0x2000b94c

0800c264 <get_message_typesupport_handle_function>:
 800c264:	b510      	push	{r4, lr}
 800c266:	4604      	mov	r4, r0
 800c268:	6800      	ldr	r0, [r0, #0]
 800c26a:	f7f3 ffe9 	bl	8000240 <strcmp>
 800c26e:	2800      	cmp	r0, #0
 800c270:	bf0c      	ite	eq
 800c272:	4620      	moveq	r0, r4
 800c274:	2000      	movne	r0, #0
 800c276:	bd10      	pop	{r4, pc}

0800c278 <rosidl_runtime_c__uint8__Sequence__init>:
 800c278:	b530      	push	{r4, r5, lr}
 800c27a:	4604      	mov	r4, r0
 800c27c:	b087      	sub	sp, #28
 800c27e:	b130      	cbz	r0, 800c28e <rosidl_runtime_c__uint8__Sequence__init+0x16>
 800c280:	460d      	mov	r5, r1
 800c282:	b931      	cbnz	r1, 800c292 <rosidl_runtime_c__uint8__Sequence__init+0x1a>
 800c284:	460b      	mov	r3, r1
 800c286:	2001      	movs	r0, #1
 800c288:	60a5      	str	r5, [r4, #8]
 800c28a:	e9c4 3500 	strd	r3, r5, [r4]
 800c28e:	b007      	add	sp, #28
 800c290:	bd30      	pop	{r4, r5, pc}
 800c292:	a801      	add	r0, sp, #4
 800c294:	f7ff ff32 	bl	800c0fc <rcutils_get_default_allocator>
 800c298:	9b01      	ldr	r3, [sp, #4]
 800c29a:	9905      	ldr	r1, [sp, #20]
 800c29c:	4628      	mov	r0, r5
 800c29e:	4798      	blx	r3
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	2800      	cmp	r0, #0
 800c2a4:	d1ef      	bne.n	800c286 <rosidl_runtime_c__uint8__Sequence__init+0xe>
 800c2a6:	e7f2      	b.n	800c28e <rosidl_runtime_c__uint8__Sequence__init+0x16>

0800c2a8 <rosidl_runtime_c__uint8__Sequence__fini>:
 800c2a8:	b188      	cbz	r0, 800c2ce <rosidl_runtime_c__uint8__Sequence__fini+0x26>
 800c2aa:	6803      	ldr	r3, [r0, #0]
 800c2ac:	b510      	push	{r4, lr}
 800c2ae:	4604      	mov	r4, r0
 800c2b0:	b086      	sub	sp, #24
 800c2b2:	b153      	cbz	r3, 800c2ca <rosidl_runtime_c__uint8__Sequence__fini+0x22>
 800c2b4:	a801      	add	r0, sp, #4
 800c2b6:	f7ff ff21 	bl	800c0fc <rcutils_get_default_allocator>
 800c2ba:	9b02      	ldr	r3, [sp, #8]
 800c2bc:	9905      	ldr	r1, [sp, #20]
 800c2be:	6820      	ldr	r0, [r4, #0]
 800c2c0:	4798      	blx	r3
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	e9c4 3300 	strd	r3, r3, [r4]
 800c2c8:	60a3      	str	r3, [r4, #8]
 800c2ca:	b006      	add	sp, #24
 800c2cc:	bd10      	pop	{r4, pc}
 800c2ce:	4770      	bx	lr

0800c2d0 <rosidl_runtime_c__uint8__Sequence__copy>:
 800c2d0:	2900      	cmp	r1, #0
 800c2d2:	bf18      	it	ne
 800c2d4:	2800      	cmpne	r0, #0
 800c2d6:	b570      	push	{r4, r5, r6, lr}
 800c2d8:	bf08      	it	eq
 800c2da:	2601      	moveq	r6, #1
 800c2dc:	b086      	sub	sp, #24
 800c2de:	bf18      	it	ne
 800c2e0:	2600      	movne	r6, #0
 800c2e2:	d01d      	beq.n	800c320 <rosidl_runtime_c__uint8__Sequence__copy+0x50>
 800c2e4:	6842      	ldr	r2, [r0, #4]
 800c2e6:	4605      	mov	r5, r0
 800c2e8:	688b      	ldr	r3, [r1, #8]
 800c2ea:	460c      	mov	r4, r1
 800c2ec:	4293      	cmp	r3, r2
 800c2ee:	d309      	bcc.n	800c304 <rosidl_runtime_c__uint8__Sequence__copy+0x34>
 800c2f0:	6808      	ldr	r0, [r1, #0]
 800c2f2:	6829      	ldr	r1, [r5, #0]
 800c2f4:	2601      	movs	r6, #1
 800c2f6:	f00d fae2 	bl	80198be <memcpy>
 800c2fa:	686b      	ldr	r3, [r5, #4]
 800c2fc:	6063      	str	r3, [r4, #4]
 800c2fe:	4630      	mov	r0, r6
 800c300:	b006      	add	sp, #24
 800c302:	bd70      	pop	{r4, r5, r6, pc}
 800c304:	a801      	add	r0, sp, #4
 800c306:	f7ff fef9 	bl	800c0fc <rcutils_get_default_allocator>
 800c30a:	9b03      	ldr	r3, [sp, #12]
 800c30c:	9a05      	ldr	r2, [sp, #20]
 800c30e:	6869      	ldr	r1, [r5, #4]
 800c310:	6820      	ldr	r0, [r4, #0]
 800c312:	4798      	blx	r3
 800c314:	2800      	cmp	r0, #0
 800c316:	d0f2      	beq.n	800c2fe <rosidl_runtime_c__uint8__Sequence__copy+0x2e>
 800c318:	686a      	ldr	r2, [r5, #4]
 800c31a:	6020      	str	r0, [r4, #0]
 800c31c:	60a2      	str	r2, [r4, #8]
 800c31e:	e7e8      	b.n	800c2f2 <rosidl_runtime_c__uint8__Sequence__copy+0x22>
 800c320:	2600      	movs	r6, #0
 800c322:	4630      	mov	r0, r6
 800c324:	b006      	add	sp, #24
 800c326:	bd70      	pop	{r4, r5, r6, pc}

0800c328 <get_service_typesupport_handle>:
 800c328:	6883      	ldr	r3, [r0, #8]
 800c32a:	4718      	bx	r3

0800c32c <get_service_typesupport_handle_function>:
 800c32c:	b510      	push	{r4, lr}
 800c32e:	4604      	mov	r4, r0
 800c330:	6800      	ldr	r0, [r0, #0]
 800c332:	f7f3 ff85 	bl	8000240 <strcmp>
 800c336:	2800      	cmp	r0, #0
 800c338:	bf0c      	ite	eq
 800c33a:	4620      	moveq	r0, r4
 800c33c:	2000      	movne	r0, #0
 800c33e:	bd10      	pop	{r4, pc}

0800c340 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800c340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c344:	6805      	ldr	r5, [r0, #0]
 800c346:	4604      	mov	r4, r0
 800c348:	460e      	mov	r6, r1
 800c34a:	4628      	mov	r0, r5
 800c34c:	f7f3 ff78 	bl	8000240 <strcmp>
 800c350:	b1c8      	cbz	r0, 800c386 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800c352:	4b11      	ldr	r3, [pc, #68]	; (800c398 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	429d      	cmp	r5, r3
 800c358:	d112      	bne.n	800c380 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800c35a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800c35e:	f8d8 4000 	ldr.w	r4, [r8]
 800c362:	b16c      	cbz	r4, 800c380 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800c364:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800c368:	2700      	movs	r7, #0
 800c36a:	3d04      	subs	r5, #4
 800c36c:	4631      	mov	r1, r6
 800c36e:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800c372:	f7f3 ff65 	bl	8000240 <strcmp>
 800c376:	00bb      	lsls	r3, r7, #2
 800c378:	b140      	cbz	r0, 800c38c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800c37a:	3701      	adds	r7, #1
 800c37c:	42bc      	cmp	r4, r7
 800c37e:	d1f5      	bne.n	800c36c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800c380:	2000      	movs	r0, #0
 800c382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c386:	4620      	mov	r0, r4
 800c388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c38c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c390:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c394:	58d3      	ldr	r3, [r2, r3]
 800c396:	4718      	bx	r3
 800c398:	20000974 	.word	0x20000974

0800c39c <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 800c39c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3a0:	6805      	ldr	r5, [r0, #0]
 800c3a2:	4604      	mov	r4, r0
 800c3a4:	460e      	mov	r6, r1
 800c3a6:	4628      	mov	r0, r5
 800c3a8:	f7f3 ff4a 	bl	8000240 <strcmp>
 800c3ac:	b1c8      	cbz	r0, 800c3e2 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 800c3ae:	4b11      	ldr	r3, [pc, #68]	; (800c3f4 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	429d      	cmp	r5, r3
 800c3b4:	d112      	bne.n	800c3dc <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800c3b6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800c3ba:	f8d8 4000 	ldr.w	r4, [r8]
 800c3be:	b16c      	cbz	r4, 800c3dc <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800c3c0:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800c3c4:	2700      	movs	r7, #0
 800c3c6:	3d04      	subs	r5, #4
 800c3c8:	4631      	mov	r1, r6
 800c3ca:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800c3ce:	f7f3 ff37 	bl	8000240 <strcmp>
 800c3d2:	00bb      	lsls	r3, r7, #2
 800c3d4:	b140      	cbz	r0, 800c3e8 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 800c3d6:	3701      	adds	r7, #1
 800c3d8:	42bc      	cmp	r4, r7
 800c3da:	d1f5      	bne.n	800c3c8 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 800c3dc:	2000      	movs	r0, #0
 800c3de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3e2:	4620      	mov	r0, r4
 800c3e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3e8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c3ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3f0:	58d3      	ldr	r3, [r2, r3]
 800c3f2:	4718      	bx	r3
 800c3f4:	20000974 	.word	0x20000974

0800c3f8 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__size_function__ServiceEventInfo__client_gid>:
 800c3f8:	2010      	movs	r0, #16
 800c3fa:	4770      	bx	lr

0800c3fc <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__get_const_function__ServiceEventInfo__client_gid>:
 800c3fc:	4408      	add	r0, r1
 800c3fe:	4770      	bx	lr

0800c400 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__fetch_function__ServiceEventInfo__client_gid>:
 800c400:	5c43      	ldrb	r3, [r0, r1]
 800c402:	7013      	strb	r3, [r2, #0]
 800c404:	4770      	bx	lr
 800c406:	bf00      	nop

0800c408 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__assign_function__ServiceEventInfo__client_gid>:
 800c408:	7813      	ldrb	r3, [r2, #0]
 800c40a:	5443      	strb	r3, [r0, r1]
 800c40c:	4770      	bx	lr
 800c40e:	bf00      	nop

0800c410 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__ServiceEventInfo_init_function>:
 800c410:	f007 bdf2 	b.w	8013ff8 <service_msgs__msg__ServiceEventInfo__init>

0800c414 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__ServiceEventInfo_fini_function>:
 800c414:	f007 be02 	b.w	801401c <service_msgs__msg__ServiceEventInfo__fini>

0800c418 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__get_function__ServiceEventInfo__client_gid>:
 800c418:	4408      	add	r0, r1
 800c41a:	4770      	bx	lr

0800c41c <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>:
 800c41c:	b508      	push	{r3, lr}
 800c41e:	f000 f8db 	bl	800c5d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800c422:	4b06      	ldr	r3, [pc, #24]	; (800c43c <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 800c424:	4906      	ldr	r1, [pc, #24]	; (800c440 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x24>)
 800c426:	681a      	ldr	r2, [r3, #0]
 800c428:	6488      	str	r0, [r1, #72]	; 0x48
 800c42a:	b10a      	cbz	r2, 800c430 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x14>
 800c42c:	4803      	ldr	r0, [pc, #12]	; (800c43c <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 800c42e:	bd08      	pop	{r3, pc}
 800c430:	4a04      	ldr	r2, [pc, #16]	; (800c444 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x28>)
 800c432:	4802      	ldr	r0, [pc, #8]	; (800c43c <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 800c434:	6812      	ldr	r2, [r2, #0]
 800c436:	601a      	str	r2, [r3, #0]
 800c438:	bd08      	pop	{r3, pc}
 800c43a:	bf00      	nop
 800c43c:	20000a6c 	.word	0x20000a6c
 800c440:	2000097c 	.word	0x2000097c
 800c444:	20000978 	.word	0x20000978

0800c448 <get_serialized_size_service_msgs__msg__ServiceEventInfo>:
 800c448:	b5b0      	push	{r4, r5, r7, lr}
 800c44a:	4604      	mov	r4, r0
 800c44c:	b1d8      	cbz	r0, 800c486 <get_serialized_size_service_msgs__msg__ServiceEventInfo+0x3e>
 800c44e:	460d      	mov	r5, r1
 800c450:	2101      	movs	r1, #1
 800c452:	4628      	mov	r0, r5
 800c454:	f001 fd04 	bl	800de60 <ucdr_alignment>
 800c458:	1c6b      	adds	r3, r5, #1
 800c45a:	4607      	mov	r7, r0
 800c45c:	1d20      	adds	r0, r4, #4
 800c45e:	f1c5 0508 	rsb	r5, r5, #8
 800c462:	441f      	add	r7, r3
 800c464:	4639      	mov	r1, r7
 800c466:	f000 f8c5 	bl	800c5f4 <get_serialized_size_builtin_interfaces__msg__Time>
 800c46a:	4407      	add	r7, r0
 800c46c:	2101      	movs	r1, #1
 800c46e:	4638      	mov	r0, r7
 800c470:	f001 fcf6 	bl	800de60 <ucdr_alignment>
 800c474:	f100 0410 	add.w	r4, r0, #16
 800c478:	2108      	movs	r1, #8
 800c47a:	443c      	add	r4, r7
 800c47c:	4620      	mov	r0, r4
 800c47e:	f001 fcef 	bl	800de60 <ucdr_alignment>
 800c482:	4428      	add	r0, r5
 800c484:	4420      	add	r0, r4
 800c486:	bdb0      	pop	{r4, r5, r7, pc}

0800c488 <_ServiceEventInfo__cdr_deserialize>:
 800c488:	b538      	push	{r3, r4, r5, lr}
 800c48a:	460c      	mov	r4, r1
 800c48c:	b1b9      	cbz	r1, 800c4be <_ServiceEventInfo__cdr_deserialize+0x36>
 800c48e:	4605      	mov	r5, r0
 800c490:	f000 fa8e 	bl	800c9b0 <ucdr_deserialize_uint8_t>
 800c494:	f000 f912 	bl	800c6bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800c498:	4603      	mov	r3, r0
 800c49a:	1d21      	adds	r1, r4, #4
 800c49c:	4628      	mov	r0, r5
 800c49e:	685b      	ldr	r3, [r3, #4]
 800c4a0:	68db      	ldr	r3, [r3, #12]
 800c4a2:	4798      	blx	r3
 800c4a4:	f104 010c 	add.w	r1, r4, #12
 800c4a8:	4628      	mov	r0, r5
 800c4aa:	2210      	movs	r2, #16
 800c4ac:	f000 f9d4 	bl	800c858 <ucdr_deserialize_array_uint8_t>
 800c4b0:	f104 0120 	add.w	r1, r4, #32
 800c4b4:	4628      	mov	r0, r5
 800c4b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4ba:	f001 ba8b 	b.w	800d9d4 <ucdr_deserialize_int64_t>
 800c4be:	4608      	mov	r0, r1
 800c4c0:	bd38      	pop	{r3, r4, r5, pc}
 800c4c2:	bf00      	nop

0800c4c4 <_ServiceEventInfo__cdr_serialize>:
 800c4c4:	b1e8      	cbz	r0, 800c502 <_ServiceEventInfo__cdr_serialize+0x3e>
 800c4c6:	b570      	push	{r4, r5, r6, lr}
 800c4c8:	4606      	mov	r6, r0
 800c4ca:	460d      	mov	r5, r1
 800c4cc:	4604      	mov	r4, r0
 800c4ce:	4608      	mov	r0, r1
 800c4d0:	f816 1b04 	ldrb.w	r1, [r6], #4
 800c4d4:	f000 fa56 	bl	800c984 <ucdr_serialize_uint8_t>
 800c4d8:	f000 f8f0 	bl	800c6bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	4629      	mov	r1, r5
 800c4e0:	4630      	mov	r0, r6
 800c4e2:	685b      	ldr	r3, [r3, #4]
 800c4e4:	689b      	ldr	r3, [r3, #8]
 800c4e6:	4798      	blx	r3
 800c4e8:	2210      	movs	r2, #16
 800c4ea:	f104 010c 	add.w	r1, r4, #12
 800c4ee:	4628      	mov	r0, r5
 800c4f0:	f000 f94e 	bl	800c790 <ucdr_serialize_array_uint8_t>
 800c4f4:	4628      	mov	r0, r5
 800c4f6:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 800c4fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c4fe:	f001 b999 	b.w	800d834 <ucdr_serialize_int64_t>
 800c502:	4770      	bx	lr

0800c504 <_ServiceEventInfo__get_serialized_size>:
 800c504:	b538      	push	{r3, r4, r5, lr}
 800c506:	4604      	mov	r4, r0
 800c508:	b1b0      	cbz	r0, 800c538 <_ServiceEventInfo__get_serialized_size+0x34>
 800c50a:	2101      	movs	r1, #1
 800c50c:	2000      	movs	r0, #0
 800c50e:	f001 fca7 	bl	800de60 <ucdr_alignment>
 800c512:	4605      	mov	r5, r0
 800c514:	1d20      	adds	r0, r4, #4
 800c516:	3501      	adds	r5, #1
 800c518:	4629      	mov	r1, r5
 800c51a:	f000 f86b 	bl	800c5f4 <get_serialized_size_builtin_interfaces__msg__Time>
 800c51e:	4405      	add	r5, r0
 800c520:	2101      	movs	r1, #1
 800c522:	4628      	mov	r0, r5
 800c524:	f001 fc9c 	bl	800de60 <ucdr_alignment>
 800c528:	3010      	adds	r0, #16
 800c52a:	2108      	movs	r1, #8
 800c52c:	4405      	add	r5, r0
 800c52e:	4628      	mov	r0, r5
 800c530:	f001 fc96 	bl	800de60 <ucdr_alignment>
 800c534:	3008      	adds	r0, #8
 800c536:	4428      	add	r0, r5
 800c538:	bd38      	pop	{r3, r4, r5, pc}
 800c53a:	bf00      	nop

0800c53c <_ServiceEventInfo__max_serialized_size>:
 800c53c:	b550      	push	{r4, r6, lr}
 800c53e:	2601      	movs	r6, #1
 800c540:	b083      	sub	sp, #12
 800c542:	2000      	movs	r0, #0
 800c544:	4631      	mov	r1, r6
 800c546:	f88d 6007 	strb.w	r6, [sp, #7]
 800c54a:	f001 fc89 	bl	800de60 <ucdr_alignment>
 800c54e:	4604      	mov	r4, r0
 800c550:	f10d 0007 	add.w	r0, sp, #7
 800c554:	4434      	add	r4, r6
 800c556:	4621      	mov	r1, r4
 800c558:	f000 f89c 	bl	800c694 <max_serialized_size_builtin_interfaces__msg__Time>
 800c55c:	4404      	add	r4, r0
 800c55e:	4631      	mov	r1, r6
 800c560:	4620      	mov	r0, r4
 800c562:	f001 fc7d 	bl	800de60 <ucdr_alignment>
 800c566:	3010      	adds	r0, #16
 800c568:	2108      	movs	r1, #8
 800c56a:	4404      	add	r4, r0
 800c56c:	4620      	mov	r0, r4
 800c56e:	f001 fc77 	bl	800de60 <ucdr_alignment>
 800c572:	3008      	adds	r0, #8
 800c574:	4420      	add	r0, r4
 800c576:	b003      	add	sp, #12
 800c578:	bd50      	pop	{r4, r6, pc}
 800c57a:	bf00      	nop

0800c57c <max_serialized_size_service_msgs__msg__ServiceEventInfo>:
 800c57c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c580:	f04f 0801 	mov.w	r8, #1
 800c584:	460c      	mov	r4, r1
 800c586:	4607      	mov	r7, r0
 800c588:	4641      	mov	r1, r8
 800c58a:	4620      	mov	r0, r4
 800c58c:	f887 8000 	strb.w	r8, [r7]
 800c590:	eb04 0608 	add.w	r6, r4, r8
 800c594:	f001 fc64 	bl	800de60 <ucdr_alignment>
 800c598:	4605      	mov	r5, r0
 800c59a:	4638      	mov	r0, r7
 800c59c:	f1c4 0408 	rsb	r4, r4, #8
 800c5a0:	4435      	add	r5, r6
 800c5a2:	4629      	mov	r1, r5
 800c5a4:	f000 f876 	bl	800c694 <max_serialized_size_builtin_interfaces__msg__Time>
 800c5a8:	4405      	add	r5, r0
 800c5aa:	4641      	mov	r1, r8
 800c5ac:	4628      	mov	r0, r5
 800c5ae:	f001 fc57 	bl	800de60 <ucdr_alignment>
 800c5b2:	3010      	adds	r0, #16
 800c5b4:	2108      	movs	r1, #8
 800c5b6:	4405      	add	r5, r0
 800c5b8:	4628      	mov	r0, r5
 800c5ba:	f001 fc51 	bl	800de60 <ucdr_alignment>
 800c5be:	4420      	add	r0, r4
 800c5c0:	4428      	add	r0, r5
 800c5c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5c6:	bf00      	nop

0800c5c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>:
 800c5c8:	4800      	ldr	r0, [pc, #0]	; (800c5cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x4>)
 800c5ca:	4770      	bx	lr
 800c5cc:	20000a84 	.word	0x20000a84

0800c5d0 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800c5d0:	f007 bd5a 	b.w	8014088 <builtin_interfaces__msg__Time__init>

0800c5d4 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800c5d4:	f007 bd5c 	b.w	8014090 <builtin_interfaces__msg__Time__fini>

0800c5d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800c5d8:	4b04      	ldr	r3, [pc, #16]	; (800c5ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800c5da:	681a      	ldr	r2, [r3, #0]
 800c5dc:	b10a      	cbz	r2, 800c5e2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800c5de:	4803      	ldr	r0, [pc, #12]	; (800c5ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800c5e0:	4770      	bx	lr
 800c5e2:	4a03      	ldr	r2, [pc, #12]	; (800c5f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800c5e4:	4801      	ldr	r0, [pc, #4]	; (800c5ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800c5e6:	6812      	ldr	r2, [r2, #0]
 800c5e8:	601a      	str	r2, [r3, #0]
 800c5ea:	4770      	bx	lr
 800c5ec:	20000b30 	.word	0x20000b30
 800c5f0:	20000978 	.word	0x20000978

0800c5f4 <get_serialized_size_builtin_interfaces__msg__Time>:
 800c5f4:	b180      	cbz	r0, 800c618 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800c5f6:	b538      	push	{r3, r4, r5, lr}
 800c5f8:	460d      	mov	r5, r1
 800c5fa:	2104      	movs	r1, #4
 800c5fc:	4628      	mov	r0, r5
 800c5fe:	f001 fc2f 	bl	800de60 <ucdr_alignment>
 800c602:	1d2b      	adds	r3, r5, #4
 800c604:	f1c5 0504 	rsb	r5, r5, #4
 800c608:	2104      	movs	r1, #4
 800c60a:	181c      	adds	r4, r3, r0
 800c60c:	4620      	mov	r0, r4
 800c60e:	f001 fc27 	bl	800de60 <ucdr_alignment>
 800c612:	4428      	add	r0, r5
 800c614:	4420      	add	r0, r4
 800c616:	bd38      	pop	{r3, r4, r5, pc}
 800c618:	4770      	bx	lr
 800c61a:	bf00      	nop

0800c61c <_Time__cdr_deserialize>:
 800c61c:	b538      	push	{r3, r4, r5, lr}
 800c61e:	460c      	mov	r4, r1
 800c620:	b141      	cbz	r1, 800c634 <_Time__cdr_deserialize+0x18>
 800c622:	4605      	mov	r5, r0
 800c624:	f001 f876 	bl	800d714 <ucdr_deserialize_int32_t>
 800c628:	1d21      	adds	r1, r4, #4
 800c62a:	4628      	mov	r0, r5
 800c62c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c630:	f000 bcee 	b.w	800d010 <ucdr_deserialize_uint32_t>
 800c634:	4608      	mov	r0, r1
 800c636:	bd38      	pop	{r3, r4, r5, pc}

0800c638 <_Time__cdr_serialize>:
 800c638:	b160      	cbz	r0, 800c654 <_Time__cdr_serialize+0x1c>
 800c63a:	b538      	push	{r3, r4, r5, lr}
 800c63c:	460d      	mov	r5, r1
 800c63e:	4604      	mov	r4, r0
 800c640:	6801      	ldr	r1, [r0, #0]
 800c642:	4628      	mov	r0, r5
 800c644:	f000 ffce 	bl	800d5e4 <ucdr_serialize_int32_t>
 800c648:	6861      	ldr	r1, [r4, #4]
 800c64a:	4628      	mov	r0, r5
 800c64c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c650:	f000 bbae 	b.w	800cdb0 <ucdr_serialize_uint32_t>
 800c654:	4770      	bx	lr
 800c656:	bf00      	nop

0800c658 <_Time__get_serialized_size>:
 800c658:	b160      	cbz	r0, 800c674 <_Time__get_serialized_size+0x1c>
 800c65a:	2104      	movs	r1, #4
 800c65c:	2000      	movs	r0, #0
 800c65e:	b510      	push	{r4, lr}
 800c660:	f001 fbfe 	bl	800de60 <ucdr_alignment>
 800c664:	2104      	movs	r1, #4
 800c666:	1844      	adds	r4, r0, r1
 800c668:	4620      	mov	r0, r4
 800c66a:	f001 fbf9 	bl	800de60 <ucdr_alignment>
 800c66e:	3004      	adds	r0, #4
 800c670:	4420      	add	r0, r4
 800c672:	bd10      	pop	{r4, pc}
 800c674:	4770      	bx	lr
 800c676:	bf00      	nop

0800c678 <_Time__max_serialized_size>:
 800c678:	b510      	push	{r4, lr}
 800c67a:	2104      	movs	r1, #4
 800c67c:	2000      	movs	r0, #0
 800c67e:	f001 fbef 	bl	800de60 <ucdr_alignment>
 800c682:	2104      	movs	r1, #4
 800c684:	1844      	adds	r4, r0, r1
 800c686:	4620      	mov	r0, r4
 800c688:	f001 fbea 	bl	800de60 <ucdr_alignment>
 800c68c:	3004      	adds	r0, #4
 800c68e:	4420      	add	r0, r4
 800c690:	bd10      	pop	{r4, pc}
 800c692:	bf00      	nop

0800c694 <max_serialized_size_builtin_interfaces__msg__Time>:
 800c694:	b538      	push	{r3, r4, r5, lr}
 800c696:	460c      	mov	r4, r1
 800c698:	2301      	movs	r3, #1
 800c69a:	2104      	movs	r1, #4
 800c69c:	1d25      	adds	r5, r4, #4
 800c69e:	7003      	strb	r3, [r0, #0]
 800c6a0:	4620      	mov	r0, r4
 800c6a2:	f1c4 0404 	rsb	r4, r4, #4
 800c6a6:	f001 fbdb 	bl	800de60 <ucdr_alignment>
 800c6aa:	4405      	add	r5, r0
 800c6ac:	2104      	movs	r1, #4
 800c6ae:	4628      	mov	r0, r5
 800c6b0:	f001 fbd6 	bl	800de60 <ucdr_alignment>
 800c6b4:	4420      	add	r0, r4
 800c6b6:	4428      	add	r0, r5
 800c6b8:	bd38      	pop	{r3, r4, r5, pc}
 800c6ba:	bf00      	nop

0800c6bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800c6bc:	4800      	ldr	r0, [pc, #0]	; (800c6c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800c6be:	4770      	bx	lr
 800c6c0:	20000b48 	.word	0x20000b48

0800c6c4 <ucdr_serialize_endian_array_char>:
 800c6c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6c8:	4619      	mov	r1, r3
 800c6ca:	461f      	mov	r7, r3
 800c6cc:	4605      	mov	r5, r0
 800c6ce:	4690      	mov	r8, r2
 800c6d0:	f001 fb6e 	bl	800ddb0 <ucdr_check_buffer_available_for>
 800c6d4:	b9e0      	cbnz	r0, 800c710 <ucdr_serialize_endian_array_char+0x4c>
 800c6d6:	463e      	mov	r6, r7
 800c6d8:	e00b      	b.n	800c6f2 <ucdr_serialize_endian_array_char+0x2e>
 800c6da:	4441      	add	r1, r8
 800c6dc:	68a8      	ldr	r0, [r5, #8]
 800c6de:	4622      	mov	r2, r4
 800c6e0:	1b36      	subs	r6, r6, r4
 800c6e2:	f00d f8ec 	bl	80198be <memcpy>
 800c6e6:	68ab      	ldr	r3, [r5, #8]
 800c6e8:	6928      	ldr	r0, [r5, #16]
 800c6ea:	4423      	add	r3, r4
 800c6ec:	4420      	add	r0, r4
 800c6ee:	60ab      	str	r3, [r5, #8]
 800c6f0:	6128      	str	r0, [r5, #16]
 800c6f2:	4631      	mov	r1, r6
 800c6f4:	2201      	movs	r2, #1
 800c6f6:	4628      	mov	r0, r5
 800c6f8:	f001 fbe4 	bl	800dec4 <ucdr_check_final_buffer_behavior_array>
 800c6fc:	1bb9      	subs	r1, r7, r6
 800c6fe:	4604      	mov	r4, r0
 800c700:	2800      	cmp	r0, #0
 800c702:	d1ea      	bne.n	800c6da <ucdr_serialize_endian_array_char+0x16>
 800c704:	2301      	movs	r3, #1
 800c706:	7da8      	ldrb	r0, [r5, #22]
 800c708:	756b      	strb	r3, [r5, #21]
 800c70a:	4058      	eors	r0, r3
 800c70c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c710:	463a      	mov	r2, r7
 800c712:	4641      	mov	r1, r8
 800c714:	68a8      	ldr	r0, [r5, #8]
 800c716:	f00d f8d2 	bl	80198be <memcpy>
 800c71a:	68aa      	ldr	r2, [r5, #8]
 800c71c:	692b      	ldr	r3, [r5, #16]
 800c71e:	443a      	add	r2, r7
 800c720:	443b      	add	r3, r7
 800c722:	60aa      	str	r2, [r5, #8]
 800c724:	612b      	str	r3, [r5, #16]
 800c726:	e7ed      	b.n	800c704 <ucdr_serialize_endian_array_char+0x40>

0800c728 <ucdr_deserialize_endian_array_char>:
 800c728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c72c:	4619      	mov	r1, r3
 800c72e:	461f      	mov	r7, r3
 800c730:	4605      	mov	r5, r0
 800c732:	4690      	mov	r8, r2
 800c734:	f001 fb3c 	bl	800ddb0 <ucdr_check_buffer_available_for>
 800c738:	b9e8      	cbnz	r0, 800c776 <ucdr_deserialize_endian_array_char+0x4e>
 800c73a:	463e      	mov	r6, r7
 800c73c:	e00c      	b.n	800c758 <ucdr_deserialize_endian_array_char+0x30>
 800c73e:	eb08 0003 	add.w	r0, r8, r3
 800c742:	68a9      	ldr	r1, [r5, #8]
 800c744:	4622      	mov	r2, r4
 800c746:	1b36      	subs	r6, r6, r4
 800c748:	f00d f8b9 	bl	80198be <memcpy>
 800c74c:	68ab      	ldr	r3, [r5, #8]
 800c74e:	6928      	ldr	r0, [r5, #16]
 800c750:	4423      	add	r3, r4
 800c752:	4420      	add	r0, r4
 800c754:	60ab      	str	r3, [r5, #8]
 800c756:	6128      	str	r0, [r5, #16]
 800c758:	4631      	mov	r1, r6
 800c75a:	2201      	movs	r2, #1
 800c75c:	4628      	mov	r0, r5
 800c75e:	f001 fbb1 	bl	800dec4 <ucdr_check_final_buffer_behavior_array>
 800c762:	1bbb      	subs	r3, r7, r6
 800c764:	4604      	mov	r4, r0
 800c766:	2800      	cmp	r0, #0
 800c768:	d1e9      	bne.n	800c73e <ucdr_deserialize_endian_array_char+0x16>
 800c76a:	2301      	movs	r3, #1
 800c76c:	7da8      	ldrb	r0, [r5, #22]
 800c76e:	756b      	strb	r3, [r5, #21]
 800c770:	4058      	eors	r0, r3
 800c772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c776:	463a      	mov	r2, r7
 800c778:	68a9      	ldr	r1, [r5, #8]
 800c77a:	4640      	mov	r0, r8
 800c77c:	f00d f89f 	bl	80198be <memcpy>
 800c780:	68aa      	ldr	r2, [r5, #8]
 800c782:	692b      	ldr	r3, [r5, #16]
 800c784:	443a      	add	r2, r7
 800c786:	443b      	add	r3, r7
 800c788:	60aa      	str	r2, [r5, #8]
 800c78a:	612b      	str	r3, [r5, #16]
 800c78c:	e7ed      	b.n	800c76a <ucdr_deserialize_endian_array_char+0x42>
 800c78e:	bf00      	nop

0800c790 <ucdr_serialize_array_uint8_t>:
 800c790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c794:	4688      	mov	r8, r1
 800c796:	4611      	mov	r1, r2
 800c798:	4617      	mov	r7, r2
 800c79a:	4605      	mov	r5, r0
 800c79c:	f001 fb08 	bl	800ddb0 <ucdr_check_buffer_available_for>
 800c7a0:	b9e0      	cbnz	r0, 800c7dc <ucdr_serialize_array_uint8_t+0x4c>
 800c7a2:	463e      	mov	r6, r7
 800c7a4:	e00b      	b.n	800c7be <ucdr_serialize_array_uint8_t+0x2e>
 800c7a6:	4441      	add	r1, r8
 800c7a8:	68a8      	ldr	r0, [r5, #8]
 800c7aa:	4622      	mov	r2, r4
 800c7ac:	1b36      	subs	r6, r6, r4
 800c7ae:	f00d f886 	bl	80198be <memcpy>
 800c7b2:	68ab      	ldr	r3, [r5, #8]
 800c7b4:	6928      	ldr	r0, [r5, #16]
 800c7b6:	4423      	add	r3, r4
 800c7b8:	4420      	add	r0, r4
 800c7ba:	60ab      	str	r3, [r5, #8]
 800c7bc:	6128      	str	r0, [r5, #16]
 800c7be:	4631      	mov	r1, r6
 800c7c0:	2201      	movs	r2, #1
 800c7c2:	4628      	mov	r0, r5
 800c7c4:	f001 fb7e 	bl	800dec4 <ucdr_check_final_buffer_behavior_array>
 800c7c8:	1bb9      	subs	r1, r7, r6
 800c7ca:	4604      	mov	r4, r0
 800c7cc:	2800      	cmp	r0, #0
 800c7ce:	d1ea      	bne.n	800c7a6 <ucdr_serialize_array_uint8_t+0x16>
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	7da8      	ldrb	r0, [r5, #22]
 800c7d4:	756b      	strb	r3, [r5, #21]
 800c7d6:	4058      	eors	r0, r3
 800c7d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7dc:	463a      	mov	r2, r7
 800c7de:	4641      	mov	r1, r8
 800c7e0:	68a8      	ldr	r0, [r5, #8]
 800c7e2:	f00d f86c 	bl	80198be <memcpy>
 800c7e6:	68aa      	ldr	r2, [r5, #8]
 800c7e8:	692b      	ldr	r3, [r5, #16]
 800c7ea:	443a      	add	r2, r7
 800c7ec:	443b      	add	r3, r7
 800c7ee:	60aa      	str	r2, [r5, #8]
 800c7f0:	612b      	str	r3, [r5, #16]
 800c7f2:	e7ed      	b.n	800c7d0 <ucdr_serialize_array_uint8_t+0x40>

0800c7f4 <ucdr_serialize_endian_array_uint8_t>:
 800c7f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7f8:	4619      	mov	r1, r3
 800c7fa:	461f      	mov	r7, r3
 800c7fc:	4605      	mov	r5, r0
 800c7fe:	4690      	mov	r8, r2
 800c800:	f001 fad6 	bl	800ddb0 <ucdr_check_buffer_available_for>
 800c804:	b9e0      	cbnz	r0, 800c840 <ucdr_serialize_endian_array_uint8_t+0x4c>
 800c806:	463e      	mov	r6, r7
 800c808:	e00b      	b.n	800c822 <ucdr_serialize_endian_array_uint8_t+0x2e>
 800c80a:	4441      	add	r1, r8
 800c80c:	68a8      	ldr	r0, [r5, #8]
 800c80e:	4622      	mov	r2, r4
 800c810:	1b36      	subs	r6, r6, r4
 800c812:	f00d f854 	bl	80198be <memcpy>
 800c816:	68ab      	ldr	r3, [r5, #8]
 800c818:	6928      	ldr	r0, [r5, #16]
 800c81a:	4423      	add	r3, r4
 800c81c:	4420      	add	r0, r4
 800c81e:	60ab      	str	r3, [r5, #8]
 800c820:	6128      	str	r0, [r5, #16]
 800c822:	4631      	mov	r1, r6
 800c824:	2201      	movs	r2, #1
 800c826:	4628      	mov	r0, r5
 800c828:	f001 fb4c 	bl	800dec4 <ucdr_check_final_buffer_behavior_array>
 800c82c:	1bb9      	subs	r1, r7, r6
 800c82e:	4604      	mov	r4, r0
 800c830:	2800      	cmp	r0, #0
 800c832:	d1ea      	bne.n	800c80a <ucdr_serialize_endian_array_uint8_t+0x16>
 800c834:	2301      	movs	r3, #1
 800c836:	7da8      	ldrb	r0, [r5, #22]
 800c838:	756b      	strb	r3, [r5, #21]
 800c83a:	4058      	eors	r0, r3
 800c83c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c840:	463a      	mov	r2, r7
 800c842:	4641      	mov	r1, r8
 800c844:	68a8      	ldr	r0, [r5, #8]
 800c846:	f00d f83a 	bl	80198be <memcpy>
 800c84a:	68aa      	ldr	r2, [r5, #8]
 800c84c:	692b      	ldr	r3, [r5, #16]
 800c84e:	443a      	add	r2, r7
 800c850:	443b      	add	r3, r7
 800c852:	60aa      	str	r2, [r5, #8]
 800c854:	612b      	str	r3, [r5, #16]
 800c856:	e7ed      	b.n	800c834 <ucdr_serialize_endian_array_uint8_t+0x40>

0800c858 <ucdr_deserialize_array_uint8_t>:
 800c858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c85c:	4688      	mov	r8, r1
 800c85e:	4611      	mov	r1, r2
 800c860:	4617      	mov	r7, r2
 800c862:	4605      	mov	r5, r0
 800c864:	f001 faa4 	bl	800ddb0 <ucdr_check_buffer_available_for>
 800c868:	b9e8      	cbnz	r0, 800c8a6 <ucdr_deserialize_array_uint8_t+0x4e>
 800c86a:	463e      	mov	r6, r7
 800c86c:	e00c      	b.n	800c888 <ucdr_deserialize_array_uint8_t+0x30>
 800c86e:	eb08 0003 	add.w	r0, r8, r3
 800c872:	68a9      	ldr	r1, [r5, #8]
 800c874:	4622      	mov	r2, r4
 800c876:	1b36      	subs	r6, r6, r4
 800c878:	f00d f821 	bl	80198be <memcpy>
 800c87c:	68ab      	ldr	r3, [r5, #8]
 800c87e:	6928      	ldr	r0, [r5, #16]
 800c880:	4423      	add	r3, r4
 800c882:	4420      	add	r0, r4
 800c884:	60ab      	str	r3, [r5, #8]
 800c886:	6128      	str	r0, [r5, #16]
 800c888:	4631      	mov	r1, r6
 800c88a:	2201      	movs	r2, #1
 800c88c:	4628      	mov	r0, r5
 800c88e:	f001 fb19 	bl	800dec4 <ucdr_check_final_buffer_behavior_array>
 800c892:	1bbb      	subs	r3, r7, r6
 800c894:	4604      	mov	r4, r0
 800c896:	2800      	cmp	r0, #0
 800c898:	d1e9      	bne.n	800c86e <ucdr_deserialize_array_uint8_t+0x16>
 800c89a:	2301      	movs	r3, #1
 800c89c:	7da8      	ldrb	r0, [r5, #22]
 800c89e:	756b      	strb	r3, [r5, #21]
 800c8a0:	4058      	eors	r0, r3
 800c8a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8a6:	463a      	mov	r2, r7
 800c8a8:	68a9      	ldr	r1, [r5, #8]
 800c8aa:	4640      	mov	r0, r8
 800c8ac:	f00d f807 	bl	80198be <memcpy>
 800c8b0:	68aa      	ldr	r2, [r5, #8]
 800c8b2:	692b      	ldr	r3, [r5, #16]
 800c8b4:	443a      	add	r2, r7
 800c8b6:	443b      	add	r3, r7
 800c8b8:	60aa      	str	r2, [r5, #8]
 800c8ba:	612b      	str	r3, [r5, #16]
 800c8bc:	e7ed      	b.n	800c89a <ucdr_deserialize_array_uint8_t+0x42>
 800c8be:	bf00      	nop

0800c8c0 <ucdr_deserialize_endian_array_uint8_t>:
 800c8c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8c4:	4619      	mov	r1, r3
 800c8c6:	461f      	mov	r7, r3
 800c8c8:	4605      	mov	r5, r0
 800c8ca:	4690      	mov	r8, r2
 800c8cc:	f001 fa70 	bl	800ddb0 <ucdr_check_buffer_available_for>
 800c8d0:	b9e8      	cbnz	r0, 800c90e <ucdr_deserialize_endian_array_uint8_t+0x4e>
 800c8d2:	463e      	mov	r6, r7
 800c8d4:	e00c      	b.n	800c8f0 <ucdr_deserialize_endian_array_uint8_t+0x30>
 800c8d6:	eb08 0003 	add.w	r0, r8, r3
 800c8da:	68a9      	ldr	r1, [r5, #8]
 800c8dc:	4622      	mov	r2, r4
 800c8de:	1b36      	subs	r6, r6, r4
 800c8e0:	f00c ffed 	bl	80198be <memcpy>
 800c8e4:	68ab      	ldr	r3, [r5, #8]
 800c8e6:	6928      	ldr	r0, [r5, #16]
 800c8e8:	4423      	add	r3, r4
 800c8ea:	4420      	add	r0, r4
 800c8ec:	60ab      	str	r3, [r5, #8]
 800c8ee:	6128      	str	r0, [r5, #16]
 800c8f0:	4631      	mov	r1, r6
 800c8f2:	2201      	movs	r2, #1
 800c8f4:	4628      	mov	r0, r5
 800c8f6:	f001 fae5 	bl	800dec4 <ucdr_check_final_buffer_behavior_array>
 800c8fa:	1bbb      	subs	r3, r7, r6
 800c8fc:	4604      	mov	r4, r0
 800c8fe:	2800      	cmp	r0, #0
 800c900:	d1e9      	bne.n	800c8d6 <ucdr_deserialize_endian_array_uint8_t+0x16>
 800c902:	2301      	movs	r3, #1
 800c904:	7da8      	ldrb	r0, [r5, #22]
 800c906:	756b      	strb	r3, [r5, #21]
 800c908:	4058      	eors	r0, r3
 800c90a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c90e:	463a      	mov	r2, r7
 800c910:	68a9      	ldr	r1, [r5, #8]
 800c912:	4640      	mov	r0, r8
 800c914:	f00c ffd3 	bl	80198be <memcpy>
 800c918:	68aa      	ldr	r2, [r5, #8]
 800c91a:	692b      	ldr	r3, [r5, #16]
 800c91c:	443a      	add	r2, r7
 800c91e:	443b      	add	r3, r7
 800c920:	60aa      	str	r2, [r5, #8]
 800c922:	612b      	str	r3, [r5, #16]
 800c924:	e7ed      	b.n	800c902 <ucdr_deserialize_endian_array_uint8_t+0x42>
 800c926:	bf00      	nop

0800c928 <ucdr_serialize_bool>:
 800c928:	b538      	push	{r3, r4, r5, lr}
 800c92a:	460d      	mov	r5, r1
 800c92c:	2101      	movs	r1, #1
 800c92e:	4604      	mov	r4, r0
 800c930:	f001 fa4a 	bl	800ddc8 <ucdr_check_final_buffer_behavior>
 800c934:	b148      	cbz	r0, 800c94a <ucdr_serialize_bool+0x22>
 800c936:	68a3      	ldr	r3, [r4, #8]
 800c938:	2101      	movs	r1, #1
 800c93a:	701d      	strb	r5, [r3, #0]
 800c93c:	68a2      	ldr	r2, [r4, #8]
 800c93e:	6923      	ldr	r3, [r4, #16]
 800c940:	440a      	add	r2, r1
 800c942:	7561      	strb	r1, [r4, #21]
 800c944:	440b      	add	r3, r1
 800c946:	60a2      	str	r2, [r4, #8]
 800c948:	6123      	str	r3, [r4, #16]
 800c94a:	7da0      	ldrb	r0, [r4, #22]
 800c94c:	f080 0001 	eor.w	r0, r0, #1
 800c950:	bd38      	pop	{r3, r4, r5, pc}
 800c952:	bf00      	nop

0800c954 <ucdr_deserialize_bool>:
 800c954:	b538      	push	{r3, r4, r5, lr}
 800c956:	460d      	mov	r5, r1
 800c958:	2101      	movs	r1, #1
 800c95a:	4604      	mov	r4, r0
 800c95c:	f001 fa34 	bl	800ddc8 <ucdr_check_final_buffer_behavior>
 800c960:	b160      	cbz	r0, 800c97c <ucdr_deserialize_bool+0x28>
 800c962:	68a2      	ldr	r2, [r4, #8]
 800c964:	2101      	movs	r1, #1
 800c966:	6923      	ldr	r3, [r4, #16]
 800c968:	f812 0b01 	ldrb.w	r0, [r2], #1
 800c96c:	440b      	add	r3, r1
 800c96e:	3800      	subs	r0, #0
 800c970:	bf18      	it	ne
 800c972:	2001      	movne	r0, #1
 800c974:	7028      	strb	r0, [r5, #0]
 800c976:	60a2      	str	r2, [r4, #8]
 800c978:	6123      	str	r3, [r4, #16]
 800c97a:	7561      	strb	r1, [r4, #21]
 800c97c:	7da0      	ldrb	r0, [r4, #22]
 800c97e:	f080 0001 	eor.w	r0, r0, #1
 800c982:	bd38      	pop	{r3, r4, r5, pc}

0800c984 <ucdr_serialize_uint8_t>:
 800c984:	b538      	push	{r3, r4, r5, lr}
 800c986:	460d      	mov	r5, r1
 800c988:	2101      	movs	r1, #1
 800c98a:	4604      	mov	r4, r0
 800c98c:	f001 fa1c 	bl	800ddc8 <ucdr_check_final_buffer_behavior>
 800c990:	b148      	cbz	r0, 800c9a6 <ucdr_serialize_uint8_t+0x22>
 800c992:	68a3      	ldr	r3, [r4, #8]
 800c994:	2101      	movs	r1, #1
 800c996:	701d      	strb	r5, [r3, #0]
 800c998:	68a2      	ldr	r2, [r4, #8]
 800c99a:	6923      	ldr	r3, [r4, #16]
 800c99c:	440a      	add	r2, r1
 800c99e:	7561      	strb	r1, [r4, #21]
 800c9a0:	440b      	add	r3, r1
 800c9a2:	60a2      	str	r2, [r4, #8]
 800c9a4:	6123      	str	r3, [r4, #16]
 800c9a6:	7da0      	ldrb	r0, [r4, #22]
 800c9a8:	f080 0001 	eor.w	r0, r0, #1
 800c9ac:	bd38      	pop	{r3, r4, r5, pc}
 800c9ae:	bf00      	nop

0800c9b0 <ucdr_deserialize_uint8_t>:
 800c9b0:	b538      	push	{r3, r4, r5, lr}
 800c9b2:	460d      	mov	r5, r1
 800c9b4:	2101      	movs	r1, #1
 800c9b6:	4604      	mov	r4, r0
 800c9b8:	f001 fa06 	bl	800ddc8 <ucdr_check_final_buffer_behavior>
 800c9bc:	b150      	cbz	r0, 800c9d4 <ucdr_deserialize_uint8_t+0x24>
 800c9be:	68a3      	ldr	r3, [r4, #8]
 800c9c0:	2101      	movs	r1, #1
 800c9c2:	781b      	ldrb	r3, [r3, #0]
 800c9c4:	702b      	strb	r3, [r5, #0]
 800c9c6:	68a2      	ldr	r2, [r4, #8]
 800c9c8:	6923      	ldr	r3, [r4, #16]
 800c9ca:	440a      	add	r2, r1
 800c9cc:	7561      	strb	r1, [r4, #21]
 800c9ce:	440b      	add	r3, r1
 800c9d0:	60a2      	str	r2, [r4, #8]
 800c9d2:	6123      	str	r3, [r4, #16]
 800c9d4:	7da0      	ldrb	r0, [r4, #22]
 800c9d6:	f080 0001 	eor.w	r0, r0, #1
 800c9da:	bd38      	pop	{r3, r4, r5, pc}

0800c9dc <ucdr_serialize_uint16_t>:
 800c9dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9e0:	460b      	mov	r3, r1
 800c9e2:	b082      	sub	sp, #8
 800c9e4:	4604      	mov	r4, r0
 800c9e6:	2102      	movs	r1, #2
 800c9e8:	f8ad 3006 	strh.w	r3, [sp, #6]
 800c9ec:	f001 fa40 	bl	800de70 <ucdr_buffer_alignment>
 800c9f0:	4601      	mov	r1, r0
 800c9f2:	4620      	mov	r0, r4
 800c9f4:	7d67      	ldrb	r7, [r4, #21]
 800c9f6:	f001 fa83 	bl	800df00 <ucdr_advance_buffer>
 800c9fa:	2102      	movs	r1, #2
 800c9fc:	4620      	mov	r0, r4
 800c9fe:	f001 f9d7 	bl	800ddb0 <ucdr_check_buffer_available_for>
 800ca02:	bb78      	cbnz	r0, 800ca64 <ucdr_serialize_uint16_t+0x88>
 800ca04:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ca08:	42ab      	cmp	r3, r5
 800ca0a:	d926      	bls.n	800ca5a <ucdr_serialize_uint16_t+0x7e>
 800ca0c:	1b5e      	subs	r6, r3, r5
 800ca0e:	60a3      	str	r3, [r4, #8]
 800ca10:	6923      	ldr	r3, [r4, #16]
 800ca12:	4620      	mov	r0, r4
 800ca14:	f1c6 0802 	rsb	r8, r6, #2
 800ca18:	4433      	add	r3, r6
 800ca1a:	4641      	mov	r1, r8
 800ca1c:	6123      	str	r3, [r4, #16]
 800ca1e:	f001 f9d3 	bl	800ddc8 <ucdr_check_final_buffer_behavior>
 800ca22:	2800      	cmp	r0, #0
 800ca24:	d03b      	beq.n	800ca9e <ucdr_serialize_uint16_t+0xc2>
 800ca26:	7d23      	ldrb	r3, [r4, #20]
 800ca28:	2b01      	cmp	r3, #1
 800ca2a:	d04a      	beq.n	800cac2 <ucdr_serialize_uint16_t+0xe6>
 800ca2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ca30:	702b      	strb	r3, [r5, #0]
 800ca32:	2e00      	cmp	r6, #0
 800ca34:	d040      	beq.n	800cab8 <ucdr_serialize_uint16_t+0xdc>
 800ca36:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ca3a:	706b      	strb	r3, [r5, #1]
 800ca3c:	6923      	ldr	r3, [r4, #16]
 800ca3e:	2102      	movs	r1, #2
 800ca40:	68a2      	ldr	r2, [r4, #8]
 800ca42:	3302      	adds	r3, #2
 800ca44:	7da0      	ldrb	r0, [r4, #22]
 800ca46:	4442      	add	r2, r8
 800ca48:	7561      	strb	r1, [r4, #21]
 800ca4a:	1b9e      	subs	r6, r3, r6
 800ca4c:	f080 0001 	eor.w	r0, r0, #1
 800ca50:	60a2      	str	r2, [r4, #8]
 800ca52:	6126      	str	r6, [r4, #16]
 800ca54:	b002      	add	sp, #8
 800ca56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca5a:	2102      	movs	r1, #2
 800ca5c:	4620      	mov	r0, r4
 800ca5e:	f001 f9b3 	bl	800ddc8 <ucdr_check_final_buffer_behavior>
 800ca62:	b190      	cbz	r0, 800ca8a <ucdr_serialize_uint16_t+0xae>
 800ca64:	7d23      	ldrb	r3, [r4, #20]
 800ca66:	2b01      	cmp	r3, #1
 800ca68:	68a3      	ldr	r3, [r4, #8]
 800ca6a:	d014      	beq.n	800ca96 <ucdr_serialize_uint16_t+0xba>
 800ca6c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800ca70:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ca74:	7019      	strb	r1, [r3, #0]
 800ca76:	68a3      	ldr	r3, [r4, #8]
 800ca78:	705a      	strb	r2, [r3, #1]
 800ca7a:	2102      	movs	r1, #2
 800ca7c:	68a2      	ldr	r2, [r4, #8]
 800ca7e:	6923      	ldr	r3, [r4, #16]
 800ca80:	440a      	add	r2, r1
 800ca82:	7561      	strb	r1, [r4, #21]
 800ca84:	440b      	add	r3, r1
 800ca86:	60a2      	str	r2, [r4, #8]
 800ca88:	6123      	str	r3, [r4, #16]
 800ca8a:	7da0      	ldrb	r0, [r4, #22]
 800ca8c:	f080 0001 	eor.w	r0, r0, #1
 800ca90:	b002      	add	sp, #8
 800ca92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca96:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ca9a:	801a      	strh	r2, [r3, #0]
 800ca9c:	e7ed      	b.n	800ca7a <ucdr_serialize_uint16_t+0x9e>
 800ca9e:	68a2      	ldr	r2, [r4, #8]
 800caa0:	6923      	ldr	r3, [r4, #16]
 800caa2:	7da0      	ldrb	r0, [r4, #22]
 800caa4:	1b92      	subs	r2, r2, r6
 800caa6:	1b9b      	subs	r3, r3, r6
 800caa8:	7567      	strb	r7, [r4, #21]
 800caaa:	f080 0001 	eor.w	r0, r0, #1
 800caae:	60a2      	str	r2, [r4, #8]
 800cab0:	6123      	str	r3, [r4, #16]
 800cab2:	b002      	add	sp, #8
 800cab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cab8:	68a3      	ldr	r3, [r4, #8]
 800caba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cabe:	701a      	strb	r2, [r3, #0]
 800cac0:	e7bc      	b.n	800ca3c <ucdr_serialize_uint16_t+0x60>
 800cac2:	4628      	mov	r0, r5
 800cac4:	f10d 0506 	add.w	r5, sp, #6
 800cac8:	4632      	mov	r2, r6
 800caca:	4629      	mov	r1, r5
 800cacc:	f00c fef7 	bl	80198be <memcpy>
 800cad0:	4642      	mov	r2, r8
 800cad2:	19a9      	adds	r1, r5, r6
 800cad4:	68a0      	ldr	r0, [r4, #8]
 800cad6:	f00c fef2 	bl	80198be <memcpy>
 800cada:	e7af      	b.n	800ca3c <ucdr_serialize_uint16_t+0x60>

0800cadc <ucdr_serialize_endian_uint16_t>:
 800cadc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cae0:	4604      	mov	r4, r0
 800cae2:	b083      	sub	sp, #12
 800cae4:	460d      	mov	r5, r1
 800cae6:	2102      	movs	r1, #2
 800cae8:	f8ad 2006 	strh.w	r2, [sp, #6]
 800caec:	f001 f9c0 	bl	800de70 <ucdr_buffer_alignment>
 800caf0:	4601      	mov	r1, r0
 800caf2:	4620      	mov	r0, r4
 800caf4:	f894 8015 	ldrb.w	r8, [r4, #21]
 800caf8:	f001 fa02 	bl	800df00 <ucdr_advance_buffer>
 800cafc:	2102      	movs	r1, #2
 800cafe:	4620      	mov	r0, r4
 800cb00:	f001 f956 	bl	800ddb0 <ucdr_check_buffer_available_for>
 800cb04:	bb70      	cbnz	r0, 800cb64 <ucdr_serialize_endian_uint16_t+0x88>
 800cb06:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800cb0a:	42be      	cmp	r6, r7
 800cb0c:	d925      	bls.n	800cb5a <ucdr_serialize_endian_uint16_t+0x7e>
 800cb0e:	6923      	ldr	r3, [r4, #16]
 800cb10:	4620      	mov	r0, r4
 800cb12:	60a6      	str	r6, [r4, #8]
 800cb14:	1bf6      	subs	r6, r6, r7
 800cb16:	4433      	add	r3, r6
 800cb18:	f1c6 0902 	rsb	r9, r6, #2
 800cb1c:	6123      	str	r3, [r4, #16]
 800cb1e:	4649      	mov	r1, r9
 800cb20:	f001 f952 	bl	800ddc8 <ucdr_check_final_buffer_behavior>
 800cb24:	2800      	cmp	r0, #0
 800cb26:	d039      	beq.n	800cb9c <ucdr_serialize_endian_uint16_t+0xc0>
 800cb28:	2d01      	cmp	r5, #1
 800cb2a:	d04a      	beq.n	800cbc2 <ucdr_serialize_endian_uint16_t+0xe6>
 800cb2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cb30:	703b      	strb	r3, [r7, #0]
 800cb32:	2e00      	cmp	r6, #0
 800cb34:	d040      	beq.n	800cbb8 <ucdr_serialize_endian_uint16_t+0xdc>
 800cb36:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cb3a:	707b      	strb	r3, [r7, #1]
 800cb3c:	6923      	ldr	r3, [r4, #16]
 800cb3e:	2102      	movs	r1, #2
 800cb40:	68a2      	ldr	r2, [r4, #8]
 800cb42:	7da0      	ldrb	r0, [r4, #22]
 800cb44:	3302      	adds	r3, #2
 800cb46:	444a      	add	r2, r9
 800cb48:	7561      	strb	r1, [r4, #21]
 800cb4a:	1b9b      	subs	r3, r3, r6
 800cb4c:	f080 0001 	eor.w	r0, r0, #1
 800cb50:	60a2      	str	r2, [r4, #8]
 800cb52:	6123      	str	r3, [r4, #16]
 800cb54:	b003      	add	sp, #12
 800cb56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb5a:	2102      	movs	r1, #2
 800cb5c:	4620      	mov	r0, r4
 800cb5e:	f001 f933 	bl	800ddc8 <ucdr_check_final_buffer_behavior>
 800cb62:	b188      	cbz	r0, 800cb88 <ucdr_serialize_endian_uint16_t+0xac>
 800cb64:	2d01      	cmp	r5, #1
 800cb66:	68a3      	ldr	r3, [r4, #8]
 800cb68:	d014      	beq.n	800cb94 <ucdr_serialize_endian_uint16_t+0xb8>
 800cb6a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800cb6e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cb72:	7019      	strb	r1, [r3, #0]
 800cb74:	68a3      	ldr	r3, [r4, #8]
 800cb76:	705a      	strb	r2, [r3, #1]
 800cb78:	2102      	movs	r1, #2
 800cb7a:	68a2      	ldr	r2, [r4, #8]
 800cb7c:	6923      	ldr	r3, [r4, #16]
 800cb7e:	440a      	add	r2, r1
 800cb80:	7561      	strb	r1, [r4, #21]
 800cb82:	440b      	add	r3, r1
 800cb84:	60a2      	str	r2, [r4, #8]
 800cb86:	6123      	str	r3, [r4, #16]
 800cb88:	7da0      	ldrb	r0, [r4, #22]
 800cb8a:	f080 0001 	eor.w	r0, r0, #1
 800cb8e:	b003      	add	sp, #12
 800cb90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb94:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800cb98:	801a      	strh	r2, [r3, #0]
 800cb9a:	e7ed      	b.n	800cb78 <ucdr_serialize_endian_uint16_t+0x9c>
 800cb9c:	68a2      	ldr	r2, [r4, #8]
 800cb9e:	6923      	ldr	r3, [r4, #16]
 800cba0:	7da0      	ldrb	r0, [r4, #22]
 800cba2:	1b92      	subs	r2, r2, r6
 800cba4:	1b9b      	subs	r3, r3, r6
 800cba6:	f884 8015 	strb.w	r8, [r4, #21]
 800cbaa:	f080 0001 	eor.w	r0, r0, #1
 800cbae:	60a2      	str	r2, [r4, #8]
 800cbb0:	6123      	str	r3, [r4, #16]
 800cbb2:	b003      	add	sp, #12
 800cbb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cbb8:	68a3      	ldr	r3, [r4, #8]
 800cbba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cbbe:	701a      	strb	r2, [r3, #0]
 800cbc0:	e7bc      	b.n	800cb3c <ucdr_serialize_endian_uint16_t+0x60>
 800cbc2:	f10d 0506 	add.w	r5, sp, #6
 800cbc6:	4632      	mov	r2, r6
 800cbc8:	4638      	mov	r0, r7
 800cbca:	4629      	mov	r1, r5
 800cbcc:	f00c fe77 	bl	80198be <memcpy>
 800cbd0:	464a      	mov	r2, r9
 800cbd2:	19a9      	adds	r1, r5, r6
 800cbd4:	68a0      	ldr	r0, [r4, #8]
 800cbd6:	f00c fe72 	bl	80198be <memcpy>
 800cbda:	e7af      	b.n	800cb3c <ucdr_serialize_endian_uint16_t+0x60>

0800cbdc <ucdr_deserialize_uint16_t>:
 800cbdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbe0:	4604      	mov	r4, r0
 800cbe2:	460d      	mov	r5, r1
 800cbe4:	2102      	movs	r1, #2
 800cbe6:	f001 f943 	bl	800de70 <ucdr_buffer_alignment>
 800cbea:	4601      	mov	r1, r0
 800cbec:	4620      	mov	r0, r4
 800cbee:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cbf2:	f001 f985 	bl	800df00 <ucdr_advance_buffer>
 800cbf6:	2102      	movs	r1, #2
 800cbf8:	4620      	mov	r0, r4
 800cbfa:	f001 f8d9 	bl	800ddb0 <ucdr_check_buffer_available_for>
 800cbfe:	bb60      	cbnz	r0, 800cc5a <ucdr_deserialize_uint16_t+0x7e>
 800cc00:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800cc04:	42be      	cmp	r6, r7
 800cc06:	d923      	bls.n	800cc50 <ucdr_deserialize_uint16_t+0x74>
 800cc08:	6923      	ldr	r3, [r4, #16]
 800cc0a:	4620      	mov	r0, r4
 800cc0c:	60a6      	str	r6, [r4, #8]
 800cc0e:	1bf6      	subs	r6, r6, r7
 800cc10:	4433      	add	r3, r6
 800cc12:	f1c6 0902 	rsb	r9, r6, #2
 800cc16:	6123      	str	r3, [r4, #16]
 800cc18:	4649      	mov	r1, r9
 800cc1a:	f001 f8d5 	bl	800ddc8 <ucdr_check_final_buffer_behavior>
 800cc1e:	2800      	cmp	r0, #0
 800cc20:	d034      	beq.n	800cc8c <ucdr_deserialize_uint16_t+0xb0>
 800cc22:	7d23      	ldrb	r3, [r4, #20]
 800cc24:	2b01      	cmp	r3, #1
 800cc26:	d042      	beq.n	800ccae <ucdr_deserialize_uint16_t+0xd2>
 800cc28:	787b      	ldrb	r3, [r7, #1]
 800cc2a:	702b      	strb	r3, [r5, #0]
 800cc2c:	2e00      	cmp	r6, #0
 800cc2e:	d03a      	beq.n	800cca6 <ucdr_deserialize_uint16_t+0xca>
 800cc30:	783b      	ldrb	r3, [r7, #0]
 800cc32:	706b      	strb	r3, [r5, #1]
 800cc34:	6923      	ldr	r3, [r4, #16]
 800cc36:	2102      	movs	r1, #2
 800cc38:	68a2      	ldr	r2, [r4, #8]
 800cc3a:	3302      	adds	r3, #2
 800cc3c:	7da0      	ldrb	r0, [r4, #22]
 800cc3e:	444a      	add	r2, r9
 800cc40:	7561      	strb	r1, [r4, #21]
 800cc42:	1b9b      	subs	r3, r3, r6
 800cc44:	f080 0001 	eor.w	r0, r0, #1
 800cc48:	60a2      	str	r2, [r4, #8]
 800cc4a:	6123      	str	r3, [r4, #16]
 800cc4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc50:	2102      	movs	r1, #2
 800cc52:	4620      	mov	r0, r4
 800cc54:	f001 f8b8 	bl	800ddc8 <ucdr_check_final_buffer_behavior>
 800cc58:	b180      	cbz	r0, 800cc7c <ucdr_deserialize_uint16_t+0xa0>
 800cc5a:	7d23      	ldrb	r3, [r4, #20]
 800cc5c:	2b01      	cmp	r3, #1
 800cc5e:	68a3      	ldr	r3, [r4, #8]
 800cc60:	d011      	beq.n	800cc86 <ucdr_deserialize_uint16_t+0xaa>
 800cc62:	785b      	ldrb	r3, [r3, #1]
 800cc64:	702b      	strb	r3, [r5, #0]
 800cc66:	68a3      	ldr	r3, [r4, #8]
 800cc68:	781b      	ldrb	r3, [r3, #0]
 800cc6a:	706b      	strb	r3, [r5, #1]
 800cc6c:	2102      	movs	r1, #2
 800cc6e:	68a2      	ldr	r2, [r4, #8]
 800cc70:	6923      	ldr	r3, [r4, #16]
 800cc72:	440a      	add	r2, r1
 800cc74:	7561      	strb	r1, [r4, #21]
 800cc76:	440b      	add	r3, r1
 800cc78:	60a2      	str	r2, [r4, #8]
 800cc7a:	6123      	str	r3, [r4, #16]
 800cc7c:	7da0      	ldrb	r0, [r4, #22]
 800cc7e:	f080 0001 	eor.w	r0, r0, #1
 800cc82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc86:	881b      	ldrh	r3, [r3, #0]
 800cc88:	802b      	strh	r3, [r5, #0]
 800cc8a:	e7ef      	b.n	800cc6c <ucdr_deserialize_uint16_t+0x90>
 800cc8c:	68a2      	ldr	r2, [r4, #8]
 800cc8e:	6923      	ldr	r3, [r4, #16]
 800cc90:	1b92      	subs	r2, r2, r6
 800cc92:	7da0      	ldrb	r0, [r4, #22]
 800cc94:	1b9b      	subs	r3, r3, r6
 800cc96:	f884 8015 	strb.w	r8, [r4, #21]
 800cc9a:	f080 0001 	eor.w	r0, r0, #1
 800cc9e:	60a2      	str	r2, [r4, #8]
 800cca0:	6123      	str	r3, [r4, #16]
 800cca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cca6:	68a3      	ldr	r3, [r4, #8]
 800cca8:	781b      	ldrb	r3, [r3, #0]
 800ccaa:	706b      	strb	r3, [r5, #1]
 800ccac:	e7c2      	b.n	800cc34 <ucdr_deserialize_uint16_t+0x58>
 800ccae:	4639      	mov	r1, r7
 800ccb0:	4632      	mov	r2, r6
 800ccb2:	4628      	mov	r0, r5
 800ccb4:	f00c fe03 	bl	80198be <memcpy>
 800ccb8:	464a      	mov	r2, r9
 800ccba:	19a8      	adds	r0, r5, r6
 800ccbc:	68a1      	ldr	r1, [r4, #8]
 800ccbe:	f00c fdfe 	bl	80198be <memcpy>
 800ccc2:	e7b7      	b.n	800cc34 <ucdr_deserialize_uint16_t+0x58>

0800ccc4 <ucdr_deserialize_endian_uint16_t>:
 800ccc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccc8:	4604      	mov	r4, r0
 800ccca:	460e      	mov	r6, r1
 800cccc:	2102      	movs	r1, #2
 800ccce:	4615      	mov	r5, r2
 800ccd0:	f001 f8ce 	bl	800de70 <ucdr_buffer_alignment>
 800ccd4:	4601      	mov	r1, r0
 800ccd6:	4620      	mov	r0, r4
 800ccd8:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ccdc:	f001 f910 	bl	800df00 <ucdr_advance_buffer>
 800cce0:	2102      	movs	r1, #2
 800cce2:	4620      	mov	r0, r4
 800cce4:	f001 f864 	bl	800ddb0 <ucdr_check_buffer_available_for>
 800cce8:	bb70      	cbnz	r0, 800cd48 <ucdr_deserialize_endian_uint16_t+0x84>
 800ccea:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 800ccee:	454f      	cmp	r7, r9
 800ccf0:	d925      	bls.n	800cd3e <ucdr_deserialize_endian_uint16_t+0x7a>
 800ccf2:	6923      	ldr	r3, [r4, #16]
 800ccf4:	4620      	mov	r0, r4
 800ccf6:	60a7      	str	r7, [r4, #8]
 800ccf8:	eba7 0709 	sub.w	r7, r7, r9
 800ccfc:	443b      	add	r3, r7
 800ccfe:	f1c7 0a02 	rsb	sl, r7, #2
 800cd02:	6123      	str	r3, [r4, #16]
 800cd04:	4651      	mov	r1, sl
 800cd06:	f001 f85f 	bl	800ddc8 <ucdr_check_final_buffer_behavior>
 800cd0a:	2800      	cmp	r0, #0
 800cd0c:	d034      	beq.n	800cd78 <ucdr_deserialize_endian_uint16_t+0xb4>
 800cd0e:	2e01      	cmp	r6, #1
 800cd10:	d043      	beq.n	800cd9a <ucdr_deserialize_endian_uint16_t+0xd6>
 800cd12:	f899 3001 	ldrb.w	r3, [r9, #1]
 800cd16:	702b      	strb	r3, [r5, #0]
 800cd18:	2f00      	cmp	r7, #0
 800cd1a:	d03a      	beq.n	800cd92 <ucdr_deserialize_endian_uint16_t+0xce>
 800cd1c:	f899 3000 	ldrb.w	r3, [r9]
 800cd20:	706b      	strb	r3, [r5, #1]
 800cd22:	6923      	ldr	r3, [r4, #16]
 800cd24:	2102      	movs	r1, #2
 800cd26:	68a2      	ldr	r2, [r4, #8]
 800cd28:	3302      	adds	r3, #2
 800cd2a:	7da0      	ldrb	r0, [r4, #22]
 800cd2c:	4452      	add	r2, sl
 800cd2e:	7561      	strb	r1, [r4, #21]
 800cd30:	1bdb      	subs	r3, r3, r7
 800cd32:	f080 0001 	eor.w	r0, r0, #1
 800cd36:	60a2      	str	r2, [r4, #8]
 800cd38:	6123      	str	r3, [r4, #16]
 800cd3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd3e:	2102      	movs	r1, #2
 800cd40:	4620      	mov	r0, r4
 800cd42:	f001 f841 	bl	800ddc8 <ucdr_check_final_buffer_behavior>
 800cd46:	b178      	cbz	r0, 800cd68 <ucdr_deserialize_endian_uint16_t+0xa4>
 800cd48:	2e01      	cmp	r6, #1
 800cd4a:	68a3      	ldr	r3, [r4, #8]
 800cd4c:	d011      	beq.n	800cd72 <ucdr_deserialize_endian_uint16_t+0xae>
 800cd4e:	785b      	ldrb	r3, [r3, #1]
 800cd50:	702b      	strb	r3, [r5, #0]
 800cd52:	68a3      	ldr	r3, [r4, #8]
 800cd54:	781b      	ldrb	r3, [r3, #0]
 800cd56:	706b      	strb	r3, [r5, #1]
 800cd58:	2102      	movs	r1, #2
 800cd5a:	68a2      	ldr	r2, [r4, #8]
 800cd5c:	6923      	ldr	r3, [r4, #16]
 800cd5e:	440a      	add	r2, r1
 800cd60:	7561      	strb	r1, [r4, #21]
 800cd62:	440b      	add	r3, r1
 800cd64:	60a2      	str	r2, [r4, #8]
 800cd66:	6123      	str	r3, [r4, #16]
 800cd68:	7da0      	ldrb	r0, [r4, #22]
 800cd6a:	f080 0001 	eor.w	r0, r0, #1
 800cd6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd72:	881b      	ldrh	r3, [r3, #0]
 800cd74:	802b      	strh	r3, [r5, #0]
 800cd76:	e7ef      	b.n	800cd58 <ucdr_deserialize_endian_uint16_t+0x94>
 800cd78:	68a2      	ldr	r2, [r4, #8]
 800cd7a:	6923      	ldr	r3, [r4, #16]
 800cd7c:	1bd2      	subs	r2, r2, r7
 800cd7e:	7da0      	ldrb	r0, [r4, #22]
 800cd80:	1bdb      	subs	r3, r3, r7
 800cd82:	f884 8015 	strb.w	r8, [r4, #21]
 800cd86:	f080 0001 	eor.w	r0, r0, #1
 800cd8a:	60a2      	str	r2, [r4, #8]
 800cd8c:	6123      	str	r3, [r4, #16]
 800cd8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd92:	68a3      	ldr	r3, [r4, #8]
 800cd94:	781b      	ldrb	r3, [r3, #0]
 800cd96:	706b      	strb	r3, [r5, #1]
 800cd98:	e7c3      	b.n	800cd22 <ucdr_deserialize_endian_uint16_t+0x5e>
 800cd9a:	4649      	mov	r1, r9
 800cd9c:	463a      	mov	r2, r7
 800cd9e:	4628      	mov	r0, r5
 800cda0:	f00c fd8d 	bl	80198be <memcpy>
 800cda4:	4652      	mov	r2, sl
 800cda6:	19e8      	adds	r0, r5, r7
 800cda8:	68a1      	ldr	r1, [r4, #8]
 800cdaa:	f00c fd88 	bl	80198be <memcpy>
 800cdae:	e7b8      	b.n	800cd22 <ucdr_deserialize_endian_uint16_t+0x5e>

0800cdb0 <ucdr_serialize_uint32_t>:
 800cdb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdb4:	b082      	sub	sp, #8
 800cdb6:	4604      	mov	r4, r0
 800cdb8:	9101      	str	r1, [sp, #4]
 800cdba:	2104      	movs	r1, #4
 800cdbc:	f001 f858 	bl	800de70 <ucdr_buffer_alignment>
 800cdc0:	4601      	mov	r1, r0
 800cdc2:	4620      	mov	r0, r4
 800cdc4:	7d67      	ldrb	r7, [r4, #21]
 800cdc6:	f001 f89b 	bl	800df00 <ucdr_advance_buffer>
 800cdca:	2104      	movs	r1, #4
 800cdcc:	4620      	mov	r0, r4
 800cdce:	f000 ffef 	bl	800ddb0 <ucdr_check_buffer_available_for>
 800cdd2:	2800      	cmp	r0, #0
 800cdd4:	d139      	bne.n	800ce4a <ucdr_serialize_uint32_t+0x9a>
 800cdd6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800cdda:	42ab      	cmp	r3, r5
 800cddc:	d930      	bls.n	800ce40 <ucdr_serialize_uint32_t+0x90>
 800cdde:	1b5e      	subs	r6, r3, r5
 800cde0:	60a3      	str	r3, [r4, #8]
 800cde2:	6923      	ldr	r3, [r4, #16]
 800cde4:	4620      	mov	r0, r4
 800cde6:	f1c6 0804 	rsb	r8, r6, #4
 800cdea:	4433      	add	r3, r6
 800cdec:	4641      	mov	r1, r8
 800cdee:	6123      	str	r3, [r4, #16]
 800cdf0:	f000 ffea 	bl	800ddc8 <ucdr_check_final_buffer_behavior>
 800cdf4:	2800      	cmp	r0, #0
 800cdf6:	d04c      	beq.n	800ce92 <ucdr_serialize_uint32_t+0xe2>
 800cdf8:	7d23      	ldrb	r3, [r4, #20]
 800cdfa:	2b01      	cmp	r3, #1
 800cdfc:	d063      	beq.n	800cec6 <ucdr_serialize_uint32_t+0x116>
 800cdfe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ce02:	702b      	strb	r3, [r5, #0]
 800ce04:	2e00      	cmp	r6, #0
 800ce06:	d051      	beq.n	800ceac <ucdr_serialize_uint32_t+0xfc>
 800ce08:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ce0c:	2e01      	cmp	r6, #1
 800ce0e:	706b      	strb	r3, [r5, #1]
 800ce10:	d050      	beq.n	800ceb4 <ucdr_serialize_uint32_t+0x104>
 800ce12:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ce16:	2e02      	cmp	r6, #2
 800ce18:	70ab      	strb	r3, [r5, #2]
 800ce1a:	d04f      	beq.n	800cebc <ucdr_serialize_uint32_t+0x10c>
 800ce1c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ce20:	70eb      	strb	r3, [r5, #3]
 800ce22:	6923      	ldr	r3, [r4, #16]
 800ce24:	2104      	movs	r1, #4
 800ce26:	68a2      	ldr	r2, [r4, #8]
 800ce28:	3304      	adds	r3, #4
 800ce2a:	7da0      	ldrb	r0, [r4, #22]
 800ce2c:	4442      	add	r2, r8
 800ce2e:	7561      	strb	r1, [r4, #21]
 800ce30:	1b9e      	subs	r6, r3, r6
 800ce32:	f080 0001 	eor.w	r0, r0, #1
 800ce36:	60a2      	str	r2, [r4, #8]
 800ce38:	6126      	str	r6, [r4, #16]
 800ce3a:	b002      	add	sp, #8
 800ce3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce40:	2104      	movs	r1, #4
 800ce42:	4620      	mov	r0, r4
 800ce44:	f000 ffc0 	bl	800ddc8 <ucdr_check_final_buffer_behavior>
 800ce48:	b1d0      	cbz	r0, 800ce80 <ucdr_serialize_uint32_t+0xd0>
 800ce4a:	7d23      	ldrb	r3, [r4, #20]
 800ce4c:	2b01      	cmp	r3, #1
 800ce4e:	68a3      	ldr	r3, [r4, #8]
 800ce50:	d01c      	beq.n	800ce8c <ucdr_serialize_uint32_t+0xdc>
 800ce52:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800ce56:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ce5a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800ce5e:	7018      	strb	r0, [r3, #0]
 800ce60:	68a3      	ldr	r3, [r4, #8]
 800ce62:	705a      	strb	r2, [r3, #1]
 800ce64:	68a3      	ldr	r3, [r4, #8]
 800ce66:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ce6a:	7099      	strb	r1, [r3, #2]
 800ce6c:	68a3      	ldr	r3, [r4, #8]
 800ce6e:	70da      	strb	r2, [r3, #3]
 800ce70:	2104      	movs	r1, #4
 800ce72:	68a2      	ldr	r2, [r4, #8]
 800ce74:	6923      	ldr	r3, [r4, #16]
 800ce76:	440a      	add	r2, r1
 800ce78:	7561      	strb	r1, [r4, #21]
 800ce7a:	440b      	add	r3, r1
 800ce7c:	60a2      	str	r2, [r4, #8]
 800ce7e:	6123      	str	r3, [r4, #16]
 800ce80:	7da0      	ldrb	r0, [r4, #22]
 800ce82:	f080 0001 	eor.w	r0, r0, #1
 800ce86:	b002      	add	sp, #8
 800ce88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce8c:	9a01      	ldr	r2, [sp, #4]
 800ce8e:	601a      	str	r2, [r3, #0]
 800ce90:	e7ee      	b.n	800ce70 <ucdr_serialize_uint32_t+0xc0>
 800ce92:	68a2      	ldr	r2, [r4, #8]
 800ce94:	6923      	ldr	r3, [r4, #16]
 800ce96:	7da0      	ldrb	r0, [r4, #22]
 800ce98:	1b92      	subs	r2, r2, r6
 800ce9a:	1b9b      	subs	r3, r3, r6
 800ce9c:	7567      	strb	r7, [r4, #21]
 800ce9e:	f080 0001 	eor.w	r0, r0, #1
 800cea2:	60a2      	str	r2, [r4, #8]
 800cea4:	6123      	str	r3, [r4, #16]
 800cea6:	b002      	add	sp, #8
 800cea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ceac:	68a3      	ldr	r3, [r4, #8]
 800ceae:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ceb2:	701a      	strb	r2, [r3, #0]
 800ceb4:	68a3      	ldr	r3, [r4, #8]
 800ceb6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ceba:	701a      	strb	r2, [r3, #0]
 800cebc:	68a3      	ldr	r3, [r4, #8]
 800cebe:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cec2:	701a      	strb	r2, [r3, #0]
 800cec4:	e7ad      	b.n	800ce22 <ucdr_serialize_uint32_t+0x72>
 800cec6:	4628      	mov	r0, r5
 800cec8:	ad01      	add	r5, sp, #4
 800ceca:	4632      	mov	r2, r6
 800cecc:	4629      	mov	r1, r5
 800cece:	f00c fcf6 	bl	80198be <memcpy>
 800ced2:	4642      	mov	r2, r8
 800ced4:	19a9      	adds	r1, r5, r6
 800ced6:	68a0      	ldr	r0, [r4, #8]
 800ced8:	f00c fcf1 	bl	80198be <memcpy>
 800cedc:	e7a1      	b.n	800ce22 <ucdr_serialize_uint32_t+0x72>
 800cede:	bf00      	nop

0800cee0 <ucdr_serialize_endian_uint32_t>:
 800cee0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cee4:	4604      	mov	r4, r0
 800cee6:	b083      	sub	sp, #12
 800cee8:	460d      	mov	r5, r1
 800ceea:	2104      	movs	r1, #4
 800ceec:	9201      	str	r2, [sp, #4]
 800ceee:	f000 ffbf 	bl	800de70 <ucdr_buffer_alignment>
 800cef2:	4601      	mov	r1, r0
 800cef4:	4620      	mov	r0, r4
 800cef6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cefa:	f001 f801 	bl	800df00 <ucdr_advance_buffer>
 800cefe:	2104      	movs	r1, #4
 800cf00:	4620      	mov	r0, r4
 800cf02:	f000 ff55 	bl	800ddb0 <ucdr_check_buffer_available_for>
 800cf06:	2800      	cmp	r0, #0
 800cf08:	d138      	bne.n	800cf7c <ucdr_serialize_endian_uint32_t+0x9c>
 800cf0a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800cf0e:	42b7      	cmp	r7, r6
 800cf10:	d92f      	bls.n	800cf72 <ucdr_serialize_endian_uint32_t+0x92>
 800cf12:	6923      	ldr	r3, [r4, #16]
 800cf14:	4620      	mov	r0, r4
 800cf16:	60a7      	str	r7, [r4, #8]
 800cf18:	1bbf      	subs	r7, r7, r6
 800cf1a:	443b      	add	r3, r7
 800cf1c:	f1c7 0904 	rsb	r9, r7, #4
 800cf20:	6123      	str	r3, [r4, #16]
 800cf22:	4649      	mov	r1, r9
 800cf24:	f000 ff50 	bl	800ddc8 <ucdr_check_final_buffer_behavior>
 800cf28:	2800      	cmp	r0, #0
 800cf2a:	d04a      	beq.n	800cfc2 <ucdr_serialize_endian_uint32_t+0xe2>
 800cf2c:	2d01      	cmp	r5, #1
 800cf2e:	d063      	beq.n	800cff8 <ucdr_serialize_endian_uint32_t+0x118>
 800cf30:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cf34:	7033      	strb	r3, [r6, #0]
 800cf36:	2f00      	cmp	r7, #0
 800cf38:	d051      	beq.n	800cfde <ucdr_serialize_endian_uint32_t+0xfe>
 800cf3a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cf3e:	2f01      	cmp	r7, #1
 800cf40:	7073      	strb	r3, [r6, #1]
 800cf42:	d050      	beq.n	800cfe6 <ucdr_serialize_endian_uint32_t+0x106>
 800cf44:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800cf48:	2f02      	cmp	r7, #2
 800cf4a:	70b3      	strb	r3, [r6, #2]
 800cf4c:	d04f      	beq.n	800cfee <ucdr_serialize_endian_uint32_t+0x10e>
 800cf4e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cf52:	70f3      	strb	r3, [r6, #3]
 800cf54:	6923      	ldr	r3, [r4, #16]
 800cf56:	2104      	movs	r1, #4
 800cf58:	68a2      	ldr	r2, [r4, #8]
 800cf5a:	7da0      	ldrb	r0, [r4, #22]
 800cf5c:	3304      	adds	r3, #4
 800cf5e:	444a      	add	r2, r9
 800cf60:	7561      	strb	r1, [r4, #21]
 800cf62:	1bdb      	subs	r3, r3, r7
 800cf64:	f080 0001 	eor.w	r0, r0, #1
 800cf68:	60a2      	str	r2, [r4, #8]
 800cf6a:	6123      	str	r3, [r4, #16]
 800cf6c:	b003      	add	sp, #12
 800cf6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf72:	2104      	movs	r1, #4
 800cf74:	4620      	mov	r0, r4
 800cf76:	f000 ff27 	bl	800ddc8 <ucdr_check_final_buffer_behavior>
 800cf7a:	b1c8      	cbz	r0, 800cfb0 <ucdr_serialize_endian_uint32_t+0xd0>
 800cf7c:	2d01      	cmp	r5, #1
 800cf7e:	68a3      	ldr	r3, [r4, #8]
 800cf80:	d01c      	beq.n	800cfbc <ucdr_serialize_endian_uint32_t+0xdc>
 800cf82:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800cf86:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cf8a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800cf8e:	7018      	strb	r0, [r3, #0]
 800cf90:	68a3      	ldr	r3, [r4, #8]
 800cf92:	705a      	strb	r2, [r3, #1]
 800cf94:	68a3      	ldr	r3, [r4, #8]
 800cf96:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cf9a:	7099      	strb	r1, [r3, #2]
 800cf9c:	68a3      	ldr	r3, [r4, #8]
 800cf9e:	70da      	strb	r2, [r3, #3]
 800cfa0:	2104      	movs	r1, #4
 800cfa2:	68a2      	ldr	r2, [r4, #8]
 800cfa4:	6923      	ldr	r3, [r4, #16]
 800cfa6:	440a      	add	r2, r1
 800cfa8:	7561      	strb	r1, [r4, #21]
 800cfaa:	440b      	add	r3, r1
 800cfac:	60a2      	str	r2, [r4, #8]
 800cfae:	6123      	str	r3, [r4, #16]
 800cfb0:	7da0      	ldrb	r0, [r4, #22]
 800cfb2:	f080 0001 	eor.w	r0, r0, #1
 800cfb6:	b003      	add	sp, #12
 800cfb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cfbc:	9a01      	ldr	r2, [sp, #4]
 800cfbe:	601a      	str	r2, [r3, #0]
 800cfc0:	e7ee      	b.n	800cfa0 <ucdr_serialize_endian_uint32_t+0xc0>
 800cfc2:	68a2      	ldr	r2, [r4, #8]
 800cfc4:	6923      	ldr	r3, [r4, #16]
 800cfc6:	7da0      	ldrb	r0, [r4, #22]
 800cfc8:	1bd2      	subs	r2, r2, r7
 800cfca:	1bdb      	subs	r3, r3, r7
 800cfcc:	f884 8015 	strb.w	r8, [r4, #21]
 800cfd0:	f080 0001 	eor.w	r0, r0, #1
 800cfd4:	60a2      	str	r2, [r4, #8]
 800cfd6:	6123      	str	r3, [r4, #16]
 800cfd8:	b003      	add	sp, #12
 800cfda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cfde:	68a3      	ldr	r3, [r4, #8]
 800cfe0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cfe4:	701a      	strb	r2, [r3, #0]
 800cfe6:	68a3      	ldr	r3, [r4, #8]
 800cfe8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cfec:	701a      	strb	r2, [r3, #0]
 800cfee:	68a3      	ldr	r3, [r4, #8]
 800cff0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cff4:	701a      	strb	r2, [r3, #0]
 800cff6:	e7ad      	b.n	800cf54 <ucdr_serialize_endian_uint32_t+0x74>
 800cff8:	ad01      	add	r5, sp, #4
 800cffa:	463a      	mov	r2, r7
 800cffc:	4630      	mov	r0, r6
 800cffe:	4629      	mov	r1, r5
 800d000:	f00c fc5d 	bl	80198be <memcpy>
 800d004:	464a      	mov	r2, r9
 800d006:	19e9      	adds	r1, r5, r7
 800d008:	68a0      	ldr	r0, [r4, #8]
 800d00a:	f00c fc58 	bl	80198be <memcpy>
 800d00e:	e7a1      	b.n	800cf54 <ucdr_serialize_endian_uint32_t+0x74>

0800d010 <ucdr_deserialize_uint32_t>:
 800d010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d014:	4604      	mov	r4, r0
 800d016:	460d      	mov	r5, r1
 800d018:	2104      	movs	r1, #4
 800d01a:	f000 ff29 	bl	800de70 <ucdr_buffer_alignment>
 800d01e:	4601      	mov	r1, r0
 800d020:	4620      	mov	r0, r4
 800d022:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d026:	f000 ff6b 	bl	800df00 <ucdr_advance_buffer>
 800d02a:	2104      	movs	r1, #4
 800d02c:	4620      	mov	r0, r4
 800d02e:	f000 febf 	bl	800ddb0 <ucdr_check_buffer_available_for>
 800d032:	2800      	cmp	r0, #0
 800d034:	d138      	bne.n	800d0a8 <ucdr_deserialize_uint32_t+0x98>
 800d036:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800d03a:	42b7      	cmp	r7, r6
 800d03c:	d92f      	bls.n	800d09e <ucdr_deserialize_uint32_t+0x8e>
 800d03e:	6923      	ldr	r3, [r4, #16]
 800d040:	4620      	mov	r0, r4
 800d042:	60a7      	str	r7, [r4, #8]
 800d044:	1bbf      	subs	r7, r7, r6
 800d046:	443b      	add	r3, r7
 800d048:	f1c7 0904 	rsb	r9, r7, #4
 800d04c:	6123      	str	r3, [r4, #16]
 800d04e:	4649      	mov	r1, r9
 800d050:	f000 feba 	bl	800ddc8 <ucdr_check_final_buffer_behavior>
 800d054:	2800      	cmp	r0, #0
 800d056:	d046      	beq.n	800d0e6 <ucdr_deserialize_uint32_t+0xd6>
 800d058:	7d23      	ldrb	r3, [r4, #20]
 800d05a:	2b01      	cmp	r3, #1
 800d05c:	d05c      	beq.n	800d118 <ucdr_deserialize_uint32_t+0x108>
 800d05e:	78f3      	ldrb	r3, [r6, #3]
 800d060:	702b      	strb	r3, [r5, #0]
 800d062:	2f00      	cmp	r7, #0
 800d064:	d04c      	beq.n	800d100 <ucdr_deserialize_uint32_t+0xf0>
 800d066:	78b3      	ldrb	r3, [r6, #2]
 800d068:	2f01      	cmp	r7, #1
 800d06a:	706b      	strb	r3, [r5, #1]
 800d06c:	f105 0302 	add.w	r3, r5, #2
 800d070:	d04a      	beq.n	800d108 <ucdr_deserialize_uint32_t+0xf8>
 800d072:	7873      	ldrb	r3, [r6, #1]
 800d074:	2f02      	cmp	r7, #2
 800d076:	70ab      	strb	r3, [r5, #2]
 800d078:	f105 0303 	add.w	r3, r5, #3
 800d07c:	d048      	beq.n	800d110 <ucdr_deserialize_uint32_t+0x100>
 800d07e:	7833      	ldrb	r3, [r6, #0]
 800d080:	70eb      	strb	r3, [r5, #3]
 800d082:	6923      	ldr	r3, [r4, #16]
 800d084:	2104      	movs	r1, #4
 800d086:	68a2      	ldr	r2, [r4, #8]
 800d088:	3304      	adds	r3, #4
 800d08a:	7da0      	ldrb	r0, [r4, #22]
 800d08c:	444a      	add	r2, r9
 800d08e:	7561      	strb	r1, [r4, #21]
 800d090:	1bdb      	subs	r3, r3, r7
 800d092:	f080 0001 	eor.w	r0, r0, #1
 800d096:	60a2      	str	r2, [r4, #8]
 800d098:	6123      	str	r3, [r4, #16]
 800d09a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d09e:	2104      	movs	r1, #4
 800d0a0:	4620      	mov	r0, r4
 800d0a2:	f000 fe91 	bl	800ddc8 <ucdr_check_final_buffer_behavior>
 800d0a6:	b1b0      	cbz	r0, 800d0d6 <ucdr_deserialize_uint32_t+0xc6>
 800d0a8:	7d23      	ldrb	r3, [r4, #20]
 800d0aa:	2b01      	cmp	r3, #1
 800d0ac:	68a3      	ldr	r3, [r4, #8]
 800d0ae:	d017      	beq.n	800d0e0 <ucdr_deserialize_uint32_t+0xd0>
 800d0b0:	78db      	ldrb	r3, [r3, #3]
 800d0b2:	702b      	strb	r3, [r5, #0]
 800d0b4:	68a3      	ldr	r3, [r4, #8]
 800d0b6:	789b      	ldrb	r3, [r3, #2]
 800d0b8:	706b      	strb	r3, [r5, #1]
 800d0ba:	68a3      	ldr	r3, [r4, #8]
 800d0bc:	785b      	ldrb	r3, [r3, #1]
 800d0be:	70ab      	strb	r3, [r5, #2]
 800d0c0:	68a3      	ldr	r3, [r4, #8]
 800d0c2:	781b      	ldrb	r3, [r3, #0]
 800d0c4:	70eb      	strb	r3, [r5, #3]
 800d0c6:	2104      	movs	r1, #4
 800d0c8:	68a2      	ldr	r2, [r4, #8]
 800d0ca:	6923      	ldr	r3, [r4, #16]
 800d0cc:	440a      	add	r2, r1
 800d0ce:	7561      	strb	r1, [r4, #21]
 800d0d0:	440b      	add	r3, r1
 800d0d2:	60a2      	str	r2, [r4, #8]
 800d0d4:	6123      	str	r3, [r4, #16]
 800d0d6:	7da0      	ldrb	r0, [r4, #22]
 800d0d8:	f080 0001 	eor.w	r0, r0, #1
 800d0dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	602b      	str	r3, [r5, #0]
 800d0e4:	e7ef      	b.n	800d0c6 <ucdr_deserialize_uint32_t+0xb6>
 800d0e6:	68a2      	ldr	r2, [r4, #8]
 800d0e8:	6923      	ldr	r3, [r4, #16]
 800d0ea:	1bd2      	subs	r2, r2, r7
 800d0ec:	7da0      	ldrb	r0, [r4, #22]
 800d0ee:	1bdb      	subs	r3, r3, r7
 800d0f0:	f884 8015 	strb.w	r8, [r4, #21]
 800d0f4:	f080 0001 	eor.w	r0, r0, #1
 800d0f8:	60a2      	str	r2, [r4, #8]
 800d0fa:	6123      	str	r3, [r4, #16]
 800d0fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d100:	68a3      	ldr	r3, [r4, #8]
 800d102:	789b      	ldrb	r3, [r3, #2]
 800d104:	706b      	strb	r3, [r5, #1]
 800d106:	1cab      	adds	r3, r5, #2
 800d108:	68a2      	ldr	r2, [r4, #8]
 800d10a:	7852      	ldrb	r2, [r2, #1]
 800d10c:	f803 2b01 	strb.w	r2, [r3], #1
 800d110:	68a2      	ldr	r2, [r4, #8]
 800d112:	7812      	ldrb	r2, [r2, #0]
 800d114:	701a      	strb	r2, [r3, #0]
 800d116:	e7b4      	b.n	800d082 <ucdr_deserialize_uint32_t+0x72>
 800d118:	4631      	mov	r1, r6
 800d11a:	463a      	mov	r2, r7
 800d11c:	4628      	mov	r0, r5
 800d11e:	f00c fbce 	bl	80198be <memcpy>
 800d122:	464a      	mov	r2, r9
 800d124:	19e8      	adds	r0, r5, r7
 800d126:	68a1      	ldr	r1, [r4, #8]
 800d128:	f00c fbc9 	bl	80198be <memcpy>
 800d12c:	e7a9      	b.n	800d082 <ucdr_deserialize_uint32_t+0x72>
 800d12e:	bf00      	nop

0800d130 <ucdr_deserialize_endian_uint32_t>:
 800d130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d134:	4604      	mov	r4, r0
 800d136:	460e      	mov	r6, r1
 800d138:	2104      	movs	r1, #4
 800d13a:	4615      	mov	r5, r2
 800d13c:	f000 fe98 	bl	800de70 <ucdr_buffer_alignment>
 800d140:	4601      	mov	r1, r0
 800d142:	4620      	mov	r0, r4
 800d144:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d148:	f000 feda 	bl	800df00 <ucdr_advance_buffer>
 800d14c:	2104      	movs	r1, #4
 800d14e:	4620      	mov	r0, r4
 800d150:	f000 fe2e 	bl	800ddb0 <ucdr_check_buffer_available_for>
 800d154:	2800      	cmp	r0, #0
 800d156:	d13c      	bne.n	800d1d2 <ucdr_deserialize_endian_uint32_t+0xa2>
 800d158:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800d15c:	42bb      	cmp	r3, r7
 800d15e:	d933      	bls.n	800d1c8 <ucdr_deserialize_endian_uint32_t+0x98>
 800d160:	eba3 0907 	sub.w	r9, r3, r7
 800d164:	60a3      	str	r3, [r4, #8]
 800d166:	6923      	ldr	r3, [r4, #16]
 800d168:	4620      	mov	r0, r4
 800d16a:	f1c9 0a04 	rsb	sl, r9, #4
 800d16e:	444b      	add	r3, r9
 800d170:	4651      	mov	r1, sl
 800d172:	6123      	str	r3, [r4, #16]
 800d174:	f000 fe28 	bl	800ddc8 <ucdr_check_final_buffer_behavior>
 800d178:	2800      	cmp	r0, #0
 800d17a:	d048      	beq.n	800d20e <ucdr_deserialize_endian_uint32_t+0xde>
 800d17c:	2e01      	cmp	r6, #1
 800d17e:	d061      	beq.n	800d244 <ucdr_deserialize_endian_uint32_t+0x114>
 800d180:	78fb      	ldrb	r3, [r7, #3]
 800d182:	702b      	strb	r3, [r5, #0]
 800d184:	f1b9 0f00 	cmp.w	r9, #0
 800d188:	d050      	beq.n	800d22c <ucdr_deserialize_endian_uint32_t+0xfc>
 800d18a:	78bb      	ldrb	r3, [r7, #2]
 800d18c:	f1b9 0f01 	cmp.w	r9, #1
 800d190:	706b      	strb	r3, [r5, #1]
 800d192:	f105 0302 	add.w	r3, r5, #2
 800d196:	d04d      	beq.n	800d234 <ucdr_deserialize_endian_uint32_t+0x104>
 800d198:	787b      	ldrb	r3, [r7, #1]
 800d19a:	f1b9 0f02 	cmp.w	r9, #2
 800d19e:	70ab      	strb	r3, [r5, #2]
 800d1a0:	f105 0303 	add.w	r3, r5, #3
 800d1a4:	d04a      	beq.n	800d23c <ucdr_deserialize_endian_uint32_t+0x10c>
 800d1a6:	783b      	ldrb	r3, [r7, #0]
 800d1a8:	70eb      	strb	r3, [r5, #3]
 800d1aa:	6923      	ldr	r3, [r4, #16]
 800d1ac:	2104      	movs	r1, #4
 800d1ae:	68a2      	ldr	r2, [r4, #8]
 800d1b0:	3304      	adds	r3, #4
 800d1b2:	7da0      	ldrb	r0, [r4, #22]
 800d1b4:	4452      	add	r2, sl
 800d1b6:	7561      	strb	r1, [r4, #21]
 800d1b8:	eba3 0309 	sub.w	r3, r3, r9
 800d1bc:	f080 0001 	eor.w	r0, r0, #1
 800d1c0:	60a2      	str	r2, [r4, #8]
 800d1c2:	6123      	str	r3, [r4, #16]
 800d1c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1c8:	2104      	movs	r1, #4
 800d1ca:	4620      	mov	r0, r4
 800d1cc:	f000 fdfc 	bl	800ddc8 <ucdr_check_final_buffer_behavior>
 800d1d0:	b1a8      	cbz	r0, 800d1fe <ucdr_deserialize_endian_uint32_t+0xce>
 800d1d2:	2e01      	cmp	r6, #1
 800d1d4:	68a3      	ldr	r3, [r4, #8]
 800d1d6:	d017      	beq.n	800d208 <ucdr_deserialize_endian_uint32_t+0xd8>
 800d1d8:	78db      	ldrb	r3, [r3, #3]
 800d1da:	702b      	strb	r3, [r5, #0]
 800d1dc:	68a3      	ldr	r3, [r4, #8]
 800d1de:	789b      	ldrb	r3, [r3, #2]
 800d1e0:	706b      	strb	r3, [r5, #1]
 800d1e2:	68a3      	ldr	r3, [r4, #8]
 800d1e4:	785b      	ldrb	r3, [r3, #1]
 800d1e6:	70ab      	strb	r3, [r5, #2]
 800d1e8:	68a3      	ldr	r3, [r4, #8]
 800d1ea:	781b      	ldrb	r3, [r3, #0]
 800d1ec:	70eb      	strb	r3, [r5, #3]
 800d1ee:	2104      	movs	r1, #4
 800d1f0:	68a2      	ldr	r2, [r4, #8]
 800d1f2:	6923      	ldr	r3, [r4, #16]
 800d1f4:	440a      	add	r2, r1
 800d1f6:	7561      	strb	r1, [r4, #21]
 800d1f8:	440b      	add	r3, r1
 800d1fa:	60a2      	str	r2, [r4, #8]
 800d1fc:	6123      	str	r3, [r4, #16]
 800d1fe:	7da0      	ldrb	r0, [r4, #22]
 800d200:	f080 0001 	eor.w	r0, r0, #1
 800d204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	602b      	str	r3, [r5, #0]
 800d20c:	e7ef      	b.n	800d1ee <ucdr_deserialize_endian_uint32_t+0xbe>
 800d20e:	68a2      	ldr	r2, [r4, #8]
 800d210:	6923      	ldr	r3, [r4, #16]
 800d212:	eba2 0209 	sub.w	r2, r2, r9
 800d216:	7da0      	ldrb	r0, [r4, #22]
 800d218:	eba3 0309 	sub.w	r3, r3, r9
 800d21c:	f884 8015 	strb.w	r8, [r4, #21]
 800d220:	f080 0001 	eor.w	r0, r0, #1
 800d224:	60a2      	str	r2, [r4, #8]
 800d226:	6123      	str	r3, [r4, #16]
 800d228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d22c:	68a3      	ldr	r3, [r4, #8]
 800d22e:	789b      	ldrb	r3, [r3, #2]
 800d230:	706b      	strb	r3, [r5, #1]
 800d232:	1cab      	adds	r3, r5, #2
 800d234:	68a2      	ldr	r2, [r4, #8]
 800d236:	7852      	ldrb	r2, [r2, #1]
 800d238:	f803 2b01 	strb.w	r2, [r3], #1
 800d23c:	68a2      	ldr	r2, [r4, #8]
 800d23e:	7812      	ldrb	r2, [r2, #0]
 800d240:	701a      	strb	r2, [r3, #0]
 800d242:	e7b2      	b.n	800d1aa <ucdr_deserialize_endian_uint32_t+0x7a>
 800d244:	4639      	mov	r1, r7
 800d246:	464a      	mov	r2, r9
 800d248:	4628      	mov	r0, r5
 800d24a:	f00c fb38 	bl	80198be <memcpy>
 800d24e:	4652      	mov	r2, sl
 800d250:	eb05 0009 	add.w	r0, r5, r9
 800d254:	68a1      	ldr	r1, [r4, #8]
 800d256:	f00c fb32 	bl	80198be <memcpy>
 800d25a:	e7a6      	b.n	800d1aa <ucdr_deserialize_endian_uint32_t+0x7a>

0800d25c <ucdr_serialize_uint64_t>:
 800d25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d260:	4604      	mov	r4, r0
 800d262:	b082      	sub	sp, #8
 800d264:	2108      	movs	r1, #8
 800d266:	e9cd 2300 	strd	r2, r3, [sp]
 800d26a:	f000 fe01 	bl	800de70 <ucdr_buffer_alignment>
 800d26e:	4601      	mov	r1, r0
 800d270:	4620      	mov	r0, r4
 800d272:	7d67      	ldrb	r7, [r4, #21]
 800d274:	f000 fe44 	bl	800df00 <ucdr_advance_buffer>
 800d278:	2108      	movs	r1, #8
 800d27a:	4620      	mov	r0, r4
 800d27c:	f000 fd98 	bl	800ddb0 <ucdr_check_buffer_available_for>
 800d280:	2800      	cmp	r0, #0
 800d282:	d14e      	bne.n	800d322 <ucdr_serialize_uint64_t+0xc6>
 800d284:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d288:	42ab      	cmp	r3, r5
 800d28a:	d945      	bls.n	800d318 <ucdr_serialize_uint64_t+0xbc>
 800d28c:	1b5e      	subs	r6, r3, r5
 800d28e:	60a3      	str	r3, [r4, #8]
 800d290:	6923      	ldr	r3, [r4, #16]
 800d292:	4620      	mov	r0, r4
 800d294:	f1c6 0808 	rsb	r8, r6, #8
 800d298:	4433      	add	r3, r6
 800d29a:	4641      	mov	r1, r8
 800d29c:	6123      	str	r3, [r4, #16]
 800d29e:	f000 fd93 	bl	800ddc8 <ucdr_check_final_buffer_behavior>
 800d2a2:	2800      	cmp	r0, #0
 800d2a4:	d074      	beq.n	800d390 <ucdr_serialize_uint64_t+0x134>
 800d2a6:	7d23      	ldrb	r3, [r4, #20]
 800d2a8:	2b01      	cmp	r3, #1
 800d2aa:	f000 809b 	beq.w	800d3e4 <ucdr_serialize_uint64_t+0x188>
 800d2ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d2b2:	702b      	strb	r3, [r5, #0]
 800d2b4:	2e00      	cmp	r6, #0
 800d2b6:	d078      	beq.n	800d3aa <ucdr_serialize_uint64_t+0x14e>
 800d2b8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d2bc:	2e01      	cmp	r6, #1
 800d2be:	706b      	strb	r3, [r5, #1]
 800d2c0:	d077      	beq.n	800d3b2 <ucdr_serialize_uint64_t+0x156>
 800d2c2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d2c6:	2e02      	cmp	r6, #2
 800d2c8:	70ab      	strb	r3, [r5, #2]
 800d2ca:	d076      	beq.n	800d3ba <ucdr_serialize_uint64_t+0x15e>
 800d2cc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d2d0:	2e03      	cmp	r6, #3
 800d2d2:	70eb      	strb	r3, [r5, #3]
 800d2d4:	d075      	beq.n	800d3c2 <ucdr_serialize_uint64_t+0x166>
 800d2d6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d2da:	2e04      	cmp	r6, #4
 800d2dc:	712b      	strb	r3, [r5, #4]
 800d2de:	d074      	beq.n	800d3ca <ucdr_serialize_uint64_t+0x16e>
 800d2e0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800d2e4:	2e05      	cmp	r6, #5
 800d2e6:	716b      	strb	r3, [r5, #5]
 800d2e8:	d073      	beq.n	800d3d2 <ucdr_serialize_uint64_t+0x176>
 800d2ea:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800d2ee:	2e06      	cmp	r6, #6
 800d2f0:	71ab      	strb	r3, [r5, #6]
 800d2f2:	d072      	beq.n	800d3da <ucdr_serialize_uint64_t+0x17e>
 800d2f4:	f89d 3000 	ldrb.w	r3, [sp]
 800d2f8:	71eb      	strb	r3, [r5, #7]
 800d2fa:	6923      	ldr	r3, [r4, #16]
 800d2fc:	2108      	movs	r1, #8
 800d2fe:	68a2      	ldr	r2, [r4, #8]
 800d300:	3308      	adds	r3, #8
 800d302:	7da0      	ldrb	r0, [r4, #22]
 800d304:	4442      	add	r2, r8
 800d306:	7561      	strb	r1, [r4, #21]
 800d308:	1b9e      	subs	r6, r3, r6
 800d30a:	f080 0001 	eor.w	r0, r0, #1
 800d30e:	60a2      	str	r2, [r4, #8]
 800d310:	6126      	str	r6, [r4, #16]
 800d312:	b002      	add	sp, #8
 800d314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d318:	2108      	movs	r1, #8
 800d31a:	4620      	mov	r0, r4
 800d31c:	f000 fd54 	bl	800ddc8 <ucdr_check_final_buffer_behavior>
 800d320:	b350      	cbz	r0, 800d378 <ucdr_serialize_uint64_t+0x11c>
 800d322:	7d23      	ldrb	r3, [r4, #20]
 800d324:	2b01      	cmp	r3, #1
 800d326:	d02d      	beq.n	800d384 <ucdr_serialize_uint64_t+0x128>
 800d328:	68a3      	ldr	r3, [r4, #8]
 800d32a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800d32e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d332:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800d336:	7018      	strb	r0, [r3, #0]
 800d338:	68a3      	ldr	r3, [r4, #8]
 800d33a:	705a      	strb	r2, [r3, #1]
 800d33c:	68a3      	ldr	r3, [r4, #8]
 800d33e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d342:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800d346:	7099      	strb	r1, [r3, #2]
 800d348:	68a3      	ldr	r3, [r4, #8]
 800d34a:	70da      	strb	r2, [r3, #3]
 800d34c:	68a3      	ldr	r3, [r4, #8]
 800d34e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d352:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800d356:	7118      	strb	r0, [r3, #4]
 800d358:	68a3      	ldr	r3, [r4, #8]
 800d35a:	715a      	strb	r2, [r3, #5]
 800d35c:	68a3      	ldr	r3, [r4, #8]
 800d35e:	f89d 2000 	ldrb.w	r2, [sp]
 800d362:	7199      	strb	r1, [r3, #6]
 800d364:	68a3      	ldr	r3, [r4, #8]
 800d366:	71da      	strb	r2, [r3, #7]
 800d368:	2108      	movs	r1, #8
 800d36a:	68a2      	ldr	r2, [r4, #8]
 800d36c:	6923      	ldr	r3, [r4, #16]
 800d36e:	440a      	add	r2, r1
 800d370:	7561      	strb	r1, [r4, #21]
 800d372:	440b      	add	r3, r1
 800d374:	60a2      	str	r2, [r4, #8]
 800d376:	6123      	str	r3, [r4, #16]
 800d378:	7da0      	ldrb	r0, [r4, #22]
 800d37a:	f080 0001 	eor.w	r0, r0, #1
 800d37e:	b002      	add	sp, #8
 800d380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d384:	466b      	mov	r3, sp
 800d386:	68a2      	ldr	r2, [r4, #8]
 800d388:	cb03      	ldmia	r3!, {r0, r1}
 800d38a:	6010      	str	r0, [r2, #0]
 800d38c:	6051      	str	r1, [r2, #4]
 800d38e:	e7eb      	b.n	800d368 <ucdr_serialize_uint64_t+0x10c>
 800d390:	68a2      	ldr	r2, [r4, #8]
 800d392:	6923      	ldr	r3, [r4, #16]
 800d394:	7da0      	ldrb	r0, [r4, #22]
 800d396:	1b92      	subs	r2, r2, r6
 800d398:	1b9b      	subs	r3, r3, r6
 800d39a:	7567      	strb	r7, [r4, #21]
 800d39c:	f080 0001 	eor.w	r0, r0, #1
 800d3a0:	60a2      	str	r2, [r4, #8]
 800d3a2:	6123      	str	r3, [r4, #16]
 800d3a4:	b002      	add	sp, #8
 800d3a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3aa:	68a3      	ldr	r3, [r4, #8]
 800d3ac:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d3b0:	701a      	strb	r2, [r3, #0]
 800d3b2:	68a3      	ldr	r3, [r4, #8]
 800d3b4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d3b8:	701a      	strb	r2, [r3, #0]
 800d3ba:	68a3      	ldr	r3, [r4, #8]
 800d3bc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d3c0:	701a      	strb	r2, [r3, #0]
 800d3c2:	68a3      	ldr	r3, [r4, #8]
 800d3c4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d3c8:	701a      	strb	r2, [r3, #0]
 800d3ca:	68a3      	ldr	r3, [r4, #8]
 800d3cc:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d3d0:	701a      	strb	r2, [r3, #0]
 800d3d2:	68a3      	ldr	r3, [r4, #8]
 800d3d4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d3d8:	701a      	strb	r2, [r3, #0]
 800d3da:	68a3      	ldr	r3, [r4, #8]
 800d3dc:	f89d 2000 	ldrb.w	r2, [sp]
 800d3e0:	701a      	strb	r2, [r3, #0]
 800d3e2:	e78a      	b.n	800d2fa <ucdr_serialize_uint64_t+0x9e>
 800d3e4:	4628      	mov	r0, r5
 800d3e6:	466d      	mov	r5, sp
 800d3e8:	4632      	mov	r2, r6
 800d3ea:	4629      	mov	r1, r5
 800d3ec:	f00c fa67 	bl	80198be <memcpy>
 800d3f0:	4642      	mov	r2, r8
 800d3f2:	19a9      	adds	r1, r5, r6
 800d3f4:	68a0      	ldr	r0, [r4, #8]
 800d3f6:	f00c fa62 	bl	80198be <memcpy>
 800d3fa:	e77e      	b.n	800d2fa <ucdr_serialize_uint64_t+0x9e>

0800d3fc <ucdr_serialize_int16_t>:
 800d3fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d400:	460b      	mov	r3, r1
 800d402:	b082      	sub	sp, #8
 800d404:	4604      	mov	r4, r0
 800d406:	2102      	movs	r1, #2
 800d408:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d40c:	f000 fd30 	bl	800de70 <ucdr_buffer_alignment>
 800d410:	4601      	mov	r1, r0
 800d412:	4620      	mov	r0, r4
 800d414:	7d67      	ldrb	r7, [r4, #21]
 800d416:	f000 fd73 	bl	800df00 <ucdr_advance_buffer>
 800d41a:	2102      	movs	r1, #2
 800d41c:	4620      	mov	r0, r4
 800d41e:	f000 fcc7 	bl	800ddb0 <ucdr_check_buffer_available_for>
 800d422:	bb78      	cbnz	r0, 800d484 <ucdr_serialize_int16_t+0x88>
 800d424:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d428:	42ab      	cmp	r3, r5
 800d42a:	d926      	bls.n	800d47a <ucdr_serialize_int16_t+0x7e>
 800d42c:	1b5e      	subs	r6, r3, r5
 800d42e:	60a3      	str	r3, [r4, #8]
 800d430:	6923      	ldr	r3, [r4, #16]
 800d432:	4620      	mov	r0, r4
 800d434:	f1c6 0802 	rsb	r8, r6, #2
 800d438:	4433      	add	r3, r6
 800d43a:	4641      	mov	r1, r8
 800d43c:	6123      	str	r3, [r4, #16]
 800d43e:	f000 fcc3 	bl	800ddc8 <ucdr_check_final_buffer_behavior>
 800d442:	2800      	cmp	r0, #0
 800d444:	d03b      	beq.n	800d4be <ucdr_serialize_int16_t+0xc2>
 800d446:	7d23      	ldrb	r3, [r4, #20]
 800d448:	2b01      	cmp	r3, #1
 800d44a:	d04a      	beq.n	800d4e2 <ucdr_serialize_int16_t+0xe6>
 800d44c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d450:	702b      	strb	r3, [r5, #0]
 800d452:	2e00      	cmp	r6, #0
 800d454:	d040      	beq.n	800d4d8 <ucdr_serialize_int16_t+0xdc>
 800d456:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d45a:	706b      	strb	r3, [r5, #1]
 800d45c:	6923      	ldr	r3, [r4, #16]
 800d45e:	2102      	movs	r1, #2
 800d460:	68a2      	ldr	r2, [r4, #8]
 800d462:	3302      	adds	r3, #2
 800d464:	7da0      	ldrb	r0, [r4, #22]
 800d466:	4442      	add	r2, r8
 800d468:	7561      	strb	r1, [r4, #21]
 800d46a:	1b9e      	subs	r6, r3, r6
 800d46c:	f080 0001 	eor.w	r0, r0, #1
 800d470:	60a2      	str	r2, [r4, #8]
 800d472:	6126      	str	r6, [r4, #16]
 800d474:	b002      	add	sp, #8
 800d476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d47a:	2102      	movs	r1, #2
 800d47c:	4620      	mov	r0, r4
 800d47e:	f000 fca3 	bl	800ddc8 <ucdr_check_final_buffer_behavior>
 800d482:	b190      	cbz	r0, 800d4aa <ucdr_serialize_int16_t+0xae>
 800d484:	7d23      	ldrb	r3, [r4, #20]
 800d486:	2b01      	cmp	r3, #1
 800d488:	68a3      	ldr	r3, [r4, #8]
 800d48a:	d014      	beq.n	800d4b6 <ucdr_serialize_int16_t+0xba>
 800d48c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800d490:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d494:	7019      	strb	r1, [r3, #0]
 800d496:	68a3      	ldr	r3, [r4, #8]
 800d498:	705a      	strb	r2, [r3, #1]
 800d49a:	2102      	movs	r1, #2
 800d49c:	68a2      	ldr	r2, [r4, #8]
 800d49e:	6923      	ldr	r3, [r4, #16]
 800d4a0:	440a      	add	r2, r1
 800d4a2:	7561      	strb	r1, [r4, #21]
 800d4a4:	440b      	add	r3, r1
 800d4a6:	60a2      	str	r2, [r4, #8]
 800d4a8:	6123      	str	r3, [r4, #16]
 800d4aa:	7da0      	ldrb	r0, [r4, #22]
 800d4ac:	f080 0001 	eor.w	r0, r0, #1
 800d4b0:	b002      	add	sp, #8
 800d4b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4b6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d4ba:	801a      	strh	r2, [r3, #0]
 800d4bc:	e7ed      	b.n	800d49a <ucdr_serialize_int16_t+0x9e>
 800d4be:	68a2      	ldr	r2, [r4, #8]
 800d4c0:	6923      	ldr	r3, [r4, #16]
 800d4c2:	7da0      	ldrb	r0, [r4, #22]
 800d4c4:	1b92      	subs	r2, r2, r6
 800d4c6:	1b9b      	subs	r3, r3, r6
 800d4c8:	7567      	strb	r7, [r4, #21]
 800d4ca:	f080 0001 	eor.w	r0, r0, #1
 800d4ce:	60a2      	str	r2, [r4, #8]
 800d4d0:	6123      	str	r3, [r4, #16]
 800d4d2:	b002      	add	sp, #8
 800d4d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4d8:	68a3      	ldr	r3, [r4, #8]
 800d4da:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d4de:	701a      	strb	r2, [r3, #0]
 800d4e0:	e7bc      	b.n	800d45c <ucdr_serialize_int16_t+0x60>
 800d4e2:	4628      	mov	r0, r5
 800d4e4:	f10d 0506 	add.w	r5, sp, #6
 800d4e8:	4632      	mov	r2, r6
 800d4ea:	4629      	mov	r1, r5
 800d4ec:	f00c f9e7 	bl	80198be <memcpy>
 800d4f0:	4642      	mov	r2, r8
 800d4f2:	19a9      	adds	r1, r5, r6
 800d4f4:	68a0      	ldr	r0, [r4, #8]
 800d4f6:	f00c f9e2 	bl	80198be <memcpy>
 800d4fa:	e7af      	b.n	800d45c <ucdr_serialize_int16_t+0x60>

0800d4fc <ucdr_deserialize_int16_t>:
 800d4fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d500:	4604      	mov	r4, r0
 800d502:	460d      	mov	r5, r1
 800d504:	2102      	movs	r1, #2
 800d506:	f000 fcb3 	bl	800de70 <ucdr_buffer_alignment>
 800d50a:	4601      	mov	r1, r0
 800d50c:	4620      	mov	r0, r4
 800d50e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d512:	f000 fcf5 	bl	800df00 <ucdr_advance_buffer>
 800d516:	2102      	movs	r1, #2
 800d518:	4620      	mov	r0, r4
 800d51a:	f000 fc49 	bl	800ddb0 <ucdr_check_buffer_available_for>
 800d51e:	bb60      	cbnz	r0, 800d57a <ucdr_deserialize_int16_t+0x7e>
 800d520:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d524:	42be      	cmp	r6, r7
 800d526:	d923      	bls.n	800d570 <ucdr_deserialize_int16_t+0x74>
 800d528:	6923      	ldr	r3, [r4, #16]
 800d52a:	4620      	mov	r0, r4
 800d52c:	60a6      	str	r6, [r4, #8]
 800d52e:	1bf6      	subs	r6, r6, r7
 800d530:	4433      	add	r3, r6
 800d532:	f1c6 0902 	rsb	r9, r6, #2
 800d536:	6123      	str	r3, [r4, #16]
 800d538:	4649      	mov	r1, r9
 800d53a:	f000 fc45 	bl	800ddc8 <ucdr_check_final_buffer_behavior>
 800d53e:	2800      	cmp	r0, #0
 800d540:	d034      	beq.n	800d5ac <ucdr_deserialize_int16_t+0xb0>
 800d542:	7d23      	ldrb	r3, [r4, #20]
 800d544:	2b01      	cmp	r3, #1
 800d546:	d042      	beq.n	800d5ce <ucdr_deserialize_int16_t+0xd2>
 800d548:	787b      	ldrb	r3, [r7, #1]
 800d54a:	702b      	strb	r3, [r5, #0]
 800d54c:	2e00      	cmp	r6, #0
 800d54e:	d03a      	beq.n	800d5c6 <ucdr_deserialize_int16_t+0xca>
 800d550:	783b      	ldrb	r3, [r7, #0]
 800d552:	706b      	strb	r3, [r5, #1]
 800d554:	6923      	ldr	r3, [r4, #16]
 800d556:	2102      	movs	r1, #2
 800d558:	68a2      	ldr	r2, [r4, #8]
 800d55a:	3302      	adds	r3, #2
 800d55c:	7da0      	ldrb	r0, [r4, #22]
 800d55e:	444a      	add	r2, r9
 800d560:	7561      	strb	r1, [r4, #21]
 800d562:	1b9b      	subs	r3, r3, r6
 800d564:	f080 0001 	eor.w	r0, r0, #1
 800d568:	60a2      	str	r2, [r4, #8]
 800d56a:	6123      	str	r3, [r4, #16]
 800d56c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d570:	2102      	movs	r1, #2
 800d572:	4620      	mov	r0, r4
 800d574:	f000 fc28 	bl	800ddc8 <ucdr_check_final_buffer_behavior>
 800d578:	b180      	cbz	r0, 800d59c <ucdr_deserialize_int16_t+0xa0>
 800d57a:	7d23      	ldrb	r3, [r4, #20]
 800d57c:	2b01      	cmp	r3, #1
 800d57e:	68a3      	ldr	r3, [r4, #8]
 800d580:	d011      	beq.n	800d5a6 <ucdr_deserialize_int16_t+0xaa>
 800d582:	785b      	ldrb	r3, [r3, #1]
 800d584:	702b      	strb	r3, [r5, #0]
 800d586:	68a3      	ldr	r3, [r4, #8]
 800d588:	781b      	ldrb	r3, [r3, #0]
 800d58a:	706b      	strb	r3, [r5, #1]
 800d58c:	2102      	movs	r1, #2
 800d58e:	68a2      	ldr	r2, [r4, #8]
 800d590:	6923      	ldr	r3, [r4, #16]
 800d592:	440a      	add	r2, r1
 800d594:	7561      	strb	r1, [r4, #21]
 800d596:	440b      	add	r3, r1
 800d598:	60a2      	str	r2, [r4, #8]
 800d59a:	6123      	str	r3, [r4, #16]
 800d59c:	7da0      	ldrb	r0, [r4, #22]
 800d59e:	f080 0001 	eor.w	r0, r0, #1
 800d5a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5a6:	881b      	ldrh	r3, [r3, #0]
 800d5a8:	802b      	strh	r3, [r5, #0]
 800d5aa:	e7ef      	b.n	800d58c <ucdr_deserialize_int16_t+0x90>
 800d5ac:	68a2      	ldr	r2, [r4, #8]
 800d5ae:	6923      	ldr	r3, [r4, #16]
 800d5b0:	1b92      	subs	r2, r2, r6
 800d5b2:	7da0      	ldrb	r0, [r4, #22]
 800d5b4:	1b9b      	subs	r3, r3, r6
 800d5b6:	f884 8015 	strb.w	r8, [r4, #21]
 800d5ba:	f080 0001 	eor.w	r0, r0, #1
 800d5be:	60a2      	str	r2, [r4, #8]
 800d5c0:	6123      	str	r3, [r4, #16]
 800d5c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5c6:	68a3      	ldr	r3, [r4, #8]
 800d5c8:	781b      	ldrb	r3, [r3, #0]
 800d5ca:	706b      	strb	r3, [r5, #1]
 800d5cc:	e7c2      	b.n	800d554 <ucdr_deserialize_int16_t+0x58>
 800d5ce:	4639      	mov	r1, r7
 800d5d0:	4632      	mov	r2, r6
 800d5d2:	4628      	mov	r0, r5
 800d5d4:	f00c f973 	bl	80198be <memcpy>
 800d5d8:	464a      	mov	r2, r9
 800d5da:	19a8      	adds	r0, r5, r6
 800d5dc:	68a1      	ldr	r1, [r4, #8]
 800d5de:	f00c f96e 	bl	80198be <memcpy>
 800d5e2:	e7b7      	b.n	800d554 <ucdr_deserialize_int16_t+0x58>

0800d5e4 <ucdr_serialize_int32_t>:
 800d5e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5e8:	b082      	sub	sp, #8
 800d5ea:	4604      	mov	r4, r0
 800d5ec:	9101      	str	r1, [sp, #4]
 800d5ee:	2104      	movs	r1, #4
 800d5f0:	f000 fc3e 	bl	800de70 <ucdr_buffer_alignment>
 800d5f4:	4601      	mov	r1, r0
 800d5f6:	4620      	mov	r0, r4
 800d5f8:	7d67      	ldrb	r7, [r4, #21]
 800d5fa:	f000 fc81 	bl	800df00 <ucdr_advance_buffer>
 800d5fe:	2104      	movs	r1, #4
 800d600:	4620      	mov	r0, r4
 800d602:	f000 fbd5 	bl	800ddb0 <ucdr_check_buffer_available_for>
 800d606:	2800      	cmp	r0, #0
 800d608:	d139      	bne.n	800d67e <ucdr_serialize_int32_t+0x9a>
 800d60a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d60e:	42ab      	cmp	r3, r5
 800d610:	d930      	bls.n	800d674 <ucdr_serialize_int32_t+0x90>
 800d612:	1b5e      	subs	r6, r3, r5
 800d614:	60a3      	str	r3, [r4, #8]
 800d616:	6923      	ldr	r3, [r4, #16]
 800d618:	4620      	mov	r0, r4
 800d61a:	f1c6 0804 	rsb	r8, r6, #4
 800d61e:	4433      	add	r3, r6
 800d620:	4641      	mov	r1, r8
 800d622:	6123      	str	r3, [r4, #16]
 800d624:	f000 fbd0 	bl	800ddc8 <ucdr_check_final_buffer_behavior>
 800d628:	2800      	cmp	r0, #0
 800d62a:	d04c      	beq.n	800d6c6 <ucdr_serialize_int32_t+0xe2>
 800d62c:	7d23      	ldrb	r3, [r4, #20]
 800d62e:	2b01      	cmp	r3, #1
 800d630:	d063      	beq.n	800d6fa <ucdr_serialize_int32_t+0x116>
 800d632:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d636:	702b      	strb	r3, [r5, #0]
 800d638:	2e00      	cmp	r6, #0
 800d63a:	d051      	beq.n	800d6e0 <ucdr_serialize_int32_t+0xfc>
 800d63c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d640:	2e01      	cmp	r6, #1
 800d642:	706b      	strb	r3, [r5, #1]
 800d644:	d050      	beq.n	800d6e8 <ucdr_serialize_int32_t+0x104>
 800d646:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d64a:	2e02      	cmp	r6, #2
 800d64c:	70ab      	strb	r3, [r5, #2]
 800d64e:	d04f      	beq.n	800d6f0 <ucdr_serialize_int32_t+0x10c>
 800d650:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d654:	70eb      	strb	r3, [r5, #3]
 800d656:	6923      	ldr	r3, [r4, #16]
 800d658:	2104      	movs	r1, #4
 800d65a:	68a2      	ldr	r2, [r4, #8]
 800d65c:	3304      	adds	r3, #4
 800d65e:	7da0      	ldrb	r0, [r4, #22]
 800d660:	4442      	add	r2, r8
 800d662:	7561      	strb	r1, [r4, #21]
 800d664:	1b9e      	subs	r6, r3, r6
 800d666:	f080 0001 	eor.w	r0, r0, #1
 800d66a:	60a2      	str	r2, [r4, #8]
 800d66c:	6126      	str	r6, [r4, #16]
 800d66e:	b002      	add	sp, #8
 800d670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d674:	2104      	movs	r1, #4
 800d676:	4620      	mov	r0, r4
 800d678:	f000 fba6 	bl	800ddc8 <ucdr_check_final_buffer_behavior>
 800d67c:	b1d0      	cbz	r0, 800d6b4 <ucdr_serialize_int32_t+0xd0>
 800d67e:	7d23      	ldrb	r3, [r4, #20]
 800d680:	2b01      	cmp	r3, #1
 800d682:	68a3      	ldr	r3, [r4, #8]
 800d684:	d01c      	beq.n	800d6c0 <ucdr_serialize_int32_t+0xdc>
 800d686:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800d68a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d68e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800d692:	7018      	strb	r0, [r3, #0]
 800d694:	68a3      	ldr	r3, [r4, #8]
 800d696:	705a      	strb	r2, [r3, #1]
 800d698:	68a3      	ldr	r3, [r4, #8]
 800d69a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d69e:	7099      	strb	r1, [r3, #2]
 800d6a0:	68a3      	ldr	r3, [r4, #8]
 800d6a2:	70da      	strb	r2, [r3, #3]
 800d6a4:	2104      	movs	r1, #4
 800d6a6:	68a2      	ldr	r2, [r4, #8]
 800d6a8:	6923      	ldr	r3, [r4, #16]
 800d6aa:	440a      	add	r2, r1
 800d6ac:	7561      	strb	r1, [r4, #21]
 800d6ae:	440b      	add	r3, r1
 800d6b0:	60a2      	str	r2, [r4, #8]
 800d6b2:	6123      	str	r3, [r4, #16]
 800d6b4:	7da0      	ldrb	r0, [r4, #22]
 800d6b6:	f080 0001 	eor.w	r0, r0, #1
 800d6ba:	b002      	add	sp, #8
 800d6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6c0:	9a01      	ldr	r2, [sp, #4]
 800d6c2:	601a      	str	r2, [r3, #0]
 800d6c4:	e7ee      	b.n	800d6a4 <ucdr_serialize_int32_t+0xc0>
 800d6c6:	68a2      	ldr	r2, [r4, #8]
 800d6c8:	6923      	ldr	r3, [r4, #16]
 800d6ca:	7da0      	ldrb	r0, [r4, #22]
 800d6cc:	1b92      	subs	r2, r2, r6
 800d6ce:	1b9b      	subs	r3, r3, r6
 800d6d0:	7567      	strb	r7, [r4, #21]
 800d6d2:	f080 0001 	eor.w	r0, r0, #1
 800d6d6:	60a2      	str	r2, [r4, #8]
 800d6d8:	6123      	str	r3, [r4, #16]
 800d6da:	b002      	add	sp, #8
 800d6dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6e0:	68a3      	ldr	r3, [r4, #8]
 800d6e2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d6e6:	701a      	strb	r2, [r3, #0]
 800d6e8:	68a3      	ldr	r3, [r4, #8]
 800d6ea:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d6ee:	701a      	strb	r2, [r3, #0]
 800d6f0:	68a3      	ldr	r3, [r4, #8]
 800d6f2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d6f6:	701a      	strb	r2, [r3, #0]
 800d6f8:	e7ad      	b.n	800d656 <ucdr_serialize_int32_t+0x72>
 800d6fa:	4628      	mov	r0, r5
 800d6fc:	ad01      	add	r5, sp, #4
 800d6fe:	4632      	mov	r2, r6
 800d700:	4629      	mov	r1, r5
 800d702:	f00c f8dc 	bl	80198be <memcpy>
 800d706:	4642      	mov	r2, r8
 800d708:	19a9      	adds	r1, r5, r6
 800d70a:	68a0      	ldr	r0, [r4, #8]
 800d70c:	f00c f8d7 	bl	80198be <memcpy>
 800d710:	e7a1      	b.n	800d656 <ucdr_serialize_int32_t+0x72>
 800d712:	bf00      	nop

0800d714 <ucdr_deserialize_int32_t>:
 800d714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d718:	4604      	mov	r4, r0
 800d71a:	460d      	mov	r5, r1
 800d71c:	2104      	movs	r1, #4
 800d71e:	f000 fba7 	bl	800de70 <ucdr_buffer_alignment>
 800d722:	4601      	mov	r1, r0
 800d724:	4620      	mov	r0, r4
 800d726:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d72a:	f000 fbe9 	bl	800df00 <ucdr_advance_buffer>
 800d72e:	2104      	movs	r1, #4
 800d730:	4620      	mov	r0, r4
 800d732:	f000 fb3d 	bl	800ddb0 <ucdr_check_buffer_available_for>
 800d736:	2800      	cmp	r0, #0
 800d738:	d138      	bne.n	800d7ac <ucdr_deserialize_int32_t+0x98>
 800d73a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800d73e:	42b7      	cmp	r7, r6
 800d740:	d92f      	bls.n	800d7a2 <ucdr_deserialize_int32_t+0x8e>
 800d742:	6923      	ldr	r3, [r4, #16]
 800d744:	4620      	mov	r0, r4
 800d746:	60a7      	str	r7, [r4, #8]
 800d748:	1bbf      	subs	r7, r7, r6
 800d74a:	443b      	add	r3, r7
 800d74c:	f1c7 0904 	rsb	r9, r7, #4
 800d750:	6123      	str	r3, [r4, #16]
 800d752:	4649      	mov	r1, r9
 800d754:	f000 fb38 	bl	800ddc8 <ucdr_check_final_buffer_behavior>
 800d758:	2800      	cmp	r0, #0
 800d75a:	d046      	beq.n	800d7ea <ucdr_deserialize_int32_t+0xd6>
 800d75c:	7d23      	ldrb	r3, [r4, #20]
 800d75e:	2b01      	cmp	r3, #1
 800d760:	d05c      	beq.n	800d81c <ucdr_deserialize_int32_t+0x108>
 800d762:	78f3      	ldrb	r3, [r6, #3]
 800d764:	702b      	strb	r3, [r5, #0]
 800d766:	2f00      	cmp	r7, #0
 800d768:	d04c      	beq.n	800d804 <ucdr_deserialize_int32_t+0xf0>
 800d76a:	78b3      	ldrb	r3, [r6, #2]
 800d76c:	2f01      	cmp	r7, #1
 800d76e:	706b      	strb	r3, [r5, #1]
 800d770:	f105 0302 	add.w	r3, r5, #2
 800d774:	d04a      	beq.n	800d80c <ucdr_deserialize_int32_t+0xf8>
 800d776:	7873      	ldrb	r3, [r6, #1]
 800d778:	2f02      	cmp	r7, #2
 800d77a:	70ab      	strb	r3, [r5, #2]
 800d77c:	f105 0303 	add.w	r3, r5, #3
 800d780:	d048      	beq.n	800d814 <ucdr_deserialize_int32_t+0x100>
 800d782:	7833      	ldrb	r3, [r6, #0]
 800d784:	70eb      	strb	r3, [r5, #3]
 800d786:	6923      	ldr	r3, [r4, #16]
 800d788:	2104      	movs	r1, #4
 800d78a:	68a2      	ldr	r2, [r4, #8]
 800d78c:	3304      	adds	r3, #4
 800d78e:	7da0      	ldrb	r0, [r4, #22]
 800d790:	444a      	add	r2, r9
 800d792:	7561      	strb	r1, [r4, #21]
 800d794:	1bdb      	subs	r3, r3, r7
 800d796:	f080 0001 	eor.w	r0, r0, #1
 800d79a:	60a2      	str	r2, [r4, #8]
 800d79c:	6123      	str	r3, [r4, #16]
 800d79e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7a2:	2104      	movs	r1, #4
 800d7a4:	4620      	mov	r0, r4
 800d7a6:	f000 fb0f 	bl	800ddc8 <ucdr_check_final_buffer_behavior>
 800d7aa:	b1b0      	cbz	r0, 800d7da <ucdr_deserialize_int32_t+0xc6>
 800d7ac:	7d23      	ldrb	r3, [r4, #20]
 800d7ae:	2b01      	cmp	r3, #1
 800d7b0:	68a3      	ldr	r3, [r4, #8]
 800d7b2:	d017      	beq.n	800d7e4 <ucdr_deserialize_int32_t+0xd0>
 800d7b4:	78db      	ldrb	r3, [r3, #3]
 800d7b6:	702b      	strb	r3, [r5, #0]
 800d7b8:	68a3      	ldr	r3, [r4, #8]
 800d7ba:	789b      	ldrb	r3, [r3, #2]
 800d7bc:	706b      	strb	r3, [r5, #1]
 800d7be:	68a3      	ldr	r3, [r4, #8]
 800d7c0:	785b      	ldrb	r3, [r3, #1]
 800d7c2:	70ab      	strb	r3, [r5, #2]
 800d7c4:	68a3      	ldr	r3, [r4, #8]
 800d7c6:	781b      	ldrb	r3, [r3, #0]
 800d7c8:	70eb      	strb	r3, [r5, #3]
 800d7ca:	2104      	movs	r1, #4
 800d7cc:	68a2      	ldr	r2, [r4, #8]
 800d7ce:	6923      	ldr	r3, [r4, #16]
 800d7d0:	440a      	add	r2, r1
 800d7d2:	7561      	strb	r1, [r4, #21]
 800d7d4:	440b      	add	r3, r1
 800d7d6:	60a2      	str	r2, [r4, #8]
 800d7d8:	6123      	str	r3, [r4, #16]
 800d7da:	7da0      	ldrb	r0, [r4, #22]
 800d7dc:	f080 0001 	eor.w	r0, r0, #1
 800d7e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	602b      	str	r3, [r5, #0]
 800d7e8:	e7ef      	b.n	800d7ca <ucdr_deserialize_int32_t+0xb6>
 800d7ea:	68a2      	ldr	r2, [r4, #8]
 800d7ec:	6923      	ldr	r3, [r4, #16]
 800d7ee:	1bd2      	subs	r2, r2, r7
 800d7f0:	7da0      	ldrb	r0, [r4, #22]
 800d7f2:	1bdb      	subs	r3, r3, r7
 800d7f4:	f884 8015 	strb.w	r8, [r4, #21]
 800d7f8:	f080 0001 	eor.w	r0, r0, #1
 800d7fc:	60a2      	str	r2, [r4, #8]
 800d7fe:	6123      	str	r3, [r4, #16]
 800d800:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d804:	68a3      	ldr	r3, [r4, #8]
 800d806:	789b      	ldrb	r3, [r3, #2]
 800d808:	706b      	strb	r3, [r5, #1]
 800d80a:	1cab      	adds	r3, r5, #2
 800d80c:	68a2      	ldr	r2, [r4, #8]
 800d80e:	7852      	ldrb	r2, [r2, #1]
 800d810:	f803 2b01 	strb.w	r2, [r3], #1
 800d814:	68a2      	ldr	r2, [r4, #8]
 800d816:	7812      	ldrb	r2, [r2, #0]
 800d818:	701a      	strb	r2, [r3, #0]
 800d81a:	e7b4      	b.n	800d786 <ucdr_deserialize_int32_t+0x72>
 800d81c:	4631      	mov	r1, r6
 800d81e:	463a      	mov	r2, r7
 800d820:	4628      	mov	r0, r5
 800d822:	f00c f84c 	bl	80198be <memcpy>
 800d826:	464a      	mov	r2, r9
 800d828:	19e8      	adds	r0, r5, r7
 800d82a:	68a1      	ldr	r1, [r4, #8]
 800d82c:	f00c f847 	bl	80198be <memcpy>
 800d830:	e7a9      	b.n	800d786 <ucdr_deserialize_int32_t+0x72>
 800d832:	bf00      	nop

0800d834 <ucdr_serialize_int64_t>:
 800d834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d838:	4604      	mov	r4, r0
 800d83a:	b082      	sub	sp, #8
 800d83c:	2108      	movs	r1, #8
 800d83e:	e9cd 2300 	strd	r2, r3, [sp]
 800d842:	f000 fb15 	bl	800de70 <ucdr_buffer_alignment>
 800d846:	4601      	mov	r1, r0
 800d848:	4620      	mov	r0, r4
 800d84a:	7d67      	ldrb	r7, [r4, #21]
 800d84c:	f000 fb58 	bl	800df00 <ucdr_advance_buffer>
 800d850:	2108      	movs	r1, #8
 800d852:	4620      	mov	r0, r4
 800d854:	f000 faac 	bl	800ddb0 <ucdr_check_buffer_available_for>
 800d858:	2800      	cmp	r0, #0
 800d85a:	d14e      	bne.n	800d8fa <ucdr_serialize_int64_t+0xc6>
 800d85c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d860:	42ab      	cmp	r3, r5
 800d862:	d945      	bls.n	800d8f0 <ucdr_serialize_int64_t+0xbc>
 800d864:	1b5e      	subs	r6, r3, r5
 800d866:	60a3      	str	r3, [r4, #8]
 800d868:	6923      	ldr	r3, [r4, #16]
 800d86a:	4620      	mov	r0, r4
 800d86c:	f1c6 0808 	rsb	r8, r6, #8
 800d870:	4433      	add	r3, r6
 800d872:	4641      	mov	r1, r8
 800d874:	6123      	str	r3, [r4, #16]
 800d876:	f000 faa7 	bl	800ddc8 <ucdr_check_final_buffer_behavior>
 800d87a:	2800      	cmp	r0, #0
 800d87c:	d074      	beq.n	800d968 <ucdr_serialize_int64_t+0x134>
 800d87e:	7d23      	ldrb	r3, [r4, #20]
 800d880:	2b01      	cmp	r3, #1
 800d882:	f000 809b 	beq.w	800d9bc <ucdr_serialize_int64_t+0x188>
 800d886:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d88a:	702b      	strb	r3, [r5, #0]
 800d88c:	2e00      	cmp	r6, #0
 800d88e:	d078      	beq.n	800d982 <ucdr_serialize_int64_t+0x14e>
 800d890:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d894:	2e01      	cmp	r6, #1
 800d896:	706b      	strb	r3, [r5, #1]
 800d898:	d077      	beq.n	800d98a <ucdr_serialize_int64_t+0x156>
 800d89a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d89e:	2e02      	cmp	r6, #2
 800d8a0:	70ab      	strb	r3, [r5, #2]
 800d8a2:	d076      	beq.n	800d992 <ucdr_serialize_int64_t+0x15e>
 800d8a4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d8a8:	2e03      	cmp	r6, #3
 800d8aa:	70eb      	strb	r3, [r5, #3]
 800d8ac:	d075      	beq.n	800d99a <ucdr_serialize_int64_t+0x166>
 800d8ae:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d8b2:	2e04      	cmp	r6, #4
 800d8b4:	712b      	strb	r3, [r5, #4]
 800d8b6:	d074      	beq.n	800d9a2 <ucdr_serialize_int64_t+0x16e>
 800d8b8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800d8bc:	2e05      	cmp	r6, #5
 800d8be:	716b      	strb	r3, [r5, #5]
 800d8c0:	d073      	beq.n	800d9aa <ucdr_serialize_int64_t+0x176>
 800d8c2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800d8c6:	2e06      	cmp	r6, #6
 800d8c8:	71ab      	strb	r3, [r5, #6]
 800d8ca:	d072      	beq.n	800d9b2 <ucdr_serialize_int64_t+0x17e>
 800d8cc:	f89d 3000 	ldrb.w	r3, [sp]
 800d8d0:	71eb      	strb	r3, [r5, #7]
 800d8d2:	6923      	ldr	r3, [r4, #16]
 800d8d4:	2108      	movs	r1, #8
 800d8d6:	68a2      	ldr	r2, [r4, #8]
 800d8d8:	3308      	adds	r3, #8
 800d8da:	7da0      	ldrb	r0, [r4, #22]
 800d8dc:	4442      	add	r2, r8
 800d8de:	7561      	strb	r1, [r4, #21]
 800d8e0:	1b9e      	subs	r6, r3, r6
 800d8e2:	f080 0001 	eor.w	r0, r0, #1
 800d8e6:	60a2      	str	r2, [r4, #8]
 800d8e8:	6126      	str	r6, [r4, #16]
 800d8ea:	b002      	add	sp, #8
 800d8ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8f0:	2108      	movs	r1, #8
 800d8f2:	4620      	mov	r0, r4
 800d8f4:	f000 fa68 	bl	800ddc8 <ucdr_check_final_buffer_behavior>
 800d8f8:	b350      	cbz	r0, 800d950 <ucdr_serialize_int64_t+0x11c>
 800d8fa:	7d23      	ldrb	r3, [r4, #20]
 800d8fc:	2b01      	cmp	r3, #1
 800d8fe:	d02d      	beq.n	800d95c <ucdr_serialize_int64_t+0x128>
 800d900:	68a3      	ldr	r3, [r4, #8]
 800d902:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800d906:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d90a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800d90e:	7018      	strb	r0, [r3, #0]
 800d910:	68a3      	ldr	r3, [r4, #8]
 800d912:	705a      	strb	r2, [r3, #1]
 800d914:	68a3      	ldr	r3, [r4, #8]
 800d916:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d91a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800d91e:	7099      	strb	r1, [r3, #2]
 800d920:	68a3      	ldr	r3, [r4, #8]
 800d922:	70da      	strb	r2, [r3, #3]
 800d924:	68a3      	ldr	r3, [r4, #8]
 800d926:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d92a:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800d92e:	7118      	strb	r0, [r3, #4]
 800d930:	68a3      	ldr	r3, [r4, #8]
 800d932:	715a      	strb	r2, [r3, #5]
 800d934:	68a3      	ldr	r3, [r4, #8]
 800d936:	f89d 2000 	ldrb.w	r2, [sp]
 800d93a:	7199      	strb	r1, [r3, #6]
 800d93c:	68a3      	ldr	r3, [r4, #8]
 800d93e:	71da      	strb	r2, [r3, #7]
 800d940:	2108      	movs	r1, #8
 800d942:	68a2      	ldr	r2, [r4, #8]
 800d944:	6923      	ldr	r3, [r4, #16]
 800d946:	440a      	add	r2, r1
 800d948:	7561      	strb	r1, [r4, #21]
 800d94a:	440b      	add	r3, r1
 800d94c:	60a2      	str	r2, [r4, #8]
 800d94e:	6123      	str	r3, [r4, #16]
 800d950:	7da0      	ldrb	r0, [r4, #22]
 800d952:	f080 0001 	eor.w	r0, r0, #1
 800d956:	b002      	add	sp, #8
 800d958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d95c:	466b      	mov	r3, sp
 800d95e:	68a2      	ldr	r2, [r4, #8]
 800d960:	cb03      	ldmia	r3!, {r0, r1}
 800d962:	6010      	str	r0, [r2, #0]
 800d964:	6051      	str	r1, [r2, #4]
 800d966:	e7eb      	b.n	800d940 <ucdr_serialize_int64_t+0x10c>
 800d968:	68a2      	ldr	r2, [r4, #8]
 800d96a:	6923      	ldr	r3, [r4, #16]
 800d96c:	7da0      	ldrb	r0, [r4, #22]
 800d96e:	1b92      	subs	r2, r2, r6
 800d970:	1b9b      	subs	r3, r3, r6
 800d972:	7567      	strb	r7, [r4, #21]
 800d974:	f080 0001 	eor.w	r0, r0, #1
 800d978:	60a2      	str	r2, [r4, #8]
 800d97a:	6123      	str	r3, [r4, #16]
 800d97c:	b002      	add	sp, #8
 800d97e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d982:	68a3      	ldr	r3, [r4, #8]
 800d984:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d988:	701a      	strb	r2, [r3, #0]
 800d98a:	68a3      	ldr	r3, [r4, #8]
 800d98c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d990:	701a      	strb	r2, [r3, #0]
 800d992:	68a3      	ldr	r3, [r4, #8]
 800d994:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d998:	701a      	strb	r2, [r3, #0]
 800d99a:	68a3      	ldr	r3, [r4, #8]
 800d99c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d9a0:	701a      	strb	r2, [r3, #0]
 800d9a2:	68a3      	ldr	r3, [r4, #8]
 800d9a4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d9a8:	701a      	strb	r2, [r3, #0]
 800d9aa:	68a3      	ldr	r3, [r4, #8]
 800d9ac:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d9b0:	701a      	strb	r2, [r3, #0]
 800d9b2:	68a3      	ldr	r3, [r4, #8]
 800d9b4:	f89d 2000 	ldrb.w	r2, [sp]
 800d9b8:	701a      	strb	r2, [r3, #0]
 800d9ba:	e78a      	b.n	800d8d2 <ucdr_serialize_int64_t+0x9e>
 800d9bc:	4628      	mov	r0, r5
 800d9be:	466d      	mov	r5, sp
 800d9c0:	4632      	mov	r2, r6
 800d9c2:	4629      	mov	r1, r5
 800d9c4:	f00b ff7b 	bl	80198be <memcpy>
 800d9c8:	4642      	mov	r2, r8
 800d9ca:	19a9      	adds	r1, r5, r6
 800d9cc:	68a0      	ldr	r0, [r4, #8]
 800d9ce:	f00b ff76 	bl	80198be <memcpy>
 800d9d2:	e77e      	b.n	800d8d2 <ucdr_serialize_int64_t+0x9e>

0800d9d4 <ucdr_deserialize_int64_t>:
 800d9d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9d8:	4604      	mov	r4, r0
 800d9da:	460d      	mov	r5, r1
 800d9dc:	2108      	movs	r1, #8
 800d9de:	f000 fa47 	bl	800de70 <ucdr_buffer_alignment>
 800d9e2:	4601      	mov	r1, r0
 800d9e4:	4620      	mov	r0, r4
 800d9e6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d9ea:	f000 fa89 	bl	800df00 <ucdr_advance_buffer>
 800d9ee:	2108      	movs	r1, #8
 800d9f0:	4620      	mov	r0, r4
 800d9f2:	f000 f9dd 	bl	800ddb0 <ucdr_check_buffer_available_for>
 800d9f6:	2800      	cmp	r0, #0
 800d9f8:	d151      	bne.n	800da9e <ucdr_deserialize_int64_t+0xca>
 800d9fa:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d9fe:	42be      	cmp	r6, r7
 800da00:	d948      	bls.n	800da94 <ucdr_deserialize_int64_t+0xc0>
 800da02:	6923      	ldr	r3, [r4, #16]
 800da04:	4620      	mov	r0, r4
 800da06:	60a6      	str	r6, [r4, #8]
 800da08:	1bf6      	subs	r6, r6, r7
 800da0a:	4433      	add	r3, r6
 800da0c:	f1c6 0908 	rsb	r9, r6, #8
 800da10:	6123      	str	r3, [r4, #16]
 800da12:	4649      	mov	r1, r9
 800da14:	f000 f9d8 	bl	800ddc8 <ucdr_check_final_buffer_behavior>
 800da18:	2800      	cmp	r0, #0
 800da1a:	d06d      	beq.n	800daf8 <ucdr_deserialize_int64_t+0x124>
 800da1c:	7d23      	ldrb	r3, [r4, #20]
 800da1e:	2b01      	cmp	r3, #1
 800da20:	f000 8093 	beq.w	800db4a <ucdr_deserialize_int64_t+0x176>
 800da24:	79fb      	ldrb	r3, [r7, #7]
 800da26:	702b      	strb	r3, [r5, #0]
 800da28:	2e00      	cmp	r6, #0
 800da2a:	d072      	beq.n	800db12 <ucdr_deserialize_int64_t+0x13e>
 800da2c:	79bb      	ldrb	r3, [r7, #6]
 800da2e:	2e01      	cmp	r6, #1
 800da30:	706b      	strb	r3, [r5, #1]
 800da32:	f105 0302 	add.w	r3, r5, #2
 800da36:	d070      	beq.n	800db1a <ucdr_deserialize_int64_t+0x146>
 800da38:	797b      	ldrb	r3, [r7, #5]
 800da3a:	2e02      	cmp	r6, #2
 800da3c:	70ab      	strb	r3, [r5, #2]
 800da3e:	f105 0303 	add.w	r3, r5, #3
 800da42:	d06e      	beq.n	800db22 <ucdr_deserialize_int64_t+0x14e>
 800da44:	793b      	ldrb	r3, [r7, #4]
 800da46:	2e03      	cmp	r6, #3
 800da48:	70eb      	strb	r3, [r5, #3]
 800da4a:	f105 0304 	add.w	r3, r5, #4
 800da4e:	d06c      	beq.n	800db2a <ucdr_deserialize_int64_t+0x156>
 800da50:	78fb      	ldrb	r3, [r7, #3]
 800da52:	2e04      	cmp	r6, #4
 800da54:	712b      	strb	r3, [r5, #4]
 800da56:	f105 0305 	add.w	r3, r5, #5
 800da5a:	d06a      	beq.n	800db32 <ucdr_deserialize_int64_t+0x15e>
 800da5c:	78bb      	ldrb	r3, [r7, #2]
 800da5e:	2e05      	cmp	r6, #5
 800da60:	716b      	strb	r3, [r5, #5]
 800da62:	f105 0306 	add.w	r3, r5, #6
 800da66:	d068      	beq.n	800db3a <ucdr_deserialize_int64_t+0x166>
 800da68:	787b      	ldrb	r3, [r7, #1]
 800da6a:	2e06      	cmp	r6, #6
 800da6c:	71ab      	strb	r3, [r5, #6]
 800da6e:	f105 0307 	add.w	r3, r5, #7
 800da72:	d066      	beq.n	800db42 <ucdr_deserialize_int64_t+0x16e>
 800da74:	783b      	ldrb	r3, [r7, #0]
 800da76:	71eb      	strb	r3, [r5, #7]
 800da78:	6923      	ldr	r3, [r4, #16]
 800da7a:	2108      	movs	r1, #8
 800da7c:	68a2      	ldr	r2, [r4, #8]
 800da7e:	3308      	adds	r3, #8
 800da80:	7da0      	ldrb	r0, [r4, #22]
 800da82:	444a      	add	r2, r9
 800da84:	7561      	strb	r1, [r4, #21]
 800da86:	1b9e      	subs	r6, r3, r6
 800da88:	f080 0001 	eor.w	r0, r0, #1
 800da8c:	60a2      	str	r2, [r4, #8]
 800da8e:	6126      	str	r6, [r4, #16]
 800da90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da94:	2108      	movs	r1, #8
 800da96:	4620      	mov	r0, r4
 800da98:	f000 f996 	bl	800ddc8 <ucdr_check_final_buffer_behavior>
 800da9c:	b310      	cbz	r0, 800dae4 <ucdr_deserialize_int64_t+0x110>
 800da9e:	7d23      	ldrb	r3, [r4, #20]
 800daa0:	2b01      	cmp	r3, #1
 800daa2:	68a3      	ldr	r3, [r4, #8]
 800daa4:	d023      	beq.n	800daee <ucdr_deserialize_int64_t+0x11a>
 800daa6:	79db      	ldrb	r3, [r3, #7]
 800daa8:	702b      	strb	r3, [r5, #0]
 800daaa:	68a3      	ldr	r3, [r4, #8]
 800daac:	799b      	ldrb	r3, [r3, #6]
 800daae:	706b      	strb	r3, [r5, #1]
 800dab0:	68a3      	ldr	r3, [r4, #8]
 800dab2:	795b      	ldrb	r3, [r3, #5]
 800dab4:	70ab      	strb	r3, [r5, #2]
 800dab6:	68a3      	ldr	r3, [r4, #8]
 800dab8:	791b      	ldrb	r3, [r3, #4]
 800daba:	70eb      	strb	r3, [r5, #3]
 800dabc:	68a3      	ldr	r3, [r4, #8]
 800dabe:	78db      	ldrb	r3, [r3, #3]
 800dac0:	712b      	strb	r3, [r5, #4]
 800dac2:	68a3      	ldr	r3, [r4, #8]
 800dac4:	789b      	ldrb	r3, [r3, #2]
 800dac6:	716b      	strb	r3, [r5, #5]
 800dac8:	68a3      	ldr	r3, [r4, #8]
 800daca:	785b      	ldrb	r3, [r3, #1]
 800dacc:	71ab      	strb	r3, [r5, #6]
 800dace:	68a3      	ldr	r3, [r4, #8]
 800dad0:	781b      	ldrb	r3, [r3, #0]
 800dad2:	71eb      	strb	r3, [r5, #7]
 800dad4:	2108      	movs	r1, #8
 800dad6:	68a2      	ldr	r2, [r4, #8]
 800dad8:	6923      	ldr	r3, [r4, #16]
 800dada:	440a      	add	r2, r1
 800dadc:	7561      	strb	r1, [r4, #21]
 800dade:	440b      	add	r3, r1
 800dae0:	60a2      	str	r2, [r4, #8]
 800dae2:	6123      	str	r3, [r4, #16]
 800dae4:	7da0      	ldrb	r0, [r4, #22]
 800dae6:	f080 0001 	eor.w	r0, r0, #1
 800daea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800daee:	681a      	ldr	r2, [r3, #0]
 800daf0:	685b      	ldr	r3, [r3, #4]
 800daf2:	602a      	str	r2, [r5, #0]
 800daf4:	606b      	str	r3, [r5, #4]
 800daf6:	e7ed      	b.n	800dad4 <ucdr_deserialize_int64_t+0x100>
 800daf8:	68a2      	ldr	r2, [r4, #8]
 800dafa:	6923      	ldr	r3, [r4, #16]
 800dafc:	1b92      	subs	r2, r2, r6
 800dafe:	7da0      	ldrb	r0, [r4, #22]
 800db00:	1b9b      	subs	r3, r3, r6
 800db02:	f884 8015 	strb.w	r8, [r4, #21]
 800db06:	f080 0001 	eor.w	r0, r0, #1
 800db0a:	60a2      	str	r2, [r4, #8]
 800db0c:	6123      	str	r3, [r4, #16]
 800db0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db12:	68a3      	ldr	r3, [r4, #8]
 800db14:	799b      	ldrb	r3, [r3, #6]
 800db16:	706b      	strb	r3, [r5, #1]
 800db18:	1cab      	adds	r3, r5, #2
 800db1a:	68a2      	ldr	r2, [r4, #8]
 800db1c:	7952      	ldrb	r2, [r2, #5]
 800db1e:	f803 2b01 	strb.w	r2, [r3], #1
 800db22:	68a2      	ldr	r2, [r4, #8]
 800db24:	7912      	ldrb	r2, [r2, #4]
 800db26:	f803 2b01 	strb.w	r2, [r3], #1
 800db2a:	68a2      	ldr	r2, [r4, #8]
 800db2c:	78d2      	ldrb	r2, [r2, #3]
 800db2e:	f803 2b01 	strb.w	r2, [r3], #1
 800db32:	68a2      	ldr	r2, [r4, #8]
 800db34:	7892      	ldrb	r2, [r2, #2]
 800db36:	f803 2b01 	strb.w	r2, [r3], #1
 800db3a:	68a2      	ldr	r2, [r4, #8]
 800db3c:	7852      	ldrb	r2, [r2, #1]
 800db3e:	f803 2b01 	strb.w	r2, [r3], #1
 800db42:	68a2      	ldr	r2, [r4, #8]
 800db44:	7812      	ldrb	r2, [r2, #0]
 800db46:	701a      	strb	r2, [r3, #0]
 800db48:	e796      	b.n	800da78 <ucdr_deserialize_int64_t+0xa4>
 800db4a:	4639      	mov	r1, r7
 800db4c:	4632      	mov	r2, r6
 800db4e:	4628      	mov	r0, r5
 800db50:	f00b feb5 	bl	80198be <memcpy>
 800db54:	464a      	mov	r2, r9
 800db56:	19a8      	adds	r0, r5, r6
 800db58:	68a1      	ldr	r1, [r4, #8]
 800db5a:	f00b feb0 	bl	80198be <memcpy>
 800db5e:	e78b      	b.n	800da78 <ucdr_deserialize_int64_t+0xa4>

0800db60 <ucdr_serialize_float>:
 800db60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db64:	4604      	mov	r4, r0
 800db66:	b082      	sub	sp, #8
 800db68:	2104      	movs	r1, #4
 800db6a:	ed8d 0a01 	vstr	s0, [sp, #4]
 800db6e:	f000 f97f 	bl	800de70 <ucdr_buffer_alignment>
 800db72:	4601      	mov	r1, r0
 800db74:	4620      	mov	r0, r4
 800db76:	7d67      	ldrb	r7, [r4, #21]
 800db78:	f000 f9c2 	bl	800df00 <ucdr_advance_buffer>
 800db7c:	2104      	movs	r1, #4
 800db7e:	4620      	mov	r0, r4
 800db80:	f000 f916 	bl	800ddb0 <ucdr_check_buffer_available_for>
 800db84:	2800      	cmp	r0, #0
 800db86:	d139      	bne.n	800dbfc <ucdr_serialize_float+0x9c>
 800db88:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800db8c:	42ab      	cmp	r3, r5
 800db8e:	d930      	bls.n	800dbf2 <ucdr_serialize_float+0x92>
 800db90:	1b5e      	subs	r6, r3, r5
 800db92:	60a3      	str	r3, [r4, #8]
 800db94:	6923      	ldr	r3, [r4, #16]
 800db96:	4620      	mov	r0, r4
 800db98:	f1c6 0804 	rsb	r8, r6, #4
 800db9c:	4433      	add	r3, r6
 800db9e:	4641      	mov	r1, r8
 800dba0:	6123      	str	r3, [r4, #16]
 800dba2:	f000 f911 	bl	800ddc8 <ucdr_check_final_buffer_behavior>
 800dba6:	2800      	cmp	r0, #0
 800dba8:	d04c      	beq.n	800dc44 <ucdr_serialize_float+0xe4>
 800dbaa:	7d23      	ldrb	r3, [r4, #20]
 800dbac:	2b01      	cmp	r3, #1
 800dbae:	d063      	beq.n	800dc78 <ucdr_serialize_float+0x118>
 800dbb0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dbb4:	702b      	strb	r3, [r5, #0]
 800dbb6:	2e00      	cmp	r6, #0
 800dbb8:	d051      	beq.n	800dc5e <ucdr_serialize_float+0xfe>
 800dbba:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dbbe:	2e01      	cmp	r6, #1
 800dbc0:	706b      	strb	r3, [r5, #1]
 800dbc2:	d050      	beq.n	800dc66 <ucdr_serialize_float+0x106>
 800dbc4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800dbc8:	2e02      	cmp	r6, #2
 800dbca:	70ab      	strb	r3, [r5, #2]
 800dbcc:	d04f      	beq.n	800dc6e <ucdr_serialize_float+0x10e>
 800dbce:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800dbd2:	70eb      	strb	r3, [r5, #3]
 800dbd4:	6923      	ldr	r3, [r4, #16]
 800dbd6:	2104      	movs	r1, #4
 800dbd8:	68a2      	ldr	r2, [r4, #8]
 800dbda:	3304      	adds	r3, #4
 800dbdc:	7da0      	ldrb	r0, [r4, #22]
 800dbde:	4442      	add	r2, r8
 800dbe0:	7561      	strb	r1, [r4, #21]
 800dbe2:	1b9e      	subs	r6, r3, r6
 800dbe4:	f080 0001 	eor.w	r0, r0, #1
 800dbe8:	60a2      	str	r2, [r4, #8]
 800dbea:	6126      	str	r6, [r4, #16]
 800dbec:	b002      	add	sp, #8
 800dbee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbf2:	2104      	movs	r1, #4
 800dbf4:	4620      	mov	r0, r4
 800dbf6:	f000 f8e7 	bl	800ddc8 <ucdr_check_final_buffer_behavior>
 800dbfa:	b1d0      	cbz	r0, 800dc32 <ucdr_serialize_float+0xd2>
 800dbfc:	7d23      	ldrb	r3, [r4, #20]
 800dbfe:	2b01      	cmp	r3, #1
 800dc00:	68a3      	ldr	r3, [r4, #8]
 800dc02:	d01c      	beq.n	800dc3e <ucdr_serialize_float+0xde>
 800dc04:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800dc08:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dc0c:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800dc10:	7018      	strb	r0, [r3, #0]
 800dc12:	68a3      	ldr	r3, [r4, #8]
 800dc14:	705a      	strb	r2, [r3, #1]
 800dc16:	68a3      	ldr	r3, [r4, #8]
 800dc18:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dc1c:	7099      	strb	r1, [r3, #2]
 800dc1e:	68a3      	ldr	r3, [r4, #8]
 800dc20:	70da      	strb	r2, [r3, #3]
 800dc22:	2104      	movs	r1, #4
 800dc24:	68a2      	ldr	r2, [r4, #8]
 800dc26:	6923      	ldr	r3, [r4, #16]
 800dc28:	440a      	add	r2, r1
 800dc2a:	7561      	strb	r1, [r4, #21]
 800dc2c:	440b      	add	r3, r1
 800dc2e:	60a2      	str	r2, [r4, #8]
 800dc30:	6123      	str	r3, [r4, #16]
 800dc32:	7da0      	ldrb	r0, [r4, #22]
 800dc34:	f080 0001 	eor.w	r0, r0, #1
 800dc38:	b002      	add	sp, #8
 800dc3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc3e:	9a01      	ldr	r2, [sp, #4]
 800dc40:	601a      	str	r2, [r3, #0]
 800dc42:	e7ee      	b.n	800dc22 <ucdr_serialize_float+0xc2>
 800dc44:	68a2      	ldr	r2, [r4, #8]
 800dc46:	6923      	ldr	r3, [r4, #16]
 800dc48:	7da0      	ldrb	r0, [r4, #22]
 800dc4a:	1b92      	subs	r2, r2, r6
 800dc4c:	1b9b      	subs	r3, r3, r6
 800dc4e:	7567      	strb	r7, [r4, #21]
 800dc50:	f080 0001 	eor.w	r0, r0, #1
 800dc54:	60a2      	str	r2, [r4, #8]
 800dc56:	6123      	str	r3, [r4, #16]
 800dc58:	b002      	add	sp, #8
 800dc5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc5e:	68a3      	ldr	r3, [r4, #8]
 800dc60:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dc64:	701a      	strb	r2, [r3, #0]
 800dc66:	68a3      	ldr	r3, [r4, #8]
 800dc68:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800dc6c:	701a      	strb	r2, [r3, #0]
 800dc6e:	68a3      	ldr	r3, [r4, #8]
 800dc70:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dc74:	701a      	strb	r2, [r3, #0]
 800dc76:	e7ad      	b.n	800dbd4 <ucdr_serialize_float+0x74>
 800dc78:	4628      	mov	r0, r5
 800dc7a:	ad01      	add	r5, sp, #4
 800dc7c:	4632      	mov	r2, r6
 800dc7e:	4629      	mov	r1, r5
 800dc80:	f00b fe1d 	bl	80198be <memcpy>
 800dc84:	4642      	mov	r2, r8
 800dc86:	19a9      	adds	r1, r5, r6
 800dc88:	68a0      	ldr	r0, [r4, #8]
 800dc8a:	f00b fe18 	bl	80198be <memcpy>
 800dc8e:	e7a1      	b.n	800dbd4 <ucdr_serialize_float+0x74>

0800dc90 <ucdr_deserialize_float>:
 800dc90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc94:	4604      	mov	r4, r0
 800dc96:	460d      	mov	r5, r1
 800dc98:	2104      	movs	r1, #4
 800dc9a:	f000 f8e9 	bl	800de70 <ucdr_buffer_alignment>
 800dc9e:	4601      	mov	r1, r0
 800dca0:	4620      	mov	r0, r4
 800dca2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800dca6:	f000 f92b 	bl	800df00 <ucdr_advance_buffer>
 800dcaa:	2104      	movs	r1, #4
 800dcac:	4620      	mov	r0, r4
 800dcae:	f000 f87f 	bl	800ddb0 <ucdr_check_buffer_available_for>
 800dcb2:	2800      	cmp	r0, #0
 800dcb4:	d138      	bne.n	800dd28 <ucdr_deserialize_float+0x98>
 800dcb6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800dcba:	42b7      	cmp	r7, r6
 800dcbc:	d92f      	bls.n	800dd1e <ucdr_deserialize_float+0x8e>
 800dcbe:	6923      	ldr	r3, [r4, #16]
 800dcc0:	4620      	mov	r0, r4
 800dcc2:	60a7      	str	r7, [r4, #8]
 800dcc4:	1bbf      	subs	r7, r7, r6
 800dcc6:	443b      	add	r3, r7
 800dcc8:	f1c7 0904 	rsb	r9, r7, #4
 800dccc:	6123      	str	r3, [r4, #16]
 800dcce:	4649      	mov	r1, r9
 800dcd0:	f000 f87a 	bl	800ddc8 <ucdr_check_final_buffer_behavior>
 800dcd4:	2800      	cmp	r0, #0
 800dcd6:	d046      	beq.n	800dd66 <ucdr_deserialize_float+0xd6>
 800dcd8:	7d23      	ldrb	r3, [r4, #20]
 800dcda:	2b01      	cmp	r3, #1
 800dcdc:	d05c      	beq.n	800dd98 <ucdr_deserialize_float+0x108>
 800dcde:	78f3      	ldrb	r3, [r6, #3]
 800dce0:	702b      	strb	r3, [r5, #0]
 800dce2:	2f00      	cmp	r7, #0
 800dce4:	d04c      	beq.n	800dd80 <ucdr_deserialize_float+0xf0>
 800dce6:	78b3      	ldrb	r3, [r6, #2]
 800dce8:	2f01      	cmp	r7, #1
 800dcea:	706b      	strb	r3, [r5, #1]
 800dcec:	f105 0302 	add.w	r3, r5, #2
 800dcf0:	d04a      	beq.n	800dd88 <ucdr_deserialize_float+0xf8>
 800dcf2:	7873      	ldrb	r3, [r6, #1]
 800dcf4:	2f02      	cmp	r7, #2
 800dcf6:	70ab      	strb	r3, [r5, #2]
 800dcf8:	f105 0303 	add.w	r3, r5, #3
 800dcfc:	d048      	beq.n	800dd90 <ucdr_deserialize_float+0x100>
 800dcfe:	7833      	ldrb	r3, [r6, #0]
 800dd00:	70eb      	strb	r3, [r5, #3]
 800dd02:	6923      	ldr	r3, [r4, #16]
 800dd04:	2104      	movs	r1, #4
 800dd06:	68a2      	ldr	r2, [r4, #8]
 800dd08:	3304      	adds	r3, #4
 800dd0a:	7da0      	ldrb	r0, [r4, #22]
 800dd0c:	444a      	add	r2, r9
 800dd0e:	7561      	strb	r1, [r4, #21]
 800dd10:	1bdb      	subs	r3, r3, r7
 800dd12:	f080 0001 	eor.w	r0, r0, #1
 800dd16:	60a2      	str	r2, [r4, #8]
 800dd18:	6123      	str	r3, [r4, #16]
 800dd1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd1e:	2104      	movs	r1, #4
 800dd20:	4620      	mov	r0, r4
 800dd22:	f000 f851 	bl	800ddc8 <ucdr_check_final_buffer_behavior>
 800dd26:	b1b0      	cbz	r0, 800dd56 <ucdr_deserialize_float+0xc6>
 800dd28:	7d23      	ldrb	r3, [r4, #20]
 800dd2a:	2b01      	cmp	r3, #1
 800dd2c:	68a3      	ldr	r3, [r4, #8]
 800dd2e:	d017      	beq.n	800dd60 <ucdr_deserialize_float+0xd0>
 800dd30:	78db      	ldrb	r3, [r3, #3]
 800dd32:	702b      	strb	r3, [r5, #0]
 800dd34:	68a3      	ldr	r3, [r4, #8]
 800dd36:	789b      	ldrb	r3, [r3, #2]
 800dd38:	706b      	strb	r3, [r5, #1]
 800dd3a:	68a3      	ldr	r3, [r4, #8]
 800dd3c:	785b      	ldrb	r3, [r3, #1]
 800dd3e:	70ab      	strb	r3, [r5, #2]
 800dd40:	68a3      	ldr	r3, [r4, #8]
 800dd42:	781b      	ldrb	r3, [r3, #0]
 800dd44:	70eb      	strb	r3, [r5, #3]
 800dd46:	2104      	movs	r1, #4
 800dd48:	68a2      	ldr	r2, [r4, #8]
 800dd4a:	6923      	ldr	r3, [r4, #16]
 800dd4c:	440a      	add	r2, r1
 800dd4e:	7561      	strb	r1, [r4, #21]
 800dd50:	440b      	add	r3, r1
 800dd52:	60a2      	str	r2, [r4, #8]
 800dd54:	6123      	str	r3, [r4, #16]
 800dd56:	7da0      	ldrb	r0, [r4, #22]
 800dd58:	f080 0001 	eor.w	r0, r0, #1
 800dd5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	602b      	str	r3, [r5, #0]
 800dd64:	e7ef      	b.n	800dd46 <ucdr_deserialize_float+0xb6>
 800dd66:	68a2      	ldr	r2, [r4, #8]
 800dd68:	6923      	ldr	r3, [r4, #16]
 800dd6a:	1bd2      	subs	r2, r2, r7
 800dd6c:	7da0      	ldrb	r0, [r4, #22]
 800dd6e:	1bdb      	subs	r3, r3, r7
 800dd70:	f884 8015 	strb.w	r8, [r4, #21]
 800dd74:	f080 0001 	eor.w	r0, r0, #1
 800dd78:	60a2      	str	r2, [r4, #8]
 800dd7a:	6123      	str	r3, [r4, #16]
 800dd7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd80:	68a3      	ldr	r3, [r4, #8]
 800dd82:	789b      	ldrb	r3, [r3, #2]
 800dd84:	706b      	strb	r3, [r5, #1]
 800dd86:	1cab      	adds	r3, r5, #2
 800dd88:	68a2      	ldr	r2, [r4, #8]
 800dd8a:	7852      	ldrb	r2, [r2, #1]
 800dd8c:	f803 2b01 	strb.w	r2, [r3], #1
 800dd90:	68a2      	ldr	r2, [r4, #8]
 800dd92:	7812      	ldrb	r2, [r2, #0]
 800dd94:	701a      	strb	r2, [r3, #0]
 800dd96:	e7b4      	b.n	800dd02 <ucdr_deserialize_float+0x72>
 800dd98:	4631      	mov	r1, r6
 800dd9a:	463a      	mov	r2, r7
 800dd9c:	4628      	mov	r0, r5
 800dd9e:	f00b fd8e 	bl	80198be <memcpy>
 800dda2:	464a      	mov	r2, r9
 800dda4:	19e8      	adds	r0, r5, r7
 800dda6:	68a1      	ldr	r1, [r4, #8]
 800dda8:	f00b fd89 	bl	80198be <memcpy>
 800ddac:	e7a9      	b.n	800dd02 <ucdr_deserialize_float+0x72>
 800ddae:	bf00      	nop

0800ddb0 <ucdr_check_buffer_available_for>:
 800ddb0:	7d83      	ldrb	r3, [r0, #22]
 800ddb2:	b93b      	cbnz	r3, 800ddc4 <ucdr_check_buffer_available_for+0x14>
 800ddb4:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800ddb8:	4419      	add	r1, r3
 800ddba:	4288      	cmp	r0, r1
 800ddbc:	bf34      	ite	cc
 800ddbe:	2000      	movcc	r0, #0
 800ddc0:	2001      	movcs	r0, #1
 800ddc2:	4770      	bx	lr
 800ddc4:	2000      	movs	r0, #0
 800ddc6:	4770      	bx	lr

0800ddc8 <ucdr_check_final_buffer_behavior>:
 800ddc8:	7d83      	ldrb	r3, [r0, #22]
 800ddca:	b943      	cbnz	r3, 800ddde <ucdr_check_final_buffer_behavior+0x16>
 800ddcc:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800ddd0:	b510      	push	{r4, lr}
 800ddd2:	4291      	cmp	r1, r2
 800ddd4:	4604      	mov	r4, r0
 800ddd6:	d205      	bcs.n	800dde4 <ucdr_check_final_buffer_behavior+0x1c>
 800ddd8:	2301      	movs	r3, #1
 800ddda:	4618      	mov	r0, r3
 800dddc:	bd10      	pop	{r4, pc}
 800ddde:	2300      	movs	r3, #0
 800dde0:	4618      	mov	r0, r3
 800dde2:	4770      	bx	lr
 800dde4:	6982      	ldr	r2, [r0, #24]
 800dde6:	b13a      	cbz	r2, 800ddf8 <ucdr_check_final_buffer_behavior+0x30>
 800dde8:	69c1      	ldr	r1, [r0, #28]
 800ddea:	4790      	blx	r2
 800ddec:	f080 0301 	eor.w	r3, r0, #1
 800ddf0:	75a0      	strb	r0, [r4, #22]
 800ddf2:	b2db      	uxtb	r3, r3
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	bd10      	pop	{r4, pc}
 800ddf8:	2001      	movs	r0, #1
 800ddfa:	75a0      	strb	r0, [r4, #22]
 800ddfc:	e7fa      	b.n	800ddf4 <ucdr_check_final_buffer_behavior+0x2c>
 800ddfe:	bf00      	nop

0800de00 <ucdr_set_on_full_buffer_callback>:
 800de00:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800de04:	4770      	bx	lr
 800de06:	bf00      	nop

0800de08 <ucdr_init_buffer_origin_offset_endian>:
 800de08:	b410      	push	{r4}
 800de0a:	9c01      	ldr	r4, [sp, #4]
 800de0c:	440a      	add	r2, r1
 800de0e:	6001      	str	r1, [r0, #0]
 800de10:	6042      	str	r2, [r0, #4]
 800de12:	190a      	adds	r2, r1, r4
 800de14:	441c      	add	r4, r3
 800de16:	6082      	str	r2, [r0, #8]
 800de18:	2200      	movs	r2, #0
 800de1a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800de1e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800de22:	7542      	strb	r2, [r0, #21]
 800de24:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de28:	7582      	strb	r2, [r0, #22]
 800de2a:	7503      	strb	r3, [r0, #20]
 800de2c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800de30:	4770      	bx	lr
 800de32:	bf00      	nop

0800de34 <ucdr_init_buffer_origin_offset>:
 800de34:	b510      	push	{r4, lr}
 800de36:	b082      	sub	sp, #8
 800de38:	9c04      	ldr	r4, [sp, #16]
 800de3a:	9400      	str	r4, [sp, #0]
 800de3c:	2401      	movs	r4, #1
 800de3e:	9401      	str	r4, [sp, #4]
 800de40:	f7ff ffe2 	bl	800de08 <ucdr_init_buffer_origin_offset_endian>
 800de44:	b002      	add	sp, #8
 800de46:	bd10      	pop	{r4, pc}

0800de48 <ucdr_init_buffer_origin>:
 800de48:	b510      	push	{r4, lr}
 800de4a:	2400      	movs	r4, #0
 800de4c:	b082      	sub	sp, #8
 800de4e:	9400      	str	r4, [sp, #0]
 800de50:	f7ff fff0 	bl	800de34 <ucdr_init_buffer_origin_offset>
 800de54:	b002      	add	sp, #8
 800de56:	bd10      	pop	{r4, pc}

0800de58 <ucdr_init_buffer>:
 800de58:	2300      	movs	r3, #0
 800de5a:	f7ff bff5 	b.w	800de48 <ucdr_init_buffer_origin>
 800de5e:	bf00      	nop

0800de60 <ucdr_alignment>:
 800de60:	fbb0 f2f1 	udiv	r2, r0, r1
 800de64:	fb02 0011 	mls	r0, r2, r1, r0
 800de68:	1e4b      	subs	r3, r1, #1
 800de6a:	1a08      	subs	r0, r1, r0
 800de6c:	4018      	ands	r0, r3
 800de6e:	4770      	bx	lr

0800de70 <ucdr_buffer_alignment>:
 800de70:	7d43      	ldrb	r3, [r0, #21]
 800de72:	428b      	cmp	r3, r1
 800de74:	d209      	bcs.n	800de8a <ucdr_buffer_alignment+0x1a>
 800de76:	6903      	ldr	r3, [r0, #16]
 800de78:	1e4a      	subs	r2, r1, #1
 800de7a:	fbb3 f0f1 	udiv	r0, r3, r1
 800de7e:	fb01 3010 	mls	r0, r1, r0, r3
 800de82:	1a09      	subs	r1, r1, r0
 800de84:	ea01 0002 	and.w	r0, r1, r2
 800de88:	4770      	bx	lr
 800de8a:	2000      	movs	r0, #0
 800de8c:	4770      	bx	lr
 800de8e:	bf00      	nop

0800de90 <ucdr_align_to>:
 800de90:	b538      	push	{r3, r4, r5, lr}
 800de92:	4604      	mov	r4, r0
 800de94:	460d      	mov	r5, r1
 800de96:	f7ff ffeb 	bl	800de70 <ucdr_buffer_alignment>
 800de9a:	68a3      	ldr	r3, [r4, #8]
 800de9c:	7565      	strb	r5, [r4, #21]
 800de9e:	181a      	adds	r2, r3, r0
 800dea0:	6923      	ldr	r3, [r4, #16]
 800dea2:	4418      	add	r0, r3
 800dea4:	6863      	ldr	r3, [r4, #4]
 800dea6:	4293      	cmp	r3, r2
 800dea8:	6120      	str	r0, [r4, #16]
 800deaa:	bf28      	it	cs
 800deac:	4613      	movcs	r3, r2
 800deae:	60a3      	str	r3, [r4, #8]
 800deb0:	bd38      	pop	{r3, r4, r5, pc}
 800deb2:	bf00      	nop

0800deb4 <ucdr_buffer_length>:
 800deb4:	6882      	ldr	r2, [r0, #8]
 800deb6:	6800      	ldr	r0, [r0, #0]
 800deb8:	1a10      	subs	r0, r2, r0
 800deba:	4770      	bx	lr

0800debc <ucdr_buffer_remaining>:
 800debc:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800dec0:	1a10      	subs	r0, r2, r0
 800dec2:	4770      	bx	lr

0800dec4 <ucdr_check_final_buffer_behavior_array>:
 800dec4:	b538      	push	{r3, r4, r5, lr}
 800dec6:	7d83      	ldrb	r3, [r0, #22]
 800dec8:	b9a3      	cbnz	r3, 800def4 <ucdr_check_final_buffer_behavior_array+0x30>
 800deca:	4604      	mov	r4, r0
 800decc:	460d      	mov	r5, r1
 800dece:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800ded2:	429a      	cmp	r2, r3
 800ded4:	d300      	bcc.n	800ded8 <ucdr_check_final_buffer_behavior_array+0x14>
 800ded6:	b931      	cbnz	r1, 800dee6 <ucdr_check_final_buffer_behavior_array+0x22>
 800ded8:	4620      	mov	r0, r4
 800deda:	f7ff ffef 	bl	800debc <ucdr_buffer_remaining>
 800dede:	42a8      	cmp	r0, r5
 800dee0:	bf28      	it	cs
 800dee2:	4628      	movcs	r0, r5
 800dee4:	bd38      	pop	{r3, r4, r5, pc}
 800dee6:	6983      	ldr	r3, [r0, #24]
 800dee8:	b133      	cbz	r3, 800def8 <ucdr_check_final_buffer_behavior_array+0x34>
 800deea:	69c1      	ldr	r1, [r0, #28]
 800deec:	4798      	blx	r3
 800deee:	75a0      	strb	r0, [r4, #22]
 800def0:	2800      	cmp	r0, #0
 800def2:	d0f1      	beq.n	800ded8 <ucdr_check_final_buffer_behavior_array+0x14>
 800def4:	2000      	movs	r0, #0
 800def6:	bd38      	pop	{r3, r4, r5, pc}
 800def8:	2301      	movs	r3, #1
 800defa:	7583      	strb	r3, [r0, #22]
 800defc:	e7fa      	b.n	800def4 <ucdr_check_final_buffer_behavior_array+0x30>
 800defe:	bf00      	nop

0800df00 <ucdr_advance_buffer>:
 800df00:	b538      	push	{r3, r4, r5, lr}
 800df02:	4604      	mov	r4, r0
 800df04:	460d      	mov	r5, r1
 800df06:	f7ff ff53 	bl	800ddb0 <ucdr_check_buffer_available_for>
 800df0a:	b178      	cbz	r0, 800df2c <ucdr_advance_buffer+0x2c>
 800df0c:	6923      	ldr	r3, [r4, #16]
 800df0e:	68a2      	ldr	r2, [r4, #8]
 800df10:	442b      	add	r3, r5
 800df12:	442a      	add	r2, r5
 800df14:	6123      	str	r3, [r4, #16]
 800df16:	2301      	movs	r3, #1
 800df18:	60a2      	str	r2, [r4, #8]
 800df1a:	7563      	strb	r3, [r4, #21]
 800df1c:	bd38      	pop	{r3, r4, r5, pc}
 800df1e:	68a2      	ldr	r2, [r4, #8]
 800df20:	1a2d      	subs	r5, r5, r0
 800df22:	6923      	ldr	r3, [r4, #16]
 800df24:	4402      	add	r2, r0
 800df26:	4418      	add	r0, r3
 800df28:	60a2      	str	r2, [r4, #8]
 800df2a:	6120      	str	r0, [r4, #16]
 800df2c:	4629      	mov	r1, r5
 800df2e:	2201      	movs	r2, #1
 800df30:	4620      	mov	r0, r4
 800df32:	f7ff ffc7 	bl	800dec4 <ucdr_check_final_buffer_behavior_array>
 800df36:	2800      	cmp	r0, #0
 800df38:	d1f1      	bne.n	800df1e <ucdr_advance_buffer+0x1e>
 800df3a:	2301      	movs	r3, #1
 800df3c:	7563      	strb	r3, [r4, #21]
 800df3e:	bd38      	pop	{r3, r4, r5, pc}

0800df40 <ucdr_serialize_sequence_char>:
 800df40:	b570      	push	{r4, r5, r6, lr}
 800df42:	4615      	mov	r5, r2
 800df44:	460e      	mov	r6, r1
 800df46:	7d01      	ldrb	r1, [r0, #20]
 800df48:	4604      	mov	r4, r0
 800df4a:	f7fe ffc9 	bl	800cee0 <ucdr_serialize_endian_uint32_t>
 800df4e:	b90d      	cbnz	r5, 800df54 <ucdr_serialize_sequence_char+0x14>
 800df50:	2001      	movs	r0, #1
 800df52:	bd70      	pop	{r4, r5, r6, pc}
 800df54:	462b      	mov	r3, r5
 800df56:	4632      	mov	r2, r6
 800df58:	7d21      	ldrb	r1, [r4, #20]
 800df5a:	4620      	mov	r0, r4
 800df5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800df60:	f7fe bbb0 	b.w	800c6c4 <ucdr_serialize_endian_array_char>

0800df64 <ucdr_deserialize_sequence_char>:
 800df64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df68:	461d      	mov	r5, r3
 800df6a:	4616      	mov	r6, r2
 800df6c:	460f      	mov	r7, r1
 800df6e:	461a      	mov	r2, r3
 800df70:	7d01      	ldrb	r1, [r0, #20]
 800df72:	4604      	mov	r4, r0
 800df74:	f7ff f8dc 	bl	800d130 <ucdr_deserialize_endian_uint32_t>
 800df78:	682b      	ldr	r3, [r5, #0]
 800df7a:	429e      	cmp	r6, r3
 800df7c:	d201      	bcs.n	800df82 <ucdr_deserialize_sequence_char+0x1e>
 800df7e:	2201      	movs	r2, #1
 800df80:	75a2      	strb	r2, [r4, #22]
 800df82:	b913      	cbnz	r3, 800df8a <ucdr_deserialize_sequence_char+0x26>
 800df84:	2001      	movs	r0, #1
 800df86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df8a:	463a      	mov	r2, r7
 800df8c:	7d21      	ldrb	r1, [r4, #20]
 800df8e:	4620      	mov	r0, r4
 800df90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df94:	f7fe bbc8 	b.w	800c728 <ucdr_deserialize_endian_array_char>

0800df98 <ucdr_serialize_sequence_uint8_t>:
 800df98:	b570      	push	{r4, r5, r6, lr}
 800df9a:	4615      	mov	r5, r2
 800df9c:	460e      	mov	r6, r1
 800df9e:	7d01      	ldrb	r1, [r0, #20]
 800dfa0:	4604      	mov	r4, r0
 800dfa2:	f7fe ff9d 	bl	800cee0 <ucdr_serialize_endian_uint32_t>
 800dfa6:	b90d      	cbnz	r5, 800dfac <ucdr_serialize_sequence_uint8_t+0x14>
 800dfa8:	2001      	movs	r0, #1
 800dfaa:	bd70      	pop	{r4, r5, r6, pc}
 800dfac:	462b      	mov	r3, r5
 800dfae:	4632      	mov	r2, r6
 800dfb0:	7d21      	ldrb	r1, [r4, #20]
 800dfb2:	4620      	mov	r0, r4
 800dfb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dfb8:	f7fe bc1c 	b.w	800c7f4 <ucdr_serialize_endian_array_uint8_t>

0800dfbc <ucdr_deserialize_sequence_uint8_t>:
 800dfbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfc0:	461d      	mov	r5, r3
 800dfc2:	4616      	mov	r6, r2
 800dfc4:	460f      	mov	r7, r1
 800dfc6:	461a      	mov	r2, r3
 800dfc8:	7d01      	ldrb	r1, [r0, #20]
 800dfca:	4604      	mov	r4, r0
 800dfcc:	f7ff f8b0 	bl	800d130 <ucdr_deserialize_endian_uint32_t>
 800dfd0:	682b      	ldr	r3, [r5, #0]
 800dfd2:	429e      	cmp	r6, r3
 800dfd4:	d201      	bcs.n	800dfda <ucdr_deserialize_sequence_uint8_t+0x1e>
 800dfd6:	2201      	movs	r2, #1
 800dfd8:	75a2      	strb	r2, [r4, #22]
 800dfda:	b913      	cbnz	r3, 800dfe2 <ucdr_deserialize_sequence_uint8_t+0x26>
 800dfdc:	2001      	movs	r0, #1
 800dfde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfe2:	463a      	mov	r2, r7
 800dfe4:	7d21      	ldrb	r1, [r4, #20]
 800dfe6:	4620      	mov	r0, r4
 800dfe8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dfec:	f7fe bc68 	b.w	800c8c0 <ucdr_deserialize_endian_array_uint8_t>

0800dff0 <racs_services__srv__Control_Event__get_type_description.part.0>:
 800dff0:	b510      	push	{r4, lr}
 800dff2:	2000      	movs	r0, #0
 800dff4:	4c13      	ldr	r4, [pc, #76]	; (800e044 <racs_services__srv__Control_Event__get_type_description.part.0+0x54>)
 800dff6:	f006 f81b 	bl	8014030 <builtin_interfaces__msg__Time__get_type_description>
 800dffa:	300c      	adds	r0, #12
 800dffc:	4b12      	ldr	r3, [pc, #72]	; (800e048 <racs_services__srv__Control_Event__get_type_description.part.0+0x58>)
 800dffe:	c807      	ldmia	r0, {r0, r1, r2}
 800e000:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e004:	7823      	ldrb	r3, [r4, #0]
 800e006:	b90b      	cbnz	r3, 800e00c <racs_services__srv__Control_Event__get_type_description.part.0+0x1c>
 800e008:	2301      	movs	r3, #1
 800e00a:	7023      	strb	r3, [r4, #0]
 800e00c:	4a0f      	ldr	r2, [pc, #60]	; (800e04c <racs_services__srv__Control_Event__get_type_description.part.0+0x5c>)
 800e00e:	4b10      	ldr	r3, [pc, #64]	; (800e050 <racs_services__srv__Control_Event__get_type_description.part.0+0x60>)
 800e010:	4c10      	ldr	r4, [pc, #64]	; (800e054 <racs_services__srv__Control_Event__get_type_description.part.0+0x64>)
 800e012:	ca07      	ldmia	r2, {r0, r1, r2}
 800e014:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e018:	7823      	ldrb	r3, [r4, #0]
 800e01a:	b90b      	cbnz	r3, 800e020 <racs_services__srv__Control_Event__get_type_description.part.0+0x30>
 800e01c:	2301      	movs	r3, #1
 800e01e:	7023      	strb	r3, [r4, #0]
 800e020:	4b0d      	ldr	r3, [pc, #52]	; (800e058 <racs_services__srv__Control_Event__get_type_description.part.0+0x68>)
 800e022:	4c0e      	ldr	r4, [pc, #56]	; (800e05c <racs_services__srv__Control_Event__get_type_description.part.0+0x6c>)
 800e024:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e028:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e02c:	2000      	movs	r0, #0
 800e02e:	3418      	adds	r4, #24
 800e030:	f005 ff9e 	bl	8013f70 <service_msgs__msg__ServiceEventInfo__get_type_description>
 800e034:	300c      	adds	r0, #12
 800e036:	4b0a      	ldr	r3, [pc, #40]	; (800e060 <racs_services__srv__Control_Event__get_type_description.part.0+0x70>)
 800e038:	c807      	ldmia	r0, {r0, r1, r2}
 800e03a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e03e:	2201      	movs	r2, #1
 800e040:	701a      	strb	r2, [r3, #0]
 800e042:	bd10      	pop	{r4, pc}
 800e044:	2000b96c 	.word	0x2000b96c
 800e048:	20000d38 	.word	0x20000d38
 800e04c:	0801b23c 	.word	0x0801b23c
 800e050:	20000d50 	.word	0x20000d50
 800e054:	2000b96a 	.word	0x2000b96a
 800e058:	0801b218 	.word	0x0801b218
 800e05c:	20000d68 	.word	0x20000d68
 800e060:	2000b969 	.word	0x2000b969

0800e064 <racs_services__srv__Control__get_type_hash>:
 800e064:	4800      	ldr	r0, [pc, #0]	; (800e068 <racs_services__srv__Control__get_type_hash+0x4>)
 800e066:	4770      	bx	lr
 800e068:	20000c04 	.word	0x20000c04

0800e06c <racs_services__srv__Control_Request__get_type_hash>:
 800e06c:	4800      	ldr	r0, [pc, #0]	; (800e070 <racs_services__srv__Control_Request__get_type_hash+0x4>)
 800e06e:	4770      	bx	lr
 800e070:	20000be0 	.word	0x20000be0

0800e074 <racs_services__srv__Control_Response__get_type_hash>:
 800e074:	4800      	ldr	r0, [pc, #0]	; (800e078 <racs_services__srv__Control_Response__get_type_hash+0x4>)
 800e076:	4770      	bx	lr
 800e078:	20000bbc 	.word	0x20000bbc

0800e07c <racs_services__srv__Control_Event__get_type_hash>:
 800e07c:	4800      	ldr	r0, [pc, #0]	; (800e080 <racs_services__srv__Control_Event__get_type_hash+0x4>)
 800e07e:	4770      	bx	lr
 800e080:	20000b98 	.word	0x20000b98

0800e084 <racs_services__srv__Control__get_type_description>:
 800e084:	b538      	push	{r3, r4, r5, lr}
 800e086:	4d1c      	ldr	r5, [pc, #112]	; (800e0f8 <racs_services__srv__Control__get_type_description+0x74>)
 800e088:	7828      	ldrb	r0, [r5, #0]
 800e08a:	b108      	cbz	r0, 800e090 <racs_services__srv__Control__get_type_description+0xc>
 800e08c:	481b      	ldr	r0, [pc, #108]	; (800e0fc <racs_services__srv__Control__get_type_description+0x78>)
 800e08e:	bd38      	pop	{r3, r4, r5, pc}
 800e090:	f005 ffce 	bl	8014030 <builtin_interfaces__msg__Time__get_type_description>
 800e094:	300c      	adds	r0, #12
 800e096:	4b1a      	ldr	r3, [pc, #104]	; (800e100 <racs_services__srv__Control__get_type_description+0x7c>)
 800e098:	c807      	ldmia	r0, {r0, r1, r2}
 800e09a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e09e:	4b19      	ldr	r3, [pc, #100]	; (800e104 <racs_services__srv__Control__get_type_description+0x80>)
 800e0a0:	781b      	ldrb	r3, [r3, #0]
 800e0a2:	b32b      	cbz	r3, 800e0f0 <racs_services__srv__Control__get_type_description+0x6c>
 800e0a4:	4a18      	ldr	r2, [pc, #96]	; (800e108 <racs_services__srv__Control__get_type_description+0x84>)
 800e0a6:	4b19      	ldr	r3, [pc, #100]	; (800e10c <racs_services__srv__Control__get_type_description+0x88>)
 800e0a8:	4c19      	ldr	r4, [pc, #100]	; (800e110 <racs_services__srv__Control__get_type_description+0x8c>)
 800e0aa:	ca07      	ldmia	r2, {r0, r1, r2}
 800e0ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e0b0:	7823      	ldrb	r3, [r4, #0]
 800e0b2:	b90b      	cbnz	r3, 800e0b8 <racs_services__srv__Control__get_type_description+0x34>
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	7023      	strb	r3, [r4, #0]
 800e0b8:	4a16      	ldr	r2, [pc, #88]	; (800e114 <racs_services__srv__Control__get_type_description+0x90>)
 800e0ba:	4b17      	ldr	r3, [pc, #92]	; (800e118 <racs_services__srv__Control__get_type_description+0x94>)
 800e0bc:	4c17      	ldr	r4, [pc, #92]	; (800e11c <racs_services__srv__Control__get_type_description+0x98>)
 800e0be:	ca07      	ldmia	r2, {r0, r1, r2}
 800e0c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e0c4:	7823      	ldrb	r3, [r4, #0]
 800e0c6:	b90b      	cbnz	r3, 800e0cc <racs_services__srv__Control__get_type_description+0x48>
 800e0c8:	2301      	movs	r3, #1
 800e0ca:	7023      	strb	r3, [r4, #0]
 800e0cc:	4b14      	ldr	r3, [pc, #80]	; (800e120 <racs_services__srv__Control__get_type_description+0x9c>)
 800e0ce:	4c15      	ldr	r4, [pc, #84]	; (800e124 <racs_services__srv__Control__get_type_description+0xa0>)
 800e0d0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e0d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e0d8:	2000      	movs	r0, #0
 800e0da:	3418      	adds	r4, #24
 800e0dc:	f005 ff48 	bl	8013f70 <service_msgs__msg__ServiceEventInfo__get_type_description>
 800e0e0:	300c      	adds	r0, #12
 800e0e2:	2301      	movs	r3, #1
 800e0e4:	c807      	ldmia	r0, {r0, r1, r2}
 800e0e6:	702b      	strb	r3, [r5, #0]
 800e0e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e0ec:	4803      	ldr	r0, [pc, #12]	; (800e0fc <racs_services__srv__Control__get_type_description+0x78>)
 800e0ee:	bd38      	pop	{r3, r4, r5, pc}
 800e0f0:	f7ff ff7e 	bl	800dff0 <racs_services__srv__Control_Event__get_type_description.part.0>
 800e0f4:	e7d6      	b.n	800e0a4 <racs_services__srv__Control__get_type_description+0x20>
 800e0f6:	bf00      	nop
 800e0f8:	2000b96d 	.word	0x2000b96d
 800e0fc:	0801b254 	.word	0x0801b254
 800e100:	20001200 	.word	0x20001200
 800e104:	2000b969 	.word	0x2000b969
 800e108:	0801b1f4 	.word	0x0801b1f4
 800e10c:	20001218 	.word	0x20001218
 800e110:	2000b96c 	.word	0x2000b96c
 800e114:	0801b23c 	.word	0x0801b23c
 800e118:	20001230 	.word	0x20001230
 800e11c:	2000b96a 	.word	0x2000b96a
 800e120:	0801b218 	.word	0x0801b218
 800e124:	20001248 	.word	0x20001248

0800e128 <racs_services__srv__Control_Request__get_type_description>:
 800e128:	4b03      	ldr	r3, [pc, #12]	; (800e138 <racs_services__srv__Control_Request__get_type_description+0x10>)
 800e12a:	781a      	ldrb	r2, [r3, #0]
 800e12c:	b90a      	cbnz	r2, 800e132 <racs_services__srv__Control_Request__get_type_description+0xa>
 800e12e:	2201      	movs	r2, #1
 800e130:	701a      	strb	r2, [r3, #0]
 800e132:	4802      	ldr	r0, [pc, #8]	; (800e13c <racs_services__srv__Control_Request__get_type_description+0x14>)
 800e134:	4770      	bx	lr
 800e136:	bf00      	nop
 800e138:	2000b96c 	.word	0x2000b96c
 800e13c:	0801b230 	.word	0x0801b230

0800e140 <racs_services__srv__Control_Response__get_type_description>:
 800e140:	4b03      	ldr	r3, [pc, #12]	; (800e150 <racs_services__srv__Control_Response__get_type_description+0x10>)
 800e142:	781a      	ldrb	r2, [r3, #0]
 800e144:	b90a      	cbnz	r2, 800e14a <racs_services__srv__Control_Response__get_type_description+0xa>
 800e146:	2201      	movs	r2, #1
 800e148:	701a      	strb	r2, [r3, #0]
 800e14a:	4802      	ldr	r0, [pc, #8]	; (800e154 <racs_services__srv__Control_Response__get_type_description+0x14>)
 800e14c:	4770      	bx	lr
 800e14e:	bf00      	nop
 800e150:	2000b96a 	.word	0x2000b96a
 800e154:	0801b20c 	.word	0x0801b20c

0800e158 <racs_services__srv__Control_Event__get_type_description>:
 800e158:	b508      	push	{r3, lr}
 800e15a:	4b04      	ldr	r3, [pc, #16]	; (800e16c <racs_services__srv__Control_Event__get_type_description+0x14>)
 800e15c:	781b      	ldrb	r3, [r3, #0]
 800e15e:	b10b      	cbz	r3, 800e164 <racs_services__srv__Control_Event__get_type_description+0xc>
 800e160:	4803      	ldr	r0, [pc, #12]	; (800e170 <racs_services__srv__Control_Event__get_type_description+0x18>)
 800e162:	bd08      	pop	{r3, pc}
 800e164:	f7ff ff44 	bl	800dff0 <racs_services__srv__Control_Event__get_type_description.part.0>
 800e168:	4801      	ldr	r0, [pc, #4]	; (800e170 <racs_services__srv__Control_Event__get_type_description+0x18>)
 800e16a:	bd08      	pop	{r3, pc}
 800e16c:	2000b969 	.word	0x2000b969
 800e170:	0801b1e8 	.word	0x0801b1e8

0800e174 <racs_services__srv__Control__get_type_description_sources>:
 800e174:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e178:	4b2c      	ldr	r3, [pc, #176]	; (800e22c <racs_services__srv__Control__get_type_description_sources+0xb8>)
 800e17a:	f893 9000 	ldrb.w	r9, [r3]
 800e17e:	f1b9 0f00 	cmp.w	r9, #0
 800e182:	d002      	beq.n	800e18a <racs_services__srv__Control__get_type_description_sources+0x16>
 800e184:	482a      	ldr	r0, [pc, #168]	; (800e230 <racs_services__srv__Control__get_type_description_sources+0xbc>)
 800e186:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e18a:	4d2a      	ldr	r5, [pc, #168]	; (800e234 <racs_services__srv__Control__get_type_description_sources+0xc0>)
 800e18c:	4c2a      	ldr	r4, [pc, #168]	; (800e238 <racs_services__srv__Control__get_type_description_sources+0xc4>)
 800e18e:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 800e240 <racs_services__srv__Control__get_type_description_sources+0xcc>
 800e192:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800e244 <racs_services__srv__Control__get_type_description_sources+0xd0>
 800e196:	4e29      	ldr	r6, [pc, #164]	; (800e23c <racs_services__srv__Control__get_type_description_sources+0xc8>)
 800e198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e19a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e19c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e19e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e1a0:	682b      	ldr	r3, [r5, #0]
 800e1a2:	4625      	mov	r5, r4
 800e1a4:	4648      	mov	r0, r9
 800e1a6:	f104 0a28 	add.w	sl, r4, #40	; 0x28
 800e1aa:	f845 3b04 	str.w	r3, [r5], #4
 800e1ae:	f104 074c 	add.w	r7, r4, #76	; 0x4c
 800e1b2:	f005 ff49 	bl	8014048 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 800e1b6:	4684      	mov	ip, r0
 800e1b8:	f104 0e70 	add.w	lr, r4, #112	; 0x70
 800e1bc:	3494      	adds	r4, #148	; 0x94
 800e1be:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e1c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e1c4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e1c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e1ca:	f8dc 3000 	ldr.w	r3, [ip]
 800e1ce:	602b      	str	r3, [r5, #0]
 800e1d0:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 800e1d4:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 800e1d8:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 800e1dc:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 800e1e0:	f8db 3000 	ldr.w	r3, [fp]
 800e1e4:	f8ca 3000 	str.w	r3, [sl]
 800e1e8:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800e1ec:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e1ee:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800e1f2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e1f4:	f8d8 3000 	ldr.w	r3, [r8]
 800e1f8:	603b      	str	r3, [r7, #0]
 800e1fa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e1fc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e200:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e202:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e206:	6833      	ldr	r3, [r6, #0]
 800e208:	4648      	mov	r0, r9
 800e20a:	f8ce 3000 	str.w	r3, [lr]
 800e20e:	f005 fec7 	bl	8013fa0 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 800e212:	2301      	movs	r3, #1
 800e214:	4a05      	ldr	r2, [pc, #20]	; (800e22c <racs_services__srv__Control__get_type_description_sources+0xb8>)
 800e216:	4605      	mov	r5, r0
 800e218:	7013      	strb	r3, [r2, #0]
 800e21a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e21c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e21e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e220:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e222:	682b      	ldr	r3, [r5, #0]
 800e224:	4802      	ldr	r0, [pc, #8]	; (800e230 <racs_services__srv__Control__get_type_description_sources+0xbc>)
 800e226:	6023      	str	r3, [r4, #0]
 800e228:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e22c:	2000b968 	.word	0x2000b968
 800e230:	0801b32c 	.word	0x0801b32c
 800e234:	0801b2e4 	.word	0x0801b2e4
 800e238:	2000ba24 	.word	0x2000ba24
 800e23c:	0801b29c 	.word	0x0801b29c
 800e240:	0801b278 	.word	0x0801b278
 800e244:	0801b2c0 	.word	0x0801b2c0

0800e248 <racs_services__srv__Control_Request__get_type_description_sources>:
 800e248:	4b09      	ldr	r3, [pc, #36]	; (800e270 <racs_services__srv__Control_Request__get_type_description_sources+0x28>)
 800e24a:	781a      	ldrb	r2, [r3, #0]
 800e24c:	b96a      	cbnz	r2, 800e26a <racs_services__srv__Control_Request__get_type_description_sources+0x22>
 800e24e:	2201      	movs	r2, #1
 800e250:	b430      	push	{r4, r5}
 800e252:	4d08      	ldr	r5, [pc, #32]	; (800e274 <racs_services__srv__Control_Request__get_type_description_sources+0x2c>)
 800e254:	4c08      	ldr	r4, [pc, #32]	; (800e278 <racs_services__srv__Control_Request__get_type_description_sources+0x30>)
 800e256:	701a      	strb	r2, [r3, #0]
 800e258:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e25a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e25c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e25e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e260:	682b      	ldr	r3, [r5, #0]
 800e262:	4806      	ldr	r0, [pc, #24]	; (800e27c <racs_services__srv__Control_Request__get_type_description_sources+0x34>)
 800e264:	6023      	str	r3, [r4, #0]
 800e266:	bc30      	pop	{r4, r5}
 800e268:	4770      	bx	lr
 800e26a:	4804      	ldr	r0, [pc, #16]	; (800e27c <racs_services__srv__Control_Request__get_type_description_sources+0x34>)
 800e26c:	4770      	bx	lr
 800e26e:	bf00      	nop
 800e270:	2000b96f 	.word	0x2000b96f
 800e274:	0801b2c0 	.word	0x0801b2c0
 800e278:	2000bb20 	.word	0x2000bb20
 800e27c:	0801b320 	.word	0x0801b320

0800e280 <racs_services__srv__Control_Response__get_type_description_sources>:
 800e280:	4b09      	ldr	r3, [pc, #36]	; (800e2a8 <racs_services__srv__Control_Response__get_type_description_sources+0x28>)
 800e282:	781a      	ldrb	r2, [r3, #0]
 800e284:	b96a      	cbnz	r2, 800e2a2 <racs_services__srv__Control_Response__get_type_description_sources+0x22>
 800e286:	2201      	movs	r2, #1
 800e288:	b430      	push	{r4, r5}
 800e28a:	4d08      	ldr	r5, [pc, #32]	; (800e2ac <racs_services__srv__Control_Response__get_type_description_sources+0x2c>)
 800e28c:	4c08      	ldr	r4, [pc, #32]	; (800e2b0 <racs_services__srv__Control_Response__get_type_description_sources+0x30>)
 800e28e:	701a      	strb	r2, [r3, #0]
 800e290:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e292:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e294:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e296:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e298:	682b      	ldr	r3, [r5, #0]
 800e29a:	4806      	ldr	r0, [pc, #24]	; (800e2b4 <racs_services__srv__Control_Response__get_type_description_sources+0x34>)
 800e29c:	6023      	str	r3, [r4, #0]
 800e29e:	bc30      	pop	{r4, r5}
 800e2a0:	4770      	bx	lr
 800e2a2:	4804      	ldr	r0, [pc, #16]	; (800e2b4 <racs_services__srv__Control_Response__get_type_description_sources+0x34>)
 800e2a4:	4770      	bx	lr
 800e2a6:	bf00      	nop
 800e2a8:	2000b96e 	.word	0x2000b96e
 800e2ac:	0801b29c 	.word	0x0801b29c
 800e2b0:	2000bafc 	.word	0x2000bafc
 800e2b4:	0801b314 	.word	0x0801b314

0800e2b8 <racs_services__srv__Control_Event__get_type_description_sources>:
 800e2b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2bc:	4e27      	ldr	r6, [pc, #156]	; (800e35c <racs_services__srv__Control_Event__get_type_description_sources+0xa4>)
 800e2be:	f896 8000 	ldrb.w	r8, [r6]
 800e2c2:	f1b8 0f00 	cmp.w	r8, #0
 800e2c6:	d002      	beq.n	800e2ce <racs_services__srv__Control_Event__get_type_description_sources+0x16>
 800e2c8:	4825      	ldr	r0, [pc, #148]	; (800e360 <racs_services__srv__Control_Event__get_type_description_sources+0xa8>)
 800e2ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2ce:	4d25      	ldr	r5, [pc, #148]	; (800e364 <racs_services__srv__Control_Event__get_type_description_sources+0xac>)
 800e2d0:	4c25      	ldr	r4, [pc, #148]	; (800e368 <racs_services__srv__Control_Event__get_type_description_sources+0xb0>)
 800e2d2:	f8df a09c 	ldr.w	sl, [pc, #156]	; 800e370 <racs_services__srv__Control_Event__get_type_description_sources+0xb8>
 800e2d6:	4f25      	ldr	r7, [pc, #148]	; (800e36c <racs_services__srv__Control_Event__get_type_description_sources+0xb4>)
 800e2d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e2da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e2dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e2de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e2e0:	682b      	ldr	r3, [r5, #0]
 800e2e2:	4625      	mov	r5, r4
 800e2e4:	4640      	mov	r0, r8
 800e2e6:	f104 0928 	add.w	r9, r4, #40	; 0x28
 800e2ea:	f845 3b04 	str.w	r3, [r5], #4
 800e2ee:	f005 feab 	bl	8014048 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 800e2f2:	4684      	mov	ip, r0
 800e2f4:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 800e2f8:	3470      	adds	r4, #112	; 0x70
 800e2fa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e2fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e300:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e304:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e306:	f8dc 3000 	ldr.w	r3, [ip]
 800e30a:	602b      	str	r3, [r5, #0]
 800e30c:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 800e310:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 800e314:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 800e318:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 800e31c:	f8da 3000 	ldr.w	r3, [sl]
 800e320:	f8c9 3000 	str.w	r3, [r9]
 800e324:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e326:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e32a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e32c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e330:	683b      	ldr	r3, [r7, #0]
 800e332:	4640      	mov	r0, r8
 800e334:	f8ce 3000 	str.w	r3, [lr]
 800e338:	f005 fe32 	bl	8013fa0 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 800e33c:	2301      	movs	r3, #1
 800e33e:	4684      	mov	ip, r0
 800e340:	7033      	strb	r3, [r6, #0]
 800e342:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e346:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e348:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e34c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e34e:	f8dc 3000 	ldr.w	r3, [ip]
 800e352:	4803      	ldr	r0, [pc, #12]	; (800e360 <racs_services__srv__Control_Event__get_type_description_sources+0xa8>)
 800e354:	6023      	str	r3, [r4, #0]
 800e356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e35a:	bf00      	nop
 800e35c:	2000b96b 	.word	0x2000b96b
 800e360:	0801b308 	.word	0x0801b308
 800e364:	0801b278 	.word	0x0801b278
 800e368:	2000b970 	.word	0x2000b970
 800e36c:	0801b29c 	.word	0x0801b29c
 800e370:	0801b2c0 	.word	0x0801b2c0

0800e374 <racs_services__srv__Control_Request__Sequence__init.part.0>:
 800e374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e378:	b086      	sub	sp, #24
 800e37a:	460f      	mov	r7, r1
 800e37c:	4680      	mov	r8, r0
 800e37e:	a801      	add	r0, sp, #4
 800e380:	f7fd febc 	bl	800c0fc <rcutils_get_default_allocator>
 800e384:	b367      	cbz	r7, 800e3e0 <racs_services__srv__Control_Request__Sequence__init.part.0+0x6c>
 800e386:	2110      	movs	r1, #16
 800e388:	4638      	mov	r0, r7
 800e38a:	e9dd 3a04 	ldrd	r3, sl, [sp, #16]
 800e38e:	4652      	mov	r2, sl
 800e390:	4798      	blx	r3
 800e392:	4681      	mov	r9, r0
 800e394:	b370      	cbz	r0, 800e3f4 <racs_services__srv__Control_Request__Sequence__init.part.0+0x80>
 800e396:	1d06      	adds	r6, r0, #4
 800e398:	2500      	movs	r5, #0
 800e39a:	e003      	b.n	800e3a4 <racs_services__srv__Control_Request__Sequence__init.part.0+0x30>
 800e39c:	3501      	adds	r5, #1
 800e39e:	3610      	adds	r6, #16
 800e3a0:	42af      	cmp	r7, r5
 800e3a2:	d01e      	beq.n	800e3e2 <racs_services__srv__Control_Request__Sequence__init.part.0+0x6e>
 800e3a4:	4630      	mov	r0, r6
 800e3a6:	2100      	movs	r1, #0
 800e3a8:	f7fd ff66 	bl	800c278 <rosidl_runtime_c__uint8__Sequence__init>
 800e3ac:	4604      	mov	r4, r0
 800e3ae:	2800      	cmp	r0, #0
 800e3b0:	d1f4      	bne.n	800e39c <racs_services__srv__Control_Request__Sequence__init.part.0+0x28>
 800e3b2:	4630      	mov	r0, r6
 800e3b4:	f7fd ff78 	bl	800c2a8 <rosidl_runtime_c__uint8__Sequence__fini>
 800e3b8:	42af      	cmp	r7, r5
 800e3ba:	d912      	bls.n	800e3e2 <racs_services__srv__Control_Request__Sequence__init.part.0+0x6e>
 800e3bc:	b145      	cbz	r5, 800e3d0 <racs_services__srv__Control_Request__Sequence__init.part.0+0x5c>
 800e3be:	eb09 1605 	add.w	r6, r9, r5, lsl #4
 800e3c2:	3e0c      	subs	r6, #12
 800e3c4:	4630      	mov	r0, r6
 800e3c6:	3e10      	subs	r6, #16
 800e3c8:	f7fd ff6e 	bl	800c2a8 <rosidl_runtime_c__uint8__Sequence__fini>
 800e3cc:	3d01      	subs	r5, #1
 800e3ce:	d1f9      	bne.n	800e3c4 <racs_services__srv__Control_Request__Sequence__init.part.0+0x50>
 800e3d0:	4648      	mov	r0, r9
 800e3d2:	9b02      	ldr	r3, [sp, #8]
 800e3d4:	4651      	mov	r1, sl
 800e3d6:	4798      	blx	r3
 800e3d8:	4620      	mov	r0, r4
 800e3da:	b006      	add	sp, #24
 800e3dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3e0:	46b9      	mov	r9, r7
 800e3e2:	2401      	movs	r4, #1
 800e3e4:	f8c8 7008 	str.w	r7, [r8, #8]
 800e3e8:	e9c8 9700 	strd	r9, r7, [r8]
 800e3ec:	4620      	mov	r0, r4
 800e3ee:	b006      	add	sp, #24
 800e3f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3f4:	4604      	mov	r4, r0
 800e3f6:	e7f9      	b.n	800e3ec <racs_services__srv__Control_Request__Sequence__init.part.0+0x78>

0800e3f8 <racs_services__srv__Control_Response__Sequence__init.part.0>:
 800e3f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3fc:	b086      	sub	sp, #24
 800e3fe:	460f      	mov	r7, r1
 800e400:	4680      	mov	r8, r0
 800e402:	a801      	add	r0, sp, #4
 800e404:	f7fd fe7a 	bl	800c0fc <rcutils_get_default_allocator>
 800e408:	b367      	cbz	r7, 800e464 <racs_services__srv__Control_Response__Sequence__init.part.0+0x6c>
 800e40a:	2110      	movs	r1, #16
 800e40c:	4638      	mov	r0, r7
 800e40e:	e9dd 3a04 	ldrd	r3, sl, [sp, #16]
 800e412:	4652      	mov	r2, sl
 800e414:	4798      	blx	r3
 800e416:	4681      	mov	r9, r0
 800e418:	b370      	cbz	r0, 800e478 <racs_services__srv__Control_Response__Sequence__init.part.0+0x80>
 800e41a:	1d06      	adds	r6, r0, #4
 800e41c:	2500      	movs	r5, #0
 800e41e:	e003      	b.n	800e428 <racs_services__srv__Control_Response__Sequence__init.part.0+0x30>
 800e420:	3501      	adds	r5, #1
 800e422:	3610      	adds	r6, #16
 800e424:	42af      	cmp	r7, r5
 800e426:	d01e      	beq.n	800e466 <racs_services__srv__Control_Response__Sequence__init.part.0+0x6e>
 800e428:	4630      	mov	r0, r6
 800e42a:	2100      	movs	r1, #0
 800e42c:	f7fd ff24 	bl	800c278 <rosidl_runtime_c__uint8__Sequence__init>
 800e430:	4604      	mov	r4, r0
 800e432:	2800      	cmp	r0, #0
 800e434:	d1f4      	bne.n	800e420 <racs_services__srv__Control_Response__Sequence__init.part.0+0x28>
 800e436:	4630      	mov	r0, r6
 800e438:	f7fd ff36 	bl	800c2a8 <rosidl_runtime_c__uint8__Sequence__fini>
 800e43c:	42af      	cmp	r7, r5
 800e43e:	d912      	bls.n	800e466 <racs_services__srv__Control_Response__Sequence__init.part.0+0x6e>
 800e440:	b145      	cbz	r5, 800e454 <racs_services__srv__Control_Response__Sequence__init.part.0+0x5c>
 800e442:	eb09 1605 	add.w	r6, r9, r5, lsl #4
 800e446:	3e0c      	subs	r6, #12
 800e448:	4630      	mov	r0, r6
 800e44a:	3e10      	subs	r6, #16
 800e44c:	f7fd ff2c 	bl	800c2a8 <rosidl_runtime_c__uint8__Sequence__fini>
 800e450:	3d01      	subs	r5, #1
 800e452:	d1f9      	bne.n	800e448 <racs_services__srv__Control_Response__Sequence__init.part.0+0x50>
 800e454:	4648      	mov	r0, r9
 800e456:	9b02      	ldr	r3, [sp, #8]
 800e458:	4651      	mov	r1, sl
 800e45a:	4798      	blx	r3
 800e45c:	4620      	mov	r0, r4
 800e45e:	b006      	add	sp, #24
 800e460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e464:	46b9      	mov	r9, r7
 800e466:	2401      	movs	r4, #1
 800e468:	f8c8 7008 	str.w	r7, [r8, #8]
 800e46c:	e9c8 9700 	strd	r9, r7, [r8]
 800e470:	4620      	mov	r0, r4
 800e472:	b006      	add	sp, #24
 800e474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e478:	4604      	mov	r4, r0
 800e47a:	e7f9      	b.n	800e470 <racs_services__srv__Control_Response__Sequence__init.part.0+0x78>

0800e47c <racs_services__srv__Control_Request__init>:
 800e47c:	b538      	push	{r3, r4, r5, lr}
 800e47e:	b140      	cbz	r0, 800e492 <racs_services__srv__Control_Request__init+0x16>
 800e480:	1d05      	adds	r5, r0, #4
 800e482:	2100      	movs	r1, #0
 800e484:	4628      	mov	r0, r5
 800e486:	f7fd fef7 	bl	800c278 <rosidl_runtime_c__uint8__Sequence__init>
 800e48a:	4604      	mov	r4, r0
 800e48c:	b120      	cbz	r0, 800e498 <racs_services__srv__Control_Request__init+0x1c>
 800e48e:	4620      	mov	r0, r4
 800e490:	bd38      	pop	{r3, r4, r5, pc}
 800e492:	4604      	mov	r4, r0
 800e494:	4620      	mov	r0, r4
 800e496:	bd38      	pop	{r3, r4, r5, pc}
 800e498:	4628      	mov	r0, r5
 800e49a:	f7fd ff05 	bl	800c2a8 <rosidl_runtime_c__uint8__Sequence__fini>
 800e49e:	4620      	mov	r0, r4
 800e4a0:	bd38      	pop	{r3, r4, r5, pc}
 800e4a2:	bf00      	nop

0800e4a4 <racs_services__srv__Control_Request__fini>:
 800e4a4:	b110      	cbz	r0, 800e4ac <racs_services__srv__Control_Request__fini+0x8>
 800e4a6:	3004      	adds	r0, #4
 800e4a8:	f7fd befe 	b.w	800c2a8 <rosidl_runtime_c__uint8__Sequence__fini>
 800e4ac:	4770      	bx	lr
 800e4ae:	bf00      	nop

0800e4b0 <racs_services__srv__Control_Request__copy>:
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	460a      	mov	r2, r1
 800e4b4:	b150      	cbz	r0, 800e4cc <racs_services__srv__Control_Request__copy+0x1c>
 800e4b6:	b149      	cbz	r1, 800e4cc <racs_services__srv__Control_Request__copy+0x1c>
 800e4b8:	f8b0 c000 	ldrh.w	ip, [r0]
 800e4bc:	3104      	adds	r1, #4
 800e4be:	3004      	adds	r0, #4
 800e4c0:	f8a2 c000 	strh.w	ip, [r2]
 800e4c4:	789b      	ldrb	r3, [r3, #2]
 800e4c6:	7093      	strb	r3, [r2, #2]
 800e4c8:	f7fd bf02 	b.w	800c2d0 <rosidl_runtime_c__uint8__Sequence__copy>
 800e4cc:	2000      	movs	r0, #0
 800e4ce:	4770      	bx	lr

0800e4d0 <racs_services__srv__Control_Request__Sequence__init>:
 800e4d0:	b108      	cbz	r0, 800e4d6 <racs_services__srv__Control_Request__Sequence__init+0x6>
 800e4d2:	f7ff bf4f 	b.w	800e374 <racs_services__srv__Control_Request__Sequence__init.part.0>
 800e4d6:	4770      	bx	lr

0800e4d8 <racs_services__srv__Control_Request__Sequence__fini>:
 800e4d8:	b320      	cbz	r0, 800e524 <racs_services__srv__Control_Request__Sequence__fini+0x4c>
 800e4da:	b530      	push	{r4, r5, lr}
 800e4dc:	b087      	sub	sp, #28
 800e4de:	4605      	mov	r5, r0
 800e4e0:	a801      	add	r0, sp, #4
 800e4e2:	f7fd fe0b 	bl	800c0fc <rcutils_get_default_allocator>
 800e4e6:	682b      	ldr	r3, [r5, #0]
 800e4e8:	b1b3      	cbz	r3, 800e518 <racs_services__srv__Control_Request__Sequence__fini+0x40>
 800e4ea:	68aa      	ldr	r2, [r5, #8]
 800e4ec:	b162      	cbz	r2, 800e508 <racs_services__srv__Control_Request__Sequence__fini+0x30>
 800e4ee:	2400      	movs	r4, #0
 800e4f0:	eb13 1004 	adds.w	r0, r3, r4, lsl #4
 800e4f4:	f100 0004 	add.w	r0, r0, #4
 800e4f8:	d010      	beq.n	800e51c <racs_services__srv__Control_Request__Sequence__fini+0x44>
 800e4fa:	f7fd fed5 	bl	800c2a8 <rosidl_runtime_c__uint8__Sequence__fini>
 800e4fe:	3401      	adds	r4, #1
 800e500:	68aa      	ldr	r2, [r5, #8]
 800e502:	682b      	ldr	r3, [r5, #0]
 800e504:	4294      	cmp	r4, r2
 800e506:	d3f3      	bcc.n	800e4f0 <racs_services__srv__Control_Request__Sequence__fini+0x18>
 800e508:	4618      	mov	r0, r3
 800e50a:	9a02      	ldr	r2, [sp, #8]
 800e50c:	9905      	ldr	r1, [sp, #20]
 800e50e:	4790      	blx	r2
 800e510:	2300      	movs	r3, #0
 800e512:	e9c5 3300 	strd	r3, r3, [r5]
 800e516:	60ab      	str	r3, [r5, #8]
 800e518:	b007      	add	sp, #28
 800e51a:	bd30      	pop	{r4, r5, pc}
 800e51c:	3401      	adds	r4, #1
 800e51e:	4294      	cmp	r4, r2
 800e520:	d3e6      	bcc.n	800e4f0 <racs_services__srv__Control_Request__Sequence__fini+0x18>
 800e522:	e7f1      	b.n	800e508 <racs_services__srv__Control_Request__Sequence__fini+0x30>
 800e524:	4770      	bx	lr
 800e526:	bf00      	nop

0800e528 <racs_services__srv__Control_Response__init>:
 800e528:	b538      	push	{r3, r4, r5, lr}
 800e52a:	b140      	cbz	r0, 800e53e <racs_services__srv__Control_Response__init+0x16>
 800e52c:	1d05      	adds	r5, r0, #4
 800e52e:	2100      	movs	r1, #0
 800e530:	4628      	mov	r0, r5
 800e532:	f7fd fea1 	bl	800c278 <rosidl_runtime_c__uint8__Sequence__init>
 800e536:	4604      	mov	r4, r0
 800e538:	b120      	cbz	r0, 800e544 <racs_services__srv__Control_Response__init+0x1c>
 800e53a:	4620      	mov	r0, r4
 800e53c:	bd38      	pop	{r3, r4, r5, pc}
 800e53e:	4604      	mov	r4, r0
 800e540:	4620      	mov	r0, r4
 800e542:	bd38      	pop	{r3, r4, r5, pc}
 800e544:	4628      	mov	r0, r5
 800e546:	f7fd feaf 	bl	800c2a8 <rosidl_runtime_c__uint8__Sequence__fini>
 800e54a:	4620      	mov	r0, r4
 800e54c:	bd38      	pop	{r3, r4, r5, pc}
 800e54e:	bf00      	nop

0800e550 <racs_services__srv__Control_Response__fini>:
 800e550:	b110      	cbz	r0, 800e558 <racs_services__srv__Control_Response__fini+0x8>
 800e552:	3004      	adds	r0, #4
 800e554:	f7fd bea8 	b.w	800c2a8 <rosidl_runtime_c__uint8__Sequence__fini>
 800e558:	4770      	bx	lr
 800e55a:	bf00      	nop

0800e55c <racs_services__srv__Control_Response__copy>:
 800e55c:	b130      	cbz	r0, 800e56c <racs_services__srv__Control_Response__copy+0x10>
 800e55e:	b129      	cbz	r1, 800e56c <racs_services__srv__Control_Response__copy+0x10>
 800e560:	f850 3b04 	ldr.w	r3, [r0], #4
 800e564:	f841 3b04 	str.w	r3, [r1], #4
 800e568:	f7fd beb2 	b.w	800c2d0 <rosidl_runtime_c__uint8__Sequence__copy>
 800e56c:	2000      	movs	r0, #0
 800e56e:	4770      	bx	lr

0800e570 <racs_services__srv__Control_Response__Sequence__init>:
 800e570:	b108      	cbz	r0, 800e576 <racs_services__srv__Control_Response__Sequence__init+0x6>
 800e572:	f7ff bf41 	b.w	800e3f8 <racs_services__srv__Control_Response__Sequence__init.part.0>
 800e576:	4770      	bx	lr

0800e578 <racs_services__srv__Control_Response__Sequence__fini>:
 800e578:	b320      	cbz	r0, 800e5c4 <racs_services__srv__Control_Response__Sequence__fini+0x4c>
 800e57a:	b530      	push	{r4, r5, lr}
 800e57c:	b087      	sub	sp, #28
 800e57e:	4605      	mov	r5, r0
 800e580:	a801      	add	r0, sp, #4
 800e582:	f7fd fdbb 	bl	800c0fc <rcutils_get_default_allocator>
 800e586:	682b      	ldr	r3, [r5, #0]
 800e588:	b1b3      	cbz	r3, 800e5b8 <racs_services__srv__Control_Response__Sequence__fini+0x40>
 800e58a:	68aa      	ldr	r2, [r5, #8]
 800e58c:	b162      	cbz	r2, 800e5a8 <racs_services__srv__Control_Response__Sequence__fini+0x30>
 800e58e:	2400      	movs	r4, #0
 800e590:	eb13 1004 	adds.w	r0, r3, r4, lsl #4
 800e594:	f100 0004 	add.w	r0, r0, #4
 800e598:	d010      	beq.n	800e5bc <racs_services__srv__Control_Response__Sequence__fini+0x44>
 800e59a:	f7fd fe85 	bl	800c2a8 <rosidl_runtime_c__uint8__Sequence__fini>
 800e59e:	3401      	adds	r4, #1
 800e5a0:	68aa      	ldr	r2, [r5, #8]
 800e5a2:	682b      	ldr	r3, [r5, #0]
 800e5a4:	4294      	cmp	r4, r2
 800e5a6:	d3f3      	bcc.n	800e590 <racs_services__srv__Control_Response__Sequence__fini+0x18>
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	9a02      	ldr	r2, [sp, #8]
 800e5ac:	9905      	ldr	r1, [sp, #20]
 800e5ae:	4790      	blx	r2
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	e9c5 3300 	strd	r3, r3, [r5]
 800e5b6:	60ab      	str	r3, [r5, #8]
 800e5b8:	b007      	add	sp, #28
 800e5ba:	bd30      	pop	{r4, r5, pc}
 800e5bc:	3401      	adds	r4, #1
 800e5be:	4294      	cmp	r4, r2
 800e5c0:	d3e6      	bcc.n	800e590 <racs_services__srv__Control_Response__Sequence__fini+0x18>
 800e5c2:	e7f1      	b.n	800e5a8 <racs_services__srv__Control_Response__Sequence__fini+0x30>
 800e5c4:	4770      	bx	lr
 800e5c6:	bf00      	nop

0800e5c8 <racs_services__srv__Control_Event__init>:
 800e5c8:	b570      	push	{r4, r5, r6, lr}
 800e5ca:	4604      	mov	r4, r0
 800e5cc:	b086      	sub	sp, #24
 800e5ce:	2800      	cmp	r0, #0
 800e5d0:	d052      	beq.n	800e678 <racs_services__srv__Control_Event__init+0xb0>
 800e5d2:	f005 fd11 	bl	8013ff8 <service_msgs__msg__ServiceEventInfo__init>
 800e5d6:	4606      	mov	r6, r0
 800e5d8:	b178      	cbz	r0, 800e5fa <racs_services__srv__Control_Event__init+0x32>
 800e5da:	2500      	movs	r5, #0
 800e5dc:	a801      	add	r0, sp, #4
 800e5de:	f7fd fd8d 	bl	800c0fc <rcutils_get_default_allocator>
 800e5e2:	a801      	add	r0, sp, #4
 800e5e4:	6325      	str	r5, [r4, #48]	; 0x30
 800e5e6:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
 800e5ea:	f7fd fd87 	bl	800c0fc <rcutils_get_default_allocator>
 800e5ee:	63e5      	str	r5, [r4, #60]	; 0x3c
 800e5f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e5f4:	4630      	mov	r0, r6
 800e5f6:	b006      	add	sp, #24
 800e5f8:	bd70      	pop	{r4, r5, r6, pc}
 800e5fa:	4620      	mov	r0, r4
 800e5fc:	f005 fd0e 	bl	801401c <service_msgs__msg__ServiceEventInfo__fini>
 800e600:	a801      	add	r0, sp, #4
 800e602:	f7fd fd7b 	bl	800c0fc <rcutils_get_default_allocator>
 800e606:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e608:	b1b3      	cbz	r3, 800e638 <racs_services__srv__Control_Event__init+0x70>
 800e60a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e60c:	b162      	cbz	r2, 800e628 <racs_services__srv__Control_Event__init+0x60>
 800e60e:	4635      	mov	r5, r6
 800e610:	eb13 1005 	adds.w	r0, r3, r5, lsl #4
 800e614:	f100 0004 	add.w	r0, r0, #4
 800e618:	d032      	beq.n	800e680 <racs_services__srv__Control_Event__init+0xb8>
 800e61a:	f7fd fe45 	bl	800c2a8 <rosidl_runtime_c__uint8__Sequence__fini>
 800e61e:	3501      	adds	r5, #1
 800e620:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e622:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e624:	4295      	cmp	r5, r2
 800e626:	d3f3      	bcc.n	800e610 <racs_services__srv__Control_Event__init+0x48>
 800e628:	4618      	mov	r0, r3
 800e62a:	9a02      	ldr	r2, [sp, #8]
 800e62c:	9905      	ldr	r1, [sp, #20]
 800e62e:	4790      	blx	r2
 800e630:	2300      	movs	r3, #0
 800e632:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 800e636:	6323      	str	r3, [r4, #48]	; 0x30
 800e638:	a801      	add	r0, sp, #4
 800e63a:	f7fd fd5f 	bl	800c0fc <rcutils_get_default_allocator>
 800e63e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e640:	2b00      	cmp	r3, #0
 800e642:	d0d7      	beq.n	800e5f4 <racs_services__srv__Control_Event__init+0x2c>
 800e644:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e646:	b162      	cbz	r2, 800e662 <racs_services__srv__Control_Event__init+0x9a>
 800e648:	2500      	movs	r5, #0
 800e64a:	eb13 1005 	adds.w	r0, r3, r5, lsl #4
 800e64e:	f100 0004 	add.w	r0, r0, #4
 800e652:	d019      	beq.n	800e688 <racs_services__srv__Control_Event__init+0xc0>
 800e654:	f7fd fe28 	bl	800c2a8 <rosidl_runtime_c__uint8__Sequence__fini>
 800e658:	3501      	adds	r5, #1
 800e65a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e65c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e65e:	4295      	cmp	r5, r2
 800e660:	d3f3      	bcc.n	800e64a <racs_services__srv__Control_Event__init+0x82>
 800e662:	4618      	mov	r0, r3
 800e664:	9a02      	ldr	r2, [sp, #8]
 800e666:	9905      	ldr	r1, [sp, #20]
 800e668:	4790      	blx	r2
 800e66a:	2300      	movs	r3, #0
 800e66c:	4630      	mov	r0, r6
 800e66e:	63e3      	str	r3, [r4, #60]	; 0x3c
 800e670:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 800e674:	b006      	add	sp, #24
 800e676:	bd70      	pop	{r4, r5, r6, pc}
 800e678:	4606      	mov	r6, r0
 800e67a:	4630      	mov	r0, r6
 800e67c:	b006      	add	sp, #24
 800e67e:	bd70      	pop	{r4, r5, r6, pc}
 800e680:	3501      	adds	r5, #1
 800e682:	4295      	cmp	r5, r2
 800e684:	d3c4      	bcc.n	800e610 <racs_services__srv__Control_Event__init+0x48>
 800e686:	e7cf      	b.n	800e628 <racs_services__srv__Control_Event__init+0x60>
 800e688:	3501      	adds	r5, #1
 800e68a:	4295      	cmp	r5, r2
 800e68c:	d3dd      	bcc.n	800e64a <racs_services__srv__Control_Event__init+0x82>
 800e68e:	e7e8      	b.n	800e662 <racs_services__srv__Control_Event__init+0x9a>

0800e690 <racs_services__srv__Control_Event__fini>:
 800e690:	2800      	cmp	r0, #0
 800e692:	d046      	beq.n	800e722 <racs_services__srv__Control_Event__fini+0x92>
 800e694:	b530      	push	{r4, r5, lr}
 800e696:	b087      	sub	sp, #28
 800e698:	4604      	mov	r4, r0
 800e69a:	f005 fcbf 	bl	801401c <service_msgs__msg__ServiceEventInfo__fini>
 800e69e:	a801      	add	r0, sp, #4
 800e6a0:	f7fd fd2c 	bl	800c0fc <rcutils_get_default_allocator>
 800e6a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e6a6:	b1b3      	cbz	r3, 800e6d6 <racs_services__srv__Control_Event__fini+0x46>
 800e6a8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e6aa:	b162      	cbz	r2, 800e6c6 <racs_services__srv__Control_Event__fini+0x36>
 800e6ac:	2500      	movs	r5, #0
 800e6ae:	eb13 1005 	adds.w	r0, r3, r5, lsl #4
 800e6b2:	f100 0004 	add.w	r0, r0, #4
 800e6b6:	d030      	beq.n	800e71a <racs_services__srv__Control_Event__fini+0x8a>
 800e6b8:	f7fd fdf6 	bl	800c2a8 <rosidl_runtime_c__uint8__Sequence__fini>
 800e6bc:	3501      	adds	r5, #1
 800e6be:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e6c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e6c2:	4295      	cmp	r5, r2
 800e6c4:	d3f3      	bcc.n	800e6ae <racs_services__srv__Control_Event__fini+0x1e>
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	9a02      	ldr	r2, [sp, #8]
 800e6ca:	9905      	ldr	r1, [sp, #20]
 800e6cc:	4790      	blx	r2
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 800e6d4:	6323      	str	r3, [r4, #48]	; 0x30
 800e6d6:	a801      	add	r0, sp, #4
 800e6d8:	f7fd fd10 	bl	800c0fc <rcutils_get_default_allocator>
 800e6dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e6de:	b1b3      	cbz	r3, 800e70e <racs_services__srv__Control_Event__fini+0x7e>
 800e6e0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e6e2:	b162      	cbz	r2, 800e6fe <racs_services__srv__Control_Event__fini+0x6e>
 800e6e4:	2500      	movs	r5, #0
 800e6e6:	eb13 1005 	adds.w	r0, r3, r5, lsl #4
 800e6ea:	f100 0004 	add.w	r0, r0, #4
 800e6ee:	d010      	beq.n	800e712 <racs_services__srv__Control_Event__fini+0x82>
 800e6f0:	f7fd fdda 	bl	800c2a8 <rosidl_runtime_c__uint8__Sequence__fini>
 800e6f4:	3501      	adds	r5, #1
 800e6f6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e6f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e6fa:	4295      	cmp	r5, r2
 800e6fc:	d3f3      	bcc.n	800e6e6 <racs_services__srv__Control_Event__fini+0x56>
 800e6fe:	4618      	mov	r0, r3
 800e700:	9a02      	ldr	r2, [sp, #8]
 800e702:	9905      	ldr	r1, [sp, #20]
 800e704:	4790      	blx	r2
 800e706:	2300      	movs	r3, #0
 800e708:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 800e70c:	63e3      	str	r3, [r4, #60]	; 0x3c
 800e70e:	b007      	add	sp, #28
 800e710:	bd30      	pop	{r4, r5, pc}
 800e712:	3501      	adds	r5, #1
 800e714:	4295      	cmp	r5, r2
 800e716:	d3e6      	bcc.n	800e6e6 <racs_services__srv__Control_Event__fini+0x56>
 800e718:	e7f1      	b.n	800e6fe <racs_services__srv__Control_Event__fini+0x6e>
 800e71a:	3501      	adds	r5, #1
 800e71c:	4295      	cmp	r5, r2
 800e71e:	d3c6      	bcc.n	800e6ae <racs_services__srv__Control_Event__fini+0x1e>
 800e720:	e7d1      	b.n	800e6c6 <racs_services__srv__Control_Event__fini+0x36>
 800e722:	4770      	bx	lr

0800e724 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control>:
 800e724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e728:	2900      	cmp	r1, #0
 800e72a:	d04d      	beq.n	800e7c8 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0xa4>
 800e72c:	4605      	mov	r5, r0
 800e72e:	2800      	cmp	r0, #0
 800e730:	d04a      	beq.n	800e7c8 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0xa4>
 800e732:	460e      	mov	r6, r1
 800e734:	4698      	mov	r8, r3
 800e736:	2040      	movs	r0, #64	; 0x40
 800e738:	680b      	ldr	r3, [r1, #0]
 800e73a:	6909      	ldr	r1, [r1, #16]
 800e73c:	4617      	mov	r7, r2
 800e73e:	4798      	blx	r3
 800e740:	4604      	mov	r4, r0
 800e742:	f7ff ff41 	bl	800e5c8 <racs_services__srv__Control_Event__init>
 800e746:	4684      	mov	ip, r0
 800e748:	b370      	cbz	r0, 800e7a8 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x84>
 800e74a:	782b      	ldrb	r3, [r5, #0]
 800e74c:	7023      	strb	r3, [r4, #0]
 800e74e:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 800e752:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 800e756:	e9c4 2301 	strd	r2, r3, [r4, #4]
 800e75a:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800e75e:	68e8      	ldr	r0, [r5, #12]
 800e760:	6929      	ldr	r1, [r5, #16]
 800e762:	696a      	ldr	r2, [r5, #20]
 800e764:	69ab      	ldr	r3, [r5, #24]
 800e766:	60e0      	str	r0, [r4, #12]
 800e768:	6121      	str	r1, [r4, #16]
 800e76a:	6162      	str	r2, [r4, #20]
 800e76c:	61a3      	str	r3, [r4, #24]
 800e76e:	b157      	cbz	r7, 800e786 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x62>
 800e770:	2101      	movs	r1, #1
 800e772:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800e776:	f7ff feab 	bl	800e4d0 <racs_services__srv__Control_Request__Sequence__init>
 800e77a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800e77c:	4638      	mov	r0, r7
 800e77e:	f7ff fe97 	bl	800e4b0 <racs_services__srv__Control_Request__copy>
 800e782:	4603      	mov	r3, r0
 800e784:	b1c0      	cbz	r0, 800e7b8 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x94>
 800e786:	f1b8 0f00 	cmp.w	r8, #0
 800e78a:	d00a      	beq.n	800e7a2 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x7e>
 800e78c:	2101      	movs	r1, #1
 800e78e:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800e792:	f7ff feed 	bl	800e570 <racs_services__srv__Control_Response__Sequence__init>
 800e796:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e798:	4640      	mov	r0, r8
 800e79a:	f7ff fedf 	bl	800e55c <racs_services__srv__Control_Response__copy>
 800e79e:	4603      	mov	r3, r0
 800e7a0:	b150      	cbz	r0, 800e7b8 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x94>
 800e7a2:	4620      	mov	r0, r4
 800e7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7a8:	4620      	mov	r0, r4
 800e7aa:	4664      	mov	r4, ip
 800e7ac:	6873      	ldr	r3, [r6, #4]
 800e7ae:	6931      	ldr	r1, [r6, #16]
 800e7b0:	4798      	blx	r3
 800e7b2:	4620      	mov	r0, r4
 800e7b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7b8:	4620      	mov	r0, r4
 800e7ba:	461c      	mov	r4, r3
 800e7bc:	6872      	ldr	r2, [r6, #4]
 800e7be:	6931      	ldr	r1, [r6, #16]
 800e7c0:	4790      	blx	r2
 800e7c2:	4620      	mov	r0, r4
 800e7c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7c8:	2400      	movs	r4, #0
 800e7ca:	4620      	mov	r0, r4
 800e7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e7d0 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control>:
 800e7d0:	b1b9      	cbz	r1, 800e802 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x32>
 800e7d2:	b538      	push	{r3, r4, r5, lr}
 800e7d4:	4605      	mov	r5, r0
 800e7d6:	b190      	cbz	r0, 800e7fe <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x2e>
 800e7d8:	460c      	mov	r4, r1
 800e7da:	f7ff ff59 	bl	800e690 <racs_services__srv__Control_Event__fini>
 800e7de:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800e7e0:	b110      	cbz	r0, 800e7e8 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x18>
 800e7e2:	6863      	ldr	r3, [r4, #4]
 800e7e4:	6921      	ldr	r1, [r4, #16]
 800e7e6:	4798      	blx	r3
 800e7e8:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800e7ea:	b110      	cbz	r0, 800e7f2 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x22>
 800e7ec:	6863      	ldr	r3, [r4, #4]
 800e7ee:	6921      	ldr	r1, [r4, #16]
 800e7f0:	4798      	blx	r3
 800e7f2:	4628      	mov	r0, r5
 800e7f4:	6863      	ldr	r3, [r4, #4]
 800e7f6:	6921      	ldr	r1, [r4, #16]
 800e7f8:	4798      	blx	r3
 800e7fa:	2001      	movs	r0, #1
 800e7fc:	bd38      	pop	{r3, r4, r5, pc}
 800e7fe:	2000      	movs	r0, #0
 800e800:	bd38      	pop	{r3, r4, r5, pc}
 800e802:	2000      	movs	r0, #0
 800e804:	4770      	bx	lr
 800e806:	bf00      	nop

0800e808 <racs_services__srv__Setup_Event__get_type_description.part.0>:
 800e808:	b510      	push	{r4, lr}
 800e80a:	2000      	movs	r0, #0
 800e80c:	4c13      	ldr	r4, [pc, #76]	; (800e85c <racs_services__srv__Setup_Event__get_type_description.part.0+0x54>)
 800e80e:	f005 fc0f 	bl	8014030 <builtin_interfaces__msg__Time__get_type_description>
 800e812:	300c      	adds	r0, #12
 800e814:	4b12      	ldr	r3, [pc, #72]	; (800e860 <racs_services__srv__Setup_Event__get_type_description.part.0+0x58>)
 800e816:	c807      	ldmia	r0, {r0, r1, r2}
 800e818:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e81c:	7823      	ldrb	r3, [r4, #0]
 800e81e:	b90b      	cbnz	r3, 800e824 <racs_services__srv__Setup_Event__get_type_description.part.0+0x1c>
 800e820:	2301      	movs	r3, #1
 800e822:	7023      	strb	r3, [r4, #0]
 800e824:	4a0f      	ldr	r2, [pc, #60]	; (800e864 <racs_services__srv__Setup_Event__get_type_description.part.0+0x5c>)
 800e826:	4b10      	ldr	r3, [pc, #64]	; (800e868 <racs_services__srv__Setup_Event__get_type_description.part.0+0x60>)
 800e828:	4c10      	ldr	r4, [pc, #64]	; (800e86c <racs_services__srv__Setup_Event__get_type_description.part.0+0x64>)
 800e82a:	ca07      	ldmia	r2, {r0, r1, r2}
 800e82c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e830:	7823      	ldrb	r3, [r4, #0]
 800e832:	b90b      	cbnz	r3, 800e838 <racs_services__srv__Setup_Event__get_type_description.part.0+0x30>
 800e834:	2301      	movs	r3, #1
 800e836:	7023      	strb	r3, [r4, #0]
 800e838:	4b0d      	ldr	r3, [pc, #52]	; (800e870 <racs_services__srv__Setup_Event__get_type_description.part.0+0x68>)
 800e83a:	4c0e      	ldr	r4, [pc, #56]	; (800e874 <racs_services__srv__Setup_Event__get_type_description.part.0+0x6c>)
 800e83c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e840:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e844:	2000      	movs	r0, #0
 800e846:	3418      	adds	r4, #24
 800e848:	f005 fb92 	bl	8013f70 <service_msgs__msg__ServiceEventInfo__get_type_description>
 800e84c:	300c      	adds	r0, #12
 800e84e:	4b0a      	ldr	r3, [pc, #40]	; (800e878 <racs_services__srv__Setup_Event__get_type_description.part.0+0x70>)
 800e850:	c807      	ldmia	r0, {r0, r1, r2}
 800e852:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e856:	2201      	movs	r2, #1
 800e858:	701a      	strb	r2, [r3, #0]
 800e85a:	bd10      	pop	{r4, pc}
 800e85c:	2000bb48 	.word	0x2000bb48
 800e860:	20001500 	.word	0x20001500
 800e864:	0801b38c 	.word	0x0801b38c
 800e868:	20001518 	.word	0x20001518
 800e86c:	2000bb46 	.word	0x2000bb46
 800e870:	0801b368 	.word	0x0801b368
 800e874:	20001530 	.word	0x20001530
 800e878:	2000bb45 	.word	0x2000bb45

0800e87c <racs_services__srv__Setup__get_type_hash>:
 800e87c:	4800      	ldr	r0, [pc, #0]	; (800e880 <racs_services__srv__Setup__get_type_hash+0x4>)
 800e87e:	4770      	bx	lr
 800e880:	200013cc 	.word	0x200013cc

0800e884 <racs_services__srv__Setup_Request__get_type_hash>:
 800e884:	4800      	ldr	r0, [pc, #0]	; (800e888 <racs_services__srv__Setup_Request__get_type_hash+0x4>)
 800e886:	4770      	bx	lr
 800e888:	200013a8 	.word	0x200013a8

0800e88c <racs_services__srv__Setup_Response__get_type_hash>:
 800e88c:	4800      	ldr	r0, [pc, #0]	; (800e890 <racs_services__srv__Setup_Response__get_type_hash+0x4>)
 800e88e:	4770      	bx	lr
 800e890:	20001384 	.word	0x20001384

0800e894 <racs_services__srv__Setup_Event__get_type_hash>:
 800e894:	4800      	ldr	r0, [pc, #0]	; (800e898 <racs_services__srv__Setup_Event__get_type_hash+0x4>)
 800e896:	4770      	bx	lr
 800e898:	20001360 	.word	0x20001360

0800e89c <racs_services__srv__Setup__get_type_description>:
 800e89c:	b538      	push	{r3, r4, r5, lr}
 800e89e:	4d1c      	ldr	r5, [pc, #112]	; (800e910 <racs_services__srv__Setup__get_type_description+0x74>)
 800e8a0:	7828      	ldrb	r0, [r5, #0]
 800e8a2:	b108      	cbz	r0, 800e8a8 <racs_services__srv__Setup__get_type_description+0xc>
 800e8a4:	481b      	ldr	r0, [pc, #108]	; (800e914 <racs_services__srv__Setup__get_type_description+0x78>)
 800e8a6:	bd38      	pop	{r3, r4, r5, pc}
 800e8a8:	f005 fbc2 	bl	8014030 <builtin_interfaces__msg__Time__get_type_description>
 800e8ac:	300c      	adds	r0, #12
 800e8ae:	4b1a      	ldr	r3, [pc, #104]	; (800e918 <racs_services__srv__Setup__get_type_description+0x7c>)
 800e8b0:	c807      	ldmia	r0, {r0, r1, r2}
 800e8b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e8b6:	4b19      	ldr	r3, [pc, #100]	; (800e91c <racs_services__srv__Setup__get_type_description+0x80>)
 800e8b8:	781b      	ldrb	r3, [r3, #0]
 800e8ba:	b32b      	cbz	r3, 800e908 <racs_services__srv__Setup__get_type_description+0x6c>
 800e8bc:	4a18      	ldr	r2, [pc, #96]	; (800e920 <racs_services__srv__Setup__get_type_description+0x84>)
 800e8be:	4b19      	ldr	r3, [pc, #100]	; (800e924 <racs_services__srv__Setup__get_type_description+0x88>)
 800e8c0:	4c19      	ldr	r4, [pc, #100]	; (800e928 <racs_services__srv__Setup__get_type_description+0x8c>)
 800e8c2:	ca07      	ldmia	r2, {r0, r1, r2}
 800e8c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e8c8:	7823      	ldrb	r3, [r4, #0]
 800e8ca:	b90b      	cbnz	r3, 800e8d0 <racs_services__srv__Setup__get_type_description+0x34>
 800e8cc:	2301      	movs	r3, #1
 800e8ce:	7023      	strb	r3, [r4, #0]
 800e8d0:	4a16      	ldr	r2, [pc, #88]	; (800e92c <racs_services__srv__Setup__get_type_description+0x90>)
 800e8d2:	4b17      	ldr	r3, [pc, #92]	; (800e930 <racs_services__srv__Setup__get_type_description+0x94>)
 800e8d4:	4c17      	ldr	r4, [pc, #92]	; (800e934 <racs_services__srv__Setup__get_type_description+0x98>)
 800e8d6:	ca07      	ldmia	r2, {r0, r1, r2}
 800e8d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e8dc:	7823      	ldrb	r3, [r4, #0]
 800e8de:	b90b      	cbnz	r3, 800e8e4 <racs_services__srv__Setup__get_type_description+0x48>
 800e8e0:	2301      	movs	r3, #1
 800e8e2:	7023      	strb	r3, [r4, #0]
 800e8e4:	4b14      	ldr	r3, [pc, #80]	; (800e938 <racs_services__srv__Setup__get_type_description+0x9c>)
 800e8e6:	4c15      	ldr	r4, [pc, #84]	; (800e93c <racs_services__srv__Setup__get_type_description+0xa0>)
 800e8e8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e8ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e8f0:	2000      	movs	r0, #0
 800e8f2:	3418      	adds	r4, #24
 800e8f4:	f005 fb3c 	bl	8013f70 <service_msgs__msg__ServiceEventInfo__get_type_description>
 800e8f8:	300c      	adds	r0, #12
 800e8fa:	2301      	movs	r3, #1
 800e8fc:	c807      	ldmia	r0, {r0, r1, r2}
 800e8fe:	702b      	strb	r3, [r5, #0]
 800e900:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e904:	4803      	ldr	r0, [pc, #12]	; (800e914 <racs_services__srv__Setup__get_type_description+0x78>)
 800e906:	bd38      	pop	{r3, r4, r5, pc}
 800e908:	f7ff ff7e 	bl	800e808 <racs_services__srv__Setup_Event__get_type_description.part.0>
 800e90c:	e7d6      	b.n	800e8bc <racs_services__srv__Setup__get_type_description+0x20>
 800e90e:	bf00      	nop
 800e910:	2000bb49 	.word	0x2000bb49
 800e914:	0801b3a4 	.word	0x0801b3a4
 800e918:	20001958 	.word	0x20001958
 800e91c:	2000bb45 	.word	0x2000bb45
 800e920:	0801b344 	.word	0x0801b344
 800e924:	20001970 	.word	0x20001970
 800e928:	2000bb48 	.word	0x2000bb48
 800e92c:	0801b38c 	.word	0x0801b38c
 800e930:	20001988 	.word	0x20001988
 800e934:	2000bb46 	.word	0x2000bb46
 800e938:	0801b368 	.word	0x0801b368
 800e93c:	200019a0 	.word	0x200019a0

0800e940 <racs_services__srv__Setup_Request__get_type_description>:
 800e940:	4b03      	ldr	r3, [pc, #12]	; (800e950 <racs_services__srv__Setup_Request__get_type_description+0x10>)
 800e942:	781a      	ldrb	r2, [r3, #0]
 800e944:	b90a      	cbnz	r2, 800e94a <racs_services__srv__Setup_Request__get_type_description+0xa>
 800e946:	2201      	movs	r2, #1
 800e948:	701a      	strb	r2, [r3, #0]
 800e94a:	4802      	ldr	r0, [pc, #8]	; (800e954 <racs_services__srv__Setup_Request__get_type_description+0x14>)
 800e94c:	4770      	bx	lr
 800e94e:	bf00      	nop
 800e950:	2000bb48 	.word	0x2000bb48
 800e954:	0801b380 	.word	0x0801b380

0800e958 <racs_services__srv__Setup_Response__get_type_description>:
 800e958:	4b03      	ldr	r3, [pc, #12]	; (800e968 <racs_services__srv__Setup_Response__get_type_description+0x10>)
 800e95a:	781a      	ldrb	r2, [r3, #0]
 800e95c:	b90a      	cbnz	r2, 800e962 <racs_services__srv__Setup_Response__get_type_description+0xa>
 800e95e:	2201      	movs	r2, #1
 800e960:	701a      	strb	r2, [r3, #0]
 800e962:	4802      	ldr	r0, [pc, #8]	; (800e96c <racs_services__srv__Setup_Response__get_type_description+0x14>)
 800e964:	4770      	bx	lr
 800e966:	bf00      	nop
 800e968:	2000bb46 	.word	0x2000bb46
 800e96c:	0801b35c 	.word	0x0801b35c

0800e970 <racs_services__srv__Setup_Event__get_type_description>:
 800e970:	b508      	push	{r3, lr}
 800e972:	4b04      	ldr	r3, [pc, #16]	; (800e984 <racs_services__srv__Setup_Event__get_type_description+0x14>)
 800e974:	781b      	ldrb	r3, [r3, #0]
 800e976:	b10b      	cbz	r3, 800e97c <racs_services__srv__Setup_Event__get_type_description+0xc>
 800e978:	4803      	ldr	r0, [pc, #12]	; (800e988 <racs_services__srv__Setup_Event__get_type_description+0x18>)
 800e97a:	bd08      	pop	{r3, pc}
 800e97c:	f7ff ff44 	bl	800e808 <racs_services__srv__Setup_Event__get_type_description.part.0>
 800e980:	4801      	ldr	r0, [pc, #4]	; (800e988 <racs_services__srv__Setup_Event__get_type_description+0x18>)
 800e982:	bd08      	pop	{r3, pc}
 800e984:	2000bb45 	.word	0x2000bb45
 800e988:	0801b338 	.word	0x0801b338

0800e98c <racs_services__srv__Setup__get_type_description_sources>:
 800e98c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e990:	4b2c      	ldr	r3, [pc, #176]	; (800ea44 <racs_services__srv__Setup__get_type_description_sources+0xb8>)
 800e992:	f893 9000 	ldrb.w	r9, [r3]
 800e996:	f1b9 0f00 	cmp.w	r9, #0
 800e99a:	d002      	beq.n	800e9a2 <racs_services__srv__Setup__get_type_description_sources+0x16>
 800e99c:	482a      	ldr	r0, [pc, #168]	; (800ea48 <racs_services__srv__Setup__get_type_description_sources+0xbc>)
 800e99e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9a2:	4d2a      	ldr	r5, [pc, #168]	; (800ea4c <racs_services__srv__Setup__get_type_description_sources+0xc0>)
 800e9a4:	4c2a      	ldr	r4, [pc, #168]	; (800ea50 <racs_services__srv__Setup__get_type_description_sources+0xc4>)
 800e9a6:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 800ea58 <racs_services__srv__Setup__get_type_description_sources+0xcc>
 800e9aa:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800ea5c <racs_services__srv__Setup__get_type_description_sources+0xd0>
 800e9ae:	4e29      	ldr	r6, [pc, #164]	; (800ea54 <racs_services__srv__Setup__get_type_description_sources+0xc8>)
 800e9b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e9b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e9b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e9b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e9b8:	682b      	ldr	r3, [r5, #0]
 800e9ba:	4625      	mov	r5, r4
 800e9bc:	4648      	mov	r0, r9
 800e9be:	f104 0a28 	add.w	sl, r4, #40	; 0x28
 800e9c2:	f845 3b04 	str.w	r3, [r5], #4
 800e9c6:	f104 074c 	add.w	r7, r4, #76	; 0x4c
 800e9ca:	f005 fb3d 	bl	8014048 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 800e9ce:	4684      	mov	ip, r0
 800e9d0:	f104 0e70 	add.w	lr, r4, #112	; 0x70
 800e9d4:	3494      	adds	r4, #148	; 0x94
 800e9d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e9da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e9dc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e9e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e9e2:	f8dc 3000 	ldr.w	r3, [ip]
 800e9e6:	602b      	str	r3, [r5, #0]
 800e9e8:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 800e9ec:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 800e9f0:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 800e9f4:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 800e9f8:	f8db 3000 	ldr.w	r3, [fp]
 800e9fc:	f8ca 3000 	str.w	r3, [sl]
 800ea00:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800ea04:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800ea06:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800ea0a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800ea0c:	f8d8 3000 	ldr.w	r3, [r8]
 800ea10:	603b      	str	r3, [r7, #0]
 800ea12:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ea14:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ea18:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ea1a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ea1e:	6833      	ldr	r3, [r6, #0]
 800ea20:	4648      	mov	r0, r9
 800ea22:	f8ce 3000 	str.w	r3, [lr]
 800ea26:	f005 fabb 	bl	8013fa0 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 800ea2a:	2301      	movs	r3, #1
 800ea2c:	4a05      	ldr	r2, [pc, #20]	; (800ea44 <racs_services__srv__Setup__get_type_description_sources+0xb8>)
 800ea2e:	4605      	mov	r5, r0
 800ea30:	7013      	strb	r3, [r2, #0]
 800ea32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ea36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ea3a:	682b      	ldr	r3, [r5, #0]
 800ea3c:	4802      	ldr	r0, [pc, #8]	; (800ea48 <racs_services__srv__Setup__get_type_description_sources+0xbc>)
 800ea3e:	6023      	str	r3, [r4, #0]
 800ea40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea44:	2000bb44 	.word	0x2000bb44
 800ea48:	0801b47c 	.word	0x0801b47c
 800ea4c:	0801b434 	.word	0x0801b434
 800ea50:	2000bc00 	.word	0x2000bc00
 800ea54:	0801b3ec 	.word	0x0801b3ec
 800ea58:	0801b3c8 	.word	0x0801b3c8
 800ea5c:	0801b410 	.word	0x0801b410

0800ea60 <racs_services__srv__Setup_Request__get_type_description_sources>:
 800ea60:	4b09      	ldr	r3, [pc, #36]	; (800ea88 <racs_services__srv__Setup_Request__get_type_description_sources+0x28>)
 800ea62:	781a      	ldrb	r2, [r3, #0]
 800ea64:	b96a      	cbnz	r2, 800ea82 <racs_services__srv__Setup_Request__get_type_description_sources+0x22>
 800ea66:	2201      	movs	r2, #1
 800ea68:	b430      	push	{r4, r5}
 800ea6a:	4d08      	ldr	r5, [pc, #32]	; (800ea8c <racs_services__srv__Setup_Request__get_type_description_sources+0x2c>)
 800ea6c:	4c08      	ldr	r4, [pc, #32]	; (800ea90 <racs_services__srv__Setup_Request__get_type_description_sources+0x30>)
 800ea6e:	701a      	strb	r2, [r3, #0]
 800ea70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ea74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ea78:	682b      	ldr	r3, [r5, #0]
 800ea7a:	4806      	ldr	r0, [pc, #24]	; (800ea94 <racs_services__srv__Setup_Request__get_type_description_sources+0x34>)
 800ea7c:	6023      	str	r3, [r4, #0]
 800ea7e:	bc30      	pop	{r4, r5}
 800ea80:	4770      	bx	lr
 800ea82:	4804      	ldr	r0, [pc, #16]	; (800ea94 <racs_services__srv__Setup_Request__get_type_description_sources+0x34>)
 800ea84:	4770      	bx	lr
 800ea86:	bf00      	nop
 800ea88:	2000bb4b 	.word	0x2000bb4b
 800ea8c:	0801b410 	.word	0x0801b410
 800ea90:	2000bcfc 	.word	0x2000bcfc
 800ea94:	0801b470 	.word	0x0801b470

0800ea98 <racs_services__srv__Setup_Response__get_type_description_sources>:
 800ea98:	4b09      	ldr	r3, [pc, #36]	; (800eac0 <racs_services__srv__Setup_Response__get_type_description_sources+0x28>)
 800ea9a:	781a      	ldrb	r2, [r3, #0]
 800ea9c:	b96a      	cbnz	r2, 800eaba <racs_services__srv__Setup_Response__get_type_description_sources+0x22>
 800ea9e:	2201      	movs	r2, #1
 800eaa0:	b430      	push	{r4, r5}
 800eaa2:	4d08      	ldr	r5, [pc, #32]	; (800eac4 <racs_services__srv__Setup_Response__get_type_description_sources+0x2c>)
 800eaa4:	4c08      	ldr	r4, [pc, #32]	; (800eac8 <racs_services__srv__Setup_Response__get_type_description_sources+0x30>)
 800eaa6:	701a      	strb	r2, [r3, #0]
 800eaa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eaaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eaac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eaae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eab0:	682b      	ldr	r3, [r5, #0]
 800eab2:	4806      	ldr	r0, [pc, #24]	; (800eacc <racs_services__srv__Setup_Response__get_type_description_sources+0x34>)
 800eab4:	6023      	str	r3, [r4, #0]
 800eab6:	bc30      	pop	{r4, r5}
 800eab8:	4770      	bx	lr
 800eaba:	4804      	ldr	r0, [pc, #16]	; (800eacc <racs_services__srv__Setup_Response__get_type_description_sources+0x34>)
 800eabc:	4770      	bx	lr
 800eabe:	bf00      	nop
 800eac0:	2000bb4a 	.word	0x2000bb4a
 800eac4:	0801b3ec 	.word	0x0801b3ec
 800eac8:	2000bcd8 	.word	0x2000bcd8
 800eacc:	0801b464 	.word	0x0801b464

0800ead0 <racs_services__srv__Setup_Event__get_type_description_sources>:
 800ead0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ead4:	4e27      	ldr	r6, [pc, #156]	; (800eb74 <racs_services__srv__Setup_Event__get_type_description_sources+0xa4>)
 800ead6:	f896 8000 	ldrb.w	r8, [r6]
 800eada:	f1b8 0f00 	cmp.w	r8, #0
 800eade:	d002      	beq.n	800eae6 <racs_services__srv__Setup_Event__get_type_description_sources+0x16>
 800eae0:	4825      	ldr	r0, [pc, #148]	; (800eb78 <racs_services__srv__Setup_Event__get_type_description_sources+0xa8>)
 800eae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eae6:	4d25      	ldr	r5, [pc, #148]	; (800eb7c <racs_services__srv__Setup_Event__get_type_description_sources+0xac>)
 800eae8:	4c25      	ldr	r4, [pc, #148]	; (800eb80 <racs_services__srv__Setup_Event__get_type_description_sources+0xb0>)
 800eaea:	f8df a09c 	ldr.w	sl, [pc, #156]	; 800eb88 <racs_services__srv__Setup_Event__get_type_description_sources+0xb8>
 800eaee:	4f25      	ldr	r7, [pc, #148]	; (800eb84 <racs_services__srv__Setup_Event__get_type_description_sources+0xb4>)
 800eaf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eaf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eaf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eaf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eaf8:	682b      	ldr	r3, [r5, #0]
 800eafa:	4625      	mov	r5, r4
 800eafc:	4640      	mov	r0, r8
 800eafe:	f104 0928 	add.w	r9, r4, #40	; 0x28
 800eb02:	f845 3b04 	str.w	r3, [r5], #4
 800eb06:	f005 fa9f 	bl	8014048 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 800eb0a:	4684      	mov	ip, r0
 800eb0c:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 800eb10:	3470      	adds	r4, #112	; 0x70
 800eb12:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800eb16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800eb18:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800eb1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800eb1e:	f8dc 3000 	ldr.w	r3, [ip]
 800eb22:	602b      	str	r3, [r5, #0]
 800eb24:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 800eb28:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 800eb2c:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 800eb30:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 800eb34:	f8da 3000 	ldr.w	r3, [sl]
 800eb38:	f8c9 3000 	str.w	r3, [r9]
 800eb3c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800eb3e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800eb42:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800eb44:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800eb48:	683b      	ldr	r3, [r7, #0]
 800eb4a:	4640      	mov	r0, r8
 800eb4c:	f8ce 3000 	str.w	r3, [lr]
 800eb50:	f005 fa26 	bl	8013fa0 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 800eb54:	2301      	movs	r3, #1
 800eb56:	4684      	mov	ip, r0
 800eb58:	7033      	strb	r3, [r6, #0]
 800eb5a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800eb5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb60:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800eb64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb66:	f8dc 3000 	ldr.w	r3, [ip]
 800eb6a:	4803      	ldr	r0, [pc, #12]	; (800eb78 <racs_services__srv__Setup_Event__get_type_description_sources+0xa8>)
 800eb6c:	6023      	str	r3, [r4, #0]
 800eb6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb72:	bf00      	nop
 800eb74:	2000bb47 	.word	0x2000bb47
 800eb78:	0801b458 	.word	0x0801b458
 800eb7c:	0801b3c8 	.word	0x0801b3c8
 800eb80:	2000bb4c 	.word	0x2000bb4c
 800eb84:	0801b3ec 	.word	0x0801b3ec
 800eb88:	0801b410 	.word	0x0801b410

0800eb8c <racs_services__srv__Setup_Event__fini.part.0>:
 800eb8c:	b510      	push	{r4, lr}
 800eb8e:	b086      	sub	sp, #24
 800eb90:	4604      	mov	r4, r0
 800eb92:	f005 fa43 	bl	801401c <service_msgs__msg__ServiceEventInfo__fini>
 800eb96:	a801      	add	r0, sp, #4
 800eb98:	f7fd fab0 	bl	800c0fc <rcutils_get_default_allocator>
 800eb9c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800eb9e:	b130      	cbz	r0, 800ebae <racs_services__srv__Setup_Event__fini.part.0+0x22>
 800eba0:	9b02      	ldr	r3, [sp, #8]
 800eba2:	9905      	ldr	r1, [sp, #20]
 800eba4:	4798      	blx	r3
 800eba6:	2300      	movs	r3, #0
 800eba8:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 800ebac:	6323      	str	r3, [r4, #48]	; 0x30
 800ebae:	a801      	add	r0, sp, #4
 800ebb0:	f7fd faa4 	bl	800c0fc <rcutils_get_default_allocator>
 800ebb4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800ebb6:	b130      	cbz	r0, 800ebc6 <racs_services__srv__Setup_Event__fini.part.0+0x3a>
 800ebb8:	9b02      	ldr	r3, [sp, #8]
 800ebba:	9905      	ldr	r1, [sp, #20]
 800ebbc:	4798      	blx	r3
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 800ebc4:	63e3      	str	r3, [r4, #60]	; 0x3c
 800ebc6:	b006      	add	sp, #24
 800ebc8:	bd10      	pop	{r4, pc}
 800ebca:	bf00      	nop

0800ebcc <racs_services__srv__Setup_Request__init>:
 800ebcc:	3800      	subs	r0, #0
 800ebce:	bf18      	it	ne
 800ebd0:	2001      	movne	r0, #1
 800ebd2:	4770      	bx	lr

0800ebd4 <racs_services__srv__Setup_Request__fini>:
 800ebd4:	4770      	bx	lr
 800ebd6:	bf00      	nop

0800ebd8 <racs_services__srv__Setup_Request__copy>:
 800ebd8:	4603      	mov	r3, r0
 800ebda:	b1a0      	cbz	r0, 800ec06 <racs_services__srv__Setup_Request__copy+0x2e>
 800ebdc:	b199      	cbz	r1, 800ec06 <racs_services__srv__Setup_Request__copy+0x2e>
 800ebde:	7802      	ldrb	r2, [r0, #0]
 800ebe0:	2001      	movs	r0, #1
 800ebe2:	700a      	strb	r2, [r1, #0]
 800ebe4:	689a      	ldr	r2, [r3, #8]
 800ebe6:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800ebea:	608a      	str	r2, [r1, #8]
 800ebec:	691a      	ldr	r2, [r3, #16]
 800ebee:	f8c1 c004 	str.w	ip, [r1, #4]
 800ebf2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800ebf6:	610a      	str	r2, [r1, #16]
 800ebf8:	695a      	ldr	r2, [r3, #20]
 800ebfa:	699b      	ldr	r3, [r3, #24]
 800ebfc:	f8c1 c00c 	str.w	ip, [r1, #12]
 800ec00:	614a      	str	r2, [r1, #20]
 800ec02:	618b      	str	r3, [r1, #24]
 800ec04:	4770      	bx	lr
 800ec06:	2000      	movs	r0, #0
 800ec08:	4770      	bx	lr
 800ec0a:	bf00      	nop

0800ec0c <racs_services__srv__Setup_Request__Sequence__init>:
 800ec0c:	b530      	push	{r4, r5, lr}
 800ec0e:	4604      	mov	r4, r0
 800ec10:	b087      	sub	sp, #28
 800ec12:	b148      	cbz	r0, 800ec28 <racs_services__srv__Setup_Request__Sequence__init+0x1c>
 800ec14:	460d      	mov	r5, r1
 800ec16:	a801      	add	r0, sp, #4
 800ec18:	f7fd fa70 	bl	800c0fc <rcutils_get_default_allocator>
 800ec1c:	b935      	cbnz	r5, 800ec2c <racs_services__srv__Setup_Request__Sequence__init+0x20>
 800ec1e:	462b      	mov	r3, r5
 800ec20:	2001      	movs	r0, #1
 800ec22:	60a5      	str	r5, [r4, #8]
 800ec24:	e9c4 3500 	strd	r3, r5, [r4]
 800ec28:	b007      	add	sp, #28
 800ec2a:	bd30      	pop	{r4, r5, pc}
 800ec2c:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800ec30:	211c      	movs	r1, #28
 800ec32:	4628      	mov	r0, r5
 800ec34:	4798      	blx	r3
 800ec36:	4603      	mov	r3, r0
 800ec38:	2800      	cmp	r0, #0
 800ec3a:	d1f1      	bne.n	800ec20 <racs_services__srv__Setup_Request__Sequence__init+0x14>
 800ec3c:	e7f4      	b.n	800ec28 <racs_services__srv__Setup_Request__Sequence__init+0x1c>
 800ec3e:	bf00      	nop

0800ec40 <racs_services__srv__Setup_Request__Sequence__fini>:
 800ec40:	b180      	cbz	r0, 800ec64 <racs_services__srv__Setup_Request__Sequence__fini+0x24>
 800ec42:	b510      	push	{r4, lr}
 800ec44:	b086      	sub	sp, #24
 800ec46:	4604      	mov	r4, r0
 800ec48:	a801      	add	r0, sp, #4
 800ec4a:	f7fd fa57 	bl	800c0fc <rcutils_get_default_allocator>
 800ec4e:	6820      	ldr	r0, [r4, #0]
 800ec50:	b130      	cbz	r0, 800ec60 <racs_services__srv__Setup_Request__Sequence__fini+0x20>
 800ec52:	9b02      	ldr	r3, [sp, #8]
 800ec54:	9905      	ldr	r1, [sp, #20]
 800ec56:	4798      	blx	r3
 800ec58:	2300      	movs	r3, #0
 800ec5a:	e9c4 3300 	strd	r3, r3, [r4]
 800ec5e:	60a3      	str	r3, [r4, #8]
 800ec60:	b006      	add	sp, #24
 800ec62:	bd10      	pop	{r4, pc}
 800ec64:	4770      	bx	lr
 800ec66:	bf00      	nop

0800ec68 <racs_services__srv__Setup_Response__init>:
 800ec68:	3800      	subs	r0, #0
 800ec6a:	bf18      	it	ne
 800ec6c:	2001      	movne	r0, #1
 800ec6e:	4770      	bx	lr

0800ec70 <racs_services__srv__Setup_Response__fini>:
 800ec70:	4770      	bx	lr
 800ec72:	bf00      	nop

0800ec74 <racs_services__srv__Setup_Response__copy>:
 800ec74:	b120      	cbz	r0, 800ec80 <racs_services__srv__Setup_Response__copy+0xc>
 800ec76:	b119      	cbz	r1, 800ec80 <racs_services__srv__Setup_Response__copy+0xc>
 800ec78:	7803      	ldrb	r3, [r0, #0]
 800ec7a:	2001      	movs	r0, #1
 800ec7c:	700b      	strb	r3, [r1, #0]
 800ec7e:	4770      	bx	lr
 800ec80:	2000      	movs	r0, #0
 800ec82:	4770      	bx	lr

0800ec84 <racs_services__srv__Setup_Response__Sequence__init>:
 800ec84:	b530      	push	{r4, r5, lr}
 800ec86:	4604      	mov	r4, r0
 800ec88:	b087      	sub	sp, #28
 800ec8a:	b148      	cbz	r0, 800eca0 <racs_services__srv__Setup_Response__Sequence__init+0x1c>
 800ec8c:	460d      	mov	r5, r1
 800ec8e:	a801      	add	r0, sp, #4
 800ec90:	f7fd fa34 	bl	800c0fc <rcutils_get_default_allocator>
 800ec94:	b935      	cbnz	r5, 800eca4 <racs_services__srv__Setup_Response__Sequence__init+0x20>
 800ec96:	462b      	mov	r3, r5
 800ec98:	2001      	movs	r0, #1
 800ec9a:	60a5      	str	r5, [r4, #8]
 800ec9c:	e9c4 3500 	strd	r3, r5, [r4]
 800eca0:	b007      	add	sp, #28
 800eca2:	bd30      	pop	{r4, r5, pc}
 800eca4:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800eca8:	2101      	movs	r1, #1
 800ecaa:	4628      	mov	r0, r5
 800ecac:	4798      	blx	r3
 800ecae:	4603      	mov	r3, r0
 800ecb0:	2800      	cmp	r0, #0
 800ecb2:	d1f1      	bne.n	800ec98 <racs_services__srv__Setup_Response__Sequence__init+0x14>
 800ecb4:	e7f4      	b.n	800eca0 <racs_services__srv__Setup_Response__Sequence__init+0x1c>
 800ecb6:	bf00      	nop

0800ecb8 <racs_services__srv__Setup_Response__Sequence__fini>:
 800ecb8:	b180      	cbz	r0, 800ecdc <racs_services__srv__Setup_Response__Sequence__fini+0x24>
 800ecba:	b510      	push	{r4, lr}
 800ecbc:	b086      	sub	sp, #24
 800ecbe:	4604      	mov	r4, r0
 800ecc0:	a801      	add	r0, sp, #4
 800ecc2:	f7fd fa1b 	bl	800c0fc <rcutils_get_default_allocator>
 800ecc6:	6820      	ldr	r0, [r4, #0]
 800ecc8:	b130      	cbz	r0, 800ecd8 <racs_services__srv__Setup_Response__Sequence__fini+0x20>
 800ecca:	9b02      	ldr	r3, [sp, #8]
 800eccc:	9905      	ldr	r1, [sp, #20]
 800ecce:	4798      	blx	r3
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	e9c4 3300 	strd	r3, r3, [r4]
 800ecd6:	60a3      	str	r3, [r4, #8]
 800ecd8:	b006      	add	sp, #24
 800ecda:	bd10      	pop	{r4, pc}
 800ecdc:	4770      	bx	lr
 800ecde:	bf00      	nop

0800ece0 <racs_services__srv__Setup_Event__init>:
 800ece0:	b570      	push	{r4, r5, r6, lr}
 800ece2:	4604      	mov	r4, r0
 800ece4:	b086      	sub	sp, #24
 800ece6:	b1c8      	cbz	r0, 800ed1c <racs_services__srv__Setup_Event__init+0x3c>
 800ece8:	f005 f986 	bl	8013ff8 <service_msgs__msg__ServiceEventInfo__init>
 800ecec:	4605      	mov	r5, r0
 800ecee:	b178      	cbz	r0, 800ed10 <racs_services__srv__Setup_Event__init+0x30>
 800ecf0:	2600      	movs	r6, #0
 800ecf2:	a801      	add	r0, sp, #4
 800ecf4:	f7fd fa02 	bl	800c0fc <rcutils_get_default_allocator>
 800ecf8:	a801      	add	r0, sp, #4
 800ecfa:	6326      	str	r6, [r4, #48]	; 0x30
 800ecfc:	e9c4 660a 	strd	r6, r6, [r4, #40]	; 0x28
 800ed00:	f7fd f9fc 	bl	800c0fc <rcutils_get_default_allocator>
 800ed04:	4628      	mov	r0, r5
 800ed06:	63e6      	str	r6, [r4, #60]	; 0x3c
 800ed08:	e9c4 660d 	strd	r6, r6, [r4, #52]	; 0x34
 800ed0c:	b006      	add	sp, #24
 800ed0e:	bd70      	pop	{r4, r5, r6, pc}
 800ed10:	4620      	mov	r0, r4
 800ed12:	f7ff ff3b 	bl	800eb8c <racs_services__srv__Setup_Event__fini.part.0>
 800ed16:	4628      	mov	r0, r5
 800ed18:	b006      	add	sp, #24
 800ed1a:	bd70      	pop	{r4, r5, r6, pc}
 800ed1c:	4605      	mov	r5, r0
 800ed1e:	4628      	mov	r0, r5
 800ed20:	b006      	add	sp, #24
 800ed22:	bd70      	pop	{r4, r5, r6, pc}

0800ed24 <racs_services__srv__Setup_Event__fini>:
 800ed24:	b1f0      	cbz	r0, 800ed64 <racs_services__srv__Setup_Event__fini+0x40>
 800ed26:	b510      	push	{r4, lr}
 800ed28:	b086      	sub	sp, #24
 800ed2a:	4604      	mov	r4, r0
 800ed2c:	f005 f976 	bl	801401c <service_msgs__msg__ServiceEventInfo__fini>
 800ed30:	a801      	add	r0, sp, #4
 800ed32:	f7fd f9e3 	bl	800c0fc <rcutils_get_default_allocator>
 800ed36:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800ed38:	b130      	cbz	r0, 800ed48 <racs_services__srv__Setup_Event__fini+0x24>
 800ed3a:	9b02      	ldr	r3, [sp, #8]
 800ed3c:	9905      	ldr	r1, [sp, #20]
 800ed3e:	4798      	blx	r3
 800ed40:	2300      	movs	r3, #0
 800ed42:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 800ed46:	6323      	str	r3, [r4, #48]	; 0x30
 800ed48:	a801      	add	r0, sp, #4
 800ed4a:	f7fd f9d7 	bl	800c0fc <rcutils_get_default_allocator>
 800ed4e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800ed50:	b130      	cbz	r0, 800ed60 <racs_services__srv__Setup_Event__fini+0x3c>
 800ed52:	9b02      	ldr	r3, [sp, #8]
 800ed54:	9905      	ldr	r1, [sp, #20]
 800ed56:	4798      	blx	r3
 800ed58:	2300      	movs	r3, #0
 800ed5a:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 800ed5e:	63e3      	str	r3, [r4, #60]	; 0x3c
 800ed60:	b006      	add	sp, #24
 800ed62:	bd10      	pop	{r4, pc}
 800ed64:	4770      	bx	lr
 800ed66:	bf00      	nop

0800ed68 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup>:
 800ed68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed6c:	2900      	cmp	r1, #0
 800ed6e:	d04d      	beq.n	800ee0c <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0xa4>
 800ed70:	4605      	mov	r5, r0
 800ed72:	2800      	cmp	r0, #0
 800ed74:	d04a      	beq.n	800ee0c <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0xa4>
 800ed76:	460e      	mov	r6, r1
 800ed78:	4698      	mov	r8, r3
 800ed7a:	2040      	movs	r0, #64	; 0x40
 800ed7c:	680b      	ldr	r3, [r1, #0]
 800ed7e:	6909      	ldr	r1, [r1, #16]
 800ed80:	4617      	mov	r7, r2
 800ed82:	4798      	blx	r3
 800ed84:	4604      	mov	r4, r0
 800ed86:	f7ff ffab 	bl	800ece0 <racs_services__srv__Setup_Event__init>
 800ed8a:	4684      	mov	ip, r0
 800ed8c:	b370      	cbz	r0, 800edec <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x84>
 800ed8e:	782b      	ldrb	r3, [r5, #0]
 800ed90:	7023      	strb	r3, [r4, #0]
 800ed92:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 800ed96:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 800ed9a:	e9c4 2301 	strd	r2, r3, [r4, #4]
 800ed9e:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800eda2:	68e8      	ldr	r0, [r5, #12]
 800eda4:	6929      	ldr	r1, [r5, #16]
 800eda6:	696a      	ldr	r2, [r5, #20]
 800eda8:	69ab      	ldr	r3, [r5, #24]
 800edaa:	60e0      	str	r0, [r4, #12]
 800edac:	6121      	str	r1, [r4, #16]
 800edae:	6162      	str	r2, [r4, #20]
 800edb0:	61a3      	str	r3, [r4, #24]
 800edb2:	b157      	cbz	r7, 800edca <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x62>
 800edb4:	2101      	movs	r1, #1
 800edb6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800edba:	f7ff ff27 	bl	800ec0c <racs_services__srv__Setup_Request__Sequence__init>
 800edbe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800edc0:	4638      	mov	r0, r7
 800edc2:	f7ff ff09 	bl	800ebd8 <racs_services__srv__Setup_Request__copy>
 800edc6:	4603      	mov	r3, r0
 800edc8:	b1c0      	cbz	r0, 800edfc <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x94>
 800edca:	f1b8 0f00 	cmp.w	r8, #0
 800edce:	d00a      	beq.n	800ede6 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x7e>
 800edd0:	2101      	movs	r1, #1
 800edd2:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800edd6:	f7ff ff55 	bl	800ec84 <racs_services__srv__Setup_Response__Sequence__init>
 800edda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eddc:	4640      	mov	r0, r8
 800edde:	f7ff ff49 	bl	800ec74 <racs_services__srv__Setup_Response__copy>
 800ede2:	4603      	mov	r3, r0
 800ede4:	b150      	cbz	r0, 800edfc <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x94>
 800ede6:	4620      	mov	r0, r4
 800ede8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edec:	4620      	mov	r0, r4
 800edee:	4664      	mov	r4, ip
 800edf0:	6873      	ldr	r3, [r6, #4]
 800edf2:	6931      	ldr	r1, [r6, #16]
 800edf4:	4798      	blx	r3
 800edf6:	4620      	mov	r0, r4
 800edf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edfc:	4620      	mov	r0, r4
 800edfe:	461c      	mov	r4, r3
 800ee00:	6872      	ldr	r2, [r6, #4]
 800ee02:	6931      	ldr	r1, [r6, #16]
 800ee04:	4790      	blx	r2
 800ee06:	4620      	mov	r0, r4
 800ee08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee0c:	2400      	movs	r4, #0
 800ee0e:	4620      	mov	r0, r4
 800ee10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ee14 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup>:
 800ee14:	b1b9      	cbz	r1, 800ee46 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x32>
 800ee16:	b538      	push	{r3, r4, r5, lr}
 800ee18:	4605      	mov	r5, r0
 800ee1a:	b190      	cbz	r0, 800ee42 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x2e>
 800ee1c:	460c      	mov	r4, r1
 800ee1e:	f7ff ff81 	bl	800ed24 <racs_services__srv__Setup_Event__fini>
 800ee22:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800ee24:	b110      	cbz	r0, 800ee2c <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x18>
 800ee26:	6863      	ldr	r3, [r4, #4]
 800ee28:	6921      	ldr	r1, [r4, #16]
 800ee2a:	4798      	blx	r3
 800ee2c:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800ee2e:	b110      	cbz	r0, 800ee36 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x22>
 800ee30:	6863      	ldr	r3, [r4, #4]
 800ee32:	6921      	ldr	r1, [r4, #16]
 800ee34:	4798      	blx	r3
 800ee36:	4628      	mov	r0, r5
 800ee38:	6863      	ldr	r3, [r4, #4]
 800ee3a:	6921      	ldr	r1, [r4, #16]
 800ee3c:	4798      	blx	r3
 800ee3e:	2001      	movs	r0, #1
 800ee40:	bd38      	pop	{r3, r4, r5, pc}
 800ee42:	2000      	movs	r0, #0
 800ee44:	bd38      	pop	{r3, r4, r5, pc}
 800ee46:	2000      	movs	r0, #0
 800ee48:	4770      	bx	lr
 800ee4a:	bf00      	nop

0800ee4c <rcl_client_get_rmw_handle>:
 800ee4c:	b118      	cbz	r0, 800ee56 <rcl_client_get_rmw_handle+0xa>
 800ee4e:	6800      	ldr	r0, [r0, #0]
 800ee50:	b108      	cbz	r0, 800ee56 <rcl_client_get_rmw_handle+0xa>
 800ee52:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800ee56:	4770      	bx	lr

0800ee58 <rcl_send_request>:
 800ee58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee5a:	b08b      	sub	sp, #44	; 0x2c
 800ee5c:	b1e8      	cbz	r0, 800ee9a <rcl_send_request+0x42>
 800ee5e:	4604      	mov	r4, r0
 800ee60:	6800      	ldr	r0, [r0, #0]
 800ee62:	b1d0      	cbz	r0, 800ee9a <rcl_send_request+0x42>
 800ee64:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800ee68:	b1bb      	cbz	r3, 800ee9a <rcl_send_request+0x42>
 800ee6a:	460f      	mov	r7, r1
 800ee6c:	b1d1      	cbz	r1, 800eea4 <rcl_send_request+0x4c>
 800ee6e:	4615      	mov	r5, r2
 800ee70:	b1c2      	cbz	r2, 800eea4 <rcl_send_request+0x4c>
 800ee72:	2105      	movs	r1, #5
 800ee74:	f500 7088 	add.w	r0, r0, #272	; 0x110
 800ee78:	f002 fef2 	bl	8011c60 <__atomic_load_8>
 800ee7c:	6823      	ldr	r3, [r4, #0]
 800ee7e:	462a      	mov	r2, r5
 800ee80:	e9c5 0100 	strd	r0, r1, [r5]
 800ee84:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800ee88:	4639      	mov	r1, r7
 800ee8a:	f003 ffc9 	bl	8012e20 <rmw_send_request>
 800ee8e:	4606      	mov	r6, r0
 800ee90:	b160      	cbz	r0, 800eeac <rcl_send_request+0x54>
 800ee92:	2601      	movs	r6, #1
 800ee94:	4630      	mov	r0, r6
 800ee96:	b00b      	add	sp, #44	; 0x2c
 800ee98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee9a:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 800ee9e:	4630      	mov	r0, r6
 800eea0:	b00b      	add	sp, #44	; 0x2c
 800eea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eea4:	260b      	movs	r6, #11
 800eea6:	4630      	mov	r0, r6
 800eea8:	b00b      	add	sp, #44	; 0x2c
 800eeaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eeac:	6820      	ldr	r0, [r4, #0]
 800eeae:	2305      	movs	r3, #5
 800eeb0:	f500 7088 	add.w	r0, r0, #272	; 0x110
 800eeb4:	9300      	str	r3, [sp, #0]
 800eeb6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800eeba:	f002 ff3d 	bl	8011d38 <__atomic_exchange_8>
 800eebe:	6823      	ldr	r3, [r4, #0]
 800eec0:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800eec4:	2a00      	cmp	r2, #0
 800eec6:	d0e5      	beq.n	800ee94 <rcl_send_request+0x3c>
 800eec8:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800eecc:	a905      	add	r1, sp, #20
 800eece:	f003 fbe1 	bl	8012694 <rmw_get_gid_for_client>
 800eed2:	b970      	cbnz	r0, 800eef2 <rcl_send_request+0x9a>
 800eed4:	6820      	ldr	r0, [r4, #0]
 800eed6:	ab06      	add	r3, sp, #24
 800eed8:	4631      	mov	r1, r6
 800eeda:	463a      	mov	r2, r7
 800eedc:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
 800eee0:	9302      	str	r3, [sp, #8]
 800eee2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800eee6:	e9cd 4500 	strd	r4, r5, [sp]
 800eeea:	f001 f825 	bl	800ff38 <rcl_send_service_event_message>
 800eeee:	4606      	mov	r6, r0
 800eef0:	e7d0      	b.n	800ee94 <rcl_send_request+0x3c>
 800eef2:	f000 f877 	bl	800efe4 <rcl_convert_rmw_ret_to_rcl_ret>
 800eef6:	4606      	mov	r6, r0
 800eef8:	e7cc      	b.n	800ee94 <rcl_send_request+0x3c>
 800eefa:	bf00      	nop
 800eefc:	0000      	movs	r0, r0
	...

0800ef00 <rcl_take_response>:
 800ef00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef02:	468e      	mov	lr, r1
 800ef04:	b095      	sub	sp, #84	; 0x54
 800ef06:	460c      	mov	r4, r1
 800ef08:	4616      	mov	r6, r2
 800ef0a:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 800ef0e:	4605      	mov	r5, r0
 800ef10:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ef14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ef18:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800ef1c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ef20:	2d00      	cmp	r5, #0
 800ef22:	d042      	beq.n	800efaa <rcl_take_response+0xaa>
 800ef24:	682b      	ldr	r3, [r5, #0]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d03f      	beq.n	800efaa <rcl_take_response+0xaa>
 800ef2a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800ef2e:	2800      	cmp	r0, #0
 800ef30:	d03b      	beq.n	800efaa <rcl_take_response+0xaa>
 800ef32:	2e00      	cmp	r6, #0
 800ef34:	d03c      	beq.n	800efb0 <rcl_take_response+0xb0>
 800ef36:	2300      	movs	r3, #0
 800ef38:	4632      	mov	r2, r6
 800ef3a:	a90a      	add	r1, sp, #40	; 0x28
 800ef3c:	f88d 3013 	strb.w	r3, [sp, #19]
 800ef40:	f10d 0313 	add.w	r3, sp, #19
 800ef44:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800efc8 <rcl_take_response+0xc8>
 800ef48:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800ef4c:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800ef50:	f004 f86e 	bl	8013030 <rmw_take_response>
 800ef54:	4607      	mov	r7, r0
 800ef56:	bb68      	cbnz	r0, 800efb4 <rcl_take_response+0xb4>
 800ef58:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800ef5c:	b363      	cbz	r3, 800efb8 <rcl_take_response+0xb8>
 800ef5e:	682b      	ldr	r3, [r5, #0]
 800ef60:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800ef64:	b19a      	cbz	r2, 800ef8e <rcl_take_response+0x8e>
 800ef66:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800ef6a:	a905      	add	r1, sp, #20
 800ef6c:	f003 fb92 	bl	8012694 <rmw_get_gid_for_client>
 800ef70:	bb28      	cbnz	r0, 800efbe <rcl_take_response+0xbe>
 800ef72:	6829      	ldr	r1, [r5, #0]
 800ef74:	ab06      	add	r3, sp, #24
 800ef76:	4632      	mov	r2, r6
 800ef78:	f8d1 0118 	ldr.w	r0, [r1, #280]	; 0x118
 800ef7c:	2103      	movs	r1, #3
 800ef7e:	9302      	str	r3, [sp, #8]
 800ef80:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800ef84:	e9cd 6700 	strd	r6, r7, [sp]
 800ef88:	f000 ffd6 	bl	800ff38 <rcl_send_service_event_message>
 800ef8c:	4607      	mov	r7, r0
 800ef8e:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
 800ef92:	46a4      	mov	ip, r4
 800ef94:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ef98:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ef9c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800efa0:	e88c 0003 	stmia.w	ip, {r0, r1}
 800efa4:	4638      	mov	r0, r7
 800efa6:	b015      	add	sp, #84	; 0x54
 800efa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efaa:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
 800efae:	e7ee      	b.n	800ef8e <rcl_take_response+0x8e>
 800efb0:	270b      	movs	r7, #11
 800efb2:	e7ec      	b.n	800ef8e <rcl_take_response+0x8e>
 800efb4:	2701      	movs	r7, #1
 800efb6:	e7ea      	b.n	800ef8e <rcl_take_response+0x8e>
 800efb8:	f240 17f5 	movw	r7, #501	; 0x1f5
 800efbc:	e7e7      	b.n	800ef8e <rcl_take_response+0x8e>
 800efbe:	f000 f811 	bl	800efe4 <rcl_convert_rmw_ret_to_rcl_ret>
 800efc2:	4607      	mov	r7, r0
 800efc4:	e7e3      	b.n	800ef8e <rcl_take_response+0x8e>
 800efc6:	bf00      	nop
	...

0800efd0 <rcl_client_is_valid>:
 800efd0:	b130      	cbz	r0, 800efe0 <rcl_client_is_valid+0x10>
 800efd2:	6800      	ldr	r0, [r0, #0]
 800efd4:	b120      	cbz	r0, 800efe0 <rcl_client_is_valid+0x10>
 800efd6:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800efda:	3800      	subs	r0, #0
 800efdc:	bf18      	it	ne
 800efde:	2001      	movne	r0, #1
 800efe0:	4770      	bx	lr
 800efe2:	bf00      	nop

0800efe4 <rcl_convert_rmw_ret_to_rcl_ret>:
 800efe4:	280b      	cmp	r0, #11
 800efe6:	dc0d      	bgt.n	800f004 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800efe8:	2800      	cmp	r0, #0
 800efea:	db09      	blt.n	800f000 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800efec:	280b      	cmp	r0, #11
 800efee:	d807      	bhi.n	800f000 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800eff0:	e8df f000 	tbb	[pc, r0]
 800eff4:	07060607 	.word	0x07060607
 800eff8:	06060606 	.word	0x06060606
 800effc:	07070606 	.word	0x07070606
 800f000:	2001      	movs	r0, #1
 800f002:	4770      	bx	lr
 800f004:	28cb      	cmp	r0, #203	; 0xcb
 800f006:	bf18      	it	ne
 800f008:	2001      	movne	r0, #1
 800f00a:	4770      	bx	lr

0800f00c <rcl_get_zero_initialized_context>:
 800f00c:	4a03      	ldr	r2, [pc, #12]	; (800f01c <rcl_get_zero_initialized_context+0x10>)
 800f00e:	4603      	mov	r3, r0
 800f010:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f014:	e883 0003 	stmia.w	r3, {r0, r1}
 800f018:	4618      	mov	r0, r3
 800f01a:	4770      	bx	lr
 800f01c:	0801b488 	.word	0x0801b488

0800f020 <rcl_context_is_valid>:
 800f020:	b118      	cbz	r0, 800f02a <rcl_context_is_valid+0xa>
 800f022:	6840      	ldr	r0, [r0, #4]
 800f024:	3800      	subs	r0, #0
 800f026:	bf18      	it	ne
 800f028:	2001      	movne	r0, #1
 800f02a:	4770      	bx	lr

0800f02c <__cleanup_context>:
 800f02c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f030:	4606      	mov	r6, r0
 800f032:	2300      	movs	r3, #0
 800f034:	6800      	ldr	r0, [r0, #0]
 800f036:	6073      	str	r3, [r6, #4]
 800f038:	2800      	cmp	r0, #0
 800f03a:	d049      	beq.n	800f0d0 <__cleanup_context+0xa4>
 800f03c:	6947      	ldr	r7, [r0, #20]
 800f03e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800f042:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800f046:	b137      	cbz	r7, 800f056 <__cleanup_context+0x2a>
 800f048:	3014      	adds	r0, #20
 800f04a:	f000 f9e7 	bl	800f41c <rcl_init_options_fini>
 800f04e:	4607      	mov	r7, r0
 800f050:	2800      	cmp	r0, #0
 800f052:	d144      	bne.n	800f0de <__cleanup_context+0xb2>
 800f054:	6830      	ldr	r0, [r6, #0]
 800f056:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800f058:	b143      	cbz	r3, 800f06c <__cleanup_context+0x40>
 800f05a:	3028      	adds	r0, #40	; 0x28
 800f05c:	f003 fd44 	bl	8012ae8 <rmw_context_fini>
 800f060:	b118      	cbz	r0, 800f06a <__cleanup_context+0x3e>
 800f062:	2f00      	cmp	r7, #0
 800f064:	d03e      	beq.n	800f0e4 <__cleanup_context+0xb8>
 800f066:	f7fd f87b 	bl	800c160 <rcutils_reset_error>
 800f06a:	6830      	ldr	r0, [r6, #0]
 800f06c:	6a03      	ldr	r3, [r0, #32]
 800f06e:	b1db      	cbz	r3, 800f0a8 <__cleanup_context+0x7c>
 800f070:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800f074:	2a01      	cmp	r2, #1
 800f076:	f17c 0100 	sbcs.w	r1, ip, #0
 800f07a:	db11      	blt.n	800f0a0 <__cleanup_context+0x74>
 800f07c:	2400      	movs	r4, #0
 800f07e:	4625      	mov	r5, r4
 800f080:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f084:	4649      	mov	r1, r9
 800f086:	b1b8      	cbz	r0, 800f0b8 <__cleanup_context+0x8c>
 800f088:	47c0      	blx	r8
 800f08a:	6833      	ldr	r3, [r6, #0]
 800f08c:	3401      	adds	r4, #1
 800f08e:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800f092:	f145 0500 	adc.w	r5, r5, #0
 800f096:	6a1b      	ldr	r3, [r3, #32]
 800f098:	4294      	cmp	r4, r2
 800f09a:	eb75 010c 	sbcs.w	r1, r5, ip
 800f09e:	dbef      	blt.n	800f080 <__cleanup_context+0x54>
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	4649      	mov	r1, r9
 800f0a4:	47c0      	blx	r8
 800f0a6:	6830      	ldr	r0, [r6, #0]
 800f0a8:	4649      	mov	r1, r9
 800f0aa:	47c0      	blx	r8
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	4638      	mov	r0, r7
 800f0b0:	e9c6 3300 	strd	r3, r3, [r6]
 800f0b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0b8:	3401      	adds	r4, #1
 800f0ba:	f145 0500 	adc.w	r5, r5, #0
 800f0be:	4294      	cmp	r4, r2
 800f0c0:	eb75 010c 	sbcs.w	r1, r5, ip
 800f0c4:	dbdc      	blt.n	800f080 <__cleanup_context+0x54>
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	4649      	mov	r1, r9
 800f0ca:	47c0      	blx	r8
 800f0cc:	6830      	ldr	r0, [r6, #0]
 800f0ce:	e7eb      	b.n	800f0a8 <__cleanup_context+0x7c>
 800f0d0:	4607      	mov	r7, r0
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	4638      	mov	r0, r7
 800f0d6:	e9c6 3300 	strd	r3, r3, [r6]
 800f0da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0de:	f7fd f83f 	bl	800c160 <rcutils_reset_error>
 800f0e2:	e7b7      	b.n	800f054 <__cleanup_context+0x28>
 800f0e4:	f7ff ff7e 	bl	800efe4 <rcl_convert_rmw_ret_to_rcl_ret>
 800f0e8:	4607      	mov	r7, r0
 800f0ea:	e7bc      	b.n	800f066 <__cleanup_context+0x3a>

0800f0ec <rcl_init>:
 800f0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0f0:	1e05      	subs	r5, r0, #0
 800f0f2:	b0a7      	sub	sp, #156	; 0x9c
 800f0f4:	460e      	mov	r6, r1
 800f0f6:	4690      	mov	r8, r2
 800f0f8:	461f      	mov	r7, r3
 800f0fa:	f340 80a0 	ble.w	800f23e <rcl_init+0x152>
 800f0fe:	2900      	cmp	r1, #0
 800f100:	f000 80a0 	beq.w	800f244 <rcl_init+0x158>
 800f104:	f1a1 0e04 	sub.w	lr, r1, #4
 800f108:	f04f 0c00 	mov.w	ip, #0
 800f10c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800f110:	f10c 0c01 	add.w	ip, ip, #1
 800f114:	2c00      	cmp	r4, #0
 800f116:	f000 8095 	beq.w	800f244 <rcl_init+0x158>
 800f11a:	4565      	cmp	r5, ip
 800f11c:	d1f6      	bne.n	800f10c <rcl_init+0x20>
 800f11e:	f1b8 0f00 	cmp.w	r8, #0
 800f122:	f000 808f 	beq.w	800f244 <rcl_init+0x158>
 800f126:	f8d8 4000 	ldr.w	r4, [r8]
 800f12a:	2c00      	cmp	r4, #0
 800f12c:	f000 808a 	beq.w	800f244 <rcl_init+0x158>
 800f130:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
 800f134:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f136:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f13a:	6823      	ldr	r3, [r4, #0]
 800f13c:	a821      	add	r0, sp, #132	; 0x84
 800f13e:	f8cc 3000 	str.w	r3, [ip]
 800f142:	f7fc ffe9 	bl	800c118 <rcutils_allocator_is_valid>
 800f146:	f080 0001 	eor.w	r0, r0, #1
 800f14a:	b2c0      	uxtb	r0, r0
 800f14c:	2800      	cmp	r0, #0
 800f14e:	d179      	bne.n	800f244 <rcl_init+0x158>
 800f150:	2f00      	cmp	r7, #0
 800f152:	d077      	beq.n	800f244 <rcl_init+0x158>
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d179      	bne.n	800f24e <rcl_init+0x162>
 800f15a:	2198      	movs	r1, #152	; 0x98
 800f15c:	2001      	movs	r0, #1
 800f15e:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	; 0x90
 800f162:	4798      	blx	r3
 800f164:	4604      	mov	r4, r0
 800f166:	6038      	str	r0, [r7, #0]
 800f168:	2800      	cmp	r0, #0
 800f16a:	f000 80cd 	beq.w	800f308 <rcl_init+0x21c>
 800f16e:	a802      	add	r0, sp, #8
 800f170:	f003 f8ca 	bl	8012308 <rmw_get_zero_initialized_context>
 800f174:	a902      	add	r1, sp, #8
 800f176:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800f17a:	2270      	movs	r2, #112	; 0x70
 800f17c:	f00a fb9f 	bl	80198be <memcpy>
 800f180:	f8d7 e000 	ldr.w	lr, [r7]
 800f184:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
 800f188:	4674      	mov	r4, lr
 800f18a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f18e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f190:	f8dc 3000 	ldr.w	r3, [ip]
 800f194:	f10e 0114 	add.w	r1, lr, #20
 800f198:	4640      	mov	r0, r8
 800f19a:	6023      	str	r3, [r4, #0]
 800f19c:	f000 f968 	bl	800f470 <rcl_init_options_copy>
 800f1a0:	4604      	mov	r4, r0
 800f1a2:	2800      	cmp	r0, #0
 800f1a4:	d144      	bne.n	800f230 <rcl_init+0x144>
 800f1a6:	f8d7 9000 	ldr.w	r9, [r7]
 800f1aa:	ea4f 7ae5 	mov.w	sl, r5, asr #31
 800f1ae:	f8c9 0020 	str.w	r0, [r9, #32]
 800f1b2:	f8c9 5018 	str.w	r5, [r9, #24]
 800f1b6:	f8c9 a01c 	str.w	sl, [r9, #28]
 800f1ba:	2d00      	cmp	r5, #0
 800f1bc:	d04e      	beq.n	800f25c <rcl_init+0x170>
 800f1be:	2e00      	cmp	r6, #0
 800f1c0:	d04c      	beq.n	800f25c <rcl_init+0x170>
 800f1c2:	2104      	movs	r1, #4
 800f1c4:	4628      	mov	r0, r5
 800f1c6:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	; 0x90
 800f1ca:	4798      	blx	r3
 800f1cc:	f8c9 0020 	str.w	r0, [r9, #32]
 800f1d0:	f8d7 9000 	ldr.w	r9, [r7]
 800f1d4:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800f1d8:	46cb      	mov	fp, r9
 800f1da:	b343      	cbz	r3, 800f22e <rcl_init+0x142>
 800f1dc:	2d01      	cmp	r5, #1
 800f1de:	f17a 0300 	sbcs.w	r3, sl, #0
 800f1e2:	db3b      	blt.n	800f25c <rcl_init+0x170>
 800f1e4:	2400      	movs	r4, #0
 800f1e6:	3e04      	subs	r6, #4
 800f1e8:	46a1      	mov	r9, r4
 800f1ea:	e00b      	b.n	800f204 <rcl_init+0x118>
 800f1ec:	6831      	ldr	r1, [r6, #0]
 800f1ee:	f00a fb66 	bl	80198be <memcpy>
 800f1f2:	3401      	adds	r4, #1
 800f1f4:	f149 0900 	adc.w	r9, r9, #0
 800f1f8:	45ca      	cmp	sl, r9
 800f1fa:	bf08      	it	eq
 800f1fc:	42a5      	cmpeq	r5, r4
 800f1fe:	d02b      	beq.n	800f258 <rcl_init+0x16c>
 800f200:	f8d7 b000 	ldr.w	fp, [r7]
 800f204:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800f208:	f7f1 f87a 	bl	8000300 <strlen>
 800f20c:	1c42      	adds	r2, r0, #1
 800f20e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f210:	4610      	mov	r0, r2
 800f212:	9925      	ldr	r1, [sp, #148]	; 0x94
 800f214:	f8db b020 	ldr.w	fp, [fp, #32]
 800f218:	9201      	str	r2, [sp, #4]
 800f21a:	4798      	blx	r3
 800f21c:	683b      	ldr	r3, [r7, #0]
 800f21e:	f84b 0024 	str.w	r0, [fp, r4, lsl #2]
 800f222:	6a1b      	ldr	r3, [r3, #32]
 800f224:	9a01      	ldr	r2, [sp, #4]
 800f226:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f22a:	2800      	cmp	r0, #0
 800f22c:	d1de      	bne.n	800f1ec <rcl_init+0x100>
 800f22e:	240a      	movs	r4, #10
 800f230:	4638      	mov	r0, r7
 800f232:	f7ff fefb 	bl	800f02c <__cleanup_context>
 800f236:	4620      	mov	r0, r4
 800f238:	b027      	add	sp, #156	; 0x9c
 800f23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f23e:	2900      	cmp	r1, #0
 800f240:	f43f af6d 	beq.w	800f11e <rcl_init+0x32>
 800f244:	240b      	movs	r4, #11
 800f246:	4620      	mov	r0, r4
 800f248:	b027      	add	sp, #156	; 0x9c
 800f24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f24e:	2464      	movs	r4, #100	; 0x64
 800f250:	4620      	mov	r0, r4
 800f252:	b027      	add	sp, #156	; 0x9c
 800f254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f258:	f8d7 9000 	ldr.w	r9, [r7]
 800f25c:	493f      	ldr	r1, [pc, #252]	; (800f35c <rcl_init+0x270>)
 800f25e:	680b      	ldr	r3, [r1, #0]
 800f260:	3301      	adds	r3, #1
 800f262:	d04c      	beq.n	800f2fe <rcl_init+0x212>
 800f264:	461a      	mov	r2, r3
 800f266:	2000      	movs	r0, #0
 800f268:	600b      	str	r3, [r1, #0]
 800f26a:	f8d9 5014 	ldr.w	r5, [r9, #20]
 800f26e:	607b      	str	r3, [r7, #4]
 800f270:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f272:	3301      	adds	r3, #1
 800f274:	e9c5 2006 	strd	r2, r0, [r5, #24]
 800f278:	d05d      	beq.n	800f336 <rcl_init+0x24a>
 800f27a:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d044      	beq.n	800f30c <rcl_init+0x220>
 800f282:	2b01      	cmp	r3, #1
 800f284:	d04e      	beq.n	800f324 <rcl_init+0x238>
 800f286:	f8d8 3000 	ldr.w	r3, [r8]
 800f28a:	f105 0634 	add.w	r6, r5, #52	; 0x34
 800f28e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f292:	2b00      	cmp	r3, #0
 800f294:	d05a      	beq.n	800f34c <rcl_init+0x260>
 800f296:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800f298:	b953      	cbnz	r3, 800f2b0 <rcl_init+0x1c4>
 800f29a:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 800f29e:	2801      	cmp	r0, #1
 800f2a0:	d008      	beq.n	800f2b4 <rcl_init+0x1c8>
 800f2a2:	a921      	add	r1, sp, #132	; 0x84
 800f2a4:	4630      	mov	r0, r6
 800f2a6:	f008 f8e7 	bl	8017478 <rcl_get_discovery_static_peers>
 800f2aa:	4604      	mov	r4, r0
 800f2ac:	2800      	cmp	r0, #0
 800f2ae:	d1bf      	bne.n	800f230 <rcl_init+0x144>
 800f2b0:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 800f2b4:	f008 f8d6 	bl	8017464 <rcl_automatic_discovery_range_to_string>
 800f2b8:	683b      	ldr	r3, [r7, #0]
 800f2ba:	aa20      	add	r2, sp, #128	; 0x80
 800f2bc:	a91f      	add	r1, sp, #124	; 0x7c
 800f2be:	695b      	ldr	r3, [r3, #20]
 800f2c0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800f2c2:	f001 f957 	bl	8010574 <rcl_validate_enclave_name>
 800f2c6:	4604      	mov	r4, r0
 800f2c8:	2800      	cmp	r0, #0
 800f2ca:	d1b1      	bne.n	800f230 <rcl_init+0x144>
 800f2cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f2ce:	bb83      	cbnz	r3, 800f332 <rcl_init+0x246>
 800f2d0:	6839      	ldr	r1, [r7, #0]
 800f2d2:	694b      	ldr	r3, [r1, #20]
 800f2d4:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800f2d8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800f2da:	f000 fc77 	bl	800fbcc <rcl_get_security_options_from_environment>
 800f2de:	4604      	mov	r4, r0
 800f2e0:	2800      	cmp	r0, #0
 800f2e2:	d1a5      	bne.n	800f230 <rcl_init+0x144>
 800f2e4:	6839      	ldr	r1, [r7, #0]
 800f2e6:	6948      	ldr	r0, [r1, #20]
 800f2e8:	3128      	adds	r1, #40	; 0x28
 800f2ea:	3018      	adds	r0, #24
 800f2ec:	f003 fac6 	bl	801287c <rmw_init>
 800f2f0:	4604      	mov	r4, r0
 800f2f2:	2800      	cmp	r0, #0
 800f2f4:	d0a7      	beq.n	800f246 <rcl_init+0x15a>
 800f2f6:	f7ff fe75 	bl	800efe4 <rcl_convert_rmw_ret_to_rcl_ret>
 800f2fa:	4604      	mov	r4, r0
 800f2fc:	e798      	b.n	800f230 <rcl_init+0x144>
 800f2fe:	2201      	movs	r2, #1
 800f300:	4618      	mov	r0, r3
 800f302:	600a      	str	r2, [r1, #0]
 800f304:	4613      	mov	r3, r2
 800f306:	e7b0      	b.n	800f26a <rcl_init+0x17e>
 800f308:	240a      	movs	r4, #10
 800f30a:	e79c      	b.n	800f246 <rcl_init+0x15a>
 800f30c:	f105 0030 	add.w	r0, r5, #48	; 0x30
 800f310:	f000 f90c 	bl	800f52c <rcl_get_localhost_only>
 800f314:	4604      	mov	r4, r0
 800f316:	2800      	cmp	r0, #0
 800f318:	d18a      	bne.n	800f230 <rcl_init+0x144>
 800f31a:	683a      	ldr	r2, [r7, #0]
 800f31c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800f320:	6955      	ldr	r5, [r2, #20]
 800f322:	e7ae      	b.n	800f282 <rcl_init+0x196>
 800f324:	2302      	movs	r3, #2
 800f326:	2200      	movs	r2, #0
 800f328:	4618      	mov	r0, r3
 800f32a:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
 800f32e:	63ea      	str	r2, [r5, #60]	; 0x3c
 800f330:	e7c0      	b.n	800f2b4 <rcl_init+0x1c8>
 800f332:	2401      	movs	r4, #1
 800f334:	e77c      	b.n	800f230 <rcl_init+0x144>
 800f336:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800f33a:	f008 f903 	bl	8017544 <rcl_get_default_domain_id>
 800f33e:	4604      	mov	r4, r0
 800f340:	2800      	cmp	r0, #0
 800f342:	f47f af75 	bne.w	800f230 <rcl_init+0x144>
 800f346:	683b      	ldr	r3, [r7, #0]
 800f348:	695d      	ldr	r5, [r3, #20]
 800f34a:	e796      	b.n	800f27a <rcl_init+0x18e>
 800f34c:	4630      	mov	r0, r6
 800f34e:	f008 f847 	bl	80173e0 <rcl_get_automatic_discovery_range>
 800f352:	4604      	mov	r4, r0
 800f354:	2800      	cmp	r0, #0
 800f356:	d09e      	beq.n	800f296 <rcl_init+0x1aa>
 800f358:	e76a      	b.n	800f230 <rcl_init+0x144>
 800f35a:	bf00      	nop
 800f35c:	2000bd20 	.word	0x2000bd20

0800f360 <rcl_get_zero_initialized_init_options>:
 800f360:	2000      	movs	r0, #0
 800f362:	4770      	bx	lr

0800f364 <rcl_init_options_init>:
 800f364:	b084      	sub	sp, #16
 800f366:	b570      	push	{r4, r5, r6, lr}
 800f368:	b09e      	sub	sp, #120	; 0x78
 800f36a:	ad23      	add	r5, sp, #140	; 0x8c
 800f36c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800f370:	2800      	cmp	r0, #0
 800f372:	d046      	beq.n	800f402 <rcl_init_options_init+0x9e>
 800f374:	6803      	ldr	r3, [r0, #0]
 800f376:	4604      	mov	r4, r0
 800f378:	b133      	cbz	r3, 800f388 <rcl_init_options_init+0x24>
 800f37a:	2564      	movs	r5, #100	; 0x64
 800f37c:	4628      	mov	r0, r5
 800f37e:	b01e      	add	sp, #120	; 0x78
 800f380:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f384:	b004      	add	sp, #16
 800f386:	4770      	bx	lr
 800f388:	4628      	mov	r0, r5
 800f38a:	f7fc fec5 	bl	800c118 <rcutils_allocator_is_valid>
 800f38e:	2800      	cmp	r0, #0
 800f390:	d037      	beq.n	800f402 <rcl_init_options_init+0x9e>
 800f392:	46ae      	mov	lr, r5
 800f394:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 800f398:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f39c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f3a0:	f8de 3000 	ldr.w	r3, [lr]
 800f3a4:	2070      	movs	r0, #112	; 0x70
 800f3a6:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800f3a8:	f8cc 3000 	str.w	r3, [ip]
 800f3ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f3ae:	4798      	blx	r3
 800f3b0:	4606      	mov	r6, r0
 800f3b2:	6020      	str	r0, [r4, #0]
 800f3b4:	b338      	cbz	r0, 800f406 <rcl_init_options_init+0xa2>
 800f3b6:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 800f3ba:	4686      	mov	lr, r0
 800f3bc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f3c0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f3c4:	f8dc 3000 	ldr.w	r3, [ip]
 800f3c8:	a802      	add	r0, sp, #8
 800f3ca:	f8ce 3000 	str.w	r3, [lr]
 800f3ce:	f002 ffaf 	bl	8012330 <rmw_get_zero_initialized_init_options>
 800f3d2:	2258      	movs	r2, #88	; 0x58
 800f3d4:	a902      	add	r1, sp, #8
 800f3d6:	f106 0018 	add.w	r0, r6, #24
 800f3da:	f00a fa70 	bl	80198be <memcpy>
 800f3de:	ab26      	add	r3, sp, #152	; 0x98
 800f3e0:	6826      	ldr	r6, [r4, #0]
 800f3e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f3e6:	e88d 0003 	stmia.w	sp, {r0, r1}
 800f3ea:	f106 0018 	add.w	r0, r6, #24
 800f3ee:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800f3f2:	f003 f973 	bl	80126dc <rmw_init_options_init>
 800f3f6:	4605      	mov	r5, r0
 800f3f8:	b938      	cbnz	r0, 800f40a <rcl_init_options_init+0xa6>
 800f3fa:	6823      	ldr	r3, [r4, #0]
 800f3fc:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34
 800f400:	e7bc      	b.n	800f37c <rcl_init_options_init+0x18>
 800f402:	250b      	movs	r5, #11
 800f404:	e7ba      	b.n	800f37c <rcl_init_options_init+0x18>
 800f406:	250a      	movs	r5, #10
 800f408:	e7b8      	b.n	800f37c <rcl_init_options_init+0x18>
 800f40a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800f40c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800f40e:	6820      	ldr	r0, [r4, #0]
 800f410:	4798      	blx	r3
 800f412:	4628      	mov	r0, r5
 800f414:	f7ff fde6 	bl	800efe4 <rcl_convert_rmw_ret_to_rcl_ret>
 800f418:	4605      	mov	r5, r0
 800f41a:	e7af      	b.n	800f37c <rcl_init_options_init+0x18>

0800f41c <rcl_init_options_fini>:
 800f41c:	b530      	push	{r4, r5, lr}
 800f41e:	b087      	sub	sp, #28
 800f420:	b1f0      	cbz	r0, 800f460 <rcl_init_options_fini+0x44>
 800f422:	6803      	ldr	r3, [r0, #0]
 800f424:	4604      	mov	r4, r0
 800f426:	b1db      	cbz	r3, 800f460 <rcl_init_options_fini+0x44>
 800f428:	469c      	mov	ip, r3
 800f42a:	f10d 0e04 	add.w	lr, sp, #4
 800f42e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f432:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f436:	f8dc 3000 	ldr.w	r3, [ip]
 800f43a:	a801      	add	r0, sp, #4
 800f43c:	f8ce 3000 	str.w	r3, [lr]
 800f440:	f7fc fe6a 	bl	800c118 <rcutils_allocator_is_valid>
 800f444:	b160      	cbz	r0, 800f460 <rcl_init_options_fini+0x44>
 800f446:	6820      	ldr	r0, [r4, #0]
 800f448:	3018      	adds	r0, #24
 800f44a:	f003 f9e1 	bl	8012810 <rmw_init_options_fini>
 800f44e:	4605      	mov	r5, r0
 800f450:	b950      	cbnz	r0, 800f468 <rcl_init_options_fini+0x4c>
 800f452:	6820      	ldr	r0, [r4, #0]
 800f454:	9b02      	ldr	r3, [sp, #8]
 800f456:	9905      	ldr	r1, [sp, #20]
 800f458:	4798      	blx	r3
 800f45a:	4628      	mov	r0, r5
 800f45c:	b007      	add	sp, #28
 800f45e:	bd30      	pop	{r4, r5, pc}
 800f460:	250b      	movs	r5, #11
 800f462:	4628      	mov	r0, r5
 800f464:	b007      	add	sp, #28
 800f466:	bd30      	pop	{r4, r5, pc}
 800f468:	f7ff fdbc 	bl	800efe4 <rcl_convert_rmw_ret_to_rcl_ret>
 800f46c:	4605      	mov	r5, r0
 800f46e:	e7f8      	b.n	800f462 <rcl_init_options_fini+0x46>

0800f470 <rcl_init_options_copy>:
 800f470:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f472:	b09d      	sub	sp, #116	; 0x74
 800f474:	2800      	cmp	r0, #0
 800f476:	d04d      	beq.n	800f514 <rcl_init_options_copy+0xa4>
 800f478:	4604      	mov	r4, r0
 800f47a:	6800      	ldr	r0, [r0, #0]
 800f47c:	2800      	cmp	r0, #0
 800f47e:	d049      	beq.n	800f514 <rcl_init_options_copy+0xa4>
 800f480:	460d      	mov	r5, r1
 800f482:	f7fc fe49 	bl	800c118 <rcutils_allocator_is_valid>
 800f486:	2d00      	cmp	r5, #0
 800f488:	d044      	beq.n	800f514 <rcl_init_options_copy+0xa4>
 800f48a:	f080 0001 	eor.w	r0, r0, #1
 800f48e:	b2c0      	uxtb	r0, r0
 800f490:	2800      	cmp	r0, #0
 800f492:	d13f      	bne.n	800f514 <rcl_init_options_copy+0xa4>
 800f494:	682b      	ldr	r3, [r5, #0]
 800f496:	b11b      	cbz	r3, 800f4a0 <rcl_init_options_copy+0x30>
 800f498:	2464      	movs	r4, #100	; 0x64
 800f49a:	4620      	mov	r0, r4
 800f49c:	b01d      	add	sp, #116	; 0x74
 800f49e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4a0:	6826      	ldr	r6, [r4, #0]
 800f4a2:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
 800f4a6:	46b6      	mov	lr, r6
 800f4a8:	6837      	ldr	r7, [r6, #0]
 800f4aa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f4ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f4b2:	f8de 3000 	ldr.w	r3, [lr]
 800f4b6:	2070      	movs	r0, #112	; 0x70
 800f4b8:	4619      	mov	r1, r3
 800f4ba:	f8cc 3000 	str.w	r3, [ip]
 800f4be:	47b8      	blx	r7
 800f4c0:	4606      	mov	r6, r0
 800f4c2:	6028      	str	r0, [r5, #0]
 800f4c4:	b350      	cbz	r0, 800f51c <rcl_init_options_copy+0xac>
 800f4c6:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
 800f4ca:	4686      	mov	lr, r0
 800f4cc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f4d0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f4d4:	f8dc 3000 	ldr.w	r3, [ip]
 800f4d8:	4668      	mov	r0, sp
 800f4da:	f8ce 3000 	str.w	r3, [lr]
 800f4de:	f002 ff27 	bl	8012330 <rmw_get_zero_initialized_init_options>
 800f4e2:	2258      	movs	r2, #88	; 0x58
 800f4e4:	4669      	mov	r1, sp
 800f4e6:	f106 0018 	add.w	r0, r6, #24
 800f4ea:	f00a f9e8 	bl	80198be <memcpy>
 800f4ee:	6820      	ldr	r0, [r4, #0]
 800f4f0:	6829      	ldr	r1, [r5, #0]
 800f4f2:	3018      	adds	r0, #24
 800f4f4:	3118      	adds	r1, #24
 800f4f6:	f003 f959 	bl	80127ac <rmw_init_options_copy>
 800f4fa:	4604      	mov	r4, r0
 800f4fc:	2800      	cmp	r0, #0
 800f4fe:	d0cc      	beq.n	800f49a <rcl_init_options_copy+0x2a>
 800f500:	f7fc fe18 	bl	800c134 <rcutils_get_error_string>
 800f504:	f7fc fe2c 	bl	800c160 <rcutils_reset_error>
 800f508:	4628      	mov	r0, r5
 800f50a:	f7ff ff87 	bl	800f41c <rcl_init_options_fini>
 800f50e:	b138      	cbz	r0, 800f520 <rcl_init_options_copy+0xb0>
 800f510:	4604      	mov	r4, r0
 800f512:	e7c2      	b.n	800f49a <rcl_init_options_copy+0x2a>
 800f514:	240b      	movs	r4, #11
 800f516:	4620      	mov	r0, r4
 800f518:	b01d      	add	sp, #116	; 0x74
 800f51a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f51c:	240a      	movs	r4, #10
 800f51e:	e7bc      	b.n	800f49a <rcl_init_options_copy+0x2a>
 800f520:	4620      	mov	r0, r4
 800f522:	b01d      	add	sp, #116	; 0x74
 800f524:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f528:	f7ff bd5c 	b.w	800efe4 <rcl_convert_rmw_ret_to_rcl_ret>

0800f52c <rcl_get_localhost_only>:
 800f52c:	b510      	push	{r4, lr}
 800f52e:	2300      	movs	r3, #0
 800f530:	b082      	sub	sp, #8
 800f532:	9301      	str	r3, [sp, #4]
 800f534:	b1c0      	cbz	r0, 800f568 <rcl_get_localhost_only+0x3c>
 800f536:	4604      	mov	r4, r0
 800f538:	a901      	add	r1, sp, #4
 800f53a:	480d      	ldr	r0, [pc, #52]	; (800f570 <rcl_get_localhost_only+0x44>)
 800f53c:	f002 fc34 	bl	8011da8 <rcutils_get_env>
 800f540:	b110      	cbz	r0, 800f548 <rcl_get_localhost_only+0x1c>
 800f542:	2001      	movs	r0, #1
 800f544:	b002      	add	sp, #8
 800f546:	bd10      	pop	{r4, pc}
 800f548:	9b01      	ldr	r3, [sp, #4]
 800f54a:	b10b      	cbz	r3, 800f550 <rcl_get_localhost_only+0x24>
 800f54c:	781b      	ldrb	r3, [r3, #0]
 800f54e:	b923      	cbnz	r3, 800f55a <rcl_get_localhost_only+0x2e>
 800f550:	2300      	movs	r3, #0
 800f552:	4618      	mov	r0, r3
 800f554:	7023      	strb	r3, [r4, #0]
 800f556:	b002      	add	sp, #8
 800f558:	bd10      	pop	{r4, pc}
 800f55a:	2b31      	cmp	r3, #49	; 0x31
 800f55c:	bf0c      	ite	eq
 800f55e:	2301      	moveq	r3, #1
 800f560:	2302      	movne	r3, #2
 800f562:	7023      	strb	r3, [r4, #0]
 800f564:	b002      	add	sp, #8
 800f566:	bd10      	pop	{r4, pc}
 800f568:	200b      	movs	r0, #11
 800f56a:	b002      	add	sp, #8
 800f56c:	bd10      	pop	{r4, pc}
 800f56e:	bf00      	nop
 800f570:	0801b490 	.word	0x0801b490

0800f574 <rcl_get_zero_initialized_node>:
 800f574:	4a03      	ldr	r2, [pc, #12]	; (800f584 <rcl_get_zero_initialized_node+0x10>)
 800f576:	4603      	mov	r3, r0
 800f578:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f57c:	e883 0003 	stmia.w	r3, {r0, r1}
 800f580:	4618      	mov	r0, r3
 800f582:	4770      	bx	lr
 800f584:	0801b4c0 	.word	0x0801b4c0

0800f588 <rcl_node_init>:
 800f588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f58c:	b0ab      	sub	sp, #172	; 0xac
 800f58e:	4604      	mov	r4, r0
 800f590:	460e      	mov	r6, r1
 800f592:	4615      	mov	r5, r2
 800f594:	f8dd 80d0 	ldr.w	r8, [sp, #208]	; 0xd0
 800f598:	a825      	add	r0, sp, #148	; 0x94
 800f59a:	461f      	mov	r7, r3
 800f59c:	f008 f9f8 	bl	8017990 <rcl_guard_condition_get_default_options>
 800f5a0:	f1b8 0f00 	cmp.w	r8, #0
 800f5a4:	f000 80f3 	beq.w	800f78e <rcl_node_init+0x206>
 800f5a8:	4640      	mov	r0, r8
 800f5aa:	f7fc fdb5 	bl	800c118 <rcutils_allocator_is_valid>
 800f5ae:	2d00      	cmp	r5, #0
 800f5b0:	bf18      	it	ne
 800f5b2:	2c00      	cmpne	r4, #0
 800f5b4:	f080 0001 	eor.w	r0, r0, #1
 800f5b8:	bf0c      	ite	eq
 800f5ba:	f04f 0c01 	moveq.w	ip, #1
 800f5be:	f04f 0c00 	movne.w	ip, #0
 800f5c2:	2e00      	cmp	r6, #0
 800f5c4:	bf08      	it	eq
 800f5c6:	f04c 0c01 	orreq.w	ip, ip, #1
 800f5ca:	ea4c 0c00 	orr.w	ip, ip, r0
 800f5ce:	f01c 09ff 	ands.w	r9, ip, #255	; 0xff
 800f5d2:	f040 80dc 	bne.w	800f78e <rcl_node_init+0x206>
 800f5d6:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800f5da:	f1ba 0f00 	cmp.w	sl, #0
 800f5de:	f040 80fc 	bne.w	800f7da <rcl_node_init+0x252>
 800f5e2:	2f00      	cmp	r7, #0
 800f5e4:	f000 80d3 	beq.w	800f78e <rcl_node_init+0x206>
 800f5e8:	4638      	mov	r0, r7
 800f5ea:	f7ff fd19 	bl	800f020 <rcl_context_is_valid>
 800f5ee:	4683      	mov	fp, r0
 800f5f0:	2800      	cmp	r0, #0
 800f5f2:	f000 80d2 	beq.w	800f79a <rcl_node_init+0x212>
 800f5f6:	4652      	mov	r2, sl
 800f5f8:	4630      	mov	r0, r6
 800f5fa:	a924      	add	r1, sp, #144	; 0x90
 800f5fc:	f8cd a090 	str.w	sl, [sp, #144]	; 0x90
 800f600:	f002 ffa4 	bl	801254c <rmw_validate_node_name>
 800f604:	4682      	mov	sl, r0
 800f606:	2800      	cmp	r0, #0
 800f608:	f040 80c3 	bne.w	800f792 <rcl_node_init+0x20a>
 800f60c:	9824      	ldr	r0, [sp, #144]	; 0x90
 800f60e:	2800      	cmp	r0, #0
 800f610:	f040 80f1 	bne.w	800f7f6 <rcl_node_init+0x26e>
 800f614:	4628      	mov	r0, r5
 800f616:	f7f0 fe73 	bl	8000300 <strlen>
 800f61a:	2800      	cmp	r0, #0
 800f61c:	f040 80c0 	bne.w	800f7a0 <rcl_node_init+0x218>
 800f620:	4d79      	ldr	r5, [pc, #484]	; (800f808 <rcl_node_init+0x280>)
 800f622:	a924      	add	r1, sp, #144	; 0x90
 800f624:	2200      	movs	r2, #0
 800f626:	4628      	mov	r0, r5
 800f628:	f002 ff72 	bl	8012510 <rmw_validate_namespace>
 800f62c:	4682      	mov	sl, r0
 800f62e:	2800      	cmp	r0, #0
 800f630:	f040 80af 	bne.w	800f792 <rcl_node_init+0x20a>
 800f634:	9824      	ldr	r0, [sp, #144]	; 0x90
 800f636:	2800      	cmp	r0, #0
 800f638:	f040 80d5 	bne.w	800f7e6 <rcl_node_init+0x25e>
 800f63c:	f8d8 3000 	ldr.w	r3, [r8]
 800f640:	2080      	movs	r0, #128	; 0x80
 800f642:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f646:	4798      	blx	r3
 800f648:	4682      	mov	sl, r0
 800f64a:	6060      	str	r0, [r4, #4]
 800f64c:	2800      	cmp	r0, #0
 800f64e:	f000 80cf 	beq.w	800f7f0 <rcl_node_init+0x268>
 800f652:	2200      	movs	r2, #0
 800f654:	2300      	movs	r3, #0
 800f656:	a808      	add	r0, sp, #32
 800f658:	e9ca 231c 	strd	r2, r3, [sl, #112]	; 0x70
 800f65c:	e9ca 231e 	strd	r2, r3, [sl, #120]	; 0x78
 800f660:	f000 f902 	bl	800f868 <rcl_node_get_default_options>
 800f664:	a908      	add	r1, sp, #32
 800f666:	4650      	mov	r0, sl
 800f668:	2270      	movs	r2, #112	; 0x70
 800f66a:	f00a f928 	bl	80198be <memcpy>
 800f66e:	6861      	ldr	r1, [r4, #4]
 800f670:	4640      	mov	r0, r8
 800f672:	6027      	str	r7, [r4, #0]
 800f674:	f000 f906 	bl	800f884 <rcl_node_options_copy>
 800f678:	2800      	cmp	r0, #0
 800f67a:	d158      	bne.n	800f72e <rcl_node_init+0x1a6>
 800f67c:	4628      	mov	r0, r5
 800f67e:	f7f0 fe3f 	bl	8000300 <strlen>
 800f682:	4428      	add	r0, r5
 800f684:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800f688:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800f68c:	2b2f      	cmp	r3, #47	; 0x2f
 800f68e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800f692:	9300      	str	r3, [sp, #0]
 800f694:	bf0c      	ite	eq
 800f696:	4b5d      	ldreq	r3, [pc, #372]	; (800f80c <rcl_node_init+0x284>)
 800f698:	4b5d      	ldrne	r3, [pc, #372]	; (800f810 <rcl_node_init+0x288>)
 800f69a:	9302      	str	r3, [sp, #8]
 800f69c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f6a0:	9301      	str	r3, [sp, #4]
 800f6a2:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800f6a6:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800f6aa:	f002 fba5 	bl	8011df8 <rcutils_format_string_limit>
 800f6ae:	6823      	ldr	r3, [r4, #0]
 800f6b0:	f8ca 007c 	str.w	r0, [sl, #124]	; 0x7c
 800f6b4:	4631      	mov	r1, r6
 800f6b6:	6818      	ldr	r0, [r3, #0]
 800f6b8:	462a      	mov	r2, r5
 800f6ba:	6866      	ldr	r6, [r4, #4]
 800f6bc:	3028      	adds	r0, #40	; 0x28
 800f6be:	f003 fac5 	bl	8012c4c <rmw_create_node>
 800f6c2:	6863      	ldr	r3, [r4, #4]
 800f6c4:	6730      	str	r0, [r6, #112]	; 0x70
 800f6c6:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800f6c8:	2800      	cmp	r0, #0
 800f6ca:	d032      	beq.n	800f732 <rcl_node_init+0x1aa>
 800f6cc:	f003 fb4e 	bl	8012d6c <rmw_node_get_graph_guard_condition>
 800f6d0:	4682      	mov	sl, r0
 800f6d2:	b360      	cbz	r0, 800f72e <rcl_node_init+0x1a6>
 800f6d4:	f8d8 3000 	ldr.w	r3, [r8]
 800f6d8:	2008      	movs	r0, #8
 800f6da:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f6de:	6866      	ldr	r6, [r4, #4]
 800f6e0:	4798      	blx	r3
 800f6e2:	6863      	ldr	r3, [r4, #4]
 800f6e4:	6770      	str	r0, [r6, #116]	; 0x74
 800f6e6:	f8d3 b074 	ldr.w	fp, [r3, #116]	; 0x74
 800f6ea:	f1bb 0f00 	cmp.w	fp, #0
 800f6ee:	d020      	beq.n	800f732 <rcl_node_init+0x1aa>
 800f6f0:	a806      	add	r0, sp, #24
 800f6f2:	ae25      	add	r6, sp, #148	; 0x94
 800f6f4:	f008 f8c0 	bl	8017878 <rcl_get_zero_initialized_guard_condition>
 800f6f8:	a806      	add	r0, sp, #24
 800f6fa:	6863      	ldr	r3, [r4, #4]
 800f6fc:	46c4      	mov	ip, r8
 800f6fe:	c803      	ldmia	r0, {r0, r1}
 800f700:	f8d3 e074 	ldr.w	lr, [r3, #116]	; 0x74
 800f704:	e88b 0003 	stmia.w	fp, {r0, r1}
 800f708:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f70c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f70e:	f8dc 3000 	ldr.w	r3, [ip]
 800f712:	6033      	str	r3, [r6, #0]
 800f714:	ab2a      	add	r3, sp, #168	; 0xa8
 800f716:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800f71a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f71e:	4651      	mov	r1, sl
 800f720:	463a      	mov	r2, r7
 800f722:	4670      	mov	r0, lr
 800f724:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800f726:	f008 f8b1 	bl	801788c <rcl_guard_condition_init_from_rmw>
 800f72a:	4682      	mov	sl, r0
 800f72c:	b328      	cbz	r0, 800f77a <rcl_node_init+0x1f2>
 800f72e:	6863      	ldr	r3, [r4, #4]
 800f730:	b1f3      	cbz	r3, 800f770 <rcl_node_init+0x1e8>
 800f732:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800f734:	b128      	cbz	r0, 800f742 <rcl_node_init+0x1ba>
 800f736:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f73a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f73e:	4798      	blx	r3
 800f740:	6863      	ldr	r3, [r4, #4]
 800f742:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800f744:	b110      	cbz	r0, 800f74c <rcl_node_init+0x1c4>
 800f746:	f003 fa93 	bl	8012c70 <rmw_destroy_node>
 800f74a:	6863      	ldr	r3, [r4, #4]
 800f74c:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800f74e:	b148      	cbz	r0, 800f764 <rcl_node_init+0x1dc>
 800f750:	f008 f8f8 	bl	8017944 <rcl_guard_condition_fini>
 800f754:	6863      	ldr	r3, [r4, #4]
 800f756:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f75a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800f75c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f760:	4798      	blx	r3
 800f762:	6863      	ldr	r3, [r4, #4]
 800f764:	4618      	mov	r0, r3
 800f766:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f76a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f76e:	4798      	blx	r3
 800f770:	2300      	movs	r3, #0
 800f772:	f04f 0a01 	mov.w	sl, #1
 800f776:	e9c4 3300 	strd	r3, r3, [r4]
 800f77a:	f1b9 0f00 	cmp.w	r9, #0
 800f77e:	d008      	beq.n	800f792 <rcl_node_init+0x20a>
 800f780:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f784:	4628      	mov	r0, r5
 800f786:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f78a:	4798      	blx	r3
 800f78c:	e001      	b.n	800f792 <rcl_node_init+0x20a>
 800f78e:	f04f 0a0b 	mov.w	sl, #11
 800f792:	4650      	mov	r0, sl
 800f794:	b02b      	add	sp, #172	; 0xac
 800f796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f79a:	f04f 0a65 	mov.w	sl, #101	; 0x65
 800f79e:	e7f8      	b.n	800f792 <rcl_node_init+0x20a>
 800f7a0:	782b      	ldrb	r3, [r5, #0]
 800f7a2:	2b2f      	cmp	r3, #47	; 0x2f
 800f7a4:	f43f af3d 	beq.w	800f622 <rcl_node_init+0x9a>
 800f7a8:	9503      	str	r5, [sp, #12]
 800f7aa:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800f7ae:	9300      	str	r3, [sp, #0]
 800f7b0:	4b18      	ldr	r3, [pc, #96]	; (800f814 <rcl_node_init+0x28c>)
 800f7b2:	9302      	str	r3, [sp, #8]
 800f7b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f7b8:	9301      	str	r3, [sp, #4]
 800f7ba:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800f7be:	f002 fb1b 	bl	8011df8 <rcutils_format_string_limit>
 800f7c2:	4605      	mov	r5, r0
 800f7c4:	b1e0      	cbz	r0, 800f800 <rcl_node_init+0x278>
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	a924      	add	r1, sp, #144	; 0x90
 800f7ca:	9224      	str	r2, [sp, #144]	; 0x90
 800f7cc:	f002 fea0 	bl	8012510 <rmw_validate_namespace>
 800f7d0:	4682      	mov	sl, r0
 800f7d2:	2800      	cmp	r0, #0
 800f7d4:	d1d4      	bne.n	800f780 <rcl_node_init+0x1f8>
 800f7d6:	46d9      	mov	r9, fp
 800f7d8:	e72c      	b.n	800f634 <rcl_node_init+0xac>
 800f7da:	f04f 0a64 	mov.w	sl, #100	; 0x64
 800f7de:	4650      	mov	r0, sl
 800f7e0:	b02b      	add	sp, #172	; 0xac
 800f7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7e6:	f04f 0aca 	mov.w	sl, #202	; 0xca
 800f7ea:	f002 fea3 	bl	8012534 <rmw_namespace_validation_result_string>
 800f7ee:	e7c4      	b.n	800f77a <rcl_node_init+0x1f2>
 800f7f0:	f04f 0a0a 	mov.w	sl, #10
 800f7f4:	e7c1      	b.n	800f77a <rcl_node_init+0x1f2>
 800f7f6:	f04f 0ac9 	mov.w	sl, #201	; 0xc9
 800f7fa:	f002 fefb 	bl	80125f4 <rmw_node_name_validation_result_string>
 800f7fe:	e7c8      	b.n	800f792 <rcl_node_init+0x20a>
 800f800:	f04f 0a0a 	mov.w	sl, #10
 800f804:	e7c5      	b.n	800f792 <rcl_node_init+0x20a>
 800f806:	bf00      	nop
 800f808:	0801b4a8 	.word	0x0801b4a8
 800f80c:	0801b4b0 	.word	0x0801b4b0
 800f810:	0801b4b8 	.word	0x0801b4b8
 800f814:	0801b4ac 	.word	0x0801b4ac

0800f818 <rcl_node_is_valid>:
 800f818:	b130      	cbz	r0, 800f828 <rcl_node_is_valid+0x10>
 800f81a:	6843      	ldr	r3, [r0, #4]
 800f81c:	b123      	cbz	r3, 800f828 <rcl_node_is_valid+0x10>
 800f81e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f820:	b113      	cbz	r3, 800f828 <rcl_node_is_valid+0x10>
 800f822:	6800      	ldr	r0, [r0, #0]
 800f824:	f7ff bbfc 	b.w	800f020 <rcl_context_is_valid>
 800f828:	2000      	movs	r0, #0
 800f82a:	4770      	bx	lr

0800f82c <rcl_node_get_name>:
 800f82c:	b120      	cbz	r0, 800f838 <rcl_node_get_name+0xc>
 800f82e:	6840      	ldr	r0, [r0, #4]
 800f830:	b110      	cbz	r0, 800f838 <rcl_node_get_name+0xc>
 800f832:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800f834:	b100      	cbz	r0, 800f838 <rcl_node_get_name+0xc>
 800f836:	6880      	ldr	r0, [r0, #8]
 800f838:	4770      	bx	lr
 800f83a:	bf00      	nop

0800f83c <rcl_node_get_namespace>:
 800f83c:	b120      	cbz	r0, 800f848 <rcl_node_get_namespace+0xc>
 800f83e:	6840      	ldr	r0, [r0, #4]
 800f840:	b110      	cbz	r0, 800f848 <rcl_node_get_namespace+0xc>
 800f842:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800f844:	b100      	cbz	r0, 800f848 <rcl_node_get_namespace+0xc>
 800f846:	68c0      	ldr	r0, [r0, #12]
 800f848:	4770      	bx	lr
 800f84a:	bf00      	nop

0800f84c <rcl_node_get_options>:
 800f84c:	b128      	cbz	r0, 800f85a <rcl_node_get_options+0xe>
 800f84e:	6840      	ldr	r0, [r0, #4]
 800f850:	b118      	cbz	r0, 800f85a <rcl_node_get_options+0xe>
 800f852:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800f854:	2b00      	cmp	r3, #0
 800f856:	bf08      	it	eq
 800f858:	2000      	moveq	r0, #0
 800f85a:	4770      	bx	lr

0800f85c <rcl_node_get_rmw_handle>:
 800f85c:	b110      	cbz	r0, 800f864 <rcl_node_get_rmw_handle+0x8>
 800f85e:	6840      	ldr	r0, [r0, #4]
 800f860:	b100      	cbz	r0, 800f864 <rcl_node_get_rmw_handle+0x8>
 800f862:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800f864:	4770      	bx	lr
 800f866:	bf00      	nop

0800f868 <rcl_node_get_default_options>:
 800f868:	b510      	push	{r4, lr}
 800f86a:	4604      	mov	r4, r0
 800f86c:	2270      	movs	r2, #112	; 0x70
 800f86e:	2100      	movs	r1, #0
 800f870:	f009 feb0 	bl	80195d4 <memset>
 800f874:	4620      	mov	r0, r4
 800f876:	f7fc fc41 	bl	800c0fc <rcutils_get_default_allocator>
 800f87a:	2301      	movs	r3, #1
 800f87c:	4620      	mov	r0, r4
 800f87e:	7523      	strb	r3, [r4, #20]
 800f880:	bd10      	pop	{r4, pc}
 800f882:	bf00      	nop

0800f884 <rcl_node_options_copy>:
 800f884:	2800      	cmp	r0, #0
 800f886:	bf18      	it	ne
 800f888:	4288      	cmpne	r0, r1
 800f88a:	d01b      	beq.n	800f8c4 <rcl_node_options_copy+0x40>
 800f88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f88e:	fab1 f681 	clz	r6, r1
 800f892:	460c      	mov	r4, r1
 800f894:	0976      	lsrs	r6, r6, #5
 800f896:	b199      	cbz	r1, 800f8c0 <rcl_node_options_copy+0x3c>
 800f898:	4605      	mov	r5, r0
 800f89a:	8a87      	ldrh	r7, [r0, #20]
 800f89c:	4684      	mov	ip, r0
 800f89e:	468e      	mov	lr, r1
 800f8a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f8a2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f8a6:	682b      	ldr	r3, [r5, #0]
 800f8a8:	2250      	movs	r2, #80	; 0x50
 800f8aa:	f10c 0118 	add.w	r1, ip, #24
 800f8ae:	f104 0018 	add.w	r0, r4, #24
 800f8b2:	f8ce 3000 	str.w	r3, [lr]
 800f8b6:	82a7      	strh	r7, [r4, #20]
 800f8b8:	f00a f801 	bl	80198be <memcpy>
 800f8bc:	4630      	mov	r0, r6
 800f8be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8c0:	200b      	movs	r0, #11
 800f8c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8c4:	200b      	movs	r0, #11
 800f8c6:	4770      	bx	lr

0800f8c8 <rcl_node_resolve_name>:
 800f8c8:	b082      	sub	sp, #8
 800f8ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8ce:	b091      	sub	sp, #68	; 0x44
 800f8d0:	ac1a      	add	r4, sp, #104	; 0x68
 800f8d2:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 800f8d6:	e884 000c 	stmia.w	r4, {r2, r3}
 800f8da:	2800      	cmp	r0, #0
 800f8dc:	d03d      	beq.n	800f95a <rcl_node_resolve_name+0x92>
 800f8de:	460c      	mov	r4, r1
 800f8e0:	4605      	mov	r5, r0
 800f8e2:	f7ff ffb3 	bl	800f84c <rcl_node_get_options>
 800f8e6:	2800      	cmp	r0, #0
 800f8e8:	d03a      	beq.n	800f960 <rcl_node_resolve_name+0x98>
 800f8ea:	4628      	mov	r0, r5
 800f8ec:	f7ff ff9e 	bl	800f82c <rcl_node_get_name>
 800f8f0:	4606      	mov	r6, r0
 800f8f2:	4628      	mov	r0, r5
 800f8f4:	ad0b      	add	r5, sp, #44	; 0x2c
 800f8f6:	f7ff ffa1 	bl	800f83c <rcl_node_get_namespace>
 800f8fa:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 800f8fe:	4607      	mov	r7, r0
 800f900:	46ac      	mov	ip, r5
 800f902:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f906:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f90a:	f8de 3000 	ldr.w	r3, [lr]
 800f90e:	f8cc 3000 	str.w	r3, [ip]
 800f912:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f914:	b30b      	cbz	r3, 800f95a <rcl_node_resolve_name+0x92>
 800f916:	4689      	mov	r9, r1
 800f918:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800f91c:	f002 fbee 	bl	80120fc <rcutils_get_zero_initialized_string_map>
 800f920:	ab10      	add	r3, sp, #64	; 0x40
 800f922:	9008      	str	r0, [sp, #32]
 800f924:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800f928:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800f92c:	2100      	movs	r1, #0
 800f92e:	a808      	add	r0, sp, #32
 800f930:	e895 000c 	ldmia.w	r5, {r2, r3}
 800f934:	f002 fc34 	bl	80121a0 <rcutils_string_map_init>
 800f938:	4683      	mov	fp, r0
 800f93a:	b1a0      	cbz	r0, 800f966 <rcl_node_resolve_name+0x9e>
 800f93c:	f7fc fbfa 	bl	800c134 <rcutils_get_error_string>
 800f940:	f7fc fc0e 	bl	800c160 <rcutils_reset_error>
 800f944:	f1bb 0f0a 	cmp.w	fp, #10
 800f948:	bf18      	it	ne
 800f94a:	f04f 0b01 	movne.w	fp, #1
 800f94e:	4658      	mov	r0, fp
 800f950:	b011      	add	sp, #68	; 0x44
 800f952:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f956:	b002      	add	sp, #8
 800f958:	4770      	bx	lr
 800f95a:	f04f 0b0b 	mov.w	fp, #11
 800f95e:	e7f6      	b.n	800f94e <rcl_node_resolve_name+0x86>
 800f960:	f04f 0b01 	mov.w	fp, #1
 800f964:	e7f3      	b.n	800f94e <rcl_node_resolve_name+0x86>
 800f966:	9009      	str	r0, [sp, #36]	; 0x24
 800f968:	9007      	str	r0, [sp, #28]
 800f96a:	a808      	add	r0, sp, #32
 800f96c:	f007 ff7e 	bl	801786c <rcl_get_default_topic_name_substitutions>
 800f970:	4683      	mov	fp, r0
 800f972:	b180      	cbz	r0, 800f996 <rcl_node_resolve_name+0xce>
 800f974:	280a      	cmp	r0, #10
 800f976:	a808      	add	r0, sp, #32
 800f978:	bf18      	it	ne
 800f97a:	f04f 0b01 	movne.w	fp, #1
 800f97e:	f002 fc4d 	bl	801221c <rcutils_string_map_fini>
 800f982:	4604      	mov	r4, r0
 800f984:	2800      	cmp	r0, #0
 800f986:	d15b      	bne.n	800fa40 <rcl_node_resolve_name+0x178>
 800f988:	4651      	mov	r1, sl
 800f98a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f98c:	47c8      	blx	r9
 800f98e:	4651      	mov	r1, sl
 800f990:	4620      	mov	r0, r4
 800f992:	47c8      	blx	r9
 800f994:	e7db      	b.n	800f94e <rcl_node_resolve_name+0x86>
 800f996:	ab09      	add	r3, sp, #36	; 0x24
 800f998:	46ec      	mov	ip, sp
 800f99a:	9305      	str	r3, [sp, #20]
 800f99c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f99e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f9a2:	682b      	ldr	r3, [r5, #0]
 800f9a4:	463a      	mov	r2, r7
 800f9a6:	4631      	mov	r1, r6
 800f9a8:	4620      	mov	r0, r4
 800f9aa:	f8cc 3000 	str.w	r3, [ip]
 800f9ae:	ab08      	add	r3, sp, #32
 800f9b0:	f007 fdfc 	bl	80175ac <rcl_expand_topic_name>
 800f9b4:	4683      	mov	fp, r0
 800f9b6:	b9d8      	cbnz	r0, 800f9f0 <rcl_node_resolve_name+0x128>
 800f9b8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f9ba:	4602      	mov	r2, r0
 800f9bc:	9009      	str	r0, [sp, #36]	; 0x24
 800f9be:	a90a      	add	r1, sp, #40	; 0x28
 800f9c0:	4620      	mov	r0, r4
 800f9c2:	f002 fcd5 	bl	8012370 <rmw_validate_full_topic_name>
 800f9c6:	bb50      	cbnz	r0, 800fa1e <rcl_node_resolve_name+0x156>
 800f9c8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800f9ca:	2d00      	cmp	r5, #0
 800f9cc:	d140      	bne.n	800fa50 <rcl_node_resolve_name+0x188>
 800f9ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f9d0:	a808      	add	r0, sp, #32
 800f9d2:	601c      	str	r4, [r3, #0]
 800f9d4:	f002 fc22 	bl	801221c <rcutils_string_map_fini>
 800f9d8:	4683      	mov	fp, r0
 800f9da:	2800      	cmp	r0, #0
 800f9dc:	d043      	beq.n	800fa66 <rcl_node_resolve_name+0x19e>
 800f9de:	f7fc fba9 	bl	800c134 <rcutils_get_error_string>
 800f9e2:	46a8      	mov	r8, r5
 800f9e4:	f04f 0b01 	mov.w	fp, #1
 800f9e8:	462c      	mov	r4, r5
 800f9ea:	f7fc fbb9 	bl	800c160 <rcutils_reset_error>
 800f9ee:	e00a      	b.n	800fa06 <rcl_node_resolve_name+0x13e>
 800f9f0:	2867      	cmp	r0, #103	; 0x67
 800f9f2:	bf14      	ite	ne
 800f9f4:	f04f 0800 	movne.w	r8, #0
 800f9f8:	f008 0801 	andeq.w	r8, r8, #1
 800f9fc:	9c07      	ldr	r4, [sp, #28]
 800f9fe:	a808      	add	r0, sp, #32
 800fa00:	f002 fc0c 	bl	801221c <rcutils_string_map_fini>
 800fa04:	bb50      	cbnz	r0, 800fa5c <rcl_node_resolve_name+0x194>
 800fa06:	4651      	mov	r1, sl
 800fa08:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fa0a:	47c8      	blx	r9
 800fa0c:	4651      	mov	r1, sl
 800fa0e:	4620      	mov	r0, r4
 800fa10:	47c8      	blx	r9
 800fa12:	f1b8 0f00 	cmp.w	r8, #0
 800fa16:	bf18      	it	ne
 800fa18:	f04f 0b68 	movne.w	fp, #104	; 0x68
 800fa1c:	e797      	b.n	800f94e <rcl_node_resolve_name+0x86>
 800fa1e:	f7fc fb89 	bl	800c134 <rcutils_get_error_string>
 800fa22:	f7fc fb9d 	bl	800c160 <rcutils_reset_error>
 800fa26:	a808      	add	r0, sp, #32
 800fa28:	f002 fbf8 	bl	801221c <rcutils_string_map_fini>
 800fa2c:	b998      	cbnz	r0, 800fa56 <rcl_node_resolve_name+0x18e>
 800fa2e:	4651      	mov	r1, sl
 800fa30:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fa32:	47c8      	blx	r9
 800fa34:	4651      	mov	r1, sl
 800fa36:	4620      	mov	r0, r4
 800fa38:	f04f 0b01 	mov.w	fp, #1
 800fa3c:	47c8      	blx	r9
 800fa3e:	e786      	b.n	800f94e <rcl_node_resolve_name+0x86>
 800fa40:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800fa44:	f7fc fb76 	bl	800c134 <rcutils_get_error_string>
 800fa48:	f7fc fb8a 	bl	800c160 <rcutils_reset_error>
 800fa4c:	4644      	mov	r4, r8
 800fa4e:	e7da      	b.n	800fa06 <rcl_node_resolve_name+0x13e>
 800fa50:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800fa54:	e7d3      	b.n	800f9fe <rcl_node_resolve_name+0x136>
 800fa56:	46d8      	mov	r8, fp
 800fa58:	f04f 0b01 	mov.w	fp, #1
 800fa5c:	f7fc fb6a 	bl	800c134 <rcutils_get_error_string>
 800fa60:	f7fc fb7e 	bl	800c160 <rcutils_reset_error>
 800fa64:	e7cf      	b.n	800fa06 <rcl_node_resolve_name+0x13e>
 800fa66:	4651      	mov	r1, sl
 800fa68:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fa6a:	47c8      	blx	r9
 800fa6c:	4651      	mov	r1, sl
 800fa6e:	4658      	mov	r0, fp
 800fa70:	47c8      	blx	r9
 800fa72:	e76c      	b.n	800f94e <rcl_node_resolve_name+0x86>

0800fa74 <exact_match_lookup>:
 800fa74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa76:	f102 0708 	add.w	r7, r2, #8
 800fa7a:	460b      	mov	r3, r1
 800fa7c:	b085      	sub	sp, #20
 800fa7e:	4614      	mov	r4, r2
 800fa80:	4606      	mov	r6, r0
 800fa82:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800fa86:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	4919      	ldr	r1, [pc, #100]	; (800faf4 <exact_match_lookup+0x80>)
 800fa8e:	e894 000c 	ldmia.w	r4, {r2, r3}
 800fa92:	f002 f9a3 	bl	8011ddc <rcutils_join_path>
 800fa96:	7833      	ldrb	r3, [r6, #0]
 800fa98:	4605      	mov	r5, r0
 800fa9a:	2b2f      	cmp	r3, #47	; 0x2f
 800fa9c:	d023      	beq.n	800fae6 <exact_match_lookup+0x72>
 800fa9e:	f104 030c 	add.w	r3, r4, #12
 800faa2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800faa6:	e88d 0003 	stmia.w	sp, {r0, r1}
 800faaa:	1c70      	adds	r0, r6, #1
 800faac:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800fab0:	f002 f99a 	bl	8011de8 <rcutils_to_native_path>
 800fab4:	4606      	mov	r6, r0
 800fab6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800faba:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800fabe:	4631      	mov	r1, r6
 800fac0:	4628      	mov	r0, r5
 800fac2:	e894 000c 	ldmia.w	r4, {r2, r3}
 800fac6:	f002 f989 	bl	8011ddc <rcutils_join_path>
 800faca:	4603      	mov	r3, r0
 800facc:	4630      	mov	r0, r6
 800face:	6862      	ldr	r2, [r4, #4]
 800fad0:	461e      	mov	r6, r3
 800fad2:	6921      	ldr	r1, [r4, #16]
 800fad4:	4790      	blx	r2
 800fad6:	4628      	mov	r0, r5
 800fad8:	4635      	mov	r5, r6
 800fada:	6863      	ldr	r3, [r4, #4]
 800fadc:	6921      	ldr	r1, [r4, #16]
 800fade:	4798      	blx	r3
 800fae0:	4628      	mov	r0, r5
 800fae2:	b005      	add	sp, #20
 800fae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fae6:	7873      	ldrb	r3, [r6, #1]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d1d8      	bne.n	800fa9e <exact_match_lookup+0x2a>
 800faec:	4628      	mov	r0, r5
 800faee:	b005      	add	sp, #20
 800faf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800faf2:	bf00      	nop
 800faf4:	0801b504 	.word	0x0801b504

0800faf8 <rcl_get_secure_root>:
 800faf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fafc:	b085      	sub	sp, #20
 800fafe:	b168      	cbz	r0, 800fb1c <rcl_get_secure_root+0x24>
 800fb00:	4607      	mov	r7, r0
 800fb02:	4608      	mov	r0, r1
 800fb04:	460c      	mov	r4, r1
 800fb06:	f7fc fb07 	bl	800c118 <rcutils_allocator_is_valid>
 800fb0a:	b138      	cbz	r0, 800fb1c <rcl_get_secure_root+0x24>
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	482d      	ldr	r0, [pc, #180]	; (800fbc4 <rcl_get_secure_root+0xcc>)
 800fb10:	a903      	add	r1, sp, #12
 800fb12:	9303      	str	r3, [sp, #12]
 800fb14:	f002 f948 	bl	8011da8 <rcutils_get_env>
 800fb18:	4605      	mov	r5, r0
 800fb1a:	b120      	cbz	r0, 800fb26 <rcl_get_secure_root+0x2e>
 800fb1c:	2500      	movs	r5, #0
 800fb1e:	4628      	mov	r0, r5
 800fb20:	b005      	add	sp, #20
 800fb22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb26:	9b03      	ldr	r3, [sp, #12]
 800fb28:	781a      	ldrb	r2, [r3, #0]
 800fb2a:	2a00      	cmp	r2, #0
 800fb2c:	d0f6      	beq.n	800fb1c <rcl_get_secure_root+0x24>
 800fb2e:	f104 090c 	add.w	r9, r4, #12
 800fb32:	e899 0003 	ldmia.w	r9, {r0, r1}
 800fb36:	e88d 0003 	stmia.w	sp, {r0, r1}
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800fb40:	f002 fa94 	bl	801206c <rcutils_strdup>
 800fb44:	4680      	mov	r8, r0
 800fb46:	2800      	cmp	r0, #0
 800fb48:	d0e8      	beq.n	800fb1c <rcl_get_secure_root+0x24>
 800fb4a:	a903      	add	r1, sp, #12
 800fb4c:	481e      	ldr	r0, [pc, #120]	; (800fbc8 <rcl_get_secure_root+0xd0>)
 800fb4e:	9503      	str	r5, [sp, #12]
 800fb50:	f002 f92a 	bl	8011da8 <rcutils_get_env>
 800fb54:	b160      	cbz	r0, 800fb70 <rcl_get_secure_root+0x78>
 800fb56:	2600      	movs	r6, #0
 800fb58:	4630      	mov	r0, r6
 800fb5a:	6863      	ldr	r3, [r4, #4]
 800fb5c:	6921      	ldr	r1, [r4, #16]
 800fb5e:	4798      	blx	r3
 800fb60:	4640      	mov	r0, r8
 800fb62:	6863      	ldr	r3, [r4, #4]
 800fb64:	6921      	ldr	r1, [r4, #16]
 800fb66:	4798      	blx	r3
 800fb68:	4628      	mov	r0, r5
 800fb6a:	b005      	add	sp, #20
 800fb6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb70:	9b03      	ldr	r3, [sp, #12]
 800fb72:	781e      	ldrb	r6, [r3, #0]
 800fb74:	b1f6      	cbz	r6, 800fbb4 <rcl_get_secure_root+0xbc>
 800fb76:	e899 0003 	ldmia.w	r9, {r0, r1}
 800fb7a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800fb7e:	4618      	mov	r0, r3
 800fb80:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800fb84:	f002 fa72 	bl	801206c <rcutils_strdup>
 800fb88:	4606      	mov	r6, r0
 800fb8a:	2800      	cmp	r0, #0
 800fb8c:	d0e3      	beq.n	800fb56 <rcl_get_secure_root+0x5e>
 800fb8e:	4622      	mov	r2, r4
 800fb90:	4641      	mov	r1, r8
 800fb92:	f7ff ff6f 	bl	800fa74 <exact_match_lookup>
 800fb96:	4605      	mov	r5, r0
 800fb98:	2d00      	cmp	r5, #0
 800fb9a:	d0dd      	beq.n	800fb58 <rcl_get_secure_root+0x60>
 800fb9c:	4628      	mov	r0, r5
 800fb9e:	f002 f91b 	bl	8011dd8 <rcutils_is_directory>
 800fba2:	4603      	mov	r3, r0
 800fba4:	2800      	cmp	r0, #0
 800fba6:	d1d7      	bne.n	800fb58 <rcl_get_secure_root+0x60>
 800fba8:	4628      	mov	r0, r5
 800fbaa:	6921      	ldr	r1, [r4, #16]
 800fbac:	461d      	mov	r5, r3
 800fbae:	6863      	ldr	r3, [r4, #4]
 800fbb0:	4798      	blx	r3
 800fbb2:	e7d1      	b.n	800fb58 <rcl_get_secure_root+0x60>
 800fbb4:	4622      	mov	r2, r4
 800fbb6:	4638      	mov	r0, r7
 800fbb8:	4641      	mov	r1, r8
 800fbba:	f7ff ff5b 	bl	800fa74 <exact_match_lookup>
 800fbbe:	4605      	mov	r5, r0
 800fbc0:	e7ea      	b.n	800fb98 <rcl_get_secure_root+0xa0>
 800fbc2:	bf00      	nop
 800fbc4:	0801b510 	.word	0x0801b510
 800fbc8:	0801b528 	.word	0x0801b528

0800fbcc <rcl_get_security_options_from_environment>:
 800fbcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbd0:	b082      	sub	sp, #8
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	4606      	mov	r6, r0
 800fbd6:	460f      	mov	r7, r1
 800fbd8:	4821      	ldr	r0, [pc, #132]	; (800fc60 <rcl_get_security_options_from_environment+0x94>)
 800fbda:	a901      	add	r1, sp, #4
 800fbdc:	4690      	mov	r8, r2
 800fbde:	9301      	str	r3, [sp, #4]
 800fbe0:	f002 f8e2 	bl	8011da8 <rcutils_get_env>
 800fbe4:	b120      	cbz	r0, 800fbf0 <rcl_get_security_options_from_environment+0x24>
 800fbe6:	2501      	movs	r5, #1
 800fbe8:	4628      	mov	r0, r5
 800fbea:	b002      	add	sp, #8
 800fbec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbf0:	4604      	mov	r4, r0
 800fbf2:	491c      	ldr	r1, [pc, #112]	; (800fc64 <rcl_get_security_options_from_environment+0x98>)
 800fbf4:	9801      	ldr	r0, [sp, #4]
 800fbf6:	f7f0 fb23 	bl	8000240 <strcmp>
 800fbfa:	4605      	mov	r5, r0
 800fbfc:	b9f0      	cbnz	r0, 800fc3c <rcl_get_security_options_from_environment+0x70>
 800fbfe:	9001      	str	r0, [sp, #4]
 800fc00:	f1b8 0f00 	cmp.w	r8, #0
 800fc04:	d021      	beq.n	800fc4a <rcl_get_security_options_from_environment+0x7e>
 800fc06:	a901      	add	r1, sp, #4
 800fc08:	4817      	ldr	r0, [pc, #92]	; (800fc68 <rcl_get_security_options_from_environment+0x9c>)
 800fc0a:	f002 f8cd 	bl	8011da8 <rcutils_get_env>
 800fc0e:	2800      	cmp	r0, #0
 800fc10:	d1e9      	bne.n	800fbe6 <rcl_get_security_options_from_environment+0x1a>
 800fc12:	4916      	ldr	r1, [pc, #88]	; (800fc6c <rcl_get_security_options_from_environment+0xa0>)
 800fc14:	9801      	ldr	r0, [sp, #4]
 800fc16:	f7f0 fb13 	bl	8000240 <strcmp>
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	4639      	mov	r1, r7
 800fc1e:	4630      	mov	r0, r6
 800fc20:	fab3 f383 	clz	r3, r3
 800fc24:	095b      	lsrs	r3, r3, #5
 800fc26:	f888 3000 	strb.w	r3, [r8]
 800fc2a:	f7ff ff65 	bl	800faf8 <rcl_get_secure_root>
 800fc2e:	b170      	cbz	r0, 800fc4e <rcl_get_security_options_from_environment+0x82>
 800fc30:	f8c8 0004 	str.w	r0, [r8, #4]
 800fc34:	4628      	mov	r0, r5
 800fc36:	b002      	add	sp, #8
 800fc38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc3c:	4625      	mov	r5, r4
 800fc3e:	f888 4000 	strb.w	r4, [r8]
 800fc42:	4628      	mov	r0, r5
 800fc44:	b002      	add	sp, #8
 800fc46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc4a:	250b      	movs	r5, #11
 800fc4c:	e7cc      	b.n	800fbe8 <rcl_get_security_options_from_environment+0x1c>
 800fc4e:	f898 5000 	ldrb.w	r5, [r8]
 800fc52:	f1a5 0501 	sub.w	r5, r5, #1
 800fc56:	fab5 f585 	clz	r5, r5
 800fc5a:	096d      	lsrs	r5, r5, #5
 800fc5c:	e7c4      	b.n	800fbe8 <rcl_get_security_options_from_environment+0x1c>
 800fc5e:	bf00      	nop
 800fc60:	0801b4c8 	.word	0x0801b4c8
 800fc64:	0801b4dc 	.word	0x0801b4dc
 800fc68:	0801b4e4 	.word	0x0801b4e4
 800fc6c:	0801b4fc 	.word	0x0801b4fc

0800fc70 <rcl_get_zero_initialized_service>:
 800fc70:	4b01      	ldr	r3, [pc, #4]	; (800fc78 <rcl_get_zero_initialized_service+0x8>)
 800fc72:	6818      	ldr	r0, [r3, #0]
 800fc74:	4770      	bx	lr
 800fc76:	bf00      	nop
 800fc78:	0801b548 	.word	0x0801b548

0800fc7c <rcl_service_init>:
 800fc7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc80:	b086      	sub	sp, #24
 800fc82:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800fc84:	2d00      	cmp	r5, #0
 800fc86:	d04d      	beq.n	800fd24 <rcl_service_init+0xa8>
 800fc88:	f105 0950 	add.w	r9, r5, #80	; 0x50
 800fc8c:	4604      	mov	r4, r0
 800fc8e:	460e      	mov	r6, r1
 800fc90:	4690      	mov	r8, r2
 800fc92:	4648      	mov	r0, r9
 800fc94:	461f      	mov	r7, r3
 800fc96:	f7fc fa3f 	bl	800c118 <rcutils_allocator_is_valid>
 800fc9a:	2c00      	cmp	r4, #0
 800fc9c:	d042      	beq.n	800fd24 <rcl_service_init+0xa8>
 800fc9e:	f080 0001 	eor.w	r0, r0, #1
 800fca2:	b2c0      	uxtb	r0, r0
 800fca4:	2800      	cmp	r0, #0
 800fca6:	d13d      	bne.n	800fd24 <rcl_service_init+0xa8>
 800fca8:	4630      	mov	r0, r6
 800fcaa:	f7ff fdb5 	bl	800f818 <rcl_node_is_valid>
 800fcae:	2800      	cmp	r0, #0
 800fcb0:	d042      	beq.n	800fd38 <rcl_service_init+0xbc>
 800fcb2:	2f00      	cmp	r7, #0
 800fcb4:	d036      	beq.n	800fd24 <rcl_service_init+0xa8>
 800fcb6:	f1b8 0f00 	cmp.w	r8, #0
 800fcba:	d033      	beq.n	800fd24 <rcl_service_init+0xa8>
 800fcbc:	f8d4 a000 	ldr.w	sl, [r4]
 800fcc0:	f1ba 0f00 	cmp.w	sl, #0
 800fcc4:	d133      	bne.n	800fd2e <rcl_service_init+0xb2>
 800fcc6:	f44f 718c 	mov.w	r1, #280	; 0x118
 800fcca:	2001      	movs	r0, #1
 800fccc:	e9d5 3217 	ldrd	r3, r2, [r5, #92]	; 0x5c
 800fcd0:	4798      	blx	r3
 800fcd2:	6020      	str	r0, [r4, #0]
 800fcd4:	2800      	cmp	r0, #0
 800fcd6:	d075      	beq.n	800fdc4 <rcl_service_init+0x148>
 800fcd8:	f500 7088 	add.w	r0, r0, #272	; 0x110
 800fcdc:	f105 0358 	add.w	r3, r5, #88	; 0x58
 800fce0:	2201      	movs	r2, #1
 800fce2:	f8cd a010 	str.w	sl, [sp, #16]
 800fce6:	9005      	str	r0, [sp, #20]
 800fce8:	9203      	str	r2, [sp, #12]
 800fcea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fcee:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800fcf2:	4639      	mov	r1, r7
 800fcf4:	4630      	mov	r0, r6
 800fcf6:	e899 000c 	ldmia.w	r9, {r2, r3}
 800fcfa:	f7ff fde5 	bl	800f8c8 <rcl_node_resolve_name>
 800fcfe:	4607      	mov	r7, r0
 800fd00:	b1f8      	cbz	r0, 800fd42 <rcl_service_init+0xc6>
 800fd02:	f1a0 0368 	sub.w	r3, r0, #104	; 0x68
 800fd06:	6820      	ldr	r0, [r4, #0]
 800fd08:	2b01      	cmp	r3, #1
 800fd0a:	d943      	bls.n	800fd94 <rcl_service_init+0x118>
 800fd0c:	2f0a      	cmp	r7, #10
 800fd0e:	d000      	beq.n	800fd12 <rcl_service_init+0x96>
 800fd10:	2701      	movs	r7, #1
 800fd12:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800fd14:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800fd16:	4798      	blx	r3
 800fd18:	2300      	movs	r3, #0
 800fd1a:	4638      	mov	r0, r7
 800fd1c:	6023      	str	r3, [r4, #0]
 800fd1e:	b006      	add	sp, #24
 800fd20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd24:	270b      	movs	r7, #11
 800fd26:	4638      	mov	r0, r7
 800fd28:	b006      	add	sp, #24
 800fd2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd2e:	2764      	movs	r7, #100	; 0x64
 800fd30:	4638      	mov	r0, r7
 800fd32:	b006      	add	sp, #24
 800fd34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd38:	27c8      	movs	r7, #200	; 0xc8
 800fd3a:	4638      	mov	r0, r7
 800fd3c:	b006      	add	sp, #24
 800fd3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd42:	4630      	mov	r0, r6
 800fd44:	f7ff fd8a 	bl	800f85c <rcl_node_get_rmw_handle>
 800fd48:	6827      	ldr	r7, [r4, #0]
 800fd4a:	4641      	mov	r1, r8
 800fd4c:	462b      	mov	r3, r5
 800fd4e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800fd52:	f003 f9b5 	bl	80130c0 <rmw_create_service>
 800fd56:	6821      	ldr	r1, [r4, #0]
 800fd58:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 800fd5c:	f8d1 0108 	ldr.w	r0, [r1, #264]	; 0x108
 800fd60:	b390      	cbz	r0, 800fdc8 <rcl_service_init+0x14c>
 800fd62:	3168      	adds	r1, #104	; 0x68
 800fd64:	f003 fade 	bl	8013324 <rmw_service_request_subscription_get_actual_qos>
 800fd68:	b9b0      	cbnz	r0, 800fd98 <rcl_service_init+0x11c>
 800fd6a:	6823      	ldr	r3, [r4, #0]
 800fd6c:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 800fd70:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800fd74:	f003 fac2 	bl	80132fc <rmw_service_response_publisher_get_actual_qos>
 800fd78:	4607      	mov	r7, r0
 800fd7a:	b968      	cbnz	r0, 800fd98 <rcl_service_init+0x11c>
 800fd7c:	6820      	ldr	r0, [r4, #0]
 800fd7e:	2268      	movs	r2, #104	; 0x68
 800fd80:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 800fd84:	4629      	mov	r1, r5
 800fd86:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
 800fd8a:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
 800fd8e:	f009 fd96 	bl	80198be <memcpy>
 800fd92:	e7c8      	b.n	800fd26 <rcl_service_init+0xaa>
 800fd94:	2768      	movs	r7, #104	; 0x68
 800fd96:	e7bc      	b.n	800fd12 <rcl_service_init+0x96>
 800fd98:	f7ff f924 	bl	800efe4 <rcl_convert_rmw_ret_to_rcl_ret>
 800fd9c:	4607      	mov	r7, r0
 800fd9e:	4630      	mov	r0, r6
 800fda0:	f7ff fd5c 	bl	800f85c <rcl_node_get_rmw_handle>
 800fda4:	6823      	ldr	r3, [r4, #0]
 800fda6:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800fdaa:	f003 fa63 	bl	8013274 <rmw_destroy_service>
 800fdae:	6821      	ldr	r1, [r4, #0]
 800fdb0:	f8d1 0110 	ldr.w	r0, [r1, #272]	; 0x110
 800fdb4:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800fdb6:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800fdb8:	4798      	blx	r3
 800fdba:	6820      	ldr	r0, [r4, #0]
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
 800fdc2:	e7a6      	b.n	800fd12 <rcl_service_init+0x96>
 800fdc4:	270a      	movs	r7, #10
 800fdc6:	e7ae      	b.n	800fd26 <rcl_service_init+0xaa>
 800fdc8:	2701      	movs	r7, #1
 800fdca:	e7f1      	b.n	800fdb0 <rcl_service_init+0x134>

0800fdcc <rcl_service_get_default_options>:
 800fdcc:	b530      	push	{r4, r5, lr}
 800fdce:	4d0f      	ldr	r5, [pc, #60]	; (800fe0c <rcl_service_get_default_options+0x40>)
 800fdd0:	b087      	sub	sp, #28
 800fdd2:	4604      	mov	r4, r0
 800fdd4:	2250      	movs	r2, #80	; 0x50
 800fdd6:	490e      	ldr	r1, [pc, #56]	; (800fe10 <rcl_service_get_default_options+0x44>)
 800fdd8:	4628      	mov	r0, r5
 800fdda:	f009 fd70 	bl	80198be <memcpy>
 800fdde:	4668      	mov	r0, sp
 800fde0:	f7fc f98c 	bl	800c0fc <rcutils_get_default_allocator>
 800fde4:	46ec      	mov	ip, sp
 800fde6:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 800fdea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fdee:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fdf2:	f8dc 3000 	ldr.w	r3, [ip]
 800fdf6:	2268      	movs	r2, #104	; 0x68
 800fdf8:	4629      	mov	r1, r5
 800fdfa:	4620      	mov	r0, r4
 800fdfc:	f8ce 3000 	str.w	r3, [lr]
 800fe00:	f009 fd5d 	bl	80198be <memcpy>
 800fe04:	4620      	mov	r0, r4
 800fe06:	b007      	add	sp, #28
 800fe08:	bd30      	pop	{r4, r5, pc}
 800fe0a:	bf00      	nop
 800fe0c:	2000bd28 	.word	0x2000bd28
 800fe10:	0801b550 	.word	0x0801b550

0800fe14 <rcl_service_get_rmw_handle>:
 800fe14:	b118      	cbz	r0, 800fe1e <rcl_service_get_rmw_handle+0xa>
 800fe16:	6800      	ldr	r0, [r0, #0]
 800fe18:	b108      	cbz	r0, 800fe1e <rcl_service_get_rmw_handle+0xa>
 800fe1a:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800fe1e:	4770      	bx	lr

0800fe20 <rcl_take_request>:
 800fe20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe22:	468e      	mov	lr, r1
 800fe24:	b091      	sub	sp, #68	; 0x44
 800fe26:	460c      	mov	r4, r1
 800fe28:	4617      	mov	r7, r2
 800fe2a:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 800fe2e:	4605      	mov	r5, r0
 800fe30:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fe34:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fe38:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800fe3c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800fe40:	b30d      	cbz	r5, 800fe86 <rcl_take_request+0x66>
 800fe42:	682b      	ldr	r3, [r5, #0]
 800fe44:	b1fb      	cbz	r3, 800fe86 <rcl_take_request+0x66>
 800fe46:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800fe4a:	b1e0      	cbz	r0, 800fe86 <rcl_take_request+0x66>
 800fe4c:	b397      	cbz	r7, 800feb4 <rcl_take_request+0x94>
 800fe4e:	2300      	movs	r3, #0
 800fe50:	463a      	mov	r2, r7
 800fe52:	a906      	add	r1, sp, #24
 800fe54:	f88d 3017 	strb.w	r3, [sp, #23]
 800fe58:	f10d 0317 	add.w	r3, sp, #23
 800fe5c:	f003 f82e 	bl	8012ebc <rmw_take_request>
 800fe60:	4606      	mov	r6, r0
 800fe62:	b198      	cbz	r0, 800fe8c <rcl_take_request+0x6c>
 800fe64:	280a      	cmp	r0, #10
 800fe66:	bf18      	it	ne
 800fe68:	2601      	movne	r6, #1
 800fe6a:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 800fe6e:	46a6      	mov	lr, r4
 800fe70:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fe74:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fe78:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800fe7c:	e88e 0003 	stmia.w	lr, {r0, r1}
 800fe80:	4630      	mov	r0, r6
 800fe82:	b011      	add	sp, #68	; 0x44
 800fe84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe86:	f44f 7616 	mov.w	r6, #600	; 0x258
 800fe8a:	e7ee      	b.n	800fe6a <rcl_take_request+0x4a>
 800fe8c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800fe90:	b193      	cbz	r3, 800feb8 <rcl_take_request+0x98>
 800fe92:	682b      	ldr	r3, [r5, #0]
 800fe94:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
 800fe98:	2800      	cmp	r0, #0
 800fe9a:	d0e6      	beq.n	800fe6a <rcl_take_request+0x4a>
 800fe9c:	463a      	mov	r2, r7
 800fe9e:	ab0a      	add	r3, sp, #40	; 0x28
 800fea0:	2101      	movs	r1, #1
 800fea2:	9302      	str	r3, [sp, #8]
 800fea4:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 800fea8:	e9cd 6700 	strd	r6, r7, [sp]
 800feac:	f000 f844 	bl	800ff38 <rcl_send_service_event_message>
 800feb0:	4606      	mov	r6, r0
 800feb2:	e7da      	b.n	800fe6a <rcl_take_request+0x4a>
 800feb4:	260b      	movs	r6, #11
 800feb6:	e7d8      	b.n	800fe6a <rcl_take_request+0x4a>
 800feb8:	f240 2659 	movw	r6, #601	; 0x259
 800febc:	e7d5      	b.n	800fe6a <rcl_take_request+0x4a>
 800febe:	bf00      	nop

0800fec0 <rcl_send_response>:
 800fec0:	b350      	cbz	r0, 800ff18 <rcl_send_response+0x58>
 800fec2:	6803      	ldr	r3, [r0, #0]
 800fec4:	b570      	push	{r4, r5, r6, lr}
 800fec6:	4604      	mov	r4, r0
 800fec8:	b084      	sub	sp, #16
 800feca:	b1cb      	cbz	r3, 800ff00 <rcl_send_response+0x40>
 800fecc:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800fed0:	b1b0      	cbz	r0, 800ff00 <rcl_send_response+0x40>
 800fed2:	4615      	mov	r5, r2
 800fed4:	b1ea      	cbz	r2, 800ff12 <rcl_send_response+0x52>
 800fed6:	460e      	mov	r6, r1
 800fed8:	b1d9      	cbz	r1, 800ff12 <rcl_send_response+0x52>
 800feda:	f003 f84d 	bl	8012f78 <rmw_send_response>
 800fede:	b998      	cbnz	r0, 800ff08 <rcl_send_response+0x48>
 800fee0:	6823      	ldr	r3, [r4, #0]
 800fee2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800fee6:	b16b      	cbz	r3, 800ff04 <rcl_send_response+0x44>
 800fee8:	462a      	mov	r2, r5
 800feea:	2102      	movs	r1, #2
 800feec:	4618      	mov	r0, r3
 800feee:	ed96 7b04 	vldr	d7, [r6, #16]
 800fef2:	9602      	str	r6, [sp, #8]
 800fef4:	ed8d 7b00 	vstr	d7, [sp]
 800fef8:	f000 f81e 	bl	800ff38 <rcl_send_service_event_message>
 800fefc:	b004      	add	sp, #16
 800fefe:	bd70      	pop	{r4, r5, r6, pc}
 800ff00:	f44f 7016 	mov.w	r0, #600	; 0x258
 800ff04:	b004      	add	sp, #16
 800ff06:	bd70      	pop	{r4, r5, r6, pc}
 800ff08:	2802      	cmp	r0, #2
 800ff0a:	bf18      	it	ne
 800ff0c:	2001      	movne	r0, #1
 800ff0e:	b004      	add	sp, #16
 800ff10:	bd70      	pop	{r4, r5, r6, pc}
 800ff12:	200b      	movs	r0, #11
 800ff14:	b004      	add	sp, #16
 800ff16:	bd70      	pop	{r4, r5, r6, pc}
 800ff18:	f44f 7016 	mov.w	r0, #600	; 0x258
 800ff1c:	4770      	bx	lr
 800ff1e:	bf00      	nop

0800ff20 <rcl_service_is_valid>:
 800ff20:	b130      	cbz	r0, 800ff30 <rcl_service_is_valid+0x10>
 800ff22:	6800      	ldr	r0, [r0, #0]
 800ff24:	b120      	cbz	r0, 800ff30 <rcl_service_is_valid+0x10>
 800ff26:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800ff2a:	3800      	subs	r0, #0
 800ff2c:	bf18      	it	ne
 800ff2e:	2001      	movne	r0, #1
 800ff30:	4770      	bx	lr
 800ff32:	bf00      	nop
 800ff34:	0000      	movs	r0, r0
	...

0800ff38 <rcl_send_service_event_message>:
 800ff38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ff3c:	b093      	sub	sp, #76	; 0x4c
 800ff3e:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800ff40:	b196      	cbz	r6, 800ff68 <rcl_send_service_event_message+0x30>
 800ff42:	4615      	mov	r5, r2
 800ff44:	b182      	cbz	r2, 800ff68 <rcl_send_service_event_message+0x30>
 800ff46:	4604      	mov	r4, r0
 800ff48:	b148      	cbz	r0, 800ff5e <rcl_send_service_event_message+0x26>
 800ff4a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800ff4e:	b133      	cbz	r3, 800ff5e <rcl_send_service_event_message+0x26>
 800ff50:	68c0      	ldr	r0, [r0, #12]
 800ff52:	460f      	mov	r7, r1
 800ff54:	f000 f90c 	bl	8010170 <rcl_clock_valid>
 800ff58:	b108      	cbz	r0, 800ff5e <rcl_send_service_event_message+0x26>
 800ff5a:	7a23      	ldrb	r3, [r4, #8]
 800ff5c:	b94b      	cbnz	r3, 800ff72 <rcl_send_service_event_message+0x3a>
 800ff5e:	2401      	movs	r4, #1
 800ff60:	4620      	mov	r0, r4
 800ff62:	b013      	add	sp, #76	; 0x4c
 800ff64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff68:	240b      	movs	r4, #11
 800ff6a:	4620      	mov	r0, r4
 800ff6c:	b013      	add	sp, #76	; 0x4c
 800ff6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff72:	f104 0e60 	add.w	lr, r4, #96	; 0x60
 800ff76:	f10d 0c0c 	add.w	ip, sp, #12
 800ff7a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ff7e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ff82:	f8de 3000 	ldr.w	r3, [lr]
 800ff86:	a803      	add	r0, sp, #12
 800ff88:	f8cc 3000 	str.w	r3, [ip]
 800ff8c:	f7fc f8c4 	bl	800c118 <rcutils_allocator_is_valid>
 800ff90:	2800      	cmp	r0, #0
 800ff92:	d0e9      	beq.n	800ff68 <rcl_send_service_event_message+0x30>
 800ff94:	6820      	ldr	r0, [r4, #0]
 800ff96:	f007 fd41 	bl	8017a1c <rcl_publisher_is_valid>
 800ff9a:	2800      	cmp	r0, #0
 800ff9c:	d05e      	beq.n	801005c <rcl_send_service_event_message+0x124>
 800ff9e:	4669      	mov	r1, sp
 800ffa0:	68e0      	ldr	r0, [r4, #12]
 800ffa2:	f000 f977 	bl	8010294 <rcl_clock_get_now>
 800ffa6:	4601      	mov	r1, r0
 800ffa8:	2800      	cmp	r0, #0
 800ffaa:	d146      	bne.n	801003a <rcl_send_service_event_message+0x102>
 800ffac:	2220      	movs	r2, #32
 800ffae:	eb0d 0002 	add.w	r0, sp, r2
 800ffb2:	f009 fb0f 	bl	80195d4 <memset>
 800ffb6:	f88d 7020 	strb.w	r7, [sp, #32]
 800ffba:	e9dd 8900 	ldrd	r8, r9, [sp]
 800ffbe:	a32a      	add	r3, pc, #168	; (adr r3, 8010068 <rcl_send_service_event_message+0x130>)
 800ffc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffc4:	4640      	mov	r0, r8
 800ffc6:	4649      	mov	r1, r9
 800ffc8:	f7f0 f9a2 	bl	8000310 <__aeabi_ldivmod>
 800ffcc:	4649      	mov	r1, r9
 800ffce:	9009      	str	r0, [sp, #36]	; 0x24
 800ffd0:	4640      	mov	r0, r8
 800ffd2:	a325      	add	r3, pc, #148	; (adr r3, 8010068 <rcl_send_service_event_message+0x130>)
 800ffd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffd8:	f7f0 f99a 	bl	8000310 <__aeabi_ldivmod>
 800ffdc:	920a      	str	r2, [sp, #40]	; 0x28
 800ffde:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 800ffe2:	6830      	ldr	r0, [r6, #0]
 800ffe4:	6871      	ldr	r1, [r6, #4]
 800ffe6:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800ffea:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800ffee:	7a23      	ldrb	r3, [r4, #8]
 800fff0:	68b2      	ldr	r2, [r6, #8]
 800fff2:	2b01      	cmp	r3, #1
 800fff4:	68f3      	ldr	r3, [r6, #12]
 800fff6:	bf08      	it	eq
 800fff8:	2500      	moveq	r5, #0
 800fffa:	2f01      	cmp	r7, #1
 800fffc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010000:	d81f      	bhi.n	8010042 <rcl_send_service_event_message+0x10a>
 8010002:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8010006:	462a      	mov	r2, r5
 8010008:	a808      	add	r0, sp, #32
 801000a:	a903      	add	r1, sp, #12
 801000c:	699d      	ldr	r5, [r3, #24]
 801000e:	2300      	movs	r3, #0
 8010010:	47a8      	blx	r5
 8010012:	4605      	mov	r5, r0
 8010014:	2d00      	cmp	r5, #0
 8010016:	d0a2      	beq.n	800ff5e <rcl_send_service_event_message+0x26>
 8010018:	4629      	mov	r1, r5
 801001a:	6820      	ldr	r0, [r4, #0]
 801001c:	2200      	movs	r2, #0
 801001e:	f007 fcd9 	bl	80179d4 <rcl_publish>
 8010022:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8010026:	4604      	mov	r4, r0
 8010028:	a903      	add	r1, sp, #12
 801002a:	4628      	mov	r0, r5
 801002c:	69db      	ldr	r3, [r3, #28]
 801002e:	4798      	blx	r3
 8010030:	2c00      	cmp	r4, #0
 8010032:	d095      	beq.n	800ff60 <rcl_send_service_event_message+0x28>
 8010034:	f7fc f894 	bl	800c160 <rcutils_reset_error>
 8010038:	e792      	b.n	800ff60 <rcl_send_service_event_message+0x28>
 801003a:	2401      	movs	r4, #1
 801003c:	f7fc f890 	bl	800c160 <rcutils_reset_error>
 8010040:	e78e      	b.n	800ff60 <rcl_send_service_event_message+0x28>
 8010042:	1eb9      	subs	r1, r7, #2
 8010044:	2901      	cmp	r1, #1
 8010046:	d8f8      	bhi.n	801003a <rcl_send_service_event_message+0x102>
 8010048:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 801004c:	462b      	mov	r3, r5
 801004e:	a808      	add	r0, sp, #32
 8010050:	a903      	add	r1, sp, #12
 8010052:	6995      	ldr	r5, [r2, #24]
 8010054:	2200      	movs	r2, #0
 8010056:	47a8      	blx	r5
 8010058:	4605      	mov	r5, r0
 801005a:	e7db      	b.n	8010014 <rcl_send_service_event_message+0xdc>
 801005c:	f44f 7496 	mov.w	r4, #300	; 0x12c
 8010060:	e77e      	b.n	800ff60 <rcl_send_service_event_message+0x28>
 8010062:	bf00      	nop
 8010064:	f3af 8000 	nop.w
 8010068:	3b9aca00 	.word	0x3b9aca00
 801006c:	00000000 	.word	0x00000000

08010070 <rcl_take>:
 8010070:	2800      	cmp	r0, #0
 8010072:	d049      	beq.n	8010108 <rcl_take+0x98>
 8010074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010078:	4615      	mov	r5, r2
 801007a:	6802      	ldr	r2, [r0, #0]
 801007c:	b0a0      	sub	sp, #128	; 0x80
 801007e:	4604      	mov	r4, r0
 8010080:	2a00      	cmp	r2, #0
 8010082:	d039      	beq.n	80100f8 <rcl_take+0x88>
 8010084:	461f      	mov	r7, r3
 8010086:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 801008a:	b3ab      	cbz	r3, 80100f8 <rcl_take+0x88>
 801008c:	460e      	mov	r6, r1
 801008e:	2900      	cmp	r1, #0
 8010090:	d038      	beq.n	8010104 <rcl_take+0x94>
 8010092:	2d00      	cmp	r5, #0
 8010094:	d03c      	beq.n	8010110 <rcl_take+0xa0>
 8010096:	a802      	add	r0, sp, #8
 8010098:	f002 f962 	bl	8012360 <rmw_get_zero_initialized_message_info>
 801009c:	6823      	ldr	r3, [r4, #0]
 801009e:	f10d 0c08 	add.w	ip, sp, #8
 80100a2:	46ae      	mov	lr, r5
 80100a4:	f8d3 80c8 	ldr.w	r8, [r3, #200]	; 0xc8
 80100a8:	2400      	movs	r4, #0
 80100aa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80100ae:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80100b2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80100b6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80100ba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80100be:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80100c2:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80100c6:	462b      	mov	r3, r5
 80100c8:	f10d 0247 	add.w	r2, sp, #71	; 0x47
 80100cc:	f88d 4047 	strb.w	r4, [sp, #71]	; 0x47
 80100d0:	e88e 0003 	stmia.w	lr, {r0, r1}
 80100d4:	4631      	mov	r1, r6
 80100d6:	4640      	mov	r0, r8
 80100d8:	9700      	str	r7, [sp, #0]
 80100da:	f003 f999 	bl	8013410 <rmw_take_with_info>
 80100de:	4603      	mov	r3, r0
 80100e0:	b9c0      	cbnz	r0, 8010114 <rcl_take+0xa4>
 80100e2:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
 80100e6:	f240 1291 	movw	r2, #401	; 0x191
 80100ea:	2900      	cmp	r1, #0
 80100ec:	bf08      	it	eq
 80100ee:	4613      	moveq	r3, r2
 80100f0:	4618      	mov	r0, r3
 80100f2:	b020      	add	sp, #128	; 0x80
 80100f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100f8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80100fc:	4618      	mov	r0, r3
 80100fe:	b020      	add	sp, #128	; 0x80
 8010100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010104:	230b      	movs	r3, #11
 8010106:	e7f3      	b.n	80100f0 <rcl_take+0x80>
 8010108:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801010c:	4618      	mov	r0, r3
 801010e:	4770      	bx	lr
 8010110:	ad12      	add	r5, sp, #72	; 0x48
 8010112:	e7c0      	b.n	8010096 <rcl_take+0x26>
 8010114:	f7fe ff66 	bl	800efe4 <rcl_convert_rmw_ret_to_rcl_ret>
 8010118:	4603      	mov	r3, r0
 801011a:	e7e9      	b.n	80100f0 <rcl_take+0x80>

0801011c <rcl_subscription_get_rmw_handle>:
 801011c:	b118      	cbz	r0, 8010126 <rcl_subscription_get_rmw_handle+0xa>
 801011e:	6800      	ldr	r0, [r0, #0]
 8010120:	b108      	cbz	r0, 8010126 <rcl_subscription_get_rmw_handle+0xa>
 8010122:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 8010126:	4770      	bx	lr

08010128 <rcl_subscription_is_valid>:
 8010128:	b130      	cbz	r0, 8010138 <rcl_subscription_is_valid+0x10>
 801012a:	6800      	ldr	r0, [r0, #0]
 801012c:	b120      	cbz	r0, 8010138 <rcl_subscription_is_valid+0x10>
 801012e:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 8010132:	3800      	subs	r0, #0
 8010134:	bf18      	it	ne
 8010136:	2001      	movne	r0, #1
 8010138:	4770      	bx	lr
 801013a:	bf00      	nop

0801013c <rcl_get_system_time>:
 801013c:	4608      	mov	r0, r1
 801013e:	f7fc b82b 	b.w	800c198 <rcutils_system_time_now>
 8010142:	bf00      	nop

08010144 <rcl_get_steady_time>:
 8010144:	4608      	mov	r0, r1
 8010146:	f7fc b84f 	b.w	800c1e8 <rcutils_steady_time_now>
 801014a:	bf00      	nop

0801014c <rcl_get_ros_time>:
 801014c:	7a03      	ldrb	r3, [r0, #8]
 801014e:	b510      	push	{r4, lr}
 8010150:	460c      	mov	r4, r1
 8010152:	b143      	cbz	r3, 8010166 <rcl_get_ros_time+0x1a>
 8010154:	2105      	movs	r1, #5
 8010156:	f001 fd83 	bl	8011c60 <__atomic_load_8>
 801015a:	4602      	mov	r2, r0
 801015c:	460b      	mov	r3, r1
 801015e:	2000      	movs	r0, #0
 8010160:	e9c4 2300 	strd	r2, r3, [r4]
 8010164:	bd10      	pop	{r4, pc}
 8010166:	4608      	mov	r0, r1
 8010168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801016c:	f7fc b814 	b.w	800c198 <rcutils_system_time_now>

08010170 <rcl_clock_valid>:
 8010170:	b138      	cbz	r0, 8010182 <rcl_clock_valid+0x12>
 8010172:	7803      	ldrb	r3, [r0, #0]
 8010174:	b123      	cbz	r3, 8010180 <rcl_clock_valid+0x10>
 8010176:	68c0      	ldr	r0, [r0, #12]
 8010178:	3800      	subs	r0, #0
 801017a:	bf18      	it	ne
 801017c:	2001      	movne	r0, #1
 801017e:	4770      	bx	lr
 8010180:	4618      	mov	r0, r3
 8010182:	4770      	bx	lr

08010184 <rcl_clock_init>:
 8010184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010186:	4605      	mov	r5, r0
 8010188:	4610      	mov	r0, r2
 801018a:	4614      	mov	r4, r2
 801018c:	460e      	mov	r6, r1
 801018e:	f7fb ffc3 	bl	800c118 <rcutils_allocator_is_valid>
 8010192:	b128      	cbz	r0, 80101a0 <rcl_clock_init+0x1c>
 8010194:	2d03      	cmp	r5, #3
 8010196:	d803      	bhi.n	80101a0 <rcl_clock_init+0x1c>
 8010198:	e8df f005 	tbb	[pc, r5]
 801019c:	0659301f 	.word	0x0659301f
 80101a0:	f04f 0c0b 	mov.w	ip, #11
 80101a4:	4660      	mov	r0, ip
 80101a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80101a8:	2c00      	cmp	r4, #0
 80101aa:	d0f9      	beq.n	80101a0 <rcl_clock_init+0x1c>
 80101ac:	fab6 f386 	clz	r3, r6
 80101b0:	095b      	lsrs	r3, r3, #5
 80101b2:	2e00      	cmp	r6, #0
 80101b4:	d0f4      	beq.n	80101a0 <rcl_clock_init+0x1c>
 80101b6:	6133      	str	r3, [r6, #16]
 80101b8:	469c      	mov	ip, r3
 80101ba:	f106 0514 	add.w	r5, r6, #20
 80101be:	4f32      	ldr	r7, [pc, #200]	; (8010288 <rcl_clock_init+0x104>)
 80101c0:	f04f 0e03 	mov.w	lr, #3
 80101c4:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80101c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80101ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80101cc:	6823      	ldr	r3, [r4, #0]
 80101ce:	4660      	mov	r0, ip
 80101d0:	602b      	str	r3, [r5, #0]
 80101d2:	60f7      	str	r7, [r6, #12]
 80101d4:	f886 e000 	strb.w	lr, [r6]
 80101d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80101da:	2e00      	cmp	r6, #0
 80101dc:	d0e0      	beq.n	80101a0 <rcl_clock_init+0x1c>
 80101de:	2300      	movs	r3, #0
 80101e0:	f106 0514 	add.w	r5, r6, #20
 80101e4:	7033      	strb	r3, [r6, #0]
 80101e6:	469c      	mov	ip, r3
 80101e8:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80101ec:	e9c6 3303 	strd	r3, r3, [r6, #12]
 80101f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80101f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80101f4:	6823      	ldr	r3, [r4, #0]
 80101f6:	4660      	mov	r0, ip
 80101f8:	602b      	str	r3, [r5, #0]
 80101fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80101fc:	2c00      	cmp	r4, #0
 80101fe:	d0cf      	beq.n	80101a0 <rcl_clock_init+0x1c>
 8010200:	fab6 f586 	clz	r5, r6
 8010204:	096d      	lsrs	r5, r5, #5
 8010206:	2e00      	cmp	r6, #0
 8010208:	d0ca      	beq.n	80101a0 <rcl_clock_init+0x1c>
 801020a:	46a6      	mov	lr, r4
 801020c:	7035      	strb	r5, [r6, #0]
 801020e:	f106 0c14 	add.w	ip, r6, #20
 8010212:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010216:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801021a:	e9c6 5503 	strd	r5, r5, [r6, #12]
 801021e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010222:	f8de 3000 	ldr.w	r3, [lr]
 8010226:	2010      	movs	r0, #16
 8010228:	f8cc 3000 	str.w	r3, [ip]
 801022c:	6823      	ldr	r3, [r4, #0]
 801022e:	6921      	ldr	r1, [r4, #16]
 8010230:	4798      	blx	r3
 8010232:	6130      	str	r0, [r6, #16]
 8010234:	b320      	cbz	r0, 8010280 <rcl_clock_init+0xfc>
 8010236:	2200      	movs	r2, #0
 8010238:	2300      	movs	r3, #0
 801023a:	46ac      	mov	ip, r5
 801023c:	7205      	strb	r5, [r0, #8]
 801023e:	e9c0 2300 	strd	r2, r3, [r0]
 8010242:	4a12      	ldr	r2, [pc, #72]	; (801028c <rcl_clock_init+0x108>)
 8010244:	2301      	movs	r3, #1
 8010246:	4660      	mov	r0, ip
 8010248:	60f2      	str	r2, [r6, #12]
 801024a:	7033      	strb	r3, [r6, #0]
 801024c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801024e:	2c00      	cmp	r4, #0
 8010250:	d0a6      	beq.n	80101a0 <rcl_clock_init+0x1c>
 8010252:	fab6 f386 	clz	r3, r6
 8010256:	095b      	lsrs	r3, r3, #5
 8010258:	2e00      	cmp	r6, #0
 801025a:	d0a1      	beq.n	80101a0 <rcl_clock_init+0x1c>
 801025c:	6133      	str	r3, [r6, #16]
 801025e:	469c      	mov	ip, r3
 8010260:	f106 0514 	add.w	r5, r6, #20
 8010264:	f8df e028 	ldr.w	lr, [pc, #40]	; 8010290 <rcl_clock_init+0x10c>
 8010268:	2702      	movs	r7, #2
 801026a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801026e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010272:	6823      	ldr	r3, [r4, #0]
 8010274:	4660      	mov	r0, ip
 8010276:	602b      	str	r3, [r5, #0]
 8010278:	f8c6 e00c 	str.w	lr, [r6, #12]
 801027c:	7037      	strb	r7, [r6, #0]
 801027e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010280:	f04f 0c0a 	mov.w	ip, #10
 8010284:	e78e      	b.n	80101a4 <rcl_clock_init+0x20>
 8010286:	bf00      	nop
 8010288:	08010145 	.word	0x08010145
 801028c:	0801014d 	.word	0x0801014d
 8010290:	0801013d 	.word	0x0801013d

08010294 <rcl_clock_get_now>:
 8010294:	b140      	cbz	r0, 80102a8 <rcl_clock_get_now+0x14>
 8010296:	b139      	cbz	r1, 80102a8 <rcl_clock_get_now+0x14>
 8010298:	7803      	ldrb	r3, [r0, #0]
 801029a:	b11b      	cbz	r3, 80102a4 <rcl_clock_get_now+0x10>
 801029c:	68c3      	ldr	r3, [r0, #12]
 801029e:	b10b      	cbz	r3, 80102a4 <rcl_clock_get_now+0x10>
 80102a0:	6900      	ldr	r0, [r0, #16]
 80102a2:	4718      	bx	r3
 80102a4:	2001      	movs	r0, #1
 80102a6:	4770      	bx	lr
 80102a8:	200b      	movs	r0, #11
 80102aa:	4770      	bx	lr

080102ac <rcl_timer_call>:
 80102ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102b0:	b087      	sub	sp, #28
 80102b2:	2800      	cmp	r0, #0
 80102b4:	d06c      	beq.n	8010390 <rcl_timer_call+0xe4>
 80102b6:	6803      	ldr	r3, [r0, #0]
 80102b8:	4604      	mov	r4, r0
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d062      	beq.n	8010384 <rcl_timer_call+0xd8>
 80102be:	f3bf 8f5b 	dmb	ish
 80102c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80102c6:	f3bf 8f5b 	dmb	ish
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d14f      	bne.n	801036e <rcl_timer_call+0xc2>
 80102ce:	6803      	ldr	r3, [r0, #0]
 80102d0:	a904      	add	r1, sp, #16
 80102d2:	6818      	ldr	r0, [r3, #0]
 80102d4:	f7ff ffde 	bl	8010294 <rcl_clock_get_now>
 80102d8:	4605      	mov	r5, r0
 80102da:	2800      	cmp	r0, #0
 80102dc:	d149      	bne.n	8010372 <rcl_timer_call+0xc6>
 80102de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	db49      	blt.n	801037a <rcl_timer_call+0xce>
 80102e6:	2605      	movs	r6, #5
 80102e8:	6820      	ldr	r0, [r4, #0]
 80102ea:	9600      	str	r6, [sp, #0]
 80102ec:	3020      	adds	r0, #32
 80102ee:	f001 fd23 	bl	8011d38 <__atomic_exchange_8>
 80102f2:	6823      	ldr	r3, [r4, #0]
 80102f4:	4680      	mov	r8, r0
 80102f6:	f3bf 8f5b 	dmb	ish
 80102fa:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80102fe:	f3bf 8f5b 	dmb	ish
 8010302:	6820      	ldr	r0, [r4, #0]
 8010304:	4689      	mov	r9, r1
 8010306:	4631      	mov	r1, r6
 8010308:	3028      	adds	r0, #40	; 0x28
 801030a:	f001 fca9 	bl	8011c60 <__atomic_load_8>
 801030e:	460f      	mov	r7, r1
 8010310:	4631      	mov	r1, r6
 8010312:	4606      	mov	r6, r0
 8010314:	6820      	ldr	r0, [r4, #0]
 8010316:	3018      	adds	r0, #24
 8010318:	f001 fca2 	bl	8011c60 <__atomic_load_8>
 801031c:	4602      	mov	r2, r0
 801031e:	9804      	ldr	r0, [sp, #16]
 8010320:	460b      	mov	r3, r1
 8010322:	18b6      	adds	r6, r6, r2
 8010324:	f8dd c014 	ldr.w	ip, [sp, #20]
 8010328:	4692      	mov	sl, r2
 801032a:	eb47 0701 	adc.w	r7, r7, r1
 801032e:	4286      	cmp	r6, r0
 8010330:	eb77 010c 	sbcs.w	r1, r7, ip
 8010334:	da04      	bge.n	8010340 <rcl_timer_call+0x94>
 8010336:	ea53 0102 	orrs.w	r1, r3, r2
 801033a:	d12e      	bne.n	801039a <rcl_timer_call+0xee>
 801033c:	4606      	mov	r6, r0
 801033e:	4667      	mov	r7, ip
 8010340:	6820      	ldr	r0, [r4, #0]
 8010342:	2105      	movs	r1, #5
 8010344:	4632      	mov	r2, r6
 8010346:	463b      	mov	r3, r7
 8010348:	3028      	adds	r0, #40	; 0x28
 801034a:	9100      	str	r1, [sp, #0]
 801034c:	f001 fcbe 	bl	8011ccc <__atomic_store_8>
 8010350:	f1bb 0f00 	cmp.w	fp, #0
 8010354:	d00d      	beq.n	8010372 <rcl_timer_call+0xc6>
 8010356:	9a04      	ldr	r2, [sp, #16]
 8010358:	4620      	mov	r0, r4
 801035a:	9b05      	ldr	r3, [sp, #20]
 801035c:	ebb2 0208 	subs.w	r2, r2, r8
 8010360:	eb63 0309 	sbc.w	r3, r3, r9
 8010364:	47d8      	blx	fp
 8010366:	4628      	mov	r0, r5
 8010368:	b007      	add	sp, #28
 801036a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801036e:	f240 3521 	movw	r5, #801	; 0x321
 8010372:	4628      	mov	r0, r5
 8010374:	b007      	add	sp, #28
 8010376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801037a:	2501      	movs	r5, #1
 801037c:	4628      	mov	r0, r5
 801037e:	b007      	add	sp, #28
 8010380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010384:	f44f 7548 	mov.w	r5, #800	; 0x320
 8010388:	4628      	mov	r0, r5
 801038a:	b007      	add	sp, #28
 801038c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010390:	250b      	movs	r5, #11
 8010392:	4628      	mov	r0, r5
 8010394:	b007      	add	sp, #28
 8010396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801039a:	1b80      	subs	r0, r0, r6
 801039c:	eb6c 0107 	sbc.w	r1, ip, r7
 80103a0:	3801      	subs	r0, #1
 80103a2:	f161 0100 	sbc.w	r1, r1, #0
 80103a6:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80103aa:	f7ef ffb1 	bl	8000310 <__aeabi_ldivmod>
 80103ae:	9b02      	ldr	r3, [sp, #8]
 80103b0:	3001      	adds	r0, #1
 80103b2:	f141 0100 	adc.w	r1, r1, #0
 80103b6:	fb00 f303 	mul.w	r3, r0, r3
 80103ba:	fb01 330a 	mla	r3, r1, sl, r3
 80103be:	fba0 0a0a 	umull	r0, sl, r0, sl
 80103c2:	1986      	adds	r6, r0, r6
 80103c4:	4453      	add	r3, sl
 80103c6:	eb43 0707 	adc.w	r7, r3, r7
 80103ca:	e7b9      	b.n	8010340 <rcl_timer_call+0x94>

080103cc <rcl_timer_is_ready>:
 80103cc:	b570      	push	{r4, r5, r6, lr}
 80103ce:	b082      	sub	sp, #8
 80103d0:	b380      	cbz	r0, 8010434 <rcl_timer_is_ready+0x68>
 80103d2:	6803      	ldr	r3, [r0, #0]
 80103d4:	4604      	mov	r4, r0
 80103d6:	b38b      	cbz	r3, 801043c <rcl_timer_is_ready+0x70>
 80103d8:	460d      	mov	r5, r1
 80103da:	b359      	cbz	r1, 8010434 <rcl_timer_is_ready+0x68>
 80103dc:	f3bf 8f5b 	dmb	ish
 80103e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80103e4:	f3bf 8f5b 	dmb	ish
 80103e8:	b953      	cbnz	r3, 8010400 <rcl_timer_is_ready+0x34>
 80103ea:	6803      	ldr	r3, [r0, #0]
 80103ec:	4669      	mov	r1, sp
 80103ee:	6818      	ldr	r0, [r3, #0]
 80103f0:	f7ff ff50 	bl	8010294 <rcl_clock_get_now>
 80103f4:	4606      	mov	r6, r0
 80103f6:	b148      	cbz	r0, 801040c <rcl_timer_is_ready+0x40>
 80103f8:	f240 3321 	movw	r3, #801	; 0x321
 80103fc:	4298      	cmp	r0, r3
 80103fe:	d102      	bne.n	8010406 <rcl_timer_is_ready+0x3a>
 8010400:	2300      	movs	r3, #0
 8010402:	461e      	mov	r6, r3
 8010404:	702b      	strb	r3, [r5, #0]
 8010406:	4630      	mov	r0, r6
 8010408:	b002      	add	sp, #8
 801040a:	bd70      	pop	{r4, r5, r6, pc}
 801040c:	6820      	ldr	r0, [r4, #0]
 801040e:	2105      	movs	r1, #5
 8010410:	3028      	adds	r0, #40	; 0x28
 8010412:	f001 fc25 	bl	8011c60 <__atomic_load_8>
 8010416:	9b00      	ldr	r3, [sp, #0]
 8010418:	1ac0      	subs	r0, r0, r3
 801041a:	9b01      	ldr	r3, [sp, #4]
 801041c:	eb61 0103 	sbc.w	r1, r1, r3
 8010420:	2801      	cmp	r0, #1
 8010422:	4630      	mov	r0, r6
 8010424:	f171 0300 	sbcs.w	r3, r1, #0
 8010428:	bfb4      	ite	lt
 801042a:	2301      	movlt	r3, #1
 801042c:	2300      	movge	r3, #0
 801042e:	702b      	strb	r3, [r5, #0]
 8010430:	b002      	add	sp, #8
 8010432:	bd70      	pop	{r4, r5, r6, pc}
 8010434:	260b      	movs	r6, #11
 8010436:	4630      	mov	r0, r6
 8010438:	b002      	add	sp, #8
 801043a:	bd70      	pop	{r4, r5, r6, pc}
 801043c:	f44f 7648 	mov.w	r6, #800	; 0x320
 8010440:	e7e1      	b.n	8010406 <rcl_timer_is_ready+0x3a>
 8010442:	bf00      	nop

08010444 <rcl_timer_get_time_until_next_call>:
 8010444:	b570      	push	{r4, r5, r6, lr}
 8010446:	b082      	sub	sp, #8
 8010448:	b330      	cbz	r0, 8010498 <rcl_timer_get_time_until_next_call+0x54>
 801044a:	6803      	ldr	r3, [r0, #0]
 801044c:	4604      	mov	r4, r0
 801044e:	b33b      	cbz	r3, 80104a0 <rcl_timer_get_time_until_next_call+0x5c>
 8010450:	460d      	mov	r5, r1
 8010452:	b309      	cbz	r1, 8010498 <rcl_timer_get_time_until_next_call+0x54>
 8010454:	f3bf 8f5b 	dmb	ish
 8010458:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801045c:	f3bf 8f5b 	dmb	ish
 8010460:	b9ab      	cbnz	r3, 801048e <rcl_timer_get_time_until_next_call+0x4a>
 8010462:	6803      	ldr	r3, [r0, #0]
 8010464:	4669      	mov	r1, sp
 8010466:	6818      	ldr	r0, [r3, #0]
 8010468:	f7ff ff14 	bl	8010294 <rcl_clock_get_now>
 801046c:	4606      	mov	r6, r0
 801046e:	b958      	cbnz	r0, 8010488 <rcl_timer_get_time_until_next_call+0x44>
 8010470:	6820      	ldr	r0, [r4, #0]
 8010472:	2105      	movs	r1, #5
 8010474:	3028      	adds	r0, #40	; 0x28
 8010476:	f001 fbf3 	bl	8011c60 <__atomic_load_8>
 801047a:	9b00      	ldr	r3, [sp, #0]
 801047c:	1ac0      	subs	r0, r0, r3
 801047e:	9b01      	ldr	r3, [sp, #4]
 8010480:	eb61 0103 	sbc.w	r1, r1, r3
 8010484:	6028      	str	r0, [r5, #0]
 8010486:	6069      	str	r1, [r5, #4]
 8010488:	4630      	mov	r0, r6
 801048a:	b002      	add	sp, #8
 801048c:	bd70      	pop	{r4, r5, r6, pc}
 801048e:	f240 3621 	movw	r6, #801	; 0x321
 8010492:	4630      	mov	r0, r6
 8010494:	b002      	add	sp, #8
 8010496:	bd70      	pop	{r4, r5, r6, pc}
 8010498:	260b      	movs	r6, #11
 801049a:	4630      	mov	r0, r6
 801049c:	b002      	add	sp, #8
 801049e:	bd70      	pop	{r4, r5, r6, pc}
 80104a0:	f44f 7648 	mov.w	r6, #800	; 0x320
 80104a4:	e7f0      	b.n	8010488 <rcl_timer_get_time_until_next_call+0x44>
 80104a6:	bf00      	nop

080104a8 <rcl_timer_get_guard_condition>:
 80104a8:	b130      	cbz	r0, 80104b8 <rcl_timer_get_guard_condition+0x10>
 80104aa:	6800      	ldr	r0, [r0, #0]
 80104ac:	b120      	cbz	r0, 80104b8 <rcl_timer_get_guard_condition+0x10>
 80104ae:	68c3      	ldr	r3, [r0, #12]
 80104b0:	b10b      	cbz	r3, 80104b6 <rcl_timer_get_guard_condition+0xe>
 80104b2:	3008      	adds	r0, #8
 80104b4:	4770      	bx	lr
 80104b6:	4618      	mov	r0, r3
 80104b8:	4770      	bx	lr
 80104ba:	bf00      	nop

080104bc <rcl_validate_enclave_name_with_size>:
 80104bc:	2800      	cmp	r0, #0
 80104be:	d049      	beq.n	8010554 <rcl_validate_enclave_name_with_size+0x98>
 80104c0:	b570      	push	{r4, r5, r6, lr}
 80104c2:	4615      	mov	r5, r2
 80104c4:	b0c2      	sub	sp, #264	; 0x108
 80104c6:	b19a      	cbz	r2, 80104f0 <rcl_validate_enclave_name_with_size+0x34>
 80104c8:	461e      	mov	r6, r3
 80104ca:	466a      	mov	r2, sp
 80104cc:	ab01      	add	r3, sp, #4
 80104ce:	460c      	mov	r4, r1
 80104d0:	f001 ffca 	bl	8012468 <rmw_validate_namespace_with_size>
 80104d4:	4684      	mov	ip, r0
 80104d6:	b9b8      	cbnz	r0, 8010508 <rcl_validate_enclave_name_with_size+0x4c>
 80104d8:	9900      	ldr	r1, [sp, #0]
 80104da:	b171      	cbz	r1, 80104fa <rcl_validate_enclave_name_with_size+0x3e>
 80104dc:	2907      	cmp	r1, #7
 80104de:	d019      	beq.n	8010514 <rcl_validate_enclave_name_with_size+0x58>
 80104e0:	1e4b      	subs	r3, r1, #1
 80104e2:	2b05      	cmp	r3, #5
 80104e4:	d83a      	bhi.n	801055c <rcl_validate_enclave_name_with_size+0xa0>
 80104e6:	e8df f003 	tbb	[pc, r3]
 80104ea:	2926      	.short	0x2926
 80104ec:	1d322f2c 	.word	0x1d322f2c
 80104f0:	f04f 0c0b 	mov.w	ip, #11
 80104f4:	4660      	mov	r0, ip
 80104f6:	b042      	add	sp, #264	; 0x108
 80104f8:	bd70      	pop	{r4, r5, r6, pc}
 80104fa:	2907      	cmp	r1, #7
 80104fc:	d00a      	beq.n	8010514 <rcl_validate_enclave_name_with_size+0x58>
 80104fe:	2300      	movs	r3, #0
 8010500:	4660      	mov	r0, ip
 8010502:	602b      	str	r3, [r5, #0]
 8010504:	b042      	add	sp, #264	; 0x108
 8010506:	bd70      	pop	{r4, r5, r6, pc}
 8010508:	f7fe fd6c 	bl	800efe4 <rcl_convert_rmw_ret_to_rcl_ret>
 801050c:	4684      	mov	ip, r0
 801050e:	4660      	mov	r0, ip
 8010510:	b042      	add	sp, #264	; 0x108
 8010512:	bd70      	pop	{r4, r5, r6, pc}
 8010514:	2cff      	cmp	r4, #255	; 0xff
 8010516:	d9f2      	bls.n	80104fe <rcl_validate_enclave_name_with_size+0x42>
 8010518:	6029      	str	r1, [r5, #0]
 801051a:	2e00      	cmp	r6, #0
 801051c:	d0ea      	beq.n	80104f4 <rcl_validate_enclave_name_with_size+0x38>
 801051e:	23fe      	movs	r3, #254	; 0xfe
 8010520:	6033      	str	r3, [r6, #0]
 8010522:	e7e7      	b.n	80104f4 <rcl_validate_enclave_name_with_size+0x38>
 8010524:	2306      	movs	r3, #6
 8010526:	602b      	str	r3, [r5, #0]
 8010528:	2e00      	cmp	r6, #0
 801052a:	d0e3      	beq.n	80104f4 <rcl_validate_enclave_name_with_size+0x38>
 801052c:	9b01      	ldr	r3, [sp, #4]
 801052e:	4660      	mov	r0, ip
 8010530:	6033      	str	r3, [r6, #0]
 8010532:	b042      	add	sp, #264	; 0x108
 8010534:	bd70      	pop	{r4, r5, r6, pc}
 8010536:	2301      	movs	r3, #1
 8010538:	602b      	str	r3, [r5, #0]
 801053a:	e7f5      	b.n	8010528 <rcl_validate_enclave_name_with_size+0x6c>
 801053c:	2302      	movs	r3, #2
 801053e:	602b      	str	r3, [r5, #0]
 8010540:	e7f2      	b.n	8010528 <rcl_validate_enclave_name_with_size+0x6c>
 8010542:	2303      	movs	r3, #3
 8010544:	602b      	str	r3, [r5, #0]
 8010546:	e7ef      	b.n	8010528 <rcl_validate_enclave_name_with_size+0x6c>
 8010548:	2304      	movs	r3, #4
 801054a:	602b      	str	r3, [r5, #0]
 801054c:	e7ec      	b.n	8010528 <rcl_validate_enclave_name_with_size+0x6c>
 801054e:	2305      	movs	r3, #5
 8010550:	602b      	str	r3, [r5, #0]
 8010552:	e7e9      	b.n	8010528 <rcl_validate_enclave_name_with_size+0x6c>
 8010554:	f04f 0c0b 	mov.w	ip, #11
 8010558:	4660      	mov	r0, ip
 801055a:	4770      	bx	lr
 801055c:	460b      	mov	r3, r1
 801055e:	4a04      	ldr	r2, [pc, #16]	; (8010570 <rcl_validate_enclave_name_with_size+0xb4>)
 8010560:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010564:	a802      	add	r0, sp, #8
 8010566:	f001 fd33 	bl	8011fd0 <rcutils_snprintf>
 801056a:	f04f 0c01 	mov.w	ip, #1
 801056e:	e7c1      	b.n	80104f4 <rcl_validate_enclave_name_with_size+0x38>
 8010570:	0801b5a0 	.word	0x0801b5a0

08010574 <rcl_validate_enclave_name>:
 8010574:	b168      	cbz	r0, 8010592 <rcl_validate_enclave_name+0x1e>
 8010576:	b570      	push	{r4, r5, r6, lr}
 8010578:	460d      	mov	r5, r1
 801057a:	4616      	mov	r6, r2
 801057c:	4604      	mov	r4, r0
 801057e:	f7ef febf 	bl	8000300 <strlen>
 8010582:	4633      	mov	r3, r6
 8010584:	4601      	mov	r1, r0
 8010586:	462a      	mov	r2, r5
 8010588:	4620      	mov	r0, r4
 801058a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801058e:	f7ff bf95 	b.w	80104bc <rcl_validate_enclave_name_with_size>
 8010592:	200b      	movs	r0, #11
 8010594:	4770      	bx	lr
 8010596:	bf00      	nop

08010598 <rcl_get_zero_initialized_wait_set>:
 8010598:	b510      	push	{r4, lr}
 801059a:	4c08      	ldr	r4, [pc, #32]	; (80105bc <rcl_get_zero_initialized_wait_set+0x24>)
 801059c:	4686      	mov	lr, r0
 801059e:	4684      	mov	ip, r0
 80105a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80105a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80105a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80105a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80105ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80105ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80105b2:	6823      	ldr	r3, [r4, #0]
 80105b4:	4670      	mov	r0, lr
 80105b6:	f8cc 3000 	str.w	r3, [ip]
 80105ba:	bd10      	pop	{r4, pc}
 80105bc:	0801b600 	.word	0x0801b600

080105c0 <rcl_wait_set_is_valid>:
 80105c0:	b118      	cbz	r0, 80105ca <rcl_wait_set_is_valid+0xa>
 80105c2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80105c4:	3800      	subs	r0, #0
 80105c6:	bf18      	it	ne
 80105c8:	2001      	movne	r0, #1
 80105ca:	4770      	bx	lr

080105cc <rcl_wait_set_fini>:
 80105cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105d0:	b082      	sub	sp, #8
 80105d2:	2800      	cmp	r0, #0
 80105d4:	f000 8095 	beq.w	8010702 <rcl_wait_set_fini+0x136>
 80105d8:	6b06      	ldr	r6, [r0, #48]	; 0x30
 80105da:	4604      	mov	r4, r0
 80105dc:	2e00      	cmp	r6, #0
 80105de:	f000 808c 	beq.w	80106fa <rcl_wait_set_fini+0x12e>
 80105e2:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 80105e4:	f003 f8ee 	bl	80137c4 <rmw_destroy_wait_set>
 80105e8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80105ea:	1e06      	subs	r6, r0, #0
 80105ec:	bf18      	it	ne
 80105ee:	f44f 7661 	movne.w	r6, #900	; 0x384
 80105f2:	2d00      	cmp	r5, #0
 80105f4:	f000 8081 	beq.w	80106fa <rcl_wait_set_fini+0x12e>
 80105f8:	2700      	movs	r7, #0
 80105fa:	6820      	ldr	r0, [r4, #0]
 80105fc:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8010600:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8010602:	6067      	str	r7, [r4, #4]
 8010604:	602f      	str	r7, [r5, #0]
 8010606:	b120      	cbz	r0, 8010612 <rcl_wait_set_fini+0x46>
 8010608:	9101      	str	r1, [sp, #4]
 801060a:	47c0      	blx	r8
 801060c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801060e:	9901      	ldr	r1, [sp, #4]
 8010610:	6027      	str	r7, [r4, #0]
 8010612:	68a8      	ldr	r0, [r5, #8]
 8010614:	b120      	cbz	r0, 8010620 <rcl_wait_set_fini+0x54>
 8010616:	47c0      	blx	r8
 8010618:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801061a:	2300      	movs	r3, #0
 801061c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8010620:	f04f 0800 	mov.w	r8, #0
 8010624:	68a0      	ldr	r0, [r4, #8]
 8010626:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8010628:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801062a:	f8c4 800c 	str.w	r8, [r4, #12]
 801062e:	f8c5 800c 	str.w	r8, [r5, #12]
 8010632:	b128      	cbz	r0, 8010640 <rcl_wait_set_fini+0x74>
 8010634:	47b8      	blx	r7
 8010636:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010638:	f8c4 8008 	str.w	r8, [r4, #8]
 801063c:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801063e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8010640:	f04f 0800 	mov.w	r8, #0
 8010644:	6968      	ldr	r0, [r5, #20]
 8010646:	f8c5 8010 	str.w	r8, [r5, #16]
 801064a:	b128      	cbz	r0, 8010658 <rcl_wait_set_fini+0x8c>
 801064c:	47b8      	blx	r7
 801064e:	f8c5 8014 	str.w	r8, [r5, #20]
 8010652:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010654:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8010656:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8010658:	f04f 0800 	mov.w	r8, #0
 801065c:	6920      	ldr	r0, [r4, #16]
 801065e:	f8c4 8014 	str.w	r8, [r4, #20]
 8010662:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 8010666:	b128      	cbz	r0, 8010674 <rcl_wait_set_fini+0xa8>
 8010668:	47b8      	blx	r7
 801066a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801066c:	f8c4 8010 	str.w	r8, [r4, #16]
 8010670:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8010672:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8010674:	f04f 0800 	mov.w	r8, #0
 8010678:	69a0      	ldr	r0, [r4, #24]
 801067a:	f8c4 801c 	str.w	r8, [r4, #28]
 801067e:	f8c5 8018 	str.w	r8, [r5, #24]
 8010682:	b128      	cbz	r0, 8010690 <rcl_wait_set_fini+0xc4>
 8010684:	9101      	str	r1, [sp, #4]
 8010686:	47b8      	blx	r7
 8010688:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801068a:	9901      	ldr	r1, [sp, #4]
 801068c:	f8c4 8018 	str.w	r8, [r4, #24]
 8010690:	6a28      	ldr	r0, [r5, #32]
 8010692:	b120      	cbz	r0, 801069e <rcl_wait_set_fini+0xd2>
 8010694:	47b8      	blx	r7
 8010696:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010698:	2300      	movs	r3, #0
 801069a:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801069e:	2700      	movs	r7, #0
 80106a0:	6a20      	ldr	r0, [r4, #32]
 80106a2:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 80106a6:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80106a8:	6267      	str	r7, [r4, #36]	; 0x24
 80106aa:	626f      	str	r7, [r5, #36]	; 0x24
 80106ac:	b120      	cbz	r0, 80106b8 <rcl_wait_set_fini+0xec>
 80106ae:	9101      	str	r1, [sp, #4]
 80106b0:	47c0      	blx	r8
 80106b2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80106b4:	9901      	ldr	r1, [sp, #4]
 80106b6:	6227      	str	r7, [r4, #32]
 80106b8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80106ba:	b120      	cbz	r0, 80106c6 <rcl_wait_set_fini+0xfa>
 80106bc:	47c0      	blx	r8
 80106be:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80106c0:	2300      	movs	r3, #0
 80106c2:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 80106c6:	2700      	movs	r7, #0
 80106c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80106ca:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 80106ce:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80106d0:	62e7      	str	r7, [r4, #44]	; 0x2c
 80106d2:	632f      	str	r7, [r5, #48]	; 0x30
 80106d4:	b120      	cbz	r0, 80106e0 <rcl_wait_set_fini+0x114>
 80106d6:	9101      	str	r1, [sp, #4]
 80106d8:	47c0      	blx	r8
 80106da:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80106dc:	9901      	ldr	r1, [sp, #4]
 80106de:	62a7      	str	r7, [r4, #40]	; 0x28
 80106e0:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80106e2:	b120      	cbz	r0, 80106ee <rcl_wait_set_fini+0x122>
 80106e4:	47c0      	blx	r8
 80106e6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80106e8:	2300      	movs	r3, #0
 80106ea:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 80106ee:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80106f0:	4628      	mov	r0, r5
 80106f2:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80106f4:	4798      	blx	r3
 80106f6:	2300      	movs	r3, #0
 80106f8:	6323      	str	r3, [r4, #48]	; 0x30
 80106fa:	4630      	mov	r0, r6
 80106fc:	b002      	add	sp, #8
 80106fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010702:	260b      	movs	r6, #11
 8010704:	4630      	mov	r0, r6
 8010706:	b002      	add	sp, #8
 8010708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801070c <rcl_wait_set_add_subscription>:
 801070c:	b318      	cbz	r0, 8010756 <rcl_wait_set_add_subscription+0x4a>
 801070e:	b538      	push	{r3, r4, r5, lr}
 8010710:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010712:	4604      	mov	r4, r0
 8010714:	b30b      	cbz	r3, 801075a <rcl_wait_set_add_subscription+0x4e>
 8010716:	b319      	cbz	r1, 8010760 <rcl_wait_set_add_subscription+0x54>
 8010718:	681d      	ldr	r5, [r3, #0]
 801071a:	6840      	ldr	r0, [r0, #4]
 801071c:	4285      	cmp	r5, r0
 801071e:	d217      	bcs.n	8010750 <rcl_wait_set_add_subscription+0x44>
 8010720:	1c68      	adds	r0, r5, #1
 8010722:	6018      	str	r0, [r3, #0]
 8010724:	6823      	ldr	r3, [r4, #0]
 8010726:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801072a:	b102      	cbz	r2, 801072e <rcl_wait_set_add_subscription+0x22>
 801072c:	6015      	str	r5, [r2, #0]
 801072e:	4608      	mov	r0, r1
 8010730:	f7ff fcf4 	bl	801011c <rcl_subscription_get_rmw_handle>
 8010734:	b150      	cbz	r0, 801074c <rcl_wait_set_add_subscription+0x40>
 8010736:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010738:	6842      	ldr	r2, [r0, #4]
 801073a:	2000      	movs	r0, #0
 801073c:	689b      	ldr	r3, [r3, #8]
 801073e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010742:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010744:	6853      	ldr	r3, [r2, #4]
 8010746:	3301      	adds	r3, #1
 8010748:	6053      	str	r3, [r2, #4]
 801074a:	bd38      	pop	{r3, r4, r5, pc}
 801074c:	2001      	movs	r0, #1
 801074e:	bd38      	pop	{r3, r4, r5, pc}
 8010750:	f240 3086 	movw	r0, #902	; 0x386
 8010754:	bd38      	pop	{r3, r4, r5, pc}
 8010756:	200b      	movs	r0, #11
 8010758:	4770      	bx	lr
 801075a:	f44f 7061 	mov.w	r0, #900	; 0x384
 801075e:	bd38      	pop	{r3, r4, r5, pc}
 8010760:	200b      	movs	r0, #11
 8010762:	bd38      	pop	{r3, r4, r5, pc}

08010764 <rcl_wait_set_clear>:
 8010764:	2800      	cmp	r0, #0
 8010766:	d074      	beq.n	8010852 <rcl_wait_set_clear+0xee>
 8010768:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801076a:	b510      	push	{r4, lr}
 801076c:	4604      	mov	r4, r0
 801076e:	2b00      	cmp	r3, #0
 8010770:	d071      	beq.n	8010856 <rcl_wait_set_clear+0xf2>
 8010772:	6800      	ldr	r0, [r0, #0]
 8010774:	b138      	cbz	r0, 8010786 <rcl_wait_set_clear+0x22>
 8010776:	6862      	ldr	r2, [r4, #4]
 8010778:	2100      	movs	r1, #0
 801077a:	0092      	lsls	r2, r2, #2
 801077c:	f008 ff2a 	bl	80195d4 <memset>
 8010780:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010782:	2200      	movs	r2, #0
 8010784:	601a      	str	r2, [r3, #0]
 8010786:	68a0      	ldr	r0, [r4, #8]
 8010788:	b138      	cbz	r0, 801079a <rcl_wait_set_clear+0x36>
 801078a:	68e2      	ldr	r2, [r4, #12]
 801078c:	2100      	movs	r1, #0
 801078e:	0092      	lsls	r2, r2, #2
 8010790:	f008 ff20 	bl	80195d4 <memset>
 8010794:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010796:	2200      	movs	r2, #0
 8010798:	60da      	str	r2, [r3, #12]
 801079a:	69a0      	ldr	r0, [r4, #24]
 801079c:	b138      	cbz	r0, 80107ae <rcl_wait_set_clear+0x4a>
 801079e:	69e2      	ldr	r2, [r4, #28]
 80107a0:	2100      	movs	r1, #0
 80107a2:	0092      	lsls	r2, r2, #2
 80107a4:	f008 ff16 	bl	80195d4 <memset>
 80107a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80107aa:	2200      	movs	r2, #0
 80107ac:	619a      	str	r2, [r3, #24]
 80107ae:	6a20      	ldr	r0, [r4, #32]
 80107b0:	b138      	cbz	r0, 80107c2 <rcl_wait_set_clear+0x5e>
 80107b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80107b4:	2100      	movs	r1, #0
 80107b6:	0092      	lsls	r2, r2, #2
 80107b8:	f008 ff0c 	bl	80195d4 <memset>
 80107bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80107be:	2200      	movs	r2, #0
 80107c0:	625a      	str	r2, [r3, #36]	; 0x24
 80107c2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80107c4:	b138      	cbz	r0, 80107d6 <rcl_wait_set_clear+0x72>
 80107c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80107c8:	2100      	movs	r1, #0
 80107ca:	0092      	lsls	r2, r2, #2
 80107cc:	f008 ff02 	bl	80195d4 <memset>
 80107d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80107d2:	2200      	movs	r2, #0
 80107d4:	631a      	str	r2, [r3, #48]	; 0x30
 80107d6:	6920      	ldr	r0, [r4, #16]
 80107d8:	b138      	cbz	r0, 80107ea <rcl_wait_set_clear+0x86>
 80107da:	6962      	ldr	r2, [r4, #20]
 80107dc:	2100      	movs	r1, #0
 80107de:	0092      	lsls	r2, r2, #2
 80107e0:	f008 fef8 	bl	80195d4 <memset>
 80107e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80107e6:	2200      	movs	r2, #0
 80107e8:	641a      	str	r2, [r3, #64]	; 0x40
 80107ea:	6898      	ldr	r0, [r3, #8]
 80107ec:	b138      	cbz	r0, 80107fe <rcl_wait_set_clear+0x9a>
 80107ee:	685a      	ldr	r2, [r3, #4]
 80107f0:	2100      	movs	r1, #0
 80107f2:	0092      	lsls	r2, r2, #2
 80107f4:	f008 feee 	bl	80195d4 <memset>
 80107f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80107fa:	2200      	movs	r2, #0
 80107fc:	605a      	str	r2, [r3, #4]
 80107fe:	6958      	ldr	r0, [r3, #20]
 8010800:	b138      	cbz	r0, 8010812 <rcl_wait_set_clear+0xae>
 8010802:	691a      	ldr	r2, [r3, #16]
 8010804:	2100      	movs	r1, #0
 8010806:	0092      	lsls	r2, r2, #2
 8010808:	f008 fee4 	bl	80195d4 <memset>
 801080c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801080e:	2200      	movs	r2, #0
 8010810:	611a      	str	r2, [r3, #16]
 8010812:	6a18      	ldr	r0, [r3, #32]
 8010814:	b138      	cbz	r0, 8010826 <rcl_wait_set_clear+0xc2>
 8010816:	69da      	ldr	r2, [r3, #28]
 8010818:	2100      	movs	r1, #0
 801081a:	0092      	lsls	r2, r2, #2
 801081c:	f008 feda 	bl	80195d4 <memset>
 8010820:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010822:	2200      	movs	r2, #0
 8010824:	61da      	str	r2, [r3, #28]
 8010826:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8010828:	b138      	cbz	r0, 801083a <rcl_wait_set_clear+0xd6>
 801082a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801082c:	2100      	movs	r1, #0
 801082e:	0092      	lsls	r2, r2, #2
 8010830:	f008 fed0 	bl	80195d4 <memset>
 8010834:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010836:	2200      	movs	r2, #0
 8010838:	629a      	str	r2, [r3, #40]	; 0x28
 801083a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801083c:	b140      	cbz	r0, 8010850 <rcl_wait_set_clear+0xec>
 801083e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010840:	2100      	movs	r1, #0
 8010842:	0092      	lsls	r2, r2, #2
 8010844:	f008 fec6 	bl	80195d4 <memset>
 8010848:	2300      	movs	r3, #0
 801084a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801084c:	4618      	mov	r0, r3
 801084e:	6353      	str	r3, [r2, #52]	; 0x34
 8010850:	bd10      	pop	{r4, pc}
 8010852:	200b      	movs	r0, #11
 8010854:	4770      	bx	lr
 8010856:	f44f 7061 	mov.w	r0, #900	; 0x384
 801085a:	bd10      	pop	{r4, pc}

0801085c <rcl_wait_set_resize>:
 801085c:	2800      	cmp	r0, #0
 801085e:	f000 8180 	beq.w	8010b62 <rcl_wait_set_resize+0x306>
 8010862:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010866:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8010868:	b083      	sub	sp, #12
 801086a:	4605      	mov	r5, r0
 801086c:	2c00      	cmp	r4, #0
 801086e:	f000 817a 	beq.w	8010b66 <rcl_wait_set_resize+0x30a>
 8010872:	f04f 0900 	mov.w	r9, #0
 8010876:	461f      	mov	r7, r3
 8010878:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 801087c:	4688      	mov	r8, r1
 801087e:	4616      	mov	r6, r2
 8010880:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	; 0x4c
 8010884:	f8c0 9004 	str.w	r9, [r0, #4]
 8010888:	f8c4 9000 	str.w	r9, [r4]
 801088c:	2900      	cmp	r1, #0
 801088e:	f000 80bf 	beq.w	8010a10 <rcl_wait_set_resize+0x1b4>
 8010892:	008c      	lsls	r4, r1, #2
 8010894:	4652      	mov	r2, sl
 8010896:	6800      	ldr	r0, [r0, #0]
 8010898:	4621      	mov	r1, r4
 801089a:	9301      	str	r3, [sp, #4]
 801089c:	4798      	blx	r3
 801089e:	9b01      	ldr	r3, [sp, #4]
 80108a0:	6028      	str	r0, [r5, #0]
 80108a2:	2800      	cmp	r0, #0
 80108a4:	f000 80f6 	beq.w	8010a94 <rcl_wait_set_resize+0x238>
 80108a8:	4622      	mov	r2, r4
 80108aa:	4649      	mov	r1, r9
 80108ac:	9301      	str	r3, [sp, #4]
 80108ae:	f008 fe91 	bl	80195d4 <memset>
 80108b2:	f8c5 8004 	str.w	r8, [r5, #4]
 80108b6:	4652      	mov	r2, sl
 80108b8:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 80108bc:	4621      	mov	r1, r4
 80108be:	9b01      	ldr	r3, [sp, #4]
 80108c0:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80108c4:	f8c8 9004 	str.w	r9, [r8, #4]
 80108c8:	4798      	blx	r3
 80108ca:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80108cc:	f8c8 0008 	str.w	r0, [r8, #8]
 80108d0:	689b      	ldr	r3, [r3, #8]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	f000 814a 	beq.w	8010b6c <rcl_wait_set_resize+0x310>
 80108d8:	4622      	mov	r2, r4
 80108da:	4649      	mov	r1, r9
 80108dc:	4618      	mov	r0, r3
 80108de:	f008 fe79 	bl	80195d4 <memset>
 80108e2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80108e4:	f04f 0800 	mov.w	r8, #0
 80108e8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80108ec:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
 80108f0:	f8c5 800c 	str.w	r8, [r5, #12]
 80108f4:	f8c4 800c 	str.w	r8, [r4, #12]
 80108f8:	2e00      	cmp	r6, #0
 80108fa:	f040 809b 	bne.w	8010a34 <rcl_wait_set_resize+0x1d8>
 80108fe:	68a8      	ldr	r0, [r5, #8]
 8010900:	b128      	cbz	r0, 801090e <rcl_wait_set_resize+0xb2>
 8010902:	4649      	mov	r1, r9
 8010904:	4790      	blx	r2
 8010906:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010908:	60ae      	str	r6, [r5, #8]
 801090a:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801090e:	f04f 0800 	mov.w	r8, #0
 8010912:	19f6      	adds	r6, r6, r7
 8010914:	f8c4 8010 	str.w	r8, [r4, #16]
 8010918:	f040 80a2 	bne.w	8010a60 <rcl_wait_set_resize+0x204>
 801091c:	6960      	ldr	r0, [r4, #20]
 801091e:	b130      	cbz	r0, 801092e <rcl_wait_set_resize+0xd2>
 8010920:	4649      	mov	r1, r9
 8010922:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8010924:	4798      	blx	r3
 8010926:	6166      	str	r6, [r4, #20]
 8010928:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801092a:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801092e:	2600      	movs	r6, #0
 8010930:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8010934:	616e      	str	r6, [r5, #20]
 8010936:	6426      	str	r6, [r4, #64]	; 0x40
 8010938:	2f00      	cmp	r7, #0
 801093a:	f040 80af 	bne.w	8010a9c <rcl_wait_set_resize+0x240>
 801093e:	6928      	ldr	r0, [r5, #16]
 8010940:	b138      	cbz	r0, 8010952 <rcl_wait_set_resize+0xf6>
 8010942:	4649      	mov	r1, r9
 8010944:	47d0      	blx	sl
 8010946:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010948:	612f      	str	r7, [r5, #16]
 801094a:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801094e:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8010952:	2600      	movs	r6, #0
 8010954:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010956:	61ee      	str	r6, [r5, #28]
 8010958:	61a6      	str	r6, [r4, #24]
 801095a:	2b00      	cmp	r3, #0
 801095c:	f040 8093 	bne.w	8010a86 <rcl_wait_set_resize+0x22a>
 8010960:	69a8      	ldr	r0, [r5, #24]
 8010962:	b120      	cbz	r0, 801096e <rcl_wait_set_resize+0x112>
 8010964:	4649      	mov	r1, r9
 8010966:	47d0      	blx	sl
 8010968:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801096a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801096c:	61ab      	str	r3, [r5, #24]
 801096e:	6a20      	ldr	r0, [r4, #32]
 8010970:	b128      	cbz	r0, 801097e <rcl_wait_set_resize+0x122>
 8010972:	4649      	mov	r1, r9
 8010974:	47d0      	blx	sl
 8010976:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010978:	2300      	movs	r3, #0
 801097a:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801097e:	2600      	movs	r6, #0
 8010980:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010982:	6da7      	ldr	r7, [r4, #88]	; 0x58
 8010984:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 8010988:	626e      	str	r6, [r5, #36]	; 0x24
 801098a:	6266      	str	r6, [r4, #36]	; 0x24
 801098c:	2b00      	cmp	r3, #0
 801098e:	f000 8098 	beq.w	8010ac2 <rcl_wait_set_resize+0x266>
 8010992:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8010996:	463a      	mov	r2, r7
 8010998:	6a28      	ldr	r0, [r5, #32]
 801099a:	4651      	mov	r1, sl
 801099c:	47c8      	blx	r9
 801099e:	6228      	str	r0, [r5, #32]
 80109a0:	2800      	cmp	r0, #0
 80109a2:	d077      	beq.n	8010a94 <rcl_wait_set_resize+0x238>
 80109a4:	4652      	mov	r2, sl
 80109a6:	4631      	mov	r1, r6
 80109a8:	f008 fe14 	bl	80195d4 <memset>
 80109ac:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80109ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80109b0:	463a      	mov	r2, r7
 80109b2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80109b4:	4651      	mov	r1, sl
 80109b6:	626b      	str	r3, [r5, #36]	; 0x24
 80109b8:	62a6      	str	r6, [r4, #40]	; 0x28
 80109ba:	47c8      	blx	r9
 80109bc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80109be:	62e0      	str	r0, [r4, #44]	; 0x2c
 80109c0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80109c2:	2c00      	cmp	r4, #0
 80109c4:	f000 80f2 	beq.w	8010bac <rcl_wait_set_resize+0x350>
 80109c8:	4620      	mov	r0, r4
 80109ca:	4652      	mov	r2, sl
 80109cc:	4631      	mov	r1, r6
 80109ce:	f008 fe01 	bl	80195d4 <memset>
 80109d2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80109d4:	2600      	movs	r6, #0
 80109d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80109d8:	6da7      	ldr	r7, [r4, #88]	; 0x58
 80109da:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 80109de:	62ee      	str	r6, [r5, #44]	; 0x2c
 80109e0:	6326      	str	r6, [r4, #48]	; 0x30
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	f040 8097 	bne.w	8010b16 <rcl_wait_set_resize+0x2ba>
 80109e8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80109ea:	b120      	cbz	r0, 80109f6 <rcl_wait_set_resize+0x19a>
 80109ec:	4639      	mov	r1, r7
 80109ee:	47c0      	blx	r8
 80109f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80109f2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80109f4:	62ab      	str	r3, [r5, #40]	; 0x28
 80109f6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80109f8:	2800      	cmp	r0, #0
 80109fa:	d04c      	beq.n	8010a96 <rcl_wait_set_resize+0x23a>
 80109fc:	4639      	mov	r1, r7
 80109fe:	47c0      	blx	r8
 8010a00:	2300      	movs	r3, #0
 8010a02:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8010a04:	4618      	mov	r0, r3
 8010a06:	e9c2 330d 	strd	r3, r3, [r2, #52]	; 0x34
 8010a0a:	b003      	add	sp, #12
 8010a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a10:	6800      	ldr	r0, [r0, #0]
 8010a12:	b120      	cbz	r0, 8010a1e <rcl_wait_set_resize+0x1c2>
 8010a14:	4651      	mov	r1, sl
 8010a16:	47d8      	blx	fp
 8010a18:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010a1a:	f8c5 8000 	str.w	r8, [r5]
 8010a1e:	68a0      	ldr	r0, [r4, #8]
 8010a20:	2800      	cmp	r0, #0
 8010a22:	f43f af5f 	beq.w	80108e4 <rcl_wait_set_resize+0x88>
 8010a26:	4651      	mov	r1, sl
 8010a28:	47d8      	blx	fp
 8010a2a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8010a32:	e757      	b.n	80108e4 <rcl_wait_set_resize+0x88>
 8010a34:	00b4      	lsls	r4, r6, #2
 8010a36:	464a      	mov	r2, r9
 8010a38:	68a8      	ldr	r0, [r5, #8]
 8010a3a:	4621      	mov	r1, r4
 8010a3c:	4798      	blx	r3
 8010a3e:	60a8      	str	r0, [r5, #8]
 8010a40:	b340      	cbz	r0, 8010a94 <rcl_wait_set_resize+0x238>
 8010a42:	4622      	mov	r2, r4
 8010a44:	4641      	mov	r1, r8
 8010a46:	f008 fdc5 	bl	80195d4 <memset>
 8010a4a:	f04f 0800 	mov.w	r8, #0
 8010a4e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010a50:	60ee      	str	r6, [r5, #12]
 8010a52:	19f6      	adds	r6, r6, r7
 8010a54:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8010a58:	f8c4 8010 	str.w	r8, [r4, #16]
 8010a5c:	f43f af5e 	beq.w	801091c <rcl_wait_set_resize+0xc0>
 8010a60:	00b6      	lsls	r6, r6, #2
 8010a62:	464a      	mov	r2, r9
 8010a64:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8010a66:	6960      	ldr	r0, [r4, #20]
 8010a68:	4631      	mov	r1, r6
 8010a6a:	4798      	blx	r3
 8010a6c:	4681      	mov	r9, r0
 8010a6e:	6160      	str	r0, [r4, #20]
 8010a70:	2800      	cmp	r0, #0
 8010a72:	f000 8084 	beq.w	8010b7e <rcl_wait_set_resize+0x322>
 8010a76:	4632      	mov	r2, r6
 8010a78:	4641      	mov	r1, r8
 8010a7a:	f008 fdab 	bl	80195d4 <memset>
 8010a7e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010a80:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8010a84:	e753      	b.n	801092e <rcl_wait_set_resize+0xd2>
 8010a86:	009c      	lsls	r4, r3, #2
 8010a88:	464a      	mov	r2, r9
 8010a8a:	69a8      	ldr	r0, [r5, #24]
 8010a8c:	4621      	mov	r1, r4
 8010a8e:	47c0      	blx	r8
 8010a90:	61a8      	str	r0, [r5, #24]
 8010a92:	bb40      	cbnz	r0, 8010ae6 <rcl_wait_set_resize+0x28a>
 8010a94:	200a      	movs	r0, #10
 8010a96:	b003      	add	sp, #12
 8010a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a9c:	00bc      	lsls	r4, r7, #2
 8010a9e:	464a      	mov	r2, r9
 8010aa0:	6928      	ldr	r0, [r5, #16]
 8010aa2:	4621      	mov	r1, r4
 8010aa4:	47c0      	blx	r8
 8010aa6:	6128      	str	r0, [r5, #16]
 8010aa8:	2800      	cmp	r0, #0
 8010aaa:	d0f3      	beq.n	8010a94 <rcl_wait_set_resize+0x238>
 8010aac:	4622      	mov	r2, r4
 8010aae:	4631      	mov	r1, r6
 8010ab0:	f008 fd90 	bl	80195d4 <memset>
 8010ab4:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010ab6:	616f      	str	r7, [r5, #20]
 8010ab8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8010abc:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8010ac0:	e747      	b.n	8010952 <rcl_wait_set_resize+0xf6>
 8010ac2:	6a28      	ldr	r0, [r5, #32]
 8010ac4:	b120      	cbz	r0, 8010ad0 <rcl_wait_set_resize+0x274>
 8010ac6:	4639      	mov	r1, r7
 8010ac8:	47c0      	blx	r8
 8010aca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010acc:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010ace:	622b      	str	r3, [r5, #32]
 8010ad0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8010ad2:	2800      	cmp	r0, #0
 8010ad4:	f43f af7e 	beq.w	80109d4 <rcl_wait_set_resize+0x178>
 8010ad8:	4639      	mov	r1, r7
 8010ada:	47c0      	blx	r8
 8010adc:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010ade:	2300      	movs	r3, #0
 8010ae0:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8010ae4:	e776      	b.n	80109d4 <rcl_wait_set_resize+0x178>
 8010ae6:	4622      	mov	r2, r4
 8010ae8:	4631      	mov	r1, r6
 8010aea:	f008 fd73 	bl	80195d4 <memset>
 8010aee:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 8010af0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010af2:	464a      	mov	r2, r9
 8010af4:	6a38      	ldr	r0, [r7, #32]
 8010af6:	4621      	mov	r1, r4
 8010af8:	61eb      	str	r3, [r5, #28]
 8010afa:	61fe      	str	r6, [r7, #28]
 8010afc:	47c0      	blx	r8
 8010afe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010b00:	6238      	str	r0, [r7, #32]
 8010b02:	6a1f      	ldr	r7, [r3, #32]
 8010b04:	2f00      	cmp	r7, #0
 8010b06:	d04a      	beq.n	8010b9e <rcl_wait_set_resize+0x342>
 8010b08:	4622      	mov	r2, r4
 8010b0a:	4631      	mov	r1, r6
 8010b0c:	4638      	mov	r0, r7
 8010b0e:	f008 fd61 	bl	80195d4 <memset>
 8010b12:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010b14:	e733      	b.n	801097e <rcl_wait_set_resize+0x122>
 8010b16:	009c      	lsls	r4, r3, #2
 8010b18:	463a      	mov	r2, r7
 8010b1a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8010b1c:	4621      	mov	r1, r4
 8010b1e:	47c8      	blx	r9
 8010b20:	62a8      	str	r0, [r5, #40]	; 0x28
 8010b22:	2800      	cmp	r0, #0
 8010b24:	d0b6      	beq.n	8010a94 <rcl_wait_set_resize+0x238>
 8010b26:	4622      	mov	r2, r4
 8010b28:	4631      	mov	r1, r6
 8010b2a:	f008 fd53 	bl	80195d4 <memset>
 8010b2e:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8010b32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010b34:	463a      	mov	r2, r7
 8010b36:	4621      	mov	r1, r4
 8010b38:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 8010b3c:	62eb      	str	r3, [r5, #44]	; 0x2c
 8010b3e:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
 8010b42:	47c8      	blx	r9
 8010b44:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010b46:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 8010b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d034      	beq.n	8010bba <rcl_wait_set_resize+0x35e>
 8010b50:	4622      	mov	r2, r4
 8010b52:	4631      	mov	r1, r6
 8010b54:	4618      	mov	r0, r3
 8010b56:	f008 fd3d 	bl	80195d4 <memset>
 8010b5a:	4630      	mov	r0, r6
 8010b5c:	b003      	add	sp, #12
 8010b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b62:	200b      	movs	r0, #11
 8010b64:	4770      	bx	lr
 8010b66:	f44f 7061 	mov.w	r0, #900	; 0x384
 8010b6a:	e794      	b.n	8010a96 <rcl_wait_set_resize+0x23a>
 8010b6c:	6828      	ldr	r0, [r5, #0]
 8010b6e:	4651      	mov	r1, sl
 8010b70:	9301      	str	r3, [sp, #4]
 8010b72:	47d8      	blx	fp
 8010b74:	9b01      	ldr	r3, [sp, #4]
 8010b76:	200a      	movs	r0, #10
 8010b78:	e9c5 3300 	strd	r3, r3, [r5]
 8010b7c:	e78b      	b.n	8010a96 <rcl_wait_set_resize+0x23a>
 8010b7e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010b80:	68a8      	ldr	r0, [r5, #8]
 8010b82:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8010b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010b86:	4798      	blx	r3
 8010b88:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010b8a:	6928      	ldr	r0, [r5, #16]
 8010b8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010b8e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8010b90:	e9c5 9902 	strd	r9, r9, [r5, #8]
 8010b94:	4790      	blx	r2
 8010b96:	200a      	movs	r0, #10
 8010b98:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8010b9c:	e77b      	b.n	8010a96 <rcl_wait_set_resize+0x23a>
 8010b9e:	69a8      	ldr	r0, [r5, #24]
 8010ba0:	4649      	mov	r1, r9
 8010ba2:	47d0      	blx	sl
 8010ba4:	200a      	movs	r0, #10
 8010ba6:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8010baa:	e774      	b.n	8010a96 <rcl_wait_set_resize+0x23a>
 8010bac:	6a28      	ldr	r0, [r5, #32]
 8010bae:	4639      	mov	r1, r7
 8010bb0:	47c0      	blx	r8
 8010bb2:	200a      	movs	r0, #10
 8010bb4:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8010bb8:	e76d      	b.n	8010a96 <rcl_wait_set_resize+0x23a>
 8010bba:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8010bbc:	4639      	mov	r1, r7
 8010bbe:	9301      	str	r3, [sp, #4]
 8010bc0:	47c0      	blx	r8
 8010bc2:	9b01      	ldr	r3, [sp, #4]
 8010bc4:	200a      	movs	r0, #10
 8010bc6:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8010bca:	e764      	b.n	8010a96 <rcl_wait_set_resize+0x23a>

08010bcc <rcl_wait_set_init>:
 8010bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bd0:	b085      	sub	sp, #20
 8010bd2:	4605      	mov	r5, r0
 8010bd4:	460e      	mov	r6, r1
 8010bd6:	4617      	mov	r7, r2
 8010bd8:	a812      	add	r0, sp, #72	; 0x48
 8010bda:	4698      	mov	r8, r3
 8010bdc:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 8010be0:	f7fb fa9a 	bl	800c118 <rcutils_allocator_is_valid>
 8010be4:	2d00      	cmp	r5, #0
 8010be6:	d072      	beq.n	8010cce <rcl_wait_set_init+0x102>
 8010be8:	f080 0001 	eor.w	r0, r0, #1
 8010bec:	b2c0      	uxtb	r0, r0
 8010bee:	2800      	cmp	r0, #0
 8010bf0:	d16d      	bne.n	8010cce <rcl_wait_set_init+0x102>
 8010bf2:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8010bf6:	f1ba 0f00 	cmp.w	sl, #0
 8010bfa:	d004      	beq.n	8010c06 <rcl_wait_set_init+0x3a>
 8010bfc:	2464      	movs	r4, #100	; 0x64
 8010bfe:	4620      	mov	r0, r4
 8010c00:	b005      	add	sp, #20
 8010c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c06:	f1b9 0f00 	cmp.w	r9, #0
 8010c0a:	d060      	beq.n	8010cce <rcl_wait_set_init+0x102>
 8010c0c:	4648      	mov	r0, r9
 8010c0e:	f7fe fa07 	bl	800f020 <rcl_context_is_valid>
 8010c12:	2800      	cmp	r0, #0
 8010c14:	d068      	beq.n	8010ce8 <rcl_wait_set_init+0x11c>
 8010c16:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010c18:	205c      	movs	r0, #92	; 0x5c
 8010c1a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010c1c:	4798      	blx	r3
 8010c1e:	6328      	str	r0, [r5, #48]	; 0x30
 8010c20:	2800      	cmp	r0, #0
 8010c22:	d063      	beq.n	8010cec <rcl_wait_set_init+0x120>
 8010c24:	225c      	movs	r2, #92	; 0x5c
 8010c26:	4651      	mov	r1, sl
 8010c28:	f008 fcd4 	bl	80195d4 <memset>
 8010c2c:	ac12      	add	r4, sp, #72	; 0x48
 8010c2e:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
 8010c32:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8010c36:	f10b 0c48 	add.w	ip, fp, #72	; 0x48
 8010c3a:	f8cb 9044 	str.w	r9, [fp, #68]	; 0x44
 8010c3e:	eb03 0e02 	add.w	lr, r3, r2
 8010c42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010c44:	f8d9 9000 	ldr.w	r9, [r9]
 8010c48:	449e      	add	lr, r3
 8010c4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010c4c:	e9cb aa01 	strd	sl, sl, [fp, #4]
 8010c50:	e9cb aa04 	strd	sl, sl, [fp, #16]
 8010c54:	e9cb aa07 	strd	sl, sl, [fp, #28]
 8010c58:	e9cb aa0a 	strd	sl, sl, [fp, #40]	; 0x28
 8010c5c:	e9cb aa0d 	strd	sl, sl, [fp, #52]	; 0x34
 8010c60:	44be      	add	lr, r7
 8010c62:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010c66:	6823      	ldr	r3, [r4, #0]
 8010c68:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 8010c6c:	f109 0028 	add.w	r0, r9, #40	; 0x28
 8010c70:	f8cc 3000 	str.w	r3, [ip]
 8010c74:	f002 fd9c 	bl	80137b0 <rmw_create_wait_set>
 8010c78:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010c7a:	f8cb 003c 	str.w	r0, [fp, #60]	; 0x3c
 8010c7e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8010c80:	b350      	cbz	r0, 8010cd8 <rcl_wait_set_init+0x10c>
 8010c82:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8010c84:	4643      	mov	r3, r8
 8010c86:	463a      	mov	r2, r7
 8010c88:	4631      	mov	r1, r6
 8010c8a:	9402      	str	r4, [sp, #8]
 8010c8c:	4628      	mov	r0, r5
 8010c8e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8010c90:	9401      	str	r4, [sp, #4]
 8010c92:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8010c94:	9400      	str	r4, [sp, #0]
 8010c96:	f7ff fde1 	bl	801085c <rcl_wait_set_resize>
 8010c9a:	4604      	mov	r4, r0
 8010c9c:	2800      	cmp	r0, #0
 8010c9e:	d0ae      	beq.n	8010bfe <rcl_wait_set_init+0x32>
 8010ca0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010ca2:	bb2b      	cbnz	r3, 8010cf0 <rcl_wait_set_init+0x124>
 8010ca4:	2600      	movs	r6, #0
 8010ca6:	4628      	mov	r0, r5
 8010ca8:	4633      	mov	r3, r6
 8010caa:	4632      	mov	r2, r6
 8010cac:	4631      	mov	r1, r6
 8010cae:	9600      	str	r6, [sp, #0]
 8010cb0:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8010cb4:	f7ff fdd2 	bl	801085c <rcl_wait_set_resize>
 8010cb8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8010cba:	2800      	cmp	r0, #0
 8010cbc:	d09f      	beq.n	8010bfe <rcl_wait_set_init+0x32>
 8010cbe:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8010cc0:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8010cc2:	4798      	blx	r3
 8010cc4:	4620      	mov	r0, r4
 8010cc6:	632e      	str	r6, [r5, #48]	; 0x30
 8010cc8:	b005      	add	sp, #20
 8010cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cce:	240b      	movs	r4, #11
 8010cd0:	4620      	mov	r0, r4
 8010cd2:	b005      	add	sp, #20
 8010cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cd8:	2401      	movs	r4, #1
 8010cda:	f002 fd73 	bl	80137c4 <rmw_destroy_wait_set>
 8010cde:	2800      	cmp	r0, #0
 8010ce0:	bf18      	it	ne
 8010ce2:	f44f 7461 	movne.w	r4, #900	; 0x384
 8010ce6:	e7dd      	b.n	8010ca4 <rcl_wait_set_init+0xd8>
 8010ce8:	2465      	movs	r4, #101	; 0x65
 8010cea:	e788      	b.n	8010bfe <rcl_wait_set_init+0x32>
 8010cec:	240a      	movs	r4, #10
 8010cee:	e786      	b.n	8010bfe <rcl_wait_set_init+0x32>
 8010cf0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8010cf2:	e7f2      	b.n	8010cda <rcl_wait_set_init+0x10e>

08010cf4 <rcl_wait_set_add_guard_condition>:
 8010cf4:	b318      	cbz	r0, 8010d3e <rcl_wait_set_add_guard_condition+0x4a>
 8010cf6:	b538      	push	{r3, r4, r5, lr}
 8010cf8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010cfa:	4604      	mov	r4, r0
 8010cfc:	b30b      	cbz	r3, 8010d42 <rcl_wait_set_add_guard_condition+0x4e>
 8010cfe:	b319      	cbz	r1, 8010d48 <rcl_wait_set_add_guard_condition+0x54>
 8010d00:	68dd      	ldr	r5, [r3, #12]
 8010d02:	68c0      	ldr	r0, [r0, #12]
 8010d04:	4285      	cmp	r5, r0
 8010d06:	d217      	bcs.n	8010d38 <rcl_wait_set_add_guard_condition+0x44>
 8010d08:	1c68      	adds	r0, r5, #1
 8010d0a:	60d8      	str	r0, [r3, #12]
 8010d0c:	68a3      	ldr	r3, [r4, #8]
 8010d0e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8010d12:	b102      	cbz	r2, 8010d16 <rcl_wait_set_add_guard_condition+0x22>
 8010d14:	6015      	str	r5, [r2, #0]
 8010d16:	4608      	mov	r0, r1
 8010d18:	f006 fe56 	bl	80179c8 <rcl_guard_condition_get_rmw_handle>
 8010d1c:	b150      	cbz	r0, 8010d34 <rcl_wait_set_add_guard_condition+0x40>
 8010d1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010d20:	6842      	ldr	r2, [r0, #4]
 8010d22:	2000      	movs	r0, #0
 8010d24:	695b      	ldr	r3, [r3, #20]
 8010d26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010d2a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010d2c:	6913      	ldr	r3, [r2, #16]
 8010d2e:	3301      	adds	r3, #1
 8010d30:	6113      	str	r3, [r2, #16]
 8010d32:	bd38      	pop	{r3, r4, r5, pc}
 8010d34:	2001      	movs	r0, #1
 8010d36:	bd38      	pop	{r3, r4, r5, pc}
 8010d38:	f240 3086 	movw	r0, #902	; 0x386
 8010d3c:	bd38      	pop	{r3, r4, r5, pc}
 8010d3e:	200b      	movs	r0, #11
 8010d40:	4770      	bx	lr
 8010d42:	f44f 7061 	mov.w	r0, #900	; 0x384
 8010d46:	bd38      	pop	{r3, r4, r5, pc}
 8010d48:	200b      	movs	r0, #11
 8010d4a:	bd38      	pop	{r3, r4, r5, pc}

08010d4c <rcl_wait_set_add_timer>:
 8010d4c:	b328      	cbz	r0, 8010d9a <rcl_wait_set_add_timer+0x4e>
 8010d4e:	b538      	push	{r3, r4, r5, lr}
 8010d50:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010d52:	4604      	mov	r4, r0
 8010d54:	b31b      	cbz	r3, 8010d9e <rcl_wait_set_add_timer+0x52>
 8010d56:	b329      	cbz	r1, 8010da4 <rcl_wait_set_add_timer+0x58>
 8010d58:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8010d5a:	6965      	ldr	r5, [r4, #20]
 8010d5c:	42a8      	cmp	r0, r5
 8010d5e:	d219      	bcs.n	8010d94 <rcl_wait_set_add_timer+0x48>
 8010d60:	1c45      	adds	r5, r0, #1
 8010d62:	641d      	str	r5, [r3, #64]	; 0x40
 8010d64:	6923      	ldr	r3, [r4, #16]
 8010d66:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8010d6a:	b102      	cbz	r2, 8010d6e <rcl_wait_set_add_timer+0x22>
 8010d6c:	6010      	str	r0, [r2, #0]
 8010d6e:	4608      	mov	r0, r1
 8010d70:	f7ff fb9a 	bl	80104a8 <rcl_timer_get_guard_condition>
 8010d74:	b168      	cbz	r0, 8010d92 <rcl_wait_set_add_timer+0x46>
 8010d76:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010d78:	68e3      	ldr	r3, [r4, #12]
 8010d7a:	6c15      	ldr	r5, [r2, #64]	; 0x40
 8010d7c:	3b01      	subs	r3, #1
 8010d7e:	441d      	add	r5, r3
 8010d80:	f006 fe22 	bl	80179c8 <rcl_guard_condition_get_rmw_handle>
 8010d84:	b180      	cbz	r0, 8010da8 <rcl_wait_set_add_timer+0x5c>
 8010d86:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010d88:	6842      	ldr	r2, [r0, #4]
 8010d8a:	2000      	movs	r0, #0
 8010d8c:	695b      	ldr	r3, [r3, #20]
 8010d8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010d92:	bd38      	pop	{r3, r4, r5, pc}
 8010d94:	f240 3086 	movw	r0, #902	; 0x386
 8010d98:	bd38      	pop	{r3, r4, r5, pc}
 8010d9a:	200b      	movs	r0, #11
 8010d9c:	4770      	bx	lr
 8010d9e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8010da2:	bd38      	pop	{r3, r4, r5, pc}
 8010da4:	200b      	movs	r0, #11
 8010da6:	bd38      	pop	{r3, r4, r5, pc}
 8010da8:	2001      	movs	r0, #1
 8010daa:	bd38      	pop	{r3, r4, r5, pc}

08010dac <rcl_wait_set_add_client>:
 8010dac:	b318      	cbz	r0, 8010df6 <rcl_wait_set_add_client+0x4a>
 8010dae:	b538      	push	{r3, r4, r5, lr}
 8010db0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010db2:	4604      	mov	r4, r0
 8010db4:	b30b      	cbz	r3, 8010dfa <rcl_wait_set_add_client+0x4e>
 8010db6:	b319      	cbz	r1, 8010e00 <rcl_wait_set_add_client+0x54>
 8010db8:	699d      	ldr	r5, [r3, #24]
 8010dba:	69c0      	ldr	r0, [r0, #28]
 8010dbc:	4285      	cmp	r5, r0
 8010dbe:	d217      	bcs.n	8010df0 <rcl_wait_set_add_client+0x44>
 8010dc0:	1c68      	adds	r0, r5, #1
 8010dc2:	6198      	str	r0, [r3, #24]
 8010dc4:	69a3      	ldr	r3, [r4, #24]
 8010dc6:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8010dca:	b102      	cbz	r2, 8010dce <rcl_wait_set_add_client+0x22>
 8010dcc:	6015      	str	r5, [r2, #0]
 8010dce:	4608      	mov	r0, r1
 8010dd0:	f7fe f83c 	bl	800ee4c <rcl_client_get_rmw_handle>
 8010dd4:	b150      	cbz	r0, 8010dec <rcl_wait_set_add_client+0x40>
 8010dd6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010dd8:	6842      	ldr	r2, [r0, #4]
 8010dda:	2000      	movs	r0, #0
 8010ddc:	6a1b      	ldr	r3, [r3, #32]
 8010dde:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010de2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010de4:	69d3      	ldr	r3, [r2, #28]
 8010de6:	3301      	adds	r3, #1
 8010de8:	61d3      	str	r3, [r2, #28]
 8010dea:	bd38      	pop	{r3, r4, r5, pc}
 8010dec:	2001      	movs	r0, #1
 8010dee:	bd38      	pop	{r3, r4, r5, pc}
 8010df0:	f240 3086 	movw	r0, #902	; 0x386
 8010df4:	bd38      	pop	{r3, r4, r5, pc}
 8010df6:	200b      	movs	r0, #11
 8010df8:	4770      	bx	lr
 8010dfa:	f44f 7061 	mov.w	r0, #900	; 0x384
 8010dfe:	bd38      	pop	{r3, r4, r5, pc}
 8010e00:	200b      	movs	r0, #11
 8010e02:	bd38      	pop	{r3, r4, r5, pc}

08010e04 <rcl_wait_set_add_service>:
 8010e04:	b318      	cbz	r0, 8010e4e <rcl_wait_set_add_service+0x4a>
 8010e06:	b538      	push	{r3, r4, r5, lr}
 8010e08:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010e0a:	4604      	mov	r4, r0
 8010e0c:	b30b      	cbz	r3, 8010e52 <rcl_wait_set_add_service+0x4e>
 8010e0e:	b319      	cbz	r1, 8010e58 <rcl_wait_set_add_service+0x54>
 8010e10:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8010e12:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8010e14:	4285      	cmp	r5, r0
 8010e16:	d217      	bcs.n	8010e48 <rcl_wait_set_add_service+0x44>
 8010e18:	1c68      	adds	r0, r5, #1
 8010e1a:	6258      	str	r0, [r3, #36]	; 0x24
 8010e1c:	6a23      	ldr	r3, [r4, #32]
 8010e1e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8010e22:	b102      	cbz	r2, 8010e26 <rcl_wait_set_add_service+0x22>
 8010e24:	6015      	str	r5, [r2, #0]
 8010e26:	4608      	mov	r0, r1
 8010e28:	f7fe fff4 	bl	800fe14 <rcl_service_get_rmw_handle>
 8010e2c:	b150      	cbz	r0, 8010e44 <rcl_wait_set_add_service+0x40>
 8010e2e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010e30:	6842      	ldr	r2, [r0, #4]
 8010e32:	2000      	movs	r0, #0
 8010e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010e3a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010e3c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8010e3e:	3301      	adds	r3, #1
 8010e40:	6293      	str	r3, [r2, #40]	; 0x28
 8010e42:	bd38      	pop	{r3, r4, r5, pc}
 8010e44:	2001      	movs	r0, #1
 8010e46:	bd38      	pop	{r3, r4, r5, pc}
 8010e48:	f240 3086 	movw	r0, #902	; 0x386
 8010e4c:	bd38      	pop	{r3, r4, r5, pc}
 8010e4e:	200b      	movs	r0, #11
 8010e50:	4770      	bx	lr
 8010e52:	f44f 7061 	mov.w	r0, #900	; 0x384
 8010e56:	bd38      	pop	{r3, r4, r5, pc}
 8010e58:	200b      	movs	r0, #11
 8010e5a:	bd38      	pop	{r3, r4, r5, pc}
 8010e5c:	0000      	movs	r0, r0
	...

08010e60 <rcl_wait>:
 8010e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e64:	ed2d 8b02 	vpush	{d8}
 8010e68:	b08d      	sub	sp, #52	; 0x34
 8010e6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010e6e:	2800      	cmp	r0, #0
 8010e70:	f000 814f 	beq.w	8011112 <rcl_wait+0x2b2>
 8010e74:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8010e76:	4605      	mov	r5, r0
 8010e78:	2e00      	cmp	r6, #0
 8010e7a:	f000 811a 	beq.w	80110b2 <rcl_wait+0x252>
 8010e7e:	6843      	ldr	r3, [r0, #4]
 8010e80:	b983      	cbnz	r3, 8010ea4 <rcl_wait+0x44>
 8010e82:	68eb      	ldr	r3, [r5, #12]
 8010e84:	b973      	cbnz	r3, 8010ea4 <rcl_wait+0x44>
 8010e86:	696b      	ldr	r3, [r5, #20]
 8010e88:	b963      	cbnz	r3, 8010ea4 <rcl_wait+0x44>
 8010e8a:	69eb      	ldr	r3, [r5, #28]
 8010e8c:	b953      	cbnz	r3, 8010ea4 <rcl_wait+0x44>
 8010e8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010e90:	b943      	cbnz	r3, 8010ea4 <rcl_wait+0x44>
 8010e92:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8010e94:	b933      	cbnz	r3, 8010ea4 <rcl_wait+0x44>
 8010e96:	f240 3085 	movw	r0, #901	; 0x385
 8010e9a:	b00d      	add	sp, #52	; 0x34
 8010e9c:	ecbd 8b02 	vpop	{d8}
 8010ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ea4:	9b04      	ldr	r3, [sp, #16]
 8010ea6:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8010ea8:	2b01      	cmp	r3, #1
 8010eaa:	9b05      	ldr	r3, [sp, #20]
 8010eac:	f173 0300 	sbcs.w	r3, r3, #0
 8010eb0:	f2c0 80f8 	blt.w	80110a4 <rcl_wait+0x244>
 8010eb4:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8010eb8:	2a00      	cmp	r2, #0
 8010eba:	f000 810f 	beq.w	80110dc <rcl_wait+0x27c>
 8010ebe:	2400      	movs	r4, #0
 8010ec0:	4613      	mov	r3, r2
 8010ec2:	f240 3921 	movw	r9, #801	; 0x321
 8010ec6:	4632      	mov	r2, r6
 8010ec8:	46a2      	mov	sl, r4
 8010eca:	46a3      	mov	fp, r4
 8010ecc:	ed9f 8b98 	vldr	d8, [pc, #608]	; 8011130 <rcl_wait+0x2d0>
 8010ed0:	e014      	b.n	8010efc <rcl_wait+0x9c>
 8010ed2:	2800      	cmp	r0, #0
 8010ed4:	d1e1      	bne.n	8010e9a <rcl_wait+0x3a>
 8010ed6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010eda:	4542      	cmp	r2, r8
 8010edc:	eb73 0107 	sbcs.w	r1, r3, r7
 8010ee0:	da03      	bge.n	8010eea <rcl_wait+0x8a>
 8010ee2:	4690      	mov	r8, r2
 8010ee4:	461f      	mov	r7, r3
 8010ee6:	f04f 0b01 	mov.w	fp, #1
 8010eea:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8010eec:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8010eee:	3401      	adds	r4, #1
 8010ef0:	f14a 0a00 	adc.w	sl, sl, #0
 8010ef4:	429c      	cmp	r4, r3
 8010ef6:	f17a 0100 	sbcs.w	r1, sl, #0
 8010efa:	d228      	bcs.n	8010f4e <rcl_wait+0xee>
 8010efc:	6928      	ldr	r0, [r5, #16]
 8010efe:	a908      	add	r1, sp, #32
 8010f00:	00a6      	lsls	r6, r4, #2
 8010f02:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8010f06:	2800      	cmp	r0, #0
 8010f08:	d0f1      	beq.n	8010eee <rcl_wait+0x8e>
 8010f0a:	68eb      	ldr	r3, [r5, #12]
 8010f0c:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8010f10:	4423      	add	r3, r4
 8010f12:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8010f16:	f1be 0f00 	cmp.w	lr, #0
 8010f1a:	d006      	beq.n	8010f2a <rcl_wait+0xca>
 8010f1c:	6913      	ldr	r3, [r2, #16]
 8010f1e:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8010f22:	3301      	adds	r3, #1
 8010f24:	6113      	str	r3, [r2, #16]
 8010f26:	692b      	ldr	r3, [r5, #16]
 8010f28:	5998      	ldr	r0, [r3, r6]
 8010f2a:	ed8d 8b08 	vstr	d8, [sp, #32]
 8010f2e:	f7ff fa89 	bl	8010444 <rcl_timer_get_time_until_next_call>
 8010f32:	4548      	cmp	r0, r9
 8010f34:	d1cd      	bne.n	8010ed2 <rcl_wait+0x72>
 8010f36:	692b      	ldr	r3, [r5, #16]
 8010f38:	2200      	movs	r2, #0
 8010f3a:	3401      	adds	r4, #1
 8010f3c:	519a      	str	r2, [r3, r6]
 8010f3e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8010f40:	f14a 0a00 	adc.w	sl, sl, #0
 8010f44:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8010f46:	429c      	cmp	r4, r3
 8010f48:	f17a 0100 	sbcs.w	r1, sl, #0
 8010f4c:	d3d6      	bcc.n	8010efc <rcl_wait+0x9c>
 8010f4e:	4659      	mov	r1, fp
 8010f50:	4616      	mov	r6, r2
 8010f52:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8010f56:	4313      	orrs	r3, r2
 8010f58:	f040 80b4 	bne.w	80110c4 <rcl_wait+0x264>
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	2200      	movs	r2, #0
 8010f60:	460c      	mov	r4, r1
 8010f62:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010f66:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8010f6a:	ab08      	add	r3, sp, #32
 8010f6c:	9302      	str	r3, [sp, #8]
 8010f6e:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8010f72:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8010f74:	f106 0110 	add.w	r1, r6, #16
 8010f78:	9300      	str	r3, [sp, #0]
 8010f7a:	1d30      	adds	r0, r6, #4
 8010f7c:	f106 031c 	add.w	r3, r6, #28
 8010f80:	9201      	str	r2, [sp, #4]
 8010f82:	f106 0228 	add.w	r2, r6, #40	; 0x28
 8010f86:	f002 faaf 	bl	80134e8 <rmw_wait>
 8010f8a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010f8c:	4680      	mov	r8, r0
 8010f8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010f90:	b1e2      	cbz	r2, 8010fcc <rcl_wait+0x16c>
 8010f92:	f04f 0900 	mov.w	r9, #0
 8010f96:	464f      	mov	r7, r9
 8010f98:	692a      	ldr	r2, [r5, #16]
 8010f9a:	f10d 011f 	add.w	r1, sp, #31
 8010f9e:	ea4f 0689 	mov.w	r6, r9, lsl #2
 8010fa2:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 8010fa6:	b160      	cbz	r0, 8010fc2 <rcl_wait+0x162>
 8010fa8:	f88d 701f 	strb.w	r7, [sp, #31]
 8010fac:	f7ff fa0e 	bl	80103cc <rcl_timer_is_ready>
 8010fb0:	2800      	cmp	r0, #0
 8010fb2:	f47f af72 	bne.w	8010e9a <rcl_wait+0x3a>
 8010fb6:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8010fba:	b90b      	cbnz	r3, 8010fc0 <rcl_wait+0x160>
 8010fbc:	692a      	ldr	r2, [r5, #16]
 8010fbe:	5193      	str	r3, [r2, r6]
 8010fc0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010fc2:	f109 0901 	add.w	r9, r9, #1
 8010fc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010fc8:	454a      	cmp	r2, r9
 8010fca:	d8e5      	bhi.n	8010f98 <rcl_wait+0x138>
 8010fcc:	f038 0002 	bics.w	r0, r8, #2
 8010fd0:	d176      	bne.n	80110c0 <rcl_wait+0x260>
 8010fd2:	686f      	ldr	r7, [r5, #4]
 8010fd4:	b17f      	cbz	r7, 8010ff6 <rcl_wait+0x196>
 8010fd6:	4602      	mov	r2, r0
 8010fd8:	e002      	b.n	8010fe0 <rcl_wait+0x180>
 8010fda:	3201      	adds	r2, #1
 8010fdc:	42ba      	cmp	r2, r7
 8010fde:	d00a      	beq.n	8010ff6 <rcl_wait+0x196>
 8010fe0:	6899      	ldr	r1, [r3, #8]
 8010fe2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8010fe6:	2900      	cmp	r1, #0
 8010fe8:	d1f7      	bne.n	8010fda <rcl_wait+0x17a>
 8010fea:	682e      	ldr	r6, [r5, #0]
 8010fec:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8010ff0:	3201      	adds	r2, #1
 8010ff2:	42ba      	cmp	r2, r7
 8010ff4:	d1f4      	bne.n	8010fe0 <rcl_wait+0x180>
 8010ff6:	68ef      	ldr	r7, [r5, #12]
 8010ff8:	b17f      	cbz	r7, 801101a <rcl_wait+0x1ba>
 8010ffa:	2200      	movs	r2, #0
 8010ffc:	e002      	b.n	8011004 <rcl_wait+0x1a4>
 8010ffe:	3201      	adds	r2, #1
 8011000:	42ba      	cmp	r2, r7
 8011002:	d00a      	beq.n	801101a <rcl_wait+0x1ba>
 8011004:	6959      	ldr	r1, [r3, #20]
 8011006:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801100a:	2900      	cmp	r1, #0
 801100c:	d1f7      	bne.n	8010ffe <rcl_wait+0x19e>
 801100e:	68ae      	ldr	r6, [r5, #8]
 8011010:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8011014:	3201      	adds	r2, #1
 8011016:	42ba      	cmp	r2, r7
 8011018:	d1f4      	bne.n	8011004 <rcl_wait+0x1a4>
 801101a:	69ef      	ldr	r7, [r5, #28]
 801101c:	b17f      	cbz	r7, 801103e <rcl_wait+0x1de>
 801101e:	2200      	movs	r2, #0
 8011020:	e002      	b.n	8011028 <rcl_wait+0x1c8>
 8011022:	3201      	adds	r2, #1
 8011024:	42ba      	cmp	r2, r7
 8011026:	d00a      	beq.n	801103e <rcl_wait+0x1de>
 8011028:	6a19      	ldr	r1, [r3, #32]
 801102a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801102e:	2900      	cmp	r1, #0
 8011030:	d1f7      	bne.n	8011022 <rcl_wait+0x1c2>
 8011032:	69ae      	ldr	r6, [r5, #24]
 8011034:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8011038:	3201      	adds	r2, #1
 801103a:	42ba      	cmp	r2, r7
 801103c:	d1f4      	bne.n	8011028 <rcl_wait+0x1c8>
 801103e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8011040:	b17f      	cbz	r7, 8011062 <rcl_wait+0x202>
 8011042:	2200      	movs	r2, #0
 8011044:	e002      	b.n	801104c <rcl_wait+0x1ec>
 8011046:	3201      	adds	r2, #1
 8011048:	42ba      	cmp	r2, r7
 801104a:	d00a      	beq.n	8011062 <rcl_wait+0x202>
 801104c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801104e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011052:	2900      	cmp	r1, #0
 8011054:	d1f7      	bne.n	8011046 <rcl_wait+0x1e6>
 8011056:	6a2e      	ldr	r6, [r5, #32]
 8011058:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801105c:	3201      	adds	r2, #1
 801105e:	42ba      	cmp	r2, r7
 8011060:	d1f4      	bne.n	801104c <rcl_wait+0x1ec>
 8011062:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 8011064:	b17f      	cbz	r7, 8011086 <rcl_wait+0x226>
 8011066:	2200      	movs	r2, #0
 8011068:	e002      	b.n	8011070 <rcl_wait+0x210>
 801106a:	3201      	adds	r2, #1
 801106c:	42ba      	cmp	r2, r7
 801106e:	d00a      	beq.n	8011086 <rcl_wait+0x226>
 8011070:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8011072:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011076:	2900      	cmp	r1, #0
 8011078:	d1f7      	bne.n	801106a <rcl_wait+0x20a>
 801107a:	6aae      	ldr	r6, [r5, #40]	; 0x28
 801107c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8011080:	3201      	adds	r2, #1
 8011082:	42ba      	cmp	r2, r7
 8011084:	d1f4      	bne.n	8011070 <rcl_wait+0x210>
 8011086:	f1b8 0f02 	cmp.w	r8, #2
 801108a:	f47f af06 	bne.w	8010e9a <rcl_wait+0x3a>
 801108e:	f084 0301 	eor.w	r3, r4, #1
 8011092:	b2db      	uxtb	r3, r3
 8011094:	2b00      	cmp	r3, #0
 8011096:	bf18      	it	ne
 8011098:	2002      	movne	r0, #2
 801109a:	b00d      	add	sp, #52	; 0x34
 801109c:	ecbd 8b02 	vpop	{d8}
 80110a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110a4:	2a00      	cmp	r2, #0
 80110a6:	d03a      	beq.n	801111e <rcl_wait+0x2be>
 80110a8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80110ac:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 80110b0:	e705      	b.n	8010ebe <rcl_wait+0x5e>
 80110b2:	f44f 7061 	mov.w	r0, #900	; 0x384
 80110b6:	b00d      	add	sp, #52	; 0x34
 80110b8:	ecbd 8b02 	vpop	{d8}
 80110bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110c0:	2001      	movs	r0, #1
 80110c2:	e6ea      	b.n	8010e9a <rcl_wait+0x3a>
 80110c4:	9b04      	ldr	r3, [sp, #16]
 80110c6:	460c      	mov	r4, r1
 80110c8:	2b01      	cmp	r3, #1
 80110ca:	9b05      	ldr	r3, [sp, #20]
 80110cc:	f173 0300 	sbcs.w	r3, r3, #0
 80110d0:	bfa8      	it	ge
 80110d2:	f044 0401 	orrge.w	r4, r4, #1
 80110d6:	b914      	cbnz	r4, 80110de <rcl_wait+0x27e>
 80110d8:	4623      	mov	r3, r4
 80110da:	e747      	b.n	8010f6c <rcl_wait+0x10c>
 80110dc:	4611      	mov	r1, r2
 80110de:	2f00      	cmp	r7, #0
 80110e0:	da02      	bge.n	80110e8 <rcl_wait+0x288>
 80110e2:	f04f 0800 	mov.w	r8, #0
 80110e6:	4647      	mov	r7, r8
 80110e8:	460c      	mov	r4, r1
 80110ea:	4640      	mov	r0, r8
 80110ec:	4639      	mov	r1, r7
 80110ee:	a312      	add	r3, pc, #72	; (adr r3, 8011138 <rcl_wait+0x2d8>)
 80110f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110f4:	f7ef f90c 	bl	8000310 <__aeabi_ldivmod>
 80110f8:	a30f      	add	r3, pc, #60	; (adr r3, 8011138 <rcl_wait+0x2d8>)
 80110fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011102:	4640      	mov	r0, r8
 8011104:	4639      	mov	r1, r7
 8011106:	f7ef f903 	bl	8000310 <__aeabi_ldivmod>
 801110a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801110e:	ab08      	add	r3, sp, #32
 8011110:	e72c      	b.n	8010f6c <rcl_wait+0x10c>
 8011112:	200b      	movs	r0, #11
 8011114:	b00d      	add	sp, #52	; 0x34
 8011116:	ecbd 8b02 	vpop	{d8}
 801111a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801111e:	4611      	mov	r1, r2
 8011120:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8011124:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8011128:	e713      	b.n	8010f52 <rcl_wait+0xf2>
 801112a:	bf00      	nop
 801112c:	f3af 8000 	nop.w
 8011130:	ffffffff 	.word	0xffffffff
 8011134:	7fffffff 	.word	0x7fffffff
 8011138:	3b9aca00 	.word	0x3b9aca00
 801113c:	00000000 	.word	0x00000000

08011140 <rcl_action_take_goal_response>:
 8011140:	2800      	cmp	r0, #0
 8011142:	d039      	beq.n	80111b8 <rcl_action_take_goal_response+0x78>
 8011144:	b570      	push	{r4, r5, r6, lr}
 8011146:	4604      	mov	r4, r0
 8011148:	6800      	ldr	r0, [r0, #0]
 801114a:	b380      	cbz	r0, 80111ae <rcl_action_take_goal_response+0x6e>
 801114c:	460e      	mov	r6, r1
 801114e:	4615      	mov	r5, r2
 8011150:	f7fd ff3e 	bl	800efd0 <rcl_client_is_valid>
 8011154:	b330      	cbz	r0, 80111a4 <rcl_action_take_goal_response+0x64>
 8011156:	6820      	ldr	r0, [r4, #0]
 8011158:	3004      	adds	r0, #4
 801115a:	f7fd ff39 	bl	800efd0 <rcl_client_is_valid>
 801115e:	b308      	cbz	r0, 80111a4 <rcl_action_take_goal_response+0x64>
 8011160:	6820      	ldr	r0, [r4, #0]
 8011162:	3008      	adds	r0, #8
 8011164:	f7fd ff34 	bl	800efd0 <rcl_client_is_valid>
 8011168:	b1e0      	cbz	r0, 80111a4 <rcl_action_take_goal_response+0x64>
 801116a:	6820      	ldr	r0, [r4, #0]
 801116c:	300c      	adds	r0, #12
 801116e:	f7fe ffdb 	bl	8010128 <rcl_subscription_is_valid>
 8011172:	b1b8      	cbz	r0, 80111a4 <rcl_action_take_goal_response+0x64>
 8011174:	6820      	ldr	r0, [r4, #0]
 8011176:	3010      	adds	r0, #16
 8011178:	f7fe ffd6 	bl	8010128 <rcl_subscription_is_valid>
 801117c:	b190      	cbz	r0, 80111a4 <rcl_action_take_goal_response+0x64>
 801117e:	b1cd      	cbz	r5, 80111b4 <rcl_action_take_goal_response+0x74>
 8011180:	b1c6      	cbz	r6, 80111b4 <rcl_action_take_goal_response+0x74>
 8011182:	462a      	mov	r2, r5
 8011184:	4631      	mov	r1, r6
 8011186:	6820      	ldr	r0, [r4, #0]
 8011188:	f7fd feba 	bl	800ef00 <rcl_take_response>
 801118c:	b148      	cbz	r0, 80111a2 <rcl_action_take_goal_response+0x62>
 801118e:	280a      	cmp	r0, #10
 8011190:	d007      	beq.n	80111a2 <rcl_action_take_goal_response+0x62>
 8011192:	f240 12f5 	movw	r2, #501	; 0x1f5
 8011196:	f640 0337 	movw	r3, #2103	; 0x837
 801119a:	4290      	cmp	r0, r2
 801119c:	bf0c      	ite	eq
 801119e:	4618      	moveq	r0, r3
 80111a0:	2001      	movne	r0, #1
 80111a2:	bd70      	pop	{r4, r5, r6, pc}
 80111a4:	f7fa ffdc 	bl	800c160 <rcutils_reset_error>
 80111a8:	f640 0036 	movw	r0, #2102	; 0x836
 80111ac:	bd70      	pop	{r4, r5, r6, pc}
 80111ae:	f640 0036 	movw	r0, #2102	; 0x836
 80111b2:	bd70      	pop	{r4, r5, r6, pc}
 80111b4:	200b      	movs	r0, #11
 80111b6:	bd70      	pop	{r4, r5, r6, pc}
 80111b8:	f640 0036 	movw	r0, #2102	; 0x836
 80111bc:	4770      	bx	lr
 80111be:	bf00      	nop

080111c0 <rcl_action_send_result_request>:
 80111c0:	b390      	cbz	r0, 8011228 <rcl_action_send_result_request+0x68>
 80111c2:	b570      	push	{r4, r5, r6, lr}
 80111c4:	4604      	mov	r4, r0
 80111c6:	6800      	ldr	r0, [r0, #0]
 80111c8:	b348      	cbz	r0, 801121e <rcl_action_send_result_request+0x5e>
 80111ca:	460e      	mov	r6, r1
 80111cc:	4615      	mov	r5, r2
 80111ce:	f7fd feff 	bl	800efd0 <rcl_client_is_valid>
 80111d2:	b1f8      	cbz	r0, 8011214 <rcl_action_send_result_request+0x54>
 80111d4:	6820      	ldr	r0, [r4, #0]
 80111d6:	3004      	adds	r0, #4
 80111d8:	f7fd fefa 	bl	800efd0 <rcl_client_is_valid>
 80111dc:	b1d0      	cbz	r0, 8011214 <rcl_action_send_result_request+0x54>
 80111de:	6820      	ldr	r0, [r4, #0]
 80111e0:	3008      	adds	r0, #8
 80111e2:	f7fd fef5 	bl	800efd0 <rcl_client_is_valid>
 80111e6:	b1a8      	cbz	r0, 8011214 <rcl_action_send_result_request+0x54>
 80111e8:	6820      	ldr	r0, [r4, #0]
 80111ea:	300c      	adds	r0, #12
 80111ec:	f7fe ff9c 	bl	8010128 <rcl_subscription_is_valid>
 80111f0:	b180      	cbz	r0, 8011214 <rcl_action_send_result_request+0x54>
 80111f2:	6820      	ldr	r0, [r4, #0]
 80111f4:	3010      	adds	r0, #16
 80111f6:	f7fe ff97 	bl	8010128 <rcl_subscription_is_valid>
 80111fa:	b158      	cbz	r0, 8011214 <rcl_action_send_result_request+0x54>
 80111fc:	b195      	cbz	r5, 8011224 <rcl_action_send_result_request+0x64>
 80111fe:	b18e      	cbz	r6, 8011224 <rcl_action_send_result_request+0x64>
 8011200:	6820      	ldr	r0, [r4, #0]
 8011202:	462a      	mov	r2, r5
 8011204:	4631      	mov	r1, r6
 8011206:	3008      	adds	r0, #8
 8011208:	f7fd fe26 	bl	800ee58 <rcl_send_request>
 801120c:	3800      	subs	r0, #0
 801120e:	bf18      	it	ne
 8011210:	2001      	movne	r0, #1
 8011212:	bd70      	pop	{r4, r5, r6, pc}
 8011214:	f7fa ffa4 	bl	800c160 <rcutils_reset_error>
 8011218:	f640 0036 	movw	r0, #2102	; 0x836
 801121c:	bd70      	pop	{r4, r5, r6, pc}
 801121e:	f640 0036 	movw	r0, #2102	; 0x836
 8011222:	bd70      	pop	{r4, r5, r6, pc}
 8011224:	200b      	movs	r0, #11
 8011226:	bd70      	pop	{r4, r5, r6, pc}
 8011228:	f640 0036 	movw	r0, #2102	; 0x836
 801122c:	4770      	bx	lr
 801122e:	bf00      	nop

08011230 <rcl_action_take_result_response>:
 8011230:	2800      	cmp	r0, #0
 8011232:	d03a      	beq.n	80112aa <rcl_action_take_result_response+0x7a>
 8011234:	b570      	push	{r4, r5, r6, lr}
 8011236:	4604      	mov	r4, r0
 8011238:	6800      	ldr	r0, [r0, #0]
 801123a:	b388      	cbz	r0, 80112a0 <rcl_action_take_result_response+0x70>
 801123c:	460e      	mov	r6, r1
 801123e:	4615      	mov	r5, r2
 8011240:	f7fd fec6 	bl	800efd0 <rcl_client_is_valid>
 8011244:	b338      	cbz	r0, 8011296 <rcl_action_take_result_response+0x66>
 8011246:	6820      	ldr	r0, [r4, #0]
 8011248:	3004      	adds	r0, #4
 801124a:	f7fd fec1 	bl	800efd0 <rcl_client_is_valid>
 801124e:	b310      	cbz	r0, 8011296 <rcl_action_take_result_response+0x66>
 8011250:	6820      	ldr	r0, [r4, #0]
 8011252:	3008      	adds	r0, #8
 8011254:	f7fd febc 	bl	800efd0 <rcl_client_is_valid>
 8011258:	b1e8      	cbz	r0, 8011296 <rcl_action_take_result_response+0x66>
 801125a:	6820      	ldr	r0, [r4, #0]
 801125c:	300c      	adds	r0, #12
 801125e:	f7fe ff63 	bl	8010128 <rcl_subscription_is_valid>
 8011262:	b1c0      	cbz	r0, 8011296 <rcl_action_take_result_response+0x66>
 8011264:	6820      	ldr	r0, [r4, #0]
 8011266:	3010      	adds	r0, #16
 8011268:	f7fe ff5e 	bl	8010128 <rcl_subscription_is_valid>
 801126c:	b198      	cbz	r0, 8011296 <rcl_action_take_result_response+0x66>
 801126e:	b1d5      	cbz	r5, 80112a6 <rcl_action_take_result_response+0x76>
 8011270:	b1ce      	cbz	r6, 80112a6 <rcl_action_take_result_response+0x76>
 8011272:	6820      	ldr	r0, [r4, #0]
 8011274:	462a      	mov	r2, r5
 8011276:	4631      	mov	r1, r6
 8011278:	3008      	adds	r0, #8
 801127a:	f7fd fe41 	bl	800ef00 <rcl_take_response>
 801127e:	b148      	cbz	r0, 8011294 <rcl_action_take_result_response+0x64>
 8011280:	280a      	cmp	r0, #10
 8011282:	d007      	beq.n	8011294 <rcl_action_take_result_response+0x64>
 8011284:	f240 12f5 	movw	r2, #501	; 0x1f5
 8011288:	f640 0337 	movw	r3, #2103	; 0x837
 801128c:	4290      	cmp	r0, r2
 801128e:	bf0c      	ite	eq
 8011290:	4618      	moveq	r0, r3
 8011292:	2001      	movne	r0, #1
 8011294:	bd70      	pop	{r4, r5, r6, pc}
 8011296:	f7fa ff63 	bl	800c160 <rcutils_reset_error>
 801129a:	f640 0036 	movw	r0, #2102	; 0x836
 801129e:	bd70      	pop	{r4, r5, r6, pc}
 80112a0:	f640 0036 	movw	r0, #2102	; 0x836
 80112a4:	bd70      	pop	{r4, r5, r6, pc}
 80112a6:	200b      	movs	r0, #11
 80112a8:	bd70      	pop	{r4, r5, r6, pc}
 80112aa:	f640 0036 	movw	r0, #2102	; 0x836
 80112ae:	4770      	bx	lr

080112b0 <rcl_action_take_cancel_response>:
 80112b0:	2800      	cmp	r0, #0
 80112b2:	d03a      	beq.n	801132a <rcl_action_take_cancel_response+0x7a>
 80112b4:	b570      	push	{r4, r5, r6, lr}
 80112b6:	4604      	mov	r4, r0
 80112b8:	6800      	ldr	r0, [r0, #0]
 80112ba:	b388      	cbz	r0, 8011320 <rcl_action_take_cancel_response+0x70>
 80112bc:	460e      	mov	r6, r1
 80112be:	4615      	mov	r5, r2
 80112c0:	f7fd fe86 	bl	800efd0 <rcl_client_is_valid>
 80112c4:	b338      	cbz	r0, 8011316 <rcl_action_take_cancel_response+0x66>
 80112c6:	6820      	ldr	r0, [r4, #0]
 80112c8:	3004      	adds	r0, #4
 80112ca:	f7fd fe81 	bl	800efd0 <rcl_client_is_valid>
 80112ce:	b310      	cbz	r0, 8011316 <rcl_action_take_cancel_response+0x66>
 80112d0:	6820      	ldr	r0, [r4, #0]
 80112d2:	3008      	adds	r0, #8
 80112d4:	f7fd fe7c 	bl	800efd0 <rcl_client_is_valid>
 80112d8:	b1e8      	cbz	r0, 8011316 <rcl_action_take_cancel_response+0x66>
 80112da:	6820      	ldr	r0, [r4, #0]
 80112dc:	300c      	adds	r0, #12
 80112de:	f7fe ff23 	bl	8010128 <rcl_subscription_is_valid>
 80112e2:	b1c0      	cbz	r0, 8011316 <rcl_action_take_cancel_response+0x66>
 80112e4:	6820      	ldr	r0, [r4, #0]
 80112e6:	3010      	adds	r0, #16
 80112e8:	f7fe ff1e 	bl	8010128 <rcl_subscription_is_valid>
 80112ec:	b198      	cbz	r0, 8011316 <rcl_action_take_cancel_response+0x66>
 80112ee:	b1d5      	cbz	r5, 8011326 <rcl_action_take_cancel_response+0x76>
 80112f0:	b1ce      	cbz	r6, 8011326 <rcl_action_take_cancel_response+0x76>
 80112f2:	6820      	ldr	r0, [r4, #0]
 80112f4:	462a      	mov	r2, r5
 80112f6:	4631      	mov	r1, r6
 80112f8:	3004      	adds	r0, #4
 80112fa:	f7fd fe01 	bl	800ef00 <rcl_take_response>
 80112fe:	b148      	cbz	r0, 8011314 <rcl_action_take_cancel_response+0x64>
 8011300:	280a      	cmp	r0, #10
 8011302:	d007      	beq.n	8011314 <rcl_action_take_cancel_response+0x64>
 8011304:	f240 12f5 	movw	r2, #501	; 0x1f5
 8011308:	f640 0337 	movw	r3, #2103	; 0x837
 801130c:	4290      	cmp	r0, r2
 801130e:	bf0c      	ite	eq
 8011310:	4618      	moveq	r0, r3
 8011312:	2001      	movne	r0, #1
 8011314:	bd70      	pop	{r4, r5, r6, pc}
 8011316:	f7fa ff23 	bl	800c160 <rcutils_reset_error>
 801131a:	f640 0036 	movw	r0, #2102	; 0x836
 801131e:	bd70      	pop	{r4, r5, r6, pc}
 8011320:	f640 0036 	movw	r0, #2102	; 0x836
 8011324:	bd70      	pop	{r4, r5, r6, pc}
 8011326:	200b      	movs	r0, #11
 8011328:	bd70      	pop	{r4, r5, r6, pc}
 801132a:	f640 0036 	movw	r0, #2102	; 0x836
 801132e:	4770      	bx	lr

08011330 <rcl_action_take_feedback>:
 8011330:	2800      	cmp	r0, #0
 8011332:	d038      	beq.n	80113a6 <rcl_action_take_feedback+0x76>
 8011334:	b530      	push	{r4, r5, lr}
 8011336:	4604      	mov	r4, r0
 8011338:	6800      	ldr	r0, [r0, #0]
 801133a:	b08f      	sub	sp, #60	; 0x3c
 801133c:	b378      	cbz	r0, 801139e <rcl_action_take_feedback+0x6e>
 801133e:	460d      	mov	r5, r1
 8011340:	f7fd fe46 	bl	800efd0 <rcl_client_is_valid>
 8011344:	b328      	cbz	r0, 8011392 <rcl_action_take_feedback+0x62>
 8011346:	6820      	ldr	r0, [r4, #0]
 8011348:	3004      	adds	r0, #4
 801134a:	f7fd fe41 	bl	800efd0 <rcl_client_is_valid>
 801134e:	b300      	cbz	r0, 8011392 <rcl_action_take_feedback+0x62>
 8011350:	6820      	ldr	r0, [r4, #0]
 8011352:	3008      	adds	r0, #8
 8011354:	f7fd fe3c 	bl	800efd0 <rcl_client_is_valid>
 8011358:	b1d8      	cbz	r0, 8011392 <rcl_action_take_feedback+0x62>
 801135a:	6820      	ldr	r0, [r4, #0]
 801135c:	300c      	adds	r0, #12
 801135e:	f7fe fee3 	bl	8010128 <rcl_subscription_is_valid>
 8011362:	b1b0      	cbz	r0, 8011392 <rcl_action_take_feedback+0x62>
 8011364:	6820      	ldr	r0, [r4, #0]
 8011366:	3010      	adds	r0, #16
 8011368:	f7fe fede 	bl	8010128 <rcl_subscription_is_valid>
 801136c:	b188      	cbz	r0, 8011392 <rcl_action_take_feedback+0x62>
 801136e:	b1ed      	cbz	r5, 80113ac <rcl_action_take_feedback+0x7c>
 8011370:	6820      	ldr	r0, [r4, #0]
 8011372:	2300      	movs	r3, #0
 8011374:	466a      	mov	r2, sp
 8011376:	4629      	mov	r1, r5
 8011378:	300c      	adds	r0, #12
 801137a:	f7fe fe79 	bl	8010070 <rcl_take>
 801137e:	b160      	cbz	r0, 801139a <rcl_action_take_feedback+0x6a>
 8011380:	f240 1391 	movw	r3, #401	; 0x191
 8011384:	4298      	cmp	r0, r3
 8011386:	d014      	beq.n	80113b2 <rcl_action_take_feedback+0x82>
 8011388:	280a      	cmp	r0, #10
 801138a:	bf18      	it	ne
 801138c:	2001      	movne	r0, #1
 801138e:	b00f      	add	sp, #60	; 0x3c
 8011390:	bd30      	pop	{r4, r5, pc}
 8011392:	f7fa fee5 	bl	800c160 <rcutils_reset_error>
 8011396:	f640 0036 	movw	r0, #2102	; 0x836
 801139a:	b00f      	add	sp, #60	; 0x3c
 801139c:	bd30      	pop	{r4, r5, pc}
 801139e:	f640 0036 	movw	r0, #2102	; 0x836
 80113a2:	b00f      	add	sp, #60	; 0x3c
 80113a4:	bd30      	pop	{r4, r5, pc}
 80113a6:	f640 0036 	movw	r0, #2102	; 0x836
 80113aa:	4770      	bx	lr
 80113ac:	200b      	movs	r0, #11
 80113ae:	b00f      	add	sp, #60	; 0x3c
 80113b0:	bd30      	pop	{r4, r5, pc}
 80113b2:	f640 0037 	movw	r0, #2103	; 0x837
 80113b6:	e7f0      	b.n	801139a <rcl_action_take_feedback+0x6a>

080113b8 <rcl_action_wait_set_add_action_client>:
 80113b8:	2800      	cmp	r0, #0
 80113ba:	d048      	beq.n	801144e <rcl_action_wait_set_add_action_client+0x96>
 80113bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113be:	460c      	mov	r4, r1
 80113c0:	2900      	cmp	r1, #0
 80113c2:	d03c      	beq.n	801143e <rcl_action_wait_set_add_action_client+0x86>
 80113c4:	4605      	mov	r5, r0
 80113c6:	6808      	ldr	r0, [r1, #0]
 80113c8:	2800      	cmp	r0, #0
 80113ca:	d038      	beq.n	801143e <rcl_action_wait_set_add_action_client+0x86>
 80113cc:	4617      	mov	r7, r2
 80113ce:	461e      	mov	r6, r3
 80113d0:	f7fd fdfe 	bl	800efd0 <rcl_client_is_valid>
 80113d4:	b3b0      	cbz	r0, 8011444 <rcl_action_wait_set_add_action_client+0x8c>
 80113d6:	6820      	ldr	r0, [r4, #0]
 80113d8:	3004      	adds	r0, #4
 80113da:	f7fd fdf9 	bl	800efd0 <rcl_client_is_valid>
 80113de:	b388      	cbz	r0, 8011444 <rcl_action_wait_set_add_action_client+0x8c>
 80113e0:	6820      	ldr	r0, [r4, #0]
 80113e2:	3008      	adds	r0, #8
 80113e4:	f7fd fdf4 	bl	800efd0 <rcl_client_is_valid>
 80113e8:	b360      	cbz	r0, 8011444 <rcl_action_wait_set_add_action_client+0x8c>
 80113ea:	6820      	ldr	r0, [r4, #0]
 80113ec:	300c      	adds	r0, #12
 80113ee:	f7fe fe9b 	bl	8010128 <rcl_subscription_is_valid>
 80113f2:	b338      	cbz	r0, 8011444 <rcl_action_wait_set_add_action_client+0x8c>
 80113f4:	6820      	ldr	r0, [r4, #0]
 80113f6:	3010      	adds	r0, #16
 80113f8:	f7fe fe96 	bl	8010128 <rcl_subscription_is_valid>
 80113fc:	b310      	cbz	r0, 8011444 <rcl_action_wait_set_add_action_client+0x8c>
 80113fe:	6821      	ldr	r1, [r4, #0]
 8011400:	4628      	mov	r0, r5
 8011402:	f501 72e2 	add.w	r2, r1, #452	; 0x1c4
 8011406:	f7ff fcd1 	bl	8010dac <rcl_wait_set_add_client>
 801140a:	b9b8      	cbnz	r0, 801143c <rcl_action_wait_set_add_action_client+0x84>
 801140c:	6821      	ldr	r1, [r4, #0]
 801140e:	4628      	mov	r0, r5
 8011410:	f501 72e4 	add.w	r2, r1, #456	; 0x1c8
 8011414:	3104      	adds	r1, #4
 8011416:	f7ff fcc9 	bl	8010dac <rcl_wait_set_add_client>
 801141a:	b978      	cbnz	r0, 801143c <rcl_action_wait_set_add_action_client+0x84>
 801141c:	6821      	ldr	r1, [r4, #0]
 801141e:	4628      	mov	r0, r5
 8011420:	f501 72e6 	add.w	r2, r1, #460	; 0x1cc
 8011424:	3108      	adds	r1, #8
 8011426:	f7ff fcc1 	bl	8010dac <rcl_wait_set_add_client>
 801142a:	b938      	cbnz	r0, 801143c <rcl_action_wait_set_add_action_client+0x84>
 801142c:	6821      	ldr	r1, [r4, #0]
 801142e:	4628      	mov	r0, r5
 8011430:	f501 72e8 	add.w	r2, r1, #464	; 0x1d0
 8011434:	310c      	adds	r1, #12
 8011436:	f7ff f969 	bl	801070c <rcl_wait_set_add_subscription>
 801143a:	b158      	cbz	r0, 8011454 <rcl_action_wait_set_add_action_client+0x9c>
 801143c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801143e:	f640 0036 	movw	r0, #2102	; 0x836
 8011442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011444:	f7fa fe8c 	bl	800c160 <rcutils_reset_error>
 8011448:	f640 0036 	movw	r0, #2102	; 0x836
 801144c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801144e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8011452:	4770      	bx	lr
 8011454:	6821      	ldr	r1, [r4, #0]
 8011456:	4628      	mov	r0, r5
 8011458:	f501 72ea 	add.w	r2, r1, #468	; 0x1d4
 801145c:	3110      	adds	r1, #16
 801145e:	f7ff f955 	bl	801070c <rcl_wait_set_add_subscription>
 8011462:	2800      	cmp	r0, #0
 8011464:	d1ea      	bne.n	801143c <rcl_action_wait_set_add_action_client+0x84>
 8011466:	b11f      	cbz	r7, 8011470 <rcl_action_wait_set_add_action_client+0xb8>
 8011468:	6823      	ldr	r3, [r4, #0]
 801146a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 801146e:	603b      	str	r3, [r7, #0]
 8011470:	2e00      	cmp	r6, #0
 8011472:	d0e3      	beq.n	801143c <rcl_action_wait_set_add_action_client+0x84>
 8011474:	6823      	ldr	r3, [r4, #0]
 8011476:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 801147a:	6033      	str	r3, [r6, #0]
 801147c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801147e:	bf00      	nop

08011480 <rcl_action_client_wait_set_get_entities_ready>:
 8011480:	2800      	cmp	r0, #0
 8011482:	d050      	beq.n	8011526 <rcl_action_client_wait_set_get_entities_ready+0xa6>
 8011484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011488:	460c      	mov	r4, r1
 801148a:	2900      	cmp	r1, #0
 801148c:	d03e      	beq.n	801150c <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801148e:	4605      	mov	r5, r0
 8011490:	6808      	ldr	r0, [r1, #0]
 8011492:	2800      	cmp	r0, #0
 8011494:	d03a      	beq.n	801150c <rcl_action_client_wait_set_get_entities_ready+0x8c>
 8011496:	4616      	mov	r6, r2
 8011498:	461f      	mov	r7, r3
 801149a:	f7fd fd99 	bl	800efd0 <rcl_client_is_valid>
 801149e:	2800      	cmp	r0, #0
 80114a0:	d038      	beq.n	8011514 <rcl_action_client_wait_set_get_entities_ready+0x94>
 80114a2:	6820      	ldr	r0, [r4, #0]
 80114a4:	3004      	adds	r0, #4
 80114a6:	f7fd fd93 	bl	800efd0 <rcl_client_is_valid>
 80114aa:	2800      	cmp	r0, #0
 80114ac:	d032      	beq.n	8011514 <rcl_action_client_wait_set_get_entities_ready+0x94>
 80114ae:	6820      	ldr	r0, [r4, #0]
 80114b0:	3008      	adds	r0, #8
 80114b2:	f7fd fd8d 	bl	800efd0 <rcl_client_is_valid>
 80114b6:	b368      	cbz	r0, 8011514 <rcl_action_client_wait_set_get_entities_ready+0x94>
 80114b8:	6820      	ldr	r0, [r4, #0]
 80114ba:	300c      	adds	r0, #12
 80114bc:	f7fe fe34 	bl	8010128 <rcl_subscription_is_valid>
 80114c0:	b340      	cbz	r0, 8011514 <rcl_action_client_wait_set_get_entities_ready+0x94>
 80114c2:	6820      	ldr	r0, [r4, #0]
 80114c4:	3010      	adds	r0, #16
 80114c6:	f7fe fe2f 	bl	8010128 <rcl_subscription_is_valid>
 80114ca:	b318      	cbz	r0, 8011514 <rcl_action_client_wait_set_get_entities_ready+0x94>
 80114cc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80114d0:	2a00      	cmp	r2, #0
 80114d2:	bf18      	it	ne
 80114d4:	2b00      	cmpne	r3, #0
 80114d6:	9b08      	ldr	r3, [sp, #32]
 80114d8:	bf0c      	ite	eq
 80114da:	2101      	moveq	r1, #1
 80114dc:	2100      	movne	r1, #0
 80114de:	2b00      	cmp	r3, #0
 80114e0:	bf08      	it	eq
 80114e2:	f041 0101 	orreq.w	r1, r1, #1
 80114e6:	2f00      	cmp	r7, #0
 80114e8:	bf08      	it	eq
 80114ea:	f041 0101 	orreq.w	r1, r1, #1
 80114ee:	b9b9      	cbnz	r1, 8011520 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 80114f0:	b1b6      	cbz	r6, 8011520 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 80114f2:	6823      	ldr	r3, [r4, #0]
 80114f4:	686c      	ldr	r4, [r5, #4]
 80114f6:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	; 0x1d0
 80114fa:	428a      	cmp	r2, r1
 80114fc:	4610      	mov	r0, r2
 80114fe:	bf38      	it	cc
 8011500:	4608      	movcc	r0, r1
 8011502:	4284      	cmp	r4, r0
 8011504:	d812      	bhi.n	801152c <rcl_action_client_wait_set_get_entities_ready+0xac>
 8011506:	2001      	movs	r0, #1
 8011508:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801150c:	f640 0036 	movw	r0, #2102	; 0x836
 8011510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011514:	f7fa fe24 	bl	800c160 <rcutils_reset_error>
 8011518:	f640 0036 	movw	r0, #2102	; 0x836
 801151c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011520:	200b      	movs	r0, #11
 8011522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011526:	f44f 7061 	mov.w	r0, #900	; 0x384
 801152a:	4770      	bx	lr
 801152c:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	; 0x1c4
 8011530:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	; 0x1cc
 8011534:	45f0      	cmp	r8, lr
 8011536:	4640      	mov	r0, r8
 8011538:	69ec      	ldr	r4, [r5, #28]
 801153a:	bf38      	it	cc
 801153c:	4670      	movcc	r0, lr
 801153e:	4560      	cmp	r0, ip
 8011540:	bf38      	it	cc
 8011542:	4660      	movcc	r0, ip
 8011544:	4284      	cmp	r4, r0
 8011546:	d9de      	bls.n	8011506 <rcl_action_client_wait_set_get_entities_ready+0x86>
 8011548:	f8d5 9018 	ldr.w	r9, [r5, #24]
 801154c:	682d      	ldr	r5, [r5, #0]
 801154e:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 8011552:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 8011556:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801155a:	1a18      	subs	r0, r3, r0
 801155c:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 8011560:	f103 0c0c 	add.w	ip, r3, #12
 8011564:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 8011568:	fab0 f080 	clz	r0, r0
 801156c:	eba5 050c 	sub.w	r5, r5, ip
 8011570:	0940      	lsrs	r0, r0, #5
 8011572:	fab5 f585 	clz	r5, r5
 8011576:	096d      	lsrs	r5, r5, #5
 8011578:	7035      	strb	r5, [r6, #0]
 801157a:	f103 0510 	add.w	r5, r3, #16
 801157e:	1b64      	subs	r4, r4, r5
 8011580:	9d08      	ldr	r5, [sp, #32]
 8011582:	fab4 f484 	clz	r4, r4
 8011586:	0964      	lsrs	r4, r4, #5
 8011588:	703c      	strb	r4, [r7, #0]
 801158a:	1d1c      	adds	r4, r3, #4
 801158c:	3308      	adds	r3, #8
 801158e:	7028      	strb	r0, [r5, #0]
 8011590:	1b09      	subs	r1, r1, r4
 8011592:	2000      	movs	r0, #0
 8011594:	1ad3      	subs	r3, r2, r3
 8011596:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011598:	fab1 f181 	clz	r1, r1
 801159c:	fab3 f383 	clz	r3, r3
 80115a0:	0949      	lsrs	r1, r1, #5
 80115a2:	095b      	lsrs	r3, r3, #5
 80115a4:	7011      	strb	r1, [r2, #0]
 80115a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80115a8:	7013      	strb	r3, [r2, #0]
 80115aa:	e7b1      	b.n	8011510 <rcl_action_client_wait_set_get_entities_ready+0x90>

080115ac <rcl_action_take_goal_request>:
 80115ac:	2800      	cmp	r0, #0
 80115ae:	d039      	beq.n	8011624 <rcl_action_take_goal_request+0x78>
 80115b0:	b570      	push	{r4, r5, r6, lr}
 80115b2:	4604      	mov	r4, r0
 80115b4:	6800      	ldr	r0, [r0, #0]
 80115b6:	b380      	cbz	r0, 801161a <rcl_action_take_goal_request+0x6e>
 80115b8:	460e      	mov	r6, r1
 80115ba:	4615      	mov	r5, r2
 80115bc:	f7fe fcb0 	bl	800ff20 <rcl_service_is_valid>
 80115c0:	b330      	cbz	r0, 8011610 <rcl_action_take_goal_request+0x64>
 80115c2:	6820      	ldr	r0, [r4, #0]
 80115c4:	3004      	adds	r0, #4
 80115c6:	f7fe fcab 	bl	800ff20 <rcl_service_is_valid>
 80115ca:	b308      	cbz	r0, 8011610 <rcl_action_take_goal_request+0x64>
 80115cc:	6820      	ldr	r0, [r4, #0]
 80115ce:	3008      	adds	r0, #8
 80115d0:	f7fe fca6 	bl	800ff20 <rcl_service_is_valid>
 80115d4:	b1e0      	cbz	r0, 8011610 <rcl_action_take_goal_request+0x64>
 80115d6:	6820      	ldr	r0, [r4, #0]
 80115d8:	300c      	adds	r0, #12
 80115da:	f006 fa1f 	bl	8017a1c <rcl_publisher_is_valid>
 80115de:	b1b8      	cbz	r0, 8011610 <rcl_action_take_goal_request+0x64>
 80115e0:	6820      	ldr	r0, [r4, #0]
 80115e2:	3010      	adds	r0, #16
 80115e4:	f006 fa1a 	bl	8017a1c <rcl_publisher_is_valid>
 80115e8:	b190      	cbz	r0, 8011610 <rcl_action_take_goal_request+0x64>
 80115ea:	b1cd      	cbz	r5, 8011620 <rcl_action_take_goal_request+0x74>
 80115ec:	b1c6      	cbz	r6, 8011620 <rcl_action_take_goal_request+0x74>
 80115ee:	462a      	mov	r2, r5
 80115f0:	4631      	mov	r1, r6
 80115f2:	6820      	ldr	r0, [r4, #0]
 80115f4:	f7fe fc14 	bl	800fe20 <rcl_take_request>
 80115f8:	b148      	cbz	r0, 801160e <rcl_action_take_goal_request+0x62>
 80115fa:	280a      	cmp	r0, #10
 80115fc:	d007      	beq.n	801160e <rcl_action_take_goal_request+0x62>
 80115fe:	f240 2259 	movw	r2, #601	; 0x259
 8011602:	f640 0399 	movw	r3, #2201	; 0x899
 8011606:	4290      	cmp	r0, r2
 8011608:	bf0c      	ite	eq
 801160a:	4618      	moveq	r0, r3
 801160c:	2001      	movne	r0, #1
 801160e:	bd70      	pop	{r4, r5, r6, pc}
 8011610:	f7fa fda6 	bl	800c160 <rcutils_reset_error>
 8011614:	f640 0098 	movw	r0, #2200	; 0x898
 8011618:	bd70      	pop	{r4, r5, r6, pc}
 801161a:	f640 0098 	movw	r0, #2200	; 0x898
 801161e:	bd70      	pop	{r4, r5, r6, pc}
 8011620:	200b      	movs	r0, #11
 8011622:	bd70      	pop	{r4, r5, r6, pc}
 8011624:	f640 0098 	movw	r0, #2200	; 0x898
 8011628:	4770      	bx	lr
 801162a:	bf00      	nop

0801162c <rcl_action_send_goal_response>:
 801162c:	b388      	cbz	r0, 8011692 <rcl_action_send_goal_response+0x66>
 801162e:	b570      	push	{r4, r5, r6, lr}
 8011630:	4604      	mov	r4, r0
 8011632:	6800      	ldr	r0, [r0, #0]
 8011634:	b340      	cbz	r0, 8011688 <rcl_action_send_goal_response+0x5c>
 8011636:	460e      	mov	r6, r1
 8011638:	4615      	mov	r5, r2
 801163a:	f7fe fc71 	bl	800ff20 <rcl_service_is_valid>
 801163e:	b1f0      	cbz	r0, 801167e <rcl_action_send_goal_response+0x52>
 8011640:	6820      	ldr	r0, [r4, #0]
 8011642:	3004      	adds	r0, #4
 8011644:	f7fe fc6c 	bl	800ff20 <rcl_service_is_valid>
 8011648:	b1c8      	cbz	r0, 801167e <rcl_action_send_goal_response+0x52>
 801164a:	6820      	ldr	r0, [r4, #0]
 801164c:	3008      	adds	r0, #8
 801164e:	f7fe fc67 	bl	800ff20 <rcl_service_is_valid>
 8011652:	b1a0      	cbz	r0, 801167e <rcl_action_send_goal_response+0x52>
 8011654:	6820      	ldr	r0, [r4, #0]
 8011656:	300c      	adds	r0, #12
 8011658:	f006 f9e0 	bl	8017a1c <rcl_publisher_is_valid>
 801165c:	b178      	cbz	r0, 801167e <rcl_action_send_goal_response+0x52>
 801165e:	6820      	ldr	r0, [r4, #0]
 8011660:	3010      	adds	r0, #16
 8011662:	f006 f9db 	bl	8017a1c <rcl_publisher_is_valid>
 8011666:	b150      	cbz	r0, 801167e <rcl_action_send_goal_response+0x52>
 8011668:	b18d      	cbz	r5, 801168e <rcl_action_send_goal_response+0x62>
 801166a:	b186      	cbz	r6, 801168e <rcl_action_send_goal_response+0x62>
 801166c:	462a      	mov	r2, r5
 801166e:	4631      	mov	r1, r6
 8011670:	6820      	ldr	r0, [r4, #0]
 8011672:	f7fe fc25 	bl	800fec0 <rcl_send_response>
 8011676:	3800      	subs	r0, #0
 8011678:	bf18      	it	ne
 801167a:	2001      	movne	r0, #1
 801167c:	bd70      	pop	{r4, r5, r6, pc}
 801167e:	f7fa fd6f 	bl	800c160 <rcutils_reset_error>
 8011682:	f640 0098 	movw	r0, #2200	; 0x898
 8011686:	bd70      	pop	{r4, r5, r6, pc}
 8011688:	f640 0098 	movw	r0, #2200	; 0x898
 801168c:	bd70      	pop	{r4, r5, r6, pc}
 801168e:	200b      	movs	r0, #11
 8011690:	bd70      	pop	{r4, r5, r6, pc}
 8011692:	f640 0098 	movw	r0, #2200	; 0x898
 8011696:	4770      	bx	lr

08011698 <rcl_action_take_result_request>:
 8011698:	2800      	cmp	r0, #0
 801169a:	d03a      	beq.n	8011712 <rcl_action_take_result_request+0x7a>
 801169c:	b570      	push	{r4, r5, r6, lr}
 801169e:	4604      	mov	r4, r0
 80116a0:	6800      	ldr	r0, [r0, #0]
 80116a2:	b388      	cbz	r0, 8011708 <rcl_action_take_result_request+0x70>
 80116a4:	460e      	mov	r6, r1
 80116a6:	4615      	mov	r5, r2
 80116a8:	f7fe fc3a 	bl	800ff20 <rcl_service_is_valid>
 80116ac:	b338      	cbz	r0, 80116fe <rcl_action_take_result_request+0x66>
 80116ae:	6820      	ldr	r0, [r4, #0]
 80116b0:	3004      	adds	r0, #4
 80116b2:	f7fe fc35 	bl	800ff20 <rcl_service_is_valid>
 80116b6:	b310      	cbz	r0, 80116fe <rcl_action_take_result_request+0x66>
 80116b8:	6820      	ldr	r0, [r4, #0]
 80116ba:	3008      	adds	r0, #8
 80116bc:	f7fe fc30 	bl	800ff20 <rcl_service_is_valid>
 80116c0:	b1e8      	cbz	r0, 80116fe <rcl_action_take_result_request+0x66>
 80116c2:	6820      	ldr	r0, [r4, #0]
 80116c4:	300c      	adds	r0, #12
 80116c6:	f006 f9a9 	bl	8017a1c <rcl_publisher_is_valid>
 80116ca:	b1c0      	cbz	r0, 80116fe <rcl_action_take_result_request+0x66>
 80116cc:	6820      	ldr	r0, [r4, #0]
 80116ce:	3010      	adds	r0, #16
 80116d0:	f006 f9a4 	bl	8017a1c <rcl_publisher_is_valid>
 80116d4:	b198      	cbz	r0, 80116fe <rcl_action_take_result_request+0x66>
 80116d6:	b1d5      	cbz	r5, 801170e <rcl_action_take_result_request+0x76>
 80116d8:	b1ce      	cbz	r6, 801170e <rcl_action_take_result_request+0x76>
 80116da:	6820      	ldr	r0, [r4, #0]
 80116dc:	462a      	mov	r2, r5
 80116de:	4631      	mov	r1, r6
 80116e0:	3008      	adds	r0, #8
 80116e2:	f7fe fb9d 	bl	800fe20 <rcl_take_request>
 80116e6:	b148      	cbz	r0, 80116fc <rcl_action_take_result_request+0x64>
 80116e8:	280a      	cmp	r0, #10
 80116ea:	d007      	beq.n	80116fc <rcl_action_take_result_request+0x64>
 80116ec:	f240 2259 	movw	r2, #601	; 0x259
 80116f0:	f640 0399 	movw	r3, #2201	; 0x899
 80116f4:	4290      	cmp	r0, r2
 80116f6:	bf0c      	ite	eq
 80116f8:	4618      	moveq	r0, r3
 80116fa:	2001      	movne	r0, #1
 80116fc:	bd70      	pop	{r4, r5, r6, pc}
 80116fe:	f7fa fd2f 	bl	800c160 <rcutils_reset_error>
 8011702:	f640 0098 	movw	r0, #2200	; 0x898
 8011706:	bd70      	pop	{r4, r5, r6, pc}
 8011708:	f640 0098 	movw	r0, #2200	; 0x898
 801170c:	bd70      	pop	{r4, r5, r6, pc}
 801170e:	200b      	movs	r0, #11
 8011710:	bd70      	pop	{r4, r5, r6, pc}
 8011712:	f640 0098 	movw	r0, #2200	; 0x898
 8011716:	4770      	bx	lr

08011718 <rcl_action_take_cancel_request>:
 8011718:	2800      	cmp	r0, #0
 801171a:	d03a      	beq.n	8011792 <rcl_action_take_cancel_request+0x7a>
 801171c:	b570      	push	{r4, r5, r6, lr}
 801171e:	4604      	mov	r4, r0
 8011720:	6800      	ldr	r0, [r0, #0]
 8011722:	b388      	cbz	r0, 8011788 <rcl_action_take_cancel_request+0x70>
 8011724:	460e      	mov	r6, r1
 8011726:	4615      	mov	r5, r2
 8011728:	f7fe fbfa 	bl	800ff20 <rcl_service_is_valid>
 801172c:	b338      	cbz	r0, 801177e <rcl_action_take_cancel_request+0x66>
 801172e:	6820      	ldr	r0, [r4, #0]
 8011730:	3004      	adds	r0, #4
 8011732:	f7fe fbf5 	bl	800ff20 <rcl_service_is_valid>
 8011736:	b310      	cbz	r0, 801177e <rcl_action_take_cancel_request+0x66>
 8011738:	6820      	ldr	r0, [r4, #0]
 801173a:	3008      	adds	r0, #8
 801173c:	f7fe fbf0 	bl	800ff20 <rcl_service_is_valid>
 8011740:	b1e8      	cbz	r0, 801177e <rcl_action_take_cancel_request+0x66>
 8011742:	6820      	ldr	r0, [r4, #0]
 8011744:	300c      	adds	r0, #12
 8011746:	f006 f969 	bl	8017a1c <rcl_publisher_is_valid>
 801174a:	b1c0      	cbz	r0, 801177e <rcl_action_take_cancel_request+0x66>
 801174c:	6820      	ldr	r0, [r4, #0]
 801174e:	3010      	adds	r0, #16
 8011750:	f006 f964 	bl	8017a1c <rcl_publisher_is_valid>
 8011754:	b198      	cbz	r0, 801177e <rcl_action_take_cancel_request+0x66>
 8011756:	b1d5      	cbz	r5, 801178e <rcl_action_take_cancel_request+0x76>
 8011758:	b1ce      	cbz	r6, 801178e <rcl_action_take_cancel_request+0x76>
 801175a:	6820      	ldr	r0, [r4, #0]
 801175c:	462a      	mov	r2, r5
 801175e:	4631      	mov	r1, r6
 8011760:	3004      	adds	r0, #4
 8011762:	f7fe fb5d 	bl	800fe20 <rcl_take_request>
 8011766:	b148      	cbz	r0, 801177c <rcl_action_take_cancel_request+0x64>
 8011768:	280a      	cmp	r0, #10
 801176a:	d007      	beq.n	801177c <rcl_action_take_cancel_request+0x64>
 801176c:	f240 2259 	movw	r2, #601	; 0x259
 8011770:	f640 0399 	movw	r3, #2201	; 0x899
 8011774:	4290      	cmp	r0, r2
 8011776:	bf0c      	ite	eq
 8011778:	4618      	moveq	r0, r3
 801177a:	2001      	movne	r0, #1
 801177c:	bd70      	pop	{r4, r5, r6, pc}
 801177e:	f7fa fcef 	bl	800c160 <rcutils_reset_error>
 8011782:	f640 0098 	movw	r0, #2200	; 0x898
 8011786:	bd70      	pop	{r4, r5, r6, pc}
 8011788:	f640 0098 	movw	r0, #2200	; 0x898
 801178c:	bd70      	pop	{r4, r5, r6, pc}
 801178e:	200b      	movs	r0, #11
 8011790:	bd70      	pop	{r4, r5, r6, pc}
 8011792:	f640 0098 	movw	r0, #2200	; 0x898
 8011796:	4770      	bx	lr

08011798 <rcl_action_send_cancel_response>:
 8011798:	b390      	cbz	r0, 8011800 <rcl_action_send_cancel_response+0x68>
 801179a:	b570      	push	{r4, r5, r6, lr}
 801179c:	4604      	mov	r4, r0
 801179e:	6800      	ldr	r0, [r0, #0]
 80117a0:	b348      	cbz	r0, 80117f6 <rcl_action_send_cancel_response+0x5e>
 80117a2:	460e      	mov	r6, r1
 80117a4:	4615      	mov	r5, r2
 80117a6:	f7fe fbbb 	bl	800ff20 <rcl_service_is_valid>
 80117aa:	b1f8      	cbz	r0, 80117ec <rcl_action_send_cancel_response+0x54>
 80117ac:	6820      	ldr	r0, [r4, #0]
 80117ae:	3004      	adds	r0, #4
 80117b0:	f7fe fbb6 	bl	800ff20 <rcl_service_is_valid>
 80117b4:	b1d0      	cbz	r0, 80117ec <rcl_action_send_cancel_response+0x54>
 80117b6:	6820      	ldr	r0, [r4, #0]
 80117b8:	3008      	adds	r0, #8
 80117ba:	f7fe fbb1 	bl	800ff20 <rcl_service_is_valid>
 80117be:	b1a8      	cbz	r0, 80117ec <rcl_action_send_cancel_response+0x54>
 80117c0:	6820      	ldr	r0, [r4, #0]
 80117c2:	300c      	adds	r0, #12
 80117c4:	f006 f92a 	bl	8017a1c <rcl_publisher_is_valid>
 80117c8:	b180      	cbz	r0, 80117ec <rcl_action_send_cancel_response+0x54>
 80117ca:	6820      	ldr	r0, [r4, #0]
 80117cc:	3010      	adds	r0, #16
 80117ce:	f006 f925 	bl	8017a1c <rcl_publisher_is_valid>
 80117d2:	b158      	cbz	r0, 80117ec <rcl_action_send_cancel_response+0x54>
 80117d4:	b195      	cbz	r5, 80117fc <rcl_action_send_cancel_response+0x64>
 80117d6:	b18e      	cbz	r6, 80117fc <rcl_action_send_cancel_response+0x64>
 80117d8:	6820      	ldr	r0, [r4, #0]
 80117da:	462a      	mov	r2, r5
 80117dc:	4631      	mov	r1, r6
 80117de:	3004      	adds	r0, #4
 80117e0:	f7fe fb6e 	bl	800fec0 <rcl_send_response>
 80117e4:	3800      	subs	r0, #0
 80117e6:	bf18      	it	ne
 80117e8:	2001      	movne	r0, #1
 80117ea:	bd70      	pop	{r4, r5, r6, pc}
 80117ec:	f7fa fcb8 	bl	800c160 <rcutils_reset_error>
 80117f0:	f640 0098 	movw	r0, #2200	; 0x898
 80117f4:	bd70      	pop	{r4, r5, r6, pc}
 80117f6:	f640 0098 	movw	r0, #2200	; 0x898
 80117fa:	bd70      	pop	{r4, r5, r6, pc}
 80117fc:	200b      	movs	r0, #11
 80117fe:	bd70      	pop	{r4, r5, r6, pc}
 8011800:	f640 0098 	movw	r0, #2200	; 0x898
 8011804:	4770      	bx	lr
 8011806:	bf00      	nop

08011808 <rcl_action_wait_set_add_action_server>:
 8011808:	2800      	cmp	r0, #0
 801180a:	d04d      	beq.n	80118a8 <rcl_action_wait_set_add_action_server+0xa0>
 801180c:	b570      	push	{r4, r5, r6, lr}
 801180e:	460c      	mov	r4, r1
 8011810:	b159      	cbz	r1, 801182a <rcl_action_wait_set_add_action_server+0x22>
 8011812:	4605      	mov	r5, r0
 8011814:	6808      	ldr	r0, [r1, #0]
 8011816:	b140      	cbz	r0, 801182a <rcl_action_wait_set_add_action_server+0x22>
 8011818:	4616      	mov	r6, r2
 801181a:	f7fe fb81 	bl	800ff20 <rcl_service_is_valid>
 801181e:	b120      	cbz	r0, 801182a <rcl_action_wait_set_add_action_server+0x22>
 8011820:	6820      	ldr	r0, [r4, #0]
 8011822:	3004      	adds	r0, #4
 8011824:	f7fe fb7c 	bl	800ff20 <rcl_service_is_valid>
 8011828:	b910      	cbnz	r0, 8011830 <rcl_action_wait_set_add_action_server+0x28>
 801182a:	f640 0098 	movw	r0, #2200	; 0x898
 801182e:	bd70      	pop	{r4, r5, r6, pc}
 8011830:	6820      	ldr	r0, [r4, #0]
 8011832:	3008      	adds	r0, #8
 8011834:	f7fe fb74 	bl	800ff20 <rcl_service_is_valid>
 8011838:	2800      	cmp	r0, #0
 801183a:	d0f6      	beq.n	801182a <rcl_action_wait_set_add_action_server+0x22>
 801183c:	6820      	ldr	r0, [r4, #0]
 801183e:	300c      	adds	r0, #12
 8011840:	f006 f904 	bl	8017a4c <rcl_publisher_is_valid_except_context>
 8011844:	2800      	cmp	r0, #0
 8011846:	d0f0      	beq.n	801182a <rcl_action_wait_set_add_action_server+0x22>
 8011848:	6820      	ldr	r0, [r4, #0]
 801184a:	3010      	adds	r0, #16
 801184c:	f006 f8fe 	bl	8017a4c <rcl_publisher_is_valid_except_context>
 8011850:	2800      	cmp	r0, #0
 8011852:	d0ea      	beq.n	801182a <rcl_action_wait_set_add_action_server+0x22>
 8011854:	6821      	ldr	r1, [r4, #0]
 8011856:	4628      	mov	r0, r5
 8011858:	f501 72ee 	add.w	r2, r1, #476	; 0x1dc
 801185c:	f7ff fad2 	bl	8010e04 <rcl_wait_set_add_service>
 8011860:	2800      	cmp	r0, #0
 8011862:	d1e4      	bne.n	801182e <rcl_action_wait_set_add_action_server+0x26>
 8011864:	6821      	ldr	r1, [r4, #0]
 8011866:	4628      	mov	r0, r5
 8011868:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
 801186c:	3104      	adds	r1, #4
 801186e:	f7ff fac9 	bl	8010e04 <rcl_wait_set_add_service>
 8011872:	2800      	cmp	r0, #0
 8011874:	d1db      	bne.n	801182e <rcl_action_wait_set_add_action_server+0x26>
 8011876:	6821      	ldr	r1, [r4, #0]
 8011878:	4628      	mov	r0, r5
 801187a:	f501 72f2 	add.w	r2, r1, #484	; 0x1e4
 801187e:	3108      	adds	r1, #8
 8011880:	f7ff fac0 	bl	8010e04 <rcl_wait_set_add_service>
 8011884:	2800      	cmp	r0, #0
 8011886:	d1d2      	bne.n	801182e <rcl_action_wait_set_add_action_server+0x26>
 8011888:	6821      	ldr	r1, [r4, #0]
 801188a:	4628      	mov	r0, r5
 801188c:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
 8011890:	3114      	adds	r1, #20
 8011892:	f7ff fa5b 	bl	8010d4c <rcl_wait_set_add_timer>
 8011896:	2800      	cmp	r0, #0
 8011898:	d1c9      	bne.n	801182e <rcl_action_wait_set_add_action_server+0x26>
 801189a:	2e00      	cmp	r6, #0
 801189c:	d0c7      	beq.n	801182e <rcl_action_wait_set_add_action_server+0x26>
 801189e:	6823      	ldr	r3, [r4, #0]
 80118a0:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 80118a4:	6033      	str	r3, [r6, #0]
 80118a6:	bd70      	pop	{r4, r5, r6, pc}
 80118a8:	f44f 7061 	mov.w	r0, #900	; 0x384
 80118ac:	4770      	bx	lr
 80118ae:	bf00      	nop

080118b0 <rcl_action_server_wait_set_get_entities_ready>:
 80118b0:	2800      	cmp	r0, #0
 80118b2:	d067      	beq.n	8011984 <rcl_action_server_wait_set_get_entities_ready+0xd4>
 80118b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118b8:	460c      	mov	r4, r1
 80118ba:	b161      	cbz	r1, 80118d6 <rcl_action_server_wait_set_get_entities_ready+0x26>
 80118bc:	4605      	mov	r5, r0
 80118be:	6808      	ldr	r0, [r1, #0]
 80118c0:	b148      	cbz	r0, 80118d6 <rcl_action_server_wait_set_get_entities_ready+0x26>
 80118c2:	4616      	mov	r6, r2
 80118c4:	4698      	mov	r8, r3
 80118c6:	f7fe fb2b 	bl	800ff20 <rcl_service_is_valid>
 80118ca:	b120      	cbz	r0, 80118d6 <rcl_action_server_wait_set_get_entities_ready+0x26>
 80118cc:	6820      	ldr	r0, [r4, #0]
 80118ce:	3004      	adds	r0, #4
 80118d0:	f7fe fb26 	bl	800ff20 <rcl_service_is_valid>
 80118d4:	b918      	cbnz	r0, 80118de <rcl_action_server_wait_set_get_entities_ready+0x2e>
 80118d6:	f640 0098 	movw	r0, #2200	; 0x898
 80118da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118de:	6820      	ldr	r0, [r4, #0]
 80118e0:	3008      	adds	r0, #8
 80118e2:	f7fe fb1d 	bl	800ff20 <rcl_service_is_valid>
 80118e6:	2800      	cmp	r0, #0
 80118e8:	d0f5      	beq.n	80118d6 <rcl_action_server_wait_set_get_entities_ready+0x26>
 80118ea:	6820      	ldr	r0, [r4, #0]
 80118ec:	300c      	adds	r0, #12
 80118ee:	f006 f8ad 	bl	8017a4c <rcl_publisher_is_valid_except_context>
 80118f2:	2800      	cmp	r0, #0
 80118f4:	d0ef      	beq.n	80118d6 <rcl_action_server_wait_set_get_entities_ready+0x26>
 80118f6:	6820      	ldr	r0, [r4, #0]
 80118f8:	3010      	adds	r0, #16
 80118fa:	f006 f8a7 	bl	8017a4c <rcl_publisher_is_valid_except_context>
 80118fe:	2800      	cmp	r0, #0
 8011900:	d0e9      	beq.n	80118d6 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8011902:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011906:	2a00      	cmp	r2, #0
 8011908:	bf18      	it	ne
 801190a:	2b00      	cmpne	r3, #0
 801190c:	bf0c      	ite	eq
 801190e:	2101      	moveq	r1, #1
 8011910:	2100      	movne	r1, #0
 8011912:	f1b8 0f00 	cmp.w	r8, #0
 8011916:	bf08      	it	eq
 8011918:	f041 0101 	orreq.w	r1, r1, #1
 801191c:	bba9      	cbnz	r1, 801198a <rcl_action_server_wait_set_get_entities_ready+0xda>
 801191e:	b3a6      	cbz	r6, 801198a <rcl_action_server_wait_set_get_entities_ready+0xda>
 8011920:	6821      	ldr	r1, [r4, #0]
 8011922:	2000      	movs	r0, #0
 8011924:	692c      	ldr	r4, [r5, #16]
 8011926:	f8d1 21e8 	ldr.w	r2, [r1, #488]	; 0x1e8
 801192a:	6a2f      	ldr	r7, [r5, #32]
 801192c:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011930:	f8d1 41dc 	ldr.w	r4, [r1, #476]	; 0x1dc
 8011934:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
 8011938:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 801193c:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 8011940:	1a64      	subs	r4, r4, r1
 8011942:	f8d1 31e4 	ldr.w	r3, [r1, #484]	; 0x1e4
 8011946:	fab4 f484 	clz	r4, r4
 801194a:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801194e:	0964      	lsrs	r4, r4, #5
 8011950:	7034      	strb	r4, [r6, #0]
 8011952:	1d0c      	adds	r4, r1, #4
 8011954:	1b2c      	subs	r4, r5, r4
 8011956:	fab4 f484 	clz	r4, r4
 801195a:	0964      	lsrs	r4, r4, #5
 801195c:	f888 4000 	strb.w	r4, [r8]
 8011960:	f101 0408 	add.w	r4, r1, #8
 8011964:	1b1b      	subs	r3, r3, r4
 8011966:	9c06      	ldr	r4, [sp, #24]
 8011968:	fab3 f383 	clz	r3, r3
 801196c:	095b      	lsrs	r3, r3, #5
 801196e:	7023      	strb	r3, [r4, #0]
 8011970:	f101 0314 	add.w	r3, r1, #20
 8011974:	1ad3      	subs	r3, r2, r3
 8011976:	9a07      	ldr	r2, [sp, #28]
 8011978:	fab3 f383 	clz	r3, r3
 801197c:	095b      	lsrs	r3, r3, #5
 801197e:	7013      	strb	r3, [r2, #0]
 8011980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011984:	f44f 7061 	mov.w	r0, #900	; 0x384
 8011988:	4770      	bx	lr
 801198a:	200b      	movs	r0, #11
 801198c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011990 <_execute_event_handler>:
 8011990:	2002      	movs	r0, #2
 8011992:	4770      	bx	lr

08011994 <_cancel_goal_event_handler>:
 8011994:	2003      	movs	r0, #3
 8011996:	4770      	bx	lr

08011998 <_succeed_event_handler>:
 8011998:	2004      	movs	r0, #4
 801199a:	4770      	bx	lr

0801199c <_abort_event_handler>:
 801199c:	2006      	movs	r0, #6
 801199e:	4770      	bx	lr

080119a0 <_canceled_event_handler>:
 80119a0:	2005      	movs	r0, #5
 80119a2:	4770      	bx	lr

080119a4 <rcl_action_transition_goal_state>:
 80119a4:	b2c2      	uxtb	r2, r0
 80119a6:	2a06      	cmp	r2, #6
 80119a8:	d810      	bhi.n	80119cc <rcl_action_transition_goal_state+0x28>
 80119aa:	2904      	cmp	r1, #4
 80119ac:	d80e      	bhi.n	80119cc <rcl_action_transition_goal_state+0x28>
 80119ae:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80119b2:	b410      	push	{r4}
 80119b4:	1853      	adds	r3, r2, r1
 80119b6:	4c06      	ldr	r4, [pc, #24]	; (80119d0 <rcl_action_transition_goal_state+0x2c>)
 80119b8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80119bc:	b113      	cbz	r3, 80119c4 <rcl_action_transition_goal_state+0x20>
 80119be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80119c2:	4718      	bx	r3
 80119c4:	2000      	movs	r0, #0
 80119c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80119ca:	4770      	bx	lr
 80119cc:	2000      	movs	r0, #0
 80119ce:	4770      	bx	lr
 80119d0:	0801b634 	.word	0x0801b634

080119d4 <rcl_action_get_zero_initialized_cancel_response>:
 80119d4:	b510      	push	{r4, lr}
 80119d6:	4c07      	ldr	r4, [pc, #28]	; (80119f4 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 80119d8:	4686      	mov	lr, r0
 80119da:	4684      	mov	ip, r0
 80119dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80119de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80119e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80119e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80119e8:	6823      	ldr	r3, [r4, #0]
 80119ea:	4670      	mov	r0, lr
 80119ec:	f8cc 3000 	str.w	r3, [ip]
 80119f0:	bd10      	pop	{r4, pc}
 80119f2:	bf00      	nop
 80119f4:	0801b6c0 	.word	0x0801b6c0

080119f8 <rclc_action_send_result_request>:
 80119f8:	b1d0      	cbz	r0, 8011a30 <rclc_action_send_result_request+0x38>
 80119fa:	4684      	mov	ip, r0
 80119fc:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8011a00:	b500      	push	{lr}
 8011a02:	b087      	sub	sp, #28
 8011a04:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8011a08:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8011a0c:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8011a10:	f10d 0e08 	add.w	lr, sp, #8
 8011a14:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011a18:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8011a1c:	f10c 0240 	add.w	r2, ip, #64	; 0x40
 8011a20:	a902      	add	r1, sp, #8
 8011a22:	3010      	adds	r0, #16
 8011a24:	f7ff fbcc 	bl	80111c0 <rcl_action_send_result_request>
 8011a28:	b920      	cbnz	r0, 8011a34 <rclc_action_send_result_request+0x3c>
 8011a2a:	b007      	add	sp, #28
 8011a2c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011a30:	200b      	movs	r0, #11
 8011a32:	4770      	bx	lr
 8011a34:	9001      	str	r0, [sp, #4]
 8011a36:	f7fa fb93 	bl	800c160 <rcutils_reset_error>
 8011a3a:	9801      	ldr	r0, [sp, #4]
 8011a3c:	b007      	add	sp, #28
 8011a3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011a42:	bf00      	nop

08011a44 <rclc_action_take_goal_handle>:
 8011a44:	b160      	cbz	r0, 8011a60 <rclc_action_take_goal_handle+0x1c>
 8011a46:	6883      	ldr	r3, [r0, #8]
 8011a48:	b143      	cbz	r3, 8011a5c <rclc_action_take_goal_handle+0x18>
 8011a4a:	6819      	ldr	r1, [r3, #0]
 8011a4c:	2200      	movs	r2, #0
 8011a4e:	6081      	str	r1, [r0, #8]
 8011a50:	721a      	strb	r2, [r3, #8]
 8011a52:	68c1      	ldr	r1, [r0, #12]
 8011a54:	621a      	str	r2, [r3, #32]
 8011a56:	849a      	strh	r2, [r3, #36]	; 0x24
 8011a58:	6019      	str	r1, [r3, #0]
 8011a5a:	60c3      	str	r3, [r0, #12]
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	4770      	bx	lr
 8011a60:	4603      	mov	r3, r0
 8011a62:	e7fb      	b.n	8011a5c <rclc_action_take_goal_handle+0x18>

08011a64 <rclc_action_remove_used_goal_handle>:
 8011a64:	b180      	cbz	r0, 8011a88 <rclc_action_remove_used_goal_handle+0x24>
 8011a66:	b179      	cbz	r1, 8011a88 <rclc_action_remove_used_goal_handle+0x24>
 8011a68:	68c3      	ldr	r3, [r0, #12]
 8011a6a:	4299      	cmp	r1, r3
 8011a6c:	d00d      	beq.n	8011a8a <rclc_action_remove_used_goal_handle+0x26>
 8011a6e:	b12b      	cbz	r3, 8011a7c <rclc_action_remove_used_goal_handle+0x18>
 8011a70:	681a      	ldr	r2, [r3, #0]
 8011a72:	4291      	cmp	r1, r2
 8011a74:	d003      	beq.n	8011a7e <rclc_action_remove_used_goal_handle+0x1a>
 8011a76:	4613      	mov	r3, r2
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d1f9      	bne.n	8011a70 <rclc_action_remove_used_goal_handle+0xc>
 8011a7c:	4770      	bx	lr
 8011a7e:	680a      	ldr	r2, [r1, #0]
 8011a80:	601a      	str	r2, [r3, #0]
 8011a82:	6883      	ldr	r3, [r0, #8]
 8011a84:	600b      	str	r3, [r1, #0]
 8011a86:	6081      	str	r1, [r0, #8]
 8011a88:	4770      	bx	lr
 8011a8a:	680b      	ldr	r3, [r1, #0]
 8011a8c:	60c3      	str	r3, [r0, #12]
 8011a8e:	e7f8      	b.n	8011a82 <rclc_action_remove_used_goal_handle+0x1e>

08011a90 <rclc_action_find_goal_handle_by_uuid>:
 8011a90:	b538      	push	{r3, r4, r5, lr}
 8011a92:	b181      	cbz	r1, 8011ab6 <rclc_action_find_goal_handle_by_uuid+0x26>
 8011a94:	b178      	cbz	r0, 8011ab6 <rclc_action_find_goal_handle_by_uuid+0x26>
 8011a96:	68c4      	ldr	r4, [r0, #12]
 8011a98:	460d      	mov	r5, r1
 8011a9a:	b914      	cbnz	r4, 8011aa2 <rclc_action_find_goal_handle_by_uuid+0x12>
 8011a9c:	e009      	b.n	8011ab2 <rclc_action_find_goal_handle_by_uuid+0x22>
 8011a9e:	6824      	ldr	r4, [r4, #0]
 8011aa0:	b13c      	cbz	r4, 8011ab2 <rclc_action_find_goal_handle_by_uuid+0x22>
 8011aa2:	f104 0009 	add.w	r0, r4, #9
 8011aa6:	2210      	movs	r2, #16
 8011aa8:	4629      	mov	r1, r5
 8011aaa:	f007 fd69 	bl	8019580 <memcmp>
 8011aae:	2800      	cmp	r0, #0
 8011ab0:	d1f5      	bne.n	8011a9e <rclc_action_find_goal_handle_by_uuid+0xe>
 8011ab2:	4620      	mov	r0, r4
 8011ab4:	bd38      	pop	{r3, r4, r5, pc}
 8011ab6:	2400      	movs	r4, #0
 8011ab8:	4620      	mov	r0, r4
 8011aba:	bd38      	pop	{r3, r4, r5, pc}

08011abc <rclc_action_find_first_handle_by_status>:
 8011abc:	b140      	cbz	r0, 8011ad0 <rclc_action_find_first_handle_by_status+0x14>
 8011abe:	68c0      	ldr	r0, [r0, #12]
 8011ac0:	b910      	cbnz	r0, 8011ac8 <rclc_action_find_first_handle_by_status+0xc>
 8011ac2:	e005      	b.n	8011ad0 <rclc_action_find_first_handle_by_status+0x14>
 8011ac4:	6800      	ldr	r0, [r0, #0]
 8011ac6:	b118      	cbz	r0, 8011ad0 <rclc_action_find_first_handle_by_status+0x14>
 8011ac8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8011acc:	428b      	cmp	r3, r1
 8011ace:	d1f9      	bne.n	8011ac4 <rclc_action_find_first_handle_by_status+0x8>
 8011ad0:	4770      	bx	lr
 8011ad2:	bf00      	nop

08011ad4 <rclc_action_find_first_terminated_handle>:
 8011ad4:	b140      	cbz	r0, 8011ae8 <rclc_action_find_first_terminated_handle+0x14>
 8011ad6:	68c0      	ldr	r0, [r0, #12]
 8011ad8:	b910      	cbnz	r0, 8011ae0 <rclc_action_find_first_terminated_handle+0xc>
 8011ada:	e005      	b.n	8011ae8 <rclc_action_find_first_terminated_handle+0x14>
 8011adc:	6800      	ldr	r0, [r0, #0]
 8011ade:	b118      	cbz	r0, 8011ae8 <rclc_action_find_first_terminated_handle+0x14>
 8011ae0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8011ae4:	2b03      	cmp	r3, #3
 8011ae6:	ddf9      	ble.n	8011adc <rclc_action_find_first_terminated_handle+0x8>
 8011ae8:	4770      	bx	lr
 8011aea:	bf00      	nop

08011aec <rclc_action_find_handle_by_goal_request_sequence_number>:
 8011aec:	b170      	cbz	r0, 8011b0c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8011aee:	68c0      	ldr	r0, [r0, #12]
 8011af0:	b160      	cbz	r0, 8011b0c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8011af2:	b410      	push	{r4}
 8011af4:	e001      	b.n	8011afa <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8011af6:	6800      	ldr	r0, [r0, #0]
 8011af8:	b128      	cbz	r0, 8011b06 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8011afa:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	; 0x28
 8011afe:	4299      	cmp	r1, r3
 8011b00:	bf08      	it	eq
 8011b02:	4294      	cmpeq	r4, r2
 8011b04:	d1f7      	bne.n	8011af6 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8011b06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b0a:	4770      	bx	lr
 8011b0c:	4770      	bx	lr
 8011b0e:	bf00      	nop

08011b10 <rclc_action_find_handle_by_result_request_sequence_number>:
 8011b10:	b170      	cbz	r0, 8011b30 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8011b12:	68c0      	ldr	r0, [r0, #12]
 8011b14:	b160      	cbz	r0, 8011b30 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8011b16:	b410      	push	{r4}
 8011b18:	e001      	b.n	8011b1e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8011b1a:	6800      	ldr	r0, [r0, #0]
 8011b1c:	b128      	cbz	r0, 8011b2a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8011b1e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	; 0x40
 8011b22:	4299      	cmp	r1, r3
 8011b24:	bf08      	it	eq
 8011b26:	4294      	cmpeq	r4, r2
 8011b28:	d1f7      	bne.n	8011b1a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8011b2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b2e:	4770      	bx	lr
 8011b30:	4770      	bx	lr
 8011b32:	bf00      	nop

08011b34 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8011b34:	b170      	cbz	r0, 8011b54 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8011b36:	68c0      	ldr	r0, [r0, #12]
 8011b38:	b160      	cbz	r0, 8011b54 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8011b3a:	b410      	push	{r4}
 8011b3c:	e001      	b.n	8011b42 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8011b3e:	6800      	ldr	r0, [r0, #0]
 8011b40:	b128      	cbz	r0, 8011b4e <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8011b42:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	; 0x58
 8011b46:	4299      	cmp	r1, r3
 8011b48:	bf08      	it	eq
 8011b4a:	4294      	cmpeq	r4, r2
 8011b4c:	d1f7      	bne.n	8011b3e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8011b4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b52:	4770      	bx	lr
 8011b54:	4770      	bx	lr
 8011b56:	bf00      	nop

08011b58 <rclc_action_find_first_handle_with_goal_response>:
 8011b58:	b140      	cbz	r0, 8011b6c <rclc_action_find_first_handle_with_goal_response+0x14>
 8011b5a:	68c0      	ldr	r0, [r0, #12]
 8011b5c:	b910      	cbnz	r0, 8011b64 <rclc_action_find_first_handle_with_goal_response+0xc>
 8011b5e:	e005      	b.n	8011b6c <rclc_action_find_first_handle_with_goal_response+0x14>
 8011b60:	6800      	ldr	r0, [r0, #0]
 8011b62:	b118      	cbz	r0, 8011b6c <rclc_action_find_first_handle_with_goal_response+0x14>
 8011b64:	f890 3020 	ldrb.w	r3, [r0, #32]
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d0f9      	beq.n	8011b60 <rclc_action_find_first_handle_with_goal_response+0x8>
 8011b6c:	4770      	bx	lr
 8011b6e:	bf00      	nop

08011b70 <rclc_action_find_first_handle_with_result_response>:
 8011b70:	b140      	cbz	r0, 8011b84 <rclc_action_find_first_handle_with_result_response+0x14>
 8011b72:	68c0      	ldr	r0, [r0, #12]
 8011b74:	b910      	cbnz	r0, 8011b7c <rclc_action_find_first_handle_with_result_response+0xc>
 8011b76:	e005      	b.n	8011b84 <rclc_action_find_first_handle_with_result_response+0x14>
 8011b78:	6800      	ldr	r0, [r0, #0]
 8011b7a:	b118      	cbz	r0, 8011b84 <rclc_action_find_first_handle_with_result_response+0x14>
 8011b7c:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d0f9      	beq.n	8011b78 <rclc_action_find_first_handle_with_result_response+0x8>
 8011b84:	4770      	bx	lr
 8011b86:	bf00      	nop

08011b88 <rclc_action_server_response_goal_request>:
 8011b88:	b198      	cbz	r0, 8011bb2 <rclc_action_server_response_goal_request+0x2a>
 8011b8a:	2200      	movs	r2, #0
 8011b8c:	460b      	mov	r3, r1
 8011b8e:	f100 0128 	add.w	r1, r0, #40	; 0x28
 8011b92:	b510      	push	{r4, lr}
 8011b94:	6844      	ldr	r4, [r0, #4]
 8011b96:	b086      	sub	sp, #24
 8011b98:	f104 0010 	add.w	r0, r4, #16
 8011b9c:	9205      	str	r2, [sp, #20]
 8011b9e:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8011ba2:	aa03      	add	r2, sp, #12
 8011ba4:	f88d 300c 	strb.w	r3, [sp, #12]
 8011ba8:	f7ff fd40 	bl	801162c <rcl_action_send_goal_response>
 8011bac:	b918      	cbnz	r0, 8011bb6 <rclc_action_server_response_goal_request+0x2e>
 8011bae:	b006      	add	sp, #24
 8011bb0:	bd10      	pop	{r4, pc}
 8011bb2:	200b      	movs	r0, #11
 8011bb4:	4770      	bx	lr
 8011bb6:	9001      	str	r0, [sp, #4]
 8011bb8:	f7fa fad2 	bl	800c160 <rcutils_reset_error>
 8011bbc:	9801      	ldr	r0, [sp, #4]
 8011bbe:	b006      	add	sp, #24
 8011bc0:	bd10      	pop	{r4, pc}
 8011bc2:	bf00      	nop
 8011bc4:	0000      	movs	r0, r0
	...

08011bc8 <rclc_action_server_goal_cancel_accept>:
 8011bc8:	b310      	cbz	r0, 8011c10 <rclc_action_server_goal_cancel_accept+0x48>
 8011bca:	b510      	push	{r4, lr}
 8011bcc:	b090      	sub	sp, #64	; 0x40
 8011bce:	4604      	mov	r4, r0
 8011bd0:	a806      	add	r0, sp, #24
 8011bd2:	f7ff feff 	bl	80119d4 <rcl_action_get_zero_initialized_cancel_response>
 8011bd6:	2300      	movs	r3, #0
 8011bd8:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8011bdc:	46ec      	mov	ip, sp
 8011bde:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8011be2:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8011be6:	f88d 3018 	strb.w	r3, [sp, #24]
 8011bea:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8011bee:	f8cd d01c 	str.w	sp, [sp, #28]
 8011bf2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011bf6:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8011c18 <rclc_action_server_goal_cancel_accept+0x50>
 8011bfa:	6860      	ldr	r0, [r4, #4]
 8011bfc:	aa06      	add	r2, sp, #24
 8011bfe:	f104 0158 	add.w	r1, r4, #88	; 0x58
 8011c02:	3010      	adds	r0, #16
 8011c04:	ed8d 7b08 	vstr	d7, [sp, #32]
 8011c08:	f7ff fdc6 	bl	8011798 <rcl_action_send_cancel_response>
 8011c0c:	b010      	add	sp, #64	; 0x40
 8011c0e:	bd10      	pop	{r4, pc}
 8011c10:	200b      	movs	r0, #11
 8011c12:	4770      	bx	lr
 8011c14:	f3af 8000 	nop.w
 8011c18:	00000001 	.word	0x00000001
 8011c1c:	00000001 	.word	0x00000001

08011c20 <rclc_action_server_goal_cancel_reject>:
 8011c20:	b082      	sub	sp, #8
 8011c22:	b530      	push	{r4, r5, lr}
 8011c24:	b08b      	sub	sp, #44	; 0x2c
 8011c26:	ac0e      	add	r4, sp, #56	; 0x38
 8011c28:	e884 000c 	stmia.w	r4, {r2, r3}
 8011c2c:	b188      	cbz	r0, 8011c52 <rclc_action_server_goal_cancel_reject+0x32>
 8011c2e:	4604      	mov	r4, r0
 8011c30:	a801      	add	r0, sp, #4
 8011c32:	460d      	mov	r5, r1
 8011c34:	f7ff fece 	bl	80119d4 <rcl_action_get_zero_initialized_cancel_response>
 8011c38:	aa01      	add	r2, sp, #4
 8011c3a:	a90e      	add	r1, sp, #56	; 0x38
 8011c3c:	f104 0010 	add.w	r0, r4, #16
 8011c40:	f88d 5004 	strb.w	r5, [sp, #4]
 8011c44:	f7ff fda8 	bl	8011798 <rcl_action_send_cancel_response>
 8011c48:	b00b      	add	sp, #44	; 0x2c
 8011c4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011c4e:	b002      	add	sp, #8
 8011c50:	4770      	bx	lr
 8011c52:	200b      	movs	r0, #11
 8011c54:	b00b      	add	sp, #44	; 0x2c
 8011c56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011c5a:	b002      	add	sp, #8
 8011c5c:	4770      	bx	lr
 8011c5e:	bf00      	nop

08011c60 <__atomic_load_8>:
 8011c60:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8011c64:	4a16      	ldr	r2, [pc, #88]	; (8011cc0 <__atomic_load_8+0x60>)
 8011c66:	4b17      	ldr	r3, [pc, #92]	; (8011cc4 <__atomic_load_8+0x64>)
 8011c68:	f04f 0c01 	mov.w	ip, #1
 8011c6c:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8011c70:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8011c74:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8011c78:	fb02 f101 	mul.w	r1, r2, r1
 8011c7c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8011c80:	fba3 2301 	umull	r2, r3, r3, r1
 8011c84:	091b      	lsrs	r3, r3, #4
 8011c86:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8011c8a:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8011c8e:	b4d0      	push	{r4, r6, r7}
 8011c90:	1ac9      	subs	r1, r1, r3
 8011c92:	4c0d      	ldr	r4, [pc, #52]	; (8011cc8 <__atomic_load_8+0x68>)
 8011c94:	1862      	adds	r2, r4, r1
 8011c96:	e8d2 3f4f 	ldrexb	r3, [r2]
 8011c9a:	e8c2 cf46 	strexb	r6, ip, [r2]
 8011c9e:	2e00      	cmp	r6, #0
 8011ca0:	d1f9      	bne.n	8011c96 <__atomic_load_8+0x36>
 8011ca2:	b2db      	uxtb	r3, r3
 8011ca4:	f3bf 8f5b 	dmb	ish
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d1f4      	bne.n	8011c96 <__atomic_load_8+0x36>
 8011cac:	e9d0 6700 	ldrd	r6, r7, [r0]
 8011cb0:	f3bf 8f5b 	dmb	ish
 8011cb4:	5463      	strb	r3, [r4, r1]
 8011cb6:	4630      	mov	r0, r6
 8011cb8:	4639      	mov	r1, r7
 8011cba:	bcd0      	pop	{r4, r6, r7}
 8011cbc:	4770      	bx	lr
 8011cbe:	bf00      	nop
 8011cc0:	27d4eb2d 	.word	0x27d4eb2d
 8011cc4:	b21642c9 	.word	0xb21642c9
 8011cc8:	2000bd90 	.word	0x2000bd90

08011ccc <__atomic_store_8>:
 8011ccc:	b570      	push	{r4, r5, r6, lr}
 8011cce:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 8011cd2:	4916      	ldr	r1, [pc, #88]	; (8011d2c <__atomic_store_8+0x60>)
 8011cd4:	4c16      	ldr	r4, [pc, #88]	; (8011d30 <__atomic_store_8+0x64>)
 8011cd6:	f08e 0e3d 	eor.w	lr, lr, #61	; 0x3d
 8011cda:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8011cde:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 8011ce2:	fb01 fe0e 	mul.w	lr, r1, lr
 8011ce6:	4913      	ldr	r1, [pc, #76]	; (8011d34 <__atomic_store_8+0x68>)
 8011ce8:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 8011cec:	fba1 510e 	umull	r5, r1, r1, lr
 8011cf0:	f04f 0501 	mov.w	r5, #1
 8011cf4:	0909      	lsrs	r1, r1, #4
 8011cf6:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 8011cfa:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 8011cfe:	ebae 0e01 	sub.w	lr, lr, r1
 8011d02:	eb04 0c0e 	add.w	ip, r4, lr
 8011d06:	e8dc 1f4f 	ldrexb	r1, [ip]
 8011d0a:	e8cc 5f46 	strexb	r6, r5, [ip]
 8011d0e:	2e00      	cmp	r6, #0
 8011d10:	d1f9      	bne.n	8011d06 <__atomic_store_8+0x3a>
 8011d12:	b2c9      	uxtb	r1, r1
 8011d14:	f3bf 8f5b 	dmb	ish
 8011d18:	2900      	cmp	r1, #0
 8011d1a:	d1f4      	bne.n	8011d06 <__atomic_store_8+0x3a>
 8011d1c:	e9c0 2300 	strd	r2, r3, [r0]
 8011d20:	f3bf 8f5b 	dmb	ish
 8011d24:	f804 100e 	strb.w	r1, [r4, lr]
 8011d28:	bd70      	pop	{r4, r5, r6, pc}
 8011d2a:	bf00      	nop
 8011d2c:	27d4eb2d 	.word	0x27d4eb2d
 8011d30:	2000bd90 	.word	0x2000bd90
 8011d34:	b21642c9 	.word	0xb21642c9

08011d38 <__atomic_exchange_8>:
 8011d38:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8011d3c:	4917      	ldr	r1, [pc, #92]	; (8011d9c <__atomic_exchange_8+0x64>)
 8011d3e:	f08c 0c3d 	eor.w	ip, ip, #61	; 0x3d
 8011d42:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8011d46:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8011d4a:	fb01 fc0c 	mul.w	ip, r1, ip
 8011d4e:	4914      	ldr	r1, [pc, #80]	; (8011da0 <__atomic_exchange_8+0x68>)
 8011d50:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8011d54:	b570      	push	{r4, r5, r6, lr}
 8011d56:	4686      	mov	lr, r0
 8011d58:	fba1 010c 	umull	r0, r1, r1, ip
 8011d5c:	4d11      	ldr	r5, [pc, #68]	; (8011da4 <__atomic_exchange_8+0x6c>)
 8011d5e:	f04f 0001 	mov.w	r0, #1
 8011d62:	0909      	lsrs	r1, r1, #4
 8011d64:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8011d68:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8011d6c:	ebac 0c01 	sub.w	ip, ip, r1
 8011d70:	eb05 010c 	add.w	r1, r5, ip
 8011d74:	e8d1 4f4f 	ldrexb	r4, [r1]
 8011d78:	e8c1 0f46 	strexb	r6, r0, [r1]
 8011d7c:	2e00      	cmp	r6, #0
 8011d7e:	d1f9      	bne.n	8011d74 <__atomic_exchange_8+0x3c>
 8011d80:	b2e4      	uxtb	r4, r4
 8011d82:	f3bf 8f5b 	dmb	ish
 8011d86:	2c00      	cmp	r4, #0
 8011d88:	d1f4      	bne.n	8011d74 <__atomic_exchange_8+0x3c>
 8011d8a:	e9de 0100 	ldrd	r0, r1, [lr]
 8011d8e:	e9ce 2300 	strd	r2, r3, [lr]
 8011d92:	f3bf 8f5b 	dmb	ish
 8011d96:	f805 400c 	strb.w	r4, [r5, ip]
 8011d9a:	bd70      	pop	{r4, r5, r6, pc}
 8011d9c:	27d4eb2d 	.word	0x27d4eb2d
 8011da0:	b21642c9 	.word	0xb21642c9
 8011da4:	2000bd90 	.word	0x2000bd90

08011da8 <rcutils_get_env>:
 8011da8:	b168      	cbz	r0, 8011dc6 <rcutils_get_env+0x1e>
 8011daa:	b510      	push	{r4, lr}
 8011dac:	460c      	mov	r4, r1
 8011dae:	b129      	cbz	r1, 8011dbc <rcutils_get_env+0x14>
 8011db0:	f007 f850 	bl	8018e54 <getenv>
 8011db4:	b120      	cbz	r0, 8011dc0 <rcutils_get_env+0x18>
 8011db6:	6020      	str	r0, [r4, #0]
 8011db8:	2000      	movs	r0, #0
 8011dba:	bd10      	pop	{r4, pc}
 8011dbc:	4803      	ldr	r0, [pc, #12]	; (8011dcc <rcutils_get_env+0x24>)
 8011dbe:	bd10      	pop	{r4, pc}
 8011dc0:	4b03      	ldr	r3, [pc, #12]	; (8011dd0 <rcutils_get_env+0x28>)
 8011dc2:	6023      	str	r3, [r4, #0]
 8011dc4:	bd10      	pop	{r4, pc}
 8011dc6:	4803      	ldr	r0, [pc, #12]	; (8011dd4 <rcutils_get_env+0x2c>)
 8011dc8:	4770      	bx	lr
 8011dca:	bf00      	nop
 8011dcc:	0801b700 	.word	0x0801b700
 8011dd0:	0801b824 	.word	0x0801b824
 8011dd4:	0801b6e4 	.word	0x0801b6e4

08011dd8 <rcutils_is_directory>:
 8011dd8:	2000      	movs	r0, #0
 8011dda:	4770      	bx	lr

08011ddc <rcutils_join_path>:
 8011ddc:	b082      	sub	sp, #8
 8011dde:	2000      	movs	r0, #0
 8011de0:	e88d 000c 	stmia.w	sp, {r2, r3}
 8011de4:	b002      	add	sp, #8
 8011de6:	4770      	bx	lr

08011de8 <rcutils_to_native_path>:
 8011de8:	b084      	sub	sp, #16
 8011dea:	2000      	movs	r0, #0
 8011dec:	f10d 0c04 	add.w	ip, sp, #4
 8011df0:	b004      	add	sp, #16
 8011df2:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8011df6:	4770      	bx	lr

08011df8 <rcutils_format_string_limit>:
 8011df8:	b40f      	push	{r0, r1, r2, r3}
 8011dfa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011dfc:	b083      	sub	sp, #12
 8011dfe:	ac08      	add	r4, sp, #32
 8011e00:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8011e02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8011e06:	b326      	cbz	r6, 8011e52 <rcutils_format_string_limit+0x5a>
 8011e08:	a808      	add	r0, sp, #32
 8011e0a:	f7fa f985 	bl	800c118 <rcutils_allocator_is_valid>
 8011e0e:	b300      	cbz	r0, 8011e52 <rcutils_format_string_limit+0x5a>
 8011e10:	2100      	movs	r1, #0
 8011e12:	ab0f      	add	r3, sp, #60	; 0x3c
 8011e14:	4632      	mov	r2, r6
 8011e16:	4608      	mov	r0, r1
 8011e18:	e9cd 3300 	strd	r3, r3, [sp]
 8011e1c:	f000 f906 	bl	801202c <rcutils_vsnprintf>
 8011e20:	1c43      	adds	r3, r0, #1
 8011e22:	4605      	mov	r5, r0
 8011e24:	d015      	beq.n	8011e52 <rcutils_format_string_limit+0x5a>
 8011e26:	1c47      	adds	r7, r0, #1
 8011e28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011e2a:	429f      	cmp	r7, r3
 8011e2c:	d901      	bls.n	8011e32 <rcutils_format_string_limit+0x3a>
 8011e2e:	1e5d      	subs	r5, r3, #1
 8011e30:	461f      	mov	r7, r3
 8011e32:	9b08      	ldr	r3, [sp, #32]
 8011e34:	4638      	mov	r0, r7
 8011e36:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011e38:	4798      	blx	r3
 8011e3a:	4604      	mov	r4, r0
 8011e3c:	b148      	cbz	r0, 8011e52 <rcutils_format_string_limit+0x5a>
 8011e3e:	4632      	mov	r2, r6
 8011e40:	4639      	mov	r1, r7
 8011e42:	9b01      	ldr	r3, [sp, #4]
 8011e44:	f000 f8f2 	bl	801202c <rcutils_vsnprintf>
 8011e48:	2800      	cmp	r0, #0
 8011e4a:	db09      	blt.n	8011e60 <rcutils_format_string_limit+0x68>
 8011e4c:	2300      	movs	r3, #0
 8011e4e:	5563      	strb	r3, [r4, r5]
 8011e50:	e000      	b.n	8011e54 <rcutils_format_string_limit+0x5c>
 8011e52:	2400      	movs	r4, #0
 8011e54:	4620      	mov	r0, r4
 8011e56:	b003      	add	sp, #12
 8011e58:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011e5c:	b004      	add	sp, #16
 8011e5e:	4770      	bx	lr
 8011e60:	4620      	mov	r0, r4
 8011e62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e64:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011e66:	2400      	movs	r4, #0
 8011e68:	4798      	blx	r3
 8011e6a:	e7f3      	b.n	8011e54 <rcutils_format_string_limit+0x5c>

08011e6c <rcutils_repl_str>:
 8011e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e70:	ed2d 8b02 	vpush	{d8}
 8011e74:	b087      	sub	sp, #28
 8011e76:	2600      	movs	r6, #0
 8011e78:	4680      	mov	r8, r0
 8011e7a:	468a      	mov	sl, r1
 8011e7c:	9000      	str	r0, [sp, #0]
 8011e7e:	4608      	mov	r0, r1
 8011e80:	ee08 2a10 	vmov	s16, r2
 8011e84:	4699      	mov	r9, r3
 8011e86:	2510      	movs	r5, #16
 8011e88:	f7ee fa3a 	bl	8000300 <strlen>
 8011e8c:	4637      	mov	r7, r6
 8011e8e:	46b3      	mov	fp, r6
 8011e90:	9001      	str	r0, [sp, #4]
 8011e92:	e01e      	b.n	8011ed2 <rcutils_repl_str+0x66>
 8011e94:	f10b 0b01 	add.w	fp, fp, #1
 8011e98:	9b01      	ldr	r3, [sp, #4]
 8011e9a:	455e      	cmp	r6, fp
 8011e9c:	eb04 0803 	add.w	r8, r4, r3
 8011ea0:	d211      	bcs.n	8011ec6 <rcutils_repl_str+0x5a>
 8011ea2:	442e      	add	r6, r5
 8011ea4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8011ea8:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8011eac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011eb0:	00b1      	lsls	r1, r6, #2
 8011eb2:	4798      	blx	r3
 8011eb4:	2800      	cmp	r0, #0
 8011eb6:	f000 8088 	beq.w	8011fca <rcutils_repl_str+0x15e>
 8011eba:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8011ebe:	4607      	mov	r7, r0
 8011ec0:	bf28      	it	cs
 8011ec2:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8011ec6:	9a00      	ldr	r2, [sp, #0]
 8011ec8:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 8011ecc:	1aa4      	subs	r4, r4, r2
 8011ece:	f843 4c04 	str.w	r4, [r3, #-4]
 8011ed2:	4651      	mov	r1, sl
 8011ed4:	4640      	mov	r0, r8
 8011ed6:	f007 fbb7 	bl	8019648 <strstr>
 8011eda:	4604      	mov	r4, r0
 8011edc:	4638      	mov	r0, r7
 8011ede:	2c00      	cmp	r4, #0
 8011ee0:	d1d8      	bne.n	8011e94 <rcutils_repl_str+0x28>
 8011ee2:	4640      	mov	r0, r8
 8011ee4:	f7ee fa0c 	bl	8000300 <strlen>
 8011ee8:	9b00      	ldr	r3, [sp, #0]
 8011eea:	eba8 0803 	sub.w	r8, r8, r3
 8011eee:	eb08 0400 	add.w	r4, r8, r0
 8011ef2:	9402      	str	r4, [sp, #8]
 8011ef4:	f1bb 0f00 	cmp.w	fp, #0
 8011ef8:	d045      	beq.n	8011f86 <rcutils_repl_str+0x11a>
 8011efa:	ee18 0a10 	vmov	r0, s16
 8011efe:	f7ee f9ff 	bl	8000300 <strlen>
 8011f02:	9a01      	ldr	r2, [sp, #4]
 8011f04:	4606      	mov	r6, r0
 8011f06:	f8d9 3000 	ldr.w	r3, [r9]
 8011f0a:	1a82      	subs	r2, r0, r2
 8011f0c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8011f10:	fb0b 4202 	mla	r2, fp, r2, r4
 8011f14:	1c50      	adds	r0, r2, #1
 8011f16:	9205      	str	r2, [sp, #20]
 8011f18:	4798      	blx	r3
 8011f1a:	4682      	mov	sl, r0
 8011f1c:	2800      	cmp	r0, #0
 8011f1e:	d054      	beq.n	8011fca <rcutils_repl_str+0x15e>
 8011f20:	683a      	ldr	r2, [r7, #0]
 8011f22:	463d      	mov	r5, r7
 8011f24:	9900      	ldr	r1, [sp, #0]
 8011f26:	2401      	movs	r4, #1
 8011f28:	f007 fcc9 	bl	80198be <memcpy>
 8011f2c:	683b      	ldr	r3, [r7, #0]
 8011f2e:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 8011f32:	eb0a 0803 	add.w	r8, sl, r3
 8011f36:	ee18 7a10 	vmov	r7, s16
 8011f3a:	f8dd a000 	ldr.w	sl, [sp]
 8011f3e:	f8cd 9000 	str.w	r9, [sp]
 8011f42:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011f46:	4632      	mov	r2, r6
 8011f48:	4639      	mov	r1, r7
 8011f4a:	4640      	mov	r0, r8
 8011f4c:	44b0      	add	r8, r6
 8011f4e:	f007 fcb6 	bl	80198be <memcpy>
 8011f52:	f855 2b04 	ldr.w	r2, [r5], #4
 8011f56:	45a3      	cmp	fp, r4
 8011f58:	444a      	add	r2, r9
 8011f5a:	eb0a 0102 	add.w	r1, sl, r2
 8011f5e:	d02a      	beq.n	8011fb6 <rcutils_repl_str+0x14a>
 8011f60:	6828      	ldr	r0, [r5, #0]
 8011f62:	1a82      	subs	r2, r0, r2
 8011f64:	4640      	mov	r0, r8
 8011f66:	4490      	add	r8, r2
 8011f68:	f007 fca9 	bl	80198be <memcpy>
 8011f6c:	1c62      	adds	r2, r4, #1
 8011f6e:	45a3      	cmp	fp, r4
 8011f70:	4614      	mov	r4, r2
 8011f72:	d8e8      	bhi.n	8011f46 <rcutils_repl_str+0xda>
 8011f74:	f8dd 9000 	ldr.w	r9, [sp]
 8011f78:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8011f7c:	2300      	movs	r3, #0
 8011f7e:	9a05      	ldr	r2, [sp, #20]
 8011f80:	f80a 3002 	strb.w	r3, [sl, r2]
 8011f84:	e00b      	b.n	8011f9e <rcutils_repl_str+0x132>
 8011f86:	4620      	mov	r0, r4
 8011f88:	f8d9 3000 	ldr.w	r3, [r9]
 8011f8c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8011f90:	3001      	adds	r0, #1
 8011f92:	4798      	blx	r3
 8011f94:	4682      	mov	sl, r0
 8011f96:	b110      	cbz	r0, 8011f9e <rcutils_repl_str+0x132>
 8011f98:	9900      	ldr	r1, [sp, #0]
 8011f9a:	f007 fc88 	bl	80198ae <strcpy>
 8011f9e:	4638      	mov	r0, r7
 8011fa0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8011fa4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8011fa8:	4798      	blx	r3
 8011faa:	4650      	mov	r0, sl
 8011fac:	b007      	add	sp, #28
 8011fae:	ecbd 8b02 	vpop	{d8}
 8011fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fb6:	9b02      	ldr	r3, [sp, #8]
 8011fb8:	4640      	mov	r0, r8
 8011fba:	f8dd 9000 	ldr.w	r9, [sp]
 8011fbe:	1a9a      	subs	r2, r3, r2
 8011fc0:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8011fc4:	f007 fc7b 	bl	80198be <memcpy>
 8011fc8:	e7d8      	b.n	8011f7c <rcutils_repl_str+0x110>
 8011fca:	f04f 0a00 	mov.w	sl, #0
 8011fce:	e7e6      	b.n	8011f9e <rcutils_repl_str+0x132>

08011fd0 <rcutils_snprintf>:
 8011fd0:	b40c      	push	{r2, r3}
 8011fd2:	b530      	push	{r4, r5, lr}
 8011fd4:	b083      	sub	sp, #12
 8011fd6:	ab06      	add	r3, sp, #24
 8011fd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8011fdc:	9301      	str	r3, [sp, #4]
 8011fde:	b1e2      	cbz	r2, 801201a <rcutils_snprintf+0x4a>
 8011fe0:	fab0 f480 	clz	r4, r0
 8011fe4:	fab1 f581 	clz	r5, r1
 8011fe8:	ea50 0c01 	orrs.w	ip, r0, r1
 8011fec:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8011ff0:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8011ff4:	d008      	beq.n	8012008 <rcutils_snprintf+0x38>
 8011ff6:	b984      	cbnz	r4, 801201a <rcutils_snprintf+0x4a>
 8011ff8:	b97d      	cbnz	r5, 801201a <rcutils_snprintf+0x4a>
 8011ffa:	f007 fab3 	bl	8019564 <vsniprintf>
 8011ffe:	b003      	add	sp, #12
 8012000:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012004:	b002      	add	sp, #8
 8012006:	4770      	bx	lr
 8012008:	4661      	mov	r1, ip
 801200a:	4660      	mov	r0, ip
 801200c:	f007 faaa 	bl	8019564 <vsniprintf>
 8012010:	b003      	add	sp, #12
 8012012:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012016:	b002      	add	sp, #8
 8012018:	4770      	bx	lr
 801201a:	f007 fc1b 	bl	8019854 <__errno>
 801201e:	2216      	movs	r2, #22
 8012020:	4603      	mov	r3, r0
 8012022:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012026:	601a      	str	r2, [r3, #0]
 8012028:	e7e9      	b.n	8011ffe <rcutils_snprintf+0x2e>
 801202a:	bf00      	nop

0801202c <rcutils_vsnprintf>:
 801202c:	b570      	push	{r4, r5, r6, lr}
 801202e:	b1b2      	cbz	r2, 801205e <rcutils_vsnprintf+0x32>
 8012030:	fab0 f480 	clz	r4, r0
 8012034:	fab1 f581 	clz	r5, r1
 8012038:	ea50 0c01 	orrs.w	ip, r0, r1
 801203c:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8012040:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8012044:	d005      	beq.n	8012052 <rcutils_vsnprintf+0x26>
 8012046:	b954      	cbnz	r4, 801205e <rcutils_vsnprintf+0x32>
 8012048:	b94d      	cbnz	r5, 801205e <rcutils_vsnprintf+0x32>
 801204a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801204e:	f007 ba89 	b.w	8019564 <vsniprintf>
 8012052:	4661      	mov	r1, ip
 8012054:	4660      	mov	r0, ip
 8012056:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801205a:	f007 ba83 	b.w	8019564 <vsniprintf>
 801205e:	f007 fbf9 	bl	8019854 <__errno>
 8012062:	2316      	movs	r3, #22
 8012064:	6003      	str	r3, [r0, #0]
 8012066:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801206a:	bd70      	pop	{r4, r5, r6, pc}

0801206c <rcutils_strdup>:
 801206c:	b084      	sub	sp, #16
 801206e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012070:	ac07      	add	r4, sp, #28
 8012072:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8012074:	4605      	mov	r5, r0
 8012076:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 801207a:	b1d0      	cbz	r0, 80120b2 <rcutils_strdup+0x46>
 801207c:	460c      	mov	r4, r1
 801207e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012082:	2100      	movs	r1, #0
 8012084:	f7ee f8ec 	bl	8000260 <memchr>
 8012088:	b180      	cbz	r0, 80120ac <rcutils_strdup+0x40>
 801208a:	1b46      	subs	r6, r0, r5
 801208c:	1c70      	adds	r0, r6, #1
 801208e:	4639      	mov	r1, r7
 8012090:	47a0      	blx	r4
 8012092:	4604      	mov	r4, r0
 8012094:	b128      	cbz	r0, 80120a2 <rcutils_strdup+0x36>
 8012096:	4632      	mov	r2, r6
 8012098:	4629      	mov	r1, r5
 801209a:	f007 fc10 	bl	80198be <memcpy>
 801209e:	2300      	movs	r3, #0
 80120a0:	55a3      	strb	r3, [r4, r6]
 80120a2:	4620      	mov	r0, r4
 80120a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80120a8:	b004      	add	sp, #16
 80120aa:	4770      	bx	lr
 80120ac:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80120b0:	e7ed      	b.n	801208e <rcutils_strdup+0x22>
 80120b2:	4604      	mov	r4, r0
 80120b4:	e7f5      	b.n	80120a2 <rcutils_strdup+0x36>
 80120b6:	bf00      	nop

080120b8 <rcutils_strndup>:
 80120b8:	b082      	sub	sp, #8
 80120ba:	b570      	push	{r4, r5, r6, lr}
 80120bc:	ac04      	add	r4, sp, #16
 80120be:	4606      	mov	r6, r0
 80120c0:	e884 000c 	stmia.w	r4, {r2, r3}
 80120c4:	b1b8      	cbz	r0, 80120f6 <rcutils_strndup+0x3e>
 80120c6:	460c      	mov	r4, r1
 80120c8:	460a      	mov	r2, r1
 80120ca:	2100      	movs	r1, #0
 80120cc:	f7ee f8c8 	bl	8000260 <memchr>
 80120d0:	b100      	cbz	r0, 80120d4 <rcutils_strndup+0x1c>
 80120d2:	1b84      	subs	r4, r0, r6
 80120d4:	9b04      	ldr	r3, [sp, #16]
 80120d6:	1c60      	adds	r0, r4, #1
 80120d8:	9908      	ldr	r1, [sp, #32]
 80120da:	4798      	blx	r3
 80120dc:	4605      	mov	r5, r0
 80120de:	b128      	cbz	r0, 80120ec <rcutils_strndup+0x34>
 80120e0:	4622      	mov	r2, r4
 80120e2:	4631      	mov	r1, r6
 80120e4:	f007 fbeb 	bl	80198be <memcpy>
 80120e8:	2300      	movs	r3, #0
 80120ea:	552b      	strb	r3, [r5, r4]
 80120ec:	4628      	mov	r0, r5
 80120ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80120f2:	b002      	add	sp, #8
 80120f4:	4770      	bx	lr
 80120f6:	4605      	mov	r5, r0
 80120f8:	e7f8      	b.n	80120ec <rcutils_strndup+0x34>
 80120fa:	bf00      	nop

080120fc <rcutils_get_zero_initialized_string_map>:
 80120fc:	2000      	movs	r0, #0
 80120fe:	4b01      	ldr	r3, [pc, #4]	; (8012104 <rcutils_get_zero_initialized_string_map+0x8>)
 8012100:	6018      	str	r0, [r3, #0]
 8012102:	4770      	bx	lr
 8012104:	2000bda8 	.word	0x2000bda8

08012108 <rcutils_string_map_reserve>:
 8012108:	2800      	cmp	r0, #0
 801210a:	d03e      	beq.n	801218a <rcutils_string_map_reserve+0x82>
 801210c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801210e:	6805      	ldr	r5, [r0, #0]
 8012110:	4606      	mov	r6, r0
 8012112:	460c      	mov	r4, r1
 8012114:	b12d      	cbz	r5, 8012122 <rcutils_string_map_reserve+0x1a>
 8012116:	68ab      	ldr	r3, [r5, #8]
 8012118:	42a3      	cmp	r3, r4
 801211a:	d904      	bls.n	8012126 <rcutils_string_map_reserve+0x1e>
 801211c:	461c      	mov	r4, r3
 801211e:	2d00      	cmp	r5, #0
 8012120:	d1f9      	bne.n	8012116 <rcutils_string_map_reserve+0xe>
 8012122:	201f      	movs	r0, #31
 8012124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012126:	686b      	ldr	r3, [r5, #4]
 8012128:	42a3      	cmp	r3, r4
 801212a:	d02a      	beq.n	8012182 <rcutils_string_map_reserve+0x7a>
 801212c:	69e9      	ldr	r1, [r5, #28]
 801212e:	b304      	cbz	r4, 8012172 <rcutils_string_map_reserve+0x6a>
 8012130:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
 8012134:	d227      	bcs.n	8012186 <rcutils_string_map_reserve+0x7e>
 8012136:	00e7      	lsls	r7, r4, #3
 8012138:	460a      	mov	r2, r1
 801213a:	696b      	ldr	r3, [r5, #20]
 801213c:	6828      	ldr	r0, [r5, #0]
 801213e:	4639      	mov	r1, r7
 8012140:	4798      	blx	r3
 8012142:	b300      	cbz	r0, 8012186 <rcutils_string_map_reserve+0x7e>
 8012144:	6835      	ldr	r5, [r6, #0]
 8012146:	686a      	ldr	r2, [r5, #4]
 8012148:	6028      	str	r0, [r5, #0]
 801214a:	42a2      	cmp	r2, r4
 801214c:	d216      	bcs.n	801217c <rcutils_string_map_reserve+0x74>
 801214e:	43d1      	mvns	r1, r2
 8012150:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
 8012154:	4421      	add	r1, r4
 8012156:	2909      	cmp	r1, #9
 8012158:	d919      	bls.n	801218e <rcutils_string_map_reserve+0x86>
 801215a:	0759      	lsls	r1, r3, #29
 801215c:	d117      	bne.n	801218e <rcutils_string_map_reserve+0x86>
 801215e:	1aa1      	subs	r1, r4, r2
 8012160:	2600      	movs	r6, #0
 8012162:	2200      	movs	r2, #0
 8012164:	2700      	movs	r7, #0
 8012166:	3201      	adds	r2, #1
 8012168:	4291      	cmp	r1, r2
 801216a:	e8e3 6702 	strd	r6, r7, [r3], #8
 801216e:	d8fa      	bhi.n	8012166 <rcutils_string_map_reserve+0x5e>
 8012170:	e004      	b.n	801217c <rcutils_string_map_reserve+0x74>
 8012172:	692b      	ldr	r3, [r5, #16]
 8012174:	6828      	ldr	r0, [r5, #0]
 8012176:	4798      	blx	r3
 8012178:	6835      	ldr	r5, [r6, #0]
 801217a:	602c      	str	r4, [r5, #0]
 801217c:	2000      	movs	r0, #0
 801217e:	606c      	str	r4, [r5, #4]
 8012180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012182:	2000      	movs	r0, #0
 8012184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012186:	200a      	movs	r0, #10
 8012188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801218a:	200b      	movs	r0, #11
 801218c:	4770      	bx	lr
 801218e:	4438      	add	r0, r7
 8012190:	2200      	movs	r2, #0
 8012192:	e9c3 2200 	strd	r2, r2, [r3]
 8012196:	3308      	adds	r3, #8
 8012198:	4283      	cmp	r3, r0
 801219a:	d1fa      	bne.n	8012192 <rcutils_string_map_reserve+0x8a>
 801219c:	e7ee      	b.n	801217c <rcutils_string_map_reserve+0x74>
 801219e:	bf00      	nop

080121a0 <rcutils_string_map_init>:
 80121a0:	b082      	sub	sp, #8
 80121a2:	b570      	push	{r4, r5, r6, lr}
 80121a4:	ac04      	add	r4, sp, #16
 80121a6:	e884 000c 	stmia.w	r4, {r2, r3}
 80121aa:	b378      	cbz	r0, 801220c <rcutils_string_map_init+0x6c>
 80121ac:	6806      	ldr	r6, [r0, #0]
 80121ae:	4604      	mov	r4, r0
 80121b0:	b12e      	cbz	r6, 80121be <rcutils_string_map_init+0x1e>
 80121b2:	251e      	movs	r5, #30
 80121b4:	4628      	mov	r0, r5
 80121b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80121ba:	b002      	add	sp, #8
 80121bc:	4770      	bx	lr
 80121be:	a804      	add	r0, sp, #16
 80121c0:	460d      	mov	r5, r1
 80121c2:	f7f9 ffa9 	bl	800c118 <rcutils_allocator_is_valid>
 80121c6:	b308      	cbz	r0, 801220c <rcutils_string_map_init+0x6c>
 80121c8:	9b04      	ldr	r3, [sp, #16]
 80121ca:	2020      	movs	r0, #32
 80121cc:	9908      	ldr	r1, [sp, #32]
 80121ce:	4798      	blx	r3
 80121d0:	6020      	str	r0, [r4, #0]
 80121d2:	b308      	cbz	r0, 8012218 <rcutils_string_map_init+0x78>
 80121d4:	f10d 0e10 	add.w	lr, sp, #16
 80121d8:	6086      	str	r6, [r0, #8]
 80121da:	f100 0c0c 	add.w	ip, r0, #12
 80121de:	e9c0 6600 	strd	r6, r6, [r0]
 80121e2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80121e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80121ea:	f8de 3000 	ldr.w	r3, [lr]
 80121ee:	4629      	mov	r1, r5
 80121f0:	4620      	mov	r0, r4
 80121f2:	f8cc 3000 	str.w	r3, [ip]
 80121f6:	f7ff ff87 	bl	8012108 <rcutils_string_map_reserve>
 80121fa:	4605      	mov	r5, r0
 80121fc:	2800      	cmp	r0, #0
 80121fe:	d0d9      	beq.n	80121b4 <rcutils_string_map_init+0x14>
 8012200:	9b05      	ldr	r3, [sp, #20]
 8012202:	9908      	ldr	r1, [sp, #32]
 8012204:	6820      	ldr	r0, [r4, #0]
 8012206:	4798      	blx	r3
 8012208:	6026      	str	r6, [r4, #0]
 801220a:	e7d3      	b.n	80121b4 <rcutils_string_map_init+0x14>
 801220c:	250b      	movs	r5, #11
 801220e:	4628      	mov	r0, r5
 8012210:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012214:	b002      	add	sp, #8
 8012216:	4770      	bx	lr
 8012218:	250a      	movs	r5, #10
 801221a:	e7cb      	b.n	80121b4 <rcutils_string_map_init+0x14>

0801221c <rcutils_string_map_fini>:
 801221c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012220:	b083      	sub	sp, #12
 8012222:	2800      	cmp	r0, #0
 8012224:	d03e      	beq.n	80122a4 <rcutils_string_map_fini+0x88>
 8012226:	6804      	ldr	r4, [r0, #0]
 8012228:	4606      	mov	r6, r0
 801222a:	2c00      	cmp	r4, #0
 801222c:	d036      	beq.n	801229c <rcutils_string_map_fini+0x80>
 801222e:	6863      	ldr	r3, [r4, #4]
 8012230:	b34b      	cbz	r3, 8012286 <rcutils_string_map_fini+0x6a>
 8012232:	2500      	movs	r5, #0
 8012234:	6822      	ldr	r2, [r4, #0]
 8012236:	462f      	mov	r7, r5
 8012238:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
 801223c:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 8012240:	b1f0      	cbz	r0, 8012280 <rcutils_string_map_fini+0x64>
 8012242:	69e1      	ldr	r1, [r4, #28]
 8012244:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012248:	9101      	str	r1, [sp, #4]
 801224a:	47c8      	blx	r9
 801224c:	6823      	ldr	r3, [r4, #0]
 801224e:	9901      	ldr	r1, [sp, #4]
 8012250:	eb03 0208 	add.w	r2, r3, r8
 8012254:	f843 7035 	str.w	r7, [r3, r5, lsl #3]
 8012258:	3501      	adds	r5, #1
 801225a:	6850      	ldr	r0, [r2, #4]
 801225c:	47c8      	blx	r9
 801225e:	68a3      	ldr	r3, [r4, #8]
 8012260:	6822      	ldr	r2, [r4, #0]
 8012262:	3b01      	subs	r3, #1
 8012264:	4442      	add	r2, r8
 8012266:	6057      	str	r7, [r2, #4]
 8012268:	60a3      	str	r3, [r4, #8]
 801226a:	6834      	ldr	r4, [r6, #0]
 801226c:	6863      	ldr	r3, [r4, #4]
 801226e:	429d      	cmp	r5, r3
 8012270:	d209      	bcs.n	8012286 <rcutils_string_map_fini+0x6a>
 8012272:	6822      	ldr	r2, [r4, #0]
 8012274:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 8012278:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
 801227c:	2800      	cmp	r0, #0
 801227e:	d1e0      	bne.n	8012242 <rcutils_string_map_fini+0x26>
 8012280:	3501      	adds	r5, #1
 8012282:	429d      	cmp	r5, r3
 8012284:	d3d8      	bcc.n	8012238 <rcutils_string_map_fini+0x1c>
 8012286:	2100      	movs	r1, #0
 8012288:	4630      	mov	r0, r6
 801228a:	f7ff ff3d 	bl	8012108 <rcutils_string_map_reserve>
 801228e:	4604      	mov	r4, r0
 8012290:	b920      	cbnz	r0, 801229c <rcutils_string_map_fini+0x80>
 8012292:	6830      	ldr	r0, [r6, #0]
 8012294:	6903      	ldr	r3, [r0, #16]
 8012296:	69c1      	ldr	r1, [r0, #28]
 8012298:	4798      	blx	r3
 801229a:	6034      	str	r4, [r6, #0]
 801229c:	4620      	mov	r0, r4
 801229e:	b003      	add	sp, #12
 80122a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80122a4:	240b      	movs	r4, #11
 80122a6:	4620      	mov	r0, r4
 80122a8:	b003      	add	sp, #12
 80122aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80122ae:	bf00      	nop

080122b0 <rcutils_string_map_getn>:
 80122b0:	b338      	cbz	r0, 8012302 <rcutils_string_map_getn+0x52>
 80122b2:	6803      	ldr	r3, [r0, #0]
 80122b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80122b8:	4688      	mov	r8, r1
 80122ba:	b1d9      	cbz	r1, 80122f4 <rcutils_string_map_getn+0x44>
 80122bc:	fab3 f483 	clz	r4, r3
 80122c0:	0964      	lsrs	r4, r4, #5
 80122c2:	b1bb      	cbz	r3, 80122f4 <rcutils_string_map_getn+0x44>
 80122c4:	4691      	mov	r9, r2
 80122c6:	e9d3 7600 	ldrd	r7, r6, [r3]
 80122ca:	b19e      	cbz	r6, 80122f4 <rcutils_string_map_getn+0x44>
 80122cc:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
 80122d0:	eb07 0ac4 	add.w	sl, r7, r4, lsl #3
 80122d4:	3401      	adds	r4, #1
 80122d6:	4628      	mov	r0, r5
 80122d8:	b155      	cbz	r5, 80122f0 <rcutils_string_map_getn+0x40>
 80122da:	f7ee f811 	bl	8000300 <strlen>
 80122de:	4602      	mov	r2, r0
 80122e0:	4629      	mov	r1, r5
 80122e2:	4640      	mov	r0, r8
 80122e4:	454a      	cmp	r2, r9
 80122e6:	bf38      	it	cc
 80122e8:	464a      	movcc	r2, r9
 80122ea:	f007 f988 	bl	80195fe <strncmp>
 80122ee:	b120      	cbz	r0, 80122fa <rcutils_string_map_getn+0x4a>
 80122f0:	42a6      	cmp	r6, r4
 80122f2:	d1eb      	bne.n	80122cc <rcutils_string_map_getn+0x1c>
 80122f4:	2000      	movs	r0, #0
 80122f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122fa:	f8da 0004 	ldr.w	r0, [sl, #4]
 80122fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012302:	4770      	bx	lr
 8012304:	0000      	movs	r0, r0
	...

08012308 <rmw_get_zero_initialized_context>:
 8012308:	b510      	push	{r4, lr}
 801230a:	4604      	mov	r4, r0
 801230c:	3010      	adds	r0, #16
 801230e:	f000 f80f 	bl	8012330 <rmw_get_zero_initialized_init_options>
 8012312:	2300      	movs	r3, #0
 8012314:	4620      	mov	r0, r4
 8012316:	60a3      	str	r3, [r4, #8]
 8012318:	66a3      	str	r3, [r4, #104]	; 0x68
 801231a:	66e3      	str	r3, [r4, #108]	; 0x6c
 801231c:	ed9f 7b02 	vldr	d7, [pc, #8]	; 8012328 <rmw_get_zero_initialized_context+0x20>
 8012320:	ed84 7b00 	vstr	d7, [r4]
 8012324:	bd10      	pop	{r4, pc}
 8012326:	bf00      	nop
	...

08012330 <rmw_get_zero_initialized_init_options>:
 8012330:	b510      	push	{r4, lr}
 8012332:	4604      	mov	r4, r0
 8012334:	2258      	movs	r2, #88	; 0x58
 8012336:	2100      	movs	r1, #0
 8012338:	f007 f94c 	bl	80195d4 <memset>
 801233c:	f104 0010 	add.w	r0, r4, #16
 8012340:	f000 f80a 	bl	8012358 <rmw_get_default_security_options>
 8012344:	f104 001c 	add.w	r0, r4, #28
 8012348:	f005 fd54 	bl	8017df4 <rmw_get_zero_initialized_discovery_options>
 801234c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012350:	4620      	mov	r0, r4
 8012352:	60e3      	str	r3, [r4, #12]
 8012354:	bd10      	pop	{r4, pc}
 8012356:	bf00      	nop

08012358 <rmw_get_default_security_options>:
 8012358:	2200      	movs	r2, #0
 801235a:	7002      	strb	r2, [r0, #0]
 801235c:	6042      	str	r2, [r0, #4]
 801235e:	4770      	bx	lr

08012360 <rmw_get_zero_initialized_message_info>:
 8012360:	b510      	push	{r4, lr}
 8012362:	4604      	mov	r4, r0
 8012364:	2238      	movs	r2, #56	; 0x38
 8012366:	2100      	movs	r1, #0
 8012368:	f007 f934 	bl	80195d4 <memset>
 801236c:	4620      	mov	r0, r4
 801236e:	bd10      	pop	{r4, pc}

08012370 <rmw_validate_full_topic_name>:
 8012370:	2800      	cmp	r0, #0
 8012372:	d05d      	beq.n	8012430 <rmw_validate_full_topic_name+0xc0>
 8012374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012378:	460d      	mov	r5, r1
 801237a:	2900      	cmp	r1, #0
 801237c:	d05a      	beq.n	8012434 <rmw_validate_full_topic_name+0xc4>
 801237e:	4604      	mov	r4, r0
 8012380:	4616      	mov	r6, r2
 8012382:	f7ed ffbd 	bl	8000300 <strlen>
 8012386:	b150      	cbz	r0, 801239e <rmw_validate_full_topic_name+0x2e>
 8012388:	7823      	ldrb	r3, [r4, #0]
 801238a:	2b2f      	cmp	r3, #47	; 0x2f
 801238c:	d00e      	beq.n	80123ac <rmw_validate_full_topic_name+0x3c>
 801238e:	2302      	movs	r3, #2
 8012390:	602b      	str	r3, [r5, #0]
 8012392:	b146      	cbz	r6, 80123a6 <rmw_validate_full_topic_name+0x36>
 8012394:	2300      	movs	r3, #0
 8012396:	4618      	mov	r0, r3
 8012398:	6033      	str	r3, [r6, #0]
 801239a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801239e:	2301      	movs	r3, #1
 80123a0:	602b      	str	r3, [r5, #0]
 80123a2:	2e00      	cmp	r6, #0
 80123a4:	d1f6      	bne.n	8012394 <rmw_validate_full_topic_name+0x24>
 80123a6:	2000      	movs	r0, #0
 80123a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123ac:	1e43      	subs	r3, r0, #1
 80123ae:	5ce2      	ldrb	r2, [r4, r3]
 80123b0:	2a2f      	cmp	r2, #47	; 0x2f
 80123b2:	d041      	beq.n	8012438 <rmw_validate_full_topic_name+0xc8>
 80123b4:	1e62      	subs	r2, r4, #1
 80123b6:	f1c4 0e01 	rsb	lr, r4, #1
 80123ba:	eb02 0800 	add.w	r8, r2, r0
 80123be:	eb0e 0702 	add.w	r7, lr, r2
 80123c2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80123c6:	f023 0120 	bic.w	r1, r3, #32
 80123ca:	f1a3 0c2f 	sub.w	ip, r3, #47	; 0x2f
 80123ce:	3941      	subs	r1, #65	; 0x41
 80123d0:	2919      	cmp	r1, #25
 80123d2:	d90f      	bls.n	80123f4 <rmw_validate_full_topic_name+0x84>
 80123d4:	f1bc 0f0a 	cmp.w	ip, #10
 80123d8:	d90c      	bls.n	80123f4 <rmw_validate_full_topic_name+0x84>
 80123da:	f1a3 035f 	sub.w	r3, r3, #95	; 0x5f
 80123de:	fab3 f383 	clz	r3, r3
 80123e2:	095b      	lsrs	r3, r3, #5
 80123e4:	b933      	cbnz	r3, 80123f4 <rmw_validate_full_topic_name+0x84>
 80123e6:	2204      	movs	r2, #4
 80123e8:	602a      	str	r2, [r5, #0]
 80123ea:	2e00      	cmp	r6, #0
 80123ec:	d0db      	beq.n	80123a6 <rmw_validate_full_topic_name+0x36>
 80123ee:	4618      	mov	r0, r3
 80123f0:	6037      	str	r7, [r6, #0]
 80123f2:	e7d2      	b.n	801239a <rmw_validate_full_topic_name+0x2a>
 80123f4:	4542      	cmp	r2, r8
 80123f6:	d1e2      	bne.n	80123be <rmw_validate_full_topic_name+0x4e>
 80123f8:	2301      	movs	r3, #1
 80123fa:	4f1a      	ldr	r7, [pc, #104]	; (8012464 <rmw_validate_full_topic_name+0xf4>)
 80123fc:	e004      	b.n	8012408 <rmw_validate_full_topic_name+0x98>
 80123fe:	4298      	cmp	r0, r3
 8012400:	f104 0401 	add.w	r4, r4, #1
 8012404:	4613      	mov	r3, r2
 8012406:	d91c      	bls.n	8012442 <rmw_validate_full_topic_name+0xd2>
 8012408:	4298      	cmp	r0, r3
 801240a:	f103 0201 	add.w	r2, r3, #1
 801240e:	d0f6      	beq.n	80123fe <rmw_validate_full_topic_name+0x8e>
 8012410:	7821      	ldrb	r1, [r4, #0]
 8012412:	292f      	cmp	r1, #47	; 0x2f
 8012414:	d1f3      	bne.n	80123fe <rmw_validate_full_topic_name+0x8e>
 8012416:	7861      	ldrb	r1, [r4, #1]
 8012418:	292f      	cmp	r1, #47	; 0x2f
 801241a:	d01e      	beq.n	801245a <rmw_validate_full_topic_name+0xea>
 801241c:	5dc9      	ldrb	r1, [r1, r7]
 801241e:	0749      	lsls	r1, r1, #29
 8012420:	d5ed      	bpl.n	80123fe <rmw_validate_full_topic_name+0x8e>
 8012422:	2206      	movs	r2, #6
 8012424:	602a      	str	r2, [r5, #0]
 8012426:	2e00      	cmp	r6, #0
 8012428:	d0bd      	beq.n	80123a6 <rmw_validate_full_topic_name+0x36>
 801242a:	2000      	movs	r0, #0
 801242c:	6033      	str	r3, [r6, #0]
 801242e:	e7b4      	b.n	801239a <rmw_validate_full_topic_name+0x2a>
 8012430:	200b      	movs	r0, #11
 8012432:	4770      	bx	lr
 8012434:	200b      	movs	r0, #11
 8012436:	e7b0      	b.n	801239a <rmw_validate_full_topic_name+0x2a>
 8012438:	2203      	movs	r2, #3
 801243a:	602a      	str	r2, [r5, #0]
 801243c:	2e00      	cmp	r6, #0
 801243e:	d1f4      	bne.n	801242a <rmw_validate_full_topic_name+0xba>
 8012440:	e7b1      	b.n	80123a6 <rmw_validate_full_topic_name+0x36>
 8012442:	28f7      	cmp	r0, #247	; 0xf7
 8012444:	d803      	bhi.n	801244e <rmw_validate_full_topic_name+0xde>
 8012446:	2300      	movs	r3, #0
 8012448:	4618      	mov	r0, r3
 801244a:	602b      	str	r3, [r5, #0]
 801244c:	e7a5      	b.n	801239a <rmw_validate_full_topic_name+0x2a>
 801244e:	2307      	movs	r3, #7
 8012450:	602b      	str	r3, [r5, #0]
 8012452:	2e00      	cmp	r6, #0
 8012454:	d0a7      	beq.n	80123a6 <rmw_validate_full_topic_name+0x36>
 8012456:	23f6      	movs	r3, #246	; 0xf6
 8012458:	e7e7      	b.n	801242a <rmw_validate_full_topic_name+0xba>
 801245a:	2205      	movs	r2, #5
 801245c:	602a      	str	r2, [r5, #0]
 801245e:	2e00      	cmp	r6, #0
 8012460:	d1e3      	bne.n	801242a <rmw_validate_full_topic_name+0xba>
 8012462:	e7a0      	b.n	80123a6 <rmw_validate_full_topic_name+0x36>
 8012464:	0801bf14 	.word	0x0801bf14

08012468 <rmw_validate_namespace_with_size>:
 8012468:	2800      	cmp	r0, #0
 801246a:	d043      	beq.n	80124f4 <rmw_validate_namespace_with_size+0x8c>
 801246c:	b570      	push	{r4, r5, r6, lr}
 801246e:	4614      	mov	r4, r2
 8012470:	b0c2      	sub	sp, #264	; 0x108
 8012472:	b32a      	cbz	r2, 80124c0 <rmw_validate_namespace_with_size+0x58>
 8012474:	2901      	cmp	r1, #1
 8012476:	460d      	mov	r5, r1
 8012478:	461e      	mov	r6, r3
 801247a:	d102      	bne.n	8012482 <rmw_validate_namespace_with_size+0x1a>
 801247c:	7803      	ldrb	r3, [r0, #0]
 801247e:	2b2f      	cmp	r3, #47	; 0x2f
 8012480:	d012      	beq.n	80124a8 <rmw_validate_namespace_with_size+0x40>
 8012482:	aa01      	add	r2, sp, #4
 8012484:	4669      	mov	r1, sp
 8012486:	f7ff ff73 	bl	8012370 <rmw_validate_full_topic_name>
 801248a:	b980      	cbnz	r0, 80124ae <rmw_validate_namespace_with_size+0x46>
 801248c:	9a00      	ldr	r2, [sp, #0]
 801248e:	b14a      	cbz	r2, 80124a4 <rmw_validate_namespace_with_size+0x3c>
 8012490:	2a07      	cmp	r2, #7
 8012492:	d007      	beq.n	80124a4 <rmw_validate_namespace_with_size+0x3c>
 8012494:	1e53      	subs	r3, r2, #1
 8012496:	2b05      	cmp	r3, #5
 8012498:	d82e      	bhi.n	80124f8 <rmw_validate_namespace_with_size+0x90>
 801249a:	e8df f003 	tbb	[pc, r3]
 801249e:	1f1c      	.short	0x1f1c
 80124a0:	14282522 	.word	0x14282522
 80124a4:	2df5      	cmp	r5, #245	; 0xf5
 80124a6:	d804      	bhi.n	80124b2 <rmw_validate_namespace_with_size+0x4a>
 80124a8:	2300      	movs	r3, #0
 80124aa:	4618      	mov	r0, r3
 80124ac:	6023      	str	r3, [r4, #0]
 80124ae:	b042      	add	sp, #264	; 0x108
 80124b0:	bd70      	pop	{r4, r5, r6, pc}
 80124b2:	2307      	movs	r3, #7
 80124b4:	6023      	str	r3, [r4, #0]
 80124b6:	2e00      	cmp	r6, #0
 80124b8:	d0f9      	beq.n	80124ae <rmw_validate_namespace_with_size+0x46>
 80124ba:	23f4      	movs	r3, #244	; 0xf4
 80124bc:	6033      	str	r3, [r6, #0]
 80124be:	e7f6      	b.n	80124ae <rmw_validate_namespace_with_size+0x46>
 80124c0:	200b      	movs	r0, #11
 80124c2:	b042      	add	sp, #264	; 0x108
 80124c4:	bd70      	pop	{r4, r5, r6, pc}
 80124c6:	2306      	movs	r3, #6
 80124c8:	6023      	str	r3, [r4, #0]
 80124ca:	2e00      	cmp	r6, #0
 80124cc:	d0ef      	beq.n	80124ae <rmw_validate_namespace_with_size+0x46>
 80124ce:	9b01      	ldr	r3, [sp, #4]
 80124d0:	6033      	str	r3, [r6, #0]
 80124d2:	b042      	add	sp, #264	; 0x108
 80124d4:	bd70      	pop	{r4, r5, r6, pc}
 80124d6:	2301      	movs	r3, #1
 80124d8:	6023      	str	r3, [r4, #0]
 80124da:	e7f6      	b.n	80124ca <rmw_validate_namespace_with_size+0x62>
 80124dc:	2302      	movs	r3, #2
 80124de:	6023      	str	r3, [r4, #0]
 80124e0:	e7f3      	b.n	80124ca <rmw_validate_namespace_with_size+0x62>
 80124e2:	2303      	movs	r3, #3
 80124e4:	6023      	str	r3, [r4, #0]
 80124e6:	e7f0      	b.n	80124ca <rmw_validate_namespace_with_size+0x62>
 80124e8:	2304      	movs	r3, #4
 80124ea:	6023      	str	r3, [r4, #0]
 80124ec:	e7ed      	b.n	80124ca <rmw_validate_namespace_with_size+0x62>
 80124ee:	2305      	movs	r3, #5
 80124f0:	6023      	str	r3, [r4, #0]
 80124f2:	e7ea      	b.n	80124ca <rmw_validate_namespace_with_size+0x62>
 80124f4:	200b      	movs	r0, #11
 80124f6:	4770      	bx	lr
 80124f8:	4613      	mov	r3, r2
 80124fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80124fe:	4a03      	ldr	r2, [pc, #12]	; (801250c <rmw_validate_namespace_with_size+0xa4>)
 8012500:	a802      	add	r0, sp, #8
 8012502:	f7ff fd65 	bl	8011fd0 <rcutils_snprintf>
 8012506:	2001      	movs	r0, #1
 8012508:	e7d1      	b.n	80124ae <rmw_validate_namespace_with_size+0x46>
 801250a:	bf00      	nop
 801250c:	0801b71c 	.word	0x0801b71c

08012510 <rmw_validate_namespace>:
 8012510:	b168      	cbz	r0, 801252e <rmw_validate_namespace+0x1e>
 8012512:	b570      	push	{r4, r5, r6, lr}
 8012514:	460d      	mov	r5, r1
 8012516:	4616      	mov	r6, r2
 8012518:	4604      	mov	r4, r0
 801251a:	f7ed fef1 	bl	8000300 <strlen>
 801251e:	4633      	mov	r3, r6
 8012520:	4601      	mov	r1, r0
 8012522:	462a      	mov	r2, r5
 8012524:	4620      	mov	r0, r4
 8012526:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801252a:	f7ff bf9d 	b.w	8012468 <rmw_validate_namespace_with_size>
 801252e:	200b      	movs	r0, #11
 8012530:	4770      	bx	lr
 8012532:	bf00      	nop

08012534 <rmw_namespace_validation_result_string>:
 8012534:	2807      	cmp	r0, #7
 8012536:	d803      	bhi.n	8012540 <rmw_namespace_validation_result_string+0xc>
 8012538:	4b02      	ldr	r3, [pc, #8]	; (8012544 <rmw_namespace_validation_result_string+0x10>)
 801253a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801253e:	4770      	bx	lr
 8012540:	4801      	ldr	r0, [pc, #4]	; (8012548 <rmw_namespace_validation_result_string+0x14>)
 8012542:	4770      	bx	lr
 8012544:	0801b914 	.word	0x0801b914
 8012548:	0801b76c 	.word	0x0801b76c

0801254c <rmw_validate_node_name>:
 801254c:	2800      	cmp	r0, #0
 801254e:	d042      	beq.n	80125d6 <rmw_validate_node_name+0x8a>
 8012550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012554:	460d      	mov	r5, r1
 8012556:	2900      	cmp	r1, #0
 8012558:	d03f      	beq.n	80125da <rmw_validate_node_name+0x8e>
 801255a:	4604      	mov	r4, r0
 801255c:	4616      	mov	r6, r2
 801255e:	f7ed fecf 	bl	8000300 <strlen>
 8012562:	b310      	cbz	r0, 80125aa <rmw_validate_node_name+0x5e>
 8012564:	1e63      	subs	r3, r4, #1
 8012566:	f1c4 0101 	rsb	r1, r4, #1
 801256a:	eb03 0800 	add.w	r8, r3, r0
 801256e:	18cf      	adds	r7, r1, r3
 8012570:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8012574:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 8012578:	f02e 0c20 	bic.w	ip, lr, #32
 801257c:	2a09      	cmp	r2, #9
 801257e:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 8012582:	d905      	bls.n	8012590 <rmw_validate_node_name+0x44>
 8012584:	f1bc 0f19 	cmp.w	ip, #25
 8012588:	d902      	bls.n	8012590 <rmw_validate_node_name+0x44>
 801258a:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 801258e:	d114      	bne.n	80125ba <rmw_validate_node_name+0x6e>
 8012590:	4598      	cmp	r8, r3
 8012592:	d1ec      	bne.n	801256e <rmw_validate_node_name+0x22>
 8012594:	7822      	ldrb	r2, [r4, #0]
 8012596:	4b16      	ldr	r3, [pc, #88]	; (80125f0 <rmw_validate_node_name+0xa4>)
 8012598:	5cd3      	ldrb	r3, [r2, r3]
 801259a:	f013 0304 	ands.w	r3, r3, #4
 801259e:	d113      	bne.n	80125c8 <rmw_validate_node_name+0x7c>
 80125a0:	28ff      	cmp	r0, #255	; 0xff
 80125a2:	d81c      	bhi.n	80125de <rmw_validate_node_name+0x92>
 80125a4:	4618      	mov	r0, r3
 80125a6:	602b      	str	r3, [r5, #0]
 80125a8:	e00c      	b.n	80125c4 <rmw_validate_node_name+0x78>
 80125aa:	2301      	movs	r3, #1
 80125ac:	602b      	str	r3, [r5, #0]
 80125ae:	b17e      	cbz	r6, 80125d0 <rmw_validate_node_name+0x84>
 80125b0:	2300      	movs	r3, #0
 80125b2:	4618      	mov	r0, r3
 80125b4:	6033      	str	r3, [r6, #0]
 80125b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125ba:	2302      	movs	r3, #2
 80125bc:	602b      	str	r3, [r5, #0]
 80125be:	b13e      	cbz	r6, 80125d0 <rmw_validate_node_name+0x84>
 80125c0:	2000      	movs	r0, #0
 80125c2:	6037      	str	r7, [r6, #0]
 80125c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125c8:	2303      	movs	r3, #3
 80125ca:	602b      	str	r3, [r5, #0]
 80125cc:	2e00      	cmp	r6, #0
 80125ce:	d1ef      	bne.n	80125b0 <rmw_validate_node_name+0x64>
 80125d0:	2000      	movs	r0, #0
 80125d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125d6:	200b      	movs	r0, #11
 80125d8:	4770      	bx	lr
 80125da:	200b      	movs	r0, #11
 80125dc:	e7f2      	b.n	80125c4 <rmw_validate_node_name+0x78>
 80125de:	2204      	movs	r2, #4
 80125e0:	602a      	str	r2, [r5, #0]
 80125e2:	2e00      	cmp	r6, #0
 80125e4:	d0f4      	beq.n	80125d0 <rmw_validate_node_name+0x84>
 80125e6:	22fe      	movs	r2, #254	; 0xfe
 80125e8:	4618      	mov	r0, r3
 80125ea:	6032      	str	r2, [r6, #0]
 80125ec:	e7ea      	b.n	80125c4 <rmw_validate_node_name+0x78>
 80125ee:	bf00      	nop
 80125f0:	0801bf14 	.word	0x0801bf14

080125f4 <rmw_node_name_validation_result_string>:
 80125f4:	2804      	cmp	r0, #4
 80125f6:	d803      	bhi.n	8012600 <rmw_node_name_validation_result_string+0xc>
 80125f8:	4b02      	ldr	r3, [pc, #8]	; (8012604 <rmw_node_name_validation_result_string+0x10>)
 80125fa:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80125fe:	4770      	bx	lr
 8012600:	4801      	ldr	r0, [pc, #4]	; (8012608 <rmw_node_name_validation_result_string+0x14>)
 8012602:	4770      	bx	lr
 8012604:	0801ba20 	.word	0x0801ba20
 8012608:	0801b934 	.word	0x0801b934

0801260c <rmw_destroy_client>:
 801260c:	b570      	push	{r4, r5, r6, lr}
 801260e:	b128      	cbz	r0, 801261c <rmw_destroy_client+0x10>
 8012610:	4604      	mov	r4, r0
 8012612:	6800      	ldr	r0, [r0, #0]
 8012614:	460d      	mov	r5, r1
 8012616:	f001 fc99 	bl	8013f4c <is_uxrce_rmw_identifier_valid>
 801261a:	b910      	cbnz	r0, 8012622 <rmw_destroy_client+0x16>
 801261c:	2401      	movs	r4, #1
 801261e:	4620      	mov	r0, r4
 8012620:	bd70      	pop	{r4, r5, r6, pc}
 8012622:	6863      	ldr	r3, [r4, #4]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d0f9      	beq.n	801261c <rmw_destroy_client+0x10>
 8012628:	2d00      	cmp	r5, #0
 801262a:	d0f7      	beq.n	801261c <rmw_destroy_client+0x10>
 801262c:	6828      	ldr	r0, [r5, #0]
 801262e:	f001 fc8d 	bl	8013f4c <is_uxrce_rmw_identifier_valid>
 8012632:	2800      	cmp	r0, #0
 8012634:	d0f2      	beq.n	801261c <rmw_destroy_client+0x10>
 8012636:	686e      	ldr	r6, [r5, #4]
 8012638:	2e00      	cmp	r6, #0
 801263a:	d0ef      	beq.n	801261c <rmw_destroy_client+0x10>
 801263c:	6864      	ldr	r4, [r4, #4]
 801263e:	6932      	ldr	r2, [r6, #16]
 8012640:	6920      	ldr	r0, [r4, #16]
 8012642:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012646:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801264a:	6819      	ldr	r1, [r3, #0]
 801264c:	f001 ff02 	bl	8014454 <uxr_buffer_cancel_data>
 8012650:	4602      	mov	r2, r0
 8012652:	6920      	ldr	r0, [r4, #16]
 8012654:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8012658:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801265c:	f001 fbaa 	bl	8013db4 <run_xrce_session>
 8012660:	6920      	ldr	r0, [r4, #16]
 8012662:	6932      	ldr	r2, [r6, #16]
 8012664:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012668:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801266c:	6819      	ldr	r1, [r3, #0]
 801266e:	f001 fd11 	bl	8014094 <uxr_buffer_delete_entity>
 8012672:	4602      	mov	r2, r0
 8012674:	6920      	ldr	r0, [r4, #16]
 8012676:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801267a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801267e:	f001 fb99 	bl	8013db4 <run_xrce_session>
 8012682:	4603      	mov	r3, r0
 8012684:	4628      	mov	r0, r5
 8012686:	2b00      	cmp	r3, #0
 8012688:	bf14      	ite	ne
 801268a:	2400      	movne	r4, #0
 801268c:	2402      	moveq	r4, #2
 801268e:	f001 fa6d 	bl	8013b6c <rmw_uxrce_fini_client_memory>
 8012692:	e7c4      	b.n	801261e <rmw_destroy_client+0x12>

08012694 <rmw_get_gid_for_client>:
 8012694:	b1b9      	cbz	r1, 80126c6 <rmw_get_gid_for_client+0x32>
 8012696:	b538      	push	{r3, r4, r5, lr}
 8012698:	4605      	mov	r5, r0
 801269a:	b180      	cbz	r0, 80126be <rmw_get_gid_for_client+0x2a>
 801269c:	6800      	ldr	r0, [r0, #0]
 801269e:	460c      	mov	r4, r1
 80126a0:	b120      	cbz	r0, 80126ac <rmw_get_gid_for_client+0x18>
 80126a2:	4b0a      	ldr	r3, [pc, #40]	; (80126cc <rmw_get_gid_for_client+0x38>)
 80126a4:	6819      	ldr	r1, [r3, #0]
 80126a6:	f7ed fdcb 	bl	8000240 <strcmp>
 80126aa:	b950      	cbnz	r0, 80126c2 <rmw_get_gid_for_client+0x2e>
 80126ac:	686b      	ldr	r3, [r5, #4]
 80126ae:	2000      	movs	r0, #0
 80126b0:	6060      	str	r0, [r4, #4]
 80126b2:	60a0      	str	r0, [r4, #8]
 80126b4:	60e0      	str	r0, [r4, #12]
 80126b6:	6120      	str	r0, [r4, #16]
 80126b8:	691b      	ldr	r3, [r3, #16]
 80126ba:	6063      	str	r3, [r4, #4]
 80126bc:	bd38      	pop	{r3, r4, r5, pc}
 80126be:	200b      	movs	r0, #11
 80126c0:	bd38      	pop	{r3, r4, r5, pc}
 80126c2:	200c      	movs	r0, #12
 80126c4:	bd38      	pop	{r3, r4, r5, pc}
 80126c6:	200b      	movs	r0, #11
 80126c8:	4770      	bx	lr
 80126ca:	bf00      	nop
 80126cc:	0801bea0 	.word	0x0801bea0

080126d0 <rmw_get_implementation_identifier>:
 80126d0:	4b01      	ldr	r3, [pc, #4]	; (80126d8 <rmw_get_implementation_identifier+0x8>)
 80126d2:	6818      	ldr	r0, [r3, #0]
 80126d4:	4770      	bx	lr
 80126d6:	bf00      	nop
 80126d8:	0801bea0 	.word	0x0801bea0

080126dc <rmw_init_options_init>:
 80126dc:	b084      	sub	sp, #16
 80126de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80126e0:	b083      	sub	sp, #12
 80126e2:	ad09      	add	r5, sp, #36	; 0x24
 80126e4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80126e8:	b130      	cbz	r0, 80126f8 <rmw_init_options_init+0x1c>
 80126ea:	4604      	mov	r4, r0
 80126ec:	4628      	mov	r0, r5
 80126ee:	f7f9 fd13 	bl	800c118 <rcutils_allocator_is_valid>
 80126f2:	b108      	cbz	r0, 80126f8 <rmw_init_options_init+0x1c>
 80126f4:	68a6      	ldr	r6, [r4, #8]
 80126f6:	b12e      	cbz	r6, 8012704 <rmw_init_options_init+0x28>
 80126f8:	200b      	movs	r0, #11
 80126fa:	b003      	add	sp, #12
 80126fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012700:	b004      	add	sp, #16
 8012702:	4770      	bx	lr
 8012704:	2200      	movs	r2, #0
 8012706:	2300      	movs	r3, #0
 8012708:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 801270c:	f8df e098 	ldr.w	lr, [pc, #152]	; 80127a8 <rmw_init_options_init+0xcc>
 8012710:	466f      	mov	r7, sp
 8012712:	e9c4 2300 	strd	r2, r3, [r4]
 8012716:	4b20      	ldr	r3, [pc, #128]	; (8012798 <rmw_init_options_init+0xbc>)
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	60a3      	str	r3, [r4, #8]
 801271c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801271e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012722:	682b      	ldr	r3, [r5, #0]
 8012724:	4638      	mov	r0, r7
 8012726:	f8cc 3000 	str.w	r3, [ip]
 801272a:	f8c4 e03c 	str.w	lr, [r4, #60]	; 0x3c
 801272e:	60e6      	str	r6, [r4, #12]
 8012730:	f7ff fe12 	bl	8012358 <rmw_get_default_security_options>
 8012734:	f104 0310 	add.w	r3, r4, #16
 8012738:	2203      	movs	r2, #3
 801273a:	e897 0003 	ldmia.w	r7, {r0, r1}
 801273e:	e883 0003 	stmia.w	r3, {r0, r1}
 8012742:	4816      	ldr	r0, [pc, #88]	; (801279c <rmw_init_options_init+0xc0>)
 8012744:	4916      	ldr	r1, [pc, #88]	; (80127a0 <rmw_init_options_init+0xc4>)
 8012746:	7626      	strb	r6, [r4, #24]
 8012748:	f001 f950 	bl	80139ec <rmw_uxrce_init_init_options_impl_memory>
 801274c:	4813      	ldr	r0, [pc, #76]	; (801279c <rmw_init_options_init+0xc0>)
 801274e:	f005 fcf5 	bl	801813c <get_memory>
 8012752:	b1f0      	cbz	r0, 8012792 <rmw_init_options_init+0xb6>
 8012754:	4a13      	ldr	r2, [pc, #76]	; (80127a4 <rmw_init_options_init+0xc8>)
 8012756:	6883      	ldr	r3, [r0, #8]
 8012758:	6851      	ldr	r1, [r2, #4]
 801275a:	6563      	str	r3, [r4, #84]	; 0x54
 801275c:	7810      	ldrb	r0, [r2, #0]
 801275e:	6159      	str	r1, [r3, #20]
 8012760:	68d1      	ldr	r1, [r2, #12]
 8012762:	7418      	strb	r0, [r3, #16]
 8012764:	61d9      	str	r1, [r3, #28]
 8012766:	6911      	ldr	r1, [r2, #16]
 8012768:	6219      	str	r1, [r3, #32]
 801276a:	6951      	ldr	r1, [r2, #20]
 801276c:	6892      	ldr	r2, [r2, #8]
 801276e:	6259      	str	r1, [r3, #36]	; 0x24
 8012770:	619a      	str	r2, [r3, #24]
 8012772:	f003 fe1b 	bl	80163ac <uxr_nanos>
 8012776:	f006 fc71 	bl	801905c <srand>
 801277a:	f006 fc9d 	bl	80190b8 <rand>
 801277e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8012780:	6298      	str	r0, [r3, #40]	; 0x28
 8012782:	2800      	cmp	r0, #0
 8012784:	d0f9      	beq.n	801277a <rmw_init_options_init+0x9e>
 8012786:	2000      	movs	r0, #0
 8012788:	b003      	add	sp, #12
 801278a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801278e:	b004      	add	sp, #16
 8012790:	4770      	bx	lr
 8012792:	2001      	movs	r0, #1
 8012794:	e7b1      	b.n	80126fa <rmw_init_options_init+0x1e>
 8012796:	bf00      	nop
 8012798:	0801bea0 	.word	0x0801bea0
 801279c:	200108ac 	.word	0x200108ac
 80127a0:	2000c080 	.word	0x2000c080
 80127a4:	2000b94c 	.word	0x2000b94c
 80127a8:	0801b4a8 	.word	0x0801b4a8

080127ac <rmw_init_options_copy>:
 80127ac:	b570      	push	{r4, r5, r6, lr}
 80127ae:	b158      	cbz	r0, 80127c8 <rmw_init_options_copy+0x1c>
 80127b0:	460d      	mov	r5, r1
 80127b2:	b149      	cbz	r1, 80127c8 <rmw_init_options_copy+0x1c>
 80127b4:	4604      	mov	r4, r0
 80127b6:	6880      	ldr	r0, [r0, #8]
 80127b8:	b120      	cbz	r0, 80127c4 <rmw_init_options_copy+0x18>
 80127ba:	4b13      	ldr	r3, [pc, #76]	; (8012808 <rmw_init_options_copy+0x5c>)
 80127bc:	6819      	ldr	r1, [r3, #0]
 80127be:	f7ed fd3f 	bl	8000240 <strcmp>
 80127c2:	b9d8      	cbnz	r0, 80127fc <rmw_init_options_copy+0x50>
 80127c4:	68ae      	ldr	r6, [r5, #8]
 80127c6:	b116      	cbz	r6, 80127ce <rmw_init_options_copy+0x22>
 80127c8:	260b      	movs	r6, #11
 80127ca:	4630      	mov	r0, r6
 80127cc:	bd70      	pop	{r4, r5, r6, pc}
 80127ce:	2258      	movs	r2, #88	; 0x58
 80127d0:	4621      	mov	r1, r4
 80127d2:	4628      	mov	r0, r5
 80127d4:	f007 f873 	bl	80198be <memcpy>
 80127d8:	480c      	ldr	r0, [pc, #48]	; (801280c <rmw_init_options_copy+0x60>)
 80127da:	f005 fcaf 	bl	801813c <get_memory>
 80127de:	b180      	cbz	r0, 8012802 <rmw_init_options_copy+0x56>
 80127e0:	6883      	ldr	r3, [r0, #8]
 80127e2:	656b      	str	r3, [r5, #84]	; 0x54
 80127e4:	6d65      	ldr	r5, [r4, #84]	; 0x54
 80127e6:	f103 0410 	add.w	r4, r3, #16
 80127ea:	3510      	adds	r5, #16
 80127ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80127ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80127f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80127f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80127f8:	4630      	mov	r0, r6
 80127fa:	bd70      	pop	{r4, r5, r6, pc}
 80127fc:	260c      	movs	r6, #12
 80127fe:	4630      	mov	r0, r6
 8012800:	bd70      	pop	{r4, r5, r6, pc}
 8012802:	2601      	movs	r6, #1
 8012804:	e7e1      	b.n	80127ca <rmw_init_options_copy+0x1e>
 8012806:	bf00      	nop
 8012808:	0801bea0 	.word	0x0801bea0
 801280c:	200108ac 	.word	0x200108ac

08012810 <rmw_init_options_fini>:
 8012810:	b368      	cbz	r0, 801286e <rmw_init_options_fini+0x5e>
 8012812:	b510      	push	{r4, lr}
 8012814:	4604      	mov	r4, r0
 8012816:	b096      	sub	sp, #88	; 0x58
 8012818:	3040      	adds	r0, #64	; 0x40
 801281a:	f7f9 fc7d 	bl	800c118 <rcutils_allocator_is_valid>
 801281e:	b1f0      	cbz	r0, 801285e <rmw_init_options_fini+0x4e>
 8012820:	68a0      	ldr	r0, [r4, #8]
 8012822:	b120      	cbz	r0, 801282e <rmw_init_options_fini+0x1e>
 8012824:	4b13      	ldr	r3, [pc, #76]	; (8012874 <rmw_init_options_fini+0x64>)
 8012826:	6819      	ldr	r1, [r3, #0]
 8012828:	f7ed fd0a 	bl	8000240 <strcmp>
 801282c:	b9e8      	cbnz	r0, 801286a <rmw_init_options_fini+0x5a>
 801282e:	4b12      	ldr	r3, [pc, #72]	; (8012878 <rmw_init_options_fini+0x68>)
 8012830:	6819      	ldr	r1, [r3, #0]
 8012832:	b1b9      	cbz	r1, 8012864 <rmw_init_options_fini+0x54>
 8012834:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8012836:	e001      	b.n	801283c <rmw_init_options_fini+0x2c>
 8012838:	6849      	ldr	r1, [r1, #4]
 801283a:	b199      	cbz	r1, 8012864 <rmw_init_options_fini+0x54>
 801283c:	688b      	ldr	r3, [r1, #8]
 801283e:	429a      	cmp	r2, r3
 8012840:	d1fa      	bne.n	8012838 <rmw_init_options_fini+0x28>
 8012842:	480d      	ldr	r0, [pc, #52]	; (8012878 <rmw_init_options_fini+0x68>)
 8012844:	f005 fc8a 	bl	801815c <put_memory>
 8012848:	4668      	mov	r0, sp
 801284a:	f7ff fd71 	bl	8012330 <rmw_get_zero_initialized_init_options>
 801284e:	2258      	movs	r2, #88	; 0x58
 8012850:	4669      	mov	r1, sp
 8012852:	4620      	mov	r0, r4
 8012854:	f007 f833 	bl	80198be <memcpy>
 8012858:	2000      	movs	r0, #0
 801285a:	b016      	add	sp, #88	; 0x58
 801285c:	bd10      	pop	{r4, pc}
 801285e:	200b      	movs	r0, #11
 8012860:	b016      	add	sp, #88	; 0x58
 8012862:	bd10      	pop	{r4, pc}
 8012864:	2001      	movs	r0, #1
 8012866:	b016      	add	sp, #88	; 0x58
 8012868:	bd10      	pop	{r4, pc}
 801286a:	200c      	movs	r0, #12
 801286c:	e7f5      	b.n	801285a <rmw_init_options_fini+0x4a>
 801286e:	200b      	movs	r0, #11
 8012870:	4770      	bx	lr
 8012872:	bf00      	nop
 8012874:	0801bea0 	.word	0x0801bea0
 8012878:	200108ac 	.word	0x200108ac

0801287c <rmw_init>:
 801287c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012880:	b083      	sub	sp, #12
 8012882:	2800      	cmp	r0, #0
 8012884:	f000 80d3 	beq.w	8012a2e <rmw_init+0x1b2>
 8012888:	460e      	mov	r6, r1
 801288a:	2900      	cmp	r1, #0
 801288c:	f000 80cf 	beq.w	8012a2e <rmw_init+0x1b2>
 8012890:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8012892:	4605      	mov	r5, r0
 8012894:	2b00      	cmp	r3, #0
 8012896:	f000 80ca 	beq.w	8012a2e <rmw_init+0x1b2>
 801289a:	4b78      	ldr	r3, [pc, #480]	; (8012a7c <rmw_init+0x200>)
 801289c:	6880      	ldr	r0, [r0, #8]
 801289e:	681f      	ldr	r7, [r3, #0]
 80128a0:	b128      	cbz	r0, 80128ae <rmw_init+0x32>
 80128a2:	4639      	mov	r1, r7
 80128a4:	f7ed fccc 	bl	8000240 <strcmp>
 80128a8:	2800      	cmp	r0, #0
 80128aa:	f040 80ca 	bne.w	8012a42 <rmw_init+0x1c6>
 80128ae:	4c74      	ldr	r4, [pc, #464]	; (8012a80 <rmw_init+0x204>)
 80128b0:	f04f 0800 	mov.w	r8, #0
 80128b4:	4973      	ldr	r1, [pc, #460]	; (8012a84 <rmw_init+0x208>)
 80128b6:	4874      	ldr	r0, [pc, #464]	; (8012a88 <rmw_init+0x20c>)
 80128b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80128bc:	60b7      	str	r7, [r6, #8]
 80128be:	e9c6 2300 	strd	r2, r3, [r6]
 80128c2:	68eb      	ldr	r3, [r5, #12]
 80128c4:	2201      	movs	r2, #1
 80128c6:	66b3      	str	r3, [r6, #104]	; 0x68
 80128c8:	f001 f830 	bl	801392c <rmw_uxrce_init_session_memory>
 80128cc:	4620      	mov	r0, r4
 80128ce:	2204      	movs	r2, #4
 80128d0:	496e      	ldr	r1, [pc, #440]	; (8012a8c <rmw_init+0x210>)
 80128d2:	f001 f86b 	bl	80139ac <rmw_uxrce_init_static_input_buffer_memory>
 80128d6:	486c      	ldr	r0, [pc, #432]	; (8012a88 <rmw_init+0x20c>)
 80128d8:	f884 800d 	strb.w	r8, [r4, #13]
 80128dc:	f005 fc2e 	bl	801813c <get_memory>
 80128e0:	2800      	cmp	r0, #0
 80128e2:	f000 80a9 	beq.w	8012a38 <rmw_init+0x1bc>
 80128e6:	6884      	ldr	r4, [r0, #8]
 80128e8:	6d68      	ldr	r0, [r5, #84]	; 0x54
 80128ea:	f104 0910 	add.w	r9, r4, #16
 80128ee:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80128f0:	f890 c010 	ldrb.w	ip, [r0, #16]
 80128f4:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 80128f8:	9101      	str	r1, [sp, #4]
 80128fa:	4661      	mov	r1, ip
 80128fc:	6a00      	ldr	r0, [r0, #32]
 80128fe:	9000      	str	r0, [sp, #0]
 8012900:	4648      	mov	r0, r9
 8012902:	f001 fcfb 	bl	80142fc <uxr_set_custom_transport_callbacks>
 8012906:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801290a:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 801290e:	4960      	ldr	r1, [pc, #384]	; (8012a90 <rmw_init+0x214>)
 8012910:	4860      	ldr	r0, [pc, #384]	; (8012a94 <rmw_init+0x218>)
 8012912:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8012916:	f504 725e 	add.w	r2, r4, #888	; 0x378
 801291a:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 801291e:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 8012922:	2201      	movs	r2, #1
 8012924:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 8012928:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 801292c:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 8012930:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 8012934:	66f4      	str	r4, [r6, #108]	; 0x6c
 8012936:	f000 ffd9 	bl	80138ec <rmw_uxrce_init_node_memory>
 801293a:	2205      	movs	r2, #5
 801293c:	4956      	ldr	r1, [pc, #344]	; (8012a98 <rmw_init+0x21c>)
 801293e:	4857      	ldr	r0, [pc, #348]	; (8012a9c <rmw_init+0x220>)
 8012940:	f000 ffb4 	bl	80138ac <rmw_uxrce_init_subscription_memory>
 8012944:	220a      	movs	r2, #10
 8012946:	4956      	ldr	r1, [pc, #344]	; (8012aa0 <rmw_init+0x224>)
 8012948:	4856      	ldr	r0, [pc, #344]	; (8012aa4 <rmw_init+0x228>)
 801294a:	f000 ff8f 	bl	801386c <rmw_uxrce_init_publisher_memory>
 801294e:	2202      	movs	r2, #2
 8012950:	4955      	ldr	r1, [pc, #340]	; (8012aa8 <rmw_init+0x22c>)
 8012952:	4856      	ldr	r0, [pc, #344]	; (8012aac <rmw_init+0x230>)
 8012954:	f000 ff4a 	bl	80137ec <rmw_uxrce_init_service_memory>
 8012958:	2201      	movs	r2, #1
 801295a:	4955      	ldr	r1, [pc, #340]	; (8012ab0 <rmw_init+0x234>)
 801295c:	4855      	ldr	r0, [pc, #340]	; (8012ab4 <rmw_init+0x238>)
 801295e:	f000 ff65 	bl	801382c <rmw_uxrce_init_client_memory>
 8012962:	220f      	movs	r2, #15
 8012964:	4954      	ldr	r1, [pc, #336]	; (8012ab8 <rmw_init+0x23c>)
 8012966:	4855      	ldr	r0, [pc, #340]	; (8012abc <rmw_init+0x240>)
 8012968:	f001 f800 	bl	801396c <rmw_uxrce_init_topic_memory>
 801296c:	2203      	movs	r2, #3
 801296e:	4954      	ldr	r1, [pc, #336]	; (8012ac0 <rmw_init+0x244>)
 8012970:	4854      	ldr	r0, [pc, #336]	; (8012ac4 <rmw_init+0x248>)
 8012972:	f001 f83b 	bl	80139ec <rmw_uxrce_init_init_options_impl_memory>
 8012976:	2204      	movs	r2, #4
 8012978:	4953      	ldr	r1, [pc, #332]	; (8012ac8 <rmw_init+0x24c>)
 801297a:	4854      	ldr	r0, [pc, #336]	; (8012acc <rmw_init+0x250>)
 801297c:	f001 f856 	bl	8013a2c <rmw_uxrce_init_wait_set_memory>
 8012980:	4953      	ldr	r1, [pc, #332]	; (8012ad0 <rmw_init+0x254>)
 8012982:	4854      	ldr	r0, [pc, #336]	; (8012ad4 <rmw_init+0x258>)
 8012984:	2204      	movs	r2, #4
 8012986:	f001 f871 	bl	8013a6c <rmw_uxrce_init_guard_condition_memory>
 801298a:	4642      	mov	r2, r8
 801298c:	6d69      	ldr	r1, [r5, #84]	; 0x54
 801298e:	6ef0      	ldr	r0, [r6, #108]	; 0x6c
 8012990:	f000 fd92 	bl	80134b8 <rmw_uxrce_transport_init>
 8012994:	4607      	mov	r7, r0
 8012996:	2800      	cmp	r0, #0
 8012998:	d158      	bne.n	8012a4c <rmw_init+0x1d0>
 801299a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 801299c:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 80129a0:	f504 7122 	add.w	r1, r4, #648	; 0x288
 80129a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80129a6:	4628      	mov	r0, r5
 80129a8:	f001 feda 	bl	8014760 <uxr_init_session>
 80129ac:	4622      	mov	r2, r4
 80129ae:	494a      	ldr	r1, [pc, #296]	; (8012ad8 <rmw_init+0x25c>)
 80129b0:	4628      	mov	r0, r5
 80129b2:	f001 fef9 	bl	80147a8 <uxr_set_topic_callback>
 80129b6:	463a      	mov	r2, r7
 80129b8:	4948      	ldr	r1, [pc, #288]	; (8012adc <rmw_init+0x260>)
 80129ba:	4628      	mov	r0, r5
 80129bc:	f001 fef0 	bl	80147a0 <uxr_set_status_callback>
 80129c0:	463a      	mov	r2, r7
 80129c2:	4947      	ldr	r1, [pc, #284]	; (8012ae0 <rmw_init+0x264>)
 80129c4:	4628      	mov	r0, r5
 80129c6:	f001 fef3 	bl	80147b0 <uxr_set_request_callback>
 80129ca:	463a      	mov	r2, r7
 80129cc:	4945      	ldr	r1, [pc, #276]	; (8012ae4 <rmw_init+0x268>)
 80129ce:	4628      	mov	r0, r5
 80129d0:	f001 fef2 	bl	80147b8 <uxr_set_reply_callback>
 80129d4:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 80129d8:	2304      	movs	r3, #4
 80129da:	f504 7165 	add.w	r1, r4, #916	; 0x394
 80129de:	0092      	lsls	r2, r2, #2
 80129e0:	4628      	mov	r0, r5
 80129e2:	f001 ff29 	bl	8014838 <uxr_create_input_reliable_stream>
 80129e6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 80129ea:	2304      	movs	r3, #4
 80129ec:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 80129f0:	0092      	lsls	r2, r2, #2
 80129f2:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 80129f6:	4628      	mov	r0, r5
 80129f8:	f001 fef4 	bl	80147e4 <uxr_create_output_reliable_stream>
 80129fc:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8012a00:	4628      	mov	r0, r5
 8012a02:	f001 ff13 	bl	801482c <uxr_create_input_best_effort_stream>
 8012a06:	f241 3194 	movw	r1, #5012	; 0x1394
 8012a0a:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8012a0e:	4628      	mov	r0, r5
 8012a10:	4421      	add	r1, r4
 8012a12:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8012a16:	f001 fed3 	bl	80147c0 <uxr_create_output_best_effort_stream>
 8012a1a:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 8012a1e:	4628      	mov	r0, r5
 8012a20:	f002 fc5c 	bl	80152dc <uxr_create_session>
 8012a24:	b1f8      	cbz	r0, 8012a66 <rmw_init+0x1ea>
 8012a26:	4638      	mov	r0, r7
 8012a28:	b003      	add	sp, #12
 8012a2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a2e:	270b      	movs	r7, #11
 8012a30:	4638      	mov	r0, r7
 8012a32:	b003      	add	sp, #12
 8012a34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a38:	2701      	movs	r7, #1
 8012a3a:	4638      	mov	r0, r7
 8012a3c:	b003      	add	sp, #12
 8012a3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a42:	270c      	movs	r7, #12
 8012a44:	4638      	mov	r0, r7
 8012a46:	b003      	add	sp, #12
 8012a48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a4c:	4648      	mov	r0, r9
 8012a4e:	f001 fc93 	bl	8014378 <uxr_close_custom_transport>
 8012a52:	4621      	mov	r1, r4
 8012a54:	480c      	ldr	r0, [pc, #48]	; (8012a88 <rmw_init+0x20c>)
 8012a56:	f005 fb81 	bl	801815c <put_memory>
 8012a5a:	4638      	mov	r0, r7
 8012a5c:	f8c6 806c 	str.w	r8, [r6, #108]	; 0x6c
 8012a60:	b003      	add	sp, #12
 8012a62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a66:	4648      	mov	r0, r9
 8012a68:	f001 fc86 	bl	8014378 <uxr_close_custom_transport>
 8012a6c:	4621      	mov	r1, r4
 8012a6e:	4806      	ldr	r0, [pc, #24]	; (8012a88 <rmw_init+0x20c>)
 8012a70:	f005 fb74 	bl	801815c <put_memory>
 8012a74:	66f7      	str	r7, [r6, #108]	; 0x6c
 8012a76:	2701      	movs	r7, #1
 8012a78:	e7d5      	b.n	8012a26 <rmw_init+0x1aa>
 8012a7a:	bf00      	nop
 8012a7c:	0801bea0 	.word	0x0801bea0
 8012a80:	200108fc 	.word	0x200108fc
 8012a84:	2000cba8 	.word	0x2000cba8
 8012a88:	200108ec 	.word	0x200108ec
 8012a8c:	2000e150 	.word	0x2000e150
 8012a90:	2000c104 	.word	0x2000c104
 8012a94:	200108bc 	.word	0x200108bc
 8012a98:	20010250 	.word	0x20010250
 8012a9c:	2001090c 	.word	0x2001090c
 8012aa0:	2000c1a8 	.word	0x2000c1a8
 8012aa4:	200108cc 	.word	0x200108cc
 8012aa8:	2000ca18 	.word	0x2000ca18
 8012aac:	200108dc 	.word	0x200108dc
 8012ab0:	2000bf38 	.word	0x2000bf38
 8012ab4:	2000bf28 	.word	0x2000bf28
 8012ab8:	20010688 	.word	0x20010688
 8012abc:	2001091c 	.word	0x2001091c
 8012ac0:	2000c080 	.word	0x2000c080
 8012ac4:	200108ac 	.word	0x200108ac
 8012ac8:	2001082c 	.word	0x2001082c
 8012acc:	2001092c 	.word	0x2001092c
 8012ad0:	2000c000 	.word	0x2000c000
 8012ad4:	2001089c 	.word	0x2001089c
 8012ad8:	08017f75 	.word	0x08017f75
 8012adc:	08017f6d 	.word	0x08017f6d
 8012ae0:	0801800d 	.word	0x0801800d
 8012ae4:	080180a9 	.word	0x080180a9

08012ae8 <rmw_context_fini>:
 8012ae8:	4b17      	ldr	r3, [pc, #92]	; (8012b48 <rmw_context_fini+0x60>)
 8012aea:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8012aec:	b570      	push	{r4, r5, r6, lr}
 8012aee:	681c      	ldr	r4, [r3, #0]
 8012af0:	4605      	mov	r5, r0
 8012af2:	b334      	cbz	r4, 8012b42 <rmw_context_fini+0x5a>
 8012af4:	2600      	movs	r6, #0
 8012af6:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8012afa:	6902      	ldr	r2, [r0, #16]
 8012afc:	428a      	cmp	r2, r1
 8012afe:	d018      	beq.n	8012b32 <rmw_context_fini+0x4a>
 8012b00:	2c00      	cmp	r4, #0
 8012b02:	d1f8      	bne.n	8012af6 <rmw_context_fini+0xe>
 8012b04:	b189      	cbz	r1, 8012b2a <rmw_context_fini+0x42>
 8012b06:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 8012b0a:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 8012b0e:	789b      	ldrb	r3, [r3, #2]
 8012b10:	2b01      	cmp	r3, #1
 8012b12:	bf14      	ite	ne
 8012b14:	210a      	movne	r1, #10
 8012b16:	2100      	moveq	r1, #0
 8012b18:	f002 fbb8 	bl	801528c <uxr_delete_session_retries>
 8012b1c:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8012b1e:	f000 ffc5 	bl	8013aac <rmw_uxrce_fini_session_memory>
 8012b22:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8012b24:	3010      	adds	r0, #16
 8012b26:	f001 fc27 	bl	8014378 <uxr_close_custom_transport>
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	4630      	mov	r0, r6
 8012b2e:	66eb      	str	r3, [r5, #108]	; 0x6c
 8012b30:	bd70      	pop	{r4, r5, r6, pc}
 8012b32:	3018      	adds	r0, #24
 8012b34:	f000 f89c 	bl	8012c70 <rmw_destroy_node>
 8012b38:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 8012b3a:	4606      	mov	r6, r0
 8012b3c:	2c00      	cmp	r4, #0
 8012b3e:	d1da      	bne.n	8012af6 <rmw_context_fini+0xe>
 8012b40:	e7e0      	b.n	8012b04 <rmw_context_fini+0x1c>
 8012b42:	4626      	mov	r6, r4
 8012b44:	e7de      	b.n	8012b04 <rmw_context_fini+0x1c>
 8012b46:	bf00      	nop
 8012b48:	200108bc 	.word	0x200108bc

08012b4c <create_node>:
 8012b4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012b50:	b083      	sub	sp, #12
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d064      	beq.n	8012c20 <create_node+0xd4>
 8012b56:	4606      	mov	r6, r0
 8012b58:	4838      	ldr	r0, [pc, #224]	; (8012c3c <create_node+0xf0>)
 8012b5a:	460f      	mov	r7, r1
 8012b5c:	4690      	mov	r8, r2
 8012b5e:	461d      	mov	r5, r3
 8012b60:	f005 faec 	bl	801813c <get_memory>
 8012b64:	2800      	cmp	r0, #0
 8012b66:	d05b      	beq.n	8012c20 <create_node+0xd4>
 8012b68:	6884      	ldr	r4, [r0, #8]
 8012b6a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8012b6c:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 8012b70:	f104 0518 	add.w	r5, r4, #24
 8012b74:	6123      	str	r3, [r4, #16]
 8012b76:	f7ff fdab 	bl	80126d0 <rmw_get_implementation_identifier>
 8012b7a:	f8c4 9020 	str.w	r9, [r4, #32]
 8012b7e:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8012b82:	4630      	mov	r0, r6
 8012b84:	f7ed fbbc 	bl	8000300 <strlen>
 8012b88:	1c42      	adds	r2, r0, #1
 8012b8a:	2a3c      	cmp	r2, #60	; 0x3c
 8012b8c:	d840      	bhi.n	8012c10 <create_node+0xc4>
 8012b8e:	4648      	mov	r0, r9
 8012b90:	f104 0968 	add.w	r9, r4, #104	; 0x68
 8012b94:	4631      	mov	r1, r6
 8012b96:	f006 fe92 	bl	80198be <memcpy>
 8012b9a:	4638      	mov	r0, r7
 8012b9c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8012ba0:	f7ed fbae 	bl	8000300 <strlen>
 8012ba4:	1c42      	adds	r2, r0, #1
 8012ba6:	2a3c      	cmp	r2, #60	; 0x3c
 8012ba8:	d832      	bhi.n	8012c10 <create_node+0xc4>
 8012baa:	4639      	mov	r1, r7
 8012bac:	4648      	mov	r0, r9
 8012bae:	f006 fe86 	bl	80198be <memcpy>
 8012bb2:	6923      	ldr	r3, [r4, #16]
 8012bb4:	2101      	movs	r1, #1
 8012bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012bba:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 8012bbe:	1842      	adds	r2, r0, r1
 8012bc0:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 8012bc4:	f001 fbdc 	bl	8014380 <uxr_object_id>
 8012bc8:	6160      	str	r0, [r4, #20]
 8012bca:	783b      	ldrb	r3, [r7, #0]
 8012bcc:	2b2f      	cmp	r3, #47	; 0x2f
 8012bce:	d12c      	bne.n	8012c2a <create_node+0xde>
 8012bd0:	787b      	ldrb	r3, [r7, #1]
 8012bd2:	bb53      	cbnz	r3, 8012c2a <create_node+0xde>
 8012bd4:	4633      	mov	r3, r6
 8012bd6:	4a1a      	ldr	r2, [pc, #104]	; (8012c40 <create_node+0xf4>)
 8012bd8:	213c      	movs	r1, #60	; 0x3c
 8012bda:	481a      	ldr	r0, [pc, #104]	; (8012c44 <create_node+0xf8>)
 8012bdc:	f006 fc20 	bl	8019420 <sniprintf>
 8012be0:	6920      	ldr	r0, [r4, #16]
 8012be2:	2106      	movs	r1, #6
 8012be4:	fa1f f388 	uxth.w	r3, r8
 8012be8:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8012bec:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012bf0:	9101      	str	r1, [sp, #4]
 8012bf2:	4914      	ldr	r1, [pc, #80]	; (8012c44 <create_node+0xf8>)
 8012bf4:	9100      	str	r1, [sp, #0]
 8012bf6:	6811      	ldr	r1, [r2, #0]
 8012bf8:	6962      	ldr	r2, [r4, #20]
 8012bfa:	f001 fa97 	bl	801412c <uxr_buffer_create_participant_bin>
 8012bfe:	4602      	mov	r2, r0
 8012c00:	6920      	ldr	r0, [r4, #16]
 8012c02:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8012c06:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8012c0a:	f001 f8d3 	bl	8013db4 <run_xrce_session>
 8012c0e:	b918      	cbnz	r0, 8012c18 <create_node+0xcc>
 8012c10:	4628      	mov	r0, r5
 8012c12:	2500      	movs	r5, #0
 8012c14:	f000 ff50 	bl	8013ab8 <rmw_uxrce_fini_node_memory>
 8012c18:	4628      	mov	r0, r5
 8012c1a:	b003      	add	sp, #12
 8012c1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c20:	2500      	movs	r5, #0
 8012c22:	4628      	mov	r0, r5
 8012c24:	b003      	add	sp, #12
 8012c26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c2a:	463b      	mov	r3, r7
 8012c2c:	4a06      	ldr	r2, [pc, #24]	; (8012c48 <create_node+0xfc>)
 8012c2e:	213c      	movs	r1, #60	; 0x3c
 8012c30:	9600      	str	r6, [sp, #0]
 8012c32:	4804      	ldr	r0, [pc, #16]	; (8012c44 <create_node+0xf8>)
 8012c34:	f006 fbf4 	bl	8019420 <sniprintf>
 8012c38:	e7d2      	b.n	8012be0 <create_node+0x94>
 8012c3a:	bf00      	nop
 8012c3c:	200108bc 	.word	0x200108bc
 8012c40:	0801ba44 	.word	0x0801ba44
 8012c44:	2000bdac 	.word	0x2000bdac
 8012c48:	0801b4b8 	.word	0x0801b4b8

08012c4c <rmw_create_node>:
 8012c4c:	468c      	mov	ip, r1
 8012c4e:	4611      	mov	r1, r2
 8012c50:	f1bc 0f00 	cmp.w	ip, #0
 8012c54:	d00a      	beq.n	8012c6c <rmw_create_node+0x20>
 8012c56:	f89c 3000 	ldrb.w	r3, [ip]
 8012c5a:	b13b      	cbz	r3, 8012c6c <rmw_create_node+0x20>
 8012c5c:	b132      	cbz	r2, 8012c6c <rmw_create_node+0x20>
 8012c5e:	7813      	ldrb	r3, [r2, #0]
 8012c60:	b123      	cbz	r3, 8012c6c <rmw_create_node+0x20>
 8012c62:	4603      	mov	r3, r0
 8012c64:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8012c66:	4660      	mov	r0, ip
 8012c68:	f7ff bf70 	b.w	8012b4c <create_node>
 8012c6c:	2000      	movs	r0, #0
 8012c6e:	4770      	bx	lr

08012c70 <rmw_destroy_node>:
 8012c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c72:	b328      	cbz	r0, 8012cc0 <rmw_destroy_node+0x50>
 8012c74:	4607      	mov	r7, r0
 8012c76:	6800      	ldr	r0, [r0, #0]
 8012c78:	b120      	cbz	r0, 8012c84 <rmw_destroy_node+0x14>
 8012c7a:	4b37      	ldr	r3, [pc, #220]	; (8012d58 <rmw_destroy_node+0xe8>)
 8012c7c:	6819      	ldr	r1, [r3, #0]
 8012c7e:	f7ed fadf 	bl	8000240 <strcmp>
 8012c82:	b9e8      	cbnz	r0, 8012cc0 <rmw_destroy_node+0x50>
 8012c84:	687d      	ldr	r5, [r7, #4]
 8012c86:	b1dd      	cbz	r5, 8012cc0 <rmw_destroy_node+0x50>
 8012c88:	4b34      	ldr	r3, [pc, #208]	; (8012d5c <rmw_destroy_node+0xec>)
 8012c8a:	681c      	ldr	r4, [r3, #0]
 8012c8c:	2c00      	cmp	r4, #0
 8012c8e:	d060      	beq.n	8012d52 <rmw_destroy_node+0xe2>
 8012c90:	2600      	movs	r6, #0
 8012c92:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8012c96:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8012c9a:	429d      	cmp	r5, r3
 8012c9c:	d013      	beq.n	8012cc6 <rmw_destroy_node+0x56>
 8012c9e:	2c00      	cmp	r4, #0
 8012ca0:	d1f7      	bne.n	8012c92 <rmw_destroy_node+0x22>
 8012ca2:	4b2f      	ldr	r3, [pc, #188]	; (8012d60 <rmw_destroy_node+0xf0>)
 8012ca4:	681c      	ldr	r4, [r3, #0]
 8012ca6:	b1c4      	cbz	r4, 8012cda <rmw_destroy_node+0x6a>
 8012ca8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8012cac:	6a0b      	ldr	r3, [r1, #32]
 8012cae:	429d      	cmp	r5, r3
 8012cb0:	d1f9      	bne.n	8012ca6 <rmw_destroy_node+0x36>
 8012cb2:	317c      	adds	r1, #124	; 0x7c
 8012cb4:	4638      	mov	r0, r7
 8012cb6:	f000 fb49 	bl	801334c <rmw_destroy_subscription>
 8012cba:	2801      	cmp	r0, #1
 8012cbc:	4606      	mov	r6, r0
 8012cbe:	d1f2      	bne.n	8012ca6 <rmw_destroy_node+0x36>
 8012cc0:	2601      	movs	r6, #1
 8012cc2:	4630      	mov	r0, r6
 8012cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012cc6:	3184      	adds	r1, #132	; 0x84
 8012cc8:	4638      	mov	r0, r7
 8012cca:	f000 f855 	bl	8012d78 <rmw_destroy_publisher>
 8012cce:	2801      	cmp	r0, #1
 8012cd0:	4606      	mov	r6, r0
 8012cd2:	d0f5      	beq.n	8012cc0 <rmw_destroy_node+0x50>
 8012cd4:	2c00      	cmp	r4, #0
 8012cd6:	d1dc      	bne.n	8012c92 <rmw_destroy_node+0x22>
 8012cd8:	e7e3      	b.n	8012ca2 <rmw_destroy_node+0x32>
 8012cda:	4b22      	ldr	r3, [pc, #136]	; (8012d64 <rmw_destroy_node+0xf4>)
 8012cdc:	681c      	ldr	r4, [r3, #0]
 8012cde:	b16c      	cbz	r4, 8012cfc <rmw_destroy_node+0x8c>
 8012ce0:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8012ce4:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8012ce6:	429d      	cmp	r5, r3
 8012ce8:	d1f9      	bne.n	8012cde <rmw_destroy_node+0x6e>
 8012cea:	317c      	adds	r1, #124	; 0x7c
 8012cec:	4638      	mov	r0, r7
 8012cee:	f000 fac1 	bl	8013274 <rmw_destroy_service>
 8012cf2:	2801      	cmp	r0, #1
 8012cf4:	4606      	mov	r6, r0
 8012cf6:	d0e3      	beq.n	8012cc0 <rmw_destroy_node+0x50>
 8012cf8:	2c00      	cmp	r4, #0
 8012cfa:	d1f1      	bne.n	8012ce0 <rmw_destroy_node+0x70>
 8012cfc:	4b1a      	ldr	r3, [pc, #104]	; (8012d68 <rmw_destroy_node+0xf8>)
 8012cfe:	681c      	ldr	r4, [r3, #0]
 8012d00:	b16c      	cbz	r4, 8012d1e <rmw_destroy_node+0xae>
 8012d02:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8012d06:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8012d08:	429d      	cmp	r5, r3
 8012d0a:	d1f9      	bne.n	8012d00 <rmw_destroy_node+0x90>
 8012d0c:	317c      	adds	r1, #124	; 0x7c
 8012d0e:	4638      	mov	r0, r7
 8012d10:	f7ff fc7c 	bl	801260c <rmw_destroy_client>
 8012d14:	2801      	cmp	r0, #1
 8012d16:	4606      	mov	r6, r0
 8012d18:	d0d2      	beq.n	8012cc0 <rmw_destroy_node+0x50>
 8012d1a:	2c00      	cmp	r4, #0
 8012d1c:	d1f1      	bne.n	8012d02 <rmw_destroy_node+0x92>
 8012d1e:	6928      	ldr	r0, [r5, #16]
 8012d20:	696a      	ldr	r2, [r5, #20]
 8012d22:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012d26:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012d2a:	6819      	ldr	r1, [r3, #0]
 8012d2c:	f001 f9b2 	bl	8014094 <uxr_buffer_delete_entity>
 8012d30:	4602      	mov	r2, r0
 8012d32:	6928      	ldr	r0, [r5, #16]
 8012d34:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8012d38:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8012d3c:	f001 f83a 	bl	8013db4 <run_xrce_session>
 8012d40:	4603      	mov	r3, r0
 8012d42:	4638      	mov	r0, r7
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	bf08      	it	eq
 8012d48:	2602      	moveq	r6, #2
 8012d4a:	f000 feb5 	bl	8013ab8 <rmw_uxrce_fini_node_memory>
 8012d4e:	4630      	mov	r0, r6
 8012d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d52:	4626      	mov	r6, r4
 8012d54:	e7a5      	b.n	8012ca2 <rmw_destroy_node+0x32>
 8012d56:	bf00      	nop
 8012d58:	0801bea0 	.word	0x0801bea0
 8012d5c:	200108cc 	.word	0x200108cc
 8012d60:	2001090c 	.word	0x2001090c
 8012d64:	200108dc 	.word	0x200108dc
 8012d68:	2000bf28 	.word	0x2000bf28

08012d6c <rmw_node_get_graph_guard_condition>:
 8012d6c:	6843      	ldr	r3, [r0, #4]
 8012d6e:	6918      	ldr	r0, [r3, #16]
 8012d70:	f500 705a 	add.w	r0, r0, #872	; 0x368
 8012d74:	4770      	bx	lr
 8012d76:	bf00      	nop

08012d78 <rmw_destroy_publisher>:
 8012d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d7c:	b128      	cbz	r0, 8012d8a <rmw_destroy_publisher+0x12>
 8012d7e:	4604      	mov	r4, r0
 8012d80:	6800      	ldr	r0, [r0, #0]
 8012d82:	460d      	mov	r5, r1
 8012d84:	f001 f8e2 	bl	8013f4c <is_uxrce_rmw_identifier_valid>
 8012d88:	b918      	cbnz	r0, 8012d92 <rmw_destroy_publisher+0x1a>
 8012d8a:	2401      	movs	r4, #1
 8012d8c:	4620      	mov	r0, r4
 8012d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d92:	6863      	ldr	r3, [r4, #4]
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d0f8      	beq.n	8012d8a <rmw_destroy_publisher+0x12>
 8012d98:	fab5 f485 	clz	r4, r5
 8012d9c:	0964      	lsrs	r4, r4, #5
 8012d9e:	2d00      	cmp	r5, #0
 8012da0:	d0f3      	beq.n	8012d8a <rmw_destroy_publisher+0x12>
 8012da2:	6828      	ldr	r0, [r5, #0]
 8012da4:	f001 f8d2 	bl	8013f4c <is_uxrce_rmw_identifier_valid>
 8012da8:	2800      	cmp	r0, #0
 8012daa:	d0ee      	beq.n	8012d8a <rmw_destroy_publisher+0x12>
 8012dac:	686e      	ldr	r6, [r5, #4]
 8012dae:	2e00      	cmp	r6, #0
 8012db0:	d0eb      	beq.n	8012d8a <rmw_destroy_publisher+0x12>
 8012db2:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8012db4:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 8012db8:	f005 fa0e 	bl	80181d8 <destroy_topic>
 8012dbc:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8012dc0:	6972      	ldr	r2, [r6, #20]
 8012dc2:	6918      	ldr	r0, [r3, #16]
 8012dc4:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012dc8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012dcc:	6819      	ldr	r1, [r3, #0]
 8012dce:	f001 f961 	bl	8014094 <uxr_buffer_delete_entity>
 8012dd2:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8012dd6:	4680      	mov	r8, r0
 8012dd8:	6932      	ldr	r2, [r6, #16]
 8012dda:	6918      	ldr	r0, [r3, #16]
 8012ddc:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012de0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012de4:	6819      	ldr	r1, [r3, #0]
 8012de6:	f001 f955 	bl	8014094 <uxr_buffer_delete_entity>
 8012dea:	4606      	mov	r6, r0
 8012dec:	6938      	ldr	r0, [r7, #16]
 8012dee:	4642      	mov	r2, r8
 8012df0:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8012df4:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8012df8:	f000 ffdc 	bl	8013db4 <run_xrce_session>
 8012dfc:	693f      	ldr	r7, [r7, #16]
 8012dfe:	4632      	mov	r2, r6
 8012e00:	4606      	mov	r6, r0
 8012e02:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8012e06:	4638      	mov	r0, r7
 8012e08:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8012e0c:	f000 ffd2 	bl	8013db4 <run_xrce_session>
 8012e10:	b126      	cbz	r6, 8012e1c <rmw_destroy_publisher+0xa4>
 8012e12:	b118      	cbz	r0, 8012e1c <rmw_destroy_publisher+0xa4>
 8012e14:	4628      	mov	r0, r5
 8012e16:	f000 fe67 	bl	8013ae8 <rmw_uxrce_fini_publisher_memory>
 8012e1a:	e7b7      	b.n	8012d8c <rmw_destroy_publisher+0x14>
 8012e1c:	2402      	movs	r4, #2
 8012e1e:	e7f9      	b.n	8012e14 <rmw_destroy_publisher+0x9c>

08012e20 <rmw_send_request>:
 8012e20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012e24:	4604      	mov	r4, r0
 8012e26:	6800      	ldr	r0, [r0, #0]
 8012e28:	b08b      	sub	sp, #44	; 0x2c
 8012e2a:	460e      	mov	r6, r1
 8012e2c:	4615      	mov	r5, r2
 8012e2e:	b128      	cbz	r0, 8012e3c <rmw_send_request+0x1c>
 8012e30:	4b21      	ldr	r3, [pc, #132]	; (8012eb8 <rmw_send_request+0x98>)
 8012e32:	6819      	ldr	r1, [r3, #0]
 8012e34:	f7ed fa04 	bl	8000240 <strcmp>
 8012e38:	2800      	cmp	r0, #0
 8012e3a:	d139      	bne.n	8012eb0 <rmw_send_request+0x90>
 8012e3c:	6864      	ldr	r4, [r4, #4]
 8012e3e:	2700      	movs	r7, #0
 8012e40:	6963      	ldr	r3, [r4, #20]
 8012e42:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
 8012e46:	689b      	ldr	r3, [r3, #8]
 8012e48:	4798      	blx	r3
 8012e4a:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8012e4e:	4630      	mov	r0, r6
 8012e50:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012e54:	4798      	blx	r3
 8012e56:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012e5a:	9000      	str	r0, [sp, #0]
 8012e5c:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8012e60:	6922      	ldr	r2, [r4, #16]
 8012e62:	ab02      	add	r3, sp, #8
 8012e64:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8012e66:	f003 fb41 	bl	80164ec <uxr_prepare_output_stream>
 8012e6a:	e9c5 0700 	strd	r0, r7, [r5]
 8012e6e:	b198      	cbz	r0, 8012e98 <rmw_send_request+0x78>
 8012e70:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8012e74:	a902      	add	r1, sp, #8
 8012e76:	4630      	mov	r0, r6
 8012e78:	4798      	blx	r3
 8012e7a:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 8012e7e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8012e82:	2b01      	cmp	r3, #1
 8012e84:	d00c      	beq.n	8012ea0 <rmw_send_request+0x80>
 8012e86:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8012e88:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012e8c:	f002 f8b4 	bl	8014ff8 <uxr_run_session_until_confirm_delivery>
 8012e90:	4638      	mov	r0, r7
 8012e92:	b00b      	add	sp, #44	; 0x2c
 8012e94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012e98:	2001      	movs	r0, #1
 8012e9a:	b00b      	add	sp, #44	; 0x2c
 8012e9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ea0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012ea4:	f001 fcee 	bl	8014884 <uxr_flash_output_streams>
 8012ea8:	4638      	mov	r0, r7
 8012eaa:	b00b      	add	sp, #44	; 0x2c
 8012eac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012eb0:	200c      	movs	r0, #12
 8012eb2:	b00b      	add	sp, #44	; 0x2c
 8012eb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012eb8:	0801bea0 	.word	0x0801bea0

08012ebc <rmw_take_request>:
 8012ebc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012ec0:	4605      	mov	r5, r0
 8012ec2:	6800      	ldr	r0, [r0, #0]
 8012ec4:	b089      	sub	sp, #36	; 0x24
 8012ec6:	460c      	mov	r4, r1
 8012ec8:	4690      	mov	r8, r2
 8012eca:	461e      	mov	r6, r3
 8012ecc:	b128      	cbz	r0, 8012eda <rmw_take_request+0x1e>
 8012ece:	4b28      	ldr	r3, [pc, #160]	; (8012f70 <rmw_take_request+0xb4>)
 8012ed0:	6819      	ldr	r1, [r3, #0]
 8012ed2:	f7ed f9b5 	bl	8000240 <strcmp>
 8012ed6:	2800      	cmp	r0, #0
 8012ed8:	d146      	bne.n	8012f68 <rmw_take_request+0xac>
 8012eda:	b10e      	cbz	r6, 8012ee0 <rmw_take_request+0x24>
 8012edc:	2300      	movs	r3, #0
 8012ede:	7033      	strb	r3, [r6, #0]
 8012ee0:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8012ee4:	f000 fee8 	bl	8013cb8 <rmw_uxrce_clean_expired_static_input_buffer>
 8012ee8:	4648      	mov	r0, r9
 8012eea:	f000 febb 	bl	8013c64 <rmw_uxrce_find_static_input_buffer_by_owner>
 8012eee:	4607      	mov	r7, r0
 8012ef0:	b3b0      	cbz	r0, 8012f60 <rmw_take_request+0xa4>
 8012ef2:	6885      	ldr	r5, [r0, #8]
 8012ef4:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 8012ef8:	f8d5 383c 	ldr.w	r3, [r5, #2108]	; 0x83c
 8012efc:	e9c4 3208 	strd	r3, r2, [r4, #32]
 8012f00:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 8012f04:	7423      	strb	r3, [r4, #16]
 8012f06:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	; 0x834
 8012f0a:	f895 3836 	ldrb.w	r3, [r5, #2102]	; 0x836
 8012f0e:	f8a4 2011 	strh.w	r2, [r4, #17]
 8012f12:	74e3      	strb	r3, [r4, #19]
 8012f14:	f8d5 1828 	ldr.w	r1, [r5, #2088]	; 0x828
 8012f18:	f8d5 282c 	ldr.w	r2, [r5, #2092]	; 0x82c
 8012f1c:	f8d5 3830 	ldr.w	r3, [r5, #2096]	; 0x830
 8012f20:	6161      	str	r1, [r4, #20]
 8012f22:	61a2      	str	r2, [r4, #24]
 8012f24:	61e3      	str	r3, [r4, #28]
 8012f26:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8012f2a:	689b      	ldr	r3, [r3, #8]
 8012f2c:	4798      	blx	r3
 8012f2e:	6844      	ldr	r4, [r0, #4]
 8012f30:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 8012f34:	f105 0110 	add.w	r1, r5, #16
 8012f38:	4668      	mov	r0, sp
 8012f3a:	f7fa ff8d 	bl	800de58 <ucdr_init_buffer>
 8012f3e:	4641      	mov	r1, r8
 8012f40:	68e3      	ldr	r3, [r4, #12]
 8012f42:	4668      	mov	r0, sp
 8012f44:	4798      	blx	r3
 8012f46:	4639      	mov	r1, r7
 8012f48:	4604      	mov	r4, r0
 8012f4a:	480a      	ldr	r0, [pc, #40]	; (8012f74 <rmw_take_request+0xb8>)
 8012f4c:	f005 f906 	bl	801815c <put_memory>
 8012f50:	b106      	cbz	r6, 8012f54 <rmw_take_request+0x98>
 8012f52:	7034      	strb	r4, [r6, #0]
 8012f54:	f084 0001 	eor.w	r0, r4, #1
 8012f58:	b2c0      	uxtb	r0, r0
 8012f5a:	b009      	add	sp, #36	; 0x24
 8012f5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f60:	2001      	movs	r0, #1
 8012f62:	b009      	add	sp, #36	; 0x24
 8012f64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f68:	200c      	movs	r0, #12
 8012f6a:	b009      	add	sp, #36	; 0x24
 8012f6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f70:	0801bea0 	.word	0x0801bea0
 8012f74:	200108fc 	.word	0x200108fc

08012f78 <rmw_send_response>:
 8012f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f7a:	4605      	mov	r5, r0
 8012f7c:	6800      	ldr	r0, [r0, #0]
 8012f7e:	b091      	sub	sp, #68	; 0x44
 8012f80:	460c      	mov	r4, r1
 8012f82:	4616      	mov	r6, r2
 8012f84:	b128      	cbz	r0, 8012f92 <rmw_send_response+0x1a>
 8012f86:	4b29      	ldr	r3, [pc, #164]	; (801302c <rmw_send_response+0xb4>)
 8012f88:	6819      	ldr	r1, [r3, #0]
 8012f8a:	f7ed f959 	bl	8000240 <strcmp>
 8012f8e:	2800      	cmp	r0, #0
 8012f90:	d141      	bne.n	8013016 <rmw_send_response+0x9e>
 8012f92:	686d      	ldr	r5, [r5, #4]
 8012f94:	68a1      	ldr	r1, [r4, #8]
 8012f96:	6860      	ldr	r0, [r4, #4]
 8012f98:	6faf      	ldr	r7, [r5, #120]	; 0x78
 8012f9a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8012f9e:	9307      	str	r3, [sp, #28]
 8012fa0:	4623      	mov	r3, r4
 8012fa2:	9206      	str	r2, [sp, #24]
 8012fa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012fa8:	789b      	ldrb	r3, [r3, #2]
 8012faa:	f88d 2017 	strb.w	r2, [sp, #23]
 8012fae:	f88d 3016 	strb.w	r3, [sp, #22]
 8012fb2:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8012fb6:	68e2      	ldr	r2, [r4, #12]
 8012fb8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012fbc:	ab02      	add	r3, sp, #8
 8012fbe:	696c      	ldr	r4, [r5, #20]
 8012fc0:	c307      	stmia	r3!, {r0, r1, r2}
 8012fc2:	68e3      	ldr	r3, [r4, #12]
 8012fc4:	4798      	blx	r3
 8012fc6:	6844      	ldr	r4, [r0, #4]
 8012fc8:	4630      	mov	r0, r6
 8012fca:	6923      	ldr	r3, [r4, #16]
 8012fcc:	4798      	blx	r3
 8012fce:	f100 0318 	add.w	r3, r0, #24
 8012fd2:	6938      	ldr	r0, [r7, #16]
 8012fd4:	9300      	str	r3, [sp, #0]
 8012fd6:	ab08      	add	r3, sp, #32
 8012fd8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012fdc:	692a      	ldr	r2, [r5, #16]
 8012fde:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8012fe0:	f003 fa84 	bl	80164ec <uxr_prepare_output_stream>
 8012fe4:	b910      	cbnz	r0, 8012fec <rmw_send_response+0x74>
 8012fe6:	2001      	movs	r0, #1
 8012fe8:	b011      	add	sp, #68	; 0x44
 8012fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012fec:	a902      	add	r1, sp, #8
 8012fee:	a808      	add	r0, sp, #32
 8012ff0:	f004 f9a6 	bl	8017340 <uxr_serialize_SampleIdentity>
 8012ff4:	68a3      	ldr	r3, [r4, #8]
 8012ff6:	a908      	add	r1, sp, #32
 8012ff8:	4630      	mov	r0, r6
 8012ffa:	4798      	blx	r3
 8012ffc:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 8013000:	6938      	ldr	r0, [r7, #16]
 8013002:	2b01      	cmp	r3, #1
 8013004:	d00a      	beq.n	801301c <rmw_send_response+0xa4>
 8013006:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8013008:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801300c:	f001 fff4 	bl	8014ff8 <uxr_run_session_until_confirm_delivery>
 8013010:	2000      	movs	r0, #0
 8013012:	b011      	add	sp, #68	; 0x44
 8013014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013016:	200c      	movs	r0, #12
 8013018:	b011      	add	sp, #68	; 0x44
 801301a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801301c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013020:	f001 fc30 	bl	8014884 <uxr_flash_output_streams>
 8013024:	2000      	movs	r0, #0
 8013026:	b011      	add	sp, #68	; 0x44
 8013028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801302a:	bf00      	nop
 801302c:	0801bea0 	.word	0x0801bea0

08013030 <rmw_take_response>:
 8013030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013034:	4604      	mov	r4, r0
 8013036:	6800      	ldr	r0, [r0, #0]
 8013038:	b088      	sub	sp, #32
 801303a:	460f      	mov	r7, r1
 801303c:	4690      	mov	r8, r2
 801303e:	461d      	mov	r5, r3
 8013040:	b120      	cbz	r0, 801304c <rmw_take_response+0x1c>
 8013042:	4b1d      	ldr	r3, [pc, #116]	; (80130b8 <rmw_take_response+0x88>)
 8013044:	6819      	ldr	r1, [r3, #0]
 8013046:	f7ed f8fb 	bl	8000240 <strcmp>
 801304a:	bb68      	cbnz	r0, 80130a8 <rmw_take_response+0x78>
 801304c:	b10d      	cbz	r5, 8013052 <rmw_take_response+0x22>
 801304e:	2300      	movs	r3, #0
 8013050:	702b      	strb	r3, [r5, #0]
 8013052:	6864      	ldr	r4, [r4, #4]
 8013054:	f000 fe30 	bl	8013cb8 <rmw_uxrce_clean_expired_static_input_buffer>
 8013058:	4620      	mov	r0, r4
 801305a:	f000 fe03 	bl	8013c64 <rmw_uxrce_find_static_input_buffer_by_owner>
 801305e:	4606      	mov	r6, r0
 8013060:	b330      	cbz	r0, 80130b0 <rmw_take_response+0x80>
 8013062:	6963      	ldr	r3, [r4, #20]
 8013064:	6884      	ldr	r4, [r0, #8]
 8013066:	68db      	ldr	r3, [r3, #12]
 8013068:	f504 6203 	add.w	r2, r4, #2096	; 0x830
 801306c:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8013070:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8013074:	4798      	blx	r3
 8013076:	6847      	ldr	r7, [r0, #4]
 8013078:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 801307c:	f104 0110 	add.w	r1, r4, #16
 8013080:	4668      	mov	r0, sp
 8013082:	f7fa fee9 	bl	800de58 <ucdr_init_buffer>
 8013086:	4641      	mov	r1, r8
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	4668      	mov	r0, sp
 801308c:	4798      	blx	r3
 801308e:	4631      	mov	r1, r6
 8013090:	4604      	mov	r4, r0
 8013092:	480a      	ldr	r0, [pc, #40]	; (80130bc <rmw_take_response+0x8c>)
 8013094:	f005 f862 	bl	801815c <put_memory>
 8013098:	b105      	cbz	r5, 801309c <rmw_take_response+0x6c>
 801309a:	702c      	strb	r4, [r5, #0]
 801309c:	f084 0001 	eor.w	r0, r4, #1
 80130a0:	b2c0      	uxtb	r0, r0
 80130a2:	b008      	add	sp, #32
 80130a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130a8:	200c      	movs	r0, #12
 80130aa:	b008      	add	sp, #32
 80130ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130b0:	2001      	movs	r0, #1
 80130b2:	b008      	add	sp, #32
 80130b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130b8:	0801bea0 	.word	0x0801bea0
 80130bc:	200108fc 	.word	0x200108fc

080130c0 <rmw_create_service>:
 80130c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130c4:	b091      	sub	sp, #68	; 0x44
 80130c6:	2900      	cmp	r1, #0
 80130c8:	f000 80bb 	beq.w	8013242 <rmw_create_service+0x182>
 80130cc:	4606      	mov	r6, r0
 80130ce:	2800      	cmp	r0, #0
 80130d0:	f000 80b7 	beq.w	8013242 <rmw_create_service+0x182>
 80130d4:	4614      	mov	r4, r2
 80130d6:	6800      	ldr	r0, [r0, #0]
 80130d8:	4689      	mov	r9, r1
 80130da:	461d      	mov	r5, r3
 80130dc:	f000 ff36 	bl	8013f4c <is_uxrce_rmw_identifier_valid>
 80130e0:	2c00      	cmp	r4, #0
 80130e2:	f000 80ae 	beq.w	8013242 <rmw_create_service+0x182>
 80130e6:	f080 0001 	eor.w	r0, r0, #1
 80130ea:	b2c0      	uxtb	r0, r0
 80130ec:	2800      	cmp	r0, #0
 80130ee:	f040 80a8 	bne.w	8013242 <rmw_create_service+0x182>
 80130f2:	7823      	ldrb	r3, [r4, #0]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	f000 80a4 	beq.w	8013242 <rmw_create_service+0x182>
 80130fa:	2d00      	cmp	r5, #0
 80130fc:	f000 80a1 	beq.w	8013242 <rmw_create_service+0x182>
 8013100:	4856      	ldr	r0, [pc, #344]	; (801325c <rmw_create_service+0x19c>)
 8013102:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8013106:	f005 f819 	bl	801813c <get_memory>
 801310a:	4606      	mov	r6, r0
 801310c:	2800      	cmp	r0, #0
 801310e:	f000 8099 	beq.w	8013244 <rmw_create_service+0x184>
 8013112:	6887      	ldr	r7, [r0, #8]
 8013114:	f107 0a88 	add.w	sl, r7, #136	; 0x88
 8013118:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 801311c:	f7ff fad8 	bl	80126d0 <rmw_get_implementation_identifier>
 8013120:	67f8      	str	r0, [r7, #124]	; 0x7c
 8013122:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 8013126:	4620      	mov	r0, r4
 8013128:	f7ed f8ea 	bl	8000300 <strlen>
 801312c:	1c42      	adds	r2, r0, #1
 801312e:	f107 067c 	add.w	r6, r7, #124	; 0x7c
 8013132:	2a3c      	cmp	r2, #60	; 0x3c
 8013134:	f200 808a 	bhi.w	801324c <rmw_create_service+0x18c>
 8013138:	4621      	mov	r1, r4
 801313a:	4650      	mov	r0, sl
 801313c:	f006 fbbf 	bl	80198be <memcpy>
 8013140:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013144:	4629      	mov	r1, r5
 8013146:	2250      	movs	r2, #80	; 0x50
 8013148:	f107 0020 	add.w	r0, r7, #32
 801314c:	f8c7 8078 	str.w	r8, [r7, #120]	; 0x78
 8013150:	677b      	str	r3, [r7, #116]	; 0x74
 8013152:	f006 fbb4 	bl	80198be <memcpy>
 8013156:	4648      	mov	r0, r9
 8013158:	4941      	ldr	r1, [pc, #260]	; (8013260 <rmw_create_service+0x1a0>)
 801315a:	f7f9 f8e5 	bl	800c328 <get_service_typesupport_handle>
 801315e:	2800      	cmp	r0, #0
 8013160:	d074      	beq.n	801324c <rmw_create_service+0x18c>
 8013162:	6843      	ldr	r3, [r0, #4]
 8013164:	617b      	str	r3, [r7, #20]
 8013166:	2b00      	cmp	r3, #0
 8013168:	d070      	beq.n	801324c <rmw_create_service+0x18c>
 801316a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801316e:	2108      	movs	r1, #8
 8013170:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 8013268 <rmw_create_service+0x1a8>
 8013174:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013178:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 801326c <rmw_create_service+0x1ac>
 801317c:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	; 0x5a2
 8013180:	1c42      	adds	r2, r0, #1
 8013182:	f8a3 25a2 	strh.w	r2, [r3, #1442]	; 0x5a2
 8013186:	f001 f8fb 	bl	8014380 <uxr_object_id>
 801318a:	2364      	movs	r3, #100	; 0x64
 801318c:	6138      	str	r0, [r7, #16]
 801318e:	4652      	mov	r2, sl
 8013190:	4649      	mov	r1, r9
 8013192:	6978      	ldr	r0, [r7, #20]
 8013194:	f000 fe74 	bl	8013e80 <generate_service_types>
 8013198:	2800      	cmp	r0, #0
 801319a:	d057      	beq.n	801324c <rmw_create_service+0x18c>
 801319c:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 8013270 <rmw_create_service+0x1b0>
 80131a0:	233c      	movs	r3, #60	; 0x3c
 80131a2:	4a30      	ldr	r2, [pc, #192]	; (8013264 <rmw_create_service+0x1a4>)
 80131a4:	4620      	mov	r0, r4
 80131a6:	4659      	mov	r1, fp
 80131a8:	f000 fe38 	bl	8013e1c <generate_service_topics>
 80131ac:	2800      	cmp	r0, #0
 80131ae:	d04d      	beq.n	801324c <rmw_create_service+0x18c>
 80131b0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80131b4:	a80c      	add	r0, sp, #48	; 0x30
 80131b6:	4629      	mov	r1, r5
 80131b8:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80131bc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80131c0:	f000 fe14 	bl	8013dec <convert_qos_profile>
 80131c4:	4a27      	ldr	r2, [pc, #156]	; (8013264 <rmw_create_service+0x1a4>)
 80131c6:	a80c      	add	r0, sp, #48	; 0x30
 80131c8:	9400      	str	r4, [sp, #0]
 80131ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131cc:	e9cd b203 	strd	fp, r2, [sp, #12]
 80131d0:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 80131d4:	c803      	ldmia	r0, {r0, r1}
 80131d6:	9a08      	ldr	r2, [sp, #32]
 80131d8:	9005      	str	r0, [sp, #20]
 80131da:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 80131de:	2306      	movs	r3, #6
 80131e0:	f8ad 1018 	strh.w	r1, [sp, #24]
 80131e4:	9307      	str	r3, [sp, #28]
 80131e6:	6811      	ldr	r1, [r2, #0]
 80131e8:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80131ec:	693a      	ldr	r2, [r7, #16]
 80131ee:	f000 ffcf 	bl	8014190 <uxr_buffer_create_replier_bin>
 80131f2:	4602      	mov	r2, r0
 80131f4:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80131f8:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80131fc:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8013200:	f000 fdd8 	bl	8013db4 <run_xrce_session>
 8013204:	b310      	cbz	r0, 801324c <rmw_create_service+0x18c>
 8013206:	7a2b      	ldrb	r3, [r5, #8]
 8013208:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801320c:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8013210:	2b02      	cmp	r3, #2
 8013212:	920e      	str	r2, [sp, #56]	; 0x38
 8013214:	f04f 0200 	mov.w	r2, #0
 8013218:	920f      	str	r2, [sp, #60]	; 0x3c
 801321a:	bf0c      	ite	eq
 801321c:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	; 0x37c
 8013220:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	; 0x374
 8013224:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013228:	930b      	str	r3, [sp, #44]	; 0x2c
 801322a:	ab0e      	add	r3, sp, #56	; 0x38
 801322c:	673a      	str	r2, [r7, #112]	; 0x70
 801322e:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4
 8013232:	9300      	str	r3, [sp, #0]
 8013234:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013236:	6811      	ldr	r1, [r2, #0]
 8013238:	693a      	ldr	r2, [r7, #16]
 801323a:	f001 f8d1 	bl	80143e0 <uxr_buffer_request_data>
 801323e:	8338      	strh	r0, [r7, #24]
 8013240:	e000      	b.n	8013244 <rmw_create_service+0x184>
 8013242:	2600      	movs	r6, #0
 8013244:	4630      	mov	r0, r6
 8013246:	b011      	add	sp, #68	; 0x44
 8013248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801324c:	4630      	mov	r0, r6
 801324e:	2600      	movs	r6, #0
 8013250:	f000 fc76 	bl	8013b40 <rmw_uxrce_fini_service_memory>
 8013254:	4630      	mov	r0, r6
 8013256:	b011      	add	sp, #68	; 0x44
 8013258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801325c:	200108dc 	.word	0x200108dc
 8013260:	0801a7a0 	.word	0x0801a7a0
 8013264:	2000be88 	.word	0x2000be88
 8013268:	2000bec4 	.word	0x2000bec4
 801326c:	2000be24 	.word	0x2000be24
 8013270:	2000bde8 	.word	0x2000bde8

08013274 <rmw_destroy_service>:
 8013274:	b570      	push	{r4, r5, r6, lr}
 8013276:	b128      	cbz	r0, 8013284 <rmw_destroy_service+0x10>
 8013278:	4604      	mov	r4, r0
 801327a:	6800      	ldr	r0, [r0, #0]
 801327c:	460d      	mov	r5, r1
 801327e:	f000 fe65 	bl	8013f4c <is_uxrce_rmw_identifier_valid>
 8013282:	b910      	cbnz	r0, 801328a <rmw_destroy_service+0x16>
 8013284:	2401      	movs	r4, #1
 8013286:	4620      	mov	r0, r4
 8013288:	bd70      	pop	{r4, r5, r6, pc}
 801328a:	6863      	ldr	r3, [r4, #4]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d0f9      	beq.n	8013284 <rmw_destroy_service+0x10>
 8013290:	2d00      	cmp	r5, #0
 8013292:	d0f7      	beq.n	8013284 <rmw_destroy_service+0x10>
 8013294:	6828      	ldr	r0, [r5, #0]
 8013296:	f000 fe59 	bl	8013f4c <is_uxrce_rmw_identifier_valid>
 801329a:	2800      	cmp	r0, #0
 801329c:	d0f2      	beq.n	8013284 <rmw_destroy_service+0x10>
 801329e:	686e      	ldr	r6, [r5, #4]
 80132a0:	2e00      	cmp	r6, #0
 80132a2:	d0ef      	beq.n	8013284 <rmw_destroy_service+0x10>
 80132a4:	6864      	ldr	r4, [r4, #4]
 80132a6:	6932      	ldr	r2, [r6, #16]
 80132a8:	6920      	ldr	r0, [r4, #16]
 80132aa:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80132ae:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80132b2:	6819      	ldr	r1, [r3, #0]
 80132b4:	f001 f8ce 	bl	8014454 <uxr_buffer_cancel_data>
 80132b8:	4602      	mov	r2, r0
 80132ba:	6920      	ldr	r0, [r4, #16]
 80132bc:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80132c0:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80132c4:	f000 fd76 	bl	8013db4 <run_xrce_session>
 80132c8:	6920      	ldr	r0, [r4, #16]
 80132ca:	6932      	ldr	r2, [r6, #16]
 80132cc:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80132d0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80132d4:	6819      	ldr	r1, [r3, #0]
 80132d6:	f000 fedd 	bl	8014094 <uxr_buffer_delete_entity>
 80132da:	4602      	mov	r2, r0
 80132dc:	6920      	ldr	r0, [r4, #16]
 80132de:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80132e2:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80132e6:	f000 fd65 	bl	8013db4 <run_xrce_session>
 80132ea:	4603      	mov	r3, r0
 80132ec:	4628      	mov	r0, r5
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	bf14      	ite	ne
 80132f2:	2400      	movne	r4, #0
 80132f4:	2402      	moveq	r4, #2
 80132f6:	f000 fc23 	bl	8013b40 <rmw_uxrce_fini_service_memory>
 80132fa:	e7c4      	b.n	8013286 <rmw_destroy_service+0x12>

080132fc <rmw_service_response_publisher_get_actual_qos>:
 80132fc:	b181      	cbz	r1, 8013320 <rmw_service_response_publisher_get_actual_qos+0x24>
 80132fe:	4603      	mov	r3, r0
 8013300:	b510      	push	{r4, lr}
 8013302:	fab0 f480 	clz	r4, r0
 8013306:	0964      	lsrs	r4, r4, #5
 8013308:	b140      	cbz	r0, 801331c <rmw_service_response_publisher_get_actual_qos+0x20>
 801330a:	685b      	ldr	r3, [r3, #4]
 801330c:	4608      	mov	r0, r1
 801330e:	2250      	movs	r2, #80	; 0x50
 8013310:	f103 0120 	add.w	r1, r3, #32
 8013314:	f006 fad3 	bl	80198be <memcpy>
 8013318:	4620      	mov	r0, r4
 801331a:	bd10      	pop	{r4, pc}
 801331c:	200b      	movs	r0, #11
 801331e:	bd10      	pop	{r4, pc}
 8013320:	200b      	movs	r0, #11
 8013322:	4770      	bx	lr

08013324 <rmw_service_request_subscription_get_actual_qos>:
 8013324:	b178      	cbz	r0, 8013346 <rmw_service_request_subscription_get_actual_qos+0x22>
 8013326:	b510      	push	{r4, lr}
 8013328:	fab1 f481 	clz	r4, r1
 801332c:	0964      	lsrs	r4, r4, #5
 801332e:	b141      	cbz	r1, 8013342 <rmw_service_request_subscription_get_actual_qos+0x1e>
 8013330:	6843      	ldr	r3, [r0, #4]
 8013332:	2250      	movs	r2, #80	; 0x50
 8013334:	4608      	mov	r0, r1
 8013336:	f103 0120 	add.w	r1, r3, #32
 801333a:	f006 fac0 	bl	80198be <memcpy>
 801333e:	4620      	mov	r0, r4
 8013340:	bd10      	pop	{r4, pc}
 8013342:	200b      	movs	r0, #11
 8013344:	bd10      	pop	{r4, pc}
 8013346:	200b      	movs	r0, #11
 8013348:	4770      	bx	lr
 801334a:	bf00      	nop

0801334c <rmw_destroy_subscription>:
 801334c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013350:	b128      	cbz	r0, 801335e <rmw_destroy_subscription+0x12>
 8013352:	4604      	mov	r4, r0
 8013354:	6800      	ldr	r0, [r0, #0]
 8013356:	460d      	mov	r5, r1
 8013358:	f000 fdf8 	bl	8013f4c <is_uxrce_rmw_identifier_valid>
 801335c:	b918      	cbnz	r0, 8013366 <rmw_destroy_subscription+0x1a>
 801335e:	2401      	movs	r4, #1
 8013360:	4620      	mov	r0, r4
 8013362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013366:	6863      	ldr	r3, [r4, #4]
 8013368:	2b00      	cmp	r3, #0
 801336a:	d0f8      	beq.n	801335e <rmw_destroy_subscription+0x12>
 801336c:	fab5 f485 	clz	r4, r5
 8013370:	0964      	lsrs	r4, r4, #5
 8013372:	2d00      	cmp	r5, #0
 8013374:	d0f3      	beq.n	801335e <rmw_destroy_subscription+0x12>
 8013376:	6828      	ldr	r0, [r5, #0]
 8013378:	f000 fde8 	bl	8013f4c <is_uxrce_rmw_identifier_valid>
 801337c:	2800      	cmp	r0, #0
 801337e:	d0ee      	beq.n	801335e <rmw_destroy_subscription+0x12>
 8013380:	686e      	ldr	r6, [r5, #4]
 8013382:	2e00      	cmp	r6, #0
 8013384:	d0eb      	beq.n	801335e <rmw_destroy_subscription+0x12>
 8013386:	6a37      	ldr	r7, [r6, #32]
 8013388:	6972      	ldr	r2, [r6, #20]
 801338a:	6938      	ldr	r0, [r7, #16]
 801338c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8013390:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013394:	6819      	ldr	r1, [r3, #0]
 8013396:	f001 f85d 	bl	8014454 <uxr_buffer_cancel_data>
 801339a:	4602      	mov	r2, r0
 801339c:	6938      	ldr	r0, [r7, #16]
 801339e:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80133a2:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80133a6:	f000 fd05 	bl	8013db4 <run_xrce_session>
 80133aa:	69f0      	ldr	r0, [r6, #28]
 80133ac:	f004 ff14 	bl	80181d8 <destroy_topic>
 80133b0:	6a33      	ldr	r3, [r6, #32]
 80133b2:	6972      	ldr	r2, [r6, #20]
 80133b4:	6918      	ldr	r0, [r3, #16]
 80133b6:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80133ba:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80133be:	6819      	ldr	r1, [r3, #0]
 80133c0:	f000 fe68 	bl	8014094 <uxr_buffer_delete_entity>
 80133c4:	6a33      	ldr	r3, [r6, #32]
 80133c6:	4680      	mov	r8, r0
 80133c8:	6932      	ldr	r2, [r6, #16]
 80133ca:	6918      	ldr	r0, [r3, #16]
 80133cc:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80133d0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80133d4:	6819      	ldr	r1, [r3, #0]
 80133d6:	f000 fe5d 	bl	8014094 <uxr_buffer_delete_entity>
 80133da:	4606      	mov	r6, r0
 80133dc:	6938      	ldr	r0, [r7, #16]
 80133de:	4642      	mov	r2, r8
 80133e0:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80133e4:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80133e8:	f000 fce4 	bl	8013db4 <run_xrce_session>
 80133ec:	693f      	ldr	r7, [r7, #16]
 80133ee:	4632      	mov	r2, r6
 80133f0:	4606      	mov	r6, r0
 80133f2:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 80133f6:	4638      	mov	r0, r7
 80133f8:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 80133fc:	f000 fcda 	bl	8013db4 <run_xrce_session>
 8013400:	b126      	cbz	r6, 801340c <rmw_destroy_subscription+0xc0>
 8013402:	b118      	cbz	r0, 801340c <rmw_destroy_subscription+0xc0>
 8013404:	4628      	mov	r0, r5
 8013406:	f000 fb85 	bl	8013b14 <rmw_uxrce_fini_subscription_memory>
 801340a:	e7a9      	b.n	8013360 <rmw_destroy_subscription+0x14>
 801340c:	2402      	movs	r4, #2
 801340e:	e7f9      	b.n	8013404 <rmw_destroy_subscription+0xb8>

08013410 <rmw_take_with_info>:
 8013410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013412:	4604      	mov	r4, r0
 8013414:	6800      	ldr	r0, [r0, #0]
 8013416:	b089      	sub	sp, #36	; 0x24
 8013418:	460f      	mov	r7, r1
 801341a:	4615      	mov	r5, r2
 801341c:	b128      	cbz	r0, 801342a <rmw_take_with_info+0x1a>
 801341e:	4b24      	ldr	r3, [pc, #144]	; (80134b0 <rmw_take_with_info+0xa0>)
 8013420:	6819      	ldr	r1, [r3, #0]
 8013422:	f7ec ff0d 	bl	8000240 <strcmp>
 8013426:	2800      	cmp	r0, #0
 8013428:	d13e      	bne.n	80134a8 <rmw_take_with_info+0x98>
 801342a:	b305      	cbz	r5, 801346e <rmw_take_with_info+0x5e>
 801342c:	2300      	movs	r3, #0
 801342e:	6864      	ldr	r4, [r4, #4]
 8013430:	702b      	strb	r3, [r5, #0]
 8013432:	f000 fc41 	bl	8013cb8 <rmw_uxrce_clean_expired_static_input_buffer>
 8013436:	4620      	mov	r0, r4
 8013438:	f000 fc14 	bl	8013c64 <rmw_uxrce_find_static_input_buffer_by_owner>
 801343c:	4606      	mov	r6, r0
 801343e:	b1f0      	cbz	r0, 801347e <rmw_take_with_info+0x6e>
 8013440:	6881      	ldr	r1, [r0, #8]
 8013442:	4668      	mov	r0, sp
 8013444:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8013448:	3110      	adds	r1, #16
 801344a:	f7fa fd05 	bl	800de58 <ucdr_init_buffer>
 801344e:	69a3      	ldr	r3, [r4, #24]
 8013450:	4639      	mov	r1, r7
 8013452:	4668      	mov	r0, sp
 8013454:	68db      	ldr	r3, [r3, #12]
 8013456:	4798      	blx	r3
 8013458:	4604      	mov	r4, r0
 801345a:	4631      	mov	r1, r6
 801345c:	4815      	ldr	r0, [pc, #84]	; (80134b4 <rmw_take_with_info+0xa4>)
 801345e:	f004 fe7d 	bl	801815c <put_memory>
 8013462:	702c      	strb	r4, [r5, #0]
 8013464:	f084 0001 	eor.w	r0, r4, #1
 8013468:	b2c0      	uxtb	r0, r0
 801346a:	b009      	add	sp, #36	; 0x24
 801346c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801346e:	6864      	ldr	r4, [r4, #4]
 8013470:	f000 fc22 	bl	8013cb8 <rmw_uxrce_clean_expired_static_input_buffer>
 8013474:	4620      	mov	r0, r4
 8013476:	f000 fbf5 	bl	8013c64 <rmw_uxrce_find_static_input_buffer_by_owner>
 801347a:	4605      	mov	r5, r0
 801347c:	b910      	cbnz	r0, 8013484 <rmw_take_with_info+0x74>
 801347e:	2001      	movs	r0, #1
 8013480:	b009      	add	sp, #36	; 0x24
 8013482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013484:	68a9      	ldr	r1, [r5, #8]
 8013486:	4668      	mov	r0, sp
 8013488:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 801348c:	3110      	adds	r1, #16
 801348e:	f7fa fce3 	bl	800de58 <ucdr_init_buffer>
 8013492:	69a3      	ldr	r3, [r4, #24]
 8013494:	4639      	mov	r1, r7
 8013496:	4668      	mov	r0, sp
 8013498:	68db      	ldr	r3, [r3, #12]
 801349a:	4798      	blx	r3
 801349c:	4629      	mov	r1, r5
 801349e:	4604      	mov	r4, r0
 80134a0:	4804      	ldr	r0, [pc, #16]	; (80134b4 <rmw_take_with_info+0xa4>)
 80134a2:	f004 fe5b 	bl	801815c <put_memory>
 80134a6:	e7dd      	b.n	8013464 <rmw_take_with_info+0x54>
 80134a8:	200c      	movs	r0, #12
 80134aa:	b009      	add	sp, #36	; 0x24
 80134ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80134ae:	bf00      	nop
 80134b0:	0801bea0 	.word	0x0801bea0
 80134b4:	200108fc 	.word	0x200108fc

080134b8 <rmw_uxrce_transport_init>:
 80134b8:	b508      	push	{r3, lr}
 80134ba:	b108      	cbz	r0, 80134c0 <rmw_uxrce_transport_init+0x8>
 80134bc:	f100 0210 	add.w	r2, r0, #16
 80134c0:	b139      	cbz	r1, 80134d2 <rmw_uxrce_transport_init+0x1a>
 80134c2:	6949      	ldr	r1, [r1, #20]
 80134c4:	4610      	mov	r0, r2
 80134c6:	f000 ff23 	bl	8014310 <uxr_init_custom_transport>
 80134ca:	f080 0001 	eor.w	r0, r0, #1
 80134ce:	b2c0      	uxtb	r0, r0
 80134d0:	bd08      	pop	{r3, pc}
 80134d2:	4b04      	ldr	r3, [pc, #16]	; (80134e4 <rmw_uxrce_transport_init+0x2c>)
 80134d4:	4610      	mov	r0, r2
 80134d6:	6859      	ldr	r1, [r3, #4]
 80134d8:	f000 ff1a 	bl	8014310 <uxr_init_custom_transport>
 80134dc:	f080 0001 	eor.w	r0, r0, #1
 80134e0:	b2c0      	uxtb	r0, r0
 80134e2:	bd08      	pop	{r3, pc}
 80134e4:	2000b94c 	.word	0x2000b94c

080134e8 <rmw_wait>:
 80134e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80134ec:	4698      	mov	r8, r3
 80134ee:	ea40 0301 	orr.w	r3, r0, r1
 80134f2:	b089      	sub	sp, #36	; 0x24
 80134f4:	ea48 0303 	orr.w	r3, r8, r3
 80134f8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80134fa:	4313      	orrs	r3, r2
 80134fc:	f000 8106 	beq.w	801370c <rmw_wait+0x224>
 8013500:	4605      	mov	r5, r0
 8013502:	460e      	mov	r6, r1
 8013504:	4691      	mov	r9, r2
 8013506:	b16c      	cbz	r4, 8013524 <rmw_wait+0x3c>
 8013508:	4ba6      	ldr	r3, [pc, #664]	; (80137a4 <rmw_wait+0x2bc>)
 801350a:	af04      	add	r7, sp, #16
 801350c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801350e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8013512:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013516:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801351a:	f004 fc9f 	bl	8017e5c <rmw_time_equal>
 801351e:	2800      	cmp	r0, #0
 8013520:	f000 810b 	beq.w	801373a <rmw_wait+0x252>
 8013524:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013528:	f000 fbc6 	bl	8013cb8 <rmw_uxrce_clean_expired_static_input_buffer>
 801352c:	4b9e      	ldr	r3, [pc, #632]	; (80137a8 <rmw_wait+0x2c0>)
 801352e:	681c      	ldr	r4, [r3, #0]
 8013530:	b14c      	cbz	r4, 8013546 <rmw_wait+0x5e>
 8013532:	4623      	mov	r3, r4
 8013534:	2100      	movs	r1, #0
 8013536:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801353a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801353e:	f882 15a4 	strb.w	r1, [r2, #1444]	; 0x5a4
 8013542:	2b00      	cmp	r3, #0
 8013544:	d1f7      	bne.n	8013536 <rmw_wait+0x4e>
 8013546:	f1b9 0f00 	cmp.w	r9, #0
 801354a:	d011      	beq.n	8013570 <rmw_wait+0x88>
 801354c:	f8d9 1000 	ldr.w	r1, [r9]
 8013550:	b171      	cbz	r1, 8013570 <rmw_wait+0x88>
 8013552:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8013556:	2300      	movs	r3, #0
 8013558:	2001      	movs	r0, #1
 801355a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801355e:	3301      	adds	r3, #1
 8013560:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8013562:	4299      	cmp	r1, r3
 8013564:	6912      	ldr	r2, [r2, #16]
 8013566:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801356a:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801356e:	d1f4      	bne.n	801355a <rmw_wait+0x72>
 8013570:	f1b8 0f00 	cmp.w	r8, #0
 8013574:	d011      	beq.n	801359a <rmw_wait+0xb2>
 8013576:	f8d8 1000 	ldr.w	r1, [r8]
 801357a:	b171      	cbz	r1, 801359a <rmw_wait+0xb2>
 801357c:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8013580:	2300      	movs	r3, #0
 8013582:	2001      	movs	r0, #1
 8013584:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8013588:	3301      	adds	r3, #1
 801358a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801358c:	4299      	cmp	r1, r3
 801358e:	6912      	ldr	r2, [r2, #16]
 8013590:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8013594:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 8013598:	d1f4      	bne.n	8013584 <rmw_wait+0x9c>
 801359a:	b185      	cbz	r5, 80135be <rmw_wait+0xd6>
 801359c:	6829      	ldr	r1, [r5, #0]
 801359e:	b171      	cbz	r1, 80135be <rmw_wait+0xd6>
 80135a0:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80135a4:	2300      	movs	r3, #0
 80135a6:	2001      	movs	r0, #1
 80135a8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80135ac:	3301      	adds	r3, #1
 80135ae:	6a12      	ldr	r2, [r2, #32]
 80135b0:	4299      	cmp	r1, r3
 80135b2:	6912      	ldr	r2, [r2, #16]
 80135b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80135b8:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 80135bc:	d1f4      	bne.n	80135a8 <rmw_wait+0xc0>
 80135be:	b344      	cbz	r4, 8013612 <rmw_wait+0x12a>
 80135c0:	4622      	mov	r2, r4
 80135c2:	2300      	movs	r3, #0
 80135c4:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 80135c8:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80135cc:	f891 15a4 	ldrb.w	r1, [r1, #1444]	; 0x5a4
 80135d0:	440b      	add	r3, r1
 80135d2:	b2db      	uxtb	r3, r3
 80135d4:	2a00      	cmp	r2, #0
 80135d6:	d1f5      	bne.n	80135c4 <rmw_wait+0xdc>
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d05f      	beq.n	801369c <rmw_wait+0x1b4>
 80135dc:	1c7a      	adds	r2, r7, #1
 80135de:	d00d      	beq.n	80135fc <rmw_wait+0x114>
 80135e0:	ee07 7a90 	vmov	s15, r7
 80135e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80135e8:	ee07 3a90 	vmov	s15, r3
 80135ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80135f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80135f4:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80135f8:	ee17 7a90 	vmov	r7, s15
 80135fc:	68a0      	ldr	r0, [r4, #8]
 80135fe:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8013602:	f893 35a4 	ldrb.w	r3, [r3, #1444]	; 0x5a4
 8013606:	2b00      	cmp	r3, #0
 8013608:	f040 808d 	bne.w	8013726 <rmw_wait+0x23e>
 801360c:	6864      	ldr	r4, [r4, #4]
 801360e:	2c00      	cmp	r4, #0
 8013610:	d1f4      	bne.n	80135fc <rmw_wait+0x114>
 8013612:	f1b9 0f00 	cmp.w	r9, #0
 8013616:	f000 80a1 	beq.w	801375c <rmw_wait+0x274>
 801361a:	f8d9 7000 	ldr.w	r7, [r9]
 801361e:	2f00      	cmp	r7, #0
 8013620:	f000 80a4 	beq.w	801376c <rmw_wait+0x284>
 8013624:	2400      	movs	r4, #0
 8013626:	4627      	mov	r7, r4
 8013628:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801362c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013630:	f000 fb18 	bl	8013c64 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013634:	2800      	cmp	r0, #0
 8013636:	d03b      	beq.n	80136b0 <rmw_wait+0x1c8>
 8013638:	3401      	adds	r4, #1
 801363a:	f8d9 3000 	ldr.w	r3, [r9]
 801363e:	2701      	movs	r7, #1
 8013640:	42a3      	cmp	r3, r4
 8013642:	d8f1      	bhi.n	8013628 <rmw_wait+0x140>
 8013644:	2701      	movs	r7, #1
 8013646:	f1b8 0f00 	cmp.w	r8, #0
 801364a:	d010      	beq.n	801366e <rmw_wait+0x186>
 801364c:	f8d8 3000 	ldr.w	r3, [r8]
 8013650:	b16b      	cbz	r3, 801366e <rmw_wait+0x186>
 8013652:	2400      	movs	r4, #0
 8013654:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013658:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801365c:	f000 fb02 	bl	8013c64 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013660:	b370      	cbz	r0, 80136c0 <rmw_wait+0x1d8>
 8013662:	3401      	adds	r4, #1
 8013664:	f8d8 3000 	ldr.w	r3, [r8]
 8013668:	2701      	movs	r7, #1
 801366a:	42a3      	cmp	r3, r4
 801366c:	d8f2      	bhi.n	8013654 <rmw_wait+0x16c>
 801366e:	2d00      	cmp	r5, #0
 8013670:	d035      	beq.n	80136de <rmw_wait+0x1f6>
 8013672:	682b      	ldr	r3, [r5, #0]
 8013674:	b39b      	cbz	r3, 80136de <rmw_wait+0x1f6>
 8013676:	2400      	movs	r4, #0
 8013678:	686b      	ldr	r3, [r5, #4]
 801367a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801367e:	f000 faf1 	bl	8013c64 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013682:	b328      	cbz	r0, 80136d0 <rmw_wait+0x1e8>
 8013684:	3401      	adds	r4, #1
 8013686:	682b      	ldr	r3, [r5, #0]
 8013688:	2701      	movs	r7, #1
 801368a:	42a3      	cmp	r3, r4
 801368c:	d8f4      	bhi.n	8013678 <rmw_wait+0x190>
 801368e:	2e00      	cmp	r6, #0
 8013690:	d03c      	beq.n	801370c <rmw_wait+0x224>
 8013692:	6834      	ldr	r4, [r6, #0]
 8013694:	2c00      	cmp	r4, #0
 8013696:	d039      	beq.n	801370c <rmw_wait+0x224>
 8013698:	2701      	movs	r7, #1
 801369a:	e023      	b.n	80136e4 <rmw_wait+0x1fc>
 801369c:	68a0      	ldr	r0, [r4, #8]
 801369e:	2100      	movs	r1, #0
 80136a0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80136a4:	f001 fc6e 	bl	8014f84 <uxr_run_session_timeout>
 80136a8:	6864      	ldr	r4, [r4, #4]
 80136aa:	2c00      	cmp	r4, #0
 80136ac:	d1f6      	bne.n	801369c <rmw_wait+0x1b4>
 80136ae:	e7b0      	b.n	8013612 <rmw_wait+0x12a>
 80136b0:	e9d9 3200 	ldrd	r3, r2, [r9]
 80136b4:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80136b8:	3401      	adds	r4, #1
 80136ba:	42a3      	cmp	r3, r4
 80136bc:	d8b4      	bhi.n	8013628 <rmw_wait+0x140>
 80136be:	e7c2      	b.n	8013646 <rmw_wait+0x15e>
 80136c0:	e9d8 3200 	ldrd	r3, r2, [r8]
 80136c4:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80136c8:	3401      	adds	r4, #1
 80136ca:	429c      	cmp	r4, r3
 80136cc:	d3c2      	bcc.n	8013654 <rmw_wait+0x16c>
 80136ce:	e7ce      	b.n	801366e <rmw_wait+0x186>
 80136d0:	e9d5 3200 	ldrd	r3, r2, [r5]
 80136d4:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80136d8:	3401      	adds	r4, #1
 80136da:	42a3      	cmp	r3, r4
 80136dc:	d8cc      	bhi.n	8013678 <rmw_wait+0x190>
 80136de:	b1a6      	cbz	r6, 801370a <rmw_wait+0x222>
 80136e0:	6834      	ldr	r4, [r6, #0]
 80136e2:	b194      	cbz	r4, 801370a <rmw_wait+0x222>
 80136e4:	2300      	movs	r3, #0
 80136e6:	461d      	mov	r5, r3
 80136e8:	e004      	b.n	80136f4 <rmw_wait+0x20c>
 80136ea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80136ee:	3301      	adds	r3, #1
 80136f0:	42a3      	cmp	r3, r4
 80136f2:	d00a      	beq.n	801370a <rmw_wait+0x222>
 80136f4:	6870      	ldr	r0, [r6, #4]
 80136f6:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80136fa:	7c0a      	ldrb	r2, [r1, #16]
 80136fc:	2a00      	cmp	r2, #0
 80136fe:	d0f4      	beq.n	80136ea <rmw_wait+0x202>
 8013700:	3301      	adds	r3, #1
 8013702:	4617      	mov	r7, r2
 8013704:	740d      	strb	r5, [r1, #16]
 8013706:	42a3      	cmp	r3, r4
 8013708:	d1f4      	bne.n	80136f4 <rmw_wait+0x20c>
 801370a:	b147      	cbz	r7, 801371e <rmw_wait+0x236>
 801370c:	2000      	movs	r0, #0
 801370e:	b009      	add	sp, #36	; 0x24
 8013710:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013714:	b11e      	cbz	r6, 801371e <rmw_wait+0x236>
 8013716:	6834      	ldr	r4, [r6, #0]
 8013718:	462f      	mov	r7, r5
 801371a:	2c00      	cmp	r4, #0
 801371c:	d1e2      	bne.n	80136e4 <rmw_wait+0x1fc>
 801371e:	2002      	movs	r0, #2
 8013720:	b009      	add	sp, #36	; 0x24
 8013722:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013726:	4639      	mov	r1, r7
 8013728:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801372c:	f001 fc44 	bl	8014fb8 <uxr_run_session_until_data>
 8013730:	6864      	ldr	r4, [r4, #4]
 8013732:	2c00      	cmp	r4, #0
 8013734:	f47f af62 	bne.w	80135fc <rmw_wait+0x114>
 8013738:	e76b      	b.n	8013612 <rmw_wait+0x12a>
 801373a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801373e:	f004 fbe3 	bl	8017f08 <rmw_time_total_nsec>
 8013742:	2300      	movs	r3, #0
 8013744:	4a19      	ldr	r2, [pc, #100]	; (80137ac <rmw_wait+0x2c4>)
 8013746:	f7ec fe33 	bl	80003b0 <__aeabi_uldivmod>
 801374a:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 801374e:	4607      	mov	r7, r0
 8013750:	f171 0300 	sbcs.w	r3, r1, #0
 8013754:	bfa8      	it	ge
 8013756:	f06f 4700 	mvnge.w	r7, #2147483648	; 0x80000000
 801375a:	e6e5      	b.n	8013528 <rmw_wait+0x40>
 801375c:	f1b8 0f00 	cmp.w	r8, #0
 8013760:	d00f      	beq.n	8013782 <rmw_wait+0x29a>
 8013762:	f8d8 3000 	ldr.w	r3, [r8]
 8013766:	b193      	cbz	r3, 801378e <rmw_wait+0x2a6>
 8013768:	464f      	mov	r7, r9
 801376a:	e772      	b.n	8013652 <rmw_wait+0x16a>
 801376c:	f1b8 0f00 	cmp.w	r8, #0
 8013770:	d007      	beq.n	8013782 <rmw_wait+0x29a>
 8013772:	f8d8 3000 	ldr.w	r3, [r8]
 8013776:	2b00      	cmp	r3, #0
 8013778:	f47f af6b 	bne.w	8013652 <rmw_wait+0x16a>
 801377c:	b155      	cbz	r5, 8013794 <rmw_wait+0x2ac>
 801377e:	461f      	mov	r7, r3
 8013780:	e777      	b.n	8013672 <rmw_wait+0x18a>
 8013782:	2d00      	cmp	r5, #0
 8013784:	d0c6      	beq.n	8013714 <rmw_wait+0x22c>
 8013786:	682b      	ldr	r3, [r5, #0]
 8013788:	b143      	cbz	r3, 801379c <rmw_wait+0x2b4>
 801378a:	4647      	mov	r7, r8
 801378c:	e773      	b.n	8013676 <rmw_wait+0x18e>
 801378e:	b10d      	cbz	r5, 8013794 <rmw_wait+0x2ac>
 8013790:	464f      	mov	r7, r9
 8013792:	e76e      	b.n	8013672 <rmw_wait+0x18a>
 8013794:	462f      	mov	r7, r5
 8013796:	2e00      	cmp	r6, #0
 8013798:	d1a2      	bne.n	80136e0 <rmw_wait+0x1f8>
 801379a:	e7c0      	b.n	801371e <rmw_wait+0x236>
 801379c:	4647      	mov	r7, r8
 801379e:	2e00      	cmp	r6, #0
 80137a0:	d19e      	bne.n	80136e0 <rmw_wait+0x1f8>
 80137a2:	e7bc      	b.n	801371e <rmw_wait+0x236>
 80137a4:	0801a648 	.word	0x0801a648
 80137a8:	200108ec 	.word	0x200108ec
 80137ac:	000f4240 	.word	0x000f4240

080137b0 <rmw_create_wait_set>:
 80137b0:	b508      	push	{r3, lr}
 80137b2:	4803      	ldr	r0, [pc, #12]	; (80137c0 <rmw_create_wait_set+0x10>)
 80137b4:	f004 fcc2 	bl	801813c <get_memory>
 80137b8:	b108      	cbz	r0, 80137be <rmw_create_wait_set+0xe>
 80137ba:	6880      	ldr	r0, [r0, #8]
 80137bc:	3010      	adds	r0, #16
 80137be:	bd08      	pop	{r3, pc}
 80137c0:	2001092c 	.word	0x2001092c

080137c4 <rmw_destroy_wait_set>:
 80137c4:	b508      	push	{r3, lr}
 80137c6:	4b08      	ldr	r3, [pc, #32]	; (80137e8 <rmw_destroy_wait_set+0x24>)
 80137c8:	6819      	ldr	r1, [r3, #0]
 80137ca:	b911      	cbnz	r1, 80137d2 <rmw_destroy_wait_set+0xe>
 80137cc:	e00a      	b.n	80137e4 <rmw_destroy_wait_set+0x20>
 80137ce:	6849      	ldr	r1, [r1, #4]
 80137d0:	b141      	cbz	r1, 80137e4 <rmw_destroy_wait_set+0x20>
 80137d2:	688b      	ldr	r3, [r1, #8]
 80137d4:	3310      	adds	r3, #16
 80137d6:	4298      	cmp	r0, r3
 80137d8:	d1f9      	bne.n	80137ce <rmw_destroy_wait_set+0xa>
 80137da:	4803      	ldr	r0, [pc, #12]	; (80137e8 <rmw_destroy_wait_set+0x24>)
 80137dc:	f004 fcbe 	bl	801815c <put_memory>
 80137e0:	2000      	movs	r0, #0
 80137e2:	bd08      	pop	{r3, pc}
 80137e4:	2001      	movs	r0, #1
 80137e6:	bd08      	pop	{r3, pc}
 80137e8:	2001092c 	.word	0x2001092c

080137ec <rmw_uxrce_init_service_memory>:
 80137ec:	b1e2      	cbz	r2, 8013828 <rmw_uxrce_init_service_memory+0x3c>
 80137ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137f2:	7b05      	ldrb	r5, [r0, #12]
 80137f4:	4606      	mov	r6, r0
 80137f6:	b9ad      	cbnz	r5, 8013824 <rmw_uxrce_init_service_memory+0x38>
 80137f8:	23c8      	movs	r3, #200	; 0xc8
 80137fa:	4617      	mov	r7, r2
 80137fc:	460c      	mov	r4, r1
 80137fe:	46a8      	mov	r8, r5
 8013800:	6083      	str	r3, [r0, #8]
 8013802:	f240 1301 	movw	r3, #257	; 0x101
 8013806:	e9c0 5500 	strd	r5, r5, [r0]
 801380a:	8183      	strh	r3, [r0, #12]
 801380c:	3501      	adds	r5, #1
 801380e:	4621      	mov	r1, r4
 8013810:	4630      	mov	r0, r6
 8013812:	f004 fca3 	bl	801815c <put_memory>
 8013816:	42af      	cmp	r7, r5
 8013818:	60a4      	str	r4, [r4, #8]
 801381a:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 801381e:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8013822:	d1f3      	bne.n	801380c <rmw_uxrce_init_service_memory+0x20>
 8013824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013828:	4770      	bx	lr
 801382a:	bf00      	nop

0801382c <rmw_uxrce_init_client_memory>:
 801382c:	b1e2      	cbz	r2, 8013868 <rmw_uxrce_init_client_memory+0x3c>
 801382e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013832:	7b05      	ldrb	r5, [r0, #12]
 8013834:	4606      	mov	r6, r0
 8013836:	b9ad      	cbnz	r5, 8013864 <rmw_uxrce_init_client_memory+0x38>
 8013838:	23c8      	movs	r3, #200	; 0xc8
 801383a:	4617      	mov	r7, r2
 801383c:	460c      	mov	r4, r1
 801383e:	46a8      	mov	r8, r5
 8013840:	6083      	str	r3, [r0, #8]
 8013842:	f240 1301 	movw	r3, #257	; 0x101
 8013846:	e9c0 5500 	strd	r5, r5, [r0]
 801384a:	8183      	strh	r3, [r0, #12]
 801384c:	3501      	adds	r5, #1
 801384e:	4621      	mov	r1, r4
 8013850:	4630      	mov	r0, r6
 8013852:	f004 fc83 	bl	801815c <put_memory>
 8013856:	42af      	cmp	r7, r5
 8013858:	60a4      	str	r4, [r4, #8]
 801385a:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 801385e:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8013862:	d1f3      	bne.n	801384c <rmw_uxrce_init_client_memory+0x20>
 8013864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013868:	4770      	bx	lr
 801386a:	bf00      	nop

0801386c <rmw_uxrce_init_publisher_memory>:
 801386c:	b1e2      	cbz	r2, 80138a8 <rmw_uxrce_init_publisher_memory+0x3c>
 801386e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013872:	7b05      	ldrb	r5, [r0, #12]
 8013874:	4606      	mov	r6, r0
 8013876:	b9ad      	cbnz	r5, 80138a4 <rmw_uxrce_init_publisher_memory+0x38>
 8013878:	23d8      	movs	r3, #216	; 0xd8
 801387a:	4617      	mov	r7, r2
 801387c:	460c      	mov	r4, r1
 801387e:	46a8      	mov	r8, r5
 8013880:	6083      	str	r3, [r0, #8]
 8013882:	f240 1301 	movw	r3, #257	; 0x101
 8013886:	e9c0 5500 	strd	r5, r5, [r0]
 801388a:	8183      	strh	r3, [r0, #12]
 801388c:	3501      	adds	r5, #1
 801388e:	4621      	mov	r1, r4
 8013890:	4630      	mov	r0, r6
 8013892:	f004 fc63 	bl	801815c <put_memory>
 8013896:	42af      	cmp	r7, r5
 8013898:	60a4      	str	r4, [r4, #8]
 801389a:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 801389e:	f804 8ccc 	strb.w	r8, [r4, #-204]
 80138a2:	d1f3      	bne.n	801388c <rmw_uxrce_init_publisher_memory+0x20>
 80138a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138a8:	4770      	bx	lr
 80138aa:	bf00      	nop

080138ac <rmw_uxrce_init_subscription_memory>:
 80138ac:	b1e2      	cbz	r2, 80138e8 <rmw_uxrce_init_subscription_memory+0x3c>
 80138ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138b2:	7b05      	ldrb	r5, [r0, #12]
 80138b4:	4606      	mov	r6, r0
 80138b6:	b9ad      	cbnz	r5, 80138e4 <rmw_uxrce_init_subscription_memory+0x38>
 80138b8:	23d8      	movs	r3, #216	; 0xd8
 80138ba:	4617      	mov	r7, r2
 80138bc:	460c      	mov	r4, r1
 80138be:	46a8      	mov	r8, r5
 80138c0:	6083      	str	r3, [r0, #8]
 80138c2:	f240 1301 	movw	r3, #257	; 0x101
 80138c6:	e9c0 5500 	strd	r5, r5, [r0]
 80138ca:	8183      	strh	r3, [r0, #12]
 80138cc:	3501      	adds	r5, #1
 80138ce:	4621      	mov	r1, r4
 80138d0:	4630      	mov	r0, r6
 80138d2:	f004 fc43 	bl	801815c <put_memory>
 80138d6:	42af      	cmp	r7, r5
 80138d8:	60a4      	str	r4, [r4, #8]
 80138da:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 80138de:	f804 8ccc 	strb.w	r8, [r4, #-204]
 80138e2:	d1f3      	bne.n	80138cc <rmw_uxrce_init_subscription_memory+0x20>
 80138e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138e8:	4770      	bx	lr
 80138ea:	bf00      	nop

080138ec <rmw_uxrce_init_node_memory>:
 80138ec:	b1e2      	cbz	r2, 8013928 <rmw_uxrce_init_node_memory+0x3c>
 80138ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138f2:	7b05      	ldrb	r5, [r0, #12]
 80138f4:	4606      	mov	r6, r0
 80138f6:	b9ad      	cbnz	r5, 8013924 <rmw_uxrce_init_node_memory+0x38>
 80138f8:	23a4      	movs	r3, #164	; 0xa4
 80138fa:	4617      	mov	r7, r2
 80138fc:	460c      	mov	r4, r1
 80138fe:	46a8      	mov	r8, r5
 8013900:	6083      	str	r3, [r0, #8]
 8013902:	f240 1301 	movw	r3, #257	; 0x101
 8013906:	e9c0 5500 	strd	r5, r5, [r0]
 801390a:	8183      	strh	r3, [r0, #12]
 801390c:	3501      	adds	r5, #1
 801390e:	4621      	mov	r1, r4
 8013910:	4630      	mov	r0, r6
 8013912:	f004 fc23 	bl	801815c <put_memory>
 8013916:	42af      	cmp	r7, r5
 8013918:	60a4      	str	r4, [r4, #8]
 801391a:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 801391e:	f804 8c98 	strb.w	r8, [r4, #-152]
 8013922:	d1f3      	bne.n	801390c <rmw_uxrce_init_node_memory+0x20>
 8013924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013928:	4770      	bx	lr
 801392a:	bf00      	nop

0801392c <rmw_uxrce_init_session_memory>:
 801392c:	b1ea      	cbz	r2, 801396a <rmw_uxrce_init_session_memory+0x3e>
 801392e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013932:	7b05      	ldrb	r5, [r0, #12]
 8013934:	4606      	mov	r6, r0
 8013936:	b9b5      	cbnz	r5, 8013966 <rmw_uxrce_init_session_memory+0x3a>
 8013938:	f241 58a8 	movw	r8, #5544	; 0x15a8
 801393c:	f240 1301 	movw	r3, #257	; 0x101
 8013940:	4617      	mov	r7, r2
 8013942:	460c      	mov	r4, r1
 8013944:	46a9      	mov	r9, r5
 8013946:	f8c0 8008 	str.w	r8, [r0, #8]
 801394a:	8183      	strh	r3, [r0, #12]
 801394c:	e9c0 5500 	strd	r5, r5, [r0]
 8013950:	3501      	adds	r5, #1
 8013952:	4621      	mov	r1, r4
 8013954:	4630      	mov	r0, r6
 8013956:	f004 fc01 	bl	801815c <put_memory>
 801395a:	42af      	cmp	r7, r5
 801395c:	60a4      	str	r4, [r4, #8]
 801395e:	f884 900c 	strb.w	r9, [r4, #12]
 8013962:	4444      	add	r4, r8
 8013964:	d1f4      	bne.n	8013950 <rmw_uxrce_init_session_memory+0x24>
 8013966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801396a:	4770      	bx	lr

0801396c <rmw_uxrce_init_topic_memory>:
 801396c:	b1e2      	cbz	r2, 80139a8 <rmw_uxrce_init_topic_memory+0x3c>
 801396e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013972:	7b05      	ldrb	r5, [r0, #12]
 8013974:	4606      	mov	r6, r0
 8013976:	b9ad      	cbnz	r5, 80139a4 <rmw_uxrce_init_topic_memory+0x38>
 8013978:	231c      	movs	r3, #28
 801397a:	4617      	mov	r7, r2
 801397c:	460c      	mov	r4, r1
 801397e:	46a8      	mov	r8, r5
 8013980:	6083      	str	r3, [r0, #8]
 8013982:	f240 1301 	movw	r3, #257	; 0x101
 8013986:	e9c0 5500 	strd	r5, r5, [r0]
 801398a:	8183      	strh	r3, [r0, #12]
 801398c:	3501      	adds	r5, #1
 801398e:	4621      	mov	r1, r4
 8013990:	4630      	mov	r0, r6
 8013992:	f004 fbe3 	bl	801815c <put_memory>
 8013996:	42af      	cmp	r7, r5
 8013998:	60a4      	str	r4, [r4, #8]
 801399a:	f104 041c 	add.w	r4, r4, #28
 801399e:	f804 8c10 	strb.w	r8, [r4, #-16]
 80139a2:	d1f3      	bne.n	801398c <rmw_uxrce_init_topic_memory+0x20>
 80139a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139a8:	4770      	bx	lr
 80139aa:	bf00      	nop

080139ac <rmw_uxrce_init_static_input_buffer_memory>:
 80139ac:	b1ea      	cbz	r2, 80139ea <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 80139ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139b2:	7b05      	ldrb	r5, [r0, #12]
 80139b4:	4606      	mov	r6, r0
 80139b6:	b9b5      	cbnz	r5, 80139e6 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 80139b8:	f44f 6304 	mov.w	r3, #2112	; 0x840
 80139bc:	4617      	mov	r7, r2
 80139be:	460c      	mov	r4, r1
 80139c0:	46a8      	mov	r8, r5
 80139c2:	6083      	str	r3, [r0, #8]
 80139c4:	f240 1301 	movw	r3, #257	; 0x101
 80139c8:	e9c0 5500 	strd	r5, r5, [r0]
 80139cc:	8183      	strh	r3, [r0, #12]
 80139ce:	3501      	adds	r5, #1
 80139d0:	4621      	mov	r1, r4
 80139d2:	4630      	mov	r0, r6
 80139d4:	f004 fbc2 	bl	801815c <put_memory>
 80139d8:	42af      	cmp	r7, r5
 80139da:	60a4      	str	r4, [r4, #8]
 80139dc:	f884 800c 	strb.w	r8, [r4, #12]
 80139e0:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 80139e4:	d1f3      	bne.n	80139ce <rmw_uxrce_init_static_input_buffer_memory+0x22>
 80139e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139ea:	4770      	bx	lr

080139ec <rmw_uxrce_init_init_options_impl_memory>:
 80139ec:	b1e2      	cbz	r2, 8013a28 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 80139ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139f2:	7b05      	ldrb	r5, [r0, #12]
 80139f4:	4606      	mov	r6, r0
 80139f6:	b9ad      	cbnz	r5, 8013a24 <rmw_uxrce_init_init_options_impl_memory+0x38>
 80139f8:	232c      	movs	r3, #44	; 0x2c
 80139fa:	4617      	mov	r7, r2
 80139fc:	460c      	mov	r4, r1
 80139fe:	46a8      	mov	r8, r5
 8013a00:	6083      	str	r3, [r0, #8]
 8013a02:	f240 1301 	movw	r3, #257	; 0x101
 8013a06:	e9c0 5500 	strd	r5, r5, [r0]
 8013a0a:	8183      	strh	r3, [r0, #12]
 8013a0c:	3501      	adds	r5, #1
 8013a0e:	4621      	mov	r1, r4
 8013a10:	4630      	mov	r0, r6
 8013a12:	f004 fba3 	bl	801815c <put_memory>
 8013a16:	42af      	cmp	r7, r5
 8013a18:	60a4      	str	r4, [r4, #8]
 8013a1a:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 8013a1e:	f804 8c20 	strb.w	r8, [r4, #-32]
 8013a22:	d1f3      	bne.n	8013a0c <rmw_uxrce_init_init_options_impl_memory+0x20>
 8013a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a28:	4770      	bx	lr
 8013a2a:	bf00      	nop

08013a2c <rmw_uxrce_init_wait_set_memory>:
 8013a2c:	b1e2      	cbz	r2, 8013a68 <rmw_uxrce_init_wait_set_memory+0x3c>
 8013a2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a32:	7b05      	ldrb	r5, [r0, #12]
 8013a34:	4606      	mov	r6, r0
 8013a36:	b9ad      	cbnz	r5, 8013a64 <rmw_uxrce_init_wait_set_memory+0x38>
 8013a38:	231c      	movs	r3, #28
 8013a3a:	4617      	mov	r7, r2
 8013a3c:	460c      	mov	r4, r1
 8013a3e:	46a8      	mov	r8, r5
 8013a40:	6083      	str	r3, [r0, #8]
 8013a42:	f240 1301 	movw	r3, #257	; 0x101
 8013a46:	e9c0 5500 	strd	r5, r5, [r0]
 8013a4a:	8183      	strh	r3, [r0, #12]
 8013a4c:	3501      	adds	r5, #1
 8013a4e:	4621      	mov	r1, r4
 8013a50:	4630      	mov	r0, r6
 8013a52:	f004 fb83 	bl	801815c <put_memory>
 8013a56:	42af      	cmp	r7, r5
 8013a58:	60a4      	str	r4, [r4, #8]
 8013a5a:	f104 041c 	add.w	r4, r4, #28
 8013a5e:	f804 8c10 	strb.w	r8, [r4, #-16]
 8013a62:	d1f3      	bne.n	8013a4c <rmw_uxrce_init_wait_set_memory+0x20>
 8013a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a68:	4770      	bx	lr
 8013a6a:	bf00      	nop

08013a6c <rmw_uxrce_init_guard_condition_memory>:
 8013a6c:	b1e2      	cbz	r2, 8013aa8 <rmw_uxrce_init_guard_condition_memory+0x3c>
 8013a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a72:	7b05      	ldrb	r5, [r0, #12]
 8013a74:	4606      	mov	r6, r0
 8013a76:	b9ad      	cbnz	r5, 8013aa4 <rmw_uxrce_init_guard_condition_memory+0x38>
 8013a78:	2320      	movs	r3, #32
 8013a7a:	4617      	mov	r7, r2
 8013a7c:	460c      	mov	r4, r1
 8013a7e:	46a8      	mov	r8, r5
 8013a80:	6083      	str	r3, [r0, #8]
 8013a82:	f240 1301 	movw	r3, #257	; 0x101
 8013a86:	e9c0 5500 	strd	r5, r5, [r0]
 8013a8a:	8183      	strh	r3, [r0, #12]
 8013a8c:	3501      	adds	r5, #1
 8013a8e:	4621      	mov	r1, r4
 8013a90:	4630      	mov	r0, r6
 8013a92:	f004 fb63 	bl	801815c <put_memory>
 8013a96:	42af      	cmp	r7, r5
 8013a98:	60a4      	str	r4, [r4, #8]
 8013a9a:	f104 0420 	add.w	r4, r4, #32
 8013a9e:	f804 8c14 	strb.w	r8, [r4, #-20]
 8013aa2:	d1f3      	bne.n	8013a8c <rmw_uxrce_init_guard_condition_memory+0x20>
 8013aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013aa8:	4770      	bx	lr
 8013aaa:	bf00      	nop

08013aac <rmw_uxrce_fini_session_memory>:
 8013aac:	4601      	mov	r1, r0
 8013aae:	4801      	ldr	r0, [pc, #4]	; (8013ab4 <rmw_uxrce_fini_session_memory+0x8>)
 8013ab0:	f004 bb54 	b.w	801815c <put_memory>
 8013ab4:	200108ec 	.word	0x200108ec

08013ab8 <rmw_uxrce_fini_node_memory>:
 8013ab8:	b538      	push	{r3, r4, r5, lr}
 8013aba:	4604      	mov	r4, r0
 8013abc:	6800      	ldr	r0, [r0, #0]
 8013abe:	b128      	cbz	r0, 8013acc <rmw_uxrce_fini_node_memory+0x14>
 8013ac0:	4b07      	ldr	r3, [pc, #28]	; (8013ae0 <rmw_uxrce_fini_node_memory+0x28>)
 8013ac2:	6819      	ldr	r1, [r3, #0]
 8013ac4:	f7ec fbbc 	bl	8000240 <strcmp>
 8013ac8:	b940      	cbnz	r0, 8013adc <rmw_uxrce_fini_node_memory+0x24>
 8013aca:	6020      	str	r0, [r4, #0]
 8013acc:	6861      	ldr	r1, [r4, #4]
 8013ace:	b129      	cbz	r1, 8013adc <rmw_uxrce_fini_node_memory+0x24>
 8013ad0:	2500      	movs	r5, #0
 8013ad2:	4804      	ldr	r0, [pc, #16]	; (8013ae4 <rmw_uxrce_fini_node_memory+0x2c>)
 8013ad4:	610d      	str	r5, [r1, #16]
 8013ad6:	f004 fb41 	bl	801815c <put_memory>
 8013ada:	6065      	str	r5, [r4, #4]
 8013adc:	bd38      	pop	{r3, r4, r5, pc}
 8013ade:	bf00      	nop
 8013ae0:	0801bea0 	.word	0x0801bea0
 8013ae4:	200108bc 	.word	0x200108bc

08013ae8 <rmw_uxrce_fini_publisher_memory>:
 8013ae8:	b510      	push	{r4, lr}
 8013aea:	4604      	mov	r4, r0
 8013aec:	6800      	ldr	r0, [r0, #0]
 8013aee:	b128      	cbz	r0, 8013afc <rmw_uxrce_fini_publisher_memory+0x14>
 8013af0:	4b06      	ldr	r3, [pc, #24]	; (8013b0c <rmw_uxrce_fini_publisher_memory+0x24>)
 8013af2:	6819      	ldr	r1, [r3, #0]
 8013af4:	f7ec fba4 	bl	8000240 <strcmp>
 8013af8:	b938      	cbnz	r0, 8013b0a <rmw_uxrce_fini_publisher_memory+0x22>
 8013afa:	6020      	str	r0, [r4, #0]
 8013afc:	6861      	ldr	r1, [r4, #4]
 8013afe:	b121      	cbz	r1, 8013b0a <rmw_uxrce_fini_publisher_memory+0x22>
 8013b00:	4803      	ldr	r0, [pc, #12]	; (8013b10 <rmw_uxrce_fini_publisher_memory+0x28>)
 8013b02:	f004 fb2b 	bl	801815c <put_memory>
 8013b06:	2300      	movs	r3, #0
 8013b08:	6063      	str	r3, [r4, #4]
 8013b0a:	bd10      	pop	{r4, pc}
 8013b0c:	0801bea0 	.word	0x0801bea0
 8013b10:	200108cc 	.word	0x200108cc

08013b14 <rmw_uxrce_fini_subscription_memory>:
 8013b14:	b510      	push	{r4, lr}
 8013b16:	4604      	mov	r4, r0
 8013b18:	6800      	ldr	r0, [r0, #0]
 8013b1a:	b128      	cbz	r0, 8013b28 <rmw_uxrce_fini_subscription_memory+0x14>
 8013b1c:	4b06      	ldr	r3, [pc, #24]	; (8013b38 <rmw_uxrce_fini_subscription_memory+0x24>)
 8013b1e:	6819      	ldr	r1, [r3, #0]
 8013b20:	f7ec fb8e 	bl	8000240 <strcmp>
 8013b24:	b938      	cbnz	r0, 8013b36 <rmw_uxrce_fini_subscription_memory+0x22>
 8013b26:	6020      	str	r0, [r4, #0]
 8013b28:	6861      	ldr	r1, [r4, #4]
 8013b2a:	b121      	cbz	r1, 8013b36 <rmw_uxrce_fini_subscription_memory+0x22>
 8013b2c:	4803      	ldr	r0, [pc, #12]	; (8013b3c <rmw_uxrce_fini_subscription_memory+0x28>)
 8013b2e:	f004 fb15 	bl	801815c <put_memory>
 8013b32:	2300      	movs	r3, #0
 8013b34:	6063      	str	r3, [r4, #4]
 8013b36:	bd10      	pop	{r4, pc}
 8013b38:	0801bea0 	.word	0x0801bea0
 8013b3c:	2001090c 	.word	0x2001090c

08013b40 <rmw_uxrce_fini_service_memory>:
 8013b40:	b510      	push	{r4, lr}
 8013b42:	4604      	mov	r4, r0
 8013b44:	6800      	ldr	r0, [r0, #0]
 8013b46:	b128      	cbz	r0, 8013b54 <rmw_uxrce_fini_service_memory+0x14>
 8013b48:	4b06      	ldr	r3, [pc, #24]	; (8013b64 <rmw_uxrce_fini_service_memory+0x24>)
 8013b4a:	6819      	ldr	r1, [r3, #0]
 8013b4c:	f7ec fb78 	bl	8000240 <strcmp>
 8013b50:	b938      	cbnz	r0, 8013b62 <rmw_uxrce_fini_service_memory+0x22>
 8013b52:	6020      	str	r0, [r4, #0]
 8013b54:	6861      	ldr	r1, [r4, #4]
 8013b56:	b121      	cbz	r1, 8013b62 <rmw_uxrce_fini_service_memory+0x22>
 8013b58:	4803      	ldr	r0, [pc, #12]	; (8013b68 <rmw_uxrce_fini_service_memory+0x28>)
 8013b5a:	f004 faff 	bl	801815c <put_memory>
 8013b5e:	2300      	movs	r3, #0
 8013b60:	6063      	str	r3, [r4, #4]
 8013b62:	bd10      	pop	{r4, pc}
 8013b64:	0801bea0 	.word	0x0801bea0
 8013b68:	200108dc 	.word	0x200108dc

08013b6c <rmw_uxrce_fini_client_memory>:
 8013b6c:	b510      	push	{r4, lr}
 8013b6e:	4604      	mov	r4, r0
 8013b70:	6800      	ldr	r0, [r0, #0]
 8013b72:	b128      	cbz	r0, 8013b80 <rmw_uxrce_fini_client_memory+0x14>
 8013b74:	4b06      	ldr	r3, [pc, #24]	; (8013b90 <rmw_uxrce_fini_client_memory+0x24>)
 8013b76:	6819      	ldr	r1, [r3, #0]
 8013b78:	f7ec fb62 	bl	8000240 <strcmp>
 8013b7c:	b938      	cbnz	r0, 8013b8e <rmw_uxrce_fini_client_memory+0x22>
 8013b7e:	6020      	str	r0, [r4, #0]
 8013b80:	6861      	ldr	r1, [r4, #4]
 8013b82:	b121      	cbz	r1, 8013b8e <rmw_uxrce_fini_client_memory+0x22>
 8013b84:	4803      	ldr	r0, [pc, #12]	; (8013b94 <rmw_uxrce_fini_client_memory+0x28>)
 8013b86:	f004 fae9 	bl	801815c <put_memory>
 8013b8a:	2300      	movs	r3, #0
 8013b8c:	6063      	str	r3, [r4, #4]
 8013b8e:	bd10      	pop	{r4, pc}
 8013b90:	0801bea0 	.word	0x0801bea0
 8013b94:	2000bf28 	.word	0x2000bf28

08013b98 <rmw_uxrce_fini_topic_memory>:
 8013b98:	b510      	push	{r4, lr}
 8013b9a:	4604      	mov	r4, r0
 8013b9c:	4803      	ldr	r0, [pc, #12]	; (8013bac <rmw_uxrce_fini_topic_memory+0x14>)
 8013b9e:	4621      	mov	r1, r4
 8013ba0:	f004 fadc 	bl	801815c <put_memory>
 8013ba4:	2300      	movs	r3, #0
 8013ba6:	61a3      	str	r3, [r4, #24]
 8013ba8:	bd10      	pop	{r4, pc}
 8013baa:	bf00      	nop
 8013bac:	2001091c 	.word	0x2001091c

08013bb0 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8013bb0:	b082      	sub	sp, #8
 8013bb2:	492b      	ldr	r1, [pc, #172]	; (8013c60 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8013bb4:	b530      	push	{r4, r5, lr}
 8013bb6:	680d      	ldr	r5, [r1, #0]
 8013bb8:	ac03      	add	r4, sp, #12
 8013bba:	e884 000c 	stmia.w	r4, {r2, r3}
 8013bbe:	461c      	mov	r4, r3
 8013bc0:	2d00      	cmp	r5, #0
 8013bc2:	d04b      	beq.n	8013c5c <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 8013bc4:	462b      	mov	r3, r5
 8013bc6:	2100      	movs	r1, #0
 8013bc8:	689a      	ldr	r2, [r3, #8]
 8013bca:	685b      	ldr	r3, [r3, #4]
 8013bcc:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 8013bd0:	4290      	cmp	r0, r2
 8013bd2:	bf08      	it	eq
 8013bd4:	3101      	addeq	r1, #1
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d1f6      	bne.n	8013bc8 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8013bda:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8013bde:	2b02      	cmp	r3, #2
 8013be0:	d029      	beq.n	8013c36 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8013be2:	d820      	bhi.n	8013c26 <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 8013be4:	428c      	cmp	r4, r1
 8013be6:	d828      	bhi.n	8013c3a <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8013be8:	fab4 f284 	clz	r2, r4
 8013bec:	0952      	lsrs	r2, r2, #5
 8013bee:	b324      	cbz	r4, 8013c3a <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8013bf0:	b1dd      	cbz	r5, 8013c2a <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 8013bf2:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8013bf6:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8013bfa:	e001      	b.n	8013c00 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 8013bfc:	686d      	ldr	r5, [r5, #4]
 8013bfe:	b1ad      	cbz	r5, 8013c2c <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8013c00:	68ab      	ldr	r3, [r5, #8]
 8013c02:	f8d3 1814 	ldr.w	r1, [r3, #2068]	; 0x814
 8013c06:	4288      	cmp	r0, r1
 8013c08:	d1f8      	bne.n	8013bfc <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8013c0a:	f8d3 1818 	ldr.w	r1, [r3, #2072]	; 0x818
 8013c0e:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8013c12:	4561      	cmp	r1, ip
 8013c14:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8013c18:	eb73 0e04 	sbcs.w	lr, r3, r4
 8013c1c:	daee      	bge.n	8013bfc <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8013c1e:	468c      	mov	ip, r1
 8013c20:	461c      	mov	r4, r3
 8013c22:	462a      	mov	r2, r5
 8013c24:	e7ea      	b.n	8013bfc <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8013c26:	2b03      	cmp	r3, #3
 8013c28:	d0dc      	beq.n	8013be4 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 8013c2a:	2200      	movs	r2, #0
 8013c2c:	4610      	mov	r0, r2
 8013c2e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013c32:	b002      	add	sp, #8
 8013c34:	4770      	bx	lr
 8013c36:	428c      	cmp	r4, r1
 8013c38:	d905      	bls.n	8013c46 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 8013c3a:	4809      	ldr	r0, [pc, #36]	; (8013c60 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8013c3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013c40:	b002      	add	sp, #8
 8013c42:	f004 ba7b 	b.w	801813c <get_memory>
 8013c46:	fab4 f284 	clz	r2, r4
 8013c4a:	0952      	lsrs	r2, r2, #5
 8013c4c:	2c00      	cmp	r4, #0
 8013c4e:	d1ed      	bne.n	8013c2c <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8013c50:	4803      	ldr	r0, [pc, #12]	; (8013c60 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8013c52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013c56:	b002      	add	sp, #8
 8013c58:	f004 ba70 	b.w	801813c <get_memory>
 8013c5c:	4629      	mov	r1, r5
 8013c5e:	e7bc      	b.n	8013bda <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8013c60:	200108fc 	.word	0x200108fc

08013c64 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8013c64:	4b12      	ldr	r3, [pc, #72]	; (8013cb0 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	b530      	push	{r4, r5, lr}
 8013c6a:	b1f3      	cbz	r3, 8013caa <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 8013c6c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8013c70:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 8013c74:	2400      	movs	r4, #0
 8013c76:	e001      	b.n	8013c7c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8013c78:	685b      	ldr	r3, [r3, #4]
 8013c7a:	b1a3      	cbz	r3, 8013ca6 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8013c7c:	689a      	ldr	r2, [r3, #8]
 8013c7e:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 8013c82:	4288      	cmp	r0, r1
 8013c84:	d1f8      	bne.n	8013c78 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8013c86:	f8d2 1818 	ldr.w	r1, [r2, #2072]	; 0x818
 8013c8a:	f502 6202 	add.w	r2, r2, #2080	; 0x820
 8013c8e:	4571      	cmp	r1, lr
 8013c90:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8013c94:	eb72 050c 	sbcs.w	r5, r2, ip
 8013c98:	daee      	bge.n	8013c78 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8013c9a:	461c      	mov	r4, r3
 8013c9c:	685b      	ldr	r3, [r3, #4]
 8013c9e:	468e      	mov	lr, r1
 8013ca0:	4694      	mov	ip, r2
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d1ea      	bne.n	8013c7c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8013ca6:	4620      	mov	r0, r4
 8013ca8:	bd30      	pop	{r4, r5, pc}
 8013caa:	461c      	mov	r4, r3
 8013cac:	4620      	mov	r0, r4
 8013cae:	bd30      	pop	{r4, r5, pc}
 8013cb0:	200108fc 	.word	0x200108fc
 8013cb4:	00000000 	.word	0x00000000

08013cb8 <rmw_uxrce_clean_expired_static_input_buffer>:
 8013cb8:	4b3d      	ldr	r3, [pc, #244]	; (8013db0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8013cba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cbe:	681f      	ldr	r7, [r3, #0]
 8013cc0:	ed2d 8b06 	vpush	{d8-d10}
 8013cc4:	b08d      	sub	sp, #52	; 0x34
 8013cc6:	f004 fb0d 	bl	80182e4 <rmw_uros_epoch_nanos>
 8013cca:	2f00      	cmp	r7, #0
 8013ccc:	d05d      	beq.n	8013d8a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8013cce:	46b8      	mov	r8, r7
 8013cd0:	4681      	mov	r9, r0
 8013cd2:	468a      	mov	sl, r1
 8013cd4:	ac04      	add	r4, sp, #16
 8013cd6:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8013cda:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 8013cde:	2b04      	cmp	r3, #4
 8013ce0:	ed9f 8b2d 	vldr	d8, [pc, #180]	; 8013d98 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8013ce4:	ed9f ab2e 	vldr	d10, [pc, #184]	; 8013da0 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8013ce8:	ed9f 9b2f 	vldr	d9, [pc, #188]	; 8013da8 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8013cec:	d03f      	beq.n	8013d6e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8013cee:	2b05      	cmp	r3, #5
 8013cf0:	d044      	beq.n	8013d7c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8013cf2:	2b03      	cmp	r3, #3
 8013cf4:	d03b      	beq.n	8013d6e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8013cf6:	ed8d 8b04 	vstr	d8, [sp, #16]
 8013cfa:	ed8d ab06 	vstr	d10, [sp, #24]
 8013cfe:	ab08      	add	r3, sp, #32
 8013d00:	ed8d 8b08 	vstr	d8, [sp, #32]
 8013d04:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 8013d08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013d0a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013d0e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8013d12:	f004 f8a3 	bl	8017e5c <rmw_time_equal>
 8013d16:	b118      	cbz	r0, 8013d20 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8013d18:	ed8d 9b04 	vstr	d9, [sp, #16]
 8013d1c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8013d20:	f8d5 6818 	ldr.w	r6, [r5, #2072]	; 0x818
 8013d24:	f505 6502 	add.w	r5, r5, #2080	; 0x820
 8013d28:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8013d2c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8013d30:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8013d34:	f004 f8e8 	bl	8017f08 <rmw_time_total_nsec>
 8013d38:	1830      	adds	r0, r6, r0
 8013d3a:	eb47 0101 	adc.w	r1, r7, r1
 8013d3e:	4548      	cmp	r0, r9
 8013d40:	eb71 030a 	sbcs.w	r3, r1, sl
 8013d44:	db05      	blt.n	8013d52 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 8013d46:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 8013d4a:	4591      	cmp	r9, r2
 8013d4c:	eb7a 0303 	sbcs.w	r3, sl, r3
 8013d50:	da03      	bge.n	8013d5a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 8013d52:	4641      	mov	r1, r8
 8013d54:	4816      	ldr	r0, [pc, #88]	; (8013db0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8013d56:	f004 fa01 	bl	801815c <put_memory>
 8013d5a:	f1bb 0f00 	cmp.w	fp, #0
 8013d5e:	d014      	beq.n	8013d8a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8013d60:	46d8      	mov	r8, fp
 8013d62:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8013d66:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 8013d6a:	2b04      	cmp	r3, #4
 8013d6c:	d1bf      	bne.n	8013cee <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 8013d6e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 8013d72:	3340      	adds	r3, #64	; 0x40
 8013d74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013d76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013d7a:	e7c0      	b.n	8013cfe <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8013d7c:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 8013d80:	3348      	adds	r3, #72	; 0x48
 8013d82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013d84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013d88:	e7b9      	b.n	8013cfe <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8013d8a:	b00d      	add	sp, #52	; 0x34
 8013d8c:	ecbd 8b06 	vpop	{d8-d10}
 8013d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d94:	f3af 8000 	nop.w
	...
 8013da0:	00000001 	.word	0x00000001
 8013da4:	00000000 	.word	0x00000000
 8013da8:	0000001e 	.word	0x0000001e
 8013dac:	00000000 	.word	0x00000000
 8013db0:	200108fc 	.word	0x200108fc

08013db4 <run_xrce_session>:
 8013db4:	b510      	push	{r4, lr}
 8013db6:	788c      	ldrb	r4, [r1, #2]
 8013db8:	b086      	sub	sp, #24
 8013dba:	2c01      	cmp	r4, #1
 8013dbc:	f8ad 200e 	strh.w	r2, [sp, #14]
 8013dc0:	d00c      	beq.n	8013ddc <run_xrce_session+0x28>
 8013dc2:	2401      	movs	r4, #1
 8013dc4:	4619      	mov	r1, r3
 8013dc6:	f10d 020e 	add.w	r2, sp, #14
 8013dca:	f10d 0317 	add.w	r3, sp, #23
 8013dce:	9400      	str	r4, [sp, #0]
 8013dd0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013dd4:	f001 f934 	bl	8015040 <uxr_run_session_until_all_status>
 8013dd8:	b006      	add	sp, #24
 8013dda:	bd10      	pop	{r4, pc}
 8013ddc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013de0:	f000 fd50 	bl	8014884 <uxr_flash_output_streams>
 8013de4:	4620      	mov	r0, r4
 8013de6:	b006      	add	sp, #24
 8013de8:	bd10      	pop	{r4, pc}
 8013dea:	bf00      	nop

08013dec <convert_qos_profile>:
 8013dec:	7a4a      	ldrb	r2, [r1, #9]
 8013dee:	f891 c008 	ldrb.w	ip, [r1, #8]
 8013df2:	2a02      	cmp	r2, #2
 8013df4:	bf18      	it	ne
 8013df6:	2200      	movne	r2, #0
 8013df8:	7002      	strb	r2, [r0, #0]
 8013dfa:	f1ac 0202 	sub.w	r2, ip, #2
 8013dfe:	fab2 f282 	clz	r2, r2
 8013e02:	0952      	lsrs	r2, r2, #5
 8013e04:	7042      	strb	r2, [r0, #1]
 8013e06:	780a      	ldrb	r2, [r1, #0]
 8013e08:	8889      	ldrh	r1, [r1, #4]
 8013e0a:	f1a2 0202 	sub.w	r2, r2, #2
 8013e0e:	8081      	strh	r1, [r0, #4]
 8013e10:	fab2 f282 	clz	r2, r2
 8013e14:	0952      	lsrs	r2, r2, #5
 8013e16:	7082      	strb	r2, [r0, #2]
 8013e18:	4770      	bx	lr
 8013e1a:	bf00      	nop

08013e1c <generate_service_topics>:
 8013e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e1e:	461d      	mov	r5, r3
 8013e20:	b083      	sub	sp, #12
 8013e22:	4606      	mov	r6, r0
 8013e24:	4c11      	ldr	r4, [pc, #68]	; (8013e6c <generate_service_topics+0x50>)
 8013e26:	4608      	mov	r0, r1
 8013e28:	4b11      	ldr	r3, [pc, #68]	; (8013e70 <generate_service_topics+0x54>)
 8013e2a:	4617      	mov	r7, r2
 8013e2c:	4629      	mov	r1, r5
 8013e2e:	4a11      	ldr	r2, [pc, #68]	; (8013e74 <generate_service_topics+0x58>)
 8013e30:	9401      	str	r4, [sp, #4]
 8013e32:	9600      	str	r6, [sp, #0]
 8013e34:	f005 faf4 	bl	8019420 <sniprintf>
 8013e38:	4a0f      	ldr	r2, [pc, #60]	; (8013e78 <generate_service_topics+0x5c>)
 8013e3a:	4604      	mov	r4, r0
 8013e3c:	4b0f      	ldr	r3, [pc, #60]	; (8013e7c <generate_service_topics+0x60>)
 8013e3e:	9201      	str	r2, [sp, #4]
 8013e40:	4638      	mov	r0, r7
 8013e42:	4a0c      	ldr	r2, [pc, #48]	; (8013e74 <generate_service_topics+0x58>)
 8013e44:	4629      	mov	r1, r5
 8013e46:	9600      	str	r6, [sp, #0]
 8013e48:	f005 faea 	bl	8019420 <sniprintf>
 8013e4c:	2c00      	cmp	r4, #0
 8013e4e:	bfa8      	it	ge
 8013e50:	42a5      	cmpge	r5, r4
 8013e52:	bfcc      	ite	gt
 8013e54:	2401      	movgt	r4, #1
 8013e56:	2400      	movle	r4, #0
 8013e58:	dd05      	ble.n	8013e66 <generate_service_topics+0x4a>
 8013e5a:	2800      	cmp	r0, #0
 8013e5c:	bfa8      	it	ge
 8013e5e:	4285      	cmpge	r5, r0
 8013e60:	bfcc      	ite	gt
 8013e62:	2401      	movgt	r4, #1
 8013e64:	2400      	movle	r4, #0
 8013e66:	4620      	mov	r0, r4
 8013e68:	b003      	add	sp, #12
 8013e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e6c:	0801ba60 	.word	0x0801ba60
 8013e70:	0801ba5c 	.word	0x0801ba5c
 8013e74:	0801ba40 	.word	0x0801ba40
 8013e78:	0801ba54 	.word	0x0801ba54
 8013e7c:	0801ba50 	.word	0x0801ba50

08013e80 <generate_service_types>:
 8013e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e84:	4606      	mov	r6, r0
 8013e86:	b087      	sub	sp, #28
 8013e88:	461c      	mov	r4, r3
 8013e8a:	6883      	ldr	r3, [r0, #8]
 8013e8c:	460d      	mov	r5, r1
 8013e8e:	4617      	mov	r7, r2
 8013e90:	4798      	blx	r3
 8013e92:	68f3      	ldr	r3, [r6, #12]
 8013e94:	4606      	mov	r6, r0
 8013e96:	4798      	blx	r3
 8013e98:	2300      	movs	r3, #0
 8013e9a:	f8d0 b004 	ldr.w	fp, [r0, #4]
 8013e9e:	6872      	ldr	r2, [r6, #4]
 8013ea0:	702b      	strb	r3, [r5, #0]
 8013ea2:	6813      	ldr	r3, [r2, #0]
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d03f      	beq.n	8013f28 <generate_service_types+0xa8>
 8013ea8:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8013f3c <generate_service_types+0xbc>
 8013eac:	4649      	mov	r1, r9
 8013eae:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8013f44 <generate_service_types+0xc4>
 8013eb2:	4628      	mov	r0, r5
 8013eb4:	f8df a090 	ldr.w	sl, [pc, #144]	; 8013f48 <generate_service_types+0xc8>
 8013eb8:	f8cd 8014 	str.w	r8, [sp, #20]
 8013ebc:	6852      	ldr	r2, [r2, #4]
 8013ebe:	9100      	str	r1, [sp, #0]
 8013ec0:	4621      	mov	r1, r4
 8013ec2:	f8cd 8008 	str.w	r8, [sp, #8]
 8013ec6:	f8cd a004 	str.w	sl, [sp, #4]
 8013eca:	e9cd 9203 	strd	r9, r2, [sp, #12]
 8013ece:	4a1a      	ldr	r2, [pc, #104]	; (8013f38 <generate_service_types+0xb8>)
 8013ed0:	f005 faa6 	bl	8019420 <sniprintf>
 8013ed4:	2300      	movs	r3, #0
 8013ed6:	42a0      	cmp	r0, r4
 8013ed8:	ea6f 0600 	mvn.w	r6, r0
 8013edc:	703b      	strb	r3, [r7, #0]
 8013ede:	f8db 3000 	ldr.w	r3, [fp]
 8013ee2:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 8013ee6:	bfac      	ite	ge
 8013ee8:	2500      	movge	r5, #0
 8013eea:	2501      	movlt	r5, #1
 8013eec:	b30b      	cbz	r3, 8013f32 <generate_service_types+0xb2>
 8013eee:	4a13      	ldr	r2, [pc, #76]	; (8013f3c <generate_service_types+0xbc>)
 8013ef0:	f8cd 8014 	str.w	r8, [sp, #20]
 8013ef4:	402e      	ands	r6, r5
 8013ef6:	f8db 1004 	ldr.w	r1, [fp, #4]
 8013efa:	4638      	mov	r0, r7
 8013efc:	9104      	str	r1, [sp, #16]
 8013efe:	4621      	mov	r1, r4
 8013f00:	e9cd 2a00 	strd	r2, sl, [sp]
 8013f04:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8013f08:	4a0b      	ldr	r2, [pc, #44]	; (8013f38 <generate_service_types+0xb8>)
 8013f0a:	f005 fa89 	bl	8019420 <sniprintf>
 8013f0e:	2800      	cmp	r0, #0
 8013f10:	bfb4      	ite	lt
 8013f12:	2600      	movlt	r6, #0
 8013f14:	f006 0601 	andge.w	r6, r6, #1
 8013f18:	42a0      	cmp	r0, r4
 8013f1a:	bfac      	ite	ge
 8013f1c:	2000      	movge	r0, #0
 8013f1e:	f006 0001 	andlt.w	r0, r6, #1
 8013f22:	b007      	add	sp, #28
 8013f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f28:	4b05      	ldr	r3, [pc, #20]	; (8013f40 <generate_service_types+0xc0>)
 8013f2a:	f8df 9010 	ldr.w	r9, [pc, #16]	; 8013f3c <generate_service_types+0xbc>
 8013f2e:	4619      	mov	r1, r3
 8013f30:	e7bd      	b.n	8013eae <generate_service_types+0x2e>
 8013f32:	4b03      	ldr	r3, [pc, #12]	; (8013f40 <generate_service_types+0xc0>)
 8013f34:	461a      	mov	r2, r3
 8013f36:	e7db      	b.n	8013ef0 <generate_service_types+0x70>
 8013f38:	0801ba38 	.word	0x0801ba38
 8013f3c:	0801ba34 	.word	0x0801ba34
 8013f40:	0801b824 	.word	0x0801b824
 8013f44:	0801ba48 	.word	0x0801ba48
 8013f48:	0801ba4c 	.word	0x0801ba4c

08013f4c <is_uxrce_rmw_identifier_valid>:
 8013f4c:	b510      	push	{r4, lr}
 8013f4e:	4604      	mov	r4, r0
 8013f50:	b140      	cbz	r0, 8013f64 <is_uxrce_rmw_identifier_valid+0x18>
 8013f52:	f7fe fbbd 	bl	80126d0 <rmw_get_implementation_identifier>
 8013f56:	4601      	mov	r1, r0
 8013f58:	4620      	mov	r0, r4
 8013f5a:	f7ec f971 	bl	8000240 <strcmp>
 8013f5e:	fab0 f080 	clz	r0, r0
 8013f62:	0940      	lsrs	r0, r0, #5
 8013f64:	bd10      	pop	{r4, pc}
 8013f66:	bf00      	nop

08013f68 <service_msgs__msg__ServiceEventInfo__get_type_hash>:
 8013f68:	4800      	ldr	r0, [pc, #0]	; (8013f6c <service_msgs__msg__ServiceEventInfo__get_type_hash+0x4>)
 8013f6a:	4770      	bx	lr
 8013f6c:	20001a9c 	.word	0x20001a9c

08013f70 <service_msgs__msg__ServiceEventInfo__get_type_description>:
 8013f70:	b510      	push	{r4, lr}
 8013f72:	4c08      	ldr	r4, [pc, #32]	; (8013f94 <service_msgs__msg__ServiceEventInfo__get_type_description+0x24>)
 8013f74:	7820      	ldrb	r0, [r4, #0]
 8013f76:	b108      	cbz	r0, 8013f7c <service_msgs__msg__ServiceEventInfo__get_type_description+0xc>
 8013f78:	4807      	ldr	r0, [pc, #28]	; (8013f98 <service_msgs__msg__ServiceEventInfo__get_type_description+0x28>)
 8013f7a:	bd10      	pop	{r4, pc}
 8013f7c:	f000 f858 	bl	8014030 <builtin_interfaces__msg__Time__get_type_description>
 8013f80:	300c      	adds	r0, #12
 8013f82:	4b06      	ldr	r3, [pc, #24]	; (8013f9c <service_msgs__msg__ServiceEventInfo__get_type_description+0x2c>)
 8013f84:	c807      	ldmia	r0, {r0, r1, r2}
 8013f86:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013f8a:	2301      	movs	r3, #1
 8013f8c:	4802      	ldr	r0, [pc, #8]	; (8013f98 <service_msgs__msg__ServiceEventInfo__get_type_description+0x28>)
 8013f8e:	7023      	strb	r3, [r4, #0]
 8013f90:	bd10      	pop	{r4, pc}
 8013f92:	bf00      	nop
 8013f94:	2001093d 	.word	0x2001093d
 8013f98:	0801ba68 	.word	0x0801ba68
 8013f9c:	20001c24 	.word	0x20001c24

08013fa0 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>:
 8013fa0:	4800      	ldr	r0, [pc, #0]	; (8013fa4 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source+0x4>)
 8013fa2:	4770      	bx	lr
 8013fa4:	0801ba8c 	.word	0x0801ba8c

08013fa8 <service_msgs__msg__ServiceEventInfo__get_type_description_sources>:
 8013fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013faa:	4e0f      	ldr	r6, [pc, #60]	; (8013fe8 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x40>)
 8013fac:	7837      	ldrb	r7, [r6, #0]
 8013fae:	b10f      	cbz	r7, 8013fb4 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0xc>
 8013fb0:	480e      	ldr	r0, [pc, #56]	; (8013fec <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x44>)
 8013fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013fb4:	4d0e      	ldr	r5, [pc, #56]	; (8013ff0 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x48>)
 8013fb6:	4c0f      	ldr	r4, [pc, #60]	; (8013ff4 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x4c>)
 8013fb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013fba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013fbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013fbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013fc0:	682b      	ldr	r3, [r5, #0]
 8013fc2:	4638      	mov	r0, r7
 8013fc4:	f844 3b04 	str.w	r3, [r4], #4
 8013fc8:	f000 f83e 	bl	8014048 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8013fcc:	2301      	movs	r3, #1
 8013fce:	4684      	mov	ip, r0
 8013fd0:	7033      	strb	r3, [r6, #0]
 8013fd2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013fd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013fd8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013fdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013fde:	f8dc 3000 	ldr.w	r3, [ip]
 8013fe2:	4802      	ldr	r0, [pc, #8]	; (8013fec <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x44>)
 8013fe4:	6023      	str	r3, [r4, #0]
 8013fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013fe8:	2001093c 	.word	0x2001093c
 8013fec:	0801bab0 	.word	0x0801bab0
 8013ff0:	0801ba8c 	.word	0x0801ba8c
 8013ff4:	20010940 	.word	0x20010940

08013ff8 <service_msgs__msg__ServiceEventInfo__init>:
 8013ff8:	b538      	push	{r3, r4, r5, lr}
 8013ffa:	b138      	cbz	r0, 801400c <service_msgs__msg__ServiceEventInfo__init+0x14>
 8013ffc:	1d05      	adds	r5, r0, #4
 8013ffe:	4628      	mov	r0, r5
 8014000:	f000 f842 	bl	8014088 <builtin_interfaces__msg__Time__init>
 8014004:	4604      	mov	r4, r0
 8014006:	b120      	cbz	r0, 8014012 <service_msgs__msg__ServiceEventInfo__init+0x1a>
 8014008:	4620      	mov	r0, r4
 801400a:	bd38      	pop	{r3, r4, r5, pc}
 801400c:	4604      	mov	r4, r0
 801400e:	4620      	mov	r0, r4
 8014010:	bd38      	pop	{r3, r4, r5, pc}
 8014012:	4628      	mov	r0, r5
 8014014:	f000 f83c 	bl	8014090 <builtin_interfaces__msg__Time__fini>
 8014018:	4620      	mov	r0, r4
 801401a:	bd38      	pop	{r3, r4, r5, pc}

0801401c <service_msgs__msg__ServiceEventInfo__fini>:
 801401c:	b110      	cbz	r0, 8014024 <service_msgs__msg__ServiceEventInfo__fini+0x8>
 801401e:	3004      	adds	r0, #4
 8014020:	f000 b836 	b.w	8014090 <builtin_interfaces__msg__Time__fini>
 8014024:	4770      	bx	lr
 8014026:	bf00      	nop

08014028 <builtin_interfaces__msg__Time__get_type_hash>:
 8014028:	4800      	ldr	r0, [pc, #0]	; (801402c <builtin_interfaces__msg__Time__get_type_hash+0x4>)
 801402a:	4770      	bx	lr
 801402c:	20001fc0 	.word	0x20001fc0

08014030 <builtin_interfaces__msg__Time__get_type_description>:
 8014030:	4b03      	ldr	r3, [pc, #12]	; (8014040 <builtin_interfaces__msg__Time__get_type_description+0x10>)
 8014032:	781a      	ldrb	r2, [r3, #0]
 8014034:	b90a      	cbnz	r2, 801403a <builtin_interfaces__msg__Time__get_type_description+0xa>
 8014036:	2201      	movs	r2, #1
 8014038:	701a      	strb	r2, [r3, #0]
 801403a:	4802      	ldr	r0, [pc, #8]	; (8014044 <builtin_interfaces__msg__Time__get_type_description+0x14>)
 801403c:	4770      	bx	lr
 801403e:	bf00      	nop
 8014040:	20010989 	.word	0x20010989
 8014044:	0801babc 	.word	0x0801babc

08014048 <builtin_interfaces__msg__Time__get_individual_type_description_source>:
 8014048:	4800      	ldr	r0, [pc, #0]	; (801404c <builtin_interfaces__msg__Time__get_individual_type_description_source+0x4>)
 801404a:	4770      	bx	lr
 801404c:	0801bae0 	.word	0x0801bae0

08014050 <builtin_interfaces__msg__Time__get_type_description_sources>:
 8014050:	4b09      	ldr	r3, [pc, #36]	; (8014078 <builtin_interfaces__msg__Time__get_type_description_sources+0x28>)
 8014052:	781a      	ldrb	r2, [r3, #0]
 8014054:	b96a      	cbnz	r2, 8014072 <builtin_interfaces__msg__Time__get_type_description_sources+0x22>
 8014056:	2201      	movs	r2, #1
 8014058:	b430      	push	{r4, r5}
 801405a:	4d08      	ldr	r5, [pc, #32]	; (801407c <builtin_interfaces__msg__Time__get_type_description_sources+0x2c>)
 801405c:	4c08      	ldr	r4, [pc, #32]	; (8014080 <builtin_interfaces__msg__Time__get_type_description_sources+0x30>)
 801405e:	701a      	strb	r2, [r3, #0]
 8014060:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014062:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014064:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014066:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014068:	682b      	ldr	r3, [r5, #0]
 801406a:	4806      	ldr	r0, [pc, #24]	; (8014084 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 801406c:	6023      	str	r3, [r4, #0]
 801406e:	bc30      	pop	{r4, r5}
 8014070:	4770      	bx	lr
 8014072:	4804      	ldr	r0, [pc, #16]	; (8014084 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 8014074:	4770      	bx	lr
 8014076:	bf00      	nop
 8014078:	20010988 	.word	0x20010988
 801407c:	0801bae0 	.word	0x0801bae0
 8014080:	2001098c 	.word	0x2001098c
 8014084:	0801bb04 	.word	0x0801bb04

08014088 <builtin_interfaces__msg__Time__init>:
 8014088:	3800      	subs	r0, #0
 801408a:	bf18      	it	ne
 801408c:	2001      	movne	r0, #1
 801408e:	4770      	bx	lr

08014090 <builtin_interfaces__msg__Time__fini>:
 8014090:	4770      	bx	lr
 8014092:	bf00      	nop

08014094 <uxr_buffer_delete_entity>:
 8014094:	b510      	push	{r4, lr}
 8014096:	2300      	movs	r3, #0
 8014098:	b08e      	sub	sp, #56	; 0x38
 801409a:	4604      	mov	r4, r0
 801409c:	9103      	str	r1, [sp, #12]
 801409e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80140a2:	2303      	movs	r3, #3
 80140a4:	2204      	movs	r2, #4
 80140a6:	9300      	str	r3, [sp, #0]
 80140a8:	ab06      	add	r3, sp, #24
 80140aa:	f001 f9f5 	bl	8015498 <uxr_prepare_stream_to_write_submessage>
 80140ae:	b918      	cbnz	r0, 80140b8 <uxr_buffer_delete_entity+0x24>
 80140b0:	4604      	mov	r4, r0
 80140b2:	4620      	mov	r0, r4
 80140b4:	b00e      	add	sp, #56	; 0x38
 80140b6:	bd10      	pop	{r4, pc}
 80140b8:	9902      	ldr	r1, [sp, #8]
 80140ba:	aa05      	add	r2, sp, #20
 80140bc:	4620      	mov	r0, r4
 80140be:	f001 fb27 	bl	8015710 <uxr_init_base_object_request>
 80140c2:	4604      	mov	r4, r0
 80140c4:	a905      	add	r1, sp, #20
 80140c6:	a806      	add	r0, sp, #24
 80140c8:	f002 ffea 	bl	80170a0 <uxr_serialize_DELETE_Payload>
 80140cc:	4620      	mov	r0, r4
 80140ce:	b00e      	add	sp, #56	; 0x38
 80140d0:	bd10      	pop	{r4, pc}
 80140d2:	bf00      	nop

080140d4 <uxr_common_create_entity>:
 80140d4:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80140d8:	b510      	push	{r4, lr}
 80140da:	f1bc 0f01 	cmp.w	ip, #1
 80140de:	b08c      	sub	sp, #48	; 0x30
 80140e0:	4604      	mov	r4, r0
 80140e2:	9202      	str	r2, [sp, #8]
 80140e4:	bf0c      	ite	eq
 80140e6:	f003 0201 	andeq.w	r2, r3, #1
 80140ea:	2200      	movne	r2, #0
 80140ec:	330e      	adds	r3, #14
 80140ee:	9103      	str	r1, [sp, #12]
 80140f0:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 80140f4:	441a      	add	r2, r3
 80140f6:	ab04      	add	r3, sp, #16
 80140f8:	9101      	str	r1, [sp, #4]
 80140fa:	2101      	movs	r1, #1
 80140fc:	b292      	uxth	r2, r2
 80140fe:	9100      	str	r1, [sp, #0]
 8014100:	9903      	ldr	r1, [sp, #12]
 8014102:	f001 f9c9 	bl	8015498 <uxr_prepare_stream_to_write_submessage>
 8014106:	b918      	cbnz	r0, 8014110 <uxr_common_create_entity+0x3c>
 8014108:	4604      	mov	r4, r0
 801410a:	4620      	mov	r0, r4
 801410c:	b00c      	add	sp, #48	; 0x30
 801410e:	bd10      	pop	{r4, pc}
 8014110:	9902      	ldr	r1, [sp, #8]
 8014112:	4620      	mov	r0, r4
 8014114:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014116:	f001 fafb 	bl	8015710 <uxr_init_base_object_request>
 801411a:	4604      	mov	r4, r0
 801411c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801411e:	a804      	add	r0, sp, #16
 8014120:	f002 ff18 	bl	8016f54 <uxr_serialize_CREATE_Payload>
 8014124:	4620      	mov	r0, r4
 8014126:	b00c      	add	sp, #48	; 0x30
 8014128:	bd10      	pop	{r4, pc}
 801412a:	bf00      	nop

0801412c <uxr_buffer_create_participant_bin>:
 801412c:	b570      	push	{r4, r5, r6, lr}
 801412e:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8014132:	4605      	mov	r5, r0
 8014134:	ac11      	add	r4, sp, #68	; 0x44
 8014136:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 801413a:	2303      	movs	r3, #3
 801413c:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 8014140:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8014144:	7223      	strb	r3, [r4, #8]
 8014146:	2300      	movs	r3, #0
 8014148:	2201      	movs	r2, #1
 801414a:	f88d 3014 	strb.w	r3, [sp, #20]
 801414e:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 8014150:	7122      	strb	r2, [r4, #4]
 8014152:	b1cb      	cbz	r3, 8014188 <uxr_buffer_create_participant_bin+0x5c>
 8014154:	f88d 201c 	strb.w	r2, [sp, #28]
 8014158:	9308      	str	r3, [sp, #32]
 801415a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801415e:	a915      	add	r1, sp, #84	; 0x54
 8014160:	a809      	add	r0, sp, #36	; 0x24
 8014162:	f7f9 fe79 	bl	800de58 <ucdr_init_buffer>
 8014166:	a905      	add	r1, sp, #20
 8014168:	a809      	add	r0, sp, #36	; 0x24
 801416a:	f002 fceb 	bl	8016b44 <uxr_serialize_OBJK_DomainParticipant_Binary>
 801416e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014170:	9600      	str	r6, [sp, #0]
 8014172:	4628      	mov	r0, r5
 8014174:	9401      	str	r4, [sp, #4]
 8014176:	60e3      	str	r3, [r4, #12]
 8014178:	b29b      	uxth	r3, r3
 801417a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801417e:	f7ff ffa9 	bl	80140d4 <uxr_common_create_entity>
 8014182:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 8014186:	bd70      	pop	{r4, r5, r6, pc}
 8014188:	f88d 301c 	strb.w	r3, [sp, #28]
 801418c:	e7e5      	b.n	801415a <uxr_buffer_create_participant_bin+0x2e>
 801418e:	bf00      	nop

08014190 <uxr_buffer_create_replier_bin>:
 8014190:	b570      	push	{r4, r5, r6, lr}
 8014192:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8014196:	4605      	mov	r5, r0
 8014198:	4618      	mov	r0, r3
 801419a:	9105      	str	r1, [sp, #20]
 801419c:	a999      	add	r1, sp, #612	; 0x264
 801419e:	f89d 6294 	ldrb.w	r6, [sp, #660]	; 0x294
 80141a2:	ac15      	add	r4, sp, #84	; 0x54
 80141a4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80141a8:	2308      	movs	r3, #8
 80141aa:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 80141ae:	f000 f909 	bl	80143c4 <uxr_object_id_to_raw>
 80141b2:	9b9e      	ldr	r3, [sp, #632]	; 0x278
 80141b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80141b8:	a919      	add	r1, sp, #100	; 0x64
 80141ba:	a80d      	add	r0, sp, #52	; 0x34
 80141bc:	9306      	str	r3, [sp, #24]
 80141be:	9b9f      	ldr	r3, [sp, #636]	; 0x27c
 80141c0:	9307      	str	r3, [sp, #28]
 80141c2:	9ba0      	ldr	r3, [sp, #640]	; 0x280
 80141c4:	9308      	str	r3, [sp, #32]
 80141c6:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80141c8:	930c      	str	r3, [sp, #48]	; 0x30
 80141ca:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80141cc:	930a      	str	r3, [sp, #40]	; 0x28
 80141ce:	2301      	movs	r3, #1
 80141d0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80141d4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80141d8:	2303      	movs	r3, #3
 80141da:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 80141de:	f7f9 fe3b 	bl	800de58 <ucdr_init_buffer>
 80141e2:	a906      	add	r1, sp, #24
 80141e4:	a80d      	add	r0, sp, #52	; 0x34
 80141e6:	f002 fccf 	bl	8016b88 <uxr_serialize_OBJK_Replier_Binary>
 80141ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80141ec:	4628      	mov	r0, r5
 80141ee:	9600      	str	r6, [sp, #0]
 80141f0:	9318      	str	r3, [sp, #96]	; 0x60
 80141f2:	b29b      	uxth	r3, r3
 80141f4:	9401      	str	r4, [sp, #4]
 80141f6:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80141fa:	f7ff ff6b 	bl	80140d4 <uxr_common_create_entity>
 80141fe:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
 8014202:	bd70      	pop	{r4, r5, r6, pc}

08014204 <get_custom_error>:
 8014204:	4b01      	ldr	r3, [pc, #4]	; (801420c <get_custom_error+0x8>)
 8014206:	7818      	ldrb	r0, [r3, #0]
 8014208:	4770      	bx	lr
 801420a:	bf00      	nop
 801420c:	200109b0 	.word	0x200109b0

08014210 <recv_custom_msg>:
 8014210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014214:	4693      	mov	fp, r2
 8014216:	b089      	sub	sp, #36	; 0x24
 8014218:	2200      	movs	r2, #0
 801421a:	4604      	mov	r4, r0
 801421c:	468a      	mov	sl, r1
 801421e:	9305      	str	r3, [sp, #20]
 8014220:	f88d 201e 	strb.w	r2, [sp, #30]
 8014224:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 8014228:	b322      	cbz	r2, 8014274 <recv_custom_msg+0x64>
 801422a:	f200 2902 	addw	r9, r0, #514	; 0x202
 801422e:	f10d 081f 	add.w	r8, sp, #31
 8014232:	af05      	add	r7, sp, #20
 8014234:	f10d 061e 	add.w	r6, sp, #30
 8014238:	f44f 7500 	mov.w	r5, #512	; 0x200
 801423c:	e002      	b.n	8014244 <recv_custom_msg+0x34>
 801423e:	9b05      	ldr	r3, [sp, #20]
 8014240:	2b00      	cmp	r3, #0
 8014242:	dd0f      	ble.n	8014264 <recv_custom_msg+0x54>
 8014244:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8014248:	4623      	mov	r3, r4
 801424a:	4622      	mov	r2, r4
 801424c:	4648      	mov	r0, r9
 801424e:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8014252:	e9cd 5600 	strd	r5, r6, [sp]
 8014256:	f001 fc71 	bl	8015b3c <uxr_read_framed_msg>
 801425a:	2800      	cmp	r0, #0
 801425c:	d0ef      	beq.n	801423e <recv_custom_msg+0x2e>
 801425e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8014262:	b1b3      	cbz	r3, 8014292 <recv_custom_msg+0x82>
 8014264:	4b0f      	ldr	r3, [pc, #60]	; (80142a4 <recv_custom_msg+0x94>)
 8014266:	2000      	movs	r0, #0
 8014268:	f89d 201f 	ldrb.w	r2, [sp, #31]
 801426c:	701a      	strb	r2, [r3, #0]
 801426e:	b009      	add	sp, #36	; 0x24
 8014270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014274:	f10d 021f 	add.w	r2, sp, #31
 8014278:	4601      	mov	r1, r0
 801427a:	9200      	str	r2, [sp, #0]
 801427c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014280:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8014284:	47a8      	blx	r5
 8014286:	2800      	cmp	r0, #0
 8014288:	d0ec      	beq.n	8014264 <recv_custom_msg+0x54>
 801428a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801428e:	2b00      	cmp	r3, #0
 8014290:	d1e8      	bne.n	8014264 <recv_custom_msg+0x54>
 8014292:	f8cb 0000 	str.w	r0, [fp]
 8014296:	2001      	movs	r0, #1
 8014298:	f8ca 4000 	str.w	r4, [sl]
 801429c:	b009      	add	sp, #36	; 0x24
 801429e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142a2:	bf00      	nop
 80142a4:	200109b0 	.word	0x200109b0

080142a8 <send_custom_msg>:
 80142a8:	b530      	push	{r4, r5, lr}
 80142aa:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 80142ae:	b087      	sub	sp, #28
 80142b0:	4614      	mov	r4, r2
 80142b2:	b995      	cbnz	r5, 80142da <send_custom_msg+0x32>
 80142b4:	f8d0 5270 	ldr.w	r5, [r0, #624]	; 0x270
 80142b8:	f10d 0317 	add.w	r3, sp, #23
 80142bc:	47a8      	blx	r5
 80142be:	1e03      	subs	r3, r0, #0
 80142c0:	bf18      	it	ne
 80142c2:	2301      	movne	r3, #1
 80142c4:	42a0      	cmp	r0, r4
 80142c6:	bf18      	it	ne
 80142c8:	2300      	movne	r3, #0
 80142ca:	b91b      	cbnz	r3, 80142d4 <send_custom_msg+0x2c>
 80142cc:	4a0a      	ldr	r2, [pc, #40]	; (80142f8 <send_custom_msg+0x50>)
 80142ce:	f89d 1017 	ldrb.w	r1, [sp, #23]
 80142d2:	7011      	strb	r1, [r2, #0]
 80142d4:	4618      	mov	r0, r3
 80142d6:	b007      	add	sp, #28
 80142d8:	bd30      	pop	{r4, r5, pc}
 80142da:	460b      	mov	r3, r1
 80142dc:	2200      	movs	r2, #0
 80142de:	f10d 0117 	add.w	r1, sp, #23
 80142e2:	9400      	str	r4, [sp, #0]
 80142e4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80142e8:	4602      	mov	r2, r0
 80142ea:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 80142ee:	f200 2002 	addw	r0, r0, #514	; 0x202
 80142f2:	f001 fa45 	bl	8015780 <uxr_write_framed_msg>
 80142f6:	e7e2      	b.n	80142be <send_custom_msg+0x16>
 80142f8:	200109b0 	.word	0x200109b0

080142fc <uxr_set_custom_transport_callbacks>:
 80142fc:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 8014300:	9901      	ldr	r1, [sp, #4]
 8014302:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 8014306:	9b00      	ldr	r3, [sp, #0]
 8014308:	e9c0 319c 	strd	r3, r1, [r0, #624]	; 0x270
 801430c:	4770      	bx	lr
 801430e:	bf00      	nop

08014310 <uxr_init_custom_transport>:
 8014310:	b538      	push	{r3, r4, r5, lr}
 8014312:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 8014316:	b303      	cbz	r3, 801435a <uxr_init_custom_transport+0x4a>
 8014318:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 801431c:	4604      	mov	r4, r0
 801431e:	b1e2      	cbz	r2, 801435a <uxr_init_custom_transport+0x4a>
 8014320:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8014324:	b1ca      	cbz	r2, 801435a <uxr_init_custom_transport+0x4a>
 8014326:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 801432a:	b1b2      	cbz	r2, 801435a <uxr_init_custom_transport+0x4a>
 801432c:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8014330:	4798      	blx	r3
 8014332:	4605      	mov	r5, r0
 8014334:	b188      	cbz	r0, 801435a <uxr_init_custom_transport+0x4a>
 8014336:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 801433a:	b98b      	cbnz	r3, 8014360 <uxr_init_custom_transport+0x50>
 801433c:	4b0b      	ldr	r3, [pc, #44]	; (801436c <uxr_init_custom_transport+0x5c>)
 801433e:	4628      	mov	r0, r5
 8014340:	490b      	ldr	r1, [pc, #44]	; (8014370 <uxr_init_custom_transport+0x60>)
 8014342:	4a0c      	ldr	r2, [pc, #48]	; (8014374 <uxr_init_custom_transport+0x64>)
 8014344:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 8014348:	f44f 7300 	mov.w	r3, #512	; 0x200
 801434c:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 8014350:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 8014354:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 8014358:	bd38      	pop	{r3, r4, r5, pc}
 801435a:	2500      	movs	r5, #0
 801435c:	4628      	mov	r0, r5
 801435e:	bd38      	pop	{r3, r4, r5, pc}
 8014360:	2100      	movs	r1, #0
 8014362:	f204 2002 	addw	r0, r4, #514	; 0x202
 8014366:	f001 fa05 	bl	8015774 <uxr_init_framing_io>
 801436a:	e7e7      	b.n	801433c <uxr_init_custom_transport+0x2c>
 801436c:	08014211 	.word	0x08014211
 8014370:	080142a9 	.word	0x080142a9
 8014374:	08014205 	.word	0x08014205

08014378 <uxr_close_custom_transport>:
 8014378:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 801437c:	4718      	bx	r3
 801437e:	bf00      	nop

08014380 <uxr_object_id>:
 8014380:	b082      	sub	sp, #8
 8014382:	2300      	movs	r3, #0
 8014384:	f88d 1006 	strb.w	r1, [sp, #6]
 8014388:	f360 030f 	bfi	r3, r0, #0, #16
 801438c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8014390:	f362 431f 	bfi	r3, r2, #16, #16
 8014394:	4618      	mov	r0, r3
 8014396:	b002      	add	sp, #8
 8014398:	4770      	bx	lr
 801439a:	bf00      	nop

0801439c <uxr_object_id_from_raw>:
 801439c:	7843      	ldrb	r3, [r0, #1]
 801439e:	b082      	sub	sp, #8
 80143a0:	7801      	ldrb	r1, [r0, #0]
 80143a2:	2000      	movs	r0, #0
 80143a4:	091a      	lsrs	r2, r3, #4
 80143a6:	f003 030f 	and.w	r3, r3, #15
 80143aa:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80143ae:	f88d 3006 	strb.w	r3, [sp, #6]
 80143b2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80143b6:	f362 000f 	bfi	r0, r2, #0, #16
 80143ba:	f363 401f 	bfi	r0, r3, #16, #16
 80143be:	b002      	add	sp, #8
 80143c0:	4770      	bx	lr
 80143c2:	bf00      	nop

080143c4 <uxr_object_id_to_raw>:
 80143c4:	4602      	mov	r2, r0
 80143c6:	f3c0 4303 	ubfx	r3, r0, #16, #4
 80143ca:	b082      	sub	sp, #8
 80143cc:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 80143d0:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 80143d4:	f881 c000 	strb.w	ip, [r1]
 80143d8:	7048      	strb	r0, [r1, #1]
 80143da:	b002      	add	sp, #8
 80143dc:	4770      	bx	lr
 80143de:	bf00      	nop

080143e0 <uxr_buffer_request_data>:
 80143e0:	b530      	push	{r4, r5, lr}
 80143e2:	b095      	sub	sp, #84	; 0x54
 80143e4:	4604      	mov	r4, r0
 80143e6:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80143e8:	9303      	str	r3, [sp, #12]
 80143ea:	2d00      	cmp	r5, #0
 80143ec:	f88d 301c 	strb.w	r3, [sp, #28]
 80143f0:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80143f4:	f04f 0200 	mov.w	r2, #0
 80143f8:	bf14      	ite	ne
 80143fa:	2101      	movne	r1, #1
 80143fc:	4611      	moveq	r1, r2
 80143fe:	f88d 201d 	strb.w	r2, [sp, #29]
 8014402:	f88d 201e 	strb.w	r2, [sp, #30]
 8014406:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801440a:	d021      	beq.n	8014450 <uxr_buffer_request_data+0x70>
 801440c:	686b      	ldr	r3, [r5, #4]
 801440e:	2210      	movs	r2, #16
 8014410:	6829      	ldr	r1, [r5, #0]
 8014412:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 8014416:	f8cd 1026 	str.w	r1, [sp, #38]	; 0x26
 801441a:	2308      	movs	r3, #8
 801441c:	2100      	movs	r1, #0
 801441e:	4620      	mov	r0, r4
 8014420:	e9cd 3100 	strd	r3, r1, [sp]
 8014424:	ab0c      	add	r3, sp, #48	; 0x30
 8014426:	9905      	ldr	r1, [sp, #20]
 8014428:	f001 f836 	bl	8015498 <uxr_prepare_stream_to_write_submessage>
 801442c:	b918      	cbnz	r0, 8014436 <uxr_buffer_request_data+0x56>
 801442e:	4604      	mov	r4, r0
 8014430:	4620      	mov	r0, r4
 8014432:	b015      	add	sp, #84	; 0x54
 8014434:	bd30      	pop	{r4, r5, pc}
 8014436:	9904      	ldr	r1, [sp, #16]
 8014438:	aa06      	add	r2, sp, #24
 801443a:	4620      	mov	r0, r4
 801443c:	f001 f968 	bl	8015710 <uxr_init_base_object_request>
 8014440:	4604      	mov	r4, r0
 8014442:	a906      	add	r1, sp, #24
 8014444:	a80c      	add	r0, sp, #48	; 0x30
 8014446:	f002 fed5 	bl	80171f4 <uxr_serialize_READ_DATA_Payload>
 801444a:	4620      	mov	r0, r4
 801444c:	b015      	add	sp, #84	; 0x54
 801444e:	bd30      	pop	{r4, r5, pc}
 8014450:	2208      	movs	r2, #8
 8014452:	e7e2      	b.n	801441a <uxr_buffer_request_data+0x3a>

08014454 <uxr_buffer_cancel_data>:
 8014454:	b510      	push	{r4, lr}
 8014456:	2300      	movs	r3, #0
 8014458:	b094      	sub	sp, #80	; 0x50
 801445a:	4604      	mov	r4, r0
 801445c:	9205      	str	r2, [sp, #20]
 801445e:	9301      	str	r3, [sp, #4]
 8014460:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014464:	f88d 301e 	strb.w	r3, [sp, #30]
 8014468:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 801446c:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 8014470:	2308      	movs	r3, #8
 8014472:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8014476:	2201      	movs	r2, #1
 8014478:	9300      	str	r3, [sp, #0]
 801447a:	ab0c      	add	r3, sp, #48	; 0x30
 801447c:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8014480:	2210      	movs	r2, #16
 8014482:	f001 f809 	bl	8015498 <uxr_prepare_stream_to_write_submessage>
 8014486:	b918      	cbnz	r0, 8014490 <uxr_buffer_cancel_data+0x3c>
 8014488:	4604      	mov	r4, r0
 801448a:	4620      	mov	r0, r4
 801448c:	b014      	add	sp, #80	; 0x50
 801448e:	bd10      	pop	{r4, pc}
 8014490:	9905      	ldr	r1, [sp, #20]
 8014492:	aa06      	add	r2, sp, #24
 8014494:	4620      	mov	r0, r4
 8014496:	f001 f93b 	bl	8015710 <uxr_init_base_object_request>
 801449a:	4604      	mov	r4, r0
 801449c:	a906      	add	r1, sp, #24
 801449e:	a80c      	add	r0, sp, #48	; 0x30
 80144a0:	f002 fea8 	bl	80171f4 <uxr_serialize_READ_DATA_Payload>
 80144a4:	4620      	mov	r0, r4
 80144a6:	b014      	add	sp, #80	; 0x50
 80144a8:	bd10      	pop	{r4, pc}
 80144aa:	bf00      	nop

080144ac <read_submessage_format>:
 80144ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80144b0:	b095      	sub	sp, #84	; 0x54
 80144b2:	f8bd 7078 	ldrh.w	r7, [sp, #120]	; 0x78
 80144b6:	b113      	cbz	r3, 80144be <read_submessage_format+0x12>
 80144b8:	b015      	add	sp, #84	; 0x54
 80144ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80144be:	4606      	mov	r6, r0
 80144c0:	981c      	ldr	r0, [sp, #112]	; 0x70
 80144c2:	460c      	mov	r4, r1
 80144c4:	4615      	mov	r5, r2
 80144c6:	9004      	str	r0, [sp, #16]
 80144c8:	4699      	mov	r9, r3
 80144ca:	981d      	ldr	r0, [sp, #116]	; 0x74
 80144cc:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 80144d0:	9005      	str	r0, [sp, #20]
 80144d2:	a80c      	add	r0, sp, #48	; 0x30
 80144d4:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80144d8:	1a52      	subs	r2, r2, r1
 80144da:	f7f9 fcbd 	bl	800de58 <ucdr_init_buffer>
 80144de:	a80c      	add	r0, sp, #48	; 0x30
 80144e0:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80144e4:	f7f9 fc8c 	bl	800de00 <ucdr_set_on_full_buffer_callback>
 80144e8:	69e2      	ldr	r2, [r4, #28]
 80144ea:	b19a      	cbz	r2, 8014514 <read_submessage_format+0x68>
 80144ec:	f1b8 0f07 	cmp.w	r8, #7
 80144f0:	f882 9014 	strb.w	r9, [r2, #20]
 80144f4:	d040      	beq.n	8014578 <read_submessage_format+0xcc>
 80144f6:	f1b8 0f08 	cmp.w	r8, #8
 80144fa:	d02e      	beq.n	801455a <read_submessage_format+0xae>
 80144fc:	f1b8 0f06 	cmp.w	r8, #6
 8014500:	d011      	beq.n	8014526 <read_submessage_format+0x7a>
 8014502:	2301      	movs	r3, #1
 8014504:	7513      	strb	r3, [r2, #20]
 8014506:	4629      	mov	r1, r5
 8014508:	4620      	mov	r0, r4
 801450a:	f7f9 fcf9 	bl	800df00 <ucdr_advance_buffer>
 801450e:	b015      	add	sp, #84	; 0x54
 8014510:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014514:	f1b8 0f07 	cmp.w	r8, #7
 8014518:	d02e      	beq.n	8014578 <read_submessage_format+0xcc>
 801451a:	f1b8 0f08 	cmp.w	r8, #8
 801451e:	d01c      	beq.n	801455a <read_submessage_format+0xae>
 8014520:	f1b8 0f06 	cmp.w	r8, #6
 8014524:	d1ef      	bne.n	8014506 <read_submessage_format+0x5a>
 8014526:	f8d6 8088 	ldr.w	r8, [r6, #136]	; 0x88
 801452a:	f1b8 0f00 	cmp.w	r8, #0
 801452e:	d011      	beq.n	8014554 <read_submessage_format+0xa8>
 8014530:	ab0c      	add	r3, sp, #48	; 0x30
 8014532:	9501      	str	r5, [sp, #4]
 8014534:	463a      	mov	r2, r7
 8014536:	4630      	mov	r0, r6
 8014538:	9300      	str	r3, [sp, #0]
 801453a:	2306      	movs	r3, #6
 801453c:	f88d 3016 	strb.w	r3, [sp, #22]
 8014540:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8014544:	9302      	str	r3, [sp, #8]
 8014546:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801454a:	47c0      	blx	r8
 801454c:	2301      	movs	r3, #1
 801454e:	69e2      	ldr	r2, [r4, #28]
 8014550:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8014554:	2a00      	cmp	r2, #0
 8014556:	d1d4      	bne.n	8014502 <read_submessage_format+0x56>
 8014558:	e7d5      	b.n	8014506 <read_submessage_format+0x5a>
 801455a:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 801455e:	2b00      	cmp	r3, #0
 8014560:	d0f8      	beq.n	8014554 <read_submessage_format+0xa8>
 8014562:	a80c      	add	r0, sp, #48	; 0x30
 8014564:	a906      	add	r1, sp, #24
 8014566:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801456a:	f002 ff0f 	bl	801738c <uxr_deserialize_SampleIdentity>
 801456e:	b9a0      	cbnz	r0, 801459a <read_submessage_format+0xee>
 8014570:	69e2      	ldr	r2, [r4, #28]
 8014572:	2a00      	cmp	r2, #0
 8014574:	d1c5      	bne.n	8014502 <read_submessage_format+0x56>
 8014576:	e7c6      	b.n	8014506 <read_submessage_format+0x5a>
 8014578:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 801457c:	b13b      	cbz	r3, 801458e <read_submessage_format+0xe2>
 801457e:	a906      	add	r1, sp, #24
 8014580:	a80c      	add	r0, sp, #48	; 0x30
 8014582:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8014586:	f002 fbd5 	bl	8016d34 <uxr_deserialize_BaseObjectRequest>
 801458a:	bb60      	cbnz	r0, 80145e6 <read_submessage_format+0x13a>
 801458c:	69e2      	ldr	r2, [r4, #28]
 801458e:	68a3      	ldr	r3, [r4, #8]
 8014590:	442b      	add	r3, r5
 8014592:	60a3      	str	r3, [r4, #8]
 8014594:	2a00      	cmp	r2, #0
 8014596:	d1b4      	bne.n	8014502 <read_submessage_format+0x56>
 8014598:	e7b5      	b.n	8014506 <read_submessage_format+0x5a>
 801459a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801459c:	a80c      	add	r0, sp, #48	; 0x30
 801459e:	eba8 0803 	sub.w	r8, r8, r3
 80145a2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 80145a6:	44a8      	add	r8, r5
 80145a8:	1a52      	subs	r2, r2, r1
 80145aa:	f7f9 fc55 	bl	800de58 <ucdr_init_buffer>
 80145ae:	a80c      	add	r0, sp, #48	; 0x30
 80145b0:	fa1f f888 	uxth.w	r8, r8
 80145b4:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80145b8:	f7f9 fc22 	bl	800de00 <ucdr_set_on_full_buffer_callback>
 80145bc:	ab0c      	add	r3, sp, #48	; 0x30
 80145be:	2108      	movs	r1, #8
 80145c0:	f8cd 8004 	str.w	r8, [sp, #4]
 80145c4:	9300      	str	r3, [sp, #0]
 80145c6:	463a      	mov	r2, r7
 80145c8:	f88d 1016 	strb.w	r1, [sp, #22]
 80145cc:	ab06      	add	r3, sp, #24
 80145ce:	f8d6 10a8 	ldr.w	r1, [r6, #168]	; 0xa8
 80145d2:	4630      	mov	r0, r6
 80145d4:	9102      	str	r1, [sp, #8]
 80145d6:	9905      	ldr	r1, [sp, #20]
 80145d8:	f8d6 70a4 	ldr.w	r7, [r6, #164]	; 0xa4
 80145dc:	47b8      	blx	r7
 80145de:	2301      	movs	r3, #1
 80145e0:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 80145e4:	e7c4      	b.n	8014570 <read_submessage_format+0xc4>
 80145e6:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 80145ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80145ec:	a80c      	add	r0, sp, #48	; 0x30
 80145ee:	1a52      	subs	r2, r2, r1
 80145f0:	eba8 0803 	sub.w	r8, r8, r3
 80145f4:	f7f9 fc30 	bl	800de58 <ucdr_init_buffer>
 80145f8:	a80c      	add	r0, sp, #48	; 0x30
 80145fa:	44a8      	add	r8, r5
 80145fc:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8014600:	f7f9 fbfe 	bl	800de00 <ucdr_set_on_full_buffer_callback>
 8014604:	ab0c      	add	r3, sp, #48	; 0x30
 8014606:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801460a:	fa1f f888 	uxth.w	r8, r8
 801460e:	9300      	str	r3, [sp, #0]
 8014610:	463a      	mov	r2, r7
 8014612:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8014616:	4630      	mov	r0, r6
 8014618:	f8cd 8004 	str.w	r8, [sp, #4]
 801461c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8014620:	2107      	movs	r1, #7
 8014622:	f88d 1016 	strb.w	r1, [sp, #22]
 8014626:	b29b      	uxth	r3, r3
 8014628:	f8d6 10b0 	ldr.w	r1, [r6, #176]	; 0xb0
 801462c:	9102      	str	r1, [sp, #8]
 801462e:	9905      	ldr	r1, [sp, #20]
 8014630:	f8d6 70ac 	ldr.w	r7, [r6, #172]	; 0xac
 8014634:	47b8      	blx	r7
 8014636:	2301      	movs	r3, #1
 8014638:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 801463c:	e7a6      	b.n	801458c <read_submessage_format+0xe0>
 801463e:	bf00      	nop

08014640 <on_get_fragmentation_info>:
 8014640:	b500      	push	{lr}
 8014642:	b08b      	sub	sp, #44	; 0x2c
 8014644:	4601      	mov	r1, r0
 8014646:	2204      	movs	r2, #4
 8014648:	a802      	add	r0, sp, #8
 801464a:	f7f9 fc05 	bl	800de58 <ucdr_init_buffer>
 801464e:	f10d 0305 	add.w	r3, sp, #5
 8014652:	f10d 0206 	add.w	r2, sp, #6
 8014656:	a901      	add	r1, sp, #4
 8014658:	a802      	add	r0, sp, #8
 801465a:	f001 fe5f 	bl	801631c <uxr_read_submessage_header>
 801465e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014662:	2b0d      	cmp	r3, #13
 8014664:	d003      	beq.n	801466e <on_get_fragmentation_info+0x2e>
 8014666:	2000      	movs	r0, #0
 8014668:	b00b      	add	sp, #44	; 0x2c
 801466a:	f85d fb04 	ldr.w	pc, [sp], #4
 801466e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8014672:	f013 0f02 	tst.w	r3, #2
 8014676:	bf14      	ite	ne
 8014678:	2002      	movne	r0, #2
 801467a:	2001      	moveq	r0, #1
 801467c:	b00b      	add	sp, #44	; 0x2c
 801467e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014682:	bf00      	nop

08014684 <read_submessage_get_info>:
 8014684:	b570      	push	{r4, r5, r6, lr}
 8014686:	2500      	movs	r5, #0
 8014688:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 801468c:	460e      	mov	r6, r1
 801468e:	4604      	mov	r4, r0
 8014690:	f44f 7224 	mov.w	r2, #656	; 0x290
 8014694:	4629      	mov	r1, r5
 8014696:	a810      	add	r0, sp, #64	; 0x40
 8014698:	9503      	str	r5, [sp, #12]
 801469a:	9504      	str	r5, [sp, #16]
 801469c:	f004 ff9a 	bl	80195d4 <memset>
 80146a0:	a903      	add	r1, sp, #12
 80146a2:	4630      	mov	r0, r6
 80146a4:	f002 fce6 	bl	8017074 <uxr_deserialize_GET_INFO_Payload>
 80146a8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80146ac:	4620      	mov	r0, r4
 80146ae:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80146b2:	f001 f825 	bl	8015700 <uxr_session_header_offset>
 80146b6:	462b      	mov	r3, r5
 80146b8:	220c      	movs	r2, #12
 80146ba:	a905      	add	r1, sp, #20
 80146bc:	9000      	str	r0, [sp, #0]
 80146be:	a808      	add	r0, sp, #32
 80146c0:	f7f9 fbb8 	bl	800de34 <ucdr_init_buffer_origin_offset>
 80146c4:	a910      	add	r1, sp, #64	; 0x40
 80146c6:	a808      	add	r0, sp, #32
 80146c8:	f002 fd48 	bl	801715c <uxr_serialize_INFO_Payload>
 80146cc:	9b08      	ldr	r3, [sp, #32]
 80146ce:	462a      	mov	r2, r5
 80146d0:	4629      	mov	r1, r5
 80146d2:	4620      	mov	r0, r4
 80146d4:	f000 ffc0 	bl	8015658 <uxr_stamp_session_header>
 80146d8:	a808      	add	r0, sp, #32
 80146da:	f7f9 fbeb 	bl	800deb4 <ucdr_buffer_length>
 80146de:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80146e0:	4602      	mov	r2, r0
 80146e2:	a905      	add	r1, sp, #20
 80146e4:	e9d3 0400 	ldrd	r0, r4, [r3]
 80146e8:	47a0      	blx	r4
 80146ea:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 80146ee:	bd70      	pop	{r4, r5, r6, pc}

080146f0 <write_submessage_acknack.isra.0>:
 80146f0:	b570      	push	{r4, r5, r6, lr}
 80146f2:	b092      	sub	sp, #72	; 0x48
 80146f4:	4605      	mov	r5, r0
 80146f6:	460e      	mov	r6, r1
 80146f8:	4614      	mov	r4, r2
 80146fa:	f001 f801 	bl	8015700 <uxr_session_header_offset>
 80146fe:	a905      	add	r1, sp, #20
 8014700:	9000      	str	r0, [sp, #0]
 8014702:	2300      	movs	r3, #0
 8014704:	a80a      	add	r0, sp, #40	; 0x28
 8014706:	2211      	movs	r2, #17
 8014708:	f7f9 fb94 	bl	800de34 <ucdr_init_buffer_origin_offset>
 801470c:	2218      	movs	r2, #24
 801470e:	2300      	movs	r3, #0
 8014710:	210a      	movs	r1, #10
 8014712:	fb02 5404 	mla	r4, r2, r4, r5
 8014716:	a80a      	add	r0, sp, #40	; 0x28
 8014718:	2205      	movs	r2, #5
 801471a:	3450      	adds	r4, #80	; 0x50
 801471c:	f001 fde4 	bl	80162e8 <uxr_buffer_submessage_header>
 8014720:	a903      	add	r1, sp, #12
 8014722:	4620      	mov	r0, r4
 8014724:	f003 ff9e 	bl	8018664 <uxr_compute_acknack>
 8014728:	ba40      	rev16	r0, r0
 801472a:	a903      	add	r1, sp, #12
 801472c:	f88d 6010 	strb.w	r6, [sp, #16]
 8014730:	f8ad 000e 	strh.w	r0, [sp, #14]
 8014734:	a80a      	add	r0, sp, #40	; 0x28
 8014736:	f002 fd83 	bl	8017240 <uxr_serialize_ACKNACK_Payload>
 801473a:	2200      	movs	r2, #0
 801473c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801473e:	4628      	mov	r0, r5
 8014740:	4611      	mov	r1, r2
 8014742:	f000 ff89 	bl	8015658 <uxr_stamp_session_header>
 8014746:	a80a      	add	r0, sp, #40	; 0x28
 8014748:	f7f9 fbb4 	bl	800deb4 <ucdr_buffer_length>
 801474c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 801474e:	4602      	mov	r2, r0
 8014750:	a905      	add	r1, sp, #20
 8014752:	e9d3 0400 	ldrd	r0, r4, [r3]
 8014756:	47a0      	blx	r4
 8014758:	b012      	add	sp, #72	; 0x48
 801475a:	bd70      	pop	{r4, r5, r6, pc}
 801475c:	0000      	movs	r0, r0
	...

08014760 <uxr_init_session>:
 8014760:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8014798 <uxr_init_session+0x38>
 8014764:	2300      	movs	r3, #0
 8014766:	b510      	push	{r4, lr}
 8014768:	4604      	mov	r4, r0
 801476a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 801476e:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 8014772:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 8014776:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 801477a:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 801477e:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 8014782:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 8014786:	2181      	movs	r1, #129	; 0x81
 8014788:	f000 feca 	bl	8015520 <uxr_init_session_info>
 801478c:	f104 0008 	add.w	r0, r4, #8
 8014790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014794:	f001 bcc4 	b.w	8016120 <uxr_init_stream_storage>
	...

080147a0 <uxr_set_status_callback>:
 80147a0:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 80147a4:	4770      	bx	lr
 80147a6:	bf00      	nop

080147a8 <uxr_set_topic_callback>:
 80147a8:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 80147ac:	4770      	bx	lr
 80147ae:	bf00      	nop

080147b0 <uxr_set_request_callback>:
 80147b0:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 80147b4:	4770      	bx	lr
 80147b6:	bf00      	nop

080147b8 <uxr_set_reply_callback>:
 80147b8:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 80147bc:	4770      	bx	lr
 80147be:	bf00      	nop

080147c0 <uxr_create_output_best_effort_stream>:
 80147c0:	b510      	push	{r4, lr}
 80147c2:	4604      	mov	r4, r0
 80147c4:	b084      	sub	sp, #16
 80147c6:	e9cd 2100 	strd	r2, r1, [sp]
 80147ca:	f000 ff99 	bl	8015700 <uxr_session_header_offset>
 80147ce:	4603      	mov	r3, r0
 80147d0:	f104 0008 	add.w	r0, r4, #8
 80147d4:	e9dd 2100 	ldrd	r2, r1, [sp]
 80147d8:	b004      	add	sp, #16
 80147da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80147de:	f001 bce5 	b.w	80161ac <uxr_add_output_best_effort_buffer>
 80147e2:	bf00      	nop

080147e4 <uxr_create_output_reliable_stream>:
 80147e4:	b530      	push	{r4, r5, lr}
 80147e6:	b089      	sub	sp, #36	; 0x24
 80147e8:	4604      	mov	r4, r0
 80147ea:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80147ee:	9303      	str	r3, [sp, #12]
 80147f0:	f000 ff86 	bl	8015700 <uxr_session_header_offset>
 80147f4:	4605      	mov	r5, r0
 80147f6:	9905      	ldr	r1, [sp, #20]
 80147f8:	f104 0008 	add.w	r0, r4, #8
 80147fc:	9500      	str	r5, [sp, #0]
 80147fe:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8014802:	f001 fce7 	bl	80161d4 <uxr_add_output_reliable_buffer>
 8014806:	2200      	movs	r2, #0
 8014808:	fa5f fc80 	uxtb.w	ip, r0
 801480c:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8014810:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8014814:	0e03      	lsrs	r3, r0, #24
 8014816:	f36c 0207 	bfi	r2, ip, #0, #8
 801481a:	f364 220f 	bfi	r2, r4, #8, #8
 801481e:	f361 4217 	bfi	r2, r1, #16, #8
 8014822:	f363 621f 	bfi	r2, r3, #24, #8
 8014826:	4610      	mov	r0, r2
 8014828:	b009      	add	sp, #36	; 0x24
 801482a:	bd30      	pop	{r4, r5, pc}

0801482c <uxr_create_input_best_effort_stream>:
 801482c:	b082      	sub	sp, #8
 801482e:	3008      	adds	r0, #8
 8014830:	b002      	add	sp, #8
 8014832:	f001 bce9 	b.w	8016208 <uxr_add_input_best_effort_buffer>
 8014836:	bf00      	nop

08014838 <uxr_create_input_reliable_stream>:
 8014838:	b510      	push	{r4, lr}
 801483a:	4c0c      	ldr	r4, [pc, #48]	; (801486c <uxr_create_input_reliable_stream+0x34>)
 801483c:	b084      	sub	sp, #16
 801483e:	3008      	adds	r0, #8
 8014840:	9400      	str	r4, [sp, #0]
 8014842:	f001 fcf7 	bl	8016234 <uxr_add_input_reliable_buffer>
 8014846:	2200      	movs	r2, #0
 8014848:	fa5f fe80 	uxtb.w	lr, r0
 801484c:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8014850:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8014854:	0e03      	lsrs	r3, r0, #24
 8014856:	f36e 0207 	bfi	r2, lr, #0, #8
 801485a:	f36c 220f 	bfi	r2, ip, #8, #8
 801485e:	f361 4217 	bfi	r2, r1, #16, #8
 8014862:	f363 621f 	bfi	r2, r3, #24, #8
 8014866:	4610      	mov	r0, r2
 8014868:	b004      	add	sp, #16
 801486a:	bd10      	pop	{r4, pc}
 801486c:	08014641 	.word	0x08014641

08014870 <uxr_epoch_nanos>:
 8014870:	b510      	push	{r4, lr}
 8014872:	4604      	mov	r4, r0
 8014874:	f001 fd9a 	bl	80163ac <uxr_nanos>
 8014878:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 801487c:	1ac0      	subs	r0, r0, r3
 801487e:	eb61 0102 	sbc.w	r1, r1, r2
 8014882:	bd10      	pop	{r4, pc}

08014884 <uxr_flash_output_streams>:
 8014884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014888:	7e03      	ldrb	r3, [r0, #24]
 801488a:	b084      	sub	sp, #16
 801488c:	4604      	mov	r4, r0
 801488e:	b1fb      	cbz	r3, 80148d0 <uxr_flash_output_streams+0x4c>
 8014890:	f04f 0900 	mov.w	r9, #0
 8014894:	f10d 0802 	add.w	r8, sp, #2
 8014898:	af03      	add	r7, sp, #12
 801489a:	ae02      	add	r6, sp, #8
 801489c:	4648      	mov	r0, r9
 801489e:	2201      	movs	r2, #1
 80148a0:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 80148a4:	4611      	mov	r1, r2
 80148a6:	3508      	adds	r5, #8
 80148a8:	f001 fbe0 	bl	801606c <uxr_stream_id>
 80148ac:	4684      	mov	ip, r0
 80148ae:	4643      	mov	r3, r8
 80148b0:	463a      	mov	r2, r7
 80148b2:	4631      	mov	r1, r6
 80148b4:	4628      	mov	r0, r5
 80148b6:	f8cd c004 	str.w	ip, [sp, #4]
 80148ba:	f003 ff5d 	bl	8018778 <uxr_prepare_best_effort_buffer_to_send>
 80148be:	2800      	cmp	r0, #0
 80148c0:	d13d      	bne.n	801493e <uxr_flash_output_streams+0xba>
 80148c2:	f109 0901 	add.w	r9, r9, #1
 80148c6:	7e23      	ldrb	r3, [r4, #24]
 80148c8:	fa5f f089 	uxtb.w	r0, r9
 80148cc:	4283      	cmp	r3, r0
 80148ce:	d8e6      	bhi.n	801489e <uxr_flash_output_streams+0x1a>
 80148d0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80148d4:	b383      	cbz	r3, 8014938 <uxr_flash_output_streams+0xb4>
 80148d6:	f04f 0900 	mov.w	r9, #0
 80148da:	f10d 0802 	add.w	r8, sp, #2
 80148de:	af03      	add	r7, sp, #12
 80148e0:	ae02      	add	r6, sp, #8
 80148e2:	4648      	mov	r0, r9
 80148e4:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 80148e8:	2201      	movs	r2, #1
 80148ea:	2102      	movs	r1, #2
 80148ec:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80148f0:	f001 fbbc 	bl	801606c <uxr_stream_id>
 80148f4:	9001      	str	r0, [sp, #4]
 80148f6:	3520      	adds	r5, #32
 80148f8:	e00c      	b.n	8014914 <uxr_flash_output_streams+0x90>
 80148fa:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80148fe:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8014902:	9b02      	ldr	r3, [sp, #8]
 8014904:	f000 fea8 	bl	8015658 <uxr_stamp_session_header>
 8014908:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801490a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801490e:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8014912:	47d0      	blx	sl
 8014914:	4643      	mov	r3, r8
 8014916:	463a      	mov	r2, r7
 8014918:	4631      	mov	r1, r6
 801491a:	4628      	mov	r0, r5
 801491c:	f004 f950 	bl	8018bc0 <uxr_prepare_next_reliable_buffer_to_send>
 8014920:	4603      	mov	r3, r0
 8014922:	4620      	mov	r0, r4
 8014924:	2b00      	cmp	r3, #0
 8014926:	d1e8      	bne.n	80148fa <uxr_flash_output_streams+0x76>
 8014928:	f109 0901 	add.w	r9, r9, #1
 801492c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8014930:	fa5f f089 	uxtb.w	r0, r9
 8014934:	4283      	cmp	r3, r0
 8014936:	d8d5      	bhi.n	80148e4 <uxr_flash_output_streams+0x60>
 8014938:	b004      	add	sp, #16
 801493a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801493e:	9b02      	ldr	r3, [sp, #8]
 8014940:	4620      	mov	r0, r4
 8014942:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8014946:	f109 0901 	add.w	r9, r9, #1
 801494a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801494e:	f000 fe83 	bl	8015658 <uxr_stamp_session_header>
 8014952:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014954:	9a03      	ldr	r2, [sp, #12]
 8014956:	685d      	ldr	r5, [r3, #4]
 8014958:	6818      	ldr	r0, [r3, #0]
 801495a:	9902      	ldr	r1, [sp, #8]
 801495c:	47a8      	blx	r5
 801495e:	7e23      	ldrb	r3, [r4, #24]
 8014960:	fa5f f089 	uxtb.w	r0, r9
 8014964:	4283      	cmp	r3, r0
 8014966:	d89a      	bhi.n	801489e <uxr_flash_output_streams+0x1a>
 8014968:	e7b2      	b.n	80148d0 <uxr_flash_output_streams+0x4c>
 801496a:	bf00      	nop

0801496c <read_submessage_info>:
 801496c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014970:	460d      	mov	r5, r1
 8014972:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8014976:	4606      	mov	r6, r0
 8014978:	4669      	mov	r1, sp
 801497a:	4628      	mov	r0, r5
 801497c:	f002 fa8c 	bl	8016e98 <uxr_deserialize_BaseObjectReply>
 8014980:	4604      	mov	r4, r0
 8014982:	a902      	add	r1, sp, #8
 8014984:	4628      	mov	r0, r5
 8014986:	f89d 7005 	ldrb.w	r7, [sp, #5]
 801498a:	f7f7 ffe3 	bl	800c954 <ucdr_deserialize_bool>
 801498e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8014992:	4004      	ands	r4, r0
 8014994:	b2e4      	uxtb	r4, r4
 8014996:	b95b      	cbnz	r3, 80149b0 <read_submessage_info+0x44>
 8014998:	a987      	add	r1, sp, #540	; 0x21c
 801499a:	4628      	mov	r0, r5
 801499c:	f7f7 ffda 	bl	800c954 <ucdr_deserialize_bool>
 80149a0:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 80149a4:	4680      	mov	r8, r0
 80149a6:	b94b      	cbnz	r3, 80149bc <read_submessage_info+0x50>
 80149a8:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 80149ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149b0:	a903      	add	r1, sp, #12
 80149b2:	4628      	mov	r0, r5
 80149b4:	f002 f91c 	bl	8016bf0 <uxr_deserialize_ObjectVariant>
 80149b8:	4004      	ands	r4, r0
 80149ba:	e7ed      	b.n	8014998 <read_submessage_info+0x2c>
 80149bc:	a988      	add	r1, sp, #544	; 0x220
 80149be:	4628      	mov	r0, r5
 80149c0:	f7f7 fff6 	bl	800c9b0 <ucdr_deserialize_uint8_t>
 80149c4:	ea14 0f08 	tst.w	r4, r8
 80149c8:	d0ee      	beq.n	80149a8 <read_submessage_info+0x3c>
 80149ca:	2800      	cmp	r0, #0
 80149cc:	d0ec      	beq.n	80149a8 <read_submessage_info+0x3c>
 80149ce:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 80149d2:	2b0d      	cmp	r3, #13
 80149d4:	d1e8      	bne.n	80149a8 <read_submessage_info+0x3c>
 80149d6:	a98a      	add	r1, sp, #552	; 0x228
 80149d8:	4628      	mov	r0, r5
 80149da:	f7f8 fd8f 	bl	800d4fc <ucdr_deserialize_int16_t>
 80149de:	b138      	cbz	r0, 80149f0 <read_submessage_info+0x84>
 80149e0:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	dd06      	ble.n	80149f6 <read_submessage_info+0x8a>
 80149e8:	2f00      	cmp	r7, #0
 80149ea:	bf14      	ite	ne
 80149ec:	2001      	movne	r0, #1
 80149ee:	2002      	moveq	r0, #2
 80149f0:	f886 00b5 	strb.w	r0, [r6, #181]	; 0xb5
 80149f4:	e7d8      	b.n	80149a8 <read_submessage_info+0x3c>
 80149f6:	2000      	movs	r0, #0
 80149f8:	e7fa      	b.n	80149f0 <read_submessage_info+0x84>
 80149fa:	bf00      	nop

080149fc <read_submessage_list>:
 80149fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a00:	4604      	mov	r4, r0
 8014a02:	b097      	sub	sp, #92	; 0x5c
 8014a04:	460d      	mov	r5, r1
 8014a06:	4ec1      	ldr	r6, [pc, #772]	; (8014d0c <read_submessage_list+0x310>)
 8014a08:	9209      	str	r2, [sp, #36]	; 0x24
 8014a0a:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8014a0e:	aa0c      	add	r2, sp, #48	; 0x30
 8014a10:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 8014a14:	4628      	mov	r0, r5
 8014a16:	f001 fc81 	bl	801631c <uxr_read_submessage_header>
 8014a1a:	2800      	cmp	r0, #0
 8014a1c:	f000 8142 	beq.w	8014ca4 <read_submessage_list+0x2a8>
 8014a20:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8014a24:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8014a28:	3b02      	subs	r3, #2
 8014a2a:	2b0d      	cmp	r3, #13
 8014a2c:	d8ed      	bhi.n	8014a0a <read_submessage_list+0xe>
 8014a2e:	a101      	add	r1, pc, #4	; (adr r1, 8014a34 <read_submessage_list+0x38>)
 8014a30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014a34:	08014c9b 	.word	0x08014c9b
 8014a38:	08014a0b 	.word	0x08014a0b
 8014a3c:	08014c8b 	.word	0x08014c8b
 8014a40:	08014c29 	.word	0x08014c29
 8014a44:	08014c1f 	.word	0x08014c1f
 8014a48:	08014a0b 	.word	0x08014a0b
 8014a4c:	08014a0b 	.word	0x08014a0b
 8014a50:	08014b75 	.word	0x08014b75
 8014a54:	08014b07 	.word	0x08014b07
 8014a58:	08014ac7 	.word	0x08014ac7
 8014a5c:	08014a0b 	.word	0x08014a0b
 8014a60:	08014a0b 	.word	0x08014a0b
 8014a64:	08014a0b 	.word	0x08014a0b
 8014a68:	08014a6d 	.word	0x08014a6d
 8014a6c:	a910      	add	r1, sp, #64	; 0x40
 8014a6e:	4628      	mov	r0, r5
 8014a70:	f002 fc3a 	bl	80172e8 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8014a74:	f8d4 8090 	ldr.w	r8, [r4, #144]	; 0x90
 8014a78:	f1b8 0f00 	cmp.w	r8, #0
 8014a7c:	f000 811a 	beq.w	8014cb4 <read_submessage_list+0x2b8>
 8014a80:	f001 fc94 	bl	80163ac <uxr_nanos>
 8014a84:	4602      	mov	r2, r0
 8014a86:	460b      	mov	r3, r1
 8014a88:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8014a8c:	2100      	movs	r1, #0
 8014a8e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8014a90:	9006      	str	r0, [sp, #24]
 8014a92:	468c      	mov	ip, r1
 8014a94:	9815      	ldr	r0, [sp, #84]	; 0x54
 8014a96:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8014a9a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8014a9c:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 8014aa0:	468c      	mov	ip, r1
 8014aa2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8014aa4:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8014aa8:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 8014aac:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	; 0x48
 8014ab0:	fbc7 0106 	smlal	r0, r1, r7, r6
 8014ab4:	e9cd 0100 	strd	r0, r1, [sp]
 8014ab8:	4620      	mov	r0, r4
 8014aba:	47c0      	blx	r8
 8014abc:	f04f 0301 	mov.w	r3, #1
 8014ac0:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 8014ac4:	e7a1      	b.n	8014a0a <read_submessage_list+0xe>
 8014ac6:	a910      	add	r1, sp, #64	; 0x40
 8014ac8:	4628      	mov	r0, r5
 8014aca:	f002 fbf9 	bl	80172c0 <uxr_deserialize_HEARTBEAT_Payload>
 8014ace:	2100      	movs	r1, #0
 8014ad0:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8014ad4:	f001 faf8 	bl	80160c8 <uxr_stream_id_from_raw>
 8014ad8:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8014adc:	900f      	str	r0, [sp, #60]	; 0x3c
 8014ade:	f104 0008 	add.w	r0, r4, #8
 8014ae2:	4641      	mov	r1, r8
 8014ae4:	f001 fbde 	bl	80162a4 <uxr_get_input_reliable_stream>
 8014ae8:	2800      	cmp	r0, #0
 8014aea:	d08e      	beq.n	8014a0a <read_submessage_list+0xe>
 8014aec:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8014af0:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8014af4:	f003 fdaa 	bl	801864c <uxr_process_heartbeat>
 8014af8:	4642      	mov	r2, r8
 8014afa:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 8014afe:	4620      	mov	r0, r4
 8014b00:	f7ff fdf6 	bl	80146f0 <write_submessage_acknack.isra.0>
 8014b04:	e781      	b.n	8014a0a <read_submessage_list+0xe>
 8014b06:	a910      	add	r1, sp, #64	; 0x40
 8014b08:	4628      	mov	r0, r5
 8014b0a:	f002 fbb1 	bl	8017270 <uxr_deserialize_ACKNACK_Payload>
 8014b0e:	2100      	movs	r1, #0
 8014b10:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8014b14:	f001 fad8 	bl	80160c8 <uxr_stream_id_from_raw>
 8014b18:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8014b1c:	900d      	str	r0, [sp, #52]	; 0x34
 8014b1e:	f104 0008 	add.w	r0, r4, #8
 8014b22:	f001 fba9 	bl	8016278 <uxr_get_output_reliable_stream>
 8014b26:	4680      	mov	r8, r0
 8014b28:	2800      	cmp	r0, #0
 8014b2a:	f43f af6e 	beq.w	8014a0a <read_submessage_list+0xe>
 8014b2e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8014b32:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8014b36:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 8014b3a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8014b3e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8014b42:	b289      	uxth	r1, r1
 8014b44:	f004 f8e4 	bl	8018d10 <uxr_process_acknack>
 8014b48:	4640      	mov	r0, r8
 8014b4a:	f004 f8a5 	bl	8018c98 <uxr_begin_output_nack_buffer_it>
 8014b4e:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 8014b52:	e005      	b.n	8014b60 <read_submessage_list+0x164>
 8014b54:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014b56:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 8014b5a:	e9d3 0900 	ldrd	r0, r9, [r3]
 8014b5e:	47c8      	blx	r9
 8014b60:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 8014b64:	aa0f      	add	r2, sp, #60	; 0x3c
 8014b66:	4651      	mov	r1, sl
 8014b68:	4640      	mov	r0, r8
 8014b6a:	f004 f897 	bl	8018c9c <uxr_next_reliable_nack_buffer_to_send>
 8014b6e:	2800      	cmp	r0, #0
 8014b70:	d1f0      	bne.n	8014b54 <read_submessage_list+0x158>
 8014b72:	e74a      	b.n	8014a0a <read_submessage_list+0xe>
 8014b74:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8014b78:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8014b7c:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 8014b80:	4628      	mov	r0, r5
 8014b82:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 8014b86:	4651      	mov	r1, sl
 8014b88:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8014b8c:	f1a8 0804 	sub.w	r8, r8, #4
 8014b90:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 8014b94:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 8014b98:	fa1f f888 	uxth.w	r8, r8
 8014b9c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8014ba0:	f009 090e 	and.w	r9, r9, #14
 8014ba4:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 8014ba8:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8014bac:	f002 f8c2 	bl	8016d34 <uxr_deserialize_BaseObjectRequest>
 8014bb0:	4650      	mov	r0, sl
 8014bb2:	a90f      	add	r1, sp, #60	; 0x3c
 8014bb4:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8014bb8:	f000 fdca 	bl	8015750 <uxr_parse_base_object_request>
 8014bbc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014bbe:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 8014bc2:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 8014bc6:	9110      	str	r1, [sp, #64]	; 0x40
 8014bc8:	f1bb 0f00 	cmp.w	fp, #0
 8014bcc:	d006      	beq.n	8014bdc <read_submessage_list+0x1e0>
 8014bce:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8014bd2:	4652      	mov	r2, sl
 8014bd4:	4620      	mov	r0, r4
 8014bd6:	9300      	str	r3, [sp, #0]
 8014bd8:	2300      	movs	r3, #0
 8014bda:	47d8      	blx	fp
 8014bdc:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8014bde:	b182      	cbz	r2, 8014c02 <read_submessage_list+0x206>
 8014be0:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8014be2:	f04f 0c00 	mov.w	ip, #0
 8014be6:	3902      	subs	r1, #2
 8014be8:	e003      	b.n	8014bf2 <read_submessage_list+0x1f6>
 8014bea:	f10c 0c01 	add.w	ip, ip, #1
 8014bee:	4594      	cmp	ip, r2
 8014bf0:	d007      	beq.n	8014c02 <read_submessage_list+0x206>
 8014bf2:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8014bf6:	4553      	cmp	r3, sl
 8014bf8:	d1f7      	bne.n	8014bea <read_submessage_list+0x1ee>
 8014bfa:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8014bfc:	2200      	movs	r2, #0
 8014bfe:	f803 200c 	strb.w	r2, [r3, ip]
 8014c02:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8014c06:	464b      	mov	r3, r9
 8014c08:	4642      	mov	r2, r8
 8014c0a:	4620      	mov	r0, r4
 8014c0c:	9102      	str	r1, [sp, #8]
 8014c0e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014c10:	9101      	str	r1, [sp, #4]
 8014c12:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014c14:	9100      	str	r1, [sp, #0]
 8014c16:	4629      	mov	r1, r5
 8014c18:	f7ff fc48 	bl	80144ac <read_submessage_format>
 8014c1c:	e6f5      	b.n	8014a0a <read_submessage_list+0xe>
 8014c1e:	4629      	mov	r1, r5
 8014c20:	4620      	mov	r0, r4
 8014c22:	f7ff fea3 	bl	801496c <read_submessage_info>
 8014c26:	e6f0      	b.n	8014a0a <read_submessage_list+0xe>
 8014c28:	2a00      	cmp	r2, #0
 8014c2a:	d03e      	beq.n	8014caa <read_submessage_list+0x2ae>
 8014c2c:	a910      	add	r1, sp, #64	; 0x40
 8014c2e:	4628      	mov	r0, r5
 8014c30:	f002 fa76 	bl	8017120 <uxr_deserialize_STATUS_Payload>
 8014c34:	a90e      	add	r1, sp, #56	; 0x38
 8014c36:	aa0d      	add	r2, sp, #52	; 0x34
 8014c38:	a810      	add	r0, sp, #64	; 0x40
 8014c3a:	f000 fd89 	bl	8015750 <uxr_parse_base_object_request>
 8014c3e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014c40:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 8014c44:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 8014c48:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
 8014c4c:	910f      	str	r1, [sp, #60]	; 0x3c
 8014c4e:	f1ba 0f00 	cmp.w	sl, #0
 8014c52:	d006      	beq.n	8014c62 <read_submessage_list+0x266>
 8014c54:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8014c58:	4642      	mov	r2, r8
 8014c5a:	4620      	mov	r0, r4
 8014c5c:	9300      	str	r3, [sp, #0]
 8014c5e:	464b      	mov	r3, r9
 8014c60:	47d0      	blx	sl
 8014c62:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8014c64:	2a00      	cmp	r2, #0
 8014c66:	f43f aed0 	beq.w	8014a0a <read_submessage_list+0xe>
 8014c6a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8014c6c:	2100      	movs	r1, #0
 8014c6e:	3802      	subs	r0, #2
 8014c70:	e003      	b.n	8014c7a <read_submessage_list+0x27e>
 8014c72:	3101      	adds	r1, #1
 8014c74:	4291      	cmp	r1, r2
 8014c76:	f43f aec8 	beq.w	8014a0a <read_submessage_list+0xe>
 8014c7a:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8014c7e:	4543      	cmp	r3, r8
 8014c80:	d1f7      	bne.n	8014c72 <read_submessage_list+0x276>
 8014c82:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8014c84:	f803 9001 	strb.w	r9, [r3, r1]
 8014c88:	e6bf      	b.n	8014a0a <read_submessage_list+0xe>
 8014c8a:	2a00      	cmp	r2, #0
 8014c8c:	f47f aebd 	bne.w	8014a0a <read_submessage_list+0xe>
 8014c90:	4629      	mov	r1, r5
 8014c92:	4620      	mov	r0, r4
 8014c94:	f000 fca0 	bl	80155d8 <uxr_read_create_session_status>
 8014c98:	e6b7      	b.n	8014a0a <read_submessage_list+0xe>
 8014c9a:	4629      	mov	r1, r5
 8014c9c:	4620      	mov	r0, r4
 8014c9e:	f7ff fcf1 	bl	8014684 <read_submessage_get_info>
 8014ca2:	e6b2      	b.n	8014a0a <read_submessage_list+0xe>
 8014ca4:	b017      	add	sp, #92	; 0x5c
 8014ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014caa:	4629      	mov	r1, r5
 8014cac:	4620      	mov	r0, r4
 8014cae:	f000 fca1 	bl	80155f4 <uxr_read_delete_session_status>
 8014cb2:	e6aa      	b.n	8014a0a <read_submessage_list+0xe>
 8014cb4:	f001 fb7a 	bl	80163ac <uxr_nanos>
 8014cb8:	4642      	mov	r2, r8
 8014cba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8014cbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014cbe:	fbc7 3206 	smlal	r3, r2, r7, r6
 8014cc2:	1818      	adds	r0, r3, r0
 8014cc4:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8014cc6:	eb42 0101 	adc.w	r1, r2, r1
 8014cca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014ccc:	4642      	mov	r2, r8
 8014cce:	fbc7 3206 	smlal	r3, r2, r7, r6
 8014cd2:	469c      	mov	ip, r3
 8014cd4:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	; 0x40
 8014cd8:	fbc3 7806 	smlal	r7, r8, r3, r6
 8014cdc:	4643      	mov	r3, r8
 8014cde:	eb1c 0c07 	adds.w	ip, ip, r7
 8014ce2:	eb42 0203 	adc.w	r2, r2, r3
 8014ce6:	ebb0 030c 	subs.w	r3, r0, ip
 8014cea:	eb61 0202 	sbc.w	r2, r1, r2
 8014cee:	2a00      	cmp	r2, #0
 8014cf0:	db08      	blt.n	8014d04 <read_submessage_list+0x308>
 8014cf2:	085b      	lsrs	r3, r3, #1
 8014cf4:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8014cf8:	1052      	asrs	r2, r2, #1
 8014cfa:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 8014cfe:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
 8014d02:	e6db      	b.n	8014abc <read_submessage_list+0xc0>
 8014d04:	3301      	adds	r3, #1
 8014d06:	f142 0200 	adc.w	r2, r2, #0
 8014d0a:	e7f2      	b.n	8014cf2 <read_submessage_list+0x2f6>
 8014d0c:	3b9aca00 	.word	0x3b9aca00

08014d10 <listen_message_reliably>:
 8014d10:	1e0b      	subs	r3, r1, #0
 8014d12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d16:	bfb8      	it	lt
 8014d18:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8014d1c:	b09d      	sub	sp, #116	; 0x74
 8014d1e:	4680      	mov	r8, r0
 8014d20:	9305      	str	r3, [sp, #20]
 8014d22:	f001 fb27 	bl	8016374 <uxr_millis>
 8014d26:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 8014d2a:	4681      	mov	r9, r0
 8014d2c:	2a00      	cmp	r2, #0
 8014d2e:	f000 809a 	beq.w	8014e66 <listen_message_reliably+0x156>
 8014d32:	2600      	movs	r6, #0
 8014d34:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014d38:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8014d3c:	460f      	mov	r7, r1
 8014d3e:	4630      	mov	r0, r6
 8014d40:	9303      	str	r3, [sp, #12]
 8014d42:	e00e      	b.n	8014d62 <listen_message_reliably+0x52>
 8014d44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014d46:	3601      	adds	r6, #1
 8014d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014d4a:	455a      	cmp	r2, fp
 8014d4c:	9903      	ldr	r1, [sp, #12]
 8014d4e:	b2f0      	uxtb	r0, r6
 8014d50:	eb73 0101 	sbcs.w	r1, r3, r1
 8014d54:	da01      	bge.n	8014d5a <listen_message_reliably+0x4a>
 8014d56:	4693      	mov	fp, r2
 8014d58:	9303      	str	r3, [sp, #12]
 8014d5a:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 8014d5e:	4283      	cmp	r3, r0
 8014d60:	d95f      	bls.n	8014e22 <listen_message_reliably+0x112>
 8014d62:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8014d66:	2102      	movs	r1, #2
 8014d68:	2201      	movs	r2, #1
 8014d6a:	00e4      	lsls	r4, r4, #3
 8014d6c:	f001 f97e 	bl	801606c <uxr_stream_id>
 8014d70:	4601      	mov	r1, r0
 8014d72:	f104 0520 	add.w	r5, r4, #32
 8014d76:	463b      	mov	r3, r7
 8014d78:	464a      	mov	r2, r9
 8014d7a:	9109      	str	r1, [sp, #36]	; 0x24
 8014d7c:	4445      	add	r5, r8
 8014d7e:	4628      	mov	r0, r5
 8014d80:	f003 ff5e 	bl	8018c40 <uxr_update_output_stream_heartbeat_timestamp>
 8014d84:	eb08 0304 	add.w	r3, r8, r4
 8014d88:	2800      	cmp	r0, #0
 8014d8a:	d0db      	beq.n	8014d44 <listen_message_reliably+0x34>
 8014d8c:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 8014d90:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 8014d94:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8014d98:	4640      	mov	r0, r8
 8014d9a:	3501      	adds	r5, #1
 8014d9c:	4444      	add	r4, r8
 8014d9e:	9304      	str	r3, [sp, #16]
 8014da0:	f000 fcae 	bl	8015700 <uxr_session_header_offset>
 8014da4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8014da8:	2300      	movs	r3, #0
 8014daa:	2211      	movs	r2, #17
 8014dac:	a90c      	add	r1, sp, #48	; 0x30
 8014dae:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8014db2:	9000      	str	r0, [sp, #0]
 8014db4:	4650      	mov	r0, sl
 8014db6:	3601      	adds	r6, #1
 8014db8:	f7f9 f83c 	bl	800de34 <ucdr_init_buffer_origin_offset>
 8014dbc:	2300      	movs	r3, #0
 8014dbe:	2205      	movs	r2, #5
 8014dc0:	210b      	movs	r1, #11
 8014dc2:	4650      	mov	r0, sl
 8014dc4:	f001 fa90 	bl	80162e8 <uxr_buffer_submessage_header>
 8014dc8:	2101      	movs	r1, #1
 8014dca:	8968      	ldrh	r0, [r5, #10]
 8014dcc:	f003 fffc 	bl	8018dc8 <uxr_seq_num_add>
 8014dd0:	892b      	ldrh	r3, [r5, #8]
 8014dd2:	4602      	mov	r2, r0
 8014dd4:	a90a      	add	r1, sp, #40	; 0x28
 8014dd6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8014dda:	4650      	mov	r0, sl
 8014ddc:	9b04      	ldr	r3, [sp, #16]
 8014dde:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8014de2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8014de6:	f002 fa57 	bl	8017298 <uxr_serialize_HEARTBEAT_Payload>
 8014dea:	2200      	movs	r2, #0
 8014dec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014dee:	4640      	mov	r0, r8
 8014df0:	4611      	mov	r1, r2
 8014df2:	f000 fc31 	bl	8015658 <uxr_stamp_session_header>
 8014df6:	4650      	mov	r0, sl
 8014df8:	f7f9 f85c 	bl	800deb4 <ucdr_buffer_length>
 8014dfc:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8014e00:	4602      	mov	r2, r0
 8014e02:	a90c      	add	r1, sp, #48	; 0x30
 8014e04:	e9d3 0500 	ldrd	r0, r5, [r3]
 8014e08:	47a8      	blx	r5
 8014e0a:	9903      	ldr	r1, [sp, #12]
 8014e0c:	b2f0      	uxtb	r0, r6
 8014e0e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8014e12:	455a      	cmp	r2, fp
 8014e14:	eb73 0101 	sbcs.w	r1, r3, r1
 8014e18:	db9d      	blt.n	8014d56 <listen_message_reliably+0x46>
 8014e1a:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 8014e1e:	4283      	cmp	r3, r0
 8014e20:	d89f      	bhi.n	8014d62 <listen_message_reliably+0x52>
 8014e22:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014e26:	9a03      	ldr	r2, [sp, #12]
 8014e28:	429a      	cmp	r2, r3
 8014e2a:	bf08      	it	eq
 8014e2c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 8014e30:	d019      	beq.n	8014e66 <listen_message_reliably+0x156>
 8014e32:	ebab 0309 	sub.w	r3, fp, r9
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	9d05      	ldr	r5, [sp, #20]
 8014e3a:	f8d8 0070 	ldr.w	r0, [r8, #112]	; 0x70
 8014e3e:	aa08      	add	r2, sp, #32
 8014e40:	bf08      	it	eq
 8014e42:	2301      	moveq	r3, #1
 8014e44:	a907      	add	r1, sp, #28
 8014e46:	6884      	ldr	r4, [r0, #8]
 8014e48:	429d      	cmp	r5, r3
 8014e4a:	6800      	ldr	r0, [r0, #0]
 8014e4c:	bfa8      	it	ge
 8014e4e:	461d      	movge	r5, r3
 8014e50:	462b      	mov	r3, r5
 8014e52:	47a0      	blx	r4
 8014e54:	b948      	cbnz	r0, 8014e6a <listen_message_reliably+0x15a>
 8014e56:	9b05      	ldr	r3, [sp, #20]
 8014e58:	1b5b      	subs	r3, r3, r5
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	9305      	str	r3, [sp, #20]
 8014e5e:	f73f af60 	bgt.w	8014d22 <listen_message_reliably+0x12>
 8014e62:	4604      	mov	r4, r0
 8014e64:	e012      	b.n	8014e8c <listen_message_reliably+0x17c>
 8014e66:	9b05      	ldr	r3, [sp, #20]
 8014e68:	e7e5      	b.n	8014e36 <listen_message_reliably+0x126>
 8014e6a:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8014e6e:	4604      	mov	r4, r0
 8014e70:	2500      	movs	r5, #0
 8014e72:	a80c      	add	r0, sp, #48	; 0x30
 8014e74:	f7f8 fff0 	bl	800de58 <ucdr_init_buffer>
 8014e78:	f10d 031a 	add.w	r3, sp, #26
 8014e7c:	aa06      	add	r2, sp, #24
 8014e7e:	a90c      	add	r1, sp, #48	; 0x30
 8014e80:	4640      	mov	r0, r8
 8014e82:	f88d 5018 	strb.w	r5, [sp, #24]
 8014e86:	f000 fbfb 	bl	8015680 <uxr_read_session_header>
 8014e8a:	b918      	cbnz	r0, 8014e94 <listen_message_reliably+0x184>
 8014e8c:	4620      	mov	r0, r4
 8014e8e:	b01d      	add	sp, #116	; 0x74
 8014e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e94:	4629      	mov	r1, r5
 8014e96:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8014e9a:	f001 f915 	bl	80160c8 <uxr_stream_id_from_raw>
 8014e9e:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8014ea2:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8014ea6:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8014eaa:	2e01      	cmp	r6, #1
 8014eac:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8014eb0:	d04b      	beq.n	8014f4a <listen_message_reliably+0x23a>
 8014eb2:	2e02      	cmp	r6, #2
 8014eb4:	d00f      	beq.n	8014ed6 <listen_message_reliably+0x1c6>
 8014eb6:	2e00      	cmp	r6, #0
 8014eb8:	d1e8      	bne.n	8014e8c <listen_message_reliably+0x17c>
 8014eba:	4631      	mov	r1, r6
 8014ebc:	4630      	mov	r0, r6
 8014ebe:	f001 f903 	bl	80160c8 <uxr_stream_id_from_raw>
 8014ec2:	4602      	mov	r2, r0
 8014ec4:	a90c      	add	r1, sp, #48	; 0x30
 8014ec6:	4640      	mov	r0, r8
 8014ec8:	920a      	str	r2, [sp, #40]	; 0x28
 8014eca:	f7ff fd97 	bl	80149fc <read_submessage_list>
 8014ece:	4620      	mov	r0, r4
 8014ed0:	b01d      	add	sp, #116	; 0x74
 8014ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ed6:	4629      	mov	r1, r5
 8014ed8:	f108 0008 	add.w	r0, r8, #8
 8014edc:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 8014ee0:	f001 f9e0 	bl	80162a4 <uxr_get_input_reliable_stream>
 8014ee4:	4607      	mov	r7, r0
 8014ee6:	b338      	cbz	r0, 8014f38 <listen_message_reliably+0x228>
 8014ee8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014eea:	a80c      	add	r0, sp, #48	; 0x30
 8014eec:	9203      	str	r2, [sp, #12]
 8014eee:	f7f8 ffe5 	bl	800debc <ucdr_buffer_remaining>
 8014ef2:	4603      	mov	r3, r0
 8014ef4:	f10d 0019 	add.w	r0, sp, #25
 8014ef8:	9a03      	ldr	r2, [sp, #12]
 8014efa:	4651      	mov	r1, sl
 8014efc:	9000      	str	r0, [sp, #0]
 8014efe:	4638      	mov	r0, r7
 8014f00:	f003 faa8 	bl	8018454 <uxr_receive_reliable_message>
 8014f04:	b1c0      	cbz	r0, 8014f38 <listen_message_reliably+0x228>
 8014f06:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8014f0a:	b393      	cbz	r3, 8014f72 <listen_message_reliably+0x262>
 8014f0c:	ae14      	add	r6, sp, #80	; 0x50
 8014f0e:	f04f 0a02 	mov.w	sl, #2
 8014f12:	e00a      	b.n	8014f2a <listen_message_reliably+0x21a>
 8014f14:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 8014f18:	4631      	mov	r1, r6
 8014f1a:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 8014f1e:	4640      	mov	r0, r8
 8014f20:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 8014f24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014f26:	f7ff fd69 	bl	80149fc <read_submessage_list>
 8014f2a:	2204      	movs	r2, #4
 8014f2c:	4631      	mov	r1, r6
 8014f2e:	4638      	mov	r0, r7
 8014f30:	f003 fb12 	bl	8018558 <uxr_next_input_reliable_buffer_available>
 8014f34:	2800      	cmp	r0, #0
 8014f36:	d1ed      	bne.n	8014f14 <listen_message_reliably+0x204>
 8014f38:	4640      	mov	r0, r8
 8014f3a:	462a      	mov	r2, r5
 8014f3c:	4649      	mov	r1, r9
 8014f3e:	f7ff fbd7 	bl	80146f0 <write_submessage_acknack.isra.0>
 8014f42:	4620      	mov	r0, r4
 8014f44:	b01d      	add	sp, #116	; 0x74
 8014f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f4a:	4629      	mov	r1, r5
 8014f4c:	f108 0008 	add.w	r0, r8, #8
 8014f50:	f001 f99e 	bl	8016290 <uxr_get_input_best_effort_stream>
 8014f54:	2800      	cmp	r0, #0
 8014f56:	d099      	beq.n	8014e8c <listen_message_reliably+0x17c>
 8014f58:	4651      	mov	r1, sl
 8014f5a:	f003 f9f1 	bl	8018340 <uxr_receive_best_effort_message>
 8014f5e:	2800      	cmp	r0, #0
 8014f60:	d094      	beq.n	8014e8c <listen_message_reliably+0x17c>
 8014f62:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8014f66:	a90c      	add	r1, sp, #48	; 0x30
 8014f68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014f6a:	4640      	mov	r0, r8
 8014f6c:	f7ff fd46 	bl	80149fc <read_submessage_list>
 8014f70:	e78c      	b.n	8014e8c <listen_message_reliably+0x17c>
 8014f72:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8014f76:	a90c      	add	r1, sp, #48	; 0x30
 8014f78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014f7a:	4640      	mov	r0, r8
 8014f7c:	f7ff fd3e 	bl	80149fc <read_submessage_list>
 8014f80:	e7c4      	b.n	8014f0c <listen_message_reliably+0x1fc>
 8014f82:	bf00      	nop

08014f84 <uxr_run_session_timeout>:
 8014f84:	b570      	push	{r4, r5, r6, lr}
 8014f86:	4604      	mov	r4, r0
 8014f88:	460d      	mov	r5, r1
 8014f8a:	f001 f9f3 	bl	8016374 <uxr_millis>
 8014f8e:	4606      	mov	r6, r0
 8014f90:	4620      	mov	r0, r4
 8014f92:	f7ff fc77 	bl	8014884 <uxr_flash_output_streams>
 8014f96:	4629      	mov	r1, r5
 8014f98:	4620      	mov	r0, r4
 8014f9a:	f7ff feb9 	bl	8014d10 <listen_message_reliably>
 8014f9e:	f001 f9e9 	bl	8016374 <uxr_millis>
 8014fa2:	1b83      	subs	r3, r0, r6
 8014fa4:	1ae9      	subs	r1, r5, r3
 8014fa6:	2900      	cmp	r1, #0
 8014fa8:	dcf6      	bgt.n	8014f98 <uxr_run_session_timeout+0x14>
 8014faa:	f104 0008 	add.w	r0, r4, #8
 8014fae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014fb2:	f001 b983 	b.w	80162bc <uxr_output_streams_confirmed>
 8014fb6:	bf00      	nop

08014fb8 <uxr_run_session_until_data>:
 8014fb8:	b570      	push	{r4, r5, r6, lr}
 8014fba:	4604      	mov	r4, r0
 8014fbc:	460d      	mov	r5, r1
 8014fbe:	f001 f9d9 	bl	8016374 <uxr_millis>
 8014fc2:	4606      	mov	r6, r0
 8014fc4:	4620      	mov	r0, r4
 8014fc6:	f7ff fc5d 	bl	8014884 <uxr_flash_output_streams>
 8014fca:	2300      	movs	r3, #0
 8014fcc:	4629      	mov	r1, r5
 8014fce:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8014fd2:	e005      	b.n	8014fe0 <uxr_run_session_until_data+0x28>
 8014fd4:	f001 f9ce 	bl	8016374 <uxr_millis>
 8014fd8:	1b83      	subs	r3, r0, r6
 8014fda:	1ae9      	subs	r1, r5, r3
 8014fdc:	2900      	cmp	r1, #0
 8014fde:	dd07      	ble.n	8014ff0 <uxr_run_session_until_data+0x38>
 8014fe0:	4620      	mov	r0, r4
 8014fe2:	f7ff fe95 	bl	8014d10 <listen_message_reliably>
 8014fe6:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8014fea:	2800      	cmp	r0, #0
 8014fec:	d0f2      	beq.n	8014fd4 <uxr_run_session_until_data+0x1c>
 8014fee:	bd70      	pop	{r4, r5, r6, pc}
 8014ff0:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8014ff4:	bd70      	pop	{r4, r5, r6, pc}
 8014ff6:	bf00      	nop

08014ff8 <uxr_run_session_until_confirm_delivery>:
 8014ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ffc:	4606      	mov	r6, r0
 8014ffe:	460d      	mov	r5, r1
 8015000:	f001 f9b8 	bl	8016374 <uxr_millis>
 8015004:	4607      	mov	r7, r0
 8015006:	4630      	mov	r0, r6
 8015008:	f106 0808 	add.w	r8, r6, #8
 801500c:	f7ff fc3a 	bl	8014884 <uxr_flash_output_streams>
 8015010:	2d00      	cmp	r5, #0
 8015012:	db10      	blt.n	8015036 <uxr_run_session_until_confirm_delivery+0x3e>
 8015014:	462c      	mov	r4, r5
 8015016:	e006      	b.n	8015026 <uxr_run_session_until_confirm_delivery+0x2e>
 8015018:	f7ff fe7a 	bl	8014d10 <listen_message_reliably>
 801501c:	f001 f9aa 	bl	8016374 <uxr_millis>
 8015020:	1bc3      	subs	r3, r0, r7
 8015022:	1aec      	subs	r4, r5, r3
 8015024:	d407      	bmi.n	8015036 <uxr_run_session_until_confirm_delivery+0x3e>
 8015026:	4640      	mov	r0, r8
 8015028:	f001 f948 	bl	80162bc <uxr_output_streams_confirmed>
 801502c:	4603      	mov	r3, r0
 801502e:	4621      	mov	r1, r4
 8015030:	4630      	mov	r0, r6
 8015032:	2b00      	cmp	r3, #0
 8015034:	d0f0      	beq.n	8015018 <uxr_run_session_until_confirm_delivery+0x20>
 8015036:	4640      	mov	r0, r8
 8015038:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801503c:	f001 b93e 	b.w	80162bc <uxr_output_streams_confirmed>

08015040 <uxr_run_session_until_all_status>:
 8015040:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015044:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8015048:	4606      	mov	r6, r0
 801504a:	4688      	mov	r8, r1
 801504c:	4692      	mov	sl, r2
 801504e:	461f      	mov	r7, r3
 8015050:	f7ff fc18 	bl	8014884 <uxr_flash_output_streams>
 8015054:	f1bb 0f00 	cmp.w	fp, #0
 8015058:	d004      	beq.n	8015064 <uxr_run_session_until_all_status+0x24>
 801505a:	465a      	mov	r2, fp
 801505c:	21ff      	movs	r1, #255	; 0xff
 801505e:	4638      	mov	r0, r7
 8015060:	f004 fab8 	bl	80195d4 <memset>
 8015064:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 8015068:	1e7d      	subs	r5, r7, #1
 801506a:	e9c6 a71d 	strd	sl, r7, [r6, #116]	; 0x74
 801506e:	f001 f981 	bl	8016374 <uxr_millis>
 8015072:	4641      	mov	r1, r8
 8015074:	4681      	mov	r9, r0
 8015076:	4630      	mov	r0, r6
 8015078:	f7ff fe4a 	bl	8014d10 <listen_message_reliably>
 801507c:	f001 f97a 	bl	8016374 <uxr_millis>
 8015080:	eba0 0009 	sub.w	r0, r0, r9
 8015084:	eba8 0100 	sub.w	r1, r8, r0
 8015088:	f1bb 0f00 	cmp.w	fp, #0
 801508c:	d029      	beq.n	80150e2 <uxr_run_session_until_all_status+0xa2>
 801508e:	46ae      	mov	lr, r5
 8015090:	f04f 0c00 	mov.w	ip, #0
 8015094:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8015098:	2cff      	cmp	r4, #255	; 0xff
 801509a:	d015      	beq.n	80150c8 <uxr_run_session_until_all_status+0x88>
 801509c:	f10c 0c01 	add.w	ip, ip, #1
 80150a0:	45e3      	cmp	fp, ip
 80150a2:	d8f7      	bhi.n	8015094 <uxr_run_session_until_all_status+0x54>
 80150a4:	2300      	movs	r3, #0
 80150a6:	67f3      	str	r3, [r6, #124]	; 0x7c
 80150a8:	e000      	b.n	80150ac <uxr_run_session_until_all_status+0x6c>
 80150aa:	b158      	cbz	r0, 80150c4 <uxr_run_session_until_all_status+0x84>
 80150ac:	462b      	mov	r3, r5
 80150ae:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 80150b2:	3302      	adds	r3, #2
 80150b4:	2801      	cmp	r0, #1
 80150b6:	eba3 0307 	sub.w	r3, r3, r7
 80150ba:	bf8c      	ite	hi
 80150bc:	2000      	movhi	r0, #0
 80150be:	2001      	movls	r0, #1
 80150c0:	459b      	cmp	fp, r3
 80150c2:	d8f2      	bhi.n	80150aa <uxr_run_session_until_all_status+0x6a>
 80150c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150c8:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 80150cc:	f10c 0c01 	add.w	ip, ip, #1
 80150d0:	45dc      	cmp	ip, fp
 80150d2:	d201      	bcs.n	80150d8 <uxr_run_session_until_all_status+0x98>
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d0dd      	beq.n	8015094 <uxr_run_session_until_all_status+0x54>
 80150d8:	2900      	cmp	r1, #0
 80150da:	dde3      	ble.n	80150a4 <uxr_run_session_until_all_status+0x64>
 80150dc:	2b00      	cmp	r3, #0
 80150de:	d1ca      	bne.n	8015076 <uxr_run_session_until_all_status+0x36>
 80150e0:	e7e0      	b.n	80150a4 <uxr_run_session_until_all_status+0x64>
 80150e2:	2001      	movs	r0, #1
 80150e4:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 80150e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080150ec <wait_session_status>:
 80150ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150f0:	4604      	mov	r4, r0
 80150f2:	b09d      	sub	sp, #116	; 0x74
 80150f4:	20ff      	movs	r0, #255	; 0xff
 80150f6:	9303      	str	r3, [sp, #12]
 80150f8:	7160      	strb	r0, [r4, #5]
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	f000 80b6 	beq.w	801526c <wait_session_status+0x180>
 8015100:	4689      	mov	r9, r1
 8015102:	4692      	mov	sl, r2
 8015104:	f04f 0b00 	mov.w	fp, #0
 8015108:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801510a:	4652      	mov	r2, sl
 801510c:	4649      	mov	r1, r9
 801510e:	e9d3 0500 	ldrd	r0, r5, [r3]
 8015112:	47a8      	blx	r5
 8015114:	f001 f92e 	bl	8016374 <uxr_millis>
 8015118:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801511c:	4605      	mov	r5, r0
 801511e:	e009      	b.n	8015134 <wait_session_status+0x48>
 8015120:	f001 f928 	bl	8016374 <uxr_millis>
 8015124:	1b40      	subs	r0, r0, r5
 8015126:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 801512a:	2b00      	cmp	r3, #0
 801512c:	dd40      	ble.n	80151b0 <wait_session_status+0xc4>
 801512e:	7960      	ldrb	r0, [r4, #5]
 8015130:	28ff      	cmp	r0, #255	; 0xff
 8015132:	d145      	bne.n	80151c0 <wait_session_status+0xd4>
 8015134:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8015136:	a908      	add	r1, sp, #32
 8015138:	6896      	ldr	r6, [r2, #8]
 801513a:	6810      	ldr	r0, [r2, #0]
 801513c:	aa09      	add	r2, sp, #36	; 0x24
 801513e:	47b0      	blx	r6
 8015140:	2800      	cmp	r0, #0
 8015142:	d0ed      	beq.n	8015120 <wait_session_status+0x34>
 8015144:	a80c      	add	r0, sp, #48	; 0x30
 8015146:	2600      	movs	r6, #0
 8015148:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 801514c:	f7f8 fe84 	bl	800de58 <ucdr_init_buffer>
 8015150:	f10d 031e 	add.w	r3, sp, #30
 8015154:	aa07      	add	r2, sp, #28
 8015156:	a90c      	add	r1, sp, #48	; 0x30
 8015158:	4620      	mov	r0, r4
 801515a:	f88d 601c 	strb.w	r6, [sp, #28]
 801515e:	f000 fa8f 	bl	8015680 <uxr_read_session_header>
 8015162:	2800      	cmp	r0, #0
 8015164:	d0dc      	beq.n	8015120 <wait_session_status+0x34>
 8015166:	4631      	mov	r1, r6
 8015168:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801516c:	f000 ffac 	bl	80160c8 <uxr_stream_id_from_raw>
 8015170:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8015174:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8015178:	f3c0 2607 	ubfx	r6, r0, #8, #8
 801517c:	2f01      	cmp	r7, #1
 801517e:	9302      	str	r3, [sp, #8]
 8015180:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8015184:	d05c      	beq.n	8015240 <wait_session_status+0x154>
 8015186:	2f02      	cmp	r7, #2
 8015188:	d020      	beq.n	80151cc <wait_session_status+0xe0>
 801518a:	2f00      	cmp	r7, #0
 801518c:	d1c8      	bne.n	8015120 <wait_session_status+0x34>
 801518e:	4639      	mov	r1, r7
 8015190:	4638      	mov	r0, r7
 8015192:	f000 ff99 	bl	80160c8 <uxr_stream_id_from_raw>
 8015196:	a90c      	add	r1, sp, #48	; 0x30
 8015198:	4602      	mov	r2, r0
 801519a:	900b      	str	r0, [sp, #44]	; 0x2c
 801519c:	4620      	mov	r0, r4
 801519e:	f7ff fc2d 	bl	80149fc <read_submessage_list>
 80151a2:	f001 f8e7 	bl	8016374 <uxr_millis>
 80151a6:	1b40      	subs	r0, r0, r5
 80151a8:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	dcbe      	bgt.n	801512e <wait_session_status+0x42>
 80151b0:	f10b 0b01 	add.w	fp, fp, #1
 80151b4:	9b03      	ldr	r3, [sp, #12]
 80151b6:	7960      	ldrb	r0, [r4, #5]
 80151b8:	455b      	cmp	r3, fp
 80151ba:	d001      	beq.n	80151c0 <wait_session_status+0xd4>
 80151bc:	28ff      	cmp	r0, #255	; 0xff
 80151be:	d0a3      	beq.n	8015108 <wait_session_status+0x1c>
 80151c0:	38ff      	subs	r0, #255	; 0xff
 80151c2:	bf18      	it	ne
 80151c4:	2001      	movne	r0, #1
 80151c6:	b01d      	add	sp, #116	; 0x74
 80151c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151cc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80151d0:	4631      	mov	r1, r6
 80151d2:	f104 0008 	add.w	r0, r4, #8
 80151d6:	9304      	str	r3, [sp, #16]
 80151d8:	f001 f864 	bl	80162a4 <uxr_get_input_reliable_stream>
 80151dc:	4680      	mov	r8, r0
 80151de:	b348      	cbz	r0, 8015234 <wait_session_status+0x148>
 80151e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80151e2:	a80c      	add	r0, sp, #48	; 0x30
 80151e4:	9205      	str	r2, [sp, #20]
 80151e6:	f7f8 fe69 	bl	800debc <ucdr_buffer_remaining>
 80151ea:	4603      	mov	r3, r0
 80151ec:	f10d 001d 	add.w	r0, sp, #29
 80151f0:	9a05      	ldr	r2, [sp, #20]
 80151f2:	9000      	str	r0, [sp, #0]
 80151f4:	4640      	mov	r0, r8
 80151f6:	9902      	ldr	r1, [sp, #8]
 80151f8:	f003 f92c 	bl	8018454 <uxr_receive_reliable_message>
 80151fc:	b1d0      	cbz	r0, 8015234 <wait_session_status+0x148>
 80151fe:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8015202:	2b00      	cmp	r3, #0
 8015204:	d03a      	beq.n	801527c <wait_session_status+0x190>
 8015206:	9f04      	ldr	r7, [sp, #16]
 8015208:	e00a      	b.n	8015220 <wait_session_status+0x134>
 801520a:	f04f 0302 	mov.w	r3, #2
 801520e:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 8015212:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8015216:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 801521a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801521c:	f7ff fbee 	bl	80149fc <read_submessage_list>
 8015220:	a914      	add	r1, sp, #80	; 0x50
 8015222:	2204      	movs	r2, #4
 8015224:	4640      	mov	r0, r8
 8015226:	f003 f997 	bl	8018558 <uxr_next_input_reliable_buffer_available>
 801522a:	4603      	mov	r3, r0
 801522c:	a914      	add	r1, sp, #80	; 0x50
 801522e:	4620      	mov	r0, r4
 8015230:	2b00      	cmp	r3, #0
 8015232:	d1ea      	bne.n	801520a <wait_session_status+0x11e>
 8015234:	4632      	mov	r2, r6
 8015236:	9904      	ldr	r1, [sp, #16]
 8015238:	4620      	mov	r0, r4
 801523a:	f7ff fa59 	bl	80146f0 <write_submessage_acknack.isra.0>
 801523e:	e76f      	b.n	8015120 <wait_session_status+0x34>
 8015240:	4631      	mov	r1, r6
 8015242:	f104 0008 	add.w	r0, r4, #8
 8015246:	f001 f823 	bl	8016290 <uxr_get_input_best_effort_stream>
 801524a:	2800      	cmp	r0, #0
 801524c:	f43f af68 	beq.w	8015120 <wait_session_status+0x34>
 8015250:	9902      	ldr	r1, [sp, #8]
 8015252:	f003 f875 	bl	8018340 <uxr_receive_best_effort_message>
 8015256:	2800      	cmp	r0, #0
 8015258:	f43f af62 	beq.w	8015120 <wait_session_status+0x34>
 801525c:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8015260:	a90c      	add	r1, sp, #48	; 0x30
 8015262:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015264:	4620      	mov	r0, r4
 8015266:	f7ff fbc9 	bl	80149fc <read_submessage_list>
 801526a:	e759      	b.n	8015120 <wait_session_status+0x34>
 801526c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801526e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8015272:	47a0      	blx	r4
 8015274:	2001      	movs	r0, #1
 8015276:	b01d      	add	sp, #116	; 0x74
 8015278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801527c:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8015280:	a90c      	add	r1, sp, #48	; 0x30
 8015282:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015284:	4620      	mov	r0, r4
 8015286:	f7ff fbb9 	bl	80149fc <read_submessage_list>
 801528a:	e7bc      	b.n	8015206 <wait_session_status+0x11a>

0801528c <uxr_delete_session_retries>:
 801528c:	b530      	push	{r4, r5, lr}
 801528e:	b08f      	sub	sp, #60	; 0x3c
 8015290:	4604      	mov	r4, r0
 8015292:	460d      	mov	r5, r1
 8015294:	f000 fa34 	bl	8015700 <uxr_session_header_offset>
 8015298:	2300      	movs	r3, #0
 801529a:	2210      	movs	r2, #16
 801529c:	a902      	add	r1, sp, #8
 801529e:	9000      	str	r0, [sp, #0]
 80152a0:	a806      	add	r0, sp, #24
 80152a2:	f7f8 fdc7 	bl	800de34 <ucdr_init_buffer_origin_offset>
 80152a6:	a906      	add	r1, sp, #24
 80152a8:	4620      	mov	r0, r4
 80152aa:	f000 f979 	bl	80155a0 <uxr_buffer_delete_session>
 80152ae:	2200      	movs	r2, #0
 80152b0:	9b06      	ldr	r3, [sp, #24]
 80152b2:	4620      	mov	r0, r4
 80152b4:	4611      	mov	r1, r2
 80152b6:	f000 f9cf 	bl	8015658 <uxr_stamp_session_header>
 80152ba:	a806      	add	r0, sp, #24
 80152bc:	f7f8 fdfa 	bl	800deb4 <ucdr_buffer_length>
 80152c0:	462b      	mov	r3, r5
 80152c2:	4602      	mov	r2, r0
 80152c4:	a902      	add	r1, sp, #8
 80152c6:	4620      	mov	r0, r4
 80152c8:	f7ff ff10 	bl	80150ec <wait_session_status>
 80152cc:	b118      	cbz	r0, 80152d6 <uxr_delete_session_retries+0x4a>
 80152ce:	7960      	ldrb	r0, [r4, #5]
 80152d0:	fab0 f080 	clz	r0, r0
 80152d4:	0940      	lsrs	r0, r0, #5
 80152d6:	b00f      	add	sp, #60	; 0x3c
 80152d8:	bd30      	pop	{r4, r5, pc}
 80152da:	bf00      	nop

080152dc <uxr_create_session>:
 80152dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152e0:	f100 0b08 	add.w	fp, r0, #8
 80152e4:	4604      	mov	r4, r0
 80152e6:	b0ab      	sub	sp, #172	; 0xac
 80152e8:	4658      	mov	r0, fp
 80152ea:	465e      	mov	r6, fp
 80152ec:	f000 ff22 	bl	8016134 <uxr_reset_stream_storage>
 80152f0:	4620      	mov	r0, r4
 80152f2:	f000 fa05 	bl	8015700 <uxr_session_header_offset>
 80152f6:	2300      	movs	r3, #0
 80152f8:	221c      	movs	r2, #28
 80152fa:	a90b      	add	r1, sp, #44	; 0x2c
 80152fc:	9000      	str	r0, [sp, #0]
 80152fe:	a812      	add	r0, sp, #72	; 0x48
 8015300:	f7f8 fd98 	bl	800de34 <ucdr_init_buffer_origin_offset>
 8015304:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015306:	a912      	add	r1, sp, #72	; 0x48
 8015308:	4620      	mov	r0, r4
 801530a:	8a1a      	ldrh	r2, [r3, #16]
 801530c:	3a04      	subs	r2, #4
 801530e:	b292      	uxth	r2, r2
 8015310:	f000 f91c 	bl	801554c <uxr_buffer_create_session>
 8015314:	9912      	ldr	r1, [sp, #72]	; 0x48
 8015316:	4620      	mov	r0, r4
 8015318:	f000 f98a 	bl	8015630 <uxr_stamp_create_session_header>
 801531c:	a812      	add	r0, sp, #72	; 0x48
 801531e:	f7f8 fdc9 	bl	800deb4 <ucdr_buffer_length>
 8015322:	23ff      	movs	r3, #255	; 0xff
 8015324:	4681      	mov	r9, r0
 8015326:	7163      	strb	r3, [r4, #5]
 8015328:	230a      	movs	r3, #10
 801532a:	9303      	str	r3, [sp, #12]
 801532c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801532e:	464a      	mov	r2, r9
 8015330:	a90b      	add	r1, sp, #44	; 0x2c
 8015332:	e9d3 0500 	ldrd	r0, r5, [r3]
 8015336:	47a8      	blx	r5
 8015338:	f001 f81c 	bl	8016374 <uxr_millis>
 801533c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015340:	4605      	mov	r5, r0
 8015342:	e009      	b.n	8015358 <uxr_create_session+0x7c>
 8015344:	f001 f816 	bl	8016374 <uxr_millis>
 8015348:	1b40      	subs	r0, r0, r5
 801534a:	7962      	ldrb	r2, [r4, #5]
 801534c:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8015350:	2b00      	cmp	r3, #0
 8015352:	dd38      	ble.n	80153c6 <uxr_create_session+0xea>
 8015354:	2aff      	cmp	r2, #255	; 0xff
 8015356:	d13c      	bne.n	80153d2 <uxr_create_session+0xf6>
 8015358:	6f22      	ldr	r2, [r4, #112]	; 0x70
 801535a:	a907      	add	r1, sp, #28
 801535c:	6897      	ldr	r7, [r2, #8]
 801535e:	6810      	ldr	r0, [r2, #0]
 8015360:	aa08      	add	r2, sp, #32
 8015362:	47b8      	blx	r7
 8015364:	2800      	cmp	r0, #0
 8015366:	d0ed      	beq.n	8015344 <uxr_create_session+0x68>
 8015368:	a81a      	add	r0, sp, #104	; 0x68
 801536a:	2700      	movs	r7, #0
 801536c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8015370:	f7f8 fd72 	bl	800de58 <ucdr_init_buffer>
 8015374:	f10d 031a 	add.w	r3, sp, #26
 8015378:	aa06      	add	r2, sp, #24
 801537a:	a91a      	add	r1, sp, #104	; 0x68
 801537c:	4620      	mov	r0, r4
 801537e:	f88d 7018 	strb.w	r7, [sp, #24]
 8015382:	f000 f97d 	bl	8015680 <uxr_read_session_header>
 8015386:	2800      	cmp	r0, #0
 8015388:	d0dc      	beq.n	8015344 <uxr_create_session+0x68>
 801538a:	4639      	mov	r1, r7
 801538c:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8015390:	f000 fe9a 	bl	80160c8 <uxr_stream_id_from_raw>
 8015394:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8015398:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 801539c:	f3c0 2807 	ubfx	r8, r0, #8, #8
 80153a0:	2f01      	cmp	r7, #1
 80153a2:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 80153a6:	d053      	beq.n	8015450 <uxr_create_session+0x174>
 80153a8:	2f02      	cmp	r7, #2
 80153aa:	d018      	beq.n	80153de <uxr_create_session+0x102>
 80153ac:	2f00      	cmp	r7, #0
 80153ae:	d1c9      	bne.n	8015344 <uxr_create_session+0x68>
 80153b0:	4639      	mov	r1, r7
 80153b2:	4638      	mov	r0, r7
 80153b4:	f000 fe88 	bl	80160c8 <uxr_stream_id_from_raw>
 80153b8:	a91a      	add	r1, sp, #104	; 0x68
 80153ba:	4602      	mov	r2, r0
 80153bc:	900a      	str	r0, [sp, #40]	; 0x28
 80153be:	4620      	mov	r0, r4
 80153c0:	f7ff fb1c 	bl	80149fc <read_submessage_list>
 80153c4:	e7be      	b.n	8015344 <uxr_create_session+0x68>
 80153c6:	9b03      	ldr	r3, [sp, #12]
 80153c8:	3b01      	subs	r3, #1
 80153ca:	9303      	str	r3, [sp, #12]
 80153cc:	d001      	beq.n	80153d2 <uxr_create_session+0xf6>
 80153ce:	2aff      	cmp	r2, #255	; 0xff
 80153d0:	d0ac      	beq.n	801532c <uxr_create_session+0x50>
 80153d2:	2a00      	cmp	r2, #0
 80153d4:	d051      	beq.n	801547a <uxr_create_session+0x19e>
 80153d6:	2000      	movs	r0, #0
 80153d8:	b02b      	add	sp, #172	; 0xac
 80153da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153de:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80153e2:	4641      	mov	r1, r8
 80153e4:	4630      	mov	r0, r6
 80153e6:	9304      	str	r3, [sp, #16]
 80153e8:	f000 ff5c 	bl	80162a4 <uxr_get_input_reliable_stream>
 80153ec:	4682      	mov	sl, r0
 80153ee:	b348      	cbz	r0, 8015444 <uxr_create_session+0x168>
 80153f0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80153f2:	a81a      	add	r0, sp, #104	; 0x68
 80153f4:	9205      	str	r2, [sp, #20]
 80153f6:	f7f8 fd61 	bl	800debc <ucdr_buffer_remaining>
 80153fa:	4603      	mov	r3, r0
 80153fc:	f10d 0019 	add.w	r0, sp, #25
 8015400:	9a05      	ldr	r2, [sp, #20]
 8015402:	4659      	mov	r1, fp
 8015404:	9000      	str	r0, [sp, #0]
 8015406:	4650      	mov	r0, sl
 8015408:	f003 f824 	bl	8018454 <uxr_receive_reliable_message>
 801540c:	b1d0      	cbz	r0, 8015444 <uxr_create_session+0x168>
 801540e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8015412:	2b00      	cmp	r3, #0
 8015414:	d038      	beq.n	8015488 <uxr_create_session+0x1ac>
 8015416:	9f04      	ldr	r7, [sp, #16]
 8015418:	e00a      	b.n	8015430 <uxr_create_session+0x154>
 801541a:	f04f 0302 	mov.w	r3, #2
 801541e:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 8015422:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
 8015426:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801542a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801542c:	f7ff fae6 	bl	80149fc <read_submessage_list>
 8015430:	a922      	add	r1, sp, #136	; 0x88
 8015432:	2204      	movs	r2, #4
 8015434:	4650      	mov	r0, sl
 8015436:	f003 f88f 	bl	8018558 <uxr_next_input_reliable_buffer_available>
 801543a:	4603      	mov	r3, r0
 801543c:	a922      	add	r1, sp, #136	; 0x88
 801543e:	4620      	mov	r0, r4
 8015440:	2b00      	cmp	r3, #0
 8015442:	d1ea      	bne.n	801541a <uxr_create_session+0x13e>
 8015444:	4642      	mov	r2, r8
 8015446:	9904      	ldr	r1, [sp, #16]
 8015448:	4620      	mov	r0, r4
 801544a:	f7ff f951 	bl	80146f0 <write_submessage_acknack.isra.0>
 801544e:	e779      	b.n	8015344 <uxr_create_session+0x68>
 8015450:	4641      	mov	r1, r8
 8015452:	4630      	mov	r0, r6
 8015454:	f000 ff1c 	bl	8016290 <uxr_get_input_best_effort_stream>
 8015458:	2800      	cmp	r0, #0
 801545a:	f43f af73 	beq.w	8015344 <uxr_create_session+0x68>
 801545e:	4659      	mov	r1, fp
 8015460:	f002 ff6e 	bl	8018340 <uxr_receive_best_effort_message>
 8015464:	2800      	cmp	r0, #0
 8015466:	f43f af6d 	beq.w	8015344 <uxr_create_session+0x68>
 801546a:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 801546e:	a91a      	add	r1, sp, #104	; 0x68
 8015470:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015472:	4620      	mov	r0, r4
 8015474:	f7ff fac2 	bl	80149fc <read_submessage_list>
 8015478:	e764      	b.n	8015344 <uxr_create_session+0x68>
 801547a:	4630      	mov	r0, r6
 801547c:	f000 fe5a 	bl	8016134 <uxr_reset_stream_storage>
 8015480:	2001      	movs	r0, #1
 8015482:	b02b      	add	sp, #172	; 0xac
 8015484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015488:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 801548c:	a91a      	add	r1, sp, #104	; 0x68
 801548e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015490:	4620      	mov	r0, r4
 8015492:	f7ff fab3 	bl	80149fc <read_submessage_list>
 8015496:	e7be      	b.n	8015416 <uxr_create_session+0x13a>

08015498 <uxr_prepare_stream_to_write_submessage>:
 8015498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801549c:	b082      	sub	sp, #8
 801549e:	4604      	mov	r4, r0
 80154a0:	4610      	mov	r0, r2
 80154a2:	4615      	mov	r5, r2
 80154a4:	461e      	mov	r6, r3
 80154a6:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 80154aa:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 80154ae:	f105 0904 	add.w	r9, r5, #4
 80154b2:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 80154b6:	9101      	str	r1, [sp, #4]
 80154b8:	f000 ff56 	bl	8016368 <uxr_submessage_padding>
 80154bc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80154c0:	4481      	add	r9, r0
 80154c2:	2b01      	cmp	r3, #1
 80154c4:	d01d      	beq.n	8015502 <uxr_prepare_stream_to_write_submessage+0x6a>
 80154c6:	2b02      	cmp	r3, #2
 80154c8:	d116      	bne.n	80154f8 <uxr_prepare_stream_to_write_submessage+0x60>
 80154ca:	f104 0008 	add.w	r0, r4, #8
 80154ce:	4651      	mov	r1, sl
 80154d0:	f000 fed2 	bl	8016278 <uxr_get_output_reliable_stream>
 80154d4:	4604      	mov	r4, r0
 80154d6:	b158      	cbz	r0, 80154f0 <uxr_prepare_stream_to_write_submessage+0x58>
 80154d8:	4649      	mov	r1, r9
 80154da:	4632      	mov	r2, r6
 80154dc:	f003 fa02 	bl	80188e4 <uxr_prepare_reliable_buffer_to_write>
 80154e0:	4604      	mov	r4, r0
 80154e2:	b12c      	cbz	r4, 80154f0 <uxr_prepare_stream_to_write_submessage+0x58>
 80154e4:	4643      	mov	r3, r8
 80154e6:	b2aa      	uxth	r2, r5
 80154e8:	4639      	mov	r1, r7
 80154ea:	4630      	mov	r0, r6
 80154ec:	f000 fefc 	bl	80162e8 <uxr_buffer_submessage_header>
 80154f0:	4620      	mov	r0, r4
 80154f2:	b002      	add	sp, #8
 80154f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80154f8:	2400      	movs	r4, #0
 80154fa:	4620      	mov	r0, r4
 80154fc:	b002      	add	sp, #8
 80154fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015502:	f104 0008 	add.w	r0, r4, #8
 8015506:	4651      	mov	r1, sl
 8015508:	f000 feae 	bl	8016268 <uxr_get_output_best_effort_stream>
 801550c:	4604      	mov	r4, r0
 801550e:	2800      	cmp	r0, #0
 8015510:	d0ee      	beq.n	80154f0 <uxr_prepare_stream_to_write_submessage+0x58>
 8015512:	4649      	mov	r1, r9
 8015514:	4632      	mov	r2, r6
 8015516:	f003 f90f 	bl	8018738 <uxr_prepare_best_effort_buffer_to_write>
 801551a:	4604      	mov	r4, r0
 801551c:	e7e1      	b.n	80154e2 <uxr_prepare_stream_to_write_submessage+0x4a>
 801551e:	bf00      	nop

08015520 <uxr_init_session_info>:
 8015520:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8015524:	23ff      	movs	r3, #255	; 0xff
 8015526:	7102      	strb	r2, [r0, #4]
 8015528:	f880 c001 	strb.w	ip, [r0, #1]
 801552c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8015530:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8015534:	7001      	strb	r1, [r0, #0]
 8015536:	f880 c002 	strb.w	ip, [r0, #2]
 801553a:	7143      	strb	r3, [r0, #5]
 801553c:	70c2      	strb	r2, [r0, #3]
 801553e:	b500      	push	{lr}
 8015540:	f04f 0e09 	mov.w	lr, #9
 8015544:	f8a0 e006 	strh.w	lr, [r0, #6]
 8015548:	f85d fb04 	ldr.w	pc, [sp], #4

0801554c <uxr_buffer_create_session>:
 801554c:	b530      	push	{r4, r5, lr}
 801554e:	2300      	movs	r3, #0
 8015550:	b089      	sub	sp, #36	; 0x24
 8015552:	4d12      	ldr	r5, [pc, #72]	; (801559c <uxr_buffer_create_session+0x50>)
 8015554:	460c      	mov	r4, r1
 8015556:	9307      	str	r3, [sp, #28]
 8015558:	4619      	mov	r1, r3
 801555a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801555e:	2201      	movs	r2, #1
 8015560:	9301      	str	r3, [sp, #4]
 8015562:	80c2      	strh	r2, [r0, #6]
 8015564:	f88d 2004 	strb.w	r2, [sp, #4]
 8015568:	682a      	ldr	r2, [r5, #0]
 801556a:	9303      	str	r3, [sp, #12]
 801556c:	9200      	str	r2, [sp, #0]
 801556e:	88aa      	ldrh	r2, [r5, #4]
 8015570:	9306      	str	r3, [sp, #24]
 8015572:	f8ad 2006 	strh.w	r2, [sp, #6]
 8015576:	f8d0 2001 	ldr.w	r2, [r0, #1]
 801557a:	9202      	str	r2, [sp, #8]
 801557c:	7802      	ldrb	r2, [r0, #0]
 801557e:	4620      	mov	r0, r4
 8015580:	f88d 200c 	strb.w	r2, [sp, #12]
 8015584:	2210      	movs	r2, #16
 8015586:	e9cd 3304 	strd	r3, r3, [sp, #16]
 801558a:	f000 fead 	bl	80162e8 <uxr_buffer_submessage_header>
 801558e:	4669      	mov	r1, sp
 8015590:	4620      	mov	r0, r4
 8015592:	f001 fcdd 	bl	8016f50 <uxr_serialize_CREATE_CLIENT_Payload>
 8015596:	b009      	add	sp, #36	; 0x24
 8015598:	bd30      	pop	{r4, r5, pc}
 801559a:	bf00      	nop
 801559c:	0801a658 	.word	0x0801a658

080155a0 <uxr_buffer_delete_session>:
 80155a0:	4a0c      	ldr	r2, [pc, #48]	; (80155d4 <uxr_buffer_delete_session+0x34>)
 80155a2:	2302      	movs	r3, #2
 80155a4:	f44f 7c00 	mov.w	ip, #512	; 0x200
 80155a8:	b510      	push	{r4, lr}
 80155aa:	460c      	mov	r4, r1
 80155ac:	b082      	sub	sp, #8
 80155ae:	8911      	ldrh	r1, [r2, #8]
 80155b0:	2204      	movs	r2, #4
 80155b2:	80c3      	strh	r3, [r0, #6]
 80155b4:	2300      	movs	r3, #0
 80155b6:	f8ad 1006 	strh.w	r1, [sp, #6]
 80155ba:	4620      	mov	r0, r4
 80155bc:	2103      	movs	r1, #3
 80155be:	f8ad c004 	strh.w	ip, [sp, #4]
 80155c2:	f000 fe91 	bl	80162e8 <uxr_buffer_submessage_header>
 80155c6:	a901      	add	r1, sp, #4
 80155c8:	4620      	mov	r0, r4
 80155ca:	f001 fd69 	bl	80170a0 <uxr_serialize_DELETE_Payload>
 80155ce:	b002      	add	sp, #8
 80155d0:	bd10      	pop	{r4, pc}
 80155d2:	bf00      	nop
 80155d4:	0801a658 	.word	0x0801a658

080155d8 <uxr_read_create_session_status>:
 80155d8:	b510      	push	{r4, lr}
 80155da:	460b      	mov	r3, r1
 80155dc:	b088      	sub	sp, #32
 80155de:	4604      	mov	r4, r0
 80155e0:	a901      	add	r1, sp, #4
 80155e2:	4618      	mov	r0, r3
 80155e4:	f001 fd6c 	bl	80170c0 <uxr_deserialize_STATUS_AGENT_Payload>
 80155e8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80155ec:	7163      	strb	r3, [r4, #5]
 80155ee:	b008      	add	sp, #32
 80155f0:	bd10      	pop	{r4, pc}
 80155f2:	bf00      	nop

080155f4 <uxr_read_delete_session_status>:
 80155f4:	b510      	push	{r4, lr}
 80155f6:	b084      	sub	sp, #16
 80155f8:	4604      	mov	r4, r0
 80155fa:	4608      	mov	r0, r1
 80155fc:	a902      	add	r1, sp, #8
 80155fe:	f001 fd8f 	bl	8017120 <uxr_deserialize_STATUS_Payload>
 8015602:	88e3      	ldrh	r3, [r4, #6]
 8015604:	2b02      	cmp	r3, #2
 8015606:	d001      	beq.n	801560c <uxr_read_delete_session_status+0x18>
 8015608:	b004      	add	sp, #16
 801560a:	bd10      	pop	{r4, pc}
 801560c:	f10d 000a 	add.w	r0, sp, #10
 8015610:	f7fe fec4 	bl	801439c <uxr_object_id_from_raw>
 8015614:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8015618:	f89d 3009 	ldrb.w	r3, [sp, #9]
 801561c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8015620:	b29b      	uxth	r3, r3
 8015622:	2b02      	cmp	r3, #2
 8015624:	d1f0      	bne.n	8015608 <uxr_read_delete_session_status+0x14>
 8015626:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801562a:	7163      	strb	r3, [r4, #5]
 801562c:	e7ec      	b.n	8015608 <uxr_read_delete_session_status+0x14>
 801562e:	bf00      	nop

08015630 <uxr_stamp_create_session_header>:
 8015630:	b510      	push	{r4, lr}
 8015632:	2208      	movs	r2, #8
 8015634:	b08a      	sub	sp, #40	; 0x28
 8015636:	4604      	mov	r4, r0
 8015638:	eb0d 0002 	add.w	r0, sp, r2
 801563c:	f7f8 fc0c 	bl	800de58 <ucdr_init_buffer>
 8015640:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015644:	2300      	movs	r3, #0
 8015646:	a802      	add	r0, sp, #8
 8015648:	f001 0180 	and.w	r1, r1, #128	; 0x80
 801564c:	9400      	str	r4, [sp, #0]
 801564e:	461a      	mov	r2, r3
 8015650:	f001 f846 	bl	80166e0 <uxr_serialize_message_header>
 8015654:	b00a      	add	sp, #40	; 0x28
 8015656:	bd10      	pop	{r4, pc}

08015658 <uxr_stamp_session_header>:
 8015658:	b530      	push	{r4, r5, lr}
 801565a:	b08d      	sub	sp, #52	; 0x34
 801565c:	4604      	mov	r4, r0
 801565e:	460d      	mov	r5, r1
 8015660:	4619      	mov	r1, r3
 8015662:	a804      	add	r0, sp, #16
 8015664:	9203      	str	r2, [sp, #12]
 8015666:	2208      	movs	r2, #8
 8015668:	f7f8 fbf6 	bl	800de58 <ucdr_init_buffer>
 801566c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015670:	9b03      	ldr	r3, [sp, #12]
 8015672:	462a      	mov	r2, r5
 8015674:	a804      	add	r0, sp, #16
 8015676:	9400      	str	r4, [sp, #0]
 8015678:	f001 f832 	bl	80166e0 <uxr_serialize_message_header>
 801567c:	b00d      	add	sp, #52	; 0x34
 801567e:	bd30      	pop	{r4, r5, pc}

08015680 <uxr_read_session_header>:
 8015680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015684:	4607      	mov	r7, r0
 8015686:	b084      	sub	sp, #16
 8015688:	4608      	mov	r0, r1
 801568a:	460c      	mov	r4, r1
 801568c:	4615      	mov	r5, r2
 801568e:	461e      	mov	r6, r3
 8015690:	f7f8 fc14 	bl	800debc <ucdr_buffer_remaining>
 8015694:	2808      	cmp	r0, #8
 8015696:	d803      	bhi.n	80156a0 <uxr_read_session_header+0x20>
 8015698:	2000      	movs	r0, #0
 801569a:	b004      	add	sp, #16
 801569c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156a0:	f10d 080c 	add.w	r8, sp, #12
 80156a4:	4633      	mov	r3, r6
 80156a6:	462a      	mov	r2, r5
 80156a8:	4620      	mov	r0, r4
 80156aa:	f10d 010b 	add.w	r1, sp, #11
 80156ae:	f8cd 8000 	str.w	r8, [sp]
 80156b2:	f001 f833 	bl	801671c <uxr_deserialize_message_header>
 80156b6:	783a      	ldrb	r2, [r7, #0]
 80156b8:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80156bc:	4293      	cmp	r3, r2
 80156be:	d1eb      	bne.n	8015698 <uxr_read_session_header+0x18>
 80156c0:	061b      	lsls	r3, r3, #24
 80156c2:	d41b      	bmi.n	80156fc <uxr_read_session_header+0x7c>
 80156c4:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80156c8:	787b      	ldrb	r3, [r7, #1]
 80156ca:	429a      	cmp	r2, r3
 80156cc:	d003      	beq.n	80156d6 <uxr_read_session_header+0x56>
 80156ce:	2001      	movs	r0, #1
 80156d0:	f080 0001 	eor.w	r0, r0, #1
 80156d4:	e7e1      	b.n	801569a <uxr_read_session_header+0x1a>
 80156d6:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80156da:	1cb8      	adds	r0, r7, #2
 80156dc:	78bb      	ldrb	r3, [r7, #2]
 80156de:	429a      	cmp	r2, r3
 80156e0:	d1f5      	bne.n	80156ce <uxr_read_session_header+0x4e>
 80156e2:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80156e6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80156ea:	429a      	cmp	r2, r3
 80156ec:	d1ef      	bne.n	80156ce <uxr_read_session_header+0x4e>
 80156ee:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80156f2:	7843      	ldrb	r3, [r0, #1]
 80156f4:	429a      	cmp	r2, r3
 80156f6:	d1ea      	bne.n	80156ce <uxr_read_session_header+0x4e>
 80156f8:	2000      	movs	r0, #0
 80156fa:	e7e9      	b.n	80156d0 <uxr_read_session_header+0x50>
 80156fc:	2001      	movs	r0, #1
 80156fe:	e7cc      	b.n	801569a <uxr_read_session_header+0x1a>

08015700 <uxr_session_header_offset>:
 8015700:	f990 3000 	ldrsb.w	r3, [r0]
 8015704:	2b00      	cmp	r3, #0
 8015706:	bfac      	ite	ge
 8015708:	2008      	movge	r0, #8
 801570a:	2004      	movlt	r0, #4
 801570c:	4770      	bx	lr
 801570e:	bf00      	nop

08015710 <uxr_init_base_object_request>:
 8015710:	b510      	push	{r4, lr}
 8015712:	b082      	sub	sp, #8
 8015714:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 8015718:	9101      	str	r1, [sp, #4]
 801571a:	88c3      	ldrh	r3, [r0, #6]
 801571c:	f1a3 010a 	sub.w	r1, r3, #10
 8015720:	b289      	uxth	r1, r1
 8015722:	42a1      	cmp	r1, r4
 8015724:	d80f      	bhi.n	8015746 <uxr_init_base_object_request+0x36>
 8015726:	3301      	adds	r3, #1
 8015728:	b29c      	uxth	r4, r3
 801572a:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 801572e:	b2db      	uxtb	r3, r3
 8015730:	80c4      	strh	r4, [r0, #6]
 8015732:	1c91      	adds	r1, r2, #2
 8015734:	9801      	ldr	r0, [sp, #4]
 8015736:	f882 c000 	strb.w	ip, [r2]
 801573a:	7053      	strb	r3, [r2, #1]
 801573c:	f7fe fe42 	bl	80143c4 <uxr_object_id_to_raw>
 8015740:	4620      	mov	r0, r4
 8015742:	b002      	add	sp, #8
 8015744:	bd10      	pop	{r4, pc}
 8015746:	230a      	movs	r3, #10
 8015748:	f04f 0c00 	mov.w	ip, #0
 801574c:	461c      	mov	r4, r3
 801574e:	e7ef      	b.n	8015730 <uxr_init_base_object_request+0x20>

08015750 <uxr_parse_base_object_request>:
 8015750:	b570      	push	{r4, r5, r6, lr}
 8015752:	4604      	mov	r4, r0
 8015754:	3002      	adds	r0, #2
 8015756:	460d      	mov	r5, r1
 8015758:	4616      	mov	r6, r2
 801575a:	f7fe fe1f 	bl	801439c <uxr_object_id_from_raw>
 801575e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8015762:	8028      	strh	r0, [r5, #0]
 8015764:	806b      	strh	r3, [r5, #2]
 8015766:	7822      	ldrb	r2, [r4, #0]
 8015768:	7863      	ldrb	r3, [r4, #1]
 801576a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801576e:	8033      	strh	r3, [r6, #0]
 8015770:	bd70      	pop	{r4, r5, r6, pc}
 8015772:	bf00      	nop

08015774 <uxr_init_framing_io>:
 8015774:	2300      	movs	r3, #0
 8015776:	7041      	strb	r1, [r0, #1]
 8015778:	7003      	strb	r3, [r0, #0]
 801577a:	8583      	strh	r3, [r0, #44]	; 0x2c
 801577c:	4770      	bx	lr
 801577e:	bf00      	nop

08015780 <uxr_write_framed_msg>:
 8015780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015784:	4617      	mov	r7, r2
 8015786:	7842      	ldrb	r2, [r0, #1]
 8015788:	460e      	mov	r6, r1
 801578a:	b083      	sub	sp, #12
 801578c:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 8015790:	469b      	mov	fp, r3
 8015792:	237e      	movs	r3, #126	; 0x7e
 8015794:	4604      	mov	r4, r0
 8015796:	2901      	cmp	r1, #1
 8015798:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 801579c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 80157a0:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 80157a4:	f240 8115 	bls.w	80159d2 <uxr_write_framed_msg+0x252>
 80157a8:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 80157ac:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 80157b0:	2202      	movs	r2, #2
 80157b2:	2901      	cmp	r1, #1
 80157b4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80157b8:	d952      	bls.n	8015860 <uxr_write_framed_msg+0xe0>
 80157ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80157bc:	2103      	movs	r1, #3
 80157be:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 80157c2:	b2dd      	uxtb	r5, r3
 80157c4:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 80157c8:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 80157cc:	2a01      	cmp	r2, #1
 80157ce:	d95c      	bls.n	801588a <uxr_write_framed_msg+0x10a>
 80157d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80157d2:	1862      	adds	r2, r4, r1
 80157d4:	3101      	adds	r1, #1
 80157d6:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80157da:	f882 5038 	strb.w	r5, [r2, #56]	; 0x38
 80157de:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 80157e2:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 80157e6:	2a01      	cmp	r2, #1
 80157e8:	d961      	bls.n	80158ae <uxr_write_framed_msg+0x12e>
 80157ea:	1c4a      	adds	r2, r1, #1
 80157ec:	4421      	add	r1, r4
 80157ee:	b2d2      	uxtb	r2, r2
 80157f0:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 80157f4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	d06a      	beq.n	80158d2 <uxr_write_framed_msg+0x152>
 80157fc:	f04f 0800 	mov.w	r8, #0
 8015800:	46c1      	mov	r9, r8
 8015802:	e016      	b.n	8015832 <uxr_write_framed_msg+0xb2>
 8015804:	2a29      	cmp	r2, #41	; 0x29
 8015806:	d868      	bhi.n	80158da <uxr_write_framed_msg+0x15a>
 8015808:	18a0      	adds	r0, r4, r2
 801580a:	3201      	adds	r2, #1
 801580c:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8015810:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015814:	ea88 0101 	eor.w	r1, r8, r1
 8015818:	4b7d      	ldr	r3, [pc, #500]	; (8015a10 <uxr_write_framed_msg+0x290>)
 801581a:	f109 0901 	add.w	r9, r9, #1
 801581e:	b2c9      	uxtb	r1, r1
 8015820:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8015824:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 8015828:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801582a:	454b      	cmp	r3, r9
 801582c:	d969      	bls.n	8015902 <uxr_write_framed_msg+0x182>
 801582e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8015832:	f81b 1009 	ldrb.w	r1, [fp, r9]
 8015836:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 801583a:	2801      	cmp	r0, #1
 801583c:	d8e2      	bhi.n	8015804 <uxr_write_framed_msg+0x84>
 801583e:	1c50      	adds	r0, r2, #1
 8015840:	b2c0      	uxtb	r0, r0
 8015842:	2829      	cmp	r0, #41	; 0x29
 8015844:	d849      	bhi.n	80158da <uxr_write_framed_msg+0x15a>
 8015846:	18a0      	adds	r0, r4, r2
 8015848:	f04f 037d 	mov.w	r3, #125	; 0x7d
 801584c:	3202      	adds	r2, #2
 801584e:	f081 0520 	eor.w	r5, r1, #32
 8015852:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8015856:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 801585a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801585e:	e7d9      	b.n	8015814 <uxr_write_framed_msg+0x94>
 8015860:	2104      	movs	r1, #4
 8015862:	f04f 0c03 	mov.w	ip, #3
 8015866:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015868:	4422      	add	r2, r4
 801586a:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 801586e:	44a4      	add	ip, r4
 8015870:	b2dd      	uxtb	r5, r3
 8015872:	f080 0020 	eor.w	r0, r0, #32
 8015876:	f882 e038 	strb.w	lr, [r2, #56]	; 0x38
 801587a:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 801587e:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 8015882:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8015886:	2a01      	cmp	r2, #1
 8015888:	d8a2      	bhi.n	80157d0 <uxr_write_framed_msg+0x50>
 801588a:	1862      	adds	r2, r4, r1
 801588c:	207d      	movs	r0, #125	; 0x7d
 801588e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015890:	f085 0520 	eor.w	r5, r5, #32
 8015894:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
 8015898:	3102      	adds	r1, #2
 801589a:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801589e:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
 80158a2:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 80158a6:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 80158aa:	2a01      	cmp	r2, #1
 80158ac:	d89d      	bhi.n	80157ea <uxr_write_framed_msg+0x6a>
 80158ae:	1c4d      	adds	r5, r1, #1
 80158b0:	1c8a      	adds	r2, r1, #2
 80158b2:	f080 0020 	eor.w	r0, r0, #32
 80158b6:	4421      	add	r1, r4
 80158b8:	fa54 f585 	uxtab	r5, r4, r5
 80158bc:	b2d2      	uxtb	r2, r2
 80158be:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 80158c2:	f881 c038 	strb.w	ip, [r1, #56]	; 0x38
 80158c6:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 80158ca:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	d194      	bne.n	80157fc <uxr_write_framed_msg+0x7c>
 80158d2:	4619      	mov	r1, r3
 80158d4:	f8ad 3004 	strh.w	r3, [sp, #4]
 80158d8:	e019      	b.n	801590e <uxr_write_framed_msg+0x18e>
 80158da:	2500      	movs	r5, #0
 80158dc:	e000      	b.n	80158e0 <uxr_write_framed_msg+0x160>
 80158de:	b160      	cbz	r0, 80158fa <uxr_write_framed_msg+0x17a>
 80158e0:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80158e4:	1b52      	subs	r2, r2, r5
 80158e6:	4653      	mov	r3, sl
 80158e8:	4638      	mov	r0, r7
 80158ea:	4421      	add	r1, r4
 80158ec:	47b0      	blx	r6
 80158ee:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80158f2:	4405      	add	r5, r0
 80158f4:	4295      	cmp	r5, r2
 80158f6:	d3f2      	bcc.n	80158de <uxr_write_framed_msg+0x15e>
 80158f8:	d066      	beq.n	80159c8 <uxr_write_framed_msg+0x248>
 80158fa:	2000      	movs	r0, #0
 80158fc:	b003      	add	sp, #12
 80158fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015902:	fa5f f188 	uxtb.w	r1, r8
 8015906:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801590a:	f8ad 8004 	strh.w	r8, [sp, #4]
 801590e:	f04f 0900 	mov.w	r9, #0
 8015912:	f04f 0b7d 	mov.w	fp, #125	; 0x7d
 8015916:	46c8      	mov	r8, r9
 8015918:	e013      	b.n	8015942 <uxr_write_framed_msg+0x1c2>
 801591a:	2a29      	cmp	r2, #41	; 0x29
 801591c:	d824      	bhi.n	8015968 <uxr_write_framed_msg+0x1e8>
 801591e:	18a3      	adds	r3, r4, r2
 8015920:	3201      	adds	r2, #1
 8015922:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 8015926:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801592a:	f109 0901 	add.w	r9, r9, #1
 801592e:	f1b9 0f02 	cmp.w	r9, #2
 8015932:	d02d      	beq.n	8015990 <uxr_write_framed_msg+0x210>
 8015934:	f109 0308 	add.w	r3, r9, #8
 8015938:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801593c:	446b      	add	r3, sp
 801593e:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 8015942:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8015946:	2b01      	cmp	r3, #1
 8015948:	d8e7      	bhi.n	801591a <uxr_write_framed_msg+0x19a>
 801594a:	1c53      	adds	r3, r2, #1
 801594c:	b2db      	uxtb	r3, r3
 801594e:	2b29      	cmp	r3, #41	; 0x29
 8015950:	d80a      	bhi.n	8015968 <uxr_write_framed_msg+0x1e8>
 8015952:	18a3      	adds	r3, r4, r2
 8015954:	f081 0120 	eor.w	r1, r1, #32
 8015958:	3202      	adds	r2, #2
 801595a:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 801595e:	f883 b038 	strb.w	fp, [r3, #56]	; 0x38
 8015962:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015966:	e7e0      	b.n	801592a <uxr_write_framed_msg+0x1aa>
 8015968:	2500      	movs	r5, #0
 801596a:	e001      	b.n	8015970 <uxr_write_framed_msg+0x1f0>
 801596c:	2800      	cmp	r0, #0
 801596e:	d0c4      	beq.n	80158fa <uxr_write_framed_msg+0x17a>
 8015970:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8015974:	1b52      	subs	r2, r2, r5
 8015976:	4653      	mov	r3, sl
 8015978:	4638      	mov	r0, r7
 801597a:	4421      	add	r1, r4
 801597c:	47b0      	blx	r6
 801597e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8015982:	4405      	add	r5, r0
 8015984:	4295      	cmp	r5, r2
 8015986:	d3f1      	bcc.n	801596c <uxr_write_framed_msg+0x1ec>
 8015988:	d1b7      	bne.n	80158fa <uxr_write_framed_msg+0x17a>
 801598a:	f884 8062 	strb.w	r8, [r4, #98]	; 0x62
 801598e:	e7d1      	b.n	8015934 <uxr_write_framed_msg+0x1b4>
 8015990:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8015994:	b19a      	cbz	r2, 80159be <uxr_write_framed_msg+0x23e>
 8015996:	2500      	movs	r5, #0
 8015998:	e001      	b.n	801599e <uxr_write_framed_msg+0x21e>
 801599a:	2800      	cmp	r0, #0
 801599c:	d0ad      	beq.n	80158fa <uxr_write_framed_msg+0x17a>
 801599e:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80159a2:	1b52      	subs	r2, r2, r5
 80159a4:	4653      	mov	r3, sl
 80159a6:	4638      	mov	r0, r7
 80159a8:	4421      	add	r1, r4
 80159aa:	47b0      	blx	r6
 80159ac:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80159b0:	4405      	add	r5, r0
 80159b2:	4295      	cmp	r5, r2
 80159b4:	d3f1      	bcc.n	801599a <uxr_write_framed_msg+0x21a>
 80159b6:	d1a0      	bne.n	80158fa <uxr_write_framed_msg+0x17a>
 80159b8:	2300      	movs	r3, #0
 80159ba:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80159be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80159c0:	b298      	uxth	r0, r3
 80159c2:	b003      	add	sp, #12
 80159c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159c8:	f04f 0300 	mov.w	r3, #0
 80159cc:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80159d0:	e72a      	b.n	8015828 <uxr_write_framed_msg+0xa8>
 80159d2:	217d      	movs	r1, #125	; 0x7d
 80159d4:	f082 0220 	eor.w	r2, r2, #32
 80159d8:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 80159dc:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 80159e0:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 80159e4:	2203      	movs	r2, #3
 80159e6:	2901      	cmp	r1, #1
 80159e8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80159ec:	d803      	bhi.n	80159f6 <uxr_write_framed_msg+0x276>
 80159ee:	2105      	movs	r1, #5
 80159f0:	f04f 0c04 	mov.w	ip, #4
 80159f4:	e737      	b.n	8015866 <uxr_write_framed_msg+0xe6>
 80159f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80159f8:	2104      	movs	r1, #4
 80159fa:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 80159fe:	b2dd      	uxtb	r5, r3
 8015a00:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8015a04:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 8015a08:	2a01      	cmp	r2, #1
 8015a0a:	f63f aee1 	bhi.w	80157d0 <uxr_write_framed_msg+0x50>
 8015a0e:	e73c      	b.n	801588a <uxr_write_framed_msg+0x10a>
 8015a10:	0801bb10 	.word	0x0801bb10

08015a14 <uxr_framing_read_transport>:
 8015a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a18:	4604      	mov	r4, r0
 8015a1a:	b085      	sub	sp, #20
 8015a1c:	4692      	mov	sl, r2
 8015a1e:	4689      	mov	r9, r1
 8015a20:	461d      	mov	r5, r3
 8015a22:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8015a24:	f000 fca6 	bl	8016374 <uxr_millis>
 8015a28:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8015a2c:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 8015a30:	4680      	mov	r8, r0
 8015a32:	42ba      	cmp	r2, r7
 8015a34:	d05f      	beq.n	8015af6 <uxr_framing_read_transport+0xe2>
 8015a36:	d817      	bhi.n	8015a68 <uxr_framing_read_transport+0x54>
 8015a38:	3f01      	subs	r7, #1
 8015a3a:	1aba      	subs	r2, r7, r2
 8015a3c:	2700      	movs	r7, #0
 8015a3e:	b2d2      	uxtb	r2, r2
 8015a40:	42b2      	cmp	r2, r6
 8015a42:	d81a      	bhi.n	8015a7a <uxr_framing_read_transport+0x66>
 8015a44:	19d3      	adds	r3, r2, r7
 8015a46:	42b3      	cmp	r3, r6
 8015a48:	d852      	bhi.n	8015af0 <uxr_framing_read_transport+0xdc>
 8015a4a:	b9d2      	cbnz	r2, 8015a82 <uxr_framing_read_transport+0x6e>
 8015a4c:	2600      	movs	r6, #0
 8015a4e:	f000 fc91 	bl	8016374 <uxr_millis>
 8015a52:	682b      	ldr	r3, [r5, #0]
 8015a54:	eba0 0008 	sub.w	r0, r0, r8
 8015a58:	1a1b      	subs	r3, r3, r0
 8015a5a:	4630      	mov	r0, r6
 8015a5c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015a60:	602b      	str	r3, [r5, #0]
 8015a62:	b005      	add	sp, #20
 8015a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a68:	2f00      	cmp	r7, #0
 8015a6a:	d060      	beq.n	8015b2e <uxr_framing_read_transport+0x11a>
 8015a6c:	f1c2 022a 	rsb	r2, r2, #42	; 0x2a
 8015a70:	3f01      	subs	r7, #1
 8015a72:	b2d2      	uxtb	r2, r2
 8015a74:	b2ff      	uxtb	r7, r7
 8015a76:	42b2      	cmp	r2, r6
 8015a78:	d9e4      	bls.n	8015a44 <uxr_framing_read_transport+0x30>
 8015a7a:	b2f2      	uxtb	r2, r6
 8015a7c:	2700      	movs	r7, #0
 8015a7e:	2a00      	cmp	r2, #0
 8015a80:	d0e4      	beq.n	8015a4c <uxr_framing_read_transport+0x38>
 8015a82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015a84:	4650      	mov	r0, sl
 8015a86:	9203      	str	r2, [sp, #12]
 8015a88:	9300      	str	r3, [sp, #0]
 8015a8a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8015a8e:	682b      	ldr	r3, [r5, #0]
 8015a90:	3102      	adds	r1, #2
 8015a92:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 8015b38 <uxr_framing_read_transport+0x124>
 8015a96:	4421      	add	r1, r4
 8015a98:	47c8      	blx	r9
 8015a9a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8015a9e:	4606      	mov	r6, r0
 8015aa0:	4403      	add	r3, r0
 8015aa2:	0859      	lsrs	r1, r3, #1
 8015aa4:	fbab 2101 	umull	r2, r1, fp, r1
 8015aa8:	222a      	movs	r2, #42	; 0x2a
 8015aaa:	0889      	lsrs	r1, r1, #2
 8015aac:	fb02 3111 	mls	r1, r2, r1, r3
 8015ab0:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8015ab4:	2800      	cmp	r0, #0
 8015ab6:	d0c9      	beq.n	8015a4c <uxr_framing_read_transport+0x38>
 8015ab8:	9a03      	ldr	r2, [sp, #12]
 8015aba:	4290      	cmp	r0, r2
 8015abc:	d1c7      	bne.n	8015a4e <uxr_framing_read_transport+0x3a>
 8015abe:	2f00      	cmp	r7, #0
 8015ac0:	d0c5      	beq.n	8015a4e <uxr_framing_read_transport+0x3a>
 8015ac2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015ac4:	3102      	adds	r1, #2
 8015ac6:	463a      	mov	r2, r7
 8015ac8:	4650      	mov	r0, sl
 8015aca:	4421      	add	r1, r4
 8015acc:	9300      	str	r3, [sp, #0]
 8015ace:	2300      	movs	r3, #0
 8015ad0:	47c8      	blx	r9
 8015ad2:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8015ad6:	4406      	add	r6, r0
 8015ad8:	1813      	adds	r3, r2, r0
 8015ada:	085a      	lsrs	r2, r3, #1
 8015adc:	fbab 1b02 	umull	r1, fp, fp, r2
 8015ae0:	222a      	movs	r2, #42	; 0x2a
 8015ae2:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 8015ae6:	fb02 331b 	mls	r3, r2, fp, r3
 8015aea:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8015aee:	e7ae      	b.n	8015a4e <uxr_framing_read_transport+0x3a>
 8015af0:	1ab6      	subs	r6, r6, r2
 8015af2:	b2f7      	uxtb	r7, r6
 8015af4:	e7a9      	b.n	8015a4a <uxr_framing_read_transport+0x36>
 8015af6:	2300      	movs	r3, #0
 8015af8:	2e28      	cmp	r6, #40	; 0x28
 8015afa:	85a3      	strh	r3, [r4, #44]	; 0x2c
 8015afc:	d9bd      	bls.n	8015a7a <uxr_framing_read_transport+0x66>
 8015afe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015b00:	2229      	movs	r2, #41	; 0x29
 8015b02:	1ca1      	adds	r1, r4, #2
 8015b04:	4650      	mov	r0, sl
 8015b06:	9300      	str	r3, [sp, #0]
 8015b08:	682b      	ldr	r3, [r5, #0]
 8015b0a:	47c8      	blx	r9
 8015b0c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8015b10:	4606      	mov	r6, r0
 8015b12:	212a      	movs	r1, #42	; 0x2a
 8015b14:	4403      	add	r3, r0
 8015b16:	4808      	ldr	r0, [pc, #32]	; (8015b38 <uxr_framing_read_transport+0x124>)
 8015b18:	085a      	lsrs	r2, r3, #1
 8015b1a:	fba0 0202 	umull	r0, r2, r0, r2
 8015b1e:	0892      	lsrs	r2, r2, #2
 8015b20:	fb01 3312 	mls	r3, r1, r2, r3
 8015b24:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8015b28:	2e00      	cmp	r6, #0
 8015b2a:	d08f      	beq.n	8015a4c <uxr_framing_read_transport+0x38>
 8015b2c:	e78f      	b.n	8015a4e <uxr_framing_read_transport+0x3a>
 8015b2e:	f1c2 0229 	rsb	r2, r2, #41	; 0x29
 8015b32:	b2d2      	uxtb	r2, r2
 8015b34:	e784      	b.n	8015a40 <uxr_framing_read_transport+0x2c>
 8015b36:	bf00      	nop
 8015b38:	30c30c31 	.word	0x30c30c31

08015b3c <uxr_read_framed_msg>:
 8015b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b40:	461e      	mov	r6, r3
 8015b42:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8015b46:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8015b4a:	b083      	sub	sp, #12
 8015b4c:	4604      	mov	r4, r0
 8015b4e:	4688      	mov	r8, r1
 8015b50:	429d      	cmp	r5, r3
 8015b52:	4691      	mov	r9, r2
 8015b54:	f000 818c 	beq.w	8015e70 <uxr_read_framed_msg+0x334>
 8015b58:	7823      	ldrb	r3, [r4, #0]
 8015b5a:	4dc3      	ldr	r5, [pc, #780]	; (8015e68 <uxr_read_framed_msg+0x32c>)
 8015b5c:	4fc3      	ldr	r7, [pc, #780]	; (8015e6c <uxr_read_framed_msg+0x330>)
 8015b5e:	2b07      	cmp	r3, #7
 8015b60:	d8fd      	bhi.n	8015b5e <uxr_read_framed_msg+0x22>
 8015b62:	e8df f013 	tbh	[pc, r3, lsl #1]
 8015b66:	011c      	.short	0x011c
 8015b68:	00d900fb 	.word	0x00d900fb
 8015b6c:	008f00ba 	.word	0x008f00ba
 8015b70:	00320051 	.word	0x00320051
 8015b74:	0008      	.short	0x0008
 8015b76:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8015b7a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8015b7e:	4299      	cmp	r1, r3
 8015b80:	f000 814d 	beq.w	8015e1e <uxr_read_framed_msg+0x2e2>
 8015b84:	18e2      	adds	r2, r4, r3
 8015b86:	7892      	ldrb	r2, [r2, #2]
 8015b88:	2a7d      	cmp	r2, #125	; 0x7d
 8015b8a:	f000 81b8 	beq.w	8015efe <uxr_read_framed_msg+0x3c2>
 8015b8e:	3301      	adds	r3, #1
 8015b90:	212a      	movs	r1, #42	; 0x2a
 8015b92:	2a7e      	cmp	r2, #126	; 0x7e
 8015b94:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8015b98:	fba5 c000 	umull	ip, r0, r5, r0
 8015b9c:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8015ba0:	fb01 3310 	mls	r3, r1, r0, r3
 8015ba4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015ba8:	f000 8257 	beq.w	801605a <uxr_read_framed_msg+0x51e>
 8015bac:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8015bae:	2000      	movs	r0, #0
 8015bb0:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8015bb2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8015bb6:	7020      	strb	r0, [r4, #0]
 8015bb8:	b29b      	uxth	r3, r3
 8015bba:	4299      	cmp	r1, r3
 8015bbc:	86a3      	strh	r3, [r4, #52]	; 0x34
 8015bbe:	f000 8178 	beq.w	8015eb2 <uxr_read_framed_msg+0x376>
 8015bc2:	2000      	movs	r0, #0
 8015bc4:	b003      	add	sp, #12
 8015bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bca:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8015bce:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8015bd2:	4298      	cmp	r0, r3
 8015bd4:	f000 8132 	beq.w	8015e3c <uxr_read_framed_msg+0x300>
 8015bd8:	18e2      	adds	r2, r4, r3
 8015bda:	7891      	ldrb	r1, [r2, #2]
 8015bdc:	297d      	cmp	r1, #125	; 0x7d
 8015bde:	f000 8170 	beq.w	8015ec2 <uxr_read_framed_msg+0x386>
 8015be2:	3301      	adds	r3, #1
 8015be4:	202a      	movs	r0, #42	; 0x2a
 8015be6:	297e      	cmp	r1, #126	; 0x7e
 8015be8:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8015bec:	fba5 c202 	umull	ip, r2, r5, r2
 8015bf0:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015bf4:	fb00 3312 	mls	r3, r0, r2, r3
 8015bf8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015bfc:	f000 821d 	beq.w	801603a <uxr_read_framed_msg+0x4fe>
 8015c00:	2307      	movs	r3, #7
 8015c02:	86a1      	strh	r1, [r4, #52]	; 0x34
 8015c04:	7023      	strb	r3, [r4, #0]
 8015c06:	e7aa      	b.n	8015b5e <uxr_read_framed_msg+0x22>
 8015c08:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8015c0a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8015c0e:	459e      	cmp	lr, r3
 8015c10:	d827      	bhi.n	8015c62 <uxr_read_framed_msg+0x126>
 8015c12:	e032      	b.n	8015c7a <uxr_read_framed_msg+0x13e>
 8015c14:	fba5 b101 	umull	fp, r1, r5, r1
 8015c18:	f89c c002 	ldrb.w	ip, [ip, #2]
 8015c1c:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 8015c20:	0889      	lsrs	r1, r1, #2
 8015c22:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 8015c26:	fb0b 0111 	mls	r1, fp, r1, r0
 8015c2a:	f000 80d4 	beq.w	8015dd6 <uxr_read_framed_msg+0x29a>
 8015c2e:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8015c32:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 8015c36:	f000 80cb 	beq.w	8015dd0 <uxr_read_framed_msg+0x294>
 8015c3a:	f806 c003 	strb.w	ip, [r6, r3]
 8015c3e:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8015c40:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8015c42:	ea80 010c 	eor.w	r1, r0, ip
 8015c46:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8015c4a:	3301      	adds	r3, #1
 8015c4c:	b2c9      	uxtb	r1, r1
 8015c4e:	b29b      	uxth	r3, r3
 8015c50:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 8015c54:	4573      	cmp	r3, lr
 8015c56:	8663      	strh	r3, [r4, #50]	; 0x32
 8015c58:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8015c5c:	86e2      	strh	r2, [r4, #54]	; 0x36
 8015c5e:	f080 811d 	bcs.w	8015e9c <uxr_read_framed_msg+0x360>
 8015c62:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8015c66:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8015c6a:	1c50      	adds	r0, r2, #1
 8015c6c:	eb04 0c02 	add.w	ip, r4, r2
 8015c70:	4592      	cmp	sl, r2
 8015c72:	ea4f 0150 	mov.w	r1, r0, lsr #1
 8015c76:	d1cd      	bne.n	8015c14 <uxr_read_framed_msg+0xd8>
 8015c78:	459e      	cmp	lr, r3
 8015c7a:	f040 8114 	bne.w	8015ea6 <uxr_read_framed_msg+0x36a>
 8015c7e:	2306      	movs	r3, #6
 8015c80:	7023      	strb	r3, [r4, #0]
 8015c82:	e76c      	b.n	8015b5e <uxr_read_framed_msg+0x22>
 8015c84:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8015c88:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8015c8c:	4298      	cmp	r0, r3
 8015c8e:	f000 80c6 	beq.w	8015e1e <uxr_read_framed_msg+0x2e2>
 8015c92:	18e2      	adds	r2, r4, r3
 8015c94:	7891      	ldrb	r1, [r2, #2]
 8015c96:	297d      	cmp	r1, #125	; 0x7d
 8015c98:	f000 8193 	beq.w	8015fc2 <uxr_read_framed_msg+0x486>
 8015c9c:	3301      	adds	r3, #1
 8015c9e:	202a      	movs	r0, #42	; 0x2a
 8015ca0:	297e      	cmp	r1, #126	; 0x7e
 8015ca2:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8015ca6:	fba5 c202 	umull	ip, r2, r5, r2
 8015caa:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015cae:	fb00 3312 	mls	r3, r0, r2, r3
 8015cb2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015cb6:	f000 81d0 	beq.w	801605a <uxr_read_framed_msg+0x51e>
 8015cba:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8015cbc:	2000      	movs	r0, #0
 8015cbe:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8015cc2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015cc4:	8660      	strh	r0, [r4, #50]	; 0x32
 8015cc6:	b29b      	uxth	r3, r3
 8015cc8:	86e0      	strh	r0, [r4, #54]	; 0x36
 8015cca:	428b      	cmp	r3, r1
 8015ccc:	8623      	strh	r3, [r4, #48]	; 0x30
 8015cce:	f240 80e2 	bls.w	8015e96 <uxr_read_framed_msg+0x35a>
 8015cd2:	7020      	strb	r0, [r4, #0]
 8015cd4:	b003      	add	sp, #12
 8015cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cda:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8015cde:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8015ce2:	4298      	cmp	r0, r3
 8015ce4:	f000 80aa 	beq.w	8015e3c <uxr_read_framed_msg+0x300>
 8015ce8:	18e2      	adds	r2, r4, r3
 8015cea:	7891      	ldrb	r1, [r2, #2]
 8015cec:	297d      	cmp	r1, #125	; 0x7d
 8015cee:	f000 8186 	beq.w	8015ffe <uxr_read_framed_msg+0x4c2>
 8015cf2:	3301      	adds	r3, #1
 8015cf4:	202a      	movs	r0, #42	; 0x2a
 8015cf6:	297e      	cmp	r1, #126	; 0x7e
 8015cf8:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8015cfc:	fba5 c202 	umull	ip, r2, r5, r2
 8015d00:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015d04:	fb00 3312 	mls	r3, r0, r2, r3
 8015d08:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015d0c:	f000 8195 	beq.w	801603a <uxr_read_framed_msg+0x4fe>
 8015d10:	2304      	movs	r3, #4
 8015d12:	8621      	strh	r1, [r4, #48]	; 0x30
 8015d14:	7023      	strb	r3, [r4, #0]
 8015d16:	e722      	b.n	8015b5e <uxr_read_framed_msg+0x22>
 8015d18:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8015d1c:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8015d20:	4290      	cmp	r0, r2
 8015d22:	f000 80b4 	beq.w	8015e8e <uxr_read_framed_msg+0x352>
 8015d26:	18a3      	adds	r3, r4, r2
 8015d28:	7899      	ldrb	r1, [r3, #2]
 8015d2a:	297d      	cmp	r1, #125	; 0x7d
 8015d2c:	f000 8107 	beq.w	8015f3e <uxr_read_framed_msg+0x402>
 8015d30:	3201      	adds	r2, #1
 8015d32:	232a      	movs	r3, #42	; 0x2a
 8015d34:	297e      	cmp	r1, #126	; 0x7e
 8015d36:	ea4f 0052 	mov.w	r0, r2, lsr #1
 8015d3a:	fba5 c000 	umull	ip, r0, r5, r0
 8015d3e:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8015d42:	fb03 2210 	mls	r2, r3, r0, r2
 8015d46:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8015d4a:	f000 818a 	beq.w	8016062 <uxr_read_framed_msg+0x526>
 8015d4e:	7863      	ldrb	r3, [r4, #1]
 8015d50:	428b      	cmp	r3, r1
 8015d52:	bf0c      	ite	eq
 8015d54:	2303      	moveq	r3, #3
 8015d56:	2300      	movne	r3, #0
 8015d58:	7023      	strb	r3, [r4, #0]
 8015d5a:	e700      	b.n	8015b5e <uxr_read_framed_msg+0x22>
 8015d5c:	2300      	movs	r3, #0
 8015d5e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8015d62:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8015d66:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8015d6a:	4299      	cmp	r1, r3
 8015d6c:	d06a      	beq.n	8015e44 <uxr_read_framed_msg+0x308>
 8015d6e:	18e2      	adds	r2, r4, r3
 8015d70:	7890      	ldrb	r0, [r2, #2]
 8015d72:	287d      	cmp	r0, #125	; 0x7d
 8015d74:	f000 8100 	beq.w	8015f78 <uxr_read_framed_msg+0x43c>
 8015d78:	3301      	adds	r3, #1
 8015d7a:	212a      	movs	r1, #42	; 0x2a
 8015d7c:	287e      	cmp	r0, #126	; 0x7e
 8015d7e:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 8015d82:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8015d86:	fba5 c202 	umull	ip, r2, r5, r2
 8015d8a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015d8e:	fb01 3312 	mls	r3, r1, r2, r3
 8015d92:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015d96:	d055      	beq.n	8015e44 <uxr_read_framed_msg+0x308>
 8015d98:	2302      	movs	r3, #2
 8015d9a:	7023      	strb	r3, [r4, #0]
 8015d9c:	e6df      	b.n	8015b5e <uxr_read_framed_msg+0x22>
 8015d9e:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
 8015da2:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 8015da6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8015daa:	1c5a      	adds	r2, r3, #1
 8015dac:	459c      	cmp	ip, r3
 8015dae:	eb04 0103 	add.w	r1, r4, r3
 8015db2:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8015db6:	f43f af04 	beq.w	8015bc2 <uxr_read_framed_msg+0x86>
 8015dba:	fba5 0303 	umull	r0, r3, r5, r3
 8015dbe:	7889      	ldrb	r1, [r1, #2]
 8015dc0:	089b      	lsrs	r3, r3, #2
 8015dc2:	297e      	cmp	r1, #126	; 0x7e
 8015dc4:	fb0e 2313 	mls	r3, lr, r3, r2
 8015dc8:	b2db      	uxtb	r3, r3
 8015dca:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015dce:	d1ec      	bne.n	8015daa <uxr_read_framed_msg+0x26e>
 8015dd0:	2301      	movs	r3, #1
 8015dd2:	7023      	strb	r3, [r4, #0]
 8015dd4:	e6c3      	b.n	8015b5e <uxr_read_framed_msg+0x22>
 8015dd6:	1c50      	adds	r0, r2, #1
 8015dd8:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 8015ddc:	3202      	adds	r2, #2
 8015dde:	0841      	lsrs	r1, r0, #1
 8015de0:	fba5 c101 	umull	ip, r1, r5, r1
 8015de4:	0889      	lsrs	r1, r1, #2
 8015de6:	fb0b 0111 	mls	r1, fp, r1, r0
 8015dea:	1860      	adds	r0, r4, r1
 8015dec:	b2c9      	uxtb	r1, r1
 8015dee:	458a      	cmp	sl, r1
 8015df0:	f43f af42 	beq.w	8015c78 <uxr_read_framed_msg+0x13c>
 8015df4:	0851      	lsrs	r1, r2, #1
 8015df6:	7880      	ldrb	r0, [r0, #2]
 8015df8:	fba5 a101 	umull	sl, r1, r5, r1
 8015dfc:	287e      	cmp	r0, #126	; 0x7e
 8015dfe:	f080 0c20 	eor.w	ip, r0, #32
 8015e02:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8015e06:	fb0b 2211 	mls	r2, fp, r1, r2
 8015e0a:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8015e0e:	f47f af14 	bne.w	8015c3a <uxr_read_framed_msg+0xfe>
 8015e12:	459e      	cmp	lr, r3
 8015e14:	f43f af33 	beq.w	8015c7e <uxr_read_framed_msg+0x142>
 8015e18:	2301      	movs	r3, #1
 8015e1a:	7023      	strb	r3, [r4, #0]
 8015e1c:	e69f      	b.n	8015b5e <uxr_read_framed_msg+0x22>
 8015e1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015e20:	9300      	str	r3, [sp, #0]
 8015e22:	2301      	movs	r3, #1
 8015e24:	9301      	str	r3, [sp, #4]
 8015e26:	464a      	mov	r2, r9
 8015e28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015e2a:	4641      	mov	r1, r8
 8015e2c:	4620      	mov	r0, r4
 8015e2e:	f7ff fdf1 	bl	8015a14 <uxr_framing_read_transport>
 8015e32:	2800      	cmp	r0, #0
 8015e34:	f43f aec5 	beq.w	8015bc2 <uxr_read_framed_msg+0x86>
 8015e38:	7823      	ldrb	r3, [r4, #0]
 8015e3a:	e690      	b.n	8015b5e <uxr_read_framed_msg+0x22>
 8015e3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015e3e:	9300      	str	r3, [sp, #0]
 8015e40:	2302      	movs	r3, #2
 8015e42:	e7ef      	b.n	8015e24 <uxr_read_framed_msg+0x2e8>
 8015e44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015e46:	464a      	mov	r2, r9
 8015e48:	4641      	mov	r1, r8
 8015e4a:	4620      	mov	r0, r4
 8015e4c:	9300      	str	r3, [sp, #0]
 8015e4e:	2304      	movs	r3, #4
 8015e50:	9301      	str	r3, [sp, #4]
 8015e52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015e54:	f7ff fdde 	bl	8015a14 <uxr_framing_read_transport>
 8015e58:	2800      	cmp	r0, #0
 8015e5a:	d1ed      	bne.n	8015e38 <uxr_read_framed_msg+0x2fc>
 8015e5c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8015e60:	2b7e      	cmp	r3, #126	; 0x7e
 8015e62:	d0e9      	beq.n	8015e38 <uxr_read_framed_msg+0x2fc>
 8015e64:	e6ad      	b.n	8015bc2 <uxr_read_framed_msg+0x86>
 8015e66:	bf00      	nop
 8015e68:	30c30c31 	.word	0x30c30c31
 8015e6c:	0801bb10 	.word	0x0801bb10
 8015e70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015e72:	9300      	str	r3, [sp, #0]
 8015e74:	2305      	movs	r3, #5
 8015e76:	9301      	str	r3, [sp, #4]
 8015e78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015e7a:	f7ff fdcb 	bl	8015a14 <uxr_framing_read_transport>
 8015e7e:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8015e82:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8015e86:	429a      	cmp	r2, r3
 8015e88:	f43f ae9b 	beq.w	8015bc2 <uxr_read_framed_msg+0x86>
 8015e8c:	e664      	b.n	8015b58 <uxr_read_framed_msg+0x1c>
 8015e8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015e90:	9300      	str	r3, [sp, #0]
 8015e92:	2303      	movs	r3, #3
 8015e94:	e7c6      	b.n	8015e24 <uxr_read_framed_msg+0x2e8>
 8015e96:	2305      	movs	r3, #5
 8015e98:	7023      	strb	r3, [r4, #0]
 8015e9a:	e660      	b.n	8015b5e <uxr_read_framed_msg+0x22>
 8015e9c:	f43f aeef 	beq.w	8015c7e <uxr_read_framed_msg+0x142>
 8015ea0:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8015ea4:	d094      	beq.n	8015dd0 <uxr_read_framed_msg+0x294>
 8015ea6:	ebae 0303 	sub.w	r3, lr, r3
 8015eaa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015eac:	3302      	adds	r3, #2
 8015eae:	9200      	str	r2, [sp, #0]
 8015eb0:	e7b8      	b.n	8015e24 <uxr_read_framed_msg+0x2e8>
 8015eb2:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8015eb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015eb8:	7013      	strb	r3, [r2, #0]
 8015eba:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8015ebc:	b003      	add	sp, #12
 8015ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ec2:	1c59      	adds	r1, r3, #1
 8015ec4:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8015ec8:	084a      	lsrs	r2, r1, #1
 8015eca:	fba5 e202 	umull	lr, r2, r5, r2
 8015ece:	0892      	lsrs	r2, r2, #2
 8015ed0:	fb0c 1212 	mls	r2, ip, r2, r1
 8015ed4:	b2d1      	uxtb	r1, r2
 8015ed6:	4288      	cmp	r0, r1
 8015ed8:	d0b0      	beq.n	8015e3c <uxr_read_framed_msg+0x300>
 8015eda:	3302      	adds	r3, #2
 8015edc:	4422      	add	r2, r4
 8015ede:	7891      	ldrb	r1, [r2, #2]
 8015ee0:	085a      	lsrs	r2, r3, #1
 8015ee2:	fba5 0202 	umull	r0, r2, r5, r2
 8015ee6:	297e      	cmp	r1, #126	; 0x7e
 8015ee8:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015eec:	fb0c 3312 	mls	r3, ip, r2, r3
 8015ef0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015ef4:	f000 80a1 	beq.w	801603a <uxr_read_framed_msg+0x4fe>
 8015ef8:	f081 0120 	eor.w	r1, r1, #32
 8015efc:	e680      	b.n	8015c00 <uxr_read_framed_msg+0xc4>
 8015efe:	f103 0c01 	add.w	ip, r3, #1
 8015f02:	202a      	movs	r0, #42	; 0x2a
 8015f04:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8015f08:	fba5 e202 	umull	lr, r2, r5, r2
 8015f0c:	0892      	lsrs	r2, r2, #2
 8015f0e:	fb00 c212 	mls	r2, r0, r2, ip
 8015f12:	fa5f fc82 	uxtb.w	ip, r2
 8015f16:	4561      	cmp	r1, ip
 8015f18:	d081      	beq.n	8015e1e <uxr_read_framed_msg+0x2e2>
 8015f1a:	3302      	adds	r3, #2
 8015f1c:	4422      	add	r2, r4
 8015f1e:	0859      	lsrs	r1, r3, #1
 8015f20:	7892      	ldrb	r2, [r2, #2]
 8015f22:	fba5 c101 	umull	ip, r1, r5, r1
 8015f26:	2a7e      	cmp	r2, #126	; 0x7e
 8015f28:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8015f2c:	fb00 3311 	mls	r3, r0, r1, r3
 8015f30:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015f34:	f000 8091 	beq.w	801605a <uxr_read_framed_msg+0x51e>
 8015f38:	f082 0220 	eor.w	r2, r2, #32
 8015f3c:	e636      	b.n	8015bac <uxr_read_framed_msg+0x70>
 8015f3e:	1c51      	adds	r1, r2, #1
 8015f40:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8015f44:	084b      	lsrs	r3, r1, #1
 8015f46:	fba5 e303 	umull	lr, r3, r5, r3
 8015f4a:	089b      	lsrs	r3, r3, #2
 8015f4c:	fb0c 1313 	mls	r3, ip, r3, r1
 8015f50:	b2d9      	uxtb	r1, r3
 8015f52:	4288      	cmp	r0, r1
 8015f54:	d09b      	beq.n	8015e8e <uxr_read_framed_msg+0x352>
 8015f56:	3202      	adds	r2, #2
 8015f58:	4423      	add	r3, r4
 8015f5a:	0850      	lsrs	r0, r2, #1
 8015f5c:	789b      	ldrb	r3, [r3, #2]
 8015f5e:	fba5 1000 	umull	r1, r0, r5, r0
 8015f62:	2b7e      	cmp	r3, #126	; 0x7e
 8015f64:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8015f68:	fb0c 2210 	mls	r2, ip, r0, r2
 8015f6c:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8015f70:	d077      	beq.n	8016062 <uxr_read_framed_msg+0x526>
 8015f72:	f083 0120 	eor.w	r1, r3, #32
 8015f76:	e6ea      	b.n	8015d4e <uxr_read_framed_msg+0x212>
 8015f78:	f103 0c01 	add.w	ip, r3, #1
 8015f7c:	202a      	movs	r0, #42	; 0x2a
 8015f7e:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8015f82:	fba5 e202 	umull	lr, r2, r5, r2
 8015f86:	0892      	lsrs	r2, r2, #2
 8015f88:	fb00 c212 	mls	r2, r0, r2, ip
 8015f8c:	fa5f fc82 	uxtb.w	ip, r2
 8015f90:	4561      	cmp	r1, ip
 8015f92:	f43f af57 	beq.w	8015e44 <uxr_read_framed_msg+0x308>
 8015f96:	3302      	adds	r3, #2
 8015f98:	4422      	add	r2, r4
 8015f9a:	7891      	ldrb	r1, [r2, #2]
 8015f9c:	085a      	lsrs	r2, r3, #1
 8015f9e:	fba5 c202 	umull	ip, r2, r5, r2
 8015fa2:	297e      	cmp	r1, #126	; 0x7e
 8015fa4:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8015fa8:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015fac:	fb00 3312 	mls	r3, r0, r2, r3
 8015fb0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015fb4:	f43f af46 	beq.w	8015e44 <uxr_read_framed_msg+0x308>
 8015fb8:	f081 0120 	eor.w	r1, r1, #32
 8015fbc:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8015fc0:	e6ea      	b.n	8015d98 <uxr_read_framed_msg+0x25c>
 8015fc2:	1c59      	adds	r1, r3, #1
 8015fc4:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8015fc8:	084a      	lsrs	r2, r1, #1
 8015fca:	fba5 e202 	umull	lr, r2, r5, r2
 8015fce:	0892      	lsrs	r2, r2, #2
 8015fd0:	fb0c 1212 	mls	r2, ip, r2, r1
 8015fd4:	b2d1      	uxtb	r1, r2
 8015fd6:	4288      	cmp	r0, r1
 8015fd8:	f43f af21 	beq.w	8015e1e <uxr_read_framed_msg+0x2e2>
 8015fdc:	3302      	adds	r3, #2
 8015fde:	4422      	add	r2, r4
 8015fe0:	7891      	ldrb	r1, [r2, #2]
 8015fe2:	085a      	lsrs	r2, r3, #1
 8015fe4:	fba5 0202 	umull	r0, r2, r5, r2
 8015fe8:	297e      	cmp	r1, #126	; 0x7e
 8015fea:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015fee:	fb0c 3312 	mls	r3, ip, r2, r3
 8015ff2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015ff6:	d030      	beq.n	801605a <uxr_read_framed_msg+0x51e>
 8015ff8:	f081 0120 	eor.w	r1, r1, #32
 8015ffc:	e65d      	b.n	8015cba <uxr_read_framed_msg+0x17e>
 8015ffe:	1c59      	adds	r1, r3, #1
 8016000:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8016004:	084a      	lsrs	r2, r1, #1
 8016006:	fba5 e202 	umull	lr, r2, r5, r2
 801600a:	0892      	lsrs	r2, r2, #2
 801600c:	fb0c 1212 	mls	r2, ip, r2, r1
 8016010:	b2d1      	uxtb	r1, r2
 8016012:	4288      	cmp	r0, r1
 8016014:	f43f af12 	beq.w	8015e3c <uxr_read_framed_msg+0x300>
 8016018:	3302      	adds	r3, #2
 801601a:	4422      	add	r2, r4
 801601c:	7891      	ldrb	r1, [r2, #2]
 801601e:	085a      	lsrs	r2, r3, #1
 8016020:	fba5 0202 	umull	r0, r2, r5, r2
 8016024:	297e      	cmp	r1, #126	; 0x7e
 8016026:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801602a:	fb0c 3312 	mls	r3, ip, r2, r3
 801602e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016032:	d002      	beq.n	801603a <uxr_read_framed_msg+0x4fe>
 8016034:	f081 0120 	eor.w	r1, r1, #32
 8016038:	e66a      	b.n	8015d10 <uxr_read_framed_msg+0x1d4>
 801603a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801603c:	9300      	str	r3, [sp, #0]
 801603e:	2302      	movs	r3, #2
 8016040:	9301      	str	r3, [sp, #4]
 8016042:	464a      	mov	r2, r9
 8016044:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016046:	4641      	mov	r1, r8
 8016048:	4620      	mov	r0, r4
 801604a:	f7ff fce3 	bl	8015a14 <uxr_framing_read_transport>
 801604e:	2800      	cmp	r0, #0
 8016050:	f47f aef2 	bne.w	8015e38 <uxr_read_framed_msg+0x2fc>
 8016054:	2301      	movs	r3, #1
 8016056:	7023      	strb	r3, [r4, #0]
 8016058:	e581      	b.n	8015b5e <uxr_read_framed_msg+0x22>
 801605a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801605c:	9300      	str	r3, [sp, #0]
 801605e:	2301      	movs	r3, #1
 8016060:	e7ee      	b.n	8016040 <uxr_read_framed_msg+0x504>
 8016062:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016064:	9300      	str	r3, [sp, #0]
 8016066:	2303      	movs	r3, #3
 8016068:	e7ea      	b.n	8016040 <uxr_read_framed_msg+0x504>
 801606a:	bf00      	nop

0801606c <uxr_stream_id>:
 801606c:	2901      	cmp	r1, #1
 801606e:	4684      	mov	ip, r0
 8016070:	b500      	push	{lr}
 8016072:	b083      	sub	sp, #12
 8016074:	d01f      	beq.n	80160b6 <uxr_stream_id+0x4a>
 8016076:	2902      	cmp	r1, #2
 8016078:	f04f 0e00 	mov.w	lr, #0
 801607c:	d020      	beq.n	80160c0 <uxr_stream_id+0x54>
 801607e:	2300      	movs	r3, #0
 8016080:	2000      	movs	r0, #0
 8016082:	f36e 0307 	bfi	r3, lr, #0, #8
 8016086:	f36c 230f 	bfi	r3, ip, #8, #8
 801608a:	f361 4317 	bfi	r3, r1, #16, #8
 801608e:	f362 631f 	bfi	r3, r2, #24, #8
 8016092:	fa5f fc83 	uxtb.w	ip, r3
 8016096:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801609a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801609e:	0e1b      	lsrs	r3, r3, #24
 80160a0:	f36c 0007 	bfi	r0, ip, #0, #8
 80160a4:	f361 200f 	bfi	r0, r1, #8, #8
 80160a8:	f362 4017 	bfi	r0, r2, #16, #8
 80160ac:	f363 601f 	bfi	r0, r3, #24, #8
 80160b0:	b003      	add	sp, #12
 80160b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80160b6:	f100 0e01 	add.w	lr, r0, #1
 80160ba:	fa5f fe8e 	uxtb.w	lr, lr
 80160be:	e7de      	b.n	801607e <uxr_stream_id+0x12>
 80160c0:	f080 0e80 	eor.w	lr, r0, #128	; 0x80
 80160c4:	e7db      	b.n	801607e <uxr_stream_id+0x12>
 80160c6:	bf00      	nop

080160c8 <uxr_stream_id_from_raw>:
 80160c8:	b082      	sub	sp, #8
 80160ca:	b130      	cbz	r0, 80160da <uxr_stream_id_from_raw+0x12>
 80160cc:	0603      	lsls	r3, r0, #24
 80160ce:	d421      	bmi.n	8016114 <uxr_stream_id_from_raw+0x4c>
 80160d0:	1e42      	subs	r2, r0, #1
 80160d2:	f04f 0c01 	mov.w	ip, #1
 80160d6:	b2d2      	uxtb	r2, r2
 80160d8:	e001      	b.n	80160de <uxr_stream_id_from_raw+0x16>
 80160da:	4684      	mov	ip, r0
 80160dc:	4602      	mov	r2, r0
 80160de:	2300      	movs	r3, #0
 80160e0:	f360 0307 	bfi	r3, r0, #0, #8
 80160e4:	2000      	movs	r0, #0
 80160e6:	f362 230f 	bfi	r3, r2, #8, #8
 80160ea:	f36c 4317 	bfi	r3, ip, #16, #8
 80160ee:	f361 631f 	bfi	r3, r1, #24, #8
 80160f2:	fa5f fc83 	uxtb.w	ip, r3
 80160f6:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80160fa:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80160fe:	0e1b      	lsrs	r3, r3, #24
 8016100:	f36c 0007 	bfi	r0, ip, #0, #8
 8016104:	f361 200f 	bfi	r0, r1, #8, #8
 8016108:	f362 4017 	bfi	r0, r2, #16, #8
 801610c:	f363 601f 	bfi	r0, r3, #24, #8
 8016110:	b002      	add	sp, #8
 8016112:	4770      	bx	lr
 8016114:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 8016118:	f04f 0c02 	mov.w	ip, #2
 801611c:	e7df      	b.n	80160de <uxr_stream_id_from_raw+0x16>
 801611e:	bf00      	nop

08016120 <uxr_init_stream_storage>:
 8016120:	2300      	movs	r3, #0
 8016122:	7403      	strb	r3, [r0, #16]
 8016124:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8016128:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 801612c:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8016130:	4770      	bx	lr
 8016132:	bf00      	nop

08016134 <uxr_reset_stream_storage>:
 8016134:	b570      	push	{r4, r5, r6, lr}
 8016136:	7c03      	ldrb	r3, [r0, #16]
 8016138:	4604      	mov	r4, r0
 801613a:	b14b      	cbz	r3, 8016150 <uxr_reset_stream_storage+0x1c>
 801613c:	4606      	mov	r6, r0
 801613e:	2500      	movs	r5, #0
 8016140:	4630      	mov	r0, r6
 8016142:	3501      	adds	r5, #1
 8016144:	f002 faf2 	bl	801872c <uxr_reset_output_best_effort_stream>
 8016148:	7c23      	ldrb	r3, [r4, #16]
 801614a:	3610      	adds	r6, #16
 801614c:	42ab      	cmp	r3, r5
 801614e:	d8f7      	bhi.n	8016140 <uxr_reset_stream_storage+0xc>
 8016150:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016154:	b15b      	cbz	r3, 801616e <uxr_reset_stream_storage+0x3a>
 8016156:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801615a:	2500      	movs	r5, #0
 801615c:	4630      	mov	r0, r6
 801615e:	3501      	adds	r5, #1
 8016160:	f002 f8ea 	bl	8018338 <uxr_reset_input_best_effort_stream>
 8016164:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016168:	3602      	adds	r6, #2
 801616a:	42ab      	cmp	r3, r5
 801616c:	d8f6      	bhi.n	801615c <uxr_reset_stream_storage+0x28>
 801616e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8016172:	b15b      	cbz	r3, 801618c <uxr_reset_stream_storage+0x58>
 8016174:	f104 0618 	add.w	r6, r4, #24
 8016178:	2500      	movs	r5, #0
 801617a:	4630      	mov	r0, r6
 801617c:	3501      	adds	r5, #1
 801617e:	f002 fb83 	bl	8018888 <uxr_reset_output_reliable_stream>
 8016182:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8016186:	3628      	adds	r6, #40	; 0x28
 8016188:	42ab      	cmp	r3, r5
 801618a:	d8f6      	bhi.n	801617a <uxr_reset_stream_storage+0x46>
 801618c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8016190:	b15b      	cbz	r3, 80161aa <uxr_reset_stream_storage+0x76>
 8016192:	f104 0648 	add.w	r6, r4, #72	; 0x48
 8016196:	2500      	movs	r5, #0
 8016198:	4630      	mov	r0, r6
 801619a:	3501      	adds	r5, #1
 801619c:	f002 f938 	bl	8018410 <uxr_reset_input_reliable_stream>
 80161a0:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80161a4:	3618      	adds	r6, #24
 80161a6:	42ab      	cmp	r3, r5
 80161a8:	d8f6      	bhi.n	8016198 <uxr_reset_stream_storage+0x64>
 80161aa:	bd70      	pop	{r4, r5, r6, pc}

080161ac <uxr_add_output_best_effort_buffer>:
 80161ac:	b510      	push	{r4, lr}
 80161ae:	7c04      	ldrb	r4, [r0, #16]
 80161b0:	b082      	sub	sp, #8
 80161b2:	f104 0c01 	add.w	ip, r4, #1
 80161b6:	f880 c010 	strb.w	ip, [r0, #16]
 80161ba:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80161be:	f002 faab 	bl	8018718 <uxr_init_output_best_effort_stream>
 80161c2:	2201      	movs	r2, #1
 80161c4:	4620      	mov	r0, r4
 80161c6:	4611      	mov	r1, r2
 80161c8:	b002      	add	sp, #8
 80161ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80161ce:	f7ff bf4d 	b.w	801606c <uxr_stream_id>
 80161d2:	bf00      	nop

080161d4 <uxr_add_output_reliable_buffer>:
 80161d4:	b510      	push	{r4, lr}
 80161d6:	b084      	sub	sp, #16
 80161d8:	4684      	mov	ip, r0
 80161da:	2028      	movs	r0, #40	; 0x28
 80161dc:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80161e0:	9400      	str	r4, [sp, #0]
 80161e2:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 80161e6:	fb00 c004 	mla	r0, r0, r4, ip
 80161ea:	f104 0e01 	add.w	lr, r4, #1
 80161ee:	3018      	adds	r0, #24
 80161f0:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 80161f4:	f002 fb10 	bl	8018818 <uxr_init_output_reliable_stream>
 80161f8:	2201      	movs	r2, #1
 80161fa:	2102      	movs	r1, #2
 80161fc:	4620      	mov	r0, r4
 80161fe:	b004      	add	sp, #16
 8016200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016204:	f7ff bf32 	b.w	801606c <uxr_stream_id>

08016208 <uxr_add_input_best_effort_buffer>:
 8016208:	b510      	push	{r4, lr}
 801620a:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 801620e:	b082      	sub	sp, #8
 8016210:	1c62      	adds	r2, r4, #1
 8016212:	f104 0321 	add.w	r3, r4, #33	; 0x21
 8016216:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 801621a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801621e:	f002 f887 	bl	8018330 <uxr_init_input_best_effort_stream>
 8016222:	2200      	movs	r2, #0
 8016224:	2101      	movs	r1, #1
 8016226:	4620      	mov	r0, r4
 8016228:	b002      	add	sp, #8
 801622a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801622e:	f7ff bf1d 	b.w	801606c <uxr_stream_id>
 8016232:	bf00      	nop

08016234 <uxr_add_input_reliable_buffer>:
 8016234:	b510      	push	{r4, lr}
 8016236:	b084      	sub	sp, #16
 8016238:	4684      	mov	ip, r0
 801623a:	2018      	movs	r0, #24
 801623c:	9c06      	ldr	r4, [sp, #24]
 801623e:	9400      	str	r4, [sp, #0]
 8016240:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 8016244:	fb00 c004 	mla	r0, r0, r4, ip
 8016248:	f104 0e01 	add.w	lr, r4, #1
 801624c:	3048      	adds	r0, #72	; 0x48
 801624e:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 8016252:	f002 f8b7 	bl	80183c4 <uxr_init_input_reliable_stream>
 8016256:	2200      	movs	r2, #0
 8016258:	2102      	movs	r1, #2
 801625a:	4620      	mov	r0, r4
 801625c:	b004      	add	sp, #16
 801625e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016262:	f7ff bf03 	b.w	801606c <uxr_stream_id>
 8016266:	bf00      	nop

08016268 <uxr_get_output_best_effort_stream>:
 8016268:	7c03      	ldrb	r3, [r0, #16]
 801626a:	428b      	cmp	r3, r1
 801626c:	bf8c      	ite	hi
 801626e:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8016272:	2000      	movls	r0, #0
 8016274:	4770      	bx	lr
 8016276:	bf00      	nop

08016278 <uxr_get_output_reliable_stream>:
 8016278:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 801627c:	428b      	cmp	r3, r1
 801627e:	d904      	bls.n	801628a <uxr_get_output_reliable_stream+0x12>
 8016280:	2328      	movs	r3, #40	; 0x28
 8016282:	fb03 0001 	mla	r0, r3, r1, r0
 8016286:	3018      	adds	r0, #24
 8016288:	4770      	bx	lr
 801628a:	2000      	movs	r0, #0
 801628c:	4770      	bx	lr
 801628e:	bf00      	nop

08016290 <uxr_get_input_best_effort_stream>:
 8016290:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8016294:	428b      	cmp	r3, r1
 8016296:	d903      	bls.n	80162a0 <uxr_get_input_best_effort_stream+0x10>
 8016298:	3121      	adds	r1, #33	; 0x21
 801629a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801629e:	4770      	bx	lr
 80162a0:	2000      	movs	r0, #0
 80162a2:	4770      	bx	lr

080162a4 <uxr_get_input_reliable_stream>:
 80162a4:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 80162a8:	428b      	cmp	r3, r1
 80162aa:	d904      	bls.n	80162b6 <uxr_get_input_reliable_stream+0x12>
 80162ac:	2318      	movs	r3, #24
 80162ae:	fb03 0001 	mla	r0, r3, r1, r0
 80162b2:	3048      	adds	r0, #72	; 0x48
 80162b4:	4770      	bx	lr
 80162b6:	2000      	movs	r0, #0
 80162b8:	4770      	bx	lr
 80162ba:	bf00      	nop

080162bc <uxr_output_streams_confirmed>:
 80162bc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80162c0:	b183      	cbz	r3, 80162e4 <uxr_output_streams_confirmed+0x28>
 80162c2:	b570      	push	{r4, r5, r6, lr}
 80162c4:	4606      	mov	r6, r0
 80162c6:	f100 0518 	add.w	r5, r0, #24
 80162ca:	2400      	movs	r4, #0
 80162cc:	e000      	b.n	80162d0 <uxr_output_streams_confirmed+0x14>
 80162ce:	b140      	cbz	r0, 80162e2 <uxr_output_streams_confirmed+0x26>
 80162d0:	4628      	mov	r0, r5
 80162d2:	3401      	adds	r4, #1
 80162d4:	f002 fd4c 	bl	8018d70 <uxr_is_output_up_to_date>
 80162d8:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 80162dc:	3528      	adds	r5, #40	; 0x28
 80162de:	42a3      	cmp	r3, r4
 80162e0:	d8f5      	bhi.n	80162ce <uxr_output_streams_confirmed+0x12>
 80162e2:	bd70      	pop	{r4, r5, r6, pc}
 80162e4:	2001      	movs	r0, #1
 80162e6:	4770      	bx	lr

080162e8 <uxr_buffer_submessage_header>:
 80162e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162ea:	460e      	mov	r6, r1
 80162ec:	2104      	movs	r1, #4
 80162ee:	4604      	mov	r4, r0
 80162f0:	4615      	mov	r5, r2
 80162f2:	461f      	mov	r7, r3
 80162f4:	f7f7 fdcc 	bl	800de90 <ucdr_align_to>
 80162f8:	2301      	movs	r3, #1
 80162fa:	4631      	mov	r1, r6
 80162fc:	4620      	mov	r0, r4
 80162fe:	ea47 0203 	orr.w	r2, r7, r3
 8016302:	7523      	strb	r3, [r4, #20]
 8016304:	462b      	mov	r3, r5
 8016306:	f000 fa29 	bl	801675c <uxr_serialize_submessage_header>
 801630a:	4620      	mov	r0, r4
 801630c:	f7f7 fdd6 	bl	800debc <ucdr_buffer_remaining>
 8016310:	42a8      	cmp	r0, r5
 8016312:	bf34      	ite	cc
 8016314:	2000      	movcc	r0, #0
 8016316:	2001      	movcs	r0, #1
 8016318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801631a:	bf00      	nop

0801631c <uxr_read_submessage_header>:
 801631c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016320:	4604      	mov	r4, r0
 8016322:	460d      	mov	r5, r1
 8016324:	2104      	movs	r1, #4
 8016326:	4616      	mov	r6, r2
 8016328:	4698      	mov	r8, r3
 801632a:	f7f7 fdb1 	bl	800de90 <ucdr_align_to>
 801632e:	4620      	mov	r0, r4
 8016330:	f7f7 fdc4 	bl	800debc <ucdr_buffer_remaining>
 8016334:	2803      	cmp	r0, #3
 8016336:	bf8c      	ite	hi
 8016338:	2701      	movhi	r7, #1
 801633a:	2700      	movls	r7, #0
 801633c:	d802      	bhi.n	8016344 <uxr_read_submessage_header+0x28>
 801633e:	4638      	mov	r0, r7
 8016340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016344:	4633      	mov	r3, r6
 8016346:	4642      	mov	r2, r8
 8016348:	4620      	mov	r0, r4
 801634a:	4629      	mov	r1, r5
 801634c:	f000 fa1a 	bl	8016784 <uxr_deserialize_submessage_header>
 8016350:	f898 3000 	ldrb.w	r3, [r8]
 8016354:	4638      	mov	r0, r7
 8016356:	f003 0201 	and.w	r2, r3, #1
 801635a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 801635e:	f888 3000 	strb.w	r3, [r8]
 8016362:	7522      	strb	r2, [r4, #20]
 8016364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016368 <uxr_submessage_padding>:
 8016368:	f010 0003 	ands.w	r0, r0, #3
 801636c:	bf18      	it	ne
 801636e:	f1c0 0004 	rsbne	r0, r0, #4
 8016372:	4770      	bx	lr

08016374 <uxr_millis>:
 8016374:	b510      	push	{r4, lr}
 8016376:	b084      	sub	sp, #16
 8016378:	2001      	movs	r0, #1
 801637a:	4669      	mov	r1, sp
 801637c:	f7eb f878 	bl	8001470 <clock_gettime>
 8016380:	4908      	ldr	r1, [pc, #32]	; (80163a4 <uxr_millis+0x30>)
 8016382:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8016386:	fba0 0301 	umull	r0, r3, r0, r1
 801638a:	1900      	adds	r0, r0, r4
 801638c:	fb01 3102 	mla	r1, r1, r2, r3
 8016390:	4a05      	ldr	r2, [pc, #20]	; (80163a8 <uxr_millis+0x34>)
 8016392:	f04f 0300 	mov.w	r3, #0
 8016396:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 801639a:	f7e9 ffb9 	bl	8000310 <__aeabi_ldivmod>
 801639e:	b004      	add	sp, #16
 80163a0:	bd10      	pop	{r4, pc}
 80163a2:	bf00      	nop
 80163a4:	3b9aca00 	.word	0x3b9aca00
 80163a8:	000f4240 	.word	0x000f4240

080163ac <uxr_nanos>:
 80163ac:	b510      	push	{r4, lr}
 80163ae:	b084      	sub	sp, #16
 80163b0:	2001      	movs	r0, #1
 80163b2:	4669      	mov	r1, sp
 80163b4:	f7eb f85c 	bl	8001470 <clock_gettime>
 80163b8:	4a06      	ldr	r2, [pc, #24]	; (80163d4 <uxr_nanos+0x28>)
 80163ba:	9800      	ldr	r0, [sp, #0]
 80163bc:	9902      	ldr	r1, [sp, #8]
 80163be:	fba0 0302 	umull	r0, r3, r0, r2
 80163c2:	9c01      	ldr	r4, [sp, #4]
 80163c4:	1840      	adds	r0, r0, r1
 80163c6:	fb02 3304 	mla	r3, r2, r4, r3
 80163ca:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 80163ce:	b004      	add	sp, #16
 80163d0:	bd10      	pop	{r4, pc}
 80163d2:	bf00      	nop
 80163d4:	3b9aca00 	.word	0x3b9aca00

080163d8 <on_full_output_buffer_fragmented>:
 80163d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163dc:	460c      	mov	r4, r1
 80163de:	b08a      	sub	sp, #40	; 0x28
 80163e0:	4606      	mov	r6, r0
 80163e2:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 80163e6:	f104 0008 	add.w	r0, r4, #8
 80163ea:	f7ff ff45 	bl	8016278 <uxr_get_output_reliable_stream>
 80163ee:	4605      	mov	r5, r0
 80163f0:	f002 fcc8 	bl	8018d84 <get_available_free_slots>
 80163f4:	b968      	cbnz	r0, 8016412 <on_full_output_buffer_fragmented+0x3a>
 80163f6:	4620      	mov	r0, r4
 80163f8:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 80163fc:	4798      	blx	r3
 80163fe:	b918      	cbnz	r0, 8016408 <on_full_output_buffer_fragmented+0x30>
 8016400:	2001      	movs	r0, #1
 8016402:	b00a      	add	sp, #40	; 0x28
 8016404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016408:	4628      	mov	r0, r5
 801640a:	f002 fcbb 	bl	8018d84 <get_available_free_slots>
 801640e:	2800      	cmp	r0, #0
 8016410:	d0f6      	beq.n	8016400 <on_full_output_buffer_fragmented+0x28>
 8016412:	8929      	ldrh	r1, [r5, #8]
 8016414:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8016418:	89eb      	ldrh	r3, [r5, #14]
 801641a:	7b28      	ldrb	r0, [r5, #12]
 801641c:	686f      	ldr	r7, [r5, #4]
 801641e:	1a12      	subs	r2, r2, r0
 8016420:	fbb3 f0f1 	udiv	r0, r3, r1
 8016424:	fbb7 f7f1 	udiv	r7, r7, r1
 8016428:	fb01 3110 	mls	r1, r1, r0, r3
 801642c:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8016430:	b289      	uxth	r1, r1
 8016432:	fb07 f101 	mul.w	r1, r7, r1
 8016436:	3f04      	subs	r7, #4
 8016438:	443a      	add	r2, r7
 801643a:	3104      	adds	r1, #4
 801643c:	fa1f f882 	uxth.w	r8, r2
 8016440:	463a      	mov	r2, r7
 8016442:	eba3 0308 	sub.w	r3, r3, r8
 8016446:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 801644a:	682b      	ldr	r3, [r5, #0]
 801644c:	4419      	add	r1, r3
 801644e:	2300      	movs	r3, #0
 8016450:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8016454:	9000      	str	r0, [sp, #0]
 8016456:	a802      	add	r0, sp, #8
 8016458:	f7f7 fcec 	bl	800de34 <ucdr_init_buffer_origin_offset>
 801645c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8016460:	f102 0308 	add.w	r3, r2, #8
 8016464:	42bb      	cmp	r3, r7
 8016466:	d927      	bls.n	80164b8 <on_full_output_buffer_fragmented+0xe0>
 8016468:	4642      	mov	r2, r8
 801646a:	2300      	movs	r3, #0
 801646c:	210d      	movs	r1, #13
 801646e:	a802      	add	r0, sp, #8
 8016470:	f7ff ff3a 	bl	80162e8 <uxr_buffer_submessage_header>
 8016474:	8929      	ldrh	r1, [r5, #8]
 8016476:	89eb      	ldrh	r3, [r5, #14]
 8016478:	686a      	ldr	r2, [r5, #4]
 801647a:	fbb3 f0f1 	udiv	r0, r3, r1
 801647e:	fbb2 f2f1 	udiv	r2, r2, r1
 8016482:	fb01 3310 	mls	r3, r1, r0, r3
 8016486:	b29b      	uxth	r3, r3
 8016488:	fb02 f303 	mul.w	r3, r2, r3
 801648c:	682a      	ldr	r2, [r5, #0]
 801648e:	50d7      	str	r7, [r2, r3]
 8016490:	2101      	movs	r1, #1
 8016492:	89e8      	ldrh	r0, [r5, #14]
 8016494:	f002 fc98 	bl	8018dc8 <uxr_seq_num_add>
 8016498:	9904      	ldr	r1, [sp, #16]
 801649a:	9a03      	ldr	r2, [sp, #12]
 801649c:	81e8      	strh	r0, [r5, #14]
 801649e:	4630      	mov	r0, r6
 80164a0:	1a52      	subs	r2, r2, r1
 80164a2:	f7f7 fcd9 	bl	800de58 <ucdr_init_buffer>
 80164a6:	4630      	mov	r0, r6
 80164a8:	4622      	mov	r2, r4
 80164aa:	490f      	ldr	r1, [pc, #60]	; (80164e8 <on_full_output_buffer_fragmented+0x110>)
 80164ac:	f7f7 fca8 	bl	800de00 <ucdr_set_on_full_buffer_callback>
 80164b0:	2000      	movs	r0, #0
 80164b2:	b00a      	add	sp, #40	; 0x28
 80164b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164b8:	b292      	uxth	r2, r2
 80164ba:	2302      	movs	r3, #2
 80164bc:	210d      	movs	r1, #13
 80164be:	a802      	add	r0, sp, #8
 80164c0:	f7ff ff12 	bl	80162e8 <uxr_buffer_submessage_header>
 80164c4:	8928      	ldrh	r0, [r5, #8]
 80164c6:	89eb      	ldrh	r3, [r5, #14]
 80164c8:	6869      	ldr	r1, [r5, #4]
 80164ca:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 80164ce:	fbb3 f7f0 	udiv	r7, r3, r0
 80164d2:	fbb1 f1f0 	udiv	r1, r1, r0
 80164d6:	fb00 3317 	mls	r3, r0, r7, r3
 80164da:	3208      	adds	r2, #8
 80164dc:	b29b      	uxth	r3, r3
 80164de:	fb01 f303 	mul.w	r3, r1, r3
 80164e2:	6829      	ldr	r1, [r5, #0]
 80164e4:	50ca      	str	r2, [r1, r3]
 80164e6:	e7d3      	b.n	8016490 <on_full_output_buffer_fragmented+0xb8>
 80164e8:	080163d9 	.word	0x080163d9

080164ec <uxr_prepare_output_stream>:
 80164ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80164ee:	b087      	sub	sp, #28
 80164f0:	2707      	movs	r7, #7
 80164f2:	2500      	movs	r5, #0
 80164f4:	461c      	mov	r4, r3
 80164f6:	4606      	mov	r6, r0
 80164f8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80164fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80164fe:	e9cd 7500 	strd	r7, r5, [sp]
 8016502:	3204      	adds	r2, #4
 8016504:	f7fe ffc8 	bl	8015498 <uxr_prepare_stream_to_write_submessage>
 8016508:	f080 0201 	eor.w	r2, r0, #1
 801650c:	b2d2      	uxtb	r2, r2
 801650e:	75a2      	strb	r2, [r4, #22]
 8016510:	b112      	cbz	r2, 8016518 <uxr_prepare_output_stream+0x2c>
 8016512:	4628      	mov	r0, r5
 8016514:	b007      	add	sp, #28
 8016516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016518:	aa05      	add	r2, sp, #20
 801651a:	9902      	ldr	r1, [sp, #8]
 801651c:	4630      	mov	r0, r6
 801651e:	f7ff f8f7 	bl	8015710 <uxr_init_base_object_request>
 8016522:	a905      	add	r1, sp, #20
 8016524:	4605      	mov	r5, r0
 8016526:	4620      	mov	r0, r4
 8016528:	f000 fe7a 	bl	8017220 <uxr_serialize_WRITE_DATA_Payload_Data>
 801652c:	69a6      	ldr	r6, [r4, #24]
 801652e:	69e7      	ldr	r7, [r4, #28]
 8016530:	4620      	mov	r0, r4
 8016532:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8016536:	1a52      	subs	r2, r2, r1
 8016538:	f7f7 fc8e 	bl	800de58 <ucdr_init_buffer>
 801653c:	4620      	mov	r0, r4
 801653e:	463a      	mov	r2, r7
 8016540:	4631      	mov	r1, r6
 8016542:	f7f7 fc5d 	bl	800de00 <ucdr_set_on_full_buffer_callback>
 8016546:	4628      	mov	r0, r5
 8016548:	b007      	add	sp, #28
 801654a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801654c <uxr_prepare_output_stream_fragmented>:
 801654c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016550:	b091      	sub	sp, #68	; 0x44
 8016552:	4605      	mov	r5, r0
 8016554:	3008      	adds	r0, #8
 8016556:	461e      	mov	r6, r3
 8016558:	9105      	str	r1, [sp, #20]
 801655a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801655e:	9204      	str	r2, [sp, #16]
 8016560:	f7ff fe8a 	bl	8016278 <uxr_get_output_reliable_stream>
 8016564:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8016568:	2b01      	cmp	r3, #1
 801656a:	f000 8093 	beq.w	8016694 <uxr_prepare_output_stream_fragmented+0x148>
 801656e:	4604      	mov	r4, r0
 8016570:	2800      	cmp	r0, #0
 8016572:	f000 808f 	beq.w	8016694 <uxr_prepare_output_stream_fragmented+0x148>
 8016576:	f002 fc05 	bl	8018d84 <get_available_free_slots>
 801657a:	2800      	cmp	r0, #0
 801657c:	f000 8085 	beq.w	801668a <uxr_prepare_output_stream_fragmented+0x13e>
 8016580:	8923      	ldrh	r3, [r4, #8]
 8016582:	89e7      	ldrh	r7, [r4, #14]
 8016584:	6862      	ldr	r2, [r4, #4]
 8016586:	fbb7 f9f3 	udiv	r9, r7, r3
 801658a:	fbb2 f2f3 	udiv	r2, r2, r3
 801658e:	fb03 7919 	mls	r9, r3, r9, r7
 8016592:	6823      	ldr	r3, [r4, #0]
 8016594:	f1a2 0b04 	sub.w	fp, r2, #4
 8016598:	9203      	str	r2, [sp, #12]
 801659a:	fa1f f989 	uxth.w	r9, r9
 801659e:	fb02 f909 	mul.w	r9, r2, r9
 80165a2:	f109 0904 	add.w	r9, r9, #4
 80165a6:	4499      	add	r9, r3
 80165a8:	7b23      	ldrb	r3, [r4, #12]
 80165aa:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80165ae:	4543      	cmp	r3, r8
 80165b0:	d37c      	bcc.n	80166ac <uxr_prepare_output_stream_fragmented+0x160>
 80165b2:	f1ab 0a04 	sub.w	sl, fp, #4
 80165b6:	465a      	mov	r2, fp
 80165b8:	4649      	mov	r1, r9
 80165ba:	a808      	add	r0, sp, #32
 80165bc:	ebaa 0a03 	sub.w	sl, sl, r3
 80165c0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80165c2:	f8cd 8000 	str.w	r8, [sp]
 80165c6:	3308      	adds	r3, #8
 80165c8:	fa1f fa8a 	uxth.w	sl, sl
 80165cc:	9302      	str	r3, [sp, #8]
 80165ce:	2300      	movs	r3, #0
 80165d0:	f7f7 fc30 	bl	800de34 <ucdr_init_buffer_origin_offset>
 80165d4:	9b02      	ldr	r3, [sp, #8]
 80165d6:	4652      	mov	r2, sl
 80165d8:	210d      	movs	r1, #13
 80165da:	455b      	cmp	r3, fp
 80165dc:	bf34      	ite	cc
 80165de:	2302      	movcc	r3, #2
 80165e0:	2300      	movcs	r3, #0
 80165e2:	a808      	add	r0, sp, #32
 80165e4:	f7ff fe80 	bl	80162e8 <uxr_buffer_submessage_header>
 80165e8:	8921      	ldrh	r1, [r4, #8]
 80165ea:	6863      	ldr	r3, [r4, #4]
 80165ec:	4638      	mov	r0, r7
 80165ee:	fbb7 f2f1 	udiv	r2, r7, r1
 80165f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80165f6:	fb01 7212 	mls	r2, r1, r2, r7
 80165fa:	2101      	movs	r1, #1
 80165fc:	b292      	uxth	r2, r2
 80165fe:	fb02 f303 	mul.w	r3, r2, r3
 8016602:	6822      	ldr	r2, [r4, #0]
 8016604:	f842 b003 	str.w	fp, [r2, r3]
 8016608:	f002 fbde 	bl	8018dc8 <uxr_seq_num_add>
 801660c:	9b03      	ldr	r3, [sp, #12]
 801660e:	f108 0104 	add.w	r1, r8, #4
 8016612:	4607      	mov	r7, r0
 8016614:	f1a3 0208 	sub.w	r2, r3, #8
 8016618:	4630      	mov	r0, r6
 801661a:	4449      	add	r1, r9
 801661c:	eba2 0208 	sub.w	r2, r2, r8
 8016620:	f7f7 fc1a 	bl	800de58 <ucdr_init_buffer>
 8016624:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016626:	2107      	movs	r1, #7
 8016628:	81e7      	strh	r7, [r4, #14]
 801662a:	1d1a      	adds	r2, r3, #4
 801662c:	2300      	movs	r3, #0
 801662e:	4630      	mov	r0, r6
 8016630:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8016634:	bf28      	it	cs
 8016636:	461a      	movcs	r2, r3
 8016638:	b292      	uxth	r2, r2
 801663a:	f7ff fe55 	bl	80162e8 <uxr_buffer_submessage_header>
 801663e:	aa07      	add	r2, sp, #28
 8016640:	9904      	ldr	r1, [sp, #16]
 8016642:	4628      	mov	r0, r5
 8016644:	f7ff f864 	bl	8015710 <uxr_init_base_object_request>
 8016648:	4604      	mov	r4, r0
 801664a:	b320      	cbz	r0, 8016696 <uxr_prepare_output_stream_fragmented+0x14a>
 801664c:	a907      	add	r1, sp, #28
 801664e:	4630      	mov	r0, r6
 8016650:	f000 fde6 	bl	8017220 <uxr_serialize_WRITE_DATA_Payload_Data>
 8016654:	4630      	mov	r0, r6
 8016656:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801665a:	1a52      	subs	r2, r2, r1
 801665c:	f7f7 fbfc 	bl	800de58 <ucdr_init_buffer>
 8016660:	9b05      	ldr	r3, [sp, #20]
 8016662:	9a02      	ldr	r2, [sp, #8]
 8016664:	4630      	mov	r0, r6
 8016666:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 801666a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801666c:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 8016670:	462a      	mov	r2, r5
 8016672:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 8016676:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016678:	4918      	ldr	r1, [pc, #96]	; (80166dc <uxr_prepare_output_stream_fragmented+0x190>)
 801667a:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 801667e:	f7f7 fbbf 	bl	800de00 <ucdr_set_on_full_buffer_callback>
 8016682:	4620      	mov	r0, r4
 8016684:	b011      	add	sp, #68	; 0x44
 8016686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801668a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801668c:	4628      	mov	r0, r5
 801668e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016690:	4798      	blx	r3
 8016692:	b920      	cbnz	r0, 801669e <uxr_prepare_output_stream_fragmented+0x152>
 8016694:	2400      	movs	r4, #0
 8016696:	4620      	mov	r0, r4
 8016698:	b011      	add	sp, #68	; 0x44
 801669a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801669e:	4620      	mov	r0, r4
 80166a0:	f002 fb70 	bl	8018d84 <get_available_free_slots>
 80166a4:	2800      	cmp	r0, #0
 80166a6:	f47f af6b 	bne.w	8016580 <uxr_prepare_output_stream_fragmented+0x34>
 80166aa:	e7f3      	b.n	8016694 <uxr_prepare_output_stream_fragmented+0x148>
 80166ac:	4638      	mov	r0, r7
 80166ae:	2101      	movs	r1, #1
 80166b0:	f002 fb8a 	bl	8018dc8 <uxr_seq_num_add>
 80166b4:	8922      	ldrh	r2, [r4, #8]
 80166b6:	6863      	ldr	r3, [r4, #4]
 80166b8:	4607      	mov	r7, r0
 80166ba:	fbb3 f9f2 	udiv	r9, r3, r2
 80166be:	fbb0 f3f2 	udiv	r3, r0, r2
 80166c2:	fb02 0313 	mls	r3, r2, r3, r0
 80166c6:	b29b      	uxth	r3, r3
 80166c8:	fb03 f909 	mul.w	r9, r3, r9
 80166cc:	6823      	ldr	r3, [r4, #0]
 80166ce:	f109 0904 	add.w	r9, r9, #4
 80166d2:	4499      	add	r9, r3
 80166d4:	7b23      	ldrb	r3, [r4, #12]
 80166d6:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80166da:	e76a      	b.n	80165b2 <uxr_prepare_output_stream_fragmented+0x66>
 80166dc:	080163d9 	.word	0x080163d9

080166e0 <uxr_serialize_message_header>:
 80166e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80166e2:	4616      	mov	r6, r2
 80166e4:	b083      	sub	sp, #12
 80166e6:	4604      	mov	r4, r0
 80166e8:	460d      	mov	r5, r1
 80166ea:	9301      	str	r3, [sp, #4]
 80166ec:	9f08      	ldr	r7, [sp, #32]
 80166ee:	f7f6 f949 	bl	800c984 <ucdr_serialize_uint8_t>
 80166f2:	4631      	mov	r1, r6
 80166f4:	4620      	mov	r0, r4
 80166f6:	f7f6 f945 	bl	800c984 <ucdr_serialize_uint8_t>
 80166fa:	9a01      	ldr	r2, [sp, #4]
 80166fc:	2101      	movs	r1, #1
 80166fe:	4620      	mov	r0, r4
 8016700:	f7f6 f9ec 	bl	800cadc <ucdr_serialize_endian_uint16_t>
 8016704:	062b      	lsls	r3, r5, #24
 8016706:	d501      	bpl.n	801670c <uxr_serialize_message_header+0x2c>
 8016708:	b003      	add	sp, #12
 801670a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801670c:	2204      	movs	r2, #4
 801670e:	4639      	mov	r1, r7
 8016710:	4620      	mov	r0, r4
 8016712:	b003      	add	sp, #12
 8016714:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016718:	f7f6 b83a 	b.w	800c790 <ucdr_serialize_array_uint8_t>

0801671c <uxr_deserialize_message_header>:
 801671c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801671e:	4616      	mov	r6, r2
 8016720:	b083      	sub	sp, #12
 8016722:	4604      	mov	r4, r0
 8016724:	460d      	mov	r5, r1
 8016726:	9301      	str	r3, [sp, #4]
 8016728:	9f08      	ldr	r7, [sp, #32]
 801672a:	f7f6 f941 	bl	800c9b0 <ucdr_deserialize_uint8_t>
 801672e:	4631      	mov	r1, r6
 8016730:	4620      	mov	r0, r4
 8016732:	f7f6 f93d 	bl	800c9b0 <ucdr_deserialize_uint8_t>
 8016736:	9a01      	ldr	r2, [sp, #4]
 8016738:	2101      	movs	r1, #1
 801673a:	4620      	mov	r0, r4
 801673c:	f7f6 fac2 	bl	800ccc4 <ucdr_deserialize_endian_uint16_t>
 8016740:	f995 3000 	ldrsb.w	r3, [r5]
 8016744:	2b00      	cmp	r3, #0
 8016746:	da01      	bge.n	801674c <uxr_deserialize_message_header+0x30>
 8016748:	b003      	add	sp, #12
 801674a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801674c:	2204      	movs	r2, #4
 801674e:	4639      	mov	r1, r7
 8016750:	4620      	mov	r0, r4
 8016752:	b003      	add	sp, #12
 8016754:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016758:	f7f6 b87e 	b.w	800c858 <ucdr_deserialize_array_uint8_t>

0801675c <uxr_serialize_submessage_header>:
 801675c:	b530      	push	{r4, r5, lr}
 801675e:	4615      	mov	r5, r2
 8016760:	b083      	sub	sp, #12
 8016762:	4604      	mov	r4, r0
 8016764:	9301      	str	r3, [sp, #4]
 8016766:	f7f6 f90d 	bl	800c984 <ucdr_serialize_uint8_t>
 801676a:	4629      	mov	r1, r5
 801676c:	4620      	mov	r0, r4
 801676e:	f7f6 f909 	bl	800c984 <ucdr_serialize_uint8_t>
 8016772:	9a01      	ldr	r2, [sp, #4]
 8016774:	2101      	movs	r1, #1
 8016776:	4620      	mov	r0, r4
 8016778:	b003      	add	sp, #12
 801677a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801677e:	f7f6 b9ad 	b.w	800cadc <ucdr_serialize_endian_uint16_t>
 8016782:	bf00      	nop

08016784 <uxr_deserialize_submessage_header>:
 8016784:	b530      	push	{r4, r5, lr}
 8016786:	4615      	mov	r5, r2
 8016788:	b083      	sub	sp, #12
 801678a:	4604      	mov	r4, r0
 801678c:	9301      	str	r3, [sp, #4]
 801678e:	f7f6 f90f 	bl	800c9b0 <ucdr_deserialize_uint8_t>
 8016792:	4629      	mov	r1, r5
 8016794:	4620      	mov	r0, r4
 8016796:	f7f6 f90b 	bl	800c9b0 <ucdr_deserialize_uint8_t>
 801679a:	9a01      	ldr	r2, [sp, #4]
 801679c:	2101      	movs	r1, #1
 801679e:	4620      	mov	r0, r4
 80167a0:	b003      	add	sp, #12
 80167a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80167a6:	f7f6 ba8d 	b.w	800ccc4 <ucdr_deserialize_endian_uint16_t>
 80167aa:	bf00      	nop

080167ac <uxr_serialize_CLIENT_Representation>:
 80167ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80167b0:	2204      	movs	r2, #4
 80167b2:	460e      	mov	r6, r1
 80167b4:	4605      	mov	r5, r0
 80167b6:	f7f5 ffeb 	bl	800c790 <ucdr_serialize_array_uint8_t>
 80167ba:	4607      	mov	r7, r0
 80167bc:	2202      	movs	r2, #2
 80167be:	1d31      	adds	r1, r6, #4
 80167c0:	4628      	mov	r0, r5
 80167c2:	f7f5 ffe5 	bl	800c790 <ucdr_serialize_array_uint8_t>
 80167c6:	4038      	ands	r0, r7
 80167c8:	2202      	movs	r2, #2
 80167ca:	1db1      	adds	r1, r6, #6
 80167cc:	b2c7      	uxtb	r7, r0
 80167ce:	4628      	mov	r0, r5
 80167d0:	f7f5 ffde 	bl	800c790 <ucdr_serialize_array_uint8_t>
 80167d4:	2204      	movs	r2, #4
 80167d6:	4007      	ands	r7, r0
 80167d8:	f106 0108 	add.w	r1, r6, #8
 80167dc:	4628      	mov	r0, r5
 80167de:	f7f5 ffd7 	bl	800c790 <ucdr_serialize_array_uint8_t>
 80167e2:	4007      	ands	r7, r0
 80167e4:	7b31      	ldrb	r1, [r6, #12]
 80167e6:	4628      	mov	r0, r5
 80167e8:	f7f6 f8cc 	bl	800c984 <ucdr_serialize_uint8_t>
 80167ec:	7b71      	ldrb	r1, [r6, #13]
 80167ee:	4007      	ands	r7, r0
 80167f0:	4628      	mov	r0, r5
 80167f2:	f7f6 f899 	bl	800c928 <ucdr_serialize_bool>
 80167f6:	7b73      	ldrb	r3, [r6, #13]
 80167f8:	ea07 0800 	and.w	r8, r7, r0
 80167fc:	b93b      	cbnz	r3, 801680e <uxr_serialize_CLIENT_Representation+0x62>
 80167fe:	8bb1      	ldrh	r1, [r6, #28]
 8016800:	4628      	mov	r0, r5
 8016802:	f7f6 f8eb 	bl	800c9dc <ucdr_serialize_uint16_t>
 8016806:	ea08 0000 	and.w	r0, r8, r0
 801680a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801680e:	6931      	ldr	r1, [r6, #16]
 8016810:	4628      	mov	r0, r5
 8016812:	f7f6 facd 	bl	800cdb0 <ucdr_serialize_uint32_t>
 8016816:	6933      	ldr	r3, [r6, #16]
 8016818:	b1e3      	cbz	r3, 8016854 <uxr_serialize_CLIENT_Representation+0xa8>
 801681a:	b1c0      	cbz	r0, 801684e <uxr_serialize_CLIENT_Representation+0xa2>
 801681c:	4637      	mov	r7, r6
 801681e:	f04f 0900 	mov.w	r9, #0
 8016822:	e000      	b.n	8016826 <uxr_serialize_CLIENT_Representation+0x7a>
 8016824:	b19c      	cbz	r4, 801684e <uxr_serialize_CLIENT_Representation+0xa2>
 8016826:	6979      	ldr	r1, [r7, #20]
 8016828:	4628      	mov	r0, r5
 801682a:	f001 fd69 	bl	8018300 <ucdr_serialize_string>
 801682e:	69b9      	ldr	r1, [r7, #24]
 8016830:	4604      	mov	r4, r0
 8016832:	4628      	mov	r0, r5
 8016834:	f001 fd64 	bl	8018300 <ucdr_serialize_string>
 8016838:	f109 0901 	add.w	r9, r9, #1
 801683c:	6933      	ldr	r3, [r6, #16]
 801683e:	4004      	ands	r4, r0
 8016840:	3708      	adds	r7, #8
 8016842:	4599      	cmp	r9, r3
 8016844:	b2e4      	uxtb	r4, r4
 8016846:	d3ed      	bcc.n	8016824 <uxr_serialize_CLIENT_Representation+0x78>
 8016848:	ea08 0804 	and.w	r8, r8, r4
 801684c:	e7d7      	b.n	80167fe <uxr_serialize_CLIENT_Representation+0x52>
 801684e:	f04f 0800 	mov.w	r8, #0
 8016852:	e7d4      	b.n	80167fe <uxr_serialize_CLIENT_Representation+0x52>
 8016854:	ea08 0800 	and.w	r8, r8, r0
 8016858:	e7d1      	b.n	80167fe <uxr_serialize_CLIENT_Representation+0x52>
 801685a:	bf00      	nop

0801685c <uxr_deserialize_CLIENT_Representation>:
 801685c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016860:	2204      	movs	r2, #4
 8016862:	460c      	mov	r4, r1
 8016864:	4605      	mov	r5, r0
 8016866:	f7f5 fff7 	bl	800c858 <ucdr_deserialize_array_uint8_t>
 801686a:	4607      	mov	r7, r0
 801686c:	2202      	movs	r2, #2
 801686e:	1d21      	adds	r1, r4, #4
 8016870:	4628      	mov	r0, r5
 8016872:	f7f5 fff1 	bl	800c858 <ucdr_deserialize_array_uint8_t>
 8016876:	4038      	ands	r0, r7
 8016878:	2202      	movs	r2, #2
 801687a:	1da1      	adds	r1, r4, #6
 801687c:	b2c6      	uxtb	r6, r0
 801687e:	4628      	mov	r0, r5
 8016880:	f7f5 ffea 	bl	800c858 <ucdr_deserialize_array_uint8_t>
 8016884:	2204      	movs	r2, #4
 8016886:	4006      	ands	r6, r0
 8016888:	f104 0108 	add.w	r1, r4, #8
 801688c:	4628      	mov	r0, r5
 801688e:	f7f5 ffe3 	bl	800c858 <ucdr_deserialize_array_uint8_t>
 8016892:	4006      	ands	r6, r0
 8016894:	f104 010c 	add.w	r1, r4, #12
 8016898:	4628      	mov	r0, r5
 801689a:	f7f6 f889 	bl	800c9b0 <ucdr_deserialize_uint8_t>
 801689e:	f104 010d 	add.w	r1, r4, #13
 80168a2:	ea06 0700 	and.w	r7, r6, r0
 80168a6:	4628      	mov	r0, r5
 80168a8:	f7f6 f854 	bl	800c954 <ucdr_deserialize_bool>
 80168ac:	7b63      	ldrb	r3, [r4, #13]
 80168ae:	4007      	ands	r7, r0
 80168b0:	b93b      	cbnz	r3, 80168c2 <uxr_deserialize_CLIENT_Representation+0x66>
 80168b2:	f104 011c 	add.w	r1, r4, #28
 80168b6:	4628      	mov	r0, r5
 80168b8:	f7f6 f990 	bl	800cbdc <ucdr_deserialize_uint16_t>
 80168bc:	4038      	ands	r0, r7
 80168be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80168c2:	f104 0110 	add.w	r1, r4, #16
 80168c6:	4628      	mov	r0, r5
 80168c8:	f7f6 fba2 	bl	800d010 <ucdr_deserialize_uint32_t>
 80168cc:	6923      	ldr	r3, [r4, #16]
 80168ce:	2b01      	cmp	r3, #1
 80168d0:	d903      	bls.n	80168da <uxr_deserialize_CLIENT_Representation+0x7e>
 80168d2:	2301      	movs	r3, #1
 80168d4:	2700      	movs	r7, #0
 80168d6:	75ab      	strb	r3, [r5, #22]
 80168d8:	e7eb      	b.n	80168b2 <uxr_deserialize_CLIENT_Representation+0x56>
 80168da:	b30b      	cbz	r3, 8016920 <uxr_deserialize_CLIENT_Representation+0xc4>
 80168dc:	b1f0      	cbz	r0, 801691c <uxr_deserialize_CLIENT_Representation+0xc0>
 80168de:	46a0      	mov	r8, r4
 80168e0:	f04f 0900 	mov.w	r9, #0
 80168e4:	e000      	b.n	80168e8 <uxr_deserialize_CLIENT_Representation+0x8c>
 80168e6:	b1ce      	cbz	r6, 801691c <uxr_deserialize_CLIENT_Representation+0xc0>
 80168e8:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80168ec:	f108 0808 	add.w	r8, r8, #8
 80168f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80168f4:	4628      	mov	r0, r5
 80168f6:	f001 fd13 	bl	8018320 <ucdr_deserialize_string>
 80168fa:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80168fe:	4606      	mov	r6, r0
 8016900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016904:	4628      	mov	r0, r5
 8016906:	f109 0901 	add.w	r9, r9, #1
 801690a:	f001 fd09 	bl	8018320 <ucdr_deserialize_string>
 801690e:	6923      	ldr	r3, [r4, #16]
 8016910:	4006      	ands	r6, r0
 8016912:	4599      	cmp	r9, r3
 8016914:	b2f6      	uxtb	r6, r6
 8016916:	d3e6      	bcc.n	80168e6 <uxr_deserialize_CLIENT_Representation+0x8a>
 8016918:	4037      	ands	r7, r6
 801691a:	e7ca      	b.n	80168b2 <uxr_deserialize_CLIENT_Representation+0x56>
 801691c:	2700      	movs	r7, #0
 801691e:	e7c8      	b.n	80168b2 <uxr_deserialize_CLIENT_Representation+0x56>
 8016920:	4007      	ands	r7, r0
 8016922:	e7c6      	b.n	80168b2 <uxr_deserialize_CLIENT_Representation+0x56>

08016924 <uxr_serialize_AGENT_Representation>:
 8016924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016928:	2204      	movs	r2, #4
 801692a:	460f      	mov	r7, r1
 801692c:	4605      	mov	r5, r0
 801692e:	f7f5 ff2f 	bl	800c790 <ucdr_serialize_array_uint8_t>
 8016932:	4604      	mov	r4, r0
 8016934:	2202      	movs	r2, #2
 8016936:	1d39      	adds	r1, r7, #4
 8016938:	4628      	mov	r0, r5
 801693a:	f7f5 ff29 	bl	800c790 <ucdr_serialize_array_uint8_t>
 801693e:	4020      	ands	r0, r4
 8016940:	2202      	movs	r2, #2
 8016942:	1db9      	adds	r1, r7, #6
 8016944:	b2c4      	uxtb	r4, r0
 8016946:	4628      	mov	r0, r5
 8016948:	f7f5 ff22 	bl	800c790 <ucdr_serialize_array_uint8_t>
 801694c:	7a39      	ldrb	r1, [r7, #8]
 801694e:	4004      	ands	r4, r0
 8016950:	4628      	mov	r0, r5
 8016952:	f7f5 ffe9 	bl	800c928 <ucdr_serialize_bool>
 8016956:	7a3b      	ldrb	r3, [r7, #8]
 8016958:	ea00 0804 	and.w	r8, r0, r4
 801695c:	b913      	cbnz	r3, 8016964 <uxr_serialize_AGENT_Representation+0x40>
 801695e:	4640      	mov	r0, r8
 8016960:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016964:	68f9      	ldr	r1, [r7, #12]
 8016966:	4628      	mov	r0, r5
 8016968:	f7f6 fa22 	bl	800cdb0 <ucdr_serialize_uint32_t>
 801696c:	68fb      	ldr	r3, [r7, #12]
 801696e:	b303      	cbz	r3, 80169b2 <uxr_serialize_AGENT_Representation+0x8e>
 8016970:	b1d0      	cbz	r0, 80169a8 <uxr_serialize_AGENT_Representation+0x84>
 8016972:	463e      	mov	r6, r7
 8016974:	f04f 0900 	mov.w	r9, #0
 8016978:	e000      	b.n	801697c <uxr_serialize_AGENT_Representation+0x58>
 801697a:	b1ac      	cbz	r4, 80169a8 <uxr_serialize_AGENT_Representation+0x84>
 801697c:	6931      	ldr	r1, [r6, #16]
 801697e:	4628      	mov	r0, r5
 8016980:	f001 fcbe 	bl	8018300 <ucdr_serialize_string>
 8016984:	6971      	ldr	r1, [r6, #20]
 8016986:	4604      	mov	r4, r0
 8016988:	4628      	mov	r0, r5
 801698a:	f001 fcb9 	bl	8018300 <ucdr_serialize_string>
 801698e:	f109 0901 	add.w	r9, r9, #1
 8016992:	68fb      	ldr	r3, [r7, #12]
 8016994:	4004      	ands	r4, r0
 8016996:	3608      	adds	r6, #8
 8016998:	4599      	cmp	r9, r3
 801699a:	b2e4      	uxtb	r4, r4
 801699c:	d3ed      	bcc.n	801697a <uxr_serialize_AGENT_Representation+0x56>
 801699e:	ea08 0804 	and.w	r8, r8, r4
 80169a2:	4640      	mov	r0, r8
 80169a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80169a8:	f04f 0800 	mov.w	r8, #0
 80169ac:	4640      	mov	r0, r8
 80169ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80169b2:	ea08 0800 	and.w	r8, r8, r0
 80169b6:	e7d2      	b.n	801695e <uxr_serialize_AGENT_Representation+0x3a>

080169b8 <uxr_serialize_DATAWRITER_Representation>:
 80169b8:	b570      	push	{r4, r5, r6, lr}
 80169ba:	460d      	mov	r5, r1
 80169bc:	7809      	ldrb	r1, [r1, #0]
 80169be:	4606      	mov	r6, r0
 80169c0:	f7f5 ffe0 	bl	800c984 <ucdr_serialize_uint8_t>
 80169c4:	4604      	mov	r4, r0
 80169c6:	b130      	cbz	r0, 80169d6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80169c8:	782b      	ldrb	r3, [r5, #0]
 80169ca:	2b02      	cmp	r3, #2
 80169cc:	d00c      	beq.n	80169e8 <uxr_serialize_DATAWRITER_Representation+0x30>
 80169ce:	2b03      	cmp	r3, #3
 80169d0:	d010      	beq.n	80169f4 <uxr_serialize_DATAWRITER_Representation+0x3c>
 80169d2:	2b01      	cmp	r3, #1
 80169d4:	d008      	beq.n	80169e8 <uxr_serialize_DATAWRITER_Representation+0x30>
 80169d6:	2202      	movs	r2, #2
 80169d8:	f505 7102 	add.w	r1, r5, #520	; 0x208
 80169dc:	4630      	mov	r0, r6
 80169de:	f7f5 fed7 	bl	800c790 <ucdr_serialize_array_uint8_t>
 80169e2:	4020      	ands	r0, r4
 80169e4:	b2c0      	uxtb	r0, r0
 80169e6:	bd70      	pop	{r4, r5, r6, pc}
 80169e8:	6869      	ldr	r1, [r5, #4]
 80169ea:	4630      	mov	r0, r6
 80169ec:	f001 fc88 	bl	8018300 <ucdr_serialize_string>
 80169f0:	4604      	mov	r4, r0
 80169f2:	e7f0      	b.n	80169d6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80169f4:	4629      	mov	r1, r5
 80169f6:	4630      	mov	r0, r6
 80169f8:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80169fc:	3104      	adds	r1, #4
 80169fe:	f7f7 facb 	bl	800df98 <ucdr_serialize_sequence_uint8_t>
 8016a02:	4604      	mov	r4, r0
 8016a04:	e7e7      	b.n	80169d6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8016a06:	bf00      	nop

08016a08 <uxr_serialize_ObjectVariant.part.0>:
 8016a08:	b570      	push	{r4, r5, r6, lr}
 8016a0a:	780b      	ldrb	r3, [r1, #0]
 8016a0c:	460c      	mov	r4, r1
 8016a0e:	4605      	mov	r5, r0
 8016a10:	3b01      	subs	r3, #1
 8016a12:	2b0d      	cmp	r3, #13
 8016a14:	d854      	bhi.n	8016ac0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8016a16:	e8df f003 	tbb	[pc, r3]
 8016a1a:	0730      	.short	0x0730
 8016a1c:	07071b1b 	.word	0x07071b1b
 8016a20:	0c530707 	.word	0x0c530707
 8016a24:	494e0c0c 	.word	0x494e0c0c
 8016a28:	3104      	adds	r1, #4
 8016a2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016a2e:	f7ff bfc3 	b.w	80169b8 <uxr_serialize_DATAWRITER_Representation>
 8016a32:	7909      	ldrb	r1, [r1, #4]
 8016a34:	f7f5 ffa6 	bl	800c984 <ucdr_serialize_uint8_t>
 8016a38:	b1e8      	cbz	r0, 8016a76 <uxr_serialize_ObjectVariant.part.0+0x6e>
 8016a3a:	7923      	ldrb	r3, [r4, #4]
 8016a3c:	2b01      	cmp	r3, #1
 8016a3e:	d001      	beq.n	8016a44 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8016a40:	2b02      	cmp	r3, #2
 8016a42:	d13d      	bne.n	8016ac0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8016a44:	68a1      	ldr	r1, [r4, #8]
 8016a46:	4628      	mov	r0, r5
 8016a48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016a4c:	f001 bc58 	b.w	8018300 <ucdr_serialize_string>
 8016a50:	7909      	ldrb	r1, [r1, #4]
 8016a52:	f7f5 ff97 	bl	800c984 <ucdr_serialize_uint8_t>
 8016a56:	4606      	mov	r6, r0
 8016a58:	b120      	cbz	r0, 8016a64 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8016a5a:	7923      	ldrb	r3, [r4, #4]
 8016a5c:	2b02      	cmp	r3, #2
 8016a5e:	d039      	beq.n	8016ad4 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8016a60:	2b03      	cmp	r3, #3
 8016a62:	d02f      	beq.n	8016ac4 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8016a64:	2202      	movs	r2, #2
 8016a66:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8016a6a:	4628      	mov	r0, r5
 8016a6c:	f7f5 fe90 	bl	800c790 <ucdr_serialize_array_uint8_t>
 8016a70:	4030      	ands	r0, r6
 8016a72:	b2c0      	uxtb	r0, r0
 8016a74:	bd70      	pop	{r4, r5, r6, pc}
 8016a76:	2000      	movs	r0, #0
 8016a78:	bd70      	pop	{r4, r5, r6, pc}
 8016a7a:	7909      	ldrb	r1, [r1, #4]
 8016a7c:	f7f5 ff82 	bl	800c984 <ucdr_serialize_uint8_t>
 8016a80:	4606      	mov	r6, r0
 8016a82:	b158      	cbz	r0, 8016a9c <uxr_serialize_ObjectVariant.part.0+0x94>
 8016a84:	7923      	ldrb	r3, [r4, #4]
 8016a86:	2b02      	cmp	r3, #2
 8016a88:	d003      	beq.n	8016a92 <uxr_serialize_ObjectVariant.part.0+0x8a>
 8016a8a:	2b03      	cmp	r3, #3
 8016a8c:	d028      	beq.n	8016ae0 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8016a8e:	2b01      	cmp	r3, #1
 8016a90:	d104      	bne.n	8016a9c <uxr_serialize_ObjectVariant.part.0+0x94>
 8016a92:	68a1      	ldr	r1, [r4, #8]
 8016a94:	4628      	mov	r0, r5
 8016a96:	f001 fc33 	bl	8018300 <ucdr_serialize_string>
 8016a9a:	4606      	mov	r6, r0
 8016a9c:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 8016aa0:	4628      	mov	r0, r5
 8016aa2:	f7f6 fcab 	bl	800d3fc <ucdr_serialize_int16_t>
 8016aa6:	4030      	ands	r0, r6
 8016aa8:	b2c0      	uxtb	r0, r0
 8016aaa:	bd70      	pop	{r4, r5, r6, pc}
 8016aac:	3104      	adds	r1, #4
 8016aae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016ab2:	f7ff be7b 	b.w	80167ac <uxr_serialize_CLIENT_Representation>
 8016ab6:	3104      	adds	r1, #4
 8016ab8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016abc:	f7ff bf32 	b.w	8016924 <uxr_serialize_AGENT_Representation>
 8016ac0:	2001      	movs	r0, #1
 8016ac2:	bd70      	pop	{r4, r5, r6, pc}
 8016ac4:	68a2      	ldr	r2, [r4, #8]
 8016ac6:	f104 010c 	add.w	r1, r4, #12
 8016aca:	4628      	mov	r0, r5
 8016acc:	f7f7 fa64 	bl	800df98 <ucdr_serialize_sequence_uint8_t>
 8016ad0:	4606      	mov	r6, r0
 8016ad2:	e7c7      	b.n	8016a64 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8016ad4:	68a1      	ldr	r1, [r4, #8]
 8016ad6:	4628      	mov	r0, r5
 8016ad8:	f001 fc12 	bl	8018300 <ucdr_serialize_string>
 8016adc:	4606      	mov	r6, r0
 8016ade:	e7c1      	b.n	8016a64 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8016ae0:	68a2      	ldr	r2, [r4, #8]
 8016ae2:	f104 010c 	add.w	r1, r4, #12
 8016ae6:	4628      	mov	r0, r5
 8016ae8:	f7f7 fa56 	bl	800df98 <ucdr_serialize_sequence_uint8_t>
 8016aec:	4606      	mov	r6, r0
 8016aee:	e7d5      	b.n	8016a9c <uxr_serialize_ObjectVariant.part.0+0x94>

08016af0 <uxr_deserialize_DATAWRITER_Representation>:
 8016af0:	b570      	push	{r4, r5, r6, lr}
 8016af2:	4606      	mov	r6, r0
 8016af4:	460d      	mov	r5, r1
 8016af6:	f7f5 ff5b 	bl	800c9b0 <ucdr_deserialize_uint8_t>
 8016afa:	4604      	mov	r4, r0
 8016afc:	b130      	cbz	r0, 8016b0c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8016afe:	782b      	ldrb	r3, [r5, #0]
 8016b00:	2b02      	cmp	r3, #2
 8016b02:	d00c      	beq.n	8016b1e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8016b04:	2b03      	cmp	r3, #3
 8016b06:	d012      	beq.n	8016b2e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8016b08:	2b01      	cmp	r3, #1
 8016b0a:	d008      	beq.n	8016b1e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8016b0c:	2202      	movs	r2, #2
 8016b0e:	f505 7102 	add.w	r1, r5, #520	; 0x208
 8016b12:	4630      	mov	r0, r6
 8016b14:	f7f5 fea0 	bl	800c858 <ucdr_deserialize_array_uint8_t>
 8016b18:	4020      	ands	r0, r4
 8016b1a:	b2c0      	uxtb	r0, r0
 8016b1c:	bd70      	pop	{r4, r5, r6, pc}
 8016b1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016b22:	6869      	ldr	r1, [r5, #4]
 8016b24:	4630      	mov	r0, r6
 8016b26:	f001 fbfb 	bl	8018320 <ucdr_deserialize_string>
 8016b2a:	4604      	mov	r4, r0
 8016b2c:	e7ee      	b.n	8016b0c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8016b2e:	1d2b      	adds	r3, r5, #4
 8016b30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016b34:	f105 0108 	add.w	r1, r5, #8
 8016b38:	4630      	mov	r0, r6
 8016b3a:	f7f7 fa3f 	bl	800dfbc <ucdr_deserialize_sequence_uint8_t>
 8016b3e:	4604      	mov	r4, r0
 8016b40:	e7e4      	b.n	8016b0c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8016b42:	bf00      	nop

08016b44 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8016b44:	b570      	push	{r4, r5, r6, lr}
 8016b46:	460d      	mov	r5, r1
 8016b48:	7809      	ldrb	r1, [r1, #0]
 8016b4a:	4606      	mov	r6, r0
 8016b4c:	f7f5 feec 	bl	800c928 <ucdr_serialize_bool>
 8016b50:	782b      	ldrb	r3, [r5, #0]
 8016b52:	4604      	mov	r4, r0
 8016b54:	b94b      	cbnz	r3, 8016b6a <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8016b56:	7a29      	ldrb	r1, [r5, #8]
 8016b58:	4630      	mov	r0, r6
 8016b5a:	f7f5 fee5 	bl	800c928 <ucdr_serialize_bool>
 8016b5e:	7a2b      	ldrb	r3, [r5, #8]
 8016b60:	4004      	ands	r4, r0
 8016b62:	b2e4      	uxtb	r4, r4
 8016b64:	b943      	cbnz	r3, 8016b78 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8016b66:	4620      	mov	r0, r4
 8016b68:	bd70      	pop	{r4, r5, r6, pc}
 8016b6a:	6869      	ldr	r1, [r5, #4]
 8016b6c:	4630      	mov	r0, r6
 8016b6e:	f001 fbc7 	bl	8018300 <ucdr_serialize_string>
 8016b72:	4004      	ands	r4, r0
 8016b74:	b2e4      	uxtb	r4, r4
 8016b76:	e7ee      	b.n	8016b56 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8016b78:	68e9      	ldr	r1, [r5, #12]
 8016b7a:	4630      	mov	r0, r6
 8016b7c:	f001 fbc0 	bl	8018300 <ucdr_serialize_string>
 8016b80:	4004      	ands	r4, r0
 8016b82:	4620      	mov	r0, r4
 8016b84:	bd70      	pop	{r4, r5, r6, pc}
 8016b86:	bf00      	nop

08016b88 <uxr_serialize_OBJK_Replier_Binary>:
 8016b88:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 8016b8c:	460f      	mov	r7, r1
 8016b8e:	4680      	mov	r8, r0
 8016b90:	6809      	ldr	r1, [r1, #0]
 8016b92:	f001 fbb5 	bl	8018300 <ucdr_serialize_string>
 8016b96:	4605      	mov	r5, r0
 8016b98:	6879      	ldr	r1, [r7, #4]
 8016b9a:	4640      	mov	r0, r8
 8016b9c:	f001 fbb0 	bl	8018300 <ucdr_serialize_string>
 8016ba0:	4005      	ands	r5, r0
 8016ba2:	68b9      	ldr	r1, [r7, #8]
 8016ba4:	4640      	mov	r0, r8
 8016ba6:	b2ec      	uxtb	r4, r5
 8016ba8:	f001 fbaa 	bl	8018300 <ucdr_serialize_string>
 8016bac:	7b39      	ldrb	r1, [r7, #12]
 8016bae:	4004      	ands	r4, r0
 8016bb0:	4640      	mov	r0, r8
 8016bb2:	f7f5 feb9 	bl	800c928 <ucdr_serialize_bool>
 8016bb6:	7b3b      	ldrb	r3, [r7, #12]
 8016bb8:	4004      	ands	r4, r0
 8016bba:	b94b      	cbnz	r3, 8016bd0 <uxr_serialize_OBJK_Replier_Binary+0x48>
 8016bbc:	7d39      	ldrb	r1, [r7, #20]
 8016bbe:	4640      	mov	r0, r8
 8016bc0:	f7f5 feb2 	bl	800c928 <ucdr_serialize_bool>
 8016bc4:	7d3b      	ldrb	r3, [r7, #20]
 8016bc6:	4004      	ands	r4, r0
 8016bc8:	b943      	cbnz	r3, 8016bdc <uxr_serialize_OBJK_Replier_Binary+0x54>
 8016bca:	4620      	mov	r0, r4
 8016bcc:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8016bd0:	6939      	ldr	r1, [r7, #16]
 8016bd2:	4640      	mov	r0, r8
 8016bd4:	f001 fb94 	bl	8018300 <ucdr_serialize_string>
 8016bd8:	4004      	ands	r4, r0
 8016bda:	e7ef      	b.n	8016bbc <uxr_serialize_OBJK_Replier_Binary+0x34>
 8016bdc:	69b9      	ldr	r1, [r7, #24]
 8016bde:	4640      	mov	r0, r8
 8016be0:	f001 fb8e 	bl	8018300 <ucdr_serialize_string>
 8016be4:	4004      	ands	r4, r0
 8016be6:	b2e4      	uxtb	r4, r4
 8016be8:	4620      	mov	r0, r4
 8016bea:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8016bee:	bf00      	nop

08016bf0 <uxr_deserialize_ObjectVariant>:
 8016bf0:	b570      	push	{r4, r5, r6, lr}
 8016bf2:	4605      	mov	r5, r0
 8016bf4:	460e      	mov	r6, r1
 8016bf6:	f7f5 fedb 	bl	800c9b0 <ucdr_deserialize_uint8_t>
 8016bfa:	b168      	cbz	r0, 8016c18 <uxr_deserialize_ObjectVariant+0x28>
 8016bfc:	7833      	ldrb	r3, [r6, #0]
 8016bfe:	4604      	mov	r4, r0
 8016c00:	3b01      	subs	r3, #1
 8016c02:	2b0d      	cmp	r3, #13
 8016c04:	d809      	bhi.n	8016c1a <uxr_deserialize_ObjectVariant+0x2a>
 8016c06:	e8df f003 	tbb	[pc, r3]
 8016c0a:	0a41      	.short	0x0a41
 8016c0c:	0a0a2323 	.word	0x0a0a2323
 8016c10:	10080a0a 	.word	0x10080a0a
 8016c14:	565c1010 	.word	0x565c1010
 8016c18:	2400      	movs	r4, #0
 8016c1a:	4620      	mov	r0, r4
 8016c1c:	bd70      	pop	{r4, r5, r6, pc}
 8016c1e:	1d31      	adds	r1, r6, #4
 8016c20:	4628      	mov	r0, r5
 8016c22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016c26:	f7ff bf63 	b.w	8016af0 <uxr_deserialize_DATAWRITER_Representation>
 8016c2a:	1d31      	adds	r1, r6, #4
 8016c2c:	4628      	mov	r0, r5
 8016c2e:	f7f5 febf 	bl	800c9b0 <ucdr_deserialize_uint8_t>
 8016c32:	2800      	cmp	r0, #0
 8016c34:	d0f0      	beq.n	8016c18 <uxr_deserialize_ObjectVariant+0x28>
 8016c36:	7933      	ldrb	r3, [r6, #4]
 8016c38:	2b01      	cmp	r3, #1
 8016c3a:	d001      	beq.n	8016c40 <uxr_deserialize_ObjectVariant+0x50>
 8016c3c:	2b02      	cmp	r3, #2
 8016c3e:	d1ec      	bne.n	8016c1a <uxr_deserialize_ObjectVariant+0x2a>
 8016c40:	68b1      	ldr	r1, [r6, #8]
 8016c42:	4628      	mov	r0, r5
 8016c44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016c48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016c4c:	f001 bb68 	b.w	8018320 <ucdr_deserialize_string>
 8016c50:	1d31      	adds	r1, r6, #4
 8016c52:	4628      	mov	r0, r5
 8016c54:	f7f5 feac 	bl	800c9b0 <ucdr_deserialize_uint8_t>
 8016c58:	4604      	mov	r4, r0
 8016c5a:	b170      	cbz	r0, 8016c7a <uxr_deserialize_ObjectVariant+0x8a>
 8016c5c:	7933      	ldrb	r3, [r6, #4]
 8016c5e:	2b02      	cmp	r3, #2
 8016c60:	d04c      	beq.n	8016cfc <uxr_deserialize_ObjectVariant+0x10c>
 8016c62:	2b03      	cmp	r3, #3
 8016c64:	d109      	bne.n	8016c7a <uxr_deserialize_ObjectVariant+0x8a>
 8016c66:	f106 0308 	add.w	r3, r6, #8
 8016c6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016c6e:	f106 010c 	add.w	r1, r6, #12
 8016c72:	4628      	mov	r0, r5
 8016c74:	f7f7 f9a2 	bl	800dfbc <ucdr_deserialize_sequence_uint8_t>
 8016c78:	4604      	mov	r4, r0
 8016c7a:	2202      	movs	r2, #2
 8016c7c:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8016c80:	4628      	mov	r0, r5
 8016c82:	f7f5 fde9 	bl	800c858 <ucdr_deserialize_array_uint8_t>
 8016c86:	4020      	ands	r0, r4
 8016c88:	b2c4      	uxtb	r4, r0
 8016c8a:	e7c6      	b.n	8016c1a <uxr_deserialize_ObjectVariant+0x2a>
 8016c8c:	1d31      	adds	r1, r6, #4
 8016c8e:	4628      	mov	r0, r5
 8016c90:	f7f5 fe8e 	bl	800c9b0 <ucdr_deserialize_uint8_t>
 8016c94:	4604      	mov	r4, r0
 8016c96:	b130      	cbz	r0, 8016ca6 <uxr_deserialize_ObjectVariant+0xb6>
 8016c98:	7933      	ldrb	r3, [r6, #4]
 8016c9a:	2b02      	cmp	r3, #2
 8016c9c:	d036      	beq.n	8016d0c <uxr_deserialize_ObjectVariant+0x11c>
 8016c9e:	2b03      	cmp	r3, #3
 8016ca0:	d03c      	beq.n	8016d1c <uxr_deserialize_ObjectVariant+0x12c>
 8016ca2:	2b01      	cmp	r3, #1
 8016ca4:	d032      	beq.n	8016d0c <uxr_deserialize_ObjectVariant+0x11c>
 8016ca6:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8016caa:	4628      	mov	r0, r5
 8016cac:	f7f6 fc26 	bl	800d4fc <ucdr_deserialize_int16_t>
 8016cb0:	4020      	ands	r0, r4
 8016cb2:	b2c4      	uxtb	r4, r0
 8016cb4:	e7b1      	b.n	8016c1a <uxr_deserialize_ObjectVariant+0x2a>
 8016cb6:	1d31      	adds	r1, r6, #4
 8016cb8:	4628      	mov	r0, r5
 8016cba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016cbe:	f7ff bdcd 	b.w	801685c <uxr_deserialize_CLIENT_Representation>
 8016cc2:	2204      	movs	r2, #4
 8016cc4:	4628      	mov	r0, r5
 8016cc6:	18b1      	adds	r1, r6, r2
 8016cc8:	f7f5 fdc6 	bl	800c858 <ucdr_deserialize_array_uint8_t>
 8016ccc:	4604      	mov	r4, r0
 8016cce:	2202      	movs	r2, #2
 8016cd0:	f106 0108 	add.w	r1, r6, #8
 8016cd4:	4628      	mov	r0, r5
 8016cd6:	f7f5 fdbf 	bl	800c858 <ucdr_deserialize_array_uint8_t>
 8016cda:	4004      	ands	r4, r0
 8016cdc:	2202      	movs	r2, #2
 8016cde:	f106 010a 	add.w	r1, r6, #10
 8016ce2:	4628      	mov	r0, r5
 8016ce4:	b2e4      	uxtb	r4, r4
 8016ce6:	f7f5 fdb7 	bl	800c858 <ucdr_deserialize_array_uint8_t>
 8016cea:	4603      	mov	r3, r0
 8016cec:	f106 010c 	add.w	r1, r6, #12
 8016cf0:	4628      	mov	r0, r5
 8016cf2:	401c      	ands	r4, r3
 8016cf4:	f7f5 fe2e 	bl	800c954 <ucdr_deserialize_bool>
 8016cf8:	4004      	ands	r4, r0
 8016cfa:	e78e      	b.n	8016c1a <uxr_deserialize_ObjectVariant+0x2a>
 8016cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016d00:	68b1      	ldr	r1, [r6, #8]
 8016d02:	4628      	mov	r0, r5
 8016d04:	f001 fb0c 	bl	8018320 <ucdr_deserialize_string>
 8016d08:	4604      	mov	r4, r0
 8016d0a:	e7b6      	b.n	8016c7a <uxr_deserialize_ObjectVariant+0x8a>
 8016d0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016d10:	68b1      	ldr	r1, [r6, #8]
 8016d12:	4628      	mov	r0, r5
 8016d14:	f001 fb04 	bl	8018320 <ucdr_deserialize_string>
 8016d18:	4604      	mov	r4, r0
 8016d1a:	e7c4      	b.n	8016ca6 <uxr_deserialize_ObjectVariant+0xb6>
 8016d1c:	f106 0308 	add.w	r3, r6, #8
 8016d20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016d24:	f106 010c 	add.w	r1, r6, #12
 8016d28:	4628      	mov	r0, r5
 8016d2a:	f7f7 f947 	bl	800dfbc <ucdr_deserialize_sequence_uint8_t>
 8016d2e:	4604      	mov	r4, r0
 8016d30:	e7b9      	b.n	8016ca6 <uxr_deserialize_ObjectVariant+0xb6>
 8016d32:	bf00      	nop

08016d34 <uxr_deserialize_BaseObjectRequest>:
 8016d34:	b570      	push	{r4, r5, r6, lr}
 8016d36:	2202      	movs	r2, #2
 8016d38:	4605      	mov	r5, r0
 8016d3a:	460e      	mov	r6, r1
 8016d3c:	f7f5 fd8c 	bl	800c858 <ucdr_deserialize_array_uint8_t>
 8016d40:	2202      	movs	r2, #2
 8016d42:	4604      	mov	r4, r0
 8016d44:	4628      	mov	r0, r5
 8016d46:	18b1      	adds	r1, r6, r2
 8016d48:	f7f5 fd86 	bl	800c858 <ucdr_deserialize_array_uint8_t>
 8016d4c:	4020      	ands	r0, r4
 8016d4e:	b2c0      	uxtb	r0, r0
 8016d50:	bd70      	pop	{r4, r5, r6, pc}
 8016d52:	bf00      	nop

08016d54 <uxr_serialize_ActivityInfoVariant>:
 8016d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d58:	460e      	mov	r6, r1
 8016d5a:	7809      	ldrb	r1, [r1, #0]
 8016d5c:	4680      	mov	r8, r0
 8016d5e:	f7f5 fe11 	bl	800c984 <ucdr_serialize_uint8_t>
 8016d62:	4607      	mov	r7, r0
 8016d64:	b138      	cbz	r0, 8016d76 <uxr_serialize_ActivityInfoVariant+0x22>
 8016d66:	7833      	ldrb	r3, [r6, #0]
 8016d68:	2b06      	cmp	r3, #6
 8016d6a:	f000 8081 	beq.w	8016e70 <uxr_serialize_ActivityInfoVariant+0x11c>
 8016d6e:	2b0d      	cmp	r3, #13
 8016d70:	d014      	beq.n	8016d9c <uxr_serialize_ActivityInfoVariant+0x48>
 8016d72:	2b05      	cmp	r3, #5
 8016d74:	d002      	beq.n	8016d7c <uxr_serialize_ActivityInfoVariant+0x28>
 8016d76:	4638      	mov	r0, r7
 8016d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d7c:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8016d80:	4640      	mov	r0, r8
 8016d82:	f7f6 fb3b 	bl	800d3fc <ucdr_serialize_int16_t>
 8016d86:	4607      	mov	r7, r0
 8016d88:	4640      	mov	r0, r8
 8016d8a:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 8016d8e:	f7f6 fa65 	bl	800d25c <ucdr_serialize_uint64_t>
 8016d92:	4038      	ands	r0, r7
 8016d94:	b2c7      	uxtb	r7, r0
 8016d96:	4638      	mov	r0, r7
 8016d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d9c:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8016da0:	4640      	mov	r0, r8
 8016da2:	f7f6 fb2b 	bl	800d3fc <ucdr_serialize_int16_t>
 8016da6:	68f1      	ldr	r1, [r6, #12]
 8016da8:	4607      	mov	r7, r0
 8016daa:	4640      	mov	r0, r8
 8016dac:	f7f6 f800 	bl	800cdb0 <ucdr_serialize_uint32_t>
 8016db0:	68f3      	ldr	r3, [r6, #12]
 8016db2:	2b00      	cmp	r3, #0
 8016db4:	d0ed      	beq.n	8016d92 <uxr_serialize_ActivityInfoVariant+0x3e>
 8016db6:	b318      	cbz	r0, 8016e00 <uxr_serialize_ActivityInfoVariant+0xac>
 8016db8:	f106 090c 	add.w	r9, r6, #12
 8016dbc:	2400      	movs	r4, #0
 8016dbe:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8016dc2:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 8016dc6:	7c29      	ldrb	r1, [r5, #16]
 8016dc8:	4640      	mov	r0, r8
 8016dca:	f7f5 fddb 	bl	800c984 <ucdr_serialize_uint8_t>
 8016dce:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 8016dd2:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8016dd6:	2800      	cmp	r0, #0
 8016dd8:	d051      	beq.n	8016e7e <uxr_serialize_ActivityInfoVariant+0x12a>
 8016dda:	7c2b      	ldrb	r3, [r5, #16]
 8016ddc:	00c9      	lsls	r1, r1, #3
 8016dde:	2b03      	cmp	r3, #3
 8016de0:	d854      	bhi.n	8016e8c <uxr_serialize_ActivityInfoVariant+0x138>
 8016de2:	e8df f003 	tbb	[pc, r3]
 8016de6:	2133      	.short	0x2133
 8016de8:	020f      	.short	0x020f
 8016dea:	4449      	add	r1, r9
 8016dec:	4640      	mov	r0, r8
 8016dee:	6889      	ldr	r1, [r1, #8]
 8016df0:	f001 fa86 	bl	8018300 <ucdr_serialize_string>
 8016df4:	3401      	adds	r4, #1
 8016df6:	68f2      	ldr	r2, [r6, #12]
 8016df8:	4294      	cmp	r4, r2
 8016dfa:	d244      	bcs.n	8016e86 <uxr_serialize_ActivityInfoVariant+0x132>
 8016dfc:	2800      	cmp	r0, #0
 8016dfe:	d1de      	bne.n	8016dbe <uxr_serialize_ActivityInfoVariant+0x6a>
 8016e00:	2700      	movs	r7, #0
 8016e02:	e7b8      	b.n	8016d76 <uxr_serialize_ActivityInfoVariant+0x22>
 8016e04:	3108      	adds	r1, #8
 8016e06:	44a2      	add	sl, r4
 8016e08:	2210      	movs	r2, #16
 8016e0a:	4640      	mov	r0, r8
 8016e0c:	4449      	add	r1, r9
 8016e0e:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8016e12:	f7f5 fcbd 	bl	800c790 <ucdr_serialize_array_uint8_t>
 8016e16:	4605      	mov	r5, r0
 8016e18:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
 8016e1c:	4640      	mov	r0, r8
 8016e1e:	f7f5 ffc7 	bl	800cdb0 <ucdr_serialize_uint32_t>
 8016e22:	4028      	ands	r0, r5
 8016e24:	b2c0      	uxtb	r0, r0
 8016e26:	e7e5      	b.n	8016df4 <uxr_serialize_ActivityInfoVariant+0xa0>
 8016e28:	3108      	adds	r1, #8
 8016e2a:	44a2      	add	sl, r4
 8016e2c:	2204      	movs	r2, #4
 8016e2e:	4640      	mov	r0, r8
 8016e30:	4449      	add	r1, r9
 8016e32:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8016e36:	f7f5 fcab 	bl	800c790 <ucdr_serialize_array_uint8_t>
 8016e3a:	4605      	mov	r5, r0
 8016e3c:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 8016e40:	4640      	mov	r0, r8
 8016e42:	f7f5 fdcb 	bl	800c9dc <ucdr_serialize_uint16_t>
 8016e46:	4028      	ands	r0, r5
 8016e48:	b2c0      	uxtb	r0, r0
 8016e4a:	e7d3      	b.n	8016df4 <uxr_serialize_ActivityInfoVariant+0xa0>
 8016e4c:	3108      	adds	r1, #8
 8016e4e:	44a2      	add	sl, r4
 8016e50:	2202      	movs	r2, #2
 8016e52:	4640      	mov	r0, r8
 8016e54:	4449      	add	r1, r9
 8016e56:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8016e5a:	f7f5 fc99 	bl	800c790 <ucdr_serialize_array_uint8_t>
 8016e5e:	4605      	mov	r5, r0
 8016e60:	f89a 1016 	ldrb.w	r1, [sl, #22]
 8016e64:	4640      	mov	r0, r8
 8016e66:	f7f5 fd8d 	bl	800c984 <ucdr_serialize_uint8_t>
 8016e6a:	4028      	ands	r0, r5
 8016e6c:	b2c0      	uxtb	r0, r0
 8016e6e:	e7c1      	b.n	8016df4 <uxr_serialize_ActivityInfoVariant+0xa0>
 8016e70:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8016e74:	4640      	mov	r0, r8
 8016e76:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016e7a:	f7f6 babf 	b.w	800d3fc <ucdr_serialize_int16_t>
 8016e7e:	3401      	adds	r4, #1
 8016e80:	68f2      	ldr	r2, [r6, #12]
 8016e82:	42a2      	cmp	r2, r4
 8016e84:	d8bc      	bhi.n	8016e00 <uxr_serialize_ActivityInfoVariant+0xac>
 8016e86:	4007      	ands	r7, r0
 8016e88:	b2ff      	uxtb	r7, r7
 8016e8a:	e774      	b.n	8016d76 <uxr_serialize_ActivityInfoVariant+0x22>
 8016e8c:	3401      	adds	r4, #1
 8016e8e:	68f3      	ldr	r3, [r6, #12]
 8016e90:	3518      	adds	r5, #24
 8016e92:	429c      	cmp	r4, r3
 8016e94:	d397      	bcc.n	8016dc6 <uxr_serialize_ActivityInfoVariant+0x72>
 8016e96:	e76e      	b.n	8016d76 <uxr_serialize_ActivityInfoVariant+0x22>

08016e98 <uxr_deserialize_BaseObjectReply>:
 8016e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e9c:	2202      	movs	r2, #2
 8016e9e:	4606      	mov	r6, r0
 8016ea0:	460f      	mov	r7, r1
 8016ea2:	f7f5 fcd9 	bl	800c858 <ucdr_deserialize_array_uint8_t>
 8016ea6:	2202      	movs	r2, #2
 8016ea8:	4605      	mov	r5, r0
 8016eaa:	4630      	mov	r0, r6
 8016eac:	18b9      	adds	r1, r7, r2
 8016eae:	f7f5 fcd3 	bl	800c858 <ucdr_deserialize_array_uint8_t>
 8016eb2:	4680      	mov	r8, r0
 8016eb4:	1d39      	adds	r1, r7, #4
 8016eb6:	4630      	mov	r0, r6
 8016eb8:	f7f5 fd7a 	bl	800c9b0 <ucdr_deserialize_uint8_t>
 8016ebc:	ea05 0508 	and.w	r5, r5, r8
 8016ec0:	4604      	mov	r4, r0
 8016ec2:	1d79      	adds	r1, r7, #5
 8016ec4:	4630      	mov	r0, r6
 8016ec6:	402c      	ands	r4, r5
 8016ec8:	f7f5 fd72 	bl	800c9b0 <ucdr_deserialize_uint8_t>
 8016ecc:	4020      	ands	r0, r4
 8016ece:	b2c0      	uxtb	r0, r0
 8016ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016ed4 <uxr_serialize_ReadSpecification>:
 8016ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ed6:	460e      	mov	r6, r1
 8016ed8:	4607      	mov	r7, r0
 8016eda:	7809      	ldrb	r1, [r1, #0]
 8016edc:	f7f5 fd52 	bl	800c984 <ucdr_serialize_uint8_t>
 8016ee0:	4604      	mov	r4, r0
 8016ee2:	7871      	ldrb	r1, [r6, #1]
 8016ee4:	4638      	mov	r0, r7
 8016ee6:	f7f5 fd4d 	bl	800c984 <ucdr_serialize_uint8_t>
 8016eea:	4004      	ands	r4, r0
 8016eec:	78b1      	ldrb	r1, [r6, #2]
 8016eee:	4638      	mov	r0, r7
 8016ef0:	f7f5 fd1a 	bl	800c928 <ucdr_serialize_bool>
 8016ef4:	78b3      	ldrb	r3, [r6, #2]
 8016ef6:	b2e4      	uxtb	r4, r4
 8016ef8:	4004      	ands	r4, r0
 8016efa:	b943      	cbnz	r3, 8016f0e <uxr_serialize_ReadSpecification+0x3a>
 8016efc:	7a31      	ldrb	r1, [r6, #8]
 8016efe:	4638      	mov	r0, r7
 8016f00:	f7f5 fd12 	bl	800c928 <ucdr_serialize_bool>
 8016f04:	7a33      	ldrb	r3, [r6, #8]
 8016f06:	4004      	ands	r4, r0
 8016f08:	b93b      	cbnz	r3, 8016f1a <uxr_serialize_ReadSpecification+0x46>
 8016f0a:	4620      	mov	r0, r4
 8016f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f0e:	6871      	ldr	r1, [r6, #4]
 8016f10:	4638      	mov	r0, r7
 8016f12:	f001 f9f5 	bl	8018300 <ucdr_serialize_string>
 8016f16:	4004      	ands	r4, r0
 8016f18:	e7f0      	b.n	8016efc <uxr_serialize_ReadSpecification+0x28>
 8016f1a:	8971      	ldrh	r1, [r6, #10]
 8016f1c:	4638      	mov	r0, r7
 8016f1e:	f7f5 fd5d 	bl	800c9dc <ucdr_serialize_uint16_t>
 8016f22:	4605      	mov	r5, r0
 8016f24:	89b1      	ldrh	r1, [r6, #12]
 8016f26:	4638      	mov	r0, r7
 8016f28:	f7f5 fd58 	bl	800c9dc <ucdr_serialize_uint16_t>
 8016f2c:	4005      	ands	r5, r0
 8016f2e:	89f1      	ldrh	r1, [r6, #14]
 8016f30:	4638      	mov	r0, r7
 8016f32:	b2ed      	uxtb	r5, r5
 8016f34:	f7f5 fd52 	bl	800c9dc <ucdr_serialize_uint16_t>
 8016f38:	8a31      	ldrh	r1, [r6, #16]
 8016f3a:	4025      	ands	r5, r4
 8016f3c:	4604      	mov	r4, r0
 8016f3e:	4638      	mov	r0, r7
 8016f40:	4025      	ands	r5, r4
 8016f42:	f7f5 fd4b 	bl	800c9dc <ucdr_serialize_uint16_t>
 8016f46:	ea00 0405 	and.w	r4, r0, r5
 8016f4a:	4620      	mov	r0, r4
 8016f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f4e:	bf00      	nop

08016f50 <uxr_serialize_CREATE_CLIENT_Payload>:
 8016f50:	f7ff bc2c 	b.w	80167ac <uxr_serialize_CLIENT_Representation>

08016f54 <uxr_serialize_CREATE_Payload>:
 8016f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f56:	2202      	movs	r2, #2
 8016f58:	4607      	mov	r7, r0
 8016f5a:	460e      	mov	r6, r1
 8016f5c:	f7f5 fc18 	bl	800c790 <ucdr_serialize_array_uint8_t>
 8016f60:	2202      	movs	r2, #2
 8016f62:	4605      	mov	r5, r0
 8016f64:	4638      	mov	r0, r7
 8016f66:	18b1      	adds	r1, r6, r2
 8016f68:	f7f5 fc12 	bl	800c790 <ucdr_serialize_array_uint8_t>
 8016f6c:	7931      	ldrb	r1, [r6, #4]
 8016f6e:	4604      	mov	r4, r0
 8016f70:	4638      	mov	r0, r7
 8016f72:	f7f5 fd07 	bl	800c984 <ucdr_serialize_uint8_t>
 8016f76:	b170      	cbz	r0, 8016f96 <uxr_serialize_CREATE_Payload+0x42>
 8016f78:	7933      	ldrb	r3, [r6, #4]
 8016f7a:	402c      	ands	r4, r5
 8016f7c:	3b01      	subs	r3, #1
 8016f7e:	b2e4      	uxtb	r4, r4
 8016f80:	2b0d      	cmp	r3, #13
 8016f82:	d809      	bhi.n	8016f98 <uxr_serialize_CREATE_Payload+0x44>
 8016f84:	e8df f003 	tbb	[pc, r3]
 8016f88:	23230a4c 	.word	0x23230a4c
 8016f8c:	0a0a0a0a 	.word	0x0a0a0a0a
 8016f90:	12121208 	.word	0x12121208
 8016f94:	3e45      	.short	0x3e45
 8016f96:	2400      	movs	r4, #0
 8016f98:	4620      	mov	r0, r4
 8016f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f9c:	f106 0108 	add.w	r1, r6, #8
 8016fa0:	4638      	mov	r0, r7
 8016fa2:	f7ff fd09 	bl	80169b8 <uxr_serialize_DATAWRITER_Representation>
 8016fa6:	4004      	ands	r4, r0
 8016fa8:	4620      	mov	r0, r4
 8016faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016fac:	7a31      	ldrb	r1, [r6, #8]
 8016fae:	4638      	mov	r0, r7
 8016fb0:	f7f5 fce8 	bl	800c984 <ucdr_serialize_uint8_t>
 8016fb4:	2800      	cmp	r0, #0
 8016fb6:	d0ee      	beq.n	8016f96 <uxr_serialize_CREATE_Payload+0x42>
 8016fb8:	7a33      	ldrb	r3, [r6, #8]
 8016fba:	2b01      	cmp	r3, #1
 8016fbc:	d001      	beq.n	8016fc2 <uxr_serialize_CREATE_Payload+0x6e>
 8016fbe:	2b02      	cmp	r3, #2
 8016fc0:	d1ea      	bne.n	8016f98 <uxr_serialize_CREATE_Payload+0x44>
 8016fc2:	68f1      	ldr	r1, [r6, #12]
 8016fc4:	4638      	mov	r0, r7
 8016fc6:	f001 f99b 	bl	8018300 <ucdr_serialize_string>
 8016fca:	4004      	ands	r4, r0
 8016fcc:	e7e4      	b.n	8016f98 <uxr_serialize_CREATE_Payload+0x44>
 8016fce:	7a31      	ldrb	r1, [r6, #8]
 8016fd0:	4638      	mov	r0, r7
 8016fd2:	f7f5 fcd7 	bl	800c984 <ucdr_serialize_uint8_t>
 8016fd6:	4605      	mov	r5, r0
 8016fd8:	b158      	cbz	r0, 8016ff2 <uxr_serialize_CREATE_Payload+0x9e>
 8016fda:	7a33      	ldrb	r3, [r6, #8]
 8016fdc:	2b02      	cmp	r3, #2
 8016fde:	d034      	beq.n	801704a <uxr_serialize_CREATE_Payload+0xf6>
 8016fe0:	2b03      	cmp	r3, #3
 8016fe2:	d106      	bne.n	8016ff2 <uxr_serialize_CREATE_Payload+0x9e>
 8016fe4:	68f2      	ldr	r2, [r6, #12]
 8016fe6:	f106 0110 	add.w	r1, r6, #16
 8016fea:	4638      	mov	r0, r7
 8016fec:	f7f6 ffd4 	bl	800df98 <ucdr_serialize_sequence_uint8_t>
 8016ff0:	4605      	mov	r5, r0
 8016ff2:	2202      	movs	r2, #2
 8016ff4:	f506 7104 	add.w	r1, r6, #528	; 0x210
 8016ff8:	4638      	mov	r0, r7
 8016ffa:	f7f5 fbc9 	bl	800c790 <ucdr_serialize_array_uint8_t>
 8016ffe:	4028      	ands	r0, r5
 8017000:	4004      	ands	r4, r0
 8017002:	e7c9      	b.n	8016f98 <uxr_serialize_CREATE_Payload+0x44>
 8017004:	f106 0108 	add.w	r1, r6, #8
 8017008:	4638      	mov	r0, r7
 801700a:	f7ff fbcf 	bl	80167ac <uxr_serialize_CLIENT_Representation>
 801700e:	4004      	ands	r4, r0
 8017010:	e7c2      	b.n	8016f98 <uxr_serialize_CREATE_Payload+0x44>
 8017012:	f106 0108 	add.w	r1, r6, #8
 8017016:	4638      	mov	r0, r7
 8017018:	f7ff fc84 	bl	8016924 <uxr_serialize_AGENT_Representation>
 801701c:	4004      	ands	r4, r0
 801701e:	e7bb      	b.n	8016f98 <uxr_serialize_CREATE_Payload+0x44>
 8017020:	7a31      	ldrb	r1, [r6, #8]
 8017022:	4638      	mov	r0, r7
 8017024:	f7f5 fcae 	bl	800c984 <ucdr_serialize_uint8_t>
 8017028:	4605      	mov	r5, r0
 801702a:	b130      	cbz	r0, 801703a <uxr_serialize_CREATE_Payload+0xe6>
 801702c:	7a33      	ldrb	r3, [r6, #8]
 801702e:	2b02      	cmp	r3, #2
 8017030:	d011      	beq.n	8017056 <uxr_serialize_CREATE_Payload+0x102>
 8017032:	2b03      	cmp	r3, #3
 8017034:	d015      	beq.n	8017062 <uxr_serialize_CREATE_Payload+0x10e>
 8017036:	2b01      	cmp	r3, #1
 8017038:	d00d      	beq.n	8017056 <uxr_serialize_CREATE_Payload+0x102>
 801703a:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 801703e:	4638      	mov	r0, r7
 8017040:	f7f6 f9dc 	bl	800d3fc <ucdr_serialize_int16_t>
 8017044:	4028      	ands	r0, r5
 8017046:	4004      	ands	r4, r0
 8017048:	e7a6      	b.n	8016f98 <uxr_serialize_CREATE_Payload+0x44>
 801704a:	68f1      	ldr	r1, [r6, #12]
 801704c:	4638      	mov	r0, r7
 801704e:	f001 f957 	bl	8018300 <ucdr_serialize_string>
 8017052:	4605      	mov	r5, r0
 8017054:	e7cd      	b.n	8016ff2 <uxr_serialize_CREATE_Payload+0x9e>
 8017056:	68f1      	ldr	r1, [r6, #12]
 8017058:	4638      	mov	r0, r7
 801705a:	f001 f951 	bl	8018300 <ucdr_serialize_string>
 801705e:	4605      	mov	r5, r0
 8017060:	e7eb      	b.n	801703a <uxr_serialize_CREATE_Payload+0xe6>
 8017062:	68f2      	ldr	r2, [r6, #12]
 8017064:	f106 0110 	add.w	r1, r6, #16
 8017068:	4638      	mov	r0, r7
 801706a:	f7f6 ff95 	bl	800df98 <ucdr_serialize_sequence_uint8_t>
 801706e:	4605      	mov	r5, r0
 8017070:	e7e3      	b.n	801703a <uxr_serialize_CREATE_Payload+0xe6>
 8017072:	bf00      	nop

08017074 <uxr_deserialize_GET_INFO_Payload>:
 8017074:	b570      	push	{r4, r5, r6, lr}
 8017076:	2202      	movs	r2, #2
 8017078:	4605      	mov	r5, r0
 801707a:	460e      	mov	r6, r1
 801707c:	f7f5 fbec 	bl	800c858 <ucdr_deserialize_array_uint8_t>
 8017080:	2202      	movs	r2, #2
 8017082:	4604      	mov	r4, r0
 8017084:	4628      	mov	r0, r5
 8017086:	18b1      	adds	r1, r6, r2
 8017088:	f7f5 fbe6 	bl	800c858 <ucdr_deserialize_array_uint8_t>
 801708c:	4603      	mov	r3, r0
 801708e:	1d31      	adds	r1, r6, #4
 8017090:	4628      	mov	r0, r5
 8017092:	401c      	ands	r4, r3
 8017094:	f7f5 ffbc 	bl	800d010 <ucdr_deserialize_uint32_t>
 8017098:	b2e4      	uxtb	r4, r4
 801709a:	4020      	ands	r0, r4
 801709c:	bd70      	pop	{r4, r5, r6, pc}
 801709e:	bf00      	nop

080170a0 <uxr_serialize_DELETE_Payload>:
 80170a0:	b570      	push	{r4, r5, r6, lr}
 80170a2:	2202      	movs	r2, #2
 80170a4:	4605      	mov	r5, r0
 80170a6:	460e      	mov	r6, r1
 80170a8:	f7f5 fb72 	bl	800c790 <ucdr_serialize_array_uint8_t>
 80170ac:	2202      	movs	r2, #2
 80170ae:	4604      	mov	r4, r0
 80170b0:	4628      	mov	r0, r5
 80170b2:	18b1      	adds	r1, r6, r2
 80170b4:	f7f5 fb6c 	bl	800c790 <ucdr_serialize_array_uint8_t>
 80170b8:	4020      	ands	r0, r4
 80170ba:	b2c0      	uxtb	r0, r0
 80170bc:	bd70      	pop	{r4, r5, r6, pc}
 80170be:	bf00      	nop

080170c0 <uxr_deserialize_STATUS_AGENT_Payload>:
 80170c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80170c4:	460e      	mov	r6, r1
 80170c6:	4605      	mov	r5, r0
 80170c8:	f7f5 fc72 	bl	800c9b0 <ucdr_deserialize_uint8_t>
 80170cc:	4604      	mov	r4, r0
 80170ce:	1c71      	adds	r1, r6, #1
 80170d0:	4628      	mov	r0, r5
 80170d2:	f7f5 fc6d 	bl	800c9b0 <ucdr_deserialize_uint8_t>
 80170d6:	2204      	movs	r2, #4
 80170d8:	4681      	mov	r9, r0
 80170da:	4628      	mov	r0, r5
 80170dc:	18b1      	adds	r1, r6, r2
 80170de:	f7f5 fbbb 	bl	800c858 <ucdr_deserialize_array_uint8_t>
 80170e2:	f106 0108 	add.w	r1, r6, #8
 80170e6:	4680      	mov	r8, r0
 80170e8:	2202      	movs	r2, #2
 80170ea:	4628      	mov	r0, r5
 80170ec:	f7f5 fbb4 	bl	800c858 <ucdr_deserialize_array_uint8_t>
 80170f0:	ea04 0309 	and.w	r3, r4, r9
 80170f4:	4607      	mov	r7, r0
 80170f6:	2202      	movs	r2, #2
 80170f8:	b2db      	uxtb	r3, r3
 80170fa:	f106 010a 	add.w	r1, r6, #10
 80170fe:	4628      	mov	r0, r5
 8017100:	ea03 0408 	and.w	r4, r3, r8
 8017104:	f7f5 fba8 	bl	800c858 <ucdr_deserialize_array_uint8_t>
 8017108:	4603      	mov	r3, r0
 801710a:	4628      	mov	r0, r5
 801710c:	403c      	ands	r4, r7
 801710e:	f106 010c 	add.w	r1, r6, #12
 8017112:	461d      	mov	r5, r3
 8017114:	f7f5 fc1e 	bl	800c954 <ucdr_deserialize_bool>
 8017118:	4025      	ands	r5, r4
 801711a:	4028      	ands	r0, r5
 801711c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08017120 <uxr_deserialize_STATUS_Payload>:
 8017120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017124:	2202      	movs	r2, #2
 8017126:	4606      	mov	r6, r0
 8017128:	460f      	mov	r7, r1
 801712a:	f7f5 fb95 	bl	800c858 <ucdr_deserialize_array_uint8_t>
 801712e:	2202      	movs	r2, #2
 8017130:	4605      	mov	r5, r0
 8017132:	4630      	mov	r0, r6
 8017134:	18b9      	adds	r1, r7, r2
 8017136:	f7f5 fb8f 	bl	800c858 <ucdr_deserialize_array_uint8_t>
 801713a:	4680      	mov	r8, r0
 801713c:	1d39      	adds	r1, r7, #4
 801713e:	4630      	mov	r0, r6
 8017140:	f7f5 fc36 	bl	800c9b0 <ucdr_deserialize_uint8_t>
 8017144:	ea05 0508 	and.w	r5, r5, r8
 8017148:	4604      	mov	r4, r0
 801714a:	1d79      	adds	r1, r7, #5
 801714c:	4630      	mov	r0, r6
 801714e:	402c      	ands	r4, r5
 8017150:	f7f5 fc2e 	bl	800c9b0 <ucdr_deserialize_uint8_t>
 8017154:	4020      	ands	r0, r4
 8017156:	b2c0      	uxtb	r0, r0
 8017158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801715c <uxr_serialize_INFO_Payload>:
 801715c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017160:	2202      	movs	r2, #2
 8017162:	460c      	mov	r4, r1
 8017164:	4605      	mov	r5, r0
 8017166:	f7f5 fb13 	bl	800c790 <ucdr_serialize_array_uint8_t>
 801716a:	2202      	movs	r2, #2
 801716c:	4680      	mov	r8, r0
 801716e:	4628      	mov	r0, r5
 8017170:	18a1      	adds	r1, r4, r2
 8017172:	f7f5 fb0d 	bl	800c790 <ucdr_serialize_array_uint8_t>
 8017176:	4607      	mov	r7, r0
 8017178:	7921      	ldrb	r1, [r4, #4]
 801717a:	4628      	mov	r0, r5
 801717c:	f7f5 fc02 	bl	800c984 <ucdr_serialize_uint8_t>
 8017180:	ea08 0807 	and.w	r8, r8, r7
 8017184:	4606      	mov	r6, r0
 8017186:	7961      	ldrb	r1, [r4, #5]
 8017188:	4628      	mov	r0, r5
 801718a:	ea06 0608 	and.w	r6, r6, r8
 801718e:	f7f5 fbf9 	bl	800c984 <ucdr_serialize_uint8_t>
 8017192:	7a21      	ldrb	r1, [r4, #8]
 8017194:	4030      	ands	r0, r6
 8017196:	b2c7      	uxtb	r7, r0
 8017198:	4628      	mov	r0, r5
 801719a:	f7f5 fbc5 	bl	800c928 <ucdr_serialize_bool>
 801719e:	7a23      	ldrb	r3, [r4, #8]
 80171a0:	4606      	mov	r6, r0
 80171a2:	b96b      	cbnz	r3, 80171c0 <uxr_serialize_INFO_Payload+0x64>
 80171a4:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 80171a8:	4628      	mov	r0, r5
 80171aa:	f7f5 fbbd 	bl	800c928 <ucdr_serialize_bool>
 80171ae:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 80171b2:	4030      	ands	r0, r6
 80171b4:	b2c6      	uxtb	r6, r0
 80171b6:	b983      	cbnz	r3, 80171da <uxr_serialize_INFO_Payload+0x7e>
 80171b8:	ea06 0007 	and.w	r0, r6, r7
 80171bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80171c0:	7b21      	ldrb	r1, [r4, #12]
 80171c2:	4628      	mov	r0, r5
 80171c4:	f7f5 fbde 	bl	800c984 <ucdr_serialize_uint8_t>
 80171c8:	b188      	cbz	r0, 80171ee <uxr_serialize_INFO_Payload+0x92>
 80171ca:	f104 010c 	add.w	r1, r4, #12
 80171ce:	4628      	mov	r0, r5
 80171d0:	f7ff fc1a 	bl	8016a08 <uxr_serialize_ObjectVariant.part.0>
 80171d4:	4030      	ands	r0, r6
 80171d6:	b2c6      	uxtb	r6, r0
 80171d8:	e7e4      	b.n	80171a4 <uxr_serialize_INFO_Payload+0x48>
 80171da:	f504 7108 	add.w	r1, r4, #544	; 0x220
 80171de:	4628      	mov	r0, r5
 80171e0:	f7ff fdb8 	bl	8016d54 <uxr_serialize_ActivityInfoVariant>
 80171e4:	4006      	ands	r6, r0
 80171e6:	ea06 0007 	and.w	r0, r6, r7
 80171ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80171ee:	4606      	mov	r6, r0
 80171f0:	e7d8      	b.n	80171a4 <uxr_serialize_INFO_Payload+0x48>
 80171f2:	bf00      	nop

080171f4 <uxr_serialize_READ_DATA_Payload>:
 80171f4:	b570      	push	{r4, r5, r6, lr}
 80171f6:	2202      	movs	r2, #2
 80171f8:	4605      	mov	r5, r0
 80171fa:	460e      	mov	r6, r1
 80171fc:	f7f5 fac8 	bl	800c790 <ucdr_serialize_array_uint8_t>
 8017200:	2202      	movs	r2, #2
 8017202:	4604      	mov	r4, r0
 8017204:	4628      	mov	r0, r5
 8017206:	18b1      	adds	r1, r6, r2
 8017208:	f7f5 fac2 	bl	800c790 <ucdr_serialize_array_uint8_t>
 801720c:	4603      	mov	r3, r0
 801720e:	1d31      	adds	r1, r6, #4
 8017210:	4628      	mov	r0, r5
 8017212:	401c      	ands	r4, r3
 8017214:	f7ff fe5e 	bl	8016ed4 <uxr_serialize_ReadSpecification>
 8017218:	b2e4      	uxtb	r4, r4
 801721a:	4020      	ands	r0, r4
 801721c:	bd70      	pop	{r4, r5, r6, pc}
 801721e:	bf00      	nop

08017220 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8017220:	b570      	push	{r4, r5, r6, lr}
 8017222:	2202      	movs	r2, #2
 8017224:	4605      	mov	r5, r0
 8017226:	460e      	mov	r6, r1
 8017228:	f7f5 fab2 	bl	800c790 <ucdr_serialize_array_uint8_t>
 801722c:	2202      	movs	r2, #2
 801722e:	4604      	mov	r4, r0
 8017230:	4628      	mov	r0, r5
 8017232:	18b1      	adds	r1, r6, r2
 8017234:	f7f5 faac 	bl	800c790 <ucdr_serialize_array_uint8_t>
 8017238:	4020      	ands	r0, r4
 801723a:	b2c0      	uxtb	r0, r0
 801723c:	bd70      	pop	{r4, r5, r6, pc}
 801723e:	bf00      	nop

08017240 <uxr_serialize_ACKNACK_Payload>:
 8017240:	b570      	push	{r4, r5, r6, lr}
 8017242:	460c      	mov	r4, r1
 8017244:	4605      	mov	r5, r0
 8017246:	460e      	mov	r6, r1
 8017248:	f834 1b02 	ldrh.w	r1, [r4], #2
 801724c:	f7f5 fbc6 	bl	800c9dc <ucdr_serialize_uint16_t>
 8017250:	2202      	movs	r2, #2
 8017252:	4621      	mov	r1, r4
 8017254:	4604      	mov	r4, r0
 8017256:	4628      	mov	r0, r5
 8017258:	f7f5 fa9a 	bl	800c790 <ucdr_serialize_array_uint8_t>
 801725c:	4603      	mov	r3, r0
 801725e:	7931      	ldrb	r1, [r6, #4]
 8017260:	4628      	mov	r0, r5
 8017262:	401c      	ands	r4, r3
 8017264:	f7f5 fb8e 	bl	800c984 <ucdr_serialize_uint8_t>
 8017268:	b2e4      	uxtb	r4, r4
 801726a:	4020      	ands	r0, r4
 801726c:	bd70      	pop	{r4, r5, r6, pc}
 801726e:	bf00      	nop

08017270 <uxr_deserialize_ACKNACK_Payload>:
 8017270:	b570      	push	{r4, r5, r6, lr}
 8017272:	460e      	mov	r6, r1
 8017274:	4605      	mov	r5, r0
 8017276:	f7f5 fcb1 	bl	800cbdc <ucdr_deserialize_uint16_t>
 801727a:	2202      	movs	r2, #2
 801727c:	4604      	mov	r4, r0
 801727e:	4628      	mov	r0, r5
 8017280:	18b1      	adds	r1, r6, r2
 8017282:	f7f5 fae9 	bl	800c858 <ucdr_deserialize_array_uint8_t>
 8017286:	4603      	mov	r3, r0
 8017288:	1d31      	adds	r1, r6, #4
 801728a:	4628      	mov	r0, r5
 801728c:	401c      	ands	r4, r3
 801728e:	f7f5 fb8f 	bl	800c9b0 <ucdr_deserialize_uint8_t>
 8017292:	b2e4      	uxtb	r4, r4
 8017294:	4020      	ands	r0, r4
 8017296:	bd70      	pop	{r4, r5, r6, pc}

08017298 <uxr_serialize_HEARTBEAT_Payload>:
 8017298:	b570      	push	{r4, r5, r6, lr}
 801729a:	460d      	mov	r5, r1
 801729c:	4606      	mov	r6, r0
 801729e:	8809      	ldrh	r1, [r1, #0]
 80172a0:	f7f5 fb9c 	bl	800c9dc <ucdr_serialize_uint16_t>
 80172a4:	8869      	ldrh	r1, [r5, #2]
 80172a6:	4604      	mov	r4, r0
 80172a8:	4630      	mov	r0, r6
 80172aa:	f7f5 fb97 	bl	800c9dc <ucdr_serialize_uint16_t>
 80172ae:	4603      	mov	r3, r0
 80172b0:	7929      	ldrb	r1, [r5, #4]
 80172b2:	4630      	mov	r0, r6
 80172b4:	401c      	ands	r4, r3
 80172b6:	f7f5 fb65 	bl	800c984 <ucdr_serialize_uint8_t>
 80172ba:	b2e4      	uxtb	r4, r4
 80172bc:	4020      	ands	r0, r4
 80172be:	bd70      	pop	{r4, r5, r6, pc}

080172c0 <uxr_deserialize_HEARTBEAT_Payload>:
 80172c0:	b570      	push	{r4, r5, r6, lr}
 80172c2:	460e      	mov	r6, r1
 80172c4:	4605      	mov	r5, r0
 80172c6:	f7f5 fc89 	bl	800cbdc <ucdr_deserialize_uint16_t>
 80172ca:	4604      	mov	r4, r0
 80172cc:	1cb1      	adds	r1, r6, #2
 80172ce:	4628      	mov	r0, r5
 80172d0:	f7f5 fc84 	bl	800cbdc <ucdr_deserialize_uint16_t>
 80172d4:	4603      	mov	r3, r0
 80172d6:	1d31      	adds	r1, r6, #4
 80172d8:	4628      	mov	r0, r5
 80172da:	401c      	ands	r4, r3
 80172dc:	f7f5 fb68 	bl	800c9b0 <ucdr_deserialize_uint8_t>
 80172e0:	b2e4      	uxtb	r4, r4
 80172e2:	4020      	ands	r0, r4
 80172e4:	bd70      	pop	{r4, r5, r6, pc}
 80172e6:	bf00      	nop

080172e8 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80172e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172ec:	460e      	mov	r6, r1
 80172ee:	4605      	mov	r5, r0
 80172f0:	f7f6 fa10 	bl	800d714 <ucdr_deserialize_int32_t>
 80172f4:	4607      	mov	r7, r0
 80172f6:	1d31      	adds	r1, r6, #4
 80172f8:	4628      	mov	r0, r5
 80172fa:	f7f5 fe89 	bl	800d010 <ucdr_deserialize_uint32_t>
 80172fe:	4680      	mov	r8, r0
 8017300:	f106 0108 	add.w	r1, r6, #8
 8017304:	4628      	mov	r0, r5
 8017306:	f7f6 fa05 	bl	800d714 <ucdr_deserialize_int32_t>
 801730a:	ea07 0708 	and.w	r7, r7, r8
 801730e:	4604      	mov	r4, r0
 8017310:	f106 010c 	add.w	r1, r6, #12
 8017314:	4628      	mov	r0, r5
 8017316:	403c      	ands	r4, r7
 8017318:	f7f5 fe7a 	bl	800d010 <ucdr_deserialize_uint32_t>
 801731c:	f106 0110 	add.w	r1, r6, #16
 8017320:	4004      	ands	r4, r0
 8017322:	4628      	mov	r0, r5
 8017324:	f7f6 f9f6 	bl	800d714 <ucdr_deserialize_int32_t>
 8017328:	4603      	mov	r3, r0
 801732a:	b2e4      	uxtb	r4, r4
 801732c:	4628      	mov	r0, r5
 801732e:	461d      	mov	r5, r3
 8017330:	f106 0114 	add.w	r1, r6, #20
 8017334:	f7f5 fe6c 	bl	800d010 <ucdr_deserialize_uint32_t>
 8017338:	402c      	ands	r4, r5
 801733a:	4020      	ands	r0, r4
 801733c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017340 <uxr_serialize_SampleIdentity>:
 8017340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017344:	4604      	mov	r4, r0
 8017346:	460d      	mov	r5, r1
 8017348:	220c      	movs	r2, #12
 801734a:	f7f5 fa21 	bl	800c790 <ucdr_serialize_array_uint8_t>
 801734e:	2203      	movs	r2, #3
 8017350:	f105 010c 	add.w	r1, r5, #12
 8017354:	4607      	mov	r7, r0
 8017356:	4620      	mov	r0, r4
 8017358:	f7f5 fa1a 	bl	800c790 <ucdr_serialize_array_uint8_t>
 801735c:	7be9      	ldrb	r1, [r5, #15]
 801735e:	4680      	mov	r8, r0
 8017360:	4620      	mov	r0, r4
 8017362:	f7f5 fb0f 	bl	800c984 <ucdr_serialize_uint8_t>
 8017366:	6929      	ldr	r1, [r5, #16]
 8017368:	4606      	mov	r6, r0
 801736a:	4620      	mov	r0, r4
 801736c:	f7f6 f93a 	bl	800d5e4 <ucdr_serialize_int32_t>
 8017370:	ea07 0708 	and.w	r7, r7, r8
 8017374:	4603      	mov	r3, r0
 8017376:	4620      	mov	r0, r4
 8017378:	403e      	ands	r6, r7
 801737a:	6969      	ldr	r1, [r5, #20]
 801737c:	461c      	mov	r4, r3
 801737e:	f7f5 fd17 	bl	800cdb0 <ucdr_serialize_uint32_t>
 8017382:	4034      	ands	r4, r6
 8017384:	4020      	ands	r0, r4
 8017386:	b2c0      	uxtb	r0, r0
 8017388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801738c <uxr_deserialize_SampleIdentity>:
 801738c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017390:	4604      	mov	r4, r0
 8017392:	460d      	mov	r5, r1
 8017394:	220c      	movs	r2, #12
 8017396:	f7f5 fa5f 	bl	800c858 <ucdr_deserialize_array_uint8_t>
 801739a:	2203      	movs	r2, #3
 801739c:	f105 010c 	add.w	r1, r5, #12
 80173a0:	4607      	mov	r7, r0
 80173a2:	4620      	mov	r0, r4
 80173a4:	f7f5 fa58 	bl	800c858 <ucdr_deserialize_array_uint8_t>
 80173a8:	f105 010f 	add.w	r1, r5, #15
 80173ac:	4680      	mov	r8, r0
 80173ae:	4620      	mov	r0, r4
 80173b0:	f7f5 fafe 	bl	800c9b0 <ucdr_deserialize_uint8_t>
 80173b4:	f105 0110 	add.w	r1, r5, #16
 80173b8:	4606      	mov	r6, r0
 80173ba:	4620      	mov	r0, r4
 80173bc:	f7f6 f9aa 	bl	800d714 <ucdr_deserialize_int32_t>
 80173c0:	ea07 0708 	and.w	r7, r7, r8
 80173c4:	4603      	mov	r3, r0
 80173c6:	4620      	mov	r0, r4
 80173c8:	403e      	ands	r6, r7
 80173ca:	f105 0114 	add.w	r1, r5, #20
 80173ce:	461c      	mov	r4, r3
 80173d0:	f7f5 fe1e 	bl	800d010 <ucdr_deserialize_uint32_t>
 80173d4:	4034      	ands	r4, r6
 80173d6:	4020      	ands	r0, r4
 80173d8:	b2c0      	uxtb	r0, r0
 80173da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173de:	bf00      	nop

080173e0 <rcl_get_automatic_discovery_range>:
 80173e0:	b530      	push	{r4, r5, lr}
 80173e2:	2300      	movs	r3, #0
 80173e4:	b083      	sub	sp, #12
 80173e6:	9301      	str	r3, [sp, #4]
 80173e8:	b1c0      	cbz	r0, 801741c <rcl_get_automatic_discovery_range+0x3c>
 80173ea:	4604      	mov	r4, r0
 80173ec:	a901      	add	r1, sp, #4
 80173ee:	4818      	ldr	r0, [pc, #96]	; (8017450 <rcl_get_automatic_discovery_range+0x70>)
 80173f0:	f7fa fcda 	bl	8011da8 <rcutils_get_env>
 80173f4:	b110      	cbz	r0, 80173fc <rcl_get_automatic_discovery_range+0x1c>
 80173f6:	2001      	movs	r0, #1
 80173f8:	b003      	add	sp, #12
 80173fa:	bd30      	pop	{r4, r5, pc}
 80173fc:	9d01      	ldr	r5, [sp, #4]
 80173fe:	782b      	ldrb	r3, [r5, #0]
 8017400:	b13b      	cbz	r3, 8017412 <rcl_get_automatic_discovery_range+0x32>
 8017402:	4914      	ldr	r1, [pc, #80]	; (8017454 <rcl_get_automatic_discovery_range+0x74>)
 8017404:	4628      	mov	r0, r5
 8017406:	f7e8 ff1b 	bl	8000240 <strcmp>
 801740a:	b950      	cbnz	r0, 8017422 <rcl_get_automatic_discovery_range+0x42>
 801740c:	2301      	movs	r3, #1
 801740e:	7023      	strb	r3, [r4, #0]
 8017410:	e7f2      	b.n	80173f8 <rcl_get_automatic_discovery_range+0x18>
 8017412:	2303      	movs	r3, #3
 8017414:	2000      	movs	r0, #0
 8017416:	7023      	strb	r3, [r4, #0]
 8017418:	b003      	add	sp, #12
 801741a:	bd30      	pop	{r4, r5, pc}
 801741c:	200b      	movs	r0, #11
 801741e:	b003      	add	sp, #12
 8017420:	bd30      	pop	{r4, r5, pc}
 8017422:	490d      	ldr	r1, [pc, #52]	; (8017458 <rcl_get_automatic_discovery_range+0x78>)
 8017424:	4628      	mov	r0, r5
 8017426:	f7e8 ff0b 	bl	8000240 <strcmp>
 801742a:	b168      	cbz	r0, 8017448 <rcl_get_automatic_discovery_range+0x68>
 801742c:	490b      	ldr	r1, [pc, #44]	; (801745c <rcl_get_automatic_discovery_range+0x7c>)
 801742e:	4628      	mov	r0, r5
 8017430:	f7e8 ff06 	bl	8000240 <strcmp>
 8017434:	2800      	cmp	r0, #0
 8017436:	d0ec      	beq.n	8017412 <rcl_get_automatic_discovery_range+0x32>
 8017438:	4909      	ldr	r1, [pc, #36]	; (8017460 <rcl_get_automatic_discovery_range+0x80>)
 801743a:	4628      	mov	r0, r5
 801743c:	f7e8 ff00 	bl	8000240 <strcmp>
 8017440:	b910      	cbnz	r0, 8017448 <rcl_get_automatic_discovery_range+0x68>
 8017442:	2304      	movs	r3, #4
 8017444:	7023      	strb	r3, [r4, #0]
 8017446:	e7d7      	b.n	80173f8 <rcl_get_automatic_discovery_range+0x18>
 8017448:	2302      	movs	r3, #2
 801744a:	2000      	movs	r0, #0
 801744c:	7023      	strb	r3, [r4, #0]
 801744e:	e7d3      	b.n	80173f8 <rcl_get_automatic_discovery_range+0x18>
 8017450:	0801bd10 	.word	0x0801bd10
 8017454:	0801bd30 	.word	0x0801bd30
 8017458:	0801bd34 	.word	0x0801bd34
 801745c:	0801bd40 	.word	0x0801bd40
 8017460:	0801bd48 	.word	0x0801bd48

08017464 <rcl_automatic_discovery_range_to_string>:
 8017464:	2804      	cmp	r0, #4
 8017466:	d803      	bhi.n	8017470 <rcl_automatic_discovery_range_to_string+0xc>
 8017468:	4b02      	ldr	r3, [pc, #8]	; (8017474 <rcl_automatic_discovery_range_to_string+0x10>)
 801746a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801746e:	4770      	bx	lr
 8017470:	2000      	movs	r0, #0
 8017472:	4770      	bx	lr
 8017474:	0801be38 	.word	0x0801be38

08017478 <rcl_get_discovery_static_peers>:
 8017478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801747c:	2300      	movs	r3, #0
 801747e:	b08e      	sub	sp, #56	; 0x38
 8017480:	9306      	str	r3, [sp, #24]
 8017482:	2900      	cmp	r1, #0
 8017484:	d04b      	beq.n	801751e <rcl_get_discovery_static_peers+0xa6>
 8017486:	4605      	mov	r5, r0
 8017488:	2800      	cmp	r0, #0
 801748a:	d048      	beq.n	801751e <rcl_get_discovery_static_peers+0xa6>
 801748c:	460c      	mov	r4, r1
 801748e:	482c      	ldr	r0, [pc, #176]	; (8017540 <rcl_get_discovery_static_peers+0xc8>)
 8017490:	a906      	add	r1, sp, #24
 8017492:	f7fa fc89 	bl	8011da8 <rcutils_get_env>
 8017496:	b118      	cbz	r0, 80174a0 <rcl_get_discovery_static_peers+0x28>
 8017498:	2001      	movs	r0, #1
 801749a:	b00e      	add	sp, #56	; 0x38
 801749c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80174a0:	9b06      	ldr	r3, [sp, #24]
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	d0f8      	beq.n	8017498 <rcl_get_discovery_static_peers+0x20>
 80174a6:	af07      	add	r7, sp, #28
 80174a8:	4638      	mov	r0, r7
 80174aa:	f000 fc5b 	bl	8017d64 <rcutils_get_zero_initialized_string_array>
 80174ae:	f104 0308 	add.w	r3, r4, #8
 80174b2:	9703      	str	r7, [sp, #12]
 80174b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80174b8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80174bc:	213b      	movs	r1, #59	; 0x3b
 80174be:	9806      	ldr	r0, [sp, #24]
 80174c0:	e894 000c 	ldmia.w	r4, {r2, r3}
 80174c4:	f000 fb90 	bl	8017be8 <rcutils_split>
 80174c8:	2800      	cmp	r0, #0
 80174ca:	d1e5      	bne.n	8017498 <rcl_get_discovery_static_peers+0x20>
 80174cc:	4622      	mov	r2, r4
 80174ce:	9907      	ldr	r1, [sp, #28]
 80174d0:	4628      	mov	r0, r5
 80174d2:	f000 fc97 	bl	8017e04 <rmw_discovery_options_init>
 80174d6:	4604      	mov	r4, r0
 80174d8:	bb78      	cbnz	r0, 801753a <rcl_get_discovery_static_peers+0xc2>
 80174da:	9e07      	ldr	r6, [sp, #28]
 80174dc:	b336      	cbz	r6, 801752c <rcl_get_discovery_static_peers+0xb4>
 80174de:	f8dd a020 	ldr.w	sl, [sp, #32]
 80174e2:	4680      	mov	r8, r0
 80174e4:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 80174e8:	ea4f 2904 	mov.w	r9, r4, lsl #8
 80174ec:	4608      	mov	r0, r1
 80174ee:	9105      	str	r1, [sp, #20]
 80174f0:	f7e8 ff06 	bl	8000300 <strlen>
 80174f4:	28ff      	cmp	r0, #255	; 0xff
 80174f6:	9905      	ldr	r1, [sp, #20]
 80174f8:	d815      	bhi.n	8017526 <rcl_get_discovery_static_peers+0xae>
 80174fa:	6868      	ldr	r0, [r5, #4]
 80174fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017500:	eb00 2004 	add.w	r0, r0, r4, lsl #8
 8017504:	3401      	adds	r4, #1
 8017506:	f002 f88c 	bl	8019622 <strncpy>
 801750a:	686b      	ldr	r3, [r5, #4]
 801750c:	9e07      	ldr	r6, [sp, #28]
 801750e:	444b      	add	r3, r9
 8017510:	42b4      	cmp	r4, r6
 8017512:	f883 80ff 	strb.w	r8, [r3, #255]	; 0xff
 8017516:	d209      	bcs.n	801752c <rcl_get_discovery_static_peers+0xb4>
 8017518:	f8dd a020 	ldr.w	sl, [sp, #32]
 801751c:	e7e2      	b.n	80174e4 <rcl_get_discovery_static_peers+0x6c>
 801751e:	200b      	movs	r0, #11
 8017520:	b00e      	add	sp, #56	; 0x38
 8017522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017526:	3401      	adds	r4, #1
 8017528:	42b4      	cmp	r4, r6
 801752a:	d3db      	bcc.n	80174e4 <rcl_get_discovery_static_peers+0x6c>
 801752c:	4638      	mov	r0, r7
 801752e:	f000 fc37 	bl	8017da0 <rcutils_string_array_fini>
 8017532:	3800      	subs	r0, #0
 8017534:	bf18      	it	ne
 8017536:	2001      	movne	r0, #1
 8017538:	e7af      	b.n	801749a <rcl_get_discovery_static_peers+0x22>
 801753a:	f7f7 fd53 	bl	800efe4 <rcl_convert_rmw_ret_to_rcl_ret>
 801753e:	e7ac      	b.n	801749a <rcl_get_discovery_static_peers+0x22>
 8017540:	0801bd58 	.word	0x0801bd58

08017544 <rcl_get_default_domain_id>:
 8017544:	b530      	push	{r4, r5, lr}
 8017546:	2300      	movs	r3, #0
 8017548:	b083      	sub	sp, #12
 801754a:	9300      	str	r3, [sp, #0]
 801754c:	b1d0      	cbz	r0, 8017584 <rcl_get_default_domain_id+0x40>
 801754e:	4604      	mov	r4, r0
 8017550:	4669      	mov	r1, sp
 8017552:	4815      	ldr	r0, [pc, #84]	; (80175a8 <rcl_get_default_domain_id+0x64>)
 8017554:	f7fa fc28 	bl	8011da8 <rcutils_get_env>
 8017558:	4602      	mov	r2, r0
 801755a:	b110      	cbz	r0, 8017562 <rcl_get_default_domain_id+0x1e>
 801755c:	2001      	movs	r0, #1
 801755e:	b003      	add	sp, #12
 8017560:	bd30      	pop	{r4, r5, pc}
 8017562:	9b00      	ldr	r3, [sp, #0]
 8017564:	b18b      	cbz	r3, 801758a <rcl_get_default_domain_id+0x46>
 8017566:	7818      	ldrb	r0, [r3, #0]
 8017568:	2800      	cmp	r0, #0
 801756a:	d0f8      	beq.n	801755e <rcl_get_default_domain_id+0x1a>
 801756c:	a901      	add	r1, sp, #4
 801756e:	4618      	mov	r0, r3
 8017570:	9201      	str	r2, [sp, #4]
 8017572:	f001 fe89 	bl	8019288 <strtoul>
 8017576:	4605      	mov	r5, r0
 8017578:	b150      	cbz	r0, 8017590 <rcl_get_default_domain_id+0x4c>
 801757a:	1c43      	adds	r3, r0, #1
 801757c:	d00d      	beq.n	801759a <rcl_get_default_domain_id+0x56>
 801757e:	2000      	movs	r0, #0
 8017580:	6025      	str	r5, [r4, #0]
 8017582:	e7ec      	b.n	801755e <rcl_get_default_domain_id+0x1a>
 8017584:	200b      	movs	r0, #11
 8017586:	b003      	add	sp, #12
 8017588:	bd30      	pop	{r4, r5, pc}
 801758a:	4618      	mov	r0, r3
 801758c:	b003      	add	sp, #12
 801758e:	bd30      	pop	{r4, r5, pc}
 8017590:	9b01      	ldr	r3, [sp, #4]
 8017592:	781b      	ldrb	r3, [r3, #0]
 8017594:	2b00      	cmp	r3, #0
 8017596:	d0f2      	beq.n	801757e <rcl_get_default_domain_id+0x3a>
 8017598:	e7e0      	b.n	801755c <rcl_get_default_domain_id+0x18>
 801759a:	f002 f95b 	bl	8019854 <__errno>
 801759e:	6803      	ldr	r3, [r0, #0]
 80175a0:	2b22      	cmp	r3, #34	; 0x22
 80175a2:	d1ec      	bne.n	801757e <rcl_get_default_domain_id+0x3a>
 80175a4:	e7da      	b.n	801755c <rcl_get_default_domain_id+0x18>
 80175a6:	bf00      	nop
 80175a8:	0801be4c 	.word	0x0801be4c

080175ac <rcl_expand_topic_name>:
 80175ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175b0:	b08d      	sub	sp, #52	; 0x34
 80175b2:	4698      	mov	r8, r3
 80175b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80175b6:	9207      	str	r2, [sp, #28]
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	bf18      	it	ne
 80175bc:	f1b8 0f00 	cmpne.w	r8, #0
 80175c0:	bf0c      	ite	eq
 80175c2:	2301      	moveq	r3, #1
 80175c4:	2300      	movne	r3, #0
 80175c6:	2a00      	cmp	r2, #0
 80175c8:	bf08      	it	eq
 80175ca:	f043 0301 	orreq.w	r3, r3, #1
 80175ce:	2900      	cmp	r1, #0
 80175d0:	bf08      	it	eq
 80175d2:	f043 0301 	orreq.w	r3, r3, #1
 80175d6:	2b00      	cmp	r3, #0
 80175d8:	d13d      	bne.n	8017656 <rcl_expand_topic_name+0xaa>
 80175da:	fab0 f280 	clz	r2, r0
 80175de:	4604      	mov	r4, r0
 80175e0:	0952      	lsrs	r2, r2, #5
 80175e2:	2800      	cmp	r0, #0
 80175e4:	d037      	beq.n	8017656 <rcl_expand_topic_name+0xaa>
 80175e6:	460f      	mov	r7, r1
 80175e8:	a90b      	add	r1, sp, #44	; 0x2c
 80175ea:	f000 fa39 	bl	8017a60 <rcl_validate_topic_name>
 80175ee:	4605      	mov	r5, r0
 80175f0:	bb68      	cbnz	r0, 801764e <rcl_expand_topic_name+0xa2>
 80175f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	d137      	bne.n	8017668 <rcl_expand_topic_name+0xbc>
 80175f8:	4602      	mov	r2, r0
 80175fa:	a90b      	add	r1, sp, #44	; 0x2c
 80175fc:	4638      	mov	r0, r7
 80175fe:	f7fa ffa5 	bl	801254c <rmw_validate_node_name>
 8017602:	bb68      	cbnz	r0, 8017660 <rcl_expand_topic_name+0xb4>
 8017604:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017606:	2b00      	cmp	r3, #0
 8017608:	d133      	bne.n	8017672 <rcl_expand_topic_name+0xc6>
 801760a:	462a      	mov	r2, r5
 801760c:	a90b      	add	r1, sp, #44	; 0x2c
 801760e:	9807      	ldr	r0, [sp, #28]
 8017610:	f7fa ff7e 	bl	8012510 <rmw_validate_namespace>
 8017614:	bb20      	cbnz	r0, 8017660 <rcl_expand_topic_name+0xb4>
 8017616:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8017618:	2d00      	cmp	r5, #0
 801761a:	f040 80a2 	bne.w	8017762 <rcl_expand_topic_name+0x1b6>
 801761e:	217b      	movs	r1, #123	; 0x7b
 8017620:	4620      	mov	r0, r4
 8017622:	f001 ffdf 	bl	80195e4 <strchr>
 8017626:	7823      	ldrb	r3, [r4, #0]
 8017628:	4681      	mov	r9, r0
 801762a:	bb20      	cbnz	r0, 8017676 <rcl_expand_topic_name+0xca>
 801762c:	2b2f      	cmp	r3, #47	; 0x2f
 801762e:	d122      	bne.n	8017676 <rcl_expand_topic_name+0xca>
 8017630:	ab19      	add	r3, sp, #100	; 0x64
 8017632:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017636:	ab16      	add	r3, sp, #88	; 0x58
 8017638:	e88d 0003 	stmia.w	sp, {r0, r1}
 801763c:	4620      	mov	r0, r4
 801763e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8017640:	f7fa fd14 	bl	801206c <rcutils_strdup>
 8017644:	2800      	cmp	r0, #0
 8017646:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017648:	bf08      	it	eq
 801764a:	250a      	moveq	r5, #10
 801764c:	6018      	str	r0, [r3, #0]
 801764e:	4628      	mov	r0, r5
 8017650:	b00d      	add	sp, #52	; 0x34
 8017652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017656:	250b      	movs	r5, #11
 8017658:	4628      	mov	r0, r5
 801765a:	b00d      	add	sp, #52	; 0x34
 801765c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017660:	f7f7 fcc0 	bl	800efe4 <rcl_convert_rmw_ret_to_rcl_ret>
 8017664:	4605      	mov	r5, r0
 8017666:	e7f2      	b.n	801764e <rcl_expand_topic_name+0xa2>
 8017668:	2567      	movs	r5, #103	; 0x67
 801766a:	4628      	mov	r0, r5
 801766c:	b00d      	add	sp, #52	; 0x34
 801766e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017672:	25c9      	movs	r5, #201	; 0xc9
 8017674:	e7eb      	b.n	801764e <rcl_expand_topic_name+0xa2>
 8017676:	2b7e      	cmp	r3, #126	; 0x7e
 8017678:	d075      	beq.n	8017766 <rcl_expand_topic_name+0x1ba>
 801767a:	f1b9 0f00 	cmp.w	r9, #0
 801767e:	f000 80c2 	beq.w	8017806 <rcl_expand_topic_name+0x25a>
 8017682:	2300      	movs	r3, #0
 8017684:	46a2      	mov	sl, r4
 8017686:	461e      	mov	r6, r3
 8017688:	9508      	str	r5, [sp, #32]
 801768a:	4655      	mov	r5, sl
 801768c:	9409      	str	r4, [sp, #36]	; 0x24
 801768e:	46b2      	mov	sl, r6
 8017690:	464c      	mov	r4, r9
 8017692:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8017696:	2c00      	cmp	r4, #0
 8017698:	f000 80ae 	beq.w	80177f8 <rcl_expand_topic_name+0x24c>
 801769c:	217d      	movs	r1, #125	; 0x7d
 801769e:	4628      	mov	r0, r5
 80176a0:	f001 ffa0 	bl	80195e4 <strchr>
 80176a4:	eba0 0904 	sub.w	r9, r0, r4
 80176a8:	4621      	mov	r1, r4
 80176aa:	4869      	ldr	r0, [pc, #420]	; (8017850 <rcl_expand_topic_name+0x2a4>)
 80176ac:	f109 0601 	add.w	r6, r9, #1
 80176b0:	4632      	mov	r2, r6
 80176b2:	f001 ffa4 	bl	80195fe <strncmp>
 80176b6:	2800      	cmp	r0, #0
 80176b8:	d051      	beq.n	801775e <rcl_expand_topic_name+0x1b2>
 80176ba:	4632      	mov	r2, r6
 80176bc:	4621      	mov	r1, r4
 80176be:	4865      	ldr	r0, [pc, #404]	; (8017854 <rcl_expand_topic_name+0x2a8>)
 80176c0:	f001 ff9d 	bl	80195fe <strncmp>
 80176c4:	b128      	cbz	r0, 80176d2 <rcl_expand_topic_name+0x126>
 80176c6:	4632      	mov	r2, r6
 80176c8:	4621      	mov	r1, r4
 80176ca:	4863      	ldr	r0, [pc, #396]	; (8017858 <rcl_expand_topic_name+0x2ac>)
 80176cc:	f001 ff97 	bl	80195fe <strncmp>
 80176d0:	bb38      	cbnz	r0, 8017722 <rcl_expand_topic_name+0x176>
 80176d2:	46d9      	mov	r9, fp
 80176d4:	ab18      	add	r3, sp, #96	; 0x60
 80176d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80176da:	ab16      	add	r3, sp, #88	; 0x58
 80176dc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80176e0:	4620      	mov	r0, r4
 80176e2:	4631      	mov	r1, r6
 80176e4:	cb0c      	ldmia	r3, {r2, r3}
 80176e6:	f7fa fce7 	bl	80120b8 <rcutils_strndup>
 80176ea:	4604      	mov	r4, r0
 80176ec:	2800      	cmp	r0, #0
 80176ee:	f000 80a3 	beq.w	8017838 <rcl_expand_topic_name+0x28c>
 80176f2:	464a      	mov	r2, r9
 80176f4:	4628      	mov	r0, r5
 80176f6:	ab16      	add	r3, sp, #88	; 0x58
 80176f8:	4621      	mov	r1, r4
 80176fa:	f7fa fbb7 	bl	8011e6c <rcutils_repl_str>
 80176fe:	991a      	ldr	r1, [sp, #104]	; 0x68
 8017700:	4605      	mov	r5, r0
 8017702:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017704:	4620      	mov	r0, r4
 8017706:	4798      	blx	r3
 8017708:	4650      	mov	r0, sl
 801770a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801770c:	991a      	ldr	r1, [sp, #104]	; 0x68
 801770e:	4798      	blx	r3
 8017710:	2d00      	cmp	r5, #0
 8017712:	d06c      	beq.n	80177ee <rcl_expand_topic_name+0x242>
 8017714:	217b      	movs	r1, #123	; 0x7b
 8017716:	4628      	mov	r0, r5
 8017718:	f001 ff64 	bl	80195e4 <strchr>
 801771c:	46aa      	mov	sl, r5
 801771e:	4604      	mov	r4, r0
 8017720:	e7b9      	b.n	8017696 <rcl_expand_topic_name+0xea>
 8017722:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8017726:	1c61      	adds	r1, r4, #1
 8017728:	4640      	mov	r0, r8
 801772a:	f7fa fdc1 	bl	80122b0 <rcutils_string_map_getn>
 801772e:	4681      	mov	r9, r0
 8017730:	2800      	cmp	r0, #0
 8017732:	d1cf      	bne.n	80176d4 <rcl_expand_topic_name+0x128>
 8017734:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017736:	aa18      	add	r2, sp, #96	; 0x60
 8017738:	2569      	movs	r5, #105	; 0x69
 801773a:	6018      	str	r0, [r3, #0]
 801773c:	ab16      	add	r3, sp, #88	; 0x58
 801773e:	ca07      	ldmia	r2, {r0, r1, r2}
 8017740:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017744:	4631      	mov	r1, r6
 8017746:	4620      	mov	r0, r4
 8017748:	cb0c      	ldmia	r3, {r2, r3}
 801774a:	f7fa fcb5 	bl	80120b8 <rcutils_strndup>
 801774e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8017750:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017752:	4798      	blx	r3
 8017754:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017756:	991a      	ldr	r1, [sp, #104]	; 0x68
 8017758:	4650      	mov	r0, sl
 801775a:	4798      	blx	r3
 801775c:	e777      	b.n	801764e <rcl_expand_topic_name+0xa2>
 801775e:	46b9      	mov	r9, r7
 8017760:	e7b8      	b.n	80176d4 <rcl_expand_topic_name+0x128>
 8017762:	25ca      	movs	r5, #202	; 0xca
 8017764:	e773      	b.n	801764e <rcl_expand_topic_name+0xa2>
 8017766:	9e07      	ldr	r6, [sp, #28]
 8017768:	4630      	mov	r0, r6
 801776a:	f7e8 fdc9 	bl	8000300 <strlen>
 801776e:	4a3b      	ldr	r2, [pc, #236]	; (801785c <rcl_expand_topic_name+0x2b0>)
 8017770:	4b3b      	ldr	r3, [pc, #236]	; (8017860 <rcl_expand_topic_name+0x2b4>)
 8017772:	9603      	str	r6, [sp, #12]
 8017774:	2801      	cmp	r0, #1
 8017776:	bf18      	it	ne
 8017778:	4613      	movne	r3, r2
 801777a:	9704      	str	r7, [sp, #16]
 801777c:	9302      	str	r3, [sp, #8]
 801777e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017780:	9300      	str	r3, [sp, #0]
 8017782:	1c63      	adds	r3, r4, #1
 8017784:	9305      	str	r3, [sp, #20]
 8017786:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801778a:	9301      	str	r3, [sp, #4]
 801778c:	ab16      	add	r3, sp, #88	; 0x58
 801778e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017790:	f7fa fb32 	bl	8011df8 <rcutils_format_string_limit>
 8017794:	4606      	mov	r6, r0
 8017796:	b350      	cbz	r0, 80177ee <rcl_expand_topic_name+0x242>
 8017798:	f1b9 0f00 	cmp.w	r9, #0
 801779c:	d005      	beq.n	80177aa <rcl_expand_topic_name+0x1fe>
 801779e:	217b      	movs	r1, #123	; 0x7b
 80177a0:	46b2      	mov	sl, r6
 80177a2:	f001 ff1f 	bl	80195e4 <strchr>
 80177a6:	4681      	mov	r9, r0
 80177a8:	e76e      	b.n	8017688 <rcl_expand_topic_name+0xdc>
 80177aa:	7833      	ldrb	r3, [r6, #0]
 80177ac:	2b2f      	cmp	r3, #47	; 0x2f
 80177ae:	d01b      	beq.n	80177e8 <rcl_expand_topic_name+0x23c>
 80177b0:	9c07      	ldr	r4, [sp, #28]
 80177b2:	4620      	mov	r0, r4
 80177b4:	f7e8 fda4 	bl	8000300 <strlen>
 80177b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80177bc:	4a29      	ldr	r2, [pc, #164]	; (8017864 <rcl_expand_topic_name+0x2b8>)
 80177be:	9301      	str	r3, [sp, #4]
 80177c0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80177c2:	9604      	str	r6, [sp, #16]
 80177c4:	9300      	str	r3, [sp, #0]
 80177c6:	4b28      	ldr	r3, [pc, #160]	; (8017868 <rcl_expand_topic_name+0x2bc>)
 80177c8:	9403      	str	r4, [sp, #12]
 80177ca:	2801      	cmp	r0, #1
 80177cc:	bf18      	it	ne
 80177ce:	4613      	movne	r3, r2
 80177d0:	9302      	str	r3, [sp, #8]
 80177d2:	ab16      	add	r3, sp, #88	; 0x58
 80177d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80177d6:	f7fa fb0f 	bl	8011df8 <rcutils_format_string_limit>
 80177da:	4603      	mov	r3, r0
 80177dc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80177de:	4630      	mov	r0, r6
 80177e0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80177e2:	461e      	mov	r6, r3
 80177e4:	4790      	blx	r2
 80177e6:	b116      	cbz	r6, 80177ee <rcl_expand_topic_name+0x242>
 80177e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80177ea:	601e      	str	r6, [r3, #0]
 80177ec:	e72f      	b.n	801764e <rcl_expand_topic_name+0xa2>
 80177ee:	2300      	movs	r3, #0
 80177f0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80177f2:	250a      	movs	r5, #10
 80177f4:	6013      	str	r3, [r2, #0]
 80177f6:	e72a      	b.n	801764e <rcl_expand_topic_name+0xa2>
 80177f8:	4653      	mov	r3, sl
 80177fa:	4656      	mov	r6, sl
 80177fc:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 8017800:	2b00      	cmp	r3, #0
 8017802:	d1d2      	bne.n	80177aa <rcl_expand_topic_name+0x1fe>
 8017804:	7823      	ldrb	r3, [r4, #0]
 8017806:	2b2f      	cmp	r3, #47	; 0x2f
 8017808:	d01e      	beq.n	8017848 <rcl_expand_topic_name+0x29c>
 801780a:	9e07      	ldr	r6, [sp, #28]
 801780c:	4630      	mov	r0, r6
 801780e:	f7e8 fd77 	bl	8000300 <strlen>
 8017812:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8017814:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017818:	9603      	str	r6, [sp, #12]
 801781a:	9404      	str	r4, [sp, #16]
 801781c:	e9cd 2300 	strd	r2, r3, [sp]
 8017820:	4a10      	ldr	r2, [pc, #64]	; (8017864 <rcl_expand_topic_name+0x2b8>)
 8017822:	4b11      	ldr	r3, [pc, #68]	; (8017868 <rcl_expand_topic_name+0x2bc>)
 8017824:	2801      	cmp	r0, #1
 8017826:	bf18      	it	ne
 8017828:	4613      	movne	r3, r2
 801782a:	9302      	str	r3, [sp, #8]
 801782c:	ab16      	add	r3, sp, #88	; 0x58
 801782e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017830:	f7fa fae2 	bl	8011df8 <rcutils_format_string_limit>
 8017834:	4606      	mov	r6, r0
 8017836:	e7d6      	b.n	80177e6 <rcl_expand_topic_name+0x23a>
 8017838:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
 801783c:	4650      	mov	r0, sl
 801783e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017840:	6014      	str	r4, [r2, #0]
 8017842:	250a      	movs	r5, #10
 8017844:	4798      	blx	r3
 8017846:	e702      	b.n	801764e <rcl_expand_topic_name+0xa2>
 8017848:	2300      	movs	r3, #0
 801784a:	461e      	mov	r6, r3
 801784c:	e7cc      	b.n	80177e8 <rcl_expand_topic_name+0x23c>
 801784e:	bf00      	nop
 8017850:	0801be64 	.word	0x0801be64
 8017854:	0801be6c 	.word	0x0801be6c
 8017858:	0801be74 	.word	0x0801be74
 801785c:	0801be5c 	.word	0x0801be5c
 8017860:	0801ba40 	.word	0x0801ba40
 8017864:	0801b4b8 	.word	0x0801b4b8
 8017868:	0801b4b0 	.word	0x0801b4b0

0801786c <rcl_get_default_topic_name_substitutions>:
 801786c:	2800      	cmp	r0, #0
 801786e:	bf0c      	ite	eq
 8017870:	200b      	moveq	r0, #11
 8017872:	2000      	movne	r0, #0
 8017874:	4770      	bx	lr
 8017876:	bf00      	nop

08017878 <rcl_get_zero_initialized_guard_condition>:
 8017878:	4a03      	ldr	r2, [pc, #12]	; (8017888 <rcl_get_zero_initialized_guard_condition+0x10>)
 801787a:	4603      	mov	r3, r0
 801787c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017880:	e883 0003 	stmia.w	r3, {r0, r1}
 8017884:	4618      	mov	r0, r3
 8017886:	4770      	bx	lr
 8017888:	0801be80 	.word	0x0801be80

0801788c <rcl_guard_condition_init_from_rmw>:
 801788c:	b082      	sub	sp, #8
 801788e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017892:	b086      	sub	sp, #24
 8017894:	4604      	mov	r4, r0
 8017896:	460e      	mov	r6, r1
 8017898:	4615      	mov	r5, r2
 801789a:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801789e:	f10d 0e04 	add.w	lr, sp, #4
 80178a2:	f84c 3f04 	str.w	r3, [ip, #4]!
 80178a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80178aa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80178ae:	f8dc 3000 	ldr.w	r3, [ip]
 80178b2:	a801      	add	r0, sp, #4
 80178b4:	f8ce 3000 	str.w	r3, [lr]
 80178b8:	f7f4 fc2e 	bl	800c118 <rcutils_allocator_is_valid>
 80178bc:	f080 0301 	eor.w	r3, r0, #1
 80178c0:	b2db      	uxtb	r3, r3
 80178c2:	bb3b      	cbnz	r3, 8017914 <rcl_guard_condition_init_from_rmw+0x88>
 80178c4:	b334      	cbz	r4, 8017914 <rcl_guard_condition_init_from_rmw+0x88>
 80178c6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80178ca:	f1b8 0f00 	cmp.w	r8, #0
 80178ce:	d11a      	bne.n	8017906 <rcl_guard_condition_init_from_rmw+0x7a>
 80178d0:	b305      	cbz	r5, 8017914 <rcl_guard_condition_init_from_rmw+0x88>
 80178d2:	4628      	mov	r0, r5
 80178d4:	f7f7 fba4 	bl	800f020 <rcl_context_is_valid>
 80178d8:	b1f0      	cbz	r0, 8017918 <rcl_guard_condition_init_from_rmw+0x8c>
 80178da:	9b01      	ldr	r3, [sp, #4]
 80178dc:	201c      	movs	r0, #28
 80178de:	9905      	ldr	r1, [sp, #20]
 80178e0:	4798      	blx	r3
 80178e2:	4607      	mov	r7, r0
 80178e4:	6060      	str	r0, [r4, #4]
 80178e6:	b320      	cbz	r0, 8017932 <rcl_guard_condition_init_from_rmw+0xa6>
 80178e8:	b1c6      	cbz	r6, 801791c <rcl_guard_condition_init_from_rmw+0x90>
 80178ea:	6006      	str	r6, [r0, #0]
 80178ec:	f880 8004 	strb.w	r8, [r0, #4]
 80178f0:	ac01      	add	r4, sp, #4
 80178f2:	f107 0c08 	add.w	ip, r7, #8
 80178f6:	2500      	movs	r5, #0
 80178f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80178fa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80178fe:	6823      	ldr	r3, [r4, #0]
 8017900:	f8cc 3000 	str.w	r3, [ip]
 8017904:	e000      	b.n	8017908 <rcl_guard_condition_init_from_rmw+0x7c>
 8017906:	2564      	movs	r5, #100	; 0x64
 8017908:	4628      	mov	r0, r5
 801790a:	b006      	add	sp, #24
 801790c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017910:	b002      	add	sp, #8
 8017912:	4770      	bx	lr
 8017914:	250b      	movs	r5, #11
 8017916:	e7f7      	b.n	8017908 <rcl_guard_condition_init_from_rmw+0x7c>
 8017918:	2565      	movs	r5, #101	; 0x65
 801791a:	e7f5      	b.n	8017908 <rcl_guard_condition_init_from_rmw+0x7c>
 801791c:	6828      	ldr	r0, [r5, #0]
 801791e:	3028      	adds	r0, #40	; 0x28
 8017920:	f000 fc30 	bl	8018184 <rmw_create_guard_condition>
 8017924:	6038      	str	r0, [r7, #0]
 8017926:	6867      	ldr	r7, [r4, #4]
 8017928:	683e      	ldr	r6, [r7, #0]
 801792a:	b126      	cbz	r6, 8017936 <rcl_guard_condition_init_from_rmw+0xaa>
 801792c:	2301      	movs	r3, #1
 801792e:	713b      	strb	r3, [r7, #4]
 8017930:	e7de      	b.n	80178f0 <rcl_guard_condition_init_from_rmw+0x64>
 8017932:	250a      	movs	r5, #10
 8017934:	e7e8      	b.n	8017908 <rcl_guard_condition_init_from_rmw+0x7c>
 8017936:	9b02      	ldr	r3, [sp, #8]
 8017938:	4638      	mov	r0, r7
 801793a:	9905      	ldr	r1, [sp, #20]
 801793c:	2501      	movs	r5, #1
 801793e:	4798      	blx	r3
 8017940:	6066      	str	r6, [r4, #4]
 8017942:	e7e1      	b.n	8017908 <rcl_guard_condition_init_from_rmw+0x7c>

08017944 <rcl_guard_condition_fini>:
 8017944:	b570      	push	{r4, r5, r6, lr}
 8017946:	b082      	sub	sp, #8
 8017948:	b1f0      	cbz	r0, 8017988 <rcl_guard_condition_fini+0x44>
 801794a:	6843      	ldr	r3, [r0, #4]
 801794c:	4604      	mov	r4, r0
 801794e:	b163      	cbz	r3, 801796a <rcl_guard_condition_fini+0x26>
 8017950:	6818      	ldr	r0, [r3, #0]
 8017952:	68de      	ldr	r6, [r3, #12]
 8017954:	6999      	ldr	r1, [r3, #24]
 8017956:	b160      	cbz	r0, 8017972 <rcl_guard_condition_fini+0x2e>
 8017958:	791d      	ldrb	r5, [r3, #4]
 801795a:	b965      	cbnz	r5, 8017976 <rcl_guard_condition_fini+0x32>
 801795c:	4618      	mov	r0, r3
 801795e:	47b0      	blx	r6
 8017960:	2300      	movs	r3, #0
 8017962:	4628      	mov	r0, r5
 8017964:	6063      	str	r3, [r4, #4]
 8017966:	b002      	add	sp, #8
 8017968:	bd70      	pop	{r4, r5, r6, pc}
 801796a:	461d      	mov	r5, r3
 801796c:	4628      	mov	r0, r5
 801796e:	b002      	add	sp, #8
 8017970:	bd70      	pop	{r4, r5, r6, pc}
 8017972:	4605      	mov	r5, r0
 8017974:	e7f2      	b.n	801795c <rcl_guard_condition_fini+0x18>
 8017976:	9101      	str	r1, [sp, #4]
 8017978:	f000 fc1a 	bl	80181b0 <rmw_destroy_guard_condition>
 801797c:	1e05      	subs	r5, r0, #0
 801797e:	6863      	ldr	r3, [r4, #4]
 8017980:	9901      	ldr	r1, [sp, #4]
 8017982:	bf18      	it	ne
 8017984:	2501      	movne	r5, #1
 8017986:	e7e9      	b.n	801795c <rcl_guard_condition_fini+0x18>
 8017988:	250b      	movs	r5, #11
 801798a:	4628      	mov	r0, r5
 801798c:	b002      	add	sp, #8
 801798e:	bd70      	pop	{r4, r5, r6, pc}

08017990 <rcl_guard_condition_get_default_options>:
 8017990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017992:	b087      	sub	sp, #28
 8017994:	4606      	mov	r6, r0
 8017996:	4c0b      	ldr	r4, [pc, #44]	; (80179c4 <rcl_guard_condition_get_default_options+0x34>)
 8017998:	4668      	mov	r0, sp
 801799a:	f7f4 fbaf 	bl	800c0fc <rcutils_get_default_allocator>
 801799e:	46ee      	mov	lr, sp
 80179a0:	46a4      	mov	ip, r4
 80179a2:	4625      	mov	r5, r4
 80179a4:	4634      	mov	r4, r6
 80179a6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80179aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80179ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80179b0:	f8de 7000 	ldr.w	r7, [lr]
 80179b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80179b6:	4630      	mov	r0, r6
 80179b8:	f8cc 7000 	str.w	r7, [ip]
 80179bc:	6027      	str	r7, [r4, #0]
 80179be:	b007      	add	sp, #28
 80179c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80179c2:	bf00      	nop
 80179c4:	200109b4 	.word	0x200109b4

080179c8 <rcl_guard_condition_get_rmw_handle>:
 80179c8:	b110      	cbz	r0, 80179d0 <rcl_guard_condition_get_rmw_handle+0x8>
 80179ca:	6840      	ldr	r0, [r0, #4]
 80179cc:	b100      	cbz	r0, 80179d0 <rcl_guard_condition_get_rmw_handle+0x8>
 80179ce:	6800      	ldr	r0, [r0, #0]
 80179d0:	4770      	bx	lr
 80179d2:	bf00      	nop

080179d4 <rcl_publish>:
 80179d4:	b1f8      	cbz	r0, 8017a16 <rcl_publish+0x42>
 80179d6:	6803      	ldr	r3, [r0, #0]
 80179d8:	b570      	push	{r4, r5, r6, lr}
 80179da:	4604      	mov	r4, r0
 80179dc:	b1b3      	cbz	r3, 8017a0c <rcl_publish+0x38>
 80179de:	4616      	mov	r6, r2
 80179e0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80179e4:	b192      	cbz	r2, 8017a0c <rcl_publish+0x38>
 80179e6:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 80179ea:	460d      	mov	r5, r1
 80179ec:	f7f7 fb18 	bl	800f020 <rcl_context_is_valid>
 80179f0:	b160      	cbz	r0, 8017a0c <rcl_publish+0x38>
 80179f2:	6823      	ldr	r3, [r4, #0]
 80179f4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 80179f8:	b140      	cbz	r0, 8017a0c <rcl_publish+0x38>
 80179fa:	b155      	cbz	r5, 8017a12 <rcl_publish+0x3e>
 80179fc:	4632      	mov	r2, r6
 80179fe:	4629      	mov	r1, r5
 8017a00:	f000 fc10 	bl	8018224 <rmw_publish>
 8017a04:	3800      	subs	r0, #0
 8017a06:	bf18      	it	ne
 8017a08:	2001      	movne	r0, #1
 8017a0a:	bd70      	pop	{r4, r5, r6, pc}
 8017a0c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8017a10:	bd70      	pop	{r4, r5, r6, pc}
 8017a12:	200b      	movs	r0, #11
 8017a14:	bd70      	pop	{r4, r5, r6, pc}
 8017a16:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8017a1a:	4770      	bx	lr

08017a1c <rcl_publisher_is_valid>:
 8017a1c:	b1a0      	cbz	r0, 8017a48 <rcl_publisher_is_valid+0x2c>
 8017a1e:	6803      	ldr	r3, [r0, #0]
 8017a20:	b510      	push	{r4, lr}
 8017a22:	4604      	mov	r4, r0
 8017a24:	b173      	cbz	r3, 8017a44 <rcl_publisher_is_valid+0x28>
 8017a26:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8017a2a:	b15a      	cbz	r2, 8017a44 <rcl_publisher_is_valid+0x28>
 8017a2c:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8017a30:	f7f7 faf6 	bl	800f020 <rcl_context_is_valid>
 8017a34:	b130      	cbz	r0, 8017a44 <rcl_publisher_is_valid+0x28>
 8017a36:	6823      	ldr	r3, [r4, #0]
 8017a38:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8017a3c:	3800      	subs	r0, #0
 8017a3e:	bf18      	it	ne
 8017a40:	2001      	movne	r0, #1
 8017a42:	bd10      	pop	{r4, pc}
 8017a44:	2000      	movs	r0, #0
 8017a46:	bd10      	pop	{r4, pc}
 8017a48:	2000      	movs	r0, #0
 8017a4a:	4770      	bx	lr

08017a4c <rcl_publisher_is_valid_except_context>:
 8017a4c:	b130      	cbz	r0, 8017a5c <rcl_publisher_is_valid_except_context+0x10>
 8017a4e:	6800      	ldr	r0, [r0, #0]
 8017a50:	b120      	cbz	r0, 8017a5c <rcl_publisher_is_valid_except_context+0x10>
 8017a52:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 8017a56:	3800      	subs	r0, #0
 8017a58:	bf18      	it	ne
 8017a5a:	2001      	movne	r0, #1
 8017a5c:	4770      	bx	lr
 8017a5e:	bf00      	nop

08017a60 <rcl_validate_topic_name>:
 8017a60:	2800      	cmp	r0, #0
 8017a62:	f000 8089 	beq.w	8017b78 <rcl_validate_topic_name+0x118>
 8017a66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a6a:	460e      	mov	r6, r1
 8017a6c:	2900      	cmp	r1, #0
 8017a6e:	f000 8085 	beq.w	8017b7c <rcl_validate_topic_name+0x11c>
 8017a72:	4604      	mov	r4, r0
 8017a74:	4617      	mov	r7, r2
 8017a76:	f7e8 fc43 	bl	8000300 <strlen>
 8017a7a:	b1b0      	cbz	r0, 8017aaa <rcl_validate_topic_name+0x4a>
 8017a7c:	f894 e000 	ldrb.w	lr, [r4]
 8017a80:	f8df c160 	ldr.w	ip, [pc, #352]	; 8017be4 <rcl_validate_topic_name+0x184>
 8017a84:	f81c 300e 	ldrb.w	r3, [ip, lr]
 8017a88:	f013 0304 	ands.w	r3, r3, #4
 8017a8c:	d139      	bne.n	8017b02 <rcl_validate_topic_name+0xa2>
 8017a8e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8017a92:	f814 2008 	ldrb.w	r2, [r4, r8]
 8017a96:	2a2f      	cmp	r2, #47	; 0x2f
 8017a98:	d10f      	bne.n	8017aba <rcl_validate_topic_name+0x5a>
 8017a9a:	2202      	movs	r2, #2
 8017a9c:	6032      	str	r2, [r6, #0]
 8017a9e:	b3a7      	cbz	r7, 8017b0a <rcl_validate_topic_name+0xaa>
 8017aa0:	4618      	mov	r0, r3
 8017aa2:	f8c7 8000 	str.w	r8, [r7]
 8017aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017aaa:	2301      	movs	r3, #1
 8017aac:	6033      	str	r3, [r6, #0]
 8017aae:	b367      	cbz	r7, 8017b0a <rcl_validate_topic_name+0xaa>
 8017ab0:	2300      	movs	r3, #0
 8017ab2:	4618      	mov	r0, r3
 8017ab4:	603b      	str	r3, [r7, #0]
 8017ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017aba:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 8017abe:	461d      	mov	r5, r3
 8017ac0:	4619      	mov	r1, r3
 8017ac2:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8017ac6:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 8017aca:	f1b9 0f09 	cmp.w	r9, #9
 8017ace:	d91f      	bls.n	8017b10 <rcl_validate_topic_name+0xb0>
 8017ad0:	f022 0920 	bic.w	r9, r2, #32
 8017ad4:	f1a9 0941 	sub.w	r9, r9, #65	; 0x41
 8017ad8:	f1b9 0f19 	cmp.w	r9, #25
 8017adc:	d918      	bls.n	8017b10 <rcl_validate_topic_name+0xb0>
 8017ade:	2a5f      	cmp	r2, #95	; 0x5f
 8017ae0:	d024      	beq.n	8017b2c <rcl_validate_topic_name+0xcc>
 8017ae2:	2a2f      	cmp	r2, #47	; 0x2f
 8017ae4:	d058      	beq.n	8017b98 <rcl_validate_topic_name+0x138>
 8017ae6:	2a7e      	cmp	r2, #126	; 0x7e
 8017ae8:	d04a      	beq.n	8017b80 <rcl_validate_topic_name+0x120>
 8017aea:	2a7b      	cmp	r2, #123	; 0x7b
 8017aec:	d05b      	beq.n	8017ba6 <rcl_validate_topic_name+0x146>
 8017aee:	2a7d      	cmp	r2, #125	; 0x7d
 8017af0:	d169      	bne.n	8017bc6 <rcl_validate_topic_name+0x166>
 8017af2:	2d00      	cmp	r5, #0
 8017af4:	d15c      	bne.n	8017bb0 <rcl_validate_topic_name+0x150>
 8017af6:	2305      	movs	r3, #5
 8017af8:	6033      	str	r3, [r6, #0]
 8017afa:	b137      	cbz	r7, 8017b0a <rcl_validate_topic_name+0xaa>
 8017afc:	2000      	movs	r0, #0
 8017afe:	6039      	str	r1, [r7, #0]
 8017b00:	e7d9      	b.n	8017ab6 <rcl_validate_topic_name+0x56>
 8017b02:	2304      	movs	r3, #4
 8017b04:	6033      	str	r3, [r6, #0]
 8017b06:	2f00      	cmp	r7, #0
 8017b08:	d1d2      	bne.n	8017ab0 <rcl_validate_topic_name+0x50>
 8017b0a:	2000      	movs	r0, #0
 8017b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b10:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017b14:	0752      	lsls	r2, r2, #29
 8017b16:	d509      	bpl.n	8017b2c <rcl_validate_topic_name+0xcc>
 8017b18:	2900      	cmp	r1, #0
 8017b1a:	bf0c      	ite	eq
 8017b1c:	2200      	moveq	r2, #0
 8017b1e:	f005 0201 	andne.w	r2, r5, #1
 8017b22:	b11a      	cbz	r2, 8017b2c <rcl_validate_topic_name+0xcc>
 8017b24:	1e4d      	subs	r5, r1, #1
 8017b26:	429d      	cmp	r5, r3
 8017b28:	d031      	beq.n	8017b8e <rcl_validate_topic_name+0x12e>
 8017b2a:	4615      	mov	r5, r2
 8017b2c:	3101      	adds	r1, #1
 8017b2e:	4288      	cmp	r0, r1
 8017b30:	d1c7      	bne.n	8017ac2 <rcl_validate_topic_name+0x62>
 8017b32:	2d00      	cmp	r5, #0
 8017b34:	d142      	bne.n	8017bbc <rcl_validate_topic_name+0x15c>
 8017b36:	4628      	mov	r0, r5
 8017b38:	2301      	movs	r3, #1
 8017b3a:	e00c      	b.n	8017b56 <rcl_validate_topic_name+0xf6>
 8017b3c:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8017b40:	d101      	bne.n	8017b46 <rcl_validate_topic_name+0xe6>
 8017b42:	2801      	cmp	r0, #1
 8017b44:	d047      	beq.n	8017bd6 <rcl_validate_topic_name+0x176>
 8017b46:	1c5a      	adds	r2, r3, #1
 8017b48:	428b      	cmp	r3, r1
 8017b4a:	f100 0001 	add.w	r0, r0, #1
 8017b4e:	f104 0401 	add.w	r4, r4, #1
 8017b52:	4613      	mov	r3, r2
 8017b54:	d22e      	bcs.n	8017bb4 <rcl_validate_topic_name+0x154>
 8017b56:	4580      	cmp	r8, r0
 8017b58:	d0f5      	beq.n	8017b46 <rcl_validate_topic_name+0xe6>
 8017b5a:	7822      	ldrb	r2, [r4, #0]
 8017b5c:	2a2f      	cmp	r2, #47	; 0x2f
 8017b5e:	d1ed      	bne.n	8017b3c <rcl_validate_topic_name+0xdc>
 8017b60:	7862      	ldrb	r2, [r4, #1]
 8017b62:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017b66:	0752      	lsls	r2, r2, #29
 8017b68:	d5ed      	bpl.n	8017b46 <rcl_validate_topic_name+0xe6>
 8017b6a:	2204      	movs	r2, #4
 8017b6c:	6032      	str	r2, [r6, #0]
 8017b6e:	2f00      	cmp	r7, #0
 8017b70:	d0cb      	beq.n	8017b0a <rcl_validate_topic_name+0xaa>
 8017b72:	2000      	movs	r0, #0
 8017b74:	603b      	str	r3, [r7, #0]
 8017b76:	e79e      	b.n	8017ab6 <rcl_validate_topic_name+0x56>
 8017b78:	200b      	movs	r0, #11
 8017b7a:	4770      	bx	lr
 8017b7c:	200b      	movs	r0, #11
 8017b7e:	e79a      	b.n	8017ab6 <rcl_validate_topic_name+0x56>
 8017b80:	2900      	cmp	r1, #0
 8017b82:	d0d3      	beq.n	8017b2c <rcl_validate_topic_name+0xcc>
 8017b84:	2306      	movs	r3, #6
 8017b86:	6033      	str	r3, [r6, #0]
 8017b88:	2f00      	cmp	r7, #0
 8017b8a:	d1b7      	bne.n	8017afc <rcl_validate_topic_name+0x9c>
 8017b8c:	e7bd      	b.n	8017b0a <rcl_validate_topic_name+0xaa>
 8017b8e:	2309      	movs	r3, #9
 8017b90:	6033      	str	r3, [r6, #0]
 8017b92:	2f00      	cmp	r7, #0
 8017b94:	d1b2      	bne.n	8017afc <rcl_validate_topic_name+0x9c>
 8017b96:	e7b8      	b.n	8017b0a <rcl_validate_topic_name+0xaa>
 8017b98:	2d00      	cmp	r5, #0
 8017b9a:	d0c7      	beq.n	8017b2c <rcl_validate_topic_name+0xcc>
 8017b9c:	2308      	movs	r3, #8
 8017b9e:	6033      	str	r3, [r6, #0]
 8017ba0:	2f00      	cmp	r7, #0
 8017ba2:	d1ab      	bne.n	8017afc <rcl_validate_topic_name+0x9c>
 8017ba4:	e7b1      	b.n	8017b0a <rcl_validate_topic_name+0xaa>
 8017ba6:	2d00      	cmp	r5, #0
 8017ba8:	d1f8      	bne.n	8017b9c <rcl_validate_topic_name+0x13c>
 8017baa:	460b      	mov	r3, r1
 8017bac:	2501      	movs	r5, #1
 8017bae:	e7bd      	b.n	8017b2c <rcl_validate_topic_name+0xcc>
 8017bb0:	2500      	movs	r5, #0
 8017bb2:	e7bb      	b.n	8017b2c <rcl_validate_topic_name+0xcc>
 8017bb4:	2300      	movs	r3, #0
 8017bb6:	4618      	mov	r0, r3
 8017bb8:	6033      	str	r3, [r6, #0]
 8017bba:	e77c      	b.n	8017ab6 <rcl_validate_topic_name+0x56>
 8017bbc:	2205      	movs	r2, #5
 8017bbe:	6032      	str	r2, [r6, #0]
 8017bc0:	2f00      	cmp	r7, #0
 8017bc2:	d1d6      	bne.n	8017b72 <rcl_validate_topic_name+0x112>
 8017bc4:	e7a1      	b.n	8017b0a <rcl_validate_topic_name+0xaa>
 8017bc6:	2d00      	cmp	r5, #0
 8017bc8:	bf14      	ite	ne
 8017bca:	2308      	movne	r3, #8
 8017bcc:	2303      	moveq	r3, #3
 8017bce:	6033      	str	r3, [r6, #0]
 8017bd0:	2f00      	cmp	r7, #0
 8017bd2:	d193      	bne.n	8017afc <rcl_validate_topic_name+0x9c>
 8017bd4:	e799      	b.n	8017b0a <rcl_validate_topic_name+0xaa>
 8017bd6:	2307      	movs	r3, #7
 8017bd8:	6033      	str	r3, [r6, #0]
 8017bda:	2f00      	cmp	r7, #0
 8017bdc:	d095      	beq.n	8017b0a <rcl_validate_topic_name+0xaa>
 8017bde:	2301      	movs	r3, #1
 8017be0:	e7c7      	b.n	8017b72 <rcl_validate_topic_name+0x112>
 8017be2:	bf00      	nop
 8017be4:	0801bf14 	.word	0x0801bf14

08017be8 <rcutils_split>:
 8017be8:	b082      	sub	sp, #8
 8017bea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bee:	b08d      	sub	sp, #52	; 0x34
 8017bf0:	ac16      	add	r4, sp, #88	; 0x58
 8017bf2:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8017bf4:	e884 000c 	stmia.w	r4, {r2, r3}
 8017bf8:	2f00      	cmp	r7, #0
 8017bfa:	f000 80a8 	beq.w	8017d4e <rcutils_split+0x166>
 8017bfe:	4605      	mov	r5, r0
 8017c00:	2800      	cmp	r0, #0
 8017c02:	d07e      	beq.n	8017d02 <rcutils_split+0x11a>
 8017c04:	7803      	ldrb	r3, [r0, #0]
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	d07b      	beq.n	8017d02 <rcutils_split+0x11a>
 8017c0a:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
 8017c0e:	460e      	mov	r6, r1
 8017c10:	9203      	str	r2, [sp, #12]
 8017c12:	f107 0408 	add.w	r4, r7, #8
 8017c16:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
 8017c1a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017c1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017c20:	4628      	mov	r0, r5
 8017c22:	f8c4 b000 	str.w	fp, [r4]
 8017c26:	f7e8 fb6b 	bl	8000300 <strlen>
 8017c2a:	782c      	ldrb	r4, [r5, #0]
 8017c2c:	182b      	adds	r3, r5, r0
 8017c2e:	1ba4      	subs	r4, r4, r6
 8017c30:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8017c34:	fab4 f484 	clz	r4, r4
 8017c38:	42b3      	cmp	r3, r6
 8017c3a:	bf14      	ite	ne
 8017c3c:	4680      	movne	r8, r0
 8017c3e:	f1a0 0801 	subeq.w	r8, r0, #1
 8017c42:	2001      	movs	r0, #1
 8017c44:	0964      	lsrs	r4, r4, #5
 8017c46:	6038      	str	r0, [r7, #0]
 8017c48:	4544      	cmp	r4, r8
 8017c4a:	d26b      	bcs.n	8017d24 <rcutils_split+0x13c>
 8017c4c:	192b      	adds	r3, r5, r4
 8017c4e:	eb05 0108 	add.w	r1, r5, r8
 8017c52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017c56:	42b2      	cmp	r2, r6
 8017c58:	d101      	bne.n	8017c5e <rcutils_split+0x76>
 8017c5a:	3001      	adds	r0, #1
 8017c5c:	6038      	str	r0, [r7, #0]
 8017c5e:	4299      	cmp	r1, r3
 8017c60:	d1f7      	bne.n	8017c52 <rcutils_split+0x6a>
 8017c62:	9b03      	ldr	r3, [sp, #12]
 8017c64:	0080      	lsls	r0, r0, #2
 8017c66:	4659      	mov	r1, fp
 8017c68:	4798      	blx	r3
 8017c6a:	4603      	mov	r3, r0
 8017c6c:	6078      	str	r0, [r7, #4]
 8017c6e:	2800      	cmp	r0, #0
 8017c70:	d05f      	beq.n	8017d32 <rcutils_split+0x14a>
 8017c72:	f04f 0a00 	mov.w	sl, #0
 8017c76:	46a1      	mov	r9, r4
 8017c78:	e002      	b.n	8017c80 <rcutils_split+0x98>
 8017c7a:	3401      	adds	r4, #1
 8017c7c:	45a0      	cmp	r8, r4
 8017c7e:	d922      	bls.n	8017cc6 <rcutils_split+0xde>
 8017c80:	5d2a      	ldrb	r2, [r5, r4]
 8017c82:	42b2      	cmp	r2, r6
 8017c84:	d1f9      	bne.n	8017c7a <rcutils_split+0x92>
 8017c86:	45a1      	cmp	r9, r4
 8017c88:	eba4 0209 	sub.w	r2, r4, r9
 8017c8c:	d032      	beq.n	8017cf4 <rcutils_split+0x10c>
 8017c8e:	4659      	mov	r1, fp
 8017c90:	1c90      	adds	r0, r2, #2
 8017c92:	9302      	str	r3, [sp, #8]
 8017c94:	9b03      	ldr	r3, [sp, #12]
 8017c96:	9201      	str	r2, [sp, #4]
 8017c98:	4798      	blx	r3
 8017c9a:	9a01      	ldr	r2, [sp, #4]
 8017c9c:	9b02      	ldr	r3, [sp, #8]
 8017c9e:	1c51      	adds	r1, r2, #1
 8017ca0:	687a      	ldr	r2, [r7, #4]
 8017ca2:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 8017ca6:	eb05 0309 	add.w	r3, r5, r9
 8017caa:	f852 002a 	ldr.w	r0, [r2, sl, lsl #2]
 8017cae:	2800      	cmp	r0, #0
 8017cb0:	d04f      	beq.n	8017d52 <rcutils_split+0x16a>
 8017cb2:	4a2b      	ldr	r2, [pc, #172]	; (8017d60 <rcutils_split+0x178>)
 8017cb4:	f10a 0a01 	add.w	sl, sl, #1
 8017cb8:	f001 fbb2 	bl	8019420 <sniprintf>
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	3401      	adds	r4, #1
 8017cc0:	45a0      	cmp	r8, r4
 8017cc2:	46a1      	mov	r9, r4
 8017cc4:	d8dc      	bhi.n	8017c80 <rcutils_split+0x98>
 8017cc6:	45a1      	cmp	r9, r4
 8017cc8:	d039      	beq.n	8017d3e <rcutils_split+0x156>
 8017cca:	eba4 0409 	sub.w	r4, r4, r9
 8017cce:	4659      	mov	r1, fp
 8017cd0:	9301      	str	r3, [sp, #4]
 8017cd2:	1ca0      	adds	r0, r4, #2
 8017cd4:	9b03      	ldr	r3, [sp, #12]
 8017cd6:	4798      	blx	r3
 8017cd8:	9b01      	ldr	r3, [sp, #4]
 8017cda:	4a21      	ldr	r2, [pc, #132]	; (8017d60 <rcutils_split+0x178>)
 8017cdc:	1c61      	adds	r1, r4, #1
 8017cde:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 8017ce2:	eb05 0309 	add.w	r3, r5, r9
 8017ce6:	6878      	ldr	r0, [r7, #4]
 8017ce8:	2500      	movs	r5, #0
 8017cea:	f850 002a 	ldr.w	r0, [r0, sl, lsl #2]
 8017cee:	f001 fb97 	bl	8019420 <sniprintf>
 8017cf2:	e011      	b.n	8017d18 <rcutils_split+0x130>
 8017cf4:	683a      	ldr	r2, [r7, #0]
 8017cf6:	2100      	movs	r1, #0
 8017cf8:	3a01      	subs	r2, #1
 8017cfa:	603a      	str	r2, [r7, #0]
 8017cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8017d00:	e7dd      	b.n	8017cbe <rcutils_split+0xd6>
 8017d02:	ac04      	add	r4, sp, #16
 8017d04:	a804      	add	r0, sp, #16
 8017d06:	f000 f82d 	bl	8017d64 <rcutils_get_zero_initialized_string_array>
 8017d0a:	2500      	movs	r5, #0
 8017d0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017d0e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8017d10:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8017d14:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8017d18:	4628      	mov	r0, r5
 8017d1a:	b00d      	add	sp, #52	; 0x34
 8017d1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d20:	b002      	add	sp, #8
 8017d22:	4770      	bx	lr
 8017d24:	9b03      	ldr	r3, [sp, #12]
 8017d26:	4659      	mov	r1, fp
 8017d28:	2004      	movs	r0, #4
 8017d2a:	4798      	blx	r3
 8017d2c:	4603      	mov	r3, r0
 8017d2e:	6078      	str	r0, [r7, #4]
 8017d30:	b928      	cbnz	r0, 8017d3e <rcutils_split+0x156>
 8017d32:	4638      	mov	r0, r7
 8017d34:	f000 f834 	bl	8017da0 <rcutils_string_array_fini>
 8017d38:	b970      	cbnz	r0, 8017d58 <rcutils_split+0x170>
 8017d3a:	2502      	movs	r5, #2
 8017d3c:	e7ec      	b.n	8017d18 <rcutils_split+0x130>
 8017d3e:	683a      	ldr	r2, [r7, #0]
 8017d40:	2100      	movs	r1, #0
 8017d42:	3a01      	subs	r2, #1
 8017d44:	460d      	mov	r5, r1
 8017d46:	603a      	str	r2, [r7, #0]
 8017d48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8017d4c:	e7e4      	b.n	8017d18 <rcutils_split+0x130>
 8017d4e:	250b      	movs	r5, #11
 8017d50:	e7e2      	b.n	8017d18 <rcutils_split+0x130>
 8017d52:	f8c7 a000 	str.w	sl, [r7]
 8017d56:	e7ec      	b.n	8017d32 <rcutils_split+0x14a>
 8017d58:	2502      	movs	r5, #2
 8017d5a:	f7f4 fa01 	bl	800c160 <rcutils_reset_error>
 8017d5e:	e7db      	b.n	8017d18 <rcutils_split+0x130>
 8017d60:	0801ba44 	.word	0x0801ba44

08017d64 <rcutils_get_zero_initialized_string_array>:
 8017d64:	b570      	push	{r4, r5, r6, lr}
 8017d66:	b086      	sub	sp, #24
 8017d68:	4606      	mov	r6, r0
 8017d6a:	4c0c      	ldr	r4, [pc, #48]	; (8017d9c <rcutils_get_zero_initialized_string_array+0x38>)
 8017d6c:	4668      	mov	r0, sp
 8017d6e:	f7f4 f999 	bl	800c0a4 <rcutils_get_zero_initialized_allocator>
 8017d72:	46ee      	mov	lr, sp
 8017d74:	f104 0508 	add.w	r5, r4, #8
 8017d78:	46a4      	mov	ip, r4
 8017d7a:	4634      	mov	r4, r6
 8017d7c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017d80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017d82:	f8de 3000 	ldr.w	r3, [lr]
 8017d86:	602b      	str	r3, [r5, #0]
 8017d88:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017d8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017d8e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8017d92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8017d96:	4630      	mov	r0, r6
 8017d98:	b006      	add	sp, #24
 8017d9a:	bd70      	pop	{r4, r5, r6, pc}
 8017d9c:	200109c8 	.word	0x200109c8

08017da0 <rcutils_string_array_fini>:
 8017da0:	b328      	cbz	r0, 8017dee <rcutils_string_array_fini+0x4e>
 8017da2:	b570      	push	{r4, r5, r6, lr}
 8017da4:	4604      	mov	r4, r0
 8017da6:	6840      	ldr	r0, [r0, #4]
 8017da8:	b1e0      	cbz	r0, 8017de4 <rcutils_string_array_fini+0x44>
 8017daa:	f104 0008 	add.w	r0, r4, #8
 8017dae:	f7f4 f9b3 	bl	800c118 <rcutils_allocator_is_valid>
 8017db2:	b1c0      	cbz	r0, 8017de6 <rcutils_string_array_fini+0x46>
 8017db4:	6823      	ldr	r3, [r4, #0]
 8017db6:	b1c3      	cbz	r3, 8017dea <rcutils_string_array_fini+0x4a>
 8017db8:	2500      	movs	r5, #0
 8017dba:	6860      	ldr	r0, [r4, #4]
 8017dbc:	462e      	mov	r6, r5
 8017dbe:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8017dc2:	68e3      	ldr	r3, [r4, #12]
 8017dc4:	69a1      	ldr	r1, [r4, #24]
 8017dc6:	4798      	blx	r3
 8017dc8:	e9d4 3000 	ldrd	r3, r0, [r4]
 8017dcc:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8017dd0:	3501      	adds	r5, #1
 8017dd2:	429d      	cmp	r5, r3
 8017dd4:	d3f3      	bcc.n	8017dbe <rcutils_string_array_fini+0x1e>
 8017dd6:	68e3      	ldr	r3, [r4, #12]
 8017dd8:	69a1      	ldr	r1, [r4, #24]
 8017dda:	4798      	blx	r3
 8017ddc:	2300      	movs	r3, #0
 8017dde:	4618      	mov	r0, r3
 8017de0:	e9c4 3300 	strd	r3, r3, [r4]
 8017de4:	bd70      	pop	{r4, r5, r6, pc}
 8017de6:	200b      	movs	r0, #11
 8017de8:	bd70      	pop	{r4, r5, r6, pc}
 8017dea:	6860      	ldr	r0, [r4, #4]
 8017dec:	e7f3      	b.n	8017dd6 <rcutils_string_array_fini+0x36>
 8017dee:	200b      	movs	r0, #11
 8017df0:	4770      	bx	lr
 8017df2:	bf00      	nop

08017df4 <rmw_get_zero_initialized_discovery_options>:
 8017df4:	b510      	push	{r4, lr}
 8017df6:	4604      	mov	r4, r0
 8017df8:	2220      	movs	r2, #32
 8017dfa:	2100      	movs	r1, #0
 8017dfc:	f001 fbea 	bl	80195d4 <memset>
 8017e00:	4620      	mov	r0, r4
 8017e02:	bd10      	pop	{r4, pc}

08017e04 <rmw_discovery_options_init>:
 8017e04:	b570      	push	{r4, r5, r6, lr}
 8017e06:	b318      	cbz	r0, 8017e50 <rmw_discovery_options_init+0x4c>
 8017e08:	4604      	mov	r4, r0
 8017e0a:	4610      	mov	r0, r2
 8017e0c:	460e      	mov	r6, r1
 8017e0e:	4615      	mov	r5, r2
 8017e10:	f7f4 f982 	bl	800c118 <rcutils_allocator_is_valid>
 8017e14:	b1e0      	cbz	r0, 8017e50 <rmw_discovery_options_init+0x4c>
 8017e16:	68a3      	ldr	r3, [r4, #8]
 8017e18:	b9d3      	cbnz	r3, 8017e50 <rmw_discovery_options_init+0x4c>
 8017e1a:	6863      	ldr	r3, [r4, #4]
 8017e1c:	b9c3      	cbnz	r3, 8017e50 <rmw_discovery_options_init+0x4c>
 8017e1e:	7823      	ldrb	r3, [r4, #0]
 8017e20:	b90b      	cbnz	r3, 8017e26 <rmw_discovery_options_init+0x22>
 8017e22:	2302      	movs	r3, #2
 8017e24:	7023      	strb	r3, [r4, #0]
 8017e26:	b1a6      	cbz	r6, 8017e52 <rmw_discovery_options_init+0x4e>
 8017e28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8017e2c:	4630      	mov	r0, r6
 8017e2e:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 8017e32:	4798      	blx	r3
 8017e34:	6060      	str	r0, [r4, #4]
 8017e36:	b170      	cbz	r0, 8017e56 <rmw_discovery_options_init+0x52>
 8017e38:	f104 0c0c 	add.w	ip, r4, #12
 8017e3c:	60a6      	str	r6, [r4, #8]
 8017e3e:	2600      	movs	r6, #0
 8017e40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017e42:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017e46:	682b      	ldr	r3, [r5, #0]
 8017e48:	4630      	mov	r0, r6
 8017e4a:	f8cc 3000 	str.w	r3, [ip]
 8017e4e:	bd70      	pop	{r4, r5, r6, pc}
 8017e50:	260b      	movs	r6, #11
 8017e52:	4630      	mov	r0, r6
 8017e54:	bd70      	pop	{r4, r5, r6, pc}
 8017e56:	260a      	movs	r6, #10
 8017e58:	e7fb      	b.n	8017e52 <rmw_discovery_options_init+0x4e>
 8017e5a:	bf00      	nop

08017e5c <rmw_time_equal>:
 8017e5c:	b4f0      	push	{r4, r5, r6, r7}
 8017e5e:	b084      	sub	sp, #16
 8017e60:	ac04      	add	r4, sp, #16
 8017e62:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8017e66:	4603      	mov	r3, r0
 8017e68:	4925      	ldr	r1, [pc, #148]	; (8017f00 <rmw_time_equal+0xa4>)
 8017e6a:	9d01      	ldr	r5, [sp, #4]
 8017e6c:	4610      	mov	r0, r2
 8017e6e:	4299      	cmp	r1, r3
 8017e70:	f04f 0202 	mov.w	r2, #2
 8017e74:	9e03      	ldr	r6, [sp, #12]
 8017e76:	41aa      	sbcs	r2, r5
 8017e78:	d330      	bcc.n	8017edc <rmw_time_equal+0x80>
 8017e7a:	4c22      	ldr	r4, [pc, #136]	; (8017f04 <rmw_time_equal+0xa8>)
 8017e7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017e80:	fba3 3204 	umull	r3, r2, r3, r4
 8017e84:	fb04 2205 	mla	r2, r4, r5, r2
 8017e88:	43dd      	mvns	r5, r3
 8017e8a:	1a8c      	subs	r4, r1, r2
 8017e8c:	4285      	cmp	r5, r0
 8017e8e:	41b4      	sbcs	r4, r6
 8017e90:	d332      	bcc.n	8017ef8 <rmw_time_equal+0x9c>
 8017e92:	eb10 0c03 	adds.w	ip, r0, r3
 8017e96:	eb42 0106 	adc.w	r1, r2, r6
 8017e9a:	4819      	ldr	r0, [pc, #100]	; (8017f00 <rmw_time_equal+0xa4>)
 8017e9c:	2202      	movs	r2, #2
 8017e9e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8017ea0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8017ea2:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8017ea6:	4298      	cmp	r0, r3
 8017ea8:	41b2      	sbcs	r2, r6
 8017eaa:	d31c      	bcc.n	8017ee6 <rmw_time_equal+0x8a>
 8017eac:	4c15      	ldr	r4, [pc, #84]	; (8017f04 <rmw_time_equal+0xa8>)
 8017eae:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8017eb2:	fba3 3204 	umull	r3, r2, r3, r4
 8017eb6:	fb04 2206 	mla	r2, r4, r6, r2
 8017eba:	43de      	mvns	r6, r3
 8017ebc:	1a84      	subs	r4, r0, r2
 8017ebe:	42ae      	cmp	r6, r5
 8017ec0:	41bc      	sbcs	r4, r7
 8017ec2:	d315      	bcc.n	8017ef0 <rmw_time_equal+0x94>
 8017ec4:	195b      	adds	r3, r3, r5
 8017ec6:	eb42 0207 	adc.w	r2, r2, r7
 8017eca:	428a      	cmp	r2, r1
 8017ecc:	bf08      	it	eq
 8017ece:	4563      	cmpeq	r3, ip
 8017ed0:	bf0c      	ite	eq
 8017ed2:	2001      	moveq	r0, #1
 8017ed4:	2000      	movne	r0, #0
 8017ed6:	b004      	add	sp, #16
 8017ed8:	bcf0      	pop	{r4, r5, r6, r7}
 8017eda:	4770      	bx	lr
 8017edc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8017ee0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017ee4:	e7d9      	b.n	8017e9a <rmw_time_equal+0x3e>
 8017ee6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017eea:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8017eee:	e7ec      	b.n	8017eca <rmw_time_equal+0x6e>
 8017ef0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017ef4:	4602      	mov	r2, r0
 8017ef6:	e7e8      	b.n	8017eca <rmw_time_equal+0x6e>
 8017ef8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8017efc:	e7cd      	b.n	8017e9a <rmw_time_equal+0x3e>
 8017efe:	bf00      	nop
 8017f00:	25c17d04 	.word	0x25c17d04
 8017f04:	3b9aca00 	.word	0x3b9aca00

08017f08 <rmw_time_total_nsec>:
 8017f08:	b470      	push	{r4, r5, r6}
 8017f0a:	b085      	sub	sp, #20
 8017f0c:	ac04      	add	r4, sp, #16
 8017f0e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8017f12:	4603      	mov	r3, r0
 8017f14:	4913      	ldr	r1, [pc, #76]	; (8017f64 <rmw_time_total_nsec+0x5c>)
 8017f16:	9d01      	ldr	r5, [sp, #4]
 8017f18:	4610      	mov	r0, r2
 8017f1a:	4299      	cmp	r1, r3
 8017f1c:	f04f 0202 	mov.w	r2, #2
 8017f20:	9e03      	ldr	r6, [sp, #12]
 8017f22:	41aa      	sbcs	r2, r5
 8017f24:	d311      	bcc.n	8017f4a <rmw_time_total_nsec+0x42>
 8017f26:	4c10      	ldr	r4, [pc, #64]	; (8017f68 <rmw_time_total_nsec+0x60>)
 8017f28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017f2c:	fba3 3204 	umull	r3, r2, r3, r4
 8017f30:	fb04 2205 	mla	r2, r4, r5, r2
 8017f34:	43dd      	mvns	r5, r3
 8017f36:	1a8c      	subs	r4, r1, r2
 8017f38:	4285      	cmp	r5, r0
 8017f3a:	41b4      	sbcs	r4, r6
 8017f3c:	d30c      	bcc.n	8017f58 <rmw_time_total_nsec+0x50>
 8017f3e:	1818      	adds	r0, r3, r0
 8017f40:	eb42 0106 	adc.w	r1, r2, r6
 8017f44:	b005      	add	sp, #20
 8017f46:	bc70      	pop	{r4, r5, r6}
 8017f48:	4770      	bx	lr
 8017f4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017f4e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017f52:	b005      	add	sp, #20
 8017f54:	bc70      	pop	{r4, r5, r6}
 8017f56:	4770      	bx	lr
 8017f58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017f5c:	b005      	add	sp, #20
 8017f5e:	bc70      	pop	{r4, r5, r6}
 8017f60:	4770      	bx	lr
 8017f62:	bf00      	nop
 8017f64:	25c17d04 	.word	0x25c17d04
 8017f68:	3b9aca00 	.word	0x3b9aca00

08017f6c <on_status>:
 8017f6c:	b082      	sub	sp, #8
 8017f6e:	b002      	add	sp, #8
 8017f70:	4770      	bx	lr
 8017f72:	bf00      	nop

08017f74 <on_topic>:
 8017f74:	4a23      	ldr	r2, [pc, #140]	; (8018004 <on_topic+0x90>)
 8017f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f7a:	6812      	ldr	r2, [r2, #0]
 8017f7c:	b094      	sub	sp, #80	; 0x50
 8017f7e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8017f80:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 8017f84:	9113      	str	r1, [sp, #76]	; 0x4c
 8017f86:	9312      	str	r3, [sp, #72]	; 0x48
 8017f88:	b3c2      	cbz	r2, 8017ffc <on_topic+0x88>
 8017f8a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8017f8e:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 8017f92:	e001      	b.n	8017f98 <on_topic+0x24>
 8017f94:	6852      	ldr	r2, [r2, #4]
 8017f96:	b38a      	cbz	r2, 8017ffc <on_topic+0x88>
 8017f98:	6894      	ldr	r4, [r2, #8]
 8017f9a:	8aa3      	ldrh	r3, [r4, #20]
 8017f9c:	428b      	cmp	r3, r1
 8017f9e:	d1f9      	bne.n	8017f94 <on_topic+0x20>
 8017fa0:	7da3      	ldrb	r3, [r4, #22]
 8017fa2:	4283      	cmp	r3, r0
 8017fa4:	d1f6      	bne.n	8017f94 <on_topic+0x20>
 8017fa6:	2248      	movs	r2, #72	; 0x48
 8017fa8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8017fac:	4668      	mov	r0, sp
 8017fae:	f001 fc86 	bl	80198be <memcpy>
 8017fb2:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8017fb6:	4620      	mov	r0, r4
 8017fb8:	cb0c      	ldmia	r3, {r2, r3}
 8017fba:	f7fb fdf9 	bl	8013bb0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017fbe:	4607      	mov	r7, r0
 8017fc0:	b1e0      	cbz	r0, 8017ffc <on_topic+0x88>
 8017fc2:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8017fc6:	462a      	mov	r2, r5
 8017fc8:	4630      	mov	r0, r6
 8017fca:	f108 0110 	add.w	r1, r8, #16
 8017fce:	f7f4 fc43 	bl	800c858 <ucdr_deserialize_array_uint8_t>
 8017fd2:	b930      	cbnz	r0, 8017fe2 <on_topic+0x6e>
 8017fd4:	4639      	mov	r1, r7
 8017fd6:	480c      	ldr	r0, [pc, #48]	; (8018008 <on_topic+0x94>)
 8017fd8:	b014      	add	sp, #80	; 0x50
 8017fda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017fde:	f000 b8bd 	b.w	801815c <put_memory>
 8017fe2:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 8017fe6:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 8017fea:	f000 f97b 	bl	80182e4 <rmw_uros_epoch_nanos>
 8017fee:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 8017ff2:	2305      	movs	r3, #5
 8017ff4:	e942 0102 	strd	r0, r1, [r2, #-8]
 8017ff8:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 8017ffc:	b014      	add	sp, #80	; 0x50
 8017ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018002:	bf00      	nop
 8018004:	2001090c 	.word	0x2001090c
 8018008:	200108fc 	.word	0x200108fc

0801800c <on_request>:
 801800c:	4824      	ldr	r0, [pc, #144]	; (80180a0 <on_request+0x94>)
 801800e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018012:	6800      	ldr	r0, [r0, #0]
 8018014:	b094      	sub	sp, #80	; 0x50
 8018016:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8018018:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801801c:	9113      	str	r1, [sp, #76]	; 0x4c
 801801e:	2800      	cmp	r0, #0
 8018020:	d03b      	beq.n	801809a <on_request+0x8e>
 8018022:	461d      	mov	r5, r3
 8018024:	e001      	b.n	801802a <on_request+0x1e>
 8018026:	6840      	ldr	r0, [r0, #4]
 8018028:	b3b8      	cbz	r0, 801809a <on_request+0x8e>
 801802a:	6884      	ldr	r4, [r0, #8]
 801802c:	8b21      	ldrh	r1, [r4, #24]
 801802e:	4291      	cmp	r1, r2
 8018030:	d1f9      	bne.n	8018026 <on_request+0x1a>
 8018032:	2248      	movs	r2, #72	; 0x48
 8018034:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8018038:	4668      	mov	r0, sp
 801803a:	f001 fc40 	bl	80198be <memcpy>
 801803e:	f104 0320 	add.w	r3, r4, #32
 8018042:	4620      	mov	r0, r4
 8018044:	cb0c      	ldmia	r3, {r2, r3}
 8018046:	f7fb fdb3 	bl	8013bb0 <rmw_uxrce_get_static_input_buffer_for_entity>
 801804a:	4680      	mov	r8, r0
 801804c:	b328      	cbz	r0, 801809a <on_request+0x8e>
 801804e:	4630      	mov	r0, r6
 8018050:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8018054:	463a      	mov	r2, r7
 8018056:	f106 0110 	add.w	r1, r6, #16
 801805a:	f7f4 fbfd 	bl	800c858 <ucdr_deserialize_array_uint8_t>
 801805e:	b930      	cbnz	r0, 801806e <on_request+0x62>
 8018060:	4641      	mov	r1, r8
 8018062:	4810      	ldr	r0, [pc, #64]	; (80180a4 <on_request+0x98>)
 8018064:	b014      	add	sp, #80	; 0x50
 8018066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801806a:	f000 b877 	b.w	801815c <put_memory>
 801806e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018070:	f606 0c28 	addw	ip, r6, #2088	; 0x828
 8018074:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 8018078:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 801807c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018080:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018084:	e88c 0003 	stmia.w	ip, {r0, r1}
 8018088:	f000 f92c 	bl	80182e4 <rmw_uros_epoch_nanos>
 801808c:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 8018090:	2303      	movs	r3, #3
 8018092:	e942 0102 	strd	r0, r1, [r2, #-8]
 8018096:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801809a:	b014      	add	sp, #80	; 0x50
 801809c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180a0:	200108dc 	.word	0x200108dc
 80180a4:	200108fc 	.word	0x200108fc

080180a8 <on_reply>:
 80180a8:	4822      	ldr	r0, [pc, #136]	; (8018134 <on_reply+0x8c>)
 80180aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80180ae:	6800      	ldr	r0, [r0, #0]
 80180b0:	b094      	sub	sp, #80	; 0x50
 80180b2:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80180b4:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 80180b8:	9113      	str	r1, [sp, #76]	; 0x4c
 80180ba:	b3b8      	cbz	r0, 801812c <on_reply+0x84>
 80180bc:	461d      	mov	r5, r3
 80180be:	e001      	b.n	80180c4 <on_reply+0x1c>
 80180c0:	6840      	ldr	r0, [r0, #4]
 80180c2:	b398      	cbz	r0, 801812c <on_reply+0x84>
 80180c4:	6884      	ldr	r4, [r0, #8]
 80180c6:	8b21      	ldrh	r1, [r4, #24]
 80180c8:	4291      	cmp	r1, r2
 80180ca:	d1f9      	bne.n	80180c0 <on_reply+0x18>
 80180cc:	2248      	movs	r2, #72	; 0x48
 80180ce:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80180d2:	4668      	mov	r0, sp
 80180d4:	f001 fbf3 	bl	80198be <memcpy>
 80180d8:	f104 0320 	add.w	r3, r4, #32
 80180dc:	4620      	mov	r0, r4
 80180de:	cb0c      	ldmia	r3, {r2, r3}
 80180e0:	f7fb fd66 	bl	8013bb0 <rmw_uxrce_get_static_input_buffer_for_entity>
 80180e4:	4680      	mov	r8, r0
 80180e6:	b308      	cbz	r0, 801812c <on_reply+0x84>
 80180e8:	4630      	mov	r0, r6
 80180ea:	f8d8 6008 	ldr.w	r6, [r8, #8]
 80180ee:	463a      	mov	r2, r7
 80180f0:	f106 0110 	add.w	r1, r6, #16
 80180f4:	f7f4 fbb0 	bl	800c858 <ucdr_deserialize_array_uint8_t>
 80180f8:	b930      	cbnz	r0, 8018108 <on_reply+0x60>
 80180fa:	4641      	mov	r1, r8
 80180fc:	480e      	ldr	r0, [pc, #56]	; (8018138 <on_reply+0x90>)
 80180fe:	b014      	add	sp, #80	; 0x50
 8018100:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018104:	f000 b82a 	b.w	801815c <put_memory>
 8018108:	2200      	movs	r2, #0
 801810a:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801810e:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 8018112:	f8c6 282c 	str.w	r2, [r6, #2092]	; 0x82c
 8018116:	f8c6 5828 	str.w	r5, [r6, #2088]	; 0x828
 801811a:	f000 f8e3 	bl	80182e4 <rmw_uros_epoch_nanos>
 801811e:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 8018122:	2304      	movs	r3, #4
 8018124:	e942 0102 	strd	r0, r1, [r2, #-8]
 8018128:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801812c:	b014      	add	sp, #80	; 0x50
 801812e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018132:	bf00      	nop
 8018134:	2000bf28 	.word	0x2000bf28
 8018138:	200108fc 	.word	0x200108fc

0801813c <get_memory>:
 801813c:	4603      	mov	r3, r0
 801813e:	6840      	ldr	r0, [r0, #4]
 8018140:	b158      	cbz	r0, 801815a <get_memory+0x1e>
 8018142:	6842      	ldr	r2, [r0, #4]
 8018144:	605a      	str	r2, [r3, #4]
 8018146:	b10a      	cbz	r2, 801814c <get_memory+0x10>
 8018148:	2100      	movs	r1, #0
 801814a:	6011      	str	r1, [r2, #0]
 801814c:	681a      	ldr	r2, [r3, #0]
 801814e:	6042      	str	r2, [r0, #4]
 8018150:	b102      	cbz	r2, 8018154 <get_memory+0x18>
 8018152:	6010      	str	r0, [r2, #0]
 8018154:	2200      	movs	r2, #0
 8018156:	6002      	str	r2, [r0, #0]
 8018158:	6018      	str	r0, [r3, #0]
 801815a:	4770      	bx	lr

0801815c <put_memory>:
 801815c:	680b      	ldr	r3, [r1, #0]
 801815e:	b10b      	cbz	r3, 8018164 <put_memory+0x8>
 8018160:	684a      	ldr	r2, [r1, #4]
 8018162:	605a      	str	r2, [r3, #4]
 8018164:	684a      	ldr	r2, [r1, #4]
 8018166:	b102      	cbz	r2, 801816a <put_memory+0xe>
 8018168:	6013      	str	r3, [r2, #0]
 801816a:	6803      	ldr	r3, [r0, #0]
 801816c:	428b      	cmp	r3, r1
 801816e:	6843      	ldr	r3, [r0, #4]
 8018170:	bf08      	it	eq
 8018172:	6002      	streq	r2, [r0, #0]
 8018174:	604b      	str	r3, [r1, #4]
 8018176:	b103      	cbz	r3, 801817a <put_memory+0x1e>
 8018178:	6019      	str	r1, [r3, #0]
 801817a:	2300      	movs	r3, #0
 801817c:	600b      	str	r3, [r1, #0]
 801817e:	6041      	str	r1, [r0, #4]
 8018180:	4770      	bx	lr
 8018182:	bf00      	nop

08018184 <rmw_create_guard_condition>:
 8018184:	b538      	push	{r3, r4, r5, lr}
 8018186:	4605      	mov	r5, r0
 8018188:	4808      	ldr	r0, [pc, #32]	; (80181ac <rmw_create_guard_condition+0x28>)
 801818a:	f7ff ffd7 	bl	801813c <get_memory>
 801818e:	4603      	mov	r3, r0
 8018190:	b148      	cbz	r0, 80181a6 <rmw_create_guard_condition+0x22>
 8018192:	6884      	ldr	r4, [r0, #8]
 8018194:	2300      	movs	r3, #0
 8018196:	61e5      	str	r5, [r4, #28]
 8018198:	7423      	strb	r3, [r4, #16]
 801819a:	f7fa fa99 	bl	80126d0 <rmw_get_implementation_identifier>
 801819e:	f104 0314 	add.w	r3, r4, #20
 80181a2:	e9c4 0405 	strd	r0, r4, [r4, #20]
 80181a6:	4618      	mov	r0, r3
 80181a8:	bd38      	pop	{r3, r4, r5, pc}
 80181aa:	bf00      	nop
 80181ac:	2001089c 	.word	0x2001089c

080181b0 <rmw_destroy_guard_condition>:
 80181b0:	b508      	push	{r3, lr}
 80181b2:	4b08      	ldr	r3, [pc, #32]	; (80181d4 <rmw_destroy_guard_condition+0x24>)
 80181b4:	6819      	ldr	r1, [r3, #0]
 80181b6:	b911      	cbnz	r1, 80181be <rmw_destroy_guard_condition+0xe>
 80181b8:	e00a      	b.n	80181d0 <rmw_destroy_guard_condition+0x20>
 80181ba:	6849      	ldr	r1, [r1, #4]
 80181bc:	b141      	cbz	r1, 80181d0 <rmw_destroy_guard_condition+0x20>
 80181be:	688b      	ldr	r3, [r1, #8]
 80181c0:	3314      	adds	r3, #20
 80181c2:	4298      	cmp	r0, r3
 80181c4:	d1f9      	bne.n	80181ba <rmw_destroy_guard_condition+0xa>
 80181c6:	4803      	ldr	r0, [pc, #12]	; (80181d4 <rmw_destroy_guard_condition+0x24>)
 80181c8:	f7ff ffc8 	bl	801815c <put_memory>
 80181cc:	2000      	movs	r0, #0
 80181ce:	bd08      	pop	{r3, pc}
 80181d0:	2001      	movs	r0, #1
 80181d2:	bd08      	pop	{r3, pc}
 80181d4:	2001089c 	.word	0x2001089c

080181d8 <destroy_topic>:
 80181d8:	b538      	push	{r3, r4, r5, lr}
 80181da:	6985      	ldr	r5, [r0, #24]
 80181dc:	b1dd      	cbz	r5, 8018216 <destroy_topic+0x3e>
 80181de:	4604      	mov	r4, r0
 80181e0:	6928      	ldr	r0, [r5, #16]
 80181e2:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80181e6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80181ea:	6922      	ldr	r2, [r4, #16]
 80181ec:	6819      	ldr	r1, [r3, #0]
 80181ee:	f7fb ff51 	bl	8014094 <uxr_buffer_delete_entity>
 80181f2:	4602      	mov	r2, r0
 80181f4:	6928      	ldr	r0, [r5, #16]
 80181f6:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80181fa:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80181fe:	f7fb fdd9 	bl	8013db4 <run_xrce_session>
 8018202:	4603      	mov	r3, r0
 8018204:	4620      	mov	r0, r4
 8018206:	2b00      	cmp	r3, #0
 8018208:	bf14      	ite	ne
 801820a:	2400      	movne	r4, #0
 801820c:	2402      	moveq	r4, #2
 801820e:	f7fb fcc3 	bl	8013b98 <rmw_uxrce_fini_topic_memory>
 8018212:	4620      	mov	r0, r4
 8018214:	bd38      	pop	{r3, r4, r5, pc}
 8018216:	2401      	movs	r4, #1
 8018218:	4620      	mov	r0, r4
 801821a:	bd38      	pop	{r3, r4, r5, pc}

0801821c <flush_session>:
 801821c:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 801821e:	f7fc beeb 	b.w	8014ff8 <uxr_run_session_until_confirm_delivery>
 8018222:	bf00      	nop

08018224 <rmw_publish>:
 8018224:	2800      	cmp	r0, #0
 8018226:	d053      	beq.n	80182d0 <rmw_publish+0xac>
 8018228:	b570      	push	{r4, r5, r6, lr}
 801822a:	460d      	mov	r5, r1
 801822c:	b08e      	sub	sp, #56	; 0x38
 801822e:	2900      	cmp	r1, #0
 8018230:	d04b      	beq.n	80182ca <rmw_publish+0xa6>
 8018232:	4604      	mov	r4, r0
 8018234:	6800      	ldr	r0, [r0, #0]
 8018236:	f7fb fe89 	bl	8013f4c <is_uxrce_rmw_identifier_valid>
 801823a:	2800      	cmp	r0, #0
 801823c:	d045      	beq.n	80182ca <rmw_publish+0xa6>
 801823e:	6866      	ldr	r6, [r4, #4]
 8018240:	2e00      	cmp	r6, #0
 8018242:	d042      	beq.n	80182ca <rmw_publish+0xa6>
 8018244:	69b4      	ldr	r4, [r6, #24]
 8018246:	4628      	mov	r0, r5
 8018248:	6923      	ldr	r3, [r4, #16]
 801824a:	4798      	blx	r3
 801824c:	69f3      	ldr	r3, [r6, #28]
 801824e:	9005      	str	r0, [sp, #20]
 8018250:	b113      	cbz	r3, 8018258 <rmw_publish+0x34>
 8018252:	a805      	add	r0, sp, #20
 8018254:	4798      	blx	r3
 8018256:	9805      	ldr	r0, [sp, #20]
 8018258:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 801825c:	691b      	ldr	r3, [r3, #16]
 801825e:	9000      	str	r0, [sp, #0]
 8018260:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8018264:	6972      	ldr	r2, [r6, #20]
 8018266:	ab06      	add	r3, sp, #24
 8018268:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 801826a:	f7fe f93f 	bl	80164ec <uxr_prepare_output_stream>
 801826e:	b1d8      	cbz	r0, 80182a8 <rmw_publish+0x84>
 8018270:	68a3      	ldr	r3, [r4, #8]
 8018272:	a906      	add	r1, sp, #24
 8018274:	4628      	mov	r0, r5
 8018276:	4798      	blx	r3
 8018278:	6a33      	ldr	r3, [r6, #32]
 801827a:	4604      	mov	r4, r0
 801827c:	b10b      	cbz	r3, 8018282 <rmw_publish+0x5e>
 801827e:	a806      	add	r0, sp, #24
 8018280:	4798      	blx	r3
 8018282:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 8018286:	2b01      	cmp	r3, #1
 8018288:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 801828c:	d022      	beq.n	80182d4 <rmw_publish+0xb0>
 801828e:	6918      	ldr	r0, [r3, #16]
 8018290:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 8018292:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018296:	f7fc feaf 	bl	8014ff8 <uxr_run_session_until_confirm_delivery>
 801829a:	4020      	ands	r0, r4
 801829c:	b2c4      	uxtb	r4, r0
 801829e:	f084 0001 	eor.w	r0, r4, #1
 80182a2:	b2c0      	uxtb	r0, r0
 80182a4:	b00e      	add	sp, #56	; 0x38
 80182a6:	bd70      	pop	{r4, r5, r6, pc}
 80182a8:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 80182ac:	6918      	ldr	r0, [r3, #16]
 80182ae:	9b05      	ldr	r3, [sp, #20]
 80182b0:	9602      	str	r6, [sp, #8]
 80182b2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80182b6:	9300      	str	r3, [sp, #0]
 80182b8:	4b09      	ldr	r3, [pc, #36]	; (80182e0 <rmw_publish+0xbc>)
 80182ba:	9301      	str	r3, [sp, #4]
 80182bc:	ab06      	add	r3, sp, #24
 80182be:	6972      	ldr	r2, [r6, #20]
 80182c0:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 80182c2:	f7fe f943 	bl	801654c <uxr_prepare_output_stream_fragmented>
 80182c6:	2800      	cmp	r0, #0
 80182c8:	d1d2      	bne.n	8018270 <rmw_publish+0x4c>
 80182ca:	2001      	movs	r0, #1
 80182cc:	b00e      	add	sp, #56	; 0x38
 80182ce:	bd70      	pop	{r4, r5, r6, pc}
 80182d0:	2001      	movs	r0, #1
 80182d2:	4770      	bx	lr
 80182d4:	6918      	ldr	r0, [r3, #16]
 80182d6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80182da:	f7fc fad3 	bl	8014884 <uxr_flash_output_streams>
 80182de:	e7de      	b.n	801829e <rmw_publish+0x7a>
 80182e0:	0801821d 	.word	0x0801821d

080182e4 <rmw_uros_epoch_nanos>:
 80182e4:	4b05      	ldr	r3, [pc, #20]	; (80182fc <rmw_uros_epoch_nanos+0x18>)
 80182e6:	681b      	ldr	r3, [r3, #0]
 80182e8:	b123      	cbz	r3, 80182f4 <rmw_uros_epoch_nanos+0x10>
 80182ea:	6898      	ldr	r0, [r3, #8]
 80182ec:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80182f0:	f7fc babe 	b.w	8014870 <uxr_epoch_nanos>
 80182f4:	2000      	movs	r0, #0
 80182f6:	2100      	movs	r1, #0
 80182f8:	4770      	bx	lr
 80182fa:	bf00      	nop
 80182fc:	200108ec 	.word	0x200108ec

08018300 <ucdr_serialize_string>:
 8018300:	b510      	push	{r4, lr}
 8018302:	b082      	sub	sp, #8
 8018304:	4604      	mov	r4, r0
 8018306:	4608      	mov	r0, r1
 8018308:	9101      	str	r1, [sp, #4]
 801830a:	f7e7 fff9 	bl	8000300 <strlen>
 801830e:	4602      	mov	r2, r0
 8018310:	9901      	ldr	r1, [sp, #4]
 8018312:	4620      	mov	r0, r4
 8018314:	3201      	adds	r2, #1
 8018316:	b002      	add	sp, #8
 8018318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801831c:	f7f5 be10 	b.w	800df40 <ucdr_serialize_sequence_char>

08018320 <ucdr_deserialize_string>:
 8018320:	b500      	push	{lr}
 8018322:	b083      	sub	sp, #12
 8018324:	ab01      	add	r3, sp, #4
 8018326:	f7f5 fe1d 	bl	800df64 <ucdr_deserialize_sequence_char>
 801832a:	b003      	add	sp, #12
 801832c:	f85d fb04 	ldr.w	pc, [sp], #4

08018330 <uxr_init_input_best_effort_stream>:
 8018330:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018334:	8003      	strh	r3, [r0, #0]
 8018336:	4770      	bx	lr

08018338 <uxr_reset_input_best_effort_stream>:
 8018338:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801833c:	8003      	strh	r3, [r0, #0]
 801833e:	4770      	bx	lr

08018340 <uxr_receive_best_effort_message>:
 8018340:	b538      	push	{r3, r4, r5, lr}
 8018342:	4604      	mov	r4, r0
 8018344:	8800      	ldrh	r0, [r0, #0]
 8018346:	460d      	mov	r5, r1
 8018348:	f000 fd46 	bl	8018dd8 <uxr_seq_num_cmp>
 801834c:	4603      	mov	r3, r0
 801834e:	0fc0      	lsrs	r0, r0, #31
 8018350:	2b00      	cmp	r3, #0
 8018352:	bfb8      	it	lt
 8018354:	8025      	strhlt	r5, [r4, #0]
 8018356:	bd38      	pop	{r3, r4, r5, pc}

08018358 <on_full_input_buffer>:
 8018358:	b570      	push	{r4, r5, r6, lr}
 801835a:	460c      	mov	r4, r1
 801835c:	4605      	mov	r5, r0
 801835e:	8908      	ldrh	r0, [r1, #8]
 8018360:	682b      	ldr	r3, [r5, #0]
 8018362:	7d26      	ldrb	r6, [r4, #20]
 8018364:	e9d1 1200 	ldrd	r1, r2, [r1]
 8018368:	fbb2 f2f0 	udiv	r2, r2, r0
 801836c:	eba3 0c01 	sub.w	ip, r3, r1
 8018370:	fbbc fcf2 	udiv	ip, ip, r2
 8018374:	f10c 0c01 	add.w	ip, ip, #1
 8018378:	fa1f f38c 	uxth.w	r3, ip
 801837c:	fbb3 fcf0 	udiv	ip, r3, r0
 8018380:	fb00 331c 	mls	r3, r0, ip, r3
 8018384:	b29b      	uxth	r3, r3
 8018386:	fb02 f303 	mul.w	r3, r2, r3
 801838a:	1d18      	adds	r0, r3, #4
 801838c:	4408      	add	r0, r1
 801838e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8018392:	b116      	cbz	r6, 801839a <on_full_input_buffer+0x42>
 8018394:	2600      	movs	r6, #0
 8018396:	f840 6c04 	str.w	r6, [r0, #-4]
 801839a:	2a03      	cmp	r2, #3
 801839c:	d801      	bhi.n	80183a2 <on_full_input_buffer+0x4a>
 801839e:	2001      	movs	r0, #1
 80183a0:	bd70      	pop	{r4, r5, r6, pc}
 80183a2:	3308      	adds	r3, #8
 80183a4:	4628      	mov	r0, r5
 80183a6:	3a04      	subs	r2, #4
 80183a8:	4419      	add	r1, r3
 80183aa:	692b      	ldr	r3, [r5, #16]
 80183ac:	f7f5 fd4c 	bl	800de48 <ucdr_init_buffer_origin>
 80183b0:	4628      	mov	r0, r5
 80183b2:	4622      	mov	r2, r4
 80183b4:	4902      	ldr	r1, [pc, #8]	; (80183c0 <on_full_input_buffer+0x68>)
 80183b6:	f7f5 fd23 	bl	800de00 <ucdr_set_on_full_buffer_callback>
 80183ba:	2000      	movs	r0, #0
 80183bc:	bd70      	pop	{r4, r5, r6, pc}
 80183be:	bf00      	nop
 80183c0:	08018359 	.word	0x08018359

080183c4 <uxr_init_input_reliable_stream>:
 80183c4:	b510      	push	{r4, lr}
 80183c6:	e9c0 1200 	strd	r1, r2, [r0]
 80183ca:	2400      	movs	r4, #0
 80183cc:	9a02      	ldr	r2, [sp, #8]
 80183ce:	8103      	strh	r3, [r0, #8]
 80183d0:	6102      	str	r2, [r0, #16]
 80183d2:	7504      	strb	r4, [r0, #20]
 80183d4:	b1c3      	cbz	r3, 8018408 <uxr_init_input_reliable_stream+0x44>
 80183d6:	600c      	str	r4, [r1, #0]
 80183d8:	8901      	ldrh	r1, [r0, #8]
 80183da:	2901      	cmp	r1, #1
 80183dc:	d914      	bls.n	8018408 <uxr_init_input_reliable_stream+0x44>
 80183de:	f04f 0c01 	mov.w	ip, #1
 80183e2:	6843      	ldr	r3, [r0, #4]
 80183e4:	f10c 0e01 	add.w	lr, ip, #1
 80183e8:	fbbc f2f1 	udiv	r2, ip, r1
 80183ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80183f0:	fb01 c212 	mls	r2, r1, r2, ip
 80183f4:	fa1f fc8e 	uxth.w	ip, lr
 80183f8:	b292      	uxth	r2, r2
 80183fa:	fb02 f303 	mul.w	r3, r2, r3
 80183fe:	6802      	ldr	r2, [r0, #0]
 8018400:	50d4      	str	r4, [r2, r3]
 8018402:	8901      	ldrh	r1, [r0, #8]
 8018404:	4561      	cmp	r1, ip
 8018406:	d8ec      	bhi.n	80183e2 <uxr_init_input_reliable_stream+0x1e>
 8018408:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801840c:	60c3      	str	r3, [r0, #12]
 801840e:	bd10      	pop	{r4, pc}

08018410 <uxr_reset_input_reliable_stream>:
 8018410:	8901      	ldrh	r1, [r0, #8]
 8018412:	b1d9      	cbz	r1, 801844c <uxr_reset_input_reliable_stream+0x3c>
 8018414:	b510      	push	{r4, lr}
 8018416:	f04f 0e00 	mov.w	lr, #0
 801841a:	46f4      	mov	ip, lr
 801841c:	4674      	mov	r4, lr
 801841e:	6843      	ldr	r3, [r0, #4]
 8018420:	f10e 0e01 	add.w	lr, lr, #1
 8018424:	fbbc f2f1 	udiv	r2, ip, r1
 8018428:	fbb3 f3f1 	udiv	r3, r3, r1
 801842c:	fb01 c212 	mls	r2, r1, r2, ip
 8018430:	fa1f fc8e 	uxth.w	ip, lr
 8018434:	b292      	uxth	r2, r2
 8018436:	fb02 f303 	mul.w	r3, r2, r3
 801843a:	6802      	ldr	r2, [r0, #0]
 801843c:	50d4      	str	r4, [r2, r3]
 801843e:	8901      	ldrh	r1, [r0, #8]
 8018440:	4561      	cmp	r1, ip
 8018442:	d8ec      	bhi.n	801841e <uxr_reset_input_reliable_stream+0xe>
 8018444:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018448:	60c3      	str	r3, [r0, #12]
 801844a:	bd10      	pop	{r4, pc}
 801844c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018450:	60c3      	str	r3, [r0, #12]
 8018452:	4770      	bx	lr

08018454 <uxr_receive_reliable_message>:
 8018454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018458:	4604      	mov	r4, r0
 801845a:	460d      	mov	r5, r1
 801845c:	8901      	ldrh	r1, [r0, #8]
 801845e:	4617      	mov	r7, r2
 8018460:	8980      	ldrh	r0, [r0, #12]
 8018462:	4698      	mov	r8, r3
 8018464:	f000 fcb0 	bl	8018dc8 <uxr_seq_num_add>
 8018468:	4629      	mov	r1, r5
 801846a:	4606      	mov	r6, r0
 801846c:	89a0      	ldrh	r0, [r4, #12]
 801846e:	f000 fcb3 	bl	8018dd8 <uxr_seq_num_cmp>
 8018472:	2800      	cmp	r0, #0
 8018474:	db0a      	blt.n	801848c <uxr_receive_reliable_message+0x38>
 8018476:	2600      	movs	r6, #0
 8018478:	4629      	mov	r1, r5
 801847a:	89e0      	ldrh	r0, [r4, #14]
 801847c:	f000 fcac 	bl	8018dd8 <uxr_seq_num_cmp>
 8018480:	2800      	cmp	r0, #0
 8018482:	da00      	bge.n	8018486 <uxr_receive_reliable_message+0x32>
 8018484:	81e5      	strh	r5, [r4, #14]
 8018486:	4630      	mov	r0, r6
 8018488:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801848c:	4630      	mov	r0, r6
 801848e:	4629      	mov	r1, r5
 8018490:	f000 fca2 	bl	8018dd8 <uxr_seq_num_cmp>
 8018494:	2800      	cmp	r0, #0
 8018496:	dbee      	blt.n	8018476 <uxr_receive_reliable_message+0x22>
 8018498:	6923      	ldr	r3, [r4, #16]
 801849a:	4638      	mov	r0, r7
 801849c:	4798      	blx	r3
 801849e:	4681      	mov	r9, r0
 80184a0:	2101      	movs	r1, #1
 80184a2:	89a0      	ldrh	r0, [r4, #12]
 80184a4:	f000 fc90 	bl	8018dc8 <uxr_seq_num_add>
 80184a8:	f1b9 0f00 	cmp.w	r9, #0
 80184ac:	bf08      	it	eq
 80184ae:	4285      	cmpeq	r5, r0
 80184b0:	bf0c      	ite	eq
 80184b2:	2601      	moveq	r6, #1
 80184b4:	2600      	movne	r6, #0
 80184b6:	d104      	bne.n	80184c2 <uxr_receive_reliable_message+0x6e>
 80184b8:	2300      	movs	r3, #0
 80184ba:	9a08      	ldr	r2, [sp, #32]
 80184bc:	81a0      	strh	r0, [r4, #12]
 80184be:	7013      	strb	r3, [r2, #0]
 80184c0:	e7da      	b.n	8018478 <uxr_receive_reliable_message+0x24>
 80184c2:	8922      	ldrh	r2, [r4, #8]
 80184c4:	6863      	ldr	r3, [r4, #4]
 80184c6:	fbb5 f0f2 	udiv	r0, r5, r2
 80184ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80184ce:	fb02 5010 	mls	r0, r2, r0, r5
 80184d2:	b280      	uxth	r0, r0
 80184d4:	fb03 f000 	mul.w	r0, r3, r0
 80184d8:	6823      	ldr	r3, [r4, #0]
 80184da:	3004      	adds	r0, #4
 80184dc:	4418      	add	r0, r3
 80184de:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80184e2:	2b00      	cmp	r3, #0
 80184e4:	d1c7      	bne.n	8018476 <uxr_receive_reliable_message+0x22>
 80184e6:	4639      	mov	r1, r7
 80184e8:	4642      	mov	r2, r8
 80184ea:	f001 f9e8 	bl	80198be <memcpy>
 80184ee:	8921      	ldrh	r1, [r4, #8]
 80184f0:	6863      	ldr	r3, [r4, #4]
 80184f2:	fbb5 f2f1 	udiv	r2, r5, r1
 80184f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80184fa:	fb01 5212 	mls	r2, r1, r2, r5
 80184fe:	b292      	uxth	r2, r2
 8018500:	fb02 f303 	mul.w	r3, r2, r3
 8018504:	6822      	ldr	r2, [r4, #0]
 8018506:	f842 8003 	str.w	r8, [r2, r3]
 801850a:	2301      	movs	r3, #1
 801850c:	9a08      	ldr	r2, [sp, #32]
 801850e:	7013      	strb	r3, [r2, #0]
 8018510:	f1b9 0f00 	cmp.w	r9, #0
 8018514:	d0af      	beq.n	8018476 <uxr_receive_reliable_message+0x22>
 8018516:	89a6      	ldrh	r6, [r4, #12]
 8018518:	2101      	movs	r1, #1
 801851a:	4630      	mov	r0, r6
 801851c:	f000 fc54 	bl	8018dc8 <uxr_seq_num_add>
 8018520:	8921      	ldrh	r1, [r4, #8]
 8018522:	6863      	ldr	r3, [r4, #4]
 8018524:	4606      	mov	r6, r0
 8018526:	fbb0 f2f1 	udiv	r2, r0, r1
 801852a:	fbb3 f3f1 	udiv	r3, r3, r1
 801852e:	fb01 0212 	mls	r2, r1, r2, r0
 8018532:	6820      	ldr	r0, [r4, #0]
 8018534:	b292      	uxth	r2, r2
 8018536:	fb02 f303 	mul.w	r3, r2, r3
 801853a:	3304      	adds	r3, #4
 801853c:	4418      	add	r0, r3
 801853e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018542:	2b00      	cmp	r3, #0
 8018544:	d097      	beq.n	8018476 <uxr_receive_reliable_message+0x22>
 8018546:	6923      	ldr	r3, [r4, #16]
 8018548:	4798      	blx	r3
 801854a:	2802      	cmp	r0, #2
 801854c:	d002      	beq.n	8018554 <uxr_receive_reliable_message+0x100>
 801854e:	2801      	cmp	r0, #1
 8018550:	d0e2      	beq.n	8018518 <uxr_receive_reliable_message+0xc4>
 8018552:	e790      	b.n	8018476 <uxr_receive_reliable_message+0x22>
 8018554:	2601      	movs	r6, #1
 8018556:	e78f      	b.n	8018478 <uxr_receive_reliable_message+0x24>

08018558 <uxr_next_input_reliable_buffer_available>:
 8018558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801855c:	4604      	mov	r4, r0
 801855e:	460f      	mov	r7, r1
 8018560:	8980      	ldrh	r0, [r0, #12]
 8018562:	2101      	movs	r1, #1
 8018564:	4690      	mov	r8, r2
 8018566:	f000 fc2f 	bl	8018dc8 <uxr_seq_num_add>
 801856a:	8922      	ldrh	r2, [r4, #8]
 801856c:	6866      	ldr	r6, [r4, #4]
 801856e:	fbb0 f3f2 	udiv	r3, r0, r2
 8018572:	fbb6 f6f2 	udiv	r6, r6, r2
 8018576:	fb02 0313 	mls	r3, r2, r3, r0
 801857a:	b29b      	uxth	r3, r3
 801857c:	fb03 f606 	mul.w	r6, r3, r6
 8018580:	6823      	ldr	r3, [r4, #0]
 8018582:	3604      	adds	r6, #4
 8018584:	441e      	add	r6, r3
 8018586:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801858a:	f1b9 0f00 	cmp.w	r9, #0
 801858e:	d023      	beq.n	80185d8 <uxr_next_input_reliable_buffer_available+0x80>
 8018590:	4605      	mov	r5, r0
 8018592:	6923      	ldr	r3, [r4, #16]
 8018594:	4630      	mov	r0, r6
 8018596:	4798      	blx	r3
 8018598:	4682      	mov	sl, r0
 801859a:	b300      	cbz	r0, 80185de <uxr_next_input_reliable_buffer_available+0x86>
 801859c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80185a0:	2101      	movs	r1, #1
 80185a2:	4650      	mov	r0, sl
 80185a4:	f000 fc10 	bl	8018dc8 <uxr_seq_num_add>
 80185a8:	8921      	ldrh	r1, [r4, #8]
 80185aa:	4682      	mov	sl, r0
 80185ac:	6863      	ldr	r3, [r4, #4]
 80185ae:	6820      	ldr	r0, [r4, #0]
 80185b0:	fbba f2f1 	udiv	r2, sl, r1
 80185b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80185b8:	fb01 a212 	mls	r2, r1, r2, sl
 80185bc:	b292      	uxth	r2, r2
 80185be:	fb02 f303 	mul.w	r3, r2, r3
 80185c2:	3304      	adds	r3, #4
 80185c4:	4418      	add	r0, r3
 80185c6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80185ca:	b12b      	cbz	r3, 80185d8 <uxr_next_input_reliable_buffer_available+0x80>
 80185cc:	6923      	ldr	r3, [r4, #16]
 80185ce:	4798      	blx	r3
 80185d0:	2802      	cmp	r0, #2
 80185d2:	d01b      	beq.n	801860c <uxr_next_input_reliable_buffer_available+0xb4>
 80185d4:	2801      	cmp	r0, #1
 80185d6:	d0e3      	beq.n	80185a0 <uxr_next_input_reliable_buffer_available+0x48>
 80185d8:	2000      	movs	r0, #0
 80185da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80185de:	464a      	mov	r2, r9
 80185e0:	4631      	mov	r1, r6
 80185e2:	4638      	mov	r0, r7
 80185e4:	f7f5 fc38 	bl	800de58 <ucdr_init_buffer>
 80185e8:	8921      	ldrh	r1, [r4, #8]
 80185ea:	6863      	ldr	r3, [r4, #4]
 80185ec:	2001      	movs	r0, #1
 80185ee:	fbb5 f2f1 	udiv	r2, r5, r1
 80185f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80185f6:	fb01 5212 	mls	r2, r1, r2, r5
 80185fa:	b292      	uxth	r2, r2
 80185fc:	fb02 f303 	mul.w	r3, r2, r3
 8018600:	6822      	ldr	r2, [r4, #0]
 8018602:	f842 a003 	str.w	sl, [r2, r3]
 8018606:	81a5      	strh	r5, [r4, #12]
 8018608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801860c:	8920      	ldrh	r0, [r4, #8]
 801860e:	eb06 0108 	add.w	r1, r6, r8
 8018612:	6863      	ldr	r3, [r4, #4]
 8018614:	eba9 0208 	sub.w	r2, r9, r8
 8018618:	fbb5 f6f0 	udiv	r6, r5, r0
 801861c:	fbb3 f3f0 	udiv	r3, r3, r0
 8018620:	fb00 5516 	mls	r5, r0, r6, r5
 8018624:	2000      	movs	r0, #0
 8018626:	b2ad      	uxth	r5, r5
 8018628:	fb03 f505 	mul.w	r5, r3, r5
 801862c:	6823      	ldr	r3, [r4, #0]
 801862e:	5158      	str	r0, [r3, r5]
 8018630:	4638      	mov	r0, r7
 8018632:	f7f5 fc11 	bl	800de58 <ucdr_init_buffer>
 8018636:	4638      	mov	r0, r7
 8018638:	4622      	mov	r2, r4
 801863a:	4903      	ldr	r1, [pc, #12]	; (8018648 <uxr_next_input_reliable_buffer_available+0xf0>)
 801863c:	f7f5 fbe0 	bl	800de00 <ucdr_set_on_full_buffer_callback>
 8018640:	2001      	movs	r0, #1
 8018642:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8018646:	e7c8      	b.n	80185da <uxr_next_input_reliable_buffer_available+0x82>
 8018648:	08018359 	.word	0x08018359

0801864c <uxr_process_heartbeat>:
 801864c:	b538      	push	{r3, r4, r5, lr}
 801864e:	4611      	mov	r1, r2
 8018650:	4604      	mov	r4, r0
 8018652:	89c0      	ldrh	r0, [r0, #14]
 8018654:	4615      	mov	r5, r2
 8018656:	f000 fbbf 	bl	8018dd8 <uxr_seq_num_cmp>
 801865a:	2800      	cmp	r0, #0
 801865c:	bfb8      	it	lt
 801865e:	81e5      	strhlt	r5, [r4, #14]
 8018660:	bd38      	pop	{r3, r4, r5, pc}
 8018662:	bf00      	nop

08018664 <uxr_compute_acknack>:
 8018664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018668:	8903      	ldrh	r3, [r0, #8]
 801866a:	4604      	mov	r4, r0
 801866c:	460f      	mov	r7, r1
 801866e:	8985      	ldrh	r5, [r0, #12]
 8018670:	b1db      	cbz	r3, 80186aa <uxr_compute_acknack+0x46>
 8018672:	4628      	mov	r0, r5
 8018674:	2601      	movs	r6, #1
 8018676:	e004      	b.n	8018682 <uxr_compute_acknack+0x1e>
 8018678:	4566      	cmp	r6, ip
 801867a:	f106 0601 	add.w	r6, r6, #1
 801867e:	d214      	bcs.n	80186aa <uxr_compute_acknack+0x46>
 8018680:	89a0      	ldrh	r0, [r4, #12]
 8018682:	b2b1      	uxth	r1, r6
 8018684:	f000 fba0 	bl	8018dc8 <uxr_seq_num_add>
 8018688:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801868c:	fbb0 f2fc 	udiv	r2, r0, ip
 8018690:	e9d4 1300 	ldrd	r1, r3, [r4]
 8018694:	fb0c 0212 	mls	r2, ip, r2, r0
 8018698:	fbb3 f3fc 	udiv	r3, r3, ip
 801869c:	b292      	uxth	r2, r2
 801869e:	fb02 f303 	mul.w	r3, r2, r3
 80186a2:	58cb      	ldr	r3, [r1, r3]
 80186a4:	2b00      	cmp	r3, #0
 80186a6:	d1e7      	bne.n	8018678 <uxr_compute_acknack+0x14>
 80186a8:	4605      	mov	r5, r0
 80186aa:	803d      	strh	r5, [r7, #0]
 80186ac:	2101      	movs	r1, #1
 80186ae:	89e6      	ldrh	r6, [r4, #14]
 80186b0:	4628      	mov	r0, r5
 80186b2:	f000 fb8d 	bl	8018dd0 <uxr_seq_num_sub>
 80186b6:	4601      	mov	r1, r0
 80186b8:	4630      	mov	r0, r6
 80186ba:	f000 fb89 	bl	8018dd0 <uxr_seq_num_sub>
 80186be:	4606      	mov	r6, r0
 80186c0:	b328      	cbz	r0, 801870e <uxr_compute_acknack+0xaa>
 80186c2:	f04f 0900 	mov.w	r9, #0
 80186c6:	f04f 0801 	mov.w	r8, #1
 80186ca:	464d      	mov	r5, r9
 80186cc:	fa1f f189 	uxth.w	r1, r9
 80186d0:	8838      	ldrh	r0, [r7, #0]
 80186d2:	f000 fb79 	bl	8018dc8 <uxr_seq_num_add>
 80186d6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80186da:	6861      	ldr	r1, [r4, #4]
 80186dc:	fa08 fe09 	lsl.w	lr, r8, r9
 80186e0:	6822      	ldr	r2, [r4, #0]
 80186e2:	f109 0901 	add.w	r9, r9, #1
 80186e6:	ea4e 0e05 	orr.w	lr, lr, r5
 80186ea:	fbb0 f3fc 	udiv	r3, r0, ip
 80186ee:	fbb1 f1fc 	udiv	r1, r1, ip
 80186f2:	fb03 001c 	mls	r0, r3, ip, r0
 80186f6:	b283      	uxth	r3, r0
 80186f8:	fb01 f303 	mul.w	r3, r1, r3
 80186fc:	58d3      	ldr	r3, [r2, r3]
 80186fe:	b90b      	cbnz	r3, 8018704 <uxr_compute_acknack+0xa0>
 8018700:	fa1f f58e 	uxth.w	r5, lr
 8018704:	454e      	cmp	r6, r9
 8018706:	d1e1      	bne.n	80186cc <uxr_compute_acknack+0x68>
 8018708:	4628      	mov	r0, r5
 801870a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801870e:	4605      	mov	r5, r0
 8018710:	4628      	mov	r0, r5
 8018712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018716:	bf00      	nop

08018718 <uxr_init_output_best_effort_stream>:
 8018718:	f64f 7cff 	movw	ip, #65535	; 0xffff
 801871c:	6001      	str	r1, [r0, #0]
 801871e:	7303      	strb	r3, [r0, #12]
 8018720:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8018724:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8018728:	4770      	bx	lr
 801872a:	bf00      	nop

0801872c <uxr_reset_output_best_effort_stream>:
 801872c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018730:	7b03      	ldrb	r3, [r0, #12]
 8018732:	81c2      	strh	r2, [r0, #14]
 8018734:	6043      	str	r3, [r0, #4]
 8018736:	4770      	bx	lr

08018738 <uxr_prepare_best_effort_buffer_to_write>:
 8018738:	b5f0      	push	{r4, r5, r6, r7, lr}
 801873a:	4604      	mov	r4, r0
 801873c:	b083      	sub	sp, #12
 801873e:	6840      	ldr	r0, [r0, #4]
 8018740:	460d      	mov	r5, r1
 8018742:	4616      	mov	r6, r2
 8018744:	f7fd fe10 	bl	8016368 <uxr_submessage_padding>
 8018748:	6863      	ldr	r3, [r4, #4]
 801874a:	4418      	add	r0, r3
 801874c:	68a3      	ldr	r3, [r4, #8]
 801874e:	1942      	adds	r2, r0, r5
 8018750:	4293      	cmp	r3, r2
 8018752:	bf2c      	ite	cs
 8018754:	2701      	movcs	r7, #1
 8018756:	2700      	movcc	r7, #0
 8018758:	d202      	bcs.n	8018760 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801875a:	4638      	mov	r0, r7
 801875c:	b003      	add	sp, #12
 801875e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018760:	9000      	str	r0, [sp, #0]
 8018762:	2300      	movs	r3, #0
 8018764:	4630      	mov	r0, r6
 8018766:	6821      	ldr	r1, [r4, #0]
 8018768:	f7f5 fb64 	bl	800de34 <ucdr_init_buffer_origin_offset>
 801876c:	6861      	ldr	r1, [r4, #4]
 801876e:	4638      	mov	r0, r7
 8018770:	4429      	add	r1, r5
 8018772:	6061      	str	r1, [r4, #4]
 8018774:	b003      	add	sp, #12
 8018776:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018778 <uxr_prepare_best_effort_buffer_to_send>:
 8018778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801877c:	4604      	mov	r4, r0
 801877e:	461d      	mov	r5, r3
 8018780:	6840      	ldr	r0, [r0, #4]
 8018782:	7b23      	ldrb	r3, [r4, #12]
 8018784:	4298      	cmp	r0, r3
 8018786:	bf8c      	ite	hi
 8018788:	2601      	movhi	r6, #1
 801878a:	2600      	movls	r6, #0
 801878c:	d802      	bhi.n	8018794 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801878e:	4630      	mov	r0, r6
 8018790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018794:	4688      	mov	r8, r1
 8018796:	89e0      	ldrh	r0, [r4, #14]
 8018798:	2101      	movs	r1, #1
 801879a:	4617      	mov	r7, r2
 801879c:	f000 fb14 	bl	8018dc8 <uxr_seq_num_add>
 80187a0:	6823      	ldr	r3, [r4, #0]
 80187a2:	81e0      	strh	r0, [r4, #14]
 80187a4:	8028      	strh	r0, [r5, #0]
 80187a6:	4630      	mov	r0, r6
 80187a8:	f8c8 3000 	str.w	r3, [r8]
 80187ac:	6863      	ldr	r3, [r4, #4]
 80187ae:	603b      	str	r3, [r7, #0]
 80187b0:	7b23      	ldrb	r3, [r4, #12]
 80187b2:	6063      	str	r3, [r4, #4]
 80187b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080187b8 <on_full_output_buffer>:
 80187b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187ba:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 80187be:	460c      	mov	r4, r1
 80187c0:	6803      	ldr	r3, [r0, #0]
 80187c2:	4605      	mov	r5, r0
 80187c4:	7b26      	ldrb	r6, [r4, #12]
 80187c6:	e9d1 1200 	ldrd	r1, r2, [r1]
 80187ca:	fbb2 f2fc 	udiv	r2, r2, ip
 80187ce:	eba3 0e01 	sub.w	lr, r3, r1
 80187d2:	6903      	ldr	r3, [r0, #16]
 80187d4:	fbbe fef2 	udiv	lr, lr, r2
 80187d8:	f10e 0e01 	add.w	lr, lr, #1
 80187dc:	fa1f fe8e 	uxth.w	lr, lr
 80187e0:	fbbe f7fc 	udiv	r7, lr, ip
 80187e4:	fb0c ec17 	mls	ip, ip, r7, lr
 80187e8:	fa1f fc8c 	uxth.w	ip, ip
 80187ec:	fb02 fc0c 	mul.w	ip, r2, ip
 80187f0:	f851 200c 	ldr.w	r2, [r1, ip]
 80187f4:	44b4      	add	ip, r6
 80187f6:	1b92      	subs	r2, r2, r6
 80187f8:	f10c 0c08 	add.w	ip, ip, #8
 80187fc:	3a04      	subs	r2, #4
 80187fe:	4461      	add	r1, ip
 8018800:	f7f5 fb22 	bl	800de48 <ucdr_init_buffer_origin>
 8018804:	4628      	mov	r0, r5
 8018806:	4622      	mov	r2, r4
 8018808:	4902      	ldr	r1, [pc, #8]	; (8018814 <on_full_output_buffer+0x5c>)
 801880a:	f7f5 faf9 	bl	800de00 <ucdr_set_on_full_buffer_callback>
 801880e:	2000      	movs	r0, #0
 8018810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018812:	bf00      	nop
 8018814:	080187b9 	.word	0x080187b9

08018818 <uxr_init_output_reliable_stream>:
 8018818:	b530      	push	{r4, r5, lr}
 801881a:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801881e:	8103      	strh	r3, [r0, #8]
 8018820:	7304      	strb	r4, [r0, #12]
 8018822:	e9c0 1200 	strd	r1, r2, [r0]
 8018826:	b1e3      	cbz	r3, 8018862 <uxr_init_output_reliable_stream+0x4a>
 8018828:	600c      	str	r4, [r1, #0]
 801882a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801882e:	f1bc 0f01 	cmp.w	ip, #1
 8018832:	d916      	bls.n	8018862 <uxr_init_output_reliable_stream+0x4a>
 8018834:	f04f 0e01 	mov.w	lr, #1
 8018838:	6843      	ldr	r3, [r0, #4]
 801883a:	f10e 0501 	add.w	r5, lr, #1
 801883e:	7b04      	ldrb	r4, [r0, #12]
 8018840:	6801      	ldr	r1, [r0, #0]
 8018842:	fbbe f2fc 	udiv	r2, lr, ip
 8018846:	fbb3 f3fc 	udiv	r3, r3, ip
 801884a:	fb0c e212 	mls	r2, ip, r2, lr
 801884e:	fa1f fe85 	uxth.w	lr, r5
 8018852:	b292      	uxth	r2, r2
 8018854:	fb02 f303 	mul.w	r3, r2, r3
 8018858:	50cc      	str	r4, [r1, r3]
 801885a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801885e:	45f4      	cmp	ip, lr
 8018860:	d8ea      	bhi.n	8018838 <uxr_init_output_reliable_stream+0x20>
 8018862:	4b07      	ldr	r3, [pc, #28]	; (8018880 <uxr_init_output_reliable_stream+0x68>)
 8018864:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018868:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801886c:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8018870:	f8c0 300e 	str.w	r3, [r0, #14]
 8018874:	2300      	movs	r3, #0
 8018876:	8242      	strh	r2, [r0, #18]
 8018878:	8403      	strh	r3, [r0, #32]
 801887a:	e9c0 4506 	strd	r4, r5, [r0, #24]
 801887e:	bd30      	pop	{r4, r5, pc}
 8018880:	ffff0000 	.word	0xffff0000
 8018884:	00000000 	.word	0x00000000

08018888 <uxr_reset_output_reliable_stream>:
 8018888:	8901      	ldrh	r1, [r0, #8]
 801888a:	b510      	push	{r4, lr}
 801888c:	b1b1      	cbz	r1, 80188bc <uxr_reset_output_reliable_stream+0x34>
 801888e:	f04f 0e00 	mov.w	lr, #0
 8018892:	46f4      	mov	ip, lr
 8018894:	6843      	ldr	r3, [r0, #4]
 8018896:	f10e 0e01 	add.w	lr, lr, #1
 801889a:	7b04      	ldrb	r4, [r0, #12]
 801889c:	fbbc f2f1 	udiv	r2, ip, r1
 80188a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80188a4:	fb01 c212 	mls	r2, r1, r2, ip
 80188a8:	fa1f fc8e 	uxth.w	ip, lr
 80188ac:	b292      	uxth	r2, r2
 80188ae:	fb02 f303 	mul.w	r3, r2, r3
 80188b2:	6802      	ldr	r2, [r0, #0]
 80188b4:	50d4      	str	r4, [r2, r3]
 80188b6:	8901      	ldrh	r1, [r0, #8]
 80188b8:	4561      	cmp	r1, ip
 80188ba:	d8eb      	bhi.n	8018894 <uxr_reset_output_reliable_stream+0xc>
 80188bc:	4b08      	ldr	r3, [pc, #32]	; (80188e0 <uxr_reset_output_reliable_stream+0x58>)
 80188be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80188c2:	ed9f 7b05 	vldr	d7, [pc, #20]	; 80188d8 <uxr_reset_output_reliable_stream+0x50>
 80188c6:	f8c0 300e 	str.w	r3, [r0, #14]
 80188ca:	2300      	movs	r3, #0
 80188cc:	8242      	strh	r2, [r0, #18]
 80188ce:	8403      	strh	r3, [r0, #32]
 80188d0:	ed80 7b06 	vstr	d7, [r0, #24]
 80188d4:	bd10      	pop	{r4, pc}
 80188d6:	bf00      	nop
 80188d8:	ffffffff 	.word	0xffffffff
 80188dc:	7fffffff 	.word	0x7fffffff
 80188e0:	ffff0000 	.word	0xffff0000

080188e4 <uxr_prepare_reliable_buffer_to_write>:
 80188e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188e8:	4604      	mov	r4, r0
 80188ea:	b091      	sub	sp, #68	; 0x44
 80188ec:	8900      	ldrh	r0, [r0, #8]
 80188ee:	468b      	mov	fp, r1
 80188f0:	89e6      	ldrh	r6, [r4, #14]
 80188f2:	9204      	str	r2, [sp, #16]
 80188f4:	6865      	ldr	r5, [r4, #4]
 80188f6:	6823      	ldr	r3, [r4, #0]
 80188f8:	f894 900c 	ldrb.w	r9, [r4, #12]
 80188fc:	fbb6 f2f0 	udiv	r2, r6, r0
 8018900:	fbb5 f5f0 	udiv	r5, r5, r0
 8018904:	fb00 6212 	mls	r2, r0, r2, r6
 8018908:	1f2f      	subs	r7, r5, #4
 801890a:	b292      	uxth	r2, r2
 801890c:	fb05 3202 	mla	r2, r5, r2, r3
 8018910:	1d11      	adds	r1, r2, #4
 8018912:	f8d2 8000 	ldr.w	r8, [r2]
 8018916:	9103      	str	r1, [sp, #12]
 8018918:	2800      	cmp	r0, #0
 801891a:	f000 814a 	beq.w	8018bb2 <uxr_prepare_reliable_buffer_to_write+0x2ce>
 801891e:	f04f 0c00 	mov.w	ip, #0
 8018922:	46e2      	mov	sl, ip
 8018924:	4661      	mov	r1, ip
 8018926:	f10c 0c01 	add.w	ip, ip, #1
 801892a:	fbb1 f2f0 	udiv	r2, r1, r0
 801892e:	fb00 1212 	mls	r2, r0, r2, r1
 8018932:	fa1f f18c 	uxth.w	r1, ip
 8018936:	b292      	uxth	r2, r2
 8018938:	fb05 f202 	mul.w	r2, r5, r2
 801893c:	589a      	ldr	r2, [r3, r2]
 801893e:	454a      	cmp	r2, r9
 8018940:	d103      	bne.n	801894a <uxr_prepare_reliable_buffer_to_write+0x66>
 8018942:	f10a 0a01 	add.w	sl, sl, #1
 8018946:	fa1f fa8a 	uxth.w	sl, sl
 801894a:	4281      	cmp	r1, r0
 801894c:	d3eb      	bcc.n	8018926 <uxr_prepare_reliable_buffer_to_write+0x42>
 801894e:	4640      	mov	r0, r8
 8018950:	2104      	movs	r1, #4
 8018952:	f8cd a014 	str.w	sl, [sp, #20]
 8018956:	f7f5 fa83 	bl	800de60 <ucdr_alignment>
 801895a:	4480      	add	r8, r0
 801895c:	eb08 020b 	add.w	r2, r8, fp
 8018960:	42ba      	cmp	r2, r7
 8018962:	f240 80ca 	bls.w	8018afa <uxr_prepare_reliable_buffer_to_write+0x216>
 8018966:	7b22      	ldrb	r2, [r4, #12]
 8018968:	445a      	add	r2, fp
 801896a:	42ba      	cmp	r2, r7
 801896c:	f240 80b2 	bls.w	8018ad4 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 8018970:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8018974:	b2bb      	uxth	r3, r7
 8018976:	eba2 0209 	sub.w	r2, r2, r9
 801897a:	441a      	add	r2, r3
 801897c:	b292      	uxth	r2, r2
 801897e:	fb0a f902 	mul.w	r9, sl, r2
 8018982:	9205      	str	r2, [sp, #20]
 8018984:	45d9      	cmp	r9, fp
 8018986:	9206      	str	r2, [sp, #24]
 8018988:	f0c0 80b3 	bcc.w	8018af2 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801898c:	f108 0204 	add.w	r2, r8, #4
 8018990:	42ba      	cmp	r2, r7
 8018992:	f080 80da 	bcs.w	8018b4a <uxr_prepare_reliable_buffer_to_write+0x266>
 8018996:	f1a3 0904 	sub.w	r9, r3, #4
 801899a:	9b05      	ldr	r3, [sp, #20]
 801899c:	eba9 0908 	sub.w	r9, r9, r8
 80189a0:	fa1f f989 	uxth.w	r9, r9
 80189a4:	ebab 0b09 	sub.w	fp, fp, r9
 80189a8:	fbbb f2f3 	udiv	r2, fp, r3
 80189ac:	fb03 b312 	mls	r3, r3, r2, fp
 80189b0:	2b00      	cmp	r3, #0
 80189b2:	f040 80c4 	bne.w	8018b3e <uxr_prepare_reliable_buffer_to_write+0x25a>
 80189b6:	b293      	uxth	r3, r2
 80189b8:	4553      	cmp	r3, sl
 80189ba:	f200 809a 	bhi.w	8018af2 <uxr_prepare_reliable_buffer_to_write+0x20e>
 80189be:	2b00      	cmp	r3, #0
 80189c0:	f000 80f9 	beq.w	8018bb6 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 80189c4:	f8cd 801c 	str.w	r8, [sp, #28]
 80189c8:	f04f 0a00 	mov.w	sl, #0
 80189cc:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80189d0:	f10d 0b20 	add.w	fp, sp, #32
 80189d4:	9505      	str	r5, [sp, #20]
 80189d6:	461d      	mov	r5, r3
 80189d8:	e000      	b.n	80189dc <uxr_prepare_reliable_buffer_to_write+0xf8>
 80189da:	46c1      	mov	r9, r8
 80189dc:	8922      	ldrh	r2, [r4, #8]
 80189de:	4658      	mov	r0, fp
 80189e0:	6863      	ldr	r3, [r4, #4]
 80189e2:	f10a 0a01 	add.w	sl, sl, #1
 80189e6:	fbb6 f1f2 	udiv	r1, r6, r2
 80189ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80189ee:	fb02 6111 	mls	r1, r2, r1, r6
 80189f2:	463a      	mov	r2, r7
 80189f4:	b289      	uxth	r1, r1
 80189f6:	fb03 f101 	mul.w	r1, r3, r1
 80189fa:	6823      	ldr	r3, [r4, #0]
 80189fc:	3104      	adds	r1, #4
 80189fe:	4419      	add	r1, r3
 8018a00:	2300      	movs	r3, #0
 8018a02:	f851 cc04 	ldr.w	ip, [r1, #-4]
 8018a06:	f8cd c000 	str.w	ip, [sp]
 8018a0a:	f7f5 fa13 	bl	800de34 <ucdr_init_buffer_origin_offset>
 8018a0e:	464a      	mov	r2, r9
 8018a10:	2300      	movs	r3, #0
 8018a12:	210d      	movs	r1, #13
 8018a14:	4658      	mov	r0, fp
 8018a16:	f7fd fc67 	bl	80162e8 <uxr_buffer_submessage_header>
 8018a1a:	8921      	ldrh	r1, [r4, #8]
 8018a1c:	6863      	ldr	r3, [r4, #4]
 8018a1e:	4630      	mov	r0, r6
 8018a20:	fbb6 f2f1 	udiv	r2, r6, r1
 8018a24:	fbb3 f3f1 	udiv	r3, r3, r1
 8018a28:	fb01 6212 	mls	r2, r1, r2, r6
 8018a2c:	2101      	movs	r1, #1
 8018a2e:	b292      	uxth	r2, r2
 8018a30:	fb02 f303 	mul.w	r3, r2, r3
 8018a34:	6822      	ldr	r2, [r4, #0]
 8018a36:	50d7      	str	r7, [r2, r3]
 8018a38:	f000 f9c6 	bl	8018dc8 <uxr_seq_num_add>
 8018a3c:	4606      	mov	r6, r0
 8018a3e:	fa1f f38a 	uxth.w	r3, sl
 8018a42:	429d      	cmp	r5, r3
 8018a44:	d8c9      	bhi.n	80189da <uxr_prepare_reliable_buffer_to_write+0xf6>
 8018a46:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8018a4a:	9d05      	ldr	r5, [sp, #20]
 8018a4c:	8920      	ldrh	r0, [r4, #8]
 8018a4e:	463a      	mov	r2, r7
 8018a50:	6863      	ldr	r3, [r4, #4]
 8018a52:	fbb6 f1f0 	udiv	r1, r6, r0
 8018a56:	fbb3 f3f0 	udiv	r3, r3, r0
 8018a5a:	fb00 6111 	mls	r1, r0, r1, r6
 8018a5e:	4658      	mov	r0, fp
 8018a60:	b289      	uxth	r1, r1
 8018a62:	fb01 f303 	mul.w	r3, r1, r3
 8018a66:	6821      	ldr	r1, [r4, #0]
 8018a68:	3304      	adds	r3, #4
 8018a6a:	4419      	add	r1, r3
 8018a6c:	2300      	movs	r3, #0
 8018a6e:	f851 7c04 	ldr.w	r7, [r1, #-4]
 8018a72:	9700      	str	r7, [sp, #0]
 8018a74:	f7f5 f9de 	bl	800de34 <ucdr_init_buffer_origin_offset>
 8018a78:	9f06      	ldr	r7, [sp, #24]
 8018a7a:	4658      	mov	r0, fp
 8018a7c:	2302      	movs	r3, #2
 8018a7e:	b2ba      	uxth	r2, r7
 8018a80:	210d      	movs	r1, #13
 8018a82:	f7fd fc31 	bl	80162e8 <uxr_buffer_submessage_header>
 8018a86:	f108 0104 	add.w	r1, r8, #4
 8018a8a:	9b03      	ldr	r3, [sp, #12]
 8018a8c:	f1a5 0208 	sub.w	r2, r5, #8
 8018a90:	8925      	ldrh	r5, [r4, #8]
 8018a92:	440b      	add	r3, r1
 8018a94:	eba2 0208 	sub.w	r2, r2, r8
 8018a98:	fbb6 f0f5 	udiv	r0, r6, r5
 8018a9c:	4619      	mov	r1, r3
 8018a9e:	6863      	ldr	r3, [r4, #4]
 8018aa0:	fb05 6010 	mls	r0, r5, r0, r6
 8018aa4:	fbb3 f3f5 	udiv	r3, r3, r5
 8018aa8:	b280      	uxth	r0, r0
 8018aaa:	6825      	ldr	r5, [r4, #0]
 8018aac:	fb00 f303 	mul.w	r3, r0, r3
 8018ab0:	7b20      	ldrb	r0, [r4, #12]
 8018ab2:	3004      	adds	r0, #4
 8018ab4:	4438      	add	r0, r7
 8018ab6:	50e8      	str	r0, [r5, r3]
 8018ab8:	9d04      	ldr	r5, [sp, #16]
 8018aba:	4628      	mov	r0, r5
 8018abc:	f7f5 f9cc 	bl	800de58 <ucdr_init_buffer>
 8018ac0:	4628      	mov	r0, r5
 8018ac2:	4622      	mov	r2, r4
 8018ac4:	493d      	ldr	r1, [pc, #244]	; (8018bbc <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8018ac6:	f7f5 f99b 	bl	800de00 <ucdr_set_on_full_buffer_callback>
 8018aca:	2001      	movs	r0, #1
 8018acc:	81e6      	strh	r6, [r4, #14]
 8018ace:	b011      	add	sp, #68	; 0x44
 8018ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ad4:	2101      	movs	r1, #1
 8018ad6:	89e0      	ldrh	r0, [r4, #14]
 8018ad8:	f000 f976 	bl	8018dc8 <uxr_seq_num_add>
 8018adc:	4605      	mov	r5, r0
 8018ade:	8921      	ldrh	r1, [r4, #8]
 8018ae0:	8a60      	ldrh	r0, [r4, #18]
 8018ae2:	f000 f971 	bl	8018dc8 <uxr_seq_num_add>
 8018ae6:	4601      	mov	r1, r0
 8018ae8:	4628      	mov	r0, r5
 8018aea:	f000 f975 	bl	8018dd8 <uxr_seq_num_cmp>
 8018aee:	2800      	cmp	r0, #0
 8018af0:	dd44      	ble.n	8018b7c <uxr_prepare_reliable_buffer_to_write+0x298>
 8018af2:	2000      	movs	r0, #0
 8018af4:	b011      	add	sp, #68	; 0x44
 8018af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018afa:	8921      	ldrh	r1, [r4, #8]
 8018afc:	8a60      	ldrh	r0, [r4, #18]
 8018afe:	9205      	str	r2, [sp, #20]
 8018b00:	f000 f962 	bl	8018dc8 <uxr_seq_num_add>
 8018b04:	4601      	mov	r1, r0
 8018b06:	4630      	mov	r0, r6
 8018b08:	f000 f966 	bl	8018dd8 <uxr_seq_num_cmp>
 8018b0c:	2800      	cmp	r0, #0
 8018b0e:	9a05      	ldr	r2, [sp, #20]
 8018b10:	dcef      	bgt.n	8018af2 <uxr_prepare_reliable_buffer_to_write+0x20e>
 8018b12:	8925      	ldrh	r5, [r4, #8]
 8018b14:	e9d4 7300 	ldrd	r7, r3, [r4]
 8018b18:	fbb6 f4f5 	udiv	r4, r6, r5
 8018b1c:	fbb3 f3f5 	udiv	r3, r3, r5
 8018b20:	fb05 6414 	mls	r4, r5, r4, r6
 8018b24:	b2a4      	uxth	r4, r4
 8018b26:	fb04 f303 	mul.w	r3, r4, r3
 8018b2a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8018b2e:	50fa      	str	r2, [r7, r3]
 8018b30:	2300      	movs	r3, #0
 8018b32:	f8cd 8000 	str.w	r8, [sp]
 8018b36:	f7f5 f97d 	bl	800de34 <ucdr_init_buffer_origin_offset>
 8018b3a:	2001      	movs	r0, #1
 8018b3c:	e7da      	b.n	8018af4 <uxr_prepare_reliable_buffer_to_write+0x210>
 8018b3e:	3201      	adds	r2, #1
 8018b40:	9306      	str	r3, [sp, #24]
 8018b42:	b293      	uxth	r3, r2
 8018b44:	4553      	cmp	r3, sl
 8018b46:	d8d4      	bhi.n	8018af2 <uxr_prepare_reliable_buffer_to_write+0x20e>
 8018b48:	e739      	b.n	80189be <uxr_prepare_reliable_buffer_to_write+0xda>
 8018b4a:	4630      	mov	r0, r6
 8018b4c:	2101      	movs	r1, #1
 8018b4e:	9307      	str	r3, [sp, #28]
 8018b50:	f000 f93a 	bl	8018dc8 <uxr_seq_num_add>
 8018b54:	4606      	mov	r6, r0
 8018b56:	8920      	ldrh	r0, [r4, #8]
 8018b58:	6862      	ldr	r2, [r4, #4]
 8018b5a:	fbb6 f1f0 	udiv	r1, r6, r0
 8018b5e:	fbb2 f2f0 	udiv	r2, r2, r0
 8018b62:	fb00 6111 	mls	r1, r0, r1, r6
 8018b66:	b289      	uxth	r1, r1
 8018b68:	fb01 f202 	mul.w	r2, r1, r2
 8018b6c:	6821      	ldr	r1, [r4, #0]
 8018b6e:	3204      	adds	r2, #4
 8018b70:	188b      	adds	r3, r1, r2
 8018b72:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8018b76:	9303      	str	r3, [sp, #12]
 8018b78:	9b07      	ldr	r3, [sp, #28]
 8018b7a:	e70c      	b.n	8018996 <uxr_prepare_reliable_buffer_to_write+0xb2>
 8018b7c:	8921      	ldrh	r1, [r4, #8]
 8018b7e:	6863      	ldr	r3, [r4, #4]
 8018b80:	9804      	ldr	r0, [sp, #16]
 8018b82:	fbb5 f2f1 	udiv	r2, r5, r1
 8018b86:	fbb3 f3f1 	udiv	r3, r3, r1
 8018b8a:	fb01 5212 	mls	r2, r1, r2, r5
 8018b8e:	6821      	ldr	r1, [r4, #0]
 8018b90:	b292      	uxth	r2, r2
 8018b92:	fb02 f303 	mul.w	r3, r2, r3
 8018b96:	7b22      	ldrb	r2, [r4, #12]
 8018b98:	3304      	adds	r3, #4
 8018b9a:	445a      	add	r2, fp
 8018b9c:	4419      	add	r1, r3
 8018b9e:	f841 2c04 	str.w	r2, [r1, #-4]
 8018ba2:	7b23      	ldrb	r3, [r4, #12]
 8018ba4:	9300      	str	r3, [sp, #0]
 8018ba6:	2300      	movs	r3, #0
 8018ba8:	f7f5 f944 	bl	800de34 <ucdr_init_buffer_origin_offset>
 8018bac:	2001      	movs	r0, #1
 8018bae:	81e5      	strh	r5, [r4, #14]
 8018bb0:	e7a0      	b.n	8018af4 <uxr_prepare_reliable_buffer_to_write+0x210>
 8018bb2:	4682      	mov	sl, r0
 8018bb4:	e6cb      	b.n	801894e <uxr_prepare_reliable_buffer_to_write+0x6a>
 8018bb6:	f10d 0b20 	add.w	fp, sp, #32
 8018bba:	e747      	b.n	8018a4c <uxr_prepare_reliable_buffer_to_write+0x168>
 8018bbc:	080187b9 	.word	0x080187b9

08018bc0 <uxr_prepare_next_reliable_buffer_to_send>:
 8018bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018bc2:	4604      	mov	r4, r0
 8018bc4:	461d      	mov	r5, r3
 8018bc6:	460f      	mov	r7, r1
 8018bc8:	8a00      	ldrh	r0, [r0, #16]
 8018bca:	2101      	movs	r1, #1
 8018bcc:	4616      	mov	r6, r2
 8018bce:	f000 f8fb 	bl	8018dc8 <uxr_seq_num_add>
 8018bd2:	8028      	strh	r0, [r5, #0]
 8018bd4:	8922      	ldrh	r2, [r4, #8]
 8018bd6:	6863      	ldr	r3, [r4, #4]
 8018bd8:	fbb0 f1f2 	udiv	r1, r0, r2
 8018bdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8018be0:	fb02 0c11 	mls	ip, r2, r1, r0
 8018be4:	89e1      	ldrh	r1, [r4, #14]
 8018be6:	fa1f fc8c 	uxth.w	ip, ip
 8018bea:	fb0c fc03 	mul.w	ip, ip, r3
 8018bee:	6823      	ldr	r3, [r4, #0]
 8018bf0:	f10c 0c04 	add.w	ip, ip, #4
 8018bf4:	4463      	add	r3, ip
 8018bf6:	603b      	str	r3, [r7, #0]
 8018bf8:	6823      	ldr	r3, [r4, #0]
 8018bfa:	449c      	add	ip, r3
 8018bfc:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8018c00:	6033      	str	r3, [r6, #0]
 8018c02:	f000 f8e9 	bl	8018dd8 <uxr_seq_num_cmp>
 8018c06:	2800      	cmp	r0, #0
 8018c08:	dd01      	ble.n	8018c0e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8018c0a:	2000      	movs	r0, #0
 8018c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c0e:	7b23      	ldrb	r3, [r4, #12]
 8018c10:	6832      	ldr	r2, [r6, #0]
 8018c12:	429a      	cmp	r2, r3
 8018c14:	d9f9      	bls.n	8018c0a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018c16:	8a61      	ldrh	r1, [r4, #18]
 8018c18:	8a20      	ldrh	r0, [r4, #16]
 8018c1a:	f000 f8d9 	bl	8018dd0 <uxr_seq_num_sub>
 8018c1e:	8923      	ldrh	r3, [r4, #8]
 8018c20:	4283      	cmp	r3, r0
 8018c22:	d0f2      	beq.n	8018c0a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018c24:	8828      	ldrh	r0, [r5, #0]
 8018c26:	89e3      	ldrh	r3, [r4, #14]
 8018c28:	8220      	strh	r0, [r4, #16]
 8018c2a:	4298      	cmp	r0, r3
 8018c2c:	d001      	beq.n	8018c32 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8018c2e:	2001      	movs	r0, #1
 8018c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c32:	2101      	movs	r1, #1
 8018c34:	f000 f8c8 	bl	8018dc8 <uxr_seq_num_add>
 8018c38:	4603      	mov	r3, r0
 8018c3a:	2001      	movs	r0, #1
 8018c3c:	81e3      	strh	r3, [r4, #14]
 8018c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018c40 <uxr_update_output_stream_heartbeat_timestamp>:
 8018c40:	b570      	push	{r4, r5, r6, lr}
 8018c42:	8a01      	ldrh	r1, [r0, #16]
 8018c44:	4604      	mov	r4, r0
 8018c46:	8a40      	ldrh	r0, [r0, #18]
 8018c48:	4615      	mov	r5, r2
 8018c4a:	461e      	mov	r6, r3
 8018c4c:	f000 f8c4 	bl	8018dd8 <uxr_seq_num_cmp>
 8018c50:	2800      	cmp	r0, #0
 8018c52:	db07      	blt.n	8018c64 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8018c54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018c58:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018c5c:	2000      	movs	r0, #0
 8018c5e:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8018c62:	bd70      	pop	{r4, r5, r6, pc}
 8018c64:	f894 0020 	ldrb.w	r0, [r4, #32]
 8018c68:	b940      	cbnz	r0, 8018c7c <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8018c6a:	2301      	movs	r3, #1
 8018c6c:	f884 3020 	strb.w	r3, [r4, #32]
 8018c70:	3564      	adds	r5, #100	; 0x64
 8018c72:	f146 0600 	adc.w	r6, r6, #0
 8018c76:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8018c7a:	bd70      	pop	{r4, r5, r6, pc}
 8018c7c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8018c80:	4295      	cmp	r5, r2
 8018c82:	eb76 0303 	sbcs.w	r3, r6, r3
 8018c86:	db04      	blt.n	8018c92 <uxr_update_output_stream_heartbeat_timestamp+0x52>
 8018c88:	1c43      	adds	r3, r0, #1
 8018c8a:	2001      	movs	r0, #1
 8018c8c:	f884 3020 	strb.w	r3, [r4, #32]
 8018c90:	e7ee      	b.n	8018c70 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8018c92:	2000      	movs	r0, #0
 8018c94:	e7ec      	b.n	8018c70 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8018c96:	bf00      	nop

08018c98 <uxr_begin_output_nack_buffer_it>:
 8018c98:	8a40      	ldrh	r0, [r0, #18]
 8018c9a:	4770      	bx	lr

08018c9c <uxr_next_reliable_nack_buffer_to_send>:
 8018c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ca0:	f890 7021 	ldrb.w	r7, [r0, #33]	; 0x21
 8018ca4:	b197      	cbz	r7, 8018ccc <uxr_next_reliable_nack_buffer_to_send+0x30>
 8018ca6:	4680      	mov	r8, r0
 8018ca8:	460d      	mov	r5, r1
 8018caa:	4616      	mov	r6, r2
 8018cac:	461c      	mov	r4, r3
 8018cae:	8818      	ldrh	r0, [r3, #0]
 8018cb0:	2101      	movs	r1, #1
 8018cb2:	f000 f889 	bl	8018dc8 <uxr_seq_num_add>
 8018cb6:	8020      	strh	r0, [r4, #0]
 8018cb8:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 8018cbc:	f000 f88c 	bl	8018dd8 <uxr_seq_num_cmp>
 8018cc0:	2800      	cmp	r0, #0
 8018cc2:	dd06      	ble.n	8018cd2 <uxr_next_reliable_nack_buffer_to_send+0x36>
 8018cc4:	2300      	movs	r3, #0
 8018cc6:	461f      	mov	r7, r3
 8018cc8:	f888 3021 	strb.w	r3, [r8, #33]	; 0x21
 8018ccc:	4638      	mov	r0, r7
 8018cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018cd2:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 8018cd6:	8820      	ldrh	r0, [r4, #0]
 8018cd8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018cdc:	fbb0 f3f2 	udiv	r3, r0, r2
 8018ce0:	fbb1 fcf2 	udiv	ip, r1, r2
 8018ce4:	fb02 0313 	mls	r3, r2, r3, r0
 8018ce8:	b29b      	uxth	r3, r3
 8018cea:	fb03 fc0c 	mul.w	ip, r3, ip
 8018cee:	f8d8 3000 	ldr.w	r3, [r8]
 8018cf2:	f10c 0c04 	add.w	ip, ip, #4
 8018cf6:	4463      	add	r3, ip
 8018cf8:	602b      	str	r3, [r5, #0]
 8018cfa:	f8d8 3000 	ldr.w	r3, [r8]
 8018cfe:	4463      	add	r3, ip
 8018d00:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8018d04:	6033      	str	r3, [r6, #0]
 8018d06:	f898 200c 	ldrb.w	r2, [r8, #12]
 8018d0a:	429a      	cmp	r2, r3
 8018d0c:	d0d0      	beq.n	8018cb0 <uxr_next_reliable_nack_buffer_to_send+0x14>
 8018d0e:	e7dd      	b.n	8018ccc <uxr_next_reliable_nack_buffer_to_send+0x30>

08018d10 <uxr_process_acknack>:
 8018d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d12:	4604      	mov	r4, r0
 8018d14:	460e      	mov	r6, r1
 8018d16:	4610      	mov	r0, r2
 8018d18:	2101      	movs	r1, #1
 8018d1a:	f000 f859 	bl	8018dd0 <uxr_seq_num_sub>
 8018d1e:	8a61      	ldrh	r1, [r4, #18]
 8018d20:	f000 f856 	bl	8018dd0 <uxr_seq_num_sub>
 8018d24:	b1c8      	cbz	r0, 8018d5a <uxr_process_acknack+0x4a>
 8018d26:	4605      	mov	r5, r0
 8018d28:	2700      	movs	r7, #0
 8018d2a:	2101      	movs	r1, #1
 8018d2c:	8a60      	ldrh	r0, [r4, #18]
 8018d2e:	f000 f84b 	bl	8018dc8 <uxr_seq_num_add>
 8018d32:	8923      	ldrh	r3, [r4, #8]
 8018d34:	6862      	ldr	r2, [r4, #4]
 8018d36:	3701      	adds	r7, #1
 8018d38:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8018d3c:	6821      	ldr	r1, [r4, #0]
 8018d3e:	42bd      	cmp	r5, r7
 8018d40:	8260      	strh	r0, [r4, #18]
 8018d42:	fbb0 fef3 	udiv	lr, r0, r3
 8018d46:	fbb2 f2f3 	udiv	r2, r2, r3
 8018d4a:	fb03 031e 	mls	r3, r3, lr, r0
 8018d4e:	b29b      	uxth	r3, r3
 8018d50:	fb02 f303 	mul.w	r3, r2, r3
 8018d54:	f841 c003 	str.w	ip, [r1, r3]
 8018d58:	d1e7      	bne.n	8018d2a <uxr_process_acknack+0x1a>
 8018d5a:	3e00      	subs	r6, #0
 8018d5c:	f04f 0300 	mov.w	r3, #0
 8018d60:	bf18      	it	ne
 8018d62:	2601      	movne	r6, #1
 8018d64:	f884 3020 	strb.w	r3, [r4, #32]
 8018d68:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 8018d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d6e:	bf00      	nop

08018d70 <uxr_is_output_up_to_date>:
 8018d70:	8a01      	ldrh	r1, [r0, #16]
 8018d72:	8a40      	ldrh	r0, [r0, #18]
 8018d74:	b508      	push	{r3, lr}
 8018d76:	f000 f82f 	bl	8018dd8 <uxr_seq_num_cmp>
 8018d7a:	fab0 f080 	clz	r0, r0
 8018d7e:	0940      	lsrs	r0, r0, #5
 8018d80:	bd08      	pop	{r3, pc}
 8018d82:	bf00      	nop

08018d84 <get_available_free_slots>:
 8018d84:	8901      	ldrh	r1, [r0, #8]
 8018d86:	b1e1      	cbz	r1, 8018dc2 <get_available_free_slots+0x3e>
 8018d88:	6843      	ldr	r3, [r0, #4]
 8018d8a:	f04f 0c00 	mov.w	ip, #0
 8018d8e:	b530      	push	{r4, r5, lr}
 8018d90:	fbb3 fef1 	udiv	lr, r3, r1
 8018d94:	6805      	ldr	r5, [r0, #0]
 8018d96:	4662      	mov	r2, ip
 8018d98:	7b04      	ldrb	r4, [r0, #12]
 8018d9a:	4660      	mov	r0, ip
 8018d9c:	f10c 0c01 	add.w	ip, ip, #1
 8018da0:	fbb2 f3f1 	udiv	r3, r2, r1
 8018da4:	fb01 2313 	mls	r3, r1, r3, r2
 8018da8:	fa1f f28c 	uxth.w	r2, ip
 8018dac:	b29b      	uxth	r3, r3
 8018dae:	fb0e f303 	mul.w	r3, lr, r3
 8018db2:	58eb      	ldr	r3, [r5, r3]
 8018db4:	429c      	cmp	r4, r3
 8018db6:	d101      	bne.n	8018dbc <get_available_free_slots+0x38>
 8018db8:	3001      	adds	r0, #1
 8018dba:	b280      	uxth	r0, r0
 8018dbc:	428a      	cmp	r2, r1
 8018dbe:	d3ed      	bcc.n	8018d9c <get_available_free_slots+0x18>
 8018dc0:	bd30      	pop	{r4, r5, pc}
 8018dc2:	4608      	mov	r0, r1
 8018dc4:	4770      	bx	lr
 8018dc6:	bf00      	nop

08018dc8 <uxr_seq_num_add>:
 8018dc8:	4408      	add	r0, r1
 8018dca:	b280      	uxth	r0, r0
 8018dcc:	4770      	bx	lr
 8018dce:	bf00      	nop

08018dd0 <uxr_seq_num_sub>:
 8018dd0:	1a40      	subs	r0, r0, r1
 8018dd2:	b280      	uxth	r0, r0
 8018dd4:	4770      	bx	lr
 8018dd6:	bf00      	nop

08018dd8 <uxr_seq_num_cmp>:
 8018dd8:	4288      	cmp	r0, r1
 8018dda:	d011      	beq.n	8018e00 <uxr_seq_num_cmp+0x28>
 8018ddc:	d309      	bcc.n	8018df2 <uxr_seq_num_cmp+0x1a>
 8018dde:	4288      	cmp	r0, r1
 8018de0:	d910      	bls.n	8018e04 <uxr_seq_num_cmp+0x2c>
 8018de2:	1a40      	subs	r0, r0, r1
 8018de4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8018de8:	bfd4      	ite	le
 8018dea:	2001      	movle	r0, #1
 8018dec:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8018df0:	4770      	bx	lr
 8018df2:	1a0b      	subs	r3, r1, r0
 8018df4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8018df8:	daf1      	bge.n	8018dde <uxr_seq_num_cmp+0x6>
 8018dfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018dfe:	4770      	bx	lr
 8018e00:	2000      	movs	r0, #0
 8018e02:	4770      	bx	lr
 8018e04:	2001      	movs	r0, #1
 8018e06:	4770      	bx	lr

08018e08 <abort>:
 8018e08:	b508      	push	{r3, lr}
 8018e0a:	2006      	movs	r0, #6
 8018e0c:	f000 fc5a 	bl	80196c4 <raise>
 8018e10:	2001      	movs	r0, #1
 8018e12:	f7e8 fd0b 	bl	800182c <_exit>
	...

08018e18 <calloc>:
 8018e18:	4b02      	ldr	r3, [pc, #8]	; (8018e24 <calloc+0xc>)
 8018e1a:	460a      	mov	r2, r1
 8018e1c:	4601      	mov	r1, r0
 8018e1e:	6818      	ldr	r0, [r3, #0]
 8018e20:	f000 b802 	b.w	8018e28 <_calloc_r>
 8018e24:	20002138 	.word	0x20002138

08018e28 <_calloc_r>:
 8018e28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018e2a:	fba1 2402 	umull	r2, r4, r1, r2
 8018e2e:	b94c      	cbnz	r4, 8018e44 <_calloc_r+0x1c>
 8018e30:	4611      	mov	r1, r2
 8018e32:	9201      	str	r2, [sp, #4]
 8018e34:	f000 f886 	bl	8018f44 <_malloc_r>
 8018e38:	9a01      	ldr	r2, [sp, #4]
 8018e3a:	4605      	mov	r5, r0
 8018e3c:	b930      	cbnz	r0, 8018e4c <_calloc_r+0x24>
 8018e3e:	4628      	mov	r0, r5
 8018e40:	b003      	add	sp, #12
 8018e42:	bd30      	pop	{r4, r5, pc}
 8018e44:	220c      	movs	r2, #12
 8018e46:	6002      	str	r2, [r0, #0]
 8018e48:	2500      	movs	r5, #0
 8018e4a:	e7f8      	b.n	8018e3e <_calloc_r+0x16>
 8018e4c:	4621      	mov	r1, r4
 8018e4e:	f000 fbc1 	bl	80195d4 <memset>
 8018e52:	e7f4      	b.n	8018e3e <_calloc_r+0x16>

08018e54 <getenv>:
 8018e54:	b507      	push	{r0, r1, r2, lr}
 8018e56:	4b04      	ldr	r3, [pc, #16]	; (8018e68 <getenv+0x14>)
 8018e58:	4601      	mov	r1, r0
 8018e5a:	aa01      	add	r2, sp, #4
 8018e5c:	6818      	ldr	r0, [r3, #0]
 8018e5e:	f000 f805 	bl	8018e6c <_findenv_r>
 8018e62:	b003      	add	sp, #12
 8018e64:	f85d fb04 	ldr.w	pc, [sp], #4
 8018e68:	20002138 	.word	0x20002138

08018e6c <_findenv_r>:
 8018e6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e70:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8018ee0 <_findenv_r+0x74>
 8018e74:	4607      	mov	r7, r0
 8018e76:	4689      	mov	r9, r1
 8018e78:	4616      	mov	r6, r2
 8018e7a:	f000 fd4d 	bl	8019918 <__env_lock>
 8018e7e:	f8da 4000 	ldr.w	r4, [sl]
 8018e82:	b134      	cbz	r4, 8018e92 <_findenv_r+0x26>
 8018e84:	464b      	mov	r3, r9
 8018e86:	4698      	mov	r8, r3
 8018e88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018e8c:	b13a      	cbz	r2, 8018e9e <_findenv_r+0x32>
 8018e8e:	2a3d      	cmp	r2, #61	; 0x3d
 8018e90:	d1f9      	bne.n	8018e86 <_findenv_r+0x1a>
 8018e92:	4638      	mov	r0, r7
 8018e94:	f000 fd46 	bl	8019924 <__env_unlock>
 8018e98:	2000      	movs	r0, #0
 8018e9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e9e:	eba8 0809 	sub.w	r8, r8, r9
 8018ea2:	46a3      	mov	fp, r4
 8018ea4:	f854 0b04 	ldr.w	r0, [r4], #4
 8018ea8:	2800      	cmp	r0, #0
 8018eaa:	d0f2      	beq.n	8018e92 <_findenv_r+0x26>
 8018eac:	4642      	mov	r2, r8
 8018eae:	4649      	mov	r1, r9
 8018eb0:	f000 fba5 	bl	80195fe <strncmp>
 8018eb4:	2800      	cmp	r0, #0
 8018eb6:	d1f4      	bne.n	8018ea2 <_findenv_r+0x36>
 8018eb8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018ebc:	eb03 0508 	add.w	r5, r3, r8
 8018ec0:	f813 3008 	ldrb.w	r3, [r3, r8]
 8018ec4:	2b3d      	cmp	r3, #61	; 0x3d
 8018ec6:	d1ec      	bne.n	8018ea2 <_findenv_r+0x36>
 8018ec8:	f8da 3000 	ldr.w	r3, [sl]
 8018ecc:	ebab 0303 	sub.w	r3, fp, r3
 8018ed0:	109b      	asrs	r3, r3, #2
 8018ed2:	4638      	mov	r0, r7
 8018ed4:	6033      	str	r3, [r6, #0]
 8018ed6:	f000 fd25 	bl	8019924 <__env_unlock>
 8018eda:	1c68      	adds	r0, r5, #1
 8018edc:	e7dd      	b.n	8018e9a <_findenv_r+0x2e>
 8018ede:	bf00      	nop
 8018ee0:	20000000 	.word	0x20000000

08018ee4 <malloc>:
 8018ee4:	4b02      	ldr	r3, [pc, #8]	; (8018ef0 <malloc+0xc>)
 8018ee6:	4601      	mov	r1, r0
 8018ee8:	6818      	ldr	r0, [r3, #0]
 8018eea:	f000 b82b 	b.w	8018f44 <_malloc_r>
 8018eee:	bf00      	nop
 8018ef0:	20002138 	.word	0x20002138

08018ef4 <free>:
 8018ef4:	4b02      	ldr	r3, [pc, #8]	; (8018f00 <free+0xc>)
 8018ef6:	4601      	mov	r1, r0
 8018ef8:	6818      	ldr	r0, [r3, #0]
 8018efa:	f000 bd19 	b.w	8019930 <_free_r>
 8018efe:	bf00      	nop
 8018f00:	20002138 	.word	0x20002138

08018f04 <sbrk_aligned>:
 8018f04:	b570      	push	{r4, r5, r6, lr}
 8018f06:	4e0e      	ldr	r6, [pc, #56]	; (8018f40 <sbrk_aligned+0x3c>)
 8018f08:	460c      	mov	r4, r1
 8018f0a:	6831      	ldr	r1, [r6, #0]
 8018f0c:	4605      	mov	r5, r0
 8018f0e:	b911      	cbnz	r1, 8018f16 <sbrk_aligned+0x12>
 8018f10:	f000 fc7e 	bl	8019810 <_sbrk_r>
 8018f14:	6030      	str	r0, [r6, #0]
 8018f16:	4621      	mov	r1, r4
 8018f18:	4628      	mov	r0, r5
 8018f1a:	f000 fc79 	bl	8019810 <_sbrk_r>
 8018f1e:	1c43      	adds	r3, r0, #1
 8018f20:	d00a      	beq.n	8018f38 <sbrk_aligned+0x34>
 8018f22:	1cc4      	adds	r4, r0, #3
 8018f24:	f024 0403 	bic.w	r4, r4, #3
 8018f28:	42a0      	cmp	r0, r4
 8018f2a:	d007      	beq.n	8018f3c <sbrk_aligned+0x38>
 8018f2c:	1a21      	subs	r1, r4, r0
 8018f2e:	4628      	mov	r0, r5
 8018f30:	f000 fc6e 	bl	8019810 <_sbrk_r>
 8018f34:	3001      	adds	r0, #1
 8018f36:	d101      	bne.n	8018f3c <sbrk_aligned+0x38>
 8018f38:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8018f3c:	4620      	mov	r0, r4
 8018f3e:	bd70      	pop	{r4, r5, r6, pc}
 8018f40:	200109e8 	.word	0x200109e8

08018f44 <_malloc_r>:
 8018f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018f48:	1ccd      	adds	r5, r1, #3
 8018f4a:	f025 0503 	bic.w	r5, r5, #3
 8018f4e:	3508      	adds	r5, #8
 8018f50:	2d0c      	cmp	r5, #12
 8018f52:	bf38      	it	cc
 8018f54:	250c      	movcc	r5, #12
 8018f56:	2d00      	cmp	r5, #0
 8018f58:	4607      	mov	r7, r0
 8018f5a:	db01      	blt.n	8018f60 <_malloc_r+0x1c>
 8018f5c:	42a9      	cmp	r1, r5
 8018f5e:	d905      	bls.n	8018f6c <_malloc_r+0x28>
 8018f60:	230c      	movs	r3, #12
 8018f62:	603b      	str	r3, [r7, #0]
 8018f64:	2600      	movs	r6, #0
 8018f66:	4630      	mov	r0, r6
 8018f68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018f6c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8019040 <_malloc_r+0xfc>
 8018f70:	f000 f868 	bl	8019044 <__malloc_lock>
 8018f74:	f8d8 3000 	ldr.w	r3, [r8]
 8018f78:	461c      	mov	r4, r3
 8018f7a:	bb5c      	cbnz	r4, 8018fd4 <_malloc_r+0x90>
 8018f7c:	4629      	mov	r1, r5
 8018f7e:	4638      	mov	r0, r7
 8018f80:	f7ff ffc0 	bl	8018f04 <sbrk_aligned>
 8018f84:	1c43      	adds	r3, r0, #1
 8018f86:	4604      	mov	r4, r0
 8018f88:	d155      	bne.n	8019036 <_malloc_r+0xf2>
 8018f8a:	f8d8 4000 	ldr.w	r4, [r8]
 8018f8e:	4626      	mov	r6, r4
 8018f90:	2e00      	cmp	r6, #0
 8018f92:	d145      	bne.n	8019020 <_malloc_r+0xdc>
 8018f94:	2c00      	cmp	r4, #0
 8018f96:	d048      	beq.n	801902a <_malloc_r+0xe6>
 8018f98:	6823      	ldr	r3, [r4, #0]
 8018f9a:	4631      	mov	r1, r6
 8018f9c:	4638      	mov	r0, r7
 8018f9e:	eb04 0903 	add.w	r9, r4, r3
 8018fa2:	f000 fc35 	bl	8019810 <_sbrk_r>
 8018fa6:	4581      	cmp	r9, r0
 8018fa8:	d13f      	bne.n	801902a <_malloc_r+0xe6>
 8018faa:	6821      	ldr	r1, [r4, #0]
 8018fac:	1a6d      	subs	r5, r5, r1
 8018fae:	4629      	mov	r1, r5
 8018fb0:	4638      	mov	r0, r7
 8018fb2:	f7ff ffa7 	bl	8018f04 <sbrk_aligned>
 8018fb6:	3001      	adds	r0, #1
 8018fb8:	d037      	beq.n	801902a <_malloc_r+0xe6>
 8018fba:	6823      	ldr	r3, [r4, #0]
 8018fbc:	442b      	add	r3, r5
 8018fbe:	6023      	str	r3, [r4, #0]
 8018fc0:	f8d8 3000 	ldr.w	r3, [r8]
 8018fc4:	2b00      	cmp	r3, #0
 8018fc6:	d038      	beq.n	801903a <_malloc_r+0xf6>
 8018fc8:	685a      	ldr	r2, [r3, #4]
 8018fca:	42a2      	cmp	r2, r4
 8018fcc:	d12b      	bne.n	8019026 <_malloc_r+0xe2>
 8018fce:	2200      	movs	r2, #0
 8018fd0:	605a      	str	r2, [r3, #4]
 8018fd2:	e00f      	b.n	8018ff4 <_malloc_r+0xb0>
 8018fd4:	6822      	ldr	r2, [r4, #0]
 8018fd6:	1b52      	subs	r2, r2, r5
 8018fd8:	d41f      	bmi.n	801901a <_malloc_r+0xd6>
 8018fda:	2a0b      	cmp	r2, #11
 8018fdc:	d917      	bls.n	801900e <_malloc_r+0xca>
 8018fde:	1961      	adds	r1, r4, r5
 8018fe0:	42a3      	cmp	r3, r4
 8018fe2:	6025      	str	r5, [r4, #0]
 8018fe4:	bf18      	it	ne
 8018fe6:	6059      	strne	r1, [r3, #4]
 8018fe8:	6863      	ldr	r3, [r4, #4]
 8018fea:	bf08      	it	eq
 8018fec:	f8c8 1000 	streq.w	r1, [r8]
 8018ff0:	5162      	str	r2, [r4, r5]
 8018ff2:	604b      	str	r3, [r1, #4]
 8018ff4:	4638      	mov	r0, r7
 8018ff6:	f104 060b 	add.w	r6, r4, #11
 8018ffa:	f000 f829 	bl	8019050 <__malloc_unlock>
 8018ffe:	f026 0607 	bic.w	r6, r6, #7
 8019002:	1d23      	adds	r3, r4, #4
 8019004:	1af2      	subs	r2, r6, r3
 8019006:	d0ae      	beq.n	8018f66 <_malloc_r+0x22>
 8019008:	1b9b      	subs	r3, r3, r6
 801900a:	50a3      	str	r3, [r4, r2]
 801900c:	e7ab      	b.n	8018f66 <_malloc_r+0x22>
 801900e:	42a3      	cmp	r3, r4
 8019010:	6862      	ldr	r2, [r4, #4]
 8019012:	d1dd      	bne.n	8018fd0 <_malloc_r+0x8c>
 8019014:	f8c8 2000 	str.w	r2, [r8]
 8019018:	e7ec      	b.n	8018ff4 <_malloc_r+0xb0>
 801901a:	4623      	mov	r3, r4
 801901c:	6864      	ldr	r4, [r4, #4]
 801901e:	e7ac      	b.n	8018f7a <_malloc_r+0x36>
 8019020:	4634      	mov	r4, r6
 8019022:	6876      	ldr	r6, [r6, #4]
 8019024:	e7b4      	b.n	8018f90 <_malloc_r+0x4c>
 8019026:	4613      	mov	r3, r2
 8019028:	e7cc      	b.n	8018fc4 <_malloc_r+0x80>
 801902a:	230c      	movs	r3, #12
 801902c:	603b      	str	r3, [r7, #0]
 801902e:	4638      	mov	r0, r7
 8019030:	f000 f80e 	bl	8019050 <__malloc_unlock>
 8019034:	e797      	b.n	8018f66 <_malloc_r+0x22>
 8019036:	6025      	str	r5, [r4, #0]
 8019038:	e7dc      	b.n	8018ff4 <_malloc_r+0xb0>
 801903a:	605b      	str	r3, [r3, #4]
 801903c:	deff      	udf	#255	; 0xff
 801903e:	bf00      	nop
 8019040:	200109e4 	.word	0x200109e4

08019044 <__malloc_lock>:
 8019044:	4801      	ldr	r0, [pc, #4]	; (801904c <__malloc_lock+0x8>)
 8019046:	f000 bc30 	b.w	80198aa <__retarget_lock_acquire_recursive>
 801904a:	bf00      	nop
 801904c:	20010b2d 	.word	0x20010b2d

08019050 <__malloc_unlock>:
 8019050:	4801      	ldr	r0, [pc, #4]	; (8019058 <__malloc_unlock+0x8>)
 8019052:	f000 bc2b 	b.w	80198ac <__retarget_lock_release_recursive>
 8019056:	bf00      	nop
 8019058:	20010b2d 	.word	0x20010b2d

0801905c <srand>:
 801905c:	b538      	push	{r3, r4, r5, lr}
 801905e:	4b10      	ldr	r3, [pc, #64]	; (80190a0 <srand+0x44>)
 8019060:	681d      	ldr	r5, [r3, #0]
 8019062:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8019064:	4604      	mov	r4, r0
 8019066:	b9b3      	cbnz	r3, 8019096 <srand+0x3a>
 8019068:	2018      	movs	r0, #24
 801906a:	f7ff ff3b 	bl	8018ee4 <malloc>
 801906e:	4602      	mov	r2, r0
 8019070:	6328      	str	r0, [r5, #48]	; 0x30
 8019072:	b920      	cbnz	r0, 801907e <srand+0x22>
 8019074:	4b0b      	ldr	r3, [pc, #44]	; (80190a4 <srand+0x48>)
 8019076:	480c      	ldr	r0, [pc, #48]	; (80190a8 <srand+0x4c>)
 8019078:	2146      	movs	r1, #70	; 0x46
 801907a:	f000 fc2f 	bl	80198dc <__assert_func>
 801907e:	490b      	ldr	r1, [pc, #44]	; (80190ac <srand+0x50>)
 8019080:	4b0b      	ldr	r3, [pc, #44]	; (80190b0 <srand+0x54>)
 8019082:	e9c0 1300 	strd	r1, r3, [r0]
 8019086:	4b0b      	ldr	r3, [pc, #44]	; (80190b4 <srand+0x58>)
 8019088:	6083      	str	r3, [r0, #8]
 801908a:	230b      	movs	r3, #11
 801908c:	8183      	strh	r3, [r0, #12]
 801908e:	2100      	movs	r1, #0
 8019090:	2001      	movs	r0, #1
 8019092:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019096:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8019098:	2200      	movs	r2, #0
 801909a:	611c      	str	r4, [r3, #16]
 801909c:	615a      	str	r2, [r3, #20]
 801909e:	bd38      	pop	{r3, r4, r5, pc}
 80190a0:	20002138 	.word	0x20002138
 80190a4:	0801bea4 	.word	0x0801bea4
 80190a8:	0801bebb 	.word	0x0801bebb
 80190ac:	abcd330e 	.word	0xabcd330e
 80190b0:	e66d1234 	.word	0xe66d1234
 80190b4:	0005deec 	.word	0x0005deec

080190b8 <rand>:
 80190b8:	4b16      	ldr	r3, [pc, #88]	; (8019114 <rand+0x5c>)
 80190ba:	b510      	push	{r4, lr}
 80190bc:	681c      	ldr	r4, [r3, #0]
 80190be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80190c0:	b9b3      	cbnz	r3, 80190f0 <rand+0x38>
 80190c2:	2018      	movs	r0, #24
 80190c4:	f7ff ff0e 	bl	8018ee4 <malloc>
 80190c8:	4602      	mov	r2, r0
 80190ca:	6320      	str	r0, [r4, #48]	; 0x30
 80190cc:	b920      	cbnz	r0, 80190d8 <rand+0x20>
 80190ce:	4b12      	ldr	r3, [pc, #72]	; (8019118 <rand+0x60>)
 80190d0:	4812      	ldr	r0, [pc, #72]	; (801911c <rand+0x64>)
 80190d2:	2152      	movs	r1, #82	; 0x52
 80190d4:	f000 fc02 	bl	80198dc <__assert_func>
 80190d8:	4911      	ldr	r1, [pc, #68]	; (8019120 <rand+0x68>)
 80190da:	4b12      	ldr	r3, [pc, #72]	; (8019124 <rand+0x6c>)
 80190dc:	e9c0 1300 	strd	r1, r3, [r0]
 80190e0:	4b11      	ldr	r3, [pc, #68]	; (8019128 <rand+0x70>)
 80190e2:	6083      	str	r3, [r0, #8]
 80190e4:	230b      	movs	r3, #11
 80190e6:	8183      	strh	r3, [r0, #12]
 80190e8:	2100      	movs	r1, #0
 80190ea:	2001      	movs	r0, #1
 80190ec:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80190f0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80190f2:	480e      	ldr	r0, [pc, #56]	; (801912c <rand+0x74>)
 80190f4:	690b      	ldr	r3, [r1, #16]
 80190f6:	694c      	ldr	r4, [r1, #20]
 80190f8:	4a0d      	ldr	r2, [pc, #52]	; (8019130 <rand+0x78>)
 80190fa:	4358      	muls	r0, r3
 80190fc:	fb02 0004 	mla	r0, r2, r4, r0
 8019100:	fba3 3202 	umull	r3, r2, r3, r2
 8019104:	3301      	adds	r3, #1
 8019106:	eb40 0002 	adc.w	r0, r0, r2
 801910a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801910e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8019112:	bd10      	pop	{r4, pc}
 8019114:	20002138 	.word	0x20002138
 8019118:	0801bea4 	.word	0x0801bea4
 801911c:	0801bebb 	.word	0x0801bebb
 8019120:	abcd330e 	.word	0xabcd330e
 8019124:	e66d1234 	.word	0xe66d1234
 8019128:	0005deec 	.word	0x0005deec
 801912c:	5851f42d 	.word	0x5851f42d
 8019130:	4c957f2d 	.word	0x4c957f2d

08019134 <realloc>:
 8019134:	4b02      	ldr	r3, [pc, #8]	; (8019140 <realloc+0xc>)
 8019136:	460a      	mov	r2, r1
 8019138:	4601      	mov	r1, r0
 801913a:	6818      	ldr	r0, [r3, #0]
 801913c:	f000 b802 	b.w	8019144 <_realloc_r>
 8019140:	20002138 	.word	0x20002138

08019144 <_realloc_r>:
 8019144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019148:	4680      	mov	r8, r0
 801914a:	4614      	mov	r4, r2
 801914c:	460e      	mov	r6, r1
 801914e:	b921      	cbnz	r1, 801915a <_realloc_r+0x16>
 8019150:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019154:	4611      	mov	r1, r2
 8019156:	f7ff bef5 	b.w	8018f44 <_malloc_r>
 801915a:	b92a      	cbnz	r2, 8019168 <_realloc_r+0x24>
 801915c:	f000 fbe8 	bl	8019930 <_free_r>
 8019160:	4625      	mov	r5, r4
 8019162:	4628      	mov	r0, r5
 8019164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019168:	f000 fc2e 	bl	80199c8 <_malloc_usable_size_r>
 801916c:	4284      	cmp	r4, r0
 801916e:	4607      	mov	r7, r0
 8019170:	d802      	bhi.n	8019178 <_realloc_r+0x34>
 8019172:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8019176:	d812      	bhi.n	801919e <_realloc_r+0x5a>
 8019178:	4621      	mov	r1, r4
 801917a:	4640      	mov	r0, r8
 801917c:	f7ff fee2 	bl	8018f44 <_malloc_r>
 8019180:	4605      	mov	r5, r0
 8019182:	2800      	cmp	r0, #0
 8019184:	d0ed      	beq.n	8019162 <_realloc_r+0x1e>
 8019186:	42bc      	cmp	r4, r7
 8019188:	4622      	mov	r2, r4
 801918a:	4631      	mov	r1, r6
 801918c:	bf28      	it	cs
 801918e:	463a      	movcs	r2, r7
 8019190:	f000 fb95 	bl	80198be <memcpy>
 8019194:	4631      	mov	r1, r6
 8019196:	4640      	mov	r0, r8
 8019198:	f000 fbca 	bl	8019930 <_free_r>
 801919c:	e7e1      	b.n	8019162 <_realloc_r+0x1e>
 801919e:	4635      	mov	r5, r6
 80191a0:	e7df      	b.n	8019162 <_realloc_r+0x1e>
	...

080191a4 <_strtoul_l.constprop.0>:
 80191a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80191a8:	4f36      	ldr	r7, [pc, #216]	; (8019284 <_strtoul_l.constprop.0+0xe0>)
 80191aa:	4686      	mov	lr, r0
 80191ac:	460d      	mov	r5, r1
 80191ae:	4628      	mov	r0, r5
 80191b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80191b4:	5d3e      	ldrb	r6, [r7, r4]
 80191b6:	f016 0608 	ands.w	r6, r6, #8
 80191ba:	d1f8      	bne.n	80191ae <_strtoul_l.constprop.0+0xa>
 80191bc:	2c2d      	cmp	r4, #45	; 0x2d
 80191be:	d130      	bne.n	8019222 <_strtoul_l.constprop.0+0x7e>
 80191c0:	782c      	ldrb	r4, [r5, #0]
 80191c2:	2601      	movs	r6, #1
 80191c4:	1c85      	adds	r5, r0, #2
 80191c6:	2b00      	cmp	r3, #0
 80191c8:	d057      	beq.n	801927a <_strtoul_l.constprop.0+0xd6>
 80191ca:	2b10      	cmp	r3, #16
 80191cc:	d109      	bne.n	80191e2 <_strtoul_l.constprop.0+0x3e>
 80191ce:	2c30      	cmp	r4, #48	; 0x30
 80191d0:	d107      	bne.n	80191e2 <_strtoul_l.constprop.0+0x3e>
 80191d2:	7828      	ldrb	r0, [r5, #0]
 80191d4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80191d8:	2858      	cmp	r0, #88	; 0x58
 80191da:	d149      	bne.n	8019270 <_strtoul_l.constprop.0+0xcc>
 80191dc:	786c      	ldrb	r4, [r5, #1]
 80191de:	2310      	movs	r3, #16
 80191e0:	3502      	adds	r5, #2
 80191e2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80191e6:	2700      	movs	r7, #0
 80191e8:	fbb8 f8f3 	udiv	r8, r8, r3
 80191ec:	fb03 f908 	mul.w	r9, r3, r8
 80191f0:	ea6f 0909 	mvn.w	r9, r9
 80191f4:	4638      	mov	r0, r7
 80191f6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80191fa:	f1bc 0f09 	cmp.w	ip, #9
 80191fe:	d815      	bhi.n	801922c <_strtoul_l.constprop.0+0x88>
 8019200:	4664      	mov	r4, ip
 8019202:	42a3      	cmp	r3, r4
 8019204:	dd23      	ble.n	801924e <_strtoul_l.constprop.0+0xaa>
 8019206:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 801920a:	d007      	beq.n	801921c <_strtoul_l.constprop.0+0x78>
 801920c:	4580      	cmp	r8, r0
 801920e:	d31b      	bcc.n	8019248 <_strtoul_l.constprop.0+0xa4>
 8019210:	d101      	bne.n	8019216 <_strtoul_l.constprop.0+0x72>
 8019212:	45a1      	cmp	r9, r4
 8019214:	db18      	blt.n	8019248 <_strtoul_l.constprop.0+0xa4>
 8019216:	fb00 4003 	mla	r0, r0, r3, r4
 801921a:	2701      	movs	r7, #1
 801921c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019220:	e7e9      	b.n	80191f6 <_strtoul_l.constprop.0+0x52>
 8019222:	2c2b      	cmp	r4, #43	; 0x2b
 8019224:	bf04      	itt	eq
 8019226:	782c      	ldrbeq	r4, [r5, #0]
 8019228:	1c85      	addeq	r5, r0, #2
 801922a:	e7cc      	b.n	80191c6 <_strtoul_l.constprop.0+0x22>
 801922c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8019230:	f1bc 0f19 	cmp.w	ip, #25
 8019234:	d801      	bhi.n	801923a <_strtoul_l.constprop.0+0x96>
 8019236:	3c37      	subs	r4, #55	; 0x37
 8019238:	e7e3      	b.n	8019202 <_strtoul_l.constprop.0+0x5e>
 801923a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801923e:	f1bc 0f19 	cmp.w	ip, #25
 8019242:	d804      	bhi.n	801924e <_strtoul_l.constprop.0+0xaa>
 8019244:	3c57      	subs	r4, #87	; 0x57
 8019246:	e7dc      	b.n	8019202 <_strtoul_l.constprop.0+0x5e>
 8019248:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801924c:	e7e6      	b.n	801921c <_strtoul_l.constprop.0+0x78>
 801924e:	1c7b      	adds	r3, r7, #1
 8019250:	d106      	bne.n	8019260 <_strtoul_l.constprop.0+0xbc>
 8019252:	2322      	movs	r3, #34	; 0x22
 8019254:	f8ce 3000 	str.w	r3, [lr]
 8019258:	4638      	mov	r0, r7
 801925a:	b932      	cbnz	r2, 801926a <_strtoul_l.constprop.0+0xc6>
 801925c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019260:	b106      	cbz	r6, 8019264 <_strtoul_l.constprop.0+0xc0>
 8019262:	4240      	negs	r0, r0
 8019264:	2a00      	cmp	r2, #0
 8019266:	d0f9      	beq.n	801925c <_strtoul_l.constprop.0+0xb8>
 8019268:	b107      	cbz	r7, 801926c <_strtoul_l.constprop.0+0xc8>
 801926a:	1e69      	subs	r1, r5, #1
 801926c:	6011      	str	r1, [r2, #0]
 801926e:	e7f5      	b.n	801925c <_strtoul_l.constprop.0+0xb8>
 8019270:	2430      	movs	r4, #48	; 0x30
 8019272:	2b00      	cmp	r3, #0
 8019274:	d1b5      	bne.n	80191e2 <_strtoul_l.constprop.0+0x3e>
 8019276:	2308      	movs	r3, #8
 8019278:	e7b3      	b.n	80191e2 <_strtoul_l.constprop.0+0x3e>
 801927a:	2c30      	cmp	r4, #48	; 0x30
 801927c:	d0a9      	beq.n	80191d2 <_strtoul_l.constprop.0+0x2e>
 801927e:	230a      	movs	r3, #10
 8019280:	e7af      	b.n	80191e2 <_strtoul_l.constprop.0+0x3e>
 8019282:	bf00      	nop
 8019284:	0801bf14 	.word	0x0801bf14

08019288 <strtoul>:
 8019288:	4613      	mov	r3, r2
 801928a:	460a      	mov	r2, r1
 801928c:	4601      	mov	r1, r0
 801928e:	4802      	ldr	r0, [pc, #8]	; (8019298 <strtoul+0x10>)
 8019290:	6800      	ldr	r0, [r0, #0]
 8019292:	f7ff bf87 	b.w	80191a4 <_strtoul_l.constprop.0>
 8019296:	bf00      	nop
 8019298:	20002138 	.word	0x20002138

0801929c <std>:
 801929c:	2300      	movs	r3, #0
 801929e:	b510      	push	{r4, lr}
 80192a0:	4604      	mov	r4, r0
 80192a2:	e9c0 3300 	strd	r3, r3, [r0]
 80192a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80192aa:	6083      	str	r3, [r0, #8]
 80192ac:	8181      	strh	r1, [r0, #12]
 80192ae:	6643      	str	r3, [r0, #100]	; 0x64
 80192b0:	81c2      	strh	r2, [r0, #14]
 80192b2:	6183      	str	r3, [r0, #24]
 80192b4:	4619      	mov	r1, r3
 80192b6:	2208      	movs	r2, #8
 80192b8:	305c      	adds	r0, #92	; 0x5c
 80192ba:	f000 f98b 	bl	80195d4 <memset>
 80192be:	4b0d      	ldr	r3, [pc, #52]	; (80192f4 <std+0x58>)
 80192c0:	6263      	str	r3, [r4, #36]	; 0x24
 80192c2:	4b0d      	ldr	r3, [pc, #52]	; (80192f8 <std+0x5c>)
 80192c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80192c6:	4b0d      	ldr	r3, [pc, #52]	; (80192fc <std+0x60>)
 80192c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80192ca:	4b0d      	ldr	r3, [pc, #52]	; (8019300 <std+0x64>)
 80192cc:	6323      	str	r3, [r4, #48]	; 0x30
 80192ce:	4b0d      	ldr	r3, [pc, #52]	; (8019304 <std+0x68>)
 80192d0:	6224      	str	r4, [r4, #32]
 80192d2:	429c      	cmp	r4, r3
 80192d4:	d006      	beq.n	80192e4 <std+0x48>
 80192d6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80192da:	4294      	cmp	r4, r2
 80192dc:	d002      	beq.n	80192e4 <std+0x48>
 80192de:	33d0      	adds	r3, #208	; 0xd0
 80192e0:	429c      	cmp	r4, r3
 80192e2:	d105      	bne.n	80192f0 <std+0x54>
 80192e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80192e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80192ec:	f000 badc 	b.w	80198a8 <__retarget_lock_init_recursive>
 80192f0:	bd10      	pop	{r4, pc}
 80192f2:	bf00      	nop
 80192f4:	08019489 	.word	0x08019489
 80192f8:	080194ab 	.word	0x080194ab
 80192fc:	080194e3 	.word	0x080194e3
 8019300:	08019507 	.word	0x08019507
 8019304:	200109ec 	.word	0x200109ec

08019308 <stdio_exit_handler>:
 8019308:	4a02      	ldr	r2, [pc, #8]	; (8019314 <stdio_exit_handler+0xc>)
 801930a:	4903      	ldr	r1, [pc, #12]	; (8019318 <stdio_exit_handler+0x10>)
 801930c:	4803      	ldr	r0, [pc, #12]	; (801931c <stdio_exit_handler+0x14>)
 801930e:	f000 b869 	b.w	80193e4 <_fwalk_sglue>
 8019312:	bf00      	nop
 8019314:	200020e0 	.word	0x200020e0
 8019318:	0801a0b5 	.word	0x0801a0b5
 801931c:	200020ec 	.word	0x200020ec

08019320 <cleanup_stdio>:
 8019320:	6841      	ldr	r1, [r0, #4]
 8019322:	4b0c      	ldr	r3, [pc, #48]	; (8019354 <cleanup_stdio+0x34>)
 8019324:	4299      	cmp	r1, r3
 8019326:	b510      	push	{r4, lr}
 8019328:	4604      	mov	r4, r0
 801932a:	d001      	beq.n	8019330 <cleanup_stdio+0x10>
 801932c:	f000 fec2 	bl	801a0b4 <_fflush_r>
 8019330:	68a1      	ldr	r1, [r4, #8]
 8019332:	4b09      	ldr	r3, [pc, #36]	; (8019358 <cleanup_stdio+0x38>)
 8019334:	4299      	cmp	r1, r3
 8019336:	d002      	beq.n	801933e <cleanup_stdio+0x1e>
 8019338:	4620      	mov	r0, r4
 801933a:	f000 febb 	bl	801a0b4 <_fflush_r>
 801933e:	68e1      	ldr	r1, [r4, #12]
 8019340:	4b06      	ldr	r3, [pc, #24]	; (801935c <cleanup_stdio+0x3c>)
 8019342:	4299      	cmp	r1, r3
 8019344:	d004      	beq.n	8019350 <cleanup_stdio+0x30>
 8019346:	4620      	mov	r0, r4
 8019348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801934c:	f000 beb2 	b.w	801a0b4 <_fflush_r>
 8019350:	bd10      	pop	{r4, pc}
 8019352:	bf00      	nop
 8019354:	200109ec 	.word	0x200109ec
 8019358:	20010a54 	.word	0x20010a54
 801935c:	20010abc 	.word	0x20010abc

08019360 <global_stdio_init.part.0>:
 8019360:	b510      	push	{r4, lr}
 8019362:	4b0b      	ldr	r3, [pc, #44]	; (8019390 <global_stdio_init.part.0+0x30>)
 8019364:	4c0b      	ldr	r4, [pc, #44]	; (8019394 <global_stdio_init.part.0+0x34>)
 8019366:	4a0c      	ldr	r2, [pc, #48]	; (8019398 <global_stdio_init.part.0+0x38>)
 8019368:	601a      	str	r2, [r3, #0]
 801936a:	4620      	mov	r0, r4
 801936c:	2200      	movs	r2, #0
 801936e:	2104      	movs	r1, #4
 8019370:	f7ff ff94 	bl	801929c <std>
 8019374:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8019378:	2201      	movs	r2, #1
 801937a:	2109      	movs	r1, #9
 801937c:	f7ff ff8e 	bl	801929c <std>
 8019380:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8019384:	2202      	movs	r2, #2
 8019386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801938a:	2112      	movs	r1, #18
 801938c:	f7ff bf86 	b.w	801929c <std>
 8019390:	20010b24 	.word	0x20010b24
 8019394:	200109ec 	.word	0x200109ec
 8019398:	08019309 	.word	0x08019309

0801939c <__sfp_lock_acquire>:
 801939c:	4801      	ldr	r0, [pc, #4]	; (80193a4 <__sfp_lock_acquire+0x8>)
 801939e:	f000 ba84 	b.w	80198aa <__retarget_lock_acquire_recursive>
 80193a2:	bf00      	nop
 80193a4:	20010b2e 	.word	0x20010b2e

080193a8 <__sfp_lock_release>:
 80193a8:	4801      	ldr	r0, [pc, #4]	; (80193b0 <__sfp_lock_release+0x8>)
 80193aa:	f000 ba7f 	b.w	80198ac <__retarget_lock_release_recursive>
 80193ae:	bf00      	nop
 80193b0:	20010b2e 	.word	0x20010b2e

080193b4 <__sinit>:
 80193b4:	b510      	push	{r4, lr}
 80193b6:	4604      	mov	r4, r0
 80193b8:	f7ff fff0 	bl	801939c <__sfp_lock_acquire>
 80193bc:	6a23      	ldr	r3, [r4, #32]
 80193be:	b11b      	cbz	r3, 80193c8 <__sinit+0x14>
 80193c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80193c4:	f7ff bff0 	b.w	80193a8 <__sfp_lock_release>
 80193c8:	4b04      	ldr	r3, [pc, #16]	; (80193dc <__sinit+0x28>)
 80193ca:	6223      	str	r3, [r4, #32]
 80193cc:	4b04      	ldr	r3, [pc, #16]	; (80193e0 <__sinit+0x2c>)
 80193ce:	681b      	ldr	r3, [r3, #0]
 80193d0:	2b00      	cmp	r3, #0
 80193d2:	d1f5      	bne.n	80193c0 <__sinit+0xc>
 80193d4:	f7ff ffc4 	bl	8019360 <global_stdio_init.part.0>
 80193d8:	e7f2      	b.n	80193c0 <__sinit+0xc>
 80193da:	bf00      	nop
 80193dc:	08019321 	.word	0x08019321
 80193e0:	20010b24 	.word	0x20010b24

080193e4 <_fwalk_sglue>:
 80193e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80193e8:	4607      	mov	r7, r0
 80193ea:	4688      	mov	r8, r1
 80193ec:	4614      	mov	r4, r2
 80193ee:	2600      	movs	r6, #0
 80193f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80193f4:	f1b9 0901 	subs.w	r9, r9, #1
 80193f8:	d505      	bpl.n	8019406 <_fwalk_sglue+0x22>
 80193fa:	6824      	ldr	r4, [r4, #0]
 80193fc:	2c00      	cmp	r4, #0
 80193fe:	d1f7      	bne.n	80193f0 <_fwalk_sglue+0xc>
 8019400:	4630      	mov	r0, r6
 8019402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019406:	89ab      	ldrh	r3, [r5, #12]
 8019408:	2b01      	cmp	r3, #1
 801940a:	d907      	bls.n	801941c <_fwalk_sglue+0x38>
 801940c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019410:	3301      	adds	r3, #1
 8019412:	d003      	beq.n	801941c <_fwalk_sglue+0x38>
 8019414:	4629      	mov	r1, r5
 8019416:	4638      	mov	r0, r7
 8019418:	47c0      	blx	r8
 801941a:	4306      	orrs	r6, r0
 801941c:	3568      	adds	r5, #104	; 0x68
 801941e:	e7e9      	b.n	80193f4 <_fwalk_sglue+0x10>

08019420 <sniprintf>:
 8019420:	b40c      	push	{r2, r3}
 8019422:	b530      	push	{r4, r5, lr}
 8019424:	4b17      	ldr	r3, [pc, #92]	; (8019484 <sniprintf+0x64>)
 8019426:	1e0c      	subs	r4, r1, #0
 8019428:	681d      	ldr	r5, [r3, #0]
 801942a:	b09d      	sub	sp, #116	; 0x74
 801942c:	da08      	bge.n	8019440 <sniprintf+0x20>
 801942e:	238b      	movs	r3, #139	; 0x8b
 8019430:	602b      	str	r3, [r5, #0]
 8019432:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019436:	b01d      	add	sp, #116	; 0x74
 8019438:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801943c:	b002      	add	sp, #8
 801943e:	4770      	bx	lr
 8019440:	f44f 7302 	mov.w	r3, #520	; 0x208
 8019444:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019448:	bf14      	ite	ne
 801944a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801944e:	4623      	moveq	r3, r4
 8019450:	9304      	str	r3, [sp, #16]
 8019452:	9307      	str	r3, [sp, #28]
 8019454:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019458:	9002      	str	r0, [sp, #8]
 801945a:	9006      	str	r0, [sp, #24]
 801945c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019460:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019462:	ab21      	add	r3, sp, #132	; 0x84
 8019464:	a902      	add	r1, sp, #8
 8019466:	4628      	mov	r0, r5
 8019468:	9301      	str	r3, [sp, #4]
 801946a:	f000 fb0f 	bl	8019a8c <_svfiprintf_r>
 801946e:	1c43      	adds	r3, r0, #1
 8019470:	bfbc      	itt	lt
 8019472:	238b      	movlt	r3, #139	; 0x8b
 8019474:	602b      	strlt	r3, [r5, #0]
 8019476:	2c00      	cmp	r4, #0
 8019478:	d0dd      	beq.n	8019436 <sniprintf+0x16>
 801947a:	9b02      	ldr	r3, [sp, #8]
 801947c:	2200      	movs	r2, #0
 801947e:	701a      	strb	r2, [r3, #0]
 8019480:	e7d9      	b.n	8019436 <sniprintf+0x16>
 8019482:	bf00      	nop
 8019484:	20002138 	.word	0x20002138

08019488 <__sread>:
 8019488:	b510      	push	{r4, lr}
 801948a:	460c      	mov	r4, r1
 801948c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019490:	f000 f998 	bl	80197c4 <_read_r>
 8019494:	2800      	cmp	r0, #0
 8019496:	bfab      	itete	ge
 8019498:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801949a:	89a3      	ldrhlt	r3, [r4, #12]
 801949c:	181b      	addge	r3, r3, r0
 801949e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80194a2:	bfac      	ite	ge
 80194a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80194a6:	81a3      	strhlt	r3, [r4, #12]
 80194a8:	bd10      	pop	{r4, pc}

080194aa <__swrite>:
 80194aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80194ae:	461f      	mov	r7, r3
 80194b0:	898b      	ldrh	r3, [r1, #12]
 80194b2:	05db      	lsls	r3, r3, #23
 80194b4:	4605      	mov	r5, r0
 80194b6:	460c      	mov	r4, r1
 80194b8:	4616      	mov	r6, r2
 80194ba:	d505      	bpl.n	80194c8 <__swrite+0x1e>
 80194bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80194c0:	2302      	movs	r3, #2
 80194c2:	2200      	movs	r2, #0
 80194c4:	f000 f96c 	bl	80197a0 <_lseek_r>
 80194c8:	89a3      	ldrh	r3, [r4, #12]
 80194ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80194ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80194d2:	81a3      	strh	r3, [r4, #12]
 80194d4:	4632      	mov	r2, r6
 80194d6:	463b      	mov	r3, r7
 80194d8:	4628      	mov	r0, r5
 80194da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80194de:	f000 b9a7 	b.w	8019830 <_write_r>

080194e2 <__sseek>:
 80194e2:	b510      	push	{r4, lr}
 80194e4:	460c      	mov	r4, r1
 80194e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80194ea:	f000 f959 	bl	80197a0 <_lseek_r>
 80194ee:	1c43      	adds	r3, r0, #1
 80194f0:	89a3      	ldrh	r3, [r4, #12]
 80194f2:	bf15      	itete	ne
 80194f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80194f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80194fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80194fe:	81a3      	strheq	r3, [r4, #12]
 8019500:	bf18      	it	ne
 8019502:	81a3      	strhne	r3, [r4, #12]
 8019504:	bd10      	pop	{r4, pc}

08019506 <__sclose>:
 8019506:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801950a:	f000 b8e3 	b.w	80196d4 <_close_r>

0801950e <_vsniprintf_r>:
 801950e:	b530      	push	{r4, r5, lr}
 8019510:	4614      	mov	r4, r2
 8019512:	2c00      	cmp	r4, #0
 8019514:	b09b      	sub	sp, #108	; 0x6c
 8019516:	4605      	mov	r5, r0
 8019518:	461a      	mov	r2, r3
 801951a:	da05      	bge.n	8019528 <_vsniprintf_r+0x1a>
 801951c:	238b      	movs	r3, #139	; 0x8b
 801951e:	6003      	str	r3, [r0, #0]
 8019520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019524:	b01b      	add	sp, #108	; 0x6c
 8019526:	bd30      	pop	{r4, r5, pc}
 8019528:	f44f 7302 	mov.w	r3, #520	; 0x208
 801952c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8019530:	bf14      	ite	ne
 8019532:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8019536:	4623      	moveq	r3, r4
 8019538:	9302      	str	r3, [sp, #8]
 801953a:	9305      	str	r3, [sp, #20]
 801953c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019540:	9100      	str	r1, [sp, #0]
 8019542:	9104      	str	r1, [sp, #16]
 8019544:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019548:	4669      	mov	r1, sp
 801954a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801954c:	f000 fa9e 	bl	8019a8c <_svfiprintf_r>
 8019550:	1c43      	adds	r3, r0, #1
 8019552:	bfbc      	itt	lt
 8019554:	238b      	movlt	r3, #139	; 0x8b
 8019556:	602b      	strlt	r3, [r5, #0]
 8019558:	2c00      	cmp	r4, #0
 801955a:	d0e3      	beq.n	8019524 <_vsniprintf_r+0x16>
 801955c:	9b00      	ldr	r3, [sp, #0]
 801955e:	2200      	movs	r2, #0
 8019560:	701a      	strb	r2, [r3, #0]
 8019562:	e7df      	b.n	8019524 <_vsniprintf_r+0x16>

08019564 <vsniprintf>:
 8019564:	b507      	push	{r0, r1, r2, lr}
 8019566:	9300      	str	r3, [sp, #0]
 8019568:	4613      	mov	r3, r2
 801956a:	460a      	mov	r2, r1
 801956c:	4601      	mov	r1, r0
 801956e:	4803      	ldr	r0, [pc, #12]	; (801957c <vsniprintf+0x18>)
 8019570:	6800      	ldr	r0, [r0, #0]
 8019572:	f7ff ffcc 	bl	801950e <_vsniprintf_r>
 8019576:	b003      	add	sp, #12
 8019578:	f85d fb04 	ldr.w	pc, [sp], #4
 801957c:	20002138 	.word	0x20002138

08019580 <memcmp>:
 8019580:	b510      	push	{r4, lr}
 8019582:	3901      	subs	r1, #1
 8019584:	4402      	add	r2, r0
 8019586:	4290      	cmp	r0, r2
 8019588:	d101      	bne.n	801958e <memcmp+0xe>
 801958a:	2000      	movs	r0, #0
 801958c:	e005      	b.n	801959a <memcmp+0x1a>
 801958e:	7803      	ldrb	r3, [r0, #0]
 8019590:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019594:	42a3      	cmp	r3, r4
 8019596:	d001      	beq.n	801959c <memcmp+0x1c>
 8019598:	1b18      	subs	r0, r3, r4
 801959a:	bd10      	pop	{r4, pc}
 801959c:	3001      	adds	r0, #1
 801959e:	e7f2      	b.n	8019586 <memcmp+0x6>

080195a0 <memmove>:
 80195a0:	4288      	cmp	r0, r1
 80195a2:	b510      	push	{r4, lr}
 80195a4:	eb01 0402 	add.w	r4, r1, r2
 80195a8:	d902      	bls.n	80195b0 <memmove+0x10>
 80195aa:	4284      	cmp	r4, r0
 80195ac:	4623      	mov	r3, r4
 80195ae:	d807      	bhi.n	80195c0 <memmove+0x20>
 80195b0:	1e43      	subs	r3, r0, #1
 80195b2:	42a1      	cmp	r1, r4
 80195b4:	d008      	beq.n	80195c8 <memmove+0x28>
 80195b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80195ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80195be:	e7f8      	b.n	80195b2 <memmove+0x12>
 80195c0:	4402      	add	r2, r0
 80195c2:	4601      	mov	r1, r0
 80195c4:	428a      	cmp	r2, r1
 80195c6:	d100      	bne.n	80195ca <memmove+0x2a>
 80195c8:	bd10      	pop	{r4, pc}
 80195ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80195ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80195d2:	e7f7      	b.n	80195c4 <memmove+0x24>

080195d4 <memset>:
 80195d4:	4402      	add	r2, r0
 80195d6:	4603      	mov	r3, r0
 80195d8:	4293      	cmp	r3, r2
 80195da:	d100      	bne.n	80195de <memset+0xa>
 80195dc:	4770      	bx	lr
 80195de:	f803 1b01 	strb.w	r1, [r3], #1
 80195e2:	e7f9      	b.n	80195d8 <memset+0x4>

080195e4 <strchr>:
 80195e4:	b2c9      	uxtb	r1, r1
 80195e6:	4603      	mov	r3, r0
 80195e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80195ec:	b11a      	cbz	r2, 80195f6 <strchr+0x12>
 80195ee:	428a      	cmp	r2, r1
 80195f0:	d1f9      	bne.n	80195e6 <strchr+0x2>
 80195f2:	4618      	mov	r0, r3
 80195f4:	4770      	bx	lr
 80195f6:	2900      	cmp	r1, #0
 80195f8:	bf18      	it	ne
 80195fa:	2300      	movne	r3, #0
 80195fc:	e7f9      	b.n	80195f2 <strchr+0xe>

080195fe <strncmp>:
 80195fe:	b510      	push	{r4, lr}
 8019600:	b16a      	cbz	r2, 801961e <strncmp+0x20>
 8019602:	3901      	subs	r1, #1
 8019604:	1884      	adds	r4, r0, r2
 8019606:	f810 2b01 	ldrb.w	r2, [r0], #1
 801960a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801960e:	429a      	cmp	r2, r3
 8019610:	d103      	bne.n	801961a <strncmp+0x1c>
 8019612:	42a0      	cmp	r0, r4
 8019614:	d001      	beq.n	801961a <strncmp+0x1c>
 8019616:	2a00      	cmp	r2, #0
 8019618:	d1f5      	bne.n	8019606 <strncmp+0x8>
 801961a:	1ad0      	subs	r0, r2, r3
 801961c:	bd10      	pop	{r4, pc}
 801961e:	4610      	mov	r0, r2
 8019620:	e7fc      	b.n	801961c <strncmp+0x1e>

08019622 <strncpy>:
 8019622:	b510      	push	{r4, lr}
 8019624:	3901      	subs	r1, #1
 8019626:	4603      	mov	r3, r0
 8019628:	b132      	cbz	r2, 8019638 <strncpy+0x16>
 801962a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801962e:	f803 4b01 	strb.w	r4, [r3], #1
 8019632:	3a01      	subs	r2, #1
 8019634:	2c00      	cmp	r4, #0
 8019636:	d1f7      	bne.n	8019628 <strncpy+0x6>
 8019638:	441a      	add	r2, r3
 801963a:	2100      	movs	r1, #0
 801963c:	4293      	cmp	r3, r2
 801963e:	d100      	bne.n	8019642 <strncpy+0x20>
 8019640:	bd10      	pop	{r4, pc}
 8019642:	f803 1b01 	strb.w	r1, [r3], #1
 8019646:	e7f9      	b.n	801963c <strncpy+0x1a>

08019648 <strstr>:
 8019648:	780a      	ldrb	r2, [r1, #0]
 801964a:	b570      	push	{r4, r5, r6, lr}
 801964c:	b96a      	cbnz	r2, 801966a <strstr+0x22>
 801964e:	bd70      	pop	{r4, r5, r6, pc}
 8019650:	429a      	cmp	r2, r3
 8019652:	d109      	bne.n	8019668 <strstr+0x20>
 8019654:	460c      	mov	r4, r1
 8019656:	4605      	mov	r5, r0
 8019658:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801965c:	2b00      	cmp	r3, #0
 801965e:	d0f6      	beq.n	801964e <strstr+0x6>
 8019660:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8019664:	429e      	cmp	r6, r3
 8019666:	d0f7      	beq.n	8019658 <strstr+0x10>
 8019668:	3001      	adds	r0, #1
 801966a:	7803      	ldrb	r3, [r0, #0]
 801966c:	2b00      	cmp	r3, #0
 801966e:	d1ef      	bne.n	8019650 <strstr+0x8>
 8019670:	4618      	mov	r0, r3
 8019672:	e7ec      	b.n	801964e <strstr+0x6>

08019674 <_raise_r>:
 8019674:	291f      	cmp	r1, #31
 8019676:	b538      	push	{r3, r4, r5, lr}
 8019678:	4604      	mov	r4, r0
 801967a:	460d      	mov	r5, r1
 801967c:	d904      	bls.n	8019688 <_raise_r+0x14>
 801967e:	2316      	movs	r3, #22
 8019680:	6003      	str	r3, [r0, #0]
 8019682:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019686:	bd38      	pop	{r3, r4, r5, pc}
 8019688:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801968a:	b112      	cbz	r2, 8019692 <_raise_r+0x1e>
 801968c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019690:	b94b      	cbnz	r3, 80196a6 <_raise_r+0x32>
 8019692:	4620      	mov	r0, r4
 8019694:	f000 f8ba 	bl	801980c <_getpid_r>
 8019698:	462a      	mov	r2, r5
 801969a:	4601      	mov	r1, r0
 801969c:	4620      	mov	r0, r4
 801969e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80196a2:	f000 b8a1 	b.w	80197e8 <_kill_r>
 80196a6:	2b01      	cmp	r3, #1
 80196a8:	d00a      	beq.n	80196c0 <_raise_r+0x4c>
 80196aa:	1c59      	adds	r1, r3, #1
 80196ac:	d103      	bne.n	80196b6 <_raise_r+0x42>
 80196ae:	2316      	movs	r3, #22
 80196b0:	6003      	str	r3, [r0, #0]
 80196b2:	2001      	movs	r0, #1
 80196b4:	e7e7      	b.n	8019686 <_raise_r+0x12>
 80196b6:	2400      	movs	r4, #0
 80196b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80196bc:	4628      	mov	r0, r5
 80196be:	4798      	blx	r3
 80196c0:	2000      	movs	r0, #0
 80196c2:	e7e0      	b.n	8019686 <_raise_r+0x12>

080196c4 <raise>:
 80196c4:	4b02      	ldr	r3, [pc, #8]	; (80196d0 <raise+0xc>)
 80196c6:	4601      	mov	r1, r0
 80196c8:	6818      	ldr	r0, [r3, #0]
 80196ca:	f7ff bfd3 	b.w	8019674 <_raise_r>
 80196ce:	bf00      	nop
 80196d0:	20002138 	.word	0x20002138

080196d4 <_close_r>:
 80196d4:	b538      	push	{r3, r4, r5, lr}
 80196d6:	4d06      	ldr	r5, [pc, #24]	; (80196f0 <_close_r+0x1c>)
 80196d8:	2300      	movs	r3, #0
 80196da:	4604      	mov	r4, r0
 80196dc:	4608      	mov	r0, r1
 80196de:	602b      	str	r3, [r5, #0]
 80196e0:	f7e8 f8e7 	bl	80018b2 <_close>
 80196e4:	1c43      	adds	r3, r0, #1
 80196e6:	d102      	bne.n	80196ee <_close_r+0x1a>
 80196e8:	682b      	ldr	r3, [r5, #0]
 80196ea:	b103      	cbz	r3, 80196ee <_close_r+0x1a>
 80196ec:	6023      	str	r3, [r4, #0]
 80196ee:	bd38      	pop	{r3, r4, r5, pc}
 80196f0:	20010b28 	.word	0x20010b28

080196f4 <_reclaim_reent>:
 80196f4:	4b29      	ldr	r3, [pc, #164]	; (801979c <_reclaim_reent+0xa8>)
 80196f6:	681b      	ldr	r3, [r3, #0]
 80196f8:	4283      	cmp	r3, r0
 80196fa:	b570      	push	{r4, r5, r6, lr}
 80196fc:	4604      	mov	r4, r0
 80196fe:	d04b      	beq.n	8019798 <_reclaim_reent+0xa4>
 8019700:	69c3      	ldr	r3, [r0, #28]
 8019702:	b143      	cbz	r3, 8019716 <_reclaim_reent+0x22>
 8019704:	68db      	ldr	r3, [r3, #12]
 8019706:	2b00      	cmp	r3, #0
 8019708:	d144      	bne.n	8019794 <_reclaim_reent+0xa0>
 801970a:	69e3      	ldr	r3, [r4, #28]
 801970c:	6819      	ldr	r1, [r3, #0]
 801970e:	b111      	cbz	r1, 8019716 <_reclaim_reent+0x22>
 8019710:	4620      	mov	r0, r4
 8019712:	f000 f90d 	bl	8019930 <_free_r>
 8019716:	6961      	ldr	r1, [r4, #20]
 8019718:	b111      	cbz	r1, 8019720 <_reclaim_reent+0x2c>
 801971a:	4620      	mov	r0, r4
 801971c:	f000 f908 	bl	8019930 <_free_r>
 8019720:	69e1      	ldr	r1, [r4, #28]
 8019722:	b111      	cbz	r1, 801972a <_reclaim_reent+0x36>
 8019724:	4620      	mov	r0, r4
 8019726:	f000 f903 	bl	8019930 <_free_r>
 801972a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801972c:	b111      	cbz	r1, 8019734 <_reclaim_reent+0x40>
 801972e:	4620      	mov	r0, r4
 8019730:	f000 f8fe 	bl	8019930 <_free_r>
 8019734:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019736:	b111      	cbz	r1, 801973e <_reclaim_reent+0x4a>
 8019738:	4620      	mov	r0, r4
 801973a:	f000 f8f9 	bl	8019930 <_free_r>
 801973e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8019740:	b111      	cbz	r1, 8019748 <_reclaim_reent+0x54>
 8019742:	4620      	mov	r0, r4
 8019744:	f000 f8f4 	bl	8019930 <_free_r>
 8019748:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801974a:	b111      	cbz	r1, 8019752 <_reclaim_reent+0x5e>
 801974c:	4620      	mov	r0, r4
 801974e:	f000 f8ef 	bl	8019930 <_free_r>
 8019752:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8019754:	b111      	cbz	r1, 801975c <_reclaim_reent+0x68>
 8019756:	4620      	mov	r0, r4
 8019758:	f000 f8ea 	bl	8019930 <_free_r>
 801975c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801975e:	b111      	cbz	r1, 8019766 <_reclaim_reent+0x72>
 8019760:	4620      	mov	r0, r4
 8019762:	f000 f8e5 	bl	8019930 <_free_r>
 8019766:	6a23      	ldr	r3, [r4, #32]
 8019768:	b1b3      	cbz	r3, 8019798 <_reclaim_reent+0xa4>
 801976a:	4620      	mov	r0, r4
 801976c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019770:	4718      	bx	r3
 8019772:	5949      	ldr	r1, [r1, r5]
 8019774:	b941      	cbnz	r1, 8019788 <_reclaim_reent+0x94>
 8019776:	3504      	adds	r5, #4
 8019778:	69e3      	ldr	r3, [r4, #28]
 801977a:	2d80      	cmp	r5, #128	; 0x80
 801977c:	68d9      	ldr	r1, [r3, #12]
 801977e:	d1f8      	bne.n	8019772 <_reclaim_reent+0x7e>
 8019780:	4620      	mov	r0, r4
 8019782:	f000 f8d5 	bl	8019930 <_free_r>
 8019786:	e7c0      	b.n	801970a <_reclaim_reent+0x16>
 8019788:	680e      	ldr	r6, [r1, #0]
 801978a:	4620      	mov	r0, r4
 801978c:	f000 f8d0 	bl	8019930 <_free_r>
 8019790:	4631      	mov	r1, r6
 8019792:	e7ef      	b.n	8019774 <_reclaim_reent+0x80>
 8019794:	2500      	movs	r5, #0
 8019796:	e7ef      	b.n	8019778 <_reclaim_reent+0x84>
 8019798:	bd70      	pop	{r4, r5, r6, pc}
 801979a:	bf00      	nop
 801979c:	20002138 	.word	0x20002138

080197a0 <_lseek_r>:
 80197a0:	b538      	push	{r3, r4, r5, lr}
 80197a2:	4d07      	ldr	r5, [pc, #28]	; (80197c0 <_lseek_r+0x20>)
 80197a4:	4604      	mov	r4, r0
 80197a6:	4608      	mov	r0, r1
 80197a8:	4611      	mov	r1, r2
 80197aa:	2200      	movs	r2, #0
 80197ac:	602a      	str	r2, [r5, #0]
 80197ae:	461a      	mov	r2, r3
 80197b0:	f7e8 f8a6 	bl	8001900 <_lseek>
 80197b4:	1c43      	adds	r3, r0, #1
 80197b6:	d102      	bne.n	80197be <_lseek_r+0x1e>
 80197b8:	682b      	ldr	r3, [r5, #0]
 80197ba:	b103      	cbz	r3, 80197be <_lseek_r+0x1e>
 80197bc:	6023      	str	r3, [r4, #0]
 80197be:	bd38      	pop	{r3, r4, r5, pc}
 80197c0:	20010b28 	.word	0x20010b28

080197c4 <_read_r>:
 80197c4:	b538      	push	{r3, r4, r5, lr}
 80197c6:	4d07      	ldr	r5, [pc, #28]	; (80197e4 <_read_r+0x20>)
 80197c8:	4604      	mov	r4, r0
 80197ca:	4608      	mov	r0, r1
 80197cc:	4611      	mov	r1, r2
 80197ce:	2200      	movs	r2, #0
 80197d0:	602a      	str	r2, [r5, #0]
 80197d2:	461a      	mov	r2, r3
 80197d4:	f7e8 f834 	bl	8001840 <_read>
 80197d8:	1c43      	adds	r3, r0, #1
 80197da:	d102      	bne.n	80197e2 <_read_r+0x1e>
 80197dc:	682b      	ldr	r3, [r5, #0]
 80197de:	b103      	cbz	r3, 80197e2 <_read_r+0x1e>
 80197e0:	6023      	str	r3, [r4, #0]
 80197e2:	bd38      	pop	{r3, r4, r5, pc}
 80197e4:	20010b28 	.word	0x20010b28

080197e8 <_kill_r>:
 80197e8:	b538      	push	{r3, r4, r5, lr}
 80197ea:	4d07      	ldr	r5, [pc, #28]	; (8019808 <_kill_r+0x20>)
 80197ec:	2300      	movs	r3, #0
 80197ee:	4604      	mov	r4, r0
 80197f0:	4608      	mov	r0, r1
 80197f2:	4611      	mov	r1, r2
 80197f4:	602b      	str	r3, [r5, #0]
 80197f6:	f7e8 f809 	bl	800180c <_kill>
 80197fa:	1c43      	adds	r3, r0, #1
 80197fc:	d102      	bne.n	8019804 <_kill_r+0x1c>
 80197fe:	682b      	ldr	r3, [r5, #0]
 8019800:	b103      	cbz	r3, 8019804 <_kill_r+0x1c>
 8019802:	6023      	str	r3, [r4, #0]
 8019804:	bd38      	pop	{r3, r4, r5, pc}
 8019806:	bf00      	nop
 8019808:	20010b28 	.word	0x20010b28

0801980c <_getpid_r>:
 801980c:	f7e7 bff6 	b.w	80017fc <_getpid>

08019810 <_sbrk_r>:
 8019810:	b538      	push	{r3, r4, r5, lr}
 8019812:	4d06      	ldr	r5, [pc, #24]	; (801982c <_sbrk_r+0x1c>)
 8019814:	2300      	movs	r3, #0
 8019816:	4604      	mov	r4, r0
 8019818:	4608      	mov	r0, r1
 801981a:	602b      	str	r3, [r5, #0]
 801981c:	f7e8 f87e 	bl	800191c <_sbrk>
 8019820:	1c43      	adds	r3, r0, #1
 8019822:	d102      	bne.n	801982a <_sbrk_r+0x1a>
 8019824:	682b      	ldr	r3, [r5, #0]
 8019826:	b103      	cbz	r3, 801982a <_sbrk_r+0x1a>
 8019828:	6023      	str	r3, [r4, #0]
 801982a:	bd38      	pop	{r3, r4, r5, pc}
 801982c:	20010b28 	.word	0x20010b28

08019830 <_write_r>:
 8019830:	b538      	push	{r3, r4, r5, lr}
 8019832:	4d07      	ldr	r5, [pc, #28]	; (8019850 <_write_r+0x20>)
 8019834:	4604      	mov	r4, r0
 8019836:	4608      	mov	r0, r1
 8019838:	4611      	mov	r1, r2
 801983a:	2200      	movs	r2, #0
 801983c:	602a      	str	r2, [r5, #0]
 801983e:	461a      	mov	r2, r3
 8019840:	f7e8 f81b 	bl	800187a <_write>
 8019844:	1c43      	adds	r3, r0, #1
 8019846:	d102      	bne.n	801984e <_write_r+0x1e>
 8019848:	682b      	ldr	r3, [r5, #0]
 801984a:	b103      	cbz	r3, 801984e <_write_r+0x1e>
 801984c:	6023      	str	r3, [r4, #0]
 801984e:	bd38      	pop	{r3, r4, r5, pc}
 8019850:	20010b28 	.word	0x20010b28

08019854 <__errno>:
 8019854:	4b01      	ldr	r3, [pc, #4]	; (801985c <__errno+0x8>)
 8019856:	6818      	ldr	r0, [r3, #0]
 8019858:	4770      	bx	lr
 801985a:	bf00      	nop
 801985c:	20002138 	.word	0x20002138

08019860 <__libc_init_array>:
 8019860:	b570      	push	{r4, r5, r6, lr}
 8019862:	4d0d      	ldr	r5, [pc, #52]	; (8019898 <__libc_init_array+0x38>)
 8019864:	4c0d      	ldr	r4, [pc, #52]	; (801989c <__libc_init_array+0x3c>)
 8019866:	1b64      	subs	r4, r4, r5
 8019868:	10a4      	asrs	r4, r4, #2
 801986a:	2600      	movs	r6, #0
 801986c:	42a6      	cmp	r6, r4
 801986e:	d109      	bne.n	8019884 <__libc_init_array+0x24>
 8019870:	4d0b      	ldr	r5, [pc, #44]	; (80198a0 <__libc_init_array+0x40>)
 8019872:	4c0c      	ldr	r4, [pc, #48]	; (80198a4 <__libc_init_array+0x44>)
 8019874:	f000 feb6 	bl	801a5e4 <_init>
 8019878:	1b64      	subs	r4, r4, r5
 801987a:	10a4      	asrs	r4, r4, #2
 801987c:	2600      	movs	r6, #0
 801987e:	42a6      	cmp	r6, r4
 8019880:	d105      	bne.n	801988e <__libc_init_array+0x2e>
 8019882:	bd70      	pop	{r4, r5, r6, pc}
 8019884:	f855 3b04 	ldr.w	r3, [r5], #4
 8019888:	4798      	blx	r3
 801988a:	3601      	adds	r6, #1
 801988c:	e7ee      	b.n	801986c <__libc_init_array+0xc>
 801988e:	f855 3b04 	ldr.w	r3, [r5], #4
 8019892:	4798      	blx	r3
 8019894:	3601      	adds	r6, #1
 8019896:	e7f2      	b.n	801987e <__libc_init_array+0x1e>
 8019898:	0801c08c 	.word	0x0801c08c
 801989c:	0801c08c 	.word	0x0801c08c
 80198a0:	0801c08c 	.word	0x0801c08c
 80198a4:	0801c09c 	.word	0x0801c09c

080198a8 <__retarget_lock_init_recursive>:
 80198a8:	4770      	bx	lr

080198aa <__retarget_lock_acquire_recursive>:
 80198aa:	4770      	bx	lr

080198ac <__retarget_lock_release_recursive>:
 80198ac:	4770      	bx	lr

080198ae <strcpy>:
 80198ae:	4603      	mov	r3, r0
 80198b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80198b4:	f803 2b01 	strb.w	r2, [r3], #1
 80198b8:	2a00      	cmp	r2, #0
 80198ba:	d1f9      	bne.n	80198b0 <strcpy+0x2>
 80198bc:	4770      	bx	lr

080198be <memcpy>:
 80198be:	440a      	add	r2, r1
 80198c0:	4291      	cmp	r1, r2
 80198c2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80198c6:	d100      	bne.n	80198ca <memcpy+0xc>
 80198c8:	4770      	bx	lr
 80198ca:	b510      	push	{r4, lr}
 80198cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80198d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80198d4:	4291      	cmp	r1, r2
 80198d6:	d1f9      	bne.n	80198cc <memcpy+0xe>
 80198d8:	bd10      	pop	{r4, pc}
	...

080198dc <__assert_func>:
 80198dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80198de:	4614      	mov	r4, r2
 80198e0:	461a      	mov	r2, r3
 80198e2:	4b09      	ldr	r3, [pc, #36]	; (8019908 <__assert_func+0x2c>)
 80198e4:	681b      	ldr	r3, [r3, #0]
 80198e6:	4605      	mov	r5, r0
 80198e8:	68d8      	ldr	r0, [r3, #12]
 80198ea:	b14c      	cbz	r4, 8019900 <__assert_func+0x24>
 80198ec:	4b07      	ldr	r3, [pc, #28]	; (801990c <__assert_func+0x30>)
 80198ee:	9100      	str	r1, [sp, #0]
 80198f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80198f4:	4906      	ldr	r1, [pc, #24]	; (8019910 <__assert_func+0x34>)
 80198f6:	462b      	mov	r3, r5
 80198f8:	f000 fc04 	bl	801a104 <fiprintf>
 80198fc:	f7ff fa84 	bl	8018e08 <abort>
 8019900:	4b04      	ldr	r3, [pc, #16]	; (8019914 <__assert_func+0x38>)
 8019902:	461c      	mov	r4, r3
 8019904:	e7f3      	b.n	80198ee <__assert_func+0x12>
 8019906:	bf00      	nop
 8019908:	20002138 	.word	0x20002138
 801990c:	0801c014 	.word	0x0801c014
 8019910:	0801c021 	.word	0x0801c021
 8019914:	0801c04f 	.word	0x0801c04f

08019918 <__env_lock>:
 8019918:	4801      	ldr	r0, [pc, #4]	; (8019920 <__env_lock+0x8>)
 801991a:	f7ff bfc6 	b.w	80198aa <__retarget_lock_acquire_recursive>
 801991e:	bf00      	nop
 8019920:	20010b2c 	.word	0x20010b2c

08019924 <__env_unlock>:
 8019924:	4801      	ldr	r0, [pc, #4]	; (801992c <__env_unlock+0x8>)
 8019926:	f7ff bfc1 	b.w	80198ac <__retarget_lock_release_recursive>
 801992a:	bf00      	nop
 801992c:	20010b2c 	.word	0x20010b2c

08019930 <_free_r>:
 8019930:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019932:	2900      	cmp	r1, #0
 8019934:	d044      	beq.n	80199c0 <_free_r+0x90>
 8019936:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801993a:	9001      	str	r0, [sp, #4]
 801993c:	2b00      	cmp	r3, #0
 801993e:	f1a1 0404 	sub.w	r4, r1, #4
 8019942:	bfb8      	it	lt
 8019944:	18e4      	addlt	r4, r4, r3
 8019946:	f7ff fb7d 	bl	8019044 <__malloc_lock>
 801994a:	4a1e      	ldr	r2, [pc, #120]	; (80199c4 <_free_r+0x94>)
 801994c:	9801      	ldr	r0, [sp, #4]
 801994e:	6813      	ldr	r3, [r2, #0]
 8019950:	b933      	cbnz	r3, 8019960 <_free_r+0x30>
 8019952:	6063      	str	r3, [r4, #4]
 8019954:	6014      	str	r4, [r2, #0]
 8019956:	b003      	add	sp, #12
 8019958:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801995c:	f7ff bb78 	b.w	8019050 <__malloc_unlock>
 8019960:	42a3      	cmp	r3, r4
 8019962:	d908      	bls.n	8019976 <_free_r+0x46>
 8019964:	6825      	ldr	r5, [r4, #0]
 8019966:	1961      	adds	r1, r4, r5
 8019968:	428b      	cmp	r3, r1
 801996a:	bf01      	itttt	eq
 801996c:	6819      	ldreq	r1, [r3, #0]
 801996e:	685b      	ldreq	r3, [r3, #4]
 8019970:	1949      	addeq	r1, r1, r5
 8019972:	6021      	streq	r1, [r4, #0]
 8019974:	e7ed      	b.n	8019952 <_free_r+0x22>
 8019976:	461a      	mov	r2, r3
 8019978:	685b      	ldr	r3, [r3, #4]
 801997a:	b10b      	cbz	r3, 8019980 <_free_r+0x50>
 801997c:	42a3      	cmp	r3, r4
 801997e:	d9fa      	bls.n	8019976 <_free_r+0x46>
 8019980:	6811      	ldr	r1, [r2, #0]
 8019982:	1855      	adds	r5, r2, r1
 8019984:	42a5      	cmp	r5, r4
 8019986:	d10b      	bne.n	80199a0 <_free_r+0x70>
 8019988:	6824      	ldr	r4, [r4, #0]
 801998a:	4421      	add	r1, r4
 801998c:	1854      	adds	r4, r2, r1
 801998e:	42a3      	cmp	r3, r4
 8019990:	6011      	str	r1, [r2, #0]
 8019992:	d1e0      	bne.n	8019956 <_free_r+0x26>
 8019994:	681c      	ldr	r4, [r3, #0]
 8019996:	685b      	ldr	r3, [r3, #4]
 8019998:	6053      	str	r3, [r2, #4]
 801999a:	440c      	add	r4, r1
 801999c:	6014      	str	r4, [r2, #0]
 801999e:	e7da      	b.n	8019956 <_free_r+0x26>
 80199a0:	d902      	bls.n	80199a8 <_free_r+0x78>
 80199a2:	230c      	movs	r3, #12
 80199a4:	6003      	str	r3, [r0, #0]
 80199a6:	e7d6      	b.n	8019956 <_free_r+0x26>
 80199a8:	6825      	ldr	r5, [r4, #0]
 80199aa:	1961      	adds	r1, r4, r5
 80199ac:	428b      	cmp	r3, r1
 80199ae:	bf04      	itt	eq
 80199b0:	6819      	ldreq	r1, [r3, #0]
 80199b2:	685b      	ldreq	r3, [r3, #4]
 80199b4:	6063      	str	r3, [r4, #4]
 80199b6:	bf04      	itt	eq
 80199b8:	1949      	addeq	r1, r1, r5
 80199ba:	6021      	streq	r1, [r4, #0]
 80199bc:	6054      	str	r4, [r2, #4]
 80199be:	e7ca      	b.n	8019956 <_free_r+0x26>
 80199c0:	b003      	add	sp, #12
 80199c2:	bd30      	pop	{r4, r5, pc}
 80199c4:	200109e4 	.word	0x200109e4

080199c8 <_malloc_usable_size_r>:
 80199c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80199cc:	1f18      	subs	r0, r3, #4
 80199ce:	2b00      	cmp	r3, #0
 80199d0:	bfbc      	itt	lt
 80199d2:	580b      	ldrlt	r3, [r1, r0]
 80199d4:	18c0      	addlt	r0, r0, r3
 80199d6:	4770      	bx	lr

080199d8 <__ssputs_r>:
 80199d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80199dc:	688e      	ldr	r6, [r1, #8]
 80199de:	461f      	mov	r7, r3
 80199e0:	42be      	cmp	r6, r7
 80199e2:	680b      	ldr	r3, [r1, #0]
 80199e4:	4682      	mov	sl, r0
 80199e6:	460c      	mov	r4, r1
 80199e8:	4690      	mov	r8, r2
 80199ea:	d82c      	bhi.n	8019a46 <__ssputs_r+0x6e>
 80199ec:	898a      	ldrh	r2, [r1, #12]
 80199ee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80199f2:	d026      	beq.n	8019a42 <__ssputs_r+0x6a>
 80199f4:	6965      	ldr	r5, [r4, #20]
 80199f6:	6909      	ldr	r1, [r1, #16]
 80199f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80199fc:	eba3 0901 	sub.w	r9, r3, r1
 8019a00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019a04:	1c7b      	adds	r3, r7, #1
 8019a06:	444b      	add	r3, r9
 8019a08:	106d      	asrs	r5, r5, #1
 8019a0a:	429d      	cmp	r5, r3
 8019a0c:	bf38      	it	cc
 8019a0e:	461d      	movcc	r5, r3
 8019a10:	0553      	lsls	r3, r2, #21
 8019a12:	d527      	bpl.n	8019a64 <__ssputs_r+0x8c>
 8019a14:	4629      	mov	r1, r5
 8019a16:	f7ff fa95 	bl	8018f44 <_malloc_r>
 8019a1a:	4606      	mov	r6, r0
 8019a1c:	b360      	cbz	r0, 8019a78 <__ssputs_r+0xa0>
 8019a1e:	6921      	ldr	r1, [r4, #16]
 8019a20:	464a      	mov	r2, r9
 8019a22:	f7ff ff4c 	bl	80198be <memcpy>
 8019a26:	89a3      	ldrh	r3, [r4, #12]
 8019a28:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019a30:	81a3      	strh	r3, [r4, #12]
 8019a32:	6126      	str	r6, [r4, #16]
 8019a34:	6165      	str	r5, [r4, #20]
 8019a36:	444e      	add	r6, r9
 8019a38:	eba5 0509 	sub.w	r5, r5, r9
 8019a3c:	6026      	str	r6, [r4, #0]
 8019a3e:	60a5      	str	r5, [r4, #8]
 8019a40:	463e      	mov	r6, r7
 8019a42:	42be      	cmp	r6, r7
 8019a44:	d900      	bls.n	8019a48 <__ssputs_r+0x70>
 8019a46:	463e      	mov	r6, r7
 8019a48:	6820      	ldr	r0, [r4, #0]
 8019a4a:	4632      	mov	r2, r6
 8019a4c:	4641      	mov	r1, r8
 8019a4e:	f7ff fda7 	bl	80195a0 <memmove>
 8019a52:	68a3      	ldr	r3, [r4, #8]
 8019a54:	1b9b      	subs	r3, r3, r6
 8019a56:	60a3      	str	r3, [r4, #8]
 8019a58:	6823      	ldr	r3, [r4, #0]
 8019a5a:	4433      	add	r3, r6
 8019a5c:	6023      	str	r3, [r4, #0]
 8019a5e:	2000      	movs	r0, #0
 8019a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019a64:	462a      	mov	r2, r5
 8019a66:	f7ff fb6d 	bl	8019144 <_realloc_r>
 8019a6a:	4606      	mov	r6, r0
 8019a6c:	2800      	cmp	r0, #0
 8019a6e:	d1e0      	bne.n	8019a32 <__ssputs_r+0x5a>
 8019a70:	6921      	ldr	r1, [r4, #16]
 8019a72:	4650      	mov	r0, sl
 8019a74:	f7ff ff5c 	bl	8019930 <_free_r>
 8019a78:	230c      	movs	r3, #12
 8019a7a:	f8ca 3000 	str.w	r3, [sl]
 8019a7e:	89a3      	ldrh	r3, [r4, #12]
 8019a80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019a84:	81a3      	strh	r3, [r4, #12]
 8019a86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019a8a:	e7e9      	b.n	8019a60 <__ssputs_r+0x88>

08019a8c <_svfiprintf_r>:
 8019a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a90:	4698      	mov	r8, r3
 8019a92:	898b      	ldrh	r3, [r1, #12]
 8019a94:	061b      	lsls	r3, r3, #24
 8019a96:	b09d      	sub	sp, #116	; 0x74
 8019a98:	4607      	mov	r7, r0
 8019a9a:	460d      	mov	r5, r1
 8019a9c:	4614      	mov	r4, r2
 8019a9e:	d50e      	bpl.n	8019abe <_svfiprintf_r+0x32>
 8019aa0:	690b      	ldr	r3, [r1, #16]
 8019aa2:	b963      	cbnz	r3, 8019abe <_svfiprintf_r+0x32>
 8019aa4:	2140      	movs	r1, #64	; 0x40
 8019aa6:	f7ff fa4d 	bl	8018f44 <_malloc_r>
 8019aaa:	6028      	str	r0, [r5, #0]
 8019aac:	6128      	str	r0, [r5, #16]
 8019aae:	b920      	cbnz	r0, 8019aba <_svfiprintf_r+0x2e>
 8019ab0:	230c      	movs	r3, #12
 8019ab2:	603b      	str	r3, [r7, #0]
 8019ab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019ab8:	e0d0      	b.n	8019c5c <_svfiprintf_r+0x1d0>
 8019aba:	2340      	movs	r3, #64	; 0x40
 8019abc:	616b      	str	r3, [r5, #20]
 8019abe:	2300      	movs	r3, #0
 8019ac0:	9309      	str	r3, [sp, #36]	; 0x24
 8019ac2:	2320      	movs	r3, #32
 8019ac4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019ac8:	f8cd 800c 	str.w	r8, [sp, #12]
 8019acc:	2330      	movs	r3, #48	; 0x30
 8019ace:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8019c74 <_svfiprintf_r+0x1e8>
 8019ad2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019ad6:	f04f 0901 	mov.w	r9, #1
 8019ada:	4623      	mov	r3, r4
 8019adc:	469a      	mov	sl, r3
 8019ade:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019ae2:	b10a      	cbz	r2, 8019ae8 <_svfiprintf_r+0x5c>
 8019ae4:	2a25      	cmp	r2, #37	; 0x25
 8019ae6:	d1f9      	bne.n	8019adc <_svfiprintf_r+0x50>
 8019ae8:	ebba 0b04 	subs.w	fp, sl, r4
 8019aec:	d00b      	beq.n	8019b06 <_svfiprintf_r+0x7a>
 8019aee:	465b      	mov	r3, fp
 8019af0:	4622      	mov	r2, r4
 8019af2:	4629      	mov	r1, r5
 8019af4:	4638      	mov	r0, r7
 8019af6:	f7ff ff6f 	bl	80199d8 <__ssputs_r>
 8019afa:	3001      	adds	r0, #1
 8019afc:	f000 80a9 	beq.w	8019c52 <_svfiprintf_r+0x1c6>
 8019b00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019b02:	445a      	add	r2, fp
 8019b04:	9209      	str	r2, [sp, #36]	; 0x24
 8019b06:	f89a 3000 	ldrb.w	r3, [sl]
 8019b0a:	2b00      	cmp	r3, #0
 8019b0c:	f000 80a1 	beq.w	8019c52 <_svfiprintf_r+0x1c6>
 8019b10:	2300      	movs	r3, #0
 8019b12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019b16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019b1a:	f10a 0a01 	add.w	sl, sl, #1
 8019b1e:	9304      	str	r3, [sp, #16]
 8019b20:	9307      	str	r3, [sp, #28]
 8019b22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019b26:	931a      	str	r3, [sp, #104]	; 0x68
 8019b28:	4654      	mov	r4, sl
 8019b2a:	2205      	movs	r2, #5
 8019b2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019b30:	4850      	ldr	r0, [pc, #320]	; (8019c74 <_svfiprintf_r+0x1e8>)
 8019b32:	f7e6 fb95 	bl	8000260 <memchr>
 8019b36:	9a04      	ldr	r2, [sp, #16]
 8019b38:	b9d8      	cbnz	r0, 8019b72 <_svfiprintf_r+0xe6>
 8019b3a:	06d0      	lsls	r0, r2, #27
 8019b3c:	bf44      	itt	mi
 8019b3e:	2320      	movmi	r3, #32
 8019b40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019b44:	0711      	lsls	r1, r2, #28
 8019b46:	bf44      	itt	mi
 8019b48:	232b      	movmi	r3, #43	; 0x2b
 8019b4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019b4e:	f89a 3000 	ldrb.w	r3, [sl]
 8019b52:	2b2a      	cmp	r3, #42	; 0x2a
 8019b54:	d015      	beq.n	8019b82 <_svfiprintf_r+0xf6>
 8019b56:	9a07      	ldr	r2, [sp, #28]
 8019b58:	4654      	mov	r4, sl
 8019b5a:	2000      	movs	r0, #0
 8019b5c:	f04f 0c0a 	mov.w	ip, #10
 8019b60:	4621      	mov	r1, r4
 8019b62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019b66:	3b30      	subs	r3, #48	; 0x30
 8019b68:	2b09      	cmp	r3, #9
 8019b6a:	d94d      	bls.n	8019c08 <_svfiprintf_r+0x17c>
 8019b6c:	b1b0      	cbz	r0, 8019b9c <_svfiprintf_r+0x110>
 8019b6e:	9207      	str	r2, [sp, #28]
 8019b70:	e014      	b.n	8019b9c <_svfiprintf_r+0x110>
 8019b72:	eba0 0308 	sub.w	r3, r0, r8
 8019b76:	fa09 f303 	lsl.w	r3, r9, r3
 8019b7a:	4313      	orrs	r3, r2
 8019b7c:	9304      	str	r3, [sp, #16]
 8019b7e:	46a2      	mov	sl, r4
 8019b80:	e7d2      	b.n	8019b28 <_svfiprintf_r+0x9c>
 8019b82:	9b03      	ldr	r3, [sp, #12]
 8019b84:	1d19      	adds	r1, r3, #4
 8019b86:	681b      	ldr	r3, [r3, #0]
 8019b88:	9103      	str	r1, [sp, #12]
 8019b8a:	2b00      	cmp	r3, #0
 8019b8c:	bfbb      	ittet	lt
 8019b8e:	425b      	neglt	r3, r3
 8019b90:	f042 0202 	orrlt.w	r2, r2, #2
 8019b94:	9307      	strge	r3, [sp, #28]
 8019b96:	9307      	strlt	r3, [sp, #28]
 8019b98:	bfb8      	it	lt
 8019b9a:	9204      	strlt	r2, [sp, #16]
 8019b9c:	7823      	ldrb	r3, [r4, #0]
 8019b9e:	2b2e      	cmp	r3, #46	; 0x2e
 8019ba0:	d10c      	bne.n	8019bbc <_svfiprintf_r+0x130>
 8019ba2:	7863      	ldrb	r3, [r4, #1]
 8019ba4:	2b2a      	cmp	r3, #42	; 0x2a
 8019ba6:	d134      	bne.n	8019c12 <_svfiprintf_r+0x186>
 8019ba8:	9b03      	ldr	r3, [sp, #12]
 8019baa:	1d1a      	adds	r2, r3, #4
 8019bac:	681b      	ldr	r3, [r3, #0]
 8019bae:	9203      	str	r2, [sp, #12]
 8019bb0:	2b00      	cmp	r3, #0
 8019bb2:	bfb8      	it	lt
 8019bb4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8019bb8:	3402      	adds	r4, #2
 8019bba:	9305      	str	r3, [sp, #20]
 8019bbc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8019c84 <_svfiprintf_r+0x1f8>
 8019bc0:	7821      	ldrb	r1, [r4, #0]
 8019bc2:	2203      	movs	r2, #3
 8019bc4:	4650      	mov	r0, sl
 8019bc6:	f7e6 fb4b 	bl	8000260 <memchr>
 8019bca:	b138      	cbz	r0, 8019bdc <_svfiprintf_r+0x150>
 8019bcc:	9b04      	ldr	r3, [sp, #16]
 8019bce:	eba0 000a 	sub.w	r0, r0, sl
 8019bd2:	2240      	movs	r2, #64	; 0x40
 8019bd4:	4082      	lsls	r2, r0
 8019bd6:	4313      	orrs	r3, r2
 8019bd8:	3401      	adds	r4, #1
 8019bda:	9304      	str	r3, [sp, #16]
 8019bdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019be0:	4825      	ldr	r0, [pc, #148]	; (8019c78 <_svfiprintf_r+0x1ec>)
 8019be2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019be6:	2206      	movs	r2, #6
 8019be8:	f7e6 fb3a 	bl	8000260 <memchr>
 8019bec:	2800      	cmp	r0, #0
 8019bee:	d038      	beq.n	8019c62 <_svfiprintf_r+0x1d6>
 8019bf0:	4b22      	ldr	r3, [pc, #136]	; (8019c7c <_svfiprintf_r+0x1f0>)
 8019bf2:	bb1b      	cbnz	r3, 8019c3c <_svfiprintf_r+0x1b0>
 8019bf4:	9b03      	ldr	r3, [sp, #12]
 8019bf6:	3307      	adds	r3, #7
 8019bf8:	f023 0307 	bic.w	r3, r3, #7
 8019bfc:	3308      	adds	r3, #8
 8019bfe:	9303      	str	r3, [sp, #12]
 8019c00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c02:	4433      	add	r3, r6
 8019c04:	9309      	str	r3, [sp, #36]	; 0x24
 8019c06:	e768      	b.n	8019ada <_svfiprintf_r+0x4e>
 8019c08:	fb0c 3202 	mla	r2, ip, r2, r3
 8019c0c:	460c      	mov	r4, r1
 8019c0e:	2001      	movs	r0, #1
 8019c10:	e7a6      	b.n	8019b60 <_svfiprintf_r+0xd4>
 8019c12:	2300      	movs	r3, #0
 8019c14:	3401      	adds	r4, #1
 8019c16:	9305      	str	r3, [sp, #20]
 8019c18:	4619      	mov	r1, r3
 8019c1a:	f04f 0c0a 	mov.w	ip, #10
 8019c1e:	4620      	mov	r0, r4
 8019c20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019c24:	3a30      	subs	r2, #48	; 0x30
 8019c26:	2a09      	cmp	r2, #9
 8019c28:	d903      	bls.n	8019c32 <_svfiprintf_r+0x1a6>
 8019c2a:	2b00      	cmp	r3, #0
 8019c2c:	d0c6      	beq.n	8019bbc <_svfiprintf_r+0x130>
 8019c2e:	9105      	str	r1, [sp, #20]
 8019c30:	e7c4      	b.n	8019bbc <_svfiprintf_r+0x130>
 8019c32:	fb0c 2101 	mla	r1, ip, r1, r2
 8019c36:	4604      	mov	r4, r0
 8019c38:	2301      	movs	r3, #1
 8019c3a:	e7f0      	b.n	8019c1e <_svfiprintf_r+0x192>
 8019c3c:	ab03      	add	r3, sp, #12
 8019c3e:	9300      	str	r3, [sp, #0]
 8019c40:	462a      	mov	r2, r5
 8019c42:	4b0f      	ldr	r3, [pc, #60]	; (8019c80 <_svfiprintf_r+0x1f4>)
 8019c44:	a904      	add	r1, sp, #16
 8019c46:	4638      	mov	r0, r7
 8019c48:	f3af 8000 	nop.w
 8019c4c:	1c42      	adds	r2, r0, #1
 8019c4e:	4606      	mov	r6, r0
 8019c50:	d1d6      	bne.n	8019c00 <_svfiprintf_r+0x174>
 8019c52:	89ab      	ldrh	r3, [r5, #12]
 8019c54:	065b      	lsls	r3, r3, #25
 8019c56:	f53f af2d 	bmi.w	8019ab4 <_svfiprintf_r+0x28>
 8019c5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019c5c:	b01d      	add	sp, #116	; 0x74
 8019c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c62:	ab03      	add	r3, sp, #12
 8019c64:	9300      	str	r3, [sp, #0]
 8019c66:	462a      	mov	r2, r5
 8019c68:	4b05      	ldr	r3, [pc, #20]	; (8019c80 <_svfiprintf_r+0x1f4>)
 8019c6a:	a904      	add	r1, sp, #16
 8019c6c:	4638      	mov	r0, r7
 8019c6e:	f000 f879 	bl	8019d64 <_printf_i>
 8019c72:	e7eb      	b.n	8019c4c <_svfiprintf_r+0x1c0>
 8019c74:	0801c050 	.word	0x0801c050
 8019c78:	0801c05a 	.word	0x0801c05a
 8019c7c:	00000000 	.word	0x00000000
 8019c80:	080199d9 	.word	0x080199d9
 8019c84:	0801c056 	.word	0x0801c056

08019c88 <_printf_common>:
 8019c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019c8c:	4616      	mov	r6, r2
 8019c8e:	4699      	mov	r9, r3
 8019c90:	688a      	ldr	r2, [r1, #8]
 8019c92:	690b      	ldr	r3, [r1, #16]
 8019c94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019c98:	4293      	cmp	r3, r2
 8019c9a:	bfb8      	it	lt
 8019c9c:	4613      	movlt	r3, r2
 8019c9e:	6033      	str	r3, [r6, #0]
 8019ca0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019ca4:	4607      	mov	r7, r0
 8019ca6:	460c      	mov	r4, r1
 8019ca8:	b10a      	cbz	r2, 8019cae <_printf_common+0x26>
 8019caa:	3301      	adds	r3, #1
 8019cac:	6033      	str	r3, [r6, #0]
 8019cae:	6823      	ldr	r3, [r4, #0]
 8019cb0:	0699      	lsls	r1, r3, #26
 8019cb2:	bf42      	ittt	mi
 8019cb4:	6833      	ldrmi	r3, [r6, #0]
 8019cb6:	3302      	addmi	r3, #2
 8019cb8:	6033      	strmi	r3, [r6, #0]
 8019cba:	6825      	ldr	r5, [r4, #0]
 8019cbc:	f015 0506 	ands.w	r5, r5, #6
 8019cc0:	d106      	bne.n	8019cd0 <_printf_common+0x48>
 8019cc2:	f104 0a19 	add.w	sl, r4, #25
 8019cc6:	68e3      	ldr	r3, [r4, #12]
 8019cc8:	6832      	ldr	r2, [r6, #0]
 8019cca:	1a9b      	subs	r3, r3, r2
 8019ccc:	42ab      	cmp	r3, r5
 8019cce:	dc26      	bgt.n	8019d1e <_printf_common+0x96>
 8019cd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019cd4:	1e13      	subs	r3, r2, #0
 8019cd6:	6822      	ldr	r2, [r4, #0]
 8019cd8:	bf18      	it	ne
 8019cda:	2301      	movne	r3, #1
 8019cdc:	0692      	lsls	r2, r2, #26
 8019cde:	d42b      	bmi.n	8019d38 <_printf_common+0xb0>
 8019ce0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019ce4:	4649      	mov	r1, r9
 8019ce6:	4638      	mov	r0, r7
 8019ce8:	47c0      	blx	r8
 8019cea:	3001      	adds	r0, #1
 8019cec:	d01e      	beq.n	8019d2c <_printf_common+0xa4>
 8019cee:	6823      	ldr	r3, [r4, #0]
 8019cf0:	6922      	ldr	r2, [r4, #16]
 8019cf2:	f003 0306 	and.w	r3, r3, #6
 8019cf6:	2b04      	cmp	r3, #4
 8019cf8:	bf02      	ittt	eq
 8019cfa:	68e5      	ldreq	r5, [r4, #12]
 8019cfc:	6833      	ldreq	r3, [r6, #0]
 8019cfe:	1aed      	subeq	r5, r5, r3
 8019d00:	68a3      	ldr	r3, [r4, #8]
 8019d02:	bf0c      	ite	eq
 8019d04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019d08:	2500      	movne	r5, #0
 8019d0a:	4293      	cmp	r3, r2
 8019d0c:	bfc4      	itt	gt
 8019d0e:	1a9b      	subgt	r3, r3, r2
 8019d10:	18ed      	addgt	r5, r5, r3
 8019d12:	2600      	movs	r6, #0
 8019d14:	341a      	adds	r4, #26
 8019d16:	42b5      	cmp	r5, r6
 8019d18:	d11a      	bne.n	8019d50 <_printf_common+0xc8>
 8019d1a:	2000      	movs	r0, #0
 8019d1c:	e008      	b.n	8019d30 <_printf_common+0xa8>
 8019d1e:	2301      	movs	r3, #1
 8019d20:	4652      	mov	r2, sl
 8019d22:	4649      	mov	r1, r9
 8019d24:	4638      	mov	r0, r7
 8019d26:	47c0      	blx	r8
 8019d28:	3001      	adds	r0, #1
 8019d2a:	d103      	bne.n	8019d34 <_printf_common+0xac>
 8019d2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019d34:	3501      	adds	r5, #1
 8019d36:	e7c6      	b.n	8019cc6 <_printf_common+0x3e>
 8019d38:	18e1      	adds	r1, r4, r3
 8019d3a:	1c5a      	adds	r2, r3, #1
 8019d3c:	2030      	movs	r0, #48	; 0x30
 8019d3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019d42:	4422      	add	r2, r4
 8019d44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019d48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019d4c:	3302      	adds	r3, #2
 8019d4e:	e7c7      	b.n	8019ce0 <_printf_common+0x58>
 8019d50:	2301      	movs	r3, #1
 8019d52:	4622      	mov	r2, r4
 8019d54:	4649      	mov	r1, r9
 8019d56:	4638      	mov	r0, r7
 8019d58:	47c0      	blx	r8
 8019d5a:	3001      	adds	r0, #1
 8019d5c:	d0e6      	beq.n	8019d2c <_printf_common+0xa4>
 8019d5e:	3601      	adds	r6, #1
 8019d60:	e7d9      	b.n	8019d16 <_printf_common+0x8e>
	...

08019d64 <_printf_i>:
 8019d64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019d68:	7e0f      	ldrb	r7, [r1, #24]
 8019d6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019d6c:	2f78      	cmp	r7, #120	; 0x78
 8019d6e:	4691      	mov	r9, r2
 8019d70:	4680      	mov	r8, r0
 8019d72:	460c      	mov	r4, r1
 8019d74:	469a      	mov	sl, r3
 8019d76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019d7a:	d807      	bhi.n	8019d8c <_printf_i+0x28>
 8019d7c:	2f62      	cmp	r7, #98	; 0x62
 8019d7e:	d80a      	bhi.n	8019d96 <_printf_i+0x32>
 8019d80:	2f00      	cmp	r7, #0
 8019d82:	f000 80d4 	beq.w	8019f2e <_printf_i+0x1ca>
 8019d86:	2f58      	cmp	r7, #88	; 0x58
 8019d88:	f000 80c0 	beq.w	8019f0c <_printf_i+0x1a8>
 8019d8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019d90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019d94:	e03a      	b.n	8019e0c <_printf_i+0xa8>
 8019d96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019d9a:	2b15      	cmp	r3, #21
 8019d9c:	d8f6      	bhi.n	8019d8c <_printf_i+0x28>
 8019d9e:	a101      	add	r1, pc, #4	; (adr r1, 8019da4 <_printf_i+0x40>)
 8019da0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019da4:	08019dfd 	.word	0x08019dfd
 8019da8:	08019e11 	.word	0x08019e11
 8019dac:	08019d8d 	.word	0x08019d8d
 8019db0:	08019d8d 	.word	0x08019d8d
 8019db4:	08019d8d 	.word	0x08019d8d
 8019db8:	08019d8d 	.word	0x08019d8d
 8019dbc:	08019e11 	.word	0x08019e11
 8019dc0:	08019d8d 	.word	0x08019d8d
 8019dc4:	08019d8d 	.word	0x08019d8d
 8019dc8:	08019d8d 	.word	0x08019d8d
 8019dcc:	08019d8d 	.word	0x08019d8d
 8019dd0:	08019f15 	.word	0x08019f15
 8019dd4:	08019e3d 	.word	0x08019e3d
 8019dd8:	08019ecf 	.word	0x08019ecf
 8019ddc:	08019d8d 	.word	0x08019d8d
 8019de0:	08019d8d 	.word	0x08019d8d
 8019de4:	08019f37 	.word	0x08019f37
 8019de8:	08019d8d 	.word	0x08019d8d
 8019dec:	08019e3d 	.word	0x08019e3d
 8019df0:	08019d8d 	.word	0x08019d8d
 8019df4:	08019d8d 	.word	0x08019d8d
 8019df8:	08019ed7 	.word	0x08019ed7
 8019dfc:	682b      	ldr	r3, [r5, #0]
 8019dfe:	1d1a      	adds	r2, r3, #4
 8019e00:	681b      	ldr	r3, [r3, #0]
 8019e02:	602a      	str	r2, [r5, #0]
 8019e04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019e08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019e0c:	2301      	movs	r3, #1
 8019e0e:	e09f      	b.n	8019f50 <_printf_i+0x1ec>
 8019e10:	6820      	ldr	r0, [r4, #0]
 8019e12:	682b      	ldr	r3, [r5, #0]
 8019e14:	0607      	lsls	r7, r0, #24
 8019e16:	f103 0104 	add.w	r1, r3, #4
 8019e1a:	6029      	str	r1, [r5, #0]
 8019e1c:	d501      	bpl.n	8019e22 <_printf_i+0xbe>
 8019e1e:	681e      	ldr	r6, [r3, #0]
 8019e20:	e003      	b.n	8019e2a <_printf_i+0xc6>
 8019e22:	0646      	lsls	r6, r0, #25
 8019e24:	d5fb      	bpl.n	8019e1e <_printf_i+0xba>
 8019e26:	f9b3 6000 	ldrsh.w	r6, [r3]
 8019e2a:	2e00      	cmp	r6, #0
 8019e2c:	da03      	bge.n	8019e36 <_printf_i+0xd2>
 8019e2e:	232d      	movs	r3, #45	; 0x2d
 8019e30:	4276      	negs	r6, r6
 8019e32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019e36:	485a      	ldr	r0, [pc, #360]	; (8019fa0 <_printf_i+0x23c>)
 8019e38:	230a      	movs	r3, #10
 8019e3a:	e012      	b.n	8019e62 <_printf_i+0xfe>
 8019e3c:	682b      	ldr	r3, [r5, #0]
 8019e3e:	6820      	ldr	r0, [r4, #0]
 8019e40:	1d19      	adds	r1, r3, #4
 8019e42:	6029      	str	r1, [r5, #0]
 8019e44:	0605      	lsls	r5, r0, #24
 8019e46:	d501      	bpl.n	8019e4c <_printf_i+0xe8>
 8019e48:	681e      	ldr	r6, [r3, #0]
 8019e4a:	e002      	b.n	8019e52 <_printf_i+0xee>
 8019e4c:	0641      	lsls	r1, r0, #25
 8019e4e:	d5fb      	bpl.n	8019e48 <_printf_i+0xe4>
 8019e50:	881e      	ldrh	r6, [r3, #0]
 8019e52:	4853      	ldr	r0, [pc, #332]	; (8019fa0 <_printf_i+0x23c>)
 8019e54:	2f6f      	cmp	r7, #111	; 0x6f
 8019e56:	bf0c      	ite	eq
 8019e58:	2308      	moveq	r3, #8
 8019e5a:	230a      	movne	r3, #10
 8019e5c:	2100      	movs	r1, #0
 8019e5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019e62:	6865      	ldr	r5, [r4, #4]
 8019e64:	60a5      	str	r5, [r4, #8]
 8019e66:	2d00      	cmp	r5, #0
 8019e68:	bfa2      	ittt	ge
 8019e6a:	6821      	ldrge	r1, [r4, #0]
 8019e6c:	f021 0104 	bicge.w	r1, r1, #4
 8019e70:	6021      	strge	r1, [r4, #0]
 8019e72:	b90e      	cbnz	r6, 8019e78 <_printf_i+0x114>
 8019e74:	2d00      	cmp	r5, #0
 8019e76:	d04b      	beq.n	8019f10 <_printf_i+0x1ac>
 8019e78:	4615      	mov	r5, r2
 8019e7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8019e7e:	fb03 6711 	mls	r7, r3, r1, r6
 8019e82:	5dc7      	ldrb	r7, [r0, r7]
 8019e84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019e88:	4637      	mov	r7, r6
 8019e8a:	42bb      	cmp	r3, r7
 8019e8c:	460e      	mov	r6, r1
 8019e8e:	d9f4      	bls.n	8019e7a <_printf_i+0x116>
 8019e90:	2b08      	cmp	r3, #8
 8019e92:	d10b      	bne.n	8019eac <_printf_i+0x148>
 8019e94:	6823      	ldr	r3, [r4, #0]
 8019e96:	07de      	lsls	r6, r3, #31
 8019e98:	d508      	bpl.n	8019eac <_printf_i+0x148>
 8019e9a:	6923      	ldr	r3, [r4, #16]
 8019e9c:	6861      	ldr	r1, [r4, #4]
 8019e9e:	4299      	cmp	r1, r3
 8019ea0:	bfde      	ittt	le
 8019ea2:	2330      	movle	r3, #48	; 0x30
 8019ea4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019ea8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8019eac:	1b52      	subs	r2, r2, r5
 8019eae:	6122      	str	r2, [r4, #16]
 8019eb0:	f8cd a000 	str.w	sl, [sp]
 8019eb4:	464b      	mov	r3, r9
 8019eb6:	aa03      	add	r2, sp, #12
 8019eb8:	4621      	mov	r1, r4
 8019eba:	4640      	mov	r0, r8
 8019ebc:	f7ff fee4 	bl	8019c88 <_printf_common>
 8019ec0:	3001      	adds	r0, #1
 8019ec2:	d14a      	bne.n	8019f5a <_printf_i+0x1f6>
 8019ec4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019ec8:	b004      	add	sp, #16
 8019eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ece:	6823      	ldr	r3, [r4, #0]
 8019ed0:	f043 0320 	orr.w	r3, r3, #32
 8019ed4:	6023      	str	r3, [r4, #0]
 8019ed6:	4833      	ldr	r0, [pc, #204]	; (8019fa4 <_printf_i+0x240>)
 8019ed8:	2778      	movs	r7, #120	; 0x78
 8019eda:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8019ede:	6823      	ldr	r3, [r4, #0]
 8019ee0:	6829      	ldr	r1, [r5, #0]
 8019ee2:	061f      	lsls	r7, r3, #24
 8019ee4:	f851 6b04 	ldr.w	r6, [r1], #4
 8019ee8:	d402      	bmi.n	8019ef0 <_printf_i+0x18c>
 8019eea:	065f      	lsls	r7, r3, #25
 8019eec:	bf48      	it	mi
 8019eee:	b2b6      	uxthmi	r6, r6
 8019ef0:	07df      	lsls	r7, r3, #31
 8019ef2:	bf48      	it	mi
 8019ef4:	f043 0320 	orrmi.w	r3, r3, #32
 8019ef8:	6029      	str	r1, [r5, #0]
 8019efa:	bf48      	it	mi
 8019efc:	6023      	strmi	r3, [r4, #0]
 8019efe:	b91e      	cbnz	r6, 8019f08 <_printf_i+0x1a4>
 8019f00:	6823      	ldr	r3, [r4, #0]
 8019f02:	f023 0320 	bic.w	r3, r3, #32
 8019f06:	6023      	str	r3, [r4, #0]
 8019f08:	2310      	movs	r3, #16
 8019f0a:	e7a7      	b.n	8019e5c <_printf_i+0xf8>
 8019f0c:	4824      	ldr	r0, [pc, #144]	; (8019fa0 <_printf_i+0x23c>)
 8019f0e:	e7e4      	b.n	8019eda <_printf_i+0x176>
 8019f10:	4615      	mov	r5, r2
 8019f12:	e7bd      	b.n	8019e90 <_printf_i+0x12c>
 8019f14:	682b      	ldr	r3, [r5, #0]
 8019f16:	6826      	ldr	r6, [r4, #0]
 8019f18:	6961      	ldr	r1, [r4, #20]
 8019f1a:	1d18      	adds	r0, r3, #4
 8019f1c:	6028      	str	r0, [r5, #0]
 8019f1e:	0635      	lsls	r5, r6, #24
 8019f20:	681b      	ldr	r3, [r3, #0]
 8019f22:	d501      	bpl.n	8019f28 <_printf_i+0x1c4>
 8019f24:	6019      	str	r1, [r3, #0]
 8019f26:	e002      	b.n	8019f2e <_printf_i+0x1ca>
 8019f28:	0670      	lsls	r0, r6, #25
 8019f2a:	d5fb      	bpl.n	8019f24 <_printf_i+0x1c0>
 8019f2c:	8019      	strh	r1, [r3, #0]
 8019f2e:	2300      	movs	r3, #0
 8019f30:	6123      	str	r3, [r4, #16]
 8019f32:	4615      	mov	r5, r2
 8019f34:	e7bc      	b.n	8019eb0 <_printf_i+0x14c>
 8019f36:	682b      	ldr	r3, [r5, #0]
 8019f38:	1d1a      	adds	r2, r3, #4
 8019f3a:	602a      	str	r2, [r5, #0]
 8019f3c:	681d      	ldr	r5, [r3, #0]
 8019f3e:	6862      	ldr	r2, [r4, #4]
 8019f40:	2100      	movs	r1, #0
 8019f42:	4628      	mov	r0, r5
 8019f44:	f7e6 f98c 	bl	8000260 <memchr>
 8019f48:	b108      	cbz	r0, 8019f4e <_printf_i+0x1ea>
 8019f4a:	1b40      	subs	r0, r0, r5
 8019f4c:	6060      	str	r0, [r4, #4]
 8019f4e:	6863      	ldr	r3, [r4, #4]
 8019f50:	6123      	str	r3, [r4, #16]
 8019f52:	2300      	movs	r3, #0
 8019f54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019f58:	e7aa      	b.n	8019eb0 <_printf_i+0x14c>
 8019f5a:	6923      	ldr	r3, [r4, #16]
 8019f5c:	462a      	mov	r2, r5
 8019f5e:	4649      	mov	r1, r9
 8019f60:	4640      	mov	r0, r8
 8019f62:	47d0      	blx	sl
 8019f64:	3001      	adds	r0, #1
 8019f66:	d0ad      	beq.n	8019ec4 <_printf_i+0x160>
 8019f68:	6823      	ldr	r3, [r4, #0]
 8019f6a:	079b      	lsls	r3, r3, #30
 8019f6c:	d413      	bmi.n	8019f96 <_printf_i+0x232>
 8019f6e:	68e0      	ldr	r0, [r4, #12]
 8019f70:	9b03      	ldr	r3, [sp, #12]
 8019f72:	4298      	cmp	r0, r3
 8019f74:	bfb8      	it	lt
 8019f76:	4618      	movlt	r0, r3
 8019f78:	e7a6      	b.n	8019ec8 <_printf_i+0x164>
 8019f7a:	2301      	movs	r3, #1
 8019f7c:	4632      	mov	r2, r6
 8019f7e:	4649      	mov	r1, r9
 8019f80:	4640      	mov	r0, r8
 8019f82:	47d0      	blx	sl
 8019f84:	3001      	adds	r0, #1
 8019f86:	d09d      	beq.n	8019ec4 <_printf_i+0x160>
 8019f88:	3501      	adds	r5, #1
 8019f8a:	68e3      	ldr	r3, [r4, #12]
 8019f8c:	9903      	ldr	r1, [sp, #12]
 8019f8e:	1a5b      	subs	r3, r3, r1
 8019f90:	42ab      	cmp	r3, r5
 8019f92:	dcf2      	bgt.n	8019f7a <_printf_i+0x216>
 8019f94:	e7eb      	b.n	8019f6e <_printf_i+0x20a>
 8019f96:	2500      	movs	r5, #0
 8019f98:	f104 0619 	add.w	r6, r4, #25
 8019f9c:	e7f5      	b.n	8019f8a <_printf_i+0x226>
 8019f9e:	bf00      	nop
 8019fa0:	0801c061 	.word	0x0801c061
 8019fa4:	0801c072 	.word	0x0801c072

08019fa8 <__sflush_r>:
 8019fa8:	898a      	ldrh	r2, [r1, #12]
 8019faa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019fae:	4605      	mov	r5, r0
 8019fb0:	0710      	lsls	r0, r2, #28
 8019fb2:	460c      	mov	r4, r1
 8019fb4:	d458      	bmi.n	801a068 <__sflush_r+0xc0>
 8019fb6:	684b      	ldr	r3, [r1, #4]
 8019fb8:	2b00      	cmp	r3, #0
 8019fba:	dc05      	bgt.n	8019fc8 <__sflush_r+0x20>
 8019fbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019fbe:	2b00      	cmp	r3, #0
 8019fc0:	dc02      	bgt.n	8019fc8 <__sflush_r+0x20>
 8019fc2:	2000      	movs	r0, #0
 8019fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019fc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019fca:	2e00      	cmp	r6, #0
 8019fcc:	d0f9      	beq.n	8019fc2 <__sflush_r+0x1a>
 8019fce:	2300      	movs	r3, #0
 8019fd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019fd4:	682f      	ldr	r7, [r5, #0]
 8019fd6:	6a21      	ldr	r1, [r4, #32]
 8019fd8:	602b      	str	r3, [r5, #0]
 8019fda:	d032      	beq.n	801a042 <__sflush_r+0x9a>
 8019fdc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019fde:	89a3      	ldrh	r3, [r4, #12]
 8019fe0:	075a      	lsls	r2, r3, #29
 8019fe2:	d505      	bpl.n	8019ff0 <__sflush_r+0x48>
 8019fe4:	6863      	ldr	r3, [r4, #4]
 8019fe6:	1ac0      	subs	r0, r0, r3
 8019fe8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019fea:	b10b      	cbz	r3, 8019ff0 <__sflush_r+0x48>
 8019fec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019fee:	1ac0      	subs	r0, r0, r3
 8019ff0:	2300      	movs	r3, #0
 8019ff2:	4602      	mov	r2, r0
 8019ff4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019ff6:	6a21      	ldr	r1, [r4, #32]
 8019ff8:	4628      	mov	r0, r5
 8019ffa:	47b0      	blx	r6
 8019ffc:	1c43      	adds	r3, r0, #1
 8019ffe:	89a3      	ldrh	r3, [r4, #12]
 801a000:	d106      	bne.n	801a010 <__sflush_r+0x68>
 801a002:	6829      	ldr	r1, [r5, #0]
 801a004:	291d      	cmp	r1, #29
 801a006:	d82b      	bhi.n	801a060 <__sflush_r+0xb8>
 801a008:	4a29      	ldr	r2, [pc, #164]	; (801a0b0 <__sflush_r+0x108>)
 801a00a:	410a      	asrs	r2, r1
 801a00c:	07d6      	lsls	r6, r2, #31
 801a00e:	d427      	bmi.n	801a060 <__sflush_r+0xb8>
 801a010:	2200      	movs	r2, #0
 801a012:	6062      	str	r2, [r4, #4]
 801a014:	04d9      	lsls	r1, r3, #19
 801a016:	6922      	ldr	r2, [r4, #16]
 801a018:	6022      	str	r2, [r4, #0]
 801a01a:	d504      	bpl.n	801a026 <__sflush_r+0x7e>
 801a01c:	1c42      	adds	r2, r0, #1
 801a01e:	d101      	bne.n	801a024 <__sflush_r+0x7c>
 801a020:	682b      	ldr	r3, [r5, #0]
 801a022:	b903      	cbnz	r3, 801a026 <__sflush_r+0x7e>
 801a024:	6560      	str	r0, [r4, #84]	; 0x54
 801a026:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a028:	602f      	str	r7, [r5, #0]
 801a02a:	2900      	cmp	r1, #0
 801a02c:	d0c9      	beq.n	8019fc2 <__sflush_r+0x1a>
 801a02e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a032:	4299      	cmp	r1, r3
 801a034:	d002      	beq.n	801a03c <__sflush_r+0x94>
 801a036:	4628      	mov	r0, r5
 801a038:	f7ff fc7a 	bl	8019930 <_free_r>
 801a03c:	2000      	movs	r0, #0
 801a03e:	6360      	str	r0, [r4, #52]	; 0x34
 801a040:	e7c0      	b.n	8019fc4 <__sflush_r+0x1c>
 801a042:	2301      	movs	r3, #1
 801a044:	4628      	mov	r0, r5
 801a046:	47b0      	blx	r6
 801a048:	1c41      	adds	r1, r0, #1
 801a04a:	d1c8      	bne.n	8019fde <__sflush_r+0x36>
 801a04c:	682b      	ldr	r3, [r5, #0]
 801a04e:	2b00      	cmp	r3, #0
 801a050:	d0c5      	beq.n	8019fde <__sflush_r+0x36>
 801a052:	2b1d      	cmp	r3, #29
 801a054:	d001      	beq.n	801a05a <__sflush_r+0xb2>
 801a056:	2b16      	cmp	r3, #22
 801a058:	d101      	bne.n	801a05e <__sflush_r+0xb6>
 801a05a:	602f      	str	r7, [r5, #0]
 801a05c:	e7b1      	b.n	8019fc2 <__sflush_r+0x1a>
 801a05e:	89a3      	ldrh	r3, [r4, #12]
 801a060:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a064:	81a3      	strh	r3, [r4, #12]
 801a066:	e7ad      	b.n	8019fc4 <__sflush_r+0x1c>
 801a068:	690f      	ldr	r7, [r1, #16]
 801a06a:	2f00      	cmp	r7, #0
 801a06c:	d0a9      	beq.n	8019fc2 <__sflush_r+0x1a>
 801a06e:	0793      	lsls	r3, r2, #30
 801a070:	680e      	ldr	r6, [r1, #0]
 801a072:	bf08      	it	eq
 801a074:	694b      	ldreq	r3, [r1, #20]
 801a076:	600f      	str	r7, [r1, #0]
 801a078:	bf18      	it	ne
 801a07a:	2300      	movne	r3, #0
 801a07c:	eba6 0807 	sub.w	r8, r6, r7
 801a080:	608b      	str	r3, [r1, #8]
 801a082:	f1b8 0f00 	cmp.w	r8, #0
 801a086:	dd9c      	ble.n	8019fc2 <__sflush_r+0x1a>
 801a088:	6a21      	ldr	r1, [r4, #32]
 801a08a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a08c:	4643      	mov	r3, r8
 801a08e:	463a      	mov	r2, r7
 801a090:	4628      	mov	r0, r5
 801a092:	47b0      	blx	r6
 801a094:	2800      	cmp	r0, #0
 801a096:	dc06      	bgt.n	801a0a6 <__sflush_r+0xfe>
 801a098:	89a3      	ldrh	r3, [r4, #12]
 801a09a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a09e:	81a3      	strh	r3, [r4, #12]
 801a0a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a0a4:	e78e      	b.n	8019fc4 <__sflush_r+0x1c>
 801a0a6:	4407      	add	r7, r0
 801a0a8:	eba8 0800 	sub.w	r8, r8, r0
 801a0ac:	e7e9      	b.n	801a082 <__sflush_r+0xda>
 801a0ae:	bf00      	nop
 801a0b0:	dfbffffe 	.word	0xdfbffffe

0801a0b4 <_fflush_r>:
 801a0b4:	b538      	push	{r3, r4, r5, lr}
 801a0b6:	690b      	ldr	r3, [r1, #16]
 801a0b8:	4605      	mov	r5, r0
 801a0ba:	460c      	mov	r4, r1
 801a0bc:	b913      	cbnz	r3, 801a0c4 <_fflush_r+0x10>
 801a0be:	2500      	movs	r5, #0
 801a0c0:	4628      	mov	r0, r5
 801a0c2:	bd38      	pop	{r3, r4, r5, pc}
 801a0c4:	b118      	cbz	r0, 801a0ce <_fflush_r+0x1a>
 801a0c6:	6a03      	ldr	r3, [r0, #32]
 801a0c8:	b90b      	cbnz	r3, 801a0ce <_fflush_r+0x1a>
 801a0ca:	f7ff f973 	bl	80193b4 <__sinit>
 801a0ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a0d2:	2b00      	cmp	r3, #0
 801a0d4:	d0f3      	beq.n	801a0be <_fflush_r+0xa>
 801a0d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a0d8:	07d0      	lsls	r0, r2, #31
 801a0da:	d404      	bmi.n	801a0e6 <_fflush_r+0x32>
 801a0dc:	0599      	lsls	r1, r3, #22
 801a0de:	d402      	bmi.n	801a0e6 <_fflush_r+0x32>
 801a0e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a0e2:	f7ff fbe2 	bl	80198aa <__retarget_lock_acquire_recursive>
 801a0e6:	4628      	mov	r0, r5
 801a0e8:	4621      	mov	r1, r4
 801a0ea:	f7ff ff5d 	bl	8019fa8 <__sflush_r>
 801a0ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a0f0:	07da      	lsls	r2, r3, #31
 801a0f2:	4605      	mov	r5, r0
 801a0f4:	d4e4      	bmi.n	801a0c0 <_fflush_r+0xc>
 801a0f6:	89a3      	ldrh	r3, [r4, #12]
 801a0f8:	059b      	lsls	r3, r3, #22
 801a0fa:	d4e1      	bmi.n	801a0c0 <_fflush_r+0xc>
 801a0fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a0fe:	f7ff fbd5 	bl	80198ac <__retarget_lock_release_recursive>
 801a102:	e7dd      	b.n	801a0c0 <_fflush_r+0xc>

0801a104 <fiprintf>:
 801a104:	b40e      	push	{r1, r2, r3}
 801a106:	b503      	push	{r0, r1, lr}
 801a108:	4601      	mov	r1, r0
 801a10a:	ab03      	add	r3, sp, #12
 801a10c:	4805      	ldr	r0, [pc, #20]	; (801a124 <fiprintf+0x20>)
 801a10e:	f853 2b04 	ldr.w	r2, [r3], #4
 801a112:	6800      	ldr	r0, [r0, #0]
 801a114:	9301      	str	r3, [sp, #4]
 801a116:	f000 f831 	bl	801a17c <_vfiprintf_r>
 801a11a:	b002      	add	sp, #8
 801a11c:	f85d eb04 	ldr.w	lr, [sp], #4
 801a120:	b003      	add	sp, #12
 801a122:	4770      	bx	lr
 801a124:	20002138 	.word	0x20002138

0801a128 <__sfputc_r>:
 801a128:	6893      	ldr	r3, [r2, #8]
 801a12a:	3b01      	subs	r3, #1
 801a12c:	2b00      	cmp	r3, #0
 801a12e:	b410      	push	{r4}
 801a130:	6093      	str	r3, [r2, #8]
 801a132:	da08      	bge.n	801a146 <__sfputc_r+0x1e>
 801a134:	6994      	ldr	r4, [r2, #24]
 801a136:	42a3      	cmp	r3, r4
 801a138:	db01      	blt.n	801a13e <__sfputc_r+0x16>
 801a13a:	290a      	cmp	r1, #10
 801a13c:	d103      	bne.n	801a146 <__sfputc_r+0x1e>
 801a13e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a142:	f000 b935 	b.w	801a3b0 <__swbuf_r>
 801a146:	6813      	ldr	r3, [r2, #0]
 801a148:	1c58      	adds	r0, r3, #1
 801a14a:	6010      	str	r0, [r2, #0]
 801a14c:	7019      	strb	r1, [r3, #0]
 801a14e:	4608      	mov	r0, r1
 801a150:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a154:	4770      	bx	lr

0801a156 <__sfputs_r>:
 801a156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a158:	4606      	mov	r6, r0
 801a15a:	460f      	mov	r7, r1
 801a15c:	4614      	mov	r4, r2
 801a15e:	18d5      	adds	r5, r2, r3
 801a160:	42ac      	cmp	r4, r5
 801a162:	d101      	bne.n	801a168 <__sfputs_r+0x12>
 801a164:	2000      	movs	r0, #0
 801a166:	e007      	b.n	801a178 <__sfputs_r+0x22>
 801a168:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a16c:	463a      	mov	r2, r7
 801a16e:	4630      	mov	r0, r6
 801a170:	f7ff ffda 	bl	801a128 <__sfputc_r>
 801a174:	1c43      	adds	r3, r0, #1
 801a176:	d1f3      	bne.n	801a160 <__sfputs_r+0xa>
 801a178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a17c <_vfiprintf_r>:
 801a17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a180:	460d      	mov	r5, r1
 801a182:	b09d      	sub	sp, #116	; 0x74
 801a184:	4614      	mov	r4, r2
 801a186:	4698      	mov	r8, r3
 801a188:	4606      	mov	r6, r0
 801a18a:	b118      	cbz	r0, 801a194 <_vfiprintf_r+0x18>
 801a18c:	6a03      	ldr	r3, [r0, #32]
 801a18e:	b90b      	cbnz	r3, 801a194 <_vfiprintf_r+0x18>
 801a190:	f7ff f910 	bl	80193b4 <__sinit>
 801a194:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a196:	07d9      	lsls	r1, r3, #31
 801a198:	d405      	bmi.n	801a1a6 <_vfiprintf_r+0x2a>
 801a19a:	89ab      	ldrh	r3, [r5, #12]
 801a19c:	059a      	lsls	r2, r3, #22
 801a19e:	d402      	bmi.n	801a1a6 <_vfiprintf_r+0x2a>
 801a1a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a1a2:	f7ff fb82 	bl	80198aa <__retarget_lock_acquire_recursive>
 801a1a6:	89ab      	ldrh	r3, [r5, #12]
 801a1a8:	071b      	lsls	r3, r3, #28
 801a1aa:	d501      	bpl.n	801a1b0 <_vfiprintf_r+0x34>
 801a1ac:	692b      	ldr	r3, [r5, #16]
 801a1ae:	b99b      	cbnz	r3, 801a1d8 <_vfiprintf_r+0x5c>
 801a1b0:	4629      	mov	r1, r5
 801a1b2:	4630      	mov	r0, r6
 801a1b4:	f000 f93a 	bl	801a42c <__swsetup_r>
 801a1b8:	b170      	cbz	r0, 801a1d8 <_vfiprintf_r+0x5c>
 801a1ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a1bc:	07dc      	lsls	r4, r3, #31
 801a1be:	d504      	bpl.n	801a1ca <_vfiprintf_r+0x4e>
 801a1c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a1c4:	b01d      	add	sp, #116	; 0x74
 801a1c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1ca:	89ab      	ldrh	r3, [r5, #12]
 801a1cc:	0598      	lsls	r0, r3, #22
 801a1ce:	d4f7      	bmi.n	801a1c0 <_vfiprintf_r+0x44>
 801a1d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a1d2:	f7ff fb6b 	bl	80198ac <__retarget_lock_release_recursive>
 801a1d6:	e7f3      	b.n	801a1c0 <_vfiprintf_r+0x44>
 801a1d8:	2300      	movs	r3, #0
 801a1da:	9309      	str	r3, [sp, #36]	; 0x24
 801a1dc:	2320      	movs	r3, #32
 801a1de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a1e2:	f8cd 800c 	str.w	r8, [sp, #12]
 801a1e6:	2330      	movs	r3, #48	; 0x30
 801a1e8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801a39c <_vfiprintf_r+0x220>
 801a1ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a1f0:	f04f 0901 	mov.w	r9, #1
 801a1f4:	4623      	mov	r3, r4
 801a1f6:	469a      	mov	sl, r3
 801a1f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a1fc:	b10a      	cbz	r2, 801a202 <_vfiprintf_r+0x86>
 801a1fe:	2a25      	cmp	r2, #37	; 0x25
 801a200:	d1f9      	bne.n	801a1f6 <_vfiprintf_r+0x7a>
 801a202:	ebba 0b04 	subs.w	fp, sl, r4
 801a206:	d00b      	beq.n	801a220 <_vfiprintf_r+0xa4>
 801a208:	465b      	mov	r3, fp
 801a20a:	4622      	mov	r2, r4
 801a20c:	4629      	mov	r1, r5
 801a20e:	4630      	mov	r0, r6
 801a210:	f7ff ffa1 	bl	801a156 <__sfputs_r>
 801a214:	3001      	adds	r0, #1
 801a216:	f000 80a9 	beq.w	801a36c <_vfiprintf_r+0x1f0>
 801a21a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a21c:	445a      	add	r2, fp
 801a21e:	9209      	str	r2, [sp, #36]	; 0x24
 801a220:	f89a 3000 	ldrb.w	r3, [sl]
 801a224:	2b00      	cmp	r3, #0
 801a226:	f000 80a1 	beq.w	801a36c <_vfiprintf_r+0x1f0>
 801a22a:	2300      	movs	r3, #0
 801a22c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a230:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a234:	f10a 0a01 	add.w	sl, sl, #1
 801a238:	9304      	str	r3, [sp, #16]
 801a23a:	9307      	str	r3, [sp, #28]
 801a23c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a240:	931a      	str	r3, [sp, #104]	; 0x68
 801a242:	4654      	mov	r4, sl
 801a244:	2205      	movs	r2, #5
 801a246:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a24a:	4854      	ldr	r0, [pc, #336]	; (801a39c <_vfiprintf_r+0x220>)
 801a24c:	f7e6 f808 	bl	8000260 <memchr>
 801a250:	9a04      	ldr	r2, [sp, #16]
 801a252:	b9d8      	cbnz	r0, 801a28c <_vfiprintf_r+0x110>
 801a254:	06d1      	lsls	r1, r2, #27
 801a256:	bf44      	itt	mi
 801a258:	2320      	movmi	r3, #32
 801a25a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a25e:	0713      	lsls	r3, r2, #28
 801a260:	bf44      	itt	mi
 801a262:	232b      	movmi	r3, #43	; 0x2b
 801a264:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a268:	f89a 3000 	ldrb.w	r3, [sl]
 801a26c:	2b2a      	cmp	r3, #42	; 0x2a
 801a26e:	d015      	beq.n	801a29c <_vfiprintf_r+0x120>
 801a270:	9a07      	ldr	r2, [sp, #28]
 801a272:	4654      	mov	r4, sl
 801a274:	2000      	movs	r0, #0
 801a276:	f04f 0c0a 	mov.w	ip, #10
 801a27a:	4621      	mov	r1, r4
 801a27c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a280:	3b30      	subs	r3, #48	; 0x30
 801a282:	2b09      	cmp	r3, #9
 801a284:	d94d      	bls.n	801a322 <_vfiprintf_r+0x1a6>
 801a286:	b1b0      	cbz	r0, 801a2b6 <_vfiprintf_r+0x13a>
 801a288:	9207      	str	r2, [sp, #28]
 801a28a:	e014      	b.n	801a2b6 <_vfiprintf_r+0x13a>
 801a28c:	eba0 0308 	sub.w	r3, r0, r8
 801a290:	fa09 f303 	lsl.w	r3, r9, r3
 801a294:	4313      	orrs	r3, r2
 801a296:	9304      	str	r3, [sp, #16]
 801a298:	46a2      	mov	sl, r4
 801a29a:	e7d2      	b.n	801a242 <_vfiprintf_r+0xc6>
 801a29c:	9b03      	ldr	r3, [sp, #12]
 801a29e:	1d19      	adds	r1, r3, #4
 801a2a0:	681b      	ldr	r3, [r3, #0]
 801a2a2:	9103      	str	r1, [sp, #12]
 801a2a4:	2b00      	cmp	r3, #0
 801a2a6:	bfbb      	ittet	lt
 801a2a8:	425b      	neglt	r3, r3
 801a2aa:	f042 0202 	orrlt.w	r2, r2, #2
 801a2ae:	9307      	strge	r3, [sp, #28]
 801a2b0:	9307      	strlt	r3, [sp, #28]
 801a2b2:	bfb8      	it	lt
 801a2b4:	9204      	strlt	r2, [sp, #16]
 801a2b6:	7823      	ldrb	r3, [r4, #0]
 801a2b8:	2b2e      	cmp	r3, #46	; 0x2e
 801a2ba:	d10c      	bne.n	801a2d6 <_vfiprintf_r+0x15a>
 801a2bc:	7863      	ldrb	r3, [r4, #1]
 801a2be:	2b2a      	cmp	r3, #42	; 0x2a
 801a2c0:	d134      	bne.n	801a32c <_vfiprintf_r+0x1b0>
 801a2c2:	9b03      	ldr	r3, [sp, #12]
 801a2c4:	1d1a      	adds	r2, r3, #4
 801a2c6:	681b      	ldr	r3, [r3, #0]
 801a2c8:	9203      	str	r2, [sp, #12]
 801a2ca:	2b00      	cmp	r3, #0
 801a2cc:	bfb8      	it	lt
 801a2ce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801a2d2:	3402      	adds	r4, #2
 801a2d4:	9305      	str	r3, [sp, #20]
 801a2d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801a3ac <_vfiprintf_r+0x230>
 801a2da:	7821      	ldrb	r1, [r4, #0]
 801a2dc:	2203      	movs	r2, #3
 801a2de:	4650      	mov	r0, sl
 801a2e0:	f7e5 ffbe 	bl	8000260 <memchr>
 801a2e4:	b138      	cbz	r0, 801a2f6 <_vfiprintf_r+0x17a>
 801a2e6:	9b04      	ldr	r3, [sp, #16]
 801a2e8:	eba0 000a 	sub.w	r0, r0, sl
 801a2ec:	2240      	movs	r2, #64	; 0x40
 801a2ee:	4082      	lsls	r2, r0
 801a2f0:	4313      	orrs	r3, r2
 801a2f2:	3401      	adds	r4, #1
 801a2f4:	9304      	str	r3, [sp, #16]
 801a2f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a2fa:	4829      	ldr	r0, [pc, #164]	; (801a3a0 <_vfiprintf_r+0x224>)
 801a2fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a300:	2206      	movs	r2, #6
 801a302:	f7e5 ffad 	bl	8000260 <memchr>
 801a306:	2800      	cmp	r0, #0
 801a308:	d03f      	beq.n	801a38a <_vfiprintf_r+0x20e>
 801a30a:	4b26      	ldr	r3, [pc, #152]	; (801a3a4 <_vfiprintf_r+0x228>)
 801a30c:	bb1b      	cbnz	r3, 801a356 <_vfiprintf_r+0x1da>
 801a30e:	9b03      	ldr	r3, [sp, #12]
 801a310:	3307      	adds	r3, #7
 801a312:	f023 0307 	bic.w	r3, r3, #7
 801a316:	3308      	adds	r3, #8
 801a318:	9303      	str	r3, [sp, #12]
 801a31a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a31c:	443b      	add	r3, r7
 801a31e:	9309      	str	r3, [sp, #36]	; 0x24
 801a320:	e768      	b.n	801a1f4 <_vfiprintf_r+0x78>
 801a322:	fb0c 3202 	mla	r2, ip, r2, r3
 801a326:	460c      	mov	r4, r1
 801a328:	2001      	movs	r0, #1
 801a32a:	e7a6      	b.n	801a27a <_vfiprintf_r+0xfe>
 801a32c:	2300      	movs	r3, #0
 801a32e:	3401      	adds	r4, #1
 801a330:	9305      	str	r3, [sp, #20]
 801a332:	4619      	mov	r1, r3
 801a334:	f04f 0c0a 	mov.w	ip, #10
 801a338:	4620      	mov	r0, r4
 801a33a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a33e:	3a30      	subs	r2, #48	; 0x30
 801a340:	2a09      	cmp	r2, #9
 801a342:	d903      	bls.n	801a34c <_vfiprintf_r+0x1d0>
 801a344:	2b00      	cmp	r3, #0
 801a346:	d0c6      	beq.n	801a2d6 <_vfiprintf_r+0x15a>
 801a348:	9105      	str	r1, [sp, #20]
 801a34a:	e7c4      	b.n	801a2d6 <_vfiprintf_r+0x15a>
 801a34c:	fb0c 2101 	mla	r1, ip, r1, r2
 801a350:	4604      	mov	r4, r0
 801a352:	2301      	movs	r3, #1
 801a354:	e7f0      	b.n	801a338 <_vfiprintf_r+0x1bc>
 801a356:	ab03      	add	r3, sp, #12
 801a358:	9300      	str	r3, [sp, #0]
 801a35a:	462a      	mov	r2, r5
 801a35c:	4b12      	ldr	r3, [pc, #72]	; (801a3a8 <_vfiprintf_r+0x22c>)
 801a35e:	a904      	add	r1, sp, #16
 801a360:	4630      	mov	r0, r6
 801a362:	f3af 8000 	nop.w
 801a366:	4607      	mov	r7, r0
 801a368:	1c78      	adds	r0, r7, #1
 801a36a:	d1d6      	bne.n	801a31a <_vfiprintf_r+0x19e>
 801a36c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a36e:	07d9      	lsls	r1, r3, #31
 801a370:	d405      	bmi.n	801a37e <_vfiprintf_r+0x202>
 801a372:	89ab      	ldrh	r3, [r5, #12]
 801a374:	059a      	lsls	r2, r3, #22
 801a376:	d402      	bmi.n	801a37e <_vfiprintf_r+0x202>
 801a378:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a37a:	f7ff fa97 	bl	80198ac <__retarget_lock_release_recursive>
 801a37e:	89ab      	ldrh	r3, [r5, #12]
 801a380:	065b      	lsls	r3, r3, #25
 801a382:	f53f af1d 	bmi.w	801a1c0 <_vfiprintf_r+0x44>
 801a386:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a388:	e71c      	b.n	801a1c4 <_vfiprintf_r+0x48>
 801a38a:	ab03      	add	r3, sp, #12
 801a38c:	9300      	str	r3, [sp, #0]
 801a38e:	462a      	mov	r2, r5
 801a390:	4b05      	ldr	r3, [pc, #20]	; (801a3a8 <_vfiprintf_r+0x22c>)
 801a392:	a904      	add	r1, sp, #16
 801a394:	4630      	mov	r0, r6
 801a396:	f7ff fce5 	bl	8019d64 <_printf_i>
 801a39a:	e7e4      	b.n	801a366 <_vfiprintf_r+0x1ea>
 801a39c:	0801c050 	.word	0x0801c050
 801a3a0:	0801c05a 	.word	0x0801c05a
 801a3a4:	00000000 	.word	0x00000000
 801a3a8:	0801a157 	.word	0x0801a157
 801a3ac:	0801c056 	.word	0x0801c056

0801a3b0 <__swbuf_r>:
 801a3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3b2:	460e      	mov	r6, r1
 801a3b4:	4614      	mov	r4, r2
 801a3b6:	4605      	mov	r5, r0
 801a3b8:	b118      	cbz	r0, 801a3c2 <__swbuf_r+0x12>
 801a3ba:	6a03      	ldr	r3, [r0, #32]
 801a3bc:	b90b      	cbnz	r3, 801a3c2 <__swbuf_r+0x12>
 801a3be:	f7fe fff9 	bl	80193b4 <__sinit>
 801a3c2:	69a3      	ldr	r3, [r4, #24]
 801a3c4:	60a3      	str	r3, [r4, #8]
 801a3c6:	89a3      	ldrh	r3, [r4, #12]
 801a3c8:	071a      	lsls	r2, r3, #28
 801a3ca:	d525      	bpl.n	801a418 <__swbuf_r+0x68>
 801a3cc:	6923      	ldr	r3, [r4, #16]
 801a3ce:	b31b      	cbz	r3, 801a418 <__swbuf_r+0x68>
 801a3d0:	6823      	ldr	r3, [r4, #0]
 801a3d2:	6922      	ldr	r2, [r4, #16]
 801a3d4:	1a98      	subs	r0, r3, r2
 801a3d6:	6963      	ldr	r3, [r4, #20]
 801a3d8:	b2f6      	uxtb	r6, r6
 801a3da:	4283      	cmp	r3, r0
 801a3dc:	4637      	mov	r7, r6
 801a3de:	dc04      	bgt.n	801a3ea <__swbuf_r+0x3a>
 801a3e0:	4621      	mov	r1, r4
 801a3e2:	4628      	mov	r0, r5
 801a3e4:	f7ff fe66 	bl	801a0b4 <_fflush_r>
 801a3e8:	b9e0      	cbnz	r0, 801a424 <__swbuf_r+0x74>
 801a3ea:	68a3      	ldr	r3, [r4, #8]
 801a3ec:	3b01      	subs	r3, #1
 801a3ee:	60a3      	str	r3, [r4, #8]
 801a3f0:	6823      	ldr	r3, [r4, #0]
 801a3f2:	1c5a      	adds	r2, r3, #1
 801a3f4:	6022      	str	r2, [r4, #0]
 801a3f6:	701e      	strb	r6, [r3, #0]
 801a3f8:	6962      	ldr	r2, [r4, #20]
 801a3fa:	1c43      	adds	r3, r0, #1
 801a3fc:	429a      	cmp	r2, r3
 801a3fe:	d004      	beq.n	801a40a <__swbuf_r+0x5a>
 801a400:	89a3      	ldrh	r3, [r4, #12]
 801a402:	07db      	lsls	r3, r3, #31
 801a404:	d506      	bpl.n	801a414 <__swbuf_r+0x64>
 801a406:	2e0a      	cmp	r6, #10
 801a408:	d104      	bne.n	801a414 <__swbuf_r+0x64>
 801a40a:	4621      	mov	r1, r4
 801a40c:	4628      	mov	r0, r5
 801a40e:	f7ff fe51 	bl	801a0b4 <_fflush_r>
 801a412:	b938      	cbnz	r0, 801a424 <__swbuf_r+0x74>
 801a414:	4638      	mov	r0, r7
 801a416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a418:	4621      	mov	r1, r4
 801a41a:	4628      	mov	r0, r5
 801a41c:	f000 f806 	bl	801a42c <__swsetup_r>
 801a420:	2800      	cmp	r0, #0
 801a422:	d0d5      	beq.n	801a3d0 <__swbuf_r+0x20>
 801a424:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a428:	e7f4      	b.n	801a414 <__swbuf_r+0x64>
	...

0801a42c <__swsetup_r>:
 801a42c:	b538      	push	{r3, r4, r5, lr}
 801a42e:	4b2a      	ldr	r3, [pc, #168]	; (801a4d8 <__swsetup_r+0xac>)
 801a430:	4605      	mov	r5, r0
 801a432:	6818      	ldr	r0, [r3, #0]
 801a434:	460c      	mov	r4, r1
 801a436:	b118      	cbz	r0, 801a440 <__swsetup_r+0x14>
 801a438:	6a03      	ldr	r3, [r0, #32]
 801a43a:	b90b      	cbnz	r3, 801a440 <__swsetup_r+0x14>
 801a43c:	f7fe ffba 	bl	80193b4 <__sinit>
 801a440:	89a3      	ldrh	r3, [r4, #12]
 801a442:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a446:	0718      	lsls	r0, r3, #28
 801a448:	d422      	bmi.n	801a490 <__swsetup_r+0x64>
 801a44a:	06d9      	lsls	r1, r3, #27
 801a44c:	d407      	bmi.n	801a45e <__swsetup_r+0x32>
 801a44e:	2309      	movs	r3, #9
 801a450:	602b      	str	r3, [r5, #0]
 801a452:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a456:	81a3      	strh	r3, [r4, #12]
 801a458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a45c:	e034      	b.n	801a4c8 <__swsetup_r+0x9c>
 801a45e:	0758      	lsls	r0, r3, #29
 801a460:	d512      	bpl.n	801a488 <__swsetup_r+0x5c>
 801a462:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a464:	b141      	cbz	r1, 801a478 <__swsetup_r+0x4c>
 801a466:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a46a:	4299      	cmp	r1, r3
 801a46c:	d002      	beq.n	801a474 <__swsetup_r+0x48>
 801a46e:	4628      	mov	r0, r5
 801a470:	f7ff fa5e 	bl	8019930 <_free_r>
 801a474:	2300      	movs	r3, #0
 801a476:	6363      	str	r3, [r4, #52]	; 0x34
 801a478:	89a3      	ldrh	r3, [r4, #12]
 801a47a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a47e:	81a3      	strh	r3, [r4, #12]
 801a480:	2300      	movs	r3, #0
 801a482:	6063      	str	r3, [r4, #4]
 801a484:	6923      	ldr	r3, [r4, #16]
 801a486:	6023      	str	r3, [r4, #0]
 801a488:	89a3      	ldrh	r3, [r4, #12]
 801a48a:	f043 0308 	orr.w	r3, r3, #8
 801a48e:	81a3      	strh	r3, [r4, #12]
 801a490:	6923      	ldr	r3, [r4, #16]
 801a492:	b94b      	cbnz	r3, 801a4a8 <__swsetup_r+0x7c>
 801a494:	89a3      	ldrh	r3, [r4, #12]
 801a496:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a49a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a49e:	d003      	beq.n	801a4a8 <__swsetup_r+0x7c>
 801a4a0:	4621      	mov	r1, r4
 801a4a2:	4628      	mov	r0, r5
 801a4a4:	f000 f840 	bl	801a528 <__smakebuf_r>
 801a4a8:	89a0      	ldrh	r0, [r4, #12]
 801a4aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a4ae:	f010 0301 	ands.w	r3, r0, #1
 801a4b2:	d00a      	beq.n	801a4ca <__swsetup_r+0x9e>
 801a4b4:	2300      	movs	r3, #0
 801a4b6:	60a3      	str	r3, [r4, #8]
 801a4b8:	6963      	ldr	r3, [r4, #20]
 801a4ba:	425b      	negs	r3, r3
 801a4bc:	61a3      	str	r3, [r4, #24]
 801a4be:	6923      	ldr	r3, [r4, #16]
 801a4c0:	b943      	cbnz	r3, 801a4d4 <__swsetup_r+0xa8>
 801a4c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a4c6:	d1c4      	bne.n	801a452 <__swsetup_r+0x26>
 801a4c8:	bd38      	pop	{r3, r4, r5, pc}
 801a4ca:	0781      	lsls	r1, r0, #30
 801a4cc:	bf58      	it	pl
 801a4ce:	6963      	ldrpl	r3, [r4, #20]
 801a4d0:	60a3      	str	r3, [r4, #8]
 801a4d2:	e7f4      	b.n	801a4be <__swsetup_r+0x92>
 801a4d4:	2000      	movs	r0, #0
 801a4d6:	e7f7      	b.n	801a4c8 <__swsetup_r+0x9c>
 801a4d8:	20002138 	.word	0x20002138

0801a4dc <__swhatbuf_r>:
 801a4dc:	b570      	push	{r4, r5, r6, lr}
 801a4de:	460c      	mov	r4, r1
 801a4e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a4e4:	2900      	cmp	r1, #0
 801a4e6:	b096      	sub	sp, #88	; 0x58
 801a4e8:	4615      	mov	r5, r2
 801a4ea:	461e      	mov	r6, r3
 801a4ec:	da0d      	bge.n	801a50a <__swhatbuf_r+0x2e>
 801a4ee:	89a3      	ldrh	r3, [r4, #12]
 801a4f0:	f013 0f80 	tst.w	r3, #128	; 0x80
 801a4f4:	f04f 0100 	mov.w	r1, #0
 801a4f8:	bf0c      	ite	eq
 801a4fa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801a4fe:	2340      	movne	r3, #64	; 0x40
 801a500:	2000      	movs	r0, #0
 801a502:	6031      	str	r1, [r6, #0]
 801a504:	602b      	str	r3, [r5, #0]
 801a506:	b016      	add	sp, #88	; 0x58
 801a508:	bd70      	pop	{r4, r5, r6, pc}
 801a50a:	466a      	mov	r2, sp
 801a50c:	f000 f848 	bl	801a5a0 <_fstat_r>
 801a510:	2800      	cmp	r0, #0
 801a512:	dbec      	blt.n	801a4ee <__swhatbuf_r+0x12>
 801a514:	9901      	ldr	r1, [sp, #4]
 801a516:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801a51a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801a51e:	4259      	negs	r1, r3
 801a520:	4159      	adcs	r1, r3
 801a522:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a526:	e7eb      	b.n	801a500 <__swhatbuf_r+0x24>

0801a528 <__smakebuf_r>:
 801a528:	898b      	ldrh	r3, [r1, #12]
 801a52a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a52c:	079d      	lsls	r5, r3, #30
 801a52e:	4606      	mov	r6, r0
 801a530:	460c      	mov	r4, r1
 801a532:	d507      	bpl.n	801a544 <__smakebuf_r+0x1c>
 801a534:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a538:	6023      	str	r3, [r4, #0]
 801a53a:	6123      	str	r3, [r4, #16]
 801a53c:	2301      	movs	r3, #1
 801a53e:	6163      	str	r3, [r4, #20]
 801a540:	b002      	add	sp, #8
 801a542:	bd70      	pop	{r4, r5, r6, pc}
 801a544:	ab01      	add	r3, sp, #4
 801a546:	466a      	mov	r2, sp
 801a548:	f7ff ffc8 	bl	801a4dc <__swhatbuf_r>
 801a54c:	9900      	ldr	r1, [sp, #0]
 801a54e:	4605      	mov	r5, r0
 801a550:	4630      	mov	r0, r6
 801a552:	f7fe fcf7 	bl	8018f44 <_malloc_r>
 801a556:	b948      	cbnz	r0, 801a56c <__smakebuf_r+0x44>
 801a558:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a55c:	059a      	lsls	r2, r3, #22
 801a55e:	d4ef      	bmi.n	801a540 <__smakebuf_r+0x18>
 801a560:	f023 0303 	bic.w	r3, r3, #3
 801a564:	f043 0302 	orr.w	r3, r3, #2
 801a568:	81a3      	strh	r3, [r4, #12]
 801a56a:	e7e3      	b.n	801a534 <__smakebuf_r+0xc>
 801a56c:	89a3      	ldrh	r3, [r4, #12]
 801a56e:	6020      	str	r0, [r4, #0]
 801a570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a574:	81a3      	strh	r3, [r4, #12]
 801a576:	9b00      	ldr	r3, [sp, #0]
 801a578:	6163      	str	r3, [r4, #20]
 801a57a:	9b01      	ldr	r3, [sp, #4]
 801a57c:	6120      	str	r0, [r4, #16]
 801a57e:	b15b      	cbz	r3, 801a598 <__smakebuf_r+0x70>
 801a580:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a584:	4630      	mov	r0, r6
 801a586:	f000 f81d 	bl	801a5c4 <_isatty_r>
 801a58a:	b128      	cbz	r0, 801a598 <__smakebuf_r+0x70>
 801a58c:	89a3      	ldrh	r3, [r4, #12]
 801a58e:	f023 0303 	bic.w	r3, r3, #3
 801a592:	f043 0301 	orr.w	r3, r3, #1
 801a596:	81a3      	strh	r3, [r4, #12]
 801a598:	89a3      	ldrh	r3, [r4, #12]
 801a59a:	431d      	orrs	r5, r3
 801a59c:	81a5      	strh	r5, [r4, #12]
 801a59e:	e7cf      	b.n	801a540 <__smakebuf_r+0x18>

0801a5a0 <_fstat_r>:
 801a5a0:	b538      	push	{r3, r4, r5, lr}
 801a5a2:	4d07      	ldr	r5, [pc, #28]	; (801a5c0 <_fstat_r+0x20>)
 801a5a4:	2300      	movs	r3, #0
 801a5a6:	4604      	mov	r4, r0
 801a5a8:	4608      	mov	r0, r1
 801a5aa:	4611      	mov	r1, r2
 801a5ac:	602b      	str	r3, [r5, #0]
 801a5ae:	f7e7 f98c 	bl	80018ca <_fstat>
 801a5b2:	1c43      	adds	r3, r0, #1
 801a5b4:	d102      	bne.n	801a5bc <_fstat_r+0x1c>
 801a5b6:	682b      	ldr	r3, [r5, #0]
 801a5b8:	b103      	cbz	r3, 801a5bc <_fstat_r+0x1c>
 801a5ba:	6023      	str	r3, [r4, #0]
 801a5bc:	bd38      	pop	{r3, r4, r5, pc}
 801a5be:	bf00      	nop
 801a5c0:	20010b28 	.word	0x20010b28

0801a5c4 <_isatty_r>:
 801a5c4:	b538      	push	{r3, r4, r5, lr}
 801a5c6:	4d06      	ldr	r5, [pc, #24]	; (801a5e0 <_isatty_r+0x1c>)
 801a5c8:	2300      	movs	r3, #0
 801a5ca:	4604      	mov	r4, r0
 801a5cc:	4608      	mov	r0, r1
 801a5ce:	602b      	str	r3, [r5, #0]
 801a5d0:	f7e7 f98b 	bl	80018ea <_isatty>
 801a5d4:	1c43      	adds	r3, r0, #1
 801a5d6:	d102      	bne.n	801a5de <_isatty_r+0x1a>
 801a5d8:	682b      	ldr	r3, [r5, #0]
 801a5da:	b103      	cbz	r3, 801a5de <_isatty_r+0x1a>
 801a5dc:	6023      	str	r3, [r4, #0]
 801a5de:	bd38      	pop	{r3, r4, r5, pc}
 801a5e0:	20010b28 	.word	0x20010b28

0801a5e4 <_init>:
 801a5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a5e6:	bf00      	nop
 801a5e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a5ea:	bc08      	pop	{r3}
 801a5ec:	469e      	mov	lr, r3
 801a5ee:	4770      	bx	lr

0801a5f0 <_fini>:
 801a5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a5f2:	bf00      	nop
 801a5f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a5f6:	bc08      	pop	{r3}
 801a5f8:	469e      	mov	lr, r3
 801a5fa:	4770      	bx	lr
