
scorbot_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a45c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a84  0801a660  0801a660  0002a660  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c0e4  0801c0e4  0003213c  2**0
                  CONTENTS
  4 .ARM          00000008  0801c0e4  0801c0e4  0002c0e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c0ec  0801c0ec  0003213c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0801c0ec  0801c0ec  0002c0ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c0fc  0801c0fc  0002c0fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000213c  20000000  0801c100  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e9f0  20002140  0801e23c  00032140  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20010b30  0801e23c  00040b30  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003213c  2**0
                  CONTENTS, READONLY
 12 .comment      00000076  00000000  00000000  0003216a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002eb95  00000000  00000000  000321e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000060e1  00000000  00000000  00060d75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d50  00000000  00000000  00066e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001687  00000000  00000000  00068ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00031d77  00000000  00000000  0006a22f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a8ad  00000000  00000000  0009bfa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00120f9d  00000000  00000000  000c6853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000870c  00000000  00000000  001e77f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001efefc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20002140 	.word	0x20002140
 800021c:	00000000 	.word	0x00000000
 8000220:	0801a644 	.word	0x0801a644

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20002144 	.word	0x20002144
 800023c:	0801a644 	.word	0x0801a644

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr
	...

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800032e:	f000 b9bb 	b.w	80006a8 <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003c4:	f000 b970 	b.w	80006a8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9e08      	ldr	r6, [sp, #32]
 80003e6:	460d      	mov	r5, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	460f      	mov	r7, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4694      	mov	ip, r2
 80003f4:	d965      	bls.n	80004c2 <__udivmoddi4+0xe2>
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	b143      	cbz	r3, 800040e <__udivmoddi4+0x2e>
 80003fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000400:	f1c3 0220 	rsb	r2, r3, #32
 8000404:	409f      	lsls	r7, r3
 8000406:	fa20 f202 	lsr.w	r2, r0, r2
 800040a:	4317      	orrs	r7, r2
 800040c:	409c      	lsls	r4, r3
 800040e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000412:	fa1f f58c 	uxth.w	r5, ip
 8000416:	fbb7 f1fe 	udiv	r1, r7, lr
 800041a:	0c22      	lsrs	r2, r4, #16
 800041c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000420:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000424:	fb01 f005 	mul.w	r0, r1, r5
 8000428:	4290      	cmp	r0, r2
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x62>
 800042c:	eb1c 0202 	adds.w	r2, ip, r2
 8000430:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000434:	f080 811c 	bcs.w	8000670 <__udivmoddi4+0x290>
 8000438:	4290      	cmp	r0, r2
 800043a:	f240 8119 	bls.w	8000670 <__udivmoddi4+0x290>
 800043e:	3902      	subs	r1, #2
 8000440:	4462      	add	r2, ip
 8000442:	1a12      	subs	r2, r2, r0
 8000444:	b2a4      	uxth	r4, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000452:	fb00 f505 	mul.w	r5, r0, r5
 8000456:	42a5      	cmp	r5, r4
 8000458:	d90a      	bls.n	8000470 <__udivmoddi4+0x90>
 800045a:	eb1c 0404 	adds.w	r4, ip, r4
 800045e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000462:	f080 8107 	bcs.w	8000674 <__udivmoddi4+0x294>
 8000466:	42a5      	cmp	r5, r4
 8000468:	f240 8104 	bls.w	8000674 <__udivmoddi4+0x294>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000474:	1b64      	subs	r4, r4, r5
 8000476:	2100      	movs	r1, #0
 8000478:	b11e      	cbz	r6, 8000482 <__udivmoddi4+0xa2>
 800047a:	40dc      	lsrs	r4, r3
 800047c:	2300      	movs	r3, #0
 800047e:	e9c6 4300 	strd	r4, r3, [r6]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0xbc>
 800048a:	2e00      	cmp	r6, #0
 800048c:	f000 80ed 	beq.w	800066a <__udivmoddi4+0x28a>
 8000490:	2100      	movs	r1, #0
 8000492:	e9c6 0500 	strd	r0, r5, [r6]
 8000496:	4608      	mov	r0, r1
 8000498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049c:	fab3 f183 	clz	r1, r3
 80004a0:	2900      	cmp	r1, #0
 80004a2:	d149      	bne.n	8000538 <__udivmoddi4+0x158>
 80004a4:	42ab      	cmp	r3, r5
 80004a6:	d302      	bcc.n	80004ae <__udivmoddi4+0xce>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	f200 80f8 	bhi.w	800069e <__udivmoddi4+0x2be>
 80004ae:	1a84      	subs	r4, r0, r2
 80004b0:	eb65 0203 	sbc.w	r2, r5, r3
 80004b4:	2001      	movs	r0, #1
 80004b6:	4617      	mov	r7, r2
 80004b8:	2e00      	cmp	r6, #0
 80004ba:	d0e2      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	e9c6 4700 	strd	r4, r7, [r6]
 80004c0:	e7df      	b.n	8000482 <__udivmoddi4+0xa2>
 80004c2:	b902      	cbnz	r2, 80004c6 <__udivmoddi4+0xe6>
 80004c4:	deff      	udf	#255	; 0xff
 80004c6:	fab2 f382 	clz	r3, r2
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	f040 8090 	bne.w	80005f0 <__udivmoddi4+0x210>
 80004d0:	1a8a      	subs	r2, r1, r2
 80004d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d6:	fa1f fe8c 	uxth.w	lr, ip
 80004da:	2101      	movs	r1, #1
 80004dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004e0:	fb07 2015 	mls	r0, r7, r5, r2
 80004e4:	0c22      	lsrs	r2, r4, #16
 80004e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ea:	fb0e f005 	mul.w	r0, lr, r5
 80004ee:	4290      	cmp	r0, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x124>
 80004f2:	eb1c 0202 	adds.w	r2, ip, r2
 80004f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x122>
 80004fc:	4290      	cmp	r0, r2
 80004fe:	f200 80cb 	bhi.w	8000698 <__udivmoddi4+0x2b8>
 8000502:	4645      	mov	r5, r8
 8000504:	1a12      	subs	r2, r2, r0
 8000506:	b2a4      	uxth	r4, r4
 8000508:	fbb2 f0f7 	udiv	r0, r2, r7
 800050c:	fb07 2210 	mls	r2, r7, r0, r2
 8000510:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000514:	fb0e fe00 	mul.w	lr, lr, r0
 8000518:	45a6      	cmp	lr, r4
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x14e>
 800051c:	eb1c 0404 	adds.w	r4, ip, r4
 8000520:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x14c>
 8000526:	45a6      	cmp	lr, r4
 8000528:	f200 80bb 	bhi.w	80006a2 <__udivmoddi4+0x2c2>
 800052c:	4610      	mov	r0, r2
 800052e:	eba4 040e 	sub.w	r4, r4, lr
 8000532:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000536:	e79f      	b.n	8000478 <__udivmoddi4+0x98>
 8000538:	f1c1 0720 	rsb	r7, r1, #32
 800053c:	408b      	lsls	r3, r1
 800053e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000542:	ea4c 0c03 	orr.w	ip, ip, r3
 8000546:	fa05 f401 	lsl.w	r4, r5, r1
 800054a:	fa20 f307 	lsr.w	r3, r0, r7
 800054e:	40fd      	lsrs	r5, r7
 8000550:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000554:	4323      	orrs	r3, r4
 8000556:	fbb5 f8f9 	udiv	r8, r5, r9
 800055a:	fa1f fe8c 	uxth.w	lr, ip
 800055e:	fb09 5518 	mls	r5, r9, r8, r5
 8000562:	0c1c      	lsrs	r4, r3, #16
 8000564:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000568:	fb08 f50e 	mul.w	r5, r8, lr
 800056c:	42a5      	cmp	r5, r4
 800056e:	fa02 f201 	lsl.w	r2, r2, r1
 8000572:	fa00 f001 	lsl.w	r0, r0, r1
 8000576:	d90b      	bls.n	8000590 <__udivmoddi4+0x1b0>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000580:	f080 8088 	bcs.w	8000694 <__udivmoddi4+0x2b4>
 8000584:	42a5      	cmp	r5, r4
 8000586:	f240 8085 	bls.w	8000694 <__udivmoddi4+0x2b4>
 800058a:	f1a8 0802 	sub.w	r8, r8, #2
 800058e:	4464      	add	r4, ip
 8000590:	1b64      	subs	r4, r4, r5
 8000592:	b29d      	uxth	r5, r3
 8000594:	fbb4 f3f9 	udiv	r3, r4, r9
 8000598:	fb09 4413 	mls	r4, r9, r3, r4
 800059c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005a4:	45a6      	cmp	lr, r4
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x1da>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80005b0:	d26c      	bcs.n	800068c <__udivmoddi4+0x2ac>
 80005b2:	45a6      	cmp	lr, r4
 80005b4:	d96a      	bls.n	800068c <__udivmoddi4+0x2ac>
 80005b6:	3b02      	subs	r3, #2
 80005b8:	4464      	add	r4, ip
 80005ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005be:	fba3 9502 	umull	r9, r5, r3, r2
 80005c2:	eba4 040e 	sub.w	r4, r4, lr
 80005c6:	42ac      	cmp	r4, r5
 80005c8:	46c8      	mov	r8, r9
 80005ca:	46ae      	mov	lr, r5
 80005cc:	d356      	bcc.n	800067c <__udivmoddi4+0x29c>
 80005ce:	d053      	beq.n	8000678 <__udivmoddi4+0x298>
 80005d0:	b156      	cbz	r6, 80005e8 <__udivmoddi4+0x208>
 80005d2:	ebb0 0208 	subs.w	r2, r0, r8
 80005d6:	eb64 040e 	sbc.w	r4, r4, lr
 80005da:	fa04 f707 	lsl.w	r7, r4, r7
 80005de:	40ca      	lsrs	r2, r1
 80005e0:	40cc      	lsrs	r4, r1
 80005e2:	4317      	orrs	r7, r2
 80005e4:	e9c6 7400 	strd	r7, r4, [r6]
 80005e8:	4618      	mov	r0, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005f0:	f1c3 0120 	rsb	r1, r3, #32
 80005f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005f8:	fa20 f201 	lsr.w	r2, r0, r1
 80005fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000600:	409d      	lsls	r5, r3
 8000602:	432a      	orrs	r2, r5
 8000604:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000608:	fa1f fe8c 	uxth.w	lr, ip
 800060c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000610:	fb07 1510 	mls	r5, r7, r0, r1
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800061a:	fb00 f50e 	mul.w	r5, r0, lr
 800061e:	428d      	cmp	r5, r1
 8000620:	fa04 f403 	lsl.w	r4, r4, r3
 8000624:	d908      	bls.n	8000638 <__udivmoddi4+0x258>
 8000626:	eb1c 0101 	adds.w	r1, ip, r1
 800062a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800062e:	d22f      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000630:	428d      	cmp	r5, r1
 8000632:	d92d      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000634:	3802      	subs	r0, #2
 8000636:	4461      	add	r1, ip
 8000638:	1b49      	subs	r1, r1, r5
 800063a:	b292      	uxth	r2, r2
 800063c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000640:	fb07 1115 	mls	r1, r7, r5, r1
 8000644:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000648:	fb05 f10e 	mul.w	r1, r5, lr
 800064c:	4291      	cmp	r1, r2
 800064e:	d908      	bls.n	8000662 <__udivmoddi4+0x282>
 8000650:	eb1c 0202 	adds.w	r2, ip, r2
 8000654:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000658:	d216      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 800065a:	4291      	cmp	r1, r2
 800065c:	d914      	bls.n	8000688 <__udivmoddi4+0x2a8>
 800065e:	3d02      	subs	r5, #2
 8000660:	4462      	add	r2, ip
 8000662:	1a52      	subs	r2, r2, r1
 8000664:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000668:	e738      	b.n	80004dc <__udivmoddi4+0xfc>
 800066a:	4631      	mov	r1, r6
 800066c:	4630      	mov	r0, r6
 800066e:	e708      	b.n	8000482 <__udivmoddi4+0xa2>
 8000670:	4639      	mov	r1, r7
 8000672:	e6e6      	b.n	8000442 <__udivmoddi4+0x62>
 8000674:	4610      	mov	r0, r2
 8000676:	e6fb      	b.n	8000470 <__udivmoddi4+0x90>
 8000678:	4548      	cmp	r0, r9
 800067a:	d2a9      	bcs.n	80005d0 <__udivmoddi4+0x1f0>
 800067c:	ebb9 0802 	subs.w	r8, r9, r2
 8000680:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000684:	3b01      	subs	r3, #1
 8000686:	e7a3      	b.n	80005d0 <__udivmoddi4+0x1f0>
 8000688:	4645      	mov	r5, r8
 800068a:	e7ea      	b.n	8000662 <__udivmoddi4+0x282>
 800068c:	462b      	mov	r3, r5
 800068e:	e794      	b.n	80005ba <__udivmoddi4+0x1da>
 8000690:	4640      	mov	r0, r8
 8000692:	e7d1      	b.n	8000638 <__udivmoddi4+0x258>
 8000694:	46d0      	mov	r8, sl
 8000696:	e77b      	b.n	8000590 <__udivmoddi4+0x1b0>
 8000698:	3d02      	subs	r5, #2
 800069a:	4462      	add	r2, ip
 800069c:	e732      	b.n	8000504 <__udivmoddi4+0x124>
 800069e:	4608      	mov	r0, r1
 80006a0:	e70a      	b.n	80004b8 <__udivmoddi4+0xd8>
 80006a2:	4464      	add	r4, ip
 80006a4:	3802      	subs	r0, #2
 80006a6:	e742      	b.n	800052e <__udivmoddi4+0x14e>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <_ZN10PinControlC1Ev>:
// ==================================================
// ==================================================
// PinControl
// ==================================================

PinControl::PinControl() {
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]

}
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4618      	mov	r0, r3
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr

080006c2 <_ZN10PinMeasureC1Ev>:

// ==================================================
// PinMeasure
// ==================================================

PinMeasure::PinMeasure() {
 80006c2:	b480      	push	{r7}
 80006c4:	b083      	sub	sp, #12
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	6078      	str	r0, [r7, #4]

}
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4618      	mov	r0, r3
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08a      	sub	sp, #40	; 0x28
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80006e4:	f008 fa62 	bl	8008bac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80006e8:	4b5b      	ldr	r3, [pc, #364]	; (8000858 <pvPortMallocMicroROS+0x180>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d101      	bne.n	80006f4 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80006f0:	f000 f98a 	bl	8000a08 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80006f4:	4b59      	ldr	r3, [pc, #356]	; (800085c <pvPortMallocMicroROS+0x184>)
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4013      	ands	r3, r2
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	f040 8092 	bne.w	8000826 <pvPortMallocMicroROS+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d01f      	beq.n	8000748 <pvPortMallocMicroROS+0x70>
			{
				xWantedSize += xHeapStructSize;
 8000708:	2208      	movs	r2, #8
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4413      	add	r3, r2
 800070e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f003 0307 	and.w	r3, r3, #7
 8000716:	2b00      	cmp	r3, #0
 8000718:	d016      	beq.n	8000748 <pvPortMallocMicroROS+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	f023 0307 	bic.w	r3, r3, #7
 8000720:	3308      	adds	r3, #8
 8000722:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f003 0307 	and.w	r3, r3, #7
 800072a:	2b00      	cmp	r3, #0
 800072c:	d00c      	beq.n	8000748 <pvPortMallocMicroROS+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800072e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000732:	b672      	cpsid	i
 8000734:	f383 8811 	msr	BASEPRI, r3
 8000738:	f3bf 8f6f 	isb	sy
 800073c:	f3bf 8f4f 	dsb	sy
 8000740:	b662      	cpsie	i
 8000742:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000744:	bf00      	nop
 8000746:	e7fe      	b.n	8000746 <pvPortMallocMicroROS+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d06b      	beq.n	8000826 <pvPortMallocMicroROS+0x14e>
 800074e:	4b44      	ldr	r3, [pc, #272]	; (8000860 <pvPortMallocMicroROS+0x188>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	429a      	cmp	r2, r3
 8000756:	d866      	bhi.n	8000826 <pvPortMallocMicroROS+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000758:	4b42      	ldr	r3, [pc, #264]	; (8000864 <pvPortMallocMicroROS+0x18c>)
 800075a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800075c:	4b41      	ldr	r3, [pc, #260]	; (8000864 <pvPortMallocMicroROS+0x18c>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000762:	e004      	b.n	800076e <pvPortMallocMicroROS+0x96>
				{
					pxPreviousBlock = pxBlock;
 8000764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000766:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800076e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000770:	685b      	ldr	r3, [r3, #4]
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	429a      	cmp	r2, r3
 8000776:	d903      	bls.n	8000780 <pvPortMallocMicroROS+0xa8>
 8000778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d1f1      	bne.n	8000764 <pvPortMallocMicroROS+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000780:	4b35      	ldr	r3, [pc, #212]	; (8000858 <pvPortMallocMicroROS+0x180>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000786:	429a      	cmp	r2, r3
 8000788:	d04d      	beq.n	8000826 <pvPortMallocMicroROS+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800078a:	6a3b      	ldr	r3, [r7, #32]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	2208      	movs	r2, #8
 8000790:	4413      	add	r3, r2
 8000792:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	6a3b      	ldr	r3, [r7, #32]
 800079a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800079c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800079e:	685a      	ldr	r2, [r3, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	1ad2      	subs	r2, r2, r3
 80007a4:	2308      	movs	r3, #8
 80007a6:	005b      	lsls	r3, r3, #1
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d921      	bls.n	80007f0 <pvPortMallocMicroROS+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80007ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4413      	add	r3, r2
 80007b2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80007b4:	69bb      	ldr	r3, [r7, #24]
 80007b6:	f003 0307 	and.w	r3, r3, #7
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d00c      	beq.n	80007d8 <pvPortMallocMicroROS+0x100>
	__asm volatile
 80007be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007c2:	b672      	cpsid	i
 80007c4:	f383 8811 	msr	BASEPRI, r3
 80007c8:	f3bf 8f6f 	isb	sy
 80007cc:	f3bf 8f4f 	dsb	sy
 80007d0:	b662      	cpsie	i
 80007d2:	613b      	str	r3, [r7, #16]
}
 80007d4:	bf00      	nop
 80007d6:	e7fe      	b.n	80007d6 <pvPortMallocMicroROS+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80007d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007da:	685a      	ldr	r2, [r3, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	1ad2      	subs	r2, r2, r3
 80007e0:	69bb      	ldr	r3, [r7, #24]
 80007e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80007e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80007ea:	69b8      	ldr	r0, [r7, #24]
 80007ec:	f000 f96e 	bl	8000acc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80007f0:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <pvPortMallocMicroROS+0x188>)
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	1ad3      	subs	r3, r2, r3
 80007fa:	4a19      	ldr	r2, [pc, #100]	; (8000860 <pvPortMallocMicroROS+0x188>)
 80007fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80007fe:	4b18      	ldr	r3, [pc, #96]	; (8000860 <pvPortMallocMicroROS+0x188>)
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	4b19      	ldr	r3, [pc, #100]	; (8000868 <pvPortMallocMicroROS+0x190>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	429a      	cmp	r2, r3
 8000808:	d203      	bcs.n	8000812 <pvPortMallocMicroROS+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800080a:	4b15      	ldr	r3, [pc, #84]	; (8000860 <pvPortMallocMicroROS+0x188>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a16      	ldr	r2, [pc, #88]	; (8000868 <pvPortMallocMicroROS+0x190>)
 8000810:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000814:	685a      	ldr	r2, [r3, #4]
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <pvPortMallocMicroROS+0x184>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	431a      	orrs	r2, r3
 800081c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800081e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000826:	f008 f9cf 	bl	8008bc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	f003 0307 	and.w	r3, r3, #7
 8000830:	2b00      	cmp	r3, #0
 8000832:	d00c      	beq.n	800084e <pvPortMallocMicroROS+0x176>
	__asm volatile
 8000834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000838:	b672      	cpsid	i
 800083a:	f383 8811 	msr	BASEPRI, r3
 800083e:	f3bf 8f6f 	isb	sy
 8000842:	f3bf 8f4f 	dsb	sy
 8000846:	b662      	cpsie	i
 8000848:	60fb      	str	r3, [r7, #12]
}
 800084a:	bf00      	nop
 800084c:	e7fe      	b.n	800084c <pvPortMallocMicroROS+0x174>
	return pvReturn;
 800084e:	69fb      	ldr	r3, [r7, #28]
}
 8000850:	4618      	mov	r0, r3
 8000852:	3728      	adds	r7, #40	; 0x28
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20005d64 	.word	0x20005d64
 800085c:	20005d70 	.word	0x20005d70
 8000860:	20005d68 	.word	0x20005d68
 8000864:	20005d5c 	.word	0x20005d5c
 8000868:	20005d6c 	.word	0x20005d6c

0800086c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d04c      	beq.n	8000918 <vPortFreeMicroROS+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800087e:	2308      	movs	r3, #8
 8000880:	425b      	negs	r3, r3
 8000882:	697a      	ldr	r2, [r7, #20]
 8000884:	4413      	add	r3, r2
 8000886:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800088c:	693b      	ldr	r3, [r7, #16]
 800088e:	685a      	ldr	r2, [r3, #4]
 8000890:	4b23      	ldr	r3, [pc, #140]	; (8000920 <vPortFreeMicroROS+0xb4>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4013      	ands	r3, r2
 8000896:	2b00      	cmp	r3, #0
 8000898:	d10c      	bne.n	80008b4 <vPortFreeMicroROS+0x48>
	__asm volatile
 800089a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800089e:	b672      	cpsid	i
 80008a0:	f383 8811 	msr	BASEPRI, r3
 80008a4:	f3bf 8f6f 	isb	sy
 80008a8:	f3bf 8f4f 	dsb	sy
 80008ac:	b662      	cpsie	i
 80008ae:	60fb      	str	r3, [r7, #12]
}
 80008b0:	bf00      	nop
 80008b2:	e7fe      	b.n	80008b2 <vPortFreeMicroROS+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80008b4:	693b      	ldr	r3, [r7, #16]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d00c      	beq.n	80008d6 <vPortFreeMicroROS+0x6a>
	__asm volatile
 80008bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008c0:	b672      	cpsid	i
 80008c2:	f383 8811 	msr	BASEPRI, r3
 80008c6:	f3bf 8f6f 	isb	sy
 80008ca:	f3bf 8f4f 	dsb	sy
 80008ce:	b662      	cpsie	i
 80008d0:	60bb      	str	r3, [r7, #8]
}
 80008d2:	bf00      	nop
 80008d4:	e7fe      	b.n	80008d4 <vPortFreeMicroROS+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80008d6:	693b      	ldr	r3, [r7, #16]
 80008d8:	685a      	ldr	r2, [r3, #4]
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <vPortFreeMicroROS+0xb4>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4013      	ands	r3, r2
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d019      	beq.n	8000918 <vPortFreeMicroROS+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80008e4:	693b      	ldr	r3, [r7, #16]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d115      	bne.n	8000918 <vPortFreeMicroROS+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	685a      	ldr	r2, [r3, #4]
 80008f0:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <vPortFreeMicroROS+0xb4>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	43db      	mvns	r3, r3
 80008f6:	401a      	ands	r2, r3
 80008f8:	693b      	ldr	r3, [r7, #16]
 80008fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80008fc:	f008 f956 	bl	8008bac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000900:	693b      	ldr	r3, [r7, #16]
 8000902:	685a      	ldr	r2, [r3, #4]
 8000904:	4b07      	ldr	r3, [pc, #28]	; (8000924 <vPortFreeMicroROS+0xb8>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4413      	add	r3, r2
 800090a:	4a06      	ldr	r2, [pc, #24]	; (8000924 <vPortFreeMicroROS+0xb8>)
 800090c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800090e:	6938      	ldr	r0, [r7, #16]
 8000910:	f000 f8dc 	bl	8000acc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000914:	f008 f958 	bl	8008bc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000918:	bf00      	nop
 800091a:	3718      	adds	r7, #24
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20005d70 	.word	0x20005d70
 8000924:	20005d68 	.word	0x20005d68

08000928 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000928:	b480      	push	{r7}
 800092a:	b087      	sub	sp, #28
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000934:	2308      	movs	r3, #8
 8000936:	425b      	negs	r3, r3
 8000938:	697a      	ldr	r2, [r7, #20]
 800093a:	4413      	add	r3, r2
 800093c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	685a      	ldr	r2, [r3, #4]
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <getBlockSize+0x38>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	43db      	mvns	r3, r3
 800094c:	4013      	ands	r3, r2
 800094e:	60fb      	str	r3, [r7, #12]

	return count;
 8000950:	68fb      	ldr	r3, [r7, #12]
}
 8000952:	4618      	mov	r0, r3
 8000954:	371c      	adds	r7, #28
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	20005d70 	.word	0x20005d70

08000964 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800096e:	f008 f91d 	bl	8008bac <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000972:	6838      	ldr	r0, [r7, #0]
 8000974:	f7ff feb0 	bl	80006d8 <pvPortMallocMicroROS>
 8000978:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d017      	beq.n	80009b0 <pvPortReallocMicroROS+0x4c>
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d014      	beq.n	80009b0 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f7ff ffce 	bl	8000928 <getBlockSize>
 800098c:	4603      	mov	r3, r0
 800098e:	2208      	movs	r2, #8
 8000990:	1a9b      	subs	r3, r3, r2
 8000992:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000994:	683a      	ldr	r2, [r7, #0]
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	429a      	cmp	r2, r3
 800099a:	d201      	bcs.n	80009a0 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80009a0:	68fa      	ldr	r2, [r7, #12]
 80009a2:	6879      	ldr	r1, [r7, #4]
 80009a4:	68b8      	ldr	r0, [r7, #8]
 80009a6:	f018 ffba 	bl	801991e <memcpy>

		vPortFreeMicroROS(pv);
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff ff5e 	bl	800086c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80009b0:	f008 f90a 	bl	8008bc8 <xTaskResumeAll>

	return newmem;
 80009b4:	68bb      	ldr	r3, [r7, #8]
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3710      	adds	r7, #16
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b086      	sub	sp, #24
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
 80009c6:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80009c8:	f008 f8f0 	bl	8008bac <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	fb02 f303 	mul.w	r3, r2, r3
 80009d4:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80009d6:	6978      	ldr	r0, [r7, #20]
 80009d8:	f7ff fe7e 	bl	80006d8 <pvPortMallocMicroROS>
 80009dc:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	613b      	str	r3, [r7, #16]

  	while(count--)
 80009e2:	e004      	b.n	80009ee <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80009e4:	693b      	ldr	r3, [r7, #16]
 80009e6:	1c5a      	adds	r2, r3, #1
 80009e8:	613a      	str	r2, [r7, #16]
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	1e5a      	subs	r2, r3, #1
 80009f2:	617a      	str	r2, [r7, #20]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d1f5      	bne.n	80009e4 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80009f8:	f008 f8e6 	bl	8008bc8 <xTaskResumeAll>
  	return mem;
 80009fc:	68fb      	ldr	r3, [r7, #12]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3718      	adds	r7, #24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000a0e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000a12:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000a14:	4b27      	ldr	r3, [pc, #156]	; (8000ab4 <prvHeapInit+0xac>)
 8000a16:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	f003 0307 	and.w	r3, r3, #7
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d00c      	beq.n	8000a3c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	3307      	adds	r3, #7
 8000a26:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	f023 0307 	bic.w	r3, r3, #7
 8000a2e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000a30:	68ba      	ldr	r2, [r7, #8]
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	4a1f      	ldr	r2, [pc, #124]	; (8000ab4 <prvHeapInit+0xac>)
 8000a38:	4413      	add	r3, r2
 8000a3a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000a40:	4a1d      	ldr	r2, [pc, #116]	; (8000ab8 <prvHeapInit+0xb0>)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000a46:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <prvHeapInit+0xb0>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	68ba      	ldr	r2, [r7, #8]
 8000a50:	4413      	add	r3, r2
 8000a52:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000a54:	2208      	movs	r2, #8
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	1a9b      	subs	r3, r3, r2
 8000a5a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	f023 0307 	bic.w	r3, r3, #7
 8000a62:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	4a15      	ldr	r2, [pc, #84]	; (8000abc <prvHeapInit+0xb4>)
 8000a68:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000a6a:	4b14      	ldr	r3, [pc, #80]	; (8000abc <prvHeapInit+0xb4>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000a72:	4b12      	ldr	r3, [pc, #72]	; (8000abc <prvHeapInit+0xb4>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	68fa      	ldr	r2, [r7, #12]
 8000a82:	1ad2      	subs	r2, r2, r3
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <prvHeapInit+0xb4>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <prvHeapInit+0xb8>)
 8000a96:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	4a09      	ldr	r2, [pc, #36]	; (8000ac4 <prvHeapInit+0xbc>)
 8000a9e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000aa0:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <prvHeapInit+0xc0>)
 8000aa2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000aa6:	601a      	str	r2, [r3, #0]
}
 8000aa8:	bf00      	nop
 8000aaa:	3714      	adds	r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	2000215c 	.word	0x2000215c
 8000ab8:	20005d5c 	.word	0x20005d5c
 8000abc:	20005d64 	.word	0x20005d64
 8000ac0:	20005d6c 	.word	0x20005d6c
 8000ac4:	20005d68 	.word	0x20005d68
 8000ac8:	20005d70 	.word	0x20005d70

08000acc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000ad4:	4b28      	ldr	r3, [pc, #160]	; (8000b78 <prvInsertBlockIntoFreeList+0xac>)
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	e002      	b.n	8000ae0 <prvInsertBlockIntoFreeList+0x14>
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d8f7      	bhi.n	8000ada <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	68ba      	ldr	r2, [r7, #8]
 8000af4:	4413      	add	r3, r2
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d108      	bne.n	8000b0e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	685a      	ldr	r2, [r3, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	441a      	add	r2, r3
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	68ba      	ldr	r2, [r7, #8]
 8000b18:	441a      	add	r2, r3
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d118      	bne.n	8000b54 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <prvInsertBlockIntoFreeList+0xb0>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d00d      	beq.n	8000b4a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	685a      	ldr	r2, [r3, #4]
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	441a      	add	r2, r3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	e008      	b.n	8000b5c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <prvInsertBlockIntoFreeList+0xb0>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	e003      	b.n	8000b5c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000b5c:	68fa      	ldr	r2, [r7, #12]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d002      	beq.n	8000b6a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000b6a:	bf00      	nop
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	20005d5c 	.word	0x20005d5c
 8000b7c:	20005d64 	.word	0x20005d64

08000b80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <MX_DMA_Init+0x48>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a0f      	ldr	r2, [pc, #60]	; (8000bc8 <MX_DMA_Init+0x48>)
 8000b8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <MX_DMA_Init+0x48>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2105      	movs	r1, #5
 8000ba2:	200c      	movs	r0, #12
 8000ba4:	f001 fe94 	bl	80028d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ba8:	200c      	movs	r0, #12
 8000baa:	f001 fead 	bl	8002908 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2105      	movs	r1, #5
 8000bb2:	200e      	movs	r0, #14
 8000bb4:	f001 fe8c 	bl	80028d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000bb8:	200e      	movs	r0, #14
 8000bba:	f001 fea5 	bl	8002908 <HAL_NVIC_EnableIRQ>

}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800

08000bcc <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000bda:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000bdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000be0:	4904      	ldr	r1, [pc, #16]	; (8000bf4 <cubemx_transport_open+0x28>)
 8000be2:	68f8      	ldr	r0, [r7, #12]
 8000be4:	f005 f876 	bl	8005cd4 <HAL_UART_Receive_DMA>
    return true;
 8000be8:	2301      	movs	r3, #1
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20005d74 	.word	0x20005d74

08000bf8 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000c06:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000c08:	68f8      	ldr	r0, [r7, #12]
 8000c0a:	f005 f8a7 	bl	8005d5c <HAL_UART_DMAStop>
    return true;
 8000c0e:	2301      	movs	r3, #1
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3710      	adds	r7, #16
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, const uint8_t * buf, size_t len, uint8_t * err){
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
 8000c24:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000c2c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000c32:	2b20      	cmp	r3, #32
 8000c34:	d11a      	bne.n	8000c6c <cubemx_transport_write+0x54>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	68b9      	ldr	r1, [r7, #8]
 8000c3e:	6978      	ldr	r0, [r7, #20]
 8000c40:	f004 ffcc 	bl	8005bdc <HAL_UART_Transmit_DMA>
 8000c44:	4603      	mov	r3, r0
 8000c46:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000c48:	e002      	b.n	8000c50 <cubemx_transport_write+0x38>
            osDelay(1);
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f006 ff24 	bl	8007a98 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000c50:	7cfb      	ldrb	r3, [r7, #19]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d103      	bne.n	8000c5e <cubemx_transport_write+0x46>
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000c5a:	2b20      	cmp	r3, #32
 8000c5c:	d1f5      	bne.n	8000c4a <cubemx_transport_write+0x32>
        }

        return (ret == HAL_OK) ? len : 0;
 8000c5e:	7cfb      	ldrb	r3, [r7, #19]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d101      	bne.n	8000c68 <cubemx_transport_write+0x50>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	e002      	b.n	8000c6e <cubemx_transport_write+0x56>
 8000c68:	2300      	movs	r3, #0
 8000c6a:	e000      	b.n	8000c6e <cubemx_transport_write+0x56>
    }else{
        return 0;
 8000c6c:	2300      	movs	r3, #0
    }
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b088      	sub	sp, #32
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
 8000c84:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000c8c:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c92:	b672      	cpsid	i
}
 8000c94:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000ca2:	4a1c      	ldr	r2, [pc, #112]	; (8000d14 <cubemx_transport_read+0x9c>)
 8000ca4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000ca6:	b662      	cpsie	i
}
 8000ca8:	bf00      	nop
        __enable_irq();
        ms_used++;
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	3301      	adds	r3, #1
 8000cae:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f006 fef1 	bl	8007a98 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8000cb6:	4b18      	ldr	r3, [pc, #96]	; (8000d18 <cubemx_transport_read+0xa0>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <cubemx_transport_read+0x9c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d103      	bne.n	8000cca <cubemx_transport_read+0x52>
 8000cc2:	69fa      	ldr	r2, [r7, #28]
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	dbe3      	blt.n	8000c92 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000cce:	e011      	b.n	8000cf4 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8000cd0:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <cubemx_transport_read+0xa0>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	68b9      	ldr	r1, [r7, #8]
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	440b      	add	r3, r1
 8000cda:	4910      	ldr	r1, [pc, #64]	; (8000d1c <cubemx_transport_read+0xa4>)
 8000cdc:	5c8a      	ldrb	r2, [r1, r2]
 8000cde:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8000ce0:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <cubemx_transport_read+0xa0>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000cea:	4a0b      	ldr	r2, [pc, #44]	; (8000d18 <cubemx_transport_read+0xa0>)
 8000cec:	6013      	str	r3, [r2, #0]
        wrote++;
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000cf4:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <cubemx_transport_read+0xa0>)
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <cubemx_transport_read+0x9c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d003      	beq.n	8000d08 <cubemx_transport_read+0x90>
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d3e3      	bcc.n	8000cd0 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8000d08:	69bb      	ldr	r3, [r7, #24]
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3720      	adds	r7, #32
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20006578 	.word	0x20006578
 8000d18:	20006574 	.word	0x20006574
 8000d1c:	20005d74 	.word	0x20005d74

08000d20 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d24:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <MX_FREERTOS_Init+0x18>)
 8000d26:	2100      	movs	r1, #0
 8000d28:	4804      	ldr	r0, [pc, #16]	; (8000d3c <MX_FREERTOS_Init+0x1c>)
 8000d2a:	f006 fe0f 	bl	800794c <osThreadNew>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	4a03      	ldr	r2, [pc, #12]	; (8000d40 <MX_FREERTOS_Init+0x20>)
 8000d32:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	0801a6c4 	.word	0x0801a6c4
 8000d3c:	08000d45 	.word	0x08000d45
 8000d40:	2000657c 	.word	0x2000657c

08000d44 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d44:	b5b0      	push	{r4, r5, r7, lr}
 8000d46:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8000d4a:	af02      	add	r7, sp, #8
 8000d4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000d50:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8000d54:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDefaultTask */
	rmw_uros_set_custom_transport(
 8000d56:	4b6f      	ldr	r3, [pc, #444]	; (8000f14 <StartDefaultTask+0x1d0>)
 8000d58:	9301      	str	r3, [sp, #4]
 8000d5a:	4b6f      	ldr	r3, [pc, #444]	; (8000f18 <StartDefaultTask+0x1d4>)
 8000d5c:	9300      	str	r3, [sp, #0]
 8000d5e:	4b6f      	ldr	r3, [pc, #444]	; (8000f1c <StartDefaultTask+0x1d8>)
 8000d60:	4a6f      	ldr	r2, [pc, #444]	; (8000f20 <StartDefaultTask+0x1dc>)
 8000d62:	4970      	ldr	r1, [pc, #448]	; (8000f24 <StartDefaultTask+0x1e0>)
 8000d64:	2001      	movs	r0, #1
 8000d66:	f00b fa97 	bl	800c298 <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8000d6a:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f00b f9c8 	bl	800c104 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 8000d74:	4b6c      	ldr	r3, [pc, #432]	; (8000f28 <StartDefaultTask+0x1e4>)
 8000d76:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
	freeRTOS_allocator.deallocate = microros_deallocate;
 8000d7a:	4b6c      	ldr	r3, [pc, #432]	; (8000f2c <StartDefaultTask+0x1e8>)
 8000d7c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
	freeRTOS_allocator.reallocate = microros_reallocate;
 8000d80:	4b6b      	ldr	r3, [pc, #428]	; (8000f30 <StartDefaultTask+0x1ec>)
 8000d82:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8000d86:	4b6b      	ldr	r3, [pc, #428]	; (8000f34 <StartDefaultTask+0x1f0>)
 8000d88:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) return;
 8000d8c:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8000d90:	4618      	mov	r0, r3
 8000d92:	f00b f9c5 	bl	800c120 <rcutils_set_default_allocator>
 8000d96:	4603      	mov	r3, r0
 8000d98:	f083 0301 	eor.w	r3, r3, #1
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f040 80a6 	bne.w	8000ef0 <StartDefaultTask+0x1ac>

	rcl_ret_t rc;
	rcl_node_t node; // nodo;
	rcl_service_t setup_service, control_service; //servizi
	const char* setup_service_name = "/setup";
 8000da4:	4b64      	ldr	r3, [pc, #400]	; (8000f38 <StartDefaultTask+0x1f4>)
 8000da6:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
	const char* control_service_name = "/control"; //nomi dei servizi
 8000daa:	4b64      	ldr	r3, [pc, #400]	; (8000f3c <StartDefaultTask+0x1f8>)
 8000dac:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	const rosidl_service_type_support_t* setup_type_support =
		ROSIDL_GET_SRV_TYPE_SUPPORT(racs_services, srv, Setup);
 8000db0:	f009 fba2 	bl	800a4f8 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup>
 8000db4:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
	const rosidl_service_type_support_t* control_type_support =
		ROSIDL_GET_SRV_TYPE_SUPPORT(racs_services, srv, Control);
 8000db8:	f009 fb78 	bl	800a4ac <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control>
 8000dbc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
	racs_services__srv__Setup_Request req_setup;
	racs_services__srv__Setup_Response res_setup;
	racs_services__srv__Control_Request req_control;
	racs_services__srv__Control_Response res_control;

	allocator = rcl_get_default_allocator();
 8000dc0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f00b f9c9 	bl	800c15c <rcutils_get_default_allocator>
 8000dca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000dce:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8000dd2:	f507 74c2 	add.w	r4, r7, #388	; 0x184
 8000dd6:	461d      	mov	r5, r3
 8000dd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ddc:	682b      	ldr	r3, [r5, #0]
 8000dde:	6023      	str	r3, [r4, #0]

	rc = rclc_support_init(&support, 0, NULL, &allocator);
 8000de0:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8000de4:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 8000de8:	2200      	movs	r2, #0
 8000dea:	2100      	movs	r1, #0
 8000dec:	f00b f8bc 	bl	800bf68 <rclc_support_init>
 8000df0:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4
	if (rc != RCL_RET_OK) return;
 8000df4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d17b      	bne.n	8000ef4 <StartDefaultTask+0x1b0>

	rc = rclc_node_init_default(&node, "STM32_node", "", &support);
 8000dfc:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000e00:	f507 70ea 	add.w	r0, r7, #468	; 0x1d4
 8000e04:	4a4e      	ldr	r2, [pc, #312]	; (8000f40 <StartDefaultTask+0x1fc>)
 8000e06:	494f      	ldr	r1, [pc, #316]	; (8000f44 <StartDefaultTask+0x200>)
 8000e08:	f00b f8f8 	bl	800bffc <rclc_node_init_default>
 8000e0c:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4
	if (rc != RCL_RET_OK) return;
 8000e10:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d16f      	bne.n	8000ef8 <StartDefaultTask+0x1b4>

	rc = rclc_service_init_default(
 8000e18:	f507 71ea 	add.w	r1, r7, #468	; 0x1d4
 8000e1c:	f507 70e8 	add.w	r0, r7, #464	; 0x1d0
 8000e20:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000e24:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8000e28:	f00b f92a 	bl	800c080 <rclc_service_init_default>
 8000e2c:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4
		&setup_service, &node, setup_type_support, setup_service_name);

	if (rc != RCL_RET_OK) return;
 8000e30:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d161      	bne.n	8000efc <StartDefaultTask+0x1b8>

	rc = rclc_service_init_default(
 8000e38:	f507 71ea 	add.w	r1, r7, #468	; 0x1d4
 8000e3c:	f507 70e6 	add.w	r0, r7, #460	; 0x1cc
 8000e40:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000e44:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 8000e48:	f00b f91a 	bl	800c080 <rclc_service_init_default>
 8000e4c:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4
		&control_service, &node, control_type_support, control_service_name);

	if (rc != RCL_RET_OK) return;
 8000e50:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d153      	bne.n	8000f00 <StartDefaultTask+0x1bc>

	rclc_executor_t executor;
	executor = rclc_executor_get_zero_initialized_executor();
 8000e58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e5c:	f5a3 74ac 	sub.w	r4, r3, #344	; 0x158
 8000e60:	463b      	mov	r3, r7
 8000e62:	4618      	mov	r0, r3
 8000e64:	f00a fd88 	bl	800b978 <rclc_executor_get_zero_initialized_executor>
 8000e68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e6c:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8000e70:	4620      	mov	r0, r4
 8000e72:	4619      	mov	r1, r3
 8000e74:	2390      	movs	r3, #144	; 0x90
 8000e76:	461a      	mov	r2, r3
 8000e78:	f018 fd51 	bl	801991e <memcpy>
	unsigned int num_handles = 2;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
	rclc_executor_init(&executor, &support.context, num_handles, &allocator);
 8000e82:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8000e86:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 8000e8a:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8000e8e:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8000e92:	f00a fd7d 	bl	800b990 <rclc_executor_init>

	rc = rclc_executor_add_service(
 8000e96:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8000e9a:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8000e9e:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 8000ea2:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8000ea6:	4c28      	ldr	r4, [pc, #160]	; (8000f48 <StartDefaultTask+0x204>)
 8000ea8:	9400      	str	r4, [sp, #0]
 8000eaa:	f00a fded 	bl	800ba88 <rclc_executor_add_service>
 8000eae:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4
		&executor, &setup_service, &req_setup,
		&res_setup, setup_callback);
	if (rc != RCL_RET_OK) return;
 8000eb2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d124      	bne.n	8000f04 <StartDefaultTask+0x1c0>

	rc = rclc_executor_add_service(
 8000eba:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8000ebe:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8000ec2:	f507 71e6 	add.w	r1, r7, #460	; 0x1cc
 8000ec6:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8000eca:	4c20      	ldr	r4, [pc, #128]	; (8000f4c <StartDefaultTask+0x208>)
 8000ecc:	9400      	str	r4, [sp, #0]
 8000ece:	f00a fddb 	bl	800ba88 <rclc_executor_add_service>
 8000ed2:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4
		&executor, &control_service, &req_control,
		&res_control, control_callback);
	if (rc != RCL_RET_OK) return;
 8000ed6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d114      	bne.n	8000f08 <StartDefaultTask+0x1c4>

	rclc_executor_spin(&executor);
 8000ede:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f00b f800 	bl	800bee8 <rclc_executor_spin>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f006 fdd5 	bl	8007a98 <osDelay>
 8000eee:	e7fb      	b.n	8000ee8 <StartDefaultTask+0x1a4>
	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) return;
 8000ef0:	bf00      	nop
 8000ef2:	e00a      	b.n	8000f0a <StartDefaultTask+0x1c6>
	if (rc != RCL_RET_OK) return;
 8000ef4:	bf00      	nop
 8000ef6:	e008      	b.n	8000f0a <StartDefaultTask+0x1c6>
	if (rc != RCL_RET_OK) return;
 8000ef8:	bf00      	nop
 8000efa:	e006      	b.n	8000f0a <StartDefaultTask+0x1c6>
	if (rc != RCL_RET_OK) return;
 8000efc:	bf00      	nop
 8000efe:	e004      	b.n	8000f0a <StartDefaultTask+0x1c6>
	if (rc != RCL_RET_OK) return;
 8000f00:	bf00      	nop
 8000f02:	e002      	b.n	8000f0a <StartDefaultTask+0x1c6>
	if (rc != RCL_RET_OK) return;
 8000f04:	bf00      	nop
 8000f06:	e000      	b.n	8000f0a <StartDefaultTask+0x1c6>
	if (rc != RCL_RET_OK) return;
 8000f08:	bf00      	nop
  }
  /* USER CODE END StartDefaultTask */
}
 8000f0a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bdb0      	pop	{r4, r5, r7, pc}
 8000f12:	bf00      	nop
 8000f14:	08000c79 	.word	0x08000c79
 8000f18:	08000c19 	.word	0x08000c19
 8000f1c:	08000bf9 	.word	0x08000bf9
 8000f20:	08000bcd 	.word	0x08000bcd
 8000f24:	20006900 	.word	0x20006900
 8000f28:	080012fd 	.word	0x080012fd
 8000f2c:	08001341 	.word	0x08001341
 8000f30:	08001379 	.word	0x08001379
 8000f34:	080013e5 	.word	0x080013e5
 8000f38:	0801a66c 	.word	0x0801a66c
 8000f3c:	0801a674 	.word	0x0801a674
 8000f40:	0801a680 	.word	0x0801a680
 8000f44:	0801a684 	.word	0x0801a684
 8000f48:	0800117f 	.word	0x0800117f
 8000f4c:	08001161 	.word	0x08001161

08000f50 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08c      	sub	sp, #48	; 0x30
 8000f54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f56:	f107 031c 	add.w	r3, r7, #28
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]
 8000f64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f66:	4b78      	ldr	r3, [pc, #480]	; (8001148 <MX_GPIO_Init+0x1f8>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a77      	ldr	r2, [pc, #476]	; (8001148 <MX_GPIO_Init+0x1f8>)
 8000f6c:	f043 0310 	orr.w	r3, r3, #16
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b75      	ldr	r3, [pc, #468]	; (8001148 <MX_GPIO_Init+0x1f8>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0310 	and.w	r3, r3, #16
 8000f7a:	61bb      	str	r3, [r7, #24]
 8000f7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f7e:	4b72      	ldr	r3, [pc, #456]	; (8001148 <MX_GPIO_Init+0x1f8>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a71      	ldr	r2, [pc, #452]	; (8001148 <MX_GPIO_Init+0x1f8>)
 8000f84:	f043 0304 	orr.w	r3, r3, #4
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b6f      	ldr	r3, [pc, #444]	; (8001148 <MX_GPIO_Init+0x1f8>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0304 	and.w	r3, r3, #4
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f96:	4b6c      	ldr	r3, [pc, #432]	; (8001148 <MX_GPIO_Init+0x1f8>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a6b      	ldr	r2, [pc, #428]	; (8001148 <MX_GPIO_Init+0x1f8>)
 8000f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b69      	ldr	r3, [pc, #420]	; (8001148 <MX_GPIO_Init+0x1f8>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fae:	4b66      	ldr	r3, [pc, #408]	; (8001148 <MX_GPIO_Init+0x1f8>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a65      	ldr	r2, [pc, #404]	; (8001148 <MX_GPIO_Init+0x1f8>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b63      	ldr	r3, [pc, #396]	; (8001148 <MX_GPIO_Init+0x1f8>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc6:	4b60      	ldr	r3, [pc, #384]	; (8001148 <MX_GPIO_Init+0x1f8>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a5f      	ldr	r2, [pc, #380]	; (8001148 <MX_GPIO_Init+0x1f8>)
 8000fcc:	f043 0302 	orr.w	r3, r3, #2
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b5d      	ldr	r3, [pc, #372]	; (8001148 <MX_GPIO_Init+0x1f8>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fde:	4b5a      	ldr	r3, [pc, #360]	; (8001148 <MX_GPIO_Init+0x1f8>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a59      	ldr	r2, [pc, #356]	; (8001148 <MX_GPIO_Init+0x1f8>)
 8000fe4:	f043 0308 	orr.w	r3, r3, #8
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b57      	ldr	r3, [pc, #348]	; (8001148 <MX_GPIO_Init+0x1f8>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0308 	and.w	r3, r3, #8
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ff6:	4b54      	ldr	r3, [pc, #336]	; (8001148 <MX_GPIO_Init+0x1f8>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a53      	ldr	r2, [pc, #332]	; (8001148 <MX_GPIO_Init+0x1f8>)
 8000ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b51      	ldr	r3, [pc, #324]	; (8001148 <MX_GPIO_Init+0x1f8>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800100e:	2200      	movs	r2, #0
 8001010:	f244 0181 	movw	r1, #16513	; 0x4081
 8001014:	484d      	ldr	r0, [pc, #308]	; (800114c <MX_GPIO_Init+0x1fc>)
 8001016:	f002 fa47 	bl	80034a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MOTOR5_INA_Pin|MOTOR5_INB_Pin|MOTOR1_INA_Pin|MOTOR1_INB_Pin
 800101a:	2200      	movs	r2, #0
 800101c:	f24c 01ff 	movw	r1, #49407	; 0xc0ff
 8001020:	484b      	ldr	r0, [pc, #300]	; (8001150 <MX_GPIO_Init+0x200>)
 8001022:	f002 fa41 	bl	80034a8 <HAL_GPIO_WritePin>
                          |MOTOR2_INA_Pin|MOTOR2_INB_Pin|MOTOR3_INA_Pin|MOTOR3_INB_Pin
                          |MOTOR4_INA_Pin|MOTOR4_INB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, MOTOR6_INA_Pin|MOTOR6_INB_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	214c      	movs	r1, #76	; 0x4c
 800102a:	484a      	ldr	r0, [pc, #296]	; (8001154 <MX_GPIO_Init+0x204>)
 800102c:	f002 fa3c 	bl	80034a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001030:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001034:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001036:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800103a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001040:	f107 031c 	add.w	r3, r7, #28
 8001044:	4619      	mov	r1, r3
 8001046:	4844      	ldr	r0, [pc, #272]	; (8001158 <MX_GPIO_Init+0x208>)
 8001048:	f002 f882 	bl	8003150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800104c:	2332      	movs	r3, #50	; 0x32
 800104e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	2302      	movs	r3, #2
 8001052:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001058:	2303      	movs	r3, #3
 800105a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800105c:	230b      	movs	r3, #11
 800105e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001060:	f107 031c 	add.w	r3, r7, #28
 8001064:	4619      	mov	r1, r3
 8001066:	483c      	ldr	r0, [pc, #240]	; (8001158 <MX_GPIO_Init+0x208>)
 8001068:	f002 f872 	bl	8003150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_CRS_DV_Pin;
 800106c:	2380      	movs	r3, #128	; 0x80
 800106e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2302      	movs	r3, #2
 8001072:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001078:	2303      	movs	r3, #3
 800107a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800107c:	230b      	movs	r3, #11
 800107e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_CRS_DV_GPIO_Port, &GPIO_InitStruct);
 8001080:	f107 031c 	add.w	r3, r7, #28
 8001084:	4619      	mov	r1, r3
 8001086:	4835      	ldr	r0, [pc, #212]	; (800115c <MX_GPIO_Init+0x20c>)
 8001088:	f002 f862 	bl	8003150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800108c:	f244 0381 	movw	r3, #16513	; 0x4081
 8001090:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001092:	2301      	movs	r3, #1
 8001094:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109e:	f107 031c 	add.w	r3, r7, #28
 80010a2:	4619      	mov	r1, r3
 80010a4:	4829      	ldr	r0, [pc, #164]	; (800114c <MX_GPIO_Init+0x1fc>)
 80010a6:	f002 f853 	bl	8003150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80010aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b0:	2302      	movs	r3, #2
 80010b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b8:	2303      	movs	r3, #3
 80010ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010bc:	230b      	movs	r3, #11
 80010be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80010c0:	f107 031c 	add.w	r3, r7, #28
 80010c4:	4619      	mov	r1, r3
 80010c6:	4821      	ldr	r0, [pc, #132]	; (800114c <MX_GPIO_Init+0x1fc>)
 80010c8:	f002 f842 	bl	8003150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = MOTOR5_INA_Pin|MOTOR5_INB_Pin|MOTOR1_INA_Pin|MOTOR1_INB_Pin
 80010cc:	f24c 03ff 	movw	r3, #49407	; 0xc0ff
 80010d0:	61fb      	str	r3, [r7, #28]
                          |MOTOR2_INA_Pin|MOTOR2_INB_Pin|MOTOR3_INA_Pin|MOTOR3_INB_Pin
                          |MOTOR4_INA_Pin|MOTOR4_INB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d2:	2301      	movs	r3, #1
 80010d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010da:	2300      	movs	r3, #0
 80010dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010de:	f107 031c 	add.w	r3, r7, #28
 80010e2:	4619      	mov	r1, r3
 80010e4:	481a      	ldr	r0, [pc, #104]	; (8001150 <MX_GPIO_Init+0x200>)
 80010e6:	f002 f833 	bl	8003150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PG6 */
  GPIO_InitStruct.Pin = MOTOR6_INA_Pin|MOTOR6_INB_Pin|GPIO_PIN_6;
 80010ea:	234c      	movs	r3, #76	; 0x4c
 80010ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ee:	2301      	movs	r3, #1
 80010f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010fa:	f107 031c 	add.w	r3, r7, #28
 80010fe:	4619      	mov	r1, r3
 8001100:	4814      	ldr	r0, [pc, #80]	; (8001154 <MX_GPIO_Init+0x204>)
 8001102:	f002 f825 	bl	8003150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001106:	2380      	movs	r3, #128	; 0x80
 8001108:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800110a:	2300      	movs	r3, #0
 800110c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001112:	f107 031c 	add.w	r3, r7, #28
 8001116:	4619      	mov	r1, r3
 8001118:	480e      	ldr	r0, [pc, #56]	; (8001154 <MX_GPIO_Init+0x204>)
 800111a:	f002 f819 	bl	8003150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800111e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001122:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001124:	2302      	movs	r3, #2
 8001126:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112c:	2303      	movs	r3, #3
 800112e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001130:	230b      	movs	r3, #11
 8001132:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001134:	f107 031c 	add.w	r3, r7, #28
 8001138:	4619      	mov	r1, r3
 800113a:	4806      	ldr	r0, [pc, #24]	; (8001154 <MX_GPIO_Init+0x204>)
 800113c:	f002 f808 	bl	8003150 <HAL_GPIO_Init>

}
 8001140:	bf00      	nop
 8001142:	3730      	adds	r7, #48	; 0x30
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40023800 	.word	0x40023800
 800114c:	40020400 	.word	0x40020400
 8001150:	40020c00 	.word	0x40020c00
 8001154:	40021800 	.word	0x40021800
 8001158:	40020800 	.word	0x40020800
 800115c:	40020000 	.word	0x40020000

08001160 <control_callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void control_callback(const void* request_msg, void* response_msg){
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
		racs_services__srv__Control_Request* req_in =
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	60fb      	str	r3, [r7, #12]
				(racs_services__srv__Control_Request*) request_msg;
		racs_services__srv__Control_Response* res_in =
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	60bb      	str	r3, [r7, #8]
				(racs_services__srv__Control_Response*) response_msg;
		//logica
	}
 8001172:	bf00      	nop
 8001174:	3714      	adds	r7, #20
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <setup_callback>:

void setup_callback(const void* request_msg, void* response_msg){
 800117e:	b480      	push	{r7}
 8001180:	b085      	sub	sp, #20
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
 8001186:	6039      	str	r1, [r7, #0]
		racs_services__srv__Setup_Request* req_in =
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	60fb      	str	r3, [r7, #12]
				(racs_services__srv__Setup_Request*) request_msg;
		racs_services__srv__Setup_Response* res_in =
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	60bb      	str	r3, [r7, #8]
				(racs_services__srv__Setup_Response*) response_msg;


		res_in->response = 0b00000011;
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	2203      	movs	r2, #3
 8001194:	701a      	strb	r2, [r3, #0]
	}
 8001196:	bf00      	nop
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a6:	f001 fa8a 	bl	80026be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011aa:	f000 f81d 	bl	80011e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ae:	f7ff fecf 	bl	8000f50 <MX_GPIO_Init>
  MX_DMA_Init();
 80011b2:	f7ff fce5 	bl	8000b80 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80011b6:	f001 f8b1 	bl	800231c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80011ba:	f001 f9af 	bl	800251c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 80011be:	f000 fc29 	bl	8001a14 <MX_TIM1_Init>
  MX_TIM2_Init();
 80011c2:	f000 fcdb 	bl	8001b7c <MX_TIM2_Init>
  MX_TIM3_Init();
 80011c6:	f000 fd2d 	bl	8001c24 <MX_TIM3_Init>
  MX_TIM4_Init();
 80011ca:	f000 fd81 	bl	8001cd0 <MX_TIM4_Init>
  MX_TIM5_Init();
 80011ce:	f000 fdd5 	bl	8001d7c <MX_TIM5_Init>
  MX_TIM8_Init();
 80011d2:	f000 fe29 	bl	8001e28 <MX_TIM8_Init>
  MX_TIM9_Init();
 80011d6:	f000 fe81 	bl	8001edc <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80011da:	f006 fb4d 	bl	8007878 <osKernelInitialize>
  MX_FREERTOS_Init();
 80011de:	f7ff fd9f 	bl	8000d20 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80011e2:	f006 fb7d 	bl	80078e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011e6:	e7fe      	b.n	80011e6 <main+0x44>

080011e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b094      	sub	sp, #80	; 0x50
 80011ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ee:	f107 031c 	add.w	r3, r7, #28
 80011f2:	2234      	movs	r2, #52	; 0x34
 80011f4:	2100      	movs	r1, #0
 80011f6:	4618      	mov	r0, r3
 80011f8:	f018 fa1c 	bl	8019634 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011fc:	f107 0308 	add.w	r3, r7, #8
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800120c:	f002 faae 	bl	800376c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001210:	4b2c      	ldr	r3, [pc, #176]	; (80012c4 <SystemClock_Config+0xdc>)
 8001212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001214:	4a2b      	ldr	r2, [pc, #172]	; (80012c4 <SystemClock_Config+0xdc>)
 8001216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800121a:	6413      	str	r3, [r2, #64]	; 0x40
 800121c:	4b29      	ldr	r3, [pc, #164]	; (80012c4 <SystemClock_Config+0xdc>)
 800121e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001228:	4b27      	ldr	r3, [pc, #156]	; (80012c8 <SystemClock_Config+0xe0>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001230:	4a25      	ldr	r2, [pc, #148]	; (80012c8 <SystemClock_Config+0xe0>)
 8001232:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001236:	6013      	str	r3, [r2, #0]
 8001238:	4b23      	ldr	r3, [pc, #140]	; (80012c8 <SystemClock_Config+0xe0>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001240:	603b      	str	r3, [r7, #0]
 8001242:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001244:	2301      	movs	r3, #1
 8001246:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001248:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800124c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800124e:	2302      	movs	r3, #2
 8001250:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001252:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001256:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001258:	2304      	movs	r3, #4
 800125a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 800125c:	2360      	movs	r3, #96	; 0x60
 800125e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001260:	2302      	movs	r3, #2
 8001262:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001264:	2304      	movs	r3, #4
 8001266:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001268:	2302      	movs	r3, #2
 800126a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800126c:	f107 031c 	add.w	r3, r7, #28
 8001270:	4618      	mov	r0, r3
 8001272:	f002 fadb 	bl	800382c <HAL_RCC_OscConfig>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800127c:	f000 f838 	bl	80012f0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001280:	f002 fa84 	bl	800378c <HAL_PWREx_EnableOverDrive>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800128a:	f000 f831 	bl	80012f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800128e:	230f      	movs	r3, #15
 8001290:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001292:	2302      	movs	r3, #2
 8001294:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800129a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800129e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80012a4:	f107 0308 	add.w	r3, r7, #8
 80012a8:	2103      	movs	r1, #3
 80012aa:	4618      	mov	r0, r3
 80012ac:	f002 fd6c 	bl	8003d88 <HAL_RCC_ClockConfig>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80012b6:	f000 f81b 	bl	80012f0 <Error_Handler>
  }
}
 80012ba:	bf00      	nop
 80012bc:	3750      	adds	r7, #80	; 0x50
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40007000 	.word	0x40007000

080012cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a04      	ldr	r2, [pc, #16]	; (80012ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d101      	bne.n	80012e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012de:	f001 f9fb 	bl	80026d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40001000 	.word	0x40001000

080012f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80012f4:	b672      	cpsid	i
}
 80012f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <Error_Handler+0x8>
	...

080012fc <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <microros_allocate+0x3c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	461a      	mov	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4413      	add	r3, r2
 8001310:	461a      	mov	r2, r3
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <microros_allocate+0x3c>)
 8001314:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <microros_allocate+0x40>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4413      	add	r3, r2
 8001320:	461a      	mov	r2, r3
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <microros_allocate+0x40>)
 8001324:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff f9d6 	bl	80006d8 <pvPortMallocMicroROS>
 800132c:	4603      	mov	r3, r0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20006580 	.word	0x20006580
 800133c:	20006584 	.word	0x20006584

08001340 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d00c      	beq.n	800136a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff fae9 	bl	8000928 <getBlockSize>
 8001356:	4603      	mov	r3, r0
 8001358:	4a06      	ldr	r2, [pc, #24]	; (8001374 <microros_deallocate+0x34>)
 800135a:	6812      	ldr	r2, [r2, #0]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	461a      	mov	r2, r3
 8001360:	4b04      	ldr	r3, [pc, #16]	; (8001374 <microros_deallocate+0x34>)
 8001362:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff fa81 	bl	800086c <vPortFreeMicroROS>
  }
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20006584 	.word	0x20006584

08001378 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001384:	4b15      	ldr	r3, [pc, #84]	; (80013dc <microros_reallocate+0x64>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	461a      	mov	r2, r3
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	4413      	add	r3, r2
 800138e:	461a      	mov	r2, r3
 8001390:	4b12      	ldr	r3, [pc, #72]	; (80013dc <microros_reallocate+0x64>)
 8001392:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001394:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <microros_reallocate+0x68>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	461a      	mov	r2, r3
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	4413      	add	r3, r2
 800139e:	461a      	mov	r2, r3
 80013a0:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <microros_reallocate+0x68>)
 80013a2:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d104      	bne.n	80013b4 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80013aa:	68b8      	ldr	r0, [r7, #8]
 80013ac:	f7ff f994 	bl	80006d8 <pvPortMallocMicroROS>
 80013b0:	4603      	mov	r3, r0
 80013b2:	e00e      	b.n	80013d2 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80013b4:	68f8      	ldr	r0, [r7, #12]
 80013b6:	f7ff fab7 	bl	8000928 <getBlockSize>
 80013ba:	4603      	mov	r3, r0
 80013bc:	4a08      	ldr	r2, [pc, #32]	; (80013e0 <microros_reallocate+0x68>)
 80013be:	6812      	ldr	r2, [r2, #0]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	461a      	mov	r2, r3
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <microros_reallocate+0x68>)
 80013c6:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80013c8:	68b9      	ldr	r1, [r7, #8]
 80013ca:	68f8      	ldr	r0, [r7, #12]
 80013cc:	f7ff faca 	bl	8000964 <pvPortReallocMicroROS>
 80013d0:	4603      	mov	r3, r0
  }
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20006580 	.word	0x20006580
 80013e0:	20006584 	.word	0x20006584

080013e4 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	68ba      	ldr	r2, [r7, #8]
 80013f4:	fb02 f303 	mul.w	r3, r2, r3
 80013f8:	4a0c      	ldr	r2, [pc, #48]	; (800142c <microros_zero_allocate+0x48>)
 80013fa:	6812      	ldr	r2, [r2, #0]
 80013fc:	4413      	add	r3, r2
 80013fe:	461a      	mov	r2, r3
 8001400:	4b0a      	ldr	r3, [pc, #40]	; (800142c <microros_zero_allocate+0x48>)
 8001402:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	fb02 f303 	mul.w	r3, r2, r3
 800140c:	4a08      	ldr	r2, [pc, #32]	; (8001430 <microros_zero_allocate+0x4c>)
 800140e:	6812      	ldr	r2, [r2, #0]
 8001410:	4413      	add	r3, r2
 8001412:	461a      	mov	r2, r3
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <microros_zero_allocate+0x4c>)
 8001416:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001418:	68b9      	ldr	r1, [r7, #8]
 800141a:	68f8      	ldr	r0, [r7, #12]
 800141c:	f7ff facf 	bl	80009be <pvPortCallocMicroROS>
 8001420:	4603      	mov	r3, r0
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20006580 	.word	0x20006580
 8001430:	20006584 	.word	0x20006584
 8001434:	00000000 	.word	0x00000000

08001438 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001438:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800143c:	b086      	sub	sp, #24
 800143e:	af00      	add	r7, sp, #0
 8001440:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001444:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800144a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800144e:	a320      	add	r3, pc, #128	; (adr r3, 80014d0 <UTILS_NanosecondsToTimespec+0x98>)
 8001450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001454:	f7fe ff5c 	bl	8000310 <__aeabi_ldivmod>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	6879      	ldr	r1, [r7, #4]
 800145e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001462:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001466:	a31a      	add	r3, pc, #104	; (adr r3, 80014d0 <UTILS_NanosecondsToTimespec+0x98>)
 8001468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146c:	f7fe ff50 	bl	8000310 <__aeabi_ldivmod>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	2b00      	cmp	r3, #0
 800147a:	da20      	bge.n	80014be <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	4a11      	ldr	r2, [pc, #68]	; (80014c8 <UTILS_NanosecondsToTimespec+0x90>)
 8001482:	fb82 1203 	smull	r1, r2, r2, r3
 8001486:	1712      	asrs	r2, r2, #28
 8001488:	17db      	asrs	r3, r3, #31
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	3301      	adds	r3, #1
 800148e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001496:	6979      	ldr	r1, [r7, #20]
 8001498:	17c8      	asrs	r0, r1, #31
 800149a:	460c      	mov	r4, r1
 800149c:	4605      	mov	r5, r0
 800149e:	ebb2 0804 	subs.w	r8, r2, r4
 80014a2:	eb63 0905 	sbc.w	r9, r3, r5
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	4906      	ldr	r1, [pc, #24]	; (80014cc <UTILS_NanosecondsToTimespec+0x94>)
 80014b4:	fb01 f303 	mul.w	r3, r1, r3
 80014b8:	441a      	add	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	609a      	str	r2, [r3, #8]
    }
}
 80014be:	bf00      	nop
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80014c8:	44b82fa1 	.word	0x44b82fa1
 80014cc:	3b9aca00 	.word	0x3b9aca00
 80014d0:	3b9aca00 	.word	0x3b9aca00
 80014d4:	00000000 	.word	0x00000000

080014d8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80014d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014dc:	b08e      	sub	sp, #56	; 0x38
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6278      	str	r0, [r7, #36]	; 0x24
 80014e2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80014e4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80014e8:	2300      	movs	r3, #0
 80014ea:	6013      	str	r3, [r2, #0]
 80014ec:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80014ee:	f04f 0200 	mov.w	r2, #0
 80014f2:	f04f 0300 	mov.w	r3, #0
 80014f6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80014fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014fe:	4618      	mov	r0, r3
 8001500:	f007 fdee 	bl	80090e0 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001506:	17da      	asrs	r2, r3, #31
 8001508:	61bb      	str	r3, [r7, #24]
 800150a:	61fa      	str	r2, [r7, #28]
 800150c:	f04f 0200 	mov.w	r2, #0
 8001510:	f04f 0300 	mov.w	r3, #0
 8001514:	69b9      	ldr	r1, [r7, #24]
 8001516:	000b      	movs	r3, r1
 8001518:	2200      	movs	r2, #0
 800151a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800151e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001520:	2200      	movs	r2, #0
 8001522:	461c      	mov	r4, r3
 8001524:	4615      	mov	r5, r2
 8001526:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800152a:	1911      	adds	r1, r2, r4
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	416b      	adcs	r3, r5
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001536:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800153a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	f04f 0400 	mov.w	r4, #0
 8001546:	f04f 0500 	mov.w	r5, #0
 800154a:	015d      	lsls	r5, r3, #5
 800154c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001550:	0154      	lsls	r4, r2, #5
 8001552:	4622      	mov	r2, r4
 8001554:	462b      	mov	r3, r5
 8001556:	ebb2 0800 	subs.w	r8, r2, r0
 800155a:	eb63 0901 	sbc.w	r9, r3, r1
 800155e:	f04f 0200 	mov.w	r2, #0
 8001562:	f04f 0300 	mov.w	r3, #0
 8001566:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800156a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800156e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001572:	4690      	mov	r8, r2
 8001574:	4699      	mov	r9, r3
 8001576:	eb18 0a00 	adds.w	sl, r8, r0
 800157a:	eb49 0b01 	adc.w	fp, r9, r1
 800157e:	f04f 0200 	mov.w	r2, #0
 8001582:	f04f 0300 	mov.w	r3, #0
 8001586:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800158a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800158e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001592:	ebb2 040a 	subs.w	r4, r2, sl
 8001596:	603c      	str	r4, [r7, #0]
 8001598:	eb63 030b 	sbc.w	r3, r3, fp
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80015a2:	4623      	mov	r3, r4
 80015a4:	181b      	adds	r3, r3, r0
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	462b      	mov	r3, r5
 80015aa:	eb41 0303 	adc.w	r3, r1, r3
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	6a3a      	ldr	r2, [r7, #32]
 80015b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015b6:	f7ff ff3f 	bl	8001438 <UTILS_NanosecondsToTimespec>

    return 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	4618      	mov	r0, r3
 80015be:	3738      	adds	r7, #56	; 0x38
 80015c0:	46bd      	mov	sp, r7
 80015c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080015c8 <_Z41__static_initialization_and_destruction_0ii>:

GPIO_TypeDef* Port1A, Port2A, Port3A, Port4A, Port5A, Port6A;
GPIO_TypeDef* Port1B, Port2B, Port3B, Port4B, Port5B, Port6B;

uint16_t Pin1A, Pin2A, Pin3A, Pin4A, Pin5A, Pin6A;
uint16_t Pin1B, Pin2B, Pin3B, Pin4B, Pin5B, Pin6B;
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d137      	bne.n	8001648 <_Z41__static_initialization_and_destruction_0ii+0x80>
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015de:	4293      	cmp	r3, r2
 80015e0:	d132      	bne.n	8001648 <_Z41__static_initialization_and_destruction_0ii+0x80>
PinControl INA1;
 80015e2:	481b      	ldr	r0, [pc, #108]	; (8001650 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80015e4:	f7ff f862 	bl	80006ac <_ZN10PinControlC1Ev>
PinControl INA2, INA3, INA4, INA5, INA6;
 80015e8:	481a      	ldr	r0, [pc, #104]	; (8001654 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80015ea:	f7ff f85f 	bl	80006ac <_ZN10PinControlC1Ev>
 80015ee:	481a      	ldr	r0, [pc, #104]	; (8001658 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80015f0:	f7ff f85c 	bl	80006ac <_ZN10PinControlC1Ev>
 80015f4:	4819      	ldr	r0, [pc, #100]	; (800165c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80015f6:	f7ff f859 	bl	80006ac <_ZN10PinControlC1Ev>
 80015fa:	4819      	ldr	r0, [pc, #100]	; (8001660 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80015fc:	f7ff f856 	bl	80006ac <_ZN10PinControlC1Ev>
 8001600:	4818      	ldr	r0, [pc, #96]	; (8001664 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8001602:	f7ff f853 	bl	80006ac <_ZN10PinControlC1Ev>
PinControl INB1, INB2, INB3, INB4, INB5, INB6;
 8001606:	4818      	ldr	r0, [pc, #96]	; (8001668 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8001608:	f7ff f850 	bl	80006ac <_ZN10PinControlC1Ev>
 800160c:	4817      	ldr	r0, [pc, #92]	; (800166c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800160e:	f7ff f84d 	bl	80006ac <_ZN10PinControlC1Ev>
 8001612:	4817      	ldr	r0, [pc, #92]	; (8001670 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8001614:	f7ff f84a 	bl	80006ac <_ZN10PinControlC1Ev>
 8001618:	4816      	ldr	r0, [pc, #88]	; (8001674 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800161a:	f7ff f847 	bl	80006ac <_ZN10PinControlC1Ev>
 800161e:	4816      	ldr	r0, [pc, #88]	; (8001678 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8001620:	f7ff f844 	bl	80006ac <_ZN10PinControlC1Ev>
 8001624:	4815      	ldr	r0, [pc, #84]	; (800167c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8001626:	f7ff f841 	bl	80006ac <_ZN10PinControlC1Ev>
PinMeasure END1, END2, END3, END4, END5;
 800162a:	4815      	ldr	r0, [pc, #84]	; (8001680 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800162c:	f7ff f849 	bl	80006c2 <_ZN10PinMeasureC1Ev>
 8001630:	4814      	ldr	r0, [pc, #80]	; (8001684 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8001632:	f7ff f846 	bl	80006c2 <_ZN10PinMeasureC1Ev>
 8001636:	4814      	ldr	r0, [pc, #80]	; (8001688 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8001638:	f7ff f843 	bl	80006c2 <_ZN10PinMeasureC1Ev>
 800163c:	4813      	ldr	r0, [pc, #76]	; (800168c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 800163e:	f7ff f840 	bl	80006c2 <_ZN10PinMeasureC1Ev>
 8001642:	4813      	ldr	r0, [pc, #76]	; (8001690 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8001644:	f7ff f83d 	bl	80006c2 <_ZN10PinMeasureC1Ev>
uint16_t Pin1B, Pin2B, Pin3B, Pin4B, Pin5B, Pin6B;
 8001648:	bf00      	nop
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20006588 	.word	0x20006588
 8001654:	20006598 	.word	0x20006598
 8001658:	200065a8 	.word	0x200065a8
 800165c:	200065b8 	.word	0x200065b8
 8001660:	200065c8 	.word	0x200065c8
 8001664:	200065d8 	.word	0x200065d8
 8001668:	200065e8 	.word	0x200065e8
 800166c:	200065f8 	.word	0x200065f8
 8001670:	20006608 	.word	0x20006608
 8001674:	20006618 	.word	0x20006618
 8001678:	20006628 	.word	0x20006628
 800167c:	20006638 	.word	0x20006638
 8001680:	20006648 	.word	0x20006648
 8001684:	20006658 	.word	0x20006658
 8001688:	20006668 	.word	0x20006668
 800168c:	20006678 	.word	0x20006678
 8001690:	20006688 	.word	0x20006688

08001694 <_GLOBAL__sub_I_INA1>:
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
 8001698:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800169c:	2001      	movs	r0, #1
 800169e:	f7ff ff93 	bl	80015c8 <_Z41__static_initialization_and_destruction_0ii>
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80016aa:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <HAL_MspInit+0x4c>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	4a10      	ldr	r2, [pc, #64]	; (80016f0 <HAL_MspInit+0x4c>)
 80016b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b4:	6413      	str	r3, [r2, #64]	; 0x40
 80016b6:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <HAL_MspInit+0x4c>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c2:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <HAL_MspInit+0x4c>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <HAL_MspInit+0x4c>)
 80016c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016cc:	6453      	str	r3, [r2, #68]	; 0x44
 80016ce:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <HAL_MspInit+0x4c>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016d6:	603b      	str	r3, [r7, #0]
 80016d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016da:	2200      	movs	r2, #0
 80016dc:	210f      	movs	r1, #15
 80016de:	f06f 0001 	mvn.w	r0, #1
 80016e2:	f001 f8f5 	bl	80028d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40023800 	.word	0x40023800

080016f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08e      	sub	sp, #56	; 0x38
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001700:	2300      	movs	r3, #0
 8001702:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001704:	4b33      	ldr	r3, [pc, #204]	; (80017d4 <HAL_InitTick+0xe0>)
 8001706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001708:	4a32      	ldr	r2, [pc, #200]	; (80017d4 <HAL_InitTick+0xe0>)
 800170a:	f043 0310 	orr.w	r3, r3, #16
 800170e:	6413      	str	r3, [r2, #64]	; 0x40
 8001710:	4b30      	ldr	r3, [pc, #192]	; (80017d4 <HAL_InitTick+0xe0>)
 8001712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001714:	f003 0310 	and.w	r3, r3, #16
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800171c:	f107 0210 	add.w	r2, r7, #16
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	4611      	mov	r1, r2
 8001726:	4618      	mov	r0, r3
 8001728:	f002 fd54 	bl	80041d4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800172c:	6a3b      	ldr	r3, [r7, #32]
 800172e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001732:	2b00      	cmp	r3, #0
 8001734:	d103      	bne.n	800173e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001736:	f002 fd25 	bl	8004184 <HAL_RCC_GetPCLK1Freq>
 800173a:	6378      	str	r0, [r7, #52]	; 0x34
 800173c:	e004      	b.n	8001748 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800173e:	f002 fd21 	bl	8004184 <HAL_RCC_GetPCLK1Freq>
 8001742:	4603      	mov	r3, r0
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800174a:	4a23      	ldr	r2, [pc, #140]	; (80017d8 <HAL_InitTick+0xe4>)
 800174c:	fba2 2303 	umull	r2, r3, r2, r3
 8001750:	0c9b      	lsrs	r3, r3, #18
 8001752:	3b01      	subs	r3, #1
 8001754:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001756:	4b21      	ldr	r3, [pc, #132]	; (80017dc <HAL_InitTick+0xe8>)
 8001758:	4a21      	ldr	r2, [pc, #132]	; (80017e0 <HAL_InitTick+0xec>)
 800175a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800175c:	4b1f      	ldr	r3, [pc, #124]	; (80017dc <HAL_InitTick+0xe8>)
 800175e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001762:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001764:	4a1d      	ldr	r2, [pc, #116]	; (80017dc <HAL_InitTick+0xe8>)
 8001766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001768:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800176a:	4b1c      	ldr	r3, [pc, #112]	; (80017dc <HAL_InitTick+0xe8>)
 800176c:	2200      	movs	r2, #0
 800176e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001770:	4b1a      	ldr	r3, [pc, #104]	; (80017dc <HAL_InitTick+0xe8>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001776:	4b19      	ldr	r3, [pc, #100]	; (80017dc <HAL_InitTick+0xe8>)
 8001778:	2200      	movs	r2, #0
 800177a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800177c:	4817      	ldr	r0, [pc, #92]	; (80017dc <HAL_InitTick+0xe8>)
 800177e:	f003 f983 	bl	8004a88 <HAL_TIM_Base_Init>
 8001782:	4603      	mov	r3, r0
 8001784:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001788:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800178c:	2b00      	cmp	r3, #0
 800178e:	d11b      	bne.n	80017c8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001790:	4812      	ldr	r0, [pc, #72]	; (80017dc <HAL_InitTick+0xe8>)
 8001792:	f003 f9db 	bl	8004b4c <HAL_TIM_Base_Start_IT>
 8001796:	4603      	mov	r3, r0
 8001798:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800179c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d111      	bne.n	80017c8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017a4:	2036      	movs	r0, #54	; 0x36
 80017a6:	f001 f8af 	bl	8002908 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b0f      	cmp	r3, #15
 80017ae:	d808      	bhi.n	80017c2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80017b0:	2200      	movs	r2, #0
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	2036      	movs	r0, #54	; 0x36
 80017b6:	f001 f88b 	bl	80028d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017ba:	4a0a      	ldr	r2, [pc, #40]	; (80017e4 <HAL_InitTick+0xf0>)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	e002      	b.n	80017c8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80017c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3738      	adds	r7, #56	; 0x38
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40023800 	.word	0x40023800
 80017d8:	431bde83 	.word	0x431bde83
 80017dc:	20006698 	.word	0x20006698
 80017e0:	40001000 	.word	0x40001000
 80017e4:	20000008 	.word	0x20000008

080017e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017ec:	e7fe      	b.n	80017ec <NMI_Handler+0x4>

080017ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f2:	e7fe      	b.n	80017f2 <HardFault_Handler+0x4>

080017f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <MemManage_Handler+0x4>

080017fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017fe:	e7fe      	b.n	80017fe <BusFault_Handler+0x4>

08001800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001804:	e7fe      	b.n	8001804 <UsageFault_Handler+0x4>

08001806 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001818:	4802      	ldr	r0, [pc, #8]	; (8001824 <DMA1_Stream1_IRQHandler+0x10>)
 800181a:	f001 fa23 	bl	8002c64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	200069e8 	.word	0x200069e8

08001828 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800182c:	4802      	ldr	r0, [pc, #8]	; (8001838 <DMA1_Stream3_IRQHandler+0x10>)
 800182e:	f001 fa19 	bl	8002c64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20006988 	.word	0x20006988

0800183c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001840:	4802      	ldr	r0, [pc, #8]	; (800184c <USART3_IRQHandler+0x10>)
 8001842:	f004 fb1d 	bl	8005e80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20006900 	.word	0x20006900

08001850 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001854:	4802      	ldr	r0, [pc, #8]	; (8001860 <TIM6_DAC_IRQHandler+0x10>)
 8001856:	f003 faef 	bl	8004e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20006698 	.word	0x20006698

08001864 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return 1;
 8001868:	2301      	movs	r3, #1
}
 800186a:	4618      	mov	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <_kill>:

int _kill(int pid, int sig)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800187e:	f018 f819 	bl	80198b4 <__errno>
 8001882:	4603      	mov	r3, r0
 8001884:	2216      	movs	r2, #22
 8001886:	601a      	str	r2, [r3, #0]
  return -1;
 8001888:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800188c:	4618      	mov	r0, r3
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <_exit>:

void _exit (int status)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800189c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f7ff ffe7 	bl	8001874 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018a6:	e7fe      	b.n	80018a6 <_exit+0x12>

080018a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	e00a      	b.n	80018d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018ba:	f3af 8000 	nop.w
 80018be:	4601      	mov	r1, r0
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	1c5a      	adds	r2, r3, #1
 80018c4:	60ba      	str	r2, [r7, #8]
 80018c6:	b2ca      	uxtb	r2, r1
 80018c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	3301      	adds	r3, #1
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	dbf0      	blt.n	80018ba <_read+0x12>
  }

  return len;
 80018d8:	687b      	ldr	r3, [r7, #4]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b086      	sub	sp, #24
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	60f8      	str	r0, [r7, #12]
 80018ea:	60b9      	str	r1, [r7, #8]
 80018ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
 80018f2:	e009      	b.n	8001908 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	1c5a      	adds	r2, r3, #1
 80018f8:	60ba      	str	r2, [r7, #8]
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	3301      	adds	r3, #1
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	697a      	ldr	r2, [r7, #20]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	429a      	cmp	r2, r3
 800190e:	dbf1      	blt.n	80018f4 <_write+0x12>
  }
  return len;
 8001910:	687b      	ldr	r3, [r7, #4]
}
 8001912:	4618      	mov	r0, r3
 8001914:	3718      	adds	r7, #24
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <_close>:

int _close(int file)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001922:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001926:	4618      	mov	r0, r3
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
 800193a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001942:	605a      	str	r2, [r3, #4]
  return 0;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <_isatty>:

int _isatty(int file)
{
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800195a:	2301      	movs	r3, #1
}
 800195c:	4618      	mov	r0, r3
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
	...

08001984 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800198c:	4a14      	ldr	r2, [pc, #80]	; (80019e0 <_sbrk+0x5c>)
 800198e:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <_sbrk+0x60>)
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001998:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <_sbrk+0x64>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d102      	bne.n	80019a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019a0:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <_sbrk+0x64>)
 80019a2:	4a12      	ldr	r2, [pc, #72]	; (80019ec <_sbrk+0x68>)
 80019a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019a6:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <_sbrk+0x64>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d207      	bcs.n	80019c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019b4:	f017 ff7e 	bl	80198b4 <__errno>
 80019b8:	4603      	mov	r3, r0
 80019ba:	220c      	movs	r2, #12
 80019bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019c2:	e009      	b.n	80019d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019c4:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <_sbrk+0x64>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ca:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <_sbrk+0x64>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4413      	add	r3, r2
 80019d2:	4a05      	ldr	r2, [pc, #20]	; (80019e8 <_sbrk+0x64>)
 80019d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019d6:	68fb      	ldr	r3, [r7, #12]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20080000 	.word	0x20080000
 80019e4:	00000400 	.word	0x00000400
 80019e8:	200066e8 	.word	0x200066e8
 80019ec:	20010b30 	.word	0x20010b30

080019f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019f4:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <SystemInit+0x20>)
 80019f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019fa:	4a05      	ldr	r2, [pc, #20]	; (8001a10 <SystemInit+0x20>)
 80019fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b096      	sub	sp, #88	; 0x58
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a1a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	605a      	str	r2, [r3, #4]
 8001a30:	609a      	str	r2, [r3, #8]
 8001a32:	60da      	str	r2, [r3, #12]
 8001a34:	611a      	str	r2, [r3, #16]
 8001a36:	615a      	str	r2, [r3, #20]
 8001a38:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a3a:	1d3b      	adds	r3, r7, #4
 8001a3c:	222c      	movs	r2, #44	; 0x2c
 8001a3e:	2100      	movs	r1, #0
 8001a40:	4618      	mov	r0, r3
 8001a42:	f017 fdf7 	bl	8019634 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a46:	4b4b      	ldr	r3, [pc, #300]	; (8001b74 <MX_TIM1_Init+0x160>)
 8001a48:	4a4b      	ldr	r2, [pc, #300]	; (8001b78 <MX_TIM1_Init+0x164>)
 8001a4a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a4c:	4b49      	ldr	r3, [pc, #292]	; (8001b74 <MX_TIM1_Init+0x160>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a52:	4b48      	ldr	r3, [pc, #288]	; (8001b74 <MX_TIM1_Init+0x160>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a58:	4b46      	ldr	r3, [pc, #280]	; (8001b74 <MX_TIM1_Init+0x160>)
 8001a5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a5e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a60:	4b44      	ldr	r3, [pc, #272]	; (8001b74 <MX_TIM1_Init+0x160>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a66:	4b43      	ldr	r3, [pc, #268]	; (8001b74 <MX_TIM1_Init+0x160>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a6c:	4b41      	ldr	r3, [pc, #260]	; (8001b74 <MX_TIM1_Init+0x160>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a72:	4840      	ldr	r0, [pc, #256]	; (8001b74 <MX_TIM1_Init+0x160>)
 8001a74:	f003 f8e2 	bl	8004c3c <HAL_TIM_PWM_Init>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001a7e:	f7ff fc37 	bl	80012f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a82:	2300      	movs	r3, #0
 8001a84:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a86:	2300      	movs	r3, #0
 8001a88:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a92:	4619      	mov	r1, r3
 8001a94:	4837      	ldr	r0, [pc, #220]	; (8001b74 <MX_TIM1_Init+0x160>)
 8001a96:	f003 ff29 	bl	80058ec <HAL_TIMEx_MasterConfigSynchronization>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001aa0:	f7ff fc26 	bl	80012f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aa4:	2360      	movs	r3, #96	; 0x60
 8001aa6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aac:	2300      	movs	r3, #0
 8001aae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001abc:	2300      	movs	r3, #0
 8001abe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ac0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	482a      	ldr	r0, [pc, #168]	; (8001b74 <MX_TIM1_Init+0x160>)
 8001aca:	f003 fad5 	bl	8005078 <HAL_TIM_PWM_ConfigChannel>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001ad4:	f7ff fc0c 	bl	80012f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ad8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001adc:	2204      	movs	r2, #4
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4824      	ldr	r0, [pc, #144]	; (8001b74 <MX_TIM1_Init+0x160>)
 8001ae2:	f003 fac9 	bl	8005078 <HAL_TIM_PWM_ConfigChannel>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001aec:	f7ff fc00 	bl	80012f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001af0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001af4:	2208      	movs	r2, #8
 8001af6:	4619      	mov	r1, r3
 8001af8:	481e      	ldr	r0, [pc, #120]	; (8001b74 <MX_TIM1_Init+0x160>)
 8001afa:	f003 fabd 	bl	8005078 <HAL_TIM_PWM_ConfigChannel>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001b04:	f7ff fbf4 	bl	80012f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b0c:	220c      	movs	r2, #12
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4818      	ldr	r0, [pc, #96]	; (8001b74 <MX_TIM1_Init+0x160>)
 8001b12:	f003 fab1 	bl	8005078 <HAL_TIM_PWM_ConfigChannel>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8001b1c:	f7ff fbe8 	bl	80012f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b20:	2300      	movs	r3, #0
 8001b22:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b24:	2300      	movs	r3, #0
 8001b26:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b38:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b46:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	4619      	mov	r1, r3
 8001b54:	4807      	ldr	r0, [pc, #28]	; (8001b74 <MX_TIM1_Init+0x160>)
 8001b56:	f003 ff57 	bl	8005a08 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8001b60:	f7ff fbc6 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b64:	4803      	ldr	r0, [pc, #12]	; (8001b74 <MX_TIM1_Init+0x160>)
 8001b66:	f000 fb7d 	bl	8002264 <HAL_TIM_MspPostInit>

}
 8001b6a:	bf00      	nop
 8001b6c:	3758      	adds	r7, #88	; 0x58
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	200066ec 	.word	0x200066ec
 8001b78:	40010000 	.word	0x40010000

08001b7c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08c      	sub	sp, #48	; 0x30
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b82:	f107 030c 	add.w	r3, r7, #12
 8001b86:	2224      	movs	r2, #36	; 0x24
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f017 fd52 	bl	8019634 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b90:	463b      	mov	r3, r7
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b9a:	4b21      	ldr	r3, [pc, #132]	; (8001c20 <MX_TIM2_Init+0xa4>)
 8001b9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ba0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ba2:	4b1f      	ldr	r3, [pc, #124]	; (8001c20 <MX_TIM2_Init+0xa4>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba8:	4b1d      	ldr	r3, [pc, #116]	; (8001c20 <MX_TIM2_Init+0xa4>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001bae:	4b1c      	ldr	r3, [pc, #112]	; (8001c20 <MX_TIM2_Init+0xa4>)
 8001bb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bb4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb6:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <MX_TIM2_Init+0xa4>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bbc:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <MX_TIM2_Init+0xa4>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bde:	2300      	movs	r3, #0
 8001be0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001be6:	f107 030c 	add.w	r3, r7, #12
 8001bea:	4619      	mov	r1, r3
 8001bec:	480c      	ldr	r0, [pc, #48]	; (8001c20 <MX_TIM2_Init+0xa4>)
 8001bee:	f003 f87d 	bl	8004cec <HAL_TIM_Encoder_Init>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001bf8:	f7ff fb7a 	bl	80012f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c04:	463b      	mov	r3, r7
 8001c06:	4619      	mov	r1, r3
 8001c08:	4805      	ldr	r0, [pc, #20]	; (8001c20 <MX_TIM2_Init+0xa4>)
 8001c0a:	f003 fe6f 	bl	80058ec <HAL_TIMEx_MasterConfigSynchronization>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001c14:	f7ff fb6c 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c18:	bf00      	nop
 8001c1a:	3730      	adds	r7, #48	; 0x30
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20006738 	.word	0x20006738

08001c24 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08c      	sub	sp, #48	; 0x30
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c2a:	f107 030c 	add.w	r3, r7, #12
 8001c2e:	2224      	movs	r2, #36	; 0x24
 8001c30:	2100      	movs	r1, #0
 8001c32:	4618      	mov	r0, r3
 8001c34:	f017 fcfe 	bl	8019634 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c38:	463b      	mov	r3, r7
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	605a      	str	r2, [r3, #4]
 8001c40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c42:	4b21      	ldr	r3, [pc, #132]	; (8001cc8 <MX_TIM3_Init+0xa4>)
 8001c44:	4a21      	ldr	r2, [pc, #132]	; (8001ccc <MX_TIM3_Init+0xa8>)
 8001c46:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c48:	4b1f      	ldr	r3, [pc, #124]	; (8001cc8 <MX_TIM3_Init+0xa4>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c4e:	4b1e      	ldr	r3, [pc, #120]	; (8001cc8 <MX_TIM3_Init+0xa4>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c54:	4b1c      	ldr	r3, [pc, #112]	; (8001cc8 <MX_TIM3_Init+0xa4>)
 8001c56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c5a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c5c:	4b1a      	ldr	r3, [pc, #104]	; (8001cc8 <MX_TIM3_Init+0xa4>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c62:	4b19      	ldr	r3, [pc, #100]	; (8001cc8 <MX_TIM3_Init+0xa4>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c70:	2301      	movs	r3, #1
 8001c72:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c74:	2300      	movs	r3, #0
 8001c76:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c80:	2301      	movs	r3, #1
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c84:	2300      	movs	r3, #0
 8001c86:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001c8c:	f107 030c 	add.w	r3, r7, #12
 8001c90:	4619      	mov	r1, r3
 8001c92:	480d      	ldr	r0, [pc, #52]	; (8001cc8 <MX_TIM3_Init+0xa4>)
 8001c94:	f003 f82a 	bl	8004cec <HAL_TIM_Encoder_Init>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001c9e:	f7ff fb27 	bl	80012f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001caa:	463b      	mov	r3, r7
 8001cac:	4619      	mov	r1, r3
 8001cae:	4806      	ldr	r0, [pc, #24]	; (8001cc8 <MX_TIM3_Init+0xa4>)
 8001cb0:	f003 fe1c 	bl	80058ec <HAL_TIMEx_MasterConfigSynchronization>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001cba:	f7ff fb19 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001cbe:	bf00      	nop
 8001cc0:	3730      	adds	r7, #48	; 0x30
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20006784 	.word	0x20006784
 8001ccc:	40000400 	.word	0x40000400

08001cd0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08c      	sub	sp, #48	; 0x30
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cd6:	f107 030c 	add.w	r3, r7, #12
 8001cda:	2224      	movs	r2, #36	; 0x24
 8001cdc:	2100      	movs	r1, #0
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f017 fca8 	bl	8019634 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce4:	463b      	mov	r3, r7
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	605a      	str	r2, [r3, #4]
 8001cec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001cee:	4b21      	ldr	r3, [pc, #132]	; (8001d74 <MX_TIM4_Init+0xa4>)
 8001cf0:	4a21      	ldr	r2, [pc, #132]	; (8001d78 <MX_TIM4_Init+0xa8>)
 8001cf2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001cf4:	4b1f      	ldr	r3, [pc, #124]	; (8001d74 <MX_TIM4_Init+0xa4>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cfa:	4b1e      	ldr	r3, [pc, #120]	; (8001d74 <MX_TIM4_Init+0xa4>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001d00:	4b1c      	ldr	r3, [pc, #112]	; (8001d74 <MX_TIM4_Init+0xa4>)
 8001d02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d06:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d08:	4b1a      	ldr	r3, [pc, #104]	; (8001d74 <MX_TIM4_Init+0xa4>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d0e:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <MX_TIM4_Init+0xa4>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001d14:	2301      	movs	r3, #1
 8001d16:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d20:	2300      	movs	r3, #0
 8001d22:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d30:	2300      	movs	r3, #0
 8001d32:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001d38:	f107 030c 	add.w	r3, r7, #12
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	480d      	ldr	r0, [pc, #52]	; (8001d74 <MX_TIM4_Init+0xa4>)
 8001d40:	f002 ffd4 	bl	8004cec <HAL_TIM_Encoder_Init>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001d4a:	f7ff fad1 	bl	80012f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d52:	2300      	movs	r3, #0
 8001d54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d56:	463b      	mov	r3, r7
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4806      	ldr	r0, [pc, #24]	; (8001d74 <MX_TIM4_Init+0xa4>)
 8001d5c:	f003 fdc6 	bl	80058ec <HAL_TIMEx_MasterConfigSynchronization>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001d66:	f7ff fac3 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d6a:	bf00      	nop
 8001d6c:	3730      	adds	r7, #48	; 0x30
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	200067d0 	.word	0x200067d0
 8001d78:	40000800 	.word	0x40000800

08001d7c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08c      	sub	sp, #48	; 0x30
 8001d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d82:	f107 030c 	add.w	r3, r7, #12
 8001d86:	2224      	movs	r2, #36	; 0x24
 8001d88:	2100      	movs	r1, #0
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f017 fc52 	bl	8019634 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d90:	463b      	mov	r3, r7
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	605a      	str	r2, [r3, #4]
 8001d98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001d9a:	4b21      	ldr	r3, [pc, #132]	; (8001e20 <MX_TIM5_Init+0xa4>)
 8001d9c:	4a21      	ldr	r2, [pc, #132]	; (8001e24 <MX_TIM5_Init+0xa8>)
 8001d9e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001da0:	4b1f      	ldr	r3, [pc, #124]	; (8001e20 <MX_TIM5_Init+0xa4>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da6:	4b1e      	ldr	r3, [pc, #120]	; (8001e20 <MX_TIM5_Init+0xa4>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001dac:	4b1c      	ldr	r3, [pc, #112]	; (8001e20 <MX_TIM5_Init+0xa4>)
 8001dae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001db2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001db4:	4b1a      	ldr	r3, [pc, #104]	; (8001e20 <MX_TIM5_Init+0xa4>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dba:	4b19      	ldr	r3, [pc, #100]	; (8001e20 <MX_TIM5_Init+0xa4>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001de4:	f107 030c 	add.w	r3, r7, #12
 8001de8:	4619      	mov	r1, r3
 8001dea:	480d      	ldr	r0, [pc, #52]	; (8001e20 <MX_TIM5_Init+0xa4>)
 8001dec:	f002 ff7e 	bl	8004cec <HAL_TIM_Encoder_Init>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8001df6:	f7ff fa7b 	bl	80012f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e02:	463b      	mov	r3, r7
 8001e04:	4619      	mov	r1, r3
 8001e06:	4806      	ldr	r0, [pc, #24]	; (8001e20 <MX_TIM5_Init+0xa4>)
 8001e08:	f003 fd70 	bl	80058ec <HAL_TIMEx_MasterConfigSynchronization>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8001e12:	f7ff fa6d 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001e16:	bf00      	nop
 8001e18:	3730      	adds	r7, #48	; 0x30
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	2000681c 	.word	0x2000681c
 8001e24:	40000c00 	.word	0x40000c00

08001e28 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08c      	sub	sp, #48	; 0x30
 8001e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e2e:	f107 030c 	add.w	r3, r7, #12
 8001e32:	2224      	movs	r2, #36	; 0x24
 8001e34:	2100      	movs	r1, #0
 8001e36:	4618      	mov	r0, r3
 8001e38:	f017 fbfc 	bl	8019634 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e3c:	463b      	mov	r3, r7
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	605a      	str	r2, [r3, #4]
 8001e44:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001e46:	4b23      	ldr	r3, [pc, #140]	; (8001ed4 <MX_TIM8_Init+0xac>)
 8001e48:	4a23      	ldr	r2, [pc, #140]	; (8001ed8 <MX_TIM8_Init+0xb0>)
 8001e4a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001e4c:	4b21      	ldr	r3, [pc, #132]	; (8001ed4 <MX_TIM8_Init+0xac>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e52:	4b20      	ldr	r3, [pc, #128]	; (8001ed4 <MX_TIM8_Init+0xac>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001e58:	4b1e      	ldr	r3, [pc, #120]	; (8001ed4 <MX_TIM8_Init+0xac>)
 8001e5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e5e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e60:	4b1c      	ldr	r3, [pc, #112]	; (8001ed4 <MX_TIM8_Init+0xac>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001e66:	4b1b      	ldr	r3, [pc, #108]	; (8001ed4 <MX_TIM8_Init+0xac>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e6c:	4b19      	ldr	r3, [pc, #100]	; (8001ed4 <MX_TIM8_Init+0xac>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001e72:	2301      	movs	r3, #1
 8001e74:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e76:	2300      	movs	r3, #0
 8001e78:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e86:	2300      	movs	r3, #0
 8001e88:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001e92:	2300      	movs	r3, #0
 8001e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001e96:	f107 030c 	add.w	r3, r7, #12
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	480d      	ldr	r0, [pc, #52]	; (8001ed4 <MX_TIM8_Init+0xac>)
 8001e9e:	f002 ff25 	bl	8004cec <HAL_TIM_Encoder_Init>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001ea8:	f7ff fa22 	bl	80012f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eac:	2300      	movs	r3, #0
 8001eae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001eb8:	463b      	mov	r3, r7
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4805      	ldr	r0, [pc, #20]	; (8001ed4 <MX_TIM8_Init+0xac>)
 8001ebe:	f003 fd15 	bl	80058ec <HAL_TIMEx_MasterConfigSynchronization>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001ec8:	f7ff fa12 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001ecc:	bf00      	nop
 8001ece:	3730      	adds	r7, #48	; 0x30
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20006868 	.word	0x20006868
 8001ed8:	40010400 	.word	0x40010400

08001edc <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b088      	sub	sp, #32
 8001ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ee2:	1d3b      	adds	r3, r7, #4
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]
 8001ef0:	615a      	str	r2, [r3, #20]
 8001ef2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001ef4:	4b1f      	ldr	r3, [pc, #124]	; (8001f74 <MX_TIM9_Init+0x98>)
 8001ef6:	4a20      	ldr	r2, [pc, #128]	; (8001f78 <MX_TIM9_Init+0x9c>)
 8001ef8:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001efa:	4b1e      	ldr	r3, [pc, #120]	; (8001f74 <MX_TIM9_Init+0x98>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f00:	4b1c      	ldr	r3, [pc, #112]	; (8001f74 <MX_TIM9_Init+0x98>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001f06:	4b1b      	ldr	r3, [pc, #108]	; (8001f74 <MX_TIM9_Init+0x98>)
 8001f08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f0c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f0e:	4b19      	ldr	r3, [pc, #100]	; (8001f74 <MX_TIM9_Init+0x98>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f14:	4b17      	ldr	r3, [pc, #92]	; (8001f74 <MX_TIM9_Init+0x98>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001f1a:	4816      	ldr	r0, [pc, #88]	; (8001f74 <MX_TIM9_Init+0x98>)
 8001f1c:	f002 fe8e 	bl	8004c3c <HAL_TIM_PWM_Init>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8001f26:	f7ff f9e3 	bl	80012f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f2a:	2360      	movs	r3, #96	; 0x60
 8001f2c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f3a:	1d3b      	adds	r3, r7, #4
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	4619      	mov	r1, r3
 8001f40:	480c      	ldr	r0, [pc, #48]	; (8001f74 <MX_TIM9_Init+0x98>)
 8001f42:	f003 f899 	bl	8005078 <HAL_TIM_PWM_ConfigChannel>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8001f4c:	f7ff f9d0 	bl	80012f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f50:	1d3b      	adds	r3, r7, #4
 8001f52:	2204      	movs	r2, #4
 8001f54:	4619      	mov	r1, r3
 8001f56:	4807      	ldr	r0, [pc, #28]	; (8001f74 <MX_TIM9_Init+0x98>)
 8001f58:	f003 f88e 	bl	8005078 <HAL_TIM_PWM_ConfigChannel>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8001f62:	f7ff f9c5 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001f66:	4803      	ldr	r0, [pc, #12]	; (8001f74 <MX_TIM9_Init+0x98>)
 8001f68:	f000 f97c 	bl	8002264 <HAL_TIM_MspPostInit>

}
 8001f6c:	bf00      	nop
 8001f6e:	3720      	adds	r7, #32
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	200068b4 	.word	0x200068b4
 8001f78:	40014000 	.word	0x40014000

08001f7c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a13      	ldr	r2, [pc, #76]	; (8001fd8 <HAL_TIM_PWM_MspInit+0x5c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d10c      	bne.n	8001fa8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f8e:	4b13      	ldr	r3, [pc, #76]	; (8001fdc <HAL_TIM_PWM_MspInit+0x60>)
 8001f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f92:	4a12      	ldr	r2, [pc, #72]	; (8001fdc <HAL_TIM_PWM_MspInit+0x60>)
 8001f94:	f043 0301 	orr.w	r3, r3, #1
 8001f98:	6453      	str	r3, [r2, #68]	; 0x44
 8001f9a:	4b10      	ldr	r3, [pc, #64]	; (8001fdc <HAL_TIM_PWM_MspInit+0x60>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8001fa6:	e010      	b.n	8001fca <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM9)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a0c      	ldr	r2, [pc, #48]	; (8001fe0 <HAL_TIM_PWM_MspInit+0x64>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d10b      	bne.n	8001fca <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001fb2:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <HAL_TIM_PWM_MspInit+0x60>)
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb6:	4a09      	ldr	r2, [pc, #36]	; (8001fdc <HAL_TIM_PWM_MspInit+0x60>)
 8001fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001fbe:	4b07      	ldr	r3, [pc, #28]	; (8001fdc <HAL_TIM_PWM_MspInit+0x60>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc6:	60bb      	str	r3, [r7, #8]
 8001fc8:	68bb      	ldr	r3, [r7, #8]
}
 8001fca:	bf00      	nop
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	40010000 	.word	0x40010000
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40014000 	.word	0x40014000

08001fe4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b094      	sub	sp, #80	; 0x50
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002004:	d144      	bne.n	8002090 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002006:	4b8e      	ldr	r3, [pc, #568]	; (8002240 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	4a8d      	ldr	r2, [pc, #564]	; (8002240 <HAL_TIM_Encoder_MspInit+0x25c>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	6413      	str	r3, [r2, #64]	; 0x40
 8002012:	4b8b      	ldr	r3, [pc, #556]	; (8002240 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	63bb      	str	r3, [r7, #56]	; 0x38
 800201c:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800201e:	4b88      	ldr	r3, [pc, #544]	; (8002240 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	4a87      	ldr	r2, [pc, #540]	; (8002240 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	6313      	str	r3, [r2, #48]	; 0x30
 800202a:	4b85      	ldr	r3, [pc, #532]	; (8002240 <HAL_TIM_Encoder_MspInit+0x25c>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	637b      	str	r3, [r7, #52]	; 0x34
 8002034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002036:	4b82      	ldr	r3, [pc, #520]	; (8002240 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	4a81      	ldr	r2, [pc, #516]	; (8002240 <HAL_TIM_Encoder_MspInit+0x25c>)
 800203c:	f043 0302 	orr.w	r3, r3, #2
 8002040:	6313      	str	r3, [r2, #48]	; 0x30
 8002042:	4b7f      	ldr	r3, [pc, #508]	; (8002240 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	633b      	str	r3, [r7, #48]	; 0x30
 800204c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800204e:	2320      	movs	r3, #32
 8002050:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002052:	2302      	movs	r3, #2
 8002054:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205a:	2300      	movs	r3, #0
 800205c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800205e:	2301      	movs	r3, #1
 8002060:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002062:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002066:	4619      	mov	r1, r3
 8002068:	4876      	ldr	r0, [pc, #472]	; (8002244 <HAL_TIM_Encoder_MspInit+0x260>)
 800206a:	f001 f871 	bl	8003150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800206e:	2308      	movs	r3, #8
 8002070:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002072:	2302      	movs	r3, #2
 8002074:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207a:	2300      	movs	r3, #0
 800207c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800207e:	2301      	movs	r3, #1
 8002080:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002082:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002086:	4619      	mov	r1, r3
 8002088:	486f      	ldr	r0, [pc, #444]	; (8002248 <HAL_TIM_Encoder_MspInit+0x264>)
 800208a:	f001 f861 	bl	8003150 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800208e:	e0d3      	b.n	8002238 <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM3)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a6d      	ldr	r2, [pc, #436]	; (800224c <HAL_TIM_Encoder_MspInit+0x268>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d144      	bne.n	8002124 <HAL_TIM_Encoder_MspInit+0x140>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800209a:	4b69      	ldr	r3, [pc, #420]	; (8002240 <HAL_TIM_Encoder_MspInit+0x25c>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	4a68      	ldr	r2, [pc, #416]	; (8002240 <HAL_TIM_Encoder_MspInit+0x25c>)
 80020a0:	f043 0302 	orr.w	r3, r3, #2
 80020a4:	6413      	str	r3, [r2, #64]	; 0x40
 80020a6:	4b66      	ldr	r3, [pc, #408]	; (8002240 <HAL_TIM_Encoder_MspInit+0x25c>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b2:	4b63      	ldr	r3, [pc, #396]	; (8002240 <HAL_TIM_Encoder_MspInit+0x25c>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	4a62      	ldr	r2, [pc, #392]	; (8002240 <HAL_TIM_Encoder_MspInit+0x25c>)
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	6313      	str	r3, [r2, #48]	; 0x30
 80020be:	4b60      	ldr	r3, [pc, #384]	; (8002240 <HAL_TIM_Encoder_MspInit+0x25c>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80020c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ca:	4b5d      	ldr	r3, [pc, #372]	; (8002240 <HAL_TIM_Encoder_MspInit+0x25c>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	4a5c      	ldr	r2, [pc, #368]	; (8002240 <HAL_TIM_Encoder_MspInit+0x25c>)
 80020d0:	f043 0302 	orr.w	r3, r3, #2
 80020d4:	6313      	str	r3, [r2, #48]	; 0x30
 80020d6:	4b5a      	ldr	r3, [pc, #360]	; (8002240 <HAL_TIM_Encoder_MspInit+0x25c>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	627b      	str	r3, [r7, #36]	; 0x24
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80020e2:	2340      	movs	r3, #64	; 0x40
 80020e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e6:	2302      	movs	r3, #2
 80020e8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ee:	2300      	movs	r3, #0
 80020f0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020f2:	2302      	movs	r3, #2
 80020f4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80020fa:	4619      	mov	r1, r3
 80020fc:	4851      	ldr	r0, [pc, #324]	; (8002244 <HAL_TIM_Encoder_MspInit+0x260>)
 80020fe:	f001 f827 	bl	8003150 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002102:	2320      	movs	r3, #32
 8002104:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002106:	2302      	movs	r3, #2
 8002108:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210e:	2300      	movs	r3, #0
 8002110:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002112:	2302      	movs	r3, #2
 8002114:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002116:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800211a:	4619      	mov	r1, r3
 800211c:	484a      	ldr	r0, [pc, #296]	; (8002248 <HAL_TIM_Encoder_MspInit+0x264>)
 800211e:	f001 f817 	bl	8003150 <HAL_GPIO_Init>
}
 8002122:	e089      	b.n	8002238 <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM4)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a49      	ldr	r2, [pc, #292]	; (8002250 <HAL_TIM_Encoder_MspInit+0x26c>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d129      	bne.n	8002182 <HAL_TIM_Encoder_MspInit+0x19e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800212e:	4b44      	ldr	r3, [pc, #272]	; (8002240 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	4a43      	ldr	r2, [pc, #268]	; (8002240 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002134:	f043 0304 	orr.w	r3, r3, #4
 8002138:	6413      	str	r3, [r2, #64]	; 0x40
 800213a:	4b41      	ldr	r3, [pc, #260]	; (8002240 <HAL_TIM_Encoder_MspInit+0x25c>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	623b      	str	r3, [r7, #32]
 8002144:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002146:	4b3e      	ldr	r3, [pc, #248]	; (8002240 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	4a3d      	ldr	r2, [pc, #244]	; (8002240 <HAL_TIM_Encoder_MspInit+0x25c>)
 800214c:	f043 0308 	orr.w	r3, r3, #8
 8002150:	6313      	str	r3, [r2, #48]	; 0x30
 8002152:	4b3b      	ldr	r3, [pc, #236]	; (8002240 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	61fb      	str	r3, [r7, #28]
 800215c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800215e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002162:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002164:	2302      	movs	r3, #2
 8002166:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216c:	2300      	movs	r3, #0
 800216e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002170:	2302      	movs	r3, #2
 8002172:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002174:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002178:	4619      	mov	r1, r3
 800217a:	4836      	ldr	r0, [pc, #216]	; (8002254 <HAL_TIM_Encoder_MspInit+0x270>)
 800217c:	f000 ffe8 	bl	8003150 <HAL_GPIO_Init>
}
 8002180:	e05a      	b.n	8002238 <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM5)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a34      	ldr	r2, [pc, #208]	; (8002258 <HAL_TIM_Encoder_MspInit+0x274>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d128      	bne.n	80021de <HAL_TIM_Encoder_MspInit+0x1fa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800218c:	4b2c      	ldr	r3, [pc, #176]	; (8002240 <HAL_TIM_Encoder_MspInit+0x25c>)
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	4a2b      	ldr	r2, [pc, #172]	; (8002240 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002192:	f043 0308 	orr.w	r3, r3, #8
 8002196:	6413      	str	r3, [r2, #64]	; 0x40
 8002198:	4b29      	ldr	r3, [pc, #164]	; (8002240 <HAL_TIM_Encoder_MspInit+0x25c>)
 800219a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219c:	f003 0308 	and.w	r3, r3, #8
 80021a0:	61bb      	str	r3, [r7, #24]
 80021a2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a4:	4b26      	ldr	r3, [pc, #152]	; (8002240 <HAL_TIM_Encoder_MspInit+0x25c>)
 80021a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a8:	4a25      	ldr	r2, [pc, #148]	; (8002240 <HAL_TIM_Encoder_MspInit+0x25c>)
 80021aa:	f043 0301 	orr.w	r3, r3, #1
 80021ae:	6313      	str	r3, [r2, #48]	; 0x30
 80021b0:	4b23      	ldr	r3, [pc, #140]	; (8002240 <HAL_TIM_Encoder_MspInit+0x25c>)
 80021b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021bc:	2303      	movs	r3, #3
 80021be:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c0:	2302      	movs	r3, #2
 80021c2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c8:	2300      	movs	r3, #0
 80021ca:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80021cc:	2302      	movs	r3, #2
 80021ce:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80021d4:	4619      	mov	r1, r3
 80021d6:	481b      	ldr	r0, [pc, #108]	; (8002244 <HAL_TIM_Encoder_MspInit+0x260>)
 80021d8:	f000 ffba 	bl	8003150 <HAL_GPIO_Init>
}
 80021dc:	e02c      	b.n	8002238 <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM8)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a1e      	ldr	r2, [pc, #120]	; (800225c <HAL_TIM_Encoder_MspInit+0x278>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d127      	bne.n	8002238 <HAL_TIM_Encoder_MspInit+0x254>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80021e8:	4b15      	ldr	r3, [pc, #84]	; (8002240 <HAL_TIM_Encoder_MspInit+0x25c>)
 80021ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ec:	4a14      	ldr	r2, [pc, #80]	; (8002240 <HAL_TIM_Encoder_MspInit+0x25c>)
 80021ee:	f043 0302 	orr.w	r3, r3, #2
 80021f2:	6453      	str	r3, [r2, #68]	; 0x44
 80021f4:	4b12      	ldr	r3, [pc, #72]	; (8002240 <HAL_TIM_Encoder_MspInit+0x25c>)
 80021f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	613b      	str	r3, [r7, #16]
 80021fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002200:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002204:	4a0e      	ldr	r2, [pc, #56]	; (8002240 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002206:	f043 0304 	orr.w	r3, r3, #4
 800220a:	6313      	str	r3, [r2, #48]	; 0x30
 800220c:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <HAL_TIM_Encoder_MspInit+0x25c>)
 800220e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002218:	23c0      	movs	r3, #192	; 0xc0
 800221a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221c:	2302      	movs	r3, #2
 800221e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002224:	2300      	movs	r3, #0
 8002226:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002228:	2303      	movs	r3, #3
 800222a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800222c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002230:	4619      	mov	r1, r3
 8002232:	480b      	ldr	r0, [pc, #44]	; (8002260 <HAL_TIM_Encoder_MspInit+0x27c>)
 8002234:	f000 ff8c 	bl	8003150 <HAL_GPIO_Init>
}
 8002238:	bf00      	nop
 800223a:	3750      	adds	r7, #80	; 0x50
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40023800 	.word	0x40023800
 8002244:	40020000 	.word	0x40020000
 8002248:	40020400 	.word	0x40020400
 800224c:	40000400 	.word	0x40000400
 8002250:	40000800 	.word	0x40000800
 8002254:	40020c00 	.word	0x40020c00
 8002258:	40000c00 	.word	0x40000c00
 800225c:	40010400 	.word	0x40010400
 8002260:	40020800 	.word	0x40020800

08002264 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b08a      	sub	sp, #40	; 0x28
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800226c:	f107 0314 	add.w	r3, r7, #20
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	60da      	str	r2, [r3, #12]
 800227a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a22      	ldr	r2, [pc, #136]	; (800230c <HAL_TIM_MspPostInit+0xa8>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d11d      	bne.n	80022c2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002286:	4b22      	ldr	r3, [pc, #136]	; (8002310 <HAL_TIM_MspPostInit+0xac>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	4a21      	ldr	r2, [pc, #132]	; (8002310 <HAL_TIM_MspPostInit+0xac>)
 800228c:	f043 0310 	orr.w	r3, r3, #16
 8002290:	6313      	str	r3, [r2, #48]	; 0x30
 8002292:	4b1f      	ldr	r3, [pc, #124]	; (8002310 <HAL_TIM_MspPostInit+0xac>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	f003 0310 	and.w	r3, r3, #16
 800229a:	613b      	str	r3, [r7, #16]
 800229c:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800229e:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80022a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a4:	2302      	movs	r3, #2
 80022a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ac:	2300      	movs	r3, #0
 80022ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022b0:	2301      	movs	r3, #1
 80022b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022b4:	f107 0314 	add.w	r3, r7, #20
 80022b8:	4619      	mov	r1, r3
 80022ba:	4816      	ldr	r0, [pc, #88]	; (8002314 <HAL_TIM_MspPostInit+0xb0>)
 80022bc:	f000 ff48 	bl	8003150 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80022c0:	e020      	b.n	8002304 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM9)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a14      	ldr	r2, [pc, #80]	; (8002318 <HAL_TIM_MspPostInit+0xb4>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d11b      	bne.n	8002304 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022cc:	4b10      	ldr	r3, [pc, #64]	; (8002310 <HAL_TIM_MspPostInit+0xac>)
 80022ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d0:	4a0f      	ldr	r2, [pc, #60]	; (8002310 <HAL_TIM_MspPostInit+0xac>)
 80022d2:	f043 0310 	orr.w	r3, r3, #16
 80022d6:	6313      	str	r3, [r2, #48]	; 0x30
 80022d8:	4b0d      	ldr	r3, [pc, #52]	; (8002310 <HAL_TIM_MspPostInit+0xac>)
 80022da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022dc:	f003 0310 	and.w	r3, r3, #16
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80022e4:	2360      	movs	r3, #96	; 0x60
 80022e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e8:	2302      	movs	r3, #2
 80022ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f0:	2300      	movs	r3, #0
 80022f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80022f4:	2303      	movs	r3, #3
 80022f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022f8:	f107 0314 	add.w	r3, r7, #20
 80022fc:	4619      	mov	r1, r3
 80022fe:	4805      	ldr	r0, [pc, #20]	; (8002314 <HAL_TIM_MspPostInit+0xb0>)
 8002300:	f000 ff26 	bl	8003150 <HAL_GPIO_Init>
}
 8002304:	bf00      	nop
 8002306:	3728      	adds	r7, #40	; 0x28
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40010000 	.word	0x40010000
 8002310:	40023800 	.word	0x40023800
 8002314:	40021000 	.word	0x40021000
 8002318:	40014000 	.word	0x40014000

0800231c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002320:	4b14      	ldr	r3, [pc, #80]	; (8002374 <MX_USART3_UART_Init+0x58>)
 8002322:	4a15      	ldr	r2, [pc, #84]	; (8002378 <MX_USART3_UART_Init+0x5c>)
 8002324:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002326:	4b13      	ldr	r3, [pc, #76]	; (8002374 <MX_USART3_UART_Init+0x58>)
 8002328:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800232c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800232e:	4b11      	ldr	r3, [pc, #68]	; (8002374 <MX_USART3_UART_Init+0x58>)
 8002330:	2200      	movs	r2, #0
 8002332:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002334:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <MX_USART3_UART_Init+0x58>)
 8002336:	2200      	movs	r2, #0
 8002338:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800233a:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <MX_USART3_UART_Init+0x58>)
 800233c:	2200      	movs	r2, #0
 800233e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002340:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <MX_USART3_UART_Init+0x58>)
 8002342:	220c      	movs	r2, #12
 8002344:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002346:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <MX_USART3_UART_Init+0x58>)
 8002348:	2200      	movs	r2, #0
 800234a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800234c:	4b09      	ldr	r3, [pc, #36]	; (8002374 <MX_USART3_UART_Init+0x58>)
 800234e:	2200      	movs	r2, #0
 8002350:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002352:	4b08      	ldr	r3, [pc, #32]	; (8002374 <MX_USART3_UART_Init+0x58>)
 8002354:	2200      	movs	r2, #0
 8002356:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002358:	4b06      	ldr	r3, [pc, #24]	; (8002374 <MX_USART3_UART_Init+0x58>)
 800235a:	2200      	movs	r2, #0
 800235c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800235e:	4805      	ldr	r0, [pc, #20]	; (8002374 <MX_USART3_UART_Init+0x58>)
 8002360:	f003 fbee 	bl	8005b40 <HAL_UART_Init>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800236a:	f7fe ffc1 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20006900 	.word	0x20006900
 8002378:	40004800 	.word	0x40004800

0800237c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b0ae      	sub	sp, #184	; 0xb8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002384:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	60da      	str	r2, [r3, #12]
 8002392:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002394:	f107 0314 	add.w	r3, r7, #20
 8002398:	2290      	movs	r2, #144	; 0x90
 800239a:	2100      	movs	r1, #0
 800239c:	4618      	mov	r0, r3
 800239e:	f017 f949 	bl	8019634 <memset>
  if(uartHandle->Instance==USART3)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a56      	ldr	r2, [pc, #344]	; (8002500 <HAL_UART_MspInit+0x184>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	f040 80a4 	bne.w	80024f6 <HAL_UART_MspInit+0x17a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80023ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023b2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80023b4:	2300      	movs	r3, #0
 80023b6:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023b8:	f107 0314 	add.w	r3, r7, #20
 80023bc:	4618      	mov	r0, r3
 80023be:	f001 ff3b 	bl	8004238 <HAL_RCCEx_PeriphCLKConfig>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80023c8:	f7fe ff92 	bl	80012f0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80023cc:	4b4d      	ldr	r3, [pc, #308]	; (8002504 <HAL_UART_MspInit+0x188>)
 80023ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d0:	4a4c      	ldr	r2, [pc, #304]	; (8002504 <HAL_UART_MspInit+0x188>)
 80023d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023d6:	6413      	str	r3, [r2, #64]	; 0x40
 80023d8:	4b4a      	ldr	r3, [pc, #296]	; (8002504 <HAL_UART_MspInit+0x188>)
 80023da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023e0:	613b      	str	r3, [r7, #16]
 80023e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023e4:	4b47      	ldr	r3, [pc, #284]	; (8002504 <HAL_UART_MspInit+0x188>)
 80023e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e8:	4a46      	ldr	r2, [pc, #280]	; (8002504 <HAL_UART_MspInit+0x188>)
 80023ea:	f043 0308 	orr.w	r3, r3, #8
 80023ee:	6313      	str	r3, [r2, #48]	; 0x30
 80023f0:	4b44      	ldr	r3, [pc, #272]	; (8002504 <HAL_UART_MspInit+0x188>)
 80023f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f4:	f003 0308 	and.w	r3, r3, #8
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80023fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002400:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002404:	2302      	movs	r3, #2
 8002406:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240a:	2300      	movs	r3, #0
 800240c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002410:	2303      	movs	r3, #3
 8002412:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002416:	2307      	movs	r3, #7
 8002418:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800241c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002420:	4619      	mov	r1, r3
 8002422:	4839      	ldr	r0, [pc, #228]	; (8002508 <HAL_UART_MspInit+0x18c>)
 8002424:	f000 fe94 	bl	8003150 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002428:	4b38      	ldr	r3, [pc, #224]	; (800250c <HAL_UART_MspInit+0x190>)
 800242a:	4a39      	ldr	r2, [pc, #228]	; (8002510 <HAL_UART_MspInit+0x194>)
 800242c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800242e:	4b37      	ldr	r3, [pc, #220]	; (800250c <HAL_UART_MspInit+0x190>)
 8002430:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002434:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002436:	4b35      	ldr	r3, [pc, #212]	; (800250c <HAL_UART_MspInit+0x190>)
 8002438:	2240      	movs	r2, #64	; 0x40
 800243a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800243c:	4b33      	ldr	r3, [pc, #204]	; (800250c <HAL_UART_MspInit+0x190>)
 800243e:	2200      	movs	r2, #0
 8002440:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002442:	4b32      	ldr	r3, [pc, #200]	; (800250c <HAL_UART_MspInit+0x190>)
 8002444:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002448:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800244a:	4b30      	ldr	r3, [pc, #192]	; (800250c <HAL_UART_MspInit+0x190>)
 800244c:	2200      	movs	r2, #0
 800244e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002450:	4b2e      	ldr	r3, [pc, #184]	; (800250c <HAL_UART_MspInit+0x190>)
 8002452:	2200      	movs	r2, #0
 8002454:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002456:	4b2d      	ldr	r3, [pc, #180]	; (800250c <HAL_UART_MspInit+0x190>)
 8002458:	2200      	movs	r2, #0
 800245a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800245c:	4b2b      	ldr	r3, [pc, #172]	; (800250c <HAL_UART_MspInit+0x190>)
 800245e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002462:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002464:	4b29      	ldr	r3, [pc, #164]	; (800250c <HAL_UART_MspInit+0x190>)
 8002466:	2200      	movs	r2, #0
 8002468:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800246a:	4828      	ldr	r0, [pc, #160]	; (800250c <HAL_UART_MspInit+0x190>)
 800246c:	f000 fa5a 	bl	8002924 <HAL_DMA_Init>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 8002476:	f7fe ff3b 	bl	80012f0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a23      	ldr	r2, [pc, #140]	; (800250c <HAL_UART_MspInit+0x190>)
 800247e:	671a      	str	r2, [r3, #112]	; 0x70
 8002480:	4a22      	ldr	r2, [pc, #136]	; (800250c <HAL_UART_MspInit+0x190>)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002486:	4b23      	ldr	r3, [pc, #140]	; (8002514 <HAL_UART_MspInit+0x198>)
 8002488:	4a23      	ldr	r2, [pc, #140]	; (8002518 <HAL_UART_MspInit+0x19c>)
 800248a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800248c:	4b21      	ldr	r3, [pc, #132]	; (8002514 <HAL_UART_MspInit+0x198>)
 800248e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002492:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002494:	4b1f      	ldr	r3, [pc, #124]	; (8002514 <HAL_UART_MspInit+0x198>)
 8002496:	2200      	movs	r2, #0
 8002498:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800249a:	4b1e      	ldr	r3, [pc, #120]	; (8002514 <HAL_UART_MspInit+0x198>)
 800249c:	2200      	movs	r2, #0
 800249e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024a0:	4b1c      	ldr	r3, [pc, #112]	; (8002514 <HAL_UART_MspInit+0x198>)
 80024a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024a6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024a8:	4b1a      	ldr	r3, [pc, #104]	; (8002514 <HAL_UART_MspInit+0x198>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024ae:	4b19      	ldr	r3, [pc, #100]	; (8002514 <HAL_UART_MspInit+0x198>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80024b4:	4b17      	ldr	r3, [pc, #92]	; (8002514 <HAL_UART_MspInit+0x198>)
 80024b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024ba:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80024bc:	4b15      	ldr	r3, [pc, #84]	; (8002514 <HAL_UART_MspInit+0x198>)
 80024be:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80024c2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024c4:	4b13      	ldr	r3, [pc, #76]	; (8002514 <HAL_UART_MspInit+0x198>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80024ca:	4812      	ldr	r0, [pc, #72]	; (8002514 <HAL_UART_MspInit+0x198>)
 80024cc:	f000 fa2a 	bl	8002924 <HAL_DMA_Init>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <HAL_UART_MspInit+0x15e>
    {
      Error_Handler();
 80024d6:	f7fe ff0b 	bl	80012f0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a0d      	ldr	r2, [pc, #52]	; (8002514 <HAL_UART_MspInit+0x198>)
 80024de:	675a      	str	r2, [r3, #116]	; 0x74
 80024e0:	4a0c      	ldr	r2, [pc, #48]	; (8002514 <HAL_UART_MspInit+0x198>)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80024e6:	2200      	movs	r2, #0
 80024e8:	2105      	movs	r1, #5
 80024ea:	2027      	movs	r0, #39	; 0x27
 80024ec:	f000 f9f0 	bl	80028d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80024f0:	2027      	movs	r0, #39	; 0x27
 80024f2:	f000 fa09 	bl	8002908 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80024f6:	bf00      	nop
 80024f8:	37b8      	adds	r7, #184	; 0xb8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40004800 	.word	0x40004800
 8002504:	40023800 	.word	0x40023800
 8002508:	40020c00 	.word	0x40020c00
 800250c:	20006988 	.word	0x20006988
 8002510:	40026058 	.word	0x40026058
 8002514:	200069e8 	.word	0x200069e8
 8002518:	40026028 	.word	0x40026028

0800251c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002520:	4b14      	ldr	r3, [pc, #80]	; (8002574 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002522:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002526:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002528:	4b12      	ldr	r3, [pc, #72]	; (8002574 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800252a:	2206      	movs	r2, #6
 800252c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800252e:	4b11      	ldr	r3, [pc, #68]	; (8002574 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002530:	2202      	movs	r2, #2
 8002532:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002534:	4b0f      	ldr	r3, [pc, #60]	; (8002574 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002536:	2200      	movs	r2, #0
 8002538:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800253a:	4b0e      	ldr	r3, [pc, #56]	; (8002574 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800253c:	2202      	movs	r2, #2
 800253e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002540:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002542:	2201      	movs	r2, #1
 8002544:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002546:	4b0b      	ldr	r3, [pc, #44]	; (8002574 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002548:	2200      	movs	r2, #0
 800254a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800254c:	4b09      	ldr	r3, [pc, #36]	; (8002574 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800254e:	2200      	movs	r2, #0
 8002550:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002552:	4b08      	ldr	r3, [pc, #32]	; (8002574 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002554:	2201      	movs	r2, #1
 8002556:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002558:	4b06      	ldr	r3, [pc, #24]	; (8002574 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800255a:	2200      	movs	r2, #0
 800255c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800255e:	4805      	ldr	r0, [pc, #20]	; (8002574 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002560:	f000 ffbb 	bl	80034da <HAL_PCD_Init>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800256a:	f7fe fec1 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20006a48 	.word	0x20006a48

08002578 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b0ae      	sub	sp, #184	; 0xb8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002580:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	605a      	str	r2, [r3, #4]
 800258a:	609a      	str	r2, [r3, #8]
 800258c:	60da      	str	r2, [r3, #12]
 800258e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002590:	f107 0314 	add.w	r3, r7, #20
 8002594:	2290      	movs	r2, #144	; 0x90
 8002596:	2100      	movs	r1, #0
 8002598:	4618      	mov	r0, r3
 800259a:	f017 f84b 	bl	8019634 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025a6:	d159      	bne.n	800265c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80025a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80025ac:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025b4:	f107 0314 	add.w	r3, r7, #20
 80025b8:	4618      	mov	r0, r3
 80025ba:	f001 fe3d 	bl	8004238 <HAL_RCCEx_PeriphCLKConfig>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80025c4:	f7fe fe94 	bl	80012f0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c8:	4b26      	ldr	r3, [pc, #152]	; (8002664 <HAL_PCD_MspInit+0xec>)
 80025ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025cc:	4a25      	ldr	r2, [pc, #148]	; (8002664 <HAL_PCD_MspInit+0xec>)
 80025ce:	f043 0301 	orr.w	r3, r3, #1
 80025d2:	6313      	str	r3, [r2, #48]	; 0x30
 80025d4:	4b23      	ldr	r3, [pc, #140]	; (8002664 <HAL_PCD_MspInit+0xec>)
 80025d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	613b      	str	r3, [r7, #16]
 80025de:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80025e0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80025e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e8:	2302      	movs	r3, #2
 80025ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f4:	2303      	movs	r3, #3
 80025f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80025fa:	230a      	movs	r3, #10
 80025fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002600:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002604:	4619      	mov	r1, r3
 8002606:	4818      	ldr	r0, [pc, #96]	; (8002668 <HAL_PCD_MspInit+0xf0>)
 8002608:	f000 fda2 	bl	8003150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800260c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002610:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002614:	2300      	movs	r3, #0
 8002616:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261a:	2300      	movs	r3, #0
 800261c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002620:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002624:	4619      	mov	r1, r3
 8002626:	4810      	ldr	r0, [pc, #64]	; (8002668 <HAL_PCD_MspInit+0xf0>)
 8002628:	f000 fd92 	bl	8003150 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800262c:	4b0d      	ldr	r3, [pc, #52]	; (8002664 <HAL_PCD_MspInit+0xec>)
 800262e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002630:	4a0c      	ldr	r2, [pc, #48]	; (8002664 <HAL_PCD_MspInit+0xec>)
 8002632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002636:	6353      	str	r3, [r2, #52]	; 0x34
 8002638:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <HAL_PCD_MspInit+0xec>)
 800263a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800263c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	4b07      	ldr	r3, [pc, #28]	; (8002664 <HAL_PCD_MspInit+0xec>)
 8002646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002648:	4a06      	ldr	r2, [pc, #24]	; (8002664 <HAL_PCD_MspInit+0xec>)
 800264a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800264e:	6453      	str	r3, [r2, #68]	; 0x44
 8002650:	4b04      	ldr	r3, [pc, #16]	; (8002664 <HAL_PCD_MspInit+0xec>)
 8002652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002658:	60bb      	str	r3, [r7, #8]
 800265a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800265c:	bf00      	nop
 800265e:	37b8      	adds	r7, #184	; 0xb8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40023800 	.word	0x40023800
 8002668:	40020000 	.word	0x40020000

0800266c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800266c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002670:	480d      	ldr	r0, [pc, #52]	; (80026a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002672:	490e      	ldr	r1, [pc, #56]	; (80026ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002674:	4a0e      	ldr	r2, [pc, #56]	; (80026b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002678:	e002      	b.n	8002680 <LoopCopyDataInit>

0800267a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800267a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800267c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800267e:	3304      	adds	r3, #4

08002680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002684:	d3f9      	bcc.n	800267a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002686:	4a0b      	ldr	r2, [pc, #44]	; (80026b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002688:	4c0b      	ldr	r4, [pc, #44]	; (80026b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800268a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800268c:	e001      	b.n	8002692 <LoopFillZerobss>

0800268e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800268e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002690:	3204      	adds	r2, #4

08002692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002694:	d3fb      	bcc.n	800268e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002696:	f7ff f9ab 	bl	80019f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800269a:	f017 f911 	bl	80198c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800269e:	f7fe fd80 	bl	80011a2 <main>
  bx  lr    
 80026a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026a4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80026a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026ac:	2000213c 	.word	0x2000213c
  ldr r2, =_sidata
 80026b0:	0801c100 	.word	0x0801c100
  ldr r2, =_sbss
 80026b4:	20002140 	.word	0x20002140
  ldr r4, =_ebss
 80026b8:	20010b30 	.word	0x20010b30

080026bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026bc:	e7fe      	b.n	80026bc <ADC_IRQHandler>

080026be <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026c2:	2003      	movs	r0, #3
 80026c4:	f000 f8f9 	bl	80028ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026c8:	200f      	movs	r0, #15
 80026ca:	f7ff f813 	bl	80016f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026ce:	f7fe ffe9 	bl	80016a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026dc:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <HAL_IncTick+0x20>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	461a      	mov	r2, r3
 80026e2:	4b06      	ldr	r3, [pc, #24]	; (80026fc <HAL_IncTick+0x24>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4413      	add	r3, r2
 80026e8:	4a04      	ldr	r2, [pc, #16]	; (80026fc <HAL_IncTick+0x24>)
 80026ea:	6013      	str	r3, [r2, #0]
}
 80026ec:	bf00      	nop
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	2000000c 	.word	0x2000000c
 80026fc:	20006f50 	.word	0x20006f50

08002700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  return uwTick;
 8002704:	4b03      	ldr	r3, [pc, #12]	; (8002714 <HAL_GetTick+0x14>)
 8002706:	681b      	ldr	r3, [r3, #0]
}
 8002708:	4618      	mov	r0, r3
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	20006f50 	.word	0x20006f50

08002718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002720:	f7ff ffee 	bl	8002700 <HAL_GetTick>
 8002724:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002730:	d005      	beq.n	800273e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002732:	4b0a      	ldr	r3, [pc, #40]	; (800275c <HAL_Delay+0x44>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	461a      	mov	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4413      	add	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800273e:	bf00      	nop
 8002740:	f7ff ffde 	bl	8002700 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	429a      	cmp	r2, r3
 800274e:	d8f7      	bhi.n	8002740 <HAL_Delay+0x28>
  {
  }
}
 8002750:	bf00      	nop
 8002752:	bf00      	nop
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	2000000c 	.word	0x2000000c

08002760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002770:	4b0b      	ldr	r3, [pc, #44]	; (80027a0 <__NVIC_SetPriorityGrouping+0x40>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800277c:	4013      	ands	r3, r2
 800277e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002788:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <__NVIC_SetPriorityGrouping+0x44>)
 800278a:	4313      	orrs	r3, r2
 800278c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800278e:	4a04      	ldr	r2, [pc, #16]	; (80027a0 <__NVIC_SetPriorityGrouping+0x40>)
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	60d3      	str	r3, [r2, #12]
}
 8002794:	bf00      	nop
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	e000ed00 	.word	0xe000ed00
 80027a4:	05fa0000 	.word	0x05fa0000

080027a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027ac:	4b04      	ldr	r3, [pc, #16]	; (80027c0 <__NVIC_GetPriorityGrouping+0x18>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	0a1b      	lsrs	r3, r3, #8
 80027b2:	f003 0307 	and.w	r3, r3, #7
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	e000ed00 	.word	0xe000ed00

080027c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	db0b      	blt.n	80027ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	f003 021f 	and.w	r2, r3, #31
 80027dc:	4907      	ldr	r1, [pc, #28]	; (80027fc <__NVIC_EnableIRQ+0x38>)
 80027de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e2:	095b      	lsrs	r3, r3, #5
 80027e4:	2001      	movs	r0, #1
 80027e6:	fa00 f202 	lsl.w	r2, r0, r2
 80027ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	e000e100 	.word	0xe000e100

08002800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	6039      	str	r1, [r7, #0]
 800280a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800280c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002810:	2b00      	cmp	r3, #0
 8002812:	db0a      	blt.n	800282a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	b2da      	uxtb	r2, r3
 8002818:	490c      	ldr	r1, [pc, #48]	; (800284c <__NVIC_SetPriority+0x4c>)
 800281a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281e:	0112      	lsls	r2, r2, #4
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	440b      	add	r3, r1
 8002824:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002828:	e00a      	b.n	8002840 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	b2da      	uxtb	r2, r3
 800282e:	4908      	ldr	r1, [pc, #32]	; (8002850 <__NVIC_SetPriority+0x50>)
 8002830:	79fb      	ldrb	r3, [r7, #7]
 8002832:	f003 030f 	and.w	r3, r3, #15
 8002836:	3b04      	subs	r3, #4
 8002838:	0112      	lsls	r2, r2, #4
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	440b      	add	r3, r1
 800283e:	761a      	strb	r2, [r3, #24]
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	e000e100 	.word	0xe000e100
 8002850:	e000ed00 	.word	0xe000ed00

08002854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002854:	b480      	push	{r7}
 8002856:	b089      	sub	sp, #36	; 0x24
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	f1c3 0307 	rsb	r3, r3, #7
 800286e:	2b04      	cmp	r3, #4
 8002870:	bf28      	it	cs
 8002872:	2304      	movcs	r3, #4
 8002874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	3304      	adds	r3, #4
 800287a:	2b06      	cmp	r3, #6
 800287c:	d902      	bls.n	8002884 <NVIC_EncodePriority+0x30>
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	3b03      	subs	r3, #3
 8002882:	e000      	b.n	8002886 <NVIC_EncodePriority+0x32>
 8002884:	2300      	movs	r3, #0
 8002886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002888:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	43da      	mvns	r2, r3
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	401a      	ands	r2, r3
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800289c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	fa01 f303 	lsl.w	r3, r1, r3
 80028a6:	43d9      	mvns	r1, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ac:	4313      	orrs	r3, r2
         );
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3724      	adds	r7, #36	; 0x24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b082      	sub	sp, #8
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7ff ff4c 	bl	8002760 <__NVIC_SetPriorityGrouping>
}
 80028c8:	bf00      	nop
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
 80028dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028de:	2300      	movs	r3, #0
 80028e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028e2:	f7ff ff61 	bl	80027a8 <__NVIC_GetPriorityGrouping>
 80028e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	68b9      	ldr	r1, [r7, #8]
 80028ec:	6978      	ldr	r0, [r7, #20]
 80028ee:	f7ff ffb1 	bl	8002854 <NVIC_EncodePriority>
 80028f2:	4602      	mov	r2, r0
 80028f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028f8:	4611      	mov	r1, r2
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff ff80 	bl	8002800 <__NVIC_SetPriority>
}
 8002900:	bf00      	nop
 8002902:	3718      	adds	r7, #24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff ff54 	bl	80027c4 <__NVIC_EnableIRQ>
}
 800291c:	bf00      	nop
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002930:	f7ff fee6 	bl	8002700 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d101      	bne.n	8002940 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e099      	b.n	8002a74 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2202      	movs	r2, #2
 8002944:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0201 	bic.w	r2, r2, #1
 800295e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002960:	e00f      	b.n	8002982 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002962:	f7ff fecd 	bl	8002700 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b05      	cmp	r3, #5
 800296e:	d908      	bls.n	8002982 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2220      	movs	r2, #32
 8002974:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2203      	movs	r2, #3
 800297a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e078      	b.n	8002a74 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1e8      	bne.n	8002962 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	4b38      	ldr	r3, [pc, #224]	; (8002a7c <HAL_DMA_Init+0x158>)
 800299c:	4013      	ands	r3, r2
 800299e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	2b04      	cmp	r3, #4
 80029da:	d107      	bne.n	80029ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	4313      	orrs	r3, r2
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f023 0307 	bic.w	r3, r3, #7
 8002a02:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d117      	bne.n	8002a46 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00e      	beq.n	8002a46 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 fb15 	bl	8003058 <DMA_CheckFifoParam>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d008      	beq.n	8002a46 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2240      	movs	r2, #64	; 0x40
 8002a38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a42:	2301      	movs	r3, #1
 8002a44:	e016      	b.n	8002a74 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 facc 	bl	8002fec <DMA_CalcBaseAndBitshift>
 8002a54:	4603      	mov	r3, r0
 8002a56:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5c:	223f      	movs	r2, #63	; 0x3f
 8002a5e:	409a      	lsls	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	e010803f 	.word	0xe010803f

08002a80 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
 8002a8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a96:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d101      	bne.n	8002aa6 <HAL_DMA_Start_IT+0x26>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e048      	b.n	8002b38 <HAL_DMA_Start_IT+0xb8>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d137      	bne.n	8002b2a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2202      	movs	r2, #2
 8002abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	68b9      	ldr	r1, [r7, #8]
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 fa5e 	bl	8002f90 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad8:	223f      	movs	r2, #63	; 0x3f
 8002ada:	409a      	lsls	r2, r3
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 0216 	orr.w	r2, r2, #22
 8002aee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	695a      	ldr	r2, [r3, #20]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002afe:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d007      	beq.n	8002b18 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f042 0208 	orr.w	r2, r2, #8
 8002b16:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0201 	orr.w	r2, r2, #1
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	e005      	b.n	8002b36 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b32:	2302      	movs	r3, #2
 8002b34:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b36:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3718      	adds	r7, #24
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b4e:	f7ff fdd7 	bl	8002700 <HAL_GetTick>
 8002b52:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d008      	beq.n	8002b72 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2280      	movs	r2, #128	; 0x80
 8002b64:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e052      	b.n	8002c18 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0216 	bic.w	r2, r2, #22
 8002b80:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	695a      	ldr	r2, [r3, #20]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b90:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d103      	bne.n	8002ba2 <HAL_DMA_Abort+0x62>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d007      	beq.n	8002bb2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0208 	bic.w	r2, r2, #8
 8002bb0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 0201 	bic.w	r2, r2, #1
 8002bc0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bc2:	e013      	b.n	8002bec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bc4:	f7ff fd9c 	bl	8002700 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b05      	cmp	r3, #5
 8002bd0:	d90c      	bls.n	8002bec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2203      	movs	r2, #3
 8002bdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e015      	b.n	8002c18 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1e4      	bne.n	8002bc4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfe:	223f      	movs	r2, #63	; 0x3f
 8002c00:	409a      	lsls	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d004      	beq.n	8002c3e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2280      	movs	r2, #128	; 0x80
 8002c38:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e00c      	b.n	8002c58 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2205      	movs	r2, #5
 8002c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0201 	bic.w	r2, r2, #1
 8002c54:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002c70:	4b8e      	ldr	r3, [pc, #568]	; (8002eac <HAL_DMA_IRQHandler+0x248>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a8e      	ldr	r2, [pc, #568]	; (8002eb0 <HAL_DMA_IRQHandler+0x24c>)
 8002c76:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7a:	0a9b      	lsrs	r3, r3, #10
 8002c7c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c82:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c8e:	2208      	movs	r2, #8
 8002c90:	409a      	lsls	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4013      	ands	r3, r2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d01a      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d013      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 0204 	bic.w	r2, r2, #4
 8002cb6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cbc:	2208      	movs	r2, #8
 8002cbe:	409a      	lsls	r2, r3
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc8:	f043 0201 	orr.w	r2, r3, #1
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	409a      	lsls	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d012      	beq.n	8002d06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00b      	beq.n	8002d06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	409a      	lsls	r2, r3
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfe:	f043 0202 	orr.w	r2, r3, #2
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0a:	2204      	movs	r2, #4
 8002d0c:	409a      	lsls	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	4013      	ands	r3, r2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d012      	beq.n	8002d3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00b      	beq.n	8002d3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d28:	2204      	movs	r2, #4
 8002d2a:	409a      	lsls	r2, r3
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d34:	f043 0204 	orr.w	r2, r3, #4
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d40:	2210      	movs	r2, #16
 8002d42:	409a      	lsls	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	4013      	ands	r3, r2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d043      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0308 	and.w	r3, r3, #8
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d03c      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5e:	2210      	movs	r2, #16
 8002d60:	409a      	lsls	r2, r3
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d018      	beq.n	8002da6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d108      	bne.n	8002d94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d024      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	4798      	blx	r3
 8002d92:	e01f      	b.n	8002dd4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d01b      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	4798      	blx	r3
 8002da4:	e016      	b.n	8002dd4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d107      	bne.n	8002dc4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0208 	bic.w	r2, r2, #8
 8002dc2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d003      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd8:	2220      	movs	r2, #32
 8002dda:	409a      	lsls	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4013      	ands	r3, r2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 808f 	beq.w	8002f04 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0310 	and.w	r3, r3, #16
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f000 8087 	beq.w	8002f04 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	409a      	lsls	r2, r3
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b05      	cmp	r3, #5
 8002e0c:	d136      	bne.n	8002e7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0216 	bic.w	r2, r2, #22
 8002e1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	695a      	ldr	r2, [r3, #20]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d103      	bne.n	8002e3e <HAL_DMA_IRQHandler+0x1da>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d007      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 0208 	bic.w	r2, r2, #8
 8002e4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e52:	223f      	movs	r2, #63	; 0x3f
 8002e54:	409a      	lsls	r2, r3
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d07e      	beq.n	8002f70 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	4798      	blx	r3
        }
        return;
 8002e7a:	e079      	b.n	8002f70 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d01d      	beq.n	8002ec6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d10d      	bne.n	8002eb4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d031      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	4798      	blx	r3
 8002ea8:	e02c      	b.n	8002f04 <HAL_DMA_IRQHandler+0x2a0>
 8002eaa:	bf00      	nop
 8002eac:	20000004 	.word	0x20000004
 8002eb0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d023      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	4798      	blx	r3
 8002ec4:	e01e      	b.n	8002f04 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10f      	bne.n	8002ef4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 0210 	bic.w	r2, r2, #16
 8002ee2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d003      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d032      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d022      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2205      	movs	r2, #5
 8002f1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0201 	bic.w	r2, r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	3301      	adds	r3, #1
 8002f34:	60bb      	str	r3, [r7, #8]
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d307      	bcc.n	8002f4c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f2      	bne.n	8002f30 <HAL_DMA_IRQHandler+0x2cc>
 8002f4a:	e000      	b.n	8002f4e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f4c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d005      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	4798      	blx	r3
 8002f6e:	e000      	b.n	8002f72 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f70:	bf00      	nop
    }
  }
}
 8002f72:	3718      	adds	r7, #24
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
 8002f9c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002fac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	2b40      	cmp	r3, #64	; 0x40
 8002fbc:	d108      	bne.n	8002fd0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002fce:	e007      	b.n	8002fe0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68ba      	ldr	r2, [r7, #8]
 8002fd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	60da      	str	r2, [r3, #12]
}
 8002fe0:	bf00      	nop
 8002fe2:	3714      	adds	r7, #20
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	3b10      	subs	r3, #16
 8002ffc:	4a13      	ldr	r2, [pc, #76]	; (800304c <DMA_CalcBaseAndBitshift+0x60>)
 8002ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8003002:	091b      	lsrs	r3, r3, #4
 8003004:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003006:	4a12      	ldr	r2, [pc, #72]	; (8003050 <DMA_CalcBaseAndBitshift+0x64>)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4413      	add	r3, r2
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	461a      	mov	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2b03      	cmp	r3, #3
 8003018:	d908      	bls.n	800302c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	461a      	mov	r2, r3
 8003020:	4b0c      	ldr	r3, [pc, #48]	; (8003054 <DMA_CalcBaseAndBitshift+0x68>)
 8003022:	4013      	ands	r3, r2
 8003024:	1d1a      	adds	r2, r3, #4
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	659a      	str	r2, [r3, #88]	; 0x58
 800302a:	e006      	b.n	800303a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	461a      	mov	r2, r3
 8003032:	4b08      	ldr	r3, [pc, #32]	; (8003054 <DMA_CalcBaseAndBitshift+0x68>)
 8003034:	4013      	ands	r3, r2
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800303e:	4618      	mov	r0, r3
 8003040:	3714      	adds	r7, #20
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	aaaaaaab 	.word	0xaaaaaaab
 8003050:	0801a700 	.word	0x0801a700
 8003054:	fffffc00 	.word	0xfffffc00

08003058 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003060:	2300      	movs	r3, #0
 8003062:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003068:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d11f      	bne.n	80030b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2b03      	cmp	r3, #3
 8003076:	d856      	bhi.n	8003126 <DMA_CheckFifoParam+0xce>
 8003078:	a201      	add	r2, pc, #4	; (adr r2, 8003080 <DMA_CheckFifoParam+0x28>)
 800307a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307e:	bf00      	nop
 8003080:	08003091 	.word	0x08003091
 8003084:	080030a3 	.word	0x080030a3
 8003088:	08003091 	.word	0x08003091
 800308c:	08003127 	.word	0x08003127
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003094:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d046      	beq.n	800312a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030a0:	e043      	b.n	800312a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030aa:	d140      	bne.n	800312e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030b0:	e03d      	b.n	800312e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ba:	d121      	bne.n	8003100 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	2b03      	cmp	r3, #3
 80030c0:	d837      	bhi.n	8003132 <DMA_CheckFifoParam+0xda>
 80030c2:	a201      	add	r2, pc, #4	; (adr r2, 80030c8 <DMA_CheckFifoParam+0x70>)
 80030c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c8:	080030d9 	.word	0x080030d9
 80030cc:	080030df 	.word	0x080030df
 80030d0:	080030d9 	.word	0x080030d9
 80030d4:	080030f1 	.word	0x080030f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	73fb      	strb	r3, [r7, #15]
      break;
 80030dc:	e030      	b.n	8003140 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d025      	beq.n	8003136 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ee:	e022      	b.n	8003136 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030f8:	d11f      	bne.n	800313a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030fe:	e01c      	b.n	800313a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	2b02      	cmp	r3, #2
 8003104:	d903      	bls.n	800310e <DMA_CheckFifoParam+0xb6>
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	2b03      	cmp	r3, #3
 800310a:	d003      	beq.n	8003114 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800310c:	e018      	b.n	8003140 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	73fb      	strb	r3, [r7, #15]
      break;
 8003112:	e015      	b.n	8003140 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00e      	beq.n	800313e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	73fb      	strb	r3, [r7, #15]
      break;
 8003124:	e00b      	b.n	800313e <DMA_CheckFifoParam+0xe6>
      break;
 8003126:	bf00      	nop
 8003128:	e00a      	b.n	8003140 <DMA_CheckFifoParam+0xe8>
      break;
 800312a:	bf00      	nop
 800312c:	e008      	b.n	8003140 <DMA_CheckFifoParam+0xe8>
      break;
 800312e:	bf00      	nop
 8003130:	e006      	b.n	8003140 <DMA_CheckFifoParam+0xe8>
      break;
 8003132:	bf00      	nop
 8003134:	e004      	b.n	8003140 <DMA_CheckFifoParam+0xe8>
      break;
 8003136:	bf00      	nop
 8003138:	e002      	b.n	8003140 <DMA_CheckFifoParam+0xe8>
      break;   
 800313a:	bf00      	nop
 800313c:	e000      	b.n	8003140 <DMA_CheckFifoParam+0xe8>
      break;
 800313e:	bf00      	nop
    }
  } 
  
  return status; 
 8003140:	7bfb      	ldrb	r3, [r7, #15]
}
 8003142:	4618      	mov	r0, r3
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop

08003150 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003150:	b480      	push	{r7}
 8003152:	b089      	sub	sp, #36	; 0x24
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800315a:	2300      	movs	r3, #0
 800315c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800315e:	2300      	movs	r3, #0
 8003160:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003162:	2300      	movs	r3, #0
 8003164:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003166:	2300      	movs	r3, #0
 8003168:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800316a:	2300      	movs	r3, #0
 800316c:	61fb      	str	r3, [r7, #28]
 800316e:	e175      	b.n	800345c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003170:	2201      	movs	r2, #1
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	4013      	ands	r3, r2
 8003182:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	429a      	cmp	r2, r3
 800318a:	f040 8164 	bne.w	8003456 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	2b01      	cmp	r3, #1
 8003198:	d005      	beq.n	80031a6 <HAL_GPIO_Init+0x56>
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d130      	bne.n	8003208 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	2203      	movs	r2, #3
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	43db      	mvns	r3, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4013      	ands	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	68da      	ldr	r2, [r3, #12]
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031dc:	2201      	movs	r2, #1
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	43db      	mvns	r3, r3
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	4013      	ands	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	091b      	lsrs	r3, r3, #4
 80031f2:	f003 0201 	and.w	r2, r3, #1
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	4313      	orrs	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f003 0303 	and.w	r3, r3, #3
 8003210:	2b03      	cmp	r3, #3
 8003212:	d017      	beq.n	8003244 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	2203      	movs	r2, #3
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	43db      	mvns	r3, r3
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4013      	ands	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	689a      	ldr	r2, [r3, #8]
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	4313      	orrs	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f003 0303 	and.w	r3, r3, #3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d123      	bne.n	8003298 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	08da      	lsrs	r2, r3, #3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	3208      	adds	r2, #8
 8003258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800325c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	f003 0307 	and.w	r3, r3, #7
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	220f      	movs	r2, #15
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	43db      	mvns	r3, r3
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4013      	ands	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	691a      	ldr	r2, [r3, #16]
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	4313      	orrs	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	08da      	lsrs	r2, r3, #3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	3208      	adds	r2, #8
 8003292:	69b9      	ldr	r1, [r7, #24]
 8003294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	2203      	movs	r2, #3
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	43db      	mvns	r3, r3
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	4013      	ands	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f003 0203 	and.w	r2, r3, #3
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 80be 	beq.w	8003456 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032da:	4b66      	ldr	r3, [pc, #408]	; (8003474 <HAL_GPIO_Init+0x324>)
 80032dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032de:	4a65      	ldr	r2, [pc, #404]	; (8003474 <HAL_GPIO_Init+0x324>)
 80032e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032e4:	6453      	str	r3, [r2, #68]	; 0x44
 80032e6:	4b63      	ldr	r3, [pc, #396]	; (8003474 <HAL_GPIO_Init+0x324>)
 80032e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032ee:	60fb      	str	r3, [r7, #12]
 80032f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80032f2:	4a61      	ldr	r2, [pc, #388]	; (8003478 <HAL_GPIO_Init+0x328>)
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	089b      	lsrs	r3, r3, #2
 80032f8:	3302      	adds	r3, #2
 80032fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	220f      	movs	r2, #15
 800330a:	fa02 f303 	lsl.w	r3, r2, r3
 800330e:	43db      	mvns	r3, r3
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	4013      	ands	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a58      	ldr	r2, [pc, #352]	; (800347c <HAL_GPIO_Init+0x32c>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d037      	beq.n	800338e <HAL_GPIO_Init+0x23e>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a57      	ldr	r2, [pc, #348]	; (8003480 <HAL_GPIO_Init+0x330>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d031      	beq.n	800338a <HAL_GPIO_Init+0x23a>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a56      	ldr	r2, [pc, #344]	; (8003484 <HAL_GPIO_Init+0x334>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d02b      	beq.n	8003386 <HAL_GPIO_Init+0x236>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a55      	ldr	r2, [pc, #340]	; (8003488 <HAL_GPIO_Init+0x338>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d025      	beq.n	8003382 <HAL_GPIO_Init+0x232>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a54      	ldr	r2, [pc, #336]	; (800348c <HAL_GPIO_Init+0x33c>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d01f      	beq.n	800337e <HAL_GPIO_Init+0x22e>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a53      	ldr	r2, [pc, #332]	; (8003490 <HAL_GPIO_Init+0x340>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d019      	beq.n	800337a <HAL_GPIO_Init+0x22a>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a52      	ldr	r2, [pc, #328]	; (8003494 <HAL_GPIO_Init+0x344>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d013      	beq.n	8003376 <HAL_GPIO_Init+0x226>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a51      	ldr	r2, [pc, #324]	; (8003498 <HAL_GPIO_Init+0x348>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d00d      	beq.n	8003372 <HAL_GPIO_Init+0x222>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a50      	ldr	r2, [pc, #320]	; (800349c <HAL_GPIO_Init+0x34c>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d007      	beq.n	800336e <HAL_GPIO_Init+0x21e>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a4f      	ldr	r2, [pc, #316]	; (80034a0 <HAL_GPIO_Init+0x350>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d101      	bne.n	800336a <HAL_GPIO_Init+0x21a>
 8003366:	2309      	movs	r3, #9
 8003368:	e012      	b.n	8003390 <HAL_GPIO_Init+0x240>
 800336a:	230a      	movs	r3, #10
 800336c:	e010      	b.n	8003390 <HAL_GPIO_Init+0x240>
 800336e:	2308      	movs	r3, #8
 8003370:	e00e      	b.n	8003390 <HAL_GPIO_Init+0x240>
 8003372:	2307      	movs	r3, #7
 8003374:	e00c      	b.n	8003390 <HAL_GPIO_Init+0x240>
 8003376:	2306      	movs	r3, #6
 8003378:	e00a      	b.n	8003390 <HAL_GPIO_Init+0x240>
 800337a:	2305      	movs	r3, #5
 800337c:	e008      	b.n	8003390 <HAL_GPIO_Init+0x240>
 800337e:	2304      	movs	r3, #4
 8003380:	e006      	b.n	8003390 <HAL_GPIO_Init+0x240>
 8003382:	2303      	movs	r3, #3
 8003384:	e004      	b.n	8003390 <HAL_GPIO_Init+0x240>
 8003386:	2302      	movs	r3, #2
 8003388:	e002      	b.n	8003390 <HAL_GPIO_Init+0x240>
 800338a:	2301      	movs	r3, #1
 800338c:	e000      	b.n	8003390 <HAL_GPIO_Init+0x240>
 800338e:	2300      	movs	r3, #0
 8003390:	69fa      	ldr	r2, [r7, #28]
 8003392:	f002 0203 	and.w	r2, r2, #3
 8003396:	0092      	lsls	r2, r2, #2
 8003398:	4093      	lsls	r3, r2
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	4313      	orrs	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80033a0:	4935      	ldr	r1, [pc, #212]	; (8003478 <HAL_GPIO_Init+0x328>)
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	089b      	lsrs	r3, r3, #2
 80033a6:	3302      	adds	r3, #2
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033ae:	4b3d      	ldr	r3, [pc, #244]	; (80034a4 <HAL_GPIO_Init+0x354>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	43db      	mvns	r3, r3
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	4013      	ands	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033d2:	4a34      	ldr	r2, [pc, #208]	; (80034a4 <HAL_GPIO_Init+0x354>)
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033d8:	4b32      	ldr	r3, [pc, #200]	; (80034a4 <HAL_GPIO_Init+0x354>)
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	43db      	mvns	r3, r3
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	4013      	ands	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d003      	beq.n	80033fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033fc:	4a29      	ldr	r2, [pc, #164]	; (80034a4 <HAL_GPIO_Init+0x354>)
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003402:	4b28      	ldr	r3, [pc, #160]	; (80034a4 <HAL_GPIO_Init+0x354>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	43db      	mvns	r3, r3
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	4013      	ands	r3, r2
 8003410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	4313      	orrs	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003426:	4a1f      	ldr	r2, [pc, #124]	; (80034a4 <HAL_GPIO_Init+0x354>)
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800342c:	4b1d      	ldr	r3, [pc, #116]	; (80034a4 <HAL_GPIO_Init+0x354>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	43db      	mvns	r3, r3
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	4013      	ands	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d003      	beq.n	8003450 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	4313      	orrs	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003450:	4a14      	ldr	r2, [pc, #80]	; (80034a4 <HAL_GPIO_Init+0x354>)
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	3301      	adds	r3, #1
 800345a:	61fb      	str	r3, [r7, #28]
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	2b0f      	cmp	r3, #15
 8003460:	f67f ae86 	bls.w	8003170 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003464:	bf00      	nop
 8003466:	bf00      	nop
 8003468:	3724      	adds	r7, #36	; 0x24
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	40023800 	.word	0x40023800
 8003478:	40013800 	.word	0x40013800
 800347c:	40020000 	.word	0x40020000
 8003480:	40020400 	.word	0x40020400
 8003484:	40020800 	.word	0x40020800
 8003488:	40020c00 	.word	0x40020c00
 800348c:	40021000 	.word	0x40021000
 8003490:	40021400 	.word	0x40021400
 8003494:	40021800 	.word	0x40021800
 8003498:	40021c00 	.word	0x40021c00
 800349c:	40022000 	.word	0x40022000
 80034a0:	40022400 	.word	0x40022400
 80034a4:	40013c00 	.word	0x40013c00

080034a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	460b      	mov	r3, r1
 80034b2:	807b      	strh	r3, [r7, #2]
 80034b4:	4613      	mov	r3, r2
 80034b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034b8:	787b      	ldrb	r3, [r7, #1]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034be:	887a      	ldrh	r2, [r7, #2]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80034c4:	e003      	b.n	80034ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80034c6:	887b      	ldrh	r3, [r7, #2]
 80034c8:	041a      	lsls	r2, r3, #16
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	619a      	str	r2, [r3, #24]
}
 80034ce:	bf00      	nop
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034dc:	b08f      	sub	sp, #60	; 0x3c
 80034de:	af0a      	add	r7, sp, #40	; 0x28
 80034e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e116      	b.n	800371a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d106      	bne.n	800350c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f7ff f836 	bl	8002578 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2203      	movs	r2, #3
 8003510:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351c:	2b00      	cmp	r3, #0
 800351e:	d102      	bne.n	8003526 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f003 ff00 	bl	8007330 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	603b      	str	r3, [r7, #0]
 8003536:	687e      	ldr	r6, [r7, #4]
 8003538:	466d      	mov	r5, sp
 800353a:	f106 0410 	add.w	r4, r6, #16
 800353e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003540:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003542:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003544:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003546:	e894 0003 	ldmia.w	r4, {r0, r1}
 800354a:	e885 0003 	stmia.w	r5, {r0, r1}
 800354e:	1d33      	adds	r3, r6, #4
 8003550:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003552:	6838      	ldr	r0, [r7, #0]
 8003554:	f003 fe94 	bl	8007280 <USB_CoreInit>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d005      	beq.n	800356a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2202      	movs	r2, #2
 8003562:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e0d7      	b.n	800371a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2100      	movs	r1, #0
 8003570:	4618      	mov	r0, r3
 8003572:	f003 feee 	bl	8007352 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003576:	2300      	movs	r3, #0
 8003578:	73fb      	strb	r3, [r7, #15]
 800357a:	e04a      	b.n	8003612 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800357c:	7bfa      	ldrb	r2, [r7, #15]
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	4413      	add	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	333d      	adds	r3, #61	; 0x3d
 800358c:	2201      	movs	r2, #1
 800358e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003590:	7bfa      	ldrb	r2, [r7, #15]
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	4613      	mov	r3, r2
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	4413      	add	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	333c      	adds	r3, #60	; 0x3c
 80035a0:	7bfa      	ldrb	r2, [r7, #15]
 80035a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80035a4:	7bfa      	ldrb	r2, [r7, #15]
 80035a6:	7bfb      	ldrb	r3, [r7, #15]
 80035a8:	b298      	uxth	r0, r3
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	4613      	mov	r3, r2
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	4413      	add	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	3344      	adds	r3, #68	; 0x44
 80035b8:	4602      	mov	r2, r0
 80035ba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035bc:	7bfa      	ldrb	r2, [r7, #15]
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	4613      	mov	r3, r2
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	4413      	add	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	440b      	add	r3, r1
 80035ca:	3340      	adds	r3, #64	; 0x40
 80035cc:	2200      	movs	r2, #0
 80035ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035d0:	7bfa      	ldrb	r2, [r7, #15]
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	4613      	mov	r3, r2
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	4413      	add	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	3348      	adds	r3, #72	; 0x48
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035e4:	7bfa      	ldrb	r2, [r7, #15]
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	4613      	mov	r3, r2
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	4413      	add	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	334c      	adds	r3, #76	; 0x4c
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035f8:	7bfa      	ldrb	r2, [r7, #15]
 80035fa:	6879      	ldr	r1, [r7, #4]
 80035fc:	4613      	mov	r3, r2
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	4413      	add	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	440b      	add	r3, r1
 8003606:	3354      	adds	r3, #84	; 0x54
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800360c:	7bfb      	ldrb	r3, [r7, #15]
 800360e:	3301      	adds	r3, #1
 8003610:	73fb      	strb	r3, [r7, #15]
 8003612:	7bfa      	ldrb	r2, [r7, #15]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	429a      	cmp	r2, r3
 800361a:	d3af      	bcc.n	800357c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800361c:	2300      	movs	r3, #0
 800361e:	73fb      	strb	r3, [r7, #15]
 8003620:	e044      	b.n	80036ac <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003622:	7bfa      	ldrb	r2, [r7, #15]
 8003624:	6879      	ldr	r1, [r7, #4]
 8003626:	4613      	mov	r3, r2
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	4413      	add	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	440b      	add	r3, r1
 8003630:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003634:	2200      	movs	r2, #0
 8003636:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003638:	7bfa      	ldrb	r2, [r7, #15]
 800363a:	6879      	ldr	r1, [r7, #4]
 800363c:	4613      	mov	r3, r2
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	4413      	add	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800364a:	7bfa      	ldrb	r2, [r7, #15]
 800364c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800364e:	7bfa      	ldrb	r2, [r7, #15]
 8003650:	6879      	ldr	r1, [r7, #4]
 8003652:	4613      	mov	r3, r2
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	4413      	add	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	440b      	add	r3, r1
 800365c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003660:	2200      	movs	r2, #0
 8003662:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003664:	7bfa      	ldrb	r2, [r7, #15]
 8003666:	6879      	ldr	r1, [r7, #4]
 8003668:	4613      	mov	r3, r2
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	4413      	add	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	440b      	add	r3, r1
 8003672:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800367a:	7bfa      	ldrb	r2, [r7, #15]
 800367c:	6879      	ldr	r1, [r7, #4]
 800367e:	4613      	mov	r3, r2
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	4413      	add	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	440b      	add	r3, r1
 8003688:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003690:	7bfa      	ldrb	r2, [r7, #15]
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	4613      	mov	r3, r2
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	4413      	add	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80036a2:	2200      	movs	r2, #0
 80036a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036a6:	7bfb      	ldrb	r3, [r7, #15]
 80036a8:	3301      	adds	r3, #1
 80036aa:	73fb      	strb	r3, [r7, #15]
 80036ac:	7bfa      	ldrb	r2, [r7, #15]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d3b5      	bcc.n	8003622 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	603b      	str	r3, [r7, #0]
 80036bc:	687e      	ldr	r6, [r7, #4]
 80036be:	466d      	mov	r5, sp
 80036c0:	f106 0410 	add.w	r4, r6, #16
 80036c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80036d4:	1d33      	adds	r3, r6, #4
 80036d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036d8:	6838      	ldr	r0, [r7, #0]
 80036da:	f003 fe87 	bl	80073ec <USB_DevInit>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d005      	beq.n	80036f0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e014      	b.n	800371a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	2b01      	cmp	r3, #1
 8003706:	d102      	bne.n	800370e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 f80b 	bl	8003724 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f004 f845 	bl	80077a2 <USB_DevDisconnect>

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003724 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003752:	4b05      	ldr	r3, [pc, #20]	; (8003768 <HAL_PCDEx_ActivateLPM+0x44>)
 8003754:	4313      	orrs	r3, r2
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	10000003 	.word	0x10000003

0800376c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003770:	4b05      	ldr	r3, [pc, #20]	; (8003788 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a04      	ldr	r2, [pc, #16]	; (8003788 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800377a:	6013      	str	r3, [r2, #0]
}
 800377c:	bf00      	nop
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	40007000 	.word	0x40007000

0800378c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003792:	2300      	movs	r3, #0
 8003794:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003796:	4b23      	ldr	r3, [pc, #140]	; (8003824 <HAL_PWREx_EnableOverDrive+0x98>)
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	4a22      	ldr	r2, [pc, #136]	; (8003824 <HAL_PWREx_EnableOverDrive+0x98>)
 800379c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a0:	6413      	str	r3, [r2, #64]	; 0x40
 80037a2:	4b20      	ldr	r3, [pc, #128]	; (8003824 <HAL_PWREx_EnableOverDrive+0x98>)
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037aa:	603b      	str	r3, [r7, #0]
 80037ac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80037ae:	4b1e      	ldr	r3, [pc, #120]	; (8003828 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a1d      	ldr	r2, [pc, #116]	; (8003828 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037ba:	f7fe ffa1 	bl	8002700 <HAL_GetTick>
 80037be:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80037c0:	e009      	b.n	80037d6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80037c2:	f7fe ff9d 	bl	8002700 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037d0:	d901      	bls.n	80037d6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e022      	b.n	800381c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80037d6:	4b14      	ldr	r3, [pc, #80]	; (8003828 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e2:	d1ee      	bne.n	80037c2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80037e4:	4b10      	ldr	r3, [pc, #64]	; (8003828 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a0f      	ldr	r2, [pc, #60]	; (8003828 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037f0:	f7fe ff86 	bl	8002700 <HAL_GetTick>
 80037f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80037f6:	e009      	b.n	800380c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80037f8:	f7fe ff82 	bl	8002700 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003806:	d901      	bls.n	800380c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e007      	b.n	800381c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800380c:	4b06      	ldr	r3, [pc, #24]	; (8003828 <HAL_PWREx_EnableOverDrive+0x9c>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003814:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003818:	d1ee      	bne.n	80037f8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3708      	adds	r7, #8
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	40023800 	.word	0x40023800
 8003828:	40007000 	.word	0x40007000

0800382c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003834:	2300      	movs	r3, #0
 8003836:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e29b      	b.n	8003d7a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b00      	cmp	r3, #0
 800384c:	f000 8087 	beq.w	800395e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003850:	4b96      	ldr	r3, [pc, #600]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f003 030c 	and.w	r3, r3, #12
 8003858:	2b04      	cmp	r3, #4
 800385a:	d00c      	beq.n	8003876 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800385c:	4b93      	ldr	r3, [pc, #588]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 030c 	and.w	r3, r3, #12
 8003864:	2b08      	cmp	r3, #8
 8003866:	d112      	bne.n	800388e <HAL_RCC_OscConfig+0x62>
 8003868:	4b90      	ldr	r3, [pc, #576]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003870:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003874:	d10b      	bne.n	800388e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003876:	4b8d      	ldr	r3, [pc, #564]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d06c      	beq.n	800395c <HAL_RCC_OscConfig+0x130>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d168      	bne.n	800395c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e275      	b.n	8003d7a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003896:	d106      	bne.n	80038a6 <HAL_RCC_OscConfig+0x7a>
 8003898:	4b84      	ldr	r3, [pc, #528]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a83      	ldr	r2, [pc, #524]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 800389e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038a2:	6013      	str	r3, [r2, #0]
 80038a4:	e02e      	b.n	8003904 <HAL_RCC_OscConfig+0xd8>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10c      	bne.n	80038c8 <HAL_RCC_OscConfig+0x9c>
 80038ae:	4b7f      	ldr	r3, [pc, #508]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a7e      	ldr	r2, [pc, #504]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 80038b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038b8:	6013      	str	r3, [r2, #0]
 80038ba:	4b7c      	ldr	r3, [pc, #496]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a7b      	ldr	r2, [pc, #492]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 80038c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038c4:	6013      	str	r3, [r2, #0]
 80038c6:	e01d      	b.n	8003904 <HAL_RCC_OscConfig+0xd8>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038d0:	d10c      	bne.n	80038ec <HAL_RCC_OscConfig+0xc0>
 80038d2:	4b76      	ldr	r3, [pc, #472]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a75      	ldr	r2, [pc, #468]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 80038d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038dc:	6013      	str	r3, [r2, #0]
 80038de:	4b73      	ldr	r3, [pc, #460]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a72      	ldr	r2, [pc, #456]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 80038e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038e8:	6013      	str	r3, [r2, #0]
 80038ea:	e00b      	b.n	8003904 <HAL_RCC_OscConfig+0xd8>
 80038ec:	4b6f      	ldr	r3, [pc, #444]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a6e      	ldr	r2, [pc, #440]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 80038f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038f6:	6013      	str	r3, [r2, #0]
 80038f8:	4b6c      	ldr	r3, [pc, #432]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a6b      	ldr	r2, [pc, #428]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 80038fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003902:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d013      	beq.n	8003934 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390c:	f7fe fef8 	bl	8002700 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003914:	f7fe fef4 	bl	8002700 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b64      	cmp	r3, #100	; 0x64
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e229      	b.n	8003d7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003926:	4b61      	ldr	r3, [pc, #388]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0f0      	beq.n	8003914 <HAL_RCC_OscConfig+0xe8>
 8003932:	e014      	b.n	800395e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003934:	f7fe fee4 	bl	8002700 <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800393c:	f7fe fee0 	bl	8002700 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b64      	cmp	r3, #100	; 0x64
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e215      	b.n	8003d7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800394e:	4b57      	ldr	r3, [pc, #348]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1f0      	bne.n	800393c <HAL_RCC_OscConfig+0x110>
 800395a:	e000      	b.n	800395e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800395c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d069      	beq.n	8003a3e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800396a:	4b50      	ldr	r3, [pc, #320]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 030c 	and.w	r3, r3, #12
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00b      	beq.n	800398e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003976:	4b4d      	ldr	r3, [pc, #308]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 030c 	and.w	r3, r3, #12
 800397e:	2b08      	cmp	r3, #8
 8003980:	d11c      	bne.n	80039bc <HAL_RCC_OscConfig+0x190>
 8003982:	4b4a      	ldr	r3, [pc, #296]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d116      	bne.n	80039bc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800398e:	4b47      	ldr	r3, [pc, #284]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d005      	beq.n	80039a6 <HAL_RCC_OscConfig+0x17a>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d001      	beq.n	80039a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e1e9      	b.n	8003d7a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039a6:	4b41      	ldr	r3, [pc, #260]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	493d      	ldr	r1, [pc, #244]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ba:	e040      	b.n	8003a3e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d023      	beq.n	8003a0c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039c4:	4b39      	ldr	r3, [pc, #228]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a38      	ldr	r2, [pc, #224]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 80039ca:	f043 0301 	orr.w	r3, r3, #1
 80039ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d0:	f7fe fe96 	bl	8002700 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039d8:	f7fe fe92 	bl	8002700 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e1c7      	b.n	8003d7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ea:	4b30      	ldr	r3, [pc, #192]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0f0      	beq.n	80039d8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039f6:	4b2d      	ldr	r3, [pc, #180]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	4929      	ldr	r1, [pc, #164]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	600b      	str	r3, [r1, #0]
 8003a0a:	e018      	b.n	8003a3e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a0c:	4b27      	ldr	r3, [pc, #156]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a26      	ldr	r2, [pc, #152]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 8003a12:	f023 0301 	bic.w	r3, r3, #1
 8003a16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a18:	f7fe fe72 	bl	8002700 <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a20:	f7fe fe6e 	bl	8002700 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e1a3      	b.n	8003d7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a32:	4b1e      	ldr	r3, [pc, #120]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1f0      	bne.n	8003a20 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d038      	beq.n	8003abc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d019      	beq.n	8003a86 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a52:	4b16      	ldr	r3, [pc, #88]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 8003a54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a56:	4a15      	ldr	r2, [pc, #84]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 8003a58:	f043 0301 	orr.w	r3, r3, #1
 8003a5c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a5e:	f7fe fe4f 	bl	8002700 <HAL_GetTick>
 8003a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a64:	e008      	b.n	8003a78 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a66:	f7fe fe4b 	bl	8002700 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e180      	b.n	8003d7a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a78:	4b0c      	ldr	r3, [pc, #48]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 8003a7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0f0      	beq.n	8003a66 <HAL_RCC_OscConfig+0x23a>
 8003a84:	e01a      	b.n	8003abc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a86:	4b09      	ldr	r3, [pc, #36]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 8003a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a8a:	4a08      	ldr	r2, [pc, #32]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 8003a8c:	f023 0301 	bic.w	r3, r3, #1
 8003a90:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a92:	f7fe fe35 	bl	8002700 <HAL_GetTick>
 8003a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a98:	e00a      	b.n	8003ab0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a9a:	f7fe fe31 	bl	8002700 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d903      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e166      	b.n	8003d7a <HAL_RCC_OscConfig+0x54e>
 8003aac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ab0:	4b92      	ldr	r3, [pc, #584]	; (8003cfc <HAL_RCC_OscConfig+0x4d0>)
 8003ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1ee      	bne.n	8003a9a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 80a4 	beq.w	8003c12 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aca:	4b8c      	ldr	r3, [pc, #560]	; (8003cfc <HAL_RCC_OscConfig+0x4d0>)
 8003acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10d      	bne.n	8003af2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ad6:	4b89      	ldr	r3, [pc, #548]	; (8003cfc <HAL_RCC_OscConfig+0x4d0>)
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ada:	4a88      	ldr	r2, [pc, #544]	; (8003cfc <HAL_RCC_OscConfig+0x4d0>)
 8003adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ae2:	4b86      	ldr	r3, [pc, #536]	; (8003cfc <HAL_RCC_OscConfig+0x4d0>)
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aea:	60bb      	str	r3, [r7, #8]
 8003aec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aee:	2301      	movs	r3, #1
 8003af0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003af2:	4b83      	ldr	r3, [pc, #524]	; (8003d00 <HAL_RCC_OscConfig+0x4d4>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d118      	bne.n	8003b30 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003afe:	4b80      	ldr	r3, [pc, #512]	; (8003d00 <HAL_RCC_OscConfig+0x4d4>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a7f      	ldr	r2, [pc, #508]	; (8003d00 <HAL_RCC_OscConfig+0x4d4>)
 8003b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b0a:	f7fe fdf9 	bl	8002700 <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b12:	f7fe fdf5 	bl	8002700 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b64      	cmp	r3, #100	; 0x64
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e12a      	b.n	8003d7a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b24:	4b76      	ldr	r3, [pc, #472]	; (8003d00 <HAL_RCC_OscConfig+0x4d4>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d0f0      	beq.n	8003b12 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d106      	bne.n	8003b46 <HAL_RCC_OscConfig+0x31a>
 8003b38:	4b70      	ldr	r3, [pc, #448]	; (8003cfc <HAL_RCC_OscConfig+0x4d0>)
 8003b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3c:	4a6f      	ldr	r2, [pc, #444]	; (8003cfc <HAL_RCC_OscConfig+0x4d0>)
 8003b3e:	f043 0301 	orr.w	r3, r3, #1
 8003b42:	6713      	str	r3, [r2, #112]	; 0x70
 8003b44:	e02d      	b.n	8003ba2 <HAL_RCC_OscConfig+0x376>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10c      	bne.n	8003b68 <HAL_RCC_OscConfig+0x33c>
 8003b4e:	4b6b      	ldr	r3, [pc, #428]	; (8003cfc <HAL_RCC_OscConfig+0x4d0>)
 8003b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b52:	4a6a      	ldr	r2, [pc, #424]	; (8003cfc <HAL_RCC_OscConfig+0x4d0>)
 8003b54:	f023 0301 	bic.w	r3, r3, #1
 8003b58:	6713      	str	r3, [r2, #112]	; 0x70
 8003b5a:	4b68      	ldr	r3, [pc, #416]	; (8003cfc <HAL_RCC_OscConfig+0x4d0>)
 8003b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5e:	4a67      	ldr	r2, [pc, #412]	; (8003cfc <HAL_RCC_OscConfig+0x4d0>)
 8003b60:	f023 0304 	bic.w	r3, r3, #4
 8003b64:	6713      	str	r3, [r2, #112]	; 0x70
 8003b66:	e01c      	b.n	8003ba2 <HAL_RCC_OscConfig+0x376>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	2b05      	cmp	r3, #5
 8003b6e:	d10c      	bne.n	8003b8a <HAL_RCC_OscConfig+0x35e>
 8003b70:	4b62      	ldr	r3, [pc, #392]	; (8003cfc <HAL_RCC_OscConfig+0x4d0>)
 8003b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b74:	4a61      	ldr	r2, [pc, #388]	; (8003cfc <HAL_RCC_OscConfig+0x4d0>)
 8003b76:	f043 0304 	orr.w	r3, r3, #4
 8003b7a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b7c:	4b5f      	ldr	r3, [pc, #380]	; (8003cfc <HAL_RCC_OscConfig+0x4d0>)
 8003b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b80:	4a5e      	ldr	r2, [pc, #376]	; (8003cfc <HAL_RCC_OscConfig+0x4d0>)
 8003b82:	f043 0301 	orr.w	r3, r3, #1
 8003b86:	6713      	str	r3, [r2, #112]	; 0x70
 8003b88:	e00b      	b.n	8003ba2 <HAL_RCC_OscConfig+0x376>
 8003b8a:	4b5c      	ldr	r3, [pc, #368]	; (8003cfc <HAL_RCC_OscConfig+0x4d0>)
 8003b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8e:	4a5b      	ldr	r2, [pc, #364]	; (8003cfc <HAL_RCC_OscConfig+0x4d0>)
 8003b90:	f023 0301 	bic.w	r3, r3, #1
 8003b94:	6713      	str	r3, [r2, #112]	; 0x70
 8003b96:	4b59      	ldr	r3, [pc, #356]	; (8003cfc <HAL_RCC_OscConfig+0x4d0>)
 8003b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9a:	4a58      	ldr	r2, [pc, #352]	; (8003cfc <HAL_RCC_OscConfig+0x4d0>)
 8003b9c:	f023 0304 	bic.w	r3, r3, #4
 8003ba0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d015      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003baa:	f7fe fda9 	bl	8002700 <HAL_GetTick>
 8003bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb0:	e00a      	b.n	8003bc8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb2:	f7fe fda5 	bl	8002700 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e0d8      	b.n	8003d7a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc8:	4b4c      	ldr	r3, [pc, #304]	; (8003cfc <HAL_RCC_OscConfig+0x4d0>)
 8003bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d0ee      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x386>
 8003bd4:	e014      	b.n	8003c00 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd6:	f7fe fd93 	bl	8002700 <HAL_GetTick>
 8003bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bdc:	e00a      	b.n	8003bf4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bde:	f7fe fd8f 	bl	8002700 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e0c2      	b.n	8003d7a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bf4:	4b41      	ldr	r3, [pc, #260]	; (8003cfc <HAL_RCC_OscConfig+0x4d0>)
 8003bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1ee      	bne.n	8003bde <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c00:	7dfb      	ldrb	r3, [r7, #23]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d105      	bne.n	8003c12 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c06:	4b3d      	ldr	r3, [pc, #244]	; (8003cfc <HAL_RCC_OscConfig+0x4d0>)
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	4a3c      	ldr	r2, [pc, #240]	; (8003cfc <HAL_RCC_OscConfig+0x4d0>)
 8003c0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f000 80ae 	beq.w	8003d78 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c1c:	4b37      	ldr	r3, [pc, #220]	; (8003cfc <HAL_RCC_OscConfig+0x4d0>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f003 030c 	and.w	r3, r3, #12
 8003c24:	2b08      	cmp	r3, #8
 8003c26:	d06d      	beq.n	8003d04 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d14b      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c30:	4b32      	ldr	r3, [pc, #200]	; (8003cfc <HAL_RCC_OscConfig+0x4d0>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a31      	ldr	r2, [pc, #196]	; (8003cfc <HAL_RCC_OscConfig+0x4d0>)
 8003c36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3c:	f7fe fd60 	bl	8002700 <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c44:	f7fe fd5c 	bl	8002700 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e091      	b.n	8003d7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c56:	4b29      	ldr	r3, [pc, #164]	; (8003cfc <HAL_RCC_OscConfig+0x4d0>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1f0      	bne.n	8003c44 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	69da      	ldr	r2, [r3, #28]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	019b      	lsls	r3, r3, #6
 8003c72:	431a      	orrs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c78:	085b      	lsrs	r3, r3, #1
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	041b      	lsls	r3, r3, #16
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c84:	061b      	lsls	r3, r3, #24
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8c:	071b      	lsls	r3, r3, #28
 8003c8e:	491b      	ldr	r1, [pc, #108]	; (8003cfc <HAL_RCC_OscConfig+0x4d0>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c94:	4b19      	ldr	r3, [pc, #100]	; (8003cfc <HAL_RCC_OscConfig+0x4d0>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a18      	ldr	r2, [pc, #96]	; (8003cfc <HAL_RCC_OscConfig+0x4d0>)
 8003c9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca0:	f7fe fd2e 	bl	8002700 <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca8:	f7fe fd2a 	bl	8002700 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e05f      	b.n	8003d7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cba:	4b10      	ldr	r3, [pc, #64]	; (8003cfc <HAL_RCC_OscConfig+0x4d0>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d0f0      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x47c>
 8003cc6:	e057      	b.n	8003d78 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cc8:	4b0c      	ldr	r3, [pc, #48]	; (8003cfc <HAL_RCC_OscConfig+0x4d0>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a0b      	ldr	r2, [pc, #44]	; (8003cfc <HAL_RCC_OscConfig+0x4d0>)
 8003cce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd4:	f7fe fd14 	bl	8002700 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cdc:	f7fe fd10 	bl	8002700 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e045      	b.n	8003d7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cee:	4b03      	ldr	r3, [pc, #12]	; (8003cfc <HAL_RCC_OscConfig+0x4d0>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1f0      	bne.n	8003cdc <HAL_RCC_OscConfig+0x4b0>
 8003cfa:	e03d      	b.n	8003d78 <HAL_RCC_OscConfig+0x54c>
 8003cfc:	40023800 	.word	0x40023800
 8003d00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003d04:	4b1f      	ldr	r3, [pc, #124]	; (8003d84 <HAL_RCC_OscConfig+0x558>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d030      	beq.n	8003d74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d129      	bne.n	8003d74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d122      	bne.n	8003d74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d34:	4013      	ands	r3, r2
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d3a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d119      	bne.n	8003d74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4a:	085b      	lsrs	r3, r3, #1
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d10f      	bne.n	8003d74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d107      	bne.n	8003d74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d001      	beq.n	8003d78 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e000      	b.n	8003d7a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3718      	adds	r7, #24
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	40023800 	.word	0x40023800

08003d88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003d92:	2300      	movs	r3, #0
 8003d94:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d101      	bne.n	8003da0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e0d0      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003da0:	4b6a      	ldr	r3, [pc, #424]	; (8003f4c <HAL_RCC_ClockConfig+0x1c4>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 030f 	and.w	r3, r3, #15
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d910      	bls.n	8003dd0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dae:	4b67      	ldr	r3, [pc, #412]	; (8003f4c <HAL_RCC_ClockConfig+0x1c4>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f023 020f 	bic.w	r2, r3, #15
 8003db6:	4965      	ldr	r1, [pc, #404]	; (8003f4c <HAL_RCC_ClockConfig+0x1c4>)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dbe:	4b63      	ldr	r3, [pc, #396]	; (8003f4c <HAL_RCC_ClockConfig+0x1c4>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 030f 	and.w	r3, r3, #15
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d001      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e0b8      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d020      	beq.n	8003e1e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d005      	beq.n	8003df4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003de8:	4b59      	ldr	r3, [pc, #356]	; (8003f50 <HAL_RCC_ClockConfig+0x1c8>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	4a58      	ldr	r2, [pc, #352]	; (8003f50 <HAL_RCC_ClockConfig+0x1c8>)
 8003dee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003df2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0308 	and.w	r3, r3, #8
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d005      	beq.n	8003e0c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e00:	4b53      	ldr	r3, [pc, #332]	; (8003f50 <HAL_RCC_ClockConfig+0x1c8>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	4a52      	ldr	r2, [pc, #328]	; (8003f50 <HAL_RCC_ClockConfig+0x1c8>)
 8003e06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e0a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e0c:	4b50      	ldr	r3, [pc, #320]	; (8003f50 <HAL_RCC_ClockConfig+0x1c8>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	494d      	ldr	r1, [pc, #308]	; (8003f50 <HAL_RCC_ClockConfig+0x1c8>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d040      	beq.n	8003eac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d107      	bne.n	8003e42 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e32:	4b47      	ldr	r3, [pc, #284]	; (8003f50 <HAL_RCC_ClockConfig+0x1c8>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d115      	bne.n	8003e6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e07f      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d107      	bne.n	8003e5a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e4a:	4b41      	ldr	r3, [pc, #260]	; (8003f50 <HAL_RCC_ClockConfig+0x1c8>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d109      	bne.n	8003e6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e073      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e5a:	4b3d      	ldr	r3, [pc, #244]	; (8003f50 <HAL_RCC_ClockConfig+0x1c8>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e06b      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e6a:	4b39      	ldr	r3, [pc, #228]	; (8003f50 <HAL_RCC_ClockConfig+0x1c8>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f023 0203 	bic.w	r2, r3, #3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	4936      	ldr	r1, [pc, #216]	; (8003f50 <HAL_RCC_ClockConfig+0x1c8>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e7c:	f7fe fc40 	bl	8002700 <HAL_GetTick>
 8003e80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e82:	e00a      	b.n	8003e9a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e84:	f7fe fc3c 	bl	8002700 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e053      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e9a:	4b2d      	ldr	r3, [pc, #180]	; (8003f50 <HAL_RCC_ClockConfig+0x1c8>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f003 020c 	and.w	r2, r3, #12
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d1eb      	bne.n	8003e84 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003eac:	4b27      	ldr	r3, [pc, #156]	; (8003f4c <HAL_RCC_ClockConfig+0x1c4>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 030f 	and.w	r3, r3, #15
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d210      	bcs.n	8003edc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eba:	4b24      	ldr	r3, [pc, #144]	; (8003f4c <HAL_RCC_ClockConfig+0x1c4>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f023 020f 	bic.w	r2, r3, #15
 8003ec2:	4922      	ldr	r1, [pc, #136]	; (8003f4c <HAL_RCC_ClockConfig+0x1c4>)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eca:	4b20      	ldr	r3, [pc, #128]	; (8003f4c <HAL_RCC_ClockConfig+0x1c4>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 030f 	and.w	r3, r3, #15
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d001      	beq.n	8003edc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e032      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d008      	beq.n	8003efa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ee8:	4b19      	ldr	r3, [pc, #100]	; (8003f50 <HAL_RCC_ClockConfig+0x1c8>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	4916      	ldr	r1, [pc, #88]	; (8003f50 <HAL_RCC_ClockConfig+0x1c8>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0308 	and.w	r3, r3, #8
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d009      	beq.n	8003f1a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f06:	4b12      	ldr	r3, [pc, #72]	; (8003f50 <HAL_RCC_ClockConfig+0x1c8>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	490e      	ldr	r1, [pc, #56]	; (8003f50 <HAL_RCC_ClockConfig+0x1c8>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f1a:	f000 f821 	bl	8003f60 <HAL_RCC_GetSysClockFreq>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	4b0b      	ldr	r3, [pc, #44]	; (8003f50 <HAL_RCC_ClockConfig+0x1c8>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	091b      	lsrs	r3, r3, #4
 8003f26:	f003 030f 	and.w	r3, r3, #15
 8003f2a:	490a      	ldr	r1, [pc, #40]	; (8003f54 <HAL_RCC_ClockConfig+0x1cc>)
 8003f2c:	5ccb      	ldrb	r3, [r1, r3]
 8003f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f32:	4a09      	ldr	r2, [pc, #36]	; (8003f58 <HAL_RCC_ClockConfig+0x1d0>)
 8003f34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f36:	4b09      	ldr	r3, [pc, #36]	; (8003f5c <HAL_RCC_ClockConfig+0x1d4>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fd fbda 	bl	80016f4 <HAL_InitTick>

  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	40023c00 	.word	0x40023c00
 8003f50:	40023800 	.word	0x40023800
 8003f54:	0801a6e8 	.word	0x0801a6e8
 8003f58:	20000004 	.word	0x20000004
 8003f5c:	20000008 	.word	0x20000008

08003f60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f64:	b094      	sub	sp, #80	; 0x50
 8003f66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	647b      	str	r3, [r7, #68]	; 0x44
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f70:	2300      	movs	r3, #0
 8003f72:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003f74:	2300      	movs	r3, #0
 8003f76:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f78:	4b79      	ldr	r3, [pc, #484]	; (8004160 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f003 030c 	and.w	r3, r3, #12
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	d00d      	beq.n	8003fa0 <HAL_RCC_GetSysClockFreq+0x40>
 8003f84:	2b08      	cmp	r3, #8
 8003f86:	f200 80e1 	bhi.w	800414c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d002      	beq.n	8003f94 <HAL_RCC_GetSysClockFreq+0x34>
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	d003      	beq.n	8003f9a <HAL_RCC_GetSysClockFreq+0x3a>
 8003f92:	e0db      	b.n	800414c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f94:	4b73      	ldr	r3, [pc, #460]	; (8004164 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f96:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f98:	e0db      	b.n	8004152 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f9a:	4b73      	ldr	r3, [pc, #460]	; (8004168 <HAL_RCC_GetSysClockFreq+0x208>)
 8003f9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f9e:	e0d8      	b.n	8004152 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fa0:	4b6f      	ldr	r3, [pc, #444]	; (8004160 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fa8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003faa:	4b6d      	ldr	r3, [pc, #436]	; (8004160 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d063      	beq.n	800407e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fb6:	4b6a      	ldr	r3, [pc, #424]	; (8004160 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	099b      	lsrs	r3, r3, #6
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fc0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fc8:	633b      	str	r3, [r7, #48]	; 0x30
 8003fca:	2300      	movs	r3, #0
 8003fcc:	637b      	str	r3, [r7, #52]	; 0x34
 8003fce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003fd2:	4622      	mov	r2, r4
 8003fd4:	462b      	mov	r3, r5
 8003fd6:	f04f 0000 	mov.w	r0, #0
 8003fda:	f04f 0100 	mov.w	r1, #0
 8003fde:	0159      	lsls	r1, r3, #5
 8003fe0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fe4:	0150      	lsls	r0, r2, #5
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	460b      	mov	r3, r1
 8003fea:	4621      	mov	r1, r4
 8003fec:	1a51      	subs	r1, r2, r1
 8003fee:	6139      	str	r1, [r7, #16]
 8003ff0:	4629      	mov	r1, r5
 8003ff2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ff6:	617b      	str	r3, [r7, #20]
 8003ff8:	f04f 0200 	mov.w	r2, #0
 8003ffc:	f04f 0300 	mov.w	r3, #0
 8004000:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004004:	4659      	mov	r1, fp
 8004006:	018b      	lsls	r3, r1, #6
 8004008:	4651      	mov	r1, sl
 800400a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800400e:	4651      	mov	r1, sl
 8004010:	018a      	lsls	r2, r1, #6
 8004012:	4651      	mov	r1, sl
 8004014:	ebb2 0801 	subs.w	r8, r2, r1
 8004018:	4659      	mov	r1, fp
 800401a:	eb63 0901 	sbc.w	r9, r3, r1
 800401e:	f04f 0200 	mov.w	r2, #0
 8004022:	f04f 0300 	mov.w	r3, #0
 8004026:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800402a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800402e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004032:	4690      	mov	r8, r2
 8004034:	4699      	mov	r9, r3
 8004036:	4623      	mov	r3, r4
 8004038:	eb18 0303 	adds.w	r3, r8, r3
 800403c:	60bb      	str	r3, [r7, #8]
 800403e:	462b      	mov	r3, r5
 8004040:	eb49 0303 	adc.w	r3, r9, r3
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	f04f 0300 	mov.w	r3, #0
 800404e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004052:	4629      	mov	r1, r5
 8004054:	024b      	lsls	r3, r1, #9
 8004056:	4621      	mov	r1, r4
 8004058:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800405c:	4621      	mov	r1, r4
 800405e:	024a      	lsls	r2, r1, #9
 8004060:	4610      	mov	r0, r2
 8004062:	4619      	mov	r1, r3
 8004064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004066:	2200      	movs	r2, #0
 8004068:	62bb      	str	r3, [r7, #40]	; 0x28
 800406a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800406c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004070:	f7fc f99e 	bl	80003b0 <__aeabi_uldivmod>
 8004074:	4602      	mov	r2, r0
 8004076:	460b      	mov	r3, r1
 8004078:	4613      	mov	r3, r2
 800407a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800407c:	e058      	b.n	8004130 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800407e:	4b38      	ldr	r3, [pc, #224]	; (8004160 <HAL_RCC_GetSysClockFreq+0x200>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	099b      	lsrs	r3, r3, #6
 8004084:	2200      	movs	r2, #0
 8004086:	4618      	mov	r0, r3
 8004088:	4611      	mov	r1, r2
 800408a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800408e:	623b      	str	r3, [r7, #32]
 8004090:	2300      	movs	r3, #0
 8004092:	627b      	str	r3, [r7, #36]	; 0x24
 8004094:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004098:	4642      	mov	r2, r8
 800409a:	464b      	mov	r3, r9
 800409c:	f04f 0000 	mov.w	r0, #0
 80040a0:	f04f 0100 	mov.w	r1, #0
 80040a4:	0159      	lsls	r1, r3, #5
 80040a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040aa:	0150      	lsls	r0, r2, #5
 80040ac:	4602      	mov	r2, r0
 80040ae:	460b      	mov	r3, r1
 80040b0:	4641      	mov	r1, r8
 80040b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80040b6:	4649      	mov	r1, r9
 80040b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80040bc:	f04f 0200 	mov.w	r2, #0
 80040c0:	f04f 0300 	mov.w	r3, #0
 80040c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80040c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80040cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80040d0:	ebb2 040a 	subs.w	r4, r2, sl
 80040d4:	eb63 050b 	sbc.w	r5, r3, fp
 80040d8:	f04f 0200 	mov.w	r2, #0
 80040dc:	f04f 0300 	mov.w	r3, #0
 80040e0:	00eb      	lsls	r3, r5, #3
 80040e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040e6:	00e2      	lsls	r2, r4, #3
 80040e8:	4614      	mov	r4, r2
 80040ea:	461d      	mov	r5, r3
 80040ec:	4643      	mov	r3, r8
 80040ee:	18e3      	adds	r3, r4, r3
 80040f0:	603b      	str	r3, [r7, #0]
 80040f2:	464b      	mov	r3, r9
 80040f4:	eb45 0303 	adc.w	r3, r5, r3
 80040f8:	607b      	str	r3, [r7, #4]
 80040fa:	f04f 0200 	mov.w	r2, #0
 80040fe:	f04f 0300 	mov.w	r3, #0
 8004102:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004106:	4629      	mov	r1, r5
 8004108:	028b      	lsls	r3, r1, #10
 800410a:	4621      	mov	r1, r4
 800410c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004110:	4621      	mov	r1, r4
 8004112:	028a      	lsls	r2, r1, #10
 8004114:	4610      	mov	r0, r2
 8004116:	4619      	mov	r1, r3
 8004118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800411a:	2200      	movs	r2, #0
 800411c:	61bb      	str	r3, [r7, #24]
 800411e:	61fa      	str	r2, [r7, #28]
 8004120:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004124:	f7fc f944 	bl	80003b0 <__aeabi_uldivmod>
 8004128:	4602      	mov	r2, r0
 800412a:	460b      	mov	r3, r1
 800412c:	4613      	mov	r3, r2
 800412e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004130:	4b0b      	ldr	r3, [pc, #44]	; (8004160 <HAL_RCC_GetSysClockFreq+0x200>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	0c1b      	lsrs	r3, r3, #16
 8004136:	f003 0303 	and.w	r3, r3, #3
 800413a:	3301      	adds	r3, #1
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004140:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004144:	fbb2 f3f3 	udiv	r3, r2, r3
 8004148:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800414a:	e002      	b.n	8004152 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800414c:	4b05      	ldr	r3, [pc, #20]	; (8004164 <HAL_RCC_GetSysClockFreq+0x204>)
 800414e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004150:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004154:	4618      	mov	r0, r3
 8004156:	3750      	adds	r7, #80	; 0x50
 8004158:	46bd      	mov	sp, r7
 800415a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800415e:	bf00      	nop
 8004160:	40023800 	.word	0x40023800
 8004164:	00f42400 	.word	0x00f42400
 8004168:	007a1200 	.word	0x007a1200

0800416c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004170:	4b03      	ldr	r3, [pc, #12]	; (8004180 <HAL_RCC_GetHCLKFreq+0x14>)
 8004172:	681b      	ldr	r3, [r3, #0]
}
 8004174:	4618      	mov	r0, r3
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	20000004 	.word	0x20000004

08004184 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004188:	f7ff fff0 	bl	800416c <HAL_RCC_GetHCLKFreq>
 800418c:	4602      	mov	r2, r0
 800418e:	4b05      	ldr	r3, [pc, #20]	; (80041a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	0a9b      	lsrs	r3, r3, #10
 8004194:	f003 0307 	and.w	r3, r3, #7
 8004198:	4903      	ldr	r1, [pc, #12]	; (80041a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800419a:	5ccb      	ldrb	r3, [r1, r3]
 800419c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	40023800 	.word	0x40023800
 80041a8:	0801a6f8 	.word	0x0801a6f8

080041ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80041b0:	f7ff ffdc 	bl	800416c <HAL_RCC_GetHCLKFreq>
 80041b4:	4602      	mov	r2, r0
 80041b6:	4b05      	ldr	r3, [pc, #20]	; (80041cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	0b5b      	lsrs	r3, r3, #13
 80041bc:	f003 0307 	and.w	r3, r3, #7
 80041c0:	4903      	ldr	r1, [pc, #12]	; (80041d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041c2:	5ccb      	ldrb	r3, [r1, r3]
 80041c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	40023800 	.word	0x40023800
 80041d0:	0801a6f8 	.word	0x0801a6f8

080041d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	220f      	movs	r2, #15
 80041e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80041e4:	4b12      	ldr	r3, [pc, #72]	; (8004230 <HAL_RCC_GetClockConfig+0x5c>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f003 0203 	and.w	r2, r3, #3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80041f0:	4b0f      	ldr	r3, [pc, #60]	; (8004230 <HAL_RCC_GetClockConfig+0x5c>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80041fc:	4b0c      	ldr	r3, [pc, #48]	; (8004230 <HAL_RCC_GetClockConfig+0x5c>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004208:	4b09      	ldr	r3, [pc, #36]	; (8004230 <HAL_RCC_GetClockConfig+0x5c>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	08db      	lsrs	r3, r3, #3
 800420e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004216:	4b07      	ldr	r3, [pc, #28]	; (8004234 <HAL_RCC_GetClockConfig+0x60>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 020f 	and.w	r2, r3, #15
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	601a      	str	r2, [r3, #0]
}
 8004222:	bf00      	nop
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	40023800 	.word	0x40023800
 8004234:	40023c00 	.word	0x40023c00

08004238 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b088      	sub	sp, #32
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004240:	2300      	movs	r3, #0
 8004242:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004244:	2300      	movs	r3, #0
 8004246:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004248:	2300      	movs	r3, #0
 800424a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800424c:	2300      	movs	r3, #0
 800424e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004250:	2300      	movs	r3, #0
 8004252:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b00      	cmp	r3, #0
 800425e:	d012      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004260:	4b69      	ldr	r3, [pc, #420]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	4a68      	ldr	r2, [pc, #416]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004266:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800426a:	6093      	str	r3, [r2, #8]
 800426c:	4b66      	ldr	r3, [pc, #408]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004274:	4964      	ldr	r1, [pc, #400]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004276:	4313      	orrs	r3, r2
 8004278:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004282:	2301      	movs	r3, #1
 8004284:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d017      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004292:	4b5d      	ldr	r3, [pc, #372]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004294:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004298:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a0:	4959      	ldr	r1, [pc, #356]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042b0:	d101      	bne.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80042b2:	2301      	movs	r3, #1
 80042b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d101      	bne.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80042be:	2301      	movs	r3, #1
 80042c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d017      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80042ce:	4b4e      	ldr	r3, [pc, #312]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042dc:	494a      	ldr	r1, [pc, #296]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042ec:	d101      	bne.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80042ee:	2301      	movs	r3, #1
 80042f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80042fa:	2301      	movs	r3, #1
 80042fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800430a:	2301      	movs	r3, #1
 800430c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0320 	and.w	r3, r3, #32
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 808b 	beq.w	8004432 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800431c:	4b3a      	ldr	r3, [pc, #232]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800431e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004320:	4a39      	ldr	r2, [pc, #228]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004326:	6413      	str	r3, [r2, #64]	; 0x40
 8004328:	4b37      	ldr	r3, [pc, #220]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800432a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004330:	60bb      	str	r3, [r7, #8]
 8004332:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004334:	4b35      	ldr	r3, [pc, #212]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a34      	ldr	r2, [pc, #208]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800433a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800433e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004340:	f7fe f9de 	bl	8002700 <HAL_GetTick>
 8004344:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004346:	e008      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004348:	f7fe f9da 	bl	8002700 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b64      	cmp	r3, #100	; 0x64
 8004354:	d901      	bls.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e38f      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800435a:	4b2c      	ldr	r3, [pc, #176]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0f0      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004366:	4b28      	ldr	r3, [pc, #160]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800436e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d035      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	429a      	cmp	r2, r3
 8004382:	d02e      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004384:	4b20      	ldr	r3, [pc, #128]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800438c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800438e:	4b1e      	ldr	r3, [pc, #120]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004392:	4a1d      	ldr	r2, [pc, #116]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004398:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800439a:	4b1b      	ldr	r3, [pc, #108]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800439c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439e:	4a1a      	ldr	r2, [pc, #104]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80043a6:	4a18      	ldr	r2, [pc, #96]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80043ac:	4b16      	ldr	r3, [pc, #88]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d114      	bne.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b8:	f7fe f9a2 	bl	8002700 <HAL_GetTick>
 80043bc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043be:	e00a      	b.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043c0:	f7fe f99e 	bl	8002700 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e351      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d6:	4b0c      	ldr	r3, [pc, #48]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d0ee      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043ee:	d111      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80043f0:	4b05      	ldr	r3, [pc, #20]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80043fc:	4b04      	ldr	r3, [pc, #16]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80043fe:	400b      	ands	r3, r1
 8004400:	4901      	ldr	r1, [pc, #4]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004402:	4313      	orrs	r3, r2
 8004404:	608b      	str	r3, [r1, #8]
 8004406:	e00b      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004408:	40023800 	.word	0x40023800
 800440c:	40007000 	.word	0x40007000
 8004410:	0ffffcff 	.word	0x0ffffcff
 8004414:	4bac      	ldr	r3, [pc, #688]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	4aab      	ldr	r2, [pc, #684]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800441a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800441e:	6093      	str	r3, [r2, #8]
 8004420:	4ba9      	ldr	r3, [pc, #676]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004422:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800442c:	49a6      	ldr	r1, [pc, #664]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800442e:	4313      	orrs	r3, r2
 8004430:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0310 	and.w	r3, r3, #16
 800443a:	2b00      	cmp	r3, #0
 800443c:	d010      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800443e:	4ba2      	ldr	r3, [pc, #648]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004440:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004444:	4aa0      	ldr	r2, [pc, #640]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004446:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800444a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800444e:	4b9e      	ldr	r3, [pc, #632]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004450:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004458:	499b      	ldr	r1, [pc, #620]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800445a:	4313      	orrs	r3, r2
 800445c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00a      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800446c:	4b96      	ldr	r3, [pc, #600]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800446e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004472:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800447a:	4993      	ldr	r1, [pc, #588]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800447c:	4313      	orrs	r3, r2
 800447e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00a      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800448e:	4b8e      	ldr	r3, [pc, #568]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004494:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800449c:	498a      	ldr	r1, [pc, #552]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00a      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044b0:	4b85      	ldr	r3, [pc, #532]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044be:	4982      	ldr	r1, [pc, #520]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00a      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044d2:	4b7d      	ldr	r3, [pc, #500]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e0:	4979      	ldr	r1, [pc, #484]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00a      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044f4:	4b74      	ldr	r3, [pc, #464]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fa:	f023 0203 	bic.w	r2, r3, #3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004502:	4971      	ldr	r1, [pc, #452]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004504:	4313      	orrs	r3, r2
 8004506:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00a      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004516:	4b6c      	ldr	r3, [pc, #432]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451c:	f023 020c 	bic.w	r2, r3, #12
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004524:	4968      	ldr	r1, [pc, #416]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004526:	4313      	orrs	r3, r2
 8004528:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00a      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004538:	4b63      	ldr	r3, [pc, #396]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800453a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800453e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004546:	4960      	ldr	r1, [pc, #384]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004548:	4313      	orrs	r3, r2
 800454a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00a      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800455a:	4b5b      	ldr	r3, [pc, #364]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800455c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004560:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004568:	4957      	ldr	r1, [pc, #348]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800456a:	4313      	orrs	r3, r2
 800456c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00a      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800457c:	4b52      	ldr	r3, [pc, #328]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800457e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004582:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458a:	494f      	ldr	r1, [pc, #316]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800458c:	4313      	orrs	r3, r2
 800458e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00a      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800459e:	4b4a      	ldr	r3, [pc, #296]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ac:	4946      	ldr	r1, [pc, #280]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00a      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80045c0:	4b41      	ldr	r3, [pc, #260]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ce:	493e      	ldr	r1, [pc, #248]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00a      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80045e2:	4b39      	ldr	r3, [pc, #228]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045f0:	4935      	ldr	r1, [pc, #212]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00a      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004604:	4b30      	ldr	r3, [pc, #192]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800460a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004612:	492d      	ldr	r1, [pc, #180]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004614:	4313      	orrs	r3, r2
 8004616:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d011      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004626:	4b28      	ldr	r3, [pc, #160]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800462c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004634:	4924      	ldr	r1, [pc, #144]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004636:	4313      	orrs	r3, r2
 8004638:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004640:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004644:	d101      	bne.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004646:	2301      	movs	r3, #1
 8004648:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0308 	and.w	r3, r3, #8
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004656:	2301      	movs	r3, #1
 8004658:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00a      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004666:	4b18      	ldr	r3, [pc, #96]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800466c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004674:	4914      	ldr	r1, [pc, #80]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004676:	4313      	orrs	r3, r2
 8004678:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00b      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004688:	4b0f      	ldr	r3, [pc, #60]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800468a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800468e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004698:	490b      	ldr	r1, [pc, #44]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800469a:	4313      	orrs	r3, r2
 800469c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00f      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80046ac:	4b06      	ldr	r3, [pc, #24]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046bc:	4902      	ldr	r1, [pc, #8]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80046c4:	e002      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x494>
 80046c6:	bf00      	nop
 80046c8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00b      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046d8:	4b8a      	ldr	r3, [pc, #552]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046de:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e8:	4986      	ldr	r1, [pc, #536]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00b      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80046fc:	4b81      	ldr	r3, [pc, #516]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004702:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800470c:	497d      	ldr	r1, [pc, #500]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800470e:	4313      	orrs	r3, r2
 8004710:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d006      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004722:	2b00      	cmp	r3, #0
 8004724:	f000 80d6 	beq.w	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004728:	4b76      	ldr	r3, [pc, #472]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a75      	ldr	r2, [pc, #468]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800472e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004732:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004734:	f7fd ffe4 	bl	8002700 <HAL_GetTick>
 8004738:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800473a:	e008      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800473c:	f7fd ffe0 	bl	8002700 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b64      	cmp	r3, #100	; 0x64
 8004748:	d901      	bls.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e195      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800474e:	4b6d      	ldr	r3, [pc, #436]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1f0      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d021      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800476a:	2b00      	cmp	r3, #0
 800476c:	d11d      	bne.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800476e:	4b65      	ldr	r3, [pc, #404]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004770:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004774:	0c1b      	lsrs	r3, r3, #16
 8004776:	f003 0303 	and.w	r3, r3, #3
 800477a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800477c:	4b61      	ldr	r3, [pc, #388]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800477e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004782:	0e1b      	lsrs	r3, r3, #24
 8004784:	f003 030f 	and.w	r3, r3, #15
 8004788:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	019a      	lsls	r2, r3, #6
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	041b      	lsls	r3, r3, #16
 8004794:	431a      	orrs	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	061b      	lsls	r3, r3, #24
 800479a:	431a      	orrs	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	071b      	lsls	r3, r3, #28
 80047a2:	4958      	ldr	r1, [pc, #352]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d004      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047be:	d00a      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d02e      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047d4:	d129      	bne.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80047d6:	4b4b      	ldr	r3, [pc, #300]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047dc:	0c1b      	lsrs	r3, r3, #16
 80047de:	f003 0303 	and.w	r3, r3, #3
 80047e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80047e4:	4b47      	ldr	r3, [pc, #284]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ea:	0f1b      	lsrs	r3, r3, #28
 80047ec:	f003 0307 	and.w	r3, r3, #7
 80047f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	019a      	lsls	r2, r3, #6
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	041b      	lsls	r3, r3, #16
 80047fc:	431a      	orrs	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	061b      	lsls	r3, r3, #24
 8004804:	431a      	orrs	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	071b      	lsls	r3, r3, #28
 800480a:	493e      	ldr	r1, [pc, #248]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800480c:	4313      	orrs	r3, r2
 800480e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004812:	4b3c      	ldr	r3, [pc, #240]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004818:	f023 021f 	bic.w	r2, r3, #31
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004820:	3b01      	subs	r3, #1
 8004822:	4938      	ldr	r1, [pc, #224]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004824:	4313      	orrs	r3, r2
 8004826:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d01d      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004836:	4b33      	ldr	r3, [pc, #204]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004838:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800483c:	0e1b      	lsrs	r3, r3, #24
 800483e:	f003 030f 	and.w	r3, r3, #15
 8004842:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004844:	4b2f      	ldr	r3, [pc, #188]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004846:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800484a:	0f1b      	lsrs	r3, r3, #28
 800484c:	f003 0307 	and.w	r3, r3, #7
 8004850:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	019a      	lsls	r2, r3, #6
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	041b      	lsls	r3, r3, #16
 800485e:	431a      	orrs	r2, r3
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	061b      	lsls	r3, r3, #24
 8004864:	431a      	orrs	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	071b      	lsls	r3, r3, #28
 800486a:	4926      	ldr	r1, [pc, #152]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800486c:	4313      	orrs	r3, r2
 800486e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d011      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	019a      	lsls	r2, r3, #6
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	041b      	lsls	r3, r3, #16
 800488a:	431a      	orrs	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	061b      	lsls	r3, r3, #24
 8004892:	431a      	orrs	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	071b      	lsls	r3, r3, #28
 800489a:	491a      	ldr	r1, [pc, #104]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800489c:	4313      	orrs	r3, r2
 800489e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80048a2:	4b18      	ldr	r3, [pc, #96]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a17      	ldr	r2, [pc, #92]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048ae:	f7fd ff27 	bl	8002700 <HAL_GetTick>
 80048b2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048b4:	e008      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80048b6:	f7fd ff23 	bl	8002700 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	2b64      	cmp	r3, #100	; 0x64
 80048c2:	d901      	bls.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e0d8      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048c8:	4b0e      	ldr	r3, [pc, #56]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d0f0      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	f040 80ce 	bne.w	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80048dc:	4b09      	ldr	r3, [pc, #36]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a08      	ldr	r2, [pc, #32]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048e8:	f7fd ff0a 	bl	8002700 <HAL_GetTick>
 80048ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80048ee:	e00b      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80048f0:	f7fd ff06 	bl	8002700 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b64      	cmp	r3, #100	; 0x64
 80048fc:	d904      	bls.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e0bb      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004902:	bf00      	nop
 8004904:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004908:	4b5e      	ldr	r3, [pc, #376]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004910:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004914:	d0ec      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004926:	2b00      	cmp	r3, #0
 8004928:	d009      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004932:	2b00      	cmp	r3, #0
 8004934:	d02e      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	2b00      	cmp	r3, #0
 800493c:	d12a      	bne.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800493e:	4b51      	ldr	r3, [pc, #324]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004944:	0c1b      	lsrs	r3, r3, #16
 8004946:	f003 0303 	and.w	r3, r3, #3
 800494a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800494c:	4b4d      	ldr	r3, [pc, #308]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800494e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004952:	0f1b      	lsrs	r3, r3, #28
 8004954:	f003 0307 	and.w	r3, r3, #7
 8004958:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	019a      	lsls	r2, r3, #6
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	041b      	lsls	r3, r3, #16
 8004964:	431a      	orrs	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	061b      	lsls	r3, r3, #24
 800496c:	431a      	orrs	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	071b      	lsls	r3, r3, #28
 8004972:	4944      	ldr	r1, [pc, #272]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004974:	4313      	orrs	r3, r2
 8004976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800497a:	4b42      	ldr	r3, [pc, #264]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800497c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004980:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004988:	3b01      	subs	r3, #1
 800498a:	021b      	lsls	r3, r3, #8
 800498c:	493d      	ldr	r1, [pc, #244]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800498e:	4313      	orrs	r3, r2
 8004990:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d022      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049a8:	d11d      	bne.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80049aa:	4b36      	ldr	r3, [pc, #216]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b0:	0e1b      	lsrs	r3, r3, #24
 80049b2:	f003 030f 	and.w	r3, r3, #15
 80049b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80049b8:	4b32      	ldr	r3, [pc, #200]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049be:	0f1b      	lsrs	r3, r3, #28
 80049c0:	f003 0307 	and.w	r3, r3, #7
 80049c4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	019a      	lsls	r2, r3, #6
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a1b      	ldr	r3, [r3, #32]
 80049d0:	041b      	lsls	r3, r3, #16
 80049d2:	431a      	orrs	r2, r3
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	061b      	lsls	r3, r3, #24
 80049d8:	431a      	orrs	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	071b      	lsls	r3, r3, #28
 80049de:	4929      	ldr	r1, [pc, #164]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0308 	and.w	r3, r3, #8
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d028      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80049f2:	4b24      	ldr	r3, [pc, #144]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f8:	0e1b      	lsrs	r3, r3, #24
 80049fa:	f003 030f 	and.w	r3, r3, #15
 80049fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a00:	4b20      	ldr	r3, [pc, #128]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a06:	0c1b      	lsrs	r3, r3, #16
 8004a08:	f003 0303 	and.w	r3, r3, #3
 8004a0c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	019a      	lsls	r2, r3, #6
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	041b      	lsls	r3, r3, #16
 8004a18:	431a      	orrs	r2, r3
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	061b      	lsls	r3, r3, #24
 8004a1e:	431a      	orrs	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	69db      	ldr	r3, [r3, #28]
 8004a24:	071b      	lsls	r3, r3, #28
 8004a26:	4917      	ldr	r1, [pc, #92]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004a2e:	4b15      	ldr	r3, [pc, #84]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3c:	4911      	ldr	r1, [pc, #68]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004a44:	4b0f      	ldr	r3, [pc, #60]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a0e      	ldr	r2, [pc, #56]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a50:	f7fd fe56 	bl	8002700 <HAL_GetTick>
 8004a54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a56:	e008      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a58:	f7fd fe52 	bl	8002700 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b64      	cmp	r3, #100	; 0x64
 8004a64:	d901      	bls.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e007      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a6a:	4b06      	ldr	r3, [pc, #24]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a76:	d1ef      	bne.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3720      	adds	r7, #32
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	40023800 	.word	0x40023800

08004a88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e049      	b.n	8004b2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d106      	bne.n	8004ab4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f841 	bl	8004b36 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	3304      	adds	r3, #4
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	4610      	mov	r0, r2
 8004ac8:	f000 fc12 	bl	80052f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3708      	adds	r7, #8
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004b3e:	bf00      	nop
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
	...

08004b4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d001      	beq.n	8004b64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e054      	b.n	8004c0e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2202      	movs	r2, #2
 8004b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68da      	ldr	r2, [r3, #12]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f042 0201 	orr.w	r2, r2, #1
 8004b7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a26      	ldr	r2, [pc, #152]	; (8004c1c <HAL_TIM_Base_Start_IT+0xd0>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d022      	beq.n	8004bcc <HAL_TIM_Base_Start_IT+0x80>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b8e:	d01d      	beq.n	8004bcc <HAL_TIM_Base_Start_IT+0x80>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a22      	ldr	r2, [pc, #136]	; (8004c20 <HAL_TIM_Base_Start_IT+0xd4>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d018      	beq.n	8004bcc <HAL_TIM_Base_Start_IT+0x80>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a21      	ldr	r2, [pc, #132]	; (8004c24 <HAL_TIM_Base_Start_IT+0xd8>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d013      	beq.n	8004bcc <HAL_TIM_Base_Start_IT+0x80>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a1f      	ldr	r2, [pc, #124]	; (8004c28 <HAL_TIM_Base_Start_IT+0xdc>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d00e      	beq.n	8004bcc <HAL_TIM_Base_Start_IT+0x80>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a1e      	ldr	r2, [pc, #120]	; (8004c2c <HAL_TIM_Base_Start_IT+0xe0>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d009      	beq.n	8004bcc <HAL_TIM_Base_Start_IT+0x80>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a1c      	ldr	r2, [pc, #112]	; (8004c30 <HAL_TIM_Base_Start_IT+0xe4>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d004      	beq.n	8004bcc <HAL_TIM_Base_Start_IT+0x80>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a1b      	ldr	r2, [pc, #108]	; (8004c34 <HAL_TIM_Base_Start_IT+0xe8>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d115      	bne.n	8004bf8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	689a      	ldr	r2, [r3, #8]
 8004bd2:	4b19      	ldr	r3, [pc, #100]	; (8004c38 <HAL_TIM_Base_Start_IT+0xec>)
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2b06      	cmp	r3, #6
 8004bdc:	d015      	beq.n	8004c0a <HAL_TIM_Base_Start_IT+0xbe>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004be4:	d011      	beq.n	8004c0a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f042 0201 	orr.w	r2, r2, #1
 8004bf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bf6:	e008      	b.n	8004c0a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f042 0201 	orr.w	r2, r2, #1
 8004c06:	601a      	str	r2, [r3, #0]
 8004c08:	e000      	b.n	8004c0c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	40010000 	.word	0x40010000
 8004c20:	40000400 	.word	0x40000400
 8004c24:	40000800 	.word	0x40000800
 8004c28:	40000c00 	.word	0x40000c00
 8004c2c:	40010400 	.word	0x40010400
 8004c30:	40014000 	.word	0x40014000
 8004c34:	40001800 	.word	0x40001800
 8004c38:	00010007 	.word	0x00010007

08004c3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e049      	b.n	8004ce2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d106      	bne.n	8004c68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f7fd f98a 	bl	8001f7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	3304      	adds	r3, #4
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4610      	mov	r0, r2
 8004c7c:	f000 fb38 	bl	80052f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
	...

08004cec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d101      	bne.n	8004d00 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e08f      	b.n	8004e20 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d106      	bne.n	8004d1a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f7fd f965 	bl	8001fe4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2202      	movs	r2, #2
 8004d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6899      	ldr	r1, [r3, #8]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	4b3e      	ldr	r3, [pc, #248]	; (8004e28 <HAL_TIM_Encoder_Init+0x13c>)
 8004d2e:	400b      	ands	r3, r1
 8004d30:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	3304      	adds	r3, #4
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	4610      	mov	r0, r2
 8004d3e:	f000 fad7 	bl	80052f0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	6a1b      	ldr	r3, [r3, #32]
 8004d58:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	4b31      	ldr	r3, [pc, #196]	; (8004e2c <HAL_TIM_Encoder_Init+0x140>)
 8004d68:	4013      	ands	r3, r2
 8004d6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	689a      	ldr	r2, [r3, #8]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	021b      	lsls	r3, r3, #8
 8004d76:	4313      	orrs	r3, r2
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	4b2b      	ldr	r3, [pc, #172]	; (8004e30 <HAL_TIM_Encoder_Init+0x144>)
 8004d82:	4013      	ands	r3, r2
 8004d84:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	4b2a      	ldr	r3, [pc, #168]	; (8004e34 <HAL_TIM_Encoder_Init+0x148>)
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	68da      	ldr	r2, [r3, #12]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	69db      	ldr	r3, [r3, #28]
 8004d96:	021b      	lsls	r3, r3, #8
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	011a      	lsls	r2, r3, #4
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	031b      	lsls	r3, r3, #12
 8004dac:	4313      	orrs	r3, r2
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004dba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004dc2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	011b      	lsls	r3, r3, #4
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2201      	movs	r2, #1
 8004e02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3718      	adds	r7, #24
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	fffebff8 	.word	0xfffebff8
 8004e2c:	fffffcfc 	.word	0xfffffcfc
 8004e30:	fffff3f3 	.word	0xfffff3f3
 8004e34:	ffff0f0f 	.word	0xffff0f0f

08004e38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d122      	bne.n	8004e94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	f003 0302 	and.w	r3, r3, #2
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d11b      	bne.n	8004e94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f06f 0202 	mvn.w	r2, #2
 8004e64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	f003 0303 	and.w	r3, r3, #3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d003      	beq.n	8004e82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 fa1a 	bl	80052b4 <HAL_TIM_IC_CaptureCallback>
 8004e80:	e005      	b.n	8004e8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 fa0c 	bl	80052a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 fa1d 	bl	80052c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	f003 0304 	and.w	r3, r3, #4
 8004e9e:	2b04      	cmp	r3, #4
 8004ea0:	d122      	bne.n	8004ee8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	f003 0304 	and.w	r3, r3, #4
 8004eac:	2b04      	cmp	r3, #4
 8004eae:	d11b      	bne.n	8004ee8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f06f 0204 	mvn.w	r2, #4
 8004eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2202      	movs	r2, #2
 8004ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d003      	beq.n	8004ed6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 f9f0 	bl	80052b4 <HAL_TIM_IC_CaptureCallback>
 8004ed4:	e005      	b.n	8004ee2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 f9e2 	bl	80052a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 f9f3 	bl	80052c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	f003 0308 	and.w	r3, r3, #8
 8004ef2:	2b08      	cmp	r3, #8
 8004ef4:	d122      	bne.n	8004f3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	f003 0308 	and.w	r3, r3, #8
 8004f00:	2b08      	cmp	r3, #8
 8004f02:	d11b      	bne.n	8004f3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f06f 0208 	mvn.w	r2, #8
 8004f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2204      	movs	r2, #4
 8004f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	f003 0303 	and.w	r3, r3, #3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 f9c6 	bl	80052b4 <HAL_TIM_IC_CaptureCallback>
 8004f28:	e005      	b.n	8004f36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f9b8 	bl	80052a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 f9c9 	bl	80052c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	f003 0310 	and.w	r3, r3, #16
 8004f46:	2b10      	cmp	r3, #16
 8004f48:	d122      	bne.n	8004f90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	f003 0310 	and.w	r3, r3, #16
 8004f54:	2b10      	cmp	r3, #16
 8004f56:	d11b      	bne.n	8004f90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f06f 0210 	mvn.w	r2, #16
 8004f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2208      	movs	r2, #8
 8004f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d003      	beq.n	8004f7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f99c 	bl	80052b4 <HAL_TIM_IC_CaptureCallback>
 8004f7c:	e005      	b.n	8004f8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 f98e 	bl	80052a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 f99f 	bl	80052c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d10e      	bne.n	8004fbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d107      	bne.n	8004fbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f06f 0201 	mvn.w	r2, #1
 8004fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7fc f988 	bl	80012cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fc6:	2b80      	cmp	r3, #128	; 0x80
 8004fc8:	d10e      	bne.n	8004fe8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd4:	2b80      	cmp	r3, #128	; 0x80
 8004fd6:	d107      	bne.n	8004fe8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 fd98 	bl	8005b18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ff6:	d10e      	bne.n	8005016 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005002:	2b80      	cmp	r3, #128	; 0x80
 8005004:	d107      	bne.n	8005016 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800500e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 fd8b 	bl	8005b2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005020:	2b40      	cmp	r3, #64	; 0x40
 8005022:	d10e      	bne.n	8005042 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800502e:	2b40      	cmp	r3, #64	; 0x40
 8005030:	d107      	bne.n	8005042 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800503a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 f94d 	bl	80052dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	f003 0320 	and.w	r3, r3, #32
 800504c:	2b20      	cmp	r3, #32
 800504e:	d10e      	bne.n	800506e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	f003 0320 	and.w	r3, r3, #32
 800505a:	2b20      	cmp	r3, #32
 800505c:	d107      	bne.n	800506e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f06f 0220 	mvn.w	r2, #32
 8005066:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 fd4b 	bl	8005b04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800506e:	bf00      	nop
 8005070:	3708      	adds	r7, #8
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
	...

08005078 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b086      	sub	sp, #24
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005084:	2300      	movs	r3, #0
 8005086:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800508e:	2b01      	cmp	r3, #1
 8005090:	d101      	bne.n	8005096 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005092:	2302      	movs	r3, #2
 8005094:	e0ff      	b.n	8005296 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2b14      	cmp	r3, #20
 80050a2:	f200 80f0 	bhi.w	8005286 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80050a6:	a201      	add	r2, pc, #4	; (adr r2, 80050ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80050a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ac:	08005101 	.word	0x08005101
 80050b0:	08005287 	.word	0x08005287
 80050b4:	08005287 	.word	0x08005287
 80050b8:	08005287 	.word	0x08005287
 80050bc:	08005141 	.word	0x08005141
 80050c0:	08005287 	.word	0x08005287
 80050c4:	08005287 	.word	0x08005287
 80050c8:	08005287 	.word	0x08005287
 80050cc:	08005183 	.word	0x08005183
 80050d0:	08005287 	.word	0x08005287
 80050d4:	08005287 	.word	0x08005287
 80050d8:	08005287 	.word	0x08005287
 80050dc:	080051c3 	.word	0x080051c3
 80050e0:	08005287 	.word	0x08005287
 80050e4:	08005287 	.word	0x08005287
 80050e8:	08005287 	.word	0x08005287
 80050ec:	08005205 	.word	0x08005205
 80050f0:	08005287 	.word	0x08005287
 80050f4:	08005287 	.word	0x08005287
 80050f8:	08005287 	.word	0x08005287
 80050fc:	08005245 	.word	0x08005245
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68b9      	ldr	r1, [r7, #8]
 8005106:	4618      	mov	r0, r3
 8005108:	f000 f992 	bl	8005430 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	699a      	ldr	r2, [r3, #24]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0208 	orr.w	r2, r2, #8
 800511a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	699a      	ldr	r2, [r3, #24]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f022 0204 	bic.w	r2, r2, #4
 800512a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6999      	ldr	r1, [r3, #24]
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	691a      	ldr	r2, [r3, #16]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	430a      	orrs	r2, r1
 800513c:	619a      	str	r2, [r3, #24]
      break;
 800513e:	e0a5      	b.n	800528c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68b9      	ldr	r1, [r7, #8]
 8005146:	4618      	mov	r0, r3
 8005148:	f000 f9e4 	bl	8005514 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	699a      	ldr	r2, [r3, #24]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800515a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	699a      	ldr	r2, [r3, #24]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800516a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6999      	ldr	r1, [r3, #24]
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	021a      	lsls	r2, r3, #8
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	430a      	orrs	r2, r1
 800517e:	619a      	str	r2, [r3, #24]
      break;
 8005180:	e084      	b.n	800528c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68b9      	ldr	r1, [r7, #8]
 8005188:	4618      	mov	r0, r3
 800518a:	f000 fa3b 	bl	8005604 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	69da      	ldr	r2, [r3, #28]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f042 0208 	orr.w	r2, r2, #8
 800519c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	69da      	ldr	r2, [r3, #28]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f022 0204 	bic.w	r2, r2, #4
 80051ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	69d9      	ldr	r1, [r3, #28]
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	691a      	ldr	r2, [r3, #16]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	430a      	orrs	r2, r1
 80051be:	61da      	str	r2, [r3, #28]
      break;
 80051c0:	e064      	b.n	800528c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68b9      	ldr	r1, [r7, #8]
 80051c8:	4618      	mov	r0, r3
 80051ca:	f000 fa91 	bl	80056f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	69da      	ldr	r2, [r3, #28]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	69da      	ldr	r2, [r3, #28]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	69d9      	ldr	r1, [r3, #28]
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	021a      	lsls	r2, r3, #8
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	61da      	str	r2, [r3, #28]
      break;
 8005202:	e043      	b.n	800528c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68b9      	ldr	r1, [r7, #8]
 800520a:	4618      	mov	r0, r3
 800520c:	f000 fac8 	bl	80057a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 0208 	orr.w	r2, r2, #8
 800521e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f022 0204 	bic.w	r2, r2, #4
 800522e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	691a      	ldr	r2, [r3, #16]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	430a      	orrs	r2, r1
 8005240:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005242:	e023      	b.n	800528c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68b9      	ldr	r1, [r7, #8]
 800524a:	4618      	mov	r0, r3
 800524c:	f000 fafa 	bl	8005844 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800525e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800526e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	021a      	lsls	r2, r3, #8
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	430a      	orrs	r2, r1
 8005282:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005284:	e002      	b.n	800528c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	75fb      	strb	r3, [r7, #23]
      break;
 800528a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005294:	7dfb      	ldrb	r3, [r7, #23]
}
 8005296:	4618      	mov	r0, r3
 8005298:	3718      	adds	r7, #24
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop

080052a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a40      	ldr	r2, [pc, #256]	; (8005404 <TIM_Base_SetConfig+0x114>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d013      	beq.n	8005330 <TIM_Base_SetConfig+0x40>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800530e:	d00f      	beq.n	8005330 <TIM_Base_SetConfig+0x40>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a3d      	ldr	r2, [pc, #244]	; (8005408 <TIM_Base_SetConfig+0x118>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d00b      	beq.n	8005330 <TIM_Base_SetConfig+0x40>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a3c      	ldr	r2, [pc, #240]	; (800540c <TIM_Base_SetConfig+0x11c>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d007      	beq.n	8005330 <TIM_Base_SetConfig+0x40>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a3b      	ldr	r2, [pc, #236]	; (8005410 <TIM_Base_SetConfig+0x120>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d003      	beq.n	8005330 <TIM_Base_SetConfig+0x40>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a3a      	ldr	r2, [pc, #232]	; (8005414 <TIM_Base_SetConfig+0x124>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d108      	bne.n	8005342 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005336:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	4313      	orrs	r3, r2
 8005340:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a2f      	ldr	r2, [pc, #188]	; (8005404 <TIM_Base_SetConfig+0x114>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d02b      	beq.n	80053a2 <TIM_Base_SetConfig+0xb2>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005350:	d027      	beq.n	80053a2 <TIM_Base_SetConfig+0xb2>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a2c      	ldr	r2, [pc, #176]	; (8005408 <TIM_Base_SetConfig+0x118>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d023      	beq.n	80053a2 <TIM_Base_SetConfig+0xb2>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a2b      	ldr	r2, [pc, #172]	; (800540c <TIM_Base_SetConfig+0x11c>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d01f      	beq.n	80053a2 <TIM_Base_SetConfig+0xb2>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a2a      	ldr	r2, [pc, #168]	; (8005410 <TIM_Base_SetConfig+0x120>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d01b      	beq.n	80053a2 <TIM_Base_SetConfig+0xb2>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a29      	ldr	r2, [pc, #164]	; (8005414 <TIM_Base_SetConfig+0x124>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d017      	beq.n	80053a2 <TIM_Base_SetConfig+0xb2>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a28      	ldr	r2, [pc, #160]	; (8005418 <TIM_Base_SetConfig+0x128>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d013      	beq.n	80053a2 <TIM_Base_SetConfig+0xb2>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a27      	ldr	r2, [pc, #156]	; (800541c <TIM_Base_SetConfig+0x12c>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d00f      	beq.n	80053a2 <TIM_Base_SetConfig+0xb2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a26      	ldr	r2, [pc, #152]	; (8005420 <TIM_Base_SetConfig+0x130>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d00b      	beq.n	80053a2 <TIM_Base_SetConfig+0xb2>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a25      	ldr	r2, [pc, #148]	; (8005424 <TIM_Base_SetConfig+0x134>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d007      	beq.n	80053a2 <TIM_Base_SetConfig+0xb2>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a24      	ldr	r2, [pc, #144]	; (8005428 <TIM_Base_SetConfig+0x138>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d003      	beq.n	80053a2 <TIM_Base_SetConfig+0xb2>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a23      	ldr	r2, [pc, #140]	; (800542c <TIM_Base_SetConfig+0x13c>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d108      	bne.n	80053b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	4313      	orrs	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a0a      	ldr	r2, [pc, #40]	; (8005404 <TIM_Base_SetConfig+0x114>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d003      	beq.n	80053e8 <TIM_Base_SetConfig+0xf8>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a0c      	ldr	r2, [pc, #48]	; (8005414 <TIM_Base_SetConfig+0x124>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d103      	bne.n	80053f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	691a      	ldr	r2, [r3, #16]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	615a      	str	r2, [r3, #20]
}
 80053f6:	bf00      	nop
 80053f8:	3714      	adds	r7, #20
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	40010000 	.word	0x40010000
 8005408:	40000400 	.word	0x40000400
 800540c:	40000800 	.word	0x40000800
 8005410:	40000c00 	.word	0x40000c00
 8005414:	40010400 	.word	0x40010400
 8005418:	40014000 	.word	0x40014000
 800541c:	40014400 	.word	0x40014400
 8005420:	40014800 	.word	0x40014800
 8005424:	40001800 	.word	0x40001800
 8005428:	40001c00 	.word	0x40001c00
 800542c:	40002000 	.word	0x40002000

08005430 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005430:	b480      	push	{r7}
 8005432:	b087      	sub	sp, #28
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	f023 0201 	bic.w	r2, r3, #1
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	4b2b      	ldr	r3, [pc, #172]	; (8005508 <TIM_OC1_SetConfig+0xd8>)
 800545c:	4013      	ands	r3, r2
 800545e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f023 0303 	bic.w	r3, r3, #3
 8005466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	4313      	orrs	r3, r2
 8005470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	f023 0302 	bic.w	r3, r3, #2
 8005478:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	4313      	orrs	r3, r2
 8005482:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a21      	ldr	r2, [pc, #132]	; (800550c <TIM_OC1_SetConfig+0xdc>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d003      	beq.n	8005494 <TIM_OC1_SetConfig+0x64>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a20      	ldr	r2, [pc, #128]	; (8005510 <TIM_OC1_SetConfig+0xe0>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d10c      	bne.n	80054ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f023 0308 	bic.w	r3, r3, #8
 800549a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	f023 0304 	bic.w	r3, r3, #4
 80054ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a16      	ldr	r2, [pc, #88]	; (800550c <TIM_OC1_SetConfig+0xdc>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d003      	beq.n	80054be <TIM_OC1_SetConfig+0x8e>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a15      	ldr	r2, [pc, #84]	; (8005510 <TIM_OC1_SetConfig+0xe0>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d111      	bne.n	80054e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	4313      	orrs	r3, r2
 80054e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	621a      	str	r2, [r3, #32]
}
 80054fc:	bf00      	nop
 80054fe:	371c      	adds	r7, #28
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	fffeff8f 	.word	0xfffeff8f
 800550c:	40010000 	.word	0x40010000
 8005510:	40010400 	.word	0x40010400

08005514 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005514:	b480      	push	{r7}
 8005516:	b087      	sub	sp, #28
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	f023 0210 	bic.w	r2, r3, #16
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	4b2e      	ldr	r3, [pc, #184]	; (80055f8 <TIM_OC2_SetConfig+0xe4>)
 8005540:	4013      	ands	r3, r2
 8005542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800554a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	021b      	lsls	r3, r3, #8
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	4313      	orrs	r3, r2
 8005556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	f023 0320 	bic.w	r3, r3, #32
 800555e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	011b      	lsls	r3, r3, #4
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	4313      	orrs	r3, r2
 800556a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a23      	ldr	r2, [pc, #140]	; (80055fc <TIM_OC2_SetConfig+0xe8>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d003      	beq.n	800557c <TIM_OC2_SetConfig+0x68>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a22      	ldr	r2, [pc, #136]	; (8005600 <TIM_OC2_SetConfig+0xec>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d10d      	bne.n	8005598 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005582:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	011b      	lsls	r3, r3, #4
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	4313      	orrs	r3, r2
 800558e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005596:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a18      	ldr	r2, [pc, #96]	; (80055fc <TIM_OC2_SetConfig+0xe8>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d003      	beq.n	80055a8 <TIM_OC2_SetConfig+0x94>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a17      	ldr	r2, [pc, #92]	; (8005600 <TIM_OC2_SetConfig+0xec>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d113      	bne.n	80055d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	685a      	ldr	r2, [r3, #4]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	621a      	str	r2, [r3, #32]
}
 80055ea:	bf00      	nop
 80055ec:	371c      	adds	r7, #28
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	feff8fff 	.word	0xfeff8fff
 80055fc:	40010000 	.word	0x40010000
 8005600:	40010400 	.word	0x40010400

08005604 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005604:	b480      	push	{r7}
 8005606:	b087      	sub	sp, #28
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	69db      	ldr	r3, [r3, #28]
 800562a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	4b2d      	ldr	r3, [pc, #180]	; (80056e4 <TIM_OC3_SetConfig+0xe0>)
 8005630:	4013      	ands	r3, r2
 8005632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f023 0303 	bic.w	r3, r3, #3
 800563a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	4313      	orrs	r3, r2
 8005644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800564c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	021b      	lsls	r3, r3, #8
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	4313      	orrs	r3, r2
 8005658:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a22      	ldr	r2, [pc, #136]	; (80056e8 <TIM_OC3_SetConfig+0xe4>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d003      	beq.n	800566a <TIM_OC3_SetConfig+0x66>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a21      	ldr	r2, [pc, #132]	; (80056ec <TIM_OC3_SetConfig+0xe8>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d10d      	bne.n	8005686 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005670:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	021b      	lsls	r3, r3, #8
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	4313      	orrs	r3, r2
 800567c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005684:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a17      	ldr	r2, [pc, #92]	; (80056e8 <TIM_OC3_SetConfig+0xe4>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d003      	beq.n	8005696 <TIM_OC3_SetConfig+0x92>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a16      	ldr	r2, [pc, #88]	; (80056ec <TIM_OC3_SetConfig+0xe8>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d113      	bne.n	80056be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800569c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	011b      	lsls	r3, r3, #4
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	011b      	lsls	r3, r3, #4
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	621a      	str	r2, [r3, #32]
}
 80056d8:	bf00      	nop
 80056da:	371c      	adds	r7, #28
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr
 80056e4:	fffeff8f 	.word	0xfffeff8f
 80056e8:	40010000 	.word	0x40010000
 80056ec:	40010400 	.word	0x40010400

080056f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b087      	sub	sp, #28
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	4b1e      	ldr	r3, [pc, #120]	; (8005794 <TIM_OC4_SetConfig+0xa4>)
 800571c:	4013      	ands	r3, r2
 800571e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	021b      	lsls	r3, r3, #8
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	4313      	orrs	r3, r2
 8005732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800573a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	031b      	lsls	r3, r3, #12
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	4313      	orrs	r3, r2
 8005746:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a13      	ldr	r2, [pc, #76]	; (8005798 <TIM_OC4_SetConfig+0xa8>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d003      	beq.n	8005758 <TIM_OC4_SetConfig+0x68>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a12      	ldr	r2, [pc, #72]	; (800579c <TIM_OC4_SetConfig+0xac>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d109      	bne.n	800576c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800575e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	019b      	lsls	r3, r3, #6
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	4313      	orrs	r3, r2
 800576a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	685a      	ldr	r2, [r3, #4]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	621a      	str	r2, [r3, #32]
}
 8005786:	bf00      	nop
 8005788:	371c      	adds	r7, #28
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	feff8fff 	.word	0xfeff8fff
 8005798:	40010000 	.word	0x40010000
 800579c:	40010400 	.word	0x40010400

080057a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b087      	sub	sp, #28
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	4b1b      	ldr	r3, [pc, #108]	; (8005838 <TIM_OC5_SetConfig+0x98>)
 80057cc:	4013      	ands	r3, r2
 80057ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80057e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	041b      	lsls	r3, r3, #16
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a12      	ldr	r2, [pc, #72]	; (800583c <TIM_OC5_SetConfig+0x9c>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d003      	beq.n	80057fe <TIM_OC5_SetConfig+0x5e>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a11      	ldr	r2, [pc, #68]	; (8005840 <TIM_OC5_SetConfig+0xa0>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d109      	bne.n	8005812 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005804:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	021b      	lsls	r3, r3, #8
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	4313      	orrs	r3, r2
 8005810:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	685a      	ldr	r2, [r3, #4]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	621a      	str	r2, [r3, #32]
}
 800582c:	bf00      	nop
 800582e:	371c      	adds	r7, #28
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr
 8005838:	fffeff8f 	.word	0xfffeff8f
 800583c:	40010000 	.word	0x40010000
 8005840:	40010400 	.word	0x40010400

08005844 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005844:	b480      	push	{r7}
 8005846:	b087      	sub	sp, #28
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800586a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	4b1c      	ldr	r3, [pc, #112]	; (80058e0 <TIM_OC6_SetConfig+0x9c>)
 8005870:	4013      	ands	r3, r2
 8005872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	021b      	lsls	r3, r3, #8
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	4313      	orrs	r3, r2
 800587e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005886:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	051b      	lsls	r3, r3, #20
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	4313      	orrs	r3, r2
 8005892:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a13      	ldr	r2, [pc, #76]	; (80058e4 <TIM_OC6_SetConfig+0xa0>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d003      	beq.n	80058a4 <TIM_OC6_SetConfig+0x60>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a12      	ldr	r2, [pc, #72]	; (80058e8 <TIM_OC6_SetConfig+0xa4>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d109      	bne.n	80058b8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	029b      	lsls	r3, r3, #10
 80058b2:	697a      	ldr	r2, [r7, #20]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	685a      	ldr	r2, [r3, #4]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	621a      	str	r2, [r3, #32]
}
 80058d2:	bf00      	nop
 80058d4:	371c      	adds	r7, #28
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	feff8fff 	.word	0xfeff8fff
 80058e4:	40010000 	.word	0x40010000
 80058e8:	40010400 	.word	0x40010400

080058ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b085      	sub	sp, #20
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d101      	bne.n	8005904 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005900:	2302      	movs	r3, #2
 8005902:	e06d      	b.n	80059e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2202      	movs	r2, #2
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a30      	ldr	r2, [pc, #192]	; (80059ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d004      	beq.n	8005938 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a2f      	ldr	r2, [pc, #188]	; (80059f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d108      	bne.n	800594a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800593e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	4313      	orrs	r3, r2
 8005948:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005950:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	4313      	orrs	r3, r2
 800595a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a20      	ldr	r2, [pc, #128]	; (80059ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d022      	beq.n	80059b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005976:	d01d      	beq.n	80059b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a1d      	ldr	r2, [pc, #116]	; (80059f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d018      	beq.n	80059b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a1c      	ldr	r2, [pc, #112]	; (80059f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d013      	beq.n	80059b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a1a      	ldr	r2, [pc, #104]	; (80059fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d00e      	beq.n	80059b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a15      	ldr	r2, [pc, #84]	; (80059f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d009      	beq.n	80059b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a16      	ldr	r2, [pc, #88]	; (8005a00 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d004      	beq.n	80059b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a15      	ldr	r2, [pc, #84]	; (8005a04 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d10c      	bne.n	80059ce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	68ba      	ldr	r2, [r7, #8]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3714      	adds	r7, #20
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	40010000 	.word	0x40010000
 80059f0:	40010400 	.word	0x40010400
 80059f4:	40000400 	.word	0x40000400
 80059f8:	40000800 	.word	0x40000800
 80059fc:	40000c00 	.word	0x40000c00
 8005a00:	40014000 	.word	0x40014000
 8005a04:	40001800 	.word	0x40001800

08005a08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a12:	2300      	movs	r3, #0
 8005a14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d101      	bne.n	8005a24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a20:	2302      	movs	r3, #2
 8005a22:	e065      	b.n	8005af0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	695b      	ldr	r3, [r3, #20]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	041b      	lsls	r3, r3, #16
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a16      	ldr	r2, [pc, #88]	; (8005afc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d004      	beq.n	8005ab2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a14      	ldr	r2, [pc, #80]	; (8005b00 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d115      	bne.n	8005ade <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abc:	051b      	lsls	r3, r3, #20
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	69db      	ldr	r3, [r3, #28]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	40010000 	.word	0x40010000
 8005b00:	40010400 	.word	0x40010400

08005b04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b34:	bf00      	nop
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d101      	bne.n	8005b52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e040      	b.n	8005bd4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d106      	bne.n	8005b68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7fc fc0a 	bl	800237c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2224      	movs	r2, #36	; 0x24
 8005b6c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f022 0201 	bic.w	r2, r2, #1
 8005b7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 fcae 	bl	80064e0 <UART_SetConfig>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d101      	bne.n	8005b8e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e022      	b.n	8005bd4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d002      	beq.n	8005b9c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 ff06 	bl	80069a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	685a      	ldr	r2, [r3, #4]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005baa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	689a      	ldr	r2, [r3, #8]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f042 0201 	orr.w	r2, r2, #1
 8005bca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 ff8d 	bl	8006aec <UART_CheckIdleState>
 8005bd2:	4603      	mov	r3, r0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3708      	adds	r7, #8
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b08a      	sub	sp, #40	; 0x28
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	4613      	mov	r3, r2
 8005be8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bee:	2b20      	cmp	r3, #32
 8005bf0:	d165      	bne.n	8005cbe <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d002      	beq.n	8005bfe <HAL_UART_Transmit_DMA+0x22>
 8005bf8:	88fb      	ldrh	r3, [r7, #6]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d101      	bne.n	8005c02 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e05e      	b.n	8005cc0 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	88fa      	ldrh	r2, [r7, #6]
 8005c0c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	88fa      	ldrh	r2, [r7, #6]
 8005c14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2221      	movs	r2, #33	; 0x21
 8005c24:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d027      	beq.n	8005c7e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c32:	4a25      	ldr	r2, [pc, #148]	; (8005cc8 <HAL_UART_Transmit_DMA+0xec>)
 8005c34:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c3a:	4a24      	ldr	r2, [pc, #144]	; (8005ccc <HAL_UART_Transmit_DMA+0xf0>)
 8005c3c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c42:	4a23      	ldr	r2, [pc, #140]	; (8005cd0 <HAL_UART_Transmit_DMA+0xf4>)
 8005c44:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c56:	4619      	mov	r1, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	3328      	adds	r3, #40	; 0x28
 8005c5e:	461a      	mov	r2, r3
 8005c60:	88fb      	ldrh	r3, [r7, #6]
 8005c62:	f7fc ff0d 	bl	8002a80 <HAL_DMA_Start_IT>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d008      	beq.n	8005c7e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2210      	movs	r2, #16
 8005c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2220      	movs	r2, #32
 8005c78:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e020      	b.n	8005cc0 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2240      	movs	r2, #64	; 0x40
 8005c84:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	3308      	adds	r3, #8
 8005c8c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	e853 3f00 	ldrex	r3, [r3]
 8005c94:	613b      	str	r3, [r7, #16]
   return(result);
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	3308      	adds	r3, #8
 8005ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ca6:	623a      	str	r2, [r7, #32]
 8005ca8:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005caa:	69f9      	ldr	r1, [r7, #28]
 8005cac:	6a3a      	ldr	r2, [r7, #32]
 8005cae:	e841 2300 	strex	r3, r2, [r1]
 8005cb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1e5      	bne.n	8005c86 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	e000      	b.n	8005cc0 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8005cbe:	2302      	movs	r3, #2
  }
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3728      	adds	r7, #40	; 0x28
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	08006f69 	.word	0x08006f69
 8005ccc:	08006fff 	.word	0x08006fff
 8005cd0:	08007181 	.word	0x08007181

08005cd4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b08a      	sub	sp, #40	; 0x28
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	4613      	mov	r3, r2
 8005ce0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ce8:	2b20      	cmp	r3, #32
 8005cea:	d132      	bne.n	8005d52 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d002      	beq.n	8005cf8 <HAL_UART_Receive_DMA+0x24>
 8005cf2:	88fb      	ldrh	r3, [r7, #6]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d101      	bne.n	8005cfc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e02b      	b.n	8005d54 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d018      	beq.n	8005d42 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	e853 3f00 	ldrex	r3, [r3]
 8005d1c:	613b      	str	r3, [r7, #16]
   return(result);
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d24:	627b      	str	r3, [r7, #36]	; 0x24
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2e:	623b      	str	r3, [r7, #32]
 8005d30:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d32:	69f9      	ldr	r1, [r7, #28]
 8005d34:	6a3a      	ldr	r2, [r7, #32]
 8005d36:	e841 2300 	strex	r3, r2, [r1]
 8005d3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1e6      	bne.n	8005d10 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005d42:	88fb      	ldrh	r3, [r7, #6]
 8005d44:	461a      	mov	r2, r3
 8005d46:	68b9      	ldr	r1, [r7, #8]
 8005d48:	68f8      	ldr	r0, [r7, #12]
 8005d4a:	f000 ffe3 	bl	8006d14 <UART_Start_Receive_DMA>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	e000      	b.n	8005d54 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005d52:	2302      	movs	r3, #2
  }
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3728      	adds	r7, #40	; 0x28
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b090      	sub	sp, #64	; 0x40
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d68:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d70:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d7c:	2b80      	cmp	r3, #128	; 0x80
 8005d7e:	d139      	bne.n	8005df4 <HAL_UART_DMAStop+0x98>
 8005d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d82:	2b21      	cmp	r3, #33	; 0x21
 8005d84:	d136      	bne.n	8005df4 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	3308      	adds	r3, #8
 8005d8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8e:	6a3b      	ldr	r3, [r7, #32]
 8005d90:	e853 3f00 	ldrex	r3, [r3]
 8005d94:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d9c:	637b      	str	r3, [r7, #52]	; 0x34
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	3308      	adds	r3, #8
 8005da4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005da6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005da8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005daa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005dac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dae:	e841 2300 	strex	r3, r2, [r1]
 8005db2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1e5      	bne.n	8005d86 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d015      	beq.n	8005dee <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f7fc feba 	bl	8002b40 <HAL_DMA_Abort>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00d      	beq.n	8005dee <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7fd f8ce 	bl	8002f78 <HAL_DMA_GetError>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b20      	cmp	r3, #32
 8005de0:	d105      	bne.n	8005dee <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2210      	movs	r2, #16
 8005de6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e044      	b.n	8005e78 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f001 f830 	bl	8006e54 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dfe:	2b40      	cmp	r3, #64	; 0x40
 8005e00:	d139      	bne.n	8005e76 <HAL_UART_DMAStop+0x11a>
 8005e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e04:	2b22      	cmp	r3, #34	; 0x22
 8005e06:	d136      	bne.n	8005e76 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	3308      	adds	r3, #8
 8005e0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	e853 3f00 	ldrex	r3, [r3]
 8005e16:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e1e:	633b      	str	r3, [r7, #48]	; 0x30
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	3308      	adds	r3, #8
 8005e26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e28:	61ba      	str	r2, [r7, #24]
 8005e2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2c:	6979      	ldr	r1, [r7, #20]
 8005e2e:	69ba      	ldr	r2, [r7, #24]
 8005e30:	e841 2300 	strex	r3, r2, [r1]
 8005e34:	613b      	str	r3, [r7, #16]
   return(result);
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1e5      	bne.n	8005e08 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d015      	beq.n	8005e70 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7fc fe79 	bl	8002b40 <HAL_DMA_Abort>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00d      	beq.n	8005e70 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7fd f88d 	bl	8002f78 <HAL_DMA_GetError>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b20      	cmp	r3, #32
 8005e62:	d105      	bne.n	8005e70 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2210      	movs	r2, #16
 8005e68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e003      	b.n	8005e78 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f001 f815 	bl	8006ea0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3740      	adds	r7, #64	; 0x40
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b0ba      	sub	sp, #232	; 0xe8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	69db      	ldr	r3, [r3, #28]
 8005e8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005ea6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005eaa:	f640 030f 	movw	r3, #2063	; 0x80f
 8005eae:	4013      	ands	r3, r2
 8005eb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005eb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d115      	bne.n	8005ee8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ec0:	f003 0320 	and.w	r3, r3, #32
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00f      	beq.n	8005ee8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ecc:	f003 0320 	and.w	r3, r3, #32
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d009      	beq.n	8005ee8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f000 82ac 	beq.w	8006436 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	4798      	blx	r3
      }
      return;
 8005ee6:	e2a6      	b.n	8006436 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005ee8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 8117 	beq.w	8006120 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005ef2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d106      	bne.n	8005f0c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005efe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005f02:	4b85      	ldr	r3, [pc, #532]	; (8006118 <HAL_UART_IRQHandler+0x298>)
 8005f04:	4013      	ands	r3, r2
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f000 810a 	beq.w	8006120 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f10:	f003 0301 	and.w	r3, r3, #1
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d011      	beq.n	8005f3c <HAL_UART_IRQHandler+0xbc>
 8005f18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00b      	beq.n	8005f3c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f32:	f043 0201 	orr.w	r2, r3, #1
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f40:	f003 0302 	and.w	r3, r3, #2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d011      	beq.n	8005f6c <HAL_UART_IRQHandler+0xec>
 8005f48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f4c:	f003 0301 	and.w	r3, r3, #1
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00b      	beq.n	8005f6c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2202      	movs	r2, #2
 8005f5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f62:	f043 0204 	orr.w	r2, r3, #4
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f70:	f003 0304 	and.w	r3, r3, #4
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d011      	beq.n	8005f9c <HAL_UART_IRQHandler+0x11c>
 8005f78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f7c:	f003 0301 	and.w	r3, r3, #1
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00b      	beq.n	8005f9c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2204      	movs	r2, #4
 8005f8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f92:	f043 0202 	orr.w	r2, r3, #2
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fa0:	f003 0308 	and.w	r3, r3, #8
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d017      	beq.n	8005fd8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fac:	f003 0320 	and.w	r3, r3, #32
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d105      	bne.n	8005fc0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005fb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fb8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00b      	beq.n	8005fd8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2208      	movs	r2, #8
 8005fc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fce:	f043 0208 	orr.w	r2, r3, #8
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d012      	beq.n	800600a <HAL_UART_IRQHandler+0x18a>
 8005fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fe8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00c      	beq.n	800600a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ff8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006000:	f043 0220 	orr.w	r2, r3, #32
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006010:	2b00      	cmp	r3, #0
 8006012:	f000 8212 	beq.w	800643a <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800601a:	f003 0320 	and.w	r3, r3, #32
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00d      	beq.n	800603e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006022:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006026:	f003 0320 	and.w	r3, r3, #32
 800602a:	2b00      	cmp	r3, #0
 800602c:	d007      	beq.n	800603e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006032:	2b00      	cmp	r3, #0
 8006034:	d003      	beq.n	800603e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006044:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006052:	2b40      	cmp	r3, #64	; 0x40
 8006054:	d005      	beq.n	8006062 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006056:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800605a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800605e:	2b00      	cmp	r3, #0
 8006060:	d04f      	beq.n	8006102 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 ff1c 	bl	8006ea0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006072:	2b40      	cmp	r3, #64	; 0x40
 8006074:	d141      	bne.n	80060fa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	3308      	adds	r3, #8
 800607c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006080:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006084:	e853 3f00 	ldrex	r3, [r3]
 8006088:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800608c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006090:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006094:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	3308      	adds	r3, #8
 800609e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80060a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80060a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80060ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80060b2:	e841 2300 	strex	r3, r2, [r1]
 80060b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80060ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1d9      	bne.n	8006076 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d013      	beq.n	80060f2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060ce:	4a13      	ldr	r2, [pc, #76]	; (800611c <HAL_UART_IRQHandler+0x29c>)
 80060d0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7fc fda2 	bl	8002c20 <HAL_DMA_Abort_IT>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d017      	beq.n	8006112 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80060ec:	4610      	mov	r0, r2
 80060ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060f0:	e00f      	b.n	8006112 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f9d4 	bl	80064a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060f8:	e00b      	b.n	8006112 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f9d0 	bl	80064a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006100:	e007      	b.n	8006112 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 f9cc 	bl	80064a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006110:	e193      	b.n	800643a <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006112:	bf00      	nop
    return;
 8006114:	e191      	b.n	800643a <HAL_UART_IRQHandler+0x5ba>
 8006116:	bf00      	nop
 8006118:	04000120 	.word	0x04000120
 800611c:	080071ff 	.word	0x080071ff

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006124:	2b01      	cmp	r3, #1
 8006126:	f040 814c 	bne.w	80063c2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800612a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800612e:	f003 0310 	and.w	r3, r3, #16
 8006132:	2b00      	cmp	r3, #0
 8006134:	f000 8145 	beq.w	80063c2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800613c:	f003 0310 	and.w	r3, r3, #16
 8006140:	2b00      	cmp	r3, #0
 8006142:	f000 813e 	beq.w	80063c2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2210      	movs	r2, #16
 800614c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006158:	2b40      	cmp	r3, #64	; 0x40
 800615a:	f040 80b6 	bne.w	80062ca <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800616a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800616e:	2b00      	cmp	r3, #0
 8006170:	f000 8165 	beq.w	800643e <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800617a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800617e:	429a      	cmp	r2, r3
 8006180:	f080 815d 	bcs.w	800643e <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800618a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006192:	69db      	ldr	r3, [r3, #28]
 8006194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006198:	f000 8086 	beq.w	80062a8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061a8:	e853 3f00 	ldrex	r3, [r3]
 80061ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80061b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	461a      	mov	r2, r3
 80061c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80061c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80061ca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80061d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80061d6:	e841 2300 	strex	r3, r2, [r1]
 80061da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80061de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1da      	bne.n	800619c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	3308      	adds	r3, #8
 80061ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061f0:	e853 3f00 	ldrex	r3, [r3]
 80061f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80061f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061f8:	f023 0301 	bic.w	r3, r3, #1
 80061fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	3308      	adds	r3, #8
 8006206:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800620a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800620e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006210:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006212:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006216:	e841 2300 	strex	r3, r2, [r1]
 800621a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800621c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1e1      	bne.n	80061e6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	3308      	adds	r3, #8
 8006228:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800622c:	e853 3f00 	ldrex	r3, [r3]
 8006230:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006232:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006238:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	3308      	adds	r3, #8
 8006242:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006246:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006248:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800624c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800624e:	e841 2300 	strex	r3, r2, [r1]
 8006252:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006254:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006256:	2b00      	cmp	r3, #0
 8006258:	d1e3      	bne.n	8006222 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2220      	movs	r2, #32
 800625e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006270:	e853 3f00 	ldrex	r3, [r3]
 8006274:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006276:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006278:	f023 0310 	bic.w	r3, r3, #16
 800627c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	461a      	mov	r2, r3
 8006286:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800628a:	65bb      	str	r3, [r7, #88]	; 0x58
 800628c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006290:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006292:	e841 2300 	strex	r3, r2, [r1]
 8006296:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800629a:	2b00      	cmp	r3, #0
 800629c:	d1e4      	bne.n	8006268 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7fc fc4c 	bl	8002b40 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2202      	movs	r2, #2
 80062ac:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	b29b      	uxth	r3, r3
 80062c0:	4619      	mov	r1, r3
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f8f6 	bl	80064b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80062c8:	e0b9      	b.n	800643e <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	f000 80ab 	beq.w	8006442 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80062ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f000 80a6 	beq.w	8006442 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062fe:	e853 3f00 	ldrex	r3, [r3]
 8006302:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006306:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800630a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	461a      	mov	r2, r3
 8006314:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006318:	647b      	str	r3, [r7, #68]	; 0x44
 800631a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800631e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006320:	e841 2300 	strex	r3, r2, [r1]
 8006324:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006328:	2b00      	cmp	r3, #0
 800632a:	d1e4      	bne.n	80062f6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	3308      	adds	r3, #8
 8006332:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006336:	e853 3f00 	ldrex	r3, [r3]
 800633a:	623b      	str	r3, [r7, #32]
   return(result);
 800633c:	6a3b      	ldr	r3, [r7, #32]
 800633e:	f023 0301 	bic.w	r3, r3, #1
 8006342:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	3308      	adds	r3, #8
 800634c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006350:	633a      	str	r2, [r7, #48]	; 0x30
 8006352:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006354:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006356:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006358:	e841 2300 	strex	r3, r2, [r1]
 800635c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800635e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006360:	2b00      	cmp	r3, #0
 8006362:	d1e3      	bne.n	800632c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2220      	movs	r2, #32
 8006368:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	e853 3f00 	ldrex	r3, [r3]
 8006384:	60fb      	str	r3, [r7, #12]
   return(result);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f023 0310 	bic.w	r3, r3, #16
 800638c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	461a      	mov	r2, r3
 8006396:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800639a:	61fb      	str	r3, [r7, #28]
 800639c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639e:	69b9      	ldr	r1, [r7, #24]
 80063a0:	69fa      	ldr	r2, [r7, #28]
 80063a2:	e841 2300 	strex	r3, r2, [r1]
 80063a6:	617b      	str	r3, [r7, #20]
   return(result);
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1e4      	bne.n	8006378 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2202      	movs	r2, #2
 80063b2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80063b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80063b8:	4619      	mov	r1, r3
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 f87a 	bl	80064b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80063c0:	e03f      	b.n	8006442 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80063c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00e      	beq.n	80063ec <HAL_UART_IRQHandler+0x56c>
 80063ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d008      	beq.n	80063ec <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80063e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 f871 	bl	80064cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063ea:	e02d      	b.n	8006448 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80063ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00e      	beq.n	8006416 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80063f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006400:	2b00      	cmp	r3, #0
 8006402:	d008      	beq.n	8006416 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006408:	2b00      	cmp	r3, #0
 800640a:	d01c      	beq.n	8006446 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	4798      	blx	r3
    }
    return;
 8006414:	e017      	b.n	8006446 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800641a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800641e:	2b00      	cmp	r3, #0
 8006420:	d012      	beq.n	8006448 <HAL_UART_IRQHandler+0x5c8>
 8006422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00c      	beq.n	8006448 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 fefb 	bl	800722a <UART_EndTransmit_IT>
    return;
 8006434:	e008      	b.n	8006448 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006436:	bf00      	nop
 8006438:	e006      	b.n	8006448 <HAL_UART_IRQHandler+0x5c8>
    return;
 800643a:	bf00      	nop
 800643c:	e004      	b.n	8006448 <HAL_UART_IRQHandler+0x5c8>
      return;
 800643e:	bf00      	nop
 8006440:	e002      	b.n	8006448 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006442:	bf00      	nop
 8006444:	e000      	b.n	8006448 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006446:	bf00      	nop
  }

}
 8006448:	37e8      	adds	r7, #232	; 0xe8
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop

08006450 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006458:	bf00      	nop
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800646c:	bf00      	nop
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006480:	bf00      	nop
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006494:	bf00      	nop
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80064a8:	bf00      	nop
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	460b      	mov	r3, r1
 80064be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b088      	sub	sp, #32
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064e8:	2300      	movs	r3, #0
 80064ea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	689a      	ldr	r2, [r3, #8]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	431a      	orrs	r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	431a      	orrs	r2, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	69db      	ldr	r3, [r3, #28]
 8006500:	4313      	orrs	r3, r2
 8006502:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	4ba6      	ldr	r3, [pc, #664]	; (80067a4 <UART_SetConfig+0x2c4>)
 800650c:	4013      	ands	r3, r2
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	6812      	ldr	r2, [r2, #0]
 8006512:	6979      	ldr	r1, [r7, #20]
 8006514:	430b      	orrs	r3, r1
 8006516:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	68da      	ldr	r2, [r3, #12]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	430a      	orrs	r2, r1
 800652c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6a1b      	ldr	r3, [r3, #32]
 8006538:	697a      	ldr	r2, [r7, #20]
 800653a:	4313      	orrs	r3, r2
 800653c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	697a      	ldr	r2, [r7, #20]
 800654e:	430a      	orrs	r2, r1
 8006550:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a94      	ldr	r2, [pc, #592]	; (80067a8 <UART_SetConfig+0x2c8>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d120      	bne.n	800659e <UART_SetConfig+0xbe>
 800655c:	4b93      	ldr	r3, [pc, #588]	; (80067ac <UART_SetConfig+0x2cc>)
 800655e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006562:	f003 0303 	and.w	r3, r3, #3
 8006566:	2b03      	cmp	r3, #3
 8006568:	d816      	bhi.n	8006598 <UART_SetConfig+0xb8>
 800656a:	a201      	add	r2, pc, #4	; (adr r2, 8006570 <UART_SetConfig+0x90>)
 800656c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006570:	08006581 	.word	0x08006581
 8006574:	0800658d 	.word	0x0800658d
 8006578:	08006587 	.word	0x08006587
 800657c:	08006593 	.word	0x08006593
 8006580:	2301      	movs	r3, #1
 8006582:	77fb      	strb	r3, [r7, #31]
 8006584:	e150      	b.n	8006828 <UART_SetConfig+0x348>
 8006586:	2302      	movs	r3, #2
 8006588:	77fb      	strb	r3, [r7, #31]
 800658a:	e14d      	b.n	8006828 <UART_SetConfig+0x348>
 800658c:	2304      	movs	r3, #4
 800658e:	77fb      	strb	r3, [r7, #31]
 8006590:	e14a      	b.n	8006828 <UART_SetConfig+0x348>
 8006592:	2308      	movs	r3, #8
 8006594:	77fb      	strb	r3, [r7, #31]
 8006596:	e147      	b.n	8006828 <UART_SetConfig+0x348>
 8006598:	2310      	movs	r3, #16
 800659a:	77fb      	strb	r3, [r7, #31]
 800659c:	e144      	b.n	8006828 <UART_SetConfig+0x348>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a83      	ldr	r2, [pc, #524]	; (80067b0 <UART_SetConfig+0x2d0>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d132      	bne.n	800660e <UART_SetConfig+0x12e>
 80065a8:	4b80      	ldr	r3, [pc, #512]	; (80067ac <UART_SetConfig+0x2cc>)
 80065aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ae:	f003 030c 	and.w	r3, r3, #12
 80065b2:	2b0c      	cmp	r3, #12
 80065b4:	d828      	bhi.n	8006608 <UART_SetConfig+0x128>
 80065b6:	a201      	add	r2, pc, #4	; (adr r2, 80065bc <UART_SetConfig+0xdc>)
 80065b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065bc:	080065f1 	.word	0x080065f1
 80065c0:	08006609 	.word	0x08006609
 80065c4:	08006609 	.word	0x08006609
 80065c8:	08006609 	.word	0x08006609
 80065cc:	080065fd 	.word	0x080065fd
 80065d0:	08006609 	.word	0x08006609
 80065d4:	08006609 	.word	0x08006609
 80065d8:	08006609 	.word	0x08006609
 80065dc:	080065f7 	.word	0x080065f7
 80065e0:	08006609 	.word	0x08006609
 80065e4:	08006609 	.word	0x08006609
 80065e8:	08006609 	.word	0x08006609
 80065ec:	08006603 	.word	0x08006603
 80065f0:	2300      	movs	r3, #0
 80065f2:	77fb      	strb	r3, [r7, #31]
 80065f4:	e118      	b.n	8006828 <UART_SetConfig+0x348>
 80065f6:	2302      	movs	r3, #2
 80065f8:	77fb      	strb	r3, [r7, #31]
 80065fa:	e115      	b.n	8006828 <UART_SetConfig+0x348>
 80065fc:	2304      	movs	r3, #4
 80065fe:	77fb      	strb	r3, [r7, #31]
 8006600:	e112      	b.n	8006828 <UART_SetConfig+0x348>
 8006602:	2308      	movs	r3, #8
 8006604:	77fb      	strb	r3, [r7, #31]
 8006606:	e10f      	b.n	8006828 <UART_SetConfig+0x348>
 8006608:	2310      	movs	r3, #16
 800660a:	77fb      	strb	r3, [r7, #31]
 800660c:	e10c      	b.n	8006828 <UART_SetConfig+0x348>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a68      	ldr	r2, [pc, #416]	; (80067b4 <UART_SetConfig+0x2d4>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d120      	bne.n	800665a <UART_SetConfig+0x17a>
 8006618:	4b64      	ldr	r3, [pc, #400]	; (80067ac <UART_SetConfig+0x2cc>)
 800661a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800661e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006622:	2b30      	cmp	r3, #48	; 0x30
 8006624:	d013      	beq.n	800664e <UART_SetConfig+0x16e>
 8006626:	2b30      	cmp	r3, #48	; 0x30
 8006628:	d814      	bhi.n	8006654 <UART_SetConfig+0x174>
 800662a:	2b20      	cmp	r3, #32
 800662c:	d009      	beq.n	8006642 <UART_SetConfig+0x162>
 800662e:	2b20      	cmp	r3, #32
 8006630:	d810      	bhi.n	8006654 <UART_SetConfig+0x174>
 8006632:	2b00      	cmp	r3, #0
 8006634:	d002      	beq.n	800663c <UART_SetConfig+0x15c>
 8006636:	2b10      	cmp	r3, #16
 8006638:	d006      	beq.n	8006648 <UART_SetConfig+0x168>
 800663a:	e00b      	b.n	8006654 <UART_SetConfig+0x174>
 800663c:	2300      	movs	r3, #0
 800663e:	77fb      	strb	r3, [r7, #31]
 8006640:	e0f2      	b.n	8006828 <UART_SetConfig+0x348>
 8006642:	2302      	movs	r3, #2
 8006644:	77fb      	strb	r3, [r7, #31]
 8006646:	e0ef      	b.n	8006828 <UART_SetConfig+0x348>
 8006648:	2304      	movs	r3, #4
 800664a:	77fb      	strb	r3, [r7, #31]
 800664c:	e0ec      	b.n	8006828 <UART_SetConfig+0x348>
 800664e:	2308      	movs	r3, #8
 8006650:	77fb      	strb	r3, [r7, #31]
 8006652:	e0e9      	b.n	8006828 <UART_SetConfig+0x348>
 8006654:	2310      	movs	r3, #16
 8006656:	77fb      	strb	r3, [r7, #31]
 8006658:	e0e6      	b.n	8006828 <UART_SetConfig+0x348>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a56      	ldr	r2, [pc, #344]	; (80067b8 <UART_SetConfig+0x2d8>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d120      	bne.n	80066a6 <UART_SetConfig+0x1c6>
 8006664:	4b51      	ldr	r3, [pc, #324]	; (80067ac <UART_SetConfig+0x2cc>)
 8006666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800666a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800666e:	2bc0      	cmp	r3, #192	; 0xc0
 8006670:	d013      	beq.n	800669a <UART_SetConfig+0x1ba>
 8006672:	2bc0      	cmp	r3, #192	; 0xc0
 8006674:	d814      	bhi.n	80066a0 <UART_SetConfig+0x1c0>
 8006676:	2b80      	cmp	r3, #128	; 0x80
 8006678:	d009      	beq.n	800668e <UART_SetConfig+0x1ae>
 800667a:	2b80      	cmp	r3, #128	; 0x80
 800667c:	d810      	bhi.n	80066a0 <UART_SetConfig+0x1c0>
 800667e:	2b00      	cmp	r3, #0
 8006680:	d002      	beq.n	8006688 <UART_SetConfig+0x1a8>
 8006682:	2b40      	cmp	r3, #64	; 0x40
 8006684:	d006      	beq.n	8006694 <UART_SetConfig+0x1b4>
 8006686:	e00b      	b.n	80066a0 <UART_SetConfig+0x1c0>
 8006688:	2300      	movs	r3, #0
 800668a:	77fb      	strb	r3, [r7, #31]
 800668c:	e0cc      	b.n	8006828 <UART_SetConfig+0x348>
 800668e:	2302      	movs	r3, #2
 8006690:	77fb      	strb	r3, [r7, #31]
 8006692:	e0c9      	b.n	8006828 <UART_SetConfig+0x348>
 8006694:	2304      	movs	r3, #4
 8006696:	77fb      	strb	r3, [r7, #31]
 8006698:	e0c6      	b.n	8006828 <UART_SetConfig+0x348>
 800669a:	2308      	movs	r3, #8
 800669c:	77fb      	strb	r3, [r7, #31]
 800669e:	e0c3      	b.n	8006828 <UART_SetConfig+0x348>
 80066a0:	2310      	movs	r3, #16
 80066a2:	77fb      	strb	r3, [r7, #31]
 80066a4:	e0c0      	b.n	8006828 <UART_SetConfig+0x348>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a44      	ldr	r2, [pc, #272]	; (80067bc <UART_SetConfig+0x2dc>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d125      	bne.n	80066fc <UART_SetConfig+0x21c>
 80066b0:	4b3e      	ldr	r3, [pc, #248]	; (80067ac <UART_SetConfig+0x2cc>)
 80066b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066be:	d017      	beq.n	80066f0 <UART_SetConfig+0x210>
 80066c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066c4:	d817      	bhi.n	80066f6 <UART_SetConfig+0x216>
 80066c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066ca:	d00b      	beq.n	80066e4 <UART_SetConfig+0x204>
 80066cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066d0:	d811      	bhi.n	80066f6 <UART_SetConfig+0x216>
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d003      	beq.n	80066de <UART_SetConfig+0x1fe>
 80066d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066da:	d006      	beq.n	80066ea <UART_SetConfig+0x20a>
 80066dc:	e00b      	b.n	80066f6 <UART_SetConfig+0x216>
 80066de:	2300      	movs	r3, #0
 80066e0:	77fb      	strb	r3, [r7, #31]
 80066e2:	e0a1      	b.n	8006828 <UART_SetConfig+0x348>
 80066e4:	2302      	movs	r3, #2
 80066e6:	77fb      	strb	r3, [r7, #31]
 80066e8:	e09e      	b.n	8006828 <UART_SetConfig+0x348>
 80066ea:	2304      	movs	r3, #4
 80066ec:	77fb      	strb	r3, [r7, #31]
 80066ee:	e09b      	b.n	8006828 <UART_SetConfig+0x348>
 80066f0:	2308      	movs	r3, #8
 80066f2:	77fb      	strb	r3, [r7, #31]
 80066f4:	e098      	b.n	8006828 <UART_SetConfig+0x348>
 80066f6:	2310      	movs	r3, #16
 80066f8:	77fb      	strb	r3, [r7, #31]
 80066fa:	e095      	b.n	8006828 <UART_SetConfig+0x348>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a2f      	ldr	r2, [pc, #188]	; (80067c0 <UART_SetConfig+0x2e0>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d125      	bne.n	8006752 <UART_SetConfig+0x272>
 8006706:	4b29      	ldr	r3, [pc, #164]	; (80067ac <UART_SetConfig+0x2cc>)
 8006708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800670c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006710:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006714:	d017      	beq.n	8006746 <UART_SetConfig+0x266>
 8006716:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800671a:	d817      	bhi.n	800674c <UART_SetConfig+0x26c>
 800671c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006720:	d00b      	beq.n	800673a <UART_SetConfig+0x25a>
 8006722:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006726:	d811      	bhi.n	800674c <UART_SetConfig+0x26c>
 8006728:	2b00      	cmp	r3, #0
 800672a:	d003      	beq.n	8006734 <UART_SetConfig+0x254>
 800672c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006730:	d006      	beq.n	8006740 <UART_SetConfig+0x260>
 8006732:	e00b      	b.n	800674c <UART_SetConfig+0x26c>
 8006734:	2301      	movs	r3, #1
 8006736:	77fb      	strb	r3, [r7, #31]
 8006738:	e076      	b.n	8006828 <UART_SetConfig+0x348>
 800673a:	2302      	movs	r3, #2
 800673c:	77fb      	strb	r3, [r7, #31]
 800673e:	e073      	b.n	8006828 <UART_SetConfig+0x348>
 8006740:	2304      	movs	r3, #4
 8006742:	77fb      	strb	r3, [r7, #31]
 8006744:	e070      	b.n	8006828 <UART_SetConfig+0x348>
 8006746:	2308      	movs	r3, #8
 8006748:	77fb      	strb	r3, [r7, #31]
 800674a:	e06d      	b.n	8006828 <UART_SetConfig+0x348>
 800674c:	2310      	movs	r3, #16
 800674e:	77fb      	strb	r3, [r7, #31]
 8006750:	e06a      	b.n	8006828 <UART_SetConfig+0x348>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a1b      	ldr	r2, [pc, #108]	; (80067c4 <UART_SetConfig+0x2e4>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d138      	bne.n	80067ce <UART_SetConfig+0x2ee>
 800675c:	4b13      	ldr	r3, [pc, #76]	; (80067ac <UART_SetConfig+0x2cc>)
 800675e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006762:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006766:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800676a:	d017      	beq.n	800679c <UART_SetConfig+0x2bc>
 800676c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006770:	d82a      	bhi.n	80067c8 <UART_SetConfig+0x2e8>
 8006772:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006776:	d00b      	beq.n	8006790 <UART_SetConfig+0x2b0>
 8006778:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800677c:	d824      	bhi.n	80067c8 <UART_SetConfig+0x2e8>
 800677e:	2b00      	cmp	r3, #0
 8006780:	d003      	beq.n	800678a <UART_SetConfig+0x2aa>
 8006782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006786:	d006      	beq.n	8006796 <UART_SetConfig+0x2b6>
 8006788:	e01e      	b.n	80067c8 <UART_SetConfig+0x2e8>
 800678a:	2300      	movs	r3, #0
 800678c:	77fb      	strb	r3, [r7, #31]
 800678e:	e04b      	b.n	8006828 <UART_SetConfig+0x348>
 8006790:	2302      	movs	r3, #2
 8006792:	77fb      	strb	r3, [r7, #31]
 8006794:	e048      	b.n	8006828 <UART_SetConfig+0x348>
 8006796:	2304      	movs	r3, #4
 8006798:	77fb      	strb	r3, [r7, #31]
 800679a:	e045      	b.n	8006828 <UART_SetConfig+0x348>
 800679c:	2308      	movs	r3, #8
 800679e:	77fb      	strb	r3, [r7, #31]
 80067a0:	e042      	b.n	8006828 <UART_SetConfig+0x348>
 80067a2:	bf00      	nop
 80067a4:	efff69f3 	.word	0xefff69f3
 80067a8:	40011000 	.word	0x40011000
 80067ac:	40023800 	.word	0x40023800
 80067b0:	40004400 	.word	0x40004400
 80067b4:	40004800 	.word	0x40004800
 80067b8:	40004c00 	.word	0x40004c00
 80067bc:	40005000 	.word	0x40005000
 80067c0:	40011400 	.word	0x40011400
 80067c4:	40007800 	.word	0x40007800
 80067c8:	2310      	movs	r3, #16
 80067ca:	77fb      	strb	r3, [r7, #31]
 80067cc:	e02c      	b.n	8006828 <UART_SetConfig+0x348>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a72      	ldr	r2, [pc, #456]	; (800699c <UART_SetConfig+0x4bc>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d125      	bne.n	8006824 <UART_SetConfig+0x344>
 80067d8:	4b71      	ldr	r3, [pc, #452]	; (80069a0 <UART_SetConfig+0x4c0>)
 80067da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067de:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80067e2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80067e6:	d017      	beq.n	8006818 <UART_SetConfig+0x338>
 80067e8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80067ec:	d817      	bhi.n	800681e <UART_SetConfig+0x33e>
 80067ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067f2:	d00b      	beq.n	800680c <UART_SetConfig+0x32c>
 80067f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067f8:	d811      	bhi.n	800681e <UART_SetConfig+0x33e>
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d003      	beq.n	8006806 <UART_SetConfig+0x326>
 80067fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006802:	d006      	beq.n	8006812 <UART_SetConfig+0x332>
 8006804:	e00b      	b.n	800681e <UART_SetConfig+0x33e>
 8006806:	2300      	movs	r3, #0
 8006808:	77fb      	strb	r3, [r7, #31]
 800680a:	e00d      	b.n	8006828 <UART_SetConfig+0x348>
 800680c:	2302      	movs	r3, #2
 800680e:	77fb      	strb	r3, [r7, #31]
 8006810:	e00a      	b.n	8006828 <UART_SetConfig+0x348>
 8006812:	2304      	movs	r3, #4
 8006814:	77fb      	strb	r3, [r7, #31]
 8006816:	e007      	b.n	8006828 <UART_SetConfig+0x348>
 8006818:	2308      	movs	r3, #8
 800681a:	77fb      	strb	r3, [r7, #31]
 800681c:	e004      	b.n	8006828 <UART_SetConfig+0x348>
 800681e:	2310      	movs	r3, #16
 8006820:	77fb      	strb	r3, [r7, #31]
 8006822:	e001      	b.n	8006828 <UART_SetConfig+0x348>
 8006824:	2310      	movs	r3, #16
 8006826:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	69db      	ldr	r3, [r3, #28]
 800682c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006830:	d15b      	bne.n	80068ea <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006832:	7ffb      	ldrb	r3, [r7, #31]
 8006834:	2b08      	cmp	r3, #8
 8006836:	d828      	bhi.n	800688a <UART_SetConfig+0x3aa>
 8006838:	a201      	add	r2, pc, #4	; (adr r2, 8006840 <UART_SetConfig+0x360>)
 800683a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800683e:	bf00      	nop
 8006840:	08006865 	.word	0x08006865
 8006844:	0800686d 	.word	0x0800686d
 8006848:	08006875 	.word	0x08006875
 800684c:	0800688b 	.word	0x0800688b
 8006850:	0800687b 	.word	0x0800687b
 8006854:	0800688b 	.word	0x0800688b
 8006858:	0800688b 	.word	0x0800688b
 800685c:	0800688b 	.word	0x0800688b
 8006860:	08006883 	.word	0x08006883
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006864:	f7fd fc8e 	bl	8004184 <HAL_RCC_GetPCLK1Freq>
 8006868:	61b8      	str	r0, [r7, #24]
        break;
 800686a:	e013      	b.n	8006894 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800686c:	f7fd fc9e 	bl	80041ac <HAL_RCC_GetPCLK2Freq>
 8006870:	61b8      	str	r0, [r7, #24]
        break;
 8006872:	e00f      	b.n	8006894 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006874:	4b4b      	ldr	r3, [pc, #300]	; (80069a4 <UART_SetConfig+0x4c4>)
 8006876:	61bb      	str	r3, [r7, #24]
        break;
 8006878:	e00c      	b.n	8006894 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800687a:	f7fd fb71 	bl	8003f60 <HAL_RCC_GetSysClockFreq>
 800687e:	61b8      	str	r0, [r7, #24]
        break;
 8006880:	e008      	b.n	8006894 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006882:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006886:	61bb      	str	r3, [r7, #24]
        break;
 8006888:	e004      	b.n	8006894 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800688a:	2300      	movs	r3, #0
 800688c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	77bb      	strb	r3, [r7, #30]
        break;
 8006892:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d074      	beq.n	8006984 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	005a      	lsls	r2, r3, #1
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	085b      	lsrs	r3, r3, #1
 80068a4:	441a      	add	r2, r3
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	2b0f      	cmp	r3, #15
 80068b4:	d916      	bls.n	80068e4 <UART_SetConfig+0x404>
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068bc:	d212      	bcs.n	80068e4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	f023 030f 	bic.w	r3, r3, #15
 80068c6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	085b      	lsrs	r3, r3, #1
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	f003 0307 	and.w	r3, r3, #7
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	89fb      	ldrh	r3, [r7, #14]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	89fa      	ldrh	r2, [r7, #14]
 80068e0:	60da      	str	r2, [r3, #12]
 80068e2:	e04f      	b.n	8006984 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	77bb      	strb	r3, [r7, #30]
 80068e8:	e04c      	b.n	8006984 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068ea:	7ffb      	ldrb	r3, [r7, #31]
 80068ec:	2b08      	cmp	r3, #8
 80068ee:	d828      	bhi.n	8006942 <UART_SetConfig+0x462>
 80068f0:	a201      	add	r2, pc, #4	; (adr r2, 80068f8 <UART_SetConfig+0x418>)
 80068f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f6:	bf00      	nop
 80068f8:	0800691d 	.word	0x0800691d
 80068fc:	08006925 	.word	0x08006925
 8006900:	0800692d 	.word	0x0800692d
 8006904:	08006943 	.word	0x08006943
 8006908:	08006933 	.word	0x08006933
 800690c:	08006943 	.word	0x08006943
 8006910:	08006943 	.word	0x08006943
 8006914:	08006943 	.word	0x08006943
 8006918:	0800693b 	.word	0x0800693b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800691c:	f7fd fc32 	bl	8004184 <HAL_RCC_GetPCLK1Freq>
 8006920:	61b8      	str	r0, [r7, #24]
        break;
 8006922:	e013      	b.n	800694c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006924:	f7fd fc42 	bl	80041ac <HAL_RCC_GetPCLK2Freq>
 8006928:	61b8      	str	r0, [r7, #24]
        break;
 800692a:	e00f      	b.n	800694c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800692c:	4b1d      	ldr	r3, [pc, #116]	; (80069a4 <UART_SetConfig+0x4c4>)
 800692e:	61bb      	str	r3, [r7, #24]
        break;
 8006930:	e00c      	b.n	800694c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006932:	f7fd fb15 	bl	8003f60 <HAL_RCC_GetSysClockFreq>
 8006936:	61b8      	str	r0, [r7, #24]
        break;
 8006938:	e008      	b.n	800694c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800693a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800693e:	61bb      	str	r3, [r7, #24]
        break;
 8006940:	e004      	b.n	800694c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006942:	2300      	movs	r3, #0
 8006944:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	77bb      	strb	r3, [r7, #30]
        break;
 800694a:	bf00      	nop
    }

    if (pclk != 0U)
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d018      	beq.n	8006984 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	085a      	lsrs	r2, r3, #1
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	441a      	add	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	fbb2 f3f3 	udiv	r3, r2, r3
 8006964:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	2b0f      	cmp	r3, #15
 800696a:	d909      	bls.n	8006980 <UART_SetConfig+0x4a0>
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006972:	d205      	bcs.n	8006980 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	b29a      	uxth	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	60da      	str	r2, [r3, #12]
 800697e:	e001      	b.n	8006984 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006990:	7fbb      	ldrb	r3, [r7, #30]
}
 8006992:	4618      	mov	r0, r3
 8006994:	3720      	adds	r7, #32
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	40007c00 	.word	0x40007c00
 80069a0:	40023800 	.word	0x40023800
 80069a4:	00f42400 	.word	0x00f42400

080069a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b4:	f003 0301 	and.w	r3, r3, #1
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d00a      	beq.n	80069d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	430a      	orrs	r2, r1
 80069d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d6:	f003 0302 	and.w	r3, r3, #2
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00a      	beq.n	80069f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	430a      	orrs	r2, r1
 80069f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f8:	f003 0304 	and.w	r3, r3, #4
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00a      	beq.n	8006a16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1a:	f003 0308 	and.w	r3, r3, #8
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00a      	beq.n	8006a38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	430a      	orrs	r2, r1
 8006a36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3c:	f003 0310 	and.w	r3, r3, #16
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00a      	beq.n	8006a5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	430a      	orrs	r2, r1
 8006a58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5e:	f003 0320 	and.w	r3, r3, #32
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00a      	beq.n	8006a7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	430a      	orrs	r2, r1
 8006a7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d01a      	beq.n	8006abe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	430a      	orrs	r2, r1
 8006a9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006aa6:	d10a      	bne.n	8006abe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	430a      	orrs	r2, r1
 8006abc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00a      	beq.n	8006ae0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	430a      	orrs	r2, r1
 8006ade:	605a      	str	r2, [r3, #4]
  }
}
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b086      	sub	sp, #24
 8006af0:	af02      	add	r7, sp, #8
 8006af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006afc:	f7fb fe00 	bl	8002700 <HAL_GetTick>
 8006b00:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 0308 	and.w	r3, r3, #8
 8006b0c:	2b08      	cmp	r3, #8
 8006b0e:	d10e      	bne.n	8006b2e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b14:	9300      	str	r3, [sp, #0]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 f831 	bl	8006b86 <UART_WaitOnFlagUntilTimeout>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d001      	beq.n	8006b2e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	e027      	b.n	8006b7e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0304 	and.w	r3, r3, #4
 8006b38:	2b04      	cmp	r3, #4
 8006b3a:	d10e      	bne.n	8006b5a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b40:	9300      	str	r3, [sp, #0]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 f81b 	bl	8006b86 <UART_WaitOnFlagUntilTimeout>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d001      	beq.n	8006b5a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e011      	b.n	8006b7e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2220      	movs	r2, #32
 8006b5e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2220      	movs	r2, #32
 8006b64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b09c      	sub	sp, #112	; 0x70
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	60f8      	str	r0, [r7, #12]
 8006b8e:	60b9      	str	r1, [r7, #8]
 8006b90:	603b      	str	r3, [r7, #0]
 8006b92:	4613      	mov	r3, r2
 8006b94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b96:	e0a7      	b.n	8006ce8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b9e:	f000 80a3 	beq.w	8006ce8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ba2:	f7fb fdad 	bl	8002700 <HAL_GetTick>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d302      	bcc.n	8006bb8 <UART_WaitOnFlagUntilTimeout+0x32>
 8006bb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d13f      	bne.n	8006c38 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bc0:	e853 3f00 	ldrex	r3, [r3]
 8006bc4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bc8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006bcc:	667b      	str	r3, [r7, #100]	; 0x64
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bd8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bda:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006bdc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006bde:	e841 2300 	strex	r3, r2, [r1]
 8006be2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006be4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d1e6      	bne.n	8006bb8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	3308      	adds	r3, #8
 8006bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bf4:	e853 3f00 	ldrex	r3, [r3]
 8006bf8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfc:	f023 0301 	bic.w	r3, r3, #1
 8006c00:	663b      	str	r3, [r7, #96]	; 0x60
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	3308      	adds	r3, #8
 8006c08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c0a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006c0c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006c10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c12:	e841 2300 	strex	r3, r2, [r1]
 8006c16:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006c18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1e5      	bne.n	8006bea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2220      	movs	r2, #32
 8006c22:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2220      	movs	r2, #32
 8006c28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006c34:	2303      	movs	r3, #3
 8006c36:	e068      	b.n	8006d0a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0304 	and.w	r3, r3, #4
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d050      	beq.n	8006ce8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	69db      	ldr	r3, [r3, #28]
 8006c4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c54:	d148      	bne.n	8006ce8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c5e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c68:	e853 3f00 	ldrex	r3, [r3]
 8006c6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c7e:	637b      	str	r3, [r7, #52]	; 0x34
 8006c80:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c86:	e841 2300 	strex	r3, r2, [r1]
 8006c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d1e6      	bne.n	8006c60 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	3308      	adds	r3, #8
 8006c98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	e853 3f00 	ldrex	r3, [r3]
 8006ca0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	f023 0301 	bic.w	r3, r3, #1
 8006ca8:	66bb      	str	r3, [r7, #104]	; 0x68
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	3308      	adds	r3, #8
 8006cb0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006cb2:	623a      	str	r2, [r7, #32]
 8006cb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb6:	69f9      	ldr	r1, [r7, #28]
 8006cb8:	6a3a      	ldr	r2, [r7, #32]
 8006cba:	e841 2300 	strex	r3, r2, [r1]
 8006cbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1e5      	bne.n	8006c92 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2220      	movs	r2, #32
 8006cca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2220      	movs	r2, #32
 8006cd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2220      	movs	r2, #32
 8006cd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	e010      	b.n	8006d0a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	69da      	ldr	r2, [r3, #28]
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	68ba      	ldr	r2, [r7, #8]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	bf0c      	ite	eq
 8006cf8:	2301      	moveq	r3, #1
 8006cfa:	2300      	movne	r3, #0
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	461a      	mov	r2, r3
 8006d00:	79fb      	ldrb	r3, [r7, #7]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	f43f af48 	beq.w	8006b98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3770      	adds	r7, #112	; 0x70
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
	...

08006d14 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b096      	sub	sp, #88	; 0x58
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	4613      	mov	r3, r2
 8006d20:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	68ba      	ldr	r2, [r7, #8]
 8006d26:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	88fa      	ldrh	r2, [r7, #6]
 8006d2c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2222      	movs	r2, #34	; 0x22
 8006d3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d028      	beq.n	8006d9a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d4c:	4a3e      	ldr	r2, [pc, #248]	; (8006e48 <UART_Start_Receive_DMA+0x134>)
 8006d4e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d54:	4a3d      	ldr	r2, [pc, #244]	; (8006e4c <UART_Start_Receive_DMA+0x138>)
 8006d56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d5c:	4a3c      	ldr	r2, [pc, #240]	; (8006e50 <UART_Start_Receive_DMA+0x13c>)
 8006d5e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d64:	2200      	movs	r2, #0
 8006d66:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	3324      	adds	r3, #36	; 0x24
 8006d72:	4619      	mov	r1, r3
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d78:	461a      	mov	r2, r3
 8006d7a:	88fb      	ldrh	r3, [r7, #6]
 8006d7c:	f7fb fe80 	bl	8002a80 <HAL_DMA_Start_IT>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d009      	beq.n	8006d9a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2210      	movs	r2, #16
 8006d8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2220      	movs	r2, #32
 8006d92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e051      	b.n	8006e3e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d018      	beq.n	8006dd4 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006daa:	e853 3f00 	ldrex	r3, [r3]
 8006dae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006db6:	657b      	str	r3, [r7, #84]	; 0x54
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006dc2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006dc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006dc8:	e841 2300 	strex	r3, r2, [r1]
 8006dcc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1e6      	bne.n	8006da2 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	3308      	adds	r3, #8
 8006dda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dde:	e853 3f00 	ldrex	r3, [r3]
 8006de2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de6:	f043 0301 	orr.w	r3, r3, #1
 8006dea:	653b      	str	r3, [r7, #80]	; 0x50
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	3308      	adds	r3, #8
 8006df2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006df4:	637a      	str	r2, [r7, #52]	; 0x34
 8006df6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006dfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006dfc:	e841 2300 	strex	r3, r2, [r1]
 8006e00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1e5      	bne.n	8006dd4 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	3308      	adds	r3, #8
 8006e0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	e853 3f00 	ldrex	r3, [r3]
 8006e16:	613b      	str	r3, [r7, #16]
   return(result);
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	3308      	adds	r3, #8
 8006e26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e28:	623a      	str	r2, [r7, #32]
 8006e2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2c:	69f9      	ldr	r1, [r7, #28]
 8006e2e:	6a3a      	ldr	r2, [r7, #32]
 8006e30:	e841 2300 	strex	r3, r2, [r1]
 8006e34:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1e5      	bne.n	8006e08 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3758      	adds	r7, #88	; 0x58
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	0800701b 	.word	0x0800701b
 8006e4c:	08007143 	.word	0x08007143
 8006e50:	08007181 	.word	0x08007181

08006e54 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b089      	sub	sp, #36	; 0x24
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	e853 3f00 	ldrex	r3, [r3]
 8006e68:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006e70:	61fb      	str	r3, [r7, #28]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	461a      	mov	r2, r3
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	61bb      	str	r3, [r7, #24]
 8006e7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7e:	6979      	ldr	r1, [r7, #20]
 8006e80:	69ba      	ldr	r2, [r7, #24]
 8006e82:	e841 2300 	strex	r3, r2, [r1]
 8006e86:	613b      	str	r3, [r7, #16]
   return(result);
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1e6      	bne.n	8006e5c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2220      	movs	r2, #32
 8006e92:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8006e94:	bf00      	nop
 8006e96:	3724      	adds	r7, #36	; 0x24
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b095      	sub	sp, #84	; 0x54
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eb0:	e853 3f00 	ldrex	r3, [r3]
 8006eb4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ebc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ec6:	643b      	str	r3, [r7, #64]	; 0x40
 8006ec8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ecc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ece:	e841 2300 	strex	r3, r2, [r1]
 8006ed2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d1e6      	bne.n	8006ea8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	3308      	adds	r3, #8
 8006ee0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee2:	6a3b      	ldr	r3, [r7, #32]
 8006ee4:	e853 3f00 	ldrex	r3, [r3]
 8006ee8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	f023 0301 	bic.w	r3, r3, #1
 8006ef0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	3308      	adds	r3, #8
 8006ef8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006efa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006efc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f02:	e841 2300 	strex	r3, r2, [r1]
 8006f06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d1e5      	bne.n	8006eda <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d118      	bne.n	8006f48 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	e853 3f00 	ldrex	r3, [r3]
 8006f22:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	f023 0310 	bic.w	r3, r3, #16
 8006f2a:	647b      	str	r3, [r7, #68]	; 0x44
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	461a      	mov	r2, r3
 8006f32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f34:	61bb      	str	r3, [r7, #24]
 8006f36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f38:	6979      	ldr	r1, [r7, #20]
 8006f3a:	69ba      	ldr	r2, [r7, #24]
 8006f3c:	e841 2300 	strex	r3, r2, [r1]
 8006f40:	613b      	str	r3, [r7, #16]
   return(result);
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1e6      	bne.n	8006f16 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2220      	movs	r2, #32
 8006f4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006f5c:	bf00      	nop
 8006f5e:	3754      	adds	r7, #84	; 0x54
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b090      	sub	sp, #64	; 0x40
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f74:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	69db      	ldr	r3, [r3, #28]
 8006f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f7e:	d037      	beq.n	8006ff0 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8006f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f82:	2200      	movs	r2, #0
 8006f84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	3308      	adds	r3, #8
 8006f8e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f92:	e853 3f00 	ldrex	r3, [r3]
 8006f96:	623b      	str	r3, [r7, #32]
   return(result);
 8006f98:	6a3b      	ldr	r3, [r7, #32]
 8006f9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	3308      	adds	r3, #8
 8006fa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fa8:	633a      	str	r2, [r7, #48]	; 0x30
 8006faa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006fae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fb0:	e841 2300 	strex	r3, r2, [r1]
 8006fb4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1e5      	bne.n	8006f88 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	e853 3f00 	ldrex	r3, [r3]
 8006fc8:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fd0:	637b      	str	r3, [r7, #52]	; 0x34
 8006fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fda:	61fb      	str	r3, [r7, #28]
 8006fdc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fde:	69b9      	ldr	r1, [r7, #24]
 8006fe0:	69fa      	ldr	r2, [r7, #28]
 8006fe2:	e841 2300 	strex	r3, r2, [r1]
 8006fe6:	617b      	str	r3, [r7, #20]
   return(result);
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1e6      	bne.n	8006fbc <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006fee:	e002      	b.n	8006ff6 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8006ff0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006ff2:	f7ff fa2d 	bl	8006450 <HAL_UART_TxCpltCallback>
}
 8006ff6:	bf00      	nop
 8006ff8:	3740      	adds	r7, #64	; 0x40
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b084      	sub	sp, #16
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f7ff fa29 	bl	8006464 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007012:	bf00      	nop
 8007014:	3710      	adds	r7, #16
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}

0800701a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800701a:	b580      	push	{r7, lr}
 800701c:	b09c      	sub	sp, #112	; 0x70
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007026:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	69db      	ldr	r3, [r3, #28]
 800702c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007030:	d071      	beq.n	8007116 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8007032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007034:	2200      	movs	r2, #0
 8007036:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800703a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007042:	e853 3f00 	ldrex	r3, [r3]
 8007046:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800704a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800704e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	461a      	mov	r2, r3
 8007056:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007058:	65bb      	str	r3, [r7, #88]	; 0x58
 800705a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800705e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007060:	e841 2300 	strex	r3, r2, [r1]
 8007064:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007068:	2b00      	cmp	r3, #0
 800706a:	d1e6      	bne.n	800703a <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800706c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	3308      	adds	r3, #8
 8007072:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007076:	e853 3f00 	ldrex	r3, [r3]
 800707a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800707c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800707e:	f023 0301 	bic.w	r3, r3, #1
 8007082:	667b      	str	r3, [r7, #100]	; 0x64
 8007084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	3308      	adds	r3, #8
 800708a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800708c:	647a      	str	r2, [r7, #68]	; 0x44
 800708e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007090:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007092:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007094:	e841 2300 	strex	r3, r2, [r1]
 8007098:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800709a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1e5      	bne.n	800706c <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	3308      	adds	r3, #8
 80070a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070aa:	e853 3f00 	ldrex	r3, [r3]
 80070ae:	623b      	str	r3, [r7, #32]
   return(result);
 80070b0:	6a3b      	ldr	r3, [r7, #32]
 80070b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070b6:	663b      	str	r3, [r7, #96]	; 0x60
 80070b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	3308      	adds	r3, #8
 80070be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80070c0:	633a      	str	r2, [r7, #48]	; 0x30
 80070c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070c8:	e841 2300 	strex	r3, r2, [r1]
 80070cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80070ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1e5      	bne.n	80070a0 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80070d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070d6:	2220      	movs	r2, #32
 80070d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d118      	bne.n	8007116 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	e853 3f00 	ldrex	r3, [r3]
 80070f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f023 0310 	bic.w	r3, r3, #16
 80070f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	461a      	mov	r2, r3
 8007100:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007102:	61fb      	str	r3, [r7, #28]
 8007104:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007106:	69b9      	ldr	r1, [r7, #24]
 8007108:	69fa      	ldr	r2, [r7, #28]
 800710a:	e841 2300 	strex	r3, r2, [r1]
 800710e:	617b      	str	r3, [r7, #20]
   return(result);
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1e6      	bne.n	80070e4 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007118:	2200      	movs	r2, #0
 800711a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800711c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800711e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007120:	2b01      	cmp	r3, #1
 8007122:	d107      	bne.n	8007134 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007124:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007126:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800712a:	4619      	mov	r1, r3
 800712c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800712e:	f7ff f9c1 	bl	80064b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007132:	e002      	b.n	800713a <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8007134:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007136:	f7ff f99f 	bl	8006478 <HAL_UART_RxCpltCallback>
}
 800713a:	bf00      	nop
 800713c:	3770      	adds	r7, #112	; 0x70
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b084      	sub	sp, #16
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800714e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2201      	movs	r2, #1
 8007154:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800715a:	2b01      	cmp	r3, #1
 800715c:	d109      	bne.n	8007172 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007164:	085b      	lsrs	r3, r3, #1
 8007166:	b29b      	uxth	r3, r3
 8007168:	4619      	mov	r1, r3
 800716a:	68f8      	ldr	r0, [r7, #12]
 800716c:	f7ff f9a2 	bl	80064b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007170:	e002      	b.n	8007178 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007172:	68f8      	ldr	r0, [r7, #12]
 8007174:	f7ff f98a 	bl	800648c <HAL_UART_RxHalfCpltCallback>
}
 8007178:	bf00      	nop
 800717a:	3710      	adds	r7, #16
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b086      	sub	sp, #24
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007192:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800719a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071a6:	2b80      	cmp	r3, #128	; 0x80
 80071a8:	d109      	bne.n	80071be <UART_DMAError+0x3e>
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	2b21      	cmp	r3, #33	; 0x21
 80071ae:	d106      	bne.n	80071be <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80071b8:	6978      	ldr	r0, [r7, #20]
 80071ba:	f7ff fe4b 	bl	8006e54 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c8:	2b40      	cmp	r3, #64	; 0x40
 80071ca:	d109      	bne.n	80071e0 <UART_DMAError+0x60>
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2b22      	cmp	r3, #34	; 0x22
 80071d0:	d106      	bne.n	80071e0 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80071da:	6978      	ldr	r0, [r7, #20]
 80071dc:	f7ff fe60 	bl	8006ea0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071e6:	f043 0210 	orr.w	r2, r3, #16
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071f0:	6978      	ldr	r0, [r7, #20]
 80071f2:	f7ff f955 	bl	80064a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071f6:	bf00      	nop
 80071f8:	3718      	adds	r7, #24
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b084      	sub	sp, #16
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800720a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2200      	movs	r2, #0
 8007210:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2200      	movs	r2, #0
 8007218:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f7ff f93f 	bl	80064a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007222:	bf00      	nop
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800722a:	b580      	push	{r7, lr}
 800722c:	b088      	sub	sp, #32
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	e853 3f00 	ldrex	r3, [r3]
 800723e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007246:	61fb      	str	r3, [r7, #28]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	461a      	mov	r2, r3
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	61bb      	str	r3, [r7, #24]
 8007252:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007254:	6979      	ldr	r1, [r7, #20]
 8007256:	69ba      	ldr	r2, [r7, #24]
 8007258:	e841 2300 	strex	r3, r2, [r1]
 800725c:	613b      	str	r3, [r7, #16]
   return(result);
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d1e6      	bne.n	8007232 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2220      	movs	r2, #32
 8007268:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f7ff f8ed 	bl	8006450 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007276:	bf00      	nop
 8007278:	3720      	adds	r7, #32
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
	...

08007280 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007280:	b084      	sub	sp, #16
 8007282:	b580      	push	{r7, lr}
 8007284:	b084      	sub	sp, #16
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
 800728a:	f107 001c 	add.w	r0, r7, #28
 800728e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007294:	2b01      	cmp	r3, #1
 8007296:	d120      	bne.n	80072da <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	68da      	ldr	r2, [r3, #12]
 80072a8:	4b20      	ldr	r3, [pc, #128]	; (800732c <USB_CoreInit+0xac>)
 80072aa:	4013      	ands	r3, r2
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80072bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d105      	bne.n	80072ce <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 fa96 	bl	8007800 <USB_CoreReset>
 80072d4:	4603      	mov	r3, r0
 80072d6:	73fb      	strb	r3, [r7, #15]
 80072d8:	e010      	b.n	80072fc <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 fa8a 	bl	8007800 <USB_CoreReset>
 80072ec:	4603      	mov	r3, r0
 80072ee:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80072fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d10b      	bne.n	800731a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	f043 0206 	orr.w	r2, r3, #6
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	f043 0220 	orr.w	r2, r3, #32
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800731a:	7bfb      	ldrb	r3, [r7, #15]
}
 800731c:	4618      	mov	r0, r3
 800731e:	3710      	adds	r7, #16
 8007320:	46bd      	mov	sp, r7
 8007322:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007326:	b004      	add	sp, #16
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	ffbdffbf 	.word	0xffbdffbf

08007330 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	f023 0201 	bic.w	r2, r3, #1
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	370c      	adds	r7, #12
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr

08007352 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b084      	sub	sp, #16
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
 800735a:	460b      	mov	r3, r1
 800735c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800735e:	2300      	movs	r3, #0
 8007360:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800736e:	78fb      	ldrb	r3, [r7, #3]
 8007370:	2b01      	cmp	r3, #1
 8007372:	d115      	bne.n	80073a0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007380:	2001      	movs	r0, #1
 8007382:	f7fb f9c9 	bl	8002718 <HAL_Delay>
      ms++;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	3301      	adds	r3, #1
 800738a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 fa29 	bl	80077e4 <USB_GetMode>
 8007392:	4603      	mov	r3, r0
 8007394:	2b01      	cmp	r3, #1
 8007396:	d01e      	beq.n	80073d6 <USB_SetCurrentMode+0x84>
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2b31      	cmp	r3, #49	; 0x31
 800739c:	d9f0      	bls.n	8007380 <USB_SetCurrentMode+0x2e>
 800739e:	e01a      	b.n	80073d6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80073a0:	78fb      	ldrb	r3, [r7, #3]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d115      	bne.n	80073d2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80073b2:	2001      	movs	r0, #1
 80073b4:	f7fb f9b0 	bl	8002718 <HAL_Delay>
      ms++;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	3301      	adds	r3, #1
 80073bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fa10 	bl	80077e4 <USB_GetMode>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d005      	beq.n	80073d6 <USB_SetCurrentMode+0x84>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2b31      	cmp	r3, #49	; 0x31
 80073ce:	d9f0      	bls.n	80073b2 <USB_SetCurrentMode+0x60>
 80073d0:	e001      	b.n	80073d6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e005      	b.n	80073e2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2b32      	cmp	r3, #50	; 0x32
 80073da:	d101      	bne.n	80073e0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	e000      	b.n	80073e2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
	...

080073ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80073ec:	b084      	sub	sp, #16
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b086      	sub	sp, #24
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
 80073f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80073fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80073fe:	2300      	movs	r3, #0
 8007400:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007406:	2300      	movs	r3, #0
 8007408:	613b      	str	r3, [r7, #16]
 800740a:	e009      	b.n	8007420 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	3340      	adds	r3, #64	; 0x40
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	4413      	add	r3, r2
 8007416:	2200      	movs	r2, #0
 8007418:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	3301      	adds	r3, #1
 800741e:	613b      	str	r3, [r7, #16]
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	2b0e      	cmp	r3, #14
 8007424:	d9f2      	bls.n	800740c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007428:	2b00      	cmp	r3, #0
 800742a:	d11c      	bne.n	8007466 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	68fa      	ldr	r2, [r7, #12]
 8007436:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800743a:	f043 0302 	orr.w	r3, r3, #2
 800743e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007444:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	601a      	str	r2, [r3, #0]
 8007464:	e005      	b.n	8007472 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007478:	461a      	mov	r2, r3
 800747a:	2300      	movs	r3, #0
 800747c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007484:	4619      	mov	r1, r3
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800748c:	461a      	mov	r2, r3
 800748e:	680b      	ldr	r3, [r1, #0]
 8007490:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007494:	2b01      	cmp	r3, #1
 8007496:	d10c      	bne.n	80074b2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800749a:	2b00      	cmp	r3, #0
 800749c:	d104      	bne.n	80074a8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800749e:	2100      	movs	r1, #0
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 f965 	bl	8007770 <USB_SetDevSpeed>
 80074a6:	e008      	b.n	80074ba <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80074a8:	2101      	movs	r1, #1
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 f960 	bl	8007770 <USB_SetDevSpeed>
 80074b0:	e003      	b.n	80074ba <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80074b2:	2103      	movs	r1, #3
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 f95b 	bl	8007770 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80074ba:	2110      	movs	r1, #16
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 f8f3 	bl	80076a8 <USB_FlushTxFifo>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d001      	beq.n	80074cc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 f91f 	bl	8007710 <USB_FlushRxFifo>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d001      	beq.n	80074dc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074e2:	461a      	mov	r2, r3
 80074e4:	2300      	movs	r3, #0
 80074e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ee:	461a      	mov	r2, r3
 80074f0:	2300      	movs	r3, #0
 80074f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074fa:	461a      	mov	r2, r3
 80074fc:	2300      	movs	r3, #0
 80074fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007500:	2300      	movs	r3, #0
 8007502:	613b      	str	r3, [r7, #16]
 8007504:	e043      	b.n	800758e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	015a      	lsls	r2, r3, #5
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	4413      	add	r3, r2
 800750e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007518:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800751c:	d118      	bne.n	8007550 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d10a      	bne.n	800753a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	015a      	lsls	r2, r3, #5
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	4413      	add	r3, r2
 800752c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007530:	461a      	mov	r2, r3
 8007532:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007536:	6013      	str	r3, [r2, #0]
 8007538:	e013      	b.n	8007562 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	015a      	lsls	r2, r3, #5
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	4413      	add	r3, r2
 8007542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007546:	461a      	mov	r2, r3
 8007548:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800754c:	6013      	str	r3, [r2, #0]
 800754e:	e008      	b.n	8007562 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	015a      	lsls	r2, r3, #5
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	4413      	add	r3, r2
 8007558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800755c:	461a      	mov	r2, r3
 800755e:	2300      	movs	r3, #0
 8007560:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	015a      	lsls	r2, r3, #5
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	4413      	add	r3, r2
 800756a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800756e:	461a      	mov	r2, r3
 8007570:	2300      	movs	r3, #0
 8007572:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	015a      	lsls	r2, r3, #5
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	4413      	add	r3, r2
 800757c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007580:	461a      	mov	r2, r3
 8007582:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007586:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	3301      	adds	r3, #1
 800758c:	613b      	str	r3, [r7, #16]
 800758e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007590:	693a      	ldr	r2, [r7, #16]
 8007592:	429a      	cmp	r2, r3
 8007594:	d3b7      	bcc.n	8007506 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007596:	2300      	movs	r3, #0
 8007598:	613b      	str	r3, [r7, #16]
 800759a:	e043      	b.n	8007624 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	015a      	lsls	r2, r3, #5
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	4413      	add	r3, r2
 80075a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075b2:	d118      	bne.n	80075e6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d10a      	bne.n	80075d0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	015a      	lsls	r2, r3, #5
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	4413      	add	r3, r2
 80075c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075c6:	461a      	mov	r2, r3
 80075c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80075cc:	6013      	str	r3, [r2, #0]
 80075ce:	e013      	b.n	80075f8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	015a      	lsls	r2, r3, #5
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	4413      	add	r3, r2
 80075d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075dc:	461a      	mov	r2, r3
 80075de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80075e2:	6013      	str	r3, [r2, #0]
 80075e4:	e008      	b.n	80075f8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	015a      	lsls	r2, r3, #5
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	4413      	add	r3, r2
 80075ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075f2:	461a      	mov	r2, r3
 80075f4:	2300      	movs	r3, #0
 80075f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	015a      	lsls	r2, r3, #5
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	4413      	add	r3, r2
 8007600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007604:	461a      	mov	r2, r3
 8007606:	2300      	movs	r3, #0
 8007608:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	015a      	lsls	r2, r3, #5
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	4413      	add	r3, r2
 8007612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007616:	461a      	mov	r2, r3
 8007618:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800761c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	3301      	adds	r3, #1
 8007622:	613b      	str	r3, [r7, #16]
 8007624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007626:	693a      	ldr	r2, [r7, #16]
 8007628:	429a      	cmp	r2, r3
 800762a:	d3b7      	bcc.n	800759c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007632:	691b      	ldr	r3, [r3, #16]
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800763a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800763e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800764c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800764e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007650:	2b00      	cmp	r3, #0
 8007652:	d105      	bne.n	8007660 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	699b      	ldr	r3, [r3, #24]
 8007658:	f043 0210 	orr.w	r2, r3, #16
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	699a      	ldr	r2, [r3, #24]
 8007664:	4b0e      	ldr	r3, [pc, #56]	; (80076a0 <USB_DevInit+0x2b4>)
 8007666:	4313      	orrs	r3, r2
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800766c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800766e:	2b00      	cmp	r3, #0
 8007670:	d005      	beq.n	800767e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	699b      	ldr	r3, [r3, #24]
 8007676:	f043 0208 	orr.w	r2, r3, #8
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800767e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007680:	2b01      	cmp	r3, #1
 8007682:	d105      	bne.n	8007690 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	699a      	ldr	r2, [r3, #24]
 8007688:	4b06      	ldr	r3, [pc, #24]	; (80076a4 <USB_DevInit+0x2b8>)
 800768a:	4313      	orrs	r3, r2
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007690:	7dfb      	ldrb	r3, [r7, #23]
}
 8007692:	4618      	mov	r0, r3
 8007694:	3718      	adds	r7, #24
 8007696:	46bd      	mov	sp, r7
 8007698:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800769c:	b004      	add	sp, #16
 800769e:	4770      	bx	lr
 80076a0:	803c3800 	.word	0x803c3800
 80076a4:	40000004 	.word	0x40000004

080076a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80076b2:	2300      	movs	r3, #0
 80076b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	3301      	adds	r3, #1
 80076ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	4a13      	ldr	r2, [pc, #76]	; (800770c <USB_FlushTxFifo+0x64>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d901      	bls.n	80076c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80076c4:	2303      	movs	r3, #3
 80076c6:	e01b      	b.n	8007700 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	691b      	ldr	r3, [r3, #16]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	daf2      	bge.n	80076b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80076d0:	2300      	movs	r3, #0
 80076d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	019b      	lsls	r3, r3, #6
 80076d8:	f043 0220 	orr.w	r2, r3, #32
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	3301      	adds	r3, #1
 80076e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	4a08      	ldr	r2, [pc, #32]	; (800770c <USB_FlushTxFifo+0x64>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d901      	bls.n	80076f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80076ee:	2303      	movs	r3, #3
 80076f0:	e006      	b.n	8007700 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	f003 0320 	and.w	r3, r3, #32
 80076fa:	2b20      	cmp	r3, #32
 80076fc:	d0f0      	beq.n	80076e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3714      	adds	r7, #20
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr
 800770c:	00030d40 	.word	0x00030d40

08007710 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007718:	2300      	movs	r3, #0
 800771a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	3301      	adds	r3, #1
 8007720:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	4a11      	ldr	r2, [pc, #68]	; (800776c <USB_FlushRxFifo+0x5c>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d901      	bls.n	800772e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	e018      	b.n	8007760 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	2b00      	cmp	r3, #0
 8007734:	daf2      	bge.n	800771c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007736:	2300      	movs	r3, #0
 8007738:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2210      	movs	r2, #16
 800773e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	3301      	adds	r3, #1
 8007744:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	4a08      	ldr	r2, [pc, #32]	; (800776c <USB_FlushRxFifo+0x5c>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d901      	bls.n	8007752 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800774e:	2303      	movs	r3, #3
 8007750:	e006      	b.n	8007760 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	691b      	ldr	r3, [r3, #16]
 8007756:	f003 0310 	and.w	r3, r3, #16
 800775a:	2b10      	cmp	r3, #16
 800775c:	d0f0      	beq.n	8007740 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	3714      	adds	r7, #20
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr
 800776c:	00030d40 	.word	0x00030d40

08007770 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007770:	b480      	push	{r7}
 8007772:	b085      	sub	sp, #20
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	460b      	mov	r3, r1
 800777a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	78fb      	ldrb	r3, [r7, #3]
 800778a:	68f9      	ldr	r1, [r7, #12]
 800778c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007790:	4313      	orrs	r3, r2
 8007792:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	3714      	adds	r7, #20
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr

080077a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80077a2:	b480      	push	{r7}
 80077a4:	b085      	sub	sp, #20
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	68fa      	ldr	r2, [r7, #12]
 80077b8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80077bc:	f023 0303 	bic.w	r3, r3, #3
 80077c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077d0:	f043 0302 	orr.w	r3, r3, #2
 80077d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80077d6:	2300      	movs	r3, #0
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3714      	adds	r7, #20
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	695b      	ldr	r3, [r3, #20]
 80077f0:	f003 0301 	and.w	r3, r3, #1
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007800:	b480      	push	{r7}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007808:	2300      	movs	r3, #0
 800780a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	3301      	adds	r3, #1
 8007810:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	4a13      	ldr	r2, [pc, #76]	; (8007864 <USB_CoreReset+0x64>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d901      	bls.n	800781e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800781a:	2303      	movs	r3, #3
 800781c:	e01b      	b.n	8007856 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	2b00      	cmp	r3, #0
 8007824:	daf2      	bge.n	800780c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007826:	2300      	movs	r3, #0
 8007828:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	f043 0201 	orr.w	r2, r3, #1
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	3301      	adds	r3, #1
 800783a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	4a09      	ldr	r2, [pc, #36]	; (8007864 <USB_CoreReset+0x64>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d901      	bls.n	8007848 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007844:	2303      	movs	r3, #3
 8007846:	e006      	b.n	8007856 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	f003 0301 	and.w	r3, r3, #1
 8007850:	2b01      	cmp	r3, #1
 8007852:	d0f0      	beq.n	8007836 <USB_CoreReset+0x36>

  return HAL_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3714      	adds	r7, #20
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr
 8007862:	bf00      	nop
 8007864:	00030d40 	.word	0x00030d40

08007868 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007868:	b480      	push	{r7}
 800786a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800786c:	bf00      	nop
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
	...

08007878 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007878:	b480      	push	{r7}
 800787a:	b085      	sub	sp, #20
 800787c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800787e:	f3ef 8305 	mrs	r3, IPSR
 8007882:	60bb      	str	r3, [r7, #8]
  return(result);
 8007884:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007886:	2b00      	cmp	r3, #0
 8007888:	d10f      	bne.n	80078aa <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800788a:	f3ef 8310 	mrs	r3, PRIMASK
 800788e:	607b      	str	r3, [r7, #4]
  return(result);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d105      	bne.n	80078a2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007896:	f3ef 8311 	mrs	r3, BASEPRI
 800789a:	603b      	str	r3, [r7, #0]
  return(result);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d007      	beq.n	80078b2 <osKernelInitialize+0x3a>
 80078a2:	4b0e      	ldr	r3, [pc, #56]	; (80078dc <osKernelInitialize+0x64>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2b02      	cmp	r3, #2
 80078a8:	d103      	bne.n	80078b2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80078aa:	f06f 0305 	mvn.w	r3, #5
 80078ae:	60fb      	str	r3, [r7, #12]
 80078b0:	e00c      	b.n	80078cc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80078b2:	4b0a      	ldr	r3, [pc, #40]	; (80078dc <osKernelInitialize+0x64>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d105      	bne.n	80078c6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80078ba:	4b08      	ldr	r3, [pc, #32]	; (80078dc <osKernelInitialize+0x64>)
 80078bc:	2201      	movs	r2, #1
 80078be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80078c0:	2300      	movs	r3, #0
 80078c2:	60fb      	str	r3, [r7, #12]
 80078c4:	e002      	b.n	80078cc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80078c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078ca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80078cc:	68fb      	ldr	r3, [r7, #12]
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3714      	adds	r7, #20
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr
 80078da:	bf00      	nop
 80078dc:	20006f54 	.word	0x20006f54

080078e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078e6:	f3ef 8305 	mrs	r3, IPSR
 80078ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80078ec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d10f      	bne.n	8007912 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078f2:	f3ef 8310 	mrs	r3, PRIMASK
 80078f6:	607b      	str	r3, [r7, #4]
  return(result);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d105      	bne.n	800790a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80078fe:	f3ef 8311 	mrs	r3, BASEPRI
 8007902:	603b      	str	r3, [r7, #0]
  return(result);
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d007      	beq.n	800791a <osKernelStart+0x3a>
 800790a:	4b0f      	ldr	r3, [pc, #60]	; (8007948 <osKernelStart+0x68>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	2b02      	cmp	r3, #2
 8007910:	d103      	bne.n	800791a <osKernelStart+0x3a>
    stat = osErrorISR;
 8007912:	f06f 0305 	mvn.w	r3, #5
 8007916:	60fb      	str	r3, [r7, #12]
 8007918:	e010      	b.n	800793c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800791a:	4b0b      	ldr	r3, [pc, #44]	; (8007948 <osKernelStart+0x68>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2b01      	cmp	r3, #1
 8007920:	d109      	bne.n	8007936 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007922:	f7ff ffa1 	bl	8007868 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007926:	4b08      	ldr	r3, [pc, #32]	; (8007948 <osKernelStart+0x68>)
 8007928:	2202      	movs	r2, #2
 800792a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800792c:	f001 f8ca 	bl	8008ac4 <vTaskStartScheduler>
      stat = osOK;
 8007930:	2300      	movs	r3, #0
 8007932:	60fb      	str	r3, [r7, #12]
 8007934:	e002      	b.n	800793c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8007936:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800793a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800793c:	68fb      	ldr	r3, [r7, #12]
}
 800793e:	4618      	mov	r0, r3
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	20006f54 	.word	0x20006f54

0800794c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800794c:	b580      	push	{r7, lr}
 800794e:	b090      	sub	sp, #64	; 0x40
 8007950:	af04      	add	r7, sp, #16
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007958:	2300      	movs	r3, #0
 800795a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800795c:	f3ef 8305 	mrs	r3, IPSR
 8007960:	61fb      	str	r3, [r7, #28]
  return(result);
 8007962:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007964:	2b00      	cmp	r3, #0
 8007966:	f040 808f 	bne.w	8007a88 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800796a:	f3ef 8310 	mrs	r3, PRIMASK
 800796e:	61bb      	str	r3, [r7, #24]
  return(result);
 8007970:	69bb      	ldr	r3, [r7, #24]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d105      	bne.n	8007982 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007976:	f3ef 8311 	mrs	r3, BASEPRI
 800797a:	617b      	str	r3, [r7, #20]
  return(result);
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d003      	beq.n	800798a <osThreadNew+0x3e>
 8007982:	4b44      	ldr	r3, [pc, #272]	; (8007a94 <osThreadNew+0x148>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2b02      	cmp	r3, #2
 8007988:	d07e      	beq.n	8007a88 <osThreadNew+0x13c>
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d07b      	beq.n	8007a88 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007990:	2380      	movs	r3, #128	; 0x80
 8007992:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007994:	2318      	movs	r3, #24
 8007996:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8007998:	2300      	movs	r3, #0
 800799a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800799c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079a0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d045      	beq.n	8007a34 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d002      	beq.n	80079b6 <osThreadNew+0x6a>
        name = attr->name;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	699b      	ldr	r3, [r3, #24]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d002      	beq.n	80079c4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	699b      	ldr	r3, [r3, #24]
 80079c2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80079c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d008      	beq.n	80079dc <osThreadNew+0x90>
 80079ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079cc:	2b38      	cmp	r3, #56	; 0x38
 80079ce:	d805      	bhi.n	80079dc <osThreadNew+0x90>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	f003 0301 	and.w	r3, r3, #1
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d001      	beq.n	80079e0 <osThreadNew+0x94>
        return (NULL);
 80079dc:	2300      	movs	r3, #0
 80079de:	e054      	b.n	8007a8a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	695b      	ldr	r3, [r3, #20]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d003      	beq.n	80079f0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	695b      	ldr	r3, [r3, #20]
 80079ec:	089b      	lsrs	r3, r3, #2
 80079ee:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00e      	beq.n	8007a16 <osThreadNew+0xca>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	2ba7      	cmp	r3, #167	; 0xa7
 80079fe:	d90a      	bls.n	8007a16 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d006      	beq.n	8007a16 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	695b      	ldr	r3, [r3, #20]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d002      	beq.n	8007a16 <osThreadNew+0xca>
        mem = 1;
 8007a10:	2301      	movs	r3, #1
 8007a12:	623b      	str	r3, [r7, #32]
 8007a14:	e010      	b.n	8007a38 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d10c      	bne.n	8007a38 <osThreadNew+0xec>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d108      	bne.n	8007a38 <osThreadNew+0xec>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d104      	bne.n	8007a38 <osThreadNew+0xec>
          mem = 0;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	623b      	str	r3, [r7, #32]
 8007a32:	e001      	b.n	8007a38 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007a34:	2300      	movs	r3, #0
 8007a36:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007a38:	6a3b      	ldr	r3, [r7, #32]
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d110      	bne.n	8007a60 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007a46:	9202      	str	r2, [sp, #8]
 8007a48:	9301      	str	r3, [sp, #4]
 8007a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4c:	9300      	str	r3, [sp, #0]
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a54:	68f8      	ldr	r0, [r7, #12]
 8007a56:	f000 fe3f 	bl	80086d8 <xTaskCreateStatic>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	613b      	str	r3, [r7, #16]
 8007a5e:	e013      	b.n	8007a88 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007a60:	6a3b      	ldr	r3, [r7, #32]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d110      	bne.n	8007a88 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	f107 0310 	add.w	r3, r7, #16
 8007a6e:	9301      	str	r3, [sp, #4]
 8007a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a72:	9300      	str	r3, [sp, #0]
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f000 fe90 	bl	800879e <xTaskCreate>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d001      	beq.n	8007a88 <osThreadNew+0x13c>
          hTask = NULL;
 8007a84:	2300      	movs	r3, #0
 8007a86:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007a88:	693b      	ldr	r3, [r7, #16]
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3730      	adds	r7, #48	; 0x30
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	bf00      	nop
 8007a94:	20006f54 	.word	0x20006f54

08007a98 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b086      	sub	sp, #24
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007aa0:	f3ef 8305 	mrs	r3, IPSR
 8007aa4:	613b      	str	r3, [r7, #16]
  return(result);
 8007aa6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d10f      	bne.n	8007acc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007aac:	f3ef 8310 	mrs	r3, PRIMASK
 8007ab0:	60fb      	str	r3, [r7, #12]
  return(result);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d105      	bne.n	8007ac4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007ab8:	f3ef 8311 	mrs	r3, BASEPRI
 8007abc:	60bb      	str	r3, [r7, #8]
  return(result);
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d007      	beq.n	8007ad4 <osDelay+0x3c>
 8007ac4:	4b0a      	ldr	r3, [pc, #40]	; (8007af0 <osDelay+0x58>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2b02      	cmp	r3, #2
 8007aca:	d103      	bne.n	8007ad4 <osDelay+0x3c>
    stat = osErrorISR;
 8007acc:	f06f 0305 	mvn.w	r3, #5
 8007ad0:	617b      	str	r3, [r7, #20]
 8007ad2:	e007      	b.n	8007ae4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d002      	beq.n	8007ae4 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 ffba 	bl	8008a58 <vTaskDelay>
    }
  }

  return (stat);
 8007ae4:	697b      	ldr	r3, [r7, #20]
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3718      	adds	r7, #24
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	20006f54 	.word	0x20006f54

08007af4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007af4:	b480      	push	{r7}
 8007af6:	b085      	sub	sp, #20
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	4a07      	ldr	r2, [pc, #28]	; (8007b20 <vApplicationGetIdleTaskMemory+0x2c>)
 8007b04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	4a06      	ldr	r2, [pc, #24]	; (8007b24 <vApplicationGetIdleTaskMemory+0x30>)
 8007b0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2280      	movs	r2, #128	; 0x80
 8007b10:	601a      	str	r2, [r3, #0]
}
 8007b12:	bf00      	nop
 8007b14:	3714      	adds	r7, #20
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr
 8007b1e:	bf00      	nop
 8007b20:	20006f58 	.word	0x20006f58
 8007b24:	20007000 	.word	0x20007000

08007b28 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	4a07      	ldr	r2, [pc, #28]	; (8007b54 <vApplicationGetTimerTaskMemory+0x2c>)
 8007b38:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	4a06      	ldr	r2, [pc, #24]	; (8007b58 <vApplicationGetTimerTaskMemory+0x30>)
 8007b3e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b46:	601a      	str	r2, [r3, #0]
}
 8007b48:	bf00      	nop
 8007b4a:	3714      	adds	r7, #20
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr
 8007b54:	20007200 	.word	0x20007200
 8007b58:	200072a8 	.word	0x200072a8

08007b5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f103 0208 	add.w	r2, r3, #8
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f103 0208 	add.w	r2, r3, #8
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f103 0208 	add.w	r2, r3, #8
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b90:	bf00      	nop
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007baa:	bf00      	nop
 8007bac:	370c      	adds	r7, #12
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr

08007bb6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007bb6:	b480      	push	{r7}
 8007bb8:	b085      	sub	sp, #20
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
 8007bbe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	689a      	ldr	r2, [r3, #8]
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	683a      	ldr	r2, [r7, #0]
 8007bda:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	683a      	ldr	r2, [r7, #0]
 8007be0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	1c5a      	adds	r2, r3, #1
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	601a      	str	r2, [r3, #0]
}
 8007bf2:	bf00      	nop
 8007bf4:	3714      	adds	r7, #20
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr

08007bfe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007bfe:	b480      	push	{r7}
 8007c00:	b085      	sub	sp, #20
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
 8007c06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c14:	d103      	bne.n	8007c1e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	60fb      	str	r3, [r7, #12]
 8007c1c:	e00c      	b.n	8007c38 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	3308      	adds	r3, #8
 8007c22:	60fb      	str	r3, [r7, #12]
 8007c24:	e002      	b.n	8007c2c <vListInsert+0x2e>
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	60fb      	str	r3, [r7, #12]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68ba      	ldr	r2, [r7, #8]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d2f6      	bcs.n	8007c26 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	685a      	ldr	r2, [r3, #4]
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	683a      	ldr	r2, [r7, #0]
 8007c46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	683a      	ldr	r2, [r7, #0]
 8007c52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	1c5a      	adds	r2, r3, #1
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	601a      	str	r2, [r3, #0]
}
 8007c64:	bf00      	nop
 8007c66:	3714      	adds	r7, #20
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c70:	b480      	push	{r7}
 8007c72:	b085      	sub	sp, #20
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	691b      	ldr	r3, [r3, #16]
 8007c7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	6892      	ldr	r2, [r2, #8]
 8007c86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	689b      	ldr	r3, [r3, #8]
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	6852      	ldr	r2, [r2, #4]
 8007c90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d103      	bne.n	8007ca4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	689a      	ldr	r2, [r3, #8]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	1e5a      	subs	r2, r3, #1
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3714      	adds	r7, #20
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d10c      	bne.n	8007cf2 <xQueueGenericReset+0x2e>
	__asm volatile
 8007cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cdc:	b672      	cpsid	i
 8007cde:	f383 8811 	msr	BASEPRI, r3
 8007ce2:	f3bf 8f6f 	isb	sy
 8007ce6:	f3bf 8f4f 	dsb	sy
 8007cea:	b662      	cpsie	i
 8007cec:	60bb      	str	r3, [r7, #8]
}
 8007cee:	bf00      	nop
 8007cf0:	e7fe      	b.n	8007cf0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007cf2:	f002 f8cb 	bl	8009e8c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cfe:	68f9      	ldr	r1, [r7, #12]
 8007d00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d02:	fb01 f303 	mul.w	r3, r1, r3
 8007d06:	441a      	add	r2, r3
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d22:	3b01      	subs	r3, #1
 8007d24:	68f9      	ldr	r1, [r7, #12]
 8007d26:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d28:	fb01 f303 	mul.w	r3, r1, r3
 8007d2c:	441a      	add	r2, r3
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	22ff      	movs	r2, #255	; 0xff
 8007d36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	22ff      	movs	r2, #255	; 0xff
 8007d3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d114      	bne.n	8007d72 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	691b      	ldr	r3, [r3, #16]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d01a      	beq.n	8007d86 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	3310      	adds	r3, #16
 8007d54:	4618      	mov	r0, r3
 8007d56:	f001 f95d 	bl	8009014 <xTaskRemoveFromEventList>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d012      	beq.n	8007d86 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007d60:	4b0c      	ldr	r3, [pc, #48]	; (8007d94 <xQueueGenericReset+0xd0>)
 8007d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d66:	601a      	str	r2, [r3, #0]
 8007d68:	f3bf 8f4f 	dsb	sy
 8007d6c:	f3bf 8f6f 	isb	sy
 8007d70:	e009      	b.n	8007d86 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	3310      	adds	r3, #16
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7ff fef0 	bl	8007b5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	3324      	adds	r3, #36	; 0x24
 8007d80:	4618      	mov	r0, r3
 8007d82:	f7ff feeb 	bl	8007b5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007d86:	f002 f8b5 	bl	8009ef4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007d8a:	2301      	movs	r3, #1
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3710      	adds	r7, #16
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	e000ed04 	.word	0xe000ed04

08007d98 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b08e      	sub	sp, #56	; 0x38
 8007d9c:	af02      	add	r7, sp, #8
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	607a      	str	r2, [r7, #4]
 8007da4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d10c      	bne.n	8007dc6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8007dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db0:	b672      	cpsid	i
 8007db2:	f383 8811 	msr	BASEPRI, r3
 8007db6:	f3bf 8f6f 	isb	sy
 8007dba:	f3bf 8f4f 	dsb	sy
 8007dbe:	b662      	cpsie	i
 8007dc0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007dc2:	bf00      	nop
 8007dc4:	e7fe      	b.n	8007dc4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d10c      	bne.n	8007de6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8007dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd0:	b672      	cpsid	i
 8007dd2:	f383 8811 	msr	BASEPRI, r3
 8007dd6:	f3bf 8f6f 	isb	sy
 8007dda:	f3bf 8f4f 	dsb	sy
 8007dde:	b662      	cpsie	i
 8007de0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007de2:	bf00      	nop
 8007de4:	e7fe      	b.n	8007de4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d002      	beq.n	8007df2 <xQueueGenericCreateStatic+0x5a>
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d001      	beq.n	8007df6 <xQueueGenericCreateStatic+0x5e>
 8007df2:	2301      	movs	r3, #1
 8007df4:	e000      	b.n	8007df8 <xQueueGenericCreateStatic+0x60>
 8007df6:	2300      	movs	r3, #0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d10c      	bne.n	8007e16 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8007dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e00:	b672      	cpsid	i
 8007e02:	f383 8811 	msr	BASEPRI, r3
 8007e06:	f3bf 8f6f 	isb	sy
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	b662      	cpsie	i
 8007e10:	623b      	str	r3, [r7, #32]
}
 8007e12:	bf00      	nop
 8007e14:	e7fe      	b.n	8007e14 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d102      	bne.n	8007e22 <xQueueGenericCreateStatic+0x8a>
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d101      	bne.n	8007e26 <xQueueGenericCreateStatic+0x8e>
 8007e22:	2301      	movs	r3, #1
 8007e24:	e000      	b.n	8007e28 <xQueueGenericCreateStatic+0x90>
 8007e26:	2300      	movs	r3, #0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d10c      	bne.n	8007e46 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8007e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e30:	b672      	cpsid	i
 8007e32:	f383 8811 	msr	BASEPRI, r3
 8007e36:	f3bf 8f6f 	isb	sy
 8007e3a:	f3bf 8f4f 	dsb	sy
 8007e3e:	b662      	cpsie	i
 8007e40:	61fb      	str	r3, [r7, #28]
}
 8007e42:	bf00      	nop
 8007e44:	e7fe      	b.n	8007e44 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007e46:	2350      	movs	r3, #80	; 0x50
 8007e48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	2b50      	cmp	r3, #80	; 0x50
 8007e4e:	d00c      	beq.n	8007e6a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8007e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e54:	b672      	cpsid	i
 8007e56:	f383 8811 	msr	BASEPRI, r3
 8007e5a:	f3bf 8f6f 	isb	sy
 8007e5e:	f3bf 8f4f 	dsb	sy
 8007e62:	b662      	cpsie	i
 8007e64:	61bb      	str	r3, [r7, #24]
}
 8007e66:	bf00      	nop
 8007e68:	e7fe      	b.n	8007e68 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007e6a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d00d      	beq.n	8007e92 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e78:	2201      	movs	r2, #1
 8007e7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e7e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e84:	9300      	str	r3, [sp, #0]
 8007e86:	4613      	mov	r3, r2
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	68b9      	ldr	r1, [r7, #8]
 8007e8c:	68f8      	ldr	r0, [r7, #12]
 8007e8e:	f000 f805 	bl	8007e9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3730      	adds	r7, #48	; 0x30
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	607a      	str	r2, [r7, #4]
 8007ea8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d103      	bne.n	8007eb8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	69ba      	ldr	r2, [r7, #24]
 8007eb4:	601a      	str	r2, [r3, #0]
 8007eb6:	e002      	b.n	8007ebe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007ebe:	69bb      	ldr	r3, [r7, #24]
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	68ba      	ldr	r2, [r7, #8]
 8007ec8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007eca:	2101      	movs	r1, #1
 8007ecc:	69b8      	ldr	r0, [r7, #24]
 8007ece:	f7ff fef9 	bl	8007cc4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	78fa      	ldrb	r2, [r7, #3]
 8007ed6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007eda:	bf00      	nop
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
	...

08007ee4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b08e      	sub	sp, #56	; 0x38
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	607a      	str	r2, [r7, #4]
 8007ef0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d10c      	bne.n	8007f1a <xQueueGenericSend+0x36>
	__asm volatile
 8007f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f04:	b672      	cpsid	i
 8007f06:	f383 8811 	msr	BASEPRI, r3
 8007f0a:	f3bf 8f6f 	isb	sy
 8007f0e:	f3bf 8f4f 	dsb	sy
 8007f12:	b662      	cpsie	i
 8007f14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007f16:	bf00      	nop
 8007f18:	e7fe      	b.n	8007f18 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d103      	bne.n	8007f28 <xQueueGenericSend+0x44>
 8007f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d101      	bne.n	8007f2c <xQueueGenericSend+0x48>
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e000      	b.n	8007f2e <xQueueGenericSend+0x4a>
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d10c      	bne.n	8007f4c <xQueueGenericSend+0x68>
	__asm volatile
 8007f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f36:	b672      	cpsid	i
 8007f38:	f383 8811 	msr	BASEPRI, r3
 8007f3c:	f3bf 8f6f 	isb	sy
 8007f40:	f3bf 8f4f 	dsb	sy
 8007f44:	b662      	cpsie	i
 8007f46:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007f48:	bf00      	nop
 8007f4a:	e7fe      	b.n	8007f4a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	2b02      	cmp	r3, #2
 8007f50:	d103      	bne.n	8007f5a <xQueueGenericSend+0x76>
 8007f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d101      	bne.n	8007f5e <xQueueGenericSend+0x7a>
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e000      	b.n	8007f60 <xQueueGenericSend+0x7c>
 8007f5e:	2300      	movs	r3, #0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d10c      	bne.n	8007f7e <xQueueGenericSend+0x9a>
	__asm volatile
 8007f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f68:	b672      	cpsid	i
 8007f6a:	f383 8811 	msr	BASEPRI, r3
 8007f6e:	f3bf 8f6f 	isb	sy
 8007f72:	f3bf 8f4f 	dsb	sy
 8007f76:	b662      	cpsie	i
 8007f78:	623b      	str	r3, [r7, #32]
}
 8007f7a:	bf00      	nop
 8007f7c:	e7fe      	b.n	8007f7c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f7e:	f001 fa3b 	bl	80093f8 <xTaskGetSchedulerState>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d102      	bne.n	8007f8e <xQueueGenericSend+0xaa>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d101      	bne.n	8007f92 <xQueueGenericSend+0xae>
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e000      	b.n	8007f94 <xQueueGenericSend+0xb0>
 8007f92:	2300      	movs	r3, #0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d10c      	bne.n	8007fb2 <xQueueGenericSend+0xce>
	__asm volatile
 8007f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9c:	b672      	cpsid	i
 8007f9e:	f383 8811 	msr	BASEPRI, r3
 8007fa2:	f3bf 8f6f 	isb	sy
 8007fa6:	f3bf 8f4f 	dsb	sy
 8007faa:	b662      	cpsie	i
 8007fac:	61fb      	str	r3, [r7, #28]
}
 8007fae:	bf00      	nop
 8007fb0:	e7fe      	b.n	8007fb0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007fb2:	f001 ff6b 	bl	8009e8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d302      	bcc.n	8007fc8 <xQueueGenericSend+0xe4>
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	2b02      	cmp	r3, #2
 8007fc6:	d129      	bne.n	800801c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007fc8:	683a      	ldr	r2, [r7, #0]
 8007fca:	68b9      	ldr	r1, [r7, #8]
 8007fcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fce:	f000 fa15 	bl	80083fc <prvCopyDataToQueue>
 8007fd2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d010      	beq.n	8007ffe <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fde:	3324      	adds	r3, #36	; 0x24
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f001 f817 	bl	8009014 <xTaskRemoveFromEventList>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d013      	beq.n	8008014 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007fec:	4b3f      	ldr	r3, [pc, #252]	; (80080ec <xQueueGenericSend+0x208>)
 8007fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ff2:	601a      	str	r2, [r3, #0]
 8007ff4:	f3bf 8f4f 	dsb	sy
 8007ff8:	f3bf 8f6f 	isb	sy
 8007ffc:	e00a      	b.n	8008014 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008000:	2b00      	cmp	r3, #0
 8008002:	d007      	beq.n	8008014 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008004:	4b39      	ldr	r3, [pc, #228]	; (80080ec <xQueueGenericSend+0x208>)
 8008006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800800a:	601a      	str	r2, [r3, #0]
 800800c:	f3bf 8f4f 	dsb	sy
 8008010:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008014:	f001 ff6e 	bl	8009ef4 <vPortExitCritical>
				return pdPASS;
 8008018:	2301      	movs	r3, #1
 800801a:	e063      	b.n	80080e4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d103      	bne.n	800802a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008022:	f001 ff67 	bl	8009ef4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008026:	2300      	movs	r3, #0
 8008028:	e05c      	b.n	80080e4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800802a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800802c:	2b00      	cmp	r3, #0
 800802e:	d106      	bne.n	800803e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008030:	f107 0314 	add.w	r3, r7, #20
 8008034:	4618      	mov	r0, r3
 8008036:	f001 f87b 	bl	8009130 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800803a:	2301      	movs	r3, #1
 800803c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800803e:	f001 ff59 	bl	8009ef4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008042:	f000 fdb3 	bl	8008bac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008046:	f001 ff21 	bl	8009e8c <vPortEnterCritical>
 800804a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800804c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008050:	b25b      	sxtb	r3, r3
 8008052:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008056:	d103      	bne.n	8008060 <xQueueGenericSend+0x17c>
 8008058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800805a:	2200      	movs	r2, #0
 800805c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008062:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008066:	b25b      	sxtb	r3, r3
 8008068:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800806c:	d103      	bne.n	8008076 <xQueueGenericSend+0x192>
 800806e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008070:	2200      	movs	r2, #0
 8008072:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008076:	f001 ff3d 	bl	8009ef4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800807a:	1d3a      	adds	r2, r7, #4
 800807c:	f107 0314 	add.w	r3, r7, #20
 8008080:	4611      	mov	r1, r2
 8008082:	4618      	mov	r0, r3
 8008084:	f001 f86a 	bl	800915c <xTaskCheckForTimeOut>
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d124      	bne.n	80080d8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800808e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008090:	f000 faac 	bl	80085ec <prvIsQueueFull>
 8008094:	4603      	mov	r3, r0
 8008096:	2b00      	cmp	r3, #0
 8008098:	d018      	beq.n	80080cc <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800809a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809c:	3310      	adds	r3, #16
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	4611      	mov	r1, r2
 80080a2:	4618      	mov	r0, r3
 80080a4:	f000 ff62 	bl	8008f6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80080a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080aa:	f000 fa37 	bl	800851c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80080ae:	f000 fd8b 	bl	8008bc8 <xTaskResumeAll>
 80080b2:	4603      	mov	r3, r0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	f47f af7c 	bne.w	8007fb2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80080ba:	4b0c      	ldr	r3, [pc, #48]	; (80080ec <xQueueGenericSend+0x208>)
 80080bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080c0:	601a      	str	r2, [r3, #0]
 80080c2:	f3bf 8f4f 	dsb	sy
 80080c6:	f3bf 8f6f 	isb	sy
 80080ca:	e772      	b.n	8007fb2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80080cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080ce:	f000 fa25 	bl	800851c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80080d2:	f000 fd79 	bl	8008bc8 <xTaskResumeAll>
 80080d6:	e76c      	b.n	8007fb2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80080d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080da:	f000 fa1f 	bl	800851c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080de:	f000 fd73 	bl	8008bc8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80080e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3738      	adds	r7, #56	; 0x38
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}
 80080ec:	e000ed04 	.word	0xe000ed04

080080f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b08e      	sub	sp, #56	; 0x38
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	607a      	str	r2, [r7, #4]
 80080fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008104:	2b00      	cmp	r3, #0
 8008106:	d10c      	bne.n	8008122 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8008108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810c:	b672      	cpsid	i
 800810e:	f383 8811 	msr	BASEPRI, r3
 8008112:	f3bf 8f6f 	isb	sy
 8008116:	f3bf 8f4f 	dsb	sy
 800811a:	b662      	cpsie	i
 800811c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800811e:	bf00      	nop
 8008120:	e7fe      	b.n	8008120 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d103      	bne.n	8008130 <xQueueGenericSendFromISR+0x40>
 8008128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800812a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800812c:	2b00      	cmp	r3, #0
 800812e:	d101      	bne.n	8008134 <xQueueGenericSendFromISR+0x44>
 8008130:	2301      	movs	r3, #1
 8008132:	e000      	b.n	8008136 <xQueueGenericSendFromISR+0x46>
 8008134:	2300      	movs	r3, #0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d10c      	bne.n	8008154 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800813a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813e:	b672      	cpsid	i
 8008140:	f383 8811 	msr	BASEPRI, r3
 8008144:	f3bf 8f6f 	isb	sy
 8008148:	f3bf 8f4f 	dsb	sy
 800814c:	b662      	cpsie	i
 800814e:	623b      	str	r3, [r7, #32]
}
 8008150:	bf00      	nop
 8008152:	e7fe      	b.n	8008152 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	2b02      	cmp	r3, #2
 8008158:	d103      	bne.n	8008162 <xQueueGenericSendFromISR+0x72>
 800815a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800815e:	2b01      	cmp	r3, #1
 8008160:	d101      	bne.n	8008166 <xQueueGenericSendFromISR+0x76>
 8008162:	2301      	movs	r3, #1
 8008164:	e000      	b.n	8008168 <xQueueGenericSendFromISR+0x78>
 8008166:	2300      	movs	r3, #0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d10c      	bne.n	8008186 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800816c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008170:	b672      	cpsid	i
 8008172:	f383 8811 	msr	BASEPRI, r3
 8008176:	f3bf 8f6f 	isb	sy
 800817a:	f3bf 8f4f 	dsb	sy
 800817e:	b662      	cpsie	i
 8008180:	61fb      	str	r3, [r7, #28]
}
 8008182:	bf00      	nop
 8008184:	e7fe      	b.n	8008184 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008186:	f001 ff69 	bl	800a05c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800818a:	f3ef 8211 	mrs	r2, BASEPRI
 800818e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008192:	b672      	cpsid	i
 8008194:	f383 8811 	msr	BASEPRI, r3
 8008198:	f3bf 8f6f 	isb	sy
 800819c:	f3bf 8f4f 	dsb	sy
 80081a0:	b662      	cpsie	i
 80081a2:	61ba      	str	r2, [r7, #24]
 80081a4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80081a6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80081a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80081aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d302      	bcc.n	80081bc <xQueueGenericSendFromISR+0xcc>
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	2b02      	cmp	r3, #2
 80081ba:	d12c      	bne.n	8008216 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80081bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80081c6:	683a      	ldr	r2, [r7, #0]
 80081c8:	68b9      	ldr	r1, [r7, #8]
 80081ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081cc:	f000 f916 	bl	80083fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80081d0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80081d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081d8:	d112      	bne.n	8008200 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d016      	beq.n	8008210 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e4:	3324      	adds	r3, #36	; 0x24
 80081e6:	4618      	mov	r0, r3
 80081e8:	f000 ff14 	bl	8009014 <xTaskRemoveFromEventList>
 80081ec:	4603      	mov	r3, r0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d00e      	beq.n	8008210 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d00b      	beq.n	8008210 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2201      	movs	r2, #1
 80081fc:	601a      	str	r2, [r3, #0]
 80081fe:	e007      	b.n	8008210 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008200:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008204:	3301      	adds	r3, #1
 8008206:	b2db      	uxtb	r3, r3
 8008208:	b25a      	sxtb	r2, r3
 800820a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008210:	2301      	movs	r3, #1
 8008212:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008214:	e001      	b.n	800821a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008216:	2300      	movs	r3, #0
 8008218:	637b      	str	r3, [r7, #52]	; 0x34
 800821a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800821c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008224:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008228:	4618      	mov	r0, r3
 800822a:	3738      	adds	r7, #56	; 0x38
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b08c      	sub	sp, #48	; 0x30
 8008234:	af00      	add	r7, sp, #0
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800823c:	2300      	movs	r3, #0
 800823e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008246:	2b00      	cmp	r3, #0
 8008248:	d10c      	bne.n	8008264 <xQueueReceive+0x34>
	__asm volatile
 800824a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824e:	b672      	cpsid	i
 8008250:	f383 8811 	msr	BASEPRI, r3
 8008254:	f3bf 8f6f 	isb	sy
 8008258:	f3bf 8f4f 	dsb	sy
 800825c:	b662      	cpsie	i
 800825e:	623b      	str	r3, [r7, #32]
}
 8008260:	bf00      	nop
 8008262:	e7fe      	b.n	8008262 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d103      	bne.n	8008272 <xQueueReceive+0x42>
 800826a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800826e:	2b00      	cmp	r3, #0
 8008270:	d101      	bne.n	8008276 <xQueueReceive+0x46>
 8008272:	2301      	movs	r3, #1
 8008274:	e000      	b.n	8008278 <xQueueReceive+0x48>
 8008276:	2300      	movs	r3, #0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d10c      	bne.n	8008296 <xQueueReceive+0x66>
	__asm volatile
 800827c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008280:	b672      	cpsid	i
 8008282:	f383 8811 	msr	BASEPRI, r3
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	b662      	cpsie	i
 8008290:	61fb      	str	r3, [r7, #28]
}
 8008292:	bf00      	nop
 8008294:	e7fe      	b.n	8008294 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008296:	f001 f8af 	bl	80093f8 <xTaskGetSchedulerState>
 800829a:	4603      	mov	r3, r0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d102      	bne.n	80082a6 <xQueueReceive+0x76>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d101      	bne.n	80082aa <xQueueReceive+0x7a>
 80082a6:	2301      	movs	r3, #1
 80082a8:	e000      	b.n	80082ac <xQueueReceive+0x7c>
 80082aa:	2300      	movs	r3, #0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d10c      	bne.n	80082ca <xQueueReceive+0x9a>
	__asm volatile
 80082b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b4:	b672      	cpsid	i
 80082b6:	f383 8811 	msr	BASEPRI, r3
 80082ba:	f3bf 8f6f 	isb	sy
 80082be:	f3bf 8f4f 	dsb	sy
 80082c2:	b662      	cpsie	i
 80082c4:	61bb      	str	r3, [r7, #24]
}
 80082c6:	bf00      	nop
 80082c8:	e7fe      	b.n	80082c8 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80082ca:	f001 fddf 	bl	8009e8c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80082d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d01f      	beq.n	800831a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80082da:	68b9      	ldr	r1, [r7, #8]
 80082dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082de:	f000 f8f7 	bl	80084d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80082e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e4:	1e5a      	subs	r2, r3, #1
 80082e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ec:	691b      	ldr	r3, [r3, #16]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d00f      	beq.n	8008312 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f4:	3310      	adds	r3, #16
 80082f6:	4618      	mov	r0, r3
 80082f8:	f000 fe8c 	bl	8009014 <xTaskRemoveFromEventList>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d007      	beq.n	8008312 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008302:	4b3d      	ldr	r3, [pc, #244]	; (80083f8 <xQueueReceive+0x1c8>)
 8008304:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008308:	601a      	str	r2, [r3, #0]
 800830a:	f3bf 8f4f 	dsb	sy
 800830e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008312:	f001 fdef 	bl	8009ef4 <vPortExitCritical>
				return pdPASS;
 8008316:	2301      	movs	r3, #1
 8008318:	e069      	b.n	80083ee <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d103      	bne.n	8008328 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008320:	f001 fde8 	bl	8009ef4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008324:	2300      	movs	r3, #0
 8008326:	e062      	b.n	80083ee <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800832a:	2b00      	cmp	r3, #0
 800832c:	d106      	bne.n	800833c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800832e:	f107 0310 	add.w	r3, r7, #16
 8008332:	4618      	mov	r0, r3
 8008334:	f000 fefc 	bl	8009130 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008338:	2301      	movs	r3, #1
 800833a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800833c:	f001 fdda 	bl	8009ef4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008340:	f000 fc34 	bl	8008bac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008344:	f001 fda2 	bl	8009e8c <vPortEnterCritical>
 8008348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800834a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800834e:	b25b      	sxtb	r3, r3
 8008350:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008354:	d103      	bne.n	800835e <xQueueReceive+0x12e>
 8008356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008358:	2200      	movs	r2, #0
 800835a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800835e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008360:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008364:	b25b      	sxtb	r3, r3
 8008366:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800836a:	d103      	bne.n	8008374 <xQueueReceive+0x144>
 800836c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836e:	2200      	movs	r2, #0
 8008370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008374:	f001 fdbe 	bl	8009ef4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008378:	1d3a      	adds	r2, r7, #4
 800837a:	f107 0310 	add.w	r3, r7, #16
 800837e:	4611      	mov	r1, r2
 8008380:	4618      	mov	r0, r3
 8008382:	f000 feeb 	bl	800915c <xTaskCheckForTimeOut>
 8008386:	4603      	mov	r3, r0
 8008388:	2b00      	cmp	r3, #0
 800838a:	d123      	bne.n	80083d4 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800838c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800838e:	f000 f917 	bl	80085c0 <prvIsQueueEmpty>
 8008392:	4603      	mov	r3, r0
 8008394:	2b00      	cmp	r3, #0
 8008396:	d017      	beq.n	80083c8 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839a:	3324      	adds	r3, #36	; 0x24
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	4611      	mov	r1, r2
 80083a0:	4618      	mov	r0, r3
 80083a2:	f000 fde3 	bl	8008f6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80083a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083a8:	f000 f8b8 	bl	800851c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80083ac:	f000 fc0c 	bl	8008bc8 <xTaskResumeAll>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d189      	bne.n	80082ca <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80083b6:	4b10      	ldr	r3, [pc, #64]	; (80083f8 <xQueueReceive+0x1c8>)
 80083b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083bc:	601a      	str	r2, [r3, #0]
 80083be:	f3bf 8f4f 	dsb	sy
 80083c2:	f3bf 8f6f 	isb	sy
 80083c6:	e780      	b.n	80082ca <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80083c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083ca:	f000 f8a7 	bl	800851c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083ce:	f000 fbfb 	bl	8008bc8 <xTaskResumeAll>
 80083d2:	e77a      	b.n	80082ca <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80083d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083d6:	f000 f8a1 	bl	800851c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083da:	f000 fbf5 	bl	8008bc8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083e0:	f000 f8ee 	bl	80085c0 <prvIsQueueEmpty>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	f43f af6f 	beq.w	80082ca <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80083ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3730      	adds	r7, #48	; 0x30
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	e000ed04 	.word	0xe000ed04

080083fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b086      	sub	sp, #24
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008408:	2300      	movs	r3, #0
 800840a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008410:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008416:	2b00      	cmp	r3, #0
 8008418:	d10d      	bne.n	8008436 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d14d      	bne.n	80084be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	689b      	ldr	r3, [r3, #8]
 8008426:	4618      	mov	r0, r3
 8008428:	f001 f804 	bl	8009434 <xTaskPriorityDisinherit>
 800842c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2200      	movs	r2, #0
 8008432:	609a      	str	r2, [r3, #8]
 8008434:	e043      	b.n	80084be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d119      	bne.n	8008470 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6858      	ldr	r0, [r3, #4]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008444:	461a      	mov	r2, r3
 8008446:	68b9      	ldr	r1, [r7, #8]
 8008448:	f011 fa69 	bl	801991e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	685a      	ldr	r2, [r3, #4]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008454:	441a      	add	r2, r3
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	685a      	ldr	r2, [r3, #4]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	429a      	cmp	r2, r3
 8008464:	d32b      	bcc.n	80084be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	605a      	str	r2, [r3, #4]
 800846e:	e026      	b.n	80084be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	68d8      	ldr	r0, [r3, #12]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008478:	461a      	mov	r2, r3
 800847a:	68b9      	ldr	r1, [r7, #8]
 800847c:	f011 fa4f 	bl	801991e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	68da      	ldr	r2, [r3, #12]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008488:	425b      	negs	r3, r3
 800848a:	441a      	add	r2, r3
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	68da      	ldr	r2, [r3, #12]
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	429a      	cmp	r2, r3
 800849a:	d207      	bcs.n	80084ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	689a      	ldr	r2, [r3, #8]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a4:	425b      	negs	r3, r3
 80084a6:	441a      	add	r2, r3
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2b02      	cmp	r3, #2
 80084b0:	d105      	bne.n	80084be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d002      	beq.n	80084be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	3b01      	subs	r3, #1
 80084bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	1c5a      	adds	r2, r3, #1
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80084c6:	697b      	ldr	r3, [r7, #20]
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3718      	adds	r7, #24
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d018      	beq.n	8008514 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	68da      	ldr	r2, [r3, #12]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ea:	441a      	add	r2, r3
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	68da      	ldr	r2, [r3, #12]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d303      	bcc.n	8008504 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	68d9      	ldr	r1, [r3, #12]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800850c:	461a      	mov	r2, r3
 800850e:	6838      	ldr	r0, [r7, #0]
 8008510:	f011 fa05 	bl	801991e <memcpy>
	}
}
 8008514:	bf00      	nop
 8008516:	3708      	adds	r7, #8
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008524:	f001 fcb2 	bl	8009e8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800852e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008530:	e011      	b.n	8008556 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008536:	2b00      	cmp	r3, #0
 8008538:	d012      	beq.n	8008560 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	3324      	adds	r3, #36	; 0x24
 800853e:	4618      	mov	r0, r3
 8008540:	f000 fd68 	bl	8009014 <xTaskRemoveFromEventList>
 8008544:	4603      	mov	r3, r0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d001      	beq.n	800854e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800854a:	f000 fe6d 	bl	8009228 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800854e:	7bfb      	ldrb	r3, [r7, #15]
 8008550:	3b01      	subs	r3, #1
 8008552:	b2db      	uxtb	r3, r3
 8008554:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800855a:	2b00      	cmp	r3, #0
 800855c:	dce9      	bgt.n	8008532 <prvUnlockQueue+0x16>
 800855e:	e000      	b.n	8008562 <prvUnlockQueue+0x46>
					break;
 8008560:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	22ff      	movs	r2, #255	; 0xff
 8008566:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800856a:	f001 fcc3 	bl	8009ef4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800856e:	f001 fc8d 	bl	8009e8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008578:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800857a:	e011      	b.n	80085a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	691b      	ldr	r3, [r3, #16]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d012      	beq.n	80085aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	3310      	adds	r3, #16
 8008588:	4618      	mov	r0, r3
 800858a:	f000 fd43 	bl	8009014 <xTaskRemoveFromEventList>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d001      	beq.n	8008598 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008594:	f000 fe48 	bl	8009228 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008598:	7bbb      	ldrb	r3, [r7, #14]
 800859a:	3b01      	subs	r3, #1
 800859c:	b2db      	uxtb	r3, r3
 800859e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80085a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	dce9      	bgt.n	800857c <prvUnlockQueue+0x60>
 80085a8:	e000      	b.n	80085ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80085aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	22ff      	movs	r2, #255	; 0xff
 80085b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80085b4:	f001 fc9e 	bl	8009ef4 <vPortExitCritical>
}
 80085b8:	bf00      	nop
 80085ba:	3710      	adds	r7, #16
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80085c8:	f001 fc60 	bl	8009e8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d102      	bne.n	80085da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80085d4:	2301      	movs	r3, #1
 80085d6:	60fb      	str	r3, [r7, #12]
 80085d8:	e001      	b.n	80085de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80085da:	2300      	movs	r3, #0
 80085dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80085de:	f001 fc89 	bl	8009ef4 <vPortExitCritical>

	return xReturn;
 80085e2:	68fb      	ldr	r3, [r7, #12]
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3710      	adds	r7, #16
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80085f4:	f001 fc4a 	bl	8009e8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008600:	429a      	cmp	r2, r3
 8008602:	d102      	bne.n	800860a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008604:	2301      	movs	r3, #1
 8008606:	60fb      	str	r3, [r7, #12]
 8008608:	e001      	b.n	800860e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800860a:	2300      	movs	r3, #0
 800860c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800860e:	f001 fc71 	bl	8009ef4 <vPortExitCritical>

	return xReturn;
 8008612:	68fb      	ldr	r3, [r7, #12]
}
 8008614:	4618      	mov	r0, r3
 8008616:	3710      	adds	r7, #16
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800861c:	b480      	push	{r7}
 800861e:	b085      	sub	sp, #20
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008626:	2300      	movs	r3, #0
 8008628:	60fb      	str	r3, [r7, #12]
 800862a:	e014      	b.n	8008656 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800862c:	4a0f      	ldr	r2, [pc, #60]	; (800866c <vQueueAddToRegistry+0x50>)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d10b      	bne.n	8008650 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008638:	490c      	ldr	r1, [pc, #48]	; (800866c <vQueueAddToRegistry+0x50>)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	683a      	ldr	r2, [r7, #0]
 800863e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008642:	4a0a      	ldr	r2, [pc, #40]	; (800866c <vQueueAddToRegistry+0x50>)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	00db      	lsls	r3, r3, #3
 8008648:	4413      	add	r3, r2
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800864e:	e006      	b.n	800865e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	3301      	adds	r3, #1
 8008654:	60fb      	str	r3, [r7, #12]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2b07      	cmp	r3, #7
 800865a:	d9e7      	bls.n	800862c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800865c:	bf00      	nop
 800865e:	bf00      	nop
 8008660:	3714      	adds	r7, #20
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop
 800866c:	200076a8 	.word	0x200076a8

08008670 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008670:	b580      	push	{r7, lr}
 8008672:	b086      	sub	sp, #24
 8008674:	af00      	add	r7, sp, #0
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008680:	f001 fc04 	bl	8009e8c <vPortEnterCritical>
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800868a:	b25b      	sxtb	r3, r3
 800868c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008690:	d103      	bne.n	800869a <vQueueWaitForMessageRestricted+0x2a>
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	2200      	movs	r2, #0
 8008696:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086a0:	b25b      	sxtb	r3, r3
 80086a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086a6:	d103      	bne.n	80086b0 <vQueueWaitForMessageRestricted+0x40>
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	2200      	movs	r2, #0
 80086ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086b0:	f001 fc20 	bl	8009ef4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d106      	bne.n	80086ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	3324      	adds	r3, #36	; 0x24
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	68b9      	ldr	r1, [r7, #8]
 80086c4:	4618      	mov	r0, r3
 80086c6:	f000 fc77 	bl	8008fb8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80086ca:	6978      	ldr	r0, [r7, #20]
 80086cc:	f7ff ff26 	bl	800851c <prvUnlockQueue>
	}
 80086d0:	bf00      	nop
 80086d2:	3718      	adds	r7, #24
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b08e      	sub	sp, #56	; 0x38
 80086dc:	af04      	add	r7, sp, #16
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	607a      	str	r2, [r7, #4]
 80086e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80086e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d10c      	bne.n	8008706 <xTaskCreateStatic+0x2e>
	__asm volatile
 80086ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f0:	b672      	cpsid	i
 80086f2:	f383 8811 	msr	BASEPRI, r3
 80086f6:	f3bf 8f6f 	isb	sy
 80086fa:	f3bf 8f4f 	dsb	sy
 80086fe:	b662      	cpsie	i
 8008700:	623b      	str	r3, [r7, #32]
}
 8008702:	bf00      	nop
 8008704:	e7fe      	b.n	8008704 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008708:	2b00      	cmp	r3, #0
 800870a:	d10c      	bne.n	8008726 <xTaskCreateStatic+0x4e>
	__asm volatile
 800870c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008710:	b672      	cpsid	i
 8008712:	f383 8811 	msr	BASEPRI, r3
 8008716:	f3bf 8f6f 	isb	sy
 800871a:	f3bf 8f4f 	dsb	sy
 800871e:	b662      	cpsie	i
 8008720:	61fb      	str	r3, [r7, #28]
}
 8008722:	bf00      	nop
 8008724:	e7fe      	b.n	8008724 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008726:	23a8      	movs	r3, #168	; 0xa8
 8008728:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	2ba8      	cmp	r3, #168	; 0xa8
 800872e:	d00c      	beq.n	800874a <xTaskCreateStatic+0x72>
	__asm volatile
 8008730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008734:	b672      	cpsid	i
 8008736:	f383 8811 	msr	BASEPRI, r3
 800873a:	f3bf 8f6f 	isb	sy
 800873e:	f3bf 8f4f 	dsb	sy
 8008742:	b662      	cpsie	i
 8008744:	61bb      	str	r3, [r7, #24]
}
 8008746:	bf00      	nop
 8008748:	e7fe      	b.n	8008748 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800874a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800874c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874e:	2b00      	cmp	r3, #0
 8008750:	d01e      	beq.n	8008790 <xTaskCreateStatic+0xb8>
 8008752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008754:	2b00      	cmp	r3, #0
 8008756:	d01b      	beq.n	8008790 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800875a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800875c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008760:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008764:	2202      	movs	r2, #2
 8008766:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800876a:	2300      	movs	r3, #0
 800876c:	9303      	str	r3, [sp, #12]
 800876e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008770:	9302      	str	r3, [sp, #8]
 8008772:	f107 0314 	add.w	r3, r7, #20
 8008776:	9301      	str	r3, [sp, #4]
 8008778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800877a:	9300      	str	r3, [sp, #0]
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	68b9      	ldr	r1, [r7, #8]
 8008782:	68f8      	ldr	r0, [r7, #12]
 8008784:	f000 f850 	bl	8008828 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008788:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800878a:	f000 f8f5 	bl	8008978 <prvAddNewTaskToReadyList>
 800878e:	e001      	b.n	8008794 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8008790:	2300      	movs	r3, #0
 8008792:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008794:	697b      	ldr	r3, [r7, #20]
	}
 8008796:	4618      	mov	r0, r3
 8008798:	3728      	adds	r7, #40	; 0x28
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}

0800879e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b08c      	sub	sp, #48	; 0x30
 80087a2:	af04      	add	r7, sp, #16
 80087a4:	60f8      	str	r0, [r7, #12]
 80087a6:	60b9      	str	r1, [r7, #8]
 80087a8:	603b      	str	r3, [r7, #0]
 80087aa:	4613      	mov	r3, r2
 80087ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80087ae:	88fb      	ldrh	r3, [r7, #6]
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	4618      	mov	r0, r3
 80087b4:	f001 fc96 	bl	800a0e4 <pvPortMalloc>
 80087b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d00e      	beq.n	80087de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80087c0:	20a8      	movs	r0, #168	; 0xa8
 80087c2:	f001 fc8f 	bl	800a0e4 <pvPortMalloc>
 80087c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d003      	beq.n	80087d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80087ce:	69fb      	ldr	r3, [r7, #28]
 80087d0:	697a      	ldr	r2, [r7, #20]
 80087d2:	631a      	str	r2, [r3, #48]	; 0x30
 80087d4:	e005      	b.n	80087e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80087d6:	6978      	ldr	r0, [r7, #20]
 80087d8:	f001 fd4e 	bl	800a278 <vPortFree>
 80087dc:	e001      	b.n	80087e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80087de:	2300      	movs	r3, #0
 80087e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80087e2:	69fb      	ldr	r3, [r7, #28]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d017      	beq.n	8008818 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	2200      	movs	r2, #0
 80087ec:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80087f0:	88fa      	ldrh	r2, [r7, #6]
 80087f2:	2300      	movs	r3, #0
 80087f4:	9303      	str	r3, [sp, #12]
 80087f6:	69fb      	ldr	r3, [r7, #28]
 80087f8:	9302      	str	r3, [sp, #8]
 80087fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087fc:	9301      	str	r3, [sp, #4]
 80087fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008800:	9300      	str	r3, [sp, #0]
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	68b9      	ldr	r1, [r7, #8]
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f000 f80e 	bl	8008828 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800880c:	69f8      	ldr	r0, [r7, #28]
 800880e:	f000 f8b3 	bl	8008978 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008812:	2301      	movs	r3, #1
 8008814:	61bb      	str	r3, [r7, #24]
 8008816:	e002      	b.n	800881e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008818:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800881c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800881e:	69bb      	ldr	r3, [r7, #24]
	}
 8008820:	4618      	mov	r0, r3
 8008822:	3720      	adds	r7, #32
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b088      	sub	sp, #32
 800882c:	af00      	add	r7, sp, #0
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	607a      	str	r2, [r7, #4]
 8008834:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008838:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	461a      	mov	r2, r3
 8008840:	21a5      	movs	r1, #165	; 0xa5
 8008842:	f010 fef7 	bl	8019634 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008848:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800884a:	6879      	ldr	r1, [r7, #4]
 800884c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008850:	440b      	add	r3, r1
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	4413      	add	r3, r2
 8008856:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008858:	69bb      	ldr	r3, [r7, #24]
 800885a:	f023 0307 	bic.w	r3, r3, #7
 800885e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008860:	69bb      	ldr	r3, [r7, #24]
 8008862:	f003 0307 	and.w	r3, r3, #7
 8008866:	2b00      	cmp	r3, #0
 8008868:	d00c      	beq.n	8008884 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800886a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800886e:	b672      	cpsid	i
 8008870:	f383 8811 	msr	BASEPRI, r3
 8008874:	f3bf 8f6f 	isb	sy
 8008878:	f3bf 8f4f 	dsb	sy
 800887c:	b662      	cpsie	i
 800887e:	617b      	str	r3, [r7, #20]
}
 8008880:	bf00      	nop
 8008882:	e7fe      	b.n	8008882 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d01f      	beq.n	80088ca <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800888a:	2300      	movs	r3, #0
 800888c:	61fb      	str	r3, [r7, #28]
 800888e:	e012      	b.n	80088b6 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008890:	68ba      	ldr	r2, [r7, #8]
 8008892:	69fb      	ldr	r3, [r7, #28]
 8008894:	4413      	add	r3, r2
 8008896:	7819      	ldrb	r1, [r3, #0]
 8008898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800889a:	69fb      	ldr	r3, [r7, #28]
 800889c:	4413      	add	r3, r2
 800889e:	3334      	adds	r3, #52	; 0x34
 80088a0:	460a      	mov	r2, r1
 80088a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80088a4:	68ba      	ldr	r2, [r7, #8]
 80088a6:	69fb      	ldr	r3, [r7, #28]
 80088a8:	4413      	add	r3, r2
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d006      	beq.n	80088be <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80088b0:	69fb      	ldr	r3, [r7, #28]
 80088b2:	3301      	adds	r3, #1
 80088b4:	61fb      	str	r3, [r7, #28]
 80088b6:	69fb      	ldr	r3, [r7, #28]
 80088b8:	2b0f      	cmp	r3, #15
 80088ba:	d9e9      	bls.n	8008890 <prvInitialiseNewTask+0x68>
 80088bc:	e000      	b.n	80088c0 <prvInitialiseNewTask+0x98>
			{
				break;
 80088be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80088c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c2:	2200      	movs	r2, #0
 80088c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80088c8:	e003      	b.n	80088d2 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80088ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088cc:	2200      	movs	r2, #0
 80088ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80088d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d4:	2b37      	cmp	r3, #55	; 0x37
 80088d6:	d901      	bls.n	80088dc <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80088d8:	2337      	movs	r3, #55	; 0x37
 80088da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80088dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80088e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088e6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80088e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ea:	2200      	movs	r2, #0
 80088ec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80088ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f0:	3304      	adds	r3, #4
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7ff f952 	bl	8007b9c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80088f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088fa:	3318      	adds	r3, #24
 80088fc:	4618      	mov	r0, r3
 80088fe:	f7ff f94d 	bl	8007b9c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008906:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800890a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800890e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008910:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008916:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891a:	2200      	movs	r2, #0
 800891c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008922:	2200      	movs	r2, #0
 8008924:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892a:	3354      	adds	r3, #84	; 0x54
 800892c:	224c      	movs	r2, #76	; 0x4c
 800892e:	2100      	movs	r1, #0
 8008930:	4618      	mov	r0, r3
 8008932:	f010 fe7f 	bl	8019634 <memset>
 8008936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008938:	4a0c      	ldr	r2, [pc, #48]	; (800896c <prvInitialiseNewTask+0x144>)
 800893a:	659a      	str	r2, [r3, #88]	; 0x58
 800893c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800893e:	4a0c      	ldr	r2, [pc, #48]	; (8008970 <prvInitialiseNewTask+0x148>)
 8008940:	65da      	str	r2, [r3, #92]	; 0x5c
 8008942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008944:	4a0b      	ldr	r2, [pc, #44]	; (8008974 <prvInitialiseNewTask+0x14c>)
 8008946:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008948:	683a      	ldr	r2, [r7, #0]
 800894a:	68f9      	ldr	r1, [r7, #12]
 800894c:	69b8      	ldr	r0, [r7, #24]
 800894e:	f001 f993 	bl	8009c78 <pxPortInitialiseStack>
 8008952:	4602      	mov	r2, r0
 8008954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008956:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800895a:	2b00      	cmp	r3, #0
 800895c:	d002      	beq.n	8008964 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800895e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008962:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008964:	bf00      	nop
 8008966:	3720      	adds	r7, #32
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}
 800896c:	200109ec 	.word	0x200109ec
 8008970:	20010a54 	.word	0x20010a54
 8008974:	20010abc 	.word	0x20010abc

08008978 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008980:	f001 fa84 	bl	8009e8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008984:	4b2d      	ldr	r3, [pc, #180]	; (8008a3c <prvAddNewTaskToReadyList+0xc4>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	3301      	adds	r3, #1
 800898a:	4a2c      	ldr	r2, [pc, #176]	; (8008a3c <prvAddNewTaskToReadyList+0xc4>)
 800898c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800898e:	4b2c      	ldr	r3, [pc, #176]	; (8008a40 <prvAddNewTaskToReadyList+0xc8>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d109      	bne.n	80089aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008996:	4a2a      	ldr	r2, [pc, #168]	; (8008a40 <prvAddNewTaskToReadyList+0xc8>)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800899c:	4b27      	ldr	r3, [pc, #156]	; (8008a3c <prvAddNewTaskToReadyList+0xc4>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d110      	bne.n	80089c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80089a4:	f000 fc64 	bl	8009270 <prvInitialiseTaskLists>
 80089a8:	e00d      	b.n	80089c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80089aa:	4b26      	ldr	r3, [pc, #152]	; (8008a44 <prvAddNewTaskToReadyList+0xcc>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d109      	bne.n	80089c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80089b2:	4b23      	ldr	r3, [pc, #140]	; (8008a40 <prvAddNewTaskToReadyList+0xc8>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089bc:	429a      	cmp	r2, r3
 80089be:	d802      	bhi.n	80089c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80089c0:	4a1f      	ldr	r2, [pc, #124]	; (8008a40 <prvAddNewTaskToReadyList+0xc8>)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80089c6:	4b20      	ldr	r3, [pc, #128]	; (8008a48 <prvAddNewTaskToReadyList+0xd0>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	3301      	adds	r3, #1
 80089cc:	4a1e      	ldr	r2, [pc, #120]	; (8008a48 <prvAddNewTaskToReadyList+0xd0>)
 80089ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80089d0:	4b1d      	ldr	r3, [pc, #116]	; (8008a48 <prvAddNewTaskToReadyList+0xd0>)
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089dc:	4b1b      	ldr	r3, [pc, #108]	; (8008a4c <prvAddNewTaskToReadyList+0xd4>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d903      	bls.n	80089ec <prvAddNewTaskToReadyList+0x74>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e8:	4a18      	ldr	r2, [pc, #96]	; (8008a4c <prvAddNewTaskToReadyList+0xd4>)
 80089ea:	6013      	str	r3, [r2, #0]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089f0:	4613      	mov	r3, r2
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	4413      	add	r3, r2
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	4a15      	ldr	r2, [pc, #84]	; (8008a50 <prvAddNewTaskToReadyList+0xd8>)
 80089fa:	441a      	add	r2, r3
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	3304      	adds	r3, #4
 8008a00:	4619      	mov	r1, r3
 8008a02:	4610      	mov	r0, r2
 8008a04:	f7ff f8d7 	bl	8007bb6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008a08:	f001 fa74 	bl	8009ef4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008a0c:	4b0d      	ldr	r3, [pc, #52]	; (8008a44 <prvAddNewTaskToReadyList+0xcc>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d00e      	beq.n	8008a32 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008a14:	4b0a      	ldr	r3, [pc, #40]	; (8008a40 <prvAddNewTaskToReadyList+0xc8>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d207      	bcs.n	8008a32 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008a22:	4b0c      	ldr	r3, [pc, #48]	; (8008a54 <prvAddNewTaskToReadyList+0xdc>)
 8008a24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a28:	601a      	str	r2, [r3, #0]
 8008a2a:	f3bf 8f4f 	dsb	sy
 8008a2e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a32:	bf00      	nop
 8008a34:	3708      	adds	r7, #8
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop
 8008a3c:	20007bbc 	.word	0x20007bbc
 8008a40:	200076e8 	.word	0x200076e8
 8008a44:	20007bc8 	.word	0x20007bc8
 8008a48:	20007bd8 	.word	0x20007bd8
 8008a4c:	20007bc4 	.word	0x20007bc4
 8008a50:	200076ec 	.word	0x200076ec
 8008a54:	e000ed04 	.word	0xe000ed04

08008a58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b084      	sub	sp, #16
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008a60:	2300      	movs	r3, #0
 8008a62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d019      	beq.n	8008a9e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008a6a:	4b14      	ldr	r3, [pc, #80]	; (8008abc <vTaskDelay+0x64>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d00c      	beq.n	8008a8c <vTaskDelay+0x34>
	__asm volatile
 8008a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a76:	b672      	cpsid	i
 8008a78:	f383 8811 	msr	BASEPRI, r3
 8008a7c:	f3bf 8f6f 	isb	sy
 8008a80:	f3bf 8f4f 	dsb	sy
 8008a84:	b662      	cpsie	i
 8008a86:	60bb      	str	r3, [r7, #8]
}
 8008a88:	bf00      	nop
 8008a8a:	e7fe      	b.n	8008a8a <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008a8c:	f000 f88e 	bl	8008bac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008a90:	2100      	movs	r1, #0
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 fd40 	bl	8009518 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008a98:	f000 f896 	bl	8008bc8 <xTaskResumeAll>
 8008a9c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d107      	bne.n	8008ab4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8008aa4:	4b06      	ldr	r3, [pc, #24]	; (8008ac0 <vTaskDelay+0x68>)
 8008aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008aaa:	601a      	str	r2, [r3, #0]
 8008aac:	f3bf 8f4f 	dsb	sy
 8008ab0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008ab4:	bf00      	nop
 8008ab6:	3710      	adds	r7, #16
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	20007be4 	.word	0x20007be4
 8008ac0:	e000ed04 	.word	0xe000ed04

08008ac4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b08a      	sub	sp, #40	; 0x28
 8008ac8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008aca:	2300      	movs	r3, #0
 8008acc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008ad2:	463a      	mov	r2, r7
 8008ad4:	1d39      	adds	r1, r7, #4
 8008ad6:	f107 0308 	add.w	r3, r7, #8
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7ff f80a 	bl	8007af4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008ae0:	6839      	ldr	r1, [r7, #0]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	68ba      	ldr	r2, [r7, #8]
 8008ae6:	9202      	str	r2, [sp, #8]
 8008ae8:	9301      	str	r3, [sp, #4]
 8008aea:	2300      	movs	r3, #0
 8008aec:	9300      	str	r3, [sp, #0]
 8008aee:	2300      	movs	r3, #0
 8008af0:	460a      	mov	r2, r1
 8008af2:	4926      	ldr	r1, [pc, #152]	; (8008b8c <vTaskStartScheduler+0xc8>)
 8008af4:	4826      	ldr	r0, [pc, #152]	; (8008b90 <vTaskStartScheduler+0xcc>)
 8008af6:	f7ff fdef 	bl	80086d8 <xTaskCreateStatic>
 8008afa:	4603      	mov	r3, r0
 8008afc:	4a25      	ldr	r2, [pc, #148]	; (8008b94 <vTaskStartScheduler+0xd0>)
 8008afe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008b00:	4b24      	ldr	r3, [pc, #144]	; (8008b94 <vTaskStartScheduler+0xd0>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d002      	beq.n	8008b0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	617b      	str	r3, [r7, #20]
 8008b0c:	e001      	b.n	8008b12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d102      	bne.n	8008b1e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008b18:	f000 fd52 	bl	80095c0 <xTimerCreateTimerTask>
 8008b1c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d11d      	bne.n	8008b60 <vTaskStartScheduler+0x9c>
	__asm volatile
 8008b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b28:	b672      	cpsid	i
 8008b2a:	f383 8811 	msr	BASEPRI, r3
 8008b2e:	f3bf 8f6f 	isb	sy
 8008b32:	f3bf 8f4f 	dsb	sy
 8008b36:	b662      	cpsie	i
 8008b38:	613b      	str	r3, [r7, #16]
}
 8008b3a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008b3c:	4b16      	ldr	r3, [pc, #88]	; (8008b98 <vTaskStartScheduler+0xd4>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	3354      	adds	r3, #84	; 0x54
 8008b42:	4a16      	ldr	r2, [pc, #88]	; (8008b9c <vTaskStartScheduler+0xd8>)
 8008b44:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008b46:	4b16      	ldr	r3, [pc, #88]	; (8008ba0 <vTaskStartScheduler+0xdc>)
 8008b48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b4c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008b4e:	4b15      	ldr	r3, [pc, #84]	; (8008ba4 <vTaskStartScheduler+0xe0>)
 8008b50:	2201      	movs	r2, #1
 8008b52:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008b54:	4b14      	ldr	r3, [pc, #80]	; (8008ba8 <vTaskStartScheduler+0xe4>)
 8008b56:	2200      	movs	r2, #0
 8008b58:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008b5a:	f001 f919 	bl	8009d90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008b5e:	e010      	b.n	8008b82 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b66:	d10c      	bne.n	8008b82 <vTaskStartScheduler+0xbe>
	__asm volatile
 8008b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b6c:	b672      	cpsid	i
 8008b6e:	f383 8811 	msr	BASEPRI, r3
 8008b72:	f3bf 8f6f 	isb	sy
 8008b76:	f3bf 8f4f 	dsb	sy
 8008b7a:	b662      	cpsie	i
 8008b7c:	60fb      	str	r3, [r7, #12]
}
 8008b7e:	bf00      	nop
 8008b80:	e7fe      	b.n	8008b80 <vTaskStartScheduler+0xbc>
}
 8008b82:	bf00      	nop
 8008b84:	3718      	adds	r7, #24
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	0801a690 	.word	0x0801a690
 8008b90:	08009241 	.word	0x08009241
 8008b94:	20007be0 	.word	0x20007be0
 8008b98:	200076e8 	.word	0x200076e8
 8008b9c:	20002138 	.word	0x20002138
 8008ba0:	20007bdc 	.word	0x20007bdc
 8008ba4:	20007bc8 	.word	0x20007bc8
 8008ba8:	20007bc0 	.word	0x20007bc0

08008bac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008bac:	b480      	push	{r7}
 8008bae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008bb0:	4b04      	ldr	r3, [pc, #16]	; (8008bc4 <vTaskSuspendAll+0x18>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	4a03      	ldr	r2, [pc, #12]	; (8008bc4 <vTaskSuspendAll+0x18>)
 8008bb8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008bba:	bf00      	nop
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr
 8008bc4:	20007be4 	.word	0x20007be4

08008bc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b084      	sub	sp, #16
 8008bcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008bd6:	4b43      	ldr	r3, [pc, #268]	; (8008ce4 <xTaskResumeAll+0x11c>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d10c      	bne.n	8008bf8 <xTaskResumeAll+0x30>
	__asm volatile
 8008bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be2:	b672      	cpsid	i
 8008be4:	f383 8811 	msr	BASEPRI, r3
 8008be8:	f3bf 8f6f 	isb	sy
 8008bec:	f3bf 8f4f 	dsb	sy
 8008bf0:	b662      	cpsie	i
 8008bf2:	603b      	str	r3, [r7, #0]
}
 8008bf4:	bf00      	nop
 8008bf6:	e7fe      	b.n	8008bf6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008bf8:	f001 f948 	bl	8009e8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008bfc:	4b39      	ldr	r3, [pc, #228]	; (8008ce4 <xTaskResumeAll+0x11c>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	3b01      	subs	r3, #1
 8008c02:	4a38      	ldr	r2, [pc, #224]	; (8008ce4 <xTaskResumeAll+0x11c>)
 8008c04:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c06:	4b37      	ldr	r3, [pc, #220]	; (8008ce4 <xTaskResumeAll+0x11c>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d162      	bne.n	8008cd4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008c0e:	4b36      	ldr	r3, [pc, #216]	; (8008ce8 <xTaskResumeAll+0x120>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d05e      	beq.n	8008cd4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c16:	e02f      	b.n	8008c78 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c18:	4b34      	ldr	r3, [pc, #208]	; (8008cec <xTaskResumeAll+0x124>)
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	68db      	ldr	r3, [r3, #12]
 8008c1e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	3318      	adds	r3, #24
 8008c24:	4618      	mov	r0, r3
 8008c26:	f7ff f823 	bl	8007c70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	3304      	adds	r3, #4
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f7ff f81e 	bl	8007c70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c38:	4b2d      	ldr	r3, [pc, #180]	; (8008cf0 <xTaskResumeAll+0x128>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d903      	bls.n	8008c48 <xTaskResumeAll+0x80>
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c44:	4a2a      	ldr	r2, [pc, #168]	; (8008cf0 <xTaskResumeAll+0x128>)
 8008c46:	6013      	str	r3, [r2, #0]
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c4c:	4613      	mov	r3, r2
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	4413      	add	r3, r2
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	4a27      	ldr	r2, [pc, #156]	; (8008cf4 <xTaskResumeAll+0x12c>)
 8008c56:	441a      	add	r2, r3
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	3304      	adds	r3, #4
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	4610      	mov	r0, r2
 8008c60:	f7fe ffa9 	bl	8007bb6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c68:	4b23      	ldr	r3, [pc, #140]	; (8008cf8 <xTaskResumeAll+0x130>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d302      	bcc.n	8008c78 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8008c72:	4b22      	ldr	r3, [pc, #136]	; (8008cfc <xTaskResumeAll+0x134>)
 8008c74:	2201      	movs	r2, #1
 8008c76:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c78:	4b1c      	ldr	r3, [pc, #112]	; (8008cec <xTaskResumeAll+0x124>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d1cb      	bne.n	8008c18 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d001      	beq.n	8008c8a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008c86:	f000 fb97 	bl	80093b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008c8a:	4b1d      	ldr	r3, [pc, #116]	; (8008d00 <xTaskResumeAll+0x138>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d010      	beq.n	8008cb8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008c96:	f000 f847 	bl	8008d28 <xTaskIncrementTick>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d002      	beq.n	8008ca6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8008ca0:	4b16      	ldr	r3, [pc, #88]	; (8008cfc <xTaskResumeAll+0x134>)
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	3b01      	subs	r3, #1
 8008caa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d1f1      	bne.n	8008c96 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8008cb2:	4b13      	ldr	r3, [pc, #76]	; (8008d00 <xTaskResumeAll+0x138>)
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008cb8:	4b10      	ldr	r3, [pc, #64]	; (8008cfc <xTaskResumeAll+0x134>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d009      	beq.n	8008cd4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008cc4:	4b0f      	ldr	r3, [pc, #60]	; (8008d04 <xTaskResumeAll+0x13c>)
 8008cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cca:	601a      	str	r2, [r3, #0]
 8008ccc:	f3bf 8f4f 	dsb	sy
 8008cd0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008cd4:	f001 f90e 	bl	8009ef4 <vPortExitCritical>

	return xAlreadyYielded;
 8008cd8:	68bb      	ldr	r3, [r7, #8]
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3710      	adds	r7, #16
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	20007be4 	.word	0x20007be4
 8008ce8:	20007bbc 	.word	0x20007bbc
 8008cec:	20007b7c 	.word	0x20007b7c
 8008cf0:	20007bc4 	.word	0x20007bc4
 8008cf4:	200076ec 	.word	0x200076ec
 8008cf8:	200076e8 	.word	0x200076e8
 8008cfc:	20007bd0 	.word	0x20007bd0
 8008d00:	20007bcc 	.word	0x20007bcc
 8008d04:	e000ed04 	.word	0xe000ed04

08008d08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b083      	sub	sp, #12
 8008d0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008d0e:	4b05      	ldr	r3, [pc, #20]	; (8008d24 <xTaskGetTickCount+0x1c>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008d14:	687b      	ldr	r3, [r7, #4]
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	370c      	adds	r7, #12
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr
 8008d22:	bf00      	nop
 8008d24:	20007bc0 	.word	0x20007bc0

08008d28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b086      	sub	sp, #24
 8008d2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d32:	4b50      	ldr	r3, [pc, #320]	; (8008e74 <xTaskIncrementTick+0x14c>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	f040 808b 	bne.w	8008e52 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008d3c:	4b4e      	ldr	r3, [pc, #312]	; (8008e78 <xTaskIncrementTick+0x150>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	3301      	adds	r3, #1
 8008d42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008d44:	4a4c      	ldr	r2, [pc, #304]	; (8008e78 <xTaskIncrementTick+0x150>)
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d122      	bne.n	8008d96 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008d50:	4b4a      	ldr	r3, [pc, #296]	; (8008e7c <xTaskIncrementTick+0x154>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00c      	beq.n	8008d74 <xTaskIncrementTick+0x4c>
	__asm volatile
 8008d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d5e:	b672      	cpsid	i
 8008d60:	f383 8811 	msr	BASEPRI, r3
 8008d64:	f3bf 8f6f 	isb	sy
 8008d68:	f3bf 8f4f 	dsb	sy
 8008d6c:	b662      	cpsie	i
 8008d6e:	603b      	str	r3, [r7, #0]
}
 8008d70:	bf00      	nop
 8008d72:	e7fe      	b.n	8008d72 <xTaskIncrementTick+0x4a>
 8008d74:	4b41      	ldr	r3, [pc, #260]	; (8008e7c <xTaskIncrementTick+0x154>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	60fb      	str	r3, [r7, #12]
 8008d7a:	4b41      	ldr	r3, [pc, #260]	; (8008e80 <xTaskIncrementTick+0x158>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a3f      	ldr	r2, [pc, #252]	; (8008e7c <xTaskIncrementTick+0x154>)
 8008d80:	6013      	str	r3, [r2, #0]
 8008d82:	4a3f      	ldr	r2, [pc, #252]	; (8008e80 <xTaskIncrementTick+0x158>)
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	6013      	str	r3, [r2, #0]
 8008d88:	4b3e      	ldr	r3, [pc, #248]	; (8008e84 <xTaskIncrementTick+0x15c>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	4a3d      	ldr	r2, [pc, #244]	; (8008e84 <xTaskIncrementTick+0x15c>)
 8008d90:	6013      	str	r3, [r2, #0]
 8008d92:	f000 fb11 	bl	80093b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008d96:	4b3c      	ldr	r3, [pc, #240]	; (8008e88 <xTaskIncrementTick+0x160>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	693a      	ldr	r2, [r7, #16]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d349      	bcc.n	8008e34 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008da0:	4b36      	ldr	r3, [pc, #216]	; (8008e7c <xTaskIncrementTick+0x154>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d104      	bne.n	8008db4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008daa:	4b37      	ldr	r3, [pc, #220]	; (8008e88 <xTaskIncrementTick+0x160>)
 8008dac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008db0:	601a      	str	r2, [r3, #0]
					break;
 8008db2:	e03f      	b.n	8008e34 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008db4:	4b31      	ldr	r3, [pc, #196]	; (8008e7c <xTaskIncrementTick+0x154>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	68db      	ldr	r3, [r3, #12]
 8008dba:	68db      	ldr	r3, [r3, #12]
 8008dbc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008dc4:	693a      	ldr	r2, [r7, #16]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d203      	bcs.n	8008dd4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008dcc:	4a2e      	ldr	r2, [pc, #184]	; (8008e88 <xTaskIncrementTick+0x160>)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008dd2:	e02f      	b.n	8008e34 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	3304      	adds	r3, #4
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7fe ff49 	bl	8007c70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d004      	beq.n	8008df0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	3318      	adds	r3, #24
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7fe ff40 	bl	8007c70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008df4:	4b25      	ldr	r3, [pc, #148]	; (8008e8c <xTaskIncrementTick+0x164>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d903      	bls.n	8008e04 <xTaskIncrementTick+0xdc>
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e00:	4a22      	ldr	r2, [pc, #136]	; (8008e8c <xTaskIncrementTick+0x164>)
 8008e02:	6013      	str	r3, [r2, #0]
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e08:	4613      	mov	r3, r2
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	4413      	add	r3, r2
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	4a1f      	ldr	r2, [pc, #124]	; (8008e90 <xTaskIncrementTick+0x168>)
 8008e12:	441a      	add	r2, r3
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	3304      	adds	r3, #4
 8008e18:	4619      	mov	r1, r3
 8008e1a:	4610      	mov	r0, r2
 8008e1c:	f7fe fecb 	bl	8007bb6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e24:	4b1b      	ldr	r3, [pc, #108]	; (8008e94 <xTaskIncrementTick+0x16c>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d3b8      	bcc.n	8008da0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e32:	e7b5      	b.n	8008da0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008e34:	4b17      	ldr	r3, [pc, #92]	; (8008e94 <xTaskIncrementTick+0x16c>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e3a:	4915      	ldr	r1, [pc, #84]	; (8008e90 <xTaskIncrementTick+0x168>)
 8008e3c:	4613      	mov	r3, r2
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	4413      	add	r3, r2
 8008e42:	009b      	lsls	r3, r3, #2
 8008e44:	440b      	add	r3, r1
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d907      	bls.n	8008e5c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	617b      	str	r3, [r7, #20]
 8008e50:	e004      	b.n	8008e5c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008e52:	4b11      	ldr	r3, [pc, #68]	; (8008e98 <xTaskIncrementTick+0x170>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	3301      	adds	r3, #1
 8008e58:	4a0f      	ldr	r2, [pc, #60]	; (8008e98 <xTaskIncrementTick+0x170>)
 8008e5a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008e5c:	4b0f      	ldr	r3, [pc, #60]	; (8008e9c <xTaskIncrementTick+0x174>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d001      	beq.n	8008e68 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8008e64:	2301      	movs	r3, #1
 8008e66:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008e68:	697b      	ldr	r3, [r7, #20]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3718      	adds	r7, #24
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	20007be4 	.word	0x20007be4
 8008e78:	20007bc0 	.word	0x20007bc0
 8008e7c:	20007b74 	.word	0x20007b74
 8008e80:	20007b78 	.word	0x20007b78
 8008e84:	20007bd4 	.word	0x20007bd4
 8008e88:	20007bdc 	.word	0x20007bdc
 8008e8c:	20007bc4 	.word	0x20007bc4
 8008e90:	200076ec 	.word	0x200076ec
 8008e94:	200076e8 	.word	0x200076e8
 8008e98:	20007bcc 	.word	0x20007bcc
 8008e9c:	20007bd0 	.word	0x20007bd0

08008ea0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b085      	sub	sp, #20
 8008ea4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008ea6:	4b2b      	ldr	r3, [pc, #172]	; (8008f54 <vTaskSwitchContext+0xb4>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d003      	beq.n	8008eb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008eae:	4b2a      	ldr	r3, [pc, #168]	; (8008f58 <vTaskSwitchContext+0xb8>)
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008eb4:	e048      	b.n	8008f48 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8008eb6:	4b28      	ldr	r3, [pc, #160]	; (8008f58 <vTaskSwitchContext+0xb8>)
 8008eb8:	2200      	movs	r2, #0
 8008eba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ebc:	4b27      	ldr	r3, [pc, #156]	; (8008f5c <vTaskSwitchContext+0xbc>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	60fb      	str	r3, [r7, #12]
 8008ec2:	e012      	b.n	8008eea <vTaskSwitchContext+0x4a>
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d10c      	bne.n	8008ee4 <vTaskSwitchContext+0x44>
	__asm volatile
 8008eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ece:	b672      	cpsid	i
 8008ed0:	f383 8811 	msr	BASEPRI, r3
 8008ed4:	f3bf 8f6f 	isb	sy
 8008ed8:	f3bf 8f4f 	dsb	sy
 8008edc:	b662      	cpsie	i
 8008ede:	607b      	str	r3, [r7, #4]
}
 8008ee0:	bf00      	nop
 8008ee2:	e7fe      	b.n	8008ee2 <vTaskSwitchContext+0x42>
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	3b01      	subs	r3, #1
 8008ee8:	60fb      	str	r3, [r7, #12]
 8008eea:	491d      	ldr	r1, [pc, #116]	; (8008f60 <vTaskSwitchContext+0xc0>)
 8008eec:	68fa      	ldr	r2, [r7, #12]
 8008eee:	4613      	mov	r3, r2
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	4413      	add	r3, r2
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	440b      	add	r3, r1
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d0e2      	beq.n	8008ec4 <vTaskSwitchContext+0x24>
 8008efe:	68fa      	ldr	r2, [r7, #12]
 8008f00:	4613      	mov	r3, r2
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	4413      	add	r3, r2
 8008f06:	009b      	lsls	r3, r3, #2
 8008f08:	4a15      	ldr	r2, [pc, #84]	; (8008f60 <vTaskSwitchContext+0xc0>)
 8008f0a:	4413      	add	r3, r2
 8008f0c:	60bb      	str	r3, [r7, #8]
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	685a      	ldr	r2, [r3, #4]
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	605a      	str	r2, [r3, #4]
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	685a      	ldr	r2, [r3, #4]
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	3308      	adds	r3, #8
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d104      	bne.n	8008f2e <vTaskSwitchContext+0x8e>
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	685a      	ldr	r2, [r3, #4]
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	605a      	str	r2, [r3, #4]
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	68db      	ldr	r3, [r3, #12]
 8008f34:	4a0b      	ldr	r2, [pc, #44]	; (8008f64 <vTaskSwitchContext+0xc4>)
 8008f36:	6013      	str	r3, [r2, #0]
 8008f38:	4a08      	ldr	r2, [pc, #32]	; (8008f5c <vTaskSwitchContext+0xbc>)
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008f3e:	4b09      	ldr	r3, [pc, #36]	; (8008f64 <vTaskSwitchContext+0xc4>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	3354      	adds	r3, #84	; 0x54
 8008f44:	4a08      	ldr	r2, [pc, #32]	; (8008f68 <vTaskSwitchContext+0xc8>)
 8008f46:	6013      	str	r3, [r2, #0]
}
 8008f48:	bf00      	nop
 8008f4a:	3714      	adds	r7, #20
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr
 8008f54:	20007be4 	.word	0x20007be4
 8008f58:	20007bd0 	.word	0x20007bd0
 8008f5c:	20007bc4 	.word	0x20007bc4
 8008f60:	200076ec 	.word	0x200076ec
 8008f64:	200076e8 	.word	0x200076e8
 8008f68:	20002138 	.word	0x20002138

08008f6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b084      	sub	sp, #16
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d10c      	bne.n	8008f96 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8008f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f80:	b672      	cpsid	i
 8008f82:	f383 8811 	msr	BASEPRI, r3
 8008f86:	f3bf 8f6f 	isb	sy
 8008f8a:	f3bf 8f4f 	dsb	sy
 8008f8e:	b662      	cpsie	i
 8008f90:	60fb      	str	r3, [r7, #12]
}
 8008f92:	bf00      	nop
 8008f94:	e7fe      	b.n	8008f94 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f96:	4b07      	ldr	r3, [pc, #28]	; (8008fb4 <vTaskPlaceOnEventList+0x48>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	3318      	adds	r3, #24
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f7fe fe2d 	bl	8007bfe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008fa4:	2101      	movs	r1, #1
 8008fa6:	6838      	ldr	r0, [r7, #0]
 8008fa8:	f000 fab6 	bl	8009518 <prvAddCurrentTaskToDelayedList>
}
 8008fac:	bf00      	nop
 8008fae:	3710      	adds	r7, #16
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}
 8008fb4:	200076e8 	.word	0x200076e8

08008fb8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b086      	sub	sp, #24
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	60b9      	str	r1, [r7, #8]
 8008fc2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d10c      	bne.n	8008fe4 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8008fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fce:	b672      	cpsid	i
 8008fd0:	f383 8811 	msr	BASEPRI, r3
 8008fd4:	f3bf 8f6f 	isb	sy
 8008fd8:	f3bf 8f4f 	dsb	sy
 8008fdc:	b662      	cpsie	i
 8008fde:	617b      	str	r3, [r7, #20]
}
 8008fe0:	bf00      	nop
 8008fe2:	e7fe      	b.n	8008fe2 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008fe4:	4b0a      	ldr	r3, [pc, #40]	; (8009010 <vTaskPlaceOnEventListRestricted+0x58>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	3318      	adds	r3, #24
 8008fea:	4619      	mov	r1, r3
 8008fec:	68f8      	ldr	r0, [r7, #12]
 8008fee:	f7fe fde2 	bl	8007bb6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d002      	beq.n	8008ffe <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8008ff8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ffc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008ffe:	6879      	ldr	r1, [r7, #4]
 8009000:	68b8      	ldr	r0, [r7, #8]
 8009002:	f000 fa89 	bl	8009518 <prvAddCurrentTaskToDelayedList>
	}
 8009006:	bf00      	nop
 8009008:	3718      	adds	r7, #24
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
 800900e:	bf00      	nop
 8009010:	200076e8 	.word	0x200076e8

08009014 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b086      	sub	sp, #24
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	68db      	ldr	r3, [r3, #12]
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d10c      	bne.n	8009044 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800902a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800902e:	b672      	cpsid	i
 8009030:	f383 8811 	msr	BASEPRI, r3
 8009034:	f3bf 8f6f 	isb	sy
 8009038:	f3bf 8f4f 	dsb	sy
 800903c:	b662      	cpsie	i
 800903e:	60fb      	str	r3, [r7, #12]
}
 8009040:	bf00      	nop
 8009042:	e7fe      	b.n	8009042 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	3318      	adds	r3, #24
 8009048:	4618      	mov	r0, r3
 800904a:	f7fe fe11 	bl	8007c70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800904e:	4b1e      	ldr	r3, [pc, #120]	; (80090c8 <xTaskRemoveFromEventList+0xb4>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d11d      	bne.n	8009092 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	3304      	adds	r3, #4
 800905a:	4618      	mov	r0, r3
 800905c:	f7fe fe08 	bl	8007c70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009064:	4b19      	ldr	r3, [pc, #100]	; (80090cc <xTaskRemoveFromEventList+0xb8>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	429a      	cmp	r2, r3
 800906a:	d903      	bls.n	8009074 <xTaskRemoveFromEventList+0x60>
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009070:	4a16      	ldr	r2, [pc, #88]	; (80090cc <xTaskRemoveFromEventList+0xb8>)
 8009072:	6013      	str	r3, [r2, #0]
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009078:	4613      	mov	r3, r2
 800907a:	009b      	lsls	r3, r3, #2
 800907c:	4413      	add	r3, r2
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	4a13      	ldr	r2, [pc, #76]	; (80090d0 <xTaskRemoveFromEventList+0xbc>)
 8009082:	441a      	add	r2, r3
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	3304      	adds	r3, #4
 8009088:	4619      	mov	r1, r3
 800908a:	4610      	mov	r0, r2
 800908c:	f7fe fd93 	bl	8007bb6 <vListInsertEnd>
 8009090:	e005      	b.n	800909e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	3318      	adds	r3, #24
 8009096:	4619      	mov	r1, r3
 8009098:	480e      	ldr	r0, [pc, #56]	; (80090d4 <xTaskRemoveFromEventList+0xc0>)
 800909a:	f7fe fd8c 	bl	8007bb6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090a2:	4b0d      	ldr	r3, [pc, #52]	; (80090d8 <xTaskRemoveFromEventList+0xc4>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d905      	bls.n	80090b8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80090ac:	2301      	movs	r3, #1
 80090ae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80090b0:	4b0a      	ldr	r3, [pc, #40]	; (80090dc <xTaskRemoveFromEventList+0xc8>)
 80090b2:	2201      	movs	r2, #1
 80090b4:	601a      	str	r2, [r3, #0]
 80090b6:	e001      	b.n	80090bc <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80090b8:	2300      	movs	r3, #0
 80090ba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80090bc:	697b      	ldr	r3, [r7, #20]
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3718      	adds	r7, #24
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	bf00      	nop
 80090c8:	20007be4 	.word	0x20007be4
 80090cc:	20007bc4 	.word	0x20007bc4
 80090d0:	200076ec 	.word	0x200076ec
 80090d4:	20007b7c 	.word	0x20007b7c
 80090d8:	200076e8 	.word	0x200076e8
 80090dc:	20007bd0 	.word	0x20007bd0

080090e0 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b084      	sub	sp, #16
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d10c      	bne.n	8009108 <vTaskSetTimeOutState+0x28>
	__asm volatile
 80090ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f2:	b672      	cpsid	i
 80090f4:	f383 8811 	msr	BASEPRI, r3
 80090f8:	f3bf 8f6f 	isb	sy
 80090fc:	f3bf 8f4f 	dsb	sy
 8009100:	b662      	cpsie	i
 8009102:	60fb      	str	r3, [r7, #12]
}
 8009104:	bf00      	nop
 8009106:	e7fe      	b.n	8009106 <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 8009108:	f000 fec0 	bl	8009e8c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800910c:	4b06      	ldr	r3, [pc, #24]	; (8009128 <vTaskSetTimeOutState+0x48>)
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8009114:	4b05      	ldr	r3, [pc, #20]	; (800912c <vTaskSetTimeOutState+0x4c>)
 8009116:	681a      	ldr	r2, [r3, #0]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800911c:	f000 feea 	bl	8009ef4 <vPortExitCritical>
}
 8009120:	bf00      	nop
 8009122:	3710      	adds	r7, #16
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}
 8009128:	20007bd4 	.word	0x20007bd4
 800912c:	20007bc0 	.word	0x20007bc0

08009130 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009130:	b480      	push	{r7}
 8009132:	b083      	sub	sp, #12
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009138:	4b06      	ldr	r3, [pc, #24]	; (8009154 <vTaskInternalSetTimeOutState+0x24>)
 800913a:	681a      	ldr	r2, [r3, #0]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009140:	4b05      	ldr	r3, [pc, #20]	; (8009158 <vTaskInternalSetTimeOutState+0x28>)
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	605a      	str	r2, [r3, #4]
}
 8009148:	bf00      	nop
 800914a:	370c      	adds	r7, #12
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr
 8009154:	20007bd4 	.word	0x20007bd4
 8009158:	20007bc0 	.word	0x20007bc0

0800915c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b088      	sub	sp, #32
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d10c      	bne.n	8009186 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800916c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009170:	b672      	cpsid	i
 8009172:	f383 8811 	msr	BASEPRI, r3
 8009176:	f3bf 8f6f 	isb	sy
 800917a:	f3bf 8f4f 	dsb	sy
 800917e:	b662      	cpsie	i
 8009180:	613b      	str	r3, [r7, #16]
}
 8009182:	bf00      	nop
 8009184:	e7fe      	b.n	8009184 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d10c      	bne.n	80091a6 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800918c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009190:	b672      	cpsid	i
 8009192:	f383 8811 	msr	BASEPRI, r3
 8009196:	f3bf 8f6f 	isb	sy
 800919a:	f3bf 8f4f 	dsb	sy
 800919e:	b662      	cpsie	i
 80091a0:	60fb      	str	r3, [r7, #12]
}
 80091a2:	bf00      	nop
 80091a4:	e7fe      	b.n	80091a4 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80091a6:	f000 fe71 	bl	8009e8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80091aa:	4b1d      	ldr	r3, [pc, #116]	; (8009220 <xTaskCheckForTimeOut+0xc4>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	69ba      	ldr	r2, [r7, #24]
 80091b6:	1ad3      	subs	r3, r2, r3
 80091b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091c2:	d102      	bne.n	80091ca <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80091c4:	2300      	movs	r3, #0
 80091c6:	61fb      	str	r3, [r7, #28]
 80091c8:	e023      	b.n	8009212 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681a      	ldr	r2, [r3, #0]
 80091ce:	4b15      	ldr	r3, [pc, #84]	; (8009224 <xTaskCheckForTimeOut+0xc8>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d007      	beq.n	80091e6 <xTaskCheckForTimeOut+0x8a>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	69ba      	ldr	r2, [r7, #24]
 80091dc:	429a      	cmp	r2, r3
 80091de:	d302      	bcc.n	80091e6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80091e0:	2301      	movs	r3, #1
 80091e2:	61fb      	str	r3, [r7, #28]
 80091e4:	e015      	b.n	8009212 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	697a      	ldr	r2, [r7, #20]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d20b      	bcs.n	8009208 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	1ad2      	subs	r2, r2, r3
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f7ff ff97 	bl	8009130 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009202:	2300      	movs	r3, #0
 8009204:	61fb      	str	r3, [r7, #28]
 8009206:	e004      	b.n	8009212 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	2200      	movs	r2, #0
 800920c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800920e:	2301      	movs	r3, #1
 8009210:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009212:	f000 fe6f 	bl	8009ef4 <vPortExitCritical>

	return xReturn;
 8009216:	69fb      	ldr	r3, [r7, #28]
}
 8009218:	4618      	mov	r0, r3
 800921a:	3720      	adds	r7, #32
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}
 8009220:	20007bc0 	.word	0x20007bc0
 8009224:	20007bd4 	.word	0x20007bd4

08009228 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009228:	b480      	push	{r7}
 800922a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800922c:	4b03      	ldr	r3, [pc, #12]	; (800923c <vTaskMissedYield+0x14>)
 800922e:	2201      	movs	r2, #1
 8009230:	601a      	str	r2, [r3, #0]
}
 8009232:	bf00      	nop
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr
 800923c:	20007bd0 	.word	0x20007bd0

08009240 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b082      	sub	sp, #8
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009248:	f000 f852 	bl	80092f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800924c:	4b06      	ldr	r3, [pc, #24]	; (8009268 <prvIdleTask+0x28>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	2b01      	cmp	r3, #1
 8009252:	d9f9      	bls.n	8009248 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009254:	4b05      	ldr	r3, [pc, #20]	; (800926c <prvIdleTask+0x2c>)
 8009256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800925a:	601a      	str	r2, [r3, #0]
 800925c:	f3bf 8f4f 	dsb	sy
 8009260:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009264:	e7f0      	b.n	8009248 <prvIdleTask+0x8>
 8009266:	bf00      	nop
 8009268:	200076ec 	.word	0x200076ec
 800926c:	e000ed04 	.word	0xe000ed04

08009270 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009276:	2300      	movs	r3, #0
 8009278:	607b      	str	r3, [r7, #4]
 800927a:	e00c      	b.n	8009296 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	4613      	mov	r3, r2
 8009280:	009b      	lsls	r3, r3, #2
 8009282:	4413      	add	r3, r2
 8009284:	009b      	lsls	r3, r3, #2
 8009286:	4a12      	ldr	r2, [pc, #72]	; (80092d0 <prvInitialiseTaskLists+0x60>)
 8009288:	4413      	add	r3, r2
 800928a:	4618      	mov	r0, r3
 800928c:	f7fe fc66 	bl	8007b5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	3301      	adds	r3, #1
 8009294:	607b      	str	r3, [r7, #4]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2b37      	cmp	r3, #55	; 0x37
 800929a:	d9ef      	bls.n	800927c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800929c:	480d      	ldr	r0, [pc, #52]	; (80092d4 <prvInitialiseTaskLists+0x64>)
 800929e:	f7fe fc5d 	bl	8007b5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80092a2:	480d      	ldr	r0, [pc, #52]	; (80092d8 <prvInitialiseTaskLists+0x68>)
 80092a4:	f7fe fc5a 	bl	8007b5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80092a8:	480c      	ldr	r0, [pc, #48]	; (80092dc <prvInitialiseTaskLists+0x6c>)
 80092aa:	f7fe fc57 	bl	8007b5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80092ae:	480c      	ldr	r0, [pc, #48]	; (80092e0 <prvInitialiseTaskLists+0x70>)
 80092b0:	f7fe fc54 	bl	8007b5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80092b4:	480b      	ldr	r0, [pc, #44]	; (80092e4 <prvInitialiseTaskLists+0x74>)
 80092b6:	f7fe fc51 	bl	8007b5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80092ba:	4b0b      	ldr	r3, [pc, #44]	; (80092e8 <prvInitialiseTaskLists+0x78>)
 80092bc:	4a05      	ldr	r2, [pc, #20]	; (80092d4 <prvInitialiseTaskLists+0x64>)
 80092be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80092c0:	4b0a      	ldr	r3, [pc, #40]	; (80092ec <prvInitialiseTaskLists+0x7c>)
 80092c2:	4a05      	ldr	r2, [pc, #20]	; (80092d8 <prvInitialiseTaskLists+0x68>)
 80092c4:	601a      	str	r2, [r3, #0]
}
 80092c6:	bf00      	nop
 80092c8:	3708      	adds	r7, #8
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	200076ec 	.word	0x200076ec
 80092d4:	20007b4c 	.word	0x20007b4c
 80092d8:	20007b60 	.word	0x20007b60
 80092dc:	20007b7c 	.word	0x20007b7c
 80092e0:	20007b90 	.word	0x20007b90
 80092e4:	20007ba8 	.word	0x20007ba8
 80092e8:	20007b74 	.word	0x20007b74
 80092ec:	20007b78 	.word	0x20007b78

080092f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80092f6:	e019      	b.n	800932c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80092f8:	f000 fdc8 	bl	8009e8c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092fc:	4b10      	ldr	r3, [pc, #64]	; (8009340 <prvCheckTasksWaitingTermination+0x50>)
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	3304      	adds	r3, #4
 8009308:	4618      	mov	r0, r3
 800930a:	f7fe fcb1 	bl	8007c70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800930e:	4b0d      	ldr	r3, [pc, #52]	; (8009344 <prvCheckTasksWaitingTermination+0x54>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	3b01      	subs	r3, #1
 8009314:	4a0b      	ldr	r2, [pc, #44]	; (8009344 <prvCheckTasksWaitingTermination+0x54>)
 8009316:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009318:	4b0b      	ldr	r3, [pc, #44]	; (8009348 <prvCheckTasksWaitingTermination+0x58>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	3b01      	subs	r3, #1
 800931e:	4a0a      	ldr	r2, [pc, #40]	; (8009348 <prvCheckTasksWaitingTermination+0x58>)
 8009320:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009322:	f000 fde7 	bl	8009ef4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 f810 	bl	800934c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800932c:	4b06      	ldr	r3, [pc, #24]	; (8009348 <prvCheckTasksWaitingTermination+0x58>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d1e1      	bne.n	80092f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009334:	bf00      	nop
 8009336:	bf00      	nop
 8009338:	3708      	adds	r7, #8
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	20007b90 	.word	0x20007b90
 8009344:	20007bbc 	.word	0x20007bbc
 8009348:	20007ba4 	.word	0x20007ba4

0800934c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	3354      	adds	r3, #84	; 0x54
 8009358:	4618      	mov	r0, r3
 800935a:	f010 f9fb 	bl	8019754 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009364:	2b00      	cmp	r3, #0
 8009366:	d108      	bne.n	800937a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800936c:	4618      	mov	r0, r3
 800936e:	f000 ff83 	bl	800a278 <vPortFree>
				vPortFree( pxTCB );
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 ff80 	bl	800a278 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009378:	e01a      	b.n	80093b0 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009380:	2b01      	cmp	r3, #1
 8009382:	d103      	bne.n	800938c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 ff77 	bl	800a278 <vPortFree>
	}
 800938a:	e011      	b.n	80093b0 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009392:	2b02      	cmp	r3, #2
 8009394:	d00c      	beq.n	80093b0 <prvDeleteTCB+0x64>
	__asm volatile
 8009396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800939a:	b672      	cpsid	i
 800939c:	f383 8811 	msr	BASEPRI, r3
 80093a0:	f3bf 8f6f 	isb	sy
 80093a4:	f3bf 8f4f 	dsb	sy
 80093a8:	b662      	cpsie	i
 80093aa:	60fb      	str	r3, [r7, #12]
}
 80093ac:	bf00      	nop
 80093ae:	e7fe      	b.n	80093ae <prvDeleteTCB+0x62>
	}
 80093b0:	bf00      	nop
 80093b2:	3710      	adds	r7, #16
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093be:	4b0c      	ldr	r3, [pc, #48]	; (80093f0 <prvResetNextTaskUnblockTime+0x38>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d104      	bne.n	80093d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80093c8:	4b0a      	ldr	r3, [pc, #40]	; (80093f4 <prvResetNextTaskUnblockTime+0x3c>)
 80093ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80093ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80093d0:	e008      	b.n	80093e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093d2:	4b07      	ldr	r3, [pc, #28]	; (80093f0 <prvResetNextTaskUnblockTime+0x38>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	68db      	ldr	r3, [r3, #12]
 80093da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	4a04      	ldr	r2, [pc, #16]	; (80093f4 <prvResetNextTaskUnblockTime+0x3c>)
 80093e2:	6013      	str	r3, [r2, #0]
}
 80093e4:	bf00      	nop
 80093e6:	370c      	adds	r7, #12
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr
 80093f0:	20007b74 	.word	0x20007b74
 80093f4:	20007bdc 	.word	0x20007bdc

080093f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80093f8:	b480      	push	{r7}
 80093fa:	b083      	sub	sp, #12
 80093fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80093fe:	4b0b      	ldr	r3, [pc, #44]	; (800942c <xTaskGetSchedulerState+0x34>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d102      	bne.n	800940c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009406:	2301      	movs	r3, #1
 8009408:	607b      	str	r3, [r7, #4]
 800940a:	e008      	b.n	800941e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800940c:	4b08      	ldr	r3, [pc, #32]	; (8009430 <xTaskGetSchedulerState+0x38>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d102      	bne.n	800941a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009414:	2302      	movs	r3, #2
 8009416:	607b      	str	r3, [r7, #4]
 8009418:	e001      	b.n	800941e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800941a:	2300      	movs	r3, #0
 800941c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800941e:	687b      	ldr	r3, [r7, #4]
	}
 8009420:	4618      	mov	r0, r3
 8009422:	370c      	adds	r7, #12
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr
 800942c:	20007bc8 	.word	0x20007bc8
 8009430:	20007be4 	.word	0x20007be4

08009434 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009434:	b580      	push	{r7, lr}
 8009436:	b086      	sub	sp, #24
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009440:	2300      	movs	r3, #0
 8009442:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d05a      	beq.n	8009500 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800944a:	4b30      	ldr	r3, [pc, #192]	; (800950c <xTaskPriorityDisinherit+0xd8>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	693a      	ldr	r2, [r7, #16]
 8009450:	429a      	cmp	r2, r3
 8009452:	d00c      	beq.n	800946e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8009454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009458:	b672      	cpsid	i
 800945a:	f383 8811 	msr	BASEPRI, r3
 800945e:	f3bf 8f6f 	isb	sy
 8009462:	f3bf 8f4f 	dsb	sy
 8009466:	b662      	cpsie	i
 8009468:	60fb      	str	r3, [r7, #12]
}
 800946a:	bf00      	nop
 800946c:	e7fe      	b.n	800946c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009472:	2b00      	cmp	r3, #0
 8009474:	d10c      	bne.n	8009490 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8009476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800947a:	b672      	cpsid	i
 800947c:	f383 8811 	msr	BASEPRI, r3
 8009480:	f3bf 8f6f 	isb	sy
 8009484:	f3bf 8f4f 	dsb	sy
 8009488:	b662      	cpsie	i
 800948a:	60bb      	str	r3, [r7, #8]
}
 800948c:	bf00      	nop
 800948e:	e7fe      	b.n	800948e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009494:	1e5a      	subs	r2, r3, #1
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d02c      	beq.n	8009500 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d128      	bne.n	8009500 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	3304      	adds	r3, #4
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7fe fbdc 	bl	8007c70 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094d0:	4b0f      	ldr	r3, [pc, #60]	; (8009510 <xTaskPriorityDisinherit+0xdc>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d903      	bls.n	80094e0 <xTaskPriorityDisinherit+0xac>
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094dc:	4a0c      	ldr	r2, [pc, #48]	; (8009510 <xTaskPriorityDisinherit+0xdc>)
 80094de:	6013      	str	r3, [r2, #0]
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094e4:	4613      	mov	r3, r2
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	4413      	add	r3, r2
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	4a09      	ldr	r2, [pc, #36]	; (8009514 <xTaskPriorityDisinherit+0xe0>)
 80094ee:	441a      	add	r2, r3
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	3304      	adds	r3, #4
 80094f4:	4619      	mov	r1, r3
 80094f6:	4610      	mov	r0, r2
 80094f8:	f7fe fb5d 	bl	8007bb6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80094fc:	2301      	movs	r3, #1
 80094fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009500:	697b      	ldr	r3, [r7, #20]
	}
 8009502:	4618      	mov	r0, r3
 8009504:	3718      	adds	r7, #24
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
 800950a:	bf00      	nop
 800950c:	200076e8 	.word	0x200076e8
 8009510:	20007bc4 	.word	0x20007bc4
 8009514:	200076ec 	.word	0x200076ec

08009518 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b084      	sub	sp, #16
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009522:	4b21      	ldr	r3, [pc, #132]	; (80095a8 <prvAddCurrentTaskToDelayedList+0x90>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009528:	4b20      	ldr	r3, [pc, #128]	; (80095ac <prvAddCurrentTaskToDelayedList+0x94>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	3304      	adds	r3, #4
 800952e:	4618      	mov	r0, r3
 8009530:	f7fe fb9e 	bl	8007c70 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800953a:	d10a      	bne.n	8009552 <prvAddCurrentTaskToDelayedList+0x3a>
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d007      	beq.n	8009552 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009542:	4b1a      	ldr	r3, [pc, #104]	; (80095ac <prvAddCurrentTaskToDelayedList+0x94>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	3304      	adds	r3, #4
 8009548:	4619      	mov	r1, r3
 800954a:	4819      	ldr	r0, [pc, #100]	; (80095b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800954c:	f7fe fb33 	bl	8007bb6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009550:	e026      	b.n	80095a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009552:	68fa      	ldr	r2, [r7, #12]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	4413      	add	r3, r2
 8009558:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800955a:	4b14      	ldr	r3, [pc, #80]	; (80095ac <prvAddCurrentTaskToDelayedList+0x94>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	68ba      	ldr	r2, [r7, #8]
 8009560:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009562:	68ba      	ldr	r2, [r7, #8]
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	429a      	cmp	r2, r3
 8009568:	d209      	bcs.n	800957e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800956a:	4b12      	ldr	r3, [pc, #72]	; (80095b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	4b0f      	ldr	r3, [pc, #60]	; (80095ac <prvAddCurrentTaskToDelayedList+0x94>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	3304      	adds	r3, #4
 8009574:	4619      	mov	r1, r3
 8009576:	4610      	mov	r0, r2
 8009578:	f7fe fb41 	bl	8007bfe <vListInsert>
}
 800957c:	e010      	b.n	80095a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800957e:	4b0e      	ldr	r3, [pc, #56]	; (80095b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	4b0a      	ldr	r3, [pc, #40]	; (80095ac <prvAddCurrentTaskToDelayedList+0x94>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	3304      	adds	r3, #4
 8009588:	4619      	mov	r1, r3
 800958a:	4610      	mov	r0, r2
 800958c:	f7fe fb37 	bl	8007bfe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009590:	4b0a      	ldr	r3, [pc, #40]	; (80095bc <prvAddCurrentTaskToDelayedList+0xa4>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	68ba      	ldr	r2, [r7, #8]
 8009596:	429a      	cmp	r2, r3
 8009598:	d202      	bcs.n	80095a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800959a:	4a08      	ldr	r2, [pc, #32]	; (80095bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	6013      	str	r3, [r2, #0]
}
 80095a0:	bf00      	nop
 80095a2:	3710      	adds	r7, #16
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	20007bc0 	.word	0x20007bc0
 80095ac:	200076e8 	.word	0x200076e8
 80095b0:	20007ba8 	.word	0x20007ba8
 80095b4:	20007b78 	.word	0x20007b78
 80095b8:	20007b74 	.word	0x20007b74
 80095bc:	20007bdc 	.word	0x20007bdc

080095c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b08a      	sub	sp, #40	; 0x28
 80095c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80095c6:	2300      	movs	r3, #0
 80095c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80095ca:	f000 fb15 	bl	8009bf8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80095ce:	4b1d      	ldr	r3, [pc, #116]	; (8009644 <xTimerCreateTimerTask+0x84>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d021      	beq.n	800961a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80095d6:	2300      	movs	r3, #0
 80095d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80095da:	2300      	movs	r3, #0
 80095dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80095de:	1d3a      	adds	r2, r7, #4
 80095e0:	f107 0108 	add.w	r1, r7, #8
 80095e4:	f107 030c 	add.w	r3, r7, #12
 80095e8:	4618      	mov	r0, r3
 80095ea:	f7fe fa9d 	bl	8007b28 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80095ee:	6879      	ldr	r1, [r7, #4]
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	68fa      	ldr	r2, [r7, #12]
 80095f4:	9202      	str	r2, [sp, #8]
 80095f6:	9301      	str	r3, [sp, #4]
 80095f8:	2302      	movs	r3, #2
 80095fa:	9300      	str	r3, [sp, #0]
 80095fc:	2300      	movs	r3, #0
 80095fe:	460a      	mov	r2, r1
 8009600:	4911      	ldr	r1, [pc, #68]	; (8009648 <xTimerCreateTimerTask+0x88>)
 8009602:	4812      	ldr	r0, [pc, #72]	; (800964c <xTimerCreateTimerTask+0x8c>)
 8009604:	f7ff f868 	bl	80086d8 <xTaskCreateStatic>
 8009608:	4603      	mov	r3, r0
 800960a:	4a11      	ldr	r2, [pc, #68]	; (8009650 <xTimerCreateTimerTask+0x90>)
 800960c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800960e:	4b10      	ldr	r3, [pc, #64]	; (8009650 <xTimerCreateTimerTask+0x90>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d001      	beq.n	800961a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009616:	2301      	movs	r3, #1
 8009618:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d10c      	bne.n	800963a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8009620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009624:	b672      	cpsid	i
 8009626:	f383 8811 	msr	BASEPRI, r3
 800962a:	f3bf 8f6f 	isb	sy
 800962e:	f3bf 8f4f 	dsb	sy
 8009632:	b662      	cpsie	i
 8009634:	613b      	str	r3, [r7, #16]
}
 8009636:	bf00      	nop
 8009638:	e7fe      	b.n	8009638 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800963a:	697b      	ldr	r3, [r7, #20]
}
 800963c:	4618      	mov	r0, r3
 800963e:	3718      	adds	r7, #24
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}
 8009644:	20007c18 	.word	0x20007c18
 8009648:	0801a698 	.word	0x0801a698
 800964c:	08009791 	.word	0x08009791
 8009650:	20007c1c 	.word	0x20007c1c

08009654 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b08a      	sub	sp, #40	; 0x28
 8009658:	af00      	add	r7, sp, #0
 800965a:	60f8      	str	r0, [r7, #12]
 800965c:	60b9      	str	r1, [r7, #8]
 800965e:	607a      	str	r2, [r7, #4]
 8009660:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009662:	2300      	movs	r3, #0
 8009664:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d10c      	bne.n	8009686 <xTimerGenericCommand+0x32>
	__asm volatile
 800966c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009670:	b672      	cpsid	i
 8009672:	f383 8811 	msr	BASEPRI, r3
 8009676:	f3bf 8f6f 	isb	sy
 800967a:	f3bf 8f4f 	dsb	sy
 800967e:	b662      	cpsie	i
 8009680:	623b      	str	r3, [r7, #32]
}
 8009682:	bf00      	nop
 8009684:	e7fe      	b.n	8009684 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009686:	4b1a      	ldr	r3, [pc, #104]	; (80096f0 <xTimerGenericCommand+0x9c>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d02a      	beq.n	80096e4 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	2b05      	cmp	r3, #5
 800969e:	dc18      	bgt.n	80096d2 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80096a0:	f7ff feaa 	bl	80093f8 <xTaskGetSchedulerState>
 80096a4:	4603      	mov	r3, r0
 80096a6:	2b02      	cmp	r3, #2
 80096a8:	d109      	bne.n	80096be <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80096aa:	4b11      	ldr	r3, [pc, #68]	; (80096f0 <xTimerGenericCommand+0x9c>)
 80096ac:	6818      	ldr	r0, [r3, #0]
 80096ae:	f107 0110 	add.w	r1, r7, #16
 80096b2:	2300      	movs	r3, #0
 80096b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096b6:	f7fe fc15 	bl	8007ee4 <xQueueGenericSend>
 80096ba:	6278      	str	r0, [r7, #36]	; 0x24
 80096bc:	e012      	b.n	80096e4 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80096be:	4b0c      	ldr	r3, [pc, #48]	; (80096f0 <xTimerGenericCommand+0x9c>)
 80096c0:	6818      	ldr	r0, [r3, #0]
 80096c2:	f107 0110 	add.w	r1, r7, #16
 80096c6:	2300      	movs	r3, #0
 80096c8:	2200      	movs	r2, #0
 80096ca:	f7fe fc0b 	bl	8007ee4 <xQueueGenericSend>
 80096ce:	6278      	str	r0, [r7, #36]	; 0x24
 80096d0:	e008      	b.n	80096e4 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80096d2:	4b07      	ldr	r3, [pc, #28]	; (80096f0 <xTimerGenericCommand+0x9c>)
 80096d4:	6818      	ldr	r0, [r3, #0]
 80096d6:	f107 0110 	add.w	r1, r7, #16
 80096da:	2300      	movs	r3, #0
 80096dc:	683a      	ldr	r2, [r7, #0]
 80096de:	f7fe fd07 	bl	80080f0 <xQueueGenericSendFromISR>
 80096e2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80096e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3728      	adds	r7, #40	; 0x28
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop
 80096f0:	20007c18 	.word	0x20007c18

080096f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b088      	sub	sp, #32
 80096f8:	af02      	add	r7, sp, #8
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096fe:	4b23      	ldr	r3, [pc, #140]	; (800978c <prvProcessExpiredTimer+0x98>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	68db      	ldr	r3, [r3, #12]
 8009704:	68db      	ldr	r3, [r3, #12]
 8009706:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	3304      	adds	r3, #4
 800970c:	4618      	mov	r0, r3
 800970e:	f7fe faaf 	bl	8007c70 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009718:	f003 0304 	and.w	r3, r3, #4
 800971c:	2b00      	cmp	r3, #0
 800971e:	d024      	beq.n	800976a <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	699a      	ldr	r2, [r3, #24]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	18d1      	adds	r1, r2, r3
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	683a      	ldr	r2, [r7, #0]
 800972c:	6978      	ldr	r0, [r7, #20]
 800972e:	f000 f8d3 	bl	80098d8 <prvInsertTimerInActiveList>
 8009732:	4603      	mov	r3, r0
 8009734:	2b00      	cmp	r3, #0
 8009736:	d021      	beq.n	800977c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009738:	2300      	movs	r3, #0
 800973a:	9300      	str	r3, [sp, #0]
 800973c:	2300      	movs	r3, #0
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	2100      	movs	r1, #0
 8009742:	6978      	ldr	r0, [r7, #20]
 8009744:	f7ff ff86 	bl	8009654 <xTimerGenericCommand>
 8009748:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d115      	bne.n	800977c <prvProcessExpiredTimer+0x88>
	__asm volatile
 8009750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009754:	b672      	cpsid	i
 8009756:	f383 8811 	msr	BASEPRI, r3
 800975a:	f3bf 8f6f 	isb	sy
 800975e:	f3bf 8f4f 	dsb	sy
 8009762:	b662      	cpsie	i
 8009764:	60fb      	str	r3, [r7, #12]
}
 8009766:	bf00      	nop
 8009768:	e7fe      	b.n	8009768 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009770:	f023 0301 	bic.w	r3, r3, #1
 8009774:	b2da      	uxtb	r2, r3
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	6a1b      	ldr	r3, [r3, #32]
 8009780:	6978      	ldr	r0, [r7, #20]
 8009782:	4798      	blx	r3
}
 8009784:	bf00      	nop
 8009786:	3718      	adds	r7, #24
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}
 800978c:	20007c10 	.word	0x20007c10

08009790 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009798:	f107 0308 	add.w	r3, r7, #8
 800979c:	4618      	mov	r0, r3
 800979e:	f000 f857 	bl	8009850 <prvGetNextExpireTime>
 80097a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	4619      	mov	r1, r3
 80097a8:	68f8      	ldr	r0, [r7, #12]
 80097aa:	f000 f803 	bl	80097b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80097ae:	f000 f8d5 	bl	800995c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80097b2:	e7f1      	b.n	8009798 <prvTimerTask+0x8>

080097b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80097be:	f7ff f9f5 	bl	8008bac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80097c2:	f107 0308 	add.w	r3, r7, #8
 80097c6:	4618      	mov	r0, r3
 80097c8:	f000 f866 	bl	8009898 <prvSampleTimeNow>
 80097cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d130      	bne.n	8009836 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d10a      	bne.n	80097f0 <prvProcessTimerOrBlockTask+0x3c>
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	429a      	cmp	r2, r3
 80097e0:	d806      	bhi.n	80097f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80097e2:	f7ff f9f1 	bl	8008bc8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80097e6:	68f9      	ldr	r1, [r7, #12]
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f7ff ff83 	bl	80096f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80097ee:	e024      	b.n	800983a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d008      	beq.n	8009808 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80097f6:	4b13      	ldr	r3, [pc, #76]	; (8009844 <prvProcessTimerOrBlockTask+0x90>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d101      	bne.n	8009804 <prvProcessTimerOrBlockTask+0x50>
 8009800:	2301      	movs	r3, #1
 8009802:	e000      	b.n	8009806 <prvProcessTimerOrBlockTask+0x52>
 8009804:	2300      	movs	r3, #0
 8009806:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009808:	4b0f      	ldr	r3, [pc, #60]	; (8009848 <prvProcessTimerOrBlockTask+0x94>)
 800980a:	6818      	ldr	r0, [r3, #0]
 800980c:	687a      	ldr	r2, [r7, #4]
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	1ad3      	subs	r3, r2, r3
 8009812:	683a      	ldr	r2, [r7, #0]
 8009814:	4619      	mov	r1, r3
 8009816:	f7fe ff2b 	bl	8008670 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800981a:	f7ff f9d5 	bl	8008bc8 <xTaskResumeAll>
 800981e:	4603      	mov	r3, r0
 8009820:	2b00      	cmp	r3, #0
 8009822:	d10a      	bne.n	800983a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009824:	4b09      	ldr	r3, [pc, #36]	; (800984c <prvProcessTimerOrBlockTask+0x98>)
 8009826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800982a:	601a      	str	r2, [r3, #0]
 800982c:	f3bf 8f4f 	dsb	sy
 8009830:	f3bf 8f6f 	isb	sy
}
 8009834:	e001      	b.n	800983a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009836:	f7ff f9c7 	bl	8008bc8 <xTaskResumeAll>
}
 800983a:	bf00      	nop
 800983c:	3710      	adds	r7, #16
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	bf00      	nop
 8009844:	20007c14 	.word	0x20007c14
 8009848:	20007c18 	.word	0x20007c18
 800984c:	e000ed04 	.word	0xe000ed04

08009850 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009850:	b480      	push	{r7}
 8009852:	b085      	sub	sp, #20
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009858:	4b0e      	ldr	r3, [pc, #56]	; (8009894 <prvGetNextExpireTime+0x44>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d101      	bne.n	8009866 <prvGetNextExpireTime+0x16>
 8009862:	2201      	movs	r2, #1
 8009864:	e000      	b.n	8009868 <prvGetNextExpireTime+0x18>
 8009866:	2200      	movs	r2, #0
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d105      	bne.n	8009880 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009874:	4b07      	ldr	r3, [pc, #28]	; (8009894 <prvGetNextExpireTime+0x44>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	60fb      	str	r3, [r7, #12]
 800987e:	e001      	b.n	8009884 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009880:	2300      	movs	r3, #0
 8009882:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009884:	68fb      	ldr	r3, [r7, #12]
}
 8009886:	4618      	mov	r0, r3
 8009888:	3714      	adds	r7, #20
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr
 8009892:	bf00      	nop
 8009894:	20007c10 	.word	0x20007c10

08009898 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b084      	sub	sp, #16
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80098a0:	f7ff fa32 	bl	8008d08 <xTaskGetTickCount>
 80098a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80098a6:	4b0b      	ldr	r3, [pc, #44]	; (80098d4 <prvSampleTimeNow+0x3c>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	68fa      	ldr	r2, [r7, #12]
 80098ac:	429a      	cmp	r2, r3
 80098ae:	d205      	bcs.n	80098bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80098b0:	f000 f93c 	bl	8009b2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2201      	movs	r2, #1
 80098b8:	601a      	str	r2, [r3, #0]
 80098ba:	e002      	b.n	80098c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2200      	movs	r2, #0
 80098c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80098c2:	4a04      	ldr	r2, [pc, #16]	; (80098d4 <prvSampleTimeNow+0x3c>)
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80098c8:	68fb      	ldr	r3, [r7, #12]
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3710      	adds	r7, #16
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop
 80098d4:	20007c20 	.word	0x20007c20

080098d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b086      	sub	sp, #24
 80098dc:	af00      	add	r7, sp, #0
 80098de:	60f8      	str	r0, [r7, #12]
 80098e0:	60b9      	str	r1, [r7, #8]
 80098e2:	607a      	str	r2, [r7, #4]
 80098e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80098e6:	2300      	movs	r3, #0
 80098e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	68ba      	ldr	r2, [r7, #8]
 80098ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	68fa      	ldr	r2, [r7, #12]
 80098f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80098f6:	68ba      	ldr	r2, [r7, #8]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	429a      	cmp	r2, r3
 80098fc:	d812      	bhi.n	8009924 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	1ad2      	subs	r2, r2, r3
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	699b      	ldr	r3, [r3, #24]
 8009908:	429a      	cmp	r2, r3
 800990a:	d302      	bcc.n	8009912 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800990c:	2301      	movs	r3, #1
 800990e:	617b      	str	r3, [r7, #20]
 8009910:	e01b      	b.n	800994a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009912:	4b10      	ldr	r3, [pc, #64]	; (8009954 <prvInsertTimerInActiveList+0x7c>)
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	3304      	adds	r3, #4
 800991a:	4619      	mov	r1, r3
 800991c:	4610      	mov	r0, r2
 800991e:	f7fe f96e 	bl	8007bfe <vListInsert>
 8009922:	e012      	b.n	800994a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	429a      	cmp	r2, r3
 800992a:	d206      	bcs.n	800993a <prvInsertTimerInActiveList+0x62>
 800992c:	68ba      	ldr	r2, [r7, #8]
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	429a      	cmp	r2, r3
 8009932:	d302      	bcc.n	800993a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009934:	2301      	movs	r3, #1
 8009936:	617b      	str	r3, [r7, #20]
 8009938:	e007      	b.n	800994a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800993a:	4b07      	ldr	r3, [pc, #28]	; (8009958 <prvInsertTimerInActiveList+0x80>)
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	3304      	adds	r3, #4
 8009942:	4619      	mov	r1, r3
 8009944:	4610      	mov	r0, r2
 8009946:	f7fe f95a 	bl	8007bfe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800994a:	697b      	ldr	r3, [r7, #20]
}
 800994c:	4618      	mov	r0, r3
 800994e:	3718      	adds	r7, #24
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}
 8009954:	20007c14 	.word	0x20007c14
 8009958:	20007c10 	.word	0x20007c10

0800995c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b08e      	sub	sp, #56	; 0x38
 8009960:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009962:	e0d0      	b.n	8009b06 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2b00      	cmp	r3, #0
 8009968:	da1a      	bge.n	80099a0 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800996a:	1d3b      	adds	r3, r7, #4
 800996c:	3304      	adds	r3, #4
 800996e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009972:	2b00      	cmp	r3, #0
 8009974:	d10c      	bne.n	8009990 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8009976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997a:	b672      	cpsid	i
 800997c:	f383 8811 	msr	BASEPRI, r3
 8009980:	f3bf 8f6f 	isb	sy
 8009984:	f3bf 8f4f 	dsb	sy
 8009988:	b662      	cpsie	i
 800998a:	61fb      	str	r3, [r7, #28]
}
 800998c:	bf00      	nop
 800998e:	e7fe      	b.n	800998e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009996:	6850      	ldr	r0, [r2, #4]
 8009998:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800999a:	6892      	ldr	r2, [r2, #8]
 800999c:	4611      	mov	r1, r2
 800999e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	f2c0 80af 	blt.w	8009b06 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80099ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ae:	695b      	ldr	r3, [r3, #20]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d004      	beq.n	80099be <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b6:	3304      	adds	r3, #4
 80099b8:	4618      	mov	r0, r3
 80099ba:	f7fe f959 	bl	8007c70 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80099be:	463b      	mov	r3, r7
 80099c0:	4618      	mov	r0, r3
 80099c2:	f7ff ff69 	bl	8009898 <prvSampleTimeNow>
 80099c6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2b09      	cmp	r3, #9
 80099cc:	f200 809a 	bhi.w	8009b04 <prvProcessReceivedCommands+0x1a8>
 80099d0:	a201      	add	r2, pc, #4	; (adr r2, 80099d8 <prvProcessReceivedCommands+0x7c>)
 80099d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d6:	bf00      	nop
 80099d8:	08009a01 	.word	0x08009a01
 80099dc:	08009a01 	.word	0x08009a01
 80099e0:	08009a01 	.word	0x08009a01
 80099e4:	08009a79 	.word	0x08009a79
 80099e8:	08009a8d 	.word	0x08009a8d
 80099ec:	08009adb 	.word	0x08009adb
 80099f0:	08009a01 	.word	0x08009a01
 80099f4:	08009a01 	.word	0x08009a01
 80099f8:	08009a79 	.word	0x08009a79
 80099fc:	08009a8d 	.word	0x08009a8d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a06:	f043 0301 	orr.w	r3, r3, #1
 8009a0a:	b2da      	uxtb	r2, r3
 8009a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009a12:	68ba      	ldr	r2, [r7, #8]
 8009a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a16:	699b      	ldr	r3, [r3, #24]
 8009a18:	18d1      	adds	r1, r2, r3
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a20:	f7ff ff5a 	bl	80098d8 <prvInsertTimerInActiveList>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d06d      	beq.n	8009b06 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a2c:	6a1b      	ldr	r3, [r3, #32]
 8009a2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a30:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a38:	f003 0304 	and.w	r3, r3, #4
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d062      	beq.n	8009b06 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009a40:	68ba      	ldr	r2, [r7, #8]
 8009a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a44:	699b      	ldr	r3, [r3, #24]
 8009a46:	441a      	add	r2, r3
 8009a48:	2300      	movs	r3, #0
 8009a4a:	9300      	str	r3, [sp, #0]
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	2100      	movs	r1, #0
 8009a50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a52:	f7ff fdff 	bl	8009654 <xTimerGenericCommand>
 8009a56:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009a58:	6a3b      	ldr	r3, [r7, #32]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d153      	bne.n	8009b06 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8009a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a62:	b672      	cpsid	i
 8009a64:	f383 8811 	msr	BASEPRI, r3
 8009a68:	f3bf 8f6f 	isb	sy
 8009a6c:	f3bf 8f4f 	dsb	sy
 8009a70:	b662      	cpsie	i
 8009a72:	61bb      	str	r3, [r7, #24]
}
 8009a74:	bf00      	nop
 8009a76:	e7fe      	b.n	8009a76 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a7e:	f023 0301 	bic.w	r3, r3, #1
 8009a82:	b2da      	uxtb	r2, r3
 8009a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009a8a:	e03c      	b.n	8009b06 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a92:	f043 0301 	orr.w	r3, r3, #1
 8009a96:	b2da      	uxtb	r2, r3
 8009a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009a9e:	68ba      	ldr	r2, [r7, #8]
 8009aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa6:	699b      	ldr	r3, [r3, #24]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d10c      	bne.n	8009ac6 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8009aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab0:	b672      	cpsid	i
 8009ab2:	f383 8811 	msr	BASEPRI, r3
 8009ab6:	f3bf 8f6f 	isb	sy
 8009aba:	f3bf 8f4f 	dsb	sy
 8009abe:	b662      	cpsie	i
 8009ac0:	617b      	str	r3, [r7, #20]
}
 8009ac2:	bf00      	nop
 8009ac4:	e7fe      	b.n	8009ac4 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac8:	699a      	ldr	r2, [r3, #24]
 8009aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009acc:	18d1      	adds	r1, r2, r3
 8009ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ad2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ad4:	f7ff ff00 	bl	80098d8 <prvInsertTimerInActiveList>
					break;
 8009ad8:	e015      	b.n	8009b06 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009adc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ae0:	f003 0302 	and.w	r3, r3, #2
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d103      	bne.n	8009af0 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8009ae8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009aea:	f000 fbc5 	bl	800a278 <vPortFree>
 8009aee:	e00a      	b.n	8009b06 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009af6:	f023 0301 	bic.w	r3, r3, #1
 8009afa:	b2da      	uxtb	r2, r3
 8009afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009b02:	e000      	b.n	8009b06 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 8009b04:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b06:	4b08      	ldr	r3, [pc, #32]	; (8009b28 <prvProcessReceivedCommands+0x1cc>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	1d39      	adds	r1, r7, #4
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f7fe fb8e 	bl	8008230 <xQueueReceive>
 8009b14:	4603      	mov	r3, r0
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	f47f af24 	bne.w	8009964 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009b1c:	bf00      	nop
 8009b1e:	bf00      	nop
 8009b20:	3730      	adds	r7, #48	; 0x30
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	20007c18 	.word	0x20007c18

08009b2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b088      	sub	sp, #32
 8009b30:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b32:	e04a      	b.n	8009bca <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b34:	4b2e      	ldr	r3, [pc, #184]	; (8009bf0 <prvSwitchTimerLists+0xc4>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	68db      	ldr	r3, [r3, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b3e:	4b2c      	ldr	r3, [pc, #176]	; (8009bf0 <prvSwitchTimerLists+0xc4>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	68db      	ldr	r3, [r3, #12]
 8009b46:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	3304      	adds	r3, #4
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f7fe f88f 	bl	8007c70 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	6a1b      	ldr	r3, [r3, #32]
 8009b56:	68f8      	ldr	r0, [r7, #12]
 8009b58:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b60:	f003 0304 	and.w	r3, r3, #4
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d030      	beq.n	8009bca <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	699b      	ldr	r3, [r3, #24]
 8009b6c:	693a      	ldr	r2, [r7, #16]
 8009b6e:	4413      	add	r3, r2
 8009b70:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009b72:	68ba      	ldr	r2, [r7, #8]
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d90e      	bls.n	8009b98 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	68ba      	ldr	r2, [r7, #8]
 8009b7e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	68fa      	ldr	r2, [r7, #12]
 8009b84:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009b86:	4b1a      	ldr	r3, [pc, #104]	; (8009bf0 <prvSwitchTimerLists+0xc4>)
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	3304      	adds	r3, #4
 8009b8e:	4619      	mov	r1, r3
 8009b90:	4610      	mov	r0, r2
 8009b92:	f7fe f834 	bl	8007bfe <vListInsert>
 8009b96:	e018      	b.n	8009bca <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b98:	2300      	movs	r3, #0
 8009b9a:	9300      	str	r3, [sp, #0]
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	693a      	ldr	r2, [r7, #16]
 8009ba0:	2100      	movs	r1, #0
 8009ba2:	68f8      	ldr	r0, [r7, #12]
 8009ba4:	f7ff fd56 	bl	8009654 <xTimerGenericCommand>
 8009ba8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d10c      	bne.n	8009bca <prvSwitchTimerLists+0x9e>
	__asm volatile
 8009bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb4:	b672      	cpsid	i
 8009bb6:	f383 8811 	msr	BASEPRI, r3
 8009bba:	f3bf 8f6f 	isb	sy
 8009bbe:	f3bf 8f4f 	dsb	sy
 8009bc2:	b662      	cpsie	i
 8009bc4:	603b      	str	r3, [r7, #0]
}
 8009bc6:	bf00      	nop
 8009bc8:	e7fe      	b.n	8009bc8 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009bca:	4b09      	ldr	r3, [pc, #36]	; (8009bf0 <prvSwitchTimerLists+0xc4>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d1af      	bne.n	8009b34 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009bd4:	4b06      	ldr	r3, [pc, #24]	; (8009bf0 <prvSwitchTimerLists+0xc4>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009bda:	4b06      	ldr	r3, [pc, #24]	; (8009bf4 <prvSwitchTimerLists+0xc8>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a04      	ldr	r2, [pc, #16]	; (8009bf0 <prvSwitchTimerLists+0xc4>)
 8009be0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009be2:	4a04      	ldr	r2, [pc, #16]	; (8009bf4 <prvSwitchTimerLists+0xc8>)
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	6013      	str	r3, [r2, #0]
}
 8009be8:	bf00      	nop
 8009bea:	3718      	adds	r7, #24
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}
 8009bf0:	20007c10 	.word	0x20007c10
 8009bf4:	20007c14 	.word	0x20007c14

08009bf8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b082      	sub	sp, #8
 8009bfc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009bfe:	f000 f945 	bl	8009e8c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009c02:	4b15      	ldr	r3, [pc, #84]	; (8009c58 <prvCheckForValidListAndQueue+0x60>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d120      	bne.n	8009c4c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009c0a:	4814      	ldr	r0, [pc, #80]	; (8009c5c <prvCheckForValidListAndQueue+0x64>)
 8009c0c:	f7fd ffa6 	bl	8007b5c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009c10:	4813      	ldr	r0, [pc, #76]	; (8009c60 <prvCheckForValidListAndQueue+0x68>)
 8009c12:	f7fd ffa3 	bl	8007b5c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009c16:	4b13      	ldr	r3, [pc, #76]	; (8009c64 <prvCheckForValidListAndQueue+0x6c>)
 8009c18:	4a10      	ldr	r2, [pc, #64]	; (8009c5c <prvCheckForValidListAndQueue+0x64>)
 8009c1a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009c1c:	4b12      	ldr	r3, [pc, #72]	; (8009c68 <prvCheckForValidListAndQueue+0x70>)
 8009c1e:	4a10      	ldr	r2, [pc, #64]	; (8009c60 <prvCheckForValidListAndQueue+0x68>)
 8009c20:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009c22:	2300      	movs	r3, #0
 8009c24:	9300      	str	r3, [sp, #0]
 8009c26:	4b11      	ldr	r3, [pc, #68]	; (8009c6c <prvCheckForValidListAndQueue+0x74>)
 8009c28:	4a11      	ldr	r2, [pc, #68]	; (8009c70 <prvCheckForValidListAndQueue+0x78>)
 8009c2a:	2110      	movs	r1, #16
 8009c2c:	200a      	movs	r0, #10
 8009c2e:	f7fe f8b3 	bl	8007d98 <xQueueGenericCreateStatic>
 8009c32:	4603      	mov	r3, r0
 8009c34:	4a08      	ldr	r2, [pc, #32]	; (8009c58 <prvCheckForValidListAndQueue+0x60>)
 8009c36:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009c38:	4b07      	ldr	r3, [pc, #28]	; (8009c58 <prvCheckForValidListAndQueue+0x60>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d005      	beq.n	8009c4c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009c40:	4b05      	ldr	r3, [pc, #20]	; (8009c58 <prvCheckForValidListAndQueue+0x60>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	490b      	ldr	r1, [pc, #44]	; (8009c74 <prvCheckForValidListAndQueue+0x7c>)
 8009c46:	4618      	mov	r0, r3
 8009c48:	f7fe fce8 	bl	800861c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c4c:	f000 f952 	bl	8009ef4 <vPortExitCritical>
}
 8009c50:	bf00      	nop
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
 8009c56:	bf00      	nop
 8009c58:	20007c18 	.word	0x20007c18
 8009c5c:	20007be8 	.word	0x20007be8
 8009c60:	20007bfc 	.word	0x20007bfc
 8009c64:	20007c10 	.word	0x20007c10
 8009c68:	20007c14 	.word	0x20007c14
 8009c6c:	20007cc4 	.word	0x20007cc4
 8009c70:	20007c24 	.word	0x20007c24
 8009c74:	0801a6a0 	.word	0x0801a6a0

08009c78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b085      	sub	sp, #20
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	60f8      	str	r0, [r7, #12]
 8009c80:	60b9      	str	r1, [r7, #8]
 8009c82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	3b04      	subs	r3, #4
 8009c88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009c90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	3b04      	subs	r3, #4
 8009c96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	f023 0201 	bic.w	r2, r3, #1
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	3b04      	subs	r3, #4
 8009ca6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009ca8:	4a0c      	ldr	r2, [pc, #48]	; (8009cdc <pxPortInitialiseStack+0x64>)
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	3b14      	subs	r3, #20
 8009cb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	3b04      	subs	r3, #4
 8009cbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f06f 0202 	mvn.w	r2, #2
 8009cc6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	3b20      	subs	r3, #32
 8009ccc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009cce:	68fb      	ldr	r3, [r7, #12]
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3714      	adds	r7, #20
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr
 8009cdc:	08009ce1 	.word	0x08009ce1

08009ce0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b085      	sub	sp, #20
 8009ce4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009cea:	4b14      	ldr	r3, [pc, #80]	; (8009d3c <prvTaskExitError+0x5c>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009cf2:	d00c      	beq.n	8009d0e <prvTaskExitError+0x2e>
	__asm volatile
 8009cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf8:	b672      	cpsid	i
 8009cfa:	f383 8811 	msr	BASEPRI, r3
 8009cfe:	f3bf 8f6f 	isb	sy
 8009d02:	f3bf 8f4f 	dsb	sy
 8009d06:	b662      	cpsie	i
 8009d08:	60fb      	str	r3, [r7, #12]
}
 8009d0a:	bf00      	nop
 8009d0c:	e7fe      	b.n	8009d0c <prvTaskExitError+0x2c>
	__asm volatile
 8009d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d12:	b672      	cpsid	i
 8009d14:	f383 8811 	msr	BASEPRI, r3
 8009d18:	f3bf 8f6f 	isb	sy
 8009d1c:	f3bf 8f4f 	dsb	sy
 8009d20:	b662      	cpsie	i
 8009d22:	60bb      	str	r3, [r7, #8]
}
 8009d24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009d26:	bf00      	nop
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d0fc      	beq.n	8009d28 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009d2e:	bf00      	nop
 8009d30:	bf00      	nop
 8009d32:	3714      	adds	r7, #20
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr
 8009d3c:	20000010 	.word	0x20000010

08009d40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009d40:	4b07      	ldr	r3, [pc, #28]	; (8009d60 <pxCurrentTCBConst2>)
 8009d42:	6819      	ldr	r1, [r3, #0]
 8009d44:	6808      	ldr	r0, [r1, #0]
 8009d46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d4a:	f380 8809 	msr	PSP, r0
 8009d4e:	f3bf 8f6f 	isb	sy
 8009d52:	f04f 0000 	mov.w	r0, #0
 8009d56:	f380 8811 	msr	BASEPRI, r0
 8009d5a:	4770      	bx	lr
 8009d5c:	f3af 8000 	nop.w

08009d60 <pxCurrentTCBConst2>:
 8009d60:	200076e8 	.word	0x200076e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009d64:	bf00      	nop
 8009d66:	bf00      	nop

08009d68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009d68:	4808      	ldr	r0, [pc, #32]	; (8009d8c <prvPortStartFirstTask+0x24>)
 8009d6a:	6800      	ldr	r0, [r0, #0]
 8009d6c:	6800      	ldr	r0, [r0, #0]
 8009d6e:	f380 8808 	msr	MSP, r0
 8009d72:	f04f 0000 	mov.w	r0, #0
 8009d76:	f380 8814 	msr	CONTROL, r0
 8009d7a:	b662      	cpsie	i
 8009d7c:	b661      	cpsie	f
 8009d7e:	f3bf 8f4f 	dsb	sy
 8009d82:	f3bf 8f6f 	isb	sy
 8009d86:	df00      	svc	0
 8009d88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009d8a:	bf00      	nop
 8009d8c:	e000ed08 	.word	0xe000ed08

08009d90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b084      	sub	sp, #16
 8009d94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009d96:	4b37      	ldr	r3, [pc, #220]	; (8009e74 <xPortStartScheduler+0xe4>)
 8009d98:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	b2db      	uxtb	r3, r3
 8009da0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	22ff      	movs	r2, #255	; 0xff
 8009da6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	781b      	ldrb	r3, [r3, #0]
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009db0:	78fb      	ldrb	r3, [r7, #3]
 8009db2:	b2db      	uxtb	r3, r3
 8009db4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009db8:	b2da      	uxtb	r2, r3
 8009dba:	4b2f      	ldr	r3, [pc, #188]	; (8009e78 <xPortStartScheduler+0xe8>)
 8009dbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009dbe:	4b2f      	ldr	r3, [pc, #188]	; (8009e7c <xPortStartScheduler+0xec>)
 8009dc0:	2207      	movs	r2, #7
 8009dc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009dc4:	e009      	b.n	8009dda <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009dc6:	4b2d      	ldr	r3, [pc, #180]	; (8009e7c <xPortStartScheduler+0xec>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	3b01      	subs	r3, #1
 8009dcc:	4a2b      	ldr	r2, [pc, #172]	; (8009e7c <xPortStartScheduler+0xec>)
 8009dce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009dd0:	78fb      	ldrb	r3, [r7, #3]
 8009dd2:	b2db      	uxtb	r3, r3
 8009dd4:	005b      	lsls	r3, r3, #1
 8009dd6:	b2db      	uxtb	r3, r3
 8009dd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009dda:	78fb      	ldrb	r3, [r7, #3]
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009de2:	2b80      	cmp	r3, #128	; 0x80
 8009de4:	d0ef      	beq.n	8009dc6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009de6:	4b25      	ldr	r3, [pc, #148]	; (8009e7c <xPortStartScheduler+0xec>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f1c3 0307 	rsb	r3, r3, #7
 8009dee:	2b04      	cmp	r3, #4
 8009df0:	d00c      	beq.n	8009e0c <xPortStartScheduler+0x7c>
	__asm volatile
 8009df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df6:	b672      	cpsid	i
 8009df8:	f383 8811 	msr	BASEPRI, r3
 8009dfc:	f3bf 8f6f 	isb	sy
 8009e00:	f3bf 8f4f 	dsb	sy
 8009e04:	b662      	cpsie	i
 8009e06:	60bb      	str	r3, [r7, #8]
}
 8009e08:	bf00      	nop
 8009e0a:	e7fe      	b.n	8009e0a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009e0c:	4b1b      	ldr	r3, [pc, #108]	; (8009e7c <xPortStartScheduler+0xec>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	021b      	lsls	r3, r3, #8
 8009e12:	4a1a      	ldr	r2, [pc, #104]	; (8009e7c <xPortStartScheduler+0xec>)
 8009e14:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009e16:	4b19      	ldr	r3, [pc, #100]	; (8009e7c <xPortStartScheduler+0xec>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009e1e:	4a17      	ldr	r2, [pc, #92]	; (8009e7c <xPortStartScheduler+0xec>)
 8009e20:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	b2da      	uxtb	r2, r3
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009e2a:	4b15      	ldr	r3, [pc, #84]	; (8009e80 <xPortStartScheduler+0xf0>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4a14      	ldr	r2, [pc, #80]	; (8009e80 <xPortStartScheduler+0xf0>)
 8009e30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009e34:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009e36:	4b12      	ldr	r3, [pc, #72]	; (8009e80 <xPortStartScheduler+0xf0>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a11      	ldr	r2, [pc, #68]	; (8009e80 <xPortStartScheduler+0xf0>)
 8009e3c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009e40:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009e42:	f000 f8dd 	bl	800a000 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009e46:	4b0f      	ldr	r3, [pc, #60]	; (8009e84 <xPortStartScheduler+0xf4>)
 8009e48:	2200      	movs	r2, #0
 8009e4a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009e4c:	f000 f8fc 	bl	800a048 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009e50:	4b0d      	ldr	r3, [pc, #52]	; (8009e88 <xPortStartScheduler+0xf8>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4a0c      	ldr	r2, [pc, #48]	; (8009e88 <xPortStartScheduler+0xf8>)
 8009e56:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009e5a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009e5c:	f7ff ff84 	bl	8009d68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009e60:	f7ff f81e 	bl	8008ea0 <vTaskSwitchContext>
	prvTaskExitError();
 8009e64:	f7ff ff3c 	bl	8009ce0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009e68:	2300      	movs	r3, #0
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3710      	adds	r7, #16
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	e000e400 	.word	0xe000e400
 8009e78:	20007d14 	.word	0x20007d14
 8009e7c:	20007d18 	.word	0x20007d18
 8009e80:	e000ed20 	.word	0xe000ed20
 8009e84:	20000010 	.word	0x20000010
 8009e88:	e000ef34 	.word	0xe000ef34

08009e8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
	__asm volatile
 8009e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e96:	b672      	cpsid	i
 8009e98:	f383 8811 	msr	BASEPRI, r3
 8009e9c:	f3bf 8f6f 	isb	sy
 8009ea0:	f3bf 8f4f 	dsb	sy
 8009ea4:	b662      	cpsie	i
 8009ea6:	607b      	str	r3, [r7, #4]
}
 8009ea8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009eaa:	4b10      	ldr	r3, [pc, #64]	; (8009eec <vPortEnterCritical+0x60>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	3301      	adds	r3, #1
 8009eb0:	4a0e      	ldr	r2, [pc, #56]	; (8009eec <vPortEnterCritical+0x60>)
 8009eb2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009eb4:	4b0d      	ldr	r3, [pc, #52]	; (8009eec <vPortEnterCritical+0x60>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d111      	bne.n	8009ee0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009ebc:	4b0c      	ldr	r3, [pc, #48]	; (8009ef0 <vPortEnterCritical+0x64>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d00c      	beq.n	8009ee0 <vPortEnterCritical+0x54>
	__asm volatile
 8009ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eca:	b672      	cpsid	i
 8009ecc:	f383 8811 	msr	BASEPRI, r3
 8009ed0:	f3bf 8f6f 	isb	sy
 8009ed4:	f3bf 8f4f 	dsb	sy
 8009ed8:	b662      	cpsie	i
 8009eda:	603b      	str	r3, [r7, #0]
}
 8009edc:	bf00      	nop
 8009ede:	e7fe      	b.n	8009ede <vPortEnterCritical+0x52>
	}
}
 8009ee0:	bf00      	nop
 8009ee2:	370c      	adds	r7, #12
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr
 8009eec:	20000010 	.word	0x20000010
 8009ef0:	e000ed04 	.word	0xe000ed04

08009ef4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b083      	sub	sp, #12
 8009ef8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009efa:	4b13      	ldr	r3, [pc, #76]	; (8009f48 <vPortExitCritical+0x54>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d10c      	bne.n	8009f1c <vPortExitCritical+0x28>
	__asm volatile
 8009f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f06:	b672      	cpsid	i
 8009f08:	f383 8811 	msr	BASEPRI, r3
 8009f0c:	f3bf 8f6f 	isb	sy
 8009f10:	f3bf 8f4f 	dsb	sy
 8009f14:	b662      	cpsie	i
 8009f16:	607b      	str	r3, [r7, #4]
}
 8009f18:	bf00      	nop
 8009f1a:	e7fe      	b.n	8009f1a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009f1c:	4b0a      	ldr	r3, [pc, #40]	; (8009f48 <vPortExitCritical+0x54>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	3b01      	subs	r3, #1
 8009f22:	4a09      	ldr	r2, [pc, #36]	; (8009f48 <vPortExitCritical+0x54>)
 8009f24:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009f26:	4b08      	ldr	r3, [pc, #32]	; (8009f48 <vPortExitCritical+0x54>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d105      	bne.n	8009f3a <vPortExitCritical+0x46>
 8009f2e:	2300      	movs	r3, #0
 8009f30:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	f383 8811 	msr	BASEPRI, r3
}
 8009f38:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009f3a:	bf00      	nop
 8009f3c:	370c      	adds	r7, #12
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f44:	4770      	bx	lr
 8009f46:	bf00      	nop
 8009f48:	20000010 	.word	0x20000010
 8009f4c:	00000000 	.word	0x00000000

08009f50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009f50:	f3ef 8009 	mrs	r0, PSP
 8009f54:	f3bf 8f6f 	isb	sy
 8009f58:	4b15      	ldr	r3, [pc, #84]	; (8009fb0 <pxCurrentTCBConst>)
 8009f5a:	681a      	ldr	r2, [r3, #0]
 8009f5c:	f01e 0f10 	tst.w	lr, #16
 8009f60:	bf08      	it	eq
 8009f62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009f66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f6a:	6010      	str	r0, [r2, #0]
 8009f6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009f70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009f74:	b672      	cpsid	i
 8009f76:	f380 8811 	msr	BASEPRI, r0
 8009f7a:	f3bf 8f4f 	dsb	sy
 8009f7e:	f3bf 8f6f 	isb	sy
 8009f82:	b662      	cpsie	i
 8009f84:	f7fe ff8c 	bl	8008ea0 <vTaskSwitchContext>
 8009f88:	f04f 0000 	mov.w	r0, #0
 8009f8c:	f380 8811 	msr	BASEPRI, r0
 8009f90:	bc09      	pop	{r0, r3}
 8009f92:	6819      	ldr	r1, [r3, #0]
 8009f94:	6808      	ldr	r0, [r1, #0]
 8009f96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f9a:	f01e 0f10 	tst.w	lr, #16
 8009f9e:	bf08      	it	eq
 8009fa0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009fa4:	f380 8809 	msr	PSP, r0
 8009fa8:	f3bf 8f6f 	isb	sy
 8009fac:	4770      	bx	lr
 8009fae:	bf00      	nop

08009fb0 <pxCurrentTCBConst>:
 8009fb0:	200076e8 	.word	0x200076e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009fb4:	bf00      	nop
 8009fb6:	bf00      	nop

08009fb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b082      	sub	sp, #8
 8009fbc:	af00      	add	r7, sp, #0
	__asm volatile
 8009fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc2:	b672      	cpsid	i
 8009fc4:	f383 8811 	msr	BASEPRI, r3
 8009fc8:	f3bf 8f6f 	isb	sy
 8009fcc:	f3bf 8f4f 	dsb	sy
 8009fd0:	b662      	cpsie	i
 8009fd2:	607b      	str	r3, [r7, #4]
}
 8009fd4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009fd6:	f7fe fea7 	bl	8008d28 <xTaskIncrementTick>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d003      	beq.n	8009fe8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009fe0:	4b06      	ldr	r3, [pc, #24]	; (8009ffc <SysTick_Handler+0x44>)
 8009fe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fe6:	601a      	str	r2, [r3, #0]
 8009fe8:	2300      	movs	r3, #0
 8009fea:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	f383 8811 	msr	BASEPRI, r3
}
 8009ff2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009ff4:	bf00      	nop
 8009ff6:	3708      	adds	r7, #8
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}
 8009ffc:	e000ed04 	.word	0xe000ed04

0800a000 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a000:	b480      	push	{r7}
 800a002:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a004:	4b0b      	ldr	r3, [pc, #44]	; (800a034 <vPortSetupTimerInterrupt+0x34>)
 800a006:	2200      	movs	r2, #0
 800a008:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a00a:	4b0b      	ldr	r3, [pc, #44]	; (800a038 <vPortSetupTimerInterrupt+0x38>)
 800a00c:	2200      	movs	r2, #0
 800a00e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a010:	4b0a      	ldr	r3, [pc, #40]	; (800a03c <vPortSetupTimerInterrupt+0x3c>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a0a      	ldr	r2, [pc, #40]	; (800a040 <vPortSetupTimerInterrupt+0x40>)
 800a016:	fba2 2303 	umull	r2, r3, r2, r3
 800a01a:	099b      	lsrs	r3, r3, #6
 800a01c:	4a09      	ldr	r2, [pc, #36]	; (800a044 <vPortSetupTimerInterrupt+0x44>)
 800a01e:	3b01      	subs	r3, #1
 800a020:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a022:	4b04      	ldr	r3, [pc, #16]	; (800a034 <vPortSetupTimerInterrupt+0x34>)
 800a024:	2207      	movs	r2, #7
 800a026:	601a      	str	r2, [r3, #0]
}
 800a028:	bf00      	nop
 800a02a:	46bd      	mov	sp, r7
 800a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a030:	4770      	bx	lr
 800a032:	bf00      	nop
 800a034:	e000e010 	.word	0xe000e010
 800a038:	e000e018 	.word	0xe000e018
 800a03c:	20000004 	.word	0x20000004
 800a040:	10624dd3 	.word	0x10624dd3
 800a044:	e000e014 	.word	0xe000e014

0800a048 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a048:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a058 <vPortEnableVFP+0x10>
 800a04c:	6801      	ldr	r1, [r0, #0]
 800a04e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a052:	6001      	str	r1, [r0, #0]
 800a054:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a056:	bf00      	nop
 800a058:	e000ed88 	.word	0xe000ed88

0800a05c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a05c:	b480      	push	{r7}
 800a05e:	b085      	sub	sp, #20
 800a060:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a062:	f3ef 8305 	mrs	r3, IPSR
 800a066:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2b0f      	cmp	r3, #15
 800a06c:	d916      	bls.n	800a09c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a06e:	4a19      	ldr	r2, [pc, #100]	; (800a0d4 <vPortValidateInterruptPriority+0x78>)
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	4413      	add	r3, r2
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a078:	4b17      	ldr	r3, [pc, #92]	; (800a0d8 <vPortValidateInterruptPriority+0x7c>)
 800a07a:	781b      	ldrb	r3, [r3, #0]
 800a07c:	7afa      	ldrb	r2, [r7, #11]
 800a07e:	429a      	cmp	r2, r3
 800a080:	d20c      	bcs.n	800a09c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800a082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a086:	b672      	cpsid	i
 800a088:	f383 8811 	msr	BASEPRI, r3
 800a08c:	f3bf 8f6f 	isb	sy
 800a090:	f3bf 8f4f 	dsb	sy
 800a094:	b662      	cpsie	i
 800a096:	607b      	str	r3, [r7, #4]
}
 800a098:	bf00      	nop
 800a09a:	e7fe      	b.n	800a09a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a09c:	4b0f      	ldr	r3, [pc, #60]	; (800a0dc <vPortValidateInterruptPriority+0x80>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a0a4:	4b0e      	ldr	r3, [pc, #56]	; (800a0e0 <vPortValidateInterruptPriority+0x84>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d90c      	bls.n	800a0c6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800a0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b0:	b672      	cpsid	i
 800a0b2:	f383 8811 	msr	BASEPRI, r3
 800a0b6:	f3bf 8f6f 	isb	sy
 800a0ba:	f3bf 8f4f 	dsb	sy
 800a0be:	b662      	cpsie	i
 800a0c0:	603b      	str	r3, [r7, #0]
}
 800a0c2:	bf00      	nop
 800a0c4:	e7fe      	b.n	800a0c4 <vPortValidateInterruptPriority+0x68>
	}
 800a0c6:	bf00      	nop
 800a0c8:	3714      	adds	r7, #20
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr
 800a0d2:	bf00      	nop
 800a0d4:	e000e3f0 	.word	0xe000e3f0
 800a0d8:	20007d14 	.word	0x20007d14
 800a0dc:	e000ed0c 	.word	0xe000ed0c
 800a0e0:	20007d18 	.word	0x20007d18

0800a0e4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b08a      	sub	sp, #40	; 0x28
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a0f0:	f7fe fd5c 	bl	8008bac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a0f4:	4b5b      	ldr	r3, [pc, #364]	; (800a264 <pvPortMalloc+0x180>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d101      	bne.n	800a100 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a0fc:	f000 f91a 	bl	800a334 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a100:	4b59      	ldr	r3, [pc, #356]	; (800a268 <pvPortMalloc+0x184>)
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	4013      	ands	r3, r2
 800a108:	2b00      	cmp	r3, #0
 800a10a:	f040 8092 	bne.w	800a232 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d01f      	beq.n	800a154 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800a114:	2208      	movs	r2, #8
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	4413      	add	r3, r2
 800a11a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f003 0307 	and.w	r3, r3, #7
 800a122:	2b00      	cmp	r3, #0
 800a124:	d016      	beq.n	800a154 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f023 0307 	bic.w	r3, r3, #7
 800a12c:	3308      	adds	r3, #8
 800a12e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f003 0307 	and.w	r3, r3, #7
 800a136:	2b00      	cmp	r3, #0
 800a138:	d00c      	beq.n	800a154 <pvPortMalloc+0x70>
	__asm volatile
 800a13a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a13e:	b672      	cpsid	i
 800a140:	f383 8811 	msr	BASEPRI, r3
 800a144:	f3bf 8f6f 	isb	sy
 800a148:	f3bf 8f4f 	dsb	sy
 800a14c:	b662      	cpsie	i
 800a14e:	617b      	str	r3, [r7, #20]
}
 800a150:	bf00      	nop
 800a152:	e7fe      	b.n	800a152 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d06b      	beq.n	800a232 <pvPortMalloc+0x14e>
 800a15a:	4b44      	ldr	r3, [pc, #272]	; (800a26c <pvPortMalloc+0x188>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	429a      	cmp	r2, r3
 800a162:	d866      	bhi.n	800a232 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a164:	4b42      	ldr	r3, [pc, #264]	; (800a270 <pvPortMalloc+0x18c>)
 800a166:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a168:	4b41      	ldr	r3, [pc, #260]	; (800a270 <pvPortMalloc+0x18c>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a16e:	e004      	b.n	800a17a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800a170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a172:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	687a      	ldr	r2, [r7, #4]
 800a180:	429a      	cmp	r2, r3
 800a182:	d903      	bls.n	800a18c <pvPortMalloc+0xa8>
 800a184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d1f1      	bne.n	800a170 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a18c:	4b35      	ldr	r3, [pc, #212]	; (800a264 <pvPortMalloc+0x180>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a192:	429a      	cmp	r2, r3
 800a194:	d04d      	beq.n	800a232 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a196:	6a3b      	ldr	r3, [r7, #32]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	2208      	movs	r2, #8
 800a19c:	4413      	add	r3, r2
 800a19e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a2:	681a      	ldr	r2, [r3, #0]
 800a1a4:	6a3b      	ldr	r3, [r7, #32]
 800a1a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1aa:	685a      	ldr	r2, [r3, #4]
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	1ad2      	subs	r2, r2, r3
 800a1b0:	2308      	movs	r3, #8
 800a1b2:	005b      	lsls	r3, r3, #1
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d921      	bls.n	800a1fc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a1b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	4413      	add	r3, r2
 800a1be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1c0:	69bb      	ldr	r3, [r7, #24]
 800a1c2:	f003 0307 	and.w	r3, r3, #7
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d00c      	beq.n	800a1e4 <pvPortMalloc+0x100>
	__asm volatile
 800a1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ce:	b672      	cpsid	i
 800a1d0:	f383 8811 	msr	BASEPRI, r3
 800a1d4:	f3bf 8f6f 	isb	sy
 800a1d8:	f3bf 8f4f 	dsb	sy
 800a1dc:	b662      	cpsie	i
 800a1de:	613b      	str	r3, [r7, #16]
}
 800a1e0:	bf00      	nop
 800a1e2:	e7fe      	b.n	800a1e2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e6:	685a      	ldr	r2, [r3, #4]
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	1ad2      	subs	r2, r2, r3
 800a1ec:	69bb      	ldr	r3, [r7, #24]
 800a1ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f2:	687a      	ldr	r2, [r7, #4]
 800a1f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a1f6:	69b8      	ldr	r0, [r7, #24]
 800a1f8:	f000 f8fe 	bl	800a3f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a1fc:	4b1b      	ldr	r3, [pc, #108]	; (800a26c <pvPortMalloc+0x188>)
 800a1fe:	681a      	ldr	r2, [r3, #0]
 800a200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	1ad3      	subs	r3, r2, r3
 800a206:	4a19      	ldr	r2, [pc, #100]	; (800a26c <pvPortMalloc+0x188>)
 800a208:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a20a:	4b18      	ldr	r3, [pc, #96]	; (800a26c <pvPortMalloc+0x188>)
 800a20c:	681a      	ldr	r2, [r3, #0]
 800a20e:	4b19      	ldr	r3, [pc, #100]	; (800a274 <pvPortMalloc+0x190>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	429a      	cmp	r2, r3
 800a214:	d203      	bcs.n	800a21e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a216:	4b15      	ldr	r3, [pc, #84]	; (800a26c <pvPortMalloc+0x188>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4a16      	ldr	r2, [pc, #88]	; (800a274 <pvPortMalloc+0x190>)
 800a21c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a220:	685a      	ldr	r2, [r3, #4]
 800a222:	4b11      	ldr	r3, [pc, #68]	; (800a268 <pvPortMalloc+0x184>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	431a      	orrs	r2, r3
 800a228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22e:	2200      	movs	r2, #0
 800a230:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a232:	f7fe fcc9 	bl	8008bc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a236:	69fb      	ldr	r3, [r7, #28]
 800a238:	f003 0307 	and.w	r3, r3, #7
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d00c      	beq.n	800a25a <pvPortMalloc+0x176>
	__asm volatile
 800a240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a244:	b672      	cpsid	i
 800a246:	f383 8811 	msr	BASEPRI, r3
 800a24a:	f3bf 8f6f 	isb	sy
 800a24e:	f3bf 8f4f 	dsb	sy
 800a252:	b662      	cpsie	i
 800a254:	60fb      	str	r3, [r7, #12]
}
 800a256:	bf00      	nop
 800a258:	e7fe      	b.n	800a258 <pvPortMalloc+0x174>
	return pvReturn;
 800a25a:	69fb      	ldr	r3, [r7, #28]
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3728      	adds	r7, #40	; 0x28
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}
 800a264:	2000b924 	.word	0x2000b924
 800a268:	2000b930 	.word	0x2000b930
 800a26c:	2000b928 	.word	0x2000b928
 800a270:	2000b91c 	.word	0x2000b91c
 800a274:	2000b92c 	.word	0x2000b92c

0800a278 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b086      	sub	sp, #24
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d04c      	beq.n	800a324 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a28a:	2308      	movs	r3, #8
 800a28c:	425b      	negs	r3, r3
 800a28e:	697a      	ldr	r2, [r7, #20]
 800a290:	4413      	add	r3, r2
 800a292:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	685a      	ldr	r2, [r3, #4]
 800a29c:	4b23      	ldr	r3, [pc, #140]	; (800a32c <vPortFree+0xb4>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4013      	ands	r3, r2
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d10c      	bne.n	800a2c0 <vPortFree+0x48>
	__asm volatile
 800a2a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2aa:	b672      	cpsid	i
 800a2ac:	f383 8811 	msr	BASEPRI, r3
 800a2b0:	f3bf 8f6f 	isb	sy
 800a2b4:	f3bf 8f4f 	dsb	sy
 800a2b8:	b662      	cpsie	i
 800a2ba:	60fb      	str	r3, [r7, #12]
}
 800a2bc:	bf00      	nop
 800a2be:	e7fe      	b.n	800a2be <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d00c      	beq.n	800a2e2 <vPortFree+0x6a>
	__asm volatile
 800a2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2cc:	b672      	cpsid	i
 800a2ce:	f383 8811 	msr	BASEPRI, r3
 800a2d2:	f3bf 8f6f 	isb	sy
 800a2d6:	f3bf 8f4f 	dsb	sy
 800a2da:	b662      	cpsie	i
 800a2dc:	60bb      	str	r3, [r7, #8]
}
 800a2de:	bf00      	nop
 800a2e0:	e7fe      	b.n	800a2e0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	685a      	ldr	r2, [r3, #4]
 800a2e6:	4b11      	ldr	r3, [pc, #68]	; (800a32c <vPortFree+0xb4>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	4013      	ands	r3, r2
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d019      	beq.n	800a324 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d115      	bne.n	800a324 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	685a      	ldr	r2, [r3, #4]
 800a2fc:	4b0b      	ldr	r3, [pc, #44]	; (800a32c <vPortFree+0xb4>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	43db      	mvns	r3, r3
 800a302:	401a      	ands	r2, r3
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a308:	f7fe fc50 	bl	8008bac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	685a      	ldr	r2, [r3, #4]
 800a310:	4b07      	ldr	r3, [pc, #28]	; (800a330 <vPortFree+0xb8>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4413      	add	r3, r2
 800a316:	4a06      	ldr	r2, [pc, #24]	; (800a330 <vPortFree+0xb8>)
 800a318:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a31a:	6938      	ldr	r0, [r7, #16]
 800a31c:	f000 f86c 	bl	800a3f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a320:	f7fe fc52 	bl	8008bc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a324:	bf00      	nop
 800a326:	3718      	adds	r7, #24
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}
 800a32c:	2000b930 	.word	0x2000b930
 800a330:	2000b928 	.word	0x2000b928

0800a334 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a334:	b480      	push	{r7}
 800a336:	b085      	sub	sp, #20
 800a338:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a33a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a33e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a340:	4b27      	ldr	r3, [pc, #156]	; (800a3e0 <prvHeapInit+0xac>)
 800a342:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f003 0307 	and.w	r3, r3, #7
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d00c      	beq.n	800a368 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	3307      	adds	r3, #7
 800a352:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f023 0307 	bic.w	r3, r3, #7
 800a35a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a35c:	68ba      	ldr	r2, [r7, #8]
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	1ad3      	subs	r3, r2, r3
 800a362:	4a1f      	ldr	r2, [pc, #124]	; (800a3e0 <prvHeapInit+0xac>)
 800a364:	4413      	add	r3, r2
 800a366:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a36c:	4a1d      	ldr	r2, [pc, #116]	; (800a3e4 <prvHeapInit+0xb0>)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a372:	4b1c      	ldr	r3, [pc, #112]	; (800a3e4 <prvHeapInit+0xb0>)
 800a374:	2200      	movs	r2, #0
 800a376:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	68ba      	ldr	r2, [r7, #8]
 800a37c:	4413      	add	r3, r2
 800a37e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a380:	2208      	movs	r2, #8
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	1a9b      	subs	r3, r3, r2
 800a386:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f023 0307 	bic.w	r3, r3, #7
 800a38e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	4a15      	ldr	r2, [pc, #84]	; (800a3e8 <prvHeapInit+0xb4>)
 800a394:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a396:	4b14      	ldr	r3, [pc, #80]	; (800a3e8 <prvHeapInit+0xb4>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	2200      	movs	r2, #0
 800a39c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a39e:	4b12      	ldr	r3, [pc, #72]	; (800a3e8 <prvHeapInit+0xb4>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	68fa      	ldr	r2, [r7, #12]
 800a3ae:	1ad2      	subs	r2, r2, r3
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a3b4:	4b0c      	ldr	r3, [pc, #48]	; (800a3e8 <prvHeapInit+0xb4>)
 800a3b6:	681a      	ldr	r2, [r3, #0]
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	4a0a      	ldr	r2, [pc, #40]	; (800a3ec <prvHeapInit+0xb8>)
 800a3c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	4a09      	ldr	r2, [pc, #36]	; (800a3f0 <prvHeapInit+0xbc>)
 800a3ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a3cc:	4b09      	ldr	r3, [pc, #36]	; (800a3f4 <prvHeapInit+0xc0>)
 800a3ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a3d2:	601a      	str	r2, [r3, #0]
}
 800a3d4:	bf00      	nop
 800a3d6:	3714      	adds	r7, #20
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3de:	4770      	bx	lr
 800a3e0:	20007d1c 	.word	0x20007d1c
 800a3e4:	2000b91c 	.word	0x2000b91c
 800a3e8:	2000b924 	.word	0x2000b924
 800a3ec:	2000b92c 	.word	0x2000b92c
 800a3f0:	2000b928 	.word	0x2000b928
 800a3f4:	2000b930 	.word	0x2000b930

0800a3f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b085      	sub	sp, #20
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a400:	4b28      	ldr	r3, [pc, #160]	; (800a4a4 <prvInsertBlockIntoFreeList+0xac>)
 800a402:	60fb      	str	r3, [r7, #12]
 800a404:	e002      	b.n	800a40c <prvInsertBlockIntoFreeList+0x14>
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	60fb      	str	r3, [r7, #12]
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	687a      	ldr	r2, [r7, #4]
 800a412:	429a      	cmp	r2, r3
 800a414:	d8f7      	bhi.n	800a406 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	68ba      	ldr	r2, [r7, #8]
 800a420:	4413      	add	r3, r2
 800a422:	687a      	ldr	r2, [r7, #4]
 800a424:	429a      	cmp	r2, r3
 800a426:	d108      	bne.n	800a43a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	685a      	ldr	r2, [r3, #4]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	685b      	ldr	r3, [r3, #4]
 800a430:	441a      	add	r2, r3
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	68ba      	ldr	r2, [r7, #8]
 800a444:	441a      	add	r2, r3
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d118      	bne.n	800a480 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681a      	ldr	r2, [r3, #0]
 800a452:	4b15      	ldr	r3, [pc, #84]	; (800a4a8 <prvInsertBlockIntoFreeList+0xb0>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	429a      	cmp	r2, r3
 800a458:	d00d      	beq.n	800a476 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	685a      	ldr	r2, [r3, #4]
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	441a      	add	r2, r3
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	681a      	ldr	r2, [r3, #0]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	601a      	str	r2, [r3, #0]
 800a474:	e008      	b.n	800a488 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a476:	4b0c      	ldr	r3, [pc, #48]	; (800a4a8 <prvInsertBlockIntoFreeList+0xb0>)
 800a478:	681a      	ldr	r2, [r3, #0]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	601a      	str	r2, [r3, #0]
 800a47e:	e003      	b.n	800a488 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681a      	ldr	r2, [r3, #0]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a488:	68fa      	ldr	r2, [r7, #12]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	429a      	cmp	r2, r3
 800a48e:	d002      	beq.n	800a496 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	687a      	ldr	r2, [r7, #4]
 800a494:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a496:	bf00      	nop
 800a498:	3714      	adds	r7, #20
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr
 800a4a2:	bf00      	nop
 800a4a4:	2000b91c 	.word	0x2000b91c
 800a4a8:	2000b924 	.word	0x2000b924

0800a4ac <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control>:
 800a4ac:	4b04      	ldr	r3, [pc, #16]	; (800a4c0 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x14>)
 800a4ae:	681a      	ldr	r2, [r3, #0]
 800a4b0:	b10a      	cbz	r2, 800a4b6 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0xa>
 800a4b2:	4803      	ldr	r0, [pc, #12]	; (800a4c0 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x14>)
 800a4b4:	4770      	bx	lr
 800a4b6:	4a03      	ldr	r2, [pc, #12]	; (800a4c4 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x18>)
 800a4b8:	4801      	ldr	r0, [pc, #4]	; (800a4c0 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x14>)
 800a4ba:	6812      	ldr	r2, [r2, #0]
 800a4bc:	601a      	str	r2, [r3, #0]
 800a4be:	4770      	bx	lr
 800a4c0:	2000001c 	.word	0x2000001c
 800a4c4:	20000974 	.word	0x20000974

0800a4c8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request>:
 800a4c8:	4b06      	ldr	r3, [pc, #24]	; (800a4e4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x1c>)
 800a4ca:	4807      	ldr	r0, [pc, #28]	; (800a4e8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x20>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4907      	ldr	r1, [pc, #28]	; (800a4ec <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x24>)
 800a4d0:	4a07      	ldr	r2, [pc, #28]	; (800a4f0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x28>)
 800a4d2:	b410      	push	{r4}
 800a4d4:	4c07      	ldr	r4, [pc, #28]	; (800a4f4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x2c>)
 800a4d6:	6003      	str	r3, [r0, #0]
 800a4d8:	6023      	str	r3, [r4, #0]
 800a4da:	600b      	str	r3, [r1, #0]
 800a4dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4e0:	6013      	str	r3, [r2, #0]
 800a4e2:	4770      	bx	lr
 800a4e4:	20000974 	.word	0x20000974
 800a4e8:	20000090 	.word	0x20000090
 800a4ec:	20000050 	.word	0x20000050
 800a4f0:	2000001c 	.word	0x2000001c
 800a4f4:	20000078 	.word	0x20000078

0800a4f8 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup>:
 800a4f8:	4b04      	ldr	r3, [pc, #16]	; (800a50c <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x14>)
 800a4fa:	681a      	ldr	r2, [r3, #0]
 800a4fc:	b10a      	cbz	r2, 800a502 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0xa>
 800a4fe:	4803      	ldr	r0, [pc, #12]	; (800a50c <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x14>)
 800a500:	4770      	bx	lr
 800a502:	4a03      	ldr	r2, [pc, #12]	; (800a510 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x18>)
 800a504:	4801      	ldr	r0, [pc, #4]	; (800a50c <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x14>)
 800a506:	6812      	ldr	r2, [r2, #0]
 800a508:	601a      	str	r2, [r3, #0]
 800a50a:	4770      	bx	lr
 800a50c:	200000b0 	.word	0x200000b0
 800a510:	20000974 	.word	0x20000974

0800a514 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request>:
 800a514:	4b06      	ldr	r3, [pc, #24]	; (800a530 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x1c>)
 800a516:	4807      	ldr	r0, [pc, #28]	; (800a534 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x20>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4907      	ldr	r1, [pc, #28]	; (800a538 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x24>)
 800a51c:	4a07      	ldr	r2, [pc, #28]	; (800a53c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x28>)
 800a51e:	b410      	push	{r4}
 800a520:	4c07      	ldr	r4, [pc, #28]	; (800a540 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x2c>)
 800a522:	6003      	str	r3, [r0, #0]
 800a524:	6023      	str	r3, [r4, #0]
 800a526:	600b      	str	r3, [r1, #0]
 800a528:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a52c:	6013      	str	r3, [r2, #0]
 800a52e:	4770      	bx	lr
 800a530:	20000974 	.word	0x20000974
 800a534:	20000124 	.word	0x20000124
 800a538:	200000e4 	.word	0x200000e4
 800a53c:	200000b0 	.word	0x200000b0
 800a540:	2000010c 	.word	0x2000010c

0800a544 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__size_function__Control_Request__values>:
 800a544:	6840      	ldr	r0, [r0, #4]
 800a546:	4770      	bx	lr

0800a548 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__get_const_function__Control_Request__values>:
 800a548:	6800      	ldr	r0, [r0, #0]
 800a54a:	4408      	add	r0, r1
 800a54c:	4770      	bx	lr
 800a54e:	bf00      	nop

0800a550 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__fetch_function__Control_Request__values>:
 800a550:	6803      	ldr	r3, [r0, #0]
 800a552:	5c5b      	ldrb	r3, [r3, r1]
 800a554:	7013      	strb	r3, [r2, #0]
 800a556:	4770      	bx	lr

0800a558 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__assign_function__Control_Request__values>:
 800a558:	7812      	ldrb	r2, [r2, #0]
 800a55a:	6803      	ldr	r3, [r0, #0]
 800a55c:	545a      	strb	r2, [r3, r1]
 800a55e:	4770      	bx	lr

0800a560 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__size_function__Control_Event__request>:
 800a560:	6840      	ldr	r0, [r0, #4]
 800a562:	4770      	bx	lr

0800a564 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_const_function__Control_Event__request>:
 800a564:	6800      	ldr	r0, [r0, #0]
 800a566:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800a56a:	4770      	bx	lr

0800a56c <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__fetch_function__Control_Event__request>:
 800a56c:	6803      	ldr	r3, [r0, #0]
 800a56e:	4694      	mov	ip, r2
 800a570:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 800a574:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 800a576:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800a57a:	4770      	bx	lr

0800a57c <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__assign_function__Control_Event__request>:
 800a57c:	6803      	ldr	r3, [r0, #0]
 800a57e:	eb03 1c01 	add.w	ip, r3, r1, lsl #4
 800a582:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800a584:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800a588:	4770      	bx	lr
 800a58a:	bf00      	nop

0800a58c <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__size_function__Control_Event__response>:
 800a58c:	6840      	ldr	r0, [r0, #4]
 800a58e:	4770      	bx	lr

0800a590 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_const_function__Control_Event__response>:
 800a590:	6800      	ldr	r0, [r0, #0]
 800a592:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800a596:	4770      	bx	lr

0800a598 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__fetch_function__Control_Event__response>:
 800a598:	6803      	ldr	r3, [r0, #0]
 800a59a:	4694      	mov	ip, r2
 800a59c:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 800a5a0:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 800a5a2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800a5a6:	4770      	bx	lr

0800a5a8 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__assign_function__Control_Event__response>:
 800a5a8:	6803      	ldr	r3, [r0, #0]
 800a5aa:	eb03 1c01 	add.w	ip, r3, r1, lsl #4
 800a5ae:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800a5b0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800a5b4:	4770      	bx	lr
 800a5b6:	bf00      	nop

0800a5b8 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__Control_Request_init_function>:
 800a5b8:	f003 bf90 	b.w	800e4dc <racs_services__srv__Control_Request__init>

0800a5bc <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__Control_Request_fini_function>:
 800a5bc:	f003 bfa2 	b.w	800e504 <racs_services__srv__Control_Request__fini>

0800a5c0 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__resize_function__Control_Request__values>:
 800a5c0:	b510      	push	{r4, lr}
 800a5c2:	4604      	mov	r4, r0
 800a5c4:	b082      	sub	sp, #8
 800a5c6:	9101      	str	r1, [sp, #4]
 800a5c8:	f001 fe9e 	bl	800c308 <rosidl_runtime_c__uint8__Sequence__fini>
 800a5cc:	9901      	ldr	r1, [sp, #4]
 800a5ce:	4620      	mov	r0, r4
 800a5d0:	b002      	add	sp, #8
 800a5d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5d6:	f001 be7f 	b.w	800c2d8 <rosidl_runtime_c__uint8__Sequence__init>
 800a5da:	bf00      	nop

0800a5dc <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__Control_Response_init_function>:
 800a5dc:	f003 bfd4 	b.w	800e588 <racs_services__srv__Control_Response__init>

0800a5e0 <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__Control_Response_fini_function>:
 800a5e0:	f003 bfe6 	b.w	800e5b0 <racs_services__srv__Control_Response__fini>

0800a5e4 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__Control_Event_init_function>:
 800a5e4:	f004 b820 	b.w	800e628 <racs_services__srv__Control_Event__init>

0800a5e8 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__Control_Event_fini_function>:
 800a5e8:	f004 b882 	b.w	800e6f0 <racs_services__srv__Control_Event__fini>

0800a5ec <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__resize_function__Control_Event__request>:
 800a5ec:	b510      	push	{r4, lr}
 800a5ee:	4604      	mov	r4, r0
 800a5f0:	b082      	sub	sp, #8
 800a5f2:	9101      	str	r1, [sp, #4]
 800a5f4:	f003 ffa0 	bl	800e538 <racs_services__srv__Control_Request__Sequence__fini>
 800a5f8:	9901      	ldr	r1, [sp, #4]
 800a5fa:	4620      	mov	r0, r4
 800a5fc:	b002      	add	sp, #8
 800a5fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a602:	f003 bf95 	b.w	800e530 <racs_services__srv__Control_Request__Sequence__init>
 800a606:	bf00      	nop

0800a608 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__resize_function__Control_Event__response>:
 800a608:	b510      	push	{r4, lr}
 800a60a:	4604      	mov	r4, r0
 800a60c:	b082      	sub	sp, #8
 800a60e:	9101      	str	r1, [sp, #4]
 800a610:	f003 ffe2 	bl	800e5d8 <racs_services__srv__Control_Response__Sequence__fini>
 800a614:	9901      	ldr	r1, [sp, #4]
 800a616:	4620      	mov	r0, r4
 800a618:	b002      	add	sp, #8
 800a61a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a61e:	f003 bfd7 	b.w	800e5d0 <racs_services__srv__Control_Response__Sequence__init>
 800a622:	bf00      	nop

0800a624 <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__get_function__Control_Response__encoders>:
 800a624:	6800      	ldr	r0, [r0, #0]
 800a626:	4408      	add	r0, r1
 800a628:	4770      	bx	lr
 800a62a:	bf00      	nop

0800a62c <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__get_function__Control_Request__values>:
 800a62c:	6800      	ldr	r0, [r0, #0]
 800a62e:	4408      	add	r0, r1
 800a630:	4770      	bx	lr
 800a632:	bf00      	nop

0800a634 <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__size_function__Control_Response__encoders>:
 800a634:	6840      	ldr	r0, [r0, #4]
 800a636:	4770      	bx	lr

0800a638 <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__get_const_function__Control_Response__encoders>:
 800a638:	6800      	ldr	r0, [r0, #0]
 800a63a:	4408      	add	r0, r1
 800a63c:	4770      	bx	lr
 800a63e:	bf00      	nop

0800a640 <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__fetch_function__Control_Response__encoders>:
 800a640:	6803      	ldr	r3, [r0, #0]
 800a642:	5c5b      	ldrb	r3, [r3, r1]
 800a644:	7013      	strb	r3, [r2, #0]
 800a646:	4770      	bx	lr

0800a648 <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__assign_function__Control_Response__encoders>:
 800a648:	7812      	ldrb	r2, [r2, #0]
 800a64a:	6803      	ldr	r3, [r0, #0]
 800a64c:	545a      	strb	r2, [r3, r1]
 800a64e:	4770      	bx	lr

0800a650 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_function__Control_Event__request>:
 800a650:	6800      	ldr	r0, [r0, #0]
 800a652:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800a656:	4770      	bx	lr

0800a658 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_function__Control_Event__response>:
 800a658:	6800      	ldr	r0, [r0, #0]
 800a65a:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800a65e:	4770      	bx	lr

0800a660 <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__resize_function__Control_Response__encoders>:
 800a660:	b510      	push	{r4, lr}
 800a662:	4604      	mov	r4, r0
 800a664:	b082      	sub	sp, #8
 800a666:	9101      	str	r1, [sp, #4]
 800a668:	f001 fe4e 	bl	800c308 <rosidl_runtime_c__uint8__Sequence__fini>
 800a66c:	9901      	ldr	r1, [sp, #4]
 800a66e:	4620      	mov	r0, r4
 800a670:	b002      	add	sp, #8
 800a672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a676:	f001 be2f 	b.w	800c2d8 <rosidl_runtime_c__uint8__Sequence__init>
 800a67a:	bf00      	nop

0800a67c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request>:
 800a67c:	4b04      	ldr	r3, [pc, #16]	; (800a690 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x14>)
 800a67e:	681a      	ldr	r2, [r3, #0]
 800a680:	b10a      	cbz	r2, 800a686 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0xa>
 800a682:	4803      	ldr	r0, [pc, #12]	; (800a690 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x14>)
 800a684:	4770      	bx	lr
 800a686:	4a03      	ldr	r2, [pc, #12]	; (800a694 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x18>)
 800a688:	4801      	ldr	r0, [pc, #4]	; (800a690 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x14>)
 800a68a:	6812      	ldr	r2, [r2, #0]
 800a68c:	601a      	str	r2, [r3, #0]
 800a68e:	4770      	bx	lr
 800a690:	200002f8 	.word	0x200002f8
 800a694:	20000978 	.word	0x20000978

0800a698 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response>:
 800a698:	4b04      	ldr	r3, [pc, #16]	; (800a6ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x14>)
 800a69a:	681a      	ldr	r2, [r3, #0]
 800a69c:	b10a      	cbz	r2, 800a6a2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0xa>
 800a69e:	4803      	ldr	r0, [pc, #12]	; (800a6ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x14>)
 800a6a0:	4770      	bx	lr
 800a6a2:	4a03      	ldr	r2, [pc, #12]	; (800a6b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x18>)
 800a6a4:	4801      	ldr	r0, [pc, #4]	; (800a6ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x14>)
 800a6a6:	6812      	ldr	r2, [r2, #0]
 800a6a8:	601a      	str	r2, [r3, #0]
 800a6aa:	4770      	bx	lr
 800a6ac:	2000043c 	.word	0x2000043c
 800a6b0:	20000978 	.word	0x20000978

0800a6b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event>:
 800a6b4:	b508      	push	{r3, lr}
 800a6b6:	f001 fee1 	bl	800c47c <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800a6ba:	4913      	ldr	r1, [pc, #76]	; (800a708 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x54>)
 800a6bc:	4b13      	ldr	r3, [pc, #76]	; (800a70c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x58>)
 800a6be:	680a      	ldr	r2, [r1, #0]
 800a6c0:	60d8      	str	r0, [r3, #12]
 800a6c2:	b152      	cbz	r2, 800a6da <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x26>
 800a6c4:	4a12      	ldr	r2, [pc, #72]	; (800a710 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x5c>)
 800a6c6:	6499      	str	r1, [r3, #72]	; 0x48
 800a6c8:	6811      	ldr	r1, [r2, #0]
 800a6ca:	b171      	cbz	r1, 800a6ea <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x36>
 800a6cc:	4911      	ldr	r1, [pc, #68]	; (800a714 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800a6ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800a6d2:	680b      	ldr	r3, [r1, #0]
 800a6d4:	b193      	cbz	r3, 800a6fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x48>
 800a6d6:	480f      	ldr	r0, [pc, #60]	; (800a714 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800a6d8:	bd08      	pop	{r3, pc}
 800a6da:	4a0f      	ldr	r2, [pc, #60]	; (800a718 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x64>)
 800a6dc:	6499      	str	r1, [r3, #72]	; 0x48
 800a6de:	6812      	ldr	r2, [r2, #0]
 800a6e0:	600a      	str	r2, [r1, #0]
 800a6e2:	4a0b      	ldr	r2, [pc, #44]	; (800a710 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x5c>)
 800a6e4:	6811      	ldr	r1, [r2, #0]
 800a6e6:	2900      	cmp	r1, #0
 800a6e8:	d1f0      	bne.n	800a6cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x18>
 800a6ea:	490b      	ldr	r1, [pc, #44]	; (800a718 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x64>)
 800a6ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800a6f0:	6809      	ldr	r1, [r1, #0]
 800a6f2:	6011      	str	r1, [r2, #0]
 800a6f4:	4907      	ldr	r1, [pc, #28]	; (800a714 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800a6f6:	680b      	ldr	r3, [r1, #0]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d1ec      	bne.n	800a6d6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x22>
 800a6fc:	4b06      	ldr	r3, [pc, #24]	; (800a718 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x64>)
 800a6fe:	4805      	ldr	r0, [pc, #20]	; (800a714 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	600b      	str	r3, [r1, #0]
 800a704:	bd08      	pop	{r3, pc}
 800a706:	bf00      	nop
 800a708:	200002f8 	.word	0x200002f8
 800a70c:	2000013c 	.word	0x2000013c
 800a710:	2000043c 	.word	0x2000043c
 800a714:	200001f0 	.word	0x200001f0
 800a718:	20000978 	.word	0x20000978

0800a71c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control>:
 800a71c:	4b25      	ldr	r3, [pc, #148]	; (800a7b4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x98>)
 800a71e:	681a      	ldr	r2, [r3, #0]
 800a720:	b510      	push	{r4, lr}
 800a722:	b142      	cbz	r2, 800a736 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x1a>
 800a724:	685c      	ldr	r4, [r3, #4]
 800a726:	68a3      	ldr	r3, [r4, #8]
 800a728:	b163      	cbz	r3, 800a744 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x28>
 800a72a:	68e3      	ldr	r3, [r4, #12]
 800a72c:	b193      	cbz	r3, 800a754 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x38>
 800a72e:	6923      	ldr	r3, [r4, #16]
 800a730:	b1c3      	cbz	r3, 800a764 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x48>
 800a732:	4820      	ldr	r0, [pc, #128]	; (800a7b4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x98>)
 800a734:	bd10      	pop	{r4, pc}
 800a736:	4a20      	ldr	r2, [pc, #128]	; (800a7b8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800a738:	685c      	ldr	r4, [r3, #4]
 800a73a:	6812      	ldr	r2, [r2, #0]
 800a73c:	601a      	str	r2, [r3, #0]
 800a73e:	68a3      	ldr	r3, [r4, #8]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d1f2      	bne.n	800a72a <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xe>
 800a744:	4a1d      	ldr	r2, [pc, #116]	; (800a7bc <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa0>)
 800a746:	6813      	ldr	r3, [r2, #0]
 800a748:	b303      	cbz	r3, 800a78c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x70>
 800a74a:	6853      	ldr	r3, [r2, #4]
 800a74c:	60a3      	str	r3, [r4, #8]
 800a74e:	68e3      	ldr	r3, [r4, #12]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d1ec      	bne.n	800a72e <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x12>
 800a754:	4b1a      	ldr	r3, [pc, #104]	; (800a7c0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa4>)
 800a756:	681a      	ldr	r2, [r3, #0]
 800a758:	b1e2      	cbz	r2, 800a794 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x78>
 800a75a:	685b      	ldr	r3, [r3, #4]
 800a75c:	60e3      	str	r3, [r4, #12]
 800a75e:	6923      	ldr	r3, [r4, #16]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d1e6      	bne.n	800a732 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x16>
 800a764:	f001 fe8a 	bl	800c47c <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800a768:	4a14      	ldr	r2, [pc, #80]	; (800a7bc <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa0>)
 800a76a:	4916      	ldr	r1, [pc, #88]	; (800a7c4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa8>)
 800a76c:	6813      	ldr	r3, [r2, #0]
 800a76e:	60c8      	str	r0, [r1, #12]
 800a770:	b1e3      	cbz	r3, 800a7ac <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x90>
 800a772:	4b13      	ldr	r3, [pc, #76]	; (800a7c0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa4>)
 800a774:	648a      	str	r2, [r1, #72]	; 0x48
 800a776:	681a      	ldr	r2, [r3, #0]
 800a778:	b1a2      	cbz	r2, 800a7a4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x88>
 800a77a:	4a13      	ldr	r2, [pc, #76]	; (800a7c8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xac>)
 800a77c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 800a780:	6813      	ldr	r3, [r2, #0]
 800a782:	b15b      	cbz	r3, 800a79c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x80>
 800a784:	6853      	ldr	r3, [r2, #4]
 800a786:	480b      	ldr	r0, [pc, #44]	; (800a7b4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x98>)
 800a788:	6123      	str	r3, [r4, #16]
 800a78a:	bd10      	pop	{r4, pc}
 800a78c:	4b0a      	ldr	r3, [pc, #40]	; (800a7b8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	6013      	str	r3, [r2, #0]
 800a792:	e7da      	b.n	800a74a <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x2e>
 800a794:	4a08      	ldr	r2, [pc, #32]	; (800a7b8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800a796:	6812      	ldr	r2, [r2, #0]
 800a798:	601a      	str	r2, [r3, #0]
 800a79a:	e7de      	b.n	800a75a <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x3e>
 800a79c:	4b06      	ldr	r3, [pc, #24]	; (800a7b8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	6013      	str	r3, [r2, #0]
 800a7a2:	e7ef      	b.n	800a784 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x68>
 800a7a4:	4a04      	ldr	r2, [pc, #16]	; (800a7b8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800a7a6:	6812      	ldr	r2, [r2, #0]
 800a7a8:	601a      	str	r2, [r3, #0]
 800a7aa:	e7e6      	b.n	800a77a <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x5e>
 800a7ac:	4b02      	ldr	r3, [pc, #8]	; (800a7b8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	6013      	str	r3, [r2, #0]
 800a7b2:	e7de      	b.n	800a772 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x56>
 800a7b4:	20000468 	.word	0x20000468
 800a7b8:	20000978 	.word	0x20000978
 800a7bc:	200002f8 	.word	0x200002f8
 800a7c0:	2000043c 	.word	0x2000043c
 800a7c4:	2000013c 	.word	0x2000013c
 800a7c8:	200001f0 	.word	0x200001f0

0800a7cc <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__size_function__Setup_Event__request>:
 800a7cc:	6840      	ldr	r0, [r0, #4]
 800a7ce:	4770      	bx	lr

0800a7d0 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_const_function__Setup_Event__request>:
 800a7d0:	6800      	ldr	r0, [r0, #0]
 800a7d2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800a7d6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800a7da:	4770      	bx	lr

0800a7dc <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__fetch_function__Setup_Event__request>:
 800a7dc:	6803      	ldr	r3, [r0, #0]
 800a7de:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800a7e2:	4694      	mov	ip, r2
 800a7e4:	b500      	push	{lr}
 800a7e6:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 800a7ea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a7ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a7f2:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800a7f6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800a7fa:	f85d fb04 	ldr.w	pc, [sp], #4
 800a7fe:	bf00      	nop

0800a800 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__assign_function__Setup_Event__request>:
 800a800:	6803      	ldr	r3, [r0, #0]
 800a802:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800a806:	b500      	push	{lr}
 800a808:	4696      	mov	lr, r2
 800a80a:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 800a80e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a812:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a816:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800a81a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800a81e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a822:	bf00      	nop

0800a824 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__size_function__Setup_Event__response>:
 800a824:	6840      	ldr	r0, [r0, #4]
 800a826:	4770      	bx	lr

0800a828 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_const_function__Setup_Event__response>:
 800a828:	6800      	ldr	r0, [r0, #0]
 800a82a:	4408      	add	r0, r1
 800a82c:	4770      	bx	lr
 800a82e:	bf00      	nop

0800a830 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__fetch_function__Setup_Event__response>:
 800a830:	6803      	ldr	r3, [r0, #0]
 800a832:	5c5b      	ldrb	r3, [r3, r1]
 800a834:	7013      	strb	r3, [r2, #0]
 800a836:	4770      	bx	lr

0800a838 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__assign_function__Setup_Event__response>:
 800a838:	6803      	ldr	r3, [r0, #0]
 800a83a:	7812      	ldrb	r2, [r2, #0]
 800a83c:	545a      	strb	r2, [r3, r1]
 800a83e:	4770      	bx	lr

0800a840 <racs_services__srv__Setup_Request__rosidl_typesupport_introspection_c__Setup_Request_init_function>:
 800a840:	f004 b9f4 	b.w	800ec2c <racs_services__srv__Setup_Request__init>

0800a844 <racs_services__srv__Setup_Request__rosidl_typesupport_introspection_c__Setup_Request_fini_function>:
 800a844:	f004 b9f6 	b.w	800ec34 <racs_services__srv__Setup_Request__fini>

0800a848 <racs_services__srv__Setup_Response__rosidl_typesupport_introspection_c__Setup_Response_init_function>:
 800a848:	f004 ba3e 	b.w	800ecc8 <racs_services__srv__Setup_Response__init>

0800a84c <racs_services__srv__Setup_Response__rosidl_typesupport_introspection_c__Setup_Response_fini_function>:
 800a84c:	f004 ba40 	b.w	800ecd0 <racs_services__srv__Setup_Response__fini>

0800a850 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__Setup_Event_init_function>:
 800a850:	f004 ba76 	b.w	800ed40 <racs_services__srv__Setup_Event__init>

0800a854 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__Setup_Event_fini_function>:
 800a854:	f004 ba96 	b.w	800ed84 <racs_services__srv__Setup_Event__fini>

0800a858 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__resize_function__Setup_Event__request>:
 800a858:	b510      	push	{r4, lr}
 800a85a:	4604      	mov	r4, r0
 800a85c:	b082      	sub	sp, #8
 800a85e:	9101      	str	r1, [sp, #4]
 800a860:	f004 fa1e 	bl	800eca0 <racs_services__srv__Setup_Request__Sequence__fini>
 800a864:	9901      	ldr	r1, [sp, #4]
 800a866:	4620      	mov	r0, r4
 800a868:	b002      	add	sp, #8
 800a86a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a86e:	f004 b9fd 	b.w	800ec6c <racs_services__srv__Setup_Request__Sequence__init>
 800a872:	bf00      	nop

0800a874 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__resize_function__Setup_Event__response>:
 800a874:	b510      	push	{r4, lr}
 800a876:	4604      	mov	r4, r0
 800a878:	b082      	sub	sp, #8
 800a87a:	9101      	str	r1, [sp, #4]
 800a87c:	f004 fa4c 	bl	800ed18 <racs_services__srv__Setup_Response__Sequence__fini>
 800a880:	9901      	ldr	r1, [sp, #4]
 800a882:	4620      	mov	r0, r4
 800a884:	b002      	add	sp, #8
 800a886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a88a:	f004 ba2b 	b.w	800ece4 <racs_services__srv__Setup_Response__Sequence__init>
 800a88e:	bf00      	nop

0800a890 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_function__Setup_Event__response>:
 800a890:	6800      	ldr	r0, [r0, #0]
 800a892:	4408      	add	r0, r1
 800a894:	4770      	bx	lr
 800a896:	bf00      	nop

0800a898 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_function__Setup_Event__request>:
 800a898:	6800      	ldr	r0, [r0, #0]
 800a89a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800a89e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800a8a2:	4770      	bx	lr

0800a8a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request>:
 800a8a4:	4b04      	ldr	r3, [pc, #16]	; (800a8b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x14>)
 800a8a6:	681a      	ldr	r2, [r3, #0]
 800a8a8:	b10a      	cbz	r2, 800a8ae <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0xa>
 800a8aa:	4803      	ldr	r0, [pc, #12]	; (800a8b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x14>)
 800a8ac:	4770      	bx	lr
 800a8ae:	4a03      	ldr	r2, [pc, #12]	; (800a8bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x18>)
 800a8b0:	4801      	ldr	r0, [pc, #4]	; (800a8b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x14>)
 800a8b2:	6812      	ldr	r2, [r2, #0]
 800a8b4:	601a      	str	r2, [r3, #0]
 800a8b6:	4770      	bx	lr
 800a8b8:	20000704 	.word	0x20000704
 800a8bc:	20000978 	.word	0x20000978

0800a8c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response>:
 800a8c0:	4b04      	ldr	r3, [pc, #16]	; (800a8d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x14>)
 800a8c2:	681a      	ldr	r2, [r3, #0]
 800a8c4:	b10a      	cbz	r2, 800a8ca <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0xa>
 800a8c6:	4803      	ldr	r0, [pc, #12]	; (800a8d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x14>)
 800a8c8:	4770      	bx	lr
 800a8ca:	4a03      	ldr	r2, [pc, #12]	; (800a8d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x18>)
 800a8cc:	4801      	ldr	r0, [pc, #4]	; (800a8d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x14>)
 800a8ce:	6812      	ldr	r2, [r2, #0]
 800a8d0:	601a      	str	r2, [r3, #0]
 800a8d2:	4770      	bx	lr
 800a8d4:	20000758 	.word	0x20000758
 800a8d8:	20000978 	.word	0x20000978

0800a8dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event>:
 800a8dc:	b508      	push	{r3, lr}
 800a8de:	f001 fdcd 	bl	800c47c <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800a8e2:	4913      	ldr	r1, [pc, #76]	; (800a930 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x54>)
 800a8e4:	4b13      	ldr	r3, [pc, #76]	; (800a934 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x58>)
 800a8e6:	680a      	ldr	r2, [r1, #0]
 800a8e8:	60d8      	str	r0, [r3, #12]
 800a8ea:	b152      	cbz	r2, 800a902 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x26>
 800a8ec:	4a12      	ldr	r2, [pc, #72]	; (800a938 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x5c>)
 800a8ee:	6499      	str	r1, [r3, #72]	; 0x48
 800a8f0:	6811      	ldr	r1, [r2, #0]
 800a8f2:	b171      	cbz	r1, 800a912 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x36>
 800a8f4:	4911      	ldr	r1, [pc, #68]	; (800a93c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800a8f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800a8fa:	680b      	ldr	r3, [r1, #0]
 800a8fc:	b193      	cbz	r3, 800a924 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x48>
 800a8fe:	480f      	ldr	r0, [pc, #60]	; (800a93c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800a900:	bd08      	pop	{r3, pc}
 800a902:	4a0f      	ldr	r2, [pc, #60]	; (800a940 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x64>)
 800a904:	6499      	str	r1, [r3, #72]	; 0x48
 800a906:	6812      	ldr	r2, [r2, #0]
 800a908:	600a      	str	r2, [r1, #0]
 800a90a:	4a0b      	ldr	r2, [pc, #44]	; (800a938 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x5c>)
 800a90c:	6811      	ldr	r1, [r2, #0]
 800a90e:	2900      	cmp	r1, #0
 800a910:	d1f0      	bne.n	800a8f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x18>
 800a912:	490b      	ldr	r1, [pc, #44]	; (800a940 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x64>)
 800a914:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800a918:	6809      	ldr	r1, [r1, #0]
 800a91a:	6011      	str	r1, [r2, #0]
 800a91c:	4907      	ldr	r1, [pc, #28]	; (800a93c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800a91e:	680b      	ldr	r3, [r1, #0]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d1ec      	bne.n	800a8fe <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x22>
 800a924:	4b06      	ldr	r3, [pc, #24]	; (800a940 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x64>)
 800a926:	4805      	ldr	r0, [pc, #20]	; (800a93c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	600b      	str	r3, [r1, #0]
 800a92c:	bd08      	pop	{r3, pc}
 800a92e:	bf00      	nop
 800a930:	20000704 	.word	0x20000704
 800a934:	20000494 	.word	0x20000494
 800a938:	20000758 	.word	0x20000758
 800a93c:	20000548 	.word	0x20000548
 800a940:	20000978 	.word	0x20000978

0800a944 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup>:
 800a944:	4b25      	ldr	r3, [pc, #148]	; (800a9dc <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x98>)
 800a946:	681a      	ldr	r2, [r3, #0]
 800a948:	b510      	push	{r4, lr}
 800a94a:	b142      	cbz	r2, 800a95e <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x1a>
 800a94c:	685c      	ldr	r4, [r3, #4]
 800a94e:	68a3      	ldr	r3, [r4, #8]
 800a950:	b163      	cbz	r3, 800a96c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x28>
 800a952:	68e3      	ldr	r3, [r4, #12]
 800a954:	b193      	cbz	r3, 800a97c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x38>
 800a956:	6923      	ldr	r3, [r4, #16]
 800a958:	b1c3      	cbz	r3, 800a98c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x48>
 800a95a:	4820      	ldr	r0, [pc, #128]	; (800a9dc <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x98>)
 800a95c:	bd10      	pop	{r4, pc}
 800a95e:	4a20      	ldr	r2, [pc, #128]	; (800a9e0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800a960:	685c      	ldr	r4, [r3, #4]
 800a962:	6812      	ldr	r2, [r2, #0]
 800a964:	601a      	str	r2, [r3, #0]
 800a966:	68a3      	ldr	r3, [r4, #8]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d1f2      	bne.n	800a952 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xe>
 800a96c:	4a1d      	ldr	r2, [pc, #116]	; (800a9e4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa0>)
 800a96e:	6813      	ldr	r3, [r2, #0]
 800a970:	b303      	cbz	r3, 800a9b4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x70>
 800a972:	6853      	ldr	r3, [r2, #4]
 800a974:	60a3      	str	r3, [r4, #8]
 800a976:	68e3      	ldr	r3, [r4, #12]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d1ec      	bne.n	800a956 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x12>
 800a97c:	4b1a      	ldr	r3, [pc, #104]	; (800a9e8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa4>)
 800a97e:	681a      	ldr	r2, [r3, #0]
 800a980:	b1e2      	cbz	r2, 800a9bc <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x78>
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	60e3      	str	r3, [r4, #12]
 800a986:	6923      	ldr	r3, [r4, #16]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d1e6      	bne.n	800a95a <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x16>
 800a98c:	f001 fd76 	bl	800c47c <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800a990:	4a14      	ldr	r2, [pc, #80]	; (800a9e4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa0>)
 800a992:	4916      	ldr	r1, [pc, #88]	; (800a9ec <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa8>)
 800a994:	6813      	ldr	r3, [r2, #0]
 800a996:	60c8      	str	r0, [r1, #12]
 800a998:	b1e3      	cbz	r3, 800a9d4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x90>
 800a99a:	4b13      	ldr	r3, [pc, #76]	; (800a9e8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa4>)
 800a99c:	648a      	str	r2, [r1, #72]	; 0x48
 800a99e:	681a      	ldr	r2, [r3, #0]
 800a9a0:	b1a2      	cbz	r2, 800a9cc <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x88>
 800a9a2:	4a13      	ldr	r2, [pc, #76]	; (800a9f0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xac>)
 800a9a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 800a9a8:	6813      	ldr	r3, [r2, #0]
 800a9aa:	b15b      	cbz	r3, 800a9c4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x80>
 800a9ac:	6853      	ldr	r3, [r2, #4]
 800a9ae:	480b      	ldr	r0, [pc, #44]	; (800a9dc <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x98>)
 800a9b0:	6123      	str	r3, [r4, #16]
 800a9b2:	bd10      	pop	{r4, pc}
 800a9b4:	4b0a      	ldr	r3, [pc, #40]	; (800a9e0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	6013      	str	r3, [r2, #0]
 800a9ba:	e7da      	b.n	800a972 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x2e>
 800a9bc:	4a08      	ldr	r2, [pc, #32]	; (800a9e0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800a9be:	6812      	ldr	r2, [r2, #0]
 800a9c0:	601a      	str	r2, [r3, #0]
 800a9c2:	e7de      	b.n	800a982 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x3e>
 800a9c4:	4b06      	ldr	r3, [pc, #24]	; (800a9e0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	6013      	str	r3, [r2, #0]
 800a9ca:	e7ef      	b.n	800a9ac <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x68>
 800a9cc:	4a04      	ldr	r2, [pc, #16]	; (800a9e0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800a9ce:	6812      	ldr	r2, [r2, #0]
 800a9d0:	601a      	str	r2, [r3, #0]
 800a9d2:	e7e6      	b.n	800a9a2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x5e>
 800a9d4:	4b02      	ldr	r3, [pc, #8]	; (800a9e0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	6013      	str	r3, [r2, #0]
 800a9da:	e7de      	b.n	800a99a <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x56>
 800a9dc:	20000784 	.word	0x20000784
 800a9e0:	20000978 	.word	0x20000978
 800a9e4:	20000704 	.word	0x20000704
 800a9e8:	20000758 	.word	0x20000758
 800a9ec:	20000494 	.word	0x20000494
 800a9f0:	20000548 	.word	0x20000548

0800a9f4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Request>:
 800a9f4:	4800      	ldr	r0, [pc, #0]	; (800a9f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x4>)
 800a9f6:	4770      	bx	lr
 800a9f8:	20000804 	.word	0x20000804

0800a9fc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Response>:
 800a9fc:	4800      	ldr	r0, [pc, #0]	; (800aa00 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x4>)
 800a9fe:	4770      	bx	lr
 800aa00:	2000081c 	.word	0x2000081c

0800aa04 <_Control_Event__max_serialized_size>:
 800aa04:	b500      	push	{lr}
 800aa06:	b083      	sub	sp, #12
 800aa08:	2301      	movs	r3, #1
 800aa0a:	2100      	movs	r1, #0
 800aa0c:	f10d 0007 	add.w	r0, sp, #7
 800aa10:	f88d 3007 	strb.w	r3, [sp, #7]
 800aa14:	f001 fde2 	bl	800c5dc <max_serialized_size_service_msgs__msg__ServiceEventInfo>
 800aa18:	b003      	add	sp, #12
 800aa1a:	f85d fb04 	ldr.w	pc, [sp], #4
 800aa1e:	bf00      	nop

0800aa20 <get_serialized_size_racs_services__srv__Control_Request>:
 800aa20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa22:	4604      	mov	r4, r0
 800aa24:	b1d8      	cbz	r0, 800aa5e <get_serialized_size_racs_services__srv__Control_Request+0x3e>
 800aa26:	460d      	mov	r5, r1
 800aa28:	2101      	movs	r1, #1
 800aa2a:	1c6e      	adds	r6, r5, #1
 800aa2c:	4628      	mov	r0, r5
 800aa2e:	f003 fa47 	bl	800dec0 <ucdr_alignment>
 800aa32:	2101      	movs	r1, #1
 800aa34:	4406      	add	r6, r0
 800aa36:	4630      	mov	r0, r6
 800aa38:	f003 fa42 	bl	800dec0 <ucdr_alignment>
 800aa3c:	2101      	movs	r1, #1
 800aa3e:	1847      	adds	r7, r0, r1
 800aa40:	4437      	add	r7, r6
 800aa42:	4638      	mov	r0, r7
 800aa44:	f003 fa3c 	bl	800dec0 <ucdr_alignment>
 800aa48:	68a6      	ldr	r6, [r4, #8]
 800aa4a:	1c44      	adds	r4, r0, #1
 800aa4c:	2104      	movs	r1, #4
 800aa4e:	443c      	add	r4, r7
 800aa50:	4620      	mov	r0, r4
 800aa52:	f003 fa35 	bl	800dec0 <ucdr_alignment>
 800aa56:	1d03      	adds	r3, r0, #4
 800aa58:	441c      	add	r4, r3
 800aa5a:	b90e      	cbnz	r6, 800aa60 <get_serialized_size_racs_services__srv__Control_Request+0x40>
 800aa5c:	1b60      	subs	r0, r4, r5
 800aa5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa60:	4620      	mov	r0, r4
 800aa62:	2101      	movs	r1, #1
 800aa64:	f003 fa2c 	bl	800dec0 <ucdr_alignment>
 800aa68:	1933      	adds	r3, r6, r4
 800aa6a:	181c      	adds	r4, r3, r0
 800aa6c:	1b60      	subs	r0, r4, r5
 800aa6e:	e7f6      	b.n	800aa5e <get_serialized_size_racs_services__srv__Control_Request+0x3e>

0800aa70 <get_serialized_size_racs_services__srv__Control_Response.part.0>:
 800aa70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa72:	460e      	mov	r6, r1
 800aa74:	4607      	mov	r7, r0
 800aa76:	2101      	movs	r1, #1
 800aa78:	1c75      	adds	r5, r6, #1
 800aa7a:	4630      	mov	r0, r6
 800aa7c:	f003 fa20 	bl	800dec0 <ucdr_alignment>
 800aa80:	2101      	movs	r1, #1
 800aa82:	4405      	add	r5, r0
 800aa84:	4628      	mov	r0, r5
 800aa86:	f003 fa1b 	bl	800dec0 <ucdr_alignment>
 800aa8a:	2101      	movs	r1, #1
 800aa8c:	1844      	adds	r4, r0, r1
 800aa8e:	4425      	add	r5, r4
 800aa90:	4628      	mov	r0, r5
 800aa92:	f003 fa15 	bl	800dec0 <ucdr_alignment>
 800aa96:	2101      	movs	r1, #1
 800aa98:	1844      	adds	r4, r0, r1
 800aa9a:	442c      	add	r4, r5
 800aa9c:	4620      	mov	r0, r4
 800aa9e:	f003 fa0f 	bl	800dec0 <ucdr_alignment>
 800aaa2:	3001      	adds	r0, #1
 800aaa4:	2104      	movs	r1, #4
 800aaa6:	68bd      	ldr	r5, [r7, #8]
 800aaa8:	4404      	add	r4, r0
 800aaaa:	4620      	mov	r0, r4
 800aaac:	f003 fa08 	bl	800dec0 <ucdr_alignment>
 800aab0:	3004      	adds	r0, #4
 800aab2:	4404      	add	r4, r0
 800aab4:	b90d      	cbnz	r5, 800aaba <get_serialized_size_racs_services__srv__Control_Response.part.0+0x4a>
 800aab6:	1ba0      	subs	r0, r4, r6
 800aab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aaba:	4620      	mov	r0, r4
 800aabc:	442c      	add	r4, r5
 800aabe:	2101      	movs	r1, #1
 800aac0:	f003 f9fe 	bl	800dec0 <ucdr_alignment>
 800aac4:	4404      	add	r4, r0
 800aac6:	1ba0      	subs	r0, r4, r6
 800aac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aaca:	bf00      	nop

0800aacc <get_serialized_size_racs_services__srv__Control_Response>:
 800aacc:	b108      	cbz	r0, 800aad2 <get_serialized_size_racs_services__srv__Control_Response+0x6>
 800aace:	f7ff bfcf 	b.w	800aa70 <get_serialized_size_racs_services__srv__Control_Response.part.0>
 800aad2:	4770      	bx	lr

0800aad4 <_Control_Response__get_serialized_size>:
 800aad4:	b110      	cbz	r0, 800aadc <_Control_Response__get_serialized_size+0x8>
 800aad6:	2100      	movs	r1, #0
 800aad8:	f7ff bfca 	b.w	800aa70 <get_serialized_size_racs_services__srv__Control_Response.part.0>
 800aadc:	4770      	bx	lr
 800aade:	bf00      	nop

0800aae0 <_Control_Request__cdr_deserialize>:
 800aae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aae2:	460c      	mov	r4, r1
 800aae4:	b083      	sub	sp, #12
 800aae6:	b1e9      	cbz	r1, 800ab24 <_Control_Request__cdr_deserialize+0x44>
 800aae8:	4605      	mov	r5, r0
 800aaea:	f001 ff91 	bl	800ca10 <ucdr_deserialize_uint8_t>
 800aaee:	1c61      	adds	r1, r4, #1
 800aaf0:	4628      	mov	r0, r5
 800aaf2:	f001 ff8d 	bl	800ca10 <ucdr_deserialize_uint8_t>
 800aaf6:	1ca1      	adds	r1, r4, #2
 800aaf8:	4628      	mov	r0, r5
 800aafa:	f001 ff89 	bl	800ca10 <ucdr_deserialize_uint8_t>
 800aafe:	68e7      	ldr	r7, [r4, #12]
 800ab00:	ab01      	add	r3, sp, #4
 800ab02:	6861      	ldr	r1, [r4, #4]
 800ab04:	463a      	mov	r2, r7
 800ab06:	4628      	mov	r0, r5
 800ab08:	f003 fa88 	bl	800e01c <ucdr_deserialize_sequence_uint8_t>
 800ab0c:	9b01      	ldr	r3, [sp, #4]
 800ab0e:	4606      	mov	r6, r0
 800ab10:	b920      	cbnz	r0, 800ab1c <_Control_Request__cdr_deserialize+0x3c>
 800ab12:	429f      	cmp	r7, r3
 800ab14:	d30a      	bcc.n	800ab2c <_Control_Request__cdr_deserialize+0x4c>
 800ab16:	4630      	mov	r0, r6
 800ab18:	b003      	add	sp, #12
 800ab1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab1c:	4630      	mov	r0, r6
 800ab1e:	60a3      	str	r3, [r4, #8]
 800ab20:	b003      	add	sp, #12
 800ab22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab24:	460e      	mov	r6, r1
 800ab26:	4630      	mov	r0, r6
 800ab28:	b003      	add	sp, #12
 800ab2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab2c:	2101      	movs	r1, #1
 800ab2e:	4628      	mov	r0, r5
 800ab30:	75ae      	strb	r6, [r5, #22]
 800ab32:	7569      	strb	r1, [r5, #21]
 800ab34:	60a6      	str	r6, [r4, #8]
 800ab36:	f003 f9db 	bl	800def0 <ucdr_align_to>
 800ab3a:	4628      	mov	r0, r5
 800ab3c:	9901      	ldr	r1, [sp, #4]
 800ab3e:	f003 fa0f 	bl	800df60 <ucdr_advance_buffer>
 800ab42:	4630      	mov	r0, r6
 800ab44:	b003      	add	sp, #12
 800ab46:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ab48 <_Control_Response__cdr_deserialize>:
 800ab48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab4a:	460c      	mov	r4, r1
 800ab4c:	b083      	sub	sp, #12
 800ab4e:	b309      	cbz	r1, 800ab94 <_Control_Response__cdr_deserialize+0x4c>
 800ab50:	4605      	mov	r5, r0
 800ab52:	f001 ff5d 	bl	800ca10 <ucdr_deserialize_uint8_t>
 800ab56:	1c61      	adds	r1, r4, #1
 800ab58:	4628      	mov	r0, r5
 800ab5a:	f001 ff59 	bl	800ca10 <ucdr_deserialize_uint8_t>
 800ab5e:	1ca1      	adds	r1, r4, #2
 800ab60:	4628      	mov	r0, r5
 800ab62:	f001 ff55 	bl	800ca10 <ucdr_deserialize_uint8_t>
 800ab66:	1ce1      	adds	r1, r4, #3
 800ab68:	4628      	mov	r0, r5
 800ab6a:	f001 ff51 	bl	800ca10 <ucdr_deserialize_uint8_t>
 800ab6e:	68e7      	ldr	r7, [r4, #12]
 800ab70:	ab01      	add	r3, sp, #4
 800ab72:	6861      	ldr	r1, [r4, #4]
 800ab74:	463a      	mov	r2, r7
 800ab76:	4628      	mov	r0, r5
 800ab78:	f003 fa50 	bl	800e01c <ucdr_deserialize_sequence_uint8_t>
 800ab7c:	9b01      	ldr	r3, [sp, #4]
 800ab7e:	4606      	mov	r6, r0
 800ab80:	b920      	cbnz	r0, 800ab8c <_Control_Response__cdr_deserialize+0x44>
 800ab82:	429f      	cmp	r7, r3
 800ab84:	d30a      	bcc.n	800ab9c <_Control_Response__cdr_deserialize+0x54>
 800ab86:	4630      	mov	r0, r6
 800ab88:	b003      	add	sp, #12
 800ab8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab8c:	4630      	mov	r0, r6
 800ab8e:	60a3      	str	r3, [r4, #8]
 800ab90:	b003      	add	sp, #12
 800ab92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab94:	460e      	mov	r6, r1
 800ab96:	4630      	mov	r0, r6
 800ab98:	b003      	add	sp, #12
 800ab9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab9c:	2101      	movs	r1, #1
 800ab9e:	4628      	mov	r0, r5
 800aba0:	75ae      	strb	r6, [r5, #22]
 800aba2:	7569      	strb	r1, [r5, #21]
 800aba4:	60a6      	str	r6, [r4, #8]
 800aba6:	f003 f9a3 	bl	800def0 <ucdr_align_to>
 800abaa:	4628      	mov	r0, r5
 800abac:	9901      	ldr	r1, [sp, #4]
 800abae:	f003 f9d7 	bl	800df60 <ucdr_advance_buffer>
 800abb2:	4630      	mov	r0, r6
 800abb4:	b003      	add	sp, #12
 800abb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800abb8 <_Control_Request__cdr_serialize>:
 800abb8:	b1a8      	cbz	r0, 800abe6 <_Control_Request__cdr_serialize+0x2e>
 800abba:	b538      	push	{r3, r4, r5, lr}
 800abbc:	460d      	mov	r5, r1
 800abbe:	4604      	mov	r4, r0
 800abc0:	7801      	ldrb	r1, [r0, #0]
 800abc2:	4628      	mov	r0, r5
 800abc4:	f001 ff0e 	bl	800c9e4 <ucdr_serialize_uint8_t>
 800abc8:	7861      	ldrb	r1, [r4, #1]
 800abca:	4628      	mov	r0, r5
 800abcc:	f001 ff0a 	bl	800c9e4 <ucdr_serialize_uint8_t>
 800abd0:	78a1      	ldrb	r1, [r4, #2]
 800abd2:	4628      	mov	r0, r5
 800abd4:	f001 ff06 	bl	800c9e4 <ucdr_serialize_uint8_t>
 800abd8:	4628      	mov	r0, r5
 800abda:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 800abde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abe2:	f003 ba09 	b.w	800dff8 <ucdr_serialize_sequence_uint8_t>
 800abe6:	4770      	bx	lr

0800abe8 <_Control_Response__cdr_serialize>:
 800abe8:	b1c8      	cbz	r0, 800ac1e <_Control_Response__cdr_serialize+0x36>
 800abea:	b538      	push	{r3, r4, r5, lr}
 800abec:	460d      	mov	r5, r1
 800abee:	4604      	mov	r4, r0
 800abf0:	7801      	ldrb	r1, [r0, #0]
 800abf2:	4628      	mov	r0, r5
 800abf4:	f001 fef6 	bl	800c9e4 <ucdr_serialize_uint8_t>
 800abf8:	7861      	ldrb	r1, [r4, #1]
 800abfa:	4628      	mov	r0, r5
 800abfc:	f001 fef2 	bl	800c9e4 <ucdr_serialize_uint8_t>
 800ac00:	78a1      	ldrb	r1, [r4, #2]
 800ac02:	4628      	mov	r0, r5
 800ac04:	f001 feee 	bl	800c9e4 <ucdr_serialize_uint8_t>
 800ac08:	78e1      	ldrb	r1, [r4, #3]
 800ac0a:	4628      	mov	r0, r5
 800ac0c:	f001 feea 	bl	800c9e4 <ucdr_serialize_uint8_t>
 800ac10:	4628      	mov	r0, r5
 800ac12:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 800ac16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac1a:	f003 b9ed 	b.w	800dff8 <ucdr_serialize_sequence_uint8_t>
 800ac1e:	4770      	bx	lr

0800ac20 <get_serialized_size_racs_services__srv__Control_Event.part.0>:
 800ac20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac24:	460e      	mov	r6, r1
 800ac26:	4605      	mov	r5, r0
 800ac28:	f001 fc3e 	bl	800c4a8 <get_serialized_size_service_msgs__msg__ServiceEventInfo>
 800ac2c:	2104      	movs	r1, #4
 800ac2e:	1837      	adds	r7, r6, r0
 800ac30:	f8d5 902c 	ldr.w	r9, [r5, #44]	; 0x2c
 800ac34:	4638      	mov	r0, r7
 800ac36:	f003 f943 	bl	800dec0 <ucdr_alignment>
 800ac3a:	3004      	adds	r0, #4
 800ac3c:	4407      	add	r7, r0
 800ac3e:	f1b9 0f00 	cmp.w	r9, #0
 800ac42:	d019      	beq.n	800ac78 <get_serialized_size_racs_services__srv__Control_Event.part.0+0x58>
 800ac44:	f04f 0800 	mov.w	r8, #0
 800ac48:	f8df a07c 	ldr.w	sl, [pc, #124]	; 800acc8 <get_serialized_size_racs_services__srv__Control_Event.part.0+0xa8>
 800ac4c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800ac4e:	4639      	mov	r1, r7
 800ac50:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ac54:	eb00 1008 	add.w	r0, r0, r8, lsl #4
 800ac58:	f108 0801 	add.w	r8, r8, #1
 800ac5c:	695b      	ldr	r3, [r3, #20]
 800ac5e:	4798      	blx	r3
 800ac60:	4604      	mov	r4, r0
 800ac62:	4638      	mov	r0, r7
 800ac64:	2c04      	cmp	r4, #4
 800ac66:	4621      	mov	r1, r4
 800ac68:	bf28      	it	cs
 800ac6a:	2104      	movcs	r1, #4
 800ac6c:	f003 f928 	bl	800dec0 <ucdr_alignment>
 800ac70:	45c1      	cmp	r9, r8
 800ac72:	4420      	add	r0, r4
 800ac74:	4407      	add	r7, r0
 800ac76:	d1e9      	bne.n	800ac4c <get_serialized_size_racs_services__srv__Control_Event.part.0+0x2c>
 800ac78:	4638      	mov	r0, r7
 800ac7a:	2104      	movs	r1, #4
 800ac7c:	f8d5 8038 	ldr.w	r8, [r5, #56]	; 0x38
 800ac80:	f003 f91e 	bl	800dec0 <ucdr_alignment>
 800ac84:	4407      	add	r7, r0
 800ac86:	3704      	adds	r7, #4
 800ac88:	f1b8 0f00 	cmp.w	r8, #0
 800ac8c:	d019      	beq.n	800acc2 <get_serialized_size_racs_services__srv__Control_Event.part.0+0xa2>
 800ac8e:	f04f 0900 	mov.w	r9, #0
 800ac92:	f8df a038 	ldr.w	sl, [pc, #56]	; 800accc <get_serialized_size_racs_services__srv__Control_Event.part.0+0xac>
 800ac96:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800ac98:	4639      	mov	r1, r7
 800ac9a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ac9e:	eb00 1009 	add.w	r0, r0, r9, lsl #4
 800aca2:	f109 0901 	add.w	r9, r9, #1
 800aca6:	695b      	ldr	r3, [r3, #20]
 800aca8:	4798      	blx	r3
 800acaa:	4604      	mov	r4, r0
 800acac:	4638      	mov	r0, r7
 800acae:	2c04      	cmp	r4, #4
 800acb0:	4621      	mov	r1, r4
 800acb2:	bf28      	it	cs
 800acb4:	2104      	movcs	r1, #4
 800acb6:	f003 f903 	bl	800dec0 <ucdr_alignment>
 800acba:	45c8      	cmp	r8, r9
 800acbc:	4420      	add	r0, r4
 800acbe:	4407      	add	r7, r0
 800acc0:	d1e9      	bne.n	800ac96 <get_serialized_size_racs_services__srv__Control_Event.part.0+0x76>
 800acc2:	1bb8      	subs	r0, r7, r6
 800acc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acc8:	20000804 	.word	0x20000804
 800accc:	2000081c 	.word	0x2000081c

0800acd0 <get_serialized_size_racs_services__srv__Control_Event>:
 800acd0:	b108      	cbz	r0, 800acd6 <get_serialized_size_racs_services__srv__Control_Event+0x6>
 800acd2:	f7ff bfa5 	b.w	800ac20 <get_serialized_size_racs_services__srv__Control_Event.part.0>
 800acd6:	4770      	bx	lr

0800acd8 <_Control_Event__get_serialized_size>:
 800acd8:	b110      	cbz	r0, 800ace0 <_Control_Event__get_serialized_size+0x8>
 800acda:	2100      	movs	r1, #0
 800acdc:	f7ff bfa0 	b.w	800ac20 <get_serialized_size_racs_services__srv__Control_Event.part.0>
 800ace0:	4770      	bx	lr
 800ace2:	bf00      	nop

0800ace4 <_Control_Event__cdr_deserialize>:
 800ace4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ace6:	460d      	mov	r5, r1
 800ace8:	b083      	sub	sp, #12
 800acea:	2900      	cmp	r1, #0
 800acec:	d041      	beq.n	800ad72 <_Control_Event__cdr_deserialize+0x8e>
 800acee:	4606      	mov	r6, r0
 800acf0:	f001 fc9a 	bl	800c628 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800acf4:	4603      	mov	r3, r0
 800acf6:	4629      	mov	r1, r5
 800acf8:	4630      	mov	r0, r6
 800acfa:	685b      	ldr	r3, [r3, #4]
 800acfc:	68db      	ldr	r3, [r3, #12]
 800acfe:	4798      	blx	r3
 800ad00:	4630      	mov	r0, r6
 800ad02:	a901      	add	r1, sp, #4
 800ad04:	f002 f9b4 	bl	800d070 <ucdr_deserialize_uint32_t>
 800ad08:	9b01      	ldr	r3, [sp, #4]
 800ad0a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d32d      	bcc.n	800ad6c <_Control_Event__cdr_deserialize+0x88>
 800ad10:	62eb      	str	r3, [r5, #44]	; 0x2c
 800ad12:	b17b      	cbz	r3, 800ad34 <_Control_Event__cdr_deserialize+0x50>
 800ad14:	2400      	movs	r4, #0
 800ad16:	4f18      	ldr	r7, [pc, #96]	; (800ad78 <_Control_Event__cdr_deserialize+0x94>)
 800ad18:	e002      	b.n	800ad20 <_Control_Event__cdr_deserialize+0x3c>
 800ad1a:	9b01      	ldr	r3, [sp, #4]
 800ad1c:	429c      	cmp	r4, r3
 800ad1e:	d209      	bcs.n	800ad34 <_Control_Event__cdr_deserialize+0x50>
 800ad20:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800ad22:	4630      	mov	r0, r6
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800ad2a:	3401      	adds	r4, #1
 800ad2c:	68db      	ldr	r3, [r3, #12]
 800ad2e:	4798      	blx	r3
 800ad30:	2800      	cmp	r0, #0
 800ad32:	d1f2      	bne.n	800ad1a <_Control_Event__cdr_deserialize+0x36>
 800ad34:	a901      	add	r1, sp, #4
 800ad36:	4630      	mov	r0, r6
 800ad38:	f002 f99a 	bl	800d070 <ucdr_deserialize_uint32_t>
 800ad3c:	9b01      	ldr	r3, [sp, #4]
 800ad3e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d313      	bcc.n	800ad6c <_Control_Event__cdr_deserialize+0x88>
 800ad44:	63ab      	str	r3, [r5, #56]	; 0x38
 800ad46:	b193      	cbz	r3, 800ad6e <_Control_Event__cdr_deserialize+0x8a>
 800ad48:	2400      	movs	r4, #0
 800ad4a:	4f0c      	ldr	r7, [pc, #48]	; (800ad7c <_Control_Event__cdr_deserialize+0x98>)
 800ad4c:	e002      	b.n	800ad54 <_Control_Event__cdr_deserialize+0x70>
 800ad4e:	9b01      	ldr	r3, [sp, #4]
 800ad50:	429c      	cmp	r4, r3
 800ad52:	d20c      	bcs.n	800ad6e <_Control_Event__cdr_deserialize+0x8a>
 800ad54:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800ad56:	4630      	mov	r0, r6
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800ad5e:	3401      	adds	r4, #1
 800ad60:	68db      	ldr	r3, [r3, #12]
 800ad62:	4798      	blx	r3
 800ad64:	2800      	cmp	r0, #0
 800ad66:	d1f2      	bne.n	800ad4e <_Control_Event__cdr_deserialize+0x6a>
 800ad68:	b003      	add	sp, #12
 800ad6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad6c:	2000      	movs	r0, #0
 800ad6e:	b003      	add	sp, #12
 800ad70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad72:	4608      	mov	r0, r1
 800ad74:	b003      	add	sp, #12
 800ad76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad78:	20000804 	.word	0x20000804
 800ad7c:	2000081c 	.word	0x2000081c

0800ad80 <_Control_Event__cdr_serialize>:
 800ad80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad84:	2800      	cmp	r0, #0
 800ad86:	d03a      	beq.n	800adfe <_Control_Event__cdr_serialize+0x7e>
 800ad88:	4605      	mov	r5, r0
 800ad8a:	460e      	mov	r6, r1
 800ad8c:	f001 fc4c 	bl	800c628 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800ad90:	4603      	mov	r3, r0
 800ad92:	4631      	mov	r1, r6
 800ad94:	4628      	mov	r0, r5
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	689b      	ldr	r3, [r3, #8]
 800ad9a:	4798      	blx	r3
 800ad9c:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 800ad9e:	4630      	mov	r0, r6
 800ada0:	4639      	mov	r1, r7
 800ada2:	f002 f835 	bl	800ce10 <ucdr_serialize_uint32_t>
 800ada6:	b188      	cbz	r0, 800adcc <_Control_Event__cdr_serialize+0x4c>
 800ada8:	b187      	cbz	r7, 800adcc <_Control_Event__cdr_serialize+0x4c>
 800adaa:	2400      	movs	r4, #0
 800adac:	f8df 8058 	ldr.w	r8, [pc, #88]	; 800ae08 <_Control_Event__cdr_serialize+0x88>
 800adb0:	e001      	b.n	800adb6 <_Control_Event__cdr_serialize+0x36>
 800adb2:	42a7      	cmp	r7, r4
 800adb4:	d00a      	beq.n	800adcc <_Control_Event__cdr_serialize+0x4c>
 800adb6:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800adb8:	4631      	mov	r1, r6
 800adba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800adbe:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800adc2:	3401      	adds	r4, #1
 800adc4:	689b      	ldr	r3, [r3, #8]
 800adc6:	4798      	blx	r3
 800adc8:	2800      	cmp	r0, #0
 800adca:	d1f2      	bne.n	800adb2 <_Control_Event__cdr_serialize+0x32>
 800adcc:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800adce:	4630      	mov	r0, r6
 800add0:	4639      	mov	r1, r7
 800add2:	f002 f81d 	bl	800ce10 <ucdr_serialize_uint32_t>
 800add6:	4680      	mov	r8, r0
 800add8:	b188      	cbz	r0, 800adfe <_Control_Event__cdr_serialize+0x7e>
 800adda:	b197      	cbz	r7, 800ae02 <_Control_Event__cdr_serialize+0x82>
 800addc:	2400      	movs	r4, #0
 800adde:	f8df 902c 	ldr.w	r9, [pc, #44]	; 800ae0c <_Control_Event__cdr_serialize+0x8c>
 800ade2:	e001      	b.n	800ade8 <_Control_Event__cdr_serialize+0x68>
 800ade4:	42a7      	cmp	r7, r4
 800ade6:	d00c      	beq.n	800ae02 <_Control_Event__cdr_serialize+0x82>
 800ade8:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800adea:	4631      	mov	r1, r6
 800adec:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800adf0:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800adf4:	3401      	adds	r4, #1
 800adf6:	689b      	ldr	r3, [r3, #8]
 800adf8:	4798      	blx	r3
 800adfa:	2800      	cmp	r0, #0
 800adfc:	d1f2      	bne.n	800ade4 <_Control_Event__cdr_serialize+0x64>
 800adfe:	f04f 0800 	mov.w	r8, #0
 800ae02:	4640      	mov	r0, r8
 800ae04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae08:	20000804 	.word	0x20000804
 800ae0c:	2000081c 	.word	0x2000081c

0800ae10 <_Control_Request__max_serialized_size>:
 800ae10:	b538      	push	{r3, r4, r5, lr}
 800ae12:	2101      	movs	r1, #1
 800ae14:	2000      	movs	r0, #0
 800ae16:	f003 f853 	bl	800dec0 <ucdr_alignment>
 800ae1a:	2101      	movs	r1, #1
 800ae1c:	1845      	adds	r5, r0, r1
 800ae1e:	4628      	mov	r0, r5
 800ae20:	f003 f84e 	bl	800dec0 <ucdr_alignment>
 800ae24:	2101      	movs	r1, #1
 800ae26:	1844      	adds	r4, r0, r1
 800ae28:	442c      	add	r4, r5
 800ae2a:	4620      	mov	r0, r4
 800ae2c:	f003 f848 	bl	800dec0 <ucdr_alignment>
 800ae30:	3001      	adds	r0, #1
 800ae32:	4420      	add	r0, r4
 800ae34:	bd38      	pop	{r3, r4, r5, pc}
 800ae36:	bf00      	nop

0800ae38 <_Control_Response__max_serialized_size>:
 800ae38:	b538      	push	{r3, r4, r5, lr}
 800ae3a:	2101      	movs	r1, #1
 800ae3c:	2000      	movs	r0, #0
 800ae3e:	f003 f83f 	bl	800dec0 <ucdr_alignment>
 800ae42:	2101      	movs	r1, #1
 800ae44:	1845      	adds	r5, r0, r1
 800ae46:	4628      	mov	r0, r5
 800ae48:	f003 f83a 	bl	800dec0 <ucdr_alignment>
 800ae4c:	2101      	movs	r1, #1
 800ae4e:	1844      	adds	r4, r0, r1
 800ae50:	442c      	add	r4, r5
 800ae52:	4620      	mov	r0, r4
 800ae54:	f003 f834 	bl	800dec0 <ucdr_alignment>
 800ae58:	2101      	movs	r1, #1
 800ae5a:	4408      	add	r0, r1
 800ae5c:	4404      	add	r4, r0
 800ae5e:	4620      	mov	r0, r4
 800ae60:	f003 f82e 	bl	800dec0 <ucdr_alignment>
 800ae64:	3001      	adds	r0, #1
 800ae66:	4420      	add	r0, r4
 800ae68:	bd38      	pop	{r3, r4, r5, pc}
 800ae6a:	bf00      	nop

0800ae6c <_Control_Request__get_serialized_size>:
 800ae6c:	b570      	push	{r4, r5, r6, lr}
 800ae6e:	4604      	mov	r4, r0
 800ae70:	b1c0      	cbz	r0, 800aea4 <_Control_Request__get_serialized_size+0x38>
 800ae72:	2101      	movs	r1, #1
 800ae74:	2000      	movs	r0, #0
 800ae76:	f003 f823 	bl	800dec0 <ucdr_alignment>
 800ae7a:	2101      	movs	r1, #1
 800ae7c:	1846      	adds	r6, r0, r1
 800ae7e:	4630      	mov	r0, r6
 800ae80:	f003 f81e 	bl	800dec0 <ucdr_alignment>
 800ae84:	2101      	movs	r1, #1
 800ae86:	1845      	adds	r5, r0, r1
 800ae88:	4435      	add	r5, r6
 800ae8a:	4628      	mov	r0, r5
 800ae8c:	f003 f818 	bl	800dec0 <ucdr_alignment>
 800ae90:	3001      	adds	r0, #1
 800ae92:	2104      	movs	r1, #4
 800ae94:	68a6      	ldr	r6, [r4, #8]
 800ae96:	4405      	add	r5, r0
 800ae98:	4628      	mov	r0, r5
 800ae9a:	f003 f811 	bl	800dec0 <ucdr_alignment>
 800ae9e:	1d04      	adds	r4, r0, #4
 800aea0:	442c      	add	r4, r5
 800aea2:	b90e      	cbnz	r6, 800aea8 <_Control_Request__get_serialized_size+0x3c>
 800aea4:	4620      	mov	r0, r4
 800aea6:	bd70      	pop	{r4, r5, r6, pc}
 800aea8:	4620      	mov	r0, r4
 800aeaa:	4434      	add	r4, r6
 800aeac:	2101      	movs	r1, #1
 800aeae:	f003 f807 	bl	800dec0 <ucdr_alignment>
 800aeb2:	4404      	add	r4, r0
 800aeb4:	4620      	mov	r0, r4
 800aeb6:	bd70      	pop	{r4, r5, r6, pc}

0800aeb8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Event>:
 800aeb8:	4800      	ldr	r0, [pc, #0]	; (800aebc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x4>)
 800aeba:	4770      	bx	lr
 800aebc:	200007ec 	.word	0x200007ec

0800aec0 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Control>:
 800aec0:	4800      	ldr	r0, [pc, #0]	; (800aec4 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Control+0x4>)
 800aec2:	4770      	bx	lr
 800aec4:	200007c0 	.word	0x200007c0

0800aec8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Request>:
 800aec8:	4800      	ldr	r0, [pc, #0]	; (800aecc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x4>)
 800aeca:	4770      	bx	lr
 800aecc:	200008dc 	.word	0x200008dc

0800aed0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Response>:
 800aed0:	4800      	ldr	r0, [pc, #0]	; (800aed4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x4>)
 800aed2:	4770      	bx	lr
 800aed4:	200008f4 	.word	0x200008f4

0800aed8 <_Setup_Response__max_serialized_size>:
 800aed8:	2101      	movs	r1, #1
 800aeda:	2000      	movs	r0, #0
 800aedc:	b508      	push	{r3, lr}
 800aede:	f002 ffef 	bl	800dec0 <ucdr_alignment>
 800aee2:	3001      	adds	r0, #1
 800aee4:	bd08      	pop	{r3, pc}
 800aee6:	bf00      	nop

0800aee8 <_Setup_Response__cdr_deserialize>:
 800aee8:	b109      	cbz	r1, 800aeee <_Setup_Response__cdr_deserialize+0x6>
 800aeea:	f001 bd91 	b.w	800ca10 <ucdr_deserialize_uint8_t>
 800aeee:	4608      	mov	r0, r1
 800aef0:	4770      	bx	lr
 800aef2:	bf00      	nop

0800aef4 <_Setup_Event__max_serialized_size>:
 800aef4:	b500      	push	{lr}
 800aef6:	b083      	sub	sp, #12
 800aef8:	2301      	movs	r3, #1
 800aefa:	2100      	movs	r1, #0
 800aefc:	f10d 0007 	add.w	r0, sp, #7
 800af00:	f88d 3007 	strb.w	r3, [sp, #7]
 800af04:	f001 fb6a 	bl	800c5dc <max_serialized_size_service_msgs__msg__ServiceEventInfo>
 800af08:	b003      	add	sp, #12
 800af0a:	f85d fb04 	ldr.w	pc, [sp], #4
 800af0e:	bf00      	nop

0800af10 <get_serialized_size_racs_services__srv__Setup_Request.part.0>:
 800af10:	b570      	push	{r4, r5, r6, lr}
 800af12:	4604      	mov	r4, r0
 800af14:	2101      	movs	r1, #1
 800af16:	f002 ffd3 	bl	800dec0 <ucdr_alignment>
 800af1a:	2104      	movs	r1, #4
 800af1c:	1c65      	adds	r5, r4, #1
 800af1e:	f1c4 0404 	rsb	r4, r4, #4
 800af22:	4405      	add	r5, r0
 800af24:	4628      	mov	r0, r5
 800af26:	f002 ffcb 	bl	800dec0 <ucdr_alignment>
 800af2a:	2104      	movs	r1, #4
 800af2c:	1846      	adds	r6, r0, r1
 800af2e:	442e      	add	r6, r5
 800af30:	4630      	mov	r0, r6
 800af32:	f002 ffc5 	bl	800dec0 <ucdr_alignment>
 800af36:	2104      	movs	r1, #4
 800af38:	1845      	adds	r5, r0, r1
 800af3a:	442e      	add	r6, r5
 800af3c:	4630      	mov	r0, r6
 800af3e:	f002 ffbf 	bl	800dec0 <ucdr_alignment>
 800af42:	2104      	movs	r1, #4
 800af44:	4408      	add	r0, r1
 800af46:	4406      	add	r6, r0
 800af48:	4630      	mov	r0, r6
 800af4a:	f002 ffb9 	bl	800dec0 <ucdr_alignment>
 800af4e:	2104      	movs	r1, #4
 800af50:	1845      	adds	r5, r0, r1
 800af52:	4435      	add	r5, r6
 800af54:	4628      	mov	r0, r5
 800af56:	f002 ffb3 	bl	800dec0 <ucdr_alignment>
 800af5a:	2104      	movs	r1, #4
 800af5c:	4408      	add	r0, r1
 800af5e:	4405      	add	r5, r0
 800af60:	4628      	mov	r0, r5
 800af62:	f002 ffad 	bl	800dec0 <ucdr_alignment>
 800af66:	4420      	add	r0, r4
 800af68:	4428      	add	r0, r5
 800af6a:	bd70      	pop	{r4, r5, r6, pc}

0800af6c <get_serialized_size_racs_services__srv__Setup_Request>:
 800af6c:	b110      	cbz	r0, 800af74 <get_serialized_size_racs_services__srv__Setup_Request+0x8>
 800af6e:	4608      	mov	r0, r1
 800af70:	f7ff bfce 	b.w	800af10 <get_serialized_size_racs_services__srv__Setup_Request.part.0>
 800af74:	4770      	bx	lr
 800af76:	bf00      	nop

0800af78 <_Setup_Request__get_serialized_size>:
 800af78:	b110      	cbz	r0, 800af80 <_Setup_Request__get_serialized_size+0x8>
 800af7a:	2000      	movs	r0, #0
 800af7c:	f7ff bfc8 	b.w	800af10 <get_serialized_size_racs_services__srv__Setup_Request.part.0>
 800af80:	4770      	bx	lr
 800af82:	bf00      	nop

0800af84 <get_serialized_size_racs_services__srv__Setup_Response>:
 800af84:	b138      	cbz	r0, 800af96 <get_serialized_size_racs_services__srv__Setup_Response+0x12>
 800af86:	b508      	push	{r3, lr}
 800af88:	460b      	mov	r3, r1
 800af8a:	2101      	movs	r1, #1
 800af8c:	4618      	mov	r0, r3
 800af8e:	f002 ff97 	bl	800dec0 <ucdr_alignment>
 800af92:	3001      	adds	r0, #1
 800af94:	bd08      	pop	{r3, pc}
 800af96:	4770      	bx	lr

0800af98 <_Setup_Request__cdr_deserialize>:
 800af98:	b538      	push	{r3, r4, r5, lr}
 800af9a:	460c      	mov	r4, r1
 800af9c:	b309      	cbz	r1, 800afe2 <_Setup_Request__cdr_deserialize+0x4a>
 800af9e:	4605      	mov	r5, r0
 800afa0:	f001 fd36 	bl	800ca10 <ucdr_deserialize_uint8_t>
 800afa4:	1d21      	adds	r1, r4, #4
 800afa6:	4628      	mov	r0, r5
 800afa8:	f002 fea2 	bl	800dcf0 <ucdr_deserialize_float>
 800afac:	f104 0108 	add.w	r1, r4, #8
 800afb0:	4628      	mov	r0, r5
 800afb2:	f002 fe9d 	bl	800dcf0 <ucdr_deserialize_float>
 800afb6:	f104 010c 	add.w	r1, r4, #12
 800afba:	4628      	mov	r0, r5
 800afbc:	f002 fe98 	bl	800dcf0 <ucdr_deserialize_float>
 800afc0:	f104 0110 	add.w	r1, r4, #16
 800afc4:	4628      	mov	r0, r5
 800afc6:	f002 fe93 	bl	800dcf0 <ucdr_deserialize_float>
 800afca:	f104 0114 	add.w	r1, r4, #20
 800afce:	4628      	mov	r0, r5
 800afd0:	f002 fe8e 	bl	800dcf0 <ucdr_deserialize_float>
 800afd4:	f104 0118 	add.w	r1, r4, #24
 800afd8:	4628      	mov	r0, r5
 800afda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afde:	f002 be87 	b.w	800dcf0 <ucdr_deserialize_float>
 800afe2:	4608      	mov	r0, r1
 800afe4:	bd38      	pop	{r3, r4, r5, pc}
 800afe6:	bf00      	nop

0800afe8 <_Setup_Response__cdr_serialize>:
 800afe8:	460a      	mov	r2, r1
 800afea:	b118      	cbz	r0, 800aff4 <_Setup_Response__cdr_serialize+0xc>
 800afec:	7801      	ldrb	r1, [r0, #0]
 800afee:	4610      	mov	r0, r2
 800aff0:	f001 bcf8 	b.w	800c9e4 <ucdr_serialize_uint8_t>
 800aff4:	4770      	bx	lr
 800aff6:	bf00      	nop

0800aff8 <_Setup_Request__cdr_serialize>:
 800aff8:	b330      	cbz	r0, 800b048 <_Setup_Request__cdr_serialize+0x50>
 800affa:	b538      	push	{r3, r4, r5, lr}
 800affc:	460d      	mov	r5, r1
 800affe:	4604      	mov	r4, r0
 800b000:	7801      	ldrb	r1, [r0, #0]
 800b002:	4628      	mov	r0, r5
 800b004:	f001 fcee 	bl	800c9e4 <ucdr_serialize_uint8_t>
 800b008:	ed94 0a01 	vldr	s0, [r4, #4]
 800b00c:	4628      	mov	r0, r5
 800b00e:	f002 fdd7 	bl	800dbc0 <ucdr_serialize_float>
 800b012:	ed94 0a02 	vldr	s0, [r4, #8]
 800b016:	4628      	mov	r0, r5
 800b018:	f002 fdd2 	bl	800dbc0 <ucdr_serialize_float>
 800b01c:	ed94 0a03 	vldr	s0, [r4, #12]
 800b020:	4628      	mov	r0, r5
 800b022:	f002 fdcd 	bl	800dbc0 <ucdr_serialize_float>
 800b026:	ed94 0a04 	vldr	s0, [r4, #16]
 800b02a:	4628      	mov	r0, r5
 800b02c:	f002 fdc8 	bl	800dbc0 <ucdr_serialize_float>
 800b030:	ed94 0a05 	vldr	s0, [r4, #20]
 800b034:	4628      	mov	r0, r5
 800b036:	f002 fdc3 	bl	800dbc0 <ucdr_serialize_float>
 800b03a:	ed94 0a06 	vldr	s0, [r4, #24]
 800b03e:	4628      	mov	r0, r5
 800b040:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b044:	f002 bdbc 	b.w	800dbc0 <ucdr_serialize_float>
 800b048:	4770      	bx	lr
 800b04a:	bf00      	nop

0800b04c <get_serialized_size_racs_services__srv__Setup_Event.part.0>:
 800b04c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b050:	460e      	mov	r6, r1
 800b052:	4605      	mov	r5, r0
 800b054:	f001 fa28 	bl	800c4a8 <get_serialized_size_service_msgs__msg__ServiceEventInfo>
 800b058:	2104      	movs	r1, #4
 800b05a:	eb06 0800 	add.w	r8, r6, r0
 800b05e:	f8d5 902c 	ldr.w	r9, [r5, #44]	; 0x2c
 800b062:	4640      	mov	r0, r8
 800b064:	f002 ff2c 	bl	800dec0 <ucdr_alignment>
 800b068:	3004      	adds	r0, #4
 800b06a:	4480      	add	r8, r0
 800b06c:	f1b9 0f00 	cmp.w	r9, #0
 800b070:	d019      	beq.n	800b0a6 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x5a>
 800b072:	2700      	movs	r7, #0
 800b074:	f8df a07c 	ldr.w	sl, [pc, #124]	; 800b0f4 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0xa8>
 800b078:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800b07a:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
 800b07e:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b082:	4641      	mov	r1, r8
 800b084:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800b088:	3701      	adds	r7, #1
 800b08a:	695b      	ldr	r3, [r3, #20]
 800b08c:	4798      	blx	r3
 800b08e:	4604      	mov	r4, r0
 800b090:	4640      	mov	r0, r8
 800b092:	2c04      	cmp	r4, #4
 800b094:	4621      	mov	r1, r4
 800b096:	bf28      	it	cs
 800b098:	2104      	movcs	r1, #4
 800b09a:	f002 ff11 	bl	800dec0 <ucdr_alignment>
 800b09e:	45b9      	cmp	r9, r7
 800b0a0:	4420      	add	r0, r4
 800b0a2:	4480      	add	r8, r0
 800b0a4:	d1e8      	bne.n	800b078 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x2c>
 800b0a6:	4640      	mov	r0, r8
 800b0a8:	2104      	movs	r1, #4
 800b0aa:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800b0ac:	f002 ff08 	bl	800dec0 <ucdr_alignment>
 800b0b0:	4480      	add	r8, r0
 800b0b2:	f108 0804 	add.w	r8, r8, #4
 800b0b6:	b1c7      	cbz	r7, 800b0ea <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x9e>
 800b0b8:	f04f 0900 	mov.w	r9, #0
 800b0bc:	f8df a038 	ldr.w	sl, [pc, #56]	; 800b0f8 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0xac>
 800b0c0:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800b0c2:	4641      	mov	r1, r8
 800b0c4:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b0c8:	4448      	add	r0, r9
 800b0ca:	f109 0901 	add.w	r9, r9, #1
 800b0ce:	695b      	ldr	r3, [r3, #20]
 800b0d0:	4798      	blx	r3
 800b0d2:	4604      	mov	r4, r0
 800b0d4:	4640      	mov	r0, r8
 800b0d6:	2c04      	cmp	r4, #4
 800b0d8:	4621      	mov	r1, r4
 800b0da:	bf28      	it	cs
 800b0dc:	2104      	movcs	r1, #4
 800b0de:	f002 feef 	bl	800dec0 <ucdr_alignment>
 800b0e2:	454f      	cmp	r7, r9
 800b0e4:	4420      	add	r0, r4
 800b0e6:	4480      	add	r8, r0
 800b0e8:	d1ea      	bne.n	800b0c0 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x74>
 800b0ea:	eba8 0006 	sub.w	r0, r8, r6
 800b0ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0f2:	bf00      	nop
 800b0f4:	200008dc 	.word	0x200008dc
 800b0f8:	200008f4 	.word	0x200008f4

0800b0fc <get_serialized_size_racs_services__srv__Setup_Event>:
 800b0fc:	b108      	cbz	r0, 800b102 <get_serialized_size_racs_services__srv__Setup_Event+0x6>
 800b0fe:	f7ff bfa5 	b.w	800b04c <get_serialized_size_racs_services__srv__Setup_Event.part.0>
 800b102:	4770      	bx	lr

0800b104 <_Setup_Event__get_serialized_size>:
 800b104:	b110      	cbz	r0, 800b10c <_Setup_Event__get_serialized_size+0x8>
 800b106:	2100      	movs	r1, #0
 800b108:	f7ff bfa0 	b.w	800b04c <get_serialized_size_racs_services__srv__Setup_Event.part.0>
 800b10c:	4770      	bx	lr
 800b10e:	bf00      	nop

0800b110 <_Setup_Event__cdr_deserialize>:
 800b110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b114:	460c      	mov	r4, r1
 800b116:	b082      	sub	sp, #8
 800b118:	2900      	cmp	r1, #0
 800b11a:	d045      	beq.n	800b1a8 <_Setup_Event__cdr_deserialize+0x98>
 800b11c:	4607      	mov	r7, r0
 800b11e:	f001 fa83 	bl	800c628 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800b122:	4603      	mov	r3, r0
 800b124:	4621      	mov	r1, r4
 800b126:	4638      	mov	r0, r7
 800b128:	685b      	ldr	r3, [r3, #4]
 800b12a:	68db      	ldr	r3, [r3, #12]
 800b12c:	4798      	blx	r3
 800b12e:	4638      	mov	r0, r7
 800b130:	a901      	add	r1, sp, #4
 800b132:	f001 ff9d 	bl	800d070 <ucdr_deserialize_uint32_t>
 800b136:	9b01      	ldr	r3, [sp, #4]
 800b138:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d330      	bcc.n	800b1a0 <_Setup_Event__cdr_deserialize+0x90>
 800b13e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b140:	b193      	cbz	r3, 800b168 <_Setup_Event__cdr_deserialize+0x58>
 800b142:	2500      	movs	r5, #0
 800b144:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800b1b4 <_Setup_Event__cdr_deserialize+0xa4>
 800b148:	462e      	mov	r6, r5
 800b14a:	e002      	b.n	800b152 <_Setup_Event__cdr_deserialize+0x42>
 800b14c:	9b01      	ldr	r3, [sp, #4]
 800b14e:	429e      	cmp	r6, r3
 800b150:	d20a      	bcs.n	800b168 <_Setup_Event__cdr_deserialize+0x58>
 800b152:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800b154:	4638      	mov	r0, r7
 800b156:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b15a:	3601      	adds	r6, #1
 800b15c:	4429      	add	r1, r5
 800b15e:	351c      	adds	r5, #28
 800b160:	68db      	ldr	r3, [r3, #12]
 800b162:	4798      	blx	r3
 800b164:	2800      	cmp	r0, #0
 800b166:	d1f1      	bne.n	800b14c <_Setup_Event__cdr_deserialize+0x3c>
 800b168:	a901      	add	r1, sp, #4
 800b16a:	4638      	mov	r0, r7
 800b16c:	f001 ff80 	bl	800d070 <ucdr_deserialize_uint32_t>
 800b170:	9b01      	ldr	r3, [sp, #4]
 800b172:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800b174:	429a      	cmp	r2, r3
 800b176:	d313      	bcc.n	800b1a0 <_Setup_Event__cdr_deserialize+0x90>
 800b178:	63a3      	str	r3, [r4, #56]	; 0x38
 800b17a:	b193      	cbz	r3, 800b1a2 <_Setup_Event__cdr_deserialize+0x92>
 800b17c:	2500      	movs	r5, #0
 800b17e:	4e0c      	ldr	r6, [pc, #48]	; (800b1b0 <_Setup_Event__cdr_deserialize+0xa0>)
 800b180:	e002      	b.n	800b188 <_Setup_Event__cdr_deserialize+0x78>
 800b182:	9b01      	ldr	r3, [sp, #4]
 800b184:	429d      	cmp	r5, r3
 800b186:	d20c      	bcs.n	800b1a2 <_Setup_Event__cdr_deserialize+0x92>
 800b188:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b18a:	4638      	mov	r0, r7
 800b18c:	6873      	ldr	r3, [r6, #4]
 800b18e:	4429      	add	r1, r5
 800b190:	3501      	adds	r5, #1
 800b192:	68db      	ldr	r3, [r3, #12]
 800b194:	4798      	blx	r3
 800b196:	2800      	cmp	r0, #0
 800b198:	d1f3      	bne.n	800b182 <_Setup_Event__cdr_deserialize+0x72>
 800b19a:	b002      	add	sp, #8
 800b19c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1a0:	2000      	movs	r0, #0
 800b1a2:	b002      	add	sp, #8
 800b1a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1a8:	4608      	mov	r0, r1
 800b1aa:	b002      	add	sp, #8
 800b1ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1b0:	200008f4 	.word	0x200008f4
 800b1b4:	200008dc 	.word	0x200008dc

0800b1b8 <_Setup_Event__cdr_serialize>:
 800b1b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1bc:	2800      	cmp	r0, #0
 800b1be:	d03b      	beq.n	800b238 <_Setup_Event__cdr_serialize+0x80>
 800b1c0:	4605      	mov	r5, r0
 800b1c2:	460e      	mov	r6, r1
 800b1c4:	f001 fa30 	bl	800c628 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	4631      	mov	r1, r6
 800b1cc:	4628      	mov	r0, r5
 800b1ce:	685b      	ldr	r3, [r3, #4]
 800b1d0:	689b      	ldr	r3, [r3, #8]
 800b1d2:	4798      	blx	r3
 800b1d4:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 800b1d6:	4630      	mov	r0, r6
 800b1d8:	4639      	mov	r1, r7
 800b1da:	f001 fe19 	bl	800ce10 <ucdr_serialize_uint32_t>
 800b1de:	b198      	cbz	r0, 800b208 <_Setup_Event__cdr_serialize+0x50>
 800b1e0:	b197      	cbz	r7, 800b208 <_Setup_Event__cdr_serialize+0x50>
 800b1e2:	2400      	movs	r4, #0
 800b1e4:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800b244 <_Setup_Event__cdr_serialize+0x8c>
 800b1e8:	e001      	b.n	800b1ee <_Setup_Event__cdr_serialize+0x36>
 800b1ea:	42a7      	cmp	r7, r4
 800b1ec:	d00c      	beq.n	800b208 <_Setup_Event__cdr_serialize+0x50>
 800b1ee:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 800b1f2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800b1f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b1f8:	4631      	mov	r1, r6
 800b1fa:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800b1fe:	3401      	adds	r4, #1
 800b200:	689b      	ldr	r3, [r3, #8]
 800b202:	4798      	blx	r3
 800b204:	2800      	cmp	r0, #0
 800b206:	d1f0      	bne.n	800b1ea <_Setup_Event__cdr_serialize+0x32>
 800b208:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800b20a:	4630      	mov	r0, r6
 800b20c:	4639      	mov	r1, r7
 800b20e:	f001 fdff 	bl	800ce10 <ucdr_serialize_uint32_t>
 800b212:	4680      	mov	r8, r0
 800b214:	b180      	cbz	r0, 800b238 <_Setup_Event__cdr_serialize+0x80>
 800b216:	b18f      	cbz	r7, 800b23c <_Setup_Event__cdr_serialize+0x84>
 800b218:	2400      	movs	r4, #0
 800b21a:	f8df 902c 	ldr.w	r9, [pc, #44]	; 800b248 <_Setup_Event__cdr_serialize+0x90>
 800b21e:	e001      	b.n	800b224 <_Setup_Event__cdr_serialize+0x6c>
 800b220:	42a7      	cmp	r7, r4
 800b222:	d00b      	beq.n	800b23c <_Setup_Event__cdr_serialize+0x84>
 800b224:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800b226:	4631      	mov	r1, r6
 800b228:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b22c:	4420      	add	r0, r4
 800b22e:	3401      	adds	r4, #1
 800b230:	689b      	ldr	r3, [r3, #8]
 800b232:	4798      	blx	r3
 800b234:	2800      	cmp	r0, #0
 800b236:	d1f3      	bne.n	800b220 <_Setup_Event__cdr_serialize+0x68>
 800b238:	f04f 0800 	mov.w	r8, #0
 800b23c:	4640      	mov	r0, r8
 800b23e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b242:	bf00      	nop
 800b244:	200008dc 	.word	0x200008dc
 800b248:	200008f4 	.word	0x200008f4

0800b24c <_Setup_Response__get_serialized_size>:
 800b24c:	b130      	cbz	r0, 800b25c <_Setup_Response__get_serialized_size+0x10>
 800b24e:	2101      	movs	r1, #1
 800b250:	2000      	movs	r0, #0
 800b252:	b508      	push	{r3, lr}
 800b254:	f002 fe34 	bl	800dec0 <ucdr_alignment>
 800b258:	3001      	adds	r0, #1
 800b25a:	bd08      	pop	{r3, pc}
 800b25c:	4770      	bx	lr
 800b25e:	bf00      	nop

0800b260 <max_serialized_size_racs_services__srv__Setup_Request>:
 800b260:	b570      	push	{r4, r5, r6, lr}
 800b262:	460c      	mov	r4, r1
 800b264:	2301      	movs	r3, #1
 800b266:	1c65      	adds	r5, r4, #1
 800b268:	4619      	mov	r1, r3
 800b26a:	7003      	strb	r3, [r0, #0]
 800b26c:	4620      	mov	r0, r4
 800b26e:	f002 fe27 	bl	800dec0 <ucdr_alignment>
 800b272:	4405      	add	r5, r0
 800b274:	2104      	movs	r1, #4
 800b276:	f1c4 0404 	rsb	r4, r4, #4
 800b27a:	4628      	mov	r0, r5
 800b27c:	f002 fe20 	bl	800dec0 <ucdr_alignment>
 800b280:	2104      	movs	r1, #4
 800b282:	1846      	adds	r6, r0, r1
 800b284:	442e      	add	r6, r5
 800b286:	4630      	mov	r0, r6
 800b288:	f002 fe1a 	bl	800dec0 <ucdr_alignment>
 800b28c:	2104      	movs	r1, #4
 800b28e:	1845      	adds	r5, r0, r1
 800b290:	442e      	add	r6, r5
 800b292:	4630      	mov	r0, r6
 800b294:	f002 fe14 	bl	800dec0 <ucdr_alignment>
 800b298:	2104      	movs	r1, #4
 800b29a:	4408      	add	r0, r1
 800b29c:	4406      	add	r6, r0
 800b29e:	4630      	mov	r0, r6
 800b2a0:	f002 fe0e 	bl	800dec0 <ucdr_alignment>
 800b2a4:	2104      	movs	r1, #4
 800b2a6:	1845      	adds	r5, r0, r1
 800b2a8:	4435      	add	r5, r6
 800b2aa:	4628      	mov	r0, r5
 800b2ac:	f002 fe08 	bl	800dec0 <ucdr_alignment>
 800b2b0:	2104      	movs	r1, #4
 800b2b2:	4408      	add	r0, r1
 800b2b4:	4405      	add	r5, r0
 800b2b6:	4628      	mov	r0, r5
 800b2b8:	f002 fe02 	bl	800dec0 <ucdr_alignment>
 800b2bc:	4420      	add	r0, r4
 800b2be:	4428      	add	r0, r5
 800b2c0:	bd70      	pop	{r4, r5, r6, pc}
 800b2c2:	bf00      	nop

0800b2c4 <_Setup_Request__max_serialized_size>:
 800b2c4:	b500      	push	{lr}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	2100      	movs	r1, #0
 800b2ca:	f10d 0007 	add.w	r0, sp, #7
 800b2ce:	f7ff ffc7 	bl	800b260 <max_serialized_size_racs_services__srv__Setup_Request>
 800b2d2:	b003      	add	sp, #12
 800b2d4:	f85d fb04 	ldr.w	pc, [sp], #4

0800b2d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Event>:
 800b2d8:	4800      	ldr	r0, [pc, #0]	; (800b2dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x4>)
 800b2da:	4770      	bx	lr
 800b2dc:	200008c4 	.word	0x200008c4

0800b2e0 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Setup>:
 800b2e0:	4800      	ldr	r0, [pc, #0]	; (800b2e4 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Setup+0x4>)
 800b2e2:	4770      	bx	lr
 800b2e4:	20000898 	.word	0x20000898

0800b2e8 <_rclc_check_for_new_data>:
 800b2e8:	2800      	cmp	r0, #0
 800b2ea:	d046      	beq.n	800b37a <_rclc_check_for_new_data+0x92>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	b530      	push	{r4, r5, lr}
 800b2f0:	7802      	ldrb	r2, [r0, #0]
 800b2f2:	b085      	sub	sp, #20
 800b2f4:	2a0a      	cmp	r2, #10
 800b2f6:	d842      	bhi.n	800b37e <_rclc_check_for_new_data+0x96>
 800b2f8:	e8df f002 	tbb	[pc, r2]
 800b2fc:	14181212 	.word	0x14181212
 800b300:	06060614 	.word	0x06060614
 800b304:	2e1a      	.short	0x2e1a
 800b306:	16          	.byte	0x16
 800b307:	00          	.byte	0x00
 800b308:	6a0a      	ldr	r2, [r1, #32]
 800b30a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b30c:	2000      	movs	r0, #0
 800b30e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800b312:	1a12      	subs	r2, r2, r0
 800b314:	bf18      	it	ne
 800b316:	2201      	movne	r2, #1
 800b318:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800b31c:	b005      	add	sp, #20
 800b31e:	bd30      	pop	{r4, r5, pc}
 800b320:	680a      	ldr	r2, [r1, #0]
 800b322:	e7f2      	b.n	800b30a <_rclc_check_for_new_data+0x22>
 800b324:	698a      	ldr	r2, [r1, #24]
 800b326:	e7f0      	b.n	800b30a <_rclc_check_for_new_data+0x22>
 800b328:	688a      	ldr	r2, [r1, #8]
 800b32a:	e7ee      	b.n	800b30a <_rclc_check_for_new_data+0x22>
 800b32c:	690a      	ldr	r2, [r1, #16]
 800b32e:	e7ec      	b.n	800b30a <_rclc_check_for_new_data+0x22>
 800b330:	685c      	ldr	r4, [r3, #4]
 800b332:	4608      	mov	r0, r1
 800b334:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b338:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b33c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b340:	f104 0110 	add.w	r1, r4, #16
 800b344:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b348:	9500      	str	r5, [sp, #0]
 800b34a:	f104 0341 	add.w	r3, r4, #65	; 0x41
 800b34e:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800b352:	f006 f8c5 	bl	80114e0 <rcl_action_client_wait_set_get_entities_ready>
 800b356:	e7e1      	b.n	800b31c <_rclc_check_for_new_data+0x34>
 800b358:	685c      	ldr	r4, [r3, #4]
 800b35a:	4608      	mov	r0, r1
 800b35c:	f104 0222 	add.w	r2, r4, #34	; 0x22
 800b360:	f104 0123 	add.w	r1, r4, #35	; 0x23
 800b364:	f104 0321 	add.w	r3, r4, #33	; 0x21
 800b368:	e9cd 2100 	strd	r2, r1, [sp]
 800b36c:	f104 0220 	add.w	r2, r4, #32
 800b370:	f104 0110 	add.w	r1, r4, #16
 800b374:	f006 facc 	bl	8011910 <rcl_action_server_wait_set_get_entities_ready>
 800b378:	e7d0      	b.n	800b31c <_rclc_check_for_new_data+0x34>
 800b37a:	200b      	movs	r0, #11
 800b37c:	4770      	bx	lr
 800b37e:	2001      	movs	r0, #1
 800b380:	e7cc      	b.n	800b31c <_rclc_check_for_new_data+0x34>
 800b382:	bf00      	nop

0800b384 <_rclc_take_new_data>:
 800b384:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b386:	b099      	sub	sp, #100	; 0x64
 800b388:	2800      	cmp	r0, #0
 800b38a:	f000 8088 	beq.w	800b49e <_rclc_take_new_data+0x11a>
 800b38e:	7803      	ldrb	r3, [r0, #0]
 800b390:	4604      	mov	r4, r0
 800b392:	2b0a      	cmp	r3, #10
 800b394:	f200 8167 	bhi.w	800b666 <_rclc_take_new_data+0x2e2>
 800b398:	e8df f003 	tbb	[pc, r3]
 800b39c:	44152d2d 	.word	0x44152d2d
 800b3a0:	19191944 	.word	0x19191944
 800b3a4:	065a      	.short	0x065a
 800b3a6:	15          	.byte	0x15
 800b3a7:	00          	.byte	0x00
 800b3a8:	6840      	ldr	r0, [r0, #4]
 800b3aa:	f890 3020 	ldrb.w	r3, [r0, #32]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	f040 80b2 	bne.w	800b518 <_rclc_take_new_data+0x194>
 800b3b4:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	f040 80e4 	bne.w	800b586 <_rclc_take_new_data+0x202>
 800b3be:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d16f      	bne.n	800b4a6 <_rclc_take_new_data+0x122>
 800b3c6:	2500      	movs	r5, #0
 800b3c8:	4628      	mov	r0, r5
 800b3ca:	b019      	add	sp, #100	; 0x64
 800b3cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3ce:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800b3d0:	6a0b      	ldr	r3, [r1, #32]
 800b3d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d0f5      	beq.n	800b3c6 <_rclc_take_new_data+0x42>
 800b3da:	6882      	ldr	r2, [r0, #8]
 800b3dc:	f100 0110 	add.w	r1, r0, #16
 800b3e0:	6840      	ldr	r0, [r0, #4]
 800b3e2:	f004 fd4d 	bl	800fe80 <rcl_take_request>
 800b3e6:	4605      	mov	r5, r0
 800b3e8:	2800      	cmp	r0, #0
 800b3ea:	d0ec      	beq.n	800b3c6 <_rclc_take_new_data+0x42>
 800b3ec:	f240 2359 	movw	r3, #601	; 0x259
 800b3f0:	4298      	cmp	r0, r3
 800b3f2:	d013      	beq.n	800b41c <_rclc_take_new_data+0x98>
 800b3f4:	e029      	b.n	800b44a <_rclc_take_new_data+0xc6>
 800b3f6:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800b3f8:	680b      	ldr	r3, [r1, #0]
 800b3fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d0e1      	beq.n	800b3c6 <_rclc_take_new_data+0x42>
 800b402:	2300      	movs	r3, #0
 800b404:	aa0a      	add	r2, sp, #40	; 0x28
 800b406:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800b40a:	f004 fe61 	bl	80100d0 <rcl_take>
 800b40e:	4605      	mov	r5, r0
 800b410:	2800      	cmp	r0, #0
 800b412:	d0d9      	beq.n	800b3c8 <_rclc_take_new_data+0x44>
 800b414:	f240 1391 	movw	r3, #401	; 0x191
 800b418:	4298      	cmp	r0, r3
 800b41a:	d116      	bne.n	800b44a <_rclc_take_new_data+0xc6>
 800b41c:	2300      	movs	r3, #0
 800b41e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800b422:	e7d1      	b.n	800b3c8 <_rclc_take_new_data+0x44>
 800b424:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800b426:	698b      	ldr	r3, [r1, #24]
 800b428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d0ca      	beq.n	800b3c6 <_rclc_take_new_data+0x42>
 800b430:	6882      	ldr	r2, [r0, #8]
 800b432:	f100 0110 	add.w	r1, r0, #16
 800b436:	6840      	ldr	r0, [r0, #4]
 800b438:	f003 fd92 	bl	800ef60 <rcl_take_response>
 800b43c:	4605      	mov	r5, r0
 800b43e:	2800      	cmp	r0, #0
 800b440:	d0c1      	beq.n	800b3c6 <_rclc_take_new_data+0x42>
 800b442:	f240 13f5 	movw	r3, #501	; 0x1f5
 800b446:	4298      	cmp	r0, r3
 800b448:	d0be      	beq.n	800b3c8 <_rclc_take_new_data+0x44>
 800b44a:	f000 feb9 	bl	800c1c0 <rcutils_reset_error>
 800b44e:	e7bb      	b.n	800b3c8 <_rclc_take_new_data+0x44>
 800b450:	6840      	ldr	r0, [r0, #4]
 800b452:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800b456:	2b00      	cmp	r3, #0
 800b458:	d17d      	bne.n	800b556 <_rclc_take_new_data+0x1d2>
 800b45a:	69c3      	ldr	r3, [r0, #28]
 800b45c:	b11b      	cbz	r3, 800b466 <_rclc_take_new_data+0xe2>
 800b45e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800b462:	2b00      	cmp	r3, #0
 800b464:	d144      	bne.n	800b4f0 <_rclc_take_new_data+0x16c>
 800b466:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	f040 80ac 	bne.w	800b5c8 <_rclc_take_new_data+0x244>
 800b470:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800b474:	2b00      	cmp	r3, #0
 800b476:	d0a6      	beq.n	800b3c6 <_rclc_take_new_data+0x42>
 800b478:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800b47a:	a90a      	add	r1, sp, #40	; 0x28
 800b47c:	3010      	adds	r0, #16
 800b47e:	f005 ff07 	bl	8011290 <rcl_action_take_result_response>
 800b482:	4605      	mov	r5, r0
 800b484:	2800      	cmp	r0, #0
 800b486:	d1e0      	bne.n	800b44a <_rclc_take_new_data+0xc6>
 800b488:	6860      	ldr	r0, [r4, #4]
 800b48a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b48e:	f006 fb6f 	bl	8011b70 <rclc_action_find_handle_by_result_request_sequence_number>
 800b492:	2800      	cmp	r0, #0
 800b494:	d098      	beq.n	800b3c8 <_rclc_take_new_data+0x44>
 800b496:	2301      	movs	r3, #1
 800b498:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 800b49c:	e794      	b.n	800b3c8 <_rclc_take_new_data+0x44>
 800b49e:	250b      	movs	r5, #11
 800b4a0:	4628      	mov	r0, r5
 800b4a2:	b019      	add	sp, #100	; 0x64
 800b4a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4a6:	ae04      	add	r6, sp, #16
 800b4a8:	3010      	adds	r0, #16
 800b4aa:	aa0a      	add	r2, sp, #40	; 0x28
 800b4ac:	4631      	mov	r1, r6
 800b4ae:	f006 f963 	bl	8011778 <rcl_action_take_cancel_request>
 800b4b2:	4605      	mov	r5, r0
 800b4b4:	2800      	cmp	r0, #0
 800b4b6:	d1c8      	bne.n	800b44a <_rclc_take_new_data+0xc6>
 800b4b8:	a90a      	add	r1, sp, #40	; 0x28
 800b4ba:	6860      	ldr	r0, [r4, #4]
 800b4bc:	f006 fb18 	bl	8011af0 <rclc_action_find_goal_handle_by_uuid>
 800b4c0:	4607      	mov	r7, r0
 800b4c2:	2800      	cmp	r0, #0
 800b4c4:	f000 80bb 	beq.w	800b63e <_rclc_take_new_data+0x2ba>
 800b4c8:	2101      	movs	r1, #1
 800b4ca:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800b4ce:	f006 fa99 	bl	8011a04 <rcl_action_transition_goal_state>
 800b4d2:	2803      	cmp	r0, #3
 800b4d4:	4684      	mov	ip, r0
 800b4d6:	f040 80a7 	bne.w	800b628 <_rclc_take_new_data+0x2a4>
 800b4da:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800b4de:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800b4e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b4e2:	e896 0003 	ldmia.w	r6, {r0, r1}
 800b4e6:	e884 0003 	stmia.w	r4, {r0, r1}
 800b4ea:	f887 c008 	strb.w	ip, [r7, #8]
 800b4ee:	e76b      	b.n	800b3c8 <_rclc_take_new_data+0x44>
 800b4f0:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800b4f2:	3010      	adds	r0, #16
 800b4f4:	f005 ff4c 	bl	8011390 <rcl_action_take_feedback>
 800b4f8:	4605      	mov	r5, r0
 800b4fa:	2800      	cmp	r0, #0
 800b4fc:	d1a5      	bne.n	800b44a <_rclc_take_new_data+0xc6>
 800b4fe:	6860      	ldr	r0, [r4, #4]
 800b500:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800b502:	f006 faf5 	bl	8011af0 <rclc_action_find_goal_handle_by_uuid>
 800b506:	4603      	mov	r3, r0
 800b508:	2800      	cmp	r0, #0
 800b50a:	f000 80a3 	beq.w	800b654 <_rclc_take_new_data+0x2d0>
 800b50e:	2201      	movs	r2, #1
 800b510:	6860      	ldr	r0, [r4, #4]
 800b512:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800b516:	e7a6      	b.n	800b466 <_rclc_take_new_data+0xe2>
 800b518:	f006 fac4 	bl	8011aa4 <rclc_action_take_goal_handle>
 800b51c:	4606      	mov	r6, r0
 800b51e:	6860      	ldr	r0, [r4, #4]
 800b520:	2e00      	cmp	r6, #0
 800b522:	f43f af47 	beq.w	800b3b4 <_rclc_take_new_data+0x30>
 800b526:	6070      	str	r0, [r6, #4]
 800b528:	f106 0128 	add.w	r1, r6, #40	; 0x28
 800b52c:	69f2      	ldr	r2, [r6, #28]
 800b52e:	3010      	adds	r0, #16
 800b530:	f006 f86c 	bl	801160c <rcl_action_take_goal_request>
 800b534:	4605      	mov	r5, r0
 800b536:	2800      	cmp	r0, #0
 800b538:	f040 808e 	bne.w	800b658 <_rclc_take_new_data+0x2d4>
 800b53c:	69f7      	ldr	r7, [r6, #28]
 800b53e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b540:	7235      	strb	r5, [r6, #8]
 800b542:	f8c6 0009 	str.w	r0, [r6, #9]
 800b546:	f8c6 100d 	str.w	r1, [r6, #13]
 800b54a:	6860      	ldr	r0, [r4, #4]
 800b54c:	f8c6 2011 	str.w	r2, [r6, #17]
 800b550:	f8c6 3015 	str.w	r3, [r6, #21]
 800b554:	e72e      	b.n	800b3b4 <_rclc_take_new_data+0x30>
 800b556:	aa04      	add	r2, sp, #16
 800b558:	a90a      	add	r1, sp, #40	; 0x28
 800b55a:	3010      	adds	r0, #16
 800b55c:	f005 fe20 	bl	80111a0 <rcl_action_take_goal_response>
 800b560:	4605      	mov	r5, r0
 800b562:	2800      	cmp	r0, #0
 800b564:	f47f af71 	bne.w	800b44a <_rclc_take_new_data+0xc6>
 800b568:	6860      	ldr	r0, [r4, #4]
 800b56a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b56e:	f006 faed 	bl	8011b4c <rclc_action_find_handle_by_goal_request_sequence_number>
 800b572:	b130      	cbz	r0, 800b582 <_rclc_take_new_data+0x1fe>
 800b574:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800b578:	2201      	movs	r2, #1
 800b57a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 800b57e:	f880 2020 	strb.w	r2, [r0, #32]
 800b582:	6860      	ldr	r0, [r4, #4]
 800b584:	e769      	b.n	800b45a <_rclc_take_new_data+0xd6>
 800b586:	3010      	adds	r0, #16
 800b588:	aa04      	add	r2, sp, #16
 800b58a:	a90a      	add	r1, sp, #40	; 0x28
 800b58c:	f006 f8b4 	bl	80116f8 <rcl_action_take_result_request>
 800b590:	4605      	mov	r5, r0
 800b592:	2800      	cmp	r0, #0
 800b594:	f47f af59 	bne.w	800b44a <_rclc_take_new_data+0xc6>
 800b598:	a904      	add	r1, sp, #16
 800b59a:	6860      	ldr	r0, [r4, #4]
 800b59c:	f006 faa8 	bl	8011af0 <rclc_action_find_goal_handle_by_uuid>
 800b5a0:	4607      	mov	r7, r0
 800b5a2:	b160      	cbz	r0, 800b5be <_rclc_take_new_data+0x23a>
 800b5a4:	ad0a      	add	r5, sp, #40	; 0x28
 800b5a6:	f100 0640 	add.w	r6, r0, #64	; 0x40
 800b5aa:	f04f 0c02 	mov.w	ip, #2
 800b5ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b5b0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b5b2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b5b6:	e886 0003 	stmia.w	r6, {r0, r1}
 800b5ba:	f887 c008 	strb.w	ip, [r7, #8]
 800b5be:	6860      	ldr	r0, [r4, #4]
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 800b5c6:	e6fa      	b.n	800b3be <_rclc_take_new_data+0x3a>
 800b5c8:	f100 0230 	add.w	r2, r0, #48	; 0x30
 800b5cc:	a90a      	add	r1, sp, #40	; 0x28
 800b5ce:	3010      	adds	r0, #16
 800b5d0:	f005 fe9e 	bl	8011310 <rcl_action_take_cancel_response>
 800b5d4:	4605      	mov	r5, r0
 800b5d6:	2800      	cmp	r0, #0
 800b5d8:	f47f af37 	bne.w	800b44a <_rclc_take_new_data+0xc6>
 800b5dc:	6860      	ldr	r0, [r4, #4]
 800b5de:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b5e2:	f006 fad7 	bl	8011b94 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800b5e6:	4606      	mov	r6, r0
 800b5e8:	6860      	ldr	r0, [r4, #4]
 800b5ea:	2e00      	cmp	r6, #0
 800b5ec:	f43f af40 	beq.w	800b470 <_rclc_take_new_data+0xec>
 800b5f0:	2701      	movs	r7, #1
 800b5f2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b5f4:	84b7      	strh	r7, [r6, #36]	; 0x24
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	f43f af3a 	beq.w	800b470 <_rclc_take_new_data+0xec>
 800b5fc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b5fe:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800b602:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800b606:	f006 fa73 	bl	8011af0 <rclc_action_find_goal_handle_by_uuid>
 800b60a:	b138      	cbz	r0, 800b61c <_rclc_take_new_data+0x298>
 800b60c:	6860      	ldr	r0, [r4, #4]
 800b60e:	3501      	adds	r5, #1
 800b610:	f886 7025 	strb.w	r7, [r6, #37]	; 0x25
 800b614:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b616:	42ab      	cmp	r3, r5
 800b618:	d8f0      	bhi.n	800b5fc <_rclc_take_new_data+0x278>
 800b61a:	e729      	b.n	800b470 <_rclc_take_new_data+0xec>
 800b61c:	6860      	ldr	r0, [r4, #4]
 800b61e:	3501      	adds	r5, #1
 800b620:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b622:	42ab      	cmp	r3, r5
 800b624:	d8ea      	bhi.n	800b5fc <_rclc_take_new_data+0x278>
 800b626:	e723      	b.n	800b470 <_rclc_take_new_data+0xec>
 800b628:	ab06      	add	r3, sp, #24
 800b62a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b62c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b630:	2103      	movs	r1, #3
 800b632:	6860      	ldr	r0, [r4, #4]
 800b634:	e896 000c 	ldmia.w	r6, {r2, r3}
 800b638:	f006 fb22 	bl	8011c80 <rclc_action_server_goal_cancel_reject>
 800b63c:	e6c4      	b.n	800b3c8 <_rclc_take_new_data+0x44>
 800b63e:	ab06      	add	r3, sp, #24
 800b640:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b642:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b646:	2102      	movs	r1, #2
 800b648:	6860      	ldr	r0, [r4, #4]
 800b64a:	e896 000c 	ldmia.w	r6, {r2, r3}
 800b64e:	f006 fb17 	bl	8011c80 <rclc_action_server_goal_cancel_reject>
 800b652:	e6b9      	b.n	800b3c8 <_rclc_take_new_data+0x44>
 800b654:	6860      	ldr	r0, [r4, #4]
 800b656:	e706      	b.n	800b466 <_rclc_take_new_data+0xe2>
 800b658:	4631      	mov	r1, r6
 800b65a:	6860      	ldr	r0, [r4, #4]
 800b65c:	f006 fa32 	bl	8011ac4 <rclc_action_remove_used_goal_handle>
 800b660:	f000 fdae 	bl	800c1c0 <rcutils_reset_error>
 800b664:	e6b0      	b.n	800b3c8 <_rclc_take_new_data+0x44>
 800b666:	2501      	movs	r5, #1
 800b668:	e6ae      	b.n	800b3c8 <_rclc_take_new_data+0x44>
 800b66a:	bf00      	nop

0800b66c <_rclc_execute.part.0>:
 800b66c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b66e:	7803      	ldrb	r3, [r0, #0]
 800b670:	b085      	sub	sp, #20
 800b672:	4604      	mov	r4, r0
 800b674:	2b0a      	cmp	r3, #10
 800b676:	f200 8139 	bhi.w	800b8ec <_rclc_execute.part.0+0x280>
 800b67a:	e8df f003 	tbb	[pc, r3]
 800b67e:	4268      	.short	0x4268
 800b680:	06a75b4d 	.word	0x06a75b4d
 800b684:	721d0606 	.word	0x721d0606
 800b688:	62          	.byte	0x62
 800b689:	00          	.byte	0x00
 800b68a:	2b06      	cmp	r3, #6
 800b68c:	f000 8126 	beq.w	800b8dc <_rclc_execute.part.0+0x270>
 800b690:	2b07      	cmp	r3, #7
 800b692:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b694:	f040 811c 	bne.w	800b8d0 <_rclc_execute.part.0+0x264>
 800b698:	f104 0510 	add.w	r5, r4, #16
 800b69c:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 800b6a0:	6880      	ldr	r0, [r0, #8]
 800b6a2:	4798      	blx	r3
 800b6a4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b6a6:	4629      	mov	r1, r5
 800b6a8:	6860      	ldr	r0, [r4, #4]
 800b6aa:	f004 fc39 	bl	800ff20 <rcl_send_response>
 800b6ae:	4604      	mov	r4, r0
 800b6b0:	b378      	cbz	r0, 800b712 <_rclc_execute.part.0+0xa6>
 800b6b2:	f000 fd85 	bl	800c1c0 <rcutils_reset_error>
 800b6b6:	e02c      	b.n	800b712 <_rclc_execute.part.0+0xa6>
 800b6b8:	6840      	ldr	r0, [r0, #4]
 800b6ba:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	f000 808e 	beq.w	800b7e0 <_rclc_execute.part.0+0x174>
 800b6c4:	2600      	movs	r6, #0
 800b6c6:	2701      	movs	r7, #1
 800b6c8:	e004      	b.n	800b6d4 <_rclc_execute.part.0+0x68>
 800b6ca:	f006 f9c5 	bl	8011a58 <rclc_action_send_result_request>
 800b6ce:	b998      	cbnz	r0, 800b6f8 <_rclc_execute.part.0+0x8c>
 800b6d0:	722f      	strb	r7, [r5, #8]
 800b6d2:	6860      	ldr	r0, [r4, #4]
 800b6d4:	f006 fa70 	bl	8011bb8 <rclc_action_find_first_handle_with_goal_response>
 800b6d8:	4605      	mov	r5, r0
 800b6da:	2800      	cmp	r0, #0
 800b6dc:	d07f      	beq.n	800b7de <_rclc_execute.part.0+0x172>
 800b6de:	6863      	ldr	r3, [r4, #4]
 800b6e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b6e2:	699b      	ldr	r3, [r3, #24]
 800b6e4:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 800b6e8:	f885 6020 	strb.w	r6, [r5, #32]
 800b6ec:	4798      	blx	r3
 800b6ee:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 800b6f2:	4628      	mov	r0, r5
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d1e8      	bne.n	800b6ca <_rclc_execute.part.0+0x5e>
 800b6f8:	6860      	ldr	r0, [r4, #4]
 800b6fa:	4629      	mov	r1, r5
 800b6fc:	f006 f9e2 	bl	8011ac4 <rclc_action_remove_used_goal_handle>
 800b700:	e7e7      	b.n	800b6d2 <_rclc_execute.part.0+0x66>
 800b702:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 800b706:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
 800b70a:	b100      	cbz	r0, 800b70e <_rclc_execute.part.0+0xa2>
 800b70c:	68a0      	ldr	r0, [r4, #8]
 800b70e:	2400      	movs	r4, #0
 800b710:	4798      	blx	r3
 800b712:	4620      	mov	r0, r4
 800b714:	b005      	add	sp, #20
 800b716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b718:	6840      	ldr	r0, [r0, #4]
 800b71a:	f004 fdf7 	bl	801030c <rcl_timer_call>
 800b71e:	f240 3321 	movw	r3, #801	; 0x321
 800b722:	4604      	mov	r4, r0
 800b724:	4298      	cmp	r0, r3
 800b726:	d001      	beq.n	800b72c <_rclc_execute.part.0+0xc0>
 800b728:	2800      	cmp	r0, #0
 800b72a:	d1c2      	bne.n	800b6b2 <_rclc_execute.part.0+0x46>
 800b72c:	2400      	movs	r4, #0
 800b72e:	4620      	mov	r0, r4
 800b730:	b005      	add	sp, #20
 800b732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b734:	2400      	movs	r4, #0
 800b736:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b738:	6880      	ldr	r0, [r0, #8]
 800b73a:	4798      	blx	r3
 800b73c:	4620      	mov	r0, r4
 800b73e:	b005      	add	sp, #20
 800b740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b742:	2400      	movs	r4, #0
 800b744:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b746:	4798      	blx	r3
 800b748:	4620      	mov	r0, r4
 800b74a:	b005      	add	sp, #20
 800b74c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b74e:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 800b752:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b754:	b100      	cbz	r0, 800b758 <_rclc_execute.part.0+0xec>
 800b756:	68a0      	ldr	r0, [r4, #8]
 800b758:	2400      	movs	r4, #0
 800b75a:	4798      	blx	r3
 800b75c:	4620      	mov	r0, r4
 800b75e:	b005      	add	sp, #20
 800b760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b762:	6840      	ldr	r0, [r0, #4]
 800b764:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800b768:	bb3b      	cbnz	r3, 800b7ba <_rclc_execute.part.0+0x14e>
 800b76a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d07d      	beq.n	800b86e <_rclc_execute.part.0+0x202>
 800b772:	f640 0634 	movw	r6, #2100	; 0x834
 800b776:	2701      	movs	r7, #1
 800b778:	e007      	b.n	800b78a <_rclc_execute.part.0+0x11e>
 800b77a:	4628      	mov	r0, r5
 800b77c:	f006 fa34 	bl	8011be8 <rclc_action_server_response_goal_request>
 800b780:	4629      	mov	r1, r5
 800b782:	6860      	ldr	r0, [r4, #4]
 800b784:	f006 f99e 	bl	8011ac4 <rclc_action_remove_used_goal_handle>
 800b788:	6860      	ldr	r0, [r4, #4]
 800b78a:	2100      	movs	r1, #0
 800b78c:	f006 f9c6 	bl	8011b1c <rclc_action_find_first_handle_by_status>
 800b790:	4605      	mov	r5, r0
 800b792:	2800      	cmp	r0, #0
 800b794:	d068      	beq.n	800b868 <_rclc_execute.part.0+0x1fc>
 800b796:	6863      	ldr	r3, [r4, #4]
 800b798:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b79a:	699b      	ldr	r3, [r3, #24]
 800b79c:	4798      	blx	r3
 800b79e:	42b0      	cmp	r0, r6
 800b7a0:	f04f 0100 	mov.w	r1, #0
 800b7a4:	d1e9      	bne.n	800b77a <_rclc_execute.part.0+0x10e>
 800b7a6:	2101      	movs	r1, #1
 800b7a8:	4628      	mov	r0, r5
 800b7aa:	f006 fa1d 	bl	8011be8 <rclc_action_server_response_goal_request>
 800b7ae:	722f      	strb	r7, [r5, #8]
 800b7b0:	e7ea      	b.n	800b788 <_rclc_execute.part.0+0x11c>
 800b7b2:	6848      	ldr	r0, [r1, #4]
 800b7b4:	f006 f986 	bl	8011ac4 <rclc_action_remove_used_goal_handle>
 800b7b8:	6860      	ldr	r0, [r4, #4]
 800b7ba:	f006 f9bb 	bl	8011b34 <rclc_action_find_first_terminated_handle>
 800b7be:	4601      	mov	r1, r0
 800b7c0:	2800      	cmp	r0, #0
 800b7c2:	d1f6      	bne.n	800b7b2 <_rclc_execute.part.0+0x146>
 800b7c4:	6860      	ldr	r0, [r4, #4]
 800b7c6:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 800b7ca:	e7ce      	b.n	800b76a <_rclc_execute.part.0+0xfe>
 800b7cc:	2400      	movs	r4, #0
 800b7ce:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b7d0:	f100 0110 	add.w	r1, r0, #16
 800b7d4:	6880      	ldr	r0, [r0, #8]
 800b7d6:	4798      	blx	r3
 800b7d8:	4620      	mov	r0, r4
 800b7da:	b005      	add	sp, #20
 800b7dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7de:	6860      	ldr	r0, [r4, #4]
 800b7e0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800b7e4:	b18b      	cbz	r3, 800b80a <_rclc_execute.part.0+0x19e>
 800b7e6:	68c5      	ldr	r5, [r0, #12]
 800b7e8:	b32d      	cbz	r5, 800b836 <_rclc_execute.part.0+0x1ca>
 800b7ea:	2600      	movs	r6, #0
 800b7ec:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800b7f0:	b143      	cbz	r3, 800b804 <_rclc_execute.part.0+0x198>
 800b7f2:	69c3      	ldr	r3, [r0, #28]
 800b7f4:	f885 6022 	strb.w	r6, [r5, #34]	; 0x22
 800b7f8:	b123      	cbz	r3, 800b804 <_rclc_execute.part.0+0x198>
 800b7fa:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800b7fc:	4628      	mov	r0, r5
 800b7fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b800:	4798      	blx	r3
 800b802:	6860      	ldr	r0, [r4, #4]
 800b804:	682d      	ldr	r5, [r5, #0]
 800b806:	2d00      	cmp	r5, #0
 800b808:	d1f0      	bne.n	800b7ec <_rclc_execute.part.0+0x180>
 800b80a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800b80e:	b193      	cbz	r3, 800b836 <_rclc_execute.part.0+0x1ca>
 800b810:	68c5      	ldr	r5, [r0, #12]
 800b812:	b185      	cbz	r5, 800b836 <_rclc_execute.part.0+0x1ca>
 800b814:	2600      	movs	r6, #0
 800b816:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800b81a:	b14b      	cbz	r3, 800b830 <_rclc_execute.part.0+0x1c4>
 800b81c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b81e:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 800b822:	b12b      	cbz	r3, 800b830 <_rclc_execute.part.0+0x1c4>
 800b824:	4628      	mov	r0, r5
 800b826:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 800b82a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b82c:	4798      	blx	r3
 800b82e:	6860      	ldr	r0, [r4, #4]
 800b830:	682d      	ldr	r5, [r5, #0]
 800b832:	2d00      	cmp	r5, #0
 800b834:	d1ef      	bne.n	800b816 <_rclc_execute.part.0+0x1aa>
 800b836:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	f43f af76 	beq.w	800b72c <_rclc_execute.part.0+0xc0>
 800b840:	2700      	movs	r7, #0
 800b842:	e00b      	b.n	800b85c <_rclc_execute.part.0+0x1f0>
 800b844:	6863      	ldr	r3, [r4, #4]
 800b846:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b848:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b84a:	6a1e      	ldr	r6, [r3, #32]
 800b84c:	f885 7023 	strb.w	r7, [r5, #35]	; 0x23
 800b850:	47b0      	blx	r6
 800b852:	6860      	ldr	r0, [r4, #4]
 800b854:	4629      	mov	r1, r5
 800b856:	f006 f935 	bl	8011ac4 <rclc_action_remove_used_goal_handle>
 800b85a:	6860      	ldr	r0, [r4, #4]
 800b85c:	f006 f9b8 	bl	8011bd0 <rclc_action_find_first_handle_with_result_response>
 800b860:	4605      	mov	r5, r0
 800b862:	2800      	cmp	r0, #0
 800b864:	d1ee      	bne.n	800b844 <_rclc_execute.part.0+0x1d8>
 800b866:	e761      	b.n	800b72c <_rclc_execute.part.0+0xc0>
 800b868:	6860      	ldr	r0, [r4, #4]
 800b86a:	f880 5020 	strb.w	r5, [r0, #32]
 800b86e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800b872:	2b00      	cmp	r3, #0
 800b874:	f43f af5a 	beq.w	800b72c <_rclc_execute.part.0+0xc0>
 800b878:	68c5      	ldr	r5, [r0, #12]
 800b87a:	b1b5      	cbz	r5, 800b8aa <_rclc_execute.part.0+0x23e>
 800b87c:	2602      	movs	r6, #2
 800b87e:	e001      	b.n	800b884 <_rclc_execute.part.0+0x218>
 800b880:	682d      	ldr	r5, [r5, #0]
 800b882:	b195      	cbz	r5, 800b8aa <_rclc_execute.part.0+0x23e>
 800b884:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800b888:	2b03      	cmp	r3, #3
 800b88a:	d1f9      	bne.n	800b880 <_rclc_execute.part.0+0x214>
 800b88c:	69c3      	ldr	r3, [r0, #28]
 800b88e:	4628      	mov	r0, r5
 800b890:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b892:	4798      	blx	r3
 800b894:	4603      	mov	r3, r0
 800b896:	f105 0260 	add.w	r2, r5, #96	; 0x60
 800b89a:	4628      	mov	r0, r5
 800b89c:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800b8a0:	b143      	cbz	r3, 800b8b4 <_rclc_execute.part.0+0x248>
 800b8a2:	f006 f9c1 	bl	8011c28 <rclc_action_server_goal_cancel_accept>
 800b8a6:	6860      	ldr	r0, [r4, #4]
 800b8a8:	e7ea      	b.n	800b880 <_rclc_execute.part.0+0x214>
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	461c      	mov	r4, r3
 800b8ae:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 800b8b2:	e72e      	b.n	800b712 <_rclc_execute.part.0+0xa6>
 800b8b4:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800b8b6:	f105 0758 	add.w	r7, r5, #88	; 0x58
 800b8ba:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b8be:	2101      	movs	r1, #1
 800b8c0:	6860      	ldr	r0, [r4, #4]
 800b8c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8c6:	f006 f9db 	bl	8011c80 <rclc_action_server_goal_cancel_reject>
 800b8ca:	722e      	strb	r6, [r5, #8]
 800b8cc:	6860      	ldr	r0, [r4, #4]
 800b8ce:	e7d7      	b.n	800b880 <_rclc_execute.part.0+0x214>
 800b8d0:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800b8d2:	f104 0510 	add.w	r5, r4, #16
 800b8d6:	6880      	ldr	r0, [r0, #8]
 800b8d8:	4798      	blx	r3
 800b8da:	e6e3      	b.n	800b6a4 <_rclc_execute.part.0+0x38>
 800b8dc:	f100 0510 	add.w	r5, r0, #16
 800b8e0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b8e2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800b8e4:	4629      	mov	r1, r5
 800b8e6:	6880      	ldr	r0, [r0, #8]
 800b8e8:	4798      	blx	r3
 800b8ea:	e6db      	b.n	800b6a4 <_rclc_execute.part.0+0x38>
 800b8ec:	2401      	movs	r4, #1
 800b8ee:	e710      	b.n	800b712 <_rclc_execute.part.0+0xa6>

0800b8f0 <rclc_executor_trigger_any>:
 800b8f0:	2800      	cmp	r0, #0
 800b8f2:	d03d      	beq.n	800b970 <rclc_executor_trigger_any+0x80>
 800b8f4:	2900      	cmp	r1, #0
 800b8f6:	d03c      	beq.n	800b972 <rclc_executor_trigger_any+0x82>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 800b8fe:	2200      	movs	r2, #0
 800b900:	2800      	cmp	r0, #0
 800b902:	d035      	beq.n	800b970 <rclc_executor_trigger_any+0x80>
 800b904:	b430      	push	{r4, r5}
 800b906:	f893 c000 	ldrb.w	ip, [r3]
 800b90a:	f1bc 0f08 	cmp.w	ip, #8
 800b90e:	d11d      	bne.n	800b94c <rclc_executor_trigger_any+0x5c>
 800b910:	685c      	ldr	r4, [r3, #4]
 800b912:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800b914:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800b918:	d105      	bne.n	800b926 <rclc_executor_trigger_any+0x36>
 800b91a:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800b91e:	b910      	cbnz	r0, 800b926 <rclc_executor_trigger_any+0x36>
 800b920:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 800b924:	b128      	cbz	r0, 800b932 <rclc_executor_trigger_any+0x42>
 800b926:	bc30      	pop	{r4, r5}
 800b928:	4770      	bx	lr
 800b92a:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800b92e:	2800      	cmp	r0, #0
 800b930:	d1f9      	bne.n	800b926 <rclc_executor_trigger_any+0x36>
 800b932:	3201      	adds	r2, #1
 800b934:	3340      	adds	r3, #64	; 0x40
 800b936:	4291      	cmp	r1, r2
 800b938:	d017      	beq.n	800b96a <rclc_executor_trigger_any+0x7a>
 800b93a:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800b93e:	2800      	cmp	r0, #0
 800b940:	d0f1      	beq.n	800b926 <rclc_executor_trigger_any+0x36>
 800b942:	f893 c000 	ldrb.w	ip, [r3]
 800b946:	f1bc 0f08 	cmp.w	ip, #8
 800b94a:	d0e1      	beq.n	800b910 <rclc_executor_trigger_any+0x20>
 800b94c:	f1bc 0f09 	cmp.w	ip, #9
 800b950:	d1eb      	bne.n	800b92a <rclc_executor_trigger_any+0x3a>
 800b952:	685c      	ldr	r4, [r3, #4]
 800b954:	6a25      	ldr	r5, [r4, #32]
 800b956:	2d00      	cmp	r5, #0
 800b958:	d1e5      	bne.n	800b926 <rclc_executor_trigger_any+0x36>
 800b95a:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800b95e:	2800      	cmp	r0, #0
 800b960:	d1e1      	bne.n	800b926 <rclc_executor_trigger_any+0x36>
 800b962:	3201      	adds	r2, #1
 800b964:	3340      	adds	r3, #64	; 0x40
 800b966:	4291      	cmp	r1, r2
 800b968:	d1e7      	bne.n	800b93a <rclc_executor_trigger_any+0x4a>
 800b96a:	2000      	movs	r0, #0
 800b96c:	bc30      	pop	{r4, r5}
 800b96e:	4770      	bx	lr
 800b970:	4770      	bx	lr
 800b972:	4608      	mov	r0, r1
 800b974:	4770      	bx	lr
 800b976:	bf00      	nop

0800b978 <rclc_executor_get_zero_initialized_executor>:
 800b978:	b510      	push	{r4, lr}
 800b97a:	4604      	mov	r4, r0
 800b97c:	2290      	movs	r2, #144	; 0x90
 800b97e:	4902      	ldr	r1, [pc, #8]	; (800b988 <rclc_executor_get_zero_initialized_executor+0x10>)
 800b980:	f00d ffcd 	bl	801991e <memcpy>
 800b984:	4620      	mov	r0, r4
 800b986:	bd10      	pop	{r4, pc}
 800b988:	0801b058 	.word	0x0801b058
 800b98c:	00000000 	.word	0x00000000

0800b990 <rclc_executor_init>:
 800b990:	2900      	cmp	r1, #0
 800b992:	d06a      	beq.n	800ba6a <rclc_executor_init+0xda>
 800b994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b998:	4605      	mov	r5, r0
 800b99a:	b0b2      	sub	sp, #200	; 0xc8
 800b99c:	2800      	cmp	r0, #0
 800b99e:	d05c      	beq.n	800ba5a <rclc_executor_init+0xca>
 800b9a0:	4616      	mov	r6, r2
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	4688      	mov	r8, r1
 800b9a6:	461f      	mov	r7, r3
 800b9a8:	f000 fbe6 	bl	800c178 <rcutils_allocator_is_valid>
 800b9ac:	2e00      	cmp	r6, #0
 800b9ae:	d054      	beq.n	800ba5a <rclc_executor_init+0xca>
 800b9b0:	f080 0401 	eor.w	r4, r0, #1
 800b9b4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800b9b8:	d14f      	bne.n	800ba5a <rclc_executor_init+0xca>
 800b9ba:	2290      	movs	r2, #144	; 0x90
 800b9bc:	4930      	ldr	r1, [pc, #192]	; (800ba80 <rclc_executor_init+0xf0>)
 800b9be:	a80e      	add	r0, sp, #56	; 0x38
 800b9c0:	f00d ffad 	bl	801991e <memcpy>
 800b9c4:	a90e      	add	r1, sp, #56	; 0x38
 800b9c6:	2290      	movs	r2, #144	; 0x90
 800b9c8:	4628      	mov	r0, r5
 800b9ca:	f00d ffa8 	bl	801991e <memcpy>
 800b9ce:	4668      	mov	r0, sp
 800b9d0:	f8c5 8004 	str.w	r8, [r5, #4]
 800b9d4:	60ee      	str	r6, [r5, #12]
 800b9d6:	f004 fe0f 	bl	80105f8 <rcl_get_zero_initialized_wait_set>
 800b9da:	46ec      	mov	ip, sp
 800b9dc:	f105 0e18 	add.w	lr, r5, #24
 800b9e0:	f8d7 8000 	ldr.w	r8, [r7]
 800b9e4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b9e8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b9ec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b9f0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b9f4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b9f8:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800ba78 <rclc_executor_init+0xe8>
 800b9fc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ba00:	f8dc 3000 	ldr.w	r3, [ip]
 800ba04:	01b0      	lsls	r0, r6, #6
 800ba06:	6939      	ldr	r1, [r7, #16]
 800ba08:	f8ce 3000 	str.w	r3, [lr]
 800ba0c:	616f      	str	r7, [r5, #20]
 800ba0e:	ed85 7b1c 	vstr	d7, [r5, #112]	; 0x70
 800ba12:	47c0      	blx	r8
 800ba14:	60a8      	str	r0, [r5, #8]
 800ba16:	b908      	cbnz	r0, 800ba1c <rclc_executor_init+0x8c>
 800ba18:	e029      	b.n	800ba6e <rclc_executor_init+0xde>
 800ba1a:	68a8      	ldr	r0, [r5, #8]
 800ba1c:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800ba20:	3401      	adds	r4, #1
 800ba22:	4631      	mov	r1, r6
 800ba24:	f000 fa88 	bl	800bf38 <rclc_executor_handle_init>
 800ba28:	42a6      	cmp	r6, r4
 800ba2a:	d8f6      	bhi.n	800ba1a <rclc_executor_init+0x8a>
 800ba2c:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 800ba30:	f000 fa78 	bl	800bf24 <rclc_executor_handle_counters_zero_init>
 800ba34:	4a13      	ldr	r2, [pc, #76]	; (800ba84 <rclc_executor_init+0xf4>)
 800ba36:	2300      	movs	r3, #0
 800ba38:	68a8      	ldr	r0, [r5, #8]
 800ba3a:	e9c5 2320 	strd	r2, r3, [r5, #128]	; 0x80
 800ba3e:	b168      	cbz	r0, 800ba5c <rclc_executor_init+0xcc>
 800ba40:	68eb      	ldr	r3, [r5, #12]
 800ba42:	b173      	cbz	r3, 800ba62 <rclc_executor_init+0xd2>
 800ba44:	696a      	ldr	r2, [r5, #20]
 800ba46:	fab2 f382 	clz	r3, r2
 800ba4a:	095b      	lsrs	r3, r3, #5
 800ba4c:	b14a      	cbz	r2, 800ba62 <rclc_executor_init+0xd2>
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f885 3088 	strb.w	r3, [r5, #136]	; 0x88
 800ba54:	b032      	add	sp, #200	; 0xc8
 800ba56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba5a:	200b      	movs	r0, #11
 800ba5c:	b032      	add	sp, #200	; 0xc8
 800ba5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba62:	2000      	movs	r0, #0
 800ba64:	b032      	add	sp, #200	; 0xc8
 800ba66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba6a:	200b      	movs	r0, #11
 800ba6c:	4770      	bx	lr
 800ba6e:	200a      	movs	r0, #10
 800ba70:	e7f4      	b.n	800ba5c <rclc_executor_init+0xcc>
 800ba72:	bf00      	nop
 800ba74:	f3af 8000 	nop.w
 800ba78:	3b9aca00 	.word	0x3b9aca00
 800ba7c:	00000000 	.word	0x00000000
 800ba80:	0801b058 	.word	0x0801b058
 800ba84:	0800b8f1 	.word	0x0800b8f1

0800ba88 <rclc_executor_add_service>:
 800ba88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba8a:	9d06      	ldr	r5, [sp, #24]
 800ba8c:	4604      	mov	r4, r0
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	bf18      	it	ne
 800ba92:	2d00      	cmpne	r5, #0
 800ba94:	bf0c      	ite	eq
 800ba96:	2001      	moveq	r0, #1
 800ba98:	2000      	movne	r0, #0
 800ba9a:	2a00      	cmp	r2, #0
 800ba9c:	bf08      	it	eq
 800ba9e:	f040 0001 	orreq.w	r0, r0, #1
 800baa2:	2900      	cmp	r1, #0
 800baa4:	bf08      	it	eq
 800baa6:	f040 0001 	orreq.w	r0, r0, #1
 800baaa:	bb40      	cbnz	r0, 800bafe <rclc_executor_add_service+0x76>
 800baac:	fab4 f684 	clz	r6, r4
 800bab0:	0976      	lsrs	r6, r6, #5
 800bab2:	b324      	cbz	r4, 800bafe <rclc_executor_add_service+0x76>
 800bab4:	e9d4 7003 	ldrd	r7, r0, [r4, #12]
 800bab8:	42b8      	cmp	r0, r7
 800baba:	d301      	bcc.n	800bac0 <rclc_executor_add_service+0x38>
 800babc:	2001      	movs	r0, #1
 800babe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bac0:	68a7      	ldr	r7, [r4, #8]
 800bac2:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800bac6:	f100 0c01 	add.w	ip, r0, #1
 800baca:	eb07 1080 	add.w	r0, r7, r0, lsl #6
 800bace:	6283      	str	r3, [r0, #40]	; 0x28
 800bad0:	2305      	movs	r3, #5
 800bad2:	6305      	str	r5, [r0, #48]	; 0x30
 800bad4:	f104 0518 	add.w	r5, r4, #24
 800bad8:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800badc:	f827 300e 	strh.w	r3, [r7, lr]
 800bae0:	2301      	movs	r3, #1
 800bae2:	62c6      	str	r6, [r0, #44]	; 0x2c
 800bae4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 800bae8:	4628      	mov	r0, r5
 800baea:	f8c4 c010 	str.w	ip, [r4, #16]
 800baee:	f004 fd97 	bl	8010620 <rcl_wait_set_is_valid>
 800baf2:	b930      	cbnz	r0, 800bb02 <rclc_executor_add_service+0x7a>
 800baf4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800baf6:	2000      	movs	r0, #0
 800baf8:	3301      	adds	r3, #1
 800bafa:	65a3      	str	r3, [r4, #88]	; 0x58
 800bafc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bafe:	200b      	movs	r0, #11
 800bb00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb02:	4628      	mov	r0, r5
 800bb04:	f004 fd92 	bl	801062c <rcl_wait_set_fini>
 800bb08:	2800      	cmp	r0, #0
 800bb0a:	d0f3      	beq.n	800baf4 <rclc_executor_add_service+0x6c>
 800bb0c:	e7d7      	b.n	800babe <rclc_executor_add_service+0x36>
 800bb0e:	bf00      	nop

0800bb10 <rclc_executor_prepare>:
 800bb10:	2800      	cmp	r0, #0
 800bb12:	d044      	beq.n	800bb9e <rclc_executor_prepare+0x8e>
 800bb14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb16:	f100 0518 	add.w	r5, r0, #24
 800bb1a:	b09b      	sub	sp, #108	; 0x6c
 800bb1c:	4604      	mov	r4, r0
 800bb1e:	4628      	mov	r0, r5
 800bb20:	f004 fd7e 	bl	8010620 <rcl_wait_set_is_valid>
 800bb24:	b110      	cbz	r0, 800bb2c <rclc_executor_prepare+0x1c>
 800bb26:	2000      	movs	r0, #0
 800bb28:	b01b      	add	sp, #108	; 0x6c
 800bb2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb2c:	4628      	mov	r0, r5
 800bb2e:	f004 fd7d 	bl	801062c <rcl_wait_set_fini>
 800bb32:	2800      	cmp	r0, #0
 800bb34:	d130      	bne.n	800bb98 <rclc_executor_prepare+0x88>
 800bb36:	a80c      	add	r0, sp, #48	; 0x30
 800bb38:	ae04      	add	r6, sp, #16
 800bb3a:	f004 fd5d 	bl	80105f8 <rcl_get_zero_initialized_wait_set>
 800bb3e:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800bb42:	46ae      	mov	lr, r5
 800bb44:	6967      	ldr	r7, [r4, #20]
 800bb46:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bb4a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bb4e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bb52:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bb56:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bb5a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bb5e:	f8dc 3000 	ldr.w	r3, [ip]
 800bb62:	f8ce 3000 	str.w	r3, [lr]
 800bb66:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800bb68:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	4628      	mov	r0, r5
 800bb6e:	6862      	ldr	r2, [r4, #4]
 800bb70:	6033      	str	r3, [r6, #0]
 800bb72:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800bb74:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800bb76:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800bb7a:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	; 0x50
 800bb7e:	e9cd 2100 	strd	r2, r1, [sp]
 800bb82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bb84:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800bb86:	f005 f851 	bl	8010c2c <rcl_wait_set_init>
 800bb8a:	2800      	cmp	r0, #0
 800bb8c:	d0cc      	beq.n	800bb28 <rclc_executor_prepare+0x18>
 800bb8e:	900b      	str	r0, [sp, #44]	; 0x2c
 800bb90:	f000 fb16 	bl	800c1c0 <rcutils_reset_error>
 800bb94:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800bb96:	e7c7      	b.n	800bb28 <rclc_executor_prepare+0x18>
 800bb98:	f000 fb12 	bl	800c1c0 <rcutils_reset_error>
 800bb9c:	e7cb      	b.n	800bb36 <rclc_executor_prepare+0x26>
 800bb9e:	200b      	movs	r0, #11
 800bba0:	4770      	bx	lr
 800bba2:	bf00      	nop

0800bba4 <rclc_executor_spin_some.part.0>:
 800bba4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bba8:	4605      	mov	r5, r0
 800bbaa:	4691      	mov	r9, r2
 800bbac:	4698      	mov	r8, r3
 800bbae:	f7ff ffaf 	bl	800bb10 <rclc_executor_prepare>
 800bbb2:	f105 0618 	add.w	r6, r5, #24
 800bbb6:	4630      	mov	r0, r6
 800bbb8:	f004 fe04 	bl	80107c4 <rcl_wait_set_clear>
 800bbbc:	4607      	mov	r7, r0
 800bbbe:	2800      	cmp	r0, #0
 800bbc0:	f040 80a8 	bne.w	800bd14 <rclc_executor_spin_some.part.0+0x170>
 800bbc4:	68eb      	ldr	r3, [r5, #12]
 800bbc6:	b30b      	cbz	r3, 800bc0c <rclc_executor_spin_some.part.0+0x68>
 800bbc8:	4604      	mov	r4, r0
 800bbca:	68a9      	ldr	r1, [r5, #8]
 800bbcc:	01a2      	lsls	r2, r4, #6
 800bbce:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800bbd2:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 800bbd6:	b1cb      	cbz	r3, 800bc0c <rclc_executor_spin_some.part.0+0x68>
 800bbd8:	5c8b      	ldrb	r3, [r1, r2]
 800bbda:	2b0a      	cmp	r3, #10
 800bbdc:	f200 80de 	bhi.w	800bd9c <rclc_executor_spin_some.part.0+0x1f8>
 800bbe0:	e8df f003 	tbb	[pc, r3]
 800bbe4:	8da99d9d 	.word	0x8da99d9d
 800bbe8:	0606068d 	.word	0x0606068d
 800bbec:	c1ce      	.short	0xc1ce
 800bbee:	b5          	.byte	0xb5
 800bbef:	00          	.byte	0x00
 800bbf0:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800bbf4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800bbf8:	4630      	mov	r0, r6
 800bbfa:	f005 f933 	bl	8010e64 <rcl_wait_set_add_service>
 800bbfe:	2800      	cmp	r0, #0
 800bc00:	f040 8087 	bne.w	800bd12 <rclc_executor_spin_some.part.0+0x16e>
 800bc04:	3401      	adds	r4, #1
 800bc06:	68eb      	ldr	r3, [r5, #12]
 800bc08:	429c      	cmp	r4, r3
 800bc0a:	d3de      	bcc.n	800bbca <rclc_executor_spin_some.part.0+0x26>
 800bc0c:	4643      	mov	r3, r8
 800bc0e:	464a      	mov	r2, r9
 800bc10:	4630      	mov	r0, r6
 800bc12:	f005 f955 	bl	8010ec0 <rcl_wait>
 800bc16:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	f000 80c6 	beq.w	800bdac <rclc_executor_spin_some.part.0+0x208>
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	f040 80bb 	bne.w	800bd9c <rclc_executor_spin_some.part.0+0x1f8>
 800bc26:	68eb      	ldr	r3, [r5, #12]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	f000 8159 	beq.w	800bee0 <rclc_executor_spin_some.part.0+0x33c>
 800bc2e:	2400      	movs	r4, #0
 800bc30:	f240 1991 	movw	r9, #401	; 0x191
 800bc34:	46a0      	mov	r8, r4
 800bc36:	e00a      	b.n	800bc4e <rclc_executor_spin_some.part.0+0xaa>
 800bc38:	f7ff fb56 	bl	800b2e8 <_rclc_check_for_new_data>
 800bc3c:	4604      	mov	r4, r0
 800bc3e:	b110      	cbz	r0, 800bc46 <rclc_executor_spin_some.part.0+0xa2>
 800bc40:	4548      	cmp	r0, r9
 800bc42:	f040 80b1 	bne.w	800bda8 <rclc_executor_spin_some.part.0+0x204>
 800bc46:	68eb      	ldr	r3, [r5, #12]
 800bc48:	4598      	cmp	r8, r3
 800bc4a:	f080 8126 	bcs.w	800be9a <rclc_executor_spin_some.part.0+0x2f6>
 800bc4e:	68aa      	ldr	r2, [r5, #8]
 800bc50:	4631      	mov	r1, r6
 800bc52:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800bc56:	f108 0801 	add.w	r8, r8, #1
 800bc5a:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800bc5e:	f1bc 0f00 	cmp.w	ip, #0
 800bc62:	d1e9      	bne.n	800bc38 <rclc_executor_spin_some.part.0+0x94>
 800bc64:	4619      	mov	r1, r3
 800bc66:	4610      	mov	r0, r2
 800bc68:	e9d5 3220 	ldrd	r3, r2, [r5, #128]	; 0x80
 800bc6c:	4798      	blx	r3
 800bc6e:	2800      	cmp	r0, #0
 800bc70:	f000 809a 	beq.w	800bda8 <rclc_executor_spin_some.part.0+0x204>
 800bc74:	68eb      	ldr	r3, [r5, #12]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	f000 8096 	beq.w	800bda8 <rclc_executor_spin_some.part.0+0x204>
 800bc7c:	f04f 0800 	mov.w	r8, #0
 800bc80:	f240 1991 	movw	r9, #401	; 0x191
 800bc84:	e009      	b.n	800bc9a <rclc_executor_spin_some.part.0+0xf6>
 800bc86:	f7ff fb7d 	bl	800b384 <_rclc_take_new_data>
 800bc8a:	4604      	mov	r4, r0
 800bc8c:	b110      	cbz	r0, 800bc94 <rclc_executor_spin_some.part.0+0xf0>
 800bc8e:	4548      	cmp	r0, r9
 800bc90:	f040 808a 	bne.w	800bda8 <rclc_executor_spin_some.part.0+0x204>
 800bc94:	68eb      	ldr	r3, [r5, #12]
 800bc96:	4598      	cmp	r8, r3
 800bc98:	d209      	bcs.n	800bcae <rclc_executor_spin_some.part.0+0x10a>
 800bc9a:	68a8      	ldr	r0, [r5, #8]
 800bc9c:	4631      	mov	r1, r6
 800bc9e:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800bca2:	f108 0801 	add.w	r8, r8, #1
 800bca6:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800bcaa:	2a00      	cmp	r2, #0
 800bcac:	d1eb      	bne.n	800bc86 <rclc_executor_spin_some.part.0+0xe2>
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d07a      	beq.n	800bda8 <rclc_executor_spin_some.part.0+0x204>
 800bcb2:	2600      	movs	r6, #0
 800bcb4:	e00e      	b.n	800bcd4 <rclc_executor_spin_some.part.0+0x130>
 800bcb6:	f812 200c 	ldrb.w	r2, [r2, ip]
 800bcba:	2a08      	cmp	r2, #8
 800bcbc:	f000 80fc 	beq.w	800beb8 <rclc_executor_spin_some.part.0+0x314>
 800bcc0:	2a09      	cmp	r2, #9
 800bcc2:	f000 80ee 	beq.w	800bea2 <rclc_executor_spin_some.part.0+0x2fe>
 800bcc6:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 800bcca:	b98a      	cbnz	r2, 800bcf0 <rclc_executor_spin_some.part.0+0x14c>
 800bccc:	3601      	adds	r6, #1
 800bcce:	429e      	cmp	r6, r3
 800bcd0:	d267      	bcs.n	800bda2 <rclc_executor_spin_some.part.0+0x1fe>
 800bcd2:	2400      	movs	r4, #0
 800bcd4:	68aa      	ldr	r2, [r5, #8]
 800bcd6:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800bcda:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800bcde:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
 800bce2:	2900      	cmp	r1, #0
 800bce4:	d060      	beq.n	800bda8 <rclc_executor_spin_some.part.0+0x204>
 800bce6:	7841      	ldrb	r1, [r0, #1]
 800bce8:	2900      	cmp	r1, #0
 800bcea:	d0e4      	beq.n	800bcb6 <rclc_executor_spin_some.part.0+0x112>
 800bcec:	2901      	cmp	r1, #1
 800bcee:	d1ed      	bne.n	800bccc <rclc_executor_spin_some.part.0+0x128>
 800bcf0:	f7ff fcbc 	bl	800b66c <_rclc_execute.part.0>
 800bcf4:	2800      	cmp	r0, #0
 800bcf6:	f040 80b5 	bne.w	800be64 <rclc_executor_spin_some.part.0+0x2c0>
 800bcfa:	68eb      	ldr	r3, [r5, #12]
 800bcfc:	e7e6      	b.n	800bccc <rclc_executor_spin_some.part.0+0x128>
 800bcfe:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800bd02:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800bd06:	4630      	mov	r0, r6
 800bd08:	f005 f880 	bl	8010e0c <rcl_wait_set_add_client>
 800bd0c:	2800      	cmp	r0, #0
 800bd0e:	f43f af79 	beq.w	800bc04 <rclc_executor_spin_some.part.0+0x60>
 800bd12:	4607      	mov	r7, r0
 800bd14:	f000 fa54 	bl	800c1c0 <rcutils_reset_error>
 800bd18:	4638      	mov	r0, r7
 800bd1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd1e:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800bd22:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800bd26:	4630      	mov	r0, r6
 800bd28:	f004 fd20 	bl	801076c <rcl_wait_set_add_subscription>
 800bd2c:	2800      	cmp	r0, #0
 800bd2e:	f43f af69 	beq.w	800bc04 <rclc_executor_spin_some.part.0+0x60>
 800bd32:	4607      	mov	r7, r0
 800bd34:	e7ee      	b.n	800bd14 <rclc_executor_spin_some.part.0+0x170>
 800bd36:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800bd3a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800bd3e:	4630      	mov	r0, r6
 800bd40:	f005 f834 	bl	8010dac <rcl_wait_set_add_timer>
 800bd44:	2800      	cmp	r0, #0
 800bd46:	f43f af5d 	beq.w	800bc04 <rclc_executor_spin_some.part.0+0x60>
 800bd4a:	4607      	mov	r7, r0
 800bd4c:	e7e2      	b.n	800bd14 <rclc_executor_spin_some.part.0+0x170>
 800bd4e:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800bd52:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800bd56:	4630      	mov	r0, r6
 800bd58:	f004 fffc 	bl	8010d54 <rcl_wait_set_add_guard_condition>
 800bd5c:	2800      	cmp	r0, #0
 800bd5e:	f43f af51 	beq.w	800bc04 <rclc_executor_spin_some.part.0+0x60>
 800bd62:	4607      	mov	r7, r0
 800bd64:	e7d6      	b.n	800bd14 <rclc_executor_spin_some.part.0+0x170>
 800bd66:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800bd6a:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800bd6e:	4630      	mov	r0, r6
 800bd70:	3110      	adds	r1, #16
 800bd72:	f005 fd79 	bl	8011868 <rcl_action_wait_set_add_action_server>
 800bd76:	2800      	cmp	r0, #0
 800bd78:	f43f af44 	beq.w	800bc04 <rclc_executor_spin_some.part.0+0x60>
 800bd7c:	4607      	mov	r7, r0
 800bd7e:	e7c9      	b.n	800bd14 <rclc_executor_spin_some.part.0+0x170>
 800bd80:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800bd84:	2300      	movs	r3, #0
 800bd86:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800bd8a:	4630      	mov	r0, r6
 800bd8c:	3110      	adds	r1, #16
 800bd8e:	f005 fb43 	bl	8011418 <rcl_action_wait_set_add_action_client>
 800bd92:	2800      	cmp	r0, #0
 800bd94:	f43f af36 	beq.w	800bc04 <rclc_executor_spin_some.part.0+0x60>
 800bd98:	4607      	mov	r7, r0
 800bd9a:	e7bb      	b.n	800bd14 <rclc_executor_spin_some.part.0+0x170>
 800bd9c:	2701      	movs	r7, #1
 800bd9e:	f000 fa0f 	bl	800c1c0 <rcutils_reset_error>
 800bda2:	4638      	mov	r0, r7
 800bda4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bda8:	4627      	mov	r7, r4
 800bdaa:	e7fa      	b.n	800bda2 <rclc_executor_spin_some.part.0+0x1fe>
 800bdac:	68eb      	ldr	r3, [r5, #12]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	f000 8093 	beq.w	800beda <rclc_executor_spin_some.part.0+0x336>
 800bdb4:	2400      	movs	r4, #0
 800bdb6:	f240 1991 	movw	r9, #401	; 0x191
 800bdba:	46a0      	mov	r8, r4
 800bdbc:	e008      	b.n	800bdd0 <rclc_executor_spin_some.part.0+0x22c>
 800bdbe:	f7ff fa93 	bl	800b2e8 <_rclc_check_for_new_data>
 800bdc2:	4604      	mov	r4, r0
 800bdc4:	b108      	cbz	r0, 800bdca <rclc_executor_spin_some.part.0+0x226>
 800bdc6:	4548      	cmp	r0, r9
 800bdc8:	d1ee      	bne.n	800bda8 <rclc_executor_spin_some.part.0+0x204>
 800bdca:	68eb      	ldr	r3, [r5, #12]
 800bdcc:	4598      	cmp	r8, r3
 800bdce:	d266      	bcs.n	800be9e <rclc_executor_spin_some.part.0+0x2fa>
 800bdd0:	68aa      	ldr	r2, [r5, #8]
 800bdd2:	4631      	mov	r1, r6
 800bdd4:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800bdd8:	f108 0801 	add.w	r8, r8, #1
 800bddc:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800bde0:	f1bc 0f00 	cmp.w	ip, #0
 800bde4:	d1eb      	bne.n	800bdbe <rclc_executor_spin_some.part.0+0x21a>
 800bde6:	4619      	mov	r1, r3
 800bde8:	4610      	mov	r0, r2
 800bdea:	e9d5 3220 	ldrd	r3, r2, [r5, #128]	; 0x80
 800bdee:	4798      	blx	r3
 800bdf0:	2800      	cmp	r0, #0
 800bdf2:	d0d9      	beq.n	800bda8 <rclc_executor_spin_some.part.0+0x204>
 800bdf4:	68eb      	ldr	r3, [r5, #12]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d0d6      	beq.n	800bda8 <rclc_executor_spin_some.part.0+0x204>
 800bdfa:	f04f 0a00 	mov.w	sl, #0
 800bdfe:	f240 1891 	movw	r8, #401	; 0x191
 800be02:	f240 2959 	movw	r9, #601	; 0x259
 800be06:	e00e      	b.n	800be26 <rclc_executor_spin_some.part.0+0x282>
 800be08:	f813 300b 	ldrb.w	r3, [r3, fp]
 800be0c:	2b08      	cmp	r3, #8
 800be0e:	d034      	beq.n	800be7a <rclc_executor_spin_some.part.0+0x2d6>
 800be10:	2b09      	cmp	r3, #9
 800be12:	d029      	beq.n	800be68 <rclc_executor_spin_some.part.0+0x2c4>
 800be14:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800be18:	bb03      	cbnz	r3, 800be5c <rclc_executor_spin_some.part.0+0x2b8>
 800be1a:	f10a 0a01 	add.w	sl, sl, #1
 800be1e:	68eb      	ldr	r3, [r5, #12]
 800be20:	459a      	cmp	sl, r3
 800be22:	d2be      	bcs.n	800bda2 <rclc_executor_spin_some.part.0+0x1fe>
 800be24:	2400      	movs	r4, #0
 800be26:	68a8      	ldr	r0, [r5, #8]
 800be28:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800be2c:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800be30:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800be34:	2b00      	cmp	r3, #0
 800be36:	d0b7      	beq.n	800bda8 <rclc_executor_spin_some.part.0+0x204>
 800be38:	4631      	mov	r1, r6
 800be3a:	f7ff faa3 	bl	800b384 <_rclc_take_new_data>
 800be3e:	2800      	cmp	r0, #0
 800be40:	bf18      	it	ne
 800be42:	4540      	cmpne	r0, r8
 800be44:	d001      	beq.n	800be4a <rclc_executor_spin_some.part.0+0x2a6>
 800be46:	4548      	cmp	r0, r9
 800be48:	d10c      	bne.n	800be64 <rclc_executor_spin_some.part.0+0x2c0>
 800be4a:	68ab      	ldr	r3, [r5, #8]
 800be4c:	eb13 000b 	adds.w	r0, r3, fp
 800be50:	d021      	beq.n	800be96 <rclc_executor_spin_some.part.0+0x2f2>
 800be52:	7842      	ldrb	r2, [r0, #1]
 800be54:	2a00      	cmp	r2, #0
 800be56:	d0d7      	beq.n	800be08 <rclc_executor_spin_some.part.0+0x264>
 800be58:	2a01      	cmp	r2, #1
 800be5a:	d1de      	bne.n	800be1a <rclc_executor_spin_some.part.0+0x276>
 800be5c:	f7ff fc06 	bl	800b66c <_rclc_execute.part.0>
 800be60:	2800      	cmp	r0, #0
 800be62:	d0da      	beq.n	800be1a <rclc_executor_spin_some.part.0+0x276>
 800be64:	4607      	mov	r7, r0
 800be66:	e79c      	b.n	800bda2 <rclc_executor_spin_some.part.0+0x1fe>
 800be68:	6843      	ldr	r3, [r0, #4]
 800be6a:	6a1a      	ldr	r2, [r3, #32]
 800be6c:	2a00      	cmp	r2, #0
 800be6e:	d1f5      	bne.n	800be5c <rclc_executor_spin_some.part.0+0x2b8>
 800be70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800be74:	2b00      	cmp	r3, #0
 800be76:	d0d0      	beq.n	800be1a <rclc_executor_spin_some.part.0+0x276>
 800be78:	e7f0      	b.n	800be5c <rclc_executor_spin_some.part.0+0x2b8>
 800be7a:	6843      	ldr	r3, [r0, #4]
 800be7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800be7e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800be82:	d1eb      	bne.n	800be5c <rclc_executor_spin_some.part.0+0x2b8>
 800be84:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800be88:	2a00      	cmp	r2, #0
 800be8a:	d1e7      	bne.n	800be5c <rclc_executor_spin_some.part.0+0x2b8>
 800be8c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800be90:	2b00      	cmp	r3, #0
 800be92:	d0c2      	beq.n	800be1a <rclc_executor_spin_some.part.0+0x276>
 800be94:	e7e2      	b.n	800be5c <rclc_executor_spin_some.part.0+0x2b8>
 800be96:	270b      	movs	r7, #11
 800be98:	e783      	b.n	800bda2 <rclc_executor_spin_some.part.0+0x1fe>
 800be9a:	68aa      	ldr	r2, [r5, #8]
 800be9c:	e6e2      	b.n	800bc64 <rclc_executor_spin_some.part.0+0xc0>
 800be9e:	68aa      	ldr	r2, [r5, #8]
 800bea0:	e7a1      	b.n	800bde6 <rclc_executor_spin_some.part.0+0x242>
 800bea2:	6842      	ldr	r2, [r0, #4]
 800bea4:	6a11      	ldr	r1, [r2, #32]
 800bea6:	2900      	cmp	r1, #0
 800bea8:	f47f af22 	bne.w	800bcf0 <rclc_executor_spin_some.part.0+0x14c>
 800beac:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800beb0:	2a00      	cmp	r2, #0
 800beb2:	f43f af0b 	beq.w	800bccc <rclc_executor_spin_some.part.0+0x128>
 800beb6:	e71b      	b.n	800bcf0 <rclc_executor_spin_some.part.0+0x14c>
 800beb8:	6842      	ldr	r2, [r0, #4]
 800beba:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800bebc:	f031 417f 	bics.w	r1, r1, #4278190080	; 0xff000000
 800bec0:	f47f af16 	bne.w	800bcf0 <rclc_executor_spin_some.part.0+0x14c>
 800bec4:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
 800bec8:	2900      	cmp	r1, #0
 800beca:	f47f af11 	bne.w	800bcf0 <rclc_executor_spin_some.part.0+0x14c>
 800bece:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 800bed2:	2a00      	cmp	r2, #0
 800bed4:	f43f aefa 	beq.w	800bccc <rclc_executor_spin_some.part.0+0x128>
 800bed8:	e70a      	b.n	800bcf0 <rclc_executor_spin_some.part.0+0x14c>
 800beda:	68aa      	ldr	r2, [r5, #8]
 800bedc:	461c      	mov	r4, r3
 800bede:	e782      	b.n	800bde6 <rclc_executor_spin_some.part.0+0x242>
 800bee0:	68aa      	ldr	r2, [r5, #8]
 800bee2:	461c      	mov	r4, r3
 800bee4:	e6be      	b.n	800bc64 <rclc_executor_spin_some.part.0+0xc0>
 800bee6:	bf00      	nop

0800bee8 <rclc_executor_spin>:
 800bee8:	b1d0      	cbz	r0, 800bf20 <rclc_executor_spin+0x38>
 800beea:	b510      	push	{r4, lr}
 800beec:	4604      	mov	r4, r0
 800beee:	b082      	sub	sp, #8
 800bef0:	e004      	b.n	800befc <rclc_executor_spin+0x14>
 800bef2:	f7ff fe57 	bl	800bba4 <rclc_executor_spin_some.part.0>
 800bef6:	f030 0302 	bics.w	r3, r0, #2
 800befa:	d10f      	bne.n	800bf1c <rclc_executor_spin+0x34>
 800befc:	6860      	ldr	r0, [r4, #4]
 800befe:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
 800bf02:	e9cd 2300 	strd	r2, r3, [sp]
 800bf06:	f003 f8bb 	bl	800f080 <rcl_context_is_valid>
 800bf0a:	4601      	mov	r1, r0
 800bf0c:	4620      	mov	r0, r4
 800bf0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf12:	2900      	cmp	r1, #0
 800bf14:	d1ed      	bne.n	800bef2 <rclc_executor_spin+0xa>
 800bf16:	f000 f953 	bl	800c1c0 <rcutils_reset_error>
 800bf1a:	2001      	movs	r0, #1
 800bf1c:	b002      	add	sp, #8
 800bf1e:	bd10      	pop	{r4, pc}
 800bf20:	200b      	movs	r0, #11
 800bf22:	4770      	bx	lr

0800bf24 <rclc_executor_handle_counters_zero_init>:
 800bf24:	b130      	cbz	r0, 800bf34 <rclc_executor_handle_counters_zero_init+0x10>
 800bf26:	2220      	movs	r2, #32
 800bf28:	2100      	movs	r1, #0
 800bf2a:	b508      	push	{r3, lr}
 800bf2c:	f00d fb82 	bl	8019634 <memset>
 800bf30:	2000      	movs	r0, #0
 800bf32:	bd08      	pop	{r3, pc}
 800bf34:	200b      	movs	r0, #11
 800bf36:	4770      	bx	lr

0800bf38 <rclc_executor_handle_init>:
 800bf38:	4603      	mov	r3, r0
 800bf3a:	b178      	cbz	r0, 800bf5c <rclc_executor_handle_init+0x24>
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	f04f 0c0b 	mov.w	ip, #11
 800bf42:	6341      	str	r1, [r0, #52]	; 0x34
 800bf44:	4610      	mov	r0, r2
 800bf46:	f8a3 c000 	strh.w	ip, [r3]
 800bf4a:	631a      	str	r2, [r3, #48]	; 0x30
 800bf4c:	871a      	strh	r2, [r3, #56]	; 0x38
 800bf4e:	ed9f 7b04 	vldr	d7, [pc, #16]	; 800bf60 <rclc_executor_handle_init+0x28>
 800bf52:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800bf56:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
 800bf5a:	4770      	bx	lr
 800bf5c:	200b      	movs	r0, #11
 800bf5e:	4770      	bx	lr
	...

0800bf68 <rclc_support_init>:
 800bf68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf6c:	b086      	sub	sp, #24
 800bf6e:	b3bb      	cbz	r3, 800bfe0 <rclc_support_init+0x78>
 800bf70:	4606      	mov	r6, r0
 800bf72:	b3a8      	cbz	r0, 800bfe0 <rclc_support_init+0x78>
 800bf74:	461c      	mov	r4, r3
 800bf76:	460f      	mov	r7, r1
 800bf78:	4690      	mov	r8, r2
 800bf7a:	f003 fa21 	bl	800f3c0 <rcl_get_zero_initialized_init_options>
 800bf7e:	f104 050c 	add.w	r5, r4, #12
 800bf82:	9005      	str	r0, [sp, #20]
 800bf84:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bf88:	e88d 0003 	stmia.w	sp, {r0, r1}
 800bf8c:	a805      	add	r0, sp, #20
 800bf8e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800bf92:	f003 fa17 	bl	800f3c4 <rcl_init_options_init>
 800bf96:	4605      	mov	r5, r0
 800bf98:	b9e0      	cbnz	r0, 800bfd4 <rclc_support_init+0x6c>
 800bf9a:	ad02      	add	r5, sp, #8
 800bf9c:	4628      	mov	r0, r5
 800bf9e:	f003 f865 	bl	800f06c <rcl_get_zero_initialized_context>
 800bfa2:	4633      	mov	r3, r6
 800bfa4:	aa05      	add	r2, sp, #20
 800bfa6:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bfaa:	e886 0003 	stmia.w	r6, {r0, r1}
 800bfae:	4641      	mov	r1, r8
 800bfb0:	4638      	mov	r0, r7
 800bfb2:	f003 f8cb 	bl	800f14c <rcl_init>
 800bfb6:	4605      	mov	r5, r0
 800bfb8:	b9b8      	cbnz	r0, 800bfea <rclc_support_init+0x82>
 800bfba:	4622      	mov	r2, r4
 800bfbc:	f106 010c 	add.w	r1, r6, #12
 800bfc0:	2003      	movs	r0, #3
 800bfc2:	60b4      	str	r4, [r6, #8]
 800bfc4:	f004 f90e 	bl	80101e4 <rcl_clock_init>
 800bfc8:	4605      	mov	r5, r0
 800bfca:	b970      	cbnz	r0, 800bfea <rclc_support_init+0x82>
 800bfcc:	a805      	add	r0, sp, #20
 800bfce:	f003 fa55 	bl	800f47c <rcl_init_options_fini>
 800bfd2:	b108      	cbz	r0, 800bfd8 <rclc_support_init+0x70>
 800bfd4:	f000 f8f4 	bl	800c1c0 <rcutils_reset_error>
 800bfd8:	4628      	mov	r0, r5
 800bfda:	b006      	add	sp, #24
 800bfdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfe0:	250b      	movs	r5, #11
 800bfe2:	4628      	mov	r0, r5
 800bfe4:	b006      	add	sp, #24
 800bfe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfea:	f000 f8e9 	bl	800c1c0 <rcutils_reset_error>
 800bfee:	a805      	add	r0, sp, #20
 800bff0:	f003 fa44 	bl	800f47c <rcl_init_options_fini>
 800bff4:	2800      	cmp	r0, #0
 800bff6:	d0ef      	beq.n	800bfd8 <rclc_support_init+0x70>
 800bff8:	e7ec      	b.n	800bfd4 <rclc_support_init+0x6c>
 800bffa:	bf00      	nop

0800bffc <rclc_node_init_default>:
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	bf18      	it	ne
 800c000:	2a00      	cmpne	r2, #0
 800c002:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c006:	4616      	mov	r6, r2
 800c008:	bf0c      	ite	eq
 800c00a:	2201      	moveq	r2, #1
 800c00c:	2200      	movne	r2, #0
 800c00e:	b0a3      	sub	sp, #140	; 0x8c
 800c010:	2900      	cmp	r1, #0
 800c012:	bf08      	it	eq
 800c014:	f042 0201 	orreq.w	r2, r2, #1
 800c018:	bb22      	cbnz	r2, 800c064 <rclc_node_init_default+0x68>
 800c01a:	4604      	mov	r4, r0
 800c01c:	b310      	cbz	r0, 800c064 <rclc_node_init_default+0x68>
 800c01e:	f10d 0810 	add.w	r8, sp, #16
 800c022:	461f      	mov	r7, r3
 800c024:	460d      	mov	r5, r1
 800c026:	f10d 0918 	add.w	r9, sp, #24
 800c02a:	4640      	mov	r0, r8
 800c02c:	f003 fad2 	bl	800f5d4 <rcl_get_zero_initialized_node>
 800c030:	e898 0003 	ldmia.w	r8, {r0, r1}
 800c034:	e884 0003 	stmia.w	r4, {r0, r1}
 800c038:	4648      	mov	r0, r9
 800c03a:	f003 fc45 	bl	800f8c8 <rcl_node_get_default_options>
 800c03e:	4640      	mov	r0, r8
 800c040:	f003 fac8 	bl	800f5d4 <rcl_get_zero_initialized_node>
 800c044:	f8cd 9000 	str.w	r9, [sp]
 800c048:	463b      	mov	r3, r7
 800c04a:	4632      	mov	r2, r6
 800c04c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800c050:	e884 0003 	stmia.w	r4, {r0, r1}
 800c054:	4629      	mov	r1, r5
 800c056:	4620      	mov	r0, r4
 800c058:	f003 fac6 	bl	800f5e8 <rcl_node_init>
 800c05c:	b930      	cbnz	r0, 800c06c <rclc_node_init_default+0x70>
 800c05e:	b023      	add	sp, #140	; 0x8c
 800c060:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c064:	200b      	movs	r0, #11
 800c066:	b023      	add	sp, #140	; 0x8c
 800c068:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c06c:	9003      	str	r0, [sp, #12]
 800c06e:	f000 f8a7 	bl	800c1c0 <rcutils_reset_error>
 800c072:	f000 f8a5 	bl	800c1c0 <rcutils_reset_error>
 800c076:	9803      	ldr	r0, [sp, #12]
 800c078:	b023      	add	sp, #140	; 0x8c
 800c07a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c07e:	bf00      	nop

0800c080 <rclc_service_init_default>:
 800c080:	2b00      	cmp	r3, #0
 800c082:	bf18      	it	ne
 800c084:	2a00      	cmpne	r2, #0
 800c086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c08a:	4616      	mov	r6, r2
 800c08c:	bf0c      	ite	eq
 800c08e:	2201      	moveq	r2, #1
 800c090:	2200      	movne	r2, #0
 800c092:	b09e      	sub	sp, #120	; 0x78
 800c094:	2900      	cmp	r1, #0
 800c096:	bf08      	it	eq
 800c098:	f042 0201 	orreq.w	r2, r2, #1
 800c09c:	bb1a      	cbnz	r2, 800c0e6 <rclc_service_init_default+0x66>
 800c09e:	4604      	mov	r4, r0
 800c0a0:	b308      	cbz	r0, 800c0e6 <rclc_service_init_default+0x66>
 800c0a2:	f10d 0810 	add.w	r8, sp, #16
 800c0a6:	461f      	mov	r7, r3
 800c0a8:	460d      	mov	r5, r1
 800c0aa:	f003 fe11 	bl	800fcd0 <rcl_get_zero_initialized_service>
 800c0ae:	6020      	str	r0, [r4, #0]
 800c0b0:	4640      	mov	r0, r8
 800c0b2:	f003 febb 	bl	800fe2c <rcl_service_get_default_options>
 800c0b6:	2250      	movs	r2, #80	; 0x50
 800c0b8:	490d      	ldr	r1, [pc, #52]	; (800c0f0 <rclc_service_init_default+0x70>)
 800c0ba:	4640      	mov	r0, r8
 800c0bc:	f00d fc2f 	bl	801991e <memcpy>
 800c0c0:	463b      	mov	r3, r7
 800c0c2:	4632      	mov	r2, r6
 800c0c4:	4629      	mov	r1, r5
 800c0c6:	4620      	mov	r0, r4
 800c0c8:	f8cd 8000 	str.w	r8, [sp]
 800c0cc:	f003 fe06 	bl	800fcdc <rcl_service_init>
 800c0d0:	b910      	cbnz	r0, 800c0d8 <rclc_service_init_default+0x58>
 800c0d2:	b01e      	add	sp, #120	; 0x78
 800c0d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0d8:	9003      	str	r0, [sp, #12]
 800c0da:	f000 f871 	bl	800c1c0 <rcutils_reset_error>
 800c0de:	9803      	ldr	r0, [sp, #12]
 800c0e0:	b01e      	add	sp, #120	; 0x78
 800c0e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0e6:	200b      	movs	r0, #11
 800c0e8:	b01e      	add	sp, #120	; 0x78
 800c0ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0ee:	bf00      	nop
 800c0f0:	0801b0e8 	.word	0x0801b0e8

0800c0f4 <__default_zero_allocate>:
 800c0f4:	f00c bec0 	b.w	8018e78 <calloc>

0800c0f8 <__default_reallocate>:
 800c0f8:	f00d b84c 	b.w	8019194 <realloc>

0800c0fc <__default_deallocate>:
 800c0fc:	f00c bf2a 	b.w	8018f54 <free>

0800c100 <__default_allocate>:
 800c100:	f00c bf20 	b.w	8018f44 <malloc>

0800c104 <rcutils_get_zero_initialized_allocator>:
 800c104:	b510      	push	{r4, lr}
 800c106:	4c05      	ldr	r4, [pc, #20]	; (800c11c <rcutils_get_zero_initialized_allocator+0x18>)
 800c108:	4686      	mov	lr, r0
 800c10a:	4684      	mov	ip, r0
 800c10c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c10e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c112:	6823      	ldr	r3, [r4, #0]
 800c114:	4670      	mov	r0, lr
 800c116:	f8cc 3000 	str.w	r3, [ip]
 800c11a:	bd10      	pop	{r4, pc}
 800c11c:	0801b138 	.word	0x0801b138

0800c120 <rcutils_set_default_allocator>:
 800c120:	b1a8      	cbz	r0, 800c14e <rcutils_set_default_allocator+0x2e>
 800c122:	6802      	ldr	r2, [r0, #0]
 800c124:	b1a2      	cbz	r2, 800c150 <rcutils_set_default_allocator+0x30>
 800c126:	6841      	ldr	r1, [r0, #4]
 800c128:	b1a1      	cbz	r1, 800c154 <rcutils_set_default_allocator+0x34>
 800c12a:	b410      	push	{r4}
 800c12c:	68c4      	ldr	r4, [r0, #12]
 800c12e:	b164      	cbz	r4, 800c14a <rcutils_set_default_allocator+0x2a>
 800c130:	6880      	ldr	r0, [r0, #8]
 800c132:	b138      	cbz	r0, 800c144 <rcutils_set_default_allocator+0x24>
 800c134:	4b08      	ldr	r3, [pc, #32]	; (800c158 <rcutils_set_default_allocator+0x38>)
 800c136:	601a      	str	r2, [r3, #0]
 800c138:	2200      	movs	r2, #0
 800c13a:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800c13e:	2001      	movs	r0, #1
 800c140:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800c144:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c148:	4770      	bx	lr
 800c14a:	4620      	mov	r0, r4
 800c14c:	e7fa      	b.n	800c144 <rcutils_set_default_allocator+0x24>
 800c14e:	4770      	bx	lr
 800c150:	4610      	mov	r0, r2
 800c152:	4770      	bx	lr
 800c154:	4608      	mov	r0, r1
 800c156:	4770      	bx	lr
 800c158:	20000960 	.word	0x20000960

0800c15c <rcutils_get_default_allocator>:
 800c15c:	b510      	push	{r4, lr}
 800c15e:	4c05      	ldr	r4, [pc, #20]	; (800c174 <rcutils_get_default_allocator+0x18>)
 800c160:	4686      	mov	lr, r0
 800c162:	4684      	mov	ip, r0
 800c164:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c166:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c16a:	6823      	ldr	r3, [r4, #0]
 800c16c:	4670      	mov	r0, lr
 800c16e:	f8cc 3000 	str.w	r3, [ip]
 800c172:	bd10      	pop	{r4, pc}
 800c174:	20000960 	.word	0x20000960

0800c178 <rcutils_allocator_is_valid>:
 800c178:	b158      	cbz	r0, 800c192 <rcutils_allocator_is_valid+0x1a>
 800c17a:	6803      	ldr	r3, [r0, #0]
 800c17c:	b143      	cbz	r3, 800c190 <rcutils_allocator_is_valid+0x18>
 800c17e:	6843      	ldr	r3, [r0, #4]
 800c180:	b133      	cbz	r3, 800c190 <rcutils_allocator_is_valid+0x18>
 800c182:	68c3      	ldr	r3, [r0, #12]
 800c184:	b123      	cbz	r3, 800c190 <rcutils_allocator_is_valid+0x18>
 800c186:	6880      	ldr	r0, [r0, #8]
 800c188:	3800      	subs	r0, #0
 800c18a:	bf18      	it	ne
 800c18c:	2001      	movne	r0, #1
 800c18e:	4770      	bx	lr
 800c190:	4618      	mov	r0, r3
 800c192:	4770      	bx	lr

0800c194 <rcutils_get_error_string>:
 800c194:	4b06      	ldr	r3, [pc, #24]	; (800c1b0 <rcutils_get_error_string+0x1c>)
 800c196:	781b      	ldrb	r3, [r3, #0]
 800c198:	b13b      	cbz	r3, 800c1aa <rcutils_get_error_string+0x16>
 800c19a:	4b06      	ldr	r3, [pc, #24]	; (800c1b4 <rcutils_get_error_string+0x20>)
 800c19c:	781a      	ldrb	r2, [r3, #0]
 800c19e:	b90a      	cbnz	r2, 800c1a4 <rcutils_get_error_string+0x10>
 800c1a0:	2201      	movs	r2, #1
 800c1a2:	701a      	strb	r2, [r3, #0]
 800c1a4:	4b04      	ldr	r3, [pc, #16]	; (800c1b8 <rcutils_get_error_string+0x24>)
 800c1a6:	7818      	ldrb	r0, [r3, #0]
 800c1a8:	4770      	bx	lr
 800c1aa:	4b04      	ldr	r3, [pc, #16]	; (800c1bc <rcutils_get_error_string+0x28>)
 800c1ac:	7818      	ldrb	r0, [r3, #0]
 800c1ae:	4770      	bx	lr
 800c1b0:	2000b934 	.word	0x2000b934
 800c1b4:	2000b949 	.word	0x2000b949
 800c1b8:	2000b948 	.word	0x2000b948
 800c1bc:	0801a95c 	.word	0x0801a95c

0800c1c0 <rcutils_reset_error>:
 800c1c0:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800c1e0 <rcutils_reset_error+0x20>
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	4a08      	ldr	r2, [pc, #32]	; (800c1e8 <rcutils_reset_error+0x28>)
 800c1c8:	4808      	ldr	r0, [pc, #32]	; (800c1ec <rcutils_reset_error+0x2c>)
 800c1ca:	8013      	strh	r3, [r2, #0]
 800c1cc:	4908      	ldr	r1, [pc, #32]	; (800c1f0 <rcutils_reset_error+0x30>)
 800c1ce:	7003      	strb	r3, [r0, #0]
 800c1d0:	700b      	strb	r3, [r1, #0]
 800c1d2:	ed82 7b02 	vstr	d7, [r2, #8]
 800c1d6:	4a07      	ldr	r2, [pc, #28]	; (800c1f4 <rcutils_reset_error+0x34>)
 800c1d8:	7013      	strb	r3, [r2, #0]
 800c1da:	4770      	bx	lr
 800c1dc:	f3af 8000 	nop.w
	...
 800c1e8:	2000b938 	.word	0x2000b938
 800c1ec:	2000b949 	.word	0x2000b949
 800c1f0:	2000b948 	.word	0x2000b948
 800c1f4:	2000b934 	.word	0x2000b934

0800c1f8 <rcutils_system_time_now>:
 800c1f8:	b310      	cbz	r0, 800c240 <rcutils_system_time_now+0x48>
 800c1fa:	b570      	push	{r4, r5, r6, lr}
 800c1fc:	b084      	sub	sp, #16
 800c1fe:	4604      	mov	r4, r0
 800c200:	2001      	movs	r0, #1
 800c202:	4669      	mov	r1, sp
 800c204:	f7f5 f968 	bl	80014d8 <clock_gettime>
 800c208:	2800      	cmp	r0, #0
 800c20a:	db16      	blt.n	800c23a <rcutils_system_time_now+0x42>
 800c20c:	e9dd 3100 	ldrd	r3, r1, [sp]
 800c210:	2900      	cmp	r1, #0
 800c212:	db12      	blt.n	800c23a <rcutils_system_time_now+0x42>
 800c214:	ea53 0201 	orrs.w	r2, r3, r1
 800c218:	9d02      	ldr	r5, [sp, #8]
 800c21a:	d101      	bne.n	800c220 <rcutils_system_time_now+0x28>
 800c21c:	2d00      	cmp	r5, #0
 800c21e:	db0c      	blt.n	800c23a <rcutils_system_time_now+0x42>
 800c220:	4e08      	ldr	r6, [pc, #32]	; (800c244 <rcutils_system_time_now+0x4c>)
 800c222:	2000      	movs	r0, #0
 800c224:	fba3 3206 	umull	r3, r2, r3, r6
 800c228:	195b      	adds	r3, r3, r5
 800c22a:	fb06 2201 	mla	r2, r6, r1, r2
 800c22e:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800c232:	e9c4 3200 	strd	r3, r2, [r4]
 800c236:	b004      	add	sp, #16
 800c238:	bd70      	pop	{r4, r5, r6, pc}
 800c23a:	2002      	movs	r0, #2
 800c23c:	b004      	add	sp, #16
 800c23e:	bd70      	pop	{r4, r5, r6, pc}
 800c240:	200b      	movs	r0, #11
 800c242:	4770      	bx	lr
 800c244:	3b9aca00 	.word	0x3b9aca00

0800c248 <rcutils_steady_time_now>:
 800c248:	b310      	cbz	r0, 800c290 <rcutils_steady_time_now+0x48>
 800c24a:	b570      	push	{r4, r5, r6, lr}
 800c24c:	b084      	sub	sp, #16
 800c24e:	4604      	mov	r4, r0
 800c250:	2000      	movs	r0, #0
 800c252:	4669      	mov	r1, sp
 800c254:	f7f5 f940 	bl	80014d8 <clock_gettime>
 800c258:	2800      	cmp	r0, #0
 800c25a:	db16      	blt.n	800c28a <rcutils_steady_time_now+0x42>
 800c25c:	e9dd 3100 	ldrd	r3, r1, [sp]
 800c260:	2900      	cmp	r1, #0
 800c262:	db12      	blt.n	800c28a <rcutils_steady_time_now+0x42>
 800c264:	ea53 0201 	orrs.w	r2, r3, r1
 800c268:	9d02      	ldr	r5, [sp, #8]
 800c26a:	d101      	bne.n	800c270 <rcutils_steady_time_now+0x28>
 800c26c:	2d00      	cmp	r5, #0
 800c26e:	db0c      	blt.n	800c28a <rcutils_steady_time_now+0x42>
 800c270:	4e08      	ldr	r6, [pc, #32]	; (800c294 <rcutils_steady_time_now+0x4c>)
 800c272:	2000      	movs	r0, #0
 800c274:	fba3 3206 	umull	r3, r2, r3, r6
 800c278:	195b      	adds	r3, r3, r5
 800c27a:	fb06 2201 	mla	r2, r6, r1, r2
 800c27e:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800c282:	e9c4 3200 	strd	r3, r2, [r4]
 800c286:	b004      	add	sp, #16
 800c288:	bd70      	pop	{r4, r5, r6, pc}
 800c28a:	2002      	movs	r0, #2
 800c28c:	b004      	add	sp, #16
 800c28e:	bd70      	pop	{r4, r5, r6, pc}
 800c290:	200b      	movs	r0, #11
 800c292:	4770      	bx	lr
 800c294:	3b9aca00 	.word	0x3b9aca00

0800c298 <rmw_uros_set_custom_transport>:
 800c298:	b470      	push	{r4, r5, r6}
 800c29a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800c29e:	b162      	cbz	r2, 800c2ba <rmw_uros_set_custom_transport+0x22>
 800c2a0:	b15b      	cbz	r3, 800c2ba <rmw_uros_set_custom_transport+0x22>
 800c2a2:	b155      	cbz	r5, 800c2ba <rmw_uros_set_custom_transport+0x22>
 800c2a4:	b14e      	cbz	r6, 800c2ba <rmw_uros_set_custom_transport+0x22>
 800c2a6:	4c06      	ldr	r4, [pc, #24]	; (800c2c0 <rmw_uros_set_custom_transport+0x28>)
 800c2a8:	7020      	strb	r0, [r4, #0]
 800c2aa:	2000      	movs	r0, #0
 800c2ac:	6166      	str	r6, [r4, #20]
 800c2ae:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800c2b2:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800c2b6:	bc70      	pop	{r4, r5, r6}
 800c2b8:	4770      	bx	lr
 800c2ba:	200b      	movs	r0, #11
 800c2bc:	bc70      	pop	{r4, r5, r6}
 800c2be:	4770      	bx	lr
 800c2c0:	2000b94c 	.word	0x2000b94c

0800c2c4 <get_message_typesupport_handle_function>:
 800c2c4:	b510      	push	{r4, lr}
 800c2c6:	4604      	mov	r4, r0
 800c2c8:	6800      	ldr	r0, [r0, #0]
 800c2ca:	f7f3 ffb9 	bl	8000240 <strcmp>
 800c2ce:	2800      	cmp	r0, #0
 800c2d0:	bf0c      	ite	eq
 800c2d2:	4620      	moveq	r0, r4
 800c2d4:	2000      	movne	r0, #0
 800c2d6:	bd10      	pop	{r4, pc}

0800c2d8 <rosidl_runtime_c__uint8__Sequence__init>:
 800c2d8:	b530      	push	{r4, r5, lr}
 800c2da:	4604      	mov	r4, r0
 800c2dc:	b087      	sub	sp, #28
 800c2de:	b130      	cbz	r0, 800c2ee <rosidl_runtime_c__uint8__Sequence__init+0x16>
 800c2e0:	460d      	mov	r5, r1
 800c2e2:	b931      	cbnz	r1, 800c2f2 <rosidl_runtime_c__uint8__Sequence__init+0x1a>
 800c2e4:	460b      	mov	r3, r1
 800c2e6:	2001      	movs	r0, #1
 800c2e8:	60a5      	str	r5, [r4, #8]
 800c2ea:	e9c4 3500 	strd	r3, r5, [r4]
 800c2ee:	b007      	add	sp, #28
 800c2f0:	bd30      	pop	{r4, r5, pc}
 800c2f2:	a801      	add	r0, sp, #4
 800c2f4:	f7ff ff32 	bl	800c15c <rcutils_get_default_allocator>
 800c2f8:	9b01      	ldr	r3, [sp, #4]
 800c2fa:	9905      	ldr	r1, [sp, #20]
 800c2fc:	4628      	mov	r0, r5
 800c2fe:	4798      	blx	r3
 800c300:	4603      	mov	r3, r0
 800c302:	2800      	cmp	r0, #0
 800c304:	d1ef      	bne.n	800c2e6 <rosidl_runtime_c__uint8__Sequence__init+0xe>
 800c306:	e7f2      	b.n	800c2ee <rosidl_runtime_c__uint8__Sequence__init+0x16>

0800c308 <rosidl_runtime_c__uint8__Sequence__fini>:
 800c308:	b188      	cbz	r0, 800c32e <rosidl_runtime_c__uint8__Sequence__fini+0x26>
 800c30a:	6803      	ldr	r3, [r0, #0]
 800c30c:	b510      	push	{r4, lr}
 800c30e:	4604      	mov	r4, r0
 800c310:	b086      	sub	sp, #24
 800c312:	b153      	cbz	r3, 800c32a <rosidl_runtime_c__uint8__Sequence__fini+0x22>
 800c314:	a801      	add	r0, sp, #4
 800c316:	f7ff ff21 	bl	800c15c <rcutils_get_default_allocator>
 800c31a:	9b02      	ldr	r3, [sp, #8]
 800c31c:	9905      	ldr	r1, [sp, #20]
 800c31e:	6820      	ldr	r0, [r4, #0]
 800c320:	4798      	blx	r3
 800c322:	2300      	movs	r3, #0
 800c324:	e9c4 3300 	strd	r3, r3, [r4]
 800c328:	60a3      	str	r3, [r4, #8]
 800c32a:	b006      	add	sp, #24
 800c32c:	bd10      	pop	{r4, pc}
 800c32e:	4770      	bx	lr

0800c330 <rosidl_runtime_c__uint8__Sequence__copy>:
 800c330:	2900      	cmp	r1, #0
 800c332:	bf18      	it	ne
 800c334:	2800      	cmpne	r0, #0
 800c336:	b570      	push	{r4, r5, r6, lr}
 800c338:	bf08      	it	eq
 800c33a:	2601      	moveq	r6, #1
 800c33c:	b086      	sub	sp, #24
 800c33e:	bf18      	it	ne
 800c340:	2600      	movne	r6, #0
 800c342:	d01d      	beq.n	800c380 <rosidl_runtime_c__uint8__Sequence__copy+0x50>
 800c344:	6842      	ldr	r2, [r0, #4]
 800c346:	4605      	mov	r5, r0
 800c348:	688b      	ldr	r3, [r1, #8]
 800c34a:	460c      	mov	r4, r1
 800c34c:	4293      	cmp	r3, r2
 800c34e:	d309      	bcc.n	800c364 <rosidl_runtime_c__uint8__Sequence__copy+0x34>
 800c350:	6808      	ldr	r0, [r1, #0]
 800c352:	6829      	ldr	r1, [r5, #0]
 800c354:	2601      	movs	r6, #1
 800c356:	f00d fae2 	bl	801991e <memcpy>
 800c35a:	686b      	ldr	r3, [r5, #4]
 800c35c:	6063      	str	r3, [r4, #4]
 800c35e:	4630      	mov	r0, r6
 800c360:	b006      	add	sp, #24
 800c362:	bd70      	pop	{r4, r5, r6, pc}
 800c364:	a801      	add	r0, sp, #4
 800c366:	f7ff fef9 	bl	800c15c <rcutils_get_default_allocator>
 800c36a:	9b03      	ldr	r3, [sp, #12]
 800c36c:	9a05      	ldr	r2, [sp, #20]
 800c36e:	6869      	ldr	r1, [r5, #4]
 800c370:	6820      	ldr	r0, [r4, #0]
 800c372:	4798      	blx	r3
 800c374:	2800      	cmp	r0, #0
 800c376:	d0f2      	beq.n	800c35e <rosidl_runtime_c__uint8__Sequence__copy+0x2e>
 800c378:	686a      	ldr	r2, [r5, #4]
 800c37a:	6020      	str	r0, [r4, #0]
 800c37c:	60a2      	str	r2, [r4, #8]
 800c37e:	e7e8      	b.n	800c352 <rosidl_runtime_c__uint8__Sequence__copy+0x22>
 800c380:	2600      	movs	r6, #0
 800c382:	4630      	mov	r0, r6
 800c384:	b006      	add	sp, #24
 800c386:	bd70      	pop	{r4, r5, r6, pc}

0800c388 <get_service_typesupport_handle>:
 800c388:	6883      	ldr	r3, [r0, #8]
 800c38a:	4718      	bx	r3

0800c38c <get_service_typesupport_handle_function>:
 800c38c:	b510      	push	{r4, lr}
 800c38e:	4604      	mov	r4, r0
 800c390:	6800      	ldr	r0, [r0, #0]
 800c392:	f7f3 ff55 	bl	8000240 <strcmp>
 800c396:	2800      	cmp	r0, #0
 800c398:	bf0c      	ite	eq
 800c39a:	4620      	moveq	r0, r4
 800c39c:	2000      	movne	r0, #0
 800c39e:	bd10      	pop	{r4, pc}

0800c3a0 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800c3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3a4:	6805      	ldr	r5, [r0, #0]
 800c3a6:	4604      	mov	r4, r0
 800c3a8:	460e      	mov	r6, r1
 800c3aa:	4628      	mov	r0, r5
 800c3ac:	f7f3 ff48 	bl	8000240 <strcmp>
 800c3b0:	b1c8      	cbz	r0, 800c3e6 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800c3b2:	4b11      	ldr	r3, [pc, #68]	; (800c3f8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	429d      	cmp	r5, r3
 800c3b8:	d112      	bne.n	800c3e0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800c3ba:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800c3be:	f8d8 4000 	ldr.w	r4, [r8]
 800c3c2:	b16c      	cbz	r4, 800c3e0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800c3c4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800c3c8:	2700      	movs	r7, #0
 800c3ca:	3d04      	subs	r5, #4
 800c3cc:	4631      	mov	r1, r6
 800c3ce:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800c3d2:	f7f3 ff35 	bl	8000240 <strcmp>
 800c3d6:	00bb      	lsls	r3, r7, #2
 800c3d8:	b140      	cbz	r0, 800c3ec <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800c3da:	3701      	adds	r7, #1
 800c3dc:	42bc      	cmp	r4, r7
 800c3de:	d1f5      	bne.n	800c3cc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800c3e0:	2000      	movs	r0, #0
 800c3e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3e6:	4620      	mov	r0, r4
 800c3e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3ec:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c3f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3f4:	58d3      	ldr	r3, [r2, r3]
 800c3f6:	4718      	bx	r3
 800c3f8:	20000974 	.word	0x20000974

0800c3fc <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 800c3fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c400:	6805      	ldr	r5, [r0, #0]
 800c402:	4604      	mov	r4, r0
 800c404:	460e      	mov	r6, r1
 800c406:	4628      	mov	r0, r5
 800c408:	f7f3 ff1a 	bl	8000240 <strcmp>
 800c40c:	b1c8      	cbz	r0, 800c442 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 800c40e:	4b11      	ldr	r3, [pc, #68]	; (800c454 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	429d      	cmp	r5, r3
 800c414:	d112      	bne.n	800c43c <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800c416:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800c41a:	f8d8 4000 	ldr.w	r4, [r8]
 800c41e:	b16c      	cbz	r4, 800c43c <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800c420:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800c424:	2700      	movs	r7, #0
 800c426:	3d04      	subs	r5, #4
 800c428:	4631      	mov	r1, r6
 800c42a:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800c42e:	f7f3 ff07 	bl	8000240 <strcmp>
 800c432:	00bb      	lsls	r3, r7, #2
 800c434:	b140      	cbz	r0, 800c448 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 800c436:	3701      	adds	r7, #1
 800c438:	42bc      	cmp	r4, r7
 800c43a:	d1f5      	bne.n	800c428 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 800c43c:	2000      	movs	r0, #0
 800c43e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c442:	4620      	mov	r0, r4
 800c444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c448:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c44c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c450:	58d3      	ldr	r3, [r2, r3]
 800c452:	4718      	bx	r3
 800c454:	20000974 	.word	0x20000974

0800c458 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__size_function__ServiceEventInfo__client_gid>:
 800c458:	2010      	movs	r0, #16
 800c45a:	4770      	bx	lr

0800c45c <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__get_const_function__ServiceEventInfo__client_gid>:
 800c45c:	4408      	add	r0, r1
 800c45e:	4770      	bx	lr

0800c460 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__fetch_function__ServiceEventInfo__client_gid>:
 800c460:	5c43      	ldrb	r3, [r0, r1]
 800c462:	7013      	strb	r3, [r2, #0]
 800c464:	4770      	bx	lr
 800c466:	bf00      	nop

0800c468 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__assign_function__ServiceEventInfo__client_gid>:
 800c468:	7813      	ldrb	r3, [r2, #0]
 800c46a:	5443      	strb	r3, [r0, r1]
 800c46c:	4770      	bx	lr
 800c46e:	bf00      	nop

0800c470 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__ServiceEventInfo_init_function>:
 800c470:	f007 bdf2 	b.w	8014058 <service_msgs__msg__ServiceEventInfo__init>

0800c474 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__ServiceEventInfo_fini_function>:
 800c474:	f007 be02 	b.w	801407c <service_msgs__msg__ServiceEventInfo__fini>

0800c478 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__get_function__ServiceEventInfo__client_gid>:
 800c478:	4408      	add	r0, r1
 800c47a:	4770      	bx	lr

0800c47c <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>:
 800c47c:	b508      	push	{r3, lr}
 800c47e:	f000 f8db 	bl	800c638 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800c482:	4b06      	ldr	r3, [pc, #24]	; (800c49c <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 800c484:	4906      	ldr	r1, [pc, #24]	; (800c4a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x24>)
 800c486:	681a      	ldr	r2, [r3, #0]
 800c488:	6488      	str	r0, [r1, #72]	; 0x48
 800c48a:	b10a      	cbz	r2, 800c490 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x14>
 800c48c:	4803      	ldr	r0, [pc, #12]	; (800c49c <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 800c48e:	bd08      	pop	{r3, pc}
 800c490:	4a04      	ldr	r2, [pc, #16]	; (800c4a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x28>)
 800c492:	4802      	ldr	r0, [pc, #8]	; (800c49c <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 800c494:	6812      	ldr	r2, [r2, #0]
 800c496:	601a      	str	r2, [r3, #0]
 800c498:	bd08      	pop	{r3, pc}
 800c49a:	bf00      	nop
 800c49c:	20000a6c 	.word	0x20000a6c
 800c4a0:	2000097c 	.word	0x2000097c
 800c4a4:	20000978 	.word	0x20000978

0800c4a8 <get_serialized_size_service_msgs__msg__ServiceEventInfo>:
 800c4a8:	b5b0      	push	{r4, r5, r7, lr}
 800c4aa:	4604      	mov	r4, r0
 800c4ac:	b1d8      	cbz	r0, 800c4e6 <get_serialized_size_service_msgs__msg__ServiceEventInfo+0x3e>
 800c4ae:	460d      	mov	r5, r1
 800c4b0:	2101      	movs	r1, #1
 800c4b2:	4628      	mov	r0, r5
 800c4b4:	f001 fd04 	bl	800dec0 <ucdr_alignment>
 800c4b8:	1c6b      	adds	r3, r5, #1
 800c4ba:	4607      	mov	r7, r0
 800c4bc:	1d20      	adds	r0, r4, #4
 800c4be:	f1c5 0508 	rsb	r5, r5, #8
 800c4c2:	441f      	add	r7, r3
 800c4c4:	4639      	mov	r1, r7
 800c4c6:	f000 f8c5 	bl	800c654 <get_serialized_size_builtin_interfaces__msg__Time>
 800c4ca:	4407      	add	r7, r0
 800c4cc:	2101      	movs	r1, #1
 800c4ce:	4638      	mov	r0, r7
 800c4d0:	f001 fcf6 	bl	800dec0 <ucdr_alignment>
 800c4d4:	f100 0410 	add.w	r4, r0, #16
 800c4d8:	2108      	movs	r1, #8
 800c4da:	443c      	add	r4, r7
 800c4dc:	4620      	mov	r0, r4
 800c4de:	f001 fcef 	bl	800dec0 <ucdr_alignment>
 800c4e2:	4428      	add	r0, r5
 800c4e4:	4420      	add	r0, r4
 800c4e6:	bdb0      	pop	{r4, r5, r7, pc}

0800c4e8 <_ServiceEventInfo__cdr_deserialize>:
 800c4e8:	b538      	push	{r3, r4, r5, lr}
 800c4ea:	460c      	mov	r4, r1
 800c4ec:	b1b9      	cbz	r1, 800c51e <_ServiceEventInfo__cdr_deserialize+0x36>
 800c4ee:	4605      	mov	r5, r0
 800c4f0:	f000 fa8e 	bl	800ca10 <ucdr_deserialize_uint8_t>
 800c4f4:	f000 f912 	bl	800c71c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	1d21      	adds	r1, r4, #4
 800c4fc:	4628      	mov	r0, r5
 800c4fe:	685b      	ldr	r3, [r3, #4]
 800c500:	68db      	ldr	r3, [r3, #12]
 800c502:	4798      	blx	r3
 800c504:	f104 010c 	add.w	r1, r4, #12
 800c508:	4628      	mov	r0, r5
 800c50a:	2210      	movs	r2, #16
 800c50c:	f000 f9d4 	bl	800c8b8 <ucdr_deserialize_array_uint8_t>
 800c510:	f104 0120 	add.w	r1, r4, #32
 800c514:	4628      	mov	r0, r5
 800c516:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c51a:	f001 ba8b 	b.w	800da34 <ucdr_deserialize_int64_t>
 800c51e:	4608      	mov	r0, r1
 800c520:	bd38      	pop	{r3, r4, r5, pc}
 800c522:	bf00      	nop

0800c524 <_ServiceEventInfo__cdr_serialize>:
 800c524:	b1e8      	cbz	r0, 800c562 <_ServiceEventInfo__cdr_serialize+0x3e>
 800c526:	b570      	push	{r4, r5, r6, lr}
 800c528:	4606      	mov	r6, r0
 800c52a:	460d      	mov	r5, r1
 800c52c:	4604      	mov	r4, r0
 800c52e:	4608      	mov	r0, r1
 800c530:	f816 1b04 	ldrb.w	r1, [r6], #4
 800c534:	f000 fa56 	bl	800c9e4 <ucdr_serialize_uint8_t>
 800c538:	f000 f8f0 	bl	800c71c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800c53c:	4603      	mov	r3, r0
 800c53e:	4629      	mov	r1, r5
 800c540:	4630      	mov	r0, r6
 800c542:	685b      	ldr	r3, [r3, #4]
 800c544:	689b      	ldr	r3, [r3, #8]
 800c546:	4798      	blx	r3
 800c548:	2210      	movs	r2, #16
 800c54a:	f104 010c 	add.w	r1, r4, #12
 800c54e:	4628      	mov	r0, r5
 800c550:	f000 f94e 	bl	800c7f0 <ucdr_serialize_array_uint8_t>
 800c554:	4628      	mov	r0, r5
 800c556:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 800c55a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c55e:	f001 b999 	b.w	800d894 <ucdr_serialize_int64_t>
 800c562:	4770      	bx	lr

0800c564 <_ServiceEventInfo__get_serialized_size>:
 800c564:	b538      	push	{r3, r4, r5, lr}
 800c566:	4604      	mov	r4, r0
 800c568:	b1b0      	cbz	r0, 800c598 <_ServiceEventInfo__get_serialized_size+0x34>
 800c56a:	2101      	movs	r1, #1
 800c56c:	2000      	movs	r0, #0
 800c56e:	f001 fca7 	bl	800dec0 <ucdr_alignment>
 800c572:	4605      	mov	r5, r0
 800c574:	1d20      	adds	r0, r4, #4
 800c576:	3501      	adds	r5, #1
 800c578:	4629      	mov	r1, r5
 800c57a:	f000 f86b 	bl	800c654 <get_serialized_size_builtin_interfaces__msg__Time>
 800c57e:	4405      	add	r5, r0
 800c580:	2101      	movs	r1, #1
 800c582:	4628      	mov	r0, r5
 800c584:	f001 fc9c 	bl	800dec0 <ucdr_alignment>
 800c588:	3010      	adds	r0, #16
 800c58a:	2108      	movs	r1, #8
 800c58c:	4405      	add	r5, r0
 800c58e:	4628      	mov	r0, r5
 800c590:	f001 fc96 	bl	800dec0 <ucdr_alignment>
 800c594:	3008      	adds	r0, #8
 800c596:	4428      	add	r0, r5
 800c598:	bd38      	pop	{r3, r4, r5, pc}
 800c59a:	bf00      	nop

0800c59c <_ServiceEventInfo__max_serialized_size>:
 800c59c:	b550      	push	{r4, r6, lr}
 800c59e:	2601      	movs	r6, #1
 800c5a0:	b083      	sub	sp, #12
 800c5a2:	2000      	movs	r0, #0
 800c5a4:	4631      	mov	r1, r6
 800c5a6:	f88d 6007 	strb.w	r6, [sp, #7]
 800c5aa:	f001 fc89 	bl	800dec0 <ucdr_alignment>
 800c5ae:	4604      	mov	r4, r0
 800c5b0:	f10d 0007 	add.w	r0, sp, #7
 800c5b4:	4434      	add	r4, r6
 800c5b6:	4621      	mov	r1, r4
 800c5b8:	f000 f89c 	bl	800c6f4 <max_serialized_size_builtin_interfaces__msg__Time>
 800c5bc:	4404      	add	r4, r0
 800c5be:	4631      	mov	r1, r6
 800c5c0:	4620      	mov	r0, r4
 800c5c2:	f001 fc7d 	bl	800dec0 <ucdr_alignment>
 800c5c6:	3010      	adds	r0, #16
 800c5c8:	2108      	movs	r1, #8
 800c5ca:	4404      	add	r4, r0
 800c5cc:	4620      	mov	r0, r4
 800c5ce:	f001 fc77 	bl	800dec0 <ucdr_alignment>
 800c5d2:	3008      	adds	r0, #8
 800c5d4:	4420      	add	r0, r4
 800c5d6:	b003      	add	sp, #12
 800c5d8:	bd50      	pop	{r4, r6, pc}
 800c5da:	bf00      	nop

0800c5dc <max_serialized_size_service_msgs__msg__ServiceEventInfo>:
 800c5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5e0:	f04f 0801 	mov.w	r8, #1
 800c5e4:	460c      	mov	r4, r1
 800c5e6:	4607      	mov	r7, r0
 800c5e8:	4641      	mov	r1, r8
 800c5ea:	4620      	mov	r0, r4
 800c5ec:	f887 8000 	strb.w	r8, [r7]
 800c5f0:	eb04 0608 	add.w	r6, r4, r8
 800c5f4:	f001 fc64 	bl	800dec0 <ucdr_alignment>
 800c5f8:	4605      	mov	r5, r0
 800c5fa:	4638      	mov	r0, r7
 800c5fc:	f1c4 0408 	rsb	r4, r4, #8
 800c600:	4435      	add	r5, r6
 800c602:	4629      	mov	r1, r5
 800c604:	f000 f876 	bl	800c6f4 <max_serialized_size_builtin_interfaces__msg__Time>
 800c608:	4405      	add	r5, r0
 800c60a:	4641      	mov	r1, r8
 800c60c:	4628      	mov	r0, r5
 800c60e:	f001 fc57 	bl	800dec0 <ucdr_alignment>
 800c612:	3010      	adds	r0, #16
 800c614:	2108      	movs	r1, #8
 800c616:	4405      	add	r5, r0
 800c618:	4628      	mov	r0, r5
 800c61a:	f001 fc51 	bl	800dec0 <ucdr_alignment>
 800c61e:	4420      	add	r0, r4
 800c620:	4428      	add	r0, r5
 800c622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c626:	bf00      	nop

0800c628 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>:
 800c628:	4800      	ldr	r0, [pc, #0]	; (800c62c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x4>)
 800c62a:	4770      	bx	lr
 800c62c:	20000a84 	.word	0x20000a84

0800c630 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800c630:	f007 bd5a 	b.w	80140e8 <builtin_interfaces__msg__Time__init>

0800c634 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800c634:	f007 bd5c 	b.w	80140f0 <builtin_interfaces__msg__Time__fini>

0800c638 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800c638:	4b04      	ldr	r3, [pc, #16]	; (800c64c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800c63a:	681a      	ldr	r2, [r3, #0]
 800c63c:	b10a      	cbz	r2, 800c642 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800c63e:	4803      	ldr	r0, [pc, #12]	; (800c64c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800c640:	4770      	bx	lr
 800c642:	4a03      	ldr	r2, [pc, #12]	; (800c650 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800c644:	4801      	ldr	r0, [pc, #4]	; (800c64c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800c646:	6812      	ldr	r2, [r2, #0]
 800c648:	601a      	str	r2, [r3, #0]
 800c64a:	4770      	bx	lr
 800c64c:	20000b30 	.word	0x20000b30
 800c650:	20000978 	.word	0x20000978

0800c654 <get_serialized_size_builtin_interfaces__msg__Time>:
 800c654:	b180      	cbz	r0, 800c678 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800c656:	b538      	push	{r3, r4, r5, lr}
 800c658:	460d      	mov	r5, r1
 800c65a:	2104      	movs	r1, #4
 800c65c:	4628      	mov	r0, r5
 800c65e:	f001 fc2f 	bl	800dec0 <ucdr_alignment>
 800c662:	1d2b      	adds	r3, r5, #4
 800c664:	f1c5 0504 	rsb	r5, r5, #4
 800c668:	2104      	movs	r1, #4
 800c66a:	181c      	adds	r4, r3, r0
 800c66c:	4620      	mov	r0, r4
 800c66e:	f001 fc27 	bl	800dec0 <ucdr_alignment>
 800c672:	4428      	add	r0, r5
 800c674:	4420      	add	r0, r4
 800c676:	bd38      	pop	{r3, r4, r5, pc}
 800c678:	4770      	bx	lr
 800c67a:	bf00      	nop

0800c67c <_Time__cdr_deserialize>:
 800c67c:	b538      	push	{r3, r4, r5, lr}
 800c67e:	460c      	mov	r4, r1
 800c680:	b141      	cbz	r1, 800c694 <_Time__cdr_deserialize+0x18>
 800c682:	4605      	mov	r5, r0
 800c684:	f001 f876 	bl	800d774 <ucdr_deserialize_int32_t>
 800c688:	1d21      	adds	r1, r4, #4
 800c68a:	4628      	mov	r0, r5
 800c68c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c690:	f000 bcee 	b.w	800d070 <ucdr_deserialize_uint32_t>
 800c694:	4608      	mov	r0, r1
 800c696:	bd38      	pop	{r3, r4, r5, pc}

0800c698 <_Time__cdr_serialize>:
 800c698:	b160      	cbz	r0, 800c6b4 <_Time__cdr_serialize+0x1c>
 800c69a:	b538      	push	{r3, r4, r5, lr}
 800c69c:	460d      	mov	r5, r1
 800c69e:	4604      	mov	r4, r0
 800c6a0:	6801      	ldr	r1, [r0, #0]
 800c6a2:	4628      	mov	r0, r5
 800c6a4:	f000 ffce 	bl	800d644 <ucdr_serialize_int32_t>
 800c6a8:	6861      	ldr	r1, [r4, #4]
 800c6aa:	4628      	mov	r0, r5
 800c6ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6b0:	f000 bbae 	b.w	800ce10 <ucdr_serialize_uint32_t>
 800c6b4:	4770      	bx	lr
 800c6b6:	bf00      	nop

0800c6b8 <_Time__get_serialized_size>:
 800c6b8:	b160      	cbz	r0, 800c6d4 <_Time__get_serialized_size+0x1c>
 800c6ba:	2104      	movs	r1, #4
 800c6bc:	2000      	movs	r0, #0
 800c6be:	b510      	push	{r4, lr}
 800c6c0:	f001 fbfe 	bl	800dec0 <ucdr_alignment>
 800c6c4:	2104      	movs	r1, #4
 800c6c6:	1844      	adds	r4, r0, r1
 800c6c8:	4620      	mov	r0, r4
 800c6ca:	f001 fbf9 	bl	800dec0 <ucdr_alignment>
 800c6ce:	3004      	adds	r0, #4
 800c6d0:	4420      	add	r0, r4
 800c6d2:	bd10      	pop	{r4, pc}
 800c6d4:	4770      	bx	lr
 800c6d6:	bf00      	nop

0800c6d8 <_Time__max_serialized_size>:
 800c6d8:	b510      	push	{r4, lr}
 800c6da:	2104      	movs	r1, #4
 800c6dc:	2000      	movs	r0, #0
 800c6de:	f001 fbef 	bl	800dec0 <ucdr_alignment>
 800c6e2:	2104      	movs	r1, #4
 800c6e4:	1844      	adds	r4, r0, r1
 800c6e6:	4620      	mov	r0, r4
 800c6e8:	f001 fbea 	bl	800dec0 <ucdr_alignment>
 800c6ec:	3004      	adds	r0, #4
 800c6ee:	4420      	add	r0, r4
 800c6f0:	bd10      	pop	{r4, pc}
 800c6f2:	bf00      	nop

0800c6f4 <max_serialized_size_builtin_interfaces__msg__Time>:
 800c6f4:	b538      	push	{r3, r4, r5, lr}
 800c6f6:	460c      	mov	r4, r1
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	2104      	movs	r1, #4
 800c6fc:	1d25      	adds	r5, r4, #4
 800c6fe:	7003      	strb	r3, [r0, #0]
 800c700:	4620      	mov	r0, r4
 800c702:	f1c4 0404 	rsb	r4, r4, #4
 800c706:	f001 fbdb 	bl	800dec0 <ucdr_alignment>
 800c70a:	4405      	add	r5, r0
 800c70c:	2104      	movs	r1, #4
 800c70e:	4628      	mov	r0, r5
 800c710:	f001 fbd6 	bl	800dec0 <ucdr_alignment>
 800c714:	4420      	add	r0, r4
 800c716:	4428      	add	r0, r5
 800c718:	bd38      	pop	{r3, r4, r5, pc}
 800c71a:	bf00      	nop

0800c71c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800c71c:	4800      	ldr	r0, [pc, #0]	; (800c720 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800c71e:	4770      	bx	lr
 800c720:	20000b48 	.word	0x20000b48

0800c724 <ucdr_serialize_endian_array_char>:
 800c724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c728:	4619      	mov	r1, r3
 800c72a:	461f      	mov	r7, r3
 800c72c:	4605      	mov	r5, r0
 800c72e:	4690      	mov	r8, r2
 800c730:	f001 fb6e 	bl	800de10 <ucdr_check_buffer_available_for>
 800c734:	b9e0      	cbnz	r0, 800c770 <ucdr_serialize_endian_array_char+0x4c>
 800c736:	463e      	mov	r6, r7
 800c738:	e00b      	b.n	800c752 <ucdr_serialize_endian_array_char+0x2e>
 800c73a:	4441      	add	r1, r8
 800c73c:	68a8      	ldr	r0, [r5, #8]
 800c73e:	4622      	mov	r2, r4
 800c740:	1b36      	subs	r6, r6, r4
 800c742:	f00d f8ec 	bl	801991e <memcpy>
 800c746:	68ab      	ldr	r3, [r5, #8]
 800c748:	6928      	ldr	r0, [r5, #16]
 800c74a:	4423      	add	r3, r4
 800c74c:	4420      	add	r0, r4
 800c74e:	60ab      	str	r3, [r5, #8]
 800c750:	6128      	str	r0, [r5, #16]
 800c752:	4631      	mov	r1, r6
 800c754:	2201      	movs	r2, #1
 800c756:	4628      	mov	r0, r5
 800c758:	f001 fbe4 	bl	800df24 <ucdr_check_final_buffer_behavior_array>
 800c75c:	1bb9      	subs	r1, r7, r6
 800c75e:	4604      	mov	r4, r0
 800c760:	2800      	cmp	r0, #0
 800c762:	d1ea      	bne.n	800c73a <ucdr_serialize_endian_array_char+0x16>
 800c764:	2301      	movs	r3, #1
 800c766:	7da8      	ldrb	r0, [r5, #22]
 800c768:	756b      	strb	r3, [r5, #21]
 800c76a:	4058      	eors	r0, r3
 800c76c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c770:	463a      	mov	r2, r7
 800c772:	4641      	mov	r1, r8
 800c774:	68a8      	ldr	r0, [r5, #8]
 800c776:	f00d f8d2 	bl	801991e <memcpy>
 800c77a:	68aa      	ldr	r2, [r5, #8]
 800c77c:	692b      	ldr	r3, [r5, #16]
 800c77e:	443a      	add	r2, r7
 800c780:	443b      	add	r3, r7
 800c782:	60aa      	str	r2, [r5, #8]
 800c784:	612b      	str	r3, [r5, #16]
 800c786:	e7ed      	b.n	800c764 <ucdr_serialize_endian_array_char+0x40>

0800c788 <ucdr_deserialize_endian_array_char>:
 800c788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c78c:	4619      	mov	r1, r3
 800c78e:	461f      	mov	r7, r3
 800c790:	4605      	mov	r5, r0
 800c792:	4690      	mov	r8, r2
 800c794:	f001 fb3c 	bl	800de10 <ucdr_check_buffer_available_for>
 800c798:	b9e8      	cbnz	r0, 800c7d6 <ucdr_deserialize_endian_array_char+0x4e>
 800c79a:	463e      	mov	r6, r7
 800c79c:	e00c      	b.n	800c7b8 <ucdr_deserialize_endian_array_char+0x30>
 800c79e:	eb08 0003 	add.w	r0, r8, r3
 800c7a2:	68a9      	ldr	r1, [r5, #8]
 800c7a4:	4622      	mov	r2, r4
 800c7a6:	1b36      	subs	r6, r6, r4
 800c7a8:	f00d f8b9 	bl	801991e <memcpy>
 800c7ac:	68ab      	ldr	r3, [r5, #8]
 800c7ae:	6928      	ldr	r0, [r5, #16]
 800c7b0:	4423      	add	r3, r4
 800c7b2:	4420      	add	r0, r4
 800c7b4:	60ab      	str	r3, [r5, #8]
 800c7b6:	6128      	str	r0, [r5, #16]
 800c7b8:	4631      	mov	r1, r6
 800c7ba:	2201      	movs	r2, #1
 800c7bc:	4628      	mov	r0, r5
 800c7be:	f001 fbb1 	bl	800df24 <ucdr_check_final_buffer_behavior_array>
 800c7c2:	1bbb      	subs	r3, r7, r6
 800c7c4:	4604      	mov	r4, r0
 800c7c6:	2800      	cmp	r0, #0
 800c7c8:	d1e9      	bne.n	800c79e <ucdr_deserialize_endian_array_char+0x16>
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	7da8      	ldrb	r0, [r5, #22]
 800c7ce:	756b      	strb	r3, [r5, #21]
 800c7d0:	4058      	eors	r0, r3
 800c7d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7d6:	463a      	mov	r2, r7
 800c7d8:	68a9      	ldr	r1, [r5, #8]
 800c7da:	4640      	mov	r0, r8
 800c7dc:	f00d f89f 	bl	801991e <memcpy>
 800c7e0:	68aa      	ldr	r2, [r5, #8]
 800c7e2:	692b      	ldr	r3, [r5, #16]
 800c7e4:	443a      	add	r2, r7
 800c7e6:	443b      	add	r3, r7
 800c7e8:	60aa      	str	r2, [r5, #8]
 800c7ea:	612b      	str	r3, [r5, #16]
 800c7ec:	e7ed      	b.n	800c7ca <ucdr_deserialize_endian_array_char+0x42>
 800c7ee:	bf00      	nop

0800c7f0 <ucdr_serialize_array_uint8_t>:
 800c7f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7f4:	4688      	mov	r8, r1
 800c7f6:	4611      	mov	r1, r2
 800c7f8:	4617      	mov	r7, r2
 800c7fa:	4605      	mov	r5, r0
 800c7fc:	f001 fb08 	bl	800de10 <ucdr_check_buffer_available_for>
 800c800:	b9e0      	cbnz	r0, 800c83c <ucdr_serialize_array_uint8_t+0x4c>
 800c802:	463e      	mov	r6, r7
 800c804:	e00b      	b.n	800c81e <ucdr_serialize_array_uint8_t+0x2e>
 800c806:	4441      	add	r1, r8
 800c808:	68a8      	ldr	r0, [r5, #8]
 800c80a:	4622      	mov	r2, r4
 800c80c:	1b36      	subs	r6, r6, r4
 800c80e:	f00d f886 	bl	801991e <memcpy>
 800c812:	68ab      	ldr	r3, [r5, #8]
 800c814:	6928      	ldr	r0, [r5, #16]
 800c816:	4423      	add	r3, r4
 800c818:	4420      	add	r0, r4
 800c81a:	60ab      	str	r3, [r5, #8]
 800c81c:	6128      	str	r0, [r5, #16]
 800c81e:	4631      	mov	r1, r6
 800c820:	2201      	movs	r2, #1
 800c822:	4628      	mov	r0, r5
 800c824:	f001 fb7e 	bl	800df24 <ucdr_check_final_buffer_behavior_array>
 800c828:	1bb9      	subs	r1, r7, r6
 800c82a:	4604      	mov	r4, r0
 800c82c:	2800      	cmp	r0, #0
 800c82e:	d1ea      	bne.n	800c806 <ucdr_serialize_array_uint8_t+0x16>
 800c830:	2301      	movs	r3, #1
 800c832:	7da8      	ldrb	r0, [r5, #22]
 800c834:	756b      	strb	r3, [r5, #21]
 800c836:	4058      	eors	r0, r3
 800c838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c83c:	463a      	mov	r2, r7
 800c83e:	4641      	mov	r1, r8
 800c840:	68a8      	ldr	r0, [r5, #8]
 800c842:	f00d f86c 	bl	801991e <memcpy>
 800c846:	68aa      	ldr	r2, [r5, #8]
 800c848:	692b      	ldr	r3, [r5, #16]
 800c84a:	443a      	add	r2, r7
 800c84c:	443b      	add	r3, r7
 800c84e:	60aa      	str	r2, [r5, #8]
 800c850:	612b      	str	r3, [r5, #16]
 800c852:	e7ed      	b.n	800c830 <ucdr_serialize_array_uint8_t+0x40>

0800c854 <ucdr_serialize_endian_array_uint8_t>:
 800c854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c858:	4619      	mov	r1, r3
 800c85a:	461f      	mov	r7, r3
 800c85c:	4605      	mov	r5, r0
 800c85e:	4690      	mov	r8, r2
 800c860:	f001 fad6 	bl	800de10 <ucdr_check_buffer_available_for>
 800c864:	b9e0      	cbnz	r0, 800c8a0 <ucdr_serialize_endian_array_uint8_t+0x4c>
 800c866:	463e      	mov	r6, r7
 800c868:	e00b      	b.n	800c882 <ucdr_serialize_endian_array_uint8_t+0x2e>
 800c86a:	4441      	add	r1, r8
 800c86c:	68a8      	ldr	r0, [r5, #8]
 800c86e:	4622      	mov	r2, r4
 800c870:	1b36      	subs	r6, r6, r4
 800c872:	f00d f854 	bl	801991e <memcpy>
 800c876:	68ab      	ldr	r3, [r5, #8]
 800c878:	6928      	ldr	r0, [r5, #16]
 800c87a:	4423      	add	r3, r4
 800c87c:	4420      	add	r0, r4
 800c87e:	60ab      	str	r3, [r5, #8]
 800c880:	6128      	str	r0, [r5, #16]
 800c882:	4631      	mov	r1, r6
 800c884:	2201      	movs	r2, #1
 800c886:	4628      	mov	r0, r5
 800c888:	f001 fb4c 	bl	800df24 <ucdr_check_final_buffer_behavior_array>
 800c88c:	1bb9      	subs	r1, r7, r6
 800c88e:	4604      	mov	r4, r0
 800c890:	2800      	cmp	r0, #0
 800c892:	d1ea      	bne.n	800c86a <ucdr_serialize_endian_array_uint8_t+0x16>
 800c894:	2301      	movs	r3, #1
 800c896:	7da8      	ldrb	r0, [r5, #22]
 800c898:	756b      	strb	r3, [r5, #21]
 800c89a:	4058      	eors	r0, r3
 800c89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8a0:	463a      	mov	r2, r7
 800c8a2:	4641      	mov	r1, r8
 800c8a4:	68a8      	ldr	r0, [r5, #8]
 800c8a6:	f00d f83a 	bl	801991e <memcpy>
 800c8aa:	68aa      	ldr	r2, [r5, #8]
 800c8ac:	692b      	ldr	r3, [r5, #16]
 800c8ae:	443a      	add	r2, r7
 800c8b0:	443b      	add	r3, r7
 800c8b2:	60aa      	str	r2, [r5, #8]
 800c8b4:	612b      	str	r3, [r5, #16]
 800c8b6:	e7ed      	b.n	800c894 <ucdr_serialize_endian_array_uint8_t+0x40>

0800c8b8 <ucdr_deserialize_array_uint8_t>:
 800c8b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8bc:	4688      	mov	r8, r1
 800c8be:	4611      	mov	r1, r2
 800c8c0:	4617      	mov	r7, r2
 800c8c2:	4605      	mov	r5, r0
 800c8c4:	f001 faa4 	bl	800de10 <ucdr_check_buffer_available_for>
 800c8c8:	b9e8      	cbnz	r0, 800c906 <ucdr_deserialize_array_uint8_t+0x4e>
 800c8ca:	463e      	mov	r6, r7
 800c8cc:	e00c      	b.n	800c8e8 <ucdr_deserialize_array_uint8_t+0x30>
 800c8ce:	eb08 0003 	add.w	r0, r8, r3
 800c8d2:	68a9      	ldr	r1, [r5, #8]
 800c8d4:	4622      	mov	r2, r4
 800c8d6:	1b36      	subs	r6, r6, r4
 800c8d8:	f00d f821 	bl	801991e <memcpy>
 800c8dc:	68ab      	ldr	r3, [r5, #8]
 800c8de:	6928      	ldr	r0, [r5, #16]
 800c8e0:	4423      	add	r3, r4
 800c8e2:	4420      	add	r0, r4
 800c8e4:	60ab      	str	r3, [r5, #8]
 800c8e6:	6128      	str	r0, [r5, #16]
 800c8e8:	4631      	mov	r1, r6
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	4628      	mov	r0, r5
 800c8ee:	f001 fb19 	bl	800df24 <ucdr_check_final_buffer_behavior_array>
 800c8f2:	1bbb      	subs	r3, r7, r6
 800c8f4:	4604      	mov	r4, r0
 800c8f6:	2800      	cmp	r0, #0
 800c8f8:	d1e9      	bne.n	800c8ce <ucdr_deserialize_array_uint8_t+0x16>
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	7da8      	ldrb	r0, [r5, #22]
 800c8fe:	756b      	strb	r3, [r5, #21]
 800c900:	4058      	eors	r0, r3
 800c902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c906:	463a      	mov	r2, r7
 800c908:	68a9      	ldr	r1, [r5, #8]
 800c90a:	4640      	mov	r0, r8
 800c90c:	f00d f807 	bl	801991e <memcpy>
 800c910:	68aa      	ldr	r2, [r5, #8]
 800c912:	692b      	ldr	r3, [r5, #16]
 800c914:	443a      	add	r2, r7
 800c916:	443b      	add	r3, r7
 800c918:	60aa      	str	r2, [r5, #8]
 800c91a:	612b      	str	r3, [r5, #16]
 800c91c:	e7ed      	b.n	800c8fa <ucdr_deserialize_array_uint8_t+0x42>
 800c91e:	bf00      	nop

0800c920 <ucdr_deserialize_endian_array_uint8_t>:
 800c920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c924:	4619      	mov	r1, r3
 800c926:	461f      	mov	r7, r3
 800c928:	4605      	mov	r5, r0
 800c92a:	4690      	mov	r8, r2
 800c92c:	f001 fa70 	bl	800de10 <ucdr_check_buffer_available_for>
 800c930:	b9e8      	cbnz	r0, 800c96e <ucdr_deserialize_endian_array_uint8_t+0x4e>
 800c932:	463e      	mov	r6, r7
 800c934:	e00c      	b.n	800c950 <ucdr_deserialize_endian_array_uint8_t+0x30>
 800c936:	eb08 0003 	add.w	r0, r8, r3
 800c93a:	68a9      	ldr	r1, [r5, #8]
 800c93c:	4622      	mov	r2, r4
 800c93e:	1b36      	subs	r6, r6, r4
 800c940:	f00c ffed 	bl	801991e <memcpy>
 800c944:	68ab      	ldr	r3, [r5, #8]
 800c946:	6928      	ldr	r0, [r5, #16]
 800c948:	4423      	add	r3, r4
 800c94a:	4420      	add	r0, r4
 800c94c:	60ab      	str	r3, [r5, #8]
 800c94e:	6128      	str	r0, [r5, #16]
 800c950:	4631      	mov	r1, r6
 800c952:	2201      	movs	r2, #1
 800c954:	4628      	mov	r0, r5
 800c956:	f001 fae5 	bl	800df24 <ucdr_check_final_buffer_behavior_array>
 800c95a:	1bbb      	subs	r3, r7, r6
 800c95c:	4604      	mov	r4, r0
 800c95e:	2800      	cmp	r0, #0
 800c960:	d1e9      	bne.n	800c936 <ucdr_deserialize_endian_array_uint8_t+0x16>
 800c962:	2301      	movs	r3, #1
 800c964:	7da8      	ldrb	r0, [r5, #22]
 800c966:	756b      	strb	r3, [r5, #21]
 800c968:	4058      	eors	r0, r3
 800c96a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c96e:	463a      	mov	r2, r7
 800c970:	68a9      	ldr	r1, [r5, #8]
 800c972:	4640      	mov	r0, r8
 800c974:	f00c ffd3 	bl	801991e <memcpy>
 800c978:	68aa      	ldr	r2, [r5, #8]
 800c97a:	692b      	ldr	r3, [r5, #16]
 800c97c:	443a      	add	r2, r7
 800c97e:	443b      	add	r3, r7
 800c980:	60aa      	str	r2, [r5, #8]
 800c982:	612b      	str	r3, [r5, #16]
 800c984:	e7ed      	b.n	800c962 <ucdr_deserialize_endian_array_uint8_t+0x42>
 800c986:	bf00      	nop

0800c988 <ucdr_serialize_bool>:
 800c988:	b538      	push	{r3, r4, r5, lr}
 800c98a:	460d      	mov	r5, r1
 800c98c:	2101      	movs	r1, #1
 800c98e:	4604      	mov	r4, r0
 800c990:	f001 fa4a 	bl	800de28 <ucdr_check_final_buffer_behavior>
 800c994:	b148      	cbz	r0, 800c9aa <ucdr_serialize_bool+0x22>
 800c996:	68a3      	ldr	r3, [r4, #8]
 800c998:	2101      	movs	r1, #1
 800c99a:	701d      	strb	r5, [r3, #0]
 800c99c:	68a2      	ldr	r2, [r4, #8]
 800c99e:	6923      	ldr	r3, [r4, #16]
 800c9a0:	440a      	add	r2, r1
 800c9a2:	7561      	strb	r1, [r4, #21]
 800c9a4:	440b      	add	r3, r1
 800c9a6:	60a2      	str	r2, [r4, #8]
 800c9a8:	6123      	str	r3, [r4, #16]
 800c9aa:	7da0      	ldrb	r0, [r4, #22]
 800c9ac:	f080 0001 	eor.w	r0, r0, #1
 800c9b0:	bd38      	pop	{r3, r4, r5, pc}
 800c9b2:	bf00      	nop

0800c9b4 <ucdr_deserialize_bool>:
 800c9b4:	b538      	push	{r3, r4, r5, lr}
 800c9b6:	460d      	mov	r5, r1
 800c9b8:	2101      	movs	r1, #1
 800c9ba:	4604      	mov	r4, r0
 800c9bc:	f001 fa34 	bl	800de28 <ucdr_check_final_buffer_behavior>
 800c9c0:	b160      	cbz	r0, 800c9dc <ucdr_deserialize_bool+0x28>
 800c9c2:	68a2      	ldr	r2, [r4, #8]
 800c9c4:	2101      	movs	r1, #1
 800c9c6:	6923      	ldr	r3, [r4, #16]
 800c9c8:	f812 0b01 	ldrb.w	r0, [r2], #1
 800c9cc:	440b      	add	r3, r1
 800c9ce:	3800      	subs	r0, #0
 800c9d0:	bf18      	it	ne
 800c9d2:	2001      	movne	r0, #1
 800c9d4:	7028      	strb	r0, [r5, #0]
 800c9d6:	60a2      	str	r2, [r4, #8]
 800c9d8:	6123      	str	r3, [r4, #16]
 800c9da:	7561      	strb	r1, [r4, #21]
 800c9dc:	7da0      	ldrb	r0, [r4, #22]
 800c9de:	f080 0001 	eor.w	r0, r0, #1
 800c9e2:	bd38      	pop	{r3, r4, r5, pc}

0800c9e4 <ucdr_serialize_uint8_t>:
 800c9e4:	b538      	push	{r3, r4, r5, lr}
 800c9e6:	460d      	mov	r5, r1
 800c9e8:	2101      	movs	r1, #1
 800c9ea:	4604      	mov	r4, r0
 800c9ec:	f001 fa1c 	bl	800de28 <ucdr_check_final_buffer_behavior>
 800c9f0:	b148      	cbz	r0, 800ca06 <ucdr_serialize_uint8_t+0x22>
 800c9f2:	68a3      	ldr	r3, [r4, #8]
 800c9f4:	2101      	movs	r1, #1
 800c9f6:	701d      	strb	r5, [r3, #0]
 800c9f8:	68a2      	ldr	r2, [r4, #8]
 800c9fa:	6923      	ldr	r3, [r4, #16]
 800c9fc:	440a      	add	r2, r1
 800c9fe:	7561      	strb	r1, [r4, #21]
 800ca00:	440b      	add	r3, r1
 800ca02:	60a2      	str	r2, [r4, #8]
 800ca04:	6123      	str	r3, [r4, #16]
 800ca06:	7da0      	ldrb	r0, [r4, #22]
 800ca08:	f080 0001 	eor.w	r0, r0, #1
 800ca0c:	bd38      	pop	{r3, r4, r5, pc}
 800ca0e:	bf00      	nop

0800ca10 <ucdr_deserialize_uint8_t>:
 800ca10:	b538      	push	{r3, r4, r5, lr}
 800ca12:	460d      	mov	r5, r1
 800ca14:	2101      	movs	r1, #1
 800ca16:	4604      	mov	r4, r0
 800ca18:	f001 fa06 	bl	800de28 <ucdr_check_final_buffer_behavior>
 800ca1c:	b150      	cbz	r0, 800ca34 <ucdr_deserialize_uint8_t+0x24>
 800ca1e:	68a3      	ldr	r3, [r4, #8]
 800ca20:	2101      	movs	r1, #1
 800ca22:	781b      	ldrb	r3, [r3, #0]
 800ca24:	702b      	strb	r3, [r5, #0]
 800ca26:	68a2      	ldr	r2, [r4, #8]
 800ca28:	6923      	ldr	r3, [r4, #16]
 800ca2a:	440a      	add	r2, r1
 800ca2c:	7561      	strb	r1, [r4, #21]
 800ca2e:	440b      	add	r3, r1
 800ca30:	60a2      	str	r2, [r4, #8]
 800ca32:	6123      	str	r3, [r4, #16]
 800ca34:	7da0      	ldrb	r0, [r4, #22]
 800ca36:	f080 0001 	eor.w	r0, r0, #1
 800ca3a:	bd38      	pop	{r3, r4, r5, pc}

0800ca3c <ucdr_serialize_uint16_t>:
 800ca3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca40:	460b      	mov	r3, r1
 800ca42:	b082      	sub	sp, #8
 800ca44:	4604      	mov	r4, r0
 800ca46:	2102      	movs	r1, #2
 800ca48:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ca4c:	f001 fa40 	bl	800ded0 <ucdr_buffer_alignment>
 800ca50:	4601      	mov	r1, r0
 800ca52:	4620      	mov	r0, r4
 800ca54:	7d67      	ldrb	r7, [r4, #21]
 800ca56:	f001 fa83 	bl	800df60 <ucdr_advance_buffer>
 800ca5a:	2102      	movs	r1, #2
 800ca5c:	4620      	mov	r0, r4
 800ca5e:	f001 f9d7 	bl	800de10 <ucdr_check_buffer_available_for>
 800ca62:	bb78      	cbnz	r0, 800cac4 <ucdr_serialize_uint16_t+0x88>
 800ca64:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ca68:	42ab      	cmp	r3, r5
 800ca6a:	d926      	bls.n	800caba <ucdr_serialize_uint16_t+0x7e>
 800ca6c:	1b5e      	subs	r6, r3, r5
 800ca6e:	60a3      	str	r3, [r4, #8]
 800ca70:	6923      	ldr	r3, [r4, #16]
 800ca72:	4620      	mov	r0, r4
 800ca74:	f1c6 0802 	rsb	r8, r6, #2
 800ca78:	4433      	add	r3, r6
 800ca7a:	4641      	mov	r1, r8
 800ca7c:	6123      	str	r3, [r4, #16]
 800ca7e:	f001 f9d3 	bl	800de28 <ucdr_check_final_buffer_behavior>
 800ca82:	2800      	cmp	r0, #0
 800ca84:	d03b      	beq.n	800cafe <ucdr_serialize_uint16_t+0xc2>
 800ca86:	7d23      	ldrb	r3, [r4, #20]
 800ca88:	2b01      	cmp	r3, #1
 800ca8a:	d04a      	beq.n	800cb22 <ucdr_serialize_uint16_t+0xe6>
 800ca8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ca90:	702b      	strb	r3, [r5, #0]
 800ca92:	2e00      	cmp	r6, #0
 800ca94:	d040      	beq.n	800cb18 <ucdr_serialize_uint16_t+0xdc>
 800ca96:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ca9a:	706b      	strb	r3, [r5, #1]
 800ca9c:	6923      	ldr	r3, [r4, #16]
 800ca9e:	2102      	movs	r1, #2
 800caa0:	68a2      	ldr	r2, [r4, #8]
 800caa2:	3302      	adds	r3, #2
 800caa4:	7da0      	ldrb	r0, [r4, #22]
 800caa6:	4442      	add	r2, r8
 800caa8:	7561      	strb	r1, [r4, #21]
 800caaa:	1b9e      	subs	r6, r3, r6
 800caac:	f080 0001 	eor.w	r0, r0, #1
 800cab0:	60a2      	str	r2, [r4, #8]
 800cab2:	6126      	str	r6, [r4, #16]
 800cab4:	b002      	add	sp, #8
 800cab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caba:	2102      	movs	r1, #2
 800cabc:	4620      	mov	r0, r4
 800cabe:	f001 f9b3 	bl	800de28 <ucdr_check_final_buffer_behavior>
 800cac2:	b190      	cbz	r0, 800caea <ucdr_serialize_uint16_t+0xae>
 800cac4:	7d23      	ldrb	r3, [r4, #20]
 800cac6:	2b01      	cmp	r3, #1
 800cac8:	68a3      	ldr	r3, [r4, #8]
 800caca:	d014      	beq.n	800caf6 <ucdr_serialize_uint16_t+0xba>
 800cacc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800cad0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cad4:	7019      	strb	r1, [r3, #0]
 800cad6:	68a3      	ldr	r3, [r4, #8]
 800cad8:	705a      	strb	r2, [r3, #1]
 800cada:	2102      	movs	r1, #2
 800cadc:	68a2      	ldr	r2, [r4, #8]
 800cade:	6923      	ldr	r3, [r4, #16]
 800cae0:	440a      	add	r2, r1
 800cae2:	7561      	strb	r1, [r4, #21]
 800cae4:	440b      	add	r3, r1
 800cae6:	60a2      	str	r2, [r4, #8]
 800cae8:	6123      	str	r3, [r4, #16]
 800caea:	7da0      	ldrb	r0, [r4, #22]
 800caec:	f080 0001 	eor.w	r0, r0, #1
 800caf0:	b002      	add	sp, #8
 800caf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caf6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800cafa:	801a      	strh	r2, [r3, #0]
 800cafc:	e7ed      	b.n	800cada <ucdr_serialize_uint16_t+0x9e>
 800cafe:	68a2      	ldr	r2, [r4, #8]
 800cb00:	6923      	ldr	r3, [r4, #16]
 800cb02:	7da0      	ldrb	r0, [r4, #22]
 800cb04:	1b92      	subs	r2, r2, r6
 800cb06:	1b9b      	subs	r3, r3, r6
 800cb08:	7567      	strb	r7, [r4, #21]
 800cb0a:	f080 0001 	eor.w	r0, r0, #1
 800cb0e:	60a2      	str	r2, [r4, #8]
 800cb10:	6123      	str	r3, [r4, #16]
 800cb12:	b002      	add	sp, #8
 800cb14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb18:	68a3      	ldr	r3, [r4, #8]
 800cb1a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cb1e:	701a      	strb	r2, [r3, #0]
 800cb20:	e7bc      	b.n	800ca9c <ucdr_serialize_uint16_t+0x60>
 800cb22:	4628      	mov	r0, r5
 800cb24:	f10d 0506 	add.w	r5, sp, #6
 800cb28:	4632      	mov	r2, r6
 800cb2a:	4629      	mov	r1, r5
 800cb2c:	f00c fef7 	bl	801991e <memcpy>
 800cb30:	4642      	mov	r2, r8
 800cb32:	19a9      	adds	r1, r5, r6
 800cb34:	68a0      	ldr	r0, [r4, #8]
 800cb36:	f00c fef2 	bl	801991e <memcpy>
 800cb3a:	e7af      	b.n	800ca9c <ucdr_serialize_uint16_t+0x60>

0800cb3c <ucdr_serialize_endian_uint16_t>:
 800cb3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb40:	4604      	mov	r4, r0
 800cb42:	b083      	sub	sp, #12
 800cb44:	460d      	mov	r5, r1
 800cb46:	2102      	movs	r1, #2
 800cb48:	f8ad 2006 	strh.w	r2, [sp, #6]
 800cb4c:	f001 f9c0 	bl	800ded0 <ucdr_buffer_alignment>
 800cb50:	4601      	mov	r1, r0
 800cb52:	4620      	mov	r0, r4
 800cb54:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cb58:	f001 fa02 	bl	800df60 <ucdr_advance_buffer>
 800cb5c:	2102      	movs	r1, #2
 800cb5e:	4620      	mov	r0, r4
 800cb60:	f001 f956 	bl	800de10 <ucdr_check_buffer_available_for>
 800cb64:	bb70      	cbnz	r0, 800cbc4 <ucdr_serialize_endian_uint16_t+0x88>
 800cb66:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800cb6a:	42be      	cmp	r6, r7
 800cb6c:	d925      	bls.n	800cbba <ucdr_serialize_endian_uint16_t+0x7e>
 800cb6e:	6923      	ldr	r3, [r4, #16]
 800cb70:	4620      	mov	r0, r4
 800cb72:	60a6      	str	r6, [r4, #8]
 800cb74:	1bf6      	subs	r6, r6, r7
 800cb76:	4433      	add	r3, r6
 800cb78:	f1c6 0902 	rsb	r9, r6, #2
 800cb7c:	6123      	str	r3, [r4, #16]
 800cb7e:	4649      	mov	r1, r9
 800cb80:	f001 f952 	bl	800de28 <ucdr_check_final_buffer_behavior>
 800cb84:	2800      	cmp	r0, #0
 800cb86:	d039      	beq.n	800cbfc <ucdr_serialize_endian_uint16_t+0xc0>
 800cb88:	2d01      	cmp	r5, #1
 800cb8a:	d04a      	beq.n	800cc22 <ucdr_serialize_endian_uint16_t+0xe6>
 800cb8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cb90:	703b      	strb	r3, [r7, #0]
 800cb92:	2e00      	cmp	r6, #0
 800cb94:	d040      	beq.n	800cc18 <ucdr_serialize_endian_uint16_t+0xdc>
 800cb96:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cb9a:	707b      	strb	r3, [r7, #1]
 800cb9c:	6923      	ldr	r3, [r4, #16]
 800cb9e:	2102      	movs	r1, #2
 800cba0:	68a2      	ldr	r2, [r4, #8]
 800cba2:	7da0      	ldrb	r0, [r4, #22]
 800cba4:	3302      	adds	r3, #2
 800cba6:	444a      	add	r2, r9
 800cba8:	7561      	strb	r1, [r4, #21]
 800cbaa:	1b9b      	subs	r3, r3, r6
 800cbac:	f080 0001 	eor.w	r0, r0, #1
 800cbb0:	60a2      	str	r2, [r4, #8]
 800cbb2:	6123      	str	r3, [r4, #16]
 800cbb4:	b003      	add	sp, #12
 800cbb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cbba:	2102      	movs	r1, #2
 800cbbc:	4620      	mov	r0, r4
 800cbbe:	f001 f933 	bl	800de28 <ucdr_check_final_buffer_behavior>
 800cbc2:	b188      	cbz	r0, 800cbe8 <ucdr_serialize_endian_uint16_t+0xac>
 800cbc4:	2d01      	cmp	r5, #1
 800cbc6:	68a3      	ldr	r3, [r4, #8]
 800cbc8:	d014      	beq.n	800cbf4 <ucdr_serialize_endian_uint16_t+0xb8>
 800cbca:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800cbce:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cbd2:	7019      	strb	r1, [r3, #0]
 800cbd4:	68a3      	ldr	r3, [r4, #8]
 800cbd6:	705a      	strb	r2, [r3, #1]
 800cbd8:	2102      	movs	r1, #2
 800cbda:	68a2      	ldr	r2, [r4, #8]
 800cbdc:	6923      	ldr	r3, [r4, #16]
 800cbde:	440a      	add	r2, r1
 800cbe0:	7561      	strb	r1, [r4, #21]
 800cbe2:	440b      	add	r3, r1
 800cbe4:	60a2      	str	r2, [r4, #8]
 800cbe6:	6123      	str	r3, [r4, #16]
 800cbe8:	7da0      	ldrb	r0, [r4, #22]
 800cbea:	f080 0001 	eor.w	r0, r0, #1
 800cbee:	b003      	add	sp, #12
 800cbf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cbf4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800cbf8:	801a      	strh	r2, [r3, #0]
 800cbfa:	e7ed      	b.n	800cbd8 <ucdr_serialize_endian_uint16_t+0x9c>
 800cbfc:	68a2      	ldr	r2, [r4, #8]
 800cbfe:	6923      	ldr	r3, [r4, #16]
 800cc00:	7da0      	ldrb	r0, [r4, #22]
 800cc02:	1b92      	subs	r2, r2, r6
 800cc04:	1b9b      	subs	r3, r3, r6
 800cc06:	f884 8015 	strb.w	r8, [r4, #21]
 800cc0a:	f080 0001 	eor.w	r0, r0, #1
 800cc0e:	60a2      	str	r2, [r4, #8]
 800cc10:	6123      	str	r3, [r4, #16]
 800cc12:	b003      	add	sp, #12
 800cc14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc18:	68a3      	ldr	r3, [r4, #8]
 800cc1a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cc1e:	701a      	strb	r2, [r3, #0]
 800cc20:	e7bc      	b.n	800cb9c <ucdr_serialize_endian_uint16_t+0x60>
 800cc22:	f10d 0506 	add.w	r5, sp, #6
 800cc26:	4632      	mov	r2, r6
 800cc28:	4638      	mov	r0, r7
 800cc2a:	4629      	mov	r1, r5
 800cc2c:	f00c fe77 	bl	801991e <memcpy>
 800cc30:	464a      	mov	r2, r9
 800cc32:	19a9      	adds	r1, r5, r6
 800cc34:	68a0      	ldr	r0, [r4, #8]
 800cc36:	f00c fe72 	bl	801991e <memcpy>
 800cc3a:	e7af      	b.n	800cb9c <ucdr_serialize_endian_uint16_t+0x60>

0800cc3c <ucdr_deserialize_uint16_t>:
 800cc3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc40:	4604      	mov	r4, r0
 800cc42:	460d      	mov	r5, r1
 800cc44:	2102      	movs	r1, #2
 800cc46:	f001 f943 	bl	800ded0 <ucdr_buffer_alignment>
 800cc4a:	4601      	mov	r1, r0
 800cc4c:	4620      	mov	r0, r4
 800cc4e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cc52:	f001 f985 	bl	800df60 <ucdr_advance_buffer>
 800cc56:	2102      	movs	r1, #2
 800cc58:	4620      	mov	r0, r4
 800cc5a:	f001 f8d9 	bl	800de10 <ucdr_check_buffer_available_for>
 800cc5e:	bb60      	cbnz	r0, 800ccba <ucdr_deserialize_uint16_t+0x7e>
 800cc60:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800cc64:	42be      	cmp	r6, r7
 800cc66:	d923      	bls.n	800ccb0 <ucdr_deserialize_uint16_t+0x74>
 800cc68:	6923      	ldr	r3, [r4, #16]
 800cc6a:	4620      	mov	r0, r4
 800cc6c:	60a6      	str	r6, [r4, #8]
 800cc6e:	1bf6      	subs	r6, r6, r7
 800cc70:	4433      	add	r3, r6
 800cc72:	f1c6 0902 	rsb	r9, r6, #2
 800cc76:	6123      	str	r3, [r4, #16]
 800cc78:	4649      	mov	r1, r9
 800cc7a:	f001 f8d5 	bl	800de28 <ucdr_check_final_buffer_behavior>
 800cc7e:	2800      	cmp	r0, #0
 800cc80:	d034      	beq.n	800ccec <ucdr_deserialize_uint16_t+0xb0>
 800cc82:	7d23      	ldrb	r3, [r4, #20]
 800cc84:	2b01      	cmp	r3, #1
 800cc86:	d042      	beq.n	800cd0e <ucdr_deserialize_uint16_t+0xd2>
 800cc88:	787b      	ldrb	r3, [r7, #1]
 800cc8a:	702b      	strb	r3, [r5, #0]
 800cc8c:	2e00      	cmp	r6, #0
 800cc8e:	d03a      	beq.n	800cd06 <ucdr_deserialize_uint16_t+0xca>
 800cc90:	783b      	ldrb	r3, [r7, #0]
 800cc92:	706b      	strb	r3, [r5, #1]
 800cc94:	6923      	ldr	r3, [r4, #16]
 800cc96:	2102      	movs	r1, #2
 800cc98:	68a2      	ldr	r2, [r4, #8]
 800cc9a:	3302      	adds	r3, #2
 800cc9c:	7da0      	ldrb	r0, [r4, #22]
 800cc9e:	444a      	add	r2, r9
 800cca0:	7561      	strb	r1, [r4, #21]
 800cca2:	1b9b      	subs	r3, r3, r6
 800cca4:	f080 0001 	eor.w	r0, r0, #1
 800cca8:	60a2      	str	r2, [r4, #8]
 800ccaa:	6123      	str	r3, [r4, #16]
 800ccac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccb0:	2102      	movs	r1, #2
 800ccb2:	4620      	mov	r0, r4
 800ccb4:	f001 f8b8 	bl	800de28 <ucdr_check_final_buffer_behavior>
 800ccb8:	b180      	cbz	r0, 800ccdc <ucdr_deserialize_uint16_t+0xa0>
 800ccba:	7d23      	ldrb	r3, [r4, #20]
 800ccbc:	2b01      	cmp	r3, #1
 800ccbe:	68a3      	ldr	r3, [r4, #8]
 800ccc0:	d011      	beq.n	800cce6 <ucdr_deserialize_uint16_t+0xaa>
 800ccc2:	785b      	ldrb	r3, [r3, #1]
 800ccc4:	702b      	strb	r3, [r5, #0]
 800ccc6:	68a3      	ldr	r3, [r4, #8]
 800ccc8:	781b      	ldrb	r3, [r3, #0]
 800ccca:	706b      	strb	r3, [r5, #1]
 800cccc:	2102      	movs	r1, #2
 800ccce:	68a2      	ldr	r2, [r4, #8]
 800ccd0:	6923      	ldr	r3, [r4, #16]
 800ccd2:	440a      	add	r2, r1
 800ccd4:	7561      	strb	r1, [r4, #21]
 800ccd6:	440b      	add	r3, r1
 800ccd8:	60a2      	str	r2, [r4, #8]
 800ccda:	6123      	str	r3, [r4, #16]
 800ccdc:	7da0      	ldrb	r0, [r4, #22]
 800ccde:	f080 0001 	eor.w	r0, r0, #1
 800cce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cce6:	881b      	ldrh	r3, [r3, #0]
 800cce8:	802b      	strh	r3, [r5, #0]
 800ccea:	e7ef      	b.n	800cccc <ucdr_deserialize_uint16_t+0x90>
 800ccec:	68a2      	ldr	r2, [r4, #8]
 800ccee:	6923      	ldr	r3, [r4, #16]
 800ccf0:	1b92      	subs	r2, r2, r6
 800ccf2:	7da0      	ldrb	r0, [r4, #22]
 800ccf4:	1b9b      	subs	r3, r3, r6
 800ccf6:	f884 8015 	strb.w	r8, [r4, #21]
 800ccfa:	f080 0001 	eor.w	r0, r0, #1
 800ccfe:	60a2      	str	r2, [r4, #8]
 800cd00:	6123      	str	r3, [r4, #16]
 800cd02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd06:	68a3      	ldr	r3, [r4, #8]
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	706b      	strb	r3, [r5, #1]
 800cd0c:	e7c2      	b.n	800cc94 <ucdr_deserialize_uint16_t+0x58>
 800cd0e:	4639      	mov	r1, r7
 800cd10:	4632      	mov	r2, r6
 800cd12:	4628      	mov	r0, r5
 800cd14:	f00c fe03 	bl	801991e <memcpy>
 800cd18:	464a      	mov	r2, r9
 800cd1a:	19a8      	adds	r0, r5, r6
 800cd1c:	68a1      	ldr	r1, [r4, #8]
 800cd1e:	f00c fdfe 	bl	801991e <memcpy>
 800cd22:	e7b7      	b.n	800cc94 <ucdr_deserialize_uint16_t+0x58>

0800cd24 <ucdr_deserialize_endian_uint16_t>:
 800cd24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd28:	4604      	mov	r4, r0
 800cd2a:	460e      	mov	r6, r1
 800cd2c:	2102      	movs	r1, #2
 800cd2e:	4615      	mov	r5, r2
 800cd30:	f001 f8ce 	bl	800ded0 <ucdr_buffer_alignment>
 800cd34:	4601      	mov	r1, r0
 800cd36:	4620      	mov	r0, r4
 800cd38:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cd3c:	f001 f910 	bl	800df60 <ucdr_advance_buffer>
 800cd40:	2102      	movs	r1, #2
 800cd42:	4620      	mov	r0, r4
 800cd44:	f001 f864 	bl	800de10 <ucdr_check_buffer_available_for>
 800cd48:	bb70      	cbnz	r0, 800cda8 <ucdr_deserialize_endian_uint16_t+0x84>
 800cd4a:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 800cd4e:	454f      	cmp	r7, r9
 800cd50:	d925      	bls.n	800cd9e <ucdr_deserialize_endian_uint16_t+0x7a>
 800cd52:	6923      	ldr	r3, [r4, #16]
 800cd54:	4620      	mov	r0, r4
 800cd56:	60a7      	str	r7, [r4, #8]
 800cd58:	eba7 0709 	sub.w	r7, r7, r9
 800cd5c:	443b      	add	r3, r7
 800cd5e:	f1c7 0a02 	rsb	sl, r7, #2
 800cd62:	6123      	str	r3, [r4, #16]
 800cd64:	4651      	mov	r1, sl
 800cd66:	f001 f85f 	bl	800de28 <ucdr_check_final_buffer_behavior>
 800cd6a:	2800      	cmp	r0, #0
 800cd6c:	d034      	beq.n	800cdd8 <ucdr_deserialize_endian_uint16_t+0xb4>
 800cd6e:	2e01      	cmp	r6, #1
 800cd70:	d043      	beq.n	800cdfa <ucdr_deserialize_endian_uint16_t+0xd6>
 800cd72:	f899 3001 	ldrb.w	r3, [r9, #1]
 800cd76:	702b      	strb	r3, [r5, #0]
 800cd78:	2f00      	cmp	r7, #0
 800cd7a:	d03a      	beq.n	800cdf2 <ucdr_deserialize_endian_uint16_t+0xce>
 800cd7c:	f899 3000 	ldrb.w	r3, [r9]
 800cd80:	706b      	strb	r3, [r5, #1]
 800cd82:	6923      	ldr	r3, [r4, #16]
 800cd84:	2102      	movs	r1, #2
 800cd86:	68a2      	ldr	r2, [r4, #8]
 800cd88:	3302      	adds	r3, #2
 800cd8a:	7da0      	ldrb	r0, [r4, #22]
 800cd8c:	4452      	add	r2, sl
 800cd8e:	7561      	strb	r1, [r4, #21]
 800cd90:	1bdb      	subs	r3, r3, r7
 800cd92:	f080 0001 	eor.w	r0, r0, #1
 800cd96:	60a2      	str	r2, [r4, #8]
 800cd98:	6123      	str	r3, [r4, #16]
 800cd9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd9e:	2102      	movs	r1, #2
 800cda0:	4620      	mov	r0, r4
 800cda2:	f001 f841 	bl	800de28 <ucdr_check_final_buffer_behavior>
 800cda6:	b178      	cbz	r0, 800cdc8 <ucdr_deserialize_endian_uint16_t+0xa4>
 800cda8:	2e01      	cmp	r6, #1
 800cdaa:	68a3      	ldr	r3, [r4, #8]
 800cdac:	d011      	beq.n	800cdd2 <ucdr_deserialize_endian_uint16_t+0xae>
 800cdae:	785b      	ldrb	r3, [r3, #1]
 800cdb0:	702b      	strb	r3, [r5, #0]
 800cdb2:	68a3      	ldr	r3, [r4, #8]
 800cdb4:	781b      	ldrb	r3, [r3, #0]
 800cdb6:	706b      	strb	r3, [r5, #1]
 800cdb8:	2102      	movs	r1, #2
 800cdba:	68a2      	ldr	r2, [r4, #8]
 800cdbc:	6923      	ldr	r3, [r4, #16]
 800cdbe:	440a      	add	r2, r1
 800cdc0:	7561      	strb	r1, [r4, #21]
 800cdc2:	440b      	add	r3, r1
 800cdc4:	60a2      	str	r2, [r4, #8]
 800cdc6:	6123      	str	r3, [r4, #16]
 800cdc8:	7da0      	ldrb	r0, [r4, #22]
 800cdca:	f080 0001 	eor.w	r0, r0, #1
 800cdce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdd2:	881b      	ldrh	r3, [r3, #0]
 800cdd4:	802b      	strh	r3, [r5, #0]
 800cdd6:	e7ef      	b.n	800cdb8 <ucdr_deserialize_endian_uint16_t+0x94>
 800cdd8:	68a2      	ldr	r2, [r4, #8]
 800cdda:	6923      	ldr	r3, [r4, #16]
 800cddc:	1bd2      	subs	r2, r2, r7
 800cdde:	7da0      	ldrb	r0, [r4, #22]
 800cde0:	1bdb      	subs	r3, r3, r7
 800cde2:	f884 8015 	strb.w	r8, [r4, #21]
 800cde6:	f080 0001 	eor.w	r0, r0, #1
 800cdea:	60a2      	str	r2, [r4, #8]
 800cdec:	6123      	str	r3, [r4, #16]
 800cdee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdf2:	68a3      	ldr	r3, [r4, #8]
 800cdf4:	781b      	ldrb	r3, [r3, #0]
 800cdf6:	706b      	strb	r3, [r5, #1]
 800cdf8:	e7c3      	b.n	800cd82 <ucdr_deserialize_endian_uint16_t+0x5e>
 800cdfa:	4649      	mov	r1, r9
 800cdfc:	463a      	mov	r2, r7
 800cdfe:	4628      	mov	r0, r5
 800ce00:	f00c fd8d 	bl	801991e <memcpy>
 800ce04:	4652      	mov	r2, sl
 800ce06:	19e8      	adds	r0, r5, r7
 800ce08:	68a1      	ldr	r1, [r4, #8]
 800ce0a:	f00c fd88 	bl	801991e <memcpy>
 800ce0e:	e7b8      	b.n	800cd82 <ucdr_deserialize_endian_uint16_t+0x5e>

0800ce10 <ucdr_serialize_uint32_t>:
 800ce10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce14:	b082      	sub	sp, #8
 800ce16:	4604      	mov	r4, r0
 800ce18:	9101      	str	r1, [sp, #4]
 800ce1a:	2104      	movs	r1, #4
 800ce1c:	f001 f858 	bl	800ded0 <ucdr_buffer_alignment>
 800ce20:	4601      	mov	r1, r0
 800ce22:	4620      	mov	r0, r4
 800ce24:	7d67      	ldrb	r7, [r4, #21]
 800ce26:	f001 f89b 	bl	800df60 <ucdr_advance_buffer>
 800ce2a:	2104      	movs	r1, #4
 800ce2c:	4620      	mov	r0, r4
 800ce2e:	f000 ffef 	bl	800de10 <ucdr_check_buffer_available_for>
 800ce32:	2800      	cmp	r0, #0
 800ce34:	d139      	bne.n	800ceaa <ucdr_serialize_uint32_t+0x9a>
 800ce36:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ce3a:	42ab      	cmp	r3, r5
 800ce3c:	d930      	bls.n	800cea0 <ucdr_serialize_uint32_t+0x90>
 800ce3e:	1b5e      	subs	r6, r3, r5
 800ce40:	60a3      	str	r3, [r4, #8]
 800ce42:	6923      	ldr	r3, [r4, #16]
 800ce44:	4620      	mov	r0, r4
 800ce46:	f1c6 0804 	rsb	r8, r6, #4
 800ce4a:	4433      	add	r3, r6
 800ce4c:	4641      	mov	r1, r8
 800ce4e:	6123      	str	r3, [r4, #16]
 800ce50:	f000 ffea 	bl	800de28 <ucdr_check_final_buffer_behavior>
 800ce54:	2800      	cmp	r0, #0
 800ce56:	d04c      	beq.n	800cef2 <ucdr_serialize_uint32_t+0xe2>
 800ce58:	7d23      	ldrb	r3, [r4, #20]
 800ce5a:	2b01      	cmp	r3, #1
 800ce5c:	d063      	beq.n	800cf26 <ucdr_serialize_uint32_t+0x116>
 800ce5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ce62:	702b      	strb	r3, [r5, #0]
 800ce64:	2e00      	cmp	r6, #0
 800ce66:	d051      	beq.n	800cf0c <ucdr_serialize_uint32_t+0xfc>
 800ce68:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ce6c:	2e01      	cmp	r6, #1
 800ce6e:	706b      	strb	r3, [r5, #1]
 800ce70:	d050      	beq.n	800cf14 <ucdr_serialize_uint32_t+0x104>
 800ce72:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ce76:	2e02      	cmp	r6, #2
 800ce78:	70ab      	strb	r3, [r5, #2]
 800ce7a:	d04f      	beq.n	800cf1c <ucdr_serialize_uint32_t+0x10c>
 800ce7c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ce80:	70eb      	strb	r3, [r5, #3]
 800ce82:	6923      	ldr	r3, [r4, #16]
 800ce84:	2104      	movs	r1, #4
 800ce86:	68a2      	ldr	r2, [r4, #8]
 800ce88:	3304      	adds	r3, #4
 800ce8a:	7da0      	ldrb	r0, [r4, #22]
 800ce8c:	4442      	add	r2, r8
 800ce8e:	7561      	strb	r1, [r4, #21]
 800ce90:	1b9e      	subs	r6, r3, r6
 800ce92:	f080 0001 	eor.w	r0, r0, #1
 800ce96:	60a2      	str	r2, [r4, #8]
 800ce98:	6126      	str	r6, [r4, #16]
 800ce9a:	b002      	add	sp, #8
 800ce9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cea0:	2104      	movs	r1, #4
 800cea2:	4620      	mov	r0, r4
 800cea4:	f000 ffc0 	bl	800de28 <ucdr_check_final_buffer_behavior>
 800cea8:	b1d0      	cbz	r0, 800cee0 <ucdr_serialize_uint32_t+0xd0>
 800ceaa:	7d23      	ldrb	r3, [r4, #20]
 800ceac:	2b01      	cmp	r3, #1
 800ceae:	68a3      	ldr	r3, [r4, #8]
 800ceb0:	d01c      	beq.n	800ceec <ucdr_serialize_uint32_t+0xdc>
 800ceb2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800ceb6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ceba:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800cebe:	7018      	strb	r0, [r3, #0]
 800cec0:	68a3      	ldr	r3, [r4, #8]
 800cec2:	705a      	strb	r2, [r3, #1]
 800cec4:	68a3      	ldr	r3, [r4, #8]
 800cec6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ceca:	7099      	strb	r1, [r3, #2]
 800cecc:	68a3      	ldr	r3, [r4, #8]
 800cece:	70da      	strb	r2, [r3, #3]
 800ced0:	2104      	movs	r1, #4
 800ced2:	68a2      	ldr	r2, [r4, #8]
 800ced4:	6923      	ldr	r3, [r4, #16]
 800ced6:	440a      	add	r2, r1
 800ced8:	7561      	strb	r1, [r4, #21]
 800ceda:	440b      	add	r3, r1
 800cedc:	60a2      	str	r2, [r4, #8]
 800cede:	6123      	str	r3, [r4, #16]
 800cee0:	7da0      	ldrb	r0, [r4, #22]
 800cee2:	f080 0001 	eor.w	r0, r0, #1
 800cee6:	b002      	add	sp, #8
 800cee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ceec:	9a01      	ldr	r2, [sp, #4]
 800ceee:	601a      	str	r2, [r3, #0]
 800cef0:	e7ee      	b.n	800ced0 <ucdr_serialize_uint32_t+0xc0>
 800cef2:	68a2      	ldr	r2, [r4, #8]
 800cef4:	6923      	ldr	r3, [r4, #16]
 800cef6:	7da0      	ldrb	r0, [r4, #22]
 800cef8:	1b92      	subs	r2, r2, r6
 800cefa:	1b9b      	subs	r3, r3, r6
 800cefc:	7567      	strb	r7, [r4, #21]
 800cefe:	f080 0001 	eor.w	r0, r0, #1
 800cf02:	60a2      	str	r2, [r4, #8]
 800cf04:	6123      	str	r3, [r4, #16]
 800cf06:	b002      	add	sp, #8
 800cf08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf0c:	68a3      	ldr	r3, [r4, #8]
 800cf0e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cf12:	701a      	strb	r2, [r3, #0]
 800cf14:	68a3      	ldr	r3, [r4, #8]
 800cf16:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cf1a:	701a      	strb	r2, [r3, #0]
 800cf1c:	68a3      	ldr	r3, [r4, #8]
 800cf1e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cf22:	701a      	strb	r2, [r3, #0]
 800cf24:	e7ad      	b.n	800ce82 <ucdr_serialize_uint32_t+0x72>
 800cf26:	4628      	mov	r0, r5
 800cf28:	ad01      	add	r5, sp, #4
 800cf2a:	4632      	mov	r2, r6
 800cf2c:	4629      	mov	r1, r5
 800cf2e:	f00c fcf6 	bl	801991e <memcpy>
 800cf32:	4642      	mov	r2, r8
 800cf34:	19a9      	adds	r1, r5, r6
 800cf36:	68a0      	ldr	r0, [r4, #8]
 800cf38:	f00c fcf1 	bl	801991e <memcpy>
 800cf3c:	e7a1      	b.n	800ce82 <ucdr_serialize_uint32_t+0x72>
 800cf3e:	bf00      	nop

0800cf40 <ucdr_serialize_endian_uint32_t>:
 800cf40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf44:	4604      	mov	r4, r0
 800cf46:	b083      	sub	sp, #12
 800cf48:	460d      	mov	r5, r1
 800cf4a:	2104      	movs	r1, #4
 800cf4c:	9201      	str	r2, [sp, #4]
 800cf4e:	f000 ffbf 	bl	800ded0 <ucdr_buffer_alignment>
 800cf52:	4601      	mov	r1, r0
 800cf54:	4620      	mov	r0, r4
 800cf56:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cf5a:	f001 f801 	bl	800df60 <ucdr_advance_buffer>
 800cf5e:	2104      	movs	r1, #4
 800cf60:	4620      	mov	r0, r4
 800cf62:	f000 ff55 	bl	800de10 <ucdr_check_buffer_available_for>
 800cf66:	2800      	cmp	r0, #0
 800cf68:	d138      	bne.n	800cfdc <ucdr_serialize_endian_uint32_t+0x9c>
 800cf6a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800cf6e:	42b7      	cmp	r7, r6
 800cf70:	d92f      	bls.n	800cfd2 <ucdr_serialize_endian_uint32_t+0x92>
 800cf72:	6923      	ldr	r3, [r4, #16]
 800cf74:	4620      	mov	r0, r4
 800cf76:	60a7      	str	r7, [r4, #8]
 800cf78:	1bbf      	subs	r7, r7, r6
 800cf7a:	443b      	add	r3, r7
 800cf7c:	f1c7 0904 	rsb	r9, r7, #4
 800cf80:	6123      	str	r3, [r4, #16]
 800cf82:	4649      	mov	r1, r9
 800cf84:	f000 ff50 	bl	800de28 <ucdr_check_final_buffer_behavior>
 800cf88:	2800      	cmp	r0, #0
 800cf8a:	d04a      	beq.n	800d022 <ucdr_serialize_endian_uint32_t+0xe2>
 800cf8c:	2d01      	cmp	r5, #1
 800cf8e:	d063      	beq.n	800d058 <ucdr_serialize_endian_uint32_t+0x118>
 800cf90:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cf94:	7033      	strb	r3, [r6, #0]
 800cf96:	2f00      	cmp	r7, #0
 800cf98:	d051      	beq.n	800d03e <ucdr_serialize_endian_uint32_t+0xfe>
 800cf9a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cf9e:	2f01      	cmp	r7, #1
 800cfa0:	7073      	strb	r3, [r6, #1]
 800cfa2:	d050      	beq.n	800d046 <ucdr_serialize_endian_uint32_t+0x106>
 800cfa4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800cfa8:	2f02      	cmp	r7, #2
 800cfaa:	70b3      	strb	r3, [r6, #2]
 800cfac:	d04f      	beq.n	800d04e <ucdr_serialize_endian_uint32_t+0x10e>
 800cfae:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cfb2:	70f3      	strb	r3, [r6, #3]
 800cfb4:	6923      	ldr	r3, [r4, #16]
 800cfb6:	2104      	movs	r1, #4
 800cfb8:	68a2      	ldr	r2, [r4, #8]
 800cfba:	7da0      	ldrb	r0, [r4, #22]
 800cfbc:	3304      	adds	r3, #4
 800cfbe:	444a      	add	r2, r9
 800cfc0:	7561      	strb	r1, [r4, #21]
 800cfc2:	1bdb      	subs	r3, r3, r7
 800cfc4:	f080 0001 	eor.w	r0, r0, #1
 800cfc8:	60a2      	str	r2, [r4, #8]
 800cfca:	6123      	str	r3, [r4, #16]
 800cfcc:	b003      	add	sp, #12
 800cfce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cfd2:	2104      	movs	r1, #4
 800cfd4:	4620      	mov	r0, r4
 800cfd6:	f000 ff27 	bl	800de28 <ucdr_check_final_buffer_behavior>
 800cfda:	b1c8      	cbz	r0, 800d010 <ucdr_serialize_endian_uint32_t+0xd0>
 800cfdc:	2d01      	cmp	r5, #1
 800cfde:	68a3      	ldr	r3, [r4, #8]
 800cfe0:	d01c      	beq.n	800d01c <ucdr_serialize_endian_uint32_t+0xdc>
 800cfe2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800cfe6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cfea:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800cfee:	7018      	strb	r0, [r3, #0]
 800cff0:	68a3      	ldr	r3, [r4, #8]
 800cff2:	705a      	strb	r2, [r3, #1]
 800cff4:	68a3      	ldr	r3, [r4, #8]
 800cff6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cffa:	7099      	strb	r1, [r3, #2]
 800cffc:	68a3      	ldr	r3, [r4, #8]
 800cffe:	70da      	strb	r2, [r3, #3]
 800d000:	2104      	movs	r1, #4
 800d002:	68a2      	ldr	r2, [r4, #8]
 800d004:	6923      	ldr	r3, [r4, #16]
 800d006:	440a      	add	r2, r1
 800d008:	7561      	strb	r1, [r4, #21]
 800d00a:	440b      	add	r3, r1
 800d00c:	60a2      	str	r2, [r4, #8]
 800d00e:	6123      	str	r3, [r4, #16]
 800d010:	7da0      	ldrb	r0, [r4, #22]
 800d012:	f080 0001 	eor.w	r0, r0, #1
 800d016:	b003      	add	sp, #12
 800d018:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d01c:	9a01      	ldr	r2, [sp, #4]
 800d01e:	601a      	str	r2, [r3, #0]
 800d020:	e7ee      	b.n	800d000 <ucdr_serialize_endian_uint32_t+0xc0>
 800d022:	68a2      	ldr	r2, [r4, #8]
 800d024:	6923      	ldr	r3, [r4, #16]
 800d026:	7da0      	ldrb	r0, [r4, #22]
 800d028:	1bd2      	subs	r2, r2, r7
 800d02a:	1bdb      	subs	r3, r3, r7
 800d02c:	f884 8015 	strb.w	r8, [r4, #21]
 800d030:	f080 0001 	eor.w	r0, r0, #1
 800d034:	60a2      	str	r2, [r4, #8]
 800d036:	6123      	str	r3, [r4, #16]
 800d038:	b003      	add	sp, #12
 800d03a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d03e:	68a3      	ldr	r3, [r4, #8]
 800d040:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d044:	701a      	strb	r2, [r3, #0]
 800d046:	68a3      	ldr	r3, [r4, #8]
 800d048:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d04c:	701a      	strb	r2, [r3, #0]
 800d04e:	68a3      	ldr	r3, [r4, #8]
 800d050:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d054:	701a      	strb	r2, [r3, #0]
 800d056:	e7ad      	b.n	800cfb4 <ucdr_serialize_endian_uint32_t+0x74>
 800d058:	ad01      	add	r5, sp, #4
 800d05a:	463a      	mov	r2, r7
 800d05c:	4630      	mov	r0, r6
 800d05e:	4629      	mov	r1, r5
 800d060:	f00c fc5d 	bl	801991e <memcpy>
 800d064:	464a      	mov	r2, r9
 800d066:	19e9      	adds	r1, r5, r7
 800d068:	68a0      	ldr	r0, [r4, #8]
 800d06a:	f00c fc58 	bl	801991e <memcpy>
 800d06e:	e7a1      	b.n	800cfb4 <ucdr_serialize_endian_uint32_t+0x74>

0800d070 <ucdr_deserialize_uint32_t>:
 800d070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d074:	4604      	mov	r4, r0
 800d076:	460d      	mov	r5, r1
 800d078:	2104      	movs	r1, #4
 800d07a:	f000 ff29 	bl	800ded0 <ucdr_buffer_alignment>
 800d07e:	4601      	mov	r1, r0
 800d080:	4620      	mov	r0, r4
 800d082:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d086:	f000 ff6b 	bl	800df60 <ucdr_advance_buffer>
 800d08a:	2104      	movs	r1, #4
 800d08c:	4620      	mov	r0, r4
 800d08e:	f000 febf 	bl	800de10 <ucdr_check_buffer_available_for>
 800d092:	2800      	cmp	r0, #0
 800d094:	d138      	bne.n	800d108 <ucdr_deserialize_uint32_t+0x98>
 800d096:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800d09a:	42b7      	cmp	r7, r6
 800d09c:	d92f      	bls.n	800d0fe <ucdr_deserialize_uint32_t+0x8e>
 800d09e:	6923      	ldr	r3, [r4, #16]
 800d0a0:	4620      	mov	r0, r4
 800d0a2:	60a7      	str	r7, [r4, #8]
 800d0a4:	1bbf      	subs	r7, r7, r6
 800d0a6:	443b      	add	r3, r7
 800d0a8:	f1c7 0904 	rsb	r9, r7, #4
 800d0ac:	6123      	str	r3, [r4, #16]
 800d0ae:	4649      	mov	r1, r9
 800d0b0:	f000 feba 	bl	800de28 <ucdr_check_final_buffer_behavior>
 800d0b4:	2800      	cmp	r0, #0
 800d0b6:	d046      	beq.n	800d146 <ucdr_deserialize_uint32_t+0xd6>
 800d0b8:	7d23      	ldrb	r3, [r4, #20]
 800d0ba:	2b01      	cmp	r3, #1
 800d0bc:	d05c      	beq.n	800d178 <ucdr_deserialize_uint32_t+0x108>
 800d0be:	78f3      	ldrb	r3, [r6, #3]
 800d0c0:	702b      	strb	r3, [r5, #0]
 800d0c2:	2f00      	cmp	r7, #0
 800d0c4:	d04c      	beq.n	800d160 <ucdr_deserialize_uint32_t+0xf0>
 800d0c6:	78b3      	ldrb	r3, [r6, #2]
 800d0c8:	2f01      	cmp	r7, #1
 800d0ca:	706b      	strb	r3, [r5, #1]
 800d0cc:	f105 0302 	add.w	r3, r5, #2
 800d0d0:	d04a      	beq.n	800d168 <ucdr_deserialize_uint32_t+0xf8>
 800d0d2:	7873      	ldrb	r3, [r6, #1]
 800d0d4:	2f02      	cmp	r7, #2
 800d0d6:	70ab      	strb	r3, [r5, #2]
 800d0d8:	f105 0303 	add.w	r3, r5, #3
 800d0dc:	d048      	beq.n	800d170 <ucdr_deserialize_uint32_t+0x100>
 800d0de:	7833      	ldrb	r3, [r6, #0]
 800d0e0:	70eb      	strb	r3, [r5, #3]
 800d0e2:	6923      	ldr	r3, [r4, #16]
 800d0e4:	2104      	movs	r1, #4
 800d0e6:	68a2      	ldr	r2, [r4, #8]
 800d0e8:	3304      	adds	r3, #4
 800d0ea:	7da0      	ldrb	r0, [r4, #22]
 800d0ec:	444a      	add	r2, r9
 800d0ee:	7561      	strb	r1, [r4, #21]
 800d0f0:	1bdb      	subs	r3, r3, r7
 800d0f2:	f080 0001 	eor.w	r0, r0, #1
 800d0f6:	60a2      	str	r2, [r4, #8]
 800d0f8:	6123      	str	r3, [r4, #16]
 800d0fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0fe:	2104      	movs	r1, #4
 800d100:	4620      	mov	r0, r4
 800d102:	f000 fe91 	bl	800de28 <ucdr_check_final_buffer_behavior>
 800d106:	b1b0      	cbz	r0, 800d136 <ucdr_deserialize_uint32_t+0xc6>
 800d108:	7d23      	ldrb	r3, [r4, #20]
 800d10a:	2b01      	cmp	r3, #1
 800d10c:	68a3      	ldr	r3, [r4, #8]
 800d10e:	d017      	beq.n	800d140 <ucdr_deserialize_uint32_t+0xd0>
 800d110:	78db      	ldrb	r3, [r3, #3]
 800d112:	702b      	strb	r3, [r5, #0]
 800d114:	68a3      	ldr	r3, [r4, #8]
 800d116:	789b      	ldrb	r3, [r3, #2]
 800d118:	706b      	strb	r3, [r5, #1]
 800d11a:	68a3      	ldr	r3, [r4, #8]
 800d11c:	785b      	ldrb	r3, [r3, #1]
 800d11e:	70ab      	strb	r3, [r5, #2]
 800d120:	68a3      	ldr	r3, [r4, #8]
 800d122:	781b      	ldrb	r3, [r3, #0]
 800d124:	70eb      	strb	r3, [r5, #3]
 800d126:	2104      	movs	r1, #4
 800d128:	68a2      	ldr	r2, [r4, #8]
 800d12a:	6923      	ldr	r3, [r4, #16]
 800d12c:	440a      	add	r2, r1
 800d12e:	7561      	strb	r1, [r4, #21]
 800d130:	440b      	add	r3, r1
 800d132:	60a2      	str	r2, [r4, #8]
 800d134:	6123      	str	r3, [r4, #16]
 800d136:	7da0      	ldrb	r0, [r4, #22]
 800d138:	f080 0001 	eor.w	r0, r0, #1
 800d13c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	602b      	str	r3, [r5, #0]
 800d144:	e7ef      	b.n	800d126 <ucdr_deserialize_uint32_t+0xb6>
 800d146:	68a2      	ldr	r2, [r4, #8]
 800d148:	6923      	ldr	r3, [r4, #16]
 800d14a:	1bd2      	subs	r2, r2, r7
 800d14c:	7da0      	ldrb	r0, [r4, #22]
 800d14e:	1bdb      	subs	r3, r3, r7
 800d150:	f884 8015 	strb.w	r8, [r4, #21]
 800d154:	f080 0001 	eor.w	r0, r0, #1
 800d158:	60a2      	str	r2, [r4, #8]
 800d15a:	6123      	str	r3, [r4, #16]
 800d15c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d160:	68a3      	ldr	r3, [r4, #8]
 800d162:	789b      	ldrb	r3, [r3, #2]
 800d164:	706b      	strb	r3, [r5, #1]
 800d166:	1cab      	adds	r3, r5, #2
 800d168:	68a2      	ldr	r2, [r4, #8]
 800d16a:	7852      	ldrb	r2, [r2, #1]
 800d16c:	f803 2b01 	strb.w	r2, [r3], #1
 800d170:	68a2      	ldr	r2, [r4, #8]
 800d172:	7812      	ldrb	r2, [r2, #0]
 800d174:	701a      	strb	r2, [r3, #0]
 800d176:	e7b4      	b.n	800d0e2 <ucdr_deserialize_uint32_t+0x72>
 800d178:	4631      	mov	r1, r6
 800d17a:	463a      	mov	r2, r7
 800d17c:	4628      	mov	r0, r5
 800d17e:	f00c fbce 	bl	801991e <memcpy>
 800d182:	464a      	mov	r2, r9
 800d184:	19e8      	adds	r0, r5, r7
 800d186:	68a1      	ldr	r1, [r4, #8]
 800d188:	f00c fbc9 	bl	801991e <memcpy>
 800d18c:	e7a9      	b.n	800d0e2 <ucdr_deserialize_uint32_t+0x72>
 800d18e:	bf00      	nop

0800d190 <ucdr_deserialize_endian_uint32_t>:
 800d190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d194:	4604      	mov	r4, r0
 800d196:	460e      	mov	r6, r1
 800d198:	2104      	movs	r1, #4
 800d19a:	4615      	mov	r5, r2
 800d19c:	f000 fe98 	bl	800ded0 <ucdr_buffer_alignment>
 800d1a0:	4601      	mov	r1, r0
 800d1a2:	4620      	mov	r0, r4
 800d1a4:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d1a8:	f000 feda 	bl	800df60 <ucdr_advance_buffer>
 800d1ac:	2104      	movs	r1, #4
 800d1ae:	4620      	mov	r0, r4
 800d1b0:	f000 fe2e 	bl	800de10 <ucdr_check_buffer_available_for>
 800d1b4:	2800      	cmp	r0, #0
 800d1b6:	d13c      	bne.n	800d232 <ucdr_deserialize_endian_uint32_t+0xa2>
 800d1b8:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800d1bc:	42bb      	cmp	r3, r7
 800d1be:	d933      	bls.n	800d228 <ucdr_deserialize_endian_uint32_t+0x98>
 800d1c0:	eba3 0907 	sub.w	r9, r3, r7
 800d1c4:	60a3      	str	r3, [r4, #8]
 800d1c6:	6923      	ldr	r3, [r4, #16]
 800d1c8:	4620      	mov	r0, r4
 800d1ca:	f1c9 0a04 	rsb	sl, r9, #4
 800d1ce:	444b      	add	r3, r9
 800d1d0:	4651      	mov	r1, sl
 800d1d2:	6123      	str	r3, [r4, #16]
 800d1d4:	f000 fe28 	bl	800de28 <ucdr_check_final_buffer_behavior>
 800d1d8:	2800      	cmp	r0, #0
 800d1da:	d048      	beq.n	800d26e <ucdr_deserialize_endian_uint32_t+0xde>
 800d1dc:	2e01      	cmp	r6, #1
 800d1de:	d061      	beq.n	800d2a4 <ucdr_deserialize_endian_uint32_t+0x114>
 800d1e0:	78fb      	ldrb	r3, [r7, #3]
 800d1e2:	702b      	strb	r3, [r5, #0]
 800d1e4:	f1b9 0f00 	cmp.w	r9, #0
 800d1e8:	d050      	beq.n	800d28c <ucdr_deserialize_endian_uint32_t+0xfc>
 800d1ea:	78bb      	ldrb	r3, [r7, #2]
 800d1ec:	f1b9 0f01 	cmp.w	r9, #1
 800d1f0:	706b      	strb	r3, [r5, #1]
 800d1f2:	f105 0302 	add.w	r3, r5, #2
 800d1f6:	d04d      	beq.n	800d294 <ucdr_deserialize_endian_uint32_t+0x104>
 800d1f8:	787b      	ldrb	r3, [r7, #1]
 800d1fa:	f1b9 0f02 	cmp.w	r9, #2
 800d1fe:	70ab      	strb	r3, [r5, #2]
 800d200:	f105 0303 	add.w	r3, r5, #3
 800d204:	d04a      	beq.n	800d29c <ucdr_deserialize_endian_uint32_t+0x10c>
 800d206:	783b      	ldrb	r3, [r7, #0]
 800d208:	70eb      	strb	r3, [r5, #3]
 800d20a:	6923      	ldr	r3, [r4, #16]
 800d20c:	2104      	movs	r1, #4
 800d20e:	68a2      	ldr	r2, [r4, #8]
 800d210:	3304      	adds	r3, #4
 800d212:	7da0      	ldrb	r0, [r4, #22]
 800d214:	4452      	add	r2, sl
 800d216:	7561      	strb	r1, [r4, #21]
 800d218:	eba3 0309 	sub.w	r3, r3, r9
 800d21c:	f080 0001 	eor.w	r0, r0, #1
 800d220:	60a2      	str	r2, [r4, #8]
 800d222:	6123      	str	r3, [r4, #16]
 800d224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d228:	2104      	movs	r1, #4
 800d22a:	4620      	mov	r0, r4
 800d22c:	f000 fdfc 	bl	800de28 <ucdr_check_final_buffer_behavior>
 800d230:	b1a8      	cbz	r0, 800d25e <ucdr_deserialize_endian_uint32_t+0xce>
 800d232:	2e01      	cmp	r6, #1
 800d234:	68a3      	ldr	r3, [r4, #8]
 800d236:	d017      	beq.n	800d268 <ucdr_deserialize_endian_uint32_t+0xd8>
 800d238:	78db      	ldrb	r3, [r3, #3]
 800d23a:	702b      	strb	r3, [r5, #0]
 800d23c:	68a3      	ldr	r3, [r4, #8]
 800d23e:	789b      	ldrb	r3, [r3, #2]
 800d240:	706b      	strb	r3, [r5, #1]
 800d242:	68a3      	ldr	r3, [r4, #8]
 800d244:	785b      	ldrb	r3, [r3, #1]
 800d246:	70ab      	strb	r3, [r5, #2]
 800d248:	68a3      	ldr	r3, [r4, #8]
 800d24a:	781b      	ldrb	r3, [r3, #0]
 800d24c:	70eb      	strb	r3, [r5, #3]
 800d24e:	2104      	movs	r1, #4
 800d250:	68a2      	ldr	r2, [r4, #8]
 800d252:	6923      	ldr	r3, [r4, #16]
 800d254:	440a      	add	r2, r1
 800d256:	7561      	strb	r1, [r4, #21]
 800d258:	440b      	add	r3, r1
 800d25a:	60a2      	str	r2, [r4, #8]
 800d25c:	6123      	str	r3, [r4, #16]
 800d25e:	7da0      	ldrb	r0, [r4, #22]
 800d260:	f080 0001 	eor.w	r0, r0, #1
 800d264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	602b      	str	r3, [r5, #0]
 800d26c:	e7ef      	b.n	800d24e <ucdr_deserialize_endian_uint32_t+0xbe>
 800d26e:	68a2      	ldr	r2, [r4, #8]
 800d270:	6923      	ldr	r3, [r4, #16]
 800d272:	eba2 0209 	sub.w	r2, r2, r9
 800d276:	7da0      	ldrb	r0, [r4, #22]
 800d278:	eba3 0309 	sub.w	r3, r3, r9
 800d27c:	f884 8015 	strb.w	r8, [r4, #21]
 800d280:	f080 0001 	eor.w	r0, r0, #1
 800d284:	60a2      	str	r2, [r4, #8]
 800d286:	6123      	str	r3, [r4, #16]
 800d288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d28c:	68a3      	ldr	r3, [r4, #8]
 800d28e:	789b      	ldrb	r3, [r3, #2]
 800d290:	706b      	strb	r3, [r5, #1]
 800d292:	1cab      	adds	r3, r5, #2
 800d294:	68a2      	ldr	r2, [r4, #8]
 800d296:	7852      	ldrb	r2, [r2, #1]
 800d298:	f803 2b01 	strb.w	r2, [r3], #1
 800d29c:	68a2      	ldr	r2, [r4, #8]
 800d29e:	7812      	ldrb	r2, [r2, #0]
 800d2a0:	701a      	strb	r2, [r3, #0]
 800d2a2:	e7b2      	b.n	800d20a <ucdr_deserialize_endian_uint32_t+0x7a>
 800d2a4:	4639      	mov	r1, r7
 800d2a6:	464a      	mov	r2, r9
 800d2a8:	4628      	mov	r0, r5
 800d2aa:	f00c fb38 	bl	801991e <memcpy>
 800d2ae:	4652      	mov	r2, sl
 800d2b0:	eb05 0009 	add.w	r0, r5, r9
 800d2b4:	68a1      	ldr	r1, [r4, #8]
 800d2b6:	f00c fb32 	bl	801991e <memcpy>
 800d2ba:	e7a6      	b.n	800d20a <ucdr_deserialize_endian_uint32_t+0x7a>

0800d2bc <ucdr_serialize_uint64_t>:
 800d2bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2c0:	4604      	mov	r4, r0
 800d2c2:	b082      	sub	sp, #8
 800d2c4:	2108      	movs	r1, #8
 800d2c6:	e9cd 2300 	strd	r2, r3, [sp]
 800d2ca:	f000 fe01 	bl	800ded0 <ucdr_buffer_alignment>
 800d2ce:	4601      	mov	r1, r0
 800d2d0:	4620      	mov	r0, r4
 800d2d2:	7d67      	ldrb	r7, [r4, #21]
 800d2d4:	f000 fe44 	bl	800df60 <ucdr_advance_buffer>
 800d2d8:	2108      	movs	r1, #8
 800d2da:	4620      	mov	r0, r4
 800d2dc:	f000 fd98 	bl	800de10 <ucdr_check_buffer_available_for>
 800d2e0:	2800      	cmp	r0, #0
 800d2e2:	d14e      	bne.n	800d382 <ucdr_serialize_uint64_t+0xc6>
 800d2e4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d2e8:	42ab      	cmp	r3, r5
 800d2ea:	d945      	bls.n	800d378 <ucdr_serialize_uint64_t+0xbc>
 800d2ec:	1b5e      	subs	r6, r3, r5
 800d2ee:	60a3      	str	r3, [r4, #8]
 800d2f0:	6923      	ldr	r3, [r4, #16]
 800d2f2:	4620      	mov	r0, r4
 800d2f4:	f1c6 0808 	rsb	r8, r6, #8
 800d2f8:	4433      	add	r3, r6
 800d2fa:	4641      	mov	r1, r8
 800d2fc:	6123      	str	r3, [r4, #16]
 800d2fe:	f000 fd93 	bl	800de28 <ucdr_check_final_buffer_behavior>
 800d302:	2800      	cmp	r0, #0
 800d304:	d074      	beq.n	800d3f0 <ucdr_serialize_uint64_t+0x134>
 800d306:	7d23      	ldrb	r3, [r4, #20]
 800d308:	2b01      	cmp	r3, #1
 800d30a:	f000 809b 	beq.w	800d444 <ucdr_serialize_uint64_t+0x188>
 800d30e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d312:	702b      	strb	r3, [r5, #0]
 800d314:	2e00      	cmp	r6, #0
 800d316:	d078      	beq.n	800d40a <ucdr_serialize_uint64_t+0x14e>
 800d318:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d31c:	2e01      	cmp	r6, #1
 800d31e:	706b      	strb	r3, [r5, #1]
 800d320:	d077      	beq.n	800d412 <ucdr_serialize_uint64_t+0x156>
 800d322:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d326:	2e02      	cmp	r6, #2
 800d328:	70ab      	strb	r3, [r5, #2]
 800d32a:	d076      	beq.n	800d41a <ucdr_serialize_uint64_t+0x15e>
 800d32c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d330:	2e03      	cmp	r6, #3
 800d332:	70eb      	strb	r3, [r5, #3]
 800d334:	d075      	beq.n	800d422 <ucdr_serialize_uint64_t+0x166>
 800d336:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d33a:	2e04      	cmp	r6, #4
 800d33c:	712b      	strb	r3, [r5, #4]
 800d33e:	d074      	beq.n	800d42a <ucdr_serialize_uint64_t+0x16e>
 800d340:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800d344:	2e05      	cmp	r6, #5
 800d346:	716b      	strb	r3, [r5, #5]
 800d348:	d073      	beq.n	800d432 <ucdr_serialize_uint64_t+0x176>
 800d34a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800d34e:	2e06      	cmp	r6, #6
 800d350:	71ab      	strb	r3, [r5, #6]
 800d352:	d072      	beq.n	800d43a <ucdr_serialize_uint64_t+0x17e>
 800d354:	f89d 3000 	ldrb.w	r3, [sp]
 800d358:	71eb      	strb	r3, [r5, #7]
 800d35a:	6923      	ldr	r3, [r4, #16]
 800d35c:	2108      	movs	r1, #8
 800d35e:	68a2      	ldr	r2, [r4, #8]
 800d360:	3308      	adds	r3, #8
 800d362:	7da0      	ldrb	r0, [r4, #22]
 800d364:	4442      	add	r2, r8
 800d366:	7561      	strb	r1, [r4, #21]
 800d368:	1b9e      	subs	r6, r3, r6
 800d36a:	f080 0001 	eor.w	r0, r0, #1
 800d36e:	60a2      	str	r2, [r4, #8]
 800d370:	6126      	str	r6, [r4, #16]
 800d372:	b002      	add	sp, #8
 800d374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d378:	2108      	movs	r1, #8
 800d37a:	4620      	mov	r0, r4
 800d37c:	f000 fd54 	bl	800de28 <ucdr_check_final_buffer_behavior>
 800d380:	b350      	cbz	r0, 800d3d8 <ucdr_serialize_uint64_t+0x11c>
 800d382:	7d23      	ldrb	r3, [r4, #20]
 800d384:	2b01      	cmp	r3, #1
 800d386:	d02d      	beq.n	800d3e4 <ucdr_serialize_uint64_t+0x128>
 800d388:	68a3      	ldr	r3, [r4, #8]
 800d38a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800d38e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d392:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800d396:	7018      	strb	r0, [r3, #0]
 800d398:	68a3      	ldr	r3, [r4, #8]
 800d39a:	705a      	strb	r2, [r3, #1]
 800d39c:	68a3      	ldr	r3, [r4, #8]
 800d39e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d3a2:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800d3a6:	7099      	strb	r1, [r3, #2]
 800d3a8:	68a3      	ldr	r3, [r4, #8]
 800d3aa:	70da      	strb	r2, [r3, #3]
 800d3ac:	68a3      	ldr	r3, [r4, #8]
 800d3ae:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d3b2:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800d3b6:	7118      	strb	r0, [r3, #4]
 800d3b8:	68a3      	ldr	r3, [r4, #8]
 800d3ba:	715a      	strb	r2, [r3, #5]
 800d3bc:	68a3      	ldr	r3, [r4, #8]
 800d3be:	f89d 2000 	ldrb.w	r2, [sp]
 800d3c2:	7199      	strb	r1, [r3, #6]
 800d3c4:	68a3      	ldr	r3, [r4, #8]
 800d3c6:	71da      	strb	r2, [r3, #7]
 800d3c8:	2108      	movs	r1, #8
 800d3ca:	68a2      	ldr	r2, [r4, #8]
 800d3cc:	6923      	ldr	r3, [r4, #16]
 800d3ce:	440a      	add	r2, r1
 800d3d0:	7561      	strb	r1, [r4, #21]
 800d3d2:	440b      	add	r3, r1
 800d3d4:	60a2      	str	r2, [r4, #8]
 800d3d6:	6123      	str	r3, [r4, #16]
 800d3d8:	7da0      	ldrb	r0, [r4, #22]
 800d3da:	f080 0001 	eor.w	r0, r0, #1
 800d3de:	b002      	add	sp, #8
 800d3e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3e4:	466b      	mov	r3, sp
 800d3e6:	68a2      	ldr	r2, [r4, #8]
 800d3e8:	cb03      	ldmia	r3!, {r0, r1}
 800d3ea:	6010      	str	r0, [r2, #0]
 800d3ec:	6051      	str	r1, [r2, #4]
 800d3ee:	e7eb      	b.n	800d3c8 <ucdr_serialize_uint64_t+0x10c>
 800d3f0:	68a2      	ldr	r2, [r4, #8]
 800d3f2:	6923      	ldr	r3, [r4, #16]
 800d3f4:	7da0      	ldrb	r0, [r4, #22]
 800d3f6:	1b92      	subs	r2, r2, r6
 800d3f8:	1b9b      	subs	r3, r3, r6
 800d3fa:	7567      	strb	r7, [r4, #21]
 800d3fc:	f080 0001 	eor.w	r0, r0, #1
 800d400:	60a2      	str	r2, [r4, #8]
 800d402:	6123      	str	r3, [r4, #16]
 800d404:	b002      	add	sp, #8
 800d406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d40a:	68a3      	ldr	r3, [r4, #8]
 800d40c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d410:	701a      	strb	r2, [r3, #0]
 800d412:	68a3      	ldr	r3, [r4, #8]
 800d414:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d418:	701a      	strb	r2, [r3, #0]
 800d41a:	68a3      	ldr	r3, [r4, #8]
 800d41c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d420:	701a      	strb	r2, [r3, #0]
 800d422:	68a3      	ldr	r3, [r4, #8]
 800d424:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d428:	701a      	strb	r2, [r3, #0]
 800d42a:	68a3      	ldr	r3, [r4, #8]
 800d42c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d430:	701a      	strb	r2, [r3, #0]
 800d432:	68a3      	ldr	r3, [r4, #8]
 800d434:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d438:	701a      	strb	r2, [r3, #0]
 800d43a:	68a3      	ldr	r3, [r4, #8]
 800d43c:	f89d 2000 	ldrb.w	r2, [sp]
 800d440:	701a      	strb	r2, [r3, #0]
 800d442:	e78a      	b.n	800d35a <ucdr_serialize_uint64_t+0x9e>
 800d444:	4628      	mov	r0, r5
 800d446:	466d      	mov	r5, sp
 800d448:	4632      	mov	r2, r6
 800d44a:	4629      	mov	r1, r5
 800d44c:	f00c fa67 	bl	801991e <memcpy>
 800d450:	4642      	mov	r2, r8
 800d452:	19a9      	adds	r1, r5, r6
 800d454:	68a0      	ldr	r0, [r4, #8]
 800d456:	f00c fa62 	bl	801991e <memcpy>
 800d45a:	e77e      	b.n	800d35a <ucdr_serialize_uint64_t+0x9e>

0800d45c <ucdr_serialize_int16_t>:
 800d45c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d460:	460b      	mov	r3, r1
 800d462:	b082      	sub	sp, #8
 800d464:	4604      	mov	r4, r0
 800d466:	2102      	movs	r1, #2
 800d468:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d46c:	f000 fd30 	bl	800ded0 <ucdr_buffer_alignment>
 800d470:	4601      	mov	r1, r0
 800d472:	4620      	mov	r0, r4
 800d474:	7d67      	ldrb	r7, [r4, #21]
 800d476:	f000 fd73 	bl	800df60 <ucdr_advance_buffer>
 800d47a:	2102      	movs	r1, #2
 800d47c:	4620      	mov	r0, r4
 800d47e:	f000 fcc7 	bl	800de10 <ucdr_check_buffer_available_for>
 800d482:	bb78      	cbnz	r0, 800d4e4 <ucdr_serialize_int16_t+0x88>
 800d484:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d488:	42ab      	cmp	r3, r5
 800d48a:	d926      	bls.n	800d4da <ucdr_serialize_int16_t+0x7e>
 800d48c:	1b5e      	subs	r6, r3, r5
 800d48e:	60a3      	str	r3, [r4, #8]
 800d490:	6923      	ldr	r3, [r4, #16]
 800d492:	4620      	mov	r0, r4
 800d494:	f1c6 0802 	rsb	r8, r6, #2
 800d498:	4433      	add	r3, r6
 800d49a:	4641      	mov	r1, r8
 800d49c:	6123      	str	r3, [r4, #16]
 800d49e:	f000 fcc3 	bl	800de28 <ucdr_check_final_buffer_behavior>
 800d4a2:	2800      	cmp	r0, #0
 800d4a4:	d03b      	beq.n	800d51e <ucdr_serialize_int16_t+0xc2>
 800d4a6:	7d23      	ldrb	r3, [r4, #20]
 800d4a8:	2b01      	cmp	r3, #1
 800d4aa:	d04a      	beq.n	800d542 <ucdr_serialize_int16_t+0xe6>
 800d4ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d4b0:	702b      	strb	r3, [r5, #0]
 800d4b2:	2e00      	cmp	r6, #0
 800d4b4:	d040      	beq.n	800d538 <ucdr_serialize_int16_t+0xdc>
 800d4b6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d4ba:	706b      	strb	r3, [r5, #1]
 800d4bc:	6923      	ldr	r3, [r4, #16]
 800d4be:	2102      	movs	r1, #2
 800d4c0:	68a2      	ldr	r2, [r4, #8]
 800d4c2:	3302      	adds	r3, #2
 800d4c4:	7da0      	ldrb	r0, [r4, #22]
 800d4c6:	4442      	add	r2, r8
 800d4c8:	7561      	strb	r1, [r4, #21]
 800d4ca:	1b9e      	subs	r6, r3, r6
 800d4cc:	f080 0001 	eor.w	r0, r0, #1
 800d4d0:	60a2      	str	r2, [r4, #8]
 800d4d2:	6126      	str	r6, [r4, #16]
 800d4d4:	b002      	add	sp, #8
 800d4d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4da:	2102      	movs	r1, #2
 800d4dc:	4620      	mov	r0, r4
 800d4de:	f000 fca3 	bl	800de28 <ucdr_check_final_buffer_behavior>
 800d4e2:	b190      	cbz	r0, 800d50a <ucdr_serialize_int16_t+0xae>
 800d4e4:	7d23      	ldrb	r3, [r4, #20]
 800d4e6:	2b01      	cmp	r3, #1
 800d4e8:	68a3      	ldr	r3, [r4, #8]
 800d4ea:	d014      	beq.n	800d516 <ucdr_serialize_int16_t+0xba>
 800d4ec:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800d4f0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d4f4:	7019      	strb	r1, [r3, #0]
 800d4f6:	68a3      	ldr	r3, [r4, #8]
 800d4f8:	705a      	strb	r2, [r3, #1]
 800d4fa:	2102      	movs	r1, #2
 800d4fc:	68a2      	ldr	r2, [r4, #8]
 800d4fe:	6923      	ldr	r3, [r4, #16]
 800d500:	440a      	add	r2, r1
 800d502:	7561      	strb	r1, [r4, #21]
 800d504:	440b      	add	r3, r1
 800d506:	60a2      	str	r2, [r4, #8]
 800d508:	6123      	str	r3, [r4, #16]
 800d50a:	7da0      	ldrb	r0, [r4, #22]
 800d50c:	f080 0001 	eor.w	r0, r0, #1
 800d510:	b002      	add	sp, #8
 800d512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d516:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d51a:	801a      	strh	r2, [r3, #0]
 800d51c:	e7ed      	b.n	800d4fa <ucdr_serialize_int16_t+0x9e>
 800d51e:	68a2      	ldr	r2, [r4, #8]
 800d520:	6923      	ldr	r3, [r4, #16]
 800d522:	7da0      	ldrb	r0, [r4, #22]
 800d524:	1b92      	subs	r2, r2, r6
 800d526:	1b9b      	subs	r3, r3, r6
 800d528:	7567      	strb	r7, [r4, #21]
 800d52a:	f080 0001 	eor.w	r0, r0, #1
 800d52e:	60a2      	str	r2, [r4, #8]
 800d530:	6123      	str	r3, [r4, #16]
 800d532:	b002      	add	sp, #8
 800d534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d538:	68a3      	ldr	r3, [r4, #8]
 800d53a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d53e:	701a      	strb	r2, [r3, #0]
 800d540:	e7bc      	b.n	800d4bc <ucdr_serialize_int16_t+0x60>
 800d542:	4628      	mov	r0, r5
 800d544:	f10d 0506 	add.w	r5, sp, #6
 800d548:	4632      	mov	r2, r6
 800d54a:	4629      	mov	r1, r5
 800d54c:	f00c f9e7 	bl	801991e <memcpy>
 800d550:	4642      	mov	r2, r8
 800d552:	19a9      	adds	r1, r5, r6
 800d554:	68a0      	ldr	r0, [r4, #8]
 800d556:	f00c f9e2 	bl	801991e <memcpy>
 800d55a:	e7af      	b.n	800d4bc <ucdr_serialize_int16_t+0x60>

0800d55c <ucdr_deserialize_int16_t>:
 800d55c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d560:	4604      	mov	r4, r0
 800d562:	460d      	mov	r5, r1
 800d564:	2102      	movs	r1, #2
 800d566:	f000 fcb3 	bl	800ded0 <ucdr_buffer_alignment>
 800d56a:	4601      	mov	r1, r0
 800d56c:	4620      	mov	r0, r4
 800d56e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d572:	f000 fcf5 	bl	800df60 <ucdr_advance_buffer>
 800d576:	2102      	movs	r1, #2
 800d578:	4620      	mov	r0, r4
 800d57a:	f000 fc49 	bl	800de10 <ucdr_check_buffer_available_for>
 800d57e:	bb60      	cbnz	r0, 800d5da <ucdr_deserialize_int16_t+0x7e>
 800d580:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d584:	42be      	cmp	r6, r7
 800d586:	d923      	bls.n	800d5d0 <ucdr_deserialize_int16_t+0x74>
 800d588:	6923      	ldr	r3, [r4, #16]
 800d58a:	4620      	mov	r0, r4
 800d58c:	60a6      	str	r6, [r4, #8]
 800d58e:	1bf6      	subs	r6, r6, r7
 800d590:	4433      	add	r3, r6
 800d592:	f1c6 0902 	rsb	r9, r6, #2
 800d596:	6123      	str	r3, [r4, #16]
 800d598:	4649      	mov	r1, r9
 800d59a:	f000 fc45 	bl	800de28 <ucdr_check_final_buffer_behavior>
 800d59e:	2800      	cmp	r0, #0
 800d5a0:	d034      	beq.n	800d60c <ucdr_deserialize_int16_t+0xb0>
 800d5a2:	7d23      	ldrb	r3, [r4, #20]
 800d5a4:	2b01      	cmp	r3, #1
 800d5a6:	d042      	beq.n	800d62e <ucdr_deserialize_int16_t+0xd2>
 800d5a8:	787b      	ldrb	r3, [r7, #1]
 800d5aa:	702b      	strb	r3, [r5, #0]
 800d5ac:	2e00      	cmp	r6, #0
 800d5ae:	d03a      	beq.n	800d626 <ucdr_deserialize_int16_t+0xca>
 800d5b0:	783b      	ldrb	r3, [r7, #0]
 800d5b2:	706b      	strb	r3, [r5, #1]
 800d5b4:	6923      	ldr	r3, [r4, #16]
 800d5b6:	2102      	movs	r1, #2
 800d5b8:	68a2      	ldr	r2, [r4, #8]
 800d5ba:	3302      	adds	r3, #2
 800d5bc:	7da0      	ldrb	r0, [r4, #22]
 800d5be:	444a      	add	r2, r9
 800d5c0:	7561      	strb	r1, [r4, #21]
 800d5c2:	1b9b      	subs	r3, r3, r6
 800d5c4:	f080 0001 	eor.w	r0, r0, #1
 800d5c8:	60a2      	str	r2, [r4, #8]
 800d5ca:	6123      	str	r3, [r4, #16]
 800d5cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5d0:	2102      	movs	r1, #2
 800d5d2:	4620      	mov	r0, r4
 800d5d4:	f000 fc28 	bl	800de28 <ucdr_check_final_buffer_behavior>
 800d5d8:	b180      	cbz	r0, 800d5fc <ucdr_deserialize_int16_t+0xa0>
 800d5da:	7d23      	ldrb	r3, [r4, #20]
 800d5dc:	2b01      	cmp	r3, #1
 800d5de:	68a3      	ldr	r3, [r4, #8]
 800d5e0:	d011      	beq.n	800d606 <ucdr_deserialize_int16_t+0xaa>
 800d5e2:	785b      	ldrb	r3, [r3, #1]
 800d5e4:	702b      	strb	r3, [r5, #0]
 800d5e6:	68a3      	ldr	r3, [r4, #8]
 800d5e8:	781b      	ldrb	r3, [r3, #0]
 800d5ea:	706b      	strb	r3, [r5, #1]
 800d5ec:	2102      	movs	r1, #2
 800d5ee:	68a2      	ldr	r2, [r4, #8]
 800d5f0:	6923      	ldr	r3, [r4, #16]
 800d5f2:	440a      	add	r2, r1
 800d5f4:	7561      	strb	r1, [r4, #21]
 800d5f6:	440b      	add	r3, r1
 800d5f8:	60a2      	str	r2, [r4, #8]
 800d5fa:	6123      	str	r3, [r4, #16]
 800d5fc:	7da0      	ldrb	r0, [r4, #22]
 800d5fe:	f080 0001 	eor.w	r0, r0, #1
 800d602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d606:	881b      	ldrh	r3, [r3, #0]
 800d608:	802b      	strh	r3, [r5, #0]
 800d60a:	e7ef      	b.n	800d5ec <ucdr_deserialize_int16_t+0x90>
 800d60c:	68a2      	ldr	r2, [r4, #8]
 800d60e:	6923      	ldr	r3, [r4, #16]
 800d610:	1b92      	subs	r2, r2, r6
 800d612:	7da0      	ldrb	r0, [r4, #22]
 800d614:	1b9b      	subs	r3, r3, r6
 800d616:	f884 8015 	strb.w	r8, [r4, #21]
 800d61a:	f080 0001 	eor.w	r0, r0, #1
 800d61e:	60a2      	str	r2, [r4, #8]
 800d620:	6123      	str	r3, [r4, #16]
 800d622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d626:	68a3      	ldr	r3, [r4, #8]
 800d628:	781b      	ldrb	r3, [r3, #0]
 800d62a:	706b      	strb	r3, [r5, #1]
 800d62c:	e7c2      	b.n	800d5b4 <ucdr_deserialize_int16_t+0x58>
 800d62e:	4639      	mov	r1, r7
 800d630:	4632      	mov	r2, r6
 800d632:	4628      	mov	r0, r5
 800d634:	f00c f973 	bl	801991e <memcpy>
 800d638:	464a      	mov	r2, r9
 800d63a:	19a8      	adds	r0, r5, r6
 800d63c:	68a1      	ldr	r1, [r4, #8]
 800d63e:	f00c f96e 	bl	801991e <memcpy>
 800d642:	e7b7      	b.n	800d5b4 <ucdr_deserialize_int16_t+0x58>

0800d644 <ucdr_serialize_int32_t>:
 800d644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d648:	b082      	sub	sp, #8
 800d64a:	4604      	mov	r4, r0
 800d64c:	9101      	str	r1, [sp, #4]
 800d64e:	2104      	movs	r1, #4
 800d650:	f000 fc3e 	bl	800ded0 <ucdr_buffer_alignment>
 800d654:	4601      	mov	r1, r0
 800d656:	4620      	mov	r0, r4
 800d658:	7d67      	ldrb	r7, [r4, #21]
 800d65a:	f000 fc81 	bl	800df60 <ucdr_advance_buffer>
 800d65e:	2104      	movs	r1, #4
 800d660:	4620      	mov	r0, r4
 800d662:	f000 fbd5 	bl	800de10 <ucdr_check_buffer_available_for>
 800d666:	2800      	cmp	r0, #0
 800d668:	d139      	bne.n	800d6de <ucdr_serialize_int32_t+0x9a>
 800d66a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d66e:	42ab      	cmp	r3, r5
 800d670:	d930      	bls.n	800d6d4 <ucdr_serialize_int32_t+0x90>
 800d672:	1b5e      	subs	r6, r3, r5
 800d674:	60a3      	str	r3, [r4, #8]
 800d676:	6923      	ldr	r3, [r4, #16]
 800d678:	4620      	mov	r0, r4
 800d67a:	f1c6 0804 	rsb	r8, r6, #4
 800d67e:	4433      	add	r3, r6
 800d680:	4641      	mov	r1, r8
 800d682:	6123      	str	r3, [r4, #16]
 800d684:	f000 fbd0 	bl	800de28 <ucdr_check_final_buffer_behavior>
 800d688:	2800      	cmp	r0, #0
 800d68a:	d04c      	beq.n	800d726 <ucdr_serialize_int32_t+0xe2>
 800d68c:	7d23      	ldrb	r3, [r4, #20]
 800d68e:	2b01      	cmp	r3, #1
 800d690:	d063      	beq.n	800d75a <ucdr_serialize_int32_t+0x116>
 800d692:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d696:	702b      	strb	r3, [r5, #0]
 800d698:	2e00      	cmp	r6, #0
 800d69a:	d051      	beq.n	800d740 <ucdr_serialize_int32_t+0xfc>
 800d69c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d6a0:	2e01      	cmp	r6, #1
 800d6a2:	706b      	strb	r3, [r5, #1]
 800d6a4:	d050      	beq.n	800d748 <ucdr_serialize_int32_t+0x104>
 800d6a6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d6aa:	2e02      	cmp	r6, #2
 800d6ac:	70ab      	strb	r3, [r5, #2]
 800d6ae:	d04f      	beq.n	800d750 <ucdr_serialize_int32_t+0x10c>
 800d6b0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d6b4:	70eb      	strb	r3, [r5, #3]
 800d6b6:	6923      	ldr	r3, [r4, #16]
 800d6b8:	2104      	movs	r1, #4
 800d6ba:	68a2      	ldr	r2, [r4, #8]
 800d6bc:	3304      	adds	r3, #4
 800d6be:	7da0      	ldrb	r0, [r4, #22]
 800d6c0:	4442      	add	r2, r8
 800d6c2:	7561      	strb	r1, [r4, #21]
 800d6c4:	1b9e      	subs	r6, r3, r6
 800d6c6:	f080 0001 	eor.w	r0, r0, #1
 800d6ca:	60a2      	str	r2, [r4, #8]
 800d6cc:	6126      	str	r6, [r4, #16]
 800d6ce:	b002      	add	sp, #8
 800d6d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6d4:	2104      	movs	r1, #4
 800d6d6:	4620      	mov	r0, r4
 800d6d8:	f000 fba6 	bl	800de28 <ucdr_check_final_buffer_behavior>
 800d6dc:	b1d0      	cbz	r0, 800d714 <ucdr_serialize_int32_t+0xd0>
 800d6de:	7d23      	ldrb	r3, [r4, #20]
 800d6e0:	2b01      	cmp	r3, #1
 800d6e2:	68a3      	ldr	r3, [r4, #8]
 800d6e4:	d01c      	beq.n	800d720 <ucdr_serialize_int32_t+0xdc>
 800d6e6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800d6ea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d6ee:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800d6f2:	7018      	strb	r0, [r3, #0]
 800d6f4:	68a3      	ldr	r3, [r4, #8]
 800d6f6:	705a      	strb	r2, [r3, #1]
 800d6f8:	68a3      	ldr	r3, [r4, #8]
 800d6fa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d6fe:	7099      	strb	r1, [r3, #2]
 800d700:	68a3      	ldr	r3, [r4, #8]
 800d702:	70da      	strb	r2, [r3, #3]
 800d704:	2104      	movs	r1, #4
 800d706:	68a2      	ldr	r2, [r4, #8]
 800d708:	6923      	ldr	r3, [r4, #16]
 800d70a:	440a      	add	r2, r1
 800d70c:	7561      	strb	r1, [r4, #21]
 800d70e:	440b      	add	r3, r1
 800d710:	60a2      	str	r2, [r4, #8]
 800d712:	6123      	str	r3, [r4, #16]
 800d714:	7da0      	ldrb	r0, [r4, #22]
 800d716:	f080 0001 	eor.w	r0, r0, #1
 800d71a:	b002      	add	sp, #8
 800d71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d720:	9a01      	ldr	r2, [sp, #4]
 800d722:	601a      	str	r2, [r3, #0]
 800d724:	e7ee      	b.n	800d704 <ucdr_serialize_int32_t+0xc0>
 800d726:	68a2      	ldr	r2, [r4, #8]
 800d728:	6923      	ldr	r3, [r4, #16]
 800d72a:	7da0      	ldrb	r0, [r4, #22]
 800d72c:	1b92      	subs	r2, r2, r6
 800d72e:	1b9b      	subs	r3, r3, r6
 800d730:	7567      	strb	r7, [r4, #21]
 800d732:	f080 0001 	eor.w	r0, r0, #1
 800d736:	60a2      	str	r2, [r4, #8]
 800d738:	6123      	str	r3, [r4, #16]
 800d73a:	b002      	add	sp, #8
 800d73c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d740:	68a3      	ldr	r3, [r4, #8]
 800d742:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d746:	701a      	strb	r2, [r3, #0]
 800d748:	68a3      	ldr	r3, [r4, #8]
 800d74a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d74e:	701a      	strb	r2, [r3, #0]
 800d750:	68a3      	ldr	r3, [r4, #8]
 800d752:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d756:	701a      	strb	r2, [r3, #0]
 800d758:	e7ad      	b.n	800d6b6 <ucdr_serialize_int32_t+0x72>
 800d75a:	4628      	mov	r0, r5
 800d75c:	ad01      	add	r5, sp, #4
 800d75e:	4632      	mov	r2, r6
 800d760:	4629      	mov	r1, r5
 800d762:	f00c f8dc 	bl	801991e <memcpy>
 800d766:	4642      	mov	r2, r8
 800d768:	19a9      	adds	r1, r5, r6
 800d76a:	68a0      	ldr	r0, [r4, #8]
 800d76c:	f00c f8d7 	bl	801991e <memcpy>
 800d770:	e7a1      	b.n	800d6b6 <ucdr_serialize_int32_t+0x72>
 800d772:	bf00      	nop

0800d774 <ucdr_deserialize_int32_t>:
 800d774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d778:	4604      	mov	r4, r0
 800d77a:	460d      	mov	r5, r1
 800d77c:	2104      	movs	r1, #4
 800d77e:	f000 fba7 	bl	800ded0 <ucdr_buffer_alignment>
 800d782:	4601      	mov	r1, r0
 800d784:	4620      	mov	r0, r4
 800d786:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d78a:	f000 fbe9 	bl	800df60 <ucdr_advance_buffer>
 800d78e:	2104      	movs	r1, #4
 800d790:	4620      	mov	r0, r4
 800d792:	f000 fb3d 	bl	800de10 <ucdr_check_buffer_available_for>
 800d796:	2800      	cmp	r0, #0
 800d798:	d138      	bne.n	800d80c <ucdr_deserialize_int32_t+0x98>
 800d79a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800d79e:	42b7      	cmp	r7, r6
 800d7a0:	d92f      	bls.n	800d802 <ucdr_deserialize_int32_t+0x8e>
 800d7a2:	6923      	ldr	r3, [r4, #16]
 800d7a4:	4620      	mov	r0, r4
 800d7a6:	60a7      	str	r7, [r4, #8]
 800d7a8:	1bbf      	subs	r7, r7, r6
 800d7aa:	443b      	add	r3, r7
 800d7ac:	f1c7 0904 	rsb	r9, r7, #4
 800d7b0:	6123      	str	r3, [r4, #16]
 800d7b2:	4649      	mov	r1, r9
 800d7b4:	f000 fb38 	bl	800de28 <ucdr_check_final_buffer_behavior>
 800d7b8:	2800      	cmp	r0, #0
 800d7ba:	d046      	beq.n	800d84a <ucdr_deserialize_int32_t+0xd6>
 800d7bc:	7d23      	ldrb	r3, [r4, #20]
 800d7be:	2b01      	cmp	r3, #1
 800d7c0:	d05c      	beq.n	800d87c <ucdr_deserialize_int32_t+0x108>
 800d7c2:	78f3      	ldrb	r3, [r6, #3]
 800d7c4:	702b      	strb	r3, [r5, #0]
 800d7c6:	2f00      	cmp	r7, #0
 800d7c8:	d04c      	beq.n	800d864 <ucdr_deserialize_int32_t+0xf0>
 800d7ca:	78b3      	ldrb	r3, [r6, #2]
 800d7cc:	2f01      	cmp	r7, #1
 800d7ce:	706b      	strb	r3, [r5, #1]
 800d7d0:	f105 0302 	add.w	r3, r5, #2
 800d7d4:	d04a      	beq.n	800d86c <ucdr_deserialize_int32_t+0xf8>
 800d7d6:	7873      	ldrb	r3, [r6, #1]
 800d7d8:	2f02      	cmp	r7, #2
 800d7da:	70ab      	strb	r3, [r5, #2]
 800d7dc:	f105 0303 	add.w	r3, r5, #3
 800d7e0:	d048      	beq.n	800d874 <ucdr_deserialize_int32_t+0x100>
 800d7e2:	7833      	ldrb	r3, [r6, #0]
 800d7e4:	70eb      	strb	r3, [r5, #3]
 800d7e6:	6923      	ldr	r3, [r4, #16]
 800d7e8:	2104      	movs	r1, #4
 800d7ea:	68a2      	ldr	r2, [r4, #8]
 800d7ec:	3304      	adds	r3, #4
 800d7ee:	7da0      	ldrb	r0, [r4, #22]
 800d7f0:	444a      	add	r2, r9
 800d7f2:	7561      	strb	r1, [r4, #21]
 800d7f4:	1bdb      	subs	r3, r3, r7
 800d7f6:	f080 0001 	eor.w	r0, r0, #1
 800d7fa:	60a2      	str	r2, [r4, #8]
 800d7fc:	6123      	str	r3, [r4, #16]
 800d7fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d802:	2104      	movs	r1, #4
 800d804:	4620      	mov	r0, r4
 800d806:	f000 fb0f 	bl	800de28 <ucdr_check_final_buffer_behavior>
 800d80a:	b1b0      	cbz	r0, 800d83a <ucdr_deserialize_int32_t+0xc6>
 800d80c:	7d23      	ldrb	r3, [r4, #20]
 800d80e:	2b01      	cmp	r3, #1
 800d810:	68a3      	ldr	r3, [r4, #8]
 800d812:	d017      	beq.n	800d844 <ucdr_deserialize_int32_t+0xd0>
 800d814:	78db      	ldrb	r3, [r3, #3]
 800d816:	702b      	strb	r3, [r5, #0]
 800d818:	68a3      	ldr	r3, [r4, #8]
 800d81a:	789b      	ldrb	r3, [r3, #2]
 800d81c:	706b      	strb	r3, [r5, #1]
 800d81e:	68a3      	ldr	r3, [r4, #8]
 800d820:	785b      	ldrb	r3, [r3, #1]
 800d822:	70ab      	strb	r3, [r5, #2]
 800d824:	68a3      	ldr	r3, [r4, #8]
 800d826:	781b      	ldrb	r3, [r3, #0]
 800d828:	70eb      	strb	r3, [r5, #3]
 800d82a:	2104      	movs	r1, #4
 800d82c:	68a2      	ldr	r2, [r4, #8]
 800d82e:	6923      	ldr	r3, [r4, #16]
 800d830:	440a      	add	r2, r1
 800d832:	7561      	strb	r1, [r4, #21]
 800d834:	440b      	add	r3, r1
 800d836:	60a2      	str	r2, [r4, #8]
 800d838:	6123      	str	r3, [r4, #16]
 800d83a:	7da0      	ldrb	r0, [r4, #22]
 800d83c:	f080 0001 	eor.w	r0, r0, #1
 800d840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	602b      	str	r3, [r5, #0]
 800d848:	e7ef      	b.n	800d82a <ucdr_deserialize_int32_t+0xb6>
 800d84a:	68a2      	ldr	r2, [r4, #8]
 800d84c:	6923      	ldr	r3, [r4, #16]
 800d84e:	1bd2      	subs	r2, r2, r7
 800d850:	7da0      	ldrb	r0, [r4, #22]
 800d852:	1bdb      	subs	r3, r3, r7
 800d854:	f884 8015 	strb.w	r8, [r4, #21]
 800d858:	f080 0001 	eor.w	r0, r0, #1
 800d85c:	60a2      	str	r2, [r4, #8]
 800d85e:	6123      	str	r3, [r4, #16]
 800d860:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d864:	68a3      	ldr	r3, [r4, #8]
 800d866:	789b      	ldrb	r3, [r3, #2]
 800d868:	706b      	strb	r3, [r5, #1]
 800d86a:	1cab      	adds	r3, r5, #2
 800d86c:	68a2      	ldr	r2, [r4, #8]
 800d86e:	7852      	ldrb	r2, [r2, #1]
 800d870:	f803 2b01 	strb.w	r2, [r3], #1
 800d874:	68a2      	ldr	r2, [r4, #8]
 800d876:	7812      	ldrb	r2, [r2, #0]
 800d878:	701a      	strb	r2, [r3, #0]
 800d87a:	e7b4      	b.n	800d7e6 <ucdr_deserialize_int32_t+0x72>
 800d87c:	4631      	mov	r1, r6
 800d87e:	463a      	mov	r2, r7
 800d880:	4628      	mov	r0, r5
 800d882:	f00c f84c 	bl	801991e <memcpy>
 800d886:	464a      	mov	r2, r9
 800d888:	19e8      	adds	r0, r5, r7
 800d88a:	68a1      	ldr	r1, [r4, #8]
 800d88c:	f00c f847 	bl	801991e <memcpy>
 800d890:	e7a9      	b.n	800d7e6 <ucdr_deserialize_int32_t+0x72>
 800d892:	bf00      	nop

0800d894 <ucdr_serialize_int64_t>:
 800d894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d898:	4604      	mov	r4, r0
 800d89a:	b082      	sub	sp, #8
 800d89c:	2108      	movs	r1, #8
 800d89e:	e9cd 2300 	strd	r2, r3, [sp]
 800d8a2:	f000 fb15 	bl	800ded0 <ucdr_buffer_alignment>
 800d8a6:	4601      	mov	r1, r0
 800d8a8:	4620      	mov	r0, r4
 800d8aa:	7d67      	ldrb	r7, [r4, #21]
 800d8ac:	f000 fb58 	bl	800df60 <ucdr_advance_buffer>
 800d8b0:	2108      	movs	r1, #8
 800d8b2:	4620      	mov	r0, r4
 800d8b4:	f000 faac 	bl	800de10 <ucdr_check_buffer_available_for>
 800d8b8:	2800      	cmp	r0, #0
 800d8ba:	d14e      	bne.n	800d95a <ucdr_serialize_int64_t+0xc6>
 800d8bc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d8c0:	42ab      	cmp	r3, r5
 800d8c2:	d945      	bls.n	800d950 <ucdr_serialize_int64_t+0xbc>
 800d8c4:	1b5e      	subs	r6, r3, r5
 800d8c6:	60a3      	str	r3, [r4, #8]
 800d8c8:	6923      	ldr	r3, [r4, #16]
 800d8ca:	4620      	mov	r0, r4
 800d8cc:	f1c6 0808 	rsb	r8, r6, #8
 800d8d0:	4433      	add	r3, r6
 800d8d2:	4641      	mov	r1, r8
 800d8d4:	6123      	str	r3, [r4, #16]
 800d8d6:	f000 faa7 	bl	800de28 <ucdr_check_final_buffer_behavior>
 800d8da:	2800      	cmp	r0, #0
 800d8dc:	d074      	beq.n	800d9c8 <ucdr_serialize_int64_t+0x134>
 800d8de:	7d23      	ldrb	r3, [r4, #20]
 800d8e0:	2b01      	cmp	r3, #1
 800d8e2:	f000 809b 	beq.w	800da1c <ucdr_serialize_int64_t+0x188>
 800d8e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d8ea:	702b      	strb	r3, [r5, #0]
 800d8ec:	2e00      	cmp	r6, #0
 800d8ee:	d078      	beq.n	800d9e2 <ucdr_serialize_int64_t+0x14e>
 800d8f0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d8f4:	2e01      	cmp	r6, #1
 800d8f6:	706b      	strb	r3, [r5, #1]
 800d8f8:	d077      	beq.n	800d9ea <ucdr_serialize_int64_t+0x156>
 800d8fa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d8fe:	2e02      	cmp	r6, #2
 800d900:	70ab      	strb	r3, [r5, #2]
 800d902:	d076      	beq.n	800d9f2 <ucdr_serialize_int64_t+0x15e>
 800d904:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d908:	2e03      	cmp	r6, #3
 800d90a:	70eb      	strb	r3, [r5, #3]
 800d90c:	d075      	beq.n	800d9fa <ucdr_serialize_int64_t+0x166>
 800d90e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d912:	2e04      	cmp	r6, #4
 800d914:	712b      	strb	r3, [r5, #4]
 800d916:	d074      	beq.n	800da02 <ucdr_serialize_int64_t+0x16e>
 800d918:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800d91c:	2e05      	cmp	r6, #5
 800d91e:	716b      	strb	r3, [r5, #5]
 800d920:	d073      	beq.n	800da0a <ucdr_serialize_int64_t+0x176>
 800d922:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800d926:	2e06      	cmp	r6, #6
 800d928:	71ab      	strb	r3, [r5, #6]
 800d92a:	d072      	beq.n	800da12 <ucdr_serialize_int64_t+0x17e>
 800d92c:	f89d 3000 	ldrb.w	r3, [sp]
 800d930:	71eb      	strb	r3, [r5, #7]
 800d932:	6923      	ldr	r3, [r4, #16]
 800d934:	2108      	movs	r1, #8
 800d936:	68a2      	ldr	r2, [r4, #8]
 800d938:	3308      	adds	r3, #8
 800d93a:	7da0      	ldrb	r0, [r4, #22]
 800d93c:	4442      	add	r2, r8
 800d93e:	7561      	strb	r1, [r4, #21]
 800d940:	1b9e      	subs	r6, r3, r6
 800d942:	f080 0001 	eor.w	r0, r0, #1
 800d946:	60a2      	str	r2, [r4, #8]
 800d948:	6126      	str	r6, [r4, #16]
 800d94a:	b002      	add	sp, #8
 800d94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d950:	2108      	movs	r1, #8
 800d952:	4620      	mov	r0, r4
 800d954:	f000 fa68 	bl	800de28 <ucdr_check_final_buffer_behavior>
 800d958:	b350      	cbz	r0, 800d9b0 <ucdr_serialize_int64_t+0x11c>
 800d95a:	7d23      	ldrb	r3, [r4, #20]
 800d95c:	2b01      	cmp	r3, #1
 800d95e:	d02d      	beq.n	800d9bc <ucdr_serialize_int64_t+0x128>
 800d960:	68a3      	ldr	r3, [r4, #8]
 800d962:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800d966:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d96a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800d96e:	7018      	strb	r0, [r3, #0]
 800d970:	68a3      	ldr	r3, [r4, #8]
 800d972:	705a      	strb	r2, [r3, #1]
 800d974:	68a3      	ldr	r3, [r4, #8]
 800d976:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d97a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800d97e:	7099      	strb	r1, [r3, #2]
 800d980:	68a3      	ldr	r3, [r4, #8]
 800d982:	70da      	strb	r2, [r3, #3]
 800d984:	68a3      	ldr	r3, [r4, #8]
 800d986:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d98a:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800d98e:	7118      	strb	r0, [r3, #4]
 800d990:	68a3      	ldr	r3, [r4, #8]
 800d992:	715a      	strb	r2, [r3, #5]
 800d994:	68a3      	ldr	r3, [r4, #8]
 800d996:	f89d 2000 	ldrb.w	r2, [sp]
 800d99a:	7199      	strb	r1, [r3, #6]
 800d99c:	68a3      	ldr	r3, [r4, #8]
 800d99e:	71da      	strb	r2, [r3, #7]
 800d9a0:	2108      	movs	r1, #8
 800d9a2:	68a2      	ldr	r2, [r4, #8]
 800d9a4:	6923      	ldr	r3, [r4, #16]
 800d9a6:	440a      	add	r2, r1
 800d9a8:	7561      	strb	r1, [r4, #21]
 800d9aa:	440b      	add	r3, r1
 800d9ac:	60a2      	str	r2, [r4, #8]
 800d9ae:	6123      	str	r3, [r4, #16]
 800d9b0:	7da0      	ldrb	r0, [r4, #22]
 800d9b2:	f080 0001 	eor.w	r0, r0, #1
 800d9b6:	b002      	add	sp, #8
 800d9b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9bc:	466b      	mov	r3, sp
 800d9be:	68a2      	ldr	r2, [r4, #8]
 800d9c0:	cb03      	ldmia	r3!, {r0, r1}
 800d9c2:	6010      	str	r0, [r2, #0]
 800d9c4:	6051      	str	r1, [r2, #4]
 800d9c6:	e7eb      	b.n	800d9a0 <ucdr_serialize_int64_t+0x10c>
 800d9c8:	68a2      	ldr	r2, [r4, #8]
 800d9ca:	6923      	ldr	r3, [r4, #16]
 800d9cc:	7da0      	ldrb	r0, [r4, #22]
 800d9ce:	1b92      	subs	r2, r2, r6
 800d9d0:	1b9b      	subs	r3, r3, r6
 800d9d2:	7567      	strb	r7, [r4, #21]
 800d9d4:	f080 0001 	eor.w	r0, r0, #1
 800d9d8:	60a2      	str	r2, [r4, #8]
 800d9da:	6123      	str	r3, [r4, #16]
 800d9dc:	b002      	add	sp, #8
 800d9de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9e2:	68a3      	ldr	r3, [r4, #8]
 800d9e4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d9e8:	701a      	strb	r2, [r3, #0]
 800d9ea:	68a3      	ldr	r3, [r4, #8]
 800d9ec:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d9f0:	701a      	strb	r2, [r3, #0]
 800d9f2:	68a3      	ldr	r3, [r4, #8]
 800d9f4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d9f8:	701a      	strb	r2, [r3, #0]
 800d9fa:	68a3      	ldr	r3, [r4, #8]
 800d9fc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800da00:	701a      	strb	r2, [r3, #0]
 800da02:	68a3      	ldr	r3, [r4, #8]
 800da04:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800da08:	701a      	strb	r2, [r3, #0]
 800da0a:	68a3      	ldr	r3, [r4, #8]
 800da0c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800da10:	701a      	strb	r2, [r3, #0]
 800da12:	68a3      	ldr	r3, [r4, #8]
 800da14:	f89d 2000 	ldrb.w	r2, [sp]
 800da18:	701a      	strb	r2, [r3, #0]
 800da1a:	e78a      	b.n	800d932 <ucdr_serialize_int64_t+0x9e>
 800da1c:	4628      	mov	r0, r5
 800da1e:	466d      	mov	r5, sp
 800da20:	4632      	mov	r2, r6
 800da22:	4629      	mov	r1, r5
 800da24:	f00b ff7b 	bl	801991e <memcpy>
 800da28:	4642      	mov	r2, r8
 800da2a:	19a9      	adds	r1, r5, r6
 800da2c:	68a0      	ldr	r0, [r4, #8]
 800da2e:	f00b ff76 	bl	801991e <memcpy>
 800da32:	e77e      	b.n	800d932 <ucdr_serialize_int64_t+0x9e>

0800da34 <ucdr_deserialize_int64_t>:
 800da34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da38:	4604      	mov	r4, r0
 800da3a:	460d      	mov	r5, r1
 800da3c:	2108      	movs	r1, #8
 800da3e:	f000 fa47 	bl	800ded0 <ucdr_buffer_alignment>
 800da42:	4601      	mov	r1, r0
 800da44:	4620      	mov	r0, r4
 800da46:	f894 8015 	ldrb.w	r8, [r4, #21]
 800da4a:	f000 fa89 	bl	800df60 <ucdr_advance_buffer>
 800da4e:	2108      	movs	r1, #8
 800da50:	4620      	mov	r0, r4
 800da52:	f000 f9dd 	bl	800de10 <ucdr_check_buffer_available_for>
 800da56:	2800      	cmp	r0, #0
 800da58:	d151      	bne.n	800dafe <ucdr_deserialize_int64_t+0xca>
 800da5a:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800da5e:	42be      	cmp	r6, r7
 800da60:	d948      	bls.n	800daf4 <ucdr_deserialize_int64_t+0xc0>
 800da62:	6923      	ldr	r3, [r4, #16]
 800da64:	4620      	mov	r0, r4
 800da66:	60a6      	str	r6, [r4, #8]
 800da68:	1bf6      	subs	r6, r6, r7
 800da6a:	4433      	add	r3, r6
 800da6c:	f1c6 0908 	rsb	r9, r6, #8
 800da70:	6123      	str	r3, [r4, #16]
 800da72:	4649      	mov	r1, r9
 800da74:	f000 f9d8 	bl	800de28 <ucdr_check_final_buffer_behavior>
 800da78:	2800      	cmp	r0, #0
 800da7a:	d06d      	beq.n	800db58 <ucdr_deserialize_int64_t+0x124>
 800da7c:	7d23      	ldrb	r3, [r4, #20]
 800da7e:	2b01      	cmp	r3, #1
 800da80:	f000 8093 	beq.w	800dbaa <ucdr_deserialize_int64_t+0x176>
 800da84:	79fb      	ldrb	r3, [r7, #7]
 800da86:	702b      	strb	r3, [r5, #0]
 800da88:	2e00      	cmp	r6, #0
 800da8a:	d072      	beq.n	800db72 <ucdr_deserialize_int64_t+0x13e>
 800da8c:	79bb      	ldrb	r3, [r7, #6]
 800da8e:	2e01      	cmp	r6, #1
 800da90:	706b      	strb	r3, [r5, #1]
 800da92:	f105 0302 	add.w	r3, r5, #2
 800da96:	d070      	beq.n	800db7a <ucdr_deserialize_int64_t+0x146>
 800da98:	797b      	ldrb	r3, [r7, #5]
 800da9a:	2e02      	cmp	r6, #2
 800da9c:	70ab      	strb	r3, [r5, #2]
 800da9e:	f105 0303 	add.w	r3, r5, #3
 800daa2:	d06e      	beq.n	800db82 <ucdr_deserialize_int64_t+0x14e>
 800daa4:	793b      	ldrb	r3, [r7, #4]
 800daa6:	2e03      	cmp	r6, #3
 800daa8:	70eb      	strb	r3, [r5, #3]
 800daaa:	f105 0304 	add.w	r3, r5, #4
 800daae:	d06c      	beq.n	800db8a <ucdr_deserialize_int64_t+0x156>
 800dab0:	78fb      	ldrb	r3, [r7, #3]
 800dab2:	2e04      	cmp	r6, #4
 800dab4:	712b      	strb	r3, [r5, #4]
 800dab6:	f105 0305 	add.w	r3, r5, #5
 800daba:	d06a      	beq.n	800db92 <ucdr_deserialize_int64_t+0x15e>
 800dabc:	78bb      	ldrb	r3, [r7, #2]
 800dabe:	2e05      	cmp	r6, #5
 800dac0:	716b      	strb	r3, [r5, #5]
 800dac2:	f105 0306 	add.w	r3, r5, #6
 800dac6:	d068      	beq.n	800db9a <ucdr_deserialize_int64_t+0x166>
 800dac8:	787b      	ldrb	r3, [r7, #1]
 800daca:	2e06      	cmp	r6, #6
 800dacc:	71ab      	strb	r3, [r5, #6]
 800dace:	f105 0307 	add.w	r3, r5, #7
 800dad2:	d066      	beq.n	800dba2 <ucdr_deserialize_int64_t+0x16e>
 800dad4:	783b      	ldrb	r3, [r7, #0]
 800dad6:	71eb      	strb	r3, [r5, #7]
 800dad8:	6923      	ldr	r3, [r4, #16]
 800dada:	2108      	movs	r1, #8
 800dadc:	68a2      	ldr	r2, [r4, #8]
 800dade:	3308      	adds	r3, #8
 800dae0:	7da0      	ldrb	r0, [r4, #22]
 800dae2:	444a      	add	r2, r9
 800dae4:	7561      	strb	r1, [r4, #21]
 800dae6:	1b9e      	subs	r6, r3, r6
 800dae8:	f080 0001 	eor.w	r0, r0, #1
 800daec:	60a2      	str	r2, [r4, #8]
 800daee:	6126      	str	r6, [r4, #16]
 800daf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800daf4:	2108      	movs	r1, #8
 800daf6:	4620      	mov	r0, r4
 800daf8:	f000 f996 	bl	800de28 <ucdr_check_final_buffer_behavior>
 800dafc:	b310      	cbz	r0, 800db44 <ucdr_deserialize_int64_t+0x110>
 800dafe:	7d23      	ldrb	r3, [r4, #20]
 800db00:	2b01      	cmp	r3, #1
 800db02:	68a3      	ldr	r3, [r4, #8]
 800db04:	d023      	beq.n	800db4e <ucdr_deserialize_int64_t+0x11a>
 800db06:	79db      	ldrb	r3, [r3, #7]
 800db08:	702b      	strb	r3, [r5, #0]
 800db0a:	68a3      	ldr	r3, [r4, #8]
 800db0c:	799b      	ldrb	r3, [r3, #6]
 800db0e:	706b      	strb	r3, [r5, #1]
 800db10:	68a3      	ldr	r3, [r4, #8]
 800db12:	795b      	ldrb	r3, [r3, #5]
 800db14:	70ab      	strb	r3, [r5, #2]
 800db16:	68a3      	ldr	r3, [r4, #8]
 800db18:	791b      	ldrb	r3, [r3, #4]
 800db1a:	70eb      	strb	r3, [r5, #3]
 800db1c:	68a3      	ldr	r3, [r4, #8]
 800db1e:	78db      	ldrb	r3, [r3, #3]
 800db20:	712b      	strb	r3, [r5, #4]
 800db22:	68a3      	ldr	r3, [r4, #8]
 800db24:	789b      	ldrb	r3, [r3, #2]
 800db26:	716b      	strb	r3, [r5, #5]
 800db28:	68a3      	ldr	r3, [r4, #8]
 800db2a:	785b      	ldrb	r3, [r3, #1]
 800db2c:	71ab      	strb	r3, [r5, #6]
 800db2e:	68a3      	ldr	r3, [r4, #8]
 800db30:	781b      	ldrb	r3, [r3, #0]
 800db32:	71eb      	strb	r3, [r5, #7]
 800db34:	2108      	movs	r1, #8
 800db36:	68a2      	ldr	r2, [r4, #8]
 800db38:	6923      	ldr	r3, [r4, #16]
 800db3a:	440a      	add	r2, r1
 800db3c:	7561      	strb	r1, [r4, #21]
 800db3e:	440b      	add	r3, r1
 800db40:	60a2      	str	r2, [r4, #8]
 800db42:	6123      	str	r3, [r4, #16]
 800db44:	7da0      	ldrb	r0, [r4, #22]
 800db46:	f080 0001 	eor.w	r0, r0, #1
 800db4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db4e:	681a      	ldr	r2, [r3, #0]
 800db50:	685b      	ldr	r3, [r3, #4]
 800db52:	602a      	str	r2, [r5, #0]
 800db54:	606b      	str	r3, [r5, #4]
 800db56:	e7ed      	b.n	800db34 <ucdr_deserialize_int64_t+0x100>
 800db58:	68a2      	ldr	r2, [r4, #8]
 800db5a:	6923      	ldr	r3, [r4, #16]
 800db5c:	1b92      	subs	r2, r2, r6
 800db5e:	7da0      	ldrb	r0, [r4, #22]
 800db60:	1b9b      	subs	r3, r3, r6
 800db62:	f884 8015 	strb.w	r8, [r4, #21]
 800db66:	f080 0001 	eor.w	r0, r0, #1
 800db6a:	60a2      	str	r2, [r4, #8]
 800db6c:	6123      	str	r3, [r4, #16]
 800db6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db72:	68a3      	ldr	r3, [r4, #8]
 800db74:	799b      	ldrb	r3, [r3, #6]
 800db76:	706b      	strb	r3, [r5, #1]
 800db78:	1cab      	adds	r3, r5, #2
 800db7a:	68a2      	ldr	r2, [r4, #8]
 800db7c:	7952      	ldrb	r2, [r2, #5]
 800db7e:	f803 2b01 	strb.w	r2, [r3], #1
 800db82:	68a2      	ldr	r2, [r4, #8]
 800db84:	7912      	ldrb	r2, [r2, #4]
 800db86:	f803 2b01 	strb.w	r2, [r3], #1
 800db8a:	68a2      	ldr	r2, [r4, #8]
 800db8c:	78d2      	ldrb	r2, [r2, #3]
 800db8e:	f803 2b01 	strb.w	r2, [r3], #1
 800db92:	68a2      	ldr	r2, [r4, #8]
 800db94:	7892      	ldrb	r2, [r2, #2]
 800db96:	f803 2b01 	strb.w	r2, [r3], #1
 800db9a:	68a2      	ldr	r2, [r4, #8]
 800db9c:	7852      	ldrb	r2, [r2, #1]
 800db9e:	f803 2b01 	strb.w	r2, [r3], #1
 800dba2:	68a2      	ldr	r2, [r4, #8]
 800dba4:	7812      	ldrb	r2, [r2, #0]
 800dba6:	701a      	strb	r2, [r3, #0]
 800dba8:	e796      	b.n	800dad8 <ucdr_deserialize_int64_t+0xa4>
 800dbaa:	4639      	mov	r1, r7
 800dbac:	4632      	mov	r2, r6
 800dbae:	4628      	mov	r0, r5
 800dbb0:	f00b feb5 	bl	801991e <memcpy>
 800dbb4:	464a      	mov	r2, r9
 800dbb6:	19a8      	adds	r0, r5, r6
 800dbb8:	68a1      	ldr	r1, [r4, #8]
 800dbba:	f00b feb0 	bl	801991e <memcpy>
 800dbbe:	e78b      	b.n	800dad8 <ucdr_deserialize_int64_t+0xa4>

0800dbc0 <ucdr_serialize_float>:
 800dbc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbc4:	4604      	mov	r4, r0
 800dbc6:	b082      	sub	sp, #8
 800dbc8:	2104      	movs	r1, #4
 800dbca:	ed8d 0a01 	vstr	s0, [sp, #4]
 800dbce:	f000 f97f 	bl	800ded0 <ucdr_buffer_alignment>
 800dbd2:	4601      	mov	r1, r0
 800dbd4:	4620      	mov	r0, r4
 800dbd6:	7d67      	ldrb	r7, [r4, #21]
 800dbd8:	f000 f9c2 	bl	800df60 <ucdr_advance_buffer>
 800dbdc:	2104      	movs	r1, #4
 800dbde:	4620      	mov	r0, r4
 800dbe0:	f000 f916 	bl	800de10 <ucdr_check_buffer_available_for>
 800dbe4:	2800      	cmp	r0, #0
 800dbe6:	d139      	bne.n	800dc5c <ucdr_serialize_float+0x9c>
 800dbe8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800dbec:	42ab      	cmp	r3, r5
 800dbee:	d930      	bls.n	800dc52 <ucdr_serialize_float+0x92>
 800dbf0:	1b5e      	subs	r6, r3, r5
 800dbf2:	60a3      	str	r3, [r4, #8]
 800dbf4:	6923      	ldr	r3, [r4, #16]
 800dbf6:	4620      	mov	r0, r4
 800dbf8:	f1c6 0804 	rsb	r8, r6, #4
 800dbfc:	4433      	add	r3, r6
 800dbfe:	4641      	mov	r1, r8
 800dc00:	6123      	str	r3, [r4, #16]
 800dc02:	f000 f911 	bl	800de28 <ucdr_check_final_buffer_behavior>
 800dc06:	2800      	cmp	r0, #0
 800dc08:	d04c      	beq.n	800dca4 <ucdr_serialize_float+0xe4>
 800dc0a:	7d23      	ldrb	r3, [r4, #20]
 800dc0c:	2b01      	cmp	r3, #1
 800dc0e:	d063      	beq.n	800dcd8 <ucdr_serialize_float+0x118>
 800dc10:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dc14:	702b      	strb	r3, [r5, #0]
 800dc16:	2e00      	cmp	r6, #0
 800dc18:	d051      	beq.n	800dcbe <ucdr_serialize_float+0xfe>
 800dc1a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dc1e:	2e01      	cmp	r6, #1
 800dc20:	706b      	strb	r3, [r5, #1]
 800dc22:	d050      	beq.n	800dcc6 <ucdr_serialize_float+0x106>
 800dc24:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800dc28:	2e02      	cmp	r6, #2
 800dc2a:	70ab      	strb	r3, [r5, #2]
 800dc2c:	d04f      	beq.n	800dcce <ucdr_serialize_float+0x10e>
 800dc2e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800dc32:	70eb      	strb	r3, [r5, #3]
 800dc34:	6923      	ldr	r3, [r4, #16]
 800dc36:	2104      	movs	r1, #4
 800dc38:	68a2      	ldr	r2, [r4, #8]
 800dc3a:	3304      	adds	r3, #4
 800dc3c:	7da0      	ldrb	r0, [r4, #22]
 800dc3e:	4442      	add	r2, r8
 800dc40:	7561      	strb	r1, [r4, #21]
 800dc42:	1b9e      	subs	r6, r3, r6
 800dc44:	f080 0001 	eor.w	r0, r0, #1
 800dc48:	60a2      	str	r2, [r4, #8]
 800dc4a:	6126      	str	r6, [r4, #16]
 800dc4c:	b002      	add	sp, #8
 800dc4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc52:	2104      	movs	r1, #4
 800dc54:	4620      	mov	r0, r4
 800dc56:	f000 f8e7 	bl	800de28 <ucdr_check_final_buffer_behavior>
 800dc5a:	b1d0      	cbz	r0, 800dc92 <ucdr_serialize_float+0xd2>
 800dc5c:	7d23      	ldrb	r3, [r4, #20]
 800dc5e:	2b01      	cmp	r3, #1
 800dc60:	68a3      	ldr	r3, [r4, #8]
 800dc62:	d01c      	beq.n	800dc9e <ucdr_serialize_float+0xde>
 800dc64:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800dc68:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dc6c:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800dc70:	7018      	strb	r0, [r3, #0]
 800dc72:	68a3      	ldr	r3, [r4, #8]
 800dc74:	705a      	strb	r2, [r3, #1]
 800dc76:	68a3      	ldr	r3, [r4, #8]
 800dc78:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dc7c:	7099      	strb	r1, [r3, #2]
 800dc7e:	68a3      	ldr	r3, [r4, #8]
 800dc80:	70da      	strb	r2, [r3, #3]
 800dc82:	2104      	movs	r1, #4
 800dc84:	68a2      	ldr	r2, [r4, #8]
 800dc86:	6923      	ldr	r3, [r4, #16]
 800dc88:	440a      	add	r2, r1
 800dc8a:	7561      	strb	r1, [r4, #21]
 800dc8c:	440b      	add	r3, r1
 800dc8e:	60a2      	str	r2, [r4, #8]
 800dc90:	6123      	str	r3, [r4, #16]
 800dc92:	7da0      	ldrb	r0, [r4, #22]
 800dc94:	f080 0001 	eor.w	r0, r0, #1
 800dc98:	b002      	add	sp, #8
 800dc9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc9e:	9a01      	ldr	r2, [sp, #4]
 800dca0:	601a      	str	r2, [r3, #0]
 800dca2:	e7ee      	b.n	800dc82 <ucdr_serialize_float+0xc2>
 800dca4:	68a2      	ldr	r2, [r4, #8]
 800dca6:	6923      	ldr	r3, [r4, #16]
 800dca8:	7da0      	ldrb	r0, [r4, #22]
 800dcaa:	1b92      	subs	r2, r2, r6
 800dcac:	1b9b      	subs	r3, r3, r6
 800dcae:	7567      	strb	r7, [r4, #21]
 800dcb0:	f080 0001 	eor.w	r0, r0, #1
 800dcb4:	60a2      	str	r2, [r4, #8]
 800dcb6:	6123      	str	r3, [r4, #16]
 800dcb8:	b002      	add	sp, #8
 800dcba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcbe:	68a3      	ldr	r3, [r4, #8]
 800dcc0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dcc4:	701a      	strb	r2, [r3, #0]
 800dcc6:	68a3      	ldr	r3, [r4, #8]
 800dcc8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800dccc:	701a      	strb	r2, [r3, #0]
 800dcce:	68a3      	ldr	r3, [r4, #8]
 800dcd0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dcd4:	701a      	strb	r2, [r3, #0]
 800dcd6:	e7ad      	b.n	800dc34 <ucdr_serialize_float+0x74>
 800dcd8:	4628      	mov	r0, r5
 800dcda:	ad01      	add	r5, sp, #4
 800dcdc:	4632      	mov	r2, r6
 800dcde:	4629      	mov	r1, r5
 800dce0:	f00b fe1d 	bl	801991e <memcpy>
 800dce4:	4642      	mov	r2, r8
 800dce6:	19a9      	adds	r1, r5, r6
 800dce8:	68a0      	ldr	r0, [r4, #8]
 800dcea:	f00b fe18 	bl	801991e <memcpy>
 800dcee:	e7a1      	b.n	800dc34 <ucdr_serialize_float+0x74>

0800dcf0 <ucdr_deserialize_float>:
 800dcf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dcf4:	4604      	mov	r4, r0
 800dcf6:	460d      	mov	r5, r1
 800dcf8:	2104      	movs	r1, #4
 800dcfa:	f000 f8e9 	bl	800ded0 <ucdr_buffer_alignment>
 800dcfe:	4601      	mov	r1, r0
 800dd00:	4620      	mov	r0, r4
 800dd02:	f894 8015 	ldrb.w	r8, [r4, #21]
 800dd06:	f000 f92b 	bl	800df60 <ucdr_advance_buffer>
 800dd0a:	2104      	movs	r1, #4
 800dd0c:	4620      	mov	r0, r4
 800dd0e:	f000 f87f 	bl	800de10 <ucdr_check_buffer_available_for>
 800dd12:	2800      	cmp	r0, #0
 800dd14:	d138      	bne.n	800dd88 <ucdr_deserialize_float+0x98>
 800dd16:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800dd1a:	42b7      	cmp	r7, r6
 800dd1c:	d92f      	bls.n	800dd7e <ucdr_deserialize_float+0x8e>
 800dd1e:	6923      	ldr	r3, [r4, #16]
 800dd20:	4620      	mov	r0, r4
 800dd22:	60a7      	str	r7, [r4, #8]
 800dd24:	1bbf      	subs	r7, r7, r6
 800dd26:	443b      	add	r3, r7
 800dd28:	f1c7 0904 	rsb	r9, r7, #4
 800dd2c:	6123      	str	r3, [r4, #16]
 800dd2e:	4649      	mov	r1, r9
 800dd30:	f000 f87a 	bl	800de28 <ucdr_check_final_buffer_behavior>
 800dd34:	2800      	cmp	r0, #0
 800dd36:	d046      	beq.n	800ddc6 <ucdr_deserialize_float+0xd6>
 800dd38:	7d23      	ldrb	r3, [r4, #20]
 800dd3a:	2b01      	cmp	r3, #1
 800dd3c:	d05c      	beq.n	800ddf8 <ucdr_deserialize_float+0x108>
 800dd3e:	78f3      	ldrb	r3, [r6, #3]
 800dd40:	702b      	strb	r3, [r5, #0]
 800dd42:	2f00      	cmp	r7, #0
 800dd44:	d04c      	beq.n	800dde0 <ucdr_deserialize_float+0xf0>
 800dd46:	78b3      	ldrb	r3, [r6, #2]
 800dd48:	2f01      	cmp	r7, #1
 800dd4a:	706b      	strb	r3, [r5, #1]
 800dd4c:	f105 0302 	add.w	r3, r5, #2
 800dd50:	d04a      	beq.n	800dde8 <ucdr_deserialize_float+0xf8>
 800dd52:	7873      	ldrb	r3, [r6, #1]
 800dd54:	2f02      	cmp	r7, #2
 800dd56:	70ab      	strb	r3, [r5, #2]
 800dd58:	f105 0303 	add.w	r3, r5, #3
 800dd5c:	d048      	beq.n	800ddf0 <ucdr_deserialize_float+0x100>
 800dd5e:	7833      	ldrb	r3, [r6, #0]
 800dd60:	70eb      	strb	r3, [r5, #3]
 800dd62:	6923      	ldr	r3, [r4, #16]
 800dd64:	2104      	movs	r1, #4
 800dd66:	68a2      	ldr	r2, [r4, #8]
 800dd68:	3304      	adds	r3, #4
 800dd6a:	7da0      	ldrb	r0, [r4, #22]
 800dd6c:	444a      	add	r2, r9
 800dd6e:	7561      	strb	r1, [r4, #21]
 800dd70:	1bdb      	subs	r3, r3, r7
 800dd72:	f080 0001 	eor.w	r0, r0, #1
 800dd76:	60a2      	str	r2, [r4, #8]
 800dd78:	6123      	str	r3, [r4, #16]
 800dd7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd7e:	2104      	movs	r1, #4
 800dd80:	4620      	mov	r0, r4
 800dd82:	f000 f851 	bl	800de28 <ucdr_check_final_buffer_behavior>
 800dd86:	b1b0      	cbz	r0, 800ddb6 <ucdr_deserialize_float+0xc6>
 800dd88:	7d23      	ldrb	r3, [r4, #20]
 800dd8a:	2b01      	cmp	r3, #1
 800dd8c:	68a3      	ldr	r3, [r4, #8]
 800dd8e:	d017      	beq.n	800ddc0 <ucdr_deserialize_float+0xd0>
 800dd90:	78db      	ldrb	r3, [r3, #3]
 800dd92:	702b      	strb	r3, [r5, #0]
 800dd94:	68a3      	ldr	r3, [r4, #8]
 800dd96:	789b      	ldrb	r3, [r3, #2]
 800dd98:	706b      	strb	r3, [r5, #1]
 800dd9a:	68a3      	ldr	r3, [r4, #8]
 800dd9c:	785b      	ldrb	r3, [r3, #1]
 800dd9e:	70ab      	strb	r3, [r5, #2]
 800dda0:	68a3      	ldr	r3, [r4, #8]
 800dda2:	781b      	ldrb	r3, [r3, #0]
 800dda4:	70eb      	strb	r3, [r5, #3]
 800dda6:	2104      	movs	r1, #4
 800dda8:	68a2      	ldr	r2, [r4, #8]
 800ddaa:	6923      	ldr	r3, [r4, #16]
 800ddac:	440a      	add	r2, r1
 800ddae:	7561      	strb	r1, [r4, #21]
 800ddb0:	440b      	add	r3, r1
 800ddb2:	60a2      	str	r2, [r4, #8]
 800ddb4:	6123      	str	r3, [r4, #16]
 800ddb6:	7da0      	ldrb	r0, [r4, #22]
 800ddb8:	f080 0001 	eor.w	r0, r0, #1
 800ddbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	602b      	str	r3, [r5, #0]
 800ddc4:	e7ef      	b.n	800dda6 <ucdr_deserialize_float+0xb6>
 800ddc6:	68a2      	ldr	r2, [r4, #8]
 800ddc8:	6923      	ldr	r3, [r4, #16]
 800ddca:	1bd2      	subs	r2, r2, r7
 800ddcc:	7da0      	ldrb	r0, [r4, #22]
 800ddce:	1bdb      	subs	r3, r3, r7
 800ddd0:	f884 8015 	strb.w	r8, [r4, #21]
 800ddd4:	f080 0001 	eor.w	r0, r0, #1
 800ddd8:	60a2      	str	r2, [r4, #8]
 800ddda:	6123      	str	r3, [r4, #16]
 800dddc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dde0:	68a3      	ldr	r3, [r4, #8]
 800dde2:	789b      	ldrb	r3, [r3, #2]
 800dde4:	706b      	strb	r3, [r5, #1]
 800dde6:	1cab      	adds	r3, r5, #2
 800dde8:	68a2      	ldr	r2, [r4, #8]
 800ddea:	7852      	ldrb	r2, [r2, #1]
 800ddec:	f803 2b01 	strb.w	r2, [r3], #1
 800ddf0:	68a2      	ldr	r2, [r4, #8]
 800ddf2:	7812      	ldrb	r2, [r2, #0]
 800ddf4:	701a      	strb	r2, [r3, #0]
 800ddf6:	e7b4      	b.n	800dd62 <ucdr_deserialize_float+0x72>
 800ddf8:	4631      	mov	r1, r6
 800ddfa:	463a      	mov	r2, r7
 800ddfc:	4628      	mov	r0, r5
 800ddfe:	f00b fd8e 	bl	801991e <memcpy>
 800de02:	464a      	mov	r2, r9
 800de04:	19e8      	adds	r0, r5, r7
 800de06:	68a1      	ldr	r1, [r4, #8]
 800de08:	f00b fd89 	bl	801991e <memcpy>
 800de0c:	e7a9      	b.n	800dd62 <ucdr_deserialize_float+0x72>
 800de0e:	bf00      	nop

0800de10 <ucdr_check_buffer_available_for>:
 800de10:	7d83      	ldrb	r3, [r0, #22]
 800de12:	b93b      	cbnz	r3, 800de24 <ucdr_check_buffer_available_for+0x14>
 800de14:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800de18:	4419      	add	r1, r3
 800de1a:	4288      	cmp	r0, r1
 800de1c:	bf34      	ite	cc
 800de1e:	2000      	movcc	r0, #0
 800de20:	2001      	movcs	r0, #1
 800de22:	4770      	bx	lr
 800de24:	2000      	movs	r0, #0
 800de26:	4770      	bx	lr

0800de28 <ucdr_check_final_buffer_behavior>:
 800de28:	7d83      	ldrb	r3, [r0, #22]
 800de2a:	b943      	cbnz	r3, 800de3e <ucdr_check_final_buffer_behavior+0x16>
 800de2c:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800de30:	b510      	push	{r4, lr}
 800de32:	4291      	cmp	r1, r2
 800de34:	4604      	mov	r4, r0
 800de36:	d205      	bcs.n	800de44 <ucdr_check_final_buffer_behavior+0x1c>
 800de38:	2301      	movs	r3, #1
 800de3a:	4618      	mov	r0, r3
 800de3c:	bd10      	pop	{r4, pc}
 800de3e:	2300      	movs	r3, #0
 800de40:	4618      	mov	r0, r3
 800de42:	4770      	bx	lr
 800de44:	6982      	ldr	r2, [r0, #24]
 800de46:	b13a      	cbz	r2, 800de58 <ucdr_check_final_buffer_behavior+0x30>
 800de48:	69c1      	ldr	r1, [r0, #28]
 800de4a:	4790      	blx	r2
 800de4c:	f080 0301 	eor.w	r3, r0, #1
 800de50:	75a0      	strb	r0, [r4, #22]
 800de52:	b2db      	uxtb	r3, r3
 800de54:	4618      	mov	r0, r3
 800de56:	bd10      	pop	{r4, pc}
 800de58:	2001      	movs	r0, #1
 800de5a:	75a0      	strb	r0, [r4, #22]
 800de5c:	e7fa      	b.n	800de54 <ucdr_check_final_buffer_behavior+0x2c>
 800de5e:	bf00      	nop

0800de60 <ucdr_set_on_full_buffer_callback>:
 800de60:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800de64:	4770      	bx	lr
 800de66:	bf00      	nop

0800de68 <ucdr_init_buffer_origin_offset_endian>:
 800de68:	b410      	push	{r4}
 800de6a:	9c01      	ldr	r4, [sp, #4]
 800de6c:	440a      	add	r2, r1
 800de6e:	6001      	str	r1, [r0, #0]
 800de70:	6042      	str	r2, [r0, #4]
 800de72:	190a      	adds	r2, r1, r4
 800de74:	441c      	add	r4, r3
 800de76:	6082      	str	r2, [r0, #8]
 800de78:	2200      	movs	r2, #0
 800de7a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800de7e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800de82:	7542      	strb	r2, [r0, #21]
 800de84:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de88:	7582      	strb	r2, [r0, #22]
 800de8a:	7503      	strb	r3, [r0, #20]
 800de8c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800de90:	4770      	bx	lr
 800de92:	bf00      	nop

0800de94 <ucdr_init_buffer_origin_offset>:
 800de94:	b510      	push	{r4, lr}
 800de96:	b082      	sub	sp, #8
 800de98:	9c04      	ldr	r4, [sp, #16]
 800de9a:	9400      	str	r4, [sp, #0]
 800de9c:	2401      	movs	r4, #1
 800de9e:	9401      	str	r4, [sp, #4]
 800dea0:	f7ff ffe2 	bl	800de68 <ucdr_init_buffer_origin_offset_endian>
 800dea4:	b002      	add	sp, #8
 800dea6:	bd10      	pop	{r4, pc}

0800dea8 <ucdr_init_buffer_origin>:
 800dea8:	b510      	push	{r4, lr}
 800deaa:	2400      	movs	r4, #0
 800deac:	b082      	sub	sp, #8
 800deae:	9400      	str	r4, [sp, #0]
 800deb0:	f7ff fff0 	bl	800de94 <ucdr_init_buffer_origin_offset>
 800deb4:	b002      	add	sp, #8
 800deb6:	bd10      	pop	{r4, pc}

0800deb8 <ucdr_init_buffer>:
 800deb8:	2300      	movs	r3, #0
 800deba:	f7ff bff5 	b.w	800dea8 <ucdr_init_buffer_origin>
 800debe:	bf00      	nop

0800dec0 <ucdr_alignment>:
 800dec0:	fbb0 f2f1 	udiv	r2, r0, r1
 800dec4:	fb02 0011 	mls	r0, r2, r1, r0
 800dec8:	1e4b      	subs	r3, r1, #1
 800deca:	1a08      	subs	r0, r1, r0
 800decc:	4018      	ands	r0, r3
 800dece:	4770      	bx	lr

0800ded0 <ucdr_buffer_alignment>:
 800ded0:	7d43      	ldrb	r3, [r0, #21]
 800ded2:	428b      	cmp	r3, r1
 800ded4:	d209      	bcs.n	800deea <ucdr_buffer_alignment+0x1a>
 800ded6:	6903      	ldr	r3, [r0, #16]
 800ded8:	1e4a      	subs	r2, r1, #1
 800deda:	fbb3 f0f1 	udiv	r0, r3, r1
 800dede:	fb01 3010 	mls	r0, r1, r0, r3
 800dee2:	1a09      	subs	r1, r1, r0
 800dee4:	ea01 0002 	and.w	r0, r1, r2
 800dee8:	4770      	bx	lr
 800deea:	2000      	movs	r0, #0
 800deec:	4770      	bx	lr
 800deee:	bf00      	nop

0800def0 <ucdr_align_to>:
 800def0:	b538      	push	{r3, r4, r5, lr}
 800def2:	4604      	mov	r4, r0
 800def4:	460d      	mov	r5, r1
 800def6:	f7ff ffeb 	bl	800ded0 <ucdr_buffer_alignment>
 800defa:	68a3      	ldr	r3, [r4, #8]
 800defc:	7565      	strb	r5, [r4, #21]
 800defe:	181a      	adds	r2, r3, r0
 800df00:	6923      	ldr	r3, [r4, #16]
 800df02:	4418      	add	r0, r3
 800df04:	6863      	ldr	r3, [r4, #4]
 800df06:	4293      	cmp	r3, r2
 800df08:	6120      	str	r0, [r4, #16]
 800df0a:	bf28      	it	cs
 800df0c:	4613      	movcs	r3, r2
 800df0e:	60a3      	str	r3, [r4, #8]
 800df10:	bd38      	pop	{r3, r4, r5, pc}
 800df12:	bf00      	nop

0800df14 <ucdr_buffer_length>:
 800df14:	6882      	ldr	r2, [r0, #8]
 800df16:	6800      	ldr	r0, [r0, #0]
 800df18:	1a10      	subs	r0, r2, r0
 800df1a:	4770      	bx	lr

0800df1c <ucdr_buffer_remaining>:
 800df1c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800df20:	1a10      	subs	r0, r2, r0
 800df22:	4770      	bx	lr

0800df24 <ucdr_check_final_buffer_behavior_array>:
 800df24:	b538      	push	{r3, r4, r5, lr}
 800df26:	7d83      	ldrb	r3, [r0, #22]
 800df28:	b9a3      	cbnz	r3, 800df54 <ucdr_check_final_buffer_behavior_array+0x30>
 800df2a:	4604      	mov	r4, r0
 800df2c:	460d      	mov	r5, r1
 800df2e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800df32:	429a      	cmp	r2, r3
 800df34:	d300      	bcc.n	800df38 <ucdr_check_final_buffer_behavior_array+0x14>
 800df36:	b931      	cbnz	r1, 800df46 <ucdr_check_final_buffer_behavior_array+0x22>
 800df38:	4620      	mov	r0, r4
 800df3a:	f7ff ffef 	bl	800df1c <ucdr_buffer_remaining>
 800df3e:	42a8      	cmp	r0, r5
 800df40:	bf28      	it	cs
 800df42:	4628      	movcs	r0, r5
 800df44:	bd38      	pop	{r3, r4, r5, pc}
 800df46:	6983      	ldr	r3, [r0, #24]
 800df48:	b133      	cbz	r3, 800df58 <ucdr_check_final_buffer_behavior_array+0x34>
 800df4a:	69c1      	ldr	r1, [r0, #28]
 800df4c:	4798      	blx	r3
 800df4e:	75a0      	strb	r0, [r4, #22]
 800df50:	2800      	cmp	r0, #0
 800df52:	d0f1      	beq.n	800df38 <ucdr_check_final_buffer_behavior_array+0x14>
 800df54:	2000      	movs	r0, #0
 800df56:	bd38      	pop	{r3, r4, r5, pc}
 800df58:	2301      	movs	r3, #1
 800df5a:	7583      	strb	r3, [r0, #22]
 800df5c:	e7fa      	b.n	800df54 <ucdr_check_final_buffer_behavior_array+0x30>
 800df5e:	bf00      	nop

0800df60 <ucdr_advance_buffer>:
 800df60:	b538      	push	{r3, r4, r5, lr}
 800df62:	4604      	mov	r4, r0
 800df64:	460d      	mov	r5, r1
 800df66:	f7ff ff53 	bl	800de10 <ucdr_check_buffer_available_for>
 800df6a:	b178      	cbz	r0, 800df8c <ucdr_advance_buffer+0x2c>
 800df6c:	6923      	ldr	r3, [r4, #16]
 800df6e:	68a2      	ldr	r2, [r4, #8]
 800df70:	442b      	add	r3, r5
 800df72:	442a      	add	r2, r5
 800df74:	6123      	str	r3, [r4, #16]
 800df76:	2301      	movs	r3, #1
 800df78:	60a2      	str	r2, [r4, #8]
 800df7a:	7563      	strb	r3, [r4, #21]
 800df7c:	bd38      	pop	{r3, r4, r5, pc}
 800df7e:	68a2      	ldr	r2, [r4, #8]
 800df80:	1a2d      	subs	r5, r5, r0
 800df82:	6923      	ldr	r3, [r4, #16]
 800df84:	4402      	add	r2, r0
 800df86:	4418      	add	r0, r3
 800df88:	60a2      	str	r2, [r4, #8]
 800df8a:	6120      	str	r0, [r4, #16]
 800df8c:	4629      	mov	r1, r5
 800df8e:	2201      	movs	r2, #1
 800df90:	4620      	mov	r0, r4
 800df92:	f7ff ffc7 	bl	800df24 <ucdr_check_final_buffer_behavior_array>
 800df96:	2800      	cmp	r0, #0
 800df98:	d1f1      	bne.n	800df7e <ucdr_advance_buffer+0x1e>
 800df9a:	2301      	movs	r3, #1
 800df9c:	7563      	strb	r3, [r4, #21]
 800df9e:	bd38      	pop	{r3, r4, r5, pc}

0800dfa0 <ucdr_serialize_sequence_char>:
 800dfa0:	b570      	push	{r4, r5, r6, lr}
 800dfa2:	4615      	mov	r5, r2
 800dfa4:	460e      	mov	r6, r1
 800dfa6:	7d01      	ldrb	r1, [r0, #20]
 800dfa8:	4604      	mov	r4, r0
 800dfaa:	f7fe ffc9 	bl	800cf40 <ucdr_serialize_endian_uint32_t>
 800dfae:	b90d      	cbnz	r5, 800dfb4 <ucdr_serialize_sequence_char+0x14>
 800dfb0:	2001      	movs	r0, #1
 800dfb2:	bd70      	pop	{r4, r5, r6, pc}
 800dfb4:	462b      	mov	r3, r5
 800dfb6:	4632      	mov	r2, r6
 800dfb8:	7d21      	ldrb	r1, [r4, #20]
 800dfba:	4620      	mov	r0, r4
 800dfbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dfc0:	f7fe bbb0 	b.w	800c724 <ucdr_serialize_endian_array_char>

0800dfc4 <ucdr_deserialize_sequence_char>:
 800dfc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfc8:	461d      	mov	r5, r3
 800dfca:	4616      	mov	r6, r2
 800dfcc:	460f      	mov	r7, r1
 800dfce:	461a      	mov	r2, r3
 800dfd0:	7d01      	ldrb	r1, [r0, #20]
 800dfd2:	4604      	mov	r4, r0
 800dfd4:	f7ff f8dc 	bl	800d190 <ucdr_deserialize_endian_uint32_t>
 800dfd8:	682b      	ldr	r3, [r5, #0]
 800dfda:	429e      	cmp	r6, r3
 800dfdc:	d201      	bcs.n	800dfe2 <ucdr_deserialize_sequence_char+0x1e>
 800dfde:	2201      	movs	r2, #1
 800dfe0:	75a2      	strb	r2, [r4, #22]
 800dfe2:	b913      	cbnz	r3, 800dfea <ucdr_deserialize_sequence_char+0x26>
 800dfe4:	2001      	movs	r0, #1
 800dfe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfea:	463a      	mov	r2, r7
 800dfec:	7d21      	ldrb	r1, [r4, #20]
 800dfee:	4620      	mov	r0, r4
 800dff0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dff4:	f7fe bbc8 	b.w	800c788 <ucdr_deserialize_endian_array_char>

0800dff8 <ucdr_serialize_sequence_uint8_t>:
 800dff8:	b570      	push	{r4, r5, r6, lr}
 800dffa:	4615      	mov	r5, r2
 800dffc:	460e      	mov	r6, r1
 800dffe:	7d01      	ldrb	r1, [r0, #20]
 800e000:	4604      	mov	r4, r0
 800e002:	f7fe ff9d 	bl	800cf40 <ucdr_serialize_endian_uint32_t>
 800e006:	b90d      	cbnz	r5, 800e00c <ucdr_serialize_sequence_uint8_t+0x14>
 800e008:	2001      	movs	r0, #1
 800e00a:	bd70      	pop	{r4, r5, r6, pc}
 800e00c:	462b      	mov	r3, r5
 800e00e:	4632      	mov	r2, r6
 800e010:	7d21      	ldrb	r1, [r4, #20]
 800e012:	4620      	mov	r0, r4
 800e014:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e018:	f7fe bc1c 	b.w	800c854 <ucdr_serialize_endian_array_uint8_t>

0800e01c <ucdr_deserialize_sequence_uint8_t>:
 800e01c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e020:	461d      	mov	r5, r3
 800e022:	4616      	mov	r6, r2
 800e024:	460f      	mov	r7, r1
 800e026:	461a      	mov	r2, r3
 800e028:	7d01      	ldrb	r1, [r0, #20]
 800e02a:	4604      	mov	r4, r0
 800e02c:	f7ff f8b0 	bl	800d190 <ucdr_deserialize_endian_uint32_t>
 800e030:	682b      	ldr	r3, [r5, #0]
 800e032:	429e      	cmp	r6, r3
 800e034:	d201      	bcs.n	800e03a <ucdr_deserialize_sequence_uint8_t+0x1e>
 800e036:	2201      	movs	r2, #1
 800e038:	75a2      	strb	r2, [r4, #22]
 800e03a:	b913      	cbnz	r3, 800e042 <ucdr_deserialize_sequence_uint8_t+0x26>
 800e03c:	2001      	movs	r0, #1
 800e03e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e042:	463a      	mov	r2, r7
 800e044:	7d21      	ldrb	r1, [r4, #20]
 800e046:	4620      	mov	r0, r4
 800e048:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e04c:	f7fe bc68 	b.w	800c920 <ucdr_deserialize_endian_array_uint8_t>

0800e050 <racs_services__srv__Control_Event__get_type_description.part.0>:
 800e050:	b510      	push	{r4, lr}
 800e052:	2000      	movs	r0, #0
 800e054:	4c13      	ldr	r4, [pc, #76]	; (800e0a4 <racs_services__srv__Control_Event__get_type_description.part.0+0x54>)
 800e056:	f006 f81b 	bl	8014090 <builtin_interfaces__msg__Time__get_type_description>
 800e05a:	300c      	adds	r0, #12
 800e05c:	4b12      	ldr	r3, [pc, #72]	; (800e0a8 <racs_services__srv__Control_Event__get_type_description.part.0+0x58>)
 800e05e:	c807      	ldmia	r0, {r0, r1, r2}
 800e060:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e064:	7823      	ldrb	r3, [r4, #0]
 800e066:	b90b      	cbnz	r3, 800e06c <racs_services__srv__Control_Event__get_type_description.part.0+0x1c>
 800e068:	2301      	movs	r3, #1
 800e06a:	7023      	strb	r3, [r4, #0]
 800e06c:	4a0f      	ldr	r2, [pc, #60]	; (800e0ac <racs_services__srv__Control_Event__get_type_description.part.0+0x5c>)
 800e06e:	4b10      	ldr	r3, [pc, #64]	; (800e0b0 <racs_services__srv__Control_Event__get_type_description.part.0+0x60>)
 800e070:	4c10      	ldr	r4, [pc, #64]	; (800e0b4 <racs_services__srv__Control_Event__get_type_description.part.0+0x64>)
 800e072:	ca07      	ldmia	r2, {r0, r1, r2}
 800e074:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e078:	7823      	ldrb	r3, [r4, #0]
 800e07a:	b90b      	cbnz	r3, 800e080 <racs_services__srv__Control_Event__get_type_description.part.0+0x30>
 800e07c:	2301      	movs	r3, #1
 800e07e:	7023      	strb	r3, [r4, #0]
 800e080:	4b0d      	ldr	r3, [pc, #52]	; (800e0b8 <racs_services__srv__Control_Event__get_type_description.part.0+0x68>)
 800e082:	4c0e      	ldr	r4, [pc, #56]	; (800e0bc <racs_services__srv__Control_Event__get_type_description.part.0+0x6c>)
 800e084:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e088:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e08c:	2000      	movs	r0, #0
 800e08e:	3418      	adds	r4, #24
 800e090:	f005 ff9e 	bl	8013fd0 <service_msgs__msg__ServiceEventInfo__get_type_description>
 800e094:	300c      	adds	r0, #12
 800e096:	4b0a      	ldr	r3, [pc, #40]	; (800e0c0 <racs_services__srv__Control_Event__get_type_description.part.0+0x70>)
 800e098:	c807      	ldmia	r0, {r0, r1, r2}
 800e09a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e09e:	2201      	movs	r2, #1
 800e0a0:	701a      	strb	r2, [r3, #0]
 800e0a2:	bd10      	pop	{r4, pc}
 800e0a4:	2000b96c 	.word	0x2000b96c
 800e0a8:	20000d38 	.word	0x20000d38
 800e0ac:	0801b29c 	.word	0x0801b29c
 800e0b0:	20000d50 	.word	0x20000d50
 800e0b4:	2000b96a 	.word	0x2000b96a
 800e0b8:	0801b278 	.word	0x0801b278
 800e0bc:	20000d68 	.word	0x20000d68
 800e0c0:	2000b969 	.word	0x2000b969

0800e0c4 <racs_services__srv__Control__get_type_hash>:
 800e0c4:	4800      	ldr	r0, [pc, #0]	; (800e0c8 <racs_services__srv__Control__get_type_hash+0x4>)
 800e0c6:	4770      	bx	lr
 800e0c8:	20000c04 	.word	0x20000c04

0800e0cc <racs_services__srv__Control_Request__get_type_hash>:
 800e0cc:	4800      	ldr	r0, [pc, #0]	; (800e0d0 <racs_services__srv__Control_Request__get_type_hash+0x4>)
 800e0ce:	4770      	bx	lr
 800e0d0:	20000be0 	.word	0x20000be0

0800e0d4 <racs_services__srv__Control_Response__get_type_hash>:
 800e0d4:	4800      	ldr	r0, [pc, #0]	; (800e0d8 <racs_services__srv__Control_Response__get_type_hash+0x4>)
 800e0d6:	4770      	bx	lr
 800e0d8:	20000bbc 	.word	0x20000bbc

0800e0dc <racs_services__srv__Control_Event__get_type_hash>:
 800e0dc:	4800      	ldr	r0, [pc, #0]	; (800e0e0 <racs_services__srv__Control_Event__get_type_hash+0x4>)
 800e0de:	4770      	bx	lr
 800e0e0:	20000b98 	.word	0x20000b98

0800e0e4 <racs_services__srv__Control__get_type_description>:
 800e0e4:	b538      	push	{r3, r4, r5, lr}
 800e0e6:	4d1c      	ldr	r5, [pc, #112]	; (800e158 <racs_services__srv__Control__get_type_description+0x74>)
 800e0e8:	7828      	ldrb	r0, [r5, #0]
 800e0ea:	b108      	cbz	r0, 800e0f0 <racs_services__srv__Control__get_type_description+0xc>
 800e0ec:	481b      	ldr	r0, [pc, #108]	; (800e15c <racs_services__srv__Control__get_type_description+0x78>)
 800e0ee:	bd38      	pop	{r3, r4, r5, pc}
 800e0f0:	f005 ffce 	bl	8014090 <builtin_interfaces__msg__Time__get_type_description>
 800e0f4:	300c      	adds	r0, #12
 800e0f6:	4b1a      	ldr	r3, [pc, #104]	; (800e160 <racs_services__srv__Control__get_type_description+0x7c>)
 800e0f8:	c807      	ldmia	r0, {r0, r1, r2}
 800e0fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e0fe:	4b19      	ldr	r3, [pc, #100]	; (800e164 <racs_services__srv__Control__get_type_description+0x80>)
 800e100:	781b      	ldrb	r3, [r3, #0]
 800e102:	b32b      	cbz	r3, 800e150 <racs_services__srv__Control__get_type_description+0x6c>
 800e104:	4a18      	ldr	r2, [pc, #96]	; (800e168 <racs_services__srv__Control__get_type_description+0x84>)
 800e106:	4b19      	ldr	r3, [pc, #100]	; (800e16c <racs_services__srv__Control__get_type_description+0x88>)
 800e108:	4c19      	ldr	r4, [pc, #100]	; (800e170 <racs_services__srv__Control__get_type_description+0x8c>)
 800e10a:	ca07      	ldmia	r2, {r0, r1, r2}
 800e10c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e110:	7823      	ldrb	r3, [r4, #0]
 800e112:	b90b      	cbnz	r3, 800e118 <racs_services__srv__Control__get_type_description+0x34>
 800e114:	2301      	movs	r3, #1
 800e116:	7023      	strb	r3, [r4, #0]
 800e118:	4a16      	ldr	r2, [pc, #88]	; (800e174 <racs_services__srv__Control__get_type_description+0x90>)
 800e11a:	4b17      	ldr	r3, [pc, #92]	; (800e178 <racs_services__srv__Control__get_type_description+0x94>)
 800e11c:	4c17      	ldr	r4, [pc, #92]	; (800e17c <racs_services__srv__Control__get_type_description+0x98>)
 800e11e:	ca07      	ldmia	r2, {r0, r1, r2}
 800e120:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e124:	7823      	ldrb	r3, [r4, #0]
 800e126:	b90b      	cbnz	r3, 800e12c <racs_services__srv__Control__get_type_description+0x48>
 800e128:	2301      	movs	r3, #1
 800e12a:	7023      	strb	r3, [r4, #0]
 800e12c:	4b14      	ldr	r3, [pc, #80]	; (800e180 <racs_services__srv__Control__get_type_description+0x9c>)
 800e12e:	4c15      	ldr	r4, [pc, #84]	; (800e184 <racs_services__srv__Control__get_type_description+0xa0>)
 800e130:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e134:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e138:	2000      	movs	r0, #0
 800e13a:	3418      	adds	r4, #24
 800e13c:	f005 ff48 	bl	8013fd0 <service_msgs__msg__ServiceEventInfo__get_type_description>
 800e140:	300c      	adds	r0, #12
 800e142:	2301      	movs	r3, #1
 800e144:	c807      	ldmia	r0, {r0, r1, r2}
 800e146:	702b      	strb	r3, [r5, #0]
 800e148:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e14c:	4803      	ldr	r0, [pc, #12]	; (800e15c <racs_services__srv__Control__get_type_description+0x78>)
 800e14e:	bd38      	pop	{r3, r4, r5, pc}
 800e150:	f7ff ff7e 	bl	800e050 <racs_services__srv__Control_Event__get_type_description.part.0>
 800e154:	e7d6      	b.n	800e104 <racs_services__srv__Control__get_type_description+0x20>
 800e156:	bf00      	nop
 800e158:	2000b96d 	.word	0x2000b96d
 800e15c:	0801b2b4 	.word	0x0801b2b4
 800e160:	20001200 	.word	0x20001200
 800e164:	2000b969 	.word	0x2000b969
 800e168:	0801b254 	.word	0x0801b254
 800e16c:	20001218 	.word	0x20001218
 800e170:	2000b96c 	.word	0x2000b96c
 800e174:	0801b29c 	.word	0x0801b29c
 800e178:	20001230 	.word	0x20001230
 800e17c:	2000b96a 	.word	0x2000b96a
 800e180:	0801b278 	.word	0x0801b278
 800e184:	20001248 	.word	0x20001248

0800e188 <racs_services__srv__Control_Request__get_type_description>:
 800e188:	4b03      	ldr	r3, [pc, #12]	; (800e198 <racs_services__srv__Control_Request__get_type_description+0x10>)
 800e18a:	781a      	ldrb	r2, [r3, #0]
 800e18c:	b90a      	cbnz	r2, 800e192 <racs_services__srv__Control_Request__get_type_description+0xa>
 800e18e:	2201      	movs	r2, #1
 800e190:	701a      	strb	r2, [r3, #0]
 800e192:	4802      	ldr	r0, [pc, #8]	; (800e19c <racs_services__srv__Control_Request__get_type_description+0x14>)
 800e194:	4770      	bx	lr
 800e196:	bf00      	nop
 800e198:	2000b96c 	.word	0x2000b96c
 800e19c:	0801b290 	.word	0x0801b290

0800e1a0 <racs_services__srv__Control_Response__get_type_description>:
 800e1a0:	4b03      	ldr	r3, [pc, #12]	; (800e1b0 <racs_services__srv__Control_Response__get_type_description+0x10>)
 800e1a2:	781a      	ldrb	r2, [r3, #0]
 800e1a4:	b90a      	cbnz	r2, 800e1aa <racs_services__srv__Control_Response__get_type_description+0xa>
 800e1a6:	2201      	movs	r2, #1
 800e1a8:	701a      	strb	r2, [r3, #0]
 800e1aa:	4802      	ldr	r0, [pc, #8]	; (800e1b4 <racs_services__srv__Control_Response__get_type_description+0x14>)
 800e1ac:	4770      	bx	lr
 800e1ae:	bf00      	nop
 800e1b0:	2000b96a 	.word	0x2000b96a
 800e1b4:	0801b26c 	.word	0x0801b26c

0800e1b8 <racs_services__srv__Control_Event__get_type_description>:
 800e1b8:	b508      	push	{r3, lr}
 800e1ba:	4b04      	ldr	r3, [pc, #16]	; (800e1cc <racs_services__srv__Control_Event__get_type_description+0x14>)
 800e1bc:	781b      	ldrb	r3, [r3, #0]
 800e1be:	b10b      	cbz	r3, 800e1c4 <racs_services__srv__Control_Event__get_type_description+0xc>
 800e1c0:	4803      	ldr	r0, [pc, #12]	; (800e1d0 <racs_services__srv__Control_Event__get_type_description+0x18>)
 800e1c2:	bd08      	pop	{r3, pc}
 800e1c4:	f7ff ff44 	bl	800e050 <racs_services__srv__Control_Event__get_type_description.part.0>
 800e1c8:	4801      	ldr	r0, [pc, #4]	; (800e1d0 <racs_services__srv__Control_Event__get_type_description+0x18>)
 800e1ca:	bd08      	pop	{r3, pc}
 800e1cc:	2000b969 	.word	0x2000b969
 800e1d0:	0801b248 	.word	0x0801b248

0800e1d4 <racs_services__srv__Control__get_type_description_sources>:
 800e1d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1d8:	4b2c      	ldr	r3, [pc, #176]	; (800e28c <racs_services__srv__Control__get_type_description_sources+0xb8>)
 800e1da:	f893 9000 	ldrb.w	r9, [r3]
 800e1de:	f1b9 0f00 	cmp.w	r9, #0
 800e1e2:	d002      	beq.n	800e1ea <racs_services__srv__Control__get_type_description_sources+0x16>
 800e1e4:	482a      	ldr	r0, [pc, #168]	; (800e290 <racs_services__srv__Control__get_type_description_sources+0xbc>)
 800e1e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1ea:	4d2a      	ldr	r5, [pc, #168]	; (800e294 <racs_services__srv__Control__get_type_description_sources+0xc0>)
 800e1ec:	4c2a      	ldr	r4, [pc, #168]	; (800e298 <racs_services__srv__Control__get_type_description_sources+0xc4>)
 800e1ee:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 800e2a0 <racs_services__srv__Control__get_type_description_sources+0xcc>
 800e1f2:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800e2a4 <racs_services__srv__Control__get_type_description_sources+0xd0>
 800e1f6:	4e29      	ldr	r6, [pc, #164]	; (800e29c <racs_services__srv__Control__get_type_description_sources+0xc8>)
 800e1f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e1fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e1fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e1fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e200:	682b      	ldr	r3, [r5, #0]
 800e202:	4625      	mov	r5, r4
 800e204:	4648      	mov	r0, r9
 800e206:	f104 0a28 	add.w	sl, r4, #40	; 0x28
 800e20a:	f845 3b04 	str.w	r3, [r5], #4
 800e20e:	f104 074c 	add.w	r7, r4, #76	; 0x4c
 800e212:	f005 ff49 	bl	80140a8 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 800e216:	4684      	mov	ip, r0
 800e218:	f104 0e70 	add.w	lr, r4, #112	; 0x70
 800e21c:	3494      	adds	r4, #148	; 0x94
 800e21e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e222:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e224:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e228:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e22a:	f8dc 3000 	ldr.w	r3, [ip]
 800e22e:	602b      	str	r3, [r5, #0]
 800e230:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 800e234:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 800e238:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 800e23c:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 800e240:	f8db 3000 	ldr.w	r3, [fp]
 800e244:	f8ca 3000 	str.w	r3, [sl]
 800e248:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800e24c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e24e:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800e252:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e254:	f8d8 3000 	ldr.w	r3, [r8]
 800e258:	603b      	str	r3, [r7, #0]
 800e25a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e25c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e260:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e262:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e266:	6833      	ldr	r3, [r6, #0]
 800e268:	4648      	mov	r0, r9
 800e26a:	f8ce 3000 	str.w	r3, [lr]
 800e26e:	f005 fec7 	bl	8014000 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 800e272:	2301      	movs	r3, #1
 800e274:	4a05      	ldr	r2, [pc, #20]	; (800e28c <racs_services__srv__Control__get_type_description_sources+0xb8>)
 800e276:	4605      	mov	r5, r0
 800e278:	7013      	strb	r3, [r2, #0]
 800e27a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e27c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e27e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e280:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e282:	682b      	ldr	r3, [r5, #0]
 800e284:	4802      	ldr	r0, [pc, #8]	; (800e290 <racs_services__srv__Control__get_type_description_sources+0xbc>)
 800e286:	6023      	str	r3, [r4, #0]
 800e288:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e28c:	2000b968 	.word	0x2000b968
 800e290:	0801b38c 	.word	0x0801b38c
 800e294:	0801b344 	.word	0x0801b344
 800e298:	2000ba24 	.word	0x2000ba24
 800e29c:	0801b2fc 	.word	0x0801b2fc
 800e2a0:	0801b2d8 	.word	0x0801b2d8
 800e2a4:	0801b320 	.word	0x0801b320

0800e2a8 <racs_services__srv__Control_Request__get_type_description_sources>:
 800e2a8:	4b09      	ldr	r3, [pc, #36]	; (800e2d0 <racs_services__srv__Control_Request__get_type_description_sources+0x28>)
 800e2aa:	781a      	ldrb	r2, [r3, #0]
 800e2ac:	b96a      	cbnz	r2, 800e2ca <racs_services__srv__Control_Request__get_type_description_sources+0x22>
 800e2ae:	2201      	movs	r2, #1
 800e2b0:	b430      	push	{r4, r5}
 800e2b2:	4d08      	ldr	r5, [pc, #32]	; (800e2d4 <racs_services__srv__Control_Request__get_type_description_sources+0x2c>)
 800e2b4:	4c08      	ldr	r4, [pc, #32]	; (800e2d8 <racs_services__srv__Control_Request__get_type_description_sources+0x30>)
 800e2b6:	701a      	strb	r2, [r3, #0]
 800e2b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e2ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e2bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e2be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e2c0:	682b      	ldr	r3, [r5, #0]
 800e2c2:	4806      	ldr	r0, [pc, #24]	; (800e2dc <racs_services__srv__Control_Request__get_type_description_sources+0x34>)
 800e2c4:	6023      	str	r3, [r4, #0]
 800e2c6:	bc30      	pop	{r4, r5}
 800e2c8:	4770      	bx	lr
 800e2ca:	4804      	ldr	r0, [pc, #16]	; (800e2dc <racs_services__srv__Control_Request__get_type_description_sources+0x34>)
 800e2cc:	4770      	bx	lr
 800e2ce:	bf00      	nop
 800e2d0:	2000b96f 	.word	0x2000b96f
 800e2d4:	0801b320 	.word	0x0801b320
 800e2d8:	2000bb20 	.word	0x2000bb20
 800e2dc:	0801b380 	.word	0x0801b380

0800e2e0 <racs_services__srv__Control_Response__get_type_description_sources>:
 800e2e0:	4b09      	ldr	r3, [pc, #36]	; (800e308 <racs_services__srv__Control_Response__get_type_description_sources+0x28>)
 800e2e2:	781a      	ldrb	r2, [r3, #0]
 800e2e4:	b96a      	cbnz	r2, 800e302 <racs_services__srv__Control_Response__get_type_description_sources+0x22>
 800e2e6:	2201      	movs	r2, #1
 800e2e8:	b430      	push	{r4, r5}
 800e2ea:	4d08      	ldr	r5, [pc, #32]	; (800e30c <racs_services__srv__Control_Response__get_type_description_sources+0x2c>)
 800e2ec:	4c08      	ldr	r4, [pc, #32]	; (800e310 <racs_services__srv__Control_Response__get_type_description_sources+0x30>)
 800e2ee:	701a      	strb	r2, [r3, #0]
 800e2f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e2f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e2f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e2f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e2f8:	682b      	ldr	r3, [r5, #0]
 800e2fa:	4806      	ldr	r0, [pc, #24]	; (800e314 <racs_services__srv__Control_Response__get_type_description_sources+0x34>)
 800e2fc:	6023      	str	r3, [r4, #0]
 800e2fe:	bc30      	pop	{r4, r5}
 800e300:	4770      	bx	lr
 800e302:	4804      	ldr	r0, [pc, #16]	; (800e314 <racs_services__srv__Control_Response__get_type_description_sources+0x34>)
 800e304:	4770      	bx	lr
 800e306:	bf00      	nop
 800e308:	2000b96e 	.word	0x2000b96e
 800e30c:	0801b2fc 	.word	0x0801b2fc
 800e310:	2000bafc 	.word	0x2000bafc
 800e314:	0801b374 	.word	0x0801b374

0800e318 <racs_services__srv__Control_Event__get_type_description_sources>:
 800e318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e31c:	4e27      	ldr	r6, [pc, #156]	; (800e3bc <racs_services__srv__Control_Event__get_type_description_sources+0xa4>)
 800e31e:	f896 8000 	ldrb.w	r8, [r6]
 800e322:	f1b8 0f00 	cmp.w	r8, #0
 800e326:	d002      	beq.n	800e32e <racs_services__srv__Control_Event__get_type_description_sources+0x16>
 800e328:	4825      	ldr	r0, [pc, #148]	; (800e3c0 <racs_services__srv__Control_Event__get_type_description_sources+0xa8>)
 800e32a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e32e:	4d25      	ldr	r5, [pc, #148]	; (800e3c4 <racs_services__srv__Control_Event__get_type_description_sources+0xac>)
 800e330:	4c25      	ldr	r4, [pc, #148]	; (800e3c8 <racs_services__srv__Control_Event__get_type_description_sources+0xb0>)
 800e332:	f8df a09c 	ldr.w	sl, [pc, #156]	; 800e3d0 <racs_services__srv__Control_Event__get_type_description_sources+0xb8>
 800e336:	4f25      	ldr	r7, [pc, #148]	; (800e3cc <racs_services__srv__Control_Event__get_type_description_sources+0xb4>)
 800e338:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e33a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e33c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e33e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e340:	682b      	ldr	r3, [r5, #0]
 800e342:	4625      	mov	r5, r4
 800e344:	4640      	mov	r0, r8
 800e346:	f104 0928 	add.w	r9, r4, #40	; 0x28
 800e34a:	f845 3b04 	str.w	r3, [r5], #4
 800e34e:	f005 feab 	bl	80140a8 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 800e352:	4684      	mov	ip, r0
 800e354:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 800e358:	3470      	adds	r4, #112	; 0x70
 800e35a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e35e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e360:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e364:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e366:	f8dc 3000 	ldr.w	r3, [ip]
 800e36a:	602b      	str	r3, [r5, #0]
 800e36c:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 800e370:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 800e374:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 800e378:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 800e37c:	f8da 3000 	ldr.w	r3, [sl]
 800e380:	f8c9 3000 	str.w	r3, [r9]
 800e384:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e386:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e38a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e38c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e390:	683b      	ldr	r3, [r7, #0]
 800e392:	4640      	mov	r0, r8
 800e394:	f8ce 3000 	str.w	r3, [lr]
 800e398:	f005 fe32 	bl	8014000 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 800e39c:	2301      	movs	r3, #1
 800e39e:	4684      	mov	ip, r0
 800e3a0:	7033      	strb	r3, [r6, #0]
 800e3a2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e3a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e3a8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e3ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e3ae:	f8dc 3000 	ldr.w	r3, [ip]
 800e3b2:	4803      	ldr	r0, [pc, #12]	; (800e3c0 <racs_services__srv__Control_Event__get_type_description_sources+0xa8>)
 800e3b4:	6023      	str	r3, [r4, #0]
 800e3b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3ba:	bf00      	nop
 800e3bc:	2000b96b 	.word	0x2000b96b
 800e3c0:	0801b368 	.word	0x0801b368
 800e3c4:	0801b2d8 	.word	0x0801b2d8
 800e3c8:	2000b970 	.word	0x2000b970
 800e3cc:	0801b2fc 	.word	0x0801b2fc
 800e3d0:	0801b320 	.word	0x0801b320

0800e3d4 <racs_services__srv__Control_Request__Sequence__init.part.0>:
 800e3d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3d8:	b086      	sub	sp, #24
 800e3da:	460f      	mov	r7, r1
 800e3dc:	4680      	mov	r8, r0
 800e3de:	a801      	add	r0, sp, #4
 800e3e0:	f7fd febc 	bl	800c15c <rcutils_get_default_allocator>
 800e3e4:	b367      	cbz	r7, 800e440 <racs_services__srv__Control_Request__Sequence__init.part.0+0x6c>
 800e3e6:	2110      	movs	r1, #16
 800e3e8:	4638      	mov	r0, r7
 800e3ea:	e9dd 3a04 	ldrd	r3, sl, [sp, #16]
 800e3ee:	4652      	mov	r2, sl
 800e3f0:	4798      	blx	r3
 800e3f2:	4681      	mov	r9, r0
 800e3f4:	b370      	cbz	r0, 800e454 <racs_services__srv__Control_Request__Sequence__init.part.0+0x80>
 800e3f6:	1d06      	adds	r6, r0, #4
 800e3f8:	2500      	movs	r5, #0
 800e3fa:	e003      	b.n	800e404 <racs_services__srv__Control_Request__Sequence__init.part.0+0x30>
 800e3fc:	3501      	adds	r5, #1
 800e3fe:	3610      	adds	r6, #16
 800e400:	42af      	cmp	r7, r5
 800e402:	d01e      	beq.n	800e442 <racs_services__srv__Control_Request__Sequence__init.part.0+0x6e>
 800e404:	4630      	mov	r0, r6
 800e406:	2100      	movs	r1, #0
 800e408:	f7fd ff66 	bl	800c2d8 <rosidl_runtime_c__uint8__Sequence__init>
 800e40c:	4604      	mov	r4, r0
 800e40e:	2800      	cmp	r0, #0
 800e410:	d1f4      	bne.n	800e3fc <racs_services__srv__Control_Request__Sequence__init.part.0+0x28>
 800e412:	4630      	mov	r0, r6
 800e414:	f7fd ff78 	bl	800c308 <rosidl_runtime_c__uint8__Sequence__fini>
 800e418:	42af      	cmp	r7, r5
 800e41a:	d912      	bls.n	800e442 <racs_services__srv__Control_Request__Sequence__init.part.0+0x6e>
 800e41c:	b145      	cbz	r5, 800e430 <racs_services__srv__Control_Request__Sequence__init.part.0+0x5c>
 800e41e:	eb09 1605 	add.w	r6, r9, r5, lsl #4
 800e422:	3e0c      	subs	r6, #12
 800e424:	4630      	mov	r0, r6
 800e426:	3e10      	subs	r6, #16
 800e428:	f7fd ff6e 	bl	800c308 <rosidl_runtime_c__uint8__Sequence__fini>
 800e42c:	3d01      	subs	r5, #1
 800e42e:	d1f9      	bne.n	800e424 <racs_services__srv__Control_Request__Sequence__init.part.0+0x50>
 800e430:	4648      	mov	r0, r9
 800e432:	9b02      	ldr	r3, [sp, #8]
 800e434:	4651      	mov	r1, sl
 800e436:	4798      	blx	r3
 800e438:	4620      	mov	r0, r4
 800e43a:	b006      	add	sp, #24
 800e43c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e440:	46b9      	mov	r9, r7
 800e442:	2401      	movs	r4, #1
 800e444:	f8c8 7008 	str.w	r7, [r8, #8]
 800e448:	e9c8 9700 	strd	r9, r7, [r8]
 800e44c:	4620      	mov	r0, r4
 800e44e:	b006      	add	sp, #24
 800e450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e454:	4604      	mov	r4, r0
 800e456:	e7f9      	b.n	800e44c <racs_services__srv__Control_Request__Sequence__init.part.0+0x78>

0800e458 <racs_services__srv__Control_Response__Sequence__init.part.0>:
 800e458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e45c:	b086      	sub	sp, #24
 800e45e:	460f      	mov	r7, r1
 800e460:	4680      	mov	r8, r0
 800e462:	a801      	add	r0, sp, #4
 800e464:	f7fd fe7a 	bl	800c15c <rcutils_get_default_allocator>
 800e468:	b367      	cbz	r7, 800e4c4 <racs_services__srv__Control_Response__Sequence__init.part.0+0x6c>
 800e46a:	2110      	movs	r1, #16
 800e46c:	4638      	mov	r0, r7
 800e46e:	e9dd 3a04 	ldrd	r3, sl, [sp, #16]
 800e472:	4652      	mov	r2, sl
 800e474:	4798      	blx	r3
 800e476:	4681      	mov	r9, r0
 800e478:	b370      	cbz	r0, 800e4d8 <racs_services__srv__Control_Response__Sequence__init.part.0+0x80>
 800e47a:	1d06      	adds	r6, r0, #4
 800e47c:	2500      	movs	r5, #0
 800e47e:	e003      	b.n	800e488 <racs_services__srv__Control_Response__Sequence__init.part.0+0x30>
 800e480:	3501      	adds	r5, #1
 800e482:	3610      	adds	r6, #16
 800e484:	42af      	cmp	r7, r5
 800e486:	d01e      	beq.n	800e4c6 <racs_services__srv__Control_Response__Sequence__init.part.0+0x6e>
 800e488:	4630      	mov	r0, r6
 800e48a:	2100      	movs	r1, #0
 800e48c:	f7fd ff24 	bl	800c2d8 <rosidl_runtime_c__uint8__Sequence__init>
 800e490:	4604      	mov	r4, r0
 800e492:	2800      	cmp	r0, #0
 800e494:	d1f4      	bne.n	800e480 <racs_services__srv__Control_Response__Sequence__init.part.0+0x28>
 800e496:	4630      	mov	r0, r6
 800e498:	f7fd ff36 	bl	800c308 <rosidl_runtime_c__uint8__Sequence__fini>
 800e49c:	42af      	cmp	r7, r5
 800e49e:	d912      	bls.n	800e4c6 <racs_services__srv__Control_Response__Sequence__init.part.0+0x6e>
 800e4a0:	b145      	cbz	r5, 800e4b4 <racs_services__srv__Control_Response__Sequence__init.part.0+0x5c>
 800e4a2:	eb09 1605 	add.w	r6, r9, r5, lsl #4
 800e4a6:	3e0c      	subs	r6, #12
 800e4a8:	4630      	mov	r0, r6
 800e4aa:	3e10      	subs	r6, #16
 800e4ac:	f7fd ff2c 	bl	800c308 <rosidl_runtime_c__uint8__Sequence__fini>
 800e4b0:	3d01      	subs	r5, #1
 800e4b2:	d1f9      	bne.n	800e4a8 <racs_services__srv__Control_Response__Sequence__init.part.0+0x50>
 800e4b4:	4648      	mov	r0, r9
 800e4b6:	9b02      	ldr	r3, [sp, #8]
 800e4b8:	4651      	mov	r1, sl
 800e4ba:	4798      	blx	r3
 800e4bc:	4620      	mov	r0, r4
 800e4be:	b006      	add	sp, #24
 800e4c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4c4:	46b9      	mov	r9, r7
 800e4c6:	2401      	movs	r4, #1
 800e4c8:	f8c8 7008 	str.w	r7, [r8, #8]
 800e4cc:	e9c8 9700 	strd	r9, r7, [r8]
 800e4d0:	4620      	mov	r0, r4
 800e4d2:	b006      	add	sp, #24
 800e4d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4d8:	4604      	mov	r4, r0
 800e4da:	e7f9      	b.n	800e4d0 <racs_services__srv__Control_Response__Sequence__init.part.0+0x78>

0800e4dc <racs_services__srv__Control_Request__init>:
 800e4dc:	b538      	push	{r3, r4, r5, lr}
 800e4de:	b140      	cbz	r0, 800e4f2 <racs_services__srv__Control_Request__init+0x16>
 800e4e0:	1d05      	adds	r5, r0, #4
 800e4e2:	2100      	movs	r1, #0
 800e4e4:	4628      	mov	r0, r5
 800e4e6:	f7fd fef7 	bl	800c2d8 <rosidl_runtime_c__uint8__Sequence__init>
 800e4ea:	4604      	mov	r4, r0
 800e4ec:	b120      	cbz	r0, 800e4f8 <racs_services__srv__Control_Request__init+0x1c>
 800e4ee:	4620      	mov	r0, r4
 800e4f0:	bd38      	pop	{r3, r4, r5, pc}
 800e4f2:	4604      	mov	r4, r0
 800e4f4:	4620      	mov	r0, r4
 800e4f6:	bd38      	pop	{r3, r4, r5, pc}
 800e4f8:	4628      	mov	r0, r5
 800e4fa:	f7fd ff05 	bl	800c308 <rosidl_runtime_c__uint8__Sequence__fini>
 800e4fe:	4620      	mov	r0, r4
 800e500:	bd38      	pop	{r3, r4, r5, pc}
 800e502:	bf00      	nop

0800e504 <racs_services__srv__Control_Request__fini>:
 800e504:	b110      	cbz	r0, 800e50c <racs_services__srv__Control_Request__fini+0x8>
 800e506:	3004      	adds	r0, #4
 800e508:	f7fd befe 	b.w	800c308 <rosidl_runtime_c__uint8__Sequence__fini>
 800e50c:	4770      	bx	lr
 800e50e:	bf00      	nop

0800e510 <racs_services__srv__Control_Request__copy>:
 800e510:	4603      	mov	r3, r0
 800e512:	460a      	mov	r2, r1
 800e514:	b150      	cbz	r0, 800e52c <racs_services__srv__Control_Request__copy+0x1c>
 800e516:	b149      	cbz	r1, 800e52c <racs_services__srv__Control_Request__copy+0x1c>
 800e518:	f8b0 c000 	ldrh.w	ip, [r0]
 800e51c:	3104      	adds	r1, #4
 800e51e:	3004      	adds	r0, #4
 800e520:	f8a2 c000 	strh.w	ip, [r2]
 800e524:	789b      	ldrb	r3, [r3, #2]
 800e526:	7093      	strb	r3, [r2, #2]
 800e528:	f7fd bf02 	b.w	800c330 <rosidl_runtime_c__uint8__Sequence__copy>
 800e52c:	2000      	movs	r0, #0
 800e52e:	4770      	bx	lr

0800e530 <racs_services__srv__Control_Request__Sequence__init>:
 800e530:	b108      	cbz	r0, 800e536 <racs_services__srv__Control_Request__Sequence__init+0x6>
 800e532:	f7ff bf4f 	b.w	800e3d4 <racs_services__srv__Control_Request__Sequence__init.part.0>
 800e536:	4770      	bx	lr

0800e538 <racs_services__srv__Control_Request__Sequence__fini>:
 800e538:	b320      	cbz	r0, 800e584 <racs_services__srv__Control_Request__Sequence__fini+0x4c>
 800e53a:	b530      	push	{r4, r5, lr}
 800e53c:	b087      	sub	sp, #28
 800e53e:	4605      	mov	r5, r0
 800e540:	a801      	add	r0, sp, #4
 800e542:	f7fd fe0b 	bl	800c15c <rcutils_get_default_allocator>
 800e546:	682b      	ldr	r3, [r5, #0]
 800e548:	b1b3      	cbz	r3, 800e578 <racs_services__srv__Control_Request__Sequence__fini+0x40>
 800e54a:	68aa      	ldr	r2, [r5, #8]
 800e54c:	b162      	cbz	r2, 800e568 <racs_services__srv__Control_Request__Sequence__fini+0x30>
 800e54e:	2400      	movs	r4, #0
 800e550:	eb13 1004 	adds.w	r0, r3, r4, lsl #4
 800e554:	f100 0004 	add.w	r0, r0, #4
 800e558:	d010      	beq.n	800e57c <racs_services__srv__Control_Request__Sequence__fini+0x44>
 800e55a:	f7fd fed5 	bl	800c308 <rosidl_runtime_c__uint8__Sequence__fini>
 800e55e:	3401      	adds	r4, #1
 800e560:	68aa      	ldr	r2, [r5, #8]
 800e562:	682b      	ldr	r3, [r5, #0]
 800e564:	4294      	cmp	r4, r2
 800e566:	d3f3      	bcc.n	800e550 <racs_services__srv__Control_Request__Sequence__fini+0x18>
 800e568:	4618      	mov	r0, r3
 800e56a:	9a02      	ldr	r2, [sp, #8]
 800e56c:	9905      	ldr	r1, [sp, #20]
 800e56e:	4790      	blx	r2
 800e570:	2300      	movs	r3, #0
 800e572:	e9c5 3300 	strd	r3, r3, [r5]
 800e576:	60ab      	str	r3, [r5, #8]
 800e578:	b007      	add	sp, #28
 800e57a:	bd30      	pop	{r4, r5, pc}
 800e57c:	3401      	adds	r4, #1
 800e57e:	4294      	cmp	r4, r2
 800e580:	d3e6      	bcc.n	800e550 <racs_services__srv__Control_Request__Sequence__fini+0x18>
 800e582:	e7f1      	b.n	800e568 <racs_services__srv__Control_Request__Sequence__fini+0x30>
 800e584:	4770      	bx	lr
 800e586:	bf00      	nop

0800e588 <racs_services__srv__Control_Response__init>:
 800e588:	b538      	push	{r3, r4, r5, lr}
 800e58a:	b140      	cbz	r0, 800e59e <racs_services__srv__Control_Response__init+0x16>
 800e58c:	1d05      	adds	r5, r0, #4
 800e58e:	2100      	movs	r1, #0
 800e590:	4628      	mov	r0, r5
 800e592:	f7fd fea1 	bl	800c2d8 <rosidl_runtime_c__uint8__Sequence__init>
 800e596:	4604      	mov	r4, r0
 800e598:	b120      	cbz	r0, 800e5a4 <racs_services__srv__Control_Response__init+0x1c>
 800e59a:	4620      	mov	r0, r4
 800e59c:	bd38      	pop	{r3, r4, r5, pc}
 800e59e:	4604      	mov	r4, r0
 800e5a0:	4620      	mov	r0, r4
 800e5a2:	bd38      	pop	{r3, r4, r5, pc}
 800e5a4:	4628      	mov	r0, r5
 800e5a6:	f7fd feaf 	bl	800c308 <rosidl_runtime_c__uint8__Sequence__fini>
 800e5aa:	4620      	mov	r0, r4
 800e5ac:	bd38      	pop	{r3, r4, r5, pc}
 800e5ae:	bf00      	nop

0800e5b0 <racs_services__srv__Control_Response__fini>:
 800e5b0:	b110      	cbz	r0, 800e5b8 <racs_services__srv__Control_Response__fini+0x8>
 800e5b2:	3004      	adds	r0, #4
 800e5b4:	f7fd bea8 	b.w	800c308 <rosidl_runtime_c__uint8__Sequence__fini>
 800e5b8:	4770      	bx	lr
 800e5ba:	bf00      	nop

0800e5bc <racs_services__srv__Control_Response__copy>:
 800e5bc:	b130      	cbz	r0, 800e5cc <racs_services__srv__Control_Response__copy+0x10>
 800e5be:	b129      	cbz	r1, 800e5cc <racs_services__srv__Control_Response__copy+0x10>
 800e5c0:	f850 3b04 	ldr.w	r3, [r0], #4
 800e5c4:	f841 3b04 	str.w	r3, [r1], #4
 800e5c8:	f7fd beb2 	b.w	800c330 <rosidl_runtime_c__uint8__Sequence__copy>
 800e5cc:	2000      	movs	r0, #0
 800e5ce:	4770      	bx	lr

0800e5d0 <racs_services__srv__Control_Response__Sequence__init>:
 800e5d0:	b108      	cbz	r0, 800e5d6 <racs_services__srv__Control_Response__Sequence__init+0x6>
 800e5d2:	f7ff bf41 	b.w	800e458 <racs_services__srv__Control_Response__Sequence__init.part.0>
 800e5d6:	4770      	bx	lr

0800e5d8 <racs_services__srv__Control_Response__Sequence__fini>:
 800e5d8:	b320      	cbz	r0, 800e624 <racs_services__srv__Control_Response__Sequence__fini+0x4c>
 800e5da:	b530      	push	{r4, r5, lr}
 800e5dc:	b087      	sub	sp, #28
 800e5de:	4605      	mov	r5, r0
 800e5e0:	a801      	add	r0, sp, #4
 800e5e2:	f7fd fdbb 	bl	800c15c <rcutils_get_default_allocator>
 800e5e6:	682b      	ldr	r3, [r5, #0]
 800e5e8:	b1b3      	cbz	r3, 800e618 <racs_services__srv__Control_Response__Sequence__fini+0x40>
 800e5ea:	68aa      	ldr	r2, [r5, #8]
 800e5ec:	b162      	cbz	r2, 800e608 <racs_services__srv__Control_Response__Sequence__fini+0x30>
 800e5ee:	2400      	movs	r4, #0
 800e5f0:	eb13 1004 	adds.w	r0, r3, r4, lsl #4
 800e5f4:	f100 0004 	add.w	r0, r0, #4
 800e5f8:	d010      	beq.n	800e61c <racs_services__srv__Control_Response__Sequence__fini+0x44>
 800e5fa:	f7fd fe85 	bl	800c308 <rosidl_runtime_c__uint8__Sequence__fini>
 800e5fe:	3401      	adds	r4, #1
 800e600:	68aa      	ldr	r2, [r5, #8]
 800e602:	682b      	ldr	r3, [r5, #0]
 800e604:	4294      	cmp	r4, r2
 800e606:	d3f3      	bcc.n	800e5f0 <racs_services__srv__Control_Response__Sequence__fini+0x18>
 800e608:	4618      	mov	r0, r3
 800e60a:	9a02      	ldr	r2, [sp, #8]
 800e60c:	9905      	ldr	r1, [sp, #20]
 800e60e:	4790      	blx	r2
 800e610:	2300      	movs	r3, #0
 800e612:	e9c5 3300 	strd	r3, r3, [r5]
 800e616:	60ab      	str	r3, [r5, #8]
 800e618:	b007      	add	sp, #28
 800e61a:	bd30      	pop	{r4, r5, pc}
 800e61c:	3401      	adds	r4, #1
 800e61e:	4294      	cmp	r4, r2
 800e620:	d3e6      	bcc.n	800e5f0 <racs_services__srv__Control_Response__Sequence__fini+0x18>
 800e622:	e7f1      	b.n	800e608 <racs_services__srv__Control_Response__Sequence__fini+0x30>
 800e624:	4770      	bx	lr
 800e626:	bf00      	nop

0800e628 <racs_services__srv__Control_Event__init>:
 800e628:	b570      	push	{r4, r5, r6, lr}
 800e62a:	4604      	mov	r4, r0
 800e62c:	b086      	sub	sp, #24
 800e62e:	2800      	cmp	r0, #0
 800e630:	d052      	beq.n	800e6d8 <racs_services__srv__Control_Event__init+0xb0>
 800e632:	f005 fd11 	bl	8014058 <service_msgs__msg__ServiceEventInfo__init>
 800e636:	4606      	mov	r6, r0
 800e638:	b178      	cbz	r0, 800e65a <racs_services__srv__Control_Event__init+0x32>
 800e63a:	2500      	movs	r5, #0
 800e63c:	a801      	add	r0, sp, #4
 800e63e:	f7fd fd8d 	bl	800c15c <rcutils_get_default_allocator>
 800e642:	a801      	add	r0, sp, #4
 800e644:	6325      	str	r5, [r4, #48]	; 0x30
 800e646:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
 800e64a:	f7fd fd87 	bl	800c15c <rcutils_get_default_allocator>
 800e64e:	63e5      	str	r5, [r4, #60]	; 0x3c
 800e650:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e654:	4630      	mov	r0, r6
 800e656:	b006      	add	sp, #24
 800e658:	bd70      	pop	{r4, r5, r6, pc}
 800e65a:	4620      	mov	r0, r4
 800e65c:	f005 fd0e 	bl	801407c <service_msgs__msg__ServiceEventInfo__fini>
 800e660:	a801      	add	r0, sp, #4
 800e662:	f7fd fd7b 	bl	800c15c <rcutils_get_default_allocator>
 800e666:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e668:	b1b3      	cbz	r3, 800e698 <racs_services__srv__Control_Event__init+0x70>
 800e66a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e66c:	b162      	cbz	r2, 800e688 <racs_services__srv__Control_Event__init+0x60>
 800e66e:	4635      	mov	r5, r6
 800e670:	eb13 1005 	adds.w	r0, r3, r5, lsl #4
 800e674:	f100 0004 	add.w	r0, r0, #4
 800e678:	d032      	beq.n	800e6e0 <racs_services__srv__Control_Event__init+0xb8>
 800e67a:	f7fd fe45 	bl	800c308 <rosidl_runtime_c__uint8__Sequence__fini>
 800e67e:	3501      	adds	r5, #1
 800e680:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e682:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e684:	4295      	cmp	r5, r2
 800e686:	d3f3      	bcc.n	800e670 <racs_services__srv__Control_Event__init+0x48>
 800e688:	4618      	mov	r0, r3
 800e68a:	9a02      	ldr	r2, [sp, #8]
 800e68c:	9905      	ldr	r1, [sp, #20]
 800e68e:	4790      	blx	r2
 800e690:	2300      	movs	r3, #0
 800e692:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 800e696:	6323      	str	r3, [r4, #48]	; 0x30
 800e698:	a801      	add	r0, sp, #4
 800e69a:	f7fd fd5f 	bl	800c15c <rcutils_get_default_allocator>
 800e69e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d0d7      	beq.n	800e654 <racs_services__srv__Control_Event__init+0x2c>
 800e6a4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e6a6:	b162      	cbz	r2, 800e6c2 <racs_services__srv__Control_Event__init+0x9a>
 800e6a8:	2500      	movs	r5, #0
 800e6aa:	eb13 1005 	adds.w	r0, r3, r5, lsl #4
 800e6ae:	f100 0004 	add.w	r0, r0, #4
 800e6b2:	d019      	beq.n	800e6e8 <racs_services__srv__Control_Event__init+0xc0>
 800e6b4:	f7fd fe28 	bl	800c308 <rosidl_runtime_c__uint8__Sequence__fini>
 800e6b8:	3501      	adds	r5, #1
 800e6ba:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e6bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e6be:	4295      	cmp	r5, r2
 800e6c0:	d3f3      	bcc.n	800e6aa <racs_services__srv__Control_Event__init+0x82>
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	9a02      	ldr	r2, [sp, #8]
 800e6c6:	9905      	ldr	r1, [sp, #20]
 800e6c8:	4790      	blx	r2
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	4630      	mov	r0, r6
 800e6ce:	63e3      	str	r3, [r4, #60]	; 0x3c
 800e6d0:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 800e6d4:	b006      	add	sp, #24
 800e6d6:	bd70      	pop	{r4, r5, r6, pc}
 800e6d8:	4606      	mov	r6, r0
 800e6da:	4630      	mov	r0, r6
 800e6dc:	b006      	add	sp, #24
 800e6de:	bd70      	pop	{r4, r5, r6, pc}
 800e6e0:	3501      	adds	r5, #1
 800e6e2:	4295      	cmp	r5, r2
 800e6e4:	d3c4      	bcc.n	800e670 <racs_services__srv__Control_Event__init+0x48>
 800e6e6:	e7cf      	b.n	800e688 <racs_services__srv__Control_Event__init+0x60>
 800e6e8:	3501      	adds	r5, #1
 800e6ea:	4295      	cmp	r5, r2
 800e6ec:	d3dd      	bcc.n	800e6aa <racs_services__srv__Control_Event__init+0x82>
 800e6ee:	e7e8      	b.n	800e6c2 <racs_services__srv__Control_Event__init+0x9a>

0800e6f0 <racs_services__srv__Control_Event__fini>:
 800e6f0:	2800      	cmp	r0, #0
 800e6f2:	d046      	beq.n	800e782 <racs_services__srv__Control_Event__fini+0x92>
 800e6f4:	b530      	push	{r4, r5, lr}
 800e6f6:	b087      	sub	sp, #28
 800e6f8:	4604      	mov	r4, r0
 800e6fa:	f005 fcbf 	bl	801407c <service_msgs__msg__ServiceEventInfo__fini>
 800e6fe:	a801      	add	r0, sp, #4
 800e700:	f7fd fd2c 	bl	800c15c <rcutils_get_default_allocator>
 800e704:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e706:	b1b3      	cbz	r3, 800e736 <racs_services__srv__Control_Event__fini+0x46>
 800e708:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e70a:	b162      	cbz	r2, 800e726 <racs_services__srv__Control_Event__fini+0x36>
 800e70c:	2500      	movs	r5, #0
 800e70e:	eb13 1005 	adds.w	r0, r3, r5, lsl #4
 800e712:	f100 0004 	add.w	r0, r0, #4
 800e716:	d030      	beq.n	800e77a <racs_services__srv__Control_Event__fini+0x8a>
 800e718:	f7fd fdf6 	bl	800c308 <rosidl_runtime_c__uint8__Sequence__fini>
 800e71c:	3501      	adds	r5, #1
 800e71e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e720:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e722:	4295      	cmp	r5, r2
 800e724:	d3f3      	bcc.n	800e70e <racs_services__srv__Control_Event__fini+0x1e>
 800e726:	4618      	mov	r0, r3
 800e728:	9a02      	ldr	r2, [sp, #8]
 800e72a:	9905      	ldr	r1, [sp, #20]
 800e72c:	4790      	blx	r2
 800e72e:	2300      	movs	r3, #0
 800e730:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 800e734:	6323      	str	r3, [r4, #48]	; 0x30
 800e736:	a801      	add	r0, sp, #4
 800e738:	f7fd fd10 	bl	800c15c <rcutils_get_default_allocator>
 800e73c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e73e:	b1b3      	cbz	r3, 800e76e <racs_services__srv__Control_Event__fini+0x7e>
 800e740:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e742:	b162      	cbz	r2, 800e75e <racs_services__srv__Control_Event__fini+0x6e>
 800e744:	2500      	movs	r5, #0
 800e746:	eb13 1005 	adds.w	r0, r3, r5, lsl #4
 800e74a:	f100 0004 	add.w	r0, r0, #4
 800e74e:	d010      	beq.n	800e772 <racs_services__srv__Control_Event__fini+0x82>
 800e750:	f7fd fdda 	bl	800c308 <rosidl_runtime_c__uint8__Sequence__fini>
 800e754:	3501      	adds	r5, #1
 800e756:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e758:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e75a:	4295      	cmp	r5, r2
 800e75c:	d3f3      	bcc.n	800e746 <racs_services__srv__Control_Event__fini+0x56>
 800e75e:	4618      	mov	r0, r3
 800e760:	9a02      	ldr	r2, [sp, #8]
 800e762:	9905      	ldr	r1, [sp, #20]
 800e764:	4790      	blx	r2
 800e766:	2300      	movs	r3, #0
 800e768:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 800e76c:	63e3      	str	r3, [r4, #60]	; 0x3c
 800e76e:	b007      	add	sp, #28
 800e770:	bd30      	pop	{r4, r5, pc}
 800e772:	3501      	adds	r5, #1
 800e774:	4295      	cmp	r5, r2
 800e776:	d3e6      	bcc.n	800e746 <racs_services__srv__Control_Event__fini+0x56>
 800e778:	e7f1      	b.n	800e75e <racs_services__srv__Control_Event__fini+0x6e>
 800e77a:	3501      	adds	r5, #1
 800e77c:	4295      	cmp	r5, r2
 800e77e:	d3c6      	bcc.n	800e70e <racs_services__srv__Control_Event__fini+0x1e>
 800e780:	e7d1      	b.n	800e726 <racs_services__srv__Control_Event__fini+0x36>
 800e782:	4770      	bx	lr

0800e784 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control>:
 800e784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e788:	2900      	cmp	r1, #0
 800e78a:	d04d      	beq.n	800e828 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0xa4>
 800e78c:	4605      	mov	r5, r0
 800e78e:	2800      	cmp	r0, #0
 800e790:	d04a      	beq.n	800e828 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0xa4>
 800e792:	460e      	mov	r6, r1
 800e794:	4698      	mov	r8, r3
 800e796:	2040      	movs	r0, #64	; 0x40
 800e798:	680b      	ldr	r3, [r1, #0]
 800e79a:	6909      	ldr	r1, [r1, #16]
 800e79c:	4617      	mov	r7, r2
 800e79e:	4798      	blx	r3
 800e7a0:	4604      	mov	r4, r0
 800e7a2:	f7ff ff41 	bl	800e628 <racs_services__srv__Control_Event__init>
 800e7a6:	4684      	mov	ip, r0
 800e7a8:	b370      	cbz	r0, 800e808 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x84>
 800e7aa:	782b      	ldrb	r3, [r5, #0]
 800e7ac:	7023      	strb	r3, [r4, #0]
 800e7ae:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 800e7b2:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 800e7b6:	e9c4 2301 	strd	r2, r3, [r4, #4]
 800e7ba:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800e7be:	68e8      	ldr	r0, [r5, #12]
 800e7c0:	6929      	ldr	r1, [r5, #16]
 800e7c2:	696a      	ldr	r2, [r5, #20]
 800e7c4:	69ab      	ldr	r3, [r5, #24]
 800e7c6:	60e0      	str	r0, [r4, #12]
 800e7c8:	6121      	str	r1, [r4, #16]
 800e7ca:	6162      	str	r2, [r4, #20]
 800e7cc:	61a3      	str	r3, [r4, #24]
 800e7ce:	b157      	cbz	r7, 800e7e6 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x62>
 800e7d0:	2101      	movs	r1, #1
 800e7d2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800e7d6:	f7ff feab 	bl	800e530 <racs_services__srv__Control_Request__Sequence__init>
 800e7da:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800e7dc:	4638      	mov	r0, r7
 800e7de:	f7ff fe97 	bl	800e510 <racs_services__srv__Control_Request__copy>
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	b1c0      	cbz	r0, 800e818 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x94>
 800e7e6:	f1b8 0f00 	cmp.w	r8, #0
 800e7ea:	d00a      	beq.n	800e802 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x7e>
 800e7ec:	2101      	movs	r1, #1
 800e7ee:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800e7f2:	f7ff feed 	bl	800e5d0 <racs_services__srv__Control_Response__Sequence__init>
 800e7f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e7f8:	4640      	mov	r0, r8
 800e7fa:	f7ff fedf 	bl	800e5bc <racs_services__srv__Control_Response__copy>
 800e7fe:	4603      	mov	r3, r0
 800e800:	b150      	cbz	r0, 800e818 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x94>
 800e802:	4620      	mov	r0, r4
 800e804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e808:	4620      	mov	r0, r4
 800e80a:	4664      	mov	r4, ip
 800e80c:	6873      	ldr	r3, [r6, #4]
 800e80e:	6931      	ldr	r1, [r6, #16]
 800e810:	4798      	blx	r3
 800e812:	4620      	mov	r0, r4
 800e814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e818:	4620      	mov	r0, r4
 800e81a:	461c      	mov	r4, r3
 800e81c:	6872      	ldr	r2, [r6, #4]
 800e81e:	6931      	ldr	r1, [r6, #16]
 800e820:	4790      	blx	r2
 800e822:	4620      	mov	r0, r4
 800e824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e828:	2400      	movs	r4, #0
 800e82a:	4620      	mov	r0, r4
 800e82c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e830 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control>:
 800e830:	b1b9      	cbz	r1, 800e862 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x32>
 800e832:	b538      	push	{r3, r4, r5, lr}
 800e834:	4605      	mov	r5, r0
 800e836:	b190      	cbz	r0, 800e85e <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x2e>
 800e838:	460c      	mov	r4, r1
 800e83a:	f7ff ff59 	bl	800e6f0 <racs_services__srv__Control_Event__fini>
 800e83e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800e840:	b110      	cbz	r0, 800e848 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x18>
 800e842:	6863      	ldr	r3, [r4, #4]
 800e844:	6921      	ldr	r1, [r4, #16]
 800e846:	4798      	blx	r3
 800e848:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800e84a:	b110      	cbz	r0, 800e852 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x22>
 800e84c:	6863      	ldr	r3, [r4, #4]
 800e84e:	6921      	ldr	r1, [r4, #16]
 800e850:	4798      	blx	r3
 800e852:	4628      	mov	r0, r5
 800e854:	6863      	ldr	r3, [r4, #4]
 800e856:	6921      	ldr	r1, [r4, #16]
 800e858:	4798      	blx	r3
 800e85a:	2001      	movs	r0, #1
 800e85c:	bd38      	pop	{r3, r4, r5, pc}
 800e85e:	2000      	movs	r0, #0
 800e860:	bd38      	pop	{r3, r4, r5, pc}
 800e862:	2000      	movs	r0, #0
 800e864:	4770      	bx	lr
 800e866:	bf00      	nop

0800e868 <racs_services__srv__Setup_Event__get_type_description.part.0>:
 800e868:	b510      	push	{r4, lr}
 800e86a:	2000      	movs	r0, #0
 800e86c:	4c13      	ldr	r4, [pc, #76]	; (800e8bc <racs_services__srv__Setup_Event__get_type_description.part.0+0x54>)
 800e86e:	f005 fc0f 	bl	8014090 <builtin_interfaces__msg__Time__get_type_description>
 800e872:	300c      	adds	r0, #12
 800e874:	4b12      	ldr	r3, [pc, #72]	; (800e8c0 <racs_services__srv__Setup_Event__get_type_description.part.0+0x58>)
 800e876:	c807      	ldmia	r0, {r0, r1, r2}
 800e878:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e87c:	7823      	ldrb	r3, [r4, #0]
 800e87e:	b90b      	cbnz	r3, 800e884 <racs_services__srv__Setup_Event__get_type_description.part.0+0x1c>
 800e880:	2301      	movs	r3, #1
 800e882:	7023      	strb	r3, [r4, #0]
 800e884:	4a0f      	ldr	r2, [pc, #60]	; (800e8c4 <racs_services__srv__Setup_Event__get_type_description.part.0+0x5c>)
 800e886:	4b10      	ldr	r3, [pc, #64]	; (800e8c8 <racs_services__srv__Setup_Event__get_type_description.part.0+0x60>)
 800e888:	4c10      	ldr	r4, [pc, #64]	; (800e8cc <racs_services__srv__Setup_Event__get_type_description.part.0+0x64>)
 800e88a:	ca07      	ldmia	r2, {r0, r1, r2}
 800e88c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e890:	7823      	ldrb	r3, [r4, #0]
 800e892:	b90b      	cbnz	r3, 800e898 <racs_services__srv__Setup_Event__get_type_description.part.0+0x30>
 800e894:	2301      	movs	r3, #1
 800e896:	7023      	strb	r3, [r4, #0]
 800e898:	4b0d      	ldr	r3, [pc, #52]	; (800e8d0 <racs_services__srv__Setup_Event__get_type_description.part.0+0x68>)
 800e89a:	4c0e      	ldr	r4, [pc, #56]	; (800e8d4 <racs_services__srv__Setup_Event__get_type_description.part.0+0x6c>)
 800e89c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e8a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e8a4:	2000      	movs	r0, #0
 800e8a6:	3418      	adds	r4, #24
 800e8a8:	f005 fb92 	bl	8013fd0 <service_msgs__msg__ServiceEventInfo__get_type_description>
 800e8ac:	300c      	adds	r0, #12
 800e8ae:	4b0a      	ldr	r3, [pc, #40]	; (800e8d8 <racs_services__srv__Setup_Event__get_type_description.part.0+0x70>)
 800e8b0:	c807      	ldmia	r0, {r0, r1, r2}
 800e8b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e8b6:	2201      	movs	r2, #1
 800e8b8:	701a      	strb	r2, [r3, #0]
 800e8ba:	bd10      	pop	{r4, pc}
 800e8bc:	2000bb48 	.word	0x2000bb48
 800e8c0:	20001500 	.word	0x20001500
 800e8c4:	0801b3ec 	.word	0x0801b3ec
 800e8c8:	20001518 	.word	0x20001518
 800e8cc:	2000bb46 	.word	0x2000bb46
 800e8d0:	0801b3c8 	.word	0x0801b3c8
 800e8d4:	20001530 	.word	0x20001530
 800e8d8:	2000bb45 	.word	0x2000bb45

0800e8dc <racs_services__srv__Setup__get_type_hash>:
 800e8dc:	4800      	ldr	r0, [pc, #0]	; (800e8e0 <racs_services__srv__Setup__get_type_hash+0x4>)
 800e8de:	4770      	bx	lr
 800e8e0:	200013cc 	.word	0x200013cc

0800e8e4 <racs_services__srv__Setup_Request__get_type_hash>:
 800e8e4:	4800      	ldr	r0, [pc, #0]	; (800e8e8 <racs_services__srv__Setup_Request__get_type_hash+0x4>)
 800e8e6:	4770      	bx	lr
 800e8e8:	200013a8 	.word	0x200013a8

0800e8ec <racs_services__srv__Setup_Response__get_type_hash>:
 800e8ec:	4800      	ldr	r0, [pc, #0]	; (800e8f0 <racs_services__srv__Setup_Response__get_type_hash+0x4>)
 800e8ee:	4770      	bx	lr
 800e8f0:	20001384 	.word	0x20001384

0800e8f4 <racs_services__srv__Setup_Event__get_type_hash>:
 800e8f4:	4800      	ldr	r0, [pc, #0]	; (800e8f8 <racs_services__srv__Setup_Event__get_type_hash+0x4>)
 800e8f6:	4770      	bx	lr
 800e8f8:	20001360 	.word	0x20001360

0800e8fc <racs_services__srv__Setup__get_type_description>:
 800e8fc:	b538      	push	{r3, r4, r5, lr}
 800e8fe:	4d1c      	ldr	r5, [pc, #112]	; (800e970 <racs_services__srv__Setup__get_type_description+0x74>)
 800e900:	7828      	ldrb	r0, [r5, #0]
 800e902:	b108      	cbz	r0, 800e908 <racs_services__srv__Setup__get_type_description+0xc>
 800e904:	481b      	ldr	r0, [pc, #108]	; (800e974 <racs_services__srv__Setup__get_type_description+0x78>)
 800e906:	bd38      	pop	{r3, r4, r5, pc}
 800e908:	f005 fbc2 	bl	8014090 <builtin_interfaces__msg__Time__get_type_description>
 800e90c:	300c      	adds	r0, #12
 800e90e:	4b1a      	ldr	r3, [pc, #104]	; (800e978 <racs_services__srv__Setup__get_type_description+0x7c>)
 800e910:	c807      	ldmia	r0, {r0, r1, r2}
 800e912:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e916:	4b19      	ldr	r3, [pc, #100]	; (800e97c <racs_services__srv__Setup__get_type_description+0x80>)
 800e918:	781b      	ldrb	r3, [r3, #0]
 800e91a:	b32b      	cbz	r3, 800e968 <racs_services__srv__Setup__get_type_description+0x6c>
 800e91c:	4a18      	ldr	r2, [pc, #96]	; (800e980 <racs_services__srv__Setup__get_type_description+0x84>)
 800e91e:	4b19      	ldr	r3, [pc, #100]	; (800e984 <racs_services__srv__Setup__get_type_description+0x88>)
 800e920:	4c19      	ldr	r4, [pc, #100]	; (800e988 <racs_services__srv__Setup__get_type_description+0x8c>)
 800e922:	ca07      	ldmia	r2, {r0, r1, r2}
 800e924:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e928:	7823      	ldrb	r3, [r4, #0]
 800e92a:	b90b      	cbnz	r3, 800e930 <racs_services__srv__Setup__get_type_description+0x34>
 800e92c:	2301      	movs	r3, #1
 800e92e:	7023      	strb	r3, [r4, #0]
 800e930:	4a16      	ldr	r2, [pc, #88]	; (800e98c <racs_services__srv__Setup__get_type_description+0x90>)
 800e932:	4b17      	ldr	r3, [pc, #92]	; (800e990 <racs_services__srv__Setup__get_type_description+0x94>)
 800e934:	4c17      	ldr	r4, [pc, #92]	; (800e994 <racs_services__srv__Setup__get_type_description+0x98>)
 800e936:	ca07      	ldmia	r2, {r0, r1, r2}
 800e938:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e93c:	7823      	ldrb	r3, [r4, #0]
 800e93e:	b90b      	cbnz	r3, 800e944 <racs_services__srv__Setup__get_type_description+0x48>
 800e940:	2301      	movs	r3, #1
 800e942:	7023      	strb	r3, [r4, #0]
 800e944:	4b14      	ldr	r3, [pc, #80]	; (800e998 <racs_services__srv__Setup__get_type_description+0x9c>)
 800e946:	4c15      	ldr	r4, [pc, #84]	; (800e99c <racs_services__srv__Setup__get_type_description+0xa0>)
 800e948:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e94c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e950:	2000      	movs	r0, #0
 800e952:	3418      	adds	r4, #24
 800e954:	f005 fb3c 	bl	8013fd0 <service_msgs__msg__ServiceEventInfo__get_type_description>
 800e958:	300c      	adds	r0, #12
 800e95a:	2301      	movs	r3, #1
 800e95c:	c807      	ldmia	r0, {r0, r1, r2}
 800e95e:	702b      	strb	r3, [r5, #0]
 800e960:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e964:	4803      	ldr	r0, [pc, #12]	; (800e974 <racs_services__srv__Setup__get_type_description+0x78>)
 800e966:	bd38      	pop	{r3, r4, r5, pc}
 800e968:	f7ff ff7e 	bl	800e868 <racs_services__srv__Setup_Event__get_type_description.part.0>
 800e96c:	e7d6      	b.n	800e91c <racs_services__srv__Setup__get_type_description+0x20>
 800e96e:	bf00      	nop
 800e970:	2000bb49 	.word	0x2000bb49
 800e974:	0801b404 	.word	0x0801b404
 800e978:	20001958 	.word	0x20001958
 800e97c:	2000bb45 	.word	0x2000bb45
 800e980:	0801b3a4 	.word	0x0801b3a4
 800e984:	20001970 	.word	0x20001970
 800e988:	2000bb48 	.word	0x2000bb48
 800e98c:	0801b3ec 	.word	0x0801b3ec
 800e990:	20001988 	.word	0x20001988
 800e994:	2000bb46 	.word	0x2000bb46
 800e998:	0801b3c8 	.word	0x0801b3c8
 800e99c:	200019a0 	.word	0x200019a0

0800e9a0 <racs_services__srv__Setup_Request__get_type_description>:
 800e9a0:	4b03      	ldr	r3, [pc, #12]	; (800e9b0 <racs_services__srv__Setup_Request__get_type_description+0x10>)
 800e9a2:	781a      	ldrb	r2, [r3, #0]
 800e9a4:	b90a      	cbnz	r2, 800e9aa <racs_services__srv__Setup_Request__get_type_description+0xa>
 800e9a6:	2201      	movs	r2, #1
 800e9a8:	701a      	strb	r2, [r3, #0]
 800e9aa:	4802      	ldr	r0, [pc, #8]	; (800e9b4 <racs_services__srv__Setup_Request__get_type_description+0x14>)
 800e9ac:	4770      	bx	lr
 800e9ae:	bf00      	nop
 800e9b0:	2000bb48 	.word	0x2000bb48
 800e9b4:	0801b3e0 	.word	0x0801b3e0

0800e9b8 <racs_services__srv__Setup_Response__get_type_description>:
 800e9b8:	4b03      	ldr	r3, [pc, #12]	; (800e9c8 <racs_services__srv__Setup_Response__get_type_description+0x10>)
 800e9ba:	781a      	ldrb	r2, [r3, #0]
 800e9bc:	b90a      	cbnz	r2, 800e9c2 <racs_services__srv__Setup_Response__get_type_description+0xa>
 800e9be:	2201      	movs	r2, #1
 800e9c0:	701a      	strb	r2, [r3, #0]
 800e9c2:	4802      	ldr	r0, [pc, #8]	; (800e9cc <racs_services__srv__Setup_Response__get_type_description+0x14>)
 800e9c4:	4770      	bx	lr
 800e9c6:	bf00      	nop
 800e9c8:	2000bb46 	.word	0x2000bb46
 800e9cc:	0801b3bc 	.word	0x0801b3bc

0800e9d0 <racs_services__srv__Setup_Event__get_type_description>:
 800e9d0:	b508      	push	{r3, lr}
 800e9d2:	4b04      	ldr	r3, [pc, #16]	; (800e9e4 <racs_services__srv__Setup_Event__get_type_description+0x14>)
 800e9d4:	781b      	ldrb	r3, [r3, #0]
 800e9d6:	b10b      	cbz	r3, 800e9dc <racs_services__srv__Setup_Event__get_type_description+0xc>
 800e9d8:	4803      	ldr	r0, [pc, #12]	; (800e9e8 <racs_services__srv__Setup_Event__get_type_description+0x18>)
 800e9da:	bd08      	pop	{r3, pc}
 800e9dc:	f7ff ff44 	bl	800e868 <racs_services__srv__Setup_Event__get_type_description.part.0>
 800e9e0:	4801      	ldr	r0, [pc, #4]	; (800e9e8 <racs_services__srv__Setup_Event__get_type_description+0x18>)
 800e9e2:	bd08      	pop	{r3, pc}
 800e9e4:	2000bb45 	.word	0x2000bb45
 800e9e8:	0801b398 	.word	0x0801b398

0800e9ec <racs_services__srv__Setup__get_type_description_sources>:
 800e9ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9f0:	4b2c      	ldr	r3, [pc, #176]	; (800eaa4 <racs_services__srv__Setup__get_type_description_sources+0xb8>)
 800e9f2:	f893 9000 	ldrb.w	r9, [r3]
 800e9f6:	f1b9 0f00 	cmp.w	r9, #0
 800e9fa:	d002      	beq.n	800ea02 <racs_services__srv__Setup__get_type_description_sources+0x16>
 800e9fc:	482a      	ldr	r0, [pc, #168]	; (800eaa8 <racs_services__srv__Setup__get_type_description_sources+0xbc>)
 800e9fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea02:	4d2a      	ldr	r5, [pc, #168]	; (800eaac <racs_services__srv__Setup__get_type_description_sources+0xc0>)
 800ea04:	4c2a      	ldr	r4, [pc, #168]	; (800eab0 <racs_services__srv__Setup__get_type_description_sources+0xc4>)
 800ea06:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 800eab8 <racs_services__srv__Setup__get_type_description_sources+0xcc>
 800ea0a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800eabc <racs_services__srv__Setup__get_type_description_sources+0xd0>
 800ea0e:	4e29      	ldr	r6, [pc, #164]	; (800eab4 <racs_services__srv__Setup__get_type_description_sources+0xc8>)
 800ea10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ea14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ea18:	682b      	ldr	r3, [r5, #0]
 800ea1a:	4625      	mov	r5, r4
 800ea1c:	4648      	mov	r0, r9
 800ea1e:	f104 0a28 	add.w	sl, r4, #40	; 0x28
 800ea22:	f845 3b04 	str.w	r3, [r5], #4
 800ea26:	f104 074c 	add.w	r7, r4, #76	; 0x4c
 800ea2a:	f005 fb3d 	bl	80140a8 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 800ea2e:	4684      	mov	ip, r0
 800ea30:	f104 0e70 	add.w	lr, r4, #112	; 0x70
 800ea34:	3494      	adds	r4, #148	; 0x94
 800ea36:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ea3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ea3c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ea40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ea42:	f8dc 3000 	ldr.w	r3, [ip]
 800ea46:	602b      	str	r3, [r5, #0]
 800ea48:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 800ea4c:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 800ea50:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 800ea54:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 800ea58:	f8db 3000 	ldr.w	r3, [fp]
 800ea5c:	f8ca 3000 	str.w	r3, [sl]
 800ea60:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800ea64:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800ea66:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800ea6a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800ea6c:	f8d8 3000 	ldr.w	r3, [r8]
 800ea70:	603b      	str	r3, [r7, #0]
 800ea72:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ea74:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ea78:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ea7a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ea7e:	6833      	ldr	r3, [r6, #0]
 800ea80:	4648      	mov	r0, r9
 800ea82:	f8ce 3000 	str.w	r3, [lr]
 800ea86:	f005 fabb 	bl	8014000 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 800ea8a:	2301      	movs	r3, #1
 800ea8c:	4a05      	ldr	r2, [pc, #20]	; (800eaa4 <racs_services__srv__Setup__get_type_description_sources+0xb8>)
 800ea8e:	4605      	mov	r5, r0
 800ea90:	7013      	strb	r3, [r2, #0]
 800ea92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ea96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ea9a:	682b      	ldr	r3, [r5, #0]
 800ea9c:	4802      	ldr	r0, [pc, #8]	; (800eaa8 <racs_services__srv__Setup__get_type_description_sources+0xbc>)
 800ea9e:	6023      	str	r3, [r4, #0]
 800eaa0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaa4:	2000bb44 	.word	0x2000bb44
 800eaa8:	0801b4dc 	.word	0x0801b4dc
 800eaac:	0801b494 	.word	0x0801b494
 800eab0:	2000bc00 	.word	0x2000bc00
 800eab4:	0801b44c 	.word	0x0801b44c
 800eab8:	0801b428 	.word	0x0801b428
 800eabc:	0801b470 	.word	0x0801b470

0800eac0 <racs_services__srv__Setup_Request__get_type_description_sources>:
 800eac0:	4b09      	ldr	r3, [pc, #36]	; (800eae8 <racs_services__srv__Setup_Request__get_type_description_sources+0x28>)
 800eac2:	781a      	ldrb	r2, [r3, #0]
 800eac4:	b96a      	cbnz	r2, 800eae2 <racs_services__srv__Setup_Request__get_type_description_sources+0x22>
 800eac6:	2201      	movs	r2, #1
 800eac8:	b430      	push	{r4, r5}
 800eaca:	4d08      	ldr	r5, [pc, #32]	; (800eaec <racs_services__srv__Setup_Request__get_type_description_sources+0x2c>)
 800eacc:	4c08      	ldr	r4, [pc, #32]	; (800eaf0 <racs_services__srv__Setup_Request__get_type_description_sources+0x30>)
 800eace:	701a      	strb	r2, [r3, #0]
 800ead0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ead2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ead4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ead6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ead8:	682b      	ldr	r3, [r5, #0]
 800eada:	4806      	ldr	r0, [pc, #24]	; (800eaf4 <racs_services__srv__Setup_Request__get_type_description_sources+0x34>)
 800eadc:	6023      	str	r3, [r4, #0]
 800eade:	bc30      	pop	{r4, r5}
 800eae0:	4770      	bx	lr
 800eae2:	4804      	ldr	r0, [pc, #16]	; (800eaf4 <racs_services__srv__Setup_Request__get_type_description_sources+0x34>)
 800eae4:	4770      	bx	lr
 800eae6:	bf00      	nop
 800eae8:	2000bb4b 	.word	0x2000bb4b
 800eaec:	0801b470 	.word	0x0801b470
 800eaf0:	2000bcfc 	.word	0x2000bcfc
 800eaf4:	0801b4d0 	.word	0x0801b4d0

0800eaf8 <racs_services__srv__Setup_Response__get_type_description_sources>:
 800eaf8:	4b09      	ldr	r3, [pc, #36]	; (800eb20 <racs_services__srv__Setup_Response__get_type_description_sources+0x28>)
 800eafa:	781a      	ldrb	r2, [r3, #0]
 800eafc:	b96a      	cbnz	r2, 800eb1a <racs_services__srv__Setup_Response__get_type_description_sources+0x22>
 800eafe:	2201      	movs	r2, #1
 800eb00:	b430      	push	{r4, r5}
 800eb02:	4d08      	ldr	r5, [pc, #32]	; (800eb24 <racs_services__srv__Setup_Response__get_type_description_sources+0x2c>)
 800eb04:	4c08      	ldr	r4, [pc, #32]	; (800eb28 <racs_services__srv__Setup_Response__get_type_description_sources+0x30>)
 800eb06:	701a      	strb	r2, [r3, #0]
 800eb08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb10:	682b      	ldr	r3, [r5, #0]
 800eb12:	4806      	ldr	r0, [pc, #24]	; (800eb2c <racs_services__srv__Setup_Response__get_type_description_sources+0x34>)
 800eb14:	6023      	str	r3, [r4, #0]
 800eb16:	bc30      	pop	{r4, r5}
 800eb18:	4770      	bx	lr
 800eb1a:	4804      	ldr	r0, [pc, #16]	; (800eb2c <racs_services__srv__Setup_Response__get_type_description_sources+0x34>)
 800eb1c:	4770      	bx	lr
 800eb1e:	bf00      	nop
 800eb20:	2000bb4a 	.word	0x2000bb4a
 800eb24:	0801b44c 	.word	0x0801b44c
 800eb28:	2000bcd8 	.word	0x2000bcd8
 800eb2c:	0801b4c4 	.word	0x0801b4c4

0800eb30 <racs_services__srv__Setup_Event__get_type_description_sources>:
 800eb30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb34:	4e27      	ldr	r6, [pc, #156]	; (800ebd4 <racs_services__srv__Setup_Event__get_type_description_sources+0xa4>)
 800eb36:	f896 8000 	ldrb.w	r8, [r6]
 800eb3a:	f1b8 0f00 	cmp.w	r8, #0
 800eb3e:	d002      	beq.n	800eb46 <racs_services__srv__Setup_Event__get_type_description_sources+0x16>
 800eb40:	4825      	ldr	r0, [pc, #148]	; (800ebd8 <racs_services__srv__Setup_Event__get_type_description_sources+0xa8>)
 800eb42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb46:	4d25      	ldr	r5, [pc, #148]	; (800ebdc <racs_services__srv__Setup_Event__get_type_description_sources+0xac>)
 800eb48:	4c25      	ldr	r4, [pc, #148]	; (800ebe0 <racs_services__srv__Setup_Event__get_type_description_sources+0xb0>)
 800eb4a:	f8df a09c 	ldr.w	sl, [pc, #156]	; 800ebe8 <racs_services__srv__Setup_Event__get_type_description_sources+0xb8>
 800eb4e:	4f25      	ldr	r7, [pc, #148]	; (800ebe4 <racs_services__srv__Setup_Event__get_type_description_sources+0xb4>)
 800eb50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb58:	682b      	ldr	r3, [r5, #0]
 800eb5a:	4625      	mov	r5, r4
 800eb5c:	4640      	mov	r0, r8
 800eb5e:	f104 0928 	add.w	r9, r4, #40	; 0x28
 800eb62:	f845 3b04 	str.w	r3, [r5], #4
 800eb66:	f005 fa9f 	bl	80140a8 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 800eb6a:	4684      	mov	ip, r0
 800eb6c:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 800eb70:	3470      	adds	r4, #112	; 0x70
 800eb72:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800eb76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800eb78:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800eb7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800eb7e:	f8dc 3000 	ldr.w	r3, [ip]
 800eb82:	602b      	str	r3, [r5, #0]
 800eb84:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 800eb88:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 800eb8c:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 800eb90:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 800eb94:	f8da 3000 	ldr.w	r3, [sl]
 800eb98:	f8c9 3000 	str.w	r3, [r9]
 800eb9c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800eb9e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800eba2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800eba4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	4640      	mov	r0, r8
 800ebac:	f8ce 3000 	str.w	r3, [lr]
 800ebb0:	f005 fa26 	bl	8014000 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 800ebb4:	2301      	movs	r3, #1
 800ebb6:	4684      	mov	ip, r0
 800ebb8:	7033      	strb	r3, [r6, #0]
 800ebba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ebbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ebc0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ebc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ebc6:	f8dc 3000 	ldr.w	r3, [ip]
 800ebca:	4803      	ldr	r0, [pc, #12]	; (800ebd8 <racs_services__srv__Setup_Event__get_type_description_sources+0xa8>)
 800ebcc:	6023      	str	r3, [r4, #0]
 800ebce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebd2:	bf00      	nop
 800ebd4:	2000bb47 	.word	0x2000bb47
 800ebd8:	0801b4b8 	.word	0x0801b4b8
 800ebdc:	0801b428 	.word	0x0801b428
 800ebe0:	2000bb4c 	.word	0x2000bb4c
 800ebe4:	0801b44c 	.word	0x0801b44c
 800ebe8:	0801b470 	.word	0x0801b470

0800ebec <racs_services__srv__Setup_Event__fini.part.0>:
 800ebec:	b510      	push	{r4, lr}
 800ebee:	b086      	sub	sp, #24
 800ebf0:	4604      	mov	r4, r0
 800ebf2:	f005 fa43 	bl	801407c <service_msgs__msg__ServiceEventInfo__fini>
 800ebf6:	a801      	add	r0, sp, #4
 800ebf8:	f7fd fab0 	bl	800c15c <rcutils_get_default_allocator>
 800ebfc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800ebfe:	b130      	cbz	r0, 800ec0e <racs_services__srv__Setup_Event__fini.part.0+0x22>
 800ec00:	9b02      	ldr	r3, [sp, #8]
 800ec02:	9905      	ldr	r1, [sp, #20]
 800ec04:	4798      	blx	r3
 800ec06:	2300      	movs	r3, #0
 800ec08:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 800ec0c:	6323      	str	r3, [r4, #48]	; 0x30
 800ec0e:	a801      	add	r0, sp, #4
 800ec10:	f7fd faa4 	bl	800c15c <rcutils_get_default_allocator>
 800ec14:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800ec16:	b130      	cbz	r0, 800ec26 <racs_services__srv__Setup_Event__fini.part.0+0x3a>
 800ec18:	9b02      	ldr	r3, [sp, #8]
 800ec1a:	9905      	ldr	r1, [sp, #20]
 800ec1c:	4798      	blx	r3
 800ec1e:	2300      	movs	r3, #0
 800ec20:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 800ec24:	63e3      	str	r3, [r4, #60]	; 0x3c
 800ec26:	b006      	add	sp, #24
 800ec28:	bd10      	pop	{r4, pc}
 800ec2a:	bf00      	nop

0800ec2c <racs_services__srv__Setup_Request__init>:
 800ec2c:	3800      	subs	r0, #0
 800ec2e:	bf18      	it	ne
 800ec30:	2001      	movne	r0, #1
 800ec32:	4770      	bx	lr

0800ec34 <racs_services__srv__Setup_Request__fini>:
 800ec34:	4770      	bx	lr
 800ec36:	bf00      	nop

0800ec38 <racs_services__srv__Setup_Request__copy>:
 800ec38:	4603      	mov	r3, r0
 800ec3a:	b1a0      	cbz	r0, 800ec66 <racs_services__srv__Setup_Request__copy+0x2e>
 800ec3c:	b199      	cbz	r1, 800ec66 <racs_services__srv__Setup_Request__copy+0x2e>
 800ec3e:	7802      	ldrb	r2, [r0, #0]
 800ec40:	2001      	movs	r0, #1
 800ec42:	700a      	strb	r2, [r1, #0]
 800ec44:	689a      	ldr	r2, [r3, #8]
 800ec46:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800ec4a:	608a      	str	r2, [r1, #8]
 800ec4c:	691a      	ldr	r2, [r3, #16]
 800ec4e:	f8c1 c004 	str.w	ip, [r1, #4]
 800ec52:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800ec56:	610a      	str	r2, [r1, #16]
 800ec58:	695a      	ldr	r2, [r3, #20]
 800ec5a:	699b      	ldr	r3, [r3, #24]
 800ec5c:	f8c1 c00c 	str.w	ip, [r1, #12]
 800ec60:	614a      	str	r2, [r1, #20]
 800ec62:	618b      	str	r3, [r1, #24]
 800ec64:	4770      	bx	lr
 800ec66:	2000      	movs	r0, #0
 800ec68:	4770      	bx	lr
 800ec6a:	bf00      	nop

0800ec6c <racs_services__srv__Setup_Request__Sequence__init>:
 800ec6c:	b530      	push	{r4, r5, lr}
 800ec6e:	4604      	mov	r4, r0
 800ec70:	b087      	sub	sp, #28
 800ec72:	b148      	cbz	r0, 800ec88 <racs_services__srv__Setup_Request__Sequence__init+0x1c>
 800ec74:	460d      	mov	r5, r1
 800ec76:	a801      	add	r0, sp, #4
 800ec78:	f7fd fa70 	bl	800c15c <rcutils_get_default_allocator>
 800ec7c:	b935      	cbnz	r5, 800ec8c <racs_services__srv__Setup_Request__Sequence__init+0x20>
 800ec7e:	462b      	mov	r3, r5
 800ec80:	2001      	movs	r0, #1
 800ec82:	60a5      	str	r5, [r4, #8]
 800ec84:	e9c4 3500 	strd	r3, r5, [r4]
 800ec88:	b007      	add	sp, #28
 800ec8a:	bd30      	pop	{r4, r5, pc}
 800ec8c:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800ec90:	211c      	movs	r1, #28
 800ec92:	4628      	mov	r0, r5
 800ec94:	4798      	blx	r3
 800ec96:	4603      	mov	r3, r0
 800ec98:	2800      	cmp	r0, #0
 800ec9a:	d1f1      	bne.n	800ec80 <racs_services__srv__Setup_Request__Sequence__init+0x14>
 800ec9c:	e7f4      	b.n	800ec88 <racs_services__srv__Setup_Request__Sequence__init+0x1c>
 800ec9e:	bf00      	nop

0800eca0 <racs_services__srv__Setup_Request__Sequence__fini>:
 800eca0:	b180      	cbz	r0, 800ecc4 <racs_services__srv__Setup_Request__Sequence__fini+0x24>
 800eca2:	b510      	push	{r4, lr}
 800eca4:	b086      	sub	sp, #24
 800eca6:	4604      	mov	r4, r0
 800eca8:	a801      	add	r0, sp, #4
 800ecaa:	f7fd fa57 	bl	800c15c <rcutils_get_default_allocator>
 800ecae:	6820      	ldr	r0, [r4, #0]
 800ecb0:	b130      	cbz	r0, 800ecc0 <racs_services__srv__Setup_Request__Sequence__fini+0x20>
 800ecb2:	9b02      	ldr	r3, [sp, #8]
 800ecb4:	9905      	ldr	r1, [sp, #20]
 800ecb6:	4798      	blx	r3
 800ecb8:	2300      	movs	r3, #0
 800ecba:	e9c4 3300 	strd	r3, r3, [r4]
 800ecbe:	60a3      	str	r3, [r4, #8]
 800ecc0:	b006      	add	sp, #24
 800ecc2:	bd10      	pop	{r4, pc}
 800ecc4:	4770      	bx	lr
 800ecc6:	bf00      	nop

0800ecc8 <racs_services__srv__Setup_Response__init>:
 800ecc8:	3800      	subs	r0, #0
 800ecca:	bf18      	it	ne
 800eccc:	2001      	movne	r0, #1
 800ecce:	4770      	bx	lr

0800ecd0 <racs_services__srv__Setup_Response__fini>:
 800ecd0:	4770      	bx	lr
 800ecd2:	bf00      	nop

0800ecd4 <racs_services__srv__Setup_Response__copy>:
 800ecd4:	b120      	cbz	r0, 800ece0 <racs_services__srv__Setup_Response__copy+0xc>
 800ecd6:	b119      	cbz	r1, 800ece0 <racs_services__srv__Setup_Response__copy+0xc>
 800ecd8:	7803      	ldrb	r3, [r0, #0]
 800ecda:	2001      	movs	r0, #1
 800ecdc:	700b      	strb	r3, [r1, #0]
 800ecde:	4770      	bx	lr
 800ece0:	2000      	movs	r0, #0
 800ece2:	4770      	bx	lr

0800ece4 <racs_services__srv__Setup_Response__Sequence__init>:
 800ece4:	b530      	push	{r4, r5, lr}
 800ece6:	4604      	mov	r4, r0
 800ece8:	b087      	sub	sp, #28
 800ecea:	b148      	cbz	r0, 800ed00 <racs_services__srv__Setup_Response__Sequence__init+0x1c>
 800ecec:	460d      	mov	r5, r1
 800ecee:	a801      	add	r0, sp, #4
 800ecf0:	f7fd fa34 	bl	800c15c <rcutils_get_default_allocator>
 800ecf4:	b935      	cbnz	r5, 800ed04 <racs_services__srv__Setup_Response__Sequence__init+0x20>
 800ecf6:	462b      	mov	r3, r5
 800ecf8:	2001      	movs	r0, #1
 800ecfa:	60a5      	str	r5, [r4, #8]
 800ecfc:	e9c4 3500 	strd	r3, r5, [r4]
 800ed00:	b007      	add	sp, #28
 800ed02:	bd30      	pop	{r4, r5, pc}
 800ed04:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800ed08:	2101      	movs	r1, #1
 800ed0a:	4628      	mov	r0, r5
 800ed0c:	4798      	blx	r3
 800ed0e:	4603      	mov	r3, r0
 800ed10:	2800      	cmp	r0, #0
 800ed12:	d1f1      	bne.n	800ecf8 <racs_services__srv__Setup_Response__Sequence__init+0x14>
 800ed14:	e7f4      	b.n	800ed00 <racs_services__srv__Setup_Response__Sequence__init+0x1c>
 800ed16:	bf00      	nop

0800ed18 <racs_services__srv__Setup_Response__Sequence__fini>:
 800ed18:	b180      	cbz	r0, 800ed3c <racs_services__srv__Setup_Response__Sequence__fini+0x24>
 800ed1a:	b510      	push	{r4, lr}
 800ed1c:	b086      	sub	sp, #24
 800ed1e:	4604      	mov	r4, r0
 800ed20:	a801      	add	r0, sp, #4
 800ed22:	f7fd fa1b 	bl	800c15c <rcutils_get_default_allocator>
 800ed26:	6820      	ldr	r0, [r4, #0]
 800ed28:	b130      	cbz	r0, 800ed38 <racs_services__srv__Setup_Response__Sequence__fini+0x20>
 800ed2a:	9b02      	ldr	r3, [sp, #8]
 800ed2c:	9905      	ldr	r1, [sp, #20]
 800ed2e:	4798      	blx	r3
 800ed30:	2300      	movs	r3, #0
 800ed32:	e9c4 3300 	strd	r3, r3, [r4]
 800ed36:	60a3      	str	r3, [r4, #8]
 800ed38:	b006      	add	sp, #24
 800ed3a:	bd10      	pop	{r4, pc}
 800ed3c:	4770      	bx	lr
 800ed3e:	bf00      	nop

0800ed40 <racs_services__srv__Setup_Event__init>:
 800ed40:	b570      	push	{r4, r5, r6, lr}
 800ed42:	4604      	mov	r4, r0
 800ed44:	b086      	sub	sp, #24
 800ed46:	b1c8      	cbz	r0, 800ed7c <racs_services__srv__Setup_Event__init+0x3c>
 800ed48:	f005 f986 	bl	8014058 <service_msgs__msg__ServiceEventInfo__init>
 800ed4c:	4605      	mov	r5, r0
 800ed4e:	b178      	cbz	r0, 800ed70 <racs_services__srv__Setup_Event__init+0x30>
 800ed50:	2600      	movs	r6, #0
 800ed52:	a801      	add	r0, sp, #4
 800ed54:	f7fd fa02 	bl	800c15c <rcutils_get_default_allocator>
 800ed58:	a801      	add	r0, sp, #4
 800ed5a:	6326      	str	r6, [r4, #48]	; 0x30
 800ed5c:	e9c4 660a 	strd	r6, r6, [r4, #40]	; 0x28
 800ed60:	f7fd f9fc 	bl	800c15c <rcutils_get_default_allocator>
 800ed64:	4628      	mov	r0, r5
 800ed66:	63e6      	str	r6, [r4, #60]	; 0x3c
 800ed68:	e9c4 660d 	strd	r6, r6, [r4, #52]	; 0x34
 800ed6c:	b006      	add	sp, #24
 800ed6e:	bd70      	pop	{r4, r5, r6, pc}
 800ed70:	4620      	mov	r0, r4
 800ed72:	f7ff ff3b 	bl	800ebec <racs_services__srv__Setup_Event__fini.part.0>
 800ed76:	4628      	mov	r0, r5
 800ed78:	b006      	add	sp, #24
 800ed7a:	bd70      	pop	{r4, r5, r6, pc}
 800ed7c:	4605      	mov	r5, r0
 800ed7e:	4628      	mov	r0, r5
 800ed80:	b006      	add	sp, #24
 800ed82:	bd70      	pop	{r4, r5, r6, pc}

0800ed84 <racs_services__srv__Setup_Event__fini>:
 800ed84:	b1f0      	cbz	r0, 800edc4 <racs_services__srv__Setup_Event__fini+0x40>
 800ed86:	b510      	push	{r4, lr}
 800ed88:	b086      	sub	sp, #24
 800ed8a:	4604      	mov	r4, r0
 800ed8c:	f005 f976 	bl	801407c <service_msgs__msg__ServiceEventInfo__fini>
 800ed90:	a801      	add	r0, sp, #4
 800ed92:	f7fd f9e3 	bl	800c15c <rcutils_get_default_allocator>
 800ed96:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800ed98:	b130      	cbz	r0, 800eda8 <racs_services__srv__Setup_Event__fini+0x24>
 800ed9a:	9b02      	ldr	r3, [sp, #8]
 800ed9c:	9905      	ldr	r1, [sp, #20]
 800ed9e:	4798      	blx	r3
 800eda0:	2300      	movs	r3, #0
 800eda2:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 800eda6:	6323      	str	r3, [r4, #48]	; 0x30
 800eda8:	a801      	add	r0, sp, #4
 800edaa:	f7fd f9d7 	bl	800c15c <rcutils_get_default_allocator>
 800edae:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800edb0:	b130      	cbz	r0, 800edc0 <racs_services__srv__Setup_Event__fini+0x3c>
 800edb2:	9b02      	ldr	r3, [sp, #8]
 800edb4:	9905      	ldr	r1, [sp, #20]
 800edb6:	4798      	blx	r3
 800edb8:	2300      	movs	r3, #0
 800edba:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 800edbe:	63e3      	str	r3, [r4, #60]	; 0x3c
 800edc0:	b006      	add	sp, #24
 800edc2:	bd10      	pop	{r4, pc}
 800edc4:	4770      	bx	lr
 800edc6:	bf00      	nop

0800edc8 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup>:
 800edc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edcc:	2900      	cmp	r1, #0
 800edce:	d04d      	beq.n	800ee6c <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0xa4>
 800edd0:	4605      	mov	r5, r0
 800edd2:	2800      	cmp	r0, #0
 800edd4:	d04a      	beq.n	800ee6c <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0xa4>
 800edd6:	460e      	mov	r6, r1
 800edd8:	4698      	mov	r8, r3
 800edda:	2040      	movs	r0, #64	; 0x40
 800eddc:	680b      	ldr	r3, [r1, #0]
 800edde:	6909      	ldr	r1, [r1, #16]
 800ede0:	4617      	mov	r7, r2
 800ede2:	4798      	blx	r3
 800ede4:	4604      	mov	r4, r0
 800ede6:	f7ff ffab 	bl	800ed40 <racs_services__srv__Setup_Event__init>
 800edea:	4684      	mov	ip, r0
 800edec:	b370      	cbz	r0, 800ee4c <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x84>
 800edee:	782b      	ldrb	r3, [r5, #0]
 800edf0:	7023      	strb	r3, [r4, #0]
 800edf2:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 800edf6:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 800edfa:	e9c4 2301 	strd	r2, r3, [r4, #4]
 800edfe:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800ee02:	68e8      	ldr	r0, [r5, #12]
 800ee04:	6929      	ldr	r1, [r5, #16]
 800ee06:	696a      	ldr	r2, [r5, #20]
 800ee08:	69ab      	ldr	r3, [r5, #24]
 800ee0a:	60e0      	str	r0, [r4, #12]
 800ee0c:	6121      	str	r1, [r4, #16]
 800ee0e:	6162      	str	r2, [r4, #20]
 800ee10:	61a3      	str	r3, [r4, #24]
 800ee12:	b157      	cbz	r7, 800ee2a <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x62>
 800ee14:	2101      	movs	r1, #1
 800ee16:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800ee1a:	f7ff ff27 	bl	800ec6c <racs_services__srv__Setup_Request__Sequence__init>
 800ee1e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800ee20:	4638      	mov	r0, r7
 800ee22:	f7ff ff09 	bl	800ec38 <racs_services__srv__Setup_Request__copy>
 800ee26:	4603      	mov	r3, r0
 800ee28:	b1c0      	cbz	r0, 800ee5c <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x94>
 800ee2a:	f1b8 0f00 	cmp.w	r8, #0
 800ee2e:	d00a      	beq.n	800ee46 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x7e>
 800ee30:	2101      	movs	r1, #1
 800ee32:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800ee36:	f7ff ff55 	bl	800ece4 <racs_services__srv__Setup_Response__Sequence__init>
 800ee3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ee3c:	4640      	mov	r0, r8
 800ee3e:	f7ff ff49 	bl	800ecd4 <racs_services__srv__Setup_Response__copy>
 800ee42:	4603      	mov	r3, r0
 800ee44:	b150      	cbz	r0, 800ee5c <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x94>
 800ee46:	4620      	mov	r0, r4
 800ee48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee4c:	4620      	mov	r0, r4
 800ee4e:	4664      	mov	r4, ip
 800ee50:	6873      	ldr	r3, [r6, #4]
 800ee52:	6931      	ldr	r1, [r6, #16]
 800ee54:	4798      	blx	r3
 800ee56:	4620      	mov	r0, r4
 800ee58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee5c:	4620      	mov	r0, r4
 800ee5e:	461c      	mov	r4, r3
 800ee60:	6872      	ldr	r2, [r6, #4]
 800ee62:	6931      	ldr	r1, [r6, #16]
 800ee64:	4790      	blx	r2
 800ee66:	4620      	mov	r0, r4
 800ee68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee6c:	2400      	movs	r4, #0
 800ee6e:	4620      	mov	r0, r4
 800ee70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ee74 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup>:
 800ee74:	b1b9      	cbz	r1, 800eea6 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x32>
 800ee76:	b538      	push	{r3, r4, r5, lr}
 800ee78:	4605      	mov	r5, r0
 800ee7a:	b190      	cbz	r0, 800eea2 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x2e>
 800ee7c:	460c      	mov	r4, r1
 800ee7e:	f7ff ff81 	bl	800ed84 <racs_services__srv__Setup_Event__fini>
 800ee82:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800ee84:	b110      	cbz	r0, 800ee8c <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x18>
 800ee86:	6863      	ldr	r3, [r4, #4]
 800ee88:	6921      	ldr	r1, [r4, #16]
 800ee8a:	4798      	blx	r3
 800ee8c:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800ee8e:	b110      	cbz	r0, 800ee96 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x22>
 800ee90:	6863      	ldr	r3, [r4, #4]
 800ee92:	6921      	ldr	r1, [r4, #16]
 800ee94:	4798      	blx	r3
 800ee96:	4628      	mov	r0, r5
 800ee98:	6863      	ldr	r3, [r4, #4]
 800ee9a:	6921      	ldr	r1, [r4, #16]
 800ee9c:	4798      	blx	r3
 800ee9e:	2001      	movs	r0, #1
 800eea0:	bd38      	pop	{r3, r4, r5, pc}
 800eea2:	2000      	movs	r0, #0
 800eea4:	bd38      	pop	{r3, r4, r5, pc}
 800eea6:	2000      	movs	r0, #0
 800eea8:	4770      	bx	lr
 800eeaa:	bf00      	nop

0800eeac <rcl_client_get_rmw_handle>:
 800eeac:	b118      	cbz	r0, 800eeb6 <rcl_client_get_rmw_handle+0xa>
 800eeae:	6800      	ldr	r0, [r0, #0]
 800eeb0:	b108      	cbz	r0, 800eeb6 <rcl_client_get_rmw_handle+0xa>
 800eeb2:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800eeb6:	4770      	bx	lr

0800eeb8 <rcl_send_request>:
 800eeb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eeba:	b08b      	sub	sp, #44	; 0x2c
 800eebc:	b1e8      	cbz	r0, 800eefa <rcl_send_request+0x42>
 800eebe:	4604      	mov	r4, r0
 800eec0:	6800      	ldr	r0, [r0, #0]
 800eec2:	b1d0      	cbz	r0, 800eefa <rcl_send_request+0x42>
 800eec4:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800eec8:	b1bb      	cbz	r3, 800eefa <rcl_send_request+0x42>
 800eeca:	460f      	mov	r7, r1
 800eecc:	b1d1      	cbz	r1, 800ef04 <rcl_send_request+0x4c>
 800eece:	4615      	mov	r5, r2
 800eed0:	b1c2      	cbz	r2, 800ef04 <rcl_send_request+0x4c>
 800eed2:	2105      	movs	r1, #5
 800eed4:	f500 7088 	add.w	r0, r0, #272	; 0x110
 800eed8:	f002 fef2 	bl	8011cc0 <__atomic_load_8>
 800eedc:	6823      	ldr	r3, [r4, #0]
 800eede:	462a      	mov	r2, r5
 800eee0:	e9c5 0100 	strd	r0, r1, [r5]
 800eee4:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800eee8:	4639      	mov	r1, r7
 800eeea:	f003 ffc9 	bl	8012e80 <rmw_send_request>
 800eeee:	4606      	mov	r6, r0
 800eef0:	b160      	cbz	r0, 800ef0c <rcl_send_request+0x54>
 800eef2:	2601      	movs	r6, #1
 800eef4:	4630      	mov	r0, r6
 800eef6:	b00b      	add	sp, #44	; 0x2c
 800eef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eefa:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 800eefe:	4630      	mov	r0, r6
 800ef00:	b00b      	add	sp, #44	; 0x2c
 800ef02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef04:	260b      	movs	r6, #11
 800ef06:	4630      	mov	r0, r6
 800ef08:	b00b      	add	sp, #44	; 0x2c
 800ef0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef0c:	6820      	ldr	r0, [r4, #0]
 800ef0e:	2305      	movs	r3, #5
 800ef10:	f500 7088 	add.w	r0, r0, #272	; 0x110
 800ef14:	9300      	str	r3, [sp, #0]
 800ef16:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ef1a:	f002 ff3d 	bl	8011d98 <__atomic_exchange_8>
 800ef1e:	6823      	ldr	r3, [r4, #0]
 800ef20:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800ef24:	2a00      	cmp	r2, #0
 800ef26:	d0e5      	beq.n	800eef4 <rcl_send_request+0x3c>
 800ef28:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800ef2c:	a905      	add	r1, sp, #20
 800ef2e:	f003 fbe1 	bl	80126f4 <rmw_get_gid_for_client>
 800ef32:	b970      	cbnz	r0, 800ef52 <rcl_send_request+0x9a>
 800ef34:	6820      	ldr	r0, [r4, #0]
 800ef36:	ab06      	add	r3, sp, #24
 800ef38:	4631      	mov	r1, r6
 800ef3a:	463a      	mov	r2, r7
 800ef3c:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
 800ef40:	9302      	str	r3, [sp, #8]
 800ef42:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ef46:	e9cd 4500 	strd	r4, r5, [sp]
 800ef4a:	f001 f825 	bl	800ff98 <rcl_send_service_event_message>
 800ef4e:	4606      	mov	r6, r0
 800ef50:	e7d0      	b.n	800eef4 <rcl_send_request+0x3c>
 800ef52:	f000 f877 	bl	800f044 <rcl_convert_rmw_ret_to_rcl_ret>
 800ef56:	4606      	mov	r6, r0
 800ef58:	e7cc      	b.n	800eef4 <rcl_send_request+0x3c>
 800ef5a:	bf00      	nop
 800ef5c:	0000      	movs	r0, r0
	...

0800ef60 <rcl_take_response>:
 800ef60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef62:	468e      	mov	lr, r1
 800ef64:	b095      	sub	sp, #84	; 0x54
 800ef66:	460c      	mov	r4, r1
 800ef68:	4616      	mov	r6, r2
 800ef6a:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 800ef6e:	4605      	mov	r5, r0
 800ef70:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ef74:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ef78:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800ef7c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ef80:	2d00      	cmp	r5, #0
 800ef82:	d042      	beq.n	800f00a <rcl_take_response+0xaa>
 800ef84:	682b      	ldr	r3, [r5, #0]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d03f      	beq.n	800f00a <rcl_take_response+0xaa>
 800ef8a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800ef8e:	2800      	cmp	r0, #0
 800ef90:	d03b      	beq.n	800f00a <rcl_take_response+0xaa>
 800ef92:	2e00      	cmp	r6, #0
 800ef94:	d03c      	beq.n	800f010 <rcl_take_response+0xb0>
 800ef96:	2300      	movs	r3, #0
 800ef98:	4632      	mov	r2, r6
 800ef9a:	a90a      	add	r1, sp, #40	; 0x28
 800ef9c:	f88d 3013 	strb.w	r3, [sp, #19]
 800efa0:	f10d 0313 	add.w	r3, sp, #19
 800efa4:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800f028 <rcl_take_response+0xc8>
 800efa8:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800efac:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800efb0:	f004 f86e 	bl	8013090 <rmw_take_response>
 800efb4:	4607      	mov	r7, r0
 800efb6:	bb68      	cbnz	r0, 800f014 <rcl_take_response+0xb4>
 800efb8:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800efbc:	b363      	cbz	r3, 800f018 <rcl_take_response+0xb8>
 800efbe:	682b      	ldr	r3, [r5, #0]
 800efc0:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800efc4:	b19a      	cbz	r2, 800efee <rcl_take_response+0x8e>
 800efc6:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800efca:	a905      	add	r1, sp, #20
 800efcc:	f003 fb92 	bl	80126f4 <rmw_get_gid_for_client>
 800efd0:	bb28      	cbnz	r0, 800f01e <rcl_take_response+0xbe>
 800efd2:	6829      	ldr	r1, [r5, #0]
 800efd4:	ab06      	add	r3, sp, #24
 800efd6:	4632      	mov	r2, r6
 800efd8:	f8d1 0118 	ldr.w	r0, [r1, #280]	; 0x118
 800efdc:	2103      	movs	r1, #3
 800efde:	9302      	str	r3, [sp, #8]
 800efe0:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800efe4:	e9cd 6700 	strd	r6, r7, [sp]
 800efe8:	f000 ffd6 	bl	800ff98 <rcl_send_service_event_message>
 800efec:	4607      	mov	r7, r0
 800efee:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
 800eff2:	46a4      	mov	ip, r4
 800eff4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800eff8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800effc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f000:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f004:	4638      	mov	r0, r7
 800f006:	b015      	add	sp, #84	; 0x54
 800f008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f00a:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
 800f00e:	e7ee      	b.n	800efee <rcl_take_response+0x8e>
 800f010:	270b      	movs	r7, #11
 800f012:	e7ec      	b.n	800efee <rcl_take_response+0x8e>
 800f014:	2701      	movs	r7, #1
 800f016:	e7ea      	b.n	800efee <rcl_take_response+0x8e>
 800f018:	f240 17f5 	movw	r7, #501	; 0x1f5
 800f01c:	e7e7      	b.n	800efee <rcl_take_response+0x8e>
 800f01e:	f000 f811 	bl	800f044 <rcl_convert_rmw_ret_to_rcl_ret>
 800f022:	4607      	mov	r7, r0
 800f024:	e7e3      	b.n	800efee <rcl_take_response+0x8e>
 800f026:	bf00      	nop
	...

0800f030 <rcl_client_is_valid>:
 800f030:	b130      	cbz	r0, 800f040 <rcl_client_is_valid+0x10>
 800f032:	6800      	ldr	r0, [r0, #0]
 800f034:	b120      	cbz	r0, 800f040 <rcl_client_is_valid+0x10>
 800f036:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800f03a:	3800      	subs	r0, #0
 800f03c:	bf18      	it	ne
 800f03e:	2001      	movne	r0, #1
 800f040:	4770      	bx	lr
 800f042:	bf00      	nop

0800f044 <rcl_convert_rmw_ret_to_rcl_ret>:
 800f044:	280b      	cmp	r0, #11
 800f046:	dc0d      	bgt.n	800f064 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800f048:	2800      	cmp	r0, #0
 800f04a:	db09      	blt.n	800f060 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800f04c:	280b      	cmp	r0, #11
 800f04e:	d807      	bhi.n	800f060 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800f050:	e8df f000 	tbb	[pc, r0]
 800f054:	07060607 	.word	0x07060607
 800f058:	06060606 	.word	0x06060606
 800f05c:	07070606 	.word	0x07070606
 800f060:	2001      	movs	r0, #1
 800f062:	4770      	bx	lr
 800f064:	28cb      	cmp	r0, #203	; 0xcb
 800f066:	bf18      	it	ne
 800f068:	2001      	movne	r0, #1
 800f06a:	4770      	bx	lr

0800f06c <rcl_get_zero_initialized_context>:
 800f06c:	4a03      	ldr	r2, [pc, #12]	; (800f07c <rcl_get_zero_initialized_context+0x10>)
 800f06e:	4603      	mov	r3, r0
 800f070:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f074:	e883 0003 	stmia.w	r3, {r0, r1}
 800f078:	4618      	mov	r0, r3
 800f07a:	4770      	bx	lr
 800f07c:	0801b4e8 	.word	0x0801b4e8

0800f080 <rcl_context_is_valid>:
 800f080:	b118      	cbz	r0, 800f08a <rcl_context_is_valid+0xa>
 800f082:	6840      	ldr	r0, [r0, #4]
 800f084:	3800      	subs	r0, #0
 800f086:	bf18      	it	ne
 800f088:	2001      	movne	r0, #1
 800f08a:	4770      	bx	lr

0800f08c <__cleanup_context>:
 800f08c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f090:	4606      	mov	r6, r0
 800f092:	2300      	movs	r3, #0
 800f094:	6800      	ldr	r0, [r0, #0]
 800f096:	6073      	str	r3, [r6, #4]
 800f098:	2800      	cmp	r0, #0
 800f09a:	d049      	beq.n	800f130 <__cleanup_context+0xa4>
 800f09c:	6947      	ldr	r7, [r0, #20]
 800f09e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800f0a2:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800f0a6:	b137      	cbz	r7, 800f0b6 <__cleanup_context+0x2a>
 800f0a8:	3014      	adds	r0, #20
 800f0aa:	f000 f9e7 	bl	800f47c <rcl_init_options_fini>
 800f0ae:	4607      	mov	r7, r0
 800f0b0:	2800      	cmp	r0, #0
 800f0b2:	d144      	bne.n	800f13e <__cleanup_context+0xb2>
 800f0b4:	6830      	ldr	r0, [r6, #0]
 800f0b6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800f0b8:	b143      	cbz	r3, 800f0cc <__cleanup_context+0x40>
 800f0ba:	3028      	adds	r0, #40	; 0x28
 800f0bc:	f003 fd44 	bl	8012b48 <rmw_context_fini>
 800f0c0:	b118      	cbz	r0, 800f0ca <__cleanup_context+0x3e>
 800f0c2:	2f00      	cmp	r7, #0
 800f0c4:	d03e      	beq.n	800f144 <__cleanup_context+0xb8>
 800f0c6:	f7fd f87b 	bl	800c1c0 <rcutils_reset_error>
 800f0ca:	6830      	ldr	r0, [r6, #0]
 800f0cc:	6a03      	ldr	r3, [r0, #32]
 800f0ce:	b1db      	cbz	r3, 800f108 <__cleanup_context+0x7c>
 800f0d0:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800f0d4:	2a01      	cmp	r2, #1
 800f0d6:	f17c 0100 	sbcs.w	r1, ip, #0
 800f0da:	db11      	blt.n	800f100 <__cleanup_context+0x74>
 800f0dc:	2400      	movs	r4, #0
 800f0de:	4625      	mov	r5, r4
 800f0e0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f0e4:	4649      	mov	r1, r9
 800f0e6:	b1b8      	cbz	r0, 800f118 <__cleanup_context+0x8c>
 800f0e8:	47c0      	blx	r8
 800f0ea:	6833      	ldr	r3, [r6, #0]
 800f0ec:	3401      	adds	r4, #1
 800f0ee:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800f0f2:	f145 0500 	adc.w	r5, r5, #0
 800f0f6:	6a1b      	ldr	r3, [r3, #32]
 800f0f8:	4294      	cmp	r4, r2
 800f0fa:	eb75 010c 	sbcs.w	r1, r5, ip
 800f0fe:	dbef      	blt.n	800f0e0 <__cleanup_context+0x54>
 800f100:	4618      	mov	r0, r3
 800f102:	4649      	mov	r1, r9
 800f104:	47c0      	blx	r8
 800f106:	6830      	ldr	r0, [r6, #0]
 800f108:	4649      	mov	r1, r9
 800f10a:	47c0      	blx	r8
 800f10c:	2300      	movs	r3, #0
 800f10e:	4638      	mov	r0, r7
 800f110:	e9c6 3300 	strd	r3, r3, [r6]
 800f114:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f118:	3401      	adds	r4, #1
 800f11a:	f145 0500 	adc.w	r5, r5, #0
 800f11e:	4294      	cmp	r4, r2
 800f120:	eb75 010c 	sbcs.w	r1, r5, ip
 800f124:	dbdc      	blt.n	800f0e0 <__cleanup_context+0x54>
 800f126:	4618      	mov	r0, r3
 800f128:	4649      	mov	r1, r9
 800f12a:	47c0      	blx	r8
 800f12c:	6830      	ldr	r0, [r6, #0]
 800f12e:	e7eb      	b.n	800f108 <__cleanup_context+0x7c>
 800f130:	4607      	mov	r7, r0
 800f132:	2300      	movs	r3, #0
 800f134:	4638      	mov	r0, r7
 800f136:	e9c6 3300 	strd	r3, r3, [r6]
 800f13a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f13e:	f7fd f83f 	bl	800c1c0 <rcutils_reset_error>
 800f142:	e7b7      	b.n	800f0b4 <__cleanup_context+0x28>
 800f144:	f7ff ff7e 	bl	800f044 <rcl_convert_rmw_ret_to_rcl_ret>
 800f148:	4607      	mov	r7, r0
 800f14a:	e7bc      	b.n	800f0c6 <__cleanup_context+0x3a>

0800f14c <rcl_init>:
 800f14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f150:	1e05      	subs	r5, r0, #0
 800f152:	b0a7      	sub	sp, #156	; 0x9c
 800f154:	460e      	mov	r6, r1
 800f156:	4690      	mov	r8, r2
 800f158:	461f      	mov	r7, r3
 800f15a:	f340 80a0 	ble.w	800f29e <rcl_init+0x152>
 800f15e:	2900      	cmp	r1, #0
 800f160:	f000 80a0 	beq.w	800f2a4 <rcl_init+0x158>
 800f164:	f1a1 0e04 	sub.w	lr, r1, #4
 800f168:	f04f 0c00 	mov.w	ip, #0
 800f16c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800f170:	f10c 0c01 	add.w	ip, ip, #1
 800f174:	2c00      	cmp	r4, #0
 800f176:	f000 8095 	beq.w	800f2a4 <rcl_init+0x158>
 800f17a:	4565      	cmp	r5, ip
 800f17c:	d1f6      	bne.n	800f16c <rcl_init+0x20>
 800f17e:	f1b8 0f00 	cmp.w	r8, #0
 800f182:	f000 808f 	beq.w	800f2a4 <rcl_init+0x158>
 800f186:	f8d8 4000 	ldr.w	r4, [r8]
 800f18a:	2c00      	cmp	r4, #0
 800f18c:	f000 808a 	beq.w	800f2a4 <rcl_init+0x158>
 800f190:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
 800f194:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f196:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f19a:	6823      	ldr	r3, [r4, #0]
 800f19c:	a821      	add	r0, sp, #132	; 0x84
 800f19e:	f8cc 3000 	str.w	r3, [ip]
 800f1a2:	f7fc ffe9 	bl	800c178 <rcutils_allocator_is_valid>
 800f1a6:	f080 0001 	eor.w	r0, r0, #1
 800f1aa:	b2c0      	uxtb	r0, r0
 800f1ac:	2800      	cmp	r0, #0
 800f1ae:	d179      	bne.n	800f2a4 <rcl_init+0x158>
 800f1b0:	2f00      	cmp	r7, #0
 800f1b2:	d077      	beq.n	800f2a4 <rcl_init+0x158>
 800f1b4:	683b      	ldr	r3, [r7, #0]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d179      	bne.n	800f2ae <rcl_init+0x162>
 800f1ba:	2198      	movs	r1, #152	; 0x98
 800f1bc:	2001      	movs	r0, #1
 800f1be:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	; 0x90
 800f1c2:	4798      	blx	r3
 800f1c4:	4604      	mov	r4, r0
 800f1c6:	6038      	str	r0, [r7, #0]
 800f1c8:	2800      	cmp	r0, #0
 800f1ca:	f000 80cd 	beq.w	800f368 <rcl_init+0x21c>
 800f1ce:	a802      	add	r0, sp, #8
 800f1d0:	f003 f8ca 	bl	8012368 <rmw_get_zero_initialized_context>
 800f1d4:	a902      	add	r1, sp, #8
 800f1d6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800f1da:	2270      	movs	r2, #112	; 0x70
 800f1dc:	f00a fb9f 	bl	801991e <memcpy>
 800f1e0:	f8d7 e000 	ldr.w	lr, [r7]
 800f1e4:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
 800f1e8:	4674      	mov	r4, lr
 800f1ea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f1ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f1f0:	f8dc 3000 	ldr.w	r3, [ip]
 800f1f4:	f10e 0114 	add.w	r1, lr, #20
 800f1f8:	4640      	mov	r0, r8
 800f1fa:	6023      	str	r3, [r4, #0]
 800f1fc:	f000 f968 	bl	800f4d0 <rcl_init_options_copy>
 800f200:	4604      	mov	r4, r0
 800f202:	2800      	cmp	r0, #0
 800f204:	d144      	bne.n	800f290 <rcl_init+0x144>
 800f206:	f8d7 9000 	ldr.w	r9, [r7]
 800f20a:	ea4f 7ae5 	mov.w	sl, r5, asr #31
 800f20e:	f8c9 0020 	str.w	r0, [r9, #32]
 800f212:	f8c9 5018 	str.w	r5, [r9, #24]
 800f216:	f8c9 a01c 	str.w	sl, [r9, #28]
 800f21a:	2d00      	cmp	r5, #0
 800f21c:	d04e      	beq.n	800f2bc <rcl_init+0x170>
 800f21e:	2e00      	cmp	r6, #0
 800f220:	d04c      	beq.n	800f2bc <rcl_init+0x170>
 800f222:	2104      	movs	r1, #4
 800f224:	4628      	mov	r0, r5
 800f226:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	; 0x90
 800f22a:	4798      	blx	r3
 800f22c:	f8c9 0020 	str.w	r0, [r9, #32]
 800f230:	f8d7 9000 	ldr.w	r9, [r7]
 800f234:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800f238:	46cb      	mov	fp, r9
 800f23a:	b343      	cbz	r3, 800f28e <rcl_init+0x142>
 800f23c:	2d01      	cmp	r5, #1
 800f23e:	f17a 0300 	sbcs.w	r3, sl, #0
 800f242:	db3b      	blt.n	800f2bc <rcl_init+0x170>
 800f244:	2400      	movs	r4, #0
 800f246:	3e04      	subs	r6, #4
 800f248:	46a1      	mov	r9, r4
 800f24a:	e00b      	b.n	800f264 <rcl_init+0x118>
 800f24c:	6831      	ldr	r1, [r6, #0]
 800f24e:	f00a fb66 	bl	801991e <memcpy>
 800f252:	3401      	adds	r4, #1
 800f254:	f149 0900 	adc.w	r9, r9, #0
 800f258:	45ca      	cmp	sl, r9
 800f25a:	bf08      	it	eq
 800f25c:	42a5      	cmpeq	r5, r4
 800f25e:	d02b      	beq.n	800f2b8 <rcl_init+0x16c>
 800f260:	f8d7 b000 	ldr.w	fp, [r7]
 800f264:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800f268:	f7f1 f84a 	bl	8000300 <strlen>
 800f26c:	1c42      	adds	r2, r0, #1
 800f26e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f270:	4610      	mov	r0, r2
 800f272:	9925      	ldr	r1, [sp, #148]	; 0x94
 800f274:	f8db b020 	ldr.w	fp, [fp, #32]
 800f278:	9201      	str	r2, [sp, #4]
 800f27a:	4798      	blx	r3
 800f27c:	683b      	ldr	r3, [r7, #0]
 800f27e:	f84b 0024 	str.w	r0, [fp, r4, lsl #2]
 800f282:	6a1b      	ldr	r3, [r3, #32]
 800f284:	9a01      	ldr	r2, [sp, #4]
 800f286:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f28a:	2800      	cmp	r0, #0
 800f28c:	d1de      	bne.n	800f24c <rcl_init+0x100>
 800f28e:	240a      	movs	r4, #10
 800f290:	4638      	mov	r0, r7
 800f292:	f7ff fefb 	bl	800f08c <__cleanup_context>
 800f296:	4620      	mov	r0, r4
 800f298:	b027      	add	sp, #156	; 0x9c
 800f29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f29e:	2900      	cmp	r1, #0
 800f2a0:	f43f af6d 	beq.w	800f17e <rcl_init+0x32>
 800f2a4:	240b      	movs	r4, #11
 800f2a6:	4620      	mov	r0, r4
 800f2a8:	b027      	add	sp, #156	; 0x9c
 800f2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2ae:	2464      	movs	r4, #100	; 0x64
 800f2b0:	4620      	mov	r0, r4
 800f2b2:	b027      	add	sp, #156	; 0x9c
 800f2b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2b8:	f8d7 9000 	ldr.w	r9, [r7]
 800f2bc:	493f      	ldr	r1, [pc, #252]	; (800f3bc <rcl_init+0x270>)
 800f2be:	680b      	ldr	r3, [r1, #0]
 800f2c0:	3301      	adds	r3, #1
 800f2c2:	d04c      	beq.n	800f35e <rcl_init+0x212>
 800f2c4:	461a      	mov	r2, r3
 800f2c6:	2000      	movs	r0, #0
 800f2c8:	600b      	str	r3, [r1, #0]
 800f2ca:	f8d9 5014 	ldr.w	r5, [r9, #20]
 800f2ce:	607b      	str	r3, [r7, #4]
 800f2d0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f2d2:	3301      	adds	r3, #1
 800f2d4:	e9c5 2006 	strd	r2, r0, [r5, #24]
 800f2d8:	d05d      	beq.n	800f396 <rcl_init+0x24a>
 800f2da:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d044      	beq.n	800f36c <rcl_init+0x220>
 800f2e2:	2b01      	cmp	r3, #1
 800f2e4:	d04e      	beq.n	800f384 <rcl_init+0x238>
 800f2e6:	f8d8 3000 	ldr.w	r3, [r8]
 800f2ea:	f105 0634 	add.w	r6, r5, #52	; 0x34
 800f2ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d05a      	beq.n	800f3ac <rcl_init+0x260>
 800f2f6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800f2f8:	b953      	cbnz	r3, 800f310 <rcl_init+0x1c4>
 800f2fa:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 800f2fe:	2801      	cmp	r0, #1
 800f300:	d008      	beq.n	800f314 <rcl_init+0x1c8>
 800f302:	a921      	add	r1, sp, #132	; 0x84
 800f304:	4630      	mov	r0, r6
 800f306:	f008 f8e7 	bl	80174d8 <rcl_get_discovery_static_peers>
 800f30a:	4604      	mov	r4, r0
 800f30c:	2800      	cmp	r0, #0
 800f30e:	d1bf      	bne.n	800f290 <rcl_init+0x144>
 800f310:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 800f314:	f008 f8d6 	bl	80174c4 <rcl_automatic_discovery_range_to_string>
 800f318:	683b      	ldr	r3, [r7, #0]
 800f31a:	aa20      	add	r2, sp, #128	; 0x80
 800f31c:	a91f      	add	r1, sp, #124	; 0x7c
 800f31e:	695b      	ldr	r3, [r3, #20]
 800f320:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800f322:	f001 f957 	bl	80105d4 <rcl_validate_enclave_name>
 800f326:	4604      	mov	r4, r0
 800f328:	2800      	cmp	r0, #0
 800f32a:	d1b1      	bne.n	800f290 <rcl_init+0x144>
 800f32c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f32e:	bb83      	cbnz	r3, 800f392 <rcl_init+0x246>
 800f330:	6839      	ldr	r1, [r7, #0]
 800f332:	694b      	ldr	r3, [r1, #20]
 800f334:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800f338:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800f33a:	f000 fc77 	bl	800fc2c <rcl_get_security_options_from_environment>
 800f33e:	4604      	mov	r4, r0
 800f340:	2800      	cmp	r0, #0
 800f342:	d1a5      	bne.n	800f290 <rcl_init+0x144>
 800f344:	6839      	ldr	r1, [r7, #0]
 800f346:	6948      	ldr	r0, [r1, #20]
 800f348:	3128      	adds	r1, #40	; 0x28
 800f34a:	3018      	adds	r0, #24
 800f34c:	f003 fac6 	bl	80128dc <rmw_init>
 800f350:	4604      	mov	r4, r0
 800f352:	2800      	cmp	r0, #0
 800f354:	d0a7      	beq.n	800f2a6 <rcl_init+0x15a>
 800f356:	f7ff fe75 	bl	800f044 <rcl_convert_rmw_ret_to_rcl_ret>
 800f35a:	4604      	mov	r4, r0
 800f35c:	e798      	b.n	800f290 <rcl_init+0x144>
 800f35e:	2201      	movs	r2, #1
 800f360:	4618      	mov	r0, r3
 800f362:	600a      	str	r2, [r1, #0]
 800f364:	4613      	mov	r3, r2
 800f366:	e7b0      	b.n	800f2ca <rcl_init+0x17e>
 800f368:	240a      	movs	r4, #10
 800f36a:	e79c      	b.n	800f2a6 <rcl_init+0x15a>
 800f36c:	f105 0030 	add.w	r0, r5, #48	; 0x30
 800f370:	f000 f90c 	bl	800f58c <rcl_get_localhost_only>
 800f374:	4604      	mov	r4, r0
 800f376:	2800      	cmp	r0, #0
 800f378:	d18a      	bne.n	800f290 <rcl_init+0x144>
 800f37a:	683a      	ldr	r2, [r7, #0]
 800f37c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800f380:	6955      	ldr	r5, [r2, #20]
 800f382:	e7ae      	b.n	800f2e2 <rcl_init+0x196>
 800f384:	2302      	movs	r3, #2
 800f386:	2200      	movs	r2, #0
 800f388:	4618      	mov	r0, r3
 800f38a:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
 800f38e:	63ea      	str	r2, [r5, #60]	; 0x3c
 800f390:	e7c0      	b.n	800f314 <rcl_init+0x1c8>
 800f392:	2401      	movs	r4, #1
 800f394:	e77c      	b.n	800f290 <rcl_init+0x144>
 800f396:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800f39a:	f008 f903 	bl	80175a4 <rcl_get_default_domain_id>
 800f39e:	4604      	mov	r4, r0
 800f3a0:	2800      	cmp	r0, #0
 800f3a2:	f47f af75 	bne.w	800f290 <rcl_init+0x144>
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	695d      	ldr	r5, [r3, #20]
 800f3aa:	e796      	b.n	800f2da <rcl_init+0x18e>
 800f3ac:	4630      	mov	r0, r6
 800f3ae:	f008 f847 	bl	8017440 <rcl_get_automatic_discovery_range>
 800f3b2:	4604      	mov	r4, r0
 800f3b4:	2800      	cmp	r0, #0
 800f3b6:	d09e      	beq.n	800f2f6 <rcl_init+0x1aa>
 800f3b8:	e76a      	b.n	800f290 <rcl_init+0x144>
 800f3ba:	bf00      	nop
 800f3bc:	2000bd20 	.word	0x2000bd20

0800f3c0 <rcl_get_zero_initialized_init_options>:
 800f3c0:	2000      	movs	r0, #0
 800f3c2:	4770      	bx	lr

0800f3c4 <rcl_init_options_init>:
 800f3c4:	b084      	sub	sp, #16
 800f3c6:	b570      	push	{r4, r5, r6, lr}
 800f3c8:	b09e      	sub	sp, #120	; 0x78
 800f3ca:	ad23      	add	r5, sp, #140	; 0x8c
 800f3cc:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800f3d0:	2800      	cmp	r0, #0
 800f3d2:	d046      	beq.n	800f462 <rcl_init_options_init+0x9e>
 800f3d4:	6803      	ldr	r3, [r0, #0]
 800f3d6:	4604      	mov	r4, r0
 800f3d8:	b133      	cbz	r3, 800f3e8 <rcl_init_options_init+0x24>
 800f3da:	2564      	movs	r5, #100	; 0x64
 800f3dc:	4628      	mov	r0, r5
 800f3de:	b01e      	add	sp, #120	; 0x78
 800f3e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f3e4:	b004      	add	sp, #16
 800f3e6:	4770      	bx	lr
 800f3e8:	4628      	mov	r0, r5
 800f3ea:	f7fc fec5 	bl	800c178 <rcutils_allocator_is_valid>
 800f3ee:	2800      	cmp	r0, #0
 800f3f0:	d037      	beq.n	800f462 <rcl_init_options_init+0x9e>
 800f3f2:	46ae      	mov	lr, r5
 800f3f4:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 800f3f8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f3fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f400:	f8de 3000 	ldr.w	r3, [lr]
 800f404:	2070      	movs	r0, #112	; 0x70
 800f406:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800f408:	f8cc 3000 	str.w	r3, [ip]
 800f40c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f40e:	4798      	blx	r3
 800f410:	4606      	mov	r6, r0
 800f412:	6020      	str	r0, [r4, #0]
 800f414:	b338      	cbz	r0, 800f466 <rcl_init_options_init+0xa2>
 800f416:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 800f41a:	4686      	mov	lr, r0
 800f41c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f420:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f424:	f8dc 3000 	ldr.w	r3, [ip]
 800f428:	a802      	add	r0, sp, #8
 800f42a:	f8ce 3000 	str.w	r3, [lr]
 800f42e:	f002 ffaf 	bl	8012390 <rmw_get_zero_initialized_init_options>
 800f432:	2258      	movs	r2, #88	; 0x58
 800f434:	a902      	add	r1, sp, #8
 800f436:	f106 0018 	add.w	r0, r6, #24
 800f43a:	f00a fa70 	bl	801991e <memcpy>
 800f43e:	ab26      	add	r3, sp, #152	; 0x98
 800f440:	6826      	ldr	r6, [r4, #0]
 800f442:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f446:	e88d 0003 	stmia.w	sp, {r0, r1}
 800f44a:	f106 0018 	add.w	r0, r6, #24
 800f44e:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800f452:	f003 f973 	bl	801273c <rmw_init_options_init>
 800f456:	4605      	mov	r5, r0
 800f458:	b938      	cbnz	r0, 800f46a <rcl_init_options_init+0xa6>
 800f45a:	6823      	ldr	r3, [r4, #0]
 800f45c:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34
 800f460:	e7bc      	b.n	800f3dc <rcl_init_options_init+0x18>
 800f462:	250b      	movs	r5, #11
 800f464:	e7ba      	b.n	800f3dc <rcl_init_options_init+0x18>
 800f466:	250a      	movs	r5, #10
 800f468:	e7b8      	b.n	800f3dc <rcl_init_options_init+0x18>
 800f46a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800f46c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800f46e:	6820      	ldr	r0, [r4, #0]
 800f470:	4798      	blx	r3
 800f472:	4628      	mov	r0, r5
 800f474:	f7ff fde6 	bl	800f044 <rcl_convert_rmw_ret_to_rcl_ret>
 800f478:	4605      	mov	r5, r0
 800f47a:	e7af      	b.n	800f3dc <rcl_init_options_init+0x18>

0800f47c <rcl_init_options_fini>:
 800f47c:	b530      	push	{r4, r5, lr}
 800f47e:	b087      	sub	sp, #28
 800f480:	b1f0      	cbz	r0, 800f4c0 <rcl_init_options_fini+0x44>
 800f482:	6803      	ldr	r3, [r0, #0]
 800f484:	4604      	mov	r4, r0
 800f486:	b1db      	cbz	r3, 800f4c0 <rcl_init_options_fini+0x44>
 800f488:	469c      	mov	ip, r3
 800f48a:	f10d 0e04 	add.w	lr, sp, #4
 800f48e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f492:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f496:	f8dc 3000 	ldr.w	r3, [ip]
 800f49a:	a801      	add	r0, sp, #4
 800f49c:	f8ce 3000 	str.w	r3, [lr]
 800f4a0:	f7fc fe6a 	bl	800c178 <rcutils_allocator_is_valid>
 800f4a4:	b160      	cbz	r0, 800f4c0 <rcl_init_options_fini+0x44>
 800f4a6:	6820      	ldr	r0, [r4, #0]
 800f4a8:	3018      	adds	r0, #24
 800f4aa:	f003 f9e1 	bl	8012870 <rmw_init_options_fini>
 800f4ae:	4605      	mov	r5, r0
 800f4b0:	b950      	cbnz	r0, 800f4c8 <rcl_init_options_fini+0x4c>
 800f4b2:	6820      	ldr	r0, [r4, #0]
 800f4b4:	9b02      	ldr	r3, [sp, #8]
 800f4b6:	9905      	ldr	r1, [sp, #20]
 800f4b8:	4798      	blx	r3
 800f4ba:	4628      	mov	r0, r5
 800f4bc:	b007      	add	sp, #28
 800f4be:	bd30      	pop	{r4, r5, pc}
 800f4c0:	250b      	movs	r5, #11
 800f4c2:	4628      	mov	r0, r5
 800f4c4:	b007      	add	sp, #28
 800f4c6:	bd30      	pop	{r4, r5, pc}
 800f4c8:	f7ff fdbc 	bl	800f044 <rcl_convert_rmw_ret_to_rcl_ret>
 800f4cc:	4605      	mov	r5, r0
 800f4ce:	e7f8      	b.n	800f4c2 <rcl_init_options_fini+0x46>

0800f4d0 <rcl_init_options_copy>:
 800f4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4d2:	b09d      	sub	sp, #116	; 0x74
 800f4d4:	2800      	cmp	r0, #0
 800f4d6:	d04d      	beq.n	800f574 <rcl_init_options_copy+0xa4>
 800f4d8:	4604      	mov	r4, r0
 800f4da:	6800      	ldr	r0, [r0, #0]
 800f4dc:	2800      	cmp	r0, #0
 800f4de:	d049      	beq.n	800f574 <rcl_init_options_copy+0xa4>
 800f4e0:	460d      	mov	r5, r1
 800f4e2:	f7fc fe49 	bl	800c178 <rcutils_allocator_is_valid>
 800f4e6:	2d00      	cmp	r5, #0
 800f4e8:	d044      	beq.n	800f574 <rcl_init_options_copy+0xa4>
 800f4ea:	f080 0001 	eor.w	r0, r0, #1
 800f4ee:	b2c0      	uxtb	r0, r0
 800f4f0:	2800      	cmp	r0, #0
 800f4f2:	d13f      	bne.n	800f574 <rcl_init_options_copy+0xa4>
 800f4f4:	682b      	ldr	r3, [r5, #0]
 800f4f6:	b11b      	cbz	r3, 800f500 <rcl_init_options_copy+0x30>
 800f4f8:	2464      	movs	r4, #100	; 0x64
 800f4fa:	4620      	mov	r0, r4
 800f4fc:	b01d      	add	sp, #116	; 0x74
 800f4fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f500:	6826      	ldr	r6, [r4, #0]
 800f502:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
 800f506:	46b6      	mov	lr, r6
 800f508:	6837      	ldr	r7, [r6, #0]
 800f50a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f50e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f512:	f8de 3000 	ldr.w	r3, [lr]
 800f516:	2070      	movs	r0, #112	; 0x70
 800f518:	4619      	mov	r1, r3
 800f51a:	f8cc 3000 	str.w	r3, [ip]
 800f51e:	47b8      	blx	r7
 800f520:	4606      	mov	r6, r0
 800f522:	6028      	str	r0, [r5, #0]
 800f524:	b350      	cbz	r0, 800f57c <rcl_init_options_copy+0xac>
 800f526:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
 800f52a:	4686      	mov	lr, r0
 800f52c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f530:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f534:	f8dc 3000 	ldr.w	r3, [ip]
 800f538:	4668      	mov	r0, sp
 800f53a:	f8ce 3000 	str.w	r3, [lr]
 800f53e:	f002 ff27 	bl	8012390 <rmw_get_zero_initialized_init_options>
 800f542:	2258      	movs	r2, #88	; 0x58
 800f544:	4669      	mov	r1, sp
 800f546:	f106 0018 	add.w	r0, r6, #24
 800f54a:	f00a f9e8 	bl	801991e <memcpy>
 800f54e:	6820      	ldr	r0, [r4, #0]
 800f550:	6829      	ldr	r1, [r5, #0]
 800f552:	3018      	adds	r0, #24
 800f554:	3118      	adds	r1, #24
 800f556:	f003 f959 	bl	801280c <rmw_init_options_copy>
 800f55a:	4604      	mov	r4, r0
 800f55c:	2800      	cmp	r0, #0
 800f55e:	d0cc      	beq.n	800f4fa <rcl_init_options_copy+0x2a>
 800f560:	f7fc fe18 	bl	800c194 <rcutils_get_error_string>
 800f564:	f7fc fe2c 	bl	800c1c0 <rcutils_reset_error>
 800f568:	4628      	mov	r0, r5
 800f56a:	f7ff ff87 	bl	800f47c <rcl_init_options_fini>
 800f56e:	b138      	cbz	r0, 800f580 <rcl_init_options_copy+0xb0>
 800f570:	4604      	mov	r4, r0
 800f572:	e7c2      	b.n	800f4fa <rcl_init_options_copy+0x2a>
 800f574:	240b      	movs	r4, #11
 800f576:	4620      	mov	r0, r4
 800f578:	b01d      	add	sp, #116	; 0x74
 800f57a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f57c:	240a      	movs	r4, #10
 800f57e:	e7bc      	b.n	800f4fa <rcl_init_options_copy+0x2a>
 800f580:	4620      	mov	r0, r4
 800f582:	b01d      	add	sp, #116	; 0x74
 800f584:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f588:	f7ff bd5c 	b.w	800f044 <rcl_convert_rmw_ret_to_rcl_ret>

0800f58c <rcl_get_localhost_only>:
 800f58c:	b510      	push	{r4, lr}
 800f58e:	2300      	movs	r3, #0
 800f590:	b082      	sub	sp, #8
 800f592:	9301      	str	r3, [sp, #4]
 800f594:	b1c0      	cbz	r0, 800f5c8 <rcl_get_localhost_only+0x3c>
 800f596:	4604      	mov	r4, r0
 800f598:	a901      	add	r1, sp, #4
 800f59a:	480d      	ldr	r0, [pc, #52]	; (800f5d0 <rcl_get_localhost_only+0x44>)
 800f59c:	f002 fc34 	bl	8011e08 <rcutils_get_env>
 800f5a0:	b110      	cbz	r0, 800f5a8 <rcl_get_localhost_only+0x1c>
 800f5a2:	2001      	movs	r0, #1
 800f5a4:	b002      	add	sp, #8
 800f5a6:	bd10      	pop	{r4, pc}
 800f5a8:	9b01      	ldr	r3, [sp, #4]
 800f5aa:	b10b      	cbz	r3, 800f5b0 <rcl_get_localhost_only+0x24>
 800f5ac:	781b      	ldrb	r3, [r3, #0]
 800f5ae:	b923      	cbnz	r3, 800f5ba <rcl_get_localhost_only+0x2e>
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	7023      	strb	r3, [r4, #0]
 800f5b6:	b002      	add	sp, #8
 800f5b8:	bd10      	pop	{r4, pc}
 800f5ba:	2b31      	cmp	r3, #49	; 0x31
 800f5bc:	bf0c      	ite	eq
 800f5be:	2301      	moveq	r3, #1
 800f5c0:	2302      	movne	r3, #2
 800f5c2:	7023      	strb	r3, [r4, #0]
 800f5c4:	b002      	add	sp, #8
 800f5c6:	bd10      	pop	{r4, pc}
 800f5c8:	200b      	movs	r0, #11
 800f5ca:	b002      	add	sp, #8
 800f5cc:	bd10      	pop	{r4, pc}
 800f5ce:	bf00      	nop
 800f5d0:	0801b4f0 	.word	0x0801b4f0

0800f5d4 <rcl_get_zero_initialized_node>:
 800f5d4:	4a03      	ldr	r2, [pc, #12]	; (800f5e4 <rcl_get_zero_initialized_node+0x10>)
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f5dc:	e883 0003 	stmia.w	r3, {r0, r1}
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	4770      	bx	lr
 800f5e4:	0801b520 	.word	0x0801b520

0800f5e8 <rcl_node_init>:
 800f5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5ec:	b0ab      	sub	sp, #172	; 0xac
 800f5ee:	4604      	mov	r4, r0
 800f5f0:	460e      	mov	r6, r1
 800f5f2:	4615      	mov	r5, r2
 800f5f4:	f8dd 80d0 	ldr.w	r8, [sp, #208]	; 0xd0
 800f5f8:	a825      	add	r0, sp, #148	; 0x94
 800f5fa:	461f      	mov	r7, r3
 800f5fc:	f008 f9f8 	bl	80179f0 <rcl_guard_condition_get_default_options>
 800f600:	f1b8 0f00 	cmp.w	r8, #0
 800f604:	f000 80f3 	beq.w	800f7ee <rcl_node_init+0x206>
 800f608:	4640      	mov	r0, r8
 800f60a:	f7fc fdb5 	bl	800c178 <rcutils_allocator_is_valid>
 800f60e:	2d00      	cmp	r5, #0
 800f610:	bf18      	it	ne
 800f612:	2c00      	cmpne	r4, #0
 800f614:	f080 0001 	eor.w	r0, r0, #1
 800f618:	bf0c      	ite	eq
 800f61a:	f04f 0c01 	moveq.w	ip, #1
 800f61e:	f04f 0c00 	movne.w	ip, #0
 800f622:	2e00      	cmp	r6, #0
 800f624:	bf08      	it	eq
 800f626:	f04c 0c01 	orreq.w	ip, ip, #1
 800f62a:	ea4c 0c00 	orr.w	ip, ip, r0
 800f62e:	f01c 09ff 	ands.w	r9, ip, #255	; 0xff
 800f632:	f040 80dc 	bne.w	800f7ee <rcl_node_init+0x206>
 800f636:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800f63a:	f1ba 0f00 	cmp.w	sl, #0
 800f63e:	f040 80fc 	bne.w	800f83a <rcl_node_init+0x252>
 800f642:	2f00      	cmp	r7, #0
 800f644:	f000 80d3 	beq.w	800f7ee <rcl_node_init+0x206>
 800f648:	4638      	mov	r0, r7
 800f64a:	f7ff fd19 	bl	800f080 <rcl_context_is_valid>
 800f64e:	4683      	mov	fp, r0
 800f650:	2800      	cmp	r0, #0
 800f652:	f000 80d2 	beq.w	800f7fa <rcl_node_init+0x212>
 800f656:	4652      	mov	r2, sl
 800f658:	4630      	mov	r0, r6
 800f65a:	a924      	add	r1, sp, #144	; 0x90
 800f65c:	f8cd a090 	str.w	sl, [sp, #144]	; 0x90
 800f660:	f002 ffa4 	bl	80125ac <rmw_validate_node_name>
 800f664:	4682      	mov	sl, r0
 800f666:	2800      	cmp	r0, #0
 800f668:	f040 80c3 	bne.w	800f7f2 <rcl_node_init+0x20a>
 800f66c:	9824      	ldr	r0, [sp, #144]	; 0x90
 800f66e:	2800      	cmp	r0, #0
 800f670:	f040 80f1 	bne.w	800f856 <rcl_node_init+0x26e>
 800f674:	4628      	mov	r0, r5
 800f676:	f7f0 fe43 	bl	8000300 <strlen>
 800f67a:	2800      	cmp	r0, #0
 800f67c:	f040 80c0 	bne.w	800f800 <rcl_node_init+0x218>
 800f680:	4d79      	ldr	r5, [pc, #484]	; (800f868 <rcl_node_init+0x280>)
 800f682:	a924      	add	r1, sp, #144	; 0x90
 800f684:	2200      	movs	r2, #0
 800f686:	4628      	mov	r0, r5
 800f688:	f002 ff72 	bl	8012570 <rmw_validate_namespace>
 800f68c:	4682      	mov	sl, r0
 800f68e:	2800      	cmp	r0, #0
 800f690:	f040 80af 	bne.w	800f7f2 <rcl_node_init+0x20a>
 800f694:	9824      	ldr	r0, [sp, #144]	; 0x90
 800f696:	2800      	cmp	r0, #0
 800f698:	f040 80d5 	bne.w	800f846 <rcl_node_init+0x25e>
 800f69c:	f8d8 3000 	ldr.w	r3, [r8]
 800f6a0:	2080      	movs	r0, #128	; 0x80
 800f6a2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f6a6:	4798      	blx	r3
 800f6a8:	4682      	mov	sl, r0
 800f6aa:	6060      	str	r0, [r4, #4]
 800f6ac:	2800      	cmp	r0, #0
 800f6ae:	f000 80cf 	beq.w	800f850 <rcl_node_init+0x268>
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	a808      	add	r0, sp, #32
 800f6b8:	e9ca 231c 	strd	r2, r3, [sl, #112]	; 0x70
 800f6bc:	e9ca 231e 	strd	r2, r3, [sl, #120]	; 0x78
 800f6c0:	f000 f902 	bl	800f8c8 <rcl_node_get_default_options>
 800f6c4:	a908      	add	r1, sp, #32
 800f6c6:	4650      	mov	r0, sl
 800f6c8:	2270      	movs	r2, #112	; 0x70
 800f6ca:	f00a f928 	bl	801991e <memcpy>
 800f6ce:	6861      	ldr	r1, [r4, #4]
 800f6d0:	4640      	mov	r0, r8
 800f6d2:	6027      	str	r7, [r4, #0]
 800f6d4:	f000 f906 	bl	800f8e4 <rcl_node_options_copy>
 800f6d8:	2800      	cmp	r0, #0
 800f6da:	d158      	bne.n	800f78e <rcl_node_init+0x1a6>
 800f6dc:	4628      	mov	r0, r5
 800f6de:	f7f0 fe0f 	bl	8000300 <strlen>
 800f6e2:	4428      	add	r0, r5
 800f6e4:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800f6e8:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800f6ec:	2b2f      	cmp	r3, #47	; 0x2f
 800f6ee:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800f6f2:	9300      	str	r3, [sp, #0]
 800f6f4:	bf0c      	ite	eq
 800f6f6:	4b5d      	ldreq	r3, [pc, #372]	; (800f86c <rcl_node_init+0x284>)
 800f6f8:	4b5d      	ldrne	r3, [pc, #372]	; (800f870 <rcl_node_init+0x288>)
 800f6fa:	9302      	str	r3, [sp, #8]
 800f6fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f700:	9301      	str	r3, [sp, #4]
 800f702:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800f706:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800f70a:	f002 fba5 	bl	8011e58 <rcutils_format_string_limit>
 800f70e:	6823      	ldr	r3, [r4, #0]
 800f710:	f8ca 007c 	str.w	r0, [sl, #124]	; 0x7c
 800f714:	4631      	mov	r1, r6
 800f716:	6818      	ldr	r0, [r3, #0]
 800f718:	462a      	mov	r2, r5
 800f71a:	6866      	ldr	r6, [r4, #4]
 800f71c:	3028      	adds	r0, #40	; 0x28
 800f71e:	f003 fac5 	bl	8012cac <rmw_create_node>
 800f722:	6863      	ldr	r3, [r4, #4]
 800f724:	6730      	str	r0, [r6, #112]	; 0x70
 800f726:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800f728:	2800      	cmp	r0, #0
 800f72a:	d032      	beq.n	800f792 <rcl_node_init+0x1aa>
 800f72c:	f003 fb4e 	bl	8012dcc <rmw_node_get_graph_guard_condition>
 800f730:	4682      	mov	sl, r0
 800f732:	b360      	cbz	r0, 800f78e <rcl_node_init+0x1a6>
 800f734:	f8d8 3000 	ldr.w	r3, [r8]
 800f738:	2008      	movs	r0, #8
 800f73a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f73e:	6866      	ldr	r6, [r4, #4]
 800f740:	4798      	blx	r3
 800f742:	6863      	ldr	r3, [r4, #4]
 800f744:	6770      	str	r0, [r6, #116]	; 0x74
 800f746:	f8d3 b074 	ldr.w	fp, [r3, #116]	; 0x74
 800f74a:	f1bb 0f00 	cmp.w	fp, #0
 800f74e:	d020      	beq.n	800f792 <rcl_node_init+0x1aa>
 800f750:	a806      	add	r0, sp, #24
 800f752:	ae25      	add	r6, sp, #148	; 0x94
 800f754:	f008 f8c0 	bl	80178d8 <rcl_get_zero_initialized_guard_condition>
 800f758:	a806      	add	r0, sp, #24
 800f75a:	6863      	ldr	r3, [r4, #4]
 800f75c:	46c4      	mov	ip, r8
 800f75e:	c803      	ldmia	r0, {r0, r1}
 800f760:	f8d3 e074 	ldr.w	lr, [r3, #116]	; 0x74
 800f764:	e88b 0003 	stmia.w	fp, {r0, r1}
 800f768:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f76c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f76e:	f8dc 3000 	ldr.w	r3, [ip]
 800f772:	6033      	str	r3, [r6, #0]
 800f774:	ab2a      	add	r3, sp, #168	; 0xa8
 800f776:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800f77a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f77e:	4651      	mov	r1, sl
 800f780:	463a      	mov	r2, r7
 800f782:	4670      	mov	r0, lr
 800f784:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800f786:	f008 f8b1 	bl	80178ec <rcl_guard_condition_init_from_rmw>
 800f78a:	4682      	mov	sl, r0
 800f78c:	b328      	cbz	r0, 800f7da <rcl_node_init+0x1f2>
 800f78e:	6863      	ldr	r3, [r4, #4]
 800f790:	b1f3      	cbz	r3, 800f7d0 <rcl_node_init+0x1e8>
 800f792:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800f794:	b128      	cbz	r0, 800f7a2 <rcl_node_init+0x1ba>
 800f796:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f79a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f79e:	4798      	blx	r3
 800f7a0:	6863      	ldr	r3, [r4, #4]
 800f7a2:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800f7a4:	b110      	cbz	r0, 800f7ac <rcl_node_init+0x1c4>
 800f7a6:	f003 fa93 	bl	8012cd0 <rmw_destroy_node>
 800f7aa:	6863      	ldr	r3, [r4, #4]
 800f7ac:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800f7ae:	b148      	cbz	r0, 800f7c4 <rcl_node_init+0x1dc>
 800f7b0:	f008 f8f8 	bl	80179a4 <rcl_guard_condition_fini>
 800f7b4:	6863      	ldr	r3, [r4, #4]
 800f7b6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f7ba:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800f7bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f7c0:	4798      	blx	r3
 800f7c2:	6863      	ldr	r3, [r4, #4]
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f7ca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f7ce:	4798      	blx	r3
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	f04f 0a01 	mov.w	sl, #1
 800f7d6:	e9c4 3300 	strd	r3, r3, [r4]
 800f7da:	f1b9 0f00 	cmp.w	r9, #0
 800f7de:	d008      	beq.n	800f7f2 <rcl_node_init+0x20a>
 800f7e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f7e4:	4628      	mov	r0, r5
 800f7e6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f7ea:	4798      	blx	r3
 800f7ec:	e001      	b.n	800f7f2 <rcl_node_init+0x20a>
 800f7ee:	f04f 0a0b 	mov.w	sl, #11
 800f7f2:	4650      	mov	r0, sl
 800f7f4:	b02b      	add	sp, #172	; 0xac
 800f7f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7fa:	f04f 0a65 	mov.w	sl, #101	; 0x65
 800f7fe:	e7f8      	b.n	800f7f2 <rcl_node_init+0x20a>
 800f800:	782b      	ldrb	r3, [r5, #0]
 800f802:	2b2f      	cmp	r3, #47	; 0x2f
 800f804:	f43f af3d 	beq.w	800f682 <rcl_node_init+0x9a>
 800f808:	9503      	str	r5, [sp, #12]
 800f80a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800f80e:	9300      	str	r3, [sp, #0]
 800f810:	4b18      	ldr	r3, [pc, #96]	; (800f874 <rcl_node_init+0x28c>)
 800f812:	9302      	str	r3, [sp, #8]
 800f814:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f818:	9301      	str	r3, [sp, #4]
 800f81a:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800f81e:	f002 fb1b 	bl	8011e58 <rcutils_format_string_limit>
 800f822:	4605      	mov	r5, r0
 800f824:	b1e0      	cbz	r0, 800f860 <rcl_node_init+0x278>
 800f826:	2200      	movs	r2, #0
 800f828:	a924      	add	r1, sp, #144	; 0x90
 800f82a:	9224      	str	r2, [sp, #144]	; 0x90
 800f82c:	f002 fea0 	bl	8012570 <rmw_validate_namespace>
 800f830:	4682      	mov	sl, r0
 800f832:	2800      	cmp	r0, #0
 800f834:	d1d4      	bne.n	800f7e0 <rcl_node_init+0x1f8>
 800f836:	46d9      	mov	r9, fp
 800f838:	e72c      	b.n	800f694 <rcl_node_init+0xac>
 800f83a:	f04f 0a64 	mov.w	sl, #100	; 0x64
 800f83e:	4650      	mov	r0, sl
 800f840:	b02b      	add	sp, #172	; 0xac
 800f842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f846:	f04f 0aca 	mov.w	sl, #202	; 0xca
 800f84a:	f002 fea3 	bl	8012594 <rmw_namespace_validation_result_string>
 800f84e:	e7c4      	b.n	800f7da <rcl_node_init+0x1f2>
 800f850:	f04f 0a0a 	mov.w	sl, #10
 800f854:	e7c1      	b.n	800f7da <rcl_node_init+0x1f2>
 800f856:	f04f 0ac9 	mov.w	sl, #201	; 0xc9
 800f85a:	f002 fefb 	bl	8012654 <rmw_node_name_validation_result_string>
 800f85e:	e7c8      	b.n	800f7f2 <rcl_node_init+0x20a>
 800f860:	f04f 0a0a 	mov.w	sl, #10
 800f864:	e7c5      	b.n	800f7f2 <rcl_node_init+0x20a>
 800f866:	bf00      	nop
 800f868:	0801b508 	.word	0x0801b508
 800f86c:	0801b510 	.word	0x0801b510
 800f870:	0801b518 	.word	0x0801b518
 800f874:	0801b50c 	.word	0x0801b50c

0800f878 <rcl_node_is_valid>:
 800f878:	b130      	cbz	r0, 800f888 <rcl_node_is_valid+0x10>
 800f87a:	6843      	ldr	r3, [r0, #4]
 800f87c:	b123      	cbz	r3, 800f888 <rcl_node_is_valid+0x10>
 800f87e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f880:	b113      	cbz	r3, 800f888 <rcl_node_is_valid+0x10>
 800f882:	6800      	ldr	r0, [r0, #0]
 800f884:	f7ff bbfc 	b.w	800f080 <rcl_context_is_valid>
 800f888:	2000      	movs	r0, #0
 800f88a:	4770      	bx	lr

0800f88c <rcl_node_get_name>:
 800f88c:	b120      	cbz	r0, 800f898 <rcl_node_get_name+0xc>
 800f88e:	6840      	ldr	r0, [r0, #4]
 800f890:	b110      	cbz	r0, 800f898 <rcl_node_get_name+0xc>
 800f892:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800f894:	b100      	cbz	r0, 800f898 <rcl_node_get_name+0xc>
 800f896:	6880      	ldr	r0, [r0, #8]
 800f898:	4770      	bx	lr
 800f89a:	bf00      	nop

0800f89c <rcl_node_get_namespace>:
 800f89c:	b120      	cbz	r0, 800f8a8 <rcl_node_get_namespace+0xc>
 800f89e:	6840      	ldr	r0, [r0, #4]
 800f8a0:	b110      	cbz	r0, 800f8a8 <rcl_node_get_namespace+0xc>
 800f8a2:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800f8a4:	b100      	cbz	r0, 800f8a8 <rcl_node_get_namespace+0xc>
 800f8a6:	68c0      	ldr	r0, [r0, #12]
 800f8a8:	4770      	bx	lr
 800f8aa:	bf00      	nop

0800f8ac <rcl_node_get_options>:
 800f8ac:	b128      	cbz	r0, 800f8ba <rcl_node_get_options+0xe>
 800f8ae:	6840      	ldr	r0, [r0, #4]
 800f8b0:	b118      	cbz	r0, 800f8ba <rcl_node_get_options+0xe>
 800f8b2:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	bf08      	it	eq
 800f8b8:	2000      	moveq	r0, #0
 800f8ba:	4770      	bx	lr

0800f8bc <rcl_node_get_rmw_handle>:
 800f8bc:	b110      	cbz	r0, 800f8c4 <rcl_node_get_rmw_handle+0x8>
 800f8be:	6840      	ldr	r0, [r0, #4]
 800f8c0:	b100      	cbz	r0, 800f8c4 <rcl_node_get_rmw_handle+0x8>
 800f8c2:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800f8c4:	4770      	bx	lr
 800f8c6:	bf00      	nop

0800f8c8 <rcl_node_get_default_options>:
 800f8c8:	b510      	push	{r4, lr}
 800f8ca:	4604      	mov	r4, r0
 800f8cc:	2270      	movs	r2, #112	; 0x70
 800f8ce:	2100      	movs	r1, #0
 800f8d0:	f009 feb0 	bl	8019634 <memset>
 800f8d4:	4620      	mov	r0, r4
 800f8d6:	f7fc fc41 	bl	800c15c <rcutils_get_default_allocator>
 800f8da:	2301      	movs	r3, #1
 800f8dc:	4620      	mov	r0, r4
 800f8de:	7523      	strb	r3, [r4, #20]
 800f8e0:	bd10      	pop	{r4, pc}
 800f8e2:	bf00      	nop

0800f8e4 <rcl_node_options_copy>:
 800f8e4:	2800      	cmp	r0, #0
 800f8e6:	bf18      	it	ne
 800f8e8:	4288      	cmpne	r0, r1
 800f8ea:	d01b      	beq.n	800f924 <rcl_node_options_copy+0x40>
 800f8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8ee:	fab1 f681 	clz	r6, r1
 800f8f2:	460c      	mov	r4, r1
 800f8f4:	0976      	lsrs	r6, r6, #5
 800f8f6:	b199      	cbz	r1, 800f920 <rcl_node_options_copy+0x3c>
 800f8f8:	4605      	mov	r5, r0
 800f8fa:	8a87      	ldrh	r7, [r0, #20]
 800f8fc:	4684      	mov	ip, r0
 800f8fe:	468e      	mov	lr, r1
 800f900:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f902:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f906:	682b      	ldr	r3, [r5, #0]
 800f908:	2250      	movs	r2, #80	; 0x50
 800f90a:	f10c 0118 	add.w	r1, ip, #24
 800f90e:	f104 0018 	add.w	r0, r4, #24
 800f912:	f8ce 3000 	str.w	r3, [lr]
 800f916:	82a7      	strh	r7, [r4, #20]
 800f918:	f00a f801 	bl	801991e <memcpy>
 800f91c:	4630      	mov	r0, r6
 800f91e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f920:	200b      	movs	r0, #11
 800f922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f924:	200b      	movs	r0, #11
 800f926:	4770      	bx	lr

0800f928 <rcl_node_resolve_name>:
 800f928:	b082      	sub	sp, #8
 800f92a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f92e:	b091      	sub	sp, #68	; 0x44
 800f930:	ac1a      	add	r4, sp, #104	; 0x68
 800f932:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 800f936:	e884 000c 	stmia.w	r4, {r2, r3}
 800f93a:	2800      	cmp	r0, #0
 800f93c:	d03d      	beq.n	800f9ba <rcl_node_resolve_name+0x92>
 800f93e:	460c      	mov	r4, r1
 800f940:	4605      	mov	r5, r0
 800f942:	f7ff ffb3 	bl	800f8ac <rcl_node_get_options>
 800f946:	2800      	cmp	r0, #0
 800f948:	d03a      	beq.n	800f9c0 <rcl_node_resolve_name+0x98>
 800f94a:	4628      	mov	r0, r5
 800f94c:	f7ff ff9e 	bl	800f88c <rcl_node_get_name>
 800f950:	4606      	mov	r6, r0
 800f952:	4628      	mov	r0, r5
 800f954:	ad0b      	add	r5, sp, #44	; 0x2c
 800f956:	f7ff ffa1 	bl	800f89c <rcl_node_get_namespace>
 800f95a:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 800f95e:	4607      	mov	r7, r0
 800f960:	46ac      	mov	ip, r5
 800f962:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f966:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f96a:	f8de 3000 	ldr.w	r3, [lr]
 800f96e:	f8cc 3000 	str.w	r3, [ip]
 800f972:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f974:	b30b      	cbz	r3, 800f9ba <rcl_node_resolve_name+0x92>
 800f976:	4689      	mov	r9, r1
 800f978:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800f97c:	f002 fbee 	bl	801215c <rcutils_get_zero_initialized_string_map>
 800f980:	ab10      	add	r3, sp, #64	; 0x40
 800f982:	9008      	str	r0, [sp, #32]
 800f984:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800f988:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800f98c:	2100      	movs	r1, #0
 800f98e:	a808      	add	r0, sp, #32
 800f990:	e895 000c 	ldmia.w	r5, {r2, r3}
 800f994:	f002 fc34 	bl	8012200 <rcutils_string_map_init>
 800f998:	4683      	mov	fp, r0
 800f99a:	b1a0      	cbz	r0, 800f9c6 <rcl_node_resolve_name+0x9e>
 800f99c:	f7fc fbfa 	bl	800c194 <rcutils_get_error_string>
 800f9a0:	f7fc fc0e 	bl	800c1c0 <rcutils_reset_error>
 800f9a4:	f1bb 0f0a 	cmp.w	fp, #10
 800f9a8:	bf18      	it	ne
 800f9aa:	f04f 0b01 	movne.w	fp, #1
 800f9ae:	4658      	mov	r0, fp
 800f9b0:	b011      	add	sp, #68	; 0x44
 800f9b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9b6:	b002      	add	sp, #8
 800f9b8:	4770      	bx	lr
 800f9ba:	f04f 0b0b 	mov.w	fp, #11
 800f9be:	e7f6      	b.n	800f9ae <rcl_node_resolve_name+0x86>
 800f9c0:	f04f 0b01 	mov.w	fp, #1
 800f9c4:	e7f3      	b.n	800f9ae <rcl_node_resolve_name+0x86>
 800f9c6:	9009      	str	r0, [sp, #36]	; 0x24
 800f9c8:	9007      	str	r0, [sp, #28]
 800f9ca:	a808      	add	r0, sp, #32
 800f9cc:	f007 ff7e 	bl	80178cc <rcl_get_default_topic_name_substitutions>
 800f9d0:	4683      	mov	fp, r0
 800f9d2:	b180      	cbz	r0, 800f9f6 <rcl_node_resolve_name+0xce>
 800f9d4:	280a      	cmp	r0, #10
 800f9d6:	a808      	add	r0, sp, #32
 800f9d8:	bf18      	it	ne
 800f9da:	f04f 0b01 	movne.w	fp, #1
 800f9de:	f002 fc4d 	bl	801227c <rcutils_string_map_fini>
 800f9e2:	4604      	mov	r4, r0
 800f9e4:	2800      	cmp	r0, #0
 800f9e6:	d15b      	bne.n	800faa0 <rcl_node_resolve_name+0x178>
 800f9e8:	4651      	mov	r1, sl
 800f9ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f9ec:	47c8      	blx	r9
 800f9ee:	4651      	mov	r1, sl
 800f9f0:	4620      	mov	r0, r4
 800f9f2:	47c8      	blx	r9
 800f9f4:	e7db      	b.n	800f9ae <rcl_node_resolve_name+0x86>
 800f9f6:	ab09      	add	r3, sp, #36	; 0x24
 800f9f8:	46ec      	mov	ip, sp
 800f9fa:	9305      	str	r3, [sp, #20]
 800f9fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f9fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fa02:	682b      	ldr	r3, [r5, #0]
 800fa04:	463a      	mov	r2, r7
 800fa06:	4631      	mov	r1, r6
 800fa08:	4620      	mov	r0, r4
 800fa0a:	f8cc 3000 	str.w	r3, [ip]
 800fa0e:	ab08      	add	r3, sp, #32
 800fa10:	f007 fdfc 	bl	801760c <rcl_expand_topic_name>
 800fa14:	4683      	mov	fp, r0
 800fa16:	b9d8      	cbnz	r0, 800fa50 <rcl_node_resolve_name+0x128>
 800fa18:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800fa1a:	4602      	mov	r2, r0
 800fa1c:	9009      	str	r0, [sp, #36]	; 0x24
 800fa1e:	a90a      	add	r1, sp, #40	; 0x28
 800fa20:	4620      	mov	r0, r4
 800fa22:	f002 fcd5 	bl	80123d0 <rmw_validate_full_topic_name>
 800fa26:	bb50      	cbnz	r0, 800fa7e <rcl_node_resolve_name+0x156>
 800fa28:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800fa2a:	2d00      	cmp	r5, #0
 800fa2c:	d140      	bne.n	800fab0 <rcl_node_resolve_name+0x188>
 800fa2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fa30:	a808      	add	r0, sp, #32
 800fa32:	601c      	str	r4, [r3, #0]
 800fa34:	f002 fc22 	bl	801227c <rcutils_string_map_fini>
 800fa38:	4683      	mov	fp, r0
 800fa3a:	2800      	cmp	r0, #0
 800fa3c:	d043      	beq.n	800fac6 <rcl_node_resolve_name+0x19e>
 800fa3e:	f7fc fba9 	bl	800c194 <rcutils_get_error_string>
 800fa42:	46a8      	mov	r8, r5
 800fa44:	f04f 0b01 	mov.w	fp, #1
 800fa48:	462c      	mov	r4, r5
 800fa4a:	f7fc fbb9 	bl	800c1c0 <rcutils_reset_error>
 800fa4e:	e00a      	b.n	800fa66 <rcl_node_resolve_name+0x13e>
 800fa50:	2867      	cmp	r0, #103	; 0x67
 800fa52:	bf14      	ite	ne
 800fa54:	f04f 0800 	movne.w	r8, #0
 800fa58:	f008 0801 	andeq.w	r8, r8, #1
 800fa5c:	9c07      	ldr	r4, [sp, #28]
 800fa5e:	a808      	add	r0, sp, #32
 800fa60:	f002 fc0c 	bl	801227c <rcutils_string_map_fini>
 800fa64:	bb50      	cbnz	r0, 800fabc <rcl_node_resolve_name+0x194>
 800fa66:	4651      	mov	r1, sl
 800fa68:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fa6a:	47c8      	blx	r9
 800fa6c:	4651      	mov	r1, sl
 800fa6e:	4620      	mov	r0, r4
 800fa70:	47c8      	blx	r9
 800fa72:	f1b8 0f00 	cmp.w	r8, #0
 800fa76:	bf18      	it	ne
 800fa78:	f04f 0b68 	movne.w	fp, #104	; 0x68
 800fa7c:	e797      	b.n	800f9ae <rcl_node_resolve_name+0x86>
 800fa7e:	f7fc fb89 	bl	800c194 <rcutils_get_error_string>
 800fa82:	f7fc fb9d 	bl	800c1c0 <rcutils_reset_error>
 800fa86:	a808      	add	r0, sp, #32
 800fa88:	f002 fbf8 	bl	801227c <rcutils_string_map_fini>
 800fa8c:	b998      	cbnz	r0, 800fab6 <rcl_node_resolve_name+0x18e>
 800fa8e:	4651      	mov	r1, sl
 800fa90:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fa92:	47c8      	blx	r9
 800fa94:	4651      	mov	r1, sl
 800fa96:	4620      	mov	r0, r4
 800fa98:	f04f 0b01 	mov.w	fp, #1
 800fa9c:	47c8      	blx	r9
 800fa9e:	e786      	b.n	800f9ae <rcl_node_resolve_name+0x86>
 800faa0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800faa4:	f7fc fb76 	bl	800c194 <rcutils_get_error_string>
 800faa8:	f7fc fb8a 	bl	800c1c0 <rcutils_reset_error>
 800faac:	4644      	mov	r4, r8
 800faae:	e7da      	b.n	800fa66 <rcl_node_resolve_name+0x13e>
 800fab0:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800fab4:	e7d3      	b.n	800fa5e <rcl_node_resolve_name+0x136>
 800fab6:	46d8      	mov	r8, fp
 800fab8:	f04f 0b01 	mov.w	fp, #1
 800fabc:	f7fc fb6a 	bl	800c194 <rcutils_get_error_string>
 800fac0:	f7fc fb7e 	bl	800c1c0 <rcutils_reset_error>
 800fac4:	e7cf      	b.n	800fa66 <rcl_node_resolve_name+0x13e>
 800fac6:	4651      	mov	r1, sl
 800fac8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800faca:	47c8      	blx	r9
 800facc:	4651      	mov	r1, sl
 800face:	4658      	mov	r0, fp
 800fad0:	47c8      	blx	r9
 800fad2:	e76c      	b.n	800f9ae <rcl_node_resolve_name+0x86>

0800fad4 <exact_match_lookup>:
 800fad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fad6:	f102 0708 	add.w	r7, r2, #8
 800fada:	460b      	mov	r3, r1
 800fadc:	b085      	sub	sp, #20
 800fade:	4614      	mov	r4, r2
 800fae0:	4606      	mov	r6, r0
 800fae2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800fae6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800faea:	4618      	mov	r0, r3
 800faec:	4919      	ldr	r1, [pc, #100]	; (800fb54 <exact_match_lookup+0x80>)
 800faee:	e894 000c 	ldmia.w	r4, {r2, r3}
 800faf2:	f002 f9a3 	bl	8011e3c <rcutils_join_path>
 800faf6:	7833      	ldrb	r3, [r6, #0]
 800faf8:	4605      	mov	r5, r0
 800fafa:	2b2f      	cmp	r3, #47	; 0x2f
 800fafc:	d023      	beq.n	800fb46 <exact_match_lookup+0x72>
 800fafe:	f104 030c 	add.w	r3, r4, #12
 800fb02:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fb06:	e88d 0003 	stmia.w	sp, {r0, r1}
 800fb0a:	1c70      	adds	r0, r6, #1
 800fb0c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800fb10:	f002 f99a 	bl	8011e48 <rcutils_to_native_path>
 800fb14:	4606      	mov	r6, r0
 800fb16:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800fb1a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800fb1e:	4631      	mov	r1, r6
 800fb20:	4628      	mov	r0, r5
 800fb22:	e894 000c 	ldmia.w	r4, {r2, r3}
 800fb26:	f002 f989 	bl	8011e3c <rcutils_join_path>
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	4630      	mov	r0, r6
 800fb2e:	6862      	ldr	r2, [r4, #4]
 800fb30:	461e      	mov	r6, r3
 800fb32:	6921      	ldr	r1, [r4, #16]
 800fb34:	4790      	blx	r2
 800fb36:	4628      	mov	r0, r5
 800fb38:	4635      	mov	r5, r6
 800fb3a:	6863      	ldr	r3, [r4, #4]
 800fb3c:	6921      	ldr	r1, [r4, #16]
 800fb3e:	4798      	blx	r3
 800fb40:	4628      	mov	r0, r5
 800fb42:	b005      	add	sp, #20
 800fb44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb46:	7873      	ldrb	r3, [r6, #1]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d1d8      	bne.n	800fafe <exact_match_lookup+0x2a>
 800fb4c:	4628      	mov	r0, r5
 800fb4e:	b005      	add	sp, #20
 800fb50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb52:	bf00      	nop
 800fb54:	0801b564 	.word	0x0801b564

0800fb58 <rcl_get_secure_root>:
 800fb58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fb5c:	b085      	sub	sp, #20
 800fb5e:	b168      	cbz	r0, 800fb7c <rcl_get_secure_root+0x24>
 800fb60:	4607      	mov	r7, r0
 800fb62:	4608      	mov	r0, r1
 800fb64:	460c      	mov	r4, r1
 800fb66:	f7fc fb07 	bl	800c178 <rcutils_allocator_is_valid>
 800fb6a:	b138      	cbz	r0, 800fb7c <rcl_get_secure_root+0x24>
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	482d      	ldr	r0, [pc, #180]	; (800fc24 <rcl_get_secure_root+0xcc>)
 800fb70:	a903      	add	r1, sp, #12
 800fb72:	9303      	str	r3, [sp, #12]
 800fb74:	f002 f948 	bl	8011e08 <rcutils_get_env>
 800fb78:	4605      	mov	r5, r0
 800fb7a:	b120      	cbz	r0, 800fb86 <rcl_get_secure_root+0x2e>
 800fb7c:	2500      	movs	r5, #0
 800fb7e:	4628      	mov	r0, r5
 800fb80:	b005      	add	sp, #20
 800fb82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb86:	9b03      	ldr	r3, [sp, #12]
 800fb88:	781a      	ldrb	r2, [r3, #0]
 800fb8a:	2a00      	cmp	r2, #0
 800fb8c:	d0f6      	beq.n	800fb7c <rcl_get_secure_root+0x24>
 800fb8e:	f104 090c 	add.w	r9, r4, #12
 800fb92:	e899 0003 	ldmia.w	r9, {r0, r1}
 800fb96:	e88d 0003 	stmia.w	sp, {r0, r1}
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800fba0:	f002 fa94 	bl	80120cc <rcutils_strdup>
 800fba4:	4680      	mov	r8, r0
 800fba6:	2800      	cmp	r0, #0
 800fba8:	d0e8      	beq.n	800fb7c <rcl_get_secure_root+0x24>
 800fbaa:	a903      	add	r1, sp, #12
 800fbac:	481e      	ldr	r0, [pc, #120]	; (800fc28 <rcl_get_secure_root+0xd0>)
 800fbae:	9503      	str	r5, [sp, #12]
 800fbb0:	f002 f92a 	bl	8011e08 <rcutils_get_env>
 800fbb4:	b160      	cbz	r0, 800fbd0 <rcl_get_secure_root+0x78>
 800fbb6:	2600      	movs	r6, #0
 800fbb8:	4630      	mov	r0, r6
 800fbba:	6863      	ldr	r3, [r4, #4]
 800fbbc:	6921      	ldr	r1, [r4, #16]
 800fbbe:	4798      	blx	r3
 800fbc0:	4640      	mov	r0, r8
 800fbc2:	6863      	ldr	r3, [r4, #4]
 800fbc4:	6921      	ldr	r1, [r4, #16]
 800fbc6:	4798      	blx	r3
 800fbc8:	4628      	mov	r0, r5
 800fbca:	b005      	add	sp, #20
 800fbcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fbd0:	9b03      	ldr	r3, [sp, #12]
 800fbd2:	781e      	ldrb	r6, [r3, #0]
 800fbd4:	b1f6      	cbz	r6, 800fc14 <rcl_get_secure_root+0xbc>
 800fbd6:	e899 0003 	ldmia.w	r9, {r0, r1}
 800fbda:	e88d 0003 	stmia.w	sp, {r0, r1}
 800fbde:	4618      	mov	r0, r3
 800fbe0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800fbe4:	f002 fa72 	bl	80120cc <rcutils_strdup>
 800fbe8:	4606      	mov	r6, r0
 800fbea:	2800      	cmp	r0, #0
 800fbec:	d0e3      	beq.n	800fbb6 <rcl_get_secure_root+0x5e>
 800fbee:	4622      	mov	r2, r4
 800fbf0:	4641      	mov	r1, r8
 800fbf2:	f7ff ff6f 	bl	800fad4 <exact_match_lookup>
 800fbf6:	4605      	mov	r5, r0
 800fbf8:	2d00      	cmp	r5, #0
 800fbfa:	d0dd      	beq.n	800fbb8 <rcl_get_secure_root+0x60>
 800fbfc:	4628      	mov	r0, r5
 800fbfe:	f002 f91b 	bl	8011e38 <rcutils_is_directory>
 800fc02:	4603      	mov	r3, r0
 800fc04:	2800      	cmp	r0, #0
 800fc06:	d1d7      	bne.n	800fbb8 <rcl_get_secure_root+0x60>
 800fc08:	4628      	mov	r0, r5
 800fc0a:	6921      	ldr	r1, [r4, #16]
 800fc0c:	461d      	mov	r5, r3
 800fc0e:	6863      	ldr	r3, [r4, #4]
 800fc10:	4798      	blx	r3
 800fc12:	e7d1      	b.n	800fbb8 <rcl_get_secure_root+0x60>
 800fc14:	4622      	mov	r2, r4
 800fc16:	4638      	mov	r0, r7
 800fc18:	4641      	mov	r1, r8
 800fc1a:	f7ff ff5b 	bl	800fad4 <exact_match_lookup>
 800fc1e:	4605      	mov	r5, r0
 800fc20:	e7ea      	b.n	800fbf8 <rcl_get_secure_root+0xa0>
 800fc22:	bf00      	nop
 800fc24:	0801b570 	.word	0x0801b570
 800fc28:	0801b588 	.word	0x0801b588

0800fc2c <rcl_get_security_options_from_environment>:
 800fc2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc30:	b082      	sub	sp, #8
 800fc32:	2300      	movs	r3, #0
 800fc34:	4606      	mov	r6, r0
 800fc36:	460f      	mov	r7, r1
 800fc38:	4821      	ldr	r0, [pc, #132]	; (800fcc0 <rcl_get_security_options_from_environment+0x94>)
 800fc3a:	a901      	add	r1, sp, #4
 800fc3c:	4690      	mov	r8, r2
 800fc3e:	9301      	str	r3, [sp, #4]
 800fc40:	f002 f8e2 	bl	8011e08 <rcutils_get_env>
 800fc44:	b120      	cbz	r0, 800fc50 <rcl_get_security_options_from_environment+0x24>
 800fc46:	2501      	movs	r5, #1
 800fc48:	4628      	mov	r0, r5
 800fc4a:	b002      	add	sp, #8
 800fc4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc50:	4604      	mov	r4, r0
 800fc52:	491c      	ldr	r1, [pc, #112]	; (800fcc4 <rcl_get_security_options_from_environment+0x98>)
 800fc54:	9801      	ldr	r0, [sp, #4]
 800fc56:	f7f0 faf3 	bl	8000240 <strcmp>
 800fc5a:	4605      	mov	r5, r0
 800fc5c:	b9f0      	cbnz	r0, 800fc9c <rcl_get_security_options_from_environment+0x70>
 800fc5e:	9001      	str	r0, [sp, #4]
 800fc60:	f1b8 0f00 	cmp.w	r8, #0
 800fc64:	d021      	beq.n	800fcaa <rcl_get_security_options_from_environment+0x7e>
 800fc66:	a901      	add	r1, sp, #4
 800fc68:	4817      	ldr	r0, [pc, #92]	; (800fcc8 <rcl_get_security_options_from_environment+0x9c>)
 800fc6a:	f002 f8cd 	bl	8011e08 <rcutils_get_env>
 800fc6e:	2800      	cmp	r0, #0
 800fc70:	d1e9      	bne.n	800fc46 <rcl_get_security_options_from_environment+0x1a>
 800fc72:	4916      	ldr	r1, [pc, #88]	; (800fccc <rcl_get_security_options_from_environment+0xa0>)
 800fc74:	9801      	ldr	r0, [sp, #4]
 800fc76:	f7f0 fae3 	bl	8000240 <strcmp>
 800fc7a:	4603      	mov	r3, r0
 800fc7c:	4639      	mov	r1, r7
 800fc7e:	4630      	mov	r0, r6
 800fc80:	fab3 f383 	clz	r3, r3
 800fc84:	095b      	lsrs	r3, r3, #5
 800fc86:	f888 3000 	strb.w	r3, [r8]
 800fc8a:	f7ff ff65 	bl	800fb58 <rcl_get_secure_root>
 800fc8e:	b170      	cbz	r0, 800fcae <rcl_get_security_options_from_environment+0x82>
 800fc90:	f8c8 0004 	str.w	r0, [r8, #4]
 800fc94:	4628      	mov	r0, r5
 800fc96:	b002      	add	sp, #8
 800fc98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc9c:	4625      	mov	r5, r4
 800fc9e:	f888 4000 	strb.w	r4, [r8]
 800fca2:	4628      	mov	r0, r5
 800fca4:	b002      	add	sp, #8
 800fca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcaa:	250b      	movs	r5, #11
 800fcac:	e7cc      	b.n	800fc48 <rcl_get_security_options_from_environment+0x1c>
 800fcae:	f898 5000 	ldrb.w	r5, [r8]
 800fcb2:	f1a5 0501 	sub.w	r5, r5, #1
 800fcb6:	fab5 f585 	clz	r5, r5
 800fcba:	096d      	lsrs	r5, r5, #5
 800fcbc:	e7c4      	b.n	800fc48 <rcl_get_security_options_from_environment+0x1c>
 800fcbe:	bf00      	nop
 800fcc0:	0801b528 	.word	0x0801b528
 800fcc4:	0801b53c 	.word	0x0801b53c
 800fcc8:	0801b544 	.word	0x0801b544
 800fccc:	0801b55c 	.word	0x0801b55c

0800fcd0 <rcl_get_zero_initialized_service>:
 800fcd0:	4b01      	ldr	r3, [pc, #4]	; (800fcd8 <rcl_get_zero_initialized_service+0x8>)
 800fcd2:	6818      	ldr	r0, [r3, #0]
 800fcd4:	4770      	bx	lr
 800fcd6:	bf00      	nop
 800fcd8:	0801b5a8 	.word	0x0801b5a8

0800fcdc <rcl_service_init>:
 800fcdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fce0:	b086      	sub	sp, #24
 800fce2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800fce4:	2d00      	cmp	r5, #0
 800fce6:	d04d      	beq.n	800fd84 <rcl_service_init+0xa8>
 800fce8:	f105 0950 	add.w	r9, r5, #80	; 0x50
 800fcec:	4604      	mov	r4, r0
 800fcee:	460e      	mov	r6, r1
 800fcf0:	4690      	mov	r8, r2
 800fcf2:	4648      	mov	r0, r9
 800fcf4:	461f      	mov	r7, r3
 800fcf6:	f7fc fa3f 	bl	800c178 <rcutils_allocator_is_valid>
 800fcfa:	2c00      	cmp	r4, #0
 800fcfc:	d042      	beq.n	800fd84 <rcl_service_init+0xa8>
 800fcfe:	f080 0001 	eor.w	r0, r0, #1
 800fd02:	b2c0      	uxtb	r0, r0
 800fd04:	2800      	cmp	r0, #0
 800fd06:	d13d      	bne.n	800fd84 <rcl_service_init+0xa8>
 800fd08:	4630      	mov	r0, r6
 800fd0a:	f7ff fdb5 	bl	800f878 <rcl_node_is_valid>
 800fd0e:	2800      	cmp	r0, #0
 800fd10:	d042      	beq.n	800fd98 <rcl_service_init+0xbc>
 800fd12:	2f00      	cmp	r7, #0
 800fd14:	d036      	beq.n	800fd84 <rcl_service_init+0xa8>
 800fd16:	f1b8 0f00 	cmp.w	r8, #0
 800fd1a:	d033      	beq.n	800fd84 <rcl_service_init+0xa8>
 800fd1c:	f8d4 a000 	ldr.w	sl, [r4]
 800fd20:	f1ba 0f00 	cmp.w	sl, #0
 800fd24:	d133      	bne.n	800fd8e <rcl_service_init+0xb2>
 800fd26:	f44f 718c 	mov.w	r1, #280	; 0x118
 800fd2a:	2001      	movs	r0, #1
 800fd2c:	e9d5 3217 	ldrd	r3, r2, [r5, #92]	; 0x5c
 800fd30:	4798      	blx	r3
 800fd32:	6020      	str	r0, [r4, #0]
 800fd34:	2800      	cmp	r0, #0
 800fd36:	d075      	beq.n	800fe24 <rcl_service_init+0x148>
 800fd38:	f500 7088 	add.w	r0, r0, #272	; 0x110
 800fd3c:	f105 0358 	add.w	r3, r5, #88	; 0x58
 800fd40:	2201      	movs	r2, #1
 800fd42:	f8cd a010 	str.w	sl, [sp, #16]
 800fd46:	9005      	str	r0, [sp, #20]
 800fd48:	9203      	str	r2, [sp, #12]
 800fd4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fd4e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800fd52:	4639      	mov	r1, r7
 800fd54:	4630      	mov	r0, r6
 800fd56:	e899 000c 	ldmia.w	r9, {r2, r3}
 800fd5a:	f7ff fde5 	bl	800f928 <rcl_node_resolve_name>
 800fd5e:	4607      	mov	r7, r0
 800fd60:	b1f8      	cbz	r0, 800fda2 <rcl_service_init+0xc6>
 800fd62:	f1a0 0368 	sub.w	r3, r0, #104	; 0x68
 800fd66:	6820      	ldr	r0, [r4, #0]
 800fd68:	2b01      	cmp	r3, #1
 800fd6a:	d943      	bls.n	800fdf4 <rcl_service_init+0x118>
 800fd6c:	2f0a      	cmp	r7, #10
 800fd6e:	d000      	beq.n	800fd72 <rcl_service_init+0x96>
 800fd70:	2701      	movs	r7, #1
 800fd72:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800fd74:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800fd76:	4798      	blx	r3
 800fd78:	2300      	movs	r3, #0
 800fd7a:	4638      	mov	r0, r7
 800fd7c:	6023      	str	r3, [r4, #0]
 800fd7e:	b006      	add	sp, #24
 800fd80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd84:	270b      	movs	r7, #11
 800fd86:	4638      	mov	r0, r7
 800fd88:	b006      	add	sp, #24
 800fd8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd8e:	2764      	movs	r7, #100	; 0x64
 800fd90:	4638      	mov	r0, r7
 800fd92:	b006      	add	sp, #24
 800fd94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd98:	27c8      	movs	r7, #200	; 0xc8
 800fd9a:	4638      	mov	r0, r7
 800fd9c:	b006      	add	sp, #24
 800fd9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fda2:	4630      	mov	r0, r6
 800fda4:	f7ff fd8a 	bl	800f8bc <rcl_node_get_rmw_handle>
 800fda8:	6827      	ldr	r7, [r4, #0]
 800fdaa:	4641      	mov	r1, r8
 800fdac:	462b      	mov	r3, r5
 800fdae:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800fdb2:	f003 f9b5 	bl	8013120 <rmw_create_service>
 800fdb6:	6821      	ldr	r1, [r4, #0]
 800fdb8:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 800fdbc:	f8d1 0108 	ldr.w	r0, [r1, #264]	; 0x108
 800fdc0:	b390      	cbz	r0, 800fe28 <rcl_service_init+0x14c>
 800fdc2:	3168      	adds	r1, #104	; 0x68
 800fdc4:	f003 fade 	bl	8013384 <rmw_service_request_subscription_get_actual_qos>
 800fdc8:	b9b0      	cbnz	r0, 800fdf8 <rcl_service_init+0x11c>
 800fdca:	6823      	ldr	r3, [r4, #0]
 800fdcc:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 800fdd0:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800fdd4:	f003 fac2 	bl	801335c <rmw_service_response_publisher_get_actual_qos>
 800fdd8:	4607      	mov	r7, r0
 800fdda:	b968      	cbnz	r0, 800fdf8 <rcl_service_init+0x11c>
 800fddc:	6820      	ldr	r0, [r4, #0]
 800fdde:	2268      	movs	r2, #104	; 0x68
 800fde0:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 800fde4:	4629      	mov	r1, r5
 800fde6:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
 800fdea:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
 800fdee:	f009 fd96 	bl	801991e <memcpy>
 800fdf2:	e7c8      	b.n	800fd86 <rcl_service_init+0xaa>
 800fdf4:	2768      	movs	r7, #104	; 0x68
 800fdf6:	e7bc      	b.n	800fd72 <rcl_service_init+0x96>
 800fdf8:	f7ff f924 	bl	800f044 <rcl_convert_rmw_ret_to_rcl_ret>
 800fdfc:	4607      	mov	r7, r0
 800fdfe:	4630      	mov	r0, r6
 800fe00:	f7ff fd5c 	bl	800f8bc <rcl_node_get_rmw_handle>
 800fe04:	6823      	ldr	r3, [r4, #0]
 800fe06:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800fe0a:	f003 fa63 	bl	80132d4 <rmw_destroy_service>
 800fe0e:	6821      	ldr	r1, [r4, #0]
 800fe10:	f8d1 0110 	ldr.w	r0, [r1, #272]	; 0x110
 800fe14:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800fe16:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800fe18:	4798      	blx	r3
 800fe1a:	6820      	ldr	r0, [r4, #0]
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
 800fe22:	e7a6      	b.n	800fd72 <rcl_service_init+0x96>
 800fe24:	270a      	movs	r7, #10
 800fe26:	e7ae      	b.n	800fd86 <rcl_service_init+0xaa>
 800fe28:	2701      	movs	r7, #1
 800fe2a:	e7f1      	b.n	800fe10 <rcl_service_init+0x134>

0800fe2c <rcl_service_get_default_options>:
 800fe2c:	b530      	push	{r4, r5, lr}
 800fe2e:	4d0f      	ldr	r5, [pc, #60]	; (800fe6c <rcl_service_get_default_options+0x40>)
 800fe30:	b087      	sub	sp, #28
 800fe32:	4604      	mov	r4, r0
 800fe34:	2250      	movs	r2, #80	; 0x50
 800fe36:	490e      	ldr	r1, [pc, #56]	; (800fe70 <rcl_service_get_default_options+0x44>)
 800fe38:	4628      	mov	r0, r5
 800fe3a:	f009 fd70 	bl	801991e <memcpy>
 800fe3e:	4668      	mov	r0, sp
 800fe40:	f7fc f98c 	bl	800c15c <rcutils_get_default_allocator>
 800fe44:	46ec      	mov	ip, sp
 800fe46:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 800fe4a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fe4e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fe52:	f8dc 3000 	ldr.w	r3, [ip]
 800fe56:	2268      	movs	r2, #104	; 0x68
 800fe58:	4629      	mov	r1, r5
 800fe5a:	4620      	mov	r0, r4
 800fe5c:	f8ce 3000 	str.w	r3, [lr]
 800fe60:	f009 fd5d 	bl	801991e <memcpy>
 800fe64:	4620      	mov	r0, r4
 800fe66:	b007      	add	sp, #28
 800fe68:	bd30      	pop	{r4, r5, pc}
 800fe6a:	bf00      	nop
 800fe6c:	2000bd28 	.word	0x2000bd28
 800fe70:	0801b5b0 	.word	0x0801b5b0

0800fe74 <rcl_service_get_rmw_handle>:
 800fe74:	b118      	cbz	r0, 800fe7e <rcl_service_get_rmw_handle+0xa>
 800fe76:	6800      	ldr	r0, [r0, #0]
 800fe78:	b108      	cbz	r0, 800fe7e <rcl_service_get_rmw_handle+0xa>
 800fe7a:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800fe7e:	4770      	bx	lr

0800fe80 <rcl_take_request>:
 800fe80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe82:	468e      	mov	lr, r1
 800fe84:	b091      	sub	sp, #68	; 0x44
 800fe86:	460c      	mov	r4, r1
 800fe88:	4617      	mov	r7, r2
 800fe8a:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 800fe8e:	4605      	mov	r5, r0
 800fe90:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fe94:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fe98:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800fe9c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800fea0:	b30d      	cbz	r5, 800fee6 <rcl_take_request+0x66>
 800fea2:	682b      	ldr	r3, [r5, #0]
 800fea4:	b1fb      	cbz	r3, 800fee6 <rcl_take_request+0x66>
 800fea6:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800feaa:	b1e0      	cbz	r0, 800fee6 <rcl_take_request+0x66>
 800feac:	b397      	cbz	r7, 800ff14 <rcl_take_request+0x94>
 800feae:	2300      	movs	r3, #0
 800feb0:	463a      	mov	r2, r7
 800feb2:	a906      	add	r1, sp, #24
 800feb4:	f88d 3017 	strb.w	r3, [sp, #23]
 800feb8:	f10d 0317 	add.w	r3, sp, #23
 800febc:	f003 f82e 	bl	8012f1c <rmw_take_request>
 800fec0:	4606      	mov	r6, r0
 800fec2:	b198      	cbz	r0, 800feec <rcl_take_request+0x6c>
 800fec4:	280a      	cmp	r0, #10
 800fec6:	bf18      	it	ne
 800fec8:	2601      	movne	r6, #1
 800feca:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 800fece:	46a6      	mov	lr, r4
 800fed0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fed4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fed8:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800fedc:	e88e 0003 	stmia.w	lr, {r0, r1}
 800fee0:	4630      	mov	r0, r6
 800fee2:	b011      	add	sp, #68	; 0x44
 800fee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fee6:	f44f 7616 	mov.w	r6, #600	; 0x258
 800feea:	e7ee      	b.n	800feca <rcl_take_request+0x4a>
 800feec:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800fef0:	b193      	cbz	r3, 800ff18 <rcl_take_request+0x98>
 800fef2:	682b      	ldr	r3, [r5, #0]
 800fef4:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
 800fef8:	2800      	cmp	r0, #0
 800fefa:	d0e6      	beq.n	800feca <rcl_take_request+0x4a>
 800fefc:	463a      	mov	r2, r7
 800fefe:	ab0a      	add	r3, sp, #40	; 0x28
 800ff00:	2101      	movs	r1, #1
 800ff02:	9302      	str	r3, [sp, #8]
 800ff04:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 800ff08:	e9cd 6700 	strd	r6, r7, [sp]
 800ff0c:	f000 f844 	bl	800ff98 <rcl_send_service_event_message>
 800ff10:	4606      	mov	r6, r0
 800ff12:	e7da      	b.n	800feca <rcl_take_request+0x4a>
 800ff14:	260b      	movs	r6, #11
 800ff16:	e7d8      	b.n	800feca <rcl_take_request+0x4a>
 800ff18:	f240 2659 	movw	r6, #601	; 0x259
 800ff1c:	e7d5      	b.n	800feca <rcl_take_request+0x4a>
 800ff1e:	bf00      	nop

0800ff20 <rcl_send_response>:
 800ff20:	b350      	cbz	r0, 800ff78 <rcl_send_response+0x58>
 800ff22:	6803      	ldr	r3, [r0, #0]
 800ff24:	b570      	push	{r4, r5, r6, lr}
 800ff26:	4604      	mov	r4, r0
 800ff28:	b084      	sub	sp, #16
 800ff2a:	b1cb      	cbz	r3, 800ff60 <rcl_send_response+0x40>
 800ff2c:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800ff30:	b1b0      	cbz	r0, 800ff60 <rcl_send_response+0x40>
 800ff32:	4615      	mov	r5, r2
 800ff34:	b1ea      	cbz	r2, 800ff72 <rcl_send_response+0x52>
 800ff36:	460e      	mov	r6, r1
 800ff38:	b1d9      	cbz	r1, 800ff72 <rcl_send_response+0x52>
 800ff3a:	f003 f84d 	bl	8012fd8 <rmw_send_response>
 800ff3e:	b998      	cbnz	r0, 800ff68 <rcl_send_response+0x48>
 800ff40:	6823      	ldr	r3, [r4, #0]
 800ff42:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ff46:	b16b      	cbz	r3, 800ff64 <rcl_send_response+0x44>
 800ff48:	462a      	mov	r2, r5
 800ff4a:	2102      	movs	r1, #2
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	ed96 7b04 	vldr	d7, [r6, #16]
 800ff52:	9602      	str	r6, [sp, #8]
 800ff54:	ed8d 7b00 	vstr	d7, [sp]
 800ff58:	f000 f81e 	bl	800ff98 <rcl_send_service_event_message>
 800ff5c:	b004      	add	sp, #16
 800ff5e:	bd70      	pop	{r4, r5, r6, pc}
 800ff60:	f44f 7016 	mov.w	r0, #600	; 0x258
 800ff64:	b004      	add	sp, #16
 800ff66:	bd70      	pop	{r4, r5, r6, pc}
 800ff68:	2802      	cmp	r0, #2
 800ff6a:	bf18      	it	ne
 800ff6c:	2001      	movne	r0, #1
 800ff6e:	b004      	add	sp, #16
 800ff70:	bd70      	pop	{r4, r5, r6, pc}
 800ff72:	200b      	movs	r0, #11
 800ff74:	b004      	add	sp, #16
 800ff76:	bd70      	pop	{r4, r5, r6, pc}
 800ff78:	f44f 7016 	mov.w	r0, #600	; 0x258
 800ff7c:	4770      	bx	lr
 800ff7e:	bf00      	nop

0800ff80 <rcl_service_is_valid>:
 800ff80:	b130      	cbz	r0, 800ff90 <rcl_service_is_valid+0x10>
 800ff82:	6800      	ldr	r0, [r0, #0]
 800ff84:	b120      	cbz	r0, 800ff90 <rcl_service_is_valid+0x10>
 800ff86:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800ff8a:	3800      	subs	r0, #0
 800ff8c:	bf18      	it	ne
 800ff8e:	2001      	movne	r0, #1
 800ff90:	4770      	bx	lr
 800ff92:	bf00      	nop
 800ff94:	0000      	movs	r0, r0
	...

0800ff98 <rcl_send_service_event_message>:
 800ff98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ff9c:	b093      	sub	sp, #76	; 0x4c
 800ff9e:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800ffa0:	b196      	cbz	r6, 800ffc8 <rcl_send_service_event_message+0x30>
 800ffa2:	4615      	mov	r5, r2
 800ffa4:	b182      	cbz	r2, 800ffc8 <rcl_send_service_event_message+0x30>
 800ffa6:	4604      	mov	r4, r0
 800ffa8:	b148      	cbz	r0, 800ffbe <rcl_send_service_event_message+0x26>
 800ffaa:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800ffae:	b133      	cbz	r3, 800ffbe <rcl_send_service_event_message+0x26>
 800ffb0:	68c0      	ldr	r0, [r0, #12]
 800ffb2:	460f      	mov	r7, r1
 800ffb4:	f000 f90c 	bl	80101d0 <rcl_clock_valid>
 800ffb8:	b108      	cbz	r0, 800ffbe <rcl_send_service_event_message+0x26>
 800ffba:	7a23      	ldrb	r3, [r4, #8]
 800ffbc:	b94b      	cbnz	r3, 800ffd2 <rcl_send_service_event_message+0x3a>
 800ffbe:	2401      	movs	r4, #1
 800ffc0:	4620      	mov	r0, r4
 800ffc2:	b013      	add	sp, #76	; 0x4c
 800ffc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ffc8:	240b      	movs	r4, #11
 800ffca:	4620      	mov	r0, r4
 800ffcc:	b013      	add	sp, #76	; 0x4c
 800ffce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ffd2:	f104 0e60 	add.w	lr, r4, #96	; 0x60
 800ffd6:	f10d 0c0c 	add.w	ip, sp, #12
 800ffda:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ffde:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ffe2:	f8de 3000 	ldr.w	r3, [lr]
 800ffe6:	a803      	add	r0, sp, #12
 800ffe8:	f8cc 3000 	str.w	r3, [ip]
 800ffec:	f7fc f8c4 	bl	800c178 <rcutils_allocator_is_valid>
 800fff0:	2800      	cmp	r0, #0
 800fff2:	d0e9      	beq.n	800ffc8 <rcl_send_service_event_message+0x30>
 800fff4:	6820      	ldr	r0, [r4, #0]
 800fff6:	f007 fd41 	bl	8017a7c <rcl_publisher_is_valid>
 800fffa:	2800      	cmp	r0, #0
 800fffc:	d05e      	beq.n	80100bc <rcl_send_service_event_message+0x124>
 800fffe:	4669      	mov	r1, sp
 8010000:	68e0      	ldr	r0, [r4, #12]
 8010002:	f000 f977 	bl	80102f4 <rcl_clock_get_now>
 8010006:	4601      	mov	r1, r0
 8010008:	2800      	cmp	r0, #0
 801000a:	d146      	bne.n	801009a <rcl_send_service_event_message+0x102>
 801000c:	2220      	movs	r2, #32
 801000e:	eb0d 0002 	add.w	r0, sp, r2
 8010012:	f009 fb0f 	bl	8019634 <memset>
 8010016:	f88d 7020 	strb.w	r7, [sp, #32]
 801001a:	e9dd 8900 	ldrd	r8, r9, [sp]
 801001e:	a32a      	add	r3, pc, #168	; (adr r3, 80100c8 <rcl_send_service_event_message+0x130>)
 8010020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010024:	4640      	mov	r0, r8
 8010026:	4649      	mov	r1, r9
 8010028:	f7f0 f972 	bl	8000310 <__aeabi_ldivmod>
 801002c:	4649      	mov	r1, r9
 801002e:	9009      	str	r0, [sp, #36]	; 0x24
 8010030:	4640      	mov	r0, r8
 8010032:	a325      	add	r3, pc, #148	; (adr r3, 80100c8 <rcl_send_service_event_message+0x130>)
 8010034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010038:	f7f0 f96a 	bl	8000310 <__aeabi_ldivmod>
 801003c:	920a      	str	r2, [sp, #40]	; 0x28
 801003e:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 8010042:	6830      	ldr	r0, [r6, #0]
 8010044:	6871      	ldr	r1, [r6, #4]
 8010046:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801004a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 801004e:	7a23      	ldrb	r3, [r4, #8]
 8010050:	68b2      	ldr	r2, [r6, #8]
 8010052:	2b01      	cmp	r3, #1
 8010054:	68f3      	ldr	r3, [r6, #12]
 8010056:	bf08      	it	eq
 8010058:	2500      	moveq	r5, #0
 801005a:	2f01      	cmp	r7, #1
 801005c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010060:	d81f      	bhi.n	80100a2 <rcl_send_service_event_message+0x10a>
 8010062:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8010066:	462a      	mov	r2, r5
 8010068:	a808      	add	r0, sp, #32
 801006a:	a903      	add	r1, sp, #12
 801006c:	699d      	ldr	r5, [r3, #24]
 801006e:	2300      	movs	r3, #0
 8010070:	47a8      	blx	r5
 8010072:	4605      	mov	r5, r0
 8010074:	2d00      	cmp	r5, #0
 8010076:	d0a2      	beq.n	800ffbe <rcl_send_service_event_message+0x26>
 8010078:	4629      	mov	r1, r5
 801007a:	6820      	ldr	r0, [r4, #0]
 801007c:	2200      	movs	r2, #0
 801007e:	f007 fcd9 	bl	8017a34 <rcl_publish>
 8010082:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8010086:	4604      	mov	r4, r0
 8010088:	a903      	add	r1, sp, #12
 801008a:	4628      	mov	r0, r5
 801008c:	69db      	ldr	r3, [r3, #28]
 801008e:	4798      	blx	r3
 8010090:	2c00      	cmp	r4, #0
 8010092:	d095      	beq.n	800ffc0 <rcl_send_service_event_message+0x28>
 8010094:	f7fc f894 	bl	800c1c0 <rcutils_reset_error>
 8010098:	e792      	b.n	800ffc0 <rcl_send_service_event_message+0x28>
 801009a:	2401      	movs	r4, #1
 801009c:	f7fc f890 	bl	800c1c0 <rcutils_reset_error>
 80100a0:	e78e      	b.n	800ffc0 <rcl_send_service_event_message+0x28>
 80100a2:	1eb9      	subs	r1, r7, #2
 80100a4:	2901      	cmp	r1, #1
 80100a6:	d8f8      	bhi.n	801009a <rcl_send_service_event_message+0x102>
 80100a8:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80100ac:	462b      	mov	r3, r5
 80100ae:	a808      	add	r0, sp, #32
 80100b0:	a903      	add	r1, sp, #12
 80100b2:	6995      	ldr	r5, [r2, #24]
 80100b4:	2200      	movs	r2, #0
 80100b6:	47a8      	blx	r5
 80100b8:	4605      	mov	r5, r0
 80100ba:	e7db      	b.n	8010074 <rcl_send_service_event_message+0xdc>
 80100bc:	f44f 7496 	mov.w	r4, #300	; 0x12c
 80100c0:	e77e      	b.n	800ffc0 <rcl_send_service_event_message+0x28>
 80100c2:	bf00      	nop
 80100c4:	f3af 8000 	nop.w
 80100c8:	3b9aca00 	.word	0x3b9aca00
 80100cc:	00000000 	.word	0x00000000

080100d0 <rcl_take>:
 80100d0:	2800      	cmp	r0, #0
 80100d2:	d049      	beq.n	8010168 <rcl_take+0x98>
 80100d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100d8:	4615      	mov	r5, r2
 80100da:	6802      	ldr	r2, [r0, #0]
 80100dc:	b0a0      	sub	sp, #128	; 0x80
 80100de:	4604      	mov	r4, r0
 80100e0:	2a00      	cmp	r2, #0
 80100e2:	d039      	beq.n	8010158 <rcl_take+0x88>
 80100e4:	461f      	mov	r7, r3
 80100e6:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 80100ea:	b3ab      	cbz	r3, 8010158 <rcl_take+0x88>
 80100ec:	460e      	mov	r6, r1
 80100ee:	2900      	cmp	r1, #0
 80100f0:	d038      	beq.n	8010164 <rcl_take+0x94>
 80100f2:	2d00      	cmp	r5, #0
 80100f4:	d03c      	beq.n	8010170 <rcl_take+0xa0>
 80100f6:	a802      	add	r0, sp, #8
 80100f8:	f002 f962 	bl	80123c0 <rmw_get_zero_initialized_message_info>
 80100fc:	6823      	ldr	r3, [r4, #0]
 80100fe:	f10d 0c08 	add.w	ip, sp, #8
 8010102:	46ae      	mov	lr, r5
 8010104:	f8d3 80c8 	ldr.w	r8, [r3, #200]	; 0xc8
 8010108:	2400      	movs	r4, #0
 801010a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801010e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010112:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010116:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801011a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801011e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010122:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8010126:	462b      	mov	r3, r5
 8010128:	f10d 0247 	add.w	r2, sp, #71	; 0x47
 801012c:	f88d 4047 	strb.w	r4, [sp, #71]	; 0x47
 8010130:	e88e 0003 	stmia.w	lr, {r0, r1}
 8010134:	4631      	mov	r1, r6
 8010136:	4640      	mov	r0, r8
 8010138:	9700      	str	r7, [sp, #0]
 801013a:	f003 f999 	bl	8013470 <rmw_take_with_info>
 801013e:	4603      	mov	r3, r0
 8010140:	b9c0      	cbnz	r0, 8010174 <rcl_take+0xa4>
 8010142:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
 8010146:	f240 1291 	movw	r2, #401	; 0x191
 801014a:	2900      	cmp	r1, #0
 801014c:	bf08      	it	eq
 801014e:	4613      	moveq	r3, r2
 8010150:	4618      	mov	r0, r3
 8010152:	b020      	add	sp, #128	; 0x80
 8010154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010158:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801015c:	4618      	mov	r0, r3
 801015e:	b020      	add	sp, #128	; 0x80
 8010160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010164:	230b      	movs	r3, #11
 8010166:	e7f3      	b.n	8010150 <rcl_take+0x80>
 8010168:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801016c:	4618      	mov	r0, r3
 801016e:	4770      	bx	lr
 8010170:	ad12      	add	r5, sp, #72	; 0x48
 8010172:	e7c0      	b.n	80100f6 <rcl_take+0x26>
 8010174:	f7fe ff66 	bl	800f044 <rcl_convert_rmw_ret_to_rcl_ret>
 8010178:	4603      	mov	r3, r0
 801017a:	e7e9      	b.n	8010150 <rcl_take+0x80>

0801017c <rcl_subscription_get_rmw_handle>:
 801017c:	b118      	cbz	r0, 8010186 <rcl_subscription_get_rmw_handle+0xa>
 801017e:	6800      	ldr	r0, [r0, #0]
 8010180:	b108      	cbz	r0, 8010186 <rcl_subscription_get_rmw_handle+0xa>
 8010182:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 8010186:	4770      	bx	lr

08010188 <rcl_subscription_is_valid>:
 8010188:	b130      	cbz	r0, 8010198 <rcl_subscription_is_valid+0x10>
 801018a:	6800      	ldr	r0, [r0, #0]
 801018c:	b120      	cbz	r0, 8010198 <rcl_subscription_is_valid+0x10>
 801018e:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 8010192:	3800      	subs	r0, #0
 8010194:	bf18      	it	ne
 8010196:	2001      	movne	r0, #1
 8010198:	4770      	bx	lr
 801019a:	bf00      	nop

0801019c <rcl_get_system_time>:
 801019c:	4608      	mov	r0, r1
 801019e:	f7fc b82b 	b.w	800c1f8 <rcutils_system_time_now>
 80101a2:	bf00      	nop

080101a4 <rcl_get_steady_time>:
 80101a4:	4608      	mov	r0, r1
 80101a6:	f7fc b84f 	b.w	800c248 <rcutils_steady_time_now>
 80101aa:	bf00      	nop

080101ac <rcl_get_ros_time>:
 80101ac:	7a03      	ldrb	r3, [r0, #8]
 80101ae:	b510      	push	{r4, lr}
 80101b0:	460c      	mov	r4, r1
 80101b2:	b143      	cbz	r3, 80101c6 <rcl_get_ros_time+0x1a>
 80101b4:	2105      	movs	r1, #5
 80101b6:	f001 fd83 	bl	8011cc0 <__atomic_load_8>
 80101ba:	4602      	mov	r2, r0
 80101bc:	460b      	mov	r3, r1
 80101be:	2000      	movs	r0, #0
 80101c0:	e9c4 2300 	strd	r2, r3, [r4]
 80101c4:	bd10      	pop	{r4, pc}
 80101c6:	4608      	mov	r0, r1
 80101c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80101cc:	f7fc b814 	b.w	800c1f8 <rcutils_system_time_now>

080101d0 <rcl_clock_valid>:
 80101d0:	b138      	cbz	r0, 80101e2 <rcl_clock_valid+0x12>
 80101d2:	7803      	ldrb	r3, [r0, #0]
 80101d4:	b123      	cbz	r3, 80101e0 <rcl_clock_valid+0x10>
 80101d6:	68c0      	ldr	r0, [r0, #12]
 80101d8:	3800      	subs	r0, #0
 80101da:	bf18      	it	ne
 80101dc:	2001      	movne	r0, #1
 80101de:	4770      	bx	lr
 80101e0:	4618      	mov	r0, r3
 80101e2:	4770      	bx	lr

080101e4 <rcl_clock_init>:
 80101e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101e6:	4605      	mov	r5, r0
 80101e8:	4610      	mov	r0, r2
 80101ea:	4614      	mov	r4, r2
 80101ec:	460e      	mov	r6, r1
 80101ee:	f7fb ffc3 	bl	800c178 <rcutils_allocator_is_valid>
 80101f2:	b128      	cbz	r0, 8010200 <rcl_clock_init+0x1c>
 80101f4:	2d03      	cmp	r5, #3
 80101f6:	d803      	bhi.n	8010200 <rcl_clock_init+0x1c>
 80101f8:	e8df f005 	tbb	[pc, r5]
 80101fc:	0659301f 	.word	0x0659301f
 8010200:	f04f 0c0b 	mov.w	ip, #11
 8010204:	4660      	mov	r0, ip
 8010206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010208:	2c00      	cmp	r4, #0
 801020a:	d0f9      	beq.n	8010200 <rcl_clock_init+0x1c>
 801020c:	fab6 f386 	clz	r3, r6
 8010210:	095b      	lsrs	r3, r3, #5
 8010212:	2e00      	cmp	r6, #0
 8010214:	d0f4      	beq.n	8010200 <rcl_clock_init+0x1c>
 8010216:	6133      	str	r3, [r6, #16]
 8010218:	469c      	mov	ip, r3
 801021a:	f106 0514 	add.w	r5, r6, #20
 801021e:	4f32      	ldr	r7, [pc, #200]	; (80102e8 <rcl_clock_init+0x104>)
 8010220:	f04f 0e03 	mov.w	lr, #3
 8010224:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010228:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801022a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801022c:	6823      	ldr	r3, [r4, #0]
 801022e:	4660      	mov	r0, ip
 8010230:	602b      	str	r3, [r5, #0]
 8010232:	60f7      	str	r7, [r6, #12]
 8010234:	f886 e000 	strb.w	lr, [r6]
 8010238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801023a:	2e00      	cmp	r6, #0
 801023c:	d0e0      	beq.n	8010200 <rcl_clock_init+0x1c>
 801023e:	2300      	movs	r3, #0
 8010240:	f106 0514 	add.w	r5, r6, #20
 8010244:	7033      	strb	r3, [r6, #0]
 8010246:	469c      	mov	ip, r3
 8010248:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801024c:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8010250:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010252:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010254:	6823      	ldr	r3, [r4, #0]
 8010256:	4660      	mov	r0, ip
 8010258:	602b      	str	r3, [r5, #0]
 801025a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801025c:	2c00      	cmp	r4, #0
 801025e:	d0cf      	beq.n	8010200 <rcl_clock_init+0x1c>
 8010260:	fab6 f586 	clz	r5, r6
 8010264:	096d      	lsrs	r5, r5, #5
 8010266:	2e00      	cmp	r6, #0
 8010268:	d0ca      	beq.n	8010200 <rcl_clock_init+0x1c>
 801026a:	46a6      	mov	lr, r4
 801026c:	7035      	strb	r5, [r6, #0]
 801026e:	f106 0c14 	add.w	ip, r6, #20
 8010272:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010276:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801027a:	e9c6 5503 	strd	r5, r5, [r6, #12]
 801027e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010282:	f8de 3000 	ldr.w	r3, [lr]
 8010286:	2010      	movs	r0, #16
 8010288:	f8cc 3000 	str.w	r3, [ip]
 801028c:	6823      	ldr	r3, [r4, #0]
 801028e:	6921      	ldr	r1, [r4, #16]
 8010290:	4798      	blx	r3
 8010292:	6130      	str	r0, [r6, #16]
 8010294:	b320      	cbz	r0, 80102e0 <rcl_clock_init+0xfc>
 8010296:	2200      	movs	r2, #0
 8010298:	2300      	movs	r3, #0
 801029a:	46ac      	mov	ip, r5
 801029c:	7205      	strb	r5, [r0, #8]
 801029e:	e9c0 2300 	strd	r2, r3, [r0]
 80102a2:	4a12      	ldr	r2, [pc, #72]	; (80102ec <rcl_clock_init+0x108>)
 80102a4:	2301      	movs	r3, #1
 80102a6:	4660      	mov	r0, ip
 80102a8:	60f2      	str	r2, [r6, #12]
 80102aa:	7033      	strb	r3, [r6, #0]
 80102ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102ae:	2c00      	cmp	r4, #0
 80102b0:	d0a6      	beq.n	8010200 <rcl_clock_init+0x1c>
 80102b2:	fab6 f386 	clz	r3, r6
 80102b6:	095b      	lsrs	r3, r3, #5
 80102b8:	2e00      	cmp	r6, #0
 80102ba:	d0a1      	beq.n	8010200 <rcl_clock_init+0x1c>
 80102bc:	6133      	str	r3, [r6, #16]
 80102be:	469c      	mov	ip, r3
 80102c0:	f106 0514 	add.w	r5, r6, #20
 80102c4:	f8df e028 	ldr.w	lr, [pc, #40]	; 80102f0 <rcl_clock_init+0x10c>
 80102c8:	2702      	movs	r7, #2
 80102ca:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80102ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80102d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80102d2:	6823      	ldr	r3, [r4, #0]
 80102d4:	4660      	mov	r0, ip
 80102d6:	602b      	str	r3, [r5, #0]
 80102d8:	f8c6 e00c 	str.w	lr, [r6, #12]
 80102dc:	7037      	strb	r7, [r6, #0]
 80102de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102e0:	f04f 0c0a 	mov.w	ip, #10
 80102e4:	e78e      	b.n	8010204 <rcl_clock_init+0x20>
 80102e6:	bf00      	nop
 80102e8:	080101a5 	.word	0x080101a5
 80102ec:	080101ad 	.word	0x080101ad
 80102f0:	0801019d 	.word	0x0801019d

080102f4 <rcl_clock_get_now>:
 80102f4:	b140      	cbz	r0, 8010308 <rcl_clock_get_now+0x14>
 80102f6:	b139      	cbz	r1, 8010308 <rcl_clock_get_now+0x14>
 80102f8:	7803      	ldrb	r3, [r0, #0]
 80102fa:	b11b      	cbz	r3, 8010304 <rcl_clock_get_now+0x10>
 80102fc:	68c3      	ldr	r3, [r0, #12]
 80102fe:	b10b      	cbz	r3, 8010304 <rcl_clock_get_now+0x10>
 8010300:	6900      	ldr	r0, [r0, #16]
 8010302:	4718      	bx	r3
 8010304:	2001      	movs	r0, #1
 8010306:	4770      	bx	lr
 8010308:	200b      	movs	r0, #11
 801030a:	4770      	bx	lr

0801030c <rcl_timer_call>:
 801030c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010310:	b087      	sub	sp, #28
 8010312:	2800      	cmp	r0, #0
 8010314:	d06c      	beq.n	80103f0 <rcl_timer_call+0xe4>
 8010316:	6803      	ldr	r3, [r0, #0]
 8010318:	4604      	mov	r4, r0
 801031a:	2b00      	cmp	r3, #0
 801031c:	d062      	beq.n	80103e4 <rcl_timer_call+0xd8>
 801031e:	f3bf 8f5b 	dmb	ish
 8010322:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010326:	f3bf 8f5b 	dmb	ish
 801032a:	2b00      	cmp	r3, #0
 801032c:	d14f      	bne.n	80103ce <rcl_timer_call+0xc2>
 801032e:	6803      	ldr	r3, [r0, #0]
 8010330:	a904      	add	r1, sp, #16
 8010332:	6818      	ldr	r0, [r3, #0]
 8010334:	f7ff ffde 	bl	80102f4 <rcl_clock_get_now>
 8010338:	4605      	mov	r5, r0
 801033a:	2800      	cmp	r0, #0
 801033c:	d149      	bne.n	80103d2 <rcl_timer_call+0xc6>
 801033e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010342:	2b00      	cmp	r3, #0
 8010344:	db49      	blt.n	80103da <rcl_timer_call+0xce>
 8010346:	2605      	movs	r6, #5
 8010348:	6820      	ldr	r0, [r4, #0]
 801034a:	9600      	str	r6, [sp, #0]
 801034c:	3020      	adds	r0, #32
 801034e:	f001 fd23 	bl	8011d98 <__atomic_exchange_8>
 8010352:	6823      	ldr	r3, [r4, #0]
 8010354:	4680      	mov	r8, r0
 8010356:	f3bf 8f5b 	dmb	ish
 801035a:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801035e:	f3bf 8f5b 	dmb	ish
 8010362:	6820      	ldr	r0, [r4, #0]
 8010364:	4689      	mov	r9, r1
 8010366:	4631      	mov	r1, r6
 8010368:	3028      	adds	r0, #40	; 0x28
 801036a:	f001 fca9 	bl	8011cc0 <__atomic_load_8>
 801036e:	460f      	mov	r7, r1
 8010370:	4631      	mov	r1, r6
 8010372:	4606      	mov	r6, r0
 8010374:	6820      	ldr	r0, [r4, #0]
 8010376:	3018      	adds	r0, #24
 8010378:	f001 fca2 	bl	8011cc0 <__atomic_load_8>
 801037c:	4602      	mov	r2, r0
 801037e:	9804      	ldr	r0, [sp, #16]
 8010380:	460b      	mov	r3, r1
 8010382:	18b6      	adds	r6, r6, r2
 8010384:	f8dd c014 	ldr.w	ip, [sp, #20]
 8010388:	4692      	mov	sl, r2
 801038a:	eb47 0701 	adc.w	r7, r7, r1
 801038e:	4286      	cmp	r6, r0
 8010390:	eb77 010c 	sbcs.w	r1, r7, ip
 8010394:	da04      	bge.n	80103a0 <rcl_timer_call+0x94>
 8010396:	ea53 0102 	orrs.w	r1, r3, r2
 801039a:	d12e      	bne.n	80103fa <rcl_timer_call+0xee>
 801039c:	4606      	mov	r6, r0
 801039e:	4667      	mov	r7, ip
 80103a0:	6820      	ldr	r0, [r4, #0]
 80103a2:	2105      	movs	r1, #5
 80103a4:	4632      	mov	r2, r6
 80103a6:	463b      	mov	r3, r7
 80103a8:	3028      	adds	r0, #40	; 0x28
 80103aa:	9100      	str	r1, [sp, #0]
 80103ac:	f001 fcbe 	bl	8011d2c <__atomic_store_8>
 80103b0:	f1bb 0f00 	cmp.w	fp, #0
 80103b4:	d00d      	beq.n	80103d2 <rcl_timer_call+0xc6>
 80103b6:	9a04      	ldr	r2, [sp, #16]
 80103b8:	4620      	mov	r0, r4
 80103ba:	9b05      	ldr	r3, [sp, #20]
 80103bc:	ebb2 0208 	subs.w	r2, r2, r8
 80103c0:	eb63 0309 	sbc.w	r3, r3, r9
 80103c4:	47d8      	blx	fp
 80103c6:	4628      	mov	r0, r5
 80103c8:	b007      	add	sp, #28
 80103ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103ce:	f240 3521 	movw	r5, #801	; 0x321
 80103d2:	4628      	mov	r0, r5
 80103d4:	b007      	add	sp, #28
 80103d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103da:	2501      	movs	r5, #1
 80103dc:	4628      	mov	r0, r5
 80103de:	b007      	add	sp, #28
 80103e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103e4:	f44f 7548 	mov.w	r5, #800	; 0x320
 80103e8:	4628      	mov	r0, r5
 80103ea:	b007      	add	sp, #28
 80103ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103f0:	250b      	movs	r5, #11
 80103f2:	4628      	mov	r0, r5
 80103f4:	b007      	add	sp, #28
 80103f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103fa:	1b80      	subs	r0, r0, r6
 80103fc:	eb6c 0107 	sbc.w	r1, ip, r7
 8010400:	3801      	subs	r0, #1
 8010402:	f161 0100 	sbc.w	r1, r1, #0
 8010406:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801040a:	f7ef ff81 	bl	8000310 <__aeabi_ldivmod>
 801040e:	9b02      	ldr	r3, [sp, #8]
 8010410:	3001      	adds	r0, #1
 8010412:	f141 0100 	adc.w	r1, r1, #0
 8010416:	fb00 f303 	mul.w	r3, r0, r3
 801041a:	fb01 330a 	mla	r3, r1, sl, r3
 801041e:	fba0 0a0a 	umull	r0, sl, r0, sl
 8010422:	1986      	adds	r6, r0, r6
 8010424:	4453      	add	r3, sl
 8010426:	eb43 0707 	adc.w	r7, r3, r7
 801042a:	e7b9      	b.n	80103a0 <rcl_timer_call+0x94>

0801042c <rcl_timer_is_ready>:
 801042c:	b570      	push	{r4, r5, r6, lr}
 801042e:	b082      	sub	sp, #8
 8010430:	b380      	cbz	r0, 8010494 <rcl_timer_is_ready+0x68>
 8010432:	6803      	ldr	r3, [r0, #0]
 8010434:	4604      	mov	r4, r0
 8010436:	b38b      	cbz	r3, 801049c <rcl_timer_is_ready+0x70>
 8010438:	460d      	mov	r5, r1
 801043a:	b359      	cbz	r1, 8010494 <rcl_timer_is_ready+0x68>
 801043c:	f3bf 8f5b 	dmb	ish
 8010440:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010444:	f3bf 8f5b 	dmb	ish
 8010448:	b953      	cbnz	r3, 8010460 <rcl_timer_is_ready+0x34>
 801044a:	6803      	ldr	r3, [r0, #0]
 801044c:	4669      	mov	r1, sp
 801044e:	6818      	ldr	r0, [r3, #0]
 8010450:	f7ff ff50 	bl	80102f4 <rcl_clock_get_now>
 8010454:	4606      	mov	r6, r0
 8010456:	b148      	cbz	r0, 801046c <rcl_timer_is_ready+0x40>
 8010458:	f240 3321 	movw	r3, #801	; 0x321
 801045c:	4298      	cmp	r0, r3
 801045e:	d102      	bne.n	8010466 <rcl_timer_is_ready+0x3a>
 8010460:	2300      	movs	r3, #0
 8010462:	461e      	mov	r6, r3
 8010464:	702b      	strb	r3, [r5, #0]
 8010466:	4630      	mov	r0, r6
 8010468:	b002      	add	sp, #8
 801046a:	bd70      	pop	{r4, r5, r6, pc}
 801046c:	6820      	ldr	r0, [r4, #0]
 801046e:	2105      	movs	r1, #5
 8010470:	3028      	adds	r0, #40	; 0x28
 8010472:	f001 fc25 	bl	8011cc0 <__atomic_load_8>
 8010476:	9b00      	ldr	r3, [sp, #0]
 8010478:	1ac0      	subs	r0, r0, r3
 801047a:	9b01      	ldr	r3, [sp, #4]
 801047c:	eb61 0103 	sbc.w	r1, r1, r3
 8010480:	2801      	cmp	r0, #1
 8010482:	4630      	mov	r0, r6
 8010484:	f171 0300 	sbcs.w	r3, r1, #0
 8010488:	bfb4      	ite	lt
 801048a:	2301      	movlt	r3, #1
 801048c:	2300      	movge	r3, #0
 801048e:	702b      	strb	r3, [r5, #0]
 8010490:	b002      	add	sp, #8
 8010492:	bd70      	pop	{r4, r5, r6, pc}
 8010494:	260b      	movs	r6, #11
 8010496:	4630      	mov	r0, r6
 8010498:	b002      	add	sp, #8
 801049a:	bd70      	pop	{r4, r5, r6, pc}
 801049c:	f44f 7648 	mov.w	r6, #800	; 0x320
 80104a0:	e7e1      	b.n	8010466 <rcl_timer_is_ready+0x3a>
 80104a2:	bf00      	nop

080104a4 <rcl_timer_get_time_until_next_call>:
 80104a4:	b570      	push	{r4, r5, r6, lr}
 80104a6:	b082      	sub	sp, #8
 80104a8:	b330      	cbz	r0, 80104f8 <rcl_timer_get_time_until_next_call+0x54>
 80104aa:	6803      	ldr	r3, [r0, #0]
 80104ac:	4604      	mov	r4, r0
 80104ae:	b33b      	cbz	r3, 8010500 <rcl_timer_get_time_until_next_call+0x5c>
 80104b0:	460d      	mov	r5, r1
 80104b2:	b309      	cbz	r1, 80104f8 <rcl_timer_get_time_until_next_call+0x54>
 80104b4:	f3bf 8f5b 	dmb	ish
 80104b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80104bc:	f3bf 8f5b 	dmb	ish
 80104c0:	b9ab      	cbnz	r3, 80104ee <rcl_timer_get_time_until_next_call+0x4a>
 80104c2:	6803      	ldr	r3, [r0, #0]
 80104c4:	4669      	mov	r1, sp
 80104c6:	6818      	ldr	r0, [r3, #0]
 80104c8:	f7ff ff14 	bl	80102f4 <rcl_clock_get_now>
 80104cc:	4606      	mov	r6, r0
 80104ce:	b958      	cbnz	r0, 80104e8 <rcl_timer_get_time_until_next_call+0x44>
 80104d0:	6820      	ldr	r0, [r4, #0]
 80104d2:	2105      	movs	r1, #5
 80104d4:	3028      	adds	r0, #40	; 0x28
 80104d6:	f001 fbf3 	bl	8011cc0 <__atomic_load_8>
 80104da:	9b00      	ldr	r3, [sp, #0]
 80104dc:	1ac0      	subs	r0, r0, r3
 80104de:	9b01      	ldr	r3, [sp, #4]
 80104e0:	eb61 0103 	sbc.w	r1, r1, r3
 80104e4:	6028      	str	r0, [r5, #0]
 80104e6:	6069      	str	r1, [r5, #4]
 80104e8:	4630      	mov	r0, r6
 80104ea:	b002      	add	sp, #8
 80104ec:	bd70      	pop	{r4, r5, r6, pc}
 80104ee:	f240 3621 	movw	r6, #801	; 0x321
 80104f2:	4630      	mov	r0, r6
 80104f4:	b002      	add	sp, #8
 80104f6:	bd70      	pop	{r4, r5, r6, pc}
 80104f8:	260b      	movs	r6, #11
 80104fa:	4630      	mov	r0, r6
 80104fc:	b002      	add	sp, #8
 80104fe:	bd70      	pop	{r4, r5, r6, pc}
 8010500:	f44f 7648 	mov.w	r6, #800	; 0x320
 8010504:	e7f0      	b.n	80104e8 <rcl_timer_get_time_until_next_call+0x44>
 8010506:	bf00      	nop

08010508 <rcl_timer_get_guard_condition>:
 8010508:	b130      	cbz	r0, 8010518 <rcl_timer_get_guard_condition+0x10>
 801050a:	6800      	ldr	r0, [r0, #0]
 801050c:	b120      	cbz	r0, 8010518 <rcl_timer_get_guard_condition+0x10>
 801050e:	68c3      	ldr	r3, [r0, #12]
 8010510:	b10b      	cbz	r3, 8010516 <rcl_timer_get_guard_condition+0xe>
 8010512:	3008      	adds	r0, #8
 8010514:	4770      	bx	lr
 8010516:	4618      	mov	r0, r3
 8010518:	4770      	bx	lr
 801051a:	bf00      	nop

0801051c <rcl_validate_enclave_name_with_size>:
 801051c:	2800      	cmp	r0, #0
 801051e:	d049      	beq.n	80105b4 <rcl_validate_enclave_name_with_size+0x98>
 8010520:	b570      	push	{r4, r5, r6, lr}
 8010522:	4615      	mov	r5, r2
 8010524:	b0c2      	sub	sp, #264	; 0x108
 8010526:	b19a      	cbz	r2, 8010550 <rcl_validate_enclave_name_with_size+0x34>
 8010528:	461e      	mov	r6, r3
 801052a:	466a      	mov	r2, sp
 801052c:	ab01      	add	r3, sp, #4
 801052e:	460c      	mov	r4, r1
 8010530:	f001 ffca 	bl	80124c8 <rmw_validate_namespace_with_size>
 8010534:	4684      	mov	ip, r0
 8010536:	b9b8      	cbnz	r0, 8010568 <rcl_validate_enclave_name_with_size+0x4c>
 8010538:	9900      	ldr	r1, [sp, #0]
 801053a:	b171      	cbz	r1, 801055a <rcl_validate_enclave_name_with_size+0x3e>
 801053c:	2907      	cmp	r1, #7
 801053e:	d019      	beq.n	8010574 <rcl_validate_enclave_name_with_size+0x58>
 8010540:	1e4b      	subs	r3, r1, #1
 8010542:	2b05      	cmp	r3, #5
 8010544:	d83a      	bhi.n	80105bc <rcl_validate_enclave_name_with_size+0xa0>
 8010546:	e8df f003 	tbb	[pc, r3]
 801054a:	2926      	.short	0x2926
 801054c:	1d322f2c 	.word	0x1d322f2c
 8010550:	f04f 0c0b 	mov.w	ip, #11
 8010554:	4660      	mov	r0, ip
 8010556:	b042      	add	sp, #264	; 0x108
 8010558:	bd70      	pop	{r4, r5, r6, pc}
 801055a:	2907      	cmp	r1, #7
 801055c:	d00a      	beq.n	8010574 <rcl_validate_enclave_name_with_size+0x58>
 801055e:	2300      	movs	r3, #0
 8010560:	4660      	mov	r0, ip
 8010562:	602b      	str	r3, [r5, #0]
 8010564:	b042      	add	sp, #264	; 0x108
 8010566:	bd70      	pop	{r4, r5, r6, pc}
 8010568:	f7fe fd6c 	bl	800f044 <rcl_convert_rmw_ret_to_rcl_ret>
 801056c:	4684      	mov	ip, r0
 801056e:	4660      	mov	r0, ip
 8010570:	b042      	add	sp, #264	; 0x108
 8010572:	bd70      	pop	{r4, r5, r6, pc}
 8010574:	2cff      	cmp	r4, #255	; 0xff
 8010576:	d9f2      	bls.n	801055e <rcl_validate_enclave_name_with_size+0x42>
 8010578:	6029      	str	r1, [r5, #0]
 801057a:	2e00      	cmp	r6, #0
 801057c:	d0ea      	beq.n	8010554 <rcl_validate_enclave_name_with_size+0x38>
 801057e:	23fe      	movs	r3, #254	; 0xfe
 8010580:	6033      	str	r3, [r6, #0]
 8010582:	e7e7      	b.n	8010554 <rcl_validate_enclave_name_with_size+0x38>
 8010584:	2306      	movs	r3, #6
 8010586:	602b      	str	r3, [r5, #0]
 8010588:	2e00      	cmp	r6, #0
 801058a:	d0e3      	beq.n	8010554 <rcl_validate_enclave_name_with_size+0x38>
 801058c:	9b01      	ldr	r3, [sp, #4]
 801058e:	4660      	mov	r0, ip
 8010590:	6033      	str	r3, [r6, #0]
 8010592:	b042      	add	sp, #264	; 0x108
 8010594:	bd70      	pop	{r4, r5, r6, pc}
 8010596:	2301      	movs	r3, #1
 8010598:	602b      	str	r3, [r5, #0]
 801059a:	e7f5      	b.n	8010588 <rcl_validate_enclave_name_with_size+0x6c>
 801059c:	2302      	movs	r3, #2
 801059e:	602b      	str	r3, [r5, #0]
 80105a0:	e7f2      	b.n	8010588 <rcl_validate_enclave_name_with_size+0x6c>
 80105a2:	2303      	movs	r3, #3
 80105a4:	602b      	str	r3, [r5, #0]
 80105a6:	e7ef      	b.n	8010588 <rcl_validate_enclave_name_with_size+0x6c>
 80105a8:	2304      	movs	r3, #4
 80105aa:	602b      	str	r3, [r5, #0]
 80105ac:	e7ec      	b.n	8010588 <rcl_validate_enclave_name_with_size+0x6c>
 80105ae:	2305      	movs	r3, #5
 80105b0:	602b      	str	r3, [r5, #0]
 80105b2:	e7e9      	b.n	8010588 <rcl_validate_enclave_name_with_size+0x6c>
 80105b4:	f04f 0c0b 	mov.w	ip, #11
 80105b8:	4660      	mov	r0, ip
 80105ba:	4770      	bx	lr
 80105bc:	460b      	mov	r3, r1
 80105be:	4a04      	ldr	r2, [pc, #16]	; (80105d0 <rcl_validate_enclave_name_with_size+0xb4>)
 80105c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80105c4:	a802      	add	r0, sp, #8
 80105c6:	f001 fd33 	bl	8012030 <rcutils_snprintf>
 80105ca:	f04f 0c01 	mov.w	ip, #1
 80105ce:	e7c1      	b.n	8010554 <rcl_validate_enclave_name_with_size+0x38>
 80105d0:	0801b600 	.word	0x0801b600

080105d4 <rcl_validate_enclave_name>:
 80105d4:	b168      	cbz	r0, 80105f2 <rcl_validate_enclave_name+0x1e>
 80105d6:	b570      	push	{r4, r5, r6, lr}
 80105d8:	460d      	mov	r5, r1
 80105da:	4616      	mov	r6, r2
 80105dc:	4604      	mov	r4, r0
 80105de:	f7ef fe8f 	bl	8000300 <strlen>
 80105e2:	4633      	mov	r3, r6
 80105e4:	4601      	mov	r1, r0
 80105e6:	462a      	mov	r2, r5
 80105e8:	4620      	mov	r0, r4
 80105ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80105ee:	f7ff bf95 	b.w	801051c <rcl_validate_enclave_name_with_size>
 80105f2:	200b      	movs	r0, #11
 80105f4:	4770      	bx	lr
 80105f6:	bf00      	nop

080105f8 <rcl_get_zero_initialized_wait_set>:
 80105f8:	b510      	push	{r4, lr}
 80105fa:	4c08      	ldr	r4, [pc, #32]	; (801061c <rcl_get_zero_initialized_wait_set+0x24>)
 80105fc:	4686      	mov	lr, r0
 80105fe:	4684      	mov	ip, r0
 8010600:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010602:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010606:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010608:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801060c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801060e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010612:	6823      	ldr	r3, [r4, #0]
 8010614:	4670      	mov	r0, lr
 8010616:	f8cc 3000 	str.w	r3, [ip]
 801061a:	bd10      	pop	{r4, pc}
 801061c:	0801b660 	.word	0x0801b660

08010620 <rcl_wait_set_is_valid>:
 8010620:	b118      	cbz	r0, 801062a <rcl_wait_set_is_valid+0xa>
 8010622:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8010624:	3800      	subs	r0, #0
 8010626:	bf18      	it	ne
 8010628:	2001      	movne	r0, #1
 801062a:	4770      	bx	lr

0801062c <rcl_wait_set_fini>:
 801062c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010630:	b082      	sub	sp, #8
 8010632:	2800      	cmp	r0, #0
 8010634:	f000 8095 	beq.w	8010762 <rcl_wait_set_fini+0x136>
 8010638:	6b06      	ldr	r6, [r0, #48]	; 0x30
 801063a:	4604      	mov	r4, r0
 801063c:	2e00      	cmp	r6, #0
 801063e:	f000 808c 	beq.w	801075a <rcl_wait_set_fini+0x12e>
 8010642:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8010644:	f003 f8ee 	bl	8013824 <rmw_destroy_wait_set>
 8010648:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801064a:	1e06      	subs	r6, r0, #0
 801064c:	bf18      	it	ne
 801064e:	f44f 7661 	movne.w	r6, #900	; 0x384
 8010652:	2d00      	cmp	r5, #0
 8010654:	f000 8081 	beq.w	801075a <rcl_wait_set_fini+0x12e>
 8010658:	2700      	movs	r7, #0
 801065a:	6820      	ldr	r0, [r4, #0]
 801065c:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8010660:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8010662:	6067      	str	r7, [r4, #4]
 8010664:	602f      	str	r7, [r5, #0]
 8010666:	b120      	cbz	r0, 8010672 <rcl_wait_set_fini+0x46>
 8010668:	9101      	str	r1, [sp, #4]
 801066a:	47c0      	blx	r8
 801066c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801066e:	9901      	ldr	r1, [sp, #4]
 8010670:	6027      	str	r7, [r4, #0]
 8010672:	68a8      	ldr	r0, [r5, #8]
 8010674:	b120      	cbz	r0, 8010680 <rcl_wait_set_fini+0x54>
 8010676:	47c0      	blx	r8
 8010678:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801067a:	2300      	movs	r3, #0
 801067c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8010680:	f04f 0800 	mov.w	r8, #0
 8010684:	68a0      	ldr	r0, [r4, #8]
 8010686:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8010688:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801068a:	f8c4 800c 	str.w	r8, [r4, #12]
 801068e:	f8c5 800c 	str.w	r8, [r5, #12]
 8010692:	b128      	cbz	r0, 80106a0 <rcl_wait_set_fini+0x74>
 8010694:	47b8      	blx	r7
 8010696:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010698:	f8c4 8008 	str.w	r8, [r4, #8]
 801069c:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801069e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80106a0:	f04f 0800 	mov.w	r8, #0
 80106a4:	6968      	ldr	r0, [r5, #20]
 80106a6:	f8c5 8010 	str.w	r8, [r5, #16]
 80106aa:	b128      	cbz	r0, 80106b8 <rcl_wait_set_fini+0x8c>
 80106ac:	47b8      	blx	r7
 80106ae:	f8c5 8014 	str.w	r8, [r5, #20]
 80106b2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80106b4:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 80106b6:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80106b8:	f04f 0800 	mov.w	r8, #0
 80106bc:	6920      	ldr	r0, [r4, #16]
 80106be:	f8c4 8014 	str.w	r8, [r4, #20]
 80106c2:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 80106c6:	b128      	cbz	r0, 80106d4 <rcl_wait_set_fini+0xa8>
 80106c8:	47b8      	blx	r7
 80106ca:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80106cc:	f8c4 8010 	str.w	r8, [r4, #16]
 80106d0:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 80106d2:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80106d4:	f04f 0800 	mov.w	r8, #0
 80106d8:	69a0      	ldr	r0, [r4, #24]
 80106da:	f8c4 801c 	str.w	r8, [r4, #28]
 80106de:	f8c5 8018 	str.w	r8, [r5, #24]
 80106e2:	b128      	cbz	r0, 80106f0 <rcl_wait_set_fini+0xc4>
 80106e4:	9101      	str	r1, [sp, #4]
 80106e6:	47b8      	blx	r7
 80106e8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80106ea:	9901      	ldr	r1, [sp, #4]
 80106ec:	f8c4 8018 	str.w	r8, [r4, #24]
 80106f0:	6a28      	ldr	r0, [r5, #32]
 80106f2:	b120      	cbz	r0, 80106fe <rcl_wait_set_fini+0xd2>
 80106f4:	47b8      	blx	r7
 80106f6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80106f8:	2300      	movs	r3, #0
 80106fa:	e9c5 3307 	strd	r3, r3, [r5, #28]
 80106fe:	2700      	movs	r7, #0
 8010700:	6a20      	ldr	r0, [r4, #32]
 8010702:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8010706:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8010708:	6267      	str	r7, [r4, #36]	; 0x24
 801070a:	626f      	str	r7, [r5, #36]	; 0x24
 801070c:	b120      	cbz	r0, 8010718 <rcl_wait_set_fini+0xec>
 801070e:	9101      	str	r1, [sp, #4]
 8010710:	47c0      	blx	r8
 8010712:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010714:	9901      	ldr	r1, [sp, #4]
 8010716:	6227      	str	r7, [r4, #32]
 8010718:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 801071a:	b120      	cbz	r0, 8010726 <rcl_wait_set_fini+0xfa>
 801071c:	47c0      	blx	r8
 801071e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010720:	2300      	movs	r3, #0
 8010722:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8010726:	2700      	movs	r7, #0
 8010728:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801072a:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801072e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8010730:	62e7      	str	r7, [r4, #44]	; 0x2c
 8010732:	632f      	str	r7, [r5, #48]	; 0x30
 8010734:	b120      	cbz	r0, 8010740 <rcl_wait_set_fini+0x114>
 8010736:	9101      	str	r1, [sp, #4]
 8010738:	47c0      	blx	r8
 801073a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801073c:	9901      	ldr	r1, [sp, #4]
 801073e:	62a7      	str	r7, [r4, #40]	; 0x28
 8010740:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8010742:	b120      	cbz	r0, 801074e <rcl_wait_set_fini+0x122>
 8010744:	47c0      	blx	r8
 8010746:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010748:	2300      	movs	r3, #0
 801074a:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 801074e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8010750:	4628      	mov	r0, r5
 8010752:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8010754:	4798      	blx	r3
 8010756:	2300      	movs	r3, #0
 8010758:	6323      	str	r3, [r4, #48]	; 0x30
 801075a:	4630      	mov	r0, r6
 801075c:	b002      	add	sp, #8
 801075e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010762:	260b      	movs	r6, #11
 8010764:	4630      	mov	r0, r6
 8010766:	b002      	add	sp, #8
 8010768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801076c <rcl_wait_set_add_subscription>:
 801076c:	b318      	cbz	r0, 80107b6 <rcl_wait_set_add_subscription+0x4a>
 801076e:	b538      	push	{r3, r4, r5, lr}
 8010770:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010772:	4604      	mov	r4, r0
 8010774:	b30b      	cbz	r3, 80107ba <rcl_wait_set_add_subscription+0x4e>
 8010776:	b319      	cbz	r1, 80107c0 <rcl_wait_set_add_subscription+0x54>
 8010778:	681d      	ldr	r5, [r3, #0]
 801077a:	6840      	ldr	r0, [r0, #4]
 801077c:	4285      	cmp	r5, r0
 801077e:	d217      	bcs.n	80107b0 <rcl_wait_set_add_subscription+0x44>
 8010780:	1c68      	adds	r0, r5, #1
 8010782:	6018      	str	r0, [r3, #0]
 8010784:	6823      	ldr	r3, [r4, #0]
 8010786:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801078a:	b102      	cbz	r2, 801078e <rcl_wait_set_add_subscription+0x22>
 801078c:	6015      	str	r5, [r2, #0]
 801078e:	4608      	mov	r0, r1
 8010790:	f7ff fcf4 	bl	801017c <rcl_subscription_get_rmw_handle>
 8010794:	b150      	cbz	r0, 80107ac <rcl_wait_set_add_subscription+0x40>
 8010796:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010798:	6842      	ldr	r2, [r0, #4]
 801079a:	2000      	movs	r0, #0
 801079c:	689b      	ldr	r3, [r3, #8]
 801079e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80107a2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80107a4:	6853      	ldr	r3, [r2, #4]
 80107a6:	3301      	adds	r3, #1
 80107a8:	6053      	str	r3, [r2, #4]
 80107aa:	bd38      	pop	{r3, r4, r5, pc}
 80107ac:	2001      	movs	r0, #1
 80107ae:	bd38      	pop	{r3, r4, r5, pc}
 80107b0:	f240 3086 	movw	r0, #902	; 0x386
 80107b4:	bd38      	pop	{r3, r4, r5, pc}
 80107b6:	200b      	movs	r0, #11
 80107b8:	4770      	bx	lr
 80107ba:	f44f 7061 	mov.w	r0, #900	; 0x384
 80107be:	bd38      	pop	{r3, r4, r5, pc}
 80107c0:	200b      	movs	r0, #11
 80107c2:	bd38      	pop	{r3, r4, r5, pc}

080107c4 <rcl_wait_set_clear>:
 80107c4:	2800      	cmp	r0, #0
 80107c6:	d074      	beq.n	80108b2 <rcl_wait_set_clear+0xee>
 80107c8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80107ca:	b510      	push	{r4, lr}
 80107cc:	4604      	mov	r4, r0
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d071      	beq.n	80108b6 <rcl_wait_set_clear+0xf2>
 80107d2:	6800      	ldr	r0, [r0, #0]
 80107d4:	b138      	cbz	r0, 80107e6 <rcl_wait_set_clear+0x22>
 80107d6:	6862      	ldr	r2, [r4, #4]
 80107d8:	2100      	movs	r1, #0
 80107da:	0092      	lsls	r2, r2, #2
 80107dc:	f008 ff2a 	bl	8019634 <memset>
 80107e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80107e2:	2200      	movs	r2, #0
 80107e4:	601a      	str	r2, [r3, #0]
 80107e6:	68a0      	ldr	r0, [r4, #8]
 80107e8:	b138      	cbz	r0, 80107fa <rcl_wait_set_clear+0x36>
 80107ea:	68e2      	ldr	r2, [r4, #12]
 80107ec:	2100      	movs	r1, #0
 80107ee:	0092      	lsls	r2, r2, #2
 80107f0:	f008 ff20 	bl	8019634 <memset>
 80107f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80107f6:	2200      	movs	r2, #0
 80107f8:	60da      	str	r2, [r3, #12]
 80107fa:	69a0      	ldr	r0, [r4, #24]
 80107fc:	b138      	cbz	r0, 801080e <rcl_wait_set_clear+0x4a>
 80107fe:	69e2      	ldr	r2, [r4, #28]
 8010800:	2100      	movs	r1, #0
 8010802:	0092      	lsls	r2, r2, #2
 8010804:	f008 ff16 	bl	8019634 <memset>
 8010808:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801080a:	2200      	movs	r2, #0
 801080c:	619a      	str	r2, [r3, #24]
 801080e:	6a20      	ldr	r0, [r4, #32]
 8010810:	b138      	cbz	r0, 8010822 <rcl_wait_set_clear+0x5e>
 8010812:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8010814:	2100      	movs	r1, #0
 8010816:	0092      	lsls	r2, r2, #2
 8010818:	f008 ff0c 	bl	8019634 <memset>
 801081c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801081e:	2200      	movs	r2, #0
 8010820:	625a      	str	r2, [r3, #36]	; 0x24
 8010822:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8010824:	b138      	cbz	r0, 8010836 <rcl_wait_set_clear+0x72>
 8010826:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010828:	2100      	movs	r1, #0
 801082a:	0092      	lsls	r2, r2, #2
 801082c:	f008 ff02 	bl	8019634 <memset>
 8010830:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010832:	2200      	movs	r2, #0
 8010834:	631a      	str	r2, [r3, #48]	; 0x30
 8010836:	6920      	ldr	r0, [r4, #16]
 8010838:	b138      	cbz	r0, 801084a <rcl_wait_set_clear+0x86>
 801083a:	6962      	ldr	r2, [r4, #20]
 801083c:	2100      	movs	r1, #0
 801083e:	0092      	lsls	r2, r2, #2
 8010840:	f008 fef8 	bl	8019634 <memset>
 8010844:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010846:	2200      	movs	r2, #0
 8010848:	641a      	str	r2, [r3, #64]	; 0x40
 801084a:	6898      	ldr	r0, [r3, #8]
 801084c:	b138      	cbz	r0, 801085e <rcl_wait_set_clear+0x9a>
 801084e:	685a      	ldr	r2, [r3, #4]
 8010850:	2100      	movs	r1, #0
 8010852:	0092      	lsls	r2, r2, #2
 8010854:	f008 feee 	bl	8019634 <memset>
 8010858:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801085a:	2200      	movs	r2, #0
 801085c:	605a      	str	r2, [r3, #4]
 801085e:	6958      	ldr	r0, [r3, #20]
 8010860:	b138      	cbz	r0, 8010872 <rcl_wait_set_clear+0xae>
 8010862:	691a      	ldr	r2, [r3, #16]
 8010864:	2100      	movs	r1, #0
 8010866:	0092      	lsls	r2, r2, #2
 8010868:	f008 fee4 	bl	8019634 <memset>
 801086c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801086e:	2200      	movs	r2, #0
 8010870:	611a      	str	r2, [r3, #16]
 8010872:	6a18      	ldr	r0, [r3, #32]
 8010874:	b138      	cbz	r0, 8010886 <rcl_wait_set_clear+0xc2>
 8010876:	69da      	ldr	r2, [r3, #28]
 8010878:	2100      	movs	r1, #0
 801087a:	0092      	lsls	r2, r2, #2
 801087c:	f008 feda 	bl	8019634 <memset>
 8010880:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010882:	2200      	movs	r2, #0
 8010884:	61da      	str	r2, [r3, #28]
 8010886:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8010888:	b138      	cbz	r0, 801089a <rcl_wait_set_clear+0xd6>
 801088a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801088c:	2100      	movs	r1, #0
 801088e:	0092      	lsls	r2, r2, #2
 8010890:	f008 fed0 	bl	8019634 <memset>
 8010894:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010896:	2200      	movs	r2, #0
 8010898:	629a      	str	r2, [r3, #40]	; 0x28
 801089a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801089c:	b140      	cbz	r0, 80108b0 <rcl_wait_set_clear+0xec>
 801089e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80108a0:	2100      	movs	r1, #0
 80108a2:	0092      	lsls	r2, r2, #2
 80108a4:	f008 fec6 	bl	8019634 <memset>
 80108a8:	2300      	movs	r3, #0
 80108aa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80108ac:	4618      	mov	r0, r3
 80108ae:	6353      	str	r3, [r2, #52]	; 0x34
 80108b0:	bd10      	pop	{r4, pc}
 80108b2:	200b      	movs	r0, #11
 80108b4:	4770      	bx	lr
 80108b6:	f44f 7061 	mov.w	r0, #900	; 0x384
 80108ba:	bd10      	pop	{r4, pc}

080108bc <rcl_wait_set_resize>:
 80108bc:	2800      	cmp	r0, #0
 80108be:	f000 8180 	beq.w	8010bc2 <rcl_wait_set_resize+0x306>
 80108c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108c6:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80108c8:	b083      	sub	sp, #12
 80108ca:	4605      	mov	r5, r0
 80108cc:	2c00      	cmp	r4, #0
 80108ce:	f000 817a 	beq.w	8010bc6 <rcl_wait_set_resize+0x30a>
 80108d2:	f04f 0900 	mov.w	r9, #0
 80108d6:	461f      	mov	r7, r3
 80108d8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80108dc:	4688      	mov	r8, r1
 80108de:	4616      	mov	r6, r2
 80108e0:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	; 0x4c
 80108e4:	f8c0 9004 	str.w	r9, [r0, #4]
 80108e8:	f8c4 9000 	str.w	r9, [r4]
 80108ec:	2900      	cmp	r1, #0
 80108ee:	f000 80bf 	beq.w	8010a70 <rcl_wait_set_resize+0x1b4>
 80108f2:	008c      	lsls	r4, r1, #2
 80108f4:	4652      	mov	r2, sl
 80108f6:	6800      	ldr	r0, [r0, #0]
 80108f8:	4621      	mov	r1, r4
 80108fa:	9301      	str	r3, [sp, #4]
 80108fc:	4798      	blx	r3
 80108fe:	9b01      	ldr	r3, [sp, #4]
 8010900:	6028      	str	r0, [r5, #0]
 8010902:	2800      	cmp	r0, #0
 8010904:	f000 80f6 	beq.w	8010af4 <rcl_wait_set_resize+0x238>
 8010908:	4622      	mov	r2, r4
 801090a:	4649      	mov	r1, r9
 801090c:	9301      	str	r3, [sp, #4]
 801090e:	f008 fe91 	bl	8019634 <memset>
 8010912:	f8c5 8004 	str.w	r8, [r5, #4]
 8010916:	4652      	mov	r2, sl
 8010918:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 801091c:	4621      	mov	r1, r4
 801091e:	9b01      	ldr	r3, [sp, #4]
 8010920:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8010924:	f8c8 9004 	str.w	r9, [r8, #4]
 8010928:	4798      	blx	r3
 801092a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801092c:	f8c8 0008 	str.w	r0, [r8, #8]
 8010930:	689b      	ldr	r3, [r3, #8]
 8010932:	2b00      	cmp	r3, #0
 8010934:	f000 814a 	beq.w	8010bcc <rcl_wait_set_resize+0x310>
 8010938:	4622      	mov	r2, r4
 801093a:	4649      	mov	r1, r9
 801093c:	4618      	mov	r0, r3
 801093e:	f008 fe79 	bl	8019634 <memset>
 8010942:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010944:	f04f 0800 	mov.w	r8, #0
 8010948:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801094c:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
 8010950:	f8c5 800c 	str.w	r8, [r5, #12]
 8010954:	f8c4 800c 	str.w	r8, [r4, #12]
 8010958:	2e00      	cmp	r6, #0
 801095a:	f040 809b 	bne.w	8010a94 <rcl_wait_set_resize+0x1d8>
 801095e:	68a8      	ldr	r0, [r5, #8]
 8010960:	b128      	cbz	r0, 801096e <rcl_wait_set_resize+0xb2>
 8010962:	4649      	mov	r1, r9
 8010964:	4790      	blx	r2
 8010966:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010968:	60ae      	str	r6, [r5, #8]
 801096a:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801096e:	f04f 0800 	mov.w	r8, #0
 8010972:	19f6      	adds	r6, r6, r7
 8010974:	f8c4 8010 	str.w	r8, [r4, #16]
 8010978:	f040 80a2 	bne.w	8010ac0 <rcl_wait_set_resize+0x204>
 801097c:	6960      	ldr	r0, [r4, #20]
 801097e:	b130      	cbz	r0, 801098e <rcl_wait_set_resize+0xd2>
 8010980:	4649      	mov	r1, r9
 8010982:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8010984:	4798      	blx	r3
 8010986:	6166      	str	r6, [r4, #20]
 8010988:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801098a:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801098e:	2600      	movs	r6, #0
 8010990:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8010994:	616e      	str	r6, [r5, #20]
 8010996:	6426      	str	r6, [r4, #64]	; 0x40
 8010998:	2f00      	cmp	r7, #0
 801099a:	f040 80af 	bne.w	8010afc <rcl_wait_set_resize+0x240>
 801099e:	6928      	ldr	r0, [r5, #16]
 80109a0:	b138      	cbz	r0, 80109b2 <rcl_wait_set_resize+0xf6>
 80109a2:	4649      	mov	r1, r9
 80109a4:	47d0      	blx	sl
 80109a6:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80109a8:	612f      	str	r7, [r5, #16]
 80109aa:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80109ae:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 80109b2:	2600      	movs	r6, #0
 80109b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80109b6:	61ee      	str	r6, [r5, #28]
 80109b8:	61a6      	str	r6, [r4, #24]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	f040 8093 	bne.w	8010ae6 <rcl_wait_set_resize+0x22a>
 80109c0:	69a8      	ldr	r0, [r5, #24]
 80109c2:	b120      	cbz	r0, 80109ce <rcl_wait_set_resize+0x112>
 80109c4:	4649      	mov	r1, r9
 80109c6:	47d0      	blx	sl
 80109c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80109ca:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80109cc:	61ab      	str	r3, [r5, #24]
 80109ce:	6a20      	ldr	r0, [r4, #32]
 80109d0:	b128      	cbz	r0, 80109de <rcl_wait_set_resize+0x122>
 80109d2:	4649      	mov	r1, r9
 80109d4:	47d0      	blx	sl
 80109d6:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80109d8:	2300      	movs	r3, #0
 80109da:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80109de:	2600      	movs	r6, #0
 80109e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80109e2:	6da7      	ldr	r7, [r4, #88]	; 0x58
 80109e4:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 80109e8:	626e      	str	r6, [r5, #36]	; 0x24
 80109ea:	6266      	str	r6, [r4, #36]	; 0x24
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	f000 8098 	beq.w	8010b22 <rcl_wait_set_resize+0x266>
 80109f2:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80109f6:	463a      	mov	r2, r7
 80109f8:	6a28      	ldr	r0, [r5, #32]
 80109fa:	4651      	mov	r1, sl
 80109fc:	47c8      	blx	r9
 80109fe:	6228      	str	r0, [r5, #32]
 8010a00:	2800      	cmp	r0, #0
 8010a02:	d077      	beq.n	8010af4 <rcl_wait_set_resize+0x238>
 8010a04:	4652      	mov	r2, sl
 8010a06:	4631      	mov	r1, r6
 8010a08:	f008 fe14 	bl	8019634 <memset>
 8010a0c:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010a0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010a10:	463a      	mov	r2, r7
 8010a12:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8010a14:	4651      	mov	r1, sl
 8010a16:	626b      	str	r3, [r5, #36]	; 0x24
 8010a18:	62a6      	str	r6, [r4, #40]	; 0x28
 8010a1a:	47c8      	blx	r9
 8010a1c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010a1e:	62e0      	str	r0, [r4, #44]	; 0x2c
 8010a20:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8010a22:	2c00      	cmp	r4, #0
 8010a24:	f000 80f2 	beq.w	8010c0c <rcl_wait_set_resize+0x350>
 8010a28:	4620      	mov	r0, r4
 8010a2a:	4652      	mov	r2, sl
 8010a2c:	4631      	mov	r1, r6
 8010a2e:	f008 fe01 	bl	8019634 <memset>
 8010a32:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010a34:	2600      	movs	r6, #0
 8010a36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010a38:	6da7      	ldr	r7, [r4, #88]	; 0x58
 8010a3a:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 8010a3e:	62ee      	str	r6, [r5, #44]	; 0x2c
 8010a40:	6326      	str	r6, [r4, #48]	; 0x30
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	f040 8097 	bne.w	8010b76 <rcl_wait_set_resize+0x2ba>
 8010a48:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8010a4a:	b120      	cbz	r0, 8010a56 <rcl_wait_set_resize+0x19a>
 8010a4c:	4639      	mov	r1, r7
 8010a4e:	47c0      	blx	r8
 8010a50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010a52:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010a54:	62ab      	str	r3, [r5, #40]	; 0x28
 8010a56:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8010a58:	2800      	cmp	r0, #0
 8010a5a:	d04c      	beq.n	8010af6 <rcl_wait_set_resize+0x23a>
 8010a5c:	4639      	mov	r1, r7
 8010a5e:	47c0      	blx	r8
 8010a60:	2300      	movs	r3, #0
 8010a62:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8010a64:	4618      	mov	r0, r3
 8010a66:	e9c2 330d 	strd	r3, r3, [r2, #52]	; 0x34
 8010a6a:	b003      	add	sp, #12
 8010a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a70:	6800      	ldr	r0, [r0, #0]
 8010a72:	b120      	cbz	r0, 8010a7e <rcl_wait_set_resize+0x1c2>
 8010a74:	4651      	mov	r1, sl
 8010a76:	47d8      	blx	fp
 8010a78:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010a7a:	f8c5 8000 	str.w	r8, [r5]
 8010a7e:	68a0      	ldr	r0, [r4, #8]
 8010a80:	2800      	cmp	r0, #0
 8010a82:	f43f af5f 	beq.w	8010944 <rcl_wait_set_resize+0x88>
 8010a86:	4651      	mov	r1, sl
 8010a88:	47d8      	blx	fp
 8010a8a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8010a92:	e757      	b.n	8010944 <rcl_wait_set_resize+0x88>
 8010a94:	00b4      	lsls	r4, r6, #2
 8010a96:	464a      	mov	r2, r9
 8010a98:	68a8      	ldr	r0, [r5, #8]
 8010a9a:	4621      	mov	r1, r4
 8010a9c:	4798      	blx	r3
 8010a9e:	60a8      	str	r0, [r5, #8]
 8010aa0:	b340      	cbz	r0, 8010af4 <rcl_wait_set_resize+0x238>
 8010aa2:	4622      	mov	r2, r4
 8010aa4:	4641      	mov	r1, r8
 8010aa6:	f008 fdc5 	bl	8019634 <memset>
 8010aaa:	f04f 0800 	mov.w	r8, #0
 8010aae:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010ab0:	60ee      	str	r6, [r5, #12]
 8010ab2:	19f6      	adds	r6, r6, r7
 8010ab4:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8010ab8:	f8c4 8010 	str.w	r8, [r4, #16]
 8010abc:	f43f af5e 	beq.w	801097c <rcl_wait_set_resize+0xc0>
 8010ac0:	00b6      	lsls	r6, r6, #2
 8010ac2:	464a      	mov	r2, r9
 8010ac4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8010ac6:	6960      	ldr	r0, [r4, #20]
 8010ac8:	4631      	mov	r1, r6
 8010aca:	4798      	blx	r3
 8010acc:	4681      	mov	r9, r0
 8010ace:	6160      	str	r0, [r4, #20]
 8010ad0:	2800      	cmp	r0, #0
 8010ad2:	f000 8084 	beq.w	8010bde <rcl_wait_set_resize+0x322>
 8010ad6:	4632      	mov	r2, r6
 8010ad8:	4641      	mov	r1, r8
 8010ada:	f008 fdab 	bl	8019634 <memset>
 8010ade:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010ae0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8010ae4:	e753      	b.n	801098e <rcl_wait_set_resize+0xd2>
 8010ae6:	009c      	lsls	r4, r3, #2
 8010ae8:	464a      	mov	r2, r9
 8010aea:	69a8      	ldr	r0, [r5, #24]
 8010aec:	4621      	mov	r1, r4
 8010aee:	47c0      	blx	r8
 8010af0:	61a8      	str	r0, [r5, #24]
 8010af2:	bb40      	cbnz	r0, 8010b46 <rcl_wait_set_resize+0x28a>
 8010af4:	200a      	movs	r0, #10
 8010af6:	b003      	add	sp, #12
 8010af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010afc:	00bc      	lsls	r4, r7, #2
 8010afe:	464a      	mov	r2, r9
 8010b00:	6928      	ldr	r0, [r5, #16]
 8010b02:	4621      	mov	r1, r4
 8010b04:	47c0      	blx	r8
 8010b06:	6128      	str	r0, [r5, #16]
 8010b08:	2800      	cmp	r0, #0
 8010b0a:	d0f3      	beq.n	8010af4 <rcl_wait_set_resize+0x238>
 8010b0c:	4622      	mov	r2, r4
 8010b0e:	4631      	mov	r1, r6
 8010b10:	f008 fd90 	bl	8019634 <memset>
 8010b14:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010b16:	616f      	str	r7, [r5, #20]
 8010b18:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8010b1c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8010b20:	e747      	b.n	80109b2 <rcl_wait_set_resize+0xf6>
 8010b22:	6a28      	ldr	r0, [r5, #32]
 8010b24:	b120      	cbz	r0, 8010b30 <rcl_wait_set_resize+0x274>
 8010b26:	4639      	mov	r1, r7
 8010b28:	47c0      	blx	r8
 8010b2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010b2c:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010b2e:	622b      	str	r3, [r5, #32]
 8010b30:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8010b32:	2800      	cmp	r0, #0
 8010b34:	f43f af7e 	beq.w	8010a34 <rcl_wait_set_resize+0x178>
 8010b38:	4639      	mov	r1, r7
 8010b3a:	47c0      	blx	r8
 8010b3c:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010b3e:	2300      	movs	r3, #0
 8010b40:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8010b44:	e776      	b.n	8010a34 <rcl_wait_set_resize+0x178>
 8010b46:	4622      	mov	r2, r4
 8010b48:	4631      	mov	r1, r6
 8010b4a:	f008 fd73 	bl	8019634 <memset>
 8010b4e:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 8010b50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010b52:	464a      	mov	r2, r9
 8010b54:	6a38      	ldr	r0, [r7, #32]
 8010b56:	4621      	mov	r1, r4
 8010b58:	61eb      	str	r3, [r5, #28]
 8010b5a:	61fe      	str	r6, [r7, #28]
 8010b5c:	47c0      	blx	r8
 8010b5e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010b60:	6238      	str	r0, [r7, #32]
 8010b62:	6a1f      	ldr	r7, [r3, #32]
 8010b64:	2f00      	cmp	r7, #0
 8010b66:	d04a      	beq.n	8010bfe <rcl_wait_set_resize+0x342>
 8010b68:	4622      	mov	r2, r4
 8010b6a:	4631      	mov	r1, r6
 8010b6c:	4638      	mov	r0, r7
 8010b6e:	f008 fd61 	bl	8019634 <memset>
 8010b72:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010b74:	e733      	b.n	80109de <rcl_wait_set_resize+0x122>
 8010b76:	009c      	lsls	r4, r3, #2
 8010b78:	463a      	mov	r2, r7
 8010b7a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8010b7c:	4621      	mov	r1, r4
 8010b7e:	47c8      	blx	r9
 8010b80:	62a8      	str	r0, [r5, #40]	; 0x28
 8010b82:	2800      	cmp	r0, #0
 8010b84:	d0b6      	beq.n	8010af4 <rcl_wait_set_resize+0x238>
 8010b86:	4622      	mov	r2, r4
 8010b88:	4631      	mov	r1, r6
 8010b8a:	f008 fd53 	bl	8019634 <memset>
 8010b8e:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8010b92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010b94:	463a      	mov	r2, r7
 8010b96:	4621      	mov	r1, r4
 8010b98:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 8010b9c:	62eb      	str	r3, [r5, #44]	; 0x2c
 8010b9e:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
 8010ba2:	47c8      	blx	r9
 8010ba4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010ba6:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 8010baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d034      	beq.n	8010c1a <rcl_wait_set_resize+0x35e>
 8010bb0:	4622      	mov	r2, r4
 8010bb2:	4631      	mov	r1, r6
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	f008 fd3d 	bl	8019634 <memset>
 8010bba:	4630      	mov	r0, r6
 8010bbc:	b003      	add	sp, #12
 8010bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bc2:	200b      	movs	r0, #11
 8010bc4:	4770      	bx	lr
 8010bc6:	f44f 7061 	mov.w	r0, #900	; 0x384
 8010bca:	e794      	b.n	8010af6 <rcl_wait_set_resize+0x23a>
 8010bcc:	6828      	ldr	r0, [r5, #0]
 8010bce:	4651      	mov	r1, sl
 8010bd0:	9301      	str	r3, [sp, #4]
 8010bd2:	47d8      	blx	fp
 8010bd4:	9b01      	ldr	r3, [sp, #4]
 8010bd6:	200a      	movs	r0, #10
 8010bd8:	e9c5 3300 	strd	r3, r3, [r5]
 8010bdc:	e78b      	b.n	8010af6 <rcl_wait_set_resize+0x23a>
 8010bde:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010be0:	68a8      	ldr	r0, [r5, #8]
 8010be2:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8010be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010be6:	4798      	blx	r3
 8010be8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010bea:	6928      	ldr	r0, [r5, #16]
 8010bec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010bee:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8010bf0:	e9c5 9902 	strd	r9, r9, [r5, #8]
 8010bf4:	4790      	blx	r2
 8010bf6:	200a      	movs	r0, #10
 8010bf8:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8010bfc:	e77b      	b.n	8010af6 <rcl_wait_set_resize+0x23a>
 8010bfe:	69a8      	ldr	r0, [r5, #24]
 8010c00:	4649      	mov	r1, r9
 8010c02:	47d0      	blx	sl
 8010c04:	200a      	movs	r0, #10
 8010c06:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8010c0a:	e774      	b.n	8010af6 <rcl_wait_set_resize+0x23a>
 8010c0c:	6a28      	ldr	r0, [r5, #32]
 8010c0e:	4639      	mov	r1, r7
 8010c10:	47c0      	blx	r8
 8010c12:	200a      	movs	r0, #10
 8010c14:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8010c18:	e76d      	b.n	8010af6 <rcl_wait_set_resize+0x23a>
 8010c1a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8010c1c:	4639      	mov	r1, r7
 8010c1e:	9301      	str	r3, [sp, #4]
 8010c20:	47c0      	blx	r8
 8010c22:	9b01      	ldr	r3, [sp, #4]
 8010c24:	200a      	movs	r0, #10
 8010c26:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8010c2a:	e764      	b.n	8010af6 <rcl_wait_set_resize+0x23a>

08010c2c <rcl_wait_set_init>:
 8010c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c30:	b085      	sub	sp, #20
 8010c32:	4605      	mov	r5, r0
 8010c34:	460e      	mov	r6, r1
 8010c36:	4617      	mov	r7, r2
 8010c38:	a812      	add	r0, sp, #72	; 0x48
 8010c3a:	4698      	mov	r8, r3
 8010c3c:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 8010c40:	f7fb fa9a 	bl	800c178 <rcutils_allocator_is_valid>
 8010c44:	2d00      	cmp	r5, #0
 8010c46:	d072      	beq.n	8010d2e <rcl_wait_set_init+0x102>
 8010c48:	f080 0001 	eor.w	r0, r0, #1
 8010c4c:	b2c0      	uxtb	r0, r0
 8010c4e:	2800      	cmp	r0, #0
 8010c50:	d16d      	bne.n	8010d2e <rcl_wait_set_init+0x102>
 8010c52:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8010c56:	f1ba 0f00 	cmp.w	sl, #0
 8010c5a:	d004      	beq.n	8010c66 <rcl_wait_set_init+0x3a>
 8010c5c:	2464      	movs	r4, #100	; 0x64
 8010c5e:	4620      	mov	r0, r4
 8010c60:	b005      	add	sp, #20
 8010c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c66:	f1b9 0f00 	cmp.w	r9, #0
 8010c6a:	d060      	beq.n	8010d2e <rcl_wait_set_init+0x102>
 8010c6c:	4648      	mov	r0, r9
 8010c6e:	f7fe fa07 	bl	800f080 <rcl_context_is_valid>
 8010c72:	2800      	cmp	r0, #0
 8010c74:	d068      	beq.n	8010d48 <rcl_wait_set_init+0x11c>
 8010c76:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010c78:	205c      	movs	r0, #92	; 0x5c
 8010c7a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010c7c:	4798      	blx	r3
 8010c7e:	6328      	str	r0, [r5, #48]	; 0x30
 8010c80:	2800      	cmp	r0, #0
 8010c82:	d063      	beq.n	8010d4c <rcl_wait_set_init+0x120>
 8010c84:	225c      	movs	r2, #92	; 0x5c
 8010c86:	4651      	mov	r1, sl
 8010c88:	f008 fcd4 	bl	8019634 <memset>
 8010c8c:	ac12      	add	r4, sp, #72	; 0x48
 8010c8e:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
 8010c92:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8010c96:	f10b 0c48 	add.w	ip, fp, #72	; 0x48
 8010c9a:	f8cb 9044 	str.w	r9, [fp, #68]	; 0x44
 8010c9e:	eb03 0e02 	add.w	lr, r3, r2
 8010ca2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010ca4:	f8d9 9000 	ldr.w	r9, [r9]
 8010ca8:	449e      	add	lr, r3
 8010caa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010cac:	e9cb aa01 	strd	sl, sl, [fp, #4]
 8010cb0:	e9cb aa04 	strd	sl, sl, [fp, #16]
 8010cb4:	e9cb aa07 	strd	sl, sl, [fp, #28]
 8010cb8:	e9cb aa0a 	strd	sl, sl, [fp, #40]	; 0x28
 8010cbc:	e9cb aa0d 	strd	sl, sl, [fp, #52]	; 0x34
 8010cc0:	44be      	add	lr, r7
 8010cc2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010cc6:	6823      	ldr	r3, [r4, #0]
 8010cc8:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 8010ccc:	f109 0028 	add.w	r0, r9, #40	; 0x28
 8010cd0:	f8cc 3000 	str.w	r3, [ip]
 8010cd4:	f002 fd9c 	bl	8013810 <rmw_create_wait_set>
 8010cd8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010cda:	f8cb 003c 	str.w	r0, [fp, #60]	; 0x3c
 8010cde:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8010ce0:	b350      	cbz	r0, 8010d38 <rcl_wait_set_init+0x10c>
 8010ce2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8010ce4:	4643      	mov	r3, r8
 8010ce6:	463a      	mov	r2, r7
 8010ce8:	4631      	mov	r1, r6
 8010cea:	9402      	str	r4, [sp, #8]
 8010cec:	4628      	mov	r0, r5
 8010cee:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8010cf0:	9401      	str	r4, [sp, #4]
 8010cf2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8010cf4:	9400      	str	r4, [sp, #0]
 8010cf6:	f7ff fde1 	bl	80108bc <rcl_wait_set_resize>
 8010cfa:	4604      	mov	r4, r0
 8010cfc:	2800      	cmp	r0, #0
 8010cfe:	d0ae      	beq.n	8010c5e <rcl_wait_set_init+0x32>
 8010d00:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010d02:	bb2b      	cbnz	r3, 8010d50 <rcl_wait_set_init+0x124>
 8010d04:	2600      	movs	r6, #0
 8010d06:	4628      	mov	r0, r5
 8010d08:	4633      	mov	r3, r6
 8010d0a:	4632      	mov	r2, r6
 8010d0c:	4631      	mov	r1, r6
 8010d0e:	9600      	str	r6, [sp, #0]
 8010d10:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8010d14:	f7ff fdd2 	bl	80108bc <rcl_wait_set_resize>
 8010d18:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8010d1a:	2800      	cmp	r0, #0
 8010d1c:	d09f      	beq.n	8010c5e <rcl_wait_set_init+0x32>
 8010d1e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8010d20:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8010d22:	4798      	blx	r3
 8010d24:	4620      	mov	r0, r4
 8010d26:	632e      	str	r6, [r5, #48]	; 0x30
 8010d28:	b005      	add	sp, #20
 8010d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d2e:	240b      	movs	r4, #11
 8010d30:	4620      	mov	r0, r4
 8010d32:	b005      	add	sp, #20
 8010d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d38:	2401      	movs	r4, #1
 8010d3a:	f002 fd73 	bl	8013824 <rmw_destroy_wait_set>
 8010d3e:	2800      	cmp	r0, #0
 8010d40:	bf18      	it	ne
 8010d42:	f44f 7461 	movne.w	r4, #900	; 0x384
 8010d46:	e7dd      	b.n	8010d04 <rcl_wait_set_init+0xd8>
 8010d48:	2465      	movs	r4, #101	; 0x65
 8010d4a:	e788      	b.n	8010c5e <rcl_wait_set_init+0x32>
 8010d4c:	240a      	movs	r4, #10
 8010d4e:	e786      	b.n	8010c5e <rcl_wait_set_init+0x32>
 8010d50:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8010d52:	e7f2      	b.n	8010d3a <rcl_wait_set_init+0x10e>

08010d54 <rcl_wait_set_add_guard_condition>:
 8010d54:	b318      	cbz	r0, 8010d9e <rcl_wait_set_add_guard_condition+0x4a>
 8010d56:	b538      	push	{r3, r4, r5, lr}
 8010d58:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010d5a:	4604      	mov	r4, r0
 8010d5c:	b30b      	cbz	r3, 8010da2 <rcl_wait_set_add_guard_condition+0x4e>
 8010d5e:	b319      	cbz	r1, 8010da8 <rcl_wait_set_add_guard_condition+0x54>
 8010d60:	68dd      	ldr	r5, [r3, #12]
 8010d62:	68c0      	ldr	r0, [r0, #12]
 8010d64:	4285      	cmp	r5, r0
 8010d66:	d217      	bcs.n	8010d98 <rcl_wait_set_add_guard_condition+0x44>
 8010d68:	1c68      	adds	r0, r5, #1
 8010d6a:	60d8      	str	r0, [r3, #12]
 8010d6c:	68a3      	ldr	r3, [r4, #8]
 8010d6e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8010d72:	b102      	cbz	r2, 8010d76 <rcl_wait_set_add_guard_condition+0x22>
 8010d74:	6015      	str	r5, [r2, #0]
 8010d76:	4608      	mov	r0, r1
 8010d78:	f006 fe56 	bl	8017a28 <rcl_guard_condition_get_rmw_handle>
 8010d7c:	b150      	cbz	r0, 8010d94 <rcl_wait_set_add_guard_condition+0x40>
 8010d7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010d80:	6842      	ldr	r2, [r0, #4]
 8010d82:	2000      	movs	r0, #0
 8010d84:	695b      	ldr	r3, [r3, #20]
 8010d86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010d8a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010d8c:	6913      	ldr	r3, [r2, #16]
 8010d8e:	3301      	adds	r3, #1
 8010d90:	6113      	str	r3, [r2, #16]
 8010d92:	bd38      	pop	{r3, r4, r5, pc}
 8010d94:	2001      	movs	r0, #1
 8010d96:	bd38      	pop	{r3, r4, r5, pc}
 8010d98:	f240 3086 	movw	r0, #902	; 0x386
 8010d9c:	bd38      	pop	{r3, r4, r5, pc}
 8010d9e:	200b      	movs	r0, #11
 8010da0:	4770      	bx	lr
 8010da2:	f44f 7061 	mov.w	r0, #900	; 0x384
 8010da6:	bd38      	pop	{r3, r4, r5, pc}
 8010da8:	200b      	movs	r0, #11
 8010daa:	bd38      	pop	{r3, r4, r5, pc}

08010dac <rcl_wait_set_add_timer>:
 8010dac:	b328      	cbz	r0, 8010dfa <rcl_wait_set_add_timer+0x4e>
 8010dae:	b538      	push	{r3, r4, r5, lr}
 8010db0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010db2:	4604      	mov	r4, r0
 8010db4:	b31b      	cbz	r3, 8010dfe <rcl_wait_set_add_timer+0x52>
 8010db6:	b329      	cbz	r1, 8010e04 <rcl_wait_set_add_timer+0x58>
 8010db8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8010dba:	6965      	ldr	r5, [r4, #20]
 8010dbc:	42a8      	cmp	r0, r5
 8010dbe:	d219      	bcs.n	8010df4 <rcl_wait_set_add_timer+0x48>
 8010dc0:	1c45      	adds	r5, r0, #1
 8010dc2:	641d      	str	r5, [r3, #64]	; 0x40
 8010dc4:	6923      	ldr	r3, [r4, #16]
 8010dc6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8010dca:	b102      	cbz	r2, 8010dce <rcl_wait_set_add_timer+0x22>
 8010dcc:	6010      	str	r0, [r2, #0]
 8010dce:	4608      	mov	r0, r1
 8010dd0:	f7ff fb9a 	bl	8010508 <rcl_timer_get_guard_condition>
 8010dd4:	b168      	cbz	r0, 8010df2 <rcl_wait_set_add_timer+0x46>
 8010dd6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010dd8:	68e3      	ldr	r3, [r4, #12]
 8010dda:	6c15      	ldr	r5, [r2, #64]	; 0x40
 8010ddc:	3b01      	subs	r3, #1
 8010dde:	441d      	add	r5, r3
 8010de0:	f006 fe22 	bl	8017a28 <rcl_guard_condition_get_rmw_handle>
 8010de4:	b180      	cbz	r0, 8010e08 <rcl_wait_set_add_timer+0x5c>
 8010de6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010de8:	6842      	ldr	r2, [r0, #4]
 8010dea:	2000      	movs	r0, #0
 8010dec:	695b      	ldr	r3, [r3, #20]
 8010dee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010df2:	bd38      	pop	{r3, r4, r5, pc}
 8010df4:	f240 3086 	movw	r0, #902	; 0x386
 8010df8:	bd38      	pop	{r3, r4, r5, pc}
 8010dfa:	200b      	movs	r0, #11
 8010dfc:	4770      	bx	lr
 8010dfe:	f44f 7061 	mov.w	r0, #900	; 0x384
 8010e02:	bd38      	pop	{r3, r4, r5, pc}
 8010e04:	200b      	movs	r0, #11
 8010e06:	bd38      	pop	{r3, r4, r5, pc}
 8010e08:	2001      	movs	r0, #1
 8010e0a:	bd38      	pop	{r3, r4, r5, pc}

08010e0c <rcl_wait_set_add_client>:
 8010e0c:	b318      	cbz	r0, 8010e56 <rcl_wait_set_add_client+0x4a>
 8010e0e:	b538      	push	{r3, r4, r5, lr}
 8010e10:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010e12:	4604      	mov	r4, r0
 8010e14:	b30b      	cbz	r3, 8010e5a <rcl_wait_set_add_client+0x4e>
 8010e16:	b319      	cbz	r1, 8010e60 <rcl_wait_set_add_client+0x54>
 8010e18:	699d      	ldr	r5, [r3, #24]
 8010e1a:	69c0      	ldr	r0, [r0, #28]
 8010e1c:	4285      	cmp	r5, r0
 8010e1e:	d217      	bcs.n	8010e50 <rcl_wait_set_add_client+0x44>
 8010e20:	1c68      	adds	r0, r5, #1
 8010e22:	6198      	str	r0, [r3, #24]
 8010e24:	69a3      	ldr	r3, [r4, #24]
 8010e26:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8010e2a:	b102      	cbz	r2, 8010e2e <rcl_wait_set_add_client+0x22>
 8010e2c:	6015      	str	r5, [r2, #0]
 8010e2e:	4608      	mov	r0, r1
 8010e30:	f7fe f83c 	bl	800eeac <rcl_client_get_rmw_handle>
 8010e34:	b150      	cbz	r0, 8010e4c <rcl_wait_set_add_client+0x40>
 8010e36:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010e38:	6842      	ldr	r2, [r0, #4]
 8010e3a:	2000      	movs	r0, #0
 8010e3c:	6a1b      	ldr	r3, [r3, #32]
 8010e3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010e42:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010e44:	69d3      	ldr	r3, [r2, #28]
 8010e46:	3301      	adds	r3, #1
 8010e48:	61d3      	str	r3, [r2, #28]
 8010e4a:	bd38      	pop	{r3, r4, r5, pc}
 8010e4c:	2001      	movs	r0, #1
 8010e4e:	bd38      	pop	{r3, r4, r5, pc}
 8010e50:	f240 3086 	movw	r0, #902	; 0x386
 8010e54:	bd38      	pop	{r3, r4, r5, pc}
 8010e56:	200b      	movs	r0, #11
 8010e58:	4770      	bx	lr
 8010e5a:	f44f 7061 	mov.w	r0, #900	; 0x384
 8010e5e:	bd38      	pop	{r3, r4, r5, pc}
 8010e60:	200b      	movs	r0, #11
 8010e62:	bd38      	pop	{r3, r4, r5, pc}

08010e64 <rcl_wait_set_add_service>:
 8010e64:	b318      	cbz	r0, 8010eae <rcl_wait_set_add_service+0x4a>
 8010e66:	b538      	push	{r3, r4, r5, lr}
 8010e68:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010e6a:	4604      	mov	r4, r0
 8010e6c:	b30b      	cbz	r3, 8010eb2 <rcl_wait_set_add_service+0x4e>
 8010e6e:	b319      	cbz	r1, 8010eb8 <rcl_wait_set_add_service+0x54>
 8010e70:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8010e72:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8010e74:	4285      	cmp	r5, r0
 8010e76:	d217      	bcs.n	8010ea8 <rcl_wait_set_add_service+0x44>
 8010e78:	1c68      	adds	r0, r5, #1
 8010e7a:	6258      	str	r0, [r3, #36]	; 0x24
 8010e7c:	6a23      	ldr	r3, [r4, #32]
 8010e7e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8010e82:	b102      	cbz	r2, 8010e86 <rcl_wait_set_add_service+0x22>
 8010e84:	6015      	str	r5, [r2, #0]
 8010e86:	4608      	mov	r0, r1
 8010e88:	f7fe fff4 	bl	800fe74 <rcl_service_get_rmw_handle>
 8010e8c:	b150      	cbz	r0, 8010ea4 <rcl_wait_set_add_service+0x40>
 8010e8e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010e90:	6842      	ldr	r2, [r0, #4]
 8010e92:	2000      	movs	r0, #0
 8010e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010e9a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010e9c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8010e9e:	3301      	adds	r3, #1
 8010ea0:	6293      	str	r3, [r2, #40]	; 0x28
 8010ea2:	bd38      	pop	{r3, r4, r5, pc}
 8010ea4:	2001      	movs	r0, #1
 8010ea6:	bd38      	pop	{r3, r4, r5, pc}
 8010ea8:	f240 3086 	movw	r0, #902	; 0x386
 8010eac:	bd38      	pop	{r3, r4, r5, pc}
 8010eae:	200b      	movs	r0, #11
 8010eb0:	4770      	bx	lr
 8010eb2:	f44f 7061 	mov.w	r0, #900	; 0x384
 8010eb6:	bd38      	pop	{r3, r4, r5, pc}
 8010eb8:	200b      	movs	r0, #11
 8010eba:	bd38      	pop	{r3, r4, r5, pc}
 8010ebc:	0000      	movs	r0, r0
	...

08010ec0 <rcl_wait>:
 8010ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ec4:	ed2d 8b02 	vpush	{d8}
 8010ec8:	b08d      	sub	sp, #52	; 0x34
 8010eca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010ece:	2800      	cmp	r0, #0
 8010ed0:	f000 814f 	beq.w	8011172 <rcl_wait+0x2b2>
 8010ed4:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8010ed6:	4605      	mov	r5, r0
 8010ed8:	2e00      	cmp	r6, #0
 8010eda:	f000 811a 	beq.w	8011112 <rcl_wait+0x252>
 8010ede:	6843      	ldr	r3, [r0, #4]
 8010ee0:	b983      	cbnz	r3, 8010f04 <rcl_wait+0x44>
 8010ee2:	68eb      	ldr	r3, [r5, #12]
 8010ee4:	b973      	cbnz	r3, 8010f04 <rcl_wait+0x44>
 8010ee6:	696b      	ldr	r3, [r5, #20]
 8010ee8:	b963      	cbnz	r3, 8010f04 <rcl_wait+0x44>
 8010eea:	69eb      	ldr	r3, [r5, #28]
 8010eec:	b953      	cbnz	r3, 8010f04 <rcl_wait+0x44>
 8010eee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010ef0:	b943      	cbnz	r3, 8010f04 <rcl_wait+0x44>
 8010ef2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8010ef4:	b933      	cbnz	r3, 8010f04 <rcl_wait+0x44>
 8010ef6:	f240 3085 	movw	r0, #901	; 0x385
 8010efa:	b00d      	add	sp, #52	; 0x34
 8010efc:	ecbd 8b02 	vpop	{d8}
 8010f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f04:	9b04      	ldr	r3, [sp, #16]
 8010f06:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8010f08:	2b01      	cmp	r3, #1
 8010f0a:	9b05      	ldr	r3, [sp, #20]
 8010f0c:	f173 0300 	sbcs.w	r3, r3, #0
 8010f10:	f2c0 80f8 	blt.w	8011104 <rcl_wait+0x244>
 8010f14:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8010f18:	2a00      	cmp	r2, #0
 8010f1a:	f000 810f 	beq.w	801113c <rcl_wait+0x27c>
 8010f1e:	2400      	movs	r4, #0
 8010f20:	4613      	mov	r3, r2
 8010f22:	f240 3921 	movw	r9, #801	; 0x321
 8010f26:	4632      	mov	r2, r6
 8010f28:	46a2      	mov	sl, r4
 8010f2a:	46a3      	mov	fp, r4
 8010f2c:	ed9f 8b98 	vldr	d8, [pc, #608]	; 8011190 <rcl_wait+0x2d0>
 8010f30:	e014      	b.n	8010f5c <rcl_wait+0x9c>
 8010f32:	2800      	cmp	r0, #0
 8010f34:	d1e1      	bne.n	8010efa <rcl_wait+0x3a>
 8010f36:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010f3a:	4542      	cmp	r2, r8
 8010f3c:	eb73 0107 	sbcs.w	r1, r3, r7
 8010f40:	da03      	bge.n	8010f4a <rcl_wait+0x8a>
 8010f42:	4690      	mov	r8, r2
 8010f44:	461f      	mov	r7, r3
 8010f46:	f04f 0b01 	mov.w	fp, #1
 8010f4a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8010f4c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8010f4e:	3401      	adds	r4, #1
 8010f50:	f14a 0a00 	adc.w	sl, sl, #0
 8010f54:	429c      	cmp	r4, r3
 8010f56:	f17a 0100 	sbcs.w	r1, sl, #0
 8010f5a:	d228      	bcs.n	8010fae <rcl_wait+0xee>
 8010f5c:	6928      	ldr	r0, [r5, #16]
 8010f5e:	a908      	add	r1, sp, #32
 8010f60:	00a6      	lsls	r6, r4, #2
 8010f62:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8010f66:	2800      	cmp	r0, #0
 8010f68:	d0f1      	beq.n	8010f4e <rcl_wait+0x8e>
 8010f6a:	68eb      	ldr	r3, [r5, #12]
 8010f6c:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8010f70:	4423      	add	r3, r4
 8010f72:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8010f76:	f1be 0f00 	cmp.w	lr, #0
 8010f7a:	d006      	beq.n	8010f8a <rcl_wait+0xca>
 8010f7c:	6913      	ldr	r3, [r2, #16]
 8010f7e:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8010f82:	3301      	adds	r3, #1
 8010f84:	6113      	str	r3, [r2, #16]
 8010f86:	692b      	ldr	r3, [r5, #16]
 8010f88:	5998      	ldr	r0, [r3, r6]
 8010f8a:	ed8d 8b08 	vstr	d8, [sp, #32]
 8010f8e:	f7ff fa89 	bl	80104a4 <rcl_timer_get_time_until_next_call>
 8010f92:	4548      	cmp	r0, r9
 8010f94:	d1cd      	bne.n	8010f32 <rcl_wait+0x72>
 8010f96:	692b      	ldr	r3, [r5, #16]
 8010f98:	2200      	movs	r2, #0
 8010f9a:	3401      	adds	r4, #1
 8010f9c:	519a      	str	r2, [r3, r6]
 8010f9e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8010fa0:	f14a 0a00 	adc.w	sl, sl, #0
 8010fa4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8010fa6:	429c      	cmp	r4, r3
 8010fa8:	f17a 0100 	sbcs.w	r1, sl, #0
 8010fac:	d3d6      	bcc.n	8010f5c <rcl_wait+0x9c>
 8010fae:	4659      	mov	r1, fp
 8010fb0:	4616      	mov	r6, r2
 8010fb2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8010fb6:	4313      	orrs	r3, r2
 8010fb8:	f040 80b4 	bne.w	8011124 <rcl_wait+0x264>
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	460c      	mov	r4, r1
 8010fc2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010fc6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8010fca:	ab08      	add	r3, sp, #32
 8010fcc:	9302      	str	r3, [sp, #8]
 8010fce:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8010fd2:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8010fd4:	f106 0110 	add.w	r1, r6, #16
 8010fd8:	9300      	str	r3, [sp, #0]
 8010fda:	1d30      	adds	r0, r6, #4
 8010fdc:	f106 031c 	add.w	r3, r6, #28
 8010fe0:	9201      	str	r2, [sp, #4]
 8010fe2:	f106 0228 	add.w	r2, r6, #40	; 0x28
 8010fe6:	f002 faaf 	bl	8013548 <rmw_wait>
 8010fea:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010fec:	4680      	mov	r8, r0
 8010fee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010ff0:	b1e2      	cbz	r2, 801102c <rcl_wait+0x16c>
 8010ff2:	f04f 0900 	mov.w	r9, #0
 8010ff6:	464f      	mov	r7, r9
 8010ff8:	692a      	ldr	r2, [r5, #16]
 8010ffa:	f10d 011f 	add.w	r1, sp, #31
 8010ffe:	ea4f 0689 	mov.w	r6, r9, lsl #2
 8011002:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 8011006:	b160      	cbz	r0, 8011022 <rcl_wait+0x162>
 8011008:	f88d 701f 	strb.w	r7, [sp, #31]
 801100c:	f7ff fa0e 	bl	801042c <rcl_timer_is_ready>
 8011010:	2800      	cmp	r0, #0
 8011012:	f47f af72 	bne.w	8010efa <rcl_wait+0x3a>
 8011016:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801101a:	b90b      	cbnz	r3, 8011020 <rcl_wait+0x160>
 801101c:	692a      	ldr	r2, [r5, #16]
 801101e:	5193      	str	r3, [r2, r6]
 8011020:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8011022:	f109 0901 	add.w	r9, r9, #1
 8011026:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011028:	454a      	cmp	r2, r9
 801102a:	d8e5      	bhi.n	8010ff8 <rcl_wait+0x138>
 801102c:	f038 0002 	bics.w	r0, r8, #2
 8011030:	d176      	bne.n	8011120 <rcl_wait+0x260>
 8011032:	686f      	ldr	r7, [r5, #4]
 8011034:	b17f      	cbz	r7, 8011056 <rcl_wait+0x196>
 8011036:	4602      	mov	r2, r0
 8011038:	e002      	b.n	8011040 <rcl_wait+0x180>
 801103a:	3201      	adds	r2, #1
 801103c:	42ba      	cmp	r2, r7
 801103e:	d00a      	beq.n	8011056 <rcl_wait+0x196>
 8011040:	6899      	ldr	r1, [r3, #8]
 8011042:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011046:	2900      	cmp	r1, #0
 8011048:	d1f7      	bne.n	801103a <rcl_wait+0x17a>
 801104a:	682e      	ldr	r6, [r5, #0]
 801104c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8011050:	3201      	adds	r2, #1
 8011052:	42ba      	cmp	r2, r7
 8011054:	d1f4      	bne.n	8011040 <rcl_wait+0x180>
 8011056:	68ef      	ldr	r7, [r5, #12]
 8011058:	b17f      	cbz	r7, 801107a <rcl_wait+0x1ba>
 801105a:	2200      	movs	r2, #0
 801105c:	e002      	b.n	8011064 <rcl_wait+0x1a4>
 801105e:	3201      	adds	r2, #1
 8011060:	42ba      	cmp	r2, r7
 8011062:	d00a      	beq.n	801107a <rcl_wait+0x1ba>
 8011064:	6959      	ldr	r1, [r3, #20]
 8011066:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801106a:	2900      	cmp	r1, #0
 801106c:	d1f7      	bne.n	801105e <rcl_wait+0x19e>
 801106e:	68ae      	ldr	r6, [r5, #8]
 8011070:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8011074:	3201      	adds	r2, #1
 8011076:	42ba      	cmp	r2, r7
 8011078:	d1f4      	bne.n	8011064 <rcl_wait+0x1a4>
 801107a:	69ef      	ldr	r7, [r5, #28]
 801107c:	b17f      	cbz	r7, 801109e <rcl_wait+0x1de>
 801107e:	2200      	movs	r2, #0
 8011080:	e002      	b.n	8011088 <rcl_wait+0x1c8>
 8011082:	3201      	adds	r2, #1
 8011084:	42ba      	cmp	r2, r7
 8011086:	d00a      	beq.n	801109e <rcl_wait+0x1de>
 8011088:	6a19      	ldr	r1, [r3, #32]
 801108a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801108e:	2900      	cmp	r1, #0
 8011090:	d1f7      	bne.n	8011082 <rcl_wait+0x1c2>
 8011092:	69ae      	ldr	r6, [r5, #24]
 8011094:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8011098:	3201      	adds	r2, #1
 801109a:	42ba      	cmp	r2, r7
 801109c:	d1f4      	bne.n	8011088 <rcl_wait+0x1c8>
 801109e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 80110a0:	b17f      	cbz	r7, 80110c2 <rcl_wait+0x202>
 80110a2:	2200      	movs	r2, #0
 80110a4:	e002      	b.n	80110ac <rcl_wait+0x1ec>
 80110a6:	3201      	adds	r2, #1
 80110a8:	42ba      	cmp	r2, r7
 80110aa:	d00a      	beq.n	80110c2 <rcl_wait+0x202>
 80110ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80110ae:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80110b2:	2900      	cmp	r1, #0
 80110b4:	d1f7      	bne.n	80110a6 <rcl_wait+0x1e6>
 80110b6:	6a2e      	ldr	r6, [r5, #32]
 80110b8:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 80110bc:	3201      	adds	r2, #1
 80110be:	42ba      	cmp	r2, r7
 80110c0:	d1f4      	bne.n	80110ac <rcl_wait+0x1ec>
 80110c2:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 80110c4:	b17f      	cbz	r7, 80110e6 <rcl_wait+0x226>
 80110c6:	2200      	movs	r2, #0
 80110c8:	e002      	b.n	80110d0 <rcl_wait+0x210>
 80110ca:	3201      	adds	r2, #1
 80110cc:	42ba      	cmp	r2, r7
 80110ce:	d00a      	beq.n	80110e6 <rcl_wait+0x226>
 80110d0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80110d2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80110d6:	2900      	cmp	r1, #0
 80110d8:	d1f7      	bne.n	80110ca <rcl_wait+0x20a>
 80110da:	6aae      	ldr	r6, [r5, #40]	; 0x28
 80110dc:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 80110e0:	3201      	adds	r2, #1
 80110e2:	42ba      	cmp	r2, r7
 80110e4:	d1f4      	bne.n	80110d0 <rcl_wait+0x210>
 80110e6:	f1b8 0f02 	cmp.w	r8, #2
 80110ea:	f47f af06 	bne.w	8010efa <rcl_wait+0x3a>
 80110ee:	f084 0301 	eor.w	r3, r4, #1
 80110f2:	b2db      	uxtb	r3, r3
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	bf18      	it	ne
 80110f8:	2002      	movne	r0, #2
 80110fa:	b00d      	add	sp, #52	; 0x34
 80110fc:	ecbd 8b02 	vpop	{d8}
 8011100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011104:	2a00      	cmp	r2, #0
 8011106:	d03a      	beq.n	801117e <rcl_wait+0x2be>
 8011108:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801110c:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8011110:	e705      	b.n	8010f1e <rcl_wait+0x5e>
 8011112:	f44f 7061 	mov.w	r0, #900	; 0x384
 8011116:	b00d      	add	sp, #52	; 0x34
 8011118:	ecbd 8b02 	vpop	{d8}
 801111c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011120:	2001      	movs	r0, #1
 8011122:	e6ea      	b.n	8010efa <rcl_wait+0x3a>
 8011124:	9b04      	ldr	r3, [sp, #16]
 8011126:	460c      	mov	r4, r1
 8011128:	2b01      	cmp	r3, #1
 801112a:	9b05      	ldr	r3, [sp, #20]
 801112c:	f173 0300 	sbcs.w	r3, r3, #0
 8011130:	bfa8      	it	ge
 8011132:	f044 0401 	orrge.w	r4, r4, #1
 8011136:	b914      	cbnz	r4, 801113e <rcl_wait+0x27e>
 8011138:	4623      	mov	r3, r4
 801113a:	e747      	b.n	8010fcc <rcl_wait+0x10c>
 801113c:	4611      	mov	r1, r2
 801113e:	2f00      	cmp	r7, #0
 8011140:	da02      	bge.n	8011148 <rcl_wait+0x288>
 8011142:	f04f 0800 	mov.w	r8, #0
 8011146:	4647      	mov	r7, r8
 8011148:	460c      	mov	r4, r1
 801114a:	4640      	mov	r0, r8
 801114c:	4639      	mov	r1, r7
 801114e:	a312      	add	r3, pc, #72	; (adr r3, 8011198 <rcl_wait+0x2d8>)
 8011150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011154:	f7ef f8dc 	bl	8000310 <__aeabi_ldivmod>
 8011158:	a30f      	add	r3, pc, #60	; (adr r3, 8011198 <rcl_wait+0x2d8>)
 801115a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801115e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011162:	4640      	mov	r0, r8
 8011164:	4639      	mov	r1, r7
 8011166:	f7ef f8d3 	bl	8000310 <__aeabi_ldivmod>
 801116a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801116e:	ab08      	add	r3, sp, #32
 8011170:	e72c      	b.n	8010fcc <rcl_wait+0x10c>
 8011172:	200b      	movs	r0, #11
 8011174:	b00d      	add	sp, #52	; 0x34
 8011176:	ecbd 8b02 	vpop	{d8}
 801117a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801117e:	4611      	mov	r1, r2
 8011180:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8011184:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8011188:	e713      	b.n	8010fb2 <rcl_wait+0xf2>
 801118a:	bf00      	nop
 801118c:	f3af 8000 	nop.w
 8011190:	ffffffff 	.word	0xffffffff
 8011194:	7fffffff 	.word	0x7fffffff
 8011198:	3b9aca00 	.word	0x3b9aca00
 801119c:	00000000 	.word	0x00000000

080111a0 <rcl_action_take_goal_response>:
 80111a0:	2800      	cmp	r0, #0
 80111a2:	d039      	beq.n	8011218 <rcl_action_take_goal_response+0x78>
 80111a4:	b570      	push	{r4, r5, r6, lr}
 80111a6:	4604      	mov	r4, r0
 80111a8:	6800      	ldr	r0, [r0, #0]
 80111aa:	b380      	cbz	r0, 801120e <rcl_action_take_goal_response+0x6e>
 80111ac:	460e      	mov	r6, r1
 80111ae:	4615      	mov	r5, r2
 80111b0:	f7fd ff3e 	bl	800f030 <rcl_client_is_valid>
 80111b4:	b330      	cbz	r0, 8011204 <rcl_action_take_goal_response+0x64>
 80111b6:	6820      	ldr	r0, [r4, #0]
 80111b8:	3004      	adds	r0, #4
 80111ba:	f7fd ff39 	bl	800f030 <rcl_client_is_valid>
 80111be:	b308      	cbz	r0, 8011204 <rcl_action_take_goal_response+0x64>
 80111c0:	6820      	ldr	r0, [r4, #0]
 80111c2:	3008      	adds	r0, #8
 80111c4:	f7fd ff34 	bl	800f030 <rcl_client_is_valid>
 80111c8:	b1e0      	cbz	r0, 8011204 <rcl_action_take_goal_response+0x64>
 80111ca:	6820      	ldr	r0, [r4, #0]
 80111cc:	300c      	adds	r0, #12
 80111ce:	f7fe ffdb 	bl	8010188 <rcl_subscription_is_valid>
 80111d2:	b1b8      	cbz	r0, 8011204 <rcl_action_take_goal_response+0x64>
 80111d4:	6820      	ldr	r0, [r4, #0]
 80111d6:	3010      	adds	r0, #16
 80111d8:	f7fe ffd6 	bl	8010188 <rcl_subscription_is_valid>
 80111dc:	b190      	cbz	r0, 8011204 <rcl_action_take_goal_response+0x64>
 80111de:	b1cd      	cbz	r5, 8011214 <rcl_action_take_goal_response+0x74>
 80111e0:	b1c6      	cbz	r6, 8011214 <rcl_action_take_goal_response+0x74>
 80111e2:	462a      	mov	r2, r5
 80111e4:	4631      	mov	r1, r6
 80111e6:	6820      	ldr	r0, [r4, #0]
 80111e8:	f7fd feba 	bl	800ef60 <rcl_take_response>
 80111ec:	b148      	cbz	r0, 8011202 <rcl_action_take_goal_response+0x62>
 80111ee:	280a      	cmp	r0, #10
 80111f0:	d007      	beq.n	8011202 <rcl_action_take_goal_response+0x62>
 80111f2:	f240 12f5 	movw	r2, #501	; 0x1f5
 80111f6:	f640 0337 	movw	r3, #2103	; 0x837
 80111fa:	4290      	cmp	r0, r2
 80111fc:	bf0c      	ite	eq
 80111fe:	4618      	moveq	r0, r3
 8011200:	2001      	movne	r0, #1
 8011202:	bd70      	pop	{r4, r5, r6, pc}
 8011204:	f7fa ffdc 	bl	800c1c0 <rcutils_reset_error>
 8011208:	f640 0036 	movw	r0, #2102	; 0x836
 801120c:	bd70      	pop	{r4, r5, r6, pc}
 801120e:	f640 0036 	movw	r0, #2102	; 0x836
 8011212:	bd70      	pop	{r4, r5, r6, pc}
 8011214:	200b      	movs	r0, #11
 8011216:	bd70      	pop	{r4, r5, r6, pc}
 8011218:	f640 0036 	movw	r0, #2102	; 0x836
 801121c:	4770      	bx	lr
 801121e:	bf00      	nop

08011220 <rcl_action_send_result_request>:
 8011220:	b390      	cbz	r0, 8011288 <rcl_action_send_result_request+0x68>
 8011222:	b570      	push	{r4, r5, r6, lr}
 8011224:	4604      	mov	r4, r0
 8011226:	6800      	ldr	r0, [r0, #0]
 8011228:	b348      	cbz	r0, 801127e <rcl_action_send_result_request+0x5e>
 801122a:	460e      	mov	r6, r1
 801122c:	4615      	mov	r5, r2
 801122e:	f7fd feff 	bl	800f030 <rcl_client_is_valid>
 8011232:	b1f8      	cbz	r0, 8011274 <rcl_action_send_result_request+0x54>
 8011234:	6820      	ldr	r0, [r4, #0]
 8011236:	3004      	adds	r0, #4
 8011238:	f7fd fefa 	bl	800f030 <rcl_client_is_valid>
 801123c:	b1d0      	cbz	r0, 8011274 <rcl_action_send_result_request+0x54>
 801123e:	6820      	ldr	r0, [r4, #0]
 8011240:	3008      	adds	r0, #8
 8011242:	f7fd fef5 	bl	800f030 <rcl_client_is_valid>
 8011246:	b1a8      	cbz	r0, 8011274 <rcl_action_send_result_request+0x54>
 8011248:	6820      	ldr	r0, [r4, #0]
 801124a:	300c      	adds	r0, #12
 801124c:	f7fe ff9c 	bl	8010188 <rcl_subscription_is_valid>
 8011250:	b180      	cbz	r0, 8011274 <rcl_action_send_result_request+0x54>
 8011252:	6820      	ldr	r0, [r4, #0]
 8011254:	3010      	adds	r0, #16
 8011256:	f7fe ff97 	bl	8010188 <rcl_subscription_is_valid>
 801125a:	b158      	cbz	r0, 8011274 <rcl_action_send_result_request+0x54>
 801125c:	b195      	cbz	r5, 8011284 <rcl_action_send_result_request+0x64>
 801125e:	b18e      	cbz	r6, 8011284 <rcl_action_send_result_request+0x64>
 8011260:	6820      	ldr	r0, [r4, #0]
 8011262:	462a      	mov	r2, r5
 8011264:	4631      	mov	r1, r6
 8011266:	3008      	adds	r0, #8
 8011268:	f7fd fe26 	bl	800eeb8 <rcl_send_request>
 801126c:	3800      	subs	r0, #0
 801126e:	bf18      	it	ne
 8011270:	2001      	movne	r0, #1
 8011272:	bd70      	pop	{r4, r5, r6, pc}
 8011274:	f7fa ffa4 	bl	800c1c0 <rcutils_reset_error>
 8011278:	f640 0036 	movw	r0, #2102	; 0x836
 801127c:	bd70      	pop	{r4, r5, r6, pc}
 801127e:	f640 0036 	movw	r0, #2102	; 0x836
 8011282:	bd70      	pop	{r4, r5, r6, pc}
 8011284:	200b      	movs	r0, #11
 8011286:	bd70      	pop	{r4, r5, r6, pc}
 8011288:	f640 0036 	movw	r0, #2102	; 0x836
 801128c:	4770      	bx	lr
 801128e:	bf00      	nop

08011290 <rcl_action_take_result_response>:
 8011290:	2800      	cmp	r0, #0
 8011292:	d03a      	beq.n	801130a <rcl_action_take_result_response+0x7a>
 8011294:	b570      	push	{r4, r5, r6, lr}
 8011296:	4604      	mov	r4, r0
 8011298:	6800      	ldr	r0, [r0, #0]
 801129a:	b388      	cbz	r0, 8011300 <rcl_action_take_result_response+0x70>
 801129c:	460e      	mov	r6, r1
 801129e:	4615      	mov	r5, r2
 80112a0:	f7fd fec6 	bl	800f030 <rcl_client_is_valid>
 80112a4:	b338      	cbz	r0, 80112f6 <rcl_action_take_result_response+0x66>
 80112a6:	6820      	ldr	r0, [r4, #0]
 80112a8:	3004      	adds	r0, #4
 80112aa:	f7fd fec1 	bl	800f030 <rcl_client_is_valid>
 80112ae:	b310      	cbz	r0, 80112f6 <rcl_action_take_result_response+0x66>
 80112b0:	6820      	ldr	r0, [r4, #0]
 80112b2:	3008      	adds	r0, #8
 80112b4:	f7fd febc 	bl	800f030 <rcl_client_is_valid>
 80112b8:	b1e8      	cbz	r0, 80112f6 <rcl_action_take_result_response+0x66>
 80112ba:	6820      	ldr	r0, [r4, #0]
 80112bc:	300c      	adds	r0, #12
 80112be:	f7fe ff63 	bl	8010188 <rcl_subscription_is_valid>
 80112c2:	b1c0      	cbz	r0, 80112f6 <rcl_action_take_result_response+0x66>
 80112c4:	6820      	ldr	r0, [r4, #0]
 80112c6:	3010      	adds	r0, #16
 80112c8:	f7fe ff5e 	bl	8010188 <rcl_subscription_is_valid>
 80112cc:	b198      	cbz	r0, 80112f6 <rcl_action_take_result_response+0x66>
 80112ce:	b1d5      	cbz	r5, 8011306 <rcl_action_take_result_response+0x76>
 80112d0:	b1ce      	cbz	r6, 8011306 <rcl_action_take_result_response+0x76>
 80112d2:	6820      	ldr	r0, [r4, #0]
 80112d4:	462a      	mov	r2, r5
 80112d6:	4631      	mov	r1, r6
 80112d8:	3008      	adds	r0, #8
 80112da:	f7fd fe41 	bl	800ef60 <rcl_take_response>
 80112de:	b148      	cbz	r0, 80112f4 <rcl_action_take_result_response+0x64>
 80112e0:	280a      	cmp	r0, #10
 80112e2:	d007      	beq.n	80112f4 <rcl_action_take_result_response+0x64>
 80112e4:	f240 12f5 	movw	r2, #501	; 0x1f5
 80112e8:	f640 0337 	movw	r3, #2103	; 0x837
 80112ec:	4290      	cmp	r0, r2
 80112ee:	bf0c      	ite	eq
 80112f0:	4618      	moveq	r0, r3
 80112f2:	2001      	movne	r0, #1
 80112f4:	bd70      	pop	{r4, r5, r6, pc}
 80112f6:	f7fa ff63 	bl	800c1c0 <rcutils_reset_error>
 80112fa:	f640 0036 	movw	r0, #2102	; 0x836
 80112fe:	bd70      	pop	{r4, r5, r6, pc}
 8011300:	f640 0036 	movw	r0, #2102	; 0x836
 8011304:	bd70      	pop	{r4, r5, r6, pc}
 8011306:	200b      	movs	r0, #11
 8011308:	bd70      	pop	{r4, r5, r6, pc}
 801130a:	f640 0036 	movw	r0, #2102	; 0x836
 801130e:	4770      	bx	lr

08011310 <rcl_action_take_cancel_response>:
 8011310:	2800      	cmp	r0, #0
 8011312:	d03a      	beq.n	801138a <rcl_action_take_cancel_response+0x7a>
 8011314:	b570      	push	{r4, r5, r6, lr}
 8011316:	4604      	mov	r4, r0
 8011318:	6800      	ldr	r0, [r0, #0]
 801131a:	b388      	cbz	r0, 8011380 <rcl_action_take_cancel_response+0x70>
 801131c:	460e      	mov	r6, r1
 801131e:	4615      	mov	r5, r2
 8011320:	f7fd fe86 	bl	800f030 <rcl_client_is_valid>
 8011324:	b338      	cbz	r0, 8011376 <rcl_action_take_cancel_response+0x66>
 8011326:	6820      	ldr	r0, [r4, #0]
 8011328:	3004      	adds	r0, #4
 801132a:	f7fd fe81 	bl	800f030 <rcl_client_is_valid>
 801132e:	b310      	cbz	r0, 8011376 <rcl_action_take_cancel_response+0x66>
 8011330:	6820      	ldr	r0, [r4, #0]
 8011332:	3008      	adds	r0, #8
 8011334:	f7fd fe7c 	bl	800f030 <rcl_client_is_valid>
 8011338:	b1e8      	cbz	r0, 8011376 <rcl_action_take_cancel_response+0x66>
 801133a:	6820      	ldr	r0, [r4, #0]
 801133c:	300c      	adds	r0, #12
 801133e:	f7fe ff23 	bl	8010188 <rcl_subscription_is_valid>
 8011342:	b1c0      	cbz	r0, 8011376 <rcl_action_take_cancel_response+0x66>
 8011344:	6820      	ldr	r0, [r4, #0]
 8011346:	3010      	adds	r0, #16
 8011348:	f7fe ff1e 	bl	8010188 <rcl_subscription_is_valid>
 801134c:	b198      	cbz	r0, 8011376 <rcl_action_take_cancel_response+0x66>
 801134e:	b1d5      	cbz	r5, 8011386 <rcl_action_take_cancel_response+0x76>
 8011350:	b1ce      	cbz	r6, 8011386 <rcl_action_take_cancel_response+0x76>
 8011352:	6820      	ldr	r0, [r4, #0]
 8011354:	462a      	mov	r2, r5
 8011356:	4631      	mov	r1, r6
 8011358:	3004      	adds	r0, #4
 801135a:	f7fd fe01 	bl	800ef60 <rcl_take_response>
 801135e:	b148      	cbz	r0, 8011374 <rcl_action_take_cancel_response+0x64>
 8011360:	280a      	cmp	r0, #10
 8011362:	d007      	beq.n	8011374 <rcl_action_take_cancel_response+0x64>
 8011364:	f240 12f5 	movw	r2, #501	; 0x1f5
 8011368:	f640 0337 	movw	r3, #2103	; 0x837
 801136c:	4290      	cmp	r0, r2
 801136e:	bf0c      	ite	eq
 8011370:	4618      	moveq	r0, r3
 8011372:	2001      	movne	r0, #1
 8011374:	bd70      	pop	{r4, r5, r6, pc}
 8011376:	f7fa ff23 	bl	800c1c0 <rcutils_reset_error>
 801137a:	f640 0036 	movw	r0, #2102	; 0x836
 801137e:	bd70      	pop	{r4, r5, r6, pc}
 8011380:	f640 0036 	movw	r0, #2102	; 0x836
 8011384:	bd70      	pop	{r4, r5, r6, pc}
 8011386:	200b      	movs	r0, #11
 8011388:	bd70      	pop	{r4, r5, r6, pc}
 801138a:	f640 0036 	movw	r0, #2102	; 0x836
 801138e:	4770      	bx	lr

08011390 <rcl_action_take_feedback>:
 8011390:	2800      	cmp	r0, #0
 8011392:	d038      	beq.n	8011406 <rcl_action_take_feedback+0x76>
 8011394:	b530      	push	{r4, r5, lr}
 8011396:	4604      	mov	r4, r0
 8011398:	6800      	ldr	r0, [r0, #0]
 801139a:	b08f      	sub	sp, #60	; 0x3c
 801139c:	b378      	cbz	r0, 80113fe <rcl_action_take_feedback+0x6e>
 801139e:	460d      	mov	r5, r1
 80113a0:	f7fd fe46 	bl	800f030 <rcl_client_is_valid>
 80113a4:	b328      	cbz	r0, 80113f2 <rcl_action_take_feedback+0x62>
 80113a6:	6820      	ldr	r0, [r4, #0]
 80113a8:	3004      	adds	r0, #4
 80113aa:	f7fd fe41 	bl	800f030 <rcl_client_is_valid>
 80113ae:	b300      	cbz	r0, 80113f2 <rcl_action_take_feedback+0x62>
 80113b0:	6820      	ldr	r0, [r4, #0]
 80113b2:	3008      	adds	r0, #8
 80113b4:	f7fd fe3c 	bl	800f030 <rcl_client_is_valid>
 80113b8:	b1d8      	cbz	r0, 80113f2 <rcl_action_take_feedback+0x62>
 80113ba:	6820      	ldr	r0, [r4, #0]
 80113bc:	300c      	adds	r0, #12
 80113be:	f7fe fee3 	bl	8010188 <rcl_subscription_is_valid>
 80113c2:	b1b0      	cbz	r0, 80113f2 <rcl_action_take_feedback+0x62>
 80113c4:	6820      	ldr	r0, [r4, #0]
 80113c6:	3010      	adds	r0, #16
 80113c8:	f7fe fede 	bl	8010188 <rcl_subscription_is_valid>
 80113cc:	b188      	cbz	r0, 80113f2 <rcl_action_take_feedback+0x62>
 80113ce:	b1ed      	cbz	r5, 801140c <rcl_action_take_feedback+0x7c>
 80113d0:	6820      	ldr	r0, [r4, #0]
 80113d2:	2300      	movs	r3, #0
 80113d4:	466a      	mov	r2, sp
 80113d6:	4629      	mov	r1, r5
 80113d8:	300c      	adds	r0, #12
 80113da:	f7fe fe79 	bl	80100d0 <rcl_take>
 80113de:	b160      	cbz	r0, 80113fa <rcl_action_take_feedback+0x6a>
 80113e0:	f240 1391 	movw	r3, #401	; 0x191
 80113e4:	4298      	cmp	r0, r3
 80113e6:	d014      	beq.n	8011412 <rcl_action_take_feedback+0x82>
 80113e8:	280a      	cmp	r0, #10
 80113ea:	bf18      	it	ne
 80113ec:	2001      	movne	r0, #1
 80113ee:	b00f      	add	sp, #60	; 0x3c
 80113f0:	bd30      	pop	{r4, r5, pc}
 80113f2:	f7fa fee5 	bl	800c1c0 <rcutils_reset_error>
 80113f6:	f640 0036 	movw	r0, #2102	; 0x836
 80113fa:	b00f      	add	sp, #60	; 0x3c
 80113fc:	bd30      	pop	{r4, r5, pc}
 80113fe:	f640 0036 	movw	r0, #2102	; 0x836
 8011402:	b00f      	add	sp, #60	; 0x3c
 8011404:	bd30      	pop	{r4, r5, pc}
 8011406:	f640 0036 	movw	r0, #2102	; 0x836
 801140a:	4770      	bx	lr
 801140c:	200b      	movs	r0, #11
 801140e:	b00f      	add	sp, #60	; 0x3c
 8011410:	bd30      	pop	{r4, r5, pc}
 8011412:	f640 0037 	movw	r0, #2103	; 0x837
 8011416:	e7f0      	b.n	80113fa <rcl_action_take_feedback+0x6a>

08011418 <rcl_action_wait_set_add_action_client>:
 8011418:	2800      	cmp	r0, #0
 801141a:	d048      	beq.n	80114ae <rcl_action_wait_set_add_action_client+0x96>
 801141c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801141e:	460c      	mov	r4, r1
 8011420:	2900      	cmp	r1, #0
 8011422:	d03c      	beq.n	801149e <rcl_action_wait_set_add_action_client+0x86>
 8011424:	4605      	mov	r5, r0
 8011426:	6808      	ldr	r0, [r1, #0]
 8011428:	2800      	cmp	r0, #0
 801142a:	d038      	beq.n	801149e <rcl_action_wait_set_add_action_client+0x86>
 801142c:	4617      	mov	r7, r2
 801142e:	461e      	mov	r6, r3
 8011430:	f7fd fdfe 	bl	800f030 <rcl_client_is_valid>
 8011434:	b3b0      	cbz	r0, 80114a4 <rcl_action_wait_set_add_action_client+0x8c>
 8011436:	6820      	ldr	r0, [r4, #0]
 8011438:	3004      	adds	r0, #4
 801143a:	f7fd fdf9 	bl	800f030 <rcl_client_is_valid>
 801143e:	b388      	cbz	r0, 80114a4 <rcl_action_wait_set_add_action_client+0x8c>
 8011440:	6820      	ldr	r0, [r4, #0]
 8011442:	3008      	adds	r0, #8
 8011444:	f7fd fdf4 	bl	800f030 <rcl_client_is_valid>
 8011448:	b360      	cbz	r0, 80114a4 <rcl_action_wait_set_add_action_client+0x8c>
 801144a:	6820      	ldr	r0, [r4, #0]
 801144c:	300c      	adds	r0, #12
 801144e:	f7fe fe9b 	bl	8010188 <rcl_subscription_is_valid>
 8011452:	b338      	cbz	r0, 80114a4 <rcl_action_wait_set_add_action_client+0x8c>
 8011454:	6820      	ldr	r0, [r4, #0]
 8011456:	3010      	adds	r0, #16
 8011458:	f7fe fe96 	bl	8010188 <rcl_subscription_is_valid>
 801145c:	b310      	cbz	r0, 80114a4 <rcl_action_wait_set_add_action_client+0x8c>
 801145e:	6821      	ldr	r1, [r4, #0]
 8011460:	4628      	mov	r0, r5
 8011462:	f501 72e2 	add.w	r2, r1, #452	; 0x1c4
 8011466:	f7ff fcd1 	bl	8010e0c <rcl_wait_set_add_client>
 801146a:	b9b8      	cbnz	r0, 801149c <rcl_action_wait_set_add_action_client+0x84>
 801146c:	6821      	ldr	r1, [r4, #0]
 801146e:	4628      	mov	r0, r5
 8011470:	f501 72e4 	add.w	r2, r1, #456	; 0x1c8
 8011474:	3104      	adds	r1, #4
 8011476:	f7ff fcc9 	bl	8010e0c <rcl_wait_set_add_client>
 801147a:	b978      	cbnz	r0, 801149c <rcl_action_wait_set_add_action_client+0x84>
 801147c:	6821      	ldr	r1, [r4, #0]
 801147e:	4628      	mov	r0, r5
 8011480:	f501 72e6 	add.w	r2, r1, #460	; 0x1cc
 8011484:	3108      	adds	r1, #8
 8011486:	f7ff fcc1 	bl	8010e0c <rcl_wait_set_add_client>
 801148a:	b938      	cbnz	r0, 801149c <rcl_action_wait_set_add_action_client+0x84>
 801148c:	6821      	ldr	r1, [r4, #0]
 801148e:	4628      	mov	r0, r5
 8011490:	f501 72e8 	add.w	r2, r1, #464	; 0x1d0
 8011494:	310c      	adds	r1, #12
 8011496:	f7ff f969 	bl	801076c <rcl_wait_set_add_subscription>
 801149a:	b158      	cbz	r0, 80114b4 <rcl_action_wait_set_add_action_client+0x9c>
 801149c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801149e:	f640 0036 	movw	r0, #2102	; 0x836
 80114a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114a4:	f7fa fe8c 	bl	800c1c0 <rcutils_reset_error>
 80114a8:	f640 0036 	movw	r0, #2102	; 0x836
 80114ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114ae:	f44f 7061 	mov.w	r0, #900	; 0x384
 80114b2:	4770      	bx	lr
 80114b4:	6821      	ldr	r1, [r4, #0]
 80114b6:	4628      	mov	r0, r5
 80114b8:	f501 72ea 	add.w	r2, r1, #468	; 0x1d4
 80114bc:	3110      	adds	r1, #16
 80114be:	f7ff f955 	bl	801076c <rcl_wait_set_add_subscription>
 80114c2:	2800      	cmp	r0, #0
 80114c4:	d1ea      	bne.n	801149c <rcl_action_wait_set_add_action_client+0x84>
 80114c6:	b11f      	cbz	r7, 80114d0 <rcl_action_wait_set_add_action_client+0xb8>
 80114c8:	6823      	ldr	r3, [r4, #0]
 80114ca:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 80114ce:	603b      	str	r3, [r7, #0]
 80114d0:	2e00      	cmp	r6, #0
 80114d2:	d0e3      	beq.n	801149c <rcl_action_wait_set_add_action_client+0x84>
 80114d4:	6823      	ldr	r3, [r4, #0]
 80114d6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 80114da:	6033      	str	r3, [r6, #0]
 80114dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114de:	bf00      	nop

080114e0 <rcl_action_client_wait_set_get_entities_ready>:
 80114e0:	2800      	cmp	r0, #0
 80114e2:	d050      	beq.n	8011586 <rcl_action_client_wait_set_get_entities_ready+0xa6>
 80114e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114e8:	460c      	mov	r4, r1
 80114ea:	2900      	cmp	r1, #0
 80114ec:	d03e      	beq.n	801156c <rcl_action_client_wait_set_get_entities_ready+0x8c>
 80114ee:	4605      	mov	r5, r0
 80114f0:	6808      	ldr	r0, [r1, #0]
 80114f2:	2800      	cmp	r0, #0
 80114f4:	d03a      	beq.n	801156c <rcl_action_client_wait_set_get_entities_ready+0x8c>
 80114f6:	4616      	mov	r6, r2
 80114f8:	461f      	mov	r7, r3
 80114fa:	f7fd fd99 	bl	800f030 <rcl_client_is_valid>
 80114fe:	2800      	cmp	r0, #0
 8011500:	d038      	beq.n	8011574 <rcl_action_client_wait_set_get_entities_ready+0x94>
 8011502:	6820      	ldr	r0, [r4, #0]
 8011504:	3004      	adds	r0, #4
 8011506:	f7fd fd93 	bl	800f030 <rcl_client_is_valid>
 801150a:	2800      	cmp	r0, #0
 801150c:	d032      	beq.n	8011574 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801150e:	6820      	ldr	r0, [r4, #0]
 8011510:	3008      	adds	r0, #8
 8011512:	f7fd fd8d 	bl	800f030 <rcl_client_is_valid>
 8011516:	b368      	cbz	r0, 8011574 <rcl_action_client_wait_set_get_entities_ready+0x94>
 8011518:	6820      	ldr	r0, [r4, #0]
 801151a:	300c      	adds	r0, #12
 801151c:	f7fe fe34 	bl	8010188 <rcl_subscription_is_valid>
 8011520:	b340      	cbz	r0, 8011574 <rcl_action_client_wait_set_get_entities_ready+0x94>
 8011522:	6820      	ldr	r0, [r4, #0]
 8011524:	3010      	adds	r0, #16
 8011526:	f7fe fe2f 	bl	8010188 <rcl_subscription_is_valid>
 801152a:	b318      	cbz	r0, 8011574 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801152c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011530:	2a00      	cmp	r2, #0
 8011532:	bf18      	it	ne
 8011534:	2b00      	cmpne	r3, #0
 8011536:	9b08      	ldr	r3, [sp, #32]
 8011538:	bf0c      	ite	eq
 801153a:	2101      	moveq	r1, #1
 801153c:	2100      	movne	r1, #0
 801153e:	2b00      	cmp	r3, #0
 8011540:	bf08      	it	eq
 8011542:	f041 0101 	orreq.w	r1, r1, #1
 8011546:	2f00      	cmp	r7, #0
 8011548:	bf08      	it	eq
 801154a:	f041 0101 	orreq.w	r1, r1, #1
 801154e:	b9b9      	cbnz	r1, 8011580 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8011550:	b1b6      	cbz	r6, 8011580 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8011552:	6823      	ldr	r3, [r4, #0]
 8011554:	686c      	ldr	r4, [r5, #4]
 8011556:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	; 0x1d0
 801155a:	428a      	cmp	r2, r1
 801155c:	4610      	mov	r0, r2
 801155e:	bf38      	it	cc
 8011560:	4608      	movcc	r0, r1
 8011562:	4284      	cmp	r4, r0
 8011564:	d812      	bhi.n	801158c <rcl_action_client_wait_set_get_entities_ready+0xac>
 8011566:	2001      	movs	r0, #1
 8011568:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801156c:	f640 0036 	movw	r0, #2102	; 0x836
 8011570:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011574:	f7fa fe24 	bl	800c1c0 <rcutils_reset_error>
 8011578:	f640 0036 	movw	r0, #2102	; 0x836
 801157c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011580:	200b      	movs	r0, #11
 8011582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011586:	f44f 7061 	mov.w	r0, #900	; 0x384
 801158a:	4770      	bx	lr
 801158c:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	; 0x1c4
 8011590:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	; 0x1cc
 8011594:	45f0      	cmp	r8, lr
 8011596:	4640      	mov	r0, r8
 8011598:	69ec      	ldr	r4, [r5, #28]
 801159a:	bf38      	it	cc
 801159c:	4670      	movcc	r0, lr
 801159e:	4560      	cmp	r0, ip
 80115a0:	bf38      	it	cc
 80115a2:	4660      	movcc	r0, ip
 80115a4:	4284      	cmp	r4, r0
 80115a6:	d9de      	bls.n	8011566 <rcl_action_client_wait_set_get_entities_ready+0x86>
 80115a8:	f8d5 9018 	ldr.w	r9, [r5, #24]
 80115ac:	682d      	ldr	r5, [r5, #0]
 80115ae:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 80115b2:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 80115b6:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80115ba:	1a18      	subs	r0, r3, r0
 80115bc:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 80115c0:	f103 0c0c 	add.w	ip, r3, #12
 80115c4:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 80115c8:	fab0 f080 	clz	r0, r0
 80115cc:	eba5 050c 	sub.w	r5, r5, ip
 80115d0:	0940      	lsrs	r0, r0, #5
 80115d2:	fab5 f585 	clz	r5, r5
 80115d6:	096d      	lsrs	r5, r5, #5
 80115d8:	7035      	strb	r5, [r6, #0]
 80115da:	f103 0510 	add.w	r5, r3, #16
 80115de:	1b64      	subs	r4, r4, r5
 80115e0:	9d08      	ldr	r5, [sp, #32]
 80115e2:	fab4 f484 	clz	r4, r4
 80115e6:	0964      	lsrs	r4, r4, #5
 80115e8:	703c      	strb	r4, [r7, #0]
 80115ea:	1d1c      	adds	r4, r3, #4
 80115ec:	3308      	adds	r3, #8
 80115ee:	7028      	strb	r0, [r5, #0]
 80115f0:	1b09      	subs	r1, r1, r4
 80115f2:	2000      	movs	r0, #0
 80115f4:	1ad3      	subs	r3, r2, r3
 80115f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80115f8:	fab1 f181 	clz	r1, r1
 80115fc:	fab3 f383 	clz	r3, r3
 8011600:	0949      	lsrs	r1, r1, #5
 8011602:	095b      	lsrs	r3, r3, #5
 8011604:	7011      	strb	r1, [r2, #0]
 8011606:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011608:	7013      	strb	r3, [r2, #0]
 801160a:	e7b1      	b.n	8011570 <rcl_action_client_wait_set_get_entities_ready+0x90>

0801160c <rcl_action_take_goal_request>:
 801160c:	2800      	cmp	r0, #0
 801160e:	d039      	beq.n	8011684 <rcl_action_take_goal_request+0x78>
 8011610:	b570      	push	{r4, r5, r6, lr}
 8011612:	4604      	mov	r4, r0
 8011614:	6800      	ldr	r0, [r0, #0]
 8011616:	b380      	cbz	r0, 801167a <rcl_action_take_goal_request+0x6e>
 8011618:	460e      	mov	r6, r1
 801161a:	4615      	mov	r5, r2
 801161c:	f7fe fcb0 	bl	800ff80 <rcl_service_is_valid>
 8011620:	b330      	cbz	r0, 8011670 <rcl_action_take_goal_request+0x64>
 8011622:	6820      	ldr	r0, [r4, #0]
 8011624:	3004      	adds	r0, #4
 8011626:	f7fe fcab 	bl	800ff80 <rcl_service_is_valid>
 801162a:	b308      	cbz	r0, 8011670 <rcl_action_take_goal_request+0x64>
 801162c:	6820      	ldr	r0, [r4, #0]
 801162e:	3008      	adds	r0, #8
 8011630:	f7fe fca6 	bl	800ff80 <rcl_service_is_valid>
 8011634:	b1e0      	cbz	r0, 8011670 <rcl_action_take_goal_request+0x64>
 8011636:	6820      	ldr	r0, [r4, #0]
 8011638:	300c      	adds	r0, #12
 801163a:	f006 fa1f 	bl	8017a7c <rcl_publisher_is_valid>
 801163e:	b1b8      	cbz	r0, 8011670 <rcl_action_take_goal_request+0x64>
 8011640:	6820      	ldr	r0, [r4, #0]
 8011642:	3010      	adds	r0, #16
 8011644:	f006 fa1a 	bl	8017a7c <rcl_publisher_is_valid>
 8011648:	b190      	cbz	r0, 8011670 <rcl_action_take_goal_request+0x64>
 801164a:	b1cd      	cbz	r5, 8011680 <rcl_action_take_goal_request+0x74>
 801164c:	b1c6      	cbz	r6, 8011680 <rcl_action_take_goal_request+0x74>
 801164e:	462a      	mov	r2, r5
 8011650:	4631      	mov	r1, r6
 8011652:	6820      	ldr	r0, [r4, #0]
 8011654:	f7fe fc14 	bl	800fe80 <rcl_take_request>
 8011658:	b148      	cbz	r0, 801166e <rcl_action_take_goal_request+0x62>
 801165a:	280a      	cmp	r0, #10
 801165c:	d007      	beq.n	801166e <rcl_action_take_goal_request+0x62>
 801165e:	f240 2259 	movw	r2, #601	; 0x259
 8011662:	f640 0399 	movw	r3, #2201	; 0x899
 8011666:	4290      	cmp	r0, r2
 8011668:	bf0c      	ite	eq
 801166a:	4618      	moveq	r0, r3
 801166c:	2001      	movne	r0, #1
 801166e:	bd70      	pop	{r4, r5, r6, pc}
 8011670:	f7fa fda6 	bl	800c1c0 <rcutils_reset_error>
 8011674:	f640 0098 	movw	r0, #2200	; 0x898
 8011678:	bd70      	pop	{r4, r5, r6, pc}
 801167a:	f640 0098 	movw	r0, #2200	; 0x898
 801167e:	bd70      	pop	{r4, r5, r6, pc}
 8011680:	200b      	movs	r0, #11
 8011682:	bd70      	pop	{r4, r5, r6, pc}
 8011684:	f640 0098 	movw	r0, #2200	; 0x898
 8011688:	4770      	bx	lr
 801168a:	bf00      	nop

0801168c <rcl_action_send_goal_response>:
 801168c:	b388      	cbz	r0, 80116f2 <rcl_action_send_goal_response+0x66>
 801168e:	b570      	push	{r4, r5, r6, lr}
 8011690:	4604      	mov	r4, r0
 8011692:	6800      	ldr	r0, [r0, #0]
 8011694:	b340      	cbz	r0, 80116e8 <rcl_action_send_goal_response+0x5c>
 8011696:	460e      	mov	r6, r1
 8011698:	4615      	mov	r5, r2
 801169a:	f7fe fc71 	bl	800ff80 <rcl_service_is_valid>
 801169e:	b1f0      	cbz	r0, 80116de <rcl_action_send_goal_response+0x52>
 80116a0:	6820      	ldr	r0, [r4, #0]
 80116a2:	3004      	adds	r0, #4
 80116a4:	f7fe fc6c 	bl	800ff80 <rcl_service_is_valid>
 80116a8:	b1c8      	cbz	r0, 80116de <rcl_action_send_goal_response+0x52>
 80116aa:	6820      	ldr	r0, [r4, #0]
 80116ac:	3008      	adds	r0, #8
 80116ae:	f7fe fc67 	bl	800ff80 <rcl_service_is_valid>
 80116b2:	b1a0      	cbz	r0, 80116de <rcl_action_send_goal_response+0x52>
 80116b4:	6820      	ldr	r0, [r4, #0]
 80116b6:	300c      	adds	r0, #12
 80116b8:	f006 f9e0 	bl	8017a7c <rcl_publisher_is_valid>
 80116bc:	b178      	cbz	r0, 80116de <rcl_action_send_goal_response+0x52>
 80116be:	6820      	ldr	r0, [r4, #0]
 80116c0:	3010      	adds	r0, #16
 80116c2:	f006 f9db 	bl	8017a7c <rcl_publisher_is_valid>
 80116c6:	b150      	cbz	r0, 80116de <rcl_action_send_goal_response+0x52>
 80116c8:	b18d      	cbz	r5, 80116ee <rcl_action_send_goal_response+0x62>
 80116ca:	b186      	cbz	r6, 80116ee <rcl_action_send_goal_response+0x62>
 80116cc:	462a      	mov	r2, r5
 80116ce:	4631      	mov	r1, r6
 80116d0:	6820      	ldr	r0, [r4, #0]
 80116d2:	f7fe fc25 	bl	800ff20 <rcl_send_response>
 80116d6:	3800      	subs	r0, #0
 80116d8:	bf18      	it	ne
 80116da:	2001      	movne	r0, #1
 80116dc:	bd70      	pop	{r4, r5, r6, pc}
 80116de:	f7fa fd6f 	bl	800c1c0 <rcutils_reset_error>
 80116e2:	f640 0098 	movw	r0, #2200	; 0x898
 80116e6:	bd70      	pop	{r4, r5, r6, pc}
 80116e8:	f640 0098 	movw	r0, #2200	; 0x898
 80116ec:	bd70      	pop	{r4, r5, r6, pc}
 80116ee:	200b      	movs	r0, #11
 80116f0:	bd70      	pop	{r4, r5, r6, pc}
 80116f2:	f640 0098 	movw	r0, #2200	; 0x898
 80116f6:	4770      	bx	lr

080116f8 <rcl_action_take_result_request>:
 80116f8:	2800      	cmp	r0, #0
 80116fa:	d03a      	beq.n	8011772 <rcl_action_take_result_request+0x7a>
 80116fc:	b570      	push	{r4, r5, r6, lr}
 80116fe:	4604      	mov	r4, r0
 8011700:	6800      	ldr	r0, [r0, #0]
 8011702:	b388      	cbz	r0, 8011768 <rcl_action_take_result_request+0x70>
 8011704:	460e      	mov	r6, r1
 8011706:	4615      	mov	r5, r2
 8011708:	f7fe fc3a 	bl	800ff80 <rcl_service_is_valid>
 801170c:	b338      	cbz	r0, 801175e <rcl_action_take_result_request+0x66>
 801170e:	6820      	ldr	r0, [r4, #0]
 8011710:	3004      	adds	r0, #4
 8011712:	f7fe fc35 	bl	800ff80 <rcl_service_is_valid>
 8011716:	b310      	cbz	r0, 801175e <rcl_action_take_result_request+0x66>
 8011718:	6820      	ldr	r0, [r4, #0]
 801171a:	3008      	adds	r0, #8
 801171c:	f7fe fc30 	bl	800ff80 <rcl_service_is_valid>
 8011720:	b1e8      	cbz	r0, 801175e <rcl_action_take_result_request+0x66>
 8011722:	6820      	ldr	r0, [r4, #0]
 8011724:	300c      	adds	r0, #12
 8011726:	f006 f9a9 	bl	8017a7c <rcl_publisher_is_valid>
 801172a:	b1c0      	cbz	r0, 801175e <rcl_action_take_result_request+0x66>
 801172c:	6820      	ldr	r0, [r4, #0]
 801172e:	3010      	adds	r0, #16
 8011730:	f006 f9a4 	bl	8017a7c <rcl_publisher_is_valid>
 8011734:	b198      	cbz	r0, 801175e <rcl_action_take_result_request+0x66>
 8011736:	b1d5      	cbz	r5, 801176e <rcl_action_take_result_request+0x76>
 8011738:	b1ce      	cbz	r6, 801176e <rcl_action_take_result_request+0x76>
 801173a:	6820      	ldr	r0, [r4, #0]
 801173c:	462a      	mov	r2, r5
 801173e:	4631      	mov	r1, r6
 8011740:	3008      	adds	r0, #8
 8011742:	f7fe fb9d 	bl	800fe80 <rcl_take_request>
 8011746:	b148      	cbz	r0, 801175c <rcl_action_take_result_request+0x64>
 8011748:	280a      	cmp	r0, #10
 801174a:	d007      	beq.n	801175c <rcl_action_take_result_request+0x64>
 801174c:	f240 2259 	movw	r2, #601	; 0x259
 8011750:	f640 0399 	movw	r3, #2201	; 0x899
 8011754:	4290      	cmp	r0, r2
 8011756:	bf0c      	ite	eq
 8011758:	4618      	moveq	r0, r3
 801175a:	2001      	movne	r0, #1
 801175c:	bd70      	pop	{r4, r5, r6, pc}
 801175e:	f7fa fd2f 	bl	800c1c0 <rcutils_reset_error>
 8011762:	f640 0098 	movw	r0, #2200	; 0x898
 8011766:	bd70      	pop	{r4, r5, r6, pc}
 8011768:	f640 0098 	movw	r0, #2200	; 0x898
 801176c:	bd70      	pop	{r4, r5, r6, pc}
 801176e:	200b      	movs	r0, #11
 8011770:	bd70      	pop	{r4, r5, r6, pc}
 8011772:	f640 0098 	movw	r0, #2200	; 0x898
 8011776:	4770      	bx	lr

08011778 <rcl_action_take_cancel_request>:
 8011778:	2800      	cmp	r0, #0
 801177a:	d03a      	beq.n	80117f2 <rcl_action_take_cancel_request+0x7a>
 801177c:	b570      	push	{r4, r5, r6, lr}
 801177e:	4604      	mov	r4, r0
 8011780:	6800      	ldr	r0, [r0, #0]
 8011782:	b388      	cbz	r0, 80117e8 <rcl_action_take_cancel_request+0x70>
 8011784:	460e      	mov	r6, r1
 8011786:	4615      	mov	r5, r2
 8011788:	f7fe fbfa 	bl	800ff80 <rcl_service_is_valid>
 801178c:	b338      	cbz	r0, 80117de <rcl_action_take_cancel_request+0x66>
 801178e:	6820      	ldr	r0, [r4, #0]
 8011790:	3004      	adds	r0, #4
 8011792:	f7fe fbf5 	bl	800ff80 <rcl_service_is_valid>
 8011796:	b310      	cbz	r0, 80117de <rcl_action_take_cancel_request+0x66>
 8011798:	6820      	ldr	r0, [r4, #0]
 801179a:	3008      	adds	r0, #8
 801179c:	f7fe fbf0 	bl	800ff80 <rcl_service_is_valid>
 80117a0:	b1e8      	cbz	r0, 80117de <rcl_action_take_cancel_request+0x66>
 80117a2:	6820      	ldr	r0, [r4, #0]
 80117a4:	300c      	adds	r0, #12
 80117a6:	f006 f969 	bl	8017a7c <rcl_publisher_is_valid>
 80117aa:	b1c0      	cbz	r0, 80117de <rcl_action_take_cancel_request+0x66>
 80117ac:	6820      	ldr	r0, [r4, #0]
 80117ae:	3010      	adds	r0, #16
 80117b0:	f006 f964 	bl	8017a7c <rcl_publisher_is_valid>
 80117b4:	b198      	cbz	r0, 80117de <rcl_action_take_cancel_request+0x66>
 80117b6:	b1d5      	cbz	r5, 80117ee <rcl_action_take_cancel_request+0x76>
 80117b8:	b1ce      	cbz	r6, 80117ee <rcl_action_take_cancel_request+0x76>
 80117ba:	6820      	ldr	r0, [r4, #0]
 80117bc:	462a      	mov	r2, r5
 80117be:	4631      	mov	r1, r6
 80117c0:	3004      	adds	r0, #4
 80117c2:	f7fe fb5d 	bl	800fe80 <rcl_take_request>
 80117c6:	b148      	cbz	r0, 80117dc <rcl_action_take_cancel_request+0x64>
 80117c8:	280a      	cmp	r0, #10
 80117ca:	d007      	beq.n	80117dc <rcl_action_take_cancel_request+0x64>
 80117cc:	f240 2259 	movw	r2, #601	; 0x259
 80117d0:	f640 0399 	movw	r3, #2201	; 0x899
 80117d4:	4290      	cmp	r0, r2
 80117d6:	bf0c      	ite	eq
 80117d8:	4618      	moveq	r0, r3
 80117da:	2001      	movne	r0, #1
 80117dc:	bd70      	pop	{r4, r5, r6, pc}
 80117de:	f7fa fcef 	bl	800c1c0 <rcutils_reset_error>
 80117e2:	f640 0098 	movw	r0, #2200	; 0x898
 80117e6:	bd70      	pop	{r4, r5, r6, pc}
 80117e8:	f640 0098 	movw	r0, #2200	; 0x898
 80117ec:	bd70      	pop	{r4, r5, r6, pc}
 80117ee:	200b      	movs	r0, #11
 80117f0:	bd70      	pop	{r4, r5, r6, pc}
 80117f2:	f640 0098 	movw	r0, #2200	; 0x898
 80117f6:	4770      	bx	lr

080117f8 <rcl_action_send_cancel_response>:
 80117f8:	b390      	cbz	r0, 8011860 <rcl_action_send_cancel_response+0x68>
 80117fa:	b570      	push	{r4, r5, r6, lr}
 80117fc:	4604      	mov	r4, r0
 80117fe:	6800      	ldr	r0, [r0, #0]
 8011800:	b348      	cbz	r0, 8011856 <rcl_action_send_cancel_response+0x5e>
 8011802:	460e      	mov	r6, r1
 8011804:	4615      	mov	r5, r2
 8011806:	f7fe fbbb 	bl	800ff80 <rcl_service_is_valid>
 801180a:	b1f8      	cbz	r0, 801184c <rcl_action_send_cancel_response+0x54>
 801180c:	6820      	ldr	r0, [r4, #0]
 801180e:	3004      	adds	r0, #4
 8011810:	f7fe fbb6 	bl	800ff80 <rcl_service_is_valid>
 8011814:	b1d0      	cbz	r0, 801184c <rcl_action_send_cancel_response+0x54>
 8011816:	6820      	ldr	r0, [r4, #0]
 8011818:	3008      	adds	r0, #8
 801181a:	f7fe fbb1 	bl	800ff80 <rcl_service_is_valid>
 801181e:	b1a8      	cbz	r0, 801184c <rcl_action_send_cancel_response+0x54>
 8011820:	6820      	ldr	r0, [r4, #0]
 8011822:	300c      	adds	r0, #12
 8011824:	f006 f92a 	bl	8017a7c <rcl_publisher_is_valid>
 8011828:	b180      	cbz	r0, 801184c <rcl_action_send_cancel_response+0x54>
 801182a:	6820      	ldr	r0, [r4, #0]
 801182c:	3010      	adds	r0, #16
 801182e:	f006 f925 	bl	8017a7c <rcl_publisher_is_valid>
 8011832:	b158      	cbz	r0, 801184c <rcl_action_send_cancel_response+0x54>
 8011834:	b195      	cbz	r5, 801185c <rcl_action_send_cancel_response+0x64>
 8011836:	b18e      	cbz	r6, 801185c <rcl_action_send_cancel_response+0x64>
 8011838:	6820      	ldr	r0, [r4, #0]
 801183a:	462a      	mov	r2, r5
 801183c:	4631      	mov	r1, r6
 801183e:	3004      	adds	r0, #4
 8011840:	f7fe fb6e 	bl	800ff20 <rcl_send_response>
 8011844:	3800      	subs	r0, #0
 8011846:	bf18      	it	ne
 8011848:	2001      	movne	r0, #1
 801184a:	bd70      	pop	{r4, r5, r6, pc}
 801184c:	f7fa fcb8 	bl	800c1c0 <rcutils_reset_error>
 8011850:	f640 0098 	movw	r0, #2200	; 0x898
 8011854:	bd70      	pop	{r4, r5, r6, pc}
 8011856:	f640 0098 	movw	r0, #2200	; 0x898
 801185a:	bd70      	pop	{r4, r5, r6, pc}
 801185c:	200b      	movs	r0, #11
 801185e:	bd70      	pop	{r4, r5, r6, pc}
 8011860:	f640 0098 	movw	r0, #2200	; 0x898
 8011864:	4770      	bx	lr
 8011866:	bf00      	nop

08011868 <rcl_action_wait_set_add_action_server>:
 8011868:	2800      	cmp	r0, #0
 801186a:	d04d      	beq.n	8011908 <rcl_action_wait_set_add_action_server+0xa0>
 801186c:	b570      	push	{r4, r5, r6, lr}
 801186e:	460c      	mov	r4, r1
 8011870:	b159      	cbz	r1, 801188a <rcl_action_wait_set_add_action_server+0x22>
 8011872:	4605      	mov	r5, r0
 8011874:	6808      	ldr	r0, [r1, #0]
 8011876:	b140      	cbz	r0, 801188a <rcl_action_wait_set_add_action_server+0x22>
 8011878:	4616      	mov	r6, r2
 801187a:	f7fe fb81 	bl	800ff80 <rcl_service_is_valid>
 801187e:	b120      	cbz	r0, 801188a <rcl_action_wait_set_add_action_server+0x22>
 8011880:	6820      	ldr	r0, [r4, #0]
 8011882:	3004      	adds	r0, #4
 8011884:	f7fe fb7c 	bl	800ff80 <rcl_service_is_valid>
 8011888:	b910      	cbnz	r0, 8011890 <rcl_action_wait_set_add_action_server+0x28>
 801188a:	f640 0098 	movw	r0, #2200	; 0x898
 801188e:	bd70      	pop	{r4, r5, r6, pc}
 8011890:	6820      	ldr	r0, [r4, #0]
 8011892:	3008      	adds	r0, #8
 8011894:	f7fe fb74 	bl	800ff80 <rcl_service_is_valid>
 8011898:	2800      	cmp	r0, #0
 801189a:	d0f6      	beq.n	801188a <rcl_action_wait_set_add_action_server+0x22>
 801189c:	6820      	ldr	r0, [r4, #0]
 801189e:	300c      	adds	r0, #12
 80118a0:	f006 f904 	bl	8017aac <rcl_publisher_is_valid_except_context>
 80118a4:	2800      	cmp	r0, #0
 80118a6:	d0f0      	beq.n	801188a <rcl_action_wait_set_add_action_server+0x22>
 80118a8:	6820      	ldr	r0, [r4, #0]
 80118aa:	3010      	adds	r0, #16
 80118ac:	f006 f8fe 	bl	8017aac <rcl_publisher_is_valid_except_context>
 80118b0:	2800      	cmp	r0, #0
 80118b2:	d0ea      	beq.n	801188a <rcl_action_wait_set_add_action_server+0x22>
 80118b4:	6821      	ldr	r1, [r4, #0]
 80118b6:	4628      	mov	r0, r5
 80118b8:	f501 72ee 	add.w	r2, r1, #476	; 0x1dc
 80118bc:	f7ff fad2 	bl	8010e64 <rcl_wait_set_add_service>
 80118c0:	2800      	cmp	r0, #0
 80118c2:	d1e4      	bne.n	801188e <rcl_action_wait_set_add_action_server+0x26>
 80118c4:	6821      	ldr	r1, [r4, #0]
 80118c6:	4628      	mov	r0, r5
 80118c8:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
 80118cc:	3104      	adds	r1, #4
 80118ce:	f7ff fac9 	bl	8010e64 <rcl_wait_set_add_service>
 80118d2:	2800      	cmp	r0, #0
 80118d4:	d1db      	bne.n	801188e <rcl_action_wait_set_add_action_server+0x26>
 80118d6:	6821      	ldr	r1, [r4, #0]
 80118d8:	4628      	mov	r0, r5
 80118da:	f501 72f2 	add.w	r2, r1, #484	; 0x1e4
 80118de:	3108      	adds	r1, #8
 80118e0:	f7ff fac0 	bl	8010e64 <rcl_wait_set_add_service>
 80118e4:	2800      	cmp	r0, #0
 80118e6:	d1d2      	bne.n	801188e <rcl_action_wait_set_add_action_server+0x26>
 80118e8:	6821      	ldr	r1, [r4, #0]
 80118ea:	4628      	mov	r0, r5
 80118ec:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
 80118f0:	3114      	adds	r1, #20
 80118f2:	f7ff fa5b 	bl	8010dac <rcl_wait_set_add_timer>
 80118f6:	2800      	cmp	r0, #0
 80118f8:	d1c9      	bne.n	801188e <rcl_action_wait_set_add_action_server+0x26>
 80118fa:	2e00      	cmp	r6, #0
 80118fc:	d0c7      	beq.n	801188e <rcl_action_wait_set_add_action_server+0x26>
 80118fe:	6823      	ldr	r3, [r4, #0]
 8011900:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8011904:	6033      	str	r3, [r6, #0]
 8011906:	bd70      	pop	{r4, r5, r6, pc}
 8011908:	f44f 7061 	mov.w	r0, #900	; 0x384
 801190c:	4770      	bx	lr
 801190e:	bf00      	nop

08011910 <rcl_action_server_wait_set_get_entities_ready>:
 8011910:	2800      	cmp	r0, #0
 8011912:	d067      	beq.n	80119e4 <rcl_action_server_wait_set_get_entities_ready+0xd4>
 8011914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011918:	460c      	mov	r4, r1
 801191a:	b161      	cbz	r1, 8011936 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801191c:	4605      	mov	r5, r0
 801191e:	6808      	ldr	r0, [r1, #0]
 8011920:	b148      	cbz	r0, 8011936 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8011922:	4616      	mov	r6, r2
 8011924:	4698      	mov	r8, r3
 8011926:	f7fe fb2b 	bl	800ff80 <rcl_service_is_valid>
 801192a:	b120      	cbz	r0, 8011936 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801192c:	6820      	ldr	r0, [r4, #0]
 801192e:	3004      	adds	r0, #4
 8011930:	f7fe fb26 	bl	800ff80 <rcl_service_is_valid>
 8011934:	b918      	cbnz	r0, 801193e <rcl_action_server_wait_set_get_entities_ready+0x2e>
 8011936:	f640 0098 	movw	r0, #2200	; 0x898
 801193a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801193e:	6820      	ldr	r0, [r4, #0]
 8011940:	3008      	adds	r0, #8
 8011942:	f7fe fb1d 	bl	800ff80 <rcl_service_is_valid>
 8011946:	2800      	cmp	r0, #0
 8011948:	d0f5      	beq.n	8011936 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801194a:	6820      	ldr	r0, [r4, #0]
 801194c:	300c      	adds	r0, #12
 801194e:	f006 f8ad 	bl	8017aac <rcl_publisher_is_valid_except_context>
 8011952:	2800      	cmp	r0, #0
 8011954:	d0ef      	beq.n	8011936 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8011956:	6820      	ldr	r0, [r4, #0]
 8011958:	3010      	adds	r0, #16
 801195a:	f006 f8a7 	bl	8017aac <rcl_publisher_is_valid_except_context>
 801195e:	2800      	cmp	r0, #0
 8011960:	d0e9      	beq.n	8011936 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8011962:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011966:	2a00      	cmp	r2, #0
 8011968:	bf18      	it	ne
 801196a:	2b00      	cmpne	r3, #0
 801196c:	bf0c      	ite	eq
 801196e:	2101      	moveq	r1, #1
 8011970:	2100      	movne	r1, #0
 8011972:	f1b8 0f00 	cmp.w	r8, #0
 8011976:	bf08      	it	eq
 8011978:	f041 0101 	orreq.w	r1, r1, #1
 801197c:	bba9      	cbnz	r1, 80119ea <rcl_action_server_wait_set_get_entities_ready+0xda>
 801197e:	b3a6      	cbz	r6, 80119ea <rcl_action_server_wait_set_get_entities_ready+0xda>
 8011980:	6821      	ldr	r1, [r4, #0]
 8011982:	2000      	movs	r0, #0
 8011984:	692c      	ldr	r4, [r5, #16]
 8011986:	f8d1 21e8 	ldr.w	r2, [r1, #488]	; 0x1e8
 801198a:	6a2f      	ldr	r7, [r5, #32]
 801198c:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011990:	f8d1 41dc 	ldr.w	r4, [r1, #476]	; 0x1dc
 8011994:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
 8011998:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 801199c:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 80119a0:	1a64      	subs	r4, r4, r1
 80119a2:	f8d1 31e4 	ldr.w	r3, [r1, #484]	; 0x1e4
 80119a6:	fab4 f484 	clz	r4, r4
 80119aa:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80119ae:	0964      	lsrs	r4, r4, #5
 80119b0:	7034      	strb	r4, [r6, #0]
 80119b2:	1d0c      	adds	r4, r1, #4
 80119b4:	1b2c      	subs	r4, r5, r4
 80119b6:	fab4 f484 	clz	r4, r4
 80119ba:	0964      	lsrs	r4, r4, #5
 80119bc:	f888 4000 	strb.w	r4, [r8]
 80119c0:	f101 0408 	add.w	r4, r1, #8
 80119c4:	1b1b      	subs	r3, r3, r4
 80119c6:	9c06      	ldr	r4, [sp, #24]
 80119c8:	fab3 f383 	clz	r3, r3
 80119cc:	095b      	lsrs	r3, r3, #5
 80119ce:	7023      	strb	r3, [r4, #0]
 80119d0:	f101 0314 	add.w	r3, r1, #20
 80119d4:	1ad3      	subs	r3, r2, r3
 80119d6:	9a07      	ldr	r2, [sp, #28]
 80119d8:	fab3 f383 	clz	r3, r3
 80119dc:	095b      	lsrs	r3, r3, #5
 80119de:	7013      	strb	r3, [r2, #0]
 80119e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119e4:	f44f 7061 	mov.w	r0, #900	; 0x384
 80119e8:	4770      	bx	lr
 80119ea:	200b      	movs	r0, #11
 80119ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080119f0 <_execute_event_handler>:
 80119f0:	2002      	movs	r0, #2
 80119f2:	4770      	bx	lr

080119f4 <_cancel_goal_event_handler>:
 80119f4:	2003      	movs	r0, #3
 80119f6:	4770      	bx	lr

080119f8 <_succeed_event_handler>:
 80119f8:	2004      	movs	r0, #4
 80119fa:	4770      	bx	lr

080119fc <_abort_event_handler>:
 80119fc:	2006      	movs	r0, #6
 80119fe:	4770      	bx	lr

08011a00 <_canceled_event_handler>:
 8011a00:	2005      	movs	r0, #5
 8011a02:	4770      	bx	lr

08011a04 <rcl_action_transition_goal_state>:
 8011a04:	b2c2      	uxtb	r2, r0
 8011a06:	2a06      	cmp	r2, #6
 8011a08:	d810      	bhi.n	8011a2c <rcl_action_transition_goal_state+0x28>
 8011a0a:	2904      	cmp	r1, #4
 8011a0c:	d80e      	bhi.n	8011a2c <rcl_action_transition_goal_state+0x28>
 8011a0e:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8011a12:	b410      	push	{r4}
 8011a14:	1853      	adds	r3, r2, r1
 8011a16:	4c06      	ldr	r4, [pc, #24]	; (8011a30 <rcl_action_transition_goal_state+0x2c>)
 8011a18:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8011a1c:	b113      	cbz	r3, 8011a24 <rcl_action_transition_goal_state+0x20>
 8011a1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a22:	4718      	bx	r3
 8011a24:	2000      	movs	r0, #0
 8011a26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a2a:	4770      	bx	lr
 8011a2c:	2000      	movs	r0, #0
 8011a2e:	4770      	bx	lr
 8011a30:	0801b694 	.word	0x0801b694

08011a34 <rcl_action_get_zero_initialized_cancel_response>:
 8011a34:	b510      	push	{r4, lr}
 8011a36:	4c07      	ldr	r4, [pc, #28]	; (8011a54 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8011a38:	4686      	mov	lr, r0
 8011a3a:	4684      	mov	ip, r0
 8011a3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011a3e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011a42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011a44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011a48:	6823      	ldr	r3, [r4, #0]
 8011a4a:	4670      	mov	r0, lr
 8011a4c:	f8cc 3000 	str.w	r3, [ip]
 8011a50:	bd10      	pop	{r4, pc}
 8011a52:	bf00      	nop
 8011a54:	0801b720 	.word	0x0801b720

08011a58 <rclc_action_send_result_request>:
 8011a58:	b1d0      	cbz	r0, 8011a90 <rclc_action_send_result_request+0x38>
 8011a5a:	4684      	mov	ip, r0
 8011a5c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8011a60:	b500      	push	{lr}
 8011a62:	b087      	sub	sp, #28
 8011a64:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8011a68:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8011a6c:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8011a70:	f10d 0e08 	add.w	lr, sp, #8
 8011a74:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011a78:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8011a7c:	f10c 0240 	add.w	r2, ip, #64	; 0x40
 8011a80:	a902      	add	r1, sp, #8
 8011a82:	3010      	adds	r0, #16
 8011a84:	f7ff fbcc 	bl	8011220 <rcl_action_send_result_request>
 8011a88:	b920      	cbnz	r0, 8011a94 <rclc_action_send_result_request+0x3c>
 8011a8a:	b007      	add	sp, #28
 8011a8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011a90:	200b      	movs	r0, #11
 8011a92:	4770      	bx	lr
 8011a94:	9001      	str	r0, [sp, #4]
 8011a96:	f7fa fb93 	bl	800c1c0 <rcutils_reset_error>
 8011a9a:	9801      	ldr	r0, [sp, #4]
 8011a9c:	b007      	add	sp, #28
 8011a9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011aa2:	bf00      	nop

08011aa4 <rclc_action_take_goal_handle>:
 8011aa4:	b160      	cbz	r0, 8011ac0 <rclc_action_take_goal_handle+0x1c>
 8011aa6:	6883      	ldr	r3, [r0, #8]
 8011aa8:	b143      	cbz	r3, 8011abc <rclc_action_take_goal_handle+0x18>
 8011aaa:	6819      	ldr	r1, [r3, #0]
 8011aac:	2200      	movs	r2, #0
 8011aae:	6081      	str	r1, [r0, #8]
 8011ab0:	721a      	strb	r2, [r3, #8]
 8011ab2:	68c1      	ldr	r1, [r0, #12]
 8011ab4:	621a      	str	r2, [r3, #32]
 8011ab6:	849a      	strh	r2, [r3, #36]	; 0x24
 8011ab8:	6019      	str	r1, [r3, #0]
 8011aba:	60c3      	str	r3, [r0, #12]
 8011abc:	4618      	mov	r0, r3
 8011abe:	4770      	bx	lr
 8011ac0:	4603      	mov	r3, r0
 8011ac2:	e7fb      	b.n	8011abc <rclc_action_take_goal_handle+0x18>

08011ac4 <rclc_action_remove_used_goal_handle>:
 8011ac4:	b180      	cbz	r0, 8011ae8 <rclc_action_remove_used_goal_handle+0x24>
 8011ac6:	b179      	cbz	r1, 8011ae8 <rclc_action_remove_used_goal_handle+0x24>
 8011ac8:	68c3      	ldr	r3, [r0, #12]
 8011aca:	4299      	cmp	r1, r3
 8011acc:	d00d      	beq.n	8011aea <rclc_action_remove_used_goal_handle+0x26>
 8011ace:	b12b      	cbz	r3, 8011adc <rclc_action_remove_used_goal_handle+0x18>
 8011ad0:	681a      	ldr	r2, [r3, #0]
 8011ad2:	4291      	cmp	r1, r2
 8011ad4:	d003      	beq.n	8011ade <rclc_action_remove_used_goal_handle+0x1a>
 8011ad6:	4613      	mov	r3, r2
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d1f9      	bne.n	8011ad0 <rclc_action_remove_used_goal_handle+0xc>
 8011adc:	4770      	bx	lr
 8011ade:	680a      	ldr	r2, [r1, #0]
 8011ae0:	601a      	str	r2, [r3, #0]
 8011ae2:	6883      	ldr	r3, [r0, #8]
 8011ae4:	600b      	str	r3, [r1, #0]
 8011ae6:	6081      	str	r1, [r0, #8]
 8011ae8:	4770      	bx	lr
 8011aea:	680b      	ldr	r3, [r1, #0]
 8011aec:	60c3      	str	r3, [r0, #12]
 8011aee:	e7f8      	b.n	8011ae2 <rclc_action_remove_used_goal_handle+0x1e>

08011af0 <rclc_action_find_goal_handle_by_uuid>:
 8011af0:	b538      	push	{r3, r4, r5, lr}
 8011af2:	b181      	cbz	r1, 8011b16 <rclc_action_find_goal_handle_by_uuid+0x26>
 8011af4:	b178      	cbz	r0, 8011b16 <rclc_action_find_goal_handle_by_uuid+0x26>
 8011af6:	68c4      	ldr	r4, [r0, #12]
 8011af8:	460d      	mov	r5, r1
 8011afa:	b914      	cbnz	r4, 8011b02 <rclc_action_find_goal_handle_by_uuid+0x12>
 8011afc:	e009      	b.n	8011b12 <rclc_action_find_goal_handle_by_uuid+0x22>
 8011afe:	6824      	ldr	r4, [r4, #0]
 8011b00:	b13c      	cbz	r4, 8011b12 <rclc_action_find_goal_handle_by_uuid+0x22>
 8011b02:	f104 0009 	add.w	r0, r4, #9
 8011b06:	2210      	movs	r2, #16
 8011b08:	4629      	mov	r1, r5
 8011b0a:	f007 fd69 	bl	80195e0 <memcmp>
 8011b0e:	2800      	cmp	r0, #0
 8011b10:	d1f5      	bne.n	8011afe <rclc_action_find_goal_handle_by_uuid+0xe>
 8011b12:	4620      	mov	r0, r4
 8011b14:	bd38      	pop	{r3, r4, r5, pc}
 8011b16:	2400      	movs	r4, #0
 8011b18:	4620      	mov	r0, r4
 8011b1a:	bd38      	pop	{r3, r4, r5, pc}

08011b1c <rclc_action_find_first_handle_by_status>:
 8011b1c:	b140      	cbz	r0, 8011b30 <rclc_action_find_first_handle_by_status+0x14>
 8011b1e:	68c0      	ldr	r0, [r0, #12]
 8011b20:	b910      	cbnz	r0, 8011b28 <rclc_action_find_first_handle_by_status+0xc>
 8011b22:	e005      	b.n	8011b30 <rclc_action_find_first_handle_by_status+0x14>
 8011b24:	6800      	ldr	r0, [r0, #0]
 8011b26:	b118      	cbz	r0, 8011b30 <rclc_action_find_first_handle_by_status+0x14>
 8011b28:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8011b2c:	428b      	cmp	r3, r1
 8011b2e:	d1f9      	bne.n	8011b24 <rclc_action_find_first_handle_by_status+0x8>
 8011b30:	4770      	bx	lr
 8011b32:	bf00      	nop

08011b34 <rclc_action_find_first_terminated_handle>:
 8011b34:	b140      	cbz	r0, 8011b48 <rclc_action_find_first_terminated_handle+0x14>
 8011b36:	68c0      	ldr	r0, [r0, #12]
 8011b38:	b910      	cbnz	r0, 8011b40 <rclc_action_find_first_terminated_handle+0xc>
 8011b3a:	e005      	b.n	8011b48 <rclc_action_find_first_terminated_handle+0x14>
 8011b3c:	6800      	ldr	r0, [r0, #0]
 8011b3e:	b118      	cbz	r0, 8011b48 <rclc_action_find_first_terminated_handle+0x14>
 8011b40:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8011b44:	2b03      	cmp	r3, #3
 8011b46:	ddf9      	ble.n	8011b3c <rclc_action_find_first_terminated_handle+0x8>
 8011b48:	4770      	bx	lr
 8011b4a:	bf00      	nop

08011b4c <rclc_action_find_handle_by_goal_request_sequence_number>:
 8011b4c:	b170      	cbz	r0, 8011b6c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8011b4e:	68c0      	ldr	r0, [r0, #12]
 8011b50:	b160      	cbz	r0, 8011b6c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8011b52:	b410      	push	{r4}
 8011b54:	e001      	b.n	8011b5a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8011b56:	6800      	ldr	r0, [r0, #0]
 8011b58:	b128      	cbz	r0, 8011b66 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8011b5a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	; 0x28
 8011b5e:	4299      	cmp	r1, r3
 8011b60:	bf08      	it	eq
 8011b62:	4294      	cmpeq	r4, r2
 8011b64:	d1f7      	bne.n	8011b56 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8011b66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b6a:	4770      	bx	lr
 8011b6c:	4770      	bx	lr
 8011b6e:	bf00      	nop

08011b70 <rclc_action_find_handle_by_result_request_sequence_number>:
 8011b70:	b170      	cbz	r0, 8011b90 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8011b72:	68c0      	ldr	r0, [r0, #12]
 8011b74:	b160      	cbz	r0, 8011b90 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8011b76:	b410      	push	{r4}
 8011b78:	e001      	b.n	8011b7e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8011b7a:	6800      	ldr	r0, [r0, #0]
 8011b7c:	b128      	cbz	r0, 8011b8a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8011b7e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	; 0x40
 8011b82:	4299      	cmp	r1, r3
 8011b84:	bf08      	it	eq
 8011b86:	4294      	cmpeq	r4, r2
 8011b88:	d1f7      	bne.n	8011b7a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8011b8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b8e:	4770      	bx	lr
 8011b90:	4770      	bx	lr
 8011b92:	bf00      	nop

08011b94 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8011b94:	b170      	cbz	r0, 8011bb4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8011b96:	68c0      	ldr	r0, [r0, #12]
 8011b98:	b160      	cbz	r0, 8011bb4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8011b9a:	b410      	push	{r4}
 8011b9c:	e001      	b.n	8011ba2 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8011b9e:	6800      	ldr	r0, [r0, #0]
 8011ba0:	b128      	cbz	r0, 8011bae <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8011ba2:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	; 0x58
 8011ba6:	4299      	cmp	r1, r3
 8011ba8:	bf08      	it	eq
 8011baa:	4294      	cmpeq	r4, r2
 8011bac:	d1f7      	bne.n	8011b9e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8011bae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011bb2:	4770      	bx	lr
 8011bb4:	4770      	bx	lr
 8011bb6:	bf00      	nop

08011bb8 <rclc_action_find_first_handle_with_goal_response>:
 8011bb8:	b140      	cbz	r0, 8011bcc <rclc_action_find_first_handle_with_goal_response+0x14>
 8011bba:	68c0      	ldr	r0, [r0, #12]
 8011bbc:	b910      	cbnz	r0, 8011bc4 <rclc_action_find_first_handle_with_goal_response+0xc>
 8011bbe:	e005      	b.n	8011bcc <rclc_action_find_first_handle_with_goal_response+0x14>
 8011bc0:	6800      	ldr	r0, [r0, #0]
 8011bc2:	b118      	cbz	r0, 8011bcc <rclc_action_find_first_handle_with_goal_response+0x14>
 8011bc4:	f890 3020 	ldrb.w	r3, [r0, #32]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d0f9      	beq.n	8011bc0 <rclc_action_find_first_handle_with_goal_response+0x8>
 8011bcc:	4770      	bx	lr
 8011bce:	bf00      	nop

08011bd0 <rclc_action_find_first_handle_with_result_response>:
 8011bd0:	b140      	cbz	r0, 8011be4 <rclc_action_find_first_handle_with_result_response+0x14>
 8011bd2:	68c0      	ldr	r0, [r0, #12]
 8011bd4:	b910      	cbnz	r0, 8011bdc <rclc_action_find_first_handle_with_result_response+0xc>
 8011bd6:	e005      	b.n	8011be4 <rclc_action_find_first_handle_with_result_response+0x14>
 8011bd8:	6800      	ldr	r0, [r0, #0]
 8011bda:	b118      	cbz	r0, 8011be4 <rclc_action_find_first_handle_with_result_response+0x14>
 8011bdc:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d0f9      	beq.n	8011bd8 <rclc_action_find_first_handle_with_result_response+0x8>
 8011be4:	4770      	bx	lr
 8011be6:	bf00      	nop

08011be8 <rclc_action_server_response_goal_request>:
 8011be8:	b198      	cbz	r0, 8011c12 <rclc_action_server_response_goal_request+0x2a>
 8011bea:	2200      	movs	r2, #0
 8011bec:	460b      	mov	r3, r1
 8011bee:	f100 0128 	add.w	r1, r0, #40	; 0x28
 8011bf2:	b510      	push	{r4, lr}
 8011bf4:	6844      	ldr	r4, [r0, #4]
 8011bf6:	b086      	sub	sp, #24
 8011bf8:	f104 0010 	add.w	r0, r4, #16
 8011bfc:	9205      	str	r2, [sp, #20]
 8011bfe:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8011c02:	aa03      	add	r2, sp, #12
 8011c04:	f88d 300c 	strb.w	r3, [sp, #12]
 8011c08:	f7ff fd40 	bl	801168c <rcl_action_send_goal_response>
 8011c0c:	b918      	cbnz	r0, 8011c16 <rclc_action_server_response_goal_request+0x2e>
 8011c0e:	b006      	add	sp, #24
 8011c10:	bd10      	pop	{r4, pc}
 8011c12:	200b      	movs	r0, #11
 8011c14:	4770      	bx	lr
 8011c16:	9001      	str	r0, [sp, #4]
 8011c18:	f7fa fad2 	bl	800c1c0 <rcutils_reset_error>
 8011c1c:	9801      	ldr	r0, [sp, #4]
 8011c1e:	b006      	add	sp, #24
 8011c20:	bd10      	pop	{r4, pc}
 8011c22:	bf00      	nop
 8011c24:	0000      	movs	r0, r0
	...

08011c28 <rclc_action_server_goal_cancel_accept>:
 8011c28:	b310      	cbz	r0, 8011c70 <rclc_action_server_goal_cancel_accept+0x48>
 8011c2a:	b510      	push	{r4, lr}
 8011c2c:	b090      	sub	sp, #64	; 0x40
 8011c2e:	4604      	mov	r4, r0
 8011c30:	a806      	add	r0, sp, #24
 8011c32:	f7ff feff 	bl	8011a34 <rcl_action_get_zero_initialized_cancel_response>
 8011c36:	2300      	movs	r3, #0
 8011c38:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8011c3c:	46ec      	mov	ip, sp
 8011c3e:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8011c42:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8011c46:	f88d 3018 	strb.w	r3, [sp, #24]
 8011c4a:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8011c4e:	f8cd d01c 	str.w	sp, [sp, #28]
 8011c52:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011c56:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8011c78 <rclc_action_server_goal_cancel_accept+0x50>
 8011c5a:	6860      	ldr	r0, [r4, #4]
 8011c5c:	aa06      	add	r2, sp, #24
 8011c5e:	f104 0158 	add.w	r1, r4, #88	; 0x58
 8011c62:	3010      	adds	r0, #16
 8011c64:	ed8d 7b08 	vstr	d7, [sp, #32]
 8011c68:	f7ff fdc6 	bl	80117f8 <rcl_action_send_cancel_response>
 8011c6c:	b010      	add	sp, #64	; 0x40
 8011c6e:	bd10      	pop	{r4, pc}
 8011c70:	200b      	movs	r0, #11
 8011c72:	4770      	bx	lr
 8011c74:	f3af 8000 	nop.w
 8011c78:	00000001 	.word	0x00000001
 8011c7c:	00000001 	.word	0x00000001

08011c80 <rclc_action_server_goal_cancel_reject>:
 8011c80:	b082      	sub	sp, #8
 8011c82:	b530      	push	{r4, r5, lr}
 8011c84:	b08b      	sub	sp, #44	; 0x2c
 8011c86:	ac0e      	add	r4, sp, #56	; 0x38
 8011c88:	e884 000c 	stmia.w	r4, {r2, r3}
 8011c8c:	b188      	cbz	r0, 8011cb2 <rclc_action_server_goal_cancel_reject+0x32>
 8011c8e:	4604      	mov	r4, r0
 8011c90:	a801      	add	r0, sp, #4
 8011c92:	460d      	mov	r5, r1
 8011c94:	f7ff fece 	bl	8011a34 <rcl_action_get_zero_initialized_cancel_response>
 8011c98:	aa01      	add	r2, sp, #4
 8011c9a:	a90e      	add	r1, sp, #56	; 0x38
 8011c9c:	f104 0010 	add.w	r0, r4, #16
 8011ca0:	f88d 5004 	strb.w	r5, [sp, #4]
 8011ca4:	f7ff fda8 	bl	80117f8 <rcl_action_send_cancel_response>
 8011ca8:	b00b      	add	sp, #44	; 0x2c
 8011caa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011cae:	b002      	add	sp, #8
 8011cb0:	4770      	bx	lr
 8011cb2:	200b      	movs	r0, #11
 8011cb4:	b00b      	add	sp, #44	; 0x2c
 8011cb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011cba:	b002      	add	sp, #8
 8011cbc:	4770      	bx	lr
 8011cbe:	bf00      	nop

08011cc0 <__atomic_load_8>:
 8011cc0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8011cc4:	4a16      	ldr	r2, [pc, #88]	; (8011d20 <__atomic_load_8+0x60>)
 8011cc6:	4b17      	ldr	r3, [pc, #92]	; (8011d24 <__atomic_load_8+0x64>)
 8011cc8:	f04f 0c01 	mov.w	ip, #1
 8011ccc:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8011cd0:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8011cd4:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8011cd8:	fb02 f101 	mul.w	r1, r2, r1
 8011cdc:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8011ce0:	fba3 2301 	umull	r2, r3, r3, r1
 8011ce4:	091b      	lsrs	r3, r3, #4
 8011ce6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8011cea:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8011cee:	b4d0      	push	{r4, r6, r7}
 8011cf0:	1ac9      	subs	r1, r1, r3
 8011cf2:	4c0d      	ldr	r4, [pc, #52]	; (8011d28 <__atomic_load_8+0x68>)
 8011cf4:	1862      	adds	r2, r4, r1
 8011cf6:	e8d2 3f4f 	ldrexb	r3, [r2]
 8011cfa:	e8c2 cf46 	strexb	r6, ip, [r2]
 8011cfe:	2e00      	cmp	r6, #0
 8011d00:	d1f9      	bne.n	8011cf6 <__atomic_load_8+0x36>
 8011d02:	b2db      	uxtb	r3, r3
 8011d04:	f3bf 8f5b 	dmb	ish
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d1f4      	bne.n	8011cf6 <__atomic_load_8+0x36>
 8011d0c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8011d10:	f3bf 8f5b 	dmb	ish
 8011d14:	5463      	strb	r3, [r4, r1]
 8011d16:	4630      	mov	r0, r6
 8011d18:	4639      	mov	r1, r7
 8011d1a:	bcd0      	pop	{r4, r6, r7}
 8011d1c:	4770      	bx	lr
 8011d1e:	bf00      	nop
 8011d20:	27d4eb2d 	.word	0x27d4eb2d
 8011d24:	b21642c9 	.word	0xb21642c9
 8011d28:	2000bd90 	.word	0x2000bd90

08011d2c <__atomic_store_8>:
 8011d2c:	b570      	push	{r4, r5, r6, lr}
 8011d2e:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 8011d32:	4916      	ldr	r1, [pc, #88]	; (8011d8c <__atomic_store_8+0x60>)
 8011d34:	4c16      	ldr	r4, [pc, #88]	; (8011d90 <__atomic_store_8+0x64>)
 8011d36:	f08e 0e3d 	eor.w	lr, lr, #61	; 0x3d
 8011d3a:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8011d3e:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 8011d42:	fb01 fe0e 	mul.w	lr, r1, lr
 8011d46:	4913      	ldr	r1, [pc, #76]	; (8011d94 <__atomic_store_8+0x68>)
 8011d48:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 8011d4c:	fba1 510e 	umull	r5, r1, r1, lr
 8011d50:	f04f 0501 	mov.w	r5, #1
 8011d54:	0909      	lsrs	r1, r1, #4
 8011d56:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 8011d5a:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 8011d5e:	ebae 0e01 	sub.w	lr, lr, r1
 8011d62:	eb04 0c0e 	add.w	ip, r4, lr
 8011d66:	e8dc 1f4f 	ldrexb	r1, [ip]
 8011d6a:	e8cc 5f46 	strexb	r6, r5, [ip]
 8011d6e:	2e00      	cmp	r6, #0
 8011d70:	d1f9      	bne.n	8011d66 <__atomic_store_8+0x3a>
 8011d72:	b2c9      	uxtb	r1, r1
 8011d74:	f3bf 8f5b 	dmb	ish
 8011d78:	2900      	cmp	r1, #0
 8011d7a:	d1f4      	bne.n	8011d66 <__atomic_store_8+0x3a>
 8011d7c:	e9c0 2300 	strd	r2, r3, [r0]
 8011d80:	f3bf 8f5b 	dmb	ish
 8011d84:	f804 100e 	strb.w	r1, [r4, lr]
 8011d88:	bd70      	pop	{r4, r5, r6, pc}
 8011d8a:	bf00      	nop
 8011d8c:	27d4eb2d 	.word	0x27d4eb2d
 8011d90:	2000bd90 	.word	0x2000bd90
 8011d94:	b21642c9 	.word	0xb21642c9

08011d98 <__atomic_exchange_8>:
 8011d98:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8011d9c:	4917      	ldr	r1, [pc, #92]	; (8011dfc <__atomic_exchange_8+0x64>)
 8011d9e:	f08c 0c3d 	eor.w	ip, ip, #61	; 0x3d
 8011da2:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8011da6:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8011daa:	fb01 fc0c 	mul.w	ip, r1, ip
 8011dae:	4914      	ldr	r1, [pc, #80]	; (8011e00 <__atomic_exchange_8+0x68>)
 8011db0:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8011db4:	b570      	push	{r4, r5, r6, lr}
 8011db6:	4686      	mov	lr, r0
 8011db8:	fba1 010c 	umull	r0, r1, r1, ip
 8011dbc:	4d11      	ldr	r5, [pc, #68]	; (8011e04 <__atomic_exchange_8+0x6c>)
 8011dbe:	f04f 0001 	mov.w	r0, #1
 8011dc2:	0909      	lsrs	r1, r1, #4
 8011dc4:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8011dc8:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8011dcc:	ebac 0c01 	sub.w	ip, ip, r1
 8011dd0:	eb05 010c 	add.w	r1, r5, ip
 8011dd4:	e8d1 4f4f 	ldrexb	r4, [r1]
 8011dd8:	e8c1 0f46 	strexb	r6, r0, [r1]
 8011ddc:	2e00      	cmp	r6, #0
 8011dde:	d1f9      	bne.n	8011dd4 <__atomic_exchange_8+0x3c>
 8011de0:	b2e4      	uxtb	r4, r4
 8011de2:	f3bf 8f5b 	dmb	ish
 8011de6:	2c00      	cmp	r4, #0
 8011de8:	d1f4      	bne.n	8011dd4 <__atomic_exchange_8+0x3c>
 8011dea:	e9de 0100 	ldrd	r0, r1, [lr]
 8011dee:	e9ce 2300 	strd	r2, r3, [lr]
 8011df2:	f3bf 8f5b 	dmb	ish
 8011df6:	f805 400c 	strb.w	r4, [r5, ip]
 8011dfa:	bd70      	pop	{r4, r5, r6, pc}
 8011dfc:	27d4eb2d 	.word	0x27d4eb2d
 8011e00:	b21642c9 	.word	0xb21642c9
 8011e04:	2000bd90 	.word	0x2000bd90

08011e08 <rcutils_get_env>:
 8011e08:	b168      	cbz	r0, 8011e26 <rcutils_get_env+0x1e>
 8011e0a:	b510      	push	{r4, lr}
 8011e0c:	460c      	mov	r4, r1
 8011e0e:	b129      	cbz	r1, 8011e1c <rcutils_get_env+0x14>
 8011e10:	f007 f850 	bl	8018eb4 <getenv>
 8011e14:	b120      	cbz	r0, 8011e20 <rcutils_get_env+0x18>
 8011e16:	6020      	str	r0, [r4, #0]
 8011e18:	2000      	movs	r0, #0
 8011e1a:	bd10      	pop	{r4, pc}
 8011e1c:	4803      	ldr	r0, [pc, #12]	; (8011e2c <rcutils_get_env+0x24>)
 8011e1e:	bd10      	pop	{r4, pc}
 8011e20:	4b03      	ldr	r3, [pc, #12]	; (8011e30 <rcutils_get_env+0x28>)
 8011e22:	6023      	str	r3, [r4, #0]
 8011e24:	bd10      	pop	{r4, pc}
 8011e26:	4803      	ldr	r0, [pc, #12]	; (8011e34 <rcutils_get_env+0x2c>)
 8011e28:	4770      	bx	lr
 8011e2a:	bf00      	nop
 8011e2c:	0801b760 	.word	0x0801b760
 8011e30:	0801b884 	.word	0x0801b884
 8011e34:	0801b744 	.word	0x0801b744

08011e38 <rcutils_is_directory>:
 8011e38:	2000      	movs	r0, #0
 8011e3a:	4770      	bx	lr

08011e3c <rcutils_join_path>:
 8011e3c:	b082      	sub	sp, #8
 8011e3e:	2000      	movs	r0, #0
 8011e40:	e88d 000c 	stmia.w	sp, {r2, r3}
 8011e44:	b002      	add	sp, #8
 8011e46:	4770      	bx	lr

08011e48 <rcutils_to_native_path>:
 8011e48:	b084      	sub	sp, #16
 8011e4a:	2000      	movs	r0, #0
 8011e4c:	f10d 0c04 	add.w	ip, sp, #4
 8011e50:	b004      	add	sp, #16
 8011e52:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8011e56:	4770      	bx	lr

08011e58 <rcutils_format_string_limit>:
 8011e58:	b40f      	push	{r0, r1, r2, r3}
 8011e5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e5c:	b083      	sub	sp, #12
 8011e5e:	ac08      	add	r4, sp, #32
 8011e60:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8011e62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8011e66:	b326      	cbz	r6, 8011eb2 <rcutils_format_string_limit+0x5a>
 8011e68:	a808      	add	r0, sp, #32
 8011e6a:	f7fa f985 	bl	800c178 <rcutils_allocator_is_valid>
 8011e6e:	b300      	cbz	r0, 8011eb2 <rcutils_format_string_limit+0x5a>
 8011e70:	2100      	movs	r1, #0
 8011e72:	ab0f      	add	r3, sp, #60	; 0x3c
 8011e74:	4632      	mov	r2, r6
 8011e76:	4608      	mov	r0, r1
 8011e78:	e9cd 3300 	strd	r3, r3, [sp]
 8011e7c:	f000 f906 	bl	801208c <rcutils_vsnprintf>
 8011e80:	1c43      	adds	r3, r0, #1
 8011e82:	4605      	mov	r5, r0
 8011e84:	d015      	beq.n	8011eb2 <rcutils_format_string_limit+0x5a>
 8011e86:	1c47      	adds	r7, r0, #1
 8011e88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011e8a:	429f      	cmp	r7, r3
 8011e8c:	d901      	bls.n	8011e92 <rcutils_format_string_limit+0x3a>
 8011e8e:	1e5d      	subs	r5, r3, #1
 8011e90:	461f      	mov	r7, r3
 8011e92:	9b08      	ldr	r3, [sp, #32]
 8011e94:	4638      	mov	r0, r7
 8011e96:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011e98:	4798      	blx	r3
 8011e9a:	4604      	mov	r4, r0
 8011e9c:	b148      	cbz	r0, 8011eb2 <rcutils_format_string_limit+0x5a>
 8011e9e:	4632      	mov	r2, r6
 8011ea0:	4639      	mov	r1, r7
 8011ea2:	9b01      	ldr	r3, [sp, #4]
 8011ea4:	f000 f8f2 	bl	801208c <rcutils_vsnprintf>
 8011ea8:	2800      	cmp	r0, #0
 8011eaa:	db09      	blt.n	8011ec0 <rcutils_format_string_limit+0x68>
 8011eac:	2300      	movs	r3, #0
 8011eae:	5563      	strb	r3, [r4, r5]
 8011eb0:	e000      	b.n	8011eb4 <rcutils_format_string_limit+0x5c>
 8011eb2:	2400      	movs	r4, #0
 8011eb4:	4620      	mov	r0, r4
 8011eb6:	b003      	add	sp, #12
 8011eb8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011ebc:	b004      	add	sp, #16
 8011ebe:	4770      	bx	lr
 8011ec0:	4620      	mov	r0, r4
 8011ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ec4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011ec6:	2400      	movs	r4, #0
 8011ec8:	4798      	blx	r3
 8011eca:	e7f3      	b.n	8011eb4 <rcutils_format_string_limit+0x5c>

08011ecc <rcutils_repl_str>:
 8011ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ed0:	ed2d 8b02 	vpush	{d8}
 8011ed4:	b087      	sub	sp, #28
 8011ed6:	2600      	movs	r6, #0
 8011ed8:	4680      	mov	r8, r0
 8011eda:	468a      	mov	sl, r1
 8011edc:	9000      	str	r0, [sp, #0]
 8011ede:	4608      	mov	r0, r1
 8011ee0:	ee08 2a10 	vmov	s16, r2
 8011ee4:	4699      	mov	r9, r3
 8011ee6:	2510      	movs	r5, #16
 8011ee8:	f7ee fa0a 	bl	8000300 <strlen>
 8011eec:	4637      	mov	r7, r6
 8011eee:	46b3      	mov	fp, r6
 8011ef0:	9001      	str	r0, [sp, #4]
 8011ef2:	e01e      	b.n	8011f32 <rcutils_repl_str+0x66>
 8011ef4:	f10b 0b01 	add.w	fp, fp, #1
 8011ef8:	9b01      	ldr	r3, [sp, #4]
 8011efa:	455e      	cmp	r6, fp
 8011efc:	eb04 0803 	add.w	r8, r4, r3
 8011f00:	d211      	bcs.n	8011f26 <rcutils_repl_str+0x5a>
 8011f02:	442e      	add	r6, r5
 8011f04:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8011f08:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8011f0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011f10:	00b1      	lsls	r1, r6, #2
 8011f12:	4798      	blx	r3
 8011f14:	2800      	cmp	r0, #0
 8011f16:	f000 8088 	beq.w	801202a <rcutils_repl_str+0x15e>
 8011f1a:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8011f1e:	4607      	mov	r7, r0
 8011f20:	bf28      	it	cs
 8011f22:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8011f26:	9a00      	ldr	r2, [sp, #0]
 8011f28:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 8011f2c:	1aa4      	subs	r4, r4, r2
 8011f2e:	f843 4c04 	str.w	r4, [r3, #-4]
 8011f32:	4651      	mov	r1, sl
 8011f34:	4640      	mov	r0, r8
 8011f36:	f007 fbb7 	bl	80196a8 <strstr>
 8011f3a:	4604      	mov	r4, r0
 8011f3c:	4638      	mov	r0, r7
 8011f3e:	2c00      	cmp	r4, #0
 8011f40:	d1d8      	bne.n	8011ef4 <rcutils_repl_str+0x28>
 8011f42:	4640      	mov	r0, r8
 8011f44:	f7ee f9dc 	bl	8000300 <strlen>
 8011f48:	9b00      	ldr	r3, [sp, #0]
 8011f4a:	eba8 0803 	sub.w	r8, r8, r3
 8011f4e:	eb08 0400 	add.w	r4, r8, r0
 8011f52:	9402      	str	r4, [sp, #8]
 8011f54:	f1bb 0f00 	cmp.w	fp, #0
 8011f58:	d045      	beq.n	8011fe6 <rcutils_repl_str+0x11a>
 8011f5a:	ee18 0a10 	vmov	r0, s16
 8011f5e:	f7ee f9cf 	bl	8000300 <strlen>
 8011f62:	9a01      	ldr	r2, [sp, #4]
 8011f64:	4606      	mov	r6, r0
 8011f66:	f8d9 3000 	ldr.w	r3, [r9]
 8011f6a:	1a82      	subs	r2, r0, r2
 8011f6c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8011f70:	fb0b 4202 	mla	r2, fp, r2, r4
 8011f74:	1c50      	adds	r0, r2, #1
 8011f76:	9205      	str	r2, [sp, #20]
 8011f78:	4798      	blx	r3
 8011f7a:	4682      	mov	sl, r0
 8011f7c:	2800      	cmp	r0, #0
 8011f7e:	d054      	beq.n	801202a <rcutils_repl_str+0x15e>
 8011f80:	683a      	ldr	r2, [r7, #0]
 8011f82:	463d      	mov	r5, r7
 8011f84:	9900      	ldr	r1, [sp, #0]
 8011f86:	2401      	movs	r4, #1
 8011f88:	f007 fcc9 	bl	801991e <memcpy>
 8011f8c:	683b      	ldr	r3, [r7, #0]
 8011f8e:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 8011f92:	eb0a 0803 	add.w	r8, sl, r3
 8011f96:	ee18 7a10 	vmov	r7, s16
 8011f9a:	f8dd a000 	ldr.w	sl, [sp]
 8011f9e:	f8cd 9000 	str.w	r9, [sp]
 8011fa2:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011fa6:	4632      	mov	r2, r6
 8011fa8:	4639      	mov	r1, r7
 8011faa:	4640      	mov	r0, r8
 8011fac:	44b0      	add	r8, r6
 8011fae:	f007 fcb6 	bl	801991e <memcpy>
 8011fb2:	f855 2b04 	ldr.w	r2, [r5], #4
 8011fb6:	45a3      	cmp	fp, r4
 8011fb8:	444a      	add	r2, r9
 8011fba:	eb0a 0102 	add.w	r1, sl, r2
 8011fbe:	d02a      	beq.n	8012016 <rcutils_repl_str+0x14a>
 8011fc0:	6828      	ldr	r0, [r5, #0]
 8011fc2:	1a82      	subs	r2, r0, r2
 8011fc4:	4640      	mov	r0, r8
 8011fc6:	4490      	add	r8, r2
 8011fc8:	f007 fca9 	bl	801991e <memcpy>
 8011fcc:	1c62      	adds	r2, r4, #1
 8011fce:	45a3      	cmp	fp, r4
 8011fd0:	4614      	mov	r4, r2
 8011fd2:	d8e8      	bhi.n	8011fa6 <rcutils_repl_str+0xda>
 8011fd4:	f8dd 9000 	ldr.w	r9, [sp]
 8011fd8:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8011fdc:	2300      	movs	r3, #0
 8011fde:	9a05      	ldr	r2, [sp, #20]
 8011fe0:	f80a 3002 	strb.w	r3, [sl, r2]
 8011fe4:	e00b      	b.n	8011ffe <rcutils_repl_str+0x132>
 8011fe6:	4620      	mov	r0, r4
 8011fe8:	f8d9 3000 	ldr.w	r3, [r9]
 8011fec:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8011ff0:	3001      	adds	r0, #1
 8011ff2:	4798      	blx	r3
 8011ff4:	4682      	mov	sl, r0
 8011ff6:	b110      	cbz	r0, 8011ffe <rcutils_repl_str+0x132>
 8011ff8:	9900      	ldr	r1, [sp, #0]
 8011ffa:	f007 fc88 	bl	801990e <strcpy>
 8011ffe:	4638      	mov	r0, r7
 8012000:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8012004:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8012008:	4798      	blx	r3
 801200a:	4650      	mov	r0, sl
 801200c:	b007      	add	sp, #28
 801200e:	ecbd 8b02 	vpop	{d8}
 8012012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012016:	9b02      	ldr	r3, [sp, #8]
 8012018:	4640      	mov	r0, r8
 801201a:	f8dd 9000 	ldr.w	r9, [sp]
 801201e:	1a9a      	subs	r2, r3, r2
 8012020:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8012024:	f007 fc7b 	bl	801991e <memcpy>
 8012028:	e7d8      	b.n	8011fdc <rcutils_repl_str+0x110>
 801202a:	f04f 0a00 	mov.w	sl, #0
 801202e:	e7e6      	b.n	8011ffe <rcutils_repl_str+0x132>

08012030 <rcutils_snprintf>:
 8012030:	b40c      	push	{r2, r3}
 8012032:	b530      	push	{r4, r5, lr}
 8012034:	b083      	sub	sp, #12
 8012036:	ab06      	add	r3, sp, #24
 8012038:	f853 2b04 	ldr.w	r2, [r3], #4
 801203c:	9301      	str	r3, [sp, #4]
 801203e:	b1e2      	cbz	r2, 801207a <rcutils_snprintf+0x4a>
 8012040:	fab0 f480 	clz	r4, r0
 8012044:	fab1 f581 	clz	r5, r1
 8012048:	ea50 0c01 	orrs.w	ip, r0, r1
 801204c:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8012050:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8012054:	d008      	beq.n	8012068 <rcutils_snprintf+0x38>
 8012056:	b984      	cbnz	r4, 801207a <rcutils_snprintf+0x4a>
 8012058:	b97d      	cbnz	r5, 801207a <rcutils_snprintf+0x4a>
 801205a:	f007 fab3 	bl	80195c4 <vsniprintf>
 801205e:	b003      	add	sp, #12
 8012060:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012064:	b002      	add	sp, #8
 8012066:	4770      	bx	lr
 8012068:	4661      	mov	r1, ip
 801206a:	4660      	mov	r0, ip
 801206c:	f007 faaa 	bl	80195c4 <vsniprintf>
 8012070:	b003      	add	sp, #12
 8012072:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012076:	b002      	add	sp, #8
 8012078:	4770      	bx	lr
 801207a:	f007 fc1b 	bl	80198b4 <__errno>
 801207e:	2216      	movs	r2, #22
 8012080:	4603      	mov	r3, r0
 8012082:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012086:	601a      	str	r2, [r3, #0]
 8012088:	e7e9      	b.n	801205e <rcutils_snprintf+0x2e>
 801208a:	bf00      	nop

0801208c <rcutils_vsnprintf>:
 801208c:	b570      	push	{r4, r5, r6, lr}
 801208e:	b1b2      	cbz	r2, 80120be <rcutils_vsnprintf+0x32>
 8012090:	fab0 f480 	clz	r4, r0
 8012094:	fab1 f581 	clz	r5, r1
 8012098:	ea50 0c01 	orrs.w	ip, r0, r1
 801209c:	ea4f 1454 	mov.w	r4, r4, lsr #5
 80120a0:	ea4f 1555 	mov.w	r5, r5, lsr #5
 80120a4:	d005      	beq.n	80120b2 <rcutils_vsnprintf+0x26>
 80120a6:	b954      	cbnz	r4, 80120be <rcutils_vsnprintf+0x32>
 80120a8:	b94d      	cbnz	r5, 80120be <rcutils_vsnprintf+0x32>
 80120aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80120ae:	f007 ba89 	b.w	80195c4 <vsniprintf>
 80120b2:	4661      	mov	r1, ip
 80120b4:	4660      	mov	r0, ip
 80120b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80120ba:	f007 ba83 	b.w	80195c4 <vsniprintf>
 80120be:	f007 fbf9 	bl	80198b4 <__errno>
 80120c2:	2316      	movs	r3, #22
 80120c4:	6003      	str	r3, [r0, #0]
 80120c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80120ca:	bd70      	pop	{r4, r5, r6, pc}

080120cc <rcutils_strdup>:
 80120cc:	b084      	sub	sp, #16
 80120ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120d0:	ac07      	add	r4, sp, #28
 80120d2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80120d4:	4605      	mov	r5, r0
 80120d6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80120da:	b1d0      	cbz	r0, 8012112 <rcutils_strdup+0x46>
 80120dc:	460c      	mov	r4, r1
 80120de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80120e2:	2100      	movs	r1, #0
 80120e4:	f7ee f8bc 	bl	8000260 <memchr>
 80120e8:	b180      	cbz	r0, 801210c <rcutils_strdup+0x40>
 80120ea:	1b46      	subs	r6, r0, r5
 80120ec:	1c70      	adds	r0, r6, #1
 80120ee:	4639      	mov	r1, r7
 80120f0:	47a0      	blx	r4
 80120f2:	4604      	mov	r4, r0
 80120f4:	b128      	cbz	r0, 8012102 <rcutils_strdup+0x36>
 80120f6:	4632      	mov	r2, r6
 80120f8:	4629      	mov	r1, r5
 80120fa:	f007 fc10 	bl	801991e <memcpy>
 80120fe:	2300      	movs	r3, #0
 8012100:	55a3      	strb	r3, [r4, r6]
 8012102:	4620      	mov	r0, r4
 8012104:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012108:	b004      	add	sp, #16
 801210a:	4770      	bx	lr
 801210c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8012110:	e7ed      	b.n	80120ee <rcutils_strdup+0x22>
 8012112:	4604      	mov	r4, r0
 8012114:	e7f5      	b.n	8012102 <rcutils_strdup+0x36>
 8012116:	bf00      	nop

08012118 <rcutils_strndup>:
 8012118:	b082      	sub	sp, #8
 801211a:	b570      	push	{r4, r5, r6, lr}
 801211c:	ac04      	add	r4, sp, #16
 801211e:	4606      	mov	r6, r0
 8012120:	e884 000c 	stmia.w	r4, {r2, r3}
 8012124:	b1b8      	cbz	r0, 8012156 <rcutils_strndup+0x3e>
 8012126:	460c      	mov	r4, r1
 8012128:	460a      	mov	r2, r1
 801212a:	2100      	movs	r1, #0
 801212c:	f7ee f898 	bl	8000260 <memchr>
 8012130:	b100      	cbz	r0, 8012134 <rcutils_strndup+0x1c>
 8012132:	1b84      	subs	r4, r0, r6
 8012134:	9b04      	ldr	r3, [sp, #16]
 8012136:	1c60      	adds	r0, r4, #1
 8012138:	9908      	ldr	r1, [sp, #32]
 801213a:	4798      	blx	r3
 801213c:	4605      	mov	r5, r0
 801213e:	b128      	cbz	r0, 801214c <rcutils_strndup+0x34>
 8012140:	4622      	mov	r2, r4
 8012142:	4631      	mov	r1, r6
 8012144:	f007 fbeb 	bl	801991e <memcpy>
 8012148:	2300      	movs	r3, #0
 801214a:	552b      	strb	r3, [r5, r4]
 801214c:	4628      	mov	r0, r5
 801214e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012152:	b002      	add	sp, #8
 8012154:	4770      	bx	lr
 8012156:	4605      	mov	r5, r0
 8012158:	e7f8      	b.n	801214c <rcutils_strndup+0x34>
 801215a:	bf00      	nop

0801215c <rcutils_get_zero_initialized_string_map>:
 801215c:	2000      	movs	r0, #0
 801215e:	4b01      	ldr	r3, [pc, #4]	; (8012164 <rcutils_get_zero_initialized_string_map+0x8>)
 8012160:	6018      	str	r0, [r3, #0]
 8012162:	4770      	bx	lr
 8012164:	2000bda8 	.word	0x2000bda8

08012168 <rcutils_string_map_reserve>:
 8012168:	2800      	cmp	r0, #0
 801216a:	d03e      	beq.n	80121ea <rcutils_string_map_reserve+0x82>
 801216c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801216e:	6805      	ldr	r5, [r0, #0]
 8012170:	4606      	mov	r6, r0
 8012172:	460c      	mov	r4, r1
 8012174:	b12d      	cbz	r5, 8012182 <rcutils_string_map_reserve+0x1a>
 8012176:	68ab      	ldr	r3, [r5, #8]
 8012178:	42a3      	cmp	r3, r4
 801217a:	d904      	bls.n	8012186 <rcutils_string_map_reserve+0x1e>
 801217c:	461c      	mov	r4, r3
 801217e:	2d00      	cmp	r5, #0
 8012180:	d1f9      	bne.n	8012176 <rcutils_string_map_reserve+0xe>
 8012182:	201f      	movs	r0, #31
 8012184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012186:	686b      	ldr	r3, [r5, #4]
 8012188:	42a3      	cmp	r3, r4
 801218a:	d02a      	beq.n	80121e2 <rcutils_string_map_reserve+0x7a>
 801218c:	69e9      	ldr	r1, [r5, #28]
 801218e:	b304      	cbz	r4, 80121d2 <rcutils_string_map_reserve+0x6a>
 8012190:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
 8012194:	d227      	bcs.n	80121e6 <rcutils_string_map_reserve+0x7e>
 8012196:	00e7      	lsls	r7, r4, #3
 8012198:	460a      	mov	r2, r1
 801219a:	696b      	ldr	r3, [r5, #20]
 801219c:	6828      	ldr	r0, [r5, #0]
 801219e:	4639      	mov	r1, r7
 80121a0:	4798      	blx	r3
 80121a2:	b300      	cbz	r0, 80121e6 <rcutils_string_map_reserve+0x7e>
 80121a4:	6835      	ldr	r5, [r6, #0]
 80121a6:	686a      	ldr	r2, [r5, #4]
 80121a8:	6028      	str	r0, [r5, #0]
 80121aa:	42a2      	cmp	r2, r4
 80121ac:	d216      	bcs.n	80121dc <rcutils_string_map_reserve+0x74>
 80121ae:	43d1      	mvns	r1, r2
 80121b0:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
 80121b4:	4421      	add	r1, r4
 80121b6:	2909      	cmp	r1, #9
 80121b8:	d919      	bls.n	80121ee <rcutils_string_map_reserve+0x86>
 80121ba:	0759      	lsls	r1, r3, #29
 80121bc:	d117      	bne.n	80121ee <rcutils_string_map_reserve+0x86>
 80121be:	1aa1      	subs	r1, r4, r2
 80121c0:	2600      	movs	r6, #0
 80121c2:	2200      	movs	r2, #0
 80121c4:	2700      	movs	r7, #0
 80121c6:	3201      	adds	r2, #1
 80121c8:	4291      	cmp	r1, r2
 80121ca:	e8e3 6702 	strd	r6, r7, [r3], #8
 80121ce:	d8fa      	bhi.n	80121c6 <rcutils_string_map_reserve+0x5e>
 80121d0:	e004      	b.n	80121dc <rcutils_string_map_reserve+0x74>
 80121d2:	692b      	ldr	r3, [r5, #16]
 80121d4:	6828      	ldr	r0, [r5, #0]
 80121d6:	4798      	blx	r3
 80121d8:	6835      	ldr	r5, [r6, #0]
 80121da:	602c      	str	r4, [r5, #0]
 80121dc:	2000      	movs	r0, #0
 80121de:	606c      	str	r4, [r5, #4]
 80121e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121e2:	2000      	movs	r0, #0
 80121e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121e6:	200a      	movs	r0, #10
 80121e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121ea:	200b      	movs	r0, #11
 80121ec:	4770      	bx	lr
 80121ee:	4438      	add	r0, r7
 80121f0:	2200      	movs	r2, #0
 80121f2:	e9c3 2200 	strd	r2, r2, [r3]
 80121f6:	3308      	adds	r3, #8
 80121f8:	4283      	cmp	r3, r0
 80121fa:	d1fa      	bne.n	80121f2 <rcutils_string_map_reserve+0x8a>
 80121fc:	e7ee      	b.n	80121dc <rcutils_string_map_reserve+0x74>
 80121fe:	bf00      	nop

08012200 <rcutils_string_map_init>:
 8012200:	b082      	sub	sp, #8
 8012202:	b570      	push	{r4, r5, r6, lr}
 8012204:	ac04      	add	r4, sp, #16
 8012206:	e884 000c 	stmia.w	r4, {r2, r3}
 801220a:	b378      	cbz	r0, 801226c <rcutils_string_map_init+0x6c>
 801220c:	6806      	ldr	r6, [r0, #0]
 801220e:	4604      	mov	r4, r0
 8012210:	b12e      	cbz	r6, 801221e <rcutils_string_map_init+0x1e>
 8012212:	251e      	movs	r5, #30
 8012214:	4628      	mov	r0, r5
 8012216:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801221a:	b002      	add	sp, #8
 801221c:	4770      	bx	lr
 801221e:	a804      	add	r0, sp, #16
 8012220:	460d      	mov	r5, r1
 8012222:	f7f9 ffa9 	bl	800c178 <rcutils_allocator_is_valid>
 8012226:	b308      	cbz	r0, 801226c <rcutils_string_map_init+0x6c>
 8012228:	9b04      	ldr	r3, [sp, #16]
 801222a:	2020      	movs	r0, #32
 801222c:	9908      	ldr	r1, [sp, #32]
 801222e:	4798      	blx	r3
 8012230:	6020      	str	r0, [r4, #0]
 8012232:	b308      	cbz	r0, 8012278 <rcutils_string_map_init+0x78>
 8012234:	f10d 0e10 	add.w	lr, sp, #16
 8012238:	6086      	str	r6, [r0, #8]
 801223a:	f100 0c0c 	add.w	ip, r0, #12
 801223e:	e9c0 6600 	strd	r6, r6, [r0]
 8012242:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012246:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801224a:	f8de 3000 	ldr.w	r3, [lr]
 801224e:	4629      	mov	r1, r5
 8012250:	4620      	mov	r0, r4
 8012252:	f8cc 3000 	str.w	r3, [ip]
 8012256:	f7ff ff87 	bl	8012168 <rcutils_string_map_reserve>
 801225a:	4605      	mov	r5, r0
 801225c:	2800      	cmp	r0, #0
 801225e:	d0d9      	beq.n	8012214 <rcutils_string_map_init+0x14>
 8012260:	9b05      	ldr	r3, [sp, #20]
 8012262:	9908      	ldr	r1, [sp, #32]
 8012264:	6820      	ldr	r0, [r4, #0]
 8012266:	4798      	blx	r3
 8012268:	6026      	str	r6, [r4, #0]
 801226a:	e7d3      	b.n	8012214 <rcutils_string_map_init+0x14>
 801226c:	250b      	movs	r5, #11
 801226e:	4628      	mov	r0, r5
 8012270:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012274:	b002      	add	sp, #8
 8012276:	4770      	bx	lr
 8012278:	250a      	movs	r5, #10
 801227a:	e7cb      	b.n	8012214 <rcutils_string_map_init+0x14>

0801227c <rcutils_string_map_fini>:
 801227c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012280:	b083      	sub	sp, #12
 8012282:	2800      	cmp	r0, #0
 8012284:	d03e      	beq.n	8012304 <rcutils_string_map_fini+0x88>
 8012286:	6804      	ldr	r4, [r0, #0]
 8012288:	4606      	mov	r6, r0
 801228a:	2c00      	cmp	r4, #0
 801228c:	d036      	beq.n	80122fc <rcutils_string_map_fini+0x80>
 801228e:	6863      	ldr	r3, [r4, #4]
 8012290:	b34b      	cbz	r3, 80122e6 <rcutils_string_map_fini+0x6a>
 8012292:	2500      	movs	r5, #0
 8012294:	6822      	ldr	r2, [r4, #0]
 8012296:	462f      	mov	r7, r5
 8012298:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
 801229c:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 80122a0:	b1f0      	cbz	r0, 80122e0 <rcutils_string_map_fini+0x64>
 80122a2:	69e1      	ldr	r1, [r4, #28]
 80122a4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80122a8:	9101      	str	r1, [sp, #4]
 80122aa:	47c8      	blx	r9
 80122ac:	6823      	ldr	r3, [r4, #0]
 80122ae:	9901      	ldr	r1, [sp, #4]
 80122b0:	eb03 0208 	add.w	r2, r3, r8
 80122b4:	f843 7035 	str.w	r7, [r3, r5, lsl #3]
 80122b8:	3501      	adds	r5, #1
 80122ba:	6850      	ldr	r0, [r2, #4]
 80122bc:	47c8      	blx	r9
 80122be:	68a3      	ldr	r3, [r4, #8]
 80122c0:	6822      	ldr	r2, [r4, #0]
 80122c2:	3b01      	subs	r3, #1
 80122c4:	4442      	add	r2, r8
 80122c6:	6057      	str	r7, [r2, #4]
 80122c8:	60a3      	str	r3, [r4, #8]
 80122ca:	6834      	ldr	r4, [r6, #0]
 80122cc:	6863      	ldr	r3, [r4, #4]
 80122ce:	429d      	cmp	r5, r3
 80122d0:	d209      	bcs.n	80122e6 <rcutils_string_map_fini+0x6a>
 80122d2:	6822      	ldr	r2, [r4, #0]
 80122d4:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 80122d8:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
 80122dc:	2800      	cmp	r0, #0
 80122de:	d1e0      	bne.n	80122a2 <rcutils_string_map_fini+0x26>
 80122e0:	3501      	adds	r5, #1
 80122e2:	429d      	cmp	r5, r3
 80122e4:	d3d8      	bcc.n	8012298 <rcutils_string_map_fini+0x1c>
 80122e6:	2100      	movs	r1, #0
 80122e8:	4630      	mov	r0, r6
 80122ea:	f7ff ff3d 	bl	8012168 <rcutils_string_map_reserve>
 80122ee:	4604      	mov	r4, r0
 80122f0:	b920      	cbnz	r0, 80122fc <rcutils_string_map_fini+0x80>
 80122f2:	6830      	ldr	r0, [r6, #0]
 80122f4:	6903      	ldr	r3, [r0, #16]
 80122f6:	69c1      	ldr	r1, [r0, #28]
 80122f8:	4798      	blx	r3
 80122fa:	6034      	str	r4, [r6, #0]
 80122fc:	4620      	mov	r0, r4
 80122fe:	b003      	add	sp, #12
 8012300:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012304:	240b      	movs	r4, #11
 8012306:	4620      	mov	r0, r4
 8012308:	b003      	add	sp, #12
 801230a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801230e:	bf00      	nop

08012310 <rcutils_string_map_getn>:
 8012310:	b338      	cbz	r0, 8012362 <rcutils_string_map_getn+0x52>
 8012312:	6803      	ldr	r3, [r0, #0]
 8012314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012318:	4688      	mov	r8, r1
 801231a:	b1d9      	cbz	r1, 8012354 <rcutils_string_map_getn+0x44>
 801231c:	fab3 f483 	clz	r4, r3
 8012320:	0964      	lsrs	r4, r4, #5
 8012322:	b1bb      	cbz	r3, 8012354 <rcutils_string_map_getn+0x44>
 8012324:	4691      	mov	r9, r2
 8012326:	e9d3 7600 	ldrd	r7, r6, [r3]
 801232a:	b19e      	cbz	r6, 8012354 <rcutils_string_map_getn+0x44>
 801232c:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
 8012330:	eb07 0ac4 	add.w	sl, r7, r4, lsl #3
 8012334:	3401      	adds	r4, #1
 8012336:	4628      	mov	r0, r5
 8012338:	b155      	cbz	r5, 8012350 <rcutils_string_map_getn+0x40>
 801233a:	f7ed ffe1 	bl	8000300 <strlen>
 801233e:	4602      	mov	r2, r0
 8012340:	4629      	mov	r1, r5
 8012342:	4640      	mov	r0, r8
 8012344:	454a      	cmp	r2, r9
 8012346:	bf38      	it	cc
 8012348:	464a      	movcc	r2, r9
 801234a:	f007 f988 	bl	801965e <strncmp>
 801234e:	b120      	cbz	r0, 801235a <rcutils_string_map_getn+0x4a>
 8012350:	42a6      	cmp	r6, r4
 8012352:	d1eb      	bne.n	801232c <rcutils_string_map_getn+0x1c>
 8012354:	2000      	movs	r0, #0
 8012356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801235a:	f8da 0004 	ldr.w	r0, [sl, #4]
 801235e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012362:	4770      	bx	lr
 8012364:	0000      	movs	r0, r0
	...

08012368 <rmw_get_zero_initialized_context>:
 8012368:	b510      	push	{r4, lr}
 801236a:	4604      	mov	r4, r0
 801236c:	3010      	adds	r0, #16
 801236e:	f000 f80f 	bl	8012390 <rmw_get_zero_initialized_init_options>
 8012372:	2300      	movs	r3, #0
 8012374:	4620      	mov	r0, r4
 8012376:	60a3      	str	r3, [r4, #8]
 8012378:	66a3      	str	r3, [r4, #104]	; 0x68
 801237a:	66e3      	str	r3, [r4, #108]	; 0x6c
 801237c:	ed9f 7b02 	vldr	d7, [pc, #8]	; 8012388 <rmw_get_zero_initialized_context+0x20>
 8012380:	ed84 7b00 	vstr	d7, [r4]
 8012384:	bd10      	pop	{r4, pc}
 8012386:	bf00      	nop
	...

08012390 <rmw_get_zero_initialized_init_options>:
 8012390:	b510      	push	{r4, lr}
 8012392:	4604      	mov	r4, r0
 8012394:	2258      	movs	r2, #88	; 0x58
 8012396:	2100      	movs	r1, #0
 8012398:	f007 f94c 	bl	8019634 <memset>
 801239c:	f104 0010 	add.w	r0, r4, #16
 80123a0:	f000 f80a 	bl	80123b8 <rmw_get_default_security_options>
 80123a4:	f104 001c 	add.w	r0, r4, #28
 80123a8:	f005 fd54 	bl	8017e54 <rmw_get_zero_initialized_discovery_options>
 80123ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80123b0:	4620      	mov	r0, r4
 80123b2:	60e3      	str	r3, [r4, #12]
 80123b4:	bd10      	pop	{r4, pc}
 80123b6:	bf00      	nop

080123b8 <rmw_get_default_security_options>:
 80123b8:	2200      	movs	r2, #0
 80123ba:	7002      	strb	r2, [r0, #0]
 80123bc:	6042      	str	r2, [r0, #4]
 80123be:	4770      	bx	lr

080123c0 <rmw_get_zero_initialized_message_info>:
 80123c0:	b510      	push	{r4, lr}
 80123c2:	4604      	mov	r4, r0
 80123c4:	2238      	movs	r2, #56	; 0x38
 80123c6:	2100      	movs	r1, #0
 80123c8:	f007 f934 	bl	8019634 <memset>
 80123cc:	4620      	mov	r0, r4
 80123ce:	bd10      	pop	{r4, pc}

080123d0 <rmw_validate_full_topic_name>:
 80123d0:	2800      	cmp	r0, #0
 80123d2:	d05d      	beq.n	8012490 <rmw_validate_full_topic_name+0xc0>
 80123d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123d8:	460d      	mov	r5, r1
 80123da:	2900      	cmp	r1, #0
 80123dc:	d05a      	beq.n	8012494 <rmw_validate_full_topic_name+0xc4>
 80123de:	4604      	mov	r4, r0
 80123e0:	4616      	mov	r6, r2
 80123e2:	f7ed ff8d 	bl	8000300 <strlen>
 80123e6:	b150      	cbz	r0, 80123fe <rmw_validate_full_topic_name+0x2e>
 80123e8:	7823      	ldrb	r3, [r4, #0]
 80123ea:	2b2f      	cmp	r3, #47	; 0x2f
 80123ec:	d00e      	beq.n	801240c <rmw_validate_full_topic_name+0x3c>
 80123ee:	2302      	movs	r3, #2
 80123f0:	602b      	str	r3, [r5, #0]
 80123f2:	b146      	cbz	r6, 8012406 <rmw_validate_full_topic_name+0x36>
 80123f4:	2300      	movs	r3, #0
 80123f6:	4618      	mov	r0, r3
 80123f8:	6033      	str	r3, [r6, #0]
 80123fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123fe:	2301      	movs	r3, #1
 8012400:	602b      	str	r3, [r5, #0]
 8012402:	2e00      	cmp	r6, #0
 8012404:	d1f6      	bne.n	80123f4 <rmw_validate_full_topic_name+0x24>
 8012406:	2000      	movs	r0, #0
 8012408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801240c:	1e43      	subs	r3, r0, #1
 801240e:	5ce2      	ldrb	r2, [r4, r3]
 8012410:	2a2f      	cmp	r2, #47	; 0x2f
 8012412:	d041      	beq.n	8012498 <rmw_validate_full_topic_name+0xc8>
 8012414:	1e62      	subs	r2, r4, #1
 8012416:	f1c4 0e01 	rsb	lr, r4, #1
 801241a:	eb02 0800 	add.w	r8, r2, r0
 801241e:	eb0e 0702 	add.w	r7, lr, r2
 8012422:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8012426:	f023 0120 	bic.w	r1, r3, #32
 801242a:	f1a3 0c2f 	sub.w	ip, r3, #47	; 0x2f
 801242e:	3941      	subs	r1, #65	; 0x41
 8012430:	2919      	cmp	r1, #25
 8012432:	d90f      	bls.n	8012454 <rmw_validate_full_topic_name+0x84>
 8012434:	f1bc 0f0a 	cmp.w	ip, #10
 8012438:	d90c      	bls.n	8012454 <rmw_validate_full_topic_name+0x84>
 801243a:	f1a3 035f 	sub.w	r3, r3, #95	; 0x5f
 801243e:	fab3 f383 	clz	r3, r3
 8012442:	095b      	lsrs	r3, r3, #5
 8012444:	b933      	cbnz	r3, 8012454 <rmw_validate_full_topic_name+0x84>
 8012446:	2204      	movs	r2, #4
 8012448:	602a      	str	r2, [r5, #0]
 801244a:	2e00      	cmp	r6, #0
 801244c:	d0db      	beq.n	8012406 <rmw_validate_full_topic_name+0x36>
 801244e:	4618      	mov	r0, r3
 8012450:	6037      	str	r7, [r6, #0]
 8012452:	e7d2      	b.n	80123fa <rmw_validate_full_topic_name+0x2a>
 8012454:	4542      	cmp	r2, r8
 8012456:	d1e2      	bne.n	801241e <rmw_validate_full_topic_name+0x4e>
 8012458:	2301      	movs	r3, #1
 801245a:	4f1a      	ldr	r7, [pc, #104]	; (80124c4 <rmw_validate_full_topic_name+0xf4>)
 801245c:	e004      	b.n	8012468 <rmw_validate_full_topic_name+0x98>
 801245e:	4298      	cmp	r0, r3
 8012460:	f104 0401 	add.w	r4, r4, #1
 8012464:	4613      	mov	r3, r2
 8012466:	d91c      	bls.n	80124a2 <rmw_validate_full_topic_name+0xd2>
 8012468:	4298      	cmp	r0, r3
 801246a:	f103 0201 	add.w	r2, r3, #1
 801246e:	d0f6      	beq.n	801245e <rmw_validate_full_topic_name+0x8e>
 8012470:	7821      	ldrb	r1, [r4, #0]
 8012472:	292f      	cmp	r1, #47	; 0x2f
 8012474:	d1f3      	bne.n	801245e <rmw_validate_full_topic_name+0x8e>
 8012476:	7861      	ldrb	r1, [r4, #1]
 8012478:	292f      	cmp	r1, #47	; 0x2f
 801247a:	d01e      	beq.n	80124ba <rmw_validate_full_topic_name+0xea>
 801247c:	5dc9      	ldrb	r1, [r1, r7]
 801247e:	0749      	lsls	r1, r1, #29
 8012480:	d5ed      	bpl.n	801245e <rmw_validate_full_topic_name+0x8e>
 8012482:	2206      	movs	r2, #6
 8012484:	602a      	str	r2, [r5, #0]
 8012486:	2e00      	cmp	r6, #0
 8012488:	d0bd      	beq.n	8012406 <rmw_validate_full_topic_name+0x36>
 801248a:	2000      	movs	r0, #0
 801248c:	6033      	str	r3, [r6, #0]
 801248e:	e7b4      	b.n	80123fa <rmw_validate_full_topic_name+0x2a>
 8012490:	200b      	movs	r0, #11
 8012492:	4770      	bx	lr
 8012494:	200b      	movs	r0, #11
 8012496:	e7b0      	b.n	80123fa <rmw_validate_full_topic_name+0x2a>
 8012498:	2203      	movs	r2, #3
 801249a:	602a      	str	r2, [r5, #0]
 801249c:	2e00      	cmp	r6, #0
 801249e:	d1f4      	bne.n	801248a <rmw_validate_full_topic_name+0xba>
 80124a0:	e7b1      	b.n	8012406 <rmw_validate_full_topic_name+0x36>
 80124a2:	28f7      	cmp	r0, #247	; 0xf7
 80124a4:	d803      	bhi.n	80124ae <rmw_validate_full_topic_name+0xde>
 80124a6:	2300      	movs	r3, #0
 80124a8:	4618      	mov	r0, r3
 80124aa:	602b      	str	r3, [r5, #0]
 80124ac:	e7a5      	b.n	80123fa <rmw_validate_full_topic_name+0x2a>
 80124ae:	2307      	movs	r3, #7
 80124b0:	602b      	str	r3, [r5, #0]
 80124b2:	2e00      	cmp	r6, #0
 80124b4:	d0a7      	beq.n	8012406 <rmw_validate_full_topic_name+0x36>
 80124b6:	23f6      	movs	r3, #246	; 0xf6
 80124b8:	e7e7      	b.n	801248a <rmw_validate_full_topic_name+0xba>
 80124ba:	2205      	movs	r2, #5
 80124bc:	602a      	str	r2, [r5, #0]
 80124be:	2e00      	cmp	r6, #0
 80124c0:	d1e3      	bne.n	801248a <rmw_validate_full_topic_name+0xba>
 80124c2:	e7a0      	b.n	8012406 <rmw_validate_full_topic_name+0x36>
 80124c4:	0801bf74 	.word	0x0801bf74

080124c8 <rmw_validate_namespace_with_size>:
 80124c8:	2800      	cmp	r0, #0
 80124ca:	d043      	beq.n	8012554 <rmw_validate_namespace_with_size+0x8c>
 80124cc:	b570      	push	{r4, r5, r6, lr}
 80124ce:	4614      	mov	r4, r2
 80124d0:	b0c2      	sub	sp, #264	; 0x108
 80124d2:	b32a      	cbz	r2, 8012520 <rmw_validate_namespace_with_size+0x58>
 80124d4:	2901      	cmp	r1, #1
 80124d6:	460d      	mov	r5, r1
 80124d8:	461e      	mov	r6, r3
 80124da:	d102      	bne.n	80124e2 <rmw_validate_namespace_with_size+0x1a>
 80124dc:	7803      	ldrb	r3, [r0, #0]
 80124de:	2b2f      	cmp	r3, #47	; 0x2f
 80124e0:	d012      	beq.n	8012508 <rmw_validate_namespace_with_size+0x40>
 80124e2:	aa01      	add	r2, sp, #4
 80124e4:	4669      	mov	r1, sp
 80124e6:	f7ff ff73 	bl	80123d0 <rmw_validate_full_topic_name>
 80124ea:	b980      	cbnz	r0, 801250e <rmw_validate_namespace_with_size+0x46>
 80124ec:	9a00      	ldr	r2, [sp, #0]
 80124ee:	b14a      	cbz	r2, 8012504 <rmw_validate_namespace_with_size+0x3c>
 80124f0:	2a07      	cmp	r2, #7
 80124f2:	d007      	beq.n	8012504 <rmw_validate_namespace_with_size+0x3c>
 80124f4:	1e53      	subs	r3, r2, #1
 80124f6:	2b05      	cmp	r3, #5
 80124f8:	d82e      	bhi.n	8012558 <rmw_validate_namespace_with_size+0x90>
 80124fa:	e8df f003 	tbb	[pc, r3]
 80124fe:	1f1c      	.short	0x1f1c
 8012500:	14282522 	.word	0x14282522
 8012504:	2df5      	cmp	r5, #245	; 0xf5
 8012506:	d804      	bhi.n	8012512 <rmw_validate_namespace_with_size+0x4a>
 8012508:	2300      	movs	r3, #0
 801250a:	4618      	mov	r0, r3
 801250c:	6023      	str	r3, [r4, #0]
 801250e:	b042      	add	sp, #264	; 0x108
 8012510:	bd70      	pop	{r4, r5, r6, pc}
 8012512:	2307      	movs	r3, #7
 8012514:	6023      	str	r3, [r4, #0]
 8012516:	2e00      	cmp	r6, #0
 8012518:	d0f9      	beq.n	801250e <rmw_validate_namespace_with_size+0x46>
 801251a:	23f4      	movs	r3, #244	; 0xf4
 801251c:	6033      	str	r3, [r6, #0]
 801251e:	e7f6      	b.n	801250e <rmw_validate_namespace_with_size+0x46>
 8012520:	200b      	movs	r0, #11
 8012522:	b042      	add	sp, #264	; 0x108
 8012524:	bd70      	pop	{r4, r5, r6, pc}
 8012526:	2306      	movs	r3, #6
 8012528:	6023      	str	r3, [r4, #0]
 801252a:	2e00      	cmp	r6, #0
 801252c:	d0ef      	beq.n	801250e <rmw_validate_namespace_with_size+0x46>
 801252e:	9b01      	ldr	r3, [sp, #4]
 8012530:	6033      	str	r3, [r6, #0]
 8012532:	b042      	add	sp, #264	; 0x108
 8012534:	bd70      	pop	{r4, r5, r6, pc}
 8012536:	2301      	movs	r3, #1
 8012538:	6023      	str	r3, [r4, #0]
 801253a:	e7f6      	b.n	801252a <rmw_validate_namespace_with_size+0x62>
 801253c:	2302      	movs	r3, #2
 801253e:	6023      	str	r3, [r4, #0]
 8012540:	e7f3      	b.n	801252a <rmw_validate_namespace_with_size+0x62>
 8012542:	2303      	movs	r3, #3
 8012544:	6023      	str	r3, [r4, #0]
 8012546:	e7f0      	b.n	801252a <rmw_validate_namespace_with_size+0x62>
 8012548:	2304      	movs	r3, #4
 801254a:	6023      	str	r3, [r4, #0]
 801254c:	e7ed      	b.n	801252a <rmw_validate_namespace_with_size+0x62>
 801254e:	2305      	movs	r3, #5
 8012550:	6023      	str	r3, [r4, #0]
 8012552:	e7ea      	b.n	801252a <rmw_validate_namespace_with_size+0x62>
 8012554:	200b      	movs	r0, #11
 8012556:	4770      	bx	lr
 8012558:	4613      	mov	r3, r2
 801255a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801255e:	4a03      	ldr	r2, [pc, #12]	; (801256c <rmw_validate_namespace_with_size+0xa4>)
 8012560:	a802      	add	r0, sp, #8
 8012562:	f7ff fd65 	bl	8012030 <rcutils_snprintf>
 8012566:	2001      	movs	r0, #1
 8012568:	e7d1      	b.n	801250e <rmw_validate_namespace_with_size+0x46>
 801256a:	bf00      	nop
 801256c:	0801b77c 	.word	0x0801b77c

08012570 <rmw_validate_namespace>:
 8012570:	b168      	cbz	r0, 801258e <rmw_validate_namespace+0x1e>
 8012572:	b570      	push	{r4, r5, r6, lr}
 8012574:	460d      	mov	r5, r1
 8012576:	4616      	mov	r6, r2
 8012578:	4604      	mov	r4, r0
 801257a:	f7ed fec1 	bl	8000300 <strlen>
 801257e:	4633      	mov	r3, r6
 8012580:	4601      	mov	r1, r0
 8012582:	462a      	mov	r2, r5
 8012584:	4620      	mov	r0, r4
 8012586:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801258a:	f7ff bf9d 	b.w	80124c8 <rmw_validate_namespace_with_size>
 801258e:	200b      	movs	r0, #11
 8012590:	4770      	bx	lr
 8012592:	bf00      	nop

08012594 <rmw_namespace_validation_result_string>:
 8012594:	2807      	cmp	r0, #7
 8012596:	d803      	bhi.n	80125a0 <rmw_namespace_validation_result_string+0xc>
 8012598:	4b02      	ldr	r3, [pc, #8]	; (80125a4 <rmw_namespace_validation_result_string+0x10>)
 801259a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801259e:	4770      	bx	lr
 80125a0:	4801      	ldr	r0, [pc, #4]	; (80125a8 <rmw_namespace_validation_result_string+0x14>)
 80125a2:	4770      	bx	lr
 80125a4:	0801b974 	.word	0x0801b974
 80125a8:	0801b7cc 	.word	0x0801b7cc

080125ac <rmw_validate_node_name>:
 80125ac:	2800      	cmp	r0, #0
 80125ae:	d042      	beq.n	8012636 <rmw_validate_node_name+0x8a>
 80125b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125b4:	460d      	mov	r5, r1
 80125b6:	2900      	cmp	r1, #0
 80125b8:	d03f      	beq.n	801263a <rmw_validate_node_name+0x8e>
 80125ba:	4604      	mov	r4, r0
 80125bc:	4616      	mov	r6, r2
 80125be:	f7ed fe9f 	bl	8000300 <strlen>
 80125c2:	b310      	cbz	r0, 801260a <rmw_validate_node_name+0x5e>
 80125c4:	1e63      	subs	r3, r4, #1
 80125c6:	f1c4 0101 	rsb	r1, r4, #1
 80125ca:	eb03 0800 	add.w	r8, r3, r0
 80125ce:	18cf      	adds	r7, r1, r3
 80125d0:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 80125d4:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 80125d8:	f02e 0c20 	bic.w	ip, lr, #32
 80125dc:	2a09      	cmp	r2, #9
 80125de:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 80125e2:	d905      	bls.n	80125f0 <rmw_validate_node_name+0x44>
 80125e4:	f1bc 0f19 	cmp.w	ip, #25
 80125e8:	d902      	bls.n	80125f0 <rmw_validate_node_name+0x44>
 80125ea:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 80125ee:	d114      	bne.n	801261a <rmw_validate_node_name+0x6e>
 80125f0:	4598      	cmp	r8, r3
 80125f2:	d1ec      	bne.n	80125ce <rmw_validate_node_name+0x22>
 80125f4:	7822      	ldrb	r2, [r4, #0]
 80125f6:	4b16      	ldr	r3, [pc, #88]	; (8012650 <rmw_validate_node_name+0xa4>)
 80125f8:	5cd3      	ldrb	r3, [r2, r3]
 80125fa:	f013 0304 	ands.w	r3, r3, #4
 80125fe:	d113      	bne.n	8012628 <rmw_validate_node_name+0x7c>
 8012600:	28ff      	cmp	r0, #255	; 0xff
 8012602:	d81c      	bhi.n	801263e <rmw_validate_node_name+0x92>
 8012604:	4618      	mov	r0, r3
 8012606:	602b      	str	r3, [r5, #0]
 8012608:	e00c      	b.n	8012624 <rmw_validate_node_name+0x78>
 801260a:	2301      	movs	r3, #1
 801260c:	602b      	str	r3, [r5, #0]
 801260e:	b17e      	cbz	r6, 8012630 <rmw_validate_node_name+0x84>
 8012610:	2300      	movs	r3, #0
 8012612:	4618      	mov	r0, r3
 8012614:	6033      	str	r3, [r6, #0]
 8012616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801261a:	2302      	movs	r3, #2
 801261c:	602b      	str	r3, [r5, #0]
 801261e:	b13e      	cbz	r6, 8012630 <rmw_validate_node_name+0x84>
 8012620:	2000      	movs	r0, #0
 8012622:	6037      	str	r7, [r6, #0]
 8012624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012628:	2303      	movs	r3, #3
 801262a:	602b      	str	r3, [r5, #0]
 801262c:	2e00      	cmp	r6, #0
 801262e:	d1ef      	bne.n	8012610 <rmw_validate_node_name+0x64>
 8012630:	2000      	movs	r0, #0
 8012632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012636:	200b      	movs	r0, #11
 8012638:	4770      	bx	lr
 801263a:	200b      	movs	r0, #11
 801263c:	e7f2      	b.n	8012624 <rmw_validate_node_name+0x78>
 801263e:	2204      	movs	r2, #4
 8012640:	602a      	str	r2, [r5, #0]
 8012642:	2e00      	cmp	r6, #0
 8012644:	d0f4      	beq.n	8012630 <rmw_validate_node_name+0x84>
 8012646:	22fe      	movs	r2, #254	; 0xfe
 8012648:	4618      	mov	r0, r3
 801264a:	6032      	str	r2, [r6, #0]
 801264c:	e7ea      	b.n	8012624 <rmw_validate_node_name+0x78>
 801264e:	bf00      	nop
 8012650:	0801bf74 	.word	0x0801bf74

08012654 <rmw_node_name_validation_result_string>:
 8012654:	2804      	cmp	r0, #4
 8012656:	d803      	bhi.n	8012660 <rmw_node_name_validation_result_string+0xc>
 8012658:	4b02      	ldr	r3, [pc, #8]	; (8012664 <rmw_node_name_validation_result_string+0x10>)
 801265a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801265e:	4770      	bx	lr
 8012660:	4801      	ldr	r0, [pc, #4]	; (8012668 <rmw_node_name_validation_result_string+0x14>)
 8012662:	4770      	bx	lr
 8012664:	0801ba80 	.word	0x0801ba80
 8012668:	0801b994 	.word	0x0801b994

0801266c <rmw_destroy_client>:
 801266c:	b570      	push	{r4, r5, r6, lr}
 801266e:	b128      	cbz	r0, 801267c <rmw_destroy_client+0x10>
 8012670:	4604      	mov	r4, r0
 8012672:	6800      	ldr	r0, [r0, #0]
 8012674:	460d      	mov	r5, r1
 8012676:	f001 fc99 	bl	8013fac <is_uxrce_rmw_identifier_valid>
 801267a:	b910      	cbnz	r0, 8012682 <rmw_destroy_client+0x16>
 801267c:	2401      	movs	r4, #1
 801267e:	4620      	mov	r0, r4
 8012680:	bd70      	pop	{r4, r5, r6, pc}
 8012682:	6863      	ldr	r3, [r4, #4]
 8012684:	2b00      	cmp	r3, #0
 8012686:	d0f9      	beq.n	801267c <rmw_destroy_client+0x10>
 8012688:	2d00      	cmp	r5, #0
 801268a:	d0f7      	beq.n	801267c <rmw_destroy_client+0x10>
 801268c:	6828      	ldr	r0, [r5, #0]
 801268e:	f001 fc8d 	bl	8013fac <is_uxrce_rmw_identifier_valid>
 8012692:	2800      	cmp	r0, #0
 8012694:	d0f2      	beq.n	801267c <rmw_destroy_client+0x10>
 8012696:	686e      	ldr	r6, [r5, #4]
 8012698:	2e00      	cmp	r6, #0
 801269a:	d0ef      	beq.n	801267c <rmw_destroy_client+0x10>
 801269c:	6864      	ldr	r4, [r4, #4]
 801269e:	6932      	ldr	r2, [r6, #16]
 80126a0:	6920      	ldr	r0, [r4, #16]
 80126a2:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80126a6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80126aa:	6819      	ldr	r1, [r3, #0]
 80126ac:	f001 ff02 	bl	80144b4 <uxr_buffer_cancel_data>
 80126b0:	4602      	mov	r2, r0
 80126b2:	6920      	ldr	r0, [r4, #16]
 80126b4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80126b8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80126bc:	f001 fbaa 	bl	8013e14 <run_xrce_session>
 80126c0:	6920      	ldr	r0, [r4, #16]
 80126c2:	6932      	ldr	r2, [r6, #16]
 80126c4:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80126c8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80126cc:	6819      	ldr	r1, [r3, #0]
 80126ce:	f001 fd11 	bl	80140f4 <uxr_buffer_delete_entity>
 80126d2:	4602      	mov	r2, r0
 80126d4:	6920      	ldr	r0, [r4, #16]
 80126d6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80126da:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80126de:	f001 fb99 	bl	8013e14 <run_xrce_session>
 80126e2:	4603      	mov	r3, r0
 80126e4:	4628      	mov	r0, r5
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	bf14      	ite	ne
 80126ea:	2400      	movne	r4, #0
 80126ec:	2402      	moveq	r4, #2
 80126ee:	f001 fa6d 	bl	8013bcc <rmw_uxrce_fini_client_memory>
 80126f2:	e7c4      	b.n	801267e <rmw_destroy_client+0x12>

080126f4 <rmw_get_gid_for_client>:
 80126f4:	b1b9      	cbz	r1, 8012726 <rmw_get_gid_for_client+0x32>
 80126f6:	b538      	push	{r3, r4, r5, lr}
 80126f8:	4605      	mov	r5, r0
 80126fa:	b180      	cbz	r0, 801271e <rmw_get_gid_for_client+0x2a>
 80126fc:	6800      	ldr	r0, [r0, #0]
 80126fe:	460c      	mov	r4, r1
 8012700:	b120      	cbz	r0, 801270c <rmw_get_gid_for_client+0x18>
 8012702:	4b0a      	ldr	r3, [pc, #40]	; (801272c <rmw_get_gid_for_client+0x38>)
 8012704:	6819      	ldr	r1, [r3, #0]
 8012706:	f7ed fd9b 	bl	8000240 <strcmp>
 801270a:	b950      	cbnz	r0, 8012722 <rmw_get_gid_for_client+0x2e>
 801270c:	686b      	ldr	r3, [r5, #4]
 801270e:	2000      	movs	r0, #0
 8012710:	6060      	str	r0, [r4, #4]
 8012712:	60a0      	str	r0, [r4, #8]
 8012714:	60e0      	str	r0, [r4, #12]
 8012716:	6120      	str	r0, [r4, #16]
 8012718:	691b      	ldr	r3, [r3, #16]
 801271a:	6063      	str	r3, [r4, #4]
 801271c:	bd38      	pop	{r3, r4, r5, pc}
 801271e:	200b      	movs	r0, #11
 8012720:	bd38      	pop	{r3, r4, r5, pc}
 8012722:	200c      	movs	r0, #12
 8012724:	bd38      	pop	{r3, r4, r5, pc}
 8012726:	200b      	movs	r0, #11
 8012728:	4770      	bx	lr
 801272a:	bf00      	nop
 801272c:	0801bf00 	.word	0x0801bf00

08012730 <rmw_get_implementation_identifier>:
 8012730:	4b01      	ldr	r3, [pc, #4]	; (8012738 <rmw_get_implementation_identifier+0x8>)
 8012732:	6818      	ldr	r0, [r3, #0]
 8012734:	4770      	bx	lr
 8012736:	bf00      	nop
 8012738:	0801bf00 	.word	0x0801bf00

0801273c <rmw_init_options_init>:
 801273c:	b084      	sub	sp, #16
 801273e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012740:	b083      	sub	sp, #12
 8012742:	ad09      	add	r5, sp, #36	; 0x24
 8012744:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8012748:	b130      	cbz	r0, 8012758 <rmw_init_options_init+0x1c>
 801274a:	4604      	mov	r4, r0
 801274c:	4628      	mov	r0, r5
 801274e:	f7f9 fd13 	bl	800c178 <rcutils_allocator_is_valid>
 8012752:	b108      	cbz	r0, 8012758 <rmw_init_options_init+0x1c>
 8012754:	68a6      	ldr	r6, [r4, #8]
 8012756:	b12e      	cbz	r6, 8012764 <rmw_init_options_init+0x28>
 8012758:	200b      	movs	r0, #11
 801275a:	b003      	add	sp, #12
 801275c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012760:	b004      	add	sp, #16
 8012762:	4770      	bx	lr
 8012764:	2200      	movs	r2, #0
 8012766:	2300      	movs	r3, #0
 8012768:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 801276c:	f8df e098 	ldr.w	lr, [pc, #152]	; 8012808 <rmw_init_options_init+0xcc>
 8012770:	466f      	mov	r7, sp
 8012772:	e9c4 2300 	strd	r2, r3, [r4]
 8012776:	4b20      	ldr	r3, [pc, #128]	; (80127f8 <rmw_init_options_init+0xbc>)
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	60a3      	str	r3, [r4, #8]
 801277c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801277e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012782:	682b      	ldr	r3, [r5, #0]
 8012784:	4638      	mov	r0, r7
 8012786:	f8cc 3000 	str.w	r3, [ip]
 801278a:	f8c4 e03c 	str.w	lr, [r4, #60]	; 0x3c
 801278e:	60e6      	str	r6, [r4, #12]
 8012790:	f7ff fe12 	bl	80123b8 <rmw_get_default_security_options>
 8012794:	f104 0310 	add.w	r3, r4, #16
 8012798:	2203      	movs	r2, #3
 801279a:	e897 0003 	ldmia.w	r7, {r0, r1}
 801279e:	e883 0003 	stmia.w	r3, {r0, r1}
 80127a2:	4816      	ldr	r0, [pc, #88]	; (80127fc <rmw_init_options_init+0xc0>)
 80127a4:	4916      	ldr	r1, [pc, #88]	; (8012800 <rmw_init_options_init+0xc4>)
 80127a6:	7626      	strb	r6, [r4, #24]
 80127a8:	f001 f950 	bl	8013a4c <rmw_uxrce_init_init_options_impl_memory>
 80127ac:	4813      	ldr	r0, [pc, #76]	; (80127fc <rmw_init_options_init+0xc0>)
 80127ae:	f005 fcf5 	bl	801819c <get_memory>
 80127b2:	b1f0      	cbz	r0, 80127f2 <rmw_init_options_init+0xb6>
 80127b4:	4a13      	ldr	r2, [pc, #76]	; (8012804 <rmw_init_options_init+0xc8>)
 80127b6:	6883      	ldr	r3, [r0, #8]
 80127b8:	6851      	ldr	r1, [r2, #4]
 80127ba:	6563      	str	r3, [r4, #84]	; 0x54
 80127bc:	7810      	ldrb	r0, [r2, #0]
 80127be:	6159      	str	r1, [r3, #20]
 80127c0:	68d1      	ldr	r1, [r2, #12]
 80127c2:	7418      	strb	r0, [r3, #16]
 80127c4:	61d9      	str	r1, [r3, #28]
 80127c6:	6911      	ldr	r1, [r2, #16]
 80127c8:	6219      	str	r1, [r3, #32]
 80127ca:	6951      	ldr	r1, [r2, #20]
 80127cc:	6892      	ldr	r2, [r2, #8]
 80127ce:	6259      	str	r1, [r3, #36]	; 0x24
 80127d0:	619a      	str	r2, [r3, #24]
 80127d2:	f003 fe1b 	bl	801640c <uxr_nanos>
 80127d6:	f006 fc71 	bl	80190bc <srand>
 80127da:	f006 fc9d 	bl	8019118 <rand>
 80127de:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80127e0:	6298      	str	r0, [r3, #40]	; 0x28
 80127e2:	2800      	cmp	r0, #0
 80127e4:	d0f9      	beq.n	80127da <rmw_init_options_init+0x9e>
 80127e6:	2000      	movs	r0, #0
 80127e8:	b003      	add	sp, #12
 80127ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80127ee:	b004      	add	sp, #16
 80127f0:	4770      	bx	lr
 80127f2:	2001      	movs	r0, #1
 80127f4:	e7b1      	b.n	801275a <rmw_init_options_init+0x1e>
 80127f6:	bf00      	nop
 80127f8:	0801bf00 	.word	0x0801bf00
 80127fc:	200108ac 	.word	0x200108ac
 8012800:	2000c080 	.word	0x2000c080
 8012804:	2000b94c 	.word	0x2000b94c
 8012808:	0801b508 	.word	0x0801b508

0801280c <rmw_init_options_copy>:
 801280c:	b570      	push	{r4, r5, r6, lr}
 801280e:	b158      	cbz	r0, 8012828 <rmw_init_options_copy+0x1c>
 8012810:	460d      	mov	r5, r1
 8012812:	b149      	cbz	r1, 8012828 <rmw_init_options_copy+0x1c>
 8012814:	4604      	mov	r4, r0
 8012816:	6880      	ldr	r0, [r0, #8]
 8012818:	b120      	cbz	r0, 8012824 <rmw_init_options_copy+0x18>
 801281a:	4b13      	ldr	r3, [pc, #76]	; (8012868 <rmw_init_options_copy+0x5c>)
 801281c:	6819      	ldr	r1, [r3, #0]
 801281e:	f7ed fd0f 	bl	8000240 <strcmp>
 8012822:	b9d8      	cbnz	r0, 801285c <rmw_init_options_copy+0x50>
 8012824:	68ae      	ldr	r6, [r5, #8]
 8012826:	b116      	cbz	r6, 801282e <rmw_init_options_copy+0x22>
 8012828:	260b      	movs	r6, #11
 801282a:	4630      	mov	r0, r6
 801282c:	bd70      	pop	{r4, r5, r6, pc}
 801282e:	2258      	movs	r2, #88	; 0x58
 8012830:	4621      	mov	r1, r4
 8012832:	4628      	mov	r0, r5
 8012834:	f007 f873 	bl	801991e <memcpy>
 8012838:	480c      	ldr	r0, [pc, #48]	; (801286c <rmw_init_options_copy+0x60>)
 801283a:	f005 fcaf 	bl	801819c <get_memory>
 801283e:	b180      	cbz	r0, 8012862 <rmw_init_options_copy+0x56>
 8012840:	6883      	ldr	r3, [r0, #8]
 8012842:	656b      	str	r3, [r5, #84]	; 0x54
 8012844:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8012846:	f103 0410 	add.w	r4, r3, #16
 801284a:	3510      	adds	r5, #16
 801284c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801284e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012850:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8012854:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012858:	4630      	mov	r0, r6
 801285a:	bd70      	pop	{r4, r5, r6, pc}
 801285c:	260c      	movs	r6, #12
 801285e:	4630      	mov	r0, r6
 8012860:	bd70      	pop	{r4, r5, r6, pc}
 8012862:	2601      	movs	r6, #1
 8012864:	e7e1      	b.n	801282a <rmw_init_options_copy+0x1e>
 8012866:	bf00      	nop
 8012868:	0801bf00 	.word	0x0801bf00
 801286c:	200108ac 	.word	0x200108ac

08012870 <rmw_init_options_fini>:
 8012870:	b368      	cbz	r0, 80128ce <rmw_init_options_fini+0x5e>
 8012872:	b510      	push	{r4, lr}
 8012874:	4604      	mov	r4, r0
 8012876:	b096      	sub	sp, #88	; 0x58
 8012878:	3040      	adds	r0, #64	; 0x40
 801287a:	f7f9 fc7d 	bl	800c178 <rcutils_allocator_is_valid>
 801287e:	b1f0      	cbz	r0, 80128be <rmw_init_options_fini+0x4e>
 8012880:	68a0      	ldr	r0, [r4, #8]
 8012882:	b120      	cbz	r0, 801288e <rmw_init_options_fini+0x1e>
 8012884:	4b13      	ldr	r3, [pc, #76]	; (80128d4 <rmw_init_options_fini+0x64>)
 8012886:	6819      	ldr	r1, [r3, #0]
 8012888:	f7ed fcda 	bl	8000240 <strcmp>
 801288c:	b9e8      	cbnz	r0, 80128ca <rmw_init_options_fini+0x5a>
 801288e:	4b12      	ldr	r3, [pc, #72]	; (80128d8 <rmw_init_options_fini+0x68>)
 8012890:	6819      	ldr	r1, [r3, #0]
 8012892:	b1b9      	cbz	r1, 80128c4 <rmw_init_options_fini+0x54>
 8012894:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8012896:	e001      	b.n	801289c <rmw_init_options_fini+0x2c>
 8012898:	6849      	ldr	r1, [r1, #4]
 801289a:	b199      	cbz	r1, 80128c4 <rmw_init_options_fini+0x54>
 801289c:	688b      	ldr	r3, [r1, #8]
 801289e:	429a      	cmp	r2, r3
 80128a0:	d1fa      	bne.n	8012898 <rmw_init_options_fini+0x28>
 80128a2:	480d      	ldr	r0, [pc, #52]	; (80128d8 <rmw_init_options_fini+0x68>)
 80128a4:	f005 fc8a 	bl	80181bc <put_memory>
 80128a8:	4668      	mov	r0, sp
 80128aa:	f7ff fd71 	bl	8012390 <rmw_get_zero_initialized_init_options>
 80128ae:	2258      	movs	r2, #88	; 0x58
 80128b0:	4669      	mov	r1, sp
 80128b2:	4620      	mov	r0, r4
 80128b4:	f007 f833 	bl	801991e <memcpy>
 80128b8:	2000      	movs	r0, #0
 80128ba:	b016      	add	sp, #88	; 0x58
 80128bc:	bd10      	pop	{r4, pc}
 80128be:	200b      	movs	r0, #11
 80128c0:	b016      	add	sp, #88	; 0x58
 80128c2:	bd10      	pop	{r4, pc}
 80128c4:	2001      	movs	r0, #1
 80128c6:	b016      	add	sp, #88	; 0x58
 80128c8:	bd10      	pop	{r4, pc}
 80128ca:	200c      	movs	r0, #12
 80128cc:	e7f5      	b.n	80128ba <rmw_init_options_fini+0x4a>
 80128ce:	200b      	movs	r0, #11
 80128d0:	4770      	bx	lr
 80128d2:	bf00      	nop
 80128d4:	0801bf00 	.word	0x0801bf00
 80128d8:	200108ac 	.word	0x200108ac

080128dc <rmw_init>:
 80128dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80128e0:	b083      	sub	sp, #12
 80128e2:	2800      	cmp	r0, #0
 80128e4:	f000 80d3 	beq.w	8012a8e <rmw_init+0x1b2>
 80128e8:	460e      	mov	r6, r1
 80128ea:	2900      	cmp	r1, #0
 80128ec:	f000 80cf 	beq.w	8012a8e <rmw_init+0x1b2>
 80128f0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80128f2:	4605      	mov	r5, r0
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	f000 80ca 	beq.w	8012a8e <rmw_init+0x1b2>
 80128fa:	4b78      	ldr	r3, [pc, #480]	; (8012adc <rmw_init+0x200>)
 80128fc:	6880      	ldr	r0, [r0, #8]
 80128fe:	681f      	ldr	r7, [r3, #0]
 8012900:	b128      	cbz	r0, 801290e <rmw_init+0x32>
 8012902:	4639      	mov	r1, r7
 8012904:	f7ed fc9c 	bl	8000240 <strcmp>
 8012908:	2800      	cmp	r0, #0
 801290a:	f040 80ca 	bne.w	8012aa2 <rmw_init+0x1c6>
 801290e:	4c74      	ldr	r4, [pc, #464]	; (8012ae0 <rmw_init+0x204>)
 8012910:	f04f 0800 	mov.w	r8, #0
 8012914:	4973      	ldr	r1, [pc, #460]	; (8012ae4 <rmw_init+0x208>)
 8012916:	4874      	ldr	r0, [pc, #464]	; (8012ae8 <rmw_init+0x20c>)
 8012918:	e9d5 2300 	ldrd	r2, r3, [r5]
 801291c:	60b7      	str	r7, [r6, #8]
 801291e:	e9c6 2300 	strd	r2, r3, [r6]
 8012922:	68eb      	ldr	r3, [r5, #12]
 8012924:	2201      	movs	r2, #1
 8012926:	66b3      	str	r3, [r6, #104]	; 0x68
 8012928:	f001 f830 	bl	801398c <rmw_uxrce_init_session_memory>
 801292c:	4620      	mov	r0, r4
 801292e:	2204      	movs	r2, #4
 8012930:	496e      	ldr	r1, [pc, #440]	; (8012aec <rmw_init+0x210>)
 8012932:	f001 f86b 	bl	8013a0c <rmw_uxrce_init_static_input_buffer_memory>
 8012936:	486c      	ldr	r0, [pc, #432]	; (8012ae8 <rmw_init+0x20c>)
 8012938:	f884 800d 	strb.w	r8, [r4, #13]
 801293c:	f005 fc2e 	bl	801819c <get_memory>
 8012940:	2800      	cmp	r0, #0
 8012942:	f000 80a9 	beq.w	8012a98 <rmw_init+0x1bc>
 8012946:	6884      	ldr	r4, [r0, #8]
 8012948:	6d68      	ldr	r0, [r5, #84]	; 0x54
 801294a:	f104 0910 	add.w	r9, r4, #16
 801294e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8012950:	f890 c010 	ldrb.w	ip, [r0, #16]
 8012954:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8012958:	9101      	str	r1, [sp, #4]
 801295a:	4661      	mov	r1, ip
 801295c:	6a00      	ldr	r0, [r0, #32]
 801295e:	9000      	str	r0, [sp, #0]
 8012960:	4648      	mov	r0, r9
 8012962:	f001 fcfb 	bl	801435c <uxr_set_custom_transport_callbacks>
 8012966:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801296a:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 801296e:	4960      	ldr	r1, [pc, #384]	; (8012af0 <rmw_init+0x214>)
 8012970:	4860      	ldr	r0, [pc, #384]	; (8012af4 <rmw_init+0x218>)
 8012972:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8012976:	f504 725e 	add.w	r2, r4, #888	; 0x378
 801297a:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 801297e:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 8012982:	2201      	movs	r2, #1
 8012984:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 8012988:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 801298c:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 8012990:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 8012994:	66f4      	str	r4, [r6, #108]	; 0x6c
 8012996:	f000 ffd9 	bl	801394c <rmw_uxrce_init_node_memory>
 801299a:	2205      	movs	r2, #5
 801299c:	4956      	ldr	r1, [pc, #344]	; (8012af8 <rmw_init+0x21c>)
 801299e:	4857      	ldr	r0, [pc, #348]	; (8012afc <rmw_init+0x220>)
 80129a0:	f000 ffb4 	bl	801390c <rmw_uxrce_init_subscription_memory>
 80129a4:	220a      	movs	r2, #10
 80129a6:	4956      	ldr	r1, [pc, #344]	; (8012b00 <rmw_init+0x224>)
 80129a8:	4856      	ldr	r0, [pc, #344]	; (8012b04 <rmw_init+0x228>)
 80129aa:	f000 ff8f 	bl	80138cc <rmw_uxrce_init_publisher_memory>
 80129ae:	2202      	movs	r2, #2
 80129b0:	4955      	ldr	r1, [pc, #340]	; (8012b08 <rmw_init+0x22c>)
 80129b2:	4856      	ldr	r0, [pc, #344]	; (8012b0c <rmw_init+0x230>)
 80129b4:	f000 ff4a 	bl	801384c <rmw_uxrce_init_service_memory>
 80129b8:	2201      	movs	r2, #1
 80129ba:	4955      	ldr	r1, [pc, #340]	; (8012b10 <rmw_init+0x234>)
 80129bc:	4855      	ldr	r0, [pc, #340]	; (8012b14 <rmw_init+0x238>)
 80129be:	f000 ff65 	bl	801388c <rmw_uxrce_init_client_memory>
 80129c2:	220f      	movs	r2, #15
 80129c4:	4954      	ldr	r1, [pc, #336]	; (8012b18 <rmw_init+0x23c>)
 80129c6:	4855      	ldr	r0, [pc, #340]	; (8012b1c <rmw_init+0x240>)
 80129c8:	f001 f800 	bl	80139cc <rmw_uxrce_init_topic_memory>
 80129cc:	2203      	movs	r2, #3
 80129ce:	4954      	ldr	r1, [pc, #336]	; (8012b20 <rmw_init+0x244>)
 80129d0:	4854      	ldr	r0, [pc, #336]	; (8012b24 <rmw_init+0x248>)
 80129d2:	f001 f83b 	bl	8013a4c <rmw_uxrce_init_init_options_impl_memory>
 80129d6:	2204      	movs	r2, #4
 80129d8:	4953      	ldr	r1, [pc, #332]	; (8012b28 <rmw_init+0x24c>)
 80129da:	4854      	ldr	r0, [pc, #336]	; (8012b2c <rmw_init+0x250>)
 80129dc:	f001 f856 	bl	8013a8c <rmw_uxrce_init_wait_set_memory>
 80129e0:	4953      	ldr	r1, [pc, #332]	; (8012b30 <rmw_init+0x254>)
 80129e2:	4854      	ldr	r0, [pc, #336]	; (8012b34 <rmw_init+0x258>)
 80129e4:	2204      	movs	r2, #4
 80129e6:	f001 f871 	bl	8013acc <rmw_uxrce_init_guard_condition_memory>
 80129ea:	4642      	mov	r2, r8
 80129ec:	6d69      	ldr	r1, [r5, #84]	; 0x54
 80129ee:	6ef0      	ldr	r0, [r6, #108]	; 0x6c
 80129f0:	f000 fd92 	bl	8013518 <rmw_uxrce_transport_init>
 80129f4:	4607      	mov	r7, r0
 80129f6:	2800      	cmp	r0, #0
 80129f8:	d158      	bne.n	8012aac <rmw_init+0x1d0>
 80129fa:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80129fc:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 8012a00:	f504 7122 	add.w	r1, r4, #648	; 0x288
 8012a04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012a06:	4628      	mov	r0, r5
 8012a08:	f001 feda 	bl	80147c0 <uxr_init_session>
 8012a0c:	4622      	mov	r2, r4
 8012a0e:	494a      	ldr	r1, [pc, #296]	; (8012b38 <rmw_init+0x25c>)
 8012a10:	4628      	mov	r0, r5
 8012a12:	f001 fef9 	bl	8014808 <uxr_set_topic_callback>
 8012a16:	463a      	mov	r2, r7
 8012a18:	4948      	ldr	r1, [pc, #288]	; (8012b3c <rmw_init+0x260>)
 8012a1a:	4628      	mov	r0, r5
 8012a1c:	f001 fef0 	bl	8014800 <uxr_set_status_callback>
 8012a20:	463a      	mov	r2, r7
 8012a22:	4947      	ldr	r1, [pc, #284]	; (8012b40 <rmw_init+0x264>)
 8012a24:	4628      	mov	r0, r5
 8012a26:	f001 fef3 	bl	8014810 <uxr_set_request_callback>
 8012a2a:	463a      	mov	r2, r7
 8012a2c:	4945      	ldr	r1, [pc, #276]	; (8012b44 <rmw_init+0x268>)
 8012a2e:	4628      	mov	r0, r5
 8012a30:	f001 fef2 	bl	8014818 <uxr_set_reply_callback>
 8012a34:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8012a38:	2304      	movs	r3, #4
 8012a3a:	f504 7165 	add.w	r1, r4, #916	; 0x394
 8012a3e:	0092      	lsls	r2, r2, #2
 8012a40:	4628      	mov	r0, r5
 8012a42:	f001 ff29 	bl	8014898 <uxr_create_input_reliable_stream>
 8012a46:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8012a4a:	2304      	movs	r3, #4
 8012a4c:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8012a50:	0092      	lsls	r2, r2, #2
 8012a52:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8012a56:	4628      	mov	r0, r5
 8012a58:	f001 fef4 	bl	8014844 <uxr_create_output_reliable_stream>
 8012a5c:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8012a60:	4628      	mov	r0, r5
 8012a62:	f001 ff13 	bl	801488c <uxr_create_input_best_effort_stream>
 8012a66:	f241 3194 	movw	r1, #5012	; 0x1394
 8012a6a:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8012a6e:	4628      	mov	r0, r5
 8012a70:	4421      	add	r1, r4
 8012a72:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8012a76:	f001 fed3 	bl	8014820 <uxr_create_output_best_effort_stream>
 8012a7a:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 8012a7e:	4628      	mov	r0, r5
 8012a80:	f002 fc5c 	bl	801533c <uxr_create_session>
 8012a84:	b1f8      	cbz	r0, 8012ac6 <rmw_init+0x1ea>
 8012a86:	4638      	mov	r0, r7
 8012a88:	b003      	add	sp, #12
 8012a8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a8e:	270b      	movs	r7, #11
 8012a90:	4638      	mov	r0, r7
 8012a92:	b003      	add	sp, #12
 8012a94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a98:	2701      	movs	r7, #1
 8012a9a:	4638      	mov	r0, r7
 8012a9c:	b003      	add	sp, #12
 8012a9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012aa2:	270c      	movs	r7, #12
 8012aa4:	4638      	mov	r0, r7
 8012aa6:	b003      	add	sp, #12
 8012aa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012aac:	4648      	mov	r0, r9
 8012aae:	f001 fc93 	bl	80143d8 <uxr_close_custom_transport>
 8012ab2:	4621      	mov	r1, r4
 8012ab4:	480c      	ldr	r0, [pc, #48]	; (8012ae8 <rmw_init+0x20c>)
 8012ab6:	f005 fb81 	bl	80181bc <put_memory>
 8012aba:	4638      	mov	r0, r7
 8012abc:	f8c6 806c 	str.w	r8, [r6, #108]	; 0x6c
 8012ac0:	b003      	add	sp, #12
 8012ac2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ac6:	4648      	mov	r0, r9
 8012ac8:	f001 fc86 	bl	80143d8 <uxr_close_custom_transport>
 8012acc:	4621      	mov	r1, r4
 8012ace:	4806      	ldr	r0, [pc, #24]	; (8012ae8 <rmw_init+0x20c>)
 8012ad0:	f005 fb74 	bl	80181bc <put_memory>
 8012ad4:	66f7      	str	r7, [r6, #108]	; 0x6c
 8012ad6:	2701      	movs	r7, #1
 8012ad8:	e7d5      	b.n	8012a86 <rmw_init+0x1aa>
 8012ada:	bf00      	nop
 8012adc:	0801bf00 	.word	0x0801bf00
 8012ae0:	200108fc 	.word	0x200108fc
 8012ae4:	2000cba8 	.word	0x2000cba8
 8012ae8:	200108ec 	.word	0x200108ec
 8012aec:	2000e150 	.word	0x2000e150
 8012af0:	2000c104 	.word	0x2000c104
 8012af4:	200108bc 	.word	0x200108bc
 8012af8:	20010250 	.word	0x20010250
 8012afc:	2001090c 	.word	0x2001090c
 8012b00:	2000c1a8 	.word	0x2000c1a8
 8012b04:	200108cc 	.word	0x200108cc
 8012b08:	2000ca18 	.word	0x2000ca18
 8012b0c:	200108dc 	.word	0x200108dc
 8012b10:	2000bf38 	.word	0x2000bf38
 8012b14:	2000bf28 	.word	0x2000bf28
 8012b18:	20010688 	.word	0x20010688
 8012b1c:	2001091c 	.word	0x2001091c
 8012b20:	2000c080 	.word	0x2000c080
 8012b24:	200108ac 	.word	0x200108ac
 8012b28:	2001082c 	.word	0x2001082c
 8012b2c:	2001092c 	.word	0x2001092c
 8012b30:	2000c000 	.word	0x2000c000
 8012b34:	2001089c 	.word	0x2001089c
 8012b38:	08017fd5 	.word	0x08017fd5
 8012b3c:	08017fcd 	.word	0x08017fcd
 8012b40:	0801806d 	.word	0x0801806d
 8012b44:	08018109 	.word	0x08018109

08012b48 <rmw_context_fini>:
 8012b48:	4b17      	ldr	r3, [pc, #92]	; (8012ba8 <rmw_context_fini+0x60>)
 8012b4a:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8012b4c:	b570      	push	{r4, r5, r6, lr}
 8012b4e:	681c      	ldr	r4, [r3, #0]
 8012b50:	4605      	mov	r5, r0
 8012b52:	b334      	cbz	r4, 8012ba2 <rmw_context_fini+0x5a>
 8012b54:	2600      	movs	r6, #0
 8012b56:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8012b5a:	6902      	ldr	r2, [r0, #16]
 8012b5c:	428a      	cmp	r2, r1
 8012b5e:	d018      	beq.n	8012b92 <rmw_context_fini+0x4a>
 8012b60:	2c00      	cmp	r4, #0
 8012b62:	d1f8      	bne.n	8012b56 <rmw_context_fini+0xe>
 8012b64:	b189      	cbz	r1, 8012b8a <rmw_context_fini+0x42>
 8012b66:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 8012b6a:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 8012b6e:	789b      	ldrb	r3, [r3, #2]
 8012b70:	2b01      	cmp	r3, #1
 8012b72:	bf14      	ite	ne
 8012b74:	210a      	movne	r1, #10
 8012b76:	2100      	moveq	r1, #0
 8012b78:	f002 fbb8 	bl	80152ec <uxr_delete_session_retries>
 8012b7c:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8012b7e:	f000 ffc5 	bl	8013b0c <rmw_uxrce_fini_session_memory>
 8012b82:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8012b84:	3010      	adds	r0, #16
 8012b86:	f001 fc27 	bl	80143d8 <uxr_close_custom_transport>
 8012b8a:	2300      	movs	r3, #0
 8012b8c:	4630      	mov	r0, r6
 8012b8e:	66eb      	str	r3, [r5, #108]	; 0x6c
 8012b90:	bd70      	pop	{r4, r5, r6, pc}
 8012b92:	3018      	adds	r0, #24
 8012b94:	f000 f89c 	bl	8012cd0 <rmw_destroy_node>
 8012b98:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 8012b9a:	4606      	mov	r6, r0
 8012b9c:	2c00      	cmp	r4, #0
 8012b9e:	d1da      	bne.n	8012b56 <rmw_context_fini+0xe>
 8012ba0:	e7e0      	b.n	8012b64 <rmw_context_fini+0x1c>
 8012ba2:	4626      	mov	r6, r4
 8012ba4:	e7de      	b.n	8012b64 <rmw_context_fini+0x1c>
 8012ba6:	bf00      	nop
 8012ba8:	200108bc 	.word	0x200108bc

08012bac <create_node>:
 8012bac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012bb0:	b083      	sub	sp, #12
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d064      	beq.n	8012c80 <create_node+0xd4>
 8012bb6:	4606      	mov	r6, r0
 8012bb8:	4838      	ldr	r0, [pc, #224]	; (8012c9c <create_node+0xf0>)
 8012bba:	460f      	mov	r7, r1
 8012bbc:	4690      	mov	r8, r2
 8012bbe:	461d      	mov	r5, r3
 8012bc0:	f005 faec 	bl	801819c <get_memory>
 8012bc4:	2800      	cmp	r0, #0
 8012bc6:	d05b      	beq.n	8012c80 <create_node+0xd4>
 8012bc8:	6884      	ldr	r4, [r0, #8]
 8012bca:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8012bcc:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 8012bd0:	f104 0518 	add.w	r5, r4, #24
 8012bd4:	6123      	str	r3, [r4, #16]
 8012bd6:	f7ff fdab 	bl	8012730 <rmw_get_implementation_identifier>
 8012bda:	f8c4 9020 	str.w	r9, [r4, #32]
 8012bde:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8012be2:	4630      	mov	r0, r6
 8012be4:	f7ed fb8c 	bl	8000300 <strlen>
 8012be8:	1c42      	adds	r2, r0, #1
 8012bea:	2a3c      	cmp	r2, #60	; 0x3c
 8012bec:	d840      	bhi.n	8012c70 <create_node+0xc4>
 8012bee:	4648      	mov	r0, r9
 8012bf0:	f104 0968 	add.w	r9, r4, #104	; 0x68
 8012bf4:	4631      	mov	r1, r6
 8012bf6:	f006 fe92 	bl	801991e <memcpy>
 8012bfa:	4638      	mov	r0, r7
 8012bfc:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8012c00:	f7ed fb7e 	bl	8000300 <strlen>
 8012c04:	1c42      	adds	r2, r0, #1
 8012c06:	2a3c      	cmp	r2, #60	; 0x3c
 8012c08:	d832      	bhi.n	8012c70 <create_node+0xc4>
 8012c0a:	4639      	mov	r1, r7
 8012c0c:	4648      	mov	r0, r9
 8012c0e:	f006 fe86 	bl	801991e <memcpy>
 8012c12:	6923      	ldr	r3, [r4, #16]
 8012c14:	2101      	movs	r1, #1
 8012c16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012c1a:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 8012c1e:	1842      	adds	r2, r0, r1
 8012c20:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 8012c24:	f001 fbdc 	bl	80143e0 <uxr_object_id>
 8012c28:	6160      	str	r0, [r4, #20]
 8012c2a:	783b      	ldrb	r3, [r7, #0]
 8012c2c:	2b2f      	cmp	r3, #47	; 0x2f
 8012c2e:	d12c      	bne.n	8012c8a <create_node+0xde>
 8012c30:	787b      	ldrb	r3, [r7, #1]
 8012c32:	bb53      	cbnz	r3, 8012c8a <create_node+0xde>
 8012c34:	4633      	mov	r3, r6
 8012c36:	4a1a      	ldr	r2, [pc, #104]	; (8012ca0 <create_node+0xf4>)
 8012c38:	213c      	movs	r1, #60	; 0x3c
 8012c3a:	481a      	ldr	r0, [pc, #104]	; (8012ca4 <create_node+0xf8>)
 8012c3c:	f006 fc20 	bl	8019480 <sniprintf>
 8012c40:	6920      	ldr	r0, [r4, #16]
 8012c42:	2106      	movs	r1, #6
 8012c44:	fa1f f388 	uxth.w	r3, r8
 8012c48:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8012c4c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012c50:	9101      	str	r1, [sp, #4]
 8012c52:	4914      	ldr	r1, [pc, #80]	; (8012ca4 <create_node+0xf8>)
 8012c54:	9100      	str	r1, [sp, #0]
 8012c56:	6811      	ldr	r1, [r2, #0]
 8012c58:	6962      	ldr	r2, [r4, #20]
 8012c5a:	f001 fa97 	bl	801418c <uxr_buffer_create_participant_bin>
 8012c5e:	4602      	mov	r2, r0
 8012c60:	6920      	ldr	r0, [r4, #16]
 8012c62:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8012c66:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8012c6a:	f001 f8d3 	bl	8013e14 <run_xrce_session>
 8012c6e:	b918      	cbnz	r0, 8012c78 <create_node+0xcc>
 8012c70:	4628      	mov	r0, r5
 8012c72:	2500      	movs	r5, #0
 8012c74:	f000 ff50 	bl	8013b18 <rmw_uxrce_fini_node_memory>
 8012c78:	4628      	mov	r0, r5
 8012c7a:	b003      	add	sp, #12
 8012c7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c80:	2500      	movs	r5, #0
 8012c82:	4628      	mov	r0, r5
 8012c84:	b003      	add	sp, #12
 8012c86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c8a:	463b      	mov	r3, r7
 8012c8c:	4a06      	ldr	r2, [pc, #24]	; (8012ca8 <create_node+0xfc>)
 8012c8e:	213c      	movs	r1, #60	; 0x3c
 8012c90:	9600      	str	r6, [sp, #0]
 8012c92:	4804      	ldr	r0, [pc, #16]	; (8012ca4 <create_node+0xf8>)
 8012c94:	f006 fbf4 	bl	8019480 <sniprintf>
 8012c98:	e7d2      	b.n	8012c40 <create_node+0x94>
 8012c9a:	bf00      	nop
 8012c9c:	200108bc 	.word	0x200108bc
 8012ca0:	0801baa4 	.word	0x0801baa4
 8012ca4:	2000bdac 	.word	0x2000bdac
 8012ca8:	0801b518 	.word	0x0801b518

08012cac <rmw_create_node>:
 8012cac:	468c      	mov	ip, r1
 8012cae:	4611      	mov	r1, r2
 8012cb0:	f1bc 0f00 	cmp.w	ip, #0
 8012cb4:	d00a      	beq.n	8012ccc <rmw_create_node+0x20>
 8012cb6:	f89c 3000 	ldrb.w	r3, [ip]
 8012cba:	b13b      	cbz	r3, 8012ccc <rmw_create_node+0x20>
 8012cbc:	b132      	cbz	r2, 8012ccc <rmw_create_node+0x20>
 8012cbe:	7813      	ldrb	r3, [r2, #0]
 8012cc0:	b123      	cbz	r3, 8012ccc <rmw_create_node+0x20>
 8012cc2:	4603      	mov	r3, r0
 8012cc4:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8012cc6:	4660      	mov	r0, ip
 8012cc8:	f7ff bf70 	b.w	8012bac <create_node>
 8012ccc:	2000      	movs	r0, #0
 8012cce:	4770      	bx	lr

08012cd0 <rmw_destroy_node>:
 8012cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cd2:	b328      	cbz	r0, 8012d20 <rmw_destroy_node+0x50>
 8012cd4:	4607      	mov	r7, r0
 8012cd6:	6800      	ldr	r0, [r0, #0]
 8012cd8:	b120      	cbz	r0, 8012ce4 <rmw_destroy_node+0x14>
 8012cda:	4b37      	ldr	r3, [pc, #220]	; (8012db8 <rmw_destroy_node+0xe8>)
 8012cdc:	6819      	ldr	r1, [r3, #0]
 8012cde:	f7ed faaf 	bl	8000240 <strcmp>
 8012ce2:	b9e8      	cbnz	r0, 8012d20 <rmw_destroy_node+0x50>
 8012ce4:	687d      	ldr	r5, [r7, #4]
 8012ce6:	b1dd      	cbz	r5, 8012d20 <rmw_destroy_node+0x50>
 8012ce8:	4b34      	ldr	r3, [pc, #208]	; (8012dbc <rmw_destroy_node+0xec>)
 8012cea:	681c      	ldr	r4, [r3, #0]
 8012cec:	2c00      	cmp	r4, #0
 8012cee:	d060      	beq.n	8012db2 <rmw_destroy_node+0xe2>
 8012cf0:	2600      	movs	r6, #0
 8012cf2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8012cf6:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8012cfa:	429d      	cmp	r5, r3
 8012cfc:	d013      	beq.n	8012d26 <rmw_destroy_node+0x56>
 8012cfe:	2c00      	cmp	r4, #0
 8012d00:	d1f7      	bne.n	8012cf2 <rmw_destroy_node+0x22>
 8012d02:	4b2f      	ldr	r3, [pc, #188]	; (8012dc0 <rmw_destroy_node+0xf0>)
 8012d04:	681c      	ldr	r4, [r3, #0]
 8012d06:	b1c4      	cbz	r4, 8012d3a <rmw_destroy_node+0x6a>
 8012d08:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8012d0c:	6a0b      	ldr	r3, [r1, #32]
 8012d0e:	429d      	cmp	r5, r3
 8012d10:	d1f9      	bne.n	8012d06 <rmw_destroy_node+0x36>
 8012d12:	317c      	adds	r1, #124	; 0x7c
 8012d14:	4638      	mov	r0, r7
 8012d16:	f000 fb49 	bl	80133ac <rmw_destroy_subscription>
 8012d1a:	2801      	cmp	r0, #1
 8012d1c:	4606      	mov	r6, r0
 8012d1e:	d1f2      	bne.n	8012d06 <rmw_destroy_node+0x36>
 8012d20:	2601      	movs	r6, #1
 8012d22:	4630      	mov	r0, r6
 8012d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d26:	3184      	adds	r1, #132	; 0x84
 8012d28:	4638      	mov	r0, r7
 8012d2a:	f000 f855 	bl	8012dd8 <rmw_destroy_publisher>
 8012d2e:	2801      	cmp	r0, #1
 8012d30:	4606      	mov	r6, r0
 8012d32:	d0f5      	beq.n	8012d20 <rmw_destroy_node+0x50>
 8012d34:	2c00      	cmp	r4, #0
 8012d36:	d1dc      	bne.n	8012cf2 <rmw_destroy_node+0x22>
 8012d38:	e7e3      	b.n	8012d02 <rmw_destroy_node+0x32>
 8012d3a:	4b22      	ldr	r3, [pc, #136]	; (8012dc4 <rmw_destroy_node+0xf4>)
 8012d3c:	681c      	ldr	r4, [r3, #0]
 8012d3e:	b16c      	cbz	r4, 8012d5c <rmw_destroy_node+0x8c>
 8012d40:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8012d44:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8012d46:	429d      	cmp	r5, r3
 8012d48:	d1f9      	bne.n	8012d3e <rmw_destroy_node+0x6e>
 8012d4a:	317c      	adds	r1, #124	; 0x7c
 8012d4c:	4638      	mov	r0, r7
 8012d4e:	f000 fac1 	bl	80132d4 <rmw_destroy_service>
 8012d52:	2801      	cmp	r0, #1
 8012d54:	4606      	mov	r6, r0
 8012d56:	d0e3      	beq.n	8012d20 <rmw_destroy_node+0x50>
 8012d58:	2c00      	cmp	r4, #0
 8012d5a:	d1f1      	bne.n	8012d40 <rmw_destroy_node+0x70>
 8012d5c:	4b1a      	ldr	r3, [pc, #104]	; (8012dc8 <rmw_destroy_node+0xf8>)
 8012d5e:	681c      	ldr	r4, [r3, #0]
 8012d60:	b16c      	cbz	r4, 8012d7e <rmw_destroy_node+0xae>
 8012d62:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8012d66:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8012d68:	429d      	cmp	r5, r3
 8012d6a:	d1f9      	bne.n	8012d60 <rmw_destroy_node+0x90>
 8012d6c:	317c      	adds	r1, #124	; 0x7c
 8012d6e:	4638      	mov	r0, r7
 8012d70:	f7ff fc7c 	bl	801266c <rmw_destroy_client>
 8012d74:	2801      	cmp	r0, #1
 8012d76:	4606      	mov	r6, r0
 8012d78:	d0d2      	beq.n	8012d20 <rmw_destroy_node+0x50>
 8012d7a:	2c00      	cmp	r4, #0
 8012d7c:	d1f1      	bne.n	8012d62 <rmw_destroy_node+0x92>
 8012d7e:	6928      	ldr	r0, [r5, #16]
 8012d80:	696a      	ldr	r2, [r5, #20]
 8012d82:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012d86:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012d8a:	6819      	ldr	r1, [r3, #0]
 8012d8c:	f001 f9b2 	bl	80140f4 <uxr_buffer_delete_entity>
 8012d90:	4602      	mov	r2, r0
 8012d92:	6928      	ldr	r0, [r5, #16]
 8012d94:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8012d98:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8012d9c:	f001 f83a 	bl	8013e14 <run_xrce_session>
 8012da0:	4603      	mov	r3, r0
 8012da2:	4638      	mov	r0, r7
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	bf08      	it	eq
 8012da8:	2602      	moveq	r6, #2
 8012daa:	f000 feb5 	bl	8013b18 <rmw_uxrce_fini_node_memory>
 8012dae:	4630      	mov	r0, r6
 8012db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012db2:	4626      	mov	r6, r4
 8012db4:	e7a5      	b.n	8012d02 <rmw_destroy_node+0x32>
 8012db6:	bf00      	nop
 8012db8:	0801bf00 	.word	0x0801bf00
 8012dbc:	200108cc 	.word	0x200108cc
 8012dc0:	2001090c 	.word	0x2001090c
 8012dc4:	200108dc 	.word	0x200108dc
 8012dc8:	2000bf28 	.word	0x2000bf28

08012dcc <rmw_node_get_graph_guard_condition>:
 8012dcc:	6843      	ldr	r3, [r0, #4]
 8012dce:	6918      	ldr	r0, [r3, #16]
 8012dd0:	f500 705a 	add.w	r0, r0, #872	; 0x368
 8012dd4:	4770      	bx	lr
 8012dd6:	bf00      	nop

08012dd8 <rmw_destroy_publisher>:
 8012dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ddc:	b128      	cbz	r0, 8012dea <rmw_destroy_publisher+0x12>
 8012dde:	4604      	mov	r4, r0
 8012de0:	6800      	ldr	r0, [r0, #0]
 8012de2:	460d      	mov	r5, r1
 8012de4:	f001 f8e2 	bl	8013fac <is_uxrce_rmw_identifier_valid>
 8012de8:	b918      	cbnz	r0, 8012df2 <rmw_destroy_publisher+0x1a>
 8012dea:	2401      	movs	r4, #1
 8012dec:	4620      	mov	r0, r4
 8012dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012df2:	6863      	ldr	r3, [r4, #4]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d0f8      	beq.n	8012dea <rmw_destroy_publisher+0x12>
 8012df8:	fab5 f485 	clz	r4, r5
 8012dfc:	0964      	lsrs	r4, r4, #5
 8012dfe:	2d00      	cmp	r5, #0
 8012e00:	d0f3      	beq.n	8012dea <rmw_destroy_publisher+0x12>
 8012e02:	6828      	ldr	r0, [r5, #0]
 8012e04:	f001 f8d2 	bl	8013fac <is_uxrce_rmw_identifier_valid>
 8012e08:	2800      	cmp	r0, #0
 8012e0a:	d0ee      	beq.n	8012dea <rmw_destroy_publisher+0x12>
 8012e0c:	686e      	ldr	r6, [r5, #4]
 8012e0e:	2e00      	cmp	r6, #0
 8012e10:	d0eb      	beq.n	8012dea <rmw_destroy_publisher+0x12>
 8012e12:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8012e14:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 8012e18:	f005 fa0e 	bl	8018238 <destroy_topic>
 8012e1c:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8012e20:	6972      	ldr	r2, [r6, #20]
 8012e22:	6918      	ldr	r0, [r3, #16]
 8012e24:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012e28:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012e2c:	6819      	ldr	r1, [r3, #0]
 8012e2e:	f001 f961 	bl	80140f4 <uxr_buffer_delete_entity>
 8012e32:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8012e36:	4680      	mov	r8, r0
 8012e38:	6932      	ldr	r2, [r6, #16]
 8012e3a:	6918      	ldr	r0, [r3, #16]
 8012e3c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012e40:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012e44:	6819      	ldr	r1, [r3, #0]
 8012e46:	f001 f955 	bl	80140f4 <uxr_buffer_delete_entity>
 8012e4a:	4606      	mov	r6, r0
 8012e4c:	6938      	ldr	r0, [r7, #16]
 8012e4e:	4642      	mov	r2, r8
 8012e50:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8012e54:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8012e58:	f000 ffdc 	bl	8013e14 <run_xrce_session>
 8012e5c:	693f      	ldr	r7, [r7, #16]
 8012e5e:	4632      	mov	r2, r6
 8012e60:	4606      	mov	r6, r0
 8012e62:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8012e66:	4638      	mov	r0, r7
 8012e68:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8012e6c:	f000 ffd2 	bl	8013e14 <run_xrce_session>
 8012e70:	b126      	cbz	r6, 8012e7c <rmw_destroy_publisher+0xa4>
 8012e72:	b118      	cbz	r0, 8012e7c <rmw_destroy_publisher+0xa4>
 8012e74:	4628      	mov	r0, r5
 8012e76:	f000 fe67 	bl	8013b48 <rmw_uxrce_fini_publisher_memory>
 8012e7a:	e7b7      	b.n	8012dec <rmw_destroy_publisher+0x14>
 8012e7c:	2402      	movs	r4, #2
 8012e7e:	e7f9      	b.n	8012e74 <rmw_destroy_publisher+0x9c>

08012e80 <rmw_send_request>:
 8012e80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012e84:	4604      	mov	r4, r0
 8012e86:	6800      	ldr	r0, [r0, #0]
 8012e88:	b08b      	sub	sp, #44	; 0x2c
 8012e8a:	460e      	mov	r6, r1
 8012e8c:	4615      	mov	r5, r2
 8012e8e:	b128      	cbz	r0, 8012e9c <rmw_send_request+0x1c>
 8012e90:	4b21      	ldr	r3, [pc, #132]	; (8012f18 <rmw_send_request+0x98>)
 8012e92:	6819      	ldr	r1, [r3, #0]
 8012e94:	f7ed f9d4 	bl	8000240 <strcmp>
 8012e98:	2800      	cmp	r0, #0
 8012e9a:	d139      	bne.n	8012f10 <rmw_send_request+0x90>
 8012e9c:	6864      	ldr	r4, [r4, #4]
 8012e9e:	2700      	movs	r7, #0
 8012ea0:	6963      	ldr	r3, [r4, #20]
 8012ea2:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
 8012ea6:	689b      	ldr	r3, [r3, #8]
 8012ea8:	4798      	blx	r3
 8012eaa:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8012eae:	4630      	mov	r0, r6
 8012eb0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012eb4:	4798      	blx	r3
 8012eb6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012eba:	9000      	str	r0, [sp, #0]
 8012ebc:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8012ec0:	6922      	ldr	r2, [r4, #16]
 8012ec2:	ab02      	add	r3, sp, #8
 8012ec4:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8012ec6:	f003 fb41 	bl	801654c <uxr_prepare_output_stream>
 8012eca:	e9c5 0700 	strd	r0, r7, [r5]
 8012ece:	b198      	cbz	r0, 8012ef8 <rmw_send_request+0x78>
 8012ed0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8012ed4:	a902      	add	r1, sp, #8
 8012ed6:	4630      	mov	r0, r6
 8012ed8:	4798      	blx	r3
 8012eda:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 8012ede:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8012ee2:	2b01      	cmp	r3, #1
 8012ee4:	d00c      	beq.n	8012f00 <rmw_send_request+0x80>
 8012ee6:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8012ee8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012eec:	f002 f8b4 	bl	8015058 <uxr_run_session_until_confirm_delivery>
 8012ef0:	4638      	mov	r0, r7
 8012ef2:	b00b      	add	sp, #44	; 0x2c
 8012ef4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ef8:	2001      	movs	r0, #1
 8012efa:	b00b      	add	sp, #44	; 0x2c
 8012efc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f00:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012f04:	f001 fcee 	bl	80148e4 <uxr_flash_output_streams>
 8012f08:	4638      	mov	r0, r7
 8012f0a:	b00b      	add	sp, #44	; 0x2c
 8012f0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f10:	200c      	movs	r0, #12
 8012f12:	b00b      	add	sp, #44	; 0x2c
 8012f14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f18:	0801bf00 	.word	0x0801bf00

08012f1c <rmw_take_request>:
 8012f1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012f20:	4605      	mov	r5, r0
 8012f22:	6800      	ldr	r0, [r0, #0]
 8012f24:	b089      	sub	sp, #36	; 0x24
 8012f26:	460c      	mov	r4, r1
 8012f28:	4690      	mov	r8, r2
 8012f2a:	461e      	mov	r6, r3
 8012f2c:	b128      	cbz	r0, 8012f3a <rmw_take_request+0x1e>
 8012f2e:	4b28      	ldr	r3, [pc, #160]	; (8012fd0 <rmw_take_request+0xb4>)
 8012f30:	6819      	ldr	r1, [r3, #0]
 8012f32:	f7ed f985 	bl	8000240 <strcmp>
 8012f36:	2800      	cmp	r0, #0
 8012f38:	d146      	bne.n	8012fc8 <rmw_take_request+0xac>
 8012f3a:	b10e      	cbz	r6, 8012f40 <rmw_take_request+0x24>
 8012f3c:	2300      	movs	r3, #0
 8012f3e:	7033      	strb	r3, [r6, #0]
 8012f40:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8012f44:	f000 fee8 	bl	8013d18 <rmw_uxrce_clean_expired_static_input_buffer>
 8012f48:	4648      	mov	r0, r9
 8012f4a:	f000 febb 	bl	8013cc4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8012f4e:	4607      	mov	r7, r0
 8012f50:	b3b0      	cbz	r0, 8012fc0 <rmw_take_request+0xa4>
 8012f52:	6885      	ldr	r5, [r0, #8]
 8012f54:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 8012f58:	f8d5 383c 	ldr.w	r3, [r5, #2108]	; 0x83c
 8012f5c:	e9c4 3208 	strd	r3, r2, [r4, #32]
 8012f60:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 8012f64:	7423      	strb	r3, [r4, #16]
 8012f66:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	; 0x834
 8012f6a:	f895 3836 	ldrb.w	r3, [r5, #2102]	; 0x836
 8012f6e:	f8a4 2011 	strh.w	r2, [r4, #17]
 8012f72:	74e3      	strb	r3, [r4, #19]
 8012f74:	f8d5 1828 	ldr.w	r1, [r5, #2088]	; 0x828
 8012f78:	f8d5 282c 	ldr.w	r2, [r5, #2092]	; 0x82c
 8012f7c:	f8d5 3830 	ldr.w	r3, [r5, #2096]	; 0x830
 8012f80:	6161      	str	r1, [r4, #20]
 8012f82:	61a2      	str	r2, [r4, #24]
 8012f84:	61e3      	str	r3, [r4, #28]
 8012f86:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8012f8a:	689b      	ldr	r3, [r3, #8]
 8012f8c:	4798      	blx	r3
 8012f8e:	6844      	ldr	r4, [r0, #4]
 8012f90:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 8012f94:	f105 0110 	add.w	r1, r5, #16
 8012f98:	4668      	mov	r0, sp
 8012f9a:	f7fa ff8d 	bl	800deb8 <ucdr_init_buffer>
 8012f9e:	4641      	mov	r1, r8
 8012fa0:	68e3      	ldr	r3, [r4, #12]
 8012fa2:	4668      	mov	r0, sp
 8012fa4:	4798      	blx	r3
 8012fa6:	4639      	mov	r1, r7
 8012fa8:	4604      	mov	r4, r0
 8012faa:	480a      	ldr	r0, [pc, #40]	; (8012fd4 <rmw_take_request+0xb8>)
 8012fac:	f005 f906 	bl	80181bc <put_memory>
 8012fb0:	b106      	cbz	r6, 8012fb4 <rmw_take_request+0x98>
 8012fb2:	7034      	strb	r4, [r6, #0]
 8012fb4:	f084 0001 	eor.w	r0, r4, #1
 8012fb8:	b2c0      	uxtb	r0, r0
 8012fba:	b009      	add	sp, #36	; 0x24
 8012fbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012fc0:	2001      	movs	r0, #1
 8012fc2:	b009      	add	sp, #36	; 0x24
 8012fc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012fc8:	200c      	movs	r0, #12
 8012fca:	b009      	add	sp, #36	; 0x24
 8012fcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012fd0:	0801bf00 	.word	0x0801bf00
 8012fd4:	200108fc 	.word	0x200108fc

08012fd8 <rmw_send_response>:
 8012fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012fda:	4605      	mov	r5, r0
 8012fdc:	6800      	ldr	r0, [r0, #0]
 8012fde:	b091      	sub	sp, #68	; 0x44
 8012fe0:	460c      	mov	r4, r1
 8012fe2:	4616      	mov	r6, r2
 8012fe4:	b128      	cbz	r0, 8012ff2 <rmw_send_response+0x1a>
 8012fe6:	4b29      	ldr	r3, [pc, #164]	; (801308c <rmw_send_response+0xb4>)
 8012fe8:	6819      	ldr	r1, [r3, #0]
 8012fea:	f7ed f929 	bl	8000240 <strcmp>
 8012fee:	2800      	cmp	r0, #0
 8012ff0:	d141      	bne.n	8013076 <rmw_send_response+0x9e>
 8012ff2:	686d      	ldr	r5, [r5, #4]
 8012ff4:	68a1      	ldr	r1, [r4, #8]
 8012ff6:	6860      	ldr	r0, [r4, #4]
 8012ff8:	6faf      	ldr	r7, [r5, #120]	; 0x78
 8012ffa:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8012ffe:	9307      	str	r3, [sp, #28]
 8013000:	4623      	mov	r3, r4
 8013002:	9206      	str	r2, [sp, #24]
 8013004:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013008:	789b      	ldrb	r3, [r3, #2]
 801300a:	f88d 2017 	strb.w	r2, [sp, #23]
 801300e:	f88d 3016 	strb.w	r3, [sp, #22]
 8013012:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8013016:	68e2      	ldr	r2, [r4, #12]
 8013018:	f8ad 3014 	strh.w	r3, [sp, #20]
 801301c:	ab02      	add	r3, sp, #8
 801301e:	696c      	ldr	r4, [r5, #20]
 8013020:	c307      	stmia	r3!, {r0, r1, r2}
 8013022:	68e3      	ldr	r3, [r4, #12]
 8013024:	4798      	blx	r3
 8013026:	6844      	ldr	r4, [r0, #4]
 8013028:	4630      	mov	r0, r6
 801302a:	6923      	ldr	r3, [r4, #16]
 801302c:	4798      	blx	r3
 801302e:	f100 0318 	add.w	r3, r0, #24
 8013032:	6938      	ldr	r0, [r7, #16]
 8013034:	9300      	str	r3, [sp, #0]
 8013036:	ab08      	add	r3, sp, #32
 8013038:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801303c:	692a      	ldr	r2, [r5, #16]
 801303e:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8013040:	f003 fa84 	bl	801654c <uxr_prepare_output_stream>
 8013044:	b910      	cbnz	r0, 801304c <rmw_send_response+0x74>
 8013046:	2001      	movs	r0, #1
 8013048:	b011      	add	sp, #68	; 0x44
 801304a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801304c:	a902      	add	r1, sp, #8
 801304e:	a808      	add	r0, sp, #32
 8013050:	f004 f9a6 	bl	80173a0 <uxr_serialize_SampleIdentity>
 8013054:	68a3      	ldr	r3, [r4, #8]
 8013056:	a908      	add	r1, sp, #32
 8013058:	4630      	mov	r0, r6
 801305a:	4798      	blx	r3
 801305c:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 8013060:	6938      	ldr	r0, [r7, #16]
 8013062:	2b01      	cmp	r3, #1
 8013064:	d00a      	beq.n	801307c <rmw_send_response+0xa4>
 8013066:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8013068:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801306c:	f001 fff4 	bl	8015058 <uxr_run_session_until_confirm_delivery>
 8013070:	2000      	movs	r0, #0
 8013072:	b011      	add	sp, #68	; 0x44
 8013074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013076:	200c      	movs	r0, #12
 8013078:	b011      	add	sp, #68	; 0x44
 801307a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801307c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013080:	f001 fc30 	bl	80148e4 <uxr_flash_output_streams>
 8013084:	2000      	movs	r0, #0
 8013086:	b011      	add	sp, #68	; 0x44
 8013088:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801308a:	bf00      	nop
 801308c:	0801bf00 	.word	0x0801bf00

08013090 <rmw_take_response>:
 8013090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013094:	4604      	mov	r4, r0
 8013096:	6800      	ldr	r0, [r0, #0]
 8013098:	b088      	sub	sp, #32
 801309a:	460f      	mov	r7, r1
 801309c:	4690      	mov	r8, r2
 801309e:	461d      	mov	r5, r3
 80130a0:	b120      	cbz	r0, 80130ac <rmw_take_response+0x1c>
 80130a2:	4b1d      	ldr	r3, [pc, #116]	; (8013118 <rmw_take_response+0x88>)
 80130a4:	6819      	ldr	r1, [r3, #0]
 80130a6:	f7ed f8cb 	bl	8000240 <strcmp>
 80130aa:	bb68      	cbnz	r0, 8013108 <rmw_take_response+0x78>
 80130ac:	b10d      	cbz	r5, 80130b2 <rmw_take_response+0x22>
 80130ae:	2300      	movs	r3, #0
 80130b0:	702b      	strb	r3, [r5, #0]
 80130b2:	6864      	ldr	r4, [r4, #4]
 80130b4:	f000 fe30 	bl	8013d18 <rmw_uxrce_clean_expired_static_input_buffer>
 80130b8:	4620      	mov	r0, r4
 80130ba:	f000 fe03 	bl	8013cc4 <rmw_uxrce_find_static_input_buffer_by_owner>
 80130be:	4606      	mov	r6, r0
 80130c0:	b330      	cbz	r0, 8013110 <rmw_take_response+0x80>
 80130c2:	6963      	ldr	r3, [r4, #20]
 80130c4:	6884      	ldr	r4, [r0, #8]
 80130c6:	68db      	ldr	r3, [r3, #12]
 80130c8:	f504 6203 	add.w	r2, r4, #2096	; 0x830
 80130cc:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 80130d0:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80130d4:	4798      	blx	r3
 80130d6:	6847      	ldr	r7, [r0, #4]
 80130d8:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 80130dc:	f104 0110 	add.w	r1, r4, #16
 80130e0:	4668      	mov	r0, sp
 80130e2:	f7fa fee9 	bl	800deb8 <ucdr_init_buffer>
 80130e6:	4641      	mov	r1, r8
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	4668      	mov	r0, sp
 80130ec:	4798      	blx	r3
 80130ee:	4631      	mov	r1, r6
 80130f0:	4604      	mov	r4, r0
 80130f2:	480a      	ldr	r0, [pc, #40]	; (801311c <rmw_take_response+0x8c>)
 80130f4:	f005 f862 	bl	80181bc <put_memory>
 80130f8:	b105      	cbz	r5, 80130fc <rmw_take_response+0x6c>
 80130fa:	702c      	strb	r4, [r5, #0]
 80130fc:	f084 0001 	eor.w	r0, r4, #1
 8013100:	b2c0      	uxtb	r0, r0
 8013102:	b008      	add	sp, #32
 8013104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013108:	200c      	movs	r0, #12
 801310a:	b008      	add	sp, #32
 801310c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013110:	2001      	movs	r0, #1
 8013112:	b008      	add	sp, #32
 8013114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013118:	0801bf00 	.word	0x0801bf00
 801311c:	200108fc 	.word	0x200108fc

08013120 <rmw_create_service>:
 8013120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013124:	b091      	sub	sp, #68	; 0x44
 8013126:	2900      	cmp	r1, #0
 8013128:	f000 80bb 	beq.w	80132a2 <rmw_create_service+0x182>
 801312c:	4606      	mov	r6, r0
 801312e:	2800      	cmp	r0, #0
 8013130:	f000 80b7 	beq.w	80132a2 <rmw_create_service+0x182>
 8013134:	4614      	mov	r4, r2
 8013136:	6800      	ldr	r0, [r0, #0]
 8013138:	4689      	mov	r9, r1
 801313a:	461d      	mov	r5, r3
 801313c:	f000 ff36 	bl	8013fac <is_uxrce_rmw_identifier_valid>
 8013140:	2c00      	cmp	r4, #0
 8013142:	f000 80ae 	beq.w	80132a2 <rmw_create_service+0x182>
 8013146:	f080 0001 	eor.w	r0, r0, #1
 801314a:	b2c0      	uxtb	r0, r0
 801314c:	2800      	cmp	r0, #0
 801314e:	f040 80a8 	bne.w	80132a2 <rmw_create_service+0x182>
 8013152:	7823      	ldrb	r3, [r4, #0]
 8013154:	2b00      	cmp	r3, #0
 8013156:	f000 80a4 	beq.w	80132a2 <rmw_create_service+0x182>
 801315a:	2d00      	cmp	r5, #0
 801315c:	f000 80a1 	beq.w	80132a2 <rmw_create_service+0x182>
 8013160:	4856      	ldr	r0, [pc, #344]	; (80132bc <rmw_create_service+0x19c>)
 8013162:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8013166:	f005 f819 	bl	801819c <get_memory>
 801316a:	4606      	mov	r6, r0
 801316c:	2800      	cmp	r0, #0
 801316e:	f000 8099 	beq.w	80132a4 <rmw_create_service+0x184>
 8013172:	6887      	ldr	r7, [r0, #8]
 8013174:	f107 0a88 	add.w	sl, r7, #136	; 0x88
 8013178:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 801317c:	f7ff fad8 	bl	8012730 <rmw_get_implementation_identifier>
 8013180:	67f8      	str	r0, [r7, #124]	; 0x7c
 8013182:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 8013186:	4620      	mov	r0, r4
 8013188:	f7ed f8ba 	bl	8000300 <strlen>
 801318c:	1c42      	adds	r2, r0, #1
 801318e:	f107 067c 	add.w	r6, r7, #124	; 0x7c
 8013192:	2a3c      	cmp	r2, #60	; 0x3c
 8013194:	f200 808a 	bhi.w	80132ac <rmw_create_service+0x18c>
 8013198:	4621      	mov	r1, r4
 801319a:	4650      	mov	r0, sl
 801319c:	f006 fbbf 	bl	801991e <memcpy>
 80131a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80131a4:	4629      	mov	r1, r5
 80131a6:	2250      	movs	r2, #80	; 0x50
 80131a8:	f107 0020 	add.w	r0, r7, #32
 80131ac:	f8c7 8078 	str.w	r8, [r7, #120]	; 0x78
 80131b0:	677b      	str	r3, [r7, #116]	; 0x74
 80131b2:	f006 fbb4 	bl	801991e <memcpy>
 80131b6:	4648      	mov	r0, r9
 80131b8:	4941      	ldr	r1, [pc, #260]	; (80132c0 <rmw_create_service+0x1a0>)
 80131ba:	f7f9 f8e5 	bl	800c388 <get_service_typesupport_handle>
 80131be:	2800      	cmp	r0, #0
 80131c0:	d074      	beq.n	80132ac <rmw_create_service+0x18c>
 80131c2:	6843      	ldr	r3, [r0, #4]
 80131c4:	617b      	str	r3, [r7, #20]
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d070      	beq.n	80132ac <rmw_create_service+0x18c>
 80131ca:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80131ce:	2108      	movs	r1, #8
 80131d0:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 80132c8 <rmw_create_service+0x1a8>
 80131d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80131d8:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 80132cc <rmw_create_service+0x1ac>
 80131dc:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	; 0x5a2
 80131e0:	1c42      	adds	r2, r0, #1
 80131e2:	f8a3 25a2 	strh.w	r2, [r3, #1442]	; 0x5a2
 80131e6:	f001 f8fb 	bl	80143e0 <uxr_object_id>
 80131ea:	2364      	movs	r3, #100	; 0x64
 80131ec:	6138      	str	r0, [r7, #16]
 80131ee:	4652      	mov	r2, sl
 80131f0:	4649      	mov	r1, r9
 80131f2:	6978      	ldr	r0, [r7, #20]
 80131f4:	f000 fe74 	bl	8013ee0 <generate_service_types>
 80131f8:	2800      	cmp	r0, #0
 80131fa:	d057      	beq.n	80132ac <rmw_create_service+0x18c>
 80131fc:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 80132d0 <rmw_create_service+0x1b0>
 8013200:	233c      	movs	r3, #60	; 0x3c
 8013202:	4a30      	ldr	r2, [pc, #192]	; (80132c4 <rmw_create_service+0x1a4>)
 8013204:	4620      	mov	r0, r4
 8013206:	4659      	mov	r1, fp
 8013208:	f000 fe38 	bl	8013e7c <generate_service_topics>
 801320c:	2800      	cmp	r0, #0
 801320e:	d04d      	beq.n	80132ac <rmw_create_service+0x18c>
 8013210:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013214:	a80c      	add	r0, sp, #48	; 0x30
 8013216:	4629      	mov	r1, r5
 8013218:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 801321c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013220:	f000 fe14 	bl	8013e4c <convert_qos_profile>
 8013224:	4a27      	ldr	r2, [pc, #156]	; (80132c4 <rmw_create_service+0x1a4>)
 8013226:	a80c      	add	r0, sp, #48	; 0x30
 8013228:	9400      	str	r4, [sp, #0]
 801322a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801322c:	e9cd b203 	strd	fp, r2, [sp, #12]
 8013230:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 8013234:	c803      	ldmia	r0, {r0, r1}
 8013236:	9a08      	ldr	r2, [sp, #32]
 8013238:	9005      	str	r0, [sp, #20]
 801323a:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 801323e:	2306      	movs	r3, #6
 8013240:	f8ad 1018 	strh.w	r1, [sp, #24]
 8013244:	9307      	str	r3, [sp, #28]
 8013246:	6811      	ldr	r1, [r2, #0]
 8013248:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801324c:	693a      	ldr	r2, [r7, #16]
 801324e:	f000 ffcf 	bl	80141f0 <uxr_buffer_create_replier_bin>
 8013252:	4602      	mov	r2, r0
 8013254:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8013258:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801325c:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8013260:	f000 fdd8 	bl	8013e14 <run_xrce_session>
 8013264:	b310      	cbz	r0, 80132ac <rmw_create_service+0x18c>
 8013266:	7a2b      	ldrb	r3, [r5, #8]
 8013268:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801326c:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8013270:	2b02      	cmp	r3, #2
 8013272:	920e      	str	r2, [sp, #56]	; 0x38
 8013274:	f04f 0200 	mov.w	r2, #0
 8013278:	920f      	str	r2, [sp, #60]	; 0x3c
 801327a:	bf0c      	ite	eq
 801327c:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	; 0x37c
 8013280:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	; 0x374
 8013284:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013288:	930b      	str	r3, [sp, #44]	; 0x2c
 801328a:	ab0e      	add	r3, sp, #56	; 0x38
 801328c:	673a      	str	r2, [r7, #112]	; 0x70
 801328e:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4
 8013292:	9300      	str	r3, [sp, #0]
 8013294:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013296:	6811      	ldr	r1, [r2, #0]
 8013298:	693a      	ldr	r2, [r7, #16]
 801329a:	f001 f8d1 	bl	8014440 <uxr_buffer_request_data>
 801329e:	8338      	strh	r0, [r7, #24]
 80132a0:	e000      	b.n	80132a4 <rmw_create_service+0x184>
 80132a2:	2600      	movs	r6, #0
 80132a4:	4630      	mov	r0, r6
 80132a6:	b011      	add	sp, #68	; 0x44
 80132a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132ac:	4630      	mov	r0, r6
 80132ae:	2600      	movs	r6, #0
 80132b0:	f000 fc76 	bl	8013ba0 <rmw_uxrce_fini_service_memory>
 80132b4:	4630      	mov	r0, r6
 80132b6:	b011      	add	sp, #68	; 0x44
 80132b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132bc:	200108dc 	.word	0x200108dc
 80132c0:	0801a800 	.word	0x0801a800
 80132c4:	2000be88 	.word	0x2000be88
 80132c8:	2000bec4 	.word	0x2000bec4
 80132cc:	2000be24 	.word	0x2000be24
 80132d0:	2000bde8 	.word	0x2000bde8

080132d4 <rmw_destroy_service>:
 80132d4:	b570      	push	{r4, r5, r6, lr}
 80132d6:	b128      	cbz	r0, 80132e4 <rmw_destroy_service+0x10>
 80132d8:	4604      	mov	r4, r0
 80132da:	6800      	ldr	r0, [r0, #0]
 80132dc:	460d      	mov	r5, r1
 80132de:	f000 fe65 	bl	8013fac <is_uxrce_rmw_identifier_valid>
 80132e2:	b910      	cbnz	r0, 80132ea <rmw_destroy_service+0x16>
 80132e4:	2401      	movs	r4, #1
 80132e6:	4620      	mov	r0, r4
 80132e8:	bd70      	pop	{r4, r5, r6, pc}
 80132ea:	6863      	ldr	r3, [r4, #4]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d0f9      	beq.n	80132e4 <rmw_destroy_service+0x10>
 80132f0:	2d00      	cmp	r5, #0
 80132f2:	d0f7      	beq.n	80132e4 <rmw_destroy_service+0x10>
 80132f4:	6828      	ldr	r0, [r5, #0]
 80132f6:	f000 fe59 	bl	8013fac <is_uxrce_rmw_identifier_valid>
 80132fa:	2800      	cmp	r0, #0
 80132fc:	d0f2      	beq.n	80132e4 <rmw_destroy_service+0x10>
 80132fe:	686e      	ldr	r6, [r5, #4]
 8013300:	2e00      	cmp	r6, #0
 8013302:	d0ef      	beq.n	80132e4 <rmw_destroy_service+0x10>
 8013304:	6864      	ldr	r4, [r4, #4]
 8013306:	6932      	ldr	r2, [r6, #16]
 8013308:	6920      	ldr	r0, [r4, #16]
 801330a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801330e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013312:	6819      	ldr	r1, [r3, #0]
 8013314:	f001 f8ce 	bl	80144b4 <uxr_buffer_cancel_data>
 8013318:	4602      	mov	r2, r0
 801331a:	6920      	ldr	r0, [r4, #16]
 801331c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8013320:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8013324:	f000 fd76 	bl	8013e14 <run_xrce_session>
 8013328:	6920      	ldr	r0, [r4, #16]
 801332a:	6932      	ldr	r2, [r6, #16]
 801332c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8013330:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013334:	6819      	ldr	r1, [r3, #0]
 8013336:	f000 fedd 	bl	80140f4 <uxr_buffer_delete_entity>
 801333a:	4602      	mov	r2, r0
 801333c:	6920      	ldr	r0, [r4, #16]
 801333e:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8013342:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8013346:	f000 fd65 	bl	8013e14 <run_xrce_session>
 801334a:	4603      	mov	r3, r0
 801334c:	4628      	mov	r0, r5
 801334e:	2b00      	cmp	r3, #0
 8013350:	bf14      	ite	ne
 8013352:	2400      	movne	r4, #0
 8013354:	2402      	moveq	r4, #2
 8013356:	f000 fc23 	bl	8013ba0 <rmw_uxrce_fini_service_memory>
 801335a:	e7c4      	b.n	80132e6 <rmw_destroy_service+0x12>

0801335c <rmw_service_response_publisher_get_actual_qos>:
 801335c:	b181      	cbz	r1, 8013380 <rmw_service_response_publisher_get_actual_qos+0x24>
 801335e:	4603      	mov	r3, r0
 8013360:	b510      	push	{r4, lr}
 8013362:	fab0 f480 	clz	r4, r0
 8013366:	0964      	lsrs	r4, r4, #5
 8013368:	b140      	cbz	r0, 801337c <rmw_service_response_publisher_get_actual_qos+0x20>
 801336a:	685b      	ldr	r3, [r3, #4]
 801336c:	4608      	mov	r0, r1
 801336e:	2250      	movs	r2, #80	; 0x50
 8013370:	f103 0120 	add.w	r1, r3, #32
 8013374:	f006 fad3 	bl	801991e <memcpy>
 8013378:	4620      	mov	r0, r4
 801337a:	bd10      	pop	{r4, pc}
 801337c:	200b      	movs	r0, #11
 801337e:	bd10      	pop	{r4, pc}
 8013380:	200b      	movs	r0, #11
 8013382:	4770      	bx	lr

08013384 <rmw_service_request_subscription_get_actual_qos>:
 8013384:	b178      	cbz	r0, 80133a6 <rmw_service_request_subscription_get_actual_qos+0x22>
 8013386:	b510      	push	{r4, lr}
 8013388:	fab1 f481 	clz	r4, r1
 801338c:	0964      	lsrs	r4, r4, #5
 801338e:	b141      	cbz	r1, 80133a2 <rmw_service_request_subscription_get_actual_qos+0x1e>
 8013390:	6843      	ldr	r3, [r0, #4]
 8013392:	2250      	movs	r2, #80	; 0x50
 8013394:	4608      	mov	r0, r1
 8013396:	f103 0120 	add.w	r1, r3, #32
 801339a:	f006 fac0 	bl	801991e <memcpy>
 801339e:	4620      	mov	r0, r4
 80133a0:	bd10      	pop	{r4, pc}
 80133a2:	200b      	movs	r0, #11
 80133a4:	bd10      	pop	{r4, pc}
 80133a6:	200b      	movs	r0, #11
 80133a8:	4770      	bx	lr
 80133aa:	bf00      	nop

080133ac <rmw_destroy_subscription>:
 80133ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133b0:	b128      	cbz	r0, 80133be <rmw_destroy_subscription+0x12>
 80133b2:	4604      	mov	r4, r0
 80133b4:	6800      	ldr	r0, [r0, #0]
 80133b6:	460d      	mov	r5, r1
 80133b8:	f000 fdf8 	bl	8013fac <is_uxrce_rmw_identifier_valid>
 80133bc:	b918      	cbnz	r0, 80133c6 <rmw_destroy_subscription+0x1a>
 80133be:	2401      	movs	r4, #1
 80133c0:	4620      	mov	r0, r4
 80133c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133c6:	6863      	ldr	r3, [r4, #4]
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d0f8      	beq.n	80133be <rmw_destroy_subscription+0x12>
 80133cc:	fab5 f485 	clz	r4, r5
 80133d0:	0964      	lsrs	r4, r4, #5
 80133d2:	2d00      	cmp	r5, #0
 80133d4:	d0f3      	beq.n	80133be <rmw_destroy_subscription+0x12>
 80133d6:	6828      	ldr	r0, [r5, #0]
 80133d8:	f000 fde8 	bl	8013fac <is_uxrce_rmw_identifier_valid>
 80133dc:	2800      	cmp	r0, #0
 80133de:	d0ee      	beq.n	80133be <rmw_destroy_subscription+0x12>
 80133e0:	686e      	ldr	r6, [r5, #4]
 80133e2:	2e00      	cmp	r6, #0
 80133e4:	d0eb      	beq.n	80133be <rmw_destroy_subscription+0x12>
 80133e6:	6a37      	ldr	r7, [r6, #32]
 80133e8:	6972      	ldr	r2, [r6, #20]
 80133ea:	6938      	ldr	r0, [r7, #16]
 80133ec:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80133f0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80133f4:	6819      	ldr	r1, [r3, #0]
 80133f6:	f001 f85d 	bl	80144b4 <uxr_buffer_cancel_data>
 80133fa:	4602      	mov	r2, r0
 80133fc:	6938      	ldr	r0, [r7, #16]
 80133fe:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8013402:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8013406:	f000 fd05 	bl	8013e14 <run_xrce_session>
 801340a:	69f0      	ldr	r0, [r6, #28]
 801340c:	f004 ff14 	bl	8018238 <destroy_topic>
 8013410:	6a33      	ldr	r3, [r6, #32]
 8013412:	6972      	ldr	r2, [r6, #20]
 8013414:	6918      	ldr	r0, [r3, #16]
 8013416:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801341a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801341e:	6819      	ldr	r1, [r3, #0]
 8013420:	f000 fe68 	bl	80140f4 <uxr_buffer_delete_entity>
 8013424:	6a33      	ldr	r3, [r6, #32]
 8013426:	4680      	mov	r8, r0
 8013428:	6932      	ldr	r2, [r6, #16]
 801342a:	6918      	ldr	r0, [r3, #16]
 801342c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8013430:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013434:	6819      	ldr	r1, [r3, #0]
 8013436:	f000 fe5d 	bl	80140f4 <uxr_buffer_delete_entity>
 801343a:	4606      	mov	r6, r0
 801343c:	6938      	ldr	r0, [r7, #16]
 801343e:	4642      	mov	r2, r8
 8013440:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8013444:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8013448:	f000 fce4 	bl	8013e14 <run_xrce_session>
 801344c:	693f      	ldr	r7, [r7, #16]
 801344e:	4632      	mov	r2, r6
 8013450:	4606      	mov	r6, r0
 8013452:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8013456:	4638      	mov	r0, r7
 8013458:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 801345c:	f000 fcda 	bl	8013e14 <run_xrce_session>
 8013460:	b126      	cbz	r6, 801346c <rmw_destroy_subscription+0xc0>
 8013462:	b118      	cbz	r0, 801346c <rmw_destroy_subscription+0xc0>
 8013464:	4628      	mov	r0, r5
 8013466:	f000 fb85 	bl	8013b74 <rmw_uxrce_fini_subscription_memory>
 801346a:	e7a9      	b.n	80133c0 <rmw_destroy_subscription+0x14>
 801346c:	2402      	movs	r4, #2
 801346e:	e7f9      	b.n	8013464 <rmw_destroy_subscription+0xb8>

08013470 <rmw_take_with_info>:
 8013470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013472:	4604      	mov	r4, r0
 8013474:	6800      	ldr	r0, [r0, #0]
 8013476:	b089      	sub	sp, #36	; 0x24
 8013478:	460f      	mov	r7, r1
 801347a:	4615      	mov	r5, r2
 801347c:	b128      	cbz	r0, 801348a <rmw_take_with_info+0x1a>
 801347e:	4b24      	ldr	r3, [pc, #144]	; (8013510 <rmw_take_with_info+0xa0>)
 8013480:	6819      	ldr	r1, [r3, #0]
 8013482:	f7ec fedd 	bl	8000240 <strcmp>
 8013486:	2800      	cmp	r0, #0
 8013488:	d13e      	bne.n	8013508 <rmw_take_with_info+0x98>
 801348a:	b305      	cbz	r5, 80134ce <rmw_take_with_info+0x5e>
 801348c:	2300      	movs	r3, #0
 801348e:	6864      	ldr	r4, [r4, #4]
 8013490:	702b      	strb	r3, [r5, #0]
 8013492:	f000 fc41 	bl	8013d18 <rmw_uxrce_clean_expired_static_input_buffer>
 8013496:	4620      	mov	r0, r4
 8013498:	f000 fc14 	bl	8013cc4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801349c:	4606      	mov	r6, r0
 801349e:	b1f0      	cbz	r0, 80134de <rmw_take_with_info+0x6e>
 80134a0:	6881      	ldr	r1, [r0, #8]
 80134a2:	4668      	mov	r0, sp
 80134a4:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 80134a8:	3110      	adds	r1, #16
 80134aa:	f7fa fd05 	bl	800deb8 <ucdr_init_buffer>
 80134ae:	69a3      	ldr	r3, [r4, #24]
 80134b0:	4639      	mov	r1, r7
 80134b2:	4668      	mov	r0, sp
 80134b4:	68db      	ldr	r3, [r3, #12]
 80134b6:	4798      	blx	r3
 80134b8:	4604      	mov	r4, r0
 80134ba:	4631      	mov	r1, r6
 80134bc:	4815      	ldr	r0, [pc, #84]	; (8013514 <rmw_take_with_info+0xa4>)
 80134be:	f004 fe7d 	bl	80181bc <put_memory>
 80134c2:	702c      	strb	r4, [r5, #0]
 80134c4:	f084 0001 	eor.w	r0, r4, #1
 80134c8:	b2c0      	uxtb	r0, r0
 80134ca:	b009      	add	sp, #36	; 0x24
 80134cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80134ce:	6864      	ldr	r4, [r4, #4]
 80134d0:	f000 fc22 	bl	8013d18 <rmw_uxrce_clean_expired_static_input_buffer>
 80134d4:	4620      	mov	r0, r4
 80134d6:	f000 fbf5 	bl	8013cc4 <rmw_uxrce_find_static_input_buffer_by_owner>
 80134da:	4605      	mov	r5, r0
 80134dc:	b910      	cbnz	r0, 80134e4 <rmw_take_with_info+0x74>
 80134de:	2001      	movs	r0, #1
 80134e0:	b009      	add	sp, #36	; 0x24
 80134e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80134e4:	68a9      	ldr	r1, [r5, #8]
 80134e6:	4668      	mov	r0, sp
 80134e8:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 80134ec:	3110      	adds	r1, #16
 80134ee:	f7fa fce3 	bl	800deb8 <ucdr_init_buffer>
 80134f2:	69a3      	ldr	r3, [r4, #24]
 80134f4:	4639      	mov	r1, r7
 80134f6:	4668      	mov	r0, sp
 80134f8:	68db      	ldr	r3, [r3, #12]
 80134fa:	4798      	blx	r3
 80134fc:	4629      	mov	r1, r5
 80134fe:	4604      	mov	r4, r0
 8013500:	4804      	ldr	r0, [pc, #16]	; (8013514 <rmw_take_with_info+0xa4>)
 8013502:	f004 fe5b 	bl	80181bc <put_memory>
 8013506:	e7dd      	b.n	80134c4 <rmw_take_with_info+0x54>
 8013508:	200c      	movs	r0, #12
 801350a:	b009      	add	sp, #36	; 0x24
 801350c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801350e:	bf00      	nop
 8013510:	0801bf00 	.word	0x0801bf00
 8013514:	200108fc 	.word	0x200108fc

08013518 <rmw_uxrce_transport_init>:
 8013518:	b508      	push	{r3, lr}
 801351a:	b108      	cbz	r0, 8013520 <rmw_uxrce_transport_init+0x8>
 801351c:	f100 0210 	add.w	r2, r0, #16
 8013520:	b139      	cbz	r1, 8013532 <rmw_uxrce_transport_init+0x1a>
 8013522:	6949      	ldr	r1, [r1, #20]
 8013524:	4610      	mov	r0, r2
 8013526:	f000 ff23 	bl	8014370 <uxr_init_custom_transport>
 801352a:	f080 0001 	eor.w	r0, r0, #1
 801352e:	b2c0      	uxtb	r0, r0
 8013530:	bd08      	pop	{r3, pc}
 8013532:	4b04      	ldr	r3, [pc, #16]	; (8013544 <rmw_uxrce_transport_init+0x2c>)
 8013534:	4610      	mov	r0, r2
 8013536:	6859      	ldr	r1, [r3, #4]
 8013538:	f000 ff1a 	bl	8014370 <uxr_init_custom_transport>
 801353c:	f080 0001 	eor.w	r0, r0, #1
 8013540:	b2c0      	uxtb	r0, r0
 8013542:	bd08      	pop	{r3, pc}
 8013544:	2000b94c 	.word	0x2000b94c

08013548 <rmw_wait>:
 8013548:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801354c:	4698      	mov	r8, r3
 801354e:	ea40 0301 	orr.w	r3, r0, r1
 8013552:	b089      	sub	sp, #36	; 0x24
 8013554:	ea48 0303 	orr.w	r3, r8, r3
 8013558:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801355a:	4313      	orrs	r3, r2
 801355c:	f000 8106 	beq.w	801376c <rmw_wait+0x224>
 8013560:	4605      	mov	r5, r0
 8013562:	460e      	mov	r6, r1
 8013564:	4691      	mov	r9, r2
 8013566:	b16c      	cbz	r4, 8013584 <rmw_wait+0x3c>
 8013568:	4ba6      	ldr	r3, [pc, #664]	; (8013804 <rmw_wait+0x2bc>)
 801356a:	af04      	add	r7, sp, #16
 801356c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801356e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8013572:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013576:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801357a:	f004 fc9f 	bl	8017ebc <rmw_time_equal>
 801357e:	2800      	cmp	r0, #0
 8013580:	f000 810b 	beq.w	801379a <rmw_wait+0x252>
 8013584:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013588:	f000 fbc6 	bl	8013d18 <rmw_uxrce_clean_expired_static_input_buffer>
 801358c:	4b9e      	ldr	r3, [pc, #632]	; (8013808 <rmw_wait+0x2c0>)
 801358e:	681c      	ldr	r4, [r3, #0]
 8013590:	b14c      	cbz	r4, 80135a6 <rmw_wait+0x5e>
 8013592:	4623      	mov	r3, r4
 8013594:	2100      	movs	r1, #0
 8013596:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801359a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801359e:	f882 15a4 	strb.w	r1, [r2, #1444]	; 0x5a4
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d1f7      	bne.n	8013596 <rmw_wait+0x4e>
 80135a6:	f1b9 0f00 	cmp.w	r9, #0
 80135aa:	d011      	beq.n	80135d0 <rmw_wait+0x88>
 80135ac:	f8d9 1000 	ldr.w	r1, [r9]
 80135b0:	b171      	cbz	r1, 80135d0 <rmw_wait+0x88>
 80135b2:	f8d9 c004 	ldr.w	ip, [r9, #4]
 80135b6:	2300      	movs	r3, #0
 80135b8:	2001      	movs	r0, #1
 80135ba:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80135be:	3301      	adds	r3, #1
 80135c0:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80135c2:	4299      	cmp	r1, r3
 80135c4:	6912      	ldr	r2, [r2, #16]
 80135c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80135ca:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 80135ce:	d1f4      	bne.n	80135ba <rmw_wait+0x72>
 80135d0:	f1b8 0f00 	cmp.w	r8, #0
 80135d4:	d011      	beq.n	80135fa <rmw_wait+0xb2>
 80135d6:	f8d8 1000 	ldr.w	r1, [r8]
 80135da:	b171      	cbz	r1, 80135fa <rmw_wait+0xb2>
 80135dc:	f8d8 c004 	ldr.w	ip, [r8, #4]
 80135e0:	2300      	movs	r3, #0
 80135e2:	2001      	movs	r0, #1
 80135e4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80135e8:	3301      	adds	r3, #1
 80135ea:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80135ec:	4299      	cmp	r1, r3
 80135ee:	6912      	ldr	r2, [r2, #16]
 80135f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80135f4:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 80135f8:	d1f4      	bne.n	80135e4 <rmw_wait+0x9c>
 80135fa:	b185      	cbz	r5, 801361e <rmw_wait+0xd6>
 80135fc:	6829      	ldr	r1, [r5, #0]
 80135fe:	b171      	cbz	r1, 801361e <rmw_wait+0xd6>
 8013600:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8013604:	2300      	movs	r3, #0
 8013606:	2001      	movs	r0, #1
 8013608:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801360c:	3301      	adds	r3, #1
 801360e:	6a12      	ldr	r2, [r2, #32]
 8013610:	4299      	cmp	r1, r3
 8013612:	6912      	ldr	r2, [r2, #16]
 8013614:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8013618:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801361c:	d1f4      	bne.n	8013608 <rmw_wait+0xc0>
 801361e:	b344      	cbz	r4, 8013672 <rmw_wait+0x12a>
 8013620:	4622      	mov	r2, r4
 8013622:	2300      	movs	r3, #0
 8013624:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8013628:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 801362c:	f891 15a4 	ldrb.w	r1, [r1, #1444]	; 0x5a4
 8013630:	440b      	add	r3, r1
 8013632:	b2db      	uxtb	r3, r3
 8013634:	2a00      	cmp	r2, #0
 8013636:	d1f5      	bne.n	8013624 <rmw_wait+0xdc>
 8013638:	2b00      	cmp	r3, #0
 801363a:	d05f      	beq.n	80136fc <rmw_wait+0x1b4>
 801363c:	1c7a      	adds	r2, r7, #1
 801363e:	d00d      	beq.n	801365c <rmw_wait+0x114>
 8013640:	ee07 7a90 	vmov	s15, r7
 8013644:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013648:	ee07 3a90 	vmov	s15, r3
 801364c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013650:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013654:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8013658:	ee17 7a90 	vmov	r7, s15
 801365c:	68a0      	ldr	r0, [r4, #8]
 801365e:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8013662:	f893 35a4 	ldrb.w	r3, [r3, #1444]	; 0x5a4
 8013666:	2b00      	cmp	r3, #0
 8013668:	f040 808d 	bne.w	8013786 <rmw_wait+0x23e>
 801366c:	6864      	ldr	r4, [r4, #4]
 801366e:	2c00      	cmp	r4, #0
 8013670:	d1f4      	bne.n	801365c <rmw_wait+0x114>
 8013672:	f1b9 0f00 	cmp.w	r9, #0
 8013676:	f000 80a1 	beq.w	80137bc <rmw_wait+0x274>
 801367a:	f8d9 7000 	ldr.w	r7, [r9]
 801367e:	2f00      	cmp	r7, #0
 8013680:	f000 80a4 	beq.w	80137cc <rmw_wait+0x284>
 8013684:	2400      	movs	r4, #0
 8013686:	4627      	mov	r7, r4
 8013688:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801368c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013690:	f000 fb18 	bl	8013cc4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013694:	2800      	cmp	r0, #0
 8013696:	d03b      	beq.n	8013710 <rmw_wait+0x1c8>
 8013698:	3401      	adds	r4, #1
 801369a:	f8d9 3000 	ldr.w	r3, [r9]
 801369e:	2701      	movs	r7, #1
 80136a0:	42a3      	cmp	r3, r4
 80136a2:	d8f1      	bhi.n	8013688 <rmw_wait+0x140>
 80136a4:	2701      	movs	r7, #1
 80136a6:	f1b8 0f00 	cmp.w	r8, #0
 80136aa:	d010      	beq.n	80136ce <rmw_wait+0x186>
 80136ac:	f8d8 3000 	ldr.w	r3, [r8]
 80136b0:	b16b      	cbz	r3, 80136ce <rmw_wait+0x186>
 80136b2:	2400      	movs	r4, #0
 80136b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80136b8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80136bc:	f000 fb02 	bl	8013cc4 <rmw_uxrce_find_static_input_buffer_by_owner>
 80136c0:	b370      	cbz	r0, 8013720 <rmw_wait+0x1d8>
 80136c2:	3401      	adds	r4, #1
 80136c4:	f8d8 3000 	ldr.w	r3, [r8]
 80136c8:	2701      	movs	r7, #1
 80136ca:	42a3      	cmp	r3, r4
 80136cc:	d8f2      	bhi.n	80136b4 <rmw_wait+0x16c>
 80136ce:	2d00      	cmp	r5, #0
 80136d0:	d035      	beq.n	801373e <rmw_wait+0x1f6>
 80136d2:	682b      	ldr	r3, [r5, #0]
 80136d4:	b39b      	cbz	r3, 801373e <rmw_wait+0x1f6>
 80136d6:	2400      	movs	r4, #0
 80136d8:	686b      	ldr	r3, [r5, #4]
 80136da:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80136de:	f000 faf1 	bl	8013cc4 <rmw_uxrce_find_static_input_buffer_by_owner>
 80136e2:	b328      	cbz	r0, 8013730 <rmw_wait+0x1e8>
 80136e4:	3401      	adds	r4, #1
 80136e6:	682b      	ldr	r3, [r5, #0]
 80136e8:	2701      	movs	r7, #1
 80136ea:	42a3      	cmp	r3, r4
 80136ec:	d8f4      	bhi.n	80136d8 <rmw_wait+0x190>
 80136ee:	2e00      	cmp	r6, #0
 80136f0:	d03c      	beq.n	801376c <rmw_wait+0x224>
 80136f2:	6834      	ldr	r4, [r6, #0]
 80136f4:	2c00      	cmp	r4, #0
 80136f6:	d039      	beq.n	801376c <rmw_wait+0x224>
 80136f8:	2701      	movs	r7, #1
 80136fa:	e023      	b.n	8013744 <rmw_wait+0x1fc>
 80136fc:	68a0      	ldr	r0, [r4, #8]
 80136fe:	2100      	movs	r1, #0
 8013700:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013704:	f001 fc6e 	bl	8014fe4 <uxr_run_session_timeout>
 8013708:	6864      	ldr	r4, [r4, #4]
 801370a:	2c00      	cmp	r4, #0
 801370c:	d1f6      	bne.n	80136fc <rmw_wait+0x1b4>
 801370e:	e7b0      	b.n	8013672 <rmw_wait+0x12a>
 8013710:	e9d9 3200 	ldrd	r3, r2, [r9]
 8013714:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8013718:	3401      	adds	r4, #1
 801371a:	42a3      	cmp	r3, r4
 801371c:	d8b4      	bhi.n	8013688 <rmw_wait+0x140>
 801371e:	e7c2      	b.n	80136a6 <rmw_wait+0x15e>
 8013720:	e9d8 3200 	ldrd	r3, r2, [r8]
 8013724:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8013728:	3401      	adds	r4, #1
 801372a:	429c      	cmp	r4, r3
 801372c:	d3c2      	bcc.n	80136b4 <rmw_wait+0x16c>
 801372e:	e7ce      	b.n	80136ce <rmw_wait+0x186>
 8013730:	e9d5 3200 	ldrd	r3, r2, [r5]
 8013734:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8013738:	3401      	adds	r4, #1
 801373a:	42a3      	cmp	r3, r4
 801373c:	d8cc      	bhi.n	80136d8 <rmw_wait+0x190>
 801373e:	b1a6      	cbz	r6, 801376a <rmw_wait+0x222>
 8013740:	6834      	ldr	r4, [r6, #0]
 8013742:	b194      	cbz	r4, 801376a <rmw_wait+0x222>
 8013744:	2300      	movs	r3, #0
 8013746:	461d      	mov	r5, r3
 8013748:	e004      	b.n	8013754 <rmw_wait+0x20c>
 801374a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801374e:	3301      	adds	r3, #1
 8013750:	42a3      	cmp	r3, r4
 8013752:	d00a      	beq.n	801376a <rmw_wait+0x222>
 8013754:	6870      	ldr	r0, [r6, #4]
 8013756:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801375a:	7c0a      	ldrb	r2, [r1, #16]
 801375c:	2a00      	cmp	r2, #0
 801375e:	d0f4      	beq.n	801374a <rmw_wait+0x202>
 8013760:	3301      	adds	r3, #1
 8013762:	4617      	mov	r7, r2
 8013764:	740d      	strb	r5, [r1, #16]
 8013766:	42a3      	cmp	r3, r4
 8013768:	d1f4      	bne.n	8013754 <rmw_wait+0x20c>
 801376a:	b147      	cbz	r7, 801377e <rmw_wait+0x236>
 801376c:	2000      	movs	r0, #0
 801376e:	b009      	add	sp, #36	; 0x24
 8013770:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013774:	b11e      	cbz	r6, 801377e <rmw_wait+0x236>
 8013776:	6834      	ldr	r4, [r6, #0]
 8013778:	462f      	mov	r7, r5
 801377a:	2c00      	cmp	r4, #0
 801377c:	d1e2      	bne.n	8013744 <rmw_wait+0x1fc>
 801377e:	2002      	movs	r0, #2
 8013780:	b009      	add	sp, #36	; 0x24
 8013782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013786:	4639      	mov	r1, r7
 8013788:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801378c:	f001 fc44 	bl	8015018 <uxr_run_session_until_data>
 8013790:	6864      	ldr	r4, [r4, #4]
 8013792:	2c00      	cmp	r4, #0
 8013794:	f47f af62 	bne.w	801365c <rmw_wait+0x114>
 8013798:	e76b      	b.n	8013672 <rmw_wait+0x12a>
 801379a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801379e:	f004 fbe3 	bl	8017f68 <rmw_time_total_nsec>
 80137a2:	2300      	movs	r3, #0
 80137a4:	4a19      	ldr	r2, [pc, #100]	; (801380c <rmw_wait+0x2c4>)
 80137a6:	f7ec fe03 	bl	80003b0 <__aeabi_uldivmod>
 80137aa:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80137ae:	4607      	mov	r7, r0
 80137b0:	f171 0300 	sbcs.w	r3, r1, #0
 80137b4:	bfa8      	it	ge
 80137b6:	f06f 4700 	mvnge.w	r7, #2147483648	; 0x80000000
 80137ba:	e6e5      	b.n	8013588 <rmw_wait+0x40>
 80137bc:	f1b8 0f00 	cmp.w	r8, #0
 80137c0:	d00f      	beq.n	80137e2 <rmw_wait+0x29a>
 80137c2:	f8d8 3000 	ldr.w	r3, [r8]
 80137c6:	b193      	cbz	r3, 80137ee <rmw_wait+0x2a6>
 80137c8:	464f      	mov	r7, r9
 80137ca:	e772      	b.n	80136b2 <rmw_wait+0x16a>
 80137cc:	f1b8 0f00 	cmp.w	r8, #0
 80137d0:	d007      	beq.n	80137e2 <rmw_wait+0x29a>
 80137d2:	f8d8 3000 	ldr.w	r3, [r8]
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	f47f af6b 	bne.w	80136b2 <rmw_wait+0x16a>
 80137dc:	b155      	cbz	r5, 80137f4 <rmw_wait+0x2ac>
 80137de:	461f      	mov	r7, r3
 80137e0:	e777      	b.n	80136d2 <rmw_wait+0x18a>
 80137e2:	2d00      	cmp	r5, #0
 80137e4:	d0c6      	beq.n	8013774 <rmw_wait+0x22c>
 80137e6:	682b      	ldr	r3, [r5, #0]
 80137e8:	b143      	cbz	r3, 80137fc <rmw_wait+0x2b4>
 80137ea:	4647      	mov	r7, r8
 80137ec:	e773      	b.n	80136d6 <rmw_wait+0x18e>
 80137ee:	b10d      	cbz	r5, 80137f4 <rmw_wait+0x2ac>
 80137f0:	464f      	mov	r7, r9
 80137f2:	e76e      	b.n	80136d2 <rmw_wait+0x18a>
 80137f4:	462f      	mov	r7, r5
 80137f6:	2e00      	cmp	r6, #0
 80137f8:	d1a2      	bne.n	8013740 <rmw_wait+0x1f8>
 80137fa:	e7c0      	b.n	801377e <rmw_wait+0x236>
 80137fc:	4647      	mov	r7, r8
 80137fe:	2e00      	cmp	r6, #0
 8013800:	d19e      	bne.n	8013740 <rmw_wait+0x1f8>
 8013802:	e7bc      	b.n	801377e <rmw_wait+0x236>
 8013804:	0801a6a8 	.word	0x0801a6a8
 8013808:	200108ec 	.word	0x200108ec
 801380c:	000f4240 	.word	0x000f4240

08013810 <rmw_create_wait_set>:
 8013810:	b508      	push	{r3, lr}
 8013812:	4803      	ldr	r0, [pc, #12]	; (8013820 <rmw_create_wait_set+0x10>)
 8013814:	f004 fcc2 	bl	801819c <get_memory>
 8013818:	b108      	cbz	r0, 801381e <rmw_create_wait_set+0xe>
 801381a:	6880      	ldr	r0, [r0, #8]
 801381c:	3010      	adds	r0, #16
 801381e:	bd08      	pop	{r3, pc}
 8013820:	2001092c 	.word	0x2001092c

08013824 <rmw_destroy_wait_set>:
 8013824:	b508      	push	{r3, lr}
 8013826:	4b08      	ldr	r3, [pc, #32]	; (8013848 <rmw_destroy_wait_set+0x24>)
 8013828:	6819      	ldr	r1, [r3, #0]
 801382a:	b911      	cbnz	r1, 8013832 <rmw_destroy_wait_set+0xe>
 801382c:	e00a      	b.n	8013844 <rmw_destroy_wait_set+0x20>
 801382e:	6849      	ldr	r1, [r1, #4]
 8013830:	b141      	cbz	r1, 8013844 <rmw_destroy_wait_set+0x20>
 8013832:	688b      	ldr	r3, [r1, #8]
 8013834:	3310      	adds	r3, #16
 8013836:	4298      	cmp	r0, r3
 8013838:	d1f9      	bne.n	801382e <rmw_destroy_wait_set+0xa>
 801383a:	4803      	ldr	r0, [pc, #12]	; (8013848 <rmw_destroy_wait_set+0x24>)
 801383c:	f004 fcbe 	bl	80181bc <put_memory>
 8013840:	2000      	movs	r0, #0
 8013842:	bd08      	pop	{r3, pc}
 8013844:	2001      	movs	r0, #1
 8013846:	bd08      	pop	{r3, pc}
 8013848:	2001092c 	.word	0x2001092c

0801384c <rmw_uxrce_init_service_memory>:
 801384c:	b1e2      	cbz	r2, 8013888 <rmw_uxrce_init_service_memory+0x3c>
 801384e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013852:	7b05      	ldrb	r5, [r0, #12]
 8013854:	4606      	mov	r6, r0
 8013856:	b9ad      	cbnz	r5, 8013884 <rmw_uxrce_init_service_memory+0x38>
 8013858:	23c8      	movs	r3, #200	; 0xc8
 801385a:	4617      	mov	r7, r2
 801385c:	460c      	mov	r4, r1
 801385e:	46a8      	mov	r8, r5
 8013860:	6083      	str	r3, [r0, #8]
 8013862:	f240 1301 	movw	r3, #257	; 0x101
 8013866:	e9c0 5500 	strd	r5, r5, [r0]
 801386a:	8183      	strh	r3, [r0, #12]
 801386c:	3501      	adds	r5, #1
 801386e:	4621      	mov	r1, r4
 8013870:	4630      	mov	r0, r6
 8013872:	f004 fca3 	bl	80181bc <put_memory>
 8013876:	42af      	cmp	r7, r5
 8013878:	60a4      	str	r4, [r4, #8]
 801387a:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 801387e:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8013882:	d1f3      	bne.n	801386c <rmw_uxrce_init_service_memory+0x20>
 8013884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013888:	4770      	bx	lr
 801388a:	bf00      	nop

0801388c <rmw_uxrce_init_client_memory>:
 801388c:	b1e2      	cbz	r2, 80138c8 <rmw_uxrce_init_client_memory+0x3c>
 801388e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013892:	7b05      	ldrb	r5, [r0, #12]
 8013894:	4606      	mov	r6, r0
 8013896:	b9ad      	cbnz	r5, 80138c4 <rmw_uxrce_init_client_memory+0x38>
 8013898:	23c8      	movs	r3, #200	; 0xc8
 801389a:	4617      	mov	r7, r2
 801389c:	460c      	mov	r4, r1
 801389e:	46a8      	mov	r8, r5
 80138a0:	6083      	str	r3, [r0, #8]
 80138a2:	f240 1301 	movw	r3, #257	; 0x101
 80138a6:	e9c0 5500 	strd	r5, r5, [r0]
 80138aa:	8183      	strh	r3, [r0, #12]
 80138ac:	3501      	adds	r5, #1
 80138ae:	4621      	mov	r1, r4
 80138b0:	4630      	mov	r0, r6
 80138b2:	f004 fc83 	bl	80181bc <put_memory>
 80138b6:	42af      	cmp	r7, r5
 80138b8:	60a4      	str	r4, [r4, #8]
 80138ba:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 80138be:	f804 8cbc 	strb.w	r8, [r4, #-188]
 80138c2:	d1f3      	bne.n	80138ac <rmw_uxrce_init_client_memory+0x20>
 80138c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138c8:	4770      	bx	lr
 80138ca:	bf00      	nop

080138cc <rmw_uxrce_init_publisher_memory>:
 80138cc:	b1e2      	cbz	r2, 8013908 <rmw_uxrce_init_publisher_memory+0x3c>
 80138ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138d2:	7b05      	ldrb	r5, [r0, #12]
 80138d4:	4606      	mov	r6, r0
 80138d6:	b9ad      	cbnz	r5, 8013904 <rmw_uxrce_init_publisher_memory+0x38>
 80138d8:	23d8      	movs	r3, #216	; 0xd8
 80138da:	4617      	mov	r7, r2
 80138dc:	460c      	mov	r4, r1
 80138de:	46a8      	mov	r8, r5
 80138e0:	6083      	str	r3, [r0, #8]
 80138e2:	f240 1301 	movw	r3, #257	; 0x101
 80138e6:	e9c0 5500 	strd	r5, r5, [r0]
 80138ea:	8183      	strh	r3, [r0, #12]
 80138ec:	3501      	adds	r5, #1
 80138ee:	4621      	mov	r1, r4
 80138f0:	4630      	mov	r0, r6
 80138f2:	f004 fc63 	bl	80181bc <put_memory>
 80138f6:	42af      	cmp	r7, r5
 80138f8:	60a4      	str	r4, [r4, #8]
 80138fa:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 80138fe:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8013902:	d1f3      	bne.n	80138ec <rmw_uxrce_init_publisher_memory+0x20>
 8013904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013908:	4770      	bx	lr
 801390a:	bf00      	nop

0801390c <rmw_uxrce_init_subscription_memory>:
 801390c:	b1e2      	cbz	r2, 8013948 <rmw_uxrce_init_subscription_memory+0x3c>
 801390e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013912:	7b05      	ldrb	r5, [r0, #12]
 8013914:	4606      	mov	r6, r0
 8013916:	b9ad      	cbnz	r5, 8013944 <rmw_uxrce_init_subscription_memory+0x38>
 8013918:	23d8      	movs	r3, #216	; 0xd8
 801391a:	4617      	mov	r7, r2
 801391c:	460c      	mov	r4, r1
 801391e:	46a8      	mov	r8, r5
 8013920:	6083      	str	r3, [r0, #8]
 8013922:	f240 1301 	movw	r3, #257	; 0x101
 8013926:	e9c0 5500 	strd	r5, r5, [r0]
 801392a:	8183      	strh	r3, [r0, #12]
 801392c:	3501      	adds	r5, #1
 801392e:	4621      	mov	r1, r4
 8013930:	4630      	mov	r0, r6
 8013932:	f004 fc43 	bl	80181bc <put_memory>
 8013936:	42af      	cmp	r7, r5
 8013938:	60a4      	str	r4, [r4, #8]
 801393a:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 801393e:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8013942:	d1f3      	bne.n	801392c <rmw_uxrce_init_subscription_memory+0x20>
 8013944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013948:	4770      	bx	lr
 801394a:	bf00      	nop

0801394c <rmw_uxrce_init_node_memory>:
 801394c:	b1e2      	cbz	r2, 8013988 <rmw_uxrce_init_node_memory+0x3c>
 801394e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013952:	7b05      	ldrb	r5, [r0, #12]
 8013954:	4606      	mov	r6, r0
 8013956:	b9ad      	cbnz	r5, 8013984 <rmw_uxrce_init_node_memory+0x38>
 8013958:	23a4      	movs	r3, #164	; 0xa4
 801395a:	4617      	mov	r7, r2
 801395c:	460c      	mov	r4, r1
 801395e:	46a8      	mov	r8, r5
 8013960:	6083      	str	r3, [r0, #8]
 8013962:	f240 1301 	movw	r3, #257	; 0x101
 8013966:	e9c0 5500 	strd	r5, r5, [r0]
 801396a:	8183      	strh	r3, [r0, #12]
 801396c:	3501      	adds	r5, #1
 801396e:	4621      	mov	r1, r4
 8013970:	4630      	mov	r0, r6
 8013972:	f004 fc23 	bl	80181bc <put_memory>
 8013976:	42af      	cmp	r7, r5
 8013978:	60a4      	str	r4, [r4, #8]
 801397a:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 801397e:	f804 8c98 	strb.w	r8, [r4, #-152]
 8013982:	d1f3      	bne.n	801396c <rmw_uxrce_init_node_memory+0x20>
 8013984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013988:	4770      	bx	lr
 801398a:	bf00      	nop

0801398c <rmw_uxrce_init_session_memory>:
 801398c:	b1ea      	cbz	r2, 80139ca <rmw_uxrce_init_session_memory+0x3e>
 801398e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013992:	7b05      	ldrb	r5, [r0, #12]
 8013994:	4606      	mov	r6, r0
 8013996:	b9b5      	cbnz	r5, 80139c6 <rmw_uxrce_init_session_memory+0x3a>
 8013998:	f241 58a8 	movw	r8, #5544	; 0x15a8
 801399c:	f240 1301 	movw	r3, #257	; 0x101
 80139a0:	4617      	mov	r7, r2
 80139a2:	460c      	mov	r4, r1
 80139a4:	46a9      	mov	r9, r5
 80139a6:	f8c0 8008 	str.w	r8, [r0, #8]
 80139aa:	8183      	strh	r3, [r0, #12]
 80139ac:	e9c0 5500 	strd	r5, r5, [r0]
 80139b0:	3501      	adds	r5, #1
 80139b2:	4621      	mov	r1, r4
 80139b4:	4630      	mov	r0, r6
 80139b6:	f004 fc01 	bl	80181bc <put_memory>
 80139ba:	42af      	cmp	r7, r5
 80139bc:	60a4      	str	r4, [r4, #8]
 80139be:	f884 900c 	strb.w	r9, [r4, #12]
 80139c2:	4444      	add	r4, r8
 80139c4:	d1f4      	bne.n	80139b0 <rmw_uxrce_init_session_memory+0x24>
 80139c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80139ca:	4770      	bx	lr

080139cc <rmw_uxrce_init_topic_memory>:
 80139cc:	b1e2      	cbz	r2, 8013a08 <rmw_uxrce_init_topic_memory+0x3c>
 80139ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139d2:	7b05      	ldrb	r5, [r0, #12]
 80139d4:	4606      	mov	r6, r0
 80139d6:	b9ad      	cbnz	r5, 8013a04 <rmw_uxrce_init_topic_memory+0x38>
 80139d8:	231c      	movs	r3, #28
 80139da:	4617      	mov	r7, r2
 80139dc:	460c      	mov	r4, r1
 80139de:	46a8      	mov	r8, r5
 80139e0:	6083      	str	r3, [r0, #8]
 80139e2:	f240 1301 	movw	r3, #257	; 0x101
 80139e6:	e9c0 5500 	strd	r5, r5, [r0]
 80139ea:	8183      	strh	r3, [r0, #12]
 80139ec:	3501      	adds	r5, #1
 80139ee:	4621      	mov	r1, r4
 80139f0:	4630      	mov	r0, r6
 80139f2:	f004 fbe3 	bl	80181bc <put_memory>
 80139f6:	42af      	cmp	r7, r5
 80139f8:	60a4      	str	r4, [r4, #8]
 80139fa:	f104 041c 	add.w	r4, r4, #28
 80139fe:	f804 8c10 	strb.w	r8, [r4, #-16]
 8013a02:	d1f3      	bne.n	80139ec <rmw_uxrce_init_topic_memory+0x20>
 8013a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a08:	4770      	bx	lr
 8013a0a:	bf00      	nop

08013a0c <rmw_uxrce_init_static_input_buffer_memory>:
 8013a0c:	b1ea      	cbz	r2, 8013a4a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8013a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a12:	7b05      	ldrb	r5, [r0, #12]
 8013a14:	4606      	mov	r6, r0
 8013a16:	b9b5      	cbnz	r5, 8013a46 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8013a18:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8013a1c:	4617      	mov	r7, r2
 8013a1e:	460c      	mov	r4, r1
 8013a20:	46a8      	mov	r8, r5
 8013a22:	6083      	str	r3, [r0, #8]
 8013a24:	f240 1301 	movw	r3, #257	; 0x101
 8013a28:	e9c0 5500 	strd	r5, r5, [r0]
 8013a2c:	8183      	strh	r3, [r0, #12]
 8013a2e:	3501      	adds	r5, #1
 8013a30:	4621      	mov	r1, r4
 8013a32:	4630      	mov	r0, r6
 8013a34:	f004 fbc2 	bl	80181bc <put_memory>
 8013a38:	42af      	cmp	r7, r5
 8013a3a:	60a4      	str	r4, [r4, #8]
 8013a3c:	f884 800c 	strb.w	r8, [r4, #12]
 8013a40:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 8013a44:	d1f3      	bne.n	8013a2e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8013a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a4a:	4770      	bx	lr

08013a4c <rmw_uxrce_init_init_options_impl_memory>:
 8013a4c:	b1e2      	cbz	r2, 8013a88 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8013a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a52:	7b05      	ldrb	r5, [r0, #12]
 8013a54:	4606      	mov	r6, r0
 8013a56:	b9ad      	cbnz	r5, 8013a84 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8013a58:	232c      	movs	r3, #44	; 0x2c
 8013a5a:	4617      	mov	r7, r2
 8013a5c:	460c      	mov	r4, r1
 8013a5e:	46a8      	mov	r8, r5
 8013a60:	6083      	str	r3, [r0, #8]
 8013a62:	f240 1301 	movw	r3, #257	; 0x101
 8013a66:	e9c0 5500 	strd	r5, r5, [r0]
 8013a6a:	8183      	strh	r3, [r0, #12]
 8013a6c:	3501      	adds	r5, #1
 8013a6e:	4621      	mov	r1, r4
 8013a70:	4630      	mov	r0, r6
 8013a72:	f004 fba3 	bl	80181bc <put_memory>
 8013a76:	42af      	cmp	r7, r5
 8013a78:	60a4      	str	r4, [r4, #8]
 8013a7a:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 8013a7e:	f804 8c20 	strb.w	r8, [r4, #-32]
 8013a82:	d1f3      	bne.n	8013a6c <rmw_uxrce_init_init_options_impl_memory+0x20>
 8013a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a88:	4770      	bx	lr
 8013a8a:	bf00      	nop

08013a8c <rmw_uxrce_init_wait_set_memory>:
 8013a8c:	b1e2      	cbz	r2, 8013ac8 <rmw_uxrce_init_wait_set_memory+0x3c>
 8013a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a92:	7b05      	ldrb	r5, [r0, #12]
 8013a94:	4606      	mov	r6, r0
 8013a96:	b9ad      	cbnz	r5, 8013ac4 <rmw_uxrce_init_wait_set_memory+0x38>
 8013a98:	231c      	movs	r3, #28
 8013a9a:	4617      	mov	r7, r2
 8013a9c:	460c      	mov	r4, r1
 8013a9e:	46a8      	mov	r8, r5
 8013aa0:	6083      	str	r3, [r0, #8]
 8013aa2:	f240 1301 	movw	r3, #257	; 0x101
 8013aa6:	e9c0 5500 	strd	r5, r5, [r0]
 8013aaa:	8183      	strh	r3, [r0, #12]
 8013aac:	3501      	adds	r5, #1
 8013aae:	4621      	mov	r1, r4
 8013ab0:	4630      	mov	r0, r6
 8013ab2:	f004 fb83 	bl	80181bc <put_memory>
 8013ab6:	42af      	cmp	r7, r5
 8013ab8:	60a4      	str	r4, [r4, #8]
 8013aba:	f104 041c 	add.w	r4, r4, #28
 8013abe:	f804 8c10 	strb.w	r8, [r4, #-16]
 8013ac2:	d1f3      	bne.n	8013aac <rmw_uxrce_init_wait_set_memory+0x20>
 8013ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ac8:	4770      	bx	lr
 8013aca:	bf00      	nop

08013acc <rmw_uxrce_init_guard_condition_memory>:
 8013acc:	b1e2      	cbz	r2, 8013b08 <rmw_uxrce_init_guard_condition_memory+0x3c>
 8013ace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ad2:	7b05      	ldrb	r5, [r0, #12]
 8013ad4:	4606      	mov	r6, r0
 8013ad6:	b9ad      	cbnz	r5, 8013b04 <rmw_uxrce_init_guard_condition_memory+0x38>
 8013ad8:	2320      	movs	r3, #32
 8013ada:	4617      	mov	r7, r2
 8013adc:	460c      	mov	r4, r1
 8013ade:	46a8      	mov	r8, r5
 8013ae0:	6083      	str	r3, [r0, #8]
 8013ae2:	f240 1301 	movw	r3, #257	; 0x101
 8013ae6:	e9c0 5500 	strd	r5, r5, [r0]
 8013aea:	8183      	strh	r3, [r0, #12]
 8013aec:	3501      	adds	r5, #1
 8013aee:	4621      	mov	r1, r4
 8013af0:	4630      	mov	r0, r6
 8013af2:	f004 fb63 	bl	80181bc <put_memory>
 8013af6:	42af      	cmp	r7, r5
 8013af8:	60a4      	str	r4, [r4, #8]
 8013afa:	f104 0420 	add.w	r4, r4, #32
 8013afe:	f804 8c14 	strb.w	r8, [r4, #-20]
 8013b02:	d1f3      	bne.n	8013aec <rmw_uxrce_init_guard_condition_memory+0x20>
 8013b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b08:	4770      	bx	lr
 8013b0a:	bf00      	nop

08013b0c <rmw_uxrce_fini_session_memory>:
 8013b0c:	4601      	mov	r1, r0
 8013b0e:	4801      	ldr	r0, [pc, #4]	; (8013b14 <rmw_uxrce_fini_session_memory+0x8>)
 8013b10:	f004 bb54 	b.w	80181bc <put_memory>
 8013b14:	200108ec 	.word	0x200108ec

08013b18 <rmw_uxrce_fini_node_memory>:
 8013b18:	b538      	push	{r3, r4, r5, lr}
 8013b1a:	4604      	mov	r4, r0
 8013b1c:	6800      	ldr	r0, [r0, #0]
 8013b1e:	b128      	cbz	r0, 8013b2c <rmw_uxrce_fini_node_memory+0x14>
 8013b20:	4b07      	ldr	r3, [pc, #28]	; (8013b40 <rmw_uxrce_fini_node_memory+0x28>)
 8013b22:	6819      	ldr	r1, [r3, #0]
 8013b24:	f7ec fb8c 	bl	8000240 <strcmp>
 8013b28:	b940      	cbnz	r0, 8013b3c <rmw_uxrce_fini_node_memory+0x24>
 8013b2a:	6020      	str	r0, [r4, #0]
 8013b2c:	6861      	ldr	r1, [r4, #4]
 8013b2e:	b129      	cbz	r1, 8013b3c <rmw_uxrce_fini_node_memory+0x24>
 8013b30:	2500      	movs	r5, #0
 8013b32:	4804      	ldr	r0, [pc, #16]	; (8013b44 <rmw_uxrce_fini_node_memory+0x2c>)
 8013b34:	610d      	str	r5, [r1, #16]
 8013b36:	f004 fb41 	bl	80181bc <put_memory>
 8013b3a:	6065      	str	r5, [r4, #4]
 8013b3c:	bd38      	pop	{r3, r4, r5, pc}
 8013b3e:	bf00      	nop
 8013b40:	0801bf00 	.word	0x0801bf00
 8013b44:	200108bc 	.word	0x200108bc

08013b48 <rmw_uxrce_fini_publisher_memory>:
 8013b48:	b510      	push	{r4, lr}
 8013b4a:	4604      	mov	r4, r0
 8013b4c:	6800      	ldr	r0, [r0, #0]
 8013b4e:	b128      	cbz	r0, 8013b5c <rmw_uxrce_fini_publisher_memory+0x14>
 8013b50:	4b06      	ldr	r3, [pc, #24]	; (8013b6c <rmw_uxrce_fini_publisher_memory+0x24>)
 8013b52:	6819      	ldr	r1, [r3, #0]
 8013b54:	f7ec fb74 	bl	8000240 <strcmp>
 8013b58:	b938      	cbnz	r0, 8013b6a <rmw_uxrce_fini_publisher_memory+0x22>
 8013b5a:	6020      	str	r0, [r4, #0]
 8013b5c:	6861      	ldr	r1, [r4, #4]
 8013b5e:	b121      	cbz	r1, 8013b6a <rmw_uxrce_fini_publisher_memory+0x22>
 8013b60:	4803      	ldr	r0, [pc, #12]	; (8013b70 <rmw_uxrce_fini_publisher_memory+0x28>)
 8013b62:	f004 fb2b 	bl	80181bc <put_memory>
 8013b66:	2300      	movs	r3, #0
 8013b68:	6063      	str	r3, [r4, #4]
 8013b6a:	bd10      	pop	{r4, pc}
 8013b6c:	0801bf00 	.word	0x0801bf00
 8013b70:	200108cc 	.word	0x200108cc

08013b74 <rmw_uxrce_fini_subscription_memory>:
 8013b74:	b510      	push	{r4, lr}
 8013b76:	4604      	mov	r4, r0
 8013b78:	6800      	ldr	r0, [r0, #0]
 8013b7a:	b128      	cbz	r0, 8013b88 <rmw_uxrce_fini_subscription_memory+0x14>
 8013b7c:	4b06      	ldr	r3, [pc, #24]	; (8013b98 <rmw_uxrce_fini_subscription_memory+0x24>)
 8013b7e:	6819      	ldr	r1, [r3, #0]
 8013b80:	f7ec fb5e 	bl	8000240 <strcmp>
 8013b84:	b938      	cbnz	r0, 8013b96 <rmw_uxrce_fini_subscription_memory+0x22>
 8013b86:	6020      	str	r0, [r4, #0]
 8013b88:	6861      	ldr	r1, [r4, #4]
 8013b8a:	b121      	cbz	r1, 8013b96 <rmw_uxrce_fini_subscription_memory+0x22>
 8013b8c:	4803      	ldr	r0, [pc, #12]	; (8013b9c <rmw_uxrce_fini_subscription_memory+0x28>)
 8013b8e:	f004 fb15 	bl	80181bc <put_memory>
 8013b92:	2300      	movs	r3, #0
 8013b94:	6063      	str	r3, [r4, #4]
 8013b96:	bd10      	pop	{r4, pc}
 8013b98:	0801bf00 	.word	0x0801bf00
 8013b9c:	2001090c 	.word	0x2001090c

08013ba0 <rmw_uxrce_fini_service_memory>:
 8013ba0:	b510      	push	{r4, lr}
 8013ba2:	4604      	mov	r4, r0
 8013ba4:	6800      	ldr	r0, [r0, #0]
 8013ba6:	b128      	cbz	r0, 8013bb4 <rmw_uxrce_fini_service_memory+0x14>
 8013ba8:	4b06      	ldr	r3, [pc, #24]	; (8013bc4 <rmw_uxrce_fini_service_memory+0x24>)
 8013baa:	6819      	ldr	r1, [r3, #0]
 8013bac:	f7ec fb48 	bl	8000240 <strcmp>
 8013bb0:	b938      	cbnz	r0, 8013bc2 <rmw_uxrce_fini_service_memory+0x22>
 8013bb2:	6020      	str	r0, [r4, #0]
 8013bb4:	6861      	ldr	r1, [r4, #4]
 8013bb6:	b121      	cbz	r1, 8013bc2 <rmw_uxrce_fini_service_memory+0x22>
 8013bb8:	4803      	ldr	r0, [pc, #12]	; (8013bc8 <rmw_uxrce_fini_service_memory+0x28>)
 8013bba:	f004 faff 	bl	80181bc <put_memory>
 8013bbe:	2300      	movs	r3, #0
 8013bc0:	6063      	str	r3, [r4, #4]
 8013bc2:	bd10      	pop	{r4, pc}
 8013bc4:	0801bf00 	.word	0x0801bf00
 8013bc8:	200108dc 	.word	0x200108dc

08013bcc <rmw_uxrce_fini_client_memory>:
 8013bcc:	b510      	push	{r4, lr}
 8013bce:	4604      	mov	r4, r0
 8013bd0:	6800      	ldr	r0, [r0, #0]
 8013bd2:	b128      	cbz	r0, 8013be0 <rmw_uxrce_fini_client_memory+0x14>
 8013bd4:	4b06      	ldr	r3, [pc, #24]	; (8013bf0 <rmw_uxrce_fini_client_memory+0x24>)
 8013bd6:	6819      	ldr	r1, [r3, #0]
 8013bd8:	f7ec fb32 	bl	8000240 <strcmp>
 8013bdc:	b938      	cbnz	r0, 8013bee <rmw_uxrce_fini_client_memory+0x22>
 8013bde:	6020      	str	r0, [r4, #0]
 8013be0:	6861      	ldr	r1, [r4, #4]
 8013be2:	b121      	cbz	r1, 8013bee <rmw_uxrce_fini_client_memory+0x22>
 8013be4:	4803      	ldr	r0, [pc, #12]	; (8013bf4 <rmw_uxrce_fini_client_memory+0x28>)
 8013be6:	f004 fae9 	bl	80181bc <put_memory>
 8013bea:	2300      	movs	r3, #0
 8013bec:	6063      	str	r3, [r4, #4]
 8013bee:	bd10      	pop	{r4, pc}
 8013bf0:	0801bf00 	.word	0x0801bf00
 8013bf4:	2000bf28 	.word	0x2000bf28

08013bf8 <rmw_uxrce_fini_topic_memory>:
 8013bf8:	b510      	push	{r4, lr}
 8013bfa:	4604      	mov	r4, r0
 8013bfc:	4803      	ldr	r0, [pc, #12]	; (8013c0c <rmw_uxrce_fini_topic_memory+0x14>)
 8013bfe:	4621      	mov	r1, r4
 8013c00:	f004 fadc 	bl	80181bc <put_memory>
 8013c04:	2300      	movs	r3, #0
 8013c06:	61a3      	str	r3, [r4, #24]
 8013c08:	bd10      	pop	{r4, pc}
 8013c0a:	bf00      	nop
 8013c0c:	2001091c 	.word	0x2001091c

08013c10 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8013c10:	b082      	sub	sp, #8
 8013c12:	492b      	ldr	r1, [pc, #172]	; (8013cc0 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8013c14:	b530      	push	{r4, r5, lr}
 8013c16:	680d      	ldr	r5, [r1, #0]
 8013c18:	ac03      	add	r4, sp, #12
 8013c1a:	e884 000c 	stmia.w	r4, {r2, r3}
 8013c1e:	461c      	mov	r4, r3
 8013c20:	2d00      	cmp	r5, #0
 8013c22:	d04b      	beq.n	8013cbc <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 8013c24:	462b      	mov	r3, r5
 8013c26:	2100      	movs	r1, #0
 8013c28:	689a      	ldr	r2, [r3, #8]
 8013c2a:	685b      	ldr	r3, [r3, #4]
 8013c2c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 8013c30:	4290      	cmp	r0, r2
 8013c32:	bf08      	it	eq
 8013c34:	3101      	addeq	r1, #1
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d1f6      	bne.n	8013c28 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8013c3a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8013c3e:	2b02      	cmp	r3, #2
 8013c40:	d029      	beq.n	8013c96 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8013c42:	d820      	bhi.n	8013c86 <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 8013c44:	428c      	cmp	r4, r1
 8013c46:	d828      	bhi.n	8013c9a <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8013c48:	fab4 f284 	clz	r2, r4
 8013c4c:	0952      	lsrs	r2, r2, #5
 8013c4e:	b324      	cbz	r4, 8013c9a <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8013c50:	b1dd      	cbz	r5, 8013c8a <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 8013c52:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8013c56:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8013c5a:	e001      	b.n	8013c60 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 8013c5c:	686d      	ldr	r5, [r5, #4]
 8013c5e:	b1ad      	cbz	r5, 8013c8c <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8013c60:	68ab      	ldr	r3, [r5, #8]
 8013c62:	f8d3 1814 	ldr.w	r1, [r3, #2068]	; 0x814
 8013c66:	4288      	cmp	r0, r1
 8013c68:	d1f8      	bne.n	8013c5c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8013c6a:	f8d3 1818 	ldr.w	r1, [r3, #2072]	; 0x818
 8013c6e:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8013c72:	4561      	cmp	r1, ip
 8013c74:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8013c78:	eb73 0e04 	sbcs.w	lr, r3, r4
 8013c7c:	daee      	bge.n	8013c5c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8013c7e:	468c      	mov	ip, r1
 8013c80:	461c      	mov	r4, r3
 8013c82:	462a      	mov	r2, r5
 8013c84:	e7ea      	b.n	8013c5c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8013c86:	2b03      	cmp	r3, #3
 8013c88:	d0dc      	beq.n	8013c44 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 8013c8a:	2200      	movs	r2, #0
 8013c8c:	4610      	mov	r0, r2
 8013c8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013c92:	b002      	add	sp, #8
 8013c94:	4770      	bx	lr
 8013c96:	428c      	cmp	r4, r1
 8013c98:	d905      	bls.n	8013ca6 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 8013c9a:	4809      	ldr	r0, [pc, #36]	; (8013cc0 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8013c9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013ca0:	b002      	add	sp, #8
 8013ca2:	f004 ba7b 	b.w	801819c <get_memory>
 8013ca6:	fab4 f284 	clz	r2, r4
 8013caa:	0952      	lsrs	r2, r2, #5
 8013cac:	2c00      	cmp	r4, #0
 8013cae:	d1ed      	bne.n	8013c8c <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8013cb0:	4803      	ldr	r0, [pc, #12]	; (8013cc0 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8013cb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013cb6:	b002      	add	sp, #8
 8013cb8:	f004 ba70 	b.w	801819c <get_memory>
 8013cbc:	4629      	mov	r1, r5
 8013cbe:	e7bc      	b.n	8013c3a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8013cc0:	200108fc 	.word	0x200108fc

08013cc4 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8013cc4:	4b12      	ldr	r3, [pc, #72]	; (8013d10 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	b530      	push	{r4, r5, lr}
 8013cca:	b1f3      	cbz	r3, 8013d0a <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 8013ccc:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8013cd0:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 8013cd4:	2400      	movs	r4, #0
 8013cd6:	e001      	b.n	8013cdc <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8013cd8:	685b      	ldr	r3, [r3, #4]
 8013cda:	b1a3      	cbz	r3, 8013d06 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8013cdc:	689a      	ldr	r2, [r3, #8]
 8013cde:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 8013ce2:	4288      	cmp	r0, r1
 8013ce4:	d1f8      	bne.n	8013cd8 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8013ce6:	f8d2 1818 	ldr.w	r1, [r2, #2072]	; 0x818
 8013cea:	f502 6202 	add.w	r2, r2, #2080	; 0x820
 8013cee:	4571      	cmp	r1, lr
 8013cf0:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8013cf4:	eb72 050c 	sbcs.w	r5, r2, ip
 8013cf8:	daee      	bge.n	8013cd8 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8013cfa:	461c      	mov	r4, r3
 8013cfc:	685b      	ldr	r3, [r3, #4]
 8013cfe:	468e      	mov	lr, r1
 8013d00:	4694      	mov	ip, r2
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d1ea      	bne.n	8013cdc <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8013d06:	4620      	mov	r0, r4
 8013d08:	bd30      	pop	{r4, r5, pc}
 8013d0a:	461c      	mov	r4, r3
 8013d0c:	4620      	mov	r0, r4
 8013d0e:	bd30      	pop	{r4, r5, pc}
 8013d10:	200108fc 	.word	0x200108fc
 8013d14:	00000000 	.word	0x00000000

08013d18 <rmw_uxrce_clean_expired_static_input_buffer>:
 8013d18:	4b3d      	ldr	r3, [pc, #244]	; (8013e10 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8013d1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d1e:	681f      	ldr	r7, [r3, #0]
 8013d20:	ed2d 8b06 	vpush	{d8-d10}
 8013d24:	b08d      	sub	sp, #52	; 0x34
 8013d26:	f004 fb0d 	bl	8018344 <rmw_uros_epoch_nanos>
 8013d2a:	2f00      	cmp	r7, #0
 8013d2c:	d05d      	beq.n	8013dea <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8013d2e:	46b8      	mov	r8, r7
 8013d30:	4681      	mov	r9, r0
 8013d32:	468a      	mov	sl, r1
 8013d34:	ac04      	add	r4, sp, #16
 8013d36:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8013d3a:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 8013d3e:	2b04      	cmp	r3, #4
 8013d40:	ed9f 8b2d 	vldr	d8, [pc, #180]	; 8013df8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8013d44:	ed9f ab2e 	vldr	d10, [pc, #184]	; 8013e00 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8013d48:	ed9f 9b2f 	vldr	d9, [pc, #188]	; 8013e08 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8013d4c:	d03f      	beq.n	8013dce <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8013d4e:	2b05      	cmp	r3, #5
 8013d50:	d044      	beq.n	8013ddc <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8013d52:	2b03      	cmp	r3, #3
 8013d54:	d03b      	beq.n	8013dce <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8013d56:	ed8d 8b04 	vstr	d8, [sp, #16]
 8013d5a:	ed8d ab06 	vstr	d10, [sp, #24]
 8013d5e:	ab08      	add	r3, sp, #32
 8013d60:	ed8d 8b08 	vstr	d8, [sp, #32]
 8013d64:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 8013d68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013d6a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013d6e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8013d72:	f004 f8a3 	bl	8017ebc <rmw_time_equal>
 8013d76:	b118      	cbz	r0, 8013d80 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8013d78:	ed8d 9b04 	vstr	d9, [sp, #16]
 8013d7c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8013d80:	f8d5 6818 	ldr.w	r6, [r5, #2072]	; 0x818
 8013d84:	f505 6502 	add.w	r5, r5, #2080	; 0x820
 8013d88:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8013d8c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8013d90:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8013d94:	f004 f8e8 	bl	8017f68 <rmw_time_total_nsec>
 8013d98:	1830      	adds	r0, r6, r0
 8013d9a:	eb47 0101 	adc.w	r1, r7, r1
 8013d9e:	4548      	cmp	r0, r9
 8013da0:	eb71 030a 	sbcs.w	r3, r1, sl
 8013da4:	db05      	blt.n	8013db2 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 8013da6:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 8013daa:	4591      	cmp	r9, r2
 8013dac:	eb7a 0303 	sbcs.w	r3, sl, r3
 8013db0:	da03      	bge.n	8013dba <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 8013db2:	4641      	mov	r1, r8
 8013db4:	4816      	ldr	r0, [pc, #88]	; (8013e10 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8013db6:	f004 fa01 	bl	80181bc <put_memory>
 8013dba:	f1bb 0f00 	cmp.w	fp, #0
 8013dbe:	d014      	beq.n	8013dea <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8013dc0:	46d8      	mov	r8, fp
 8013dc2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8013dc6:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 8013dca:	2b04      	cmp	r3, #4
 8013dcc:	d1bf      	bne.n	8013d4e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 8013dce:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 8013dd2:	3340      	adds	r3, #64	; 0x40
 8013dd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013dd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013dda:	e7c0      	b.n	8013d5e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8013ddc:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 8013de0:	3348      	adds	r3, #72	; 0x48
 8013de2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013de4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013de8:	e7b9      	b.n	8013d5e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8013dea:	b00d      	add	sp, #52	; 0x34
 8013dec:	ecbd 8b06 	vpop	{d8-d10}
 8013df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013df4:	f3af 8000 	nop.w
	...
 8013e00:	00000001 	.word	0x00000001
 8013e04:	00000000 	.word	0x00000000
 8013e08:	0000001e 	.word	0x0000001e
 8013e0c:	00000000 	.word	0x00000000
 8013e10:	200108fc 	.word	0x200108fc

08013e14 <run_xrce_session>:
 8013e14:	b510      	push	{r4, lr}
 8013e16:	788c      	ldrb	r4, [r1, #2]
 8013e18:	b086      	sub	sp, #24
 8013e1a:	2c01      	cmp	r4, #1
 8013e1c:	f8ad 200e 	strh.w	r2, [sp, #14]
 8013e20:	d00c      	beq.n	8013e3c <run_xrce_session+0x28>
 8013e22:	2401      	movs	r4, #1
 8013e24:	4619      	mov	r1, r3
 8013e26:	f10d 020e 	add.w	r2, sp, #14
 8013e2a:	f10d 0317 	add.w	r3, sp, #23
 8013e2e:	9400      	str	r4, [sp, #0]
 8013e30:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013e34:	f001 f934 	bl	80150a0 <uxr_run_session_until_all_status>
 8013e38:	b006      	add	sp, #24
 8013e3a:	bd10      	pop	{r4, pc}
 8013e3c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013e40:	f000 fd50 	bl	80148e4 <uxr_flash_output_streams>
 8013e44:	4620      	mov	r0, r4
 8013e46:	b006      	add	sp, #24
 8013e48:	bd10      	pop	{r4, pc}
 8013e4a:	bf00      	nop

08013e4c <convert_qos_profile>:
 8013e4c:	7a4a      	ldrb	r2, [r1, #9]
 8013e4e:	f891 c008 	ldrb.w	ip, [r1, #8]
 8013e52:	2a02      	cmp	r2, #2
 8013e54:	bf18      	it	ne
 8013e56:	2200      	movne	r2, #0
 8013e58:	7002      	strb	r2, [r0, #0]
 8013e5a:	f1ac 0202 	sub.w	r2, ip, #2
 8013e5e:	fab2 f282 	clz	r2, r2
 8013e62:	0952      	lsrs	r2, r2, #5
 8013e64:	7042      	strb	r2, [r0, #1]
 8013e66:	780a      	ldrb	r2, [r1, #0]
 8013e68:	8889      	ldrh	r1, [r1, #4]
 8013e6a:	f1a2 0202 	sub.w	r2, r2, #2
 8013e6e:	8081      	strh	r1, [r0, #4]
 8013e70:	fab2 f282 	clz	r2, r2
 8013e74:	0952      	lsrs	r2, r2, #5
 8013e76:	7082      	strb	r2, [r0, #2]
 8013e78:	4770      	bx	lr
 8013e7a:	bf00      	nop

08013e7c <generate_service_topics>:
 8013e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e7e:	461d      	mov	r5, r3
 8013e80:	b083      	sub	sp, #12
 8013e82:	4606      	mov	r6, r0
 8013e84:	4c11      	ldr	r4, [pc, #68]	; (8013ecc <generate_service_topics+0x50>)
 8013e86:	4608      	mov	r0, r1
 8013e88:	4b11      	ldr	r3, [pc, #68]	; (8013ed0 <generate_service_topics+0x54>)
 8013e8a:	4617      	mov	r7, r2
 8013e8c:	4629      	mov	r1, r5
 8013e8e:	4a11      	ldr	r2, [pc, #68]	; (8013ed4 <generate_service_topics+0x58>)
 8013e90:	9401      	str	r4, [sp, #4]
 8013e92:	9600      	str	r6, [sp, #0]
 8013e94:	f005 faf4 	bl	8019480 <sniprintf>
 8013e98:	4a0f      	ldr	r2, [pc, #60]	; (8013ed8 <generate_service_topics+0x5c>)
 8013e9a:	4604      	mov	r4, r0
 8013e9c:	4b0f      	ldr	r3, [pc, #60]	; (8013edc <generate_service_topics+0x60>)
 8013e9e:	9201      	str	r2, [sp, #4]
 8013ea0:	4638      	mov	r0, r7
 8013ea2:	4a0c      	ldr	r2, [pc, #48]	; (8013ed4 <generate_service_topics+0x58>)
 8013ea4:	4629      	mov	r1, r5
 8013ea6:	9600      	str	r6, [sp, #0]
 8013ea8:	f005 faea 	bl	8019480 <sniprintf>
 8013eac:	2c00      	cmp	r4, #0
 8013eae:	bfa8      	it	ge
 8013eb0:	42a5      	cmpge	r5, r4
 8013eb2:	bfcc      	ite	gt
 8013eb4:	2401      	movgt	r4, #1
 8013eb6:	2400      	movle	r4, #0
 8013eb8:	dd05      	ble.n	8013ec6 <generate_service_topics+0x4a>
 8013eba:	2800      	cmp	r0, #0
 8013ebc:	bfa8      	it	ge
 8013ebe:	4285      	cmpge	r5, r0
 8013ec0:	bfcc      	ite	gt
 8013ec2:	2401      	movgt	r4, #1
 8013ec4:	2400      	movle	r4, #0
 8013ec6:	4620      	mov	r0, r4
 8013ec8:	b003      	add	sp, #12
 8013eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ecc:	0801bac0 	.word	0x0801bac0
 8013ed0:	0801babc 	.word	0x0801babc
 8013ed4:	0801baa0 	.word	0x0801baa0
 8013ed8:	0801bab4 	.word	0x0801bab4
 8013edc:	0801bab0 	.word	0x0801bab0

08013ee0 <generate_service_types>:
 8013ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ee4:	4606      	mov	r6, r0
 8013ee6:	b087      	sub	sp, #28
 8013ee8:	461c      	mov	r4, r3
 8013eea:	6883      	ldr	r3, [r0, #8]
 8013eec:	460d      	mov	r5, r1
 8013eee:	4617      	mov	r7, r2
 8013ef0:	4798      	blx	r3
 8013ef2:	68f3      	ldr	r3, [r6, #12]
 8013ef4:	4606      	mov	r6, r0
 8013ef6:	4798      	blx	r3
 8013ef8:	2300      	movs	r3, #0
 8013efa:	f8d0 b004 	ldr.w	fp, [r0, #4]
 8013efe:	6872      	ldr	r2, [r6, #4]
 8013f00:	702b      	strb	r3, [r5, #0]
 8013f02:	6813      	ldr	r3, [r2, #0]
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d03f      	beq.n	8013f88 <generate_service_types+0xa8>
 8013f08:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8013f9c <generate_service_types+0xbc>
 8013f0c:	4649      	mov	r1, r9
 8013f0e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8013fa4 <generate_service_types+0xc4>
 8013f12:	4628      	mov	r0, r5
 8013f14:	f8df a090 	ldr.w	sl, [pc, #144]	; 8013fa8 <generate_service_types+0xc8>
 8013f18:	f8cd 8014 	str.w	r8, [sp, #20]
 8013f1c:	6852      	ldr	r2, [r2, #4]
 8013f1e:	9100      	str	r1, [sp, #0]
 8013f20:	4621      	mov	r1, r4
 8013f22:	f8cd 8008 	str.w	r8, [sp, #8]
 8013f26:	f8cd a004 	str.w	sl, [sp, #4]
 8013f2a:	e9cd 9203 	strd	r9, r2, [sp, #12]
 8013f2e:	4a1a      	ldr	r2, [pc, #104]	; (8013f98 <generate_service_types+0xb8>)
 8013f30:	f005 faa6 	bl	8019480 <sniprintf>
 8013f34:	2300      	movs	r3, #0
 8013f36:	42a0      	cmp	r0, r4
 8013f38:	ea6f 0600 	mvn.w	r6, r0
 8013f3c:	703b      	strb	r3, [r7, #0]
 8013f3e:	f8db 3000 	ldr.w	r3, [fp]
 8013f42:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 8013f46:	bfac      	ite	ge
 8013f48:	2500      	movge	r5, #0
 8013f4a:	2501      	movlt	r5, #1
 8013f4c:	b30b      	cbz	r3, 8013f92 <generate_service_types+0xb2>
 8013f4e:	4a13      	ldr	r2, [pc, #76]	; (8013f9c <generate_service_types+0xbc>)
 8013f50:	f8cd 8014 	str.w	r8, [sp, #20]
 8013f54:	402e      	ands	r6, r5
 8013f56:	f8db 1004 	ldr.w	r1, [fp, #4]
 8013f5a:	4638      	mov	r0, r7
 8013f5c:	9104      	str	r1, [sp, #16]
 8013f5e:	4621      	mov	r1, r4
 8013f60:	e9cd 2a00 	strd	r2, sl, [sp]
 8013f64:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8013f68:	4a0b      	ldr	r2, [pc, #44]	; (8013f98 <generate_service_types+0xb8>)
 8013f6a:	f005 fa89 	bl	8019480 <sniprintf>
 8013f6e:	2800      	cmp	r0, #0
 8013f70:	bfb4      	ite	lt
 8013f72:	2600      	movlt	r6, #0
 8013f74:	f006 0601 	andge.w	r6, r6, #1
 8013f78:	42a0      	cmp	r0, r4
 8013f7a:	bfac      	ite	ge
 8013f7c:	2000      	movge	r0, #0
 8013f7e:	f006 0001 	andlt.w	r0, r6, #1
 8013f82:	b007      	add	sp, #28
 8013f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f88:	4b05      	ldr	r3, [pc, #20]	; (8013fa0 <generate_service_types+0xc0>)
 8013f8a:	f8df 9010 	ldr.w	r9, [pc, #16]	; 8013f9c <generate_service_types+0xbc>
 8013f8e:	4619      	mov	r1, r3
 8013f90:	e7bd      	b.n	8013f0e <generate_service_types+0x2e>
 8013f92:	4b03      	ldr	r3, [pc, #12]	; (8013fa0 <generate_service_types+0xc0>)
 8013f94:	461a      	mov	r2, r3
 8013f96:	e7db      	b.n	8013f50 <generate_service_types+0x70>
 8013f98:	0801ba98 	.word	0x0801ba98
 8013f9c:	0801ba94 	.word	0x0801ba94
 8013fa0:	0801b884 	.word	0x0801b884
 8013fa4:	0801baa8 	.word	0x0801baa8
 8013fa8:	0801baac 	.word	0x0801baac

08013fac <is_uxrce_rmw_identifier_valid>:
 8013fac:	b510      	push	{r4, lr}
 8013fae:	4604      	mov	r4, r0
 8013fb0:	b140      	cbz	r0, 8013fc4 <is_uxrce_rmw_identifier_valid+0x18>
 8013fb2:	f7fe fbbd 	bl	8012730 <rmw_get_implementation_identifier>
 8013fb6:	4601      	mov	r1, r0
 8013fb8:	4620      	mov	r0, r4
 8013fba:	f7ec f941 	bl	8000240 <strcmp>
 8013fbe:	fab0 f080 	clz	r0, r0
 8013fc2:	0940      	lsrs	r0, r0, #5
 8013fc4:	bd10      	pop	{r4, pc}
 8013fc6:	bf00      	nop

08013fc8 <service_msgs__msg__ServiceEventInfo__get_type_hash>:
 8013fc8:	4800      	ldr	r0, [pc, #0]	; (8013fcc <service_msgs__msg__ServiceEventInfo__get_type_hash+0x4>)
 8013fca:	4770      	bx	lr
 8013fcc:	20001a9c 	.word	0x20001a9c

08013fd0 <service_msgs__msg__ServiceEventInfo__get_type_description>:
 8013fd0:	b510      	push	{r4, lr}
 8013fd2:	4c08      	ldr	r4, [pc, #32]	; (8013ff4 <service_msgs__msg__ServiceEventInfo__get_type_description+0x24>)
 8013fd4:	7820      	ldrb	r0, [r4, #0]
 8013fd6:	b108      	cbz	r0, 8013fdc <service_msgs__msg__ServiceEventInfo__get_type_description+0xc>
 8013fd8:	4807      	ldr	r0, [pc, #28]	; (8013ff8 <service_msgs__msg__ServiceEventInfo__get_type_description+0x28>)
 8013fda:	bd10      	pop	{r4, pc}
 8013fdc:	f000 f858 	bl	8014090 <builtin_interfaces__msg__Time__get_type_description>
 8013fe0:	300c      	adds	r0, #12
 8013fe2:	4b06      	ldr	r3, [pc, #24]	; (8013ffc <service_msgs__msg__ServiceEventInfo__get_type_description+0x2c>)
 8013fe4:	c807      	ldmia	r0, {r0, r1, r2}
 8013fe6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013fea:	2301      	movs	r3, #1
 8013fec:	4802      	ldr	r0, [pc, #8]	; (8013ff8 <service_msgs__msg__ServiceEventInfo__get_type_description+0x28>)
 8013fee:	7023      	strb	r3, [r4, #0]
 8013ff0:	bd10      	pop	{r4, pc}
 8013ff2:	bf00      	nop
 8013ff4:	2001093d 	.word	0x2001093d
 8013ff8:	0801bac8 	.word	0x0801bac8
 8013ffc:	20001c24 	.word	0x20001c24

08014000 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>:
 8014000:	4800      	ldr	r0, [pc, #0]	; (8014004 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source+0x4>)
 8014002:	4770      	bx	lr
 8014004:	0801baec 	.word	0x0801baec

08014008 <service_msgs__msg__ServiceEventInfo__get_type_description_sources>:
 8014008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801400a:	4e0f      	ldr	r6, [pc, #60]	; (8014048 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x40>)
 801400c:	7837      	ldrb	r7, [r6, #0]
 801400e:	b10f      	cbz	r7, 8014014 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0xc>
 8014010:	480e      	ldr	r0, [pc, #56]	; (801404c <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x44>)
 8014012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014014:	4d0e      	ldr	r5, [pc, #56]	; (8014050 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x48>)
 8014016:	4c0f      	ldr	r4, [pc, #60]	; (8014054 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x4c>)
 8014018:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801401a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801401c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801401e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014020:	682b      	ldr	r3, [r5, #0]
 8014022:	4638      	mov	r0, r7
 8014024:	f844 3b04 	str.w	r3, [r4], #4
 8014028:	f000 f83e 	bl	80140a8 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 801402c:	2301      	movs	r3, #1
 801402e:	4684      	mov	ip, r0
 8014030:	7033      	strb	r3, [r6, #0]
 8014032:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014038:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801403c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801403e:	f8dc 3000 	ldr.w	r3, [ip]
 8014042:	4802      	ldr	r0, [pc, #8]	; (801404c <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x44>)
 8014044:	6023      	str	r3, [r4, #0]
 8014046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014048:	2001093c 	.word	0x2001093c
 801404c:	0801bb10 	.word	0x0801bb10
 8014050:	0801baec 	.word	0x0801baec
 8014054:	20010940 	.word	0x20010940

08014058 <service_msgs__msg__ServiceEventInfo__init>:
 8014058:	b538      	push	{r3, r4, r5, lr}
 801405a:	b138      	cbz	r0, 801406c <service_msgs__msg__ServiceEventInfo__init+0x14>
 801405c:	1d05      	adds	r5, r0, #4
 801405e:	4628      	mov	r0, r5
 8014060:	f000 f842 	bl	80140e8 <builtin_interfaces__msg__Time__init>
 8014064:	4604      	mov	r4, r0
 8014066:	b120      	cbz	r0, 8014072 <service_msgs__msg__ServiceEventInfo__init+0x1a>
 8014068:	4620      	mov	r0, r4
 801406a:	bd38      	pop	{r3, r4, r5, pc}
 801406c:	4604      	mov	r4, r0
 801406e:	4620      	mov	r0, r4
 8014070:	bd38      	pop	{r3, r4, r5, pc}
 8014072:	4628      	mov	r0, r5
 8014074:	f000 f83c 	bl	80140f0 <builtin_interfaces__msg__Time__fini>
 8014078:	4620      	mov	r0, r4
 801407a:	bd38      	pop	{r3, r4, r5, pc}

0801407c <service_msgs__msg__ServiceEventInfo__fini>:
 801407c:	b110      	cbz	r0, 8014084 <service_msgs__msg__ServiceEventInfo__fini+0x8>
 801407e:	3004      	adds	r0, #4
 8014080:	f000 b836 	b.w	80140f0 <builtin_interfaces__msg__Time__fini>
 8014084:	4770      	bx	lr
 8014086:	bf00      	nop

08014088 <builtin_interfaces__msg__Time__get_type_hash>:
 8014088:	4800      	ldr	r0, [pc, #0]	; (801408c <builtin_interfaces__msg__Time__get_type_hash+0x4>)
 801408a:	4770      	bx	lr
 801408c:	20001fc0 	.word	0x20001fc0

08014090 <builtin_interfaces__msg__Time__get_type_description>:
 8014090:	4b03      	ldr	r3, [pc, #12]	; (80140a0 <builtin_interfaces__msg__Time__get_type_description+0x10>)
 8014092:	781a      	ldrb	r2, [r3, #0]
 8014094:	b90a      	cbnz	r2, 801409a <builtin_interfaces__msg__Time__get_type_description+0xa>
 8014096:	2201      	movs	r2, #1
 8014098:	701a      	strb	r2, [r3, #0]
 801409a:	4802      	ldr	r0, [pc, #8]	; (80140a4 <builtin_interfaces__msg__Time__get_type_description+0x14>)
 801409c:	4770      	bx	lr
 801409e:	bf00      	nop
 80140a0:	20010989 	.word	0x20010989
 80140a4:	0801bb1c 	.word	0x0801bb1c

080140a8 <builtin_interfaces__msg__Time__get_individual_type_description_source>:
 80140a8:	4800      	ldr	r0, [pc, #0]	; (80140ac <builtin_interfaces__msg__Time__get_individual_type_description_source+0x4>)
 80140aa:	4770      	bx	lr
 80140ac:	0801bb40 	.word	0x0801bb40

080140b0 <builtin_interfaces__msg__Time__get_type_description_sources>:
 80140b0:	4b09      	ldr	r3, [pc, #36]	; (80140d8 <builtin_interfaces__msg__Time__get_type_description_sources+0x28>)
 80140b2:	781a      	ldrb	r2, [r3, #0]
 80140b4:	b96a      	cbnz	r2, 80140d2 <builtin_interfaces__msg__Time__get_type_description_sources+0x22>
 80140b6:	2201      	movs	r2, #1
 80140b8:	b430      	push	{r4, r5}
 80140ba:	4d08      	ldr	r5, [pc, #32]	; (80140dc <builtin_interfaces__msg__Time__get_type_description_sources+0x2c>)
 80140bc:	4c08      	ldr	r4, [pc, #32]	; (80140e0 <builtin_interfaces__msg__Time__get_type_description_sources+0x30>)
 80140be:	701a      	strb	r2, [r3, #0]
 80140c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80140c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80140c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80140c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80140c8:	682b      	ldr	r3, [r5, #0]
 80140ca:	4806      	ldr	r0, [pc, #24]	; (80140e4 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 80140cc:	6023      	str	r3, [r4, #0]
 80140ce:	bc30      	pop	{r4, r5}
 80140d0:	4770      	bx	lr
 80140d2:	4804      	ldr	r0, [pc, #16]	; (80140e4 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 80140d4:	4770      	bx	lr
 80140d6:	bf00      	nop
 80140d8:	20010988 	.word	0x20010988
 80140dc:	0801bb40 	.word	0x0801bb40
 80140e0:	2001098c 	.word	0x2001098c
 80140e4:	0801bb64 	.word	0x0801bb64

080140e8 <builtin_interfaces__msg__Time__init>:
 80140e8:	3800      	subs	r0, #0
 80140ea:	bf18      	it	ne
 80140ec:	2001      	movne	r0, #1
 80140ee:	4770      	bx	lr

080140f0 <builtin_interfaces__msg__Time__fini>:
 80140f0:	4770      	bx	lr
 80140f2:	bf00      	nop

080140f4 <uxr_buffer_delete_entity>:
 80140f4:	b510      	push	{r4, lr}
 80140f6:	2300      	movs	r3, #0
 80140f8:	b08e      	sub	sp, #56	; 0x38
 80140fa:	4604      	mov	r4, r0
 80140fc:	9103      	str	r1, [sp, #12]
 80140fe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8014102:	2303      	movs	r3, #3
 8014104:	2204      	movs	r2, #4
 8014106:	9300      	str	r3, [sp, #0]
 8014108:	ab06      	add	r3, sp, #24
 801410a:	f001 f9f5 	bl	80154f8 <uxr_prepare_stream_to_write_submessage>
 801410e:	b918      	cbnz	r0, 8014118 <uxr_buffer_delete_entity+0x24>
 8014110:	4604      	mov	r4, r0
 8014112:	4620      	mov	r0, r4
 8014114:	b00e      	add	sp, #56	; 0x38
 8014116:	bd10      	pop	{r4, pc}
 8014118:	9902      	ldr	r1, [sp, #8]
 801411a:	aa05      	add	r2, sp, #20
 801411c:	4620      	mov	r0, r4
 801411e:	f001 fb27 	bl	8015770 <uxr_init_base_object_request>
 8014122:	4604      	mov	r4, r0
 8014124:	a905      	add	r1, sp, #20
 8014126:	a806      	add	r0, sp, #24
 8014128:	f002 ffea 	bl	8017100 <uxr_serialize_DELETE_Payload>
 801412c:	4620      	mov	r0, r4
 801412e:	b00e      	add	sp, #56	; 0x38
 8014130:	bd10      	pop	{r4, pc}
 8014132:	bf00      	nop

08014134 <uxr_common_create_entity>:
 8014134:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8014138:	b510      	push	{r4, lr}
 801413a:	f1bc 0f01 	cmp.w	ip, #1
 801413e:	b08c      	sub	sp, #48	; 0x30
 8014140:	4604      	mov	r4, r0
 8014142:	9202      	str	r2, [sp, #8]
 8014144:	bf0c      	ite	eq
 8014146:	f003 0201 	andeq.w	r2, r3, #1
 801414a:	2200      	movne	r2, #0
 801414c:	330e      	adds	r3, #14
 801414e:	9103      	str	r1, [sp, #12]
 8014150:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8014154:	441a      	add	r2, r3
 8014156:	ab04      	add	r3, sp, #16
 8014158:	9101      	str	r1, [sp, #4]
 801415a:	2101      	movs	r1, #1
 801415c:	b292      	uxth	r2, r2
 801415e:	9100      	str	r1, [sp, #0]
 8014160:	9903      	ldr	r1, [sp, #12]
 8014162:	f001 f9c9 	bl	80154f8 <uxr_prepare_stream_to_write_submessage>
 8014166:	b918      	cbnz	r0, 8014170 <uxr_common_create_entity+0x3c>
 8014168:	4604      	mov	r4, r0
 801416a:	4620      	mov	r0, r4
 801416c:	b00c      	add	sp, #48	; 0x30
 801416e:	bd10      	pop	{r4, pc}
 8014170:	9902      	ldr	r1, [sp, #8]
 8014172:	4620      	mov	r0, r4
 8014174:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014176:	f001 fafb 	bl	8015770 <uxr_init_base_object_request>
 801417a:	4604      	mov	r4, r0
 801417c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801417e:	a804      	add	r0, sp, #16
 8014180:	f002 ff18 	bl	8016fb4 <uxr_serialize_CREATE_Payload>
 8014184:	4620      	mov	r0, r4
 8014186:	b00c      	add	sp, #48	; 0x30
 8014188:	bd10      	pop	{r4, pc}
 801418a:	bf00      	nop

0801418c <uxr_buffer_create_participant_bin>:
 801418c:	b570      	push	{r4, r5, r6, lr}
 801418e:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8014192:	4605      	mov	r5, r0
 8014194:	ac11      	add	r4, sp, #68	; 0x44
 8014196:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 801419a:	2303      	movs	r3, #3
 801419c:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 80141a0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80141a4:	7223      	strb	r3, [r4, #8]
 80141a6:	2300      	movs	r3, #0
 80141a8:	2201      	movs	r2, #1
 80141aa:	f88d 3014 	strb.w	r3, [sp, #20]
 80141ae:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 80141b0:	7122      	strb	r2, [r4, #4]
 80141b2:	b1cb      	cbz	r3, 80141e8 <uxr_buffer_create_participant_bin+0x5c>
 80141b4:	f88d 201c 	strb.w	r2, [sp, #28]
 80141b8:	9308      	str	r3, [sp, #32]
 80141ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80141be:	a915      	add	r1, sp, #84	; 0x54
 80141c0:	a809      	add	r0, sp, #36	; 0x24
 80141c2:	f7f9 fe79 	bl	800deb8 <ucdr_init_buffer>
 80141c6:	a905      	add	r1, sp, #20
 80141c8:	a809      	add	r0, sp, #36	; 0x24
 80141ca:	f002 fceb 	bl	8016ba4 <uxr_serialize_OBJK_DomainParticipant_Binary>
 80141ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80141d0:	9600      	str	r6, [sp, #0]
 80141d2:	4628      	mov	r0, r5
 80141d4:	9401      	str	r4, [sp, #4]
 80141d6:	60e3      	str	r3, [r4, #12]
 80141d8:	b29b      	uxth	r3, r3
 80141da:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80141de:	f7ff ffa9 	bl	8014134 <uxr_common_create_entity>
 80141e2:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 80141e6:	bd70      	pop	{r4, r5, r6, pc}
 80141e8:	f88d 301c 	strb.w	r3, [sp, #28]
 80141ec:	e7e5      	b.n	80141ba <uxr_buffer_create_participant_bin+0x2e>
 80141ee:	bf00      	nop

080141f0 <uxr_buffer_create_replier_bin>:
 80141f0:	b570      	push	{r4, r5, r6, lr}
 80141f2:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 80141f6:	4605      	mov	r5, r0
 80141f8:	4618      	mov	r0, r3
 80141fa:	9105      	str	r1, [sp, #20]
 80141fc:	a999      	add	r1, sp, #612	; 0x264
 80141fe:	f89d 6294 	ldrb.w	r6, [sp, #660]	; 0x294
 8014202:	ac15      	add	r4, sp, #84	; 0x54
 8014204:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8014208:	2308      	movs	r3, #8
 801420a:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 801420e:	f000 f909 	bl	8014424 <uxr_object_id_to_raw>
 8014212:	9b9e      	ldr	r3, [sp, #632]	; 0x278
 8014214:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014218:	a919      	add	r1, sp, #100	; 0x64
 801421a:	a80d      	add	r0, sp, #52	; 0x34
 801421c:	9306      	str	r3, [sp, #24]
 801421e:	9b9f      	ldr	r3, [sp, #636]	; 0x27c
 8014220:	9307      	str	r3, [sp, #28]
 8014222:	9ba0      	ldr	r3, [sp, #640]	; 0x280
 8014224:	9308      	str	r3, [sp, #32]
 8014226:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8014228:	930c      	str	r3, [sp, #48]	; 0x30
 801422a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801422c:	930a      	str	r3, [sp, #40]	; 0x28
 801422e:	2301      	movs	r3, #1
 8014230:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8014234:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8014238:	2303      	movs	r3, #3
 801423a:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 801423e:	f7f9 fe3b 	bl	800deb8 <ucdr_init_buffer>
 8014242:	a906      	add	r1, sp, #24
 8014244:	a80d      	add	r0, sp, #52	; 0x34
 8014246:	f002 fccf 	bl	8016be8 <uxr_serialize_OBJK_Replier_Binary>
 801424a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801424c:	4628      	mov	r0, r5
 801424e:	9600      	str	r6, [sp, #0]
 8014250:	9318      	str	r3, [sp, #96]	; 0x60
 8014252:	b29b      	uxth	r3, r3
 8014254:	9401      	str	r4, [sp, #4]
 8014256:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801425a:	f7ff ff6b 	bl	8014134 <uxr_common_create_entity>
 801425e:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
 8014262:	bd70      	pop	{r4, r5, r6, pc}

08014264 <get_custom_error>:
 8014264:	4b01      	ldr	r3, [pc, #4]	; (801426c <get_custom_error+0x8>)
 8014266:	7818      	ldrb	r0, [r3, #0]
 8014268:	4770      	bx	lr
 801426a:	bf00      	nop
 801426c:	200109b0 	.word	0x200109b0

08014270 <recv_custom_msg>:
 8014270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014274:	4693      	mov	fp, r2
 8014276:	b089      	sub	sp, #36	; 0x24
 8014278:	2200      	movs	r2, #0
 801427a:	4604      	mov	r4, r0
 801427c:	468a      	mov	sl, r1
 801427e:	9305      	str	r3, [sp, #20]
 8014280:	f88d 201e 	strb.w	r2, [sp, #30]
 8014284:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 8014288:	b322      	cbz	r2, 80142d4 <recv_custom_msg+0x64>
 801428a:	f200 2902 	addw	r9, r0, #514	; 0x202
 801428e:	f10d 081f 	add.w	r8, sp, #31
 8014292:	af05      	add	r7, sp, #20
 8014294:	f10d 061e 	add.w	r6, sp, #30
 8014298:	f44f 7500 	mov.w	r5, #512	; 0x200
 801429c:	e002      	b.n	80142a4 <recv_custom_msg+0x34>
 801429e:	9b05      	ldr	r3, [sp, #20]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	dd0f      	ble.n	80142c4 <recv_custom_msg+0x54>
 80142a4:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 80142a8:	4623      	mov	r3, r4
 80142aa:	4622      	mov	r2, r4
 80142ac:	4648      	mov	r0, r9
 80142ae:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80142b2:	e9cd 5600 	strd	r5, r6, [sp]
 80142b6:	f001 fc71 	bl	8015b9c <uxr_read_framed_msg>
 80142ba:	2800      	cmp	r0, #0
 80142bc:	d0ef      	beq.n	801429e <recv_custom_msg+0x2e>
 80142be:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80142c2:	b1b3      	cbz	r3, 80142f2 <recv_custom_msg+0x82>
 80142c4:	4b0f      	ldr	r3, [pc, #60]	; (8014304 <recv_custom_msg+0x94>)
 80142c6:	2000      	movs	r0, #0
 80142c8:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80142cc:	701a      	strb	r2, [r3, #0]
 80142ce:	b009      	add	sp, #36	; 0x24
 80142d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142d4:	f10d 021f 	add.w	r2, sp, #31
 80142d8:	4601      	mov	r1, r0
 80142da:	9200      	str	r2, [sp, #0]
 80142dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80142e0:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 80142e4:	47a8      	blx	r5
 80142e6:	2800      	cmp	r0, #0
 80142e8:	d0ec      	beq.n	80142c4 <recv_custom_msg+0x54>
 80142ea:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d1e8      	bne.n	80142c4 <recv_custom_msg+0x54>
 80142f2:	f8cb 0000 	str.w	r0, [fp]
 80142f6:	2001      	movs	r0, #1
 80142f8:	f8ca 4000 	str.w	r4, [sl]
 80142fc:	b009      	add	sp, #36	; 0x24
 80142fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014302:	bf00      	nop
 8014304:	200109b0 	.word	0x200109b0

08014308 <send_custom_msg>:
 8014308:	b530      	push	{r4, r5, lr}
 801430a:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 801430e:	b087      	sub	sp, #28
 8014310:	4614      	mov	r4, r2
 8014312:	b995      	cbnz	r5, 801433a <send_custom_msg+0x32>
 8014314:	f8d0 5270 	ldr.w	r5, [r0, #624]	; 0x270
 8014318:	f10d 0317 	add.w	r3, sp, #23
 801431c:	47a8      	blx	r5
 801431e:	1e03      	subs	r3, r0, #0
 8014320:	bf18      	it	ne
 8014322:	2301      	movne	r3, #1
 8014324:	42a0      	cmp	r0, r4
 8014326:	bf18      	it	ne
 8014328:	2300      	movne	r3, #0
 801432a:	b91b      	cbnz	r3, 8014334 <send_custom_msg+0x2c>
 801432c:	4a0a      	ldr	r2, [pc, #40]	; (8014358 <send_custom_msg+0x50>)
 801432e:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8014332:	7011      	strb	r1, [r2, #0]
 8014334:	4618      	mov	r0, r3
 8014336:	b007      	add	sp, #28
 8014338:	bd30      	pop	{r4, r5, pc}
 801433a:	460b      	mov	r3, r1
 801433c:	2200      	movs	r2, #0
 801433e:	f10d 0117 	add.w	r1, sp, #23
 8014342:	9400      	str	r4, [sp, #0]
 8014344:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8014348:	4602      	mov	r2, r0
 801434a:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 801434e:	f200 2002 	addw	r0, r0, #514	; 0x202
 8014352:	f001 fa45 	bl	80157e0 <uxr_write_framed_msg>
 8014356:	e7e2      	b.n	801431e <send_custom_msg+0x16>
 8014358:	200109b0 	.word	0x200109b0

0801435c <uxr_set_custom_transport_callbacks>:
 801435c:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 8014360:	9901      	ldr	r1, [sp, #4]
 8014362:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 8014366:	9b00      	ldr	r3, [sp, #0]
 8014368:	e9c0 319c 	strd	r3, r1, [r0, #624]	; 0x270
 801436c:	4770      	bx	lr
 801436e:	bf00      	nop

08014370 <uxr_init_custom_transport>:
 8014370:	b538      	push	{r3, r4, r5, lr}
 8014372:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 8014376:	b303      	cbz	r3, 80143ba <uxr_init_custom_transport+0x4a>
 8014378:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 801437c:	4604      	mov	r4, r0
 801437e:	b1e2      	cbz	r2, 80143ba <uxr_init_custom_transport+0x4a>
 8014380:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8014384:	b1ca      	cbz	r2, 80143ba <uxr_init_custom_transport+0x4a>
 8014386:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 801438a:	b1b2      	cbz	r2, 80143ba <uxr_init_custom_transport+0x4a>
 801438c:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8014390:	4798      	blx	r3
 8014392:	4605      	mov	r5, r0
 8014394:	b188      	cbz	r0, 80143ba <uxr_init_custom_transport+0x4a>
 8014396:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 801439a:	b98b      	cbnz	r3, 80143c0 <uxr_init_custom_transport+0x50>
 801439c:	4b0b      	ldr	r3, [pc, #44]	; (80143cc <uxr_init_custom_transport+0x5c>)
 801439e:	4628      	mov	r0, r5
 80143a0:	490b      	ldr	r1, [pc, #44]	; (80143d0 <uxr_init_custom_transport+0x60>)
 80143a2:	4a0c      	ldr	r2, [pc, #48]	; (80143d4 <uxr_init_custom_transport+0x64>)
 80143a4:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 80143a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80143ac:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 80143b0:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 80143b4:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 80143b8:	bd38      	pop	{r3, r4, r5, pc}
 80143ba:	2500      	movs	r5, #0
 80143bc:	4628      	mov	r0, r5
 80143be:	bd38      	pop	{r3, r4, r5, pc}
 80143c0:	2100      	movs	r1, #0
 80143c2:	f204 2002 	addw	r0, r4, #514	; 0x202
 80143c6:	f001 fa05 	bl	80157d4 <uxr_init_framing_io>
 80143ca:	e7e7      	b.n	801439c <uxr_init_custom_transport+0x2c>
 80143cc:	08014271 	.word	0x08014271
 80143d0:	08014309 	.word	0x08014309
 80143d4:	08014265 	.word	0x08014265

080143d8 <uxr_close_custom_transport>:
 80143d8:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 80143dc:	4718      	bx	r3
 80143de:	bf00      	nop

080143e0 <uxr_object_id>:
 80143e0:	b082      	sub	sp, #8
 80143e2:	2300      	movs	r3, #0
 80143e4:	f88d 1006 	strb.w	r1, [sp, #6]
 80143e8:	f360 030f 	bfi	r3, r0, #0, #16
 80143ec:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80143f0:	f362 431f 	bfi	r3, r2, #16, #16
 80143f4:	4618      	mov	r0, r3
 80143f6:	b002      	add	sp, #8
 80143f8:	4770      	bx	lr
 80143fa:	bf00      	nop

080143fc <uxr_object_id_from_raw>:
 80143fc:	7843      	ldrb	r3, [r0, #1]
 80143fe:	b082      	sub	sp, #8
 8014400:	7801      	ldrb	r1, [r0, #0]
 8014402:	2000      	movs	r0, #0
 8014404:	091a      	lsrs	r2, r3, #4
 8014406:	f003 030f 	and.w	r3, r3, #15
 801440a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 801440e:	f88d 3006 	strb.w	r3, [sp, #6]
 8014412:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8014416:	f362 000f 	bfi	r0, r2, #0, #16
 801441a:	f363 401f 	bfi	r0, r3, #16, #16
 801441e:	b002      	add	sp, #8
 8014420:	4770      	bx	lr
 8014422:	bf00      	nop

08014424 <uxr_object_id_to_raw>:
 8014424:	4602      	mov	r2, r0
 8014426:	f3c0 4303 	ubfx	r3, r0, #16, #4
 801442a:	b082      	sub	sp, #8
 801442c:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8014430:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8014434:	f881 c000 	strb.w	ip, [r1]
 8014438:	7048      	strb	r0, [r1, #1]
 801443a:	b002      	add	sp, #8
 801443c:	4770      	bx	lr
 801443e:	bf00      	nop

08014440 <uxr_buffer_request_data>:
 8014440:	b530      	push	{r4, r5, lr}
 8014442:	b095      	sub	sp, #84	; 0x54
 8014444:	4604      	mov	r4, r0
 8014446:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8014448:	9303      	str	r3, [sp, #12]
 801444a:	2d00      	cmp	r5, #0
 801444c:	f88d 301c 	strb.w	r3, [sp, #28]
 8014450:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8014454:	f04f 0200 	mov.w	r2, #0
 8014458:	bf14      	ite	ne
 801445a:	2101      	movne	r1, #1
 801445c:	4611      	moveq	r1, r2
 801445e:	f88d 201d 	strb.w	r2, [sp, #29]
 8014462:	f88d 201e 	strb.w	r2, [sp, #30]
 8014466:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801446a:	d021      	beq.n	80144b0 <uxr_buffer_request_data+0x70>
 801446c:	686b      	ldr	r3, [r5, #4]
 801446e:	2210      	movs	r2, #16
 8014470:	6829      	ldr	r1, [r5, #0]
 8014472:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 8014476:	f8cd 1026 	str.w	r1, [sp, #38]	; 0x26
 801447a:	2308      	movs	r3, #8
 801447c:	2100      	movs	r1, #0
 801447e:	4620      	mov	r0, r4
 8014480:	e9cd 3100 	strd	r3, r1, [sp]
 8014484:	ab0c      	add	r3, sp, #48	; 0x30
 8014486:	9905      	ldr	r1, [sp, #20]
 8014488:	f001 f836 	bl	80154f8 <uxr_prepare_stream_to_write_submessage>
 801448c:	b918      	cbnz	r0, 8014496 <uxr_buffer_request_data+0x56>
 801448e:	4604      	mov	r4, r0
 8014490:	4620      	mov	r0, r4
 8014492:	b015      	add	sp, #84	; 0x54
 8014494:	bd30      	pop	{r4, r5, pc}
 8014496:	9904      	ldr	r1, [sp, #16]
 8014498:	aa06      	add	r2, sp, #24
 801449a:	4620      	mov	r0, r4
 801449c:	f001 f968 	bl	8015770 <uxr_init_base_object_request>
 80144a0:	4604      	mov	r4, r0
 80144a2:	a906      	add	r1, sp, #24
 80144a4:	a80c      	add	r0, sp, #48	; 0x30
 80144a6:	f002 fed5 	bl	8017254 <uxr_serialize_READ_DATA_Payload>
 80144aa:	4620      	mov	r0, r4
 80144ac:	b015      	add	sp, #84	; 0x54
 80144ae:	bd30      	pop	{r4, r5, pc}
 80144b0:	2208      	movs	r2, #8
 80144b2:	e7e2      	b.n	801447a <uxr_buffer_request_data+0x3a>

080144b4 <uxr_buffer_cancel_data>:
 80144b4:	b510      	push	{r4, lr}
 80144b6:	2300      	movs	r3, #0
 80144b8:	b094      	sub	sp, #80	; 0x50
 80144ba:	4604      	mov	r4, r0
 80144bc:	9205      	str	r2, [sp, #20]
 80144be:	9301      	str	r3, [sp, #4]
 80144c0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80144c4:	f88d 301e 	strb.w	r3, [sp, #30]
 80144c8:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 80144cc:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 80144d0:	2308      	movs	r3, #8
 80144d2:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80144d6:	2201      	movs	r2, #1
 80144d8:	9300      	str	r3, [sp, #0]
 80144da:	ab0c      	add	r3, sp, #48	; 0x30
 80144dc:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 80144e0:	2210      	movs	r2, #16
 80144e2:	f001 f809 	bl	80154f8 <uxr_prepare_stream_to_write_submessage>
 80144e6:	b918      	cbnz	r0, 80144f0 <uxr_buffer_cancel_data+0x3c>
 80144e8:	4604      	mov	r4, r0
 80144ea:	4620      	mov	r0, r4
 80144ec:	b014      	add	sp, #80	; 0x50
 80144ee:	bd10      	pop	{r4, pc}
 80144f0:	9905      	ldr	r1, [sp, #20]
 80144f2:	aa06      	add	r2, sp, #24
 80144f4:	4620      	mov	r0, r4
 80144f6:	f001 f93b 	bl	8015770 <uxr_init_base_object_request>
 80144fa:	4604      	mov	r4, r0
 80144fc:	a906      	add	r1, sp, #24
 80144fe:	a80c      	add	r0, sp, #48	; 0x30
 8014500:	f002 fea8 	bl	8017254 <uxr_serialize_READ_DATA_Payload>
 8014504:	4620      	mov	r0, r4
 8014506:	b014      	add	sp, #80	; 0x50
 8014508:	bd10      	pop	{r4, pc}
 801450a:	bf00      	nop

0801450c <read_submessage_format>:
 801450c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014510:	b095      	sub	sp, #84	; 0x54
 8014512:	f8bd 7078 	ldrh.w	r7, [sp, #120]	; 0x78
 8014516:	b113      	cbz	r3, 801451e <read_submessage_format+0x12>
 8014518:	b015      	add	sp, #84	; 0x54
 801451a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801451e:	4606      	mov	r6, r0
 8014520:	981c      	ldr	r0, [sp, #112]	; 0x70
 8014522:	460c      	mov	r4, r1
 8014524:	4615      	mov	r5, r2
 8014526:	9004      	str	r0, [sp, #16]
 8014528:	4699      	mov	r9, r3
 801452a:	981d      	ldr	r0, [sp, #116]	; 0x74
 801452c:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 8014530:	9005      	str	r0, [sp, #20]
 8014532:	a80c      	add	r0, sp, #48	; 0x30
 8014534:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8014538:	1a52      	subs	r2, r2, r1
 801453a:	f7f9 fcbd 	bl	800deb8 <ucdr_init_buffer>
 801453e:	a80c      	add	r0, sp, #48	; 0x30
 8014540:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8014544:	f7f9 fc8c 	bl	800de60 <ucdr_set_on_full_buffer_callback>
 8014548:	69e2      	ldr	r2, [r4, #28]
 801454a:	b19a      	cbz	r2, 8014574 <read_submessage_format+0x68>
 801454c:	f1b8 0f07 	cmp.w	r8, #7
 8014550:	f882 9014 	strb.w	r9, [r2, #20]
 8014554:	d040      	beq.n	80145d8 <read_submessage_format+0xcc>
 8014556:	f1b8 0f08 	cmp.w	r8, #8
 801455a:	d02e      	beq.n	80145ba <read_submessage_format+0xae>
 801455c:	f1b8 0f06 	cmp.w	r8, #6
 8014560:	d011      	beq.n	8014586 <read_submessage_format+0x7a>
 8014562:	2301      	movs	r3, #1
 8014564:	7513      	strb	r3, [r2, #20]
 8014566:	4629      	mov	r1, r5
 8014568:	4620      	mov	r0, r4
 801456a:	f7f9 fcf9 	bl	800df60 <ucdr_advance_buffer>
 801456e:	b015      	add	sp, #84	; 0x54
 8014570:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014574:	f1b8 0f07 	cmp.w	r8, #7
 8014578:	d02e      	beq.n	80145d8 <read_submessage_format+0xcc>
 801457a:	f1b8 0f08 	cmp.w	r8, #8
 801457e:	d01c      	beq.n	80145ba <read_submessage_format+0xae>
 8014580:	f1b8 0f06 	cmp.w	r8, #6
 8014584:	d1ef      	bne.n	8014566 <read_submessage_format+0x5a>
 8014586:	f8d6 8088 	ldr.w	r8, [r6, #136]	; 0x88
 801458a:	f1b8 0f00 	cmp.w	r8, #0
 801458e:	d011      	beq.n	80145b4 <read_submessage_format+0xa8>
 8014590:	ab0c      	add	r3, sp, #48	; 0x30
 8014592:	9501      	str	r5, [sp, #4]
 8014594:	463a      	mov	r2, r7
 8014596:	4630      	mov	r0, r6
 8014598:	9300      	str	r3, [sp, #0]
 801459a:	2306      	movs	r3, #6
 801459c:	f88d 3016 	strb.w	r3, [sp, #22]
 80145a0:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 80145a4:	9302      	str	r3, [sp, #8]
 80145a6:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80145aa:	47c0      	blx	r8
 80145ac:	2301      	movs	r3, #1
 80145ae:	69e2      	ldr	r2, [r4, #28]
 80145b0:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 80145b4:	2a00      	cmp	r2, #0
 80145b6:	d1d4      	bne.n	8014562 <read_submessage_format+0x56>
 80145b8:	e7d5      	b.n	8014566 <read_submessage_format+0x5a>
 80145ba:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d0f8      	beq.n	80145b4 <read_submessage_format+0xa8>
 80145c2:	a80c      	add	r0, sp, #48	; 0x30
 80145c4:	a906      	add	r1, sp, #24
 80145c6:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80145ca:	f002 ff0f 	bl	80173ec <uxr_deserialize_SampleIdentity>
 80145ce:	b9a0      	cbnz	r0, 80145fa <read_submessage_format+0xee>
 80145d0:	69e2      	ldr	r2, [r4, #28]
 80145d2:	2a00      	cmp	r2, #0
 80145d4:	d1c5      	bne.n	8014562 <read_submessage_format+0x56>
 80145d6:	e7c6      	b.n	8014566 <read_submessage_format+0x5a>
 80145d8:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 80145dc:	b13b      	cbz	r3, 80145ee <read_submessage_format+0xe2>
 80145de:	a906      	add	r1, sp, #24
 80145e0:	a80c      	add	r0, sp, #48	; 0x30
 80145e2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80145e6:	f002 fbd5 	bl	8016d94 <uxr_deserialize_BaseObjectRequest>
 80145ea:	bb60      	cbnz	r0, 8014646 <read_submessage_format+0x13a>
 80145ec:	69e2      	ldr	r2, [r4, #28]
 80145ee:	68a3      	ldr	r3, [r4, #8]
 80145f0:	442b      	add	r3, r5
 80145f2:	60a3      	str	r3, [r4, #8]
 80145f4:	2a00      	cmp	r2, #0
 80145f6:	d1b4      	bne.n	8014562 <read_submessage_format+0x56>
 80145f8:	e7b5      	b.n	8014566 <read_submessage_format+0x5a>
 80145fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80145fc:	a80c      	add	r0, sp, #48	; 0x30
 80145fe:	eba8 0803 	sub.w	r8, r8, r3
 8014602:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8014606:	44a8      	add	r8, r5
 8014608:	1a52      	subs	r2, r2, r1
 801460a:	f7f9 fc55 	bl	800deb8 <ucdr_init_buffer>
 801460e:	a80c      	add	r0, sp, #48	; 0x30
 8014610:	fa1f f888 	uxth.w	r8, r8
 8014614:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8014618:	f7f9 fc22 	bl	800de60 <ucdr_set_on_full_buffer_callback>
 801461c:	ab0c      	add	r3, sp, #48	; 0x30
 801461e:	2108      	movs	r1, #8
 8014620:	f8cd 8004 	str.w	r8, [sp, #4]
 8014624:	9300      	str	r3, [sp, #0]
 8014626:	463a      	mov	r2, r7
 8014628:	f88d 1016 	strb.w	r1, [sp, #22]
 801462c:	ab06      	add	r3, sp, #24
 801462e:	f8d6 10a8 	ldr.w	r1, [r6, #168]	; 0xa8
 8014632:	4630      	mov	r0, r6
 8014634:	9102      	str	r1, [sp, #8]
 8014636:	9905      	ldr	r1, [sp, #20]
 8014638:	f8d6 70a4 	ldr.w	r7, [r6, #164]	; 0xa4
 801463c:	47b8      	blx	r7
 801463e:	2301      	movs	r3, #1
 8014640:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8014644:	e7c4      	b.n	80145d0 <read_submessage_format+0xc4>
 8014646:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801464a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801464c:	a80c      	add	r0, sp, #48	; 0x30
 801464e:	1a52      	subs	r2, r2, r1
 8014650:	eba8 0803 	sub.w	r8, r8, r3
 8014654:	f7f9 fc30 	bl	800deb8 <ucdr_init_buffer>
 8014658:	a80c      	add	r0, sp, #48	; 0x30
 801465a:	44a8      	add	r8, r5
 801465c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8014660:	f7f9 fbfe 	bl	800de60 <ucdr_set_on_full_buffer_callback>
 8014664:	ab0c      	add	r3, sp, #48	; 0x30
 8014666:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801466a:	fa1f f888 	uxth.w	r8, r8
 801466e:	9300      	str	r3, [sp, #0]
 8014670:	463a      	mov	r2, r7
 8014672:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8014676:	4630      	mov	r0, r6
 8014678:	f8cd 8004 	str.w	r8, [sp, #4]
 801467c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8014680:	2107      	movs	r1, #7
 8014682:	f88d 1016 	strb.w	r1, [sp, #22]
 8014686:	b29b      	uxth	r3, r3
 8014688:	f8d6 10b0 	ldr.w	r1, [r6, #176]	; 0xb0
 801468c:	9102      	str	r1, [sp, #8]
 801468e:	9905      	ldr	r1, [sp, #20]
 8014690:	f8d6 70ac 	ldr.w	r7, [r6, #172]	; 0xac
 8014694:	47b8      	blx	r7
 8014696:	2301      	movs	r3, #1
 8014698:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 801469c:	e7a6      	b.n	80145ec <read_submessage_format+0xe0>
 801469e:	bf00      	nop

080146a0 <on_get_fragmentation_info>:
 80146a0:	b500      	push	{lr}
 80146a2:	b08b      	sub	sp, #44	; 0x2c
 80146a4:	4601      	mov	r1, r0
 80146a6:	2204      	movs	r2, #4
 80146a8:	a802      	add	r0, sp, #8
 80146aa:	f7f9 fc05 	bl	800deb8 <ucdr_init_buffer>
 80146ae:	f10d 0305 	add.w	r3, sp, #5
 80146b2:	f10d 0206 	add.w	r2, sp, #6
 80146b6:	a901      	add	r1, sp, #4
 80146b8:	a802      	add	r0, sp, #8
 80146ba:	f001 fe5f 	bl	801637c <uxr_read_submessage_header>
 80146be:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80146c2:	2b0d      	cmp	r3, #13
 80146c4:	d003      	beq.n	80146ce <on_get_fragmentation_info+0x2e>
 80146c6:	2000      	movs	r0, #0
 80146c8:	b00b      	add	sp, #44	; 0x2c
 80146ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80146ce:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80146d2:	f013 0f02 	tst.w	r3, #2
 80146d6:	bf14      	ite	ne
 80146d8:	2002      	movne	r0, #2
 80146da:	2001      	moveq	r0, #1
 80146dc:	b00b      	add	sp, #44	; 0x2c
 80146de:	f85d fb04 	ldr.w	pc, [sp], #4
 80146e2:	bf00      	nop

080146e4 <read_submessage_get_info>:
 80146e4:	b570      	push	{r4, r5, r6, lr}
 80146e6:	2500      	movs	r5, #0
 80146e8:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 80146ec:	460e      	mov	r6, r1
 80146ee:	4604      	mov	r4, r0
 80146f0:	f44f 7224 	mov.w	r2, #656	; 0x290
 80146f4:	4629      	mov	r1, r5
 80146f6:	a810      	add	r0, sp, #64	; 0x40
 80146f8:	9503      	str	r5, [sp, #12]
 80146fa:	9504      	str	r5, [sp, #16]
 80146fc:	f004 ff9a 	bl	8019634 <memset>
 8014700:	a903      	add	r1, sp, #12
 8014702:	4630      	mov	r0, r6
 8014704:	f002 fce6 	bl	80170d4 <uxr_deserialize_GET_INFO_Payload>
 8014708:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801470c:	4620      	mov	r0, r4
 801470e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8014712:	f001 f825 	bl	8015760 <uxr_session_header_offset>
 8014716:	462b      	mov	r3, r5
 8014718:	220c      	movs	r2, #12
 801471a:	a905      	add	r1, sp, #20
 801471c:	9000      	str	r0, [sp, #0]
 801471e:	a808      	add	r0, sp, #32
 8014720:	f7f9 fbb8 	bl	800de94 <ucdr_init_buffer_origin_offset>
 8014724:	a910      	add	r1, sp, #64	; 0x40
 8014726:	a808      	add	r0, sp, #32
 8014728:	f002 fd48 	bl	80171bc <uxr_serialize_INFO_Payload>
 801472c:	9b08      	ldr	r3, [sp, #32]
 801472e:	462a      	mov	r2, r5
 8014730:	4629      	mov	r1, r5
 8014732:	4620      	mov	r0, r4
 8014734:	f000 ffc0 	bl	80156b8 <uxr_stamp_session_header>
 8014738:	a808      	add	r0, sp, #32
 801473a:	f7f9 fbeb 	bl	800df14 <ucdr_buffer_length>
 801473e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014740:	4602      	mov	r2, r0
 8014742:	a905      	add	r1, sp, #20
 8014744:	e9d3 0400 	ldrd	r0, r4, [r3]
 8014748:	47a0      	blx	r4
 801474a:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 801474e:	bd70      	pop	{r4, r5, r6, pc}

08014750 <write_submessage_acknack.isra.0>:
 8014750:	b570      	push	{r4, r5, r6, lr}
 8014752:	b092      	sub	sp, #72	; 0x48
 8014754:	4605      	mov	r5, r0
 8014756:	460e      	mov	r6, r1
 8014758:	4614      	mov	r4, r2
 801475a:	f001 f801 	bl	8015760 <uxr_session_header_offset>
 801475e:	a905      	add	r1, sp, #20
 8014760:	9000      	str	r0, [sp, #0]
 8014762:	2300      	movs	r3, #0
 8014764:	a80a      	add	r0, sp, #40	; 0x28
 8014766:	2211      	movs	r2, #17
 8014768:	f7f9 fb94 	bl	800de94 <ucdr_init_buffer_origin_offset>
 801476c:	2218      	movs	r2, #24
 801476e:	2300      	movs	r3, #0
 8014770:	210a      	movs	r1, #10
 8014772:	fb02 5404 	mla	r4, r2, r4, r5
 8014776:	a80a      	add	r0, sp, #40	; 0x28
 8014778:	2205      	movs	r2, #5
 801477a:	3450      	adds	r4, #80	; 0x50
 801477c:	f001 fde4 	bl	8016348 <uxr_buffer_submessage_header>
 8014780:	a903      	add	r1, sp, #12
 8014782:	4620      	mov	r0, r4
 8014784:	f003 ff9e 	bl	80186c4 <uxr_compute_acknack>
 8014788:	ba40      	rev16	r0, r0
 801478a:	a903      	add	r1, sp, #12
 801478c:	f88d 6010 	strb.w	r6, [sp, #16]
 8014790:	f8ad 000e 	strh.w	r0, [sp, #14]
 8014794:	a80a      	add	r0, sp, #40	; 0x28
 8014796:	f002 fd83 	bl	80172a0 <uxr_serialize_ACKNACK_Payload>
 801479a:	2200      	movs	r2, #0
 801479c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801479e:	4628      	mov	r0, r5
 80147a0:	4611      	mov	r1, r2
 80147a2:	f000 ff89 	bl	80156b8 <uxr_stamp_session_header>
 80147a6:	a80a      	add	r0, sp, #40	; 0x28
 80147a8:	f7f9 fbb4 	bl	800df14 <ucdr_buffer_length>
 80147ac:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80147ae:	4602      	mov	r2, r0
 80147b0:	a905      	add	r1, sp, #20
 80147b2:	e9d3 0400 	ldrd	r0, r4, [r3]
 80147b6:	47a0      	blx	r4
 80147b8:	b012      	add	sp, #72	; 0x48
 80147ba:	bd70      	pop	{r4, r5, r6, pc}
 80147bc:	0000      	movs	r0, r0
	...

080147c0 <uxr_init_session>:
 80147c0:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 80147f8 <uxr_init_session+0x38>
 80147c4:	2300      	movs	r3, #0
 80147c6:	b510      	push	{r4, lr}
 80147c8:	4604      	mov	r4, r0
 80147ca:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 80147ce:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 80147d2:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 80147d6:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 80147da:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 80147de:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 80147e2:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 80147e6:	2181      	movs	r1, #129	; 0x81
 80147e8:	f000 feca 	bl	8015580 <uxr_init_session_info>
 80147ec:	f104 0008 	add.w	r0, r4, #8
 80147f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80147f4:	f001 bcc4 	b.w	8016180 <uxr_init_stream_storage>
	...

08014800 <uxr_set_status_callback>:
 8014800:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 8014804:	4770      	bx	lr
 8014806:	bf00      	nop

08014808 <uxr_set_topic_callback>:
 8014808:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 801480c:	4770      	bx	lr
 801480e:	bf00      	nop

08014810 <uxr_set_request_callback>:
 8014810:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 8014814:	4770      	bx	lr
 8014816:	bf00      	nop

08014818 <uxr_set_reply_callback>:
 8014818:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 801481c:	4770      	bx	lr
 801481e:	bf00      	nop

08014820 <uxr_create_output_best_effort_stream>:
 8014820:	b510      	push	{r4, lr}
 8014822:	4604      	mov	r4, r0
 8014824:	b084      	sub	sp, #16
 8014826:	e9cd 2100 	strd	r2, r1, [sp]
 801482a:	f000 ff99 	bl	8015760 <uxr_session_header_offset>
 801482e:	4603      	mov	r3, r0
 8014830:	f104 0008 	add.w	r0, r4, #8
 8014834:	e9dd 2100 	ldrd	r2, r1, [sp]
 8014838:	b004      	add	sp, #16
 801483a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801483e:	f001 bce5 	b.w	801620c <uxr_add_output_best_effort_buffer>
 8014842:	bf00      	nop

08014844 <uxr_create_output_reliable_stream>:
 8014844:	b530      	push	{r4, r5, lr}
 8014846:	b089      	sub	sp, #36	; 0x24
 8014848:	4604      	mov	r4, r0
 801484a:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801484e:	9303      	str	r3, [sp, #12]
 8014850:	f000 ff86 	bl	8015760 <uxr_session_header_offset>
 8014854:	4605      	mov	r5, r0
 8014856:	9905      	ldr	r1, [sp, #20]
 8014858:	f104 0008 	add.w	r0, r4, #8
 801485c:	9500      	str	r5, [sp, #0]
 801485e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8014862:	f001 fce7 	bl	8016234 <uxr_add_output_reliable_buffer>
 8014866:	2200      	movs	r2, #0
 8014868:	fa5f fc80 	uxtb.w	ip, r0
 801486c:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8014870:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8014874:	0e03      	lsrs	r3, r0, #24
 8014876:	f36c 0207 	bfi	r2, ip, #0, #8
 801487a:	f364 220f 	bfi	r2, r4, #8, #8
 801487e:	f361 4217 	bfi	r2, r1, #16, #8
 8014882:	f363 621f 	bfi	r2, r3, #24, #8
 8014886:	4610      	mov	r0, r2
 8014888:	b009      	add	sp, #36	; 0x24
 801488a:	bd30      	pop	{r4, r5, pc}

0801488c <uxr_create_input_best_effort_stream>:
 801488c:	b082      	sub	sp, #8
 801488e:	3008      	adds	r0, #8
 8014890:	b002      	add	sp, #8
 8014892:	f001 bce9 	b.w	8016268 <uxr_add_input_best_effort_buffer>
 8014896:	bf00      	nop

08014898 <uxr_create_input_reliable_stream>:
 8014898:	b510      	push	{r4, lr}
 801489a:	4c0c      	ldr	r4, [pc, #48]	; (80148cc <uxr_create_input_reliable_stream+0x34>)
 801489c:	b084      	sub	sp, #16
 801489e:	3008      	adds	r0, #8
 80148a0:	9400      	str	r4, [sp, #0]
 80148a2:	f001 fcf7 	bl	8016294 <uxr_add_input_reliable_buffer>
 80148a6:	2200      	movs	r2, #0
 80148a8:	fa5f fe80 	uxtb.w	lr, r0
 80148ac:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 80148b0:	f3c0 4107 	ubfx	r1, r0, #16, #8
 80148b4:	0e03      	lsrs	r3, r0, #24
 80148b6:	f36e 0207 	bfi	r2, lr, #0, #8
 80148ba:	f36c 220f 	bfi	r2, ip, #8, #8
 80148be:	f361 4217 	bfi	r2, r1, #16, #8
 80148c2:	f363 621f 	bfi	r2, r3, #24, #8
 80148c6:	4610      	mov	r0, r2
 80148c8:	b004      	add	sp, #16
 80148ca:	bd10      	pop	{r4, pc}
 80148cc:	080146a1 	.word	0x080146a1

080148d0 <uxr_epoch_nanos>:
 80148d0:	b510      	push	{r4, lr}
 80148d2:	4604      	mov	r4, r0
 80148d4:	f001 fd9a 	bl	801640c <uxr_nanos>
 80148d8:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 80148dc:	1ac0      	subs	r0, r0, r3
 80148de:	eb61 0102 	sbc.w	r1, r1, r2
 80148e2:	bd10      	pop	{r4, pc}

080148e4 <uxr_flash_output_streams>:
 80148e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80148e8:	7e03      	ldrb	r3, [r0, #24]
 80148ea:	b084      	sub	sp, #16
 80148ec:	4604      	mov	r4, r0
 80148ee:	b1fb      	cbz	r3, 8014930 <uxr_flash_output_streams+0x4c>
 80148f0:	f04f 0900 	mov.w	r9, #0
 80148f4:	f10d 0802 	add.w	r8, sp, #2
 80148f8:	af03      	add	r7, sp, #12
 80148fa:	ae02      	add	r6, sp, #8
 80148fc:	4648      	mov	r0, r9
 80148fe:	2201      	movs	r2, #1
 8014900:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8014904:	4611      	mov	r1, r2
 8014906:	3508      	adds	r5, #8
 8014908:	f001 fbe0 	bl	80160cc <uxr_stream_id>
 801490c:	4684      	mov	ip, r0
 801490e:	4643      	mov	r3, r8
 8014910:	463a      	mov	r2, r7
 8014912:	4631      	mov	r1, r6
 8014914:	4628      	mov	r0, r5
 8014916:	f8cd c004 	str.w	ip, [sp, #4]
 801491a:	f003 ff5d 	bl	80187d8 <uxr_prepare_best_effort_buffer_to_send>
 801491e:	2800      	cmp	r0, #0
 8014920:	d13d      	bne.n	801499e <uxr_flash_output_streams+0xba>
 8014922:	f109 0901 	add.w	r9, r9, #1
 8014926:	7e23      	ldrb	r3, [r4, #24]
 8014928:	fa5f f089 	uxtb.w	r0, r9
 801492c:	4283      	cmp	r3, r0
 801492e:	d8e6      	bhi.n	80148fe <uxr_flash_output_streams+0x1a>
 8014930:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8014934:	b383      	cbz	r3, 8014998 <uxr_flash_output_streams+0xb4>
 8014936:	f04f 0900 	mov.w	r9, #0
 801493a:	f10d 0802 	add.w	r8, sp, #2
 801493e:	af03      	add	r7, sp, #12
 8014940:	ae02      	add	r6, sp, #8
 8014942:	4648      	mov	r0, r9
 8014944:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8014948:	2201      	movs	r2, #1
 801494a:	2102      	movs	r1, #2
 801494c:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8014950:	f001 fbbc 	bl	80160cc <uxr_stream_id>
 8014954:	9001      	str	r0, [sp, #4]
 8014956:	3520      	adds	r5, #32
 8014958:	e00c      	b.n	8014974 <uxr_flash_output_streams+0x90>
 801495a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801495e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8014962:	9b02      	ldr	r3, [sp, #8]
 8014964:	f000 fea8 	bl	80156b8 <uxr_stamp_session_header>
 8014968:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801496a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801496e:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8014972:	47d0      	blx	sl
 8014974:	4643      	mov	r3, r8
 8014976:	463a      	mov	r2, r7
 8014978:	4631      	mov	r1, r6
 801497a:	4628      	mov	r0, r5
 801497c:	f004 f950 	bl	8018c20 <uxr_prepare_next_reliable_buffer_to_send>
 8014980:	4603      	mov	r3, r0
 8014982:	4620      	mov	r0, r4
 8014984:	2b00      	cmp	r3, #0
 8014986:	d1e8      	bne.n	801495a <uxr_flash_output_streams+0x76>
 8014988:	f109 0901 	add.w	r9, r9, #1
 801498c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8014990:	fa5f f089 	uxtb.w	r0, r9
 8014994:	4283      	cmp	r3, r0
 8014996:	d8d5      	bhi.n	8014944 <uxr_flash_output_streams+0x60>
 8014998:	b004      	add	sp, #16
 801499a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801499e:	9b02      	ldr	r3, [sp, #8]
 80149a0:	4620      	mov	r0, r4
 80149a2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80149a6:	f109 0901 	add.w	r9, r9, #1
 80149aa:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80149ae:	f000 fe83 	bl	80156b8 <uxr_stamp_session_header>
 80149b2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80149b4:	9a03      	ldr	r2, [sp, #12]
 80149b6:	685d      	ldr	r5, [r3, #4]
 80149b8:	6818      	ldr	r0, [r3, #0]
 80149ba:	9902      	ldr	r1, [sp, #8]
 80149bc:	47a8      	blx	r5
 80149be:	7e23      	ldrb	r3, [r4, #24]
 80149c0:	fa5f f089 	uxtb.w	r0, r9
 80149c4:	4283      	cmp	r3, r0
 80149c6:	d89a      	bhi.n	80148fe <uxr_flash_output_streams+0x1a>
 80149c8:	e7b2      	b.n	8014930 <uxr_flash_output_streams+0x4c>
 80149ca:	bf00      	nop

080149cc <read_submessage_info>:
 80149cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149d0:	460d      	mov	r5, r1
 80149d2:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 80149d6:	4606      	mov	r6, r0
 80149d8:	4669      	mov	r1, sp
 80149da:	4628      	mov	r0, r5
 80149dc:	f002 fa8c 	bl	8016ef8 <uxr_deserialize_BaseObjectReply>
 80149e0:	4604      	mov	r4, r0
 80149e2:	a902      	add	r1, sp, #8
 80149e4:	4628      	mov	r0, r5
 80149e6:	f89d 7005 	ldrb.w	r7, [sp, #5]
 80149ea:	f7f7 ffe3 	bl	800c9b4 <ucdr_deserialize_bool>
 80149ee:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80149f2:	4004      	ands	r4, r0
 80149f4:	b2e4      	uxtb	r4, r4
 80149f6:	b95b      	cbnz	r3, 8014a10 <read_submessage_info+0x44>
 80149f8:	a987      	add	r1, sp, #540	; 0x21c
 80149fa:	4628      	mov	r0, r5
 80149fc:	f7f7 ffda 	bl	800c9b4 <ucdr_deserialize_bool>
 8014a00:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 8014a04:	4680      	mov	r8, r0
 8014a06:	b94b      	cbnz	r3, 8014a1c <read_submessage_info+0x50>
 8014a08:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8014a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a10:	a903      	add	r1, sp, #12
 8014a12:	4628      	mov	r0, r5
 8014a14:	f002 f91c 	bl	8016c50 <uxr_deserialize_ObjectVariant>
 8014a18:	4004      	ands	r4, r0
 8014a1a:	e7ed      	b.n	80149f8 <read_submessage_info+0x2c>
 8014a1c:	a988      	add	r1, sp, #544	; 0x220
 8014a1e:	4628      	mov	r0, r5
 8014a20:	f7f7 fff6 	bl	800ca10 <ucdr_deserialize_uint8_t>
 8014a24:	ea14 0f08 	tst.w	r4, r8
 8014a28:	d0ee      	beq.n	8014a08 <read_submessage_info+0x3c>
 8014a2a:	2800      	cmp	r0, #0
 8014a2c:	d0ec      	beq.n	8014a08 <read_submessage_info+0x3c>
 8014a2e:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 8014a32:	2b0d      	cmp	r3, #13
 8014a34:	d1e8      	bne.n	8014a08 <read_submessage_info+0x3c>
 8014a36:	a98a      	add	r1, sp, #552	; 0x228
 8014a38:	4628      	mov	r0, r5
 8014a3a:	f7f8 fd8f 	bl	800d55c <ucdr_deserialize_int16_t>
 8014a3e:	b138      	cbz	r0, 8014a50 <read_submessage_info+0x84>
 8014a40:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	dd06      	ble.n	8014a56 <read_submessage_info+0x8a>
 8014a48:	2f00      	cmp	r7, #0
 8014a4a:	bf14      	ite	ne
 8014a4c:	2001      	movne	r0, #1
 8014a4e:	2002      	moveq	r0, #2
 8014a50:	f886 00b5 	strb.w	r0, [r6, #181]	; 0xb5
 8014a54:	e7d8      	b.n	8014a08 <read_submessage_info+0x3c>
 8014a56:	2000      	movs	r0, #0
 8014a58:	e7fa      	b.n	8014a50 <read_submessage_info+0x84>
 8014a5a:	bf00      	nop

08014a5c <read_submessage_list>:
 8014a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a60:	4604      	mov	r4, r0
 8014a62:	b097      	sub	sp, #92	; 0x5c
 8014a64:	460d      	mov	r5, r1
 8014a66:	4ec1      	ldr	r6, [pc, #772]	; (8014d6c <read_submessage_list+0x310>)
 8014a68:	9209      	str	r2, [sp, #36]	; 0x24
 8014a6a:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8014a6e:	aa0c      	add	r2, sp, #48	; 0x30
 8014a70:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 8014a74:	4628      	mov	r0, r5
 8014a76:	f001 fc81 	bl	801637c <uxr_read_submessage_header>
 8014a7a:	2800      	cmp	r0, #0
 8014a7c:	f000 8142 	beq.w	8014d04 <read_submessage_list+0x2a8>
 8014a80:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8014a84:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8014a88:	3b02      	subs	r3, #2
 8014a8a:	2b0d      	cmp	r3, #13
 8014a8c:	d8ed      	bhi.n	8014a6a <read_submessage_list+0xe>
 8014a8e:	a101      	add	r1, pc, #4	; (adr r1, 8014a94 <read_submessage_list+0x38>)
 8014a90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014a94:	08014cfb 	.word	0x08014cfb
 8014a98:	08014a6b 	.word	0x08014a6b
 8014a9c:	08014ceb 	.word	0x08014ceb
 8014aa0:	08014c89 	.word	0x08014c89
 8014aa4:	08014c7f 	.word	0x08014c7f
 8014aa8:	08014a6b 	.word	0x08014a6b
 8014aac:	08014a6b 	.word	0x08014a6b
 8014ab0:	08014bd5 	.word	0x08014bd5
 8014ab4:	08014b67 	.word	0x08014b67
 8014ab8:	08014b27 	.word	0x08014b27
 8014abc:	08014a6b 	.word	0x08014a6b
 8014ac0:	08014a6b 	.word	0x08014a6b
 8014ac4:	08014a6b 	.word	0x08014a6b
 8014ac8:	08014acd 	.word	0x08014acd
 8014acc:	a910      	add	r1, sp, #64	; 0x40
 8014ace:	4628      	mov	r0, r5
 8014ad0:	f002 fc3a 	bl	8017348 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8014ad4:	f8d4 8090 	ldr.w	r8, [r4, #144]	; 0x90
 8014ad8:	f1b8 0f00 	cmp.w	r8, #0
 8014adc:	f000 811a 	beq.w	8014d14 <read_submessage_list+0x2b8>
 8014ae0:	f001 fc94 	bl	801640c <uxr_nanos>
 8014ae4:	4602      	mov	r2, r0
 8014ae6:	460b      	mov	r3, r1
 8014ae8:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8014aec:	2100      	movs	r1, #0
 8014aee:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8014af0:	9006      	str	r0, [sp, #24]
 8014af2:	468c      	mov	ip, r1
 8014af4:	9815      	ldr	r0, [sp, #84]	; 0x54
 8014af6:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8014afa:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8014afc:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 8014b00:	468c      	mov	ip, r1
 8014b02:	9811      	ldr	r0, [sp, #68]	; 0x44
 8014b04:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8014b08:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 8014b0c:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	; 0x48
 8014b10:	fbc7 0106 	smlal	r0, r1, r7, r6
 8014b14:	e9cd 0100 	strd	r0, r1, [sp]
 8014b18:	4620      	mov	r0, r4
 8014b1a:	47c0      	blx	r8
 8014b1c:	f04f 0301 	mov.w	r3, #1
 8014b20:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 8014b24:	e7a1      	b.n	8014a6a <read_submessage_list+0xe>
 8014b26:	a910      	add	r1, sp, #64	; 0x40
 8014b28:	4628      	mov	r0, r5
 8014b2a:	f002 fbf9 	bl	8017320 <uxr_deserialize_HEARTBEAT_Payload>
 8014b2e:	2100      	movs	r1, #0
 8014b30:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8014b34:	f001 faf8 	bl	8016128 <uxr_stream_id_from_raw>
 8014b38:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8014b3c:	900f      	str	r0, [sp, #60]	; 0x3c
 8014b3e:	f104 0008 	add.w	r0, r4, #8
 8014b42:	4641      	mov	r1, r8
 8014b44:	f001 fbde 	bl	8016304 <uxr_get_input_reliable_stream>
 8014b48:	2800      	cmp	r0, #0
 8014b4a:	d08e      	beq.n	8014a6a <read_submessage_list+0xe>
 8014b4c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8014b50:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8014b54:	f003 fdaa 	bl	80186ac <uxr_process_heartbeat>
 8014b58:	4642      	mov	r2, r8
 8014b5a:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 8014b5e:	4620      	mov	r0, r4
 8014b60:	f7ff fdf6 	bl	8014750 <write_submessage_acknack.isra.0>
 8014b64:	e781      	b.n	8014a6a <read_submessage_list+0xe>
 8014b66:	a910      	add	r1, sp, #64	; 0x40
 8014b68:	4628      	mov	r0, r5
 8014b6a:	f002 fbb1 	bl	80172d0 <uxr_deserialize_ACKNACK_Payload>
 8014b6e:	2100      	movs	r1, #0
 8014b70:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8014b74:	f001 fad8 	bl	8016128 <uxr_stream_id_from_raw>
 8014b78:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8014b7c:	900d      	str	r0, [sp, #52]	; 0x34
 8014b7e:	f104 0008 	add.w	r0, r4, #8
 8014b82:	f001 fba9 	bl	80162d8 <uxr_get_output_reliable_stream>
 8014b86:	4680      	mov	r8, r0
 8014b88:	2800      	cmp	r0, #0
 8014b8a:	f43f af6e 	beq.w	8014a6a <read_submessage_list+0xe>
 8014b8e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8014b92:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8014b96:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 8014b9a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8014b9e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8014ba2:	b289      	uxth	r1, r1
 8014ba4:	f004 f8e4 	bl	8018d70 <uxr_process_acknack>
 8014ba8:	4640      	mov	r0, r8
 8014baa:	f004 f8a5 	bl	8018cf8 <uxr_begin_output_nack_buffer_it>
 8014bae:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 8014bb2:	e005      	b.n	8014bc0 <read_submessage_list+0x164>
 8014bb4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014bb6:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 8014bba:	e9d3 0900 	ldrd	r0, r9, [r3]
 8014bbe:	47c8      	blx	r9
 8014bc0:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 8014bc4:	aa0f      	add	r2, sp, #60	; 0x3c
 8014bc6:	4651      	mov	r1, sl
 8014bc8:	4640      	mov	r0, r8
 8014bca:	f004 f897 	bl	8018cfc <uxr_next_reliable_nack_buffer_to_send>
 8014bce:	2800      	cmp	r0, #0
 8014bd0:	d1f0      	bne.n	8014bb4 <read_submessage_list+0x158>
 8014bd2:	e74a      	b.n	8014a6a <read_submessage_list+0xe>
 8014bd4:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8014bd8:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8014bdc:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 8014be0:	4628      	mov	r0, r5
 8014be2:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 8014be6:	4651      	mov	r1, sl
 8014be8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8014bec:	f1a8 0804 	sub.w	r8, r8, #4
 8014bf0:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 8014bf4:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 8014bf8:	fa1f f888 	uxth.w	r8, r8
 8014bfc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8014c00:	f009 090e 	and.w	r9, r9, #14
 8014c04:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 8014c08:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8014c0c:	f002 f8c2 	bl	8016d94 <uxr_deserialize_BaseObjectRequest>
 8014c10:	4650      	mov	r0, sl
 8014c12:	a90f      	add	r1, sp, #60	; 0x3c
 8014c14:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8014c18:	f000 fdca 	bl	80157b0 <uxr_parse_base_object_request>
 8014c1c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014c1e:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 8014c22:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 8014c26:	9110      	str	r1, [sp, #64]	; 0x40
 8014c28:	f1bb 0f00 	cmp.w	fp, #0
 8014c2c:	d006      	beq.n	8014c3c <read_submessage_list+0x1e0>
 8014c2e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8014c32:	4652      	mov	r2, sl
 8014c34:	4620      	mov	r0, r4
 8014c36:	9300      	str	r3, [sp, #0]
 8014c38:	2300      	movs	r3, #0
 8014c3a:	47d8      	blx	fp
 8014c3c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8014c3e:	b182      	cbz	r2, 8014c62 <read_submessage_list+0x206>
 8014c40:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8014c42:	f04f 0c00 	mov.w	ip, #0
 8014c46:	3902      	subs	r1, #2
 8014c48:	e003      	b.n	8014c52 <read_submessage_list+0x1f6>
 8014c4a:	f10c 0c01 	add.w	ip, ip, #1
 8014c4e:	4594      	cmp	ip, r2
 8014c50:	d007      	beq.n	8014c62 <read_submessage_list+0x206>
 8014c52:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8014c56:	4553      	cmp	r3, sl
 8014c58:	d1f7      	bne.n	8014c4a <read_submessage_list+0x1ee>
 8014c5a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8014c5c:	2200      	movs	r2, #0
 8014c5e:	f803 200c 	strb.w	r2, [r3, ip]
 8014c62:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8014c66:	464b      	mov	r3, r9
 8014c68:	4642      	mov	r2, r8
 8014c6a:	4620      	mov	r0, r4
 8014c6c:	9102      	str	r1, [sp, #8]
 8014c6e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014c70:	9101      	str	r1, [sp, #4]
 8014c72:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014c74:	9100      	str	r1, [sp, #0]
 8014c76:	4629      	mov	r1, r5
 8014c78:	f7ff fc48 	bl	801450c <read_submessage_format>
 8014c7c:	e6f5      	b.n	8014a6a <read_submessage_list+0xe>
 8014c7e:	4629      	mov	r1, r5
 8014c80:	4620      	mov	r0, r4
 8014c82:	f7ff fea3 	bl	80149cc <read_submessage_info>
 8014c86:	e6f0      	b.n	8014a6a <read_submessage_list+0xe>
 8014c88:	2a00      	cmp	r2, #0
 8014c8a:	d03e      	beq.n	8014d0a <read_submessage_list+0x2ae>
 8014c8c:	a910      	add	r1, sp, #64	; 0x40
 8014c8e:	4628      	mov	r0, r5
 8014c90:	f002 fa76 	bl	8017180 <uxr_deserialize_STATUS_Payload>
 8014c94:	a90e      	add	r1, sp, #56	; 0x38
 8014c96:	aa0d      	add	r2, sp, #52	; 0x34
 8014c98:	a810      	add	r0, sp, #64	; 0x40
 8014c9a:	f000 fd89 	bl	80157b0 <uxr_parse_base_object_request>
 8014c9e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014ca0:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 8014ca4:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 8014ca8:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
 8014cac:	910f      	str	r1, [sp, #60]	; 0x3c
 8014cae:	f1ba 0f00 	cmp.w	sl, #0
 8014cb2:	d006      	beq.n	8014cc2 <read_submessage_list+0x266>
 8014cb4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8014cb8:	4642      	mov	r2, r8
 8014cba:	4620      	mov	r0, r4
 8014cbc:	9300      	str	r3, [sp, #0]
 8014cbe:	464b      	mov	r3, r9
 8014cc0:	47d0      	blx	sl
 8014cc2:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8014cc4:	2a00      	cmp	r2, #0
 8014cc6:	f43f aed0 	beq.w	8014a6a <read_submessage_list+0xe>
 8014cca:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8014ccc:	2100      	movs	r1, #0
 8014cce:	3802      	subs	r0, #2
 8014cd0:	e003      	b.n	8014cda <read_submessage_list+0x27e>
 8014cd2:	3101      	adds	r1, #1
 8014cd4:	4291      	cmp	r1, r2
 8014cd6:	f43f aec8 	beq.w	8014a6a <read_submessage_list+0xe>
 8014cda:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8014cde:	4543      	cmp	r3, r8
 8014ce0:	d1f7      	bne.n	8014cd2 <read_submessage_list+0x276>
 8014ce2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8014ce4:	f803 9001 	strb.w	r9, [r3, r1]
 8014ce8:	e6bf      	b.n	8014a6a <read_submessage_list+0xe>
 8014cea:	2a00      	cmp	r2, #0
 8014cec:	f47f aebd 	bne.w	8014a6a <read_submessage_list+0xe>
 8014cf0:	4629      	mov	r1, r5
 8014cf2:	4620      	mov	r0, r4
 8014cf4:	f000 fca0 	bl	8015638 <uxr_read_create_session_status>
 8014cf8:	e6b7      	b.n	8014a6a <read_submessage_list+0xe>
 8014cfa:	4629      	mov	r1, r5
 8014cfc:	4620      	mov	r0, r4
 8014cfe:	f7ff fcf1 	bl	80146e4 <read_submessage_get_info>
 8014d02:	e6b2      	b.n	8014a6a <read_submessage_list+0xe>
 8014d04:	b017      	add	sp, #92	; 0x5c
 8014d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d0a:	4629      	mov	r1, r5
 8014d0c:	4620      	mov	r0, r4
 8014d0e:	f000 fca1 	bl	8015654 <uxr_read_delete_session_status>
 8014d12:	e6aa      	b.n	8014a6a <read_submessage_list+0xe>
 8014d14:	f001 fb7a 	bl	801640c <uxr_nanos>
 8014d18:	4642      	mov	r2, r8
 8014d1a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8014d1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014d1e:	fbc7 3206 	smlal	r3, r2, r7, r6
 8014d22:	1818      	adds	r0, r3, r0
 8014d24:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8014d26:	eb42 0101 	adc.w	r1, r2, r1
 8014d2a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014d2c:	4642      	mov	r2, r8
 8014d2e:	fbc7 3206 	smlal	r3, r2, r7, r6
 8014d32:	469c      	mov	ip, r3
 8014d34:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	; 0x40
 8014d38:	fbc3 7806 	smlal	r7, r8, r3, r6
 8014d3c:	4643      	mov	r3, r8
 8014d3e:	eb1c 0c07 	adds.w	ip, ip, r7
 8014d42:	eb42 0203 	adc.w	r2, r2, r3
 8014d46:	ebb0 030c 	subs.w	r3, r0, ip
 8014d4a:	eb61 0202 	sbc.w	r2, r1, r2
 8014d4e:	2a00      	cmp	r2, #0
 8014d50:	db08      	blt.n	8014d64 <read_submessage_list+0x308>
 8014d52:	085b      	lsrs	r3, r3, #1
 8014d54:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8014d58:	1052      	asrs	r2, r2, #1
 8014d5a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 8014d5e:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
 8014d62:	e6db      	b.n	8014b1c <read_submessage_list+0xc0>
 8014d64:	3301      	adds	r3, #1
 8014d66:	f142 0200 	adc.w	r2, r2, #0
 8014d6a:	e7f2      	b.n	8014d52 <read_submessage_list+0x2f6>
 8014d6c:	3b9aca00 	.word	0x3b9aca00

08014d70 <listen_message_reliably>:
 8014d70:	1e0b      	subs	r3, r1, #0
 8014d72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d76:	bfb8      	it	lt
 8014d78:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8014d7c:	b09d      	sub	sp, #116	; 0x74
 8014d7e:	4680      	mov	r8, r0
 8014d80:	9305      	str	r3, [sp, #20]
 8014d82:	f001 fb27 	bl	80163d4 <uxr_millis>
 8014d86:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 8014d8a:	4681      	mov	r9, r0
 8014d8c:	2a00      	cmp	r2, #0
 8014d8e:	f000 809a 	beq.w	8014ec6 <listen_message_reliably+0x156>
 8014d92:	2600      	movs	r6, #0
 8014d94:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014d98:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8014d9c:	460f      	mov	r7, r1
 8014d9e:	4630      	mov	r0, r6
 8014da0:	9303      	str	r3, [sp, #12]
 8014da2:	e00e      	b.n	8014dc2 <listen_message_reliably+0x52>
 8014da4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014da6:	3601      	adds	r6, #1
 8014da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014daa:	455a      	cmp	r2, fp
 8014dac:	9903      	ldr	r1, [sp, #12]
 8014dae:	b2f0      	uxtb	r0, r6
 8014db0:	eb73 0101 	sbcs.w	r1, r3, r1
 8014db4:	da01      	bge.n	8014dba <listen_message_reliably+0x4a>
 8014db6:	4693      	mov	fp, r2
 8014db8:	9303      	str	r3, [sp, #12]
 8014dba:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 8014dbe:	4283      	cmp	r3, r0
 8014dc0:	d95f      	bls.n	8014e82 <listen_message_reliably+0x112>
 8014dc2:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8014dc6:	2102      	movs	r1, #2
 8014dc8:	2201      	movs	r2, #1
 8014dca:	00e4      	lsls	r4, r4, #3
 8014dcc:	f001 f97e 	bl	80160cc <uxr_stream_id>
 8014dd0:	4601      	mov	r1, r0
 8014dd2:	f104 0520 	add.w	r5, r4, #32
 8014dd6:	463b      	mov	r3, r7
 8014dd8:	464a      	mov	r2, r9
 8014dda:	9109      	str	r1, [sp, #36]	; 0x24
 8014ddc:	4445      	add	r5, r8
 8014dde:	4628      	mov	r0, r5
 8014de0:	f003 ff5e 	bl	8018ca0 <uxr_update_output_stream_heartbeat_timestamp>
 8014de4:	eb08 0304 	add.w	r3, r8, r4
 8014de8:	2800      	cmp	r0, #0
 8014dea:	d0db      	beq.n	8014da4 <listen_message_reliably+0x34>
 8014dec:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 8014df0:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 8014df4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8014df8:	4640      	mov	r0, r8
 8014dfa:	3501      	adds	r5, #1
 8014dfc:	4444      	add	r4, r8
 8014dfe:	9304      	str	r3, [sp, #16]
 8014e00:	f000 fcae 	bl	8015760 <uxr_session_header_offset>
 8014e04:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8014e08:	2300      	movs	r3, #0
 8014e0a:	2211      	movs	r2, #17
 8014e0c:	a90c      	add	r1, sp, #48	; 0x30
 8014e0e:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8014e12:	9000      	str	r0, [sp, #0]
 8014e14:	4650      	mov	r0, sl
 8014e16:	3601      	adds	r6, #1
 8014e18:	f7f9 f83c 	bl	800de94 <ucdr_init_buffer_origin_offset>
 8014e1c:	2300      	movs	r3, #0
 8014e1e:	2205      	movs	r2, #5
 8014e20:	210b      	movs	r1, #11
 8014e22:	4650      	mov	r0, sl
 8014e24:	f001 fa90 	bl	8016348 <uxr_buffer_submessage_header>
 8014e28:	2101      	movs	r1, #1
 8014e2a:	8968      	ldrh	r0, [r5, #10]
 8014e2c:	f003 fffc 	bl	8018e28 <uxr_seq_num_add>
 8014e30:	892b      	ldrh	r3, [r5, #8]
 8014e32:	4602      	mov	r2, r0
 8014e34:	a90a      	add	r1, sp, #40	; 0x28
 8014e36:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8014e3a:	4650      	mov	r0, sl
 8014e3c:	9b04      	ldr	r3, [sp, #16]
 8014e3e:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8014e42:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8014e46:	f002 fa57 	bl	80172f8 <uxr_serialize_HEARTBEAT_Payload>
 8014e4a:	2200      	movs	r2, #0
 8014e4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014e4e:	4640      	mov	r0, r8
 8014e50:	4611      	mov	r1, r2
 8014e52:	f000 fc31 	bl	80156b8 <uxr_stamp_session_header>
 8014e56:	4650      	mov	r0, sl
 8014e58:	f7f9 f85c 	bl	800df14 <ucdr_buffer_length>
 8014e5c:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8014e60:	4602      	mov	r2, r0
 8014e62:	a90c      	add	r1, sp, #48	; 0x30
 8014e64:	e9d3 0500 	ldrd	r0, r5, [r3]
 8014e68:	47a8      	blx	r5
 8014e6a:	9903      	ldr	r1, [sp, #12]
 8014e6c:	b2f0      	uxtb	r0, r6
 8014e6e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8014e72:	455a      	cmp	r2, fp
 8014e74:	eb73 0101 	sbcs.w	r1, r3, r1
 8014e78:	db9d      	blt.n	8014db6 <listen_message_reliably+0x46>
 8014e7a:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 8014e7e:	4283      	cmp	r3, r0
 8014e80:	d89f      	bhi.n	8014dc2 <listen_message_reliably+0x52>
 8014e82:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014e86:	9a03      	ldr	r2, [sp, #12]
 8014e88:	429a      	cmp	r2, r3
 8014e8a:	bf08      	it	eq
 8014e8c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 8014e90:	d019      	beq.n	8014ec6 <listen_message_reliably+0x156>
 8014e92:	ebab 0309 	sub.w	r3, fp, r9
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	9d05      	ldr	r5, [sp, #20]
 8014e9a:	f8d8 0070 	ldr.w	r0, [r8, #112]	; 0x70
 8014e9e:	aa08      	add	r2, sp, #32
 8014ea0:	bf08      	it	eq
 8014ea2:	2301      	moveq	r3, #1
 8014ea4:	a907      	add	r1, sp, #28
 8014ea6:	6884      	ldr	r4, [r0, #8]
 8014ea8:	429d      	cmp	r5, r3
 8014eaa:	6800      	ldr	r0, [r0, #0]
 8014eac:	bfa8      	it	ge
 8014eae:	461d      	movge	r5, r3
 8014eb0:	462b      	mov	r3, r5
 8014eb2:	47a0      	blx	r4
 8014eb4:	b948      	cbnz	r0, 8014eca <listen_message_reliably+0x15a>
 8014eb6:	9b05      	ldr	r3, [sp, #20]
 8014eb8:	1b5b      	subs	r3, r3, r5
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	9305      	str	r3, [sp, #20]
 8014ebe:	f73f af60 	bgt.w	8014d82 <listen_message_reliably+0x12>
 8014ec2:	4604      	mov	r4, r0
 8014ec4:	e012      	b.n	8014eec <listen_message_reliably+0x17c>
 8014ec6:	9b05      	ldr	r3, [sp, #20]
 8014ec8:	e7e5      	b.n	8014e96 <listen_message_reliably+0x126>
 8014eca:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8014ece:	4604      	mov	r4, r0
 8014ed0:	2500      	movs	r5, #0
 8014ed2:	a80c      	add	r0, sp, #48	; 0x30
 8014ed4:	f7f8 fff0 	bl	800deb8 <ucdr_init_buffer>
 8014ed8:	f10d 031a 	add.w	r3, sp, #26
 8014edc:	aa06      	add	r2, sp, #24
 8014ede:	a90c      	add	r1, sp, #48	; 0x30
 8014ee0:	4640      	mov	r0, r8
 8014ee2:	f88d 5018 	strb.w	r5, [sp, #24]
 8014ee6:	f000 fbfb 	bl	80156e0 <uxr_read_session_header>
 8014eea:	b918      	cbnz	r0, 8014ef4 <listen_message_reliably+0x184>
 8014eec:	4620      	mov	r0, r4
 8014eee:	b01d      	add	sp, #116	; 0x74
 8014ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ef4:	4629      	mov	r1, r5
 8014ef6:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8014efa:	f001 f915 	bl	8016128 <uxr_stream_id_from_raw>
 8014efe:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8014f02:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8014f06:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8014f0a:	2e01      	cmp	r6, #1
 8014f0c:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8014f10:	d04b      	beq.n	8014faa <listen_message_reliably+0x23a>
 8014f12:	2e02      	cmp	r6, #2
 8014f14:	d00f      	beq.n	8014f36 <listen_message_reliably+0x1c6>
 8014f16:	2e00      	cmp	r6, #0
 8014f18:	d1e8      	bne.n	8014eec <listen_message_reliably+0x17c>
 8014f1a:	4631      	mov	r1, r6
 8014f1c:	4630      	mov	r0, r6
 8014f1e:	f001 f903 	bl	8016128 <uxr_stream_id_from_raw>
 8014f22:	4602      	mov	r2, r0
 8014f24:	a90c      	add	r1, sp, #48	; 0x30
 8014f26:	4640      	mov	r0, r8
 8014f28:	920a      	str	r2, [sp, #40]	; 0x28
 8014f2a:	f7ff fd97 	bl	8014a5c <read_submessage_list>
 8014f2e:	4620      	mov	r0, r4
 8014f30:	b01d      	add	sp, #116	; 0x74
 8014f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f36:	4629      	mov	r1, r5
 8014f38:	f108 0008 	add.w	r0, r8, #8
 8014f3c:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 8014f40:	f001 f9e0 	bl	8016304 <uxr_get_input_reliable_stream>
 8014f44:	4607      	mov	r7, r0
 8014f46:	b338      	cbz	r0, 8014f98 <listen_message_reliably+0x228>
 8014f48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014f4a:	a80c      	add	r0, sp, #48	; 0x30
 8014f4c:	9203      	str	r2, [sp, #12]
 8014f4e:	f7f8 ffe5 	bl	800df1c <ucdr_buffer_remaining>
 8014f52:	4603      	mov	r3, r0
 8014f54:	f10d 0019 	add.w	r0, sp, #25
 8014f58:	9a03      	ldr	r2, [sp, #12]
 8014f5a:	4651      	mov	r1, sl
 8014f5c:	9000      	str	r0, [sp, #0]
 8014f5e:	4638      	mov	r0, r7
 8014f60:	f003 faa8 	bl	80184b4 <uxr_receive_reliable_message>
 8014f64:	b1c0      	cbz	r0, 8014f98 <listen_message_reliably+0x228>
 8014f66:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8014f6a:	b393      	cbz	r3, 8014fd2 <listen_message_reliably+0x262>
 8014f6c:	ae14      	add	r6, sp, #80	; 0x50
 8014f6e:	f04f 0a02 	mov.w	sl, #2
 8014f72:	e00a      	b.n	8014f8a <listen_message_reliably+0x21a>
 8014f74:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 8014f78:	4631      	mov	r1, r6
 8014f7a:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 8014f7e:	4640      	mov	r0, r8
 8014f80:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 8014f84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014f86:	f7ff fd69 	bl	8014a5c <read_submessage_list>
 8014f8a:	2204      	movs	r2, #4
 8014f8c:	4631      	mov	r1, r6
 8014f8e:	4638      	mov	r0, r7
 8014f90:	f003 fb12 	bl	80185b8 <uxr_next_input_reliable_buffer_available>
 8014f94:	2800      	cmp	r0, #0
 8014f96:	d1ed      	bne.n	8014f74 <listen_message_reliably+0x204>
 8014f98:	4640      	mov	r0, r8
 8014f9a:	462a      	mov	r2, r5
 8014f9c:	4649      	mov	r1, r9
 8014f9e:	f7ff fbd7 	bl	8014750 <write_submessage_acknack.isra.0>
 8014fa2:	4620      	mov	r0, r4
 8014fa4:	b01d      	add	sp, #116	; 0x74
 8014fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014faa:	4629      	mov	r1, r5
 8014fac:	f108 0008 	add.w	r0, r8, #8
 8014fb0:	f001 f99e 	bl	80162f0 <uxr_get_input_best_effort_stream>
 8014fb4:	2800      	cmp	r0, #0
 8014fb6:	d099      	beq.n	8014eec <listen_message_reliably+0x17c>
 8014fb8:	4651      	mov	r1, sl
 8014fba:	f003 f9f1 	bl	80183a0 <uxr_receive_best_effort_message>
 8014fbe:	2800      	cmp	r0, #0
 8014fc0:	d094      	beq.n	8014eec <listen_message_reliably+0x17c>
 8014fc2:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8014fc6:	a90c      	add	r1, sp, #48	; 0x30
 8014fc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014fca:	4640      	mov	r0, r8
 8014fcc:	f7ff fd46 	bl	8014a5c <read_submessage_list>
 8014fd0:	e78c      	b.n	8014eec <listen_message_reliably+0x17c>
 8014fd2:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8014fd6:	a90c      	add	r1, sp, #48	; 0x30
 8014fd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014fda:	4640      	mov	r0, r8
 8014fdc:	f7ff fd3e 	bl	8014a5c <read_submessage_list>
 8014fe0:	e7c4      	b.n	8014f6c <listen_message_reliably+0x1fc>
 8014fe2:	bf00      	nop

08014fe4 <uxr_run_session_timeout>:
 8014fe4:	b570      	push	{r4, r5, r6, lr}
 8014fe6:	4604      	mov	r4, r0
 8014fe8:	460d      	mov	r5, r1
 8014fea:	f001 f9f3 	bl	80163d4 <uxr_millis>
 8014fee:	4606      	mov	r6, r0
 8014ff0:	4620      	mov	r0, r4
 8014ff2:	f7ff fc77 	bl	80148e4 <uxr_flash_output_streams>
 8014ff6:	4629      	mov	r1, r5
 8014ff8:	4620      	mov	r0, r4
 8014ffa:	f7ff feb9 	bl	8014d70 <listen_message_reliably>
 8014ffe:	f001 f9e9 	bl	80163d4 <uxr_millis>
 8015002:	1b83      	subs	r3, r0, r6
 8015004:	1ae9      	subs	r1, r5, r3
 8015006:	2900      	cmp	r1, #0
 8015008:	dcf6      	bgt.n	8014ff8 <uxr_run_session_timeout+0x14>
 801500a:	f104 0008 	add.w	r0, r4, #8
 801500e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015012:	f001 b983 	b.w	801631c <uxr_output_streams_confirmed>
 8015016:	bf00      	nop

08015018 <uxr_run_session_until_data>:
 8015018:	b570      	push	{r4, r5, r6, lr}
 801501a:	4604      	mov	r4, r0
 801501c:	460d      	mov	r5, r1
 801501e:	f001 f9d9 	bl	80163d4 <uxr_millis>
 8015022:	4606      	mov	r6, r0
 8015024:	4620      	mov	r0, r4
 8015026:	f7ff fc5d 	bl	80148e4 <uxr_flash_output_streams>
 801502a:	2300      	movs	r3, #0
 801502c:	4629      	mov	r1, r5
 801502e:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8015032:	e005      	b.n	8015040 <uxr_run_session_until_data+0x28>
 8015034:	f001 f9ce 	bl	80163d4 <uxr_millis>
 8015038:	1b83      	subs	r3, r0, r6
 801503a:	1ae9      	subs	r1, r5, r3
 801503c:	2900      	cmp	r1, #0
 801503e:	dd07      	ble.n	8015050 <uxr_run_session_until_data+0x38>
 8015040:	4620      	mov	r0, r4
 8015042:	f7ff fe95 	bl	8014d70 <listen_message_reliably>
 8015046:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 801504a:	2800      	cmp	r0, #0
 801504c:	d0f2      	beq.n	8015034 <uxr_run_session_until_data+0x1c>
 801504e:	bd70      	pop	{r4, r5, r6, pc}
 8015050:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8015054:	bd70      	pop	{r4, r5, r6, pc}
 8015056:	bf00      	nop

08015058 <uxr_run_session_until_confirm_delivery>:
 8015058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801505c:	4606      	mov	r6, r0
 801505e:	460d      	mov	r5, r1
 8015060:	f001 f9b8 	bl	80163d4 <uxr_millis>
 8015064:	4607      	mov	r7, r0
 8015066:	4630      	mov	r0, r6
 8015068:	f106 0808 	add.w	r8, r6, #8
 801506c:	f7ff fc3a 	bl	80148e4 <uxr_flash_output_streams>
 8015070:	2d00      	cmp	r5, #0
 8015072:	db10      	blt.n	8015096 <uxr_run_session_until_confirm_delivery+0x3e>
 8015074:	462c      	mov	r4, r5
 8015076:	e006      	b.n	8015086 <uxr_run_session_until_confirm_delivery+0x2e>
 8015078:	f7ff fe7a 	bl	8014d70 <listen_message_reliably>
 801507c:	f001 f9aa 	bl	80163d4 <uxr_millis>
 8015080:	1bc3      	subs	r3, r0, r7
 8015082:	1aec      	subs	r4, r5, r3
 8015084:	d407      	bmi.n	8015096 <uxr_run_session_until_confirm_delivery+0x3e>
 8015086:	4640      	mov	r0, r8
 8015088:	f001 f948 	bl	801631c <uxr_output_streams_confirmed>
 801508c:	4603      	mov	r3, r0
 801508e:	4621      	mov	r1, r4
 8015090:	4630      	mov	r0, r6
 8015092:	2b00      	cmp	r3, #0
 8015094:	d0f0      	beq.n	8015078 <uxr_run_session_until_confirm_delivery+0x20>
 8015096:	4640      	mov	r0, r8
 8015098:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801509c:	f001 b93e 	b.w	801631c <uxr_output_streams_confirmed>

080150a0 <uxr_run_session_until_all_status>:
 80150a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150a4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80150a8:	4606      	mov	r6, r0
 80150aa:	4688      	mov	r8, r1
 80150ac:	4692      	mov	sl, r2
 80150ae:	461f      	mov	r7, r3
 80150b0:	f7ff fc18 	bl	80148e4 <uxr_flash_output_streams>
 80150b4:	f1bb 0f00 	cmp.w	fp, #0
 80150b8:	d004      	beq.n	80150c4 <uxr_run_session_until_all_status+0x24>
 80150ba:	465a      	mov	r2, fp
 80150bc:	21ff      	movs	r1, #255	; 0xff
 80150be:	4638      	mov	r0, r7
 80150c0:	f004 fab8 	bl	8019634 <memset>
 80150c4:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 80150c8:	1e7d      	subs	r5, r7, #1
 80150ca:	e9c6 a71d 	strd	sl, r7, [r6, #116]	; 0x74
 80150ce:	f001 f981 	bl	80163d4 <uxr_millis>
 80150d2:	4641      	mov	r1, r8
 80150d4:	4681      	mov	r9, r0
 80150d6:	4630      	mov	r0, r6
 80150d8:	f7ff fe4a 	bl	8014d70 <listen_message_reliably>
 80150dc:	f001 f97a 	bl	80163d4 <uxr_millis>
 80150e0:	eba0 0009 	sub.w	r0, r0, r9
 80150e4:	eba8 0100 	sub.w	r1, r8, r0
 80150e8:	f1bb 0f00 	cmp.w	fp, #0
 80150ec:	d029      	beq.n	8015142 <uxr_run_session_until_all_status+0xa2>
 80150ee:	46ae      	mov	lr, r5
 80150f0:	f04f 0c00 	mov.w	ip, #0
 80150f4:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 80150f8:	2cff      	cmp	r4, #255	; 0xff
 80150fa:	d015      	beq.n	8015128 <uxr_run_session_until_all_status+0x88>
 80150fc:	f10c 0c01 	add.w	ip, ip, #1
 8015100:	45e3      	cmp	fp, ip
 8015102:	d8f7      	bhi.n	80150f4 <uxr_run_session_until_all_status+0x54>
 8015104:	2300      	movs	r3, #0
 8015106:	67f3      	str	r3, [r6, #124]	; 0x7c
 8015108:	e000      	b.n	801510c <uxr_run_session_until_all_status+0x6c>
 801510a:	b158      	cbz	r0, 8015124 <uxr_run_session_until_all_status+0x84>
 801510c:	462b      	mov	r3, r5
 801510e:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8015112:	3302      	adds	r3, #2
 8015114:	2801      	cmp	r0, #1
 8015116:	eba3 0307 	sub.w	r3, r3, r7
 801511a:	bf8c      	ite	hi
 801511c:	2000      	movhi	r0, #0
 801511e:	2001      	movls	r0, #1
 8015120:	459b      	cmp	fp, r3
 8015122:	d8f2      	bhi.n	801510a <uxr_run_session_until_all_status+0x6a>
 8015124:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015128:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 801512c:	f10c 0c01 	add.w	ip, ip, #1
 8015130:	45dc      	cmp	ip, fp
 8015132:	d201      	bcs.n	8015138 <uxr_run_session_until_all_status+0x98>
 8015134:	2b00      	cmp	r3, #0
 8015136:	d0dd      	beq.n	80150f4 <uxr_run_session_until_all_status+0x54>
 8015138:	2900      	cmp	r1, #0
 801513a:	dde3      	ble.n	8015104 <uxr_run_session_until_all_status+0x64>
 801513c:	2b00      	cmp	r3, #0
 801513e:	d1ca      	bne.n	80150d6 <uxr_run_session_until_all_status+0x36>
 8015140:	e7e0      	b.n	8015104 <uxr_run_session_until_all_status+0x64>
 8015142:	2001      	movs	r0, #1
 8015144:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 8015148:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801514c <wait_session_status>:
 801514c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015150:	4604      	mov	r4, r0
 8015152:	b09d      	sub	sp, #116	; 0x74
 8015154:	20ff      	movs	r0, #255	; 0xff
 8015156:	9303      	str	r3, [sp, #12]
 8015158:	7160      	strb	r0, [r4, #5]
 801515a:	2b00      	cmp	r3, #0
 801515c:	f000 80b6 	beq.w	80152cc <wait_session_status+0x180>
 8015160:	4689      	mov	r9, r1
 8015162:	4692      	mov	sl, r2
 8015164:	f04f 0b00 	mov.w	fp, #0
 8015168:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801516a:	4652      	mov	r2, sl
 801516c:	4649      	mov	r1, r9
 801516e:	e9d3 0500 	ldrd	r0, r5, [r3]
 8015172:	47a8      	blx	r5
 8015174:	f001 f92e 	bl	80163d4 <uxr_millis>
 8015178:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801517c:	4605      	mov	r5, r0
 801517e:	e009      	b.n	8015194 <wait_session_status+0x48>
 8015180:	f001 f928 	bl	80163d4 <uxr_millis>
 8015184:	1b40      	subs	r0, r0, r5
 8015186:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 801518a:	2b00      	cmp	r3, #0
 801518c:	dd40      	ble.n	8015210 <wait_session_status+0xc4>
 801518e:	7960      	ldrb	r0, [r4, #5]
 8015190:	28ff      	cmp	r0, #255	; 0xff
 8015192:	d145      	bne.n	8015220 <wait_session_status+0xd4>
 8015194:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8015196:	a908      	add	r1, sp, #32
 8015198:	6896      	ldr	r6, [r2, #8]
 801519a:	6810      	ldr	r0, [r2, #0]
 801519c:	aa09      	add	r2, sp, #36	; 0x24
 801519e:	47b0      	blx	r6
 80151a0:	2800      	cmp	r0, #0
 80151a2:	d0ed      	beq.n	8015180 <wait_session_status+0x34>
 80151a4:	a80c      	add	r0, sp, #48	; 0x30
 80151a6:	2600      	movs	r6, #0
 80151a8:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80151ac:	f7f8 fe84 	bl	800deb8 <ucdr_init_buffer>
 80151b0:	f10d 031e 	add.w	r3, sp, #30
 80151b4:	aa07      	add	r2, sp, #28
 80151b6:	a90c      	add	r1, sp, #48	; 0x30
 80151b8:	4620      	mov	r0, r4
 80151ba:	f88d 601c 	strb.w	r6, [sp, #28]
 80151be:	f000 fa8f 	bl	80156e0 <uxr_read_session_header>
 80151c2:	2800      	cmp	r0, #0
 80151c4:	d0dc      	beq.n	8015180 <wait_session_status+0x34>
 80151c6:	4631      	mov	r1, r6
 80151c8:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80151cc:	f000 ffac 	bl	8016128 <uxr_stream_id_from_raw>
 80151d0:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80151d4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80151d8:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80151dc:	2f01      	cmp	r7, #1
 80151de:	9302      	str	r3, [sp, #8]
 80151e0:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 80151e4:	d05c      	beq.n	80152a0 <wait_session_status+0x154>
 80151e6:	2f02      	cmp	r7, #2
 80151e8:	d020      	beq.n	801522c <wait_session_status+0xe0>
 80151ea:	2f00      	cmp	r7, #0
 80151ec:	d1c8      	bne.n	8015180 <wait_session_status+0x34>
 80151ee:	4639      	mov	r1, r7
 80151f0:	4638      	mov	r0, r7
 80151f2:	f000 ff99 	bl	8016128 <uxr_stream_id_from_raw>
 80151f6:	a90c      	add	r1, sp, #48	; 0x30
 80151f8:	4602      	mov	r2, r0
 80151fa:	900b      	str	r0, [sp, #44]	; 0x2c
 80151fc:	4620      	mov	r0, r4
 80151fe:	f7ff fc2d 	bl	8014a5c <read_submessage_list>
 8015202:	f001 f8e7 	bl	80163d4 <uxr_millis>
 8015206:	1b40      	subs	r0, r0, r5
 8015208:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 801520c:	2b00      	cmp	r3, #0
 801520e:	dcbe      	bgt.n	801518e <wait_session_status+0x42>
 8015210:	f10b 0b01 	add.w	fp, fp, #1
 8015214:	9b03      	ldr	r3, [sp, #12]
 8015216:	7960      	ldrb	r0, [r4, #5]
 8015218:	455b      	cmp	r3, fp
 801521a:	d001      	beq.n	8015220 <wait_session_status+0xd4>
 801521c:	28ff      	cmp	r0, #255	; 0xff
 801521e:	d0a3      	beq.n	8015168 <wait_session_status+0x1c>
 8015220:	38ff      	subs	r0, #255	; 0xff
 8015222:	bf18      	it	ne
 8015224:	2001      	movne	r0, #1
 8015226:	b01d      	add	sp, #116	; 0x74
 8015228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801522c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8015230:	4631      	mov	r1, r6
 8015232:	f104 0008 	add.w	r0, r4, #8
 8015236:	9304      	str	r3, [sp, #16]
 8015238:	f001 f864 	bl	8016304 <uxr_get_input_reliable_stream>
 801523c:	4680      	mov	r8, r0
 801523e:	b348      	cbz	r0, 8015294 <wait_session_status+0x148>
 8015240:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015242:	a80c      	add	r0, sp, #48	; 0x30
 8015244:	9205      	str	r2, [sp, #20]
 8015246:	f7f8 fe69 	bl	800df1c <ucdr_buffer_remaining>
 801524a:	4603      	mov	r3, r0
 801524c:	f10d 001d 	add.w	r0, sp, #29
 8015250:	9a05      	ldr	r2, [sp, #20]
 8015252:	9000      	str	r0, [sp, #0]
 8015254:	4640      	mov	r0, r8
 8015256:	9902      	ldr	r1, [sp, #8]
 8015258:	f003 f92c 	bl	80184b4 <uxr_receive_reliable_message>
 801525c:	b1d0      	cbz	r0, 8015294 <wait_session_status+0x148>
 801525e:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8015262:	2b00      	cmp	r3, #0
 8015264:	d03a      	beq.n	80152dc <wait_session_status+0x190>
 8015266:	9f04      	ldr	r7, [sp, #16]
 8015268:	e00a      	b.n	8015280 <wait_session_status+0x134>
 801526a:	f04f 0302 	mov.w	r3, #2
 801526e:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 8015272:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8015276:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 801527a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801527c:	f7ff fbee 	bl	8014a5c <read_submessage_list>
 8015280:	a914      	add	r1, sp, #80	; 0x50
 8015282:	2204      	movs	r2, #4
 8015284:	4640      	mov	r0, r8
 8015286:	f003 f997 	bl	80185b8 <uxr_next_input_reliable_buffer_available>
 801528a:	4603      	mov	r3, r0
 801528c:	a914      	add	r1, sp, #80	; 0x50
 801528e:	4620      	mov	r0, r4
 8015290:	2b00      	cmp	r3, #0
 8015292:	d1ea      	bne.n	801526a <wait_session_status+0x11e>
 8015294:	4632      	mov	r2, r6
 8015296:	9904      	ldr	r1, [sp, #16]
 8015298:	4620      	mov	r0, r4
 801529a:	f7ff fa59 	bl	8014750 <write_submessage_acknack.isra.0>
 801529e:	e76f      	b.n	8015180 <wait_session_status+0x34>
 80152a0:	4631      	mov	r1, r6
 80152a2:	f104 0008 	add.w	r0, r4, #8
 80152a6:	f001 f823 	bl	80162f0 <uxr_get_input_best_effort_stream>
 80152aa:	2800      	cmp	r0, #0
 80152ac:	f43f af68 	beq.w	8015180 <wait_session_status+0x34>
 80152b0:	9902      	ldr	r1, [sp, #8]
 80152b2:	f003 f875 	bl	80183a0 <uxr_receive_best_effort_message>
 80152b6:	2800      	cmp	r0, #0
 80152b8:	f43f af62 	beq.w	8015180 <wait_session_status+0x34>
 80152bc:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 80152c0:	a90c      	add	r1, sp, #48	; 0x30
 80152c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80152c4:	4620      	mov	r0, r4
 80152c6:	f7ff fbc9 	bl	8014a5c <read_submessage_list>
 80152ca:	e759      	b.n	8015180 <wait_session_status+0x34>
 80152cc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80152ce:	e9d3 0400 	ldrd	r0, r4, [r3]
 80152d2:	47a0      	blx	r4
 80152d4:	2001      	movs	r0, #1
 80152d6:	b01d      	add	sp, #116	; 0x74
 80152d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152dc:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 80152e0:	a90c      	add	r1, sp, #48	; 0x30
 80152e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80152e4:	4620      	mov	r0, r4
 80152e6:	f7ff fbb9 	bl	8014a5c <read_submessage_list>
 80152ea:	e7bc      	b.n	8015266 <wait_session_status+0x11a>

080152ec <uxr_delete_session_retries>:
 80152ec:	b530      	push	{r4, r5, lr}
 80152ee:	b08f      	sub	sp, #60	; 0x3c
 80152f0:	4604      	mov	r4, r0
 80152f2:	460d      	mov	r5, r1
 80152f4:	f000 fa34 	bl	8015760 <uxr_session_header_offset>
 80152f8:	2300      	movs	r3, #0
 80152fa:	2210      	movs	r2, #16
 80152fc:	a902      	add	r1, sp, #8
 80152fe:	9000      	str	r0, [sp, #0]
 8015300:	a806      	add	r0, sp, #24
 8015302:	f7f8 fdc7 	bl	800de94 <ucdr_init_buffer_origin_offset>
 8015306:	a906      	add	r1, sp, #24
 8015308:	4620      	mov	r0, r4
 801530a:	f000 f979 	bl	8015600 <uxr_buffer_delete_session>
 801530e:	2200      	movs	r2, #0
 8015310:	9b06      	ldr	r3, [sp, #24]
 8015312:	4620      	mov	r0, r4
 8015314:	4611      	mov	r1, r2
 8015316:	f000 f9cf 	bl	80156b8 <uxr_stamp_session_header>
 801531a:	a806      	add	r0, sp, #24
 801531c:	f7f8 fdfa 	bl	800df14 <ucdr_buffer_length>
 8015320:	462b      	mov	r3, r5
 8015322:	4602      	mov	r2, r0
 8015324:	a902      	add	r1, sp, #8
 8015326:	4620      	mov	r0, r4
 8015328:	f7ff ff10 	bl	801514c <wait_session_status>
 801532c:	b118      	cbz	r0, 8015336 <uxr_delete_session_retries+0x4a>
 801532e:	7960      	ldrb	r0, [r4, #5]
 8015330:	fab0 f080 	clz	r0, r0
 8015334:	0940      	lsrs	r0, r0, #5
 8015336:	b00f      	add	sp, #60	; 0x3c
 8015338:	bd30      	pop	{r4, r5, pc}
 801533a:	bf00      	nop

0801533c <uxr_create_session>:
 801533c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015340:	f100 0b08 	add.w	fp, r0, #8
 8015344:	4604      	mov	r4, r0
 8015346:	b0ab      	sub	sp, #172	; 0xac
 8015348:	4658      	mov	r0, fp
 801534a:	465e      	mov	r6, fp
 801534c:	f000 ff22 	bl	8016194 <uxr_reset_stream_storage>
 8015350:	4620      	mov	r0, r4
 8015352:	f000 fa05 	bl	8015760 <uxr_session_header_offset>
 8015356:	2300      	movs	r3, #0
 8015358:	221c      	movs	r2, #28
 801535a:	a90b      	add	r1, sp, #44	; 0x2c
 801535c:	9000      	str	r0, [sp, #0]
 801535e:	a812      	add	r0, sp, #72	; 0x48
 8015360:	f7f8 fd98 	bl	800de94 <ucdr_init_buffer_origin_offset>
 8015364:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015366:	a912      	add	r1, sp, #72	; 0x48
 8015368:	4620      	mov	r0, r4
 801536a:	8a1a      	ldrh	r2, [r3, #16]
 801536c:	3a04      	subs	r2, #4
 801536e:	b292      	uxth	r2, r2
 8015370:	f000 f91c 	bl	80155ac <uxr_buffer_create_session>
 8015374:	9912      	ldr	r1, [sp, #72]	; 0x48
 8015376:	4620      	mov	r0, r4
 8015378:	f000 f98a 	bl	8015690 <uxr_stamp_create_session_header>
 801537c:	a812      	add	r0, sp, #72	; 0x48
 801537e:	f7f8 fdc9 	bl	800df14 <ucdr_buffer_length>
 8015382:	23ff      	movs	r3, #255	; 0xff
 8015384:	4681      	mov	r9, r0
 8015386:	7163      	strb	r3, [r4, #5]
 8015388:	230a      	movs	r3, #10
 801538a:	9303      	str	r3, [sp, #12]
 801538c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801538e:	464a      	mov	r2, r9
 8015390:	a90b      	add	r1, sp, #44	; 0x2c
 8015392:	e9d3 0500 	ldrd	r0, r5, [r3]
 8015396:	47a8      	blx	r5
 8015398:	f001 f81c 	bl	80163d4 <uxr_millis>
 801539c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80153a0:	4605      	mov	r5, r0
 80153a2:	e009      	b.n	80153b8 <uxr_create_session+0x7c>
 80153a4:	f001 f816 	bl	80163d4 <uxr_millis>
 80153a8:	1b40      	subs	r0, r0, r5
 80153aa:	7962      	ldrb	r2, [r4, #5]
 80153ac:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	dd38      	ble.n	8015426 <uxr_create_session+0xea>
 80153b4:	2aff      	cmp	r2, #255	; 0xff
 80153b6:	d13c      	bne.n	8015432 <uxr_create_session+0xf6>
 80153b8:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80153ba:	a907      	add	r1, sp, #28
 80153bc:	6897      	ldr	r7, [r2, #8]
 80153be:	6810      	ldr	r0, [r2, #0]
 80153c0:	aa08      	add	r2, sp, #32
 80153c2:	47b8      	blx	r7
 80153c4:	2800      	cmp	r0, #0
 80153c6:	d0ed      	beq.n	80153a4 <uxr_create_session+0x68>
 80153c8:	a81a      	add	r0, sp, #104	; 0x68
 80153ca:	2700      	movs	r7, #0
 80153cc:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80153d0:	f7f8 fd72 	bl	800deb8 <ucdr_init_buffer>
 80153d4:	f10d 031a 	add.w	r3, sp, #26
 80153d8:	aa06      	add	r2, sp, #24
 80153da:	a91a      	add	r1, sp, #104	; 0x68
 80153dc:	4620      	mov	r0, r4
 80153de:	f88d 7018 	strb.w	r7, [sp, #24]
 80153e2:	f000 f97d 	bl	80156e0 <uxr_read_session_header>
 80153e6:	2800      	cmp	r0, #0
 80153e8:	d0dc      	beq.n	80153a4 <uxr_create_session+0x68>
 80153ea:	4639      	mov	r1, r7
 80153ec:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80153f0:	f000 fe9a 	bl	8016128 <uxr_stream_id_from_raw>
 80153f4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80153f8:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 80153fc:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8015400:	2f01      	cmp	r7, #1
 8015402:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8015406:	d053      	beq.n	80154b0 <uxr_create_session+0x174>
 8015408:	2f02      	cmp	r7, #2
 801540a:	d018      	beq.n	801543e <uxr_create_session+0x102>
 801540c:	2f00      	cmp	r7, #0
 801540e:	d1c9      	bne.n	80153a4 <uxr_create_session+0x68>
 8015410:	4639      	mov	r1, r7
 8015412:	4638      	mov	r0, r7
 8015414:	f000 fe88 	bl	8016128 <uxr_stream_id_from_raw>
 8015418:	a91a      	add	r1, sp, #104	; 0x68
 801541a:	4602      	mov	r2, r0
 801541c:	900a      	str	r0, [sp, #40]	; 0x28
 801541e:	4620      	mov	r0, r4
 8015420:	f7ff fb1c 	bl	8014a5c <read_submessage_list>
 8015424:	e7be      	b.n	80153a4 <uxr_create_session+0x68>
 8015426:	9b03      	ldr	r3, [sp, #12]
 8015428:	3b01      	subs	r3, #1
 801542a:	9303      	str	r3, [sp, #12]
 801542c:	d001      	beq.n	8015432 <uxr_create_session+0xf6>
 801542e:	2aff      	cmp	r2, #255	; 0xff
 8015430:	d0ac      	beq.n	801538c <uxr_create_session+0x50>
 8015432:	2a00      	cmp	r2, #0
 8015434:	d051      	beq.n	80154da <uxr_create_session+0x19e>
 8015436:	2000      	movs	r0, #0
 8015438:	b02b      	add	sp, #172	; 0xac
 801543a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801543e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8015442:	4641      	mov	r1, r8
 8015444:	4630      	mov	r0, r6
 8015446:	9304      	str	r3, [sp, #16]
 8015448:	f000 ff5c 	bl	8016304 <uxr_get_input_reliable_stream>
 801544c:	4682      	mov	sl, r0
 801544e:	b348      	cbz	r0, 80154a4 <uxr_create_session+0x168>
 8015450:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015452:	a81a      	add	r0, sp, #104	; 0x68
 8015454:	9205      	str	r2, [sp, #20]
 8015456:	f7f8 fd61 	bl	800df1c <ucdr_buffer_remaining>
 801545a:	4603      	mov	r3, r0
 801545c:	f10d 0019 	add.w	r0, sp, #25
 8015460:	9a05      	ldr	r2, [sp, #20]
 8015462:	4659      	mov	r1, fp
 8015464:	9000      	str	r0, [sp, #0]
 8015466:	4650      	mov	r0, sl
 8015468:	f003 f824 	bl	80184b4 <uxr_receive_reliable_message>
 801546c:	b1d0      	cbz	r0, 80154a4 <uxr_create_session+0x168>
 801546e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8015472:	2b00      	cmp	r3, #0
 8015474:	d038      	beq.n	80154e8 <uxr_create_session+0x1ac>
 8015476:	9f04      	ldr	r7, [sp, #16]
 8015478:	e00a      	b.n	8015490 <uxr_create_session+0x154>
 801547a:	f04f 0302 	mov.w	r3, #2
 801547e:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 8015482:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
 8015486:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801548a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801548c:	f7ff fae6 	bl	8014a5c <read_submessage_list>
 8015490:	a922      	add	r1, sp, #136	; 0x88
 8015492:	2204      	movs	r2, #4
 8015494:	4650      	mov	r0, sl
 8015496:	f003 f88f 	bl	80185b8 <uxr_next_input_reliable_buffer_available>
 801549a:	4603      	mov	r3, r0
 801549c:	a922      	add	r1, sp, #136	; 0x88
 801549e:	4620      	mov	r0, r4
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d1ea      	bne.n	801547a <uxr_create_session+0x13e>
 80154a4:	4642      	mov	r2, r8
 80154a6:	9904      	ldr	r1, [sp, #16]
 80154a8:	4620      	mov	r0, r4
 80154aa:	f7ff f951 	bl	8014750 <write_submessage_acknack.isra.0>
 80154ae:	e779      	b.n	80153a4 <uxr_create_session+0x68>
 80154b0:	4641      	mov	r1, r8
 80154b2:	4630      	mov	r0, r6
 80154b4:	f000 ff1c 	bl	80162f0 <uxr_get_input_best_effort_stream>
 80154b8:	2800      	cmp	r0, #0
 80154ba:	f43f af73 	beq.w	80153a4 <uxr_create_session+0x68>
 80154be:	4659      	mov	r1, fp
 80154c0:	f002 ff6e 	bl	80183a0 <uxr_receive_best_effort_message>
 80154c4:	2800      	cmp	r0, #0
 80154c6:	f43f af6d 	beq.w	80153a4 <uxr_create_session+0x68>
 80154ca:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 80154ce:	a91a      	add	r1, sp, #104	; 0x68
 80154d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80154d2:	4620      	mov	r0, r4
 80154d4:	f7ff fac2 	bl	8014a5c <read_submessage_list>
 80154d8:	e764      	b.n	80153a4 <uxr_create_session+0x68>
 80154da:	4630      	mov	r0, r6
 80154dc:	f000 fe5a 	bl	8016194 <uxr_reset_stream_storage>
 80154e0:	2001      	movs	r0, #1
 80154e2:	b02b      	add	sp, #172	; 0xac
 80154e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154e8:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 80154ec:	a91a      	add	r1, sp, #104	; 0x68
 80154ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80154f0:	4620      	mov	r0, r4
 80154f2:	f7ff fab3 	bl	8014a5c <read_submessage_list>
 80154f6:	e7be      	b.n	8015476 <uxr_create_session+0x13a>

080154f8 <uxr_prepare_stream_to_write_submessage>:
 80154f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80154fc:	b082      	sub	sp, #8
 80154fe:	4604      	mov	r4, r0
 8015500:	4610      	mov	r0, r2
 8015502:	4615      	mov	r5, r2
 8015504:	461e      	mov	r6, r3
 8015506:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 801550a:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 801550e:	f105 0904 	add.w	r9, r5, #4
 8015512:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8015516:	9101      	str	r1, [sp, #4]
 8015518:	f000 ff56 	bl	80163c8 <uxr_submessage_padding>
 801551c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8015520:	4481      	add	r9, r0
 8015522:	2b01      	cmp	r3, #1
 8015524:	d01d      	beq.n	8015562 <uxr_prepare_stream_to_write_submessage+0x6a>
 8015526:	2b02      	cmp	r3, #2
 8015528:	d116      	bne.n	8015558 <uxr_prepare_stream_to_write_submessage+0x60>
 801552a:	f104 0008 	add.w	r0, r4, #8
 801552e:	4651      	mov	r1, sl
 8015530:	f000 fed2 	bl	80162d8 <uxr_get_output_reliable_stream>
 8015534:	4604      	mov	r4, r0
 8015536:	b158      	cbz	r0, 8015550 <uxr_prepare_stream_to_write_submessage+0x58>
 8015538:	4649      	mov	r1, r9
 801553a:	4632      	mov	r2, r6
 801553c:	f003 fa02 	bl	8018944 <uxr_prepare_reliable_buffer_to_write>
 8015540:	4604      	mov	r4, r0
 8015542:	b12c      	cbz	r4, 8015550 <uxr_prepare_stream_to_write_submessage+0x58>
 8015544:	4643      	mov	r3, r8
 8015546:	b2aa      	uxth	r2, r5
 8015548:	4639      	mov	r1, r7
 801554a:	4630      	mov	r0, r6
 801554c:	f000 fefc 	bl	8016348 <uxr_buffer_submessage_header>
 8015550:	4620      	mov	r0, r4
 8015552:	b002      	add	sp, #8
 8015554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015558:	2400      	movs	r4, #0
 801555a:	4620      	mov	r0, r4
 801555c:	b002      	add	sp, #8
 801555e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015562:	f104 0008 	add.w	r0, r4, #8
 8015566:	4651      	mov	r1, sl
 8015568:	f000 feae 	bl	80162c8 <uxr_get_output_best_effort_stream>
 801556c:	4604      	mov	r4, r0
 801556e:	2800      	cmp	r0, #0
 8015570:	d0ee      	beq.n	8015550 <uxr_prepare_stream_to_write_submessage+0x58>
 8015572:	4649      	mov	r1, r9
 8015574:	4632      	mov	r2, r6
 8015576:	f003 f90f 	bl	8018798 <uxr_prepare_best_effort_buffer_to_write>
 801557a:	4604      	mov	r4, r0
 801557c:	e7e1      	b.n	8015542 <uxr_prepare_stream_to_write_submessage+0x4a>
 801557e:	bf00      	nop

08015580 <uxr_init_session_info>:
 8015580:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8015584:	23ff      	movs	r3, #255	; 0xff
 8015586:	7102      	strb	r2, [r0, #4]
 8015588:	f880 c001 	strb.w	ip, [r0, #1]
 801558c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8015590:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8015594:	7001      	strb	r1, [r0, #0]
 8015596:	f880 c002 	strb.w	ip, [r0, #2]
 801559a:	7143      	strb	r3, [r0, #5]
 801559c:	70c2      	strb	r2, [r0, #3]
 801559e:	b500      	push	{lr}
 80155a0:	f04f 0e09 	mov.w	lr, #9
 80155a4:	f8a0 e006 	strh.w	lr, [r0, #6]
 80155a8:	f85d fb04 	ldr.w	pc, [sp], #4

080155ac <uxr_buffer_create_session>:
 80155ac:	b530      	push	{r4, r5, lr}
 80155ae:	2300      	movs	r3, #0
 80155b0:	b089      	sub	sp, #36	; 0x24
 80155b2:	4d12      	ldr	r5, [pc, #72]	; (80155fc <uxr_buffer_create_session+0x50>)
 80155b4:	460c      	mov	r4, r1
 80155b6:	9307      	str	r3, [sp, #28]
 80155b8:	4619      	mov	r1, r3
 80155ba:	f8ad 201c 	strh.w	r2, [sp, #28]
 80155be:	2201      	movs	r2, #1
 80155c0:	9301      	str	r3, [sp, #4]
 80155c2:	80c2      	strh	r2, [r0, #6]
 80155c4:	f88d 2004 	strb.w	r2, [sp, #4]
 80155c8:	682a      	ldr	r2, [r5, #0]
 80155ca:	9303      	str	r3, [sp, #12]
 80155cc:	9200      	str	r2, [sp, #0]
 80155ce:	88aa      	ldrh	r2, [r5, #4]
 80155d0:	9306      	str	r3, [sp, #24]
 80155d2:	f8ad 2006 	strh.w	r2, [sp, #6]
 80155d6:	f8d0 2001 	ldr.w	r2, [r0, #1]
 80155da:	9202      	str	r2, [sp, #8]
 80155dc:	7802      	ldrb	r2, [r0, #0]
 80155de:	4620      	mov	r0, r4
 80155e0:	f88d 200c 	strb.w	r2, [sp, #12]
 80155e4:	2210      	movs	r2, #16
 80155e6:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80155ea:	f000 fead 	bl	8016348 <uxr_buffer_submessage_header>
 80155ee:	4669      	mov	r1, sp
 80155f0:	4620      	mov	r0, r4
 80155f2:	f001 fcdd 	bl	8016fb0 <uxr_serialize_CREATE_CLIENT_Payload>
 80155f6:	b009      	add	sp, #36	; 0x24
 80155f8:	bd30      	pop	{r4, r5, pc}
 80155fa:	bf00      	nop
 80155fc:	0801a6b8 	.word	0x0801a6b8

08015600 <uxr_buffer_delete_session>:
 8015600:	4a0c      	ldr	r2, [pc, #48]	; (8015634 <uxr_buffer_delete_session+0x34>)
 8015602:	2302      	movs	r3, #2
 8015604:	f44f 7c00 	mov.w	ip, #512	; 0x200
 8015608:	b510      	push	{r4, lr}
 801560a:	460c      	mov	r4, r1
 801560c:	b082      	sub	sp, #8
 801560e:	8911      	ldrh	r1, [r2, #8]
 8015610:	2204      	movs	r2, #4
 8015612:	80c3      	strh	r3, [r0, #6]
 8015614:	2300      	movs	r3, #0
 8015616:	f8ad 1006 	strh.w	r1, [sp, #6]
 801561a:	4620      	mov	r0, r4
 801561c:	2103      	movs	r1, #3
 801561e:	f8ad c004 	strh.w	ip, [sp, #4]
 8015622:	f000 fe91 	bl	8016348 <uxr_buffer_submessage_header>
 8015626:	a901      	add	r1, sp, #4
 8015628:	4620      	mov	r0, r4
 801562a:	f001 fd69 	bl	8017100 <uxr_serialize_DELETE_Payload>
 801562e:	b002      	add	sp, #8
 8015630:	bd10      	pop	{r4, pc}
 8015632:	bf00      	nop
 8015634:	0801a6b8 	.word	0x0801a6b8

08015638 <uxr_read_create_session_status>:
 8015638:	b510      	push	{r4, lr}
 801563a:	460b      	mov	r3, r1
 801563c:	b088      	sub	sp, #32
 801563e:	4604      	mov	r4, r0
 8015640:	a901      	add	r1, sp, #4
 8015642:	4618      	mov	r0, r3
 8015644:	f001 fd6c 	bl	8017120 <uxr_deserialize_STATUS_AGENT_Payload>
 8015648:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801564c:	7163      	strb	r3, [r4, #5]
 801564e:	b008      	add	sp, #32
 8015650:	bd10      	pop	{r4, pc}
 8015652:	bf00      	nop

08015654 <uxr_read_delete_session_status>:
 8015654:	b510      	push	{r4, lr}
 8015656:	b084      	sub	sp, #16
 8015658:	4604      	mov	r4, r0
 801565a:	4608      	mov	r0, r1
 801565c:	a902      	add	r1, sp, #8
 801565e:	f001 fd8f 	bl	8017180 <uxr_deserialize_STATUS_Payload>
 8015662:	88e3      	ldrh	r3, [r4, #6]
 8015664:	2b02      	cmp	r3, #2
 8015666:	d001      	beq.n	801566c <uxr_read_delete_session_status+0x18>
 8015668:	b004      	add	sp, #16
 801566a:	bd10      	pop	{r4, pc}
 801566c:	f10d 000a 	add.w	r0, sp, #10
 8015670:	f7fe fec4 	bl	80143fc <uxr_object_id_from_raw>
 8015674:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8015678:	f89d 3009 	ldrb.w	r3, [sp, #9]
 801567c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8015680:	b29b      	uxth	r3, r3
 8015682:	2b02      	cmp	r3, #2
 8015684:	d1f0      	bne.n	8015668 <uxr_read_delete_session_status+0x14>
 8015686:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801568a:	7163      	strb	r3, [r4, #5]
 801568c:	e7ec      	b.n	8015668 <uxr_read_delete_session_status+0x14>
 801568e:	bf00      	nop

08015690 <uxr_stamp_create_session_header>:
 8015690:	b510      	push	{r4, lr}
 8015692:	2208      	movs	r2, #8
 8015694:	b08a      	sub	sp, #40	; 0x28
 8015696:	4604      	mov	r4, r0
 8015698:	eb0d 0002 	add.w	r0, sp, r2
 801569c:	f7f8 fc0c 	bl	800deb8 <ucdr_init_buffer>
 80156a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80156a4:	2300      	movs	r3, #0
 80156a6:	a802      	add	r0, sp, #8
 80156a8:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80156ac:	9400      	str	r4, [sp, #0]
 80156ae:	461a      	mov	r2, r3
 80156b0:	f001 f846 	bl	8016740 <uxr_serialize_message_header>
 80156b4:	b00a      	add	sp, #40	; 0x28
 80156b6:	bd10      	pop	{r4, pc}

080156b8 <uxr_stamp_session_header>:
 80156b8:	b530      	push	{r4, r5, lr}
 80156ba:	b08d      	sub	sp, #52	; 0x34
 80156bc:	4604      	mov	r4, r0
 80156be:	460d      	mov	r5, r1
 80156c0:	4619      	mov	r1, r3
 80156c2:	a804      	add	r0, sp, #16
 80156c4:	9203      	str	r2, [sp, #12]
 80156c6:	2208      	movs	r2, #8
 80156c8:	f7f8 fbf6 	bl	800deb8 <ucdr_init_buffer>
 80156cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80156d0:	9b03      	ldr	r3, [sp, #12]
 80156d2:	462a      	mov	r2, r5
 80156d4:	a804      	add	r0, sp, #16
 80156d6:	9400      	str	r4, [sp, #0]
 80156d8:	f001 f832 	bl	8016740 <uxr_serialize_message_header>
 80156dc:	b00d      	add	sp, #52	; 0x34
 80156de:	bd30      	pop	{r4, r5, pc}

080156e0 <uxr_read_session_header>:
 80156e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156e4:	4607      	mov	r7, r0
 80156e6:	b084      	sub	sp, #16
 80156e8:	4608      	mov	r0, r1
 80156ea:	460c      	mov	r4, r1
 80156ec:	4615      	mov	r5, r2
 80156ee:	461e      	mov	r6, r3
 80156f0:	f7f8 fc14 	bl	800df1c <ucdr_buffer_remaining>
 80156f4:	2808      	cmp	r0, #8
 80156f6:	d803      	bhi.n	8015700 <uxr_read_session_header+0x20>
 80156f8:	2000      	movs	r0, #0
 80156fa:	b004      	add	sp, #16
 80156fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015700:	f10d 080c 	add.w	r8, sp, #12
 8015704:	4633      	mov	r3, r6
 8015706:	462a      	mov	r2, r5
 8015708:	4620      	mov	r0, r4
 801570a:	f10d 010b 	add.w	r1, sp, #11
 801570e:	f8cd 8000 	str.w	r8, [sp]
 8015712:	f001 f833 	bl	801677c <uxr_deserialize_message_header>
 8015716:	783a      	ldrb	r2, [r7, #0]
 8015718:	f89d 300b 	ldrb.w	r3, [sp, #11]
 801571c:	4293      	cmp	r3, r2
 801571e:	d1eb      	bne.n	80156f8 <uxr_read_session_header+0x18>
 8015720:	061b      	lsls	r3, r3, #24
 8015722:	d41b      	bmi.n	801575c <uxr_read_session_header+0x7c>
 8015724:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8015728:	787b      	ldrb	r3, [r7, #1]
 801572a:	429a      	cmp	r2, r3
 801572c:	d003      	beq.n	8015736 <uxr_read_session_header+0x56>
 801572e:	2001      	movs	r0, #1
 8015730:	f080 0001 	eor.w	r0, r0, #1
 8015734:	e7e1      	b.n	80156fa <uxr_read_session_header+0x1a>
 8015736:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801573a:	1cb8      	adds	r0, r7, #2
 801573c:	78bb      	ldrb	r3, [r7, #2]
 801573e:	429a      	cmp	r2, r3
 8015740:	d1f5      	bne.n	801572e <uxr_read_session_header+0x4e>
 8015742:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8015746:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801574a:	429a      	cmp	r2, r3
 801574c:	d1ef      	bne.n	801572e <uxr_read_session_header+0x4e>
 801574e:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8015752:	7843      	ldrb	r3, [r0, #1]
 8015754:	429a      	cmp	r2, r3
 8015756:	d1ea      	bne.n	801572e <uxr_read_session_header+0x4e>
 8015758:	2000      	movs	r0, #0
 801575a:	e7e9      	b.n	8015730 <uxr_read_session_header+0x50>
 801575c:	2001      	movs	r0, #1
 801575e:	e7cc      	b.n	80156fa <uxr_read_session_header+0x1a>

08015760 <uxr_session_header_offset>:
 8015760:	f990 3000 	ldrsb.w	r3, [r0]
 8015764:	2b00      	cmp	r3, #0
 8015766:	bfac      	ite	ge
 8015768:	2008      	movge	r0, #8
 801576a:	2004      	movlt	r0, #4
 801576c:	4770      	bx	lr
 801576e:	bf00      	nop

08015770 <uxr_init_base_object_request>:
 8015770:	b510      	push	{r4, lr}
 8015772:	b082      	sub	sp, #8
 8015774:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 8015778:	9101      	str	r1, [sp, #4]
 801577a:	88c3      	ldrh	r3, [r0, #6]
 801577c:	f1a3 010a 	sub.w	r1, r3, #10
 8015780:	b289      	uxth	r1, r1
 8015782:	42a1      	cmp	r1, r4
 8015784:	d80f      	bhi.n	80157a6 <uxr_init_base_object_request+0x36>
 8015786:	3301      	adds	r3, #1
 8015788:	b29c      	uxth	r4, r3
 801578a:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 801578e:	b2db      	uxtb	r3, r3
 8015790:	80c4      	strh	r4, [r0, #6]
 8015792:	1c91      	adds	r1, r2, #2
 8015794:	9801      	ldr	r0, [sp, #4]
 8015796:	f882 c000 	strb.w	ip, [r2]
 801579a:	7053      	strb	r3, [r2, #1]
 801579c:	f7fe fe42 	bl	8014424 <uxr_object_id_to_raw>
 80157a0:	4620      	mov	r0, r4
 80157a2:	b002      	add	sp, #8
 80157a4:	bd10      	pop	{r4, pc}
 80157a6:	230a      	movs	r3, #10
 80157a8:	f04f 0c00 	mov.w	ip, #0
 80157ac:	461c      	mov	r4, r3
 80157ae:	e7ef      	b.n	8015790 <uxr_init_base_object_request+0x20>

080157b0 <uxr_parse_base_object_request>:
 80157b0:	b570      	push	{r4, r5, r6, lr}
 80157b2:	4604      	mov	r4, r0
 80157b4:	3002      	adds	r0, #2
 80157b6:	460d      	mov	r5, r1
 80157b8:	4616      	mov	r6, r2
 80157ba:	f7fe fe1f 	bl	80143fc <uxr_object_id_from_raw>
 80157be:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80157c2:	8028      	strh	r0, [r5, #0]
 80157c4:	806b      	strh	r3, [r5, #2]
 80157c6:	7822      	ldrb	r2, [r4, #0]
 80157c8:	7863      	ldrb	r3, [r4, #1]
 80157ca:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80157ce:	8033      	strh	r3, [r6, #0]
 80157d0:	bd70      	pop	{r4, r5, r6, pc}
 80157d2:	bf00      	nop

080157d4 <uxr_init_framing_io>:
 80157d4:	2300      	movs	r3, #0
 80157d6:	7041      	strb	r1, [r0, #1]
 80157d8:	7003      	strb	r3, [r0, #0]
 80157da:	8583      	strh	r3, [r0, #44]	; 0x2c
 80157dc:	4770      	bx	lr
 80157de:	bf00      	nop

080157e0 <uxr_write_framed_msg>:
 80157e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157e4:	4617      	mov	r7, r2
 80157e6:	7842      	ldrb	r2, [r0, #1]
 80157e8:	460e      	mov	r6, r1
 80157ea:	b083      	sub	sp, #12
 80157ec:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 80157f0:	469b      	mov	fp, r3
 80157f2:	237e      	movs	r3, #126	; 0x7e
 80157f4:	4604      	mov	r4, r0
 80157f6:	2901      	cmp	r1, #1
 80157f8:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 80157fc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8015800:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 8015804:	f240 8115 	bls.w	8015a32 <uxr_write_framed_msg+0x252>
 8015808:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 801580c:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 8015810:	2202      	movs	r2, #2
 8015812:	2901      	cmp	r1, #1
 8015814:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015818:	d952      	bls.n	80158c0 <uxr_write_framed_msg+0xe0>
 801581a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801581c:	2103      	movs	r1, #3
 801581e:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 8015822:	b2dd      	uxtb	r5, r3
 8015824:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8015828:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 801582c:	2a01      	cmp	r2, #1
 801582e:	d95c      	bls.n	80158ea <uxr_write_framed_msg+0x10a>
 8015830:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015832:	1862      	adds	r2, r4, r1
 8015834:	3101      	adds	r1, #1
 8015836:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801583a:	f882 5038 	strb.w	r5, [r2, #56]	; 0x38
 801583e:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8015842:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8015846:	2a01      	cmp	r2, #1
 8015848:	d961      	bls.n	801590e <uxr_write_framed_msg+0x12e>
 801584a:	1c4a      	adds	r2, r1, #1
 801584c:	4421      	add	r1, r4
 801584e:	b2d2      	uxtb	r2, r2
 8015850:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 8015854:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015858:	2b00      	cmp	r3, #0
 801585a:	d06a      	beq.n	8015932 <uxr_write_framed_msg+0x152>
 801585c:	f04f 0800 	mov.w	r8, #0
 8015860:	46c1      	mov	r9, r8
 8015862:	e016      	b.n	8015892 <uxr_write_framed_msg+0xb2>
 8015864:	2a29      	cmp	r2, #41	; 0x29
 8015866:	d868      	bhi.n	801593a <uxr_write_framed_msg+0x15a>
 8015868:	18a0      	adds	r0, r4, r2
 801586a:	3201      	adds	r2, #1
 801586c:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8015870:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015874:	ea88 0101 	eor.w	r1, r8, r1
 8015878:	4b7d      	ldr	r3, [pc, #500]	; (8015a70 <uxr_write_framed_msg+0x290>)
 801587a:	f109 0901 	add.w	r9, r9, #1
 801587e:	b2c9      	uxtb	r1, r1
 8015880:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8015884:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 8015888:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801588a:	454b      	cmp	r3, r9
 801588c:	d969      	bls.n	8015962 <uxr_write_framed_msg+0x182>
 801588e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8015892:	f81b 1009 	ldrb.w	r1, [fp, r9]
 8015896:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 801589a:	2801      	cmp	r0, #1
 801589c:	d8e2      	bhi.n	8015864 <uxr_write_framed_msg+0x84>
 801589e:	1c50      	adds	r0, r2, #1
 80158a0:	b2c0      	uxtb	r0, r0
 80158a2:	2829      	cmp	r0, #41	; 0x29
 80158a4:	d849      	bhi.n	801593a <uxr_write_framed_msg+0x15a>
 80158a6:	18a0      	adds	r0, r4, r2
 80158a8:	f04f 037d 	mov.w	r3, #125	; 0x7d
 80158ac:	3202      	adds	r2, #2
 80158ae:	f081 0520 	eor.w	r5, r1, #32
 80158b2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 80158b6:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 80158ba:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80158be:	e7d9      	b.n	8015874 <uxr_write_framed_msg+0x94>
 80158c0:	2104      	movs	r1, #4
 80158c2:	f04f 0c03 	mov.w	ip, #3
 80158c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80158c8:	4422      	add	r2, r4
 80158ca:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 80158ce:	44a4      	add	ip, r4
 80158d0:	b2dd      	uxtb	r5, r3
 80158d2:	f080 0020 	eor.w	r0, r0, #32
 80158d6:	f882 e038 	strb.w	lr, [r2, #56]	; 0x38
 80158da:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 80158de:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 80158e2:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 80158e6:	2a01      	cmp	r2, #1
 80158e8:	d8a2      	bhi.n	8015830 <uxr_write_framed_msg+0x50>
 80158ea:	1862      	adds	r2, r4, r1
 80158ec:	207d      	movs	r0, #125	; 0x7d
 80158ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80158f0:	f085 0520 	eor.w	r5, r5, #32
 80158f4:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
 80158f8:	3102      	adds	r1, #2
 80158fa:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80158fe:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
 8015902:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8015906:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 801590a:	2a01      	cmp	r2, #1
 801590c:	d89d      	bhi.n	801584a <uxr_write_framed_msg+0x6a>
 801590e:	1c4d      	adds	r5, r1, #1
 8015910:	1c8a      	adds	r2, r1, #2
 8015912:	f080 0020 	eor.w	r0, r0, #32
 8015916:	4421      	add	r1, r4
 8015918:	fa54 f585 	uxtab	r5, r4, r5
 801591c:	b2d2      	uxtb	r2, r2
 801591e:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8015922:	f881 c038 	strb.w	ip, [r1, #56]	; 0x38
 8015926:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 801592a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801592e:	2b00      	cmp	r3, #0
 8015930:	d194      	bne.n	801585c <uxr_write_framed_msg+0x7c>
 8015932:	4619      	mov	r1, r3
 8015934:	f8ad 3004 	strh.w	r3, [sp, #4]
 8015938:	e019      	b.n	801596e <uxr_write_framed_msg+0x18e>
 801593a:	2500      	movs	r5, #0
 801593c:	e000      	b.n	8015940 <uxr_write_framed_msg+0x160>
 801593e:	b160      	cbz	r0, 801595a <uxr_write_framed_msg+0x17a>
 8015940:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8015944:	1b52      	subs	r2, r2, r5
 8015946:	4653      	mov	r3, sl
 8015948:	4638      	mov	r0, r7
 801594a:	4421      	add	r1, r4
 801594c:	47b0      	blx	r6
 801594e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8015952:	4405      	add	r5, r0
 8015954:	4295      	cmp	r5, r2
 8015956:	d3f2      	bcc.n	801593e <uxr_write_framed_msg+0x15e>
 8015958:	d066      	beq.n	8015a28 <uxr_write_framed_msg+0x248>
 801595a:	2000      	movs	r0, #0
 801595c:	b003      	add	sp, #12
 801595e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015962:	fa5f f188 	uxtb.w	r1, r8
 8015966:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801596a:	f8ad 8004 	strh.w	r8, [sp, #4]
 801596e:	f04f 0900 	mov.w	r9, #0
 8015972:	f04f 0b7d 	mov.w	fp, #125	; 0x7d
 8015976:	46c8      	mov	r8, r9
 8015978:	e013      	b.n	80159a2 <uxr_write_framed_msg+0x1c2>
 801597a:	2a29      	cmp	r2, #41	; 0x29
 801597c:	d824      	bhi.n	80159c8 <uxr_write_framed_msg+0x1e8>
 801597e:	18a3      	adds	r3, r4, r2
 8015980:	3201      	adds	r2, #1
 8015982:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 8015986:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801598a:	f109 0901 	add.w	r9, r9, #1
 801598e:	f1b9 0f02 	cmp.w	r9, #2
 8015992:	d02d      	beq.n	80159f0 <uxr_write_framed_msg+0x210>
 8015994:	f109 0308 	add.w	r3, r9, #8
 8015998:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801599c:	446b      	add	r3, sp
 801599e:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 80159a2:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 80159a6:	2b01      	cmp	r3, #1
 80159a8:	d8e7      	bhi.n	801597a <uxr_write_framed_msg+0x19a>
 80159aa:	1c53      	adds	r3, r2, #1
 80159ac:	b2db      	uxtb	r3, r3
 80159ae:	2b29      	cmp	r3, #41	; 0x29
 80159b0:	d80a      	bhi.n	80159c8 <uxr_write_framed_msg+0x1e8>
 80159b2:	18a3      	adds	r3, r4, r2
 80159b4:	f081 0120 	eor.w	r1, r1, #32
 80159b8:	3202      	adds	r2, #2
 80159ba:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 80159be:	f883 b038 	strb.w	fp, [r3, #56]	; 0x38
 80159c2:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80159c6:	e7e0      	b.n	801598a <uxr_write_framed_msg+0x1aa>
 80159c8:	2500      	movs	r5, #0
 80159ca:	e001      	b.n	80159d0 <uxr_write_framed_msg+0x1f0>
 80159cc:	2800      	cmp	r0, #0
 80159ce:	d0c4      	beq.n	801595a <uxr_write_framed_msg+0x17a>
 80159d0:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80159d4:	1b52      	subs	r2, r2, r5
 80159d6:	4653      	mov	r3, sl
 80159d8:	4638      	mov	r0, r7
 80159da:	4421      	add	r1, r4
 80159dc:	47b0      	blx	r6
 80159de:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80159e2:	4405      	add	r5, r0
 80159e4:	4295      	cmp	r5, r2
 80159e6:	d3f1      	bcc.n	80159cc <uxr_write_framed_msg+0x1ec>
 80159e8:	d1b7      	bne.n	801595a <uxr_write_framed_msg+0x17a>
 80159ea:	f884 8062 	strb.w	r8, [r4, #98]	; 0x62
 80159ee:	e7d1      	b.n	8015994 <uxr_write_framed_msg+0x1b4>
 80159f0:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80159f4:	b19a      	cbz	r2, 8015a1e <uxr_write_framed_msg+0x23e>
 80159f6:	2500      	movs	r5, #0
 80159f8:	e001      	b.n	80159fe <uxr_write_framed_msg+0x21e>
 80159fa:	2800      	cmp	r0, #0
 80159fc:	d0ad      	beq.n	801595a <uxr_write_framed_msg+0x17a>
 80159fe:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8015a02:	1b52      	subs	r2, r2, r5
 8015a04:	4653      	mov	r3, sl
 8015a06:	4638      	mov	r0, r7
 8015a08:	4421      	add	r1, r4
 8015a0a:	47b0      	blx	r6
 8015a0c:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8015a10:	4405      	add	r5, r0
 8015a12:	4295      	cmp	r5, r2
 8015a14:	d3f1      	bcc.n	80159fa <uxr_write_framed_msg+0x21a>
 8015a16:	d1a0      	bne.n	801595a <uxr_write_framed_msg+0x17a>
 8015a18:	2300      	movs	r3, #0
 8015a1a:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8015a1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015a20:	b298      	uxth	r0, r3
 8015a22:	b003      	add	sp, #12
 8015a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a28:	f04f 0300 	mov.w	r3, #0
 8015a2c:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8015a30:	e72a      	b.n	8015888 <uxr_write_framed_msg+0xa8>
 8015a32:	217d      	movs	r1, #125	; 0x7d
 8015a34:	f082 0220 	eor.w	r2, r2, #32
 8015a38:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 8015a3c:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8015a40:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 8015a44:	2203      	movs	r2, #3
 8015a46:	2901      	cmp	r1, #1
 8015a48:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015a4c:	d803      	bhi.n	8015a56 <uxr_write_framed_msg+0x276>
 8015a4e:	2105      	movs	r1, #5
 8015a50:	f04f 0c04 	mov.w	ip, #4
 8015a54:	e737      	b.n	80158c6 <uxr_write_framed_msg+0xe6>
 8015a56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015a58:	2104      	movs	r1, #4
 8015a5a:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 8015a5e:	b2dd      	uxtb	r5, r3
 8015a60:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8015a64:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 8015a68:	2a01      	cmp	r2, #1
 8015a6a:	f63f aee1 	bhi.w	8015830 <uxr_write_framed_msg+0x50>
 8015a6e:	e73c      	b.n	80158ea <uxr_write_framed_msg+0x10a>
 8015a70:	0801bb70 	.word	0x0801bb70

08015a74 <uxr_framing_read_transport>:
 8015a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a78:	4604      	mov	r4, r0
 8015a7a:	b085      	sub	sp, #20
 8015a7c:	4692      	mov	sl, r2
 8015a7e:	4689      	mov	r9, r1
 8015a80:	461d      	mov	r5, r3
 8015a82:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8015a84:	f000 fca6 	bl	80163d4 <uxr_millis>
 8015a88:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8015a8c:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 8015a90:	4680      	mov	r8, r0
 8015a92:	42ba      	cmp	r2, r7
 8015a94:	d05f      	beq.n	8015b56 <uxr_framing_read_transport+0xe2>
 8015a96:	d817      	bhi.n	8015ac8 <uxr_framing_read_transport+0x54>
 8015a98:	3f01      	subs	r7, #1
 8015a9a:	1aba      	subs	r2, r7, r2
 8015a9c:	2700      	movs	r7, #0
 8015a9e:	b2d2      	uxtb	r2, r2
 8015aa0:	42b2      	cmp	r2, r6
 8015aa2:	d81a      	bhi.n	8015ada <uxr_framing_read_transport+0x66>
 8015aa4:	19d3      	adds	r3, r2, r7
 8015aa6:	42b3      	cmp	r3, r6
 8015aa8:	d852      	bhi.n	8015b50 <uxr_framing_read_transport+0xdc>
 8015aaa:	b9d2      	cbnz	r2, 8015ae2 <uxr_framing_read_transport+0x6e>
 8015aac:	2600      	movs	r6, #0
 8015aae:	f000 fc91 	bl	80163d4 <uxr_millis>
 8015ab2:	682b      	ldr	r3, [r5, #0]
 8015ab4:	eba0 0008 	sub.w	r0, r0, r8
 8015ab8:	1a1b      	subs	r3, r3, r0
 8015aba:	4630      	mov	r0, r6
 8015abc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015ac0:	602b      	str	r3, [r5, #0]
 8015ac2:	b005      	add	sp, #20
 8015ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ac8:	2f00      	cmp	r7, #0
 8015aca:	d060      	beq.n	8015b8e <uxr_framing_read_transport+0x11a>
 8015acc:	f1c2 022a 	rsb	r2, r2, #42	; 0x2a
 8015ad0:	3f01      	subs	r7, #1
 8015ad2:	b2d2      	uxtb	r2, r2
 8015ad4:	b2ff      	uxtb	r7, r7
 8015ad6:	42b2      	cmp	r2, r6
 8015ad8:	d9e4      	bls.n	8015aa4 <uxr_framing_read_transport+0x30>
 8015ada:	b2f2      	uxtb	r2, r6
 8015adc:	2700      	movs	r7, #0
 8015ade:	2a00      	cmp	r2, #0
 8015ae0:	d0e4      	beq.n	8015aac <uxr_framing_read_transport+0x38>
 8015ae2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015ae4:	4650      	mov	r0, sl
 8015ae6:	9203      	str	r2, [sp, #12]
 8015ae8:	9300      	str	r3, [sp, #0]
 8015aea:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8015aee:	682b      	ldr	r3, [r5, #0]
 8015af0:	3102      	adds	r1, #2
 8015af2:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 8015b98 <uxr_framing_read_transport+0x124>
 8015af6:	4421      	add	r1, r4
 8015af8:	47c8      	blx	r9
 8015afa:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8015afe:	4606      	mov	r6, r0
 8015b00:	4403      	add	r3, r0
 8015b02:	0859      	lsrs	r1, r3, #1
 8015b04:	fbab 2101 	umull	r2, r1, fp, r1
 8015b08:	222a      	movs	r2, #42	; 0x2a
 8015b0a:	0889      	lsrs	r1, r1, #2
 8015b0c:	fb02 3111 	mls	r1, r2, r1, r3
 8015b10:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8015b14:	2800      	cmp	r0, #0
 8015b16:	d0c9      	beq.n	8015aac <uxr_framing_read_transport+0x38>
 8015b18:	9a03      	ldr	r2, [sp, #12]
 8015b1a:	4290      	cmp	r0, r2
 8015b1c:	d1c7      	bne.n	8015aae <uxr_framing_read_transport+0x3a>
 8015b1e:	2f00      	cmp	r7, #0
 8015b20:	d0c5      	beq.n	8015aae <uxr_framing_read_transport+0x3a>
 8015b22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015b24:	3102      	adds	r1, #2
 8015b26:	463a      	mov	r2, r7
 8015b28:	4650      	mov	r0, sl
 8015b2a:	4421      	add	r1, r4
 8015b2c:	9300      	str	r3, [sp, #0]
 8015b2e:	2300      	movs	r3, #0
 8015b30:	47c8      	blx	r9
 8015b32:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8015b36:	4406      	add	r6, r0
 8015b38:	1813      	adds	r3, r2, r0
 8015b3a:	085a      	lsrs	r2, r3, #1
 8015b3c:	fbab 1b02 	umull	r1, fp, fp, r2
 8015b40:	222a      	movs	r2, #42	; 0x2a
 8015b42:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 8015b46:	fb02 331b 	mls	r3, r2, fp, r3
 8015b4a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8015b4e:	e7ae      	b.n	8015aae <uxr_framing_read_transport+0x3a>
 8015b50:	1ab6      	subs	r6, r6, r2
 8015b52:	b2f7      	uxtb	r7, r6
 8015b54:	e7a9      	b.n	8015aaa <uxr_framing_read_transport+0x36>
 8015b56:	2300      	movs	r3, #0
 8015b58:	2e28      	cmp	r6, #40	; 0x28
 8015b5a:	85a3      	strh	r3, [r4, #44]	; 0x2c
 8015b5c:	d9bd      	bls.n	8015ada <uxr_framing_read_transport+0x66>
 8015b5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015b60:	2229      	movs	r2, #41	; 0x29
 8015b62:	1ca1      	adds	r1, r4, #2
 8015b64:	4650      	mov	r0, sl
 8015b66:	9300      	str	r3, [sp, #0]
 8015b68:	682b      	ldr	r3, [r5, #0]
 8015b6a:	47c8      	blx	r9
 8015b6c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8015b70:	4606      	mov	r6, r0
 8015b72:	212a      	movs	r1, #42	; 0x2a
 8015b74:	4403      	add	r3, r0
 8015b76:	4808      	ldr	r0, [pc, #32]	; (8015b98 <uxr_framing_read_transport+0x124>)
 8015b78:	085a      	lsrs	r2, r3, #1
 8015b7a:	fba0 0202 	umull	r0, r2, r0, r2
 8015b7e:	0892      	lsrs	r2, r2, #2
 8015b80:	fb01 3312 	mls	r3, r1, r2, r3
 8015b84:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8015b88:	2e00      	cmp	r6, #0
 8015b8a:	d08f      	beq.n	8015aac <uxr_framing_read_transport+0x38>
 8015b8c:	e78f      	b.n	8015aae <uxr_framing_read_transport+0x3a>
 8015b8e:	f1c2 0229 	rsb	r2, r2, #41	; 0x29
 8015b92:	b2d2      	uxtb	r2, r2
 8015b94:	e784      	b.n	8015aa0 <uxr_framing_read_transport+0x2c>
 8015b96:	bf00      	nop
 8015b98:	30c30c31 	.word	0x30c30c31

08015b9c <uxr_read_framed_msg>:
 8015b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ba0:	461e      	mov	r6, r3
 8015ba2:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8015ba6:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8015baa:	b083      	sub	sp, #12
 8015bac:	4604      	mov	r4, r0
 8015bae:	4688      	mov	r8, r1
 8015bb0:	429d      	cmp	r5, r3
 8015bb2:	4691      	mov	r9, r2
 8015bb4:	f000 818c 	beq.w	8015ed0 <uxr_read_framed_msg+0x334>
 8015bb8:	7823      	ldrb	r3, [r4, #0]
 8015bba:	4dc3      	ldr	r5, [pc, #780]	; (8015ec8 <uxr_read_framed_msg+0x32c>)
 8015bbc:	4fc3      	ldr	r7, [pc, #780]	; (8015ecc <uxr_read_framed_msg+0x330>)
 8015bbe:	2b07      	cmp	r3, #7
 8015bc0:	d8fd      	bhi.n	8015bbe <uxr_read_framed_msg+0x22>
 8015bc2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8015bc6:	011c      	.short	0x011c
 8015bc8:	00d900fb 	.word	0x00d900fb
 8015bcc:	008f00ba 	.word	0x008f00ba
 8015bd0:	00320051 	.word	0x00320051
 8015bd4:	0008      	.short	0x0008
 8015bd6:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8015bda:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8015bde:	4299      	cmp	r1, r3
 8015be0:	f000 814d 	beq.w	8015e7e <uxr_read_framed_msg+0x2e2>
 8015be4:	18e2      	adds	r2, r4, r3
 8015be6:	7892      	ldrb	r2, [r2, #2]
 8015be8:	2a7d      	cmp	r2, #125	; 0x7d
 8015bea:	f000 81b8 	beq.w	8015f5e <uxr_read_framed_msg+0x3c2>
 8015bee:	3301      	adds	r3, #1
 8015bf0:	212a      	movs	r1, #42	; 0x2a
 8015bf2:	2a7e      	cmp	r2, #126	; 0x7e
 8015bf4:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8015bf8:	fba5 c000 	umull	ip, r0, r5, r0
 8015bfc:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8015c00:	fb01 3310 	mls	r3, r1, r0, r3
 8015c04:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015c08:	f000 8257 	beq.w	80160ba <uxr_read_framed_msg+0x51e>
 8015c0c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8015c0e:	2000      	movs	r0, #0
 8015c10:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8015c12:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8015c16:	7020      	strb	r0, [r4, #0]
 8015c18:	b29b      	uxth	r3, r3
 8015c1a:	4299      	cmp	r1, r3
 8015c1c:	86a3      	strh	r3, [r4, #52]	; 0x34
 8015c1e:	f000 8178 	beq.w	8015f12 <uxr_read_framed_msg+0x376>
 8015c22:	2000      	movs	r0, #0
 8015c24:	b003      	add	sp, #12
 8015c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c2a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8015c2e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8015c32:	4298      	cmp	r0, r3
 8015c34:	f000 8132 	beq.w	8015e9c <uxr_read_framed_msg+0x300>
 8015c38:	18e2      	adds	r2, r4, r3
 8015c3a:	7891      	ldrb	r1, [r2, #2]
 8015c3c:	297d      	cmp	r1, #125	; 0x7d
 8015c3e:	f000 8170 	beq.w	8015f22 <uxr_read_framed_msg+0x386>
 8015c42:	3301      	adds	r3, #1
 8015c44:	202a      	movs	r0, #42	; 0x2a
 8015c46:	297e      	cmp	r1, #126	; 0x7e
 8015c48:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8015c4c:	fba5 c202 	umull	ip, r2, r5, r2
 8015c50:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015c54:	fb00 3312 	mls	r3, r0, r2, r3
 8015c58:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015c5c:	f000 821d 	beq.w	801609a <uxr_read_framed_msg+0x4fe>
 8015c60:	2307      	movs	r3, #7
 8015c62:	86a1      	strh	r1, [r4, #52]	; 0x34
 8015c64:	7023      	strb	r3, [r4, #0]
 8015c66:	e7aa      	b.n	8015bbe <uxr_read_framed_msg+0x22>
 8015c68:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8015c6a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8015c6e:	459e      	cmp	lr, r3
 8015c70:	d827      	bhi.n	8015cc2 <uxr_read_framed_msg+0x126>
 8015c72:	e032      	b.n	8015cda <uxr_read_framed_msg+0x13e>
 8015c74:	fba5 b101 	umull	fp, r1, r5, r1
 8015c78:	f89c c002 	ldrb.w	ip, [ip, #2]
 8015c7c:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 8015c80:	0889      	lsrs	r1, r1, #2
 8015c82:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 8015c86:	fb0b 0111 	mls	r1, fp, r1, r0
 8015c8a:	f000 80d4 	beq.w	8015e36 <uxr_read_framed_msg+0x29a>
 8015c8e:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8015c92:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 8015c96:	f000 80cb 	beq.w	8015e30 <uxr_read_framed_msg+0x294>
 8015c9a:	f806 c003 	strb.w	ip, [r6, r3]
 8015c9e:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8015ca0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8015ca2:	ea80 010c 	eor.w	r1, r0, ip
 8015ca6:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8015caa:	3301      	adds	r3, #1
 8015cac:	b2c9      	uxtb	r1, r1
 8015cae:	b29b      	uxth	r3, r3
 8015cb0:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 8015cb4:	4573      	cmp	r3, lr
 8015cb6:	8663      	strh	r3, [r4, #50]	; 0x32
 8015cb8:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8015cbc:	86e2      	strh	r2, [r4, #54]	; 0x36
 8015cbe:	f080 811d 	bcs.w	8015efc <uxr_read_framed_msg+0x360>
 8015cc2:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8015cc6:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8015cca:	1c50      	adds	r0, r2, #1
 8015ccc:	eb04 0c02 	add.w	ip, r4, r2
 8015cd0:	4592      	cmp	sl, r2
 8015cd2:	ea4f 0150 	mov.w	r1, r0, lsr #1
 8015cd6:	d1cd      	bne.n	8015c74 <uxr_read_framed_msg+0xd8>
 8015cd8:	459e      	cmp	lr, r3
 8015cda:	f040 8114 	bne.w	8015f06 <uxr_read_framed_msg+0x36a>
 8015cde:	2306      	movs	r3, #6
 8015ce0:	7023      	strb	r3, [r4, #0]
 8015ce2:	e76c      	b.n	8015bbe <uxr_read_framed_msg+0x22>
 8015ce4:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8015ce8:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8015cec:	4298      	cmp	r0, r3
 8015cee:	f000 80c6 	beq.w	8015e7e <uxr_read_framed_msg+0x2e2>
 8015cf2:	18e2      	adds	r2, r4, r3
 8015cf4:	7891      	ldrb	r1, [r2, #2]
 8015cf6:	297d      	cmp	r1, #125	; 0x7d
 8015cf8:	f000 8193 	beq.w	8016022 <uxr_read_framed_msg+0x486>
 8015cfc:	3301      	adds	r3, #1
 8015cfe:	202a      	movs	r0, #42	; 0x2a
 8015d00:	297e      	cmp	r1, #126	; 0x7e
 8015d02:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8015d06:	fba5 c202 	umull	ip, r2, r5, r2
 8015d0a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015d0e:	fb00 3312 	mls	r3, r0, r2, r3
 8015d12:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015d16:	f000 81d0 	beq.w	80160ba <uxr_read_framed_msg+0x51e>
 8015d1a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8015d1c:	2000      	movs	r0, #0
 8015d1e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8015d22:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015d24:	8660      	strh	r0, [r4, #50]	; 0x32
 8015d26:	b29b      	uxth	r3, r3
 8015d28:	86e0      	strh	r0, [r4, #54]	; 0x36
 8015d2a:	428b      	cmp	r3, r1
 8015d2c:	8623      	strh	r3, [r4, #48]	; 0x30
 8015d2e:	f240 80e2 	bls.w	8015ef6 <uxr_read_framed_msg+0x35a>
 8015d32:	7020      	strb	r0, [r4, #0]
 8015d34:	b003      	add	sp, #12
 8015d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d3a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8015d3e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8015d42:	4298      	cmp	r0, r3
 8015d44:	f000 80aa 	beq.w	8015e9c <uxr_read_framed_msg+0x300>
 8015d48:	18e2      	adds	r2, r4, r3
 8015d4a:	7891      	ldrb	r1, [r2, #2]
 8015d4c:	297d      	cmp	r1, #125	; 0x7d
 8015d4e:	f000 8186 	beq.w	801605e <uxr_read_framed_msg+0x4c2>
 8015d52:	3301      	adds	r3, #1
 8015d54:	202a      	movs	r0, #42	; 0x2a
 8015d56:	297e      	cmp	r1, #126	; 0x7e
 8015d58:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8015d5c:	fba5 c202 	umull	ip, r2, r5, r2
 8015d60:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015d64:	fb00 3312 	mls	r3, r0, r2, r3
 8015d68:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015d6c:	f000 8195 	beq.w	801609a <uxr_read_framed_msg+0x4fe>
 8015d70:	2304      	movs	r3, #4
 8015d72:	8621      	strh	r1, [r4, #48]	; 0x30
 8015d74:	7023      	strb	r3, [r4, #0]
 8015d76:	e722      	b.n	8015bbe <uxr_read_framed_msg+0x22>
 8015d78:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8015d7c:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8015d80:	4290      	cmp	r0, r2
 8015d82:	f000 80b4 	beq.w	8015eee <uxr_read_framed_msg+0x352>
 8015d86:	18a3      	adds	r3, r4, r2
 8015d88:	7899      	ldrb	r1, [r3, #2]
 8015d8a:	297d      	cmp	r1, #125	; 0x7d
 8015d8c:	f000 8107 	beq.w	8015f9e <uxr_read_framed_msg+0x402>
 8015d90:	3201      	adds	r2, #1
 8015d92:	232a      	movs	r3, #42	; 0x2a
 8015d94:	297e      	cmp	r1, #126	; 0x7e
 8015d96:	ea4f 0052 	mov.w	r0, r2, lsr #1
 8015d9a:	fba5 c000 	umull	ip, r0, r5, r0
 8015d9e:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8015da2:	fb03 2210 	mls	r2, r3, r0, r2
 8015da6:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8015daa:	f000 818a 	beq.w	80160c2 <uxr_read_framed_msg+0x526>
 8015dae:	7863      	ldrb	r3, [r4, #1]
 8015db0:	428b      	cmp	r3, r1
 8015db2:	bf0c      	ite	eq
 8015db4:	2303      	moveq	r3, #3
 8015db6:	2300      	movne	r3, #0
 8015db8:	7023      	strb	r3, [r4, #0]
 8015dba:	e700      	b.n	8015bbe <uxr_read_framed_msg+0x22>
 8015dbc:	2300      	movs	r3, #0
 8015dbe:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8015dc2:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8015dc6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8015dca:	4299      	cmp	r1, r3
 8015dcc:	d06a      	beq.n	8015ea4 <uxr_read_framed_msg+0x308>
 8015dce:	18e2      	adds	r2, r4, r3
 8015dd0:	7890      	ldrb	r0, [r2, #2]
 8015dd2:	287d      	cmp	r0, #125	; 0x7d
 8015dd4:	f000 8100 	beq.w	8015fd8 <uxr_read_framed_msg+0x43c>
 8015dd8:	3301      	adds	r3, #1
 8015dda:	212a      	movs	r1, #42	; 0x2a
 8015ddc:	287e      	cmp	r0, #126	; 0x7e
 8015dde:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 8015de2:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8015de6:	fba5 c202 	umull	ip, r2, r5, r2
 8015dea:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015dee:	fb01 3312 	mls	r3, r1, r2, r3
 8015df2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015df6:	d055      	beq.n	8015ea4 <uxr_read_framed_msg+0x308>
 8015df8:	2302      	movs	r3, #2
 8015dfa:	7023      	strb	r3, [r4, #0]
 8015dfc:	e6df      	b.n	8015bbe <uxr_read_framed_msg+0x22>
 8015dfe:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
 8015e02:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 8015e06:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8015e0a:	1c5a      	adds	r2, r3, #1
 8015e0c:	459c      	cmp	ip, r3
 8015e0e:	eb04 0103 	add.w	r1, r4, r3
 8015e12:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8015e16:	f43f af04 	beq.w	8015c22 <uxr_read_framed_msg+0x86>
 8015e1a:	fba5 0303 	umull	r0, r3, r5, r3
 8015e1e:	7889      	ldrb	r1, [r1, #2]
 8015e20:	089b      	lsrs	r3, r3, #2
 8015e22:	297e      	cmp	r1, #126	; 0x7e
 8015e24:	fb0e 2313 	mls	r3, lr, r3, r2
 8015e28:	b2db      	uxtb	r3, r3
 8015e2a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015e2e:	d1ec      	bne.n	8015e0a <uxr_read_framed_msg+0x26e>
 8015e30:	2301      	movs	r3, #1
 8015e32:	7023      	strb	r3, [r4, #0]
 8015e34:	e6c3      	b.n	8015bbe <uxr_read_framed_msg+0x22>
 8015e36:	1c50      	adds	r0, r2, #1
 8015e38:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 8015e3c:	3202      	adds	r2, #2
 8015e3e:	0841      	lsrs	r1, r0, #1
 8015e40:	fba5 c101 	umull	ip, r1, r5, r1
 8015e44:	0889      	lsrs	r1, r1, #2
 8015e46:	fb0b 0111 	mls	r1, fp, r1, r0
 8015e4a:	1860      	adds	r0, r4, r1
 8015e4c:	b2c9      	uxtb	r1, r1
 8015e4e:	458a      	cmp	sl, r1
 8015e50:	f43f af42 	beq.w	8015cd8 <uxr_read_framed_msg+0x13c>
 8015e54:	0851      	lsrs	r1, r2, #1
 8015e56:	7880      	ldrb	r0, [r0, #2]
 8015e58:	fba5 a101 	umull	sl, r1, r5, r1
 8015e5c:	287e      	cmp	r0, #126	; 0x7e
 8015e5e:	f080 0c20 	eor.w	ip, r0, #32
 8015e62:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8015e66:	fb0b 2211 	mls	r2, fp, r1, r2
 8015e6a:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8015e6e:	f47f af14 	bne.w	8015c9a <uxr_read_framed_msg+0xfe>
 8015e72:	459e      	cmp	lr, r3
 8015e74:	f43f af33 	beq.w	8015cde <uxr_read_framed_msg+0x142>
 8015e78:	2301      	movs	r3, #1
 8015e7a:	7023      	strb	r3, [r4, #0]
 8015e7c:	e69f      	b.n	8015bbe <uxr_read_framed_msg+0x22>
 8015e7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015e80:	9300      	str	r3, [sp, #0]
 8015e82:	2301      	movs	r3, #1
 8015e84:	9301      	str	r3, [sp, #4]
 8015e86:	464a      	mov	r2, r9
 8015e88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015e8a:	4641      	mov	r1, r8
 8015e8c:	4620      	mov	r0, r4
 8015e8e:	f7ff fdf1 	bl	8015a74 <uxr_framing_read_transport>
 8015e92:	2800      	cmp	r0, #0
 8015e94:	f43f aec5 	beq.w	8015c22 <uxr_read_framed_msg+0x86>
 8015e98:	7823      	ldrb	r3, [r4, #0]
 8015e9a:	e690      	b.n	8015bbe <uxr_read_framed_msg+0x22>
 8015e9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015e9e:	9300      	str	r3, [sp, #0]
 8015ea0:	2302      	movs	r3, #2
 8015ea2:	e7ef      	b.n	8015e84 <uxr_read_framed_msg+0x2e8>
 8015ea4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015ea6:	464a      	mov	r2, r9
 8015ea8:	4641      	mov	r1, r8
 8015eaa:	4620      	mov	r0, r4
 8015eac:	9300      	str	r3, [sp, #0]
 8015eae:	2304      	movs	r3, #4
 8015eb0:	9301      	str	r3, [sp, #4]
 8015eb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015eb4:	f7ff fdde 	bl	8015a74 <uxr_framing_read_transport>
 8015eb8:	2800      	cmp	r0, #0
 8015eba:	d1ed      	bne.n	8015e98 <uxr_read_framed_msg+0x2fc>
 8015ebc:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8015ec0:	2b7e      	cmp	r3, #126	; 0x7e
 8015ec2:	d0e9      	beq.n	8015e98 <uxr_read_framed_msg+0x2fc>
 8015ec4:	e6ad      	b.n	8015c22 <uxr_read_framed_msg+0x86>
 8015ec6:	bf00      	nop
 8015ec8:	30c30c31 	.word	0x30c30c31
 8015ecc:	0801bb70 	.word	0x0801bb70
 8015ed0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015ed2:	9300      	str	r3, [sp, #0]
 8015ed4:	2305      	movs	r3, #5
 8015ed6:	9301      	str	r3, [sp, #4]
 8015ed8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015eda:	f7ff fdcb 	bl	8015a74 <uxr_framing_read_transport>
 8015ede:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8015ee2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8015ee6:	429a      	cmp	r2, r3
 8015ee8:	f43f ae9b 	beq.w	8015c22 <uxr_read_framed_msg+0x86>
 8015eec:	e664      	b.n	8015bb8 <uxr_read_framed_msg+0x1c>
 8015eee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015ef0:	9300      	str	r3, [sp, #0]
 8015ef2:	2303      	movs	r3, #3
 8015ef4:	e7c6      	b.n	8015e84 <uxr_read_framed_msg+0x2e8>
 8015ef6:	2305      	movs	r3, #5
 8015ef8:	7023      	strb	r3, [r4, #0]
 8015efa:	e660      	b.n	8015bbe <uxr_read_framed_msg+0x22>
 8015efc:	f43f aeef 	beq.w	8015cde <uxr_read_framed_msg+0x142>
 8015f00:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8015f04:	d094      	beq.n	8015e30 <uxr_read_framed_msg+0x294>
 8015f06:	ebae 0303 	sub.w	r3, lr, r3
 8015f0a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015f0c:	3302      	adds	r3, #2
 8015f0e:	9200      	str	r2, [sp, #0]
 8015f10:	e7b8      	b.n	8015e84 <uxr_read_framed_msg+0x2e8>
 8015f12:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8015f16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015f18:	7013      	strb	r3, [r2, #0]
 8015f1a:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8015f1c:	b003      	add	sp, #12
 8015f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f22:	1c59      	adds	r1, r3, #1
 8015f24:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8015f28:	084a      	lsrs	r2, r1, #1
 8015f2a:	fba5 e202 	umull	lr, r2, r5, r2
 8015f2e:	0892      	lsrs	r2, r2, #2
 8015f30:	fb0c 1212 	mls	r2, ip, r2, r1
 8015f34:	b2d1      	uxtb	r1, r2
 8015f36:	4288      	cmp	r0, r1
 8015f38:	d0b0      	beq.n	8015e9c <uxr_read_framed_msg+0x300>
 8015f3a:	3302      	adds	r3, #2
 8015f3c:	4422      	add	r2, r4
 8015f3e:	7891      	ldrb	r1, [r2, #2]
 8015f40:	085a      	lsrs	r2, r3, #1
 8015f42:	fba5 0202 	umull	r0, r2, r5, r2
 8015f46:	297e      	cmp	r1, #126	; 0x7e
 8015f48:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015f4c:	fb0c 3312 	mls	r3, ip, r2, r3
 8015f50:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015f54:	f000 80a1 	beq.w	801609a <uxr_read_framed_msg+0x4fe>
 8015f58:	f081 0120 	eor.w	r1, r1, #32
 8015f5c:	e680      	b.n	8015c60 <uxr_read_framed_msg+0xc4>
 8015f5e:	f103 0c01 	add.w	ip, r3, #1
 8015f62:	202a      	movs	r0, #42	; 0x2a
 8015f64:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8015f68:	fba5 e202 	umull	lr, r2, r5, r2
 8015f6c:	0892      	lsrs	r2, r2, #2
 8015f6e:	fb00 c212 	mls	r2, r0, r2, ip
 8015f72:	fa5f fc82 	uxtb.w	ip, r2
 8015f76:	4561      	cmp	r1, ip
 8015f78:	d081      	beq.n	8015e7e <uxr_read_framed_msg+0x2e2>
 8015f7a:	3302      	adds	r3, #2
 8015f7c:	4422      	add	r2, r4
 8015f7e:	0859      	lsrs	r1, r3, #1
 8015f80:	7892      	ldrb	r2, [r2, #2]
 8015f82:	fba5 c101 	umull	ip, r1, r5, r1
 8015f86:	2a7e      	cmp	r2, #126	; 0x7e
 8015f88:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8015f8c:	fb00 3311 	mls	r3, r0, r1, r3
 8015f90:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015f94:	f000 8091 	beq.w	80160ba <uxr_read_framed_msg+0x51e>
 8015f98:	f082 0220 	eor.w	r2, r2, #32
 8015f9c:	e636      	b.n	8015c0c <uxr_read_framed_msg+0x70>
 8015f9e:	1c51      	adds	r1, r2, #1
 8015fa0:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8015fa4:	084b      	lsrs	r3, r1, #1
 8015fa6:	fba5 e303 	umull	lr, r3, r5, r3
 8015faa:	089b      	lsrs	r3, r3, #2
 8015fac:	fb0c 1313 	mls	r3, ip, r3, r1
 8015fb0:	b2d9      	uxtb	r1, r3
 8015fb2:	4288      	cmp	r0, r1
 8015fb4:	d09b      	beq.n	8015eee <uxr_read_framed_msg+0x352>
 8015fb6:	3202      	adds	r2, #2
 8015fb8:	4423      	add	r3, r4
 8015fba:	0850      	lsrs	r0, r2, #1
 8015fbc:	789b      	ldrb	r3, [r3, #2]
 8015fbe:	fba5 1000 	umull	r1, r0, r5, r0
 8015fc2:	2b7e      	cmp	r3, #126	; 0x7e
 8015fc4:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8015fc8:	fb0c 2210 	mls	r2, ip, r0, r2
 8015fcc:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8015fd0:	d077      	beq.n	80160c2 <uxr_read_framed_msg+0x526>
 8015fd2:	f083 0120 	eor.w	r1, r3, #32
 8015fd6:	e6ea      	b.n	8015dae <uxr_read_framed_msg+0x212>
 8015fd8:	f103 0c01 	add.w	ip, r3, #1
 8015fdc:	202a      	movs	r0, #42	; 0x2a
 8015fde:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8015fe2:	fba5 e202 	umull	lr, r2, r5, r2
 8015fe6:	0892      	lsrs	r2, r2, #2
 8015fe8:	fb00 c212 	mls	r2, r0, r2, ip
 8015fec:	fa5f fc82 	uxtb.w	ip, r2
 8015ff0:	4561      	cmp	r1, ip
 8015ff2:	f43f af57 	beq.w	8015ea4 <uxr_read_framed_msg+0x308>
 8015ff6:	3302      	adds	r3, #2
 8015ff8:	4422      	add	r2, r4
 8015ffa:	7891      	ldrb	r1, [r2, #2]
 8015ffc:	085a      	lsrs	r2, r3, #1
 8015ffe:	fba5 c202 	umull	ip, r2, r5, r2
 8016002:	297e      	cmp	r1, #126	; 0x7e
 8016004:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8016008:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801600c:	fb00 3312 	mls	r3, r0, r2, r3
 8016010:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016014:	f43f af46 	beq.w	8015ea4 <uxr_read_framed_msg+0x308>
 8016018:	f081 0120 	eor.w	r1, r1, #32
 801601c:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8016020:	e6ea      	b.n	8015df8 <uxr_read_framed_msg+0x25c>
 8016022:	1c59      	adds	r1, r3, #1
 8016024:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8016028:	084a      	lsrs	r2, r1, #1
 801602a:	fba5 e202 	umull	lr, r2, r5, r2
 801602e:	0892      	lsrs	r2, r2, #2
 8016030:	fb0c 1212 	mls	r2, ip, r2, r1
 8016034:	b2d1      	uxtb	r1, r2
 8016036:	4288      	cmp	r0, r1
 8016038:	f43f af21 	beq.w	8015e7e <uxr_read_framed_msg+0x2e2>
 801603c:	3302      	adds	r3, #2
 801603e:	4422      	add	r2, r4
 8016040:	7891      	ldrb	r1, [r2, #2]
 8016042:	085a      	lsrs	r2, r3, #1
 8016044:	fba5 0202 	umull	r0, r2, r5, r2
 8016048:	297e      	cmp	r1, #126	; 0x7e
 801604a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801604e:	fb0c 3312 	mls	r3, ip, r2, r3
 8016052:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016056:	d030      	beq.n	80160ba <uxr_read_framed_msg+0x51e>
 8016058:	f081 0120 	eor.w	r1, r1, #32
 801605c:	e65d      	b.n	8015d1a <uxr_read_framed_msg+0x17e>
 801605e:	1c59      	adds	r1, r3, #1
 8016060:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8016064:	084a      	lsrs	r2, r1, #1
 8016066:	fba5 e202 	umull	lr, r2, r5, r2
 801606a:	0892      	lsrs	r2, r2, #2
 801606c:	fb0c 1212 	mls	r2, ip, r2, r1
 8016070:	b2d1      	uxtb	r1, r2
 8016072:	4288      	cmp	r0, r1
 8016074:	f43f af12 	beq.w	8015e9c <uxr_read_framed_msg+0x300>
 8016078:	3302      	adds	r3, #2
 801607a:	4422      	add	r2, r4
 801607c:	7891      	ldrb	r1, [r2, #2]
 801607e:	085a      	lsrs	r2, r3, #1
 8016080:	fba5 0202 	umull	r0, r2, r5, r2
 8016084:	297e      	cmp	r1, #126	; 0x7e
 8016086:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801608a:	fb0c 3312 	mls	r3, ip, r2, r3
 801608e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016092:	d002      	beq.n	801609a <uxr_read_framed_msg+0x4fe>
 8016094:	f081 0120 	eor.w	r1, r1, #32
 8016098:	e66a      	b.n	8015d70 <uxr_read_framed_msg+0x1d4>
 801609a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801609c:	9300      	str	r3, [sp, #0]
 801609e:	2302      	movs	r3, #2
 80160a0:	9301      	str	r3, [sp, #4]
 80160a2:	464a      	mov	r2, r9
 80160a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80160a6:	4641      	mov	r1, r8
 80160a8:	4620      	mov	r0, r4
 80160aa:	f7ff fce3 	bl	8015a74 <uxr_framing_read_transport>
 80160ae:	2800      	cmp	r0, #0
 80160b0:	f47f aef2 	bne.w	8015e98 <uxr_read_framed_msg+0x2fc>
 80160b4:	2301      	movs	r3, #1
 80160b6:	7023      	strb	r3, [r4, #0]
 80160b8:	e581      	b.n	8015bbe <uxr_read_framed_msg+0x22>
 80160ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80160bc:	9300      	str	r3, [sp, #0]
 80160be:	2301      	movs	r3, #1
 80160c0:	e7ee      	b.n	80160a0 <uxr_read_framed_msg+0x504>
 80160c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80160c4:	9300      	str	r3, [sp, #0]
 80160c6:	2303      	movs	r3, #3
 80160c8:	e7ea      	b.n	80160a0 <uxr_read_framed_msg+0x504>
 80160ca:	bf00      	nop

080160cc <uxr_stream_id>:
 80160cc:	2901      	cmp	r1, #1
 80160ce:	4684      	mov	ip, r0
 80160d0:	b500      	push	{lr}
 80160d2:	b083      	sub	sp, #12
 80160d4:	d01f      	beq.n	8016116 <uxr_stream_id+0x4a>
 80160d6:	2902      	cmp	r1, #2
 80160d8:	f04f 0e00 	mov.w	lr, #0
 80160dc:	d020      	beq.n	8016120 <uxr_stream_id+0x54>
 80160de:	2300      	movs	r3, #0
 80160e0:	2000      	movs	r0, #0
 80160e2:	f36e 0307 	bfi	r3, lr, #0, #8
 80160e6:	f36c 230f 	bfi	r3, ip, #8, #8
 80160ea:	f361 4317 	bfi	r3, r1, #16, #8
 80160ee:	f362 631f 	bfi	r3, r2, #24, #8
 80160f2:	fa5f fc83 	uxtb.w	ip, r3
 80160f6:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80160fa:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80160fe:	0e1b      	lsrs	r3, r3, #24
 8016100:	f36c 0007 	bfi	r0, ip, #0, #8
 8016104:	f361 200f 	bfi	r0, r1, #8, #8
 8016108:	f362 4017 	bfi	r0, r2, #16, #8
 801610c:	f363 601f 	bfi	r0, r3, #24, #8
 8016110:	b003      	add	sp, #12
 8016112:	f85d fb04 	ldr.w	pc, [sp], #4
 8016116:	f100 0e01 	add.w	lr, r0, #1
 801611a:	fa5f fe8e 	uxtb.w	lr, lr
 801611e:	e7de      	b.n	80160de <uxr_stream_id+0x12>
 8016120:	f080 0e80 	eor.w	lr, r0, #128	; 0x80
 8016124:	e7db      	b.n	80160de <uxr_stream_id+0x12>
 8016126:	bf00      	nop

08016128 <uxr_stream_id_from_raw>:
 8016128:	b082      	sub	sp, #8
 801612a:	b130      	cbz	r0, 801613a <uxr_stream_id_from_raw+0x12>
 801612c:	0603      	lsls	r3, r0, #24
 801612e:	d421      	bmi.n	8016174 <uxr_stream_id_from_raw+0x4c>
 8016130:	1e42      	subs	r2, r0, #1
 8016132:	f04f 0c01 	mov.w	ip, #1
 8016136:	b2d2      	uxtb	r2, r2
 8016138:	e001      	b.n	801613e <uxr_stream_id_from_raw+0x16>
 801613a:	4684      	mov	ip, r0
 801613c:	4602      	mov	r2, r0
 801613e:	2300      	movs	r3, #0
 8016140:	f360 0307 	bfi	r3, r0, #0, #8
 8016144:	2000      	movs	r0, #0
 8016146:	f362 230f 	bfi	r3, r2, #8, #8
 801614a:	f36c 4317 	bfi	r3, ip, #16, #8
 801614e:	f361 631f 	bfi	r3, r1, #24, #8
 8016152:	fa5f fc83 	uxtb.w	ip, r3
 8016156:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801615a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801615e:	0e1b      	lsrs	r3, r3, #24
 8016160:	f36c 0007 	bfi	r0, ip, #0, #8
 8016164:	f361 200f 	bfi	r0, r1, #8, #8
 8016168:	f362 4017 	bfi	r0, r2, #16, #8
 801616c:	f363 601f 	bfi	r0, r3, #24, #8
 8016170:	b002      	add	sp, #8
 8016172:	4770      	bx	lr
 8016174:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 8016178:	f04f 0c02 	mov.w	ip, #2
 801617c:	e7df      	b.n	801613e <uxr_stream_id_from_raw+0x16>
 801617e:	bf00      	nop

08016180 <uxr_init_stream_storage>:
 8016180:	2300      	movs	r3, #0
 8016182:	7403      	strb	r3, [r0, #16]
 8016184:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8016188:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 801618c:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8016190:	4770      	bx	lr
 8016192:	bf00      	nop

08016194 <uxr_reset_stream_storage>:
 8016194:	b570      	push	{r4, r5, r6, lr}
 8016196:	7c03      	ldrb	r3, [r0, #16]
 8016198:	4604      	mov	r4, r0
 801619a:	b14b      	cbz	r3, 80161b0 <uxr_reset_stream_storage+0x1c>
 801619c:	4606      	mov	r6, r0
 801619e:	2500      	movs	r5, #0
 80161a0:	4630      	mov	r0, r6
 80161a2:	3501      	adds	r5, #1
 80161a4:	f002 faf2 	bl	801878c <uxr_reset_output_best_effort_stream>
 80161a8:	7c23      	ldrb	r3, [r4, #16]
 80161aa:	3610      	adds	r6, #16
 80161ac:	42ab      	cmp	r3, r5
 80161ae:	d8f7      	bhi.n	80161a0 <uxr_reset_stream_storage+0xc>
 80161b0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80161b4:	b15b      	cbz	r3, 80161ce <uxr_reset_stream_storage+0x3a>
 80161b6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80161ba:	2500      	movs	r5, #0
 80161bc:	4630      	mov	r0, r6
 80161be:	3501      	adds	r5, #1
 80161c0:	f002 f8ea 	bl	8018398 <uxr_reset_input_best_effort_stream>
 80161c4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80161c8:	3602      	adds	r6, #2
 80161ca:	42ab      	cmp	r3, r5
 80161cc:	d8f6      	bhi.n	80161bc <uxr_reset_stream_storage+0x28>
 80161ce:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80161d2:	b15b      	cbz	r3, 80161ec <uxr_reset_stream_storage+0x58>
 80161d4:	f104 0618 	add.w	r6, r4, #24
 80161d8:	2500      	movs	r5, #0
 80161da:	4630      	mov	r0, r6
 80161dc:	3501      	adds	r5, #1
 80161de:	f002 fb83 	bl	80188e8 <uxr_reset_output_reliable_stream>
 80161e2:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80161e6:	3628      	adds	r6, #40	; 0x28
 80161e8:	42ab      	cmp	r3, r5
 80161ea:	d8f6      	bhi.n	80161da <uxr_reset_stream_storage+0x46>
 80161ec:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80161f0:	b15b      	cbz	r3, 801620a <uxr_reset_stream_storage+0x76>
 80161f2:	f104 0648 	add.w	r6, r4, #72	; 0x48
 80161f6:	2500      	movs	r5, #0
 80161f8:	4630      	mov	r0, r6
 80161fa:	3501      	adds	r5, #1
 80161fc:	f002 f938 	bl	8018470 <uxr_reset_input_reliable_stream>
 8016200:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8016204:	3618      	adds	r6, #24
 8016206:	42ab      	cmp	r3, r5
 8016208:	d8f6      	bhi.n	80161f8 <uxr_reset_stream_storage+0x64>
 801620a:	bd70      	pop	{r4, r5, r6, pc}

0801620c <uxr_add_output_best_effort_buffer>:
 801620c:	b510      	push	{r4, lr}
 801620e:	7c04      	ldrb	r4, [r0, #16]
 8016210:	b082      	sub	sp, #8
 8016212:	f104 0c01 	add.w	ip, r4, #1
 8016216:	f880 c010 	strb.w	ip, [r0, #16]
 801621a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 801621e:	f002 faab 	bl	8018778 <uxr_init_output_best_effort_stream>
 8016222:	2201      	movs	r2, #1
 8016224:	4620      	mov	r0, r4
 8016226:	4611      	mov	r1, r2
 8016228:	b002      	add	sp, #8
 801622a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801622e:	f7ff bf4d 	b.w	80160cc <uxr_stream_id>
 8016232:	bf00      	nop

08016234 <uxr_add_output_reliable_buffer>:
 8016234:	b510      	push	{r4, lr}
 8016236:	b084      	sub	sp, #16
 8016238:	4684      	mov	ip, r0
 801623a:	2028      	movs	r0, #40	; 0x28
 801623c:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8016240:	9400      	str	r4, [sp, #0]
 8016242:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 8016246:	fb00 c004 	mla	r0, r0, r4, ip
 801624a:	f104 0e01 	add.w	lr, r4, #1
 801624e:	3018      	adds	r0, #24
 8016250:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 8016254:	f002 fb10 	bl	8018878 <uxr_init_output_reliable_stream>
 8016258:	2201      	movs	r2, #1
 801625a:	2102      	movs	r1, #2
 801625c:	4620      	mov	r0, r4
 801625e:	b004      	add	sp, #16
 8016260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016264:	f7ff bf32 	b.w	80160cc <uxr_stream_id>

08016268 <uxr_add_input_best_effort_buffer>:
 8016268:	b510      	push	{r4, lr}
 801626a:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 801626e:	b082      	sub	sp, #8
 8016270:	1c62      	adds	r2, r4, #1
 8016272:	f104 0321 	add.w	r3, r4, #33	; 0x21
 8016276:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 801627a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801627e:	f002 f887 	bl	8018390 <uxr_init_input_best_effort_stream>
 8016282:	2200      	movs	r2, #0
 8016284:	2101      	movs	r1, #1
 8016286:	4620      	mov	r0, r4
 8016288:	b002      	add	sp, #8
 801628a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801628e:	f7ff bf1d 	b.w	80160cc <uxr_stream_id>
 8016292:	bf00      	nop

08016294 <uxr_add_input_reliable_buffer>:
 8016294:	b510      	push	{r4, lr}
 8016296:	b084      	sub	sp, #16
 8016298:	4684      	mov	ip, r0
 801629a:	2018      	movs	r0, #24
 801629c:	9c06      	ldr	r4, [sp, #24]
 801629e:	9400      	str	r4, [sp, #0]
 80162a0:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 80162a4:	fb00 c004 	mla	r0, r0, r4, ip
 80162a8:	f104 0e01 	add.w	lr, r4, #1
 80162ac:	3048      	adds	r0, #72	; 0x48
 80162ae:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 80162b2:	f002 f8b7 	bl	8018424 <uxr_init_input_reliable_stream>
 80162b6:	2200      	movs	r2, #0
 80162b8:	2102      	movs	r1, #2
 80162ba:	4620      	mov	r0, r4
 80162bc:	b004      	add	sp, #16
 80162be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80162c2:	f7ff bf03 	b.w	80160cc <uxr_stream_id>
 80162c6:	bf00      	nop

080162c8 <uxr_get_output_best_effort_stream>:
 80162c8:	7c03      	ldrb	r3, [r0, #16]
 80162ca:	428b      	cmp	r3, r1
 80162cc:	bf8c      	ite	hi
 80162ce:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 80162d2:	2000      	movls	r0, #0
 80162d4:	4770      	bx	lr
 80162d6:	bf00      	nop

080162d8 <uxr_get_output_reliable_stream>:
 80162d8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80162dc:	428b      	cmp	r3, r1
 80162de:	d904      	bls.n	80162ea <uxr_get_output_reliable_stream+0x12>
 80162e0:	2328      	movs	r3, #40	; 0x28
 80162e2:	fb03 0001 	mla	r0, r3, r1, r0
 80162e6:	3018      	adds	r0, #24
 80162e8:	4770      	bx	lr
 80162ea:	2000      	movs	r0, #0
 80162ec:	4770      	bx	lr
 80162ee:	bf00      	nop

080162f0 <uxr_get_input_best_effort_stream>:
 80162f0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80162f4:	428b      	cmp	r3, r1
 80162f6:	d903      	bls.n	8016300 <uxr_get_input_best_effort_stream+0x10>
 80162f8:	3121      	adds	r1, #33	; 0x21
 80162fa:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80162fe:	4770      	bx	lr
 8016300:	2000      	movs	r0, #0
 8016302:	4770      	bx	lr

08016304 <uxr_get_input_reliable_stream>:
 8016304:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8016308:	428b      	cmp	r3, r1
 801630a:	d904      	bls.n	8016316 <uxr_get_input_reliable_stream+0x12>
 801630c:	2318      	movs	r3, #24
 801630e:	fb03 0001 	mla	r0, r3, r1, r0
 8016312:	3048      	adds	r0, #72	; 0x48
 8016314:	4770      	bx	lr
 8016316:	2000      	movs	r0, #0
 8016318:	4770      	bx	lr
 801631a:	bf00      	nop

0801631c <uxr_output_streams_confirmed>:
 801631c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8016320:	b183      	cbz	r3, 8016344 <uxr_output_streams_confirmed+0x28>
 8016322:	b570      	push	{r4, r5, r6, lr}
 8016324:	4606      	mov	r6, r0
 8016326:	f100 0518 	add.w	r5, r0, #24
 801632a:	2400      	movs	r4, #0
 801632c:	e000      	b.n	8016330 <uxr_output_streams_confirmed+0x14>
 801632e:	b140      	cbz	r0, 8016342 <uxr_output_streams_confirmed+0x26>
 8016330:	4628      	mov	r0, r5
 8016332:	3401      	adds	r4, #1
 8016334:	f002 fd4c 	bl	8018dd0 <uxr_is_output_up_to_date>
 8016338:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 801633c:	3528      	adds	r5, #40	; 0x28
 801633e:	42a3      	cmp	r3, r4
 8016340:	d8f5      	bhi.n	801632e <uxr_output_streams_confirmed+0x12>
 8016342:	bd70      	pop	{r4, r5, r6, pc}
 8016344:	2001      	movs	r0, #1
 8016346:	4770      	bx	lr

08016348 <uxr_buffer_submessage_header>:
 8016348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801634a:	460e      	mov	r6, r1
 801634c:	2104      	movs	r1, #4
 801634e:	4604      	mov	r4, r0
 8016350:	4615      	mov	r5, r2
 8016352:	461f      	mov	r7, r3
 8016354:	f7f7 fdcc 	bl	800def0 <ucdr_align_to>
 8016358:	2301      	movs	r3, #1
 801635a:	4631      	mov	r1, r6
 801635c:	4620      	mov	r0, r4
 801635e:	ea47 0203 	orr.w	r2, r7, r3
 8016362:	7523      	strb	r3, [r4, #20]
 8016364:	462b      	mov	r3, r5
 8016366:	f000 fa29 	bl	80167bc <uxr_serialize_submessage_header>
 801636a:	4620      	mov	r0, r4
 801636c:	f7f7 fdd6 	bl	800df1c <ucdr_buffer_remaining>
 8016370:	42a8      	cmp	r0, r5
 8016372:	bf34      	ite	cc
 8016374:	2000      	movcc	r0, #0
 8016376:	2001      	movcs	r0, #1
 8016378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801637a:	bf00      	nop

0801637c <uxr_read_submessage_header>:
 801637c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016380:	4604      	mov	r4, r0
 8016382:	460d      	mov	r5, r1
 8016384:	2104      	movs	r1, #4
 8016386:	4616      	mov	r6, r2
 8016388:	4698      	mov	r8, r3
 801638a:	f7f7 fdb1 	bl	800def0 <ucdr_align_to>
 801638e:	4620      	mov	r0, r4
 8016390:	f7f7 fdc4 	bl	800df1c <ucdr_buffer_remaining>
 8016394:	2803      	cmp	r0, #3
 8016396:	bf8c      	ite	hi
 8016398:	2701      	movhi	r7, #1
 801639a:	2700      	movls	r7, #0
 801639c:	d802      	bhi.n	80163a4 <uxr_read_submessage_header+0x28>
 801639e:	4638      	mov	r0, r7
 80163a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163a4:	4633      	mov	r3, r6
 80163a6:	4642      	mov	r2, r8
 80163a8:	4620      	mov	r0, r4
 80163aa:	4629      	mov	r1, r5
 80163ac:	f000 fa1a 	bl	80167e4 <uxr_deserialize_submessage_header>
 80163b0:	f898 3000 	ldrb.w	r3, [r8]
 80163b4:	4638      	mov	r0, r7
 80163b6:	f003 0201 	and.w	r2, r3, #1
 80163ba:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80163be:	f888 3000 	strb.w	r3, [r8]
 80163c2:	7522      	strb	r2, [r4, #20]
 80163c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080163c8 <uxr_submessage_padding>:
 80163c8:	f010 0003 	ands.w	r0, r0, #3
 80163cc:	bf18      	it	ne
 80163ce:	f1c0 0004 	rsbne	r0, r0, #4
 80163d2:	4770      	bx	lr

080163d4 <uxr_millis>:
 80163d4:	b510      	push	{r4, lr}
 80163d6:	b084      	sub	sp, #16
 80163d8:	2001      	movs	r0, #1
 80163da:	4669      	mov	r1, sp
 80163dc:	f7eb f87c 	bl	80014d8 <clock_gettime>
 80163e0:	4908      	ldr	r1, [pc, #32]	; (8016404 <uxr_millis+0x30>)
 80163e2:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 80163e6:	fba0 0301 	umull	r0, r3, r0, r1
 80163ea:	1900      	adds	r0, r0, r4
 80163ec:	fb01 3102 	mla	r1, r1, r2, r3
 80163f0:	4a05      	ldr	r2, [pc, #20]	; (8016408 <uxr_millis+0x34>)
 80163f2:	f04f 0300 	mov.w	r3, #0
 80163f6:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80163fa:	f7e9 ff89 	bl	8000310 <__aeabi_ldivmod>
 80163fe:	b004      	add	sp, #16
 8016400:	bd10      	pop	{r4, pc}
 8016402:	bf00      	nop
 8016404:	3b9aca00 	.word	0x3b9aca00
 8016408:	000f4240 	.word	0x000f4240

0801640c <uxr_nanos>:
 801640c:	b510      	push	{r4, lr}
 801640e:	b084      	sub	sp, #16
 8016410:	2001      	movs	r0, #1
 8016412:	4669      	mov	r1, sp
 8016414:	f7eb f860 	bl	80014d8 <clock_gettime>
 8016418:	4a06      	ldr	r2, [pc, #24]	; (8016434 <uxr_nanos+0x28>)
 801641a:	9800      	ldr	r0, [sp, #0]
 801641c:	9902      	ldr	r1, [sp, #8]
 801641e:	fba0 0302 	umull	r0, r3, r0, r2
 8016422:	9c01      	ldr	r4, [sp, #4]
 8016424:	1840      	adds	r0, r0, r1
 8016426:	fb02 3304 	mla	r3, r2, r4, r3
 801642a:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 801642e:	b004      	add	sp, #16
 8016430:	bd10      	pop	{r4, pc}
 8016432:	bf00      	nop
 8016434:	3b9aca00 	.word	0x3b9aca00

08016438 <on_full_output_buffer_fragmented>:
 8016438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801643c:	460c      	mov	r4, r1
 801643e:	b08a      	sub	sp, #40	; 0x28
 8016440:	4606      	mov	r6, r0
 8016442:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 8016446:	f104 0008 	add.w	r0, r4, #8
 801644a:	f7ff ff45 	bl	80162d8 <uxr_get_output_reliable_stream>
 801644e:	4605      	mov	r5, r0
 8016450:	f002 fcc8 	bl	8018de4 <get_available_free_slots>
 8016454:	b968      	cbnz	r0, 8016472 <on_full_output_buffer_fragmented+0x3a>
 8016456:	4620      	mov	r0, r4
 8016458:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 801645c:	4798      	blx	r3
 801645e:	b918      	cbnz	r0, 8016468 <on_full_output_buffer_fragmented+0x30>
 8016460:	2001      	movs	r0, #1
 8016462:	b00a      	add	sp, #40	; 0x28
 8016464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016468:	4628      	mov	r0, r5
 801646a:	f002 fcbb 	bl	8018de4 <get_available_free_slots>
 801646e:	2800      	cmp	r0, #0
 8016470:	d0f6      	beq.n	8016460 <on_full_output_buffer_fragmented+0x28>
 8016472:	8929      	ldrh	r1, [r5, #8]
 8016474:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8016478:	89eb      	ldrh	r3, [r5, #14]
 801647a:	7b28      	ldrb	r0, [r5, #12]
 801647c:	686f      	ldr	r7, [r5, #4]
 801647e:	1a12      	subs	r2, r2, r0
 8016480:	fbb3 f0f1 	udiv	r0, r3, r1
 8016484:	fbb7 f7f1 	udiv	r7, r7, r1
 8016488:	fb01 3110 	mls	r1, r1, r0, r3
 801648c:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8016490:	b289      	uxth	r1, r1
 8016492:	fb07 f101 	mul.w	r1, r7, r1
 8016496:	3f04      	subs	r7, #4
 8016498:	443a      	add	r2, r7
 801649a:	3104      	adds	r1, #4
 801649c:	fa1f f882 	uxth.w	r8, r2
 80164a0:	463a      	mov	r2, r7
 80164a2:	eba3 0308 	sub.w	r3, r3, r8
 80164a6:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 80164aa:	682b      	ldr	r3, [r5, #0]
 80164ac:	4419      	add	r1, r3
 80164ae:	2300      	movs	r3, #0
 80164b0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80164b4:	9000      	str	r0, [sp, #0]
 80164b6:	a802      	add	r0, sp, #8
 80164b8:	f7f7 fcec 	bl	800de94 <ucdr_init_buffer_origin_offset>
 80164bc:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 80164c0:	f102 0308 	add.w	r3, r2, #8
 80164c4:	42bb      	cmp	r3, r7
 80164c6:	d927      	bls.n	8016518 <on_full_output_buffer_fragmented+0xe0>
 80164c8:	4642      	mov	r2, r8
 80164ca:	2300      	movs	r3, #0
 80164cc:	210d      	movs	r1, #13
 80164ce:	a802      	add	r0, sp, #8
 80164d0:	f7ff ff3a 	bl	8016348 <uxr_buffer_submessage_header>
 80164d4:	8929      	ldrh	r1, [r5, #8]
 80164d6:	89eb      	ldrh	r3, [r5, #14]
 80164d8:	686a      	ldr	r2, [r5, #4]
 80164da:	fbb3 f0f1 	udiv	r0, r3, r1
 80164de:	fbb2 f2f1 	udiv	r2, r2, r1
 80164e2:	fb01 3310 	mls	r3, r1, r0, r3
 80164e6:	b29b      	uxth	r3, r3
 80164e8:	fb02 f303 	mul.w	r3, r2, r3
 80164ec:	682a      	ldr	r2, [r5, #0]
 80164ee:	50d7      	str	r7, [r2, r3]
 80164f0:	2101      	movs	r1, #1
 80164f2:	89e8      	ldrh	r0, [r5, #14]
 80164f4:	f002 fc98 	bl	8018e28 <uxr_seq_num_add>
 80164f8:	9904      	ldr	r1, [sp, #16]
 80164fa:	9a03      	ldr	r2, [sp, #12]
 80164fc:	81e8      	strh	r0, [r5, #14]
 80164fe:	4630      	mov	r0, r6
 8016500:	1a52      	subs	r2, r2, r1
 8016502:	f7f7 fcd9 	bl	800deb8 <ucdr_init_buffer>
 8016506:	4630      	mov	r0, r6
 8016508:	4622      	mov	r2, r4
 801650a:	490f      	ldr	r1, [pc, #60]	; (8016548 <on_full_output_buffer_fragmented+0x110>)
 801650c:	f7f7 fca8 	bl	800de60 <ucdr_set_on_full_buffer_callback>
 8016510:	2000      	movs	r0, #0
 8016512:	b00a      	add	sp, #40	; 0x28
 8016514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016518:	b292      	uxth	r2, r2
 801651a:	2302      	movs	r3, #2
 801651c:	210d      	movs	r1, #13
 801651e:	a802      	add	r0, sp, #8
 8016520:	f7ff ff12 	bl	8016348 <uxr_buffer_submessage_header>
 8016524:	8928      	ldrh	r0, [r5, #8]
 8016526:	89eb      	ldrh	r3, [r5, #14]
 8016528:	6869      	ldr	r1, [r5, #4]
 801652a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 801652e:	fbb3 f7f0 	udiv	r7, r3, r0
 8016532:	fbb1 f1f0 	udiv	r1, r1, r0
 8016536:	fb00 3317 	mls	r3, r0, r7, r3
 801653a:	3208      	adds	r2, #8
 801653c:	b29b      	uxth	r3, r3
 801653e:	fb01 f303 	mul.w	r3, r1, r3
 8016542:	6829      	ldr	r1, [r5, #0]
 8016544:	50ca      	str	r2, [r1, r3]
 8016546:	e7d3      	b.n	80164f0 <on_full_output_buffer_fragmented+0xb8>
 8016548:	08016439 	.word	0x08016439

0801654c <uxr_prepare_output_stream>:
 801654c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801654e:	b087      	sub	sp, #28
 8016550:	2707      	movs	r7, #7
 8016552:	2500      	movs	r5, #0
 8016554:	461c      	mov	r4, r3
 8016556:	4606      	mov	r6, r0
 8016558:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801655c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801655e:	e9cd 7500 	strd	r7, r5, [sp]
 8016562:	3204      	adds	r2, #4
 8016564:	f7fe ffc8 	bl	80154f8 <uxr_prepare_stream_to_write_submessage>
 8016568:	f080 0201 	eor.w	r2, r0, #1
 801656c:	b2d2      	uxtb	r2, r2
 801656e:	75a2      	strb	r2, [r4, #22]
 8016570:	b112      	cbz	r2, 8016578 <uxr_prepare_output_stream+0x2c>
 8016572:	4628      	mov	r0, r5
 8016574:	b007      	add	sp, #28
 8016576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016578:	aa05      	add	r2, sp, #20
 801657a:	9902      	ldr	r1, [sp, #8]
 801657c:	4630      	mov	r0, r6
 801657e:	f7ff f8f7 	bl	8015770 <uxr_init_base_object_request>
 8016582:	a905      	add	r1, sp, #20
 8016584:	4605      	mov	r5, r0
 8016586:	4620      	mov	r0, r4
 8016588:	f000 fe7a 	bl	8017280 <uxr_serialize_WRITE_DATA_Payload_Data>
 801658c:	69a6      	ldr	r6, [r4, #24]
 801658e:	69e7      	ldr	r7, [r4, #28]
 8016590:	4620      	mov	r0, r4
 8016592:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8016596:	1a52      	subs	r2, r2, r1
 8016598:	f7f7 fc8e 	bl	800deb8 <ucdr_init_buffer>
 801659c:	4620      	mov	r0, r4
 801659e:	463a      	mov	r2, r7
 80165a0:	4631      	mov	r1, r6
 80165a2:	f7f7 fc5d 	bl	800de60 <ucdr_set_on_full_buffer_callback>
 80165a6:	4628      	mov	r0, r5
 80165a8:	b007      	add	sp, #28
 80165aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080165ac <uxr_prepare_output_stream_fragmented>:
 80165ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165b0:	b091      	sub	sp, #68	; 0x44
 80165b2:	4605      	mov	r5, r0
 80165b4:	3008      	adds	r0, #8
 80165b6:	461e      	mov	r6, r3
 80165b8:	9105      	str	r1, [sp, #20]
 80165ba:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80165be:	9204      	str	r2, [sp, #16]
 80165c0:	f7ff fe8a 	bl	80162d8 <uxr_get_output_reliable_stream>
 80165c4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80165c8:	2b01      	cmp	r3, #1
 80165ca:	f000 8093 	beq.w	80166f4 <uxr_prepare_output_stream_fragmented+0x148>
 80165ce:	4604      	mov	r4, r0
 80165d0:	2800      	cmp	r0, #0
 80165d2:	f000 808f 	beq.w	80166f4 <uxr_prepare_output_stream_fragmented+0x148>
 80165d6:	f002 fc05 	bl	8018de4 <get_available_free_slots>
 80165da:	2800      	cmp	r0, #0
 80165dc:	f000 8085 	beq.w	80166ea <uxr_prepare_output_stream_fragmented+0x13e>
 80165e0:	8923      	ldrh	r3, [r4, #8]
 80165e2:	89e7      	ldrh	r7, [r4, #14]
 80165e4:	6862      	ldr	r2, [r4, #4]
 80165e6:	fbb7 f9f3 	udiv	r9, r7, r3
 80165ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80165ee:	fb03 7919 	mls	r9, r3, r9, r7
 80165f2:	6823      	ldr	r3, [r4, #0]
 80165f4:	f1a2 0b04 	sub.w	fp, r2, #4
 80165f8:	9203      	str	r2, [sp, #12]
 80165fa:	fa1f f989 	uxth.w	r9, r9
 80165fe:	fb02 f909 	mul.w	r9, r2, r9
 8016602:	f109 0904 	add.w	r9, r9, #4
 8016606:	4499      	add	r9, r3
 8016608:	7b23      	ldrb	r3, [r4, #12]
 801660a:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801660e:	4543      	cmp	r3, r8
 8016610:	d37c      	bcc.n	801670c <uxr_prepare_output_stream_fragmented+0x160>
 8016612:	f1ab 0a04 	sub.w	sl, fp, #4
 8016616:	465a      	mov	r2, fp
 8016618:	4649      	mov	r1, r9
 801661a:	a808      	add	r0, sp, #32
 801661c:	ebaa 0a03 	sub.w	sl, sl, r3
 8016620:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016622:	f8cd 8000 	str.w	r8, [sp]
 8016626:	3308      	adds	r3, #8
 8016628:	fa1f fa8a 	uxth.w	sl, sl
 801662c:	9302      	str	r3, [sp, #8]
 801662e:	2300      	movs	r3, #0
 8016630:	f7f7 fc30 	bl	800de94 <ucdr_init_buffer_origin_offset>
 8016634:	9b02      	ldr	r3, [sp, #8]
 8016636:	4652      	mov	r2, sl
 8016638:	210d      	movs	r1, #13
 801663a:	455b      	cmp	r3, fp
 801663c:	bf34      	ite	cc
 801663e:	2302      	movcc	r3, #2
 8016640:	2300      	movcs	r3, #0
 8016642:	a808      	add	r0, sp, #32
 8016644:	f7ff fe80 	bl	8016348 <uxr_buffer_submessage_header>
 8016648:	8921      	ldrh	r1, [r4, #8]
 801664a:	6863      	ldr	r3, [r4, #4]
 801664c:	4638      	mov	r0, r7
 801664e:	fbb7 f2f1 	udiv	r2, r7, r1
 8016652:	fbb3 f3f1 	udiv	r3, r3, r1
 8016656:	fb01 7212 	mls	r2, r1, r2, r7
 801665a:	2101      	movs	r1, #1
 801665c:	b292      	uxth	r2, r2
 801665e:	fb02 f303 	mul.w	r3, r2, r3
 8016662:	6822      	ldr	r2, [r4, #0]
 8016664:	f842 b003 	str.w	fp, [r2, r3]
 8016668:	f002 fbde 	bl	8018e28 <uxr_seq_num_add>
 801666c:	9b03      	ldr	r3, [sp, #12]
 801666e:	f108 0104 	add.w	r1, r8, #4
 8016672:	4607      	mov	r7, r0
 8016674:	f1a3 0208 	sub.w	r2, r3, #8
 8016678:	4630      	mov	r0, r6
 801667a:	4449      	add	r1, r9
 801667c:	eba2 0208 	sub.w	r2, r2, r8
 8016680:	f7f7 fc1a 	bl	800deb8 <ucdr_init_buffer>
 8016684:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016686:	2107      	movs	r1, #7
 8016688:	81e7      	strh	r7, [r4, #14]
 801668a:	1d1a      	adds	r2, r3, #4
 801668c:	2300      	movs	r3, #0
 801668e:	4630      	mov	r0, r6
 8016690:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8016694:	bf28      	it	cs
 8016696:	461a      	movcs	r2, r3
 8016698:	b292      	uxth	r2, r2
 801669a:	f7ff fe55 	bl	8016348 <uxr_buffer_submessage_header>
 801669e:	aa07      	add	r2, sp, #28
 80166a0:	9904      	ldr	r1, [sp, #16]
 80166a2:	4628      	mov	r0, r5
 80166a4:	f7ff f864 	bl	8015770 <uxr_init_base_object_request>
 80166a8:	4604      	mov	r4, r0
 80166aa:	b320      	cbz	r0, 80166f6 <uxr_prepare_output_stream_fragmented+0x14a>
 80166ac:	a907      	add	r1, sp, #28
 80166ae:	4630      	mov	r0, r6
 80166b0:	f000 fde6 	bl	8017280 <uxr_serialize_WRITE_DATA_Payload_Data>
 80166b4:	4630      	mov	r0, r6
 80166b6:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80166ba:	1a52      	subs	r2, r2, r1
 80166bc:	f7f7 fbfc 	bl	800deb8 <ucdr_init_buffer>
 80166c0:	9b05      	ldr	r3, [sp, #20]
 80166c2:	9a02      	ldr	r2, [sp, #8]
 80166c4:	4630      	mov	r0, r6
 80166c6:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 80166ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80166cc:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 80166d0:	462a      	mov	r2, r5
 80166d2:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 80166d6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80166d8:	4918      	ldr	r1, [pc, #96]	; (801673c <uxr_prepare_output_stream_fragmented+0x190>)
 80166da:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 80166de:	f7f7 fbbf 	bl	800de60 <ucdr_set_on_full_buffer_callback>
 80166e2:	4620      	mov	r0, r4
 80166e4:	b011      	add	sp, #68	; 0x44
 80166e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166ea:	991c      	ldr	r1, [sp, #112]	; 0x70
 80166ec:	4628      	mov	r0, r5
 80166ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80166f0:	4798      	blx	r3
 80166f2:	b920      	cbnz	r0, 80166fe <uxr_prepare_output_stream_fragmented+0x152>
 80166f4:	2400      	movs	r4, #0
 80166f6:	4620      	mov	r0, r4
 80166f8:	b011      	add	sp, #68	; 0x44
 80166fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166fe:	4620      	mov	r0, r4
 8016700:	f002 fb70 	bl	8018de4 <get_available_free_slots>
 8016704:	2800      	cmp	r0, #0
 8016706:	f47f af6b 	bne.w	80165e0 <uxr_prepare_output_stream_fragmented+0x34>
 801670a:	e7f3      	b.n	80166f4 <uxr_prepare_output_stream_fragmented+0x148>
 801670c:	4638      	mov	r0, r7
 801670e:	2101      	movs	r1, #1
 8016710:	f002 fb8a 	bl	8018e28 <uxr_seq_num_add>
 8016714:	8922      	ldrh	r2, [r4, #8]
 8016716:	6863      	ldr	r3, [r4, #4]
 8016718:	4607      	mov	r7, r0
 801671a:	fbb3 f9f2 	udiv	r9, r3, r2
 801671e:	fbb0 f3f2 	udiv	r3, r0, r2
 8016722:	fb02 0313 	mls	r3, r2, r3, r0
 8016726:	b29b      	uxth	r3, r3
 8016728:	fb03 f909 	mul.w	r9, r3, r9
 801672c:	6823      	ldr	r3, [r4, #0]
 801672e:	f109 0904 	add.w	r9, r9, #4
 8016732:	4499      	add	r9, r3
 8016734:	7b23      	ldrb	r3, [r4, #12]
 8016736:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801673a:	e76a      	b.n	8016612 <uxr_prepare_output_stream_fragmented+0x66>
 801673c:	08016439 	.word	0x08016439

08016740 <uxr_serialize_message_header>:
 8016740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016742:	4616      	mov	r6, r2
 8016744:	b083      	sub	sp, #12
 8016746:	4604      	mov	r4, r0
 8016748:	460d      	mov	r5, r1
 801674a:	9301      	str	r3, [sp, #4]
 801674c:	9f08      	ldr	r7, [sp, #32]
 801674e:	f7f6 f949 	bl	800c9e4 <ucdr_serialize_uint8_t>
 8016752:	4631      	mov	r1, r6
 8016754:	4620      	mov	r0, r4
 8016756:	f7f6 f945 	bl	800c9e4 <ucdr_serialize_uint8_t>
 801675a:	9a01      	ldr	r2, [sp, #4]
 801675c:	2101      	movs	r1, #1
 801675e:	4620      	mov	r0, r4
 8016760:	f7f6 f9ec 	bl	800cb3c <ucdr_serialize_endian_uint16_t>
 8016764:	062b      	lsls	r3, r5, #24
 8016766:	d501      	bpl.n	801676c <uxr_serialize_message_header+0x2c>
 8016768:	b003      	add	sp, #12
 801676a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801676c:	2204      	movs	r2, #4
 801676e:	4639      	mov	r1, r7
 8016770:	4620      	mov	r0, r4
 8016772:	b003      	add	sp, #12
 8016774:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016778:	f7f6 b83a 	b.w	800c7f0 <ucdr_serialize_array_uint8_t>

0801677c <uxr_deserialize_message_header>:
 801677c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801677e:	4616      	mov	r6, r2
 8016780:	b083      	sub	sp, #12
 8016782:	4604      	mov	r4, r0
 8016784:	460d      	mov	r5, r1
 8016786:	9301      	str	r3, [sp, #4]
 8016788:	9f08      	ldr	r7, [sp, #32]
 801678a:	f7f6 f941 	bl	800ca10 <ucdr_deserialize_uint8_t>
 801678e:	4631      	mov	r1, r6
 8016790:	4620      	mov	r0, r4
 8016792:	f7f6 f93d 	bl	800ca10 <ucdr_deserialize_uint8_t>
 8016796:	9a01      	ldr	r2, [sp, #4]
 8016798:	2101      	movs	r1, #1
 801679a:	4620      	mov	r0, r4
 801679c:	f7f6 fac2 	bl	800cd24 <ucdr_deserialize_endian_uint16_t>
 80167a0:	f995 3000 	ldrsb.w	r3, [r5]
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	da01      	bge.n	80167ac <uxr_deserialize_message_header+0x30>
 80167a8:	b003      	add	sp, #12
 80167aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80167ac:	2204      	movs	r2, #4
 80167ae:	4639      	mov	r1, r7
 80167b0:	4620      	mov	r0, r4
 80167b2:	b003      	add	sp, #12
 80167b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80167b8:	f7f6 b87e 	b.w	800c8b8 <ucdr_deserialize_array_uint8_t>

080167bc <uxr_serialize_submessage_header>:
 80167bc:	b530      	push	{r4, r5, lr}
 80167be:	4615      	mov	r5, r2
 80167c0:	b083      	sub	sp, #12
 80167c2:	4604      	mov	r4, r0
 80167c4:	9301      	str	r3, [sp, #4]
 80167c6:	f7f6 f90d 	bl	800c9e4 <ucdr_serialize_uint8_t>
 80167ca:	4629      	mov	r1, r5
 80167cc:	4620      	mov	r0, r4
 80167ce:	f7f6 f909 	bl	800c9e4 <ucdr_serialize_uint8_t>
 80167d2:	9a01      	ldr	r2, [sp, #4]
 80167d4:	2101      	movs	r1, #1
 80167d6:	4620      	mov	r0, r4
 80167d8:	b003      	add	sp, #12
 80167da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80167de:	f7f6 b9ad 	b.w	800cb3c <ucdr_serialize_endian_uint16_t>
 80167e2:	bf00      	nop

080167e4 <uxr_deserialize_submessage_header>:
 80167e4:	b530      	push	{r4, r5, lr}
 80167e6:	4615      	mov	r5, r2
 80167e8:	b083      	sub	sp, #12
 80167ea:	4604      	mov	r4, r0
 80167ec:	9301      	str	r3, [sp, #4]
 80167ee:	f7f6 f90f 	bl	800ca10 <ucdr_deserialize_uint8_t>
 80167f2:	4629      	mov	r1, r5
 80167f4:	4620      	mov	r0, r4
 80167f6:	f7f6 f90b 	bl	800ca10 <ucdr_deserialize_uint8_t>
 80167fa:	9a01      	ldr	r2, [sp, #4]
 80167fc:	2101      	movs	r1, #1
 80167fe:	4620      	mov	r0, r4
 8016800:	b003      	add	sp, #12
 8016802:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016806:	f7f6 ba8d 	b.w	800cd24 <ucdr_deserialize_endian_uint16_t>
 801680a:	bf00      	nop

0801680c <uxr_serialize_CLIENT_Representation>:
 801680c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016810:	2204      	movs	r2, #4
 8016812:	460e      	mov	r6, r1
 8016814:	4605      	mov	r5, r0
 8016816:	f7f5 ffeb 	bl	800c7f0 <ucdr_serialize_array_uint8_t>
 801681a:	4607      	mov	r7, r0
 801681c:	2202      	movs	r2, #2
 801681e:	1d31      	adds	r1, r6, #4
 8016820:	4628      	mov	r0, r5
 8016822:	f7f5 ffe5 	bl	800c7f0 <ucdr_serialize_array_uint8_t>
 8016826:	4038      	ands	r0, r7
 8016828:	2202      	movs	r2, #2
 801682a:	1db1      	adds	r1, r6, #6
 801682c:	b2c7      	uxtb	r7, r0
 801682e:	4628      	mov	r0, r5
 8016830:	f7f5 ffde 	bl	800c7f0 <ucdr_serialize_array_uint8_t>
 8016834:	2204      	movs	r2, #4
 8016836:	4007      	ands	r7, r0
 8016838:	f106 0108 	add.w	r1, r6, #8
 801683c:	4628      	mov	r0, r5
 801683e:	f7f5 ffd7 	bl	800c7f0 <ucdr_serialize_array_uint8_t>
 8016842:	4007      	ands	r7, r0
 8016844:	7b31      	ldrb	r1, [r6, #12]
 8016846:	4628      	mov	r0, r5
 8016848:	f7f6 f8cc 	bl	800c9e4 <ucdr_serialize_uint8_t>
 801684c:	7b71      	ldrb	r1, [r6, #13]
 801684e:	4007      	ands	r7, r0
 8016850:	4628      	mov	r0, r5
 8016852:	f7f6 f899 	bl	800c988 <ucdr_serialize_bool>
 8016856:	7b73      	ldrb	r3, [r6, #13]
 8016858:	ea07 0800 	and.w	r8, r7, r0
 801685c:	b93b      	cbnz	r3, 801686e <uxr_serialize_CLIENT_Representation+0x62>
 801685e:	8bb1      	ldrh	r1, [r6, #28]
 8016860:	4628      	mov	r0, r5
 8016862:	f7f6 f8eb 	bl	800ca3c <ucdr_serialize_uint16_t>
 8016866:	ea08 0000 	and.w	r0, r8, r0
 801686a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801686e:	6931      	ldr	r1, [r6, #16]
 8016870:	4628      	mov	r0, r5
 8016872:	f7f6 facd 	bl	800ce10 <ucdr_serialize_uint32_t>
 8016876:	6933      	ldr	r3, [r6, #16]
 8016878:	b1e3      	cbz	r3, 80168b4 <uxr_serialize_CLIENT_Representation+0xa8>
 801687a:	b1c0      	cbz	r0, 80168ae <uxr_serialize_CLIENT_Representation+0xa2>
 801687c:	4637      	mov	r7, r6
 801687e:	f04f 0900 	mov.w	r9, #0
 8016882:	e000      	b.n	8016886 <uxr_serialize_CLIENT_Representation+0x7a>
 8016884:	b19c      	cbz	r4, 80168ae <uxr_serialize_CLIENT_Representation+0xa2>
 8016886:	6979      	ldr	r1, [r7, #20]
 8016888:	4628      	mov	r0, r5
 801688a:	f001 fd69 	bl	8018360 <ucdr_serialize_string>
 801688e:	69b9      	ldr	r1, [r7, #24]
 8016890:	4604      	mov	r4, r0
 8016892:	4628      	mov	r0, r5
 8016894:	f001 fd64 	bl	8018360 <ucdr_serialize_string>
 8016898:	f109 0901 	add.w	r9, r9, #1
 801689c:	6933      	ldr	r3, [r6, #16]
 801689e:	4004      	ands	r4, r0
 80168a0:	3708      	adds	r7, #8
 80168a2:	4599      	cmp	r9, r3
 80168a4:	b2e4      	uxtb	r4, r4
 80168a6:	d3ed      	bcc.n	8016884 <uxr_serialize_CLIENT_Representation+0x78>
 80168a8:	ea08 0804 	and.w	r8, r8, r4
 80168ac:	e7d7      	b.n	801685e <uxr_serialize_CLIENT_Representation+0x52>
 80168ae:	f04f 0800 	mov.w	r8, #0
 80168b2:	e7d4      	b.n	801685e <uxr_serialize_CLIENT_Representation+0x52>
 80168b4:	ea08 0800 	and.w	r8, r8, r0
 80168b8:	e7d1      	b.n	801685e <uxr_serialize_CLIENT_Representation+0x52>
 80168ba:	bf00      	nop

080168bc <uxr_deserialize_CLIENT_Representation>:
 80168bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80168c0:	2204      	movs	r2, #4
 80168c2:	460c      	mov	r4, r1
 80168c4:	4605      	mov	r5, r0
 80168c6:	f7f5 fff7 	bl	800c8b8 <ucdr_deserialize_array_uint8_t>
 80168ca:	4607      	mov	r7, r0
 80168cc:	2202      	movs	r2, #2
 80168ce:	1d21      	adds	r1, r4, #4
 80168d0:	4628      	mov	r0, r5
 80168d2:	f7f5 fff1 	bl	800c8b8 <ucdr_deserialize_array_uint8_t>
 80168d6:	4038      	ands	r0, r7
 80168d8:	2202      	movs	r2, #2
 80168da:	1da1      	adds	r1, r4, #6
 80168dc:	b2c6      	uxtb	r6, r0
 80168de:	4628      	mov	r0, r5
 80168e0:	f7f5 ffea 	bl	800c8b8 <ucdr_deserialize_array_uint8_t>
 80168e4:	2204      	movs	r2, #4
 80168e6:	4006      	ands	r6, r0
 80168e8:	f104 0108 	add.w	r1, r4, #8
 80168ec:	4628      	mov	r0, r5
 80168ee:	f7f5 ffe3 	bl	800c8b8 <ucdr_deserialize_array_uint8_t>
 80168f2:	4006      	ands	r6, r0
 80168f4:	f104 010c 	add.w	r1, r4, #12
 80168f8:	4628      	mov	r0, r5
 80168fa:	f7f6 f889 	bl	800ca10 <ucdr_deserialize_uint8_t>
 80168fe:	f104 010d 	add.w	r1, r4, #13
 8016902:	ea06 0700 	and.w	r7, r6, r0
 8016906:	4628      	mov	r0, r5
 8016908:	f7f6 f854 	bl	800c9b4 <ucdr_deserialize_bool>
 801690c:	7b63      	ldrb	r3, [r4, #13]
 801690e:	4007      	ands	r7, r0
 8016910:	b93b      	cbnz	r3, 8016922 <uxr_deserialize_CLIENT_Representation+0x66>
 8016912:	f104 011c 	add.w	r1, r4, #28
 8016916:	4628      	mov	r0, r5
 8016918:	f7f6 f990 	bl	800cc3c <ucdr_deserialize_uint16_t>
 801691c:	4038      	ands	r0, r7
 801691e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016922:	f104 0110 	add.w	r1, r4, #16
 8016926:	4628      	mov	r0, r5
 8016928:	f7f6 fba2 	bl	800d070 <ucdr_deserialize_uint32_t>
 801692c:	6923      	ldr	r3, [r4, #16]
 801692e:	2b01      	cmp	r3, #1
 8016930:	d903      	bls.n	801693a <uxr_deserialize_CLIENT_Representation+0x7e>
 8016932:	2301      	movs	r3, #1
 8016934:	2700      	movs	r7, #0
 8016936:	75ab      	strb	r3, [r5, #22]
 8016938:	e7eb      	b.n	8016912 <uxr_deserialize_CLIENT_Representation+0x56>
 801693a:	b30b      	cbz	r3, 8016980 <uxr_deserialize_CLIENT_Representation+0xc4>
 801693c:	b1f0      	cbz	r0, 801697c <uxr_deserialize_CLIENT_Representation+0xc0>
 801693e:	46a0      	mov	r8, r4
 8016940:	f04f 0900 	mov.w	r9, #0
 8016944:	e000      	b.n	8016948 <uxr_deserialize_CLIENT_Representation+0x8c>
 8016946:	b1ce      	cbz	r6, 801697c <uxr_deserialize_CLIENT_Representation+0xc0>
 8016948:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801694c:	f108 0808 	add.w	r8, r8, #8
 8016950:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016954:	4628      	mov	r0, r5
 8016956:	f001 fd13 	bl	8018380 <ucdr_deserialize_string>
 801695a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801695e:	4606      	mov	r6, r0
 8016960:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016964:	4628      	mov	r0, r5
 8016966:	f109 0901 	add.w	r9, r9, #1
 801696a:	f001 fd09 	bl	8018380 <ucdr_deserialize_string>
 801696e:	6923      	ldr	r3, [r4, #16]
 8016970:	4006      	ands	r6, r0
 8016972:	4599      	cmp	r9, r3
 8016974:	b2f6      	uxtb	r6, r6
 8016976:	d3e6      	bcc.n	8016946 <uxr_deserialize_CLIENT_Representation+0x8a>
 8016978:	4037      	ands	r7, r6
 801697a:	e7ca      	b.n	8016912 <uxr_deserialize_CLIENT_Representation+0x56>
 801697c:	2700      	movs	r7, #0
 801697e:	e7c8      	b.n	8016912 <uxr_deserialize_CLIENT_Representation+0x56>
 8016980:	4007      	ands	r7, r0
 8016982:	e7c6      	b.n	8016912 <uxr_deserialize_CLIENT_Representation+0x56>

08016984 <uxr_serialize_AGENT_Representation>:
 8016984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016988:	2204      	movs	r2, #4
 801698a:	460f      	mov	r7, r1
 801698c:	4605      	mov	r5, r0
 801698e:	f7f5 ff2f 	bl	800c7f0 <ucdr_serialize_array_uint8_t>
 8016992:	4604      	mov	r4, r0
 8016994:	2202      	movs	r2, #2
 8016996:	1d39      	adds	r1, r7, #4
 8016998:	4628      	mov	r0, r5
 801699a:	f7f5 ff29 	bl	800c7f0 <ucdr_serialize_array_uint8_t>
 801699e:	4020      	ands	r0, r4
 80169a0:	2202      	movs	r2, #2
 80169a2:	1db9      	adds	r1, r7, #6
 80169a4:	b2c4      	uxtb	r4, r0
 80169a6:	4628      	mov	r0, r5
 80169a8:	f7f5 ff22 	bl	800c7f0 <ucdr_serialize_array_uint8_t>
 80169ac:	7a39      	ldrb	r1, [r7, #8]
 80169ae:	4004      	ands	r4, r0
 80169b0:	4628      	mov	r0, r5
 80169b2:	f7f5 ffe9 	bl	800c988 <ucdr_serialize_bool>
 80169b6:	7a3b      	ldrb	r3, [r7, #8]
 80169b8:	ea00 0804 	and.w	r8, r0, r4
 80169bc:	b913      	cbnz	r3, 80169c4 <uxr_serialize_AGENT_Representation+0x40>
 80169be:	4640      	mov	r0, r8
 80169c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80169c4:	68f9      	ldr	r1, [r7, #12]
 80169c6:	4628      	mov	r0, r5
 80169c8:	f7f6 fa22 	bl	800ce10 <ucdr_serialize_uint32_t>
 80169cc:	68fb      	ldr	r3, [r7, #12]
 80169ce:	b303      	cbz	r3, 8016a12 <uxr_serialize_AGENT_Representation+0x8e>
 80169d0:	b1d0      	cbz	r0, 8016a08 <uxr_serialize_AGENT_Representation+0x84>
 80169d2:	463e      	mov	r6, r7
 80169d4:	f04f 0900 	mov.w	r9, #0
 80169d8:	e000      	b.n	80169dc <uxr_serialize_AGENT_Representation+0x58>
 80169da:	b1ac      	cbz	r4, 8016a08 <uxr_serialize_AGENT_Representation+0x84>
 80169dc:	6931      	ldr	r1, [r6, #16]
 80169de:	4628      	mov	r0, r5
 80169e0:	f001 fcbe 	bl	8018360 <ucdr_serialize_string>
 80169e4:	6971      	ldr	r1, [r6, #20]
 80169e6:	4604      	mov	r4, r0
 80169e8:	4628      	mov	r0, r5
 80169ea:	f001 fcb9 	bl	8018360 <ucdr_serialize_string>
 80169ee:	f109 0901 	add.w	r9, r9, #1
 80169f2:	68fb      	ldr	r3, [r7, #12]
 80169f4:	4004      	ands	r4, r0
 80169f6:	3608      	adds	r6, #8
 80169f8:	4599      	cmp	r9, r3
 80169fa:	b2e4      	uxtb	r4, r4
 80169fc:	d3ed      	bcc.n	80169da <uxr_serialize_AGENT_Representation+0x56>
 80169fe:	ea08 0804 	and.w	r8, r8, r4
 8016a02:	4640      	mov	r0, r8
 8016a04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016a08:	f04f 0800 	mov.w	r8, #0
 8016a0c:	4640      	mov	r0, r8
 8016a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016a12:	ea08 0800 	and.w	r8, r8, r0
 8016a16:	e7d2      	b.n	80169be <uxr_serialize_AGENT_Representation+0x3a>

08016a18 <uxr_serialize_DATAWRITER_Representation>:
 8016a18:	b570      	push	{r4, r5, r6, lr}
 8016a1a:	460d      	mov	r5, r1
 8016a1c:	7809      	ldrb	r1, [r1, #0]
 8016a1e:	4606      	mov	r6, r0
 8016a20:	f7f5 ffe0 	bl	800c9e4 <ucdr_serialize_uint8_t>
 8016a24:	4604      	mov	r4, r0
 8016a26:	b130      	cbz	r0, 8016a36 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8016a28:	782b      	ldrb	r3, [r5, #0]
 8016a2a:	2b02      	cmp	r3, #2
 8016a2c:	d00c      	beq.n	8016a48 <uxr_serialize_DATAWRITER_Representation+0x30>
 8016a2e:	2b03      	cmp	r3, #3
 8016a30:	d010      	beq.n	8016a54 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8016a32:	2b01      	cmp	r3, #1
 8016a34:	d008      	beq.n	8016a48 <uxr_serialize_DATAWRITER_Representation+0x30>
 8016a36:	2202      	movs	r2, #2
 8016a38:	f505 7102 	add.w	r1, r5, #520	; 0x208
 8016a3c:	4630      	mov	r0, r6
 8016a3e:	f7f5 fed7 	bl	800c7f0 <ucdr_serialize_array_uint8_t>
 8016a42:	4020      	ands	r0, r4
 8016a44:	b2c0      	uxtb	r0, r0
 8016a46:	bd70      	pop	{r4, r5, r6, pc}
 8016a48:	6869      	ldr	r1, [r5, #4]
 8016a4a:	4630      	mov	r0, r6
 8016a4c:	f001 fc88 	bl	8018360 <ucdr_serialize_string>
 8016a50:	4604      	mov	r4, r0
 8016a52:	e7f0      	b.n	8016a36 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8016a54:	4629      	mov	r1, r5
 8016a56:	4630      	mov	r0, r6
 8016a58:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8016a5c:	3104      	adds	r1, #4
 8016a5e:	f7f7 facb 	bl	800dff8 <ucdr_serialize_sequence_uint8_t>
 8016a62:	4604      	mov	r4, r0
 8016a64:	e7e7      	b.n	8016a36 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8016a66:	bf00      	nop

08016a68 <uxr_serialize_ObjectVariant.part.0>:
 8016a68:	b570      	push	{r4, r5, r6, lr}
 8016a6a:	780b      	ldrb	r3, [r1, #0]
 8016a6c:	460c      	mov	r4, r1
 8016a6e:	4605      	mov	r5, r0
 8016a70:	3b01      	subs	r3, #1
 8016a72:	2b0d      	cmp	r3, #13
 8016a74:	d854      	bhi.n	8016b20 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8016a76:	e8df f003 	tbb	[pc, r3]
 8016a7a:	0730      	.short	0x0730
 8016a7c:	07071b1b 	.word	0x07071b1b
 8016a80:	0c530707 	.word	0x0c530707
 8016a84:	494e0c0c 	.word	0x494e0c0c
 8016a88:	3104      	adds	r1, #4
 8016a8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016a8e:	f7ff bfc3 	b.w	8016a18 <uxr_serialize_DATAWRITER_Representation>
 8016a92:	7909      	ldrb	r1, [r1, #4]
 8016a94:	f7f5 ffa6 	bl	800c9e4 <ucdr_serialize_uint8_t>
 8016a98:	b1e8      	cbz	r0, 8016ad6 <uxr_serialize_ObjectVariant.part.0+0x6e>
 8016a9a:	7923      	ldrb	r3, [r4, #4]
 8016a9c:	2b01      	cmp	r3, #1
 8016a9e:	d001      	beq.n	8016aa4 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8016aa0:	2b02      	cmp	r3, #2
 8016aa2:	d13d      	bne.n	8016b20 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8016aa4:	68a1      	ldr	r1, [r4, #8]
 8016aa6:	4628      	mov	r0, r5
 8016aa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016aac:	f001 bc58 	b.w	8018360 <ucdr_serialize_string>
 8016ab0:	7909      	ldrb	r1, [r1, #4]
 8016ab2:	f7f5 ff97 	bl	800c9e4 <ucdr_serialize_uint8_t>
 8016ab6:	4606      	mov	r6, r0
 8016ab8:	b120      	cbz	r0, 8016ac4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8016aba:	7923      	ldrb	r3, [r4, #4]
 8016abc:	2b02      	cmp	r3, #2
 8016abe:	d039      	beq.n	8016b34 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8016ac0:	2b03      	cmp	r3, #3
 8016ac2:	d02f      	beq.n	8016b24 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8016ac4:	2202      	movs	r2, #2
 8016ac6:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8016aca:	4628      	mov	r0, r5
 8016acc:	f7f5 fe90 	bl	800c7f0 <ucdr_serialize_array_uint8_t>
 8016ad0:	4030      	ands	r0, r6
 8016ad2:	b2c0      	uxtb	r0, r0
 8016ad4:	bd70      	pop	{r4, r5, r6, pc}
 8016ad6:	2000      	movs	r0, #0
 8016ad8:	bd70      	pop	{r4, r5, r6, pc}
 8016ada:	7909      	ldrb	r1, [r1, #4]
 8016adc:	f7f5 ff82 	bl	800c9e4 <ucdr_serialize_uint8_t>
 8016ae0:	4606      	mov	r6, r0
 8016ae2:	b158      	cbz	r0, 8016afc <uxr_serialize_ObjectVariant.part.0+0x94>
 8016ae4:	7923      	ldrb	r3, [r4, #4]
 8016ae6:	2b02      	cmp	r3, #2
 8016ae8:	d003      	beq.n	8016af2 <uxr_serialize_ObjectVariant.part.0+0x8a>
 8016aea:	2b03      	cmp	r3, #3
 8016aec:	d028      	beq.n	8016b40 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8016aee:	2b01      	cmp	r3, #1
 8016af0:	d104      	bne.n	8016afc <uxr_serialize_ObjectVariant.part.0+0x94>
 8016af2:	68a1      	ldr	r1, [r4, #8]
 8016af4:	4628      	mov	r0, r5
 8016af6:	f001 fc33 	bl	8018360 <ucdr_serialize_string>
 8016afa:	4606      	mov	r6, r0
 8016afc:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 8016b00:	4628      	mov	r0, r5
 8016b02:	f7f6 fcab 	bl	800d45c <ucdr_serialize_int16_t>
 8016b06:	4030      	ands	r0, r6
 8016b08:	b2c0      	uxtb	r0, r0
 8016b0a:	bd70      	pop	{r4, r5, r6, pc}
 8016b0c:	3104      	adds	r1, #4
 8016b0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016b12:	f7ff be7b 	b.w	801680c <uxr_serialize_CLIENT_Representation>
 8016b16:	3104      	adds	r1, #4
 8016b18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016b1c:	f7ff bf32 	b.w	8016984 <uxr_serialize_AGENT_Representation>
 8016b20:	2001      	movs	r0, #1
 8016b22:	bd70      	pop	{r4, r5, r6, pc}
 8016b24:	68a2      	ldr	r2, [r4, #8]
 8016b26:	f104 010c 	add.w	r1, r4, #12
 8016b2a:	4628      	mov	r0, r5
 8016b2c:	f7f7 fa64 	bl	800dff8 <ucdr_serialize_sequence_uint8_t>
 8016b30:	4606      	mov	r6, r0
 8016b32:	e7c7      	b.n	8016ac4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8016b34:	68a1      	ldr	r1, [r4, #8]
 8016b36:	4628      	mov	r0, r5
 8016b38:	f001 fc12 	bl	8018360 <ucdr_serialize_string>
 8016b3c:	4606      	mov	r6, r0
 8016b3e:	e7c1      	b.n	8016ac4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8016b40:	68a2      	ldr	r2, [r4, #8]
 8016b42:	f104 010c 	add.w	r1, r4, #12
 8016b46:	4628      	mov	r0, r5
 8016b48:	f7f7 fa56 	bl	800dff8 <ucdr_serialize_sequence_uint8_t>
 8016b4c:	4606      	mov	r6, r0
 8016b4e:	e7d5      	b.n	8016afc <uxr_serialize_ObjectVariant.part.0+0x94>

08016b50 <uxr_deserialize_DATAWRITER_Representation>:
 8016b50:	b570      	push	{r4, r5, r6, lr}
 8016b52:	4606      	mov	r6, r0
 8016b54:	460d      	mov	r5, r1
 8016b56:	f7f5 ff5b 	bl	800ca10 <ucdr_deserialize_uint8_t>
 8016b5a:	4604      	mov	r4, r0
 8016b5c:	b130      	cbz	r0, 8016b6c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8016b5e:	782b      	ldrb	r3, [r5, #0]
 8016b60:	2b02      	cmp	r3, #2
 8016b62:	d00c      	beq.n	8016b7e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8016b64:	2b03      	cmp	r3, #3
 8016b66:	d012      	beq.n	8016b8e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8016b68:	2b01      	cmp	r3, #1
 8016b6a:	d008      	beq.n	8016b7e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8016b6c:	2202      	movs	r2, #2
 8016b6e:	f505 7102 	add.w	r1, r5, #520	; 0x208
 8016b72:	4630      	mov	r0, r6
 8016b74:	f7f5 fea0 	bl	800c8b8 <ucdr_deserialize_array_uint8_t>
 8016b78:	4020      	ands	r0, r4
 8016b7a:	b2c0      	uxtb	r0, r0
 8016b7c:	bd70      	pop	{r4, r5, r6, pc}
 8016b7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016b82:	6869      	ldr	r1, [r5, #4]
 8016b84:	4630      	mov	r0, r6
 8016b86:	f001 fbfb 	bl	8018380 <ucdr_deserialize_string>
 8016b8a:	4604      	mov	r4, r0
 8016b8c:	e7ee      	b.n	8016b6c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8016b8e:	1d2b      	adds	r3, r5, #4
 8016b90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016b94:	f105 0108 	add.w	r1, r5, #8
 8016b98:	4630      	mov	r0, r6
 8016b9a:	f7f7 fa3f 	bl	800e01c <ucdr_deserialize_sequence_uint8_t>
 8016b9e:	4604      	mov	r4, r0
 8016ba0:	e7e4      	b.n	8016b6c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8016ba2:	bf00      	nop

08016ba4 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8016ba4:	b570      	push	{r4, r5, r6, lr}
 8016ba6:	460d      	mov	r5, r1
 8016ba8:	7809      	ldrb	r1, [r1, #0]
 8016baa:	4606      	mov	r6, r0
 8016bac:	f7f5 feec 	bl	800c988 <ucdr_serialize_bool>
 8016bb0:	782b      	ldrb	r3, [r5, #0]
 8016bb2:	4604      	mov	r4, r0
 8016bb4:	b94b      	cbnz	r3, 8016bca <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8016bb6:	7a29      	ldrb	r1, [r5, #8]
 8016bb8:	4630      	mov	r0, r6
 8016bba:	f7f5 fee5 	bl	800c988 <ucdr_serialize_bool>
 8016bbe:	7a2b      	ldrb	r3, [r5, #8]
 8016bc0:	4004      	ands	r4, r0
 8016bc2:	b2e4      	uxtb	r4, r4
 8016bc4:	b943      	cbnz	r3, 8016bd8 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8016bc6:	4620      	mov	r0, r4
 8016bc8:	bd70      	pop	{r4, r5, r6, pc}
 8016bca:	6869      	ldr	r1, [r5, #4]
 8016bcc:	4630      	mov	r0, r6
 8016bce:	f001 fbc7 	bl	8018360 <ucdr_serialize_string>
 8016bd2:	4004      	ands	r4, r0
 8016bd4:	b2e4      	uxtb	r4, r4
 8016bd6:	e7ee      	b.n	8016bb6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8016bd8:	68e9      	ldr	r1, [r5, #12]
 8016bda:	4630      	mov	r0, r6
 8016bdc:	f001 fbc0 	bl	8018360 <ucdr_serialize_string>
 8016be0:	4004      	ands	r4, r0
 8016be2:	4620      	mov	r0, r4
 8016be4:	bd70      	pop	{r4, r5, r6, pc}
 8016be6:	bf00      	nop

08016be8 <uxr_serialize_OBJK_Replier_Binary>:
 8016be8:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 8016bec:	460f      	mov	r7, r1
 8016bee:	4680      	mov	r8, r0
 8016bf0:	6809      	ldr	r1, [r1, #0]
 8016bf2:	f001 fbb5 	bl	8018360 <ucdr_serialize_string>
 8016bf6:	4605      	mov	r5, r0
 8016bf8:	6879      	ldr	r1, [r7, #4]
 8016bfa:	4640      	mov	r0, r8
 8016bfc:	f001 fbb0 	bl	8018360 <ucdr_serialize_string>
 8016c00:	4005      	ands	r5, r0
 8016c02:	68b9      	ldr	r1, [r7, #8]
 8016c04:	4640      	mov	r0, r8
 8016c06:	b2ec      	uxtb	r4, r5
 8016c08:	f001 fbaa 	bl	8018360 <ucdr_serialize_string>
 8016c0c:	7b39      	ldrb	r1, [r7, #12]
 8016c0e:	4004      	ands	r4, r0
 8016c10:	4640      	mov	r0, r8
 8016c12:	f7f5 feb9 	bl	800c988 <ucdr_serialize_bool>
 8016c16:	7b3b      	ldrb	r3, [r7, #12]
 8016c18:	4004      	ands	r4, r0
 8016c1a:	b94b      	cbnz	r3, 8016c30 <uxr_serialize_OBJK_Replier_Binary+0x48>
 8016c1c:	7d39      	ldrb	r1, [r7, #20]
 8016c1e:	4640      	mov	r0, r8
 8016c20:	f7f5 feb2 	bl	800c988 <ucdr_serialize_bool>
 8016c24:	7d3b      	ldrb	r3, [r7, #20]
 8016c26:	4004      	ands	r4, r0
 8016c28:	b943      	cbnz	r3, 8016c3c <uxr_serialize_OBJK_Replier_Binary+0x54>
 8016c2a:	4620      	mov	r0, r4
 8016c2c:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8016c30:	6939      	ldr	r1, [r7, #16]
 8016c32:	4640      	mov	r0, r8
 8016c34:	f001 fb94 	bl	8018360 <ucdr_serialize_string>
 8016c38:	4004      	ands	r4, r0
 8016c3a:	e7ef      	b.n	8016c1c <uxr_serialize_OBJK_Replier_Binary+0x34>
 8016c3c:	69b9      	ldr	r1, [r7, #24]
 8016c3e:	4640      	mov	r0, r8
 8016c40:	f001 fb8e 	bl	8018360 <ucdr_serialize_string>
 8016c44:	4004      	ands	r4, r0
 8016c46:	b2e4      	uxtb	r4, r4
 8016c48:	4620      	mov	r0, r4
 8016c4a:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8016c4e:	bf00      	nop

08016c50 <uxr_deserialize_ObjectVariant>:
 8016c50:	b570      	push	{r4, r5, r6, lr}
 8016c52:	4605      	mov	r5, r0
 8016c54:	460e      	mov	r6, r1
 8016c56:	f7f5 fedb 	bl	800ca10 <ucdr_deserialize_uint8_t>
 8016c5a:	b168      	cbz	r0, 8016c78 <uxr_deserialize_ObjectVariant+0x28>
 8016c5c:	7833      	ldrb	r3, [r6, #0]
 8016c5e:	4604      	mov	r4, r0
 8016c60:	3b01      	subs	r3, #1
 8016c62:	2b0d      	cmp	r3, #13
 8016c64:	d809      	bhi.n	8016c7a <uxr_deserialize_ObjectVariant+0x2a>
 8016c66:	e8df f003 	tbb	[pc, r3]
 8016c6a:	0a41      	.short	0x0a41
 8016c6c:	0a0a2323 	.word	0x0a0a2323
 8016c70:	10080a0a 	.word	0x10080a0a
 8016c74:	565c1010 	.word	0x565c1010
 8016c78:	2400      	movs	r4, #0
 8016c7a:	4620      	mov	r0, r4
 8016c7c:	bd70      	pop	{r4, r5, r6, pc}
 8016c7e:	1d31      	adds	r1, r6, #4
 8016c80:	4628      	mov	r0, r5
 8016c82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016c86:	f7ff bf63 	b.w	8016b50 <uxr_deserialize_DATAWRITER_Representation>
 8016c8a:	1d31      	adds	r1, r6, #4
 8016c8c:	4628      	mov	r0, r5
 8016c8e:	f7f5 febf 	bl	800ca10 <ucdr_deserialize_uint8_t>
 8016c92:	2800      	cmp	r0, #0
 8016c94:	d0f0      	beq.n	8016c78 <uxr_deserialize_ObjectVariant+0x28>
 8016c96:	7933      	ldrb	r3, [r6, #4]
 8016c98:	2b01      	cmp	r3, #1
 8016c9a:	d001      	beq.n	8016ca0 <uxr_deserialize_ObjectVariant+0x50>
 8016c9c:	2b02      	cmp	r3, #2
 8016c9e:	d1ec      	bne.n	8016c7a <uxr_deserialize_ObjectVariant+0x2a>
 8016ca0:	68b1      	ldr	r1, [r6, #8]
 8016ca2:	4628      	mov	r0, r5
 8016ca4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016ca8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016cac:	f001 bb68 	b.w	8018380 <ucdr_deserialize_string>
 8016cb0:	1d31      	adds	r1, r6, #4
 8016cb2:	4628      	mov	r0, r5
 8016cb4:	f7f5 feac 	bl	800ca10 <ucdr_deserialize_uint8_t>
 8016cb8:	4604      	mov	r4, r0
 8016cba:	b170      	cbz	r0, 8016cda <uxr_deserialize_ObjectVariant+0x8a>
 8016cbc:	7933      	ldrb	r3, [r6, #4]
 8016cbe:	2b02      	cmp	r3, #2
 8016cc0:	d04c      	beq.n	8016d5c <uxr_deserialize_ObjectVariant+0x10c>
 8016cc2:	2b03      	cmp	r3, #3
 8016cc4:	d109      	bne.n	8016cda <uxr_deserialize_ObjectVariant+0x8a>
 8016cc6:	f106 0308 	add.w	r3, r6, #8
 8016cca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016cce:	f106 010c 	add.w	r1, r6, #12
 8016cd2:	4628      	mov	r0, r5
 8016cd4:	f7f7 f9a2 	bl	800e01c <ucdr_deserialize_sequence_uint8_t>
 8016cd8:	4604      	mov	r4, r0
 8016cda:	2202      	movs	r2, #2
 8016cdc:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8016ce0:	4628      	mov	r0, r5
 8016ce2:	f7f5 fde9 	bl	800c8b8 <ucdr_deserialize_array_uint8_t>
 8016ce6:	4020      	ands	r0, r4
 8016ce8:	b2c4      	uxtb	r4, r0
 8016cea:	e7c6      	b.n	8016c7a <uxr_deserialize_ObjectVariant+0x2a>
 8016cec:	1d31      	adds	r1, r6, #4
 8016cee:	4628      	mov	r0, r5
 8016cf0:	f7f5 fe8e 	bl	800ca10 <ucdr_deserialize_uint8_t>
 8016cf4:	4604      	mov	r4, r0
 8016cf6:	b130      	cbz	r0, 8016d06 <uxr_deserialize_ObjectVariant+0xb6>
 8016cf8:	7933      	ldrb	r3, [r6, #4]
 8016cfa:	2b02      	cmp	r3, #2
 8016cfc:	d036      	beq.n	8016d6c <uxr_deserialize_ObjectVariant+0x11c>
 8016cfe:	2b03      	cmp	r3, #3
 8016d00:	d03c      	beq.n	8016d7c <uxr_deserialize_ObjectVariant+0x12c>
 8016d02:	2b01      	cmp	r3, #1
 8016d04:	d032      	beq.n	8016d6c <uxr_deserialize_ObjectVariant+0x11c>
 8016d06:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8016d0a:	4628      	mov	r0, r5
 8016d0c:	f7f6 fc26 	bl	800d55c <ucdr_deserialize_int16_t>
 8016d10:	4020      	ands	r0, r4
 8016d12:	b2c4      	uxtb	r4, r0
 8016d14:	e7b1      	b.n	8016c7a <uxr_deserialize_ObjectVariant+0x2a>
 8016d16:	1d31      	adds	r1, r6, #4
 8016d18:	4628      	mov	r0, r5
 8016d1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016d1e:	f7ff bdcd 	b.w	80168bc <uxr_deserialize_CLIENT_Representation>
 8016d22:	2204      	movs	r2, #4
 8016d24:	4628      	mov	r0, r5
 8016d26:	18b1      	adds	r1, r6, r2
 8016d28:	f7f5 fdc6 	bl	800c8b8 <ucdr_deserialize_array_uint8_t>
 8016d2c:	4604      	mov	r4, r0
 8016d2e:	2202      	movs	r2, #2
 8016d30:	f106 0108 	add.w	r1, r6, #8
 8016d34:	4628      	mov	r0, r5
 8016d36:	f7f5 fdbf 	bl	800c8b8 <ucdr_deserialize_array_uint8_t>
 8016d3a:	4004      	ands	r4, r0
 8016d3c:	2202      	movs	r2, #2
 8016d3e:	f106 010a 	add.w	r1, r6, #10
 8016d42:	4628      	mov	r0, r5
 8016d44:	b2e4      	uxtb	r4, r4
 8016d46:	f7f5 fdb7 	bl	800c8b8 <ucdr_deserialize_array_uint8_t>
 8016d4a:	4603      	mov	r3, r0
 8016d4c:	f106 010c 	add.w	r1, r6, #12
 8016d50:	4628      	mov	r0, r5
 8016d52:	401c      	ands	r4, r3
 8016d54:	f7f5 fe2e 	bl	800c9b4 <ucdr_deserialize_bool>
 8016d58:	4004      	ands	r4, r0
 8016d5a:	e78e      	b.n	8016c7a <uxr_deserialize_ObjectVariant+0x2a>
 8016d5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016d60:	68b1      	ldr	r1, [r6, #8]
 8016d62:	4628      	mov	r0, r5
 8016d64:	f001 fb0c 	bl	8018380 <ucdr_deserialize_string>
 8016d68:	4604      	mov	r4, r0
 8016d6a:	e7b6      	b.n	8016cda <uxr_deserialize_ObjectVariant+0x8a>
 8016d6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016d70:	68b1      	ldr	r1, [r6, #8]
 8016d72:	4628      	mov	r0, r5
 8016d74:	f001 fb04 	bl	8018380 <ucdr_deserialize_string>
 8016d78:	4604      	mov	r4, r0
 8016d7a:	e7c4      	b.n	8016d06 <uxr_deserialize_ObjectVariant+0xb6>
 8016d7c:	f106 0308 	add.w	r3, r6, #8
 8016d80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016d84:	f106 010c 	add.w	r1, r6, #12
 8016d88:	4628      	mov	r0, r5
 8016d8a:	f7f7 f947 	bl	800e01c <ucdr_deserialize_sequence_uint8_t>
 8016d8e:	4604      	mov	r4, r0
 8016d90:	e7b9      	b.n	8016d06 <uxr_deserialize_ObjectVariant+0xb6>
 8016d92:	bf00      	nop

08016d94 <uxr_deserialize_BaseObjectRequest>:
 8016d94:	b570      	push	{r4, r5, r6, lr}
 8016d96:	2202      	movs	r2, #2
 8016d98:	4605      	mov	r5, r0
 8016d9a:	460e      	mov	r6, r1
 8016d9c:	f7f5 fd8c 	bl	800c8b8 <ucdr_deserialize_array_uint8_t>
 8016da0:	2202      	movs	r2, #2
 8016da2:	4604      	mov	r4, r0
 8016da4:	4628      	mov	r0, r5
 8016da6:	18b1      	adds	r1, r6, r2
 8016da8:	f7f5 fd86 	bl	800c8b8 <ucdr_deserialize_array_uint8_t>
 8016dac:	4020      	ands	r0, r4
 8016dae:	b2c0      	uxtb	r0, r0
 8016db0:	bd70      	pop	{r4, r5, r6, pc}
 8016db2:	bf00      	nop

08016db4 <uxr_serialize_ActivityInfoVariant>:
 8016db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016db8:	460e      	mov	r6, r1
 8016dba:	7809      	ldrb	r1, [r1, #0]
 8016dbc:	4680      	mov	r8, r0
 8016dbe:	f7f5 fe11 	bl	800c9e4 <ucdr_serialize_uint8_t>
 8016dc2:	4607      	mov	r7, r0
 8016dc4:	b138      	cbz	r0, 8016dd6 <uxr_serialize_ActivityInfoVariant+0x22>
 8016dc6:	7833      	ldrb	r3, [r6, #0]
 8016dc8:	2b06      	cmp	r3, #6
 8016dca:	f000 8081 	beq.w	8016ed0 <uxr_serialize_ActivityInfoVariant+0x11c>
 8016dce:	2b0d      	cmp	r3, #13
 8016dd0:	d014      	beq.n	8016dfc <uxr_serialize_ActivityInfoVariant+0x48>
 8016dd2:	2b05      	cmp	r3, #5
 8016dd4:	d002      	beq.n	8016ddc <uxr_serialize_ActivityInfoVariant+0x28>
 8016dd6:	4638      	mov	r0, r7
 8016dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ddc:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8016de0:	4640      	mov	r0, r8
 8016de2:	f7f6 fb3b 	bl	800d45c <ucdr_serialize_int16_t>
 8016de6:	4607      	mov	r7, r0
 8016de8:	4640      	mov	r0, r8
 8016dea:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 8016dee:	f7f6 fa65 	bl	800d2bc <ucdr_serialize_uint64_t>
 8016df2:	4038      	ands	r0, r7
 8016df4:	b2c7      	uxtb	r7, r0
 8016df6:	4638      	mov	r0, r7
 8016df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016dfc:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8016e00:	4640      	mov	r0, r8
 8016e02:	f7f6 fb2b 	bl	800d45c <ucdr_serialize_int16_t>
 8016e06:	68f1      	ldr	r1, [r6, #12]
 8016e08:	4607      	mov	r7, r0
 8016e0a:	4640      	mov	r0, r8
 8016e0c:	f7f6 f800 	bl	800ce10 <ucdr_serialize_uint32_t>
 8016e10:	68f3      	ldr	r3, [r6, #12]
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	d0ed      	beq.n	8016df2 <uxr_serialize_ActivityInfoVariant+0x3e>
 8016e16:	b318      	cbz	r0, 8016e60 <uxr_serialize_ActivityInfoVariant+0xac>
 8016e18:	f106 090c 	add.w	r9, r6, #12
 8016e1c:	2400      	movs	r4, #0
 8016e1e:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8016e22:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 8016e26:	7c29      	ldrb	r1, [r5, #16]
 8016e28:	4640      	mov	r0, r8
 8016e2a:	f7f5 fddb 	bl	800c9e4 <ucdr_serialize_uint8_t>
 8016e2e:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 8016e32:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8016e36:	2800      	cmp	r0, #0
 8016e38:	d051      	beq.n	8016ede <uxr_serialize_ActivityInfoVariant+0x12a>
 8016e3a:	7c2b      	ldrb	r3, [r5, #16]
 8016e3c:	00c9      	lsls	r1, r1, #3
 8016e3e:	2b03      	cmp	r3, #3
 8016e40:	d854      	bhi.n	8016eec <uxr_serialize_ActivityInfoVariant+0x138>
 8016e42:	e8df f003 	tbb	[pc, r3]
 8016e46:	2133      	.short	0x2133
 8016e48:	020f      	.short	0x020f
 8016e4a:	4449      	add	r1, r9
 8016e4c:	4640      	mov	r0, r8
 8016e4e:	6889      	ldr	r1, [r1, #8]
 8016e50:	f001 fa86 	bl	8018360 <ucdr_serialize_string>
 8016e54:	3401      	adds	r4, #1
 8016e56:	68f2      	ldr	r2, [r6, #12]
 8016e58:	4294      	cmp	r4, r2
 8016e5a:	d244      	bcs.n	8016ee6 <uxr_serialize_ActivityInfoVariant+0x132>
 8016e5c:	2800      	cmp	r0, #0
 8016e5e:	d1de      	bne.n	8016e1e <uxr_serialize_ActivityInfoVariant+0x6a>
 8016e60:	2700      	movs	r7, #0
 8016e62:	e7b8      	b.n	8016dd6 <uxr_serialize_ActivityInfoVariant+0x22>
 8016e64:	3108      	adds	r1, #8
 8016e66:	44a2      	add	sl, r4
 8016e68:	2210      	movs	r2, #16
 8016e6a:	4640      	mov	r0, r8
 8016e6c:	4449      	add	r1, r9
 8016e6e:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8016e72:	f7f5 fcbd 	bl	800c7f0 <ucdr_serialize_array_uint8_t>
 8016e76:	4605      	mov	r5, r0
 8016e78:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
 8016e7c:	4640      	mov	r0, r8
 8016e7e:	f7f5 ffc7 	bl	800ce10 <ucdr_serialize_uint32_t>
 8016e82:	4028      	ands	r0, r5
 8016e84:	b2c0      	uxtb	r0, r0
 8016e86:	e7e5      	b.n	8016e54 <uxr_serialize_ActivityInfoVariant+0xa0>
 8016e88:	3108      	adds	r1, #8
 8016e8a:	44a2      	add	sl, r4
 8016e8c:	2204      	movs	r2, #4
 8016e8e:	4640      	mov	r0, r8
 8016e90:	4449      	add	r1, r9
 8016e92:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8016e96:	f7f5 fcab 	bl	800c7f0 <ucdr_serialize_array_uint8_t>
 8016e9a:	4605      	mov	r5, r0
 8016e9c:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 8016ea0:	4640      	mov	r0, r8
 8016ea2:	f7f5 fdcb 	bl	800ca3c <ucdr_serialize_uint16_t>
 8016ea6:	4028      	ands	r0, r5
 8016ea8:	b2c0      	uxtb	r0, r0
 8016eaa:	e7d3      	b.n	8016e54 <uxr_serialize_ActivityInfoVariant+0xa0>
 8016eac:	3108      	adds	r1, #8
 8016eae:	44a2      	add	sl, r4
 8016eb0:	2202      	movs	r2, #2
 8016eb2:	4640      	mov	r0, r8
 8016eb4:	4449      	add	r1, r9
 8016eb6:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8016eba:	f7f5 fc99 	bl	800c7f0 <ucdr_serialize_array_uint8_t>
 8016ebe:	4605      	mov	r5, r0
 8016ec0:	f89a 1016 	ldrb.w	r1, [sl, #22]
 8016ec4:	4640      	mov	r0, r8
 8016ec6:	f7f5 fd8d 	bl	800c9e4 <ucdr_serialize_uint8_t>
 8016eca:	4028      	ands	r0, r5
 8016ecc:	b2c0      	uxtb	r0, r0
 8016ece:	e7c1      	b.n	8016e54 <uxr_serialize_ActivityInfoVariant+0xa0>
 8016ed0:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8016ed4:	4640      	mov	r0, r8
 8016ed6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016eda:	f7f6 babf 	b.w	800d45c <ucdr_serialize_int16_t>
 8016ede:	3401      	adds	r4, #1
 8016ee0:	68f2      	ldr	r2, [r6, #12]
 8016ee2:	42a2      	cmp	r2, r4
 8016ee4:	d8bc      	bhi.n	8016e60 <uxr_serialize_ActivityInfoVariant+0xac>
 8016ee6:	4007      	ands	r7, r0
 8016ee8:	b2ff      	uxtb	r7, r7
 8016eea:	e774      	b.n	8016dd6 <uxr_serialize_ActivityInfoVariant+0x22>
 8016eec:	3401      	adds	r4, #1
 8016eee:	68f3      	ldr	r3, [r6, #12]
 8016ef0:	3518      	adds	r5, #24
 8016ef2:	429c      	cmp	r4, r3
 8016ef4:	d397      	bcc.n	8016e26 <uxr_serialize_ActivityInfoVariant+0x72>
 8016ef6:	e76e      	b.n	8016dd6 <uxr_serialize_ActivityInfoVariant+0x22>

08016ef8 <uxr_deserialize_BaseObjectReply>:
 8016ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016efc:	2202      	movs	r2, #2
 8016efe:	4606      	mov	r6, r0
 8016f00:	460f      	mov	r7, r1
 8016f02:	f7f5 fcd9 	bl	800c8b8 <ucdr_deserialize_array_uint8_t>
 8016f06:	2202      	movs	r2, #2
 8016f08:	4605      	mov	r5, r0
 8016f0a:	4630      	mov	r0, r6
 8016f0c:	18b9      	adds	r1, r7, r2
 8016f0e:	f7f5 fcd3 	bl	800c8b8 <ucdr_deserialize_array_uint8_t>
 8016f12:	4680      	mov	r8, r0
 8016f14:	1d39      	adds	r1, r7, #4
 8016f16:	4630      	mov	r0, r6
 8016f18:	f7f5 fd7a 	bl	800ca10 <ucdr_deserialize_uint8_t>
 8016f1c:	ea05 0508 	and.w	r5, r5, r8
 8016f20:	4604      	mov	r4, r0
 8016f22:	1d79      	adds	r1, r7, #5
 8016f24:	4630      	mov	r0, r6
 8016f26:	402c      	ands	r4, r5
 8016f28:	f7f5 fd72 	bl	800ca10 <ucdr_deserialize_uint8_t>
 8016f2c:	4020      	ands	r0, r4
 8016f2e:	b2c0      	uxtb	r0, r0
 8016f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016f34 <uxr_serialize_ReadSpecification>:
 8016f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f36:	460e      	mov	r6, r1
 8016f38:	4607      	mov	r7, r0
 8016f3a:	7809      	ldrb	r1, [r1, #0]
 8016f3c:	f7f5 fd52 	bl	800c9e4 <ucdr_serialize_uint8_t>
 8016f40:	4604      	mov	r4, r0
 8016f42:	7871      	ldrb	r1, [r6, #1]
 8016f44:	4638      	mov	r0, r7
 8016f46:	f7f5 fd4d 	bl	800c9e4 <ucdr_serialize_uint8_t>
 8016f4a:	4004      	ands	r4, r0
 8016f4c:	78b1      	ldrb	r1, [r6, #2]
 8016f4e:	4638      	mov	r0, r7
 8016f50:	f7f5 fd1a 	bl	800c988 <ucdr_serialize_bool>
 8016f54:	78b3      	ldrb	r3, [r6, #2]
 8016f56:	b2e4      	uxtb	r4, r4
 8016f58:	4004      	ands	r4, r0
 8016f5a:	b943      	cbnz	r3, 8016f6e <uxr_serialize_ReadSpecification+0x3a>
 8016f5c:	7a31      	ldrb	r1, [r6, #8]
 8016f5e:	4638      	mov	r0, r7
 8016f60:	f7f5 fd12 	bl	800c988 <ucdr_serialize_bool>
 8016f64:	7a33      	ldrb	r3, [r6, #8]
 8016f66:	4004      	ands	r4, r0
 8016f68:	b93b      	cbnz	r3, 8016f7a <uxr_serialize_ReadSpecification+0x46>
 8016f6a:	4620      	mov	r0, r4
 8016f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f6e:	6871      	ldr	r1, [r6, #4]
 8016f70:	4638      	mov	r0, r7
 8016f72:	f001 f9f5 	bl	8018360 <ucdr_serialize_string>
 8016f76:	4004      	ands	r4, r0
 8016f78:	e7f0      	b.n	8016f5c <uxr_serialize_ReadSpecification+0x28>
 8016f7a:	8971      	ldrh	r1, [r6, #10]
 8016f7c:	4638      	mov	r0, r7
 8016f7e:	f7f5 fd5d 	bl	800ca3c <ucdr_serialize_uint16_t>
 8016f82:	4605      	mov	r5, r0
 8016f84:	89b1      	ldrh	r1, [r6, #12]
 8016f86:	4638      	mov	r0, r7
 8016f88:	f7f5 fd58 	bl	800ca3c <ucdr_serialize_uint16_t>
 8016f8c:	4005      	ands	r5, r0
 8016f8e:	89f1      	ldrh	r1, [r6, #14]
 8016f90:	4638      	mov	r0, r7
 8016f92:	b2ed      	uxtb	r5, r5
 8016f94:	f7f5 fd52 	bl	800ca3c <ucdr_serialize_uint16_t>
 8016f98:	8a31      	ldrh	r1, [r6, #16]
 8016f9a:	4025      	ands	r5, r4
 8016f9c:	4604      	mov	r4, r0
 8016f9e:	4638      	mov	r0, r7
 8016fa0:	4025      	ands	r5, r4
 8016fa2:	f7f5 fd4b 	bl	800ca3c <ucdr_serialize_uint16_t>
 8016fa6:	ea00 0405 	and.w	r4, r0, r5
 8016faa:	4620      	mov	r0, r4
 8016fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016fae:	bf00      	nop

08016fb0 <uxr_serialize_CREATE_CLIENT_Payload>:
 8016fb0:	f7ff bc2c 	b.w	801680c <uxr_serialize_CLIENT_Representation>

08016fb4 <uxr_serialize_CREATE_Payload>:
 8016fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016fb6:	2202      	movs	r2, #2
 8016fb8:	4607      	mov	r7, r0
 8016fba:	460e      	mov	r6, r1
 8016fbc:	f7f5 fc18 	bl	800c7f0 <ucdr_serialize_array_uint8_t>
 8016fc0:	2202      	movs	r2, #2
 8016fc2:	4605      	mov	r5, r0
 8016fc4:	4638      	mov	r0, r7
 8016fc6:	18b1      	adds	r1, r6, r2
 8016fc8:	f7f5 fc12 	bl	800c7f0 <ucdr_serialize_array_uint8_t>
 8016fcc:	7931      	ldrb	r1, [r6, #4]
 8016fce:	4604      	mov	r4, r0
 8016fd0:	4638      	mov	r0, r7
 8016fd2:	f7f5 fd07 	bl	800c9e4 <ucdr_serialize_uint8_t>
 8016fd6:	b170      	cbz	r0, 8016ff6 <uxr_serialize_CREATE_Payload+0x42>
 8016fd8:	7933      	ldrb	r3, [r6, #4]
 8016fda:	402c      	ands	r4, r5
 8016fdc:	3b01      	subs	r3, #1
 8016fde:	b2e4      	uxtb	r4, r4
 8016fe0:	2b0d      	cmp	r3, #13
 8016fe2:	d809      	bhi.n	8016ff8 <uxr_serialize_CREATE_Payload+0x44>
 8016fe4:	e8df f003 	tbb	[pc, r3]
 8016fe8:	23230a4c 	.word	0x23230a4c
 8016fec:	0a0a0a0a 	.word	0x0a0a0a0a
 8016ff0:	12121208 	.word	0x12121208
 8016ff4:	3e45      	.short	0x3e45
 8016ff6:	2400      	movs	r4, #0
 8016ff8:	4620      	mov	r0, r4
 8016ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ffc:	f106 0108 	add.w	r1, r6, #8
 8017000:	4638      	mov	r0, r7
 8017002:	f7ff fd09 	bl	8016a18 <uxr_serialize_DATAWRITER_Representation>
 8017006:	4004      	ands	r4, r0
 8017008:	4620      	mov	r0, r4
 801700a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801700c:	7a31      	ldrb	r1, [r6, #8]
 801700e:	4638      	mov	r0, r7
 8017010:	f7f5 fce8 	bl	800c9e4 <ucdr_serialize_uint8_t>
 8017014:	2800      	cmp	r0, #0
 8017016:	d0ee      	beq.n	8016ff6 <uxr_serialize_CREATE_Payload+0x42>
 8017018:	7a33      	ldrb	r3, [r6, #8]
 801701a:	2b01      	cmp	r3, #1
 801701c:	d001      	beq.n	8017022 <uxr_serialize_CREATE_Payload+0x6e>
 801701e:	2b02      	cmp	r3, #2
 8017020:	d1ea      	bne.n	8016ff8 <uxr_serialize_CREATE_Payload+0x44>
 8017022:	68f1      	ldr	r1, [r6, #12]
 8017024:	4638      	mov	r0, r7
 8017026:	f001 f99b 	bl	8018360 <ucdr_serialize_string>
 801702a:	4004      	ands	r4, r0
 801702c:	e7e4      	b.n	8016ff8 <uxr_serialize_CREATE_Payload+0x44>
 801702e:	7a31      	ldrb	r1, [r6, #8]
 8017030:	4638      	mov	r0, r7
 8017032:	f7f5 fcd7 	bl	800c9e4 <ucdr_serialize_uint8_t>
 8017036:	4605      	mov	r5, r0
 8017038:	b158      	cbz	r0, 8017052 <uxr_serialize_CREATE_Payload+0x9e>
 801703a:	7a33      	ldrb	r3, [r6, #8]
 801703c:	2b02      	cmp	r3, #2
 801703e:	d034      	beq.n	80170aa <uxr_serialize_CREATE_Payload+0xf6>
 8017040:	2b03      	cmp	r3, #3
 8017042:	d106      	bne.n	8017052 <uxr_serialize_CREATE_Payload+0x9e>
 8017044:	68f2      	ldr	r2, [r6, #12]
 8017046:	f106 0110 	add.w	r1, r6, #16
 801704a:	4638      	mov	r0, r7
 801704c:	f7f6 ffd4 	bl	800dff8 <ucdr_serialize_sequence_uint8_t>
 8017050:	4605      	mov	r5, r0
 8017052:	2202      	movs	r2, #2
 8017054:	f506 7104 	add.w	r1, r6, #528	; 0x210
 8017058:	4638      	mov	r0, r7
 801705a:	f7f5 fbc9 	bl	800c7f0 <ucdr_serialize_array_uint8_t>
 801705e:	4028      	ands	r0, r5
 8017060:	4004      	ands	r4, r0
 8017062:	e7c9      	b.n	8016ff8 <uxr_serialize_CREATE_Payload+0x44>
 8017064:	f106 0108 	add.w	r1, r6, #8
 8017068:	4638      	mov	r0, r7
 801706a:	f7ff fbcf 	bl	801680c <uxr_serialize_CLIENT_Representation>
 801706e:	4004      	ands	r4, r0
 8017070:	e7c2      	b.n	8016ff8 <uxr_serialize_CREATE_Payload+0x44>
 8017072:	f106 0108 	add.w	r1, r6, #8
 8017076:	4638      	mov	r0, r7
 8017078:	f7ff fc84 	bl	8016984 <uxr_serialize_AGENT_Representation>
 801707c:	4004      	ands	r4, r0
 801707e:	e7bb      	b.n	8016ff8 <uxr_serialize_CREATE_Payload+0x44>
 8017080:	7a31      	ldrb	r1, [r6, #8]
 8017082:	4638      	mov	r0, r7
 8017084:	f7f5 fcae 	bl	800c9e4 <ucdr_serialize_uint8_t>
 8017088:	4605      	mov	r5, r0
 801708a:	b130      	cbz	r0, 801709a <uxr_serialize_CREATE_Payload+0xe6>
 801708c:	7a33      	ldrb	r3, [r6, #8]
 801708e:	2b02      	cmp	r3, #2
 8017090:	d011      	beq.n	80170b6 <uxr_serialize_CREATE_Payload+0x102>
 8017092:	2b03      	cmp	r3, #3
 8017094:	d015      	beq.n	80170c2 <uxr_serialize_CREATE_Payload+0x10e>
 8017096:	2b01      	cmp	r3, #1
 8017098:	d00d      	beq.n	80170b6 <uxr_serialize_CREATE_Payload+0x102>
 801709a:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 801709e:	4638      	mov	r0, r7
 80170a0:	f7f6 f9dc 	bl	800d45c <ucdr_serialize_int16_t>
 80170a4:	4028      	ands	r0, r5
 80170a6:	4004      	ands	r4, r0
 80170a8:	e7a6      	b.n	8016ff8 <uxr_serialize_CREATE_Payload+0x44>
 80170aa:	68f1      	ldr	r1, [r6, #12]
 80170ac:	4638      	mov	r0, r7
 80170ae:	f001 f957 	bl	8018360 <ucdr_serialize_string>
 80170b2:	4605      	mov	r5, r0
 80170b4:	e7cd      	b.n	8017052 <uxr_serialize_CREATE_Payload+0x9e>
 80170b6:	68f1      	ldr	r1, [r6, #12]
 80170b8:	4638      	mov	r0, r7
 80170ba:	f001 f951 	bl	8018360 <ucdr_serialize_string>
 80170be:	4605      	mov	r5, r0
 80170c0:	e7eb      	b.n	801709a <uxr_serialize_CREATE_Payload+0xe6>
 80170c2:	68f2      	ldr	r2, [r6, #12]
 80170c4:	f106 0110 	add.w	r1, r6, #16
 80170c8:	4638      	mov	r0, r7
 80170ca:	f7f6 ff95 	bl	800dff8 <ucdr_serialize_sequence_uint8_t>
 80170ce:	4605      	mov	r5, r0
 80170d0:	e7e3      	b.n	801709a <uxr_serialize_CREATE_Payload+0xe6>
 80170d2:	bf00      	nop

080170d4 <uxr_deserialize_GET_INFO_Payload>:
 80170d4:	b570      	push	{r4, r5, r6, lr}
 80170d6:	2202      	movs	r2, #2
 80170d8:	4605      	mov	r5, r0
 80170da:	460e      	mov	r6, r1
 80170dc:	f7f5 fbec 	bl	800c8b8 <ucdr_deserialize_array_uint8_t>
 80170e0:	2202      	movs	r2, #2
 80170e2:	4604      	mov	r4, r0
 80170e4:	4628      	mov	r0, r5
 80170e6:	18b1      	adds	r1, r6, r2
 80170e8:	f7f5 fbe6 	bl	800c8b8 <ucdr_deserialize_array_uint8_t>
 80170ec:	4603      	mov	r3, r0
 80170ee:	1d31      	adds	r1, r6, #4
 80170f0:	4628      	mov	r0, r5
 80170f2:	401c      	ands	r4, r3
 80170f4:	f7f5 ffbc 	bl	800d070 <ucdr_deserialize_uint32_t>
 80170f8:	b2e4      	uxtb	r4, r4
 80170fa:	4020      	ands	r0, r4
 80170fc:	bd70      	pop	{r4, r5, r6, pc}
 80170fe:	bf00      	nop

08017100 <uxr_serialize_DELETE_Payload>:
 8017100:	b570      	push	{r4, r5, r6, lr}
 8017102:	2202      	movs	r2, #2
 8017104:	4605      	mov	r5, r0
 8017106:	460e      	mov	r6, r1
 8017108:	f7f5 fb72 	bl	800c7f0 <ucdr_serialize_array_uint8_t>
 801710c:	2202      	movs	r2, #2
 801710e:	4604      	mov	r4, r0
 8017110:	4628      	mov	r0, r5
 8017112:	18b1      	adds	r1, r6, r2
 8017114:	f7f5 fb6c 	bl	800c7f0 <ucdr_serialize_array_uint8_t>
 8017118:	4020      	ands	r0, r4
 801711a:	b2c0      	uxtb	r0, r0
 801711c:	bd70      	pop	{r4, r5, r6, pc}
 801711e:	bf00      	nop

08017120 <uxr_deserialize_STATUS_AGENT_Payload>:
 8017120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017124:	460e      	mov	r6, r1
 8017126:	4605      	mov	r5, r0
 8017128:	f7f5 fc72 	bl	800ca10 <ucdr_deserialize_uint8_t>
 801712c:	4604      	mov	r4, r0
 801712e:	1c71      	adds	r1, r6, #1
 8017130:	4628      	mov	r0, r5
 8017132:	f7f5 fc6d 	bl	800ca10 <ucdr_deserialize_uint8_t>
 8017136:	2204      	movs	r2, #4
 8017138:	4681      	mov	r9, r0
 801713a:	4628      	mov	r0, r5
 801713c:	18b1      	adds	r1, r6, r2
 801713e:	f7f5 fbbb 	bl	800c8b8 <ucdr_deserialize_array_uint8_t>
 8017142:	f106 0108 	add.w	r1, r6, #8
 8017146:	4680      	mov	r8, r0
 8017148:	2202      	movs	r2, #2
 801714a:	4628      	mov	r0, r5
 801714c:	f7f5 fbb4 	bl	800c8b8 <ucdr_deserialize_array_uint8_t>
 8017150:	ea04 0309 	and.w	r3, r4, r9
 8017154:	4607      	mov	r7, r0
 8017156:	2202      	movs	r2, #2
 8017158:	b2db      	uxtb	r3, r3
 801715a:	f106 010a 	add.w	r1, r6, #10
 801715e:	4628      	mov	r0, r5
 8017160:	ea03 0408 	and.w	r4, r3, r8
 8017164:	f7f5 fba8 	bl	800c8b8 <ucdr_deserialize_array_uint8_t>
 8017168:	4603      	mov	r3, r0
 801716a:	4628      	mov	r0, r5
 801716c:	403c      	ands	r4, r7
 801716e:	f106 010c 	add.w	r1, r6, #12
 8017172:	461d      	mov	r5, r3
 8017174:	f7f5 fc1e 	bl	800c9b4 <ucdr_deserialize_bool>
 8017178:	4025      	ands	r5, r4
 801717a:	4028      	ands	r0, r5
 801717c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08017180 <uxr_deserialize_STATUS_Payload>:
 8017180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017184:	2202      	movs	r2, #2
 8017186:	4606      	mov	r6, r0
 8017188:	460f      	mov	r7, r1
 801718a:	f7f5 fb95 	bl	800c8b8 <ucdr_deserialize_array_uint8_t>
 801718e:	2202      	movs	r2, #2
 8017190:	4605      	mov	r5, r0
 8017192:	4630      	mov	r0, r6
 8017194:	18b9      	adds	r1, r7, r2
 8017196:	f7f5 fb8f 	bl	800c8b8 <ucdr_deserialize_array_uint8_t>
 801719a:	4680      	mov	r8, r0
 801719c:	1d39      	adds	r1, r7, #4
 801719e:	4630      	mov	r0, r6
 80171a0:	f7f5 fc36 	bl	800ca10 <ucdr_deserialize_uint8_t>
 80171a4:	ea05 0508 	and.w	r5, r5, r8
 80171a8:	4604      	mov	r4, r0
 80171aa:	1d79      	adds	r1, r7, #5
 80171ac:	4630      	mov	r0, r6
 80171ae:	402c      	ands	r4, r5
 80171b0:	f7f5 fc2e 	bl	800ca10 <ucdr_deserialize_uint8_t>
 80171b4:	4020      	ands	r0, r4
 80171b6:	b2c0      	uxtb	r0, r0
 80171b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080171bc <uxr_serialize_INFO_Payload>:
 80171bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171c0:	2202      	movs	r2, #2
 80171c2:	460c      	mov	r4, r1
 80171c4:	4605      	mov	r5, r0
 80171c6:	f7f5 fb13 	bl	800c7f0 <ucdr_serialize_array_uint8_t>
 80171ca:	2202      	movs	r2, #2
 80171cc:	4680      	mov	r8, r0
 80171ce:	4628      	mov	r0, r5
 80171d0:	18a1      	adds	r1, r4, r2
 80171d2:	f7f5 fb0d 	bl	800c7f0 <ucdr_serialize_array_uint8_t>
 80171d6:	4607      	mov	r7, r0
 80171d8:	7921      	ldrb	r1, [r4, #4]
 80171da:	4628      	mov	r0, r5
 80171dc:	f7f5 fc02 	bl	800c9e4 <ucdr_serialize_uint8_t>
 80171e0:	ea08 0807 	and.w	r8, r8, r7
 80171e4:	4606      	mov	r6, r0
 80171e6:	7961      	ldrb	r1, [r4, #5]
 80171e8:	4628      	mov	r0, r5
 80171ea:	ea06 0608 	and.w	r6, r6, r8
 80171ee:	f7f5 fbf9 	bl	800c9e4 <ucdr_serialize_uint8_t>
 80171f2:	7a21      	ldrb	r1, [r4, #8]
 80171f4:	4030      	ands	r0, r6
 80171f6:	b2c7      	uxtb	r7, r0
 80171f8:	4628      	mov	r0, r5
 80171fa:	f7f5 fbc5 	bl	800c988 <ucdr_serialize_bool>
 80171fe:	7a23      	ldrb	r3, [r4, #8]
 8017200:	4606      	mov	r6, r0
 8017202:	b96b      	cbnz	r3, 8017220 <uxr_serialize_INFO_Payload+0x64>
 8017204:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 8017208:	4628      	mov	r0, r5
 801720a:	f7f5 fbbd 	bl	800c988 <ucdr_serialize_bool>
 801720e:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 8017212:	4030      	ands	r0, r6
 8017214:	b2c6      	uxtb	r6, r0
 8017216:	b983      	cbnz	r3, 801723a <uxr_serialize_INFO_Payload+0x7e>
 8017218:	ea06 0007 	and.w	r0, r6, r7
 801721c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017220:	7b21      	ldrb	r1, [r4, #12]
 8017222:	4628      	mov	r0, r5
 8017224:	f7f5 fbde 	bl	800c9e4 <ucdr_serialize_uint8_t>
 8017228:	b188      	cbz	r0, 801724e <uxr_serialize_INFO_Payload+0x92>
 801722a:	f104 010c 	add.w	r1, r4, #12
 801722e:	4628      	mov	r0, r5
 8017230:	f7ff fc1a 	bl	8016a68 <uxr_serialize_ObjectVariant.part.0>
 8017234:	4030      	ands	r0, r6
 8017236:	b2c6      	uxtb	r6, r0
 8017238:	e7e4      	b.n	8017204 <uxr_serialize_INFO_Payload+0x48>
 801723a:	f504 7108 	add.w	r1, r4, #544	; 0x220
 801723e:	4628      	mov	r0, r5
 8017240:	f7ff fdb8 	bl	8016db4 <uxr_serialize_ActivityInfoVariant>
 8017244:	4006      	ands	r6, r0
 8017246:	ea06 0007 	and.w	r0, r6, r7
 801724a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801724e:	4606      	mov	r6, r0
 8017250:	e7d8      	b.n	8017204 <uxr_serialize_INFO_Payload+0x48>
 8017252:	bf00      	nop

08017254 <uxr_serialize_READ_DATA_Payload>:
 8017254:	b570      	push	{r4, r5, r6, lr}
 8017256:	2202      	movs	r2, #2
 8017258:	4605      	mov	r5, r0
 801725a:	460e      	mov	r6, r1
 801725c:	f7f5 fac8 	bl	800c7f0 <ucdr_serialize_array_uint8_t>
 8017260:	2202      	movs	r2, #2
 8017262:	4604      	mov	r4, r0
 8017264:	4628      	mov	r0, r5
 8017266:	18b1      	adds	r1, r6, r2
 8017268:	f7f5 fac2 	bl	800c7f0 <ucdr_serialize_array_uint8_t>
 801726c:	4603      	mov	r3, r0
 801726e:	1d31      	adds	r1, r6, #4
 8017270:	4628      	mov	r0, r5
 8017272:	401c      	ands	r4, r3
 8017274:	f7ff fe5e 	bl	8016f34 <uxr_serialize_ReadSpecification>
 8017278:	b2e4      	uxtb	r4, r4
 801727a:	4020      	ands	r0, r4
 801727c:	bd70      	pop	{r4, r5, r6, pc}
 801727e:	bf00      	nop

08017280 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8017280:	b570      	push	{r4, r5, r6, lr}
 8017282:	2202      	movs	r2, #2
 8017284:	4605      	mov	r5, r0
 8017286:	460e      	mov	r6, r1
 8017288:	f7f5 fab2 	bl	800c7f0 <ucdr_serialize_array_uint8_t>
 801728c:	2202      	movs	r2, #2
 801728e:	4604      	mov	r4, r0
 8017290:	4628      	mov	r0, r5
 8017292:	18b1      	adds	r1, r6, r2
 8017294:	f7f5 faac 	bl	800c7f0 <ucdr_serialize_array_uint8_t>
 8017298:	4020      	ands	r0, r4
 801729a:	b2c0      	uxtb	r0, r0
 801729c:	bd70      	pop	{r4, r5, r6, pc}
 801729e:	bf00      	nop

080172a0 <uxr_serialize_ACKNACK_Payload>:
 80172a0:	b570      	push	{r4, r5, r6, lr}
 80172a2:	460c      	mov	r4, r1
 80172a4:	4605      	mov	r5, r0
 80172a6:	460e      	mov	r6, r1
 80172a8:	f834 1b02 	ldrh.w	r1, [r4], #2
 80172ac:	f7f5 fbc6 	bl	800ca3c <ucdr_serialize_uint16_t>
 80172b0:	2202      	movs	r2, #2
 80172b2:	4621      	mov	r1, r4
 80172b4:	4604      	mov	r4, r0
 80172b6:	4628      	mov	r0, r5
 80172b8:	f7f5 fa9a 	bl	800c7f0 <ucdr_serialize_array_uint8_t>
 80172bc:	4603      	mov	r3, r0
 80172be:	7931      	ldrb	r1, [r6, #4]
 80172c0:	4628      	mov	r0, r5
 80172c2:	401c      	ands	r4, r3
 80172c4:	f7f5 fb8e 	bl	800c9e4 <ucdr_serialize_uint8_t>
 80172c8:	b2e4      	uxtb	r4, r4
 80172ca:	4020      	ands	r0, r4
 80172cc:	bd70      	pop	{r4, r5, r6, pc}
 80172ce:	bf00      	nop

080172d0 <uxr_deserialize_ACKNACK_Payload>:
 80172d0:	b570      	push	{r4, r5, r6, lr}
 80172d2:	460e      	mov	r6, r1
 80172d4:	4605      	mov	r5, r0
 80172d6:	f7f5 fcb1 	bl	800cc3c <ucdr_deserialize_uint16_t>
 80172da:	2202      	movs	r2, #2
 80172dc:	4604      	mov	r4, r0
 80172de:	4628      	mov	r0, r5
 80172e0:	18b1      	adds	r1, r6, r2
 80172e2:	f7f5 fae9 	bl	800c8b8 <ucdr_deserialize_array_uint8_t>
 80172e6:	4603      	mov	r3, r0
 80172e8:	1d31      	adds	r1, r6, #4
 80172ea:	4628      	mov	r0, r5
 80172ec:	401c      	ands	r4, r3
 80172ee:	f7f5 fb8f 	bl	800ca10 <ucdr_deserialize_uint8_t>
 80172f2:	b2e4      	uxtb	r4, r4
 80172f4:	4020      	ands	r0, r4
 80172f6:	bd70      	pop	{r4, r5, r6, pc}

080172f8 <uxr_serialize_HEARTBEAT_Payload>:
 80172f8:	b570      	push	{r4, r5, r6, lr}
 80172fa:	460d      	mov	r5, r1
 80172fc:	4606      	mov	r6, r0
 80172fe:	8809      	ldrh	r1, [r1, #0]
 8017300:	f7f5 fb9c 	bl	800ca3c <ucdr_serialize_uint16_t>
 8017304:	8869      	ldrh	r1, [r5, #2]
 8017306:	4604      	mov	r4, r0
 8017308:	4630      	mov	r0, r6
 801730a:	f7f5 fb97 	bl	800ca3c <ucdr_serialize_uint16_t>
 801730e:	4603      	mov	r3, r0
 8017310:	7929      	ldrb	r1, [r5, #4]
 8017312:	4630      	mov	r0, r6
 8017314:	401c      	ands	r4, r3
 8017316:	f7f5 fb65 	bl	800c9e4 <ucdr_serialize_uint8_t>
 801731a:	b2e4      	uxtb	r4, r4
 801731c:	4020      	ands	r0, r4
 801731e:	bd70      	pop	{r4, r5, r6, pc}

08017320 <uxr_deserialize_HEARTBEAT_Payload>:
 8017320:	b570      	push	{r4, r5, r6, lr}
 8017322:	460e      	mov	r6, r1
 8017324:	4605      	mov	r5, r0
 8017326:	f7f5 fc89 	bl	800cc3c <ucdr_deserialize_uint16_t>
 801732a:	4604      	mov	r4, r0
 801732c:	1cb1      	adds	r1, r6, #2
 801732e:	4628      	mov	r0, r5
 8017330:	f7f5 fc84 	bl	800cc3c <ucdr_deserialize_uint16_t>
 8017334:	4603      	mov	r3, r0
 8017336:	1d31      	adds	r1, r6, #4
 8017338:	4628      	mov	r0, r5
 801733a:	401c      	ands	r4, r3
 801733c:	f7f5 fb68 	bl	800ca10 <ucdr_deserialize_uint8_t>
 8017340:	b2e4      	uxtb	r4, r4
 8017342:	4020      	ands	r0, r4
 8017344:	bd70      	pop	{r4, r5, r6, pc}
 8017346:	bf00      	nop

08017348 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8017348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801734c:	460e      	mov	r6, r1
 801734e:	4605      	mov	r5, r0
 8017350:	f7f6 fa10 	bl	800d774 <ucdr_deserialize_int32_t>
 8017354:	4607      	mov	r7, r0
 8017356:	1d31      	adds	r1, r6, #4
 8017358:	4628      	mov	r0, r5
 801735a:	f7f5 fe89 	bl	800d070 <ucdr_deserialize_uint32_t>
 801735e:	4680      	mov	r8, r0
 8017360:	f106 0108 	add.w	r1, r6, #8
 8017364:	4628      	mov	r0, r5
 8017366:	f7f6 fa05 	bl	800d774 <ucdr_deserialize_int32_t>
 801736a:	ea07 0708 	and.w	r7, r7, r8
 801736e:	4604      	mov	r4, r0
 8017370:	f106 010c 	add.w	r1, r6, #12
 8017374:	4628      	mov	r0, r5
 8017376:	403c      	ands	r4, r7
 8017378:	f7f5 fe7a 	bl	800d070 <ucdr_deserialize_uint32_t>
 801737c:	f106 0110 	add.w	r1, r6, #16
 8017380:	4004      	ands	r4, r0
 8017382:	4628      	mov	r0, r5
 8017384:	f7f6 f9f6 	bl	800d774 <ucdr_deserialize_int32_t>
 8017388:	4603      	mov	r3, r0
 801738a:	b2e4      	uxtb	r4, r4
 801738c:	4628      	mov	r0, r5
 801738e:	461d      	mov	r5, r3
 8017390:	f106 0114 	add.w	r1, r6, #20
 8017394:	f7f5 fe6c 	bl	800d070 <ucdr_deserialize_uint32_t>
 8017398:	402c      	ands	r4, r5
 801739a:	4020      	ands	r0, r4
 801739c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080173a0 <uxr_serialize_SampleIdentity>:
 80173a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173a4:	4604      	mov	r4, r0
 80173a6:	460d      	mov	r5, r1
 80173a8:	220c      	movs	r2, #12
 80173aa:	f7f5 fa21 	bl	800c7f0 <ucdr_serialize_array_uint8_t>
 80173ae:	2203      	movs	r2, #3
 80173b0:	f105 010c 	add.w	r1, r5, #12
 80173b4:	4607      	mov	r7, r0
 80173b6:	4620      	mov	r0, r4
 80173b8:	f7f5 fa1a 	bl	800c7f0 <ucdr_serialize_array_uint8_t>
 80173bc:	7be9      	ldrb	r1, [r5, #15]
 80173be:	4680      	mov	r8, r0
 80173c0:	4620      	mov	r0, r4
 80173c2:	f7f5 fb0f 	bl	800c9e4 <ucdr_serialize_uint8_t>
 80173c6:	6929      	ldr	r1, [r5, #16]
 80173c8:	4606      	mov	r6, r0
 80173ca:	4620      	mov	r0, r4
 80173cc:	f7f6 f93a 	bl	800d644 <ucdr_serialize_int32_t>
 80173d0:	ea07 0708 	and.w	r7, r7, r8
 80173d4:	4603      	mov	r3, r0
 80173d6:	4620      	mov	r0, r4
 80173d8:	403e      	ands	r6, r7
 80173da:	6969      	ldr	r1, [r5, #20]
 80173dc:	461c      	mov	r4, r3
 80173de:	f7f5 fd17 	bl	800ce10 <ucdr_serialize_uint32_t>
 80173e2:	4034      	ands	r4, r6
 80173e4:	4020      	ands	r0, r4
 80173e6:	b2c0      	uxtb	r0, r0
 80173e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080173ec <uxr_deserialize_SampleIdentity>:
 80173ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173f0:	4604      	mov	r4, r0
 80173f2:	460d      	mov	r5, r1
 80173f4:	220c      	movs	r2, #12
 80173f6:	f7f5 fa5f 	bl	800c8b8 <ucdr_deserialize_array_uint8_t>
 80173fa:	2203      	movs	r2, #3
 80173fc:	f105 010c 	add.w	r1, r5, #12
 8017400:	4607      	mov	r7, r0
 8017402:	4620      	mov	r0, r4
 8017404:	f7f5 fa58 	bl	800c8b8 <ucdr_deserialize_array_uint8_t>
 8017408:	f105 010f 	add.w	r1, r5, #15
 801740c:	4680      	mov	r8, r0
 801740e:	4620      	mov	r0, r4
 8017410:	f7f5 fafe 	bl	800ca10 <ucdr_deserialize_uint8_t>
 8017414:	f105 0110 	add.w	r1, r5, #16
 8017418:	4606      	mov	r6, r0
 801741a:	4620      	mov	r0, r4
 801741c:	f7f6 f9aa 	bl	800d774 <ucdr_deserialize_int32_t>
 8017420:	ea07 0708 	and.w	r7, r7, r8
 8017424:	4603      	mov	r3, r0
 8017426:	4620      	mov	r0, r4
 8017428:	403e      	ands	r6, r7
 801742a:	f105 0114 	add.w	r1, r5, #20
 801742e:	461c      	mov	r4, r3
 8017430:	f7f5 fe1e 	bl	800d070 <ucdr_deserialize_uint32_t>
 8017434:	4034      	ands	r4, r6
 8017436:	4020      	ands	r0, r4
 8017438:	b2c0      	uxtb	r0, r0
 801743a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801743e:	bf00      	nop

08017440 <rcl_get_automatic_discovery_range>:
 8017440:	b530      	push	{r4, r5, lr}
 8017442:	2300      	movs	r3, #0
 8017444:	b083      	sub	sp, #12
 8017446:	9301      	str	r3, [sp, #4]
 8017448:	b1c0      	cbz	r0, 801747c <rcl_get_automatic_discovery_range+0x3c>
 801744a:	4604      	mov	r4, r0
 801744c:	a901      	add	r1, sp, #4
 801744e:	4818      	ldr	r0, [pc, #96]	; (80174b0 <rcl_get_automatic_discovery_range+0x70>)
 8017450:	f7fa fcda 	bl	8011e08 <rcutils_get_env>
 8017454:	b110      	cbz	r0, 801745c <rcl_get_automatic_discovery_range+0x1c>
 8017456:	2001      	movs	r0, #1
 8017458:	b003      	add	sp, #12
 801745a:	bd30      	pop	{r4, r5, pc}
 801745c:	9d01      	ldr	r5, [sp, #4]
 801745e:	782b      	ldrb	r3, [r5, #0]
 8017460:	b13b      	cbz	r3, 8017472 <rcl_get_automatic_discovery_range+0x32>
 8017462:	4914      	ldr	r1, [pc, #80]	; (80174b4 <rcl_get_automatic_discovery_range+0x74>)
 8017464:	4628      	mov	r0, r5
 8017466:	f7e8 feeb 	bl	8000240 <strcmp>
 801746a:	b950      	cbnz	r0, 8017482 <rcl_get_automatic_discovery_range+0x42>
 801746c:	2301      	movs	r3, #1
 801746e:	7023      	strb	r3, [r4, #0]
 8017470:	e7f2      	b.n	8017458 <rcl_get_automatic_discovery_range+0x18>
 8017472:	2303      	movs	r3, #3
 8017474:	2000      	movs	r0, #0
 8017476:	7023      	strb	r3, [r4, #0]
 8017478:	b003      	add	sp, #12
 801747a:	bd30      	pop	{r4, r5, pc}
 801747c:	200b      	movs	r0, #11
 801747e:	b003      	add	sp, #12
 8017480:	bd30      	pop	{r4, r5, pc}
 8017482:	490d      	ldr	r1, [pc, #52]	; (80174b8 <rcl_get_automatic_discovery_range+0x78>)
 8017484:	4628      	mov	r0, r5
 8017486:	f7e8 fedb 	bl	8000240 <strcmp>
 801748a:	b168      	cbz	r0, 80174a8 <rcl_get_automatic_discovery_range+0x68>
 801748c:	490b      	ldr	r1, [pc, #44]	; (80174bc <rcl_get_automatic_discovery_range+0x7c>)
 801748e:	4628      	mov	r0, r5
 8017490:	f7e8 fed6 	bl	8000240 <strcmp>
 8017494:	2800      	cmp	r0, #0
 8017496:	d0ec      	beq.n	8017472 <rcl_get_automatic_discovery_range+0x32>
 8017498:	4909      	ldr	r1, [pc, #36]	; (80174c0 <rcl_get_automatic_discovery_range+0x80>)
 801749a:	4628      	mov	r0, r5
 801749c:	f7e8 fed0 	bl	8000240 <strcmp>
 80174a0:	b910      	cbnz	r0, 80174a8 <rcl_get_automatic_discovery_range+0x68>
 80174a2:	2304      	movs	r3, #4
 80174a4:	7023      	strb	r3, [r4, #0]
 80174a6:	e7d7      	b.n	8017458 <rcl_get_automatic_discovery_range+0x18>
 80174a8:	2302      	movs	r3, #2
 80174aa:	2000      	movs	r0, #0
 80174ac:	7023      	strb	r3, [r4, #0]
 80174ae:	e7d3      	b.n	8017458 <rcl_get_automatic_discovery_range+0x18>
 80174b0:	0801bd70 	.word	0x0801bd70
 80174b4:	0801bd90 	.word	0x0801bd90
 80174b8:	0801bd94 	.word	0x0801bd94
 80174bc:	0801bda0 	.word	0x0801bda0
 80174c0:	0801bda8 	.word	0x0801bda8

080174c4 <rcl_automatic_discovery_range_to_string>:
 80174c4:	2804      	cmp	r0, #4
 80174c6:	d803      	bhi.n	80174d0 <rcl_automatic_discovery_range_to_string+0xc>
 80174c8:	4b02      	ldr	r3, [pc, #8]	; (80174d4 <rcl_automatic_discovery_range_to_string+0x10>)
 80174ca:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80174ce:	4770      	bx	lr
 80174d0:	2000      	movs	r0, #0
 80174d2:	4770      	bx	lr
 80174d4:	0801be98 	.word	0x0801be98

080174d8 <rcl_get_discovery_static_peers>:
 80174d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80174dc:	2300      	movs	r3, #0
 80174de:	b08e      	sub	sp, #56	; 0x38
 80174e0:	9306      	str	r3, [sp, #24]
 80174e2:	2900      	cmp	r1, #0
 80174e4:	d04b      	beq.n	801757e <rcl_get_discovery_static_peers+0xa6>
 80174e6:	4605      	mov	r5, r0
 80174e8:	2800      	cmp	r0, #0
 80174ea:	d048      	beq.n	801757e <rcl_get_discovery_static_peers+0xa6>
 80174ec:	460c      	mov	r4, r1
 80174ee:	482c      	ldr	r0, [pc, #176]	; (80175a0 <rcl_get_discovery_static_peers+0xc8>)
 80174f0:	a906      	add	r1, sp, #24
 80174f2:	f7fa fc89 	bl	8011e08 <rcutils_get_env>
 80174f6:	b118      	cbz	r0, 8017500 <rcl_get_discovery_static_peers+0x28>
 80174f8:	2001      	movs	r0, #1
 80174fa:	b00e      	add	sp, #56	; 0x38
 80174fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017500:	9b06      	ldr	r3, [sp, #24]
 8017502:	2b00      	cmp	r3, #0
 8017504:	d0f8      	beq.n	80174f8 <rcl_get_discovery_static_peers+0x20>
 8017506:	af07      	add	r7, sp, #28
 8017508:	4638      	mov	r0, r7
 801750a:	f000 fc5b 	bl	8017dc4 <rcutils_get_zero_initialized_string_array>
 801750e:	f104 0308 	add.w	r3, r4, #8
 8017512:	9703      	str	r7, [sp, #12]
 8017514:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017518:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801751c:	213b      	movs	r1, #59	; 0x3b
 801751e:	9806      	ldr	r0, [sp, #24]
 8017520:	e894 000c 	ldmia.w	r4, {r2, r3}
 8017524:	f000 fb90 	bl	8017c48 <rcutils_split>
 8017528:	2800      	cmp	r0, #0
 801752a:	d1e5      	bne.n	80174f8 <rcl_get_discovery_static_peers+0x20>
 801752c:	4622      	mov	r2, r4
 801752e:	9907      	ldr	r1, [sp, #28]
 8017530:	4628      	mov	r0, r5
 8017532:	f000 fc97 	bl	8017e64 <rmw_discovery_options_init>
 8017536:	4604      	mov	r4, r0
 8017538:	bb78      	cbnz	r0, 801759a <rcl_get_discovery_static_peers+0xc2>
 801753a:	9e07      	ldr	r6, [sp, #28]
 801753c:	b336      	cbz	r6, 801758c <rcl_get_discovery_static_peers+0xb4>
 801753e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017542:	4680      	mov	r8, r0
 8017544:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 8017548:	ea4f 2904 	mov.w	r9, r4, lsl #8
 801754c:	4608      	mov	r0, r1
 801754e:	9105      	str	r1, [sp, #20]
 8017550:	f7e8 fed6 	bl	8000300 <strlen>
 8017554:	28ff      	cmp	r0, #255	; 0xff
 8017556:	9905      	ldr	r1, [sp, #20]
 8017558:	d815      	bhi.n	8017586 <rcl_get_discovery_static_peers+0xae>
 801755a:	6868      	ldr	r0, [r5, #4]
 801755c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017560:	eb00 2004 	add.w	r0, r0, r4, lsl #8
 8017564:	3401      	adds	r4, #1
 8017566:	f002 f88c 	bl	8019682 <strncpy>
 801756a:	686b      	ldr	r3, [r5, #4]
 801756c:	9e07      	ldr	r6, [sp, #28]
 801756e:	444b      	add	r3, r9
 8017570:	42b4      	cmp	r4, r6
 8017572:	f883 80ff 	strb.w	r8, [r3, #255]	; 0xff
 8017576:	d209      	bcs.n	801758c <rcl_get_discovery_static_peers+0xb4>
 8017578:	f8dd a020 	ldr.w	sl, [sp, #32]
 801757c:	e7e2      	b.n	8017544 <rcl_get_discovery_static_peers+0x6c>
 801757e:	200b      	movs	r0, #11
 8017580:	b00e      	add	sp, #56	; 0x38
 8017582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017586:	3401      	adds	r4, #1
 8017588:	42b4      	cmp	r4, r6
 801758a:	d3db      	bcc.n	8017544 <rcl_get_discovery_static_peers+0x6c>
 801758c:	4638      	mov	r0, r7
 801758e:	f000 fc37 	bl	8017e00 <rcutils_string_array_fini>
 8017592:	3800      	subs	r0, #0
 8017594:	bf18      	it	ne
 8017596:	2001      	movne	r0, #1
 8017598:	e7af      	b.n	80174fa <rcl_get_discovery_static_peers+0x22>
 801759a:	f7f7 fd53 	bl	800f044 <rcl_convert_rmw_ret_to_rcl_ret>
 801759e:	e7ac      	b.n	80174fa <rcl_get_discovery_static_peers+0x22>
 80175a0:	0801bdb8 	.word	0x0801bdb8

080175a4 <rcl_get_default_domain_id>:
 80175a4:	b530      	push	{r4, r5, lr}
 80175a6:	2300      	movs	r3, #0
 80175a8:	b083      	sub	sp, #12
 80175aa:	9300      	str	r3, [sp, #0]
 80175ac:	b1d0      	cbz	r0, 80175e4 <rcl_get_default_domain_id+0x40>
 80175ae:	4604      	mov	r4, r0
 80175b0:	4669      	mov	r1, sp
 80175b2:	4815      	ldr	r0, [pc, #84]	; (8017608 <rcl_get_default_domain_id+0x64>)
 80175b4:	f7fa fc28 	bl	8011e08 <rcutils_get_env>
 80175b8:	4602      	mov	r2, r0
 80175ba:	b110      	cbz	r0, 80175c2 <rcl_get_default_domain_id+0x1e>
 80175bc:	2001      	movs	r0, #1
 80175be:	b003      	add	sp, #12
 80175c0:	bd30      	pop	{r4, r5, pc}
 80175c2:	9b00      	ldr	r3, [sp, #0]
 80175c4:	b18b      	cbz	r3, 80175ea <rcl_get_default_domain_id+0x46>
 80175c6:	7818      	ldrb	r0, [r3, #0]
 80175c8:	2800      	cmp	r0, #0
 80175ca:	d0f8      	beq.n	80175be <rcl_get_default_domain_id+0x1a>
 80175cc:	a901      	add	r1, sp, #4
 80175ce:	4618      	mov	r0, r3
 80175d0:	9201      	str	r2, [sp, #4]
 80175d2:	f001 fe89 	bl	80192e8 <strtoul>
 80175d6:	4605      	mov	r5, r0
 80175d8:	b150      	cbz	r0, 80175f0 <rcl_get_default_domain_id+0x4c>
 80175da:	1c43      	adds	r3, r0, #1
 80175dc:	d00d      	beq.n	80175fa <rcl_get_default_domain_id+0x56>
 80175de:	2000      	movs	r0, #0
 80175e0:	6025      	str	r5, [r4, #0]
 80175e2:	e7ec      	b.n	80175be <rcl_get_default_domain_id+0x1a>
 80175e4:	200b      	movs	r0, #11
 80175e6:	b003      	add	sp, #12
 80175e8:	bd30      	pop	{r4, r5, pc}
 80175ea:	4618      	mov	r0, r3
 80175ec:	b003      	add	sp, #12
 80175ee:	bd30      	pop	{r4, r5, pc}
 80175f0:	9b01      	ldr	r3, [sp, #4]
 80175f2:	781b      	ldrb	r3, [r3, #0]
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	d0f2      	beq.n	80175de <rcl_get_default_domain_id+0x3a>
 80175f8:	e7e0      	b.n	80175bc <rcl_get_default_domain_id+0x18>
 80175fa:	f002 f95b 	bl	80198b4 <__errno>
 80175fe:	6803      	ldr	r3, [r0, #0]
 8017600:	2b22      	cmp	r3, #34	; 0x22
 8017602:	d1ec      	bne.n	80175de <rcl_get_default_domain_id+0x3a>
 8017604:	e7da      	b.n	80175bc <rcl_get_default_domain_id+0x18>
 8017606:	bf00      	nop
 8017608:	0801beac 	.word	0x0801beac

0801760c <rcl_expand_topic_name>:
 801760c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017610:	b08d      	sub	sp, #52	; 0x34
 8017612:	4698      	mov	r8, r3
 8017614:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017616:	9207      	str	r2, [sp, #28]
 8017618:	2b00      	cmp	r3, #0
 801761a:	bf18      	it	ne
 801761c:	f1b8 0f00 	cmpne.w	r8, #0
 8017620:	bf0c      	ite	eq
 8017622:	2301      	moveq	r3, #1
 8017624:	2300      	movne	r3, #0
 8017626:	2a00      	cmp	r2, #0
 8017628:	bf08      	it	eq
 801762a:	f043 0301 	orreq.w	r3, r3, #1
 801762e:	2900      	cmp	r1, #0
 8017630:	bf08      	it	eq
 8017632:	f043 0301 	orreq.w	r3, r3, #1
 8017636:	2b00      	cmp	r3, #0
 8017638:	d13d      	bne.n	80176b6 <rcl_expand_topic_name+0xaa>
 801763a:	fab0 f280 	clz	r2, r0
 801763e:	4604      	mov	r4, r0
 8017640:	0952      	lsrs	r2, r2, #5
 8017642:	2800      	cmp	r0, #0
 8017644:	d037      	beq.n	80176b6 <rcl_expand_topic_name+0xaa>
 8017646:	460f      	mov	r7, r1
 8017648:	a90b      	add	r1, sp, #44	; 0x2c
 801764a:	f000 fa39 	bl	8017ac0 <rcl_validate_topic_name>
 801764e:	4605      	mov	r5, r0
 8017650:	bb68      	cbnz	r0, 80176ae <rcl_expand_topic_name+0xa2>
 8017652:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017654:	2b00      	cmp	r3, #0
 8017656:	d137      	bne.n	80176c8 <rcl_expand_topic_name+0xbc>
 8017658:	4602      	mov	r2, r0
 801765a:	a90b      	add	r1, sp, #44	; 0x2c
 801765c:	4638      	mov	r0, r7
 801765e:	f7fa ffa5 	bl	80125ac <rmw_validate_node_name>
 8017662:	bb68      	cbnz	r0, 80176c0 <rcl_expand_topic_name+0xb4>
 8017664:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017666:	2b00      	cmp	r3, #0
 8017668:	d133      	bne.n	80176d2 <rcl_expand_topic_name+0xc6>
 801766a:	462a      	mov	r2, r5
 801766c:	a90b      	add	r1, sp, #44	; 0x2c
 801766e:	9807      	ldr	r0, [sp, #28]
 8017670:	f7fa ff7e 	bl	8012570 <rmw_validate_namespace>
 8017674:	bb20      	cbnz	r0, 80176c0 <rcl_expand_topic_name+0xb4>
 8017676:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8017678:	2d00      	cmp	r5, #0
 801767a:	f040 80a2 	bne.w	80177c2 <rcl_expand_topic_name+0x1b6>
 801767e:	217b      	movs	r1, #123	; 0x7b
 8017680:	4620      	mov	r0, r4
 8017682:	f001 ffdf 	bl	8019644 <strchr>
 8017686:	7823      	ldrb	r3, [r4, #0]
 8017688:	4681      	mov	r9, r0
 801768a:	bb20      	cbnz	r0, 80176d6 <rcl_expand_topic_name+0xca>
 801768c:	2b2f      	cmp	r3, #47	; 0x2f
 801768e:	d122      	bne.n	80176d6 <rcl_expand_topic_name+0xca>
 8017690:	ab19      	add	r3, sp, #100	; 0x64
 8017692:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017696:	ab16      	add	r3, sp, #88	; 0x58
 8017698:	e88d 0003 	stmia.w	sp, {r0, r1}
 801769c:	4620      	mov	r0, r4
 801769e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80176a0:	f7fa fd14 	bl	80120cc <rcutils_strdup>
 80176a4:	2800      	cmp	r0, #0
 80176a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80176a8:	bf08      	it	eq
 80176aa:	250a      	moveq	r5, #10
 80176ac:	6018      	str	r0, [r3, #0]
 80176ae:	4628      	mov	r0, r5
 80176b0:	b00d      	add	sp, #52	; 0x34
 80176b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176b6:	250b      	movs	r5, #11
 80176b8:	4628      	mov	r0, r5
 80176ba:	b00d      	add	sp, #52	; 0x34
 80176bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176c0:	f7f7 fcc0 	bl	800f044 <rcl_convert_rmw_ret_to_rcl_ret>
 80176c4:	4605      	mov	r5, r0
 80176c6:	e7f2      	b.n	80176ae <rcl_expand_topic_name+0xa2>
 80176c8:	2567      	movs	r5, #103	; 0x67
 80176ca:	4628      	mov	r0, r5
 80176cc:	b00d      	add	sp, #52	; 0x34
 80176ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176d2:	25c9      	movs	r5, #201	; 0xc9
 80176d4:	e7eb      	b.n	80176ae <rcl_expand_topic_name+0xa2>
 80176d6:	2b7e      	cmp	r3, #126	; 0x7e
 80176d8:	d075      	beq.n	80177c6 <rcl_expand_topic_name+0x1ba>
 80176da:	f1b9 0f00 	cmp.w	r9, #0
 80176de:	f000 80c2 	beq.w	8017866 <rcl_expand_topic_name+0x25a>
 80176e2:	2300      	movs	r3, #0
 80176e4:	46a2      	mov	sl, r4
 80176e6:	461e      	mov	r6, r3
 80176e8:	9508      	str	r5, [sp, #32]
 80176ea:	4655      	mov	r5, sl
 80176ec:	9409      	str	r4, [sp, #36]	; 0x24
 80176ee:	46b2      	mov	sl, r6
 80176f0:	464c      	mov	r4, r9
 80176f2:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80176f6:	2c00      	cmp	r4, #0
 80176f8:	f000 80ae 	beq.w	8017858 <rcl_expand_topic_name+0x24c>
 80176fc:	217d      	movs	r1, #125	; 0x7d
 80176fe:	4628      	mov	r0, r5
 8017700:	f001 ffa0 	bl	8019644 <strchr>
 8017704:	eba0 0904 	sub.w	r9, r0, r4
 8017708:	4621      	mov	r1, r4
 801770a:	4869      	ldr	r0, [pc, #420]	; (80178b0 <rcl_expand_topic_name+0x2a4>)
 801770c:	f109 0601 	add.w	r6, r9, #1
 8017710:	4632      	mov	r2, r6
 8017712:	f001 ffa4 	bl	801965e <strncmp>
 8017716:	2800      	cmp	r0, #0
 8017718:	d051      	beq.n	80177be <rcl_expand_topic_name+0x1b2>
 801771a:	4632      	mov	r2, r6
 801771c:	4621      	mov	r1, r4
 801771e:	4865      	ldr	r0, [pc, #404]	; (80178b4 <rcl_expand_topic_name+0x2a8>)
 8017720:	f001 ff9d 	bl	801965e <strncmp>
 8017724:	b128      	cbz	r0, 8017732 <rcl_expand_topic_name+0x126>
 8017726:	4632      	mov	r2, r6
 8017728:	4621      	mov	r1, r4
 801772a:	4863      	ldr	r0, [pc, #396]	; (80178b8 <rcl_expand_topic_name+0x2ac>)
 801772c:	f001 ff97 	bl	801965e <strncmp>
 8017730:	bb38      	cbnz	r0, 8017782 <rcl_expand_topic_name+0x176>
 8017732:	46d9      	mov	r9, fp
 8017734:	ab18      	add	r3, sp, #96	; 0x60
 8017736:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801773a:	ab16      	add	r3, sp, #88	; 0x58
 801773c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017740:	4620      	mov	r0, r4
 8017742:	4631      	mov	r1, r6
 8017744:	cb0c      	ldmia	r3, {r2, r3}
 8017746:	f7fa fce7 	bl	8012118 <rcutils_strndup>
 801774a:	4604      	mov	r4, r0
 801774c:	2800      	cmp	r0, #0
 801774e:	f000 80a3 	beq.w	8017898 <rcl_expand_topic_name+0x28c>
 8017752:	464a      	mov	r2, r9
 8017754:	4628      	mov	r0, r5
 8017756:	ab16      	add	r3, sp, #88	; 0x58
 8017758:	4621      	mov	r1, r4
 801775a:	f7fa fbb7 	bl	8011ecc <rcutils_repl_str>
 801775e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8017760:	4605      	mov	r5, r0
 8017762:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017764:	4620      	mov	r0, r4
 8017766:	4798      	blx	r3
 8017768:	4650      	mov	r0, sl
 801776a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801776c:	991a      	ldr	r1, [sp, #104]	; 0x68
 801776e:	4798      	blx	r3
 8017770:	2d00      	cmp	r5, #0
 8017772:	d06c      	beq.n	801784e <rcl_expand_topic_name+0x242>
 8017774:	217b      	movs	r1, #123	; 0x7b
 8017776:	4628      	mov	r0, r5
 8017778:	f001 ff64 	bl	8019644 <strchr>
 801777c:	46aa      	mov	sl, r5
 801777e:	4604      	mov	r4, r0
 8017780:	e7b9      	b.n	80176f6 <rcl_expand_topic_name+0xea>
 8017782:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8017786:	1c61      	adds	r1, r4, #1
 8017788:	4640      	mov	r0, r8
 801778a:	f7fa fdc1 	bl	8012310 <rcutils_string_map_getn>
 801778e:	4681      	mov	r9, r0
 8017790:	2800      	cmp	r0, #0
 8017792:	d1cf      	bne.n	8017734 <rcl_expand_topic_name+0x128>
 8017794:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017796:	aa18      	add	r2, sp, #96	; 0x60
 8017798:	2569      	movs	r5, #105	; 0x69
 801779a:	6018      	str	r0, [r3, #0]
 801779c:	ab16      	add	r3, sp, #88	; 0x58
 801779e:	ca07      	ldmia	r2, {r0, r1, r2}
 80177a0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80177a4:	4631      	mov	r1, r6
 80177a6:	4620      	mov	r0, r4
 80177a8:	cb0c      	ldmia	r3, {r2, r3}
 80177aa:	f7fa fcb5 	bl	8012118 <rcutils_strndup>
 80177ae:	991a      	ldr	r1, [sp, #104]	; 0x68
 80177b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80177b2:	4798      	blx	r3
 80177b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80177b6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80177b8:	4650      	mov	r0, sl
 80177ba:	4798      	blx	r3
 80177bc:	e777      	b.n	80176ae <rcl_expand_topic_name+0xa2>
 80177be:	46b9      	mov	r9, r7
 80177c0:	e7b8      	b.n	8017734 <rcl_expand_topic_name+0x128>
 80177c2:	25ca      	movs	r5, #202	; 0xca
 80177c4:	e773      	b.n	80176ae <rcl_expand_topic_name+0xa2>
 80177c6:	9e07      	ldr	r6, [sp, #28]
 80177c8:	4630      	mov	r0, r6
 80177ca:	f7e8 fd99 	bl	8000300 <strlen>
 80177ce:	4a3b      	ldr	r2, [pc, #236]	; (80178bc <rcl_expand_topic_name+0x2b0>)
 80177d0:	4b3b      	ldr	r3, [pc, #236]	; (80178c0 <rcl_expand_topic_name+0x2b4>)
 80177d2:	9603      	str	r6, [sp, #12]
 80177d4:	2801      	cmp	r0, #1
 80177d6:	bf18      	it	ne
 80177d8:	4613      	movne	r3, r2
 80177da:	9704      	str	r7, [sp, #16]
 80177dc:	9302      	str	r3, [sp, #8]
 80177de:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80177e0:	9300      	str	r3, [sp, #0]
 80177e2:	1c63      	adds	r3, r4, #1
 80177e4:	9305      	str	r3, [sp, #20]
 80177e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80177ea:	9301      	str	r3, [sp, #4]
 80177ec:	ab16      	add	r3, sp, #88	; 0x58
 80177ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80177f0:	f7fa fb32 	bl	8011e58 <rcutils_format_string_limit>
 80177f4:	4606      	mov	r6, r0
 80177f6:	b350      	cbz	r0, 801784e <rcl_expand_topic_name+0x242>
 80177f8:	f1b9 0f00 	cmp.w	r9, #0
 80177fc:	d005      	beq.n	801780a <rcl_expand_topic_name+0x1fe>
 80177fe:	217b      	movs	r1, #123	; 0x7b
 8017800:	46b2      	mov	sl, r6
 8017802:	f001 ff1f 	bl	8019644 <strchr>
 8017806:	4681      	mov	r9, r0
 8017808:	e76e      	b.n	80176e8 <rcl_expand_topic_name+0xdc>
 801780a:	7833      	ldrb	r3, [r6, #0]
 801780c:	2b2f      	cmp	r3, #47	; 0x2f
 801780e:	d01b      	beq.n	8017848 <rcl_expand_topic_name+0x23c>
 8017810:	9c07      	ldr	r4, [sp, #28]
 8017812:	4620      	mov	r0, r4
 8017814:	f7e8 fd74 	bl	8000300 <strlen>
 8017818:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801781c:	4a29      	ldr	r2, [pc, #164]	; (80178c4 <rcl_expand_topic_name+0x2b8>)
 801781e:	9301      	str	r3, [sp, #4]
 8017820:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017822:	9604      	str	r6, [sp, #16]
 8017824:	9300      	str	r3, [sp, #0]
 8017826:	4b28      	ldr	r3, [pc, #160]	; (80178c8 <rcl_expand_topic_name+0x2bc>)
 8017828:	9403      	str	r4, [sp, #12]
 801782a:	2801      	cmp	r0, #1
 801782c:	bf18      	it	ne
 801782e:	4613      	movne	r3, r2
 8017830:	9302      	str	r3, [sp, #8]
 8017832:	ab16      	add	r3, sp, #88	; 0x58
 8017834:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017836:	f7fa fb0f 	bl	8011e58 <rcutils_format_string_limit>
 801783a:	4603      	mov	r3, r0
 801783c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801783e:	4630      	mov	r0, r6
 8017840:	991a      	ldr	r1, [sp, #104]	; 0x68
 8017842:	461e      	mov	r6, r3
 8017844:	4790      	blx	r2
 8017846:	b116      	cbz	r6, 801784e <rcl_expand_topic_name+0x242>
 8017848:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801784a:	601e      	str	r6, [r3, #0]
 801784c:	e72f      	b.n	80176ae <rcl_expand_topic_name+0xa2>
 801784e:	2300      	movs	r3, #0
 8017850:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8017852:	250a      	movs	r5, #10
 8017854:	6013      	str	r3, [r2, #0]
 8017856:	e72a      	b.n	80176ae <rcl_expand_topic_name+0xa2>
 8017858:	4653      	mov	r3, sl
 801785a:	4656      	mov	r6, sl
 801785c:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 8017860:	2b00      	cmp	r3, #0
 8017862:	d1d2      	bne.n	801780a <rcl_expand_topic_name+0x1fe>
 8017864:	7823      	ldrb	r3, [r4, #0]
 8017866:	2b2f      	cmp	r3, #47	; 0x2f
 8017868:	d01e      	beq.n	80178a8 <rcl_expand_topic_name+0x29c>
 801786a:	9e07      	ldr	r6, [sp, #28]
 801786c:	4630      	mov	r0, r6
 801786e:	f7e8 fd47 	bl	8000300 <strlen>
 8017872:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8017874:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017878:	9603      	str	r6, [sp, #12]
 801787a:	9404      	str	r4, [sp, #16]
 801787c:	e9cd 2300 	strd	r2, r3, [sp]
 8017880:	4a10      	ldr	r2, [pc, #64]	; (80178c4 <rcl_expand_topic_name+0x2b8>)
 8017882:	4b11      	ldr	r3, [pc, #68]	; (80178c8 <rcl_expand_topic_name+0x2bc>)
 8017884:	2801      	cmp	r0, #1
 8017886:	bf18      	it	ne
 8017888:	4613      	movne	r3, r2
 801788a:	9302      	str	r3, [sp, #8]
 801788c:	ab16      	add	r3, sp, #88	; 0x58
 801788e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017890:	f7fa fae2 	bl	8011e58 <rcutils_format_string_limit>
 8017894:	4606      	mov	r6, r0
 8017896:	e7d6      	b.n	8017846 <rcl_expand_topic_name+0x23a>
 8017898:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
 801789c:	4650      	mov	r0, sl
 801789e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80178a0:	6014      	str	r4, [r2, #0]
 80178a2:	250a      	movs	r5, #10
 80178a4:	4798      	blx	r3
 80178a6:	e702      	b.n	80176ae <rcl_expand_topic_name+0xa2>
 80178a8:	2300      	movs	r3, #0
 80178aa:	461e      	mov	r6, r3
 80178ac:	e7cc      	b.n	8017848 <rcl_expand_topic_name+0x23c>
 80178ae:	bf00      	nop
 80178b0:	0801bec4 	.word	0x0801bec4
 80178b4:	0801becc 	.word	0x0801becc
 80178b8:	0801bed4 	.word	0x0801bed4
 80178bc:	0801bebc 	.word	0x0801bebc
 80178c0:	0801baa0 	.word	0x0801baa0
 80178c4:	0801b518 	.word	0x0801b518
 80178c8:	0801b510 	.word	0x0801b510

080178cc <rcl_get_default_topic_name_substitutions>:
 80178cc:	2800      	cmp	r0, #0
 80178ce:	bf0c      	ite	eq
 80178d0:	200b      	moveq	r0, #11
 80178d2:	2000      	movne	r0, #0
 80178d4:	4770      	bx	lr
 80178d6:	bf00      	nop

080178d8 <rcl_get_zero_initialized_guard_condition>:
 80178d8:	4a03      	ldr	r2, [pc, #12]	; (80178e8 <rcl_get_zero_initialized_guard_condition+0x10>)
 80178da:	4603      	mov	r3, r0
 80178dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80178e0:	e883 0003 	stmia.w	r3, {r0, r1}
 80178e4:	4618      	mov	r0, r3
 80178e6:	4770      	bx	lr
 80178e8:	0801bee0 	.word	0x0801bee0

080178ec <rcl_guard_condition_init_from_rmw>:
 80178ec:	b082      	sub	sp, #8
 80178ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178f2:	b086      	sub	sp, #24
 80178f4:	4604      	mov	r4, r0
 80178f6:	460e      	mov	r6, r1
 80178f8:	4615      	mov	r5, r2
 80178fa:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80178fe:	f10d 0e04 	add.w	lr, sp, #4
 8017902:	f84c 3f04 	str.w	r3, [ip, #4]!
 8017906:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801790a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801790e:	f8dc 3000 	ldr.w	r3, [ip]
 8017912:	a801      	add	r0, sp, #4
 8017914:	f8ce 3000 	str.w	r3, [lr]
 8017918:	f7f4 fc2e 	bl	800c178 <rcutils_allocator_is_valid>
 801791c:	f080 0301 	eor.w	r3, r0, #1
 8017920:	b2db      	uxtb	r3, r3
 8017922:	bb3b      	cbnz	r3, 8017974 <rcl_guard_condition_init_from_rmw+0x88>
 8017924:	b334      	cbz	r4, 8017974 <rcl_guard_condition_init_from_rmw+0x88>
 8017926:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801792a:	f1b8 0f00 	cmp.w	r8, #0
 801792e:	d11a      	bne.n	8017966 <rcl_guard_condition_init_from_rmw+0x7a>
 8017930:	b305      	cbz	r5, 8017974 <rcl_guard_condition_init_from_rmw+0x88>
 8017932:	4628      	mov	r0, r5
 8017934:	f7f7 fba4 	bl	800f080 <rcl_context_is_valid>
 8017938:	b1f0      	cbz	r0, 8017978 <rcl_guard_condition_init_from_rmw+0x8c>
 801793a:	9b01      	ldr	r3, [sp, #4]
 801793c:	201c      	movs	r0, #28
 801793e:	9905      	ldr	r1, [sp, #20]
 8017940:	4798      	blx	r3
 8017942:	4607      	mov	r7, r0
 8017944:	6060      	str	r0, [r4, #4]
 8017946:	b320      	cbz	r0, 8017992 <rcl_guard_condition_init_from_rmw+0xa6>
 8017948:	b1c6      	cbz	r6, 801797c <rcl_guard_condition_init_from_rmw+0x90>
 801794a:	6006      	str	r6, [r0, #0]
 801794c:	f880 8004 	strb.w	r8, [r0, #4]
 8017950:	ac01      	add	r4, sp, #4
 8017952:	f107 0c08 	add.w	ip, r7, #8
 8017956:	2500      	movs	r5, #0
 8017958:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801795a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801795e:	6823      	ldr	r3, [r4, #0]
 8017960:	f8cc 3000 	str.w	r3, [ip]
 8017964:	e000      	b.n	8017968 <rcl_guard_condition_init_from_rmw+0x7c>
 8017966:	2564      	movs	r5, #100	; 0x64
 8017968:	4628      	mov	r0, r5
 801796a:	b006      	add	sp, #24
 801796c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017970:	b002      	add	sp, #8
 8017972:	4770      	bx	lr
 8017974:	250b      	movs	r5, #11
 8017976:	e7f7      	b.n	8017968 <rcl_guard_condition_init_from_rmw+0x7c>
 8017978:	2565      	movs	r5, #101	; 0x65
 801797a:	e7f5      	b.n	8017968 <rcl_guard_condition_init_from_rmw+0x7c>
 801797c:	6828      	ldr	r0, [r5, #0]
 801797e:	3028      	adds	r0, #40	; 0x28
 8017980:	f000 fc30 	bl	80181e4 <rmw_create_guard_condition>
 8017984:	6038      	str	r0, [r7, #0]
 8017986:	6867      	ldr	r7, [r4, #4]
 8017988:	683e      	ldr	r6, [r7, #0]
 801798a:	b126      	cbz	r6, 8017996 <rcl_guard_condition_init_from_rmw+0xaa>
 801798c:	2301      	movs	r3, #1
 801798e:	713b      	strb	r3, [r7, #4]
 8017990:	e7de      	b.n	8017950 <rcl_guard_condition_init_from_rmw+0x64>
 8017992:	250a      	movs	r5, #10
 8017994:	e7e8      	b.n	8017968 <rcl_guard_condition_init_from_rmw+0x7c>
 8017996:	9b02      	ldr	r3, [sp, #8]
 8017998:	4638      	mov	r0, r7
 801799a:	9905      	ldr	r1, [sp, #20]
 801799c:	2501      	movs	r5, #1
 801799e:	4798      	blx	r3
 80179a0:	6066      	str	r6, [r4, #4]
 80179a2:	e7e1      	b.n	8017968 <rcl_guard_condition_init_from_rmw+0x7c>

080179a4 <rcl_guard_condition_fini>:
 80179a4:	b570      	push	{r4, r5, r6, lr}
 80179a6:	b082      	sub	sp, #8
 80179a8:	b1f0      	cbz	r0, 80179e8 <rcl_guard_condition_fini+0x44>
 80179aa:	6843      	ldr	r3, [r0, #4]
 80179ac:	4604      	mov	r4, r0
 80179ae:	b163      	cbz	r3, 80179ca <rcl_guard_condition_fini+0x26>
 80179b0:	6818      	ldr	r0, [r3, #0]
 80179b2:	68de      	ldr	r6, [r3, #12]
 80179b4:	6999      	ldr	r1, [r3, #24]
 80179b6:	b160      	cbz	r0, 80179d2 <rcl_guard_condition_fini+0x2e>
 80179b8:	791d      	ldrb	r5, [r3, #4]
 80179ba:	b965      	cbnz	r5, 80179d6 <rcl_guard_condition_fini+0x32>
 80179bc:	4618      	mov	r0, r3
 80179be:	47b0      	blx	r6
 80179c0:	2300      	movs	r3, #0
 80179c2:	4628      	mov	r0, r5
 80179c4:	6063      	str	r3, [r4, #4]
 80179c6:	b002      	add	sp, #8
 80179c8:	bd70      	pop	{r4, r5, r6, pc}
 80179ca:	461d      	mov	r5, r3
 80179cc:	4628      	mov	r0, r5
 80179ce:	b002      	add	sp, #8
 80179d0:	bd70      	pop	{r4, r5, r6, pc}
 80179d2:	4605      	mov	r5, r0
 80179d4:	e7f2      	b.n	80179bc <rcl_guard_condition_fini+0x18>
 80179d6:	9101      	str	r1, [sp, #4]
 80179d8:	f000 fc1a 	bl	8018210 <rmw_destroy_guard_condition>
 80179dc:	1e05      	subs	r5, r0, #0
 80179de:	6863      	ldr	r3, [r4, #4]
 80179e0:	9901      	ldr	r1, [sp, #4]
 80179e2:	bf18      	it	ne
 80179e4:	2501      	movne	r5, #1
 80179e6:	e7e9      	b.n	80179bc <rcl_guard_condition_fini+0x18>
 80179e8:	250b      	movs	r5, #11
 80179ea:	4628      	mov	r0, r5
 80179ec:	b002      	add	sp, #8
 80179ee:	bd70      	pop	{r4, r5, r6, pc}

080179f0 <rcl_guard_condition_get_default_options>:
 80179f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80179f2:	b087      	sub	sp, #28
 80179f4:	4606      	mov	r6, r0
 80179f6:	4c0b      	ldr	r4, [pc, #44]	; (8017a24 <rcl_guard_condition_get_default_options+0x34>)
 80179f8:	4668      	mov	r0, sp
 80179fa:	f7f4 fbaf 	bl	800c15c <rcutils_get_default_allocator>
 80179fe:	46ee      	mov	lr, sp
 8017a00:	46a4      	mov	ip, r4
 8017a02:	4625      	mov	r5, r4
 8017a04:	4634      	mov	r4, r6
 8017a06:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017a0a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017a0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017a10:	f8de 7000 	ldr.w	r7, [lr]
 8017a14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017a16:	4630      	mov	r0, r6
 8017a18:	f8cc 7000 	str.w	r7, [ip]
 8017a1c:	6027      	str	r7, [r4, #0]
 8017a1e:	b007      	add	sp, #28
 8017a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a22:	bf00      	nop
 8017a24:	200109b4 	.word	0x200109b4

08017a28 <rcl_guard_condition_get_rmw_handle>:
 8017a28:	b110      	cbz	r0, 8017a30 <rcl_guard_condition_get_rmw_handle+0x8>
 8017a2a:	6840      	ldr	r0, [r0, #4]
 8017a2c:	b100      	cbz	r0, 8017a30 <rcl_guard_condition_get_rmw_handle+0x8>
 8017a2e:	6800      	ldr	r0, [r0, #0]
 8017a30:	4770      	bx	lr
 8017a32:	bf00      	nop

08017a34 <rcl_publish>:
 8017a34:	b1f8      	cbz	r0, 8017a76 <rcl_publish+0x42>
 8017a36:	6803      	ldr	r3, [r0, #0]
 8017a38:	b570      	push	{r4, r5, r6, lr}
 8017a3a:	4604      	mov	r4, r0
 8017a3c:	b1b3      	cbz	r3, 8017a6c <rcl_publish+0x38>
 8017a3e:	4616      	mov	r6, r2
 8017a40:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8017a44:	b192      	cbz	r2, 8017a6c <rcl_publish+0x38>
 8017a46:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8017a4a:	460d      	mov	r5, r1
 8017a4c:	f7f7 fb18 	bl	800f080 <rcl_context_is_valid>
 8017a50:	b160      	cbz	r0, 8017a6c <rcl_publish+0x38>
 8017a52:	6823      	ldr	r3, [r4, #0]
 8017a54:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8017a58:	b140      	cbz	r0, 8017a6c <rcl_publish+0x38>
 8017a5a:	b155      	cbz	r5, 8017a72 <rcl_publish+0x3e>
 8017a5c:	4632      	mov	r2, r6
 8017a5e:	4629      	mov	r1, r5
 8017a60:	f000 fc10 	bl	8018284 <rmw_publish>
 8017a64:	3800      	subs	r0, #0
 8017a66:	bf18      	it	ne
 8017a68:	2001      	movne	r0, #1
 8017a6a:	bd70      	pop	{r4, r5, r6, pc}
 8017a6c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8017a70:	bd70      	pop	{r4, r5, r6, pc}
 8017a72:	200b      	movs	r0, #11
 8017a74:	bd70      	pop	{r4, r5, r6, pc}
 8017a76:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8017a7a:	4770      	bx	lr

08017a7c <rcl_publisher_is_valid>:
 8017a7c:	b1a0      	cbz	r0, 8017aa8 <rcl_publisher_is_valid+0x2c>
 8017a7e:	6803      	ldr	r3, [r0, #0]
 8017a80:	b510      	push	{r4, lr}
 8017a82:	4604      	mov	r4, r0
 8017a84:	b173      	cbz	r3, 8017aa4 <rcl_publisher_is_valid+0x28>
 8017a86:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8017a8a:	b15a      	cbz	r2, 8017aa4 <rcl_publisher_is_valid+0x28>
 8017a8c:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8017a90:	f7f7 faf6 	bl	800f080 <rcl_context_is_valid>
 8017a94:	b130      	cbz	r0, 8017aa4 <rcl_publisher_is_valid+0x28>
 8017a96:	6823      	ldr	r3, [r4, #0]
 8017a98:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8017a9c:	3800      	subs	r0, #0
 8017a9e:	bf18      	it	ne
 8017aa0:	2001      	movne	r0, #1
 8017aa2:	bd10      	pop	{r4, pc}
 8017aa4:	2000      	movs	r0, #0
 8017aa6:	bd10      	pop	{r4, pc}
 8017aa8:	2000      	movs	r0, #0
 8017aaa:	4770      	bx	lr

08017aac <rcl_publisher_is_valid_except_context>:
 8017aac:	b130      	cbz	r0, 8017abc <rcl_publisher_is_valid_except_context+0x10>
 8017aae:	6800      	ldr	r0, [r0, #0]
 8017ab0:	b120      	cbz	r0, 8017abc <rcl_publisher_is_valid_except_context+0x10>
 8017ab2:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 8017ab6:	3800      	subs	r0, #0
 8017ab8:	bf18      	it	ne
 8017aba:	2001      	movne	r0, #1
 8017abc:	4770      	bx	lr
 8017abe:	bf00      	nop

08017ac0 <rcl_validate_topic_name>:
 8017ac0:	2800      	cmp	r0, #0
 8017ac2:	f000 8089 	beq.w	8017bd8 <rcl_validate_topic_name+0x118>
 8017ac6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017aca:	460e      	mov	r6, r1
 8017acc:	2900      	cmp	r1, #0
 8017ace:	f000 8085 	beq.w	8017bdc <rcl_validate_topic_name+0x11c>
 8017ad2:	4604      	mov	r4, r0
 8017ad4:	4617      	mov	r7, r2
 8017ad6:	f7e8 fc13 	bl	8000300 <strlen>
 8017ada:	b1b0      	cbz	r0, 8017b0a <rcl_validate_topic_name+0x4a>
 8017adc:	f894 e000 	ldrb.w	lr, [r4]
 8017ae0:	f8df c160 	ldr.w	ip, [pc, #352]	; 8017c44 <rcl_validate_topic_name+0x184>
 8017ae4:	f81c 300e 	ldrb.w	r3, [ip, lr]
 8017ae8:	f013 0304 	ands.w	r3, r3, #4
 8017aec:	d139      	bne.n	8017b62 <rcl_validate_topic_name+0xa2>
 8017aee:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8017af2:	f814 2008 	ldrb.w	r2, [r4, r8]
 8017af6:	2a2f      	cmp	r2, #47	; 0x2f
 8017af8:	d10f      	bne.n	8017b1a <rcl_validate_topic_name+0x5a>
 8017afa:	2202      	movs	r2, #2
 8017afc:	6032      	str	r2, [r6, #0]
 8017afe:	b3a7      	cbz	r7, 8017b6a <rcl_validate_topic_name+0xaa>
 8017b00:	4618      	mov	r0, r3
 8017b02:	f8c7 8000 	str.w	r8, [r7]
 8017b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b0a:	2301      	movs	r3, #1
 8017b0c:	6033      	str	r3, [r6, #0]
 8017b0e:	b367      	cbz	r7, 8017b6a <rcl_validate_topic_name+0xaa>
 8017b10:	2300      	movs	r3, #0
 8017b12:	4618      	mov	r0, r3
 8017b14:	603b      	str	r3, [r7, #0]
 8017b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b1a:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 8017b1e:	461d      	mov	r5, r3
 8017b20:	4619      	mov	r1, r3
 8017b22:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8017b26:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 8017b2a:	f1b9 0f09 	cmp.w	r9, #9
 8017b2e:	d91f      	bls.n	8017b70 <rcl_validate_topic_name+0xb0>
 8017b30:	f022 0920 	bic.w	r9, r2, #32
 8017b34:	f1a9 0941 	sub.w	r9, r9, #65	; 0x41
 8017b38:	f1b9 0f19 	cmp.w	r9, #25
 8017b3c:	d918      	bls.n	8017b70 <rcl_validate_topic_name+0xb0>
 8017b3e:	2a5f      	cmp	r2, #95	; 0x5f
 8017b40:	d024      	beq.n	8017b8c <rcl_validate_topic_name+0xcc>
 8017b42:	2a2f      	cmp	r2, #47	; 0x2f
 8017b44:	d058      	beq.n	8017bf8 <rcl_validate_topic_name+0x138>
 8017b46:	2a7e      	cmp	r2, #126	; 0x7e
 8017b48:	d04a      	beq.n	8017be0 <rcl_validate_topic_name+0x120>
 8017b4a:	2a7b      	cmp	r2, #123	; 0x7b
 8017b4c:	d05b      	beq.n	8017c06 <rcl_validate_topic_name+0x146>
 8017b4e:	2a7d      	cmp	r2, #125	; 0x7d
 8017b50:	d169      	bne.n	8017c26 <rcl_validate_topic_name+0x166>
 8017b52:	2d00      	cmp	r5, #0
 8017b54:	d15c      	bne.n	8017c10 <rcl_validate_topic_name+0x150>
 8017b56:	2305      	movs	r3, #5
 8017b58:	6033      	str	r3, [r6, #0]
 8017b5a:	b137      	cbz	r7, 8017b6a <rcl_validate_topic_name+0xaa>
 8017b5c:	2000      	movs	r0, #0
 8017b5e:	6039      	str	r1, [r7, #0]
 8017b60:	e7d9      	b.n	8017b16 <rcl_validate_topic_name+0x56>
 8017b62:	2304      	movs	r3, #4
 8017b64:	6033      	str	r3, [r6, #0]
 8017b66:	2f00      	cmp	r7, #0
 8017b68:	d1d2      	bne.n	8017b10 <rcl_validate_topic_name+0x50>
 8017b6a:	2000      	movs	r0, #0
 8017b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b70:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017b74:	0752      	lsls	r2, r2, #29
 8017b76:	d509      	bpl.n	8017b8c <rcl_validate_topic_name+0xcc>
 8017b78:	2900      	cmp	r1, #0
 8017b7a:	bf0c      	ite	eq
 8017b7c:	2200      	moveq	r2, #0
 8017b7e:	f005 0201 	andne.w	r2, r5, #1
 8017b82:	b11a      	cbz	r2, 8017b8c <rcl_validate_topic_name+0xcc>
 8017b84:	1e4d      	subs	r5, r1, #1
 8017b86:	429d      	cmp	r5, r3
 8017b88:	d031      	beq.n	8017bee <rcl_validate_topic_name+0x12e>
 8017b8a:	4615      	mov	r5, r2
 8017b8c:	3101      	adds	r1, #1
 8017b8e:	4288      	cmp	r0, r1
 8017b90:	d1c7      	bne.n	8017b22 <rcl_validate_topic_name+0x62>
 8017b92:	2d00      	cmp	r5, #0
 8017b94:	d142      	bne.n	8017c1c <rcl_validate_topic_name+0x15c>
 8017b96:	4628      	mov	r0, r5
 8017b98:	2301      	movs	r3, #1
 8017b9a:	e00c      	b.n	8017bb6 <rcl_validate_topic_name+0xf6>
 8017b9c:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8017ba0:	d101      	bne.n	8017ba6 <rcl_validate_topic_name+0xe6>
 8017ba2:	2801      	cmp	r0, #1
 8017ba4:	d047      	beq.n	8017c36 <rcl_validate_topic_name+0x176>
 8017ba6:	1c5a      	adds	r2, r3, #1
 8017ba8:	428b      	cmp	r3, r1
 8017baa:	f100 0001 	add.w	r0, r0, #1
 8017bae:	f104 0401 	add.w	r4, r4, #1
 8017bb2:	4613      	mov	r3, r2
 8017bb4:	d22e      	bcs.n	8017c14 <rcl_validate_topic_name+0x154>
 8017bb6:	4580      	cmp	r8, r0
 8017bb8:	d0f5      	beq.n	8017ba6 <rcl_validate_topic_name+0xe6>
 8017bba:	7822      	ldrb	r2, [r4, #0]
 8017bbc:	2a2f      	cmp	r2, #47	; 0x2f
 8017bbe:	d1ed      	bne.n	8017b9c <rcl_validate_topic_name+0xdc>
 8017bc0:	7862      	ldrb	r2, [r4, #1]
 8017bc2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017bc6:	0752      	lsls	r2, r2, #29
 8017bc8:	d5ed      	bpl.n	8017ba6 <rcl_validate_topic_name+0xe6>
 8017bca:	2204      	movs	r2, #4
 8017bcc:	6032      	str	r2, [r6, #0]
 8017bce:	2f00      	cmp	r7, #0
 8017bd0:	d0cb      	beq.n	8017b6a <rcl_validate_topic_name+0xaa>
 8017bd2:	2000      	movs	r0, #0
 8017bd4:	603b      	str	r3, [r7, #0]
 8017bd6:	e79e      	b.n	8017b16 <rcl_validate_topic_name+0x56>
 8017bd8:	200b      	movs	r0, #11
 8017bda:	4770      	bx	lr
 8017bdc:	200b      	movs	r0, #11
 8017bde:	e79a      	b.n	8017b16 <rcl_validate_topic_name+0x56>
 8017be0:	2900      	cmp	r1, #0
 8017be2:	d0d3      	beq.n	8017b8c <rcl_validate_topic_name+0xcc>
 8017be4:	2306      	movs	r3, #6
 8017be6:	6033      	str	r3, [r6, #0]
 8017be8:	2f00      	cmp	r7, #0
 8017bea:	d1b7      	bne.n	8017b5c <rcl_validate_topic_name+0x9c>
 8017bec:	e7bd      	b.n	8017b6a <rcl_validate_topic_name+0xaa>
 8017bee:	2309      	movs	r3, #9
 8017bf0:	6033      	str	r3, [r6, #0]
 8017bf2:	2f00      	cmp	r7, #0
 8017bf4:	d1b2      	bne.n	8017b5c <rcl_validate_topic_name+0x9c>
 8017bf6:	e7b8      	b.n	8017b6a <rcl_validate_topic_name+0xaa>
 8017bf8:	2d00      	cmp	r5, #0
 8017bfa:	d0c7      	beq.n	8017b8c <rcl_validate_topic_name+0xcc>
 8017bfc:	2308      	movs	r3, #8
 8017bfe:	6033      	str	r3, [r6, #0]
 8017c00:	2f00      	cmp	r7, #0
 8017c02:	d1ab      	bne.n	8017b5c <rcl_validate_topic_name+0x9c>
 8017c04:	e7b1      	b.n	8017b6a <rcl_validate_topic_name+0xaa>
 8017c06:	2d00      	cmp	r5, #0
 8017c08:	d1f8      	bne.n	8017bfc <rcl_validate_topic_name+0x13c>
 8017c0a:	460b      	mov	r3, r1
 8017c0c:	2501      	movs	r5, #1
 8017c0e:	e7bd      	b.n	8017b8c <rcl_validate_topic_name+0xcc>
 8017c10:	2500      	movs	r5, #0
 8017c12:	e7bb      	b.n	8017b8c <rcl_validate_topic_name+0xcc>
 8017c14:	2300      	movs	r3, #0
 8017c16:	4618      	mov	r0, r3
 8017c18:	6033      	str	r3, [r6, #0]
 8017c1a:	e77c      	b.n	8017b16 <rcl_validate_topic_name+0x56>
 8017c1c:	2205      	movs	r2, #5
 8017c1e:	6032      	str	r2, [r6, #0]
 8017c20:	2f00      	cmp	r7, #0
 8017c22:	d1d6      	bne.n	8017bd2 <rcl_validate_topic_name+0x112>
 8017c24:	e7a1      	b.n	8017b6a <rcl_validate_topic_name+0xaa>
 8017c26:	2d00      	cmp	r5, #0
 8017c28:	bf14      	ite	ne
 8017c2a:	2308      	movne	r3, #8
 8017c2c:	2303      	moveq	r3, #3
 8017c2e:	6033      	str	r3, [r6, #0]
 8017c30:	2f00      	cmp	r7, #0
 8017c32:	d193      	bne.n	8017b5c <rcl_validate_topic_name+0x9c>
 8017c34:	e799      	b.n	8017b6a <rcl_validate_topic_name+0xaa>
 8017c36:	2307      	movs	r3, #7
 8017c38:	6033      	str	r3, [r6, #0]
 8017c3a:	2f00      	cmp	r7, #0
 8017c3c:	d095      	beq.n	8017b6a <rcl_validate_topic_name+0xaa>
 8017c3e:	2301      	movs	r3, #1
 8017c40:	e7c7      	b.n	8017bd2 <rcl_validate_topic_name+0x112>
 8017c42:	bf00      	nop
 8017c44:	0801bf74 	.word	0x0801bf74

08017c48 <rcutils_split>:
 8017c48:	b082      	sub	sp, #8
 8017c4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c4e:	b08d      	sub	sp, #52	; 0x34
 8017c50:	ac16      	add	r4, sp, #88	; 0x58
 8017c52:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8017c54:	e884 000c 	stmia.w	r4, {r2, r3}
 8017c58:	2f00      	cmp	r7, #0
 8017c5a:	f000 80a8 	beq.w	8017dae <rcutils_split+0x166>
 8017c5e:	4605      	mov	r5, r0
 8017c60:	2800      	cmp	r0, #0
 8017c62:	d07e      	beq.n	8017d62 <rcutils_split+0x11a>
 8017c64:	7803      	ldrb	r3, [r0, #0]
 8017c66:	2b00      	cmp	r3, #0
 8017c68:	d07b      	beq.n	8017d62 <rcutils_split+0x11a>
 8017c6a:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
 8017c6e:	460e      	mov	r6, r1
 8017c70:	9203      	str	r2, [sp, #12]
 8017c72:	f107 0408 	add.w	r4, r7, #8
 8017c76:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
 8017c7a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017c7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017c80:	4628      	mov	r0, r5
 8017c82:	f8c4 b000 	str.w	fp, [r4]
 8017c86:	f7e8 fb3b 	bl	8000300 <strlen>
 8017c8a:	782c      	ldrb	r4, [r5, #0]
 8017c8c:	182b      	adds	r3, r5, r0
 8017c8e:	1ba4      	subs	r4, r4, r6
 8017c90:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8017c94:	fab4 f484 	clz	r4, r4
 8017c98:	42b3      	cmp	r3, r6
 8017c9a:	bf14      	ite	ne
 8017c9c:	4680      	movne	r8, r0
 8017c9e:	f1a0 0801 	subeq.w	r8, r0, #1
 8017ca2:	2001      	movs	r0, #1
 8017ca4:	0964      	lsrs	r4, r4, #5
 8017ca6:	6038      	str	r0, [r7, #0]
 8017ca8:	4544      	cmp	r4, r8
 8017caa:	d26b      	bcs.n	8017d84 <rcutils_split+0x13c>
 8017cac:	192b      	adds	r3, r5, r4
 8017cae:	eb05 0108 	add.w	r1, r5, r8
 8017cb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017cb6:	42b2      	cmp	r2, r6
 8017cb8:	d101      	bne.n	8017cbe <rcutils_split+0x76>
 8017cba:	3001      	adds	r0, #1
 8017cbc:	6038      	str	r0, [r7, #0]
 8017cbe:	4299      	cmp	r1, r3
 8017cc0:	d1f7      	bne.n	8017cb2 <rcutils_split+0x6a>
 8017cc2:	9b03      	ldr	r3, [sp, #12]
 8017cc4:	0080      	lsls	r0, r0, #2
 8017cc6:	4659      	mov	r1, fp
 8017cc8:	4798      	blx	r3
 8017cca:	4603      	mov	r3, r0
 8017ccc:	6078      	str	r0, [r7, #4]
 8017cce:	2800      	cmp	r0, #0
 8017cd0:	d05f      	beq.n	8017d92 <rcutils_split+0x14a>
 8017cd2:	f04f 0a00 	mov.w	sl, #0
 8017cd6:	46a1      	mov	r9, r4
 8017cd8:	e002      	b.n	8017ce0 <rcutils_split+0x98>
 8017cda:	3401      	adds	r4, #1
 8017cdc:	45a0      	cmp	r8, r4
 8017cde:	d922      	bls.n	8017d26 <rcutils_split+0xde>
 8017ce0:	5d2a      	ldrb	r2, [r5, r4]
 8017ce2:	42b2      	cmp	r2, r6
 8017ce4:	d1f9      	bne.n	8017cda <rcutils_split+0x92>
 8017ce6:	45a1      	cmp	r9, r4
 8017ce8:	eba4 0209 	sub.w	r2, r4, r9
 8017cec:	d032      	beq.n	8017d54 <rcutils_split+0x10c>
 8017cee:	4659      	mov	r1, fp
 8017cf0:	1c90      	adds	r0, r2, #2
 8017cf2:	9302      	str	r3, [sp, #8]
 8017cf4:	9b03      	ldr	r3, [sp, #12]
 8017cf6:	9201      	str	r2, [sp, #4]
 8017cf8:	4798      	blx	r3
 8017cfa:	9a01      	ldr	r2, [sp, #4]
 8017cfc:	9b02      	ldr	r3, [sp, #8]
 8017cfe:	1c51      	adds	r1, r2, #1
 8017d00:	687a      	ldr	r2, [r7, #4]
 8017d02:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 8017d06:	eb05 0309 	add.w	r3, r5, r9
 8017d0a:	f852 002a 	ldr.w	r0, [r2, sl, lsl #2]
 8017d0e:	2800      	cmp	r0, #0
 8017d10:	d04f      	beq.n	8017db2 <rcutils_split+0x16a>
 8017d12:	4a2b      	ldr	r2, [pc, #172]	; (8017dc0 <rcutils_split+0x178>)
 8017d14:	f10a 0a01 	add.w	sl, sl, #1
 8017d18:	f001 fbb2 	bl	8019480 <sniprintf>
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	3401      	adds	r4, #1
 8017d20:	45a0      	cmp	r8, r4
 8017d22:	46a1      	mov	r9, r4
 8017d24:	d8dc      	bhi.n	8017ce0 <rcutils_split+0x98>
 8017d26:	45a1      	cmp	r9, r4
 8017d28:	d039      	beq.n	8017d9e <rcutils_split+0x156>
 8017d2a:	eba4 0409 	sub.w	r4, r4, r9
 8017d2e:	4659      	mov	r1, fp
 8017d30:	9301      	str	r3, [sp, #4]
 8017d32:	1ca0      	adds	r0, r4, #2
 8017d34:	9b03      	ldr	r3, [sp, #12]
 8017d36:	4798      	blx	r3
 8017d38:	9b01      	ldr	r3, [sp, #4]
 8017d3a:	4a21      	ldr	r2, [pc, #132]	; (8017dc0 <rcutils_split+0x178>)
 8017d3c:	1c61      	adds	r1, r4, #1
 8017d3e:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 8017d42:	eb05 0309 	add.w	r3, r5, r9
 8017d46:	6878      	ldr	r0, [r7, #4]
 8017d48:	2500      	movs	r5, #0
 8017d4a:	f850 002a 	ldr.w	r0, [r0, sl, lsl #2]
 8017d4e:	f001 fb97 	bl	8019480 <sniprintf>
 8017d52:	e011      	b.n	8017d78 <rcutils_split+0x130>
 8017d54:	683a      	ldr	r2, [r7, #0]
 8017d56:	2100      	movs	r1, #0
 8017d58:	3a01      	subs	r2, #1
 8017d5a:	603a      	str	r2, [r7, #0]
 8017d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8017d60:	e7dd      	b.n	8017d1e <rcutils_split+0xd6>
 8017d62:	ac04      	add	r4, sp, #16
 8017d64:	a804      	add	r0, sp, #16
 8017d66:	f000 f82d 	bl	8017dc4 <rcutils_get_zero_initialized_string_array>
 8017d6a:	2500      	movs	r5, #0
 8017d6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017d6e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8017d70:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8017d74:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8017d78:	4628      	mov	r0, r5
 8017d7a:	b00d      	add	sp, #52	; 0x34
 8017d7c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d80:	b002      	add	sp, #8
 8017d82:	4770      	bx	lr
 8017d84:	9b03      	ldr	r3, [sp, #12]
 8017d86:	4659      	mov	r1, fp
 8017d88:	2004      	movs	r0, #4
 8017d8a:	4798      	blx	r3
 8017d8c:	4603      	mov	r3, r0
 8017d8e:	6078      	str	r0, [r7, #4]
 8017d90:	b928      	cbnz	r0, 8017d9e <rcutils_split+0x156>
 8017d92:	4638      	mov	r0, r7
 8017d94:	f000 f834 	bl	8017e00 <rcutils_string_array_fini>
 8017d98:	b970      	cbnz	r0, 8017db8 <rcutils_split+0x170>
 8017d9a:	2502      	movs	r5, #2
 8017d9c:	e7ec      	b.n	8017d78 <rcutils_split+0x130>
 8017d9e:	683a      	ldr	r2, [r7, #0]
 8017da0:	2100      	movs	r1, #0
 8017da2:	3a01      	subs	r2, #1
 8017da4:	460d      	mov	r5, r1
 8017da6:	603a      	str	r2, [r7, #0]
 8017da8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8017dac:	e7e4      	b.n	8017d78 <rcutils_split+0x130>
 8017dae:	250b      	movs	r5, #11
 8017db0:	e7e2      	b.n	8017d78 <rcutils_split+0x130>
 8017db2:	f8c7 a000 	str.w	sl, [r7]
 8017db6:	e7ec      	b.n	8017d92 <rcutils_split+0x14a>
 8017db8:	2502      	movs	r5, #2
 8017dba:	f7f4 fa01 	bl	800c1c0 <rcutils_reset_error>
 8017dbe:	e7db      	b.n	8017d78 <rcutils_split+0x130>
 8017dc0:	0801baa4 	.word	0x0801baa4

08017dc4 <rcutils_get_zero_initialized_string_array>:
 8017dc4:	b570      	push	{r4, r5, r6, lr}
 8017dc6:	b086      	sub	sp, #24
 8017dc8:	4606      	mov	r6, r0
 8017dca:	4c0c      	ldr	r4, [pc, #48]	; (8017dfc <rcutils_get_zero_initialized_string_array+0x38>)
 8017dcc:	4668      	mov	r0, sp
 8017dce:	f7f4 f999 	bl	800c104 <rcutils_get_zero_initialized_allocator>
 8017dd2:	46ee      	mov	lr, sp
 8017dd4:	f104 0508 	add.w	r5, r4, #8
 8017dd8:	46a4      	mov	ip, r4
 8017dda:	4634      	mov	r4, r6
 8017ddc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017de0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017de2:	f8de 3000 	ldr.w	r3, [lr]
 8017de6:	602b      	str	r3, [r5, #0]
 8017de8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017dec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017dee:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8017df2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8017df6:	4630      	mov	r0, r6
 8017df8:	b006      	add	sp, #24
 8017dfa:	bd70      	pop	{r4, r5, r6, pc}
 8017dfc:	200109c8 	.word	0x200109c8

08017e00 <rcutils_string_array_fini>:
 8017e00:	b328      	cbz	r0, 8017e4e <rcutils_string_array_fini+0x4e>
 8017e02:	b570      	push	{r4, r5, r6, lr}
 8017e04:	4604      	mov	r4, r0
 8017e06:	6840      	ldr	r0, [r0, #4]
 8017e08:	b1e0      	cbz	r0, 8017e44 <rcutils_string_array_fini+0x44>
 8017e0a:	f104 0008 	add.w	r0, r4, #8
 8017e0e:	f7f4 f9b3 	bl	800c178 <rcutils_allocator_is_valid>
 8017e12:	b1c0      	cbz	r0, 8017e46 <rcutils_string_array_fini+0x46>
 8017e14:	6823      	ldr	r3, [r4, #0]
 8017e16:	b1c3      	cbz	r3, 8017e4a <rcutils_string_array_fini+0x4a>
 8017e18:	2500      	movs	r5, #0
 8017e1a:	6860      	ldr	r0, [r4, #4]
 8017e1c:	462e      	mov	r6, r5
 8017e1e:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8017e22:	68e3      	ldr	r3, [r4, #12]
 8017e24:	69a1      	ldr	r1, [r4, #24]
 8017e26:	4798      	blx	r3
 8017e28:	e9d4 3000 	ldrd	r3, r0, [r4]
 8017e2c:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8017e30:	3501      	adds	r5, #1
 8017e32:	429d      	cmp	r5, r3
 8017e34:	d3f3      	bcc.n	8017e1e <rcutils_string_array_fini+0x1e>
 8017e36:	68e3      	ldr	r3, [r4, #12]
 8017e38:	69a1      	ldr	r1, [r4, #24]
 8017e3a:	4798      	blx	r3
 8017e3c:	2300      	movs	r3, #0
 8017e3e:	4618      	mov	r0, r3
 8017e40:	e9c4 3300 	strd	r3, r3, [r4]
 8017e44:	bd70      	pop	{r4, r5, r6, pc}
 8017e46:	200b      	movs	r0, #11
 8017e48:	bd70      	pop	{r4, r5, r6, pc}
 8017e4a:	6860      	ldr	r0, [r4, #4]
 8017e4c:	e7f3      	b.n	8017e36 <rcutils_string_array_fini+0x36>
 8017e4e:	200b      	movs	r0, #11
 8017e50:	4770      	bx	lr
 8017e52:	bf00      	nop

08017e54 <rmw_get_zero_initialized_discovery_options>:
 8017e54:	b510      	push	{r4, lr}
 8017e56:	4604      	mov	r4, r0
 8017e58:	2220      	movs	r2, #32
 8017e5a:	2100      	movs	r1, #0
 8017e5c:	f001 fbea 	bl	8019634 <memset>
 8017e60:	4620      	mov	r0, r4
 8017e62:	bd10      	pop	{r4, pc}

08017e64 <rmw_discovery_options_init>:
 8017e64:	b570      	push	{r4, r5, r6, lr}
 8017e66:	b318      	cbz	r0, 8017eb0 <rmw_discovery_options_init+0x4c>
 8017e68:	4604      	mov	r4, r0
 8017e6a:	4610      	mov	r0, r2
 8017e6c:	460e      	mov	r6, r1
 8017e6e:	4615      	mov	r5, r2
 8017e70:	f7f4 f982 	bl	800c178 <rcutils_allocator_is_valid>
 8017e74:	b1e0      	cbz	r0, 8017eb0 <rmw_discovery_options_init+0x4c>
 8017e76:	68a3      	ldr	r3, [r4, #8]
 8017e78:	b9d3      	cbnz	r3, 8017eb0 <rmw_discovery_options_init+0x4c>
 8017e7a:	6863      	ldr	r3, [r4, #4]
 8017e7c:	b9c3      	cbnz	r3, 8017eb0 <rmw_discovery_options_init+0x4c>
 8017e7e:	7823      	ldrb	r3, [r4, #0]
 8017e80:	b90b      	cbnz	r3, 8017e86 <rmw_discovery_options_init+0x22>
 8017e82:	2302      	movs	r3, #2
 8017e84:	7023      	strb	r3, [r4, #0]
 8017e86:	b1a6      	cbz	r6, 8017eb2 <rmw_discovery_options_init+0x4e>
 8017e88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8017e8c:	4630      	mov	r0, r6
 8017e8e:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 8017e92:	4798      	blx	r3
 8017e94:	6060      	str	r0, [r4, #4]
 8017e96:	b170      	cbz	r0, 8017eb6 <rmw_discovery_options_init+0x52>
 8017e98:	f104 0c0c 	add.w	ip, r4, #12
 8017e9c:	60a6      	str	r6, [r4, #8]
 8017e9e:	2600      	movs	r6, #0
 8017ea0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017ea2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017ea6:	682b      	ldr	r3, [r5, #0]
 8017ea8:	4630      	mov	r0, r6
 8017eaa:	f8cc 3000 	str.w	r3, [ip]
 8017eae:	bd70      	pop	{r4, r5, r6, pc}
 8017eb0:	260b      	movs	r6, #11
 8017eb2:	4630      	mov	r0, r6
 8017eb4:	bd70      	pop	{r4, r5, r6, pc}
 8017eb6:	260a      	movs	r6, #10
 8017eb8:	e7fb      	b.n	8017eb2 <rmw_discovery_options_init+0x4e>
 8017eba:	bf00      	nop

08017ebc <rmw_time_equal>:
 8017ebc:	b4f0      	push	{r4, r5, r6, r7}
 8017ebe:	b084      	sub	sp, #16
 8017ec0:	ac04      	add	r4, sp, #16
 8017ec2:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8017ec6:	4603      	mov	r3, r0
 8017ec8:	4925      	ldr	r1, [pc, #148]	; (8017f60 <rmw_time_equal+0xa4>)
 8017eca:	9d01      	ldr	r5, [sp, #4]
 8017ecc:	4610      	mov	r0, r2
 8017ece:	4299      	cmp	r1, r3
 8017ed0:	f04f 0202 	mov.w	r2, #2
 8017ed4:	9e03      	ldr	r6, [sp, #12]
 8017ed6:	41aa      	sbcs	r2, r5
 8017ed8:	d330      	bcc.n	8017f3c <rmw_time_equal+0x80>
 8017eda:	4c22      	ldr	r4, [pc, #136]	; (8017f64 <rmw_time_equal+0xa8>)
 8017edc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017ee0:	fba3 3204 	umull	r3, r2, r3, r4
 8017ee4:	fb04 2205 	mla	r2, r4, r5, r2
 8017ee8:	43dd      	mvns	r5, r3
 8017eea:	1a8c      	subs	r4, r1, r2
 8017eec:	4285      	cmp	r5, r0
 8017eee:	41b4      	sbcs	r4, r6
 8017ef0:	d332      	bcc.n	8017f58 <rmw_time_equal+0x9c>
 8017ef2:	eb10 0c03 	adds.w	ip, r0, r3
 8017ef6:	eb42 0106 	adc.w	r1, r2, r6
 8017efa:	4819      	ldr	r0, [pc, #100]	; (8017f60 <rmw_time_equal+0xa4>)
 8017efc:	2202      	movs	r2, #2
 8017efe:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8017f00:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8017f02:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8017f06:	4298      	cmp	r0, r3
 8017f08:	41b2      	sbcs	r2, r6
 8017f0a:	d31c      	bcc.n	8017f46 <rmw_time_equal+0x8a>
 8017f0c:	4c15      	ldr	r4, [pc, #84]	; (8017f64 <rmw_time_equal+0xa8>)
 8017f0e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8017f12:	fba3 3204 	umull	r3, r2, r3, r4
 8017f16:	fb04 2206 	mla	r2, r4, r6, r2
 8017f1a:	43de      	mvns	r6, r3
 8017f1c:	1a84      	subs	r4, r0, r2
 8017f1e:	42ae      	cmp	r6, r5
 8017f20:	41bc      	sbcs	r4, r7
 8017f22:	d315      	bcc.n	8017f50 <rmw_time_equal+0x94>
 8017f24:	195b      	adds	r3, r3, r5
 8017f26:	eb42 0207 	adc.w	r2, r2, r7
 8017f2a:	428a      	cmp	r2, r1
 8017f2c:	bf08      	it	eq
 8017f2e:	4563      	cmpeq	r3, ip
 8017f30:	bf0c      	ite	eq
 8017f32:	2001      	moveq	r0, #1
 8017f34:	2000      	movne	r0, #0
 8017f36:	b004      	add	sp, #16
 8017f38:	bcf0      	pop	{r4, r5, r6, r7}
 8017f3a:	4770      	bx	lr
 8017f3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8017f40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017f44:	e7d9      	b.n	8017efa <rmw_time_equal+0x3e>
 8017f46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017f4a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8017f4e:	e7ec      	b.n	8017f2a <rmw_time_equal+0x6e>
 8017f50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017f54:	4602      	mov	r2, r0
 8017f56:	e7e8      	b.n	8017f2a <rmw_time_equal+0x6e>
 8017f58:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8017f5c:	e7cd      	b.n	8017efa <rmw_time_equal+0x3e>
 8017f5e:	bf00      	nop
 8017f60:	25c17d04 	.word	0x25c17d04
 8017f64:	3b9aca00 	.word	0x3b9aca00

08017f68 <rmw_time_total_nsec>:
 8017f68:	b470      	push	{r4, r5, r6}
 8017f6a:	b085      	sub	sp, #20
 8017f6c:	ac04      	add	r4, sp, #16
 8017f6e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8017f72:	4603      	mov	r3, r0
 8017f74:	4913      	ldr	r1, [pc, #76]	; (8017fc4 <rmw_time_total_nsec+0x5c>)
 8017f76:	9d01      	ldr	r5, [sp, #4]
 8017f78:	4610      	mov	r0, r2
 8017f7a:	4299      	cmp	r1, r3
 8017f7c:	f04f 0202 	mov.w	r2, #2
 8017f80:	9e03      	ldr	r6, [sp, #12]
 8017f82:	41aa      	sbcs	r2, r5
 8017f84:	d311      	bcc.n	8017faa <rmw_time_total_nsec+0x42>
 8017f86:	4c10      	ldr	r4, [pc, #64]	; (8017fc8 <rmw_time_total_nsec+0x60>)
 8017f88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017f8c:	fba3 3204 	umull	r3, r2, r3, r4
 8017f90:	fb04 2205 	mla	r2, r4, r5, r2
 8017f94:	43dd      	mvns	r5, r3
 8017f96:	1a8c      	subs	r4, r1, r2
 8017f98:	4285      	cmp	r5, r0
 8017f9a:	41b4      	sbcs	r4, r6
 8017f9c:	d30c      	bcc.n	8017fb8 <rmw_time_total_nsec+0x50>
 8017f9e:	1818      	adds	r0, r3, r0
 8017fa0:	eb42 0106 	adc.w	r1, r2, r6
 8017fa4:	b005      	add	sp, #20
 8017fa6:	bc70      	pop	{r4, r5, r6}
 8017fa8:	4770      	bx	lr
 8017faa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017fae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017fb2:	b005      	add	sp, #20
 8017fb4:	bc70      	pop	{r4, r5, r6}
 8017fb6:	4770      	bx	lr
 8017fb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017fbc:	b005      	add	sp, #20
 8017fbe:	bc70      	pop	{r4, r5, r6}
 8017fc0:	4770      	bx	lr
 8017fc2:	bf00      	nop
 8017fc4:	25c17d04 	.word	0x25c17d04
 8017fc8:	3b9aca00 	.word	0x3b9aca00

08017fcc <on_status>:
 8017fcc:	b082      	sub	sp, #8
 8017fce:	b002      	add	sp, #8
 8017fd0:	4770      	bx	lr
 8017fd2:	bf00      	nop

08017fd4 <on_topic>:
 8017fd4:	4a23      	ldr	r2, [pc, #140]	; (8018064 <on_topic+0x90>)
 8017fd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fda:	6812      	ldr	r2, [r2, #0]
 8017fdc:	b094      	sub	sp, #80	; 0x50
 8017fde:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8017fe0:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 8017fe4:	9113      	str	r1, [sp, #76]	; 0x4c
 8017fe6:	9312      	str	r3, [sp, #72]	; 0x48
 8017fe8:	b3c2      	cbz	r2, 801805c <on_topic+0x88>
 8017fea:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8017fee:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 8017ff2:	e001      	b.n	8017ff8 <on_topic+0x24>
 8017ff4:	6852      	ldr	r2, [r2, #4]
 8017ff6:	b38a      	cbz	r2, 801805c <on_topic+0x88>
 8017ff8:	6894      	ldr	r4, [r2, #8]
 8017ffa:	8aa3      	ldrh	r3, [r4, #20]
 8017ffc:	428b      	cmp	r3, r1
 8017ffe:	d1f9      	bne.n	8017ff4 <on_topic+0x20>
 8018000:	7da3      	ldrb	r3, [r4, #22]
 8018002:	4283      	cmp	r3, r0
 8018004:	d1f6      	bne.n	8017ff4 <on_topic+0x20>
 8018006:	2248      	movs	r2, #72	; 0x48
 8018008:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801800c:	4668      	mov	r0, sp
 801800e:	f001 fc86 	bl	801991e <memcpy>
 8018012:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8018016:	4620      	mov	r0, r4
 8018018:	cb0c      	ldmia	r3, {r2, r3}
 801801a:	f7fb fdf9 	bl	8013c10 <rmw_uxrce_get_static_input_buffer_for_entity>
 801801e:	4607      	mov	r7, r0
 8018020:	b1e0      	cbz	r0, 801805c <on_topic+0x88>
 8018022:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8018026:	462a      	mov	r2, r5
 8018028:	4630      	mov	r0, r6
 801802a:	f108 0110 	add.w	r1, r8, #16
 801802e:	f7f4 fc43 	bl	800c8b8 <ucdr_deserialize_array_uint8_t>
 8018032:	b930      	cbnz	r0, 8018042 <on_topic+0x6e>
 8018034:	4639      	mov	r1, r7
 8018036:	480c      	ldr	r0, [pc, #48]	; (8018068 <on_topic+0x94>)
 8018038:	b014      	add	sp, #80	; 0x50
 801803a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801803e:	f000 b8bd 	b.w	80181bc <put_memory>
 8018042:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 8018046:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 801804a:	f000 f97b 	bl	8018344 <rmw_uros_epoch_nanos>
 801804e:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 8018052:	2305      	movs	r3, #5
 8018054:	e942 0102 	strd	r0, r1, [r2, #-8]
 8018058:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 801805c:	b014      	add	sp, #80	; 0x50
 801805e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018062:	bf00      	nop
 8018064:	2001090c 	.word	0x2001090c
 8018068:	200108fc 	.word	0x200108fc

0801806c <on_request>:
 801806c:	4824      	ldr	r0, [pc, #144]	; (8018100 <on_request+0x94>)
 801806e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018072:	6800      	ldr	r0, [r0, #0]
 8018074:	b094      	sub	sp, #80	; 0x50
 8018076:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8018078:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801807c:	9113      	str	r1, [sp, #76]	; 0x4c
 801807e:	2800      	cmp	r0, #0
 8018080:	d03b      	beq.n	80180fa <on_request+0x8e>
 8018082:	461d      	mov	r5, r3
 8018084:	e001      	b.n	801808a <on_request+0x1e>
 8018086:	6840      	ldr	r0, [r0, #4]
 8018088:	b3b8      	cbz	r0, 80180fa <on_request+0x8e>
 801808a:	6884      	ldr	r4, [r0, #8]
 801808c:	8b21      	ldrh	r1, [r4, #24]
 801808e:	4291      	cmp	r1, r2
 8018090:	d1f9      	bne.n	8018086 <on_request+0x1a>
 8018092:	2248      	movs	r2, #72	; 0x48
 8018094:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8018098:	4668      	mov	r0, sp
 801809a:	f001 fc40 	bl	801991e <memcpy>
 801809e:	f104 0320 	add.w	r3, r4, #32
 80180a2:	4620      	mov	r0, r4
 80180a4:	cb0c      	ldmia	r3, {r2, r3}
 80180a6:	f7fb fdb3 	bl	8013c10 <rmw_uxrce_get_static_input_buffer_for_entity>
 80180aa:	4680      	mov	r8, r0
 80180ac:	b328      	cbz	r0, 80180fa <on_request+0x8e>
 80180ae:	4630      	mov	r0, r6
 80180b0:	f8d8 6008 	ldr.w	r6, [r8, #8]
 80180b4:	463a      	mov	r2, r7
 80180b6:	f106 0110 	add.w	r1, r6, #16
 80180ba:	f7f4 fbfd 	bl	800c8b8 <ucdr_deserialize_array_uint8_t>
 80180be:	b930      	cbnz	r0, 80180ce <on_request+0x62>
 80180c0:	4641      	mov	r1, r8
 80180c2:	4810      	ldr	r0, [pc, #64]	; (8018104 <on_request+0x98>)
 80180c4:	b014      	add	sp, #80	; 0x50
 80180c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80180ca:	f000 b877 	b.w	80181bc <put_memory>
 80180ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80180d0:	f606 0c28 	addw	ip, r6, #2088	; 0x828
 80180d4:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 80180d8:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 80180dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80180e0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80180e4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80180e8:	f000 f92c 	bl	8018344 <rmw_uros_epoch_nanos>
 80180ec:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 80180f0:	2303      	movs	r3, #3
 80180f2:	e942 0102 	strd	r0, r1, [r2, #-8]
 80180f6:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 80180fa:	b014      	add	sp, #80	; 0x50
 80180fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018100:	200108dc 	.word	0x200108dc
 8018104:	200108fc 	.word	0x200108fc

08018108 <on_reply>:
 8018108:	4822      	ldr	r0, [pc, #136]	; (8018194 <on_reply+0x8c>)
 801810a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801810e:	6800      	ldr	r0, [r0, #0]
 8018110:	b094      	sub	sp, #80	; 0x50
 8018112:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8018114:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 8018118:	9113      	str	r1, [sp, #76]	; 0x4c
 801811a:	b3b8      	cbz	r0, 801818c <on_reply+0x84>
 801811c:	461d      	mov	r5, r3
 801811e:	e001      	b.n	8018124 <on_reply+0x1c>
 8018120:	6840      	ldr	r0, [r0, #4]
 8018122:	b398      	cbz	r0, 801818c <on_reply+0x84>
 8018124:	6884      	ldr	r4, [r0, #8]
 8018126:	8b21      	ldrh	r1, [r4, #24]
 8018128:	4291      	cmp	r1, r2
 801812a:	d1f9      	bne.n	8018120 <on_reply+0x18>
 801812c:	2248      	movs	r2, #72	; 0x48
 801812e:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8018132:	4668      	mov	r0, sp
 8018134:	f001 fbf3 	bl	801991e <memcpy>
 8018138:	f104 0320 	add.w	r3, r4, #32
 801813c:	4620      	mov	r0, r4
 801813e:	cb0c      	ldmia	r3, {r2, r3}
 8018140:	f7fb fd66 	bl	8013c10 <rmw_uxrce_get_static_input_buffer_for_entity>
 8018144:	4680      	mov	r8, r0
 8018146:	b308      	cbz	r0, 801818c <on_reply+0x84>
 8018148:	4630      	mov	r0, r6
 801814a:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801814e:	463a      	mov	r2, r7
 8018150:	f106 0110 	add.w	r1, r6, #16
 8018154:	f7f4 fbb0 	bl	800c8b8 <ucdr_deserialize_array_uint8_t>
 8018158:	b930      	cbnz	r0, 8018168 <on_reply+0x60>
 801815a:	4641      	mov	r1, r8
 801815c:	480e      	ldr	r0, [pc, #56]	; (8018198 <on_reply+0x90>)
 801815e:	b014      	add	sp, #80	; 0x50
 8018160:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018164:	f000 b82a 	b.w	80181bc <put_memory>
 8018168:	2200      	movs	r2, #0
 801816a:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801816e:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 8018172:	f8c6 282c 	str.w	r2, [r6, #2092]	; 0x82c
 8018176:	f8c6 5828 	str.w	r5, [r6, #2088]	; 0x828
 801817a:	f000 f8e3 	bl	8018344 <rmw_uros_epoch_nanos>
 801817e:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 8018182:	2304      	movs	r3, #4
 8018184:	e942 0102 	strd	r0, r1, [r2, #-8]
 8018188:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801818c:	b014      	add	sp, #80	; 0x50
 801818e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018192:	bf00      	nop
 8018194:	2000bf28 	.word	0x2000bf28
 8018198:	200108fc 	.word	0x200108fc

0801819c <get_memory>:
 801819c:	4603      	mov	r3, r0
 801819e:	6840      	ldr	r0, [r0, #4]
 80181a0:	b158      	cbz	r0, 80181ba <get_memory+0x1e>
 80181a2:	6842      	ldr	r2, [r0, #4]
 80181a4:	605a      	str	r2, [r3, #4]
 80181a6:	b10a      	cbz	r2, 80181ac <get_memory+0x10>
 80181a8:	2100      	movs	r1, #0
 80181aa:	6011      	str	r1, [r2, #0]
 80181ac:	681a      	ldr	r2, [r3, #0]
 80181ae:	6042      	str	r2, [r0, #4]
 80181b0:	b102      	cbz	r2, 80181b4 <get_memory+0x18>
 80181b2:	6010      	str	r0, [r2, #0]
 80181b4:	2200      	movs	r2, #0
 80181b6:	6002      	str	r2, [r0, #0]
 80181b8:	6018      	str	r0, [r3, #0]
 80181ba:	4770      	bx	lr

080181bc <put_memory>:
 80181bc:	680b      	ldr	r3, [r1, #0]
 80181be:	b10b      	cbz	r3, 80181c4 <put_memory+0x8>
 80181c0:	684a      	ldr	r2, [r1, #4]
 80181c2:	605a      	str	r2, [r3, #4]
 80181c4:	684a      	ldr	r2, [r1, #4]
 80181c6:	b102      	cbz	r2, 80181ca <put_memory+0xe>
 80181c8:	6013      	str	r3, [r2, #0]
 80181ca:	6803      	ldr	r3, [r0, #0]
 80181cc:	428b      	cmp	r3, r1
 80181ce:	6843      	ldr	r3, [r0, #4]
 80181d0:	bf08      	it	eq
 80181d2:	6002      	streq	r2, [r0, #0]
 80181d4:	604b      	str	r3, [r1, #4]
 80181d6:	b103      	cbz	r3, 80181da <put_memory+0x1e>
 80181d8:	6019      	str	r1, [r3, #0]
 80181da:	2300      	movs	r3, #0
 80181dc:	600b      	str	r3, [r1, #0]
 80181de:	6041      	str	r1, [r0, #4]
 80181e0:	4770      	bx	lr
 80181e2:	bf00      	nop

080181e4 <rmw_create_guard_condition>:
 80181e4:	b538      	push	{r3, r4, r5, lr}
 80181e6:	4605      	mov	r5, r0
 80181e8:	4808      	ldr	r0, [pc, #32]	; (801820c <rmw_create_guard_condition+0x28>)
 80181ea:	f7ff ffd7 	bl	801819c <get_memory>
 80181ee:	4603      	mov	r3, r0
 80181f0:	b148      	cbz	r0, 8018206 <rmw_create_guard_condition+0x22>
 80181f2:	6884      	ldr	r4, [r0, #8]
 80181f4:	2300      	movs	r3, #0
 80181f6:	61e5      	str	r5, [r4, #28]
 80181f8:	7423      	strb	r3, [r4, #16]
 80181fa:	f7fa fa99 	bl	8012730 <rmw_get_implementation_identifier>
 80181fe:	f104 0314 	add.w	r3, r4, #20
 8018202:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8018206:	4618      	mov	r0, r3
 8018208:	bd38      	pop	{r3, r4, r5, pc}
 801820a:	bf00      	nop
 801820c:	2001089c 	.word	0x2001089c

08018210 <rmw_destroy_guard_condition>:
 8018210:	b508      	push	{r3, lr}
 8018212:	4b08      	ldr	r3, [pc, #32]	; (8018234 <rmw_destroy_guard_condition+0x24>)
 8018214:	6819      	ldr	r1, [r3, #0]
 8018216:	b911      	cbnz	r1, 801821e <rmw_destroy_guard_condition+0xe>
 8018218:	e00a      	b.n	8018230 <rmw_destroy_guard_condition+0x20>
 801821a:	6849      	ldr	r1, [r1, #4]
 801821c:	b141      	cbz	r1, 8018230 <rmw_destroy_guard_condition+0x20>
 801821e:	688b      	ldr	r3, [r1, #8]
 8018220:	3314      	adds	r3, #20
 8018222:	4298      	cmp	r0, r3
 8018224:	d1f9      	bne.n	801821a <rmw_destroy_guard_condition+0xa>
 8018226:	4803      	ldr	r0, [pc, #12]	; (8018234 <rmw_destroy_guard_condition+0x24>)
 8018228:	f7ff ffc8 	bl	80181bc <put_memory>
 801822c:	2000      	movs	r0, #0
 801822e:	bd08      	pop	{r3, pc}
 8018230:	2001      	movs	r0, #1
 8018232:	bd08      	pop	{r3, pc}
 8018234:	2001089c 	.word	0x2001089c

08018238 <destroy_topic>:
 8018238:	b538      	push	{r3, r4, r5, lr}
 801823a:	6985      	ldr	r5, [r0, #24]
 801823c:	b1dd      	cbz	r5, 8018276 <destroy_topic+0x3e>
 801823e:	4604      	mov	r4, r0
 8018240:	6928      	ldr	r0, [r5, #16]
 8018242:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8018246:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801824a:	6922      	ldr	r2, [r4, #16]
 801824c:	6819      	ldr	r1, [r3, #0]
 801824e:	f7fb ff51 	bl	80140f4 <uxr_buffer_delete_entity>
 8018252:	4602      	mov	r2, r0
 8018254:	6928      	ldr	r0, [r5, #16]
 8018256:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801825a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801825e:	f7fb fdd9 	bl	8013e14 <run_xrce_session>
 8018262:	4603      	mov	r3, r0
 8018264:	4620      	mov	r0, r4
 8018266:	2b00      	cmp	r3, #0
 8018268:	bf14      	ite	ne
 801826a:	2400      	movne	r4, #0
 801826c:	2402      	moveq	r4, #2
 801826e:	f7fb fcc3 	bl	8013bf8 <rmw_uxrce_fini_topic_memory>
 8018272:	4620      	mov	r0, r4
 8018274:	bd38      	pop	{r3, r4, r5, pc}
 8018276:	2401      	movs	r4, #1
 8018278:	4620      	mov	r0, r4
 801827a:	bd38      	pop	{r3, r4, r5, pc}

0801827c <flush_session>:
 801827c:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 801827e:	f7fc beeb 	b.w	8015058 <uxr_run_session_until_confirm_delivery>
 8018282:	bf00      	nop

08018284 <rmw_publish>:
 8018284:	2800      	cmp	r0, #0
 8018286:	d053      	beq.n	8018330 <rmw_publish+0xac>
 8018288:	b570      	push	{r4, r5, r6, lr}
 801828a:	460d      	mov	r5, r1
 801828c:	b08e      	sub	sp, #56	; 0x38
 801828e:	2900      	cmp	r1, #0
 8018290:	d04b      	beq.n	801832a <rmw_publish+0xa6>
 8018292:	4604      	mov	r4, r0
 8018294:	6800      	ldr	r0, [r0, #0]
 8018296:	f7fb fe89 	bl	8013fac <is_uxrce_rmw_identifier_valid>
 801829a:	2800      	cmp	r0, #0
 801829c:	d045      	beq.n	801832a <rmw_publish+0xa6>
 801829e:	6866      	ldr	r6, [r4, #4]
 80182a0:	2e00      	cmp	r6, #0
 80182a2:	d042      	beq.n	801832a <rmw_publish+0xa6>
 80182a4:	69b4      	ldr	r4, [r6, #24]
 80182a6:	4628      	mov	r0, r5
 80182a8:	6923      	ldr	r3, [r4, #16]
 80182aa:	4798      	blx	r3
 80182ac:	69f3      	ldr	r3, [r6, #28]
 80182ae:	9005      	str	r0, [sp, #20]
 80182b0:	b113      	cbz	r3, 80182b8 <rmw_publish+0x34>
 80182b2:	a805      	add	r0, sp, #20
 80182b4:	4798      	blx	r3
 80182b6:	9805      	ldr	r0, [sp, #20]
 80182b8:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 80182bc:	691b      	ldr	r3, [r3, #16]
 80182be:	9000      	str	r0, [sp, #0]
 80182c0:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 80182c4:	6972      	ldr	r2, [r6, #20]
 80182c6:	ab06      	add	r3, sp, #24
 80182c8:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 80182ca:	f7fe f93f 	bl	801654c <uxr_prepare_output_stream>
 80182ce:	b1d8      	cbz	r0, 8018308 <rmw_publish+0x84>
 80182d0:	68a3      	ldr	r3, [r4, #8]
 80182d2:	a906      	add	r1, sp, #24
 80182d4:	4628      	mov	r0, r5
 80182d6:	4798      	blx	r3
 80182d8:	6a33      	ldr	r3, [r6, #32]
 80182da:	4604      	mov	r4, r0
 80182dc:	b10b      	cbz	r3, 80182e2 <rmw_publish+0x5e>
 80182de:	a806      	add	r0, sp, #24
 80182e0:	4798      	blx	r3
 80182e2:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 80182e6:	2b01      	cmp	r3, #1
 80182e8:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 80182ec:	d022      	beq.n	8018334 <rmw_publish+0xb0>
 80182ee:	6918      	ldr	r0, [r3, #16]
 80182f0:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 80182f2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80182f6:	f7fc feaf 	bl	8015058 <uxr_run_session_until_confirm_delivery>
 80182fa:	4020      	ands	r0, r4
 80182fc:	b2c4      	uxtb	r4, r0
 80182fe:	f084 0001 	eor.w	r0, r4, #1
 8018302:	b2c0      	uxtb	r0, r0
 8018304:	b00e      	add	sp, #56	; 0x38
 8018306:	bd70      	pop	{r4, r5, r6, pc}
 8018308:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 801830c:	6918      	ldr	r0, [r3, #16]
 801830e:	9b05      	ldr	r3, [sp, #20]
 8018310:	9602      	str	r6, [sp, #8]
 8018312:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018316:	9300      	str	r3, [sp, #0]
 8018318:	4b09      	ldr	r3, [pc, #36]	; (8018340 <rmw_publish+0xbc>)
 801831a:	9301      	str	r3, [sp, #4]
 801831c:	ab06      	add	r3, sp, #24
 801831e:	6972      	ldr	r2, [r6, #20]
 8018320:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8018322:	f7fe f943 	bl	80165ac <uxr_prepare_output_stream_fragmented>
 8018326:	2800      	cmp	r0, #0
 8018328:	d1d2      	bne.n	80182d0 <rmw_publish+0x4c>
 801832a:	2001      	movs	r0, #1
 801832c:	b00e      	add	sp, #56	; 0x38
 801832e:	bd70      	pop	{r4, r5, r6, pc}
 8018330:	2001      	movs	r0, #1
 8018332:	4770      	bx	lr
 8018334:	6918      	ldr	r0, [r3, #16]
 8018336:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801833a:	f7fc fad3 	bl	80148e4 <uxr_flash_output_streams>
 801833e:	e7de      	b.n	80182fe <rmw_publish+0x7a>
 8018340:	0801827d 	.word	0x0801827d

08018344 <rmw_uros_epoch_nanos>:
 8018344:	4b05      	ldr	r3, [pc, #20]	; (801835c <rmw_uros_epoch_nanos+0x18>)
 8018346:	681b      	ldr	r3, [r3, #0]
 8018348:	b123      	cbz	r3, 8018354 <rmw_uros_epoch_nanos+0x10>
 801834a:	6898      	ldr	r0, [r3, #8]
 801834c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018350:	f7fc babe 	b.w	80148d0 <uxr_epoch_nanos>
 8018354:	2000      	movs	r0, #0
 8018356:	2100      	movs	r1, #0
 8018358:	4770      	bx	lr
 801835a:	bf00      	nop
 801835c:	200108ec 	.word	0x200108ec

08018360 <ucdr_serialize_string>:
 8018360:	b510      	push	{r4, lr}
 8018362:	b082      	sub	sp, #8
 8018364:	4604      	mov	r4, r0
 8018366:	4608      	mov	r0, r1
 8018368:	9101      	str	r1, [sp, #4]
 801836a:	f7e7 ffc9 	bl	8000300 <strlen>
 801836e:	4602      	mov	r2, r0
 8018370:	9901      	ldr	r1, [sp, #4]
 8018372:	4620      	mov	r0, r4
 8018374:	3201      	adds	r2, #1
 8018376:	b002      	add	sp, #8
 8018378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801837c:	f7f5 be10 	b.w	800dfa0 <ucdr_serialize_sequence_char>

08018380 <ucdr_deserialize_string>:
 8018380:	b500      	push	{lr}
 8018382:	b083      	sub	sp, #12
 8018384:	ab01      	add	r3, sp, #4
 8018386:	f7f5 fe1d 	bl	800dfc4 <ucdr_deserialize_sequence_char>
 801838a:	b003      	add	sp, #12
 801838c:	f85d fb04 	ldr.w	pc, [sp], #4

08018390 <uxr_init_input_best_effort_stream>:
 8018390:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018394:	8003      	strh	r3, [r0, #0]
 8018396:	4770      	bx	lr

08018398 <uxr_reset_input_best_effort_stream>:
 8018398:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801839c:	8003      	strh	r3, [r0, #0]
 801839e:	4770      	bx	lr

080183a0 <uxr_receive_best_effort_message>:
 80183a0:	b538      	push	{r3, r4, r5, lr}
 80183a2:	4604      	mov	r4, r0
 80183a4:	8800      	ldrh	r0, [r0, #0]
 80183a6:	460d      	mov	r5, r1
 80183a8:	f000 fd46 	bl	8018e38 <uxr_seq_num_cmp>
 80183ac:	4603      	mov	r3, r0
 80183ae:	0fc0      	lsrs	r0, r0, #31
 80183b0:	2b00      	cmp	r3, #0
 80183b2:	bfb8      	it	lt
 80183b4:	8025      	strhlt	r5, [r4, #0]
 80183b6:	bd38      	pop	{r3, r4, r5, pc}

080183b8 <on_full_input_buffer>:
 80183b8:	b570      	push	{r4, r5, r6, lr}
 80183ba:	460c      	mov	r4, r1
 80183bc:	4605      	mov	r5, r0
 80183be:	8908      	ldrh	r0, [r1, #8]
 80183c0:	682b      	ldr	r3, [r5, #0]
 80183c2:	7d26      	ldrb	r6, [r4, #20]
 80183c4:	e9d1 1200 	ldrd	r1, r2, [r1]
 80183c8:	fbb2 f2f0 	udiv	r2, r2, r0
 80183cc:	eba3 0c01 	sub.w	ip, r3, r1
 80183d0:	fbbc fcf2 	udiv	ip, ip, r2
 80183d4:	f10c 0c01 	add.w	ip, ip, #1
 80183d8:	fa1f f38c 	uxth.w	r3, ip
 80183dc:	fbb3 fcf0 	udiv	ip, r3, r0
 80183e0:	fb00 331c 	mls	r3, r0, ip, r3
 80183e4:	b29b      	uxth	r3, r3
 80183e6:	fb02 f303 	mul.w	r3, r2, r3
 80183ea:	1d18      	adds	r0, r3, #4
 80183ec:	4408      	add	r0, r1
 80183ee:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80183f2:	b116      	cbz	r6, 80183fa <on_full_input_buffer+0x42>
 80183f4:	2600      	movs	r6, #0
 80183f6:	f840 6c04 	str.w	r6, [r0, #-4]
 80183fa:	2a03      	cmp	r2, #3
 80183fc:	d801      	bhi.n	8018402 <on_full_input_buffer+0x4a>
 80183fe:	2001      	movs	r0, #1
 8018400:	bd70      	pop	{r4, r5, r6, pc}
 8018402:	3308      	adds	r3, #8
 8018404:	4628      	mov	r0, r5
 8018406:	3a04      	subs	r2, #4
 8018408:	4419      	add	r1, r3
 801840a:	692b      	ldr	r3, [r5, #16]
 801840c:	f7f5 fd4c 	bl	800dea8 <ucdr_init_buffer_origin>
 8018410:	4628      	mov	r0, r5
 8018412:	4622      	mov	r2, r4
 8018414:	4902      	ldr	r1, [pc, #8]	; (8018420 <on_full_input_buffer+0x68>)
 8018416:	f7f5 fd23 	bl	800de60 <ucdr_set_on_full_buffer_callback>
 801841a:	2000      	movs	r0, #0
 801841c:	bd70      	pop	{r4, r5, r6, pc}
 801841e:	bf00      	nop
 8018420:	080183b9 	.word	0x080183b9

08018424 <uxr_init_input_reliable_stream>:
 8018424:	b510      	push	{r4, lr}
 8018426:	e9c0 1200 	strd	r1, r2, [r0]
 801842a:	2400      	movs	r4, #0
 801842c:	9a02      	ldr	r2, [sp, #8]
 801842e:	8103      	strh	r3, [r0, #8]
 8018430:	6102      	str	r2, [r0, #16]
 8018432:	7504      	strb	r4, [r0, #20]
 8018434:	b1c3      	cbz	r3, 8018468 <uxr_init_input_reliable_stream+0x44>
 8018436:	600c      	str	r4, [r1, #0]
 8018438:	8901      	ldrh	r1, [r0, #8]
 801843a:	2901      	cmp	r1, #1
 801843c:	d914      	bls.n	8018468 <uxr_init_input_reliable_stream+0x44>
 801843e:	f04f 0c01 	mov.w	ip, #1
 8018442:	6843      	ldr	r3, [r0, #4]
 8018444:	f10c 0e01 	add.w	lr, ip, #1
 8018448:	fbbc f2f1 	udiv	r2, ip, r1
 801844c:	fbb3 f3f1 	udiv	r3, r3, r1
 8018450:	fb01 c212 	mls	r2, r1, r2, ip
 8018454:	fa1f fc8e 	uxth.w	ip, lr
 8018458:	b292      	uxth	r2, r2
 801845a:	fb02 f303 	mul.w	r3, r2, r3
 801845e:	6802      	ldr	r2, [r0, #0]
 8018460:	50d4      	str	r4, [r2, r3]
 8018462:	8901      	ldrh	r1, [r0, #8]
 8018464:	4561      	cmp	r1, ip
 8018466:	d8ec      	bhi.n	8018442 <uxr_init_input_reliable_stream+0x1e>
 8018468:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801846c:	60c3      	str	r3, [r0, #12]
 801846e:	bd10      	pop	{r4, pc}

08018470 <uxr_reset_input_reliable_stream>:
 8018470:	8901      	ldrh	r1, [r0, #8]
 8018472:	b1d9      	cbz	r1, 80184ac <uxr_reset_input_reliable_stream+0x3c>
 8018474:	b510      	push	{r4, lr}
 8018476:	f04f 0e00 	mov.w	lr, #0
 801847a:	46f4      	mov	ip, lr
 801847c:	4674      	mov	r4, lr
 801847e:	6843      	ldr	r3, [r0, #4]
 8018480:	f10e 0e01 	add.w	lr, lr, #1
 8018484:	fbbc f2f1 	udiv	r2, ip, r1
 8018488:	fbb3 f3f1 	udiv	r3, r3, r1
 801848c:	fb01 c212 	mls	r2, r1, r2, ip
 8018490:	fa1f fc8e 	uxth.w	ip, lr
 8018494:	b292      	uxth	r2, r2
 8018496:	fb02 f303 	mul.w	r3, r2, r3
 801849a:	6802      	ldr	r2, [r0, #0]
 801849c:	50d4      	str	r4, [r2, r3]
 801849e:	8901      	ldrh	r1, [r0, #8]
 80184a0:	4561      	cmp	r1, ip
 80184a2:	d8ec      	bhi.n	801847e <uxr_reset_input_reliable_stream+0xe>
 80184a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80184a8:	60c3      	str	r3, [r0, #12]
 80184aa:	bd10      	pop	{r4, pc}
 80184ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80184b0:	60c3      	str	r3, [r0, #12]
 80184b2:	4770      	bx	lr

080184b4 <uxr_receive_reliable_message>:
 80184b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80184b8:	4604      	mov	r4, r0
 80184ba:	460d      	mov	r5, r1
 80184bc:	8901      	ldrh	r1, [r0, #8]
 80184be:	4617      	mov	r7, r2
 80184c0:	8980      	ldrh	r0, [r0, #12]
 80184c2:	4698      	mov	r8, r3
 80184c4:	f000 fcb0 	bl	8018e28 <uxr_seq_num_add>
 80184c8:	4629      	mov	r1, r5
 80184ca:	4606      	mov	r6, r0
 80184cc:	89a0      	ldrh	r0, [r4, #12]
 80184ce:	f000 fcb3 	bl	8018e38 <uxr_seq_num_cmp>
 80184d2:	2800      	cmp	r0, #0
 80184d4:	db0a      	blt.n	80184ec <uxr_receive_reliable_message+0x38>
 80184d6:	2600      	movs	r6, #0
 80184d8:	4629      	mov	r1, r5
 80184da:	89e0      	ldrh	r0, [r4, #14]
 80184dc:	f000 fcac 	bl	8018e38 <uxr_seq_num_cmp>
 80184e0:	2800      	cmp	r0, #0
 80184e2:	da00      	bge.n	80184e6 <uxr_receive_reliable_message+0x32>
 80184e4:	81e5      	strh	r5, [r4, #14]
 80184e6:	4630      	mov	r0, r6
 80184e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80184ec:	4630      	mov	r0, r6
 80184ee:	4629      	mov	r1, r5
 80184f0:	f000 fca2 	bl	8018e38 <uxr_seq_num_cmp>
 80184f4:	2800      	cmp	r0, #0
 80184f6:	dbee      	blt.n	80184d6 <uxr_receive_reliable_message+0x22>
 80184f8:	6923      	ldr	r3, [r4, #16]
 80184fa:	4638      	mov	r0, r7
 80184fc:	4798      	blx	r3
 80184fe:	4681      	mov	r9, r0
 8018500:	2101      	movs	r1, #1
 8018502:	89a0      	ldrh	r0, [r4, #12]
 8018504:	f000 fc90 	bl	8018e28 <uxr_seq_num_add>
 8018508:	f1b9 0f00 	cmp.w	r9, #0
 801850c:	bf08      	it	eq
 801850e:	4285      	cmpeq	r5, r0
 8018510:	bf0c      	ite	eq
 8018512:	2601      	moveq	r6, #1
 8018514:	2600      	movne	r6, #0
 8018516:	d104      	bne.n	8018522 <uxr_receive_reliable_message+0x6e>
 8018518:	2300      	movs	r3, #0
 801851a:	9a08      	ldr	r2, [sp, #32]
 801851c:	81a0      	strh	r0, [r4, #12]
 801851e:	7013      	strb	r3, [r2, #0]
 8018520:	e7da      	b.n	80184d8 <uxr_receive_reliable_message+0x24>
 8018522:	8922      	ldrh	r2, [r4, #8]
 8018524:	6863      	ldr	r3, [r4, #4]
 8018526:	fbb5 f0f2 	udiv	r0, r5, r2
 801852a:	fbb3 f3f2 	udiv	r3, r3, r2
 801852e:	fb02 5010 	mls	r0, r2, r0, r5
 8018532:	b280      	uxth	r0, r0
 8018534:	fb03 f000 	mul.w	r0, r3, r0
 8018538:	6823      	ldr	r3, [r4, #0]
 801853a:	3004      	adds	r0, #4
 801853c:	4418      	add	r0, r3
 801853e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018542:	2b00      	cmp	r3, #0
 8018544:	d1c7      	bne.n	80184d6 <uxr_receive_reliable_message+0x22>
 8018546:	4639      	mov	r1, r7
 8018548:	4642      	mov	r2, r8
 801854a:	f001 f9e8 	bl	801991e <memcpy>
 801854e:	8921      	ldrh	r1, [r4, #8]
 8018550:	6863      	ldr	r3, [r4, #4]
 8018552:	fbb5 f2f1 	udiv	r2, r5, r1
 8018556:	fbb3 f3f1 	udiv	r3, r3, r1
 801855a:	fb01 5212 	mls	r2, r1, r2, r5
 801855e:	b292      	uxth	r2, r2
 8018560:	fb02 f303 	mul.w	r3, r2, r3
 8018564:	6822      	ldr	r2, [r4, #0]
 8018566:	f842 8003 	str.w	r8, [r2, r3]
 801856a:	2301      	movs	r3, #1
 801856c:	9a08      	ldr	r2, [sp, #32]
 801856e:	7013      	strb	r3, [r2, #0]
 8018570:	f1b9 0f00 	cmp.w	r9, #0
 8018574:	d0af      	beq.n	80184d6 <uxr_receive_reliable_message+0x22>
 8018576:	89a6      	ldrh	r6, [r4, #12]
 8018578:	2101      	movs	r1, #1
 801857a:	4630      	mov	r0, r6
 801857c:	f000 fc54 	bl	8018e28 <uxr_seq_num_add>
 8018580:	8921      	ldrh	r1, [r4, #8]
 8018582:	6863      	ldr	r3, [r4, #4]
 8018584:	4606      	mov	r6, r0
 8018586:	fbb0 f2f1 	udiv	r2, r0, r1
 801858a:	fbb3 f3f1 	udiv	r3, r3, r1
 801858e:	fb01 0212 	mls	r2, r1, r2, r0
 8018592:	6820      	ldr	r0, [r4, #0]
 8018594:	b292      	uxth	r2, r2
 8018596:	fb02 f303 	mul.w	r3, r2, r3
 801859a:	3304      	adds	r3, #4
 801859c:	4418      	add	r0, r3
 801859e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80185a2:	2b00      	cmp	r3, #0
 80185a4:	d097      	beq.n	80184d6 <uxr_receive_reliable_message+0x22>
 80185a6:	6923      	ldr	r3, [r4, #16]
 80185a8:	4798      	blx	r3
 80185aa:	2802      	cmp	r0, #2
 80185ac:	d002      	beq.n	80185b4 <uxr_receive_reliable_message+0x100>
 80185ae:	2801      	cmp	r0, #1
 80185b0:	d0e2      	beq.n	8018578 <uxr_receive_reliable_message+0xc4>
 80185b2:	e790      	b.n	80184d6 <uxr_receive_reliable_message+0x22>
 80185b4:	2601      	movs	r6, #1
 80185b6:	e78f      	b.n	80184d8 <uxr_receive_reliable_message+0x24>

080185b8 <uxr_next_input_reliable_buffer_available>:
 80185b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80185bc:	4604      	mov	r4, r0
 80185be:	460f      	mov	r7, r1
 80185c0:	8980      	ldrh	r0, [r0, #12]
 80185c2:	2101      	movs	r1, #1
 80185c4:	4690      	mov	r8, r2
 80185c6:	f000 fc2f 	bl	8018e28 <uxr_seq_num_add>
 80185ca:	8922      	ldrh	r2, [r4, #8]
 80185cc:	6866      	ldr	r6, [r4, #4]
 80185ce:	fbb0 f3f2 	udiv	r3, r0, r2
 80185d2:	fbb6 f6f2 	udiv	r6, r6, r2
 80185d6:	fb02 0313 	mls	r3, r2, r3, r0
 80185da:	b29b      	uxth	r3, r3
 80185dc:	fb03 f606 	mul.w	r6, r3, r6
 80185e0:	6823      	ldr	r3, [r4, #0]
 80185e2:	3604      	adds	r6, #4
 80185e4:	441e      	add	r6, r3
 80185e6:	f856 9c04 	ldr.w	r9, [r6, #-4]
 80185ea:	f1b9 0f00 	cmp.w	r9, #0
 80185ee:	d023      	beq.n	8018638 <uxr_next_input_reliable_buffer_available+0x80>
 80185f0:	4605      	mov	r5, r0
 80185f2:	6923      	ldr	r3, [r4, #16]
 80185f4:	4630      	mov	r0, r6
 80185f6:	4798      	blx	r3
 80185f8:	4682      	mov	sl, r0
 80185fa:	b300      	cbz	r0, 801863e <uxr_next_input_reliable_buffer_available+0x86>
 80185fc:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8018600:	2101      	movs	r1, #1
 8018602:	4650      	mov	r0, sl
 8018604:	f000 fc10 	bl	8018e28 <uxr_seq_num_add>
 8018608:	8921      	ldrh	r1, [r4, #8]
 801860a:	4682      	mov	sl, r0
 801860c:	6863      	ldr	r3, [r4, #4]
 801860e:	6820      	ldr	r0, [r4, #0]
 8018610:	fbba f2f1 	udiv	r2, sl, r1
 8018614:	fbb3 f3f1 	udiv	r3, r3, r1
 8018618:	fb01 a212 	mls	r2, r1, r2, sl
 801861c:	b292      	uxth	r2, r2
 801861e:	fb02 f303 	mul.w	r3, r2, r3
 8018622:	3304      	adds	r3, #4
 8018624:	4418      	add	r0, r3
 8018626:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801862a:	b12b      	cbz	r3, 8018638 <uxr_next_input_reliable_buffer_available+0x80>
 801862c:	6923      	ldr	r3, [r4, #16]
 801862e:	4798      	blx	r3
 8018630:	2802      	cmp	r0, #2
 8018632:	d01b      	beq.n	801866c <uxr_next_input_reliable_buffer_available+0xb4>
 8018634:	2801      	cmp	r0, #1
 8018636:	d0e3      	beq.n	8018600 <uxr_next_input_reliable_buffer_available+0x48>
 8018638:	2000      	movs	r0, #0
 801863a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801863e:	464a      	mov	r2, r9
 8018640:	4631      	mov	r1, r6
 8018642:	4638      	mov	r0, r7
 8018644:	f7f5 fc38 	bl	800deb8 <ucdr_init_buffer>
 8018648:	8921      	ldrh	r1, [r4, #8]
 801864a:	6863      	ldr	r3, [r4, #4]
 801864c:	2001      	movs	r0, #1
 801864e:	fbb5 f2f1 	udiv	r2, r5, r1
 8018652:	fbb3 f3f1 	udiv	r3, r3, r1
 8018656:	fb01 5212 	mls	r2, r1, r2, r5
 801865a:	b292      	uxth	r2, r2
 801865c:	fb02 f303 	mul.w	r3, r2, r3
 8018660:	6822      	ldr	r2, [r4, #0]
 8018662:	f842 a003 	str.w	sl, [r2, r3]
 8018666:	81a5      	strh	r5, [r4, #12]
 8018668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801866c:	8920      	ldrh	r0, [r4, #8]
 801866e:	eb06 0108 	add.w	r1, r6, r8
 8018672:	6863      	ldr	r3, [r4, #4]
 8018674:	eba9 0208 	sub.w	r2, r9, r8
 8018678:	fbb5 f6f0 	udiv	r6, r5, r0
 801867c:	fbb3 f3f0 	udiv	r3, r3, r0
 8018680:	fb00 5516 	mls	r5, r0, r6, r5
 8018684:	2000      	movs	r0, #0
 8018686:	b2ad      	uxth	r5, r5
 8018688:	fb03 f505 	mul.w	r5, r3, r5
 801868c:	6823      	ldr	r3, [r4, #0]
 801868e:	5158      	str	r0, [r3, r5]
 8018690:	4638      	mov	r0, r7
 8018692:	f7f5 fc11 	bl	800deb8 <ucdr_init_buffer>
 8018696:	4638      	mov	r0, r7
 8018698:	4622      	mov	r2, r4
 801869a:	4903      	ldr	r1, [pc, #12]	; (80186a8 <uxr_next_input_reliable_buffer_available+0xf0>)
 801869c:	f7f5 fbe0 	bl	800de60 <ucdr_set_on_full_buffer_callback>
 80186a0:	2001      	movs	r0, #1
 80186a2:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80186a6:	e7c8      	b.n	801863a <uxr_next_input_reliable_buffer_available+0x82>
 80186a8:	080183b9 	.word	0x080183b9

080186ac <uxr_process_heartbeat>:
 80186ac:	b538      	push	{r3, r4, r5, lr}
 80186ae:	4611      	mov	r1, r2
 80186b0:	4604      	mov	r4, r0
 80186b2:	89c0      	ldrh	r0, [r0, #14]
 80186b4:	4615      	mov	r5, r2
 80186b6:	f000 fbbf 	bl	8018e38 <uxr_seq_num_cmp>
 80186ba:	2800      	cmp	r0, #0
 80186bc:	bfb8      	it	lt
 80186be:	81e5      	strhlt	r5, [r4, #14]
 80186c0:	bd38      	pop	{r3, r4, r5, pc}
 80186c2:	bf00      	nop

080186c4 <uxr_compute_acknack>:
 80186c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80186c8:	8903      	ldrh	r3, [r0, #8]
 80186ca:	4604      	mov	r4, r0
 80186cc:	460f      	mov	r7, r1
 80186ce:	8985      	ldrh	r5, [r0, #12]
 80186d0:	b1db      	cbz	r3, 801870a <uxr_compute_acknack+0x46>
 80186d2:	4628      	mov	r0, r5
 80186d4:	2601      	movs	r6, #1
 80186d6:	e004      	b.n	80186e2 <uxr_compute_acknack+0x1e>
 80186d8:	4566      	cmp	r6, ip
 80186da:	f106 0601 	add.w	r6, r6, #1
 80186de:	d214      	bcs.n	801870a <uxr_compute_acknack+0x46>
 80186e0:	89a0      	ldrh	r0, [r4, #12]
 80186e2:	b2b1      	uxth	r1, r6
 80186e4:	f000 fba0 	bl	8018e28 <uxr_seq_num_add>
 80186e8:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80186ec:	fbb0 f2fc 	udiv	r2, r0, ip
 80186f0:	e9d4 1300 	ldrd	r1, r3, [r4]
 80186f4:	fb0c 0212 	mls	r2, ip, r2, r0
 80186f8:	fbb3 f3fc 	udiv	r3, r3, ip
 80186fc:	b292      	uxth	r2, r2
 80186fe:	fb02 f303 	mul.w	r3, r2, r3
 8018702:	58cb      	ldr	r3, [r1, r3]
 8018704:	2b00      	cmp	r3, #0
 8018706:	d1e7      	bne.n	80186d8 <uxr_compute_acknack+0x14>
 8018708:	4605      	mov	r5, r0
 801870a:	803d      	strh	r5, [r7, #0]
 801870c:	2101      	movs	r1, #1
 801870e:	89e6      	ldrh	r6, [r4, #14]
 8018710:	4628      	mov	r0, r5
 8018712:	f000 fb8d 	bl	8018e30 <uxr_seq_num_sub>
 8018716:	4601      	mov	r1, r0
 8018718:	4630      	mov	r0, r6
 801871a:	f000 fb89 	bl	8018e30 <uxr_seq_num_sub>
 801871e:	4606      	mov	r6, r0
 8018720:	b328      	cbz	r0, 801876e <uxr_compute_acknack+0xaa>
 8018722:	f04f 0900 	mov.w	r9, #0
 8018726:	f04f 0801 	mov.w	r8, #1
 801872a:	464d      	mov	r5, r9
 801872c:	fa1f f189 	uxth.w	r1, r9
 8018730:	8838      	ldrh	r0, [r7, #0]
 8018732:	f000 fb79 	bl	8018e28 <uxr_seq_num_add>
 8018736:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801873a:	6861      	ldr	r1, [r4, #4]
 801873c:	fa08 fe09 	lsl.w	lr, r8, r9
 8018740:	6822      	ldr	r2, [r4, #0]
 8018742:	f109 0901 	add.w	r9, r9, #1
 8018746:	ea4e 0e05 	orr.w	lr, lr, r5
 801874a:	fbb0 f3fc 	udiv	r3, r0, ip
 801874e:	fbb1 f1fc 	udiv	r1, r1, ip
 8018752:	fb03 001c 	mls	r0, r3, ip, r0
 8018756:	b283      	uxth	r3, r0
 8018758:	fb01 f303 	mul.w	r3, r1, r3
 801875c:	58d3      	ldr	r3, [r2, r3]
 801875e:	b90b      	cbnz	r3, 8018764 <uxr_compute_acknack+0xa0>
 8018760:	fa1f f58e 	uxth.w	r5, lr
 8018764:	454e      	cmp	r6, r9
 8018766:	d1e1      	bne.n	801872c <uxr_compute_acknack+0x68>
 8018768:	4628      	mov	r0, r5
 801876a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801876e:	4605      	mov	r5, r0
 8018770:	4628      	mov	r0, r5
 8018772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018776:	bf00      	nop

08018778 <uxr_init_output_best_effort_stream>:
 8018778:	f64f 7cff 	movw	ip, #65535	; 0xffff
 801877c:	6001      	str	r1, [r0, #0]
 801877e:	7303      	strb	r3, [r0, #12]
 8018780:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8018784:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8018788:	4770      	bx	lr
 801878a:	bf00      	nop

0801878c <uxr_reset_output_best_effort_stream>:
 801878c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018790:	7b03      	ldrb	r3, [r0, #12]
 8018792:	81c2      	strh	r2, [r0, #14]
 8018794:	6043      	str	r3, [r0, #4]
 8018796:	4770      	bx	lr

08018798 <uxr_prepare_best_effort_buffer_to_write>:
 8018798:	b5f0      	push	{r4, r5, r6, r7, lr}
 801879a:	4604      	mov	r4, r0
 801879c:	b083      	sub	sp, #12
 801879e:	6840      	ldr	r0, [r0, #4]
 80187a0:	460d      	mov	r5, r1
 80187a2:	4616      	mov	r6, r2
 80187a4:	f7fd fe10 	bl	80163c8 <uxr_submessage_padding>
 80187a8:	6863      	ldr	r3, [r4, #4]
 80187aa:	4418      	add	r0, r3
 80187ac:	68a3      	ldr	r3, [r4, #8]
 80187ae:	1942      	adds	r2, r0, r5
 80187b0:	4293      	cmp	r3, r2
 80187b2:	bf2c      	ite	cs
 80187b4:	2701      	movcs	r7, #1
 80187b6:	2700      	movcc	r7, #0
 80187b8:	d202      	bcs.n	80187c0 <uxr_prepare_best_effort_buffer_to_write+0x28>
 80187ba:	4638      	mov	r0, r7
 80187bc:	b003      	add	sp, #12
 80187be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80187c0:	9000      	str	r0, [sp, #0]
 80187c2:	2300      	movs	r3, #0
 80187c4:	4630      	mov	r0, r6
 80187c6:	6821      	ldr	r1, [r4, #0]
 80187c8:	f7f5 fb64 	bl	800de94 <ucdr_init_buffer_origin_offset>
 80187cc:	6861      	ldr	r1, [r4, #4]
 80187ce:	4638      	mov	r0, r7
 80187d0:	4429      	add	r1, r5
 80187d2:	6061      	str	r1, [r4, #4]
 80187d4:	b003      	add	sp, #12
 80187d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080187d8 <uxr_prepare_best_effort_buffer_to_send>:
 80187d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187dc:	4604      	mov	r4, r0
 80187de:	461d      	mov	r5, r3
 80187e0:	6840      	ldr	r0, [r0, #4]
 80187e2:	7b23      	ldrb	r3, [r4, #12]
 80187e4:	4298      	cmp	r0, r3
 80187e6:	bf8c      	ite	hi
 80187e8:	2601      	movhi	r6, #1
 80187ea:	2600      	movls	r6, #0
 80187ec:	d802      	bhi.n	80187f4 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 80187ee:	4630      	mov	r0, r6
 80187f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80187f4:	4688      	mov	r8, r1
 80187f6:	89e0      	ldrh	r0, [r4, #14]
 80187f8:	2101      	movs	r1, #1
 80187fa:	4617      	mov	r7, r2
 80187fc:	f000 fb14 	bl	8018e28 <uxr_seq_num_add>
 8018800:	6823      	ldr	r3, [r4, #0]
 8018802:	81e0      	strh	r0, [r4, #14]
 8018804:	8028      	strh	r0, [r5, #0]
 8018806:	4630      	mov	r0, r6
 8018808:	f8c8 3000 	str.w	r3, [r8]
 801880c:	6863      	ldr	r3, [r4, #4]
 801880e:	603b      	str	r3, [r7, #0]
 8018810:	7b23      	ldrb	r3, [r4, #12]
 8018812:	6063      	str	r3, [r4, #4]
 8018814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018818 <on_full_output_buffer>:
 8018818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801881a:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801881e:	460c      	mov	r4, r1
 8018820:	6803      	ldr	r3, [r0, #0]
 8018822:	4605      	mov	r5, r0
 8018824:	7b26      	ldrb	r6, [r4, #12]
 8018826:	e9d1 1200 	ldrd	r1, r2, [r1]
 801882a:	fbb2 f2fc 	udiv	r2, r2, ip
 801882e:	eba3 0e01 	sub.w	lr, r3, r1
 8018832:	6903      	ldr	r3, [r0, #16]
 8018834:	fbbe fef2 	udiv	lr, lr, r2
 8018838:	f10e 0e01 	add.w	lr, lr, #1
 801883c:	fa1f fe8e 	uxth.w	lr, lr
 8018840:	fbbe f7fc 	udiv	r7, lr, ip
 8018844:	fb0c ec17 	mls	ip, ip, r7, lr
 8018848:	fa1f fc8c 	uxth.w	ip, ip
 801884c:	fb02 fc0c 	mul.w	ip, r2, ip
 8018850:	f851 200c 	ldr.w	r2, [r1, ip]
 8018854:	44b4      	add	ip, r6
 8018856:	1b92      	subs	r2, r2, r6
 8018858:	f10c 0c08 	add.w	ip, ip, #8
 801885c:	3a04      	subs	r2, #4
 801885e:	4461      	add	r1, ip
 8018860:	f7f5 fb22 	bl	800dea8 <ucdr_init_buffer_origin>
 8018864:	4628      	mov	r0, r5
 8018866:	4622      	mov	r2, r4
 8018868:	4902      	ldr	r1, [pc, #8]	; (8018874 <on_full_output_buffer+0x5c>)
 801886a:	f7f5 faf9 	bl	800de60 <ucdr_set_on_full_buffer_callback>
 801886e:	2000      	movs	r0, #0
 8018870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018872:	bf00      	nop
 8018874:	08018819 	.word	0x08018819

08018878 <uxr_init_output_reliable_stream>:
 8018878:	b530      	push	{r4, r5, lr}
 801887a:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801887e:	8103      	strh	r3, [r0, #8]
 8018880:	7304      	strb	r4, [r0, #12]
 8018882:	e9c0 1200 	strd	r1, r2, [r0]
 8018886:	b1e3      	cbz	r3, 80188c2 <uxr_init_output_reliable_stream+0x4a>
 8018888:	600c      	str	r4, [r1, #0]
 801888a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801888e:	f1bc 0f01 	cmp.w	ip, #1
 8018892:	d916      	bls.n	80188c2 <uxr_init_output_reliable_stream+0x4a>
 8018894:	f04f 0e01 	mov.w	lr, #1
 8018898:	6843      	ldr	r3, [r0, #4]
 801889a:	f10e 0501 	add.w	r5, lr, #1
 801889e:	7b04      	ldrb	r4, [r0, #12]
 80188a0:	6801      	ldr	r1, [r0, #0]
 80188a2:	fbbe f2fc 	udiv	r2, lr, ip
 80188a6:	fbb3 f3fc 	udiv	r3, r3, ip
 80188aa:	fb0c e212 	mls	r2, ip, r2, lr
 80188ae:	fa1f fe85 	uxth.w	lr, r5
 80188b2:	b292      	uxth	r2, r2
 80188b4:	fb02 f303 	mul.w	r3, r2, r3
 80188b8:	50cc      	str	r4, [r1, r3]
 80188ba:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80188be:	45f4      	cmp	ip, lr
 80188c0:	d8ea      	bhi.n	8018898 <uxr_init_output_reliable_stream+0x20>
 80188c2:	4b07      	ldr	r3, [pc, #28]	; (80188e0 <uxr_init_output_reliable_stream+0x68>)
 80188c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80188c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80188cc:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 80188d0:	f8c0 300e 	str.w	r3, [r0, #14]
 80188d4:	2300      	movs	r3, #0
 80188d6:	8242      	strh	r2, [r0, #18]
 80188d8:	8403      	strh	r3, [r0, #32]
 80188da:	e9c0 4506 	strd	r4, r5, [r0, #24]
 80188de:	bd30      	pop	{r4, r5, pc}
 80188e0:	ffff0000 	.word	0xffff0000
 80188e4:	00000000 	.word	0x00000000

080188e8 <uxr_reset_output_reliable_stream>:
 80188e8:	8901      	ldrh	r1, [r0, #8]
 80188ea:	b510      	push	{r4, lr}
 80188ec:	b1b1      	cbz	r1, 801891c <uxr_reset_output_reliable_stream+0x34>
 80188ee:	f04f 0e00 	mov.w	lr, #0
 80188f2:	46f4      	mov	ip, lr
 80188f4:	6843      	ldr	r3, [r0, #4]
 80188f6:	f10e 0e01 	add.w	lr, lr, #1
 80188fa:	7b04      	ldrb	r4, [r0, #12]
 80188fc:	fbbc f2f1 	udiv	r2, ip, r1
 8018900:	fbb3 f3f1 	udiv	r3, r3, r1
 8018904:	fb01 c212 	mls	r2, r1, r2, ip
 8018908:	fa1f fc8e 	uxth.w	ip, lr
 801890c:	b292      	uxth	r2, r2
 801890e:	fb02 f303 	mul.w	r3, r2, r3
 8018912:	6802      	ldr	r2, [r0, #0]
 8018914:	50d4      	str	r4, [r2, r3]
 8018916:	8901      	ldrh	r1, [r0, #8]
 8018918:	4561      	cmp	r1, ip
 801891a:	d8eb      	bhi.n	80188f4 <uxr_reset_output_reliable_stream+0xc>
 801891c:	4b08      	ldr	r3, [pc, #32]	; (8018940 <uxr_reset_output_reliable_stream+0x58>)
 801891e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018922:	ed9f 7b05 	vldr	d7, [pc, #20]	; 8018938 <uxr_reset_output_reliable_stream+0x50>
 8018926:	f8c0 300e 	str.w	r3, [r0, #14]
 801892a:	2300      	movs	r3, #0
 801892c:	8242      	strh	r2, [r0, #18]
 801892e:	8403      	strh	r3, [r0, #32]
 8018930:	ed80 7b06 	vstr	d7, [r0, #24]
 8018934:	bd10      	pop	{r4, pc}
 8018936:	bf00      	nop
 8018938:	ffffffff 	.word	0xffffffff
 801893c:	7fffffff 	.word	0x7fffffff
 8018940:	ffff0000 	.word	0xffff0000

08018944 <uxr_prepare_reliable_buffer_to_write>:
 8018944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018948:	4604      	mov	r4, r0
 801894a:	b091      	sub	sp, #68	; 0x44
 801894c:	8900      	ldrh	r0, [r0, #8]
 801894e:	468b      	mov	fp, r1
 8018950:	89e6      	ldrh	r6, [r4, #14]
 8018952:	9204      	str	r2, [sp, #16]
 8018954:	6865      	ldr	r5, [r4, #4]
 8018956:	6823      	ldr	r3, [r4, #0]
 8018958:	f894 900c 	ldrb.w	r9, [r4, #12]
 801895c:	fbb6 f2f0 	udiv	r2, r6, r0
 8018960:	fbb5 f5f0 	udiv	r5, r5, r0
 8018964:	fb00 6212 	mls	r2, r0, r2, r6
 8018968:	1f2f      	subs	r7, r5, #4
 801896a:	b292      	uxth	r2, r2
 801896c:	fb05 3202 	mla	r2, r5, r2, r3
 8018970:	1d11      	adds	r1, r2, #4
 8018972:	f8d2 8000 	ldr.w	r8, [r2]
 8018976:	9103      	str	r1, [sp, #12]
 8018978:	2800      	cmp	r0, #0
 801897a:	f000 814a 	beq.w	8018c12 <uxr_prepare_reliable_buffer_to_write+0x2ce>
 801897e:	f04f 0c00 	mov.w	ip, #0
 8018982:	46e2      	mov	sl, ip
 8018984:	4661      	mov	r1, ip
 8018986:	f10c 0c01 	add.w	ip, ip, #1
 801898a:	fbb1 f2f0 	udiv	r2, r1, r0
 801898e:	fb00 1212 	mls	r2, r0, r2, r1
 8018992:	fa1f f18c 	uxth.w	r1, ip
 8018996:	b292      	uxth	r2, r2
 8018998:	fb05 f202 	mul.w	r2, r5, r2
 801899c:	589a      	ldr	r2, [r3, r2]
 801899e:	454a      	cmp	r2, r9
 80189a0:	d103      	bne.n	80189aa <uxr_prepare_reliable_buffer_to_write+0x66>
 80189a2:	f10a 0a01 	add.w	sl, sl, #1
 80189a6:	fa1f fa8a 	uxth.w	sl, sl
 80189aa:	4281      	cmp	r1, r0
 80189ac:	d3eb      	bcc.n	8018986 <uxr_prepare_reliable_buffer_to_write+0x42>
 80189ae:	4640      	mov	r0, r8
 80189b0:	2104      	movs	r1, #4
 80189b2:	f8cd a014 	str.w	sl, [sp, #20]
 80189b6:	f7f5 fa83 	bl	800dec0 <ucdr_alignment>
 80189ba:	4480      	add	r8, r0
 80189bc:	eb08 020b 	add.w	r2, r8, fp
 80189c0:	42ba      	cmp	r2, r7
 80189c2:	f240 80ca 	bls.w	8018b5a <uxr_prepare_reliable_buffer_to_write+0x216>
 80189c6:	7b22      	ldrb	r2, [r4, #12]
 80189c8:	445a      	add	r2, fp
 80189ca:	42ba      	cmp	r2, r7
 80189cc:	f240 80b2 	bls.w	8018b34 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 80189d0:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80189d4:	b2bb      	uxth	r3, r7
 80189d6:	eba2 0209 	sub.w	r2, r2, r9
 80189da:	441a      	add	r2, r3
 80189dc:	b292      	uxth	r2, r2
 80189de:	fb0a f902 	mul.w	r9, sl, r2
 80189e2:	9205      	str	r2, [sp, #20]
 80189e4:	45d9      	cmp	r9, fp
 80189e6:	9206      	str	r2, [sp, #24]
 80189e8:	f0c0 80b3 	bcc.w	8018b52 <uxr_prepare_reliable_buffer_to_write+0x20e>
 80189ec:	f108 0204 	add.w	r2, r8, #4
 80189f0:	42ba      	cmp	r2, r7
 80189f2:	f080 80da 	bcs.w	8018baa <uxr_prepare_reliable_buffer_to_write+0x266>
 80189f6:	f1a3 0904 	sub.w	r9, r3, #4
 80189fa:	9b05      	ldr	r3, [sp, #20]
 80189fc:	eba9 0908 	sub.w	r9, r9, r8
 8018a00:	fa1f f989 	uxth.w	r9, r9
 8018a04:	ebab 0b09 	sub.w	fp, fp, r9
 8018a08:	fbbb f2f3 	udiv	r2, fp, r3
 8018a0c:	fb03 b312 	mls	r3, r3, r2, fp
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	f040 80c4 	bne.w	8018b9e <uxr_prepare_reliable_buffer_to_write+0x25a>
 8018a16:	b293      	uxth	r3, r2
 8018a18:	4553      	cmp	r3, sl
 8018a1a:	f200 809a 	bhi.w	8018b52 <uxr_prepare_reliable_buffer_to_write+0x20e>
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	f000 80f9 	beq.w	8018c16 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8018a24:	f8cd 801c 	str.w	r8, [sp, #28]
 8018a28:	f04f 0a00 	mov.w	sl, #0
 8018a2c:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8018a30:	f10d 0b20 	add.w	fp, sp, #32
 8018a34:	9505      	str	r5, [sp, #20]
 8018a36:	461d      	mov	r5, r3
 8018a38:	e000      	b.n	8018a3c <uxr_prepare_reliable_buffer_to_write+0xf8>
 8018a3a:	46c1      	mov	r9, r8
 8018a3c:	8922      	ldrh	r2, [r4, #8]
 8018a3e:	4658      	mov	r0, fp
 8018a40:	6863      	ldr	r3, [r4, #4]
 8018a42:	f10a 0a01 	add.w	sl, sl, #1
 8018a46:	fbb6 f1f2 	udiv	r1, r6, r2
 8018a4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8018a4e:	fb02 6111 	mls	r1, r2, r1, r6
 8018a52:	463a      	mov	r2, r7
 8018a54:	b289      	uxth	r1, r1
 8018a56:	fb03 f101 	mul.w	r1, r3, r1
 8018a5a:	6823      	ldr	r3, [r4, #0]
 8018a5c:	3104      	adds	r1, #4
 8018a5e:	4419      	add	r1, r3
 8018a60:	2300      	movs	r3, #0
 8018a62:	f851 cc04 	ldr.w	ip, [r1, #-4]
 8018a66:	f8cd c000 	str.w	ip, [sp]
 8018a6a:	f7f5 fa13 	bl	800de94 <ucdr_init_buffer_origin_offset>
 8018a6e:	464a      	mov	r2, r9
 8018a70:	2300      	movs	r3, #0
 8018a72:	210d      	movs	r1, #13
 8018a74:	4658      	mov	r0, fp
 8018a76:	f7fd fc67 	bl	8016348 <uxr_buffer_submessage_header>
 8018a7a:	8921      	ldrh	r1, [r4, #8]
 8018a7c:	6863      	ldr	r3, [r4, #4]
 8018a7e:	4630      	mov	r0, r6
 8018a80:	fbb6 f2f1 	udiv	r2, r6, r1
 8018a84:	fbb3 f3f1 	udiv	r3, r3, r1
 8018a88:	fb01 6212 	mls	r2, r1, r2, r6
 8018a8c:	2101      	movs	r1, #1
 8018a8e:	b292      	uxth	r2, r2
 8018a90:	fb02 f303 	mul.w	r3, r2, r3
 8018a94:	6822      	ldr	r2, [r4, #0]
 8018a96:	50d7      	str	r7, [r2, r3]
 8018a98:	f000 f9c6 	bl	8018e28 <uxr_seq_num_add>
 8018a9c:	4606      	mov	r6, r0
 8018a9e:	fa1f f38a 	uxth.w	r3, sl
 8018aa2:	429d      	cmp	r5, r3
 8018aa4:	d8c9      	bhi.n	8018a3a <uxr_prepare_reliable_buffer_to_write+0xf6>
 8018aa6:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8018aaa:	9d05      	ldr	r5, [sp, #20]
 8018aac:	8920      	ldrh	r0, [r4, #8]
 8018aae:	463a      	mov	r2, r7
 8018ab0:	6863      	ldr	r3, [r4, #4]
 8018ab2:	fbb6 f1f0 	udiv	r1, r6, r0
 8018ab6:	fbb3 f3f0 	udiv	r3, r3, r0
 8018aba:	fb00 6111 	mls	r1, r0, r1, r6
 8018abe:	4658      	mov	r0, fp
 8018ac0:	b289      	uxth	r1, r1
 8018ac2:	fb01 f303 	mul.w	r3, r1, r3
 8018ac6:	6821      	ldr	r1, [r4, #0]
 8018ac8:	3304      	adds	r3, #4
 8018aca:	4419      	add	r1, r3
 8018acc:	2300      	movs	r3, #0
 8018ace:	f851 7c04 	ldr.w	r7, [r1, #-4]
 8018ad2:	9700      	str	r7, [sp, #0]
 8018ad4:	f7f5 f9de 	bl	800de94 <ucdr_init_buffer_origin_offset>
 8018ad8:	9f06      	ldr	r7, [sp, #24]
 8018ada:	4658      	mov	r0, fp
 8018adc:	2302      	movs	r3, #2
 8018ade:	b2ba      	uxth	r2, r7
 8018ae0:	210d      	movs	r1, #13
 8018ae2:	f7fd fc31 	bl	8016348 <uxr_buffer_submessage_header>
 8018ae6:	f108 0104 	add.w	r1, r8, #4
 8018aea:	9b03      	ldr	r3, [sp, #12]
 8018aec:	f1a5 0208 	sub.w	r2, r5, #8
 8018af0:	8925      	ldrh	r5, [r4, #8]
 8018af2:	440b      	add	r3, r1
 8018af4:	eba2 0208 	sub.w	r2, r2, r8
 8018af8:	fbb6 f0f5 	udiv	r0, r6, r5
 8018afc:	4619      	mov	r1, r3
 8018afe:	6863      	ldr	r3, [r4, #4]
 8018b00:	fb05 6010 	mls	r0, r5, r0, r6
 8018b04:	fbb3 f3f5 	udiv	r3, r3, r5
 8018b08:	b280      	uxth	r0, r0
 8018b0a:	6825      	ldr	r5, [r4, #0]
 8018b0c:	fb00 f303 	mul.w	r3, r0, r3
 8018b10:	7b20      	ldrb	r0, [r4, #12]
 8018b12:	3004      	adds	r0, #4
 8018b14:	4438      	add	r0, r7
 8018b16:	50e8      	str	r0, [r5, r3]
 8018b18:	9d04      	ldr	r5, [sp, #16]
 8018b1a:	4628      	mov	r0, r5
 8018b1c:	f7f5 f9cc 	bl	800deb8 <ucdr_init_buffer>
 8018b20:	4628      	mov	r0, r5
 8018b22:	4622      	mov	r2, r4
 8018b24:	493d      	ldr	r1, [pc, #244]	; (8018c1c <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8018b26:	f7f5 f99b 	bl	800de60 <ucdr_set_on_full_buffer_callback>
 8018b2a:	2001      	movs	r0, #1
 8018b2c:	81e6      	strh	r6, [r4, #14]
 8018b2e:	b011      	add	sp, #68	; 0x44
 8018b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b34:	2101      	movs	r1, #1
 8018b36:	89e0      	ldrh	r0, [r4, #14]
 8018b38:	f000 f976 	bl	8018e28 <uxr_seq_num_add>
 8018b3c:	4605      	mov	r5, r0
 8018b3e:	8921      	ldrh	r1, [r4, #8]
 8018b40:	8a60      	ldrh	r0, [r4, #18]
 8018b42:	f000 f971 	bl	8018e28 <uxr_seq_num_add>
 8018b46:	4601      	mov	r1, r0
 8018b48:	4628      	mov	r0, r5
 8018b4a:	f000 f975 	bl	8018e38 <uxr_seq_num_cmp>
 8018b4e:	2800      	cmp	r0, #0
 8018b50:	dd44      	ble.n	8018bdc <uxr_prepare_reliable_buffer_to_write+0x298>
 8018b52:	2000      	movs	r0, #0
 8018b54:	b011      	add	sp, #68	; 0x44
 8018b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b5a:	8921      	ldrh	r1, [r4, #8]
 8018b5c:	8a60      	ldrh	r0, [r4, #18]
 8018b5e:	9205      	str	r2, [sp, #20]
 8018b60:	f000 f962 	bl	8018e28 <uxr_seq_num_add>
 8018b64:	4601      	mov	r1, r0
 8018b66:	4630      	mov	r0, r6
 8018b68:	f000 f966 	bl	8018e38 <uxr_seq_num_cmp>
 8018b6c:	2800      	cmp	r0, #0
 8018b6e:	9a05      	ldr	r2, [sp, #20]
 8018b70:	dcef      	bgt.n	8018b52 <uxr_prepare_reliable_buffer_to_write+0x20e>
 8018b72:	8925      	ldrh	r5, [r4, #8]
 8018b74:	e9d4 7300 	ldrd	r7, r3, [r4]
 8018b78:	fbb6 f4f5 	udiv	r4, r6, r5
 8018b7c:	fbb3 f3f5 	udiv	r3, r3, r5
 8018b80:	fb05 6414 	mls	r4, r5, r4, r6
 8018b84:	b2a4      	uxth	r4, r4
 8018b86:	fb04 f303 	mul.w	r3, r4, r3
 8018b8a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8018b8e:	50fa      	str	r2, [r7, r3]
 8018b90:	2300      	movs	r3, #0
 8018b92:	f8cd 8000 	str.w	r8, [sp]
 8018b96:	f7f5 f97d 	bl	800de94 <ucdr_init_buffer_origin_offset>
 8018b9a:	2001      	movs	r0, #1
 8018b9c:	e7da      	b.n	8018b54 <uxr_prepare_reliable_buffer_to_write+0x210>
 8018b9e:	3201      	adds	r2, #1
 8018ba0:	9306      	str	r3, [sp, #24]
 8018ba2:	b293      	uxth	r3, r2
 8018ba4:	4553      	cmp	r3, sl
 8018ba6:	d8d4      	bhi.n	8018b52 <uxr_prepare_reliable_buffer_to_write+0x20e>
 8018ba8:	e739      	b.n	8018a1e <uxr_prepare_reliable_buffer_to_write+0xda>
 8018baa:	4630      	mov	r0, r6
 8018bac:	2101      	movs	r1, #1
 8018bae:	9307      	str	r3, [sp, #28]
 8018bb0:	f000 f93a 	bl	8018e28 <uxr_seq_num_add>
 8018bb4:	4606      	mov	r6, r0
 8018bb6:	8920      	ldrh	r0, [r4, #8]
 8018bb8:	6862      	ldr	r2, [r4, #4]
 8018bba:	fbb6 f1f0 	udiv	r1, r6, r0
 8018bbe:	fbb2 f2f0 	udiv	r2, r2, r0
 8018bc2:	fb00 6111 	mls	r1, r0, r1, r6
 8018bc6:	b289      	uxth	r1, r1
 8018bc8:	fb01 f202 	mul.w	r2, r1, r2
 8018bcc:	6821      	ldr	r1, [r4, #0]
 8018bce:	3204      	adds	r2, #4
 8018bd0:	188b      	adds	r3, r1, r2
 8018bd2:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8018bd6:	9303      	str	r3, [sp, #12]
 8018bd8:	9b07      	ldr	r3, [sp, #28]
 8018bda:	e70c      	b.n	80189f6 <uxr_prepare_reliable_buffer_to_write+0xb2>
 8018bdc:	8921      	ldrh	r1, [r4, #8]
 8018bde:	6863      	ldr	r3, [r4, #4]
 8018be0:	9804      	ldr	r0, [sp, #16]
 8018be2:	fbb5 f2f1 	udiv	r2, r5, r1
 8018be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8018bea:	fb01 5212 	mls	r2, r1, r2, r5
 8018bee:	6821      	ldr	r1, [r4, #0]
 8018bf0:	b292      	uxth	r2, r2
 8018bf2:	fb02 f303 	mul.w	r3, r2, r3
 8018bf6:	7b22      	ldrb	r2, [r4, #12]
 8018bf8:	3304      	adds	r3, #4
 8018bfa:	445a      	add	r2, fp
 8018bfc:	4419      	add	r1, r3
 8018bfe:	f841 2c04 	str.w	r2, [r1, #-4]
 8018c02:	7b23      	ldrb	r3, [r4, #12]
 8018c04:	9300      	str	r3, [sp, #0]
 8018c06:	2300      	movs	r3, #0
 8018c08:	f7f5 f944 	bl	800de94 <ucdr_init_buffer_origin_offset>
 8018c0c:	2001      	movs	r0, #1
 8018c0e:	81e5      	strh	r5, [r4, #14]
 8018c10:	e7a0      	b.n	8018b54 <uxr_prepare_reliable_buffer_to_write+0x210>
 8018c12:	4682      	mov	sl, r0
 8018c14:	e6cb      	b.n	80189ae <uxr_prepare_reliable_buffer_to_write+0x6a>
 8018c16:	f10d 0b20 	add.w	fp, sp, #32
 8018c1a:	e747      	b.n	8018aac <uxr_prepare_reliable_buffer_to_write+0x168>
 8018c1c:	08018819 	.word	0x08018819

08018c20 <uxr_prepare_next_reliable_buffer_to_send>:
 8018c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c22:	4604      	mov	r4, r0
 8018c24:	461d      	mov	r5, r3
 8018c26:	460f      	mov	r7, r1
 8018c28:	8a00      	ldrh	r0, [r0, #16]
 8018c2a:	2101      	movs	r1, #1
 8018c2c:	4616      	mov	r6, r2
 8018c2e:	f000 f8fb 	bl	8018e28 <uxr_seq_num_add>
 8018c32:	8028      	strh	r0, [r5, #0]
 8018c34:	8922      	ldrh	r2, [r4, #8]
 8018c36:	6863      	ldr	r3, [r4, #4]
 8018c38:	fbb0 f1f2 	udiv	r1, r0, r2
 8018c3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8018c40:	fb02 0c11 	mls	ip, r2, r1, r0
 8018c44:	89e1      	ldrh	r1, [r4, #14]
 8018c46:	fa1f fc8c 	uxth.w	ip, ip
 8018c4a:	fb0c fc03 	mul.w	ip, ip, r3
 8018c4e:	6823      	ldr	r3, [r4, #0]
 8018c50:	f10c 0c04 	add.w	ip, ip, #4
 8018c54:	4463      	add	r3, ip
 8018c56:	603b      	str	r3, [r7, #0]
 8018c58:	6823      	ldr	r3, [r4, #0]
 8018c5a:	449c      	add	ip, r3
 8018c5c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8018c60:	6033      	str	r3, [r6, #0]
 8018c62:	f000 f8e9 	bl	8018e38 <uxr_seq_num_cmp>
 8018c66:	2800      	cmp	r0, #0
 8018c68:	dd01      	ble.n	8018c6e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8018c6a:	2000      	movs	r0, #0
 8018c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c6e:	7b23      	ldrb	r3, [r4, #12]
 8018c70:	6832      	ldr	r2, [r6, #0]
 8018c72:	429a      	cmp	r2, r3
 8018c74:	d9f9      	bls.n	8018c6a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018c76:	8a61      	ldrh	r1, [r4, #18]
 8018c78:	8a20      	ldrh	r0, [r4, #16]
 8018c7a:	f000 f8d9 	bl	8018e30 <uxr_seq_num_sub>
 8018c7e:	8923      	ldrh	r3, [r4, #8]
 8018c80:	4283      	cmp	r3, r0
 8018c82:	d0f2      	beq.n	8018c6a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018c84:	8828      	ldrh	r0, [r5, #0]
 8018c86:	89e3      	ldrh	r3, [r4, #14]
 8018c88:	8220      	strh	r0, [r4, #16]
 8018c8a:	4298      	cmp	r0, r3
 8018c8c:	d001      	beq.n	8018c92 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8018c8e:	2001      	movs	r0, #1
 8018c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c92:	2101      	movs	r1, #1
 8018c94:	f000 f8c8 	bl	8018e28 <uxr_seq_num_add>
 8018c98:	4603      	mov	r3, r0
 8018c9a:	2001      	movs	r0, #1
 8018c9c:	81e3      	strh	r3, [r4, #14]
 8018c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018ca0 <uxr_update_output_stream_heartbeat_timestamp>:
 8018ca0:	b570      	push	{r4, r5, r6, lr}
 8018ca2:	8a01      	ldrh	r1, [r0, #16]
 8018ca4:	4604      	mov	r4, r0
 8018ca6:	8a40      	ldrh	r0, [r0, #18]
 8018ca8:	4615      	mov	r5, r2
 8018caa:	461e      	mov	r6, r3
 8018cac:	f000 f8c4 	bl	8018e38 <uxr_seq_num_cmp>
 8018cb0:	2800      	cmp	r0, #0
 8018cb2:	db07      	blt.n	8018cc4 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8018cb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018cb8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018cbc:	2000      	movs	r0, #0
 8018cbe:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8018cc2:	bd70      	pop	{r4, r5, r6, pc}
 8018cc4:	f894 0020 	ldrb.w	r0, [r4, #32]
 8018cc8:	b940      	cbnz	r0, 8018cdc <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8018cca:	2301      	movs	r3, #1
 8018ccc:	f884 3020 	strb.w	r3, [r4, #32]
 8018cd0:	3564      	adds	r5, #100	; 0x64
 8018cd2:	f146 0600 	adc.w	r6, r6, #0
 8018cd6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8018cda:	bd70      	pop	{r4, r5, r6, pc}
 8018cdc:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8018ce0:	4295      	cmp	r5, r2
 8018ce2:	eb76 0303 	sbcs.w	r3, r6, r3
 8018ce6:	db04      	blt.n	8018cf2 <uxr_update_output_stream_heartbeat_timestamp+0x52>
 8018ce8:	1c43      	adds	r3, r0, #1
 8018cea:	2001      	movs	r0, #1
 8018cec:	f884 3020 	strb.w	r3, [r4, #32]
 8018cf0:	e7ee      	b.n	8018cd0 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8018cf2:	2000      	movs	r0, #0
 8018cf4:	e7ec      	b.n	8018cd0 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8018cf6:	bf00      	nop

08018cf8 <uxr_begin_output_nack_buffer_it>:
 8018cf8:	8a40      	ldrh	r0, [r0, #18]
 8018cfa:	4770      	bx	lr

08018cfc <uxr_next_reliable_nack_buffer_to_send>:
 8018cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d00:	f890 7021 	ldrb.w	r7, [r0, #33]	; 0x21
 8018d04:	b197      	cbz	r7, 8018d2c <uxr_next_reliable_nack_buffer_to_send+0x30>
 8018d06:	4680      	mov	r8, r0
 8018d08:	460d      	mov	r5, r1
 8018d0a:	4616      	mov	r6, r2
 8018d0c:	461c      	mov	r4, r3
 8018d0e:	8818      	ldrh	r0, [r3, #0]
 8018d10:	2101      	movs	r1, #1
 8018d12:	f000 f889 	bl	8018e28 <uxr_seq_num_add>
 8018d16:	8020      	strh	r0, [r4, #0]
 8018d18:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 8018d1c:	f000 f88c 	bl	8018e38 <uxr_seq_num_cmp>
 8018d20:	2800      	cmp	r0, #0
 8018d22:	dd06      	ble.n	8018d32 <uxr_next_reliable_nack_buffer_to_send+0x36>
 8018d24:	2300      	movs	r3, #0
 8018d26:	461f      	mov	r7, r3
 8018d28:	f888 3021 	strb.w	r3, [r8, #33]	; 0x21
 8018d2c:	4638      	mov	r0, r7
 8018d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d32:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 8018d36:	8820      	ldrh	r0, [r4, #0]
 8018d38:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018d3c:	fbb0 f3f2 	udiv	r3, r0, r2
 8018d40:	fbb1 fcf2 	udiv	ip, r1, r2
 8018d44:	fb02 0313 	mls	r3, r2, r3, r0
 8018d48:	b29b      	uxth	r3, r3
 8018d4a:	fb03 fc0c 	mul.w	ip, r3, ip
 8018d4e:	f8d8 3000 	ldr.w	r3, [r8]
 8018d52:	f10c 0c04 	add.w	ip, ip, #4
 8018d56:	4463      	add	r3, ip
 8018d58:	602b      	str	r3, [r5, #0]
 8018d5a:	f8d8 3000 	ldr.w	r3, [r8]
 8018d5e:	4463      	add	r3, ip
 8018d60:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8018d64:	6033      	str	r3, [r6, #0]
 8018d66:	f898 200c 	ldrb.w	r2, [r8, #12]
 8018d6a:	429a      	cmp	r2, r3
 8018d6c:	d0d0      	beq.n	8018d10 <uxr_next_reliable_nack_buffer_to_send+0x14>
 8018d6e:	e7dd      	b.n	8018d2c <uxr_next_reliable_nack_buffer_to_send+0x30>

08018d70 <uxr_process_acknack>:
 8018d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d72:	4604      	mov	r4, r0
 8018d74:	460e      	mov	r6, r1
 8018d76:	4610      	mov	r0, r2
 8018d78:	2101      	movs	r1, #1
 8018d7a:	f000 f859 	bl	8018e30 <uxr_seq_num_sub>
 8018d7e:	8a61      	ldrh	r1, [r4, #18]
 8018d80:	f000 f856 	bl	8018e30 <uxr_seq_num_sub>
 8018d84:	b1c8      	cbz	r0, 8018dba <uxr_process_acknack+0x4a>
 8018d86:	4605      	mov	r5, r0
 8018d88:	2700      	movs	r7, #0
 8018d8a:	2101      	movs	r1, #1
 8018d8c:	8a60      	ldrh	r0, [r4, #18]
 8018d8e:	f000 f84b 	bl	8018e28 <uxr_seq_num_add>
 8018d92:	8923      	ldrh	r3, [r4, #8]
 8018d94:	6862      	ldr	r2, [r4, #4]
 8018d96:	3701      	adds	r7, #1
 8018d98:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8018d9c:	6821      	ldr	r1, [r4, #0]
 8018d9e:	42bd      	cmp	r5, r7
 8018da0:	8260      	strh	r0, [r4, #18]
 8018da2:	fbb0 fef3 	udiv	lr, r0, r3
 8018da6:	fbb2 f2f3 	udiv	r2, r2, r3
 8018daa:	fb03 031e 	mls	r3, r3, lr, r0
 8018dae:	b29b      	uxth	r3, r3
 8018db0:	fb02 f303 	mul.w	r3, r2, r3
 8018db4:	f841 c003 	str.w	ip, [r1, r3]
 8018db8:	d1e7      	bne.n	8018d8a <uxr_process_acknack+0x1a>
 8018dba:	3e00      	subs	r6, #0
 8018dbc:	f04f 0300 	mov.w	r3, #0
 8018dc0:	bf18      	it	ne
 8018dc2:	2601      	movne	r6, #1
 8018dc4:	f884 3020 	strb.w	r3, [r4, #32]
 8018dc8:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 8018dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018dce:	bf00      	nop

08018dd0 <uxr_is_output_up_to_date>:
 8018dd0:	8a01      	ldrh	r1, [r0, #16]
 8018dd2:	8a40      	ldrh	r0, [r0, #18]
 8018dd4:	b508      	push	{r3, lr}
 8018dd6:	f000 f82f 	bl	8018e38 <uxr_seq_num_cmp>
 8018dda:	fab0 f080 	clz	r0, r0
 8018dde:	0940      	lsrs	r0, r0, #5
 8018de0:	bd08      	pop	{r3, pc}
 8018de2:	bf00      	nop

08018de4 <get_available_free_slots>:
 8018de4:	8901      	ldrh	r1, [r0, #8]
 8018de6:	b1e1      	cbz	r1, 8018e22 <get_available_free_slots+0x3e>
 8018de8:	6843      	ldr	r3, [r0, #4]
 8018dea:	f04f 0c00 	mov.w	ip, #0
 8018dee:	b530      	push	{r4, r5, lr}
 8018df0:	fbb3 fef1 	udiv	lr, r3, r1
 8018df4:	6805      	ldr	r5, [r0, #0]
 8018df6:	4662      	mov	r2, ip
 8018df8:	7b04      	ldrb	r4, [r0, #12]
 8018dfa:	4660      	mov	r0, ip
 8018dfc:	f10c 0c01 	add.w	ip, ip, #1
 8018e00:	fbb2 f3f1 	udiv	r3, r2, r1
 8018e04:	fb01 2313 	mls	r3, r1, r3, r2
 8018e08:	fa1f f28c 	uxth.w	r2, ip
 8018e0c:	b29b      	uxth	r3, r3
 8018e0e:	fb0e f303 	mul.w	r3, lr, r3
 8018e12:	58eb      	ldr	r3, [r5, r3]
 8018e14:	429c      	cmp	r4, r3
 8018e16:	d101      	bne.n	8018e1c <get_available_free_slots+0x38>
 8018e18:	3001      	adds	r0, #1
 8018e1a:	b280      	uxth	r0, r0
 8018e1c:	428a      	cmp	r2, r1
 8018e1e:	d3ed      	bcc.n	8018dfc <get_available_free_slots+0x18>
 8018e20:	bd30      	pop	{r4, r5, pc}
 8018e22:	4608      	mov	r0, r1
 8018e24:	4770      	bx	lr
 8018e26:	bf00      	nop

08018e28 <uxr_seq_num_add>:
 8018e28:	4408      	add	r0, r1
 8018e2a:	b280      	uxth	r0, r0
 8018e2c:	4770      	bx	lr
 8018e2e:	bf00      	nop

08018e30 <uxr_seq_num_sub>:
 8018e30:	1a40      	subs	r0, r0, r1
 8018e32:	b280      	uxth	r0, r0
 8018e34:	4770      	bx	lr
 8018e36:	bf00      	nop

08018e38 <uxr_seq_num_cmp>:
 8018e38:	4288      	cmp	r0, r1
 8018e3a:	d011      	beq.n	8018e60 <uxr_seq_num_cmp+0x28>
 8018e3c:	d309      	bcc.n	8018e52 <uxr_seq_num_cmp+0x1a>
 8018e3e:	4288      	cmp	r0, r1
 8018e40:	d910      	bls.n	8018e64 <uxr_seq_num_cmp+0x2c>
 8018e42:	1a40      	subs	r0, r0, r1
 8018e44:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8018e48:	bfd4      	ite	le
 8018e4a:	2001      	movle	r0, #1
 8018e4c:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8018e50:	4770      	bx	lr
 8018e52:	1a0b      	subs	r3, r1, r0
 8018e54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8018e58:	daf1      	bge.n	8018e3e <uxr_seq_num_cmp+0x6>
 8018e5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018e5e:	4770      	bx	lr
 8018e60:	2000      	movs	r0, #0
 8018e62:	4770      	bx	lr
 8018e64:	2001      	movs	r0, #1
 8018e66:	4770      	bx	lr

08018e68 <abort>:
 8018e68:	b508      	push	{r3, lr}
 8018e6a:	2006      	movs	r0, #6
 8018e6c:	f000 fc5a 	bl	8019724 <raise>
 8018e70:	2001      	movs	r0, #1
 8018e72:	f7e8 fd0f 	bl	8001894 <_exit>
	...

08018e78 <calloc>:
 8018e78:	4b02      	ldr	r3, [pc, #8]	; (8018e84 <calloc+0xc>)
 8018e7a:	460a      	mov	r2, r1
 8018e7c:	4601      	mov	r1, r0
 8018e7e:	6818      	ldr	r0, [r3, #0]
 8018e80:	f000 b802 	b.w	8018e88 <_calloc_r>
 8018e84:	20002138 	.word	0x20002138

08018e88 <_calloc_r>:
 8018e88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018e8a:	fba1 2402 	umull	r2, r4, r1, r2
 8018e8e:	b94c      	cbnz	r4, 8018ea4 <_calloc_r+0x1c>
 8018e90:	4611      	mov	r1, r2
 8018e92:	9201      	str	r2, [sp, #4]
 8018e94:	f000 f886 	bl	8018fa4 <_malloc_r>
 8018e98:	9a01      	ldr	r2, [sp, #4]
 8018e9a:	4605      	mov	r5, r0
 8018e9c:	b930      	cbnz	r0, 8018eac <_calloc_r+0x24>
 8018e9e:	4628      	mov	r0, r5
 8018ea0:	b003      	add	sp, #12
 8018ea2:	bd30      	pop	{r4, r5, pc}
 8018ea4:	220c      	movs	r2, #12
 8018ea6:	6002      	str	r2, [r0, #0]
 8018ea8:	2500      	movs	r5, #0
 8018eaa:	e7f8      	b.n	8018e9e <_calloc_r+0x16>
 8018eac:	4621      	mov	r1, r4
 8018eae:	f000 fbc1 	bl	8019634 <memset>
 8018eb2:	e7f4      	b.n	8018e9e <_calloc_r+0x16>

08018eb4 <getenv>:
 8018eb4:	b507      	push	{r0, r1, r2, lr}
 8018eb6:	4b04      	ldr	r3, [pc, #16]	; (8018ec8 <getenv+0x14>)
 8018eb8:	4601      	mov	r1, r0
 8018eba:	aa01      	add	r2, sp, #4
 8018ebc:	6818      	ldr	r0, [r3, #0]
 8018ebe:	f000 f805 	bl	8018ecc <_findenv_r>
 8018ec2:	b003      	add	sp, #12
 8018ec4:	f85d fb04 	ldr.w	pc, [sp], #4
 8018ec8:	20002138 	.word	0x20002138

08018ecc <_findenv_r>:
 8018ecc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ed0:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8018f40 <_findenv_r+0x74>
 8018ed4:	4607      	mov	r7, r0
 8018ed6:	4689      	mov	r9, r1
 8018ed8:	4616      	mov	r6, r2
 8018eda:	f000 fd4d 	bl	8019978 <__env_lock>
 8018ede:	f8da 4000 	ldr.w	r4, [sl]
 8018ee2:	b134      	cbz	r4, 8018ef2 <_findenv_r+0x26>
 8018ee4:	464b      	mov	r3, r9
 8018ee6:	4698      	mov	r8, r3
 8018ee8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018eec:	b13a      	cbz	r2, 8018efe <_findenv_r+0x32>
 8018eee:	2a3d      	cmp	r2, #61	; 0x3d
 8018ef0:	d1f9      	bne.n	8018ee6 <_findenv_r+0x1a>
 8018ef2:	4638      	mov	r0, r7
 8018ef4:	f000 fd46 	bl	8019984 <__env_unlock>
 8018ef8:	2000      	movs	r0, #0
 8018efa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018efe:	eba8 0809 	sub.w	r8, r8, r9
 8018f02:	46a3      	mov	fp, r4
 8018f04:	f854 0b04 	ldr.w	r0, [r4], #4
 8018f08:	2800      	cmp	r0, #0
 8018f0a:	d0f2      	beq.n	8018ef2 <_findenv_r+0x26>
 8018f0c:	4642      	mov	r2, r8
 8018f0e:	4649      	mov	r1, r9
 8018f10:	f000 fba5 	bl	801965e <strncmp>
 8018f14:	2800      	cmp	r0, #0
 8018f16:	d1f4      	bne.n	8018f02 <_findenv_r+0x36>
 8018f18:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018f1c:	eb03 0508 	add.w	r5, r3, r8
 8018f20:	f813 3008 	ldrb.w	r3, [r3, r8]
 8018f24:	2b3d      	cmp	r3, #61	; 0x3d
 8018f26:	d1ec      	bne.n	8018f02 <_findenv_r+0x36>
 8018f28:	f8da 3000 	ldr.w	r3, [sl]
 8018f2c:	ebab 0303 	sub.w	r3, fp, r3
 8018f30:	109b      	asrs	r3, r3, #2
 8018f32:	4638      	mov	r0, r7
 8018f34:	6033      	str	r3, [r6, #0]
 8018f36:	f000 fd25 	bl	8019984 <__env_unlock>
 8018f3a:	1c68      	adds	r0, r5, #1
 8018f3c:	e7dd      	b.n	8018efa <_findenv_r+0x2e>
 8018f3e:	bf00      	nop
 8018f40:	20000000 	.word	0x20000000

08018f44 <malloc>:
 8018f44:	4b02      	ldr	r3, [pc, #8]	; (8018f50 <malloc+0xc>)
 8018f46:	4601      	mov	r1, r0
 8018f48:	6818      	ldr	r0, [r3, #0]
 8018f4a:	f000 b82b 	b.w	8018fa4 <_malloc_r>
 8018f4e:	bf00      	nop
 8018f50:	20002138 	.word	0x20002138

08018f54 <free>:
 8018f54:	4b02      	ldr	r3, [pc, #8]	; (8018f60 <free+0xc>)
 8018f56:	4601      	mov	r1, r0
 8018f58:	6818      	ldr	r0, [r3, #0]
 8018f5a:	f000 bd19 	b.w	8019990 <_free_r>
 8018f5e:	bf00      	nop
 8018f60:	20002138 	.word	0x20002138

08018f64 <sbrk_aligned>:
 8018f64:	b570      	push	{r4, r5, r6, lr}
 8018f66:	4e0e      	ldr	r6, [pc, #56]	; (8018fa0 <sbrk_aligned+0x3c>)
 8018f68:	460c      	mov	r4, r1
 8018f6a:	6831      	ldr	r1, [r6, #0]
 8018f6c:	4605      	mov	r5, r0
 8018f6e:	b911      	cbnz	r1, 8018f76 <sbrk_aligned+0x12>
 8018f70:	f000 fc7e 	bl	8019870 <_sbrk_r>
 8018f74:	6030      	str	r0, [r6, #0]
 8018f76:	4621      	mov	r1, r4
 8018f78:	4628      	mov	r0, r5
 8018f7a:	f000 fc79 	bl	8019870 <_sbrk_r>
 8018f7e:	1c43      	adds	r3, r0, #1
 8018f80:	d00a      	beq.n	8018f98 <sbrk_aligned+0x34>
 8018f82:	1cc4      	adds	r4, r0, #3
 8018f84:	f024 0403 	bic.w	r4, r4, #3
 8018f88:	42a0      	cmp	r0, r4
 8018f8a:	d007      	beq.n	8018f9c <sbrk_aligned+0x38>
 8018f8c:	1a21      	subs	r1, r4, r0
 8018f8e:	4628      	mov	r0, r5
 8018f90:	f000 fc6e 	bl	8019870 <_sbrk_r>
 8018f94:	3001      	adds	r0, #1
 8018f96:	d101      	bne.n	8018f9c <sbrk_aligned+0x38>
 8018f98:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8018f9c:	4620      	mov	r0, r4
 8018f9e:	bd70      	pop	{r4, r5, r6, pc}
 8018fa0:	200109e8 	.word	0x200109e8

08018fa4 <_malloc_r>:
 8018fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018fa8:	1ccd      	adds	r5, r1, #3
 8018faa:	f025 0503 	bic.w	r5, r5, #3
 8018fae:	3508      	adds	r5, #8
 8018fb0:	2d0c      	cmp	r5, #12
 8018fb2:	bf38      	it	cc
 8018fb4:	250c      	movcc	r5, #12
 8018fb6:	2d00      	cmp	r5, #0
 8018fb8:	4607      	mov	r7, r0
 8018fba:	db01      	blt.n	8018fc0 <_malloc_r+0x1c>
 8018fbc:	42a9      	cmp	r1, r5
 8018fbe:	d905      	bls.n	8018fcc <_malloc_r+0x28>
 8018fc0:	230c      	movs	r3, #12
 8018fc2:	603b      	str	r3, [r7, #0]
 8018fc4:	2600      	movs	r6, #0
 8018fc6:	4630      	mov	r0, r6
 8018fc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018fcc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80190a0 <_malloc_r+0xfc>
 8018fd0:	f000 f868 	bl	80190a4 <__malloc_lock>
 8018fd4:	f8d8 3000 	ldr.w	r3, [r8]
 8018fd8:	461c      	mov	r4, r3
 8018fda:	bb5c      	cbnz	r4, 8019034 <_malloc_r+0x90>
 8018fdc:	4629      	mov	r1, r5
 8018fde:	4638      	mov	r0, r7
 8018fe0:	f7ff ffc0 	bl	8018f64 <sbrk_aligned>
 8018fe4:	1c43      	adds	r3, r0, #1
 8018fe6:	4604      	mov	r4, r0
 8018fe8:	d155      	bne.n	8019096 <_malloc_r+0xf2>
 8018fea:	f8d8 4000 	ldr.w	r4, [r8]
 8018fee:	4626      	mov	r6, r4
 8018ff0:	2e00      	cmp	r6, #0
 8018ff2:	d145      	bne.n	8019080 <_malloc_r+0xdc>
 8018ff4:	2c00      	cmp	r4, #0
 8018ff6:	d048      	beq.n	801908a <_malloc_r+0xe6>
 8018ff8:	6823      	ldr	r3, [r4, #0]
 8018ffa:	4631      	mov	r1, r6
 8018ffc:	4638      	mov	r0, r7
 8018ffe:	eb04 0903 	add.w	r9, r4, r3
 8019002:	f000 fc35 	bl	8019870 <_sbrk_r>
 8019006:	4581      	cmp	r9, r0
 8019008:	d13f      	bne.n	801908a <_malloc_r+0xe6>
 801900a:	6821      	ldr	r1, [r4, #0]
 801900c:	1a6d      	subs	r5, r5, r1
 801900e:	4629      	mov	r1, r5
 8019010:	4638      	mov	r0, r7
 8019012:	f7ff ffa7 	bl	8018f64 <sbrk_aligned>
 8019016:	3001      	adds	r0, #1
 8019018:	d037      	beq.n	801908a <_malloc_r+0xe6>
 801901a:	6823      	ldr	r3, [r4, #0]
 801901c:	442b      	add	r3, r5
 801901e:	6023      	str	r3, [r4, #0]
 8019020:	f8d8 3000 	ldr.w	r3, [r8]
 8019024:	2b00      	cmp	r3, #0
 8019026:	d038      	beq.n	801909a <_malloc_r+0xf6>
 8019028:	685a      	ldr	r2, [r3, #4]
 801902a:	42a2      	cmp	r2, r4
 801902c:	d12b      	bne.n	8019086 <_malloc_r+0xe2>
 801902e:	2200      	movs	r2, #0
 8019030:	605a      	str	r2, [r3, #4]
 8019032:	e00f      	b.n	8019054 <_malloc_r+0xb0>
 8019034:	6822      	ldr	r2, [r4, #0]
 8019036:	1b52      	subs	r2, r2, r5
 8019038:	d41f      	bmi.n	801907a <_malloc_r+0xd6>
 801903a:	2a0b      	cmp	r2, #11
 801903c:	d917      	bls.n	801906e <_malloc_r+0xca>
 801903e:	1961      	adds	r1, r4, r5
 8019040:	42a3      	cmp	r3, r4
 8019042:	6025      	str	r5, [r4, #0]
 8019044:	bf18      	it	ne
 8019046:	6059      	strne	r1, [r3, #4]
 8019048:	6863      	ldr	r3, [r4, #4]
 801904a:	bf08      	it	eq
 801904c:	f8c8 1000 	streq.w	r1, [r8]
 8019050:	5162      	str	r2, [r4, r5]
 8019052:	604b      	str	r3, [r1, #4]
 8019054:	4638      	mov	r0, r7
 8019056:	f104 060b 	add.w	r6, r4, #11
 801905a:	f000 f829 	bl	80190b0 <__malloc_unlock>
 801905e:	f026 0607 	bic.w	r6, r6, #7
 8019062:	1d23      	adds	r3, r4, #4
 8019064:	1af2      	subs	r2, r6, r3
 8019066:	d0ae      	beq.n	8018fc6 <_malloc_r+0x22>
 8019068:	1b9b      	subs	r3, r3, r6
 801906a:	50a3      	str	r3, [r4, r2]
 801906c:	e7ab      	b.n	8018fc6 <_malloc_r+0x22>
 801906e:	42a3      	cmp	r3, r4
 8019070:	6862      	ldr	r2, [r4, #4]
 8019072:	d1dd      	bne.n	8019030 <_malloc_r+0x8c>
 8019074:	f8c8 2000 	str.w	r2, [r8]
 8019078:	e7ec      	b.n	8019054 <_malloc_r+0xb0>
 801907a:	4623      	mov	r3, r4
 801907c:	6864      	ldr	r4, [r4, #4]
 801907e:	e7ac      	b.n	8018fda <_malloc_r+0x36>
 8019080:	4634      	mov	r4, r6
 8019082:	6876      	ldr	r6, [r6, #4]
 8019084:	e7b4      	b.n	8018ff0 <_malloc_r+0x4c>
 8019086:	4613      	mov	r3, r2
 8019088:	e7cc      	b.n	8019024 <_malloc_r+0x80>
 801908a:	230c      	movs	r3, #12
 801908c:	603b      	str	r3, [r7, #0]
 801908e:	4638      	mov	r0, r7
 8019090:	f000 f80e 	bl	80190b0 <__malloc_unlock>
 8019094:	e797      	b.n	8018fc6 <_malloc_r+0x22>
 8019096:	6025      	str	r5, [r4, #0]
 8019098:	e7dc      	b.n	8019054 <_malloc_r+0xb0>
 801909a:	605b      	str	r3, [r3, #4]
 801909c:	deff      	udf	#255	; 0xff
 801909e:	bf00      	nop
 80190a0:	200109e4 	.word	0x200109e4

080190a4 <__malloc_lock>:
 80190a4:	4801      	ldr	r0, [pc, #4]	; (80190ac <__malloc_lock+0x8>)
 80190a6:	f000 bc30 	b.w	801990a <__retarget_lock_acquire_recursive>
 80190aa:	bf00      	nop
 80190ac:	20010b2d 	.word	0x20010b2d

080190b0 <__malloc_unlock>:
 80190b0:	4801      	ldr	r0, [pc, #4]	; (80190b8 <__malloc_unlock+0x8>)
 80190b2:	f000 bc2b 	b.w	801990c <__retarget_lock_release_recursive>
 80190b6:	bf00      	nop
 80190b8:	20010b2d 	.word	0x20010b2d

080190bc <srand>:
 80190bc:	b538      	push	{r3, r4, r5, lr}
 80190be:	4b10      	ldr	r3, [pc, #64]	; (8019100 <srand+0x44>)
 80190c0:	681d      	ldr	r5, [r3, #0]
 80190c2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80190c4:	4604      	mov	r4, r0
 80190c6:	b9b3      	cbnz	r3, 80190f6 <srand+0x3a>
 80190c8:	2018      	movs	r0, #24
 80190ca:	f7ff ff3b 	bl	8018f44 <malloc>
 80190ce:	4602      	mov	r2, r0
 80190d0:	6328      	str	r0, [r5, #48]	; 0x30
 80190d2:	b920      	cbnz	r0, 80190de <srand+0x22>
 80190d4:	4b0b      	ldr	r3, [pc, #44]	; (8019104 <srand+0x48>)
 80190d6:	480c      	ldr	r0, [pc, #48]	; (8019108 <srand+0x4c>)
 80190d8:	2146      	movs	r1, #70	; 0x46
 80190da:	f000 fc2f 	bl	801993c <__assert_func>
 80190de:	490b      	ldr	r1, [pc, #44]	; (801910c <srand+0x50>)
 80190e0:	4b0b      	ldr	r3, [pc, #44]	; (8019110 <srand+0x54>)
 80190e2:	e9c0 1300 	strd	r1, r3, [r0]
 80190e6:	4b0b      	ldr	r3, [pc, #44]	; (8019114 <srand+0x58>)
 80190e8:	6083      	str	r3, [r0, #8]
 80190ea:	230b      	movs	r3, #11
 80190ec:	8183      	strh	r3, [r0, #12]
 80190ee:	2100      	movs	r1, #0
 80190f0:	2001      	movs	r0, #1
 80190f2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80190f6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80190f8:	2200      	movs	r2, #0
 80190fa:	611c      	str	r4, [r3, #16]
 80190fc:	615a      	str	r2, [r3, #20]
 80190fe:	bd38      	pop	{r3, r4, r5, pc}
 8019100:	20002138 	.word	0x20002138
 8019104:	0801bf04 	.word	0x0801bf04
 8019108:	0801bf1b 	.word	0x0801bf1b
 801910c:	abcd330e 	.word	0xabcd330e
 8019110:	e66d1234 	.word	0xe66d1234
 8019114:	0005deec 	.word	0x0005deec

08019118 <rand>:
 8019118:	4b16      	ldr	r3, [pc, #88]	; (8019174 <rand+0x5c>)
 801911a:	b510      	push	{r4, lr}
 801911c:	681c      	ldr	r4, [r3, #0]
 801911e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8019120:	b9b3      	cbnz	r3, 8019150 <rand+0x38>
 8019122:	2018      	movs	r0, #24
 8019124:	f7ff ff0e 	bl	8018f44 <malloc>
 8019128:	4602      	mov	r2, r0
 801912a:	6320      	str	r0, [r4, #48]	; 0x30
 801912c:	b920      	cbnz	r0, 8019138 <rand+0x20>
 801912e:	4b12      	ldr	r3, [pc, #72]	; (8019178 <rand+0x60>)
 8019130:	4812      	ldr	r0, [pc, #72]	; (801917c <rand+0x64>)
 8019132:	2152      	movs	r1, #82	; 0x52
 8019134:	f000 fc02 	bl	801993c <__assert_func>
 8019138:	4911      	ldr	r1, [pc, #68]	; (8019180 <rand+0x68>)
 801913a:	4b12      	ldr	r3, [pc, #72]	; (8019184 <rand+0x6c>)
 801913c:	e9c0 1300 	strd	r1, r3, [r0]
 8019140:	4b11      	ldr	r3, [pc, #68]	; (8019188 <rand+0x70>)
 8019142:	6083      	str	r3, [r0, #8]
 8019144:	230b      	movs	r3, #11
 8019146:	8183      	strh	r3, [r0, #12]
 8019148:	2100      	movs	r1, #0
 801914a:	2001      	movs	r0, #1
 801914c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019150:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019152:	480e      	ldr	r0, [pc, #56]	; (801918c <rand+0x74>)
 8019154:	690b      	ldr	r3, [r1, #16]
 8019156:	694c      	ldr	r4, [r1, #20]
 8019158:	4a0d      	ldr	r2, [pc, #52]	; (8019190 <rand+0x78>)
 801915a:	4358      	muls	r0, r3
 801915c:	fb02 0004 	mla	r0, r2, r4, r0
 8019160:	fba3 3202 	umull	r3, r2, r3, r2
 8019164:	3301      	adds	r3, #1
 8019166:	eb40 0002 	adc.w	r0, r0, r2
 801916a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801916e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8019172:	bd10      	pop	{r4, pc}
 8019174:	20002138 	.word	0x20002138
 8019178:	0801bf04 	.word	0x0801bf04
 801917c:	0801bf1b 	.word	0x0801bf1b
 8019180:	abcd330e 	.word	0xabcd330e
 8019184:	e66d1234 	.word	0xe66d1234
 8019188:	0005deec 	.word	0x0005deec
 801918c:	5851f42d 	.word	0x5851f42d
 8019190:	4c957f2d 	.word	0x4c957f2d

08019194 <realloc>:
 8019194:	4b02      	ldr	r3, [pc, #8]	; (80191a0 <realloc+0xc>)
 8019196:	460a      	mov	r2, r1
 8019198:	4601      	mov	r1, r0
 801919a:	6818      	ldr	r0, [r3, #0]
 801919c:	f000 b802 	b.w	80191a4 <_realloc_r>
 80191a0:	20002138 	.word	0x20002138

080191a4 <_realloc_r>:
 80191a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80191a8:	4680      	mov	r8, r0
 80191aa:	4614      	mov	r4, r2
 80191ac:	460e      	mov	r6, r1
 80191ae:	b921      	cbnz	r1, 80191ba <_realloc_r+0x16>
 80191b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80191b4:	4611      	mov	r1, r2
 80191b6:	f7ff bef5 	b.w	8018fa4 <_malloc_r>
 80191ba:	b92a      	cbnz	r2, 80191c8 <_realloc_r+0x24>
 80191bc:	f000 fbe8 	bl	8019990 <_free_r>
 80191c0:	4625      	mov	r5, r4
 80191c2:	4628      	mov	r0, r5
 80191c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80191c8:	f000 fc2e 	bl	8019a28 <_malloc_usable_size_r>
 80191cc:	4284      	cmp	r4, r0
 80191ce:	4607      	mov	r7, r0
 80191d0:	d802      	bhi.n	80191d8 <_realloc_r+0x34>
 80191d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80191d6:	d812      	bhi.n	80191fe <_realloc_r+0x5a>
 80191d8:	4621      	mov	r1, r4
 80191da:	4640      	mov	r0, r8
 80191dc:	f7ff fee2 	bl	8018fa4 <_malloc_r>
 80191e0:	4605      	mov	r5, r0
 80191e2:	2800      	cmp	r0, #0
 80191e4:	d0ed      	beq.n	80191c2 <_realloc_r+0x1e>
 80191e6:	42bc      	cmp	r4, r7
 80191e8:	4622      	mov	r2, r4
 80191ea:	4631      	mov	r1, r6
 80191ec:	bf28      	it	cs
 80191ee:	463a      	movcs	r2, r7
 80191f0:	f000 fb95 	bl	801991e <memcpy>
 80191f4:	4631      	mov	r1, r6
 80191f6:	4640      	mov	r0, r8
 80191f8:	f000 fbca 	bl	8019990 <_free_r>
 80191fc:	e7e1      	b.n	80191c2 <_realloc_r+0x1e>
 80191fe:	4635      	mov	r5, r6
 8019200:	e7df      	b.n	80191c2 <_realloc_r+0x1e>
	...

08019204 <_strtoul_l.constprop.0>:
 8019204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019208:	4f36      	ldr	r7, [pc, #216]	; (80192e4 <_strtoul_l.constprop.0+0xe0>)
 801920a:	4686      	mov	lr, r0
 801920c:	460d      	mov	r5, r1
 801920e:	4628      	mov	r0, r5
 8019210:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019214:	5d3e      	ldrb	r6, [r7, r4]
 8019216:	f016 0608 	ands.w	r6, r6, #8
 801921a:	d1f8      	bne.n	801920e <_strtoul_l.constprop.0+0xa>
 801921c:	2c2d      	cmp	r4, #45	; 0x2d
 801921e:	d130      	bne.n	8019282 <_strtoul_l.constprop.0+0x7e>
 8019220:	782c      	ldrb	r4, [r5, #0]
 8019222:	2601      	movs	r6, #1
 8019224:	1c85      	adds	r5, r0, #2
 8019226:	2b00      	cmp	r3, #0
 8019228:	d057      	beq.n	80192da <_strtoul_l.constprop.0+0xd6>
 801922a:	2b10      	cmp	r3, #16
 801922c:	d109      	bne.n	8019242 <_strtoul_l.constprop.0+0x3e>
 801922e:	2c30      	cmp	r4, #48	; 0x30
 8019230:	d107      	bne.n	8019242 <_strtoul_l.constprop.0+0x3e>
 8019232:	7828      	ldrb	r0, [r5, #0]
 8019234:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8019238:	2858      	cmp	r0, #88	; 0x58
 801923a:	d149      	bne.n	80192d0 <_strtoul_l.constprop.0+0xcc>
 801923c:	786c      	ldrb	r4, [r5, #1]
 801923e:	2310      	movs	r3, #16
 8019240:	3502      	adds	r5, #2
 8019242:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8019246:	2700      	movs	r7, #0
 8019248:	fbb8 f8f3 	udiv	r8, r8, r3
 801924c:	fb03 f908 	mul.w	r9, r3, r8
 8019250:	ea6f 0909 	mvn.w	r9, r9
 8019254:	4638      	mov	r0, r7
 8019256:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801925a:	f1bc 0f09 	cmp.w	ip, #9
 801925e:	d815      	bhi.n	801928c <_strtoul_l.constprop.0+0x88>
 8019260:	4664      	mov	r4, ip
 8019262:	42a3      	cmp	r3, r4
 8019264:	dd23      	ble.n	80192ae <_strtoul_l.constprop.0+0xaa>
 8019266:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 801926a:	d007      	beq.n	801927c <_strtoul_l.constprop.0+0x78>
 801926c:	4580      	cmp	r8, r0
 801926e:	d31b      	bcc.n	80192a8 <_strtoul_l.constprop.0+0xa4>
 8019270:	d101      	bne.n	8019276 <_strtoul_l.constprop.0+0x72>
 8019272:	45a1      	cmp	r9, r4
 8019274:	db18      	blt.n	80192a8 <_strtoul_l.constprop.0+0xa4>
 8019276:	fb00 4003 	mla	r0, r0, r3, r4
 801927a:	2701      	movs	r7, #1
 801927c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019280:	e7e9      	b.n	8019256 <_strtoul_l.constprop.0+0x52>
 8019282:	2c2b      	cmp	r4, #43	; 0x2b
 8019284:	bf04      	itt	eq
 8019286:	782c      	ldrbeq	r4, [r5, #0]
 8019288:	1c85      	addeq	r5, r0, #2
 801928a:	e7cc      	b.n	8019226 <_strtoul_l.constprop.0+0x22>
 801928c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8019290:	f1bc 0f19 	cmp.w	ip, #25
 8019294:	d801      	bhi.n	801929a <_strtoul_l.constprop.0+0x96>
 8019296:	3c37      	subs	r4, #55	; 0x37
 8019298:	e7e3      	b.n	8019262 <_strtoul_l.constprop.0+0x5e>
 801929a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801929e:	f1bc 0f19 	cmp.w	ip, #25
 80192a2:	d804      	bhi.n	80192ae <_strtoul_l.constprop.0+0xaa>
 80192a4:	3c57      	subs	r4, #87	; 0x57
 80192a6:	e7dc      	b.n	8019262 <_strtoul_l.constprop.0+0x5e>
 80192a8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80192ac:	e7e6      	b.n	801927c <_strtoul_l.constprop.0+0x78>
 80192ae:	1c7b      	adds	r3, r7, #1
 80192b0:	d106      	bne.n	80192c0 <_strtoul_l.constprop.0+0xbc>
 80192b2:	2322      	movs	r3, #34	; 0x22
 80192b4:	f8ce 3000 	str.w	r3, [lr]
 80192b8:	4638      	mov	r0, r7
 80192ba:	b932      	cbnz	r2, 80192ca <_strtoul_l.constprop.0+0xc6>
 80192bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80192c0:	b106      	cbz	r6, 80192c4 <_strtoul_l.constprop.0+0xc0>
 80192c2:	4240      	negs	r0, r0
 80192c4:	2a00      	cmp	r2, #0
 80192c6:	d0f9      	beq.n	80192bc <_strtoul_l.constprop.0+0xb8>
 80192c8:	b107      	cbz	r7, 80192cc <_strtoul_l.constprop.0+0xc8>
 80192ca:	1e69      	subs	r1, r5, #1
 80192cc:	6011      	str	r1, [r2, #0]
 80192ce:	e7f5      	b.n	80192bc <_strtoul_l.constprop.0+0xb8>
 80192d0:	2430      	movs	r4, #48	; 0x30
 80192d2:	2b00      	cmp	r3, #0
 80192d4:	d1b5      	bne.n	8019242 <_strtoul_l.constprop.0+0x3e>
 80192d6:	2308      	movs	r3, #8
 80192d8:	e7b3      	b.n	8019242 <_strtoul_l.constprop.0+0x3e>
 80192da:	2c30      	cmp	r4, #48	; 0x30
 80192dc:	d0a9      	beq.n	8019232 <_strtoul_l.constprop.0+0x2e>
 80192de:	230a      	movs	r3, #10
 80192e0:	e7af      	b.n	8019242 <_strtoul_l.constprop.0+0x3e>
 80192e2:	bf00      	nop
 80192e4:	0801bf74 	.word	0x0801bf74

080192e8 <strtoul>:
 80192e8:	4613      	mov	r3, r2
 80192ea:	460a      	mov	r2, r1
 80192ec:	4601      	mov	r1, r0
 80192ee:	4802      	ldr	r0, [pc, #8]	; (80192f8 <strtoul+0x10>)
 80192f0:	6800      	ldr	r0, [r0, #0]
 80192f2:	f7ff bf87 	b.w	8019204 <_strtoul_l.constprop.0>
 80192f6:	bf00      	nop
 80192f8:	20002138 	.word	0x20002138

080192fc <std>:
 80192fc:	2300      	movs	r3, #0
 80192fe:	b510      	push	{r4, lr}
 8019300:	4604      	mov	r4, r0
 8019302:	e9c0 3300 	strd	r3, r3, [r0]
 8019306:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801930a:	6083      	str	r3, [r0, #8]
 801930c:	8181      	strh	r1, [r0, #12]
 801930e:	6643      	str	r3, [r0, #100]	; 0x64
 8019310:	81c2      	strh	r2, [r0, #14]
 8019312:	6183      	str	r3, [r0, #24]
 8019314:	4619      	mov	r1, r3
 8019316:	2208      	movs	r2, #8
 8019318:	305c      	adds	r0, #92	; 0x5c
 801931a:	f000 f98b 	bl	8019634 <memset>
 801931e:	4b0d      	ldr	r3, [pc, #52]	; (8019354 <std+0x58>)
 8019320:	6263      	str	r3, [r4, #36]	; 0x24
 8019322:	4b0d      	ldr	r3, [pc, #52]	; (8019358 <std+0x5c>)
 8019324:	62a3      	str	r3, [r4, #40]	; 0x28
 8019326:	4b0d      	ldr	r3, [pc, #52]	; (801935c <std+0x60>)
 8019328:	62e3      	str	r3, [r4, #44]	; 0x2c
 801932a:	4b0d      	ldr	r3, [pc, #52]	; (8019360 <std+0x64>)
 801932c:	6323      	str	r3, [r4, #48]	; 0x30
 801932e:	4b0d      	ldr	r3, [pc, #52]	; (8019364 <std+0x68>)
 8019330:	6224      	str	r4, [r4, #32]
 8019332:	429c      	cmp	r4, r3
 8019334:	d006      	beq.n	8019344 <std+0x48>
 8019336:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801933a:	4294      	cmp	r4, r2
 801933c:	d002      	beq.n	8019344 <std+0x48>
 801933e:	33d0      	adds	r3, #208	; 0xd0
 8019340:	429c      	cmp	r4, r3
 8019342:	d105      	bne.n	8019350 <std+0x54>
 8019344:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801934c:	f000 badc 	b.w	8019908 <__retarget_lock_init_recursive>
 8019350:	bd10      	pop	{r4, pc}
 8019352:	bf00      	nop
 8019354:	080194e9 	.word	0x080194e9
 8019358:	0801950b 	.word	0x0801950b
 801935c:	08019543 	.word	0x08019543
 8019360:	08019567 	.word	0x08019567
 8019364:	200109ec 	.word	0x200109ec

08019368 <stdio_exit_handler>:
 8019368:	4a02      	ldr	r2, [pc, #8]	; (8019374 <stdio_exit_handler+0xc>)
 801936a:	4903      	ldr	r1, [pc, #12]	; (8019378 <stdio_exit_handler+0x10>)
 801936c:	4803      	ldr	r0, [pc, #12]	; (801937c <stdio_exit_handler+0x14>)
 801936e:	f000 b869 	b.w	8019444 <_fwalk_sglue>
 8019372:	bf00      	nop
 8019374:	200020e0 	.word	0x200020e0
 8019378:	0801a115 	.word	0x0801a115
 801937c:	200020ec 	.word	0x200020ec

08019380 <cleanup_stdio>:
 8019380:	6841      	ldr	r1, [r0, #4]
 8019382:	4b0c      	ldr	r3, [pc, #48]	; (80193b4 <cleanup_stdio+0x34>)
 8019384:	4299      	cmp	r1, r3
 8019386:	b510      	push	{r4, lr}
 8019388:	4604      	mov	r4, r0
 801938a:	d001      	beq.n	8019390 <cleanup_stdio+0x10>
 801938c:	f000 fec2 	bl	801a114 <_fflush_r>
 8019390:	68a1      	ldr	r1, [r4, #8]
 8019392:	4b09      	ldr	r3, [pc, #36]	; (80193b8 <cleanup_stdio+0x38>)
 8019394:	4299      	cmp	r1, r3
 8019396:	d002      	beq.n	801939e <cleanup_stdio+0x1e>
 8019398:	4620      	mov	r0, r4
 801939a:	f000 febb 	bl	801a114 <_fflush_r>
 801939e:	68e1      	ldr	r1, [r4, #12]
 80193a0:	4b06      	ldr	r3, [pc, #24]	; (80193bc <cleanup_stdio+0x3c>)
 80193a2:	4299      	cmp	r1, r3
 80193a4:	d004      	beq.n	80193b0 <cleanup_stdio+0x30>
 80193a6:	4620      	mov	r0, r4
 80193a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80193ac:	f000 beb2 	b.w	801a114 <_fflush_r>
 80193b0:	bd10      	pop	{r4, pc}
 80193b2:	bf00      	nop
 80193b4:	200109ec 	.word	0x200109ec
 80193b8:	20010a54 	.word	0x20010a54
 80193bc:	20010abc 	.word	0x20010abc

080193c0 <global_stdio_init.part.0>:
 80193c0:	b510      	push	{r4, lr}
 80193c2:	4b0b      	ldr	r3, [pc, #44]	; (80193f0 <global_stdio_init.part.0+0x30>)
 80193c4:	4c0b      	ldr	r4, [pc, #44]	; (80193f4 <global_stdio_init.part.0+0x34>)
 80193c6:	4a0c      	ldr	r2, [pc, #48]	; (80193f8 <global_stdio_init.part.0+0x38>)
 80193c8:	601a      	str	r2, [r3, #0]
 80193ca:	4620      	mov	r0, r4
 80193cc:	2200      	movs	r2, #0
 80193ce:	2104      	movs	r1, #4
 80193d0:	f7ff ff94 	bl	80192fc <std>
 80193d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80193d8:	2201      	movs	r2, #1
 80193da:	2109      	movs	r1, #9
 80193dc:	f7ff ff8e 	bl	80192fc <std>
 80193e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80193e4:	2202      	movs	r2, #2
 80193e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80193ea:	2112      	movs	r1, #18
 80193ec:	f7ff bf86 	b.w	80192fc <std>
 80193f0:	20010b24 	.word	0x20010b24
 80193f4:	200109ec 	.word	0x200109ec
 80193f8:	08019369 	.word	0x08019369

080193fc <__sfp_lock_acquire>:
 80193fc:	4801      	ldr	r0, [pc, #4]	; (8019404 <__sfp_lock_acquire+0x8>)
 80193fe:	f000 ba84 	b.w	801990a <__retarget_lock_acquire_recursive>
 8019402:	bf00      	nop
 8019404:	20010b2e 	.word	0x20010b2e

08019408 <__sfp_lock_release>:
 8019408:	4801      	ldr	r0, [pc, #4]	; (8019410 <__sfp_lock_release+0x8>)
 801940a:	f000 ba7f 	b.w	801990c <__retarget_lock_release_recursive>
 801940e:	bf00      	nop
 8019410:	20010b2e 	.word	0x20010b2e

08019414 <__sinit>:
 8019414:	b510      	push	{r4, lr}
 8019416:	4604      	mov	r4, r0
 8019418:	f7ff fff0 	bl	80193fc <__sfp_lock_acquire>
 801941c:	6a23      	ldr	r3, [r4, #32]
 801941e:	b11b      	cbz	r3, 8019428 <__sinit+0x14>
 8019420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019424:	f7ff bff0 	b.w	8019408 <__sfp_lock_release>
 8019428:	4b04      	ldr	r3, [pc, #16]	; (801943c <__sinit+0x28>)
 801942a:	6223      	str	r3, [r4, #32]
 801942c:	4b04      	ldr	r3, [pc, #16]	; (8019440 <__sinit+0x2c>)
 801942e:	681b      	ldr	r3, [r3, #0]
 8019430:	2b00      	cmp	r3, #0
 8019432:	d1f5      	bne.n	8019420 <__sinit+0xc>
 8019434:	f7ff ffc4 	bl	80193c0 <global_stdio_init.part.0>
 8019438:	e7f2      	b.n	8019420 <__sinit+0xc>
 801943a:	bf00      	nop
 801943c:	08019381 	.word	0x08019381
 8019440:	20010b24 	.word	0x20010b24

08019444 <_fwalk_sglue>:
 8019444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019448:	4607      	mov	r7, r0
 801944a:	4688      	mov	r8, r1
 801944c:	4614      	mov	r4, r2
 801944e:	2600      	movs	r6, #0
 8019450:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019454:	f1b9 0901 	subs.w	r9, r9, #1
 8019458:	d505      	bpl.n	8019466 <_fwalk_sglue+0x22>
 801945a:	6824      	ldr	r4, [r4, #0]
 801945c:	2c00      	cmp	r4, #0
 801945e:	d1f7      	bne.n	8019450 <_fwalk_sglue+0xc>
 8019460:	4630      	mov	r0, r6
 8019462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019466:	89ab      	ldrh	r3, [r5, #12]
 8019468:	2b01      	cmp	r3, #1
 801946a:	d907      	bls.n	801947c <_fwalk_sglue+0x38>
 801946c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019470:	3301      	adds	r3, #1
 8019472:	d003      	beq.n	801947c <_fwalk_sglue+0x38>
 8019474:	4629      	mov	r1, r5
 8019476:	4638      	mov	r0, r7
 8019478:	47c0      	blx	r8
 801947a:	4306      	orrs	r6, r0
 801947c:	3568      	adds	r5, #104	; 0x68
 801947e:	e7e9      	b.n	8019454 <_fwalk_sglue+0x10>

08019480 <sniprintf>:
 8019480:	b40c      	push	{r2, r3}
 8019482:	b530      	push	{r4, r5, lr}
 8019484:	4b17      	ldr	r3, [pc, #92]	; (80194e4 <sniprintf+0x64>)
 8019486:	1e0c      	subs	r4, r1, #0
 8019488:	681d      	ldr	r5, [r3, #0]
 801948a:	b09d      	sub	sp, #116	; 0x74
 801948c:	da08      	bge.n	80194a0 <sniprintf+0x20>
 801948e:	238b      	movs	r3, #139	; 0x8b
 8019490:	602b      	str	r3, [r5, #0]
 8019492:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019496:	b01d      	add	sp, #116	; 0x74
 8019498:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801949c:	b002      	add	sp, #8
 801949e:	4770      	bx	lr
 80194a0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80194a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80194a8:	bf14      	ite	ne
 80194aa:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80194ae:	4623      	moveq	r3, r4
 80194b0:	9304      	str	r3, [sp, #16]
 80194b2:	9307      	str	r3, [sp, #28]
 80194b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80194b8:	9002      	str	r0, [sp, #8]
 80194ba:	9006      	str	r0, [sp, #24]
 80194bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80194c0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80194c2:	ab21      	add	r3, sp, #132	; 0x84
 80194c4:	a902      	add	r1, sp, #8
 80194c6:	4628      	mov	r0, r5
 80194c8:	9301      	str	r3, [sp, #4]
 80194ca:	f000 fb0f 	bl	8019aec <_svfiprintf_r>
 80194ce:	1c43      	adds	r3, r0, #1
 80194d0:	bfbc      	itt	lt
 80194d2:	238b      	movlt	r3, #139	; 0x8b
 80194d4:	602b      	strlt	r3, [r5, #0]
 80194d6:	2c00      	cmp	r4, #0
 80194d8:	d0dd      	beq.n	8019496 <sniprintf+0x16>
 80194da:	9b02      	ldr	r3, [sp, #8]
 80194dc:	2200      	movs	r2, #0
 80194de:	701a      	strb	r2, [r3, #0]
 80194e0:	e7d9      	b.n	8019496 <sniprintf+0x16>
 80194e2:	bf00      	nop
 80194e4:	20002138 	.word	0x20002138

080194e8 <__sread>:
 80194e8:	b510      	push	{r4, lr}
 80194ea:	460c      	mov	r4, r1
 80194ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80194f0:	f000 f998 	bl	8019824 <_read_r>
 80194f4:	2800      	cmp	r0, #0
 80194f6:	bfab      	itete	ge
 80194f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80194fa:	89a3      	ldrhlt	r3, [r4, #12]
 80194fc:	181b      	addge	r3, r3, r0
 80194fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019502:	bfac      	ite	ge
 8019504:	6563      	strge	r3, [r4, #84]	; 0x54
 8019506:	81a3      	strhlt	r3, [r4, #12]
 8019508:	bd10      	pop	{r4, pc}

0801950a <__swrite>:
 801950a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801950e:	461f      	mov	r7, r3
 8019510:	898b      	ldrh	r3, [r1, #12]
 8019512:	05db      	lsls	r3, r3, #23
 8019514:	4605      	mov	r5, r0
 8019516:	460c      	mov	r4, r1
 8019518:	4616      	mov	r6, r2
 801951a:	d505      	bpl.n	8019528 <__swrite+0x1e>
 801951c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019520:	2302      	movs	r3, #2
 8019522:	2200      	movs	r2, #0
 8019524:	f000 f96c 	bl	8019800 <_lseek_r>
 8019528:	89a3      	ldrh	r3, [r4, #12]
 801952a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801952e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019532:	81a3      	strh	r3, [r4, #12]
 8019534:	4632      	mov	r2, r6
 8019536:	463b      	mov	r3, r7
 8019538:	4628      	mov	r0, r5
 801953a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801953e:	f000 b9a7 	b.w	8019890 <_write_r>

08019542 <__sseek>:
 8019542:	b510      	push	{r4, lr}
 8019544:	460c      	mov	r4, r1
 8019546:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801954a:	f000 f959 	bl	8019800 <_lseek_r>
 801954e:	1c43      	adds	r3, r0, #1
 8019550:	89a3      	ldrh	r3, [r4, #12]
 8019552:	bf15      	itete	ne
 8019554:	6560      	strne	r0, [r4, #84]	; 0x54
 8019556:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801955a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801955e:	81a3      	strheq	r3, [r4, #12]
 8019560:	bf18      	it	ne
 8019562:	81a3      	strhne	r3, [r4, #12]
 8019564:	bd10      	pop	{r4, pc}

08019566 <__sclose>:
 8019566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801956a:	f000 b8e3 	b.w	8019734 <_close_r>

0801956e <_vsniprintf_r>:
 801956e:	b530      	push	{r4, r5, lr}
 8019570:	4614      	mov	r4, r2
 8019572:	2c00      	cmp	r4, #0
 8019574:	b09b      	sub	sp, #108	; 0x6c
 8019576:	4605      	mov	r5, r0
 8019578:	461a      	mov	r2, r3
 801957a:	da05      	bge.n	8019588 <_vsniprintf_r+0x1a>
 801957c:	238b      	movs	r3, #139	; 0x8b
 801957e:	6003      	str	r3, [r0, #0]
 8019580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019584:	b01b      	add	sp, #108	; 0x6c
 8019586:	bd30      	pop	{r4, r5, pc}
 8019588:	f44f 7302 	mov.w	r3, #520	; 0x208
 801958c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8019590:	bf14      	ite	ne
 8019592:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8019596:	4623      	moveq	r3, r4
 8019598:	9302      	str	r3, [sp, #8]
 801959a:	9305      	str	r3, [sp, #20]
 801959c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80195a0:	9100      	str	r1, [sp, #0]
 80195a2:	9104      	str	r1, [sp, #16]
 80195a4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80195a8:	4669      	mov	r1, sp
 80195aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80195ac:	f000 fa9e 	bl	8019aec <_svfiprintf_r>
 80195b0:	1c43      	adds	r3, r0, #1
 80195b2:	bfbc      	itt	lt
 80195b4:	238b      	movlt	r3, #139	; 0x8b
 80195b6:	602b      	strlt	r3, [r5, #0]
 80195b8:	2c00      	cmp	r4, #0
 80195ba:	d0e3      	beq.n	8019584 <_vsniprintf_r+0x16>
 80195bc:	9b00      	ldr	r3, [sp, #0]
 80195be:	2200      	movs	r2, #0
 80195c0:	701a      	strb	r2, [r3, #0]
 80195c2:	e7df      	b.n	8019584 <_vsniprintf_r+0x16>

080195c4 <vsniprintf>:
 80195c4:	b507      	push	{r0, r1, r2, lr}
 80195c6:	9300      	str	r3, [sp, #0]
 80195c8:	4613      	mov	r3, r2
 80195ca:	460a      	mov	r2, r1
 80195cc:	4601      	mov	r1, r0
 80195ce:	4803      	ldr	r0, [pc, #12]	; (80195dc <vsniprintf+0x18>)
 80195d0:	6800      	ldr	r0, [r0, #0]
 80195d2:	f7ff ffcc 	bl	801956e <_vsniprintf_r>
 80195d6:	b003      	add	sp, #12
 80195d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80195dc:	20002138 	.word	0x20002138

080195e0 <memcmp>:
 80195e0:	b510      	push	{r4, lr}
 80195e2:	3901      	subs	r1, #1
 80195e4:	4402      	add	r2, r0
 80195e6:	4290      	cmp	r0, r2
 80195e8:	d101      	bne.n	80195ee <memcmp+0xe>
 80195ea:	2000      	movs	r0, #0
 80195ec:	e005      	b.n	80195fa <memcmp+0x1a>
 80195ee:	7803      	ldrb	r3, [r0, #0]
 80195f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80195f4:	42a3      	cmp	r3, r4
 80195f6:	d001      	beq.n	80195fc <memcmp+0x1c>
 80195f8:	1b18      	subs	r0, r3, r4
 80195fa:	bd10      	pop	{r4, pc}
 80195fc:	3001      	adds	r0, #1
 80195fe:	e7f2      	b.n	80195e6 <memcmp+0x6>

08019600 <memmove>:
 8019600:	4288      	cmp	r0, r1
 8019602:	b510      	push	{r4, lr}
 8019604:	eb01 0402 	add.w	r4, r1, r2
 8019608:	d902      	bls.n	8019610 <memmove+0x10>
 801960a:	4284      	cmp	r4, r0
 801960c:	4623      	mov	r3, r4
 801960e:	d807      	bhi.n	8019620 <memmove+0x20>
 8019610:	1e43      	subs	r3, r0, #1
 8019612:	42a1      	cmp	r1, r4
 8019614:	d008      	beq.n	8019628 <memmove+0x28>
 8019616:	f811 2b01 	ldrb.w	r2, [r1], #1
 801961a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801961e:	e7f8      	b.n	8019612 <memmove+0x12>
 8019620:	4402      	add	r2, r0
 8019622:	4601      	mov	r1, r0
 8019624:	428a      	cmp	r2, r1
 8019626:	d100      	bne.n	801962a <memmove+0x2a>
 8019628:	bd10      	pop	{r4, pc}
 801962a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801962e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019632:	e7f7      	b.n	8019624 <memmove+0x24>

08019634 <memset>:
 8019634:	4402      	add	r2, r0
 8019636:	4603      	mov	r3, r0
 8019638:	4293      	cmp	r3, r2
 801963a:	d100      	bne.n	801963e <memset+0xa>
 801963c:	4770      	bx	lr
 801963e:	f803 1b01 	strb.w	r1, [r3], #1
 8019642:	e7f9      	b.n	8019638 <memset+0x4>

08019644 <strchr>:
 8019644:	b2c9      	uxtb	r1, r1
 8019646:	4603      	mov	r3, r0
 8019648:	f810 2b01 	ldrb.w	r2, [r0], #1
 801964c:	b11a      	cbz	r2, 8019656 <strchr+0x12>
 801964e:	428a      	cmp	r2, r1
 8019650:	d1f9      	bne.n	8019646 <strchr+0x2>
 8019652:	4618      	mov	r0, r3
 8019654:	4770      	bx	lr
 8019656:	2900      	cmp	r1, #0
 8019658:	bf18      	it	ne
 801965a:	2300      	movne	r3, #0
 801965c:	e7f9      	b.n	8019652 <strchr+0xe>

0801965e <strncmp>:
 801965e:	b510      	push	{r4, lr}
 8019660:	b16a      	cbz	r2, 801967e <strncmp+0x20>
 8019662:	3901      	subs	r1, #1
 8019664:	1884      	adds	r4, r0, r2
 8019666:	f810 2b01 	ldrb.w	r2, [r0], #1
 801966a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801966e:	429a      	cmp	r2, r3
 8019670:	d103      	bne.n	801967a <strncmp+0x1c>
 8019672:	42a0      	cmp	r0, r4
 8019674:	d001      	beq.n	801967a <strncmp+0x1c>
 8019676:	2a00      	cmp	r2, #0
 8019678:	d1f5      	bne.n	8019666 <strncmp+0x8>
 801967a:	1ad0      	subs	r0, r2, r3
 801967c:	bd10      	pop	{r4, pc}
 801967e:	4610      	mov	r0, r2
 8019680:	e7fc      	b.n	801967c <strncmp+0x1e>

08019682 <strncpy>:
 8019682:	b510      	push	{r4, lr}
 8019684:	3901      	subs	r1, #1
 8019686:	4603      	mov	r3, r0
 8019688:	b132      	cbz	r2, 8019698 <strncpy+0x16>
 801968a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801968e:	f803 4b01 	strb.w	r4, [r3], #1
 8019692:	3a01      	subs	r2, #1
 8019694:	2c00      	cmp	r4, #0
 8019696:	d1f7      	bne.n	8019688 <strncpy+0x6>
 8019698:	441a      	add	r2, r3
 801969a:	2100      	movs	r1, #0
 801969c:	4293      	cmp	r3, r2
 801969e:	d100      	bne.n	80196a2 <strncpy+0x20>
 80196a0:	bd10      	pop	{r4, pc}
 80196a2:	f803 1b01 	strb.w	r1, [r3], #1
 80196a6:	e7f9      	b.n	801969c <strncpy+0x1a>

080196a8 <strstr>:
 80196a8:	780a      	ldrb	r2, [r1, #0]
 80196aa:	b570      	push	{r4, r5, r6, lr}
 80196ac:	b96a      	cbnz	r2, 80196ca <strstr+0x22>
 80196ae:	bd70      	pop	{r4, r5, r6, pc}
 80196b0:	429a      	cmp	r2, r3
 80196b2:	d109      	bne.n	80196c8 <strstr+0x20>
 80196b4:	460c      	mov	r4, r1
 80196b6:	4605      	mov	r5, r0
 80196b8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80196bc:	2b00      	cmp	r3, #0
 80196be:	d0f6      	beq.n	80196ae <strstr+0x6>
 80196c0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80196c4:	429e      	cmp	r6, r3
 80196c6:	d0f7      	beq.n	80196b8 <strstr+0x10>
 80196c8:	3001      	adds	r0, #1
 80196ca:	7803      	ldrb	r3, [r0, #0]
 80196cc:	2b00      	cmp	r3, #0
 80196ce:	d1ef      	bne.n	80196b0 <strstr+0x8>
 80196d0:	4618      	mov	r0, r3
 80196d2:	e7ec      	b.n	80196ae <strstr+0x6>

080196d4 <_raise_r>:
 80196d4:	291f      	cmp	r1, #31
 80196d6:	b538      	push	{r3, r4, r5, lr}
 80196d8:	4604      	mov	r4, r0
 80196da:	460d      	mov	r5, r1
 80196dc:	d904      	bls.n	80196e8 <_raise_r+0x14>
 80196de:	2316      	movs	r3, #22
 80196e0:	6003      	str	r3, [r0, #0]
 80196e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80196e6:	bd38      	pop	{r3, r4, r5, pc}
 80196e8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80196ea:	b112      	cbz	r2, 80196f2 <_raise_r+0x1e>
 80196ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80196f0:	b94b      	cbnz	r3, 8019706 <_raise_r+0x32>
 80196f2:	4620      	mov	r0, r4
 80196f4:	f000 f8ba 	bl	801986c <_getpid_r>
 80196f8:	462a      	mov	r2, r5
 80196fa:	4601      	mov	r1, r0
 80196fc:	4620      	mov	r0, r4
 80196fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019702:	f000 b8a1 	b.w	8019848 <_kill_r>
 8019706:	2b01      	cmp	r3, #1
 8019708:	d00a      	beq.n	8019720 <_raise_r+0x4c>
 801970a:	1c59      	adds	r1, r3, #1
 801970c:	d103      	bne.n	8019716 <_raise_r+0x42>
 801970e:	2316      	movs	r3, #22
 8019710:	6003      	str	r3, [r0, #0]
 8019712:	2001      	movs	r0, #1
 8019714:	e7e7      	b.n	80196e6 <_raise_r+0x12>
 8019716:	2400      	movs	r4, #0
 8019718:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801971c:	4628      	mov	r0, r5
 801971e:	4798      	blx	r3
 8019720:	2000      	movs	r0, #0
 8019722:	e7e0      	b.n	80196e6 <_raise_r+0x12>

08019724 <raise>:
 8019724:	4b02      	ldr	r3, [pc, #8]	; (8019730 <raise+0xc>)
 8019726:	4601      	mov	r1, r0
 8019728:	6818      	ldr	r0, [r3, #0]
 801972a:	f7ff bfd3 	b.w	80196d4 <_raise_r>
 801972e:	bf00      	nop
 8019730:	20002138 	.word	0x20002138

08019734 <_close_r>:
 8019734:	b538      	push	{r3, r4, r5, lr}
 8019736:	4d06      	ldr	r5, [pc, #24]	; (8019750 <_close_r+0x1c>)
 8019738:	2300      	movs	r3, #0
 801973a:	4604      	mov	r4, r0
 801973c:	4608      	mov	r0, r1
 801973e:	602b      	str	r3, [r5, #0]
 8019740:	f7e8 f8eb 	bl	800191a <_close>
 8019744:	1c43      	adds	r3, r0, #1
 8019746:	d102      	bne.n	801974e <_close_r+0x1a>
 8019748:	682b      	ldr	r3, [r5, #0]
 801974a:	b103      	cbz	r3, 801974e <_close_r+0x1a>
 801974c:	6023      	str	r3, [r4, #0]
 801974e:	bd38      	pop	{r3, r4, r5, pc}
 8019750:	20010b28 	.word	0x20010b28

08019754 <_reclaim_reent>:
 8019754:	4b29      	ldr	r3, [pc, #164]	; (80197fc <_reclaim_reent+0xa8>)
 8019756:	681b      	ldr	r3, [r3, #0]
 8019758:	4283      	cmp	r3, r0
 801975a:	b570      	push	{r4, r5, r6, lr}
 801975c:	4604      	mov	r4, r0
 801975e:	d04b      	beq.n	80197f8 <_reclaim_reent+0xa4>
 8019760:	69c3      	ldr	r3, [r0, #28]
 8019762:	b143      	cbz	r3, 8019776 <_reclaim_reent+0x22>
 8019764:	68db      	ldr	r3, [r3, #12]
 8019766:	2b00      	cmp	r3, #0
 8019768:	d144      	bne.n	80197f4 <_reclaim_reent+0xa0>
 801976a:	69e3      	ldr	r3, [r4, #28]
 801976c:	6819      	ldr	r1, [r3, #0]
 801976e:	b111      	cbz	r1, 8019776 <_reclaim_reent+0x22>
 8019770:	4620      	mov	r0, r4
 8019772:	f000 f90d 	bl	8019990 <_free_r>
 8019776:	6961      	ldr	r1, [r4, #20]
 8019778:	b111      	cbz	r1, 8019780 <_reclaim_reent+0x2c>
 801977a:	4620      	mov	r0, r4
 801977c:	f000 f908 	bl	8019990 <_free_r>
 8019780:	69e1      	ldr	r1, [r4, #28]
 8019782:	b111      	cbz	r1, 801978a <_reclaim_reent+0x36>
 8019784:	4620      	mov	r0, r4
 8019786:	f000 f903 	bl	8019990 <_free_r>
 801978a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801978c:	b111      	cbz	r1, 8019794 <_reclaim_reent+0x40>
 801978e:	4620      	mov	r0, r4
 8019790:	f000 f8fe 	bl	8019990 <_free_r>
 8019794:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019796:	b111      	cbz	r1, 801979e <_reclaim_reent+0x4a>
 8019798:	4620      	mov	r0, r4
 801979a:	f000 f8f9 	bl	8019990 <_free_r>
 801979e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80197a0:	b111      	cbz	r1, 80197a8 <_reclaim_reent+0x54>
 80197a2:	4620      	mov	r0, r4
 80197a4:	f000 f8f4 	bl	8019990 <_free_r>
 80197a8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80197aa:	b111      	cbz	r1, 80197b2 <_reclaim_reent+0x5e>
 80197ac:	4620      	mov	r0, r4
 80197ae:	f000 f8ef 	bl	8019990 <_free_r>
 80197b2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80197b4:	b111      	cbz	r1, 80197bc <_reclaim_reent+0x68>
 80197b6:	4620      	mov	r0, r4
 80197b8:	f000 f8ea 	bl	8019990 <_free_r>
 80197bc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80197be:	b111      	cbz	r1, 80197c6 <_reclaim_reent+0x72>
 80197c0:	4620      	mov	r0, r4
 80197c2:	f000 f8e5 	bl	8019990 <_free_r>
 80197c6:	6a23      	ldr	r3, [r4, #32]
 80197c8:	b1b3      	cbz	r3, 80197f8 <_reclaim_reent+0xa4>
 80197ca:	4620      	mov	r0, r4
 80197cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80197d0:	4718      	bx	r3
 80197d2:	5949      	ldr	r1, [r1, r5]
 80197d4:	b941      	cbnz	r1, 80197e8 <_reclaim_reent+0x94>
 80197d6:	3504      	adds	r5, #4
 80197d8:	69e3      	ldr	r3, [r4, #28]
 80197da:	2d80      	cmp	r5, #128	; 0x80
 80197dc:	68d9      	ldr	r1, [r3, #12]
 80197de:	d1f8      	bne.n	80197d2 <_reclaim_reent+0x7e>
 80197e0:	4620      	mov	r0, r4
 80197e2:	f000 f8d5 	bl	8019990 <_free_r>
 80197e6:	e7c0      	b.n	801976a <_reclaim_reent+0x16>
 80197e8:	680e      	ldr	r6, [r1, #0]
 80197ea:	4620      	mov	r0, r4
 80197ec:	f000 f8d0 	bl	8019990 <_free_r>
 80197f0:	4631      	mov	r1, r6
 80197f2:	e7ef      	b.n	80197d4 <_reclaim_reent+0x80>
 80197f4:	2500      	movs	r5, #0
 80197f6:	e7ef      	b.n	80197d8 <_reclaim_reent+0x84>
 80197f8:	bd70      	pop	{r4, r5, r6, pc}
 80197fa:	bf00      	nop
 80197fc:	20002138 	.word	0x20002138

08019800 <_lseek_r>:
 8019800:	b538      	push	{r3, r4, r5, lr}
 8019802:	4d07      	ldr	r5, [pc, #28]	; (8019820 <_lseek_r+0x20>)
 8019804:	4604      	mov	r4, r0
 8019806:	4608      	mov	r0, r1
 8019808:	4611      	mov	r1, r2
 801980a:	2200      	movs	r2, #0
 801980c:	602a      	str	r2, [r5, #0]
 801980e:	461a      	mov	r2, r3
 8019810:	f7e8 f8aa 	bl	8001968 <_lseek>
 8019814:	1c43      	adds	r3, r0, #1
 8019816:	d102      	bne.n	801981e <_lseek_r+0x1e>
 8019818:	682b      	ldr	r3, [r5, #0]
 801981a:	b103      	cbz	r3, 801981e <_lseek_r+0x1e>
 801981c:	6023      	str	r3, [r4, #0]
 801981e:	bd38      	pop	{r3, r4, r5, pc}
 8019820:	20010b28 	.word	0x20010b28

08019824 <_read_r>:
 8019824:	b538      	push	{r3, r4, r5, lr}
 8019826:	4d07      	ldr	r5, [pc, #28]	; (8019844 <_read_r+0x20>)
 8019828:	4604      	mov	r4, r0
 801982a:	4608      	mov	r0, r1
 801982c:	4611      	mov	r1, r2
 801982e:	2200      	movs	r2, #0
 8019830:	602a      	str	r2, [r5, #0]
 8019832:	461a      	mov	r2, r3
 8019834:	f7e8 f838 	bl	80018a8 <_read>
 8019838:	1c43      	adds	r3, r0, #1
 801983a:	d102      	bne.n	8019842 <_read_r+0x1e>
 801983c:	682b      	ldr	r3, [r5, #0]
 801983e:	b103      	cbz	r3, 8019842 <_read_r+0x1e>
 8019840:	6023      	str	r3, [r4, #0]
 8019842:	bd38      	pop	{r3, r4, r5, pc}
 8019844:	20010b28 	.word	0x20010b28

08019848 <_kill_r>:
 8019848:	b538      	push	{r3, r4, r5, lr}
 801984a:	4d07      	ldr	r5, [pc, #28]	; (8019868 <_kill_r+0x20>)
 801984c:	2300      	movs	r3, #0
 801984e:	4604      	mov	r4, r0
 8019850:	4608      	mov	r0, r1
 8019852:	4611      	mov	r1, r2
 8019854:	602b      	str	r3, [r5, #0]
 8019856:	f7e8 f80d 	bl	8001874 <_kill>
 801985a:	1c43      	adds	r3, r0, #1
 801985c:	d102      	bne.n	8019864 <_kill_r+0x1c>
 801985e:	682b      	ldr	r3, [r5, #0]
 8019860:	b103      	cbz	r3, 8019864 <_kill_r+0x1c>
 8019862:	6023      	str	r3, [r4, #0]
 8019864:	bd38      	pop	{r3, r4, r5, pc}
 8019866:	bf00      	nop
 8019868:	20010b28 	.word	0x20010b28

0801986c <_getpid_r>:
 801986c:	f7e7 bffa 	b.w	8001864 <_getpid>

08019870 <_sbrk_r>:
 8019870:	b538      	push	{r3, r4, r5, lr}
 8019872:	4d06      	ldr	r5, [pc, #24]	; (801988c <_sbrk_r+0x1c>)
 8019874:	2300      	movs	r3, #0
 8019876:	4604      	mov	r4, r0
 8019878:	4608      	mov	r0, r1
 801987a:	602b      	str	r3, [r5, #0]
 801987c:	f7e8 f882 	bl	8001984 <_sbrk>
 8019880:	1c43      	adds	r3, r0, #1
 8019882:	d102      	bne.n	801988a <_sbrk_r+0x1a>
 8019884:	682b      	ldr	r3, [r5, #0]
 8019886:	b103      	cbz	r3, 801988a <_sbrk_r+0x1a>
 8019888:	6023      	str	r3, [r4, #0]
 801988a:	bd38      	pop	{r3, r4, r5, pc}
 801988c:	20010b28 	.word	0x20010b28

08019890 <_write_r>:
 8019890:	b538      	push	{r3, r4, r5, lr}
 8019892:	4d07      	ldr	r5, [pc, #28]	; (80198b0 <_write_r+0x20>)
 8019894:	4604      	mov	r4, r0
 8019896:	4608      	mov	r0, r1
 8019898:	4611      	mov	r1, r2
 801989a:	2200      	movs	r2, #0
 801989c:	602a      	str	r2, [r5, #0]
 801989e:	461a      	mov	r2, r3
 80198a0:	f7e8 f81f 	bl	80018e2 <_write>
 80198a4:	1c43      	adds	r3, r0, #1
 80198a6:	d102      	bne.n	80198ae <_write_r+0x1e>
 80198a8:	682b      	ldr	r3, [r5, #0]
 80198aa:	b103      	cbz	r3, 80198ae <_write_r+0x1e>
 80198ac:	6023      	str	r3, [r4, #0]
 80198ae:	bd38      	pop	{r3, r4, r5, pc}
 80198b0:	20010b28 	.word	0x20010b28

080198b4 <__errno>:
 80198b4:	4b01      	ldr	r3, [pc, #4]	; (80198bc <__errno+0x8>)
 80198b6:	6818      	ldr	r0, [r3, #0]
 80198b8:	4770      	bx	lr
 80198ba:	bf00      	nop
 80198bc:	20002138 	.word	0x20002138

080198c0 <__libc_init_array>:
 80198c0:	b570      	push	{r4, r5, r6, lr}
 80198c2:	4d0d      	ldr	r5, [pc, #52]	; (80198f8 <__libc_init_array+0x38>)
 80198c4:	4c0d      	ldr	r4, [pc, #52]	; (80198fc <__libc_init_array+0x3c>)
 80198c6:	1b64      	subs	r4, r4, r5
 80198c8:	10a4      	asrs	r4, r4, #2
 80198ca:	2600      	movs	r6, #0
 80198cc:	42a6      	cmp	r6, r4
 80198ce:	d109      	bne.n	80198e4 <__libc_init_array+0x24>
 80198d0:	4d0b      	ldr	r5, [pc, #44]	; (8019900 <__libc_init_array+0x40>)
 80198d2:	4c0c      	ldr	r4, [pc, #48]	; (8019904 <__libc_init_array+0x44>)
 80198d4:	f000 feb6 	bl	801a644 <_init>
 80198d8:	1b64      	subs	r4, r4, r5
 80198da:	10a4      	asrs	r4, r4, #2
 80198dc:	2600      	movs	r6, #0
 80198de:	42a6      	cmp	r6, r4
 80198e0:	d105      	bne.n	80198ee <__libc_init_array+0x2e>
 80198e2:	bd70      	pop	{r4, r5, r6, pc}
 80198e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80198e8:	4798      	blx	r3
 80198ea:	3601      	adds	r6, #1
 80198ec:	e7ee      	b.n	80198cc <__libc_init_array+0xc>
 80198ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80198f2:	4798      	blx	r3
 80198f4:	3601      	adds	r6, #1
 80198f6:	e7f2      	b.n	80198de <__libc_init_array+0x1e>
 80198f8:	0801c0ec 	.word	0x0801c0ec
 80198fc:	0801c0ec 	.word	0x0801c0ec
 8019900:	0801c0ec 	.word	0x0801c0ec
 8019904:	0801c0fc 	.word	0x0801c0fc

08019908 <__retarget_lock_init_recursive>:
 8019908:	4770      	bx	lr

0801990a <__retarget_lock_acquire_recursive>:
 801990a:	4770      	bx	lr

0801990c <__retarget_lock_release_recursive>:
 801990c:	4770      	bx	lr

0801990e <strcpy>:
 801990e:	4603      	mov	r3, r0
 8019910:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019914:	f803 2b01 	strb.w	r2, [r3], #1
 8019918:	2a00      	cmp	r2, #0
 801991a:	d1f9      	bne.n	8019910 <strcpy+0x2>
 801991c:	4770      	bx	lr

0801991e <memcpy>:
 801991e:	440a      	add	r2, r1
 8019920:	4291      	cmp	r1, r2
 8019922:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8019926:	d100      	bne.n	801992a <memcpy+0xc>
 8019928:	4770      	bx	lr
 801992a:	b510      	push	{r4, lr}
 801992c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019930:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019934:	4291      	cmp	r1, r2
 8019936:	d1f9      	bne.n	801992c <memcpy+0xe>
 8019938:	bd10      	pop	{r4, pc}
	...

0801993c <__assert_func>:
 801993c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801993e:	4614      	mov	r4, r2
 8019940:	461a      	mov	r2, r3
 8019942:	4b09      	ldr	r3, [pc, #36]	; (8019968 <__assert_func+0x2c>)
 8019944:	681b      	ldr	r3, [r3, #0]
 8019946:	4605      	mov	r5, r0
 8019948:	68d8      	ldr	r0, [r3, #12]
 801994a:	b14c      	cbz	r4, 8019960 <__assert_func+0x24>
 801994c:	4b07      	ldr	r3, [pc, #28]	; (801996c <__assert_func+0x30>)
 801994e:	9100      	str	r1, [sp, #0]
 8019950:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019954:	4906      	ldr	r1, [pc, #24]	; (8019970 <__assert_func+0x34>)
 8019956:	462b      	mov	r3, r5
 8019958:	f000 fc04 	bl	801a164 <fiprintf>
 801995c:	f7ff fa84 	bl	8018e68 <abort>
 8019960:	4b04      	ldr	r3, [pc, #16]	; (8019974 <__assert_func+0x38>)
 8019962:	461c      	mov	r4, r3
 8019964:	e7f3      	b.n	801994e <__assert_func+0x12>
 8019966:	bf00      	nop
 8019968:	20002138 	.word	0x20002138
 801996c:	0801c074 	.word	0x0801c074
 8019970:	0801c081 	.word	0x0801c081
 8019974:	0801c0af 	.word	0x0801c0af

08019978 <__env_lock>:
 8019978:	4801      	ldr	r0, [pc, #4]	; (8019980 <__env_lock+0x8>)
 801997a:	f7ff bfc6 	b.w	801990a <__retarget_lock_acquire_recursive>
 801997e:	bf00      	nop
 8019980:	20010b2c 	.word	0x20010b2c

08019984 <__env_unlock>:
 8019984:	4801      	ldr	r0, [pc, #4]	; (801998c <__env_unlock+0x8>)
 8019986:	f7ff bfc1 	b.w	801990c <__retarget_lock_release_recursive>
 801998a:	bf00      	nop
 801998c:	20010b2c 	.word	0x20010b2c

08019990 <_free_r>:
 8019990:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019992:	2900      	cmp	r1, #0
 8019994:	d044      	beq.n	8019a20 <_free_r+0x90>
 8019996:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801999a:	9001      	str	r0, [sp, #4]
 801999c:	2b00      	cmp	r3, #0
 801999e:	f1a1 0404 	sub.w	r4, r1, #4
 80199a2:	bfb8      	it	lt
 80199a4:	18e4      	addlt	r4, r4, r3
 80199a6:	f7ff fb7d 	bl	80190a4 <__malloc_lock>
 80199aa:	4a1e      	ldr	r2, [pc, #120]	; (8019a24 <_free_r+0x94>)
 80199ac:	9801      	ldr	r0, [sp, #4]
 80199ae:	6813      	ldr	r3, [r2, #0]
 80199b0:	b933      	cbnz	r3, 80199c0 <_free_r+0x30>
 80199b2:	6063      	str	r3, [r4, #4]
 80199b4:	6014      	str	r4, [r2, #0]
 80199b6:	b003      	add	sp, #12
 80199b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80199bc:	f7ff bb78 	b.w	80190b0 <__malloc_unlock>
 80199c0:	42a3      	cmp	r3, r4
 80199c2:	d908      	bls.n	80199d6 <_free_r+0x46>
 80199c4:	6825      	ldr	r5, [r4, #0]
 80199c6:	1961      	adds	r1, r4, r5
 80199c8:	428b      	cmp	r3, r1
 80199ca:	bf01      	itttt	eq
 80199cc:	6819      	ldreq	r1, [r3, #0]
 80199ce:	685b      	ldreq	r3, [r3, #4]
 80199d0:	1949      	addeq	r1, r1, r5
 80199d2:	6021      	streq	r1, [r4, #0]
 80199d4:	e7ed      	b.n	80199b2 <_free_r+0x22>
 80199d6:	461a      	mov	r2, r3
 80199d8:	685b      	ldr	r3, [r3, #4]
 80199da:	b10b      	cbz	r3, 80199e0 <_free_r+0x50>
 80199dc:	42a3      	cmp	r3, r4
 80199de:	d9fa      	bls.n	80199d6 <_free_r+0x46>
 80199e0:	6811      	ldr	r1, [r2, #0]
 80199e2:	1855      	adds	r5, r2, r1
 80199e4:	42a5      	cmp	r5, r4
 80199e6:	d10b      	bne.n	8019a00 <_free_r+0x70>
 80199e8:	6824      	ldr	r4, [r4, #0]
 80199ea:	4421      	add	r1, r4
 80199ec:	1854      	adds	r4, r2, r1
 80199ee:	42a3      	cmp	r3, r4
 80199f0:	6011      	str	r1, [r2, #0]
 80199f2:	d1e0      	bne.n	80199b6 <_free_r+0x26>
 80199f4:	681c      	ldr	r4, [r3, #0]
 80199f6:	685b      	ldr	r3, [r3, #4]
 80199f8:	6053      	str	r3, [r2, #4]
 80199fa:	440c      	add	r4, r1
 80199fc:	6014      	str	r4, [r2, #0]
 80199fe:	e7da      	b.n	80199b6 <_free_r+0x26>
 8019a00:	d902      	bls.n	8019a08 <_free_r+0x78>
 8019a02:	230c      	movs	r3, #12
 8019a04:	6003      	str	r3, [r0, #0]
 8019a06:	e7d6      	b.n	80199b6 <_free_r+0x26>
 8019a08:	6825      	ldr	r5, [r4, #0]
 8019a0a:	1961      	adds	r1, r4, r5
 8019a0c:	428b      	cmp	r3, r1
 8019a0e:	bf04      	itt	eq
 8019a10:	6819      	ldreq	r1, [r3, #0]
 8019a12:	685b      	ldreq	r3, [r3, #4]
 8019a14:	6063      	str	r3, [r4, #4]
 8019a16:	bf04      	itt	eq
 8019a18:	1949      	addeq	r1, r1, r5
 8019a1a:	6021      	streq	r1, [r4, #0]
 8019a1c:	6054      	str	r4, [r2, #4]
 8019a1e:	e7ca      	b.n	80199b6 <_free_r+0x26>
 8019a20:	b003      	add	sp, #12
 8019a22:	bd30      	pop	{r4, r5, pc}
 8019a24:	200109e4 	.word	0x200109e4

08019a28 <_malloc_usable_size_r>:
 8019a28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019a2c:	1f18      	subs	r0, r3, #4
 8019a2e:	2b00      	cmp	r3, #0
 8019a30:	bfbc      	itt	lt
 8019a32:	580b      	ldrlt	r3, [r1, r0]
 8019a34:	18c0      	addlt	r0, r0, r3
 8019a36:	4770      	bx	lr

08019a38 <__ssputs_r>:
 8019a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019a3c:	688e      	ldr	r6, [r1, #8]
 8019a3e:	461f      	mov	r7, r3
 8019a40:	42be      	cmp	r6, r7
 8019a42:	680b      	ldr	r3, [r1, #0]
 8019a44:	4682      	mov	sl, r0
 8019a46:	460c      	mov	r4, r1
 8019a48:	4690      	mov	r8, r2
 8019a4a:	d82c      	bhi.n	8019aa6 <__ssputs_r+0x6e>
 8019a4c:	898a      	ldrh	r2, [r1, #12]
 8019a4e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019a52:	d026      	beq.n	8019aa2 <__ssputs_r+0x6a>
 8019a54:	6965      	ldr	r5, [r4, #20]
 8019a56:	6909      	ldr	r1, [r1, #16]
 8019a58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019a5c:	eba3 0901 	sub.w	r9, r3, r1
 8019a60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019a64:	1c7b      	adds	r3, r7, #1
 8019a66:	444b      	add	r3, r9
 8019a68:	106d      	asrs	r5, r5, #1
 8019a6a:	429d      	cmp	r5, r3
 8019a6c:	bf38      	it	cc
 8019a6e:	461d      	movcc	r5, r3
 8019a70:	0553      	lsls	r3, r2, #21
 8019a72:	d527      	bpl.n	8019ac4 <__ssputs_r+0x8c>
 8019a74:	4629      	mov	r1, r5
 8019a76:	f7ff fa95 	bl	8018fa4 <_malloc_r>
 8019a7a:	4606      	mov	r6, r0
 8019a7c:	b360      	cbz	r0, 8019ad8 <__ssputs_r+0xa0>
 8019a7e:	6921      	ldr	r1, [r4, #16]
 8019a80:	464a      	mov	r2, r9
 8019a82:	f7ff ff4c 	bl	801991e <memcpy>
 8019a86:	89a3      	ldrh	r3, [r4, #12]
 8019a88:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019a90:	81a3      	strh	r3, [r4, #12]
 8019a92:	6126      	str	r6, [r4, #16]
 8019a94:	6165      	str	r5, [r4, #20]
 8019a96:	444e      	add	r6, r9
 8019a98:	eba5 0509 	sub.w	r5, r5, r9
 8019a9c:	6026      	str	r6, [r4, #0]
 8019a9e:	60a5      	str	r5, [r4, #8]
 8019aa0:	463e      	mov	r6, r7
 8019aa2:	42be      	cmp	r6, r7
 8019aa4:	d900      	bls.n	8019aa8 <__ssputs_r+0x70>
 8019aa6:	463e      	mov	r6, r7
 8019aa8:	6820      	ldr	r0, [r4, #0]
 8019aaa:	4632      	mov	r2, r6
 8019aac:	4641      	mov	r1, r8
 8019aae:	f7ff fda7 	bl	8019600 <memmove>
 8019ab2:	68a3      	ldr	r3, [r4, #8]
 8019ab4:	1b9b      	subs	r3, r3, r6
 8019ab6:	60a3      	str	r3, [r4, #8]
 8019ab8:	6823      	ldr	r3, [r4, #0]
 8019aba:	4433      	add	r3, r6
 8019abc:	6023      	str	r3, [r4, #0]
 8019abe:	2000      	movs	r0, #0
 8019ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ac4:	462a      	mov	r2, r5
 8019ac6:	f7ff fb6d 	bl	80191a4 <_realloc_r>
 8019aca:	4606      	mov	r6, r0
 8019acc:	2800      	cmp	r0, #0
 8019ace:	d1e0      	bne.n	8019a92 <__ssputs_r+0x5a>
 8019ad0:	6921      	ldr	r1, [r4, #16]
 8019ad2:	4650      	mov	r0, sl
 8019ad4:	f7ff ff5c 	bl	8019990 <_free_r>
 8019ad8:	230c      	movs	r3, #12
 8019ada:	f8ca 3000 	str.w	r3, [sl]
 8019ade:	89a3      	ldrh	r3, [r4, #12]
 8019ae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019ae4:	81a3      	strh	r3, [r4, #12]
 8019ae6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019aea:	e7e9      	b.n	8019ac0 <__ssputs_r+0x88>

08019aec <_svfiprintf_r>:
 8019aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019af0:	4698      	mov	r8, r3
 8019af2:	898b      	ldrh	r3, [r1, #12]
 8019af4:	061b      	lsls	r3, r3, #24
 8019af6:	b09d      	sub	sp, #116	; 0x74
 8019af8:	4607      	mov	r7, r0
 8019afa:	460d      	mov	r5, r1
 8019afc:	4614      	mov	r4, r2
 8019afe:	d50e      	bpl.n	8019b1e <_svfiprintf_r+0x32>
 8019b00:	690b      	ldr	r3, [r1, #16]
 8019b02:	b963      	cbnz	r3, 8019b1e <_svfiprintf_r+0x32>
 8019b04:	2140      	movs	r1, #64	; 0x40
 8019b06:	f7ff fa4d 	bl	8018fa4 <_malloc_r>
 8019b0a:	6028      	str	r0, [r5, #0]
 8019b0c:	6128      	str	r0, [r5, #16]
 8019b0e:	b920      	cbnz	r0, 8019b1a <_svfiprintf_r+0x2e>
 8019b10:	230c      	movs	r3, #12
 8019b12:	603b      	str	r3, [r7, #0]
 8019b14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019b18:	e0d0      	b.n	8019cbc <_svfiprintf_r+0x1d0>
 8019b1a:	2340      	movs	r3, #64	; 0x40
 8019b1c:	616b      	str	r3, [r5, #20]
 8019b1e:	2300      	movs	r3, #0
 8019b20:	9309      	str	r3, [sp, #36]	; 0x24
 8019b22:	2320      	movs	r3, #32
 8019b24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019b28:	f8cd 800c 	str.w	r8, [sp, #12]
 8019b2c:	2330      	movs	r3, #48	; 0x30
 8019b2e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8019cd4 <_svfiprintf_r+0x1e8>
 8019b32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019b36:	f04f 0901 	mov.w	r9, #1
 8019b3a:	4623      	mov	r3, r4
 8019b3c:	469a      	mov	sl, r3
 8019b3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019b42:	b10a      	cbz	r2, 8019b48 <_svfiprintf_r+0x5c>
 8019b44:	2a25      	cmp	r2, #37	; 0x25
 8019b46:	d1f9      	bne.n	8019b3c <_svfiprintf_r+0x50>
 8019b48:	ebba 0b04 	subs.w	fp, sl, r4
 8019b4c:	d00b      	beq.n	8019b66 <_svfiprintf_r+0x7a>
 8019b4e:	465b      	mov	r3, fp
 8019b50:	4622      	mov	r2, r4
 8019b52:	4629      	mov	r1, r5
 8019b54:	4638      	mov	r0, r7
 8019b56:	f7ff ff6f 	bl	8019a38 <__ssputs_r>
 8019b5a:	3001      	adds	r0, #1
 8019b5c:	f000 80a9 	beq.w	8019cb2 <_svfiprintf_r+0x1c6>
 8019b60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019b62:	445a      	add	r2, fp
 8019b64:	9209      	str	r2, [sp, #36]	; 0x24
 8019b66:	f89a 3000 	ldrb.w	r3, [sl]
 8019b6a:	2b00      	cmp	r3, #0
 8019b6c:	f000 80a1 	beq.w	8019cb2 <_svfiprintf_r+0x1c6>
 8019b70:	2300      	movs	r3, #0
 8019b72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019b76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019b7a:	f10a 0a01 	add.w	sl, sl, #1
 8019b7e:	9304      	str	r3, [sp, #16]
 8019b80:	9307      	str	r3, [sp, #28]
 8019b82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019b86:	931a      	str	r3, [sp, #104]	; 0x68
 8019b88:	4654      	mov	r4, sl
 8019b8a:	2205      	movs	r2, #5
 8019b8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019b90:	4850      	ldr	r0, [pc, #320]	; (8019cd4 <_svfiprintf_r+0x1e8>)
 8019b92:	f7e6 fb65 	bl	8000260 <memchr>
 8019b96:	9a04      	ldr	r2, [sp, #16]
 8019b98:	b9d8      	cbnz	r0, 8019bd2 <_svfiprintf_r+0xe6>
 8019b9a:	06d0      	lsls	r0, r2, #27
 8019b9c:	bf44      	itt	mi
 8019b9e:	2320      	movmi	r3, #32
 8019ba0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019ba4:	0711      	lsls	r1, r2, #28
 8019ba6:	bf44      	itt	mi
 8019ba8:	232b      	movmi	r3, #43	; 0x2b
 8019baa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019bae:	f89a 3000 	ldrb.w	r3, [sl]
 8019bb2:	2b2a      	cmp	r3, #42	; 0x2a
 8019bb4:	d015      	beq.n	8019be2 <_svfiprintf_r+0xf6>
 8019bb6:	9a07      	ldr	r2, [sp, #28]
 8019bb8:	4654      	mov	r4, sl
 8019bba:	2000      	movs	r0, #0
 8019bbc:	f04f 0c0a 	mov.w	ip, #10
 8019bc0:	4621      	mov	r1, r4
 8019bc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019bc6:	3b30      	subs	r3, #48	; 0x30
 8019bc8:	2b09      	cmp	r3, #9
 8019bca:	d94d      	bls.n	8019c68 <_svfiprintf_r+0x17c>
 8019bcc:	b1b0      	cbz	r0, 8019bfc <_svfiprintf_r+0x110>
 8019bce:	9207      	str	r2, [sp, #28]
 8019bd0:	e014      	b.n	8019bfc <_svfiprintf_r+0x110>
 8019bd2:	eba0 0308 	sub.w	r3, r0, r8
 8019bd6:	fa09 f303 	lsl.w	r3, r9, r3
 8019bda:	4313      	orrs	r3, r2
 8019bdc:	9304      	str	r3, [sp, #16]
 8019bde:	46a2      	mov	sl, r4
 8019be0:	e7d2      	b.n	8019b88 <_svfiprintf_r+0x9c>
 8019be2:	9b03      	ldr	r3, [sp, #12]
 8019be4:	1d19      	adds	r1, r3, #4
 8019be6:	681b      	ldr	r3, [r3, #0]
 8019be8:	9103      	str	r1, [sp, #12]
 8019bea:	2b00      	cmp	r3, #0
 8019bec:	bfbb      	ittet	lt
 8019bee:	425b      	neglt	r3, r3
 8019bf0:	f042 0202 	orrlt.w	r2, r2, #2
 8019bf4:	9307      	strge	r3, [sp, #28]
 8019bf6:	9307      	strlt	r3, [sp, #28]
 8019bf8:	bfb8      	it	lt
 8019bfa:	9204      	strlt	r2, [sp, #16]
 8019bfc:	7823      	ldrb	r3, [r4, #0]
 8019bfe:	2b2e      	cmp	r3, #46	; 0x2e
 8019c00:	d10c      	bne.n	8019c1c <_svfiprintf_r+0x130>
 8019c02:	7863      	ldrb	r3, [r4, #1]
 8019c04:	2b2a      	cmp	r3, #42	; 0x2a
 8019c06:	d134      	bne.n	8019c72 <_svfiprintf_r+0x186>
 8019c08:	9b03      	ldr	r3, [sp, #12]
 8019c0a:	1d1a      	adds	r2, r3, #4
 8019c0c:	681b      	ldr	r3, [r3, #0]
 8019c0e:	9203      	str	r2, [sp, #12]
 8019c10:	2b00      	cmp	r3, #0
 8019c12:	bfb8      	it	lt
 8019c14:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8019c18:	3402      	adds	r4, #2
 8019c1a:	9305      	str	r3, [sp, #20]
 8019c1c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8019ce4 <_svfiprintf_r+0x1f8>
 8019c20:	7821      	ldrb	r1, [r4, #0]
 8019c22:	2203      	movs	r2, #3
 8019c24:	4650      	mov	r0, sl
 8019c26:	f7e6 fb1b 	bl	8000260 <memchr>
 8019c2a:	b138      	cbz	r0, 8019c3c <_svfiprintf_r+0x150>
 8019c2c:	9b04      	ldr	r3, [sp, #16]
 8019c2e:	eba0 000a 	sub.w	r0, r0, sl
 8019c32:	2240      	movs	r2, #64	; 0x40
 8019c34:	4082      	lsls	r2, r0
 8019c36:	4313      	orrs	r3, r2
 8019c38:	3401      	adds	r4, #1
 8019c3a:	9304      	str	r3, [sp, #16]
 8019c3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019c40:	4825      	ldr	r0, [pc, #148]	; (8019cd8 <_svfiprintf_r+0x1ec>)
 8019c42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019c46:	2206      	movs	r2, #6
 8019c48:	f7e6 fb0a 	bl	8000260 <memchr>
 8019c4c:	2800      	cmp	r0, #0
 8019c4e:	d038      	beq.n	8019cc2 <_svfiprintf_r+0x1d6>
 8019c50:	4b22      	ldr	r3, [pc, #136]	; (8019cdc <_svfiprintf_r+0x1f0>)
 8019c52:	bb1b      	cbnz	r3, 8019c9c <_svfiprintf_r+0x1b0>
 8019c54:	9b03      	ldr	r3, [sp, #12]
 8019c56:	3307      	adds	r3, #7
 8019c58:	f023 0307 	bic.w	r3, r3, #7
 8019c5c:	3308      	adds	r3, #8
 8019c5e:	9303      	str	r3, [sp, #12]
 8019c60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c62:	4433      	add	r3, r6
 8019c64:	9309      	str	r3, [sp, #36]	; 0x24
 8019c66:	e768      	b.n	8019b3a <_svfiprintf_r+0x4e>
 8019c68:	fb0c 3202 	mla	r2, ip, r2, r3
 8019c6c:	460c      	mov	r4, r1
 8019c6e:	2001      	movs	r0, #1
 8019c70:	e7a6      	b.n	8019bc0 <_svfiprintf_r+0xd4>
 8019c72:	2300      	movs	r3, #0
 8019c74:	3401      	adds	r4, #1
 8019c76:	9305      	str	r3, [sp, #20]
 8019c78:	4619      	mov	r1, r3
 8019c7a:	f04f 0c0a 	mov.w	ip, #10
 8019c7e:	4620      	mov	r0, r4
 8019c80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019c84:	3a30      	subs	r2, #48	; 0x30
 8019c86:	2a09      	cmp	r2, #9
 8019c88:	d903      	bls.n	8019c92 <_svfiprintf_r+0x1a6>
 8019c8a:	2b00      	cmp	r3, #0
 8019c8c:	d0c6      	beq.n	8019c1c <_svfiprintf_r+0x130>
 8019c8e:	9105      	str	r1, [sp, #20]
 8019c90:	e7c4      	b.n	8019c1c <_svfiprintf_r+0x130>
 8019c92:	fb0c 2101 	mla	r1, ip, r1, r2
 8019c96:	4604      	mov	r4, r0
 8019c98:	2301      	movs	r3, #1
 8019c9a:	e7f0      	b.n	8019c7e <_svfiprintf_r+0x192>
 8019c9c:	ab03      	add	r3, sp, #12
 8019c9e:	9300      	str	r3, [sp, #0]
 8019ca0:	462a      	mov	r2, r5
 8019ca2:	4b0f      	ldr	r3, [pc, #60]	; (8019ce0 <_svfiprintf_r+0x1f4>)
 8019ca4:	a904      	add	r1, sp, #16
 8019ca6:	4638      	mov	r0, r7
 8019ca8:	f3af 8000 	nop.w
 8019cac:	1c42      	adds	r2, r0, #1
 8019cae:	4606      	mov	r6, r0
 8019cb0:	d1d6      	bne.n	8019c60 <_svfiprintf_r+0x174>
 8019cb2:	89ab      	ldrh	r3, [r5, #12]
 8019cb4:	065b      	lsls	r3, r3, #25
 8019cb6:	f53f af2d 	bmi.w	8019b14 <_svfiprintf_r+0x28>
 8019cba:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019cbc:	b01d      	add	sp, #116	; 0x74
 8019cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019cc2:	ab03      	add	r3, sp, #12
 8019cc4:	9300      	str	r3, [sp, #0]
 8019cc6:	462a      	mov	r2, r5
 8019cc8:	4b05      	ldr	r3, [pc, #20]	; (8019ce0 <_svfiprintf_r+0x1f4>)
 8019cca:	a904      	add	r1, sp, #16
 8019ccc:	4638      	mov	r0, r7
 8019cce:	f000 f879 	bl	8019dc4 <_printf_i>
 8019cd2:	e7eb      	b.n	8019cac <_svfiprintf_r+0x1c0>
 8019cd4:	0801c0b0 	.word	0x0801c0b0
 8019cd8:	0801c0ba 	.word	0x0801c0ba
 8019cdc:	00000000 	.word	0x00000000
 8019ce0:	08019a39 	.word	0x08019a39
 8019ce4:	0801c0b6 	.word	0x0801c0b6

08019ce8 <_printf_common>:
 8019ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019cec:	4616      	mov	r6, r2
 8019cee:	4699      	mov	r9, r3
 8019cf0:	688a      	ldr	r2, [r1, #8]
 8019cf2:	690b      	ldr	r3, [r1, #16]
 8019cf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019cf8:	4293      	cmp	r3, r2
 8019cfa:	bfb8      	it	lt
 8019cfc:	4613      	movlt	r3, r2
 8019cfe:	6033      	str	r3, [r6, #0]
 8019d00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019d04:	4607      	mov	r7, r0
 8019d06:	460c      	mov	r4, r1
 8019d08:	b10a      	cbz	r2, 8019d0e <_printf_common+0x26>
 8019d0a:	3301      	adds	r3, #1
 8019d0c:	6033      	str	r3, [r6, #0]
 8019d0e:	6823      	ldr	r3, [r4, #0]
 8019d10:	0699      	lsls	r1, r3, #26
 8019d12:	bf42      	ittt	mi
 8019d14:	6833      	ldrmi	r3, [r6, #0]
 8019d16:	3302      	addmi	r3, #2
 8019d18:	6033      	strmi	r3, [r6, #0]
 8019d1a:	6825      	ldr	r5, [r4, #0]
 8019d1c:	f015 0506 	ands.w	r5, r5, #6
 8019d20:	d106      	bne.n	8019d30 <_printf_common+0x48>
 8019d22:	f104 0a19 	add.w	sl, r4, #25
 8019d26:	68e3      	ldr	r3, [r4, #12]
 8019d28:	6832      	ldr	r2, [r6, #0]
 8019d2a:	1a9b      	subs	r3, r3, r2
 8019d2c:	42ab      	cmp	r3, r5
 8019d2e:	dc26      	bgt.n	8019d7e <_printf_common+0x96>
 8019d30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019d34:	1e13      	subs	r3, r2, #0
 8019d36:	6822      	ldr	r2, [r4, #0]
 8019d38:	bf18      	it	ne
 8019d3a:	2301      	movne	r3, #1
 8019d3c:	0692      	lsls	r2, r2, #26
 8019d3e:	d42b      	bmi.n	8019d98 <_printf_common+0xb0>
 8019d40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019d44:	4649      	mov	r1, r9
 8019d46:	4638      	mov	r0, r7
 8019d48:	47c0      	blx	r8
 8019d4a:	3001      	adds	r0, #1
 8019d4c:	d01e      	beq.n	8019d8c <_printf_common+0xa4>
 8019d4e:	6823      	ldr	r3, [r4, #0]
 8019d50:	6922      	ldr	r2, [r4, #16]
 8019d52:	f003 0306 	and.w	r3, r3, #6
 8019d56:	2b04      	cmp	r3, #4
 8019d58:	bf02      	ittt	eq
 8019d5a:	68e5      	ldreq	r5, [r4, #12]
 8019d5c:	6833      	ldreq	r3, [r6, #0]
 8019d5e:	1aed      	subeq	r5, r5, r3
 8019d60:	68a3      	ldr	r3, [r4, #8]
 8019d62:	bf0c      	ite	eq
 8019d64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019d68:	2500      	movne	r5, #0
 8019d6a:	4293      	cmp	r3, r2
 8019d6c:	bfc4      	itt	gt
 8019d6e:	1a9b      	subgt	r3, r3, r2
 8019d70:	18ed      	addgt	r5, r5, r3
 8019d72:	2600      	movs	r6, #0
 8019d74:	341a      	adds	r4, #26
 8019d76:	42b5      	cmp	r5, r6
 8019d78:	d11a      	bne.n	8019db0 <_printf_common+0xc8>
 8019d7a:	2000      	movs	r0, #0
 8019d7c:	e008      	b.n	8019d90 <_printf_common+0xa8>
 8019d7e:	2301      	movs	r3, #1
 8019d80:	4652      	mov	r2, sl
 8019d82:	4649      	mov	r1, r9
 8019d84:	4638      	mov	r0, r7
 8019d86:	47c0      	blx	r8
 8019d88:	3001      	adds	r0, #1
 8019d8a:	d103      	bne.n	8019d94 <_printf_common+0xac>
 8019d8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019d94:	3501      	adds	r5, #1
 8019d96:	e7c6      	b.n	8019d26 <_printf_common+0x3e>
 8019d98:	18e1      	adds	r1, r4, r3
 8019d9a:	1c5a      	adds	r2, r3, #1
 8019d9c:	2030      	movs	r0, #48	; 0x30
 8019d9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019da2:	4422      	add	r2, r4
 8019da4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019da8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019dac:	3302      	adds	r3, #2
 8019dae:	e7c7      	b.n	8019d40 <_printf_common+0x58>
 8019db0:	2301      	movs	r3, #1
 8019db2:	4622      	mov	r2, r4
 8019db4:	4649      	mov	r1, r9
 8019db6:	4638      	mov	r0, r7
 8019db8:	47c0      	blx	r8
 8019dba:	3001      	adds	r0, #1
 8019dbc:	d0e6      	beq.n	8019d8c <_printf_common+0xa4>
 8019dbe:	3601      	adds	r6, #1
 8019dc0:	e7d9      	b.n	8019d76 <_printf_common+0x8e>
	...

08019dc4 <_printf_i>:
 8019dc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019dc8:	7e0f      	ldrb	r7, [r1, #24]
 8019dca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019dcc:	2f78      	cmp	r7, #120	; 0x78
 8019dce:	4691      	mov	r9, r2
 8019dd0:	4680      	mov	r8, r0
 8019dd2:	460c      	mov	r4, r1
 8019dd4:	469a      	mov	sl, r3
 8019dd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019dda:	d807      	bhi.n	8019dec <_printf_i+0x28>
 8019ddc:	2f62      	cmp	r7, #98	; 0x62
 8019dde:	d80a      	bhi.n	8019df6 <_printf_i+0x32>
 8019de0:	2f00      	cmp	r7, #0
 8019de2:	f000 80d4 	beq.w	8019f8e <_printf_i+0x1ca>
 8019de6:	2f58      	cmp	r7, #88	; 0x58
 8019de8:	f000 80c0 	beq.w	8019f6c <_printf_i+0x1a8>
 8019dec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019df0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019df4:	e03a      	b.n	8019e6c <_printf_i+0xa8>
 8019df6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019dfa:	2b15      	cmp	r3, #21
 8019dfc:	d8f6      	bhi.n	8019dec <_printf_i+0x28>
 8019dfe:	a101      	add	r1, pc, #4	; (adr r1, 8019e04 <_printf_i+0x40>)
 8019e00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019e04:	08019e5d 	.word	0x08019e5d
 8019e08:	08019e71 	.word	0x08019e71
 8019e0c:	08019ded 	.word	0x08019ded
 8019e10:	08019ded 	.word	0x08019ded
 8019e14:	08019ded 	.word	0x08019ded
 8019e18:	08019ded 	.word	0x08019ded
 8019e1c:	08019e71 	.word	0x08019e71
 8019e20:	08019ded 	.word	0x08019ded
 8019e24:	08019ded 	.word	0x08019ded
 8019e28:	08019ded 	.word	0x08019ded
 8019e2c:	08019ded 	.word	0x08019ded
 8019e30:	08019f75 	.word	0x08019f75
 8019e34:	08019e9d 	.word	0x08019e9d
 8019e38:	08019f2f 	.word	0x08019f2f
 8019e3c:	08019ded 	.word	0x08019ded
 8019e40:	08019ded 	.word	0x08019ded
 8019e44:	08019f97 	.word	0x08019f97
 8019e48:	08019ded 	.word	0x08019ded
 8019e4c:	08019e9d 	.word	0x08019e9d
 8019e50:	08019ded 	.word	0x08019ded
 8019e54:	08019ded 	.word	0x08019ded
 8019e58:	08019f37 	.word	0x08019f37
 8019e5c:	682b      	ldr	r3, [r5, #0]
 8019e5e:	1d1a      	adds	r2, r3, #4
 8019e60:	681b      	ldr	r3, [r3, #0]
 8019e62:	602a      	str	r2, [r5, #0]
 8019e64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019e68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019e6c:	2301      	movs	r3, #1
 8019e6e:	e09f      	b.n	8019fb0 <_printf_i+0x1ec>
 8019e70:	6820      	ldr	r0, [r4, #0]
 8019e72:	682b      	ldr	r3, [r5, #0]
 8019e74:	0607      	lsls	r7, r0, #24
 8019e76:	f103 0104 	add.w	r1, r3, #4
 8019e7a:	6029      	str	r1, [r5, #0]
 8019e7c:	d501      	bpl.n	8019e82 <_printf_i+0xbe>
 8019e7e:	681e      	ldr	r6, [r3, #0]
 8019e80:	e003      	b.n	8019e8a <_printf_i+0xc6>
 8019e82:	0646      	lsls	r6, r0, #25
 8019e84:	d5fb      	bpl.n	8019e7e <_printf_i+0xba>
 8019e86:	f9b3 6000 	ldrsh.w	r6, [r3]
 8019e8a:	2e00      	cmp	r6, #0
 8019e8c:	da03      	bge.n	8019e96 <_printf_i+0xd2>
 8019e8e:	232d      	movs	r3, #45	; 0x2d
 8019e90:	4276      	negs	r6, r6
 8019e92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019e96:	485a      	ldr	r0, [pc, #360]	; (801a000 <_printf_i+0x23c>)
 8019e98:	230a      	movs	r3, #10
 8019e9a:	e012      	b.n	8019ec2 <_printf_i+0xfe>
 8019e9c:	682b      	ldr	r3, [r5, #0]
 8019e9e:	6820      	ldr	r0, [r4, #0]
 8019ea0:	1d19      	adds	r1, r3, #4
 8019ea2:	6029      	str	r1, [r5, #0]
 8019ea4:	0605      	lsls	r5, r0, #24
 8019ea6:	d501      	bpl.n	8019eac <_printf_i+0xe8>
 8019ea8:	681e      	ldr	r6, [r3, #0]
 8019eaa:	e002      	b.n	8019eb2 <_printf_i+0xee>
 8019eac:	0641      	lsls	r1, r0, #25
 8019eae:	d5fb      	bpl.n	8019ea8 <_printf_i+0xe4>
 8019eb0:	881e      	ldrh	r6, [r3, #0]
 8019eb2:	4853      	ldr	r0, [pc, #332]	; (801a000 <_printf_i+0x23c>)
 8019eb4:	2f6f      	cmp	r7, #111	; 0x6f
 8019eb6:	bf0c      	ite	eq
 8019eb8:	2308      	moveq	r3, #8
 8019eba:	230a      	movne	r3, #10
 8019ebc:	2100      	movs	r1, #0
 8019ebe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019ec2:	6865      	ldr	r5, [r4, #4]
 8019ec4:	60a5      	str	r5, [r4, #8]
 8019ec6:	2d00      	cmp	r5, #0
 8019ec8:	bfa2      	ittt	ge
 8019eca:	6821      	ldrge	r1, [r4, #0]
 8019ecc:	f021 0104 	bicge.w	r1, r1, #4
 8019ed0:	6021      	strge	r1, [r4, #0]
 8019ed2:	b90e      	cbnz	r6, 8019ed8 <_printf_i+0x114>
 8019ed4:	2d00      	cmp	r5, #0
 8019ed6:	d04b      	beq.n	8019f70 <_printf_i+0x1ac>
 8019ed8:	4615      	mov	r5, r2
 8019eda:	fbb6 f1f3 	udiv	r1, r6, r3
 8019ede:	fb03 6711 	mls	r7, r3, r1, r6
 8019ee2:	5dc7      	ldrb	r7, [r0, r7]
 8019ee4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019ee8:	4637      	mov	r7, r6
 8019eea:	42bb      	cmp	r3, r7
 8019eec:	460e      	mov	r6, r1
 8019eee:	d9f4      	bls.n	8019eda <_printf_i+0x116>
 8019ef0:	2b08      	cmp	r3, #8
 8019ef2:	d10b      	bne.n	8019f0c <_printf_i+0x148>
 8019ef4:	6823      	ldr	r3, [r4, #0]
 8019ef6:	07de      	lsls	r6, r3, #31
 8019ef8:	d508      	bpl.n	8019f0c <_printf_i+0x148>
 8019efa:	6923      	ldr	r3, [r4, #16]
 8019efc:	6861      	ldr	r1, [r4, #4]
 8019efe:	4299      	cmp	r1, r3
 8019f00:	bfde      	ittt	le
 8019f02:	2330      	movle	r3, #48	; 0x30
 8019f04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019f08:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8019f0c:	1b52      	subs	r2, r2, r5
 8019f0e:	6122      	str	r2, [r4, #16]
 8019f10:	f8cd a000 	str.w	sl, [sp]
 8019f14:	464b      	mov	r3, r9
 8019f16:	aa03      	add	r2, sp, #12
 8019f18:	4621      	mov	r1, r4
 8019f1a:	4640      	mov	r0, r8
 8019f1c:	f7ff fee4 	bl	8019ce8 <_printf_common>
 8019f20:	3001      	adds	r0, #1
 8019f22:	d14a      	bne.n	8019fba <_printf_i+0x1f6>
 8019f24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019f28:	b004      	add	sp, #16
 8019f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f2e:	6823      	ldr	r3, [r4, #0]
 8019f30:	f043 0320 	orr.w	r3, r3, #32
 8019f34:	6023      	str	r3, [r4, #0]
 8019f36:	4833      	ldr	r0, [pc, #204]	; (801a004 <_printf_i+0x240>)
 8019f38:	2778      	movs	r7, #120	; 0x78
 8019f3a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8019f3e:	6823      	ldr	r3, [r4, #0]
 8019f40:	6829      	ldr	r1, [r5, #0]
 8019f42:	061f      	lsls	r7, r3, #24
 8019f44:	f851 6b04 	ldr.w	r6, [r1], #4
 8019f48:	d402      	bmi.n	8019f50 <_printf_i+0x18c>
 8019f4a:	065f      	lsls	r7, r3, #25
 8019f4c:	bf48      	it	mi
 8019f4e:	b2b6      	uxthmi	r6, r6
 8019f50:	07df      	lsls	r7, r3, #31
 8019f52:	bf48      	it	mi
 8019f54:	f043 0320 	orrmi.w	r3, r3, #32
 8019f58:	6029      	str	r1, [r5, #0]
 8019f5a:	bf48      	it	mi
 8019f5c:	6023      	strmi	r3, [r4, #0]
 8019f5e:	b91e      	cbnz	r6, 8019f68 <_printf_i+0x1a4>
 8019f60:	6823      	ldr	r3, [r4, #0]
 8019f62:	f023 0320 	bic.w	r3, r3, #32
 8019f66:	6023      	str	r3, [r4, #0]
 8019f68:	2310      	movs	r3, #16
 8019f6a:	e7a7      	b.n	8019ebc <_printf_i+0xf8>
 8019f6c:	4824      	ldr	r0, [pc, #144]	; (801a000 <_printf_i+0x23c>)
 8019f6e:	e7e4      	b.n	8019f3a <_printf_i+0x176>
 8019f70:	4615      	mov	r5, r2
 8019f72:	e7bd      	b.n	8019ef0 <_printf_i+0x12c>
 8019f74:	682b      	ldr	r3, [r5, #0]
 8019f76:	6826      	ldr	r6, [r4, #0]
 8019f78:	6961      	ldr	r1, [r4, #20]
 8019f7a:	1d18      	adds	r0, r3, #4
 8019f7c:	6028      	str	r0, [r5, #0]
 8019f7e:	0635      	lsls	r5, r6, #24
 8019f80:	681b      	ldr	r3, [r3, #0]
 8019f82:	d501      	bpl.n	8019f88 <_printf_i+0x1c4>
 8019f84:	6019      	str	r1, [r3, #0]
 8019f86:	e002      	b.n	8019f8e <_printf_i+0x1ca>
 8019f88:	0670      	lsls	r0, r6, #25
 8019f8a:	d5fb      	bpl.n	8019f84 <_printf_i+0x1c0>
 8019f8c:	8019      	strh	r1, [r3, #0]
 8019f8e:	2300      	movs	r3, #0
 8019f90:	6123      	str	r3, [r4, #16]
 8019f92:	4615      	mov	r5, r2
 8019f94:	e7bc      	b.n	8019f10 <_printf_i+0x14c>
 8019f96:	682b      	ldr	r3, [r5, #0]
 8019f98:	1d1a      	adds	r2, r3, #4
 8019f9a:	602a      	str	r2, [r5, #0]
 8019f9c:	681d      	ldr	r5, [r3, #0]
 8019f9e:	6862      	ldr	r2, [r4, #4]
 8019fa0:	2100      	movs	r1, #0
 8019fa2:	4628      	mov	r0, r5
 8019fa4:	f7e6 f95c 	bl	8000260 <memchr>
 8019fa8:	b108      	cbz	r0, 8019fae <_printf_i+0x1ea>
 8019faa:	1b40      	subs	r0, r0, r5
 8019fac:	6060      	str	r0, [r4, #4]
 8019fae:	6863      	ldr	r3, [r4, #4]
 8019fb0:	6123      	str	r3, [r4, #16]
 8019fb2:	2300      	movs	r3, #0
 8019fb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019fb8:	e7aa      	b.n	8019f10 <_printf_i+0x14c>
 8019fba:	6923      	ldr	r3, [r4, #16]
 8019fbc:	462a      	mov	r2, r5
 8019fbe:	4649      	mov	r1, r9
 8019fc0:	4640      	mov	r0, r8
 8019fc2:	47d0      	blx	sl
 8019fc4:	3001      	adds	r0, #1
 8019fc6:	d0ad      	beq.n	8019f24 <_printf_i+0x160>
 8019fc8:	6823      	ldr	r3, [r4, #0]
 8019fca:	079b      	lsls	r3, r3, #30
 8019fcc:	d413      	bmi.n	8019ff6 <_printf_i+0x232>
 8019fce:	68e0      	ldr	r0, [r4, #12]
 8019fd0:	9b03      	ldr	r3, [sp, #12]
 8019fd2:	4298      	cmp	r0, r3
 8019fd4:	bfb8      	it	lt
 8019fd6:	4618      	movlt	r0, r3
 8019fd8:	e7a6      	b.n	8019f28 <_printf_i+0x164>
 8019fda:	2301      	movs	r3, #1
 8019fdc:	4632      	mov	r2, r6
 8019fde:	4649      	mov	r1, r9
 8019fe0:	4640      	mov	r0, r8
 8019fe2:	47d0      	blx	sl
 8019fe4:	3001      	adds	r0, #1
 8019fe6:	d09d      	beq.n	8019f24 <_printf_i+0x160>
 8019fe8:	3501      	adds	r5, #1
 8019fea:	68e3      	ldr	r3, [r4, #12]
 8019fec:	9903      	ldr	r1, [sp, #12]
 8019fee:	1a5b      	subs	r3, r3, r1
 8019ff0:	42ab      	cmp	r3, r5
 8019ff2:	dcf2      	bgt.n	8019fda <_printf_i+0x216>
 8019ff4:	e7eb      	b.n	8019fce <_printf_i+0x20a>
 8019ff6:	2500      	movs	r5, #0
 8019ff8:	f104 0619 	add.w	r6, r4, #25
 8019ffc:	e7f5      	b.n	8019fea <_printf_i+0x226>
 8019ffe:	bf00      	nop
 801a000:	0801c0c1 	.word	0x0801c0c1
 801a004:	0801c0d2 	.word	0x0801c0d2

0801a008 <__sflush_r>:
 801a008:	898a      	ldrh	r2, [r1, #12]
 801a00a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a00e:	4605      	mov	r5, r0
 801a010:	0710      	lsls	r0, r2, #28
 801a012:	460c      	mov	r4, r1
 801a014:	d458      	bmi.n	801a0c8 <__sflush_r+0xc0>
 801a016:	684b      	ldr	r3, [r1, #4]
 801a018:	2b00      	cmp	r3, #0
 801a01a:	dc05      	bgt.n	801a028 <__sflush_r+0x20>
 801a01c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a01e:	2b00      	cmp	r3, #0
 801a020:	dc02      	bgt.n	801a028 <__sflush_r+0x20>
 801a022:	2000      	movs	r0, #0
 801a024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a028:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a02a:	2e00      	cmp	r6, #0
 801a02c:	d0f9      	beq.n	801a022 <__sflush_r+0x1a>
 801a02e:	2300      	movs	r3, #0
 801a030:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a034:	682f      	ldr	r7, [r5, #0]
 801a036:	6a21      	ldr	r1, [r4, #32]
 801a038:	602b      	str	r3, [r5, #0]
 801a03a:	d032      	beq.n	801a0a2 <__sflush_r+0x9a>
 801a03c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a03e:	89a3      	ldrh	r3, [r4, #12]
 801a040:	075a      	lsls	r2, r3, #29
 801a042:	d505      	bpl.n	801a050 <__sflush_r+0x48>
 801a044:	6863      	ldr	r3, [r4, #4]
 801a046:	1ac0      	subs	r0, r0, r3
 801a048:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a04a:	b10b      	cbz	r3, 801a050 <__sflush_r+0x48>
 801a04c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a04e:	1ac0      	subs	r0, r0, r3
 801a050:	2300      	movs	r3, #0
 801a052:	4602      	mov	r2, r0
 801a054:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a056:	6a21      	ldr	r1, [r4, #32]
 801a058:	4628      	mov	r0, r5
 801a05a:	47b0      	blx	r6
 801a05c:	1c43      	adds	r3, r0, #1
 801a05e:	89a3      	ldrh	r3, [r4, #12]
 801a060:	d106      	bne.n	801a070 <__sflush_r+0x68>
 801a062:	6829      	ldr	r1, [r5, #0]
 801a064:	291d      	cmp	r1, #29
 801a066:	d82b      	bhi.n	801a0c0 <__sflush_r+0xb8>
 801a068:	4a29      	ldr	r2, [pc, #164]	; (801a110 <__sflush_r+0x108>)
 801a06a:	410a      	asrs	r2, r1
 801a06c:	07d6      	lsls	r6, r2, #31
 801a06e:	d427      	bmi.n	801a0c0 <__sflush_r+0xb8>
 801a070:	2200      	movs	r2, #0
 801a072:	6062      	str	r2, [r4, #4]
 801a074:	04d9      	lsls	r1, r3, #19
 801a076:	6922      	ldr	r2, [r4, #16]
 801a078:	6022      	str	r2, [r4, #0]
 801a07a:	d504      	bpl.n	801a086 <__sflush_r+0x7e>
 801a07c:	1c42      	adds	r2, r0, #1
 801a07e:	d101      	bne.n	801a084 <__sflush_r+0x7c>
 801a080:	682b      	ldr	r3, [r5, #0]
 801a082:	b903      	cbnz	r3, 801a086 <__sflush_r+0x7e>
 801a084:	6560      	str	r0, [r4, #84]	; 0x54
 801a086:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a088:	602f      	str	r7, [r5, #0]
 801a08a:	2900      	cmp	r1, #0
 801a08c:	d0c9      	beq.n	801a022 <__sflush_r+0x1a>
 801a08e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a092:	4299      	cmp	r1, r3
 801a094:	d002      	beq.n	801a09c <__sflush_r+0x94>
 801a096:	4628      	mov	r0, r5
 801a098:	f7ff fc7a 	bl	8019990 <_free_r>
 801a09c:	2000      	movs	r0, #0
 801a09e:	6360      	str	r0, [r4, #52]	; 0x34
 801a0a0:	e7c0      	b.n	801a024 <__sflush_r+0x1c>
 801a0a2:	2301      	movs	r3, #1
 801a0a4:	4628      	mov	r0, r5
 801a0a6:	47b0      	blx	r6
 801a0a8:	1c41      	adds	r1, r0, #1
 801a0aa:	d1c8      	bne.n	801a03e <__sflush_r+0x36>
 801a0ac:	682b      	ldr	r3, [r5, #0]
 801a0ae:	2b00      	cmp	r3, #0
 801a0b0:	d0c5      	beq.n	801a03e <__sflush_r+0x36>
 801a0b2:	2b1d      	cmp	r3, #29
 801a0b4:	d001      	beq.n	801a0ba <__sflush_r+0xb2>
 801a0b6:	2b16      	cmp	r3, #22
 801a0b8:	d101      	bne.n	801a0be <__sflush_r+0xb6>
 801a0ba:	602f      	str	r7, [r5, #0]
 801a0bc:	e7b1      	b.n	801a022 <__sflush_r+0x1a>
 801a0be:	89a3      	ldrh	r3, [r4, #12]
 801a0c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a0c4:	81a3      	strh	r3, [r4, #12]
 801a0c6:	e7ad      	b.n	801a024 <__sflush_r+0x1c>
 801a0c8:	690f      	ldr	r7, [r1, #16]
 801a0ca:	2f00      	cmp	r7, #0
 801a0cc:	d0a9      	beq.n	801a022 <__sflush_r+0x1a>
 801a0ce:	0793      	lsls	r3, r2, #30
 801a0d0:	680e      	ldr	r6, [r1, #0]
 801a0d2:	bf08      	it	eq
 801a0d4:	694b      	ldreq	r3, [r1, #20]
 801a0d6:	600f      	str	r7, [r1, #0]
 801a0d8:	bf18      	it	ne
 801a0da:	2300      	movne	r3, #0
 801a0dc:	eba6 0807 	sub.w	r8, r6, r7
 801a0e0:	608b      	str	r3, [r1, #8]
 801a0e2:	f1b8 0f00 	cmp.w	r8, #0
 801a0e6:	dd9c      	ble.n	801a022 <__sflush_r+0x1a>
 801a0e8:	6a21      	ldr	r1, [r4, #32]
 801a0ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a0ec:	4643      	mov	r3, r8
 801a0ee:	463a      	mov	r2, r7
 801a0f0:	4628      	mov	r0, r5
 801a0f2:	47b0      	blx	r6
 801a0f4:	2800      	cmp	r0, #0
 801a0f6:	dc06      	bgt.n	801a106 <__sflush_r+0xfe>
 801a0f8:	89a3      	ldrh	r3, [r4, #12]
 801a0fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a0fe:	81a3      	strh	r3, [r4, #12]
 801a100:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a104:	e78e      	b.n	801a024 <__sflush_r+0x1c>
 801a106:	4407      	add	r7, r0
 801a108:	eba8 0800 	sub.w	r8, r8, r0
 801a10c:	e7e9      	b.n	801a0e2 <__sflush_r+0xda>
 801a10e:	bf00      	nop
 801a110:	dfbffffe 	.word	0xdfbffffe

0801a114 <_fflush_r>:
 801a114:	b538      	push	{r3, r4, r5, lr}
 801a116:	690b      	ldr	r3, [r1, #16]
 801a118:	4605      	mov	r5, r0
 801a11a:	460c      	mov	r4, r1
 801a11c:	b913      	cbnz	r3, 801a124 <_fflush_r+0x10>
 801a11e:	2500      	movs	r5, #0
 801a120:	4628      	mov	r0, r5
 801a122:	bd38      	pop	{r3, r4, r5, pc}
 801a124:	b118      	cbz	r0, 801a12e <_fflush_r+0x1a>
 801a126:	6a03      	ldr	r3, [r0, #32]
 801a128:	b90b      	cbnz	r3, 801a12e <_fflush_r+0x1a>
 801a12a:	f7ff f973 	bl	8019414 <__sinit>
 801a12e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a132:	2b00      	cmp	r3, #0
 801a134:	d0f3      	beq.n	801a11e <_fflush_r+0xa>
 801a136:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a138:	07d0      	lsls	r0, r2, #31
 801a13a:	d404      	bmi.n	801a146 <_fflush_r+0x32>
 801a13c:	0599      	lsls	r1, r3, #22
 801a13e:	d402      	bmi.n	801a146 <_fflush_r+0x32>
 801a140:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a142:	f7ff fbe2 	bl	801990a <__retarget_lock_acquire_recursive>
 801a146:	4628      	mov	r0, r5
 801a148:	4621      	mov	r1, r4
 801a14a:	f7ff ff5d 	bl	801a008 <__sflush_r>
 801a14e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a150:	07da      	lsls	r2, r3, #31
 801a152:	4605      	mov	r5, r0
 801a154:	d4e4      	bmi.n	801a120 <_fflush_r+0xc>
 801a156:	89a3      	ldrh	r3, [r4, #12]
 801a158:	059b      	lsls	r3, r3, #22
 801a15a:	d4e1      	bmi.n	801a120 <_fflush_r+0xc>
 801a15c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a15e:	f7ff fbd5 	bl	801990c <__retarget_lock_release_recursive>
 801a162:	e7dd      	b.n	801a120 <_fflush_r+0xc>

0801a164 <fiprintf>:
 801a164:	b40e      	push	{r1, r2, r3}
 801a166:	b503      	push	{r0, r1, lr}
 801a168:	4601      	mov	r1, r0
 801a16a:	ab03      	add	r3, sp, #12
 801a16c:	4805      	ldr	r0, [pc, #20]	; (801a184 <fiprintf+0x20>)
 801a16e:	f853 2b04 	ldr.w	r2, [r3], #4
 801a172:	6800      	ldr	r0, [r0, #0]
 801a174:	9301      	str	r3, [sp, #4]
 801a176:	f000 f831 	bl	801a1dc <_vfiprintf_r>
 801a17a:	b002      	add	sp, #8
 801a17c:	f85d eb04 	ldr.w	lr, [sp], #4
 801a180:	b003      	add	sp, #12
 801a182:	4770      	bx	lr
 801a184:	20002138 	.word	0x20002138

0801a188 <__sfputc_r>:
 801a188:	6893      	ldr	r3, [r2, #8]
 801a18a:	3b01      	subs	r3, #1
 801a18c:	2b00      	cmp	r3, #0
 801a18e:	b410      	push	{r4}
 801a190:	6093      	str	r3, [r2, #8]
 801a192:	da08      	bge.n	801a1a6 <__sfputc_r+0x1e>
 801a194:	6994      	ldr	r4, [r2, #24]
 801a196:	42a3      	cmp	r3, r4
 801a198:	db01      	blt.n	801a19e <__sfputc_r+0x16>
 801a19a:	290a      	cmp	r1, #10
 801a19c:	d103      	bne.n	801a1a6 <__sfputc_r+0x1e>
 801a19e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a1a2:	f000 b935 	b.w	801a410 <__swbuf_r>
 801a1a6:	6813      	ldr	r3, [r2, #0]
 801a1a8:	1c58      	adds	r0, r3, #1
 801a1aa:	6010      	str	r0, [r2, #0]
 801a1ac:	7019      	strb	r1, [r3, #0]
 801a1ae:	4608      	mov	r0, r1
 801a1b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a1b4:	4770      	bx	lr

0801a1b6 <__sfputs_r>:
 801a1b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a1b8:	4606      	mov	r6, r0
 801a1ba:	460f      	mov	r7, r1
 801a1bc:	4614      	mov	r4, r2
 801a1be:	18d5      	adds	r5, r2, r3
 801a1c0:	42ac      	cmp	r4, r5
 801a1c2:	d101      	bne.n	801a1c8 <__sfputs_r+0x12>
 801a1c4:	2000      	movs	r0, #0
 801a1c6:	e007      	b.n	801a1d8 <__sfputs_r+0x22>
 801a1c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a1cc:	463a      	mov	r2, r7
 801a1ce:	4630      	mov	r0, r6
 801a1d0:	f7ff ffda 	bl	801a188 <__sfputc_r>
 801a1d4:	1c43      	adds	r3, r0, #1
 801a1d6:	d1f3      	bne.n	801a1c0 <__sfputs_r+0xa>
 801a1d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a1dc <_vfiprintf_r>:
 801a1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1e0:	460d      	mov	r5, r1
 801a1e2:	b09d      	sub	sp, #116	; 0x74
 801a1e4:	4614      	mov	r4, r2
 801a1e6:	4698      	mov	r8, r3
 801a1e8:	4606      	mov	r6, r0
 801a1ea:	b118      	cbz	r0, 801a1f4 <_vfiprintf_r+0x18>
 801a1ec:	6a03      	ldr	r3, [r0, #32]
 801a1ee:	b90b      	cbnz	r3, 801a1f4 <_vfiprintf_r+0x18>
 801a1f0:	f7ff f910 	bl	8019414 <__sinit>
 801a1f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a1f6:	07d9      	lsls	r1, r3, #31
 801a1f8:	d405      	bmi.n	801a206 <_vfiprintf_r+0x2a>
 801a1fa:	89ab      	ldrh	r3, [r5, #12]
 801a1fc:	059a      	lsls	r2, r3, #22
 801a1fe:	d402      	bmi.n	801a206 <_vfiprintf_r+0x2a>
 801a200:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a202:	f7ff fb82 	bl	801990a <__retarget_lock_acquire_recursive>
 801a206:	89ab      	ldrh	r3, [r5, #12]
 801a208:	071b      	lsls	r3, r3, #28
 801a20a:	d501      	bpl.n	801a210 <_vfiprintf_r+0x34>
 801a20c:	692b      	ldr	r3, [r5, #16]
 801a20e:	b99b      	cbnz	r3, 801a238 <_vfiprintf_r+0x5c>
 801a210:	4629      	mov	r1, r5
 801a212:	4630      	mov	r0, r6
 801a214:	f000 f93a 	bl	801a48c <__swsetup_r>
 801a218:	b170      	cbz	r0, 801a238 <_vfiprintf_r+0x5c>
 801a21a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a21c:	07dc      	lsls	r4, r3, #31
 801a21e:	d504      	bpl.n	801a22a <_vfiprintf_r+0x4e>
 801a220:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a224:	b01d      	add	sp, #116	; 0x74
 801a226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a22a:	89ab      	ldrh	r3, [r5, #12]
 801a22c:	0598      	lsls	r0, r3, #22
 801a22e:	d4f7      	bmi.n	801a220 <_vfiprintf_r+0x44>
 801a230:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a232:	f7ff fb6b 	bl	801990c <__retarget_lock_release_recursive>
 801a236:	e7f3      	b.n	801a220 <_vfiprintf_r+0x44>
 801a238:	2300      	movs	r3, #0
 801a23a:	9309      	str	r3, [sp, #36]	; 0x24
 801a23c:	2320      	movs	r3, #32
 801a23e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a242:	f8cd 800c 	str.w	r8, [sp, #12]
 801a246:	2330      	movs	r3, #48	; 0x30
 801a248:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801a3fc <_vfiprintf_r+0x220>
 801a24c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a250:	f04f 0901 	mov.w	r9, #1
 801a254:	4623      	mov	r3, r4
 801a256:	469a      	mov	sl, r3
 801a258:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a25c:	b10a      	cbz	r2, 801a262 <_vfiprintf_r+0x86>
 801a25e:	2a25      	cmp	r2, #37	; 0x25
 801a260:	d1f9      	bne.n	801a256 <_vfiprintf_r+0x7a>
 801a262:	ebba 0b04 	subs.w	fp, sl, r4
 801a266:	d00b      	beq.n	801a280 <_vfiprintf_r+0xa4>
 801a268:	465b      	mov	r3, fp
 801a26a:	4622      	mov	r2, r4
 801a26c:	4629      	mov	r1, r5
 801a26e:	4630      	mov	r0, r6
 801a270:	f7ff ffa1 	bl	801a1b6 <__sfputs_r>
 801a274:	3001      	adds	r0, #1
 801a276:	f000 80a9 	beq.w	801a3cc <_vfiprintf_r+0x1f0>
 801a27a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a27c:	445a      	add	r2, fp
 801a27e:	9209      	str	r2, [sp, #36]	; 0x24
 801a280:	f89a 3000 	ldrb.w	r3, [sl]
 801a284:	2b00      	cmp	r3, #0
 801a286:	f000 80a1 	beq.w	801a3cc <_vfiprintf_r+0x1f0>
 801a28a:	2300      	movs	r3, #0
 801a28c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a290:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a294:	f10a 0a01 	add.w	sl, sl, #1
 801a298:	9304      	str	r3, [sp, #16]
 801a29a:	9307      	str	r3, [sp, #28]
 801a29c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a2a0:	931a      	str	r3, [sp, #104]	; 0x68
 801a2a2:	4654      	mov	r4, sl
 801a2a4:	2205      	movs	r2, #5
 801a2a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a2aa:	4854      	ldr	r0, [pc, #336]	; (801a3fc <_vfiprintf_r+0x220>)
 801a2ac:	f7e5 ffd8 	bl	8000260 <memchr>
 801a2b0:	9a04      	ldr	r2, [sp, #16]
 801a2b2:	b9d8      	cbnz	r0, 801a2ec <_vfiprintf_r+0x110>
 801a2b4:	06d1      	lsls	r1, r2, #27
 801a2b6:	bf44      	itt	mi
 801a2b8:	2320      	movmi	r3, #32
 801a2ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a2be:	0713      	lsls	r3, r2, #28
 801a2c0:	bf44      	itt	mi
 801a2c2:	232b      	movmi	r3, #43	; 0x2b
 801a2c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a2c8:	f89a 3000 	ldrb.w	r3, [sl]
 801a2cc:	2b2a      	cmp	r3, #42	; 0x2a
 801a2ce:	d015      	beq.n	801a2fc <_vfiprintf_r+0x120>
 801a2d0:	9a07      	ldr	r2, [sp, #28]
 801a2d2:	4654      	mov	r4, sl
 801a2d4:	2000      	movs	r0, #0
 801a2d6:	f04f 0c0a 	mov.w	ip, #10
 801a2da:	4621      	mov	r1, r4
 801a2dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a2e0:	3b30      	subs	r3, #48	; 0x30
 801a2e2:	2b09      	cmp	r3, #9
 801a2e4:	d94d      	bls.n	801a382 <_vfiprintf_r+0x1a6>
 801a2e6:	b1b0      	cbz	r0, 801a316 <_vfiprintf_r+0x13a>
 801a2e8:	9207      	str	r2, [sp, #28]
 801a2ea:	e014      	b.n	801a316 <_vfiprintf_r+0x13a>
 801a2ec:	eba0 0308 	sub.w	r3, r0, r8
 801a2f0:	fa09 f303 	lsl.w	r3, r9, r3
 801a2f4:	4313      	orrs	r3, r2
 801a2f6:	9304      	str	r3, [sp, #16]
 801a2f8:	46a2      	mov	sl, r4
 801a2fa:	e7d2      	b.n	801a2a2 <_vfiprintf_r+0xc6>
 801a2fc:	9b03      	ldr	r3, [sp, #12]
 801a2fe:	1d19      	adds	r1, r3, #4
 801a300:	681b      	ldr	r3, [r3, #0]
 801a302:	9103      	str	r1, [sp, #12]
 801a304:	2b00      	cmp	r3, #0
 801a306:	bfbb      	ittet	lt
 801a308:	425b      	neglt	r3, r3
 801a30a:	f042 0202 	orrlt.w	r2, r2, #2
 801a30e:	9307      	strge	r3, [sp, #28]
 801a310:	9307      	strlt	r3, [sp, #28]
 801a312:	bfb8      	it	lt
 801a314:	9204      	strlt	r2, [sp, #16]
 801a316:	7823      	ldrb	r3, [r4, #0]
 801a318:	2b2e      	cmp	r3, #46	; 0x2e
 801a31a:	d10c      	bne.n	801a336 <_vfiprintf_r+0x15a>
 801a31c:	7863      	ldrb	r3, [r4, #1]
 801a31e:	2b2a      	cmp	r3, #42	; 0x2a
 801a320:	d134      	bne.n	801a38c <_vfiprintf_r+0x1b0>
 801a322:	9b03      	ldr	r3, [sp, #12]
 801a324:	1d1a      	adds	r2, r3, #4
 801a326:	681b      	ldr	r3, [r3, #0]
 801a328:	9203      	str	r2, [sp, #12]
 801a32a:	2b00      	cmp	r3, #0
 801a32c:	bfb8      	it	lt
 801a32e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801a332:	3402      	adds	r4, #2
 801a334:	9305      	str	r3, [sp, #20]
 801a336:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801a40c <_vfiprintf_r+0x230>
 801a33a:	7821      	ldrb	r1, [r4, #0]
 801a33c:	2203      	movs	r2, #3
 801a33e:	4650      	mov	r0, sl
 801a340:	f7e5 ff8e 	bl	8000260 <memchr>
 801a344:	b138      	cbz	r0, 801a356 <_vfiprintf_r+0x17a>
 801a346:	9b04      	ldr	r3, [sp, #16]
 801a348:	eba0 000a 	sub.w	r0, r0, sl
 801a34c:	2240      	movs	r2, #64	; 0x40
 801a34e:	4082      	lsls	r2, r0
 801a350:	4313      	orrs	r3, r2
 801a352:	3401      	adds	r4, #1
 801a354:	9304      	str	r3, [sp, #16]
 801a356:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a35a:	4829      	ldr	r0, [pc, #164]	; (801a400 <_vfiprintf_r+0x224>)
 801a35c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a360:	2206      	movs	r2, #6
 801a362:	f7e5 ff7d 	bl	8000260 <memchr>
 801a366:	2800      	cmp	r0, #0
 801a368:	d03f      	beq.n	801a3ea <_vfiprintf_r+0x20e>
 801a36a:	4b26      	ldr	r3, [pc, #152]	; (801a404 <_vfiprintf_r+0x228>)
 801a36c:	bb1b      	cbnz	r3, 801a3b6 <_vfiprintf_r+0x1da>
 801a36e:	9b03      	ldr	r3, [sp, #12]
 801a370:	3307      	adds	r3, #7
 801a372:	f023 0307 	bic.w	r3, r3, #7
 801a376:	3308      	adds	r3, #8
 801a378:	9303      	str	r3, [sp, #12]
 801a37a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a37c:	443b      	add	r3, r7
 801a37e:	9309      	str	r3, [sp, #36]	; 0x24
 801a380:	e768      	b.n	801a254 <_vfiprintf_r+0x78>
 801a382:	fb0c 3202 	mla	r2, ip, r2, r3
 801a386:	460c      	mov	r4, r1
 801a388:	2001      	movs	r0, #1
 801a38a:	e7a6      	b.n	801a2da <_vfiprintf_r+0xfe>
 801a38c:	2300      	movs	r3, #0
 801a38e:	3401      	adds	r4, #1
 801a390:	9305      	str	r3, [sp, #20]
 801a392:	4619      	mov	r1, r3
 801a394:	f04f 0c0a 	mov.w	ip, #10
 801a398:	4620      	mov	r0, r4
 801a39a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a39e:	3a30      	subs	r2, #48	; 0x30
 801a3a0:	2a09      	cmp	r2, #9
 801a3a2:	d903      	bls.n	801a3ac <_vfiprintf_r+0x1d0>
 801a3a4:	2b00      	cmp	r3, #0
 801a3a6:	d0c6      	beq.n	801a336 <_vfiprintf_r+0x15a>
 801a3a8:	9105      	str	r1, [sp, #20]
 801a3aa:	e7c4      	b.n	801a336 <_vfiprintf_r+0x15a>
 801a3ac:	fb0c 2101 	mla	r1, ip, r1, r2
 801a3b0:	4604      	mov	r4, r0
 801a3b2:	2301      	movs	r3, #1
 801a3b4:	e7f0      	b.n	801a398 <_vfiprintf_r+0x1bc>
 801a3b6:	ab03      	add	r3, sp, #12
 801a3b8:	9300      	str	r3, [sp, #0]
 801a3ba:	462a      	mov	r2, r5
 801a3bc:	4b12      	ldr	r3, [pc, #72]	; (801a408 <_vfiprintf_r+0x22c>)
 801a3be:	a904      	add	r1, sp, #16
 801a3c0:	4630      	mov	r0, r6
 801a3c2:	f3af 8000 	nop.w
 801a3c6:	4607      	mov	r7, r0
 801a3c8:	1c78      	adds	r0, r7, #1
 801a3ca:	d1d6      	bne.n	801a37a <_vfiprintf_r+0x19e>
 801a3cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a3ce:	07d9      	lsls	r1, r3, #31
 801a3d0:	d405      	bmi.n	801a3de <_vfiprintf_r+0x202>
 801a3d2:	89ab      	ldrh	r3, [r5, #12]
 801a3d4:	059a      	lsls	r2, r3, #22
 801a3d6:	d402      	bmi.n	801a3de <_vfiprintf_r+0x202>
 801a3d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a3da:	f7ff fa97 	bl	801990c <__retarget_lock_release_recursive>
 801a3de:	89ab      	ldrh	r3, [r5, #12]
 801a3e0:	065b      	lsls	r3, r3, #25
 801a3e2:	f53f af1d 	bmi.w	801a220 <_vfiprintf_r+0x44>
 801a3e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a3e8:	e71c      	b.n	801a224 <_vfiprintf_r+0x48>
 801a3ea:	ab03      	add	r3, sp, #12
 801a3ec:	9300      	str	r3, [sp, #0]
 801a3ee:	462a      	mov	r2, r5
 801a3f0:	4b05      	ldr	r3, [pc, #20]	; (801a408 <_vfiprintf_r+0x22c>)
 801a3f2:	a904      	add	r1, sp, #16
 801a3f4:	4630      	mov	r0, r6
 801a3f6:	f7ff fce5 	bl	8019dc4 <_printf_i>
 801a3fa:	e7e4      	b.n	801a3c6 <_vfiprintf_r+0x1ea>
 801a3fc:	0801c0b0 	.word	0x0801c0b0
 801a400:	0801c0ba 	.word	0x0801c0ba
 801a404:	00000000 	.word	0x00000000
 801a408:	0801a1b7 	.word	0x0801a1b7
 801a40c:	0801c0b6 	.word	0x0801c0b6

0801a410 <__swbuf_r>:
 801a410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a412:	460e      	mov	r6, r1
 801a414:	4614      	mov	r4, r2
 801a416:	4605      	mov	r5, r0
 801a418:	b118      	cbz	r0, 801a422 <__swbuf_r+0x12>
 801a41a:	6a03      	ldr	r3, [r0, #32]
 801a41c:	b90b      	cbnz	r3, 801a422 <__swbuf_r+0x12>
 801a41e:	f7fe fff9 	bl	8019414 <__sinit>
 801a422:	69a3      	ldr	r3, [r4, #24]
 801a424:	60a3      	str	r3, [r4, #8]
 801a426:	89a3      	ldrh	r3, [r4, #12]
 801a428:	071a      	lsls	r2, r3, #28
 801a42a:	d525      	bpl.n	801a478 <__swbuf_r+0x68>
 801a42c:	6923      	ldr	r3, [r4, #16]
 801a42e:	b31b      	cbz	r3, 801a478 <__swbuf_r+0x68>
 801a430:	6823      	ldr	r3, [r4, #0]
 801a432:	6922      	ldr	r2, [r4, #16]
 801a434:	1a98      	subs	r0, r3, r2
 801a436:	6963      	ldr	r3, [r4, #20]
 801a438:	b2f6      	uxtb	r6, r6
 801a43a:	4283      	cmp	r3, r0
 801a43c:	4637      	mov	r7, r6
 801a43e:	dc04      	bgt.n	801a44a <__swbuf_r+0x3a>
 801a440:	4621      	mov	r1, r4
 801a442:	4628      	mov	r0, r5
 801a444:	f7ff fe66 	bl	801a114 <_fflush_r>
 801a448:	b9e0      	cbnz	r0, 801a484 <__swbuf_r+0x74>
 801a44a:	68a3      	ldr	r3, [r4, #8]
 801a44c:	3b01      	subs	r3, #1
 801a44e:	60a3      	str	r3, [r4, #8]
 801a450:	6823      	ldr	r3, [r4, #0]
 801a452:	1c5a      	adds	r2, r3, #1
 801a454:	6022      	str	r2, [r4, #0]
 801a456:	701e      	strb	r6, [r3, #0]
 801a458:	6962      	ldr	r2, [r4, #20]
 801a45a:	1c43      	adds	r3, r0, #1
 801a45c:	429a      	cmp	r2, r3
 801a45e:	d004      	beq.n	801a46a <__swbuf_r+0x5a>
 801a460:	89a3      	ldrh	r3, [r4, #12]
 801a462:	07db      	lsls	r3, r3, #31
 801a464:	d506      	bpl.n	801a474 <__swbuf_r+0x64>
 801a466:	2e0a      	cmp	r6, #10
 801a468:	d104      	bne.n	801a474 <__swbuf_r+0x64>
 801a46a:	4621      	mov	r1, r4
 801a46c:	4628      	mov	r0, r5
 801a46e:	f7ff fe51 	bl	801a114 <_fflush_r>
 801a472:	b938      	cbnz	r0, 801a484 <__swbuf_r+0x74>
 801a474:	4638      	mov	r0, r7
 801a476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a478:	4621      	mov	r1, r4
 801a47a:	4628      	mov	r0, r5
 801a47c:	f000 f806 	bl	801a48c <__swsetup_r>
 801a480:	2800      	cmp	r0, #0
 801a482:	d0d5      	beq.n	801a430 <__swbuf_r+0x20>
 801a484:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a488:	e7f4      	b.n	801a474 <__swbuf_r+0x64>
	...

0801a48c <__swsetup_r>:
 801a48c:	b538      	push	{r3, r4, r5, lr}
 801a48e:	4b2a      	ldr	r3, [pc, #168]	; (801a538 <__swsetup_r+0xac>)
 801a490:	4605      	mov	r5, r0
 801a492:	6818      	ldr	r0, [r3, #0]
 801a494:	460c      	mov	r4, r1
 801a496:	b118      	cbz	r0, 801a4a0 <__swsetup_r+0x14>
 801a498:	6a03      	ldr	r3, [r0, #32]
 801a49a:	b90b      	cbnz	r3, 801a4a0 <__swsetup_r+0x14>
 801a49c:	f7fe ffba 	bl	8019414 <__sinit>
 801a4a0:	89a3      	ldrh	r3, [r4, #12]
 801a4a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a4a6:	0718      	lsls	r0, r3, #28
 801a4a8:	d422      	bmi.n	801a4f0 <__swsetup_r+0x64>
 801a4aa:	06d9      	lsls	r1, r3, #27
 801a4ac:	d407      	bmi.n	801a4be <__swsetup_r+0x32>
 801a4ae:	2309      	movs	r3, #9
 801a4b0:	602b      	str	r3, [r5, #0]
 801a4b2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a4b6:	81a3      	strh	r3, [r4, #12]
 801a4b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a4bc:	e034      	b.n	801a528 <__swsetup_r+0x9c>
 801a4be:	0758      	lsls	r0, r3, #29
 801a4c0:	d512      	bpl.n	801a4e8 <__swsetup_r+0x5c>
 801a4c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a4c4:	b141      	cbz	r1, 801a4d8 <__swsetup_r+0x4c>
 801a4c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a4ca:	4299      	cmp	r1, r3
 801a4cc:	d002      	beq.n	801a4d4 <__swsetup_r+0x48>
 801a4ce:	4628      	mov	r0, r5
 801a4d0:	f7ff fa5e 	bl	8019990 <_free_r>
 801a4d4:	2300      	movs	r3, #0
 801a4d6:	6363      	str	r3, [r4, #52]	; 0x34
 801a4d8:	89a3      	ldrh	r3, [r4, #12]
 801a4da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a4de:	81a3      	strh	r3, [r4, #12]
 801a4e0:	2300      	movs	r3, #0
 801a4e2:	6063      	str	r3, [r4, #4]
 801a4e4:	6923      	ldr	r3, [r4, #16]
 801a4e6:	6023      	str	r3, [r4, #0]
 801a4e8:	89a3      	ldrh	r3, [r4, #12]
 801a4ea:	f043 0308 	orr.w	r3, r3, #8
 801a4ee:	81a3      	strh	r3, [r4, #12]
 801a4f0:	6923      	ldr	r3, [r4, #16]
 801a4f2:	b94b      	cbnz	r3, 801a508 <__swsetup_r+0x7c>
 801a4f4:	89a3      	ldrh	r3, [r4, #12]
 801a4f6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a4fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a4fe:	d003      	beq.n	801a508 <__swsetup_r+0x7c>
 801a500:	4621      	mov	r1, r4
 801a502:	4628      	mov	r0, r5
 801a504:	f000 f840 	bl	801a588 <__smakebuf_r>
 801a508:	89a0      	ldrh	r0, [r4, #12]
 801a50a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a50e:	f010 0301 	ands.w	r3, r0, #1
 801a512:	d00a      	beq.n	801a52a <__swsetup_r+0x9e>
 801a514:	2300      	movs	r3, #0
 801a516:	60a3      	str	r3, [r4, #8]
 801a518:	6963      	ldr	r3, [r4, #20]
 801a51a:	425b      	negs	r3, r3
 801a51c:	61a3      	str	r3, [r4, #24]
 801a51e:	6923      	ldr	r3, [r4, #16]
 801a520:	b943      	cbnz	r3, 801a534 <__swsetup_r+0xa8>
 801a522:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a526:	d1c4      	bne.n	801a4b2 <__swsetup_r+0x26>
 801a528:	bd38      	pop	{r3, r4, r5, pc}
 801a52a:	0781      	lsls	r1, r0, #30
 801a52c:	bf58      	it	pl
 801a52e:	6963      	ldrpl	r3, [r4, #20]
 801a530:	60a3      	str	r3, [r4, #8]
 801a532:	e7f4      	b.n	801a51e <__swsetup_r+0x92>
 801a534:	2000      	movs	r0, #0
 801a536:	e7f7      	b.n	801a528 <__swsetup_r+0x9c>
 801a538:	20002138 	.word	0x20002138

0801a53c <__swhatbuf_r>:
 801a53c:	b570      	push	{r4, r5, r6, lr}
 801a53e:	460c      	mov	r4, r1
 801a540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a544:	2900      	cmp	r1, #0
 801a546:	b096      	sub	sp, #88	; 0x58
 801a548:	4615      	mov	r5, r2
 801a54a:	461e      	mov	r6, r3
 801a54c:	da0d      	bge.n	801a56a <__swhatbuf_r+0x2e>
 801a54e:	89a3      	ldrh	r3, [r4, #12]
 801a550:	f013 0f80 	tst.w	r3, #128	; 0x80
 801a554:	f04f 0100 	mov.w	r1, #0
 801a558:	bf0c      	ite	eq
 801a55a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801a55e:	2340      	movne	r3, #64	; 0x40
 801a560:	2000      	movs	r0, #0
 801a562:	6031      	str	r1, [r6, #0]
 801a564:	602b      	str	r3, [r5, #0]
 801a566:	b016      	add	sp, #88	; 0x58
 801a568:	bd70      	pop	{r4, r5, r6, pc}
 801a56a:	466a      	mov	r2, sp
 801a56c:	f000 f848 	bl	801a600 <_fstat_r>
 801a570:	2800      	cmp	r0, #0
 801a572:	dbec      	blt.n	801a54e <__swhatbuf_r+0x12>
 801a574:	9901      	ldr	r1, [sp, #4]
 801a576:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801a57a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801a57e:	4259      	negs	r1, r3
 801a580:	4159      	adcs	r1, r3
 801a582:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a586:	e7eb      	b.n	801a560 <__swhatbuf_r+0x24>

0801a588 <__smakebuf_r>:
 801a588:	898b      	ldrh	r3, [r1, #12]
 801a58a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a58c:	079d      	lsls	r5, r3, #30
 801a58e:	4606      	mov	r6, r0
 801a590:	460c      	mov	r4, r1
 801a592:	d507      	bpl.n	801a5a4 <__smakebuf_r+0x1c>
 801a594:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a598:	6023      	str	r3, [r4, #0]
 801a59a:	6123      	str	r3, [r4, #16]
 801a59c:	2301      	movs	r3, #1
 801a59e:	6163      	str	r3, [r4, #20]
 801a5a0:	b002      	add	sp, #8
 801a5a2:	bd70      	pop	{r4, r5, r6, pc}
 801a5a4:	ab01      	add	r3, sp, #4
 801a5a6:	466a      	mov	r2, sp
 801a5a8:	f7ff ffc8 	bl	801a53c <__swhatbuf_r>
 801a5ac:	9900      	ldr	r1, [sp, #0]
 801a5ae:	4605      	mov	r5, r0
 801a5b0:	4630      	mov	r0, r6
 801a5b2:	f7fe fcf7 	bl	8018fa4 <_malloc_r>
 801a5b6:	b948      	cbnz	r0, 801a5cc <__smakebuf_r+0x44>
 801a5b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a5bc:	059a      	lsls	r2, r3, #22
 801a5be:	d4ef      	bmi.n	801a5a0 <__smakebuf_r+0x18>
 801a5c0:	f023 0303 	bic.w	r3, r3, #3
 801a5c4:	f043 0302 	orr.w	r3, r3, #2
 801a5c8:	81a3      	strh	r3, [r4, #12]
 801a5ca:	e7e3      	b.n	801a594 <__smakebuf_r+0xc>
 801a5cc:	89a3      	ldrh	r3, [r4, #12]
 801a5ce:	6020      	str	r0, [r4, #0]
 801a5d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a5d4:	81a3      	strh	r3, [r4, #12]
 801a5d6:	9b00      	ldr	r3, [sp, #0]
 801a5d8:	6163      	str	r3, [r4, #20]
 801a5da:	9b01      	ldr	r3, [sp, #4]
 801a5dc:	6120      	str	r0, [r4, #16]
 801a5de:	b15b      	cbz	r3, 801a5f8 <__smakebuf_r+0x70>
 801a5e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a5e4:	4630      	mov	r0, r6
 801a5e6:	f000 f81d 	bl	801a624 <_isatty_r>
 801a5ea:	b128      	cbz	r0, 801a5f8 <__smakebuf_r+0x70>
 801a5ec:	89a3      	ldrh	r3, [r4, #12]
 801a5ee:	f023 0303 	bic.w	r3, r3, #3
 801a5f2:	f043 0301 	orr.w	r3, r3, #1
 801a5f6:	81a3      	strh	r3, [r4, #12]
 801a5f8:	89a3      	ldrh	r3, [r4, #12]
 801a5fa:	431d      	orrs	r5, r3
 801a5fc:	81a5      	strh	r5, [r4, #12]
 801a5fe:	e7cf      	b.n	801a5a0 <__smakebuf_r+0x18>

0801a600 <_fstat_r>:
 801a600:	b538      	push	{r3, r4, r5, lr}
 801a602:	4d07      	ldr	r5, [pc, #28]	; (801a620 <_fstat_r+0x20>)
 801a604:	2300      	movs	r3, #0
 801a606:	4604      	mov	r4, r0
 801a608:	4608      	mov	r0, r1
 801a60a:	4611      	mov	r1, r2
 801a60c:	602b      	str	r3, [r5, #0]
 801a60e:	f7e7 f990 	bl	8001932 <_fstat>
 801a612:	1c43      	adds	r3, r0, #1
 801a614:	d102      	bne.n	801a61c <_fstat_r+0x1c>
 801a616:	682b      	ldr	r3, [r5, #0]
 801a618:	b103      	cbz	r3, 801a61c <_fstat_r+0x1c>
 801a61a:	6023      	str	r3, [r4, #0]
 801a61c:	bd38      	pop	{r3, r4, r5, pc}
 801a61e:	bf00      	nop
 801a620:	20010b28 	.word	0x20010b28

0801a624 <_isatty_r>:
 801a624:	b538      	push	{r3, r4, r5, lr}
 801a626:	4d06      	ldr	r5, [pc, #24]	; (801a640 <_isatty_r+0x1c>)
 801a628:	2300      	movs	r3, #0
 801a62a:	4604      	mov	r4, r0
 801a62c:	4608      	mov	r0, r1
 801a62e:	602b      	str	r3, [r5, #0]
 801a630:	f7e7 f98f 	bl	8001952 <_isatty>
 801a634:	1c43      	adds	r3, r0, #1
 801a636:	d102      	bne.n	801a63e <_isatty_r+0x1a>
 801a638:	682b      	ldr	r3, [r5, #0]
 801a63a:	b103      	cbz	r3, 801a63e <_isatty_r+0x1a>
 801a63c:	6023      	str	r3, [r4, #0]
 801a63e:	bd38      	pop	{r3, r4, r5, pc}
 801a640:	20010b28 	.word	0x20010b28

0801a644 <_init>:
 801a644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a646:	bf00      	nop
 801a648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a64a:	bc08      	pop	{r3}
 801a64c:	469e      	mov	lr, r3
 801a64e:	4770      	bx	lr

0801a650 <_fini>:
 801a650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a652:	bf00      	nop
 801a654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a656:	bc08      	pop	{r3}
 801a658:	469e      	mov	lr, r3
 801a65a:	4770      	bx	lr
